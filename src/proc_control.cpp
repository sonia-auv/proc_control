//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// File: proc_control.cpp
//
// Code generated for Simulink model 'proc_control'.
//
// Model version                  : 3.35
// Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021
// C/C++ source code generated on : Thu Jun  2 22:53:18 2022
//
// Target selection: ert.tlc
// Embedded hardware selection: ARM Compatible->ARM 64-bit (LLP64)
// Code generation objectives: Unspecified
// Validation result: Not run
//
#include "proc_control.h"
#include "rtwtypes.h"
#include "proc_control_types.h"
#include <cmath>
#include <cstring>
#include "trisolve_jVll4a1A.h"
#include "eye_4CWHrAiR.h"
#include "rt_urand_Upu32_Yd_f_pw_snf.h"
#include <math.h>
#include "rt_defines.h"
#include "plook_u32u16_binckpan.h"
#include "plook_u32d_binckpang.h"
#include "plook_u32d_binckpan.h"
#include "div_nde_s32_floor.h"
#include "zero_crossing_types.h"

extern "C" {

#include "rt_nonfinite.h"

}
// Named constants for MATLAB Function: '<S176>/FixedHorizonOptimizer'
  const int32_T proc_control_degrees
{
  25
};
const int32_T proc_control_nu{ 8 };

const int32_T proc_control_ny{ 13 };

static void rate_scheduler(proc_control::RT_MODEL_proc_control_T *const
  proc_control_M);

//
//         This function updates active task flag for each subrate.
//         The function is called at model base rate, hence the
//         generated code self-manages all its subrates.
//
static void rate_scheduler(proc_control::RT_MODEL_proc_control_T *const
  proc_control_M)
{
  // Compute which subrates run during the next base time step.  Subrates
  //  are an integer multiple of the base rate counter.  Therefore, the subtask
  //  counter is reset when it reaches its limit (zero means run).

  (proc_control_M->Timing.TaskCounters.TID[1])++;
  if ((proc_control_M->Timing.TaskCounters.TID[1]) > 1) {// Sample time: [0.04s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[1] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[2])++;
  if ((proc_control_M->Timing.TaskCounters.TID[2]) > 4) {// Sample time: [0.1s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[2] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[3])++;
  if ((proc_control_M->Timing.TaskCounters.TID[3]) > 49) {// Sample time: [1.0s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[3] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[4])++;
  if ((proc_control_M->Timing.TaskCounters.TID[4]) > 99) {// Sample time: [2.0s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[4] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[5])++;
  if ((proc_control_M->Timing.TaskCounters.TID[5]) > 249) {// Sample time: [5.0s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[5] = 0;
  }
}

//
// Output and update for atomic system:
//    '<S241>/ '
//    '<S243>/ '
//
void proc_control::proc_control_u(real_T rtu_u, real_T rtu_u_b, real_T rtu_u_l,
  real_T rtu_u_p, real_T rty_y[4])
{
  real_T absxk;
  real_T d;
  real_T scale;
  real_T t;
  int32_T k;
  boolean_T x[4];
  boolean_T exitg1;
  boolean_T y;

  // SignalConversion generated from: '<S248>/ SFunction '
  rty_y[0] = rtu_u;
  rty_y[1] = rtu_u_b;
  rty_y[2] = rtu_u_l;
  rty_y[3] = rtu_u_p;
  scale = 3.3121686421112381E-170;
  absxk = std::abs(rty_y[0]);
  if (absxk > 3.3121686421112381E-170) {
    d = 1.0;
    scale = absxk;
  } else {
    t = absxk / 3.3121686421112381E-170;
    d = t * t;
  }

  absxk = std::abs(rty_y[1]);
  if (absxk > scale) {
    t = scale / absxk;
    d = d * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    d += t * t;
  }

  absxk = std::abs(rty_y[2]);
  if (absxk > scale) {
    t = scale / absxk;
    d = d * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    d += t * t;
  }

  absxk = std::abs(rty_y[3]);
  if (absxk > scale) {
    t = scale / absxk;
    d = d * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    d += t * t;
  }

  d = scale * std::sqrt(d);
  rty_y[0] /= d;
  x[0] = std::isnan(rty_y[0]);
  rty_y[1] /= d;
  x[1] = std::isnan(rty_y[1]);
  rty_y[2] /= d;
  x[2] = std::isnan(rty_y[2]);
  rty_y[3] /= d;
  x[3] = std::isnan(rty_y[3]);
  y = true;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k < 4)) {
    if (!x[k]) {
      y = false;
      exitg1 = true;
    } else {
      k++;
    }
  }

  if (y) {
    rty_y[0] = 1.0;
    rty_y[1] = 0.0;
    rty_y[2] = 0.0;
    rty_y[3] = 0.0;
  }
}

// Function for MATLAB Function: '<S295>/Correct'
real_T proc_control::proc_control_xnrm2_KuvT0oF6(int32_T n, const real_T x[140],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_f = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_B.absxk_mo = std::abs(x[k - 1]);
        if (proc_control_B.absxk_mo > proc_control_B.scale_f) {
          proc_control_B.t_m = proc_control_B.scale_f / proc_control_B.absxk_mo;
          y = y * proc_control_B.t_m * proc_control_B.t_m + 1.0;
          proc_control_B.scale_f = proc_control_B.absxk_mo;
        } else {
          proc_control_B.t_m = proc_control_B.absxk_mo / proc_control_B.scale_f;
          y += proc_control_B.t_m * proc_control_B.t_m;
        }
      }

      y = proc_control_B.scale_f * std::sqrt(y);
    }
  }

  return y;
}

real_T proc_control::proc_control_rt_hypotd_snf(real_T u0, real_T u1)
{
  real_T y;
  proc_control_B.a_a = std::abs(u0);
  y = std::abs(u1);
  if (proc_control_B.a_a < y) {
    proc_control_B.a_a /= y;
    y *= std::sqrt(proc_control_B.a_a * proc_control_B.a_a + 1.0);
  } else if (proc_control_B.a_a > y) {
    y /= proc_control_B.a_a;
    y = std::sqrt(y * y + 1.0) * proc_control_B.a_a;
  } else if (!std::isnan(y)) {
    y = proc_control_B.a_a * 1.4142135623730951;
  }

  return y;
}

// Function for MATLAB Function: '<S295>/Correct'
void proc_control::proc_control_xgemv_AUXWxjLv(int32_T m, int32_T n, const
  real_T A[140], int32_T ia0, const real_T x[140], int32_T ix0, real_T y[7])
{
  if ((m != 0) && (n != 0)) {
    proc_control_B.b_iy_k1 = 0;
    while (proc_control_B.b_iy_k1 <= n - 1) {
      y[proc_control_B.b_iy_k1] = 0.0;
      proc_control_B.b_iy_k1++;
    }

    proc_control_B.b_iy_k1 = 0;
    proc_control_B.b_p = (n - 1) * 20 + ia0;
    proc_control_B.iac_eq = ia0;
    while (proc_control_B.iac_eq <= proc_control_B.b_p) {
      int32_T d;
      proc_control_B.ix_pp = ix0;
      proc_control_B.c_pd = 0.0;
      d = (proc_control_B.iac_eq + m) - 1;
      for (int32_T ia{proc_control_B.iac_eq}; ia <= d; ia++) {
        proc_control_B.c_pd += A[ia - 1] * x[proc_control_B.ix_pp - 1];
        proc_control_B.ix_pp++;
      }

      y[proc_control_B.b_iy_k1] += proc_control_B.c_pd;
      proc_control_B.b_iy_k1++;
      proc_control_B.iac_eq += 20;
    }
  }
}

// Function for MATLAB Function: '<S295>/Correct'
void proc_control::proc_control_xgerc_aQMWzodX(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[7], real_T A[140], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA_c = ia0 - 1;
    proc_control_B.jy_jy = 0;
    proc_control_B.j_n = 0;
    while (proc_control_B.j_n <= n - 1) {
      if (y[proc_control_B.jy_jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        proc_control_B.temp_fa = y[proc_control_B.jy_jy] * alpha1;
        proc_control_B.ix_b = ix0;
        ijA = proc_control_B.jA_c;
        b = m + proc_control_B.jA_c;
        while (ijA + 1 <= b) {
          A[ijA] += A[proc_control_B.ix_b - 1] * proc_control_B.temp_fa;
          proc_control_B.ix_b++;
          ijA++;
        }
      }

      proc_control_B.jy_jy++;
      proc_control_B.jA_c += 20;
      proc_control_B.j_n++;
    }
  }
}

// Function for MATLAB Function: '<S295>/Correct'
void proc_control::proc_control_qrFactor_MMa7wW5h(const real_T A[91], const
  real_T S[169], const real_T Ns[49], real_T b_S[49])
{
  for (proc_control_B.j_on = 0; proc_control_B.j_on < 7; proc_control_B.j_on++)
  {
    proc_control_B.coffset_n = proc_control_B.j_on * 13;
    for (proc_control_B.knt_dv = 0; proc_control_B.knt_dv < 13;
         proc_control_B.knt_dv++) {
      proc_control_B.aoffset_o = proc_control_B.knt_dv * 13;
      proc_control_B.s_j = 0.0;
      for (proc_control_B.coltop_a = 0; proc_control_B.coltop_a < 13;
           proc_control_B.coltop_a++) {
        proc_control_B.s_j += A[proc_control_B.coltop_a * 7 +
          proc_control_B.j_on] * S[proc_control_B.aoffset_o +
          proc_control_B.coltop_a];
      }

      proc_control_B.y_pt[proc_control_B.coffset_n + proc_control_B.knt_dv] =
        proc_control_B.s_j;
      proc_control_B.b_A_c[proc_control_B.knt_dv + 20 * proc_control_B.j_on] =
        proc_control_B.y_pt[13 * proc_control_B.j_on + proc_control_B.knt_dv];
    }
  }

  proc_control_B.knt_dv = 0;
  for (proc_control_B.coltop_a = 0; proc_control_B.coltop_a < 7;
       proc_control_B.coltop_a++) {
    proc_control_B.j_on = 0;
    for (proc_control_B.coffset_n = 0; proc_control_B.coffset_n < 7;
         proc_control_B.coffset_n++) {
      proc_control_B.b_A_c[(proc_control_B.coffset_n + proc_control_B.knt_dv) +
        13] = Ns[proc_control_B.j_on + proc_control_B.coltop_a];
      proc_control_B.j_on += 7;
    }

    proc_control_B.work_jk[proc_control_B.coltop_a] = 0.0;
    proc_control_B.knt_dv += 20;
  }

  for (proc_control_B.j_on = 0; proc_control_B.j_on < 7; proc_control_B.j_on++)
  {
    proc_control_B.coffset_n = proc_control_B.j_on * 20 + proc_control_B.j_on;
    proc_control_B.atmp_n0 = proc_control_B.b_A_c[proc_control_B.coffset_n];
    proc_control_B.tau_k[proc_control_B.j_on] = 0.0;
    proc_control_B.s_j = proc_control_xnrm2_KuvT0oF6(19 - proc_control_B.j_on,
      proc_control_B.b_A_c, proc_control_B.coffset_n + 2);
    if (proc_control_B.s_j != 0.0) {
      proc_control_B.s_j = proc_control_rt_hypotd_snf
        (proc_control_B.b_A_c[proc_control_B.coffset_n], proc_control_B.s_j);
      if (proc_control_B.b_A_c[proc_control_B.coffset_n] >= 0.0) {
        proc_control_B.s_j = -proc_control_B.s_j;
      }

      if (std::abs(proc_control_B.s_j) < 1.0020841800044864E-292) {
        proc_control_B.knt_dv = 0;
        proc_control_B.aoffset_o = (proc_control_B.coffset_n -
          proc_control_B.j_on) + 20;
        do {
          proc_control_B.knt_dv++;
          proc_control_B.coltop_a = proc_control_B.coffset_n + 1;
          while (proc_control_B.coltop_a + 1 <= proc_control_B.aoffset_o) {
            proc_control_B.b_A_c[proc_control_B.coltop_a] *=
              9.9792015476736E+291;
            proc_control_B.coltop_a++;
          }

          proc_control_B.s_j *= 9.9792015476736E+291;
          proc_control_B.atmp_n0 *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s_j) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_dv < 20));

        proc_control_B.s_j = proc_control_rt_hypotd_snf(proc_control_B.atmp_n0,
          proc_control_xnrm2_KuvT0oF6(19 - proc_control_B.j_on,
          proc_control_B.b_A_c, proc_control_B.coffset_n + 2));
        if (proc_control_B.atmp_n0 >= 0.0) {
          proc_control_B.s_j = -proc_control_B.s_j;
        }

        proc_control_B.tau_k[proc_control_B.j_on] = (proc_control_B.s_j -
          proc_control_B.atmp_n0) / proc_control_B.s_j;
        proc_control_B.atmp_n0 = 1.0 / (proc_control_B.atmp_n0 -
          proc_control_B.s_j);
        proc_control_B.coltop_a = proc_control_B.coffset_n + 1;
        while (proc_control_B.coltop_a + 1 <= proc_control_B.aoffset_o) {
          proc_control_B.b_A_c[proc_control_B.coltop_a] *=
            proc_control_B.atmp_n0;
          proc_control_B.coltop_a++;
        }

        proc_control_B.aoffset_o = 0;
        while (proc_control_B.aoffset_o <= proc_control_B.knt_dv - 1) {
          proc_control_B.s_j *= 1.0020841800044864E-292;
          proc_control_B.aoffset_o++;
        }

        proc_control_B.atmp_n0 = proc_control_B.s_j;
      } else {
        proc_control_B.tau_k[proc_control_B.j_on] = (proc_control_B.s_j -
          proc_control_B.b_A_c[proc_control_B.coffset_n]) / proc_control_B.s_j;
        proc_control_B.atmp_n0 = 1.0 /
          (proc_control_B.b_A_c[proc_control_B.coffset_n] - proc_control_B.s_j);
        proc_control_B.knt_dv = (proc_control_B.coffset_n - proc_control_B.j_on)
          + 20;
        proc_control_B.aoffset_o = proc_control_B.coffset_n + 1;
        while (proc_control_B.aoffset_o + 1 <= proc_control_B.knt_dv) {
          proc_control_B.b_A_c[proc_control_B.aoffset_o] *=
            proc_control_B.atmp_n0;
          proc_control_B.aoffset_o++;
        }

        proc_control_B.atmp_n0 = proc_control_B.s_j;
      }
    }

    proc_control_B.b_A_c[proc_control_B.coffset_n] = proc_control_B.atmp_n0;
    if (proc_control_B.j_on + 1 < 7) {
      proc_control_B.s_j = proc_control_B.b_A_c[proc_control_B.coffset_n];
      proc_control_B.b_A_c[proc_control_B.coffset_n] = 1.0;
      if (proc_control_B.tau_k[proc_control_B.j_on] != 0.0) {
        boolean_T exitg2;
        proc_control_B.knt_dv = 20 - proc_control_B.j_on;
        proc_control_B.aoffset_o = (proc_control_B.coffset_n -
          proc_control_B.j_on) + 19;
        while ((proc_control_B.knt_dv > 0) &&
               (proc_control_B.b_A_c[proc_control_B.aoffset_o] == 0.0)) {
          proc_control_B.knt_dv--;
          proc_control_B.aoffset_o--;
        }

        proc_control_B.aoffset_o = 6 - proc_control_B.j_on;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.aoffset_o > 0)) {
          int32_T exitg1;
          proc_control_B.coltop_a = ((proc_control_B.aoffset_o - 1) * 20 +
            proc_control_B.coffset_n) + 20;
          proc_control_B.ia_k = proc_control_B.coltop_a;
          do {
            exitg1 = 0;
            if (proc_control_B.ia_k + 1 <= proc_control_B.coltop_a +
                proc_control_B.knt_dv) {
              if (proc_control_B.b_A_c[proc_control_B.ia_k] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.ia_k++;
              }
            } else {
              proc_control_B.aoffset_o--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt_dv = 0;
        proc_control_B.aoffset_o = 0;
      }

      if (proc_control_B.knt_dv > 0) {
        proc_control_xgemv_AUXWxjLv(proc_control_B.knt_dv,
          proc_control_B.aoffset_o, proc_control_B.b_A_c,
          proc_control_B.coffset_n + 21, proc_control_B.b_A_c,
          proc_control_B.coffset_n + 1, proc_control_B.work_jk);
        proc_control_xgerc_aQMWzodX(proc_control_B.knt_dv,
          proc_control_B.aoffset_o, -proc_control_B.tau_k[proc_control_B.j_on],
          proc_control_B.coffset_n + 1, proc_control_B.work_jk,
          proc_control_B.b_A_c, proc_control_B.coffset_n + 21);
      }

      proc_control_B.b_A_c[proc_control_B.coffset_n] = proc_control_B.s_j;
    }
  }

  for (proc_control_B.j_on = 0; proc_control_B.j_on < 7; proc_control_B.j_on++)
  {
    proc_control_B.coffset_n = 0;
    while (proc_control_B.coffset_n <= proc_control_B.j_on) {
      proc_control_B.R[proc_control_B.coffset_n + 7 * proc_control_B.j_on] =
        proc_control_B.b_A_c[20 * proc_control_B.j_on + proc_control_B.coffset_n];
      proc_control_B.coffset_n++;
    }

    proc_control_B.coffset_n = proc_control_B.j_on + 1;
    while (proc_control_B.coffset_n + 1 < 8) {
      proc_control_B.R[proc_control_B.coffset_n + 7 * proc_control_B.j_on] = 0.0;
      proc_control_B.coffset_n++;
    }
  }

  proc_control_B.j_on = 0;
  for (proc_control_B.coffset_n = 0; proc_control_B.coffset_n < 7;
       proc_control_B.coffset_n++) {
    proc_control_B.knt_dv = 0;
    for (proc_control_B.coltop_a = 0; proc_control_B.coltop_a < 7;
         proc_control_B.coltop_a++) {
      b_S[proc_control_B.coltop_a + proc_control_B.j_on] =
        proc_control_B.R[proc_control_B.knt_dv + proc_control_B.coffset_n];
      proc_control_B.knt_dv += 7;
    }

    proc_control_B.j_on += 7;
  }
}

// Function for MATLAB Function: '<S295>/Correct'
void proc_control::proc_control_trisolve_Ewqm83ue(const real_T A[49], real_T B
  [91])
{
  for (proc_control_B.j_k = 0; proc_control_B.j_k < 13; proc_control_B.j_k++) {
    proc_control_B.jBcol_p5 = 7 * proc_control_B.j_k;
    for (proc_control_B.k_m = 0; proc_control_B.k_m < 7; proc_control_B.k_m++) {
      int32_T tmp;
      proc_control_B.kAcol_b = 7 * proc_control_B.k_m;
      tmp = proc_control_B.k_m + proc_control_B.jBcol_p5;
      proc_control_B.d82 = B[tmp];
      if (proc_control_B.d82 != 0.0) {
        B[tmp] = proc_control_B.d82 / A[proc_control_B.k_m +
          proc_control_B.kAcol_b];
        proc_control_B.i_gk = proc_control_B.k_m + 2;
        while (proc_control_B.i_gk < 8) {
          int32_T tmp_0;
          tmp_0 = (proc_control_B.i_gk + proc_control_B.jBcol_p5) - 1;
          B[tmp_0] -= A[(proc_control_B.i_gk + proc_control_B.kAcol_b) - 1] *
            B[tmp];
          proc_control_B.i_gk++;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S295>/Correct'
void proc_control::proc_control_trisolve_kmp7BqBh(const real_T A[49], real_T B
  [91])
{
  for (proc_control_B.j_l2 = 0; proc_control_B.j_l2 < 13; proc_control_B.j_l2++)
  {
    proc_control_B.jBcol_p = 7 * proc_control_B.j_l2;
    for (proc_control_B.k_fr = 6; proc_control_B.k_fr >= 0; proc_control_B.k_fr
         --) {
      int32_T tmp;
      proc_control_B.kAcol_o = 7 * proc_control_B.k_fr;
      tmp = proc_control_B.k_fr + proc_control_B.jBcol_p;
      proc_control_B.d81 = B[tmp];
      if (proc_control_B.d81 != 0.0) {
        B[tmp] = proc_control_B.d81 / A[proc_control_B.k_fr +
          proc_control_B.kAcol_o];
        proc_control_B.i_pn = 0;
        while (proc_control_B.i_pn <= proc_control_B.k_fr - 1) {
          int32_T tmp_0;
          tmp_0 = proc_control_B.i_pn + proc_control_B.jBcol_p;
          B[tmp_0] -= A[proc_control_B.i_pn + proc_control_B.kAcol_o] * B[tmp];
          proc_control_B.i_pn++;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S295>/Correct'
real_T proc_control::proc_control_xnrm2_H2991AvN(int32_T n, const real_T x[260],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_iz = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_B.absxk_k = std::abs(x[k - 1]);
        if (proc_control_B.absxk_k > proc_control_B.scale_iz) {
          proc_control_B.t_go = proc_control_B.scale_iz / proc_control_B.absxk_k;
          y = y * proc_control_B.t_go * proc_control_B.t_go + 1.0;
          proc_control_B.scale_iz = proc_control_B.absxk_k;
        } else {
          proc_control_B.t_go = proc_control_B.absxk_k / proc_control_B.scale_iz;
          y += proc_control_B.t_go * proc_control_B.t_go;
        }
      }

      y = proc_control_B.scale_iz * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S295>/Correct'
void proc_control::proc_control_xgemv_3az3hqLU(int32_T m, int32_T n, const
  real_T A[260], int32_T ia0, const real_T x[260], int32_T ix0, real_T y[13])
{
  if ((m != 0) && (n != 0)) {
    proc_control_B.b_iy_ir = 0;
    while (proc_control_B.b_iy_ir <= n - 1) {
      y[proc_control_B.b_iy_ir] = 0.0;
      proc_control_B.b_iy_ir++;
    }

    proc_control_B.b_iy_ir = 0;
    proc_control_B.b_nj = (n - 1) * 20 + ia0;
    proc_control_B.iac_m0 = ia0;
    while (proc_control_B.iac_m0 <= proc_control_B.b_nj) {
      int32_T d;
      proc_control_B.ix_ntz = ix0;
      proc_control_B.c_ck = 0.0;
      d = (proc_control_B.iac_m0 + m) - 1;
      for (int32_T ia{proc_control_B.iac_m0}; ia <= d; ia++) {
        proc_control_B.c_ck += A[ia - 1] * x[proc_control_B.ix_ntz - 1];
        proc_control_B.ix_ntz++;
      }

      y[proc_control_B.b_iy_ir] += proc_control_B.c_ck;
      proc_control_B.b_iy_ir++;
      proc_control_B.iac_m0 += 20;
    }
  }
}

// Function for MATLAB Function: '<S295>/Correct'
void proc_control::proc_control_xgerc_ZLmTruVs(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[13], real_T A[260], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA_o = ia0 - 1;
    proc_control_B.jy_n = 0;
    proc_control_B.j_g = 0;
    while (proc_control_B.j_g <= n - 1) {
      if (y[proc_control_B.jy_n] != 0.0) {
        int32_T b;
        int32_T ijA;
        proc_control_B.temp_d = y[proc_control_B.jy_n] * alpha1;
        proc_control_B.ix_f = ix0;
        ijA = proc_control_B.jA_o;
        b = m + proc_control_B.jA_o;
        while (ijA + 1 <= b) {
          A[ijA] += A[proc_control_B.ix_f - 1] * proc_control_B.temp_d;
          proc_control_B.ix_f++;
          ijA++;
        }
      }

      proc_control_B.jy_n++;
      proc_control_B.jA_o += 20;
      proc_control_B.j_g++;
    }
  }
}

// Function for MATLAB Function: '<S295>/Correct'
void proc_control::proc_control_qrFactor_1jDj6Vzn(const real_T A[169], real_T S
  [169], const real_T Ns[91])
{
  for (proc_control_B.j_h = 0; proc_control_B.j_h < 13; proc_control_B.j_h++) {
    proc_control_B.coffset_e = proc_control_B.j_h * 13;
    for (proc_control_B.ii_n = 0; proc_control_B.ii_n < 13; proc_control_B.ii_n
         ++) {
      proc_control_B.aoffset_l = proc_control_B.ii_n * 13;
      proc_control_B.s_k = 0.0;
      for (proc_control_B.knt_k = 0; proc_control_B.knt_k < 13;
           proc_control_B.knt_k++) {
        proc_control_B.s_k += A[proc_control_B.knt_k * 13 + proc_control_B.j_h] *
          S[proc_control_B.aoffset_l + proc_control_B.knt_k];
      }

      proc_control_B.y_c[proc_control_B.coffset_e + proc_control_B.ii_n] =
        proc_control_B.s_k;
      proc_control_B.b_A_i[proc_control_B.ii_n + 20 * proc_control_B.j_h] =
        proc_control_B.y_c[13 * proc_control_B.j_h + proc_control_B.ii_n];
    }
  }

  proc_control_B.aoffset_l = 0;
  for (proc_control_B.knt_k = 0; proc_control_B.knt_k < 13; proc_control_B.knt_k
       ++) {
    proc_control_B.ii_n = 0;
    for (proc_control_B.j_h = 0; proc_control_B.j_h < 7; proc_control_B.j_h++) {
      proc_control_B.b_A_i[(proc_control_B.j_h + proc_control_B.aoffset_l) + 13]
        = Ns[proc_control_B.ii_n + proc_control_B.knt_k];
      proc_control_B.ii_n += 13;
    }

    proc_control_B.work_f[proc_control_B.knt_k] = 0.0;
    proc_control_B.aoffset_l += 20;
  }

  for (proc_control_B.j_h = 0; proc_control_B.j_h < 13; proc_control_B.j_h++) {
    proc_control_B.ii_n = proc_control_B.j_h * 20 + proc_control_B.j_h;
    proc_control_B.atmp_b = proc_control_B.b_A_i[proc_control_B.ii_n];
    proc_control_B.tau_l[proc_control_B.j_h] = 0.0;
    proc_control_B.s_k = proc_control_xnrm2_H2991AvN(19 - proc_control_B.j_h,
      proc_control_B.b_A_i, proc_control_B.ii_n + 2);
    if (proc_control_B.s_k != 0.0) {
      proc_control_B.s_k = proc_control_rt_hypotd_snf
        (proc_control_B.b_A_i[proc_control_B.ii_n], proc_control_B.s_k);
      if (proc_control_B.b_A_i[proc_control_B.ii_n] >= 0.0) {
        proc_control_B.s_k = -proc_control_B.s_k;
      }

      if (std::abs(proc_control_B.s_k) < 1.0020841800044864E-292) {
        proc_control_B.knt_k = 0;
        proc_control_B.coffset_e = (proc_control_B.ii_n - proc_control_B.j_h) +
          20;
        do {
          proc_control_B.knt_k++;
          proc_control_B.aoffset_l = proc_control_B.ii_n + 1;
          while (proc_control_B.aoffset_l + 1 <= proc_control_B.coffset_e) {
            proc_control_B.b_A_i[proc_control_B.aoffset_l] *=
              9.9792015476736E+291;
            proc_control_B.aoffset_l++;
          }

          proc_control_B.s_k *= 9.9792015476736E+291;
          proc_control_B.atmp_b *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s_k) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_k < 20));

        proc_control_B.s_k = proc_control_rt_hypotd_snf(proc_control_B.atmp_b,
          proc_control_xnrm2_H2991AvN(19 - proc_control_B.j_h,
          proc_control_B.b_A_i, proc_control_B.ii_n + 2));
        if (proc_control_B.atmp_b >= 0.0) {
          proc_control_B.s_k = -proc_control_B.s_k;
        }

        proc_control_B.tau_l[proc_control_B.j_h] = (proc_control_B.s_k -
          proc_control_B.atmp_b) / proc_control_B.s_k;
        proc_control_B.atmp_b = 1.0 / (proc_control_B.atmp_b -
          proc_control_B.s_k);
        proc_control_B.aoffset_l = proc_control_B.ii_n + 1;
        while (proc_control_B.aoffset_l + 1 <= proc_control_B.coffset_e) {
          proc_control_B.b_A_i[proc_control_B.aoffset_l] *=
            proc_control_B.atmp_b;
          proc_control_B.aoffset_l++;
        }

        proc_control_B.coffset_e = 0;
        while (proc_control_B.coffset_e <= proc_control_B.knt_k - 1) {
          proc_control_B.s_k *= 1.0020841800044864E-292;
          proc_control_B.coffset_e++;
        }

        proc_control_B.atmp_b = proc_control_B.s_k;
      } else {
        proc_control_B.tau_l[proc_control_B.j_h] = (proc_control_B.s_k -
          proc_control_B.b_A_i[proc_control_B.ii_n]) / proc_control_B.s_k;
        proc_control_B.atmp_b = 1.0 / (proc_control_B.b_A_i[proc_control_B.ii_n]
          - proc_control_B.s_k);
        proc_control_B.knt_k = (proc_control_B.ii_n - proc_control_B.j_h) + 20;
        proc_control_B.coffset_e = proc_control_B.ii_n + 1;
        while (proc_control_B.coffset_e + 1 <= proc_control_B.knt_k) {
          proc_control_B.b_A_i[proc_control_B.coffset_e] *=
            proc_control_B.atmp_b;
          proc_control_B.coffset_e++;
        }

        proc_control_B.atmp_b = proc_control_B.s_k;
      }
    }

    proc_control_B.b_A_i[proc_control_B.ii_n] = proc_control_B.atmp_b;
    if (proc_control_B.j_h + 1 < 13) {
      proc_control_B.s_k = proc_control_B.b_A_i[proc_control_B.ii_n];
      proc_control_B.b_A_i[proc_control_B.ii_n] = 1.0;
      if (proc_control_B.tau_l[proc_control_B.j_h] != 0.0) {
        boolean_T exitg2;
        proc_control_B.knt_k = 20 - proc_control_B.j_h;
        proc_control_B.coffset_e = (proc_control_B.ii_n - proc_control_B.j_h) +
          19;
        while ((proc_control_B.knt_k > 0) &&
               (proc_control_B.b_A_i[proc_control_B.coffset_e] == 0.0)) {
          proc_control_B.knt_k--;
          proc_control_B.coffset_e--;
        }

        proc_control_B.coffset_e = 12 - proc_control_B.j_h;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.coffset_e > 0)) {
          int32_T exitg1;
          proc_control_B.aoffset_l = ((proc_control_B.coffset_e - 1) * 20 +
            proc_control_B.ii_n) + 20;
          proc_control_B.ia_b = proc_control_B.aoffset_l;
          do {
            exitg1 = 0;
            if (proc_control_B.ia_b + 1 <= proc_control_B.aoffset_l +
                proc_control_B.knt_k) {
              if (proc_control_B.b_A_i[proc_control_B.ia_b] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.ia_b++;
              }
            } else {
              proc_control_B.coffset_e--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt_k = 0;
        proc_control_B.coffset_e = 0;
      }

      if (proc_control_B.knt_k > 0) {
        proc_control_xgemv_3az3hqLU(proc_control_B.knt_k,
          proc_control_B.coffset_e, proc_control_B.b_A_i, proc_control_B.ii_n +
          21, proc_control_B.b_A_i, proc_control_B.ii_n + 1,
          proc_control_B.work_f);
        proc_control_xgerc_ZLmTruVs(proc_control_B.knt_k,
          proc_control_B.coffset_e, -proc_control_B.tau_l[proc_control_B.j_h],
          proc_control_B.ii_n + 1, proc_control_B.work_f, proc_control_B.b_A_i,
          proc_control_B.ii_n + 21);
      }

      proc_control_B.b_A_i[proc_control_B.ii_n] = proc_control_B.s_k;
    }
  }

  for (proc_control_B.j_h = 0; proc_control_B.j_h < 13; proc_control_B.j_h++) {
    proc_control_B.ii_n = 0;
    while (proc_control_B.ii_n <= proc_control_B.j_h) {
      proc_control_B.y_c[proc_control_B.ii_n + 13 * proc_control_B.j_h] =
        proc_control_B.b_A_i[20 * proc_control_B.j_h + proc_control_B.ii_n];
      proc_control_B.ii_n++;
    }

    proc_control_B.ii_n = proc_control_B.j_h + 1;
    while (proc_control_B.ii_n + 1 < 14) {
      proc_control_B.y_c[proc_control_B.ii_n + 13 * proc_control_B.j_h] = 0.0;
      proc_control_B.ii_n++;
    }
  }

  proc_control_B.ii_n = 0;
  for (proc_control_B.j_h = 0; proc_control_B.j_h < 13; proc_control_B.j_h++) {
    proc_control_B.aoffset_l = 0;
    for (proc_control_B.knt_k = 0; proc_control_B.knt_k < 13;
         proc_control_B.knt_k++) {
      S[proc_control_B.knt_k + proc_control_B.ii_n] =
        proc_control_B.y_c[proc_control_B.aoffset_l + proc_control_B.j_h];
      proc_control_B.aoffset_l += 13;
    }

    proc_control_B.ii_n += 13;
  }
}

// Function for MATLAB Function: '<S296>/Correct'
real_T proc_control::proc_control_xnrm2_kj8IiC0H(int32_T n, const real_T x[48],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_i = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_B.absxk_iz = std::abs(x[k - 1]);
        if (proc_control_B.absxk_iz > proc_control_B.scale_i) {
          proc_control_B.t_lg = proc_control_B.scale_i / proc_control_B.absxk_iz;
          y = y * proc_control_B.t_lg * proc_control_B.t_lg + 1.0;
          proc_control_B.scale_i = proc_control_B.absxk_iz;
        } else {
          proc_control_B.t_lg = proc_control_B.absxk_iz / proc_control_B.scale_i;
          y += proc_control_B.t_lg * proc_control_B.t_lg;
        }
      }

      y = proc_control_B.scale_i * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S296>/Correct'
void proc_control::proc_control_xgemv_hztnEYXM(int32_T m, int32_T n, const
  real_T A[48], int32_T ia0, const real_T x[48], int32_T ix0, real_T y[3])
{
  if ((m != 0) && (n != 0)) {
    proc_control_B.b_iy_ia = 0;
    while (proc_control_B.b_iy_ia <= n - 1) {
      y[proc_control_B.b_iy_ia] = 0.0;
      proc_control_B.b_iy_ia++;
    }

    proc_control_B.b_iy_ia = 0;
    proc_control_B.b_ii = ((n - 1) << 4) + ia0;
    proc_control_B.iac_bl = ia0;
    while (proc_control_B.iac_bl <= proc_control_B.b_ii) {
      int32_T d;
      proc_control_B.ix_mz = ix0;
      proc_control_B.c_gw = 0.0;
      d = (proc_control_B.iac_bl + m) - 1;
      for (int32_T ia{proc_control_B.iac_bl}; ia <= d; ia++) {
        proc_control_B.c_gw += A[ia - 1] * x[proc_control_B.ix_mz - 1];
        proc_control_B.ix_mz++;
      }

      y[proc_control_B.b_iy_ia] += proc_control_B.c_gw;
      proc_control_B.b_iy_ia++;
      proc_control_B.iac_bl += 16;
    }
  }
}

// Function for MATLAB Function: '<S296>/Correct'
void proc_control::proc_control_xgerc_6YFUaNlM(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[3], real_T A[48], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA_ka = ia0 - 1;
    proc_control_B.jy_k = 0;
    proc_control_B.j_f = 0;
    while (proc_control_B.j_f <= n - 1) {
      if (y[proc_control_B.jy_k] != 0.0) {
        int32_T b;
        int32_T ijA;
        proc_control_B.temp_c = y[proc_control_B.jy_k] * alpha1;
        proc_control_B.ix_n1 = ix0;
        ijA = proc_control_B.jA_ka;
        b = m + proc_control_B.jA_ka;
        while (ijA + 1 <= b) {
          A[ijA] += A[proc_control_B.ix_n1 - 1] * proc_control_B.temp_c;
          proc_control_B.ix_n1++;
          ijA++;
        }
      }

      proc_control_B.jy_k++;
      proc_control_B.jA_ka += 16;
      proc_control_B.j_f++;
    }
  }
}

// Function for MATLAB Function: '<S296>/Correct'
void proc_control::proc_control_qrFactor_qGSgSIIm(const real_T A[39], const
  real_T S[169], const real_T Ns[9], real_T b_S[9])
{
  int32_T exitg1;
  for (proc_control_B.j_i = 0; proc_control_B.j_i < 3; proc_control_B.j_i++) {
    proc_control_B.coffset_dq = proc_control_B.j_i * 13;
    for (proc_control_B.knt_bw = 0; proc_control_B.knt_bw < 13;
         proc_control_B.knt_bw++) {
      proc_control_B.aoffset_e = proc_control_B.knt_bw * 13;
      proc_control_B.s_an = 0.0;
      for (proc_control_B.coltop_an = 0; proc_control_B.coltop_an < 13;
           proc_control_B.coltop_an++) {
        proc_control_B.s_an += A[proc_control_B.coltop_an * 3 +
          proc_control_B.j_i] * S[proc_control_B.aoffset_e +
          proc_control_B.coltop_an];
      }

      proc_control_B.y_jg[proc_control_B.coffset_dq + proc_control_B.knt_bw] =
        proc_control_B.s_an;
      proc_control_B.b_A_my[proc_control_B.knt_bw + (proc_control_B.j_i << 4)] =
        proc_control_B.y_jg[13 * proc_control_B.j_i + proc_control_B.knt_bw];
    }

    proc_control_B.knt_bw = proc_control_B.j_i << 4;
    proc_control_B.b_A_my[proc_control_B.knt_bw + 13] = Ns[proc_control_B.j_i];
    proc_control_B.b_A_my[proc_control_B.knt_bw + 14] = Ns[proc_control_B.j_i +
      3];
    proc_control_B.b_A_my[proc_control_B.knt_bw + 15] = Ns[proc_control_B.j_i +
      6];
    proc_control_B.work_ho[proc_control_B.j_i] = 0.0;
  }

  proc_control_B.atmp_a = proc_control_B.b_A_my[0];
  proc_control_B.tau_idx_0 = 0.0;
  proc_control_B.s_an = proc_control_xnrm2_kj8IiC0H(15, proc_control_B.b_A_my, 2);
  if (proc_control_B.s_an != 0.0) {
    proc_control_B.s_an = proc_control_rt_hypotd_snf(proc_control_B.b_A_my[0],
      proc_control_B.s_an);
    if (proc_control_B.b_A_my[0] >= 0.0) {
      proc_control_B.s_an = -proc_control_B.s_an;
    }

    if (std::abs(proc_control_B.s_an) < 1.0020841800044864E-292) {
      proc_control_B.knt_bw = 0;
      do {
        proc_control_B.knt_bw++;
        proc_control_B.coltop_an = 1;
        while (proc_control_B.coltop_an + 1 <= 16) {
          proc_control_B.b_A_my[proc_control_B.coltop_an] *=
            9.9792015476736E+291;
          proc_control_B.coltop_an++;
        }

        proc_control_B.s_an *= 9.9792015476736E+291;
        proc_control_B.atmp_a *= 9.9792015476736E+291;
      } while ((std::abs(proc_control_B.s_an) < 1.0020841800044864E-292) &&
               (proc_control_B.knt_bw < 20));

      proc_control_B.s_an = proc_control_rt_hypotd_snf(proc_control_B.atmp_a,
        proc_control_xnrm2_kj8IiC0H(15, proc_control_B.b_A_my, 2));
      if (proc_control_B.atmp_a >= 0.0) {
        proc_control_B.s_an = -proc_control_B.s_an;
      }

      proc_control_B.tau_idx_0 = (proc_control_B.s_an - proc_control_B.atmp_a) /
        proc_control_B.s_an;
      proc_control_B.atmp_a = 1.0 / (proc_control_B.atmp_a - proc_control_B.s_an);
      proc_control_B.coltop_an = 1;
      while (proc_control_B.coltop_an + 1 <= 16) {
        proc_control_B.b_A_my[proc_control_B.coltop_an] *= proc_control_B.atmp_a;
        proc_control_B.coltop_an++;
      }

      proc_control_B.aoffset_e = 0;
      while (proc_control_B.aoffset_e <= proc_control_B.knt_bw - 1) {
        proc_control_B.s_an *= 1.0020841800044864E-292;
        proc_control_B.aoffset_e++;
      }

      proc_control_B.atmp_a = proc_control_B.s_an;
    } else {
      proc_control_B.tau_idx_0 = (proc_control_B.s_an - proc_control_B.b_A_my[0])
        / proc_control_B.s_an;
      proc_control_B.atmp_a = 1.0 / (proc_control_B.b_A_my[0] -
        proc_control_B.s_an);
      proc_control_B.aoffset_e = 1;
      while (proc_control_B.aoffset_e + 1 <= 16) {
        proc_control_B.b_A_my[proc_control_B.aoffset_e] *= proc_control_B.atmp_a;
        proc_control_B.aoffset_e++;
      }

      proc_control_B.atmp_a = proc_control_B.s_an;
    }
  }

  proc_control_B.b_A_my[0] = 1.0;
  if (proc_control_B.tau_idx_0 != 0.0) {
    boolean_T exitg2;
    proc_control_B.knt_bw = 16;
    proc_control_B.aoffset_e = 15;
    while ((proc_control_B.knt_bw > 0) &&
           (proc_control_B.b_A_my[proc_control_B.aoffset_e] == 0.0)) {
      proc_control_B.knt_bw--;
      proc_control_B.aoffset_e--;
    }

    proc_control_B.aoffset_e = 2;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.aoffset_e > 0)) {
      proc_control_B.coltop_an = ((proc_control_B.aoffset_e - 1) << 4) + 16;
      proc_control_B.j_i = proc_control_B.coltop_an;
      do {
        exitg1 = 0;
        if (proc_control_B.j_i + 1 <= proc_control_B.coltop_an +
            proc_control_B.knt_bw) {
          if (proc_control_B.b_A_my[proc_control_B.j_i] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_B.j_i++;
          }
        } else {
          proc_control_B.aoffset_e--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_B.knt_bw = 0;
    proc_control_B.aoffset_e = 0;
  }

  if (proc_control_B.knt_bw > 0) {
    proc_control_xgemv_hztnEYXM(proc_control_B.knt_bw, proc_control_B.aoffset_e,
      proc_control_B.b_A_my, 17, proc_control_B.b_A_my, 1,
      proc_control_B.work_ho);
    proc_control_xgerc_6YFUaNlM(proc_control_B.knt_bw, proc_control_B.aoffset_e,
      -proc_control_B.tau_idx_0, 1, proc_control_B.work_ho,
      proc_control_B.b_A_my, 17);
  }

  proc_control_B.b_A_my[0] = proc_control_B.atmp_a;
  proc_control_B.atmp_a = proc_control_B.b_A_my[17];
  proc_control_B.tau_idx_0 = 0.0;
  proc_control_B.s_an = proc_control_xnrm2_kj8IiC0H(14, proc_control_B.b_A_my,
    19);
  if (proc_control_B.s_an != 0.0) {
    proc_control_B.s_an = proc_control_rt_hypotd_snf(proc_control_B.b_A_my[17],
      proc_control_B.s_an);
    if (proc_control_B.b_A_my[17] >= 0.0) {
      proc_control_B.s_an = -proc_control_B.s_an;
    }

    if (std::abs(proc_control_B.s_an) < 1.0020841800044864E-292) {
      proc_control_B.knt_bw = 0;
      do {
        proc_control_B.knt_bw++;
        proc_control_B.coltop_an = 18;
        while (proc_control_B.coltop_an + 1 <= 32) {
          proc_control_B.b_A_my[proc_control_B.coltop_an] *=
            9.9792015476736E+291;
          proc_control_B.coltop_an++;
        }

        proc_control_B.s_an *= 9.9792015476736E+291;
        proc_control_B.atmp_a *= 9.9792015476736E+291;
      } while ((std::abs(proc_control_B.s_an) < 1.0020841800044864E-292) &&
               (proc_control_B.knt_bw < 20));

      proc_control_B.s_an = proc_control_rt_hypotd_snf(proc_control_B.atmp_a,
        proc_control_xnrm2_kj8IiC0H(14, proc_control_B.b_A_my, 19));
      if (proc_control_B.atmp_a >= 0.0) {
        proc_control_B.s_an = -proc_control_B.s_an;
      }

      proc_control_B.tau_idx_0 = (proc_control_B.s_an - proc_control_B.atmp_a) /
        proc_control_B.s_an;
      proc_control_B.atmp_a = 1.0 / (proc_control_B.atmp_a - proc_control_B.s_an);
      proc_control_B.coltop_an = 18;
      while (proc_control_B.coltop_an + 1 <= 32) {
        proc_control_B.b_A_my[proc_control_B.coltop_an] *= proc_control_B.atmp_a;
        proc_control_B.coltop_an++;
      }

      proc_control_B.aoffset_e = 0;
      while (proc_control_B.aoffset_e <= proc_control_B.knt_bw - 1) {
        proc_control_B.s_an *= 1.0020841800044864E-292;
        proc_control_B.aoffset_e++;
      }

      proc_control_B.atmp_a = proc_control_B.s_an;
    } else {
      proc_control_B.tau_idx_0 = (proc_control_B.s_an - proc_control_B.b_A_my[17])
        / proc_control_B.s_an;
      proc_control_B.atmp_a = 1.0 / (proc_control_B.b_A_my[17] -
        proc_control_B.s_an);
      proc_control_B.aoffset_e = 18;
      while (proc_control_B.aoffset_e + 1 <= 32) {
        proc_control_B.b_A_my[proc_control_B.aoffset_e] *= proc_control_B.atmp_a;
        proc_control_B.aoffset_e++;
      }

      proc_control_B.atmp_a = proc_control_B.s_an;
    }
  }

  proc_control_B.b_A_my[17] = 1.0;
  if (proc_control_B.tau_idx_0 != 0.0) {
    proc_control_B.knt_bw = 15;
    proc_control_B.aoffset_e = 31;
    while ((proc_control_B.knt_bw > 0) &&
           (proc_control_B.b_A_my[proc_control_B.aoffset_e] == 0.0)) {
      proc_control_B.knt_bw--;
      proc_control_B.aoffset_e--;
    }

    proc_control_B.aoffset_e = 1;
    proc_control_B.j_i = 33;
    do {
      exitg1 = 0;
      if (proc_control_B.j_i + 1 <= proc_control_B.knt_bw + 33) {
        if (proc_control_B.b_A_my[proc_control_B.j_i] != 0.0) {
          exitg1 = 1;
        } else {
          proc_control_B.j_i++;
        }
      } else {
        proc_control_B.aoffset_e = 0;
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  } else {
    proc_control_B.knt_bw = 0;
    proc_control_B.aoffset_e = 0;
  }

  if (proc_control_B.knt_bw > 0) {
    proc_control_xgemv_hztnEYXM(proc_control_B.knt_bw, proc_control_B.aoffset_e,
      proc_control_B.b_A_my, 34, proc_control_B.b_A_my, 18,
      proc_control_B.work_ho);
    proc_control_xgerc_6YFUaNlM(proc_control_B.knt_bw, proc_control_B.aoffset_e,
      -proc_control_B.tau_idx_0, 18, proc_control_B.work_ho,
      proc_control_B.b_A_my, 34);
  }

  proc_control_B.b_A_my[17] = proc_control_B.atmp_a;
  proc_control_B.atmp_a = proc_control_B.b_A_my[34];
  proc_control_B.s_an = proc_control_xnrm2_kj8IiC0H(13, proc_control_B.b_A_my,
    36);
  if (proc_control_B.s_an != 0.0) {
    proc_control_B.s_an = proc_control_rt_hypotd_snf(proc_control_B.b_A_my[34],
      proc_control_B.s_an);
    if (proc_control_B.b_A_my[34] >= 0.0) {
      proc_control_B.s_an = -proc_control_B.s_an;
    }

    if (std::abs(proc_control_B.s_an) < 1.0020841800044864E-292) {
      proc_control_B.knt_bw = 0;
      do {
        proc_control_B.knt_bw++;
        proc_control_B.coltop_an = 35;
        while (proc_control_B.coltop_an + 1 <= 48) {
          proc_control_B.b_A_my[proc_control_B.coltop_an] *=
            9.9792015476736E+291;
          proc_control_B.coltop_an++;
        }

        proc_control_B.s_an *= 9.9792015476736E+291;
        proc_control_B.atmp_a *= 9.9792015476736E+291;
      } while ((std::abs(proc_control_B.s_an) < 1.0020841800044864E-292) &&
               (proc_control_B.knt_bw < 20));

      proc_control_B.s_an = proc_control_rt_hypotd_snf(proc_control_B.atmp_a,
        proc_control_xnrm2_kj8IiC0H(13, proc_control_B.b_A_my, 36));
      if (proc_control_B.atmp_a >= 0.0) {
        proc_control_B.s_an = -proc_control_B.s_an;
      }

      proc_control_B.atmp_a = 1.0 / (proc_control_B.atmp_a - proc_control_B.s_an);
      proc_control_B.coltop_an = 35;
      while (proc_control_B.coltop_an + 1 <= 48) {
        proc_control_B.b_A_my[proc_control_B.coltop_an] *= proc_control_B.atmp_a;
        proc_control_B.coltop_an++;
      }

      proc_control_B.aoffset_e = 0;
      while (proc_control_B.aoffset_e <= proc_control_B.knt_bw - 1) {
        proc_control_B.s_an *= 1.0020841800044864E-292;
        proc_control_B.aoffset_e++;
      }

      proc_control_B.atmp_a = proc_control_B.s_an;
    } else {
      proc_control_B.atmp_a = 1.0 / (proc_control_B.b_A_my[34] -
        proc_control_B.s_an);
      proc_control_B.aoffset_e = 35;
      while (proc_control_B.aoffset_e + 1 <= 48) {
        proc_control_B.b_A_my[proc_control_B.aoffset_e] *= proc_control_B.atmp_a;
        proc_control_B.aoffset_e++;
      }

      proc_control_B.atmp_a = proc_control_B.s_an;
    }
  }

  proc_control_B.b_A_my[34] = proc_control_B.atmp_a;
  proc_control_B.R_g[0] = proc_control_B.b_A_my[0];
  proc_control_B.coffset_dq = 1;
  while (proc_control_B.coffset_dq + 1 < 4) {
    proc_control_B.R_g[proc_control_B.coffset_dq] = 0.0;
    proc_control_B.coffset_dq++;
  }

  proc_control_B.coffset_dq = 0;
  while (proc_control_B.coffset_dq <= 1) {
    proc_control_B.R_g[proc_control_B.coffset_dq + 3] =
      proc_control_B.b_A_my[proc_control_B.coffset_dq + 16];
    proc_control_B.coffset_dq++;
  }

  while (proc_control_B.coffset_dq + 1 < 4) {
    proc_control_B.R_g[proc_control_B.coffset_dq + 3] = 0.0;
    proc_control_B.coffset_dq++;
  }

  proc_control_B.coffset_dq = 0;
  while (proc_control_B.coffset_dq <= 2) {
    proc_control_B.R_g[proc_control_B.coffset_dq + 6] =
      proc_control_B.b_A_my[proc_control_B.coffset_dq + 32];
    proc_control_B.coffset_dq++;
  }

  proc_control_B.j_i = 0;
  for (proc_control_B.knt_bw = 0; proc_control_B.knt_bw < 3;
       proc_control_B.knt_bw++) {
    b_S[proc_control_B.j_i] = proc_control_B.R_g[proc_control_B.knt_bw];
    b_S[proc_control_B.j_i + 1] = proc_control_B.R_g[proc_control_B.knt_bw + 3];
    b_S[proc_control_B.j_i + 2] = proc_control_B.R_g[proc_control_B.knt_bw + 6];
    proc_control_B.j_i += 3;
  }
}

// Function for MATLAB Function: '<S296>/Correct'
void proc_control::proc_control_trisolve_nzh2XTxC(const real_T A[9], real_T B[39])
{
  for (proc_control_B.j_cc = 0; proc_control_B.j_cc < 13; proc_control_B.j_cc++)
  {
    proc_control_B.jBcol_b = 3 * proc_control_B.j_cc;
    if (B[proc_control_B.jBcol_b] != 0.0) {
      B[proc_control_B.jBcol_b] /= A[0];
      for (int32_T i{2}; i < 4; i++) {
        int32_T tmp;
        tmp = (i + proc_control_B.jBcol_b) - 1;
        B[tmp] -= A[i - 1] * B[proc_control_B.jBcol_b];
      }
    }

    proc_control_B.d84 = B[proc_control_B.jBcol_b + 1];
    if (proc_control_B.d84 != 0.0) {
      B[proc_control_B.jBcol_b + 1] = proc_control_B.d84 / A[4];
      B[proc_control_B.jBcol_b + 2] -= B[proc_control_B.jBcol_b + 1] * A[5];
    }

    if (B[proc_control_B.jBcol_b + 2] != 0.0) {
      B[proc_control_B.jBcol_b + 2] /= A[8];
    }
  }
}

// Function for MATLAB Function: '<S296>/Correct'
void proc_control::proc_control_trisolve_QLyTZPzT(const real_T A[9], real_T B[39])
{
  for (proc_control_B.j_py = 0; proc_control_B.j_py < 13; proc_control_B.j_py++)
  {
    proc_control_B.jBcol_p1 = 3 * proc_control_B.j_py;
    proc_control_B.d83 = B[proc_control_B.jBcol_p1 + 2];
    if (proc_control_B.d83 != 0.0) {
      B[proc_control_B.jBcol_p1 + 2] = proc_control_B.d83 / A[8];
      for (int32_T i{0}; i < 2; i++) {
        int32_T tmp;
        tmp = i + proc_control_B.jBcol_p1;
        B[tmp] -= B[proc_control_B.jBcol_p1 + 2] * A[i + 6];
      }
    }

    proc_control_B.d83 = B[proc_control_B.jBcol_p1 + 1];
    if (proc_control_B.d83 != 0.0) {
      B[proc_control_B.jBcol_p1 + 1] = proc_control_B.d83 / A[4];
      B[proc_control_B.jBcol_p1] -= B[proc_control_B.jBcol_p1 + 1] * A[3];
    }

    if (B[proc_control_B.jBcol_p1] != 0.0) {
      B[proc_control_B.jBcol_p1] /= A[0];
    }
  }
}

// Function for MATLAB Function: '<S296>/Correct'
real_T proc_control::proc_control_xnrm2_ZWAmJ4ix(int32_T n, const real_T x[208],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_n = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_B.absxk_mi = std::abs(x[k - 1]);
        if (proc_control_B.absxk_mi > proc_control_B.scale_n) {
          proc_control_B.t_b = proc_control_B.scale_n / proc_control_B.absxk_mi;
          y = y * proc_control_B.t_b * proc_control_B.t_b + 1.0;
          proc_control_B.scale_n = proc_control_B.absxk_mi;
        } else {
          proc_control_B.t_b = proc_control_B.absxk_mi / proc_control_B.scale_n;
          y += proc_control_B.t_b * proc_control_B.t_b;
        }
      }

      y = proc_control_B.scale_n * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S296>/Correct'
void proc_control::proc_control_xgemv_F8pkuUXW(int32_T m, int32_T n, const
  real_T A[208], int32_T ia0, const real_T x[208], int32_T ix0, real_T y[13])
{
  if ((m != 0) && (n != 0)) {
    proc_control_B.b_iy_f = 0;
    while (proc_control_B.b_iy_f <= n - 1) {
      y[proc_control_B.b_iy_f] = 0.0;
      proc_control_B.b_iy_f++;
    }

    proc_control_B.b_iy_f = 0;
    proc_control_B.b_ox = ((n - 1) << 4) + ia0;
    proc_control_B.iac_i = ia0;
    while (proc_control_B.iac_i <= proc_control_B.b_ox) {
      int32_T d;
      proc_control_B.ix_mr = ix0;
      proc_control_B.c_m = 0.0;
      d = (proc_control_B.iac_i + m) - 1;
      for (int32_T ia{proc_control_B.iac_i}; ia <= d; ia++) {
        proc_control_B.c_m += A[ia - 1] * x[proc_control_B.ix_mr - 1];
        proc_control_B.ix_mr++;
      }

      y[proc_control_B.b_iy_f] += proc_control_B.c_m;
      proc_control_B.b_iy_f++;
      proc_control_B.iac_i += 16;
    }
  }
}

// Function for MATLAB Function: '<S296>/Correct'
void proc_control::proc_control_xgerc_4X4H4v2V(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[13], real_T A[208], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA_e = ia0 - 1;
    proc_control_B.jy_ne = 0;
    proc_control_B.j_o = 0;
    while (proc_control_B.j_o <= n - 1) {
      if (y[proc_control_B.jy_ne] != 0.0) {
        int32_T b;
        int32_T ijA;
        proc_control_B.temp_f = y[proc_control_B.jy_ne] * alpha1;
        proc_control_B.ix_h = ix0;
        ijA = proc_control_B.jA_e;
        b = m + proc_control_B.jA_e;
        while (ijA + 1 <= b) {
          A[ijA] += A[proc_control_B.ix_h - 1] * proc_control_B.temp_f;
          proc_control_B.ix_h++;
          ijA++;
        }
      }

      proc_control_B.jy_ne++;
      proc_control_B.jA_e += 16;
      proc_control_B.j_o++;
    }
  }
}

// Function for MATLAB Function: '<S296>/Correct'
void proc_control::proc_control_qrFactor_3bJrEoRT(const real_T A[169], real_T S
  [169], const real_T Ns[39])
{
  for (proc_control_B.j_e = 0; proc_control_B.j_e < 13; proc_control_B.j_e++) {
    proc_control_B.coffset_d = proc_control_B.j_e * 13;
    for (proc_control_B.ii_c = 0; proc_control_B.ii_c < 13; proc_control_B.ii_c
         ++) {
      proc_control_B.aoffset_d = proc_control_B.ii_c * 13;
      proc_control_B.s_h = 0.0;
      for (proc_control_B.knt_a = 0; proc_control_B.knt_a < 13;
           proc_control_B.knt_a++) {
        proc_control_B.s_h += A[proc_control_B.knt_a * 13 + proc_control_B.j_e] *
          S[proc_control_B.aoffset_d + proc_control_B.knt_a];
      }

      proc_control_B.y_k[proc_control_B.coffset_d + proc_control_B.ii_c] =
        proc_control_B.s_h;
      proc_control_B.b_A_iz[proc_control_B.ii_c + (proc_control_B.j_e << 4)] =
        proc_control_B.y_k[13 * proc_control_B.j_e + proc_control_B.ii_c];
    }

    proc_control_B.ii_c = proc_control_B.j_e << 4;
    proc_control_B.b_A_iz[proc_control_B.ii_c + 13] = Ns[proc_control_B.j_e];
    proc_control_B.b_A_iz[proc_control_B.ii_c + 14] = Ns[proc_control_B.j_e + 13];
    proc_control_B.b_A_iz[proc_control_B.ii_c + 15] = Ns[proc_control_B.j_e + 26];
    proc_control_B.work_j[proc_control_B.j_e] = 0.0;
  }

  for (proc_control_B.j_e = 0; proc_control_B.j_e < 13; proc_control_B.j_e++) {
    proc_control_B.ii_c = (proc_control_B.j_e << 4) + proc_control_B.j_e;
    proc_control_B.atmp_n = proc_control_B.b_A_iz[proc_control_B.ii_c];
    proc_control_B.tau_db[proc_control_B.j_e] = 0.0;
    proc_control_B.s_h = proc_control_xnrm2_ZWAmJ4ix(15 - proc_control_B.j_e,
      proc_control_B.b_A_iz, proc_control_B.ii_c + 2);
    if (proc_control_B.s_h != 0.0) {
      proc_control_B.s_h = proc_control_rt_hypotd_snf
        (proc_control_B.b_A_iz[proc_control_B.ii_c], proc_control_B.s_h);
      if (proc_control_B.b_A_iz[proc_control_B.ii_c] >= 0.0) {
        proc_control_B.s_h = -proc_control_B.s_h;
      }

      if (std::abs(proc_control_B.s_h) < 1.0020841800044864E-292) {
        proc_control_B.knt_a = 0;
        proc_control_B.coffset_d = (proc_control_B.ii_c - proc_control_B.j_e) +
          16;
        do {
          proc_control_B.knt_a++;
          proc_control_B.aoffset_d = proc_control_B.ii_c + 1;
          while (proc_control_B.aoffset_d + 1 <= proc_control_B.coffset_d) {
            proc_control_B.b_A_iz[proc_control_B.aoffset_d] *=
              9.9792015476736E+291;
            proc_control_B.aoffset_d++;
          }

          proc_control_B.s_h *= 9.9792015476736E+291;
          proc_control_B.atmp_n *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s_h) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_a < 20));

        proc_control_B.s_h = proc_control_rt_hypotd_snf(proc_control_B.atmp_n,
          proc_control_xnrm2_ZWAmJ4ix(15 - proc_control_B.j_e,
          proc_control_B.b_A_iz, proc_control_B.ii_c + 2));
        if (proc_control_B.atmp_n >= 0.0) {
          proc_control_B.s_h = -proc_control_B.s_h;
        }

        proc_control_B.tau_db[proc_control_B.j_e] = (proc_control_B.s_h -
          proc_control_B.atmp_n) / proc_control_B.s_h;
        proc_control_B.atmp_n = 1.0 / (proc_control_B.atmp_n -
          proc_control_B.s_h);
        proc_control_B.aoffset_d = proc_control_B.ii_c + 1;
        while (proc_control_B.aoffset_d + 1 <= proc_control_B.coffset_d) {
          proc_control_B.b_A_iz[proc_control_B.aoffset_d] *=
            proc_control_B.atmp_n;
          proc_control_B.aoffset_d++;
        }

        proc_control_B.coffset_d = 0;
        while (proc_control_B.coffset_d <= proc_control_B.knt_a - 1) {
          proc_control_B.s_h *= 1.0020841800044864E-292;
          proc_control_B.coffset_d++;
        }

        proc_control_B.atmp_n = proc_control_B.s_h;
      } else {
        proc_control_B.tau_db[proc_control_B.j_e] = (proc_control_B.s_h -
          proc_control_B.b_A_iz[proc_control_B.ii_c]) / proc_control_B.s_h;
        proc_control_B.atmp_n = 1.0 / (proc_control_B.b_A_iz[proc_control_B.ii_c]
          - proc_control_B.s_h);
        proc_control_B.knt_a = (proc_control_B.ii_c - proc_control_B.j_e) + 16;
        proc_control_B.coffset_d = proc_control_B.ii_c + 1;
        while (proc_control_B.coffset_d + 1 <= proc_control_B.knt_a) {
          proc_control_B.b_A_iz[proc_control_B.coffset_d] *=
            proc_control_B.atmp_n;
          proc_control_B.coffset_d++;
        }

        proc_control_B.atmp_n = proc_control_B.s_h;
      }
    }

    proc_control_B.b_A_iz[proc_control_B.ii_c] = proc_control_B.atmp_n;
    if (proc_control_B.j_e + 1 < 13) {
      proc_control_B.s_h = proc_control_B.b_A_iz[proc_control_B.ii_c];
      proc_control_B.b_A_iz[proc_control_B.ii_c] = 1.0;
      if (proc_control_B.tau_db[proc_control_B.j_e] != 0.0) {
        boolean_T exitg2;
        proc_control_B.knt_a = 16 - proc_control_B.j_e;
        proc_control_B.coffset_d = (proc_control_B.ii_c - proc_control_B.j_e) +
          15;
        while ((proc_control_B.knt_a > 0) &&
               (proc_control_B.b_A_iz[proc_control_B.coffset_d] == 0.0)) {
          proc_control_B.knt_a--;
          proc_control_B.coffset_d--;
        }

        proc_control_B.coffset_d = 12 - proc_control_B.j_e;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.coffset_d > 0)) {
          int32_T exitg1;
          proc_control_B.aoffset_d = (((proc_control_B.coffset_d - 1) << 4) +
            proc_control_B.ii_c) + 16;
          proc_control_B.ia_h = proc_control_B.aoffset_d;
          do {
            exitg1 = 0;
            if (proc_control_B.ia_h + 1 <= proc_control_B.aoffset_d +
                proc_control_B.knt_a) {
              if (proc_control_B.b_A_iz[proc_control_B.ia_h] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.ia_h++;
              }
            } else {
              proc_control_B.coffset_d--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt_a = 0;
        proc_control_B.coffset_d = 0;
      }

      if (proc_control_B.knt_a > 0) {
        proc_control_xgemv_F8pkuUXW(proc_control_B.knt_a,
          proc_control_B.coffset_d, proc_control_B.b_A_iz, proc_control_B.ii_c +
          17, proc_control_B.b_A_iz, proc_control_B.ii_c + 1,
          proc_control_B.work_j);
        proc_control_xgerc_4X4H4v2V(proc_control_B.knt_a,
          proc_control_B.coffset_d, -proc_control_B.tau_db[proc_control_B.j_e],
          proc_control_B.ii_c + 1, proc_control_B.work_j, proc_control_B.b_A_iz,
          proc_control_B.ii_c + 17);
      }

      proc_control_B.b_A_iz[proc_control_B.ii_c] = proc_control_B.s_h;
    }
  }

  for (proc_control_B.j_e = 0; proc_control_B.j_e < 13; proc_control_B.j_e++) {
    proc_control_B.ii_c = 0;
    while (proc_control_B.ii_c <= proc_control_B.j_e) {
      proc_control_B.y_k[proc_control_B.ii_c + 13 * proc_control_B.j_e] =
        proc_control_B.b_A_iz[(proc_control_B.j_e << 4) + proc_control_B.ii_c];
      proc_control_B.ii_c++;
    }

    proc_control_B.ii_c = proc_control_B.j_e + 1;
    while (proc_control_B.ii_c + 1 < 14) {
      proc_control_B.y_k[proc_control_B.ii_c + 13 * proc_control_B.j_e] = 0.0;
      proc_control_B.ii_c++;
    }
  }

  proc_control_B.knt_a = 0;
  for (proc_control_B.j_e = 0; proc_control_B.j_e < 13; proc_control_B.j_e++) {
    proc_control_B.aoffset_d = 0;
    for (proc_control_B.ii_c = 0; proc_control_B.ii_c < 13; proc_control_B.ii_c
         ++) {
      S[proc_control_B.ii_c + proc_control_B.knt_a] =
        proc_control_B.y_k[proc_control_B.aoffset_d + proc_control_B.j_e];
      proc_control_B.aoffset_d += 13;
    }

    proc_control_B.knt_a += 13;
  }
}

// Function for MATLAB Function: '<S297>/Correct'
real_T proc_control::proc_control_xnrm2_bRDMjHYG(int32_T n, const real_T x[14],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_eu = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_B.absxk_i = std::abs(x[k - 1]);
        if (proc_control_B.absxk_i > proc_control_B.scale_eu) {
          proc_control_B.t_a0 = proc_control_B.scale_eu / proc_control_B.absxk_i;
          y = y * proc_control_B.t_a0 * proc_control_B.t_a0 + 1.0;
          proc_control_B.scale_eu = proc_control_B.absxk_i;
        } else {
          proc_control_B.t_a0 = proc_control_B.absxk_i / proc_control_B.scale_eu;
          y += proc_control_B.t_a0 * proc_control_B.t_a0;
        }
      }

      y = proc_control_B.scale_eu * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S297>/Correct'
void proc_control::EKFCorrectorAdditive_g_6pDXID_k(real_T Rs, const real_T x[13],
  const real_T S[169], real_T *zEstimated, real_T Pxy[13], real_T *Sy, real_T
  dHdx[13], real_T *Rsqrt)
{
  *Rsqrt = Rs;
  *zEstimated = x[2];
  proc_control_B.knt_b = 0;
  for (proc_control_B.knt_dm = 0; proc_control_B.knt_dm < 13;
       proc_control_B.knt_dm++) {
    *Sy = std::fmax(1.4901161193847656E-8, 1.4901161193847656E-8 * std::abs
                    (x[proc_control_B.knt_dm]));
    for (proc_control_B.i_hf = 0; proc_control_B.i_hf < 13; proc_control_B.i_hf
         ++) {
      proc_control_B.b_x_o[proc_control_B.i_hf] = x[proc_control_B.i_hf];
      proc_control_B.S[proc_control_B.i_hf + proc_control_B.knt_b] = 0.0;
    }

    proc_control_B.b_x_o[proc_control_B.knt_dm] = x[proc_control_B.knt_dm] + *Sy;
    dHdx[proc_control_B.knt_dm] = (proc_control_B.b_x_o[2] - x[2]) / *Sy;
    proc_control_B.knt_b += 13;
  }

  proc_control_B.knt_b = 0;
  for (proc_control_B.knt_dm = 0; proc_control_B.knt_dm < 13;
       proc_control_B.knt_dm++) {
    proc_control_B.i_hf = 0;
    for (proc_control_B.i22 = 0; proc_control_B.i22 < 13; proc_control_B.i22++)
    {
      for (proc_control_B.i21 = 0; proc_control_B.i21 < 13; proc_control_B.i21++)
      {
        proc_control_B.S_tmp = proc_control_B.i21 + proc_control_B.i_hf;
        proc_control_B.S[proc_control_B.S_tmp] += S[proc_control_B.i21 +
          proc_control_B.knt_b] * S[proc_control_B.i22 + proc_control_B.knt_b];
      }

      proc_control_B.i_hf += 13;
    }

    Pxy[proc_control_B.knt_dm] = 0.0;
    proc_control_B.knt_b += 13;
  }

  for (proc_control_B.knt_b = 0; proc_control_B.knt_b < 13; proc_control_B.knt_b
       ++) {
    proc_control_B.i_hf = proc_control_B.knt_b * 13;
    *Sy = 0.0;
    for (proc_control_B.knt_dm = 0; proc_control_B.knt_dm < 13;
         proc_control_B.knt_dm++) {
      *Sy += S[proc_control_B.i_hf + proc_control_B.knt_dm] *
        dHdx[proc_control_B.knt_dm];
      Pxy[proc_control_B.knt_dm] += proc_control_B.S[13 * proc_control_B.knt_b +
        proc_control_B.knt_dm] * dHdx[proc_control_B.knt_b];
    }

    proc_control_B.A_c[proc_control_B.knt_b] = *Sy;
  }

  proc_control_B.A_c[13] = Rs;
  *Sy = proc_control_B.A_c[0];
  proc_control_B.xnorm = proc_control_xnrm2_bRDMjHYG(13, proc_control_B.A_c, 2);
  if (proc_control_B.xnorm != 0.0) {
    proc_control_B.xnorm = proc_control_rt_hypotd_snf(proc_control_B.A_c[0],
      proc_control_B.xnorm);
    if (proc_control_B.A_c[0] >= 0.0) {
      proc_control_B.xnorm = -proc_control_B.xnorm;
    }

    if (std::abs(proc_control_B.xnorm) < 1.0020841800044864E-292) {
      proc_control_B.knt_dm = 0;
      do {
        proc_control_B.knt_dm++;
        proc_control_B.i_hf = 1;
        while (proc_control_B.i_hf + 1 <= 14) {
          proc_control_B.A_c[proc_control_B.i_hf] *= 9.9792015476736E+291;
          proc_control_B.i_hf++;
        }

        proc_control_B.xnorm *= 9.9792015476736E+291;
        *Sy *= 9.9792015476736E+291;
      } while ((std::abs(proc_control_B.xnorm) < 1.0020841800044864E-292) &&
               (proc_control_B.knt_dm < 20));

      proc_control_B.xnorm = proc_control_rt_hypotd_snf(*Sy,
        proc_control_xnrm2_bRDMjHYG(13, proc_control_B.A_c, 2));
      if (*Sy >= 0.0) {
        proc_control_B.xnorm = -proc_control_B.xnorm;
      }

      proc_control_B.i_hf = 0;
      while (proc_control_B.i_hf <= proc_control_B.knt_dm - 1) {
        proc_control_B.xnorm *= 1.0020841800044864E-292;
        proc_control_B.i_hf++;
      }

      *Sy = proc_control_B.xnorm;
    } else {
      *Sy = proc_control_B.xnorm;
    }
  }
}

// Function for MATLAB Function: '<S297>/Correct'
real_T proc_control::proc_control_xnrm2_Cmmg4Lta(int32_T n, const real_T x[182],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_kh = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_B.absxk_m = std::abs(x[k - 1]);
        if (proc_control_B.absxk_m > proc_control_B.scale_kh) {
          proc_control_B.t_f = proc_control_B.scale_kh / proc_control_B.absxk_m;
          y = y * proc_control_B.t_f * proc_control_B.t_f + 1.0;
          proc_control_B.scale_kh = proc_control_B.absxk_m;
        } else {
          proc_control_B.t_f = proc_control_B.absxk_m / proc_control_B.scale_kh;
          y += proc_control_B.t_f * proc_control_B.t_f;
        }
      }

      y = proc_control_B.scale_kh * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S297>/Correct'
void proc_control::proc_control_xgemv_wB0hPhuq(int32_T m, int32_T n, const
  real_T A[182], int32_T ia0, const real_T x[182], int32_T ix0, real_T y[13])
{
  if ((m != 0) && (n != 0)) {
    proc_control_B.b_iy_dm = 0;
    while (proc_control_B.b_iy_dm <= n - 1) {
      y[proc_control_B.b_iy_dm] = 0.0;
      proc_control_B.b_iy_dm++;
    }

    proc_control_B.b_iy_dm = 0;
    proc_control_B.b_o = (n - 1) * 14 + ia0;
    proc_control_B.iac_k = ia0;
    while (proc_control_B.iac_k <= proc_control_B.b_o) {
      int32_T d;
      proc_control_B.ix_br = ix0;
      proc_control_B.c_d0 = 0.0;
      d = (proc_control_B.iac_k + m) - 1;
      for (int32_T ia{proc_control_B.iac_k}; ia <= d; ia++) {
        proc_control_B.c_d0 += A[ia - 1] * x[proc_control_B.ix_br - 1];
        proc_control_B.ix_br++;
      }

      y[proc_control_B.b_iy_dm] += proc_control_B.c_d0;
      proc_control_B.b_iy_dm++;
      proc_control_B.iac_k += 14;
    }
  }
}

// Function for MATLAB Function: '<S297>/Correct'
void proc_control::proc_control_xgerc_ay1ZSOWu(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[13], real_T A[182], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA_k = ia0 - 1;
    proc_control_B.jy_j = 0;
    proc_control_B.j_gn = 0;
    while (proc_control_B.j_gn <= n - 1) {
      if (y[proc_control_B.jy_j] != 0.0) {
        int32_T b;
        int32_T ijA;
        proc_control_B.temp_g = y[proc_control_B.jy_j] * alpha1;
        proc_control_B.ix_d0 = ix0;
        ijA = proc_control_B.jA_k;
        b = m + proc_control_B.jA_k;
        while (ijA + 1 <= b) {
          A[ijA] += A[proc_control_B.ix_d0 - 1] * proc_control_B.temp_g;
          proc_control_B.ix_d0++;
          ijA++;
        }
      }

      proc_control_B.jy_j++;
      proc_control_B.jA_k += 14;
      proc_control_B.j_gn++;
    }
  }
}

// Function for MATLAB Function: '<S297>/Correct'
void proc_control::proc_control_qrFactor_TeAoo2Mt(const real_T A[169], real_T S
  [169], const real_T Ns[13])
{
  for (proc_control_B.j_ej = 0; proc_control_B.j_ej < 13; proc_control_B.j_ej++)
  {
    proc_control_B.coffset_f = proc_control_B.j_ej * 13;
    for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 13; proc_control_B.ii_i
         ++) {
      proc_control_B.aoffset_k = proc_control_B.ii_i * 13;
      proc_control_B.s_a = 0.0;
      for (proc_control_B.knt_o = 0; proc_control_B.knt_o < 13;
           proc_control_B.knt_o++) {
        proc_control_B.s_a += A[proc_control_B.knt_o * 13 + proc_control_B.j_ej]
          * S[proc_control_B.aoffset_k + proc_control_B.knt_o];
      }

      proc_control_B.y_p[proc_control_B.coffset_f + proc_control_B.ii_i] =
        proc_control_B.s_a;
      proc_control_B.b_A_l[proc_control_B.ii_i + 14 * proc_control_B.j_ej] =
        proc_control_B.y_p[13 * proc_control_B.j_ej + proc_control_B.ii_i];
    }
  }

  proc_control_B.ii_i = 0;
  for (proc_control_B.j_ej = 0; proc_control_B.j_ej < 13; proc_control_B.j_ej++)
  {
    proc_control_B.b_A_l[proc_control_B.ii_i + 13] = Ns[proc_control_B.j_ej];
    proc_control_B.work_h[proc_control_B.j_ej] = 0.0;
    proc_control_B.ii_i += 14;
  }

  for (proc_control_B.j_ej = 0; proc_control_B.j_ej < 13; proc_control_B.j_ej++)
  {
    proc_control_B.ii_i = proc_control_B.j_ej * 14 + proc_control_B.j_ej;
    proc_control_B.atmp_m = proc_control_B.b_A_l[proc_control_B.ii_i];
    proc_control_B.tau_i[proc_control_B.j_ej] = 0.0;
    proc_control_B.s_a = proc_control_xnrm2_Cmmg4Lta(13 - proc_control_B.j_ej,
      proc_control_B.b_A_l, proc_control_B.ii_i + 2);
    if (proc_control_B.s_a != 0.0) {
      proc_control_B.s_a = proc_control_rt_hypotd_snf
        (proc_control_B.b_A_l[proc_control_B.ii_i], proc_control_B.s_a);
      if (proc_control_B.b_A_l[proc_control_B.ii_i] >= 0.0) {
        proc_control_B.s_a = -proc_control_B.s_a;
      }

      if (std::abs(proc_control_B.s_a) < 1.0020841800044864E-292) {
        proc_control_B.knt_o = 0;
        proc_control_B.coffset_f = (proc_control_B.ii_i - proc_control_B.j_ej) +
          14;
        do {
          proc_control_B.knt_o++;
          proc_control_B.aoffset_k = proc_control_B.ii_i + 1;
          while (proc_control_B.aoffset_k + 1 <= proc_control_B.coffset_f) {
            proc_control_B.b_A_l[proc_control_B.aoffset_k] *=
              9.9792015476736E+291;
            proc_control_B.aoffset_k++;
          }

          proc_control_B.s_a *= 9.9792015476736E+291;
          proc_control_B.atmp_m *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s_a) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_o < 20));

        proc_control_B.s_a = proc_control_rt_hypotd_snf(proc_control_B.atmp_m,
          proc_control_xnrm2_Cmmg4Lta(13 - proc_control_B.j_ej,
          proc_control_B.b_A_l, proc_control_B.ii_i + 2));
        if (proc_control_B.atmp_m >= 0.0) {
          proc_control_B.s_a = -proc_control_B.s_a;
        }

        proc_control_B.tau_i[proc_control_B.j_ej] = (proc_control_B.s_a -
          proc_control_B.atmp_m) / proc_control_B.s_a;
        proc_control_B.atmp_m = 1.0 / (proc_control_B.atmp_m -
          proc_control_B.s_a);
        proc_control_B.aoffset_k = proc_control_B.ii_i + 1;
        while (proc_control_B.aoffset_k + 1 <= proc_control_B.coffset_f) {
          proc_control_B.b_A_l[proc_control_B.aoffset_k] *=
            proc_control_B.atmp_m;
          proc_control_B.aoffset_k++;
        }

        proc_control_B.coffset_f = 0;
        while (proc_control_B.coffset_f <= proc_control_B.knt_o - 1) {
          proc_control_B.s_a *= 1.0020841800044864E-292;
          proc_control_B.coffset_f++;
        }

        proc_control_B.atmp_m = proc_control_B.s_a;
      } else {
        proc_control_B.tau_i[proc_control_B.j_ej] = (proc_control_B.s_a -
          proc_control_B.b_A_l[proc_control_B.ii_i]) / proc_control_B.s_a;
        proc_control_B.atmp_m = 1.0 / (proc_control_B.b_A_l[proc_control_B.ii_i]
          - proc_control_B.s_a);
        proc_control_B.knt_o = (proc_control_B.ii_i - proc_control_B.j_ej) + 14;
        proc_control_B.coffset_f = proc_control_B.ii_i + 1;
        while (proc_control_B.coffset_f + 1 <= proc_control_B.knt_o) {
          proc_control_B.b_A_l[proc_control_B.coffset_f] *=
            proc_control_B.atmp_m;
          proc_control_B.coffset_f++;
        }

        proc_control_B.atmp_m = proc_control_B.s_a;
      }
    }

    proc_control_B.b_A_l[proc_control_B.ii_i] = proc_control_B.atmp_m;
    if (proc_control_B.j_ej + 1 < 13) {
      proc_control_B.s_a = proc_control_B.b_A_l[proc_control_B.ii_i];
      proc_control_B.b_A_l[proc_control_B.ii_i] = 1.0;
      if (proc_control_B.tau_i[proc_control_B.j_ej] != 0.0) {
        boolean_T exitg2;
        proc_control_B.knt_o = 14 - proc_control_B.j_ej;
        proc_control_B.coffset_f = (proc_control_B.ii_i - proc_control_B.j_ej) +
          13;
        while ((proc_control_B.knt_o > 0) &&
               (proc_control_B.b_A_l[proc_control_B.coffset_f] == 0.0)) {
          proc_control_B.knt_o--;
          proc_control_B.coffset_f--;
        }

        proc_control_B.coffset_f = 12 - proc_control_B.j_ej;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.coffset_f > 0)) {
          int32_T exitg1;
          proc_control_B.aoffset_k = ((proc_control_B.coffset_f - 1) * 14 +
            proc_control_B.ii_i) + 14;
          proc_control_B.ia_j = proc_control_B.aoffset_k;
          do {
            exitg1 = 0;
            if (proc_control_B.ia_j + 1 <= proc_control_B.aoffset_k +
                proc_control_B.knt_o) {
              if (proc_control_B.b_A_l[proc_control_B.ia_j] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.ia_j++;
              }
            } else {
              proc_control_B.coffset_f--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt_o = 0;
        proc_control_B.coffset_f = 0;
      }

      if (proc_control_B.knt_o > 0) {
        proc_control_xgemv_wB0hPhuq(proc_control_B.knt_o,
          proc_control_B.coffset_f, proc_control_B.b_A_l, proc_control_B.ii_i +
          15, proc_control_B.b_A_l, proc_control_B.ii_i + 1,
          proc_control_B.work_h);
        proc_control_xgerc_ay1ZSOWu(proc_control_B.knt_o,
          proc_control_B.coffset_f, -proc_control_B.tau_i[proc_control_B.j_ej],
          proc_control_B.ii_i + 1, proc_control_B.work_h, proc_control_B.b_A_l,
          proc_control_B.ii_i + 15);
      }

      proc_control_B.b_A_l[proc_control_B.ii_i] = proc_control_B.s_a;
    }
  }

  for (proc_control_B.j_ej = 0; proc_control_B.j_ej < 13; proc_control_B.j_ej++)
  {
    proc_control_B.ii_i = 0;
    while (proc_control_B.ii_i <= proc_control_B.j_ej) {
      proc_control_B.y_p[proc_control_B.ii_i + 13 * proc_control_B.j_ej] =
        proc_control_B.b_A_l[14 * proc_control_B.j_ej + proc_control_B.ii_i];
      proc_control_B.ii_i++;
    }

    proc_control_B.ii_i = proc_control_B.j_ej + 1;
    while (proc_control_B.ii_i + 1 < 14) {
      proc_control_B.y_p[proc_control_B.ii_i + 13 * proc_control_B.j_ej] = 0.0;
      proc_control_B.ii_i++;
    }
  }

  proc_control_B.knt_o = 0;
  for (proc_control_B.j_ej = 0; proc_control_B.j_ej < 13; proc_control_B.j_ej++)
  {
    proc_control_B.aoffset_k = 0;
    for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 13; proc_control_B.ii_i
         ++) {
      S[proc_control_B.ii_i + proc_control_B.knt_o] =
        proc_control_B.y_p[proc_control_B.aoffset_k + proc_control_B.j_ej];
      proc_control_B.aoffset_k += 13;
    }

    proc_control_B.knt_o += 13;
  }
}

real_T proc_control::proc_control_rt_powd_snf(real_T u0, real_T u1)
{
  real_T y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = (rtNaN);
  } else {
    proc_control_B.d77 = std::abs(u0);
    proc_control_B.d78 = std::abs(u1);
    if (std::isinf(u1)) {
      if (proc_control_B.d77 == 1.0) {
        y = 1.0;
      } else if (proc_control_B.d77 > 1.0) {
        if (u1 > 0.0) {
          y = (rtInf);
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = (rtInf);
      }
    } else if (proc_control_B.d78 == 0.0) {
      y = 1.0;
    } else if (proc_control_B.d78 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = (rtNaN);
    } else {
      y = std::pow(u0, u1);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S299>/Predict'
real_T proc_control::proc_control_erf_lY1OuNdP(real_T x)
{
  real_T y;
  int32_T b;

  // ========================== COPYRIGHT NOTICE ============================
  //  The algorithms for calculating ERF(X) and ERFC(X) are derived
  //  from FDLIBM, which has the following notice:
  //
  //  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
  //
  //  Developed at SunSoft, a Sun Microsystems, Inc. business.
  //  Permission to use, copy, modify, and distribute this
  //  software is freely granted, provided that this notice
  //  is preserved.
  // =============================    END    ================================
  proc_control_B.absx_d = std::abs(x);
  if (std::isnan(x)) {
    y = x;
  } else if (std::isinf(x)) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else if (proc_control_B.absx_d < 0.84375) {
    if (proc_control_B.absx_d < 3.7252902984619141E-9) {
      if (proc_control_B.absx_d < 2.8480945388892178E-306) {
        y = (8.0 * x + 1.0270333367641007 * x) * 0.125;
      } else {
        y = 0.12837916709551259 * x + x;
      }
    } else {
      proc_control_B.z_ku = x * x;
      y = ((((proc_control_B.z_ku * -2.3763016656650163E-5 +
              -0.0057702702964894416) * proc_control_B.z_ku +
             -0.02848174957559851) * proc_control_B.z_ku + -0.3250421072470015) *
           proc_control_B.z_ku + 0.12837916709551256) / (((((proc_control_B.z_ku
        * -3.9602282787753681E-6 + 0.00013249473800432164) * proc_control_B.z_ku
        + 0.0050813062818757656) * proc_control_B.z_ku + 0.0650222499887673) *
        proc_control_B.z_ku + 0.39791722395915535) * proc_control_B.z_ku + 1.0) *
        x + x;
    }
  } else if (proc_control_B.absx_d < 1.25) {
    if (x >= 0.0) {
      y = (((((((proc_control_B.absx_d - 1.0) * -0.0021663755948687908 +
                0.035478304325618236) * (proc_control_B.absx_d - 1.0) +
               -0.11089469428239668) * (proc_control_B.absx_d - 1.0) +
              0.31834661990116175) * (proc_control_B.absx_d - 1.0) +
             -0.37220787603570132) * (proc_control_B.absx_d - 1.0) +
            0.41485611868374833) * (proc_control_B.absx_d - 1.0) +
           -0.0023621185607526594) / (((((((proc_control_B.absx_d - 1.0) *
        0.011984499846799107 + 0.013637083912029051) * (proc_control_B.absx_d -
        1.0) + 0.12617121980876164) * (proc_control_B.absx_d - 1.0) +
        0.071828654414196266) * (proc_control_B.absx_d - 1.0) +
        0.540397917702171) * (proc_control_B.absx_d - 1.0) + 0.10642088040084423)
        * (proc_control_B.absx_d - 1.0) + 1.0) + 0.84506291151046753;
    } else {
      y = -0.84506291151046753 - (((((((proc_control_B.absx_d - 1.0) *
        -0.0021663755948687908 + 0.035478304325618236) * (proc_control_B.absx_d
        - 1.0) + -0.11089469428239668) * (proc_control_B.absx_d - 1.0) +
        0.31834661990116175) * (proc_control_B.absx_d - 1.0) +
        -0.37220787603570132) * (proc_control_B.absx_d - 1.0) +
        0.41485611868374833) * (proc_control_B.absx_d - 1.0) +
        -0.0023621185607526594) / (((((((proc_control_B.absx_d - 1.0) *
        0.011984499846799107 + 0.013637083912029051) * (proc_control_B.absx_d -
        1.0) + 0.12617121980876164) * (proc_control_B.absx_d - 1.0) +
        0.071828654414196266) * (proc_control_B.absx_d - 1.0) +
        0.540397917702171) * (proc_control_B.absx_d - 1.0) + 0.10642088040084423)
        * (proc_control_B.absx_d - 1.0) + 1.0);
    }
  } else if (proc_control_B.absx_d > 6.0) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else {
    proc_control_B.s_fo = 1.0 / (proc_control_B.absx_d * proc_control_B.absx_d);
    if (proc_control_B.absx_d < 2.8571434020996094) {
      proc_control_B.R_p = ((((((proc_control_B.s_fo * -9.8143293441691455 +
        -81.2874355063066) * proc_control_B.s_fo + -184.60509290671104) *
        proc_control_B.s_fo + -162.39666946257347) * proc_control_B.s_fo +
        -62.375332450326006) * proc_control_B.s_fo + -10.558626225323291) *
                            proc_control_B.s_fo + -0.69385857270718176) *
        proc_control_B.s_fo + -0.0098649440348471482;
      proc_control_B.s_fo = (((((((proc_control_B.s_fo * -0.0604244152148581 +
        6.5702497703192817) * proc_control_B.s_fo + 108.63500554177944) *
        proc_control_B.s_fo + 429.00814002756783) * proc_control_B.s_fo +
        645.38727173326788) * proc_control_B.s_fo + 434.56587747522923) *
        proc_control_B.s_fo + 137.65775414351904) * proc_control_B.s_fo +
        19.651271667439257) * proc_control_B.s_fo + 1.0;
    } else {
      proc_control_B.R_p = (((((proc_control_B.s_fo * -483.5191916086514 +
        -1025.0951316110772) * proc_control_B.s_fo + -637.56644336838963) *
        proc_control_B.s_fo + -160.63638485582192) * proc_control_B.s_fo +
        -17.757954917754752) * proc_control_B.s_fo + -0.799283237680523) *
        proc_control_B.s_fo + -0.0098649429247001;
      proc_control_B.s_fo = ((((((proc_control_B.s_fo * -22.440952446585818 +
        474.52854120695537) * proc_control_B.s_fo + 2553.0504064331644) *
        proc_control_B.s_fo + 3199.8582195085955) * proc_control_B.s_fo +
        1536.729586084437) * proc_control_B.s_fo + 325.79251299657392) *
        proc_control_B.s_fo + 30.338060743482458) * proc_control_B.s_fo + 1.0;
    }

    if (!std::isnan(proc_control_B.absx_d)) {
      proc_control_B.z_ku = frexp(proc_control_B.absx_d, &b);
    } else {
      proc_control_B.z_ku = proc_control_B.absx_d;
      b = 0;
    }

    proc_control_B.z_ku = std::floor(proc_control_B.z_ku * 2.097152E+6) /
      2.097152E+6 * proc_control_rt_powd_snf(2.0, static_cast<real_T>(b));
    if (x < 0.0) {
      y = std::exp((proc_control_B.z_ku - proc_control_B.absx_d) *
                   (proc_control_B.z_ku + proc_control_B.absx_d) +
                   proc_control_B.R_p / proc_control_B.s_fo) * std::exp
        (-proc_control_B.z_ku * proc_control_B.z_ku - 0.5625) /
        proc_control_B.absx_d - 1.0;
    } else {
      y = 1.0 - std::exp((proc_control_B.z_ku - proc_control_B.absx_d) *
                         (proc_control_B.z_ku + proc_control_B.absx_d) +
                         proc_control_B.R_p / proc_control_B.s_fo) * std::exp
        (-proc_control_B.z_ku * proc_control_B.z_ku - 0.5625) /
        proc_control_B.absx_d;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S299>/Predict'
void proc_control::AUV8QuatPerturbedSimFc_Tstvmp_b(const real_T in1[13], const
  real_T in2[6], const real_T in3[8], real_T out1[13])
{
  proc_control_B.t8_b = in1[4] * in1[6];
  proc_control_B.t9_k = in1[5] * in1[6];
  proc_control_B.t10_k = in1[3] * in1[4];
  proc_control_B.t11_b = in1[3] * in1[5];
  proc_control_B.t12_ix = in1[4] * in1[4];
  proc_control_B.t13_nj = in1[5] * in1[5];
  proc_control_B.t15_hx = in1[4] * in1[5] * 2.0;
  proc_control_B.t20_n = in1[3] * in1[6] * 2.0;
  proc_control_B.t33_m = in1[11] / 500.0;
  proc_control_B.t37_g = in1[10] / 1000.0;
  proc_control_B.t39_j = in1[12] * 0.018;
  proc_control_B.t63_f = in1[7] * 32.4648;
  proc_control_B.t67_n = in1[8] * 43.6156;
  proc_control_B.t68_g = in1[9] * 46.7695;
  proc_control_B.t16_d = proc_control_B.t8_b * 2.0;
  proc_control_B.t17_c = proc_control_B.t9_k * 2.0;
  proc_control_B.t18_my = proc_control_B.t10_k * 2.0;
  proc_control_B.t19_dk = proc_control_B.t11_b * 2.0;
  proc_control_B.t21_n = proc_control_B.t12_ix * 2.0;
  proc_control_B.t22_b = proc_control_B.t13_nj * 2.0;
  proc_control_B.t23_p = in1[6] * in1[6] * 2.0;
  proc_control_B.t71_k = proc_control_B.t33_m + proc_control_B.t39_j;
  proc_control_B.t33_m += proc_control_B.t37_g;
  proc_control_B.t37_g += proc_control_B.t39_j;
  proc_control_B.t39_j = in1[11] * 0.558 + proc_control_B.t63_f;
  proc_control_B.t80_c = in1[10] * 0.062 + proc_control_B.t68_g;
  proc_control_B.t81_n = in1[12] * 0.031 + proc_control_B.t67_n;
  proc_control_B.t84_n = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 0.592;
  proc_control_B.t45_c = proc_control_B.t17_c + proc_control_B.t18_my;
  proc_control_B.t55_dk = proc_control_erf_lY1OuNdP(in1[2] * 13.333333333333334
    - 2.0);
  proc_control_B.t65_n = (proc_control_B.t21_n + proc_control_B.t22_b) - 1.0;
  proc_control_B.t63_f = in1[12] * 0.062 + -proc_control_B.t63_f;
  proc_control_B.t67_n = in1[10] * 0.558 + -proc_control_B.t67_n;
  proc_control_B.t68_g = in1[11] * 0.031 + -proc_control_B.t68_g;
  proc_control_B.t86_g = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_B.t87_l = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  proc_control_B.t56_g = proc_control_B.t16_d + -proc_control_B.t19_dk;
  proc_control_B.t85_p = proc_control_B.t55_dk * 0.01575 + 0.01575;
  proc_control_B.t55_dk = proc_control_B.t55_dk * 15.7185 - 15.2815;
  out1[0] = (((proc_control_B.t22_b + proc_control_B.t23_p) - 1.0) * -in1[7] +
             (proc_control_B.t16_d + proc_control_B.t19_dk) * in1[9]) +
    (proc_control_B.t15_hx - proc_control_B.t20_n) * in1[8];
  out1[1] = ((proc_control_B.t15_hx + proc_control_B.t20_n) * in1[7] -
             ((proc_control_B.t21_n + proc_control_B.t23_p) - 1.0) * in1[8]) +
    (proc_control_B.t17_c - proc_control_B.t18_my) * in1[9];
  out1[2] = (proc_control_B.t56_g * in1[7] + proc_control_B.t45_c * in1[8]) -
    proc_control_B.t65_n * in1[9];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_B.t15_hx = in1[10] * proc_control_B.t71_k;
  proc_control_B.t20_n = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) * in1
    [10];
  proc_control_B.t16_d = in1[10] * proc_control_B.t80_c;
  proc_control_B.t17_c = in1[10] * proc_control_B.t67_n;
  proc_control_B.t18_my = in1[10] * proc_control_B.t86_g;
  proc_control_B.t19_dk = in1[10] * proc_control_B.t87_l;
  proc_control_B.t21_n = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) * in1
    [11];
  proc_control_B.t22_b = in1[11] * proc_control_B.t37_g;
  proc_control_B.t23_p = in1[11] * proc_control_B.t39_j;
  proc_control_B.out1_tmp_k = in1[11] * proc_control_B.t68_g;
  proc_control_B.out1_tmp_l = in1[11] * proc_control_B.t84_n;
  proc_control_B.t86_g *= in1[11];
  proc_control_B.out1_tmp_bf = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  proc_control_B.out1_tmp_cx = in1[12] * proc_control_B.t33_m;
  proc_control_B.out1_tmp_f = in1[12] * proc_control_B.t63_f;
  proc_control_B.out1_tmp_oo = in1[12] * proc_control_B.t81_n;
  proc_control_B.t84_n *= in1[12];
  proc_control_B.t87_l *= in1[12];
  proc_control_B.out1_tmp_dd = (proc_control_B.t9_k + proc_control_B.t10_k) *
    proc_control_B.t55_dk;
  proc_control_B.t45_c *= proc_control_B.t85_p;
  proc_control_B.out1_tmp_ld = (proc_control_B.t8_b + -proc_control_B.t11_b) *
    proc_control_B.t55_dk;
  proc_control_B.t56_g *= proc_control_B.t85_p;
  proc_control_B.t55_dk *= proc_control_B.t65_n;
  proc_control_B.t65_n = (std::abs(in1[7]) * 1.17 + 15.0) * in1[7];
  proc_control_B.t71_k *= in1[7];
  proc_control_B.t81_n *= in1[7];
  proc_control_B.t68_g *= in1[7];
  proc_control_B.t85_p = (std::abs(in1[8]) * 0.82 + 20.0) * in1[8];
  proc_control_B.t37_g *= in1[8];
  proc_control_B.t63_f *= in1[8];
  proc_control_B.t80_c *= in1[8];
  proc_control_B.out1_tmp_ls = (std::abs(in1[9]) * 0.756 + 23.333333333333332) *
    in1[9];
  proc_control_B.t33_m *= in1[9];
  proc_control_B.t39_j *= in1[9];
  proc_control_B.t67_n *= in1[9];
  out1[7] = (((((((((((((((((((((in2[0] * 0.030976977065388711 + in2[1] *
    9.4803055144857715E-7) - in2[2] * 6.8231348244175949E-6) + in2[3] *
    0.0001303522588356414) + (in2[4] * -0.010033314971702871 + in2[5] *
    0.0010125044874363649)) + (in3[0] * -0.00033076834054020519 + in3[1] *
    1.8595780444550231E-21)) + in3[2] * 0.00033506403327449372) + (in3[3] *
    0.00033363213569639753 - in3[4] * 0.001819638864719295)) + (in3[5] *
    -0.0018124211550371481 + in3[6] * 0.0018538731733468781)) + (in3[7] *
    0.001778186846409557 - proc_control_B.t8_b * 0.11107598193630119)) +
                        ((proc_control_B.t9_k * -0.00081126583629370218 -
    proc_control_B.t10_k * 0.00081126583629370218) + proc_control_B.t11_b *
    0.11107598193630119)) + ((proc_control_B.t12_ix * -0.0062610285338271466 -
    proc_control_B.t13_nj * 0.0062610285338271466) + in3[0] * 1.4142135623730951
    * 0.015171119710606879)) + ((in3[1] * 1.4142135623730951 *
    0.014928824155507611 + in3[2] * 1.4142135623730951 * 0.015171119710606879) +
    in3[3] * 1.4142135623730951 * 0.01516372519659284)) +
                     (((proc_control_B.t15_hx * -0.96028628902704993 -
                        proc_control_B.t20_n * 0.0001303522588356414) +
                       proc_control_B.t16_d * 9.4803055144857715E-7) -
                      proc_control_B.t17_c * 6.8231348244175949E-6)) +
                    (((proc_control_B.t18_my * -0.010033314971702871 -
                       proc_control_B.t19_dk * 0.0010125044874363649) +
                      proc_control_B.t21_n * 0.010033314971702871) -
                     proc_control_B.t22_b * 2.9388947094905889E-5)) +
                   (((proc_control_B.t23_p * -6.8231348244175949E-6 +
                      proc_control_B.out1_tmp_k * 0.030976977065388711) +
                     proc_control_B.out1_tmp_l * 0.0010125044874363649) -
                    proc_control_B.t86_g * 0.0001303522588356414)) +
                  (((proc_control_B.out1_tmp_bf * -0.0010125044874363649 +
                     proc_control_B.out1_tmp_cx * 0.0002115171795569455) +
                    proc_control_B.out1_tmp_f * 9.4803055144857715E-7) +
                   proc_control_B.out1_tmp_oo * 0.030976977065388711)) +
                 ((proc_control_B.t84_n * 0.010033314971702871 +
                   proc_control_B.t87_l * 0.0001303522588356414) -
                  proc_control_B.out1_tmp_dd * 1.860035941942108E-5)) +
                ((proc_control_B.t45_c * -0.0076571888871557192 -
                  proc_control_B.out1_tmp_ld * 0.60776829002292643) -
                 proc_control_B.t56_g * 0.589379797395962)) +
               ((proc_control_B.t55_dk * -6.6934952627536608E-5 -
                 proc_control_B.t65_n * 0.030976977065388711) +
                proc_control_B.t71_k * 0.0040409200239048832)) +
              (((proc_control_B.t81_n * -0.0010125044874363649 +
                 proc_control_B.t68_g * 0.010033314971702871) -
                proc_control_B.t85_p * 9.4803055144857715E-7) -
               proc_control_B.t37_g * 0.311032764122789)) +
             (((proc_control_B.t63_f * -0.0010125044874363649 -
                proc_control_B.t80_c * 0.0001303522588356414) +
               proc_control_B.out1_tmp_ls * 6.8231348244175949E-6) +
              proc_control_B.t33_m * 0.031387639110527318)) +
    ((proc_control_B.t39_j * 0.010033314971702871 - proc_control_B.t67_n *
      0.0001303522588356414) + 0.0031305142669135729);
  out1[8] = (((((((((((((((((((((in2[0] * 9.4803055144857715E-7 + in2[1] *
    0.02320783323245932) - in2[2] * 2.9076309096921531E-5) + in2[3] *
    0.021882274381510681) + (in2[4] * -0.0001026911824132076 - in2[5] *
    0.00042780737967584029)) + (in3[0] * 0.00013975754063522079 + in3[1] *
    7.9244610288113972E-21)) + in3[2] * -0.00014157257363048341) + (in3[3] *
    -0.0001409675626320625 - in3[4] * 0.0034249251816346319)) + (in3[5] *
    0.003387750973601051 + in3[6] * 0.0035708122797193441)) + (in3[7] *
    -0.0035336380716857632 - proc_control_B.t8_b * 0.00060385694847962161)) +
                        ((proc_control_B.t9_k * -0.23982646564227009 -
    proc_control_B.t10_k * 0.23982646564227009) + proc_control_B.t11_b *
    0.00060385694847962161)) + ((proc_control_B.t12_ix * -0.026680932679612211 -
    proc_control_B.t13_nj * 0.026680932679612211) - in3[0] * 1.4142135623730951 *
    0.01090649593858282)) + ((in3[1] * 1.4142135623730951 * 0.011000123045544621
    - in3[2] * 1.4142135623730951 * 0.01090649593858282) + in3[3] *
    1.4142135623730951 * 0.01090087173345982)) + (((proc_control_B.t15_hx *
    -2.9388947094905889E-5 - proc_control_B.t20_n * 0.021882274381510681) +
    proc_control_B.t16_d * 0.02320783323245932) - proc_control_B.t17_c *
    2.9076309096921531E-5)) + (((proc_control_B.t18_my * -0.0001026911824132076
    + proc_control_B.t19_dk * 0.00042780737967584029) + proc_control_B.t21_n *
    0.0001026911824132076) - proc_control_B.t22_b * 0.71944283020623911)) +
                   (((proc_control_B.t23_p * -2.9076309096921531E-5 +
                      proc_control_B.out1_tmp_k * 9.4803055144857715E-7) -
                     proc_control_B.out1_tmp_l * 0.00042780737967584029) -
                    proc_control_B.t86_g * 0.021882274381510681)) +
                  (((proc_control_B.out1_tmp_bf * 0.00042780737967584029 +
                     proc_control_B.out1_tmp_cx * 0.00090136558200456737) +
                    proc_control_B.out1_tmp_f * 0.02320783323245932) +
                   proc_control_B.out1_tmp_oo * 9.4803055144857715E-7)) +
                 ((proc_control_B.t84_n * 0.0001026911824132076 +
                   proc_control_B.t87_l * 0.021882274381510681) -
                  proc_control_B.out1_tmp_dd * 0.45533768802085189)) +
                ((proc_control_B.t45_c * -1.2854146887555269 -
                  proc_control_B.out1_tmp_ld * 1.860035941942108E-5) -
                 proc_control_B.t56_g * 0.0060323141908477191)) +
               (((proc_control_B.t55_dk * -0.00028523859224080018 -
                  proc_control_B.t65_n * 9.4803055144857715E-7) +
                 proc_control_B.t71_k * 0.678350505826831) +
                proc_control_B.t81_n * 0.00042780737967584029)) +
              (((proc_control_B.t68_g * 0.0001026911824132076 -
                 proc_control_B.t85_p * 0.02320783323245932) -
                proc_control_B.t37_g * 0.0031834266548094372) +
               proc_control_B.t63_f * 0.00042780737967584029)) +
             (((proc_control_B.t80_c * -0.021882274381510681 +
                proc_control_B.out1_tmp_ls * 2.9076309096921531E-5) -
               proc_control_B.t33_m * 0.013262028769951049) +
              proc_control_B.t39_j * 0.0001026911824132076)) +
    (proc_control_B.t67_n * -0.021882274381510681 + 0.0133404663398061);
  out1[9] = ((((((((((((((((((((((in2[0] * -6.8231348244175949E-6 - in2[1] *
    2.9076309096921531E-5) + in2[2] * 0.021384731826702759) - in2[3] *
    0.002272431716587712) + (in2[4] * 0.00039756137245743289 + in2[5] *
    5.2828771531483014E-6)) + in3[0] * -1.725827915740819E-6) + in3[1] *
    -5.8281975682474322E-18) + in3[2] * 1.748241265284163E-6) + (in3[3] *
    1.740770148765829E-6 - in3[4] * 0.02095639900015615)) + (in3[5] *
    0.021100316216985739 - in3[6] * 0.021822949502860629)) + (in3[7] *
    0.02167903228603104 + proc_control_B.t8_b * 0.004346059700124901)) +
                        ((proc_control_B.t9_k * 0.024881704687475689 +
    proc_control_B.t10_k * 0.024881704687475689) - proc_control_B.t11_b *
    0.004346059700124901)) + ((proc_control_B.t12_ix * 0.0030060816152820162 +
    proc_control_B.t13_nj * 0.0030060816152820162) - in3[0] * 1.4142135623730951
    * 4.8869263875916949E-5)) + ((in3[1] * 1.4142135623730951 *
    6.6264429389244648E-5 - in3[2] * 1.4142135623730951 * 4.8869263875916949E-5)
    + in3[3] * 1.4142135623730951 * 6.7490056888775055E-5)) +
                     (((proc_control_B.t15_hx * 0.0002115171795569455 +
                        proc_control_B.t20_n * 0.002272431716587712) -
                       proc_control_B.t16_d * 2.9076309096921531E-5) +
                      proc_control_B.t17_c * 0.021384731826702759)) +
                    (((proc_control_B.t18_my * 0.00039756137245743289 -
                       proc_control_B.t19_dk * 5.2828771531483014E-6) -
                      proc_control_B.t21_n * 0.00039756137245743289) +
                     proc_control_B.t22_b * 0.00090136558200456737)) +
                   (((proc_control_B.t23_p * 0.021384731826702759 -
                      proc_control_B.out1_tmp_k * 6.8231348244175949E-6) +
                     proc_control_B.out1_tmp_l * 5.2828771531483014E-6) +
                    proc_control_B.t86_g * 0.002272431716587712)) +
                  (((proc_control_B.out1_tmp_bf * -5.2828771531483014E-6 -
                     proc_control_B.out1_tmp_cx * 0.66292668662778553) -
                    proc_control_B.out1_tmp_f * 2.9076309096921531E-5) -
                   proc_control_B.out1_tmp_oo * 6.8231348244175949E-6)) +
                 ((proc_control_B.t84_n * -0.00039756137245743289 -
                   proc_control_B.t87_l * 0.002272431716587712) +
                  proc_control_B.out1_tmp_dd * 0.00057047718448160036)) +
                ((proc_control_B.t45_c * 0.133487820176676 +
                  proc_control_B.out1_tmp_ld * 0.00013386990525507319) +
                 proc_control_B.t56_g * 0.023353661458078809)) +
               (((proc_control_B.t55_dk * 0.2097842192199541 +
                  proc_control_B.t65_n * 6.8231348244175949E-6) -
                 proc_control_B.t71_k * 0.070445383214219059) -
                proc_control_B.t81_n * 5.2828771531483014E-6)) +
              (((proc_control_B.t68_g * -0.00039756137245743289 +
                 proc_control_B.t85_p * 2.9076309096921531E-5) +
                proc_control_B.t37_g * 0.01232440254618042) -
               proc_control_B.t63_f * 5.2828771531483014E-6)) +
             (((proc_control_B.t80_c * 0.002272431716587712 -
                proc_control_B.out1_tmp_ls * 0.021384731826702759) +
               proc_control_B.t33_m * 0.00016376919174759729) -
              proc_control_B.t39_j * 0.00039756137245743289)) +
    (proc_control_B.t67_n * 0.002272431716587712 - 0.0015030408076410081);
  out1[10] = ((((((((((((((((((((((((in2[0] * 0.0001303522588356414 + in2[1] *
    0.021882274381510681) - in2[2] * 0.002272431716587712) + in2[3] *
    1.71018810547529) + (in2[4] * -0.0080268590155159435 - in2[5] *
    0.0039859244840414)) + in3[0] * 0.0013021350951669831) + in3[1] *
    6.1932883292401409E-19) + in3[2] * -0.00131904594055876) + (in3[3] *
    -0.0013134089920948341 - in3[4] * 0.26767193546582568)) + (in3[5] *
    0.26476621250220889 + in3[6] * 0.2790736050389333)) + (in3[7] *
    -0.27616788207531651 - proc_control_B.t8_b * 0.0830290934481406)) +
    ((proc_control_B.t9_k * -18.72549529020894 - proc_control_B.t10_k *
      18.72549529020894) + proc_control_B.t11_b * 0.0830290934481406)) +
    ((proc_control_B.t12_ix * -2.0852233152147792 - proc_control_B.t13_nj *
      2.0852233152147792) + in3[0] * 1.4142135623730951 * 0.043593198825375247))
    + ((in3[1] * 1.4142135623730951 * -0.043051831063235027 + in3[2] *
        1.4142135623730951 * 0.043593198825375247) - in3[3] * 1.4142135623730951
       * 0.043976565543532631)) + ((proc_control_B.t15_hx *
    -0.0040409200239048832 - proc_control_B.t20_n * 1.71018810547529) +
    proc_control_B.t16_d * 0.021882274381510681)) + ((proc_control_B.t17_c *
    -0.002272431716587712 - proc_control_B.t18_my * 0.0080268590155159435) +
    proc_control_B.t19_dk * 0.0039859244840414)) + ((proc_control_B.t21_n *
    0.0080268590155159435 - proc_control_B.t22_b * 0.678350505826831) -
    proc_control_B.t23_p * 0.002272431716587712)) + ((proc_control_B.out1_tmp_k *
    0.0001303522588356414 - proc_control_B.out1_tmp_l * 0.0039859244840414) -
    proc_control_B.t86_g * 1.71018810547529)) + (((proc_control_B.out1_tmp_bf *
    0.0039859244840414 + proc_control_B.out1_tmp_cx * 0.070445383214219059) +
    proc_control_B.out1_tmp_f * 0.021882274381510681) +
    proc_control_B.out1_tmp_oo * 0.0001303522588356414)) +
                   ((proc_control_B.t84_n * 0.0080268590155159435 +
                     proc_control_B.t87_l * 1.71018810547529) -
                    proc_control_B.out1_tmp_dd * 0.42933022336523952)) +
                  ((proc_control_B.t45_c * -100.460348544499 -
                    proc_control_B.out1_tmp_ld * 0.0025575113183552841) -
                   proc_control_B.t56_g * 0.47151599980996189)) +
                 ((proc_control_B.t55_dk * -0.022292555139725449 -
                   proc_control_B.t65_n * 0.0001303522588356414) +
                  proc_control_B.t71_k * 53.015831269733987)) +
                ((proc_control_B.t81_n * 0.0039859244840414 +
                  proc_control_B.t68_g * 0.0080268590155159435) -
                 proc_control_B.t85_p * 0.021882274381510681)) +
               ((proc_control_B.t37_g * -0.2488326294809943 +
                 proc_control_B.t63_f * 0.0039859244840414) -
                proc_control_B.t80_c * 1.71018810547529)) +
              ((proc_control_B.out1_tmp_ls * 0.002272431716587712 -
                proc_control_B.t33_m * 0.1235636590052834) +
               proc_control_B.t39_j * 0.0080268590155159435)) +
    (proc_control_B.t67_n * -1.71018810547529 + 1.0426116576073889);
  out1[11] = ((((((((((((((((((((((in2[0] * -0.010033314971702871 - in2[1] *
    0.0001026911824132076) + in2[2] * 0.00039756137245743289) - in2[3] *
    0.0080268590155159435) + (in2[4] * 0.58374455968341665 - in2[5] *
    1.606290206365557E-6)) + (in3[0] * 5.24748238233168E-7 - in3[1] *
    1.083514276897426E-19)) + in3[2] * -5.3156315041823265E-7) + (in3[3] *
    -5.2929151302328333E-7 + in3[4] * 0.10593667623599359)) + (in3[5] *
    0.10537885436940329 - in3[6] * 0.10793139553633729)) + (in3[7] *
    -0.1033841350690595 + proc_control_B.t8_b * 6.3908140435873166)) +
    ((proc_control_B.t9_k * 0.087876754449678615 + proc_control_B.t10_k *
      0.087876754449678615) - proc_control_B.t11_b * 6.3908140435873166)) +
    ((proc_control_B.t12_ix * 0.36480930847148191 + proc_control_B.t13_nj *
      0.36480930847148191) + in3[0] * 1.4142135623730951 * 0.013457654526727991))
                        + ((in3[1] * 1.4142135623730951 * 0.013869054980635681 +
    in3[2] * 1.4142135623730951 * 0.013457654526727991) + in3[3] *
    1.4142135623730951 * 0.01386868232130781)) + (((proc_control_B.t15_hx *
    0.311032764122789 + proc_control_B.t20_n * 0.0080268590155159435) -
    proc_control_B.t16_d * 0.0001026911824132076) + proc_control_B.t17_c *
    0.00039756137245743289)) + ((proc_control_B.t18_my * 0.58374455968341665 +
    proc_control_B.t19_dk * 1.606290206365557E-6) - proc_control_B.t21_n *
    0.58374455968341665)) + (((proc_control_B.t22_b * 0.0031834266548094372 +
    proc_control_B.t23_p * 0.00039756137245743289) - proc_control_B.out1_tmp_k *
    0.010033314971702871) - proc_control_B.out1_tmp_l * 1.606290206365557E-6)) +
                    (((proc_control_B.t86_g * 0.0080268590155159435 +
                       proc_control_B.out1_tmp_bf * 1.606290206365557E-6) -
                      proc_control_B.out1_tmp_cx * 0.01232440254618042) -
                     proc_control_B.out1_tmp_f * 0.0001026911824132076)) +
                   ((proc_control_B.out1_tmp_oo * -0.010033314971702871 -
                     proc_control_B.t84_n * 0.58374455968341665) -
                    proc_control_B.t87_l * 0.0080268590155159435)) +
                  ((proc_control_B.out1_tmp_dd * 0.002014800998947134 +
                    proc_control_B.t45_c * 0.47151599980996189) +
                   proc_control_B.out1_tmp_ld * 0.19685363974481029)) +
                 ((proc_control_B.t56_g * 34.290486373399979 +
                   proc_control_B.t55_dk * 0.003900077063807416) +
                  proc_control_B.t65_n * 0.010033314971702871)) +
                ((proc_control_B.t71_k * -0.2488326294809943 +
                  proc_control_B.t81_n * 1.606290206365557E-6) -
                 proc_control_B.t68_g * 0.58374455968341665)) +
               (((proc_control_B.t85_p * 0.0001026911824132076 +
                  proc_control_B.t37_g * 18.096081350185919) +
                 proc_control_B.t63_f * 1.606290206365557E-6) +
                proc_control_B.t80_c * 0.0080268590155159435)) +
              ((proc_control_B.out1_tmp_ls * -0.00039756137245743289 -
                proc_control_B.t33_m * 4.9794996397332282E-5) -
               proc_control_B.t39_j * 0.58374455968341665)) +
    (proc_control_B.t67_n * 0.0080268590155159435 - 0.182404654235741);
  out1[12] = (((((((((((((((((((((((in2[0] * 0.0010125044874363649 - in2[1] *
    0.00042780737967584029) + in2[2] * 5.2828771531483014E-6) - in2[3] *
    0.0039859244840414) + (in2[4] * -1.606290206365557E-6 + in2[5] *
    0.53015902215788635)) + in3[0] * -0.1731941163298826) + in3[1] *
    -1.4397960202092559E-21) + in3[2] * 0.175443390567933) + (in3[3] *
    0.17469363248858291 + in3[4] * 0.00062021813460420567)) + (in3[5] *
    -0.0006207996116589 - in3[6] * 0.00064672437426625525)) + (in3[7] *
    0.00064730585132094889 - proc_control_B.t8_b * 0.64492422651466708)) +
    ((proc_control_B.t9_k * 0.3660910622711756 + proc_control_B.t10_k *
      0.3660910622711756) + proc_control_B.t11_b * 0.64492422651466708)) +
    ((proc_control_B.t12_ix * 0.0048476610015380046 + proc_control_B.t13_nj *
      0.0048476610015380046) + in3[0] * 1.4142135623730951 *
     0.00059255494878017434)) + ((in3[1] * 1.4142135623730951 *
    -0.1225770464045467 + in3[2] * 1.4142135623730951 * 0.00059255494878017434)
    + in3[3] * 1.4142135623730951 * 0.00041984673608298361)) +
                       (((proc_control_B.t15_hx * -0.031387639110527318 +
    proc_control_B.t20_n * 0.0039859244840414) - proc_control_B.t16_d *
    0.00042780737967584029) + proc_control_B.t17_c * 5.2828771531483014E-6)) +
                      (((proc_control_B.t18_my * -1.606290206365557E-6 -
    proc_control_B.t19_dk * 0.53015902215788635) + proc_control_B.t21_n *
                        1.606290206365557E-6) + proc_control_B.t22_b *
                       0.013262028769951049)) + (((proc_control_B.t23_p *
    5.2828771531483014E-6 + proc_control_B.out1_tmp_k * 0.0010125044874363649) +
    proc_control_B.out1_tmp_l * 0.53015902215788635) + proc_control_B.t86_g *
    0.0039859244840414)) + ((proc_control_B.out1_tmp_bf * -0.53015902215788635 -
    proc_control_B.out1_tmp_cx * 0.00016376919174759729) -
    proc_control_B.out1_tmp_f * 0.00042780737967584029)) +
                   (((proc_control_B.out1_tmp_oo * 0.0010125044874363649 +
                      proc_control_B.t84_n * 1.606290206365557E-6) -
                     proc_control_B.t87_l * 0.0039859244840414) +
                    proc_control_B.out1_tmp_dd * 0.008393580789239987)) +
                  ((proc_control_B.t45_c * 0.23414229210041551 -
                    proc_control_B.out1_tmp_ld * 0.01986533804350149) -
                   proc_control_B.t56_g * 9.4357149063583354E-5)) +
                 ((proc_control_B.t55_dk * 5.1825024872384838E-5 -
                   proc_control_B.t65_n * 0.0010125044874363649) -
                  proc_control_B.t71_k * 0.1235636590052834)) +
                (((proc_control_B.t81_n * -0.53015902215788635 +
                   proc_control_B.t68_g * 1.606290206365557E-6) +
                  proc_control_B.t85_p * 0.00042780737967584029) -
                 proc_control_B.t37_g * 4.9794996397332282E-5)) +
               ((proc_control_B.t63_f * -0.53015902215788635 +
                 proc_control_B.t80_c * 0.0039859244840414) -
                proc_control_B.out1_tmp_ls * 5.2828771531483014E-6)) +
              ((proc_control_B.t33_m * 16.434929686894481 + proc_control_B.t39_j
                * 1.606290206365557E-6) + proc_control_B.t67_n *
               0.0039859244840414)) + -0.0024238305007690032;
}

// Function for MATLAB Function: '<S299>/Predict'
real_T proc_control::proc_control_xnrm2_UCgE6veV(int32_T n, const real_T x[338],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_le = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_B.absxk_j = std::abs(x[k - 1]);
        if (proc_control_B.absxk_j > proc_control_B.scale_le) {
          proc_control_B.t_p = proc_control_B.scale_le / proc_control_B.absxk_j;
          y = y * proc_control_B.t_p * proc_control_B.t_p + 1.0;
          proc_control_B.scale_le = proc_control_B.absxk_j;
        } else {
          proc_control_B.t_p = proc_control_B.absxk_j / proc_control_B.scale_le;
          y += proc_control_B.t_p * proc_control_B.t_p;
        }
      }

      y = proc_control_B.scale_le * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S299>/Predict'
void proc_control::proc_control_xgemv_5ht9hnKF(int32_T m, int32_T n, const
  real_T A[338], int32_T ia0, const real_T x[338], int32_T ix0, real_T y[13])
{
  if ((m != 0) && (n != 0)) {
    proc_control_B.b_iy_ez = 0;
    while (proc_control_B.b_iy_ez <= n - 1) {
      y[proc_control_B.b_iy_ez] = 0.0;
      proc_control_B.b_iy_ez++;
    }

    proc_control_B.b_iy_ez = 0;
    proc_control_B.b_mz = (n - 1) * 26 + ia0;
    proc_control_B.iac_hz = ia0;
    while (proc_control_B.iac_hz <= proc_control_B.b_mz) {
      int32_T d;
      proc_control_B.ix_b0 = ix0;
      proc_control_B.c_gy = 0.0;
      d = (proc_control_B.iac_hz + m) - 1;
      for (int32_T ia{proc_control_B.iac_hz}; ia <= d; ia++) {
        proc_control_B.c_gy += A[ia - 1] * x[proc_control_B.ix_b0 - 1];
        proc_control_B.ix_b0++;
      }

      y[proc_control_B.b_iy_ez] += proc_control_B.c_gy;
      proc_control_B.b_iy_ez++;
      proc_control_B.iac_hz += 26;
    }
  }
}

// Function for MATLAB Function: '<S299>/Predict'
void proc_control::proc_control_xgerc_XyRtLi2r(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[13], real_T A[338], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA_f = ia0 - 1;
    proc_control_B.jy_c = 0;
    proc_control_B.j_c = 0;
    while (proc_control_B.j_c <= n - 1) {
      if (y[proc_control_B.jy_c] != 0.0) {
        int32_T b;
        int32_T ijA;
        proc_control_B.temp_nq = y[proc_control_B.jy_c] * alpha1;
        proc_control_B.ix_d = ix0;
        ijA = proc_control_B.jA_f;
        b = m + proc_control_B.jA_f;
        while (ijA + 1 <= b) {
          A[ijA] += A[proc_control_B.ix_d - 1] * proc_control_B.temp_nq;
          proc_control_B.ix_d++;
          ijA++;
        }
      }

      proc_control_B.jy_c++;
      proc_control_B.jA_f += 26;
      proc_control_B.j_c++;
    }
  }
}

// Function for MATLAB Function: '<S299>/Predict'
void proc_control::proc_control_qrFactor_O58Jhapw(const real_T A[169], real_T S
  [169], const real_T Ns[169])
{
  for (proc_control_B.j_p = 0; proc_control_B.j_p < 13; proc_control_B.j_p++) {
    proc_control_B.coffset_i = proc_control_B.j_p * 13;
    for (proc_control_B.ii_h = 0; proc_control_B.ii_h < 13; proc_control_B.ii_h
         ++) {
      proc_control_B.aoffset_g = proc_control_B.ii_h * 13;
      proc_control_B.s = 0.0;
      for (proc_control_B.knt_d = 0; proc_control_B.knt_d < 13;
           proc_control_B.knt_d++) {
        proc_control_B.s += A[proc_control_B.knt_d * 13 + proc_control_B.j_p] *
          S[proc_control_B.aoffset_g + proc_control_B.knt_d];
      }

      proc_control_B.y_h[proc_control_B.coffset_i + proc_control_B.ii_h] =
        proc_control_B.s;
      proc_control_B.knt_d = 26 * proc_control_B.j_p + proc_control_B.ii_h;
      proc_control_B.b_A_j[proc_control_B.knt_d] = proc_control_B.y_h[13 *
        proc_control_B.j_p + proc_control_B.ii_h];
      proc_control_B.b_A_j[proc_control_B.knt_d + 13] = Ns[13 *
        proc_control_B.ii_h + proc_control_B.j_p];
    }

    proc_control_B.work_g[proc_control_B.j_p] = 0.0;
  }

  for (proc_control_B.j_p = 0; proc_control_B.j_p < 13; proc_control_B.j_p++) {
    proc_control_B.ii_h = proc_control_B.j_p * 26 + proc_control_B.j_p;
    proc_control_B.atmp_i = proc_control_B.b_A_j[proc_control_B.ii_h];
    proc_control_B.tau_d[proc_control_B.j_p] = 0.0;
    proc_control_B.s = proc_control_xnrm2_UCgE6veV(25 - proc_control_B.j_p,
      proc_control_B.b_A_j, proc_control_B.ii_h + 2);
    if (proc_control_B.s != 0.0) {
      proc_control_B.s = proc_control_rt_hypotd_snf
        (proc_control_B.b_A_j[proc_control_B.ii_h], proc_control_B.s);
      if (proc_control_B.b_A_j[proc_control_B.ii_h] >= 0.0) {
        proc_control_B.s = -proc_control_B.s;
      }

      if (std::abs(proc_control_B.s) < 1.0020841800044864E-292) {
        proc_control_B.knt_d = 0;
        proc_control_B.coffset_i = (proc_control_B.ii_h - proc_control_B.j_p) +
          26;
        do {
          proc_control_B.knt_d++;
          proc_control_B.aoffset_g = proc_control_B.ii_h + 1;
          while (proc_control_B.aoffset_g + 1 <= proc_control_B.coffset_i) {
            proc_control_B.b_A_j[proc_control_B.aoffset_g] *=
              9.9792015476736E+291;
            proc_control_B.aoffset_g++;
          }

          proc_control_B.s *= 9.9792015476736E+291;
          proc_control_B.atmp_i *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_d < 20));

        proc_control_B.s = proc_control_rt_hypotd_snf(proc_control_B.atmp_i,
          proc_control_xnrm2_UCgE6veV(25 - proc_control_B.j_p,
          proc_control_B.b_A_j, proc_control_B.ii_h + 2));
        if (proc_control_B.atmp_i >= 0.0) {
          proc_control_B.s = -proc_control_B.s;
        }

        proc_control_B.tau_d[proc_control_B.j_p] = (proc_control_B.s -
          proc_control_B.atmp_i) / proc_control_B.s;
        proc_control_B.atmp_i = 1.0 / (proc_control_B.atmp_i - proc_control_B.s);
        proc_control_B.aoffset_g = proc_control_B.ii_h + 1;
        while (proc_control_B.aoffset_g + 1 <= proc_control_B.coffset_i) {
          proc_control_B.b_A_j[proc_control_B.aoffset_g] *=
            proc_control_B.atmp_i;
          proc_control_B.aoffset_g++;
        }

        proc_control_B.coffset_i = 0;
        while (proc_control_B.coffset_i <= proc_control_B.knt_d - 1) {
          proc_control_B.s *= 1.0020841800044864E-292;
          proc_control_B.coffset_i++;
        }

        proc_control_B.atmp_i = proc_control_B.s;
      } else {
        proc_control_B.tau_d[proc_control_B.j_p] = (proc_control_B.s -
          proc_control_B.b_A_j[proc_control_B.ii_h]) / proc_control_B.s;
        proc_control_B.atmp_i = 1.0 / (proc_control_B.b_A_j[proc_control_B.ii_h]
          - proc_control_B.s);
        proc_control_B.knt_d = (proc_control_B.ii_h - proc_control_B.j_p) + 26;
        proc_control_B.coffset_i = proc_control_B.ii_h + 1;
        while (proc_control_B.coffset_i + 1 <= proc_control_B.knt_d) {
          proc_control_B.b_A_j[proc_control_B.coffset_i] *=
            proc_control_B.atmp_i;
          proc_control_B.coffset_i++;
        }

        proc_control_B.atmp_i = proc_control_B.s;
      }
    }

    proc_control_B.b_A_j[proc_control_B.ii_h] = proc_control_B.atmp_i;
    if (proc_control_B.j_p + 1 < 13) {
      proc_control_B.s = proc_control_B.b_A_j[proc_control_B.ii_h];
      proc_control_B.b_A_j[proc_control_B.ii_h] = 1.0;
      if (proc_control_B.tau_d[proc_control_B.j_p] != 0.0) {
        boolean_T exitg2;
        proc_control_B.knt_d = 26 - proc_control_B.j_p;
        proc_control_B.coffset_i = (proc_control_B.ii_h - proc_control_B.j_p) +
          25;
        while ((proc_control_B.knt_d > 0) &&
               (proc_control_B.b_A_j[proc_control_B.coffset_i] == 0.0)) {
          proc_control_B.knt_d--;
          proc_control_B.coffset_i--;
        }

        proc_control_B.coffset_i = 12 - proc_control_B.j_p;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.coffset_i > 0)) {
          int32_T exitg1;
          proc_control_B.aoffset_g = ((proc_control_B.coffset_i - 1) * 26 +
            proc_control_B.ii_h) + 26;
          proc_control_B.ia_f = proc_control_B.aoffset_g;
          do {
            exitg1 = 0;
            if (proc_control_B.ia_f + 1 <= proc_control_B.aoffset_g +
                proc_control_B.knt_d) {
              if (proc_control_B.b_A_j[proc_control_B.ia_f] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.ia_f++;
              }
            } else {
              proc_control_B.coffset_i--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt_d = 0;
        proc_control_B.coffset_i = 0;
      }

      if (proc_control_B.knt_d > 0) {
        proc_control_xgemv_5ht9hnKF(proc_control_B.knt_d,
          proc_control_B.coffset_i, proc_control_B.b_A_j, proc_control_B.ii_h +
          27, proc_control_B.b_A_j, proc_control_B.ii_h + 1,
          proc_control_B.work_g);
        proc_control_xgerc_XyRtLi2r(proc_control_B.knt_d,
          proc_control_B.coffset_i, -proc_control_B.tau_d[proc_control_B.j_p],
          proc_control_B.ii_h + 1, proc_control_B.work_g, proc_control_B.b_A_j,
          proc_control_B.ii_h + 27);
      }

      proc_control_B.b_A_j[proc_control_B.ii_h] = proc_control_B.s;
    }
  }

  for (proc_control_B.j_p = 0; proc_control_B.j_p < 13; proc_control_B.j_p++) {
    proc_control_B.ii_h = 0;
    while (proc_control_B.ii_h <= proc_control_B.j_p) {
      proc_control_B.y_h[proc_control_B.ii_h + 13 * proc_control_B.j_p] =
        proc_control_B.b_A_j[26 * proc_control_B.j_p + proc_control_B.ii_h];
      proc_control_B.ii_h++;
    }

    proc_control_B.ii_h = proc_control_B.j_p + 1;
    while (proc_control_B.ii_h + 1 < 14) {
      proc_control_B.y_h[proc_control_B.ii_h + 13 * proc_control_B.j_p] = 0.0;
      proc_control_B.ii_h++;
    }
  }

  proc_control_B.knt_d = 0;
  for (proc_control_B.j_p = 0; proc_control_B.j_p < 13; proc_control_B.j_p++) {
    proc_control_B.coffset_i = 0;
    for (proc_control_B.ii_h = 0; proc_control_B.ii_h < 13; proc_control_B.ii_h
         ++) {
      S[proc_control_B.ii_h + proc_control_B.knt_d] =
        proc_control_B.y_h[proc_control_B.coffset_i + proc_control_B.j_p];
      proc_control_B.coffset_i += 13;
    }

    proc_control_B.knt_d += 13;
  }
}

real_T proc_control::proc_control_rt_atan2d_snf(real_T u0, real_T u1)
{
  real_T y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = (rtNaN);
  } else if (std::isinf(u0) && std::isinf(u1)) {
    int32_T u1_0;
    if (u0 > 0.0) {
      proc_control_B.u0 = 1;
    } else {
      proc_control_B.u0 = -1;
    }

    if (u1 > 0.0) {
      u1_0 = 1;
    } else {
      u1_0 = -1;
    }

    y = std::atan2(static_cast<real_T>(proc_control_B.u0), static_cast<real_T>
                   (u1_0));
  } else if (u1 == 0.0) {
    if (u0 > 0.0) {
      y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
      y = -(RT_PI / 2.0);
    } else {
      y = 0.0;
    }
  } else {
    y = std::atan2(u0, u1);
  }

  return y;
}

void proc_control::MultiTrajectoryManager_resetImp
  (MultiTrajectoryManager_proc_c_T *b_this)
{
  //  Perform one-time calculations, such as computing constants
  b_this->dummy = 999.0;

  //  Chiffre NULL
  for (proc_control_B.i24 = 0; proc_control_B.i24 < 13; proc_control_B.i24++) {
    b_this->emptyArray[proc_control_B.i24] = b_this->dummy;
  }

  //  Vecteur pose NULL
  b_this->targetReachedCount = 0.0;
  for (proc_control_B.i24 = 0; proc_control_B.i24 < 7; proc_control_B.i24++) {
    b_this->initialPose[proc_control_B.i24] = 0.0;
  }

  //  Buffer trajectoire
  proc_control_B.i24 = 0;
  for (int32_T i{0}; i < 13; i++) {
    for (proc_control_B.i25 = 0; proc_control_B.i25 < 6000; proc_control_B.i25++)
    {
      b_this->poseBuffer[proc_control_B.i25 + proc_control_B.i24] =
        b_this->dummy;
    }

    proc_control_B.i24 += 6000;
  }

  b_this->bufferCount = 0.0;
  b_this->done = false;
  b_this->init = false;
}

void proc_control::proc_control_binary_expand_op_p(real_T in1[3], const int32_T
  in2_data[], const real_T in3_data[], const int32_T *in3_size, const real_T
  in4_data[], const int32_T *in4_size)
{
  int32_T loop_ub;

  // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
  //   ActionPort: '<S312>/Action Port'

  // SwitchCase: '<S9>/Switch Case' incorporates:
  //   MATLABSystem: '<S312>/MATLAB System1'

  loop_ub = *in4_size == 1 ? *in3_size : *in4_size;
  for (proc_control_B.i37 = 0; proc_control_B.i37 < loop_ub; proc_control_B.i37
       ++) {
    in1[in2_data[0] + 1] = in3_data[0] * 2.0 * in4_data[0];
  }

  // End of SwitchCase: '<S9>/Switch Case'
  // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
}

real_T proc_control::proc_control_norm_p(const real_T x[3])
{
  real_T y;
  proc_control_B.scale_l = 3.3121686421112381E-170;
  proc_control_B.absxk_ai = std::abs(x[0]);
  if (proc_control_B.absxk_ai > 3.3121686421112381E-170) {
    y = 1.0;
    proc_control_B.scale_l = proc_control_B.absxk_ai;
  } else {
    proc_control_B.t_i = proc_control_B.absxk_ai / 3.3121686421112381E-170;
    y = proc_control_B.t_i * proc_control_B.t_i;
  }

  proc_control_B.absxk_ai = std::abs(x[1]);
  if (proc_control_B.absxk_ai > proc_control_B.scale_l) {
    proc_control_B.t_i = proc_control_B.scale_l / proc_control_B.absxk_ai;
    y = y * proc_control_B.t_i * proc_control_B.t_i + 1.0;
    proc_control_B.scale_l = proc_control_B.absxk_ai;
  } else {
    proc_control_B.t_i = proc_control_B.absxk_ai / proc_control_B.scale_l;
    y += proc_control_B.t_i * proc_control_B.t_i;
  }

  proc_control_B.absxk_ai = std::abs(x[2]);
  if (proc_control_B.absxk_ai > proc_control_B.scale_l) {
    proc_control_B.t_i = proc_control_B.scale_l / proc_control_B.absxk_ai;
    y = y * proc_control_B.t_i * proc_control_B.t_i + 1.0;
    proc_control_B.scale_l = proc_control_B.absxk_ai;
  } else {
    proc_control_B.t_i = proc_control_B.absxk_ai / proc_control_B.scale_l;
    y += proc_control_B.t_i * proc_control_B.t_i;
  }

  return proc_control_B.scale_l * std::sqrt(y);
}

void proc_control::MultiTrajectoryManager_stepImpl
  (MultiTrajectoryManager_proc_c_T *b_this, boolean_T isNew, const
   SL_Bus_proc_control_geometry_msgs_Transform trajMsg_Transforms[2000],
   uint32_T trajMsg_Transforms_SL_Info_Rece, const
   SL_Bus_proc_control_geometry_msgs_Twist trajMsg_Velocities[2000], real_T
   reset, const real_T mesuredPose[13], real_T currentPose[130], boolean_T
   *isReached, boolean_T *isTrajDone, real_T initWpt[7])
{
  boolean_T exitg1;
  boolean_T mask1;
  boolean_T mask2;

  //         %% ================================================================ 
  //  Main execute a chaque iteration.
  if ((reset != 0.0) || (!b_this->init)) {
    MultiTrajectoryManager_resetImp(b_this);
    std::memcpy(&proc_control_B.tamp[0], &mesuredPose[0], 13U * sizeof(real_T));

    // =================================================================
    //  Fonction qui reset la trajectoire
    //  remove roll and pitch from initial condition
    proc_control_B.aSinInput = 1.0 / std::sqrt(((mesuredPose[3] * mesuredPose[3]
      + mesuredPose[4] * mesuredPose[4]) + mesuredPose[5] * mesuredPose[5]) +
      mesuredPose[6] * mesuredPose[6]);
    proc_control_B.y_idx_0 = mesuredPose[3] * proc_control_B.aSinInput;
    proc_control_B.y_idx_1 = mesuredPose[4] * proc_control_B.aSinInput;
    proc_control_B.y_idx_2 = mesuredPose[5] * proc_control_B.aSinInput;
    proc_control_B.y_idx_3 = mesuredPose[6] * proc_control_B.aSinInput;
    proc_control_B.aSinInput = (proc_control_B.y_idx_1 * proc_control_B.y_idx_3
      + proc_control_B.y_idx_0 * proc_control_B.y_idx_2) * 2.0;
    mask1 = (proc_control_B.aSinInput >= 0.99999999999999778);
    mask2 = (proc_control_B.aSinInput <= -0.99999999999999778);
    if (proc_control_B.aSinInput >= 0.99999999999999778) {
      proc_control_B.aSinInput = 1.0;
    }

    proc_control_B.c_idx_0 = proc_control_B.aSinInput;
    if (mask2) {
      proc_control_B.c_idx_0 = -1.0;
    }

    proc_control_B.aSinInput = proc_control_B.y_idx_0 * proc_control_B.y_idx_0;
    proc_control_B.c_tmp = proc_control_B.y_idx_1 * proc_control_B.y_idx_1;
    proc_control_B.c_tmp_i = proc_control_B.y_idx_2 * proc_control_B.y_idx_2;
    proc_control_B.c_tmp_o = proc_control_B.y_idx_3 * proc_control_B.y_idx_3;
    proc_control_B.c_n[0] = proc_control_rt_atan2d_snf((proc_control_B.y_idx_2 *
      proc_control_B.y_idx_3 - proc_control_B.y_idx_0 * proc_control_B.y_idx_1) *
      -2.0, ((proc_control_B.aSinInput - proc_control_B.c_tmp) -
             proc_control_B.c_tmp_i) + proc_control_B.c_tmp_o);
    proc_control_B.c_n[1] = std::asin(proc_control_B.c_idx_0);
    proc_control_B.c_n[2] = proc_control_rt_atan2d_snf((proc_control_B.y_idx_1 *
      proc_control_B.y_idx_2 - proc_control_B.y_idx_0 * proc_control_B.y_idx_3) *
      -2.0, ((proc_control_B.aSinInput + proc_control_B.c_tmp) -
             proc_control_B.c_tmp_i) - proc_control_B.c_tmp_o);
    proc_control_B.trueCount = 0;
    if (mask1 || mask2) {
      for (proc_control_B.nx = 0; proc_control_B.nx < 1; proc_control_B.nx++) {
        proc_control_B.trueCount++;
      }
    }

    if (proc_control_B.trueCount - 1 >= 0) {
      proc_control_B.c_n[0] = 0.0;
    }

    proc_control_B.trueCount = 0;
    if (mask1 || mask2) {
      for (proc_control_B.nx = 0; proc_control_B.nx < 1; proc_control_B.nx++) {
        proc_control_B.trueCount++;
      }
    }

    proc_control_B.h_size_idx_1 = proc_control_B.trueCount;
    proc_control_B.b_x_size_d = proc_control_B.trueCount;
    if (proc_control_B.trueCount - 1 >= 0) {
      proc_control_B.b_x_data_i = proc_control_B.c_idx_0;
    }

    proc_control_B.nx = proc_control_B.trueCount - 1;
    for (proc_control_B.k_a = 0; proc_control_B.k_a <= proc_control_B.nx;
         proc_control_B.k_a++) {
      proc_control_B.y_idx_2 = proc_control_B.b_x_data_i;
      if (!std::isnan(proc_control_B.b_x_data_i)) {
        if (proc_control_B.b_x_data_i < 0.0) {
          proc_control_B.y_idx_2 = -1.0;
        } else {
          proc_control_B.y_idx_2 = (proc_control_B.b_x_data_i > 0.0);
        }
      }

      proc_control_B.b_x_data_i = proc_control_B.y_idx_2;
    }

    proc_control_B.trueCount = 0;
    if (mask1 || mask2) {
      for (proc_control_B.nx = 0; proc_control_B.nx < 1; proc_control_B.nx++) {
        proc_control_B.trueCount++;
      }
    }

    proc_control_B.k_a = proc_control_B.trueCount;
    proc_control_B.e_size_j = proc_control_B.trueCount;
    if (proc_control_B.trueCount - 1 >= 0) {
      proc_control_B.e_data_n = proc_control_rt_atan2d_snf
        (proc_control_B.y_idx_1, proc_control_B.y_idx_0);
    }

    proc_control_B.trueCount = 0;
    if (mask1 || mask2) {
      for (proc_control_B.nx = 0; proc_control_B.nx < 1; proc_control_B.nx++) {
        proc_control_B.k_data_h = 1;
        proc_control_B.trueCount++;
      }
    }

    if (proc_control_B.h_size_idx_1 == proc_control_B.k_a) {
      if (proc_control_B.h_size_idx_1 - 1 >= 0) {
        proc_control_B.c_n[2] = proc_control_B.b_x_data_i * 2.0 *
          proc_control_B.e_data_n;
      }
    } else {
      proc_control_binary_expand_op_p(proc_control_B.c_n,
        &proc_control_B.k_data_h, &proc_control_B.b_x_data_i,
        &proc_control_B.b_x_size_d, &proc_control_B.e_data_n,
        &proc_control_B.e_size_j);
    }

    //  Retransformer en quaternion
    proc_control_B.y_idx_0 = proc_control_B.c_n[0] * 0.0 / 2.0;
    proc_control_B.aSinInput = proc_control_B.c_n[1] * 0.0 / 2.0;
    proc_control_B.y_idx_1 = proc_control_B.c_n[2] / 2.0;
    proc_control_B.c_n[0] = std::cos(proc_control_B.y_idx_0);
    proc_control_B.y_idx_0 = std::sin(proc_control_B.y_idx_0);
    proc_control_B.c_n[1] = std::cos(proc_control_B.aSinInput);
    proc_control_B.aSinInput = std::sin(proc_control_B.aSinInput);
    proc_control_B.c_n[2] = std::cos(proc_control_B.y_idx_1);
    proc_control_B.y_idx_1 = std::sin(proc_control_B.y_idx_1);
    proc_control_B.y_idx_2 = proc_control_B.c_n[0] * proc_control_B.c_n[1];
    proc_control_B.y_idx_3 = proc_control_B.y_idx_0 * proc_control_B.aSinInput;
    proc_control_B.tamp[3] = proc_control_B.y_idx_2 * proc_control_B.c_n[2] -
      proc_control_B.y_idx_3 * proc_control_B.y_idx_1;
    proc_control_B.aSinInput *= proc_control_B.c_n[0];
    proc_control_B.tamp[4] = proc_control_B.y_idx_0 * proc_control_B.c_n[1] *
      proc_control_B.c_n[2] + proc_control_B.aSinInput * proc_control_B.y_idx_1;
    proc_control_B.tamp[5] = -proc_control_B.y_idx_0 * proc_control_B.c_n[1] *
      proc_control_B.y_idx_1 + proc_control_B.aSinInput * proc_control_B.c_n[2];
    proc_control_B.tamp[6] = proc_control_B.y_idx_2 * proc_control_B.y_idx_1 +
      proc_control_B.y_idx_3 * proc_control_B.c_n[2];

    //  Mettre les vitesse à 0;
    for (proc_control_B.trueCount = 0; proc_control_B.trueCount < 6;
         proc_control_B.trueCount++) {
      proc_control_B.tamp[proc_control_B.trueCount + 7] = 0.0;
    }

    //  definir les conditions initiaux
    proc_control_B.trueCount = 0;
    for (proc_control_B.nx = 0; proc_control_B.nx < 13; proc_control_B.nx++) {
      b_this->poseBuffer[proc_control_B.trueCount] =
        proc_control_B.tamp[proc_control_B.nx];
      proc_control_B.trueCount += 6000;
    }

    // InitCond;
    b_this->bufferCount = 1.0;
    for (proc_control_B.trueCount = 0; proc_control_B.trueCount < 7;
         proc_control_B.trueCount++) {
      b_this->initialPose[proc_control_B.trueCount] =
        proc_control_B.tamp[proc_control_B.trueCount];
    }

    b_this->init = true;
    isNew = false;
  }

  //  Add new pose if new arrive
  //         %% ================================================================ 
  //  Fonction qui traites les nouveau poses.
  //  Si il y a des noiveau points
  if (isNew) {
    //  nombre de points recu.
    //  si il y a asser de place dans le buffer.
    if (static_cast<real_T>(trajMsg_Transforms_SL_Info_Rece) +
        b_this->bufferCount < 6000.0) {
      std::memset(&proc_control_B.tamp[0], 0, 13U * sizeof(real_T));

      //  Remplire le tampon
      proc_control_B.nx = static_cast<int32_T>(trajMsg_Transforms_SL_Info_Rece)
        - 1;
      for (proc_control_B.k_a = 0; proc_control_B.k_a <= proc_control_B.nx;
           proc_control_B.k_a++) {
        proc_control_B.tamp[0] = trajMsg_Transforms[proc_control_B.k_a].
          Translation.X;
        proc_control_B.tamp[1] = trajMsg_Transforms[proc_control_B.k_a].
          Translation.Y;
        proc_control_B.tamp[2] = trajMsg_Transforms[proc_control_B.k_a].
          Translation.Z;
        proc_control_B.tamp[3] = trajMsg_Transforms[proc_control_B.k_a].
          Rotation.W;
        proc_control_B.tamp[4] = trajMsg_Transforms[proc_control_B.k_a].
          Rotation.X;
        proc_control_B.tamp[5] = trajMsg_Transforms[proc_control_B.k_a].
          Rotation.Y;
        proc_control_B.tamp[6] = trajMsg_Transforms[proc_control_B.k_a].
          Rotation.Z;
        proc_control_B.tamp[7] = trajMsg_Velocities[proc_control_B.k_a].Linear.X;
        proc_control_B.tamp[8] = trajMsg_Velocities[proc_control_B.k_a].Linear.Y;
        proc_control_B.tamp[9] = trajMsg_Velocities[proc_control_B.k_a].Linear.Z;
        proc_control_B.tamp[10] = trajMsg_Velocities[proc_control_B.k_a].
          Angular.X;
        proc_control_B.tamp[11] = trajMsg_Velocities[proc_control_B.k_a].
          Angular.Y;
        proc_control_B.tamp[12] = trajMsg_Velocities[proc_control_B.k_a].
          Angular.Z;
        b_this->bufferCount++;
        proc_control_B.b_this_k = static_cast<int32_T>(b_this->bufferCount);
        for (proc_control_B.trueCount = 0; proc_control_B.trueCount < 13;
             proc_control_B.trueCount++) {
          b_this->poseBuffer[(proc_control_B.b_this_k + 6000 *
                              proc_control_B.trueCount) - 1] =
            proc_control_B.tamp[proc_control_B.trueCount];
        }
      }

      //  Definir le pose initial pour la prochaine trajectoire
      for (proc_control_B.trueCount = 0; proc_control_B.trueCount < 7;
           proc_control_B.trueCount++) {
        b_this->initialPose[proc_control_B.trueCount] =
          proc_control_B.tamp[proc_control_B.trueCount];
      }
    } else {
      printf("WARNING : proc control : trajectory buffer overflow.");
      fflush(stdout);
    }
  }

  //         %% ================================================================ 
  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  proc_control_B.aSinInput = 2.0;
  mask1 = false;

  //  Vérifier s'il reste au moins mpc.p points dans les buffers
  proc_control_B.k_a = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.k_a < 9)) {
    boolean_T exitg2;
    proc_control_B.aSinInput = static_cast<real_T>(proc_control_B.k_a) + 2.0;
    for (proc_control_B.trueCount = 0; proc_control_B.trueCount < 13;
         proc_control_B.trueCount++) {
      proc_control_B.x_cs[proc_control_B.trueCount] = (b_this->poseBuffer[(6000 *
        proc_control_B.trueCount + proc_control_B.k_a) + 1] ==
        b_this->emptyArray[proc_control_B.trueCount]);
    }

    mask2 = true;
    proc_control_B.nx = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.nx < 13)) {
      if (!proc_control_B.x_cs[proc_control_B.nx]) {
        mask2 = false;
        exitg2 = true;
      } else {
        proc_control_B.nx++;
      }
    }

    if (mask2) {
      mask1 = true;
      exitg1 = true;
    } else {
      proc_control_B.k_a++;
    }
  }

  std::memset(&currentPose[0], 0, 130U * sizeof(real_T));
  proc_control_B.b_this_k = static_cast<int32_T>(proc_control_B.aSinInput);
  proc_control_B.trueCount = 0;
  proc_control_B.nx = 0;
  for (proc_control_B.k_a = 0; proc_control_B.k_a < 13; proc_control_B.k_a++) {
    for (proc_control_B.h_size_idx_1 = 0; proc_control_B.h_size_idx_1 <
         proc_control_B.b_this_k; proc_control_B.h_size_idx_1++) {
      currentPose[proc_control_B.h_size_idx_1 + proc_control_B.trueCount] =
        b_this->poseBuffer[proc_control_B.h_size_idx_1 + proc_control_B.nx];
    }

    proc_control_B.trueCount += 10;
    proc_control_B.nx += 6000;
  }

  //  S'il ya moins de mpc.p points, padder avec le dernier points
  if (mask1) {
    proc_control_B.nx = 10 - proc_control_B.b_this_k;
    for (proc_control_B.k_a = 0; proc_control_B.k_a <= proc_control_B.nx;
         proc_control_B.k_a++) {
      proc_control_B.h_size_idx_1 = proc_control_B.b_this_k + proc_control_B.k_a;
      for (proc_control_B.trueCount = 0; proc_control_B.trueCount < 13;
           proc_control_B.trueCount++) {
        proc_control_B.tamp[proc_control_B.trueCount] = currentPose[(10 *
          proc_control_B.trueCount + proc_control_B.b_this_k) - 2];
      }

      for (proc_control_B.trueCount = 0; proc_control_B.trueCount < 13;
           proc_control_B.trueCount++) {
        currentPose[(proc_control_B.h_size_idx_1 + 10 * proc_control_B.trueCount)
          - 1] = proc_control_B.tamp[proc_control_B.trueCount];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  proc_control_B.trueCount = 0;
  for (proc_control_B.nx = 0; proc_control_B.nx < 13; proc_control_B.nx++) {
    proc_control_B.x_cs[proc_control_B.nx] = !(b_this->
      poseBuffer[proc_control_B.trueCount + 1] == b_this->
      emptyArray[proc_control_B.nx]);
    proc_control_B.trueCount += 6000;
  }

  mask2 = true;
  proc_control_B.nx = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.nx < 13)) {
    if (!proc_control_B.x_cs[proc_control_B.nx]) {
      mask2 = false;
      exitg1 = true;
    } else {
      proc_control_B.nx++;
    }
  }

  if (mask2) {
    // this.prediction+1
    proc_control_B.trueCount = 0;
    for (proc_control_B.nx = 0; proc_control_B.nx < 13; proc_control_B.nx++) {
      std::memcpy(&proc_control_B.b_this_m[proc_control_B.trueCount],
                  &b_this->poseBuffer[proc_control_B.trueCount + 1], 5999U *
                  sizeof(real_T));
      proc_control_B.trueCount += 6000;
    }

    proc_control_B.trueCount = 0;
    for (proc_control_B.nx = 0; proc_control_B.nx < 13; proc_control_B.nx++) {
      proc_control_B.b_this_m[proc_control_B.trueCount + 5999] =
        b_this->emptyArray[proc_control_B.nx];
      proc_control_B.trueCount += 6000;
    }

    std::memcpy(&b_this->poseBuffer[0], &proc_control_B.b_this_m[0], 78000U *
                sizeof(real_T));
    b_this->bufferCount--;
    b_this->done = false;
  } else {
    b_this->done = true;
  }

  //         %% ================================================================ 
  //  Fonction qui verifie le target reached
  *isReached = false;

  //  vérifier le traget reached si la trajectoire est terminé
  if (b_this->done) {
    //  calcule de l'angle entre les 2 quaternions
    proc_control_B.qRel_i[0] = ((mesuredPose[3] * b_this->poseBuffer[18000] -
      -b_this->poseBuffer[24000] * mesuredPose[4]) - -b_this->poseBuffer[30000] *
      mesuredPose[5]) - -b_this->poseBuffer[36000] * mesuredPose[6];
    proc_control_B.qRel_i[1] = (mesuredPose[4] * b_this->poseBuffer[18000] +
      mesuredPose[3] * -b_this->poseBuffer[24000]) + (-b_this->poseBuffer[30000]
      * mesuredPose[6] - -b_this->poseBuffer[36000] * mesuredPose[5]);
    proc_control_B.qRel_i[2] = (mesuredPose[5] * b_this->poseBuffer[18000] +
      mesuredPose[3] * -b_this->poseBuffer[30000]) + (-b_this->poseBuffer[36000]
      * mesuredPose[4] - -b_this->poseBuffer[24000] * mesuredPose[6]);
    proc_control_B.qRel_i[3] = (mesuredPose[6] * b_this->poseBuffer[18000] +
      mesuredPose[3] * -b_this->poseBuffer[36000]) + (-b_this->poseBuffer[24000]
      * mesuredPose[5] - -b_this->poseBuffer[30000] * mesuredPose[4]);

    //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
    proc_control_B.c_n[0] = b_this->poseBuffer[0] - mesuredPose[0];
    proc_control_B.c_n[1] = b_this->poseBuffer[6000] - mesuredPose[1];
    proc_control_B.c_n[2] = b_this->poseBuffer[12000] - mesuredPose[2];
    if ((proc_control_norm_p(proc_control_B.c_n) < 0.2) && (2.0 *
         proc_control_rt_atan2d_snf(proc_control_norm_p(&proc_control_B.qRel_i[1]),
          proc_control_B.qRel_i[0]) < 0.3)) {
      b_this->targetReachedCount++;

      //  si le sub est dans la zone de convergence depuis le temps demander
      *isReached = (b_this->targetReachedCount * 0.1 >= 3.0);
    } else {
      //  Remettre le compteur a 0 si le sub n'est pas dans la zone
      b_this->targetReachedCount = 0.0;
    }
  } else {
    b_this->targetReachedCount = 0.0;
  }

  *isTrajDone = b_this->done;
  for (proc_control_B.trueCount = 0; proc_control_B.trueCount < 7;
       proc_control_B.trueCount++) {
    initWpt[proc_control_B.trueCount] = b_this->
      initialPose[proc_control_B.trueCount];
  }
}

void proc_control::proc__quaternion_parenReference(real_T obj_a, real_T obj_b,
  real_T obj_c, real_T obj_d, boolean_T varargin_1, real_T o_a_data[], int32_T
  o_a_size[2], real_T o_b_data[], int32_T o_b_size[2], real_T o_c_data[],
  int32_T o_c_size[2], real_T o_d_data[], int32_T o_d_size[2])
{
  int32_T b_i;
  proc_control_B.end = 0;
  proc_control_B.trueCount_p = 0;
  if (varargin_1) {
    for (proc_control_B.i_dh = 0; proc_control_B.i_dh < 1; proc_control_B.i_dh++)
    {
      proc_control_B.trueCount_p++;
    }
  }

  proc_control_B.i_dh = 0;
  if (varargin_1) {
    for (b_i = 0; b_i < 1; b_i++) {
      proc_control_B.end++;
      proc_control_B.i_dh++;
    }
  }

  b_i = 0;
  if (varargin_1) {
    for (int32_T d_i{0}; d_i < 1; d_i++) {
      b_i++;
    }
  }

  o_a_size[0] = 1;
  o_a_size[1] = proc_control_B.trueCount_p;
  proc_control_B.trueCount_p--;
  for (int32_T d_i{0}; d_i <= proc_control_B.trueCount_p; d_i++) {
    o_a_data[d_i] = obj_a;
  }

  o_b_size[0] = 1;
  o_b_size[1] = proc_control_B.end;
  proc_control_B.trueCount_p = proc_control_B.end - 1;
  for (int32_T d_i{0}; d_i <= proc_control_B.trueCount_p; d_i++) {
    o_b_data[d_i] = obj_b;
  }

  o_c_size[0] = 1;
  o_c_size[1] = proc_control_B.i_dh;
  proc_control_B.trueCount_p = proc_control_B.i_dh - 1;
  for (int32_T d_i{0}; d_i <= proc_control_B.trueCount_p; d_i++) {
    o_c_data[d_i] = obj_c;
  }

  o_d_size[0] = 1;
  o_d_size[1] = b_i;
  proc_control_B.trueCount_p = b_i - 1;
  for (int32_T d_i{0}; d_i <= proc_control_B.trueCount_p; d_i++) {
    o_d_data[d_i] = obj_d;
  }
}

void proc_control::proc_con_quaternion_parenAssign(real_T obj_a, real_T obj_b,
  real_T obj_c, real_T obj_d, const real_T rhs_a_data[], const int32_T
  rhs_a_size[2], const real_T rhs_b_data[], const int32_T rhs_b_size[2], const
  real_T rhs_c_data[], const int32_T rhs_c_size[2], const real_T rhs_d_data[],
  const int32_T rhs_d_size[2], real_T *o_a, real_T *o_b, real_T *o_c, real_T
  *o_d)
{
  *o_a = obj_a;
  if (rhs_a_size[1] - 1 >= 0) {
    *o_a = rhs_a_data[0];
  }

  *o_b = obj_b;
  if (rhs_b_size[1] - 1 >= 0) {
    *o_b = rhs_b_data[0];
  }

  *o_c = obj_c;
  if (rhs_c_size[1] - 1 >= 0) {
    *o_c = rhs_c_data[0];
  }

  *o_d = obj_d;
  if (rhs_d_size[1] - 1 >= 0) {
    *o_d = rhs_d_data[0];
  }
}

void proc_control::proc_contr_quaternionBase_slerp(real_T q1_a, real_T q1_b,
  real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T q2_c, real_T q2_d,
  real_T *qo_a, real_T *qo_b, real_T *qo_c, real_T *qo_d)
{
  proc_control_B.n_m = std::sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) +
    q1_d * q1_d);
  proc_control_B.od_tmp_o = q1_a / proc_control_B.n_m;
  proc_control_B.dp_a = q1_b / proc_control_B.n_m;
  proc_control_B.b_q_c_c = q1_c / proc_control_B.n_m;
  proc_control_B.theta0_i = q1_d / proc_control_B.n_m;
  proc_control_B.oa_n = ((proc_control_B.od_tmp_o - proc_control_B.dp_a * 0.0) -
    proc_control_B.b_q_c_c * 0.0) - proc_control_B.theta0_i * 0.0;
  proc_control_B.ob_ch = ((proc_control_B.od_tmp_o * 0.0 + proc_control_B.dp_a)
    + proc_control_B.b_q_c_c * 0.0) - proc_control_B.theta0_i * 0.0;
  proc_control_B.oc_n = ((proc_control_B.od_tmp_o * 0.0 - proc_control_B.dp_a *
    0.0) + proc_control_B.b_q_c_c) + proc_control_B.theta0_i * 0.0;
  proc_control_B.od_h = ((proc_control_B.od_tmp_o * 0.0 + proc_control_B.dp_a *
    0.0) - proc_control_B.b_q_c_c * 0.0) + proc_control_B.theta0_i;
  proc_control_B.n_m = std::sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) +
    q2_d * q2_d);
  proc_control_B.od_tmp_o = q2_a / proc_control_B.n_m;
  proc_control_B.dp_a = q2_b / proc_control_B.n_m;
  proc_control_B.b_q_c_c = q2_c / proc_control_B.n_m;
  proc_control_B.theta0_i = q2_d / proc_control_B.n_m;
  proc_control_B.oa_tmp_i = ((proc_control_B.od_tmp_o - proc_control_B.dp_a *
    0.0) - proc_control_B.b_q_c_c * 0.0) - proc_control_B.theta0_i * 0.0;
  proc_control_B.ob_tmp_n = ((proc_control_B.od_tmp_o * 0.0 +
    proc_control_B.dp_a) + proc_control_B.b_q_c_c * 0.0) -
    proc_control_B.theta0_i * 0.0;
  proc_control_B.n_m = ((proc_control_B.od_tmp_o * 0.0 - proc_control_B.dp_a *
    0.0) + proc_control_B.b_q_c_c) + proc_control_B.theta0_i * 0.0;
  proc_control_B.od_tmp_o = ((proc_control_B.od_tmp_o * 0.0 +
    proc_control_B.dp_a * 0.0) - proc_control_B.b_q_c_c * 0.0) +
    proc_control_B.theta0_i;
  proc_control_B.dp_a = ((proc_control_B.oa_n * proc_control_B.oa_tmp_i +
    proc_control_B.ob_ch * proc_control_B.ob_tmp_n) + proc_control_B.oc_n *
    proc_control_B.n_m) + proc_control_B.od_h * proc_control_B.od_tmp_o;
  if (proc_control_B.dp_a < 0.0) {
    proc_control_B.oa_tmp_i = -proc_control_B.oa_tmp_i;
    proc_control_B.ob_tmp_n = -proc_control_B.ob_tmp_n;
    proc_control_B.n_m = -proc_control_B.n_m;
    proc_control_B.od_tmp_o = -proc_control_B.od_tmp_o;
    proc_control_B.dp_a = -proc_control_B.dp_a;
  }

  if (proc_control_B.dp_a > 1.0) {
    proc_control_B.dp_a = 1.0;
  }

  proc_control_B.theta0_i = std::acos(proc_control_B.dp_a);
  proc_control_B.b_q_c_c = std::sin(proc_control_B.theta0_i);
  proc_control_B.dp_a = 1.0 / proc_control_B.b_q_c_c;
  proc_control_B.theta0_i = std::sin(0.0 * proc_control_B.theta0_i);
  *qo_a = (proc_control_B.theta0_i * proc_control_B.oa_n +
           proc_control_B.b_q_c_c * proc_control_B.oa_tmp_i) *
    proc_control_B.dp_a;
  *qo_b = (proc_control_B.theta0_i * proc_control_B.ob_ch +
           proc_control_B.b_q_c_c * proc_control_B.ob_tmp_n) *
    proc_control_B.dp_a;
  *qo_c = (proc_control_B.theta0_i * proc_control_B.oc_n +
           proc_control_B.b_q_c_c * proc_control_B.n_m) * proc_control_B.dp_a;
  *qo_d = (proc_control_B.theta0_i * proc_control_B.od_h +
           proc_control_B.b_q_c_c * proc_control_B.od_tmp_o) *
    proc_control_B.dp_a;
  if (std::isinf(proc_control_B.dp_a)) {
    proc__quaternion_parenReference(q1_a, q1_b, q1_c, q1_d, true,
      &proc_control_B.assign_temp_a_data_i, proc_control_B.assign_temp_a_size_p,
      &proc_control_B.assign_temp_b_data_e, proc_control_B.assign_temp_b_size_f,
      &proc_control_B.assign_temp_c_data_p, proc_control_B.assign_temp_c_size_k,
      &proc_control_B.assign_temp_d_data_k, proc_control_B.assign_temp_d_size_e);
    proc_con_quaternion_parenAssign(*qo_a, *qo_b, *qo_c, *qo_d,
      &proc_control_B.assign_temp_a_data_i, proc_control_B.assign_temp_a_size_p,
      &proc_control_B.assign_temp_b_data_e, proc_control_B.assign_temp_b_size_f,
      &proc_control_B.assign_temp_c_data_p, proc_control_B.assign_temp_c_size_k,
      &proc_control_B.assign_temp_d_data_k, proc_control_B.assign_temp_d_size_e,
      qo_a, qo_b, qo_c, qo_d);
  }

  proc_control_B.n_m = std::sqrt(((*qo_a * *qo_a + *qo_b * *qo_b) + *qo_c *
    *qo_c) + *qo_d * *qo_d);
  *qo_a /= proc_control_B.n_m;
  *qo_b /= proc_control_B.n_m;
  *qo_c /= proc_control_B.n_m;
  *qo_d /= proc_control_B.n_m;
}

void proc_control::proc_con_quaternionBase_slerp_p(real_T q1_a, real_T q1_b,
  real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T q2_c, real_T q2_d,
  real_T t, real_T *qo_a, real_T *qo_b, real_T *qo_c, real_T *qo_d)
{
  proc_control_B.n_l = std::sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) +
    q1_d * q1_d);
  proc_control_B.od_tmp = q1_a / proc_control_B.n_l;
  proc_control_B.dp_l = q1_b / proc_control_B.n_l;
  proc_control_B.b_q_c = q1_c / proc_control_B.n_l;
  proc_control_B.theta0_h = q1_d / proc_control_B.n_l;
  proc_control_B.oa_c = ((proc_control_B.od_tmp - proc_control_B.dp_l * 0.0) -
    proc_control_B.b_q_c * 0.0) - proc_control_B.theta0_h * 0.0;
  proc_control_B.ob_c = ((proc_control_B.od_tmp * 0.0 + proc_control_B.dp_l) +
    proc_control_B.b_q_c * 0.0) - proc_control_B.theta0_h * 0.0;
  proc_control_B.oc_a = ((proc_control_B.od_tmp * 0.0 - proc_control_B.dp_l *
    0.0) + proc_control_B.b_q_c) + proc_control_B.theta0_h * 0.0;
  proc_control_B.od_i = ((proc_control_B.od_tmp * 0.0 + proc_control_B.dp_l *
    0.0) - proc_control_B.b_q_c * 0.0) + proc_control_B.theta0_h;
  proc_control_B.n_l = std::sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) +
    q2_d * q2_d);
  proc_control_B.od_tmp = q2_a / proc_control_B.n_l;
  proc_control_B.dp_l = q2_b / proc_control_B.n_l;
  proc_control_B.b_q_c = q2_c / proc_control_B.n_l;
  proc_control_B.theta0_h = q2_d / proc_control_B.n_l;
  proc_control_B.oa_tmp = ((proc_control_B.od_tmp - proc_control_B.dp_l * 0.0) -
    proc_control_B.b_q_c * 0.0) - proc_control_B.theta0_h * 0.0;
  proc_control_B.ob_tmp = ((proc_control_B.od_tmp * 0.0 + proc_control_B.dp_l) +
    proc_control_B.b_q_c * 0.0) - proc_control_B.theta0_h * 0.0;
  proc_control_B.n_l = ((proc_control_B.od_tmp * 0.0 - proc_control_B.dp_l * 0.0)
                        + proc_control_B.b_q_c) + proc_control_B.theta0_h * 0.0;
  proc_control_B.od_tmp = ((proc_control_B.od_tmp * 0.0 + proc_control_B.dp_l *
    0.0) - proc_control_B.b_q_c * 0.0) + proc_control_B.theta0_h;
  proc_control_B.dp_l = ((proc_control_B.oa_c * proc_control_B.oa_tmp +
    proc_control_B.ob_c * proc_control_B.ob_tmp) + proc_control_B.oc_a *
    proc_control_B.n_l) + proc_control_B.od_i * proc_control_B.od_tmp;
  if (proc_control_B.dp_l < 0.0) {
    proc_control_B.oa_tmp = -proc_control_B.oa_tmp;
    proc_control_B.ob_tmp = -proc_control_B.ob_tmp;
    proc_control_B.n_l = -proc_control_B.n_l;
    proc_control_B.od_tmp = -proc_control_B.od_tmp;
    proc_control_B.dp_l = -proc_control_B.dp_l;
  }

  if (proc_control_B.dp_l > 1.0) {
    proc_control_B.dp_l = 1.0;
  }

  proc_control_B.theta0_h = std::acos(proc_control_B.dp_l);
  proc_control_B.dp_l = 1.0 / std::sin(proc_control_B.theta0_h);
  proc_control_B.b_q_c = std::sin((1.0 - t) * proc_control_B.theta0_h);
  proc_control_B.theta0_h = std::sin(t * proc_control_B.theta0_h);
  *qo_a = (proc_control_B.b_q_c * proc_control_B.oa_c + proc_control_B.theta0_h *
           proc_control_B.oa_tmp) * proc_control_B.dp_l;
  *qo_b = (proc_control_B.b_q_c * proc_control_B.ob_c + proc_control_B.theta0_h *
           proc_control_B.ob_tmp) * proc_control_B.dp_l;
  *qo_c = (proc_control_B.b_q_c * proc_control_B.oc_a + proc_control_B.theta0_h *
           proc_control_B.n_l) * proc_control_B.dp_l;
  *qo_d = (proc_control_B.b_q_c * proc_control_B.od_i + proc_control_B.theta0_h *
           proc_control_B.od_tmp) * proc_control_B.dp_l;
  if (std::isinf(proc_control_B.dp_l)) {
    proc__quaternion_parenReference(q1_a, q1_b, q1_c, q1_d, true,
      &proc_control_B.assign_temp_a_data, proc_control_B.assign_temp_a_size,
      &proc_control_B.assign_temp_b_data, proc_control_B.assign_temp_b_size_k,
      &proc_control_B.assign_temp_c_data_l, proc_control_B.assign_temp_c_size_l,
      &proc_control_B.assign_temp_d_data_i, proc_control_B.assign_temp_d_size_n);
    proc_con_quaternion_parenAssign(*qo_a, *qo_b, *qo_c, *qo_d,
      &proc_control_B.assign_temp_a_data, proc_control_B.assign_temp_a_size,
      &proc_control_B.assign_temp_b_data, proc_control_B.assign_temp_b_size_k,
      &proc_control_B.assign_temp_c_data_l, proc_control_B.assign_temp_c_size_l,
      &proc_control_B.assign_temp_d_data_i, proc_control_B.assign_temp_d_size_n,
      qo_a, qo_b, qo_c, qo_d);
  }

  proc_control_B.n_l = std::sqrt(((*qo_a * *qo_a + *qo_b * *qo_b) + *qo_c *
    *qo_c) + *qo_d * *qo_d);
  *qo_a /= proc_control_B.n_l;
  *qo_b /= proc_control_B.n_l;
  *qo_c /= proc_control_B.n_l;
  *qo_d /= proc_control_B.n_l;
}

void proc_control::proc_cont_binary_expand_op_pr35(real_T in1_data[], int32_T
  in1_size[2], real_T in2, int32_T in3)
{
  int32_T in1_size_idx_1;
  int32_T loop_ub;
  in1_size_idx_1 = in3 == 1 ? in1_size[1] : in3;
  proc_control_B.stride_0_1 = (in1_size[1] != 1);
  loop_ub = in3 == 1 ? in1_size[1] : in3;
  for (proc_control_B.i34 = 0; proc_control_B.i34 < loop_ub; proc_control_B.i34
       ++) {
    proc_control_B.in1_data = in1_data[proc_control_B.i34 *
      proc_control_B.stride_0_1] / in2;
  }

  in1_size[0] = 1;
  in1_size[1] = in1_size_idx_1;
  for (proc_control_B.i34 = 0; proc_control_B.i34 < in1_size_idx_1;
       proc_control_B.i34++) {
    proc_control_B.stride_0_1 = 0;
    in1_data[proc_control_B.stride_0_1] = proc_control_B.in1_data;
  }
}

void proc_control::proc_contr_binary_expand_op_pr3(real_T in1_data[], int32_T
  in1_size[2], real_T in2, int32_T in3, const real_T in4_data[], const int32_T
  in4_size[2])
{
  int32_T loop_ub;
  int32_T stride_1_1;
  in1_size[0] = 1;
  in1_size[1] = in4_size[1] == 1 ? in3 : in4_size[1];
  stride_1_1 = (in4_size[1] != 1);
  loop_ub = in4_size[1] == 1 ? in3 : in4_size[1];
  for (proc_control_B.i36 = 0; proc_control_B.i36 < loop_ub; proc_control_B.i36
       ++) {
    in1_data[proc_control_B.i36] = in4_data[proc_control_B.i36 * stride_1_1] *
      in2;
  }
}

void proc_control::proc_contro_binary_expand_op_pr(real_T in1_data[], int32_T
  in1_size[2], real_T in2, int32_T in3)
{
  int32_T in2_size_idx_1;
  int32_T loop_ub;
  in2_size_idx_1 = in1_size[1] == 1 ? in3 : in1_size[1];
  proc_control_B.stride_1_1 = (in1_size[1] != 1);
  loop_ub = in1_size[1] == 1 ? in3 : in1_size[1];
  for (proc_control_B.i27 = 0; proc_control_B.i27 < loop_ub; proc_control_B.i27
       ++) {
    proc_control_B.in2_data = in1_data[proc_control_B.i27 *
      proc_control_B.stride_1_1] * in2;
  }

  in1_size[0] = 1;
  in1_size[1] = in2_size_idx_1;
  for (proc_control_B.i27 = 0; proc_control_B.i27 < in2_size_idx_1;
       proc_control_B.i27++) {
    proc_control_B.stride_1_1 = 0;
    in1_data[proc_control_B.stride_1_1] = proc_control_B.in2_data;
  }
}

void proc_control::proc_control_quaternionBase_log(real_T q_a, real_T q_b,
  real_T q_c, real_T q_d, real_T *b_q_a, real_T *b_q_b, real_T *b_q_c, real_T
  *b_q_d)
{
  proc_control_B.vnorm = std::sqrt((q_b * q_b + q_c * q_c) + q_d * q_d);
  proc_control_B.qnorm = std::sqrt(q_a * q_a + proc_control_B.vnorm *
    proc_control_B.vnorm);
  proc_control_B.trueCount_d = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (proc_control_B.b_i_l = 0; proc_control_B.b_i_l < 1;
         proc_control_B.b_i_l++) {
      proc_control_B.trueCount_d++;
    }
  }

  proc_control_B.b_i_l = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (proc_control_B.nx_i = 0; proc_control_B.nx_i < 1; proc_control_B.nx_i++)
    {
      proc_control_B.b_i_l++;
    }
  }

  proc_control_B.z_size[0] = 1;
  proc_control_B.z_size[1] = proc_control_B.b_i_l;
  for (proc_control_B.nx_i = 0; proc_control_B.nx_i < proc_control_B.b_i_l;
       proc_control_B.nx_i++) {
    proc_control_B.z_data = q_a / proc_control_B.qnorm;
  }

  proc_control_B.vscale_size[0] = 1;
  proc_control_B.vscale_size[1] = proc_control_B.b_i_l;
  if (proc_control_B.b_i_l - 1 >= 0) {
    proc_control_B.vscale_data_tmp = 0;
    proc_control_B.vscale_data = proc_control_B.z_data;
  }

  proc_control_B.nx_i = proc_control_B.b_i_l - 1;
  for (proc_control_B.b_i_l = 0; proc_control_B.b_i_l <= proc_control_B.nx_i;
       proc_control_B.b_i_l++) {
    proc_control_B.vscale_data_tmp = 0;
    proc_control_B.vscale_data = std::acos(proc_control_B.vscale_data);
  }

  if (proc_control_B.z_size[1] == proc_control_B.trueCount_d) {
    proc_control_B.trueCount_d = proc_control_B.z_size[1] - 1;
    proc_control_B.vscale_size[0] = 1;
    for (proc_control_B.nx_i = 0; proc_control_B.nx_i <=
         proc_control_B.trueCount_d; proc_control_B.nx_i++) {
      proc_control_B.vscale_data_tmp = 0;
      proc_control_B.vscale_data /= proc_control_B.vnorm;
    }
  } else {
    proc_cont_binary_expand_op_pr35(&proc_control_B.vscale_data,
      proc_control_B.vscale_size, proc_control_B.vnorm,
      proc_control_B.trueCount_d);
  }

  proc_control_B.nx_i = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (proc_control_B.b_i_l = 0; proc_control_B.b_i_l < 1;
         proc_control_B.b_i_l++) {
      proc_control_B.nx_i++;
    }
  }

  if (proc_control_B.nx_i == proc_control_B.vscale_size[1]) {
    proc_control_B.z_size[0] = 1;
    proc_control_B.z_size[1] = proc_control_B.nx_i;
    if (proc_control_B.vscale_size[1] - 1 >= 0) {
      proc_control_B.trueCount_d = 0;
      proc_control_B.z_data = q_b * proc_control_B.vscale_data;
    }
  } else {
    proc_contr_binary_expand_op_pr3(&proc_control_B.z_data,
      proc_control_B.z_size, q_b, proc_control_B.nx_i,
      &proc_control_B.vscale_data, proc_control_B.vscale_size);
  }

  *b_q_d = q_b;
  proc_control_B.nx_i = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (proc_control_B.b_i_l = 0; proc_control_B.b_i_l < 1;
         proc_control_B.b_i_l++) {
      *b_q_d = proc_control_B.z_data;
      proc_control_B.nx_i++;
    }
  }

  *b_q_b = *b_q_d;
  if (!(proc_control_B.vnorm != 0.0)) {
    *b_q_b = 0.0;
  }

  proc_control_B.nx_i = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (proc_control_B.b_i_l = 0; proc_control_B.b_i_l < 1;
         proc_control_B.b_i_l++) {
      proc_control_B.nx_i++;
    }
  }

  if (proc_control_B.nx_i == proc_control_B.vscale_size[1]) {
    if (proc_control_B.vscale_size[1] - 1 >= 0) {
      proc_control_B.trueCount_d = 0;
      proc_control_B.z_data = q_c * proc_control_B.vscale_data;
    }
  } else {
    proc_contr_binary_expand_op_pr3(&proc_control_B.z_data,
      proc_control_B.z_size, q_c, proc_control_B.nx_i,
      &proc_control_B.vscale_data, proc_control_B.vscale_size);
  }

  *b_q_d = q_c;
  proc_control_B.nx_i = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (proc_control_B.b_i_l = 0; proc_control_B.b_i_l < 1;
         proc_control_B.b_i_l++) {
      *b_q_d = proc_control_B.z_data;
      proc_control_B.nx_i++;
    }
  }

  *b_q_c = *b_q_d;
  if (!(proc_control_B.vnorm != 0.0)) {
    *b_q_c = 0.0;
  }

  proc_control_B.nx_i = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (proc_control_B.b_i_l = 0; proc_control_B.b_i_l < 1;
         proc_control_B.b_i_l++) {
      proc_control_B.nx_i++;
    }
  }

  if (proc_control_B.nx_i == proc_control_B.vscale_size[1]) {
    proc_control_B.trueCount_d = proc_control_B.vscale_size[1] - 1;
    for (proc_control_B.nx_i = 0; proc_control_B.nx_i <=
         proc_control_B.trueCount_d; proc_control_B.nx_i++) {
      proc_control_B.vscale_data_tmp = 0;
      proc_control_B.vscale_data *= q_d;
    }
  } else {
    proc_contro_binary_expand_op_pr(&proc_control_B.vscale_data,
      proc_control_B.vscale_size, q_d, proc_control_B.nx_i);
  }

  *b_q_d = q_d;
  proc_control_B.nx_i = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (proc_control_B.b_i_l = 0; proc_control_B.b_i_l < 1;
         proc_control_B.b_i_l++) {
      *b_q_d = proc_control_B.vscale_data;
      proc_control_B.nx_i++;
    }
  }

  if (!(proc_control_B.vnorm != 0.0)) {
    *b_q_d = 0.0;
  }

  *b_q_a = std::log(proc_control_B.qnorm);
}

quaternion_proc_control_T proc_control::proc_computeFirstQuatDerivative(real_T
  pn_a, real_T pn_b, real_T pn_c, real_T pn_d, real_T qn_a, real_T qn_b, real_T
  qn_c, real_T qn_d, real_T sd, real_T qinterp_a, real_T qinterp_b, real_T
  qinterp_c, real_T qinterp_d)
{
  quaternion_proc_control_T qdot;
  proc_control_quaternionBase_log(((pn_a * qn_a - -pn_b * qn_b) - -pn_c * qn_c)
    - -pn_d * qn_d, ((pn_a * qn_b + -pn_b * qn_a) + -pn_c * qn_d) - -pn_d * qn_c,
    ((pn_a * qn_c - -pn_b * qn_d) + -pn_c * qn_a) + -pn_d * qn_b, ((pn_a * qn_d
    + -pn_b * qn_c) - -pn_c * qn_b) + -pn_d * qn_a, &proc_control_B.y_a,
    &proc_control_B.y_b, &proc_control_B.y_c_f, &proc_control_B.y_d_i);
  qdot.a = (((qinterp_a * proc_control_B.y_a - qinterp_b * proc_control_B.y_b) -
             qinterp_c * proc_control_B.y_c_f) - qinterp_d *
            proc_control_B.y_d_i) * sd;
  qdot.b = (((qinterp_a * proc_control_B.y_b + qinterp_b * proc_control_B.y_a) +
             qinterp_c * proc_control_B.y_d_i) - qinterp_d *
            proc_control_B.y_c_f) * sd;
  qdot.c = (((qinterp_a * proc_control_B.y_c_f - qinterp_b *
              proc_control_B.y_d_i) + qinterp_c * proc_control_B.y_a) +
            qinterp_d * proc_control_B.y_b) * sd;
  qdot.d = (((qinterp_a * proc_control_B.y_d_i + qinterp_b *
              proc_control_B.y_c_f) - qinterp_c * proc_control_B.y_b) +
            qinterp_d * proc_control_B.y_a) * sd;
  return qdot;
}

void proc_control::proc_control_ppval_p(const real_T pp_breaks[4], const real_T
  pp_coefs[36], real_T x, real_T v[3])
{
  if (std::isnan(x)) {
    v[0] = x;
    v[1] = x;
    v[2] = x;
  } else {
    int32_T high_i;
    int32_T low_ip1;
    proc_control_B.low_i = 0;
    low_ip1 = 1;
    high_i = 4;
    while (high_i > low_ip1 + 1) {
      proc_control_B.ic0 = ((proc_control_B.low_i + high_i) + 1) >> 1;
      if (x >= pp_breaks[proc_control_B.ic0 - 1]) {
        proc_control_B.low_i = proc_control_B.ic0 - 1;
        low_ip1 = proc_control_B.ic0;
      } else {
        high_i = proc_control_B.ic0;
      }
    }

    low_ip1 = proc_control_B.low_i * 3;
    proc_control_B.xloc = x - pp_breaks[proc_control_B.low_i];
    v[0] = pp_coefs[low_ip1];
    v[1] = pp_coefs[low_ip1 + 1];
    v[2] = pp_coefs[low_ip1 + 2];
    for (high_i = 0; high_i < 3; high_i++) {
      proc_control_B.ic0 = ((high_i + 1) * 9 + low_ip1) - 1;
      v[0] = proc_control_B.xloc * v[0] + pp_coefs[proc_control_B.ic0 + 1];
      v[1] = proc_control_B.xloc * v[1] + pp_coefs[proc_control_B.ic0 + 2];
      v[2] = proc_control_B.xloc * v[2] + pp_coefs[proc_control_B.ic0 + 3];
    }
  }
}

void proc_control::proc_TrajectoryManager_stepImpl
  (TrajectoryManager_proc_contro_T *b_this, real_T reset, const real_T poses[13],
   const real_T target[7], const real_T x0[7], const real_T mesuredPose[13],
   real_T currentPose[130], boolean_T *isReached)
{
  boolean_T exitg1;
  boolean_T isempty;
  boolean_T y;

  //  Main execute a chaque iteration.
  //  Implement algorithm. Calculate y as a function of input u and
  if (reset == 1.0) {
    b_this->init = 0.0;
  }

  if (b_this->init == 0.0) {
    //  Conditions Initiales
    for (proc_control_B.ibmat_b = 0; proc_control_B.ibmat_b < 7;
         proc_control_B.ibmat_b++) {
      proc_control_B.a_bd[proc_control_B.ibmat_b] = x0[proc_control_B.ibmat_b];
    }

    proc_control_B.a_bd[7] = 0.0;
    proc_control_B.a_bd[8] = 0.0;
    proc_control_B.a_bd[9] = 0.0;
    proc_control_B.a_bd[10] = 0.0;
    proc_control_B.a_bd[11] = 0.0;
    proc_control_B.a_bd[12] = 0.0;
    for (proc_control_B.b_jcol = 0; proc_control_B.b_jcol < 13;
         proc_control_B.b_jcol++) {
      proc_control_B.ibmat_b = proc_control_B.b_jcol * 10;
      for (proc_control_B.b_itilerow = 0; proc_control_B.b_itilerow < 10;
           proc_control_B.b_itilerow++) {
        proc_control_B.b[proc_control_B.ibmat_b + proc_control_B.b_itilerow] =
          proc_control_B.a_bd[proc_control_B.b_jcol];
        b_this->poseBuffer[((proc_control_B.b_itilerow + 1) + 6001 *
                            proc_control_B.b_jcol) - 1] = proc_control_B.b[10 *
          proc_control_B.b_jcol + proc_control_B.b_itilerow];
      }
    }

    // InitCond;
    b_this->bufferCount = 1.0;
    b_this->init = 1.0;
  }

  // this.BufferReset(reset,mp);
  //  Fonction qui traites les nouveau poses.
  //  Insertion des nouveaux points.
  // if new == this.generationNumber %new>
  if (b_this->bufferCount + 1.0 < 6001.0) {
    proc_control_B.ibmat_b = static_cast<int32_T>(b_this->bufferCount + 1.0);
    for (proc_control_B.b_jcol = 0; proc_control_B.b_jcol < 13;
         proc_control_B.b_jcol++) {
      b_this->poseBuffer[(proc_control_B.ibmat_b + 6001 * proc_control_B.b_jcol)
        - 1] = poses[proc_control_B.b_jcol];
    }

    // this.poseBuffer(this.bufferCount:count + this.bufferCount,:) = pose(1:count+1,:) 
    b_this->bufferCount++;
    b_this->generationNumber++;
  } else {
    printf("%s\n", "Problem");
    fflush(stdout);
  }

  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  proc_control_B.b_index = 2;
  isempty = false;
  proc_control_B.b_itilerow = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.b_itilerow < 9)) {
    boolean_T exitg2;
    proc_control_B.b_index = proc_control_B.b_itilerow + 2;
    for (proc_control_B.ibmat_b = 0; proc_control_B.ibmat_b < 13;
         proc_control_B.ibmat_b++) {
      proc_control_B.x_o[proc_control_B.ibmat_b] = (b_this->poseBuffer[(6001 *
        proc_control_B.ibmat_b + proc_control_B.b_itilerow) + 1] ==
        b_this->emptyArray[proc_control_B.ibmat_b]);
    }

    y = true;
    proc_control_B.b_jcol = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.b_jcol < 13)) {
      if (!proc_control_B.x_o[proc_control_B.b_jcol]) {
        y = false;
        exitg2 = true;
      } else {
        proc_control_B.b_jcol++;
      }
    }

    if (y) {
      isempty = true;
      exitg1 = true;
    } else {
      proc_control_B.b_itilerow++;
    }
  }

  std::memset(&currentPose[0], 0, 130U * sizeof(real_T));
  proc_control_B.ibmat_b = 0;
  proc_control_B.b_jcol = 0;
  for (proc_control_B.b_itilerow = 0; proc_control_B.b_itilerow < 13;
       proc_control_B.b_itilerow++) {
    for (proc_control_B.b_index_p = 0; proc_control_B.b_index_p <
         proc_control_B.b_index; proc_control_B.b_index_p++) {
      currentPose[proc_control_B.b_index_p + proc_control_B.ibmat_b] =
        b_this->poseBuffer[proc_control_B.b_index_p + proc_control_B.b_jcol];
    }

    proc_control_B.ibmat_b += 10;
    proc_control_B.b_jcol += 6001;
  }

  if (isempty) {
    proc_control_B.b_itilerow = 10 - proc_control_B.b_index;
    for (proc_control_B.b_jcol = 0; proc_control_B.b_jcol <=
         proc_control_B.b_itilerow; proc_control_B.b_jcol++) {
      proc_control_B.b_index_p = proc_control_B.b_index + proc_control_B.b_jcol;
      for (proc_control_B.ibmat_b = 0; proc_control_B.ibmat_b < 13;
           proc_control_B.ibmat_b++) {
        proc_control_B.a_bd[proc_control_B.ibmat_b] = currentPose[(10 *
          proc_control_B.ibmat_b + proc_control_B.b_index) - 2];
      }

      for (proc_control_B.ibmat_b = 0; proc_control_B.ibmat_b < 13;
           proc_control_B.ibmat_b++) {
        currentPose[(proc_control_B.b_index_p + 10 * proc_control_B.ibmat_b) - 1]
          = proc_control_B.a_bd[proc_control_B.ibmat_b];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  proc_control_B.ibmat_b = 0;
  for (proc_control_B.b_jcol = 0; proc_control_B.b_jcol < 13;
       proc_control_B.b_jcol++) {
    proc_control_B.x_o[proc_control_B.b_jcol] = !(b_this->
      poseBuffer[proc_control_B.ibmat_b + 10] == b_this->
      emptyArray[proc_control_B.b_jcol]);
    proc_control_B.ibmat_b += 6001;
  }

  y = true;
  proc_control_B.b_jcol = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.b_jcol < 13)) {
    if (!proc_control_B.x_o[proc_control_B.b_jcol]) {
      y = false;
      exitg1 = true;
    } else {
      proc_control_B.b_jcol++;
    }
  }

  if (y) {
    proc_control_B.ibmat_b = 0;
    for (proc_control_B.b_jcol = 0; proc_control_B.b_jcol < 13;
         proc_control_B.b_jcol++) {
      std::memcpy(&proc_control_B.b_this[proc_control_B.ibmat_b],
                  &b_this->poseBuffer[proc_control_B.ibmat_b + 1], 6000U *
                  sizeof(real_T));
      proc_control_B.ibmat_b += 6001;
    }

    proc_control_B.ibmat_b = 0;
    for (proc_control_B.b_jcol = 0; proc_control_B.b_jcol < 13;
         proc_control_B.b_jcol++) {
      proc_control_B.b_this[proc_control_B.ibmat_b + 6000] = b_this->
        emptyArray[proc_control_B.b_jcol];
      proc_control_B.ibmat_b += 6001;
    }

    std::memcpy(&b_this->poseBuffer[0], &proc_control_B.b_this[0], 78013U *
                sizeof(real_T));
    b_this->bufferCount--;
    b_this->done = false;
  } else {
    b_this->done = true;
  }

  //  Fonction qui verifie le target reached
  //  vérifier si la trajectoire est fini
  for (proc_control_B.b_jcol = 0; proc_control_B.b_jcol < 7;
       proc_control_B.b_jcol++) {
    proc_control_B.x_c[proc_control_B.b_jcol] = poses[proc_control_B.b_jcol] -
      target[proc_control_B.b_jcol];
    proc_control_B.y_fz[proc_control_B.b_jcol] = std::abs
      (proc_control_B.x_c[proc_control_B.b_jcol]);
  }

  b_this->done = true;
  proc_control_B.b_jcol = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.b_jcol < 7)) {
    if (!(proc_control_B.y_fz[proc_control_B.b_jcol] < 0.001)) {
      b_this->done = false;
      exitg1 = true;
    } else {
      proc_control_B.b_jcol++;
    }
  }

  *isReached = false;

  //  vérifier le traget reached si la trajectoire est terminé
  if (b_this->done) {
    //  calcule de l'erreur de langle en 3D avec le quaternion
    proc_control_B.qRel[0] = ((target[3] * mesuredPose[3] - -target[4] *
      mesuredPose[4]) - -target[5] * mesuredPose[5]) - -target[6] * mesuredPose
      [6];
    proc_control_B.qRel[1] = (target[3] * mesuredPose[4] + -target[4] *
      mesuredPose[3]) + (-target[5] * mesuredPose[6] - -target[6] * mesuredPose
                         [5]);
    proc_control_B.qRel[2] = (target[3] * mesuredPose[5] + -target[5] *
      mesuredPose[3]) + (-target[6] * mesuredPose[4] - -target[4] * mesuredPose
                         [6]);
    proc_control_B.qRel[3] = (target[3] * mesuredPose[6] + mesuredPose[3] *
      -target[6]) + (-target[4] * mesuredPose[5] - -target[5] * mesuredPose[4]);

    //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
    proc_control_B.target_j[0] = target[0] - mesuredPose[0];
    proc_control_B.target_j[1] = target[1] - mesuredPose[1];
    proc_control_B.target_j[2] = target[2] - mesuredPose[2];
    if ((proc_control_norm_p(proc_control_B.target_j) <
         b_this->linearConvergence) && (2.0 * proc_control_rt_atan2d_snf
         (proc_control_norm_p(&proc_control_B.qRel[1]), proc_control_B.qRel[0]) <
         b_this->quaternionConvergence)) {
      b_this->targetReachedCount++;
      *isReached = (b_this->targetReachedCount * 0.1 >= b_this->TargetThreshold);
    } else {
      b_this->targetReachedCount = 0.0;
    }
  }
}

void proc_control::proc_contr_mpcManager_resetImpl(mpcManager_proc_control_T
  *b_this)
{
  static const real_T tmp[13]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0, 45.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T tmp_0[8]{ 0.4, 0.4, 0.4, 0.4, 0.5, 0.5, 0.5, 0.5 };

  //         %% Fonction Reset
  //  Initialize discrete state
  b_this->init = 0.0;
  std::memset(&b_this->currentFaultCount[0], 0, sizeof(real_T) << 3U);
  for (int32_T i{0}; i < 8; i++) {
    b_this->isThrusterFault[i] = false;
  }

  // initialiser les gains debug
  std::memcpy(&b_this->rosOV[0], &tmp[0], 13U * sizeof(real_T));
  for (int32_T i{0}; i < 8; i++) {
    b_this->rosMV[i] = 0.2;
    b_this->rosMVR[i] = tmp_0[i];
  }
}

int32_T proc_control::proc_cont_combineVectorElements(const boolean_T x[3])
{
  return (x[0] + x[1]) + x[2];
}

void proc_control::proc_control_eml_find(const boolean_T x[3], int32_T i_data[],
  int32_T *i_size)
{
  boolean_T exitg1;
  proc_control_B.idx_k3 = 0;
  proc_control_B.b_ii_n = 1;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.b_ii_n - 1 < 3)) {
    if (x[proc_control_B.b_ii_n - 1]) {
      proc_control_B.idx_k3++;
      i_data[proc_control_B.idx_k3 - 1] = proc_control_B.b_ii_n;
      if (proc_control_B.idx_k3 >= 3) {
        exitg1 = true;
      } else {
        proc_control_B.b_ii_n++;
      }
    } else {
      proc_control_B.b_ii_n++;
    }
  }

  if (proc_control_B.idx_k3 < 1) {
    proc_control_B.idx_k3 = 0;
  }

  *i_size = proc_control_B.idx_k3;
}

real_T proc_control::proc_control_sum(const real_T x_data[], const int32_T
  *x_size)
{
  real_T y;
  proc_control_B.vlen = *x_size;
  if (*x_size == 0) {
    y = 0.0;
  } else {
    y = x_data[0];
    for (proc_control_B.k_l = 2; proc_control_B.k_l <= proc_control_B.vlen;
         proc_control_B.k_l++) {
      y += x_data[proc_control_B.k_l - 1];
    }
  }

  return y;
}

void proc_control::proc_co_mpcManager_getMpcWeigth(const
  mpcManager_proc_control_T *b_this, uint8_T mode, real_T OV[13], real_T MV[8],
  real_T MVR[8])
{
  static const real_T tmp_1[90]{ 10.0, 11.0, 19.0, 30.0, 30.0, 0.0, 30.0, 30.0,
    0.0, 30.0, 30.0, 0.0, 45.0, 45.0, 0.0, 45.0, 45.0, 0.0, 45.0, 45.0, 0.0,
    45.0, 45.0, 0.0, 0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0, 0.0,
    20.0, 0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.2, 0.0, 0.0,
    0.2, 0.0, 0.0, 0.2, 0.0, 0.0, 0.2, 0.0, 0.0, 0.2, 0.0, 0.0, 0.2, 0.0, 0.0,
    0.2, 0.4, 0.4, 0.1, 0.4, 0.4, 0.1, 0.4, 0.4, 0.1, 0.4, 0.4, 0.1, 0.4, 0.4,
    0.3, 0.4, 0.4, 0.3, 0.4, 0.4, 0.3, 0.4, 0.4, 0.3 };

  static const real_T tmp[13]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0, 45.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T tmp_0[8]{ 0.4, 0.4, 0.4, 0.4, 0.5, 0.5, 0.5, 0.5 };

  boolean_T corr[3];
  boolean_T corr_0[3];

  //         %% Fonction qui détermine les gain
  //  Vérifier si le mode existe
  corr[0] = (mode == 10.0);
  corr[1] = (mode == 11.0);
  corr[2] = (mode == 19.0);
  if (mode == 31) {
    //  Mode ros debug
    std::memcpy(&OV[0], &b_this->rosOV[0], 13U * sizeof(real_T));
    std::memcpy(&MV[0], &b_this->rosMV[0], sizeof(real_T) << 3U);
    std::memcpy(&MVR[0], &b_this->rosMVR[0], sizeof(real_T) << 3U);
  } else if (proc_cont_combineVectorElements(corr) == 1) {
    //  mode existe et unique
    corr_0[0] = corr[0];
    corr_0[1] = corr[1];
    corr_0[2] = corr[2];
    proc_control_eml_find(corr_0, proc_control_B.tmp_data_h,
                          &proc_control_B.tmp_size_i);
    proc_control_B.tmp_size_k = proc_control_B.tmp_size_i;
    proc_control_B.loop_ub_b = proc_control_B.tmp_size_i;
    for (proc_control_B.i28 = 0; proc_control_B.i28 < proc_control_B.loop_ub_b;
         proc_control_B.i28++) {
      proc_control_B.tmp_data_ki[proc_control_B.i28] =
        proc_control_B.tmp_data_h[proc_control_B.i28];
    }

    proc_control_B.i = proc_control_sum(proc_control_B.tmp_data_ki,
      &proc_control_B.tmp_size_k);
    for (proc_control_B.i28 = 0; proc_control_B.i28 < 13; proc_control_B.i28++)
    {
      OV[proc_control_B.i28] = tmp_1[(((proc_control_B.i28 + 2) - 1) * 3 +
        static_cast<int32_T>(proc_control_B.i)) - 1];
    }

    for (proc_control_B.i28 = 0; proc_control_B.i28 < 8; proc_control_B.i28++) {
      MV[proc_control_B.i28] = tmp_1[(((proc_control_B.i28 + 15) - 1) * 3 +
        static_cast<int32_T>(proc_control_B.i)) - 1];
      MVR[proc_control_B.i28] = tmp_1[(((proc_control_B.i28 + 23) - 1) * 3 +
        static_cast<int32_T>(proc_control_B.i)) - 1];
    }
  } else {
    //  mode non trouver. retourne defaut
    std::memcpy(&OV[0], &tmp[0], 13U * sizeof(real_T));
    for (proc_control_B.i28 = 0; proc_control_B.i28 < 8; proc_control_B.i28++) {
      MV[proc_control_B.i28] = 0.2;
      MVR[proc_control_B.i28] = tmp_0[proc_control_B.i28];
    }
  }

  //              %  Ajust gain if loosing dvl
  //              e = abs(quat2eul(q.','ZYX'));
  //
  //              if(e(2) > deg2rad(20) || e(3) > deg2rad(20)) % If roll pitch exeed 20deg 
  //
  //                  MV = this.MPC.gains.noDvl.MV;
  //
  //              end
}

real_T proc_control::proc_control_norm(const real_T x[169])
{
  real_T y;
  boolean_T exitg1;
  y = 0.0;
  proc_control_B.b_j_d = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.b_j_d < 13)) {
    proc_control_B.s_fv = 0.0;
    for (int32_T b_i{0}; b_i < 13; b_i++) {
      proc_control_B.s_fv += std::abs(x[13 * proc_control_B.b_j_d + b_i]);
    }

    if (std::isnan(proc_control_B.s_fv)) {
      y = (rtNaN);
      exitg1 = true;
    } else {
      if (proc_control_B.s_fv > y) {
        y = proc_control_B.s_fv;
      }

      proc_control_B.b_j_d++;
    }
  }

  return y;
}

void proc_control::proc_control_mpower(const real_T a[169], real_T b, real_T c
  [169])
{
  proc_control_B.e = std::abs(b);
  if (proc_control_B.e <= 2.147483647E+9) {
    std::memcpy(&proc_control_B.a_f[0], &a[0], 169U * sizeof(real_T));
    proc_control_B.n_b = static_cast<int32_T>(proc_control_B.e);
    proc_control_B.n_ml = static_cast<int32_T>(proc_control_B.e);
    proc_control_B.nbitson = 0;
    proc_control_B.nb = -1;
    while (proc_control_B.n_ml > 0) {
      proc_control_B.nb++;
      if ((proc_control_B.n_ml & 1U) != 0U) {
        proc_control_B.nbitson++;
      }

      proc_control_B.n_ml >>= 1;
    }

    if (static_cast<int32_T>(proc_control_B.e) <= 2) {
      if (b == 2.0) {
        for (proc_control_B.nb = 0; proc_control_B.nb < 13; proc_control_B.nb++)
        {
          std::memset(&c[proc_control_B.nb * 13], 0, 13U * sizeof(real_T));
          for (proc_control_B.i7 = 0; proc_control_B.i7 < 13; proc_control_B.i7
               ++) {
            for (proc_control_B.i9 = 0; proc_control_B.i9 < 13;
                 proc_control_B.i9++) {
              int32_T c_tmp;
              c_tmp = 13 * proc_control_B.nb + proc_control_B.i9;
              c[c_tmp] += a[13 * proc_control_B.i7 + proc_control_B.i9] * a[13 *
                proc_control_B.nb + proc_control_B.i7];
            }
          }
        }
      } else {
        boolean_T firstmult;
        firstmult = false;
        for (proc_control_B.n_b = 0; proc_control_B.n_b < 169;
             proc_control_B.n_b++) {
          if (firstmult || std::isnan(a[proc_control_B.n_b])) {
            firstmult = true;
          }
        }

        if (firstmult) {
          for (proc_control_B.nb = 0; proc_control_B.nb < 169; proc_control_B.nb
               ++) {
            c[proc_control_B.nb] = (rtNaN);
          }
        } else {
          std::memset(&c[0], 0, 169U * sizeof(real_T));
          proc_control_B.n_ml = 0;
          for (proc_control_B.n_b = 0; proc_control_B.n_b < 13;
               proc_control_B.n_b++) {
            c[proc_control_B.n_ml] = 1.0;
            proc_control_B.n_ml += 14;
          }
        }
      }
    } else {
      int32_T c_tmp;
      boolean_T aBufferInUse;
      boolean_T cBufferInUse;
      boolean_T firstmult;
      firstmult = true;
      aBufferInUse = false;
      cBufferInUse = ((proc_control_B.nbitson & 1U) == 0U);
      proc_control_B.n_ml = proc_control_B.nb - 1;
      for (proc_control_B.nbitson = 0; proc_control_B.nbitson <=
           proc_control_B.n_ml; proc_control_B.nbitson++) {
        if ((proc_control_B.n_b & 1U) != 0U) {
          if (firstmult) {
            firstmult = false;
            if (cBufferInUse) {
              if (aBufferInUse) {
                std::memcpy(&proc_control_B.cBuffer[0], &proc_control_B.aBuffer
                            [0], 169U * sizeof(real_T));
              } else {
                std::memcpy(&proc_control_B.cBuffer[0], &proc_control_B.a_f[0],
                            169U * sizeof(real_T));
              }
            } else if (aBufferInUse) {
              std::memcpy(&c[0], &proc_control_B.aBuffer[0], 169U * sizeof
                          (real_T));
            } else {
              std::memcpy(&c[0], &proc_control_B.a_f[0], 169U * sizeof(real_T));
            }
          } else {
            if (aBufferInUse) {
              if (cBufferInUse) {
                for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                     proc_control_B.nb++) {
                  proc_control_B.i9 = 0;
                  for (proc_control_B.i7 = 0; proc_control_B.i7 < 13;
                       proc_control_B.i7++) {
                    c_tmp = proc_control_B.i9 + proc_control_B.nb;
                    c[c_tmp] = 0.0;
                    proc_control_B.i10 = 0;
                    for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                         proc_control_B.i8++) {
                      c[c_tmp] += proc_control_B.cBuffer[proc_control_B.i10 +
                        proc_control_B.nb] *
                        proc_control_B.aBuffer[proc_control_B.i8 +
                        proc_control_B.i9];
                      proc_control_B.i10 += 13;
                    }

                    proc_control_B.i9 += 13;
                  }
                }
              } else {
                for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                     proc_control_B.nb++) {
                  proc_control_B.i9 = 0;
                  for (proc_control_B.i7 = 0; proc_control_B.i7 < 13;
                       proc_control_B.i7++) {
                    c_tmp = proc_control_B.i9 + proc_control_B.nb;
                    proc_control_B.cBuffer[c_tmp] = 0.0;
                    proc_control_B.i10 = 0;
                    for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                         proc_control_B.i8++) {
                      proc_control_B.cBuffer[c_tmp] += c[proc_control_B.i10 +
                        proc_control_B.nb] *
                        proc_control_B.aBuffer[proc_control_B.i8 +
                        proc_control_B.i9];
                      proc_control_B.i10 += 13;
                    }

                    proc_control_B.i9 += 13;
                  }
                }
              }
            } else if (cBufferInUse) {
              for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                   proc_control_B.nb++) {
                proc_control_B.i9 = 0;
                for (proc_control_B.i7 = 0; proc_control_B.i7 < 13;
                     proc_control_B.i7++) {
                  c_tmp = proc_control_B.i9 + proc_control_B.nb;
                  c[c_tmp] = 0.0;
                  proc_control_B.i10 = 0;
                  for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                       proc_control_B.i8++) {
                    c[c_tmp] += proc_control_B.cBuffer[proc_control_B.i10 +
                      proc_control_B.nb] * proc_control_B.a_f[proc_control_B.i8
                      + proc_control_B.i9];
                    proc_control_B.i10 += 13;
                  }

                  proc_control_B.i9 += 13;
                }
              }
            } else {
              for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                   proc_control_B.nb++) {
                proc_control_B.i9 = 0;
                for (proc_control_B.i7 = 0; proc_control_B.i7 < 13;
                     proc_control_B.i7++) {
                  c_tmp = proc_control_B.i9 + proc_control_B.nb;
                  proc_control_B.cBuffer[c_tmp] = 0.0;
                  proc_control_B.i10 = 0;
                  for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                       proc_control_B.i8++) {
                    proc_control_B.cBuffer[c_tmp] += c[proc_control_B.i10 +
                      proc_control_B.nb] * proc_control_B.a_f[proc_control_B.i8
                      + proc_control_B.i9];
                    proc_control_B.i10 += 13;
                  }

                  proc_control_B.i9 += 13;
                }
              }
            }

            cBufferInUse = !cBufferInUse;
          }
        }

        proc_control_B.n_b >>= 1;
        if (aBufferInUse) {
          for (proc_control_B.nb = 0; proc_control_B.nb < 13; proc_control_B.nb
               ++) {
            proc_control_B.i9 = 0;
            for (proc_control_B.i7 = 0; proc_control_B.i7 < 13;
                 proc_control_B.i7++) {
              c_tmp = proc_control_B.i9 + proc_control_B.nb;
              proc_control_B.a_f[c_tmp] = 0.0;
              proc_control_B.i10 = 0;
              for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                   proc_control_B.i8++) {
                proc_control_B.a_f[c_tmp] +=
                  proc_control_B.aBuffer[proc_control_B.i10 + proc_control_B.nb]
                  * proc_control_B.aBuffer[proc_control_B.i8 + proc_control_B.i9];
                proc_control_B.i10 += 13;
              }

              proc_control_B.i9 += 13;
            }
          }
        } else {
          for (proc_control_B.nb = 0; proc_control_B.nb < 13; proc_control_B.nb
               ++) {
            proc_control_B.i9 = 0;
            for (proc_control_B.i7 = 0; proc_control_B.i7 < 13;
                 proc_control_B.i7++) {
              c_tmp = proc_control_B.i9 + proc_control_B.nb;
              proc_control_B.aBuffer[c_tmp] = 0.0;
              proc_control_B.i10 = 0;
              for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                   proc_control_B.i8++) {
                proc_control_B.aBuffer[c_tmp] +=
                  proc_control_B.a_f[proc_control_B.i10 + proc_control_B.nb] *
                  proc_control_B.a_f[proc_control_B.i8 + proc_control_B.i9];
                proc_control_B.i10 += 13;
              }

              proc_control_B.i9 += 13;
            }
          }
        }

        aBufferInUse = !aBufferInUse;
      }

      for (proc_control_B.nb = 0; proc_control_B.nb < 13; proc_control_B.nb++) {
        std::memset(&proc_control_B.cBuffer_p[proc_control_B.nb * 13], 0, 13U *
                    sizeof(real_T));
        for (proc_control_B.i7 = 0; proc_control_B.i7 < 13; proc_control_B.i7++)
        {
          for (proc_control_B.i9 = 0; proc_control_B.i9 < 13; proc_control_B.i9
               ++) {
            c_tmp = 13 * proc_control_B.nb + proc_control_B.i9;
            proc_control_B.cBuffer_p[c_tmp] += proc_control_B.cBuffer[13 *
              proc_control_B.i7 + proc_control_B.i9] * proc_control_B.aBuffer[13
              * proc_control_B.nb + proc_control_B.i7];
          }
        }

        std::memset(&proc_control_B.cBuffer_e[proc_control_B.nb * 13], 0, 13U *
                    sizeof(real_T));
        for (proc_control_B.i7 = 0; proc_control_B.i7 < 13; proc_control_B.i7++)
        {
          for (proc_control_B.i9 = 0; proc_control_B.i9 < 13; proc_control_B.i9
               ++) {
            c_tmp = 13 * proc_control_B.nb + proc_control_B.i9;
            proc_control_B.cBuffer_e[c_tmp] += proc_control_B.cBuffer[13 *
              proc_control_B.i7 + proc_control_B.i9] * proc_control_B.a_f[13 *
              proc_control_B.nb + proc_control_B.i7];
          }
        }
      }

      for (proc_control_B.nb = 0; proc_control_B.nb < 169; proc_control_B.nb++)
      {
        if (firstmult) {
          if (aBufferInUse) {
            c[proc_control_B.nb] = proc_control_B.aBuffer[proc_control_B.nb];
          } else {
            c[proc_control_B.nb] = proc_control_B.a_f[proc_control_B.nb];
          }
        } else if (aBufferInUse) {
          c[proc_control_B.nb] = proc_control_B.cBuffer_p[proc_control_B.nb];
        } else {
          c[proc_control_B.nb] = proc_control_B.cBuffer_e[proc_control_B.nb];
        }
      }
    }
  } else {
    std::memcpy(&proc_control_B.a_f[0], &a[0], 169U * sizeof(real_T));
    if ((!std::isinf(b)) && (!std::isnan(b))) {
      boolean_T firstmult;
      firstmult = true;
      int32_T exitg1;
      do {
        int32_T c_tmp;
        exitg1 = 0;
        proc_control_B.ed2 = std::floor(proc_control_B.e / 2.0);
        if (2.0 * proc_control_B.ed2 != proc_control_B.e) {
          if (firstmult) {
            std::memcpy(&c[0], &proc_control_B.a_f[0], 169U * sizeof(real_T));
            firstmult = false;
          } else {
            for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                 proc_control_B.nb++) {
              proc_control_B.i9 = 0;
              for (proc_control_B.i7 = 0; proc_control_B.i7 < 13;
                   proc_control_B.i7++) {
                c_tmp = proc_control_B.i9 + proc_control_B.nb;
                proc_control_B.cBuffer[c_tmp] = 0.0;
                proc_control_B.i10 = 0;
                for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                     proc_control_B.i8++) {
                  proc_control_B.cBuffer[c_tmp] += c[proc_control_B.i10 +
                    proc_control_B.nb] * proc_control_B.a_f[proc_control_B.i8 +
                    proc_control_B.i9];
                  proc_control_B.i10 += 13;
                }

                proc_control_B.i9 += 13;
              }
            }

            std::memcpy(&c[0], &proc_control_B.cBuffer[0], 169U * sizeof(real_T));
          }
        }

        if (proc_control_B.ed2 == 0.0) {
          exitg1 = 1;
        } else {
          proc_control_B.e = proc_control_B.ed2;
          for (proc_control_B.nb = 0; proc_control_B.nb < 13; proc_control_B.nb
               ++) {
            proc_control_B.i9 = 0;
            for (proc_control_B.i7 = 0; proc_control_B.i7 < 13;
                 proc_control_B.i7++) {
              c_tmp = proc_control_B.i9 + proc_control_B.nb;
              proc_control_B.cBuffer[c_tmp] = 0.0;
              proc_control_B.i10 = 0;
              for (proc_control_B.i8 = 0; proc_control_B.i8 < 13;
                   proc_control_B.i8++) {
                proc_control_B.cBuffer[c_tmp] +=
                  proc_control_B.a_f[proc_control_B.i10 + proc_control_B.nb] *
                  proc_control_B.a_f[proc_control_B.i8 + proc_control_B.i9];
                proc_control_B.i10 += 13;
              }

              proc_control_B.i9 += 13;
            }
          }

          std::memcpy(&proc_control_B.a_f[0], &proc_control_B.cBuffer[0], 169U *
                      sizeof(real_T));
        }
      } while (exitg1 == 0);
    } else {
      for (proc_control_B.nb = 0; proc_control_B.nb < 169; proc_control_B.nb++)
      {
        c[proc_control_B.nb] = (rtNaN);
      }
    }
  }
}

real_T proc_control::proc_control_log2(real_T x)
{
  real_T f;
  int32_T eint;
  if (x == 0.0) {
    f = (rtMinusInf);
  } else if ((!std::isinf(x)) && (!std::isnan(x))) {
    proc_control_B.t_ir = frexp(x, &eint);
    if (proc_control_B.t_ir == 0.5) {
      f = static_cast<real_T>(eint) - 1.0;
    } else if ((eint == 1) && (proc_control_B.t_ir < 0.75)) {
      f = std::log(2.0 * proc_control_B.t_ir) / 0.69314718055994529;
    } else {
      f = std::log(proc_control_B.t_ir) / 0.69314718055994529 +
        static_cast<real_T>(eint);
    }
  } else {
    f = x;
  }

  return f;
}

void proc_control::proc_control_padeApproximation(const real_T A[169], const
  real_T A2[169], const real_T A4[169], const real_T A6[169], int32_T m, real_T
  F[169])
{
  int32_T g_k;
  if (m == 3) {
    std::memcpy(&F[0], &A2[0], 169U * sizeof(real_T));
    g_k = 0;
    proc_control_B.kAcol = 0;
    for (proc_control_B.g_k = 0; proc_control_B.g_k < 13; proc_control_B.g_k++)
    {
      F[g_k] += 60.0;
      std::memset(&proc_control_B.A6_p[proc_control_B.kAcol], 0, 13U * sizeof
                  (real_T));
      g_k += 14;
      proc_control_B.kAcol += 13;
    }

    proc_control_B.g_k = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      proc_control_B.kAcol = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++) {
        for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 13;
             proc_control_B.jA_j++) {
          proc_control_B.iy_k = proc_control_B.jA_j + proc_control_B.g_k;
          proc_control_B.A6_p[proc_control_B.iy_k] += A[proc_control_B.jA_j +
            proc_control_B.kAcol] * F[proc_control_B.jj + proc_control_B.g_k];
        }

        proc_control_B.kAcol += 13;
      }

      proc_control_B.g_k += 13;
    }

    for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 169; proc_control_B.jA_j
         ++) {
      F[proc_control_B.jA_j] = proc_control_B.A6_p[proc_control_B.jA_j];
      proc_control_B.V_p[proc_control_B.jA_j] = 12.0 * A2[proc_control_B.jA_j];
    }

    proc_control_B.d_n = 120.0;
  } else if (m == 5) {
    for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 169; proc_control_B.jA_j
         ++) {
      F[proc_control_B.jA_j] = 420.0 * A2[proc_control_B.jA_j] +
        A4[proc_control_B.jA_j];
    }

    g_k = 0;
    proc_control_B.kAcol = 0;
    for (proc_control_B.g_k = 0; proc_control_B.g_k < 13; proc_control_B.g_k++)
    {
      F[g_k] += 15120.0;
      std::memset(&proc_control_B.A6_p[proc_control_B.kAcol], 0, 13U * sizeof
                  (real_T));
      g_k += 14;
      proc_control_B.kAcol += 13;
    }

    proc_control_B.g_k = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      proc_control_B.kAcol = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++) {
        for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 13;
             proc_control_B.jA_j++) {
          proc_control_B.iy_k = proc_control_B.jA_j + proc_control_B.g_k;
          proc_control_B.A6_p[proc_control_B.iy_k] += A[proc_control_B.jA_j +
            proc_control_B.kAcol] * F[proc_control_B.jj + proc_control_B.g_k];
        }

        proc_control_B.kAcol += 13;
      }

      proc_control_B.g_k += 13;
    }

    for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 169; proc_control_B.jA_j
         ++) {
      F[proc_control_B.jA_j] = proc_control_B.A6_p[proc_control_B.jA_j];
      proc_control_B.V_p[proc_control_B.jA_j] = 30.0 * A4[proc_control_B.jA_j] +
        3360.0 * A2[proc_control_B.jA_j];
    }

    proc_control_B.d_n = 30240.0;
  } else if (m == 7) {
    for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 169; proc_control_B.jA_j
         ++) {
      F[proc_control_B.jA_j] = (1512.0 * A4[proc_control_B.jA_j] +
        A6[proc_control_B.jA_j]) + 277200.0 * A2[proc_control_B.jA_j];
    }

    g_k = 0;
    proc_control_B.kAcol = 0;
    for (proc_control_B.g_k = 0; proc_control_B.g_k < 13; proc_control_B.g_k++)
    {
      F[g_k] += 8.64864E+6;
      std::memset(&proc_control_B.A6_p[proc_control_B.kAcol], 0, 13U * sizeof
                  (real_T));
      g_k += 14;
      proc_control_B.kAcol += 13;
    }

    proc_control_B.g_k = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      proc_control_B.kAcol = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++) {
        for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 13;
             proc_control_B.jA_j++) {
          proc_control_B.iy_k = proc_control_B.jA_j + proc_control_B.g_k;
          proc_control_B.A6_p[proc_control_B.iy_k] += A[proc_control_B.jA_j +
            proc_control_B.kAcol] * F[proc_control_B.jj + proc_control_B.g_k];
        }

        proc_control_B.kAcol += 13;
      }

      proc_control_B.g_k += 13;
    }

    for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 169; proc_control_B.jA_j
         ++) {
      F[proc_control_B.jA_j] = proc_control_B.A6_p[proc_control_B.jA_j];
      proc_control_B.V_p[proc_control_B.jA_j] = (56.0 * A6[proc_control_B.jA_j]
        + 25200.0 * A4[proc_control_B.jA_j]) + 1.99584E+6 *
        A2[proc_control_B.jA_j];
    }

    proc_control_B.d_n = 1.729728E+7;
  } else if (m == 9) {
    for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 13; proc_control_B.jA_j
         ++) {
      std::memset(&proc_control_B.V_p[proc_control_B.jA_j * 13], 0, 13U * sizeof
                  (real_T));
      for (g_k = 0; g_k < 13; g_k++) {
        for (proc_control_B.g_k = 0; proc_control_B.g_k < 13; proc_control_B.g_k
             ++) {
          proc_control_B.kAcol = 13 * proc_control_B.jA_j + proc_control_B.g_k;
          proc_control_B.V_p[proc_control_B.kAcol] += A6[13 * g_k +
            proc_control_B.g_k] * A2[13 * proc_control_B.jA_j + g_k];
        }
      }
    }

    for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 169; proc_control_B.jA_j
         ++) {
      F[proc_control_B.jA_j] = ((3960.0 * A6[proc_control_B.jA_j] +
        proc_control_B.V_p[proc_control_B.jA_j]) + 2.16216E+6 *
        A4[proc_control_B.jA_j]) + 3.027024E+8 * A2[proc_control_B.jA_j];
    }

    g_k = 0;
    proc_control_B.kAcol = 0;
    for (proc_control_B.g_k = 0; proc_control_B.g_k < 13; proc_control_B.g_k++)
    {
      F[g_k] += 8.8216128E+9;
      std::memset(&proc_control_B.A6_p[proc_control_B.kAcol], 0, 13U * sizeof
                  (real_T));
      g_k += 14;
      proc_control_B.kAcol += 13;
    }

    proc_control_B.g_k = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      proc_control_B.kAcol = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++) {
        for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 13;
             proc_control_B.jA_j++) {
          proc_control_B.iy_k = proc_control_B.jA_j + proc_control_B.g_k;
          proc_control_B.A6_p[proc_control_B.iy_k] += A[proc_control_B.jA_j +
            proc_control_B.kAcol] * F[proc_control_B.jj + proc_control_B.g_k];
        }

        proc_control_B.kAcol += 13;
      }

      proc_control_B.g_k += 13;
    }

    for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 169; proc_control_B.jA_j
         ++) {
      F[proc_control_B.jA_j] = proc_control_B.A6_p[proc_control_B.jA_j];
      proc_control_B.V_p[proc_control_B.jA_j] = ((90.0 *
        proc_control_B.V_p[proc_control_B.jA_j] + 110880.0 *
        A6[proc_control_B.jA_j]) + 3.027024E+7 * A4[proc_control_B.jA_j]) +
        2.0756736E+9 * A2[proc_control_B.jA_j];
    }

    proc_control_B.d_n = 1.76432256E+10;
  } else {
    for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 169; proc_control_B.jA_j
         ++) {
      F[proc_control_B.jA_j] = (3.352212864E+10 * A6[proc_control_B.jA_j] +
        1.05594705216E+13 * A4[proc_control_B.jA_j]) + 1.1873537964288E+15 *
        A2[proc_control_B.jA_j];
    }

    g_k = 0;
    for (proc_control_B.g_k = 0; proc_control_B.g_k < 13; proc_control_B.g_k++)
    {
      F[g_k] += 3.238237626624E+16;
      g_k += 14;
    }

    for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 169; proc_control_B.jA_j
         ++) {
      proc_control_B.V_p[proc_control_B.jA_j] = (16380.0 *
        A4[proc_control_B.jA_j] + A6[proc_control_B.jA_j]) + 4.08408E+7 *
        A2[proc_control_B.jA_j];
    }

    for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 13; proc_control_B.jA_j
         ++) {
      proc_control_B.g_k = 0;
      for (g_k = 0; g_k < 13; g_k++) {
        proc_control_B.d_n = 0.0;
        proc_control_B.kAcol = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++)
        {
          proc_control_B.d_n += A6[proc_control_B.kAcol + proc_control_B.jA_j] *
            proc_control_B.V_p[proc_control_B.jj + proc_control_B.g_k];
          proc_control_B.kAcol += 13;
        }

        proc_control_B.kAcol = proc_control_B.g_k + proc_control_B.jA_j;
        proc_control_B.A6_p[proc_control_B.kAcol] = F[proc_control_B.kAcol] +
          proc_control_B.d_n;
        proc_control_B.g_k += 13;
      }
    }

    for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 13; proc_control_B.jA_j
         ++) {
      std::memset(&F[proc_control_B.jA_j * 13], 0, 13U * sizeof(real_T));
      for (g_k = 0; g_k < 13; g_k++) {
        for (proc_control_B.g_k = 0; proc_control_B.g_k < 13; proc_control_B.g_k
             ++) {
          proc_control_B.jj = 13 * proc_control_B.jA_j + proc_control_B.g_k;
          F[proc_control_B.jj] += A[13 * g_k + proc_control_B.g_k] *
            proc_control_B.A6_p[13 * proc_control_B.jA_j + g_k];
        }
      }
    }

    for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 169; proc_control_B.jA_j
         ++) {
      proc_control_B.A6_p[proc_control_B.jA_j] = (182.0 * A6[proc_control_B.jA_j]
        + 960960.0 * A4[proc_control_B.jA_j]) + 1.32324192E+9 *
        A2[proc_control_B.jA_j];
    }

    for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 13; proc_control_B.jA_j
         ++) {
      proc_control_B.g_k = 0;
      for (g_k = 0; g_k < 13; g_k++) {
        proc_control_B.d_n = 0.0;
        proc_control_B.kAcol = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++)
        {
          proc_control_B.d_n += A6[proc_control_B.kAcol + proc_control_B.jA_j] *
            proc_control_B.A6_p[proc_control_B.jj + proc_control_B.g_k];
          proc_control_B.kAcol += 13;
        }

        proc_control_B.kAcol = proc_control_B.g_k + proc_control_B.jA_j;
        proc_control_B.V_p[proc_control_B.kAcol] = ((A6[proc_control_B.kAcol] *
          6.704425728E+11 + proc_control_B.d_n) + A4[proc_control_B.kAcol] *
          1.29060195264E+14) + A2[proc_control_B.kAcol] * 7.7717703038976E+15;
        proc_control_B.g_k += 13;
      }
    }

    proc_control_B.d_n = 6.476475253248E+16;
  }

  g_k = 0;
  for (proc_control_B.g_k = 0; proc_control_B.g_k < 13; proc_control_B.g_k++) {
    proc_control_B.V_p[g_k] += proc_control_B.d_n;
    g_k += 14;
  }

  for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 169; proc_control_B.jA_j++)
  {
    proc_control_B.V_p[proc_control_B.jA_j] -= F[proc_control_B.jA_j];
    F[proc_control_B.jA_j] *= 2.0;
  }

  for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 13; proc_control_B.jA_j++)
  {
    proc_control_B.b_ipiv[proc_control_B.jA_j] = static_cast<int8_T>
      (proc_control_B.jA_j + 1);
  }

  for (proc_control_B.g_k = 0; proc_control_B.g_k < 12; proc_control_B.g_k++) {
    g_k = proc_control_B.g_k * 14 + 2;
    proc_control_B.jj = proc_control_B.g_k * 14;
    proc_control_B.kAcol = 13 - proc_control_B.g_k;
    proc_control_B.iy_k = 1;
    proc_control_B.d_n = std::abs(proc_control_B.V_p[proc_control_B.jj]);
    for (proc_control_B.jA_j = 2; proc_control_B.jA_j <= proc_control_B.kAcol;
         proc_control_B.jA_j++) {
      proc_control_B.s_c = std::abs(proc_control_B.V_p[(g_k +
        proc_control_B.jA_j) - 3]);
      if (proc_control_B.s_c > proc_control_B.d_n) {
        proc_control_B.iy_k = proc_control_B.jA_j;
        proc_control_B.d_n = proc_control_B.s_c;
      }
    }

    if (proc_control_B.V_p[(g_k + proc_control_B.iy_k) - 3] != 0.0) {
      if (proc_control_B.iy_k - 1 != 0) {
        proc_control_B.jp1j = proc_control_B.g_k + proc_control_B.iy_k;
        proc_control_B.b_ipiv[proc_control_B.g_k] = static_cast<int8_T>
          (proc_control_B.jp1j);
        for (proc_control_B.jA_j = 0; proc_control_B.jA_j < 13;
             proc_control_B.jA_j++) {
          proc_control_B.iy_k = proc_control_B.jA_j * 13 + proc_control_B.g_k;
          proc_control_B.d_n = proc_control_B.V_p[proc_control_B.iy_k];
          proc_control_B.kAcol = (proc_control_B.jA_j * 13 + proc_control_B.jp1j)
            - 1;
          proc_control_B.V_p[proc_control_B.iy_k] =
            proc_control_B.V_p[proc_control_B.kAcol];
          proc_control_B.V_p[proc_control_B.kAcol] = proc_control_B.d_n;
        }
      }

      proc_control_B.iy_k = g_k - proc_control_B.g_k;
      for (proc_control_B.ix_c5 = g_k; proc_control_B.ix_c5 <=
           proc_control_B.iy_k + 11; proc_control_B.ix_c5++) {
        proc_control_B.V_p[proc_control_B.ix_c5 - 1] /=
          proc_control_B.V_p[proc_control_B.jj];
      }
    }

    proc_control_B.kAcol = 12 - proc_control_B.g_k;
    proc_control_B.jA_j = proc_control_B.jj;
    proc_control_B.jj += 13;
    for (proc_control_B.jp1j = 0; proc_control_B.jp1j < proc_control_B.kAcol;
         proc_control_B.jp1j++) {
      proc_control_B.d_n = proc_control_B.V_p[proc_control_B.jp1j * 13 +
        proc_control_B.jj];
      if (proc_control_B.d_n != 0.0) {
        proc_control_B.iy_k = proc_control_B.jA_j + 15;
        proc_control_B.ix_c5 = proc_control_B.jA_j - proc_control_B.g_k;
        for (proc_control_B.ijA_h = proc_control_B.iy_k; proc_control_B.ijA_h <=
             proc_control_B.ix_c5 + 26; proc_control_B.ijA_h++) {
          proc_control_B.V_p[proc_control_B.ijA_h - 1] += proc_control_B.V_p
            [((g_k + proc_control_B.ijA_h) - proc_control_B.jA_j) - 16] *
            -proc_control_B.d_n;
        }
      }

      proc_control_B.jA_j += 13;
    }
  }

  for (g_k = 0; g_k < 12; g_k++) {
    int8_T b_ipiv;
    b_ipiv = proc_control_B.b_ipiv[g_k];
    if (g_k + 1 != b_ipiv) {
      for (proc_control_B.g_k = 0; proc_control_B.g_k < 13; proc_control_B.g_k++)
      {
        proc_control_B.iy_k = 13 * proc_control_B.g_k + g_k;
        proc_control_B.d_n = F[proc_control_B.iy_k];
        proc_control_B.jj = (13 * proc_control_B.g_k + b_ipiv) - 1;
        F[proc_control_B.iy_k] = F[proc_control_B.jj];
        F[proc_control_B.jj] = proc_control_B.d_n;
      }
    }
  }

  for (proc_control_B.g_k = 0; proc_control_B.g_k < 13; proc_control_B.g_k++) {
    proc_control_B.jp1j = 13 * proc_control_B.g_k - 1;
    for (g_k = 0; g_k < 13; g_k++) {
      proc_control_B.kAcol = 13 * g_k - 1;
      proc_control_B.jA_j = (g_k + proc_control_B.jp1j) + 1;
      if (F[proc_control_B.jA_j] != 0.0) {
        for (proc_control_B.ix_c5 = g_k + 2; proc_control_B.ix_c5 < 14;
             proc_control_B.ix_c5++) {
          proc_control_B.jj = proc_control_B.ix_c5 + proc_control_B.jp1j;
          F[proc_control_B.jj] -= proc_control_B.V_p[proc_control_B.ix_c5 +
            proc_control_B.kAcol] * F[proc_control_B.jA_j];
        }
      }
    }
  }

  for (proc_control_B.g_k = 0; proc_control_B.g_k < 13; proc_control_B.g_k++) {
    proc_control_B.jp1j = 13 * proc_control_B.g_k;
    for (proc_control_B.jA_j = 12; proc_control_B.jA_j >= 0; proc_control_B.jA_j
         --) {
      proc_control_B.kAcol = 13 * proc_control_B.jA_j;
      if (F[proc_control_B.jA_j + proc_control_B.jp1j] != 0.0) {
        proc_control_B.jj = proc_control_B.jA_j + proc_control_B.jp1j;
        F[proc_control_B.jj] /= proc_control_B.V_p[proc_control_B.jA_j +
          proc_control_B.kAcol];
        proc_control_B.iy_k = proc_control_B.jA_j - 1;
        for (g_k = 0; g_k <= proc_control_B.iy_k; g_k++) {
          proc_control_B.ix_c5 = g_k + proc_control_B.jp1j;
          F[proc_control_B.ix_c5] -= proc_control_B.V_p[g_k +
            proc_control_B.kAcol] * F[proc_control_B.jj];
        }
      }
    }
  }

  g_k = 0;
  for (proc_control_B.g_k = 0; proc_control_B.g_k < 13; proc_control_B.g_k++) {
    F[g_k]++;
    g_k += 14;
  }
}

void proc_control::proc_control_recomputeBlockDiag(const real_T A[169], const
  real_T F[169], const int32_T blockFormat[12], real_T b_F[169])
{
  std::memcpy(&b_F[0], &F[0], 169U * sizeof(real_T));
  for (proc_control_B.b_j_e = 0; proc_control_B.b_j_e < 12; proc_control_B.b_j_e
       ++) {
    proc_control_B.blockFormat_e = blockFormat[proc_control_B.b_j_e];
    if (proc_control_B.blockFormat_e != 0) {
      if (proc_control_B.blockFormat_e == 1) {
        int32_T delta_tmp_tmp;
        proc_control_B.blockFormat_e = 13 * proc_control_B.b_j_e +
          proc_control_B.b_j_e;
        proc_control_B.delta_tmp_i = A[proc_control_B.blockFormat_e];
        proc_control_B.delta_d = std::exp(proc_control_B.delta_tmp_i);
        delta_tmp_tmp = (proc_control_B.b_j_e + 1) * 13 + proc_control_B.b_j_e;
        proc_control_B.delta_tmp_c = A[delta_tmp_tmp + 1];
        proc_control_B.expa_g = std::exp(proc_control_B.delta_tmp_c);
        proc_control_B.sinchdelta_i = (proc_control_B.delta_tmp_c +
          proc_control_B.delta_tmp_i) / 2.0;
        if (std::fmax(proc_control_B.sinchdelta_i, std::abs
                      (proc_control_B.delta_tmp_i - proc_control_B.delta_tmp_c) /
                      2.0) < 709.782712893384) {
          proc_control_B.delta_tmp_i = (A[delta_tmp_tmp + 1] -
            A[proc_control_B.blockFormat_e]) / 2.0;
          if (proc_control_B.delta_tmp_i == 0.0) {
            proc_control_B.delta_tmp_i = 1.0;
          } else {
            proc_control_B.delta_tmp_i = std::sinh(proc_control_B.delta_tmp_i) /
              proc_control_B.delta_tmp_i;
          }

          proc_control_B.sinchdelta_i = A[delta_tmp_tmp] * std::exp
            (proc_control_B.sinchdelta_i) * proc_control_B.delta_tmp_i;
        } else {
          proc_control_B.sinchdelta_i = (proc_control_B.expa_g -
            proc_control_B.delta_d) * A[delta_tmp_tmp] /
            (proc_control_B.delta_tmp_c - proc_control_B.delta_tmp_i);
        }

        b_F[proc_control_B.blockFormat_e] = proc_control_B.delta_d;
        b_F[delta_tmp_tmp] = proc_control_B.sinchdelta_i;
        b_F[delta_tmp_tmp + 1] = proc_control_B.expa_g;
      } else {
        int32_T delta_tmp_tmp;
        proc_control_B.blockFormat_e = 13 * proc_control_B.b_j_e +
          proc_control_B.b_j_e;
        proc_control_B.delta_tmp_i = A[proc_control_B.blockFormat_e + 1];
        delta_tmp_tmp = (proc_control_B.b_j_e + 1) * 13 + proc_control_B.b_j_e;
        proc_control_B.delta_tmp_c = A[delta_tmp_tmp];
        proc_control_B.delta_d = std::sqrt(std::abs(proc_control_B.delta_tmp_c *
          proc_control_B.delta_tmp_i));
        proc_control_B.expa_g = std::exp(A[proc_control_B.blockFormat_e]);
        if (proc_control_B.delta_d == 0.0) {
          proc_control_B.sinchdelta_i = 1.0;
        } else {
          proc_control_B.sinchdelta_i = std::sin(proc_control_B.delta_d) /
            proc_control_B.delta_d;
        }

        b_F[proc_control_B.blockFormat_e] = proc_control_B.expa_g * std::cos
          (proc_control_B.delta_d);
        b_F[proc_control_B.blockFormat_e + 1] = proc_control_B.delta_tmp_i *
          proc_control_B.expa_g * proc_control_B.sinchdelta_i;
        b_F[delta_tmp_tmp] = proc_control_B.delta_tmp_c * proc_control_B.expa_g *
          proc_control_B.sinchdelta_i;
        b_F[delta_tmp_tmp + 1] = b_F[proc_control_B.blockFormat_e];
      }
    }
  }

  if (blockFormat[11] == 0) {
    b_F[168] = std::exp(A[168]);
  }
}

real_T proc_control::proc_control_xnrm2(int32_T n, const real_T x[169], int32_T
  ix0)
{
  real_T y;
  y = 0.0;
  if (n < 1) {
  } else if (n == 1) {
    y = std::abs(x[ix0 - 1]);
  } else {
    proc_control_B.scale_k = 3.3121686421112381E-170;
    proc_control_B.kend = ix0 + n;
    for (int32_T k{ix0}; k < proc_control_B.kend; k++) {
      proc_control_B.absxk_c = std::abs(x[k - 1]);
      if (proc_control_B.absxk_c > proc_control_B.scale_k) {
        proc_control_B.t_j = proc_control_B.scale_k / proc_control_B.absxk_c;
        y = y * proc_control_B.t_j * proc_control_B.t_j + 1.0;
        proc_control_B.scale_k = proc_control_B.absxk_c;
      } else {
        proc_control_B.t_j = proc_control_B.absxk_c / proc_control_B.scale_k;
        y += proc_control_B.t_j * proc_control_B.t_j;
      }
    }

    y = proc_control_B.scale_k * std::sqrt(y);
  }

  return y;
}

void proc_control::proc_control_xgerc(int32_T m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y[13], const real_T A[169], int32_T ia0, real_T b_A
  [169])
{
  std::memcpy(&b_A[0], &A[0], 169U * sizeof(real_T));
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA_k2 = ia0;
    for (proc_control_B.j_ne = 0; proc_control_B.j_ne < n; proc_control_B.j_ne++)
    {
      proc_control_B.temp_f4 = y[proc_control_B.j_ne];
      if (proc_control_B.temp_f4 != 0.0) {
        proc_control_B.temp_f4 *= alpha1;
        proc_control_B.c_nb = (m + proc_control_B.jA_k2) - 1;
        for (int32_T ijA{proc_control_B.jA_k2}; ijA <= proc_control_B.c_nb; ijA
             ++) {
          b_A[ijA - 1] += b_A[((ix0 + ijA) - proc_control_B.jA_k2) - 1] *
            proc_control_B.temp_f4;
        }
      }

      proc_control_B.jA_k2 += 13;
    }
  }
}

void proc_control::proc_control_xgehrd(const real_T a[169], real_T b_a[169],
  real_T tau[12])
{
  std::memcpy(&b_a[0], &a[0], 169U * sizeof(real_T));
  std::memset(&proc_control_B.work_c[0], 0, 13U * sizeof(real_T));
  for (proc_control_B.b_i_py = 0; proc_control_B.b_i_py < 12;
       proc_control_B.b_i_py++) {
    int32_T exitg1;
    boolean_T exitg2;
    proc_control_B.in = (proc_control_B.b_i_py + 1) * 13;
    if (proc_control_B.b_i_py + 3 <= 13) {
      proc_control_B.ia0 = proc_control_B.b_i_py + 3;
    } else {
      proc_control_B.ia0 = 13;
    }

    proc_control_B.ia0 += proc_control_B.b_i_py * 13;
    proc_control_B.b_i_tmp = 13 * proc_control_B.b_i_py + proc_control_B.b_i_py;
    proc_control_B.b_alpha1_tmp = b_a[proc_control_B.b_i_tmp + 1];
    tau[proc_control_B.b_i_py] = 0.0;
    proc_control_B.xnorm_f = proc_control_xnrm2(11 - proc_control_B.b_i_py, b_a,
      proc_control_B.ia0);
    if (proc_control_B.xnorm_f != 0.0) {
      proc_control_B.xnorm_f = proc_control_rt_hypotd_snf
        (proc_control_B.b_alpha1_tmp, proc_control_B.xnorm_f);
      if (proc_control_B.b_alpha1_tmp >= 0.0) {
        proc_control_B.xnorm_f = -proc_control_B.xnorm_f;
      }

      if (std::abs(proc_control_B.xnorm_f) < 1.0020841800044864E-292) {
        proc_control_B.knt_bp = -1;
        do {
          proc_control_B.knt_bp++;
          proc_control_B.i_ny = proc_control_B.ia0 - proc_control_B.b_i_py;
          for (proc_control_B.lastv_p = proc_control_B.ia0;
               proc_control_B.lastv_p <= proc_control_B.i_ny + 10;
               proc_control_B.lastv_p++) {
            b_a[proc_control_B.lastv_p - 1] *= 9.9792015476736E+291;
          }

          proc_control_B.xnorm_f *= 9.9792015476736E+291;
          proc_control_B.b_alpha1_tmp *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.xnorm_f) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_bp + 1 < 20));

        proc_control_B.xnorm_f = proc_control_rt_hypotd_snf
          (proc_control_B.b_alpha1_tmp, proc_control_xnrm2(11 -
            proc_control_B.b_i_py, b_a, proc_control_B.ia0));
        if (proc_control_B.b_alpha1_tmp >= 0.0) {
          proc_control_B.xnorm_f = -proc_control_B.xnorm_f;
        }

        tau[proc_control_B.b_i_py] = (proc_control_B.xnorm_f -
          proc_control_B.b_alpha1_tmp) / proc_control_B.xnorm_f;
        proc_control_B.b_alpha1_tmp = 1.0 / (proc_control_B.b_alpha1_tmp -
          proc_control_B.xnorm_f);
        proc_control_B.i_ny = proc_control_B.ia0 - proc_control_B.b_i_py;
        for (proc_control_B.lastv_p = proc_control_B.ia0; proc_control_B.lastv_p
             <= proc_control_B.i_ny + 10; proc_control_B.lastv_p++) {
          b_a[proc_control_B.lastv_p - 1] *= proc_control_B.b_alpha1_tmp;
        }

        for (proc_control_B.lastv_p = 0; proc_control_B.lastv_p <=
             proc_control_B.knt_bp; proc_control_B.lastv_p++) {
          proc_control_B.xnorm_f *= 1.0020841800044864E-292;
        }

        proc_control_B.b_alpha1_tmp = proc_control_B.xnorm_f;
      } else {
        tau[proc_control_B.b_i_py] = (proc_control_B.xnorm_f -
          proc_control_B.b_alpha1_tmp) / proc_control_B.xnorm_f;
        proc_control_B.b_alpha1_tmp = 1.0 / (proc_control_B.b_alpha1_tmp -
          proc_control_B.xnorm_f);
        proc_control_B.i_ny = proc_control_B.ia0 - proc_control_B.b_i_py;
        for (proc_control_B.lastv_p = proc_control_B.ia0; proc_control_B.lastv_p
             <= proc_control_B.i_ny + 10; proc_control_B.lastv_p++) {
          b_a[proc_control_B.lastv_p - 1] *= proc_control_B.b_alpha1_tmp;
        }

        proc_control_B.b_alpha1_tmp = proc_control_B.xnorm_f;
      }
    }

    b_a[proc_control_B.b_i_tmp + 1] = 1.0;
    if (tau[proc_control_B.b_i_py] != 0.0) {
      proc_control_B.lastv_p = 12 - proc_control_B.b_i_py;
      proc_control_B.i_ny = (proc_control_B.b_i_tmp - proc_control_B.b_i_py) + 2;
      while ((proc_control_B.lastv_p > 0) && (b_a[proc_control_B.i_ny + 10] ==
              0.0)) {
        proc_control_B.lastv_p--;
        proc_control_B.i_ny--;
      }

      proc_control_B.knt_bp = 13;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.knt_bp > 0)) {
        proc_control_B.i_ny = proc_control_B.in + proc_control_B.knt_bp;
        proc_control_B.jA_b = proc_control_B.i_ny;
        do {
          exitg1 = 0;
          if (proc_control_B.jA_b <= (proc_control_B.lastv_p - 1) * 13 +
              proc_control_B.i_ny) {
            if (b_a[proc_control_B.jA_b - 1] != 0.0) {
              exitg1 = 1;
            } else {
              proc_control_B.jA_b += 13;
            }
          } else {
            proc_control_B.knt_bp--;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    } else {
      proc_control_B.lastv_p = 0;
      proc_control_B.knt_bp = 0;
    }

    if (proc_control_B.lastv_p > 0) {
      if (proc_control_B.knt_bp != 0) {
        std::memset(&proc_control_B.work_c[0], 0, proc_control_B.knt_bp * sizeof
                    (real_T));
        proc_control_B.ix_n = proc_control_B.b_i_tmp + 1;
        proc_control_B.i_ny = (proc_control_B.lastv_p - 1) * 13 +
          proc_control_B.in;
        for (proc_control_B.iac_j = proc_control_B.in + 1; proc_control_B.iac_j <=
             proc_control_B.i_ny + 1; proc_control_B.iac_j += 13) {
          proc_control_B.ia0 = proc_control_B.iac_j + proc_control_B.knt_bp;
          for (proc_control_B.jA_b = proc_control_B.iac_j; proc_control_B.jA_b <
               proc_control_B.ia0; proc_control_B.jA_b++) {
            proc_control_B.work_tmp = proc_control_B.jA_b - proc_control_B.iac_j;
            proc_control_B.work_c[proc_control_B.work_tmp] +=
              b_a[proc_control_B.jA_b - 1] * b_a[proc_control_B.ix_n];
          }

          proc_control_B.ix_n++;
        }
      }

      if (!(-tau[proc_control_B.b_i_py] == 0.0)) {
        proc_control_B.jA_b = proc_control_B.in;
        for (proc_control_B.iac_j = 0; proc_control_B.iac_j <
             proc_control_B.lastv_p; proc_control_B.iac_j++) {
          proc_control_B.xnorm_f = b_a[(proc_control_B.b_i_tmp +
            proc_control_B.iac_j) + 1];
          if (proc_control_B.xnorm_f != 0.0) {
            proc_control_B.xnorm_f *= -tau[proc_control_B.b_i_py];
            proc_control_B.ia0 = proc_control_B.knt_bp + proc_control_B.jA_b;
            for (proc_control_B.i_ny = proc_control_B.jA_b + 1;
                 proc_control_B.i_ny <= proc_control_B.ia0; proc_control_B.i_ny
                 ++) {
              b_a[proc_control_B.i_ny - 1] += proc_control_B.work_c
                [(proc_control_B.i_ny - proc_control_B.jA_b) - 1] *
                proc_control_B.xnorm_f;
            }
          }

          proc_control_B.jA_b += 13;
        }
      }
    }

    proc_control_B.ix_n = (proc_control_B.b_i_py + proc_control_B.in) + 2;
    if (tau[proc_control_B.b_i_py] != 0.0) {
      proc_control_B.lastv_p = 12 - proc_control_B.b_i_py;
      proc_control_B.i_ny = (proc_control_B.b_i_tmp - proc_control_B.b_i_py) + 2;
      while ((proc_control_B.lastv_p > 0) && (b_a[proc_control_B.i_ny + 10] ==
              0.0)) {
        proc_control_B.lastv_p--;
        proc_control_B.i_ny--;
      }

      proc_control_B.knt_bp = 12 - proc_control_B.b_i_py;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.knt_bp > 0)) {
        proc_control_B.in = (proc_control_B.knt_bp - 1) * 13 +
          proc_control_B.ix_n;
        proc_control_B.jA_b = proc_control_B.in;
        do {
          exitg1 = 0;
          if (proc_control_B.jA_b <= (proc_control_B.in + proc_control_B.lastv_p)
              - 1) {
            if (b_a[proc_control_B.jA_b - 1] != 0.0) {
              exitg1 = 1;
            } else {
              proc_control_B.jA_b++;
            }
          } else {
            proc_control_B.knt_bp--;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    } else {
      proc_control_B.lastv_p = 0;
      proc_control_B.knt_bp = 0;
    }

    if (proc_control_B.lastv_p > 0) {
      if (proc_control_B.knt_bp != 0) {
        std::memset(&proc_control_B.work_c[0], 0, proc_control_B.knt_bp * sizeof
                    (real_T));
        proc_control_B.i_ny = (proc_control_B.knt_bp - 1) * 13 +
          proc_control_B.ix_n;
        for (proc_control_B.iac_j = proc_control_B.ix_n; proc_control_B.iac_j <=
             proc_control_B.i_ny; proc_control_B.iac_j += 13) {
          proc_control_B.xnorm_f = 0.0;
          proc_control_B.ia0 = proc_control_B.iac_j + proc_control_B.lastv_p;
          for (proc_control_B.jA_b = proc_control_B.iac_j; proc_control_B.jA_b <
               proc_control_B.ia0; proc_control_B.jA_b++) {
            proc_control_B.xnorm_f += b_a[((proc_control_B.b_i_tmp +
              proc_control_B.jA_b) - proc_control_B.iac_j) + 1] *
              b_a[proc_control_B.jA_b - 1];
          }

          proc_control_B.work_tmp = div_nde_s32_floor(proc_control_B.iac_j -
            proc_control_B.ix_n, 13);
          proc_control_B.work_c[proc_control_B.work_tmp] +=
            proc_control_B.xnorm_f;
        }
      }

      std::memcpy(&proc_control_B.b_a_e[0], &b_a[0], 169U * sizeof(real_T));
      proc_control_xgerc(proc_control_B.lastv_p, proc_control_B.knt_bp,
                         -tau[proc_control_B.b_i_py], proc_control_B.b_i_tmp + 2,
                         proc_control_B.work_c, proc_control_B.b_a_e,
                         proc_control_B.ix_n, b_a);
    }

    b_a[proc_control_B.b_i_tmp + 1] = proc_control_B.b_alpha1_tmp;
  }
}

real_T proc_control::proc_control_xnrm2_p(int32_T n, const real_T x[3])
{
  real_T y;
  y = 0.0;
  if (n < 1) {
  } else if (n == 1) {
    y = std::abs(x[1]);
  } else {
    proc_control_B.scale_f3 = 3.3121686421112381E-170;
    proc_control_B.absxk_lt = std::abs(x[1]);
    if (proc_control_B.absxk_lt > 3.3121686421112381E-170) {
      y = 1.0;
      proc_control_B.scale_f3 = proc_control_B.absxk_lt;
    } else {
      proc_control_B.t_l3 = proc_control_B.absxk_lt / 3.3121686421112381E-170;
      y = proc_control_B.t_l3 * proc_control_B.t_l3;
    }

    proc_control_B.absxk_lt = std::abs(x[2]);
    if (proc_control_B.absxk_lt > proc_control_B.scale_f3) {
      proc_control_B.t_l3 = proc_control_B.scale_f3 / proc_control_B.absxk_lt;
      y = y * proc_control_B.t_l3 * proc_control_B.t_l3 + 1.0;
      proc_control_B.scale_f3 = proc_control_B.absxk_lt;
    } else {
      proc_control_B.t_l3 = proc_control_B.absxk_lt / proc_control_B.scale_f3;
      y += proc_control_B.t_l3 * proc_control_B.t_l3;
    }

    y = proc_control_B.scale_f3 * std::sqrt(y);
  }

  return y;
}

void proc_control::proc_control_xdlanv2(real_T a, real_T b, real_T c, real_T d,
  real_T *rt1r, real_T *rt1i, real_T *rt2r, real_T *rt2i, real_T *b_a, real_T
  *b_b, real_T *b_c, real_T *b_d, real_T *cs, real_T *sn)
{
  *b_d = d;
  *b_c = c;
  *b_b = b;
  *b_a = a;
  if (c == 0.0) {
    *cs = 1.0;
    *sn = 0.0;
  } else if (b == 0.0) {
    *cs = 0.0;
    *sn = 1.0;
    *b_d = a;
    *b_a = d;
    *b_b = -c;
    *b_c = 0.0;
  } else {
    proc_control_B.temp_n = a - d;
    if ((proc_control_B.temp_n == 0.0) && ((b < 0.0) != (c < 0.0))) {
      *cs = 1.0;
      *sn = 0.0;
    } else {
      int32_T c_0;
      proc_control_B.p = 0.5 * proc_control_B.temp_n;
      proc_control_B.scale_e = std::abs(b);
      proc_control_B.z_b = std::abs(c);
      proc_control_B.bcmax = std::fmax(proc_control_B.scale_e,
        proc_control_B.z_b);
      if (!(b < 0.0)) {
        proc_control_B.b_b = 1;
      } else {
        proc_control_B.b_b = -1;
      }

      if (!(c < 0.0)) {
        c_0 = 1;
      } else {
        c_0 = -1;
      }

      proc_control_B.bcmis = std::fmin(proc_control_B.scale_e,
        proc_control_B.z_b) * static_cast<real_T>(proc_control_B.b_b) *
        static_cast<real_T>(c_0);
      proc_control_B.scale_e = std::fmax(std::abs(proc_control_B.p),
        proc_control_B.bcmax);
      proc_control_B.z_b = proc_control_B.p / proc_control_B.scale_e *
        proc_control_B.p + proc_control_B.bcmax / proc_control_B.scale_e *
        proc_control_B.bcmis;
      if (proc_control_B.z_b >= 8.8817841970012523E-16) {
        proc_control_B.scale_e = std::sqrt(proc_control_B.scale_e) * std::sqrt
          (proc_control_B.z_b);
        if (proc_control_B.p < 0.0) {
          proc_control_B.scale_e = -proc_control_B.scale_e;
        }

        proc_control_B.z_b = proc_control_B.p + proc_control_B.scale_e;
        *b_a = d + proc_control_B.z_b;
        *b_d = d - proc_control_B.bcmax / proc_control_B.z_b *
          proc_control_B.bcmis;
        proc_control_B.scale_e = proc_control_rt_hypotd_snf(c,
          proc_control_B.z_b);
        *cs = proc_control_B.z_b / proc_control_B.scale_e;
        *sn = c / proc_control_B.scale_e;
        *b_b = b - c;
        *b_c = 0.0;
      } else {
        proc_control_B.bcmax = b + c;
        proc_control_B.scale_e = proc_control_rt_hypotd_snf(proc_control_B.bcmax,
          proc_control_B.temp_n);
        *cs = std::sqrt((std::abs(proc_control_B.bcmax) / proc_control_B.scale_e
                         + 1.0) * 0.5);
        if (!(proc_control_B.bcmax < 0.0)) {
          proc_control_B.b_b = 1;
        } else {
          proc_control_B.b_b = -1;
        }

        *sn = -(proc_control_B.p / (proc_control_B.scale_e * *cs)) *
          static_cast<real_T>(proc_control_B.b_b);
        proc_control_B.temp_n = a * *cs + b * *sn;
        proc_control_B.p = -a * *sn + b * *cs;
        proc_control_B.scale_e = c * *cs + d * *sn;
        proc_control_B.bcmax = -c * *sn + d * *cs;
        *b_b = proc_control_B.p * *cs + proc_control_B.bcmax * *sn;
        *b_c = -proc_control_B.temp_n * *sn + proc_control_B.scale_e * *cs;
        proc_control_B.temp_n = ((proc_control_B.temp_n * *cs +
          proc_control_B.scale_e * *sn) + (-proc_control_B.p * *sn +
          proc_control_B.bcmax * *cs)) * 0.5;
        *b_a = proc_control_B.temp_n;
        *b_d = proc_control_B.temp_n;
        if (*b_c != 0.0) {
          if (*b_b != 0.0) {
            if ((*b_b < 0.0) == (*b_c < 0.0)) {
              proc_control_B.z_b = std::sqrt(std::abs(*b_b));
              proc_control_B.bcmax = std::sqrt(std::abs(*b_c));
              if (!(*b_c < 0.0)) {
                proc_control_B.p = proc_control_B.z_b * proc_control_B.bcmax;
              } else {
                proc_control_B.p = -(proc_control_B.z_b * proc_control_B.bcmax);
              }

              proc_control_B.scale_e = 1.0 / std::sqrt(std::abs(*b_b + *b_c));
              *b_a = proc_control_B.temp_n + proc_control_B.p;
              *b_d = proc_control_B.temp_n - proc_control_B.p;
              *b_b -= *b_c;
              *b_c = 0.0;
              proc_control_B.p = proc_control_B.z_b * proc_control_B.scale_e;
              proc_control_B.scale_e *= proc_control_B.bcmax;
              proc_control_B.temp_n = *cs * proc_control_B.p - *sn *
                proc_control_B.scale_e;
              *sn = *cs * proc_control_B.scale_e + *sn * proc_control_B.p;
              *cs = proc_control_B.temp_n;
            }
          } else {
            *b_b = -*b_c;
            *b_c = 0.0;
            proc_control_B.temp_n = *cs;
            *cs = -*sn;
            *sn = proc_control_B.temp_n;
          }
        }
      }
    }
  }

  *rt1r = *b_a;
  *rt2r = *b_d;
  if (*b_c == 0.0) {
    *rt1i = 0.0;
    *rt2i = 0.0;
  } else {
    *rt1i = std::sqrt(std::abs(*b_b)) * std::sqrt(std::abs(*b_c));
    *rt2i = -*rt1i;
  }
}

void proc_control::proc_control_xrot(int32_T n, const real_T x[169], int32_T ix0,
  int32_T iy0, real_T c, real_T s, real_T b_x[169])
{
  std::memcpy(&b_x[0], &x[0], 169U * sizeof(real_T));
  for (proc_control_B.k_kz = 0; proc_control_B.k_kz < n; proc_control_B.k_kz++)
  {
    int32_T temp_tmp;
    proc_control_B.temp_tmp_p = (proc_control_B.k_kz * 13 + iy0) - 1;
    proc_control_B.temp_tmp_j4 = b_x[proc_control_B.temp_tmp_p];
    temp_tmp = (proc_control_B.k_kz * 13 + ix0) - 1;
    proc_control_B.temp_tmp_i = b_x[temp_tmp];
    b_x[proc_control_B.temp_tmp_p] = proc_control_B.temp_tmp_j4 * c -
      proc_control_B.temp_tmp_i * s;
    b_x[temp_tmp] = proc_control_B.temp_tmp_i * c + proc_control_B.temp_tmp_j4 *
      s;
  }
}

void proc_control::proc_control_xrot_p(int32_T n, const real_T x[169], int32_T
  ix0, int32_T iy0, real_T c, real_T s, real_T b_x[169])
{
  std::memcpy(&b_x[0], &x[0], 169U * sizeof(real_T));
  if (n >= 1) {
    for (proc_control_B.k_j1 = 0; proc_control_B.k_j1 < n; proc_control_B.k_j1++)
    {
      int32_T temp_tmp;
      proc_control_B.temp_tmp_jx = (iy0 + proc_control_B.k_j1) - 1;
      proc_control_B.temp_tmp_j = b_x[proc_control_B.temp_tmp_jx];
      temp_tmp = (ix0 + proc_control_B.k_j1) - 1;
      proc_control_B.temp_tmp_m = b_x[temp_tmp];
      b_x[proc_control_B.temp_tmp_jx] = proc_control_B.temp_tmp_j * c -
        proc_control_B.temp_tmp_m * s;
      b_x[temp_tmp] = proc_control_B.temp_tmp_m * c + proc_control_B.temp_tmp_j *
        s;
    }
  }
}

void proc_control::proc_control_xrot_pr(const real_T x[169], int32_T ix0,
  int32_T iy0, real_T c, real_T s, real_T b_x[169])
{
  std::memcpy(&b_x[0], &x[0], 169U * sizeof(real_T));
  for (proc_control_B.k_br = 0; proc_control_B.k_br < 13; proc_control_B.k_br++)
  {
    int32_T temp_tmp;
    proc_control_B.temp_tmp_lm = (iy0 + proc_control_B.k_br) - 1;
    proc_control_B.temp_tmp = b_x[proc_control_B.temp_tmp_lm];
    temp_tmp = (ix0 + proc_control_B.k_br) - 1;
    proc_control_B.temp_tmp_l = b_x[temp_tmp];
    b_x[proc_control_B.temp_tmp_lm] = proc_control_B.temp_tmp * c -
      proc_control_B.temp_tmp_l * s;
    b_x[temp_tmp] = proc_control_B.temp_tmp_l * c + proc_control_B.temp_tmp * s;
  }
}

void proc_control::proc_control_eml_dlahqr(const real_T h[169], const real_T z
  [169], real_T b_h[169], int32_T *info, real_T b_z[169])
{
  boolean_T exitg1;
  std::memcpy(&b_z[0], &z[0], 169U * sizeof(real_T));
  std::memcpy(&b_h[0], &h[0], 169U * sizeof(real_T));
  *info = 0;
  proc_control_B.v[0] = 0.0;
  proc_control_B.v[1] = 0.0;
  proc_control_B.v[2] = 0.0;
  proc_control_B.L = 0;
  for (proc_control_B.i_l1 = 0; proc_control_B.i_l1 < 10; proc_control_B.i_l1++)
  {
    b_h[proc_control_B.L + 2] = 0.0;
    b_h[proc_control_B.L + 3] = 0.0;
    proc_control_B.L += 14;
  }

  b_h[142] = 0.0;
  proc_control_B.i_l1 = 12;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.i_l1 + 1 >= 1)) {
    boolean_T exitg2;
    boolean_T goto150;
    proc_control_B.L = 1;
    goto150 = false;
    proc_control_B.its = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.its < 391)) {
      boolean_T exitg3;
      proc_control_B.k_i = proc_control_B.i_l1;
      exitg3 = false;
      while ((!exitg3) && (proc_control_B.k_i + 1 > proc_control_B.L)) {
        proc_control_B.m = (proc_control_B.k_i - 1) * 13 + proc_control_B.k_i;
        proc_control_B.ba = std::abs(b_h[proc_control_B.m]);
        if (proc_control_B.ba <= 1.3027094340058323E-291) {
          exitg3 = true;
        } else {
          proc_control_B.hoffset = 13 * proc_control_B.k_i + proc_control_B.k_i;
          proc_control_B.aa = b_h[proc_control_B.hoffset];
          proc_control_B.bb = std::abs(proc_control_B.aa);
          proc_control_B.h12 = b_h[proc_control_B.m - 1];
          proc_control_B.tst = std::abs(proc_control_B.h12) + proc_control_B.bb;
          if (proc_control_B.tst == 0.0) {
            if (proc_control_B.k_i - 1 >= 1) {
              proc_control_B.tst = std::abs(b_h[((proc_control_B.k_i - 2) * 13 +
                proc_control_B.k_i) - 1]);
            }

            if (proc_control_B.k_i + 2 <= 13) {
              proc_control_B.tst += std::abs(b_h[proc_control_B.hoffset + 1]);
            }
          }

          if (proc_control_B.ba <= 2.2204460492503131E-16 * proc_control_B.tst)
          {
            proc_control_B.tst = std::abs(b_h[proc_control_B.hoffset - 1]);
            if (proc_control_B.ba > proc_control_B.tst) {
              proc_control_B.ab = proc_control_B.ba;
              proc_control_B.ba = proc_control_B.tst;
            } else {
              proc_control_B.ab = proc_control_B.tst;
            }

            proc_control_B.tst = std::abs(proc_control_B.h12 - proc_control_B.aa);
            if (proc_control_B.bb > proc_control_B.tst) {
              proc_control_B.aa = proc_control_B.bb;
              proc_control_B.bb = proc_control_B.tst;
            } else {
              proc_control_B.aa = proc_control_B.tst;
            }

            proc_control_B.tst = proc_control_B.aa + proc_control_B.ab;
            if (proc_control_B.ab / proc_control_B.tst * proc_control_B.ba <=
                std::fmax(1.3027094340058323E-291, proc_control_B.aa /
                          proc_control_B.tst * proc_control_B.bb *
                          2.2204460492503131E-16)) {
              exitg3 = true;
            } else {
              proc_control_B.k_i--;
            }
          } else {
            proc_control_B.k_i--;
          }
        }
      }

      proc_control_B.L = proc_control_B.k_i + 1;
      if (proc_control_B.k_i + 1 > 1) {
        b_h[proc_control_B.k_i + 13 * (proc_control_B.k_i - 1)] = 0.0;
      }

      if (proc_control_B.k_i + 1 >= proc_control_B.i_l1) {
        goto150 = true;
        exitg2 = true;
      } else {
        if (proc_control_B.its == 10) {
          proc_control_B.bb_tmp = 13 * proc_control_B.k_i + proc_control_B.k_i;
          proc_control_B.tst = std::abs(b_h[((proc_control_B.k_i + 1) * 13 +
            proc_control_B.k_i) + 2]) + std::abs(b_h[proc_control_B.bb_tmp + 1]);
          proc_control_B.ab = 0.75 * proc_control_B.tst +
            b_h[proc_control_B.bb_tmp];
          proc_control_B.h12 = -0.4375 * proc_control_B.tst;
          proc_control_B.aa = proc_control_B.tst;
          proc_control_B.ba = proc_control_B.ab;
        } else if (proc_control_B.its == 20) {
          proc_control_B.tst = std::abs(b_h[((proc_control_B.i_l1 - 2) * 13 +
            proc_control_B.i_l1) - 1]) + std::abs(b_h[(proc_control_B.i_l1 - 1) *
            13 + proc_control_B.i_l1]);
          proc_control_B.ab = b_h[13 * proc_control_B.i_l1 + proc_control_B.i_l1]
            + 0.75 * proc_control_B.tst;
          proc_control_B.h12 = -0.4375 * proc_control_B.tst;
          proc_control_B.aa = proc_control_B.tst;
          proc_control_B.ba = proc_control_B.ab;
        } else {
          proc_control_B.ab_tmp = (proc_control_B.i_l1 - 1) * 13 +
            proc_control_B.i_l1;
          proc_control_B.ab = b_h[proc_control_B.ab_tmp - 1];
          proc_control_B.aa = b_h[proc_control_B.ab_tmp];
          proc_control_B.h12 = b_h[(13 * proc_control_B.i_l1 +
            proc_control_B.i_l1) - 1];
          proc_control_B.ba = b_h[13 * proc_control_B.i_l1 + proc_control_B.i_l1];
        }

        proc_control_B.tst = ((std::abs(proc_control_B.ab) + std::abs
          (proc_control_B.h12)) + std::abs(proc_control_B.aa)) + std::abs
          (proc_control_B.ba);
        if (proc_control_B.tst == 0.0) {
          proc_control_B.ab = 0.0;
          proc_control_B.ba = 0.0;
          proc_control_B.bb = 0.0;
          proc_control_B.aa = 0.0;
        } else {
          proc_control_B.ab /= proc_control_B.tst;
          proc_control_B.ba /= proc_control_B.tst;
          proc_control_B.bb = (proc_control_B.ab + proc_control_B.ba) / 2.0;
          proc_control_B.ab = (proc_control_B.ab - proc_control_B.bb) *
            (proc_control_B.ba - proc_control_B.bb) - proc_control_B.h12 /
            proc_control_B.tst * (proc_control_B.aa / proc_control_B.tst);
          proc_control_B.aa = std::sqrt(std::abs(proc_control_B.ab));
          if (proc_control_B.ab >= 0.0) {
            proc_control_B.ab = proc_control_B.bb * proc_control_B.tst;
            proc_control_B.bb = proc_control_B.ab;
            proc_control_B.ba = proc_control_B.aa * proc_control_B.tst;
            proc_control_B.aa = -proc_control_B.ba;
          } else {
            proc_control_B.ab = proc_control_B.bb + proc_control_B.aa;
            proc_control_B.bb -= proc_control_B.aa;
            if (std::abs(proc_control_B.ab - proc_control_B.ba) <= std::abs
                (proc_control_B.bb - proc_control_B.ba)) {
              proc_control_B.ab *= proc_control_B.tst;
              proc_control_B.bb = proc_control_B.ab;
            } else {
              proc_control_B.bb *= proc_control_B.tst;
              proc_control_B.ab = proc_control_B.bb;
            }

            proc_control_B.ba = 0.0;
            proc_control_B.aa = 0.0;
          }
        }

        proc_control_B.m = proc_control_B.i_l1 - 2;
        exitg3 = false;
        while ((!exitg3) && (proc_control_B.m + 1 >= proc_control_B.k_i + 1)) {
          proc_control_B.bb_tmp = 13 * proc_control_B.m + proc_control_B.m;
          proc_control_B.h12 = b_h[proc_control_B.bb_tmp + 1];
          proc_control_B.tst_tmp_tmp = b_h[proc_control_B.bb_tmp];
          proc_control_B.tst_tmp = proc_control_B.tst_tmp_tmp -
            proc_control_B.bb;
          proc_control_B.tst = (std::abs(proc_control_B.tst_tmp) + std::abs
                                (proc_control_B.aa)) + std::abs
            (proc_control_B.h12);
          proc_control_B.h12 /= proc_control_B.tst;
          proc_control_B.bb_tmp = (proc_control_B.m + 1) * 13 + proc_control_B.m;
          proc_control_B.v[0] = (proc_control_B.tst_tmp / proc_control_B.tst *
            (proc_control_B.tst_tmp_tmp - proc_control_B.ab) +
            b_h[proc_control_B.bb_tmp] * proc_control_B.h12) - proc_control_B.aa
            / proc_control_B.tst * proc_control_B.ba;
          proc_control_B.tst_tmp = b_h[proc_control_B.bb_tmp + 1];
          proc_control_B.v[1] = (((proc_control_B.tst_tmp +
            proc_control_B.tst_tmp_tmp) - proc_control_B.ab) - proc_control_B.bb)
            * proc_control_B.h12;
          proc_control_B.v[2] = b_h[proc_control_B.bb_tmp + 2] *
            proc_control_B.h12;
          proc_control_B.tst = (std::abs(proc_control_B.v[0]) + std::abs
                                (proc_control_B.v[1])) + std::abs
            (proc_control_B.v[2]);
          proc_control_B.v[0] /= proc_control_B.tst;
          proc_control_B.v[1] /= proc_control_B.tst;
          proc_control_B.v[2] /= proc_control_B.tst;
          if (proc_control_B.m + 1 == proc_control_B.k_i + 1) {
            exitg3 = true;
          } else {
            proc_control_B.bb_tmp = (proc_control_B.m - 1) * 13 +
              proc_control_B.m;
            if ((std::abs(proc_control_B.v[1]) + std::abs(proc_control_B.v[2])) *
                std::abs(b_h[proc_control_B.bb_tmp]) <= ((std::abs
                  (b_h[proc_control_B.bb_tmp - 1]) + std::abs
                  (proc_control_B.tst_tmp_tmp)) + std::abs
                 (proc_control_B.tst_tmp)) * (2.2204460492503131E-16 * std::abs
                 (proc_control_B.v[0]))) {
              exitg3 = true;
            } else {
              proc_control_B.m--;
            }
          }
        }

        for (proc_control_B.bb_tmp = proc_control_B.m + 1; proc_control_B.bb_tmp
             <= proc_control_B.i_l1; proc_control_B.bb_tmp++) {
          proc_control_B.nr = (proc_control_B.i_l1 - proc_control_B.bb_tmp) + 2;
          if (proc_control_B.nr >= 3) {
            proc_control_B.nr = 3;
          }

          if (proc_control_B.bb_tmp > proc_control_B.m + 1) {
            proc_control_B.hoffset = ((proc_control_B.bb_tmp - 2) * 13 +
              proc_control_B.bb_tmp) - 2;
            for (proc_control_B.ab_tmp = 0; proc_control_B.ab_tmp <
                 proc_control_B.nr; proc_control_B.ab_tmp++) {
              proc_control_B.v[proc_control_B.ab_tmp] = b_h
                [(proc_control_B.ab_tmp + proc_control_B.hoffset) + 1];
            }
          }

          proc_control_B.ba = proc_control_B.v[0];
          proc_control_B.tst = 0.0;
          if (proc_control_B.nr > 0) {
            proc_control_B.aa = proc_control_xnrm2_p(proc_control_B.nr - 1,
              proc_control_B.v);
            if (proc_control_B.aa != 0.0) {
              proc_control_B.bb = proc_control_rt_hypotd_snf(proc_control_B.v[0],
                proc_control_B.aa);
              if (proc_control_B.v[0] >= 0.0) {
                proc_control_B.bb = -proc_control_B.bb;
              }

              if (std::abs(proc_control_B.bb) < 1.0020841800044864E-292) {
                proc_control_B.hoffset = -1;
                do {
                  proc_control_B.hoffset++;
                  for (proc_control_B.j_l = 2; proc_control_B.j_l <=
                       proc_control_B.nr; proc_control_B.j_l++) {
                    proc_control_B.v[proc_control_B.j_l - 1] *=
                      9.9792015476736E+291;
                  }

                  proc_control_B.bb *= 9.9792015476736E+291;
                  proc_control_B.ba *= 9.9792015476736E+291;
                } while ((std::abs(proc_control_B.bb) < 1.0020841800044864E-292)
                         && (proc_control_B.hoffset + 1 < 20));

                proc_control_B.bb = proc_control_rt_hypotd_snf(proc_control_B.ba,
                  proc_control_xnrm2_p(proc_control_B.nr - 1, proc_control_B.v));
                if (proc_control_B.ba >= 0.0) {
                  proc_control_B.bb = -proc_control_B.bb;
                }

                proc_control_B.tst = (proc_control_B.bb - proc_control_B.ba) /
                  proc_control_B.bb;
                proc_control_B.ba = 1.0 / (proc_control_B.ba - proc_control_B.bb);
                for (proc_control_B.j_l = 2; proc_control_B.j_l <=
                     proc_control_B.nr; proc_control_B.j_l++) {
                  proc_control_B.v[proc_control_B.j_l - 1] *= proc_control_B.ba;
                }

                for (proc_control_B.j_l = 0; proc_control_B.j_l <=
                     proc_control_B.hoffset; proc_control_B.j_l++) {
                  proc_control_B.bb *= 1.0020841800044864E-292;
                }

                proc_control_B.ba = proc_control_B.bb;
              } else {
                proc_control_B.tst = (proc_control_B.bb - proc_control_B.v[0]) /
                  proc_control_B.bb;
                proc_control_B.ba = 1.0 / (proc_control_B.v[0] -
                  proc_control_B.bb);
                for (proc_control_B.j_l = 2; proc_control_B.j_l <=
                     proc_control_B.nr; proc_control_B.j_l++) {
                  proc_control_B.v[proc_control_B.j_l - 1] *= proc_control_B.ba;
                }

                proc_control_B.ba = proc_control_B.bb;
              }
            }
          }

          proc_control_B.v[0] = proc_control_B.ba;
          if (proc_control_B.bb_tmp > proc_control_B.m + 1) {
            proc_control_B.hoffset = (proc_control_B.bb_tmp - 2) * 13 +
              proc_control_B.bb_tmp;
            b_h[proc_control_B.hoffset - 1] = proc_control_B.ba;
            b_h[proc_control_B.hoffset] = 0.0;
            if (proc_control_B.bb_tmp < proc_control_B.i_l1) {
              b_h[proc_control_B.hoffset + 1] = 0.0;
            }
          } else if (proc_control_B.m + 1 > proc_control_B.k_i + 1) {
            proc_control_B.hoffset = ((proc_control_B.bb_tmp - 2) * 13 +
              proc_control_B.bb_tmp) - 1;
            b_h[proc_control_B.hoffset] *= 1.0 - proc_control_B.tst;
          }

          proc_control_B.ba = proc_control_B.v[1];
          proc_control_B.bb = proc_control_B.tst * proc_control_B.v[1];
          if (proc_control_B.nr == 3) {
            proc_control_B.aa = proc_control_B.v[2];
            proc_control_B.h12 = proc_control_B.tst * proc_control_B.v[2];
            for (proc_control_B.j_l = proc_control_B.bb_tmp; proc_control_B.j_l <
                 14; proc_control_B.j_l++) {
              proc_control_B.ab_tmp = (proc_control_B.j_l - 1) * 13 +
                proc_control_B.bb_tmp;
              proc_control_B.ab_tmp_o = ((proc_control_B.j_l - 1) * 13 +
                proc_control_B.bb_tmp) - 1;
              proc_control_B.ab = (b_h[proc_control_B.ab_tmp] *
                                   proc_control_B.ba +
                                   b_h[proc_control_B.ab_tmp_o]) +
                b_h[proc_control_B.ab_tmp + 1] * proc_control_B.aa;
              b_h[proc_control_B.ab_tmp_o] -= proc_control_B.ab *
                proc_control_B.tst;
              b_h[proc_control_B.ab_tmp] -= proc_control_B.ab *
                proc_control_B.bb;
              b_h[proc_control_B.ab_tmp + 1] -= proc_control_B.ab *
                proc_control_B.h12;
            }

            if (proc_control_B.bb_tmp + 3 <= proc_control_B.i_l1 + 1) {
              proc_control_B.nr = proc_control_B.bb_tmp + 3;
            } else {
              proc_control_B.nr = proc_control_B.i_l1 + 1;
            }

            proc_control_B.nr--;
            for (proc_control_B.hoffset = 0; proc_control_B.hoffset <=
                 proc_control_B.nr; proc_control_B.hoffset++) {
              proc_control_B.ab_tmp = (proc_control_B.bb_tmp - 1) * 13 +
                proc_control_B.hoffset;
              proc_control_B.tst_tmp_tmp = b_h[proc_control_B.ab_tmp];
              proc_control_B.ab_tmp_o = 13 * proc_control_B.bb_tmp +
                proc_control_B.hoffset;
              proc_control_B.j_l = (proc_control_B.bb_tmp + 1) * 13 +
                proc_control_B.hoffset;
              proc_control_B.ab = (b_h[proc_control_B.ab_tmp_o] *
                                   proc_control_B.ba +
                                   proc_control_B.tst_tmp_tmp) +
                b_h[proc_control_B.j_l] * proc_control_B.aa;
              b_h[proc_control_B.ab_tmp] = proc_control_B.tst_tmp_tmp -
                proc_control_B.ab * proc_control_B.tst;
              b_h[proc_control_B.ab_tmp_o] -= proc_control_B.ab *
                proc_control_B.bb;
              b_h[proc_control_B.j_l] -= proc_control_B.ab * proc_control_B.h12;
            }

            for (proc_control_B.nr = 0; proc_control_B.nr < 13;
                 proc_control_B.nr++) {
              proc_control_B.ab_tmp = (proc_control_B.bb_tmp - 1) * 13 +
                proc_control_B.nr;
              proc_control_B.tst_tmp_tmp = b_z[proc_control_B.ab_tmp];
              proc_control_B.ab_tmp_o = 13 * proc_control_B.bb_tmp +
                proc_control_B.nr;
              proc_control_B.j_l = (proc_control_B.bb_tmp + 1) * 13 +
                proc_control_B.nr;
              proc_control_B.ab = (b_z[proc_control_B.ab_tmp_o] *
                                   proc_control_B.ba +
                                   proc_control_B.tst_tmp_tmp) +
                b_z[proc_control_B.j_l] * proc_control_B.aa;
              b_z[proc_control_B.ab_tmp] = proc_control_B.tst_tmp_tmp -
                proc_control_B.ab * proc_control_B.tst;
              b_z[proc_control_B.ab_tmp_o] -= proc_control_B.ab *
                proc_control_B.bb;
              b_z[proc_control_B.j_l] -= proc_control_B.ab * proc_control_B.h12;
            }
          } else if (proc_control_B.nr == 2) {
            for (proc_control_B.j_l = proc_control_B.bb_tmp; proc_control_B.j_l <
                 14; proc_control_B.j_l++) {
              proc_control_B.ab_tmp = (proc_control_B.j_l - 1) * 13 +
                proc_control_B.bb_tmp;
              proc_control_B.tst_tmp_tmp = b_h[proc_control_B.ab_tmp - 1];
              proc_control_B.ab = b_h[proc_control_B.ab_tmp] * proc_control_B.ba
                + proc_control_B.tst_tmp_tmp;
              b_h[proc_control_B.ab_tmp - 1] = proc_control_B.tst_tmp_tmp -
                proc_control_B.ab * proc_control_B.tst;
              b_h[proc_control_B.ab_tmp] -= proc_control_B.ab *
                proc_control_B.bb;
            }

            for (proc_control_B.nr = 0; proc_control_B.nr <= proc_control_B.i_l1;
                 proc_control_B.nr++) {
              proc_control_B.ab_tmp = (proc_control_B.bb_tmp - 1) * 13 +
                proc_control_B.nr;
              proc_control_B.tst_tmp_tmp = b_h[proc_control_B.ab_tmp];
              proc_control_B.ab_tmp_o = 13 * proc_control_B.bb_tmp +
                proc_control_B.nr;
              proc_control_B.ab = b_h[proc_control_B.ab_tmp_o] *
                proc_control_B.ba + proc_control_B.tst_tmp_tmp;
              b_h[proc_control_B.ab_tmp] = proc_control_B.tst_tmp_tmp -
                proc_control_B.ab * proc_control_B.tst;
              b_h[proc_control_B.ab_tmp_o] -= proc_control_B.ab *
                proc_control_B.bb;
            }

            for (proc_control_B.nr = 0; proc_control_B.nr < 13;
                 proc_control_B.nr++) {
              proc_control_B.ab = b_z[(proc_control_B.bb_tmp - 1) * 13 +
                proc_control_B.nr] + b_z[13 * proc_control_B.bb_tmp +
                proc_control_B.nr] * proc_control_B.ba;
              proc_control_B.hoffset = (proc_control_B.bb_tmp - 1) * 13 +
                proc_control_B.nr;
              b_z[proc_control_B.hoffset] -= proc_control_B.ab *
                proc_control_B.tst;
              proc_control_B.hoffset = 13 * proc_control_B.bb_tmp +
                proc_control_B.nr;
              b_z[proc_control_B.hoffset] -= proc_control_B.ab *
                proc_control_B.bb;
            }
          }
        }

        proc_control_B.its++;
      }
    }

    if (!goto150) {
      *info = proc_control_B.i_l1 + 1;
      exitg1 = true;
    } else {
      if ((proc_control_B.i_l1 + 1 != proc_control_B.L) && (proc_control_B.L ==
           proc_control_B.i_l1)) {
        proc_control_xdlanv2(b_h[(proc_control_B.i_l1 + 13 *
          (proc_control_B.i_l1 - 1)) - 1], b_h[(proc_control_B.i_l1 + 13 *
          proc_control_B.i_l1) - 1], b_h[proc_control_B.i_l1 + 13 *
                             (proc_control_B.i_l1 - 1)], b_h[proc_control_B.i_l1
                             + 13 * proc_control_B.i_l1], &proc_control_B.tst,
                             &proc_control_B.ba, &proc_control_B.bb,
                             &proc_control_B.ab, &b_h[(proc_control_B.i_l1 + 13 *
          (proc_control_B.i_l1 - 1)) - 1], &proc_control_B.aa,
                             &proc_control_B.h12, &proc_control_B.tst_tmp_tmp,
                             &proc_control_B.tst_tmp, &proc_control_B.sn);
        proc_control_B.hoffset = 13 * proc_control_B.i_l1 + proc_control_B.i_l1;
        b_h[proc_control_B.hoffset - 1] = proc_control_B.aa;
        proc_control_B.its = (proc_control_B.i_l1 - 1) * 13;
        b_h[proc_control_B.i_l1 + proc_control_B.its] = proc_control_B.h12;
        b_h[proc_control_B.hoffset] = proc_control_B.tst_tmp_tmp;
        if (proc_control_B.i_l1 + 1 < 13) {
          proc_control_B.hoffset = (proc_control_B.i_l1 + 1) * 13 +
            proc_control_B.i_l1;
          std::memcpy(&proc_control_B.b_h[0], &b_h[0], 169U * sizeof(real_T));
          proc_control_xrot(12 - proc_control_B.i_l1, proc_control_B.b_h,
                            proc_control_B.hoffset, proc_control_B.hoffset + 1,
                            proc_control_B.tst_tmp, proc_control_B.sn, b_h);
        }

        proc_control_B.hoffset = proc_control_B.i_l1 * 13 + 1;
        std::memcpy(&proc_control_B.b_h[0], &b_h[0], 169U * sizeof(real_T));
        proc_control_xrot_p(proc_control_B.i_l1 - 1, proc_control_B.b_h,
                            proc_control_B.its + 1, proc_control_B.hoffset,
                            proc_control_B.tst_tmp, proc_control_B.sn, b_h);
        std::memcpy(&proc_control_B.b_h[0], &b_z[0], 169U * sizeof(real_T));
        proc_control_xrot_pr(proc_control_B.b_h, proc_control_B.its + 1,
                             proc_control_B.hoffset, proc_control_B.tst_tmp,
                             proc_control_B.sn, b_z);
      }

      proc_control_B.i_l1 = proc_control_B.L - 2;
    }
  }
}

void proc_control::proc_control_schur(const real_T A[169], real_T V[169], real_T
  T[169])
{
  boolean_T p;
  p = true;
  for (proc_control_B.lastv = 0; proc_control_B.lastv < 169;
       proc_control_B.lastv++) {
    if (p) {
      proc_control_B.c_fn = A[proc_control_B.lastv];
      if ((!std::isinf(proc_control_B.c_fn)) && (!std::isnan(proc_control_B.c_fn)))
      {
      } else {
        p = false;
      }
    } else {
      p = false;
    }
  }

  if (!p) {
    for (proc_control_B.i_jk = 0; proc_control_B.i_jk < 169; proc_control_B.i_jk
         ++) {
      V[proc_control_B.i_jk] = (rtNaN);
    }

    proc_control_B.ia_l = 2;
    proc_control_B.itau_b = 0;
    for (proc_control_B.lastv = 0; proc_control_B.lastv < 12;
         proc_control_B.lastv++) {
      if (proc_control_B.ia_l <= 13) {
        std::memset(&V[(proc_control_B.ia_l + proc_control_B.itau_b) + -1], 0,
                    (((proc_control_B.itau_b - proc_control_B.ia_l) -
                      proc_control_B.itau_b) + 14) * sizeof(real_T));
      }

      proc_control_B.ia_l++;
      proc_control_B.itau_b += 13;
    }

    for (proc_control_B.i_jk = 0; proc_control_B.i_jk < 169; proc_control_B.i_jk
         ++) {
      T[proc_control_B.i_jk] = (rtNaN);
    }
  } else {
    proc_control_xgehrd(A, proc_control_B.b_A_m, proc_control_B.tau_dd);
    std::memcpy(&V[0], &proc_control_B.b_A_m[0], 169U * sizeof(real_T));
    for (proc_control_B.itau_b = 11; proc_control_B.itau_b >= 0;
         proc_control_B.itau_b--) {
      proc_control_B.ia_l = (proc_control_B.itau_b + 1) * 13;
      for (proc_control_B.i_jk = 0; proc_control_B.i_jk <= proc_control_B.itau_b;
           proc_control_B.i_jk++) {
        V[proc_control_B.ia_l + proc_control_B.i_jk] = 0.0;
      }

      for (proc_control_B.iaii = proc_control_B.itau_b + 3; proc_control_B.iaii <
           14; proc_control_B.iaii++) {
        proc_control_B.lastv = proc_control_B.ia_l + proc_control_B.iaii;
        V[proc_control_B.lastv - 1] = V[proc_control_B.lastv - 14];
      }
    }

    proc_control_B.itau_b = 11;
    std::memset(&V[0], 0, 13U * sizeof(real_T));
    std::memset(&proc_control_B.work_i[0], 0, 13U * sizeof(real_T));
    V[0] = 1.0;
    for (proc_control_B.i_jk = 11; proc_control_B.i_jk >= 0; proc_control_B.i_jk
         --) {
      proc_control_B.iaii = (proc_control_B.i_jk * 13 + proc_control_B.i_jk) +
        28;
      if (proc_control_B.i_jk + 1 < 12) {
        V[proc_control_B.iaii - 14] = 1.0;
        if (proc_control_B.tau_dd[proc_control_B.itau_b] != 0.0) {
          boolean_T exitg2;
          proc_control_B.lastv = 12 - proc_control_B.i_jk;
          proc_control_B.ia_l = (proc_control_B.iaii - proc_control_B.i_jk) - 3;
          while ((proc_control_B.lastv > 0) && (V[proc_control_B.ia_l] == 0.0))
          {
            proc_control_B.lastv--;
            proc_control_B.ia_l--;
          }

          proc_control_B.lastc = 11 - proc_control_B.i_jk;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.lastc > 0)) {
            int32_T exitg1;
            proc_control_B.coltop_p = (proc_control_B.lastc - 1) * 13 +
              proc_control_B.iaii;
            proc_control_B.ia_l = proc_control_B.coltop_p;
            do {
              exitg1 = 0;
              if (proc_control_B.ia_l <= (proc_control_B.coltop_p +
                   proc_control_B.lastv) - 1) {
                if (V[proc_control_B.ia_l - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  proc_control_B.ia_l++;
                }
              } else {
                proc_control_B.lastc--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          proc_control_B.lastv = 0;
          proc_control_B.lastc = 0;
        }

        if (proc_control_B.lastv > 0) {
          if (proc_control_B.lastc != 0) {
            std::memset(&proc_control_B.work_i[0], 0, proc_control_B.lastc *
                        sizeof(real_T));
            proc_control_B.coltop_p = (proc_control_B.lastc - 1) * 13 +
              proc_control_B.iaii;
            for (proc_control_B.iac = proc_control_B.iaii; proc_control_B.iac <=
                 proc_control_B.coltop_p; proc_control_B.iac += 13) {
              proc_control_B.c_fn = 0.0;
              proc_control_B.d_f = proc_control_B.iac + proc_control_B.lastv;
              for (proc_control_B.ia_l = proc_control_B.iac; proc_control_B.ia_l
                   < proc_control_B.d_f; proc_control_B.ia_l++) {
                proc_control_B.c_fn += V[((proc_control_B.iaii +
                  proc_control_B.ia_l) - proc_control_B.iac) - 14] *
                  V[proc_control_B.ia_l - 1];
              }

              proc_control_B.ia_l = div_nde_s32_floor(proc_control_B.iac -
                proc_control_B.iaii, 13);
              proc_control_B.work_i[proc_control_B.ia_l] += proc_control_B.c_fn;
            }
          }

          std::memcpy(&proc_control_B.V[0], &V[0], 169U * sizeof(real_T));
          proc_control_xgerc(proc_control_B.lastv, proc_control_B.lastc,
                             -proc_control_B.tau_dd[proc_control_B.itau_b],
                             proc_control_B.iaii - 13, proc_control_B.work_i,
                             proc_control_B.V, proc_control_B.iaii, V);
        }

        proc_control_B.coltop_p = proc_control_B.iaii - proc_control_B.i_jk;
        for (proc_control_B.ia_l = proc_control_B.iaii - 12; proc_control_B.ia_l
             <= proc_control_B.coltop_p - 2; proc_control_B.ia_l++) {
          V[proc_control_B.ia_l - 1] *=
            -proc_control_B.tau_dd[proc_control_B.itau_b];
        }
      }

      V[proc_control_B.iaii - 14] = 1.0 -
        proc_control_B.tau_dd[proc_control_B.itau_b];
      proc_control_B.coltop_p = proc_control_B.i_jk - 1;
      for (proc_control_B.lastv = 0; proc_control_B.lastv <=
           proc_control_B.coltop_p; proc_control_B.lastv++) {
        V[(proc_control_B.iaii - proc_control_B.lastv) - 15] = 0.0;
      }

      proc_control_B.itau_b--;
    }

    std::memcpy(&proc_control_B.V[0], &V[0], 169U * sizeof(real_T));
    proc_control_eml_dlahqr(proc_control_B.b_A_m, proc_control_B.V, T,
      &proc_control_B.lastv, V);
    proc_control_B.ia_l = 4;
    proc_control_B.itau_b = 0;
    for (proc_control_B.lastv = 0; proc_control_B.lastv < 10;
         proc_control_B.lastv++) {
      if (proc_control_B.ia_l <= 13) {
        std::memset(&T[(proc_control_B.ia_l + proc_control_B.itau_b) + -1], 0,
                    (((proc_control_B.itau_b - proc_control_B.ia_l) -
                      proc_control_B.itau_b) + 14) * sizeof(real_T));
      }

      proc_control_B.ia_l++;
      proc_control_B.itau_b += 13;
    }
  }
}

void proc_control::proc_control_expm(real_T A[169], real_T F[169])
{
  boolean_T recomputeDiags;
  recomputeDiags = true;
  for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 169;
       proc_control_B.b_k_c++) {
    if (recomputeDiags) {
      proc_control_B.x_om = A[proc_control_B.b_k_c];
      if ((!std::isinf(proc_control_B.x_om)) && (!std::isnan(proc_control_B.x_om)))
      {
      } else {
        recomputeDiags = false;
      }
    } else {
      recomputeDiags = false;
    }
  }

  if (!recomputeDiags) {
    for (proc_control_B.i_mw = 0; proc_control_B.i_mw < 169; proc_control_B.i_mw
         ++) {
      F[proc_control_B.i_mw] = (rtNaN);
    }
  } else {
    int32_T exitg1;
    boolean_T exitg2;
    proc_control_B.b_k_c = 1;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.b_k_c - 1 < 13)) {
      proc_control_B.i_mw = 1;
      do {
        exitg1 = 0;
        if (proc_control_B.i_mw - 1 < 13) {
          if ((proc_control_B.i_mw != proc_control_B.b_k_c) && (!(A
                [((proc_control_B.b_k_c - 1) * 13 + proc_control_B.i_mw) - 1] ==
                0.0))) {
            recomputeDiags = false;
            exitg1 = 1;
          } else {
            proc_control_B.i_mw++;
          }
        } else {
          proc_control_B.b_k_c++;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    if (recomputeDiags) {
      std::memset(&F[0], 0, 169U * sizeof(real_T));
      proc_control_B.eint = 0;
      for (proc_control_B.i_mw = 0; proc_control_B.i_mw < 13;
           proc_control_B.i_mw++) {
        F[proc_control_B.eint] = std::exp(A[proc_control_B.eint]);
        proc_control_B.eint += 14;
      }
    } else {
      recomputeDiags = true;
      proc_control_B.b_k_c = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.b_k_c < 13)) {
        proc_control_B.i_mw = 0;
        do {
          exitg1 = 0;
          if (proc_control_B.i_mw <= proc_control_B.b_k_c) {
            if (!(A[13 * proc_control_B.b_k_c + proc_control_B.i_mw] == A[13 *
                  proc_control_B.i_mw + proc_control_B.b_k_c])) {
              recomputeDiags = false;
              exitg1 = 1;
            } else {
              proc_control_B.i_mw++;
            }
          } else {
            proc_control_B.b_k_c++;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }

      if (recomputeDiags) {
        proc_control_schur(A, proc_control_B.b_A2, proc_control_B.b_A4_c);
        proc_control_B.i_mw = 0;
        proc_control_B.b_k_oc = 0;
        for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 13;
             proc_control_B.b_k_c++) {
          proc_control_B.exptj = std::exp
            (proc_control_B.b_A4_c[proc_control_B.i_mw]);
          for (proc_control_B.eint = 0; proc_control_B.eint < 13;
               proc_control_B.eint++) {
            proc_control_B.b_A2_tmp = proc_control_B.eint
              + proc_control_B.b_k_oc;
            F[proc_control_B.b_A2_tmp] =
              proc_control_B.b_A2[proc_control_B.b_A2_tmp] *
              proc_control_B.exptj;
          }

          proc_control_B.i_mw += 14;
          proc_control_B.b_k_oc += 13;
        }

        proc_control_B.i_mw = 0;
        for (proc_control_B.b_k_oc = 0; proc_control_B.b_k_oc < 13;
             proc_control_B.b_k_oc++) {
          std::memset(&proc_control_B.b_A4[proc_control_B.i_mw], 0, 13U * sizeof
                      (real_T));
          proc_control_B.i_mw += 13;
        }

        proc_control_B.i_mw = 0;
        for (proc_control_B.i6 = 0; proc_control_B.i6 < 13; proc_control_B.i6++)
        {
          proc_control_B.i5 = 0;
          for (proc_control_B.b_k_oc = 0; proc_control_B.b_k_oc < 13;
               proc_control_B.b_k_oc++) {
            for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 13;
                 proc_control_B.b_k_c++) {
              proc_control_B.b_A2_tmp = proc_control_B.b_k_c + proc_control_B.i5;
              proc_control_B.b_A4[proc_control_B.b_A2_tmp] +=
                F[proc_control_B.b_k_c + proc_control_B.i_mw] *
                proc_control_B.b_A2[proc_control_B.b_k_oc + proc_control_B.i_mw];
            }

            proc_control_B.i5 += 13;
          }

          proc_control_B.i_mw += 13;
        }

        std::memcpy(&F[0], &proc_control_B.b_A4[0], 169U * sizeof(real_T));
        proc_control_B.i_mw = 0;
        for (proc_control_B.b_k_oc = 0; proc_control_B.b_k_oc < 13;
             proc_control_B.b_k_oc++) {
          proc_control_B.b_k_c = 0;
          for (proc_control_B.i6 = 0; proc_control_B.i6 < 13; proc_control_B.i6
               ++) {
            proc_control_B.b_A2_tmp = proc_control_B.i6 + proc_control_B.i_mw;
            proc_control_B.b_A4[proc_control_B.b_A2_tmp] =
              (F[proc_control_B.b_k_c + proc_control_B.b_k_oc] +
               F[proc_control_B.b_A2_tmp]) / 2.0;
            proc_control_B.b_k_c += 13;
          }

          proc_control_B.i_mw += 13;
        }

        std::memcpy(&F[0], &proc_control_B.b_A4[0], 169U * sizeof(real_T));
      } else {
        boolean_T guard1{ false };

        boolean_T guard2{ false };

        boolean_T guard3{ false };

        boolean_T guard4{ false };

        recomputeDiags = true;
        proc_control_B.j_d = 3;
        while (recomputeDiags && (proc_control_B.j_d <= 13)) {
          proc_control_B.i_mw = proc_control_B.j_d;
          while (recomputeDiags && (proc_control_B.i_mw <= 13)) {
            recomputeDiags = (A[((proc_control_B.j_d - 3) * 13 +
                                 proc_control_B.i_mw) - 1] == 0.0);
            proc_control_B.i_mw++;
          }

          proc_control_B.j_d++;
        }

        if (recomputeDiags) {
          proc_control_B.b_k_c = 1;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.b_k_c - 1 < 12)) {
            proc_control_B.i_mw = (proc_control_B.b_k_c - 1) * 13 +
              proc_control_B.b_k_c;
            proc_control_B.exptj = A[proc_control_B.i_mw];
            if (proc_control_B.exptj != 0.0) {
              if ((proc_control_B.b_k_c != 12) && (A[(13 * proc_control_B.b_k_c
                    + proc_control_B.b_k_c) + 1] != 0.0)) {
                recomputeDiags = false;
                exitg2 = true;
              } else {
                proc_control_B.b_k_oc = 13 * proc_control_B.b_k_c +
                  proc_control_B.b_k_c;
                if (A[proc_control_B.i_mw - 1] != A[proc_control_B.b_k_oc]) {
                  recomputeDiags = false;
                  exitg2 = true;
                } else {
                  proc_control_B.x_om = A[proc_control_B.b_k_oc - 1];
                  if (!std::isnan(proc_control_B.exptj)) {
                    if (proc_control_B.exptj < 0.0) {
                      proc_control_B.exptj = -1.0;
                    } else {
                      proc_control_B.exptj = (proc_control_B.exptj > 0.0);
                    }
                  }

                  if (!std::isnan(proc_control_B.x_om)) {
                    if (proc_control_B.x_om < 0.0) {
                      proc_control_B.x_om = -1.0;
                    } else {
                      proc_control_B.x_om = (proc_control_B.x_om > 0.0);
                    }
                  }

                  if (proc_control_B.exptj * proc_control_B.x_om != -1.0) {
                    recomputeDiags = false;
                    exitg2 = true;
                  } else {
                    proc_control_B.b_k_c++;
                  }
                }
              }
            } else {
              proc_control_B.b_k_c++;
            }
          }
        }

        proc_control_B.exptj = 0.0;
        for (proc_control_B.i_mw = 0; proc_control_B.i_mw < 13;
             proc_control_B.i_mw++) {
          std::memset(&proc_control_B.b_A2[proc_control_B.i_mw * 13], 0, 13U *
                      sizeof(real_T));
          for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 13;
               proc_control_B.b_k_c++) {
            for (proc_control_B.b_k_oc = 0; proc_control_B.b_k_oc < 13;
                 proc_control_B.b_k_oc++) {
              proc_control_B.b_A2_tmp = 13 * proc_control_B.i_mw +
                proc_control_B.b_k_oc;
              proc_control_B.b_A2[proc_control_B.b_A2_tmp] += A[13 *
                proc_control_B.b_k_c + proc_control_B.b_k_oc] * A[13 *
                proc_control_B.i_mw + proc_control_B.b_k_c];
            }
          }

          std::memset(&proc_control_B.b_A4[proc_control_B.i_mw * 13], 0, 13U *
                      sizeof(real_T));
        }

        proc_control_B.i_mw = 0;
        for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 13;
             proc_control_B.b_k_c++) {
          proc_control_B.i6 = 0;
          for (proc_control_B.i5 = 0; proc_control_B.i5 < 13; proc_control_B.i5
               ++) {
            for (proc_control_B.b_k_oc = 0; proc_control_B.b_k_oc < 13;
                 proc_control_B.b_k_oc++) {
              proc_control_B.b_A2_tmp = proc_control_B.b_k_oc +
                proc_control_B.i_mw;
              proc_control_B.b_A4[proc_control_B.b_A2_tmp] +=
                proc_control_B.b_A2[proc_control_B.b_k_oc + proc_control_B.i6] *
                proc_control_B.b_A2[proc_control_B.i5 + proc_control_B.i_mw];
            }

            proc_control_B.b_A6[proc_control_B.i5 + proc_control_B.i_mw] = 0.0;
            proc_control_B.i6 += 13;
          }

          proc_control_B.i_mw += 13;
        }

        proc_control_B.i_mw = 0;
        for (proc_control_B.b_k_oc = 0; proc_control_B.b_k_oc < 13;
             proc_control_B.b_k_oc++) {
          proc_control_B.b_k_c = 0;
          for (proc_control_B.i6 = 0; proc_control_B.i6 < 13; proc_control_B.i6
               ++) {
            for (proc_control_B.i5 = 0; proc_control_B.i5 < 13;
                 proc_control_B.i5++) {
              proc_control_B.b_A2_tmp = proc_control_B.i5 + proc_control_B.i_mw;
              proc_control_B.b_A6[proc_control_B.b_A2_tmp] +=
                proc_control_B.b_A4[proc_control_B.i5 + proc_control_B.b_k_c] *
                proc_control_B.b_A2[proc_control_B.i6 + proc_control_B.i_mw];
            }

            proc_control_B.b_k_c += 13;
          }

          proc_control_B.i_mw += 13;
        }

        proc_control_B.d6_g = proc_control_rt_powd_snf(proc_control_norm
          (proc_control_B.b_A6), 0.16666666666666666);
        proc_control_B.eta1 = std::fmax(proc_control_rt_powd_snf
          (proc_control_norm(proc_control_B.b_A4), 0.25), proc_control_B.d6_g);
        guard1 = false;
        guard2 = false;
        guard3 = false;
        guard4 = false;
        if (proc_control_B.eta1 <= 0.01495585217958292) {
          for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 169;
               proc_control_B.b_k_c++) {
            proc_control_B.y_m[proc_control_B.b_k_c] = std::abs
              (A[proc_control_B.b_k_c]);
            proc_control_B.dv10[proc_control_B.b_k_c] = 0.19285012468241128 *
              proc_control_B.y_m[proc_control_B.b_k_c];
          }

          proc_control_mpower(proc_control_B.dv10, 7.0, proc_control_B.y_m);
          proc_control_B.x_om = proc_control_log2(proc_control_norm
            (proc_control_B.y_m) / proc_control_norm(A) * 2.0 /
            2.2204460492503131E-16) / 6.0;
          if (std::fmax(std::ceil(proc_control_B.x_om), 0.0) == 0.0) {
            proc_control_B.eint = 3;
          } else {
            guard4 = true;
          }
        } else {
          guard4 = true;
        }

        if (guard4) {
          if (proc_control_B.eta1 <= 0.253939833006323) {
            for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 169;
                 proc_control_B.b_k_c++) {
              proc_control_B.y_m[proc_control_B.b_k_c] = std::abs
                (A[proc_control_B.b_k_c]);
              proc_control_B.dv10[proc_control_B.b_k_c] = 0.12321872304378752 *
                proc_control_B.y_m[proc_control_B.b_k_c];
            }

            proc_control_mpower(proc_control_B.dv10, 11.0, proc_control_B.y_m);
            proc_control_B.x_om = proc_control_log2(proc_control_norm
              (proc_control_B.y_m) / proc_control_norm(A) * 2.0 /
              2.2204460492503131E-16) / 10.0;
            if (std::fmax(std::ceil(proc_control_B.x_om), 0.0) == 0.0) {
              proc_control_B.eint = 5;
            } else {
              guard3 = true;
            }
          } else {
            guard3 = true;
          }
        }

        if (guard3) {
          proc_control_mpower(proc_control_B.b_A4, 2.0, proc_control_B.dv10);
          proc_control_B.eta1 = proc_control_rt_powd_snf(proc_control_norm
            (proc_control_B.dv10), 0.125);
          proc_control_B.d6_g = std::fmax(proc_control_B.d6_g,
            proc_control_B.eta1);
          if (proc_control_B.d6_g <= 0.95041789961629319) {
            for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 169;
                 proc_control_B.b_k_c++) {
              proc_control_B.y_m[proc_control_B.b_k_c] = std::abs
                (A[proc_control_B.b_k_c]);
              proc_control_B.dv10[proc_control_B.b_k_c] = 0.090475336558796943 *
                proc_control_B.y_m[proc_control_B.b_k_c];
            }

            proc_control_mpower(proc_control_B.dv10, 15.0, proc_control_B.y_m);
            proc_control_B.x_om = proc_control_log2(proc_control_norm
              (proc_control_B.y_m) / proc_control_norm(A) * 2.0 /
              2.2204460492503131E-16) / 14.0;
            if (std::fmax(std::ceil(proc_control_B.x_om), 0.0) == 0.0) {
              proc_control_B.eint = 7;
            } else {
              guard2 = true;
            }
          } else {
            guard2 = true;
          }
        }

        if (guard2) {
          if (proc_control_B.d6_g <= 2.097847961257068) {
            for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 169;
                 proc_control_B.b_k_c++) {
              proc_control_B.y_m[proc_control_B.b_k_c] = std::abs
                (A[proc_control_B.b_k_c]);
              proc_control_B.dv10[proc_control_B.b_k_c] = 0.071467735648795785 *
                proc_control_B.y_m[proc_control_B.b_k_c];
            }

            proc_control_mpower(proc_control_B.dv10, 19.0, proc_control_B.y_m);
            proc_control_B.x_om = proc_control_log2(proc_control_norm
              (proc_control_B.y_m) / proc_control_norm(A) * 2.0 /
              2.2204460492503131E-16) / 18.0;
            if (std::fmax(std::ceil(proc_control_B.x_om), 0.0) == 0.0) {
              proc_control_B.eint = 9;
            } else {
              guard1 = true;
            }
          } else {
            guard1 = true;
          }
        }

        if (guard1) {
          for (proc_control_B.i_mw = 0; proc_control_B.i_mw < 13;
               proc_control_B.i_mw++) {
            std::memset(&proc_control_B.b_A4_c[proc_control_B.i_mw * 13], 0, 13U
                        * sizeof(real_T));
            for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 13;
                 proc_control_B.b_k_c++) {
              for (proc_control_B.b_k_oc = 0; proc_control_B.b_k_oc < 13;
                   proc_control_B.b_k_oc++) {
                proc_control_B.b_A2_tmp = 13 * proc_control_B.i_mw +
                  proc_control_B.b_k_oc;
                proc_control_B.b_A4_c[proc_control_B.b_A2_tmp] +=
                  proc_control_B.b_A4[13 * proc_control_B.b_k_c +
                  proc_control_B.b_k_oc] * proc_control_B.b_A6[13 *
                  proc_control_B.i_mw + proc_control_B.b_k_c];
              }
            }
          }

          proc_control_B.x_om = proc_control_log2(std::fmin(proc_control_B.d6_g,
            std::fmax(proc_control_B.eta1, proc_control_rt_powd_snf
                      (proc_control_norm(proc_control_B.b_A4_c), 0.1))) /
            5.3719203511481517);
          proc_control_B.exptj = std::fmax(std::ceil(proc_control_B.x_om), 0.0);
          proc_control_B.x_om = proc_control_rt_powd_snf(2.0,
            proc_control_B.exptj);
          for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 169;
               proc_control_B.b_k_c++) {
            proc_control_B.b_A4_c[proc_control_B.b_k_c] = A[proc_control_B.b_k_c]
              / proc_control_B.x_om;
            proc_control_B.y_m[proc_control_B.b_k_c] = std::abs
              (proc_control_B.b_A4_c[proc_control_B.b_k_c]);
            proc_control_B.dv10[proc_control_B.b_k_c] = 0.05031554467093536 *
              proc_control_B.y_m[proc_control_B.b_k_c];
          }

          proc_control_mpower(proc_control_B.dv10, 27.0, proc_control_B.y_m);
          proc_control_B.x_om = proc_control_log2(proc_control_norm
            (proc_control_B.y_m) / proc_control_norm(proc_control_B.b_A4_c) *
            2.0 / 2.2204460492503131E-16) / 26.0;
          proc_control_B.exptj += std::fmax(std::ceil(proc_control_B.x_om), 0.0);
          if (std::isinf(proc_control_B.exptj)) {
            proc_control_B.x_om = proc_control_norm(A) / 5.3719203511481517;
            if ((!std::isinf(proc_control_B.x_om)) && (!std::isnan
                 (proc_control_B.x_om))) {
              proc_control_B.x_om = frexp(proc_control_B.x_om,
                &proc_control_B.eint);
              proc_control_B.exptj = proc_control_B.eint;
            } else {
              proc_control_B.exptj = 0.0;
            }

            if (proc_control_B.x_om == 0.5) {
              proc_control_B.exptj--;
            }
          }

          proc_control_B.eint = 13;
        }

        if (proc_control_B.exptj != 0.0) {
          proc_control_B.x_om = proc_control_rt_powd_snf(2.0,
            proc_control_B.exptj);
          for (proc_control_B.i_mw = 0; proc_control_B.i_mw < 169;
               proc_control_B.i_mw++) {
            A[proc_control_B.i_mw] /= proc_control_B.x_om;
          }

          proc_control_B.x_om = proc_control_rt_powd_snf(2.0, 2.0 *
            proc_control_B.exptj);
          for (proc_control_B.i_mw = 0; proc_control_B.i_mw < 169;
               proc_control_B.i_mw++) {
            proc_control_B.b_A2[proc_control_B.i_mw] /= proc_control_B.x_om;
          }

          proc_control_B.x_om = proc_control_rt_powd_snf(2.0, 4.0 *
            proc_control_B.exptj);
          for (proc_control_B.i_mw = 0; proc_control_B.i_mw < 169;
               proc_control_B.i_mw++) {
            proc_control_B.b_A4[proc_control_B.i_mw] /= proc_control_B.x_om;
          }

          proc_control_B.x_om = proc_control_rt_powd_snf(2.0, 6.0 *
            proc_control_B.exptj);
          for (proc_control_B.i_mw = 0; proc_control_B.i_mw < 169;
               proc_control_B.i_mw++) {
            proc_control_B.b_A6[proc_control_B.i_mw] /= proc_control_B.x_om;
          }
        }

        if (recomputeDiags) {
          for (proc_control_B.i_mw = 0; proc_control_B.i_mw < 12;
               proc_control_B.i_mw++) {
            proc_control_B.blockFormat[proc_control_B.i_mw] = 0;
          }

          proc_control_B.j_d = 0;
          while (proc_control_B.j_d + 1 < 12) {
            proc_control_B.x_om = A[(13 * proc_control_B.j_d +
              proc_control_B.j_d) + 1];
            if (proc_control_B.x_om != 0.0) {
              proc_control_B.blockFormat[proc_control_B.j_d] = 2;
              proc_control_B.blockFormat[proc_control_B.j_d + 1] = 0;
              proc_control_B.j_d += 2;
            } else if ((proc_control_B.x_om == 0.0) && (A[((proc_control_B.j_d +
              1) * 13 + proc_control_B.j_d) + 2] == 0.0)) {
              proc_control_B.blockFormat[proc_control_B.j_d] = 1;
              proc_control_B.j_d++;
            } else {
              proc_control_B.blockFormat[proc_control_B.j_d] = 0;
              proc_control_B.j_d++;
            }
          }

          if (A[155] != 0.0) {
            proc_control_B.blockFormat[11] = 2;
          } else if ((proc_control_B.blockFormat[10] == 0) ||
                     (proc_control_B.blockFormat[10] == 1)) {
            proc_control_B.blockFormat[11] = 1;
          }
        }

        proc_control_padeApproximation(A, proc_control_B.b_A2,
          proc_control_B.b_A4, proc_control_B.b_A6, proc_control_B.eint, F);
        if (recomputeDiags) {
          std::memcpy(&proc_control_B.b_A2[0], &F[0], 169U * sizeof(real_T));
          proc_control_recomputeBlockDiag(A, proc_control_B.b_A2,
            proc_control_B.blockFormat, F);
        }

        proc_control_B.eint = static_cast<int32_T>(proc_control_B.exptj) - 1;
        for (proc_control_B.j_d = 0; proc_control_B.j_d <= proc_control_B.eint;
             proc_control_B.j_d++) {
          for (proc_control_B.i_mw = 0; proc_control_B.i_mw < 13;
               proc_control_B.i_mw++) {
            proc_control_B.b_k_oc = 0;
            for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 13;
                 proc_control_B.b_k_c++) {
              proc_control_B.b_A2_tmp = proc_control_B.b_k_oc +
                proc_control_B.i_mw;
              proc_control_B.b_A4[proc_control_B.b_A2_tmp] = 0.0;
              proc_control_B.i6 = 0;
              for (proc_control_B.i5 = 0; proc_control_B.i5 < 13;
                   proc_control_B.i5++) {
                proc_control_B.b_A4[proc_control_B.b_A2_tmp] +=
                  F[proc_control_B.i6 + proc_control_B.i_mw] *
                  F[proc_control_B.i5 + proc_control_B.b_k_oc];
                proc_control_B.i6 += 13;
              }

              proc_control_B.b_k_oc += 13;
            }
          }

          std::memcpy(&F[0], &proc_control_B.b_A4[0], 169U * sizeof(real_T));
          if (recomputeDiags) {
            for (proc_control_B.i_mw = 0; proc_control_B.i_mw < 169;
                 proc_control_B.i_mw++) {
              A[proc_control_B.i_mw] *= 2.0;
            }

            std::memcpy(&proc_control_B.b_A2[0], &F[0], 169U * sizeof(real_T));
            proc_control_recomputeBlockDiag(A, proc_control_B.b_A2,
              proc_control_B.blockFormat, F);
          }
        }
      }
    }
  }
}

void proc_control::proc_control_mldivide(const real_T A[36], const real_T B[36],
  real_T Y[36])
{
  std::memcpy(&proc_control_B.c_x[0], &A[0], 36U * sizeof(real_T));
  for (proc_control_B.iy_c = 0; proc_control_B.iy_c < 6; proc_control_B.iy_c++)
  {
    proc_control_B.b_ipiv_n[proc_control_B.iy_c] = static_cast<int8_T>
      (proc_control_B.iy_c + 1);
  }

  for (proc_control_B.b_j_g = 0; proc_control_B.b_j_g < 5; proc_control_B.b_j_g
       ++) {
    proc_control_B.c_g2 = proc_control_B.b_j_g * 7 + 2;
    proc_control_B.jj_b = proc_control_B.b_j_g * 7;
    proc_control_B.kAcol_n = 6 - proc_control_B.b_j_g;
    proc_control_B.iy_c = 1;
    proc_control_B.smax_k = std::abs(proc_control_B.c_x[proc_control_B.jj_b]);
    for (proc_control_B.jA_eo = 2; proc_control_B.jA_eo <=
         proc_control_B.kAcol_n; proc_control_B.jA_eo++) {
      proc_control_B.s_k4 = std::abs(proc_control_B.c_x[(proc_control_B.c_g2 +
        proc_control_B.jA_eo) - 3]);
      if (proc_control_B.s_k4 > proc_control_B.smax_k) {
        proc_control_B.iy_c = proc_control_B.jA_eo;
        proc_control_B.smax_k = proc_control_B.s_k4;
      }
    }

    if (proc_control_B.c_x[(proc_control_B.c_g2 + proc_control_B.iy_c) - 3] !=
        0.0) {
      if (proc_control_B.iy_c - 1 != 0) {
        proc_control_B.iy_c += proc_control_B.b_j_g;
        proc_control_B.b_ipiv_n[proc_control_B.b_j_g] = static_cast<int8_T>
          (proc_control_B.iy_c);
        for (proc_control_B.jA_eo = 0; proc_control_B.jA_eo < 6;
             proc_control_B.jA_eo++) {
          proc_control_B.kAcol_n = proc_control_B.jA_eo * 6 +
            proc_control_B.b_j_g;
          proc_control_B.smax_k = proc_control_B.c_x[proc_control_B.kAcol_n];
          proc_control_B.c_x[proc_control_B.kAcol_n] = proc_control_B.c_x
            [(proc_control_B.jA_eo * 6 + proc_control_B.iy_c) - 1];
          proc_control_B.c_x[(proc_control_B.iy_c + proc_control_B.jA_eo * 6) -
            1] = proc_control_B.smax_k;
        }
      }

      proc_control_B.iy_c = proc_control_B.c_g2 - proc_control_B.b_j_g;
      for (proc_control_B.jA_eo = proc_control_B.c_g2; proc_control_B.jA_eo <=
           proc_control_B.iy_c + 4; proc_control_B.jA_eo++) {
        proc_control_B.c_x[proc_control_B.jA_eo - 1] /=
          proc_control_B.c_x[proc_control_B.jj_b];
      }
    }

    proc_control_B.kAcol_n = 5 - proc_control_B.b_j_g;
    proc_control_B.jA_eo = proc_control_B.jj_b;
    proc_control_B.jj_b += 6;
    for (proc_control_B.jp1j_l = 0; proc_control_B.jp1j_l <
         proc_control_B.kAcol_n; proc_control_B.jp1j_l++) {
      proc_control_B.smax_k = proc_control_B.c_x[proc_control_B.jp1j_l * 6 +
        proc_control_B.jj_b];
      if (proc_control_B.smax_k != 0.0) {
        proc_control_B.iy_c = proc_control_B.jA_eo + 8;
        proc_control_B.c_fb = proc_control_B.jA_eo - proc_control_B.b_j_g;
        for (int32_T ijA{proc_control_B.iy_c}; ijA <= proc_control_B.c_fb + 12;
             ijA++) {
          proc_control_B.c_x[ijA - 1] += proc_control_B.c_x
            [((proc_control_B.c_g2 + ijA) - proc_control_B.jA_eo) - 9] *
            -proc_control_B.smax_k;
        }
      }

      proc_control_B.jA_eo += 6;
    }
  }

  std::memcpy(&Y[0], &B[0], 36U * sizeof(real_T));
  for (proc_control_B.c_g2 = 0; proc_control_B.c_g2 < 5; proc_control_B.c_g2++)
  {
    int8_T b_ipiv;
    b_ipiv = proc_control_B.b_ipiv_n[proc_control_B.c_g2];
    if (proc_control_B.c_g2 + 1 != b_ipiv) {
      for (proc_control_B.b_j_g = 0; proc_control_B.b_j_g < 6;
           proc_control_B.b_j_g++) {
        proc_control_B.kAcol_n = 6 * proc_control_B.b_j_g + proc_control_B.c_g2;
        proc_control_B.smax_k = Y[proc_control_B.kAcol_n];
        proc_control_B.jj_b = (6 * proc_control_B.b_j_g + b_ipiv) - 1;
        Y[proc_control_B.kAcol_n] = Y[proc_control_B.jj_b];
        Y[proc_control_B.jj_b] = proc_control_B.smax_k;
      }
    }
  }

  for (proc_control_B.b_j_g = 0; proc_control_B.b_j_g < 6; proc_control_B.b_j_g
       ++) {
    proc_control_B.jp1j_l = 6 * proc_control_B.b_j_g - 1;
    for (proc_control_B.c_g2 = 0; proc_control_B.c_g2 < 6; proc_control_B.c_g2++)
    {
      proc_control_B.kAcol_n = 6 * proc_control_B.c_g2 - 1;
      proc_control_B.iy_c = (proc_control_B.c_g2 + proc_control_B.jp1j_l) + 1;
      if (Y[proc_control_B.iy_c] != 0.0) {
        for (proc_control_B.jA_eo = proc_control_B.c_g2 + 2;
             proc_control_B.jA_eo < 7; proc_control_B.jA_eo++) {
          proc_control_B.jj_b = proc_control_B.jA_eo + proc_control_B.jp1j_l;
          Y[proc_control_B.jj_b] -= proc_control_B.c_x[proc_control_B.jA_eo +
            proc_control_B.kAcol_n] * Y[proc_control_B.iy_c];
        }
      }
    }
  }

  for (proc_control_B.b_j_g = 0; proc_control_B.b_j_g < 6; proc_control_B.b_j_g
       ++) {
    proc_control_B.jp1j_l = 6 * proc_control_B.b_j_g;
    for (proc_control_B.jA_eo = 5; proc_control_B.jA_eo >= 0;
         proc_control_B.jA_eo--) {
      proc_control_B.kAcol_n = 6 * proc_control_B.jA_eo;
      proc_control_B.iy_c = proc_control_B.jA_eo + proc_control_B.jp1j_l;
      proc_control_B.smax_k = Y[proc_control_B.iy_c];
      if (proc_control_B.smax_k != 0.0) {
        Y[proc_control_B.iy_c] = proc_control_B.smax_k /
          proc_control_B.c_x[proc_control_B.jA_eo + proc_control_B.kAcol_n];
        proc_control_B.iy_c = proc_control_B.jA_eo - 1;
        for (proc_control_B.c_g2 = 0; proc_control_B.c_g2 <= proc_control_B.iy_c;
             proc_control_B.c_g2++) {
          proc_control_B.jj_b = proc_control_B.c_g2 + proc_control_B.jp1j_l;
          Y[proc_control_B.jj_b] -= Y[proc_control_B.jA_eo +
            proc_control_B.jp1j_l] * proc_control_B.c_x[proc_control_B.c_g2 +
            proc_control_B.kAcol_n];
        }
      }
    }
  }
}

void proc_control::proc_control_AUV8QuatSimFcn(const real_T in1[13], const
  real_T in2[8], real_T out1[13])
{
  real_T out1_tmp;

  // AUVQUATSIMFCN
  //     OUT1 = AUVQUATSIMFCN(IN1,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     19-Nov-2021 10:15:44
  proc_control_B.t8_d = in1[4] * in1[4];
  proc_control_B.t9_i = in1[5] * in1[5];
  proc_control_B.t11_g = in1[4] * in1[5] * 2.0;
  proc_control_B.t12_tmp_p = in1[4] * in1[6];
  proc_control_B.t12_c = proc_control_B.t12_tmp_p * 2.0;
  proc_control_B.t13_tmp_f = in1[5] * in1[6];
  proc_control_B.t13_e = proc_control_B.t13_tmp_f * 2.0;
  proc_control_B.t14_tmp_f = in1[3] * in1[4];
  proc_control_B.t14_a = proc_control_B.t14_tmp_f * 2.0;
  proc_control_B.t15_tmp_a = in1[3] * in1[5];
  proc_control_B.t15_hq = proc_control_B.t15_tmp_a * 2.0;
  proc_control_B.t16_e = in1[3] * in1[6] * 2.0;
  proc_control_B.t25_dw = in1[11] / 500.0;
  proc_control_B.t29_g5 = in1[10] / 1000.0;
  proc_control_B.t31_ev = in1[12] * 0.018;
  proc_control_B.t50_e = in1[7] * 32.4648;
  proc_control_B.t53_g = in1[8] * 43.6156;
  proc_control_B.t54_g = in1[9] * 46.7695;
  proc_control_B.t17_d = proc_control_B.t8_d * 2.0;
  proc_control_B.t18_n = proc_control_B.t9_i * 2.0;
  proc_control_B.t19_p2 = in1[6] * in1[6] * 2.0;
  proc_control_B.t57_b = proc_control_B.t25_dw + proc_control_B.t31_ev;
  proc_control_B.t25_dw += proc_control_B.t29_g5;
  proc_control_B.t29_g5 += proc_control_B.t31_ev;
  proc_control_B.t31_ev = in1[11] * 0.558 + proc_control_B.t50_e;
  proc_control_B.t64_i = in1[10] * 0.062 + proc_control_B.t54_g;
  proc_control_B.t65_b = in1[12] * 0.031 + proc_control_B.t53_g;
  proc_control_B.t68_j = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 0.592;
  proc_control_B.t50_e = in1[12] * 0.062 + -proc_control_B.t50_e;
  proc_control_B.t53_g = in1[10] * 0.558 + -proc_control_B.t53_g;
  proc_control_B.t54_g = in1[11] * 0.031 + -proc_control_B.t54_g;
  proc_control_B.t69_g = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_B.t70_n = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  out1[0] = (((proc_control_B.t18_n + proc_control_B.t19_p2) - 1.0) * -in1[7] +
             (proc_control_B.t12_c + proc_control_B.t15_hq) * in1[9]) +
    (proc_control_B.t11_g - proc_control_B.t16_e) * in1[8];
  out1[1] = ((proc_control_B.t11_g + proc_control_B.t16_e) * in1[7] -
             ((proc_control_B.t17_d + proc_control_B.t19_p2) - 1.0) * in1[8]) +
    (proc_control_B.t13_e - proc_control_B.t14_a) * in1[9];
  out1[2] = ((proc_control_B.t13_e + proc_control_B.t14_a) * in1[8] -
             ((proc_control_B.t17_d + proc_control_B.t18_n) - 1.0) * in1[9]) +
    (proc_control_B.t12_c - proc_control_B.t15_hq) * in1[7];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_B.t11_g = in1[10] * proc_control_B.t57_b;
  proc_control_B.t12_c = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) * in1
    [10];
  proc_control_B.t13_e = in1[10] * proc_control_B.t64_i;
  proc_control_B.t14_a = in1[10] * proc_control_B.t53_g;
  proc_control_B.t15_hq = in1[10] * proc_control_B.t69_g;
  proc_control_B.t16_e = in1[10] * proc_control_B.t70_n;
  proc_control_B.t17_d = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) * in1
    [11];
  proc_control_B.t18_n = in1[11] * proc_control_B.t29_g5;
  proc_control_B.t19_p2 = in1[11] * proc_control_B.t31_ev;
  proc_control_B.out1_tmp_g3 = in1[11] * proc_control_B.t54_g;
  proc_control_B.out1_tmp_ma = in1[11] * proc_control_B.t68_j;
  proc_control_B.t69_g *= in1[11];
  proc_control_B.out1_tmp_dv = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  proc_control_B.out1_tmp_ef = in1[12] * proc_control_B.t25_dw;
  proc_control_B.out1_tmp_ey = in1[12] * proc_control_B.t50_e;
  proc_control_B.out1_tmp_dl = in1[12] * proc_control_B.t65_b;
  proc_control_B.t68_j *= in1[12];
  proc_control_B.t70_n *= in1[12];
  proc_control_B.out1_tmp_j = (std::abs(in1[7]) * 1.17 + 15.0) * in1[7];
  proc_control_B.t57_b *= in1[7];
  proc_control_B.t65_b *= in1[7];
  proc_control_B.t54_g *= in1[7];
  proc_control_B.out1_tmp_nx = (std::abs(in1[8]) * 0.82 + 20.0) * in1[8];
  proc_control_B.t29_g5 *= in1[8];
  proc_control_B.t50_e *= in1[8];
  proc_control_B.t64_i *= in1[8];
  out1_tmp = (std::abs(in1[9]) * 0.756 + 23.333333333333332) * in1[9];
  proc_control_B.t25_dw *= in1[9];
  proc_control_B.t31_ev *= in1[9];
  proc_control_B.t53_g *= in1[9];
  out1[7] = (((((((((((((((in2[0] * -0.00033076834054020519 + in2[1] *
    1.8595780444550231E-21) + in2[2] * 0.00033506403327449372) + (in2[3] *
    0.00033363213569639753 - in2[4] * 0.001819638864719295)) + (in2[5] *
    -0.0018124211550371481 + in2[6] * 0.0018538731733468781)) + (in2[7] *
    0.001778186846409557 - proc_control_B.t8_d * 0.0063195296824236141)) +
                      ((in2[0] * 1.4142135623730951 * 0.015171119710606879 +
                        proc_control_B.t9_i * -0.0063195296824236141) + in2[1] *
                       1.4142135623730951 * 0.014928824155507611)) + ((in2[2] *
    1.4142135623730951 * 0.015171119710606879 + in2[3] * 1.4142135623730951 *
    0.01516372519659284) - proc_control_B.t12_tmp_p * 0.4138016519122657)) +
                    ((proc_control_B.t13_tmp_f * -0.0013017970932508 -
                      proc_control_B.t14_tmp_f * 0.0013017970932508) +
                     proc_control_B.t15_tmp_a * 0.4138016519122657)) +
                   (((proc_control_B.t11_g * -0.96028628902704993 -
                      proc_control_B.t12_c * 0.0001303522588356414) +
                     proc_control_B.t13_e * 9.4803055144857715E-7) -
                    proc_control_B.t14_a * 6.8231348244175949E-6)) +
                  (((proc_control_B.t15_hq * -0.010033314971702871 -
                     proc_control_B.t16_e * 0.0010125044874363649) +
                    proc_control_B.t17_d * 0.010033314971702871) -
                   proc_control_B.t18_n * 2.9388947094905889E-5)) +
                 (((proc_control_B.t19_p2 * -6.8231348244175949E-6 +
                    proc_control_B.out1_tmp_g3 * 0.030976977065388711) +
                   proc_control_B.out1_tmp_ma * 0.0010125044874363649) -
                  proc_control_B.t69_g * 0.0001303522588356414)) +
                (((proc_control_B.out1_tmp_dv * -0.0010125044874363649 +
                   proc_control_B.out1_tmp_ef * 0.0002115171795569455) +
                  proc_control_B.out1_tmp_ey * 9.4803055144857715E-7) +
                 proc_control_B.out1_tmp_dl * 0.030976977065388711)) +
               (((proc_control_B.t68_j * 0.010033314971702871 +
                  proc_control_B.t70_n * 0.0001303522588356414) -
                 proc_control_B.out1_tmp_j * 0.030976977065388711) +
                proc_control_B.t57_b * 0.0040409200239048832)) +
              (((proc_control_B.t65_b * -0.0010125044874363649 +
                 proc_control_B.t54_g * 0.010033314971702871) -
                proc_control_B.out1_tmp_nx * 9.4803055144857715E-7) -
               proc_control_B.t29_g5 * 0.311032764122789)) +
             (((proc_control_B.t50_e * -0.0010125044874363649 -
                proc_control_B.t64_i * 0.0001303522588356414) + out1_tmp *
               6.8231348244175949E-6) + proc_control_B.t25_dw *
              0.031387639110527318)) + ((proc_control_B.t31_ev *
    0.010033314971702871 - proc_control_B.t53_g * 0.0001303522588356414) +
    0.003159764841211807);
  out1[8] = (((((((((((((((in2[0] * 0.00013975754063522079 + in2[1] *
    7.9244610288113972E-21) + in2[2] * -0.00014157257363048341) + (in2[3] *
    -0.0001409675626320625 - in2[4] * 0.0034249251816346319)) + (in2[5] *
    0.003387750973601051 + in2[6] * 0.0035708122797193441)) + (in2[7] *
    -0.0035336380716857632 - proc_control_B.t8_d * 0.02693023120923067)) +
                      ((proc_control_B.t9_i * -0.02693023120923067 - in2[0] *
                        1.4142135623730951 * 0.01090649593858282) + in2[1] *
                       1.4142135623730951 * 0.011000123045544621)) + ((in2[2] *
    1.4142135623730951 * -0.01090649593858282 + in2[3] * 1.4142135623730951 *
    0.01090087173345982) - proc_control_B.t12_tmp_p * 0.00099202109956931486)) +
                    ((proc_control_B.t13_tmp_f * -0.51979016069898065 -
                      proc_control_B.t14_tmp_f * 0.51979016069898065) +
                     proc_control_B.t15_tmp_a * 0.00099202109956931486)) +
                   (((proc_control_B.t11_g * -2.9388947094905889E-5 -
                      proc_control_B.t12_c * 0.021882274381510681) +
                     proc_control_B.t13_e * 0.02320783323245932) -
                    proc_control_B.t14_a * 2.9076309096921531E-5)) +
                  (((proc_control_B.t15_hq * -0.0001026911824132076 +
                     proc_control_B.t16_e * 0.00042780737967584029) +
                    proc_control_B.t17_d * 0.0001026911824132076) -
                   proc_control_B.t18_n * 0.71944283020623911)) +
                 (((proc_control_B.t19_p2 * -2.9076309096921531E-5 +
                    proc_control_B.out1_tmp_g3 * 9.4803055144857715E-7) -
                   proc_control_B.out1_tmp_ma * 0.00042780737967584029) -
                  proc_control_B.t69_g * 0.021882274381510681)) +
                (((proc_control_B.out1_tmp_dv * 0.00042780737967584029 +
                   proc_control_B.out1_tmp_ef * 0.00090136558200456737) +
                  proc_control_B.out1_tmp_ey * 0.02320783323245932) +
                 proc_control_B.out1_tmp_dl * 9.4803055144857715E-7)) +
               (((proc_control_B.t68_j * 0.0001026911824132076 +
                  proc_control_B.t70_n * 0.021882274381510681) -
                 proc_control_B.out1_tmp_j * 9.4803055144857715E-7) +
                proc_control_B.t57_b * 0.678350505826831)) +
              (((proc_control_B.t65_b * 0.00042780737967584029 +
                 proc_control_B.t54_g * 0.0001026911824132076) -
                proc_control_B.out1_tmp_nx * 0.02320783323245932) -
               proc_control_B.t29_g5 * 0.0031834266548094372)) +
             (((proc_control_B.t50_e * 0.00042780737967584029 -
                proc_control_B.t64_i * 0.021882274381510681) + out1_tmp *
               2.9076309096921531E-5) - proc_control_B.t25_dw *
              0.013262028769951049)) + ((proc_control_B.t31_ev *
    0.0001026911824132076 - proc_control_B.t53_g * 0.021882274381510681) +
    0.01346511560461533);
  out1[9] = (((((((((((((((in2[0] * -1.725827915740819E-6 + in2[1] *
    -5.8281975682474322E-18) + in2[2] * 1.748241265284163E-6) + (in2[3] *
    1.740770148765829E-6 - in2[4] * 0.02095639900015615)) + (in2[5] *
    0.021100316216985739 - in2[6] * 0.021822949502860629)) + (in2[7] *
    0.02167903228603104 + proc_control_B.t8_d * 0.18635748921352191)) +
                      ((proc_control_B.t9_i * 0.18635748921352191 - in2[0] *
                        1.4142135623730951 * 4.8869263875916949E-5) + in2[1] *
                       1.4142135623730951 * 6.6264429389244648E-5)) + ((in2[2] *
    1.4142135623730951 * -4.8869263875916949E-5 + in2[3] * 1.4142135623730951 *
    6.7490056888775055E-5) + proc_control_B.t12_tmp_p * 0.0058758415205803329))
                    + ((proc_control_B.t13_tmp_f * 0.033540735888224739 +
                        proc_control_B.t14_tmp_f * 0.033540735888224739) -
                       proc_control_B.t15_tmp_a * 0.0058758415205803329)) +
                   (((proc_control_B.t11_g * 0.0002115171795569455 +
                      proc_control_B.t12_c * 0.002272431716587712) -
                     proc_control_B.t13_e * 2.9076309096921531E-5) +
                    proc_control_B.t14_a * 0.021384731826702759)) +
                  (((proc_control_B.t15_hq * 0.00039756137245743289 -
                     proc_control_B.t16_e * 5.2828771531483014E-6) -
                    proc_control_B.t17_d * 0.00039756137245743289) +
                   proc_control_B.t18_n * 0.00090136558200456737)) +
                 (((proc_control_B.t19_p2 * 0.021384731826702759 -
                    proc_control_B.out1_tmp_g3 * 6.8231348244175949E-6) +
                   proc_control_B.out1_tmp_ma * 5.2828771531483014E-6) +
                  proc_control_B.t69_g * 0.002272431716587712)) +
                (((proc_control_B.out1_tmp_dv * -5.2828771531483014E-6 -
                   proc_control_B.out1_tmp_ef * 0.66292668662778553) -
                  proc_control_B.out1_tmp_ey * 2.9076309096921531E-5) -
                 proc_control_B.out1_tmp_dl * 6.8231348244175949E-6)) +
               (((proc_control_B.t68_j * -0.00039756137245743289 -
                  proc_control_B.t70_n * 0.002272431716587712) +
                 proc_control_B.out1_tmp_j * 6.8231348244175949E-6) -
                proc_control_B.t57_b * 0.070445383214219059)) +
              (((proc_control_B.t65_b * -5.2828771531483014E-6 -
                 proc_control_B.t54_g * 0.00039756137245743289) +
                proc_control_B.out1_tmp_nx * 2.9076309096921531E-5) +
               proc_control_B.t29_g5 * 0.01232440254618042)) +
             (((proc_control_B.t50_e * -5.2828771531483014E-6 +
                proc_control_B.t64_i * 0.002272431716587712) - out1_tmp *
               0.021384731826702759) + proc_control_B.t25_dw *
              0.00016376919174759729)) + ((proc_control_B.t31_ev *
    -0.00039756137245743289 + proc_control_B.t53_g * 0.002272431716587712) -
    0.093178744606760927);
  out1[10] = (((((((((((((((((in2[0] * 0.0013021350951669831 + in2[1] *
    6.1932883292401409E-19) + in2[2] * -0.00131904594055876) + (in2[3] *
    -0.0013134089920948341 - in2[4] * 0.26767193546582568)) + (in2[5] *
    0.26476621250220889 + in2[6] * 0.2790736050389333)) + (in2[7] *
    -0.27616788207531651 - proc_control_B.t8_d * 2.1047070084068991)) + ((in2[0]
    * 1.4142135623730951 * 0.043593198825375247 + proc_control_B.t9_i *
    -2.1047070084068991) - in2[1] * 1.4142135623730951 * 0.043051831063235027))
                        + ((in2[2] * 1.4142135623730951 * 0.043593198825375247 -
    in2[3] * 1.4142135623730951 * 0.043976565543532631) -
    proc_control_B.t12_tmp_p * 0.1138522338822895)) + ((proc_control_B.t13_tmp_f
    * -25.242114556122988 - proc_control_B.t14_tmp_f * 25.242114556122988) +
    proc_control_B.t15_tmp_a * 0.1138522338822895)) + ((proc_control_B.t11_g *
    -0.0040409200239048832 - proc_control_B.t12_c * 1.71018810547529) +
    proc_control_B.t13_e * 0.021882274381510681)) + ((proc_control_B.t14_a *
    -0.002272431716587712 - proc_control_B.t15_hq * 0.0080268590155159435) +
    proc_control_B.t16_e * 0.0039859244840414)) + ((proc_control_B.t17_d *
    0.0080268590155159435 - proc_control_B.t18_n * 0.678350505826831) -
    proc_control_B.t19_p2 * 0.002272431716587712)) +
                   ((proc_control_B.out1_tmp_g3 * 0.0001303522588356414 -
                     proc_control_B.out1_tmp_ma * 0.0039859244840414) -
                    proc_control_B.t69_g * 1.71018810547529)) +
                  (((proc_control_B.out1_tmp_dv * 0.0039859244840414 +
                     proc_control_B.out1_tmp_ef * 0.070445383214219059) +
                    proc_control_B.out1_tmp_ey * 0.021882274381510681) +
                   proc_control_B.out1_tmp_dl * 0.0001303522588356414)) +
                 ((proc_control_B.t68_j * 0.0080268590155159435 +
                   proc_control_B.t70_n * 1.71018810547529) -
                  proc_control_B.out1_tmp_j * 0.0001303522588356414)) +
                ((proc_control_B.t57_b * 53.015831269733987 +
                  proc_control_B.t65_b * 0.0039859244840414) +
                 proc_control_B.t54_g * 0.0080268590155159435)) +
               ((proc_control_B.out1_tmp_nx * -0.021882274381510681 -
                 proc_control_B.t29_g5 * 0.2488326294809943) +
                proc_control_B.t50_e * 0.0039859244840414)) +
              ((proc_control_B.t64_i * -1.71018810547529 + out1_tmp *
                0.002272431716587712) - proc_control_B.t25_dw *
               0.1235636590052834)) + ((proc_control_B.t31_ev *
    0.0080268590155159435 - proc_control_B.t53_g * 1.71018810547529) +
    1.0523535042034491);
  out1[11] = ((((((((((((((((in2[0] * 5.24748238233168E-7 - in2[1] *
    1.083514276897426E-19) + in2[2] * -5.3156315041823265E-7) + (in2[3] *
    -5.2929151302328333E-7 + in2[4] * 0.10593667623599359)) + (in2[5] *
    0.10537885436940329 - in2[6] * 0.10793139553633729)) + (in2[7] *
    -0.1033841350690595 + proc_control_B.t8_d * 0.36821797582524962)) + ((in2[0]
    * 1.4142135623730951 * 0.013457654526727991 + proc_control_B.t9_i *
    0.36821797582524962) + in2[1] * 1.4142135623730951 * 0.013869054980635681))
                       + ((in2[2] * 1.4142135623730951 * 0.013457654526727991 +
    in2[3] * 1.4142135623730951 * 0.01386868232130781) +
    proc_control_B.t12_tmp_p * 8.6371397256799973)) + ((proc_control_B.t13_tmp_f
    * 0.1184627304742461 + proc_control_B.t14_tmp_f * 0.1184627304742461) -
    proc_control_B.t15_tmp_a * 8.6371397256799973)) + (((proc_control_B.t11_g *
    0.311032764122789 + proc_control_B.t12_c * 0.0080268590155159435) -
    proc_control_B.t13_e * 0.0001026911824132076) + proc_control_B.t14_a *
    0.00039756137245743289)) + ((proc_control_B.t15_hq * 0.58374455968341665 +
    proc_control_B.t16_e * 1.606290206365557E-6) - proc_control_B.t17_d *
    0.58374455968341665)) + (((proc_control_B.t18_n * 0.0031834266548094372 +
    proc_control_B.t19_p2 * 0.00039756137245743289) - proc_control_B.out1_tmp_g3
    * 0.010033314971702871) - proc_control_B.out1_tmp_ma * 1.606290206365557E-6))
                  + (((proc_control_B.t69_g * 0.0080268590155159435 +
                       proc_control_B.out1_tmp_dv * 1.606290206365557E-6) -
                      proc_control_B.out1_tmp_ef * 0.01232440254618042) -
                     proc_control_B.out1_tmp_ey * 0.0001026911824132076)) +
                 ((proc_control_B.out1_tmp_dl * -0.010033314971702871 -
                   proc_control_B.t68_j * 0.58374455968341665) -
                  proc_control_B.t70_n * 0.0080268590155159435)) +
                ((proc_control_B.out1_tmp_j * 0.010033314971702871 -
                  proc_control_B.t57_b * 0.2488326294809943) +
                 proc_control_B.t65_b * 1.606290206365557E-6)) +
               ((proc_control_B.t54_g * -0.58374455968341665 +
                 proc_control_B.out1_tmp_nx * 0.0001026911824132076) +
                proc_control_B.t29_g5 * 18.096081350185919)) +
              (((proc_control_B.t50_e * 1.606290206365557E-6 +
                 proc_control_B.t64_i * 0.0080268590155159435) - out1_tmp *
                0.00039756137245743289) - proc_control_B.t25_dw *
               4.9794996397332282E-5)) + ((proc_control_B.t31_ev *
    -0.58374455968341665 + proc_control_B.t53_g * 0.0080268590155159435) -
    0.18410898791262481);
  out1[12] = ((((((((((((((((in2[0] * -0.1731941163298826 + in2[1] *
    -1.4397960202092559E-21) + in2[2] * 0.175443390567933) + (in2[3] *
    0.17469363248858291 + in2[4] * 0.00062021813460420567)) + (in2[5] *
    -0.0006207996116589 - in2[6] * 0.00064672437426625525)) + (in2[7] *
    0.00064730585132094889 + proc_control_B.t8_d * 0.0048929560732764686)) +
                        ((in2[0] * 1.4142135623730951 * 0.00059255494878017434 +
    proc_control_B.t9_i * 0.0048929560732764686) - in2[1] * 1.4142135623730951 *
    0.1225770464045467)) + ((in2[2] * 1.4142135623730951 *
    0.00059255494878017434 + in2[3] * 1.4142135623730951 *
    0.00041984673608298361) - proc_control_B.t12_tmp_p * 0.65361132374006825)) +
                      ((proc_control_B.t13_tmp_f * 0.38451002147839958 +
                        proc_control_B.t14_tmp_f * 0.38451002147839958) +
                       proc_control_B.t15_tmp_a * 0.65361132374006825)) +
                     (((proc_control_B.t11_g * -0.031387639110527318 +
                        proc_control_B.t12_c * 0.0039859244840414) -
                       proc_control_B.t13_e * 0.00042780737967584029) +
                      proc_control_B.t14_a * 5.2828771531483014E-6)) +
                    (((proc_control_B.t15_hq * -1.606290206365557E-6 -
                       proc_control_B.t16_e * 0.53015902215788635) +
                      proc_control_B.t17_d * 1.606290206365557E-6) +
                     proc_control_B.t18_n * 0.013262028769951049)) +
                   (((proc_control_B.t19_p2 * 5.2828771531483014E-6 +
                      proc_control_B.out1_tmp_g3 * 0.0010125044874363649) +
                     proc_control_B.out1_tmp_ma * 0.53015902215788635) +
                    proc_control_B.t69_g * 0.0039859244840414)) +
                  ((proc_control_B.out1_tmp_dv * -0.53015902215788635 -
                    proc_control_B.out1_tmp_ef * 0.00016376919174759729) -
                   proc_control_B.out1_tmp_ey * 0.00042780737967584029)) +
                 (((proc_control_B.out1_tmp_dl * 0.0010125044874363649 +
                    proc_control_B.t68_j * 1.606290206365557E-6) -
                   proc_control_B.t70_n * 0.0039859244840414) -
                  proc_control_B.out1_tmp_j * 0.0010125044874363649)) +
                ((proc_control_B.t57_b * -0.1235636590052834 -
                  proc_control_B.t65_b * 0.53015902215788635) +
                 proc_control_B.t54_g * 1.606290206365557E-6)) +
               ((proc_control_B.out1_tmp_nx * 0.00042780737967584029 -
                 proc_control_B.t29_g5 * 4.9794996397332282E-5) -
                proc_control_B.t50_e * 0.53015902215788635)) +
              (((proc_control_B.t64_i * 0.0039859244840414 - out1_tmp *
                 5.2828771531483014E-6) + proc_control_B.t25_dw *
                16.434929686894481) + proc_control_B.t31_ev *
               1.606290206365557E-6)) + (proc_control_B.t53_g *
    0.0039859244840414 - 0.0024464780366382352);
}

void proc_control::proc_co_TrimPlant_trimPlantQuat(TrimPlant_proc_control_T
  *b_this, const real_T u[8], const real_T y[13], real_T A[169], real_T B[104],
  real_T U[8], real_T Y[13], real_T X[13], real_T DX[13])
{
  static const real_T tmp[48]{ 0.02112443491058583, -0.015284356933675683,
    -7.0837403672252146E-5, 0.062952228101239543, 0.019032522297668636,
    -0.17235611708486639, 0.021112545591001931, 0.015556523198782039,
    9.3712054745178266E-5, -0.060884483374622281, 0.019613805650913103,
    -0.17335012146094617, 0.021790267284400529, -0.015565687047941387,
    -6.7363334491227168E-5, 0.060331047065513795, 0.019031465986279986,
    0.17628138981294922, 0.021778377964816624, 0.015275193084516326,
    9.7186123926203244E-5, -0.063505664410348023, 0.019612749339524459,
    0.17528738543686956, -0.001819638864719295, -0.0034249251816346319,
    -0.02095639900015615, -0.26767193546582568, 0.10593667623599359,
    0.00062021813460420567, -0.0018124211550371481, 0.003387750973601051,
    0.021100316216985739, 0.26476621250220889, 0.10537885436940329,
    -0.0006207996116589, 0.0018538731733468781, 0.0035708122797193441,
    -0.021822949502860629, 0.2790736050389333, -0.10793139553633729,
    -0.00064672437426625525, 0.001778186846409557, -0.0035336380716857632,
    0.02167903228603104, -0.27616788207531651, -0.1033841350690595,
    0.00064730585132094889 };

  //  Lineariser le système
  // AUVQUATJACOBIANMATRIX
  //     [ANQV,BNQV,CNQ,DNQ] = AUVQUATJACOBIANMATRIX(IN1,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     19-Nov-2021 10:15:45
  proc_control_B.t2 = std::abs(y[10]);
  proc_control_B.t3 = std::abs(y[11]);
  proc_control_B.t4_m = std::abs(y[12]);
  proc_control_B.t5_k = std::abs(y[7]);
  proc_control_B.t6 = std::abs(y[8]);
  proc_control_B.t7 = std::abs(y[9]);
  if (std::isnan(y[10])) {
    proc_control_B.t8 = y[10];
  } else if (y[10] < 0.0) {
    proc_control_B.t8 = -1.0;
  } else {
    proc_control_B.t8 = (y[10] > 0.0);
  }

  if (std::isnan(y[11])) {
    proc_control_B.t9 = y[11];
  } else if (y[11] < 0.0) {
    proc_control_B.t9 = -1.0;
  } else {
    proc_control_B.t9 = (y[11] > 0.0);
  }

  if (std::isnan(y[12])) {
    proc_control_B.t10 = y[12];
  } else if (y[12] < 0.0) {
    proc_control_B.t10 = -1.0;
  } else {
    proc_control_B.t10 = (y[12] > 0.0);
  }

  if (std::isnan(y[7])) {
    proc_control_B.t11 = y[7];
  } else if (y[7] < 0.0) {
    proc_control_B.t11 = -1.0;
  } else {
    proc_control_B.t11 = (y[7] > 0.0);
  }

  if (std::isnan(y[8])) {
    proc_control_B.t12_j = y[8];
  } else if (y[8] < 0.0) {
    proc_control_B.t12_j = -1.0;
  } else {
    proc_control_B.t12_j = (y[8] > 0.0);
  }

  if (std::isnan(y[9])) {
    proc_control_B.t13 = y[9];
  } else if (y[9] < 0.0) {
    proc_control_B.t13 = -1.0;
  } else {
    proc_control_B.t13 = (y[9] > 0.0);
  }

  proc_control_B.t17 = y[4] * y[5] * 2.0;
  proc_control_B.t18 = y[4] * y[6] * 2.0;
  proc_control_B.t19 = y[5] * y[6] * 2.0;
  proc_control_B.t20 = y[3] * y[4] * 2.0;
  proc_control_B.t21_h = y[3] * y[5] * 2.0;
  proc_control_B.t22 = y[3] * y[6] * 2.0;
  proc_control_B.t23 = y[4] * y[7] * 2.0;
  proc_control_B.t24_tmp_e = y[5] * y[7];
  proc_control_B.t24_f = proc_control_B.t24_tmp_e * 2.0;
  proc_control_B.t25_tmp_j = y[6] * y[7];
  proc_control_B.t25_d = proc_control_B.t25_tmp_j * 2.0;
  proc_control_B.t26_l = y[3] * y[7] * 2.0;
  proc_control_B.t27_tmp_g = y[4] * y[8];
  proc_control_B.t27_k = proc_control_B.t27_tmp_g * 2.0;
  proc_control_B.t28 = y[5] * y[8] * 2.0;
  proc_control_B.t29_tmp_j = y[6] * y[8];
  proc_control_B.t29_i = proc_control_B.t29_tmp_j * 2.0;
  proc_control_B.t30_h = y[3] * y[8] * 2.0;
  proc_control_B.t31_tmp_j = y[4] * y[9];
  proc_control_B.t31_m = proc_control_B.t31_tmp_j * 2.0;
  proc_control_B.t32_tmp = y[5] * y[9];
  proc_control_B.t32 = proc_control_B.t32_tmp * 2.0;
  proc_control_B.t33_g = y[6] * y[9] * 2.0;
  proc_control_B.t34_l = y[3] * y[9] * 2.0;
  proc_control_B.t39_m = y[4] / 2.0;
  proc_control_B.t40_n = y[5] / 2.0;
  proc_control_B.t41_g = y[6] / 2.0;
  proc_control_B.t42 = y[3] / 2.0;
  proc_control_B.t43_d = y[10] / 2.0;
  proc_control_B.t44_m = y[11] / 2.0;
  proc_control_B.t45_f = y[12] / 2.0;
  proc_control_B.t55 = y[12] * 1.0571299073092789E-5;
  proc_control_B.t56 = y[11] * 9.7602896722846373E-5;
  proc_control_B.t57_g = y[8] * 0.01129023503850542;
  proc_control_B.t58_j = y[7] * 0.00477039452928936;
  proc_control_B.t59_c = y[10] * 9.1703771260780813E-5;
  proc_control_B.t61_e = y[9] * 0.143523560675718;
  proc_control_B.t62_m = y[7] * 0.00568699616459184;
  proc_control_B.t65_o = y[9] * 0.069014505171846527;
  proc_control_B.t68 = y[8] * 0.0071670223909459834;
  proc_control_B.t35_tmp_j = y[4] * y[4] * 2.0;
  proc_control_B.t36_tmp = y[5] * y[5] * 2.0;
  proc_control_B.t37_tmp = y[6] * y[6] * 2.0;
  proc_control_B.t60_a = -(y[10] * 9.1703771260780813E-5);

  //  Discrétiser le système.
  std::memset(&proc_control_B.dv8[0], 0, 39U * sizeof(real_T));
  proc_control_B.d34 = -proc_control_B.t29_i + proc_control_B.t32;
  proc_control_B.dv8[39] = proc_control_B.d34;
  proc_control_B.d35 = proc_control_B.t25_d - proc_control_B.t31_m;
  proc_control_B.dv8[40] = proc_control_B.d35;
  proc_control_B.d36 = -proc_control_B.t24_f + proc_control_B.t27_k;
  proc_control_B.dv8[41] = proc_control_B.d36;
  proc_control_B.dv8[42] = 0.0;
  proc_control_B.dv8[43] = proc_control_B.t43_d;
  proc_control_B.dv8[44] = proc_control_B.t44_m;
  proc_control_B.dv8[45] = proc_control_B.t45_f;
  proc_control_B.d37 = y[4] * -0.0013017970932508 + y[5] * 0.4138016519122657;
  proc_control_B.dv8[46] = proc_control_B.d37;
  proc_control_B.d38 = y[4] * -0.51979016069898065 + y[5] *
    0.00099202109956931486;
  proc_control_B.dv8[47] = proc_control_B.d38;
  proc_control_B.d39 = y[4] * 0.033540735888224739 - y[5] *
    0.0058758415205803329;
  proc_control_B.dv8[48] = proc_control_B.d39;
  proc_control_B.d40 = y[4] * -25.242114556122988 + y[5] * 0.1138522338822895;
  proc_control_B.dv8[49] = proc_control_B.d40;
  proc_control_B.d41 = y[4] * 0.1184627304742461 - y[5] * 8.6371397256799973;
  proc_control_B.dv8[50] = proc_control_B.d41;
  proc_control_B.d42 = y[4] * 0.38451002147839958 + y[5] * 0.65361132374006825;
  proc_control_B.dv8[51] = proc_control_B.d42;
  proc_control_B.d43 = proc_control_B.t28 + proc_control_B.t33_g;
  proc_control_B.dv8[52] = proc_control_B.d43;
  proc_control_B.t24_f = (proc_control_B.t24_f - proc_control_B.t34_l) -
    proc_control_B.t27_tmp_g * 4.0;
  proc_control_B.dv8[53] = proc_control_B.t24_f;
  proc_control_B.t25_d = (proc_control_B.t25_d + proc_control_B.t30_h) -
    proc_control_B.t31_tmp_j * 4.0;
  proc_control_B.dv8[54] = proc_control_B.t25_d;
  proc_control_B.dv8[55] = -proc_control_B.t43_d;
  proc_control_B.dv8[56] = 0.0;
  proc_control_B.dv8[57] = -proc_control_B.t45_f;
  proc_control_B.dv8[58] = proc_control_B.t44_m;
  proc_control_B.t31_tmp_j = (y[4] * -0.01263905936484723 - y[6] *
    0.4138016519122657) - y[3] * 0.0013017970932508;
  proc_control_B.dv8[59] = proc_control_B.t31_tmp_j;
  proc_control_B.t27_tmp_g = (y[4] * -0.05386046241846134 - y[6] *
    0.00099202109956931486) - y[3] * 0.51979016069898065;
  proc_control_B.dv8[60] = proc_control_B.t27_tmp_g;
  proc_control_B.d44 = (y[4] * 0.37271497842704371 + y[6] *
                        0.0058758415205803329) + y[3] * 0.033540735888224739;
  proc_control_B.dv8[61] = proc_control_B.d44;
  proc_control_B.d45 = (y[4] * -4.2094140168137981 - y[6] * 0.1138522338822895)
    - y[3] * 25.242114556122988;
  proc_control_B.dv8[62] = proc_control_B.d45;
  proc_control_B.d46 = (y[4] * 0.73643595165049924 + y[6] * 8.6371397256799973)
    + y[3] * 0.1184627304742461;
  proc_control_B.dv8[63] = proc_control_B.d46;
  proc_control_B.d47 = (y[4] * 0.009785912146552939 - y[6] * 0.65361132374006825)
    + y[3] * 0.38451002147839958;
  proc_control_B.dv8[64] = proc_control_B.d47;
  proc_control_B.t24_tmp_e = (proc_control_B.t27_k + proc_control_B.t34_l) -
    proc_control_B.t24_tmp_e * 4.0;
  proc_control_B.dv8[65] = proc_control_B.t24_tmp_e;
  proc_control_B.t33_g += proc_control_B.t23;
  proc_control_B.dv8[66] = proc_control_B.t33_g;
  proc_control_B.t29_i = (-proc_control_B.t26_l + proc_control_B.t29_i) -
    proc_control_B.t32_tmp * 4.0;
  proc_control_B.dv8[67] = proc_control_B.t29_i;
  proc_control_B.dv8[68] = -proc_control_B.t44_m;
  proc_control_B.dv8[69] = proc_control_B.t45_f;
  proc_control_B.dv8[70] = 0.0;
  proc_control_B.dv8[71] = -proc_control_B.t43_d;
  proc_control_B.t32_tmp = (y[5] * -0.01263905936484723 - y[6] *
    0.0013017970932508) + y[3] * 0.4138016519122657;
  proc_control_B.dv8[72] = proc_control_B.t32_tmp;
  proc_control_B.t27_k = (y[5] * -0.05386046241846134 - y[6] *
    0.51979016069898065) + y[3] * 0.00099202109956931486;
  proc_control_B.dv8[73] = proc_control_B.t27_k;
  proc_control_B.t34_l = (y[5] * 0.37271497842704371 + y[6] *
    0.033540735888224739) - y[3] * 0.0058758415205803329;
  proc_control_B.dv8[74] = proc_control_B.t34_l;
  proc_control_B.d48 = (y[5] * -4.2094140168137981 - y[6] * 25.242114556122988)
    + y[3] * 0.1138522338822895;
  proc_control_B.dv8[75] = proc_control_B.d48;
  proc_control_B.d49 = (y[5] * 0.73643595165049924 + y[6] * 0.1184627304742461)
    - y[3] * 8.6371397256799973;
  proc_control_B.dv8[76] = proc_control_B.d49;
  proc_control_B.d50 = (y[5] * 0.009785912146552939 + y[6] * 0.38451002147839958)
    + y[3] * 0.65361132374006825;
  proc_control_B.dv8[77] = proc_control_B.d50;
  proc_control_B.t25_tmp_j = (-proc_control_B.t30_h + proc_control_B.t31_m) -
    proc_control_B.t25_tmp_j * 4.0;
  proc_control_B.dv8[78] = proc_control_B.t25_tmp_j;
  proc_control_B.t26_l = (proc_control_B.t26_l + proc_control_B.t32) -
    proc_control_B.t29_tmp_j * 4.0;
  proc_control_B.dv8[79] = proc_control_B.t26_l;
  proc_control_B.t23 += proc_control_B.t28;
  proc_control_B.dv8[80] = proc_control_B.t23;
  proc_control_B.dv8[81] = -proc_control_B.t45_f;
  proc_control_B.dv8[82] = -proc_control_B.t44_m;
  proc_control_B.dv8[83] = proc_control_B.t43_d;
  proc_control_B.dv8[84] = 0.0;
  proc_control_B.t28 = y[4] * -0.4138016519122657 - y[5] * 0.0013017970932508;
  proc_control_B.dv8[85] = proc_control_B.t28;
  proc_control_B.t29_tmp_j = y[4] * -0.00099202109956931486 - y[5] *
    0.51979016069898065;
  proc_control_B.dv8[86] = proc_control_B.t29_tmp_j;
  proc_control_B.t32 = y[4] * 0.0058758415205803329 + y[5] *
    0.033540735888224739;
  proc_control_B.dv8[87] = proc_control_B.t32;
  proc_control_B.t30_h = y[4] * -0.1138522338822895 - y[5] * 25.242114556122988;
  proc_control_B.dv8[88] = proc_control_B.t30_h;
  proc_control_B.t31_m = y[4] * 8.6371397256799973 + y[5] * 0.1184627304742461;
  proc_control_B.dv8[89] = proc_control_B.t31_m;
  proc_control_B.d51 = y[4] * -0.65361132374006825 + y[5] * 0.38451002147839958;
  proc_control_B.dv8[90] = proc_control_B.d51;
  proc_control_B.d76 = (-proc_control_B.t36_tmp + -proc_control_B.t37_tmp) + 1.0;
  proc_control_B.dv8[91] = proc_control_B.d76;
  proc_control_B.d52 = proc_control_B.t17 + proc_control_B.t22;
  proc_control_B.dv8[92] = proc_control_B.d52;
  proc_control_B.d53 = proc_control_B.t18 - proc_control_B.t21_h;
  proc_control_B.dv8[93] = proc_control_B.d53;
  proc_control_B.dv8[94] = 0.0;
  proc_control_B.dv8[95] = 0.0;
  proc_control_B.dv8[96] = 0.0;
  proc_control_B.dv8[97] = 0.0;
  proc_control_B.t11 *= y[7];
  proc_control_B.d54 = (((((proc_control_B.t5_k * -0.036243063166504788 +
    proc_control_B.t55) + proc_control_B.t56) - proc_control_B.t57_g) -
    proc_control_B.t61_e) - proc_control_B.t11 * 0.036243063166504788) -
    0.46465465598083061;
  proc_control_B.dv8[98] = proc_control_B.d54;
  proc_control_B.d55 = (((y[8] * 0.00477039452928936 - y[9] *
    0.001468966557066211) - proc_control_B.t11 * 1.109195745194835E-6) -
                        1.422045827172866E-5) + ((y[11] * 0.00041592787873873338
    - y[12] * 0.74121409319149256) - proc_control_B.t5_k * 1.109195745194835E-6);
  proc_control_B.dv8[99] = proc_control_B.d55;
  proc_control_B.d56 = (((y[8] * -5.890830655932608E-5 + y[9] *
    0.00568699616459184) + proc_control_B.t11 * 7.9830677445685858E-6) +
                        0.0001023470223662639) + ((y[11] * 0.69409782663856512 -
    y[12] * 0.00032422410747795261) + proc_control_B.t5_k *
    7.9830677445685858E-6);
  proc_control_B.dv8[100] = proc_control_B.d56;
  proc_control_B.d57 = (((y[11] * 0.032506453976272241 + y[12] *
    0.24400486517334929) - proc_control_B.t5_k * 0.0001525121428377004) + ((y[8]
    * 0.044446246736648841 - y[9] * 0.1148218101592509) - proc_control_B.t11 *
    0.0001525121428377004)) + -0.0019552838825346208;
  proc_control_B.dv8[101] = proc_control_B.d57;
  proc_control_B.d58 = (((y[8] * 1.7911420833141059E-5 + y[9] *
    8.3502908029033716) + proc_control_B.t11 * 0.011738978516892359) +
                        0.150499724575543) + ((y[11] * -0.00568699616459184 - y
    [12] * 0.001145088836853196) + proc_control_B.t5_k * 0.011738978516892359);
  proc_control_B.dv8[102] = proc_control_B.d58;
  proc_control_B.t11 = (((y[11] * -7.5569972812640509E-5 - y[12] *
    0.00477039452928936) - proc_control_B.t5_k * 0.0011846302503005471) + ((y[8]
    * -5.91169722427816 - y[9] * 2.2977499514997389E-5) - proc_control_B.t11 *
    0.0011846302503005471)) + -0.015187567311545479;
  proc_control_B.dv8[103] = proc_control_B.t11;
  proc_control_B.t5_k = proc_control_B.t17 - proc_control_B.t22;
  proc_control_B.dv8[104] = proc_control_B.t5_k;
  proc_control_B.t37_tmp = (-proc_control_B.t35_tmp_j + -proc_control_B.t37_tmp)
    + 1.0;
  proc_control_B.dv8[105] = proc_control_B.t37_tmp;
  proc_control_B.t17 = proc_control_B.t19 + proc_control_B.t20;
  proc_control_B.dv8[106] = proc_control_B.t17;
  proc_control_B.dv8[107] = 0.0;
  proc_control_B.dv8[108] = 0.0;
  proc_control_B.dv8[109] = 0.0;
  proc_control_B.dv8[110] = 0.0;
  proc_control_B.t22 = proc_control_B.t12_j * y[8];
  proc_control_B.d59 = (((y[10] * -2.1519484922730651E-5 + y[12] *
    1.3454180758607359) - proc_control_B.t6 * 7.7738505218783331E-7) - y[7] *
                        0.01129023503850542) + ((y[9] * -0.00041111798914172931
    - proc_control_B.t22 * 7.7738505218783331E-7) - 1.8960611028971542E-5);
  proc_control_B.dv8[111] = proc_control_B.d59;
  proc_control_B.dv8[112] = (((((proc_control_B.t6 * -0.01903042325061665 +
    proc_control_B.t55) + proc_control_B.t58_j) + -proc_control_B.t59_c) -
    proc_control_B.t65_o) - proc_control_B.t22 * 0.01903042325061665) -
    0.46415666464918648;
  proc_control_B.d60 = (((y[7] * -5.890830655932608E-5 + y[9] *
    0.0071670223909459834) + proc_control_B.t22 * 2.3842573459475649E-5) +
                        0.00058152618193843065) + ((y[10] * -0.93255469429176219
    - y[12] * 7.6083411800115719E-5) + proc_control_B.t6 * 2.3842573459475649E-5);
  proc_control_B.dv8[113] = proc_control_B.d60;
  proc_control_B.d61 = (((y[10] * -0.0071670223909459834 + y[12] *
    0.00145353196782447) - proc_control_B.t6 * 0.017943464992838758) + ((y[7] *
    0.044446246736648841 - y[9] * 5.3937622658585171) - proc_control_B.t22 *
    0.017943464992838758)) + -0.4376454876302136;
  proc_control_B.dv8[114] = proc_control_B.d61;
  proc_control_B.d62 = (((y[10] * 0.0012538688125934979 - y[12] *
    0.1118794885864644) + proc_control_B.t6 * 8.4206769578830268E-5) + y[7] *
                        1.7911420833141059E-5) + ((proc_control_B.t22 *
    8.4206769578830268E-5 + y[9] * 0.025315910649035739) + 0.0020538236482641531);
  proc_control_B.dv8[115] = proc_control_B.d62;
  proc_control_B.t22 = (((y[10] * 1.6661666253314429E-5 + y[12] *
    0.01129023503850542) + proc_control_B.t6 * 0.00035080205133418912) + ((y[7] *
    -5.91169722427816 + y[9] * 0.01257120723021817) + proc_control_B.t22 *
    0.00035080205133418912)) + 0.0085561475935168052;
  proc_control_B.dv8[116] = proc_control_B.t22;
  proc_control_B.t18 += proc_control_B.t21_h;
  proc_control_B.dv8[117] = proc_control_B.t18;
  proc_control_B.t19 -= proc_control_B.t20;
  proc_control_B.dv8[118] = proc_control_B.t19;
  proc_control_B.t35_tmp_j = (-proc_control_B.t35_tmp_j +
    -proc_control_B.t36_tmp) + 1.0;
  proc_control_B.dv8[119] = proc_control_B.t35_tmp_j;
  proc_control_B.dv8[120] = 0.0;
  proc_control_B.dv8[121] = 0.0;
  proc_control_B.dv8[122] = 0.0;
  proc_control_B.dv8[123] = 0.0;
  proc_control_B.t20 = proc_control_B.t13 * y[9];
  proc_control_B.t21_h = (((y[10] * 2.989993556213668E-6 - y[11] *
    1.4431163638272659) + proc_control_B.t7 * 5.1582899272597018E-6) - y[7] *
    0.143523560675718) + ((proc_control_B.t20 * 5.1582899272597018E-6 + y[8] *
    -0.00041111798914172931) + 0.0001592064792364106);
  proc_control_B.dv8[124] = proc_control_B.t21_h;
  proc_control_B.t36_tmp = (((y[10] * 1.0731951852318531 - y[11] *
    1.356129262930646E-5) + proc_control_B.t7 * 2.1981689677272681E-5) + ((y[7] *
    -0.001468966557066211 - y[8] * 0.069014505171846527) + proc_control_B.t20 *
    2.1981689677272681E-5)) + 0.00067844721226150231;
  proc_control_B.dv8[125] = proc_control_B.t36_tmp;
  proc_control_B.dv8[126] = (((((proc_control_B.t7 * -0.01616685726098728 +
    proc_control_B.t56) + -proc_control_B.t59_c) + proc_control_B.t62_m) +
    proc_control_B.t68) - proc_control_B.t20 * 0.01616685726098728) -
    0.49897707595639768;
  proc_control_B.t59_c = (((y[10] * 0.069014505171846527 - y[11] *
    0.0018646499569661989) + proc_control_B.t7 * 0.00171795837774031) + ((y[7] *
    -0.1148218101592509 - y[8] * 5.3937622658585171) + proc_control_B.t20 *
    0.00171795837774031)) + 0.053023406720379938;
  proc_control_B.dv8[127] = proc_control_B.t59_c;
  proc_control_B.d63 = (((y[10] * -0.00032387772021301561 + y[11] *
    0.143523560675718) - proc_control_B.t7 * 0.00030055639757781919) + ((y[7] *
    8.3502908029033716 + y[8] * 0.025315910649035739) - proc_control_B.t20 *
    0.00030055639757781919)) + -0.0092764320240067664;
  proc_control_B.dv8[128] = proc_control_B.d63;
  proc_control_B.t20 = (((y[10] * -0.0013492616947596331 - y[11] *
    0.01448357294143097) - proc_control_B.t7 * 3.993855127780116E-6) - y[7] *
                        2.2977499514997389E-5) + ((y[8] * 0.01257120723021817 -
    proc_control_B.t20 * 3.993855127780116E-6) - 0.00012326713357346041);
  proc_control_B.dv8[129] = proc_control_B.t20;
  proc_control_B.dv8[130] = 0.0;
  proc_control_B.dv8[131] = 0.0;
  proc_control_B.dv8[132] = 0.0;
  proc_control_B.dv8[133] = -proc_control_B.t39_m;
  proc_control_B.dv8[134] = proc_control_B.t42;
  proc_control_B.dv8[135] = proc_control_B.t41_g;
  proc_control_B.dv8[136] = -proc_control_B.t40_n;
  proc_control_B.t8 *= y[10];
  proc_control_B.d64 = (((y[10] * -0.00010396365424827521 - y[11] *
    0.0030560301354578762) - y[12] * 0.030270009262121408) - proc_control_B.t2 *
                        2.1768827225552109E-5) + (((y[8] *
    -2.1519484922730651E-5 + y[9] * 2.989993556213668E-6) - proc_control_B.t8 *
    2.1768827225552109E-5) - 0.00043450752945213789);
  proc_control_B.dv8[137] = proc_control_B.d64;
  proc_control_B.d65 = ((((y[10] * 0.0028513455484883 - y[11] *
    0.00032316342950661811) + y[12] * 4.2079285691049859E-5) - proc_control_B.t2
    * 0.0036543398217122828) + ((y[8] * -9.1703771260780813E-5 + y[9] *
    1.0731951852318531) - proc_control_B.t8 * 0.0036543398217122828)) +
    -0.072940914605035587;
  proc_control_B.dv8[138] = proc_control_B.d65;
  proc_control_B.d66 = (((y[10] * 0.023864851221217471 + y[11] *
    4.0426879502317728E-6) - y[12] * 0.00016269010774240791) +
                        ((proc_control_B.t2 * 0.0003794960966701478 - y[8] *
    0.93255469429176219) - y[9] * 9.1703771260780813E-5)) + (proc_control_B.t8 *
    0.0003794960966701478 + 0.007574772388625705);
  proc_control_B.dv8[139] = proc_control_B.d66;
  proc_control_B.d67 = ((((proc_control_B.t2 * -0.28560141361437341 +
    proc_control_B.t65_o) - proc_control_B.t68) - proc_control_B.t8 *
    0.28560141361437341) - 5.7006270182509668) + ((y[10] *
    0.00017692814721597281 - y[11] * 0.00301187450220627) + y[12] *
    0.0032852614324183722);
  proc_control_B.dv8[140] = proc_control_B.d67;
  proc_control_B.d68 = (((y[10] * 0.005100926963153893 + y[11] *
    7.54282242443926E-5) + y[12] * 0.76112100692746432) + ((proc_control_B.t2 *
    0.0013404854555911631 + y[8] * 0.0012538688125934979) - y[9] *
    0.00032387772021301561)) + (proc_control_B.t8 * 0.0013404854555911631 +
    0.026756196718386482);
  proc_control_B.dv8[141] = proc_control_B.d68;
  proc_control_B.t8 = (((y[10] * -0.0085297096290247246 - y[11] *
    0.59953739020136265) - y[12] * 6.8948828938803766E-5) + ((proc_control_B.t2 *
    0.00066564938883491385 + y[8] * 1.6661666253314429E-5) - y[9] *
    0.0013492616947596331)) + (proc_control_B.t8 * 0.00066564938883491385 +
    0.013286414946804669);
  proc_control_B.dv8[142] = proc_control_B.t8;
  proc_control_B.dv8[143] = 0.0;
  proc_control_B.dv8[144] = 0.0;
  proc_control_B.dv8[145] = 0.0;
  proc_control_B.dv8[146] = -proc_control_B.t40_n;
  proc_control_B.dv8[147] = -proc_control_B.t41_g;
  proc_control_B.dv8[148] = proc_control_B.t42;
  proc_control_B.dv8[149] = proc_control_B.t39_m;
  proc_control_B.t2 = y[11] * proc_control_B.t9;
  proc_control_B.t9 = ((((y[10] * -0.0030560301354578762 + y[11] *
    0.001929418735906703) + y[12] * 6.2884941489263073E-5) + proc_control_B.t3 *
                        0.001003331497170287) + ((y[7] * 9.7602896722846373E-5 -
    y[9] * 1.4431163638272659) + proc_control_B.t2 * 0.001003331497170287)) +
    0.0234110682673067;
  proc_control_B.dv8[150] = proc_control_B.t9;
  proc_control_B.d69 = (((y[10] * -0.00032316342950661811 + y[11] *
    4.5292476302332957E-6) - y[12] * 0.016528998001422841) + proc_control_B.t3 *
                        1.026911824132076E-5) + (((y[7] * 0.00041592787873873338
    - y[9] * 1.356129262930646E-5) + proc_control_B.t2 * 1.026911824132076E-5) +
    0.00023961275896415121);
  proc_control_B.dv8[151] = proc_control_B.d69;
  proc_control_B.d70 = (((y[10] * 4.0426879502317728E-6 + y[11] *
    0.023860477346842442) - y[12] * 0.000941018323416786) + ((proc_control_B.t3 *
    -3.9756137245743291E-5 + y[7] * 0.69409782663856512) + y[9] *
    9.7602896722846373E-5)) + (proc_control_B.t2 * -3.9756137245743291E-5 -
    0.00092764320240067675);
  proc_control_B.dv8[152] = proc_control_B.d70;
  proc_control_B.d71 = (((y[10] * -0.00301187450220627 + y[11] *
    0.00082864946354184129) - y[12] * 0.291807921220024) + ((proc_control_B.t3 *
    0.00080268590155159437 + y[7] * 0.032506453976272241) - y[9] *
    0.0018646499569661989)) + (proc_control_B.t2 * 0.00080268590155159437 +
    0.018729337702870542);
  proc_control_B.dv8[153] = proc_control_B.d71;
  proc_control_B.t61_e = ((((proc_control_B.t3 * -0.058374455968341669 +
    proc_control_B.t61_e) - proc_control_B.t62_m) - proc_control_B.t2 *
    0.058374455968341669) - 1.362070639261306) + ((y[10] * 7.54282242443926E-5 -
    y[11] * 0.00019446645525741661) - y[12] * 0.003324115892995542);
  proc_control_B.dv8[154] = proc_control_B.t61_e;
  proc_control_B.t2 = ((((proc_control_B.t3 * 1.6062902063655571E-7 - y[7] *
    7.5569972812640509E-5) - y[9] * 0.01448357294143097) + proc_control_B.t2 *
                        1.6062902063655571E-7) + ((y[10] * -0.59953739020136265
    + y[11] * 0.0085432434746820687) + y[12] * 0.0030111351640179931)) +
    3.7480104815196341E-6;
  proc_control_B.dv8[155] = proc_control_B.t2;
  proc_control_B.dv8[156] = 0.0;
  proc_control_B.dv8[157] = 0.0;
  proc_control_B.dv8[158] = 0.0;
  proc_control_B.dv8[159] = -proc_control_B.t41_g;
  proc_control_B.dv8[160] = proc_control_B.t40_n;
  proc_control_B.dv8[161] = -proc_control_B.t39_m;
  proc_control_B.dv8[162] = proc_control_B.t42;
  proc_control_B.t3 = y[12] * proc_control_B.t10;
  proc_control_B.t10 = (((y[10] * -0.030270009262121408 + y[11] *
    6.2884941489263073E-5) + y[12] * 0.0020006959490984312) -
                        proc_control_B.t4_m * 0.0001032754577185093) + (((y[7] *
    1.0571299073092789E-5 + y[8] * 1.3454180758607359) - proc_control_B.t3 *
    0.0001032754577185093) - 0.0050625224371818262);
  proc_control_B.dv8[163] = proc_control_B.t10;
  proc_control_B.d72 = (((y[10] * 4.2079285691049859E-5 - y[11] *
    0.016528998001422841) + y[12] * 0.00283488707941543) + proc_control_B.t4_m *
                        4.3636352726935713E-5) + (((y[7] * -0.74121409319149256
    + y[8] * 1.0571299073092789E-5) + proc_control_B.t3 * 4.3636352726935713E-5)
    + 0.0021390368983792022);
  proc_control_B.dv8[164] = proc_control_B.d72;
  proc_control_B.d73 = ((((proc_control_B.t4_m * -5.3885346962112674E-7 - y[7] *
    0.00032422410747795261) - y[8] * 7.6083411800115719E-5) - proc_control_B.t3 *
    5.3885346962112674E-7) + ((y[10] * -0.00016269010774240791 - y[11] *
    0.000941018323416786) - y[12] * 2.6641242336162E-6)) +
    -2.6414385765741509E-5;
  proc_control_B.dv8[165] = proc_control_B.d73;
  proc_control_B.d74 = (((y[10] * 0.0032852614324183722 - y[11] *
    0.291807921220024) - y[12] * 0.00063467747547131872) + ((proc_control_B.t4_m
    * 0.00040656429737222281 + y[7] * 0.24400486517334929) + y[8] *
    0.00145353196782447)) + (proc_control_B.t3 * 0.00040656429737222281 +
    0.019929622420207);
  proc_control_B.dv8[166] = proc_control_B.d74;
  proc_control_B.d75 = ((((proc_control_B.t4_m * 1.6384160104928689E-7 - y[7] *
    0.001145088836853196) - y[8] * 0.1118794885864644) + proc_control_B.t3 *
    1.6384160104928689E-7) + ((y[10] * 0.76112100692746432 - y[11] *
    0.003324115892995542) - y[12] * 0.005288701994301117)) +
    8.0314510318277867E-6;
  proc_control_B.dv8[167] = proc_control_B.d75;
  proc_control_B.t3 = ((((proc_control_B.t4_m * -0.054076220260104418 +
    proc_control_B.t57_g) - proc_control_B.t58_j) - proc_control_B.t3 *
                        0.054076220260104418) - 2.6507951107894319) + ((y[10] *
    -6.8948828938803766E-5 + y[11] * 0.0030111351640179931) + y[12] *
    1.7711862430984169E-5);
  proc_control_B.dv8[168] = proc_control_B.t3;
  for (proc_control_B.i_a = 0; proc_control_B.i_a < 169; proc_control_B.i_a++) {
    proc_control_B.dv9[proc_control_B.i_a] =
      proc_control_B.dv8[proc_control_B.i_a] * 0.1;
  }

  proc_control_expm(proc_control_B.dv9, A);

  //  Fossen Eq B.10/B.9 page 662
  for (proc_control_B.i_a = 0; proc_control_B.i_a < 36; proc_control_B.i_a++) {
    proc_control_B.b_I_f[proc_control_B.i_a] = 0;
  }

  //  Fossen Eq B.11 p 662
  std::memset(&proc_control_B.dv8[0], 0, 39U * sizeof(real_T));
  proc_control_B.dv8[39] = proc_control_B.d34;
  proc_control_B.dv8[40] = proc_control_B.d35;
  proc_control_B.dv8[41] = proc_control_B.d36;
  proc_control_B.dv8[42] = 0.0;
  proc_control_B.dv8[43] = proc_control_B.t43_d;
  proc_control_B.dv8[44] = proc_control_B.t44_m;
  proc_control_B.dv8[45] = proc_control_B.t45_f;
  proc_control_B.dv8[46] = proc_control_B.d37;
  proc_control_B.dv8[47] = proc_control_B.d38;
  proc_control_B.dv8[48] = proc_control_B.d39;
  proc_control_B.dv8[49] = proc_control_B.d40;
  proc_control_B.dv8[50] = proc_control_B.d41;
  proc_control_B.dv8[51] = proc_control_B.d42;
  proc_control_B.dv8[52] = proc_control_B.d43;
  proc_control_B.dv8[53] = proc_control_B.t24_f;
  proc_control_B.dv8[54] = proc_control_B.t25_d;
  proc_control_B.dv8[55] = -proc_control_B.t43_d;
  proc_control_B.dv8[56] = 0.0;
  proc_control_B.dv8[57] = -proc_control_B.t45_f;
  proc_control_B.dv8[58] = proc_control_B.t44_m;
  proc_control_B.dv8[59] = proc_control_B.t31_tmp_j;
  proc_control_B.dv8[60] = proc_control_B.t27_tmp_g;
  proc_control_B.dv8[61] = proc_control_B.d44;
  proc_control_B.dv8[62] = proc_control_B.d45;
  proc_control_B.dv8[63] = proc_control_B.d46;
  proc_control_B.dv8[64] = proc_control_B.d47;
  proc_control_B.dv8[65] = proc_control_B.t24_tmp_e;
  proc_control_B.dv8[66] = proc_control_B.t33_g;
  proc_control_B.dv8[67] = proc_control_B.t29_i;
  proc_control_B.dv8[68] = -proc_control_B.t44_m;
  proc_control_B.dv8[69] = proc_control_B.t45_f;
  proc_control_B.dv8[70] = 0.0;
  proc_control_B.dv8[71] = -proc_control_B.t43_d;
  proc_control_B.dv8[72] = proc_control_B.t32_tmp;
  proc_control_B.dv8[73] = proc_control_B.t27_k;
  proc_control_B.dv8[74] = proc_control_B.t34_l;
  proc_control_B.dv8[75] = proc_control_B.d48;
  proc_control_B.dv8[76] = proc_control_B.d49;
  proc_control_B.dv8[77] = proc_control_B.d50;
  proc_control_B.dv8[78] = proc_control_B.t25_tmp_j;
  proc_control_B.dv8[79] = proc_control_B.t26_l;
  proc_control_B.dv8[80] = proc_control_B.t23;
  proc_control_B.dv8[81] = -proc_control_B.t45_f;
  proc_control_B.dv8[82] = -proc_control_B.t44_m;
  proc_control_B.dv8[83] = proc_control_B.t43_d;
  proc_control_B.dv8[84] = 0.0;
  proc_control_B.dv8[85] = proc_control_B.t28;
  proc_control_B.dv8[86] = proc_control_B.t29_tmp_j;
  proc_control_B.dv8[87] = proc_control_B.t32;
  proc_control_B.dv8[88] = proc_control_B.t30_h;
  proc_control_B.dv8[89] = proc_control_B.t31_m;
  proc_control_B.dv8[90] = proc_control_B.d51;
  proc_control_B.dv8[91] = proc_control_B.d76;
  proc_control_B.dv8[92] = proc_control_B.d52;
  proc_control_B.dv8[93] = proc_control_B.d53;
  proc_control_B.dv8[94] = 0.0;
  proc_control_B.dv8[95] = 0.0;
  proc_control_B.dv8[96] = 0.0;
  proc_control_B.dv8[97] = 0.0;
  proc_control_B.dv8[98] = proc_control_B.d54;
  proc_control_B.dv8[99] = proc_control_B.d55;
  proc_control_B.dv8[100] = proc_control_B.d56;
  proc_control_B.dv8[101] = proc_control_B.d57;
  proc_control_B.dv8[102] = proc_control_B.d58;
  proc_control_B.dv8[103] = proc_control_B.t11;
  proc_control_B.dv8[104] = proc_control_B.t5_k;
  proc_control_B.dv8[105] = proc_control_B.t37_tmp;
  proc_control_B.dv8[106] = proc_control_B.t17;
  proc_control_B.dv8[107] = 0.0;
  proc_control_B.dv8[108] = 0.0;
  proc_control_B.dv8[109] = 0.0;
  proc_control_B.dv8[110] = 0.0;
  proc_control_B.dv8[111] = proc_control_B.d59;
  proc_control_B.dv8[112] = (((((proc_control_B.t6 * -0.01903042325061665 +
    proc_control_B.t55) + proc_control_B.t58_j) + proc_control_B.t60_a) -
    proc_control_B.t65_o) - proc_control_B.t12_j * y[8] * 0.01903042325061665) -
    0.46415666464918648;
  proc_control_B.dv8[113] = proc_control_B.d60;
  proc_control_B.dv8[114] = proc_control_B.d61;
  proc_control_B.dv8[115] = proc_control_B.d62;
  proc_control_B.dv8[116] = proc_control_B.t22;
  proc_control_B.dv8[117] = proc_control_B.t18;
  proc_control_B.dv8[118] = proc_control_B.t19;
  proc_control_B.dv8[119] = proc_control_B.t35_tmp_j;
  proc_control_B.dv8[120] = 0.0;
  proc_control_B.dv8[121] = 0.0;
  proc_control_B.dv8[122] = 0.0;
  proc_control_B.dv8[123] = 0.0;
  proc_control_B.dv8[124] = proc_control_B.t21_h;
  proc_control_B.dv8[125] = proc_control_B.t36_tmp;
  proc_control_B.dv8[126] = (((((proc_control_B.t7 * -0.01616685726098728 +
    proc_control_B.t56) + proc_control_B.t60_a) + proc_control_B.t62_m) +
    proc_control_B.t68) - proc_control_B.t13 * y[9] * 0.01616685726098728) -
    0.49897707595639768;
  proc_control_B.dv8[127] = proc_control_B.t59_c;
  proc_control_B.dv8[128] = proc_control_B.d63;
  proc_control_B.dv8[129] = proc_control_B.t20;
  proc_control_B.dv8[130] = 0.0;
  proc_control_B.dv8[131] = 0.0;
  proc_control_B.dv8[132] = 0.0;
  proc_control_B.dv8[133] = -proc_control_B.t39_m;
  proc_control_B.dv8[134] = proc_control_B.t42;
  proc_control_B.dv8[135] = proc_control_B.t41_g;
  proc_control_B.dv8[136] = -proc_control_B.t40_n;
  proc_control_B.dv8[137] = proc_control_B.d64;
  proc_control_B.dv8[138] = proc_control_B.d65;
  proc_control_B.dv8[139] = proc_control_B.d66;
  proc_control_B.dv8[140] = proc_control_B.d67;
  proc_control_B.dv8[141] = proc_control_B.d68;
  proc_control_B.dv8[142] = proc_control_B.t8;
  proc_control_B.dv8[143] = 0.0;
  proc_control_B.dv8[144] = 0.0;
  proc_control_B.dv8[145] = 0.0;
  proc_control_B.dv8[146] = -proc_control_B.t40_n;
  proc_control_B.dv8[147] = -proc_control_B.t41_g;
  proc_control_B.dv8[148] = proc_control_B.t42;
  proc_control_B.dv8[149] = proc_control_B.t39_m;
  proc_control_B.dv8[150] = proc_control_B.t9;
  proc_control_B.dv8[151] = proc_control_B.d69;
  proc_control_B.dv8[152] = proc_control_B.d70;
  proc_control_B.dv8[153] = proc_control_B.d71;
  proc_control_B.dv8[154] = proc_control_B.t61_e;
  proc_control_B.dv8[155] = proc_control_B.t2;
  proc_control_B.dv8[156] = 0.0;
  proc_control_B.dv8[157] = 0.0;
  proc_control_B.dv8[158] = 0.0;
  proc_control_B.dv8[159] = -proc_control_B.t41_g;
  proc_control_B.dv8[160] = proc_control_B.t40_n;
  proc_control_B.dv8[161] = -proc_control_B.t39_m;
  proc_control_B.dv8[162] = proc_control_B.t42;
  proc_control_B.dv8[163] = proc_control_B.t10;
  proc_control_B.dv8[164] = proc_control_B.d72;
  proc_control_B.dv8[165] = proc_control_B.d73;
  proc_control_B.dv8[166] = proc_control_B.d74;
  proc_control_B.dv8[167] = proc_control_B.d75;
  proc_control_B.dv8[168] = proc_control_B.t3;
  proc_control_B.b_k_e = 0;
  proc_control_B.b_k_n = 0;
  proc_control_B.b_k_o = 0;
  for (proc_control_B.b_k = 0; proc_control_B.b_k < 6; proc_control_B.b_k++) {
    proc_control_B.b_I_f[proc_control_B.b_k_e] = 1;
    for (proc_control_B.i_a = 0; proc_control_B.i_a < 6; proc_control_B.i_a++) {
      proc_control_B.dv19[proc_control_B.i_a + proc_control_B.b_k_n] =
        proc_control_B.dv8[(proc_control_B.i_a + proc_control_B.b_k_o) + 98];
    }

    proc_control_B.b_k_e += 7;
    proc_control_B.b_k_n += 6;
    proc_control_B.b_k_o += 13;
  }

  proc_control_B.i_a = 0;
  proc_control_B.b_k = 0;
  for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e < 6; proc_control_B.b_k_e
       ++) {
    for (proc_control_B.b_k_n = 0; proc_control_B.b_k_n < 6;
         proc_control_B.b_k_n++) {
      proc_control_B.b_k_o = proc_control_B.b_k_n + proc_control_B.i_a;
      proc_control_B.A_g[proc_control_B.b_k_o] = A[(proc_control_B.b_k_n +
        proc_control_B.b_k) + 98] - static_cast<real_T>
        (proc_control_B.b_I_f[proc_control_B.b_k_o]);
    }

    proc_control_B.i_a += 6;
    proc_control_B.b_k += 13;
  }

  proc_control_mldivide(proc_control_B.dv19, proc_control_B.A_g,
                        proc_control_B.dv20);
  for (proc_control_B.i_a = 0; proc_control_B.i_a < 8; proc_control_B.i_a++) {
    for (proc_control_B.b_k = 0; proc_control_B.b_k < 6; proc_control_B.b_k++) {
      proc_control_B.dv18[proc_control_B.b_k + 6 * proc_control_B.i_a] = 0.0;
    }

    for (proc_control_B.b_k_e = 0; proc_control_B.b_k_e < 6;
         proc_control_B.b_k_e++) {
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 6; proc_control_B.b_k++)
      {
        proc_control_B.b_k_n = 6 * proc_control_B.i_a + proc_control_B.b_k;
        proc_control_B.dv18[proc_control_B.b_k_n] += proc_control_B.dv20[6 *
          proc_control_B.b_k_e + proc_control_B.b_k] * tmp[6 *
          proc_control_B.i_a + proc_control_B.b_k_e];
      }
    }

    for (proc_control_B.b_k = 0; proc_control_B.b_k < 7; proc_control_B.b_k++) {
      B[proc_control_B.b_k + 13 * proc_control_B.i_a] = 0.0;
    }

    for (proc_control_B.b_k = 0; proc_control_B.b_k < 6; proc_control_B.b_k++) {
      B[(proc_control_B.b_k + 13 * proc_control_B.i_a) + 7] =
        proc_control_B.dv18[6 * proc_control_B.i_a + proc_control_B.b_k];
    }
  }

  //  Calculer F(x(k),u(k))
  //  Intégration trapezoidale
  for (proc_control_B.i_a = 0; proc_control_B.i_a < 13; proc_control_B.i_a++) {
    b_this->xl[proc_control_B.i_a] = y[proc_control_B.i_a];
    proc_control_B.x_dot_kk[proc_control_B.i_a] = 0.0;
  }

  for (proc_control_B.b_k = 0; proc_control_B.b_k < 10; proc_control_B.b_k++) {
    proc_control_AUV8QuatSimFcn(b_this->xl, u, proc_control_B.x_dot_k);
    for (proc_control_B.i_a = 0; proc_control_B.i_a < 13; proc_control_B.i_a++)
    {
      proc_control_B.t4_m = proc_control_B.x_dot_k[proc_control_B.i_a];
      b_this->xl[proc_control_B.i_a] += (proc_control_B.t4_m +
        proc_control_B.x_dot_kk[proc_control_B.i_a]) * 0.01 / 2.0;
      proc_control_B.x_dot_kk[proc_control_B.i_a] = proc_control_B.t4_m;
    }

    //  correct Quaternion
    // =================================================================
    //  Fonction qui normalise un quaternion.
    //  quatnormalize de matlab demande areospace block set pour etre compilable. 
    //  Fossen(2021) eq 2.86 p.37
    proc_control_B.t3 = 3.3121686421112381E-170;
    proc_control_B.t4_m = std::abs(b_this->xl[3]);
    if (proc_control_B.t4_m > 3.3121686421112381E-170) {
      proc_control_B.t2 = 1.0;
      proc_control_B.t3 = proc_control_B.t4_m;
    } else {
      proc_control_B.t5_k = proc_control_B.t4_m / 3.3121686421112381E-170;
      proc_control_B.t2 = proc_control_B.t5_k * proc_control_B.t5_k;
    }

    proc_control_B.t4_m = std::abs(b_this->xl[4]);
    if (proc_control_B.t4_m > proc_control_B.t3) {
      proc_control_B.t5_k = proc_control_B.t3 / proc_control_B.t4_m;
      proc_control_B.t2 = proc_control_B.t2 * proc_control_B.t5_k *
        proc_control_B.t5_k + 1.0;
      proc_control_B.t3 = proc_control_B.t4_m;
    } else {
      proc_control_B.t5_k = proc_control_B.t4_m / proc_control_B.t3;
      proc_control_B.t2 += proc_control_B.t5_k * proc_control_B.t5_k;
    }

    proc_control_B.t4_m = std::abs(b_this->xl[5]);
    if (proc_control_B.t4_m > proc_control_B.t3) {
      proc_control_B.t5_k = proc_control_B.t3 / proc_control_B.t4_m;
      proc_control_B.t2 = proc_control_B.t2 * proc_control_B.t5_k *
        proc_control_B.t5_k + 1.0;
      proc_control_B.t3 = proc_control_B.t4_m;
    } else {
      proc_control_B.t5_k = proc_control_B.t4_m / proc_control_B.t3;
      proc_control_B.t2 += proc_control_B.t5_k * proc_control_B.t5_k;
    }

    proc_control_B.t4_m = std::abs(b_this->xl[6]);
    if (proc_control_B.t4_m > proc_control_B.t3) {
      proc_control_B.t5_k = proc_control_B.t3 / proc_control_B.t4_m;
      proc_control_B.t2 = proc_control_B.t2 * proc_control_B.t5_k *
        proc_control_B.t5_k + 1.0;
      proc_control_B.t3 = proc_control_B.t4_m;
    } else {
      proc_control_B.t5_k = proc_control_B.t4_m / proc_control_B.t3;
      proc_control_B.t2 += proc_control_B.t5_k * proc_control_B.t5_k;
    }

    proc_control_B.t2 = proc_control_B.t3 * std::sqrt(proc_control_B.t2);
    b_this->xl[3] /= proc_control_B.t2;
    b_this->xl[4] /= proc_control_B.t2;
    b_this->xl[5] /= proc_control_B.t2;
    b_this->xl[6] /= proc_control_B.t2;
  }

  //  Nominal conditions for discrete-time plant
  std::memcpy(&U[0], &u[0], sizeof(real_T) << 3U);

  // (Cc*x + Dc*u).';
  for (proc_control_B.i_a = 0; proc_control_B.i_a < 13; proc_control_B.i_a++) {
    proc_control_B.t4_m = y[proc_control_B.i_a];
    Y[proc_control_B.i_a] = proc_control_B.t4_m;
    X[proc_control_B.i_a] = proc_control_B.t4_m;
    DX[proc_control_B.i_a] = b_this->xl[proc_control_B.i_a] -
      proc_control_B.t4_m;
  }

  //  save prediction for next step
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
void proc_control::proc_control_WtMult_eD9sgCWi(const real_T W[8], const real_T
  M[1920], int32_T nwt, real_T WM[1920])
{
  int16_T ixw;
  ixw = 1;
  for (proc_control_B.i_kn = 0; proc_control_B.i_kn < 80; proc_control_B.i_kn++)
  {
    proc_control_B.W = W[ixw - 1];
    for (proc_control_B.i33 = 0; proc_control_B.i33 < 24; proc_control_B.i33++)
    {
      proc_control_B.WM_tmp = 80 * proc_control_B.i33 + proc_control_B.i_kn;
      WM[proc_control_B.WM_tmp] = M[proc_control_B.WM_tmp] * proc_control_B.W;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 8) {
      ixw = static_cast<int16_T>(static_cast<int16_T>(8 - nwt) + 1);
    }
  }
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
int32_T proc_control::proc_control_xpotrf_byFguX1H(real_T b_A[625])
{
  int32_T info;
  boolean_T exitg1;
  info = 0;
  proc_control_B.j_dq = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.j_dq < 25)) {
    proc_control_B.idxAjj = proc_control_B.j_dq * 25 + proc_control_B.j_dq;
    proc_control_B.ssq = 0.0;
    if (proc_control_B.j_dq >= 1) {
      proc_control_B.b_ix_o = proc_control_B.j_dq;
      proc_control_B.b_iy_a = proc_control_B.j_dq;
      for (int32_T b_k{0}; b_k < proc_control_B.j_dq; b_k++) {
        proc_control_B.ssq += b_A[proc_control_B.b_ix_o] *
          b_A[proc_control_B.b_iy_a];
        proc_control_B.b_ix_o += 25;
        proc_control_B.b_iy_a += 25;
      }
    }

    proc_control_B.ssq = b_A[proc_control_B.idxAjj] - proc_control_B.ssq;
    if (proc_control_B.ssq > 0.0) {
      proc_control_B.ssq = std::sqrt(proc_control_B.ssq);
      b_A[proc_control_B.idxAjj] = proc_control_B.ssq;
      if (proc_control_B.j_dq + 1 < 25) {
        if (proc_control_B.j_dq != 0) {
          proc_control_B.b_ix_o = proc_control_B.j_dq;
          proc_control_B.b_iy_a = ((proc_control_B.j_dq - 1) * 25 +
            proc_control_B.j_dq) + 2;
          for (int32_T b_k{proc_control_B.j_dq + 2}; b_k <=
               proc_control_B.b_iy_a; b_k += 25) {
            proc_control_B.c_b = -b_A[proc_control_B.b_ix_o];
            proc_control_B.iy_d = proc_control_B.idxAjj + 1;
            proc_control_B.d_o = (b_k - proc_control_B.j_dq) + 23;
            proc_control_B.ia_c = b_k;
            while (proc_control_B.ia_c <= proc_control_B.d_o) {
              b_A[proc_control_B.iy_d] += b_A[proc_control_B.ia_c - 1] *
                proc_control_B.c_b;
              proc_control_B.iy_d++;
              proc_control_B.ia_c++;
            }

            proc_control_B.b_ix_o += 25;
          }
        }

        proc_control_B.ssq = 1.0 / proc_control_B.ssq;
        proc_control_B.b_ix_o = (proc_control_B.idxAjj - proc_control_B.j_dq) +
          25;
        proc_control_B.idxAjj++;
        while (proc_control_B.idxAjj + 1 <= proc_control_B.b_ix_o) {
          b_A[proc_control_B.idxAjj] *= proc_control_B.ssq;
          proc_control_B.idxAjj++;
        }
      }

      proc_control_B.j_dq++;
    } else {
      b_A[proc_control_B.idxAjj] = proc_control_B.ssq;
      info = proc_control_B.j_dq + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
real_T proc_control::proc_control_minimum_0mT3wHDe(const real_T x[25])
{
  real_T ex;
  if (!std::isnan(x[0])) {
    proc_control_B.idx_e4 = 1;
  } else {
    int32_T k;
    boolean_T exitg1;
    proc_control_B.idx_e4 = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 26)) {
      if (!std::isnan(x[k - 1])) {
        proc_control_B.idx_e4 = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (proc_control_B.idx_e4 == 0) {
    ex = x[0];
  } else {
    ex = x[proc_control_B.idx_e4 - 1];
    while (proc_control_B.idx_e4 + 1 <= 25) {
      if (ex > x[proc_control_B.idx_e4]) {
        ex = x[proc_control_B.idx_e4];
      }

      proc_control_B.idx_e4++;
    }
  }

  return ex;
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
void proc_control::proc__mpc_checkhessian_4gOqb0AF(real_T b_H[625], real_T L[625],
  real_T *BadH)
{
  boolean_T guard1{ false };

  *BadH = 0.0;
  std::memcpy(&L[0], &b_H[0], 625U * sizeof(real_T));
  proc_control_B.Tries = proc_control_xpotrf_byFguX1H(L);
  guard1 = false;
  if (proc_control_B.Tries == 0) {
    proc_control_B.Tries_k = 0;
    for (proc_control_B.Tries = 0; proc_control_B.Tries < 25;
         proc_control_B.Tries++) {
      proc_control_B.varargin_1[proc_control_B.Tries] = L[proc_control_B.Tries_k];
      proc_control_B.Tries_k += 26;
    }

    if (proc_control_minimum_0mT3wHDe(proc_control_B.varargin_1) >
        1.4901161193847656E-7) {
    } else {
      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    boolean_T exitg2;
    proc_control_B.normH = 0.0;
    proc_control_B.Tries = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.Tries < 25)) {
      proc_control_B.s_o = 0.0;
      for (proc_control_B.Tries_k = 0; proc_control_B.Tries_k < 25;
           proc_control_B.Tries_k++) {
        proc_control_B.s_o += std::abs(b_H[25 * proc_control_B.Tries_k +
          proc_control_B.Tries]);
      }

      if (std::isnan(proc_control_B.s_o)) {
        proc_control_B.normH = (rtNaN);
        exitg2 = true;
      } else {
        if (proc_control_B.s_o > proc_control_B.normH) {
          proc_control_B.normH = proc_control_B.s_o;
        }

        proc_control_B.Tries++;
      }
    }

    if (proc_control_B.normH >= 1.0E+10) {
      *BadH = 2.0;
    } else {
      boolean_T exitg1;
      proc_control_B.Tries = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.Tries <= 4)) {
        boolean_T guard2{ false };

        proc_control_B.normH = proc_control_rt_powd_snf(10.0, static_cast<real_T>
          (proc_control_B.Tries)) * 1.4901161193847656E-7;
        std::memset(&proc_control_B.b_m[0], 0, 625U * sizeof(int8_T));
        proc_control_B.j_j = 0;
        for (proc_control_B.Tries_k = 0; proc_control_B.Tries_k < 25;
             proc_control_B.Tries_k++) {
          proc_control_B.b_m[proc_control_B.j_j] = 1;
          proc_control_B.j_j += 26;
        }

        for (proc_control_B.Tries_k = 0; proc_control_B.Tries_k < 625;
             proc_control_B.Tries_k++) {
          b_H[proc_control_B.Tries_k] += proc_control_B.normH *
            static_cast<real_T>(proc_control_B.b_m[proc_control_B.Tries_k]);
          L[proc_control_B.Tries_k] = b_H[proc_control_B.Tries_k];
        }

        proc_control_B.Tries_k = proc_control_xpotrf_byFguX1H(L);
        guard2 = false;
        if (proc_control_B.Tries_k == 0) {
          proc_control_B.j_j = 0;
          for (proc_control_B.Tries_k = 0; proc_control_B.Tries_k < 25;
               proc_control_B.Tries_k++) {
            proc_control_B.varargin_1[proc_control_B.Tries_k] =
              L[proc_control_B.j_j];
            proc_control_B.j_j += 26;
          }

          if (proc_control_minimum_0mT3wHDe(proc_control_B.varargin_1) >
              1.4901161193847656E-7) {
            *BadH = 1.0;
            exitg1 = true;
          } else {
            guard2 = true;
          }
        } else {
          guard2 = true;
        }

        if (guard2) {
          *BadH = 3.0;
          proc_control_B.Tries++;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
void proc_control::proc_control_trisolve_TPUoCQlv(const real_T b_A[625], real_T
  b_B[625])
{
  for (proc_control_B.j_lt = 0; proc_control_B.j_lt < 25; proc_control_B.j_lt++)
  {
    proc_control_B.jBcol_l = 25 * proc_control_B.j_lt;
    for (proc_control_B.k_ad = 0; proc_control_B.k_ad < 25; proc_control_B.k_ad
         ++) {
      proc_control_B.kAcol_d = 25 * proc_control_B.k_ad;
      proc_control_B.i32 = proc_control_B.k_ad + proc_control_B.jBcol_l;
      proc_control_B.d80 = b_B[proc_control_B.i32];
      if (proc_control_B.d80 != 0.0) {
        b_B[proc_control_B.i32] = proc_control_B.d80 / b_A[proc_control_B.k_ad +
          proc_control_B.kAcol_d];
        proc_control_B.i_nk = proc_control_B.k_ad + 2;
        while (proc_control_B.i_nk < 26) {
          int32_T tmp;
          tmp = (proc_control_B.i_nk + proc_control_B.jBcol_l) - 1;
          b_B[tmp] -= b_A[(proc_control_B.i_nk + proc_control_B.kAcol_d) - 1] *
            b_B[proc_control_B.i32];
          proc_control_B.i_nk++;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
void proc_control::proc_con_Unconstrained_dIUZCfbX(const real_T b_Hinv[625],
  const real_T f[25], real_T x[25], int32_T n)
{
  proc_control_B.b_i_i = 0;
  while (proc_control_B.b_i_i <= n - 1) {
    proc_control_B.b_Hinv = 0.0;
    for (proc_control_B.i35 = 0; proc_control_B.i35 < 25; proc_control_B.i35++)
    {
      proc_control_B.b_Hinv += -b_Hinv[25 * proc_control_B.i35 +
        proc_control_B.b_i_i] * f[proc_control_B.i35];
    }

    x[proc_control_B.b_i_i] = proc_control_B.b_Hinv;
    proc_control_B.b_i_i++;
  }
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
real_T proc_control::proc_control_norm_vTuG6Asx(const real_T x[25])
{
  real_T y;
  y = 0.0;
  proc_control_B.scale_pm = 3.3121686421112381E-170;
  for (proc_control_B.k_an = 0; proc_control_B.k_an < 25; proc_control_B.k_an++)
  {
    proc_control_B.absxk_l = std::abs(x[proc_control_B.k_an]);
    if (proc_control_B.absxk_l > proc_control_B.scale_pm) {
      proc_control_B.t_e = proc_control_B.scale_pm / proc_control_B.absxk_l;
      y = y * proc_control_B.t_e * proc_control_B.t_e + 1.0;
      proc_control_B.scale_pm = proc_control_B.absxk_l;
    } else {
      proc_control_B.t_e = proc_control_B.absxk_l / proc_control_B.scale_pm;
      y += proc_control_B.t_e * proc_control_B.t_e;
    }
  }

  return proc_control_B.scale_pm * std::sqrt(y);
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
void proc_control::proc_control_abs_hS9HYvNd(const real_T x[25], real_T y[25])
{
  for (proc_control_B.k_mz = 0; proc_control_B.k_mz < 25; proc_control_B.k_mz++)
  {
    y[proc_control_B.k_mz] = std::abs(x[proc_control_B.k_mz]);
  }
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
real_T proc_control::proc_control_maximum_bZyTUL5K(const real_T x[25])
{
  real_T ex;
  if (!std::isnan(x[0])) {
    proc_control_B.idx_fw = 1;
  } else {
    boolean_T exitg1;
    proc_control_B.idx_fw = 0;
    proc_control_B.k_gm = 2;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.k_gm < 26)) {
      if (!std::isnan(x[proc_control_B.k_gm - 1])) {
        proc_control_B.idx_fw = proc_control_B.k_gm;
        exitg1 = true;
      } else {
        proc_control_B.k_gm++;
      }
    }
  }

  if (proc_control_B.idx_fw == 0) {
    ex = x[0];
  } else {
    ex = x[proc_control_B.idx_fw - 1];
    while (proc_control_B.idx_fw + 1 <= 25) {
      if (ex < x[proc_control_B.idx_fw]) {
        ex = x[proc_control_B.idx_fw];
      }

      proc_control_B.idx_fw++;
    }
  }

  return ex;
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
void proc_control::proc_control_abs_4F52yAua(const real_T x[258], real_T y[258])
{
  for (proc_control_B.k_nu = 0; proc_control_B.k_nu < 258; proc_control_B.k_nu++)
  {
    y[proc_control_B.k_nu] = std::abs(x[proc_control_B.k_nu]);
  }
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
void proc_control::proc_control_maximum2_I2IGaf8g(const real_T x[258], real_T y,
  real_T ex[258])
{
  for (proc_control_B.k_ei = 0; proc_control_B.k_ei < 258; proc_control_B.k_ei++)
  {
    ex[proc_control_B.k_ei] = std::fmax(x[proc_control_B.k_ei], y);
  }
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
real_T proc_control::proc_control_xnrm2_39t0XtQD(int32_T n, const real_T x[625],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      proc_control_B.scale_lm = 3.3121686421112381E-170;
      proc_control_B.kend_o = (ix0 + n) - 1;
      proc_control_B.k_ar = ix0;
      while (proc_control_B.k_ar <= proc_control_B.kend_o) {
        proc_control_B.absxk_fu = std::abs(x[proc_control_B.k_ar - 1]);
        if (proc_control_B.absxk_fu > proc_control_B.scale_lm) {
          proc_control_B.t_jf = proc_control_B.scale_lm /
            proc_control_B.absxk_fu;
          y = y * proc_control_B.t_jf * proc_control_B.t_jf + 1.0;
          proc_control_B.scale_lm = proc_control_B.absxk_fu;
        } else {
          proc_control_B.t_jf = proc_control_B.absxk_fu /
            proc_control_B.scale_lm;
          y += proc_control_B.t_jf * proc_control_B.t_jf;
        }

        proc_control_B.k_ar++;
      }

      y = proc_control_B.scale_lm * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
void proc_control::proc_control_xgemv_Frijm775(int32_T b_m, int32_T n, const
  real_T b_A[625], int32_T ia0, const real_T x[625], int32_T ix0, real_T y[25])
{
  if ((b_m != 0) && (n != 0)) {
    proc_control_B.b_iy_kh = 0;
    while (proc_control_B.b_iy_kh <= n - 1) {
      y[proc_control_B.b_iy_kh] = 0.0;
      proc_control_B.b_iy_kh++;
    }

    proc_control_B.b_iy_kh = 0;
    proc_control_B.b_hs = (n - 1) * 25 + ia0;
    proc_control_B.iac_bv = ia0;
    while (proc_control_B.iac_bv <= proc_control_B.b_hs) {
      proc_control_B.ix_c4h = ix0;
      proc_control_B.c_du = 0.0;
      proc_control_B.d_ez = (proc_control_B.iac_bv + b_m) - 1;
      proc_control_B.ia_co = proc_control_B.iac_bv;
      while (proc_control_B.ia_co <= proc_control_B.d_ez) {
        proc_control_B.c_du += b_A[proc_control_B.ia_co - 1] *
          x[proc_control_B.ix_c4h - 1];
        proc_control_B.ix_c4h++;
        proc_control_B.ia_co++;
      }

      y[proc_control_B.b_iy_kh] += proc_control_B.c_du;
      proc_control_B.b_iy_kh++;
      proc_control_B.iac_bv += 25;
    }
  }
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
void proc_control::proc_control_xgerc_Tm5l2D4g(int32_T b_m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[25], real_T b_A[625], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA = ia0 - 1;
    proc_control_B.jy = 0;
    proc_control_B.j = 0;
    while (proc_control_B.j <= n - 1) {
      if (y[proc_control_B.jy] != 0.0) {
        proc_control_B.temp = y[proc_control_B.jy] * alpha1;
        proc_control_B.ix_j = ix0;
        proc_control_B.ijA = proc_control_B.jA;
        proc_control_B.b_ha = b_m + proc_control_B.jA;
        while (proc_control_B.ijA + 1 <= proc_control_B.b_ha) {
          b_A[proc_control_B.ijA] += b_A[proc_control_B.ix_j - 1] *
            proc_control_B.temp;
          proc_control_B.ix_j++;
          proc_control_B.ijA++;
        }
      }

      proc_control_B.jy++;
      proc_control_B.jA += 25;
      proc_control_B.j++;
    }
  }
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
void proc_control::proc_control_qr_LA1ZpyyA(const real_T b_A[625], real_T Q[625],
  real_T R[625])
{
  int32_T exitg1;
  boolean_T exitg2;
  std::memcpy(&proc_control_B.c_A[0], &b_A[0], 625U * sizeof(real_T));
  std::memset(&proc_control_B.tau[0], 0, 25U * sizeof(real_T));
  std::memset(&proc_control_B.work[0], 0, 25U * sizeof(real_T));
  for (proc_control_B.itau = 0; proc_control_B.itau < 25; proc_control_B.itau++)
  {
    proc_control_B.i_b = proc_control_B.itau * 25 + proc_control_B.itau;
    if (proc_control_B.itau + 1 < 25) {
      proc_control_B.atmp = proc_control_B.c_A[proc_control_B.i_b];
      proc_control_B.tau[proc_control_B.itau] = 0.0;
      proc_control_B.beta1 = proc_control_xnrm2_39t0XtQD(24 -
        proc_control_B.itau, proc_control_B.c_A, proc_control_B.i_b + 2);
      if (proc_control_B.beta1 != 0.0) {
        proc_control_B.beta1 = proc_control_rt_hypotd_snf
          (proc_control_B.c_A[proc_control_B.i_b], proc_control_B.beta1);
        if (proc_control_B.c_A[proc_control_B.i_b] >= 0.0) {
          proc_control_B.beta1 = -proc_control_B.beta1;
        }

        if (std::abs(proc_control_B.beta1) < 1.0020841800044864E-292) {
          proc_control_B.knt = 0;
          proc_control_B.c_lastc = (proc_control_B.i_b - proc_control_B.itau) +
            25;
          do {
            proc_control_B.knt++;
            proc_control_B.b_coltop = proc_control_B.i_b + 1;
            while (proc_control_B.b_coltop + 1 <= proc_control_B.c_lastc) {
              proc_control_B.c_A[proc_control_B.b_coltop] *=
                9.9792015476736E+291;
              proc_control_B.b_coltop++;
            }

            proc_control_B.beta1 *= 9.9792015476736E+291;
            proc_control_B.atmp *= 9.9792015476736E+291;
          } while ((std::abs(proc_control_B.beta1) < 1.0020841800044864E-292) &&
                   (proc_control_B.knt < 20));

          proc_control_B.beta1 = proc_control_rt_hypotd_snf(proc_control_B.atmp,
            proc_control_xnrm2_39t0XtQD(24 - proc_control_B.itau,
            proc_control_B.c_A, proc_control_B.i_b + 2));
          if (proc_control_B.atmp >= 0.0) {
            proc_control_B.beta1 = -proc_control_B.beta1;
          }

          proc_control_B.tau[proc_control_B.itau] = (proc_control_B.beta1 -
            proc_control_B.atmp) / proc_control_B.beta1;
          proc_control_B.atmp = 1.0 / (proc_control_B.atmp -
            proc_control_B.beta1);
          proc_control_B.b_coltop = proc_control_B.i_b + 1;
          while (proc_control_B.b_coltop + 1 <= proc_control_B.c_lastc) {
            proc_control_B.c_A[proc_control_B.b_coltop] *= proc_control_B.atmp;
            proc_control_B.b_coltop++;
          }

          proc_control_B.c_lastc = 0;
          while (proc_control_B.c_lastc <= proc_control_B.knt - 1) {
            proc_control_B.beta1 *= 1.0020841800044864E-292;
            proc_control_B.c_lastc++;
          }

          proc_control_B.atmp = proc_control_B.beta1;
        } else {
          proc_control_B.tau[proc_control_B.itau] = (proc_control_B.beta1 -
            proc_control_B.c_A[proc_control_B.i_b]) / proc_control_B.beta1;
          proc_control_B.atmp = 1.0 / (proc_control_B.c_A[proc_control_B.i_b] -
            proc_control_B.beta1);
          proc_control_B.knt = (proc_control_B.i_b - proc_control_B.itau) + 25;
          proc_control_B.c_lastc = proc_control_B.i_b + 1;
          while (proc_control_B.c_lastc + 1 <= proc_control_B.knt) {
            proc_control_B.c_A[proc_control_B.c_lastc] *= proc_control_B.atmp;
            proc_control_B.c_lastc++;
          }

          proc_control_B.atmp = proc_control_B.beta1;
        }
      }

      proc_control_B.c_A[proc_control_B.i_b] = proc_control_B.atmp;
      proc_control_B.beta1 = proc_control_B.c_A[proc_control_B.i_b];
      proc_control_B.c_A[proc_control_B.i_b] = 1.0;
      if (proc_control_B.tau[proc_control_B.itau] != 0.0) {
        proc_control_B.knt = 25 - proc_control_B.itau;
        proc_control_B.c_lastc = (proc_control_B.i_b - proc_control_B.itau) + 24;
        while ((proc_control_B.knt > 0) &&
               (proc_control_B.c_A[proc_control_B.c_lastc] == 0.0)) {
          proc_control_B.knt--;
          proc_control_B.c_lastc--;
        }

        proc_control_B.c_lastc = 24 - proc_control_B.itau;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.c_lastc > 0)) {
          proc_control_B.b_coltop = ((proc_control_B.c_lastc - 1) * 25 +
            proc_control_B.i_b) + 25;
          proc_control_B.coltop = proc_control_B.b_coltop;
          do {
            exitg1 = 0;
            if (proc_control_B.coltop + 1 <= proc_control_B.b_coltop +
                proc_control_B.knt) {
              if (proc_control_B.c_A[proc_control_B.coltop] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.coltop++;
              }
            } else {
              proc_control_B.c_lastc--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt = 0;
        proc_control_B.c_lastc = 0;
      }

      if (proc_control_B.knt > 0) {
        proc_control_xgemv_Frijm775(proc_control_B.knt, proc_control_B.c_lastc,
          proc_control_B.c_A, proc_control_B.i_b + 26, proc_control_B.c_A,
          proc_control_B.i_b + 1, proc_control_B.work);
        proc_control_xgerc_Tm5l2D4g(proc_control_B.knt, proc_control_B.c_lastc,
          -proc_control_B.tau[proc_control_B.itau], proc_control_B.i_b + 1,
          proc_control_B.work, proc_control_B.c_A, proc_control_B.i_b + 26);
      }

      proc_control_B.c_A[proc_control_B.i_b] = proc_control_B.beta1;
    } else {
      proc_control_B.tau[24] = 0.0;
    }
  }

  for (proc_control_B.itau = 0; proc_control_B.itau < 25; proc_control_B.itau++)
  {
    proc_control_B.i_b = 0;
    while (proc_control_B.i_b <= proc_control_B.itau) {
      R[proc_control_B.i_b + 25 * proc_control_B.itau] = proc_control_B.c_A[25 *
        proc_control_B.itau + proc_control_B.i_b];
      proc_control_B.i_b++;
    }

    proc_control_B.i_b = proc_control_B.itau + 1;
    while (proc_control_B.i_b + 1 < 26) {
      R[proc_control_B.i_b + 25 * proc_control_B.itau] = 0.0;
      proc_control_B.i_b++;
    }

    proc_control_B.work[proc_control_B.itau] = 0.0;
  }

  for (proc_control_B.i_b = 24; proc_control_B.i_b >= 0; proc_control_B.i_b--) {
    proc_control_B.knt = (proc_control_B.i_b * 25 + proc_control_B.i_b) + 26;
    if (proc_control_B.i_b + 1 < 25) {
      proc_control_B.c_A[proc_control_B.knt - 26] = 1.0;
      if (proc_control_B.tau[proc_control_B.i_b] != 0.0) {
        proc_control_B.c_lastc = 25 - proc_control_B.i_b;
        proc_control_B.b_coltop = proc_control_B.knt - proc_control_B.i_b;
        while ((proc_control_B.c_lastc > 0) &&
               (proc_control_B.c_A[proc_control_B.b_coltop - 2] == 0.0)) {
          proc_control_B.c_lastc--;
          proc_control_B.b_coltop--;
        }

        proc_control_B.b_coltop = 24 - proc_control_B.i_b;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.b_coltop > 0)) {
          proc_control_B.coltop = (proc_control_B.b_coltop - 1) * 25 +
            proc_control_B.knt;
          proc_control_B.itau = proc_control_B.coltop;
          do {
            exitg1 = 0;
            if (proc_control_B.itau <= (proc_control_B.coltop +
                 proc_control_B.c_lastc) - 1) {
              if (proc_control_B.c_A[proc_control_B.itau - 1] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.itau++;
              }
            } else {
              proc_control_B.b_coltop--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.c_lastc = 0;
        proc_control_B.b_coltop = 0;
      }

      if (proc_control_B.c_lastc > 0) {
        proc_control_xgemv_Frijm775(proc_control_B.c_lastc,
          proc_control_B.b_coltop, proc_control_B.c_A, proc_control_B.knt,
          proc_control_B.c_A, proc_control_B.knt - 25, proc_control_B.work);
        proc_control_xgerc_Tm5l2D4g(proc_control_B.c_lastc,
          proc_control_B.b_coltop, -proc_control_B.tau[proc_control_B.i_b],
          proc_control_B.knt - 25, proc_control_B.work, proc_control_B.c_A,
          proc_control_B.knt);
      }

      proc_control_B.c_lastc = (proc_control_B.knt - proc_control_B.i_b) - 1;
      proc_control_B.b_coltop = proc_control_B.knt - 25;
      while (proc_control_B.b_coltop + 1 <= proc_control_B.c_lastc) {
        proc_control_B.c_A[proc_control_B.b_coltop] *=
          -proc_control_B.tau[proc_control_B.i_b];
        proc_control_B.b_coltop++;
      }
    }

    proc_control_B.c_A[proc_control_B.knt - 26] = 1.0 -
      proc_control_B.tau[proc_control_B.i_b];
    proc_control_B.c_lastc = 0;
    while (proc_control_B.c_lastc <= proc_control_B.i_b - 1) {
      proc_control_B.c_A[(proc_control_B.knt - proc_control_B.c_lastc) - 27] =
        0.0;
      proc_control_B.c_lastc++;
    }
  }

  proc_control_B.knt = 0;
  for (proc_control_B.itau = 0; proc_control_B.itau < 25; proc_control_B.itau++)
  {
    std::memcpy(&Q[proc_control_B.knt], &proc_control_B.c_A[proc_control_B.knt],
                25U * sizeof(real_T));
    proc_control_B.knt += 25;
  }
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
void proc_control::proc_contro_KWIKfactor_Qr1xccKe(const real_T b_Ac[6450],
  const int32_T iC[258], int32_T nA, const real_T b_Linv[625], real_T b_D[625],
  real_T b_H[625], int32_T n, real_T RLinv[625], real_T *Status)
{
  *Status = 1.0;
  std::memset(&RLinv[0], 0, 625U * sizeof(real_T));
  proc_control_B.b_i = 0;
  while (proc_control_B.b_i <= nA - 1) {
    proc_control_B.iC_g = iC[proc_control_B.b_i];
    for (proc_control_B.c_j_c = 0; proc_control_B.c_j_c < 25;
         proc_control_B.c_j_c++) {
      proc_control_B.g_i = 25 * proc_control_B.b_i + proc_control_B.c_j_c;
      RLinv[proc_control_B.g_i] = 0.0;
      for (proc_control_B.d_i = 0; proc_control_B.d_i < 25; proc_control_B.d_i++)
      {
        RLinv[proc_control_B.g_i] += b_Ac[(258 * proc_control_B.d_i +
          proc_control_B.iC_g) - 1] * b_Linv[25 * proc_control_B.d_i +
          proc_control_B.c_j_c];
      }
    }

    proc_control_B.b_i++;
  }

  proc_control_qr_LA1ZpyyA(RLinv, proc_control_B.QQ, proc_control_B.RR);
  proc_control_B.b_i = 0;
  int32_T exitg1;
  do {
    exitg1 = 0;
    if (proc_control_B.b_i <= nA - 1) {
      if (std::abs(proc_control_B.RR[25 * proc_control_B.b_i +
                   proc_control_B.b_i]) < 1.0E-12) {
        *Status = -2.0;
        exitg1 = 1;
      } else {
        proc_control_B.b_i++;
      }
    } else {
      proc_control_B.d_i = 0;
      while (proc_control_B.d_i <= n - 1) {
        proc_control_B.g_i = 0;
        while (proc_control_B.g_i <= n - 1) {
          proc_control_B.b_Linv_h = 0.0;
          for (proc_control_B.c_j_c = 0; proc_control_B.c_j_c < 25;
               proc_control_B.c_j_c++) {
            proc_control_B.b_Linv_h += b_Linv[25 * proc_control_B.d_i +
              proc_control_B.c_j_c] * proc_control_B.QQ[25 * proc_control_B.g_i
              + proc_control_B.c_j_c];
          }

          proc_control_B.TL[proc_control_B.d_i + 25 * proc_control_B.g_i] =
            proc_control_B.b_Linv_h;
          proc_control_B.g_i++;
        }

        proc_control_B.d_i++;
      }

      std::memset(&RLinv[0], 0, 625U * sizeof(real_T));
      proc_control_B.c_j_c = nA - 1;
      while (proc_control_B.c_j_c + 1 > 0) {
        proc_control_B.g_i = 25 * proc_control_B.c_j_c + proc_control_B.c_j_c;
        RLinv[proc_control_B.g_i] = 1.0;
        proc_control_B.b_i = proc_control_B.c_j_c;
        while (proc_control_B.b_i + 1 <= nA) {
          proc_control_B.d_i = 25 * proc_control_B.b_i + proc_control_B.c_j_c;
          RLinv[proc_control_B.d_i] /= proc_control_B.RR[proc_control_B.g_i];
          proc_control_B.b_i++;
        }

        if (proc_control_B.c_j_c + 1 > 1) {
          proc_control_B.b_i = 0;
          while (proc_control_B.b_i <= proc_control_B.c_j_c - 1) {
            proc_control_B.d_i = proc_control_B.c_j_c;
            while (proc_control_B.d_i + 1 <= nA) {
              proc_control_B.g_i = 25 * proc_control_B.d_i + proc_control_B.b_i;
              RLinv[proc_control_B.g_i] -= proc_control_B.RR[25 *
                proc_control_B.c_j_c + proc_control_B.b_i] * RLinv[25 *
                proc_control_B.d_i + proc_control_B.c_j_c];
              proc_control_B.d_i++;
            }

            proc_control_B.b_i++;
          }
        }

        proc_control_B.c_j_c--;
      }

      proc_control_B.b_i = 0;
      while (proc_control_B.b_i <= n - 1) {
        proc_control_B.d_i = proc_control_B.b_i;
        while (proc_control_B.d_i + 1 <= n) {
          proc_control_B.c_j_c = 25 * proc_control_B.d_i + proc_control_B.b_i;
          b_H[proc_control_B.c_j_c] = 0.0;
          proc_control_B.g_i = nA;
          while (proc_control_B.g_i + 1 <= n) {
            b_H[proc_control_B.c_j_c] -= proc_control_B.TL[25 *
              proc_control_B.g_i + proc_control_B.b_i] * proc_control_B.TL[25 *
              proc_control_B.g_i + proc_control_B.d_i];
            proc_control_B.g_i++;
          }

          b_H[proc_control_B.d_i + 25 * proc_control_B.b_i] =
            b_H[proc_control_B.c_j_c];
          proc_control_B.d_i++;
        }

        proc_control_B.b_i++;
      }

      proc_control_B.d_i = 0;
      while (proc_control_B.d_i <= nA - 1) {
        proc_control_B.g_i = 0;
        while (proc_control_B.g_i <= n - 1) {
          proc_control_B.c_j_c = 25 * proc_control_B.d_i + proc_control_B.g_i;
          b_D[proc_control_B.c_j_c] = 0.0;
          proc_control_B.b_i = proc_control_B.d_i;
          while (proc_control_B.b_i + 1 <= nA) {
            b_D[proc_control_B.c_j_c] += proc_control_B.TL[25 *
              proc_control_B.b_i + proc_control_B.g_i] * RLinv[25 *
              proc_control_B.b_i + proc_control_B.d_i];
            proc_control_B.b_i++;
          }

          proc_control_B.g_i++;
        }

        proc_control_B.d_i++;
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
real_T proc_control::proc_control_mtimes_oGNIPo7k(const real_T b_A[25], const
  real_T b_B[25])
{
  real_T b_C;
  b_C = 0.0;
  for (proc_control_B.k_fp5 = 0; proc_control_B.k_fp5 < 25; proc_control_B.k_fp5
       ++) {
    b_C += b_A[proc_control_B.k_fp5] * b_B[proc_control_B.k_fp5];
  }

  return b_C;
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
real_T proc_control::proc_control_eps_AH2epkhQ(void)
{
  frexp(1.0, &proc_control_B.exponent);
  return 2.2204460492503131E-16;
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
void proc_control::proc_co_DropConstraint_MueFKkTj(int32_T kDrop, boolean_T iA
  [258], int32_T *nA, int32_T iC[258])
{
  if (kDrop > 0) {
    iA[iC[kDrop - 1] - 1] = false;
    if (kDrop < *nA) {
      proc_control_B.i_g4 = kDrop;
      while (proc_control_B.i_g4 <= *nA - 1) {
        iC[proc_control_B.i_g4 - 1] = iC[proc_control_B.i_g4];
        proc_control_B.i_g4++;
      }
    }

    iC[*nA - 1] = 0;
    (*nA)--;
  }
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
void proc_control::proc_control_qpkwik(const real_T b_Linv[625], const real_T
  b_Hinv[625], const real_T f[25], const real_T b_Ac[6450], const real_T b[258],
  boolean_T iA[258], int32_T maxiter, real_T FeasTol, real_T x[25], real_T
  lambda[258], int32_T *status)
{
  boolean_T ColdReset;
  boolean_T DualFeasible;
  boolean_T cTolComputed;
  boolean_T guard1{ false };

  std::memset(&x[0], 0, 25U * sizeof(real_T));
  std::memset(&lambda[0], 0, 258U * sizeof(real_T));
  *status = 1;
  std::memset(&proc_control_B.r[0], 0, 25U * sizeof(real_T));
  proc_control_B.rMin = 0.0;
  cTolComputed = false;
  for (proc_control_B.i_g = 0; proc_control_B.i_g < 258; proc_control_B.i_g++) {
    proc_control_B.cTol[proc_control_B.i_g] = 1.0;
    proc_control_B.iC[proc_control_B.i_g] = 0;
  }

  proc_control_B.nA = 0;
  for (proc_control_B.tmp = 0; proc_control_B.tmp < 258; proc_control_B.tmp++) {
    if (iA[proc_control_B.tmp]) {
      proc_control_B.nA++;
      proc_control_B.iC[proc_control_B.nA - 1] = proc_control_B.tmp + 1;
    }
  }

  guard1 = false;
  if (proc_control_B.nA > 0) {
    int32_T exitg3;
    std::memset(&proc_control_B.Opt[0], 0, 50U * sizeof(real_T));
    for (proc_control_B.i_g = 0; proc_control_B.i_g < 25; proc_control_B.i_g++)
    {
      proc_control_B.Rhs[proc_control_B.i_g] = f[proc_control_B.i_g];
      proc_control_B.Rhs[proc_control_B.i_g + 25] = 0.0;
    }

    DualFeasible = false;
    proc_control_B.tmp = static_cast<int32_T>(std::round(0.3 *
      static_cast<real_T>(proc_control_B.nA)));
    ColdReset = false;
    do {
      exitg3 = 0;
      if ((!DualFeasible) && (proc_control_B.nA > 0) && (*status <= maxiter)) {
        proc_contro_KWIKfactor_Qr1xccKe(b_Ac, proc_control_B.iC,
          proc_control_B.nA, b_Linv, proc_control_B.b_D, proc_control_B.b_H,
          proc_control_degrees, proc_control_B.RLinv, &proc_control_B.Xnorm0);
        if (proc_control_B.Xnorm0 < 0.0) {
          if (ColdReset) {
            *status = -2;
            exitg3 = 2;
          } else {
            proc_control_B.nA = 0;
            std::memset(&iA[0], 0, 258U * sizeof(boolean_T));
            std::memset(&proc_control_B.iC[0], 0, 258U * sizeof(int32_T));
            ColdReset = true;
          }
        } else {
          proc_control_B.i_g = 0;
          while (proc_control_B.i_g <= proc_control_B.nA - 1) {
            proc_control_B.Rhs[proc_control_B.i_g + 25] =
              b[proc_control_B.iC[proc_control_B.i_g] - 1];
            proc_control_B.iSave = proc_control_B.i_g;
            while (proc_control_B.iSave + 1 <= proc_control_B.nA) {
              proc_control_B.U_tmp = 25 * proc_control_B.i_g +
                proc_control_B.iSave;
              proc_control_B.U[proc_control_B.U_tmp] = 0.0;
              proc_control_B.i_i = 0;
              while (proc_control_B.i_i <= proc_control_B.nA - 1) {
                proc_control_B.U[proc_control_B.U_tmp] += proc_control_B.RLinv
                  [25 * proc_control_B.i_i + proc_control_B.iSave] *
                  proc_control_B.RLinv[25 * proc_control_B.i_i +
                  proc_control_B.i_g];
                proc_control_B.i_i++;
              }

              proc_control_B.U[proc_control_B.i_g + 25 * proc_control_B.iSave] =
                proc_control_B.U[proc_control_B.U_tmp];
              proc_control_B.iSave++;
            }

            proc_control_B.i_g++;
          }

          for (proc_control_B.i_g = 0; proc_control_B.i_g < 25;
               proc_control_B.i_g++) {
            proc_control_B.Xnorm0 = 0.0;
            for (proc_control_B.i_i = 0; proc_control_B.i_i < 25;
                 proc_control_B.i_i++) {
              proc_control_B.Xnorm0 += proc_control_B.b_H[25 *
                proc_control_B.i_i + proc_control_B.i_g] *
                proc_control_B.Rhs[proc_control_B.i_i];
            }

            proc_control_B.Opt[proc_control_B.i_g] = proc_control_B.Xnorm0;
            proc_control_B.iSave = 0;
            while (proc_control_B.iSave <= proc_control_B.nA - 1) {
              proc_control_B.Opt[proc_control_B.i_g] += proc_control_B.b_D[25 *
                proc_control_B.iSave + proc_control_B.i_g] *
                proc_control_B.Rhs[proc_control_B.iSave + 25];
              proc_control_B.iSave++;
            }
          }

          proc_control_B.i_g = 0;
          while (proc_control_B.i_g <= proc_control_B.nA - 1) {
            proc_control_B.Xnorm0 = 0.0;
            for (proc_control_B.i_i = 0; proc_control_B.i_i < 25;
                 proc_control_B.i_i++) {
              proc_control_B.Xnorm0 += proc_control_B.b_D[25 *
                proc_control_B.i_g + proc_control_B.i_i] *
                proc_control_B.Rhs[proc_control_B.i_i];
            }

            proc_control_B.Opt[proc_control_B.i_g + 25] = proc_control_B.Xnorm0;
            proc_control_B.iSave = 0;
            while (proc_control_B.iSave <= proc_control_B.nA - 1) {
              proc_control_B.Opt[proc_control_B.i_g + 25] += proc_control_B.U[25
                * proc_control_B.iSave + proc_control_B.i_g] *
                proc_control_B.Rhs[proc_control_B.iSave + 25];
              proc_control_B.iSave++;
            }

            proc_control_B.i_g++;
          }

          proc_control_B.Xnorm0 = -1.0E-12;
          proc_control_B.i_g = 0;
          proc_control_B.iSave = 25;
          while (proc_control_B.iSave - 25 <= proc_control_B.nA - 1) {
            lambda[proc_control_B.iC[proc_control_B.iSave - 25] - 1] =
              proc_control_B.Opt[proc_control_B.iSave];
            if ((proc_control_B.Opt[proc_control_B.iSave] <
                 proc_control_B.Xnorm0) && (proc_control_B.iSave - 24 <=
                 proc_control_B.nA)) {
              proc_control_B.i_g = proc_control_B.iSave - 24;
              proc_control_B.Xnorm0 = proc_control_B.Opt[proc_control_B.iSave];
            }

            proc_control_B.iSave++;
          }

          if (proc_control_B.i_g <= 0) {
            DualFeasible = true;
            std::memcpy(&x[0], &proc_control_B.Opt[0], 25U * sizeof(real_T));
          } else {
            (*status)++;
            if (proc_control_B.tmp <= 5) {
              proc_control_B.i_i = 5;
            } else {
              proc_control_B.i_i = proc_control_B.tmp;
            }

            if (*status > proc_control_B.i_i) {
              proc_control_B.nA = 0;
              std::memset(&iA[0], 0, 258U * sizeof(boolean_T));
              std::memset(&proc_control_B.iC[0], 0, 258U * sizeof(int32_T));
              ColdReset = true;
            } else {
              lambda[proc_control_B.iC[proc_control_B.i_g - 1] - 1] = 0.0;
              proc_co_DropConstraint_MueFKkTj(proc_control_B.i_g, iA,
                &proc_control_B.nA, proc_control_B.iC);
            }
          }
        }
      } else {
        if (proc_control_B.nA <= 0) {
          std::memset(&lambda[0], 0, 258U * sizeof(real_T));
          proc_con_Unconstrained_dIUZCfbX(b_Hinv, f, x, proc_control_degrees);
        }

        exitg3 = 1;
      }
    } while (exitg3 == 0);

    if (exitg3 == 1) {
      guard1 = true;
    }
  } else {
    proc_con_Unconstrained_dIUZCfbX(b_Hinv, f, x, proc_control_degrees);
    guard1 = true;
  }

  if (guard1) {
    boolean_T exitg2;
    proc_control_B.Xnorm0 = proc_control_norm_vTuG6Asx(x);
    exitg2 = false;
    while ((!exitg2) && (*status <= maxiter)) {
      proc_control_B.cMin = -FeasTol;
      proc_control_B.tmp = -1;
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 258; proc_control_B.i_g
           ++) {
        proc_control_B.t_c = proc_control_B.cTol[proc_control_B.i_g];
        if (!cTolComputed) {
          for (proc_control_B.i_i = 0; proc_control_B.i_i < 25;
               proc_control_B.i_i++) {
            proc_control_B.b_Ac[proc_control_B.i_i] = b_Ac[258 *
              proc_control_B.i_i + proc_control_B.i_g] * x[proc_control_B.i_i];
          }

          proc_control_abs_hS9HYvNd(proc_control_B.b_Ac, proc_control_B.z_n);
          proc_control_B.t_c = std::fmax(proc_control_B.t_c,
            proc_control_maximum_bZyTUL5K(proc_control_B.z_n));
        }

        if (!iA[proc_control_B.i_g]) {
          proc_control_B.b_Ac_nn = 0.0;
          for (proc_control_B.i_i = 0; proc_control_B.i_i < 25;
               proc_control_B.i_i++) {
            proc_control_B.b_Ac_nn += b_Ac[258 * proc_control_B.i_i +
              proc_control_B.i_g] * x[proc_control_B.i_i];
          }

          proc_control_B.cVal = (proc_control_B.b_Ac_nn - b[proc_control_B.i_g])
            / proc_control_B.t_c;
          if (proc_control_B.cVal < proc_control_B.cMin) {
            proc_control_B.cMin = proc_control_B.cVal;
            proc_control_B.tmp = proc_control_B.i_g;
          }
        }

        proc_control_B.cTol[proc_control_B.i_g] = proc_control_B.t_c;
      }

      cTolComputed = true;
      if (proc_control_B.tmp + 1 <= 0) {
        exitg2 = true;
      } else if (*status == maxiter) {
        *status = 0;
        exitg2 = true;
      } else {
        int32_T exitg1;
        do {
          exitg1 = 0;
          if ((proc_control_B.tmp + 1 > 0) && (*status <= maxiter)) {
            boolean_T guard2{ false };

            guard2 = false;
            if (proc_control_B.nA == 0) {
              for (proc_control_B.i_i = 0; proc_control_B.i_i < 25;
                   proc_control_B.i_i++) {
                proc_control_B.z_n[proc_control_B.i_i] = 0.0;
                for (proc_control_B.i_g = 0; proc_control_B.i_g < 25;
                     proc_control_B.i_g++) {
                  proc_control_B.z_n[proc_control_B.i_i] += b_Hinv[25 *
                    proc_control_B.i_g + proc_control_B.i_i] * b_Ac[258 *
                    proc_control_B.i_g + proc_control_B.tmp];
                }
              }

              guard2 = true;
            } else {
              proc_contro_KWIKfactor_Qr1xccKe(b_Ac, proc_control_B.iC,
                proc_control_B.nA, b_Linv, proc_control_B.b_D,
                proc_control_B.b_H, proc_control_degrees, proc_control_B.RLinv,
                &proc_control_B.cMin);
              if (proc_control_B.cMin <= 0.0) {
                *status = -2;
                exitg1 = 1;
              } else {
                for (proc_control_B.i_i = 0; proc_control_B.i_i < 625;
                     proc_control_B.i_i++) {
                  proc_control_B.U[proc_control_B.i_i] =
                    -proc_control_B.b_H[proc_control_B.i_i];
                }

                for (proc_control_B.i_i = 0; proc_control_B.i_i < 25;
                     proc_control_B.i_i++) {
                  proc_control_B.z_n[proc_control_B.i_i] = 0.0;
                  for (proc_control_B.i_g = 0; proc_control_B.i_g < 25;
                       proc_control_B.i_g++) {
                    proc_control_B.z_n[proc_control_B.i_i] += proc_control_B.U
                      [25 * proc_control_B.i_g + proc_control_B.i_i] * b_Ac[258 *
                      proc_control_B.i_g + proc_control_B.tmp];
                  }
                }

                proc_control_B.i_g = 0;
                while (proc_control_B.i_g <= proc_control_B.nA - 1) {
                  proc_control_B.b_Ac_nn = 0.0;
                  for (proc_control_B.i_i = 0; proc_control_B.i_i < 25;
                       proc_control_B.i_i++) {
                    proc_control_B.b_Ac_nn += b_Ac[258 * proc_control_B.i_i +
                      proc_control_B.tmp] * proc_control_B.b_D[25 *
                      proc_control_B.i_g + proc_control_B.i_i];
                  }

                  proc_control_B.r[proc_control_B.i_g] = proc_control_B.b_Ac_nn;
                  proc_control_B.i_g++;
                }

                guard2 = true;
              }
            }

            if (guard2) {
              boolean_T exitg4;
              proc_control_B.i_g = 0;
              proc_control_B.cMin = 0.0;
              DualFeasible = true;
              ColdReset = true;
              if (proc_control_B.nA > 0) {
                proc_control_B.iSave = 0;
                exitg4 = false;
                while ((!exitg4) && (proc_control_B.iSave <= proc_control_B.nA -
                                     1)) {
                  if (proc_control_B.r[proc_control_B.iSave] >= 1.0E-12) {
                    ColdReset = false;
                    exitg4 = true;
                  } else {
                    proc_control_B.iSave++;
                  }
                }
              }

              if ((proc_control_B.nA != 0) && (!ColdReset)) {
                proc_control_B.i_i = 0;
                while (proc_control_B.i_i <= proc_control_B.nA - 1) {
                  if (proc_control_B.r[proc_control_B.i_i] > 1.0E-12) {
                    proc_control_B.cVal =
                      lambda[proc_control_B.iC[proc_control_B.i_i] - 1] /
                      proc_control_B.r[proc_control_B.i_i];
                    if ((proc_control_B.i_g == 0) || (proc_control_B.cVal <
                         proc_control_B.rMin)) {
                      proc_control_B.rMin = proc_control_B.cVal;
                      proc_control_B.i_g = proc_control_B.i_i + 1;
                    }
                  }

                  proc_control_B.i_i++;
                }

                if (proc_control_B.i_g > 0) {
                  proc_control_B.cMin = proc_control_B.rMin;
                  DualFeasible = false;
                }
              }

              for (proc_control_B.i_i = 0; proc_control_B.i_i < 25;
                   proc_control_B.i_i++) {
                proc_control_B.b_Ac[proc_control_B.i_i] = b_Ac[258 *
                  proc_control_B.i_i + proc_control_B.tmp];
              }

              proc_control_B.cVal = proc_control_mtimes_oGNIPo7k
                (proc_control_B.z_n, proc_control_B.b_Ac);
              if (proc_control_B.cVal <= 0.0) {
                proc_control_B.cVal = 0.0;
                ColdReset = true;
              } else {
                proc_control_B.b_Ac_nn = 0.0;
                for (proc_control_B.i_i = 0; proc_control_B.i_i < 25;
                     proc_control_B.i_i++) {
                  proc_control_B.b_Ac_nn += b_Ac[258 * proc_control_B.i_i +
                    proc_control_B.tmp] * x[proc_control_B.i_i];
                }

                proc_control_B.cVal = (b[proc_control_B.tmp] -
                  proc_control_B.b_Ac_nn) / proc_control_B.cVal;
                ColdReset = false;
              }

              if (DualFeasible && ColdReset) {
                *status = -1;
                exitg1 = 1;
              } else {
                if (ColdReset) {
                  proc_control_B.t_c = proc_control_B.cMin;
                } else if (DualFeasible) {
                  proc_control_B.t_c = proc_control_B.cVal;
                } else if (proc_control_B.cMin < proc_control_B.cVal) {
                  proc_control_B.t_c = proc_control_B.cMin;
                } else {
                  proc_control_B.t_c = proc_control_B.cVal;
                }

                proc_control_B.i_i = 0;
                while (proc_control_B.i_i <= proc_control_B.nA - 1) {
                  lambda[proc_control_B.iC[proc_control_B.i_i] - 1] -=
                    proc_control_B.t_c * proc_control_B.r[proc_control_B.i_i];
                  if ((proc_control_B.iC[proc_control_B.i_i] <= 258) &&
                      (lambda[proc_control_B.iC[proc_control_B.i_i] - 1] < 0.0))
                  {
                    lambda[proc_control_B.iC[proc_control_B.i_i] - 1] = 0.0;
                  }

                  proc_control_B.i_i++;
                }

                lambda[proc_control_B.tmp] += proc_control_B.t_c;
                if (std::abs(proc_control_B.t_c - proc_control_B.cMin) <
                    proc_control_eps_AH2epkhQ()) {
                  proc_co_DropConstraint_MueFKkTj(proc_control_B.i_g, iA,
                    &proc_control_B.nA, proc_control_B.iC);
                }

                if (!ColdReset) {
                  for (proc_control_B.i_i = 0; proc_control_B.i_i < 25;
                       proc_control_B.i_i++) {
                    x[proc_control_B.i_i] += proc_control_B.t_c *
                      proc_control_B.z_n[proc_control_B.i_i];
                  }

                  if (std::abs(proc_control_B.t_c - proc_control_B.cVal) <
                      proc_control_eps_AH2epkhQ()) {
                    if (proc_control_B.nA == proc_control_degrees) {
                      *status = -1;
                      exitg1 = 1;
                    } else {
                      proc_control_B.nA++;
                      proc_control_B.iC[proc_control_B.nA - 1] =
                        proc_control_B.tmp + 1;
                      proc_control_B.i_g = proc_control_B.nA - 1;
                      exitg4 = false;
                      while ((!exitg4) && (proc_control_B.i_g + 1 > 1)) {
                        proc_control_B.i_i =
                          proc_control_B.iC[proc_control_B.i_g - 1];
                        if (proc_control_B.iC[proc_control_B.i_g] >
                            proc_control_B.i_i) {
                          exitg4 = true;
                        } else {
                          proc_control_B.iSave =
                            proc_control_B.iC[proc_control_B.i_g];
                          proc_control_B.iC[proc_control_B.i_g] =
                            proc_control_B.i_i;
                          proc_control_B.iC[proc_control_B.i_g - 1] =
                            proc_control_B.iSave;
                          proc_control_B.i_g--;
                        }
                      }

                      iA[proc_control_B.tmp] = true;
                      proc_control_B.tmp = -1;
                      (*status)++;
                    }
                  } else {
                    (*status)++;
                  }
                } else {
                  (*status)++;
                }
              }
            }
          } else {
            proc_control_B.cMin = proc_control_norm_vTuG6Asx(x);
            if (std::abs(proc_control_B.cMin - proc_control_B.Xnorm0) > 0.001) {
              proc_control_B.Xnorm0 = proc_control_B.cMin;
              proc_control_abs_4F52yAua(b, proc_control_B.dv4);
              proc_control_maximum2_I2IGaf8g(proc_control_B.dv4, 1.0,
                proc_control_B.cTol);
              cTolComputed = false;
            }

            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S176>/FixedHorizonOptimizer'
void proc_control::proc_control_mpcblock_optimizer(const real_T rseq[130], const
  real_T vseq[11], const real_T umin[8], const real_T umax[8], const real_T x[21],
  const real_T old_u[8], const boolean_T iA[258], const real_T b_Mlim[258],
  real_T b_Mx[5418], real_T b_Mu1[2064], real_T b_Mv[2838], const real_T
  b_utarget[80], const real_T b_uoff[8], real_T b_H[625], real_T b_Ac[6450],
  const real_T ywt[13], const real_T uwt[8], const real_T duwt[8], const real_T
  b_Jm[1920], const real_T b_I1[640], const real_T b_A[441], const real_T Bu
  [1848], const real_T Bv[231], const real_T b_C[273], const real_T Dv[143],
  const int32_T b_Mrows[258], const real_T b_RMVscale[8], real_T u[8], real_T
  useq[88], real_T *status, boolean_T iAout[258])
{
  static const int8_T c_A[100]{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
    1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1 };

  int16_T ixw;
  boolean_T exitg1;
  std::memset(&useq[0], 0, 88U * sizeof(real_T));
  std::memset(&iAout[0], 0, 258U * sizeof(boolean_T));
  for (proc_control_B.i_h = 0; proc_control_B.i_h < 21; proc_control_B.i_h++) {
    std::memset(&proc_control_B.CA[proc_control_B.i_h * 13], 0, 13U * sizeof
                (real_T));
    for (proc_control_B.i1 = 0; proc_control_B.i1 < 21; proc_control_B.i1++) {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.CA_tmp = 13 * proc_control_B.i_h + proc_control_B.j2;
        proc_control_B.CA[proc_control_B.CA_tmp] += b_C[13 * proc_control_B.i1 +
          proc_control_B.j2] * b_A[21 * proc_control_B.i_h + proc_control_B.i1];
      }
    }
  }

  for (proc_control_B.i_h = 0; proc_control_B.i_h < 8; proc_control_B.i_h++) {
    std::memset(&proc_control_B.Sum_o3[proc_control_B.i_h * 13], 0, 13U * sizeof
                (real_T));
    for (proc_control_B.i1 = 0; proc_control_B.i1 < 21; proc_control_B.i1++) {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.Sum_tmp = 13 * proc_control_B.i_h + proc_control_B.j2;
        proc_control_B.Sum_o3[proc_control_B.Sum_tmp] += b_C[13 *
          proc_control_B.i1 + proc_control_B.j2] * Bu[21 * proc_control_B.i_h +
          proc_control_B.i1];
      }
    }
  }

  std::memset(&proc_control_B.rows[0], 0, 13U * sizeof(real_T));
  proc_control_B.j2 = 0;
  for (proc_control_B.i1 = 0; proc_control_B.i1 < 21; proc_control_B.i1++) {
    for (proc_control_B.i_h = 0; proc_control_B.i_h < 13; proc_control_B.i_h++)
    {
      proc_control_B.rows[proc_control_B.i_h] += b_C[proc_control_B.i_h +
        proc_control_B.j2] * Bv[proc_control_B.i1];
    }

    proc_control_B.j2 += 13;
  }

  for (proc_control_B.i_h = 0; proc_control_B.i_h < 13; proc_control_B.i_h++) {
    proc_control_B.b_Hv[proc_control_B.i_h] =
      proc_control_B.rows[proc_control_B.i_h];
    proc_control_B.b_Hv[proc_control_B.i_h + 130] = Dv[proc_control_B.i_h];
  }

  proc_control_B.i_h = 0;
  for (proc_control_B.j2 = 0; proc_control_B.j2 < 9; proc_control_B.j2++) {
    std::memset(&proc_control_B.b_Hv[proc_control_B.i_h + 260], 0, 13U * sizeof
                (real_T));
    proc_control_B.i_h += 130;
  }

  proc_control_B.i_h = 0;
  for (proc_control_B.j2 = 0; proc_control_B.j2 < 11; proc_control_B.j2++) {
    std::memset(&proc_control_B.b_Hv[proc_control_B.i_h + 13], 0, 117U * sizeof
                (real_T));
    proc_control_B.i_h += 130;
  }

  for (proc_control_B.i_h = 0; proc_control_B.i_h < 21; proc_control_B.i_h++) {
    std::memcpy(&proc_control_B.b_Sx[proc_control_B.i_h * 130],
                &proc_control_B.CA[proc_control_B.i_h * 13], 13U * sizeof(real_T));
    std::memset(&proc_control_B.b_Sx[proc_control_B.i_h * 130 + 13], 0, 117U *
                sizeof(real_T));
  }

  for (proc_control_B.i_h = 0; proc_control_B.i_h < 8; proc_control_B.i_h++) {
    std::memcpy(&proc_control_B.b_Su1[proc_control_B.i_h * 130],
                &proc_control_B.Sum_o3[proc_control_B.i_h * 13], 13U * sizeof
                (real_T));
    std::memset(&proc_control_B.b_Su1[proc_control_B.i_h * 130 + 13], 0, 117U *
                sizeof(real_T));
    std::memcpy(&proc_control_B.Su[proc_control_B.i_h * 130],
                &proc_control_B.Sum_o3[proc_control_B.i_h * 13], 13U * sizeof
                (real_T));
  }

  proc_control_B.i_h = 0;
  for (proc_control_B.j2 = 0; proc_control_B.j2 < 72; proc_control_B.j2++) {
    std::memset(&proc_control_B.Su[proc_control_B.i_h + 1040], 0, 13U * sizeof
                (real_T));
    proc_control_B.i_h += 130;
  }

  proc_control_B.i_h = 0;
  for (proc_control_B.j2 = 0; proc_control_B.j2 < 80; proc_control_B.j2++) {
    std::memset(&proc_control_B.Su[proc_control_B.i_h + 13], 0, 117U * sizeof
                (real_T));
    proc_control_B.i_h += 130;
  }

  for (proc_control_B.kidx = 0; proc_control_B.kidx < 9; proc_control_B.kidx++)
  {
    proc_control_B.CA_tmp = (proc_control_B.kidx + 1) * 13;
    for (proc_control_B.i_h = 0; proc_control_B.i_h < 13; proc_control_B.i_h++)
    {
      proc_control_B.rows[proc_control_B.i_h] = static_cast<real_T>
        (proc_control_B.CA_tmp + proc_control_B.i_h) + 1.0;
      proc_control_B.j2 = 0;
      proc_control_B.i1 = 0;
      for (proc_control_B.i_p = 0; proc_control_B.i_p < 8; proc_control_B.i_p++)
      {
        proc_control_B.Sum_f = 0.0;
        proc_control_B.Sum_tmp = 0;
        for (proc_control_B.b_Linv_tmp = 0; proc_control_B.b_Linv_tmp < 21;
             proc_control_B.b_Linv_tmp++) {
          proc_control_B.Sum_f += proc_control_B.CA[proc_control_B.Sum_tmp +
            proc_control_B.i_h] * Bu[proc_control_B.b_Linv_tmp +
            proc_control_B.i1];
          proc_control_B.Sum_tmp += 13;
        }

        proc_control_B.Sum_tmp = proc_control_B.j2 + proc_control_B.i_h;
        proc_control_B.Sum_o3[proc_control_B.Sum_tmp] += proc_control_B.Sum_f;
        proc_control_B.j2 += 13;
        proc_control_B.i1 += 21;
      }

      proc_control_B.b_Su1_tmp[proc_control_B.i_h] = static_cast<uint8_T>
        (proc_control_B.rows[proc_control_B.i_h]);
    }

    for (proc_control_B.i_h = 0; proc_control_B.i_h < 8; proc_control_B.i_h++) {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.Sum_tmp = 13 * proc_control_B.i_h + proc_control_B.j2;
        proc_control_B.Sum_f = proc_control_B.Sum_o3[proc_control_B.Sum_tmp];
        proc_control_B.b_Su1[(proc_control_B.b_Su1_tmp[proc_control_B.j2] + 130 *
                              proc_control_B.i_h) - 1] = proc_control_B.Sum_f;
        proc_control_B.Sum_b[proc_control_B.Sum_tmp] = proc_control_B.Sum_f;
      }
    }

    for (proc_control_B.i_h = 0; proc_control_B.i_h < 72; proc_control_B.i_h++)
    {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.Sum_b[proc_control_B.j2 + 13 * (proc_control_B.i_h + 8)] =
          proc_control_B.Su[(130 * proc_control_B.i_h +
                             proc_control_B.b_Su1_tmp[proc_control_B.j2]) - 14];
      }
    }

    for (proc_control_B.i_h = 0; proc_control_B.i_h < 80; proc_control_B.i_h++)
    {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.Su[(static_cast<int32_T>
                           (proc_control_B.rows[proc_control_B.j2]) + 130 *
                           proc_control_B.i_h) - 1] = proc_control_B.Sum_b[13 *
          proc_control_B.i_h + proc_control_B.j2];
      }
    }

    for (proc_control_B.i_h = 0; proc_control_B.i_h < 13; proc_control_B.i_h++)
    {
      proc_control_B.CA_m[proc_control_B.i_h] = 0.0;
      proc_control_B.j2 = 0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 21; proc_control_B.i1++) {
        proc_control_B.CA_m[proc_control_B.i_h] +=
          proc_control_B.CA[proc_control_B.j2 + proc_control_B.i_h] *
          Bv[proc_control_B.i1];
        proc_control_B.j2 += 13;
      }

      proc_control_B.CA_b[proc_control_B.i_h] =
        proc_control_B.CA_m[proc_control_B.i_h];
    }

    for (proc_control_B.i_h = 0; proc_control_B.i_h < 10; proc_control_B.i_h++)
    {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.CA_b[proc_control_B.j2 + 13 * (proc_control_B.i_h + 1)] =
          proc_control_B.b_Hv[(130 * proc_control_B.i_h + static_cast<int32_T>
          (proc_control_B.rows[proc_control_B.j2])) - 14];
      }
    }

    for (proc_control_B.i_h = 0; proc_control_B.i_h < 11; proc_control_B.i_h++)
    {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.b_Hv[(static_cast<int32_T>
                             (proc_control_B.rows[proc_control_B.j2]) + 130 *
                             proc_control_B.i_h) - 1] = proc_control_B.CA_b[13 *
          proc_control_B.i_h + proc_control_B.j2];
      }
    }

    for (proc_control_B.i_h = 0; proc_control_B.i_h < 13; proc_control_B.i_h++)
    {
      proc_control_B.j2 = 0;
      proc_control_B.i1 = 0;
      for (proc_control_B.i_p = 0; proc_control_B.i_p < 21; proc_control_B.i_p++)
      {
        proc_control_B.CA_tmp = proc_control_B.j2 + proc_control_B.i_h;
        proc_control_B.CA_c[proc_control_B.CA_tmp] = 0.0;
        proc_control_B.Sum_tmp = 0;
        for (proc_control_B.b_Linv_tmp = 0; proc_control_B.b_Linv_tmp < 21;
             proc_control_B.b_Linv_tmp++) {
          proc_control_B.CA_c[proc_control_B.CA_tmp] +=
            proc_control_B.CA[proc_control_B.Sum_tmp + proc_control_B.i_h] *
            b_A[proc_control_B.b_Linv_tmp + proc_control_B.i1];
          proc_control_B.Sum_tmp += 13;
        }

        proc_control_B.j2 += 13;
        proc_control_B.i1 += 21;
      }
    }

    std::memcpy(&proc_control_B.CA[0], &proc_control_B.CA_c[0], 273U * sizeof
                (real_T));
    for (proc_control_B.i_h = 0; proc_control_B.i_h < 21; proc_control_B.i_h++)
    {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.b_Sx[(static_cast<int32_T>
                             (proc_control_B.rows[proc_control_B.j2]) + 130 *
                             proc_control_B.i_h) - 1] = proc_control_B.CA[13 *
          proc_control_B.i_h + proc_control_B.j2];
      }
    }
  }

  for (proc_control_B.i_h = 0; proc_control_B.i_h < 24; proc_control_B.i_h++) {
    std::memset(&proc_control_B.b_SuJm[proc_control_B.i_h * 130], 0, 130U *
                sizeof(real_T));
    for (proc_control_B.i1 = 0; proc_control_B.i1 < 80; proc_control_B.i1++) {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 130; proc_control_B.j2++)
      {
        proc_control_B.kidx = 130 * proc_control_B.i_h + proc_control_B.j2;
        proc_control_B.b_SuJm[proc_control_B.kidx] += proc_control_B.Su[130 *
          proc_control_B.i1 + proc_control_B.j2] * b_Jm[80 * proc_control_B.i_h
          + proc_control_B.i1];
      }
    }
  }

  if (b_Mrows[0] > 0) {
    proc_control_B.kidx = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.kidx < 258)) {
      if (b_Mrows[proc_control_B.kidx] <= 130) {
        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_h = 0; proc_control_B.i_h < 24; proc_control_B.i_h
             ++) {
          b_Ac[proc_control_B.kidx + 258 * proc_control_B.i_h] =
            -proc_control_B.b_SuJm[(130 * proc_control_B.i_h + proc_control_B.j2)
            - 1];
        }

        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_h = 0; proc_control_B.i_h < 21; proc_control_B.i_h
             ++) {
          b_Mx[proc_control_B.kidx + 258 * proc_control_B.i_h] =
            -proc_control_B.b_Sx[(130 * proc_control_B.i_h + proc_control_B.j2)
            - 1];
        }

        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_h = 0; proc_control_B.i_h < 8; proc_control_B.i_h
             ++) {
          b_Mu1[proc_control_B.kidx + 258 * proc_control_B.i_h] =
            -proc_control_B.b_Su1[(130 * proc_control_B.i_h + proc_control_B.j2)
            - 1];
        }

        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_h = 0; proc_control_B.i_h < 11; proc_control_B.i_h
             ++) {
          b_Mv[proc_control_B.kidx + 258 * proc_control_B.i_h] =
            -proc_control_B.b_Hv[(130 * proc_control_B.i_h + proc_control_B.j2)
            - 1];
        }

        proc_control_B.kidx++;
      } else if (b_Mrows[proc_control_B.kidx] <= 260) {
        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_h = 0; proc_control_B.i_h < 24; proc_control_B.i_h
             ++) {
          b_Ac[proc_control_B.kidx + 258 * proc_control_B.i_h] =
            proc_control_B.b_SuJm[(130 * proc_control_B.i_h + proc_control_B.j2)
            - 131];
        }

        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_h = 0; proc_control_B.i_h < 21; proc_control_B.i_h
             ++) {
          b_Mx[proc_control_B.kidx + 258 * proc_control_B.i_h] =
            proc_control_B.b_Sx[(130 * proc_control_B.i_h + proc_control_B.j2) -
            131];
        }

        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_h = 0; proc_control_B.i_h < 8; proc_control_B.i_h
             ++) {
          b_Mu1[proc_control_B.kidx + 258 * proc_control_B.i_h] =
            proc_control_B.b_Su1[(130 * proc_control_B.i_h + proc_control_B.j2)
            - 131];
        }

        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_h = 0; proc_control_B.i_h < 11; proc_control_B.i_h
             ++) {
          b_Mv[proc_control_B.kidx + 258 * proc_control_B.i_h] =
            proc_control_B.b_Hv[(130 * proc_control_B.i_h + proc_control_B.j2) -
            131];
        }

        proc_control_B.kidx++;
      } else {
        exitg1 = true;
      }
    }
  }

  for (proc_control_B.kidx = 0; proc_control_B.kidx < 13; proc_control_B.kidx++)
  {
    proc_control_B.Sum_f = ywt[proc_control_B.kidx];
    if (proc_control_B.Sum_f < 0.0) {
      proc_control_B.rows[proc_control_B.kidx] = 0.0;
    } else {
      proc_control_B.rows[proc_control_B.kidx] = proc_control_B.Sum_f *
        proc_control_B.Sum_f;
    }
  }

  for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
  {
    proc_control_B.Sum_f = duwt[proc_control_B.kidx];
    proc_control_B.uwt = uwt[proc_control_B.kidx];
    if (proc_control_B.uwt < 0.0) {
      proc_control_B.b_Wu[proc_control_B.kidx] = 0.0;
    } else {
      proc_control_B.b_Wu[proc_control_B.kidx] = proc_control_B.uwt *
        proc_control_B.uwt;
    }

    if (proc_control_B.Sum_f < 0.0) {
      proc_control_B.b_Wdu[proc_control_B.kidx] = 0.0;
    } else {
      proc_control_B.b_Wdu[proc_control_B.kidx] = proc_control_B.Sum_f *
        proc_control_B.Sum_f;
    }
  }

  std::memset(&proc_control_B.b_B_j[0], 0, sizeof(int8_T) << 6U);
  proc_control_B.CA_tmp = 0;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
  {
    proc_control_B.b_B_j[proc_control_B.CA_tmp] = 1;
    proc_control_B.CA_tmp += 9;
  }

  proc_control_B.kidx = -1;
  for (proc_control_B.i_h = 0; proc_control_B.i_h < 10; proc_control_B.i_h++) {
    for (proc_control_B.j2 = 0; proc_control_B.j2 < 8; proc_control_B.j2++) {
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 10; proc_control_B.i1++) {
        for (proc_control_B.CA_tmp = 0; proc_control_B.CA_tmp < 8;
             proc_control_B.CA_tmp++) {
          proc_control_B.a_b[(proc_control_B.kidx + proc_control_B.CA_tmp) + 1] =
            static_cast<int8_T>(c_A[10 * proc_control_B.i_h + proc_control_B.i1]
                                * proc_control_B.b_B_j[(proc_control_B.j2 << 3)
                                + proc_control_B.CA_tmp]);
        }

        proc_control_B.kidx += 8;
      }
    }
  }

  for (proc_control_B.i_h = 0; proc_control_B.i_h < 24; proc_control_B.i_h++) {
    std::memset(&proc_control_B.I2Jm[proc_control_B.i_h * 80], 0, 80U * sizeof
                (real_T));
    for (proc_control_B.i1 = 0; proc_control_B.i1 < 80; proc_control_B.i1++) {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 80; proc_control_B.j2++) {
        proc_control_B.kidx = 80 * proc_control_B.i_h + proc_control_B.j2;
        proc_control_B.I2Jm[proc_control_B.kidx] += static_cast<real_T>
          (proc_control_B.a_b[80 * proc_control_B.i1 + proc_control_B.j2]) *
          b_Jm[80 * proc_control_B.i_h + proc_control_B.i1];
      }
    }
  }

  ixw = 1;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 130; proc_control_B.kidx++)
  {
    proc_control_B.Sum_f = proc_control_B.rows[ixw - 1];
    for (proc_control_B.i_h = 0; proc_control_B.i_h < 24; proc_control_B.i_h++)
    {
      proc_control_B.j2 = 130 * proc_control_B.i_h + proc_control_B.kidx;
      proc_control_B.WySuJm[proc_control_B.j2] =
        proc_control_B.b_SuJm[proc_control_B.j2] * proc_control_B.Sum_f;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 13) {
      ixw = 1;
    }
  }

  proc_control_WtMult_eD9sgCWi(proc_control_B.b_Wu, proc_control_B.I2Jm,
    proc_control_nu, proc_control_B.WuI2Jm);
  proc_control_WtMult_eD9sgCWi(proc_control_B.b_Wdu, b_Jm, proc_control_nu,
    proc_control_B.dv2);
  for (proc_control_B.i_h = 0; proc_control_B.i_h < 24; proc_control_B.i_h++) {
    for (proc_control_B.j2 = 0; proc_control_B.j2 < 24; proc_control_B.j2++) {
      proc_control_B.kidx = 24 * proc_control_B.i_h + proc_control_B.j2;
      proc_control_B.b_SuJm_j[proc_control_B.kidx] = 0.0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 130; proc_control_B.i1++)
      {
        proc_control_B.b_SuJm_j[proc_control_B.kidx] += proc_control_B.b_SuJm
          [130 * proc_control_B.j2 + proc_control_B.i1] * proc_control_B.WySuJm
          [130 * proc_control_B.i_h + proc_control_B.i1];
      }

      proc_control_B.b_Jm[proc_control_B.kidx] = 0.0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 80; proc_control_B.i1++) {
        proc_control_B.b_Jm[proc_control_B.kidx] += b_Jm[80 * proc_control_B.j2
          + proc_control_B.i1] * proc_control_B.dv2[80 * proc_control_B.i_h +
          proc_control_B.i1];
      }
    }
  }

  for (proc_control_B.i_h = 0; proc_control_B.i_h < 24; proc_control_B.i_h++) {
    for (proc_control_B.j2 = 0; proc_control_B.j2 < 24; proc_control_B.j2++) {
      proc_control_B.Sum_f = 0.0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 80; proc_control_B.i1++) {
        proc_control_B.Sum_f += proc_control_B.I2Jm[80 * proc_control_B.i_h +
          proc_control_B.i1] * proc_control_B.WuI2Jm[80 * proc_control_B.j2 +
          proc_control_B.i1];
      }

      proc_control_B.kidx = 24 * proc_control_B.j2 + proc_control_B.i_h;
      b_H[proc_control_B.i_h + 25 * proc_control_B.j2] =
        (proc_control_B.b_SuJm_j[proc_control_B.kidx] +
         proc_control_B.b_Jm[proc_control_B.kidx]) + proc_control_B.Sum_f;
    }

    for (proc_control_B.j2 = 0; proc_control_B.j2 < 8; proc_control_B.j2++) {
      proc_control_B.kidx = (proc_control_B.i_h << 3) + proc_control_B.j2;
      proc_control_B.b_Su1_f[proc_control_B.kidx] = 0.0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 130; proc_control_B.i1++)
      {
        proc_control_B.b_Su1_f[proc_control_B.kidx] += proc_control_B.b_Su1[130 *
          proc_control_B.j2 + proc_control_B.i1] * proc_control_B.WySuJm[130 *
          proc_control_B.i_h + proc_control_B.i1];
      }

      proc_control_B.b_I1[proc_control_B.kidx] = 0.0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 80; proc_control_B.i1++) {
        proc_control_B.b_I1[proc_control_B.kidx] += b_I1[80 * proc_control_B.j2
          + proc_control_B.i1] * proc_control_B.WuI2Jm[80 * proc_control_B.i_h +
          proc_control_B.i1];
      }
    }
  }

  for (proc_control_B.i_h = 0; proc_control_B.i_h < 192; proc_control_B.i_h++) {
    proc_control_B.b_Ku1[proc_control_B.i_h] =
      proc_control_B.b_Su1_f[proc_control_B.i_h] +
      proc_control_B.b_I1[proc_control_B.i_h];
  }

  for (proc_control_B.i_h = 0; proc_control_B.i_h < 1920; proc_control_B.i_h++)
  {
    proc_control_B.WuI2Jm[proc_control_B.i_h] =
      -proc_control_B.WuI2Jm[proc_control_B.i_h];
  }

  for (proc_control_B.i_h = 0; proc_control_B.i_h < 24; proc_control_B.i_h++) {
    for (proc_control_B.j2 = 0; proc_control_B.j2 < 21; proc_control_B.j2++) {
      proc_control_B.kidx = 21 * proc_control_B.i_h + proc_control_B.j2;
      proc_control_B.b_Kx[proc_control_B.kidx] = 0.0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 130; proc_control_B.i1++)
      {
        proc_control_B.b_Kx[proc_control_B.kidx] += proc_control_B.b_Sx[130 *
          proc_control_B.j2 + proc_control_B.i1] * proc_control_B.WySuJm[130 *
          proc_control_B.i_h + proc_control_B.i1];
      }
    }

    for (proc_control_B.j2 = 0; proc_control_B.j2 < 11; proc_control_B.j2++) {
      proc_control_B.kidx = 11 * proc_control_B.i_h + proc_control_B.j2;
      proc_control_B.b_Kv[proc_control_B.kidx] = 0.0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 130; proc_control_B.i1++)
      {
        proc_control_B.b_Kv[proc_control_B.kidx] += proc_control_B.b_Hv[130 *
          proc_control_B.j2 + proc_control_B.i1] * proc_control_B.WySuJm[130 *
          proc_control_B.i_h + proc_control_B.i1];
      }
    }
  }

  for (proc_control_B.i_h = 0; proc_control_B.i_h < 3120; proc_control_B.i_h++)
  {
    proc_control_B.WySuJm[proc_control_B.i_h] =
      -proc_control_B.WySuJm[proc_control_B.i_h];
  }

  std::memcpy(&proc_control_B.b_Linv[0], &b_H[0], 625U * sizeof(real_T));
  proc__mpc_checkhessian_4gOqb0AF(proc_control_B.b_Linv, proc_control_B.c_Linv,
    &proc_control_B.Sum_f);
  if (proc_control_B.Sum_f > 1.0) {
    proc_control_B.kidx = 0;
    for (proc_control_B.CA_tmp = 0; proc_control_B.CA_tmp < 8;
         proc_control_B.CA_tmp++) {
      u[proc_control_B.CA_tmp] = old_u[proc_control_B.CA_tmp] +
        b_uoff[proc_control_B.CA_tmp];
      for (proc_control_B.i_h = 0; proc_control_B.i_h < 11; proc_control_B.i_h++)
      {
        useq[proc_control_B.i_h + proc_control_B.kidx] = u[proc_control_B.CA_tmp];
      }

      proc_control_B.kidx += 11;
    }

    *status = -2.0;
  } else {
    std::memset(&proc_control_B.c_B[0], 0, 625U * sizeof(int8_T));
    proc_control_B.CA_tmp = 0;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 25; proc_control_B.kidx
         ++) {
      proc_control_B.c_B[proc_control_B.CA_tmp] = 1;
      proc_control_B.CA_tmp += 26;
    }

    proc_control_B.CA_tmp = 0;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 25; proc_control_B.kidx
         ++) {
      for (proc_control_B.i_h = 0; proc_control_B.i_h < 25; proc_control_B.i_h++)
      {
        proc_control_B.b_Linv_tmp = proc_control_B.i_h + proc_control_B.CA_tmp;
        proc_control_B.b_Linv[proc_control_B.b_Linv_tmp] =
          proc_control_B.c_B[proc_control_B.b_Linv_tmp];
      }

      proc_control_B.CA_tmp += 25;
    }

    proc_control_trisolve_TPUoCQlv(proc_control_B.c_Linv, proc_control_B.b_Linv);
    for (proc_control_B.i_h = 0; proc_control_B.i_h < 258; proc_control_B.i_h++)
    {
      proc_control_B.Sum_f = 0.0;
      proc_control_B.j2 = 0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 21; proc_control_B.i1++) {
        proc_control_B.Sum_f += b_Mx[proc_control_B.j2 + proc_control_B.i_h] *
          x[proc_control_B.i1];
        proc_control_B.j2 += 258;
      }

      proc_control_B.b_Mlim_l[proc_control_B.i_h] = b_Mlim[proc_control_B.i_h] +
        proc_control_B.Sum_f;
      proc_control_B.b_Mu1[proc_control_B.i_h] = 0.0;
    }

    proc_control_B.i_h = 0;
    for (proc_control_B.j2 = 0; proc_control_B.j2 < 8; proc_control_B.j2++) {
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 258; proc_control_B.i1++)
      {
        proc_control_B.b_Mu1[proc_control_B.i1] += b_Mu1[proc_control_B.i1 +
          proc_control_B.i_h] * old_u[proc_control_B.j2];
      }

      proc_control_B.i_h += 258;
    }

    for (proc_control_B.i_h = 0; proc_control_B.i_h < 258; proc_control_B.i_h++)
    {
      proc_control_B.Sum_f = 0.0;
      proc_control_B.j2 = 0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 11; proc_control_B.i1++) {
        proc_control_B.Sum_f += b_Mv[proc_control_B.j2 + proc_control_B.i_h] *
          vseq[proc_control_B.i1];
        proc_control_B.j2 += 258;
      }

      proc_control_B.Bc[proc_control_B.i_h] =
        -((proc_control_B.b_Mlim_l[proc_control_B.i_h] +
           proc_control_B.b_Mu1[proc_control_B.i_h]) + proc_control_B.Sum_f);
    }

    std::memset(&proc_control_B.b_Wu[0], 0, sizeof(real_T) << 3U);
    std::memset(&proc_control_B.b_Wdu[0], 0, sizeof(real_T) << 3U);
    for (proc_control_B.i_h = 0; proc_control_B.i_h < 8; proc_control_B.i_h++) {
      proc_control_B.umax_incr_flag[proc_control_B.i_h] = false;
      proc_control_B.umin_incr_flag[proc_control_B.i_h] = false;
    }

    if (b_Mrows[0] > 0) {
      proc_control_B.kidx = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.kidx < 258)) {
        if ((b_Mrows[proc_control_B.kidx] <= 130) ||
            (b_Mrows[proc_control_B.kidx] <= 260)) {
          proc_control_B.kidx++;
        } else if (b_Mrows[proc_control_B.kidx] <= 340) {
          boolean_T b_Del_Save_Flag0;
          proc_control_B.i_h = (b_Mrows[proc_control_B.kidx] -
                                (((b_Mrows[proc_control_B.kidx] - 261) >> 3) <<
            3)) - 261;
          b_Del_Save_Flag0 = proc_control_B.umax_incr_flag[proc_control_B.i_h];
          if (!proc_control_B.umax_incr_flag[proc_control_B.i_h]) {
            proc_control_B.Sum_f = -(b_RMVscale[proc_control_B.i_h] *
              umax[proc_control_B.i_h] - b_uoff[proc_control_B.i_h]) -
              (-b_Mlim[proc_control_B.kidx]);
            b_Del_Save_Flag0 = true;
          } else {
            proc_control_B.Sum_f = proc_control_B.b_Wu[proc_control_B.i_h];
          }

          proc_control_B.b_Wu[proc_control_B.i_h] = proc_control_B.Sum_f;
          proc_control_B.umax_incr_flag[proc_control_B.i_h] = b_Del_Save_Flag0;
          proc_control_B.Bc[proc_control_B.kidx] += proc_control_B.Sum_f;
          proc_control_B.kidx++;
        } else if (b_Mrows[proc_control_B.kidx] <= 420) {
          boolean_T b_Del_Save_Flag0;
          proc_control_B.i_h = (b_Mrows[proc_control_B.kidx] -
                                (((b_Mrows[proc_control_B.kidx] - 341) >> 3) <<
            3)) - 341;
          b_Del_Save_Flag0 = proc_control_B.umin_incr_flag[proc_control_B.i_h];
          if (!proc_control_B.umin_incr_flag[proc_control_B.i_h]) {
            proc_control_B.Sum_f = (b_RMVscale[proc_control_B.i_h] *
              umin[proc_control_B.i_h] - b_uoff[proc_control_B.i_h]) -
              (-b_Mlim[proc_control_B.kidx]);
            b_Del_Save_Flag0 = true;
          } else {
            proc_control_B.Sum_f = proc_control_B.b_Wdu[proc_control_B.i_h];
          }

          proc_control_B.b_Wdu[proc_control_B.i_h] = proc_control_B.Sum_f;
          proc_control_B.umin_incr_flag[proc_control_B.i_h] = b_Del_Save_Flag0;
          proc_control_B.Bc[proc_control_B.kidx] += proc_control_B.Sum_f;
          proc_control_B.kidx++;
        } else {
          exitg1 = true;
        }
      }
    }

    std::memset(&proc_control_B.f[0], 0, 25U * sizeof(real_T));
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 24; proc_control_B.kidx
         ++) {
      proc_control_B.Sum_f = 0.0;
      for (proc_control_B.i_h = 0; proc_control_B.i_h < 21; proc_control_B.i_h++)
      {
        proc_control_B.Sum_f += proc_control_B.b_Kx[21 * proc_control_B.kidx +
          proc_control_B.i_h] * x[proc_control_B.i_h];
      }

      proc_control_B.uwt = 0.0;
      for (proc_control_B.i_h = 0; proc_control_B.i_h < 130; proc_control_B.i_h
           ++) {
        proc_control_B.uwt += proc_control_B.WySuJm[130 * proc_control_B.kidx +
          proc_control_B.i_h] * rseq[proc_control_B.i_h];
      }

      proc_control_B.b_Ku1_h = 0.0;
      for (proc_control_B.i_h = 0; proc_control_B.i_h < 8; proc_control_B.i_h++)
      {
        proc_control_B.b_Ku1_h += proc_control_B.b_Ku1[(proc_control_B.kidx << 3)
          + proc_control_B.i_h] * old_u[proc_control_B.i_h];
      }

      proc_control_B.b_Kv_f = 0.0;
      for (proc_control_B.i_h = 0; proc_control_B.i_h < 11; proc_control_B.i_h++)
      {
        proc_control_B.b_Kv_f += proc_control_B.b_Kv[11 * proc_control_B.kidx +
          proc_control_B.i_h] * vseq[proc_control_B.i_h];
      }

      proc_control_B.WuI2Jm_i = 0.0;
      for (proc_control_B.i_h = 0; proc_control_B.i_h < 80; proc_control_B.i_h++)
      {
        proc_control_B.WuI2Jm_i += proc_control_B.WuI2Jm[80 *
          proc_control_B.kidx + proc_control_B.i_h] *
          b_utarget[proc_control_B.i_h];
      }

      proc_control_B.f[proc_control_B.kidx] = (((proc_control_B.Sum_f +
        proc_control_B.uwt) + proc_control_B.b_Ku1_h) + proc_control_B.b_Kv_f) +
        proc_control_B.WuI2Jm_i;
    }

    std::memcpy(&iAout[0], &iA[0], 258U * sizeof(boolean_T));
    proc_control_B.i_h = 0;
    for (proc_control_B.j2 = 0; proc_control_B.j2 < 25; proc_control_B.j2++) {
      proc_control_B.i1 = 0;
      for (proc_control_B.i_p = 0; proc_control_B.i_p < 25; proc_control_B.i_p++)
      {
        proc_control_B.b_Linv_tmp = proc_control_B.i_p + proc_control_B.i_h;
        proc_control_B.c_Linv[proc_control_B.b_Linv_tmp] = 0.0;
        for (proc_control_B.Sum_tmp = 0; proc_control_B.Sum_tmp < 25;
             proc_control_B.Sum_tmp++) {
          proc_control_B.c_Linv[proc_control_B.b_Linv_tmp] +=
            proc_control_B.b_Linv[proc_control_B.Sum_tmp + proc_control_B.i1] *
            proc_control_B.b_Linv[proc_control_B.Sum_tmp + proc_control_B.i_h];
        }

        proc_control_B.i1 += 25;
      }

      proc_control_B.i_h += 25;
    }

    proc_control_qpkwik(proc_control_B.b_Linv, proc_control_B.c_Linv,
                        proc_control_B.f, b_Ac, proc_control_B.Bc, iAout, 1132,
                        0.01, proc_control_B.zopt, proc_control_B.b_Mlim_l,
                        &proc_control_B.kidx);
    if ((proc_control_B.kidx < 0) || (proc_control_B.kidx == 0)) {
      std::memset(&proc_control_B.zopt[0], 0, 25U * sizeof(real_T));
    }

    *status = proc_control_B.kidx;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
    {
      u[proc_control_B.kidx] = (old_u[proc_control_B.kidx] +
        proc_control_B.zopt[proc_control_B.kidx]) + b_uoff[proc_control_B.kidx];
    }
  }
}

boolean_T proc_control::proc_control_isequal(const real_T varargin_1[3], const
  real_T varargin_2[3])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 3)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

boolean_T proc_control::proc_control_isequal_p(const real_T varargin_1[6], const
  real_T varargin_2[6])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 6)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
boolean_T proc_control::proc_control_anyNonFinite(const real_T x[169])
{
  boolean_T b_p;
  b_p = true;
  for (int32_T k{0}; k < 169; k++) {
    proc_control_B.x_m = x[k];
    if (b_p && (std::isinf(proc_control_B.x_m) || std::isnan(proc_control_B.x_m)))
    {
      b_p = false;
    }
  }

  return !b_p;
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
real_T proc_control::proc_control_norm_GdpreYkZ(const real_T x[169])
{
  real_T y;
  boolean_T exitg1;
  y = 0.0;
  proc_control_B.j_kb = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.j_kb < 13)) {
    proc_control_B.s_dg = 0.0;
    for (int32_T i{0}; i < 13; i++) {
      proc_control_B.s_dg += std::abs(x[13 * proc_control_B.j_kb + i]);
    }

    if (std::isnan(proc_control_B.s_dg)) {
      y = (rtNaN);
      exitg1 = true;
    } else {
      if (proc_control_B.s_dg > y) {
        y = proc_control_B.s_dg;
      }

      proc_control_B.j_kb++;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
void proc_control::proc_control_mpower_k(const real_T a[169], real_T b, real_T
  c[169])
{
  proc_control_B.e_m = std::abs(b);
  if (proc_control_B.e_m <= 2.147483647E+9) {
    std::memcpy(&proc_control_B.b_a[0], &a[0], 169U * sizeof(real_T));
    proc_control_B.n_k = static_cast<int32_T>(proc_control_B.e_m);
    proc_control_B.b_n = static_cast<int32_T>(proc_control_B.e_m);
    proc_control_B.nbitson_h = 0;
    proc_control_B.nb_b = -2;
    while (proc_control_B.b_n > 0) {
      proc_control_B.nb_b++;
      if ((proc_control_B.b_n & 1U) != 0U) {
        proc_control_B.nbitson_h++;
      }

      proc_control_B.b_n >>= 1;
    }

    if (static_cast<int32_T>(proc_control_B.e_m) <= 2) {
      if (b == 2.0) {
        for (proc_control_B.nbitson_h = 0; proc_control_B.nbitson_h < 13;
             proc_control_B.nbitson_h++) {
          std::memset(&c[proc_control_B.nbitson_h * 13], 0, 13U * sizeof(real_T));
          for (proc_control_B.i15 = 0; proc_control_B.i15 < 13;
               proc_control_B.i15++) {
            for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
                 proc_control_B.i17++) {
              int32_T c_tmp;
              c_tmp = 13 * proc_control_B.nbitson_h + proc_control_B.i17;
              c[c_tmp] += a[13 * proc_control_B.i15 + proc_control_B.i17] * a[13
                * proc_control_B.nbitson_h + proc_control_B.i15];
            }
          }
        }
      } else {
        boolean_T firstmult;
        firstmult = false;
        for (proc_control_B.n_k = 0; proc_control_B.n_k < 169;
             proc_control_B.n_k++) {
          if (!firstmult) {
            firstmult = std::isnan(a[proc_control_B.n_k]);
          }
        }

        if (firstmult) {
          for (proc_control_B.nbitson_h = 0; proc_control_B.nbitson_h < 169;
               proc_control_B.nbitson_h++) {
            c[proc_control_B.nbitson_h] = (rtNaN);
          }
        } else {
          std::memset(&c[0], 0, 169U * sizeof(real_T));
          proc_control_B.b_n = 0;
          for (proc_control_B.n_k = 0; proc_control_B.n_k < 13;
               proc_control_B.n_k++) {
            c[proc_control_B.b_n] = 1.0;
            proc_control_B.b_n += 14;
          }
        }
      }
    } else {
      int32_T c_tmp;
      boolean_T aBufferInUse;
      boolean_T cBufferInUse;
      boolean_T firstmult;
      firstmult = true;
      aBufferInUse = false;
      cBufferInUse = ((proc_control_B.nbitson_h & 1U) == 0U);
      while (proc_control_B.b_n <= proc_control_B.nb_b) {
        if ((proc_control_B.n_k & 1U) != 0U) {
          if (firstmult) {
            firstmult = false;
            if (cBufferInUse) {
              if (aBufferInUse) {
                std::memcpy(&proc_control_B.cBuffer_h[0],
                            &proc_control_B.aBuffer_l[0], 169U * sizeof(real_T));
              } else {
                std::memcpy(&proc_control_B.cBuffer_h[0], &proc_control_B.b_a[0],
                            169U * sizeof(real_T));
              }
            } else if (aBufferInUse) {
              std::memcpy(&c[0], &proc_control_B.aBuffer_l[0], 169U * sizeof
                          (real_T));
            } else {
              std::memcpy(&c[0], &proc_control_B.b_a[0], 169U * sizeof(real_T));
            }
          } else {
            if (aBufferInUse) {
              if (cBufferInUse) {
                for (proc_control_B.nbitson_h = 0; proc_control_B.nbitson_h < 13;
                     proc_control_B.nbitson_h++) {
                  proc_control_B.i17 = 0;
                  for (proc_control_B.i15 = 0; proc_control_B.i15 < 13;
                       proc_control_B.i15++) {
                    c_tmp = proc_control_B.i17 + proc_control_B.nbitson_h;
                    c[c_tmp] = 0.0;
                    proc_control_B.i18 = 0;
                    for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                         proc_control_B.i16++) {
                      c[c_tmp] += proc_control_B.cBuffer_h[proc_control_B.i18 +
                        proc_control_B.nbitson_h] *
                        proc_control_B.aBuffer_l[proc_control_B.i16 +
                        proc_control_B.i17];
                      proc_control_B.i18 += 13;
                    }

                    proc_control_B.i17 += 13;
                  }
                }
              } else {
                for (proc_control_B.nbitson_h = 0; proc_control_B.nbitson_h < 13;
                     proc_control_B.nbitson_h++) {
                  proc_control_B.i17 = 0;
                  for (proc_control_B.i15 = 0; proc_control_B.i15 < 13;
                       proc_control_B.i15++) {
                    c_tmp = proc_control_B.i17 + proc_control_B.nbitson_h;
                    proc_control_B.cBuffer_h[c_tmp] = 0.0;
                    proc_control_B.i18 = 0;
                    for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                         proc_control_B.i16++) {
                      proc_control_B.cBuffer_h[c_tmp] += c[proc_control_B.i18 +
                        proc_control_B.nbitson_h] *
                        proc_control_B.aBuffer_l[proc_control_B.i16 +
                        proc_control_B.i17];
                      proc_control_B.i18 += 13;
                    }

                    proc_control_B.i17 += 13;
                  }
                }
              }
            } else if (cBufferInUse) {
              for (proc_control_B.nbitson_h = 0; proc_control_B.nbitson_h < 13;
                   proc_control_B.nbitson_h++) {
                proc_control_B.i17 = 0;
                for (proc_control_B.i15 = 0; proc_control_B.i15 < 13;
                     proc_control_B.i15++) {
                  c_tmp = proc_control_B.i17 + proc_control_B.nbitson_h;
                  c[c_tmp] = 0.0;
                  proc_control_B.i18 = 0;
                  for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                       proc_control_B.i16++) {
                    c[c_tmp] += proc_control_B.cBuffer_h[proc_control_B.i18 +
                      proc_control_B.nbitson_h] *
                      proc_control_B.b_a[proc_control_B.i16 + proc_control_B.i17];
                    proc_control_B.i18 += 13;
                  }

                  proc_control_B.i17 += 13;
                }
              }
            } else {
              for (proc_control_B.nbitson_h = 0; proc_control_B.nbitson_h < 13;
                   proc_control_B.nbitson_h++) {
                proc_control_B.i17 = 0;
                for (proc_control_B.i15 = 0; proc_control_B.i15 < 13;
                     proc_control_B.i15++) {
                  c_tmp = proc_control_B.i17 + proc_control_B.nbitson_h;
                  proc_control_B.cBuffer_h[c_tmp] = 0.0;
                  proc_control_B.i18 = 0;
                  for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                       proc_control_B.i16++) {
                    proc_control_B.cBuffer_h[c_tmp] += c[proc_control_B.i18 +
                      proc_control_B.nbitson_h] *
                      proc_control_B.b_a[proc_control_B.i16 + proc_control_B.i17];
                    proc_control_B.i18 += 13;
                  }

                  proc_control_B.i17 += 13;
                }
              }
            }

            cBufferInUse = !cBufferInUse;
          }
        }

        proc_control_B.n_k >>= 1;
        if (aBufferInUse) {
          for (proc_control_B.nbitson_h = 0; proc_control_B.nbitson_h < 13;
               proc_control_B.nbitson_h++) {
            proc_control_B.i17 = 0;
            for (proc_control_B.i15 = 0; proc_control_B.i15 < 13;
                 proc_control_B.i15++) {
              c_tmp = proc_control_B.i17 + proc_control_B.nbitson_h;
              proc_control_B.b_a[c_tmp] = 0.0;
              proc_control_B.i18 = 0;
              for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                   proc_control_B.i16++) {
                proc_control_B.b_a[c_tmp] +=
                  proc_control_B.aBuffer_l[proc_control_B.i18 +
                  proc_control_B.nbitson_h] *
                  proc_control_B.aBuffer_l[proc_control_B.i16 +
                  proc_control_B.i17];
                proc_control_B.i18 += 13;
              }

              proc_control_B.i17 += 13;
            }
          }
        } else {
          for (proc_control_B.nbitson_h = 0; proc_control_B.nbitson_h < 13;
               proc_control_B.nbitson_h++) {
            proc_control_B.i17 = 0;
            for (proc_control_B.i15 = 0; proc_control_B.i15 < 13;
                 proc_control_B.i15++) {
              c_tmp = proc_control_B.i17 + proc_control_B.nbitson_h;
              proc_control_B.aBuffer_l[c_tmp] = 0.0;
              proc_control_B.i18 = 0;
              for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                   proc_control_B.i16++) {
                proc_control_B.aBuffer_l[c_tmp] +=
                  proc_control_B.b_a[proc_control_B.i18 +
                  proc_control_B.nbitson_h] *
                  proc_control_B.b_a[proc_control_B.i16 + proc_control_B.i17];
                proc_control_B.i18 += 13;
              }

              proc_control_B.i17 += 13;
            }
          }
        }

        aBufferInUse = !aBufferInUse;
        proc_control_B.b_n++;
      }

      for (proc_control_B.nbitson_h = 0; proc_control_B.nbitson_h < 13;
           proc_control_B.nbitson_h++) {
        std::memset(&proc_control_B.cBuffer_h2[proc_control_B.nbitson_h * 13], 0,
                    13U * sizeof(real_T));
        for (proc_control_B.i15 = 0; proc_control_B.i15 < 13; proc_control_B.i15
             ++) {
          for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
               proc_control_B.i17++) {
            c_tmp = 13 * proc_control_B.nbitson_h + proc_control_B.i17;
            proc_control_B.cBuffer_h2[c_tmp] += proc_control_B.cBuffer_h[13 *
              proc_control_B.i15 + proc_control_B.i17] *
              proc_control_B.aBuffer_l[13 * proc_control_B.nbitson_h +
              proc_control_B.i15];
          }
        }

        std::memset(&proc_control_B.cBuffer_m[proc_control_B.nbitson_h * 13], 0,
                    13U * sizeof(real_T));
        for (proc_control_B.i15 = 0; proc_control_B.i15 < 13; proc_control_B.i15
             ++) {
          for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
               proc_control_B.i17++) {
            c_tmp = 13 * proc_control_B.nbitson_h + proc_control_B.i17;
            proc_control_B.cBuffer_m[c_tmp] += proc_control_B.cBuffer_h[13 *
              proc_control_B.i15 + proc_control_B.i17] * proc_control_B.b_a[13 *
              proc_control_B.nbitson_h + proc_control_B.i15];
          }
        }
      }

      for (proc_control_B.nbitson_h = 0; proc_control_B.nbitson_h < 169;
           proc_control_B.nbitson_h++) {
        if (firstmult) {
          if (aBufferInUse) {
            c[proc_control_B.nbitson_h] =
              proc_control_B.aBuffer_l[proc_control_B.nbitson_h];
          } else {
            c[proc_control_B.nbitson_h] =
              proc_control_B.b_a[proc_control_B.nbitson_h];
          }
        } else if (aBufferInUse) {
          c[proc_control_B.nbitson_h] =
            proc_control_B.cBuffer_h2[proc_control_B.nbitson_h];
        } else {
          c[proc_control_B.nbitson_h] =
            proc_control_B.cBuffer_m[proc_control_B.nbitson_h];
        }
      }
    }
  } else {
    std::memcpy(&proc_control_B.b_a[0], &a[0], 169U * sizeof(real_T));
    if ((!std::isinf(b)) && (!std::isnan(b))) {
      boolean_T firstmult;
      firstmult = true;
      int32_T exitg1;
      do {
        int32_T c_tmp;
        exitg1 = 0;
        proc_control_B.ed2_a = std::floor(proc_control_B.e_m / 2.0);
        if (2.0 * proc_control_B.ed2_a != proc_control_B.e_m) {
          if (firstmult) {
            std::memcpy(&c[0], &proc_control_B.b_a[0], 169U * sizeof(real_T));
            firstmult = false;
          } else {
            for (proc_control_B.nbitson_h = 0; proc_control_B.nbitson_h < 13;
                 proc_control_B.nbitson_h++) {
              proc_control_B.i17 = 0;
              for (proc_control_B.i15 = 0; proc_control_B.i15 < 13;
                   proc_control_B.i15++) {
                c_tmp = proc_control_B.i17 + proc_control_B.nbitson_h;
                proc_control_B.cBuffer_h[c_tmp] = 0.0;
                proc_control_B.i18 = 0;
                for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                     proc_control_B.i16++) {
                  proc_control_B.cBuffer_h[c_tmp] += c[proc_control_B.i18 +
                    proc_control_B.nbitson_h] *
                    proc_control_B.b_a[proc_control_B.i16 + proc_control_B.i17];
                  proc_control_B.i18 += 13;
                }

                proc_control_B.i17 += 13;
              }
            }

            std::memcpy(&c[0], &proc_control_B.cBuffer_h[0], 169U * sizeof
                        (real_T));
          }
        }

        if (proc_control_B.ed2_a == 0.0) {
          exitg1 = 1;
        } else {
          proc_control_B.e_m = proc_control_B.ed2_a;
          for (proc_control_B.nbitson_h = 0; proc_control_B.nbitson_h < 13;
               proc_control_B.nbitson_h++) {
            proc_control_B.i17 = 0;
            for (proc_control_B.i15 = 0; proc_control_B.i15 < 13;
                 proc_control_B.i15++) {
              c_tmp = proc_control_B.i17 + proc_control_B.nbitson_h;
              proc_control_B.cBuffer_h[c_tmp] = 0.0;
              proc_control_B.i18 = 0;
              for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                   proc_control_B.i16++) {
                proc_control_B.cBuffer_h[c_tmp] +=
                  proc_control_B.b_a[proc_control_B.i18 +
                  proc_control_B.nbitson_h] *
                  proc_control_B.b_a[proc_control_B.i16 + proc_control_B.i17];
                proc_control_B.i18 += 13;
              }

              proc_control_B.i17 += 13;
            }
          }

          std::memcpy(&proc_control_B.b_a[0], &proc_control_B.cBuffer_h[0], 169U
                      * sizeof(real_T));
        }
      } while (exitg1 == 0);
    } else {
      for (proc_control_B.nbitson_h = 0; proc_control_B.nbitson_h < 169;
           proc_control_B.nbitson_h++) {
        c[proc_control_B.nbitson_h] = (rtNaN);
      }
    }
  }
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
real_T proc_control::proc_control_log2_blLsPIAE(real_T x)
{
  real_T f;
  int32_T inte;
  if (x == 0.0) {
    f = (rtMinusInf);
  } else if ((!std::isinf(x)) && (!std::isnan(x))) {
    proc_control_B.t_ie = frexp(x, &inte);
    if (proc_control_B.t_ie == 0.5) {
      f = static_cast<real_T>(inte) - 1.0;
    } else if ((inte == 1) && (proc_control_B.t_ie < 0.75)) {
      f = std::log(2.0 * proc_control_B.t_ie) / 0.69314718055994529;
    } else {
      f = std::log(proc_control_B.t_ie) / 0.69314718055994529 +
        static_cast<real_T>(inte);
    }
  } else {
    f = x;
  }

  return f;
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
void proc_control::proc_padeApproximation_NWSCAcaS(const real_T A[169], const
  real_T A2[169], const real_T A4[169], const real_T A6[169], int32_T m, real_T
  F[169])
{
  int32_T e_k;
  switch (m) {
   case 3:
    std::memcpy(&F[0], &A2[0], 169U * sizeof(real_T));
    e_k = 0;
    proc_control_B.iy_a = 0;
    for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++)
    {
      std::memset(&proc_control_B.A6_j[proc_control_B.iy_a], 0, 13U * sizeof
                  (real_T));
      F[e_k] += 60.0;
      e_k += 14;
      proc_control_B.iy_a += 13;
    }

    proc_control_B.e_k = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      proc_control_B.iy_a = 0;
      for (proc_control_B.c_ix = 0; proc_control_B.c_ix < 13;
           proc_control_B.c_ix++) {
        for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 13;
             proc_control_B.jj_c++) {
          proc_control_B.ix_dh = proc_control_B.jj_c + proc_control_B.e_k;
          proc_control_B.A6_j[proc_control_B.ix_dh] += A[proc_control_B.jj_c +
            proc_control_B.iy_a] * F[proc_control_B.c_ix + proc_control_B.e_k];
        }

        proc_control_B.iy_a += 13;
      }

      proc_control_B.e_k += 13;
    }

    for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 169; proc_control_B.jj_c
         ++) {
      F[proc_control_B.jj_c] = proc_control_B.A6_j[proc_control_B.jj_c];
      proc_control_B.V_a[proc_control_B.jj_c] = 12.0 * A2[proc_control_B.jj_c];
    }

    proc_control_B.d_d = 120.0;
    break;

   case 5:
    for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 169; proc_control_B.jj_c
         ++) {
      F[proc_control_B.jj_c] = 420.0 * A2[proc_control_B.jj_c] +
        A4[proc_control_B.jj_c];
    }

    e_k = 0;
    proc_control_B.iy_a = 0;
    for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++)
    {
      std::memset(&proc_control_B.A6_j[proc_control_B.iy_a], 0, 13U * sizeof
                  (real_T));
      F[e_k] += 15120.0;
      e_k += 14;
      proc_control_B.iy_a += 13;
    }

    proc_control_B.e_k = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      proc_control_B.iy_a = 0;
      for (proc_control_B.c_ix = 0; proc_control_B.c_ix < 13;
           proc_control_B.c_ix++) {
        for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 13;
             proc_control_B.jj_c++) {
          proc_control_B.ix_dh = proc_control_B.jj_c + proc_control_B.e_k;
          proc_control_B.A6_j[proc_control_B.ix_dh] += A[proc_control_B.jj_c +
            proc_control_B.iy_a] * F[proc_control_B.c_ix + proc_control_B.e_k];
        }

        proc_control_B.iy_a += 13;
      }

      proc_control_B.e_k += 13;
    }

    for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 169; proc_control_B.jj_c
         ++) {
      F[proc_control_B.jj_c] = proc_control_B.A6_j[proc_control_B.jj_c];
      proc_control_B.V_a[proc_control_B.jj_c] = 30.0 * A4[proc_control_B.jj_c] +
        3360.0 * A2[proc_control_B.jj_c];
    }

    proc_control_B.d_d = 30240.0;
    break;

   case 7:
    for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 169; proc_control_B.jj_c
         ++) {
      F[proc_control_B.jj_c] = (1512.0 * A4[proc_control_B.jj_c] +
        A6[proc_control_B.jj_c]) + 277200.0 * A2[proc_control_B.jj_c];
    }

    e_k = 0;
    proc_control_B.iy_a = 0;
    for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++)
    {
      std::memset(&proc_control_B.A6_j[proc_control_B.iy_a], 0, 13U * sizeof
                  (real_T));
      F[e_k] += 8.64864E+6;
      e_k += 14;
      proc_control_B.iy_a += 13;
    }

    proc_control_B.e_k = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      proc_control_B.iy_a = 0;
      for (proc_control_B.c_ix = 0; proc_control_B.c_ix < 13;
           proc_control_B.c_ix++) {
        for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 13;
             proc_control_B.jj_c++) {
          proc_control_B.ix_dh = proc_control_B.jj_c + proc_control_B.e_k;
          proc_control_B.A6_j[proc_control_B.ix_dh] += A[proc_control_B.jj_c +
            proc_control_B.iy_a] * F[proc_control_B.c_ix + proc_control_B.e_k];
        }

        proc_control_B.iy_a += 13;
      }

      proc_control_B.e_k += 13;
    }

    for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 169; proc_control_B.jj_c
         ++) {
      F[proc_control_B.jj_c] = proc_control_B.A6_j[proc_control_B.jj_c];
      proc_control_B.V_a[proc_control_B.jj_c] = (56.0 * A6[proc_control_B.jj_c]
        + 25200.0 * A4[proc_control_B.jj_c]) + 1.99584E+6 *
        A2[proc_control_B.jj_c];
    }

    proc_control_B.d_d = 1.729728E+7;
    break;

   case 9:
    for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 13; proc_control_B.jj_c
         ++) {
      std::memset(&proc_control_B.V_a[proc_control_B.jj_c * 13], 0, 13U * sizeof
                  (real_T));
      for (e_k = 0; e_k < 13; e_k++) {
        for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k
             ++) {
          proc_control_B.iy_a = 13 * proc_control_B.jj_c + proc_control_B.e_k;
          proc_control_B.V_a[proc_control_B.iy_a] += A6[13 * e_k +
            proc_control_B.e_k] * A2[13 * proc_control_B.jj_c + e_k];
        }
      }
    }

    for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 169; proc_control_B.jj_c
         ++) {
      F[proc_control_B.jj_c] = ((3960.0 * A6[proc_control_B.jj_c] +
        proc_control_B.V_a[proc_control_B.jj_c]) + 2.16216E+6 *
        A4[proc_control_B.jj_c]) + 3.027024E+8 * A2[proc_control_B.jj_c];
    }

    e_k = 0;
    proc_control_B.iy_a = 0;
    for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++)
    {
      std::memset(&proc_control_B.A6_j[proc_control_B.iy_a], 0, 13U * sizeof
                  (real_T));
      F[e_k] += 8.8216128E+9;
      e_k += 14;
      proc_control_B.iy_a += 13;
    }

    proc_control_B.e_k = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      proc_control_B.iy_a = 0;
      for (proc_control_B.c_ix = 0; proc_control_B.c_ix < 13;
           proc_control_B.c_ix++) {
        for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 13;
             proc_control_B.jj_c++) {
          proc_control_B.ix_dh = proc_control_B.jj_c + proc_control_B.e_k;
          proc_control_B.A6_j[proc_control_B.ix_dh] += A[proc_control_B.jj_c +
            proc_control_B.iy_a] * F[proc_control_B.c_ix + proc_control_B.e_k];
        }

        proc_control_B.iy_a += 13;
      }

      proc_control_B.e_k += 13;
    }

    for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 169; proc_control_B.jj_c
         ++) {
      F[proc_control_B.jj_c] = proc_control_B.A6_j[proc_control_B.jj_c];
      proc_control_B.V_a[proc_control_B.jj_c] = ((90.0 *
        proc_control_B.V_a[proc_control_B.jj_c] + 110880.0 *
        A6[proc_control_B.jj_c]) + 3.027024E+7 * A4[proc_control_B.jj_c]) +
        2.0756736E+9 * A2[proc_control_B.jj_c];
    }

    proc_control_B.d_d = 1.76432256E+10;
    break;

   default:
    for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 169; proc_control_B.jj_c
         ++) {
      F[proc_control_B.jj_c] = (3.352212864E+10 * A6[proc_control_B.jj_c] +
        1.05594705216E+13 * A4[proc_control_B.jj_c]) + 1.1873537964288E+15 *
        A2[proc_control_B.jj_c];
    }

    e_k = 0;
    for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++)
    {
      F[e_k] += 3.238237626624E+16;
      e_k += 14;
    }

    for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 169; proc_control_B.jj_c
         ++) {
      proc_control_B.V_a[proc_control_B.jj_c] = (16380.0 *
        A4[proc_control_B.jj_c] + A6[proc_control_B.jj_c]) + 4.08408E+7 *
        A2[proc_control_B.jj_c];
    }

    for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 13; proc_control_B.jj_c
         ++) {
      proc_control_B.e_k = 0;
      for (e_k = 0; e_k < 13; e_k++) {
        proc_control_B.d_d = 0.0;
        proc_control_B.iy_a = 0;
        for (proc_control_B.c_ix = 0; proc_control_B.c_ix < 13;
             proc_control_B.c_ix++) {
          proc_control_B.d_d += A6[proc_control_B.iy_a + proc_control_B.jj_c] *
            proc_control_B.V_a[proc_control_B.c_ix + proc_control_B.e_k];
          proc_control_B.iy_a += 13;
        }

        proc_control_B.iy_a = proc_control_B.e_k + proc_control_B.jj_c;
        proc_control_B.A6_j[proc_control_B.iy_a] = F[proc_control_B.iy_a] +
          proc_control_B.d_d;
        proc_control_B.e_k += 13;
      }
    }

    for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 13; proc_control_B.jj_c
         ++) {
      std::memset(&F[proc_control_B.jj_c * 13], 0, 13U * sizeof(real_T));
      for (e_k = 0; e_k < 13; e_k++) {
        for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k
             ++) {
          proc_control_B.c_ix = 13 * proc_control_B.jj_c + proc_control_B.e_k;
          F[proc_control_B.c_ix] += A[13 * e_k + proc_control_B.e_k] *
            proc_control_B.A6_j[13 * proc_control_B.jj_c + e_k];
        }
      }
    }

    for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 169; proc_control_B.jj_c
         ++) {
      proc_control_B.A6_j[proc_control_B.jj_c] = (182.0 * A6[proc_control_B.jj_c]
        + 960960.0 * A4[proc_control_B.jj_c]) + 1.32324192E+9 *
        A2[proc_control_B.jj_c];
    }

    for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 13; proc_control_B.jj_c
         ++) {
      proc_control_B.e_k = 0;
      for (e_k = 0; e_k < 13; e_k++) {
        proc_control_B.d_d = 0.0;
        proc_control_B.iy_a = 0;
        for (proc_control_B.c_ix = 0; proc_control_B.c_ix < 13;
             proc_control_B.c_ix++) {
          proc_control_B.d_d += A6[proc_control_B.iy_a + proc_control_B.jj_c] *
            proc_control_B.A6_j[proc_control_B.c_ix + proc_control_B.e_k];
          proc_control_B.iy_a += 13;
        }

        proc_control_B.iy_a = proc_control_B.e_k + proc_control_B.jj_c;
        proc_control_B.V_a[proc_control_B.iy_a] = ((A6[proc_control_B.iy_a] *
          6.704425728E+11 + proc_control_B.d_d) + A4[proc_control_B.iy_a] *
          1.29060195264E+14) + A2[proc_control_B.iy_a] * 7.7717703038976E+15;
        proc_control_B.e_k += 13;
      }
    }

    proc_control_B.d_d = 6.476475253248E+16;
    break;
  }

  e_k = 0;
  for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++) {
    proc_control_B.V_a[e_k] += proc_control_B.d_d;
    e_k += 14;
  }

  for (proc_control_B.e_k = 0; proc_control_B.e_k < 169; proc_control_B.e_k++) {
    proc_control_B.V_a[proc_control_B.e_k] -= F[proc_control_B.e_k];
    F[proc_control_B.e_k] *= 2.0;
  }

  for (proc_control_B.jj_c = 0; proc_control_B.jj_c < 13; proc_control_B.jj_c++)
  {
    proc_control_B.ipiv[proc_control_B.jj_c] = static_cast<int8_T>
      (proc_control_B.jj_c + 1);
  }

  for (proc_control_B.e_k = 0; proc_control_B.e_k < 12; proc_control_B.e_k++) {
    proc_control_B.jj_c = proc_control_B.e_k * 14;
    proc_control_B.iy_a = 0;
    proc_control_B.ix_dh = proc_control_B.jj_c;
    proc_control_B.d_d = std::abs(proc_control_B.V_a[proc_control_B.jj_c]);
    for (e_k = 2; e_k <= 13 - proc_control_B.e_k; e_k++) {
      proc_control_B.ix_dh++;
      proc_control_B.s_ky = std::abs(proc_control_B.V_a[proc_control_B.ix_dh]);
      if (proc_control_B.s_ky > proc_control_B.d_d) {
        proc_control_B.iy_a = e_k - 1;
        proc_control_B.d_d = proc_control_B.s_ky;
      }
    }

    if (proc_control_B.V_a[proc_control_B.jj_c + proc_control_B.iy_a] != 0.0) {
      if (proc_control_B.iy_a != 0) {
        proc_control_B.c_ix = proc_control_B.e_k + proc_control_B.iy_a;
        proc_control_B.ipiv[proc_control_B.e_k] = static_cast<int8_T>
          (proc_control_B.c_ix + 1);
        for (e_k = 0; e_k < 13; e_k++) {
          proc_control_B.d_d = proc_control_B.V_a[e_k * 13 + proc_control_B.e_k];
          proc_control_B.iy_a = e_k * 13 + proc_control_B.c_ix;
          proc_control_B.V_a[proc_control_B.e_k + e_k * 13] =
            proc_control_B.V_a[proc_control_B.iy_a];
          proc_control_B.V_a[proc_control_B.iy_a] = proc_control_B.d_d;
        }
      }

      proc_control_B.iy_a = (proc_control_B.jj_c - proc_control_B.e_k) + 13;
      proc_control_B.ix_dh = proc_control_B.jj_c + 1;
      while (proc_control_B.ix_dh + 1 <= proc_control_B.iy_a) {
        proc_control_B.V_a[proc_control_B.ix_dh] /=
          proc_control_B.V_a[proc_control_B.jj_c];
        proc_control_B.ix_dh++;
      }
    }

    proc_control_B.iy_a = proc_control_B.jj_c + 13;
    proc_control_B.ix_dh = proc_control_B.jj_c;
    for (e_k = 0; e_k <= 11 - proc_control_B.e_k; e_k++) {
      proc_control_B.d_d = proc_control_B.V_a[proc_control_B.iy_a];
      if (proc_control_B.V_a[proc_control_B.iy_a] != 0.0) {
        proc_control_B.c_ix = proc_control_B.jj_c + 1;
        proc_control_B.ijA_f = proc_control_B.ix_dh + 14;
        proc_control_B.c_pu = (proc_control_B.ix_dh - proc_control_B.e_k) + 26;
        while (proc_control_B.ijA_f + 1 <= proc_control_B.c_pu) {
          proc_control_B.V_a[proc_control_B.ijA_f] +=
            proc_control_B.V_a[proc_control_B.c_ix] * -proc_control_B.d_d;
          proc_control_B.c_ix++;
          proc_control_B.ijA_f++;
        }
      }

      proc_control_B.iy_a += 13;
      proc_control_B.ix_dh += 13;
    }
  }

  for (proc_control_B.e_k = 0; proc_control_B.e_k < 12; proc_control_B.e_k++) {
    int8_T ipiv;
    ipiv = proc_control_B.ipiv[proc_control_B.e_k];
    if (proc_control_B.e_k + 1 != ipiv) {
      for (proc_control_B.iy_a = 0; proc_control_B.iy_a < 13;
           proc_control_B.iy_a++) {
        proc_control_B.jj_c = 13 * proc_control_B.iy_a + proc_control_B.e_k;
        proc_control_B.d_d = F[proc_control_B.jj_c];
        e_k = (13 * proc_control_B.iy_a + ipiv) - 1;
        F[proc_control_B.jj_c] = F[e_k];
        F[e_k] = proc_control_B.d_d;
      }
    }
  }

  for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++) {
    proc_control_B.jj_c = 13 * proc_control_B.e_k;
    for (proc_control_B.iy_a = 0; proc_control_B.iy_a < 13; proc_control_B.iy_a
         ++) {
      proc_control_B.ix_dh = 13 * proc_control_B.iy_a;
      if (F[proc_control_B.iy_a + proc_control_B.jj_c] != 0.0) {
        for (e_k = proc_control_B.iy_a + 2; e_k < 14; e_k++) {
          proc_control_B.c_ix = (e_k + proc_control_B.jj_c) - 1;
          F[proc_control_B.c_ix] -= proc_control_B.V_a[(e_k +
            proc_control_B.ix_dh) - 1] * F[proc_control_B.iy_a +
            proc_control_B.jj_c];
        }
      }
    }
  }

  for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++) {
    proc_control_B.jj_c = 13 * proc_control_B.e_k;
    for (proc_control_B.iy_a = 12; proc_control_B.iy_a >= 0; proc_control_B.iy_a
         --) {
      proc_control_B.ix_dh = 13 * proc_control_B.iy_a;
      if (F[proc_control_B.iy_a + proc_control_B.jj_c] != 0.0) {
        proc_control_B.c_ix = proc_control_B.iy_a + proc_control_B.jj_c;
        F[proc_control_B.c_ix] /= proc_control_B.V_a[proc_control_B.iy_a +
          proc_control_B.ix_dh];
        for (e_k = 0; e_k < proc_control_B.iy_a; e_k++) {
          proc_control_B.c_ix = e_k + proc_control_B.jj_c;
          F[proc_control_B.c_ix] -= F[proc_control_B.iy_a + proc_control_B.jj_c]
            * proc_control_B.V_a[e_k + proc_control_B.ix_dh];
        }
      }
    }
  }

  e_k = 0;
  for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++) {
    F[e_k]++;
    e_k += 14;
  }
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
void proc_control::pro_recomputeBlockDiag_qmxFvKVu(const real_T A[169], real_T
  F[169], const int32_T blockFormat[12])
{
  for (proc_control_B.j_c2 = 0; proc_control_B.j_c2 < 12; proc_control_B.j_c2++)
  {
    switch (blockFormat[proc_control_B.j_c2]) {
     case 0:
      break;

     case 1:
      {
        int32_T delta_tmp_tmp;
        proc_control_B.delta_tmp_g = 13 * proc_control_B.j_c2 +
          proc_control_B.j_c2;
        proc_control_B.delta_tmp = A[proc_control_B.delta_tmp_g];
        proc_control_B.delta = std::exp(proc_control_B.delta_tmp);
        delta_tmp_tmp = (proc_control_B.j_c2 + 1) * 13 + proc_control_B.j_c2;
        proc_control_B.delta_tmp_o = A[delta_tmp_tmp + 1];
        proc_control_B.expa = std::exp(proc_control_B.delta_tmp_o);
        proc_control_B.sinchdelta = (proc_control_B.delta_tmp_o +
          proc_control_B.delta_tmp) / 2.0;
        if (std::fmax(proc_control_B.sinchdelta, std::abs
                      (proc_control_B.delta_tmp - proc_control_B.delta_tmp_o) /
                      2.0) < 709.782712893384) {
          proc_control_B.delta_tmp = (A[delta_tmp_tmp + 1] -
            A[proc_control_B.delta_tmp_g]) / 2.0;
          if (proc_control_B.delta_tmp == 0.0) {
            proc_control_B.delta_tmp = 1.0;
          } else {
            proc_control_B.delta_tmp = std::sinh(proc_control_B.delta_tmp) /
              proc_control_B.delta_tmp;
          }

          proc_control_B.sinchdelta = A[delta_tmp_tmp] * std::exp
            (proc_control_B.sinchdelta) * proc_control_B.delta_tmp;
        } else {
          proc_control_B.sinchdelta = (proc_control_B.expa -
            proc_control_B.delta) * A[delta_tmp_tmp] /
            (proc_control_B.delta_tmp_o - proc_control_B.delta_tmp);
        }

        F[proc_control_B.delta_tmp_g] = proc_control_B.delta;
        F[delta_tmp_tmp] = proc_control_B.sinchdelta;
        F[delta_tmp_tmp + 1] = proc_control_B.expa;
      }
      break;

     default:
      {
        int32_T delta_tmp_tmp;
        proc_control_B.delta_tmp_g = 13 * proc_control_B.j_c2 +
          proc_control_B.j_c2;
        proc_control_B.delta_tmp = A[proc_control_B.delta_tmp_g + 1];
        delta_tmp_tmp = (proc_control_B.j_c2 + 1) * 13 + proc_control_B.j_c2;
        proc_control_B.delta_tmp_o = A[delta_tmp_tmp];
        proc_control_B.delta = std::sqrt(std::abs(proc_control_B.delta_tmp_o *
          proc_control_B.delta_tmp));
        proc_control_B.expa = std::exp(A[proc_control_B.delta_tmp_g]);
        if (proc_control_B.delta == 0.0) {
          proc_control_B.sinchdelta = 1.0;
        } else {
          proc_control_B.sinchdelta = std::sin(proc_control_B.delta) /
            proc_control_B.delta;
        }

        F[proc_control_B.delta_tmp_g] = proc_control_B.expa * std::cos
          (proc_control_B.delta);
        F[proc_control_B.delta_tmp_g + 1] = proc_control_B.delta_tmp *
          proc_control_B.expa * proc_control_B.sinchdelta;
        F[delta_tmp_tmp] = proc_control_B.delta_tmp_o * proc_control_B.expa *
          proc_control_B.sinchdelta;
        F[delta_tmp_tmp + 1] = F[proc_control_B.delta_tmp_g];
      }
      break;
    }
  }

  if (blockFormat[11] == 0) {
    F[168] = std::exp(A[168]);
  }
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
real_T proc_control::proc_control_xnrm2_vEpa8zuo(int32_T n, const real_T x[169],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      proc_control_B.scale_es = 3.3121686421112381E-170;
      proc_control_B.kend_e = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= proc_control_B.kend_e; k++) {
        proc_control_B.absxk_p = std::abs(x[k - 1]);
        if (proc_control_B.absxk_p > proc_control_B.scale_es) {
          proc_control_B.t_jg = proc_control_B.scale_es / proc_control_B.absxk_p;
          y = y * proc_control_B.t_jg * proc_control_B.t_jg + 1.0;
          proc_control_B.scale_es = proc_control_B.absxk_p;
        } else {
          proc_control_B.t_jg = proc_control_B.absxk_p / proc_control_B.scale_es;
          y += proc_control_B.t_jg * proc_control_B.t_jg;
        }
      }

      y = proc_control_B.scale_es * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
void proc_control::proc_control_xzlarf_2N2eIztg(int32_T m, int32_T n, int32_T
  iv0, real_T tau, real_T C[169], int32_T ic0, real_T work[13])
{
  int32_T jy;
  if (tau != 0.0) {
    boolean_T exitg2;
    proc_control_B.lastv_i = m;
    proc_control_B.lastc_f = iv0 + m;
    while ((proc_control_B.lastv_i > 0) && (C[proc_control_B.lastc_f - 2] == 0.0))
    {
      proc_control_B.lastv_i--;
      proc_control_B.lastc_f--;
    }

    proc_control_B.lastc_f = n - 1;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.lastc_f + 1 > 0)) {
      int32_T exitg1;
      proc_control_B.coltop_e = proc_control_B.lastc_f * 13 + ic0;
      jy = proc_control_B.coltop_e;
      do {
        exitg1 = 0;
        if (jy <= (proc_control_B.coltop_e + proc_control_B.lastv_i) - 1) {
          if (C[jy - 1] != 0.0) {
            exitg1 = 1;
          } else {
            jy++;
          }
        } else {
          proc_control_B.lastc_f--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_B.lastv_i = 0;
    proc_control_B.lastc_f = -1;
  }

  if (proc_control_B.lastv_i > 0) {
    if (proc_control_B.lastc_f + 1 != 0) {
      proc_control_B.coltop_e = 0;
      while (proc_control_B.coltop_e <= proc_control_B.lastc_f) {
        work[proc_control_B.coltop_e] = 0.0;
        proc_control_B.coltop_e++;
      }

      proc_control_B.coltop_e = 0;
      jy = 13 * proc_control_B.lastc_f + ic0;
      proc_control_B.iac_g = ic0;
      while (proc_control_B.iac_g <= jy) {
        proc_control_B.ix_as = iv0;
        proc_control_B.c_d = 0.0;
        proc_control_B.d_k1 = (proc_control_B.iac_g + proc_control_B.lastv_i) -
          1;
        proc_control_B.ia_l3 = proc_control_B.iac_g;
        while (proc_control_B.ia_l3 <= proc_control_B.d_k1) {
          proc_control_B.c_d += C[proc_control_B.ia_l3 - 1] *
            C[proc_control_B.ix_as - 1];
          proc_control_B.ix_as++;
          proc_control_B.ia_l3++;
        }

        work[proc_control_B.coltop_e] += proc_control_B.c_d;
        proc_control_B.coltop_e++;
        proc_control_B.iac_g += 13;
      }
    }

    if (!(-tau == 0.0)) {
      proc_control_B.coltop_e = ic0 - 1;
      jy = 0;
      proc_control_B.iac_g = 0;
      while (proc_control_B.iac_g <= proc_control_B.lastc_f) {
        if (work[jy] != 0.0) {
          proc_control_B.c_d = work[jy] * -tau;
          proc_control_B.ix_as = iv0;
          proc_control_B.d_k1 = proc_control_B.coltop_e;
          proc_control_B.ia_l3 = proc_control_B.lastv_i +
            proc_control_B.coltop_e;
          while (proc_control_B.d_k1 + 1 <= proc_control_B.ia_l3) {
            C[proc_control_B.d_k1] += C[proc_control_B.ix_as - 1] *
              proc_control_B.c_d;
            proc_control_B.ix_as++;
            proc_control_B.d_k1++;
          }
        }

        jy++;
        proc_control_B.coltop_e += 13;
        proc_control_B.iac_g++;
      }
    }
  }
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
real_T proc_control::proc_control_xnrm2_yAJpxfog(int32_T n, const real_T x[3])
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[1]);
    } else {
      proc_control_B.scale_df = 3.3121686421112381E-170;
      proc_control_B.absxk_f = std::abs(x[1]);
      if (proc_control_B.absxk_f > 3.3121686421112381E-170) {
        y = 1.0;
        proc_control_B.scale_df = proc_control_B.absxk_f;
      } else {
        proc_control_B.t_j1 = proc_control_B.absxk_f / 3.3121686421112381E-170;
        y = proc_control_B.t_j1 * proc_control_B.t_j1;
      }

      proc_control_B.absxk_f = std::abs(x[2]);
      if (proc_control_B.absxk_f > proc_control_B.scale_df) {
        proc_control_B.t_j1 = proc_control_B.scale_df / proc_control_B.absxk_f;
        y = y * proc_control_B.t_j1 * proc_control_B.t_j1 + 1.0;
        proc_control_B.scale_df = proc_control_B.absxk_f;
      } else {
        proc_control_B.t_j1 = proc_control_B.absxk_f / proc_control_B.scale_df;
        y += proc_control_B.t_j1 * proc_control_B.t_j1;
      }

      y = proc_control_B.scale_df * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
real_T proc_control::proc_control_xzlarfg_RGPUCK3Y(int32_T n, real_T *alpha1,
  real_T x[3])
{
  real_T tau;
  tau = 0.0;
  if (n > 0) {
    proc_control_B.xnorm_b = proc_control_xnrm2_yAJpxfog(n - 1, x);
    if (proc_control_B.xnorm_b != 0.0) {
      proc_control_B.xnorm_b = proc_control_rt_hypotd_snf(*alpha1,
        proc_control_B.xnorm_b);
      if (*alpha1 >= 0.0) {
        proc_control_B.xnorm_b = -proc_control_B.xnorm_b;
      }

      if (std::abs(proc_control_B.xnorm_b) < 1.0020841800044864E-292) {
        proc_control_B.knt_av = 0;
        do {
          proc_control_B.knt_av++;
          for (int32_T c_k{1}; c_k < n; c_k++) {
            x[c_k] *= 9.9792015476736E+291;
          }

          proc_control_B.xnorm_b *= 9.9792015476736E+291;
          *alpha1 *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.xnorm_b) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_av < 20));

        proc_control_B.xnorm_b = proc_control_rt_hypotd_snf(*alpha1,
          proc_control_xnrm2_yAJpxfog(n - 1, x));
        if (*alpha1 >= 0.0) {
          proc_control_B.xnorm_b = -proc_control_B.xnorm_b;
        }

        tau = (proc_control_B.xnorm_b - *alpha1) / proc_control_B.xnorm_b;
        proc_control_B.a_g = 1.0 / (*alpha1 - proc_control_B.xnorm_b);
        for (int32_T c_k{1}; c_k < n; c_k++) {
          x[c_k] *= proc_control_B.a_g;
        }

        for (int32_T c_k{0}; c_k < proc_control_B.knt_av; c_k++) {
          proc_control_B.xnorm_b *= 1.0020841800044864E-292;
        }

        *alpha1 = proc_control_B.xnorm_b;
      } else {
        tau = (proc_control_B.xnorm_b - *alpha1) / proc_control_B.xnorm_b;
        proc_control_B.a_g = 1.0 / (*alpha1 - proc_control_B.xnorm_b);
        proc_control_B.knt_av = 1;
        while (proc_control_B.knt_av + 1 <= n) {
          x[proc_control_B.knt_av] *= proc_control_B.a_g;
          proc_control_B.knt_av++;
        }

        *alpha1 = proc_control_B.xnorm_b;
      }
    }
  }

  return tau;
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
void proc_control::proc_control_xdlanv2_W63kZdPv(real_T *a, real_T *b, real_T *c,
  real_T *d, real_T *rt1r, real_T *rt1i, real_T *rt2r, real_T *rt2i, real_T *cs,
  real_T *sn)
{
  if (*c == 0.0) {
    *cs = 1.0;
    *sn = 0.0;
  } else if (*b == 0.0) {
    *cs = 0.0;
    *sn = 1.0;
    proc_control_B.temp_k = *d;
    *d = *a;
    *a = proc_control_B.temp_k;
    *b = -*c;
    *c = 0.0;
  } else {
    proc_control_B.temp_k = *a - *d;
    if ((proc_control_B.temp_k == 0.0) && ((*b < 0.0) != (*c < 0.0))) {
      *cs = 1.0;
      *sn = 0.0;
    } else {
      int32_T c_0;
      proc_control_B.p_c = 0.5 * proc_control_B.temp_k;
      proc_control_B.bcmis_a = std::abs(*b);
      proc_control_B.z_cx = std::abs(*c);
      proc_control_B.bcmax_j = std::fmax(proc_control_B.bcmis_a,
        proc_control_B.z_cx);
      if (!(*b < 0.0)) {
        proc_control_B.b_hu = 1;
      } else {
        proc_control_B.b_hu = -1;
      }

      if (!(*c < 0.0)) {
        c_0 = 1;
      } else {
        c_0 = -1;
      }

      proc_control_B.bcmis_a = std::fmin(proc_control_B.bcmis_a,
        proc_control_B.z_cx) * static_cast<real_T>(proc_control_B.b_hu) *
        static_cast<real_T>(c_0);
      proc_control_B.scale_d = std::fmax(std::abs(proc_control_B.p_c),
        proc_control_B.bcmax_j);
      proc_control_B.z_cx = proc_control_B.p_c / proc_control_B.scale_d *
        proc_control_B.p_c + proc_control_B.bcmax_j / proc_control_B.scale_d *
        proc_control_B.bcmis_a;
      if (proc_control_B.z_cx >= 8.8817841970012523E-16) {
        if (!(proc_control_B.p_c < 0.0)) {
          proc_control_B.z_cx = std::sqrt(proc_control_B.scale_d) * std::sqrt
            (proc_control_B.z_cx);
        } else {
          proc_control_B.z_cx = -(std::sqrt(proc_control_B.scale_d) * std::sqrt
            (proc_control_B.z_cx));
        }

        proc_control_B.z_cx += proc_control_B.p_c;
        *a = *d + proc_control_B.z_cx;
        *d -= proc_control_B.bcmax_j / proc_control_B.z_cx *
          proc_control_B.bcmis_a;
        proc_control_B.bcmax_j = proc_control_rt_hypotd_snf(*c,
          proc_control_B.z_cx);
        *cs = proc_control_B.z_cx / proc_control_B.bcmax_j;
        *sn = *c / proc_control_B.bcmax_j;
        *b -= *c;
        *c = 0.0;
      } else {
        proc_control_B.bcmis_a = *b + *c;
        proc_control_B.bcmax_j = proc_control_rt_hypotd_snf
          (proc_control_B.bcmis_a, proc_control_B.temp_k);
        *cs = std::sqrt((std::abs(proc_control_B.bcmis_a) /
                         proc_control_B.bcmax_j + 1.0) * 0.5);
        if (!(proc_control_B.bcmis_a < 0.0)) {
          proc_control_B.b_hu = 1;
        } else {
          proc_control_B.b_hu = -1;
        }

        *sn = -(proc_control_B.p_c / (proc_control_B.bcmax_j * *cs)) *
          static_cast<real_T>(proc_control_B.b_hu);
        proc_control_B.temp_k = *a * *cs + *b * *sn;
        proc_control_B.p_c = -*a * *sn + *b * *cs;
        proc_control_B.bcmax_j = *c * *cs + *d * *sn;
        proc_control_B.bcmis_a = -*c * *sn + *d * *cs;
        *b = proc_control_B.p_c * *cs + proc_control_B.bcmis_a * *sn;
        *c = -proc_control_B.temp_k * *sn + proc_control_B.bcmax_j * *cs;
        proc_control_B.temp_k = ((proc_control_B.temp_k * *cs +
          proc_control_B.bcmax_j * *sn) + (-proc_control_B.p_c * *sn +
          proc_control_B.bcmis_a * *cs)) * 0.5;
        *a = proc_control_B.temp_k;
        *d = proc_control_B.temp_k;
        if (*c != 0.0) {
          if (*b != 0.0) {
            if ((*b < 0.0) == (*c < 0.0)) {
              proc_control_B.z_cx = std::sqrt(std::abs(*b));
              proc_control_B.bcmis_a = std::sqrt(std::abs(*c));
              proc_control_B.p_c = proc_control_B.z_cx * proc_control_B.bcmis_a;
              if (*c < 0.0) {
                proc_control_B.p_c = -proc_control_B.p_c;
              }

              proc_control_B.bcmax_j = 1.0 / std::sqrt(std::abs(*b + *c));
              *a = proc_control_B.temp_k + proc_control_B.p_c;
              *d = proc_control_B.temp_k - proc_control_B.p_c;
              *b -= *c;
              *c = 0.0;
              proc_control_B.p_c = proc_control_B.z_cx * proc_control_B.bcmax_j;
              proc_control_B.bcmax_j *= proc_control_B.bcmis_a;
              proc_control_B.temp_k = *cs * proc_control_B.p_c - *sn *
                proc_control_B.bcmax_j;
              *sn = *cs * proc_control_B.bcmax_j + *sn * proc_control_B.p_c;
              *cs = proc_control_B.temp_k;
            }
          } else {
            *b = -*c;
            *c = 0.0;
            proc_control_B.temp_k = *cs;
            *cs = -*sn;
            *sn = proc_control_B.temp_k;
          }
        }
      }
    }
  }

  *rt1r = *a;
  *rt2r = *d;
  if (*c == 0.0) {
    *rt1i = 0.0;
    *rt2i = 0.0;
  } else {
    *rt1i = std::sqrt(std::abs(*b)) * std::sqrt(std::abs(*c));
    *rt2i = -*rt1i;
  }
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
void proc_control::proc_control_xrot_3pYuG0oG(int32_T n, real_T x[169], int32_T
  ix0, int32_T iy0, real_T c, real_T s)
{
  if (n >= 1) {
    proc_control_B.ix_h4 = ix0 - 1;
    proc_control_B.iy_n = iy0 - 1;
    for (int32_T k{0}; k < n; k++) {
      proc_control_B.temp_bc = c * x[proc_control_B.ix_h4] + s *
        x[proc_control_B.iy_n];
      x[proc_control_B.iy_n] = c * x[proc_control_B.iy_n] - s *
        x[proc_control_B.ix_h4];
      x[proc_control_B.ix_h4] = proc_control_B.temp_bc;
      proc_control_B.iy_n++;
      proc_control_B.ix_h4++;
    }
  }
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
void proc_control::proc_control_xrot_yqSjxpUW(real_T x[169], int32_T ix0,
  int32_T iy0, real_T c, real_T s)
{
  for (proc_control_B.k_hy = 0; proc_control_B.k_hy < 13; proc_control_B.k_hy++)
  {
    int32_T temp_tmp;
    proc_control_B.temp_tmp_o = (iy0 + proc_control_B.k_hy) - 1;
    proc_control_B.temp_tmp_i2 = x[proc_control_B.temp_tmp_o];
    temp_tmp = (ix0 + proc_control_B.k_hy) - 1;
    proc_control_B.temp_tmp_h = x[temp_tmp];
    x[proc_control_B.temp_tmp_o] = proc_control_B.temp_tmp_i2 * c -
      proc_control_B.temp_tmp_h * s;
    x[temp_tmp] = proc_control_B.temp_tmp_h * c + proc_control_B.temp_tmp_i2 * s;
  }
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
int32_T proc_control::proc_contro_eml_dlahqr_HmsDpVfQ(real_T h[169], real_T z
  [169])
{
  int32_T info;
  boolean_T exitg1;
  info = 0;
  proc_control_B.v_c[0] = 0.0;
  proc_control_B.v_c[1] = 0.0;
  proc_control_B.v_c[2] = 0.0;
  proc_control_B.L_a = 0;
  for (proc_control_B.i_c = 0; proc_control_B.i_c < 10; proc_control_B.i_c++) {
    h[proc_control_B.L_a + 2] = 0.0;
    h[proc_control_B.L_a + 3] = 0.0;
    proc_control_B.L_a += 14;
  }

  h[142] = 0.0;
  proc_control_B.i_c = 12;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.i_c + 1 >= 1)) {
    boolean_T exitg2;
    boolean_T goto150;
    proc_control_B.L_a = 1;
    goto150 = false;
    proc_control_B.ix_c4 = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.ix_c4 < 391)) {
      boolean_T exitg3;
      proc_control_B.k_fp = proc_control_B.i_c;
      exitg3 = false;
      while ((!exitg3) && (proc_control_B.k_fp + 1 > proc_control_B.L_a)) {
        proc_control_B.hoffset_n = (proc_control_B.k_fp - 1) * 13 +
          proc_control_B.k_fp;
        if (std::abs(h[proc_control_B.hoffset_n]) <= 1.3027094340058323E-291) {
          exitg3 = true;
        } else {
          proc_control_B.nr_c = 13 * proc_control_B.k_fp + proc_control_B.k_fp;
          proc_control_B.tst_o = std::abs(h[proc_control_B.hoffset_n - 1]) + std::
            abs(h[proc_control_B.nr_c]);
          if (proc_control_B.tst_o == 0.0) {
            if (proc_control_B.k_fp - 1 >= 1) {
              proc_control_B.tst_o = std::abs(h[((proc_control_B.k_fp - 2) * 13
                + proc_control_B.k_fp) - 1]);
            }

            if (proc_control_B.k_fp + 2 <= 13) {
              proc_control_B.tst_o += std::abs(h[proc_control_B.nr_c + 1]);
            }
          }

          if (std::abs(h[proc_control_B.hoffset_n]) <= 2.2204460492503131E-16 *
              proc_control_B.tst_o) {
            proc_control_B.htmp1 = std::abs(h[proc_control_B.hoffset_n]);
            proc_control_B.tst_o = std::abs(h[proc_control_B.nr_c - 1]);
            if (proc_control_B.htmp1 > proc_control_B.tst_o) {
              proc_control_B.ab_g = proc_control_B.htmp1;
              proc_control_B.ba_o = proc_control_B.tst_o;
            } else {
              proc_control_B.ab_g = proc_control_B.tst_o;
              proc_control_B.ba_o = proc_control_B.htmp1;
            }

            proc_control_B.tst_o = h[proc_control_B.nr_c];
            proc_control_B.htmp1 = std::abs(proc_control_B.tst_o);
            proc_control_B.tst_o = std::abs(h[proc_control_B.hoffset_n - 1] -
              proc_control_B.tst_o);
            if (proc_control_B.htmp1 > proc_control_B.tst_o) {
              proc_control_B.aa_g = proc_control_B.htmp1;
              proc_control_B.htmp1 = proc_control_B.tst_o;
            } else {
              proc_control_B.aa_g = proc_control_B.tst_o;
            }

            proc_control_B.tst_o = proc_control_B.aa_g + proc_control_B.ab_g;
            if (proc_control_B.ab_g / proc_control_B.tst_o * proc_control_B.ba_o
                <= std::fmax(1.3027094340058323E-291, proc_control_B.aa_g /
                             proc_control_B.tst_o * proc_control_B.htmp1 *
                             2.2204460492503131E-16)) {
              exitg3 = true;
            } else {
              proc_control_B.k_fp--;
            }
          } else {
            proc_control_B.k_fp--;
          }
        }
      }

      proc_control_B.L_a = proc_control_B.k_fp + 1;
      if (proc_control_B.k_fp + 1 > 1) {
        h[proc_control_B.k_fp + 13 * (proc_control_B.k_fp - 1)] = 0.0;
      }

      if (proc_control_B.k_fp + 1 >= proc_control_B.i_c) {
        goto150 = true;
        exitg2 = true;
      } else {
        switch (proc_control_B.ix_c4) {
         case 10:
          proc_control_B.nr_c = 13 * proc_control_B.k_fp + proc_control_B.k_fp;
          proc_control_B.tst_o = std::abs(h[((proc_control_B.k_fp + 1) * 13 +
            proc_control_B.k_fp) + 2]) + std::abs(h[proc_control_B.nr_c + 1]);
          proc_control_B.ba_o = 0.75 * proc_control_B.tst_o +
            h[proc_control_B.nr_c];
          proc_control_B.h12_a = -0.4375 * proc_control_B.tst_o;
          proc_control_B.aa_g = proc_control_B.tst_o;
          proc_control_B.htmp1 = proc_control_B.ba_o;
          break;

         case 20:
          proc_control_B.tst_o = std::abs(h[((proc_control_B.i_c - 2) * 13 +
            proc_control_B.i_c) - 1]) + std::abs(h[(proc_control_B.i_c - 1) * 13
            + proc_control_B.i_c]);
          proc_control_B.ba_o = h[13 * proc_control_B.i_c + proc_control_B.i_c]
            + 0.75 * proc_control_B.tst_o;
          proc_control_B.h12_a = -0.4375 * proc_control_B.tst_o;
          proc_control_B.aa_g = proc_control_B.tst_o;
          proc_control_B.htmp1 = proc_control_B.ba_o;
          break;

         default:
          proc_control_B.m_i = (proc_control_B.i_c - 1) * 13 +
            proc_control_B.i_c;
          proc_control_B.ba_o = h[proc_control_B.m_i - 1];
          proc_control_B.aa_g = h[proc_control_B.m_i];
          proc_control_B.h12_a = h[(13 * proc_control_B.i_c + proc_control_B.i_c)
            - 1];
          proc_control_B.htmp1 = h[13 * proc_control_B.i_c + proc_control_B.i_c];
          break;
        }

        proc_control_B.tst_o = ((std::abs(proc_control_B.ba_o) + std::abs
          (proc_control_B.h12_a)) + std::abs(proc_control_B.aa_g)) + std::abs
          (proc_control_B.htmp1);
        if (proc_control_B.tst_o == 0.0) {
          proc_control_B.ba_o = 0.0;
          proc_control_B.htmp1 = 0.0;
          proc_control_B.ab_g = 0.0;
          proc_control_B.aa_g = 0.0;
        } else {
          proc_control_B.ba_o /= proc_control_B.tst_o;
          proc_control_B.htmp1 /= proc_control_B.tst_o;
          proc_control_B.ab_g = (proc_control_B.ba_o + proc_control_B.htmp1) /
            2.0;
          proc_control_B.ba_o = (proc_control_B.ba_o - proc_control_B.ab_g) *
            (proc_control_B.htmp1 - proc_control_B.ab_g) - proc_control_B.h12_a /
            proc_control_B.tst_o * (proc_control_B.aa_g / proc_control_B.tst_o);
          proc_control_B.aa_g = std::sqrt(std::abs(proc_control_B.ba_o));
          if (proc_control_B.ba_o >= 0.0) {
            proc_control_B.ba_o = proc_control_B.ab_g * proc_control_B.tst_o;
            proc_control_B.ab_g = proc_control_B.ba_o;
            proc_control_B.htmp1 = proc_control_B.aa_g * proc_control_B.tst_o;
            proc_control_B.aa_g = -proc_control_B.htmp1;
          } else {
            proc_control_B.ba_o = proc_control_B.ab_g + proc_control_B.aa_g;
            proc_control_B.ab_g -= proc_control_B.aa_g;
            if (std::abs(proc_control_B.ba_o - proc_control_B.htmp1) <= std::abs
                (proc_control_B.ab_g - proc_control_B.htmp1)) {
              proc_control_B.ba_o *= proc_control_B.tst_o;
              proc_control_B.ab_g = proc_control_B.ba_o;
            } else {
              proc_control_B.ab_g *= proc_control_B.tst_o;
              proc_control_B.ba_o = proc_control_B.ab_g;
            }

            proc_control_B.htmp1 = 0.0;
            proc_control_B.aa_g = 0.0;
          }
        }

        proc_control_B.m_i = proc_control_B.i_c - 1;
        exitg3 = false;
        while ((!exitg3) && (proc_control_B.m_i >= proc_control_B.k_fp + 1)) {
          proc_control_B.nr_c = (proc_control_B.m_i - 1) * 13 +
            proc_control_B.m_i;
          proc_control_B.h12_a = h[proc_control_B.nr_c];
          proc_control_B.tst_tmp_tmp_b = h[proc_control_B.nr_c - 1];
          proc_control_B.tst_tmp_g = proc_control_B.tst_tmp_tmp_b -
            proc_control_B.ab_g;
          proc_control_B.tst_o = (std::abs(proc_control_B.tst_tmp_g) + std::abs
            (proc_control_B.aa_g)) + std::abs(proc_control_B.h12_a);
          proc_control_B.h12_a /= proc_control_B.tst_o;
          proc_control_B.nr_c = 13 * proc_control_B.m_i + proc_control_B.m_i;
          proc_control_B.v_c[0] = (proc_control_B.tst_tmp_g /
            proc_control_B.tst_o * (proc_control_B.tst_tmp_tmp_b -
            proc_control_B.ba_o) + h[proc_control_B.nr_c - 1] *
            proc_control_B.h12_a) - proc_control_B.aa_g / proc_control_B.tst_o *
            proc_control_B.htmp1;
          proc_control_B.tst_tmp_g = h[proc_control_B.nr_c];
          proc_control_B.v_c[1] = (((proc_control_B.tst_tmp_tmp_b +
            proc_control_B.tst_tmp_g) - proc_control_B.ba_o) -
            proc_control_B.ab_g) * proc_control_B.h12_a;
          proc_control_B.v_c[2] = h[proc_control_B.nr_c + 1] *
            proc_control_B.h12_a;
          proc_control_B.tst_o = (std::abs(proc_control_B.v_c[0]) + std::abs
            (proc_control_B.v_c[1])) + std::abs(proc_control_B.v_c[2]);
          proc_control_B.v_c[0] /= proc_control_B.tst_o;
          proc_control_B.v_c[1] /= proc_control_B.tst_o;
          proc_control_B.v_c[2] /= proc_control_B.tst_o;
          if (proc_control_B.k_fp + 1 == proc_control_B.m_i) {
            exitg3 = true;
          } else {
            proc_control_B.hoffset_n = (proc_control_B.m_i - 2) * 13 +
              proc_control_B.m_i;
            if (std::abs(h[proc_control_B.hoffset_n - 1]) * (std::abs
                 (proc_control_B.v_c[1]) + std::abs(proc_control_B.v_c[2])) <=
                ((std::abs(h[proc_control_B.hoffset_n - 2]) + std::abs
                  (proc_control_B.tst_tmp_tmp_b)) + std::abs
                 (proc_control_B.tst_tmp_g)) * (2.2204460492503131E-16 * std::
                 abs(proc_control_B.v_c[0]))) {
              exitg3 = true;
            } else {
              proc_control_B.m_i--;
            }
          }
        }

        proc_control_B.b_k_c2 = proc_control_B.m_i;
        while (proc_control_B.b_k_c2 <= proc_control_B.i_c) {
          proc_control_B.nr_c = (proc_control_B.i_c - proc_control_B.b_k_c2) + 2;
          if (proc_control_B.nr_c >= 3) {
            proc_control_B.nr_c = 3;
          }

          if (proc_control_B.b_k_c2 > proc_control_B.m_i) {
            proc_control_B.hoffset_n = (proc_control_B.b_k_c2 - 2) * 13 +
              proc_control_B.b_k_c2;
            proc_control_B.b_j = 0;
            while (proc_control_B.b_j <= proc_control_B.nr_c - 1) {
              proc_control_B.v_c[proc_control_B.b_j] = h[(proc_control_B.b_j +
                proc_control_B.hoffset_n) - 1];
              proc_control_B.b_j++;
            }
          }

          proc_control_B.htmp1 = proc_control_B.v_c[0];
          proc_control_B.tst_o = proc_control_xzlarfg_RGPUCK3Y
            (proc_control_B.nr_c, &proc_control_B.htmp1, proc_control_B.v_c);
          proc_control_B.v_c[0] = proc_control_B.htmp1;
          if (proc_control_B.b_k_c2 > proc_control_B.m_i) {
            h[(proc_control_B.b_k_c2 + 13 * (proc_control_B.b_k_c2 - 2)) - 1] =
              proc_control_B.htmp1;
            h[proc_control_B.b_k_c2 + 13 * (proc_control_B.b_k_c2 - 2)] = 0.0;
            if (proc_control_B.b_k_c2 < proc_control_B.i_c) {
              h[(proc_control_B.b_k_c2 + 13 * (proc_control_B.b_k_c2 - 2)) + 1] =
                0.0;
            }
          } else if (proc_control_B.m_i > proc_control_B.k_fp + 1) {
            proc_control_B.hoffset_n = ((proc_control_B.b_k_c2 - 2) * 13 +
              proc_control_B.b_k_c2) - 1;
            h[proc_control_B.hoffset_n] *= 1.0 - proc_control_B.tst_o;
          }

          proc_control_B.htmp1 = proc_control_B.v_c[1];
          proc_control_B.ab_g = proc_control_B.tst_o * proc_control_B.v_c[1];
          switch (proc_control_B.nr_c) {
           case 3:
            proc_control_B.ba_o = proc_control_B.v_c[2];
            proc_control_B.aa_g = proc_control_B.tst_o * proc_control_B.v_c[2];
            proc_control_B.nr_c = proc_control_B.b_k_c2 - 1;
            while (proc_control_B.nr_c + 1 < 14) {
              proc_control_B.b_j = 13 * proc_control_B.nr_c +
                proc_control_B.b_k_c2;
              proc_control_B.h12_a = (h[proc_control_B.b_j - 1] +
                h[proc_control_B.b_j] * proc_control_B.htmp1) +
                h[proc_control_B.b_j + 1] * proc_control_B.ba_o;
              h[proc_control_B.b_j - 1] -= proc_control_B.h12_a *
                proc_control_B.tst_o;
              h[proc_control_B.b_j] -= proc_control_B.h12_a *
                proc_control_B.ab_g;
              h[proc_control_B.b_j + 1] -= proc_control_B.h12_a *
                proc_control_B.aa_g;
              proc_control_B.nr_c++;
            }

            if (proc_control_B.b_k_c2 + 3 <= proc_control_B.i_c + 1) {
              proc_control_B.nr_c = proc_control_B.b_k_c2 + 3;
            } else {
              proc_control_B.nr_c = proc_control_B.i_c + 1;
            }

            proc_control_B.hoffset_n = 0;
            while (proc_control_B.hoffset_n <= proc_control_B.nr_c - 1) {
              proc_control_B.b_j = (proc_control_B.b_k_c2 - 1) * 13 +
                proc_control_B.hoffset_n;
              proc_control_B.h12_tmp = 13 * proc_control_B.b_k_c2 +
                proc_control_B.hoffset_n;
              proc_control_B.h12_tmp_i = (proc_control_B.b_k_c2 + 1) * 13 +
                proc_control_B.hoffset_n;
              proc_control_B.h12_a = (h[proc_control_B.h12_tmp] *
                proc_control_B.htmp1 + h[proc_control_B.b_j]) +
                h[proc_control_B.h12_tmp_i] * proc_control_B.ba_o;
              h[proc_control_B.b_j] -= proc_control_B.h12_a *
                proc_control_B.tst_o;
              h[proc_control_B.h12_tmp] -= proc_control_B.h12_a *
                proc_control_B.ab_g;
              h[proc_control_B.h12_tmp_i] -= proc_control_B.h12_a *
                proc_control_B.aa_g;
              proc_control_B.hoffset_n++;
            }

            for (proc_control_B.nr_c = 0; proc_control_B.nr_c < 13;
                 proc_control_B.nr_c++) {
              proc_control_B.b_j = (proc_control_B.b_k_c2 - 1) * 13 +
                proc_control_B.nr_c;
              proc_control_B.h12_tmp = 13 * proc_control_B.b_k_c2 +
                proc_control_B.nr_c;
              proc_control_B.h12_tmp_i = (proc_control_B.b_k_c2 + 1) * 13 +
                proc_control_B.nr_c;
              proc_control_B.h12_a = (z[proc_control_B.h12_tmp] *
                proc_control_B.htmp1 + z[proc_control_B.b_j]) +
                z[proc_control_B.h12_tmp_i] * proc_control_B.ba_o;
              z[proc_control_B.b_j] -= proc_control_B.h12_a *
                proc_control_B.tst_o;
              z[proc_control_B.h12_tmp] -= proc_control_B.h12_a *
                proc_control_B.ab_g;
              z[proc_control_B.h12_tmp_i] -= proc_control_B.h12_a *
                proc_control_B.aa_g;
            }
            break;

           case 2:
            proc_control_B.nr_c = proc_control_B.b_k_c2 - 1;
            while (proc_control_B.nr_c + 1 < 14) {
              proc_control_B.b_j = 13 * proc_control_B.nr_c +
                proc_control_B.b_k_c2;
              proc_control_B.ba_o = h[proc_control_B.b_j - 1];
              proc_control_B.h12_a = h[proc_control_B.b_j] *
                proc_control_B.htmp1 + proc_control_B.ba_o;
              h[proc_control_B.b_j - 1] = proc_control_B.ba_o -
                proc_control_B.h12_a * proc_control_B.tst_o;
              h[proc_control_B.b_j] -= proc_control_B.h12_a *
                proc_control_B.ab_g;
              proc_control_B.nr_c++;
            }

            proc_control_B.nr_c = 0;
            while (proc_control_B.nr_c <= proc_control_B.i_c) {
              proc_control_B.b_j = (proc_control_B.b_k_c2 - 1) * 13 +
                proc_control_B.nr_c;
              proc_control_B.h12_tmp = 13 * proc_control_B.b_k_c2 +
                proc_control_B.nr_c;
              proc_control_B.h12_a = h[proc_control_B.h12_tmp] *
                proc_control_B.htmp1 + h[proc_control_B.b_j];
              h[proc_control_B.b_j] -= proc_control_B.h12_a *
                proc_control_B.tst_o;
              h[proc_control_B.h12_tmp] -= proc_control_B.h12_a *
                proc_control_B.ab_g;
              proc_control_B.nr_c++;
            }

            for (proc_control_B.nr_c = 0; proc_control_B.nr_c < 13;
                 proc_control_B.nr_c++) {
              proc_control_B.b_j = (proc_control_B.b_k_c2 - 1) * 13;
              proc_control_B.h12_a = z[13 * proc_control_B.b_k_c2 +
                proc_control_B.nr_c] * proc_control_B.htmp1 +
                z[proc_control_B.b_j + proc_control_B.nr_c];
              proc_control_B.hoffset_n = proc_control_B.b_j +
                proc_control_B.nr_c;
              z[proc_control_B.hoffset_n] -= proc_control_B.h12_a *
                proc_control_B.tst_o;
              proc_control_B.hoffset_n = 13 * proc_control_B.b_k_c2 +
                proc_control_B.nr_c;
              z[proc_control_B.hoffset_n] -= proc_control_B.h12_a *
                proc_control_B.ab_g;
            }
            break;
          }

          proc_control_B.b_k_c2++;
        }

        proc_control_B.ix_c4++;
      }
    }

    if (!goto150) {
      info = proc_control_B.i_c + 1;
      exitg1 = true;
    } else {
      if ((proc_control_B.i_c + 1 != proc_control_B.L_a) && (proc_control_B.L_a ==
           proc_control_B.i_c)) {
        proc_control_B.ix_c4 = 13 * proc_control_B.i_c + proc_control_B.i_c;
        proc_control_B.ab_g = h[proc_control_B.ix_c4 - 1];
        proc_control_B.m_i = (proc_control_B.i_c - 1) * 13 + proc_control_B.i_c;
        proc_control_B.ba_o = h[proc_control_B.m_i];
        proc_control_B.aa_g = h[proc_control_B.ix_c4];
        proc_control_xdlanv2_W63kZdPv(&h[(proc_control_B.i_c + 13 *
          (proc_control_B.i_c - 1)) - 1], &proc_control_B.ab_g,
          &proc_control_B.ba_o, &proc_control_B.aa_g, &proc_control_B.h12_a,
          &proc_control_B.tst_tmp_tmp_b, &proc_control_B.tst_tmp_g,
          &proc_control_B.a__4, &proc_control_B.tst_o, &proc_control_B.htmp1);
        h[proc_control_B.ix_c4 - 1] = proc_control_B.ab_g;
        h[proc_control_B.m_i] = proc_control_B.ba_o;
        h[proc_control_B.ix_c4] = proc_control_B.aa_g;
        if (proc_control_B.i_c + 1 < 13) {
          proc_control_B.k_fp = (proc_control_B.i_c + 1) * 13 +
            proc_control_B.i_c;
          proc_control_B.ix_c4 = proc_control_B.k_fp - 1;
          proc_control_B.m_i = 0;
          while (proc_control_B.m_i <= 11 - proc_control_B.i_c) {
            proc_control_B.ab_g = proc_control_B.tst_o * h[proc_control_B.ix_c4]
              + proc_control_B.htmp1 * h[proc_control_B.k_fp];
            h[proc_control_B.k_fp] = proc_control_B.tst_o *
              h[proc_control_B.k_fp] - proc_control_B.htmp1 *
              h[proc_control_B.ix_c4];
            h[proc_control_B.ix_c4] = proc_control_B.ab_g;
            proc_control_B.k_fp += 13;
            proc_control_B.ix_c4 += 13;
            proc_control_B.m_i++;
          }
        }

        proc_control_xrot_3pYuG0oG(proc_control_B.i_c - 1, h,
          (proc_control_B.i_c - 1) * 13 + 1, proc_control_B.i_c * 13 + 1,
          proc_control_B.tst_o, proc_control_B.htmp1);
        proc_control_xrot_yqSjxpUW(z, (proc_control_B.i_c - 1) * 13 + 1,
          proc_control_B.i_c * 13 + 1, proc_control_B.tst_o,
          proc_control_B.htmp1);
      }

      proc_control_B.i_c = proc_control_B.L_a - 2;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
void proc_control::proc_control_schur_o(const real_T A[169], real_T V[169],
  real_T T[169])
{
  if (proc_control_anyNonFinite(A)) {
    for (proc_control_B.i_ha = 0; proc_control_B.i_ha < 169; proc_control_B.i_ha
         ++) {
      V[proc_control_B.i_ha] = (rtNaN);
    }

    proc_control_B.i_ha = 2;
    for (proc_control_B.im1n = 0; proc_control_B.im1n < 12; proc_control_B.im1n
         ++) {
      proc_control_B.in_j = proc_control_B.i_ha;
      while (proc_control_B.in_j < 14) {
        V[(proc_control_B.in_j + 13 * proc_control_B.im1n) - 1] = 0.0;
        proc_control_B.in_j++;
      }

      proc_control_B.i_ha++;
    }

    for (proc_control_B.i_ha = 0; proc_control_B.i_ha < 169; proc_control_B.i_ha
         ++) {
      T[proc_control_B.i_ha] = (rtNaN);
    }
  } else {
    std::memcpy(&T[0], &A[0], 169U * sizeof(real_T));
    std::memset(&proc_control_B.work_e[0], 0, 13U * sizeof(real_T));
    for (proc_control_B.i_ha = 0; proc_control_B.i_ha < 12; proc_control_B.i_ha
         ++) {
      proc_control_B.im1n = proc_control_B.i_ha * 13 + 2;
      proc_control_B.in_j = (proc_control_B.i_ha + 1) * 13;
      proc_control_B.alpha1_tmp_g = (13 * proc_control_B.i_ha +
        proc_control_B.i_ha) + 1;
      proc_control_B.alpha1_tmp = T[proc_control_B.alpha1_tmp_g];
      if (proc_control_B.i_ha + 3 <= 13) {
        proc_control_B.lastc_m = proc_control_B.i_ha + 3;
      } else {
        proc_control_B.lastc_m = 13;
      }

      proc_control_B.lastc_m += proc_control_B.i_ha * 13;
      proc_control_B.tau_ik[proc_control_B.i_ha] = 0.0;
      proc_control_B.beta1_c = proc_control_xnrm2_vEpa8zuo(11 -
        proc_control_B.i_ha, T, proc_control_B.lastc_m);
      if (proc_control_B.beta1_c != 0.0) {
        proc_control_B.beta1_c = proc_control_rt_hypotd_snf
          (proc_control_B.alpha1_tmp, proc_control_B.beta1_c);
        if (proc_control_B.alpha1_tmp >= 0.0) {
          proc_control_B.beta1_c = -proc_control_B.beta1_c;
        }

        if (std::abs(proc_control_B.beta1_c) < 1.0020841800044864E-292) {
          proc_control_B.knt_kk = 0;
          proc_control_B.jy_g = (proc_control_B.lastc_m - proc_control_B.i_ha) +
            10;
          do {
            proc_control_B.knt_kk++;
            proc_control_B.rowleft = proc_control_B.lastc_m;
            while (proc_control_B.rowleft <= proc_control_B.jy_g) {
              T[proc_control_B.rowleft - 1] *= 9.9792015476736E+291;
              proc_control_B.rowleft++;
            }

            proc_control_B.beta1_c *= 9.9792015476736E+291;
            proc_control_B.alpha1_tmp *= 9.9792015476736E+291;
          } while ((std::abs(proc_control_B.beta1_c) < 1.0020841800044864E-292) &&
                   (proc_control_B.knt_kk < 20));

          proc_control_B.beta1_c = proc_control_rt_hypotd_snf
            (proc_control_B.alpha1_tmp, proc_control_xnrm2_vEpa8zuo(11 -
              proc_control_B.i_ha, T, proc_control_B.lastc_m));
          if (proc_control_B.alpha1_tmp >= 0.0) {
            proc_control_B.beta1_c = -proc_control_B.beta1_c;
          }

          proc_control_B.tau_ik[proc_control_B.i_ha] = (proc_control_B.beta1_c -
            proc_control_B.alpha1_tmp) / proc_control_B.beta1_c;
          proc_control_B.alpha1_tmp = 1.0 / (proc_control_B.alpha1_tmp -
            proc_control_B.beta1_c);
          proc_control_B.jy_g = (proc_control_B.lastc_m - proc_control_B.i_ha) +
            10;
          while (proc_control_B.lastc_m <= proc_control_B.jy_g) {
            T[proc_control_B.lastc_m - 1] *= proc_control_B.alpha1_tmp;
            proc_control_B.lastc_m++;
          }

          proc_control_B.lastc_m = 0;
          while (proc_control_B.lastc_m <= proc_control_B.knt_kk - 1) {
            proc_control_B.beta1_c *= 1.0020841800044864E-292;
            proc_control_B.lastc_m++;
          }

          proc_control_B.alpha1_tmp = proc_control_B.beta1_c;
        } else {
          proc_control_B.alpha1_tmp = T[(13 * proc_control_B.i_ha +
            proc_control_B.i_ha) + 1];
          proc_control_B.tau_ik[proc_control_B.i_ha] = (proc_control_B.beta1_c -
            proc_control_B.alpha1_tmp) / proc_control_B.beta1_c;
          proc_control_B.alpha1_tmp = 1.0 / (proc_control_B.alpha1_tmp -
            proc_control_B.beta1_c);
          proc_control_B.knt_kk = (proc_control_B.lastc_m - proc_control_B.i_ha)
            + 10;
          while (proc_control_B.lastc_m <= proc_control_B.knt_kk) {
            T[proc_control_B.lastc_m - 1] *= proc_control_B.alpha1_tmp;
            proc_control_B.lastc_m++;
          }

          proc_control_B.alpha1_tmp = proc_control_B.beta1_c;
        }
      }

      T[proc_control_B.alpha1_tmp_g] = 1.0;
      proc_control_B.jy_g = (proc_control_B.i_ha + proc_control_B.im1n) - 1;
      if (proc_control_B.tau_ik[proc_control_B.i_ha] != 0.0) {
        boolean_T exitg2;
        proc_control_B.knt_kk = 11 - proc_control_B.i_ha;
        proc_control_B.lastc_m = (proc_control_B.jy_g - proc_control_B.i_ha) +
          11;
        while ((proc_control_B.knt_kk + 1 > 0) && (T[proc_control_B.lastc_m] ==
                0.0)) {
          proc_control_B.knt_kk--;
          proc_control_B.lastc_m--;
        }

        proc_control_B.lastc_m = 13;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.lastc_m > 0)) {
          int32_T exitg1;
          proc_control_B.rowleft = proc_control_B.in_j + proc_control_B.lastc_m;
          proc_control_B.alpha1_tmp_g = proc_control_B.rowleft;
          do {
            exitg1 = 0;
            if (proc_control_B.alpha1_tmp_g <= proc_control_B.knt_kk * 13 +
                proc_control_B.rowleft) {
              if (T[proc_control_B.alpha1_tmp_g - 1] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.alpha1_tmp_g += 13;
              }
            } else {
              proc_control_B.lastc_m--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt_kk = -1;
        proc_control_B.lastc_m = 0;
      }

      if (proc_control_B.knt_kk + 1 > 0) {
        if (proc_control_B.lastc_m != 0) {
          proc_control_B.rowleft = 0;
          while (proc_control_B.rowleft <= proc_control_B.lastc_m - 1) {
            proc_control_B.work_e[proc_control_B.rowleft] = 0.0;
            proc_control_B.rowleft++;
          }

          proc_control_B.rowleft = proc_control_B.jy_g;
          proc_control_B.alpha1_tmp_g = (13 * proc_control_B.knt_kk +
            proc_control_B.in_j) + 1;
          proc_control_B.b_ix_e = proc_control_B.in_j + 1;
          while (proc_control_B.b_ix_e <= proc_control_B.alpha1_tmp_g) {
            proc_control_B.iy_do = 0;
            proc_control_B.g_pz = (proc_control_B.b_ix_e +
              proc_control_B.lastc_m) - 1;
            proc_control_B.b_ia_i = proc_control_B.b_ix_e;
            while (proc_control_B.b_ia_i <= proc_control_B.g_pz) {
              proc_control_B.work_e[proc_control_B.iy_do] +=
                T[proc_control_B.b_ia_i - 1] * T[proc_control_B.rowleft];
              proc_control_B.iy_do++;
              proc_control_B.b_ia_i++;
            }

            proc_control_B.rowleft++;
            proc_control_B.b_ix_e += 13;
          }
        }

        if (!(-proc_control_B.tau_ik[proc_control_B.i_ha] == 0.0)) {
          proc_control_B.rowleft = proc_control_B.in_j;
          proc_control_B.alpha1_tmp_g = 0;
          while (proc_control_B.alpha1_tmp_g <= proc_control_B.knt_kk) {
            if (T[proc_control_B.jy_g] != 0.0) {
              proc_control_B.beta1_c = T[proc_control_B.jy_g] *
                -proc_control_B.tau_ik[proc_control_B.i_ha];
              proc_control_B.b_ix_e = 0;
              proc_control_B.iy_do = proc_control_B.rowleft;
              proc_control_B.g_pz = proc_control_B.lastc_m +
                proc_control_B.rowleft;
              while (proc_control_B.iy_do + 1 <= proc_control_B.g_pz) {
                T[proc_control_B.iy_do] +=
                  proc_control_B.work_e[proc_control_B.b_ix_e] *
                  proc_control_B.beta1_c;
                proc_control_B.b_ix_e++;
                proc_control_B.iy_do++;
              }
            }

            proc_control_B.jy_g++;
            proc_control_B.rowleft += 13;
            proc_control_B.alpha1_tmp_g++;
          }
        }
      }

      proc_control_xzlarf_2N2eIztg(12 - proc_control_B.i_ha, 12 -
        proc_control_B.i_ha, proc_control_B.i_ha + proc_control_B.im1n,
        proc_control_B.tau_ik[proc_control_B.i_ha], T, (proc_control_B.i_ha +
        proc_control_B.in_j) + 2, proc_control_B.work_e);
      T[(proc_control_B.i_ha + 13 * proc_control_B.i_ha) + 1] =
        proc_control_B.alpha1_tmp;
    }

    std::memcpy(&V[0], &T[0], 169U * sizeof(real_T));
    for (proc_control_B.i_ha = 11; proc_control_B.i_ha >= 0; proc_control_B.i_ha
         --) {
      proc_control_B.im1n = (proc_control_B.i_ha + 1) * 13;
      proc_control_B.in_j = 0;
      while (proc_control_B.in_j <= proc_control_B.i_ha) {
        V[proc_control_B.im1n + proc_control_B.in_j] = 0.0;
        proc_control_B.in_j++;
      }

      proc_control_B.in_j = proc_control_B.i_ha;
      while (proc_control_B.in_j + 3 < 14) {
        proc_control_B.lastc_m = proc_control_B.im1n + proc_control_B.in_j;
        V[proc_control_B.lastc_m + 2] = V[proc_control_B.lastc_m - 11];
        proc_control_B.in_j++;
      }
    }

    std::memset(&V[0], 0, 13U * sizeof(real_T));
    std::memset(&proc_control_B.work_e[0], 0, 13U * sizeof(real_T));
    V[0] = 1.0;
    for (proc_control_B.im1n = 11; proc_control_B.im1n >= 0; proc_control_B.im1n
         --) {
      proc_control_B.in_j = (proc_control_B.im1n * 13 + proc_control_B.im1n) +
        14;
      if (proc_control_B.im1n + 1 < 12) {
        V[proc_control_B.in_j] = 1.0;
        proc_control_xzlarf_2N2eIztg(12 - proc_control_B.im1n, 11 -
          proc_control_B.im1n, proc_control_B.in_j + 1,
          proc_control_B.tau_ik[proc_control_B.im1n], V, proc_control_B.in_j +
          14, proc_control_B.work_e);
        proc_control_B.knt_kk = (proc_control_B.in_j - proc_control_B.im1n) + 12;
        proc_control_B.lastc_m = proc_control_B.in_j + 1;
        while (proc_control_B.lastc_m + 1 <= proc_control_B.knt_kk) {
          V[proc_control_B.lastc_m] *=
            -proc_control_B.tau_ik[proc_control_B.im1n];
          proc_control_B.lastc_m++;
        }
      }

      V[proc_control_B.in_j] = 1.0 - proc_control_B.tau_ik[proc_control_B.im1n];
      proc_control_B.knt_kk = 0;
      while (proc_control_B.knt_kk <= proc_control_B.im1n - 1) {
        V[(proc_control_B.in_j - proc_control_B.knt_kk) - 1] = 0.0;
        proc_control_B.knt_kk++;
      }
    }

    proc_contro_eml_dlahqr_HmsDpVfQ(T, V);
    proc_control_B.i_ha = 4;
    for (proc_control_B.im1n = 0; proc_control_B.im1n < 10; proc_control_B.im1n
         ++) {
      proc_control_B.in_j = proc_control_B.i_ha;
      while (proc_control_B.in_j < 14) {
        T[(proc_control_B.in_j + 13 * proc_control_B.im1n) - 1] = 0.0;
        proc_control_B.in_j++;
      }

      proc_control_B.i_ha++;
    }
  }
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
void proc_control::proc_control_expm_m(real_T A[169], real_T F[169])
{
  if (proc_control_anyNonFinite(A)) {
    for (proc_control_B.e_i = 0; proc_control_B.e_i < 169; proc_control_B.e_i++)
    {
      F[proc_control_B.e_i] = (rtNaN);
    }
  } else {
    int32_T exitg1;
    boolean_T exitg2;
    boolean_T recomputeDiags;
    recomputeDiags = true;
    proc_control_B.e_j = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.e_j < 13)) {
      proc_control_B.e_i = 0;
      do {
        exitg1 = 0;
        if (proc_control_B.e_i < 13) {
          if ((proc_control_B.e_i != proc_control_B.e_j) && (!(A[13 *
                proc_control_B.e_j + proc_control_B.e_i] == 0.0))) {
            recomputeDiags = false;
            exitg1 = 1;
          } else {
            proc_control_B.e_i++;
          }
        } else {
          proc_control_B.e_j++;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    if (recomputeDiags) {
      std::memset(&F[0], 0, 169U * sizeof(real_T));
      proc_control_B.e_i = 0;
      for (proc_control_B.b_s_f = 0; proc_control_B.b_s_f < 13;
           proc_control_B.b_s_f++) {
        F[proc_control_B.e_i] = std::exp(A[proc_control_B.e_i]);
        proc_control_B.e_i += 14;
      }
    } else {
      recomputeDiags = true;
      proc_control_B.e_j = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.e_j < 13)) {
        proc_control_B.e_i = 0;
        do {
          exitg1 = 0;
          if (proc_control_B.e_i <= proc_control_B.e_j) {
            if (!(A[13 * proc_control_B.e_j + proc_control_B.e_i] == A[13 *
                  proc_control_B.e_i + proc_control_B.e_j])) {
              recomputeDiags = false;
              exitg1 = 1;
            } else {
              proc_control_B.e_i++;
            }
          } else {
            proc_control_B.e_j++;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }

      if (recomputeDiags) {
        proc_control_schur_o(A, proc_control_B.A2, proc_control_B.A4_o);
        proc_control_B.e_i = 0;
        proc_control_B.b_s_m = 0;
        for (proc_control_B.b_s_f = 0; proc_control_B.b_s_f < 13;
             proc_control_B.b_s_f++) {
          proc_control_B.exptj_j = std::exp
            (proc_control_B.A4_o[proc_control_B.e_i]);
          for (proc_control_B.e_j = 0; proc_control_B.e_j < 13;
               proc_control_B.e_j++) {
            proc_control_B.A2_tmp = proc_control_B.e_j + proc_control_B.b_s_m;
            proc_control_B.A4[proc_control_B.A2_tmp] =
              proc_control_B.A2[proc_control_B.A2_tmp] * proc_control_B.exptj_j;
            F[proc_control_B.A2_tmp] = 0.0;
          }

          proc_control_B.e_i += 14;
          proc_control_B.b_s_m += 13;
        }

        proc_control_B.e_i = 0;
        for (proc_control_B.b_s_m = 0; proc_control_B.b_s_m < 13;
             proc_control_B.b_s_m++) {
          proc_control_B.e_j = 0;
          for (proc_control_B.A2_tmp = 0; proc_control_B.A2_tmp < 13;
               proc_control_B.A2_tmp++) {
            for (proc_control_B.i14 = 0; proc_control_B.i14 < 13;
                 proc_control_B.i14++) {
              proc_control_B.A4_tmp = proc_control_B.i14 + proc_control_B.e_j;
              F[proc_control_B.A4_tmp] += proc_control_B.A4[proc_control_B.i14 +
                proc_control_B.e_i] * proc_control_B.A2[proc_control_B.A2_tmp +
                proc_control_B.e_i];
            }

            proc_control_B.e_j += 13;
          }

          proc_control_B.e_i += 13;
        }

        proc_control_B.e_i = 0;
        for (proc_control_B.b_s_m = 0; proc_control_B.b_s_m < 13;
             proc_control_B.b_s_m++) {
          proc_control_B.e_j = 0;
          for (proc_control_B.A2_tmp = 0; proc_control_B.A2_tmp < 13;
               proc_control_B.A2_tmp++) {
            proc_control_B.A4_tmp = proc_control_B.A2_tmp + proc_control_B.e_i;
            proc_control_B.A2[proc_control_B.A4_tmp] = (F[proc_control_B.e_j +
              proc_control_B.b_s_m] + F[proc_control_B.A4_tmp]) / 2.0;
            proc_control_B.e_j += 13;
          }

          proc_control_B.e_i += 13;
        }

        std::memcpy(&F[0], &proc_control_B.A2[0], 169U * sizeof(real_T));
      } else {
        boolean_T guard1{ false };

        boolean_T guard2{ false };

        boolean_T guard3{ false };

        boolean_T guard4{ false };

        recomputeDiags = true;
        proc_control_B.e_j = 3;
        while (recomputeDiags && (proc_control_B.e_j <= 13)) {
          proc_control_B.e_i = proc_control_B.e_j;
          while (recomputeDiags && (proc_control_B.e_i <= 13)) {
            recomputeDiags = (A[((proc_control_B.e_j - 3) * 13 +
                                 proc_control_B.e_i) - 1] == 0.0);
            proc_control_B.e_i++;
          }

          proc_control_B.e_j++;
        }

        if (recomputeDiags) {
          proc_control_B.e_j = 1;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.e_j - 1 < 12)) {
            proc_control_B.e_i = (proc_control_B.e_j - 1) * 13 +
              proc_control_B.e_j;
            proc_control_B.exptj_j = A[proc_control_B.e_i];
            if (proc_control_B.exptj_j != 0.0) {
              if ((proc_control_B.e_j != 12) && (A[(13 * proc_control_B.e_j +
                    proc_control_B.e_j) + 1] != 0.0)) {
                recomputeDiags = false;
                exitg2 = true;
              } else {
                proc_control_B.b_s_m = 13 * proc_control_B.e_j +
                  proc_control_B.e_j;
                if (A[proc_control_B.e_i - 1] != A[proc_control_B.b_s_m]) {
                  recomputeDiags = false;
                  exitg2 = true;
                } else {
                  proc_control_B.d6_o = A[proc_control_B.b_s_m - 1];
                  if (!std::isnan(proc_control_B.exptj_j)) {
                    if (proc_control_B.exptj_j < 0.0) {
                      proc_control_B.exptj_j = -1.0;
                    } else {
                      proc_control_B.exptj_j = (proc_control_B.exptj_j > 0.0);
                    }
                  }

                  if (!std::isnan(proc_control_B.d6_o)) {
                    if (proc_control_B.d6_o < 0.0) {
                      proc_control_B.d6_o = -1.0;
                    } else {
                      proc_control_B.d6_o = (proc_control_B.d6_o > 0.0);
                    }
                  }

                  if (proc_control_B.exptj_j * proc_control_B.d6_o != -1.0) {
                    recomputeDiags = false;
                    exitg2 = true;
                  } else {
                    proc_control_B.e_j++;
                  }
                }
              }
            } else {
              proc_control_B.e_j++;
            }
          }
        }

        proc_control_B.exptj_j = 0.0;
        for (proc_control_B.e_i = 0; proc_control_B.e_i < 13; proc_control_B.e_i
             ++) {
          std::memset(&proc_control_B.A2[proc_control_B.e_i * 13], 0, 13U *
                      sizeof(real_T));
          for (proc_control_B.e_j = 0; proc_control_B.e_j < 13;
               proc_control_B.e_j++) {
            for (proc_control_B.b_s_m = 0; proc_control_B.b_s_m < 13;
                 proc_control_B.b_s_m++) {
              proc_control_B.A2_tmp = 13 * proc_control_B.e_i +
                proc_control_B.b_s_m;
              proc_control_B.A2[proc_control_B.A2_tmp] += A[13 *
                proc_control_B.e_j + proc_control_B.b_s_m] * A[13 *
                proc_control_B.e_i + proc_control_B.e_j];
            }
          }

          std::memset(&proc_control_B.A4[proc_control_B.e_i * 13], 0, 13U *
                      sizeof(real_T));
        }

        proc_control_B.e_i = 0;
        for (proc_control_B.e_j = 0; proc_control_B.e_j < 13; proc_control_B.e_j
             ++) {
          proc_control_B.A2_tmp = 0;
          for (proc_control_B.i14 = 0; proc_control_B.i14 < 13;
               proc_control_B.i14++) {
            for (proc_control_B.b_s_m = 0; proc_control_B.b_s_m < 13;
                 proc_control_B.b_s_m++) {
              proc_control_B.A4_tmp = proc_control_B.b_s_m + proc_control_B.e_i;
              proc_control_B.A4[proc_control_B.A4_tmp] +=
                proc_control_B.A2[proc_control_B.b_s_m + proc_control_B.A2_tmp] *
                proc_control_B.A2[proc_control_B.i14 + proc_control_B.e_i];
            }

            proc_control_B.A6[proc_control_B.i14 + proc_control_B.e_i] = 0.0;
            proc_control_B.A2_tmp += 13;
          }

          proc_control_B.e_i += 13;
        }

        proc_control_B.e_i = 0;
        for (proc_control_B.b_s_m = 0; proc_control_B.b_s_m < 13;
             proc_control_B.b_s_m++) {
          proc_control_B.e_j = 0;
          for (proc_control_B.A2_tmp = 0; proc_control_B.A2_tmp < 13;
               proc_control_B.A2_tmp++) {
            for (proc_control_B.i14 = 0; proc_control_B.i14 < 13;
                 proc_control_B.i14++) {
              proc_control_B.A4_tmp = proc_control_B.i14 + proc_control_B.e_i;
              proc_control_B.A6[proc_control_B.A4_tmp] +=
                proc_control_B.A4[proc_control_B.i14 + proc_control_B.e_j] *
                proc_control_B.A2[proc_control_B.A2_tmp + proc_control_B.e_i];
            }

            proc_control_B.e_j += 13;
          }

          proc_control_B.e_i += 13;
        }

        proc_control_B.d6_o = proc_control_rt_powd_snf
          (proc_control_norm_GdpreYkZ(proc_control_B.A6), 0.16666666666666666);
        proc_control_B.eta1_f = std::fmax(proc_control_rt_powd_snf
          (proc_control_norm_GdpreYkZ(proc_control_B.A4), 0.25),
          proc_control_B.d6_o);
        guard1 = false;
        guard2 = false;
        guard3 = false;
        guard4 = false;
        if (proc_control_B.eta1_f <= 0.01495585217958292) {
          for (proc_control_B.e_j = 0; proc_control_B.e_j < 169;
               proc_control_B.e_j++) {
            proc_control_B.dv11[proc_control_B.e_j] = 0.19285012468241128 * std::
              abs(A[proc_control_B.e_j]);
          }

          proc_control_mpower_k(proc_control_B.dv11, 7.0, proc_control_B.dv12);
          proc_control_B.b_varargin_1 = proc_control_log2_blLsPIAE
            (proc_control_norm_GdpreYkZ(proc_control_B.dv12) /
             proc_control_norm_GdpreYkZ(A) * 2.0 / 2.2204460492503131E-16) / 6.0;
          if (std::fmax(std::ceil(proc_control_B.b_varargin_1), 0.0) == 0.0) {
            proc_control_B.b_s_f = 3;
          } else {
            guard4 = true;
          }
        } else {
          guard4 = true;
        }

        if (guard4) {
          if (proc_control_B.eta1_f <= 0.253939833006323) {
            for (proc_control_B.e_j = 0; proc_control_B.e_j < 169;
                 proc_control_B.e_j++) {
              proc_control_B.dv11[proc_control_B.e_j] = 0.12321872304378752 *
                std::abs(A[proc_control_B.e_j]);
            }

            proc_control_mpower_k(proc_control_B.dv11, 11.0, proc_control_B.dv12);
            proc_control_B.eta1_f = proc_control_log2_blLsPIAE
              (proc_control_norm_GdpreYkZ(proc_control_B.dv12) /
               proc_control_norm_GdpreYkZ(A) * 2.0 / 2.2204460492503131E-16) /
              10.0;
            if (std::fmax(std::ceil(proc_control_B.eta1_f), 0.0) == 0.0) {
              proc_control_B.b_s_f = 5;
            } else {
              guard3 = true;
            }
          } else {
            guard3 = true;
          }
        }

        if (guard3) {
          proc_control_mpower_k(proc_control_B.A4, 2.0, proc_control_B.dv11);
          proc_control_B.eta1_f = proc_control_rt_powd_snf
            (proc_control_norm_GdpreYkZ(proc_control_B.dv11), 0.125);
          proc_control_B.d6_o = std::fmax(proc_control_B.d6_o,
            proc_control_B.eta1_f);
          if (proc_control_B.d6_o <= 0.95041789961629319) {
            for (proc_control_B.e_j = 0; proc_control_B.e_j < 169;
                 proc_control_B.e_j++) {
              proc_control_B.dv11[proc_control_B.e_j] = 0.090475336558796943 *
                std::abs(A[proc_control_B.e_j]);
            }

            proc_control_mpower_k(proc_control_B.dv11, 15.0, proc_control_B.dv12);
            proc_control_B.b_varargin_1 = proc_control_log2_blLsPIAE
              (proc_control_norm_GdpreYkZ(proc_control_B.dv12) /
               proc_control_norm_GdpreYkZ(A) * 2.0 / 2.2204460492503131E-16) /
              14.0;
            if (std::fmax(std::ceil(proc_control_B.b_varargin_1), 0.0) == 0.0) {
              proc_control_B.b_s_f = 7;
            } else {
              guard2 = true;
            }
          } else {
            guard2 = true;
          }
        }

        if (guard2) {
          if (proc_control_B.d6_o <= 2.097847961257068) {
            for (proc_control_B.e_j = 0; proc_control_B.e_j < 169;
                 proc_control_B.e_j++) {
              proc_control_B.dv11[proc_control_B.e_j] = 0.071467735648795785 *
                std::abs(A[proc_control_B.e_j]);
            }

            proc_control_mpower_k(proc_control_B.dv11, 19.0, proc_control_B.dv12);
            proc_control_B.b_varargin_1 = proc_control_log2_blLsPIAE
              (proc_control_norm_GdpreYkZ(proc_control_B.dv12) /
               proc_control_norm_GdpreYkZ(A) * 2.0 / 2.2204460492503131E-16) /
              18.0;
            if (std::fmax(std::ceil(proc_control_B.b_varargin_1), 0.0) == 0.0) {
              proc_control_B.b_s_f = 9;
            } else {
              guard1 = true;
            }
          } else {
            guard1 = true;
          }
        }

        if (guard1) {
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 13;
               proc_control_B.e_i++) {
            std::memset(&proc_control_B.A4_o[proc_control_B.e_i * 13], 0, 13U *
                        sizeof(real_T));
            for (proc_control_B.e_j = 0; proc_control_B.e_j < 13;
                 proc_control_B.e_j++) {
              for (proc_control_B.b_s_m = 0; proc_control_B.b_s_m < 13;
                   proc_control_B.b_s_m++) {
                proc_control_B.A4_tmp = 13 * proc_control_B.e_i +
                  proc_control_B.b_s_m;
                proc_control_B.A4_o[proc_control_B.A4_tmp] += proc_control_B.A4
                  [13 * proc_control_B.e_j + proc_control_B.b_s_m] *
                  proc_control_B.A6[13 * proc_control_B.e_i + proc_control_B.e_j];
              }
            }
          }

          proc_control_B.exptj_j = proc_control_log2_blLsPIAE(std::fmin
            (proc_control_B.d6_o, std::fmax(proc_control_B.eta1_f,
            proc_control_rt_powd_snf(proc_control_norm_GdpreYkZ
            (proc_control_B.A4_o), 0.1))) / 5.3719203511481517);
          proc_control_B.exptj_j = std::fmax(std::ceil(proc_control_B.exptj_j),
            0.0);
          proc_control_B.d6_o = proc_control_rt_powd_snf(2.0,
            proc_control_B.exptj_j);
          for (proc_control_B.e_j = 0; proc_control_B.e_j < 169;
               proc_control_B.e_j++) {
            proc_control_B.eta1_f = A[proc_control_B.e_j] / proc_control_B.d6_o;
            proc_control_B.dv11[proc_control_B.e_j] = 0.05031554467093536 * std::
              abs(proc_control_B.eta1_f);
            proc_control_B.A4_o[proc_control_B.e_j] = proc_control_B.eta1_f;
          }

          proc_control_mpower_k(proc_control_B.dv11, 27.0, proc_control_B.dv12);
          proc_control_B.d6_o = proc_control_log2_blLsPIAE
            (proc_control_norm_GdpreYkZ(proc_control_B.dv12) /
             proc_control_norm_GdpreYkZ(proc_control_B.A4_o) * 2.0 /
             2.2204460492503131E-16) / 26.0;
          proc_control_B.exptj_j += std::fmax(std::ceil(proc_control_B.d6_o),
            0.0);
          if (std::isinf(proc_control_B.exptj_j)) {
            proc_control_B.d6_o = proc_control_norm_GdpreYkZ(A) /
              5.3719203511481517;
            if ((!std::isinf(proc_control_B.d6_o)) && (!std::isnan
                 (proc_control_B.d6_o))) {
              proc_control_B.d6_o = frexp(proc_control_B.d6_o,
                &proc_control_B.b_s_f);
            } else {
              proc_control_B.b_s_f = 0;
            }

            proc_control_B.exptj_j = proc_control_B.b_s_f;
            if (proc_control_B.d6_o == 0.5) {
              proc_control_B.exptj_j = static_cast<real_T>(proc_control_B.b_s_f)
                - 1.0;
            }
          }

          proc_control_B.b_s_f = 13;
        }

        if (proc_control_B.exptj_j != 0.0) {
          proc_control_B.d6_o = proc_control_rt_powd_snf(2.0,
            proc_control_B.exptj_j);
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            A[proc_control_B.e_i] /= proc_control_B.d6_o;
          }

          proc_control_B.d6_o = proc_control_rt_powd_snf(2.0, 2.0 *
            proc_control_B.exptj_j);
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            proc_control_B.A2[proc_control_B.e_i] /= proc_control_B.d6_o;
          }

          proc_control_B.d6_o = proc_control_rt_powd_snf(2.0, 4.0 *
            proc_control_B.exptj_j);
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            proc_control_B.A4[proc_control_B.e_i] /= proc_control_B.d6_o;
          }

          proc_control_B.d6_o = proc_control_rt_powd_snf(2.0, 6.0 *
            proc_control_B.exptj_j);
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            proc_control_B.A6[proc_control_B.e_i] /= proc_control_B.d6_o;
          }
        }

        if (recomputeDiags) {
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 12;
               proc_control_B.e_i++) {
            proc_control_B.blockFormat_f[proc_control_B.e_i] = 0;
          }

          proc_control_B.e_j = 1;
          while (proc_control_B.e_j < 12) {
            proc_control_B.d6_o = A[(proc_control_B.e_j - 1) * 13 +
              proc_control_B.e_j];
            if (proc_control_B.d6_o != 0.0) {
              proc_control_B.blockFormat_f[proc_control_B.e_j - 1] = 2;
              proc_control_B.blockFormat_f[proc_control_B.e_j] = 0;
              proc_control_B.e_j += 2;
            } else if ((proc_control_B.d6_o == 0.0) && (A[(13 *
                         proc_control_B.e_j + proc_control_B.e_j) + 1] == 0.0))
            {
              proc_control_B.blockFormat_f[proc_control_B.e_j - 1] = 1;
              proc_control_B.e_j++;
            } else {
              proc_control_B.blockFormat_f[proc_control_B.e_j - 1] = 0;
              proc_control_B.e_j++;
            }
          }

          if (A[155] != 0.0) {
            proc_control_B.blockFormat_f[11] = 2;
          } else {
            switch (proc_control_B.blockFormat_f[10]) {
             case 0:
              proc_control_B.blockFormat_f[11] = 1;
              break;

             case 1:
              proc_control_B.blockFormat_f[11] = 1;
              break;
            }
          }
        }

        proc_padeApproximation_NWSCAcaS(A, proc_control_B.A2, proc_control_B.A4,
          proc_control_B.A6, proc_control_B.b_s_f, F);
        if (recomputeDiags) {
          pro_recomputeBlockDiag_qmxFvKVu(A, F, proc_control_B.blockFormat_f);
        }

        proc_control_B.b_s_f = 0;
        while (proc_control_B.b_s_f <= static_cast<int32_T>
               (proc_control_B.exptj_j) - 1) {
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 13;
               proc_control_B.e_i++) {
            proc_control_B.b_s_m = 0;
            for (proc_control_B.e_j = 0; proc_control_B.e_j < 13;
                 proc_control_B.e_j++) {
              proc_control_B.A4_tmp = proc_control_B.b_s_m + proc_control_B.e_i;
              proc_control_B.A2[proc_control_B.A4_tmp] = 0.0;
              proc_control_B.A2_tmp = 0;
              for (proc_control_B.i14 = 0; proc_control_B.i14 < 13;
                   proc_control_B.i14++) {
                proc_control_B.A2[proc_control_B.A4_tmp] +=
                  F[proc_control_B.A2_tmp + proc_control_B.e_i] *
                  F[proc_control_B.i14 + proc_control_B.b_s_m];
                proc_control_B.A2_tmp += 13;
              }

              proc_control_B.b_s_m += 13;
            }
          }

          std::memcpy(&F[0], &proc_control_B.A2[0], 169U * sizeof(real_T));
          if (recomputeDiags) {
            for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
                 proc_control_B.e_i++) {
              A[proc_control_B.e_i] *= 2.0;
            }

            pro_recomputeBlockDiag_qmxFvKVu(A, F, proc_control_B.blockFormat_f);
          }

          proc_control_B.b_s_f++;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
void proc_control::proc_control_mldivide_Z0xqFpTr(const real_T A[36], const
  real_T B[36], real_T Y[36])
{
  std::memcpy(&proc_control_B.b_A_n[0], &A[0], 36U * sizeof(real_T));
  std::memcpy(&Y[0], &B[0], 36U * sizeof(real_T));
  for (proc_control_B.b_j_c = 0; proc_control_B.b_j_c < 6; proc_control_B.b_j_c
       ++) {
    proc_control_B.ipiv_o[proc_control_B.b_j_c] = static_cast<int8_T>
      (proc_control_B.b_j_c + 1);
  }

  for (proc_control_B.b_j_c = 0; proc_control_B.b_j_c < 5; proc_control_B.b_j_c
       ++) {
    proc_control_B.jj_k = proc_control_B.b_j_c * 7;
    proc_control_B.iy_j = 0;
    proc_control_B.ix_dt = proc_control_B.jj_k;
    proc_control_B.smax_i = std::abs(proc_control_B.b_A_n[proc_control_B.jj_k]);
    proc_control_B.c_k_m = 2;
    while (proc_control_B.c_k_m <= 6 - proc_control_B.b_j_c) {
      proc_control_B.ix_dt++;
      proc_control_B.s_e = std::abs(proc_control_B.b_A_n[proc_control_B.ix_dt]);
      if (proc_control_B.s_e > proc_control_B.smax_i) {
        proc_control_B.iy_j = proc_control_B.c_k_m - 1;
        proc_control_B.smax_i = proc_control_B.s_e;
      }

      proc_control_B.c_k_m++;
    }

    if (proc_control_B.b_A_n[proc_control_B.jj_k + proc_control_B.iy_j] != 0.0)
    {
      if (proc_control_B.iy_j != 0) {
        proc_control_B.iy_j += proc_control_B.b_j_c;
        proc_control_B.ipiv_o[proc_control_B.b_j_c] = static_cast<int8_T>
          (proc_control_B.iy_j + 1);
        for (proc_control_B.c_k_m = 0; proc_control_B.c_k_m < 6;
             proc_control_B.c_k_m++) {
          proc_control_B.smax_i = proc_control_B.b_A_n[proc_control_B.c_k_m * 6
            + proc_control_B.b_j_c];
          proc_control_B.ix_dt = proc_control_B.c_k_m * 6 + proc_control_B.iy_j;
          proc_control_B.b_A_n[proc_control_B.b_j_c + proc_control_B.c_k_m * 6] =
            proc_control_B.b_A_n[proc_control_B.ix_dt];
          proc_control_B.b_A_n[proc_control_B.ix_dt] = proc_control_B.smax_i;
        }
      }

      proc_control_B.iy_j = (proc_control_B.jj_k - proc_control_B.b_j_c) + 6;
      proc_control_B.ix_dt = proc_control_B.jj_k + 1;
      while (proc_control_B.ix_dt + 1 <= proc_control_B.iy_j) {
        proc_control_B.b_A_n[proc_control_B.ix_dt] /=
          proc_control_B.b_A_n[proc_control_B.jj_k];
        proc_control_B.ix_dt++;
      }
    }

    proc_control_B.iy_j = proc_control_B.jj_k + 6;
    proc_control_B.ix_dt = proc_control_B.jj_k;
    proc_control_B.c_k_m = 0;
    while (proc_control_B.c_k_m <= 4 - proc_control_B.b_j_c) {
      proc_control_B.smax_i = proc_control_B.b_A_n[proc_control_B.iy_j];
      if (proc_control_B.b_A_n[proc_control_B.iy_j] != 0.0) {
        int32_T ijA;
        proc_control_B.c_ix_c = proc_control_B.jj_k + 1;
        ijA = proc_control_B.ix_dt + 7;
        proc_control_B.c_d4 = (proc_control_B.ix_dt - proc_control_B.b_j_c) + 12;
        while (ijA + 1 <= proc_control_B.c_d4) {
          proc_control_B.b_A_n[ijA] +=
            proc_control_B.b_A_n[proc_control_B.c_ix_c] * -proc_control_B.smax_i;
          proc_control_B.c_ix_c++;
          ijA++;
        }
      }

      proc_control_B.iy_j += 6;
      proc_control_B.ix_dt += 6;
      proc_control_B.c_k_m++;
    }
  }

  for (proc_control_B.b_j_c = 0; proc_control_B.b_j_c < 5; proc_control_B.b_j_c
       ++) {
    int8_T ipiv;
    ipiv = proc_control_B.ipiv_o[proc_control_B.b_j_c];
    if (proc_control_B.b_j_c + 1 != ipiv) {
      for (proc_control_B.iy_j = 0; proc_control_B.iy_j < 6; proc_control_B.iy_j
           ++) {
        proc_control_B.jj_k = 6 * proc_control_B.iy_j + proc_control_B.b_j_c;
        proc_control_B.smax_i = Y[proc_control_B.jj_k];
        proc_control_B.ix_dt = (6 * proc_control_B.iy_j + ipiv) - 1;
        Y[proc_control_B.jj_k] = Y[proc_control_B.ix_dt];
        Y[proc_control_B.ix_dt] = proc_control_B.smax_i;
      }
    }
  }

  for (proc_control_B.b_j_c = 0; proc_control_B.b_j_c < 6; proc_control_B.b_j_c
       ++) {
    proc_control_B.jj_k = 6 * proc_control_B.b_j_c;
    for (proc_control_B.iy_j = 0; proc_control_B.iy_j < 6; proc_control_B.iy_j++)
    {
      proc_control_B.ix_dt = 6 * proc_control_B.iy_j;
      if (Y[proc_control_B.iy_j + proc_control_B.jj_k] != 0.0) {
        proc_control_B.c_k_m = proc_control_B.iy_j + 2;
        while (proc_control_B.c_k_m < 7) {
          proc_control_B.c_ix_c = (proc_control_B.c_k_m + proc_control_B.jj_k) -
            1;
          Y[proc_control_B.c_ix_c] -= proc_control_B.b_A_n[(proc_control_B.c_k_m
            + proc_control_B.ix_dt) - 1] * Y[proc_control_B.iy_j +
            proc_control_B.jj_k];
          proc_control_B.c_k_m++;
        }
      }
    }
  }

  for (proc_control_B.b_j_c = 0; proc_control_B.b_j_c < 6; proc_control_B.b_j_c
       ++) {
    proc_control_B.jj_k = 6 * proc_control_B.b_j_c;
    for (proc_control_B.iy_j = 5; proc_control_B.iy_j >= 0; proc_control_B.iy_j
         --) {
      proc_control_B.ix_dt = 6 * proc_control_B.iy_j;
      if (Y[proc_control_B.iy_j + proc_control_B.jj_k] != 0.0) {
        proc_control_B.c_ix_c = proc_control_B.iy_j + proc_control_B.jj_k;
        Y[proc_control_B.c_ix_c] /= proc_control_B.b_A_n[proc_control_B.iy_j +
          proc_control_B.ix_dt];
        proc_control_B.c_k_m = 0;
        while (proc_control_B.c_k_m <= proc_control_B.iy_j - 1) {
          proc_control_B.c_ix_c = proc_control_B.c_k_m + proc_control_B.jj_k;
          Y[proc_control_B.c_ix_c] -= Y[proc_control_B.iy_j +
            proc_control_B.jj_k] * proc_control_B.b_A_n[proc_control_B.c_k_m +
            proc_control_B.ix_dt];
          proc_control_B.c_k_m++;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
void proc_control::proc_co_AUV8QuatSimFcn_AbfqyrNU(const real_T in1[13], const
  real_T in2[8], real_T out1[13])
{
  proc_control_B.t8_c = in1[4] * in1[4];
  proc_control_B.t9_j = in1[5] * in1[5];
  proc_control_B.t11_m = in1[4] * in1[5] * 2.0;
  proc_control_B.t12_tmp = in1[4] * in1[6];
  proc_control_B.t12_i = proc_control_B.t12_tmp * 2.0;
  proc_control_B.t13_tmp = in1[5] * in1[6];
  proc_control_B.t13_b = proc_control_B.t13_tmp * 2.0;
  proc_control_B.t14_tmp = in1[3] * in1[4];
  proc_control_B.t14 = proc_control_B.t14_tmp * 2.0;
  proc_control_B.t15_tmp = in1[3] * in1[5];
  proc_control_B.t15_o = proc_control_B.t15_tmp * 2.0;
  proc_control_B.t16_g = in1[3] * in1[6] * 2.0;
  proc_control_B.t25_e = in1[11] / 500.0;
  proc_control_B.t29_in = in1[10] / 1000.0;
  proc_control_B.t31_e = in1[12] * 0.018;
  proc_control_B.t50 = in1[7] * 32.4648;
  proc_control_B.t53 = in1[8] * 43.6156;
  proc_control_B.t54 = in1[9] * 46.7695;
  proc_control_B.t17_i = proc_control_B.t8_c * 2.0;
  proc_control_B.t18_m = proc_control_B.t9_j * 2.0;
  proc_control_B.t19_d = in1[6] * in1[6] * 2.0;
  proc_control_B.t57_j = proc_control_B.t25_e + proc_control_B.t31_e;
  proc_control_B.t25_e += proc_control_B.t29_in;
  proc_control_B.t29_in += proc_control_B.t31_e;
  proc_control_B.t31_e = in1[11] * 0.558 + proc_control_B.t50;
  proc_control_B.t64 = in1[10] * 0.062 + proc_control_B.t54;
  proc_control_B.t65_pe = in1[12] * 0.031 + proc_control_B.t53;
  proc_control_B.t68_b = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 0.592;
  proc_control_B.t50 = in1[12] * 0.062 + -proc_control_B.t50;
  proc_control_B.t53 = in1[10] * 0.558 + -proc_control_B.t53;
  proc_control_B.t54 = in1[11] * 0.031 + -proc_control_B.t54;
  proc_control_B.t69_p = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_B.t70 = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  out1[0] = (((proc_control_B.t18_m + proc_control_B.t19_d) - 1.0) * -in1[7] +
             (proc_control_B.t12_i + proc_control_B.t15_o) * in1[9]) +
    (proc_control_B.t11_m - proc_control_B.t16_g) * in1[8];
  out1[1] = ((proc_control_B.t11_m + proc_control_B.t16_g) * in1[7] -
             ((proc_control_B.t17_i + proc_control_B.t19_d) - 1.0) * in1[8]) +
    (proc_control_B.t13_b - proc_control_B.t14) * in1[9];
  out1[2] = ((proc_control_B.t13_b + proc_control_B.t14) * in1[8] -
             ((proc_control_B.t17_i + proc_control_B.t18_m) - 1.0) * in1[9]) +
    (proc_control_B.t12_i - proc_control_B.t15_o) * in1[7];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_B.t11_m = in1[10] * proc_control_B.t57_j;
  proc_control_B.t12_i = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) * in1
    [10];
  proc_control_B.t13_b = in1[10] * proc_control_B.t64;
  proc_control_B.t14 = in1[10] * proc_control_B.t53;
  proc_control_B.t15_o = in1[10] * proc_control_B.t69_p;
  proc_control_B.t16_g = in1[10] * proc_control_B.t70;
  proc_control_B.t17_i = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) * in1
    [11];
  proc_control_B.t18_m = in1[11] * proc_control_B.t29_in;
  proc_control_B.t19_d = in1[11] * proc_control_B.t31_e;
  proc_control_B.out1_tmp = in1[11] * proc_control_B.t54;
  proc_control_B.out1_tmp_n = in1[11] * proc_control_B.t68_b;
  proc_control_B.t69_p *= in1[11];
  proc_control_B.out1_tmp_c = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  proc_control_B.out1_tmp_nh = in1[12] * proc_control_B.t25_e;
  proc_control_B.out1_tmp_d = in1[12] * proc_control_B.t50;
  proc_control_B.out1_tmp_i = in1[12] * proc_control_B.t65_pe;
  proc_control_B.t68_b *= in1[12];
  proc_control_B.t70 *= in1[12];
  proc_control_B.out1_tmp_no = (std::abs(in1[7]) * 1.17 + 15.0) * in1[7];
  proc_control_B.t57_j *= in1[7];
  proc_control_B.t65_pe *= in1[7];
  proc_control_B.t54 *= in1[7];
  proc_control_B.out1_tmp_b = (std::abs(in1[8]) * 0.82 + 20.0) * in1[8];
  proc_control_B.t29_in *= in1[8];
  proc_control_B.t50 *= in1[8];
  proc_control_B.t64 *= in1[8];
  proc_control_B.out1_tmp_bt = (std::abs(in1[9]) * 0.756 + 23.333333333333332) *
    in1[9];
  proc_control_B.t25_e *= in1[9];
  proc_control_B.t31_e *= in1[9];
  proc_control_B.t53 *= in1[9];
  out1[7] = (((((((((((((((in2[0] * -0.00033076834054020519 + in2[1] *
    1.8595780444550231E-21) + in2[2] * 0.00033506403327449372) + (in2[3] *
    0.00033363213569639753 - in2[4] * 0.001819638864719295)) + (in2[5] *
    -0.0018124211550371481 + in2[6] * 0.0018538731733468781)) + (in2[7] *
    0.001778186846409557 - proc_control_B.t8_c * 0.0063195296824236141)) +
                      ((in2[0] * 1.4142135623730951 * 0.015171119710606879 +
                        proc_control_B.t9_j * -0.0063195296824236141) + in2[1] *
                       1.4142135623730951 * 0.014928824155507611)) + ((in2[2] *
    1.4142135623730951 * 0.015171119710606879 + in2[3] * 1.4142135623730951 *
    0.01516372519659284) - proc_control_B.t12_tmp * 0.4138016519122657)) +
                    ((proc_control_B.t13_tmp * -0.0013017970932508 -
                      proc_control_B.t14_tmp * 0.0013017970932508) +
                     proc_control_B.t15_tmp * 0.4138016519122657)) +
                   (((proc_control_B.t11_m * -0.96028628902704993 -
                      proc_control_B.t12_i * 0.0001303522588356414) +
                     proc_control_B.t13_b * 9.4803055144857715E-7) -
                    proc_control_B.t14 * 6.8231348244175949E-6)) +
                  (((proc_control_B.t15_o * -0.010033314971702871 -
                     proc_control_B.t16_g * 0.0010125044874363649) +
                    proc_control_B.t17_i * 0.010033314971702871) -
                   proc_control_B.t18_m * 2.9388947094905889E-5)) +
                 (((proc_control_B.t19_d * -6.8231348244175949E-6 +
                    proc_control_B.out1_tmp * 0.030976977065388711) +
                   proc_control_B.out1_tmp_n * 0.0010125044874363649) -
                  proc_control_B.t69_p * 0.0001303522588356414)) +
                (((proc_control_B.out1_tmp_c * -0.0010125044874363649 +
                   proc_control_B.out1_tmp_nh * 0.0002115171795569455) +
                  proc_control_B.out1_tmp_d * 9.4803055144857715E-7) +
                 proc_control_B.out1_tmp_i * 0.030976977065388711)) +
               (((proc_control_B.t68_b * 0.010033314971702871 +
                  proc_control_B.t70 * 0.0001303522588356414) -
                 proc_control_B.out1_tmp_no * 0.030976977065388711) +
                proc_control_B.t57_j * 0.0040409200239048832)) +
              (((proc_control_B.t65_pe * -0.0010125044874363649 +
                 proc_control_B.t54 * 0.010033314971702871) -
                proc_control_B.out1_tmp_b * 9.4803055144857715E-7) -
               proc_control_B.t29_in * 0.311032764122789)) +
             (((proc_control_B.t50 * -0.0010125044874363649 - proc_control_B.t64
                * 0.0001303522588356414) + proc_control_B.out1_tmp_bt *
               6.8231348244175949E-6) + proc_control_B.t25_e *
              0.031387639110527318)) + ((proc_control_B.t31_e *
    0.010033314971702871 - proc_control_B.t53 * 0.0001303522588356414) +
    0.003159764841211807);
  out1[8] = (((((((((((((((in2[0] * 0.00013975754063522079 + in2[1] *
    7.9244610288113972E-21) + in2[2] * -0.00014157257363048341) + (in2[3] *
    -0.0001409675626320625 - in2[4] * 0.0034249251816346319)) + (in2[5] *
    0.003387750973601051 + in2[6] * 0.0035708122797193441)) + (in2[7] *
    -0.0035336380716857632 - proc_control_B.t8_c * 0.02693023120923067)) +
                      ((proc_control_B.t9_j * -0.02693023120923067 - in2[0] *
                        1.4142135623730951 * 0.01090649593858282) + in2[1] *
                       1.4142135623730951 * 0.011000123045544621)) + ((in2[2] *
    1.4142135623730951 * -0.01090649593858282 + in2[3] * 1.4142135623730951 *
    0.01090087173345982) - proc_control_B.t12_tmp * 0.00099202109956931486)) +
                    ((proc_control_B.t13_tmp * -0.51979016069898065 -
                      proc_control_B.t14_tmp * 0.51979016069898065) +
                     proc_control_B.t15_tmp * 0.00099202109956931486)) +
                   (((proc_control_B.t11_m * -2.9388947094905889E-5 -
                      proc_control_B.t12_i * 0.021882274381510681) +
                     proc_control_B.t13_b * 0.02320783323245932) -
                    proc_control_B.t14 * 2.9076309096921531E-5)) +
                  (((proc_control_B.t15_o * -0.0001026911824132076 +
                     proc_control_B.t16_g * 0.00042780737967584029) +
                    proc_control_B.t17_i * 0.0001026911824132076) -
                   proc_control_B.t18_m * 0.71944283020623911)) +
                 (((proc_control_B.t19_d * -2.9076309096921531E-5 +
                    proc_control_B.out1_tmp * 9.4803055144857715E-7) -
                   proc_control_B.out1_tmp_n * 0.00042780737967584029) -
                  proc_control_B.t69_p * 0.021882274381510681)) +
                (((proc_control_B.out1_tmp_c * 0.00042780737967584029 +
                   proc_control_B.out1_tmp_nh * 0.00090136558200456737) +
                  proc_control_B.out1_tmp_d * 0.02320783323245932) +
                 proc_control_B.out1_tmp_i * 9.4803055144857715E-7)) +
               (((proc_control_B.t68_b * 0.0001026911824132076 +
                  proc_control_B.t70 * 0.021882274381510681) -
                 proc_control_B.out1_tmp_no * 9.4803055144857715E-7) +
                proc_control_B.t57_j * 0.678350505826831)) +
              (((proc_control_B.t65_pe * 0.00042780737967584029 +
                 proc_control_B.t54 * 0.0001026911824132076) -
                proc_control_B.out1_tmp_b * 0.02320783323245932) -
               proc_control_B.t29_in * 0.0031834266548094372)) +
             (((proc_control_B.t50 * 0.00042780737967584029 - proc_control_B.t64
                * 0.021882274381510681) + proc_control_B.out1_tmp_bt *
               2.9076309096921531E-5) - proc_control_B.t25_e *
              0.013262028769951049)) + ((proc_control_B.t31_e *
    0.0001026911824132076 - proc_control_B.t53 * 0.021882274381510681) +
    0.01346511560461533);
  out1[9] = (((((((((((((((in2[0] * -1.725827915740819E-6 + in2[1] *
    -5.8281975682474322E-18) + in2[2] * 1.748241265284163E-6) + (in2[3] *
    1.740770148765829E-6 - in2[4] * 0.02095639900015615)) + (in2[5] *
    0.021100316216985739 - in2[6] * 0.021822949502860629)) + (in2[7] *
    0.02167903228603104 + proc_control_B.t8_c * 0.18635748921352191)) +
                      ((proc_control_B.t9_j * 0.18635748921352191 - in2[0] *
                        1.4142135623730951 * 4.8869263875916949E-5) + in2[1] *
                       1.4142135623730951 * 6.6264429389244648E-5)) + ((in2[2] *
    1.4142135623730951 * -4.8869263875916949E-5 + in2[3] * 1.4142135623730951 *
    6.7490056888775055E-5) + proc_control_B.t12_tmp * 0.0058758415205803329)) +
                    ((proc_control_B.t13_tmp * 0.033540735888224739 +
                      proc_control_B.t14_tmp * 0.033540735888224739) -
                     proc_control_B.t15_tmp * 0.0058758415205803329)) +
                   (((proc_control_B.t11_m * 0.0002115171795569455 +
                      proc_control_B.t12_i * 0.002272431716587712) -
                     proc_control_B.t13_b * 2.9076309096921531E-5) +
                    proc_control_B.t14 * 0.021384731826702759)) +
                  (((proc_control_B.t15_o * 0.00039756137245743289 -
                     proc_control_B.t16_g * 5.2828771531483014E-6) -
                    proc_control_B.t17_i * 0.00039756137245743289) +
                   proc_control_B.t18_m * 0.00090136558200456737)) +
                 (((proc_control_B.t19_d * 0.021384731826702759 -
                    proc_control_B.out1_tmp * 6.8231348244175949E-6) +
                   proc_control_B.out1_tmp_n * 5.2828771531483014E-6) +
                  proc_control_B.t69_p * 0.002272431716587712)) +
                (((proc_control_B.out1_tmp_c * -5.2828771531483014E-6 -
                   proc_control_B.out1_tmp_nh * 0.66292668662778553) -
                  proc_control_B.out1_tmp_d * 2.9076309096921531E-5) -
                 proc_control_B.out1_tmp_i * 6.8231348244175949E-6)) +
               (((proc_control_B.t68_b * -0.00039756137245743289 -
                  proc_control_B.t70 * 0.002272431716587712) +
                 proc_control_B.out1_tmp_no * 6.8231348244175949E-6) -
                proc_control_B.t57_j * 0.070445383214219059)) +
              (((proc_control_B.t65_pe * -5.2828771531483014E-6 -
                 proc_control_B.t54 * 0.00039756137245743289) +
                proc_control_B.out1_tmp_b * 2.9076309096921531E-5) +
               proc_control_B.t29_in * 0.01232440254618042)) +
             (((proc_control_B.t50 * -5.2828771531483014E-6 + proc_control_B.t64
                * 0.002272431716587712) - proc_control_B.out1_tmp_bt *
               0.021384731826702759) + proc_control_B.t25_e *
              0.00016376919174759729)) + ((proc_control_B.t31_e *
    -0.00039756137245743289 + proc_control_B.t53 * 0.002272431716587712) -
    0.093178744606760927);
  out1[10] = (((((((((((((((((in2[0] * 0.0013021350951669831 + in2[1] *
    6.1932883292401409E-19) + in2[2] * -0.00131904594055876) + (in2[3] *
    -0.0013134089920948341 - in2[4] * 0.26767193546582568)) + (in2[5] *
    0.26476621250220889 + in2[6] * 0.2790736050389333)) + (in2[7] *
    -0.27616788207531651 - proc_control_B.t8_c * 2.1047070084068991)) + ((in2[0]
    * 1.4142135623730951 * 0.043593198825375247 + proc_control_B.t9_j *
    -2.1047070084068991) - in2[1] * 1.4142135623730951 * 0.043051831063235027))
                        + ((in2[2] * 1.4142135623730951 * 0.043593198825375247 -
    in2[3] * 1.4142135623730951 * 0.043976565543532631) - proc_control_B.t12_tmp
    * 0.1138522338822895)) + ((proc_control_B.t13_tmp * -25.242114556122988 -
    proc_control_B.t14_tmp * 25.242114556122988) + proc_control_B.t15_tmp *
    0.1138522338822895)) + ((proc_control_B.t11_m * -0.0040409200239048832 -
    proc_control_B.t12_i * 1.71018810547529) + proc_control_B.t13_b *
    0.021882274381510681)) + ((proc_control_B.t14 * -0.002272431716587712 -
    proc_control_B.t15_o * 0.0080268590155159435) + proc_control_B.t16_g *
    0.0039859244840414)) + ((proc_control_B.t17_i * 0.0080268590155159435 -
    proc_control_B.t18_m * 0.678350505826831) - proc_control_B.t19_d *
    0.002272431716587712)) + ((proc_control_B.out1_tmp * 0.0001303522588356414 -
    proc_control_B.out1_tmp_n * 0.0039859244840414) - proc_control_B.t69_p *
    1.71018810547529)) + (((proc_control_B.out1_tmp_c * 0.0039859244840414 +
    proc_control_B.out1_tmp_nh * 0.070445383214219059) +
    proc_control_B.out1_tmp_d * 0.021882274381510681) +
    proc_control_B.out1_tmp_i * 0.0001303522588356414)) + ((proc_control_B.t68_b
    * 0.0080268590155159435 + proc_control_B.t70 * 1.71018810547529) -
    proc_control_B.out1_tmp_no * 0.0001303522588356414)) +
                ((proc_control_B.t57_j * 53.015831269733987 +
                  proc_control_B.t65_pe * 0.0039859244840414) +
                 proc_control_B.t54 * 0.0080268590155159435)) +
               ((proc_control_B.out1_tmp_b * -0.021882274381510681 -
                 proc_control_B.t29_in * 0.2488326294809943) +
                proc_control_B.t50 * 0.0039859244840414)) + ((proc_control_B.t64
    * -1.71018810547529 + proc_control_B.out1_tmp_bt * 0.002272431716587712) -
    proc_control_B.t25_e * 0.1235636590052834)) + ((proc_control_B.t31_e *
    0.0080268590155159435 - proc_control_B.t53 * 1.71018810547529) +
    1.0523535042034491);
  out1[11] = ((((((((((((((((in2[0] * 5.24748238233168E-7 - in2[1] *
    1.083514276897426E-19) + in2[2] * -5.3156315041823265E-7) + (in2[3] *
    -5.2929151302328333E-7 + in2[4] * 0.10593667623599359)) + (in2[5] *
    0.10537885436940329 - in2[6] * 0.10793139553633729)) + (in2[7] *
    -0.1033841350690595 + proc_control_B.t8_c * 0.36821797582524962)) + ((in2[0]
    * 1.4142135623730951 * 0.013457654526727991 + proc_control_B.t9_j *
    0.36821797582524962) + in2[1] * 1.4142135623730951 * 0.013869054980635681))
                       + ((in2[2] * 1.4142135623730951 * 0.013457654526727991 +
    in2[3] * 1.4142135623730951 * 0.01386868232130781) + proc_control_B.t12_tmp *
    8.6371397256799973)) + ((proc_control_B.t13_tmp * 0.1184627304742461 +
    proc_control_B.t14_tmp * 0.1184627304742461) - proc_control_B.t15_tmp *
    8.6371397256799973)) + (((proc_control_B.t11_m * 0.311032764122789 +
    proc_control_B.t12_i * 0.0080268590155159435) - proc_control_B.t13_b *
    0.0001026911824132076) + proc_control_B.t14 * 0.00039756137245743289)) +
                    ((proc_control_B.t15_o * 0.58374455968341665 +
                      proc_control_B.t16_g * 1.606290206365557E-6) -
                     proc_control_B.t17_i * 0.58374455968341665)) +
                   (((proc_control_B.t18_m * 0.0031834266548094372 +
                      proc_control_B.t19_d * 0.00039756137245743289) -
                     proc_control_B.out1_tmp * 0.010033314971702871) -
                    proc_control_B.out1_tmp_n * 1.606290206365557E-6)) +
                  (((proc_control_B.t69_p * 0.0080268590155159435 +
                     proc_control_B.out1_tmp_c * 1.606290206365557E-6) -
                    proc_control_B.out1_tmp_nh * 0.01232440254618042) -
                   proc_control_B.out1_tmp_d * 0.0001026911824132076)) +
                 ((proc_control_B.out1_tmp_i * -0.010033314971702871 -
                   proc_control_B.t68_b * 0.58374455968341665) -
                  proc_control_B.t70 * 0.0080268590155159435)) +
                ((proc_control_B.out1_tmp_no * 0.010033314971702871 -
                  proc_control_B.t57_j * 0.2488326294809943) +
                 proc_control_B.t65_pe * 1.606290206365557E-6)) +
               ((proc_control_B.t54 * -0.58374455968341665 +
                 proc_control_B.out1_tmp_b * 0.0001026911824132076) +
                proc_control_B.t29_in * 18.096081350185919)) +
              (((proc_control_B.t50 * 1.606290206365557E-6 + proc_control_B.t64 *
                 0.0080268590155159435) - proc_control_B.out1_tmp_bt *
                0.00039756137245743289) - proc_control_B.t25_e *
               4.9794996397332282E-5)) + ((proc_control_B.t31_e *
    -0.58374455968341665 + proc_control_B.t53 * 0.0080268590155159435) -
    0.18410898791262481);
  out1[12] = ((((((((((((((((in2[0] * -0.1731941163298826 + in2[1] *
    -1.4397960202092559E-21) + in2[2] * 0.175443390567933) + (in2[3] *
    0.17469363248858291 + in2[4] * 0.00062021813460420567)) + (in2[5] *
    -0.0006207996116589 - in2[6] * 0.00064672437426625525)) + (in2[7] *
    0.00064730585132094889 + proc_control_B.t8_c * 0.0048929560732764686)) +
                        ((in2[0] * 1.4142135623730951 * 0.00059255494878017434 +
    proc_control_B.t9_j * 0.0048929560732764686) - in2[1] * 1.4142135623730951 *
    0.1225770464045467)) + ((in2[2] * 1.4142135623730951 *
    0.00059255494878017434 + in2[3] * 1.4142135623730951 *
    0.00041984673608298361) - proc_control_B.t12_tmp * 0.65361132374006825)) +
                      ((proc_control_B.t13_tmp * 0.38451002147839958 +
                        proc_control_B.t14_tmp * 0.38451002147839958) +
                       proc_control_B.t15_tmp * 0.65361132374006825)) +
                     (((proc_control_B.t11_m * -0.031387639110527318 +
                        proc_control_B.t12_i * 0.0039859244840414) -
                       proc_control_B.t13_b * 0.00042780737967584029) +
                      proc_control_B.t14 * 5.2828771531483014E-6)) +
                    (((proc_control_B.t15_o * -1.606290206365557E-6 -
                       proc_control_B.t16_g * 0.53015902215788635) +
                      proc_control_B.t17_i * 1.606290206365557E-6) +
                     proc_control_B.t18_m * 0.013262028769951049)) +
                   (((proc_control_B.t19_d * 5.2828771531483014E-6 +
                      proc_control_B.out1_tmp * 0.0010125044874363649) +
                     proc_control_B.out1_tmp_n * 0.53015902215788635) +
                    proc_control_B.t69_p * 0.0039859244840414)) +
                  ((proc_control_B.out1_tmp_c * -0.53015902215788635 -
                    proc_control_B.out1_tmp_nh * 0.00016376919174759729) -
                   proc_control_B.out1_tmp_d * 0.00042780737967584029)) +
                 (((proc_control_B.out1_tmp_i * 0.0010125044874363649 +
                    proc_control_B.t68_b * 1.606290206365557E-6) -
                   proc_control_B.t70 * 0.0039859244840414) -
                  proc_control_B.out1_tmp_no * 0.0010125044874363649)) +
                ((proc_control_B.t57_j * -0.1235636590052834 -
                  proc_control_B.t65_pe * 0.53015902215788635) +
                 proc_control_B.t54 * 1.606290206365557E-6)) +
               ((proc_control_B.out1_tmp_b * 0.00042780737967584029 -
                 proc_control_B.t29_in * 4.9794996397332282E-5) -
                proc_control_B.t50 * 0.53015902215788635)) +
              (((proc_control_B.t64 * 0.0039859244840414 -
                 proc_control_B.out1_tmp_bt * 5.2828771531483014E-6) +
                proc_control_B.t25_e * 16.434929686894481) +
               proc_control_B.t31_e * 1.606290206365557E-6)) +
    (proc_control_B.t53 * 0.0039859244840414 - 0.0024464780366382352);
}

// Function for MATLAB Function: '<S144>/MATLAB Function2'
real_T proc_control::proc_control_norm_115oznfV(const real_T x[4])
{
  real_T t;
  real_T y;
  proc_control_B.scale_g = 3.3121686421112381E-170;
  proc_control_B.absxk_g = std::abs(x[0]);
  if (proc_control_B.absxk_g > 3.3121686421112381E-170) {
    y = 1.0;
    proc_control_B.scale_g = proc_control_B.absxk_g;
  } else {
    t = proc_control_B.absxk_g / 3.3121686421112381E-170;
    y = t * t;
  }

  proc_control_B.absxk_g = std::abs(x[1]);
  if (proc_control_B.absxk_g > proc_control_B.scale_g) {
    t = proc_control_B.scale_g / proc_control_B.absxk_g;
    y = y * t * t + 1.0;
    proc_control_B.scale_g = proc_control_B.absxk_g;
  } else {
    t = proc_control_B.absxk_g / proc_control_B.scale_g;
    y += t * t;
  }

  proc_control_B.absxk_g = std::abs(x[2]);
  if (proc_control_B.absxk_g > proc_control_B.scale_g) {
    t = proc_control_B.scale_g / proc_control_B.absxk_g;
    y = y * t * t + 1.0;
    proc_control_B.scale_g = proc_control_B.absxk_g;
  } else {
    t = proc_control_B.absxk_g / proc_control_B.scale_g;
    y += t * t;
  }

  proc_control_B.absxk_g = std::abs(x[3]);
  if (proc_control_B.absxk_g > proc_control_B.scale_g) {
    t = proc_control_B.scale_g / proc_control_B.absxk_g;
    y = y * t * t + 1.0;
    proc_control_B.scale_g = proc_control_B.absxk_g;
  } else {
    t = proc_control_B.absxk_g / proc_control_B.scale_g;
    y += t * t;
  }

  return proc_control_B.scale_g * std::sqrt(y);
}

// Function for MATLAB Function: '<S210>/FixedHorizonOptimizer'
void proc_control::proc_c_mpc_plantupdate_opKkKWqM(const real_T a[169], real_T
  b[104], const real_T c[169], real_T b_A[441], real_T b_B[630], real_T b_C[273],
  const real_T b_D[390], const int32_T b_mvindex[8], const int32_T b_myindex[13],
  const real_T b_Uscale[8], const real_T b_Yscale[13], real_T Bu[168], real_T
  Bv[21], real_T Cm[273], real_T Dv[13], real_T Dvm[13], real_T QQ[441], real_T
  RR[169], real_T NN[273])
{
  int32_T tmp;
  proc_control_B.i31 = 0;
  for (proc_control_B.i30 = 0; proc_control_B.i30 < 8; proc_control_B.i30++) {
    for (proc_control_B.i29 = 0; proc_control_B.i29 < 13; proc_control_B.i29++)
    {
      proc_control_B.b_tmp_h = proc_control_B.i29 + proc_control_B.i31;
      b[proc_control_B.b_tmp_h] *= b_Uscale[proc_control_B.i30];
    }

    proc_control_B.i31 += 13;
  }

  proc_control_B.i31 = 0;
  proc_control_B.i30 = 0;
  for (proc_control_B.i29 = 0; proc_control_B.i29 < 13; proc_control_B.i29++) {
    for (proc_control_B.b_tmp_h = 0; proc_control_B.b_tmp_h < 13;
         proc_control_B.b_tmp_h++) {
      tmp = proc_control_B.b_tmp_h + proc_control_B.i31;
      b_C[tmp] = c[tmp] / b_Yscale[proc_control_B.b_tmp_h];
      b_A[proc_control_B.b_tmp_h + proc_control_B.i30] = a[tmp];
    }

    proc_control_B.i31 += 13;
    proc_control_B.i30 += 21;
  }

  for (proc_control_B.i31 = 0; proc_control_B.i31 < 8; proc_control_B.i31++) {
    for (proc_control_B.i30 = 0; proc_control_B.i30 < 13; proc_control_B.i30++)
    {
      b_B[proc_control_B.i30 + 21 * proc_control_B.i31] = b
        [(b_mvindex[proc_control_B.i31] - 1) * 13 + proc_control_B.i30];
    }

    std::memcpy(&Bu[proc_control_B.i31 * 21], &b_B[proc_control_B.i31 * 21], 21U
                * sizeof(real_T));
  }

  for (proc_control_B.i31 = 0; proc_control_B.i31 < 21; proc_control_B.i31++) {
    Bv[proc_control_B.i31] = b_B[proc_control_B.i31 + 168];
    for (proc_control_B.i30 = 0; proc_control_B.i30 < 13; proc_control_B.i30++)
    {
      Cm[proc_control_B.i30 + 13 * proc_control_B.i31] = b_C[(13 *
        proc_control_B.i31 + b_myindex[proc_control_B.i30]) - 1];
    }
  }

  for (proc_control_B.i31 = 0; proc_control_B.i31 < 13; proc_control_B.i31++) {
    Dv[proc_control_B.i31] = b_D[proc_control_B.i31 + 104];
    Dvm[proc_control_B.i31] = b_D[b_myindex[proc_control_B.i31] + 103];
  }

  for (proc_control_B.i31 = 0; proc_control_B.i31 < 29; proc_control_B.i31++) {
    proc_control_B.UnknownIn[proc_control_B.i31] = 0;
  }

  for (proc_control_B.i31 = 0; proc_control_B.i31 < 8; proc_control_B.i31++) {
    proc_control_B.UnknownIn[proc_control_B.i31] = static_cast<int8_T>
      (proc_control_B.i31 + 1);
  }

  for (proc_control_B.i31 = 0; proc_control_B.i31 < 21; proc_control_B.i31++) {
    proc_control_B.UnknownIn[proc_control_B.i31 + 8] = static_cast<int8_T>
      (proc_control_B.i31 + 10);
  }

  for (proc_control_B.i31 = 0; proc_control_B.i31 < 29; proc_control_B.i31++) {
    for (proc_control_B.i30 = 0; proc_control_B.i30 < 21; proc_control_B.i30++)
    {
      proc_control_B.b_tmp[proc_control_B.i30 + 34 * proc_control_B.i31] = b_B
        [(proc_control_B.UnknownIn[proc_control_B.i31] - 1) * 21 +
        proc_control_B.i30];
    }
  }

  for (proc_control_B.i31 = 0; proc_control_B.i31 < 29; proc_control_B.i31++) {
    for (proc_control_B.i30 = 0; proc_control_B.i30 < 13; proc_control_B.i30++)
    {
      proc_control_B.b_tmp[(proc_control_B.i30 + 34 * proc_control_B.i31) + 21] =
        b_D[((proc_control_B.UnknownIn[proc_control_B.i31] - 1) * 13 +
             b_myindex[proc_control_B.i30]) - 1];
    }
  }

  proc_control_B.i31 = 0;
  for (proc_control_B.i30 = 0; proc_control_B.i30 < 34; proc_control_B.i30++) {
    std::memset(&proc_control_B.CovMat[proc_control_B.i31], 0, 34U * sizeof
                (real_T));
    proc_control_B.i31 += 34;
  }

  proc_control_B.i31 = 0;
  for (proc_control_B.b_tmp_h = 0; proc_control_B.b_tmp_h < 29;
       proc_control_B.b_tmp_h++) {
    tmp = 0;
    for (proc_control_B.i30 = 0; proc_control_B.i30 < 34; proc_control_B.i30++)
    {
      for (proc_control_B.i29 = 0; proc_control_B.i29 < 34; proc_control_B.i29++)
      {
        int32_T CovMat_tmp;
        CovMat_tmp = proc_control_B.i29 + tmp;
        proc_control_B.CovMat[CovMat_tmp] +=
          proc_control_B.b_tmp[proc_control_B.i29 + proc_control_B.i31] *
          proc_control_B.b_tmp[proc_control_B.i30 + proc_control_B.i31];
      }

      tmp += 34;
    }

    proc_control_B.i31 += 34;
  }

  proc_control_B.i31 = 0;
  proc_control_B.i30 = 0;
  for (proc_control_B.i29 = 0; proc_control_B.i29 < 21; proc_control_B.i29++) {
    std::memcpy(&QQ[proc_control_B.i31],
                &proc_control_B.CovMat[proc_control_B.i30], 21U * sizeof(real_T));
    proc_control_B.i31 += 21;
    proc_control_B.i30 += 34;
  }

  for (proc_control_B.i31 = 0; proc_control_B.i31 < 13; proc_control_B.i31++) {
    std::memcpy(&RR[proc_control_B.i31 * 13],
                &proc_control_B.CovMat[proc_control_B.i31 * 34 + 735], 13U *
                sizeof(real_T));
    std::memcpy(&NN[proc_control_B.i31 * 21],
                &proc_control_B.CovMat[proc_control_B.i31 * 34 + 714], 21U *
                sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S210>/FixedHorizonOptimizer'
void proc_control::mpc_constraintcoefLTV_p1h5r2C_h(const real_T b_A[4851], const
  real_T Bu[1848], const real_T Bv[231], const real_T b_C[3003], const real_T
  Dv[143], const real_T b_Jm[1920], real_T b_SuJm[3120], real_T b_Sx[2730],
  real_T b_Su1[1040], real_T b_Hv[1430])
{
  std::memset(&proc_control_B.b_C_pr[0], 0, 13U * sizeof(real_T));
  proc_control_B.i4 = 0;
  for (proc_control_B.i_de = 0; proc_control_B.i_de < 21; proc_control_B.i_de++)
  {
    for (proc_control_B.i3 = 0; proc_control_B.i3 < 13; proc_control_B.i3++) {
      proc_control_B.b_C_pr[proc_control_B.i3] += b_C[(proc_control_B.i3 +
        proc_control_B.i4) + 273] * Bv[proc_control_B.i_de];
    }

    proc_control_B.i4 += 13;
  }

  for (proc_control_B.i3 = 0; proc_control_B.i3 < 13; proc_control_B.i3++) {
    b_Hv[proc_control_B.i3] = proc_control_B.b_C_pr[proc_control_B.i3];
    b_Hv[proc_control_B.i3 + 130] = Dv[proc_control_B.i3 + 13];
  }

  proc_control_B.i3 = 0;
  for (proc_control_B.i4 = 0; proc_control_B.i4 < 9; proc_control_B.i4++) {
    std::memset(&b_Hv[proc_control_B.i3 + 260], 0, 13U * sizeof(real_T));
    proc_control_B.i3 += 130;
  }

  proc_control_B.i3 = 0;
  for (proc_control_B.i4 = 0; proc_control_B.i4 < 11; proc_control_B.i4++) {
    std::memset(&b_Hv[proc_control_B.i3 + 13], 0, 117U * sizeof(real_T));
    proc_control_B.i3 += 130;
  }

  for (proc_control_B.i3 = 0; proc_control_B.i3 < 21; proc_control_B.i3++) {
    std::memset(&proc_control_B.b_C_p[proc_control_B.i3 * 13], 0, 13U * sizeof
                (real_T));
    for (proc_control_B.i_de = 0; proc_control_B.i_de < 21; proc_control_B.i_de
         ++) {
      for (proc_control_B.i4 = 0; proc_control_B.i4 < 13; proc_control_B.i4++) {
        proc_control_B.b_C_tmp = 13 * proc_control_B.i3 + proc_control_B.i4;
        proc_control_B.b_C_p[proc_control_B.b_C_tmp] += b_C[(13 *
          proc_control_B.i_de + proc_control_B.i4) + 273] * b_A[21 *
          proc_control_B.i3 + proc_control_B.i_de];
      }
    }

    std::memcpy(&b_Sx[proc_control_B.i3 * 130],
                &proc_control_B.b_C_p[proc_control_B.i3 * 13], 13U * sizeof
                (real_T));
    std::memset(&b_Sx[proc_control_B.i3 * 130 + 13], 0, 117U * sizeof(real_T));
  }

  for (proc_control_B.i3 = 0; proc_control_B.i3 < 8; proc_control_B.i3++) {
    std::memset(&proc_control_B.b_C_n[proc_control_B.i3 * 13], 0, 13U * sizeof
                (real_T));
    for (proc_control_B.i_de = 0; proc_control_B.i_de < 21; proc_control_B.i_de
         ++) {
      for (proc_control_B.i4 = 0; proc_control_B.i4 < 13; proc_control_B.i4++) {
        proc_control_B.b_C_tmp = 13 * proc_control_B.i3 + proc_control_B.i4;
        proc_control_B.b_C_n[proc_control_B.b_C_tmp] += b_C[(13 *
          proc_control_B.i_de + proc_control_B.i4) + 273] * Bu[21 *
          proc_control_B.i3 + proc_control_B.i_de];
      }
    }

    std::memcpy(&b_Su1[proc_control_B.i3 * 130],
                &proc_control_B.b_C_n[proc_control_B.i3 * 13], 13U * sizeof
                (real_T));
    std::memset(&b_Su1[proc_control_B.i3 * 130 + 13], 0, 117U * sizeof(real_T));
    std::memcpy(&proc_control_B.a[proc_control_B.i3 * 130],
                &b_Su1[proc_control_B.i3 * 130], 13U * sizeof(real_T));
  }

  proc_control_B.i3 = 0;
  for (proc_control_B.i4 = 0; proc_control_B.i4 < 72; proc_control_B.i4++) {
    std::memset(&proc_control_B.a[proc_control_B.i3 + 1040], 0, 13U * sizeof
                (real_T));
    proc_control_B.i3 += 130;
  }

  proc_control_B.i3 = 0;
  for (proc_control_B.i4 = 0; proc_control_B.i4 < 80; proc_control_B.i4++) {
    std::memset(&proc_control_B.a[proc_control_B.i3 + 13], 0, 117U * sizeof
                (real_T));
    proc_control_B.i3 += 130;
  }

  proc_control_B.i3 = 0;
  for (proc_control_B.i4 = 0; proc_control_B.i4 < 21; proc_control_B.i4++) {
    std::memcpy(&proc_control_B.AA[proc_control_B.i3], &b_A[proc_control_B.i3 +
                441], 21U * sizeof(real_T));
    proc_control_B.i3 += 21;
  }

  proc_control_B.i3 = 0;
  for (proc_control_B.i4 = 0; proc_control_B.i4 < 168; proc_control_B.i4++) {
    std::memset(&proc_control_B.AA[proc_control_B.i3 + 441], 0, 21U * sizeof
                (real_T));
    proc_control_B.i3 += 21;
  }

  for (proc_control_B.i_j = 0; proc_control_B.i_j < 9; proc_control_B.i_j++) {
    int32_T b_Hv_tmp;
    uint8_T i;
    i = static_cast<uint8_T>((proc_control_B.i_j + 1) * 13U + 1U);
    for (proc_control_B.i3 = 0; proc_control_B.i3 < 13; proc_control_B.i3++) {
      proc_control_B.rows_h[proc_control_B.i3] = static_cast<uint8_T>(
        static_cast<uint32_T>(proc_control_B.i3) + i);
    }

    for (proc_control_B.i3 = 0; proc_control_B.i3 < 13; proc_control_B.i3++) {
      for (proc_control_B.i4 = 0; proc_control_B.i4 < 8; proc_control_B.i4++) {
        proc_control_B.b_Su1_tmp_f = (130 * proc_control_B.i4 +
          proc_control_B.rows_h[proc_control_B.i3]) - 1;
        b_Su1[proc_control_B.b_Su1_tmp_f] = 0.0;
        for (proc_control_B.i_de = 0; proc_control_B.i_de < 21;
             proc_control_B.i_de++) {
          b_Su1[proc_control_B.b_Su1_tmp_f] += b_C[(13 * proc_control_B.i_de +
            proc_control_B.i3) + (proc_control_B.i_j + 2) * 273] * Bu[(21 *
            proc_control_B.i4 + proc_control_B.i_de) + (proc_control_B.i_j + 1) *
            168];
        }
      }
    }

    proc_control_B.i_de = (proc_control_B.i_j + 1) << 3;
    for (proc_control_B.i3 = 0; proc_control_B.i3 < 8; proc_control_B.i3++) {
      for (proc_control_B.i4 = 0; proc_control_B.i4 < 13; proc_control_B.i4++) {
        i = proc_control_B.rows_h[proc_control_B.i4];
        proc_control_B.a[(i + 130 * (proc_control_B.i3 + proc_control_B.i_de)) -
          1] = b_Su1[(130 * proc_control_B.i3 + i) - 1];
      }
    }

    proc_control_B.b_Su1_tmp_f = 0;
    while (proc_control_B.b_Su1_tmp_f <= proc_control_B.i_j) {
      b_Hv_tmp = proc_control_B.i_j - proc_control_B.b_Su1_tmp_f;
      proc_control_B.i_de = b_Hv_tmp * 21;
      for (proc_control_B.i3 = 0; proc_control_B.i3 < 21; proc_control_B.i3++) {
        std::memcpy(&proc_control_B.AA_n[proc_control_B.i3 * 21],
                    &proc_control_B.AA[proc_control_B.i3 * 21 +
                    proc_control_B.i_de * 21], 21U * sizeof(real_T));
      }

      for (proc_control_B.i3 = 0; proc_control_B.i3 < 13; proc_control_B.i3++) {
        for (proc_control_B.i4 = 0; proc_control_B.i4 < 21; proc_control_B.i4++)
        {
          proc_control_B.b_C_tmp = 13 * proc_control_B.i4 + proc_control_B.i3;
          proc_control_B.b_C_p[proc_control_B.b_C_tmp] = 0.0;
          for (proc_control_B.i_de = 0; proc_control_B.i_de < 21;
               proc_control_B.i_de++) {
            proc_control_B.b_C_p[proc_control_B.b_C_tmp] += b_C[(13 *
              proc_control_B.i_de + proc_control_B.i3) + (proc_control_B.i_j + 2)
              * 273] * proc_control_B.AA_n[21 * proc_control_B.i4 +
              proc_control_B.i_de];
          }
        }

        for (proc_control_B.i4 = 0; proc_control_B.i4 < 8; proc_control_B.i4++)
        {
          proc_control_B.d33 = 0.0;
          for (proc_control_B.i_de = 0; proc_control_B.i_de < 21;
               proc_control_B.i_de++) {
            proc_control_B.d33 += Bu[(21 * proc_control_B.i4 +
              proc_control_B.i_de) + 168 * b_Hv_tmp] * proc_control_B.b_C_p[13 *
              proc_control_B.i_de + proc_control_B.i3];
          }

          proc_control_B.b_C_n[proc_control_B.i3 + 13 * proc_control_B.i4] =
            b_Su1[(130 * proc_control_B.i4 +
                   proc_control_B.rows_h[proc_control_B.i3]) - 1] +
            proc_control_B.d33;
        }
      }

      for (proc_control_B.i3 = 0; proc_control_B.i3 < 8; proc_control_B.i3++) {
        for (proc_control_B.i4 = 0; proc_control_B.i4 < 13; proc_control_B.i4++)
        {
          b_Su1[(proc_control_B.rows_h[proc_control_B.i4] + 130 *
                 proc_control_B.i3) - 1] = proc_control_B.b_C_n[13 *
            proc_control_B.i3 + proc_control_B.i4];
        }
      }

      b_Hv_tmp <<= 3;
      for (proc_control_B.i3 = 0; proc_control_B.i3 < 8; proc_control_B.i3++) {
        for (proc_control_B.i4 = 0; proc_control_B.i4 < 13; proc_control_B.i4++)
        {
          i = proc_control_B.rows_h[proc_control_B.i4];
          proc_control_B.a[(i + 130 * (proc_control_B.i3 + b_Hv_tmp)) - 1] =
            b_Su1[(130 * proc_control_B.i3 + i) - 1];
        }
      }

      proc_control_B.b_Su1_tmp_f++;
    }

    for (proc_control_B.i3 = 0; proc_control_B.i3 < 13; proc_control_B.i3++) {
      b_Hv[(proc_control_B.rows_h[proc_control_B.i3] + 130 * (proc_control_B.i_j
             + 2)) - 1] = Dv[(proc_control_B.i_j + 2) * 13 + proc_control_B.i3];
    }

    for (proc_control_B.i3 = 0; proc_control_B.i3 < 13; proc_control_B.i3++) {
      b_Hv_tmp = ((proc_control_B.i_j + 1) * 130 +
                  proc_control_B.rows_h[proc_control_B.i3]) - 1;
      b_Hv[b_Hv_tmp] = 0.0;
      for (proc_control_B.i4 = 0; proc_control_B.i4 < 21; proc_control_B.i4++) {
        b_Hv[b_Hv_tmp] += b_C[(13 * proc_control_B.i4 + proc_control_B.i3) +
          (proc_control_B.i_j + 2) * 273] * Bv[(proc_control_B.i_j + 1) * 21 +
          proc_control_B.i4];
      }
    }

    proc_control_B.b_Su1_tmp_f = 0;
    while (proc_control_B.b_Su1_tmp_f <= proc_control_B.i_j) {
      proc_control_B.i_de = proc_control_B.b_Su1_tmp_f * 21;
      for (proc_control_B.i3 = 0; proc_control_B.i3 < 21; proc_control_B.i3++) {
        std::memcpy(&proc_control_B.AA_n[proc_control_B.i3 * 21],
                    &proc_control_B.AA[proc_control_B.i3 * 21 +
                    proc_control_B.i_de * 21], 21U * sizeof(real_T));
      }

      for (proc_control_B.i3 = 0; proc_control_B.i3 < 13; proc_control_B.i3++) {
        b_Hv_tmp = (130 * proc_control_B.b_Su1_tmp_f +
                    proc_control_B.rows_h[proc_control_B.i3]) - 1;
        b_Hv[b_Hv_tmp] = 0.0;
        for (proc_control_B.i4 = 0; proc_control_B.i4 < 21; proc_control_B.i4++)
        {
          proc_control_B.b_C_tmp = 13 * proc_control_B.i4 + proc_control_B.i3;
          proc_control_B.b_C_p[proc_control_B.b_C_tmp] = 0.0;
          for (proc_control_B.i_de = 0; proc_control_B.i_de < 21;
               proc_control_B.i_de++) {
            proc_control_B.b_C_p[proc_control_B.b_C_tmp] += b_C[(13 *
              proc_control_B.i_de + proc_control_B.i3) + (proc_control_B.i_j + 2)
              * 273] * proc_control_B.AA_n[21 * proc_control_B.i4 +
              proc_control_B.i_de];
          }

          b_Hv[b_Hv_tmp] += Bv[21 * proc_control_B.b_Su1_tmp_f +
            proc_control_B.i4] * proc_control_B.b_C_p[proc_control_B.b_C_tmp];
        }
      }

      proc_control_B.b_Su1_tmp_f++;
    }

    for (proc_control_B.i3 = 0; proc_control_B.i3 < 13; proc_control_B.i3++) {
      for (proc_control_B.i4 = 0; proc_control_B.i4 < 21; proc_control_B.i4++) {
        proc_control_B.b_C_tmp = 13 * proc_control_B.i4 + proc_control_B.i3;
        proc_control_B.b_C_p[proc_control_B.b_C_tmp] = 0.0;
        for (proc_control_B.i_de = 0; proc_control_B.i_de < 21;
             proc_control_B.i_de++) {
          proc_control_B.b_C_p[proc_control_B.b_C_tmp] += b_C[(13 *
            proc_control_B.i_de + proc_control_B.i3) + (proc_control_B.i_j + 2) *
            273] * proc_control_B.AA[21 * proc_control_B.i4 +
            proc_control_B.i_de];
        }
      }

      for (proc_control_B.i4 = 0; proc_control_B.i4 < 21; proc_control_B.i4++) {
        proc_control_B.b_C_tmp = (130 * proc_control_B.i4 +
          proc_control_B.rows_h[proc_control_B.i3]) - 1;
        b_Sx[proc_control_B.b_C_tmp] = 0.0;
        for (proc_control_B.i_de = 0; proc_control_B.i_de < 21;
             proc_control_B.i_de++) {
          b_Sx[proc_control_B.b_C_tmp] += proc_control_B.b_C_p[13 *
            proc_control_B.i_de + proc_control_B.i3] * b_A[21 *
            proc_control_B.i4 + proc_control_B.i_de];
        }
      }
    }

    if (proc_control_B.i_j + 2 < 10) {
      proc_control_B.b_Su1_tmp_f = 0;
      while (proc_control_B.b_Su1_tmp_f <= proc_control_B.i_j) {
        b_Hv_tmp = proc_control_B.b_Su1_tmp_f * 21;
        for (proc_control_B.i3 = 0; proc_control_B.i3 < 21; proc_control_B.i3++)
        {
          std::memcpy(&proc_control_B.AA_n[proc_control_B.i3 * 21],
                      &proc_control_B.AA[proc_control_B.i3 * 21 + b_Hv_tmp * 21],
                      21U * sizeof(real_T));
        }

        for (proc_control_B.i3 = 0; proc_control_B.i3 < 21; proc_control_B.i3++)
        {
          for (proc_control_B.i4 = 0; proc_control_B.i4 < 21; proc_control_B.i4
               ++) {
            proc_control_B.b_C_tmp = (proc_control_B.i4 + b_Hv_tmp) * 21 +
              proc_control_B.i3;
            proc_control_B.AA[proc_control_B.b_C_tmp] = 0.0;
            for (proc_control_B.i_de = 0; proc_control_B.i_de < 21;
                 proc_control_B.i_de++) {
              proc_control_B.AA[proc_control_B.b_C_tmp] += b_A[(21 *
                proc_control_B.i_de + proc_control_B.i3) + (proc_control_B.i_j +
                2) * 441] * proc_control_B.AA_n[21 * proc_control_B.i4 +
                proc_control_B.i_de];
            }
          }
        }

        proc_control_B.b_Su1_tmp_f++;
      }

      proc_control_B.i_de = (proc_control_B.i_j + 1) * 21;
      for (proc_control_B.i3 = 0; proc_control_B.i3 < 21; proc_control_B.i3++) {
        std::memcpy(&proc_control_B.AA[proc_control_B.i3 * 21 +
                    proc_control_B.i_de * 21], &b_A[(proc_control_B.i_j * 441 +
          proc_control_B.i3 * 21) + 882], 21U * sizeof(real_T));
      }
    }
  }

  for (proc_control_B.i3 = 0; proc_control_B.i3 < 24; proc_control_B.i3++) {
    std::memset(&b_SuJm[proc_control_B.i3 * 130], 0, 130U * sizeof(real_T));
    for (proc_control_B.i_de = 0; proc_control_B.i_de < 80; proc_control_B.i_de
         ++) {
      for (proc_control_B.i4 = 0; proc_control_B.i4 < 130; proc_control_B.i4++)
      {
        proc_control_B.i_j = 130 * proc_control_B.i3 + proc_control_B.i4;
        b_SuJm[proc_control_B.i_j] += proc_control_B.a[130 * proc_control_B.i_de
          + proc_control_B.i4] * b_Jm[80 * proc_control_B.i3 +
          proc_control_B.i_de];
      }
    }
  }
}

// Function for MATLAB Function: '<S210>/FixedHorizonOptimizer'
void proc_control::proc_control_kron_5Yeqlajx(const real_T b_A[100], const
  real_T b_B[64], real_T K[6400])
{
  proc_control_B.kidx_n = -1;
  for (proc_control_B.b_j1 = 0; proc_control_B.b_j1 < 10; proc_control_B.b_j1++)
  {
    for (proc_control_B.j2_g = 0; proc_control_B.j2_g < 8; proc_control_B.j2_g++)
    {
      for (proc_control_B.i1_of = 0; proc_control_B.i1_of < 10;
           proc_control_B.i1_of++) {
        for (int32_T i2{0}; i2 < 8; i2++) {
          K[(proc_control_B.kidx_n + i2) + 1] = b_A[10 * proc_control_B.b_j1 +
            proc_control_B.i1_of] * b_B[(proc_control_B.j2_g << 3) + i2];
        }

        proc_control_B.kidx_n += 8;
      }
    }
  }
}

// Function for MATLAB Function: '<S210>/FixedHorizonOptimizer'
void proc_control::proc_contr_mpcblock_optimizer_d(const real_T rseq[130], const
  real_T vseq[11], const real_T umin[8], const real_T umax[8], const real_T x[21],
  const real_T old_u[8], const boolean_T iA[258], const real_T b_Mlim[258],
  real_T b_Mx[5418], real_T b_Mu1[2064], real_T b_Mv[2838], const real_T
  b_utarget[80], const real_T b_uoff[8], real_T b_H[625], real_T b_Ac[6450],
  const real_T ywt[13], const real_T uwt[8], const real_T duwt[8], const real_T
  b_Jm[1920], const real_T b_I1[640], const real_T b_A[4851], const real_T Bu
  [1848], const real_T Bv[231], const real_T b_C[3003], const real_T Dv[143],
  const int32_T b_Mrows[258], const real_T b_RMVscale[8], real_T u[8], real_T
  useq[88], real_T *status, boolean_T iAout[258])
{
  static const real_T b[100]{ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  int16_T ixw;
  boolean_T exitg1;
  std::memset(&iAout[0], 0, 258U * sizeof(boolean_T));
  mpc_constraintcoefLTV_p1h5r2C_h(b_A, Bu, Bv, b_C, Dv, b_Jm,
    proc_control_B.b_SuJm_b, proc_control_B.b_Sx_f, proc_control_B.b_Su1_n,
    proc_control_B.b_Hv_o);
  if (b_Mrows[0] > 0) {
    proc_control_B.i_d = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.i_d < 258)) {
      if (b_Mrows[proc_control_B.i_d] <= 130) {
        proc_control_B.i_k = b_Mrows[proc_control_B.i_d];
        for (proc_control_B.ii = 0; proc_control_B.ii < 24; proc_control_B.ii++)
        {
          b_Ac[proc_control_B.i_d + 258 * proc_control_B.ii] =
            -proc_control_B.b_SuJm_b[(130 * proc_control_B.ii +
            proc_control_B.i_k) - 1];
        }

        proc_control_B.i_k = b_Mrows[proc_control_B.i_d];
        for (proc_control_B.ii = 0; proc_control_B.ii < 21; proc_control_B.ii++)
        {
          b_Mx[proc_control_B.i_d + 258 * proc_control_B.ii] =
            -proc_control_B.b_Sx_f[(130 * proc_control_B.ii + proc_control_B.i_k)
            - 1];
        }

        proc_control_B.i_k = b_Mrows[proc_control_B.i_d];
        for (proc_control_B.ii = 0; proc_control_B.ii < 8; proc_control_B.ii++)
        {
          b_Mu1[proc_control_B.i_d + 258 * proc_control_B.ii] =
            -proc_control_B.b_Su1_n[(130 * proc_control_B.ii +
            proc_control_B.i_k) - 1];
        }

        proc_control_B.i_k = b_Mrows[proc_control_B.i_d];
        for (proc_control_B.ii = 0; proc_control_B.ii < 11; proc_control_B.ii++)
        {
          b_Mv[proc_control_B.i_d + 258 * proc_control_B.ii] =
            -proc_control_B.b_Hv_o[(130 * proc_control_B.ii + proc_control_B.i_k)
            - 1];
        }

        proc_control_B.i_d++;
      } else if (b_Mrows[proc_control_B.i_d] <= 260) {
        proc_control_B.i_k = b_Mrows[proc_control_B.i_d];
        for (proc_control_B.ii = 0; proc_control_B.ii < 24; proc_control_B.ii++)
        {
          b_Ac[proc_control_B.i_d + 258 * proc_control_B.ii] =
            proc_control_B.b_SuJm_b[(130 * proc_control_B.ii +
            proc_control_B.i_k) - 131];
        }

        proc_control_B.i_k = b_Mrows[proc_control_B.i_d];
        for (proc_control_B.ii = 0; proc_control_B.ii < 21; proc_control_B.ii++)
        {
          b_Mx[proc_control_B.i_d + 258 * proc_control_B.ii] =
            proc_control_B.b_Sx_f[(130 * proc_control_B.ii + proc_control_B.i_k)
            - 131];
        }

        proc_control_B.i_k = b_Mrows[proc_control_B.i_d];
        for (proc_control_B.ii = 0; proc_control_B.ii < 8; proc_control_B.ii++)
        {
          b_Mu1[proc_control_B.i_d + 258 * proc_control_B.ii] =
            proc_control_B.b_Su1_n[(130 * proc_control_B.ii + proc_control_B.i_k)
            - 131];
        }

        proc_control_B.i_k = b_Mrows[proc_control_B.i_d];
        for (proc_control_B.ii = 0; proc_control_B.ii < 11; proc_control_B.ii++)
        {
          b_Mv[proc_control_B.i_d + 258 * proc_control_B.ii] =
            proc_control_B.b_Hv_o[(130 * proc_control_B.ii + proc_control_B.i_k)
            - 131];
        }

        proc_control_B.i_d++;
      } else {
        exitg1 = true;
      }
    }
  }

  for (proc_control_B.i_d = 0; proc_control_B.i_d < 13; proc_control_B.i_d++) {
    proc_control_B.ywt_o = ywt[proc_control_B.i_d];
    if (proc_control_B.ywt_o < 0.0) {
      proc_control_B.b_Wy[proc_control_B.i_d] = 0.0;
    } else {
      proc_control_B.b_Wy[proc_control_B.i_d] = proc_control_B.ywt_o *
        proc_control_B.ywt_o;
    }
  }

  for (proc_control_B.i_d = 0; proc_control_B.i_d < 8; proc_control_B.i_d++) {
    proc_control_B.ywt_o = duwt[proc_control_B.i_d];
    proc_control_B.uwt_n = uwt[proc_control_B.i_d];
    if (proc_control_B.uwt_n < 0.0) {
      proc_control_B.b_Wu_d[proc_control_B.i_d] = 0.0;
    } else {
      proc_control_B.b_Wu_d[proc_control_B.i_d] = proc_control_B.uwt_n *
        proc_control_B.uwt_n;
    }

    if (proc_control_B.ywt_o < 0.0) {
      proc_control_B.b_Wdu_c[proc_control_B.i_d] = 0.0;
    } else {
      proc_control_B.b_Wdu_c[proc_control_B.i_d] = proc_control_B.ywt_o *
        proc_control_B.ywt_o;
    }
  }

  std::memset(&proc_control_B.b_I[0], 0, sizeof(real_T) << 6U);
  proc_control_B.i_k = 0;
  for (proc_control_B.i_d = 0; proc_control_B.i_d < 8; proc_control_B.i_d++) {
    proc_control_B.b_I[proc_control_B.i_k] = 1.0;
    proc_control_B.i_k += 9;
  }

  proc_control_kron_5Yeqlajx(b, proc_control_B.b_I, proc_control_B.dv);
  for (proc_control_B.ii = 0; proc_control_B.ii < 24; proc_control_B.ii++) {
    std::memset(&proc_control_B.I2Jm_g[proc_control_B.ii * 80], 0, 80U * sizeof
                (real_T));
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 80; proc_control_B.i_k++)
    {
      for (proc_control_B.i_d = 0; proc_control_B.i_d < 80; proc_control_B.i_d++)
      {
        proc_control_B.I2Jm_tmp = 80 * proc_control_B.ii + proc_control_B.i_d;
        proc_control_B.I2Jm_g[proc_control_B.I2Jm_tmp] += proc_control_B.dv[80 *
          proc_control_B.i_k + proc_control_B.i_d] * b_Jm[80 * proc_control_B.ii
          + proc_control_B.i_k];
      }
    }
  }

  ixw = 1;
  for (proc_control_B.i_d = 0; proc_control_B.i_d < 130; proc_control_B.i_d++) {
    proc_control_B.ywt_o = proc_control_B.b_Wy[ixw - 1];
    for (proc_control_B.ii = 0; proc_control_B.ii < 24; proc_control_B.ii++) {
      proc_control_B.i_k = 130 * proc_control_B.ii + proc_control_B.i_d;
      proc_control_B.WySuJm_p[proc_control_B.i_k] =
        proc_control_B.b_SuJm_b[proc_control_B.i_k] * proc_control_B.ywt_o;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 13) {
      ixw = 1;
    }
  }

  proc_control_WtMult_eD9sgCWi(proc_control_B.b_Wu_d, proc_control_B.I2Jm_g,
    proc_control_nu, proc_control_B.WuI2Jm_g);
  proc_control_WtMult_eD9sgCWi(proc_control_B.b_Wdu_c, b_Jm, proc_control_nu,
    proc_control_B.dv3);
  for (proc_control_B.ii = 0; proc_control_B.ii < 24; proc_control_B.ii++) {
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 24; proc_control_B.i_d++)
    {
      proc_control_B.I2Jm_tmp = 24 * proc_control_B.ii + proc_control_B.i_d;
      proc_control_B.b_SuJm_o[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_k = 0; proc_control_B.i_k < 130; proc_control_B.i_k
           ++) {
        proc_control_B.b_SuJm_o[proc_control_B.I2Jm_tmp] +=
          proc_control_B.b_SuJm_b[130 * proc_control_B.i_d + proc_control_B.i_k]
          * proc_control_B.WySuJm_p[130 * proc_control_B.ii + proc_control_B.i_k];
      }

      proc_control_B.b_Jm_n[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_k = 0; proc_control_B.i_k < 80; proc_control_B.i_k++)
      {
        proc_control_B.b_Jm_n[proc_control_B.I2Jm_tmp] += b_Jm[80 *
          proc_control_B.i_d + proc_control_B.i_k] * proc_control_B.dv3[80 *
          proc_control_B.ii + proc_control_B.i_k];
      }
    }
  }

  for (proc_control_B.ii = 0; proc_control_B.ii < 24; proc_control_B.ii++) {
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 24; proc_control_B.i_d++)
    {
      proc_control_B.ywt_o = 0.0;
      for (proc_control_B.i_k = 0; proc_control_B.i_k < 80; proc_control_B.i_k++)
      {
        proc_control_B.ywt_o += proc_control_B.I2Jm_g[80 * proc_control_B.ii +
          proc_control_B.i_k] * proc_control_B.WuI2Jm_g[80 * proc_control_B.i_d
          + proc_control_B.i_k];
      }

      proc_control_B.i_k = 24 * proc_control_B.i_d + proc_control_B.ii;
      b_H[proc_control_B.ii + 25 * proc_control_B.i_d] =
        (proc_control_B.b_SuJm_o[proc_control_B.i_k] +
         proc_control_B.b_Jm_n[proc_control_B.i_k]) + proc_control_B.ywt_o;
    }

    for (proc_control_B.i_d = 0; proc_control_B.i_d < 8; proc_control_B.i_d++) {
      proc_control_B.I2Jm_tmp = (proc_control_B.ii << 3) + proc_control_B.i_d;
      proc_control_B.b_Su1_c[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_k = 0; proc_control_B.i_k < 130; proc_control_B.i_k
           ++) {
        proc_control_B.b_Su1_c[proc_control_B.I2Jm_tmp] +=
          proc_control_B.b_Su1_n[130 * proc_control_B.i_d + proc_control_B.i_k] *
          proc_control_B.WySuJm_p[130 * proc_control_B.ii + proc_control_B.i_k];
      }

      proc_control_B.b_I1_o[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_k = 0; proc_control_B.i_k < 80; proc_control_B.i_k++)
      {
        proc_control_B.b_I1_o[proc_control_B.I2Jm_tmp] += b_I1[80 *
          proc_control_B.i_d + proc_control_B.i_k] * proc_control_B.WuI2Jm_g[80 *
          proc_control_B.ii + proc_control_B.i_k];
      }
    }
  }

  for (proc_control_B.ii = 0; proc_control_B.ii < 192; proc_control_B.ii++) {
    proc_control_B.b_Ku1_g[proc_control_B.ii] =
      proc_control_B.b_Su1_c[proc_control_B.ii] +
      proc_control_B.b_I1_o[proc_control_B.ii];
  }

  for (proc_control_B.ii = 0; proc_control_B.ii < 1920; proc_control_B.ii++) {
    proc_control_B.WuI2Jm_g[proc_control_B.ii] =
      -proc_control_B.WuI2Jm_g[proc_control_B.ii];
  }

  for (proc_control_B.ii = 0; proc_control_B.ii < 24; proc_control_B.ii++) {
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 21; proc_control_B.i_d++)
    {
      proc_control_B.I2Jm_tmp = 21 * proc_control_B.ii + proc_control_B.i_d;
      proc_control_B.b_Kx_i[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_k = 0; proc_control_B.i_k < 130; proc_control_B.i_k
           ++) {
        proc_control_B.b_Kx_i[proc_control_B.I2Jm_tmp] += proc_control_B.b_Sx_f
          [130 * proc_control_B.i_d + proc_control_B.i_k] *
          proc_control_B.WySuJm_p[130 * proc_control_B.ii + proc_control_B.i_k];
      }
    }

    for (proc_control_B.i_d = 0; proc_control_B.i_d < 11; proc_control_B.i_d++)
    {
      proc_control_B.I2Jm_tmp = 11 * proc_control_B.ii + proc_control_B.i_d;
      proc_control_B.b_Kv_p[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_k = 0; proc_control_B.i_k < 130; proc_control_B.i_k
           ++) {
        proc_control_B.b_Kv_p[proc_control_B.I2Jm_tmp] += proc_control_B.b_Hv_o
          [130 * proc_control_B.i_d + proc_control_B.i_k] *
          proc_control_B.WySuJm_p[130 * proc_control_B.ii + proc_control_B.i_k];
      }
    }
  }

  for (proc_control_B.ii = 0; proc_control_B.ii < 3120; proc_control_B.ii++) {
    proc_control_B.WySuJm_p[proc_control_B.ii] =
      -proc_control_B.WySuJm_p[proc_control_B.ii];
  }

  std::memcpy(&proc_control_B.b_Linv_l[0], &b_H[0], 625U * sizeof(real_T));
  proc__mpc_checkhessian_4gOqb0AF(proc_control_B.b_Linv_l,
    proc_control_B.c_Linv_h, &proc_control_B.ywt_o);
  if (proc_control_B.ywt_o > 1.0) {
    proc_control_B.i_d = 0;
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 8; proc_control_B.i_k++) {
      u[proc_control_B.i_k] = old_u[proc_control_B.i_k] +
        b_uoff[proc_control_B.i_k];
      for (proc_control_B.ii = 0; proc_control_B.ii < 11; proc_control_B.ii++) {
        useq[proc_control_B.ii + proc_control_B.i_d] = u[proc_control_B.i_k];
      }

      proc_control_B.i_d += 11;
    }

    *status = -2.0;
  } else {
    std::memset(&proc_control_B.b_B_h[0], 0, 625U * sizeof(int8_T));
    proc_control_B.i_k = 0;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 25; proc_control_B.i_d++)
    {
      proc_control_B.b_B_h[proc_control_B.i_k] = 1;
      proc_control_B.i_k += 26;
    }

    proc_control_B.i_k = 0;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 25; proc_control_B.i_d++)
    {
      for (proc_control_B.ii = 0; proc_control_B.ii < 25; proc_control_B.ii++) {
        proc_control_B.I2Jm_tmp = proc_control_B.ii + proc_control_B.i_k;
        proc_control_B.b_Linv_l[proc_control_B.I2Jm_tmp] =
          proc_control_B.b_B_h[proc_control_B.I2Jm_tmp];
      }

      proc_control_B.i_k += 25;
    }

    proc_control_trisolve_TPUoCQlv(proc_control_B.c_Linv_h,
      proc_control_B.b_Linv_l);
    for (proc_control_B.ii = 0; proc_control_B.ii < 258; proc_control_B.ii++) {
      proc_control_B.ywt_o = 0.0;
      proc_control_B.i_d = 0;
      for (proc_control_B.i_k = 0; proc_control_B.i_k < 21; proc_control_B.i_k++)
      {
        proc_control_B.ywt_o += b_Mx[proc_control_B.i_d + proc_control_B.ii] *
          x[proc_control_B.i_k];
        proc_control_B.i_d += 258;
      }

      proc_control_B.b_Mlim_o[proc_control_B.ii] = b_Mlim[proc_control_B.ii] +
        proc_control_B.ywt_o;
      proc_control_B.b_Mu1_i[proc_control_B.ii] = 0.0;
    }

    proc_control_B.ii = 0;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 8; proc_control_B.i_d++) {
      for (proc_control_B.i_k = 0; proc_control_B.i_k < 258; proc_control_B.i_k
           ++) {
        proc_control_B.b_Mu1_i[proc_control_B.i_k] += b_Mu1[proc_control_B.i_k +
          proc_control_B.ii] * old_u[proc_control_B.i_d];
      }

      proc_control_B.ii += 258;
    }

    for (proc_control_B.ii = 0; proc_control_B.ii < 258; proc_control_B.ii++) {
      proc_control_B.ywt_o = 0.0;
      proc_control_B.i_d = 0;
      for (proc_control_B.i_k = 0; proc_control_B.i_k < 11; proc_control_B.i_k++)
      {
        proc_control_B.ywt_o += b_Mv[proc_control_B.i_d + proc_control_B.ii] *
          vseq[proc_control_B.i_k];
        proc_control_B.i_d += 258;
      }

      proc_control_B.Bc_o[proc_control_B.ii] =
        -((proc_control_B.b_Mlim_o[proc_control_B.ii] +
           proc_control_B.b_Mu1_i[proc_control_B.ii]) + proc_control_B.ywt_o);
    }

    std::memset(&proc_control_B.b_Wu_d[0], 0, sizeof(real_T) << 3U);
    std::memset(&proc_control_B.b_Wdu_c[0], 0, sizeof(real_T) << 3U);
    for (proc_control_B.ii = 0; proc_control_B.ii < 8; proc_control_B.ii++) {
      proc_control_B.umax_incr_flag_k[proc_control_B.ii] = false;
      proc_control_B.umin_incr_flag_a[proc_control_B.ii] = false;
    }

    if (b_Mrows[0] > 0) {
      proc_control_B.i_d = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.i_d < 258)) {
        if ((b_Mrows[proc_control_B.i_d] <= 130) || (b_Mrows[proc_control_B.i_d]
             <= 260)) {
          proc_control_B.i_d++;
        } else if (b_Mrows[proc_control_B.i_d] <= 340) {
          boolean_T b_Del_Save_Flag0;
          proc_control_B.ii = (b_Mrows[proc_control_B.i_d] -
                               (((b_Mrows[proc_control_B.i_d] - 261) >> 3) << 3))
            - 261;
          b_Del_Save_Flag0 = proc_control_B.umax_incr_flag_k[proc_control_B.ii];
          if (!proc_control_B.umax_incr_flag_k[proc_control_B.ii]) {
            proc_control_B.ywt_o = -(b_RMVscale[proc_control_B.ii] *
              umax[proc_control_B.ii] - b_uoff[proc_control_B.ii]) -
              (-b_Mlim[proc_control_B.i_d]);
            b_Del_Save_Flag0 = true;
          } else {
            proc_control_B.ywt_o = proc_control_B.b_Wu_d[proc_control_B.ii];
          }

          proc_control_B.b_Wu_d[proc_control_B.ii] = proc_control_B.ywt_o;
          proc_control_B.umax_incr_flag_k[proc_control_B.ii] = b_Del_Save_Flag0;
          proc_control_B.Bc_o[proc_control_B.i_d] += proc_control_B.ywt_o;
          proc_control_B.i_d++;
        } else if (b_Mrows[proc_control_B.i_d] <= 420) {
          boolean_T b_Del_Save_Flag0;
          proc_control_B.ii = (b_Mrows[proc_control_B.i_d] -
                               (((b_Mrows[proc_control_B.i_d] - 341) >> 3) << 3))
            - 341;
          b_Del_Save_Flag0 = proc_control_B.umin_incr_flag_a[proc_control_B.ii];
          if (!proc_control_B.umin_incr_flag_a[proc_control_B.ii]) {
            proc_control_B.ywt_o = (b_RMVscale[proc_control_B.ii] *
              umin[proc_control_B.ii] - b_uoff[proc_control_B.ii]) -
              (-b_Mlim[proc_control_B.i_d]);
            b_Del_Save_Flag0 = true;
          } else {
            proc_control_B.ywt_o = proc_control_B.b_Wdu_c[proc_control_B.ii];
          }

          proc_control_B.b_Wdu_c[proc_control_B.ii] = proc_control_B.ywt_o;
          proc_control_B.umin_incr_flag_a[proc_control_B.ii] = b_Del_Save_Flag0;
          proc_control_B.Bc_o[proc_control_B.i_d] += proc_control_B.ywt_o;
          proc_control_B.i_d++;
        } else {
          exitg1 = true;
        }
      }
    }

    std::memset(&proc_control_B.f_f[0], 0, 25U * sizeof(real_T));
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 24; proc_control_B.i_d++)
    {
      proc_control_B.ywt_o = 0.0;
      for (proc_control_B.ii = 0; proc_control_B.ii < 21; proc_control_B.ii++) {
        proc_control_B.ywt_o += proc_control_B.b_Kx_i[21 * proc_control_B.i_d +
          proc_control_B.ii] * x[proc_control_B.ii];
      }

      proc_control_B.uwt_n = 0.0;
      for (proc_control_B.ii = 0; proc_control_B.ii < 130; proc_control_B.ii++)
      {
        proc_control_B.uwt_n += proc_control_B.WySuJm_p[130 * proc_control_B.i_d
          + proc_control_B.ii] * rseq[proc_control_B.ii];
      }

      proc_control_B.b_Ku1_k = 0.0;
      for (proc_control_B.ii = 0; proc_control_B.ii < 8; proc_control_B.ii++) {
        proc_control_B.b_Ku1_k += proc_control_B.b_Ku1_g[(proc_control_B.i_d <<
          3) + proc_control_B.ii] * old_u[proc_control_B.ii];
      }

      proc_control_B.b_Kv_h = 0.0;
      for (proc_control_B.ii = 0; proc_control_B.ii < 11; proc_control_B.ii++) {
        proc_control_B.b_Kv_h += proc_control_B.b_Kv_p[11 * proc_control_B.i_d +
          proc_control_B.ii] * vseq[proc_control_B.ii];
      }

      proc_control_B.WuI2Jm_b = 0.0;
      for (proc_control_B.ii = 0; proc_control_B.ii < 80; proc_control_B.ii++) {
        proc_control_B.WuI2Jm_b += proc_control_B.WuI2Jm_g[80 *
          proc_control_B.i_d + proc_control_B.ii] * b_utarget[proc_control_B.ii];
      }

      proc_control_B.f_f[proc_control_B.i_d] = (((proc_control_B.ywt_o +
        proc_control_B.uwt_n) + proc_control_B.b_Ku1_k) + proc_control_B.b_Kv_h)
        + proc_control_B.WuI2Jm_b;
    }

    std::memcpy(&iAout[0], &iA[0], 258U * sizeof(boolean_T));
    proc_control_B.ii = 0;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 25; proc_control_B.i_d++)
    {
      proc_control_B.i_k = 0;
      for (proc_control_B.i1_o = 0; proc_control_B.i1_o < 25;
           proc_control_B.i1_o++) {
        proc_control_B.I2Jm_tmp = proc_control_B.i1_o + proc_control_B.ii;
        proc_control_B.c_Linv_h[proc_control_B.I2Jm_tmp] = 0.0;
        for (proc_control_B.i2 = 0; proc_control_B.i2 < 25; proc_control_B.i2++)
        {
          proc_control_B.c_Linv_h[proc_control_B.I2Jm_tmp] +=
            proc_control_B.b_Linv_l[proc_control_B.i2 + proc_control_B.i_k] *
            proc_control_B.b_Linv_l[proc_control_B.i2 + proc_control_B.ii];
        }

        proc_control_B.i_k += 25;
      }

      proc_control_B.ii += 25;
    }

    proc_control_qpkwik(proc_control_B.b_Linv_l, proc_control_B.c_Linv_h,
                        proc_control_B.f_f, b_Ac, proc_control_B.Bc_o, iAout,
                        1132, 0.01, proc_control_B.zopt_c,
                        proc_control_B.b_Mlim_o, &proc_control_B.i_d);
    if ((proc_control_B.i_d < 0) || (proc_control_B.i_d == 0)) {
      std::memset(&proc_control_B.zopt_c[0], 0, 25U * sizeof(real_T));
    }

    *status = proc_control_B.i_d;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 8; proc_control_B.i_d++) {
      u[proc_control_B.i_d] = (old_u[proc_control_B.i_d] +
        proc_control_B.zopt_c[proc_control_B.i_d]) + b_uoff[proc_control_B.i_d];
    }

    std::memset(&proc_control_B.b_I[0], 0, sizeof(real_T) << 6U);
    proc_control_B.i_k = 0;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 8; proc_control_B.i_d++) {
      proc_control_B.b_I[proc_control_B.i_k] = 1.0;
      proc_control_B.i_k += 9;
    }

    proc_control_kron_5Yeqlajx(b, proc_control_B.b_I, proc_control_B.dv);
    for (proc_control_B.ii = 0; proc_control_B.ii < 24; proc_control_B.ii++) {
      std::memset(&proc_control_B.dv3[proc_control_B.ii * 80], 0, 80U * sizeof
                  (real_T));
      for (proc_control_B.i_k = 0; proc_control_B.i_k < 80; proc_control_B.i_k++)
      {
        for (proc_control_B.i_d = 0; proc_control_B.i_d < 80; proc_control_B.i_d
             ++) {
          proc_control_B.i1_o = 80 * proc_control_B.ii + proc_control_B.i_d;
          proc_control_B.dv3[proc_control_B.i1_o] += proc_control_B.dv[80 *
            proc_control_B.i_k + proc_control_B.i_d] * b_Jm[80 *
            proc_control_B.ii + proc_control_B.i_k];
        }
      }
    }

    for (proc_control_B.ii = 0; proc_control_B.ii < 8; proc_control_B.ii++) {
      proc_control_B.b_Wu_d[proc_control_B.ii] = old_u[proc_control_B.ii] +
        b_uoff[proc_control_B.ii];
    }

    std::memset(&proc_control_B.dv15[0], 0, 80U * sizeof(real_T));
    proc_control_B.i_d = 0;
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 24; proc_control_B.i_k++)
    {
      for (proc_control_B.ii = 0; proc_control_B.ii < 80; proc_control_B.ii++) {
        proc_control_B.dv15[proc_control_B.ii] +=
          proc_control_B.dv3[proc_control_B.ii + proc_control_B.i_d] *
          proc_control_B.zopt_c[proc_control_B.i_k];
      }

      proc_control_B.i_d += 80;
    }

    std::memset(&proc_control_B.b_I1_c[0], 0, 80U * sizeof(real_T));
    proc_control_B.i_d = 0;
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 8; proc_control_B.i_k++) {
      for (proc_control_B.ii = 0; proc_control_B.ii < 80; proc_control_B.ii++) {
        proc_control_B.b_I1_c[proc_control_B.ii] += b_I1[proc_control_B.ii +
          proc_control_B.i_d] * proc_control_B.b_Wu_d[proc_control_B.i_k];
      }

      proc_control_B.i_d += 80;
    }

    for (proc_control_B.ii = 0; proc_control_B.ii < 80; proc_control_B.ii++) {
      proc_control_B.dv16[proc_control_B.ii] =
        proc_control_B.dv15[proc_control_B.ii] +
        proc_control_B.b_I1_c[proc_control_B.ii];
    }

    proc_control_B.ii = 0;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 8; proc_control_B.i_d++) {
      proc_control_B.i_k = 0;
      for (proc_control_B.i1_o = 0; proc_control_B.i1_o < 10;
           proc_control_B.i1_o++) {
        useq[proc_control_B.i1_o + proc_control_B.ii] =
          proc_control_B.dv16[proc_control_B.i_k + proc_control_B.i_d];
        proc_control_B.i_k += 8;
      }

      proc_control_B.ii += 11;
    }

    proc_control_B.ii = 0;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 8; proc_control_B.i_d++) {
      proc_control_B.b_Wu_d[proc_control_B.i_d] = useq[proc_control_B.ii + 9];
      useq[proc_control_B.ii + 10] = proc_control_B.b_Wu_d[proc_control_B.i_d];
      proc_control_B.ii += 11;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_isfinite_NLoqvmdK(const real_T x[8], boolean_T
  b[8])
{
  for (int32_T i{0}; i < 8; i++) {
    proc_control_B.x_i = x[i];
    b[i] = ((!std::isinf(proc_control_B.x_i)) && (!std::isnan(proc_control_B.x_i)));
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_mtimes(const real_T A_data[], const int32_T
  A_size[2], real_T C_data[], int32_T C_size[2])
{
  static const int8_T b[1920]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1 };

  proc_control_B.mc = A_size[0];
  C_size[0] = A_size[0];
  C_size[1] = 24;
  for (proc_control_B.j_a = 0; proc_control_B.j_a < 24; proc_control_B.j_a++) {
    proc_control_B.coffset = proc_control_B.j_a * proc_control_B.mc;
    proc_control_B.boffset = proc_control_B.j_a * 80;
    proc_control_B.i_ms = 0;
    while (proc_control_B.i_ms <= proc_control_B.mc - 1) {
      C_data[proc_control_B.coffset + proc_control_B.i_ms] = 0.0;
      proc_control_B.i_ms++;
    }

    for (proc_control_B.i_ms = 0; proc_control_B.i_ms < 80; proc_control_B.i_ms
         ++) {
      proc_control_B.aoffset = proc_control_B.i_ms * A_size[0];
      proc_control_B.bkj = b[proc_control_B.boffset + proc_control_B.i_ms];
      proc_control_B.b_i_c = 1;
      while (proc_control_B.b_i_c - 1 <= proc_control_B.mc - 1) {
        proc_control_B.i13 = (proc_control_B.coffset + proc_control_B.b_i_c) - 1;
        C_data[proc_control_B.i13] += A_data[(proc_control_B.aoffset +
          proc_control_B.b_i_c) - 1] * static_cast<real_T>(proc_control_B.bkj);
        proc_control_B.b_i_c++;
      }
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_znlmpc_getUBounds(const real_T
  runtimedata_lastMV[8], const real_T runtimedata_MVMin[80], const real_T
  runtimedata_MVMax[80], const real_T runtimedata_MVRateMin[80], const real_T
  runtimedata_MVRateMax[80], real_T A_data[], int32_T A_size[2], real_T Bu_data[],
  int32_T *Bu_size)
{
  int32_T i;
  boolean_T exitg1;
  std::memset(&proc_control_B.Au[0], 0, 25600U * sizeof(real_T));
  std::memset(&proc_control_B.b_Bu[0], 0, 320U * sizeof(real_T));
  std::memset(&proc_control_B.x[0], 0, 320U * sizeof(boolean_T));
  for (i = 0; i < 8; i++) {
    proc_control_B.ic_o[i] = static_cast<real_T>(i) + 1.0;
  }

  std::memset(&proc_control_B.As[0], 0, sizeof(int8_T) << 6U);
  i = 0;
  for (proc_control_B.idx_hh = 0; proc_control_B.idx_hh < 8;
       proc_control_B.idx_hh++) {
    proc_control_B.As[i] = 1;
    i += 9;
  }

  for (i = 0; i < 64; i++) {
    proc_control_B.idx_hh = proc_control_B.As[i];
    proc_control_B.Au_tmp_c[i] = static_cast<int8_T>(-proc_control_B.idx_hh);
    proc_control_B.Au_tmp[i] = static_cast<int8_T>(proc_control_B.idx_hh);
  }

  for (proc_control_B.idx_hh = 0; proc_control_B.idx_hh < 10;
       proc_control_B.idx_hh++) {
    for (i = 0; i < 8; i++) {
      proc_control_B.runtimedata_MVRateMin[i] = runtimedata_MVRateMin[10 * i +
        proc_control_B.idx_hh];
    }

    proc_control_isfinite_NLoqvmdK(proc_control_B.runtimedata_MVRateMin,
      proc_control_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_B.x[static_cast<int32_T>(proc_control_B.ic_o[i]) - 1] =
        proc_control_B.bv3[i];
      proc_control_B.runtimedata_MVRateMin[i] = runtimedata_MVRateMax[10 * i +
        proc_control_B.idx_hh];
    }

    proc_control_isfinite_NLoqvmdK(proc_control_B.runtimedata_MVRateMin,
      proc_control_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_B.x[static_cast<int32_T>(proc_control_B.ic_o[i] + 8.0) - 1] =
        proc_control_B.bv3[i];
      proc_control_B.runtimedata_MVRateMin[i] = runtimedata_MVMin[10 * i +
        proc_control_B.idx_hh];
    }

    proc_control_isfinite_NLoqvmdK(proc_control_B.runtimedata_MVRateMin,
      proc_control_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_B.x[static_cast<int32_T>(proc_control_B.ic_o[i] + 16.0) - 1] =
        proc_control_B.bv3[i];
      proc_control_B.runtimedata_MVRateMin[i] = runtimedata_MVMax[10 * i +
        proc_control_B.idx_hh];
    }

    proc_control_isfinite_NLoqvmdK(proc_control_B.runtimedata_MVRateMin,
      proc_control_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_B.x[static_cast<int32_T>(proc_control_B.ic_o[i] + 24.0) - 1] =
        proc_control_B.bv3[i];
      for (proc_control_B.k_b = 0; proc_control_B.k_b < 8; proc_control_B.k_b++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_o[proc_control_B.k_b]) + 320 * i)
                           + 2560 * proc_control_B.idx_hh) - 1] =
          proc_control_B.Au_tmp_c[(i << 3) + proc_control_B.k_b];
      }
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_B.k_b = 0; proc_control_B.k_b < 8; proc_control_B.k_b++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_o[proc_control_B.k_b] + 8.0) +
                            320 * i) + 2560 * proc_control_B.idx_hh) - 1] =
          proc_control_B.Au_tmp[(i << 3) + proc_control_B.k_b];
      }
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_B.k_b = 0; proc_control_B.k_b < 8; proc_control_B.k_b++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_o[proc_control_B.k_b] + 16.0) +
                            320 * i) + 2560 * proc_control_B.idx_hh) - 1] =
          proc_control_B.Au_tmp_c[(i << 3) + proc_control_B.k_b];
      }
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_B.k_b = 0; proc_control_B.k_b < 8; proc_control_B.k_b++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_o[proc_control_B.k_b] + 24.0) +
                            320 * i) + 2560 * proc_control_B.idx_hh) - 1] =
          proc_control_B.Au_tmp[(i << 3) + proc_control_B.k_b];
      }

      proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_o[i]) - 1] =
        -runtimedata_MVRateMin[10 * i + proc_control_B.idx_hh];
    }

    for (i = 0; i < 8; i++) {
      proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_o[i] + 8.0) - 1]
        = runtimedata_MVRateMax[10 * i + proc_control_B.idx_hh];
    }

    for (i = 0; i < 8; i++) {
      proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_o[i] + 16.0) -
        1] = -runtimedata_MVMin[10 * i + proc_control_B.idx_hh];
    }

    for (i = 0; i < 8; i++) {
      proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_o[i] + 24.0) -
        1] = runtimedata_MVMax[10 * i + proc_control_B.idx_hh];
    }

    if (proc_control_B.idx_hh + 1 == 1) {
      for (i = 0; i < 8; i++) {
        proc_control_B.c_fx = runtimedata_lastMV[i];
        proc_control_B.runtimedata_MVRateMin[i] = proc_control_B.b_Bu[
          static_cast<int32_T>(proc_control_B.ic_o[i]) - 1] -
          proc_control_B.c_fx;
        proc_control_B.c_j[i] = proc_control_B.c_fx;
      }

      for (i = 0; i < 8; i++) {
        proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_o[i]) - 1] =
          proc_control_B.runtimedata_MVRateMin[i];
      }

      for (i = 0; i < 8; i++) {
        proc_control_B.runtimedata_MVRateMin[i] = proc_control_B.b_Bu[
          static_cast<int32_T>(proc_control_B.ic_o[i] + 8.0) - 1] +
          proc_control_B.c_j[i];
      }

      for (i = 0; i < 8; i++) {
        proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_o[i] + 8.0) -
          1] = proc_control_B.runtimedata_MVRateMin[i];
      }
    } else {
      for (i = 0; i < 8; i++) {
        for (proc_control_B.k_b = 0; proc_control_B.k_b < 8; proc_control_B.k_b
             ++) {
          proc_control_B.Au[((static_cast<int32_T>
                              (proc_control_B.ic_o[proc_control_B.k_b]) + 320 *
                              i) + 2560 * (proc_control_B.idx_hh - 1)) - 1] =
            proc_control_B.Au_tmp[(i << 3) + proc_control_B.k_b];
        }
      }

      for (i = 0; i < 8; i++) {
        for (proc_control_B.k_b = 0; proc_control_B.k_b < 8; proc_control_B.k_b
             ++) {
          proc_control_B.Au[((static_cast<int32_T>
                              (proc_control_B.ic_o[proc_control_B.k_b] + 8.0) +
                              320 * i) + 2560 * (proc_control_B.idx_hh - 1)) - 1]
            = proc_control_B.Au_tmp_c[(i << 3) + proc_control_B.k_b];
        }
      }
    }

    for (i = 0; i < 8; i++) {
      proc_control_B.ic_o[i] += 32.0;
    }
  }

  proc_control_B.idx_hh = 0;
  i = 0;
  exitg1 = false;
  while ((!exitg1) && (i < 320)) {
    if (proc_control_B.x[i]) {
      proc_control_B.idx_hh++;
      proc_control_B.ii_data[proc_control_B.idx_hh - 1] = static_cast<int16_T>(i
        + 1);
      if (proc_control_B.idx_hh >= 320) {
        exitg1 = true;
      } else {
        i++;
      }
    } else {
      i++;
    }
  }

  if (proc_control_B.idx_hh < 1) {
    proc_control_B.idx_hh = 0;
  }

  if (proc_control_B.idx_hh > 0) {
    *Bu_size = proc_control_B.idx_hh;
    for (i = 0; i < proc_control_B.idx_hh; i++) {
      Bu_data[i] = proc_control_B.b_Bu[proc_control_B.ii_data[i] - 1];
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_B.k_b = 0; proc_control_B.k_b < 10; proc_control_B.k_b++)
      {
        proc_control_B.b_i_p = 0;
        while (proc_control_B.b_i_p <= proc_control_B.idx_hh - 1) {
          proc_control_B.Auf_data[(proc_control_B.b_i_p + proc_control_B.idx_hh *
            i) + (proc_control_B.idx_hh << 3) * proc_control_B.k_b] =
            proc_control_B.Au[((320 * i +
                                proc_control_B.ii_data[proc_control_B.b_i_p]) +
                               2560 * proc_control_B.k_b) - 1];
          proc_control_B.b_i_p++;
        }
      }
    }

    proc_control_B.idx[0] = proc_control_B.idx_hh;
    proc_control_B.idx[1] = 80;
    proc_control_mtimes(proc_control_B.Auf_data, proc_control_B.idx,
                        proc_control_B.tmp_data_k, proc_control_B.tmp_size_b);
    A_size[0] = proc_control_B.idx_hh;
    A_size[1] = 155;
    proc_control_B.k_b = proc_control_B.idx_hh * 130;
    std::memset(&A_data[0], 0, proc_control_B.k_b * sizeof(real_T));
    proc_control_B.k_b = proc_control_B.idx_hh * 24;
    for (i = 0; i < proc_control_B.k_b; i++) {
      A_data[i + proc_control_B.idx_hh * 130] = proc_control_B.tmp_data_k[i];
    }

    std::memset(&A_data[proc_control_B.idx_hh * 130 + proc_control_B.idx_hh * 24],
                0, ((((proc_control_B.idx_hh + proc_control_B.idx_hh * 130) +
                      proc_control_B.idx_hh * 24) - proc_control_B.idx_hh * 130)
                    - proc_control_B.idx_hh * 24) * sizeof(real_T));
  } else {
    *Bu_size = 0;
    A_size[0] = 0;
    A_size[1] = 211;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_znlmpc_getXUe(const real_T z[155], const real_T
  x[13], real_T X[143], real_T U[88], real_T *e)
{
  static const int8_T y[1920]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1 };

  std::memset(&X[0], 0, 143U * sizeof(real_T));
  std::memset(&proc_control_B.Umv[0], 0, 88U * sizeof(real_T));
  std::memset(&proc_control_B.y_f[0], 0, 80U * sizeof(real_T));
  proc_control_B.i_dp = 0;
  for (proc_control_B.i_bf = 0; proc_control_B.i_bf < 24; proc_control_B.i_bf++)
  {
    for (proc_control_B.i19 = 0; proc_control_B.i19 < 80; proc_control_B.i19++)
    {
      proc_control_B.y_f[proc_control_B.i19] += static_cast<real_T>
        (y[proc_control_B.i19 + proc_control_B.i_dp]) * z[proc_control_B.i_bf +
        130];
    }

    proc_control_B.i_dp += 80;
  }

  proc_control_B.i19 = 0;
  for (proc_control_B.i_dp = 0; proc_control_B.i_dp < 8; proc_control_B.i_dp++)
  {
    proc_control_B.i_bf = 0;
    for (int32_T U_tmp{0}; U_tmp < 10; U_tmp++) {
      proc_control_B.Umv[U_tmp + proc_control_B.i19] =
        proc_control_B.y_f[proc_control_B.i_bf + proc_control_B.i_dp];
      proc_control_B.i_bf += 8;
    }

    proc_control_B.i19 += 11;
  }

  *e = z[154];
  std::memcpy(&proc_control_B.z_d[0], &z[0], 130U * sizeof(real_T));
  proc_control_B.i19 = 0;
  for (proc_control_B.i_dp = 0; proc_control_B.i_dp < 10; proc_control_B.i_dp++)
  {
    proc_control_B.i_bf = 0;
    for (int32_T U_tmp{0}; U_tmp < 13; U_tmp++) {
      X[(proc_control_B.i_bf + proc_control_B.i_dp) + 1] =
        proc_control_B.z_d[U_tmp + proc_control_B.i19];
      proc_control_B.i_bf += 11;
    }

    proc_control_B.i19 += 13;
  }

  proc_control_B.i19 = 0;
  for (int32_T U_tmp{0}; U_tmp < 13; U_tmp++) {
    X[proc_control_B.i19] = x[U_tmp];
    proc_control_B.i19 += 11;
  }

  proc_control_B.i_dp = 0;
  for (proc_control_B.i_bf = 0; proc_control_B.i_bf < 8; proc_control_B.i_bf++)
  {
    proc_control_B.Umv[proc_control_B.i_dp + 10] =
      proc_control_B.Umv[proc_control_B.i_dp + 9];
    std::memcpy(&U[proc_control_B.i_dp], &proc_control_B.Umv[proc_control_B.i_dp],
                11U * sizeof(real_T));
    proc_control_B.i_dp += 11;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::AUV8QuatJacobianMatrix_wW6vUT_g(const real_T in1[13], real_T
  Anqv[169])
{
  proc_control_B.t2_i = std::abs(in1[10]);
  proc_control_B.t3_d = std::abs(in1[11]);
  proc_control_B.t4_b = std::abs(in1[12]);
  proc_control_B.t5_h = std::abs(in1[7]);
  proc_control_B.t6_p = std::abs(in1[8]);
  proc_control_B.t7_n = std::abs(in1[9]);
  if (std::isnan(in1[10])) {
    proc_control_B.t8_j = in1[10];
  } else if (in1[10] < 0.0) {
    proc_control_B.t8_j = -1.0;
  } else {
    proc_control_B.t8_j = (in1[10] > 0.0);
  }

  if (std::isnan(in1[11])) {
    proc_control_B.t9_o = in1[11];
  } else if (in1[11] < 0.0) {
    proc_control_B.t9_o = -1.0;
  } else {
    proc_control_B.t9_o = (in1[11] > 0.0);
  }

  if (std::isnan(in1[12])) {
    proc_control_B.t10_b = in1[12];
  } else if (in1[12] < 0.0) {
    proc_control_B.t10_b = -1.0;
  } else {
    proc_control_B.t10_b = (in1[12] > 0.0);
  }

  if (std::isnan(in1[7])) {
    proc_control_B.t11_j = in1[7];
  } else if (in1[7] < 0.0) {
    proc_control_B.t11_j = -1.0;
  } else {
    proc_control_B.t11_j = (in1[7] > 0.0);
  }

  if (std::isnan(in1[8])) {
    proc_control_B.t12_e = in1[8];
  } else if (in1[8] < 0.0) {
    proc_control_B.t12_e = -1.0;
  } else {
    proc_control_B.t12_e = (in1[8] > 0.0);
  }

  if (std::isnan(in1[9])) {
    proc_control_B.t13_i = in1[9];
  } else if (in1[9] < 0.0) {
    proc_control_B.t13_i = -1.0;
  } else {
    proc_control_B.t13_i = (in1[9] > 0.0);
  }

  proc_control_B.t17_n = in1[4] * in1[5] * 2.0;
  proc_control_B.t18_i = in1[4] * in1[6] * 2.0;
  proc_control_B.t19_p = in1[5] * in1[6] * 2.0;
  proc_control_B.t20_o = in1[3] * in1[4] * 2.0;
  proc_control_B.t21_m = in1[3] * in1[5] * 2.0;
  proc_control_B.t22_o = in1[3] * in1[6] * 2.0;
  proc_control_B.t23_g = in1[4] * in1[7] * 2.0;
  proc_control_B.t24_tmp_c = in1[5] * in1[7];
  proc_control_B.t24_e = proc_control_B.t24_tmp_c * 2.0;
  proc_control_B.t25_tmp_e = in1[6] * in1[7];
  proc_control_B.t25_i = proc_control_B.t25_tmp_e * 2.0;
  proc_control_B.t26_g = in1[3] * in1[7] * 2.0;
  proc_control_B.t27_tmp_l = in1[4] * in1[8];
  proc_control_B.t27_g = proc_control_B.t27_tmp_l * 2.0;
  proc_control_B.t28_g = in1[5] * in1[8] * 2.0;
  proc_control_B.t29_tmp_n = in1[6] * in1[8];
  proc_control_B.t29_g = proc_control_B.t29_tmp_n * 2.0;
  proc_control_B.t30_c = in1[3] * in1[8] * 2.0;
  proc_control_B.t31_tmp_h = in1[4] * in1[9];
  proc_control_B.t31_k = proc_control_B.t31_tmp_h * 2.0;
  proc_control_B.t32_tmp_g = in1[5] * in1[9];
  proc_control_B.t32_d = proc_control_B.t32_tmp_g * 2.0;
  proc_control_B.t33_k = in1[6] * in1[9] * 2.0;
  proc_control_B.t34_p = in1[3] * in1[9] * 2.0;
  proc_control_B.t39_p = in1[4] / 2.0;
  proc_control_B.t40_m = in1[5] / 2.0;
  proc_control_B.t41_k = in1[6] / 2.0;
  proc_control_B.t42_a = in1[3] / 2.0;
  proc_control_B.t43_f = in1[10] / 2.0;
  proc_control_B.t44_c = in1[11] / 2.0;
  proc_control_B.t45_j = in1[12] / 2.0;
  proc_control_B.t55_k = in1[12] * 1.0571299073092789E-5;
  proc_control_B.t56_h = in1[11] * 9.7602896722846373E-5;
  proc_control_B.t57_d = in1[8] * 0.01129023503850542;
  proc_control_B.t58_j1 = in1[7] * 0.00477039452928936;
  proc_control_B.t59_n = in1[10] * 9.1703771260780813E-5;
  proc_control_B.t61_j = in1[9] * 0.143523560675718;
  proc_control_B.t62_l = in1[7] * 0.00568699616459184;
  proc_control_B.t65_p = in1[9] * 0.069014505171846527;
  proc_control_B.t68_p = in1[8] * 0.0071670223909459834;
  proc_control_B.t35_l = in1[4] * in1[4] * 2.0;
  proc_control_B.t36 = in1[5] * in1[5] * 2.0;
  proc_control_B.t37 = in1[6] * in1[6] * 2.0;
  std::memset(&Anqv[0], 0, 39U * sizeof(real_T));
  Anqv[39] = -proc_control_B.t29_g + proc_control_B.t32_d;
  Anqv[40] = proc_control_B.t25_i - proc_control_B.t31_k;
  Anqv[41] = -proc_control_B.t24_e + proc_control_B.t27_g;
  Anqv[42] = 0.0;
  Anqv[43] = proc_control_B.t43_f;
  Anqv[44] = proc_control_B.t44_c;
  Anqv[45] = proc_control_B.t45_j;
  Anqv[46] = in1[4] * -0.0013017970932508 + in1[5] * 0.4138016519122657;
  Anqv[47] = in1[4] * -0.51979016069898065 + in1[5] * 0.00099202109956931486;
  Anqv[48] = in1[4] * 0.033540735888224739 - in1[5] * 0.0058758415205803329;
  Anqv[49] = in1[4] * -25.242114556122988 + in1[5] * 0.1138522338822895;
  Anqv[50] = in1[4] * 0.1184627304742461 - in1[5] * 8.6371397256799973;
  Anqv[51] = in1[4] * 0.38451002147839958 + in1[5] * 0.65361132374006825;
  Anqv[52] = proc_control_B.t28_g + proc_control_B.t33_k;
  Anqv[53] = (proc_control_B.t24_e - proc_control_B.t34_p) -
    proc_control_B.t27_tmp_l * 4.0;
  Anqv[54] = (proc_control_B.t25_i + proc_control_B.t30_c) -
    proc_control_B.t31_tmp_h * 4.0;
  Anqv[55] = -proc_control_B.t43_f;
  Anqv[56] = 0.0;
  Anqv[57] = -proc_control_B.t45_j;
  Anqv[58] = proc_control_B.t44_c;
  Anqv[59] = (in1[4] * -0.01263905936484723 - in1[6] * 0.4138016519122657) -
    in1[3] * 0.0013017970932508;
  Anqv[60] = (in1[4] * -0.05386046241846134 - in1[6] * 0.00099202109956931486) -
    in1[3] * 0.51979016069898065;
  Anqv[61] = (in1[4] * 0.37271497842704371 + in1[6] * 0.0058758415205803329) +
    in1[3] * 0.033540735888224739;
  Anqv[62] = (in1[4] * -4.2094140168137981 - in1[6] * 0.1138522338822895) - in1
    [3] * 25.242114556122988;
  Anqv[63] = (in1[4] * 0.73643595165049924 + in1[6] * 8.6371397256799973) + in1
    [3] * 0.1184627304742461;
  Anqv[64] = (in1[4] * 0.009785912146552939 - in1[6] * 0.65361132374006825) +
    in1[3] * 0.38451002147839958;
  Anqv[65] = (proc_control_B.t27_g + proc_control_B.t34_p) -
    proc_control_B.t24_tmp_c * 4.0;
  Anqv[66] = proc_control_B.t23_g + proc_control_B.t33_k;
  Anqv[67] = (-proc_control_B.t26_g + proc_control_B.t29_g) -
    proc_control_B.t32_tmp_g * 4.0;
  Anqv[68] = -proc_control_B.t44_c;
  Anqv[69] = proc_control_B.t45_j;
  Anqv[70] = 0.0;
  Anqv[71] = -proc_control_B.t43_f;
  Anqv[72] = (in1[5] * -0.01263905936484723 - in1[6] * 0.0013017970932508) +
    in1[3] * 0.4138016519122657;
  Anqv[73] = (in1[5] * -0.05386046241846134 - in1[6] * 0.51979016069898065) +
    in1[3] * 0.00099202109956931486;
  Anqv[74] = (in1[5] * 0.37271497842704371 + in1[6] * 0.033540735888224739) -
    in1[3] * 0.0058758415205803329;
  Anqv[75] = (in1[5] * -4.2094140168137981 - in1[6] * 25.242114556122988) + in1
    [3] * 0.1138522338822895;
  Anqv[76] = (in1[5] * 0.73643595165049924 + in1[6] * 0.1184627304742461) - in1
    [3] * 8.6371397256799973;
  Anqv[77] = (in1[5] * 0.009785912146552939 + in1[6] * 0.38451002147839958) +
    in1[3] * 0.65361132374006825;
  Anqv[78] = (-proc_control_B.t30_c + proc_control_B.t31_k) -
    proc_control_B.t25_tmp_e * 4.0;
  Anqv[79] = (proc_control_B.t26_g + proc_control_B.t32_d) -
    proc_control_B.t29_tmp_n * 4.0;
  Anqv[80] = proc_control_B.t23_g + proc_control_B.t28_g;
  Anqv[81] = -proc_control_B.t45_j;
  Anqv[82] = -proc_control_B.t44_c;
  Anqv[83] = proc_control_B.t43_f;
  Anqv[84] = 0.0;
  Anqv[85] = in1[4] * -0.4138016519122657 - in1[5] * 0.0013017970932508;
  Anqv[86] = in1[4] * -0.00099202109956931486 - in1[5] * 0.51979016069898065;
  Anqv[87] = in1[4] * 0.0058758415205803329 + in1[5] * 0.033540735888224739;
  Anqv[88] = in1[4] * -0.1138522338822895 - in1[5] * 25.242114556122988;
  Anqv[89] = in1[4] * 8.6371397256799973 + in1[5] * 0.1184627304742461;
  Anqv[90] = in1[4] * -0.65361132374006825 + in1[5] * 0.38451002147839958;
  Anqv[91] = (-proc_control_B.t36 + -proc_control_B.t37) + 1.0;
  Anqv[92] = proc_control_B.t17_n + proc_control_B.t22_o;
  Anqv[93] = proc_control_B.t18_i - proc_control_B.t21_m;
  Anqv[94] = 0.0;
  Anqv[95] = 0.0;
  Anqv[96] = 0.0;
  Anqv[97] = 0.0;
  proc_control_B.t11_j *= in1[7];
  Anqv[98] = (((((proc_control_B.t5_h * -0.036243063166504788 +
                  proc_control_B.t55_k) + proc_control_B.t56_h) -
                proc_control_B.t57_d) - proc_control_B.t61_j) -
              proc_control_B.t11_j * 0.036243063166504788) - 0.46465465598083061;
  Anqv[99] = (((in1[8] * 0.00477039452928936 - in1[9] * 0.001468966557066211) -
               proc_control_B.t11_j * 1.109195745194835E-6) -
              1.422045827172866E-5) + ((in1[11] * 0.00041592787873873338 - in1
    [12] * 0.74121409319149256) - proc_control_B.t5_h * 1.109195745194835E-6);
  Anqv[100] = (((in1[8] * -5.890830655932608E-5 + in1[9] * 0.00568699616459184)
                + proc_control_B.t11_j * 7.9830677445685858E-6) +
               0.0001023470223662639) + ((in1[11] * 0.69409782663856512 - in1[12]
    * 0.00032422410747795261) + proc_control_B.t5_h * 7.9830677445685858E-6);
  Anqv[101] = (((in1[11] * 0.032506453976272241 + in1[12] * 0.24400486517334929)
                - proc_control_B.t5_h * 0.0001525121428377004) + ((in1[8] *
    0.044446246736648841 - in1[9] * 0.1148218101592509) - proc_control_B.t11_j *
    0.0001525121428377004)) + -0.0019552838825346208;
  Anqv[102] = (((in1[8] * 1.7911420833141059E-5 + in1[9] * 8.3502908029033716) +
                proc_control_B.t11_j * 0.011738978516892359) + 0.150499724575543)
    + ((in1[11] * -0.00568699616459184 - in1[12] * 0.001145088836853196) +
       proc_control_B.t5_h * 0.011738978516892359);
  Anqv[103] = (((in1[11] * -7.5569972812640509E-5 - in1[12] *
                 0.00477039452928936) - proc_control_B.t5_h *
                0.0011846302503005471) + ((in1[8] * -5.91169722427816 - in1[9] *
    2.2977499514997389E-5) - proc_control_B.t11_j * 0.0011846302503005471)) +
    -0.015187567311545479;
  Anqv[104] = proc_control_B.t17_n - proc_control_B.t22_o;
  Anqv[105] = (-proc_control_B.t35_l + -proc_control_B.t37) + 1.0;
  Anqv[106] = proc_control_B.t19_p + proc_control_B.t20_o;
  Anqv[107] = 0.0;
  Anqv[108] = 0.0;
  Anqv[109] = 0.0;
  Anqv[110] = 0.0;
  proc_control_B.t11_j = proc_control_B.t12_e * in1[8];
  Anqv[111] = (((in1[10] * -2.1519484922730651E-5 + in1[12] * 1.3454180758607359)
                - proc_control_B.t6_p * 7.7738505218783331E-7) - in1[7] *
               0.01129023503850542) + ((in1[9] * -0.00041111798914172931 -
    proc_control_B.t11_j * 7.7738505218783331E-7) - 1.8960611028971542E-5);
  Anqv[112] = (((((proc_control_B.t6_p * -0.01903042325061665 +
                   proc_control_B.t55_k) + proc_control_B.t58_j1) +
                 -proc_control_B.t59_n) - proc_control_B.t65_p) -
               proc_control_B.t11_j * 0.01903042325061665) - 0.46415666464918648;
  Anqv[113] = (((in1[7] * -5.890830655932608E-5 + in1[9] * 0.0071670223909459834)
                + proc_control_B.t11_j * 2.3842573459475649E-5) +
               0.00058152618193843065) + ((in1[10] * -0.93255469429176219 - in1
    [12] * 7.6083411800115719E-5) + proc_control_B.t6_p * 2.3842573459475649E-5);
  Anqv[114] = (((in1[10] * -0.0071670223909459834 + in1[12] *
                 0.00145353196782447) - proc_control_B.t6_p *
                0.017943464992838758) + ((in1[7] * 0.044446246736648841 - in1[9]
    * 5.3937622658585171) - proc_control_B.t11_j * 0.017943464992838758)) +
    -0.4376454876302136;
  Anqv[115] = (((in1[10] * 0.0012538688125934979 - in1[12] * 0.1118794885864644)
                + proc_control_B.t6_p * 8.4206769578830268E-5) + in1[7] *
               1.7911420833141059E-5) + ((proc_control_B.t11_j *
    8.4206769578830268E-5 + in1[9] * 0.025315910649035739) +
    0.0020538236482641531);
  Anqv[116] = (((in1[10] * 1.6661666253314429E-5 + in1[12] * 0.01129023503850542)
                + proc_control_B.t6_p * 0.00035080205133418912) + ((in1[7] *
    -5.91169722427816 + in1[9] * 0.01257120723021817) + proc_control_B.t11_j *
    0.00035080205133418912)) + 0.0085561475935168052;
  Anqv[117] = proc_control_B.t18_i + proc_control_B.t21_m;
  Anqv[118] = proc_control_B.t19_p - proc_control_B.t20_o;
  Anqv[119] = (-proc_control_B.t35_l + -proc_control_B.t36) + 1.0;
  Anqv[120] = 0.0;
  Anqv[121] = 0.0;
  Anqv[122] = 0.0;
  Anqv[123] = 0.0;
  proc_control_B.t11_j = proc_control_B.t13_i * in1[9];
  Anqv[124] = (((in1[10] * 2.989993556213668E-6 - in1[11] * 1.4431163638272659)
                + proc_control_B.t7_n * 5.1582899272597018E-6) - in1[7] *
               0.143523560675718) + ((proc_control_B.t11_j *
    5.1582899272597018E-6 + in1[8] * -0.00041111798914172931) +
    0.0001592064792364106);
  Anqv[125] = (((in1[10] * 1.0731951852318531 - in1[11] * 1.356129262930646E-5)
                + proc_control_B.t7_n * 2.1981689677272681E-5) + ((in1[7] *
    -0.001468966557066211 - in1[8] * 0.069014505171846527) +
    proc_control_B.t11_j * 2.1981689677272681E-5)) + 0.00067844721226150231;
  Anqv[126] = (((((proc_control_B.t7_n * -0.01616685726098728 +
                   proc_control_B.t56_h) + -proc_control_B.t59_n) +
                 proc_control_B.t62_l) + proc_control_B.t68_p) -
               proc_control_B.t11_j * 0.01616685726098728) - 0.49897707595639768;
  Anqv[127] = (((in1[10] * 0.069014505171846527 - in1[11] *
                 0.0018646499569661989) + proc_control_B.t7_n *
                0.00171795837774031) + ((in1[7] * -0.1148218101592509 - in1[8] *
    5.3937622658585171) + proc_control_B.t11_j * 0.00171795837774031)) +
    0.053023406720379938;
  Anqv[128] = (((in1[10] * -0.00032387772021301561 + in1[11] * 0.143523560675718)
                - proc_control_B.t7_n * 0.00030055639757781919) + ((in1[7] *
    8.3502908029033716 + in1[8] * 0.025315910649035739) - proc_control_B.t11_j *
    0.00030055639757781919)) + -0.0092764320240067664;
  Anqv[129] = (((in1[10] * -0.0013492616947596331 - in1[11] *
                 0.01448357294143097) - proc_control_B.t7_n *
                3.993855127780116E-6) - in1[7] * 2.2977499514997389E-5) + ((in1
    [8] * 0.01257120723021817 - proc_control_B.t11_j * 3.993855127780116E-6) -
    0.00012326713357346041);
  Anqv[130] = 0.0;
  Anqv[131] = 0.0;
  Anqv[132] = 0.0;
  Anqv[133] = -proc_control_B.t39_p;
  Anqv[134] = proc_control_B.t42_a;
  Anqv[135] = proc_control_B.t41_k;
  Anqv[136] = -proc_control_B.t40_m;
  proc_control_B.t11_j = in1[10] * proc_control_B.t8_j;
  Anqv[137] = (((in1[10] * -0.00010396365424827521 - in1[11] *
                 0.0030560301354578762) - in1[12] * 0.030270009262121408) -
               proc_control_B.t2_i * 2.1768827225552109E-5) + (((in1[8] *
    -2.1519484922730651E-5 + in1[9] * 2.989993556213668E-6) -
    proc_control_B.t11_j * 2.1768827225552109E-5) - 0.00043450752945213789);
  Anqv[138] = ((((in1[10] * 0.0028513455484883 - in1[11] *
                  0.00032316342950661811) + in1[12] * 4.2079285691049859E-5) -
                proc_control_B.t2_i * 0.0036543398217122828) + ((in1[8] *
    -9.1703771260780813E-5 + in1[9] * 1.0731951852318531) - proc_control_B.t11_j
    * 0.0036543398217122828)) + -0.072940914605035587;
  Anqv[139] = (((in1[10] * 0.023864851221217471 + in1[11] *
                 4.0426879502317728E-6) - in1[12] * 0.00016269010774240791) +
               ((proc_control_B.t2_i * 0.0003794960966701478 - in1[8] *
                 0.93255469429176219) - in1[9] * 9.1703771260780813E-5)) +
    (proc_control_B.t11_j * 0.0003794960966701478 + 0.007574772388625705);
  Anqv[140] = ((((proc_control_B.t2_i * -0.28560141361437341 +
                  proc_control_B.t65_p) - proc_control_B.t68_p) -
                proc_control_B.t11_j * 0.28560141361437341) - 5.7006270182509668)
    + ((in1[10] * 0.00017692814721597281 - in1[11] * 0.00301187450220627) + in1
       [12] * 0.0032852614324183722);
  Anqv[141] = (((in1[10] * 0.005100926963153893 + in1[11] * 7.54282242443926E-5)
                + in1[12] * 0.76112100692746432) + ((proc_control_B.t2_i *
    0.0013404854555911631 + in1[8] * 0.0012538688125934979) - in1[9] *
    0.00032387772021301561)) + (proc_control_B.t11_j * 0.0013404854555911631 +
    0.026756196718386482);
  Anqv[142] = (((in1[10] * -0.0085297096290247246 - in1[11] *
                 0.59953739020136265) - in1[12] * 6.8948828938803766E-5) +
               ((proc_control_B.t2_i * 0.00066564938883491385 + in1[8] *
                 1.6661666253314429E-5) - in1[9] * 0.0013492616947596331)) +
    (proc_control_B.t11_j * 0.00066564938883491385 + 0.013286414946804669);
  Anqv[143] = 0.0;
  Anqv[144] = 0.0;
  Anqv[145] = 0.0;
  Anqv[146] = -proc_control_B.t40_m;
  Anqv[147] = -proc_control_B.t41_k;
  Anqv[148] = proc_control_B.t42_a;
  Anqv[149] = proc_control_B.t39_p;
  proc_control_B.t11_j = in1[11] * proc_control_B.t9_o;
  Anqv[150] = ((((in1[10] * -0.0030560301354578762 + in1[11] *
                  0.001929418735906703) + in1[12] * 6.2884941489263073E-5) +
                proc_control_B.t3_d * 0.001003331497170287) + ((in1[7] *
    9.7602896722846373E-5 - in1[9] * 1.4431163638272659) + proc_control_B.t11_j *
    0.001003331497170287)) + 0.0234110682673067;
  Anqv[151] = (((in1[10] * -0.00032316342950661811 + in1[11] *
                 4.5292476302332957E-6) - in1[12] * 0.016528998001422841) +
               proc_control_B.t3_d * 1.026911824132076E-5) + (((in1[7] *
    0.00041592787873873338 - in1[9] * 1.356129262930646E-5) +
    proc_control_B.t11_j * 1.026911824132076E-5) + 0.00023961275896415121);
  Anqv[152] = (((in1[10] * 4.0426879502317728E-6 + in1[11] *
                 0.023860477346842442) - in1[12] * 0.000941018323416786) +
               ((proc_control_B.t3_d * -3.9756137245743291E-5 + in1[7] *
                 0.69409782663856512) + in1[9] * 9.7602896722846373E-5)) +
    (proc_control_B.t11_j * -3.9756137245743291E-5 - 0.00092764320240067675);
  Anqv[153] = (((in1[10] * -0.00301187450220627 + in1[11] *
                 0.00082864946354184129) - in1[12] * 0.291807921220024) +
               ((proc_control_B.t3_d * 0.00080268590155159437 + in1[7] *
                 0.032506453976272241) - in1[9] * 0.0018646499569661989)) +
    (proc_control_B.t11_j * 0.00080268590155159437 + 0.018729337702870542);
  Anqv[154] = ((((proc_control_B.t3_d * -0.058374455968341669 +
                  proc_control_B.t61_j) - proc_control_B.t62_l) -
                proc_control_B.t11_j * 0.058374455968341669) - 1.362070639261306)
    + ((in1[10] * 7.54282242443926E-5 - in1[11] * 0.00019446645525741661) - in1
       [12] * 0.003324115892995542);
  Anqv[155] = ((((proc_control_B.t3_d * 1.6062902063655571E-7 - in1[7] *
                  7.5569972812640509E-5) - in1[9] * 0.01448357294143097) +
                proc_control_B.t11_j * 1.6062902063655571E-7) + ((in1[10] *
    -0.59953739020136265 + in1[11] * 0.0085432434746820687) + in1[12] *
    0.0030111351640179931)) + 3.7480104815196341E-6;
  Anqv[156] = 0.0;
  Anqv[157] = 0.0;
  Anqv[158] = 0.0;
  Anqv[159] = -proc_control_B.t41_k;
  Anqv[160] = proc_control_B.t40_m;
  Anqv[161] = -proc_control_B.t39_p;
  Anqv[162] = proc_control_B.t42_a;
  proc_control_B.t11_j = in1[12] * proc_control_B.t10_b;
  Anqv[163] = (((in1[10] * -0.030270009262121408 + in1[11] *
                 6.2884941489263073E-5) + in1[12] * 0.0020006959490984312) -
               proc_control_B.t4_b * 0.0001032754577185093) + (((in1[7] *
    1.0571299073092789E-5 + in1[8] * 1.3454180758607359) - proc_control_B.t11_j *
    0.0001032754577185093) - 0.0050625224371818262);
  Anqv[164] = (((in1[10] * 4.2079285691049859E-5 - in1[11] *
                 0.016528998001422841) + in1[12] * 0.00283488707941543) +
               proc_control_B.t4_b * 4.3636352726935713E-5) + (((in1[7] *
    -0.74121409319149256 + in1[8] * 1.0571299073092789E-5) +
    proc_control_B.t11_j * 4.3636352726935713E-5) + 0.0021390368983792022);
  Anqv[165] = ((((proc_control_B.t4_b * -5.3885346962112674E-7 - in1[7] *
                  0.00032422410747795261) - in1[8] * 7.6083411800115719E-5) -
                proc_control_B.t11_j * 5.3885346962112674E-7) + ((in1[10] *
    -0.00016269010774240791 - in1[11] * 0.000941018323416786) - in1[12] *
    2.6641242336162E-6)) + -2.6414385765741509E-5;
  Anqv[166] = (((in1[10] * 0.0032852614324183722 - in1[11] * 0.291807921220024)
                - in1[12] * 0.00063467747547131872) + ((proc_control_B.t4_b *
    0.00040656429737222281 + in1[7] * 0.24400486517334929) + in1[8] *
    0.00145353196782447)) + (proc_control_B.t11_j * 0.00040656429737222281 +
    0.019929622420207);
  Anqv[167] = ((((proc_control_B.t4_b * 1.6384160104928689E-7 - in1[7] *
                  0.001145088836853196) - in1[8] * 0.1118794885864644) +
                proc_control_B.t11_j * 1.6384160104928689E-7) + ((in1[10] *
    0.76112100692746432 - in1[11] * 0.003324115892995542) - in1[12] *
    0.005288701994301117)) + 8.0314510318277867E-6;
  Anqv[168] = ((((proc_control_B.t4_b * -0.054076220260104418 +
                  proc_control_B.t57_d) - proc_control_B.t58_j1) -
                proc_control_B.t11_j * 0.054076220260104418) -
               2.6507951107894319) + ((in1[10] * -6.8948828938803766E-5 + in1[11]
    * 0.0030111351640179931) + in1[12] * 1.7711862430984169E-5);
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_co_stateEvolution_vYboEQce(const real_T X[143], const
  real_T U[88], real_T c[130], real_T J[20150])
{
  static const real_T val[104]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.002112443491058583, -0.0015284356933675683, -7.0837403672252151E-6,
    0.0062952228101239545, 0.0019032522297668638, -0.017235611708486639, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021112545591001931, 0.001555652319878204,
    9.371205474517828E-6, -0.0060884483374622281, 0.0019613805650913105,
    -0.017335012146094616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021790267284400532, -0.0015565687047941388, -6.7363334491227172E-6,
    0.00603310470655138, 0.0019031465986279986, 0.017628138981294922, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0021778377964816625, 0.0015275193084516327,
    9.7186123926203251E-6, -0.0063505664410348026, 0.001961274933952446,
    0.017528738543686955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00018196388647192952, -0.00034249251816346321, -0.0020956399000156153,
    -0.026767193546582569, 0.010593667623599361, 6.2021813460420573E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.00018124211550371483, 0.00033877509736010515,
    0.0021100316216985742, 0.026476621250220891, 0.01053788543694033,
    -6.207996116589E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00018538731733468782, 0.00035708122797193444, -0.0021822949502860629,
    0.027907360503893332, -0.010793139553633729, -6.4672437426625527E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00017781868464095571,
    -0.00035336380716857632, 0.002167903228603104, -0.027616788207531651,
    -0.010338413506905951, 6.4730585132094889E-5 };

  static const int8_T b[1920]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1 };

  std::memset(&proc_control_B.Jx_c[0], 0, 16900U * sizeof(real_T));
  std::memset(&proc_control_B.Jmv[0], 0, 10400U * sizeof(real_T));
  std::memset(&c[0], 0, 130U * sizeof(real_T));
  for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 13;
       proc_control_B.Jx_tmp++) {
    proc_control_B.ic_c[proc_control_B.Jx_tmp] = static_cast<real_T>
      (proc_control_B.Jx_tmp) + 1.0;
  }

  for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 11;
       proc_control_B.Jx_tmp++) {
    for (proc_control_B.i_jd = 0; proc_control_B.i_jd < 8; proc_control_B.i_jd++)
    {
      proc_control_B.b_U_o[proc_control_B.i_jd + (proc_control_B.Jx_tmp << 3)] =
        U[11 * proc_control_B.i_jd + proc_control_B.Jx_tmp];
    }

    for (proc_control_B.i_jd = 0; proc_control_B.i_jd < 13; proc_control_B.i_jd
         ++) {
      proc_control_B.b_X_h[proc_control_B.i_jd + 13 * proc_control_B.Jx_tmp] =
        X[11 * proc_control_B.i_jd + proc_control_B.Jx_tmp];
    }
  }

  for (proc_control_B.i_jd = 0; proc_control_B.i_jd < 10; proc_control_B.i_jd++)
  {
    AUV8QuatJacobianMatrix_wW6vUT_g(&proc_control_B.b_X_h[13 *
      proc_control_B.i_jd], proc_control_B.Ak);
    proc_control_B.Ak1_tmp = (proc_control_B.i_jd + 1) * 13;
    AUV8QuatJacobianMatrix_wW6vUT_g(&proc_control_B.b_X_h[proc_control_B.Ak1_tmp],
      proc_control_B.Ak1);
    proc_control_B.Jx_tmp = proc_control_B.i_jd << 3;
    proc_co_AUV8QuatSimFcn_AbfqyrNU(&proc_control_B.b_X_h[13 *
      proc_control_B.i_jd], &proc_control_B.b_U_o[proc_control_B.Jx_tmp],
      proc_control_B.dv21);
    proc_co_AUV8QuatSimFcn_AbfqyrNU(&proc_control_B.b_X_h[proc_control_B.Ak1_tmp],
      &proc_control_B.b_U_o[proc_control_B.Jx_tmp], proc_control_B.dv22);
    for (proc_control_B.k_d = 0; proc_control_B.k_d < 13; proc_control_B.k_d++)
    {
      int32_T c_tmp;
      c_tmp = static_cast<int32_T>(proc_control_B.ic_c[proc_control_B.k_d]);
      c[c_tmp - 1] = (proc_control_B.b_X_h[13 * proc_control_B.i_jd +
                      proc_control_B.k_d] +
                      (proc_control_B.dv21[proc_control_B.k_d] +
                       proc_control_B.dv22[proc_control_B.k_d]) * 0.05) -
        proc_control_B.b_X_h[proc_control_B.Ak1_tmp + proc_control_B.k_d];
      if (proc_control_B.i_jd + 1 > 1) {
        for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 13;
             proc_control_B.Jx_tmp++) {
          proc_control_B.Jx_c[((static_cast<int32_T>
                                (proc_control_B.ic_c[proc_control_B.Jx_tmp]) +
                                130 * proc_control_B.k_d) + 1690 *
                               (proc_control_B.i_jd - 1)) - 1] =
            proc_control_B.Ak[13 * proc_control_B.k_d + proc_control_B.Jx_tmp] *
            0.05;
        }

        proc_control_B.Jx_c[((static_cast<int32_T>
                              (proc_control_B.ic_c[proc_control_B.k_d]) + 130 *
                              proc_control_B.k_d) + 1690 * (proc_control_B.i_jd
          - 1)) - 1] = proc_control_B.Jx_c[((130 * proc_control_B.k_d + c_tmp) +
          (proc_control_B.i_jd - 1) * 1690) - 1] + 1.0;
      }
    }

    for (proc_control_B.k_d = 0; proc_control_B.k_d < 13; proc_control_B.k_d++)
    {
      for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 13;
           proc_control_B.Jx_tmp++) {
        proc_control_B.Jx_c[((static_cast<int32_T>
                              (proc_control_B.ic_c[proc_control_B.Jx_tmp]) + 130
                              * proc_control_B.k_d) + 1690 * proc_control_B.i_jd)
          - 1] = proc_control_B.Ak1[13 * proc_control_B.k_d +
          proc_control_B.Jx_tmp] * 0.05;
      }

      proc_control_B.Jx_tmp = ((130 * proc_control_B.k_d + static_cast<int32_T>
        (proc_control_B.ic_c[proc_control_B.k_d])) + 1690 * proc_control_B.i_jd)
        - 1;
      proc_control_B.Jx_c[proc_control_B.Jx_tmp]--;
    }

    for (proc_control_B.k_d = 0; proc_control_B.k_d < 8; proc_control_B.k_d++) {
      for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 13;
           proc_control_B.Jx_tmp++) {
        proc_control_B.Jmv[((static_cast<int32_T>
                             (proc_control_B.ic_c[proc_control_B.Jx_tmp]) + 130 *
                             proc_control_B.k_d) + 1040 * proc_control_B.i_jd) -
          1] = val[13 * proc_control_B.k_d + proc_control_B.Jx_tmp];
      }
    }

    for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 13;
         proc_control_B.Jx_tmp++) {
      proc_control_B.ic_c[proc_control_B.Jx_tmp] += 13.0;
    }
  }

  for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 130;
       proc_control_B.Jx_tmp++) {
    for (proc_control_B.i_jd = 0; proc_control_B.i_jd < 24; proc_control_B.i_jd
         ++) {
      proc_control_B.k_d = 24 * proc_control_B.Jx_tmp + proc_control_B.i_jd;
      proc_control_B.Jmv_c[proc_control_B.k_d] = 0.0;
      for (proc_control_B.Ak1_tmp = 0; proc_control_B.Ak1_tmp < 80;
           proc_control_B.Ak1_tmp++) {
        proc_control_B.Jmv_c[proc_control_B.k_d] += proc_control_B.Jmv[130 *
          proc_control_B.Ak1_tmp + proc_control_B.Jx_tmp] * static_cast<real_T>
          (b[80 * proc_control_B.i_jd + proc_control_B.Ak1_tmp]);
      }
    }

    for (proc_control_B.i_jd = 0; proc_control_B.i_jd < 130; proc_control_B.i_jd
         ++) {
      J[proc_control_B.i_jd + 155 * proc_control_B.Jx_tmp] =
        proc_control_B.Jx_c[130 * proc_control_B.i_jd + proc_control_B.Jx_tmp];
    }

    std::memcpy(&J[proc_control_B.Jx_tmp * 155 + 130],
                &proc_control_B.Jmv_c[proc_control_B.Jx_tmp * 24], 24U * sizeof
                (real_T));
    J[155 * proc_control_B.Jx_tmp + 154] = 0.0;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_all_H4RNf0h2(const boolean_T x[130], boolean_T
  y[13])
{
  proc_control_B.i2_l = 1;
  for (proc_control_B.i_c4 = 0; proc_control_B.i_c4 < 13; proc_control_B.i_c4++)
  {
    boolean_T exitg1;
    y[proc_control_B.i_c4] = true;
    proc_control_B.a_ob = proc_control_B.i2_l + 9;
    proc_control_B.ix_l = proc_control_B.i2_l;
    proc_control_B.i2_l += 10;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.ix_l <= proc_control_B.a_ob)) {
      if (!x[proc_control_B.ix_l - 1]) {
        y[proc_control_B.i_c4] = false;
        exitg1 = true;
      } else {
        proc_control_B.ix_l++;
      }
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
boolean_T proc_control::proc_control_any(const boolean_T x[26])
{
  boolean_T exitg1;
  boolean_T y;
  y = false;
  proc_control_B.k_nh = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.k_nh <= 25)) {
    if (x[proc_control_B.k_nh]) {
      y = true;
      exitg1 = true;
    } else {
      proc_control_B.k_nh++;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_cont_znlmpc_reformJacobian(const real_T Jx_data[], const
  int32_T Jx_size[3], const real_T Jmv_data[], const real_T Je_data[], const
  int32_T *Je_size, real_T Jc_data[], int32_T Jc_size[2])
{
  if (Jx_size[0] == 0) {
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    proc_control_B.Jx_b[0] = static_cast<int16_T>(Jx_size[0]);
    proc_control_B.Jx_b[1] = 130;
    proc_control_B.varargin_1_size_idx_1_tmp = static_cast<int16_T>(Jx_size[0]);
    for (proc_control_B.i12 = 0; proc_control_B.i12 <
         proc_control_B.varargin_1_size_idx_1_tmp; proc_control_B.i12++) {
      for (proc_control_B.i11 = 0; proc_control_B.i11 < 130; proc_control_B.i11
           ++) {
        proc_control_B.varargin_1_data[proc_control_B.i11 + 130 *
          proc_control_B.i12] = Jx_data[proc_control_B.Jx_b[0] *
          proc_control_B.i11 + proc_control_B.i12];
      }
    }

    proc_control_B.Jx_ce[0] = Jx_size[0];
    proc_control_B.Jx_ce[1] = 80;
    proc_control_mtimes(Jmv_data, proc_control_B.Jx_ce,
                        proc_control_B.tmp_data_c, proc_control_B.tmp_size);
    proc_control_B.varargin_1_size_idx_1_tmp = proc_control_B.tmp_size[0];
    for (proc_control_B.i12 = 0; proc_control_B.i12 <
         proc_control_B.varargin_1_size_idx_1_tmp; proc_control_B.i12++) {
      for (proc_control_B.i11 = 0; proc_control_B.i11 < 24; proc_control_B.i11++)
      {
        proc_control_B.varargin_2_data[proc_control_B.i11 + 24 *
          proc_control_B.i12] =
          proc_control_B.tmp_data_c[proc_control_B.tmp_size[0] *
          proc_control_B.i11 + proc_control_B.i12];
      }
    }

    proc_control_B.Jx_b[0] = 130;
    proc_control_B.Jx_b[1] = static_cast<int16_T>(Jx_size[0]);
    if (proc_control_B.tmp_size[0] != 0) {
      proc_control_B.varargin_2[0] = 24;
    } else {
      proc_control_B.varargin_2[0] = 0;
    }

    proc_control_B.varargin_2[1] = static_cast<int16_T>(Jx_size[0]);
    proc_control_B.varargin_1_size_idx_1_tmp = *Je_size;
    if (proc_control_B.varargin_1_size_idx_1_tmp - 1 >= 0) {
      std::memcpy(&proc_control_B.Je_data[0], &Je_data[0],
                  proc_control_B.varargin_1_size_idx_1_tmp * sizeof(real_T));
    }

    proc_control_B.Je_b[0] = (*Je_size != 0);
    proc_control_B.Je_b[1] = static_cast<int16_T>(Jx_size[0]);
    Jc_size[0] = (proc_control_B.varargin_2[0] + proc_control_B.Je_b[0]) + 130;
    Jc_size[1] = static_cast<int16_T>(Jx_size[0]);
    proc_control_B.varargin_1_size_idx_1_tmp = static_cast<int16_T>(Jx_size[0]);
    for (proc_control_B.i12 = 0; proc_control_B.i12 <
         proc_control_B.varargin_1_size_idx_1_tmp; proc_control_B.i12++) {
      for (proc_control_B.i11 = 0; proc_control_B.i11 < 130; proc_control_B.i11
           ++) {
        Jc_data[proc_control_B.i11 + Jc_size[0] * proc_control_B.i12] =
          proc_control_B.varargin_1_data[proc_control_B.Jx_b[0] *
          proc_control_B.i12 + proc_control_B.i11];
      }
    }

    proc_control_B.varargin_1_size_idx_1_tmp = static_cast<int16_T>(Jx_size[0]);
    proc_control_B.loop_ub_c = proc_control_B.varargin_2[0];
    for (proc_control_B.i12 = 0; proc_control_B.i12 <
         proc_control_B.varargin_1_size_idx_1_tmp; proc_control_B.i12++) {
      for (proc_control_B.i11 = 0; proc_control_B.i11 < proc_control_B.loop_ub_c;
           proc_control_B.i11++) {
        Jc_data[(proc_control_B.i11 + Jc_size[0] * proc_control_B.i12) + 130] =
          proc_control_B.varargin_2_data[proc_control_B.varargin_2[0] *
          proc_control_B.i12 + proc_control_B.i11];
      }
    }

    proc_control_B.varargin_1_size_idx_1_tmp = static_cast<int16_T>(Jx_size[0]);
    if (proc_control_B.Je_b[0] - 1 >= 0) {
      for (proc_control_B.i12 = 0; proc_control_B.i12 <
           proc_control_B.varargin_1_size_idx_1_tmp; proc_control_B.i12++) {
        Jc_data[(proc_control_B.varargin_2[0] + Jc_size[0] * proc_control_B.i12)
          + 130] = proc_control_B.Je_data[proc_control_B.Je_b[0] *
          proc_control_B.i12];
      }
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_outputBounds(const real_T runtimedata_OutputMin
  [130], const real_T runtimedata_OutputMax[130], const real_T X[143], real_T e,
  real_T c_data[], int32_T c_size[2], real_T Jc_data[], int32_T Jc_size[2])
{
  boolean_T exitg1;
  boolean_T y;
  for (proc_control_B.i_n = 0; proc_control_B.i_n < 130; proc_control_B.i_n++) {
    proc_control_B.bv2[proc_control_B.i_n] = std::isinf
      (runtimedata_OutputMin[proc_control_B.i_n]);
  }

  proc_control_all_H4RNf0h2(proc_control_B.bv2, proc_control_B.x_j);
  y = true;
  proc_control_B.d_k = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.d_k < 13)) {
    if (!proc_control_B.x_j[proc_control_B.d_k]) {
      y = false;
      exitg1 = true;
    } else {
      proc_control_B.d_k++;
    }
  }

  if (y) {
    for (proc_control_B.i_n = 0; proc_control_B.i_n < 130; proc_control_B.i_n++)
    {
      proc_control_B.bv2[proc_control_B.i_n] = std::isinf
        (runtimedata_OutputMax[proc_control_B.i_n]);
    }

    proc_control_all_H4RNf0h2(proc_control_B.bv2, proc_control_B.x_j);
    proc_control_B.d_k = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.d_k < 13)) {
      if (!proc_control_B.x_j[proc_control_B.d_k]) {
        y = false;
        exitg1 = true;
      } else {
        proc_control_B.d_k++;
      }
    }
  }

  if (y) {
    c_size[0] = 0;
    c_size[1] = 0;
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    for (proc_control_B.i_n = 0; proc_control_B.i_n < 260; proc_control_B.i_n++)
    {
      proc_control_B.b_c_a[proc_control_B.i_n] = 0.0;
      proc_control_B.icf_d[proc_control_B.i_n] = true;
    }

    std::memset(&proc_control_B.Jx[0], 0, 33800U * sizeof(real_T));
    std::memset(&proc_control_B.Je[0], 0, 260U * sizeof(int8_T));
    for (proc_control_B.i_n = 0; proc_control_B.i_n < 13; proc_control_B.i_n++)
    {
      proc_control_B.ic_g[proc_control_B.i_n] = static_cast<real_T>
        (proc_control_B.i_n) + 1.0;
    }

    for (proc_control_B.d_k = 0; proc_control_B.d_k < 10; proc_control_B.d_k++)
    {
      for (proc_control_B.i_n = 0; proc_control_B.i_n < 13; proc_control_B.i_n++)
      {
        proc_control_B.runtimedata_OutputMin_i = runtimedata_OutputMin[10 *
          proc_control_B.i_n + proc_control_B.d_k];
        proc_control_B.icf_d[static_cast<int32_T>
          (proc_control_B.ic_g[proc_control_B.i_n]) - 1] = ((!std::isinf
          (proc_control_B.runtimedata_OutputMin_i)) && (!std::isnan
          (proc_control_B.runtimedata_OutputMin_i)));
      }

      for (proc_control_B.i_n = 0; proc_control_B.i_n < 13; proc_control_B.i_n++)
      {
        proc_control_B.runtimedata_OutputMin_i =
          proc_control_B.ic_g[proc_control_B.i_n];
        proc_control_B.runtimedata_OutputMax_e = runtimedata_OutputMax[10 *
          proc_control_B.i_n + proc_control_B.d_k];
        proc_control_B.icf_d[static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_i + 13.0) - 1] = ((!std::isinf
          (proc_control_B.runtimedata_OutputMax_e)) && (!std::isnan
          (proc_control_B.runtimedata_OutputMax_e)));
        proc_control_B.ic_m[proc_control_B.i_n] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_i) - 1;
        proc_control_B.ic_m[proc_control_B.i_n + 13] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_i + 13.0) - 1;
      }

      for (proc_control_B.i_n = 0; proc_control_B.i_n < 26; proc_control_B.i_n++)
      {
        proc_control_B.icf_g[proc_control_B.i_n] =
          proc_control_B.icf_d[proc_control_B.ic_m[proc_control_B.i_n]];
      }

      if (proc_control_any(proc_control_B.icf_g)) {
        std::memset(&proc_control_B.Ck[0], 0, 169U * sizeof(int8_T));
        for (proc_control_B.c_k_l = 0; proc_control_B.c_k_l < 13;
             proc_control_B.c_k_l++) {
          proc_control_B.Ck[proc_control_B.c_k_l + 13 * proc_control_B.c_k_l] =
            1;
          proc_control_B.b_c_a[static_cast<int32_T>
            (proc_control_B.ic_g[proc_control_B.c_k_l]) - 1] =
            (runtimedata_OutputMin[10 * proc_control_B.c_k_l +
             proc_control_B.d_k] - e) - X[(11 * proc_control_B.c_k_l +
            proc_control_B.d_k) + 1];
        }

        for (proc_control_B.i_n = 0; proc_control_B.i_n < 13; proc_control_B.i_n
             ++) {
          proc_control_B.b_c_a[static_cast<int32_T>
            (proc_control_B.ic_g[proc_control_B.i_n] + 13.0) - 1] = (X[(11 *
            proc_control_B.i_n + proc_control_B.d_k) + 1] -
            runtimedata_OutputMax[10 * proc_control_B.i_n + proc_control_B.d_k])
            - e;
        }

        for (proc_control_B.i_n = 0; proc_control_B.i_n < 169;
             proc_control_B.i_n++) {
          proc_control_B.val[proc_control_B.i_n] = static_cast<int8_T>
            (-proc_control_B.Ck[proc_control_B.i_n]);
        }

        for (proc_control_B.c_k_l = 0; proc_control_B.c_k_l < 13;
             proc_control_B.c_k_l++) {
          for (proc_control_B.i_n = 0; proc_control_B.i_n < 13;
               proc_control_B.i_n++) {
            proc_control_B.Jx[((static_cast<int32_T>
                                (proc_control_B.ic_g[proc_control_B.i_n]) + 260 *
                                proc_control_B.c_k_l) + 3380 *
                               proc_control_B.d_k) - 1] = proc_control_B.val[13 *
              proc_control_B.c_k_l + proc_control_B.i_n];
          }
        }

        for (proc_control_B.c_k_l = 0; proc_control_B.c_k_l < 13;
             proc_control_B.c_k_l++) {
          for (proc_control_B.i_n = 0; proc_control_B.i_n < 13;
               proc_control_B.i_n++) {
            proc_control_B.Jx[((static_cast<int32_T>
                                (proc_control_B.ic_g[proc_control_B.i_n] + 13.0)
                                + 260 * proc_control_B.c_k_l) + 3380 *
                               proc_control_B.d_k) - 1] = proc_control_B.Ck[13 *
              proc_control_B.c_k_l + proc_control_B.i_n];
          }

          proc_control_B.Je[static_cast<int32_T>
            (proc_control_B.ic_g[proc_control_B.c_k_l]) - 1] = -1;
        }

        for (proc_control_B.i_n = 0; proc_control_B.i_n < 13; proc_control_B.i_n
             ++) {
          proc_control_B.Je[static_cast<int32_T>
            (proc_control_B.ic_g[proc_control_B.i_n] + 13.0) - 1] = -1;
        }
      }

      for (proc_control_B.i_n = 0; proc_control_B.i_n < 13; proc_control_B.i_n++)
      {
        proc_control_B.ic_g[proc_control_B.i_n] += 26.0;
      }
    }

    proc_control_B.d_k = 0;
    for (proc_control_B.c_k_l = 0; proc_control_B.c_k_l < 260;
         proc_control_B.c_k_l++) {
      if (proc_control_B.icf_d[proc_control_B.c_k_l]) {
        proc_control_B.d_k++;
      }
    }

    proc_control_B.b_size_idx_0_e = proc_control_B.d_k;
    proc_control_B.d_k = 0;
    for (proc_control_B.c_k_l = 0; proc_control_B.c_k_l < 260;
         proc_control_B.c_k_l++) {
      if (proc_control_B.icf_d[proc_control_B.c_k_l]) {
        proc_control_B.b_data_p[proc_control_B.d_k] = static_cast<int16_T>
          (proc_control_B.c_k_l + 1);
        proc_control_B.d_k++;
      }
    }

    for (proc_control_B.i_n = 0; proc_control_B.i_n <
         proc_control_B.b_size_idx_0_e; proc_control_B.i_n++) {
      proc_control_B.b_c_data_a[proc_control_B.i_n] =
        proc_control_B.b_c_a[proc_control_B.b_data_p[proc_control_B.i_n] - 1];
    }

    c_size[0] = proc_control_B.b_size_idx_0_e;
    c_size[1] = 1;
    if (proc_control_B.b_size_idx_0_e - 1 >= 0) {
      std::memcpy(&c_data[0], &proc_control_B.b_c_data_a[0],
                  proc_control_B.b_size_idx_0_e * sizeof(real_T));
    }

    proc_control_B.d_k = 0;
    for (proc_control_B.c_k_l = 0; proc_control_B.c_k_l < 260;
         proc_control_B.c_k_l++) {
      if (proc_control_B.icf_d[proc_control_B.c_k_l]) {
        proc_control_B.d_k++;
      }
    }

    proc_control_B.b_size_idx_0_e = proc_control_B.d_k;
    proc_control_B.d_k = 0;
    for (proc_control_B.c_k_l = 0; proc_control_B.c_k_l < 260;
         proc_control_B.c_k_l++) {
      if (proc_control_B.icf_d[proc_control_B.c_k_l]) {
        proc_control_B.d_data[proc_control_B.d_k] = static_cast<int16_T>
          (proc_control_B.c_k_l + 1);
        proc_control_B.d_k++;
      }
    }

    proc_control_B.Jx_size[0] = proc_control_B.b_size_idx_0_e;
    proc_control_B.Jx_size[1] = 13;
    proc_control_B.Jx_size[2] = 10;
    for (proc_control_B.i_n = 0; proc_control_B.i_n < 10; proc_control_B.i_n++)
    {
      for (proc_control_B.d_k = 0; proc_control_B.d_k < 13; proc_control_B.d_k++)
      {
        for (proc_control_B.c_k_l = 0; proc_control_B.c_k_l <
             proc_control_B.b_size_idx_0_e; proc_control_B.c_k_l++) {
          proc_control_B.Jx_data[(proc_control_B.c_k_l +
            proc_control_B.b_size_idx_0_e * proc_control_B.d_k) +
            proc_control_B.b_size_idx_0_e * 13 * proc_control_B.i_n] =
            proc_control_B.Jx[((260 * proc_control_B.d_k +
                                proc_control_B.d_data[proc_control_B.c_k_l]) +
                               3380 * proc_control_B.i_n) - 1];
        }
      }

      for (proc_control_B.d_k = 0; proc_control_B.d_k < 8; proc_control_B.d_k++)
      {
        for (proc_control_B.c_k_l = 0; proc_control_B.c_k_l <
             proc_control_B.b_size_idx_0_e; proc_control_B.c_k_l++) {
          proc_control_B.tmp_data[(proc_control_B.c_k_l +
            proc_control_B.b_size_idx_0_e * proc_control_B.d_k) +
            (proc_control_B.b_size_idx_0_e << 3) * proc_control_B.i_n] = 0.0;
        }
      }
    }

    proc_control_B.b_c_size = proc_control_B.b_size_idx_0_e;
    for (proc_control_B.i_n = 0; proc_control_B.i_n <
         proc_control_B.b_size_idx_0_e; proc_control_B.i_n++) {
      proc_control_B.b_c_data_a[proc_control_B.i_n] =
        proc_control_B.Je[proc_control_B.d_data[proc_control_B.i_n] - 1];
    }

    proc_cont_znlmpc_reformJacobian(proc_control_B.Jx_data,
      proc_control_B.Jx_size, proc_control_B.tmp_data, proc_control_B.b_c_data_a,
      &proc_control_B.b_c_size, Jc_data, Jc_size);
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_co_eML_blk_kernel_anonFcn2(const real_T runtimedata_x[13],
  const real_T runtimedata_OutputMin[130], const real_T runtimedata_OutputMax
  [130], const real_T z[155], real_T varargout_1_data[], int32_T
  varargout_1_size[2], real_T varargout_2[130], real_T varargout_3_data[],
  int32_T varargout_3_size[2], real_T varargout_4[20150])
{
  int16_T sizes;
  uint8_T sizes_idx_1;
  proc_control_znlmpc_getXUe(z, runtimedata_x, proc_control_B.X_g,
    proc_control_B.U_o, &proc_control_B.e_o);
  proc_co_stateEvolution_vYboEQce(proc_control_B.X_g, proc_control_B.U_o,
    varargout_2, varargout_4);
  proc_control_outputBounds(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_B.X_g, proc_control_B.e_o, proc_control_B.varargin_1_data_e,
    proc_control_B.varargin_1_size_m, proc_control_B.b_varargin_1_data,
    proc_control_B.b_varargin_1_size);
  sizes_idx_1 = ((proc_control_B.varargin_1_size_m[0] != 0) &&
                 (proc_control_B.varargin_1_size_m[1] != 0));
  if (sizes_idx_1 == 0) {
    proc_control_B.sizes_idx_0_e = proc_control_B.varargin_1_size_m[0];
  } else if ((proc_control_B.varargin_1_size_m[0] != 0) &&
             (proc_control_B.varargin_1_size_m[1] != 0)) {
    proc_control_B.sizes_idx_0_e = proc_control_B.varargin_1_size_m[0];
  } else {
    proc_control_B.sizes_idx_0_e = 0;
  }

  varargout_1_size[0] = proc_control_B.sizes_idx_0_e;
  varargout_1_size[1] = sizes_idx_1;
  if ((sizes_idx_1 - 1 >= 0) && (proc_control_B.sizes_idx_0_e - 1 >= 0)) {
    std::memcpy(&varargout_1_data[0], &proc_control_B.varargin_1_data_e[0],
                proc_control_B.sizes_idx_0_e * sizeof(real_T));
  }

  if ((proc_control_B.b_varargin_1_size[0] != 0) &&
      (proc_control_B.b_varargin_1_size[1] != 0)) {
    sizes_idx_1 = static_cast<uint8_T>(proc_control_B.b_varargin_1_size[0]);
  } else {
    sizes_idx_1 = 0U;
  }

  varargout_3_size[0] = sizes_idx_1;
  if (sizes_idx_1 == 0) {
    varargout_3_size[1] = proc_control_B.b_varargin_1_size[1];
    sizes = static_cast<int16_T>(proc_control_B.b_varargin_1_size[1]);
  } else if ((proc_control_B.b_varargin_1_size[0] != 0) &&
             (proc_control_B.b_varargin_1_size[1] != 0)) {
    varargout_3_size[1] = proc_control_B.b_varargin_1_size[1];
    sizes = static_cast<int16_T>(proc_control_B.b_varargin_1_size[1]);
  } else {
    varargout_3_size[1] = 0;
    sizes = 0;
  }

  proc_control_B.sizes_idx_0_e = sizes_idx_1 * sizes;
  if (proc_control_B.sizes_idx_0_e - 1 >= 0) {
    std::memcpy(&varargout_3_data[0], &proc_control_B.b_varargin_1_data[0],
                proc_control_B.sizes_idx_0_e * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_factoryConstruct(int32_T nVarMax, int32_T
  mConstrMax, int32_T mIneq, int32_T mNonlinIneq,
  s_SfTiiT1KRClFcMCE02xJjB_proc_T *obj)
{
  obj->nVarMax = nVarMax;
  obj->mNonlinIneq = mNonlinIneq;
  obj->mNonlinEq = 130;
  obj->mIneq = mIneq;
  obj->mEq = 130;
  obj->iNonIneq0 = (mIneq - mNonlinIneq) + 1;
  obj->iNonEq0 = 1;
  obj->sqpFval = 0.0;
  obj->sqpFval_old = 0.0;
  obj->cIneq.size = mIneq;
  obj->cIneq_old.size = mIneq;
  obj->grad.size = nVarMax;
  obj->grad_old.size = nVarMax;
  obj->FunctionEvaluations = 0;
  obj->sqpIterations = 0;
  obj->sqpExitFlag = 0;
  obj->lambdasqp.size = mConstrMax;
  if (mConstrMax - 1 >= 0) {
    std::memset(&obj->lambdasqp.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->lambdaStopTest.size = mConstrMax;
  obj->lambdaStopTestPrev.size = mConstrMax;
  obj->steplength = 1.0;
  obj->delta_x.size = nVarMax;
  if (nVarMax - 1 >= 0) {
    std::memset(&obj->delta_x.data[0], 0, nVarMax * sizeof(real_T));
  }

  obj->socDirection.size = nVarMax;
  obj->workingset_old.size = mConstrMax;
  if (mNonlinIneq > 0) {
    obj->JacCineqTrans_old.size[0] = nVarMax;
    obj->JacCineqTrans_old.size[1] = mNonlinIneq;
  } else {
    obj->JacCineqTrans_old.size[0] = 0;
    obj->JacCineqTrans_old.size[1] = 0;
  }

  obj->JacCeqTrans_old.size[0] = nVarMax;
  obj->JacCeqTrans_old.size[1] = 130;
  obj->gradLag.size = nVarMax;
  obj->delta_gradLag.size = nVarMax;
  obj->xstar.size = nVarMax;
  obj->fstar = 0.0;
  obj->firstorderopt = 0.0;
  obj->lambda.size = mConstrMax;
  if (mConstrMax - 1 >= 0) {
    std::memset(&obj->lambda.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->state = 0;
  obj->maxConstr = 0.0;
  obj->iterations = 0;
  obj->searchDir.size = nVarMax;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_cont_factoryConstruct_lnz4(int32_T MaxVars, int32_T
  *obj_grad_size, int32_T *obj_Hx_size, boolean_T *obj_hasLinear, int32_T
  *obj_nvar, int32_T *obj_maxVar, real_T *obj_beta, real_T *obj_rho, int32_T
  *obj_objtype, int32_T *obj_prev_objtype, int32_T *obj_prev_nvar, boolean_T
  *obj_prev_hasLinear, real_T *obj_gammaScalar)
{
  *obj_grad_size = MaxVars;
  *obj_Hx_size = MaxVars - 1;
  *obj_hasLinear = false;
  *obj_nvar = 0;
  *obj_maxVar = MaxVars;
  *obj_beta = 0.0;
  *obj_rho = 0.0;
  *obj_objtype = 3;
  *obj_prev_objtype = 3;
  *obj_prev_nvar = 0;
  *obj_prev_hasLinear = false;
  *obj_gammaScalar = 0.0;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_con_factoryConstruct_lnz42(int32_T mIneqMax, int32_T
  nVarMax, int32_T mConstrMax, s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj)
{
  obj->mConstr = 0;
  obj->mConstrOrig = 0;
  obj->mConstrMax = mConstrMax;
  obj->nVar = 155;
  obj->nVarOrig = 155;
  obj->nVarMax = nVarMax;
  obj->ldA = nVarMax;
  obj->Aineq.size = mIneqMax * nVarMax;
  obj->bineq.size = mIneqMax;
  obj->Aeq.size = 130 * nVarMax;
  obj->lb.size = nVarMax;
  obj->ub.size = nVarMax;
  obj->indexLB.size = nVarMax;
  obj->indexUB.size = nVarMax;
  obj->indexFixed.size = nVarMax;
  obj->mEqRemoved = 0;
  obj->ATwset.size = nVarMax * mConstrMax;
  obj->bwset.size = mConstrMax;
  obj->nActiveConstr = 0;
  obj->maxConstrWorkspace.size = mConstrMax;
  for (int32_T i{0}; i < 5; i++) {
    obj->sizes[i] = 0;
    obj->sizesNormal[i] = 0;
    obj->sizesPhaseOne[i] = 0;
    obj->sizesRegularized[i] = 0;
    obj->sizesRegPhaseOne[i] = 0;
  }

  for (int32_T i{0}; i < 6; i++) {
    obj->isActiveIdx[i] = 0;
    obj->isActiveIdxNormal[i] = 0;
    obj->isActiveIdxPhaseOne[i] = 0;
    obj->isActiveIdxRegularized[i] = 0;
    obj->isActiveIdxRegPhaseOne[i] = 0;
  }

  obj->isActiveConstr.size = mConstrMax;
  obj->Wid.size = mConstrMax;
  obj->Wlocalidx.size = mConstrMax;
  for (int32_T i{0}; i < 5; i++) {
    obj->nWConstr[i] = 0;
  }

  obj->probType = 3;
  obj->SLACK0 = 1.0E-5;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_loadProblem(s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj,
  int32_T mIneq, int32_T mLinIneq, const real_T Aineq_data[], int32_T mLB,
  int32_T mUB, int32_T mFixed, int32_T mConstrMax)
{
  int32_T b_idx_col;
  int32_T k;
  b_idx_col = mIneq + mLB;
  k = ((b_idx_col + mUB) + mFixed) + 130;
  obj->mConstr = k;
  obj->mConstrOrig = k;
  obj->mConstrMax = mConstrMax;
  obj->sizes[0] = mFixed;
  obj->sizes[1] = 130;
  obj->sizes[2] = mIneq;
  obj->sizes[3] = mLB;
  obj->sizes[4] = mUB;
  for (k = 0; k < 5; k++) {
    obj->sizesNormal[k] = obj->sizes[k];
  }

  obj->sizesPhaseOne[0] = mFixed;
  obj->sizesPhaseOne[1] = 130;
  obj->sizesPhaseOne[2] = mIneq;
  obj->sizesPhaseOne[3] = mLB + 1;
  obj->sizesPhaseOne[4] = mUB;
  obj->sizesRegularized[0] = mFixed;
  obj->sizesRegularized[1] = 130;
  obj->sizesRegularized[2] = mIneq;
  obj->sizesRegularized[3] = b_idx_col + 260;
  obj->sizesRegularized[4] = mUB;
  obj->sizesRegPhaseOne[0] = mFixed;
  obj->sizesRegPhaseOne[1] = 130;
  obj->sizesRegPhaseOne[2] = mIneq;
  obj->sizesRegPhaseOne[3] = b_idx_col + 261;
  obj->sizesRegPhaseOne[4] = mUB;
  obj->isActiveIdxNormal[0] = 1;
  obj->isActiveIdxNormal[1] = mFixed;
  obj->isActiveIdxNormal[2] = 130;
  obj->isActiveIdxNormal[3] = mIneq;
  obj->isActiveIdxNormal[4] = mLB;
  obj->isActiveIdxNormal[5] = mUB;
  for (k = 0; k < 6; k++) {
    obj->isActiveIdxRegPhaseOne[k] = obj->isActiveIdxNormal[k];
  }

  for (k = 0; k < 5; k++) {
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  for (k = 0; k < 6; k++) {
    obj->isActiveIdx[k] = obj->isActiveIdxRegPhaseOne[k];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = mLB + 1;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (k = 0; k < 5; k++) {
    obj->isActiveIdxNormal[k + 1] += obj->isActiveIdxNormal[k];
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  for (k = 0; k < 6; k++) {
    obj->isActiveIdxPhaseOne[k] = obj->isActiveIdxRegPhaseOne[k];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = b_idx_col + 260;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (k = 0; k < 5; k++) {
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  for (k = 0; k < 6; k++) {
    obj->isActiveIdxRegularized[k] = obj->isActiveIdxRegPhaseOne[k];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = b_idx_col + 261;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (k = 0; k < 5; k++) {
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  if (mIneq > 0) {
    for (b_idx_col = 0; b_idx_col < mLinIneq; b_idx_col++) {
      for (k = 0; k < 155; k++) {
        obj->Aineq.data[k + obj->ldA * b_idx_col] = Aineq_data[mLinIneq * k +
          b_idx_col];
      }
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
int32_T proc_control::proc_contr_checkVectorNonFinite(int32_T N, const real_T
  vec_data[], int32_T iv0)
{
  int32_T idx_end;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  proc_control_B.idx_current = iv0 - 2;
  idx_end = (iv0 + N) - 1;
  while (allFinite && (proc_control_B.idx_current + 2 <= idx_end)) {
    proc_control_B.allFinite_tmp = vec_data[proc_control_B.idx_current + 1];
    allFinite = ((!std::isinf(proc_control_B.allFinite_tmp)) && (!std::isnan
      (proc_control_B.allFinite_tmp)));
    proc_control_B.idx_current++;
  }

  if (!allFinite) {
    if (std::isnan(vec_data[proc_control_B.idx_current])) {
      status = -3;
    } else if (vec_data[proc_control_B.idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::computeObjectiveAndUserGradient(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T x[155], real_T
  grad_workspace_data[], real_T *fval, int32_T *status)
{
  static const int8_T b[1920]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1 };

  static const int8_T c[169]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  proc_control_znlmpc_getXUe(x, obj_objfun_workspace_runtimedat,
    proc_control_B.X_e, proc_control_B.U_k, &proc_control_B.e_oc);
  std::memset(&proc_control_B.gfX[0], 0, 130U * sizeof(real_T));
  std::memset(&proc_control_B.gfU[0], 0, 80U * sizeof(real_T));
  proc_control_B.fs_h = 0.0;
  for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 13; proc_control_B.i_h2++)
  {
    proc_control_B.ix[proc_control_B.i_h2] = static_cast<real_T>
      (proc_control_B.i_h2) + 1.0;
  }

  for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 8; proc_control_B.i_h2++)
  {
    proc_control_B.iu[proc_control_B.i_h2] = static_cast<real_T>
      (proc_control_B.i_h2) + 1.0;
  }

  for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 11; proc_control_B.i_h2++)
  {
    for (proc_control_B.obj_objfun_workspace_runtimed_b = 0;
         proc_control_B.obj_objfun_workspace_runtimed_b < 13;
         proc_control_B.obj_objfun_workspace_runtimed_b++) {
      proc_control_B.b_X_f[proc_control_B.obj_objfun_workspace_runtimed_b + 13 *
        proc_control_B.i_h2] = proc_control_B.X_e[11 *
        proc_control_B.obj_objfun_workspace_runtimed_b + proc_control_B.i_h2];
    }

    for (proc_control_B.obj_objfun_workspace_runtimed_b = 0;
         proc_control_B.obj_objfun_workspace_runtimed_b < 8;
         proc_control_B.obj_objfun_workspace_runtimed_b++) {
      proc_control_B.b_U_i[proc_control_B.obj_objfun_workspace_runtimed_b +
        (proc_control_B.i_h2 << 3)] = proc_control_B.U_k[11 *
        proc_control_B.obj_objfun_workspace_runtimed_b + proc_control_B.i_h2];
    }
  }

  for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 10; proc_control_B.i_hc++)
  {
    proc_control_B.wtYerr_h = 0.0;
    for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 13; proc_control_B.i_h2
         ++) {
      proc_control_B.obj_objfun_workspace_runtimed_b = 10 * proc_control_B.i_h2
        + proc_control_B.i_hc;
      proc_control_B.obj_objfun_workspace_runtimed_j =
        obj_objfun_workspace_runtimed_2[proc_control_B.obj_objfun_workspace_runtimed_b];
      proc_control_B.wtYerr_g = (proc_control_B.b_X_f[(proc_control_B.i_hc + 1) *
        13 + proc_control_B.i_h2] -
        obj_objfun_workspace_runtimed_1[proc_control_B.obj_objfun_workspace_runtimed_b])
        * proc_control_B.obj_objfun_workspace_runtimed_j;
      proc_control_B.wtYerr_h += proc_control_B.wtYerr_g *
        proc_control_B.wtYerr_g;
      proc_control_B.obj_objfun_workspace_runtimedat[proc_control_B.i_h2] =
        proc_control_B.obj_objfun_workspace_runtimed_j * proc_control_B.wtYerr_g;
    }

    proc_control_B.fs_h += proc_control_B.wtYerr_h;
    for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 13; proc_control_B.i_h2
         ++) {
      proc_control_B.wtYerr_h = 0.0;
      for (proc_control_B.obj_objfun_workspace_runtimed_b = 0;
           proc_control_B.obj_objfun_workspace_runtimed_b < 13;
           proc_control_B.obj_objfun_workspace_runtimed_b++) {
        proc_control_B.wtYerr_h += static_cast<real_T>(c[13 *
          proc_control_B.obj_objfun_workspace_runtimed_b + proc_control_B.i_h2])
          * proc_control_B.obj_objfun_workspace_runtimedat[proc_control_B.obj_objfun_workspace_runtimed_b];
      }

      proc_control_B.gfX_c[proc_control_B.i_h2] = proc_control_B.gfX[
        static_cast<int32_T>(proc_control_B.ix[proc_control_B.i_h2]) - 1] +
        proc_control_B.wtYerr_h;
    }

    for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 13; proc_control_B.i_h2
         ++) {
      proc_control_B.gfX[static_cast<int32_T>
        (proc_control_B.ix[proc_control_B.i_h2]) - 1] =
        proc_control_B.gfX_c[proc_control_B.i_h2];
    }

    for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 13; proc_control_B.i_h2
         ++) {
      proc_control_B.ix[proc_control_B.i_h2] += 13.0;
    }

    std::memcpy(&proc_control_B.umvk_p[0],
                &proc_control_B.b_U_i[proc_control_B.i_hc << 3], sizeof(real_T) <<
                3U);
    if (proc_control_B.i_hc + 1 == 1) {
      for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 8; proc_control_B.i_h2
           ++) {
        proc_control_B.duk_p[proc_control_B.i_h2] =
          proc_control_B.umvk_p[proc_control_B.i_h2] -
          obj_objfun_workspace_runtimed_0[proc_control_B.i_h2];
      }
    } else {
      for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 8; proc_control_B.i_h2
           ++) {
        proc_control_B.duk_p[proc_control_B.i_h2] =
          proc_control_B.umvk_p[proc_control_B.i_h2] - proc_control_B.b_U_i
          [((proc_control_B.i_hc - 1) << 3) + proc_control_B.i_h2];
      }
    }

    for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 8; proc_control_B.i_h2++)
    {
      proc_control_B.obj_objfun_workspace_runtimed_b = 10 * proc_control_B.i_h2
        + proc_control_B.i_hc;
      proc_control_B.obj_objfun_workspace_runtimed_j =
        obj_objfun_workspace_runtimed_3[proc_control_B.obj_objfun_workspace_runtimed_b];
      proc_control_B.wtYerr_h = (proc_control_B.umvk_p[proc_control_B.i_h2] -
        obj_objfun_workspace_runtimed_5[proc_control_B.obj_objfun_workspace_runtimed_b])
        * proc_control_B.obj_objfun_workspace_runtimed_j;
      proc_control_B.gfU_a[proc_control_B.i_h2] = proc_control_B.gfU[
        static_cast<int32_T>(proc_control_B.iu[proc_control_B.i_h2]) - 1] +
        proc_control_B.obj_objfun_workspace_runtimed_j * proc_control_B.wtYerr_h;
      proc_control_B.umvk_p[proc_control_B.i_h2] = proc_control_B.wtYerr_h;
    }

    proc_control_B.wtYerr_h = 0.0;
    proc_control_B.obj_objfun_workspace_runtimed_j = 0.0;
    for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 8; proc_control_B.i_h2++)
    {
      proc_control_B.wtYerr_g = proc_control_B.umvk_p[proc_control_B.i_h2];
      proc_control_B.obj_objfun_workspace_runtime_jz =
        obj_objfun_workspace_runtimed_4[10 * proc_control_B.i_h2 +
        proc_control_B.i_hc];
      proc_control_B.gfU[static_cast<int32_T>
        (proc_control_B.iu[proc_control_B.i_h2]) - 1] =
        proc_control_B.gfU_a[proc_control_B.i_h2];
      proc_control_B.duk_l = proc_control_B.obj_objfun_workspace_runtime_jz *
        proc_control_B.duk_p[proc_control_B.i_h2];
      proc_control_B.wtYerr_h += proc_control_B.wtYerr_g *
        proc_control_B.wtYerr_g;
      proc_control_B.obj_objfun_workspace_runtimed_j += proc_control_B.duk_l *
        proc_control_B.duk_l;
      proc_control_B.umvk_p[proc_control_B.i_h2] =
        proc_control_B.obj_objfun_workspace_runtime_jz * proc_control_B.duk_l;
      proc_control_B.duk_p[proc_control_B.i_h2] = proc_control_B.duk_l;
    }

    proc_control_B.fs_h = (proc_control_B.fs_h + proc_control_B.wtYerr_h) +
      proc_control_B.obj_objfun_workspace_runtimed_j;
    for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 8; proc_control_B.i_h2++)
    {
      proc_control_B.gfU_a[proc_control_B.i_h2] = proc_control_B.gfU[
        static_cast<int32_T>(proc_control_B.iu[proc_control_B.i_h2]) - 1] +
        proc_control_B.umvk_p[proc_control_B.i_h2];
    }

    for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 8; proc_control_B.i_h2++)
    {
      proc_control_B.gfU[static_cast<int32_T>
        (proc_control_B.iu[proc_control_B.i_h2]) - 1] =
        proc_control_B.gfU_a[proc_control_B.i_h2];
    }

    if (proc_control_B.i_hc + 1 > 1) {
      for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 8; proc_control_B.i_h2
           ++) {
        proc_control_B.gfU_tmp[proc_control_B.i_h2] = static_cast<int32_T>
          (proc_control_B.iu[proc_control_B.i_h2] - 8.0);
      }

      for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 8; proc_control_B.i_h2
           ++) {
        proc_control_B.gfU_a[proc_control_B.i_h2] =
          proc_control_B.gfU[proc_control_B.gfU_tmp[proc_control_B.i_h2] - 1] -
          proc_control_B.umvk_p[proc_control_B.i_h2];
      }

      for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 8; proc_control_B.i_h2
           ++) {
        proc_control_B.gfU[proc_control_B.gfU_tmp[proc_control_B.i_h2] - 1] =
          proc_control_B.gfU_a[proc_control_B.i_h2];
      }
    }

    for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 8; proc_control_B.i_h2++)
    {
      proc_control_B.iu[proc_control_B.i_h2] += 8.0;
    }
  }

  *fval = 100000.0 * proc_control_B.e_oc * proc_control_B.e_oc +
    proc_control_B.fs_h;
  for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 24; proc_control_B.i_h2++)
  {
    proc_control_B.wtYerr_h = 0.0;
    proc_control_B.obj_objfun_workspace_runtimed_b = 0;
    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 80; proc_control_B.i_hc
         ++) {
      proc_control_B.wtYerr_h += static_cast<real_T>
        (b[proc_control_B.obj_objfun_workspace_runtimed_b + proc_control_B.i_h2])
        * (2.0 * proc_control_B.gfU[proc_control_B.i_hc]);
      proc_control_B.obj_objfun_workspace_runtimed_b += 24;
    }

    proc_control_B.b_g[proc_control_B.i_h2] = proc_control_B.wtYerr_h;
  }

  for (proc_control_B.i_h2 = 0; proc_control_B.i_h2 < 130; proc_control_B.i_h2++)
  {
    proc_control_B.b_x[proc_control_B.i_h2] = 2.0 *
      proc_control_B.gfX[proc_control_B.i_h2];
  }

  std::memcpy(&proc_control_B.b_x[130], &proc_control_B.b_g[0], 24U * sizeof
              (real_T));
  proc_control_B.b_x[154] = 200000.0 * proc_control_B.e_oc;
  std::memcpy(&grad_workspace_data[0], &proc_control_B.b_x[0], 155U * sizeof
              (real_T));
  if (std::isinf(*fval) || std::isnan(*fval)) {
    if (std::isnan(*fval)) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    *status = proc_contr_checkVectorNonFinite(155, grad_workspace_data, 1);
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
int32_T proc_control::p_checkVectorNonFinite_2JllBqp7(const real_T vec[130])
{
  int32_T idx_current;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = -1;
  while (allFinite && (idx_current + 2 <= 130)) {
    proc_control_B.allFinite_tmp_a = vec[idx_current + 1];
    allFinite = ((!std::isinf(proc_control_B.allFinite_tmp_a)) && (!std::isnan
      (proc_control_B.allFinite_tmp_a)));
    idx_current++;
  }

  if (!allFinite) {
    if (std::isnan(vec[idx_current])) {
      status = -3;
    } else if (vec[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S214>/NLMPC'
int32_T proc_control::proc_contr_checkMatrixNonFinite(int32_T ncols, const
  real_T mat_data[], int32_T col0, int32_T ldm)
{
  int32_T idx_mat;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  proc_control_B.row = -1;
  proc_control_B.col = col0;
  proc_control_B.col_end = (col0 + ncols) - 1;
  while (allFinite && (proc_control_B.col <= proc_control_B.col_end)) {
    proc_control_B.row = -1;
    while (allFinite && (proc_control_B.row + 2 <= 155)) {
      idx_mat = ((proc_control_B.col - 1) * ldm + proc_control_B.row) + 1;
      allFinite = ((!std::isinf(mat_data[idx_mat])) && (!std::isnan
        (mat_data[idx_mat])));
      proc_control_B.row++;
    }

    proc_control_B.col++;
  }

  if (!allFinite) {
    idx_mat = (proc_control_B.col - 2) * ldm + proc_control_B.row;
    if (std::isnan(mat_data[idx_mat])) {
      status = -3;
    } else if (mat_data[idx_mat] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S214>/NLMPC'
int32_T proc_control::computeConstraintsAndUserJacobi(const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[155],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130],
  real_T JacIneqTrans_workspace_data[], int32_T iJI_col, int32_T ldJI, real_T
  JacEqTrans_workspace_data[], int32_T ldJE)
{
  int32_T status;
  if (obj_mCineq > 0) {
    proc_co_eML_blk_kernel_anonFcn2(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_B.a__3_data, proc_control_B.a__3_size, proc_control_B.b_x_a,
      proc_control_B.a__4_data, proc_control_B.a__4_size,
      proc_control_B.JacEqTrans_tmp);
    proc_control_B.b_k_i = 0;
    while (proc_control_B.b_k_i <= obj_mCineq - 1) {
      Cineq_workspace_data[(ineq0 + proc_control_B.b_k_i) - 1] =
        proc_control_B.a__3_data[proc_control_B.b_k_i];
      proc_control_B.b_k_i++;
    }

    std::memcpy(&Ceq_workspace[0], &proc_control_B.b_x_a[0], 130U * sizeof
                (real_T));
    proc_control_B.b_k_i = 0;
    while (proc_control_B.b_k_i <= proc_control_B.a__4_size[0] - 1) {
      proc_control_B.c_idx_col = 0;
      while (proc_control_B.c_idx_col <= proc_control_B.a__4_size[1] - 1) {
        JacIneqTrans_workspace_data[proc_control_B.b_k_i + ldJI * ((iJI_col +
          proc_control_B.c_idx_col) - 1)] =
          proc_control_B.a__4_data[proc_control_B.a__4_size[0] *
          proc_control_B.c_idx_col + proc_control_B.b_k_i];
        proc_control_B.c_idx_col++;
      }

      proc_control_B.b_k_i++;
    }

    for (proc_control_B.b_k_i = 0; proc_control_B.b_k_i < 155;
         proc_control_B.b_k_i++) {
      for (proc_control_B.c_idx_col = 0; proc_control_B.c_idx_col < 130;
           proc_control_B.c_idx_col++) {
        JacEqTrans_workspace_data[proc_control_B.b_k_i + ldJE *
          proc_control_B.c_idx_col] = proc_control_B.JacEqTrans_tmp[155 *
          proc_control_B.c_idx_col + proc_control_B.b_k_i];
      }
    }
  } else {
    proc_co_eML_blk_kernel_anonFcn2(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_B.a__3_data, proc_control_B.a__3_size, proc_control_B.b_x_a,
      proc_control_B.a__4_data, proc_control_B.a__4_size,
      proc_control_B.JacEqTrans_tmp);
    std::memcpy(&Ceq_workspace[0], &proc_control_B.b_x_a[0], 130U * sizeof
                (real_T));
    for (proc_control_B.b_k_i = 0; proc_control_B.b_k_i < 155;
         proc_control_B.b_k_i++) {
      for (proc_control_B.c_idx_col = 0; proc_control_B.c_idx_col < 130;
           proc_control_B.c_idx_col++) {
        JacEqTrans_workspace_data[proc_control_B.b_k_i + ldJE *
          proc_control_B.c_idx_col] = proc_control_B.JacEqTrans_tmp[155 *
          proc_control_B.c_idx_col + proc_control_B.b_k_i];
      }
    }
  }

  status = proc_contr_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
    ineq0);
  if (status == 1) {
    status = p_checkVectorNonFinite_2JllBqp7(Ceq_workspace);
    if (status == 1) {
      status = proc_contr_checkMatrixNonFinite(obj_mCineq,
        JacIneqTrans_workspace_data, iJI_col, ldJI);
      if (status == 1) {
        status = proc_contr_checkMatrixNonFinite(130, JacEqTrans_workspace_data,
          1, ldJE);
      }
    }
  }

  return status;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::evalObjAndConstrAndDerivatives(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[155],
  real_T grad_workspace_data[], real_T Cineq_workspace_data[], int32_T ineq0,
  real_T Ceq_workspace[130], real_T JacIneqTrans_workspace_data[], int32_T
  iJI_col, int32_T ldJI, real_T JacEqTrans_workspace_data[], int32_T ldJE,
  real_T *fval, int32_T *status)
{
  computeObjectiveAndUserGradient(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x,
    grad_workspace_data, fval, status);
  if (*status == 1) {
    *status = computeConstraintsAndUserJacobi(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1,
      obj_mCineq, x, Cineq_workspace_data, ineq0, Ceq_workspace,
      JacIneqTrans_workspace_data, iJI_col, ldJI, JacEqTrans_workspace_data,
      ldJE);
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_c_updateWorkingSetForNewQP(const real_T xk[155],
  s_YaC65yvYSxJoOs4cRNYgnE_proc_T *WorkingSet, int32_T mIneq, const real_T
  cIneq_data[], const real_T cEq[130], int32_T mLB, const real_T lb[155],
  int32_T mUB, int32_T mFixed)
{
  int32_T iEq0;
  proc_control_B.iw0_e = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (int32_T b_idx{0}; b_idx < 130; b_idx++) {
    WorkingSet->beq[b_idx] = -cEq[b_idx];
    WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
    std::memcpy(&WorkingSet->ATwset.data[proc_control_B.iw0_e],
                &WorkingSet->Aeq.data[iEq0], 155U * sizeof(real_T));
    proc_control_B.iw0_e += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (int32_T b_idx{0}; b_idx < mIneq; b_idx++) {
    WorkingSet->bineq.data[b_idx] = -cIneq_data[b_idx];
  }

  for (int32_T b_idx{0}; b_idx < mLB; b_idx++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[b_idx] - 1] = -lb
      [WorkingSet->indexLB.data[b_idx] - 1] + xk[WorkingSet->indexLB.data[b_idx]
      - 1];
  }

  for (int32_T b_idx{0}; b_idx < mUB; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[b_idx] - 1];
  }

  for (int32_T b_idx{0}; b_idx < mFixed; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[b_idx] - 1];
    WorkingSet->bwset.data[b_idx] = (rtInf) - xk[WorkingSet->
      indexFixed.data[b_idx] - 1];
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_co_modifyOverheadPhaseOne_
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj)
{
  for (int32_T idx{0}; idx < obj->sizes[0]; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * idx) - 1] = 0.0;
  }

  for (int32_T idx{0}; idx < 130; idx++) {
    proc_control_B.idxEq = (obj->ldA * idx + obj->nVar) - 1;
    obj->Aeq.data[proc_control_B.idxEq] = 0.0;
    obj->ATwset.data[proc_control_B.idxEq + obj->ldA * (obj->isActiveIdx[1] - 1)]
      = 0.0;
  }

  for (int32_T idx{0}; idx < obj->sizes[2]; idx++) {
    obj->Aineq.data[(obj->nVar + obj->ldA * idx) - 1] = -1.0;
  }

  obj->indexLB.data[obj->sizes[3] - 1] = obj->nVar;
  obj->lb.data[obj->nVar - 1] = 1.0E-5;
  for (int32_T idx{obj->isActiveIdx[2]}; idx <= obj->nActiveConstr; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * (idx - 1)) - 1] = -1.0;
  }

  if (obj->nWConstr[4] > 0) {
    for (int32_T idx{0}; idx <= obj->sizesNormal[4]; idx++) {
      obj->isActiveConstr.data[(obj->isActiveIdx[4] + idx) - 1] = false;
    }
  }

  obj->isActiveConstr.data[obj->isActiveIdx[4] - 2] = false;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_setProblemType(s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *obj, int32_T PROBLEM_TYPE)
{
  switch (PROBLEM_TYPE) {
   case 3:
    obj->nVar = 155;
    obj->mConstr = obj->mConstrOrig;
    if (obj->nWConstr[4] > 0) {
      proc_control_B.mIneq_c = -1;
      while (proc_control_B.mIneq_c + 1 <= obj->sizesNormal[4] - 1) {
        obj->isActiveConstr.data[obj->isActiveIdxNormal[4] +
          proc_control_B.mIneq_c] = obj->isActiveConstr.data[obj->isActiveIdx[4]
          + proc_control_B.mIneq_c];
        proc_control_B.mIneq_c++;
      }
    }

    for (proc_control_B.d_idx_row = 0; proc_control_B.d_idx_row < 5;
         proc_control_B.d_idx_row++) {
      obj->sizes[proc_control_B.d_idx_row] = obj->
        sizesNormal[proc_control_B.d_idx_row];
    }

    for (proc_control_B.d_idx_row = 0; proc_control_B.d_idx_row < 6;
         proc_control_B.d_idx_row++) {
      obj->isActiveIdx[proc_control_B.d_idx_row] = obj->
        isActiveIdxNormal[proc_control_B.d_idx_row];
    }
    break;

   case 1:
    obj->nVar = 156;
    obj->mConstr = obj->mConstrOrig + 1;
    for (proc_control_B.d_idx_row = 0; proc_control_B.d_idx_row < 5;
         proc_control_B.d_idx_row++) {
      obj->sizes[proc_control_B.d_idx_row] = obj->
        sizesPhaseOne[proc_control_B.d_idx_row];
    }

    for (proc_control_B.d_idx_row = 0; proc_control_B.d_idx_row < 6;
         proc_control_B.d_idx_row++) {
      obj->isActiveIdx[proc_control_B.d_idx_row] = obj->
        isActiveIdxPhaseOne[proc_control_B.d_idx_row];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    break;

   case 2:
    obj->nVar = obj->nVarMax - 1;
    obj->mConstr = obj->mConstrMax - 1;
    for (proc_control_B.d_idx_row = 0; proc_control_B.d_idx_row < 5;
         proc_control_B.d_idx_row++) {
      obj->sizes[proc_control_B.d_idx_row] = obj->
        sizesRegularized[proc_control_B.d_idx_row];
    }

    if (obj->probType != 4) {
      proc_control_B.mIneq_c = obj->sizes[2] + 156;
      proc_control_B.c_idx = 0;
      while (proc_control_B.c_idx <= obj->sizes[0] - 1) {
        proc_control_B.colOffsetATw = obj->ldA * proc_control_B.c_idx;
        proc_control_B.colOffsetAeq = 156;
        while (proc_control_B.colOffsetAeq <= obj->nVar) {
          obj->ATwset.data[(proc_control_B.colOffsetAeq +
                            proc_control_B.colOffsetATw) - 1] = 0.0;
          proc_control_B.colOffsetAeq++;
        }

        proc_control_B.c_idx++;
      }

      proc_control_B.colOffsetATw = 0;
      while (proc_control_B.colOffsetATw <= proc_control_B.mIneq_c - 157) {
        proc_control_B.c_idx = obj->ldA * proc_control_B.colOffsetATw - 1;
        proc_control_B.d_idx_row = 156;
        while (proc_control_B.d_idx_row <= proc_control_B.colOffsetATw + 155) {
          obj->Aineq.data[proc_control_B.d_idx_row + proc_control_B.c_idx] = 0.0;
          proc_control_B.d_idx_row++;
        }

        obj->Aineq.data[(proc_control_B.colOffsetATw + proc_control_B.c_idx) +
          156] = -1.0;
        proc_control_B.colOffsetAeq = proc_control_B.colOffsetATw + 157;
        while (proc_control_B.colOffsetAeq <= obj->nVar) {
          obj->Aineq.data[proc_control_B.colOffsetAeq + proc_control_B.c_idx] =
            0.0;
          proc_control_B.colOffsetAeq++;
        }

        proc_control_B.colOffsetATw++;
      }

      for (proc_control_B.c_idx = 0; proc_control_B.c_idx < 130;
           proc_control_B.c_idx++) {
        proc_control_B.colOffsetAeq = obj->ldA * proc_control_B.c_idx - 1;
        proc_control_B.colOffsetATw = (obj->isActiveIdx[1] - 1) * obj->ldA +
          proc_control_B.colOffsetAeq;
        proc_control_B.d_idx_row = 156;
        while (proc_control_B.d_idx_row <= proc_control_B.mIneq_c - 1) {
          obj->Aeq.data[proc_control_B.d_idx_row + proc_control_B.colOffsetAeq] =
            0.0;
          obj->ATwset.data[proc_control_B.d_idx_row +
            proc_control_B.colOffsetATw] = 0.0;
          proc_control_B.d_idx_row++;
        }

        proc_control_B.d_idx_row = proc_control_B.mIneq_c;
        proc_control_B.b_tmp_f = proc_control_B.mIneq_c + proc_control_B.c_idx;
        while (proc_control_B.d_idx_row <= proc_control_B.b_tmp_f - 1) {
          obj->Aeq.data[proc_control_B.d_idx_row + proc_control_B.colOffsetAeq] =
            0.0;
          obj->ATwset.data[proc_control_B.d_idx_row +
            proc_control_B.colOffsetATw] = 0.0;
          proc_control_B.d_idx_row++;
        }

        obj->Aeq.data[proc_control_B.b_tmp_f + proc_control_B.colOffsetAeq] =
          -1.0;
        obj->ATwset.data[proc_control_B.b_tmp_f + proc_control_B.colOffsetATw] =
          -1.0;
        proc_control_B.d_idx_row = proc_control_B.b_tmp_f + 1;
        while (proc_control_B.d_idx_row <= proc_control_B.mIneq_c + 129) {
          obj->Aeq.data[proc_control_B.d_idx_row + proc_control_B.colOffsetAeq] =
            0.0;
          obj->ATwset.data[proc_control_B.d_idx_row +
            proc_control_B.colOffsetATw] = 0.0;
          proc_control_B.d_idx_row++;
        }

        proc_control_B.d_idx_row = proc_control_B.mIneq_c + 130;
        proc_control_B.b_tmp_f = proc_control_B.mIneq_c + proc_control_B.c_idx;
        while (proc_control_B.d_idx_row <= proc_control_B.b_tmp_f + 129) {
          obj->Aeq.data[proc_control_B.d_idx_row + proc_control_B.colOffsetAeq] =
            0.0;
          obj->ATwset.data[proc_control_B.d_idx_row +
            proc_control_B.colOffsetATw] = 0.0;
          proc_control_B.d_idx_row++;
        }

        obj->Aeq.data[((proc_control_B.mIneq_c + proc_control_B.c_idx) +
                       proc_control_B.colOffsetAeq) + 130] = 1.0;
        proc_control_B.d_idx_row = proc_control_B.mIneq_c + proc_control_B.c_idx;
        obj->ATwset.data[(proc_control_B.d_idx_row + proc_control_B.colOffsetATw)
          + 130] = 1.0;
        proc_control_B.d_idx_row += 131;
        while (proc_control_B.d_idx_row <= obj->nVar) {
          obj->Aeq.data[proc_control_B.d_idx_row + proc_control_B.colOffsetAeq] =
            0.0;
          obj->ATwset.data[proc_control_B.d_idx_row +
            proc_control_B.colOffsetATw] = 0.0;
          proc_control_B.d_idx_row++;
        }
      }

      proc_control_B.colOffsetATw = 155;
      proc_control_B.c_idx = obj->sizesNormal[3];
      while (proc_control_B.c_idx + 1 <= obj->sizesRegularized[3]) {
        proc_control_B.colOffsetATw++;
        obj->indexLB.data[proc_control_B.c_idx] = proc_control_B.colOffsetATw;
        proc_control_B.c_idx++;
      }

      if (obj->nWConstr[4] > 0) {
        proc_control_B.colOffsetATw = -1;
        while (proc_control_B.colOffsetATw + 1 <= obj->sizesRegularized[4] - 1)
        {
          obj->isActiveConstr.data[(obj->isActiveIdxRegularized[4] +
            proc_control_B.colOffsetATw) + 1] = obj->isActiveConstr.data
            [obj->isActiveIdx[4] + proc_control_B.colOffsetATw];
          proc_control_B.colOffsetATw++;
        }
      }

      proc_control_B.colOffsetATw = obj->isActiveIdx[4];
      while (proc_control_B.colOffsetATw <= obj->isActiveIdxRegularized[4] - 1)
      {
        obj->isActiveConstr.data[proc_control_B.colOffsetATw - 1] = false;
        proc_control_B.colOffsetATw++;
      }

      proc_control_B.colOffsetATw = 156;
      while (proc_control_B.colOffsetATw <= proc_control_B.mIneq_c + 259) {
        obj->lb.data[proc_control_B.colOffsetATw - 1] = 0.0;
        proc_control_B.colOffsetATw++;
      }

      proc_control_B.mIneq_c = obj->isActiveIdx[2] - 1;
      while (proc_control_B.mIneq_c + 1 <= obj->nActiveConstr) {
        proc_control_B.colOffsetATw = obj->ldA * proc_control_B.mIneq_c - 1;
        if (obj->Wid.data[proc_control_B.mIneq_c] == 3) {
          proc_control_B.c_idx = 156;
          while (proc_control_B.c_idx <= obj->
                 Wlocalidx.data[proc_control_B.mIneq_c] + 154) {
            obj->ATwset.data[proc_control_B.c_idx + proc_control_B.colOffsetATw]
              = 0.0;
            proc_control_B.c_idx++;
          }

          obj->ATwset.data[(obj->Wlocalidx.data[proc_control_B.mIneq_c] +
                            proc_control_B.colOffsetATw) + 155] = -1.0;
          proc_control_B.c_idx = obj->Wlocalidx.data[proc_control_B.mIneq_c] +
            156;
          while (proc_control_B.c_idx <= obj->nVar) {
            obj->ATwset.data[proc_control_B.c_idx + proc_control_B.colOffsetATw]
              = 0.0;
            proc_control_B.c_idx++;
          }
        } else {
          proc_control_B.c_idx = 156;
          while (proc_control_B.c_idx <= obj->nVar) {
            obj->ATwset.data[proc_control_B.c_idx + proc_control_B.colOffsetATw]
              = 0.0;
            proc_control_B.c_idx++;
          }
        }

        proc_control_B.mIneq_c++;
      }
    }

    for (proc_control_B.d_idx_row = 0; proc_control_B.d_idx_row < 6;
         proc_control_B.d_idx_row++) {
      obj->isActiveIdx[proc_control_B.d_idx_row] = obj->
        isActiveIdxRegularized[proc_control_B.d_idx_row];
    }
    break;

   default:
    obj->nVar = obj->nVarMax;
    obj->mConstr = obj->mConstrMax;
    for (proc_control_B.d_idx_row = 0; proc_control_B.d_idx_row < 5;
         proc_control_B.d_idx_row++) {
      obj->sizes[proc_control_B.d_idx_row] = obj->
        sizesRegPhaseOne[proc_control_B.d_idx_row];
    }

    for (proc_control_B.d_idx_row = 0; proc_control_B.d_idx_row < 6;
         proc_control_B.d_idx_row++) {
      obj->isActiveIdx[proc_control_B.d_idx_row] = obj->
        isActiveIdxRegPhaseOne[proc_control_B.d_idx_row];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    break;
  }

  obj->probType = PROBLEM_TYPE;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_initActiveSet(s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *obj)
{
  proc_control_setProblemType(obj, 3);
  proc_control_B.nWFixed = obj->isActiveIdx[2];
  while (proc_control_B.nWFixed <= obj->mConstrMax) {
    obj->isActiveConstr.data[proc_control_B.nWFixed - 1] = false;
    proc_control_B.nWFixed++;
  }

  obj->nWConstr[0] = obj->sizes[0];
  obj->nWConstr[1] = 130;
  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + 130;
  proc_control_B.nWFixed = obj->sizes[0];
  proc_control_B.b_idx_local = 0;
  while (proc_control_B.b_idx_local <= proc_control_B.nWFixed - 1) {
    obj->Wid.data[proc_control_B.b_idx_local] = 1;
    obj->Wlocalidx.data[proc_control_B.b_idx_local] = proc_control_B.b_idx_local
      + 1;
    obj->isActiveConstr.data[proc_control_B.b_idx_local] = true;
    proc_control_B.iAeq0 = obj->ldA * proc_control_B.b_idx_local - 1;
    proc_control_B.iATw0 = 0;
    while (proc_control_B.iATw0 <= obj->
           indexFixed.data[proc_control_B.b_idx_local] - 2) {
      obj->ATwset.data[(proc_control_B.iATw0 + proc_control_B.iAeq0) + 1] = 0.0;
      proc_control_B.iATw0++;
    }

    obj->ATwset.data[obj->indexFixed.data[proc_control_B.b_idx_local] +
      proc_control_B.iAeq0] = 1.0;
    proc_control_B.iATw0 = obj->indexFixed.data[proc_control_B.b_idx_local] + 1;
    while (proc_control_B.iATw0 <= obj->nVar) {
      obj->ATwset.data[proc_control_B.iATw0 + proc_control_B.iAeq0] = 0.0;
      proc_control_B.iATw0++;
    }

    obj->bwset.data[proc_control_B.b_idx_local] = obj->ub.data
      [obj->indexFixed.data[proc_control_B.b_idx_local] - 1];
    proc_control_B.b_idx_local++;
  }

  for (proc_control_B.b_idx_local = 0; proc_control_B.b_idx_local < 130;
       proc_control_B.b_idx_local++) {
    proc_control_B.idx_global = proc_control_B.nWFixed +
      proc_control_B.b_idx_local;
    obj->Wid.data[proc_control_B.idx_global] = 2;
    obj->Wlocalidx.data[proc_control_B.idx_global] = proc_control_B.b_idx_local
      + 1;
    obj->isActiveConstr.data[proc_control_B.idx_global] = true;
    proc_control_B.iAeq0 = obj->ldA * proc_control_B.b_idx_local;
    proc_control_B.iATw0 = obj->ldA * proc_control_B.idx_global;
    proc_control_B.c_i = 0;
    while (proc_control_B.c_i <= obj->nVar - 1) {
      obj->ATwset.data[proc_control_B.iATw0 + proc_control_B.c_i] =
        obj->Aeq.data[proc_control_B.iAeq0 + proc_control_B.c_i];
      proc_control_B.c_i++;
    }

    obj->bwset.data[proc_control_B.idx_global] = obj->
      beq[proc_control_B.b_idx_local];
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_contro_factoryConstruct_ln(int32_T maxRows, int32_T
  maxCols, int32_T *obj_ldq, int32_T obj_QR_size[2], real_T obj_Q_data[],
  int32_T obj_Q_size[2], int32_T obj_jpvt_data[], int32_T *obj_jpvt_size,
  int32_T *obj_mrows, int32_T *obj_ncols, int32_T *obj_tau_size, int32_T
  *obj_minRowCol, boolean_T *obj_usedPivoting)
{
  int32_T loop_ub;
  *obj_ldq = maxRows;
  obj_QR_size[0] = maxRows;
  obj_QR_size[1] = maxCols;
  obj_Q_size[0] = maxRows;
  obj_Q_size[1] = maxRows;
  loop_ub = maxRows * maxRows - 1;
  if (loop_ub >= 0) {
    std::memset(&obj_Q_data[0], 0, (loop_ub + 1) * sizeof(real_T));
  }

  *obj_jpvt_size = maxCols;
  if (maxCols - 1 >= 0) {
    std::memset(&obj_jpvt_data[0], 0, maxCols * sizeof(int32_T));
  }

  *obj_mrows = 0;
  *obj_ncols = 0;
  if (maxRows <= maxCols) {
    *obj_tau_size = maxRows;
  } else {
    *obj_tau_size = maxCols;
  }

  *obj_minRowCol = 0;
  *obj_usedPivoting = false;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_contr_factoryConstruct_lnz(int32_T MaxDims, int32_T
  obj_FMat_size[2], int32_T *obj_ldm, int32_T *obj_ndims, int32_T *obj_info,
  real_T *obj_scaleFactor, boolean_T *obj_ConvexCheck, real_T *obj_regTol_,
  real_T *obj_workspace_, real_T *obj_workspace2_)
{
  obj_FMat_size[0] = MaxDims;
  obj_FMat_size[1] = MaxDims;
  *obj_ldm = MaxDims;
  *obj_ndims = 0;
  *obj_info = 0;
  *obj_scaleFactor = 0.0;
  *obj_ConvexCheck = true;
  *obj_regTol_ = (rtInf);
  *obj_workspace_ = (rtInf);
  *obj_workspace2_ = (rtInf);
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemv(int32_T m, int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  if (n != 0) {
    proc_control_B.ix_fp = ix0;
    proc_control_B.b_f = (n - 1) * lda + 1;
    proc_control_B.iac_bn = 1;
    while (((lda > 0) && (proc_control_B.iac_bn <= proc_control_B.b_f)) || ((lda
             < 0) && (proc_control_B.iac_bn >= proc_control_B.b_f))) {
      proc_control_B.iy_co = 0;
      proc_control_B.c_de = (proc_control_B.iac_bn + m) - 1;
      for (int32_T ia{proc_control_B.iac_bn}; ia <= proc_control_B.c_de; ia++) {
        y_data[proc_control_B.iy_co] += A_data[ia - 1] *
          x_data[proc_control_B.ix_fp - 1];
        proc_control_B.iy_co++;
      }

      proc_control_B.ix_fp++;
      proc_control_B.iac_bn += lda;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_computeGradLag(real_T workspace_data[], int32_T
  ldA, int32_T nVar, const real_T grad_data[], int32_T mIneq, const real_T
  AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
  proc_control_B.iL0_b = 0;
  while (proc_control_B.iL0_b <= nVar - 1) {
    workspace_data[proc_control_B.iL0_b] = grad_data[proc_control_B.iL0_b];
    proc_control_B.iL0_b++;
  }

  proc_control_B.iL0_b = 0;
  while (proc_control_B.iL0_b <= mFixed - 1) {
    workspace_data[finiteFixed_data[proc_control_B.iL0_b] - 1] +=
      lambda_data[proc_control_B.iL0_b];
    proc_control_B.iL0_b++;
  }

  proc_control_xgemv(nVar, 130, AeqTrans_data, ldA, lambda_data, mFixed + 1,
                     workspace_data);
  proc_control_xgemv(nVar, mIneq, AineqTrans_data, ldA, lambda_data, mFixed +
                     131, workspace_data);
  proc_control_B.iL0_b = (mFixed + mIneq) + 130;
  proc_control_B.c_idx_j = 0;
  while (proc_control_B.c_idx_j <= mLB - 1) {
    workspace_data[finiteLB_data[proc_control_B.c_idx_j] - 1] -=
      lambda_data[proc_control_B.iL0_b];
    proc_control_B.iL0_b++;
    proc_control_B.c_idx_j++;
  }

  proc_control_B.c_idx_j = 0;
  while (proc_control_B.c_idx_j <= mUB - 1) {
    workspace_data[finiteUB_data[proc_control_B.c_idx_j] - 1] +=
      lambda_data[proc_control_B.iL0_b];
    proc_control_B.iL0_b++;
    proc_control_B.c_idx_j++;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
real_T proc_control::proc_con_computePrimalFeasError(const real_T x[155],
  int32_T mLinIneq, int32_T mNonlinIneq, const real_T cIneq_data[], const real_T
  cEq[130], const int32_T finiteLB_data[], int32_T mLB, const real_T lb[155],
  const int32_T finiteUB_data[], int32_T mUB)
{
  real_T feasError;
  feasError = 0.0;
  proc_control_B.mIneq_a = mNonlinIneq + mLinIneq;
  for (int32_T idx{0}; idx < 130; idx++) {
    feasError = std::fmax(feasError, std::abs(cEq[idx]));
  }

  for (int32_T idx{0}; idx < proc_control_B.mIneq_a; idx++) {
    feasError = std::fmax(feasError, cIneq_data[idx]);
  }

  proc_control_B.mIneq_a = 0;
  while (proc_control_B.mIneq_a <= mLB - 1) {
    feasError = std::fmax(feasError, lb[finiteLB_data[proc_control_B.mIneq_a] -
                          1] - x[finiteLB_data[proc_control_B.mIneq_a] - 1]);
    proc_control_B.mIneq_a++;
  }

  proc_control_B.mIneq_a = 0;
  while (proc_control_B.mIneq_a <= mUB - 1) {
    feasError = std::fmax(feasError, x[finiteUB_data[proc_control_B.mIneq_a] - 1]
                          - (rtInf));
    proc_control_B.mIneq_a++;
  }

  return feasError;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_contr_computeDualFeasError(int32_T nVar, const real_T
  gradLag_data[], boolean_T *gradOK, real_T *val)
{
  int32_T b_idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!std::isinf(gradLag_data[b_idx])) && (!std::isnan
                (gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      *val = std::fmax(*val, std::abs(gradLag_data[b_idx]));
      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_saveJacobian(s_SfTiiT1KRClFcMCE02xJjB_proc_T
  *obj, int32_T nVar, int32_T mIneq, const real_T JacCineqTrans_data[], int32_T
  ineqCol0, const real_T JacCeqTrans_data[], int32_T ldJ)
{
  proc_control_B.iCol = (ineqCol0 - 1) * ldJ;
  proc_control_B.iCol_old = -1;
  proc_control_B.b_d = mIneq - ineqCol0;
  proc_control_B.idx_col_d = 0;
  while (proc_control_B.idx_col_d <= proc_control_B.b_d) {
    int32_T loop_ub_tmp;
    proc_control_B.y_size_idx_0_j = obj->JacCineqTrans_old.size[0];
    proc_control_B.y_size_idx_1 = obj->JacCineqTrans_old.size[1];
    loop_ub_tmp = obj->JacCineqTrans_old.size[0] * obj->JacCineqTrans_old.size[1];
    if (loop_ub_tmp - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data[0], &obj->JacCineqTrans_old.data[0],
                  loop_ub_tmp * sizeof(real_T));
    }

    for (loop_ub_tmp = 1; loop_ub_tmp - 1 < nVar; loop_ub_tmp++) {
      proc_control_B.y_data[proc_control_B.iCol_old + loop_ub_tmp] =
        JacCineqTrans_data[(proc_control_B.iCol + loop_ub_tmp) - 1];
    }

    obj->JacCineqTrans_old.size[1] = proc_control_B.y_size_idx_1;
    proc_control_B.y_size_idx_0_j *= proc_control_B.y_size_idx_1;
    if (proc_control_B.y_size_idx_0_j - 1 >= 0) {
      std::memcpy(&obj->JacCineqTrans_old.data[0], &proc_control_B.y_data[0],
                  proc_control_B.y_size_idx_0_j * sizeof(real_T));
    }

    proc_control_B.iCol += ldJ;
    proc_control_B.iCol_old += ldJ;
    proc_control_B.idx_col_d++;
  }

  proc_control_B.iCol = -1;
  proc_control_B.iCol_old = -1;
  for (proc_control_B.b_d = 0; proc_control_B.b_d < 130; proc_control_B.b_d++) {
    proc_control_B.idx_col_d = 1;
    while (proc_control_B.idx_col_d - 1 <= nVar - 1) {
      obj->JacCeqTrans_old.data[proc_control_B.iCol_old +
        proc_control_B.idx_col_d] = JacCeqTrans_data[proc_control_B.iCol +
        proc_control_B.idx_col_d];
      proc_control_B.idx_col_d++;
    }

    proc_control_B.iCol += ldJ;
    proc_control_B.iCol_old += ldJ;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_saveState(s_SfTiiT1KRClFcMCE02xJjB_proc_T *obj)
{
  int32_T y_size_idx_0;
  obj->sqpFval_old = obj->sqpFval;
  for (proc_control_B.k_mk = 0; proc_control_B.k_mk < 155; proc_control_B.k_mk++)
  {
    obj->xstarsqp_old[proc_control_B.k_mk] = obj->xstarsqp[proc_control_B.k_mk];
    obj->grad_old.data[proc_control_B.k_mk] = obj->grad.data[proc_control_B.k_mk];
  }

  y_size_idx_0 = obj->cIneq_old.size;
  proc_control_B.k_mk = obj->cIneq_old.size;
  if (proc_control_B.k_mk - 1 >= 0) {
    std::memcpy(&proc_control_B.y_data_j[0], &obj->cIneq_old.data[0],
                proc_control_B.k_mk * sizeof(real_T));
  }

  proc_control_B.k_mk = 0;
  while (proc_control_B.k_mk <= obj->mIneq - 1) {
    proc_control_B.y_data_j[proc_control_B.k_mk] = obj->
      cIneq.data[proc_control_B.k_mk];
    proc_control_B.k_mk++;
  }

  if (y_size_idx_0 - 1 >= 0) {
    std::memcpy(&obj->cIneq_old.data[0], &proc_control_B.y_data_j[0],
                y_size_idx_0 * sizeof(real_T));
  }

  std::memcpy(&obj->cEq_old[0], &obj->cEq[0], 130U * sizeof(real_T));
}

// Function for MATLAB Function: '<S214>/NLMPC'
real_T proc_control::proc_control_computeComplError(const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  const real_T xCurrent[155], int32_T mIneq, const real_T cIneq_data[], const
  int32_T finiteLB_data[], int32_T mLB, const real_T lb[155], const int32_T
  finiteUB_data[], int32_T mUB, const real_T lambda_data[], int32_T iL0)
{
  real_T nlpComplError;
  nlpComplError = 0.0;
  proc_control_B.mLinIneq_k = *fscales_lineq_constraint_size - 1;
  if ((mIneq + mLB) + mUB > 0) {
    int32_T lbOffset;
    proc_control_B.iLineq0 = 0;
    while (proc_control_B.iLineq0 <= proc_control_B.mLinIneq_k) {
      proc_control_B.lbLambda = lambda_data[(iL0 + proc_control_B.iLineq0) - 1];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs
        (proc_control_B.lbLambda * cIneq_data[proc_control_B.iLineq0]), std::
        fmin(std::abs(cIneq_data[proc_control_B.iLineq0]),
             proc_control_B.lbLambda)));
      proc_control_B.iLineq0++;
    }

    proc_control_B.iLineq0 = (iL0 + *fscales_lineq_constraint_size) - 2;
    for (lbOffset = 1; lbOffset - 1 < *fscales_cineq_constraint_size; lbOffset++)
    {
      proc_control_B.lbLambda = lambda_data[proc_control_B.iLineq0 + lbOffset];
      proc_control_B.ubLambda = cIneq_data[proc_control_B.mLinIneq_k + lbOffset];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs
        (proc_control_B.ubLambda * proc_control_B.lbLambda), std::fmin(std::abs
        (proc_control_B.ubLambda), proc_control_B.lbLambda)));
    }

    lbOffset = (iL0 + mIneq) - 1;
    proc_control_B.mLinIneq_k = lbOffset + mLB;
    proc_control_B.iLineq0 = 0;
    while (proc_control_B.iLineq0 <= mLB - 1) {
      proc_control_B.ubLambda = xCurrent[finiteLB_data[proc_control_B.iLineq0] -
        1] - lb[finiteLB_data[proc_control_B.iLineq0] - 1];
      proc_control_B.lbLambda = lambda_data[lbOffset + proc_control_B.iLineq0];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs
        (proc_control_B.ubLambda * proc_control_B.lbLambda), std::fmin(std::abs
        (proc_control_B.ubLambda), proc_control_B.lbLambda)));
      proc_control_B.iLineq0++;
    }

    for (lbOffset = 0; lbOffset < mUB; lbOffset++) {
      proc_control_B.ubLambda = lambda_data[proc_control_B.mLinIneq_k + lbOffset];
      proc_control_B.lbLambda = (rtInf) - xCurrent[finiteUB_data[lbOffset] - 1];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs
        (proc_control_B.lbLambda * proc_control_B.ubLambda), std::fmin
        (proc_control_B.lbLambda, proc_control_B.ubLambda)));
    }
  }

  return nlpComplError;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemv_m(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  if (n != 0) {
    proc_control_B.ix_f4 = ix0;
    proc_control_B.b_l = (n - 1) * lda + 1;
    proc_control_B.iac_e3 = 1;
    while (((lda > 0) && (proc_control_B.iac_e3 <= proc_control_B.b_l)) || ((lda
             < 0) && (proc_control_B.iac_e3 >= proc_control_B.b_l))) {
      proc_control_B.iy_o3 = 0;
      proc_control_B.c_gn = (proc_control_B.iac_e3 + m) - 1;
      for (int32_T ia{proc_control_B.iac_e3}; ia <= proc_control_B.c_gn; ia++) {
        y_data[proc_control_B.iy_o3] += A_data[ia - 1] *
          x_data[proc_control_B.ix_f4 - 1];
        proc_control_B.iy_o3++;
      }

      proc_control_B.ix_f4++;
      proc_control_B.iac_e3 += lda;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_computeGradLag_b(real_T workspace_data[],
  int32_T ldA, int32_T nVar, const real_T grad_data[], int32_T mIneq, const
  real_T AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
  proc_control_B.iL0 = 0;
  while (proc_control_B.iL0 <= nVar - 1) {
    workspace_data[proc_control_B.iL0] = grad_data[proc_control_B.iL0];
    proc_control_B.iL0++;
  }

  proc_control_B.iL0 = 0;
  while (proc_control_B.iL0 <= mFixed - 1) {
    workspace_data[finiteFixed_data[proc_control_B.iL0] - 1] +=
      lambda_data[proc_control_B.iL0];
    proc_control_B.iL0++;
  }

  proc_control_xgemv_m(nVar, 130, AeqTrans_data, ldA, lambda_data, mFixed + 1,
                       workspace_data);
  proc_control_xgemv_m(nVar, mIneq, AineqTrans_data, ldA, lambda_data, mFixed +
                       131, workspace_data);
  proc_control_B.iL0 = (mFixed + mIneq) + 130;
  proc_control_B.c_idx_o = 0;
  while (proc_control_B.c_idx_o <= mLB - 1) {
    workspace_data[finiteLB_data[proc_control_B.c_idx_o] - 1] -=
      lambda_data[proc_control_B.iL0];
    proc_control_B.iL0++;
    proc_control_B.c_idx_o++;
  }

  proc_control_B.c_idx_o = 0;
  while (proc_control_B.c_idx_o <= mUB - 1) {
    workspace_data[finiteUB_data[proc_control_B.c_idx_o] - 1] +=
      lambda_data[proc_control_B.iL0];
    proc_control_B.iL0++;
    proc_control_B.c_idx_o++;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_con_computeDualFeasError_b(int32_T nVar, const real_T
  gradLag_data[], boolean_T *gradOK, real_T *val)
{
  int32_T b_idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!std::isinf(gradLag_data[b_idx])) && (!std::isnan
                (gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      *val = std::fmax(*val, std::abs(gradLag_data[b_idx]));
      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_updateWorkingSetForNewQP_l(const real_T xk[155],
  s_YaC65yvYSxJoOs4cRNYgnE_proc_T *WorkingSet, int32_T mIneq, int32_T
  mNonlinIneq, const real_T cIneq_data[], const real_T cEq[130], int32_T mLB,
  const real_T lb[155], int32_T mUB, int32_T mFixed)
{
  proc_control_B.nVar_d = WorkingSet->nVar - 1;
  proc_control_B.iw0 = WorkingSet->ldA * mFixed;
  proc_control_B.iEq0 = 0;
  for (proc_control_B.b_idx_f = 0; proc_control_B.b_idx_f < 130;
       proc_control_B.b_idx_f++) {
    WorkingSet->beq[proc_control_B.b_idx_f] = -cEq[proc_control_B.b_idx_f];
    WorkingSet->bwset.data[mFixed + proc_control_B.b_idx_f] = WorkingSet->
      beq[proc_control_B.b_idx_f];
    for (int32_T i{0}; i <= proc_control_B.nVar_d; i++) {
      WorkingSet->ATwset.data[proc_control_B.iw0 + i] = WorkingSet->
        Aeq.data[proc_control_B.iEq0 + i];
    }

    proc_control_B.iw0 += WorkingSet->ldA;
    proc_control_B.iEq0 += WorkingSet->ldA;
  }

  proc_control_B.iw0 = 0;
  while (proc_control_B.iw0 <= mIneq - 1) {
    WorkingSet->bineq.data[proc_control_B.iw0] = -cIneq_data[proc_control_B.iw0];
    proc_control_B.iw0++;
  }

  proc_control_B.iw0 = 0;
  while (proc_control_B.iw0 <= mLB - 1) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[proc_control_B.iw0] - 1] =
      -lb[WorkingSet->indexLB.data[proc_control_B.iw0] - 1] + xk
      [WorkingSet->indexLB.data[proc_control_B.iw0] - 1];
    proc_control_B.iw0++;
  }

  proc_control_B.iw0 = 0;
  while (proc_control_B.iw0 <= mUB - 1) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[proc_control_B.iw0] - 1] =
      (rtInf) - xk[WorkingSet->indexUB.data[proc_control_B.iw0] - 1];
    proc_control_B.iw0++;
  }

  proc_control_B.iw0 = 0;
  while (proc_control_B.iw0 <= mFixed - 1) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[proc_control_B.iw0] - 1] =
      (rtInf) - xk[WorkingSet->indexFixed.data[proc_control_B.iw0] - 1];
    WorkingSet->bwset.data[proc_control_B.iw0] = (rtInf) - xk
      [WorkingSet->indexFixed.data[proc_control_B.iw0] - 1];
    proc_control_B.iw0++;
  }

  if (WorkingSet->nActiveConstr > mFixed + 130) {
    proc_control_B.b_idx_f = mFixed + 130;
    while (proc_control_B.b_idx_f + 1 <= WorkingSet->nActiveConstr) {
      switch (WorkingSet->Wid.data[proc_control_B.b_idx_f]) {
       case 4:
        WorkingSet->bwset.data[proc_control_B.b_idx_f] = WorkingSet->
          lb.data[WorkingSet->indexLB.data[WorkingSet->
          Wlocalidx.data[proc_control_B.b_idx_f] - 1] - 1];
        break;

       case 5:
        WorkingSet->bwset.data[proc_control_B.b_idx_f] = WorkingSet->
          ub.data[WorkingSet->indexUB.data[WorkingSet->
          Wlocalidx.data[proc_control_B.b_idx_f] - 1] - 1];
        break;

       default:
        WorkingSet->bwset.data[proc_control_B.b_idx_f] = WorkingSet->
          bineq.data[WorkingSet->Wlocalidx.data[proc_control_B.b_idx_f] - 1];
        if ((mNonlinIneq > 0) && (WorkingSet->
             Wlocalidx.data[proc_control_B.b_idx_f] >= mNonlinIneq)) {
          proc_control_B.iw0 = WorkingSet->ldA * proc_control_B.b_idx_f;
          proc_control_B.iEq0 = (WorkingSet->
            Wlocalidx.data[proc_control_B.b_idx_f] - 1) * WorkingSet->ldA;
          for (int32_T i{1}; i - 1 <= proc_control_B.nVar_d; i++) {
            WorkingSet->ATwset.data[(proc_control_B.iw0 + i) - 1] =
              WorkingSet->Aineq.data[(proc_control_B.iEq0 + i) - 1];
          }
        }
        break;
      }

      proc_control_B.b_idx_f++;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
real_T proc_control::proc_control_xnrm2_m(int32_T n, const real_T x_data[],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x_data[ix0 - 1]);
    } else {
      proc_control_B.scale_h = 3.3121686421112381E-170;
      proc_control_B.kend_p = (ix0 + n) - 1;
      proc_control_B.k_db = ix0;
      while (proc_control_B.k_db <= proc_control_B.kend_p) {
        proc_control_B.absxk_ih = std::abs(x_data[proc_control_B.k_db - 1]);
        if (proc_control_B.absxk_ih > proc_control_B.scale_h) {
          proc_control_B.t_g = proc_control_B.scale_h / proc_control_B.absxk_ih;
          y = y * proc_control_B.t_g * proc_control_B.t_g + 1.0;
          proc_control_B.scale_h = proc_control_B.absxk_ih;
        } else {
          proc_control_B.t_g = proc_control_B.absxk_ih / proc_control_B.scale_h;
          y += proc_control_B.t_g * proc_control_B.t_g;
        }

        proc_control_B.k_db++;
      }

      y = proc_control_B.scale_h * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S214>/NLMPC'
real_T proc_control::proc_control_xzlarfg(int32_T n, real_T *alpha1, real_T
  x_data[], int32_T ix0)
{
  real_T tau;
  tau = 0.0;
  if (n > 0) {
    proc_control_B.xnorm_o = proc_control_xnrm2_m(n - 1, x_data, ix0);
    if (proc_control_B.xnorm_o != 0.0) {
      proc_control_B.xnorm_o = proc_control_rt_hypotd_snf(*alpha1,
        proc_control_B.xnorm_o);
      if (*alpha1 >= 0.0) {
        proc_control_B.xnorm_o = -proc_control_B.xnorm_o;
      }

      if (std::abs(proc_control_B.xnorm_o) < 1.0020841800044864E-292) {
        proc_control_B.knt_m = 0;
        proc_control_B.c_k_j = (ix0 + n) - 2;
        do {
          proc_control_B.knt_m++;
          proc_control_B.b_k_iy = ix0;
          while (proc_control_B.b_k_iy <= proc_control_B.c_k_j) {
            x_data[proc_control_B.b_k_iy - 1] *= 9.9792015476736E+291;
            proc_control_B.b_k_iy++;
          }

          proc_control_B.xnorm_o *= 9.9792015476736E+291;
          *alpha1 *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.xnorm_o) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_m < 20));

        proc_control_B.xnorm_o = proc_control_rt_hypotd_snf(*alpha1,
          proc_control_xnrm2_m(n - 1, x_data, ix0));
        if (*alpha1 >= 0.0) {
          proc_control_B.xnorm_o = -proc_control_B.xnorm_o;
        }

        tau = (proc_control_B.xnorm_o - *alpha1) / proc_control_B.xnorm_o;
        proc_control_B.a_o = 1.0 / (*alpha1 - proc_control_B.xnorm_o);
        proc_control_B.b_k_iy = ix0;
        while (proc_control_B.b_k_iy <= proc_control_B.c_k_j) {
          x_data[proc_control_B.b_k_iy - 1] *= proc_control_B.a_o;
          proc_control_B.b_k_iy++;
        }

        proc_control_B.c_k_j = 0;
        while (proc_control_B.c_k_j <= proc_control_B.knt_m - 1) {
          proc_control_B.xnorm_o *= 1.0020841800044864E-292;
          proc_control_B.c_k_j++;
        }

        *alpha1 = proc_control_B.xnorm_o;
      } else {
        tau = (proc_control_B.xnorm_o - *alpha1) / proc_control_B.xnorm_o;
        proc_control_B.a_o = 1.0 / (*alpha1 - proc_control_B.xnorm_o);
        proc_control_B.knt_m = (ix0 + n) - 2;
        proc_control_B.c_k_j = ix0;
        while (proc_control_B.c_k_j <= proc_control_B.knt_m) {
          x_data[proc_control_B.c_k_j - 1] *= proc_control_B.a_o;
          proc_control_B.c_k_j++;
        }

        *alpha1 = proc_control_B.xnorm_o;
      }
    }
  }

  return tau;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemv_mt(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[])
{
  if (n != 0) {
    proc_control_B.b_iy_i = 0;
    while (proc_control_B.b_iy_i <= n - 1) {
      y_data[proc_control_B.b_iy_i] = 0.0;
      proc_control_B.b_iy_i++;
    }

    proc_control_B.b_iy_i = 0;
    proc_control_B.b_es = (n - 1) * lda + ia0;
    proc_control_B.iac_a = ia0;
    while (((lda > 0) && (proc_control_B.iac_a <= proc_control_B.b_es)) || ((lda
             < 0) && (proc_control_B.iac_a >= proc_control_B.b_es))) {
      proc_control_B.ix_oq = ix0;
      proc_control_B.c_br = 0.0;
      proc_control_B.d_e = (proc_control_B.iac_a + m) - 1;
      proc_control_B.ia_l34 = proc_control_B.iac_a;
      while (proc_control_B.ia_l34 <= proc_control_B.d_e) {
        proc_control_B.c_br += A_data[proc_control_B.ia_l34 - 1] *
          x_data[proc_control_B.ix_oq - 1];
        proc_control_B.ix_oq++;
        proc_control_B.ia_l34++;
      }

      y_data[proc_control_B.b_iy_i] += proc_control_B.c_br;
      proc_control_B.b_iy_i++;
      proc_control_B.iac_a += lda;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgerc_e(int32_T m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y_data[], real_T A_data[], int32_T ia0, int32_T lda)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA_h = ia0 - 1;
    proc_control_B.jy_nw = 0;
    proc_control_B.j_m = 0;
    while (proc_control_B.j_m <= n - 1) {
      if (y_data[proc_control_B.jy_nw] != 0.0) {
        proc_control_B.temp_b = y_data[proc_control_B.jy_nw] * alpha1;
        proc_control_B.ix_bx = ix0;
        proc_control_B.ijA_kl = proc_control_B.jA_h;
        proc_control_B.b_kv = m + proc_control_B.jA_h;
        while (proc_control_B.ijA_kl + 1 <= proc_control_B.b_kv) {
          A_data[proc_control_B.ijA_kl] += A_data[proc_control_B.ix_bx - 1] *
            proc_control_B.temp_b;
          proc_control_B.ix_bx++;
          proc_control_B.ijA_kl++;
        }
      }

      proc_control_B.jy_nw++;
      proc_control_B.jA_h += lda;
      proc_control_B.j_m++;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xzlarf(int32_T m, int32_T n, int32_T iv0, real_T
  tau, real_T C_data[], int32_T ic0, int32_T ldc, real_T work_data[])
{
  if (tau != 0.0) {
    boolean_T exitg2;
    proc_control_B.lastv_g = m;
    proc_control_B.lastc_k = iv0 + m;
    while ((proc_control_B.lastv_g > 0) && (C_data[proc_control_B.lastc_k - 2] ==
            0.0)) {
      proc_control_B.lastv_g--;
      proc_control_B.lastc_k--;
    }

    proc_control_B.lastc_k = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.lastc_k > 0)) {
      int32_T exitg1;
      proc_control_B.coltop_j = (proc_control_B.lastc_k - 1) * ldc + ic0;
      proc_control_B.ia_p = proc_control_B.coltop_j;
      do {
        exitg1 = 0;
        if (proc_control_B.ia_p <= (proc_control_B.coltop_j +
             proc_control_B.lastv_g) - 1) {
          if (C_data[proc_control_B.ia_p - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_B.ia_p++;
          }
        } else {
          proc_control_B.lastc_k--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_B.lastv_g = 0;
    proc_control_B.lastc_k = 0;
  }

  if (proc_control_B.lastv_g > 0) {
    proc_control_xgemv_mt(proc_control_B.lastv_g, proc_control_B.lastc_k, C_data,
                          ic0, ldc, C_data, iv0, work_data);
    proc_control_xgerc_e(proc_control_B.lastv_g, proc_control_B.lastc_k, -tau,
                         iv0, work_data, C_data, ic0, ldc);
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_qrf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[])
{
  proc_control_B.lda = A_size[0];
  proc_control_B.ii_h5 = A_size[1];
  if (proc_control_B.ii_h5 - 1 >= 0) {
    std::memset(&proc_control_B.work_data[0], 0, proc_control_B.ii_h5 * sizeof
                (real_T));
  }

  proc_control_B.i_d4 = 0;
  while (proc_control_B.i_d4 <= nfxd - 1) {
    proc_control_B.ii_h5 = proc_control_B.i_d4 * proc_control_B.lda +
      proc_control_B.i_d4;
    proc_control_B.mmi = m - proc_control_B.i_d4;
    if (proc_control_B.i_d4 + 1 < m) {
      proc_control_B.b_atmp = A_data[proc_control_B.ii_h5];
      tau_data[proc_control_B.i_d4] = proc_control_xzlarfg(proc_control_B.mmi,
        &proc_control_B.b_atmp, A_data, proc_control_B.ii_h5 + 2);
      A_data[proc_control_B.ii_h5] = proc_control_B.b_atmp;
    } else {
      tau_data[proc_control_B.i_d4] = 0.0;
    }

    if (proc_control_B.i_d4 + 1 < n) {
      proc_control_B.b_atmp = A_data[proc_control_B.ii_h5];
      A_data[proc_control_B.ii_h5] = 1.0;
      proc_control_xzlarf(proc_control_B.mmi, (n - proc_control_B.i_d4) - 1,
                          proc_control_B.ii_h5 + 1, tau_data[proc_control_B.i_d4],
                          A_data, (proc_control_B.ii_h5 + proc_control_B.lda) +
                          1, proc_control_B.lda, proc_control_B.work_data);
      A_data[proc_control_B.ii_h5] = proc_control_B.b_atmp;
    }

    proc_control_B.i_d4++;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xswap(int32_T n, real_T x_data[], int32_T ix0,
  int32_T iy0)
{
  proc_control_B.ix_ib = ix0 - 1;
  proc_control_B.iy_jj = iy0 - 1;
  proc_control_B.k_c = 0;
  while (proc_control_B.k_c <= n - 1) {
    proc_control_B.temp_p = x_data[proc_control_B.ix_ib];
    x_data[proc_control_B.ix_ib] = x_data[proc_control_B.iy_jj];
    x_data[proc_control_B.iy_jj] = proc_control_B.temp_p;
    proc_control_B.ix_ib++;
    proc_control_B.iy_jj++;
    proc_control_B.k_c++;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_qrpf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[], int32_T jpvt_data[])
{
  proc_control_B.ma_d = A_size[0];
  if (m <= n) {
    proc_control_B.minmn_c = m;
  } else {
    proc_control_B.minmn_c = n;
  }

  proc_control_B.loop_ub_o = A_size[1];
  if (proc_control_B.loop_ub_o - 1 >= 0) {
    std::memset(&proc_control_B.work_data_p[0], 0, proc_control_B.loop_ub_o *
                sizeof(real_T));
  }

  proc_control_B.loop_ub_o = A_size[1];
  if (proc_control_B.loop_ub_o - 1 >= 0) {
    std::memset(&proc_control_B.vn1_data[0], 0, proc_control_B.loop_ub_o *
                sizeof(real_T));
  }

  proc_control_B.loop_ub_o = A_size[1];
  if (proc_control_B.loop_ub_o - 1 >= 0) {
    std::memset(&proc_control_B.vn2_data[0], 0, proc_control_B.loop_ub_o *
                sizeof(real_T));
  }

  proc_control_B.j_nw = nfxd;
  while (proc_control_B.j_nw + 1 <= n) {
    proc_control_B.vn1_data[proc_control_B.j_nw] = proc_control_xnrm2_m(m - nfxd,
      A_data, (proc_control_B.j_nw * proc_control_B.ma_d + nfxd) + 1);
    proc_control_B.vn2_data[proc_control_B.j_nw] =
      proc_control_B.vn1_data[proc_control_B.j_nw];
    proc_control_B.j_nw++;
  }

  proc_control_B.j_nw = nfxd;
  while (proc_control_B.j_nw + 1 <= proc_control_B.minmn_c) {
    proc_control_B.loop_ub_o = proc_control_B.j_nw + 1;
    proc_control_B.ii_j = proc_control_B.j_nw * proc_control_B.ma_d +
      proc_control_B.j_nw;
    proc_control_B.nmi = n - proc_control_B.j_nw;
    proc_control_B.mmi_c = m - proc_control_B.j_nw;
    if (proc_control_B.nmi < 1) {
      proc_control_B.pvt = -1;
    } else {
      proc_control_B.pvt = 0;
      if (proc_control_B.nmi > 1) {
        proc_control_B.ix_jf = proc_control_B.j_nw;
        proc_control_B.smax = std::abs
          (proc_control_B.vn1_data[proc_control_B.j_nw]);
        proc_control_B.k_k = 2;
        while (proc_control_B.k_k <= proc_control_B.nmi) {
          proc_control_B.ix_jf++;
          proc_control_B.s_a2 = std::abs
            (proc_control_B.vn1_data[proc_control_B.ix_jf]);
          if (proc_control_B.s_a2 > proc_control_B.smax) {
            proc_control_B.pvt = proc_control_B.k_k - 1;
            proc_control_B.smax = proc_control_B.s_a2;
          }

          proc_control_B.k_k++;
        }
      }
    }

    proc_control_B.pvt += proc_control_B.j_nw;
    if (proc_control_B.pvt + 1 != proc_control_B.j_nw + 1) {
      proc_control_xswap(m, A_data, proc_control_B.pvt * proc_control_B.ma_d + 1,
                         proc_control_B.j_nw * proc_control_B.ma_d + 1);
      proc_control_B.ix_jf = jpvt_data[proc_control_B.pvt];
      jpvt_data[proc_control_B.pvt] = jpvt_data[proc_control_B.j_nw];
      jpvt_data[proc_control_B.j_nw] = proc_control_B.ix_jf;
      proc_control_B.vn1_data[proc_control_B.pvt] =
        proc_control_B.vn1_data[proc_control_B.j_nw];
      proc_control_B.vn2_data[proc_control_B.pvt] =
        proc_control_B.vn2_data[proc_control_B.j_nw];
    }

    if (proc_control_B.j_nw + 1 < m) {
      proc_control_B.smax = A_data[proc_control_B.ii_j];
      tau_data[proc_control_B.j_nw] = proc_control_xzlarfg(proc_control_B.mmi_c,
        &proc_control_B.smax, A_data, proc_control_B.ii_j + 2);
      A_data[proc_control_B.ii_j] = proc_control_B.smax;
    } else {
      tau_data[proc_control_B.j_nw] = 0.0;
    }

    if (proc_control_B.j_nw + 1 < n) {
      proc_control_B.smax = A_data[proc_control_B.ii_j];
      A_data[proc_control_B.ii_j] = 1.0;
      proc_control_xzlarf(proc_control_B.mmi_c, proc_control_B.nmi - 1,
                          proc_control_B.ii_j + 1, tau_data[proc_control_B.j_nw],
                          A_data, (proc_control_B.ii_j + proc_control_B.ma_d) +
                          1, proc_control_B.ma_d, proc_control_B.work_data_p);
      A_data[proc_control_B.ii_j] = proc_control_B.smax;
    }

    while (proc_control_B.loop_ub_o + 1 <= n) {
      proc_control_B.ii_j = proc_control_B.loop_ub_o * proc_control_B.ma_d +
        proc_control_B.j_nw;
      if (proc_control_B.vn1_data[proc_control_B.loop_ub_o] != 0.0) {
        proc_control_B.smax = std::abs(A_data[proc_control_B.ii_j]) /
          proc_control_B.vn1_data[proc_control_B.loop_ub_o];
        proc_control_B.smax = 1.0 - proc_control_B.smax * proc_control_B.smax;
        if (proc_control_B.smax < 0.0) {
          proc_control_B.smax = 0.0;
        }

        proc_control_B.s_a2 = proc_control_B.vn1_data[proc_control_B.loop_ub_o] /
          proc_control_B.vn2_data[proc_control_B.loop_ub_o];
        proc_control_B.s_a2 = proc_control_B.s_a2 * proc_control_B.s_a2 *
          proc_control_B.smax;
        if (proc_control_B.s_a2 <= 1.4901161193847656E-8) {
          if (proc_control_B.j_nw + 1 < m) {
            proc_control_B.vn1_data[proc_control_B.loop_ub_o] =
              proc_control_xnrm2_m(proc_control_B.mmi_c - 1, A_data,
              proc_control_B.ii_j + 2);
            proc_control_B.vn2_data[proc_control_B.loop_ub_o] =
              proc_control_B.vn1_data[proc_control_B.loop_ub_o];
          } else {
            proc_control_B.vn1_data[proc_control_B.loop_ub_o] = 0.0;
            proc_control_B.vn2_data[proc_control_B.loop_ub_o] = 0.0;
          }
        } else {
          proc_control_B.vn1_data[proc_control_B.loop_ub_o] *= std::sqrt
            (proc_control_B.smax);
        }
      }

      proc_control_B.loop_ub_o++;
    }

    proc_control_B.j_nw++;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgeqp3(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T jpvt_data[], real_T tau_data[], int32_T
  *tau_size)
{
  proc_control_B.ma = A_size[0];
  if (A_size[0] <= A_size[1]) {
    proc_control_B.minmana_p = A_size[0];
  } else {
    proc_control_B.minmana_p = A_size[1];
  }

  if (m <= n) {
    proc_control_B.minmn_a = m;
  } else {
    proc_control_B.minmn_a = n;
  }

  *tau_size = proc_control_B.minmana_p;
  if (proc_control_B.minmana_p - 1 >= 0) {
    std::memset(&tau_data[0], 0, proc_control_B.minmana_p * sizeof(real_T));
  }

  if (proc_control_B.minmn_a < 1) {
    proc_control_B.ma = 0;
    while (proc_control_B.ma <= n - 1) {
      jpvt_data[proc_control_B.ma] = proc_control_B.ma + 1;
      proc_control_B.ma++;
    }
  } else {
    proc_control_B.minmana_p = -1;
    proc_control_B.c_j_f = 0;
    while (proc_control_B.c_j_f <= n - 1) {
      if (jpvt_data[proc_control_B.c_j_f] != 0) {
        proc_control_B.minmana_p++;
        if (proc_control_B.c_j_f + 1 != proc_control_B.minmana_p + 1) {
          proc_control_xswap(m, A_data, proc_control_B.c_j_f * proc_control_B.ma
                             + 1, proc_control_B.minmana_p * proc_control_B.ma +
                             1);
          jpvt_data[proc_control_B.c_j_f] = jpvt_data[proc_control_B.minmana_p];
          jpvt_data[proc_control_B.minmana_p] = proc_control_B.c_j_f + 1;
        } else {
          jpvt_data[proc_control_B.c_j_f] = proc_control_B.c_j_f + 1;
        }
      } else {
        jpvt_data[proc_control_B.c_j_f] = proc_control_B.c_j_f + 1;
      }

      proc_control_B.c_j_f++;
    }

    if (proc_control_B.minmana_p + 1 <= proc_control_B.minmn_a) {
      proc_control_B.minmana_p++;
    } else {
      proc_control_B.minmana_p = proc_control_B.minmn_a;
    }

    proc_control_qrf(A_data, A_size, m, n, proc_control_B.minmana_p, tau_data);
    if (proc_control_B.minmana_p < proc_control_B.minmn_a) {
      proc_control_qrpf(A_data, A_size, m, n, proc_control_B.minmana_p, tau_data,
                        jpvt_data);
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_factorQRE(s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *obj,
  const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA)
{
  proc_control_B.b_idx_c = 0;
  while (proc_control_B.b_idx_c <= ncols - 1) {
    proc_control_B.ix0_a = ldA * proc_control_B.b_idx_c;
    proc_control_B.idx_d = obj->ldq * proc_control_B.b_idx_c;
    proc_control_B.k_ic = 1;
    while (proc_control_B.k_ic - 1 <= mrows - 1) {
      obj->QR.data[(proc_control_B.idx_d + proc_control_B.k_ic) - 1] = A_data
        [(proc_control_B.ix0_a + proc_control_B.k_ic) - 1];
      proc_control_B.k_ic++;
    }

    proc_control_B.b_idx_c++;
  }

  obj->usedPivoting = true;
  obj->mrows = mrows;
  obj->ncols = ncols;
  if (mrows <= ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_xgeqp3(obj->QR.data, obj->QR.size, mrows, ncols, obj->jpvt.data,
                      obj->tau.data, &obj->tau.size);
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xorgqr(int32_T m, int32_T n, int32_T k, real_T
  A_data[], const int32_T A_size[2], int32_T lda, const real_T tau_data[])
{
  if (n >= 1) {
    proc_control_B.itau_c = k;
    while (proc_control_B.itau_c <= n - 1) {
      proc_control_B.i_lj = proc_control_B.itau_c * lda;
      proc_control_B.iaii_m = 0;
      while (proc_control_B.iaii_m <= m - 1) {
        A_data[proc_control_B.i_lj + proc_control_B.iaii_m] = 0.0;
        proc_control_B.iaii_m++;
      }

      A_data[proc_control_B.i_lj + proc_control_B.itau_c] = 1.0;
      proc_control_B.itau_c++;
    }

    proc_control_B.itau_c = k - 1;
    proc_control_B.iaii_m = static_cast<int16_T>(A_size[1]);
    if (proc_control_B.iaii_m - 1 >= 0) {
      std::memset(&proc_control_B.work_data_l[0], 0, proc_control_B.iaii_m *
                  sizeof(real_T));
    }

    proc_control_B.i_lj = k;
    while (proc_control_B.i_lj >= 1) {
      proc_control_B.iaii_m = (proc_control_B.i_lj - 1) * lda +
        proc_control_B.i_lj;
      if (proc_control_B.i_lj < n) {
        A_data[proc_control_B.iaii_m - 1] = 1.0;
        proc_control_xzlarf((m - proc_control_B.i_lj) + 1, n -
                            proc_control_B.i_lj, proc_control_B.iaii_m,
                            tau_data[proc_control_B.itau_c], A_data,
                            proc_control_B.iaii_m + lda, lda,
                            proc_control_B.work_data_l);
      }

      if (proc_control_B.i_lj < m) {
        proc_control_B.c_h = (proc_control_B.iaii_m + m) - proc_control_B.i_lj;
        proc_control_B.b_k_a = proc_control_B.iaii_m;
        while (proc_control_B.b_k_a + 1 <= proc_control_B.c_h) {
          A_data[proc_control_B.b_k_a] *= -tau_data[proc_control_B.itau_c];
          proc_control_B.b_k_a++;
        }
      }

      A_data[proc_control_B.iaii_m - 1] = 1.0 - tau_data[proc_control_B.itau_c];
      proc_control_B.c_h = 0;
      while (proc_control_B.c_h <= proc_control_B.i_lj - 2) {
        A_data[(proc_control_B.iaii_m - proc_control_B.c_h) - 2] = 0.0;
        proc_control_B.c_h++;
      }

      proc_control_B.itau_c--;
      proc_control_B.i_lj--;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_computeQ_(s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *obj,
  int32_T nrows)
{
  proc_control_B.idx_oa = 0;
  while (proc_control_B.idx_oa <= obj->minRowCol - 1) {
    proc_control_B.iQR0 = obj->ldq * proc_control_B.idx_oa +
      proc_control_B.idx_oa;
    proc_control_B.n_j = obj->mrows - proc_control_B.idx_oa;
    proc_control_B.k_pc = 1;
    while (proc_control_B.k_pc - 1 <= proc_control_B.n_j - 2) {
      proc_control_B.i26 = proc_control_B.iQR0 + proc_control_B.k_pc;
      obj->Q.data[proc_control_B.i26] = obj->QR.data[proc_control_B.i26];
      proc_control_B.k_pc++;
    }

    proc_control_B.idx_oa++;
  }

  proc_control_xorgqr(obj->mrows, nrows, obj->minRowCol, obj->Q.data,
                      obj->Q.size, obj->ldq, obj->tau.data);
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemv_mtm(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (m != 0) {
    proc_control_B.b_iy_n = 0;
    while (proc_control_B.b_iy_n <= n - 1) {
      y_data[proc_control_B.b_iy_n] = 0.0;
      proc_control_B.b_iy_n++;
    }

    proc_control_B.b_iy_n = 0;
    proc_control_B.b_hh = (n - 1) * lda + 1;
    proc_control_B.iac_ah = 1;
    while (((lda > 0) && (proc_control_B.iac_ah <= proc_control_B.b_hh)) ||
           ((lda < 0) && (proc_control_B.iac_ah >= proc_control_B.b_hh))) {
      proc_control_B.ix_e = 0;
      proc_control_B.c_n5 = 0.0;
      proc_control_B.d_b5 = (proc_control_B.iac_ah + m) - 1;
      proc_control_B.ia_k5 = proc_control_B.iac_ah;
      while (proc_control_B.ia_k5 <= proc_control_B.d_b5) {
        proc_control_B.c_n5 += A_data[proc_control_B.ia_k5 - 1] *
          x_data[proc_control_B.ix_e];
        proc_control_B.ix_e++;
        proc_control_B.ia_k5++;
      }

      y_data[proc_control_B.b_iy_n] += proc_control_B.c_n5;
      proc_control_B.b_iy_n++;
      proc_control_B.iac_ah += lda;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xtrsv(int32_T n, const real_T A_data[], int32_T
  lda, real_T x_data[])
{
  if (n != 0) {
    proc_control_B.j_eh = n - 1;
    while (proc_control_B.j_eh + 1 > 0) {
      proc_control_B.jjA_m = proc_control_B.j_eh * lda + proc_control_B.j_eh;
      x_data[proc_control_B.j_eh] /= A_data[proc_control_B.jjA_m];
      proc_control_B.i_mw1 = 1;
      while (proc_control_B.i_mw1 - 1 <= proc_control_B.j_eh - 1) {
        proc_control_B.ix_hl = proc_control_B.j_eh - proc_control_B.i_mw1;
        x_data[proc_control_B.ix_hl] -= A_data[proc_control_B.jjA_m -
          proc_control_B.i_mw1] * x_data[proc_control_B.j_eh];
        proc_control_B.i_mw1++;
      }

      proc_control_B.j_eh--;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_sortLambdaQP(real_T lambda_data[], int32_T
  WorkingSet_nActiveConstr, const int32_T WorkingSet_sizes[5], const int32_T
  WorkingSet_isActiveIdx[6], const int32_T WorkingSet_Wid_data[], const int32_T
  WorkingSet_Wlocalidx_data[], real_T workspace_data[])
{
  if (WorkingSet_nActiveConstr != 0) {
    int32_T idxOffset;
    proc_control_B.mAll = (((WorkingSet_sizes[0] + WorkingSet_sizes[3]) +
      WorkingSet_sizes[4]) + WorkingSet_sizes[2]) + 129;
    proc_control_B.idx_cm = 0;
    while (proc_control_B.idx_cm <= proc_control_B.mAll) {
      workspace_data[proc_control_B.idx_cm] = lambda_data[proc_control_B.idx_cm];
      proc_control_B.idx_cm++;
    }

    proc_control_B.idx_cm = 0;
    while (proc_control_B.idx_cm <= proc_control_B.mAll) {
      lambda_data[proc_control_B.idx_cm] = 0.0;
      proc_control_B.idx_cm++;
    }

    proc_control_B.mAll = 0;
    proc_control_B.idx_cm = 0;
    while ((proc_control_B.idx_cm + 1 <= WorkingSet_nActiveConstr) &&
           (WorkingSet_Wid_data[proc_control_B.idx_cm] <= 2)) {
      if (WorkingSet_Wid_data[proc_control_B.idx_cm] == 1) {
        idxOffset = 1;
      } else {
        idxOffset = WorkingSet_isActiveIdx[1];
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[proc_control_B.idx_cm])
        - 2] = workspace_data[proc_control_B.mAll];
      proc_control_B.mAll++;
      proc_control_B.idx_cm++;
    }

    while (proc_control_B.idx_cm + 1 <= WorkingSet_nActiveConstr) {
      switch (WorkingSet_Wid_data[proc_control_B.idx_cm]) {
       case 3:
        idxOffset = WorkingSet_isActiveIdx[2];
        break;

       case 4:
        idxOffset = WorkingSet_isActiveIdx[3];
        break;

       default:
        idxOffset = WorkingSet_isActiveIdx[4];
        break;
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[proc_control_B.idx_cm])
        - 2] = workspace_data[proc_control_B.mAll];
      proc_control_B.mAll++;
      proc_control_B.idx_cm++;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
int32_T proc_control::proc_control_ixamax(int32_T n, const real_T x_data[])
{
  int32_T idxmax;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      proc_control_B.ix_f2 = 0;
      proc_control_B.smax_d = std::abs(x_data[0]);
      for (int32_T k{2}; k <= n; k++) {
        proc_control_B.ix_f2++;
        proc_control_B.s_l = std::abs(x_data[proc_control_B.ix_f2]);
        if (proc_control_B.s_l > proc_control_B.smax_d) {
          idxmax = k;
          proc_control_B.smax_d = proc_control_B.s_l;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_test_exit(s7RdrPWkr8UPAUyTdDJkLaG_proc__T *Flags,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, sG8JZ69axY52WWR6RKyApQC_proc__T
  *MeritFunction, const int32_T *fscales_lineq_constraint_size, const int32_T
  *fscales_cineq_constraint_size, s_YaC65yvYSxJoOs4cRNYgnE_proc_T *WorkingSet,
  s_SfTiiT1KRClFcMCE02xJjB_proc_T *TrialState, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T
  *QRManager, const real_T lb[155])
{
  boolean_T dxTooSmall;
  boolean_T isFeasible;
  proc_control_B.mLambda_b = (((WorkingSet->sizes[0] + WorkingSet->sizes[2]) +
    WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 129;
  proc_control_B.fullRank_R = 0;
  while (proc_control_B.fullRank_R <= proc_control_B.mLambda_b) {
    TrialState->lambdaStopTest.data[proc_control_B.fullRank_R] =
      TrialState->lambdasqp.data[proc_control_B.fullRank_R];
    proc_control_B.fullRank_R++;
  }

  proc_control_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  proc_control_B.optimRelativeFactor_l = std::fmax(1.0, std::abs
    (TrialState->grad.data[proc_control_ixamax(WorkingSet->nVar,
    TrialState->grad.data) - 1]));
  if (std::isinf(proc_control_B.optimRelativeFactor_l)) {
    proc_control_B.optimRelativeFactor_l = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if (TrialState->sqpIterations == 0) {
    MeritFunction->feasRelativeFactor = std::fmax(1.0,
      MeritFunction->nlpPrimalFeasError);
  }

  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &Flags->gradOK, &MeritFunction->nlpDualFeasError);
  if (!Flags->gradOK) {
    Flags->done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = proc_control_computeComplError
      (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
       TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
       WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
       WorkingSet->indexUB.data, WorkingSet->sizes[4],
       TrialState->lambdaStopTest.data, WorkingSet->sizes[0] + 131);
    MeritFunction->firstOrderOpt = std::fmax(MeritFunction->nlpDualFeasError,
      MeritFunction->nlpComplError);
    if (TrialState->sqpIterations > 1) {
      proc_control_computeGradLag_b(memspace->workspace_double.data,
        WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
        WorkingSet->sizes[2], WorkingSet->Aineq.data, WorkingSet->Aeq.data,
        WorkingSet->indexFixed.data, WorkingSet->sizes[0],
        WorkingSet->indexLB.data, WorkingSet->sizes[3], WorkingSet->indexUB.data,
        WorkingSet->sizes[4], TrialState->lambdaStopTestPrev.data);
      proc_con_computeDualFeasError_b(WorkingSet->nVar,
        memspace->workspace_double.data, &dxTooSmall, &proc_control_B.tol_p);
      proc_control_B.nlpComplErrorTmp = proc_control_computeComplError
        (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
         TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
         WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
         WorkingSet->indexUB.data, WorkingSet->sizes[4],
         TrialState->lambdaStopTestPrev.data, WorkingSet->sizes[0] + 131);
      proc_control_B.d79 = std::fmax(proc_control_B.tol_p,
        proc_control_B.nlpComplErrorTmp);
      if (proc_control_B.d79 < std::fmax(MeritFunction->nlpDualFeasError,
           MeritFunction->nlpComplError)) {
        MeritFunction->nlpDualFeasError = proc_control_B.tol_p;
        MeritFunction->nlpComplError = proc_control_B.nlpComplErrorTmp;
        MeritFunction->firstOrderOpt = proc_control_B.d79;
        proc_control_B.fullRank_R = 0;
        while (proc_control_B.fullRank_R <= proc_control_B.mLambda_b) {
          TrialState->lambdaStopTest.data[proc_control_B.fullRank_R] =
            TrialState->lambdaStopTestPrev.data[proc_control_B.fullRank_R];
          proc_control_B.fullRank_R++;
        }
      } else {
        proc_control_B.fullRank_R = 0;
        while (proc_control_B.fullRank_R <= proc_control_B.mLambda_b) {
          TrialState->lambdaStopTestPrev.data[proc_control_B.fullRank_R] =
            TrialState->lambdaStopTest.data[proc_control_B.fullRank_R];
          proc_control_B.fullRank_R++;
        }
      }
    } else {
      proc_control_B.fullRank_R = 0;
      while (proc_control_B.fullRank_R <= proc_control_B.mLambda_b) {
        TrialState->lambdaStopTestPrev.data[proc_control_B.fullRank_R] =
          TrialState->lambdaStopTest.data[proc_control_B.fullRank_R];
        proc_control_B.fullRank_R++;
      }
    }

    if (isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
                       proc_control_B.optimRelativeFactor_l) &&
        (MeritFunction->nlpComplError <= 0.02 *
         proc_control_B.optimRelativeFactor_l)) {
      Flags->done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      Flags->done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        Flags->done = true;
        TrialState->sqpExitFlag = -3;
      } else {
        boolean_T guard1{ false };

        guard1 = false;
        if (TrialState->sqpIterations > 0) {
          boolean_T exitg1;
          dxTooSmall = true;
          proc_control_B.fullRank_R = 0;
          exitg1 = false;
          while ((!exitg1) && (proc_control_B.fullRank_R <= WorkingSet->nVar - 1))
          {
            if (0.1 * std::fmax(1.0, std::abs(TrialState->
                  xstarsqp[proc_control_B.fullRank_R])) <= std::abs
                (TrialState->delta_x.data[proc_control_B.fullRank_R])) {
              dxTooSmall = false;
              exitg1 = true;
            } else {
              proc_control_B.fullRank_R++;
            }
          }

          if (dxTooSmall) {
            if (!isFeasible) {
              if (Flags->stepType != 2) {
                Flags->stepType = 2;
                Flags->failedLineSearch = false;
                Flags->stepAccepted = false;
                guard1 = true;
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = -2;
              }
            } else if (WorkingSet->nActiveConstr > 0) {
              proc_updateWorkingSetForNewQP_l(TrialState->xstarsqp, WorkingSet,
                WorkingSet->sizes[2], TrialState->mNonlinIneq,
                TrialState->cIneq.data, TrialState->cEq, WorkingSet->sizes[3],
                lb, WorkingSet->sizes[4], WorkingSet->sizes[0]);
              proc_control_B.fullRank_R = 0;
              while (proc_control_B.fullRank_R <= WorkingSet->nActiveConstr - 1)
              {
                TrialState->lambda.data[proc_control_B.fullRank_R] = 0.0;
                proc_control_B.fullRank_R++;
              }

              proc_control_factorQRE(QRManager, WorkingSet->ATwset.data,
                WorkingSet->nVar, WorkingSet->nActiveConstr, WorkingSet->ldA);
              proc_control_computeQ_(QRManager, QRManager->mrows);
              if (WorkingSet->nVar >= WorkingSet->nActiveConstr) {
                proc_control_B.fullRank_R = WorkingSet->nVar;
              } else {
                proc_control_B.fullRank_R = WorkingSet->nActiveConstr;
              }

              proc_control_B.tol_p = std::fmin(1.4901161193847656E-8,
                static_cast<real_T>(proc_control_B.fullRank_R) *
                2.2204460492503131E-16) * std::abs(QRManager->QR.data[0]);
              if (WorkingSet->nVar <= WorkingSet->nActiveConstr) {
                proc_control_B.fullRank_R = WorkingSet->nVar;
              } else {
                proc_control_B.fullRank_R = WorkingSet->nActiveConstr;
              }

              proc_control_B.rankR = 0;
              proc_control_B.iQR_diag = 0;
              while ((proc_control_B.rankR < proc_control_B.fullRank_R) && (std::
                      abs(QRManager->QR.data[proc_control_B.iQR_diag]) >
                      proc_control_B.tol_p)) {
                proc_control_B.rankR++;
                proc_control_B.iQR_diag = (proc_control_B.iQR_diag +
                  QRManager->ldq) + 1;
              }

              proc_control_xgemv_mtm(WorkingSet->nVar, WorkingSet->nVar,
                QRManager->Q.data, QRManager->ldq, TrialState->grad.data,
                memspace->workspace_double.data);
              proc_control_xtrsv(proc_control_B.rankR, QRManager->QR.data,
                                 QRManager->ldq, memspace->workspace_double.data);
              if (WorkingSet->nActiveConstr <= proc_control_B.fullRank_R) {
                proc_control_B.fullRank_R = WorkingSet->nActiveConstr;
              }

              proc_control_B.rankR = 0;
              while (proc_control_B.rankR <= proc_control_B.fullRank_R - 1) {
                TrialState->lambda.data[QRManager->
                  jpvt.data[proc_control_B.rankR] - 1] =
                  memspace->workspace_double.data[proc_control_B.rankR];
                proc_control_B.rankR++;
              }

              proc_control_B.fullRank_R = WorkingSet->sizes[0];
              while (proc_control_B.fullRank_R + 1 <= WorkingSet->sizes[0] + 130)
              {
                TrialState->lambda.data[proc_control_B.fullRank_R] =
                  -TrialState->lambda.data[proc_control_B.fullRank_R];
                proc_control_B.fullRank_R++;
              }

              proc_control_sortLambdaQP(TrialState->lambda.data,
                WorkingSet->nActiveConstr, WorkingSet->sizes,
                WorkingSet->isActiveIdx, WorkingSet->Wid.data,
                WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
              proc_control_computeGradLag_b(memspace->workspace_double.data,
                WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
                WorkingSet->sizes[2], WorkingSet->Aineq.data,
                WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
                WorkingSet->sizes[0], WorkingSet->indexLB.data,
                WorkingSet->sizes[3], WorkingSet->indexUB.data,
                WorkingSet->sizes[4], TrialState->lambda.data);
              proc_con_computeDualFeasError_b(WorkingSet->nVar,
                memspace->workspace_double.data, &isFeasible,
                &proc_control_B.tol_p);
              proc_control_B.nlpComplErrorTmp = proc_control_computeComplError
                (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
                 TrialState->xstarsqp, WorkingSet->sizes[2],
                 TrialState->cIneq.data, WorkingSet->indexLB.data,
                 WorkingSet->sizes[3], lb, WorkingSet->indexUB.data,
                 WorkingSet->sizes[4], TrialState->lambda.data,
                 WorkingSet->sizes[0] + 1);
              if ((proc_control_B.tol_p <= 0.02 *
                   proc_control_B.optimRelativeFactor_l) &&
                  (proc_control_B.nlpComplErrorTmp <= 0.02 *
                   proc_control_B.optimRelativeFactor_l)) {
                MeritFunction->nlpDualFeasError = proc_control_B.tol_p;
                MeritFunction->nlpComplError = proc_control_B.nlpComplErrorTmp;
                MeritFunction->firstOrderOpt = std::fmax(proc_control_B.tol_p,
                  proc_control_B.nlpComplErrorTmp);
                proc_control_B.fullRank_R = 0;
                while (proc_control_B.fullRank_R <= proc_control_B.mLambda_b) {
                  TrialState->lambdaStopTest.data[proc_control_B.fullRank_R] =
                    TrialState->lambda.data[proc_control_B.fullRank_R];
                  proc_control_B.fullRank_R++;
                }

                Flags->done = true;
                TrialState->sqpExitFlag = 1;
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = 2;
              }
            } else {
              Flags->done = true;
              TrialState->sqpExitFlag = 2;
            }
          } else {
            guard1 = true;
          }
        } else {
          guard1 = true;
        }

        if (guard1) {
          if (TrialState->sqpIterations >= 400) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          } else if (TrialState->FunctionEvaluations >= 15500) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbiadz2i(int32_T m, int32_T n, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0,
  real_T y_data[])
{
  proc_control_B.ix_ic = ix0;
  proc_control_B.b_kj = (n - 1) * lda + ia0;
  proc_control_B.iac_k3 = ia0;
  while (((lda > 0) && (proc_control_B.iac_k3 <= proc_control_B.b_kj)) || ((lda <
           0) && (proc_control_B.iac_k3 >= proc_control_B.b_kj))) {
    proc_control_B.iy_e4 = 0;
    proc_control_B.c_p0 = (proc_control_B.iac_k3 + m) - 1;
    for (int32_T ia{proc_control_B.iac_k3}; ia <= proc_control_B.c_p0; ia++) {
      y_data[proc_control_B.iy_e4] += A_data[ia - 1] *
        x_data[proc_control_B.ix_ic - 1];
      proc_control_B.iy_e4++;
    }

    proc_control_B.ix_ic++;
    proc_control_B.iac_k3 += lda;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
boolean_T proc_control::proc_control_BFGSUpdate(int32_T nvar, real_T Bk[24025],
  const real_T sk_data[], real_T yk_data[], real_T workspace_data[])
{
  int32_T c_ix;
  boolean_T success;
  proc_control_B.dotSY = 0.0;
  if (nvar >= 1) {
    proc_control_B.b_jA = 0;
    while (proc_control_B.b_jA <= nvar - 1) {
      proc_control_B.dotSY += sk_data[proc_control_B.b_jA] *
        yk_data[proc_control_B.b_jA];
      proc_control_B.b_jA++;
    }
  }

  proc_control_B.b_jA = 0;
  while (proc_control_B.b_jA <= nvar - 1) {
    workspace_data[proc_control_B.b_jA] = 0.0;
    proc_control_B.b_jA++;
  }

  proc_control_B.ix_hz = 0;
  proc_control_B.jy_gc = (nvar - 1) * 155 + 1;
  for (c_ix = 1; c_ix <= proc_control_B.jy_gc; c_ix += 155) {
    proc_control_B.b_ix_a = 0;
    proc_control_B.ijA_g = (c_ix + nvar) - 1;
    proc_control_B.b_jA = c_ix;
    while (proc_control_B.b_jA <= proc_control_B.ijA_g) {
      workspace_data[proc_control_B.b_ix_a] += Bk[proc_control_B.b_jA - 1] *
        sk_data[proc_control_B.ix_hz];
      proc_control_B.b_ix_a++;
      proc_control_B.b_jA++;
    }

    proc_control_B.ix_hz++;
  }

  proc_control_B.curvatureS = 0.0;
  if (nvar >= 1) {
    proc_control_B.ix_hz = 0;
    while (proc_control_B.ix_hz <= nvar - 1) {
      proc_control_B.curvatureS += workspace_data[proc_control_B.ix_hz] *
        sk_data[proc_control_B.ix_hz];
      proc_control_B.ix_hz++;
    }
  }

  if (proc_control_B.dotSY < 0.2 * proc_control_B.curvatureS) {
    proc_control_B.dotSY = 0.8 * proc_control_B.curvatureS /
      (proc_control_B.curvatureS - proc_control_B.dotSY);
    proc_control_B.b_jA = 0;
    while (proc_control_B.b_jA <= nvar - 1) {
      yk_data[proc_control_B.b_jA] *= proc_control_B.dotSY;
      proc_control_B.b_jA++;
    }

    if (!(1.0 - proc_control_B.dotSY == 0.0)) {
      proc_control_B.ix_hz = 0;
      while (proc_control_B.ix_hz <= nvar - 1) {
        yk_data[proc_control_B.ix_hz] += (1.0 - proc_control_B.dotSY) *
          workspace_data[proc_control_B.ix_hz];
        proc_control_B.ix_hz++;
      }
    }

    proc_control_B.dotSY = 0.0;
    if (nvar >= 1) {
      proc_control_B.b_jA = 0;
      while (proc_control_B.b_jA <= nvar - 1) {
        proc_control_B.dotSY += sk_data[proc_control_B.b_jA] *
          yk_data[proc_control_B.b_jA];
        proc_control_B.b_jA++;
      }
    }
  }

  success = ((proc_control_B.curvatureS > 2.2204460492503131E-16) &&
             (proc_control_B.dotSY > 2.2204460492503131E-16));
  if (success) {
    proc_control_B.curvatureS = -1.0 / proc_control_B.curvatureS;
    if (!(proc_control_B.curvatureS == 0.0)) {
      proc_control_B.ix_hz = 0;
      proc_control_B.jy_gc = 0;
      for (c_ix = 0; c_ix < nvar; c_ix++) {
        if (workspace_data[proc_control_B.jy_gc] != 0.0) {
          proc_control_B.temp_e = workspace_data[proc_control_B.jy_gc] *
            proc_control_B.curvatureS;
          proc_control_B.b_ix_a = 0;
          proc_control_B.ijA_g = proc_control_B.ix_hz;
          proc_control_B.b_jA = nvar + proc_control_B.ix_hz;
          while (proc_control_B.ijA_g + 1 <= proc_control_B.b_jA) {
            Bk[proc_control_B.ijA_g] += workspace_data[proc_control_B.b_ix_a] *
              proc_control_B.temp_e;
            proc_control_B.b_ix_a++;
            proc_control_B.ijA_g++;
          }
        }

        proc_control_B.jy_gc++;
        proc_control_B.ix_hz += 155;
      }
    }

    proc_control_B.dotSY = 1.0 / proc_control_B.dotSY;
    if (!(proc_control_B.dotSY == 0.0)) {
      proc_control_B.b_jA = 0;
      proc_control_B.ix_hz = 0;
      proc_control_B.jy_gc = 0;
      while (proc_control_B.jy_gc <= nvar - 1) {
        if (yk_data[proc_control_B.ix_hz] != 0.0) {
          proc_control_B.curvatureS = yk_data[proc_control_B.ix_hz] *
            proc_control_B.dotSY;
          c_ix = 0;
          proc_control_B.b_ix_a = proc_control_B.b_jA;
          proc_control_B.ijA_g = nvar + proc_control_B.b_jA;
          while (proc_control_B.b_ix_a + 1 <= proc_control_B.ijA_g) {
            Bk[proc_control_B.b_ix_a] += yk_data[c_ix] *
              proc_control_B.curvatureS;
            c_ix++;
            proc_control_B.b_ix_a++;
          }
        }

        proc_control_B.ix_hz++;
        proc_control_B.b_jA += 155;
        proc_control_B.jy_gc++;
      }
    }
  }

  return success;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_factorQRE_f(s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *obj,
  int32_T mrows, int32_T ncols)
{
  if (mrows * ncols == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    obj->usedPivoting = true;
    obj->mrows = mrows;
    obj->ncols = ncols;
    if (mrows <= ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_xgeqp3(obj->QR.data, obj->QR.size, mrows, ncols, obj->jpvt.data,
                        obj->tau.data, &obj->tau.size);
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_countsort(int32_T x_data[], int32_T xLen,
  int32_T workspace_data[], int32_T xMin, int32_T xMax)
{
  if ((xLen > 1) && (xMax > xMin)) {
    proc_control_B.maxOffset_tmp = xMax - xMin;
    proc_control_B.idxStart = 0;
    while (proc_control_B.idxStart <= proc_control_B.maxOffset_tmp) {
      workspace_data[proc_control_B.idxStart] = 0;
      proc_control_B.idxStart++;
    }

    proc_control_B.idxStart = 0;
    while (proc_control_B.idxStart <= xLen - 1) {
      proc_control_B.idxEnd = x_data[proc_control_B.idxStart] - xMin;
      workspace_data[proc_control_B.idxEnd]++;
      proc_control_B.idxStart++;
    }

    proc_control_B.idxStart = 1;
    while (proc_control_B.idxStart + 1 <= proc_control_B.maxOffset_tmp + 1) {
      workspace_data[proc_control_B.idxStart] +=
        workspace_data[proc_control_B.idxStart - 1];
      proc_control_B.idxStart++;
    }

    proc_control_B.idxStart = 0;
    proc_control_B.idxEnd = workspace_data[0];
    proc_control_B.b_idxW = 0;
    while (proc_control_B.b_idxW <= proc_control_B.maxOffset_tmp - 1) {
      while (proc_control_B.idxStart + 1 <= proc_control_B.idxEnd) {
        x_data[proc_control_B.idxStart] = proc_control_B.b_idxW + xMin;
        proc_control_B.idxStart++;
      }

      proc_control_B.idxStart = workspace_data[proc_control_B.b_idxW];
      proc_control_B.idxEnd = workspace_data[proc_control_B.b_idxW + 1];
      proc_control_B.b_idxW++;
    }

    while (proc_control_B.idxStart + 1 <= proc_control_B.idxEnd) {
      x_data[proc_control_B.idxStart] = xMax;
      proc_control_B.idxStart++;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_removeConstr(s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *obj, int32_T idx_global)
{
  proc_control_B.TYPE_tmp = obj->Wid.data[idx_global - 1] - 1;
  obj->isActiveConstr.data[(obj->isActiveIdx[proc_control_B.TYPE_tmp] +
    obj->Wlocalidx.data[idx_global - 1]) - 2] = false;
  proc_control_B.idx_global_start_tmp_tmp = obj->nActiveConstr - 1;
  obj->Wid.data[idx_global - 1] = obj->Wid.data[obj->nActiveConstr - 1];
  obj->Wlocalidx.data[idx_global - 1] = obj->
    Wlocalidx.data[proc_control_B.idx_global_start_tmp_tmp];
  proc_control_B.b_idx_fr = 0;
  while (proc_control_B.b_idx_fr <= obj->nVar - 1) {
    obj->ATwset.data[proc_control_B.b_idx_fr + obj->ldA * (idx_global - 1)] =
      obj->ATwset.data[obj->ldA * proc_control_B.idx_global_start_tmp_tmp +
      proc_control_B.b_idx_fr];
    proc_control_B.b_idx_fr++;
  }

  obj->bwset.data[idx_global - 1] = obj->
    bwset.data[proc_control_B.idx_global_start_tmp_tmp];
  obj->nActiveConstr--;
  obj->nWConstr[proc_control_B.TYPE_tmp]--;
}

// Function for MATLAB Function: '<S214>/NLMPC'
int32_T proc_control::proc_control_RemoveDependentEq_
  (s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
   *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *qrmanager)
{
  int32_T nDepInd;
  proc_control_B.nVar_i = workingset->nVar - 1;
  proc_control_B.mTotalWorkingEq = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  nDepInd = 0;
  if (proc_control_B.mTotalWorkingEq > 0) {
    proc_control_B.totalRank = 0;
    while (proc_control_B.totalRank <= proc_control_B.mTotalWorkingEq - 1) {
      proc_control_B.ix_fw = 0;
      while (proc_control_B.ix_fw <= proc_control_B.nVar_i) {
        qrmanager->QR.data[proc_control_B.totalRank + qrmanager->ldq *
          proc_control_B.ix_fw] = workingset->ATwset.data[workingset->ldA *
          proc_control_B.totalRank + proc_control_B.ix_fw];
        proc_control_B.ix_fw++;
      }

      proc_control_B.totalRank++;
    }

    proc_control_B.iy_h = proc_control_B.mTotalWorkingEq - workingset->nVar;
    if (proc_control_B.iy_h > 0) {
      nDepInd = proc_control_B.iy_h;
    }

    proc_control_B.totalRank = 0;
    while (proc_control_B.totalRank <= proc_control_B.nVar_i) {
      qrmanager->jpvt.data[proc_control_B.totalRank] = 0;
      proc_control_B.totalRank++;
    }

    proc_control_factorQRE_f(qrmanager, proc_control_B.mTotalWorkingEq,
      workingset->nVar);
    proc_control_B.tol = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    if (workingset->nVar <= proc_control_B.mTotalWorkingEq) {
      proc_control_B.totalRank = workingset->nVar;
    } else {
      proc_control_B.totalRank = proc_control_B.mTotalWorkingEq;
    }

    proc_control_B.totalRank += (proc_control_B.totalRank - 1) * qrmanager->ldq;
    while ((proc_control_B.totalRank > 0) && (std::abs(qrmanager->
             QR.data[proc_control_B.totalRank - 1]) < proc_control_B.tol)) {
      proc_control_B.totalRank = (proc_control_B.totalRank - qrmanager->ldq) - 1;
      nDepInd++;
    }

    if (nDepInd > 0) {
      boolean_T exitg1;
      proc_control_computeQ_(qrmanager, qrmanager->mrows);
      proc_control_B.totalRank = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.totalRank <= nDepInd - 1)) {
        proc_control_B.ix_fw = ((proc_control_B.mTotalWorkingEq -
          proc_control_B.totalRank) - 1) * qrmanager->ldq;
        proc_control_B.qtb = 0.0;
        proc_control_B.iy_h = 0;
        proc_control_B.b_k_in = 0;
        while (proc_control_B.b_k_in <= proc_control_B.mTotalWorkingEq - 1) {
          proc_control_B.qtb += qrmanager->Q.data[proc_control_B.ix_fw] *
            workingset->bwset.data[proc_control_B.iy_h];
          proc_control_B.ix_fw++;
          proc_control_B.iy_h++;
          proc_control_B.b_k_in++;
        }

        if (std::abs(proc_control_B.qtb) >= proc_control_B.tol) {
          nDepInd = -1;
          exitg1 = true;
        } else {
          proc_control_B.totalRank++;
        }
      }
    }

    if (nDepInd > 0) {
      proc_control_B.totalRank = 0;
      while (proc_control_B.totalRank <= proc_control_B.mTotalWorkingEq - 1) {
        proc_control_B.ix_fw = qrmanager->ldq * proc_control_B.totalRank;
        proc_control_B.iy_h = workingset->ldA * proc_control_B.totalRank;
        proc_control_B.b_k_in = 1;
        while (proc_control_B.b_k_in - 1 <= proc_control_B.nVar_i) {
          qrmanager->QR.data[(proc_control_B.ix_fw + proc_control_B.b_k_in) - 1]
            = workingset->ATwset.data[(proc_control_B.iy_h +
            proc_control_B.b_k_in) - 1];
          proc_control_B.b_k_in++;
        }

        proc_control_B.totalRank++;
      }

      proc_control_B.nVar_i = 0;
      while (proc_control_B.nVar_i <= workingset->nWConstr[0] - 1) {
        qrmanager->jpvt.data[proc_control_B.nVar_i] = 1;
        proc_control_B.nVar_i++;
      }

      proc_control_B.nVar_i = workingset->nWConstr[0];
      while (proc_control_B.nVar_i + 1 <= proc_control_B.mTotalWorkingEq) {
        qrmanager->jpvt.data[proc_control_B.nVar_i] = 0;
        proc_control_B.nVar_i++;
      }

      proc_control_factorQRE_f(qrmanager, workingset->nVar,
        proc_control_B.mTotalWorkingEq);
      proc_control_B.nVar_i = 0;
      while (proc_control_B.nVar_i <= nDepInd - 1) {
        memspace->workspace_int.data[proc_control_B.nVar_i] =
          qrmanager->jpvt.data[(proc_control_B.mTotalWorkingEq - nDepInd) +
          proc_control_B.nVar_i];
        proc_control_B.nVar_i++;
      }

      proc_control_countsort(memspace->workspace_int.data, nDepInd,
        memspace->workspace_sort.data, 1, proc_control_B.mTotalWorkingEq);
      proc_control_B.mTotalWorkingEq = nDepInd - 1;
      while (proc_control_B.mTotalWorkingEq + 1 > 0) {
        proc_control_B.nVar_i = (workingset->nWConstr[0] + workingset->nWConstr
          [1]) - 1;
        if ((proc_control_B.nVar_i + 1 != 0) && (memspace->
             workspace_int.data[proc_control_B.mTotalWorkingEq] <=
             proc_control_B.nVar_i + 1)) {
          if ((proc_control_B.nVar_i + 1 == workingset->nActiveConstr) ||
              (proc_control_B.nVar_i + 1 == memspace->
               workspace_int.data[proc_control_B.mTotalWorkingEq])) {
            workingset->mEqRemoved++;
            workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq] - 1];
            proc_control_removeConstr(workingset, memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq]);
          } else {
            workingset->mEqRemoved++;
            proc_control_B.totalRank = workingset->Wid.data
              [memspace->workspace_int.data[proc_control_B.mTotalWorkingEq] - 1]
              - 1;
            workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq] - 1];
            workingset->isActiveConstr.data[(workingset->isActiveIdx
              [workingset->Wid.data[memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq] - 1] - 1] +
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq] - 1]) - 2] =
              false;
            workingset->Wid.data[memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq] - 1] =
              workingset->Wid.data[proc_control_B.nVar_i];
            workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq] - 1] =
              workingset->Wlocalidx.data[proc_control_B.nVar_i];
            proc_control_B.ix_fw = 0;
            while (proc_control_B.ix_fw <= workingset->nVar - 1) {
              workingset->ATwset.data[proc_control_B.ix_fw + workingset->ldA *
                (memspace->workspace_int.data[proc_control_B.mTotalWorkingEq] -
                 1)] = workingset->ATwset.data[workingset->ldA *
                proc_control_B.nVar_i + proc_control_B.ix_fw];
              proc_control_B.ix_fw++;
            }

            workingset->bwset.data[memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq] - 1] =
              workingset->bwset.data[proc_control_B.nVar_i];
            proc_control_B.ix_fw = workingset->nActiveConstr - 1;
            workingset->Wid.data[proc_control_B.nVar_i] = workingset->
              Wid.data[workingset->nActiveConstr - 1];
            workingset->Wlocalidx.data[proc_control_B.nVar_i] =
              workingset->Wlocalidx.data[proc_control_B.ix_fw];
            proc_control_B.iy_h = 0;
            while (proc_control_B.iy_h <= workingset->nVar - 1) {
              workingset->ATwset.data[proc_control_B.iy_h + workingset->ldA *
                proc_control_B.nVar_i] = workingset->ATwset.data[workingset->ldA
                * proc_control_B.ix_fw + proc_control_B.iy_h];
              proc_control_B.iy_h++;
            }

            workingset->bwset.data[proc_control_B.nVar_i] =
              workingset->bwset.data[proc_control_B.ix_fw];
            workingset->nActiveConstr--;
            workingset->nWConstr[proc_control_B.totalRank]--;
          }
        }

        proc_control_B.mTotalWorkingEq--;
      }
    }
  }

  return nDepInd;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_contro_removeAllIneqConstr
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj)
{
  proc_control_B.idx_global_b = obj->nWConstr[0] + obj->nWConstr[1];
  while (proc_control_B.idx_global_b + 1 <= obj->nActiveConstr) {
    obj->isActiveConstr.data[(obj->isActiveIdx[obj->
      Wid.data[proc_control_B.idx_global_b] - 1] + obj->
      Wlocalidx.data[proc_control_B.idx_global_b]) - 2] = false;
    proc_control_B.idx_global_b++;
  }

  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + obj->nWConstr[1];
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_contr_RemoveDependentIneq_
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *
   qrmanager, s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace)
{
  proc_control_B.nFixedConstr_d = workingset->nWConstr[0] + workingset->
    nWConstr[1];
  proc_control_B.nVar_n = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    proc_control_B.tol_n = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    proc_control_B.nDepIneq_j = 0;
    while (proc_control_B.nDepIneq_j <= proc_control_B.nFixedConstr_d - 1) {
      qrmanager->jpvt.data[proc_control_B.nDepIneq_j] = 1;
      proc_control_B.nDepIneq_j++;
    }

    proc_control_B.nDepIneq_j = proc_control_B.nFixedConstr_d + 1;
    while (proc_control_B.nDepIneq_j <= workingset->nActiveConstr) {
      qrmanager->jpvt.data[proc_control_B.nDepIneq_j - 1] = 0;
      proc_control_B.nDepIneq_j++;
    }

    proc_control_B.nDepIneq_j = 0;
    while (proc_control_B.nDepIneq_j <= workingset->nActiveConstr - 1) {
      proc_control_B.idx_b = qrmanager->ldq * proc_control_B.nDepIneq_j;
      proc_control_B.idx_col_f = workingset->ldA * proc_control_B.nDepIneq_j;
      proc_control_B.k_hc = 1;
      while (proc_control_B.k_hc - 1 <= proc_control_B.nVar_n - 1) {
        qrmanager->QR.data[(proc_control_B.idx_b + proc_control_B.k_hc) - 1] =
          workingset->ATwset.data[(proc_control_B.idx_col_f +
          proc_control_B.k_hc) - 1];
        proc_control_B.k_hc++;
      }

      proc_control_B.nDepIneq_j++;
    }

    proc_control_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    proc_control_B.nDepIneq_j = 0;
    proc_control_B.idx_b = workingset->nActiveConstr - 1;
    while (proc_control_B.idx_b + 1 > proc_control_B.nVar_n) {
      proc_control_B.nDepIneq_j++;
      memspace->workspace_int.data[proc_control_B.nDepIneq_j - 1] =
        qrmanager->jpvt.data[proc_control_B.idx_b];
      proc_control_B.idx_b--;
    }

    if (proc_control_B.idx_b + 1 <= workingset->nVar) {
      proc_control_B.nVar_n = qrmanager->ldq * proc_control_B.idx_b +
        proc_control_B.idx_b;
      while ((proc_control_B.idx_b + 1 > proc_control_B.nFixedConstr_d) && (std::
              abs(qrmanager->QR.data[proc_control_B.nVar_n]) <
              proc_control_B.tol_n)) {
        proc_control_B.nDepIneq_j++;
        memspace->workspace_int.data[proc_control_B.nDepIneq_j - 1] =
          qrmanager->jpvt.data[proc_control_B.idx_b];
        proc_control_B.idx_b--;
        proc_control_B.nVar_n = (proc_control_B.nVar_n - qrmanager->ldq) - 1;
      }
    }

    proc_control_countsort(memspace->workspace_int.data,
      proc_control_B.nDepIneq_j, memspace->workspace_sort.data,
      proc_control_B.nFixedConstr_d + 1, workingset->nActiveConstr);
    proc_control_B.nFixedConstr_d = proc_control_B.nDepIneq_j;
    while (proc_control_B.nFixedConstr_d > 0) {
      proc_control_removeConstr(workingset, memspace->
        workspace_int.data[proc_control_B.nFixedConstr_d - 1]);
      proc_control_B.nFixedConstr_d--;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgeqrf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, real_T tau_data[], int32_T *tau_size)
{
  if (A_size[0] <= A_size[1]) {
    proc_control_B.minmana = A_size[0];
  } else {
    proc_control_B.minmana = A_size[1];
  }

  if (m <= n) {
    proc_control_B.minmn = m;
  } else {
    proc_control_B.minmn = n;
  }

  *tau_size = proc_control_B.minmana;
  if (proc_control_B.minmana - 1 >= 0) {
    std::memset(&tau_data[0], 0, proc_control_B.minmana * sizeof(real_T));
  }

  if (proc_control_B.minmn >= 1) {
    proc_control_qrf(A_data, A_size, m, n, proc_control_B.minmn, tau_data);
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_factorQR_h(s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *obj,
  const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA)
{
  boolean_T guard1{ false };

  proc_control_B.b_idx_l = mrows * ncols;
  guard1 = false;
  if (proc_control_B.b_idx_l > 0) {
    proc_control_B.b_idx_l = 0;
    while (proc_control_B.b_idx_l <= ncols - 1) {
      proc_control_B.ix0 = ldA * proc_control_B.b_idx_l;
      proc_control_B.idx_o2 = obj->ldq * proc_control_B.b_idx_l;
      proc_control_B.k_f = 1;
      while (proc_control_B.k_f - 1 <= mrows - 1) {
        obj->QR.data[(proc_control_B.idx_o2 + proc_control_B.k_f) - 1] = A_data
          [(proc_control_B.ix0 + proc_control_B.k_f) - 1];
        proc_control_B.k_f++;
      }

      proc_control_B.b_idx_l++;
    }

    guard1 = true;
  } else if (proc_control_B.b_idx_l == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    guard1 = true;
  }

  if (guard1) {
    obj->usedPivoting = false;
    obj->mrows = mrows;
    obj->ncols = ncols;
    proc_control_B.b_idx_l = 0;
    while (proc_control_B.b_idx_l <= ncols - 1) {
      obj->jpvt.data[proc_control_B.b_idx_l] = proc_control_B.b_idx_l + 1;
      proc_control_B.b_idx_l++;
    }

    if (mrows <= ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols, obj->tau.data,
                        &obj->tau.size);
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_factorQR(s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *obj,
  int32_T mrows, int32_T ncols)
{
  obj->usedPivoting = false;
  obj->mrows = mrows;
  obj->ncols = ncols;
  proc_control_B.idx_kn = 0;
  while (proc_control_B.idx_kn <= ncols - 1) {
    obj->jpvt.data[proc_control_B.idx_kn] = proc_control_B.idx_kn + 1;
    proc_control_B.idx_kn++;
  }

  if (mrows <= ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols, obj->tau.data,
                      &obj->tau.size);
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemv_mtmcj(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    proc_control_B.b_iy_d = 0;
    while (proc_control_B.b_iy_d <= n - 1) {
      y_data[proc_control_B.b_iy_d] = -y_data[proc_control_B.b_iy_d];
      proc_control_B.b_iy_d++;
    }

    proc_control_B.iy_k2 = 0;
    proc_control_B.b_iy_d = (n - 1) * lda + 1;
    proc_control_B.iac_ae = 1;
    while (((lda > 0) && (proc_control_B.iac_ae <= proc_control_B.b_iy_d)) ||
           ((lda < 0) && (proc_control_B.iac_ae >= proc_control_B.b_iy_d))) {
      proc_control_B.ix_hn = 0;
      proc_control_B.c_jc = 0.0;
      proc_control_B.d_hg = (proc_control_B.iac_ae + m) - 1;
      proc_control_B.ia_cc = proc_control_B.iac_ae;
      while (proc_control_B.ia_cc <= proc_control_B.d_hg) {
        proc_control_B.c_jc += A_data[proc_control_B.ia_cc - 1] *
          x_data[proc_control_B.ix_hn];
        proc_control_B.ix_hn++;
        proc_control_B.ia_cc++;
      }

      y_data[proc_control_B.iy_k2] += proc_control_B.c_jc;
      proc_control_B.iy_k2++;
      proc_control_B.iac_ae += lda;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemv_mtmc(int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    proc_control_B.b_iy_p = 0;
    while (proc_control_B.b_iy_p <= n - 1) {
      y_data[proc_control_B.b_iy_p] = -y_data[proc_control_B.b_iy_p];
      proc_control_B.b_iy_p++;
    }

    proc_control_B.iy_f5 = 0;
    proc_control_B.b_iy_p = (n - 1) * lda + 1;
    proc_control_B.iac_gs = 1;
    while (((lda > 0) && (proc_control_B.iac_gs <= proc_control_B.b_iy_p)) ||
           ((lda < 0) && (proc_control_B.iac_gs >= proc_control_B.b_iy_p))) {
      proc_control_B.ix_dk = 0;
      proc_control_B.c_l = 0.0;
      proc_control_B.ia_f3 = proc_control_B.iac_gs;
      while (proc_control_B.ia_f3 <= proc_control_B.iac_gs + 154) {
        proc_control_B.c_l += A_data[proc_control_B.ia_f3 - 1] *
          x_data[proc_control_B.ix_dk];
        proc_control_B.ix_dk++;
        proc_control_B.ia_f3++;
      }

      y_data[proc_control_B.iy_f5] += proc_control_B.c_l;
      proc_control_B.iy_f5++;
      proc_control_B.iac_gs += lda;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
real_T proc_control::proc_con_maxConstraintViolation
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj, const real_T x_data[])
{
  real_T v;
  proc_control_B.mLB_m = obj->sizes[3];
  proc_control_B.mUB_a = obj->sizes[4];
  proc_control_B.mFixed_o = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    proc_control_B.mIneq_o = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_B.b_k_nt = 0;
      while (proc_control_B.b_k_nt <= proc_control_B.mIneq_o) {
        obj->maxConstrWorkspace.data[proc_control_B.b_k_nt] = obj->
          bineq.data[proc_control_B.b_k_nt];
        proc_control_B.b_k_nt++;
      }

      proc_control_xgemv_mtmc(obj->sizes[2], obj->Aineq.data, obj->ldA, x_data,
        obj->maxConstrWorkspace.data);
      proc_control_B.b_k_nt = 0;
      while (proc_control_B.b_k_nt <= proc_control_B.mIneq_o) {
        obj->maxConstrWorkspace.data[proc_control_B.b_k_nt] -=
          x_data[proc_control_B.b_k_nt + 155];
        v = std::fmax(v, obj->maxConstrWorkspace.data[proc_control_B.b_k_nt]);
        proc_control_B.b_k_nt++;
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmc(130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (proc_control_B.b_k_nt = 0; proc_control_B.b_k_nt < 130;
         proc_control_B.b_k_nt++) {
      obj->maxConstrWorkspace.data[proc_control_B.b_k_nt] =
        (obj->maxConstrWorkspace.data[proc_control_B.b_k_nt] - x_data
         [(proc_control_B.mIneq_o + proc_control_B.b_k_nt) + 156]) + x_data
        [(obj->sizes[2] + proc_control_B.b_k_nt) + 285];
      v = std::fmax(v, std::abs(obj->
        maxConstrWorkspace.data[proc_control_B.b_k_nt]));
    }
  } else {
    v = 0.0;
    proc_control_B.mIneq_o = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_B.b_k_nt = 0;
      while (proc_control_B.b_k_nt <= proc_control_B.mIneq_o) {
        obj->maxConstrWorkspace.data[proc_control_B.b_k_nt] = obj->
          bineq.data[proc_control_B.b_k_nt];
        proc_control_B.b_k_nt++;
      }

      proc_control_xgemv_mtmcj(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      proc_control_B.b_k_nt = 0;
      while (proc_control_B.b_k_nt <= proc_control_B.mIneq_o) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[proc_control_B.b_k_nt]);
        proc_control_B.b_k_nt++;
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcj(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (proc_control_B.mIneq_o = 0; proc_control_B.mIneq_o < 130;
         proc_control_B.mIneq_o++) {
      v = std::fmax(v, std::abs(obj->
        maxConstrWorkspace.data[proc_control_B.mIneq_o]));
    }
  }

  if (proc_control_B.mLB_m > 0) {
    proc_control_B.mIneq_o = 0;
    while (proc_control_B.mIneq_o <= proc_control_B.mLB_m - 1) {
      v = std::fmax(v, -x_data[obj->indexLB.data[proc_control_B.mIneq_o] - 1] -
                    obj->lb.data[obj->indexLB.data[proc_control_B.mIneq_o] - 1]);
      proc_control_B.mIneq_o++;
    }
  }

  if (proc_control_B.mUB_a > 0) {
    proc_control_B.mLB_m = 0;
    while (proc_control_B.mLB_m <= proc_control_B.mUB_a - 1) {
      v = std::fmax(v, x_data[obj->indexUB.data[proc_control_B.mLB_m] - 1] -
                    obj->ub.data[obj->indexUB.data[proc_control_B.mLB_m] - 1]);
      proc_control_B.mLB_m++;
    }
  }

  if (proc_control_B.mFixed_o > 0) {
    proc_control_B.mUB_a = 0;
    while (proc_control_B.mUB_a <= proc_control_B.mFixed_o - 1) {
      v = std::fmax(v, std::abs(x_data[obj->indexFixed.data[proc_control_B.mUB_a]
        - 1] - obj->ub.data[obj->indexFixed.data[proc_control_B.mUB_a] - 1]));
      proc_control_B.mUB_a++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjb(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  if (n != 0) {
    proc_control_B.b_iy_iw = 0;
    while (proc_control_B.b_iy_iw <= n - 1) {
      y_data[proc_control_B.b_iy_iw] = -y_data[proc_control_B.b_iy_iw];
      proc_control_B.b_iy_iw++;
    }

    proc_control_B.iy_jm = 0;
    proc_control_B.b_iy_iw = (n - 1) * lda + 1;
    proc_control_B.iac_e = 1;
    while (((lda > 0) && (proc_control_B.iac_e <= proc_control_B.b_iy_iw)) ||
           ((lda < 0) && (proc_control_B.iac_e >= proc_control_B.b_iy_iw))) {
      proc_control_B.ix_a = ix0;
      proc_control_B.c_cm = 0.0;
      proc_control_B.d_ik = (proc_control_B.iac_e + m) - 1;
      proc_control_B.ia_hv = proc_control_B.iac_e;
      while (proc_control_B.ia_hv <= proc_control_B.d_ik) {
        proc_control_B.c_cm += x_data[proc_control_B.ix_a - 1] *
          A_data[proc_control_B.ia_hv - 1];
        proc_control_B.ix_a++;
        proc_control_B.ia_hv++;
      }

      y_data[proc_control_B.iy_jm] += proc_control_B.c_cm;
      proc_control_B.iy_jm++;
      proc_control_B.iac_e += lda;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
real_T proc_control::proc_c_maxConstraintViolation_d
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj, const real_T x_data[], int32_T ix0)
{
  real_T v;
  proc_control_B.mLB_g = obj->sizes[3];
  proc_control_B.mUB_i = obj->sizes[4];
  proc_control_B.mFixed_k = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    proc_control_B.mIneq_im = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_B.b_k_m = 0;
      while (proc_control_B.b_k_m <= proc_control_B.mIneq_im) {
        obj->maxConstrWorkspace.data[proc_control_B.b_k_m] = obj->
          bineq.data[proc_control_B.b_k_m];
        proc_control_B.b_k_m++;
      }

      proc_control_xgemv_mtmcjb(155, obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, ix0, obj->maxConstrWorkspace.data);
      proc_control_B.b_k_m = 0;
      while (proc_control_B.b_k_m <= proc_control_B.mIneq_im) {
        obj->maxConstrWorkspace.data[proc_control_B.b_k_m] -= x_data[(ix0 +
          proc_control_B.b_k_m) + 154];
        v = std::fmax(v, obj->maxConstrWorkspace.data[proc_control_B.b_k_m]);
        proc_control_B.b_k_m++;
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcjb(155, 130, obj->Aeq.data, obj->ldA, x_data, ix0,
      obj->maxConstrWorkspace.data);
    for (proc_control_B.b_k_m = 0; proc_control_B.b_k_m < 130;
         proc_control_B.b_k_m++) {
      obj->maxConstrWorkspace.data[proc_control_B.b_k_m] =
        (obj->maxConstrWorkspace.data[proc_control_B.b_k_m] - x_data[((ix0 +
           proc_control_B.mIneq_im) + proc_control_B.b_k_m) + 155]) + x_data
        [((ix0 + obj->sizes[2]) + proc_control_B.b_k_m) + 284];
      v = std::fmax(v, std::abs(obj->
        maxConstrWorkspace.data[proc_control_B.b_k_m]));
    }
  } else {
    v = 0.0;
    proc_control_B.mIneq_im = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_B.b_k_m = 0;
      while (proc_control_B.b_k_m <= proc_control_B.mIneq_im) {
        obj->maxConstrWorkspace.data[proc_control_B.b_k_m] = obj->
          bineq.data[proc_control_B.b_k_m];
        proc_control_B.b_k_m++;
      }

      proc_control_xgemv_mtmcjb(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, ix0, obj->maxConstrWorkspace.data);
      proc_control_B.b_k_m = 0;
      while (proc_control_B.b_k_m <= proc_control_B.mIneq_im) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[proc_control_B.b_k_m]);
        proc_control_B.b_k_m++;
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcjb(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data,
      ix0, obj->maxConstrWorkspace.data);
    for (proc_control_B.mIneq_im = 0; proc_control_B.mIneq_im < 130;
         proc_control_B.mIneq_im++) {
      v = std::fmax(v, std::abs(obj->
        maxConstrWorkspace.data[proc_control_B.mIneq_im]));
    }
  }

  if (proc_control_B.mLB_g > 0) {
    proc_control_B.mIneq_im = 0;
    while (proc_control_B.mIneq_im <= proc_control_B.mLB_g - 1) {
      v = std::fmax(v, -x_data[(ix0 + obj->indexLB.data[proc_control_B.mIneq_im])
                    - 2] - obj->lb.data[obj->
                    indexLB.data[proc_control_B.mIneq_im] - 1]);
      proc_control_B.mIneq_im++;
    }
  }

  if (proc_control_B.mUB_i > 0) {
    proc_control_B.mLB_g = 0;
    while (proc_control_B.mLB_g <= proc_control_B.mUB_i - 1) {
      v = std::fmax(v, x_data[(ix0 + obj->indexUB.data[proc_control_B.mLB_g]) -
                    2] - obj->ub.data[obj->indexUB.data[proc_control_B.mLB_g] -
                    1]);
      proc_control_B.mLB_g++;
    }
  }

  if (proc_control_B.mFixed_k > 0) {
    proc_control_B.mUB_i = 0;
    while (proc_control_B.mUB_i <= proc_control_B.mFixed_k - 1) {
      v = std::fmax(v, std::abs(x_data[(ix0 + obj->
        indexFixed.data[proc_control_B.mUB_i]) - 2] - obj->ub.data
        [obj->indexFixed.data[proc_control_B.mUB_i] - 1]));
      proc_control_B.mUB_i++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S214>/NLMPC'
boolean_T proc_control::proc_co_feasibleX0ForWorkingSet(real_T workspace_data[],
  const int32_T workspace_size[2], real_T xCurrent_data[],
  s_YaC65yvYSxJoOs4cRNYgnE_proc_T *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T
  *qrmanager)
{
  boolean_T nonDegenerateWset;
  proc_control_B.mWConstr_tmp_tmp = workingset->nActiveConstr - 1;
  proc_control_B.nVar_e = workingset->nVar;
  nonDegenerateWset = true;
  if (workingset->nActiveConstr != 0) {
    proc_control_B.iy_g = 0;
    while (proc_control_B.iy_g <= proc_control_B.mWConstr_tmp_tmp) {
      workspace_data[proc_control_B.iy_g] = workingset->
        bwset.data[proc_control_B.iy_g];
      workspace_data[proc_control_B.iy_g + workspace_size[0]] =
        workingset->bwset.data[proc_control_B.iy_g];
      proc_control_B.iy_g++;
    }

    proc_control_B.ldq = workingset->ldA;
    if (workingset->nActiveConstr != 0) {
      proc_control_B.iy_g = 0;
      proc_control_B.iAcol = (workingset->nActiveConstr - 1) * workingset->ldA +
        1;
      proc_control_B.b_br = 1;
      while (((proc_control_B.ldq > 0) && (proc_control_B.b_br <=
               proc_control_B.iAcol)) || ((proc_control_B.ldq < 0) &&
              (proc_control_B.b_br >= proc_control_B.iAcol))) {
        proc_control_B.ix_hv = 0;
        proc_control_B.c_c = 0.0;
        proc_control_B.jBcol = (proc_control_B.b_br + proc_control_B.nVar_e) - 1;
        proc_control_B.b_ar = proc_control_B.b_br;
        while (proc_control_B.b_ar <= proc_control_B.jBcol) {
          proc_control_B.c_c += workingset->ATwset.data[proc_control_B.b_ar - 1]
            * xCurrent_data[proc_control_B.ix_hv];
          proc_control_B.ix_hv++;
          proc_control_B.b_ar++;
        }

        workspace_data[proc_control_B.iy_g] += -proc_control_B.c_c;
        proc_control_B.iy_g++;
        proc_control_B.b_br += proc_control_B.ldq;
      }
    }

    if (workingset->nActiveConstr >= workingset->nVar) {
      proc_control_B.ldq = 0;
      while (proc_control_B.ldq <= proc_control_B.nVar_e - 1) {
        proc_control_B.ix_hv = qrmanager->ldq * proc_control_B.ldq;
        proc_control_B.iAcol = 0;
        while (proc_control_B.iAcol <= proc_control_B.mWConstr_tmp_tmp) {
          qrmanager->QR.data[proc_control_B.iAcol + proc_control_B.ix_hv] =
            workingset->ATwset.data[workingset->ldA * proc_control_B.iAcol +
            proc_control_B.ldq];
          proc_control_B.iAcol++;
        }

        proc_control_B.ldq++;
      }

      proc_control_factorQR(qrmanager, workingset->nActiveConstr,
                            workingset->nVar);
      proc_control_computeQ_(qrmanager, qrmanager->mrows);
      proc_control_B.ldq = qrmanager->ldq;
      proc_control_B.iy_g = workspace_size[0];
      proc_control_B.iAcol = workspace_size[0] * workspace_size[1];
      if (proc_control_B.iAcol - 1 >= 0) {
        std::memcpy(&proc_control_B.B_data[0], &workspace_data[0],
                    proc_control_B.iAcol * sizeof(real_T));
      }

      proc_control_B.ix_hv = 0;
      while ((proc_control_B.iy_g > 0) && (proc_control_B.ix_hv <=
              proc_control_B.iy_g)) {
        proc_control_B.iAcol = proc_control_B.ix_hv;
        proc_control_B.b_br = proc_control_B.ix_hv + proc_control_B.nVar_e;
        while (proc_control_B.iAcol + 1 <= proc_control_B.b_br) {
          workspace_data[proc_control_B.iAcol] = 0.0;
          proc_control_B.iAcol++;
        }

        proc_control_B.ix_hv += proc_control_B.iy_g;
      }

      proc_control_B.b_br = -1;
      proc_control_B.jBcol = 0;
      while ((proc_control_B.iy_g > 0) && (proc_control_B.jBcol <=
              proc_control_B.iy_g)) {
        proc_control_B.b_ar = -1;
        proc_control_B.iAcol = proc_control_B.jBcol;
        proc_control_B.ix_hv = proc_control_B.jBcol + proc_control_B.nVar_e;
        while (proc_control_B.iAcol + 1 <= proc_control_B.ix_hv) {
          proc_control_B.c_c = 0.0;
          proc_control_B.f_p = 1;
          while (proc_control_B.f_p - 1 <= proc_control_B.mWConstr_tmp_tmp) {
            proc_control_B.c_c += qrmanager->Q.data[proc_control_B.f_p +
              proc_control_B.b_ar] * proc_control_B.B_data[proc_control_B.f_p +
              proc_control_B.b_br];
            proc_control_B.f_p++;
          }

          workspace_data[proc_control_B.iAcol] += proc_control_B.c_c;
          proc_control_B.b_ar += proc_control_B.ldq;
          proc_control_B.iAcol++;
        }

        proc_control_B.b_br += proc_control_B.iy_g;
        proc_control_B.jBcol += proc_control_B.iy_g;
      }

      proc_control_B.b_ar = workingset->nVar;
      while (proc_control_B.b_ar > 0) {
        proc_control_B.iAcol = (proc_control_B.b_ar - 1) * proc_control_B.ldq -
          1;
        proc_control_B.c_c = workspace_data[proc_control_B.b_ar + -1];
        if (proc_control_B.c_c != 0.0) {
          workspace_data[proc_control_B.b_ar + -1] = proc_control_B.c_c /
            qrmanager->QR.data[proc_control_B.b_ar + proc_control_B.iAcol];
          proc_control_B.ix_hv = 1;
          while (proc_control_B.ix_hv - 1 <= proc_control_B.b_ar - 2) {
            workspace_data[proc_control_B.ix_hv + -1] -=
              workspace_data[proc_control_B.b_ar + -1] * qrmanager->
              QR.data[proc_control_B.ix_hv + proc_control_B.iAcol];
            proc_control_B.ix_hv++;
          }
        }

        proc_control_B.b_ar--;
      }

      proc_control_B.b_ar = workingset->nVar;
      while (proc_control_B.b_ar > 0) {
        proc_control_B.iAcol = (proc_control_B.b_ar - 1) * proc_control_B.ldq -
          1;
        proc_control_B.jBcol = (proc_control_B.iy_g + proc_control_B.b_ar) - 1;
        if (workspace_data[proc_control_B.jBcol] != 0.0) {
          workspace_data[proc_control_B.jBcol] /= qrmanager->
            QR.data[proc_control_B.b_ar + proc_control_B.iAcol];
          proc_control_B.ix_hv = 1;
          while (proc_control_B.ix_hv - 1 <= proc_control_B.b_ar - 2) {
            proc_control_B.mWConstr_tmp_tmp = (proc_control_B.iy_g +
              proc_control_B.ix_hv) - 1;
            workspace_data[proc_control_B.mWConstr_tmp_tmp] -=
              qrmanager->QR.data[proc_control_B.ix_hv + proc_control_B.iAcol] *
              workspace_data[proc_control_B.jBcol];
            proc_control_B.ix_hv++;
          }
        }

        proc_control_B.b_ar--;
      }
    } else {
      proc_control_factorQR_h(qrmanager, workingset->ATwset.data,
        workingset->nVar, workingset->nActiveConstr, workingset->ldA);
      proc_control_computeQ_(qrmanager, qrmanager->minRowCol);
      proc_control_B.ldq = qrmanager->ldq;
      proc_control_B.iy_g = workspace_size[0];
      proc_control_B.b_ar = 1;
      while (proc_control_B.b_ar - 1 <= proc_control_B.mWConstr_tmp_tmp) {
        proc_control_B.iAcol = (proc_control_B.b_ar - 1) * proc_control_B.ldq -
          1;
        proc_control_B.c_c = workspace_data[proc_control_B.b_ar + -1];
        proc_control_B.ix_hv = 1;
        while (proc_control_B.ix_hv - 1 <= proc_control_B.b_ar - 2) {
          proc_control_B.c_c -= qrmanager->QR.data[proc_control_B.ix_hv +
            proc_control_B.iAcol] * workspace_data[proc_control_B.ix_hv + -1];
          proc_control_B.ix_hv++;
        }

        workspace_data[proc_control_B.b_ar + -1] = proc_control_B.c_c /
          qrmanager->QR.data[proc_control_B.b_ar + proc_control_B.iAcol];
        proc_control_B.b_ar++;
      }

      proc_control_B.b_ar = 1;
      while (proc_control_B.b_ar - 1 <= proc_control_B.mWConstr_tmp_tmp) {
        proc_control_B.iAcol = (proc_control_B.b_ar - 1) * proc_control_B.ldq -
          1;
        proc_control_B.c_c = workspace_data[(proc_control_B.iy_g +
          proc_control_B.b_ar) - 1];
        proc_control_B.ix_hv = 1;
        while (proc_control_B.ix_hv - 1 <= proc_control_B.b_ar - 2) {
          proc_control_B.c_c -= workspace_data[(proc_control_B.iy_g +
            proc_control_B.ix_hv) - 1] * qrmanager->QR.data[proc_control_B.ix_hv
            + proc_control_B.iAcol];
          proc_control_B.ix_hv++;
        }

        workspace_data[(proc_control_B.b_ar + proc_control_B.iy_g) - 1] =
          proc_control_B.c_c / qrmanager->QR.data[proc_control_B.b_ar +
          proc_control_B.iAcol];
        proc_control_B.b_ar++;
      }

      proc_control_B.iAcol = workspace_size[0] * workspace_size[1];
      if (proc_control_B.iAcol - 1 >= 0) {
        std::memcpy(&proc_control_B.B_data[0], &workspace_data[0],
                    proc_control_B.iAcol * sizeof(real_T));
      }

      proc_control_B.ix_hv = 0;
      while ((proc_control_B.iy_g > 0) && (proc_control_B.ix_hv <=
              proc_control_B.iy_g)) {
        proc_control_B.iAcol = proc_control_B.ix_hv;
        proc_control_B.b_br = proc_control_B.ix_hv + proc_control_B.nVar_e;
        while (proc_control_B.iAcol + 1 <= proc_control_B.b_br) {
          workspace_data[proc_control_B.iAcol] = 0.0;
          proc_control_B.iAcol++;
        }

        proc_control_B.ix_hv += proc_control_B.iy_g;
      }

      proc_control_B.jBcol = 1;
      proc_control_B.b_ar = 0;
      while ((proc_control_B.iy_g > 0) && (proc_control_B.b_ar <=
              proc_control_B.iy_g)) {
        proc_control_B.iAcol = -1;
        proc_control_B.ix_hv = proc_control_B.jBcol;
        proc_control_B.f_p = proc_control_B.jBcol +
          proc_control_B.mWConstr_tmp_tmp;
        while (proc_control_B.ix_hv <= proc_control_B.f_p) {
          proc_control_B.b_br = proc_control_B.iAcol;
          proc_control_B.b_ic = proc_control_B.b_ar;
          proc_control_B.g_n = proc_control_B.b_ar + proc_control_B.nVar_e;
          while (proc_control_B.b_ic + 1 <= proc_control_B.g_n) {
            proc_control_B.b_br++;
            workspace_data[proc_control_B.b_ic] +=
              proc_control_B.B_data[proc_control_B.ix_hv - 1] *
              qrmanager->Q.data[proc_control_B.b_br];
            proc_control_B.b_ic++;
          }

          proc_control_B.iAcol += proc_control_B.ldq;
          proc_control_B.ix_hv++;
        }

        proc_control_B.jBcol += proc_control_B.iy_g;
        proc_control_B.b_ar += proc_control_B.iy_g;
      }
    }

    proc_control_B.iy_g = 0;
    int32_T exitg1;
    do {
      exitg1 = 0;
      if (proc_control_B.iy_g <= proc_control_B.nVar_e - 1) {
        proc_control_B.c_c = workspace_data[proc_control_B.iy_g];
        if (std::isinf(proc_control_B.c_c) || std::isnan(proc_control_B.c_c)) {
          nonDegenerateWset = false;
          exitg1 = 1;
        } else {
          proc_control_B.c_c = workspace_data[proc_control_B.iy_g +
            workspace_size[0]];
          if (std::isinf(proc_control_B.c_c) || std::isnan(proc_control_B.c_c))
          {
            nonDegenerateWset = false;
            exitg1 = 1;
          } else {
            proc_control_B.iy_g++;
          }
        }
      } else {
        proc_control_B.iy_g = 0;
        while (proc_control_B.iy_g <= proc_control_B.nVar_e - 1) {
          workspace_data[proc_control_B.iy_g] +=
            xCurrent_data[proc_control_B.iy_g];
          proc_control_B.iy_g++;
        }

        proc_control_B.c_c = proc_con_maxConstraintViolation(workingset,
          workspace_data);
        proc_control_B.constrViolation_basicX = proc_c_maxConstraintViolation_d
          (workingset, workspace_data, workspace_size[0] + 1);
        if ((proc_control_B.c_c <= 2.2204460492503131E-16) ||
            (proc_control_B.c_c < proc_control_B.constrViolation_basicX)) {
          proc_control_B.iy_g = 0;
          while (proc_control_B.iy_g <= proc_control_B.nVar_e - 1) {
            xCurrent_data[proc_control_B.iy_g] =
              workspace_data[proc_control_B.iy_g];
            proc_control_B.iy_g++;
          }
        } else {
          proc_control_B.iy_g = 0;
          while (proc_control_B.iy_g <= proc_control_B.nVar_e - 1) {
            xCurrent_data[proc_control_B.iy_g] = workspace_data[workspace_size[0]
              + proc_control_B.iy_g];
            proc_control_B.iy_g++;
          }
        }

        exitg1 = 1;
      }
    } while (exitg1 == 0);
  }

  return nonDegenerateWset;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_con_RemoveDependentIneq__f
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *
   qrmanager, s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace)
{
  proc_control_B.nFixedConstr = workingset->nWConstr[0] + workingset->nWConstr[1];
  proc_control_B.nVar_b = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    proc_control_B.tol_e = 1000.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    proc_control_B.nDepIneq = 0;
    while (proc_control_B.nDepIneq <= proc_control_B.nFixedConstr - 1) {
      qrmanager->jpvt.data[proc_control_B.nDepIneq] = 1;
      proc_control_B.nDepIneq++;
    }

    proc_control_B.nDepIneq = proc_control_B.nFixedConstr + 1;
    while (proc_control_B.nDepIneq <= workingset->nActiveConstr) {
      qrmanager->jpvt.data[proc_control_B.nDepIneq - 1] = 0;
      proc_control_B.nDepIneq++;
    }

    proc_control_B.nDepIneq = 0;
    while (proc_control_B.nDepIneq <= workingset->nActiveConstr - 1) {
      proc_control_B.idx_ch = qrmanager->ldq * proc_control_B.nDepIneq;
      proc_control_B.idx_col_g = workingset->ldA * proc_control_B.nDepIneq;
      proc_control_B.k_pj = 1;
      while (proc_control_B.k_pj - 1 <= proc_control_B.nVar_b - 1) {
        qrmanager->QR.data[(proc_control_B.idx_ch + proc_control_B.k_pj) - 1] =
          workingset->ATwset.data[(proc_control_B.idx_col_g +
          proc_control_B.k_pj) - 1];
        proc_control_B.k_pj++;
      }

      proc_control_B.nDepIneq++;
    }

    proc_control_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    proc_control_B.nDepIneq = 0;
    proc_control_B.idx_ch = workingset->nActiveConstr - 1;
    while (proc_control_B.idx_ch + 1 > proc_control_B.nVar_b) {
      proc_control_B.nDepIneq++;
      memspace->workspace_int.data[proc_control_B.nDepIneq - 1] =
        qrmanager->jpvt.data[proc_control_B.idx_ch];
      proc_control_B.idx_ch--;
    }

    if (proc_control_B.idx_ch + 1 <= workingset->nVar) {
      proc_control_B.nVar_b = qrmanager->ldq * proc_control_B.idx_ch +
        proc_control_B.idx_ch;
      while ((proc_control_B.idx_ch + 1 > proc_control_B.nFixedConstr) && (std::
              abs(qrmanager->QR.data[proc_control_B.nVar_b]) <
              proc_control_B.tol_e)) {
        proc_control_B.nDepIneq++;
        memspace->workspace_int.data[proc_control_B.nDepIneq - 1] =
          qrmanager->jpvt.data[proc_control_B.idx_ch];
        proc_control_B.idx_ch--;
        proc_control_B.nVar_b = (proc_control_B.nVar_b - qrmanager->ldq) - 1;
      }
    }

    proc_control_countsort(memspace->workspace_int.data, proc_control_B.nDepIneq,
      memspace->workspace_sort.data, proc_control_B.nFixedConstr + 1,
      workingset->nActiveConstr);
    proc_control_B.nFixedConstr = proc_control_B.nDepIneq;
    while (proc_control_B.nFixedConstr > 0) {
      proc_control_removeConstr(workingset, memspace->
        workspace_int.data[proc_control_B.nFixedConstr - 1]);
      proc_control_B.nFixedConstr--;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbia(int32_T m, int32_T n, const
  real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    proc_control_B.b_iy_e = 0;
    while (proc_control_B.b_iy_e <= n - 1) {
      y_data[proc_control_B.b_iy_e] = -y_data[proc_control_B.b_iy_e];
      proc_control_B.b_iy_e++;
    }

    proc_control_B.iy_dp = 0;
    proc_control_B.b_iy_e = (n - 1) * lda + 1;
    proc_control_B.iac_n = 1;
    while (((lda > 0) && (proc_control_B.iac_n <= proc_control_B.b_iy_e)) ||
           ((lda < 0) && (proc_control_B.iac_n >= proc_control_B.b_iy_e))) {
      proc_control_B.ix_p = 0;
      proc_control_B.c_o = 0.0;
      proc_control_B.d_dz = (proc_control_B.iac_n + m) - 1;
      proc_control_B.ia_m = proc_control_B.iac_n;
      while (proc_control_B.ia_m <= proc_control_B.d_dz) {
        proc_control_B.c_o += A_data[proc_control_B.ia_m - 1] *
          x_data[proc_control_B.ix_p];
        proc_control_B.ix_p++;
        proc_control_B.ia_m++;
      }

      y_data[proc_control_B.iy_dp] += proc_control_B.c_o;
      proc_control_B.iy_dp++;
      proc_control_B.iac_n += lda;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbi(int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    proc_control_B.b_iy_bs = 0;
    while (proc_control_B.b_iy_bs <= n - 1) {
      y_data[proc_control_B.b_iy_bs] = -y_data[proc_control_B.b_iy_bs];
      proc_control_B.b_iy_bs++;
    }

    proc_control_B.iy_b5 = 0;
    proc_control_B.b_iy_bs = (n - 1) * lda + 1;
    proc_control_B.iac_h = 1;
    while (((lda > 0) && (proc_control_B.iac_h <= proc_control_B.b_iy_bs)) ||
           ((lda < 0) && (proc_control_B.iac_h >= proc_control_B.b_iy_bs))) {
      proc_control_B.ix_il = 0;
      proc_control_B.c_ge = 0.0;
      proc_control_B.ia_d = proc_control_B.iac_h;
      while (proc_control_B.ia_d <= proc_control_B.iac_h + 154) {
        proc_control_B.c_ge += A_data[proc_control_B.ia_d - 1] *
          x_data[proc_control_B.ix_il];
        proc_control_B.ix_il++;
        proc_control_B.ia_d++;
      }

      y_data[proc_control_B.iy_b5] += proc_control_B.c_ge;
      proc_control_B.iy_b5++;
      proc_control_B.iac_h += lda;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
real_T proc_control::proc__maxConstraintViolation_du
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj, const real_T x_data[])
{
  real_T v;
  proc_control_B.mLB_o = obj->sizes[3];
  proc_control_B.mUB_n = obj->sizes[4];
  proc_control_B.mFixed_b = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    proc_control_B.mIneq_i = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_B.b_k_d = 0;
      while (proc_control_B.b_k_d <= proc_control_B.mIneq_i) {
        obj->maxConstrWorkspace.data[proc_control_B.b_k_d] = obj->
          bineq.data[proc_control_B.b_k_d];
        proc_control_B.b_k_d++;
      }

      proc_control_xgemv_mtmcjbi(obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, obj->maxConstrWorkspace.data);
      proc_control_B.b_k_d = 0;
      while (proc_control_B.b_k_d <= proc_control_B.mIneq_i) {
        obj->maxConstrWorkspace.data[proc_control_B.b_k_d] -=
          x_data[proc_control_B.b_k_d + 155];
        v = std::fmax(v, obj->maxConstrWorkspace.data[proc_control_B.b_k_d]);
        proc_control_B.b_k_d++;
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcjbi(130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (proc_control_B.b_k_d = 0; proc_control_B.b_k_d < 130;
         proc_control_B.b_k_d++) {
      obj->maxConstrWorkspace.data[proc_control_B.b_k_d] =
        (obj->maxConstrWorkspace.data[proc_control_B.b_k_d] - x_data
         [(proc_control_B.mIneq_i + proc_control_B.b_k_d) + 156]) + x_data
        [(obj->sizes[2] + proc_control_B.b_k_d) + 285];
      v = std::fmax(v, std::abs(obj->
        maxConstrWorkspace.data[proc_control_B.b_k_d]));
    }
  } else {
    v = 0.0;
    proc_control_B.mIneq_i = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_B.b_k_d = 0;
      while (proc_control_B.b_k_d <= proc_control_B.mIneq_i) {
        obj->maxConstrWorkspace.data[proc_control_B.b_k_d] = obj->
          bineq.data[proc_control_B.b_k_d];
        proc_control_B.b_k_d++;
      }

      proc_control_xgemv_mtmcjbia(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      proc_control_B.b_k_d = 0;
      while (proc_control_B.b_k_d <= proc_control_B.mIneq_i) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[proc_control_B.b_k_d]);
        proc_control_B.b_k_d++;
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcjbia(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (proc_control_B.mIneq_i = 0; proc_control_B.mIneq_i < 130;
         proc_control_B.mIneq_i++) {
      v = std::fmax(v, std::abs(obj->
        maxConstrWorkspace.data[proc_control_B.mIneq_i]));
    }
  }

  if (proc_control_B.mLB_o > 0) {
    proc_control_B.mIneq_i = 0;
    while (proc_control_B.mIneq_i <= proc_control_B.mLB_o - 1) {
      v = std::fmax(v, -x_data[obj->indexLB.data[proc_control_B.mIneq_i] - 1] -
                    obj->lb.data[obj->indexLB.data[proc_control_B.mIneq_i] - 1]);
      proc_control_B.mIneq_i++;
    }
  }

  if (proc_control_B.mUB_n > 0) {
    proc_control_B.mLB_o = 0;
    while (proc_control_B.mLB_o <= proc_control_B.mUB_n - 1) {
      v = std::fmax(v, x_data[obj->indexUB.data[proc_control_B.mLB_o] - 1] -
                    obj->ub.data[obj->indexUB.data[proc_control_B.mLB_o] - 1]);
      proc_control_B.mLB_o++;
    }
  }

  if (proc_control_B.mFixed_b > 0) {
    proc_control_B.mUB_n = 0;
    while (proc_control_B.mUB_n <= proc_control_B.mFixed_b - 1) {
      v = std::fmax(v, std::abs(x_data[obj->indexFixed.data[proc_control_B.mUB_n]
        - 1] - obj->ub.data[obj->indexFixed.data[proc_control_B.mUB_n] - 1]));
      proc_control_B.mUB_n++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_PresolveWorkingSet
  (s_SfTiiT1KRClFcMCE02xJjB_proc_T *solution, s_rz4qJMGW78cxvfZBKnU9SC_proc_T
   *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T *workingset,
   s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *qrmanager)
{
  solution->state = 82;
  proc_control_B.b_ea = proc_control_RemoveDependentEq_(memspace, workingset,
    qrmanager);
  if ((proc_control_B.b_ea != -1) && (workingset->nActiveConstr <=
       qrmanager->ldq)) {
    boolean_T guard1{ false };

    boolean_T okWorkingSet;
    proc_contr_RemoveDependentIneq_(workingset, qrmanager, memspace);
    okWorkingSet = proc_co_feasibleX0ForWorkingSet
      (memspace->workspace_double.data, memspace->workspace_double.size,
       solution->xstar.data, workingset, qrmanager);
    guard1 = false;
    if (!okWorkingSet) {
      proc_con_RemoveDependentIneq__f(workingset, qrmanager, memspace);
      okWorkingSet = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         solution->xstar.data, workingset, qrmanager);
      if (!okWorkingSet) {
        solution->state = -7;
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      if (workingset->nWConstr[0] + workingset->nWConstr[1] == workingset->nVar)
      {
        proc_control_B.constrViolation = proc__maxConstraintViolation_du
          (workingset, solution->xstar.data);
        if (proc_control_B.constrViolation > 0.02) {
          solution->state = -2;
        }
      }
    }
  } else {
    solution->state = -3;
    proc_contro_removeAllIneqConstr(workingset);
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbiad(int32_T m, int32_T n, const
  real_T A[24025], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if ((m != 0) && (n != 0)) {
    proc_control_B.ix_ha = 0;
    while (proc_control_B.ix_ha <= m - 1) {
      y_data[proc_control_B.ix_ha] = 0.0;
      proc_control_B.ix_ha++;
    }

    proc_control_B.ix_ha = 0;
    proc_control_B.b_jx = (n - 1) * lda + 1;
    proc_control_B.iac_b = 1;
    while (((lda > 0) && (proc_control_B.iac_b <= proc_control_B.b_jx)) || ((lda
             < 0) && (proc_control_B.iac_b >= proc_control_B.b_jx))) {
      proc_control_B.iy_e = 0;
      proc_control_B.c_kq = (proc_control_B.iac_b + m) - 1;
      proc_control_B.ia_hq = proc_control_B.iac_b;
      while (proc_control_B.ia_hq <= proc_control_B.c_kq) {
        y_data[proc_control_B.iy_e] += A[proc_control_B.ia_hq - 1] *
          x_data[proc_control_B.ix_ha];
        proc_control_B.iy_e++;
        proc_control_B.ia_hq++;
      }

      proc_control_B.ix_ha++;
      proc_control_B.iac_b += lda;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_contro_computeGrad_StoreHx
  (s_syceGAKWionoNWyVws9jI_proc__T *obj, const real_T H[24025], const real_T
   f_data[], const real_T x_data[])
{
  switch (obj->objtype) {
   case 5:
    proc_control_B.maxRegVar = 0;
    while (proc_control_B.maxRegVar <= obj->nvar - 2) {
      obj->grad.data[proc_control_B.maxRegVar] = 0.0;
      proc_control_B.maxRegVar++;
    }

    obj->grad.data[obj->nvar - 1] = obj->gammaScalar;
    break;

   case 3:
    proc_control_xgemv_mtmcjbiad(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    proc_control_B.maxRegVar = 0;
    while (proc_control_B.maxRegVar <= obj->nvar - 1) {
      obj->grad.data[proc_control_B.maxRegVar] = obj->
        Hx.data[proc_control_B.maxRegVar];
      proc_control_B.maxRegVar++;
    }

    if (obj->hasLinear && (obj->nvar >= 1)) {
      proc_control_B.maxRegVar = obj->nvar - 1;
      proc_control_B.iy_ak = 0;
      while (proc_control_B.iy_ak <= proc_control_B.maxRegVar) {
        obj->grad.data[proc_control_B.iy_ak] += f_data[proc_control_B.iy_ak];
        proc_control_B.iy_ak++;
      }
    }
    break;

   default:
    proc_control_B.maxRegVar = obj->maxVar - 1;
    proc_control_xgemv_mtmcjbiad(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    proc_control_B.iy_ak = obj->nvar;
    while (proc_control_B.iy_ak + 1 <= proc_control_B.maxRegVar) {
      obj->Hx.data[proc_control_B.iy_ak] = obj->beta *
        x_data[proc_control_B.iy_ak];
      proc_control_B.iy_ak++;
    }

    proc_control_B.d_i_o = 0;
    while (proc_control_B.d_i_o <= proc_control_B.maxRegVar - 1) {
      obj->grad.data[proc_control_B.d_i_o] = obj->Hx.data[proc_control_B.d_i_o];
      proc_control_B.d_i_o++;
    }

    if (obj->hasLinear && (obj->nvar >= 1)) {
      proc_control_B.maxRegVar = obj->nvar - 1;
      proc_control_B.iy_ak = 0;
      while (proc_control_B.iy_ak <= proc_control_B.maxRegVar) {
        obj->grad.data[proc_control_B.iy_ak] += f_data[proc_control_B.iy_ak];
        proc_control_B.iy_ak++;
      }
    }

    proc_control_B.maxRegVar = (obj->maxVar - obj->nvar) - 1;
    if (proc_control_B.maxRegVar >= 1) {
      proc_control_B.iy_ak = obj->nvar;
      proc_control_B.d_i_o = 0;
      while (proc_control_B.d_i_o <= proc_control_B.maxRegVar - 1) {
        obj->grad.data[proc_control_B.iy_ak] += obj->rho;
        proc_control_B.iy_ak++;
        proc_control_B.d_i_o++;
      }
    }
    break;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
real_T proc_control::proc_contro_computeFval_ReuseHx(const
  s_syceGAKWionoNWyVws9jI_proc__T *obj, real_T workspace_data[], const real_T
  f_data[], const real_T x_data[])
{
  real_T val;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    if (obj->hasLinear) {
      proc_control_B.maxRegVar_e = 0;
      while (proc_control_B.maxRegVar_e <= obj->nvar - 1) {
        workspace_data[proc_control_B.maxRegVar_e] = 0.5 * obj->
          Hx.data[proc_control_B.maxRegVar_e] +
          f_data[proc_control_B.maxRegVar_e];
        proc_control_B.maxRegVar_e++;
      }

      val = 0.0;
      if (obj->nvar >= 1) {
        proc_control_B.maxRegVar_e = 0;
        while (proc_control_B.maxRegVar_e <= obj->nvar - 1) {
          val += workspace_data[proc_control_B.maxRegVar_e] *
            x_data[proc_control_B.maxRegVar_e];
          proc_control_B.maxRegVar_e++;
        }
      }
    } else {
      val = 0.0;
      if (obj->nvar >= 1) {
        proc_control_B.maxRegVar_e = 0;
        while (proc_control_B.maxRegVar_e <= obj->nvar - 1) {
          val += x_data[proc_control_B.maxRegVar_e] * obj->
            Hx.data[proc_control_B.maxRegVar_e];
          proc_control_B.maxRegVar_e++;
        }
      }

      val *= 0.5;
    }
    break;

   default:
    proc_control_B.maxRegVar_e = obj->maxVar - 1;
    if (obj->hasLinear) {
      proc_control_B.d_k_o = 0;
      while (proc_control_B.d_k_o <= obj->nvar - 1) {
        workspace_data[proc_control_B.d_k_o] = f_data[proc_control_B.d_k_o];
        proc_control_B.d_k_o++;
      }

      proc_control_B.d_k_o = obj->maxVar - obj->nvar;
      proc_control_B.c_k_e = 0;
      while (proc_control_B.c_k_e <= proc_control_B.d_k_o - 2) {
        workspace_data[obj->nvar + proc_control_B.c_k_e] = obj->rho;
        proc_control_B.c_k_e++;
      }

      proc_control_B.d_k_o = 0;
      while (proc_control_B.d_k_o <= proc_control_B.maxRegVar_e - 1) {
        workspace_data[proc_control_B.d_k_o] += 0.5 * obj->
          Hx.data[proc_control_B.d_k_o];
        proc_control_B.d_k_o++;
      }

      val = 0.0;
      if (obj->maxVar - 1 >= 1) {
        proc_control_B.maxRegVar_e = 0;
        while (proc_control_B.maxRegVar_e <= obj->maxVar - 2) {
          val += workspace_data[proc_control_B.maxRegVar_e] *
            x_data[proc_control_B.maxRegVar_e];
          proc_control_B.maxRegVar_e++;
        }
      }
    } else {
      val = 0.0;
      if (obj->maxVar - 1 >= 1) {
        proc_control_B.d_k_o = 0;
        while (proc_control_B.d_k_o <= obj->maxVar - 2) {
          val += x_data[proc_control_B.d_k_o] * obj->
            Hx.data[proc_control_B.d_k_o];
          proc_control_B.d_k_o++;
        }
      }

      val *= 0.5;
      proc_control_B.d_k_o = obj->nvar;
      while (proc_control_B.d_k_o + 1 <= proc_control_B.maxRegVar_e) {
        val += x_data[proc_control_B.d_k_o] * obj->rho;
        proc_control_B.d_k_o++;
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c,
  real_T *s)
{
  proc_control_B.roe = *b;
  proc_control_B.absa = std::abs(*a);
  proc_control_B.absb = std::abs(*b);
  if (proc_control_B.absa > proc_control_B.absb) {
    proc_control_B.roe = *a;
  }

  proc_control_B.scale_b = proc_control_B.absa + proc_control_B.absb;
  if (proc_control_B.scale_b == 0.0) {
    *s = 0.0;
    *c = 1.0;
    *a = 0.0;
    *b = 0.0;
  } else {
    proc_control_B.ads = proc_control_B.absa / proc_control_B.scale_b;
    proc_control_B.bds = proc_control_B.absb / proc_control_B.scale_b;
    proc_control_B.scale_b *= std::sqrt(proc_control_B.ads * proc_control_B.ads
      + proc_control_B.bds * proc_control_B.bds);
    if (proc_control_B.roe < 0.0) {
      proc_control_B.scale_b = -proc_control_B.scale_b;
    }

    *c = *a / proc_control_B.scale_b;
    *s = *b / proc_control_B.scale_b;
    if (proc_control_B.absa > proc_control_B.absb) {
      *b = *s;
    } else if (*c != 0.0) {
      *b = 1.0 / *c;
    } else {
      *b = 1.0;
    }

    *a = proc_control_B.scale_b;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_deleteColMoveEnd(s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T
  *obj, int32_T idx)
{
  if (obj->usedPivoting) {
    proc_control_B.i_cr = 1;
    while ((proc_control_B.i_cr <= obj->ncols) && (obj->
            jpvt.data[proc_control_B.i_cr - 1] != idx)) {
      proc_control_B.i_cr++;
    }

    idx = proc_control_B.i_cr;
  }

  if (idx >= obj->ncols) {
    obj->ncols--;
  } else {
    obj->jpvt.data[idx - 1] = obj->jpvt.data[obj->ncols - 1];
    proc_control_B.i_cr = 0;
    while (proc_control_B.i_cr <= obj->minRowCol - 1) {
      obj->QR.data[proc_control_B.i_cr + obj->ldq * (idx - 1)] = obj->QR.data
        [(obj->ncols - 1) * obj->ldq + proc_control_B.i_cr];
      proc_control_B.i_cr++;
    }

    obj->ncols--;
    if (obj->mrows <= obj->ncols) {
      obj->minRowCol = obj->mrows;
    } else {
      obj->minRowCol = obj->ncols;
    }

    if (idx < obj->mrows) {
      if (obj->mrows - 1 <= obj->ncols) {
        proc_control_B.i_cr = obj->mrows - 1;
      } else {
        proc_control_B.i_cr = obj->ncols;
      }

      proc_control_B.k_n = proc_control_B.i_cr;
      proc_control_B.idxRotGCol = (idx - 1) * obj->ldq;
      while (proc_control_B.k_n >= idx) {
        proc_control_B.QRk0 = proc_control_B.k_n + proc_control_B.idxRotGCol;
        proc_control_B.b_temp = obj->QR.data[proc_control_B.QRk0];
        proc_control_xrotg_XzIjz1eG(&obj->QR.data[(proc_control_B.k_n +
          proc_control_B.idxRotGCol) - 1], &proc_control_B.b_temp,
          &proc_control_B.c_c_i, &proc_control_B.b_s);
        obj->QR.data[proc_control_B.QRk0] = proc_control_B.b_temp;
        obj->QR.data[proc_control_B.k_n + obj->ldq * (proc_control_B.k_n - 1)] =
          0.0;
        proc_control_B.QRk0 = obj->ldq * idx + proc_control_B.k_n;
        proc_control_B.b_ix_m = obj->ncols - idx;
        if (proc_control_B.b_ix_m >= 1) {
          proc_control_B.ix_bp = proc_control_B.QRk0 - 1;
          proc_control_B.d_k_m = 0;
          while (proc_control_B.d_k_m <= proc_control_B.b_ix_m - 1) {
            proc_control_B.b_temp = obj->QR.data[proc_control_B.ix_bp] *
              proc_control_B.c_c_i + obj->QR.data[proc_control_B.QRk0] *
              proc_control_B.b_s;
            obj->QR.data[proc_control_B.QRk0] = obj->QR.data[proc_control_B.QRk0]
              * proc_control_B.c_c_i - obj->QR.data[proc_control_B.ix_bp] *
              proc_control_B.b_s;
            obj->QR.data[proc_control_B.ix_bp] = proc_control_B.b_temp;
            proc_control_B.QRk0 += obj->ldq;
            proc_control_B.ix_bp += obj->ldq;
            proc_control_B.d_k_m++;
          }
        }

        proc_control_B.QRk0 = (proc_control_B.k_n - 1) * obj->ldq;
        if (obj->mrows >= 1) {
          proc_control_B.b_ix_m = obj->ldq + proc_control_B.QRk0;
          proc_control_B.ix_bp = 0;
          while (proc_control_B.ix_bp <= obj->mrows - 1) {
            proc_control_B.b_temp = obj->Q.data[proc_control_B.QRk0] *
              proc_control_B.c_c_i + obj->Q.data[proc_control_B.b_ix_m] *
              proc_control_B.b_s;
            obj->Q.data[proc_control_B.b_ix_m] = obj->
              Q.data[proc_control_B.b_ix_m] * proc_control_B.c_c_i - obj->
              Q.data[proc_control_B.QRk0] * proc_control_B.b_s;
            obj->Q.data[proc_control_B.QRk0] = proc_control_B.b_temp;
            proc_control_B.b_ix_m++;
            proc_control_B.QRk0++;
            proc_control_B.ix_bp++;
          }
        }

        proc_control_B.k_n--;
      }

      proc_control_B.k_n = idx + 1;
      while (proc_control_B.k_n <= proc_control_B.i_cr) {
        proc_control_B.idxRotGCol = (proc_control_B.k_n - 1) * obj->ldq;
        proc_control_B.QRk0 = proc_control_B.k_n + proc_control_B.idxRotGCol;
        proc_control_B.b_temp = obj->QR.data[proc_control_B.QRk0];
        proc_control_xrotg_XzIjz1eG(&obj->QR.data[(proc_control_B.k_n +
          proc_control_B.idxRotGCol) - 1], &proc_control_B.b_temp,
          &proc_control_B.c_c_i, &proc_control_B.b_s);
        obj->QR.data[proc_control_B.QRk0] = proc_control_B.b_temp;
        proc_control_B.QRk0 = (obj->ldq + 1) * proc_control_B.k_n;
        proc_control_B.idxRotGCol = obj->ncols - proc_control_B.k_n;
        if (proc_control_B.idxRotGCol >= 1) {
          proc_control_B.b_ix_m = proc_control_B.QRk0 - 1;
          proc_control_B.ix_bp = 0;
          while (proc_control_B.ix_bp <= proc_control_B.idxRotGCol - 1) {
            proc_control_B.b_temp = obj->QR.data[proc_control_B.b_ix_m] *
              proc_control_B.c_c_i + obj->QR.data[proc_control_B.QRk0] *
              proc_control_B.b_s;
            obj->QR.data[proc_control_B.QRk0] = obj->QR.data[proc_control_B.QRk0]
              * proc_control_B.c_c_i - obj->QR.data[proc_control_B.b_ix_m] *
              proc_control_B.b_s;
            obj->QR.data[proc_control_B.b_ix_m] = proc_control_B.b_temp;
            proc_control_B.QRk0 += obj->ldq;
            proc_control_B.b_ix_m += obj->ldq;
            proc_control_B.ix_bp++;
          }
        }

        proc_control_B.idxRotGCol = (proc_control_B.k_n - 1) * obj->ldq;
        if (obj->mrows >= 1) {
          proc_control_B.QRk0 = obj->ldq + proc_control_B.idxRotGCol;
          proc_control_B.b_ix_m = 0;
          while (proc_control_B.b_ix_m <= obj->mrows - 1) {
            proc_control_B.b_temp = obj->Q.data[proc_control_B.idxRotGCol] *
              proc_control_B.c_c_i + obj->Q.data[proc_control_B.QRk0] *
              proc_control_B.b_s;
            obj->Q.data[proc_control_B.QRk0] = obj->Q.data[proc_control_B.QRk0] *
              proc_control_B.c_c_i - obj->Q.data[proc_control_B.idxRotGCol] *
              proc_control_B.b_s;
            obj->Q.data[proc_control_B.idxRotGCol] = proc_control_B.b_temp;
            proc_control_B.QRk0++;
            proc_control_B.idxRotGCol++;
            proc_control_B.b_ix_m++;
          }
        }

        proc_control_B.k_n++;
      }
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
boolean_T proc_control::proc_control_strcmp(const char_T a[7])
{
  static const char_T b[7]{ 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  proc_control_B.ret = memcmp(&a[0], &b[0], 7);
  return proc_control_B.ret == 0;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemm(int32_T m, int32_T n, int32_T k, const
  real_T A[24025], int32_T lda, const real_T B_data[], int32_T ib0, int32_T ldb,
  real_T C_data[], int32_T ldc)
{
  if ((m != 0) && (n != 0)) {
    proc_control_B.br_o = ib0;
    proc_control_B.lastColC_k = (n - 1) * ldc;
    proc_control_B.cr = 0;
    while (((ldc > 0) && (proc_control_B.cr <= proc_control_B.lastColC_k)) ||
           ((ldc < 0) && (proc_control_B.cr >= proc_control_B.lastColC_k))) {
      proc_control_B.ar_d = proc_control_B.cr;
      proc_control_B.ib = proc_control_B.cr + m;
      while (proc_control_B.ar_d + 1 <= proc_control_B.ib) {
        C_data[proc_control_B.ar_d] = 0.0;
        proc_control_B.ar_d++;
      }

      proc_control_B.cr += ldc;
    }

    proc_control_B.cr = 0;
    while (((ldc > 0) && (proc_control_B.cr <= proc_control_B.lastColC_k)) ||
           ((ldc < 0) && (proc_control_B.cr >= proc_control_B.lastColC_k))) {
      proc_control_B.ar_d = -1;
      proc_control_B.ib = proc_control_B.br_o;
      proc_control_B.c_me = proc_control_B.br_o + k;
      while (proc_control_B.ib <= proc_control_B.c_me - 1) {
        proc_control_B.ia_lo = proc_control_B.ar_d;
        proc_control_B.b_ic_a = proc_control_B.cr;
        proc_control_B.d_oi = proc_control_B.cr + m;
        while (proc_control_B.b_ic_a + 1 <= proc_control_B.d_oi) {
          proc_control_B.ia_lo++;
          C_data[proc_control_B.b_ic_a] += B_data[proc_control_B.ib - 1] *
            A[proc_control_B.ia_lo];
          proc_control_B.b_ic_a++;
        }

        proc_control_B.ar_d += lda;
        proc_control_B.ib++;
      }

      proc_control_B.br_o += ldb;
      proc_control_B.cr += ldc;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemm_m(int32_T m, int32_T n, int32_T k, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T B_data[], int32_T ldb,
  real_T C_data[], int32_T ldc)
{
  if ((m != 0) && (n != 0)) {
    proc_control_B.lastColC = (n - 1) * ldc;
    proc_control_B.br_d = 0;
    while (((ldc > 0) && (proc_control_B.br_d <= proc_control_B.lastColC)) ||
           ((ldc < 0) && (proc_control_B.br_d >= proc_control_B.lastColC))) {
      proc_control_B.b_cr = proc_control_B.br_d;
      proc_control_B.ar = proc_control_B.br_d + m;
      while (proc_control_B.b_cr + 1 <= proc_control_B.ar) {
        C_data[proc_control_B.b_cr] = 0.0;
        proc_control_B.b_cr++;
      }

      proc_control_B.br_d += ldc;
    }

    proc_control_B.br_d = -1;
    proc_control_B.b_cr = 0;
    while (((ldc > 0) && (proc_control_B.b_cr <= proc_control_B.lastColC)) ||
           ((ldc < 0) && (proc_control_B.b_cr >= proc_control_B.lastColC))) {
      proc_control_B.ar = ia0;
      proc_control_B.b_ic_k = proc_control_B.b_cr;
      proc_control_B.c_oh = proc_control_B.b_cr + m;
      while (proc_control_B.b_ic_k + 1 <= proc_control_B.c_oh) {
        proc_control_B.temp_pc = 0.0;
        proc_control_B.w = 1;
        while (proc_control_B.w - 1 <= k - 1) {
          proc_control_B.temp_pc += A_data[(proc_control_B.w + proc_control_B.ar)
            - 2] * B_data[proc_control_B.w + proc_control_B.br_d];
          proc_control_B.w++;
        }

        C_data[proc_control_B.b_ic_k] += proc_control_B.temp_pc;
        proc_control_B.ar += lda;
        proc_control_B.b_ic_k++;
      }

      proc_control_B.br_d += ldb;
      proc_control_B.b_cr += ldc;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
int32_T proc_control::proc_control_ixamax_k(int32_T n, const real_T x_data[],
  int32_T incx)
{
  int32_T idxmax;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      proc_control_B.ix_jd = 0;
      proc_control_B.smax_h = std::abs(x_data[0]);
      proc_control_B.k_a2 = 2;
      while (proc_control_B.k_a2 <= n) {
        proc_control_B.ix_jd += incx;
        proc_control_B.s_d = std::abs(x_data[proc_control_B.ix_jd]);
        if (proc_control_B.s_d > proc_control_B.smax_h) {
          idxmax = proc_control_B.k_a2;
          proc_control_B.smax_h = proc_control_B.s_d;
        }

        proc_control_B.k_a2++;
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_fullColLDL2_(s_NgV9GZ7yjGpklMLIU8C2cB_proc_T
  *obj, int32_T LD_offset, int32_T NColsRemain)
{
  proc_control_B.LDimSizeP1_j = obj->ldm;
  proc_control_B.k_j = 0;
  while (proc_control_B.k_j <= NColsRemain - 1) {
    proc_control_B.LD_diagOffset_m = ((proc_control_B.LDimSizeP1_j + 1) *
      proc_control_B.k_j + LD_offset) - 1;
    proc_control_B.alpha1 = -1.0 / obj->FMat.data[proc_control_B.LD_diagOffset_m];
    proc_control_B.subMatrixDim = (NColsRemain - proc_control_B.k_j) - 2;
    proc_control_B.jA_eu = 1;
    while (proc_control_B.jA_eu - 1 <= proc_control_B.subMatrixDim) {
      obj->workspace_ = obj->FMat.data[proc_control_B.LD_diagOffset_m +
        proc_control_B.jA_eu];
      proc_control_B.jA_eu++;
    }

    proc_control_B.y_oo = obj->workspace_;
    if (!(proc_control_B.alpha1 == 0.0)) {
      proc_control_B.jA_eu = (proc_control_B.LD_diagOffset_m +
        proc_control_B.LDimSizeP1_j) + 1;
      proc_control_B.j_dt = 0;
      while (proc_control_B.j_dt <= proc_control_B.subMatrixDim) {
        if (proc_control_B.y_oo != 0.0) {
          proc_control_B.temp_by = proc_control_B.y_oo * proc_control_B.alpha1;
          proc_control_B.ijA_k = proc_control_B.jA_eu;
          proc_control_B.b_j4 = proc_control_B.subMatrixDim +
            proc_control_B.jA_eu;
          while (proc_control_B.ijA_k + 1 <= proc_control_B.b_j4 + 1) {
            obj->FMat.data[proc_control_B.ijA_k] += obj->workspace_ *
              proc_control_B.temp_by;
            proc_control_B.ijA_k++;
          }
        }

        proc_control_B.jA_eu += obj->ldm;
        proc_control_B.j_dt++;
      }
    }

    proc_control_B.jA_eu = 1;
    while (proc_control_B.jA_eu - 1 <= proc_control_B.subMatrixDim) {
      proc_control_B.j_dt = proc_control_B.LD_diagOffset_m +
        proc_control_B.jA_eu;
      obj->FMat.data[proc_control_B.j_dt] /= obj->
        FMat.data[proc_control_B.LD_diagOffset_m];
      proc_control_B.jA_eu++;
    }

    proc_control_B.k_j++;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_partialColLDL3_(s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *
  obj, int32_T LD_offset, int32_T NColsRemain)
{
  proc_control_B.LDimSizeP1_k = obj->ldm + 1;
  for (proc_control_B.k_h = 0; proc_control_B.k_h < 48; proc_control_B.k_h++) {
    proc_control_B.subRows = (NColsRemain - proc_control_B.k_h) - 1;
    proc_control_B.LD_diagOffset_g = (proc_control_B.LDimSizeP1_k *
      proc_control_B.k_h + LD_offset) - 1;
    proc_control_B.idx_l = 0;
    while (proc_control_B.idx_l <= proc_control_B.subRows) {
      obj->workspace_ = obj->FMat.data[proc_control_B.LD_diagOffset_g +
        proc_control_B.idx_l];
      proc_control_B.idx_l++;
    }

    proc_control_B.idx_l = 0;
    while (proc_control_B.idx_l <= NColsRemain - 1) {
      obj->workspace2_ = obj->workspace_;
      proc_control_B.idx_l++;
    }

    proc_control_B.idx_l = obj->ldm;
    proc_control_B.y_kx = obj->workspace2_;
    if ((NColsRemain != 0) && (proc_control_B.k_h != 0)) {
      proc_control_B.ix_o = LD_offset + proc_control_B.k_h;
      proc_control_B.FMat_offset = (proc_control_B.k_h - 1) * obj->ldm + 1;
      proc_control_B.br = 1;
      while (((proc_control_B.idx_l > 0) && (proc_control_B.br <=
               proc_control_B.FMat_offset)) || ((proc_control_B.idx_l < 0) &&
              (proc_control_B.br >= proc_control_B.FMat_offset))) {
        proc_control_B.d_a = (proc_control_B.br + NColsRemain) - 1;
        proc_control_B.ia_n = proc_control_B.br;
        while (proc_control_B.ia_n <= proc_control_B.d_a) {
          proc_control_B.y_kx += -obj->FMat.data[proc_control_B.ix_o - 1] *
            obj->workspace_;
          proc_control_B.ia_n++;
        }

        proc_control_B.ix_o += obj->ldm;
        proc_control_B.br += proc_control_B.idx_l;
      }
    }

    obj->workspace2_ = proc_control_B.y_kx;
    proc_control_B.idx_l = 0;
    while (proc_control_B.idx_l <= NColsRemain - 1) {
      obj->workspace_ = proc_control_B.y_kx;
      proc_control_B.idx_l++;
    }

    proc_control_B.idx_l = 0;
    while (proc_control_B.idx_l <= proc_control_B.subRows) {
      obj->FMat.data[proc_control_B.LD_diagOffset_g + proc_control_B.idx_l] =
        obj->workspace_;
      proc_control_B.idx_l++;
    }

    proc_control_B.idx_l = 1;
    while (proc_control_B.idx_l - 1 <= proc_control_B.subRows - 1) {
      proc_control_B.ix_o = proc_control_B.LD_diagOffset_g +
        proc_control_B.idx_l;
      obj->FMat.data[proc_control_B.ix_o] /= obj->
        FMat.data[proc_control_B.LD_diagOffset_g];
      proc_control_B.idx_l++;
    }
  }

  proc_control_B.k_h = 48;
  while (proc_control_B.k_h <= NColsRemain - 1) {
    proc_control_B.LD_diagOffset_g = NColsRemain - proc_control_B.k_h;
    if (proc_control_B.LD_diagOffset_g >= 48) {
      proc_control_B.subRows = 48;
    } else {
      proc_control_B.subRows = proc_control_B.LD_diagOffset_g;
    }

    proc_control_B.LD_diagOffset_tmp = proc_control_B.k_h +
      proc_control_B.subRows;
    proc_control_B.idx_l = proc_control_B.k_h;
    while (proc_control_B.idx_l <= proc_control_B.LD_diagOffset_tmp - 1) {
      proc_control_B.ix_o = proc_control_B.LD_diagOffset_tmp -
        proc_control_B.idx_l;
      proc_control_B.FMat_offset = (proc_control_B.LDimSizeP1_k *
        proc_control_B.idx_l + LD_offset) - 1;
      for (proc_control_B.br = 0; proc_control_B.br < 48; proc_control_B.br++) {
        obj->workspace2_ = obj->FMat.data[((LD_offset + proc_control_B.idx_l) +
          proc_control_B.br * obj->ldm) - 1];
      }

      proc_control_B.br = obj->ldm;
      if (proc_control_B.ix_o != 0) {
        proc_control_B.d_a = (obj->ldm * 47 + proc_control_B.idx_l) + 1;
        proc_control_B.ia_n = proc_control_B.idx_l + 1;
        while (((proc_control_B.br > 0) && (proc_control_B.ia_n <=
                 proc_control_B.d_a)) || ((proc_control_B.br < 0) &&
                (proc_control_B.ia_n >= proc_control_B.d_a))) {
          proc_control_B.iy_ov = proc_control_B.FMat_offset;
          proc_control_B.h_h = (proc_control_B.ia_n + proc_control_B.ix_o) - 1;
          proc_control_B.b_ia_d = proc_control_B.ia_n;
          while (proc_control_B.b_ia_d <= proc_control_B.h_h) {
            obj->FMat.data[proc_control_B.iy_ov] += obj->workspace_ *
              -obj->workspace2_;
            proc_control_B.iy_ov++;
            proc_control_B.b_ia_d++;
          }

          proc_control_B.ia_n += proc_control_B.br;
        }
      }

      proc_control_B.idx_l++;
    }

    if (proc_control_B.LD_diagOffset_tmp < NColsRemain) {
      proc_control_B.LD_diagOffset_g -= proc_control_B.subRows;
      proc_control_B.idx_l = ((LD_offset + proc_control_B.subRows) +
        proc_control_B.LDimSizeP1_k * proc_control_B.k_h) - 1;
      for (proc_control_B.ix_o = 0; proc_control_B.ix_o < 48;
           proc_control_B.ix_o++) {
        proc_control_B.FMat_offset = (LD_offset + proc_control_B.k_h) +
          proc_control_B.ix_o * obj->ldm;
        proc_control_B.br = 0;
        while (proc_control_B.br <= proc_control_B.subRows - 1) {
          obj->workspace2_ = obj->FMat.data[(proc_control_B.FMat_offset +
            proc_control_B.br) - 1];
          proc_control_B.br++;
        }
      }

      proc_control_B.ix_o = obj->ldm;
      proc_control_B.FMat_offset = obj->ldm;
      if ((proc_control_B.LD_diagOffset_g != 0) && (proc_control_B.subRows != 0))
      {
        proc_control_B.subRows = (proc_control_B.subRows - 1) * obj->ldm +
          proc_control_B.idx_l;
        proc_control_B.br = 0;
        while (((proc_control_B.FMat_offset > 0) && (proc_control_B.idx_l <=
                 proc_control_B.subRows)) || ((proc_control_B.FMat_offset < 0) &&
                (proc_control_B.idx_l >= proc_control_B.subRows))) {
          proc_control_B.br++;
          proc_control_B.d_a = proc_control_B.ix_o * 47 + proc_control_B.br;
          proc_control_B.ia_n = proc_control_B.br;
          while (((proc_control_B.ix_o > 0) && (proc_control_B.ia_n <=
                   proc_control_B.d_a)) || ((proc_control_B.ix_o < 0) &&
                  (proc_control_B.ia_n >= proc_control_B.d_a))) {
            proc_control_B.iy_ov = proc_control_B.idx_l;
            proc_control_B.h_h = proc_control_B.idx_l +
              proc_control_B.LD_diagOffset_g;
            while (proc_control_B.iy_ov + 1 <= proc_control_B.h_h) {
              obj->FMat.data[proc_control_B.iy_ov] += -obj->workspace2_ *
                obj->workspace_;
              proc_control_B.iy_ov++;
            }

            proc_control_B.ia_n += proc_control_B.ix_o;
          }

          proc_control_B.idx_l += proc_control_B.FMat_offset;
        }
      }
    }

    proc_control_B.k_h += 48;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
int32_T proc_control::proc_control_xpotrf(int32_T n, real_T A_data[], int32_T
  lda)
{
  int32_T info;
  boolean_T exitg1;
  info = 0;
  proc_control_B.b_j_p = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.b_j_p <= n - 1)) {
    proc_control_B.idxA1j = proc_control_B.b_j_p * lda;
    proc_control_B.idxAjj_i = proc_control_B.idxA1j + proc_control_B.b_j_p;
    proc_control_B.ssq_n = 0.0;
    if (proc_control_B.b_j_p >= 1) {
      proc_control_B.b_ix_j = proc_control_B.idxA1j;
      proc_control_B.b_iy_c = proc_control_B.idxA1j;
      proc_control_B.iy_c0 = 0;
      while (proc_control_B.iy_c0 <= proc_control_B.b_j_p - 1) {
        proc_control_B.ssq_n += A_data[proc_control_B.b_ix_j] *
          A_data[proc_control_B.b_iy_c];
        proc_control_B.b_ix_j++;
        proc_control_B.b_iy_c++;
        proc_control_B.iy_c0++;
      }
    }

    proc_control_B.ssq_n = A_data[proc_control_B.idxAjj_i] -
      proc_control_B.ssq_n;
    if (proc_control_B.ssq_n > 0.0) {
      proc_control_B.ssq_n = std::sqrt(proc_control_B.ssq_n);
      A_data[proc_control_B.idxAjj_i] = proc_control_B.ssq_n;
      if (proc_control_B.b_j_p + 1 < n) {
        proc_control_B.b_ix_j = (n - proc_control_B.b_j_p) - 2;
        proc_control_B.b_iy_c = (proc_control_B.idxA1j + lda) + 1;
        proc_control_B.idxAjj_i += lda;
        if ((proc_control_B.b_j_p != 0) && (proc_control_B.b_ix_j + 1 != 0)) {
          proc_control_B.iy_c0 = proc_control_B.idxAjj_i;
          proc_control_B.b_et = lda * proc_control_B.b_ix_j +
            proc_control_B.b_iy_c;
          while (((lda > 0) && (proc_control_B.b_iy_c <= proc_control_B.b_et)) ||
                 ((lda < 0) && (proc_control_B.b_iy_c >= proc_control_B.b_et)))
          {
            proc_control_B.ix_nm = proc_control_B.idxA1j;
            proc_control_B.c_p = 0.0;
            proc_control_B.d_j = (proc_control_B.b_iy_c + proc_control_B.b_j_p)
              - 1;
            proc_control_B.ia_l2 = proc_control_B.b_iy_c;
            while (proc_control_B.ia_l2 <= proc_control_B.d_j) {
              proc_control_B.c_p += A_data[proc_control_B.ia_l2 - 1] *
                A_data[proc_control_B.ix_nm];
              proc_control_B.ix_nm++;
              proc_control_B.ia_l2++;
            }

            A_data[proc_control_B.iy_c0] += -proc_control_B.c_p;
            proc_control_B.iy_c0 += lda;
            proc_control_B.b_iy_c += lda;
          }
        }

        proc_control_B.ssq_n = 1.0 / proc_control_B.ssq_n;
        proc_control_B.idxA1j = (lda * proc_control_B.b_ix_j +
          proc_control_B.idxAjj_i) + 1;
        while (((lda > 0) && (proc_control_B.idxAjj_i + 1 <=
                              proc_control_B.idxA1j)) || ((lda < 0) &&
                (proc_control_B.idxAjj_i + 1 >= proc_control_B.idxA1j))) {
          A_data[proc_control_B.idxAjj_i] *= proc_control_B.ssq_n;
          proc_control_B.idxAjj_i += lda;
        }
      }

      proc_control_B.b_j_p++;
    } else {
      A_data[proc_control_B.idxAjj_i] = proc_control_B.ssq_n;
      info = proc_control_B.b_j_p + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbiadz(int32_T m, int32_T n, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  if (m != 0) {
    proc_control_B.ix_g = 0;
    while (proc_control_B.ix_g <= m - 1) {
      y_data[proc_control_B.ix_g] = 0.0;
      proc_control_B.ix_g++;
    }

    proc_control_B.ix_g = 0;
    proc_control_B.b_njm = (n - 1) * lda + ia0;
    proc_control_B.iac_l = ia0;
    while (((lda > 0) && (proc_control_B.iac_l <= proc_control_B.b_njm)) ||
           ((lda < 0) && (proc_control_B.iac_l >= proc_control_B.b_njm))) {
      proc_control_B.iy_jh = 0;
      proc_control_B.c_e = (proc_control_B.iac_l + m) - 1;
      proc_control_B.ia_cg = proc_control_B.iac_l;
      while (proc_control_B.ia_cg <= proc_control_B.c_e) {
        y_data[proc_control_B.iy_jh] += A_data[proc_control_B.ia_cg - 1] *
          x_data[proc_control_B.ix_g];
        proc_control_B.iy_jh++;
        proc_control_B.ia_cg++;
      }

      proc_control_B.ix_g++;
      proc_control_B.iac_l += lda;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_factor(s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *obj,
  const real_T A[24025], int32_T ndims, int32_T ldA)
{
  obj->ndims = ndims;
  proc_control_B.b_idx_m = 0;
  while (proc_control_B.b_idx_m <= ndims - 1) {
    proc_control_B.ix0_l = ldA * proc_control_B.b_idx_m;
    proc_control_B.idx_n2 = obj->ldm * proc_control_B.b_idx_m;
    proc_control_B.k_o = 1;
    while (proc_control_B.k_o - 1 <= ndims - 1) {
      obj->FMat.data[(proc_control_B.idx_n2 + proc_control_B.k_o) - 1] = A
        [(proc_control_B.ix0_l + proc_control_B.k_o) - 1];
      proc_control_B.k_o++;
    }

    proc_control_B.b_idx_m++;
  }

  obj->info = proc_control_xpotrf(ndims, obj->FMat.data, obj->ldm);
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_solve(const s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *obj,
  real_T rhs_data[])
{
  if (obj->ndims != 0) {
    proc_control_B.b_j_et = 0;
    while (proc_control_B.b_j_et <= obj->ndims - 1) {
      proc_control_B.jA_p = proc_control_B.b_j_et * obj->ldm;
      proc_control_B.temp_a = rhs_data[proc_control_B.b_j_et];
      proc_control_B.ix_i1 = 0;
      while (proc_control_B.ix_i1 <= proc_control_B.b_j_et - 1) {
        proc_control_B.temp_a -= obj->FMat.data[proc_control_B.jA_p +
          proc_control_B.ix_i1] * rhs_data[proc_control_B.ix_i1];
        proc_control_B.ix_i1++;
      }

      rhs_data[proc_control_B.b_j_et] = proc_control_B.temp_a / obj->
        FMat.data[proc_control_B.jA_p + proc_control_B.b_j_et];
      proc_control_B.b_j_et++;
    }

    proc_control_B.b_j_et = obj->ndims - 1;
    while (proc_control_B.b_j_et + 1 > 0) {
      proc_control_B.jjA_h = proc_control_B.b_j_et * obj->ldm +
        proc_control_B.b_j_et;
      rhs_data[proc_control_B.b_j_et] /= obj->FMat.data[proc_control_B.jjA_h];
      proc_control_B.jA_p = 1;
      while (proc_control_B.jA_p - 1 <= proc_control_B.b_j_et - 1) {
        proc_control_B.ix_i1 = proc_control_B.b_j_et - proc_control_B.jA_p;
        rhs_data[proc_control_B.ix_i1] -= obj->FMat.data[proc_control_B.jjA_h -
          proc_control_B.jA_p] * rhs_data[proc_control_B.b_j_et];
        proc_control_B.jA_p++;
      }

      proc_control_B.b_j_et--;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_factor_p(s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *obj,
  const real_T A[24025], int32_T ndims, int32_T ldA)
{
  proc_control_B.LDimSizeP1 = obj->ldm + 1;
  obj->ndims = ndims;
  proc_control_B.A_maxDiag_idx = 0;
  while (proc_control_B.A_maxDiag_idx <= ndims - 1) {
    proc_control_B.LD_diagOffset = ldA * proc_control_B.A_maxDiag_idx;
    proc_control_B.order_k = obj->ldm * proc_control_B.A_maxDiag_idx;
    proc_control_B.b_k_p = 1;
    while (proc_control_B.b_k_p - 1 <= ndims - 1) {
      obj->FMat.data[(proc_control_B.order_k + proc_control_B.b_k_p) - 1] = A
        [(proc_control_B.LD_diagOffset + proc_control_B.b_k_p) - 1];
      proc_control_B.b_k_p++;
    }

    proc_control_B.A_maxDiag_idx++;
  }

  proc_control_B.A_maxDiag_idx = proc_control_ixamax_k(ndims, obj->FMat.data,
    obj->ldm + 1) - 1;
  obj->regTol_ = std::fmax(std::abs(obj->FMat.data[obj->ldm *
    proc_control_B.A_maxDiag_idx + proc_control_B.A_maxDiag_idx]) *
    2.2204460492503131E-16, 0.0);
  if (ndims > 128) {
    boolean_T exitg1;
    proc_control_B.A_maxDiag_idx = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.A_maxDiag_idx < ndims)) {
      proc_control_B.LD_diagOffset = proc_control_B.LDimSizeP1 *
        proc_control_B.A_maxDiag_idx + 1;
      proc_control_B.order_k = ndims - proc_control_B.A_maxDiag_idx;
      if (proc_control_B.A_maxDiag_idx + 48 <= ndims) {
        proc_control_partialColLDL3_(obj, proc_control_B.LD_diagOffset,
          proc_control_B.order_k);
        proc_control_B.A_maxDiag_idx += 48;
      } else {
        proc_control_fullColLDL2_(obj, proc_control_B.LD_diagOffset,
          proc_control_B.order_k);
        exitg1 = true;
      }
    }
  } else {
    proc_control_fullColLDL2_(obj, 1, ndims);
  }

  if (obj->ConvexCheck) {
    proc_control_B.LDimSizeP1 = 0;
    int32_T exitg2;
    do {
      exitg2 = 0;
      if (proc_control_B.LDimSizeP1 <= ndims - 1) {
        if (obj->FMat.data[obj->ldm * proc_control_B.LDimSizeP1 +
            proc_control_B.LDimSizeP1] <= 0.0) {
          obj->info = -proc_control_B.LDimSizeP1 - 1;
          exitg2 = 1;
        } else {
          proc_control_B.LDimSizeP1++;
        }
      } else {
        obj->ConvexCheck = false;
        exitg2 = 1;
      }
    } while (exitg2 == 0);
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_solve_l(const s_NgV9GZ7yjGpklMLIU8C2cB_proc_T
  *obj, real_T rhs_data[])
{
  proc_control_B.n_tmp = obj->ndims - 1;
  if (obj->ndims != 0) {
    proc_control_B.jA_o3 = 0;
    while (proc_control_B.jA_o3 <= proc_control_B.n_tmp) {
      proc_control_B.jjA = proc_control_B.jA_o3 * obj->ldm +
        proc_control_B.jA_o3;
      proc_control_B.b_km = proc_control_B.n_tmp - proc_control_B.jA_o3;
      proc_control_B.i_pa = 1;
      while (proc_control_B.i_pa - 1 <= proc_control_B.b_km - 1) {
        proc_control_B.ix_aw = proc_control_B.jA_o3 + proc_control_B.i_pa;
        rhs_data[proc_control_B.ix_aw] -= obj->FMat.data[proc_control_B.jjA +
          proc_control_B.i_pa] * rhs_data[proc_control_B.jA_o3];
        proc_control_B.i_pa++;
      }

      proc_control_B.jA_o3++;
    }
  }

  proc_control_B.b_km = 0;
  while (proc_control_B.b_km <= proc_control_B.n_tmp) {
    rhs_data[proc_control_B.b_km] /= obj->FMat.data[obj->ldm *
      proc_control_B.b_km + proc_control_B.b_km];
    proc_control_B.b_km++;
  }

  if (obj->ndims != 0) {
    proc_control_B.b_km = obj->ndims - 1;
    while (proc_control_B.b_km + 1 > 0) {
      proc_control_B.jA_o3 = proc_control_B.b_km * obj->ldm;
      proc_control_B.temp_o5 = rhs_data[proc_control_B.b_km];
      proc_control_B.jjA = obj->ndims;
      while (proc_control_B.jjA >= proc_control_B.b_km + 2) {
        proc_control_B.temp_o5 -= obj->FMat.data[(proc_control_B.jA_o3 +
          proc_control_B.jjA) - 1] * rhs_data[proc_control_B.jjA - 1];
        proc_control_B.jjA--;
      }

      rhs_data[proc_control_B.b_km] = proc_control_B.temp_o5;
      proc_control_B.b_km--;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_compute_deltax(const real_T H[24025],
  s_SfTiiT1KRClFcMCE02xJjB_proc_T *solution, s_rz4qJMGW78cxvfZBKnU9SC_proc_T
  *memspace, const s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *qrmanager,
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *cholmanager, const
  s_syceGAKWionoNWyVws9jI_proc__T *objective, boolean_T alwaysPositiveDef)
{
  proc_control_B.nVar_a = qrmanager->mrows - 1;
  proc_control_B.mNull = qrmanager->mrows - qrmanager->ncols;
  if (proc_control_B.mNull <= 0) {
    proc_control_B.mNull = 0;
    while (proc_control_B.mNull <= proc_control_B.nVar_a) {
      solution->searchDir.data[proc_control_B.mNull] = 0.0;
      proc_control_B.mNull++;
    }
  } else {
    proc_control_B.nullStartIdx = 0;
    while (proc_control_B.nullStartIdx <= proc_control_B.nVar_a) {
      solution->searchDir.data[proc_control_B.nullStartIdx] =
        -objective->grad.data[proc_control_B.nullStartIdx];
      proc_control_B.nullStartIdx++;
    }

    if (qrmanager->ncols <= 0) {
      switch (objective->objtype) {
       case 5:
        break;

       case 3:
        if (alwaysPositiveDef) {
          proc_control_factor(cholmanager, H, qrmanager->mrows, qrmanager->mrows);
        } else {
          proc_control_factor_p(cholmanager, H, qrmanager->mrows,
                                qrmanager->mrows);
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else if (alwaysPositiveDef) {
          proc_control_solve(cholmanager, solution->searchDir.data);
        } else {
          proc_control_solve_l(cholmanager, solution->searchDir.data);
        }
        break;

       default:
        if (alwaysPositiveDef) {
          proc_control_factor(cholmanager, H, objective->nvar, objective->nvar);
          if (cholmanager->info != 0) {
            solution->state = -6;
          } else {
            proc_control_solve(cholmanager, solution->searchDir.data);
            proc_control_B.c_ft = 1.0 / objective->beta;
            proc_control_B.mNull = objective->nvar;
            while (proc_control_B.mNull + 1 <= qrmanager->mrows) {
              solution->searchDir.data[proc_control_B.mNull] *=
                proc_control_B.c_ft;
              proc_control_B.mNull++;
            }
          }
        }
        break;
      }
    } else {
      proc_control_B.nullStartIdx = qrmanager->ldq * qrmanager->ncols + 1;
      if (objective->objtype == 5) {
        proc_control_B.b_ldw = 0;
        while (proc_control_B.b_ldw <= proc_control_B.mNull - 1) {
          memspace->workspace_double.data[proc_control_B.b_ldw] =
            -qrmanager->Q.data[(qrmanager->ncols + proc_control_B.b_ldw) *
            qrmanager->ldq + proc_control_B.nVar_a];
          proc_control_B.b_ldw++;
        }

        proc_control_xgemv_mtmcjbiadz(qrmanager->mrows, proc_control_B.mNull,
          qrmanager->Q.data, proc_control_B.nullStartIdx, qrmanager->ldq,
          memspace->workspace_double.data, solution->searchDir.data);
      } else {
        if (objective->objtype == 3) {
          proc_control_xgemm(qrmanager->mrows, proc_control_B.mNull,
                             qrmanager->mrows, H, qrmanager->mrows,
                             qrmanager->Q.data, proc_control_B.nullStartIdx,
                             qrmanager->ldq, memspace->workspace_double.data,
                             memspace->workspace_double.size[0]);
          proc_control_xgemm_m(proc_control_B.mNull, proc_control_B.mNull,
                               qrmanager->mrows, qrmanager->Q.data,
                               proc_control_B.nullStartIdx, qrmanager->ldq,
                               memspace->workspace_double.data,
                               memspace->workspace_double.size[0],
                               cholmanager->FMat.data, cholmanager->ldm);
        } else if (alwaysPositiveDef) {
          proc_control_B.b_ldw = memspace->workspace_double.size[0];
          proc_control_xgemm(objective->nvar, proc_control_B.mNull,
                             objective->nvar, H, objective->nvar,
                             qrmanager->Q.data, proc_control_B.nullStartIdx,
                             qrmanager->ldq, memspace->workspace_double.data,
                             memspace->workspace_double.size[0]);
          proc_control_B.order = 0;
          while (proc_control_B.order <= proc_control_B.mNull - 1) {
            proc_control_B.ix_m = objective->nvar;
            while (proc_control_B.ix_m + 1 <= qrmanager->mrows) {
              memspace->workspace_double.data[proc_control_B.ix_m +
                memspace->workspace_double.size[0] * proc_control_B.order] =
                qrmanager->Q.data[(proc_control_B.order + qrmanager->ncols) *
                qrmanager->Q.size[0] + proc_control_B.ix_m] * objective->beta;
              proc_control_B.ix_m++;
            }

            proc_control_B.order++;
          }

          proc_control_xgemm_m(proc_control_B.mNull, proc_control_B.mNull,
                               qrmanager->mrows, qrmanager->Q.data,
                               proc_control_B.nullStartIdx, qrmanager->ldq,
                               memspace->workspace_double.data,
                               proc_control_B.b_ldw, cholmanager->FMat.data,
                               cholmanager->ldm);
        }

        if (alwaysPositiveDef) {
          cholmanager->ndims = proc_control_B.mNull;
          cholmanager->info = proc_control_xpotrf(proc_control_B.mNull,
            cholmanager->FMat.data, cholmanager->ldm);
        } else {
          proc_control_B.b_ldw = cholmanager->ldm + 1;
          cholmanager->ndims = proc_control_B.mNull;
          proc_control_B.b_nullStart = proc_control_ixamax_k
            (proc_control_B.mNull, cholmanager->FMat.data, cholmanager->ldm + 1)
            - 1;
          cholmanager->regTol_ = std::fmax(std::abs(cholmanager->
            FMat.data[cholmanager->ldm * proc_control_B.b_nullStart +
            proc_control_B.b_nullStart]) * 2.2204460492503131E-16, 0.0);
          if (proc_control_B.mNull > 128) {
            boolean_T exitg1;
            proc_control_B.ix_m = 0;
            exitg1 = false;
            while ((!exitg1) && (proc_control_B.ix_m < proc_control_B.mNull)) {
              proc_control_B.b_nullStart = proc_control_B.b_ldw *
                proc_control_B.ix_m + 1;
              proc_control_B.order = proc_control_B.mNull - proc_control_B.ix_m;
              if (proc_control_B.ix_m + 48 <= proc_control_B.mNull) {
                proc_control_partialColLDL3_(cholmanager,
                  proc_control_B.b_nullStart, proc_control_B.order);
                proc_control_B.ix_m += 48;
              } else {
                proc_control_fullColLDL2_(cholmanager,
                  proc_control_B.b_nullStart, proc_control_B.order);
                exitg1 = true;
              }
            }
          } else {
            proc_control_fullColLDL2_(cholmanager, 1, proc_control_B.mNull);
          }

          if (cholmanager->ConvexCheck) {
            proc_control_B.ix_m = 0;
            int32_T exitg2;
            do {
              exitg2 = 0;
              if (proc_control_B.ix_m <= proc_control_B.mNull - 1) {
                if (cholmanager->FMat.data[cholmanager->ldm *
                    proc_control_B.ix_m + proc_control_B.ix_m] <= 0.0) {
                  cholmanager->info = -proc_control_B.ix_m - 1;
                  exitg2 = 1;
                } else {
                  proc_control_B.ix_m++;
                }
              } else {
                cholmanager->ConvexCheck = false;
                exitg2 = 1;
              }
            } while (exitg2 == 0);
          }
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else {
          proc_control_B.b_ldw = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            proc_control_B.ix_m = 0;
            while (proc_control_B.ix_m <= proc_control_B.mNull - 1) {
              memspace->workspace_double.data[proc_control_B.ix_m] = 0.0;
              proc_control_B.ix_m++;
            }

            proc_control_B.b_nullStart = 0;
            proc_control_B.order = (proc_control_B.mNull - 1) * qrmanager->ldq +
              proc_control_B.nullStartIdx;
            proc_control_B.idx_col = proc_control_B.nullStartIdx;
            while (((proc_control_B.b_ldw > 0) && (proc_control_B.idx_col <=
                     proc_control_B.order)) || ((proc_control_B.b_ldw < 0) &&
                    (proc_control_B.idx_col >= proc_control_B.order))) {
              proc_control_B.ix_m = 0;
              proc_control_B.c_ft = 0.0;
              proc_control_B.b_ix_n = proc_control_B.idx_col +
                proc_control_B.nVar_a;
              proc_control_B.b_ldw_tmp = proc_control_B.idx_col;
              while (proc_control_B.b_ldw_tmp <= proc_control_B.b_ix_n) {
                proc_control_B.c_ft += qrmanager->
                  Q.data[proc_control_B.b_ldw_tmp - 1] * objective->
                  grad.data[proc_control_B.ix_m];
                proc_control_B.ix_m++;
                proc_control_B.b_ldw_tmp++;
              }

              memspace->workspace_double.data[proc_control_B.b_nullStart] +=
                -proc_control_B.c_ft;
              proc_control_B.b_nullStart++;
              proc_control_B.idx_col += proc_control_B.b_ldw;
            }
          }

          if (alwaysPositiveDef) {
            if (cholmanager->ndims != 0) {
              proc_control_B.b_ldw = 0;
              while (proc_control_B.b_ldw <= cholmanager->ndims - 1) {
                proc_control_B.order = proc_control_B.b_ldw * cholmanager->ldm;
                proc_control_B.c_ft = memspace->
                  workspace_double.data[proc_control_B.b_ldw];
                proc_control_B.idx_col = 0;
                while (proc_control_B.idx_col <= proc_control_B.b_ldw - 1) {
                  proc_control_B.c_ft -= cholmanager->
                    FMat.data[proc_control_B.order + proc_control_B.idx_col] *
                    memspace->workspace_double.data[proc_control_B.idx_col];
                  proc_control_B.idx_col++;
                }

                memspace->workspace_double.data[proc_control_B.b_ldw] =
                  proc_control_B.c_ft / cholmanager->
                  FMat.data[proc_control_B.order + proc_control_B.b_ldw];
                proc_control_B.b_ldw++;
              }
            }

            proc_control_xtrsv(cholmanager->ndims, cholmanager->FMat.data,
                               cholmanager->ldm, memspace->workspace_double.data);
          } else {
            proc_control_B.b_ldw_tmp = cholmanager->ndims - 1;
            if (cholmanager->ndims != 0) {
              proc_control_B.b_nullStart = 0;
              while (proc_control_B.b_nullStart <= proc_control_B.b_ldw_tmp) {
                proc_control_B.order = proc_control_B.b_nullStart *
                  cholmanager->ldm + proc_control_B.b_nullStart;
                proc_control_B.idx_col = proc_control_B.b_ldw_tmp -
                  proc_control_B.b_nullStart;
                proc_control_B.ix_m = 1;
                while (proc_control_B.ix_m - 1 <= proc_control_B.idx_col - 1) {
                  proc_control_B.b_ix_n = proc_control_B.b_nullStart +
                    proc_control_B.ix_m;
                  memspace->workspace_double.data[proc_control_B.b_ix_n] -=
                    cholmanager->FMat.data[proc_control_B.order +
                    proc_control_B.ix_m] * memspace->
                    workspace_double.data[proc_control_B.b_nullStart];
                  proc_control_B.ix_m++;
                }

                proc_control_B.b_nullStart++;
              }
            }

            proc_control_B.b_ldw = 0;
            while (proc_control_B.b_ldw <= proc_control_B.b_ldw_tmp) {
              memspace->workspace_double.data[proc_control_B.b_ldw] /=
                cholmanager->FMat.data[cholmanager->ldm * proc_control_B.b_ldw +
                proc_control_B.b_ldw];
              proc_control_B.b_ldw++;
            }

            if (cholmanager->ndims != 0) {
              proc_control_B.b_ldw = cholmanager->ndims - 1;
              while (proc_control_B.b_ldw + 1 > 0) {
                proc_control_B.b_nullStart = proc_control_B.b_ldw *
                  cholmanager->ldm;
                proc_control_B.c_ft = memspace->
                  workspace_double.data[proc_control_B.b_ldw];
                proc_control_B.order = cholmanager->ndims;
                while (proc_control_B.order >= proc_control_B.b_ldw + 2) {
                  proc_control_B.c_ft -= cholmanager->FMat.data
                    [(proc_control_B.b_nullStart + proc_control_B.order) - 1] *
                    memspace->workspace_double.data[proc_control_B.order - 1];
                  proc_control_B.order--;
                }

                memspace->workspace_double.data[proc_control_B.b_ldw] =
                  proc_control_B.c_ft;
                proc_control_B.b_ldw--;
              }
            }
          }

          proc_control_xgemv_mtmcjbiadz(qrmanager->mrows, proc_control_B.mNull,
            qrmanager->Q.data, proc_control_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, solution->searchDir.data);
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
real_T proc_control::proc_control_xnrm2_md(int32_T n, const real_T x_data[])
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x_data[0]);
    } else {
      proc_control_B.scale_p = 3.3121686421112381E-170;
      proc_control_B.k_g = 0;
      while (proc_control_B.k_g <= n - 1) {
        proc_control_B.absxk_b = std::abs(x_data[proc_control_B.k_g]);
        if (proc_control_B.absxk_b > proc_control_B.scale_p) {
          proc_control_B.t_i3 = proc_control_B.scale_p / proc_control_B.absxk_b;
          y = y * proc_control_B.t_i3 * proc_control_B.t_i3 + 1.0;
          proc_control_B.scale_p = proc_control_B.absxk_b;
        } else {
          proc_control_B.t_i3 = proc_control_B.absxk_b / proc_control_B.scale_p;
          y += proc_control_B.t_i3 * proc_control_B.t_i3;
        }

        proc_control_B.k_g++;
      }

      y = proc_control_B.scale_p * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbiadz2(int32_T m, int32_T n, const
  real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    proc_control_B.b_iy_b = 0;
    while (proc_control_B.b_iy_b <= n - 1) {
      y_data[proc_control_B.b_iy_b] = -y_data[proc_control_B.b_iy_b];
      proc_control_B.b_iy_b++;
    }

    proc_control_B.iy_b = 0;
    proc_control_B.b_iy_b = (n - 1) * lda + 1;
    proc_control_B.iac_p = 1;
    while (((lda > 0) && (proc_control_B.iac_p <= proc_control_B.b_iy_b)) ||
           ((lda < 0) && (proc_control_B.iac_p >= proc_control_B.b_iy_b))) {
      proc_control_B.ix_nt = 0;
      proc_control_B.c_g = 0.0;
      proc_control_B.d_ih = (proc_control_B.iac_p + m) - 1;
      proc_control_B.ia_kf = proc_control_B.iac_p;
      while (proc_control_B.ia_kf <= proc_control_B.d_ih) {
        proc_control_B.c_g += A_data[proc_control_B.ia_kf - 1] *
          x_data[proc_control_B.ix_nt];
        proc_control_B.ix_nt++;
        proc_control_B.ia_kf++;
      }

      y_data[proc_control_B.iy_b] += proc_control_B.c_g;
      proc_control_B.iy_b++;
      proc_control_B.iac_p += lda;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_feasibleratiotest(const real_T
  solution_xstar_data[], const real_T solution_searchDir_data[], real_T
  workspace_data[], const int32_T workspace_size[2], int32_T workingset_nVar,
  int32_T workingset_ldA, const real_T workingset_Aineq_data[], const real_T
  workingset_bineq_data[], const real_T workingset_lb_data[], const int32_T
  workingset_indexLB_data[], const int32_T workingset_sizes[5], const int32_T
  workingset_isActiveIdx[6], const boolean_T workingset_isActiveConstr_data[],
  const int32_T workingset_nWConstr[5], boolean_T isPhaseOne, real_T *alpha,
  boolean_T *newBlocking, int32_T *constrType, int32_T *constrIdx)
{
  proc_control_B.totalIneq = workingset_sizes[2] - 1;
  *alpha = 1.0E+30;
  *newBlocking = false;
  *constrType = 0;
  *constrIdx = 0;
  proc_control_B.denomTol = 2.2204460492503131E-13 * proc_control_xnrm2_md
    (workingset_nVar, solution_searchDir_data);
  if (workingset_nWConstr[2] < workingset_sizes[2]) {
    proc_control_B.ldw = 0;
    while (proc_control_B.ldw <= proc_control_B.totalIneq) {
      workspace_data[proc_control_B.ldw] =
        workingset_bineq_data[proc_control_B.ldw];
      proc_control_B.ldw++;
    }

    proc_control_xgemv_mtmcjbiadz2(workingset_nVar, workingset_sizes[2],
      workingset_Aineq_data, workingset_ldA, solution_xstar_data, workspace_data);
    proc_control_B.ldw = workspace_size[0];
    if (workingset_sizes[2] != 0) {
      proc_control_B.iyend_n = workspace_size[0] + workingset_sizes[2];
      proc_control_B.b_iy_i4 = workspace_size[0];
      while (proc_control_B.b_iy_i4 + 1 <= proc_control_B.iyend_n) {
        workspace_data[proc_control_B.b_iy_i4] = 0.0;
        proc_control_B.b_iy_i4++;
      }

      proc_control_B.iyend_n = workspace_size[0];
      proc_control_B.b_iy_i4 = (workingset_sizes[2] - 1) * workingset_ldA + 1;
      proc_control_B.iac_d = 1;
      while (((workingset_ldA > 0) && (proc_control_B.iac_d <=
               proc_control_B.b_iy_i4)) || ((workingset_ldA < 0) &&
              (proc_control_B.iac_d >= proc_control_B.b_iy_i4))) {
        proc_control_B.ix_cf = 0;
        proc_control_B.c_ci = 0.0;
        proc_control_B.d_b = (proc_control_B.iac_d + workingset_nVar) - 1;
        proc_control_B.ia_a = proc_control_B.iac_d;
        while (proc_control_B.ia_a <= proc_control_B.d_b) {
          proc_control_B.c_ci += workingset_Aineq_data[proc_control_B.ia_a - 1] *
            solution_searchDir_data[proc_control_B.ix_cf];
          proc_control_B.ix_cf++;
          proc_control_B.ia_a++;
        }

        workspace_data[proc_control_B.iyend_n] += proc_control_B.c_ci;
        proc_control_B.iyend_n++;
        proc_control_B.iac_d += workingset_ldA;
      }
    }

    proc_control_B.iyend_n = 0;
    while (proc_control_B.iyend_n <= proc_control_B.totalIneq) {
      proc_control_B.b_iy_i4 = proc_control_B.ldw + proc_control_B.iyend_n;
      if ((workspace_data[proc_control_B.b_iy_i4] > proc_control_B.denomTol) &&
          (!workingset_isActiveConstr_data[(workingset_isActiveIdx[2] +
            proc_control_B.iyend_n) - 1])) {
        proc_control_B.ratio = std::fmin(std::abs
          (workspace_data[proc_control_B.iyend_n]), 0.02 -
          workspace_data[proc_control_B.iyend_n]) /
          workspace_data[proc_control_B.b_iy_i4];
        if (proc_control_B.ratio < *alpha) {
          *alpha = proc_control_B.ratio;
          *constrType = 3;
          *constrIdx = proc_control_B.iyend_n + 1;
          *newBlocking = true;
        }
      }

      proc_control_B.iyend_n++;
    }
  }

  if (workingset_nWConstr[3] < workingset_sizes[3]) {
    proc_control_B.c_ci = solution_xstar_data[workingset_nVar - 1] *
      static_cast<real_T>(isPhaseOne);
    proc_control_B.phaseOneCorrectionP = solution_searchDir_data[workingset_nVar
      - 1] * static_cast<real_T>(isPhaseOne);
    proc_control_B.totalIneq = 0;
    while (proc_control_B.totalIneq <= workingset_sizes[3] - 2) {
      proc_control_B.pk_corrected =
        -solution_searchDir_data[workingset_indexLB_data[proc_control_B.totalIneq]
        - 1] - proc_control_B.phaseOneCorrectionP;
      if ((proc_control_B.pk_corrected > proc_control_B.denomTol) &&
          (!workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
            proc_control_B.totalIneq) - 1])) {
        proc_control_B.ratio =
          (-solution_xstar_data[workingset_indexLB_data[proc_control_B.totalIneq]
           - 1] -
           workingset_lb_data[workingset_indexLB_data[proc_control_B.totalIneq]
           - 1]) - proc_control_B.c_ci;
        proc_control_B.ratio = std::fmin(std::abs(proc_control_B.ratio), 0.02 -
          proc_control_B.ratio) / proc_control_B.pk_corrected;
        if (proc_control_B.ratio < *alpha) {
          *alpha = proc_control_B.ratio;
          *constrType = 4;
          *constrIdx = proc_control_B.totalIneq + 1;
          *newBlocking = true;
        }
      }

      proc_control_B.totalIneq++;
    }

    proc_control_B.b_iy_i4 = workingset_indexLB_data[workingset_sizes[3] - 1] -
      1;
    proc_control_B.c_ci = -solution_searchDir_data[proc_control_B.b_iy_i4];
    if ((proc_control_B.c_ci > proc_control_B.denomTol) &&
        (!workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
          workingset_sizes[3]) - 2])) {
      proc_control_B.ratio = -solution_xstar_data[proc_control_B.b_iy_i4] -
        workingset_lb_data[proc_control_B.b_iy_i4];
      proc_control_B.ratio = std::fmin(std::abs(proc_control_B.ratio), 0.02 -
        proc_control_B.ratio) / proc_control_B.c_ci;
      if (proc_control_B.ratio < *alpha) {
        *alpha = proc_control_B.ratio;
        *constrType = 4;
        *constrIdx = workingset_sizes[3];
        *newBlocking = true;
      }
    }
  }

  if (!isPhaseOne) {
    *newBlocking = (((!*newBlocking) || (!(*alpha > 1.0))) && (*newBlocking));
    *alpha = std::fmin(*alpha, 1.0);
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_c_checkUnboundedOrIllPosed
  (s_SfTiiT1KRClFcMCE02xJjB_proc_T *solution, const
   s_syceGAKWionoNWyVws9jI_proc__T *objective)
{
  if (objective->objtype == 5) {
    if (proc_control_xnrm2_md(objective->nvar, solution->searchDir.data) > 100.0
        * static_cast<real_T>(objective->nvar) * 1.4901161193847656E-8) {
      solution->state = 3;
    } else {
      solution->state = 4;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_addBoundToActiveSetMatrix_
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj, int32_T TYPE, int32_T idx_local)
{
  obj->nWConstr[TYPE - 1]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE - 1] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = TYPE;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  proc_control_B.colOffset = (obj->nActiveConstr - 1) * obj->ldA - 1;
  if (TYPE == 5) {
    proc_control_B.idx_bnd_local = obj->indexUB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->
      ub.data[proc_control_B.idx_bnd_local - 1];
  } else {
    proc_control_B.idx_bnd_local = obj->indexLB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->
      lb.data[proc_control_B.idx_bnd_local - 1];
  }

  proc_control_B.idx_mh = 0;
  while (proc_control_B.idx_mh <= proc_control_B.idx_bnd_local - 2) {
    obj->ATwset.data[(proc_control_B.idx_mh + proc_control_B.colOffset) + 1] =
      0.0;
    proc_control_B.idx_mh++;
  }

  obj->ATwset.data[proc_control_B.idx_bnd_local + proc_control_B.colOffset] =
    static_cast<real_T>(TYPE == 5) * 2.0 - 1.0;
  proc_control_B.idx_bnd_local++;
  while (proc_control_B.idx_bnd_local <= obj->nVar) {
    obj->ATwset.data[proc_control_B.idx_bnd_local + proc_control_B.colOffset] =
      0.0;
    proc_control_B.idx_bnd_local++;
  }

  switch (obj->probType) {
   case 3:
   case 2:
    break;

   default:
    obj->ATwset.data[obj->nVar + proc_control_B.colOffset] = -1.0;
    break;
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_addAineqConstr(s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *obj, int32_T idx_local)
{
  obj->nWConstr[2]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[2] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = 3;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  proc_control_B.iAineq0 = (idx_local - 1) * obj->ldA;
  proc_control_B.iAw0_g = (obj->nActiveConstr - 1) * obj->ldA;
  proc_control_B.idx_cc = 0;
  while (proc_control_B.idx_cc <= obj->nVar - 1) {
    obj->ATwset.data[proc_control_B.iAw0_g + proc_control_B.idx_cc] =
      obj->Aineq.data[proc_control_B.iAineq0 + proc_control_B.idx_cc];
    proc_control_B.idx_cc++;
  }

  obj->bwset.data[obj->nActiveConstr - 1] = obj->bineq.data[idx_local - 1];
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_checkStoppingAndUpdateFval(int32_T *activeSetChangeID,
  const real_T f_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T *solution,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, const
  s_syceGAKWionoNWyVws9jI_proc__T *objective, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *qrmanager, real_T
  options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations, boolean_T
  updateFval)
{
  solution->iterations++;
  proc_control_B.nVar_tmp_tmp_l = objective->nvar - 1;
  if ((solution->iterations >= runTimeOptions_MaxIterations) &&
      ((solution->state != 1) || (objective->objtype == 5))) {
    solution->state = 0;
  }

  if (solution->iterations - solution->iterations / 50 * 50 == 0) {
    solution->maxConstr = proc__maxConstraintViolation_du(workingset,
      solution->xstar.data);
    proc_control_B.tempMaxConstr = solution->maxConstr;
    if (objective->objtype == 5) {
      proc_control_B.tempMaxConstr = solution->maxConstr - solution->
        xstar.data[objective->nvar - 1];
    }

    if (proc_control_B.tempMaxConstr > 0.02) {
      boolean_T nonDegenerateWset;
      proc_control_B.y_size_idx_0_e = solution->searchDir.size;
      proc_control_B.loop_ub_d = solution->searchDir.size;
      if (proc_control_B.loop_ub_d - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_dh[0], &solution->searchDir.data[0],
                    proc_control_B.loop_ub_d * sizeof(real_T));
      }

      proc_control_B.loop_ub_d = 0;
      while (proc_control_B.loop_ub_d <= proc_control_B.nVar_tmp_tmp_l) {
        proc_control_B.y_data_dh[proc_control_B.loop_ub_d] =
          solution->xstar.data[proc_control_B.loop_ub_d];
        proc_control_B.loop_ub_d++;
      }

      if (proc_control_B.y_size_idx_0_e - 1 >= 0) {
        std::memcpy(&solution->searchDir.data[0], &proc_control_B.y_data_dh[0],
                    proc_control_B.y_size_idx_0_e * sizeof(real_T));
      }

      nonDegenerateWset = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         solution->searchDir.data, workingset, qrmanager);
      if ((!nonDegenerateWset) && (solution->state != 0)) {
        solution->state = -2;
      }

      *activeSetChangeID = 0;
      proc_control_B.tempMaxConstr = proc__maxConstraintViolation_du(workingset,
        solution->searchDir.data);
      if (proc_control_B.tempMaxConstr < solution->maxConstr) {
        proc_control_B.loop_ub_d = 0;
        while (proc_control_B.loop_ub_d <= proc_control_B.nVar_tmp_tmp_l) {
          solution->xstar.data[proc_control_B.loop_ub_d] =
            solution->searchDir.data[proc_control_B.loop_ub_d];
          proc_control_B.loop_ub_d++;
        }

        solution->maxConstr = proc_control_B.tempMaxConstr;
      }
    }
  }

  if (updateFval && (options_ObjectiveLimit > (rtMinusInf))) {
    solution->fstar = proc_contro_computeFval_ReuseHx(objective,
      memspace->workspace_double.data, f_data, solution->xstar.data);
    if ((solution->fstar < options_ObjectiveLimit) && ((solution->state != 0) ||
         (objective->objtype != 5))) {
      solution->state = 2;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_iterate(const real_T H[24025], const real_T
  f_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T *solution,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *qrmanager,
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *cholmanager, s_syceGAKWionoNWyVws9jI_proc__T *
  objective, const char_T options_SolverName[7], real_T options_StepTolerance,
  real_T options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations)
{
  boolean_T subProblemChanged;
  boolean_T updateFval;
  subProblemChanged = true;
  updateFval = true;
  proc_control_B.activeSetChangeID = 0;
  proc_control_B.nVar_kc = workingset->nVar;
  proc_control_B.globalActiveConstrIdx = 0;
  proc_contro_computeGrad_StoreHx(objective, H, f_data, solution->xstar.data);
  solution->fstar = proc_contro_computeFval_ReuseHx(objective,
    memspace->workspace_double.data, f_data, solution->xstar.data);
  if (solution->iterations < runTimeOptions_MaxIterations) {
    solution->state = -5;
  } else {
    solution->state = 0;
  }

  proc_control_B.iyend = 0;
  while (proc_control_B.iyend <= workingset->mConstrMax - 1) {
    solution->lambda.data[proc_control_B.iyend] = 0.0;
    proc_control_B.iyend++;
  }

  int32_T exitg1;
  do {
    exitg1 = 0;
    if (solution->state == -5) {
      boolean_T guard11{ false };

      guard11 = false;
      if (subProblemChanged) {
        switch (proc_control_B.activeSetChangeID) {
         case 1:
          proc_control_B.idx_f = (workingset->nActiveConstr - 1) *
            workingset->ldA;
          if (qrmanager->mrows <= qrmanager->ncols + 1) {
            qrmanager->minRowCol = qrmanager->mrows;
          } else {
            qrmanager->minRowCol = qrmanager->ncols + 1;
          }

          proc_control_B.b_iy_k = qrmanager->ldq * qrmanager->ncols;
          proc_control_B.ix_cz = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            proc_control_B.iyend = proc_control_B.b_iy_k + qrmanager->mrows;
            proc_control_B.c_iy = proc_control_B.b_iy_k;
            while (proc_control_B.c_iy + 1 <= proc_control_B.iyend) {
              qrmanager->QR.data[proc_control_B.c_iy] = 0.0;
              proc_control_B.c_iy++;
            }

            proc_control_B.c_iy = (qrmanager->mrows - 1) * qrmanager->ldq + 1;
            proc_control_B.iyend = 1;
            while (((proc_control_B.ix_cz > 0) && (proc_control_B.iyend <=
                     proc_control_B.c_iy)) || ((proc_control_B.ix_cz < 0) &&
                    (proc_control_B.iyend >= proc_control_B.c_iy))) {
              proc_control_B.b_ix_on = proc_control_B.idx_f;
              proc_control_B.normDelta = 0.0;
              proc_control_B.g_p = (proc_control_B.iyend + qrmanager->mrows) - 1;
              proc_control_B.ia_f4 = proc_control_B.iyend;
              while (proc_control_B.ia_f4 <= proc_control_B.g_p) {
                proc_control_B.normDelta += qrmanager->
                  Q.data[proc_control_B.ia_f4 - 1] * workingset->
                  ATwset.data[proc_control_B.b_ix_on];
                proc_control_B.b_ix_on++;
                proc_control_B.ia_f4++;
              }

              qrmanager->QR.data[proc_control_B.b_iy_k] +=
                proc_control_B.normDelta;
              proc_control_B.b_iy_k++;
              proc_control_B.iyend += proc_control_B.ix_cz;
            }
          }

          qrmanager->ncols++;
          qrmanager->jpvt.data[qrmanager->ncols - 1] = qrmanager->ncols;
          proc_control_B.idx_f = qrmanager->mrows - 2;
          while (proc_control_B.idx_f + 2 > qrmanager->ncols) {
            proc_control_B.iyend = (qrmanager->ncols - 1) * qrmanager->ldq;
            proc_control_B.temp_o = qrmanager->QR.data[(proc_control_B.idx_f +
              proc_control_B.iyend) + 1];
            proc_control_xrotg_XzIjz1eG(&qrmanager->QR.data[proc_control_B.idx_f
              + proc_control_B.iyend], &proc_control_B.temp_o,
              &proc_control_B.normDelta, &proc_control_B.s_p);
            qrmanager->QR.data[(proc_control_B.idx_f + proc_control_B.iyend) + 1]
              = proc_control_B.temp_o;
            proc_control_B.iyend = qrmanager->ldq * proc_control_B.idx_f;
            if (qrmanager->mrows >= 1) {
              proc_control_B.ix_cz = proc_control_B.iyend;
              proc_control_B.b_iy_k = qrmanager->ldq + proc_control_B.iyend;
              proc_control_B.c_iy = 0;
              while (proc_control_B.c_iy <= qrmanager->mrows - 1) {
                proc_control_B.temp_o = qrmanager->Q.data[proc_control_B.ix_cz] *
                  proc_control_B.normDelta + qrmanager->
                  Q.data[proc_control_B.b_iy_k] * proc_control_B.s_p;
                qrmanager->Q.data[proc_control_B.b_iy_k] = qrmanager->
                  Q.data[proc_control_B.b_iy_k] * proc_control_B.normDelta -
                  qrmanager->Q.data[proc_control_B.ix_cz] * proc_control_B.s_p;
                qrmanager->Q.data[proc_control_B.ix_cz] = proc_control_B.temp_o;
                proc_control_B.b_iy_k++;
                proc_control_B.ix_cz++;
                proc_control_B.c_iy++;
              }
            }

            proc_control_B.idx_f--;
          }
          break;

         case -1:
          proc_control_deleteColMoveEnd(qrmanager,
            proc_control_B.globalActiveConstrIdx);
          break;

         default:
          proc_control_factorQR_h(qrmanager, workingset->ATwset.data,
            proc_control_B.nVar_kc, workingset->nActiveConstr, workingset->ldA);
          proc_control_computeQ_(qrmanager, qrmanager->mrows);
          break;
        }

        proc_control_compute_deltax(H, solution, memspace, qrmanager,
          cholmanager, objective, proc_control_strcmp(options_SolverName));
        if (solution->state != -5) {
          exitg1 = 1;
        } else {
          proc_control_B.normDelta = proc_control_xnrm2_md
            (proc_control_B.nVar_kc, solution->searchDir.data);
          guard11 = true;
        }
      } else {
        proc_control_B.idx_f = solution->searchDir.size;
        proc_control_B.b_iy_k = solution->searchDir.size;
        if (proc_control_B.b_iy_k - 1 >= 0) {
          std::memcpy(&proc_control_B.y_data_l[0], &solution->searchDir.data[0],
                      proc_control_B.b_iy_k * sizeof(real_T));
        }

        proc_control_B.iyend = 0;
        while (proc_control_B.iyend <= proc_control_B.nVar_kc - 1) {
          proc_control_B.y_data_l[proc_control_B.iyend] = 0.0;
          proc_control_B.iyend++;
        }

        if (proc_control_B.idx_f - 1 >= 0) {
          std::memcpy(&solution->searchDir.data[0], &proc_control_B.y_data_l[0],
                      proc_control_B.idx_f * sizeof(real_T));
        }

        proc_control_B.normDelta = 0.0;
        guard11 = true;
      }

      if (guard11) {
        if ((!subProblemChanged) || (proc_control_B.normDelta <
             options_StepTolerance) || (workingset->nActiveConstr >=
             proc_control_B.nVar_kc)) {
          if (qrmanager->ncols > 0) {
            boolean_T guard1{ false };

            guard1 = false;
            if (objective->objtype != 4) {
              proc_control_B.normDelta = 100.0 * static_cast<real_T>
                (qrmanager->mrows) * 2.2204460492503131E-16;
              updateFval = ((qrmanager->mrows > 0) && (qrmanager->ncols > 0));
              if (updateFval) {
                boolean_T guard2{ false };

                proc_control_B.iyend = qrmanager->ncols;
                guard2 = false;
                if (qrmanager->mrows < qrmanager->ncols) {
                  proc_control_B.idx_f = (qrmanager->ncols - 1) * qrmanager->ldq
                    + qrmanager->mrows;
                  while ((proc_control_B.iyend > qrmanager->mrows) && (std::abs
                          (qrmanager->QR.data[proc_control_B.idx_f - 1]) >=
                          proc_control_B.normDelta)) {
                    proc_control_B.iyend--;
                    proc_control_B.idx_f -= qrmanager->ldq;
                  }

                  updateFval = (proc_control_B.iyend == qrmanager->mrows);
                  if (!updateFval) {
                  } else {
                    guard2 = true;
                  }
                } else {
                  guard2 = true;
                }

                if (guard2) {
                  proc_control_B.idx_f = (proc_control_B.iyend - 1) *
                    qrmanager->ldq + proc_control_B.iyend;
                  while ((proc_control_B.iyend >= 1) && (std::abs
                          (qrmanager->QR.data[proc_control_B.idx_f - 1]) >=
                          proc_control_B.normDelta)) {
                    proc_control_B.iyend--;
                    proc_control_B.idx_f = (proc_control_B.idx_f -
                      qrmanager->ldq) - 1;
                  }

                  updateFval = (proc_control_B.iyend == 0);
                }
              }

              if (!updateFval) {
                solution->state = -7;
              } else {
                guard1 = true;
              }
            } else {
              guard1 = true;
            }

            if (guard1) {
              proc_control_xgemv_mtm(qrmanager->mrows, qrmanager->ncols,
                qrmanager->Q.data, qrmanager->ldq, objective->grad.data,
                memspace->workspace_double.data);
              proc_control_xtrsv(qrmanager->ncols, qrmanager->QR.data,
                                 qrmanager->ldq, memspace->workspace_double.data);
              proc_control_B.iyend = 0;
              while (proc_control_B.iyend <= qrmanager->ncols - 1) {
                solution->lambda.data[proc_control_B.iyend] =
                  -memspace->workspace_double.data[proc_control_B.iyend];
                proc_control_B.iyend++;
              }
            }
          }

          if ((solution->state != -7) || (workingset->nActiveConstr >
               proc_control_B.nVar_kc)) {
            proc_control_B.iyend = 0;
            proc_control_B.normDelta = 0.0;
            proc_control_B.idx_f = workingset->nWConstr[0] +
              workingset->nWConstr[1];
            while (proc_control_B.idx_f + 1 <= workingset->nActiveConstr) {
              if (solution->lambda.data[proc_control_B.idx_f] <
                  proc_control_B.normDelta) {
                proc_control_B.normDelta = solution->
                  lambda.data[proc_control_B.idx_f];
                proc_control_B.iyend = proc_control_B.idx_f + 1;
              }

              proc_control_B.idx_f++;
            }

            if (proc_control_B.iyend == 0) {
              solution->state = 1;
            } else {
              proc_control_B.activeSetChangeID = -1;
              proc_control_B.globalActiveConstrIdx = proc_control_B.iyend;
              subProblemChanged = true;
              proc_control_removeConstr(workingset, proc_control_B.iyend);
              solution->lambda.data[proc_control_B.iyend - 1] = 0.0;
            }
          } else {
            proc_control_B.iyend = workingset->nActiveConstr;
            proc_control_B.activeSetChangeID = 0;
            proc_control_B.globalActiveConstrIdx = workingset->nActiveConstr;
            subProblemChanged = true;
            proc_control_removeConstr(workingset, workingset->nActiveConstr);
            solution->lambda.data[proc_control_B.iyend - 1] = 0.0;
          }

          updateFval = false;
        } else {
          proc_control_feasibleratiotest(solution->xstar.data,
            solution->searchDir.data, memspace->workspace_double.data,
            memspace->workspace_double.size, workingset->nVar, workingset->ldA,
            workingset->Aineq.data, workingset->bineq.data, workingset->lb.data,
            workingset->indexLB.data, workingset->sizes, workingset->isActiveIdx,
            workingset->isActiveConstr.data, workingset->nWConstr,
            objective->objtype == 5, &proc_control_B.normDelta, &updateFval,
            &proc_control_B.iyend, &proc_control_B.idx_f);
          if (updateFval) {
            switch (proc_control_B.iyend) {
             case 3:
              proc_control_addAineqConstr(workingset, proc_control_B.idx_f);
              break;

             case 4:
              proc_addBoundToActiveSetMatrix_(workingset, 4,
                proc_control_B.idx_f);
              break;

             default:
              proc_addBoundToActiveSetMatrix_(workingset, 5,
                proc_control_B.idx_f);
              break;
            }

            proc_control_B.activeSetChangeID = 1;
          } else {
            proc_c_checkUnboundedOrIllPosed(solution, objective);
            subProblemChanged = false;
            if (workingset->nActiveConstr == 0) {
              solution->state = 1;
            }
          }

          if ((proc_control_B.nVar_kc >= 1) && (!(proc_control_B.normDelta ==
                0.0))) {
            proc_control_B.iyend = 0;
            while (proc_control_B.iyend <= proc_control_B.nVar_kc - 1) {
              solution->xstar.data[proc_control_B.iyend] +=
                proc_control_B.normDelta * solution->
                searchDir.data[proc_control_B.iyend];
              proc_control_B.iyend++;
            }
          }

          proc_contro_computeGrad_StoreHx(objective, H, f_data,
            solution->xstar.data);
          updateFval = true;
        }

        proc_checkStoppingAndUpdateFval(&proc_control_B.activeSetChangeID,
          f_data, solution, memspace, objective, workingset, qrmanager,
          options_ObjectiveLimit, runTimeOptions_MaxIterations, updateFval);
      }
    } else {
      if (!updateFval) {
        solution->fstar = proc_contro_computeFval_ReuseHx(objective,
          memspace->workspace_double.data, f_data, solution->xstar.data);
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_linearForm_(boolean_T obj_hasLinear, int32_T
  obj_nvar, real_T workspace_data[], const real_T H[24025], const real_T f_data[],
  const real_T x_data[])
{
  proc_control_B.ix_dw = 0;
  if (obj_hasLinear) {
    while (proc_control_B.ix_dw <= obj_nvar - 1) {
      workspace_data[proc_control_B.ix_dw] = f_data[proc_control_B.ix_dw];
      proc_control_B.ix_dw++;
    }

    proc_control_B.ix_dw = 1;
  }

  if (obj_nvar != 0) {
    if (proc_control_B.ix_dw != 1) {
      while (proc_control_B.ix_dw <= obj_nvar - 1) {
        workspace_data[proc_control_B.ix_dw] = 0.0;
        proc_control_B.ix_dw++;
      }
    }

    proc_control_B.ix_dw = 0;
    proc_control_B.b_bc = (obj_nvar - 1) * obj_nvar + 1;
    proc_control_B.iac_o = 1;
    while (((obj_nvar > 0) && (proc_control_B.iac_o <= proc_control_B.b_bc)) ||
           ((obj_nvar < 0) && (proc_control_B.iac_o >= proc_control_B.b_bc))) {
      proc_control_B.c_fm = 0.5 * x_data[proc_control_B.ix_dw];
      proc_control_B.iy_f = 0;
      proc_control_B.d_p = (proc_control_B.iac_o + obj_nvar) - 1;
      for (int32_T ia{proc_control_B.iac_o}; ia <= proc_control_B.d_p; ia++) {
        workspace_data[proc_control_B.iy_f] += H[ia - 1] * proc_control_B.c_fm;
        proc_control_B.iy_f++;
      }

      proc_control_B.ix_dw++;
      proc_control_B.iac_o += obj_nvar;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
real_T proc_control::proc_control_computeFval(const
  s_syceGAKWionoNWyVws9jI_proc__T *obj, real_T workspace_data[], const real_T H
  [24025], const real_T f_data[], const real_T x_data[])
{
  real_T val;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    proc_control_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    val = 0.0;
    if (obj->nvar >= 1) {
      proc_control_B.idx_e = 0;
      while (proc_control_B.idx_e <= obj->nvar - 1) {
        val += workspace_data[proc_control_B.idx_e] *
          x_data[proc_control_B.idx_e];
        proc_control_B.idx_e++;
      }
    }
    break;

   default:
    proc_control_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    proc_control_B.idx_e = obj->nvar;
    while (proc_control_B.idx_e + 1 <= obj->maxVar - 1) {
      workspace_data[proc_control_B.idx_e] = 0.5 * obj->beta *
        x_data[proc_control_B.idx_e] + obj->rho;
      proc_control_B.idx_e++;
    }

    val = 0.0;
    if (obj->maxVar - 1 >= 1) {
      proc_control_B.idx_e = 0;
      while (proc_control_B.idx_e <= obj->maxVar - 2) {
        val += workspace_data[proc_control_B.idx_e] *
          x_data[proc_control_B.idx_e];
        proc_control_B.idx_e++;
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_phaseone(const real_T H[24025], const real_T
  f_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T *solution,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *qrmanager,
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *cholmanager, s_syceGAKWionoNWyVws9jI_proc__T *
  objective, somzaGboVhDG7PNQS6E98jD_proc__T *options, const
  somzaGboVhDG7PNQS6E98jD_proc__T *runTimeOptions)
{
  proc_control_B.PROBTYPE_ORIG = workingset->probType;
  proc_control_B.nVar_tmp = workingset->nVar;
  solution->xstar.data[workingset->nVar] = solution->maxConstr + 1.0;
  if (workingset->probType == 3) {
    proc_control_B.mConstr = 1;
  } else {
    proc_control_B.mConstr = 4;
  }

  proc_control_setProblemType(workingset, proc_control_B.mConstr);
  proc_contro_removeAllIneqConstr(workingset);
  objective->prev_objtype = objective->objtype;
  objective->prev_nvar = objective->nvar;
  objective->prev_hasLinear = objective->hasLinear;
  objective->objtype = 5;
  objective->nvar = proc_control_B.nVar_tmp + 1;
  objective->gammaScalar = 1.0;
  objective->hasLinear = true;
  options->ObjectiveLimit = 0.02;
  options->StepTolerance = 1.4901161193847657E-10;
  solution->fstar = proc_control_computeFval(objective,
    memspace->workspace_double.data, H, f_data, solution->xstar.data);
  solution->state = 5;
  proc_control_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                       cholmanager, objective, options->SolverName,
                       options->StepTolerance, options->ObjectiveLimit,
                       runTimeOptions->MaxIterations);
  if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
       workingset->sizes[3]) - 2]) {
    boolean_T exitg1;
    proc_control_B.mConstr = workingset->sizes[0] + 131;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.mConstr <= workingset->nActiveConstr)) {
      if ((workingset->Wid.data[proc_control_B.mConstr - 1] == 4) &&
          (workingset->Wlocalidx.data[proc_control_B.mConstr - 1] ==
           workingset->sizes[3])) {
        proc_control_removeConstr(workingset, proc_control_B.mConstr);
        exitg1 = true;
      } else {
        proc_control_B.mConstr++;
      }
    }
  }

  proc_control_B.mConstr = workingset->nActiveConstr;
  while ((proc_control_B.mConstr > workingset->sizes[0] + 130) &&
         (proc_control_B.mConstr > proc_control_B.nVar_tmp)) {
    proc_control_removeConstr(workingset, proc_control_B.mConstr);
    proc_control_B.mConstr--;
  }

  solution->maxConstr = solution->xstar.data[proc_control_B.nVar_tmp];
  proc_control_setProblemType(workingset, proc_control_B.PROBTYPE_ORIG);
  objective->objtype = objective->prev_objtype;
  objective->nvar = objective->prev_nvar;
  objective->hasLinear = objective->prev_hasLinear;
  options->ObjectiveLimit = (rtMinusInf);
  options->StepTolerance = 1.0E-6;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_driver_i(const real_T H[24025], const real_T
  f_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T *solution,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *qrmanager,
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *cholmanager, s_syceGAKWionoNWyVws9jI_proc__T *
  objective, somzaGboVhDG7PNQS6E98jD_proc__T *options,
  somzaGboVhDG7PNQS6E98jD_proc__T *runTimeOptions)
{
  boolean_T guard1{ false };

  solution->iterations = 0;
  runTimeOptions->RemainFeasible = true;
  proc_control_B.nVar_k = workingset->nVar - 1;
  guard1 = false;
  if (workingset->probType == 3) {
    proc_control_B.b_idx_k = 0;
    while (proc_control_B.b_idx_k <= workingset->sizes[0] - 1) {
      solution->xstar.data[workingset->indexFixed.data[proc_control_B.b_idx_k] -
        1] = workingset->ub.data[workingset->
        indexFixed.data[proc_control_B.b_idx_k] - 1];
      proc_control_B.b_idx_k++;
    }

    proc_control_B.b_idx_k = 0;
    while (proc_control_B.b_idx_k <= workingset->sizes[3] - 1) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
           proc_control_B.b_idx_k) - 1]) {
        solution->xstar.data[workingset->indexLB.data[proc_control_B.b_idx_k] -
          1] = -workingset->lb.data[workingset->
          indexLB.data[proc_control_B.b_idx_k] - 1];
      }

      proc_control_B.b_idx_k++;
    }

    proc_control_B.b_idx_k = 0;
    while (proc_control_B.b_idx_k <= workingset->sizes[4] - 1) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[4] +
           proc_control_B.b_idx_k) - 1]) {
        solution->xstar.data[workingset->indexUB.data[proc_control_B.b_idx_k] -
          1] = workingset->ub.data[workingset->
          indexUB.data[proc_control_B.b_idx_k] - 1];
      }

      proc_control_B.b_idx_k++;
    }

    proc_control_PresolveWorkingSet(solution, memspace, workingset, qrmanager);
    if (solution->state < 0) {
    } else {
      guard1 = true;
    }
  } else {
    solution->state = 82;
    guard1 = true;
  }

  if (guard1) {
    solution->iterations = 0;
    solution->maxConstr = proc__maxConstraintViolation_du(workingset,
      solution->xstar.data);
    if (solution->maxConstr > 0.02) {
      proc_control_phaseone(H, f_data, solution, memspace, workingset, qrmanager,
                            cholmanager, objective, options, runTimeOptions);
      if (solution->state != 0) {
        solution->maxConstr = proc__maxConstraintViolation_du(workingset,
          solution->xstar.data);
        if (solution->maxConstr > 0.02) {
          proc_control_B.nVar_k = 0;
          while (proc_control_B.nVar_k <= workingset->mConstrMax - 1) {
            solution->lambda.data[proc_control_B.nVar_k] = 0.0;
            proc_control_B.nVar_k++;
          }

          solution->fstar = proc_control_computeFval(objective,
            memspace->workspace_double.data, H, f_data, solution->xstar.data);
          solution->state = -2;
        } else {
          if (solution->maxConstr > 0.0) {
            proc_control_B.y_size_idx_0_a = solution->searchDir.size;
            proc_control_B.b_idx_k = solution->searchDir.size;
            if (proc_control_B.b_idx_k - 1 >= 0) {
              std::memcpy(&proc_control_B.y_data_g[0], &solution->
                          searchDir.data[0], proc_control_B.b_idx_k * sizeof
                          (real_T));
            }

            proc_control_B.b_idx_k = 0;
            while (proc_control_B.b_idx_k <= proc_control_B.nVar_k) {
              proc_control_B.y_data_g[proc_control_B.b_idx_k] =
                solution->xstar.data[proc_control_B.b_idx_k];
              proc_control_B.b_idx_k++;
            }

            if (proc_control_B.y_size_idx_0_a - 1 >= 0) {
              std::memcpy(&solution->searchDir.data[0],
                          &proc_control_B.y_data_g[0],
                          proc_control_B.y_size_idx_0_a * sizeof(real_T));
            }

            proc_control_PresolveWorkingSet(solution, memspace, workingset,
              qrmanager);
            proc_control_B.maxConstr_new = proc__maxConstraintViolation_du
              (workingset, solution->xstar.data);
            if (proc_control_B.maxConstr_new >= solution->maxConstr) {
              solution->maxConstr = proc_control_B.maxConstr_new;
              proc_control_B.y_size_idx_0_a = solution->xstar.size;
              proc_control_B.b_idx_k = solution->xstar.size;
              if (proc_control_B.b_idx_k - 1 >= 0) {
                std::memcpy(&proc_control_B.y_data_g[0], &solution->xstar.data[0],
                            proc_control_B.b_idx_k * sizeof(real_T));
              }

              proc_control_B.b_idx_k = 0;
              while (proc_control_B.b_idx_k <= proc_control_B.nVar_k) {
                proc_control_B.y_data_g[proc_control_B.b_idx_k] =
                  solution->searchDir.data[proc_control_B.b_idx_k];
                proc_control_B.b_idx_k++;
              }

              if (proc_control_B.y_size_idx_0_a - 1 >= 0) {
                std::memcpy(&solution->xstar.data[0], &proc_control_B.y_data_g[0],
                            proc_control_B.y_size_idx_0_a * sizeof(real_T));
              }
            }
          }

          proc_control_iterate(H, f_data, solution, memspace, workingset,
                               qrmanager, cholmanager, objective,
                               options->SolverName, options->StepTolerance,
                               options->ObjectiveLimit,
                               runTimeOptions->MaxIterations);
        }
      }
    } else {
      proc_control_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                           cholmanager, objective, options->SolverName,
                           options->StepTolerance, options->ObjectiveLimit,
                           runTimeOptions->MaxIterations);
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_addAeqConstr(s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *obj, int32_T idx_local)
{
  proc_control_B.totalEq = obj->nWConstr[0] + obj->nWConstr[1];
  if ((obj->nActiveConstr == proc_control_B.totalEq) && (idx_local >
       obj->nWConstr[1])) {
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->nActiveConstr++;
    obj->Wid.data[obj->nActiveConstr - 1] = 2;
    obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
    proc_control_B.iAeq0_o = (idx_local - 1) * obj->ldA;
    proc_control_B.iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
    proc_control_B.totalEq = 1;
    while (proc_control_B.totalEq - 1 <= obj->nVar - 1) {
      obj->ATwset.data[(proc_control_B.iAw0 + proc_control_B.totalEq) - 1] =
        obj->Aeq.data[(proc_control_B.iAeq0_o + proc_control_B.totalEq) - 1];
      proc_control_B.totalEq++;
    }

    obj->bwset.data[obj->nActiveConstr - 1] = obj->beq[idx_local - 1];
  } else {
    obj->nActiveConstr++;
    proc_control_B.iAeq0_o = obj->nActiveConstr - 1;
    obj->Wid.data[obj->nActiveConstr - 1] = obj->Wid.data[proc_control_B.totalEq];
    obj->Wlocalidx.data[proc_control_B.iAeq0_o] = obj->
      Wlocalidx.data[proc_control_B.totalEq];
    proc_control_B.iAw0 = 0;
    while (proc_control_B.iAw0 <= obj->nVar - 1) {
      obj->ATwset.data[proc_control_B.iAw0 + obj->ldA * proc_control_B.iAeq0_o] =
        obj->ATwset.data[obj->ldA * proc_control_B.totalEq + proc_control_B.iAw0];
      proc_control_B.iAw0++;
    }

    obj->bwset.data[proc_control_B.iAeq0_o] = obj->
      bwset.data[proc_control_B.totalEq];
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->Wid.data[proc_control_B.totalEq] = 2;
    obj->Wlocalidx.data[proc_control_B.totalEq] = idx_local;
    proc_control_B.iAeq0_o = (idx_local - 1) * obj->ldA;
    proc_control_B.iAw0 = obj->ldA * proc_control_B.totalEq;
    for (int32_T b_idx{1}; b_idx - 1 < obj->nVar; b_idx++) {
      obj->ATwset.data[(proc_control_B.iAw0 + b_idx) - 1] = obj->Aeq.data
        [(proc_control_B.iAeq0_o + b_idx) - 1];
    }

    obj->bwset.data[proc_control_B.totalEq] = obj->beq[idx_local - 1];
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
boolean_T proc_control::proc_control_soc(const real_T Hessian[24025], const
  real_T grad_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T *TrialState,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *WorkingSet, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *QRManager,
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *CholManager, s_syceGAKWionoNWyVws9jI_proc__T *
  QPObjective, const somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  boolean_T success;
  proc_control_B.nWIneq_old = WorkingSet->nWConstr[2];
  proc_control_B.nWLower_old = WorkingSet->nWConstr[3];
  proc_control_B.nWUpper_old = WorkingSet->nWConstr[4];
  proc_control_B.nVar_m = WorkingSet->nVar - 1;
  proc_control_B.mConstrMax_g = WorkingSet->mConstrMax - 1;
  proc_control_B.idx_Aineq = 0;
  while (proc_control_B.idx_Aineq <= proc_control_B.nVar_m) {
    TrialState->xstarsqp[proc_control_B.idx_Aineq] = TrialState->
      xstarsqp_old[proc_control_B.idx_Aineq];
    proc_control_B.idx_Aineq++;
  }

  proc_control_B.idx_Aineq = 0;
  while (proc_control_B.idx_Aineq <= proc_control_B.nVar_m) {
    TrialState->socDirection.data[proc_control_B.idx_Aineq] =
      TrialState->xstar.data[proc_control_B.idx_Aineq];
    proc_control_B.idx_Aineq++;
  }

  proc_control_B.idx_Aineq = 0;
  while (proc_control_B.idx_Aineq <= proc_control_B.mConstrMax_g) {
    TrialState->lambdaStopTest.data[proc_control_B.idx_Aineq] =
      TrialState->lambda.data[proc_control_B.idx_Aineq];
    proc_control_B.idx_Aineq++;
  }

  for (proc_control_B.idx_Aineq = 0; proc_control_B.idx_Aineq < 130;
       proc_control_B.idx_Aineq++) {
    WorkingSet->beq[proc_control_B.idx_Aineq] = -TrialState->
      cEq[proc_control_B.idx_Aineq];
  }

  proc_control_B.idx_Aineq_tmp_tmp = WorkingSet->ldA;
  proc_control_B.iy_o = 0;
  proc_control_B.idx_upper = WorkingSet->ldA * 129 + 1;
  proc_control_B.iac_m = 1;
  while (((proc_control_B.idx_Aineq_tmp_tmp > 0) && (proc_control_B.iac_m <=
           proc_control_B.idx_upper)) || ((proc_control_B.idx_Aineq_tmp_tmp < 0)
          && (proc_control_B.iac_m >= proc_control_B.idx_upper))) {
    proc_control_B.idx_Partition = 0;
    proc_control_B.oldDirIdx = 0.0;
    proc_control_B.idx_Aineq = (proc_control_B.iac_m + WorkingSet->nVar) - 1;
    proc_control_B.b_ia_e = proc_control_B.iac_m;
    while (proc_control_B.b_ia_e <= proc_control_B.idx_Aineq) {
      proc_control_B.oldDirIdx += WorkingSet->Aeq.data[proc_control_B.b_ia_e - 1]
        * TrialState->searchDir.data[proc_control_B.idx_Partition];
      proc_control_B.idx_Partition++;
      proc_control_B.b_ia_e++;
    }

    WorkingSet->beq[proc_control_B.iy_o] += proc_control_B.oldDirIdx;
    proc_control_B.iy_o++;
    proc_control_B.iac_m += proc_control_B.idx_Aineq_tmp_tmp;
  }

  for (proc_control_B.idx_Aineq = 0; proc_control_B.idx_Aineq < 130;
       proc_control_B.idx_Aineq++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + proc_control_B.idx_Aineq] =
      WorkingSet->beq[proc_control_B.idx_Aineq];
  }

  if (WorkingSet->sizes[2] > 0) {
    proc_control_B.idx_Aineq = 0;
    while (proc_control_B.idx_Aineq <= WorkingSet->sizes[2] - 1) {
      WorkingSet->bineq.data[proc_control_B.idx_Aineq] = -TrialState->
        cIneq.data[proc_control_B.idx_Aineq];
      proc_control_B.idx_Aineq++;
    }

    proc_control_B.idx_Aineq_tmp_tmp = WorkingSet->ldA;
    proc_control_B.iy_o = 0;
    proc_control_B.idx_upper = (WorkingSet->sizes[2] - 1) * WorkingSet->ldA + 1;
    proc_control_B.iac_m = 1;
    while (((proc_control_B.idx_Aineq_tmp_tmp > 0) && (proc_control_B.iac_m <=
             proc_control_B.idx_upper)) || ((proc_control_B.idx_Aineq_tmp_tmp <
             0) && (proc_control_B.iac_m >= proc_control_B.idx_upper))) {
      proc_control_B.idx_Partition = 0;
      proc_control_B.oldDirIdx = 0.0;
      proc_control_B.idx_Aineq = (proc_control_B.iac_m + WorkingSet->nVar) - 1;
      proc_control_B.b_ia_e = proc_control_B.iac_m;
      while (proc_control_B.b_ia_e <= proc_control_B.idx_Aineq) {
        proc_control_B.oldDirIdx += WorkingSet->Aineq.data[proc_control_B.b_ia_e
          - 1] * TrialState->searchDir.data[proc_control_B.idx_Partition];
        proc_control_B.idx_Partition++;
        proc_control_B.b_ia_e++;
      }

      WorkingSet->bineq.data[proc_control_B.iy_o] += proc_control_B.oldDirIdx;
      proc_control_B.iy_o++;
      proc_control_B.iac_m += proc_control_B.idx_Aineq_tmp_tmp;
    }

    proc_control_B.idx_Aineq = 1;
    proc_control_B.iy_o = WorkingSet->sizes[2] + 1;
    proc_control_B.idx_upper = (WorkingSet->sizes[2] + WorkingSet->sizes[3]) + 1;
    proc_control_B.iac_m = WorkingSet->isActiveIdx[2] - 1;
    while (proc_control_B.iac_m + 1 <= WorkingSet->nActiveConstr) {
      switch (WorkingSet->Wid.data[proc_control_B.iac_m]) {
       case 3:
        proc_control_B.idx_Partition = proc_control_B.idx_Aineq;
        proc_control_B.idx_Aineq++;
        WorkingSet->bwset.data[proc_control_B.iac_m] = WorkingSet->
          bineq.data[WorkingSet->Wlocalidx.data[proc_control_B.iac_m] - 1];
        break;

       case 4:
        proc_control_B.idx_Partition = proc_control_B.iy_o;
        proc_control_B.iy_o++;
        break;

       default:
        proc_control_B.idx_Partition = proc_control_B.idx_upper;
        proc_control_B.idx_upper++;
        break;
      }

      TrialState->workingset_old.data[proc_control_B.idx_Partition - 1] =
        WorkingSet->Wlocalidx.data[proc_control_B.iac_m];
      proc_control_B.iac_m++;
    }
  }

  proc_control_B.idx_Aineq = 0;
  while (proc_control_B.idx_Aineq <= proc_control_B.nVar_m) {
    TrialState->xstar.data[proc_control_B.idx_Aineq] = TrialState->
      xstarsqp[proc_control_B.idx_Aineq];
    proc_control_B.idx_Aineq++;
  }

  proc_control_B.qpoptions_n = *qpoptions;
  proc_control_B.qpoptions_p = *qpoptions;
  proc_control_driver_i(Hessian, grad_data, TrialState, memspace, WorkingSet,
                        QRManager, CholManager, QPObjective,
                        &proc_control_B.qpoptions_n, &proc_control_B.qpoptions_p);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_addAeqConstr(WorkingSet, WorkingSet->indexEqRemoved
      [WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  proc_control_B.idx_Aineq = 0;
  while (proc_control_B.idx_Aineq <= proc_control_B.nVar_m) {
    proc_control_B.oldDirIdx = TrialState->
      socDirection.data[proc_control_B.idx_Aineq];
    TrialState->socDirection.data[proc_control_B.idx_Aineq] =
      TrialState->xstar.data[proc_control_B.idx_Aineq] -
      TrialState->socDirection.data[proc_control_B.idx_Aineq];
    TrialState->xstar.data[proc_control_B.idx_Aineq] = proc_control_B.oldDirIdx;
    proc_control_B.idx_Aineq++;
  }

  success = (proc_control_xnrm2_md(proc_control_B.nVar_m + 1,
              TrialState->socDirection.data) <= proc_control_xnrm2_md
             (proc_control_B.nVar_m + 1, TrialState->xstar.data) * 2.0);
  proc_control_B.idx_Aineq = WorkingSet->sizes[2];
  proc_control_B.iy_o = WorkingSet->sizes[3];
  for (proc_control_B.nVar_m = 0; proc_control_B.nVar_m < 130;
       proc_control_B.nVar_m++) {
    WorkingSet->beq[proc_control_B.nVar_m] = -TrialState->
      cEq[proc_control_B.nVar_m];
  }

  for (proc_control_B.nVar_m = 0; proc_control_B.nVar_m < 130;
       proc_control_B.nVar_m++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + proc_control_B.nVar_m] =
      WorkingSet->beq[proc_control_B.nVar_m];
  }

  if (WorkingSet->sizes[2] > 0) {
    proc_control_B.nVar_m = 0;
    while (proc_control_B.nVar_m <= proc_control_B.idx_Aineq - 1) {
      WorkingSet->bineq.data[proc_control_B.nVar_m] = -TrialState->
        cIneq.data[proc_control_B.nVar_m];
      proc_control_B.nVar_m++;
    }

    if (!success) {
      proc_contro_removeAllIneqConstr(WorkingSet);
      proc_control_B.nVar_m = 0;
      while (proc_control_B.nVar_m <= proc_control_B.nWIneq_old - 1) {
        proc_control_addAineqConstr(WorkingSet, TrialState->
          workingset_old.data[proc_control_B.nVar_m]);
        proc_control_B.nVar_m++;
      }

      proc_control_B.nWIneq_old = 0;
      while (proc_control_B.nWIneq_old <= proc_control_B.nWLower_old - 1) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 4,
          TrialState->workingset_old.data[proc_control_B.nWIneq_old +
          proc_control_B.idx_Aineq]);
        proc_control_B.nWIneq_old++;
      }

      proc_control_B.nWLower_old = 0;
      while (proc_control_B.nWLower_old <= proc_control_B.nWUpper_old - 1) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 5,
          TrialState->workingset_old.data[(proc_control_B.nWLower_old +
          proc_control_B.idx_Aineq) + proc_control_B.iy_o]);
        proc_control_B.nWLower_old++;
      }
    }
  }

  if (!success) {
    proc_control_B.nWUpper_old = 0;
    while (proc_control_B.nWUpper_old <= proc_control_B.mConstrMax_g) {
      TrialState->lambda.data[proc_control_B.nWUpper_old] =
        TrialState->lambdaStopTest.data[proc_control_B.nWUpper_old];
      proc_control_B.nWUpper_old++;
    }
  } else {
    proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
      WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
      WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
  }

  return success;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_normal(const real_T Hessian[24025], const real_T
  grad_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *WorkingSet, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *QRManager,
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *CholManager, s_syceGAKWionoNWyVws9jI_proc__T *
  QPObjective, const somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  boolean_T nonlinEqRemoved;
  proc_control_B.qpoptions_d = *qpoptions;
  proc_control_B.qpoptions_o = *qpoptions;
  proc_control_driver_i(Hessian, grad_data, TrialState, memspace, WorkingSet,
                        QRManager, CholManager, QPObjective,
                        &proc_control_B.qpoptions_d, &proc_control_B.qpoptions_o);
  if (TrialState->state > 0) {
    proc_control_B.penaltyParamTrial = MeritFunction->penaltyParam;
    proc_control_B.constrViolationEq = 0.0;
    for (proc_control_B.k_p = 0; proc_control_B.k_p < 130; proc_control_B.k_p++)
    {
      proc_control_B.constrViolationEq += std::abs(TrialState->
        cEq[proc_control_B.k_p]);
    }

    proc_control_B.constrViolationIneq = 0.0;
    proc_control_B.k_p = 0;
    while (proc_control_B.k_p <= WorkingSet->sizes[2] - 1) {
      if (TrialState->cIneq.data[proc_control_B.k_p] > 0.0) {
        proc_control_B.constrViolationIneq += TrialState->
          cIneq.data[proc_control_B.k_p];
      }

      proc_control_B.k_p++;
    }

    proc_control_B.constrViolationEq += proc_control_B.constrViolationIneq;
    proc_control_B.constrViolationIneq = MeritFunction->linearizedConstrViol;
    MeritFunction->linearizedConstrViol = 0.0;
    proc_control_B.constrViolationIneq += proc_control_B.constrViolationEq;
    if ((proc_control_B.constrViolationIneq > 2.2204460492503131E-16) &&
        (TrialState->fstar > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        proc_control_B.penaltyParamTrial = 1.0;
      } else {
        proc_control_B.penaltyParamTrial = 1.5;
      }

      proc_control_B.penaltyParamTrial = proc_control_B.penaltyParamTrial *
        TrialState->fstar / proc_control_B.constrViolationIneq;
    }

    if (proc_control_B.penaltyParamTrial < MeritFunction->penaltyParam) {
      MeritFunction->phi = proc_control_B.penaltyParamTrial *
        proc_control_B.constrViolationEq + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) *
           proc_control_B.penaltyParamTrial + MeritFunction->initFval) -
          MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        MeritFunction->penaltyParam = std::fmax(proc_control_B.penaltyParamTrial,
          1.0E-10);
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam *
          proc_control_B.constrViolationEq + TrialState->sqpFval;
      }
    } else {
      MeritFunction->penaltyParam = std::fmax(proc_control_B.penaltyParamTrial,
        1.0E-10);
      MeritFunction->phi = MeritFunction->penaltyParam *
        proc_control_B.constrViolationEq + TrialState->sqpFval;
    }

    MeritFunction->phiPrimePlus = std::fmin(TrialState->fstar -
      MeritFunction->penaltyParam * proc_control_B.constrViolationEq, 0.0);
  }

  proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
    WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
    WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
  nonlinEqRemoved = (WorkingSet->mEqRemoved > 0);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_addAeqConstr(WorkingSet, WorkingSet->indexEqRemoved
      [WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  if (nonlinEqRemoved) {
    for (proc_control_B.k_p = 0; proc_control_B.k_p < 130; proc_control_B.k_p++)
    {
      WorkingSet->Wlocalidx.data[WorkingSet->sizes[0] + proc_control_B.k_p] =
        proc_control_B.k_p + 1;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_relaxed(const real_T Hessian[24025], const
  real_T grad_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *WorkingSet, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *QRManager,
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *CholManager, s_syceGAKWionoNWyVws9jI_proc__T *
  QPObjective, somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  boolean_T tf;
  proc_control_B.nVarOrig = WorkingSet->nVar - 1;
  proc_control_B.beta = 0.0;
  proc_control_B.temp_j = 0;
  while (proc_control_B.temp_j <= proc_control_B.nVarOrig) {
    proc_control_B.beta += Hessian[155 * proc_control_B.temp_j +
      proc_control_B.temp_j];
    proc_control_B.temp_j++;
  }

  proc_control_B.beta /= static_cast<real_T>(WorkingSet->nVar);
  if (TrialState->sqpIterations <= 1) {
    proc_control_B.rho = std::fmax(1.0, std::abs(grad_data[proc_control_ixamax
      (QPObjective->nvar, grad_data) - 1])) * 100.0;
  } else {
    proc_control_B.rho = std::abs(TrialState->lambdasqp.data[proc_control_ixamax
      (WorkingSet->mConstr, TrialState->lambdasqp.data) - 1]);
  }

  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->beta = proc_control_B.beta;
  QPObjective->rho = proc_control_B.rho;
  QPObjective->hasLinear = true;
  QPObjective->objtype = 4;
  proc_control_B.b_WorkingSet = *WorkingSet;
  proc_control_setProblemType(&proc_control_B.b_WorkingSet, 2);
  proc_control_B.mIneq_j = proc_control_B.b_WorkingSet.sizes[2] - 1;
  proc_control_B.mLBOrig = (proc_control_B.b_WorkingSet.sizes[3] -
    proc_control_B.b_WorkingSet.sizes[2]) - 260;
  proc_control_B.temp_j = 0;
  while (proc_control_B.temp_j <= proc_control_B.mIneq_j) {
    memspace->workspace_double.data[proc_control_B.temp_j] =
      proc_control_B.b_WorkingSet.bineq.data[proc_control_B.temp_j];
    proc_control_B.temp_j++;
  }

  proc_control_xgemv_mtmcjbiadz2(WorkingSet->nVar,
    proc_control_B.b_WorkingSet.sizes[2], proc_control_B.b_WorkingSet.Aineq.data,
    proc_control_B.b_WorkingSet.ldA, TrialState->xstar.data,
    memspace->workspace_double.data);
  proc_control_B.temp_j = 0;
  while (proc_control_B.temp_j <= proc_control_B.mIneq_j) {
    TrialState->xstar.data[(proc_control_B.nVarOrig + proc_control_B.temp_j) + 1]
      = static_cast<real_T>(memspace->
      workspace_double.data[proc_control_B.temp_j] > 0.0) *
      memspace->workspace_double.data[proc_control_B.temp_j];
    proc_control_B.temp_j++;
  }

  std::memcpy(&memspace->workspace_double.data[0],
              &proc_control_B.b_WorkingSet.beq[0], 130U * sizeof(real_T));
  proc_control_xgemv_mtmcjbiadz2(WorkingSet->nVar, 130,
    proc_control_B.b_WorkingSet.Aeq.data, proc_control_B.b_WorkingSet.ldA,
    TrialState->xstar.data, memspace->workspace_double.data);
  for (proc_control_B.temp_j = 0; proc_control_B.temp_j < 130;
       proc_control_B.temp_j++) {
    proc_control_B.idx_positive = proc_control_B.mIneq_j + proc_control_B.temp_j;
    if (memspace->workspace_double.data[proc_control_B.temp_j] <= 0.0) {
      TrialState->xstar.data[(proc_control_B.nVarOrig +
        proc_control_B.idx_positive) + 2] = 0.0;
      TrialState->xstar.data[(proc_control_B.nVarOrig +
        proc_control_B.idx_positive) + 132] = -memspace->
        workspace_double.data[proc_control_B.temp_j];
      proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4,
        (proc_control_B.mLBOrig + proc_control_B.idx_positive) + 2);
      if (memspace->workspace_double.data[proc_control_B.temp_j] >= -0.02) {
        proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4,
          (proc_control_B.mLBOrig + proc_control_B.idx_positive) + 132);
      }
    } else {
      proc_control_B.i23 = proc_control_B.nVarOrig + proc_control_B.idx_positive;
      TrialState->xstar.data[proc_control_B.i23 + 2] =
        memspace->workspace_double.data[proc_control_B.temp_j];
      TrialState->xstar.data[proc_control_B.i23 + 132] = 0.0;
      proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4,
        (proc_control_B.mLBOrig + proc_control_B.idx_positive) + 132);
      if (memspace->workspace_double.data[proc_control_B.temp_j] <= 0.02) {
        proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4,
          (proc_control_B.mLBOrig + proc_control_B.idx_positive) + 2);
      }
    }
  }

  proc_control_B.temp_j = qpoptions->MaxIterations;
  qpoptions->MaxIterations = (qpoptions->MaxIterations +
    proc_control_B.b_WorkingSet.nVar) - WorkingSet->nVar;
  proc_control_B.qpoptions = *qpoptions;
  proc_control_B.qpoptions_c = *qpoptions;
  proc_control_driver_i(Hessian, grad_data, TrialState, memspace,
                        &proc_control_B.b_WorkingSet, QRManager, CholManager,
                        QPObjective, &proc_control_B.qpoptions,
                        &proc_control_B.qpoptions_c);
  qpoptions->MaxIterations = proc_control_B.temp_j;
  proc_control_B.mIneq_j = proc_control_B.b_WorkingSet.sizes[2] - 1;
  proc_control_B.mLBOrig = proc_control_B.b_WorkingSet.sizes[3] - 261;
  proc_control_B.temp_j = 0;
  for (proc_control_B.nVarOrig = 0; proc_control_B.nVarOrig < 130;
       proc_control_B.nVarOrig++) {
    boolean_T b_tf;
    proc_control_B.idx_positive = (proc_control_B.b_WorkingSet.isActiveIdx[3] +
      proc_control_B.mLBOrig) + proc_control_B.nVarOrig;
    tf =
      proc_control_B.b_WorkingSet.isActiveConstr.data[proc_control_B.idx_positive];
    b_tf =
      proc_control_B.b_WorkingSet.isActiveConstr.data[proc_control_B.idx_positive
      + 130];
    memspace->workspace_int.data[proc_control_B.nVarOrig] = tf;
    memspace->workspace_int.data[proc_control_B.nVarOrig + 130] = b_tf;
    proc_control_B.temp_j = (proc_control_B.temp_j + tf) + b_tf;
  }

  proc_control_B.nVarOrig = 0;
  while (proc_control_B.nVarOrig <= proc_control_B.mIneq_j) {
    tf = proc_control_B.b_WorkingSet.isActiveConstr.data
      [(((proc_control_B.b_WorkingSet.isActiveIdx[3] + proc_control_B.mLBOrig) -
         proc_control_B.mIneq_j) + proc_control_B.nVarOrig) - 1];
    memspace->workspace_int.data[proc_control_B.nVarOrig + 260] = tf;
    proc_control_B.temp_j += tf;
    proc_control_B.nVarOrig++;
  }

  if (TrialState->state != -6) {
    proc_control_B.nVarOrig = (proc_control_B.b_WorkingSet.nVarMax -
      WorkingSet->nVar) - 1;
    proc_control_B.qpfvalLinearExcess = 0.0;
    proc_control_B.qpfvalQuadExcess = 0.0;
    if (proc_control_B.nVarOrig >= 1) {
      proc_control_B.mIneq_j = WorkingSet->nVar + proc_control_B.nVarOrig;
      proc_control_B.mLBOrig = WorkingSet->nVar;
      while (proc_control_B.mLBOrig + 1 <= proc_control_B.mIneq_j) {
        proc_control_B.qpfvalLinearExcess += std::abs(TrialState->
          xstar.data[proc_control_B.mLBOrig]);
        proc_control_B.mLBOrig++;
      }

      proc_control_B.mIneq_j = WorkingSet->nVar;
      proc_control_B.mLBOrig = WorkingSet->nVar;
      proc_control_B.idx_positive = 0;
      while (proc_control_B.idx_positive <= proc_control_B.nVarOrig - 1) {
        proc_control_B.qpfvalQuadExcess += TrialState->
          xstar.data[proc_control_B.mIneq_j] * TrialState->
          xstar.data[proc_control_B.mLBOrig];
        proc_control_B.mIneq_j++;
        proc_control_B.mLBOrig++;
        proc_control_B.idx_positive++;
      }
    }

    proc_control_B.beta = (TrialState->fstar - proc_control_B.rho *
      proc_control_B.qpfvalLinearExcess) - proc_control_B.beta / 2.0 *
      proc_control_B.qpfvalQuadExcess;
    proc_control_B.mIneq_j = (WorkingSet->nVarMax - WorkingSet->nVar) - 1;
    proc_control_B.rho = MeritFunction->penaltyParam;
    proc_control_B.qpfvalLinearExcess = 0.0;
    for (proc_control_B.nVarOrig = 0; proc_control_B.nVarOrig < 130;
         proc_control_B.nVarOrig++) {
      proc_control_B.qpfvalLinearExcess += std::abs(TrialState->
        cEq[proc_control_B.nVarOrig]);
    }

    proc_control_B.qpfvalQuadExcess = 0.0;
    proc_control_B.nVarOrig = 0;
    while (proc_control_B.nVarOrig <= WorkingSet->sizes[2] - 1) {
      if (TrialState->cIneq.data[proc_control_B.nVarOrig] > 0.0) {
        proc_control_B.qpfvalQuadExcess += TrialState->
          cIneq.data[proc_control_B.nVarOrig];
      }

      proc_control_B.nVarOrig++;
    }

    proc_control_B.qpfvalLinearExcess += proc_control_B.qpfvalQuadExcess;
    proc_control_B.qpfvalQuadExcess = MeritFunction->linearizedConstrViol;
    proc_control_B.y_o = 0.0;
    if (proc_control_B.mIneq_j >= 1) {
      proc_control_B.nVarOrig = WorkingSet->nVar + proc_control_B.mIneq_j;
      proc_control_B.mIneq_j = WorkingSet->nVar;
      while (proc_control_B.mIneq_j + 1 <= proc_control_B.nVarOrig) {
        proc_control_B.y_o += std::abs(TrialState->
          xstar.data[proc_control_B.mIneq_j]);
        proc_control_B.mIneq_j++;
      }
    }

    MeritFunction->linearizedConstrViol = proc_control_B.y_o;
    proc_control_B.qpfvalQuadExcess = (proc_control_B.qpfvalLinearExcess +
      proc_control_B.qpfvalQuadExcess) - proc_control_B.y_o;
    if ((proc_control_B.qpfvalQuadExcess > 2.2204460492503131E-16) &&
        (proc_control_B.beta > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        proc_control_B.rho = 1.0;
      } else {
        proc_control_B.rho = 1.5;
      }

      proc_control_B.rho = proc_control_B.rho * proc_control_B.beta /
        proc_control_B.qpfvalQuadExcess;
    }

    if (proc_control_B.rho < MeritFunction->penaltyParam) {
      MeritFunction->phi = proc_control_B.rho *
        proc_control_B.qpfvalLinearExcess + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) * proc_control_B.rho +
           MeritFunction->initFval) - MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        MeritFunction->penaltyParam = std::fmax(proc_control_B.rho, 1.0E-10);
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam *
          proc_control_B.qpfvalLinearExcess + TrialState->sqpFval;
      }
    } else {
      MeritFunction->penaltyParam = std::fmax(proc_control_B.rho, 1.0E-10);
      MeritFunction->phi = MeritFunction->penaltyParam *
        proc_control_B.qpfvalLinearExcess + TrialState->sqpFval;
    }

    MeritFunction->phiPrimePlus = std::fmin(proc_control_B.beta -
      MeritFunction->penaltyParam * proc_control_B.qpfvalLinearExcess, 0.0);
    proc_control_B.mIneq_j = proc_control_B.b_WorkingSet.isActiveIdx[1] - 1;
    for (proc_control_B.nVarOrig = 0; proc_control_B.nVarOrig < 130;
         proc_control_B.nVarOrig++) {
      if (memspace->workspace_int.data[proc_control_B.nVarOrig] != 0) {
        tf = (memspace->workspace_int.data[proc_control_B.nVarOrig + 130] != 0);
      } else {
        tf = false;
      }

      proc_control_B.mLBOrig = proc_control_B.mIneq_j + proc_control_B.nVarOrig;
      TrialState->lambda.data[proc_control_B.mLBOrig] *= static_cast<real_T>(tf);
    }

    proc_control_B.nVarOrig = proc_control_B.b_WorkingSet.isActiveIdx[2] - 1;
    while (proc_control_B.nVarOrig + 1 <=
           proc_control_B.b_WorkingSet.nActiveConstr) {
      if (proc_control_B.b_WorkingSet.Wid.data[proc_control_B.nVarOrig] == 3) {
        TrialState->lambda.data[proc_control_B.nVarOrig] *= static_cast<real_T>
          (memspace->
           workspace_int.data[proc_control_B.b_WorkingSet.Wlocalidx.data[proc_control_B.nVarOrig]
           + 259]);
      }

      proc_control_B.nVarOrig++;
    }
  }

  proc_control_B.c_WorkingSet = proc_control_B.b_WorkingSet;
  proc_control_B.nVarOrig = (proc_control_B.b_WorkingSet.sizes[3] -
    proc_control_B.b_WorkingSet.sizes[2]) - 260;
  proc_control_B.mIneq_j = proc_control_B.b_WorkingSet.nActiveConstr;
  while ((proc_control_B.mIneq_j > proc_control_B.b_WorkingSet.sizes[0] + 130) &&
         (proc_control_B.temp_j > 0)) {
    if ((proc_control_B.c_WorkingSet.Wid.data[proc_control_B.mIneq_j - 1] == 4) &&
        (proc_control_B.c_WorkingSet.Wlocalidx.data[proc_control_B.mIneq_j - 1] >
         proc_control_B.nVarOrig)) {
      proc_control_B.beta = TrialState->
        lambda.data[proc_control_B.c_WorkingSet.nActiveConstr - 1];
      TrialState->lambda.data[proc_control_B.c_WorkingSet.nActiveConstr - 1] =
        0.0;
      TrialState->lambda.data[proc_control_B.mIneq_j - 1] = proc_control_B.beta;
      proc_control_removeConstr(&proc_control_B.c_WorkingSet,
        proc_control_B.mIneq_j);
      proc_control_B.temp_j--;
    }

    proc_control_B.mIneq_j--;
  }

  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->hasLinear = true;
  QPObjective->objtype = 3;
  *WorkingSet = proc_control_B.c_WorkingSet;
  proc_control_setProblemType(WorkingSet, 3);
  proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
    WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
    WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
}

// Function for MATLAB Function: '<S214>/NLMPC'
boolean_T proc_control::proc_control_step_k(int32_T *STEP_TYPE, real_T Hessian
  [24025], const real_T lb[155], s_SfTiiT1KRClFcMCE02xJjB_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *WorkingSet, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *QRManager,
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *CholManager, s_syceGAKWionoNWyVws9jI_proc__T *
  QPObjective, somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  boolean_T checkBoundViolation;
  boolean_T stepSuccess;
  stepSuccess = true;
  checkBoundViolation = true;
  proc_control_B.nVar = WorkingSet->nVar - 1;
  if (*STEP_TYPE != 3) {
    proc_control_B.b_k_k = 0;
    while (proc_control_B.b_k_k <= proc_control_B.nVar) {
      TrialState->xstar.data[proc_control_B.b_k_k] = TrialState->
        xstarsqp[proc_control_B.b_k_k];
      proc_control_B.b_k_k++;
    }
  } else {
    proc_control_B.y_size_idx_0_m = TrialState->searchDir.size;
    proc_control_B.iH0 = TrialState->searchDir.size;
    if (proc_control_B.iH0 - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data_d[0], &TrialState->searchDir.data[0],
                  proc_control_B.iH0 * sizeof(real_T));
    }

    proc_control_B.b_k_k = 0;
    while (proc_control_B.b_k_k <= proc_control_B.nVar) {
      proc_control_B.y_data_d[proc_control_B.b_k_k] = TrialState->
        xstar.data[proc_control_B.b_k_k];
      proc_control_B.b_k_k++;
    }

    if (proc_control_B.y_size_idx_0_m - 1 >= 0) {
      std::memcpy(&TrialState->searchDir.data[0], &proc_control_B.y_data_d[0],
                  proc_control_B.y_size_idx_0_m * sizeof(real_T));
    }
  }

  int32_T exitg1;
  boolean_T guard1{ false };

  do {
    exitg1 = 0;
    guard1 = false;
    switch (*STEP_TYPE) {
     case 1:
      proc_control_normal(Hessian, TrialState->grad.data, TrialState,
                          MeritFunction, memspace, WorkingSet, QRManager,
                          CholManager, QPObjective, qpoptions);
      if ((TrialState->state <= 0) && (TrialState->state != -6)) {
        *STEP_TYPE = 2;
      } else {
        proc_control_B.y_size_idx_0_m = TrialState->delta_x.size;
        proc_control_B.iH0 = TrialState->delta_x.size;
        if (proc_control_B.iH0 - 1 >= 0) {
          std::memcpy(&proc_control_B.y_data_d[0], &TrialState->delta_x.data[0],
                      proc_control_B.iH0 * sizeof(real_T));
        }

        proc_control_B.b_k_k = 0;
        while (proc_control_B.b_k_k <= proc_control_B.nVar) {
          proc_control_B.y_data_d[proc_control_B.b_k_k] = TrialState->
            xstar.data[proc_control_B.b_k_k];
          proc_control_B.b_k_k++;
        }

        if (proc_control_B.y_size_idx_0_m - 1 >= 0) {
          std::memcpy(&TrialState->delta_x.data[0], &proc_control_B.y_data_d[0],
                      proc_control_B.y_size_idx_0_m * sizeof(real_T));
        }

        guard1 = true;
      }
      break;

     case 2:
      proc_contro_removeAllIneqConstr(WorkingSet);
      proc_control_B.y_size_idx_0_m = TrialState->xstar.size;
      proc_control_B.iH0 = TrialState->xstar.size;
      if (proc_control_B.iH0 - 1 >= 0) {
        std::memcpy(&proc_control_B.c_data[0], &TrialState->xstar.data[0],
                    proc_control_B.iH0 * sizeof(real_T));
      }

      proc_control_B.b_k_k = 0;
      while (proc_control_B.b_k_k <= WorkingSet->sizes[3] - 1) {
        proc_control_B.nrmGradInf = WorkingSet->lb.data[WorkingSet->
          indexLB.data[proc_control_B.b_k_k] - 1];
        if (-proc_control_B.c_data[WorkingSet->indexLB.data[proc_control_B.b_k_k]
            - 1] > proc_control_B.nrmGradInf) {
          proc_control_B.c_data[WorkingSet->indexLB.data[proc_control_B.b_k_k] -
            1] = -proc_control_B.nrmGradInf + std::abs(proc_control_B.nrmGradInf);
        }

        proc_control_B.b_k_k++;
      }

      if (proc_control_B.y_size_idx_0_m - 1 >= 0) {
        std::memcpy(&TrialState->xstar.data[0], &proc_control_B.c_data[0],
                    proc_control_B.y_size_idx_0_m * sizeof(real_T));
      }

      proc_control_relaxed(Hessian, TrialState->grad.data, TrialState,
                           MeritFunction, memspace, WorkingSet, QRManager,
                           CholManager, QPObjective, qpoptions);
      proc_control_B.y_size_idx_0_m = TrialState->delta_x.size;
      proc_control_B.iH0 = TrialState->delta_x.size;
      if (proc_control_B.iH0 - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_d[0], &TrialState->delta_x.data[0],
                    proc_control_B.iH0 * sizeof(real_T));
      }

      proc_control_B.b_k_k = 0;
      while (proc_control_B.b_k_k <= proc_control_B.nVar) {
        proc_control_B.y_data_d[proc_control_B.b_k_k] = TrialState->
          xstar.data[proc_control_B.b_k_k];
        proc_control_B.b_k_k++;
      }

      if (proc_control_B.y_size_idx_0_m - 1 >= 0) {
        std::memcpy(&TrialState->delta_x.data[0], &proc_control_B.y_data_d[0],
                    proc_control_B.y_size_idx_0_m * sizeof(real_T));
      }

      guard1 = true;
      break;

     default:
      stepSuccess = proc_control_soc(Hessian, TrialState->grad.data, TrialState,
        memspace, WorkingSet, QRManager, CholManager, QPObjective, qpoptions);
      checkBoundViolation = stepSuccess;
      if (stepSuccess && (TrialState->state != -6)) {
        proc_control_B.b_k_k = 0;
        while (proc_control_B.b_k_k <= proc_control_B.nVar) {
          TrialState->delta_x.data[proc_control_B.b_k_k] =
            TrialState->xstar.data[proc_control_B.b_k_k] +
            TrialState->socDirection.data[proc_control_B.b_k_k];
          proc_control_B.b_k_k++;
        }
      }

      guard1 = true;
      break;
    }

    if (guard1) {
      if (TrialState->state != -6) {
        exitg1 = 1;
      } else {
        proc_control_B.nrmGradInf = 0.0;
        proc_control_B.nrmDirInf = 1.0;
        for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 155;
             proc_control_B.b_k_k++) {
          proc_control_B.nrmGradInf = std::fmax(proc_control_B.nrmGradInf, std::
            abs(TrialState->grad.data[proc_control_B.b_k_k]));
          proc_control_B.nrmDirInf = std::fmax(proc_control_B.nrmDirInf, std::
            abs(TrialState->xstar.data[proc_control_B.b_k_k]));
        }

        proc_control_B.nrmGradInf = std::fmax(2.2204460492503131E-16,
          proc_control_B.nrmGradInf / proc_control_B.nrmDirInf);
        for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 155;
             proc_control_B.b_k_k++) {
          proc_control_B.iH0 = 155 * proc_control_B.b_k_k;
          proc_control_B.y_size_idx_0_m = 0;
          while (proc_control_B.y_size_idx_0_m <= proc_control_B.b_k_k - 1) {
            Hessian[proc_control_B.iH0 + proc_control_B.y_size_idx_0_m] = 0.0;
            proc_control_B.y_size_idx_0_m++;
          }

          Hessian[proc_control_B.b_k_k + 155 * proc_control_B.b_k_k] =
            proc_control_B.nrmGradInf;
          proc_control_B.iH0 += proc_control_B.b_k_k;
          proc_control_B.y_size_idx_0_m = 0;
          while (proc_control_B.y_size_idx_0_m <= 153 - proc_control_B.b_k_k) {
            Hessian[(proc_control_B.iH0 + proc_control_B.y_size_idx_0_m) + 1] =
              0.0;
            proc_control_B.y_size_idx_0_m++;
          }
        }
      }
    }
  } while (exitg1 == 0);

  if (checkBoundViolation) {
    proc_control_B.y_size_idx_0_m = TrialState->delta_x.size;
    proc_control_B.iH0 = TrialState->delta_x.size;
    if (proc_control_B.iH0 - 1 >= 0) {
      std::memcpy(&proc_control_B.c_data[0], &TrialState->delta_x.data[0],
                  proc_control_B.iH0 * sizeof(real_T));
    }

    proc_control_B.nVar = 0;
    while (proc_control_B.nVar <= WorkingSet->sizes[3] - 1) {
      proc_control_B.nrmDirInf = proc_control_B.c_data[WorkingSet->
        indexLB.data[proc_control_B.nVar] - 1];
      proc_control_B.nrmGradInf = (TrialState->xstarsqp[WorkingSet->
        indexLB.data[proc_control_B.nVar] - 1] + proc_control_B.nrmDirInf) -
        lb[WorkingSet->indexLB.data[proc_control_B.nVar] - 1];
      if (proc_control_B.nrmGradInf < 0.0) {
        proc_control_B.c_data[WorkingSet->indexLB.data[proc_control_B.nVar] - 1]
          = proc_control_B.nrmDirInf - proc_control_B.nrmGradInf;
        TrialState->xstar.data[WorkingSet->indexLB.data[proc_control_B.nVar] - 1]
          -= proc_control_B.nrmGradInf;
      }

      proc_control_B.nVar++;
    }

    TrialState->delta_x.size = proc_control_B.y_size_idx_0_m;
    if (proc_control_B.y_size_idx_0_m - 1 >= 0) {
      std::memcpy(&TrialState->delta_x.data[0], &proc_control_B.c_data[0],
                  proc_control_B.y_size_idx_0_m * sizeof(real_T));
    }
  }

  return stepSuccess;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_outputBounds_p(const real_T
  runtimedata_OutputMin[130], const real_T runtimedata_OutputMax[130], const
  real_T X[143], real_T e, real_T c_data[], int32_T c_size[2])
{
  boolean_T exitg1;
  boolean_T y;
  for (proc_control_B.i_l = 0; proc_control_B.i_l < 130; proc_control_B.i_l++) {
    proc_control_B.bv1[proc_control_B.i_l] = std::isinf
      (runtimedata_OutputMin[proc_control_B.i_l]);
  }

  proc_control_all_H4RNf0h2(proc_control_B.bv1, proc_control_B.x_k);
  y = true;
  proc_control_B.k_e = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.k_e < 13)) {
    if (!proc_control_B.x_k[proc_control_B.k_e]) {
      y = false;
      exitg1 = true;
    } else {
      proc_control_B.k_e++;
    }
  }

  if (y) {
    for (proc_control_B.i_l = 0; proc_control_B.i_l < 130; proc_control_B.i_l++)
    {
      proc_control_B.bv1[proc_control_B.i_l] = std::isinf
        (runtimedata_OutputMax[proc_control_B.i_l]);
    }

    proc_control_all_H4RNf0h2(proc_control_B.bv1, proc_control_B.x_k);
    proc_control_B.k_e = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.k_e < 13)) {
      if (!proc_control_B.x_k[proc_control_B.k_e]) {
        y = false;
        exitg1 = true;
      } else {
        proc_control_B.k_e++;
      }
    }
  }

  if (y) {
    c_size[0] = 0;
    c_size[1] = 0;
  } else {
    for (proc_control_B.i_l = 0; proc_control_B.i_l < 260; proc_control_B.i_l++)
    {
      proc_control_B.b_c[proc_control_B.i_l] = 0.0;
      proc_control_B.icf[proc_control_B.i_l] = true;
    }

    for (proc_control_B.i_l = 0; proc_control_B.i_l < 13; proc_control_B.i_l++)
    {
      proc_control_B.ic_d[proc_control_B.i_l] = static_cast<real_T>
        (proc_control_B.i_l) + 1.0;
    }

    for (proc_control_B.k_e = 0; proc_control_B.k_e < 10; proc_control_B.k_e++)
    {
      for (proc_control_B.i_l = 0; proc_control_B.i_l < 13; proc_control_B.i_l++)
      {
        proc_control_B.runtimedata_OutputMin = runtimedata_OutputMin[10 *
          proc_control_B.i_l + proc_control_B.k_e];
        proc_control_B.icf[static_cast<int32_T>
          (proc_control_B.ic_d[proc_control_B.i_l]) - 1] = ((!std::isinf
          (proc_control_B.runtimedata_OutputMin)) && (!std::isnan
          (proc_control_B.runtimedata_OutputMin)));
      }

      for (proc_control_B.i_l = 0; proc_control_B.i_l < 13; proc_control_B.i_l++)
      {
        proc_control_B.runtimedata_OutputMin =
          proc_control_B.ic_d[proc_control_B.i_l];
        proc_control_B.runtimedata_OutputMax = runtimedata_OutputMax[10 *
          proc_control_B.i_l + proc_control_B.k_e];
        proc_control_B.icf[static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin + 13.0) - 1] = ((!std::isinf
          (proc_control_B.runtimedata_OutputMax)) && (!std::isnan
          (proc_control_B.runtimedata_OutputMax)));
        proc_control_B.ic[proc_control_B.i_l] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin) - 1;
        proc_control_B.ic[proc_control_B.i_l + 13] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin + 13.0) - 1;
      }

      for (proc_control_B.i_l = 0; proc_control_B.i_l < 26; proc_control_B.i_l++)
      {
        proc_control_B.icf_l[proc_control_B.i_l] =
          proc_control_B.icf[proc_control_B.ic[proc_control_B.i_l]];
      }

      if (proc_control_any(proc_control_B.icf_l)) {
        for (proc_control_B.i_l = 0; proc_control_B.i_l < 13; proc_control_B.i_l
             ++) {
          proc_control_B.b_c[static_cast<int32_T>
            (proc_control_B.ic_d[proc_control_B.i_l]) - 1] =
            (runtimedata_OutputMin[10 * proc_control_B.i_l + proc_control_B.k_e]
             - e) - X[(11 * proc_control_B.i_l + proc_control_B.k_e) + 1];
        }

        for (proc_control_B.i_l = 0; proc_control_B.i_l < 13; proc_control_B.i_l
             ++) {
          proc_control_B.b_c[static_cast<int32_T>
            (proc_control_B.ic_d[proc_control_B.i_l] + 13.0) - 1] = (X[(11 *
            proc_control_B.i_l + proc_control_B.k_e) + 1] -
            runtimedata_OutputMax[10 * proc_control_B.i_l + proc_control_B.k_e])
            - e;
        }
      }

      for (proc_control_B.i_l = 0; proc_control_B.i_l < 13; proc_control_B.i_l++)
      {
        proc_control_B.ic_d[proc_control_B.i_l] += 26.0;
      }
    }

    proc_control_B.k_e = 0;
    for (proc_control_B.i_l = 0; proc_control_B.i_l < 260; proc_control_B.i_l++)
    {
      if (proc_control_B.icf[proc_control_B.i_l]) {
        proc_control_B.k_e++;
      }
    }

    proc_control_B.b_size_idx_0 = proc_control_B.k_e;
    proc_control_B.k_e = 0;
    for (proc_control_B.i_l = 0; proc_control_B.i_l < 260; proc_control_B.i_l++)
    {
      if (proc_control_B.icf[proc_control_B.i_l]) {
        proc_control_B.b_data_k[proc_control_B.k_e] = static_cast<int16_T>
          (proc_control_B.i_l + 1);
        proc_control_B.k_e++;
      }
    }

    for (proc_control_B.i_l = 0; proc_control_B.i_l <
         proc_control_B.b_size_idx_0; proc_control_B.i_l++) {
      proc_control_B.b_c_data[proc_control_B.i_l] =
        proc_control_B.b_c[proc_control_B.b_data_k[proc_control_B.i_l] - 1];
    }

    c_size[0] = proc_control_B.b_size_idx_0;
    c_size[1] = 1;
    if (proc_control_B.b_size_idx_0 - 1 >= 0) {
      std::memcpy(&c_data[0], &proc_control_B.b_c_data[0],
                  proc_control_B.b_size_idx_0 * sizeof(real_T));
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_co_stateEvolution_IBbdjakB(const real_T X[143], const
  real_T U[88], real_T c[130])
{
  int32_T i;
  std::memset(&c[0], 0, 130U * sizeof(real_T));
  for (proc_control_B.i20 = 0; proc_control_B.i20 < 13; proc_control_B.i20++) {
    proc_control_B.ic_n[proc_control_B.i20] = static_cast<real_T>
      (proc_control_B.i20) + 1.0;
  }

  for (proc_control_B.i20 = 0; proc_control_B.i20 < 11; proc_control_B.i20++) {
    for (i = 0; i < 8; i++) {
      proc_control_B.b_U_m[i + (proc_control_B.i20 << 3)] = U[11 * i +
        proc_control_B.i20];
    }

    for (i = 0; i < 13; i++) {
      proc_control_B.b_X_e[i + 13 * proc_control_B.i20] = X[11 * i +
        proc_control_B.i20];
    }
  }

  for (proc_control_B.i_j5 = 0; proc_control_B.i_j5 < 10; proc_control_B.i_j5++)
  {
    proc_control_B.i20 = proc_control_B.i_j5 << 3;
    proc_co_AUV8QuatSimFcn_AbfqyrNU(&proc_control_B.b_X_e[13 *
      proc_control_B.i_j5], &proc_control_B.b_U_m[proc_control_B.i20],
      proc_control_B.dv23);
    i = (proc_control_B.i_j5 + 1) * 13;
    proc_co_AUV8QuatSimFcn_AbfqyrNU(&proc_control_B.b_X_e[i],
      &proc_control_B.b_U_m[proc_control_B.i20], proc_control_B.dv24);
    for (proc_control_B.i20 = 0; proc_control_B.i20 < 13; proc_control_B.i20++)
    {
      c[static_cast<int32_T>(proc_control_B.ic_n[proc_control_B.i20]) - 1] =
        (proc_control_B.b_X_e[13 * proc_control_B.i_j5 + proc_control_B.i20] +
         (proc_control_B.dv23[proc_control_B.i20] +
          proc_control_B.dv24[proc_control_B.i20]) * 0.05) -
        proc_control_B.b_X_e[i + proc_control_B.i20];
    }

    for (proc_control_B.i20 = 0; proc_control_B.i20 < 13; proc_control_B.i20++)
    {
      proc_control_B.ic_n[proc_control_B.i20] += 13.0;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc__eML_blk_kernel_anonFcn2_g(const real_T runtimedata_x[13],
  const real_T runtimedata_OutputMin[130], const real_T runtimedata_OutputMax
  [130], const real_T z[155], real_T varargout_1_data[], int32_T
  varargout_1_size[2], real_T varargout_2[130])
{
  int8_T sizes_idx_1;
  proc_control_znlmpc_getXUe(z, runtimedata_x, proc_control_B.X_a,
    proc_control_B.U_i, &proc_control_B.e_f);
  proc_control_outputBounds_p(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_B.X_a, proc_control_B.e_f, proc_control_B.varargin_1_data_a,
    proc_control_B.varargin_1_size);
  sizes_idx_1 = static_cast<int8_T>((proc_control_B.varargin_1_size[0] != 0) &&
    (proc_control_B.varargin_1_size[1] != 0));
  if (sizes_idx_1 == 0) {
    proc_control_B.sizes_idx_0 = proc_control_B.varargin_1_size[0];
  } else if ((proc_control_B.varargin_1_size[0] != 0) &&
             (proc_control_B.varargin_1_size[1] != 0)) {
    proc_control_B.sizes_idx_0 = proc_control_B.varargin_1_size[0];
  } else {
    proc_control_B.sizes_idx_0 = 0;
  }

  varargout_1_size[0] = proc_control_B.sizes_idx_0;
  varargout_1_size[1] = sizes_idx_1;
  if ((sizes_idx_1 - 1 >= 0) && (proc_control_B.sizes_idx_0 - 1 >= 0)) {
    std::memcpy(&varargout_1_data[0], &proc_control_B.varargin_1_data_a[0],
                proc_control_B.sizes_idx_0 * sizeof(real_T));
  }

  proc_co_stateEvolution_IBbdjakB(proc_control_B.X_a, proc_control_B.U_i,
    varargout_2);
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_evalObjAndConstr(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[155],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130],
  real_T *fval, int32_T *status)
{
  proc_control_znlmpc_getXUe(x, obj_objfun_workspace_runtimedat,
    proc_control_B.X, proc_control_B.U_f, &proc_control_B.b_e);
  proc_control_B.fs = 0.0;
  for (proc_control_B.i_id = 0; proc_control_B.i_id < 11; proc_control_B.i_id++)
  {
    for (proc_control_B.i_k4 = 0; proc_control_B.i_k4 < 13; proc_control_B.i_k4
         ++) {
      proc_control_B.b_X[proc_control_B.i_k4 + 13 * proc_control_B.i_id] =
        proc_control_B.X[11 * proc_control_B.i_k4 + proc_control_B.i_id];
    }

    for (proc_control_B.i_k4 = 0; proc_control_B.i_k4 < 8; proc_control_B.i_k4++)
    {
      proc_control_B.b_U[proc_control_B.i_k4 + (proc_control_B.i_id << 3)] =
        proc_control_B.U_f[11 * proc_control_B.i_k4 + proc_control_B.i_id];
    }
  }

  for (proc_control_B.i_k4 = 0; proc_control_B.i_k4 < 10; proc_control_B.i_k4++)
  {
    proc_control_B.wtYerr = 0.0;
    for (proc_control_B.i_id = 0; proc_control_B.i_id < 13; proc_control_B.i_id
         ++) {
      proc_control_B.wtYerr_tmp = 10 * proc_control_B.i_id + proc_control_B.i_k4;
      proc_control_B.wtYerr_j = (proc_control_B.b_X[(proc_control_B.i_k4 + 1) *
        13 + proc_control_B.i_id] -
        obj_objfun_workspace_runtimed_1[proc_control_B.wtYerr_tmp]) *
        obj_objfun_workspace_runtimed_2[proc_control_B.wtYerr_tmp];
      proc_control_B.wtYerr += proc_control_B.wtYerr_j * proc_control_B.wtYerr_j;
    }

    proc_control_B.fs += proc_control_B.wtYerr;
    std::memcpy(&proc_control_B.umvk[0], &proc_control_B.b_U[proc_control_B.i_k4
                << 3], sizeof(real_T) << 3U);
    if (proc_control_B.i_k4 + 1 == 1) {
      for (proc_control_B.i_id = 0; proc_control_B.i_id < 8; proc_control_B.i_id
           ++) {
        proc_control_B.duk[proc_control_B.i_id] =
          proc_control_B.umvk[proc_control_B.i_id] -
          obj_objfun_workspace_runtimed_0[proc_control_B.i_id];
      }
    } else {
      for (proc_control_B.i_id = 0; proc_control_B.i_id < 8; proc_control_B.i_id
           ++) {
        proc_control_B.duk[proc_control_B.i_id] =
          proc_control_B.umvk[proc_control_B.i_id] - proc_control_B.b_U
          [((proc_control_B.i_k4 - 1) << 3) + proc_control_B.i_id];
      }
    }

    proc_control_B.wtYerr = 0.0;
    proc_control_B.wtYerr_j = 0.0;
    for (proc_control_B.i_id = 0; proc_control_B.i_id < 8; proc_control_B.i_id++)
    {
      proc_control_B.wtYerr_tmp = 10 * proc_control_B.i_id + proc_control_B.i_k4;
      proc_control_B.umvk_i = (proc_control_B.umvk[proc_control_B.i_id] -
        obj_objfun_workspace_runtimed_5[proc_control_B.wtYerr_tmp]) *
        obj_objfun_workspace_runtimed_3[proc_control_B.wtYerr_tmp];
      proc_control_B.duk_m =
        obj_objfun_workspace_runtimed_4[proc_control_B.wtYerr_tmp] *
        proc_control_B.duk[proc_control_B.i_id];
      proc_control_B.wtYerr += proc_control_B.umvk_i * proc_control_B.umvk_i;
      proc_control_B.wtYerr_j += proc_control_B.duk_m * proc_control_B.duk_m;
      proc_control_B.umvk[proc_control_B.i_id] = proc_control_B.umvk_i;
      proc_control_B.duk[proc_control_B.i_id] = proc_control_B.duk_m;
    }

    proc_control_B.fs = (proc_control_B.fs + proc_control_B.wtYerr) +
      proc_control_B.wtYerr_j;
  }

  *fval = 100000.0 * proc_control_B.b_e * proc_control_B.b_e + proc_control_B.fs;
  if (std::isinf(*fval) || std::isnan(*fval)) {
    if (std::isnan(*fval)) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    proc_control_B.i_id = (ineq0 + obj_mCineq) - 2;
    proc__eML_blk_kernel_anonFcn2_g(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_B.b_data, proc_control_B.b_size, proc_control_B.c);
    if (ineq0 > proc_control_B.i_id + 1) {
      proc_control_B.i_k4 = -1;
      proc_control_B.i_id = -1;
    } else {
      proc_control_B.i_k4 = ineq0 - 2;
    }

    proc_control_B.wtYerr_tmp = proc_control_B.i_id - proc_control_B.i_k4;
    for (proc_control_B.i_id = 0; proc_control_B.i_id <
         proc_control_B.wtYerr_tmp; proc_control_B.i_id++) {
      Cineq_workspace_data[(proc_control_B.i_k4 + proc_control_B.i_id) + 1] =
        proc_control_B.b_data[proc_control_B.i_id];
    }

    std::memcpy(&Ceq_workspace[0], &proc_control_B.c[0], 130U * sizeof(real_T));
    *status = proc_contr_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
      ineq0);
    if (*status == 1) {
      *status = p_checkVectorNonFinite_2JllBqp7(Ceq_workspace);
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_con_computeLinearResiduals(const real_T x[155], int32_T
  nVar, real_T workspaceIneq_data[], const int32_T *workspaceIneq_size, int32_T
  mLinIneq, const real_T AineqT_data[], const real_T bineq_data[], int32_T ldAi)
{
  if (mLinIneq > 0) {
    int32_T y_size_idx_0;
    proc_control_B.loop_ub_m = *workspaceIneq_size;
    if (proc_control_B.loop_ub_m - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data_dy[0], &workspaceIneq_data[0],
                  proc_control_B.loop_ub_m * sizeof(real_T));
    }

    proc_control_B.k_jm = 0;
    while (proc_control_B.k_jm <= mLinIneq - 1) {
      proc_control_B.y_data_dy[proc_control_B.k_jm] =
        bineq_data[proc_control_B.k_jm];
      proc_control_B.k_jm++;
    }

    if (*workspaceIneq_size - 1 >= 0) {
      std::memcpy(&workspaceIneq_data[0], &proc_control_B.y_data_dy[0],
                  *workspaceIneq_size * sizeof(real_T));
    }

    proc_control_B.k_jm = 0;
    while (proc_control_B.k_jm <= mLinIneq - 1) {
      workspaceIneq_data[proc_control_B.k_jm] =
        -workspaceIneq_data[proc_control_B.k_jm];
      proc_control_B.k_jm++;
    }

    proc_control_B.k_jm = 0;
    proc_control_B.loop_ub_m = (mLinIneq - 1) * ldAi + 1;
    y_size_idx_0 = 1;
    while (((ldAi > 0) && (y_size_idx_0 <= proc_control_B.loop_ub_m)) || ((ldAi <
             0) && (y_size_idx_0 >= proc_control_B.loop_ub_m))) {
      proc_control_B.ix_oe = 0;
      proc_control_B.c_k = 0.0;
      proc_control_B.d_l = (y_size_idx_0 + nVar) - 1;
      proc_control_B.ia_g = y_size_idx_0;
      while (proc_control_B.ia_g <= proc_control_B.d_l) {
        proc_control_B.c_k += AineqT_data[proc_control_B.ia_g - 1] *
          x[proc_control_B.ix_oe];
        proc_control_B.ix_oe++;
        proc_control_B.ia_g++;
      }

      workspaceIneq_data[proc_control_B.k_jm] += proc_control_B.c_k;
      proc_control_B.k_jm++;
      y_size_idx_0 += ldAi;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
real_T proc_control::proc_control_computeMeritFcn(real_T obj_penaltyParam,
  real_T fval, const real_T Cineq_workspace_data[], int32_T mIneq, const real_T
  Ceq_workspace[130], boolean_T evalWellDefined)
{
  real_T val;
  if (evalWellDefined) {
    proc_control_B.constrViolationEq_a = 0.0;
    for (int32_T k{0}; k < 130; k++) {
      proc_control_B.constrViolationEq_a += std::abs(Ceq_workspace[k]);
    }

    proc_control_B.constrViolationIneq_d = 0.0;
    for (int32_T k{0}; k < mIneq; k++) {
      if (Cineq_workspace_data[k] > 0.0) {
        proc_control_B.constrViolationIneq_d += Cineq_workspace_data[k];
      }
    }

    val = (proc_control_B.constrViolationEq_a +
           proc_control_B.constrViolationIneq_d) * obj_penaltyParam + fval;
  } else {
    val = (rtInf);
  }

  return val;
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_linesearch(boolean_T *evalWellDefined, const
  real_T bineq_data[], int32_T WorkingSet_nVar, int32_T WorkingSet_ldA, const
  real_T WorkingSet_Aineq_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T *TrialState,
  real_T MeritFunction_penaltyParam, real_T MeritFunction_phi, real_T
  MeritFunction_phiPrimePlus, real_T MeritFunction_phiFullStep, const
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *FcnEvaluator_objfun_workspace_r, const
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *FcnEvaluator_nonlcon_workspace_, int32_T
  FcnEvaluator_mCineq, boolean_T socTaken, real_T *alpha, int32_T *exitflag)
{
  proc_control_B.mLinIneq = TrialState->mIneq - TrialState->mNonlinIneq;
  *alpha = 1.0;
  *exitflag = 1;
  proc_control_B.phi_alpha = MeritFunction_phiFullStep;
  proc_control_B.y_size_idx_0_k = TrialState->searchDir.size;
  proc_control_B.loop_ub_e = TrialState->searchDir.size;
  if (proc_control_B.loop_ub_e - 1 >= 0) {
    std::memcpy(&proc_control_B.y_data_lx[0], &TrialState->searchDir.data[0],
                proc_control_B.loop_ub_e * sizeof(real_T));
  }

  proc_control_B.loop_ub_e = 0;
  while (proc_control_B.loop_ub_e <= WorkingSet_nVar - 1) {
    proc_control_B.y_data_lx[proc_control_B.loop_ub_e] =
      TrialState->delta_x.data[proc_control_B.loop_ub_e];
    proc_control_B.loop_ub_e++;
  }

  if (proc_control_B.y_size_idx_0_k - 1 >= 0) {
    std::memcpy(&TrialState->searchDir.data[0], &proc_control_B.y_data_lx[0],
                proc_control_B.y_size_idx_0_k * sizeof(real_T));
  }

  int32_T exitg1;
  do {
    exitg1 = 0;
    if (TrialState->FunctionEvaluations < 15500) {
      if ((*evalWellDefined) && (proc_control_B.phi_alpha <= *alpha * 0.0001 *
           MeritFunction_phiPrimePlus + MeritFunction_phi)) {
        exitg1 = 1;
      } else {
        boolean_T exitg2;
        boolean_T tooSmallX;
        *alpha *= 0.7;
        proc_control_B.loop_ub_e = 0;
        while (proc_control_B.loop_ub_e <= WorkingSet_nVar - 1) {
          TrialState->delta_x.data[proc_control_B.loop_ub_e] = *alpha *
            TrialState->xstar.data[proc_control_B.loop_ub_e];
          proc_control_B.loop_ub_e++;
        }

        if (socTaken) {
          proc_control_B.phi_alpha = *alpha * *alpha;
          if ((WorkingSet_nVar >= 1) && (!(proc_control_B.phi_alpha == 0.0))) {
            proc_control_B.loop_ub_e = 0;
            while (proc_control_B.loop_ub_e <= WorkingSet_nVar - 1) {
              TrialState->delta_x.data[proc_control_B.loop_ub_e] +=
                proc_control_B.phi_alpha * TrialState->
                socDirection.data[proc_control_B.loop_ub_e];
              proc_control_B.loop_ub_e++;
            }
          }
        }

        tooSmallX = true;
        proc_control_B.loop_ub_e = 0;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.loop_ub_e <= WorkingSet_nVar - 1)) {
          if (0.1 * std::fmax(1.0, std::abs(TrialState->
                xstarsqp[proc_control_B.loop_ub_e])) <= std::abs
              (TrialState->delta_x.data[proc_control_B.loop_ub_e])) {
            tooSmallX = false;
            exitg2 = true;
          } else {
            proc_control_B.loop_ub_e++;
          }
        }

        if (tooSmallX) {
          *exitflag = -2;
          exitg1 = 1;
        } else {
          proc_control_B.loop_ub_e = 0;
          while (proc_control_B.loop_ub_e <= WorkingSet_nVar - 1) {
            TrialState->xstarsqp[proc_control_B.loop_ub_e] =
              TrialState->xstarsqp_old[proc_control_B.loop_ub_e] +
              TrialState->delta_x.data[proc_control_B.loop_ub_e];
            proc_control_B.loop_ub_e++;
          }

          proc_control_evalObjAndConstr(FcnEvaluator_objfun_workspace_r->x,
            FcnEvaluator_objfun_workspace_r->lastMV,
            FcnEvaluator_objfun_workspace_r->ref,
            FcnEvaluator_objfun_workspace_r->OutputWeights,
            FcnEvaluator_objfun_workspace_r->MVWeights,
            FcnEvaluator_objfun_workspace_r->MVRateWeights,
            FcnEvaluator_objfun_workspace_r->MVScaledTarget,
            FcnEvaluator_nonlcon_workspace_->x,
            FcnEvaluator_nonlcon_workspace_->OutputMin,
            FcnEvaluator_nonlcon_workspace_->OutputMax, FcnEvaluator_mCineq,
            TrialState->xstarsqp, TrialState->cIneq.data, TrialState->iNonIneq0,
            TrialState->cEq, &TrialState->sqpFval, &proc_control_B.loop_ub_e);
          proc_con_computeLinearResiduals(TrialState->xstarsqp, WorkingSet_nVar,
            TrialState->cIneq.data, &TrialState->cIneq.size,
            proc_control_B.mLinIneq, WorkingSet_Aineq_data, bineq_data,
            WorkingSet_ldA);
          TrialState->FunctionEvaluations++;
          *evalWellDefined = (proc_control_B.loop_ub_e == 1);
          proc_control_B.phi_alpha = proc_control_computeMeritFcn
            (MeritFunction_penaltyParam, TrialState->sqpFval,
             TrialState->cIneq.data, TrialState->mIneq, TrialState->cEq,
             *evalWellDefined);
        }
      }
    } else {
      *exitflag = 0;
      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_driver(const real_T bineq_data[], const real_T
  lb[155], s_SfTiiT1KRClFcMCE02xJjB_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction, const
  s_lkFpKxHZB0M4xOcTLHVN2_proc__T *FcnEvaluator, s_rz4qJMGW78cxvfZBKnU9SC_proc_T
  *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T *WorkingSet,
  s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *QRManager, s_NgV9GZ7yjGpklMLIU8C2cB_proc_T
  *CholManager, s_syceGAKWionoNWyVws9jI_proc__T *QPObjective, const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  real_T Hessian[24025])
{
  static const char_T h[7]{ 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  static const int8_T j[24025]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  boolean_T isFeasible;
  for (proc_control_B.mLambda = 0; proc_control_B.mLambda < 24025;
       proc_control_B.mLambda++) {
    Hessian[proc_control_B.mLambda] = j[proc_control_B.mLambda];
  }

  proc_control_B.nVar_tmp_tmp = WorkingSet->nVar;
  proc_control_B.mFixed = WorkingSet->sizes[0];
  proc_control_B.mIneq_n = WorkingSet->sizes[2];
  proc_control_B.mLB = WorkingSet->sizes[3];
  proc_control_B.mUB = WorkingSet->sizes[4];
  proc_control_B.mConstr_tmp = (((WorkingSet->sizes[0] + WorkingSet->sizes[2]) +
    WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 129;
  proc_control_B.mLinIneq_tmp_tmp = WorkingSet->sizes[2] -
    TrialState->mNonlinIneq;
  proc_control_B.mLambda = ((WorkingSet->sizes[2] + WorkingSet->sizes[3]) +
    WorkingSet->sizes[4]) + (WorkingSet->sizes[0] << 1);
  if (WorkingSet->nVar >= proc_control_B.mLambda) {
    proc_control_B.mLambda = WorkingSet->nVar;
  }

  proc_control_B.qpoptions_MaxIterations = 10 * proc_control_B.mLambda;
  TrialState->steplength = 1.0;
  proc_control_B.Flags.fevalOK = true;
  proc_control_B.Flags.stepAccepted = false;
  proc_control_B.Flags.failedLineSearch = false;
  proc_control_B.Flags.stepType = 1;
  proc_control_B.ix_c = 0;
  while (proc_control_B.ix_c <= proc_control_B.mConstr_tmp) {
    TrialState->lambdaStopTest.data[proc_control_B.ix_c] =
      TrialState->lambdasqp.data[proc_control_B.ix_c];
    proc_control_B.ix_c++;
  }

  proc_control_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  proc_control_B.optimRelativeFactor = std::fmax(1.0, std::abs
    (TrialState->grad.data[proc_control_ixamax(WorkingSet->nVar,
    TrialState->grad.data) - 1]));
  if (std::isinf(proc_control_B.optimRelativeFactor)) {
    proc_control_B.optimRelativeFactor = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  MeritFunction->feasRelativeFactor = std::fmax(1.0,
    MeritFunction->nlpPrimalFeasError);
  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &proc_control_B.Flags.gradOK, &MeritFunction->nlpDualFeasError);
  if (!proc_control_B.Flags.gradOK) {
    proc_control_B.Flags.done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = 0.0;
    MeritFunction->firstOrderOpt = std::fmax(MeritFunction->nlpDualFeasError,
      0.0);
    proc_control_B.ix_c = 0;
    while (proc_control_B.ix_c <= proc_control_B.mConstr_tmp) {
      TrialState->lambdaStopTestPrev.data[proc_control_B.ix_c] =
        TrialState->lambdaStopTest.data[proc_control_B.ix_c];
      proc_control_B.ix_c++;
    }

    if (isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
                       proc_control_B.optimRelativeFactor)) {
      proc_control_B.Flags.done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      proc_control_B.Flags.done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        proc_control_B.Flags.done = true;
        TrialState->sqpExitFlag = -3;
      }
    }
  }

  proc_control_saveJacobian(TrialState, WorkingSet->nVar, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->Aeq.data,
    WorkingSet->ldA);
  proc_control_saveState(TrialState);
  if (!proc_control_B.Flags.done) {
    TrialState->sqpIterations = 1;
  }

  while (!proc_control_B.Flags.done) {
    if ((!proc_control_B.Flags.stepAccepted) &&
        (!proc_control_B.Flags.failedLineSearch)) {
      proc_control_B.expl_temp_n.IterDisplayQP = false;
      proc_control_B.expl_temp_n.RemainFeasible = false;
      proc_control_B.expl_temp_n.ProbRelTolFactor = 1.0;
      proc_control_B.expl_temp_n.ConstrRelTolFactor = 1.0;
      proc_control_B.expl_temp_n.PricingTolerance = 0.0;
      proc_control_B.expl_temp_n.ObjectiveLimit = (rtMinusInf);
      proc_control_B.expl_temp_n.ConstraintTolerance = 0.02;
      proc_control_B.expl_temp_n.OptimalityTolerance = 2.2204460492503131E-14;
      proc_control_B.expl_temp_n.StepTolerance = 1.0E-6;
      proc_control_B.expl_temp_n.MaxIterations =
        proc_control_B.qpoptions_MaxIterations;
      for (proc_control_B.mLambda = 0; proc_control_B.mLambda < 7;
           proc_control_B.mLambda++) {
        proc_control_B.expl_temp_n.SolverName[proc_control_B.mLambda] =
          h[proc_control_B.mLambda];
      }
    }

    while ((!proc_control_B.Flags.stepAccepted) &&
           (!proc_control_B.Flags.failedLineSearch)) {
      if (proc_control_B.Flags.stepType != 3) {
        proc_updateWorkingSetForNewQP_l(TrialState->xstarsqp, WorkingSet,
          proc_control_B.mIneq_n, TrialState->mNonlinIneq,
          TrialState->cIneq.data, TrialState->cEq, proc_control_B.mLB, lb,
          proc_control_B.mUB, proc_control_B.mFixed);
      }

      proc_control_B.expl_temp_l = proc_control_B.expl_temp_n;
      proc_control_B.Flags.stepAccepted = proc_control_step_k
        (&proc_control_B.Flags.stepType, Hessian, lb, TrialState, MeritFunction,
         memspace, WorkingSet, QRManager, CholManager, QPObjective,
         &proc_control_B.expl_temp_l);
      if (proc_control_B.Flags.stepAccepted) {
        proc_control_B.mLambda = 0;
        while (proc_control_B.mLambda <= proc_control_B.nVar_tmp_tmp - 1) {
          TrialState->xstarsqp[proc_control_B.mLambda] +=
            TrialState->delta_x.data[proc_control_B.mLambda];
          proc_control_B.mLambda++;
        }

        proc_control_evalObjAndConstr
          (FcnEvaluator->objfun.workspace.runtimedata.x,
           FcnEvaluator->objfun.workspace.runtimedata.lastMV,
           FcnEvaluator->objfun.workspace.runtimedata.ref,
           FcnEvaluator->objfun.workspace.runtimedata.OutputWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVRateWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVScaledTarget,
           FcnEvaluator->nonlcon.workspace.runtimedata.x,
           FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
           FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
           FcnEvaluator->mCineq, TrialState->xstarsqp, TrialState->cIneq.data,
           TrialState->iNonIneq0, TrialState->cEq, &TrialState->sqpFval,
           &proc_control_B.mLambda);
        proc_control_B.Flags.fevalOK = (proc_control_B.mLambda == 1);
        TrialState->FunctionEvaluations++;
        proc_con_computeLinearResiduals(TrialState->xstarsqp,
          proc_control_B.nVar_tmp_tmp, TrialState->cIneq.data,
          &TrialState->cIneq.size, proc_control_B.mLinIneq_tmp_tmp,
          WorkingSet->Aineq.data, bineq_data, WorkingSet->ldA);
        MeritFunction->phiFullStep = proc_control_computeMeritFcn
          (MeritFunction->penaltyParam, TrialState->sqpFval,
           TrialState->cIneq.data, proc_control_B.mIneq_n, TrialState->cEq,
           proc_control_B.Flags.fevalOK);
      }

      if ((proc_control_B.Flags.stepType == 1) &&
          proc_control_B.Flags.stepAccepted && proc_control_B.Flags.fevalOK &&
          (MeritFunction->phi < MeritFunction->phiFullStep) &&
          (TrialState->sqpFval < TrialState->sqpFval_old)) {
        proc_control_B.Flags.stepType = 3;
        proc_control_B.Flags.stepAccepted = false;
      } else {
        proc_control_linesearch(&proc_control_B.Flags.fevalOK, bineq_data,
          WorkingSet->nVar, WorkingSet->ldA, WorkingSet->Aineq.data, TrialState,
          MeritFunction->penaltyParam, MeritFunction->phi,
          MeritFunction->phiPrimePlus, MeritFunction->phiFullStep,
          &FcnEvaluator->objfun.workspace.runtimedata,
          &FcnEvaluator->nonlcon.workspace.runtimedata, FcnEvaluator->mCineq,
          (proc_control_B.Flags.stepType == 3) &&
          proc_control_B.Flags.stepAccepted, &proc_control_B.optimRelativeFactor,
          &proc_control_B.mLambda);
        TrialState->steplength = proc_control_B.optimRelativeFactor;
        if (proc_control_B.mLambda > 0) {
          proc_control_B.Flags.stepAccepted = true;
        } else {
          proc_control_B.Flags.failedLineSearch = true;
        }
      }
    }

    if (proc_control_B.Flags.stepAccepted &&
        (!proc_control_B.Flags.failedLineSearch)) {
      proc_control_B.ix_c = 0;
      while (proc_control_B.ix_c <= proc_control_B.nVar_tmp_tmp - 1) {
        TrialState->xstarsqp[proc_control_B.ix_c] = TrialState->
          xstarsqp_old[proc_control_B.ix_c] + TrialState->
          delta_x.data[proc_control_B.ix_c];
        proc_control_B.ix_c++;
      }

      proc_control_B.ix_c = 0;
      while (proc_control_B.ix_c <= proc_control_B.mConstr_tmp) {
        TrialState->lambdasqp.data[proc_control_B.ix_c] +=
          (TrialState->lambda.data[proc_control_B.ix_c] -
           TrialState->lambdasqp.data[proc_control_B.ix_c]) *
          TrialState->steplength;
        proc_control_B.ix_c++;
      }

      proc_control_saveState(TrialState);
      proc_control_B.Flags.gradOK = true;
      evalObjAndConstrAndDerivatives
        (FcnEvaluator->objfun.workspace.runtimedata.x,
         FcnEvaluator->objfun.workspace.runtimedata.lastMV,
         FcnEvaluator->objfun.workspace.runtimedata.ref,
         FcnEvaluator->objfun.workspace.runtimedata.OutputWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVRateWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVScaledTarget,
         FcnEvaluator->nonlcon.workspace.runtimedata.x,
         FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
         FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
         FcnEvaluator->mCineq, TrialState->xstarsqp, TrialState->grad.data,
         TrialState->cIneq.data, TrialState->iNonIneq0, TrialState->cEq,
         WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->ldA,
         WorkingSet->Aeq.data, WorkingSet->ldA, &TrialState->sqpFval,
         &proc_control_B.mLambda);
      TrialState->FunctionEvaluations++;
      proc_control_B.Flags.fevalOK = (proc_control_B.mLambda == 1);
    } else {
      TrialState->sqpFval = TrialState->sqpFval_old;
      std::memcpy(&TrialState->xstarsqp[0], &TrialState->xstarsqp_old[0], 155U *
                  sizeof(real_T));
      proc_control_B.ix_c = TrialState->cIneq.size;
      proc_control_B.b_ix = TrialState->cIneq.size;
      if (proc_control_B.b_ix - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_n[0], &TrialState->cIneq.data[0],
                    proc_control_B.b_ix * sizeof(real_T));
      }

      proc_control_B.mLambda = 0;
      while (proc_control_B.mLambda <= TrialState->mIneq - 1) {
        proc_control_B.y_data_n[proc_control_B.mLambda] =
          TrialState->cIneq_old.data[proc_control_B.mLambda];
        proc_control_B.mLambda++;
      }

      if (proc_control_B.ix_c - 1 >= 0) {
        std::memcpy(&TrialState->cIneq.data[0], &proc_control_B.y_data_n[0],
                    proc_control_B.ix_c * sizeof(real_T));
      }

      std::memcpy(&TrialState->cEq[0], &TrialState->cEq_old[0], 130U * sizeof
                  (real_T));
    }

    proc_control_test_exit(&proc_control_B.Flags, memspace, MeritFunction,
      fscales_lineq_constraint_size, fscales_cineq_constraint_size, WorkingSet,
      TrialState, QRManager, lb);
    if ((!proc_control_B.Flags.done) && proc_control_B.Flags.stepAccepted) {
      proc_control_B.Flags.stepAccepted = false;
      proc_control_B.Flags.stepType = 1;
      proc_control_B.Flags.failedLineSearch = false;
      proc_control_B.b_ix = proc_control_B.mFixed + TrialState->iNonIneq0;
      proc_control_B.mLambda = WorkingSet->ldA;
      proc_control_B.ix_c = 0;
      while (proc_control_B.ix_c <= proc_control_B.nVar_tmp_tmp - 1) {
        TrialState->delta_gradLag.data[proc_control_B.ix_c] =
          TrialState->grad.data[proc_control_B.ix_c];
        proc_control_B.ix_c++;
      }

      if (proc_control_B.nVar_tmp_tmp >= 1) {
        proc_control_B.ix_c = 0;
        while (proc_control_B.ix_c <= proc_control_B.nVar_tmp_tmp - 1) {
          TrialState->delta_gradLag.data[proc_control_B.ix_c] +=
            -TrialState->grad_old.data[proc_control_B.ix_c];
          proc_control_B.ix_c++;
        }
      }

      proc_control_xgemv_mtmcjbiadz2i(proc_control_B.nVar_tmp_tmp, 130,
        WorkingSet->Aeq.data, 1, WorkingSet->ldA, TrialState->lambdasqp.data,
        proc_control_B.mFixed + 1, TrialState->delta_gradLag.data);
      proc_control_B.ix_c = proc_control_B.mFixed;
      proc_control_B.c_jv = WorkingSet->ldA * 129 + 1;
      proc_control_B.b_iy = 1;
      while (((proc_control_B.mLambda > 0) && (proc_control_B.b_iy <=
               proc_control_B.c_jv)) || ((proc_control_B.mLambda < 0) &&
              (proc_control_B.b_iy >= proc_control_B.c_jv))) {
        proc_control_B.iy = 0;
        proc_control_B.b_ia = (proc_control_B.b_iy + proc_control_B.nVar_tmp_tmp)
          - 1;
        proc_control_B.ia_e = proc_control_B.b_iy;
        while (proc_control_B.ia_e <= proc_control_B.b_ia) {
          TrialState->delta_gradLag.data[proc_control_B.iy] +=
            TrialState->JacCeqTrans_old.data[proc_control_B.ia_e - 1] *
            -TrialState->lambdasqp.data[proc_control_B.ix_c];
          proc_control_B.iy++;
          proc_control_B.ia_e++;
        }

        proc_control_B.ix_c++;
        proc_control_B.b_iy += proc_control_B.mLambda;
      }

      if (TrialState->mNonlinIneq > 0) {
        proc_control_xgemv_mtmcjbiadz2i(proc_control_B.nVar_tmp_tmp,
          TrialState->mNonlinIneq, WorkingSet->Aineq.data, WorkingSet->ldA *
          (TrialState->iNonIneq0 - 1) + 1, WorkingSet->ldA,
          TrialState->lambdasqp.data, proc_control_B.b_ix + 130,
          TrialState->delta_gradLag.data);
        proc_control_B.ix_c = (TrialState->mNonlinIneq - 1) * WorkingSet->ldA +
          1;
        proc_control_B.c_jv = 1;
        while (((proc_control_B.mLambda > 0) && (proc_control_B.c_jv <=
                 proc_control_B.ix_c)) || ((proc_control_B.mLambda < 0) &&
                (proc_control_B.c_jv >= proc_control_B.ix_c))) {
          proc_control_B.b_iy = 0;
          proc_control_B.iy = (proc_control_B.c_jv + proc_control_B.nVar_tmp_tmp)
            - 1;
          proc_control_B.b_ia = proc_control_B.c_jv;
          while (proc_control_B.b_ia <= proc_control_B.iy) {
            TrialState->delta_gradLag.data[proc_control_B.b_iy] +=
              TrialState->JacCineqTrans_old.data[proc_control_B.b_ia - 1] *
              -TrialState->lambdasqp.data[proc_control_B.b_ix + 129];
            proc_control_B.b_iy++;
            proc_control_B.b_ia++;
          }

          proc_control_B.b_ix++;
          proc_control_B.c_jv += proc_control_B.mLambda;
        }
      }

      proc_control_saveJacobian(TrialState, proc_control_B.nVar_tmp_tmp,
        proc_control_B.mIneq_n, WorkingSet->Aineq.data, TrialState->iNonIneq0,
        WorkingSet->Aeq.data, WorkingSet->ldA);
      proc_control_BFGSUpdate(proc_control_B.nVar_tmp_tmp, Hessian,
        TrialState->delta_x.data, TrialState->delta_gradLag.data,
        memspace->workspace_double.data);
      TrialState->sqpIterations++;
    }
  }
}

// Function for MATLAB Function: '<S214>/NLMPC'
void proc_control::proc_control_fmincon(const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *fun_workspace_runtimedata, real_T fun_workspace_userdata_Ts, const real_T
  fun_workspace_userdata_CurrentS[13], const real_T
  fun_workspace_userdata_LastMV[8], const real_T
  fun_workspace_userdata_Referenc[130], const real_T
  fun_workspace_userdata_MVTarget[80], real_T fun_workspace_userdata_Predicti,
  real_T fun_workspace_userdata_NumOfSta, real_T fun_workspace_userdata_NumOfOut,
  real_T fun_workspace_userdata_NumOfInp, const real_T
  fun_workspace_userdata_MVIndex[8], const real_T x0[155], const real_T
  Aineq_data[], const real_T bineq_data[], const int32_T *bineq_size, const
  real_T lb[155], const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *nonlcon_workspace_runtimedata, const s6FZHgorTEIlMmVIrDGGTjF_proc__T
  *nonlcon_workspace_userdata, real_T x[155], real_T *fval, real_T *exitflag,
  real_T *output_iterations, real_T *output_funcCount, char_T output_algorithm[3],
  real_T *output_constrviolation, real_T *output_stepsize, real_T
  *output_lssteplength, real_T *output_firstorderopt)
{
  proc_co_eML_blk_kernel_anonFcn2(nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, x0, proc_control_B.Cineq_data,
    proc_control_B.Cineq_size, proc_control_B.Ceq,
    proc_control_B.JacCineqTrans_data, proc_control_B.JacCineqTrans_size,
    proc_control_B.JacCeqTrans);
  proc_control_B.mNonlinIneq = proc_control_B.Cineq_size[0] *
    proc_control_B.Cineq_size[1];
  proc_control_B.mIneq = *bineq_size + proc_control_B.mNonlinIneq;
  proc_control_B.mConstrMax = (proc_control_B.mIneq + proc_control_B.mIneq) +
    701;
  if (proc_control_B.mIneq + 416 >= proc_control_B.mConstrMax) {
    proc_control_B.maxDims = proc_control_B.mIneq + 416;
  } else {
    proc_control_B.maxDims = proc_control_B.mConstrMax;
  }

  proc_control_factoryConstruct(proc_control_B.mIneq + 416,
    proc_control_B.mConstrMax, proc_control_B.mIneq, proc_control_B.mNonlinIneq,
    &proc_control_B.TrialState);
  std::memcpy(&proc_control_B.TrialState.xstarsqp[0], &x0[0], 155U * sizeof
              (real_T));
  proc_control_B.FcnEvaluator.objfun.workspace.runtimedata =
    *fun_workspace_runtimedata;
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.Ts =
    fun_workspace_userdata_Ts;
  std::memcpy
    (&proc_control_B.FcnEvaluator.objfun.workspace.userdata.CurrentStates[0],
     &fun_workspace_userdata_CurrentS[0], 13U * sizeof(real_T));
  std::memcpy(&proc_control_B.FcnEvaluator.objfun.workspace.userdata.LastMV[0],
              &fun_workspace_userdata_LastMV[0], sizeof(real_T) << 3U);
  std::memcpy(&proc_control_B.FcnEvaluator.objfun.workspace.userdata.References
              [0], &fun_workspace_userdata_Referenc[0], 130U * sizeof(real_T));
  std::memcpy(&proc_control_B.FcnEvaluator.objfun.workspace.userdata.MVTarget[0],
              &fun_workspace_userdata_MVTarget[0], 80U * sizeof(real_T));
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.PredictionHorizon =
    fun_workspace_userdata_Predicti;
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.NumOfStates =
    fun_workspace_userdata_NumOfSta;
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.NumOfOutputs =
    fun_workspace_userdata_NumOfOut;
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.NumOfInputs =
    fun_workspace_userdata_NumOfInp;
  std::memcpy(&proc_control_B.FcnEvaluator.objfun.workspace.userdata.MVIndex[0],
              &fun_workspace_userdata_MVIndex[0], sizeof(real_T) << 3U);
  proc_control_B.FcnEvaluator.nonlcon.workspace.runtimedata =
    *nonlcon_workspace_runtimedata;
  proc_control_B.FcnEvaluator.nonlcon.workspace.userdata =
    *nonlcon_workspace_userdata;
  proc_control_B.FcnEvaluator.mCineq = proc_control_B.mNonlinIneq;
  proc_control_B.FcnEvaluator.nVar = 155;
  proc_control_B.FcnEvaluator.mCeq = 130;
  proc_control_B.FcnEvaluator.NonFiniteSupport = true;
  proc_control_B.FcnEvaluator.SpecifyObjectiveGradient = true;
  proc_control_B.FcnEvaluator.SpecifyConstraintGradient = true;
  proc_control_B.FcnEvaluator.ScaleProblem = false;
  proc_cont_factoryConstruct_lnz4(proc_control_B.mIneq + 416,
    &proc_control_B.QPObjective.grad.size, &proc_control_B.QPObjective.Hx.size,
    &proc_control_B.QPObjective.hasLinear, &proc_control_B.QPObjective.nvar,
    &proc_control_B.QPObjective.maxVar, &proc_control_B.QPObjective.beta,
    &proc_control_B.QPObjective.rho, &proc_control_B.QPObjective.objtype,
    &proc_control_B.QPObjective.prev_objtype,
    &proc_control_B.QPObjective.prev_nvar,
    &proc_control_B.QPObjective.prev_hasLinear,
    &proc_control_B.QPObjective.gammaScalar);
  proc_control_B.QPObjective.nvar = 155;
  proc_control_B.QPObjective.hasLinear = true;
  proc_control_B.QPObjective.objtype = 3;
  proc_control_B.memspace.workspace_double.size[0] = proc_control_B.maxDims;
  proc_control_B.memspace.workspace_double.size[1] = proc_control_B.mIneq + 416;
  proc_control_B.memspace.workspace_int.size = proc_control_B.maxDims;
  proc_control_B.memspace.workspace_sort.size = proc_control_B.maxDims;
  proc_con_factoryConstruct_lnz42(proc_control_B.mIneq, proc_control_B.mIneq +
    416, proc_control_B.mConstrMax, &proc_control_B.WorkingSet);
  proc_control_B.i_ih = 0;
  for (proc_control_B.b_idx = 0; proc_control_B.b_idx < 155;
       proc_control_B.b_idx++) {
    proc_control_B.b_c_h = lb[proc_control_B.b_idx];
    if ((!std::isinf(proc_control_B.b_c_h)) && (!std::isnan(proc_control_B.b_c_h)))
    {
      proc_control_B.i_ih++;
      proc_control_B.WorkingSet.indexLB.data[proc_control_B.i_ih - 1] =
        proc_control_B.b_idx + 1;
    }
  }

  proc_control_loadProblem(&proc_control_B.WorkingSet, proc_control_B.mIneq,
    *bineq_size, Aineq_data, proc_control_B.i_ih, 0, 0,
    proc_control_B.mConstrMax);
  proc_control_B.mConstrMax = 0;
  while (proc_control_B.mConstrMax <= proc_control_B.i_ih - 1) {
    proc_control_B.TrialState.xstarsqp[proc_control_B.WorkingSet.indexLB.data[proc_control_B.mConstrMax]
      - 1] = std::fmax
      (proc_control_B.TrialState.xstarsqp[proc_control_B.WorkingSet.indexLB.data[
       proc_control_B.mConstrMax] - 1],
       lb[proc_control_B.WorkingSet.indexLB.data[proc_control_B.mConstrMax] - 1]);
    proc_control_B.mConstrMax++;
  }

  evalObjAndConstrAndDerivatives(fun_workspace_runtimedata->x,
    fun_workspace_runtimedata->lastMV, fun_workspace_runtimedata->ref,
    fun_workspace_runtimedata->OutputWeights,
    fun_workspace_runtimedata->MVWeights,
    fun_workspace_runtimedata->MVRateWeights,
    fun_workspace_runtimedata->MVScaledTarget, nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, proc_control_B.mNonlinIneq,
    proc_control_B.TrialState.xstarsqp, proc_control_B.TrialState.grad.data,
    proc_control_B.TrialState.cIneq.data, proc_control_B.TrialState.iNonIneq0,
    proc_control_B.TrialState.cEq, proc_control_B.WorkingSet.Aineq.data,
    proc_control_B.TrialState.iNonIneq0, proc_control_B.WorkingSet.ldA,
    proc_control_B.WorkingSet.Aeq.data, proc_control_B.WorkingSet.ldA,
    &proc_control_B.TrialState.sqpFval, &proc_control_B.mConstrMax);
  proc_control_B.TrialState.FunctionEvaluations = 1;
  proc_control_B.mConstrMax = proc_control_B.WorkingSet.ldA;
  if (*bineq_size > 0) {
    proc_control_B.y_size_idx_0 = proc_control_B.TrialState.cIneq.size;
    proc_control_B.loop_ub = proc_control_B.TrialState.cIneq.size;
    if (proc_control_B.loop_ub - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data_m[0],
                  &proc_control_B.TrialState.cIneq.data[0],
                  proc_control_B.loop_ub * sizeof(real_T));
    }

    proc_control_B.b_idx = 0;
    while (proc_control_B.b_idx <= *bineq_size - 1) {
      proc_control_B.y_data_m[proc_control_B.b_idx] =
        bineq_data[proc_control_B.b_idx];
      proc_control_B.b_idx++;
    }

    if (proc_control_B.y_size_idx_0 - 1 >= 0) {
      std::memcpy(&proc_control_B.TrialState.cIneq.data[0],
                  &proc_control_B.y_data_m[0], proc_control_B.y_size_idx_0 *
                  sizeof(real_T));
    }

    proc_control_B.b_idx = 0;
    while (proc_control_B.b_idx <= *bineq_size - 1) {
      proc_control_B.TrialState.cIneq.data[proc_control_B.b_idx] =
        -proc_control_B.TrialState.cIneq.data[proc_control_B.b_idx];
      proc_control_B.b_idx++;
    }

    proc_control_B.b_idx = 0;
    proc_control_B.loop_ub = (*bineq_size - 1) * proc_control_B.WorkingSet.ldA +
      1;
    proc_control_B.y_size_idx_0 = 1;
    while (((proc_control_B.mConstrMax > 0) && (proc_control_B.y_size_idx_0 <=
             proc_control_B.loop_ub)) || ((proc_control_B.mConstrMax < 0) &&
            (proc_control_B.y_size_idx_0 >= proc_control_B.loop_ub))) {
      proc_control_B.ix_i = 0;
      proc_control_B.b_c_h = 0.0;
      proc_control_B.ia = proc_control_B.y_size_idx_0;
      while (proc_control_B.ia <= proc_control_B.y_size_idx_0 + 154) {
        proc_control_B.b_c_h +=
          proc_control_B.WorkingSet.Aineq.data[proc_control_B.ia - 1] *
          proc_control_B.TrialState.xstarsqp[proc_control_B.ix_i];
        proc_control_B.ix_i++;
        proc_control_B.ia++;
      }

      proc_control_B.TrialState.cIneq.data[proc_control_B.b_idx] +=
        proc_control_B.b_c_h;
      proc_control_B.b_idx++;
      proc_control_B.y_size_idx_0 += proc_control_B.mConstrMax;
    }
  }

  proc_c_updateWorkingSetForNewQP(x0, &proc_control_B.WorkingSet,
    proc_control_B.mIneq, proc_control_B.TrialState.cIneq.data,
    proc_control_B.TrialState.cEq, proc_control_B.i_ih, lb, 0, 0);
  proc_control_initActiveSet(&proc_control_B.WorkingSet);
  proc_control_B.MeritFunction.initFval = proc_control_B.TrialState.sqpFval;
  proc_control_B.MeritFunction.penaltyParam = 1.0;
  proc_control_B.MeritFunction.threshold = 0.0001;
  proc_control_B.MeritFunction.nPenaltyDecreases = 0;
  proc_control_B.MeritFunction.linearizedConstrViol = 0.0;
  proc_control_B.b_c_h = 0.0;
  for (proc_control_B.i_ih = 0; proc_control_B.i_ih < 130; proc_control_B.i_ih++)
  {
    proc_control_B.b_c_h += std::abs
      (proc_control_B.TrialState.cEq[proc_control_B.i_ih]);
  }

  proc_control_B.MeritFunction.initConstrViolationEq = proc_control_B.b_c_h;
  proc_control_B.b_c_h = 0.0;
  proc_control_B.i_ih = 0;
  while (proc_control_B.i_ih <= proc_control_B.mIneq - 1) {
    if (proc_control_B.TrialState.cIneq.data[proc_control_B.i_ih] > 0.0) {
      proc_control_B.b_c_h +=
        proc_control_B.TrialState.cIneq.data[proc_control_B.i_ih];
    }

    proc_control_B.i_ih++;
  }

  proc_control_B.MeritFunction.initConstrViolationIneq = proc_control_B.b_c_h;
  proc_control_B.MeritFunction.phi = 0.0;
  proc_control_B.MeritFunction.phiPrimePlus = 0.0;
  proc_control_B.MeritFunction.phiFullStep = 0.0;
  proc_control_B.MeritFunction.feasRelativeFactor = 0.0;
  proc_control_B.MeritFunction.nlpPrimalFeasError = 0.0;
  proc_control_B.MeritFunction.nlpDualFeasError = 0.0;
  proc_control_B.MeritFunction.nlpComplError = 0.0;
  proc_control_B.MeritFunction.firstOrderOpt = 0.0;
  proc_control_B.MeritFunction.hasObjective = true;
  proc_contro_factoryConstruct_ln(proc_control_B.maxDims, proc_control_B.maxDims,
    &proc_control_B.QRManager.ldq, proc_control_B.QRManager.QR.size,
    proc_control_B.QRManager.Q.data, proc_control_B.QRManager.Q.size,
    proc_control_B.QRManager.jpvt.data, &proc_control_B.QRManager.jpvt.size,
    &proc_control_B.QRManager.mrows, &proc_control_B.QRManager.ncols,
    &proc_control_B.QRManager.tau.size, &proc_control_B.QRManager.minRowCol,
    &proc_control_B.QRManager.usedPivoting);
  proc_contr_factoryConstruct_lnz(proc_control_B.maxDims,
    proc_control_B.CholManager.FMat.size, &proc_control_B.CholManager.ldm,
    &proc_control_B.CholManager.ndims, &proc_control_B.CholManager.info,
    &proc_control_B.CholManager.scaleFactor,
    &proc_control_B.CholManager.ConvexCheck, &proc_control_B.CholManager.regTol_,
    &proc_control_B.CholManager.workspace_,
    &proc_control_B.CholManager.workspace2_);
  proc_control_B.tmp_size_g = *bineq_size;
  proc_control_B.tmp_size_m = proc_control_B.mNonlinIneq;
  proc_control_driver(bineq_data, lb, &proc_control_B.TrialState,
                      &proc_control_B.MeritFunction,
                      &proc_control_B.FcnEvaluator, &proc_control_B.memspace,
                      &proc_control_B.WorkingSet, &proc_control_B.QRManager,
                      &proc_control_B.CholManager, &proc_control_B.QPObjective,
                      &proc_control_B.tmp_size_g, &proc_control_B.tmp_size_m,
                      proc_control_B.unusedExpr);
  *fval = proc_control_B.TrialState.sqpFval;
  *exitflag = proc_control_B.TrialState.sqpExitFlag;
  *output_iterations = proc_control_B.TrialState.sqpIterations;
  *output_funcCount = proc_control_B.TrialState.FunctionEvaluations;
  output_algorithm[0] = 's';
  output_algorithm[1] = 'q';
  output_algorithm[2] = 'p';
  *output_constrviolation = proc_control_B.MeritFunction.nlpPrimalFeasError;
  proc_control_B.b_c_h = 0.0;
  proc_control_B.scale_c = 3.3121686421112381E-170;
  for (proc_control_B.mNonlinIneq = 0; proc_control_B.mNonlinIneq < 155;
       proc_control_B.mNonlinIneq++) {
    x[proc_control_B.mNonlinIneq] =
      proc_control_B.TrialState.xstarsqp[proc_control_B.mNonlinIneq];
    proc_control_B.absxk_a = std::abs
      (proc_control_B.TrialState.delta_x.data[proc_control_B.mNonlinIneq]);
    if (proc_control_B.absxk_a > proc_control_B.scale_c) {
      proc_control_B.t_l = proc_control_B.scale_c / proc_control_B.absxk_a;
      proc_control_B.b_c_h = proc_control_B.b_c_h * proc_control_B.t_l *
        proc_control_B.t_l + 1.0;
      proc_control_B.scale_c = proc_control_B.absxk_a;
    } else {
      proc_control_B.t_l = proc_control_B.absxk_a / proc_control_B.scale_c;
      proc_control_B.b_c_h += proc_control_B.t_l * proc_control_B.t_l;
    }
  }

  *output_stepsize = proc_control_B.scale_c * std::sqrt(proc_control_B.b_c_h);
  *output_lssteplength = proc_control_B.TrialState.steplength;
  *output_firstorderopt = proc_control_B.MeritFunction.firstOrderOpt;
}

real_T proc_control::proc_control_erf(real_T x)
{
  real_T y;
  int32_T b_e;

  // ========================== COPYRIGHT NOTICE ============================
  //  The algorithms for calculating ERF(X) and ERFC(X) are derived
  //  from FDLIBM, which has the following notice:
  //
  //  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
  //
  //  Developed at SunSoft, a Sun Microsystems, Inc. business.
  //  Permission to use, copy, modify, and distribute this
  //  software is freely granted, provided that this notice
  //  is preserved.
  // =============================    END    ================================
  proc_control_B.absx = std::abs(x);
  if (std::isnan(x)) {
    y = x;
  } else if (std::isinf(x)) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else if (proc_control_B.absx < 0.84375) {
    if (proc_control_B.absx < 3.7252902984619141E-9) {
      if (proc_control_B.absx < 2.8480945388892178E-306) {
        y = (8.0 * x + 1.0270333367641007 * x) * 0.125;
      } else {
        y = 0.12837916709551259 * x + x;
      }
    } else {
      proc_control_B.z_a = x * x;
      y = ((((proc_control_B.z_a * -2.3763016656650163E-5 +
              -0.0057702702964894416) * proc_control_B.z_a +
             -0.02848174957559851) * proc_control_B.z_a + -0.3250421072470015) *
           proc_control_B.z_a + 0.12837916709551256) / (((((proc_control_B.z_a *
        -3.9602282787753681E-6 + 0.00013249473800432164) * proc_control_B.z_a +
        0.0050813062818757656) * proc_control_B.z_a + 0.0650222499887673) *
        proc_control_B.z_a + 0.39791722395915535) * proc_control_B.z_a + 1.0) *
        x + x;
    }
  } else if (proc_control_B.absx < 1.25) {
    if (x >= 0.0) {
      y = (((((((proc_control_B.absx - 1.0) * -0.0021663755948687908 +
                0.035478304325618236) * (proc_control_B.absx - 1.0) +
               -0.11089469428239668) * (proc_control_B.absx - 1.0) +
              0.31834661990116175) * (proc_control_B.absx - 1.0) +
             -0.37220787603570132) * (proc_control_B.absx - 1.0) +
            0.41485611868374833) * (proc_control_B.absx - 1.0) +
           -0.0023621185607526594) / (((((((proc_control_B.absx - 1.0) *
        0.011984499846799107 + 0.013637083912029051) * (proc_control_B.absx -
        1.0) + 0.12617121980876164) * (proc_control_B.absx - 1.0) +
        0.071828654414196266) * (proc_control_B.absx - 1.0) + 0.540397917702171)
        * (proc_control_B.absx - 1.0) + 0.10642088040084423) *
        (proc_control_B.absx - 1.0) + 1.0) + 0.84506291151046753;
    } else {
      y = -0.84506291151046753 - (((((((proc_control_B.absx - 1.0) *
        -0.0021663755948687908 + 0.035478304325618236) * (proc_control_B.absx -
        1.0) + -0.11089469428239668) * (proc_control_B.absx - 1.0) +
        0.31834661990116175) * (proc_control_B.absx - 1.0) +
        -0.37220787603570132) * (proc_control_B.absx - 1.0) +
        0.41485611868374833) * (proc_control_B.absx - 1.0) +
        -0.0023621185607526594) / (((((((proc_control_B.absx - 1.0) *
        0.011984499846799107 + 0.013637083912029051) * (proc_control_B.absx -
        1.0) + 0.12617121980876164) * (proc_control_B.absx - 1.0) +
        0.071828654414196266) * (proc_control_B.absx - 1.0) + 0.540397917702171)
        * (proc_control_B.absx - 1.0) + 0.10642088040084423) *
        (proc_control_B.absx - 1.0) + 1.0);
    }
  } else if (proc_control_B.absx > 6.0) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else {
    proc_control_B.s_f = 1.0 / (proc_control_B.absx * proc_control_B.absx);
    if (proc_control_B.absx < 2.8571434020996094) {
      proc_control_B.R_gr = ((((((proc_control_B.s_f * -9.8143293441691455 +
        -81.2874355063066) * proc_control_B.s_f + -184.60509290671104) *
        proc_control_B.s_f + -162.39666946257347) * proc_control_B.s_f +
        -62.375332450326006) * proc_control_B.s_f + -10.558626225323291) *
        proc_control_B.s_f + -0.69385857270718176) * proc_control_B.s_f +
        -0.0098649440348471482;
      proc_control_B.s_f = (((((((proc_control_B.s_f * -0.0604244152148581 +
        6.5702497703192817) * proc_control_B.s_f + 108.63500554177944) *
        proc_control_B.s_f + 429.00814002756783) * proc_control_B.s_f +
        645.38727173326788) * proc_control_B.s_f + 434.56587747522923) *
        proc_control_B.s_f + 137.65775414351904) * proc_control_B.s_f +
                            19.651271667439257) * proc_control_B.s_f + 1.0;
    } else {
      proc_control_B.R_gr = (((((proc_control_B.s_f * -483.5191916086514 +
        -1025.0951316110772) * proc_control_B.s_f + -637.56644336838963) *
        proc_control_B.s_f + -160.63638485582192) * proc_control_B.s_f +
        -17.757954917754752) * proc_control_B.s_f + -0.799283237680523) *
        proc_control_B.s_f + -0.0098649429247001;
      proc_control_B.s_f = ((((((proc_control_B.s_f * -22.440952446585818 +
        474.52854120695537) * proc_control_B.s_f + 2553.0504064331644) *
        proc_control_B.s_f + 3199.8582195085955) * proc_control_B.s_f +
        1536.729586084437) * proc_control_B.s_f + 325.79251299657392) *
                            proc_control_B.s_f + 30.338060743482458) *
        proc_control_B.s_f + 1.0;
    }

    if (!std::isnan(proc_control_B.absx)) {
      proc_control_B.z_a = frexp(proc_control_B.absx, &b_e);
    } else {
      proc_control_B.z_a = proc_control_B.absx;
      b_e = 0;
    }

    proc_control_B.z_a = std::floor(proc_control_B.z_a * 2.097152E+6) /
      2.097152E+6 * proc_control_rt_powd_snf(2.0, static_cast<real_T>(b_e));
    if (x < 0.0) {
      y = std::exp((proc_control_B.z_a - proc_control_B.absx) *
                   (proc_control_B.z_a + proc_control_B.absx) +
                   proc_control_B.R_gr / proc_control_B.s_f) * std::exp
        (-proc_control_B.z_a * proc_control_B.z_a - 0.5625) /
        proc_control_B.absx - 1.0;
    } else {
      y = 1.0 - std::exp((proc_control_B.z_a - proc_control_B.absx) *
                         (proc_control_B.z_a + proc_control_B.absx) +
                         proc_control_B.R_gr / proc_control_B.s_f) * std::exp
        (-proc_control_B.z_a * proc_control_B.z_a - 0.5625) /
        proc_control_B.absx;
    }
  }

  return y;
}

void proc_control::proc_co_AUV8QuatPerturbedSimFcn(const real_T in1[13], const
  real_T in2[6], const real_T in3[8], real_T out1[13])
{
  // AUVQUATPERTURBEDSIMFCN
  //     OUT1 = AUVQUATPERTURBEDSIMFCN(IN1,IN2,IN3)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     19-Nov-2021 10:15:43
  proc_control_B.t8_g = in1[4] * in1[6];
  proc_control_B.t9_f = in1[5] * in1[6];
  proc_control_B.t10_c = in1[3] * in1[4];
  proc_control_B.t11_p = in1[3] * in1[5];
  proc_control_B.t12_a = in1[4] * in1[4];
  proc_control_B.t13_n = in1[5] * in1[5];
  proc_control_B.t15_h = in1[4] * in1[5] * 2.0;
  proc_control_B.t20_m = in1[3] * in1[6] * 2.0;
  proc_control_B.t33_f = in1[11] / 500.0;
  proc_control_B.t37_b = in1[10] / 1000.0;
  proc_control_B.t39_e = in1[12] * 0.018;
  proc_control_B.t63_n = in1[7] * 32.4648;
  proc_control_B.t67 = in1[8] * 43.6156;
  proc_control_B.t68_p4 = in1[9] * 46.7695;
  proc_control_B.t16_i = proc_control_B.t8_g * 2.0;
  proc_control_B.t17_j = proc_control_B.t9_f * 2.0;
  proc_control_B.t18_l = proc_control_B.t10_c * 2.0;
  proc_control_B.t19_c = proc_control_B.t11_p * 2.0;
  proc_control_B.t21_g = proc_control_B.t12_a * 2.0;
  proc_control_B.t22_c = proc_control_B.t13_n * 2.0;
  proc_control_B.t23_l = in1[6] * in1[6] * 2.0;
  proc_control_B.t71 = proc_control_B.t33_f + proc_control_B.t39_e;
  proc_control_B.t33_f += proc_control_B.t37_b;
  proc_control_B.t37_b += proc_control_B.t39_e;
  proc_control_B.t39_e = in1[11] * 0.558 + proc_control_B.t63_n;
  proc_control_B.t80 = in1[10] * 0.062 + proc_control_B.t68_p4;
  proc_control_B.t81 = in1[12] * 0.031 + proc_control_B.t67;
  proc_control_B.t84 = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 0.592;
  proc_control_B.t45_e = proc_control_B.t17_j + proc_control_B.t18_l;
  proc_control_B.t55_d = proc_control_erf(in1[2] * 13.333333333333334 - 2.0);
  proc_control_B.t65_m = (proc_control_B.t21_g + proc_control_B.t22_c) - 1.0;
  proc_control_B.t63_n = in1[12] * 0.062 + -proc_control_B.t63_n;
  proc_control_B.t67 = in1[10] * 0.558 + -proc_control_B.t67;
  proc_control_B.t68_p4 = in1[11] * 0.031 + -proc_control_B.t68_p4;
  proc_control_B.t86 = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_B.t87 = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  proc_control_B.t56_f = proc_control_B.t16_i + -proc_control_B.t19_c;
  proc_control_B.t85 = proc_control_B.t55_d * 0.01575 + 0.01575;
  proc_control_B.t55_d = proc_control_B.t55_d * 15.7185 - 15.2815;
  out1[0] = (((proc_control_B.t22_c + proc_control_B.t23_l) - 1.0) * -in1[7] +
             (proc_control_B.t16_i + proc_control_B.t19_c) * in1[9]) +
    (proc_control_B.t15_h - proc_control_B.t20_m) * in1[8];
  out1[1] = ((proc_control_B.t15_h + proc_control_B.t20_m) * in1[7] -
             ((proc_control_B.t21_g + proc_control_B.t23_l) - 1.0) * in1[8]) +
    (proc_control_B.t17_j - proc_control_B.t18_l) * in1[9];
  out1[2] = (proc_control_B.t56_f * in1[7] + proc_control_B.t45_e * in1[8]) -
    proc_control_B.t65_m * in1[9];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_B.t15_h = in1[10] * proc_control_B.t71;
  proc_control_B.t20_m = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) * in1
    [10];
  proc_control_B.t16_i = in1[10] * proc_control_B.t80;
  proc_control_B.t17_j = in1[10] * proc_control_B.t67;
  proc_control_B.t18_l = in1[10] * proc_control_B.t86;
  proc_control_B.t19_c = in1[10] * proc_control_B.t87;
  proc_control_B.t21_g = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) * in1
    [11];
  proc_control_B.t22_c = in1[11] * proc_control_B.t37_b;
  proc_control_B.t23_l = in1[11] * proc_control_B.t39_e;
  proc_control_B.out1_tmp_nl = in1[11] * proc_control_B.t68_p4;
  proc_control_B.out1_tmp_o = in1[11] * proc_control_B.t84;
  proc_control_B.t86 *= in1[11];
  proc_control_B.out1_tmp_e = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  proc_control_B.out1_tmp_m = in1[12] * proc_control_B.t33_f;
  proc_control_B.out1_tmp_ch = in1[12] * proc_control_B.t63_n;
  proc_control_B.out1_tmp_g = in1[12] * proc_control_B.t81;
  proc_control_B.t84 *= in1[12];
  proc_control_B.t87 *= in1[12];
  proc_control_B.out1_tmp_bn = (proc_control_B.t9_f + proc_control_B.t10_c) *
    proc_control_B.t55_d;
  proc_control_B.t45_e *= proc_control_B.t85;
  proc_control_B.out1_tmp_p = (proc_control_B.t8_g + -proc_control_B.t11_p) *
    proc_control_B.t55_d;
  proc_control_B.t56_f *= proc_control_B.t85;
  proc_control_B.t55_d *= proc_control_B.t65_m;
  proc_control_B.t65_m = (std::abs(in1[7]) * 1.17 + 15.0) * in1[7];
  proc_control_B.t71 *= in1[7];
  proc_control_B.t81 *= in1[7];
  proc_control_B.t68_p4 *= in1[7];
  proc_control_B.t85 = (std::abs(in1[8]) * 0.82 + 20.0) * in1[8];
  proc_control_B.t37_b *= in1[8];
  proc_control_B.t63_n *= in1[8];
  proc_control_B.t80 *= in1[8];
  proc_control_B.out1_tmp_p2 = (std::abs(in1[9]) * 0.756 + 23.333333333333332) *
    in1[9];
  proc_control_B.t33_f *= in1[9];
  proc_control_B.t39_e *= in1[9];
  proc_control_B.t67 *= in1[9];
  out1[7] = (((((((((((((((((((((in2[0] * 0.030976977065388711 + in2[1] *
    9.4803055144857715E-7) - in2[2] * 6.8231348244175949E-6) + in2[3] *
    0.0001303522588356414) + (in2[4] * -0.010033314971702871 + in2[5] *
    0.0010125044874363649)) + (in3[0] * -0.00033076834054020519 + in3[1] *
    1.8595780444550231E-21)) + in3[2] * 0.00033506403327449372) + (in3[3] *
    0.00033363213569639753 - in3[4] * 0.001819638864719295)) + (in3[5] *
    -0.0018124211550371481 + in3[6] * 0.0018538731733468781)) + (in3[7] *
    0.001778186846409557 - proc_control_B.t8_g * 0.11107598193630119)) +
                        ((proc_control_B.t9_f * -0.00081126583629370218 -
    proc_control_B.t10_c * 0.00081126583629370218) + proc_control_B.t11_p *
    0.11107598193630119)) + ((proc_control_B.t12_a * -0.0062610285338271466 -
    proc_control_B.t13_n * 0.0062610285338271466) + in3[0] * 1.4142135623730951 *
    0.015171119710606879)) + ((in3[1] * 1.4142135623730951 *
    0.014928824155507611 + in3[2] * 1.4142135623730951 * 0.015171119710606879) +
    in3[3] * 1.4142135623730951 * 0.01516372519659284)) +
                     (((proc_control_B.t15_h * -0.96028628902704993 -
                        proc_control_B.t20_m * 0.0001303522588356414) +
                       proc_control_B.t16_i * 9.4803055144857715E-7) -
                      proc_control_B.t17_j * 6.8231348244175949E-6)) +
                    (((proc_control_B.t18_l * -0.010033314971702871 -
                       proc_control_B.t19_c * 0.0010125044874363649) +
                      proc_control_B.t21_g * 0.010033314971702871) -
                     proc_control_B.t22_c * 2.9388947094905889E-5)) +
                   (((proc_control_B.t23_l * -6.8231348244175949E-6 +
                      proc_control_B.out1_tmp_nl * 0.030976977065388711) +
                     proc_control_B.out1_tmp_o * 0.0010125044874363649) -
                    proc_control_B.t86 * 0.0001303522588356414)) +
                  (((proc_control_B.out1_tmp_e * -0.0010125044874363649 +
                     proc_control_B.out1_tmp_m * 0.0002115171795569455) +
                    proc_control_B.out1_tmp_ch * 9.4803055144857715E-7) +
                   proc_control_B.out1_tmp_g * 0.030976977065388711)) +
                 ((proc_control_B.t84 * 0.010033314971702871 +
                   proc_control_B.t87 * 0.0001303522588356414) -
                  proc_control_B.out1_tmp_bn * 1.860035941942108E-5)) +
                ((proc_control_B.t45_e * -0.0076571888871557192 -
                  proc_control_B.out1_tmp_p * 0.60776829002292643) -
                 proc_control_B.t56_f * 0.589379797395962)) +
               ((proc_control_B.t55_d * -6.6934952627536608E-5 -
                 proc_control_B.t65_m * 0.030976977065388711) +
                proc_control_B.t71 * 0.0040409200239048832)) +
              (((proc_control_B.t81 * -0.0010125044874363649 +
                 proc_control_B.t68_p4 * 0.010033314971702871) -
                proc_control_B.t85 * 9.4803055144857715E-7) -
               proc_control_B.t37_b * 0.311032764122789)) +
             (((proc_control_B.t63_n * -0.0010125044874363649 -
                proc_control_B.t80 * 0.0001303522588356414) +
               proc_control_B.out1_tmp_p2 * 6.8231348244175949E-6) +
              proc_control_B.t33_f * 0.031387639110527318)) +
    ((proc_control_B.t39_e * 0.010033314971702871 - proc_control_B.t67 *
      0.0001303522588356414) + 0.0031305142669135729);
  out1[8] = (((((((((((((((((((((in2[0] * 9.4803055144857715E-7 + in2[1] *
    0.02320783323245932) - in2[2] * 2.9076309096921531E-5) + in2[3] *
    0.021882274381510681) + (in2[4] * -0.0001026911824132076 - in2[5] *
    0.00042780737967584029)) + (in3[0] * 0.00013975754063522079 + in3[1] *
    7.9244610288113972E-21)) + in3[2] * -0.00014157257363048341) + (in3[3] *
    -0.0001409675626320625 - in3[4] * 0.0034249251816346319)) + (in3[5] *
    0.003387750973601051 + in3[6] * 0.0035708122797193441)) + (in3[7] *
    -0.0035336380716857632 - proc_control_B.t8_g * 0.00060385694847962161)) +
                        ((proc_control_B.t9_f * -0.23982646564227009 -
    proc_control_B.t10_c * 0.23982646564227009) + proc_control_B.t11_p *
    0.00060385694847962161)) + ((proc_control_B.t12_a * -0.026680932679612211 -
    proc_control_B.t13_n * 0.026680932679612211) - in3[0] * 1.4142135623730951 *
    0.01090649593858282)) + ((in3[1] * 1.4142135623730951 * 0.011000123045544621
    - in3[2] * 1.4142135623730951 * 0.01090649593858282) + in3[3] *
    1.4142135623730951 * 0.01090087173345982)) + (((proc_control_B.t15_h *
    -2.9388947094905889E-5 - proc_control_B.t20_m * 0.021882274381510681) +
    proc_control_B.t16_i * 0.02320783323245932) - proc_control_B.t17_j *
    2.9076309096921531E-5)) + (((proc_control_B.t18_l * -0.0001026911824132076 +
    proc_control_B.t19_c * 0.00042780737967584029) + proc_control_B.t21_g *
    0.0001026911824132076) - proc_control_B.t22_c * 0.71944283020623911)) +
                   (((proc_control_B.t23_l * -2.9076309096921531E-5 +
                      proc_control_B.out1_tmp_nl * 9.4803055144857715E-7) -
                     proc_control_B.out1_tmp_o * 0.00042780737967584029) -
                    proc_control_B.t86 * 0.021882274381510681)) +
                  (((proc_control_B.out1_tmp_e * 0.00042780737967584029 +
                     proc_control_B.out1_tmp_m * 0.00090136558200456737) +
                    proc_control_B.out1_tmp_ch * 0.02320783323245932) +
                   proc_control_B.out1_tmp_g * 9.4803055144857715E-7)) +
                 ((proc_control_B.t84 * 0.0001026911824132076 +
                   proc_control_B.t87 * 0.021882274381510681) -
                  proc_control_B.out1_tmp_bn * 0.45533768802085189)) +
                ((proc_control_B.t45_e * -1.2854146887555269 -
                  proc_control_B.out1_tmp_p * 1.860035941942108E-5) -
                 proc_control_B.t56_f * 0.0060323141908477191)) +
               (((proc_control_B.t55_d * -0.00028523859224080018 -
                  proc_control_B.t65_m * 9.4803055144857715E-7) +
                 proc_control_B.t71 * 0.678350505826831) + proc_control_B.t81 *
                0.00042780737967584029)) + (((proc_control_B.t68_p4 *
    0.0001026911824132076 - proc_control_B.t85 * 0.02320783323245932) -
    proc_control_B.t37_b * 0.0031834266548094372) + proc_control_B.t63_n *
    0.00042780737967584029)) + (((proc_control_B.t80 * -0.021882274381510681 +
    proc_control_B.out1_tmp_p2 * 2.9076309096921531E-5) - proc_control_B.t33_f *
    0.013262028769951049) + proc_control_B.t39_e * 0.0001026911824132076)) +
    (proc_control_B.t67 * -0.021882274381510681 + 0.0133404663398061);
  out1[9] = ((((((((((((((((((((((in2[0] * -6.8231348244175949E-6 - in2[1] *
    2.9076309096921531E-5) + in2[2] * 0.021384731826702759) - in2[3] *
    0.002272431716587712) + (in2[4] * 0.00039756137245743289 + in2[5] *
    5.2828771531483014E-6)) + in3[0] * -1.725827915740819E-6) + in3[1] *
    -5.8281975682474322E-18) + in3[2] * 1.748241265284163E-6) + (in3[3] *
    1.740770148765829E-6 - in3[4] * 0.02095639900015615)) + (in3[5] *
    0.021100316216985739 - in3[6] * 0.021822949502860629)) + (in3[7] *
    0.02167903228603104 + proc_control_B.t8_g * 0.004346059700124901)) +
                        ((proc_control_B.t9_f * 0.024881704687475689 +
    proc_control_B.t10_c * 0.024881704687475689) - proc_control_B.t11_p *
    0.004346059700124901)) + ((proc_control_B.t12_a * 0.0030060816152820162 +
    proc_control_B.t13_n * 0.0030060816152820162) - in3[0] * 1.4142135623730951 *
    4.8869263875916949E-5)) + ((in3[1] * 1.4142135623730951 *
    6.6264429389244648E-5 - in3[2] * 1.4142135623730951 * 4.8869263875916949E-5)
    + in3[3] * 1.4142135623730951 * 6.7490056888775055E-5)) +
                     (((proc_control_B.t15_h * 0.0002115171795569455 +
                        proc_control_B.t20_m * 0.002272431716587712) -
                       proc_control_B.t16_i * 2.9076309096921531E-5) +
                      proc_control_B.t17_j * 0.021384731826702759)) +
                    (((proc_control_B.t18_l * 0.00039756137245743289 -
                       proc_control_B.t19_c * 5.2828771531483014E-6) -
                      proc_control_B.t21_g * 0.00039756137245743289) +
                     proc_control_B.t22_c * 0.00090136558200456737)) +
                   (((proc_control_B.t23_l * 0.021384731826702759 -
                      proc_control_B.out1_tmp_nl * 6.8231348244175949E-6) +
                     proc_control_B.out1_tmp_o * 5.2828771531483014E-6) +
                    proc_control_B.t86 * 0.002272431716587712)) +
                  (((proc_control_B.out1_tmp_e * -5.2828771531483014E-6 -
                     proc_control_B.out1_tmp_m * 0.66292668662778553) -
                    proc_control_B.out1_tmp_ch * 2.9076309096921531E-5) -
                   proc_control_B.out1_tmp_g * 6.8231348244175949E-6)) +
                 ((proc_control_B.t84 * -0.00039756137245743289 -
                   proc_control_B.t87 * 0.002272431716587712) +
                  proc_control_B.out1_tmp_bn * 0.00057047718448160036)) +
                ((proc_control_B.t45_e * 0.133487820176676 +
                  proc_control_B.out1_tmp_p * 0.00013386990525507319) +
                 proc_control_B.t56_f * 0.023353661458078809)) +
               (((proc_control_B.t55_d * 0.2097842192199541 +
                  proc_control_B.t65_m * 6.8231348244175949E-6) -
                 proc_control_B.t71 * 0.070445383214219059) - proc_control_B.t81
                * 5.2828771531483014E-6)) + (((proc_control_B.t68_p4 *
    -0.00039756137245743289 + proc_control_B.t85 * 2.9076309096921531E-5) +
    proc_control_B.t37_b * 0.01232440254618042) - proc_control_B.t63_n *
    5.2828771531483014E-6)) + (((proc_control_B.t80 * 0.002272431716587712 -
    proc_control_B.out1_tmp_p2 * 0.021384731826702759) + proc_control_B.t33_f *
    0.00016376919174759729) - proc_control_B.t39_e * 0.00039756137245743289)) +
    (proc_control_B.t67 * 0.002272431716587712 - 0.0015030408076410081);
  out1[10] = ((((((((((((((((((((((((in2[0] * 0.0001303522588356414 + in2[1] *
    0.021882274381510681) - in2[2] * 0.002272431716587712) + in2[3] *
    1.71018810547529) + (in2[4] * -0.0080268590155159435 - in2[5] *
    0.0039859244840414)) + in3[0] * 0.0013021350951669831) + in3[1] *
    6.1932883292401409E-19) + in3[2] * -0.00131904594055876) + (in3[3] *
    -0.0013134089920948341 - in3[4] * 0.26767193546582568)) + (in3[5] *
    0.26476621250220889 + in3[6] * 0.2790736050389333)) + (in3[7] *
    -0.27616788207531651 - proc_control_B.t8_g * 0.0830290934481406)) +
    ((proc_control_B.t9_f * -18.72549529020894 - proc_control_B.t10_c *
      18.72549529020894) + proc_control_B.t11_p * 0.0830290934481406)) +
    ((proc_control_B.t12_a * -2.0852233152147792 - proc_control_B.t13_n *
      2.0852233152147792) + in3[0] * 1.4142135623730951 * 0.043593198825375247))
    + ((in3[1] * 1.4142135623730951 * -0.043051831063235027 + in3[2] *
        1.4142135623730951 * 0.043593198825375247) - in3[3] * 1.4142135623730951
       * 0.043976565543532631)) + ((proc_control_B.t15_h *
    -0.0040409200239048832 - proc_control_B.t20_m * 1.71018810547529) +
    proc_control_B.t16_i * 0.021882274381510681)) + ((proc_control_B.t17_j *
    -0.002272431716587712 - proc_control_B.t18_l * 0.0080268590155159435) +
    proc_control_B.t19_c * 0.0039859244840414)) + ((proc_control_B.t21_g *
    0.0080268590155159435 - proc_control_B.t22_c * 0.678350505826831) -
    proc_control_B.t23_l * 0.002272431716587712)) + ((proc_control_B.out1_tmp_nl
    * 0.0001303522588356414 - proc_control_B.out1_tmp_o * 0.0039859244840414) -
    proc_control_B.t86 * 1.71018810547529)) + (((proc_control_B.out1_tmp_e *
    0.0039859244840414 + proc_control_B.out1_tmp_m * 0.070445383214219059) +
    proc_control_B.out1_tmp_ch * 0.021882274381510681) +
    proc_control_B.out1_tmp_g * 0.0001303522588356414)) + ((proc_control_B.t84 *
    0.0080268590155159435 + proc_control_B.t87 * 1.71018810547529) -
    proc_control_B.out1_tmp_bn * 0.42933022336523952)) + ((proc_control_B.t45_e *
    -100.460348544499 - proc_control_B.out1_tmp_p * 0.0025575113183552841) -
    proc_control_B.t56_f * 0.47151599980996189)) + ((proc_control_B.t55_d *
    -0.022292555139725449 - proc_control_B.t65_m * 0.0001303522588356414) +
    proc_control_B.t71 * 53.015831269733987)) + ((proc_control_B.t81 *
    0.0039859244840414 + proc_control_B.t68_p4 * 0.0080268590155159435) -
    proc_control_B.t85 * 0.021882274381510681)) + ((proc_control_B.t37_b *
    -0.2488326294809943 + proc_control_B.t63_n * 0.0039859244840414) -
    proc_control_B.t80 * 1.71018810547529)) + ((proc_control_B.out1_tmp_p2 *
    0.002272431716587712 - proc_control_B.t33_f * 0.1235636590052834) +
    proc_control_B.t39_e * 0.0080268590155159435)) + (proc_control_B.t67 *
    -1.71018810547529 + 1.0426116576073889);
  out1[11] = ((((((((((((((((((((((in2[0] * -0.010033314971702871 - in2[1] *
    0.0001026911824132076) + in2[2] * 0.00039756137245743289) - in2[3] *
    0.0080268590155159435) + (in2[4] * 0.58374455968341665 - in2[5] *
    1.606290206365557E-6)) + (in3[0] * 5.24748238233168E-7 - in3[1] *
    1.083514276897426E-19)) + in3[2] * -5.3156315041823265E-7) + (in3[3] *
    -5.2929151302328333E-7 + in3[4] * 0.10593667623599359)) + (in3[5] *
    0.10537885436940329 - in3[6] * 0.10793139553633729)) + (in3[7] *
    -0.1033841350690595 + proc_control_B.t8_g * 6.3908140435873166)) +
    ((proc_control_B.t9_f * 0.087876754449678615 + proc_control_B.t10_c *
      0.087876754449678615) - proc_control_B.t11_p * 6.3908140435873166)) +
    ((proc_control_B.t12_a * 0.36480930847148191 + proc_control_B.t13_n *
      0.36480930847148191) + in3[0] * 1.4142135623730951 * 0.013457654526727991))
                        + ((in3[1] * 1.4142135623730951 * 0.013869054980635681 +
    in3[2] * 1.4142135623730951 * 0.013457654526727991) + in3[3] *
    1.4142135623730951 * 0.01386868232130781)) + (((proc_control_B.t15_h *
    0.311032764122789 + proc_control_B.t20_m * 0.0080268590155159435) -
    proc_control_B.t16_i * 0.0001026911824132076) + proc_control_B.t17_j *
    0.00039756137245743289)) + ((proc_control_B.t18_l * 0.58374455968341665 +
    proc_control_B.t19_c * 1.606290206365557E-6) - proc_control_B.t21_g *
    0.58374455968341665)) + (((proc_control_B.t22_c * 0.0031834266548094372 +
    proc_control_B.t23_l * 0.00039756137245743289) - proc_control_B.out1_tmp_nl *
    0.010033314971702871) - proc_control_B.out1_tmp_o * 1.606290206365557E-6)) +
                    (((proc_control_B.t86 * 0.0080268590155159435 +
                       proc_control_B.out1_tmp_e * 1.606290206365557E-6) -
                      proc_control_B.out1_tmp_m * 0.01232440254618042) -
                     proc_control_B.out1_tmp_ch * 0.0001026911824132076)) +
                   ((proc_control_B.out1_tmp_g * -0.010033314971702871 -
                     proc_control_B.t84 * 0.58374455968341665) -
                    proc_control_B.t87 * 0.0080268590155159435)) +
                  ((proc_control_B.out1_tmp_bn * 0.002014800998947134 +
                    proc_control_B.t45_e * 0.47151599980996189) +
                   proc_control_B.out1_tmp_p * 0.19685363974481029)) +
                 ((proc_control_B.t56_f * 34.290486373399979 +
                   proc_control_B.t55_d * 0.003900077063807416) +
                  proc_control_B.t65_m * 0.010033314971702871)) +
                ((proc_control_B.t71 * -0.2488326294809943 + proc_control_B.t81 *
                  1.606290206365557E-6) - proc_control_B.t68_p4 *
                 0.58374455968341665)) + (((proc_control_B.t85 *
    0.0001026911824132076 + proc_control_B.t37_b * 18.096081350185919) +
    proc_control_B.t63_n * 1.606290206365557E-6) + proc_control_B.t80 *
    0.0080268590155159435)) + ((proc_control_B.out1_tmp_p2 *
    -0.00039756137245743289 - proc_control_B.t33_f * 4.9794996397332282E-5) -
    proc_control_B.t39_e * 0.58374455968341665)) + (proc_control_B.t67 *
    0.0080268590155159435 - 0.182404654235741);
  out1[12] = (((((((((((((((((((((((in2[0] * 0.0010125044874363649 - in2[1] *
    0.00042780737967584029) + in2[2] * 5.2828771531483014E-6) - in2[3] *
    0.0039859244840414) + (in2[4] * -1.606290206365557E-6 + in2[5] *
    0.53015902215788635)) + in3[0] * -0.1731941163298826) + in3[1] *
    -1.4397960202092559E-21) + in3[2] * 0.175443390567933) + (in3[3] *
    0.17469363248858291 + in3[4] * 0.00062021813460420567)) + (in3[5] *
    -0.0006207996116589 - in3[6] * 0.00064672437426625525)) + (in3[7] *
    0.00064730585132094889 - proc_control_B.t8_g * 0.64492422651466708)) +
    ((proc_control_B.t9_f * 0.3660910622711756 + proc_control_B.t10_c *
      0.3660910622711756) + proc_control_B.t11_p * 0.64492422651466708)) +
    ((proc_control_B.t12_a * 0.0048476610015380046 + proc_control_B.t13_n *
      0.0048476610015380046) + in3[0] * 1.4142135623730951 *
     0.00059255494878017434)) + ((in3[1] * 1.4142135623730951 *
    -0.1225770464045467 + in3[2] * 1.4142135623730951 * 0.00059255494878017434)
    + in3[3] * 1.4142135623730951 * 0.00041984673608298361)) +
                       (((proc_control_B.t15_h * -0.031387639110527318 +
    proc_control_B.t20_m * 0.0039859244840414) - proc_control_B.t16_i *
    0.00042780737967584029) + proc_control_B.t17_j * 5.2828771531483014E-6)) +
                      (((proc_control_B.t18_l * -1.606290206365557E-6 -
    proc_control_B.t19_c * 0.53015902215788635) + proc_control_B.t21_g *
                        1.606290206365557E-6) + proc_control_B.t22_c *
                       0.013262028769951049)) + (((proc_control_B.t23_l *
    5.2828771531483014E-6 + proc_control_B.out1_tmp_nl * 0.0010125044874363649)
    + proc_control_B.out1_tmp_o * 0.53015902215788635) + proc_control_B.t86 *
    0.0039859244840414)) + ((proc_control_B.out1_tmp_e * -0.53015902215788635 -
    proc_control_B.out1_tmp_m * 0.00016376919174759729) -
    proc_control_B.out1_tmp_ch * 0.00042780737967584029)) +
                   (((proc_control_B.out1_tmp_g * 0.0010125044874363649 +
                      proc_control_B.t84 * 1.606290206365557E-6) -
                     proc_control_B.t87 * 0.0039859244840414) +
                    proc_control_B.out1_tmp_bn * 0.008393580789239987)) +
                  ((proc_control_B.t45_e * 0.23414229210041551 -
                    proc_control_B.out1_tmp_p * 0.01986533804350149) -
                   proc_control_B.t56_f * 9.4357149063583354E-5)) +
                 ((proc_control_B.t55_d * 5.1825024872384838E-5 -
                   proc_control_B.t65_m * 0.0010125044874363649) -
                  proc_control_B.t71 * 0.1235636590052834)) +
                (((proc_control_B.t81 * -0.53015902215788635 +
                   proc_control_B.t68_p4 * 1.606290206365557E-6) +
                  proc_control_B.t85 * 0.00042780737967584029) -
                 proc_control_B.t37_b * 4.9794996397332282E-5)) +
               ((proc_control_B.t63_n * -0.53015902215788635 +
                 proc_control_B.t80 * 0.0039859244840414) -
                proc_control_B.out1_tmp_p2 * 5.2828771531483014E-6)) +
              ((proc_control_B.t33_f * 16.434929686894481 + proc_control_B.t39_e
                * 1.606290206365557E-6) + proc_control_B.t67 *
               0.0039859244840414)) + -0.0024238305007690032;
}

void proc_control::proc_control_rand(real_T r[3])
{
  if (proc_control_DW.method == 4U) {
    proc_control_B.r_j = proc_control_DW.state / 127773U;
    proc_control_B.y_hu = (proc_control_DW.state - proc_control_B.r_j * 127773U)
      * 16807U;
    proc_control_B.r_j *= 2836U;
    if (proc_control_B.y_hu < proc_control_B.r_j) {
      proc_control_B.y_hu = ~(proc_control_B.r_j - proc_control_B.y_hu) &
        2147483647U;
    } else {
      proc_control_B.y_hu -= proc_control_B.r_j;
    }

    r[0] = static_cast<real_T>(proc_control_B.y_hu) * 4.6566128752457969E-10;
    proc_control_B.r_j = proc_control_B.y_hu / 127773U;
    proc_control_B.y_hu = (proc_control_B.y_hu - proc_control_B.r_j * 127773U) *
      16807U;
    proc_control_B.r_j *= 2836U;
    if (proc_control_B.y_hu < proc_control_B.r_j) {
      proc_control_B.y_hu = ~(proc_control_B.r_j - proc_control_B.y_hu) &
        2147483647U;
    } else {
      proc_control_B.y_hu -= proc_control_B.r_j;
    }

    r[1] = static_cast<real_T>(proc_control_B.y_hu) * 4.6566128752457969E-10;
    proc_control_B.r_j = proc_control_B.y_hu / 127773U;
    proc_control_B.y_hu = (proc_control_B.y_hu - proc_control_B.r_j * 127773U) *
      16807U;
    proc_control_B.r_j *= 2836U;
    if (proc_control_B.y_hu < proc_control_B.r_j) {
      proc_control_B.y_hu = ~(proc_control_B.r_j - proc_control_B.y_hu) &
        2147483647U;
    } else {
      proc_control_B.y_hu -= proc_control_B.r_j;
    }

    r[2] = static_cast<real_T>(proc_control_B.y_hu) * 4.6566128752457969E-10;
    proc_control_DW.state = proc_control_B.y_hu;
  } else if (proc_control_DW.method == 5U) {
    for (proc_control_B.b_k_h = 0; proc_control_B.b_k_h < 3;
         proc_control_B.b_k_h++) {
      proc_control_B.r_j = 69069U * proc_control_DW.state_k[0] + 1234567U;
      proc_control_B.y_hu = proc_control_DW.state_k[1] << 13 ^
        proc_control_DW.state_k[1];
      proc_control_B.y_hu ^= proc_control_B.y_hu >> 17;
      proc_control_B.y_hu ^= proc_control_B.y_hu << 5;
      proc_control_DW.state_k[0] = proc_control_B.r_j;
      proc_control_DW.state_k[1] = proc_control_B.y_hu;
      r[proc_control_B.b_k_h] = static_cast<real_T>(proc_control_B.r_j +
        proc_control_B.y_hu) * 2.328306436538696E-10;
    }
  } else {
    int32_T i;
    if (!proc_control_DW.state_not_empty_e) {
      std::memset(&proc_control_DW.state_i[0], 0, 625U * sizeof(uint32_T));
      proc_control_B.r_j = 5489U;
      proc_control_DW.state_i[0] = 5489U;
      for (i = 0; i < 623; i++) {
        proc_control_B.r_j = ((proc_control_B.r_j >> 30U ^ proc_control_B.r_j) *
                              1812433253U + i) + 1U;
        proc_control_DW.state_i[i + 1] = proc_control_B.r_j;
      }

      proc_control_DW.state_i[624] = 624U;
      proc_control_DW.state_not_empty_e = true;
    }

    for (proc_control_B.b_k_h = 0; proc_control_B.b_k_h < 3;
         proc_control_B.b_k_h++) {
      std::memcpy(&proc_control_B.c_mt[0], &proc_control_DW.state_i[0], 625U *
                  sizeof(uint32_T));

      // ========================= COPYRIGHT NOTICE ============================ 
      //  This is a uniform (0,1) pseudorandom number generator based on:        
      //                                                                         
      //  A C-program for MT19937, with initialization improved 2002/1/26.       
      //  Coded by Takuji Nishimura and Makoto Matsumoto.                        
      //                                                                         
      //  Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,      
      //  All rights reserved.                                                   
      //                                                                         
      //  Redistribution and use in source and binary forms, with or without     
      //  modification, are permitted provided that the following conditions     
      //  are met:                                                               
      //                                                                         
      //    1. Redistributions of source code must retain the above copyright    
      //       notice, this list of conditions and the following disclaimer.     
      //                                                                         
      //    2. Redistributions in binary form must reproduce the above copyright 
      //       notice, this list of conditions and the following disclaimer      
      //       in the documentation and/or other materials provided with the     
      //       distribution.                                                     
      //                                                                         
      //    3. The names of its contributors may not be used to endorse or       
      //       promote products derived from this software without specific      
      //       prior written permission.                                         
      //                                                                         
      //  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    
      //  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      
      //  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  
      //  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT  
      //  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  
      //  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       
      //  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  
      //  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  
      //  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    
      //  (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
      //  OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
      //                                                                         
      // =============================   END   ================================= 
      int32_T exitg1;
      do {
        exitg1 = 0;
        for (i = 0; i < 2; i++) {
          proc_control_B.r_j = proc_control_B.c_mt[624] + 1U;
          if (proc_control_B.c_mt[624] + 1U >= 625U) {
            for (proc_control_B.b_kk = 0; proc_control_B.b_kk < 227;
                 proc_control_B.b_kk++) {
              proc_control_B.y_hu = (proc_control_B.c_mt[proc_control_B.b_kk + 1]
                & 2147483647U) | (proc_control_B.c_mt[proc_control_B.b_kk] &
                                  2147483648U);
              if ((proc_control_B.y_hu & 1U) == 0U) {
                proc_control_B.y_hu >>= 1U;
              } else {
                proc_control_B.y_hu = proc_control_B.y_hu >> 1U ^ 2567483615U;
              }

              proc_control_B.c_mt[proc_control_B.b_kk] =
                proc_control_B.c_mt[proc_control_B.b_kk + 397] ^
                proc_control_B.y_hu;
            }

            for (proc_control_B.b_kk = 0; proc_control_B.b_kk < 396;
                 proc_control_B.b_kk++) {
              proc_control_B.y_hu = (proc_control_B.c_mt[proc_control_B.b_kk +
                227] & 2147483648U) | (proc_control_B.c_mt[proc_control_B.b_kk +
                228] & 2147483647U);
              if ((proc_control_B.y_hu & 1U) == 0U) {
                proc_control_B.y_hu >>= 1U;
              } else {
                proc_control_B.y_hu = proc_control_B.y_hu >> 1U ^ 2567483615U;
              }

              proc_control_B.c_mt[proc_control_B.b_kk + 227] =
                proc_control_B.c_mt[proc_control_B.b_kk] ^ proc_control_B.y_hu;
            }

            proc_control_B.y_hu = (proc_control_B.c_mt[623] & 2147483648U) |
              (proc_control_B.c_mt[0] & 2147483647U);
            if ((proc_control_B.y_hu & 1U) == 0U) {
              proc_control_B.y_hu >>= 1U;
            } else {
              proc_control_B.y_hu = proc_control_B.y_hu >> 1U ^ 2567483615U;
            }

            proc_control_B.c_mt[623] = proc_control_B.c_mt[396] ^
              proc_control_B.y_hu;
            proc_control_B.r_j = 1U;
          }

          proc_control_B.y_hu = proc_control_B.c_mt[static_cast<int32_T>
            (proc_control_B.r_j) - 1];
          proc_control_B.c_mt[624] = proc_control_B.r_j;
          proc_control_B.y_hu ^= proc_control_B.y_hu >> 11U;
          proc_control_B.y_hu ^= proc_control_B.y_hu << 7U & 2636928640U;
          proc_control_B.y_hu ^= proc_control_B.y_hu << 15U & 4022730752U;
          proc_control_B.b_u[i] = proc_control_B.y_hu >> 18U ^
            proc_control_B.y_hu;
        }

        proc_control_B.b_r = (static_cast<real_T>(proc_control_B.b_u[0] >> 5U) *
                              6.7108864E+7 + static_cast<real_T>
                              (proc_control_B.b_u[1] >> 6U)) *
          1.1102230246251565E-16;
        if (proc_control_B.b_r == 0.0) {
          boolean_T b_isvalid;
          if ((proc_control_B.c_mt[624] >= 1U) && (proc_control_B.c_mt[624] <
               625U)) {
            boolean_T exitg2;
            b_isvalid = false;
            i = 0;
            exitg2 = false;
            while ((!exitg2) && (i + 1 < 625)) {
              if (proc_control_B.c_mt[i] == 0U) {
                i++;
              } else {
                b_isvalid = true;
                exitg2 = true;
              }
            }
          } else {
            b_isvalid = false;
          }

          if (!b_isvalid) {
            proc_control_B.r_j = 5489U;
            proc_control_B.c_mt[0] = 5489U;
            for (i = 0; i < 623; i++) {
              proc_control_B.r_j = ((proc_control_B.r_j >> 30U ^
                proc_control_B.r_j) * 1812433253U + i) + 1U;
              proc_control_B.c_mt[i + 1] = proc_control_B.r_j;
            }

            proc_control_B.c_mt[624] = 624U;
          }
        } else {
          exitg1 = 1;
        }
      } while (exitg1 == 0);

      std::memcpy(&proc_control_DW.state_i[0], &proc_control_B.c_mt[0], 625U *
                  sizeof(uint32_T));
      r[proc_control_B.b_k_h] = proc_control_B.b_r;
    }
  }
}

void proc_control::proc_control_binary_expand_op(real_T in1[3], const real_T
  in3_data[], const int32_T *in3_size, const real_T in4_data[], const int32_T
  *in4_size)
{
  int32_T loop_ub;

  // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
  //   EnablePort: '<S1>/Enable'

  // MATLAB Function: '<S14>/MATLAB Function'
  loop_ub = *in4_size == 1 ? *in3_size : *in4_size;
  for (int32_T i{0}; i < loop_ub; i++) {
    in1[0] = -in3_data[0] * 2.0 * in4_data[0];
  }

  // End of MATLAB Function: '<S14>/MATLAB Function'
  // End of Outputs for SubSystem: '<Root>/Modèle Physique'
}

real_T proc_control::proc_rt_nrand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  real_T y;

  // Normal (Gaussian) random number generator
  do {
    proc_control_B.sr = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    proc_control_B.si = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    proc_control_B.si = proc_control_B.sr * proc_control_B.sr +
      proc_control_B.si * proc_control_B.si;
  } while (proc_control_B.si > 1.0);

  y = std::sqrt(-2.0 * std::log(proc_control_B.si) / proc_control_B.si) *
    proc_control_B.sr;
  return y;
}

// Model step function
void proc_control::step()
{
  static const real_T b_B[6930]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020445512957285371, -0.0014603487861040304, -4.9246767934457634E-6,
    0.0052868326178782156, 0.0020754199270452173, -0.015163628780498446, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020430568849590363, 0.0014846744549160563, 7.0936716057342316E-6,
    -0.0051391900270571448, 0.0021227702215873057, -0.015228232305159621, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021016480453829815, -0.0014857887933183286, -4.7070151263154063E-6,
    0.0050961555194273559, 0.0020754929921346357, 0.015462266265499226, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021001536346134803, 0.0014592344477017574, 7.3113332728645879E-6,
    -0.0053298671255080053, 0.0021228432866767255, 0.015397662740838059, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00030616429069496923, -0.00048221414518065164, -0.0020535983066627917,
    -0.022397032944284023, 0.011382823490747531, 4.5300466257935429E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00030623942171196546, 0.00047731536664842887, 0.002066526813039662,
    0.022172426283366305, 0.011387616330349713, -0.00015666644814812009, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120834, 0.00050257013436989741, -0.0021189752999033816,
    0.023341150699844011, -0.011594289336350715, -4.8538698886608567E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572547, -0.00049767135583767474, 0.0021060467935265117,
    -0.023116544038926289, -0.011176150484746518, 0.00015990468077679311, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020445512957285371,
    -0.0014603487861040304, -4.9246767934457634E-6, 0.0052868326178782156,
    0.0020754199270452173, -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020430568849590363,
    0.0014846744549160563, 7.0936716057342316E-6, -0.0051391900270571448,
    0.0021227702215873057, -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021016480453829815,
    -0.0014857887933183286, -4.7070151263154063E-6, 0.0050961555194273559,
    0.0020754929921346357, 0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021001536346134803,
    0.0014592344477017574, 7.3113332728645879E-6, -0.0053298671255080053,
    0.0021228432866767255, 0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00030616429069496923,
    -0.00048221414518065164, -0.0020535983066627917, -0.022397032944284023,
    0.011382823490747531, 4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00030623942171196546,
    0.00047731536664842887, 0.002066526813039662, 0.022172426283366305,
    0.011387616330349713, -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834,
    0.00050257013436989741, -0.0021189752999033816, 0.023341150699844011,
    -0.011594289336350715, -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547,
    -0.00049767135583767474, 0.0021060467935265117, -0.023116544038926289,
    -0.011176150484746518, 0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T l[6450]{ -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020445512957285371, 0.0014603487861040304, 4.9246767934457634E-6,
    -0.0052868326178782156, -0.0020754199270452173, 0.015163628780498446,
    3.1616010707720426E-7, -0.0, -0.00019811352068166364, -9.73333699342812E-5,
    0.00066585862709166957, -0.0040091552269349209, 0.0028909658887442155,
    6.5614497023245073E-6, -0.0080792362290577815, -0.0038844512459874081,
    0.026788702408483002, 6.8512917620797536E-7, -0.0, -0.00049104314225850254,
    -0.00027751213812133571, 0.0018419406261771351, -0.0058989572722036735,
    0.0042850903886228146, 6.1601073524460959E-6, -0.0091991288332427812,
    -0.0053836032115810945, 0.035691534155111788, 9.51595524168609E-7, -0.0,
    -0.00081150591943761959, -0.00052435232813021957, 0.0034085439914897236,
    -0.0077185036154530772, 0.0056372660414857906, 4.6396980079752364E-6,
    -0.00926906335060941, -0.006548320744319591, 0.042501234100522735,
    1.0377937756639665E-6, -0.0, -0.0011189252136054833, -0.00082088448415742132,
    0.0052736567007514515, -0.0094716827009443637, 0.0069435063749424446,
    2.6414509523473936E-6, -0.008739896629381582, -0.00737143213587389,
    0.047702538425699506, 9.1853767957218194E-7, -0.0, -0.0013916387797655108,
    -0.0011501728132765291, 0.0073666001295169623, -0.011161718745088724,
    0.008201241533242561, 5.8494966353777778E-7, -0.00792273074079747,
    -0.007861076035806859, 0.051668868765490657, 6.01743722369558E-7, -0.0,
    -0.001620703686020732, -0.0014960212712305325, 0.0096331287280922023,
    -0.012791205168029366, 0.0094091464493969573, -1.2790233473825457E-6,
    -0.0070202354586047528, -0.0080382793893777667, 0.054687847403532837,
    1.1391978754040816E-7, -0.0, -0.001805191914282023, -0.0018435530683128011,
    0.012031653450661765, -0.01436216724881885, 0.010566918108659434,
    -2.8223985500875043E-6, -0.0061546448498688575, -0.007934340486205024,
    0.056980982028061261, -5.1013685987928413E-7, -0.0, -0.0019487749913619972,
    -0.0021796573224240928, 0.014530331906291044, -0.015876144576630242,
    0.011675045183589609, -4.0018112448208258E-6, -0.0053912134366169567,
    -0.0075881528377809079, 0.058718842971069225, -1.2342489191791384E-6, -0.0,
    -0.0020573611713821547, -0.002493302894833033, 0.017104826530695772,
    -0.017334285099427416, 0.012734595324628301, -4.8286811668071772E-6,
    -0.0047568768666075411, -0.0070435863941390019, 0.060032756331813382, 0.0,
    0.0, 0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.00019811352068166364, 9.73333699342812E-5,
    -0.00066585862709166957, 0.0040091552269349209, -0.0028909658887442155,
    -6.5614497023245073E-6, 0.0080792362290577815, 0.0038844512459874081,
    -0.026788702408483002, 0.0, 0.00049104314225850254, 0.00027751213812133571,
    -0.0018419406261771351, 0.0058989572722036735, -0.0042850903886228146,
    -6.1601073524460959E-6, 0.0091991288332427812, 0.0053836032115810945,
    -0.035691534155111788, 0.0, 0.00081150591943761959, 0.00052435232813021957,
    -0.0034085439914897236, 0.0077185036154530772, -0.0056372660414857906,
    -4.6396980079752364E-6, 0.00926906335060941, 0.006548320744319591,
    -0.042501234100522735, 0.0, 0.0011189252136054833, 0.00082088448415742132,
    -0.0052736567007514515, 0.0094716827009443637, -0.0069435063749424446,
    -2.6414509523473936E-6, 0.008739896629381582, 0.00737143213587389,
    -0.047702538425699506, 0.0, 0.0013916387797655108, 0.0011501728132765291,
    -0.0073666001295169623, 0.011161718745088724, -0.008201241533242561,
    -5.8494966353777778E-7, 0.00792273074079747, 0.007861076035806859,
    -0.051668868765490657, 0.0, 0.001620703686020732, 0.0014960212712305325,
    -0.0096331287280922023, 0.012791205168029366, -0.0094091464493969573,
    1.2790233473825457E-6, 0.0070202354586047528, 0.0080382793893777667,
    -0.054687847403532837, 0.0, 0.001805191914282023, 0.0018435530683128011,
    -0.012031653450661765, 0.01436216724881885, -0.010566918108659434,
    2.8223985500875043E-6, 0.0061546448498688575, 0.007934340486205024,
    -0.056980982028061261, 0.0, 0.0019487749913619972, 0.0021796573224240928,
    -0.014530331906291044, 0.015876144576630242, -0.011675045183589609,
    4.0018112448208258E-6, 0.0053912134366169567, 0.0075881528377809079,
    -0.058718842971069225, 0.0, 0.0020573611713821547, 0.002493302894833033,
    -0.017104826530695772, 0.017334285099427416, -0.012734595324628301,
    4.8286811668071772E-6, 0.0047568768666075411, 0.0070435863941390019,
    -0.060032756331813382, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0020430568849590363, -0.0014846744549160563,
    -7.0936716057342316E-6, 0.0051391900270571448, -0.0021227702215873057,
    0.015228232305159621, -5.1746825674618411E-7, -0.0, 0.00019360954683992086,
    -9.8951619720029927E-5, 0.00066903596330777568, -0.0040067314306774949,
    -0.0029322591857517642, -1.0565746060026215E-5, 0.0078884598525309352,
    -0.0039509928253638827, 0.026917231873970968, -1.25018041672658E-6, -0.0,
    0.0004813724987437641, -0.0002812123096721656, 0.0018515897913409906,
    -0.0058959962902359435, -0.00433805660413819, -1.1566011819059168E-5,
    0.00901826988341082, -0.0054509447270126056, 0.03588820965614524,
    -1.99674342474268E-6, -0.0, 0.00079779982914969841, -0.000529877384341185,
    0.0034281815934806724, -0.0077152543580130614, -0.0056981223890151169,
    -1.0967109079724052E-5, 0.0091195753483278869, -0.00660567593380442,
    0.04277015614884281, -2.6308219371928471E-6, -0.0, 0.0011028937830708171,
    -0.0008275864795065065, 0.005306950518510354, -0.0094682805098512471,
    -0.0070095628750181035, -9.4049919993817815E-6, 0.0086253321268044067,
    -0.0074136435021352051, 0.048045444848981857, -3.0797420946197447E-6, -0.0,
    0.0013749180814484161, -0.0011572507586087781, 0.00741723100352391,
    -0.011158213201939327, -0.00827058862369585, -7.3245584742921849E-6,
    0.0078377590270683143, -0.0078869236468970261, 0.052084536642155926,
    -3.3076191174553684E-6, -0.0, 0.0016045634974302969, -0.001502682321689071,
    0.0097046471474189055, -0.012787584797297882, -0.009480426545954863,
    -5.0236620287564976E-6, 0.0069562410011868329, -0.0080491061052958713,
    0.055172377151487921, -3.3026429098114517E-6, -0.0, 0.0017904596235921708,
    -0.0018491127346458545, 0.012127361717645797, -0.014358380565562009,
    -0.010639161635940208, -2.6918556487285848E-6, 0.0061029256813059174,
    -0.0079329836605401376, 0.057528472990236564, -3.0679042907758847E-6, -0.0,
    0.0019358763409865634, -0.0021835932805221218, 0.014653203386246897,
    -0.01587211736084377, -0.01174755497429808, -4.42337866151435E-7,
    0.00534457038431273, -0.007578149996654163, 0.059322164719128163,
    -2.6150642512061722E-6, -0.0, 0.0020464129014495149, -0.0024952750539298735,
    0.017257462274893824, -0.0173299340528133, -0.012806866470529164,
    1.663084598604466E-6, 0.0047101836644297549, -0.0070286124953556394,
    0.060684253833634447, 0.0, 0.0, 0.0, 0.0, 0.0020430568849590363,
    0.0014846744549160563, 7.0936716057342316E-6, -0.0051391900270571448,
    0.0021227702215873057, -0.015228232305159621, 0.0, -0.00019360954683992086,
    9.8951619720029927E-5, -0.00066903596330777568, 0.0040067314306774949,
    0.0029322591857517642, 1.0565746060026215E-5, -0.0078884598525309352,
    0.0039509928253638827, -0.026917231873970968, 0.0, -0.0004813724987437641,
    0.0002812123096721656, -0.0018515897913409906, 0.0058959962902359435,
    0.00433805660413819, 1.1566011819059168E-5, -0.00901826988341082,
    0.0054509447270126056, -0.03588820965614524, 0.0, -0.00079779982914969841,
    0.000529877384341185, -0.0034281815934806724, 0.0077152543580130614,
    0.0056981223890151169, 1.0967109079724052E-5, -0.0091195753483278869,
    0.00660567593380442, -0.04277015614884281, 0.0, -0.0011028937830708171,
    0.0008275864795065065, -0.005306950518510354, 0.0094682805098512471,
    0.0070095628750181035, 9.4049919993817815E-6, -0.0086253321268044067,
    0.0074136435021352051, -0.048045444848981857, 0.0, -0.0013749180814484161,
    0.0011572507586087781, -0.00741723100352391, 0.011158213201939327,
    0.00827058862369585, 7.3245584742921849E-6, -0.0078377590270683143,
    0.0078869236468970261, -0.052084536642155926, 0.0, -0.0016045634974302969,
    0.001502682321689071, -0.0097046471474189055, 0.012787584797297882,
    0.009480426545954863, 5.0236620287564976E-6, -0.0069562410011868329,
    0.0080491061052958713, -0.055172377151487921, 0.0, -0.0017904596235921708,
    0.0018491127346458545, -0.012127361717645797, 0.014358380565562009,
    0.010639161635940208, 2.6918556487285848E-6, -0.0061029256813059174,
    0.0079329836605401376, -0.057528472990236564, 0.0, -0.0019358763409865634,
    0.0021835932805221218, -0.014653203386246897, 0.01587211736084377,
    0.01174755497429808, 4.42337866151435E-7, -0.00534457038431273,
    0.007578149996654163, -0.059322164719128163, 0.0, -0.0020464129014495149,
    0.0024952750539298735, -0.017257462274893824, 0.0173299340528133,
    0.012806866470529164, -1.663084598604466E-6, -0.0047101836644297549,
    0.0070286124953556394, -0.060684253833634447, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0021016480453829815,
    0.0014857887933183286, 4.7070151263154063E-6, -0.0050961555194273559,
    -0.0020754929921346357, -0.015462266265499226, 3.0426878718878496E-7, -0.0,
    -0.00019216872658156067, -9.73459460026197E-5, -0.0006792751071504849,
    -0.0041074683619141631, 0.0029340512081696577, 6.3057460452133884E-6,
    -0.00782907896809333, -0.0038849506557918018, -0.027331354583334473,
    6.6273426813855175E-7, -0.0, -0.00047814040658582105, -0.000277566493848083,
    -0.0018802229105924365, -0.0060264210814452886, 0.0043402263594654331,
    5.9587145352081763E-6, -0.0089598311740056828, -0.0053848318467642564,
    -0.036451644592615427, 9.2636180986459172E-7, -0.0, -0.0007930998311513511,
    -0.00052449064683289992, -0.0034822500476397213, -0.0078659750107290677,
    0.0057004858091328926, 4.5303525006595133E-6, -0.0090720820218160424,
    -0.0065504901027000958, -0.04346807648358772, 1.0194144264559595E-6, -0.0,
    -0.0010974076290702971, -0.00082115681443972331, -0.0053930322171731326,
    -0.0096322567462445857, 0.00701202851618736, 2.6300941233486434E-6,
    -0.0085934122806193176, -0.0073746438770505617, -0.048873310311435589,
    9.1637309261321547E-7, -0.0, -0.0013694590279160136, -0.001150631492424329,
    -0.0075418405117768745, -0.011330203401756304, 0.0082731347444936279,
    6.61013790805109E-7, -0.00782228984031321, -0.0078653210901301167,
    -0.053043720345121143, 6.2369573871460237E-7, -0.0, -0.0015999229352117708,
    -0.0014967156366828343, -0.0098744448046202624, -0.012963718195152128,
    0.0094830801904353113, -1.1328950919024408E-6, -0.0069556646472008427,
    -0.0080434495506573524, -0.056266866774456553, 1.6606812914153581E-7, -0.0,
    -0.0017873120317849199, -0.001844524963056166, -0.012349220884839871,
    -0.014535826846399721, 0.010641980597964829, -2.6245895611173081E-6,
    -0.0061142707936579534, -0.00794024786087918, -0.058762467425333663,
    -4.2346592189730975E-7, -0.0, -0.0019347286197374006, -0.0021809376864936609,
    -0.014934176702927581, -0.016048831986543406, 0.011750612976507079,
    -3.7686667972724733E-6, -0.0053642122139471319, -0.0075945532602473683,
    -0.060698414364158154, -1.1102016279514281E-6, -0.0, -0.0020475860319608364,
    -0.0024949095612962508, -0.017604680748317732, -0.017504462457878039,
    0.012810241540071939, -4.5731930224289468E-6, -0.0047343841216166494,
    -0.0070502037507671972, -0.062203013141477644, 0.0, 0.0, 0.0, 0.0,
    0.0021016480453829815, -0.0014857887933183286, -4.7070151263154063E-6,
    0.0050961555194273559, 0.0020754929921346357, 0.015462266265499226, 0.0,
    0.00019216872658156067, 9.73459460026197E-5, 0.0006792751071504849,
    0.0041074683619141631, -0.0029340512081696577, -6.3057460452133884E-6,
    0.00782907896809333, 0.0038849506557918018, 0.027331354583334473, 0.0,
    0.00047814040658582105, 0.000277566493848083, 0.0018802229105924365,
    0.0060264210814452886, -0.0043402263594654331, -5.9587145352081763E-6,
    0.0089598311740056828, 0.0053848318467642564, 0.036451644592615427, 0.0,
    0.0007930998311513511, 0.00052449064683289992, 0.0034822500476397213,
    0.0078659750107290677, -0.0057004858091328926, -4.5303525006595133E-6,
    0.0090720820218160424, 0.0065504901027000958, 0.04346807648358772, 0.0,
    0.0010974076290702971, 0.00082115681443972331, 0.0053930322171731326,
    0.0096322567462445857, -0.00701202851618736, -2.6300941233486434E-6,
    0.0085934122806193176, 0.0073746438770505617, 0.048873310311435589, 0.0,
    0.0013694590279160136, 0.001150631492424329, 0.0075418405117768745,
    0.011330203401756304, -0.0082731347444936279, -6.61013790805109E-7,
    0.00782228984031321, 0.0078653210901301167, 0.053043720345121143, 0.0,
    0.0015999229352117708, 0.0014967156366828343, 0.0098744448046202624,
    0.012963718195152128, -0.0094830801904353113, 1.1328950919024408E-6,
    0.0069556646472008427, 0.0080434495506573524, 0.056266866774456553, 0.0,
    0.0017873120317849199, 0.001844524963056166, 0.012349220884839871,
    0.014535826846399721, -0.010641980597964829, 2.6245895611173081E-6,
    0.0061142707936579534, 0.00794024786087918, 0.058762467425333663, 0.0,
    0.0019347286197374006, 0.0021809376864936609, 0.014934176702927581,
    0.016048831986543406, -0.011750612976507079, 3.7686667972724733E-6,
    0.0053642122139471319, 0.0075945532602473683, 0.060698414364158154, 0.0,
    0.0020475860319608364, 0.0024949095612962508, 0.017604680748317732,
    0.017504462457878039, -0.012810241540071939, 4.5731930224289468E-6,
    0.0047343841216166494, 0.0070502037507671972, 0.062203013141477644, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021001536346134803, -0.0014592344477017574, -7.3113332728645879E-6,
    0.0053298671255080053, -0.0021228432866767255, -0.015397662740838059,
    -5.2935957663460309E-7, -0.0, 0.00019955434094002391, -9.8964195788368479E-5,
    -0.00067609777093437912, -0.0041050445656567363, -0.0028891738663263207,
    -1.082144971713733E-5, 0.00813861711349539, -0.0039514922351682781,
    -0.027202825117846524, -1.2725753247960032E-6, -0.0, 0.00049427523441644564,
    -0.00028126666539891307, -0.0018705737454285823, -0.0060234600994775568,
    -0.00428292063329557, -1.176740463629708E-5, 0.0092575675426479209,
    -0.00545217336219577, -0.036254969091582, -2.0219771390466966E-6, -0.0,
    0.000816205917435967, -0.00053001570304386553, -0.0034626124456487747,
    -0.00786272575328905, -0.0056349026213680133, -1.1076454587039766E-5,
    0.0093165566771212568, -0.0066078452921849284, -0.043199154435267666,
    -2.649201286400853E-6, -0.0, 0.0011244113676060037, -0.00082785880978880882,
    -0.0053597383994142336, -0.0096288545551514691, -0.0069410407337731853,
    -9.41634882838052E-6, 0.0087718164755666728, -0.007416855243311881,
    -0.048530403888153259, -3.0819066815787091E-6, -0.0, 0.0013970978332979137,
    -0.0011577094377565786, -0.00749120963776993, -0.011326697858606906,
    -0.00819869541244478, -7.24849434702484E-6, 0.0079381999275525764,
    -0.0078911687012202889, -0.0526280524684559, -3.2856671011103207E-6, -0.0,
    0.0016253442482392585, -0.0015033766871413736, -0.0098029263852935644,
    -0.012960097824420645, -0.0094064928049165039, -4.8775337732763766E-6,
    0.0070208118125907448, -0.0080542762665754622, -0.0557823370265015,
    -3.25049456821032E-6, -0.0, 0.0018083395060892744, -0.0018500846293892205,
    -0.012253512617855846, -0.014532040163142882, -0.010564099146634807,
    -2.4940466597583703E-6, 0.0061432997375168224, -0.0079388910352142985,
    -0.058214976463158388, -2.9812333527939047E-6, -0.0, 0.0019499227126111602,
    -0.0021848736445916912, -0.014811305222971737, -0.016044804770756937,
    -0.011671987181380605, -2.091934186030613E-7, 0.0053715716069825548,
    -0.0075845504191206286, -0.060095092616099251, -2.4910169599784537E-6, -0.0,
    0.0020561880408708341, -0.0024968817203930927, -0.017452045004119694,
    -0.017500111411263931, -0.012731220255085524, 1.9185727429827189E-6,
    0.0047326764094206457, -0.00703522985198384, -0.061551515639656613, 0.0, 0.0,
    0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, -0.00019955434094002391, 9.8964195788368479E-5,
    0.00067609777093437912, 0.0041050445656567363, 0.0028891738663263207,
    1.082144971713733E-5, -0.00813861711349539, 0.0039514922351682781,
    0.027202825117846524, 0.0, -0.00049427523441644564, 0.00028126666539891307,
    0.0018705737454285823, 0.0060234600994775568, 0.00428292063329557,
    1.176740463629708E-5, -0.0092575675426479209, 0.00545217336219577,
    0.036254969091582, 0.0, -0.000816205917435967, 0.00053001570304386553,
    0.0034626124456487747, 0.00786272575328905, 0.0056349026213680133,
    1.1076454587039766E-5, -0.0093165566771212568, 0.0066078452921849284,
    0.043199154435267666, 0.0, -0.0011244113676060037, 0.00082785880978880882,
    0.0053597383994142336, 0.0096288545551514691, 0.0069410407337731853,
    9.41634882838052E-6, -0.0087718164755666728, 0.007416855243311881,
    0.048530403888153259, 0.0, -0.0013970978332979137, 0.0011577094377565786,
    0.00749120963776993, 0.011326697858606906, 0.00819869541244478,
    7.24849434702484E-6, -0.0079381999275525764, 0.0078911687012202889,
    0.0526280524684559, 0.0, -0.0016253442482392585, 0.0015033766871413736,
    0.0098029263852935644, 0.012960097824420645, 0.0094064928049165039,
    4.8775337732763766E-6, -0.0070208118125907448, 0.0080542762665754622,
    0.0557823370265015, 0.0, -0.0018083395060892744, 0.0018500846293892205,
    0.012253512617855846, 0.014532040163142882, 0.010564099146634807,
    2.4940466597583703E-6, -0.0061432997375168224, 0.0079388910352142985,
    0.058214976463158388, 0.0, -0.0019499227126111602, 0.0021848736445916912,
    0.014811305222971737, 0.016044804770756937, 0.011671987181380605,
    2.091934186030613E-7, -0.0053715716069825548, 0.0075845504191206286,
    0.060095092616099251, 0.0, -0.0020561880408708341, 0.0024968817203930927,
    0.017452045004119694, 0.017500111411263931, 0.012731220255085524,
    -1.9185727429827189E-6, -0.0047326764094206457, 0.00703522985198384,
    0.061551515639656613, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 0.00030616429069496923, 0.00048221414518065164,
    0.0020535983066627917, 0.022397032944284023, -0.011382823490747531,
    -4.5300466257935429E-5, 0.00020111824649365363, -0.0, 0.00083519681622152143,
    -0.00052693283295635128, -1.4202292023779372E-6, 0.00056258770077962489,
    0.00080001208779628685, 0.0040222089662175116, 0.034075479854978247,
    -0.021043808615419376, -6.0914557418032596E-5, 0.00059482891125992249, -0.0,
    0.002062143106284854, -0.0014904815292193945, -3.3998696950912874E-6,
    0.00075646106685663085, 0.0009936379052814066, 0.0059054831078212966,
    0.038583750917710678, -0.028829764251451326, -7.1735836551568879E-5,
    0.0011726262150481637, -0.0, 0.0033929136972443439, -0.0027949836877214896,
    -6.2738005970893479E-6, 0.00087950249413920047, 0.0010977323314750806,
    0.0077041407928327083, 0.038610702862460149, -0.034678824448749805,
    -9.99582877310808E-5, 0.0019261216668453409, -0.0, 0.004654926481577208,
    -0.004343790695385528, -1.1349003863154811E-5, 0.00092769306525124055,
    0.0011404644798644031, 0.0094197723233186512, 0.036103268168904461,
    -0.038611763746433318, -0.00016194825176056761, 0.0028471204265186328, -0.0,
    0.0057572468853912514, -0.00604313701410948, -2.0579570862840042E-5,
    0.00090087854130221272, 0.0011436573271834541, 0.011054625516548585,
    0.03240359262632185, -0.040721182393318144, -0.00026717427891659415,
    0.0039276769289651285, -0.0, 0.006663765412963975, -0.0078054281883259,
    -3.6223635885386266E-5, 0.00080226872093682724, 0.0011234628800830127,
    0.012611407038876492, 0.028384129958974106, -0.041159175748152539,
    -0.00041844655161156453, 0.0051601319868246516, -0.0, 0.0073728135925645675,
    -0.009551887733299189, -6.0533070291468119E-5, 0.000637866685778655,
    0.0010912837713868075, 0.014093112150810589, 0.024568713767860097,
    -0.040124126137914662, -0.00061290951136036, 0.0065371345335159276, -0.0,
    0.0079023594828677816, -0.011214534686086311, -9.5503092630370968E-5,
    0.000415859234804783, 0.0010547464749837694, 0.015502888074725234,
    0.021234175454636881, -0.037847237535387088, -0.00084339143145200518,
    0.0080516513816897874, -0.0, 0.0082797661137407122, -0.012737493468585182,
    -0.00014269246021107707, 0.00014599763913536522, 0.0010186111457241656,
    0.016843930534120106, 0.01849129340046481, -0.034579382681332371,
    -0.001099842345084482, 0.0, 0.0, 0.0, 0.0, -0.00030616429069496923,
    -0.00048221414518065164, -0.0020535983066627917, -0.022397032944284023,
    0.011382823490747531, 4.5300466257935429E-5, 0.0, -0.00083519681622152143,
    0.00052693283295635128, 1.4202292023779372E-6, -0.00056258770077962489,
    -0.00080001208779628685, -0.0040222089662175116, -0.034075479854978247,
    0.021043808615419376, 6.0914557418032596E-5, 0.0, -0.002062143106284854,
    0.0014904815292193945, 3.3998696950912874E-6, -0.00075646106685663085,
    -0.0009936379052814066, -0.0059054831078212966, -0.038583750917710678,
    0.028829764251451326, 7.1735836551568879E-5, 0.0, -0.0033929136972443439,
    0.0027949836877214896, 6.2738005970893479E-6, -0.00087950249413920047,
    -0.0010977323314750806, -0.0077041407928327083, -0.038610702862460149,
    0.034678824448749805, 9.99582877310808E-5, 0.0, -0.004654926481577208,
    0.004343790695385528, 1.1349003863154811E-5, -0.00092769306525124055,
    -0.0011404644798644031, -0.0094197723233186512, -0.036103268168904461,
    0.038611763746433318, 0.00016194825176056761, 0.0, -0.0057572468853912514,
    0.00604313701410948, 2.0579570862840042E-5, -0.00090087854130221272,
    -0.0011436573271834541, -0.011054625516548585, -0.03240359262632185,
    0.040721182393318144, 0.00026717427891659415, 0.0, -0.006663765412963975,
    0.0078054281883259, 3.6223635885386266E-5, -0.00080226872093682724,
    -0.0011234628800830127, -0.012611407038876492, -0.028384129958974106,
    0.041159175748152539, 0.00041844655161156453, 0.0, -0.0073728135925645675,
    0.009551887733299189, 6.0533070291468119E-5, -0.000637866685778655,
    -0.0010912837713868075, -0.014093112150810589, -0.024568713767860097,
    0.040124126137914662, 0.00061290951136036, 0.0, -0.0079023594828677816,
    0.011214534686086311, 9.5503092630370968E-5, -0.000415859234804783,
    -0.0010547464749837694, -0.015502888074725234, -0.021234175454636881,
    0.037847237535387088, 0.00084339143145200518, 0.0, -0.0082797661137407122,
    0.012737493468585182, 0.00014269246021107707, -0.00014599763913536522,
    -0.0010186111457241656, -0.016843930534120106, -0.01849129340046481,
    0.034579382681332371, 0.001099842345084482, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.00030623942171196546,
    -0.00047731536664842887, -0.002066526813039662, -0.022172426283366305,
    -0.011387616330349713, 0.00015666644814812009, -0.0002022625931303291, -0.0,
    -0.00082774518149017452, -0.000529592610445747, 5.7389299890772109E-6,
    0.00056396725231741681, -0.0007922466192322238, -0.0040450830466660882,
    -0.033768034595554677, -0.021141612605666528, 0.00022480793913855988,
    -0.0005979618330017876, -0.0, -0.0020455667486544552, -0.0015016832971963196,
    1.2281171297667541E-5, 0.00075945441536740617, -0.000984370751728749,
    -0.0059353031721315549, -0.038284778592207587, -0.029063239819559016,
    0.0001877515826036143, -0.0011782958644571567, -0.0, -0.0033690819832402682,
    -0.0028218463087974089, 1.4332584980973915E-5, 0.00088370610807833518,
    -0.0010877588806645171, -0.0077380022415320946, -0.038372417220315584,
    -0.035056627436016605, 4.634363912435984E-5, -0.0019345945407556694, -0.0,
    -0.0046275598281650945, -0.0043932358301320314, 6.9202572103202192E-6,
    0.00093219348467385541, -0.0011301251608970195, -0.0094549611400509687,
    -0.035949097799074868, -0.039118963178182836, -0.00018840012431222731,
    -0.0028584044719204794, -0.0, -0.0057307040828358021, -0.0061209378716336575,
    -1.4228364171763658E-5, 0.00090443930240191118, -0.0011329532079862731,
    -0.011088696165303913, -0.032336970688930662, -0.04132810309639473,
    -0.00050011991607834452, -0.0039415515091365486, -0.0, -0.00664222892733604,
    -0.0079156577616609179, -5.2501371284616649E-5, 0.00080349399699248961,
    -0.0011121622881278001, -0.012642241664372788, -0.028395620667837858,
    -0.0418285314829304, -0.00087020044792009317, -0.0051761828183116993, -0.0,
    -0.0073597906534701579, -0.00969668181913341, -0.00011034171177573473,
    0.00063533798268077, -0.0010790145827917301, -0.01411896081282206,
    -0.024641539531302686, -0.040816497866809458, -0.0012796998356205361,
    -0.00655479171491834, -0.0, -0.0079004230433163576, -0.011394090655931458,
    -0.00018926275707432255, 0.00040824404672798584, -0.0010410718558982628,
    -0.01552239048802781, -0.02134831919825797, -0.0385250575094498,
    -0.0017105267608725728, -0.0080702287172710677, -0.0, -0.0082904698928620724,
    -0.01295023522278608, -0.00028990993190658812, 0.00013213075603135031,
    -0.0010030885797492424, -0.016856120469814714, -0.018626398129647937,
    -0.035209634693518316, -0.0021461428964605891, 0.0, 0.0, 0.0, 0.0,
    -0.00030623942171196546, 0.00047731536664842887, 0.002066526813039662,
    0.022172426283366305, 0.011387616330349713, -0.00015666644814812009, 0.0,
    0.00082774518149017452, 0.000529592610445747, -5.7389299890772109E-6,
    -0.00056396725231741681, 0.0007922466192322238, 0.0040450830466660882,
    0.033768034595554677, 0.021141612605666528, -0.00022480793913855988, 0.0,
    0.0020455667486544552, 0.0015016832971963196, -1.2281171297667541E-5,
    -0.00075945441536740617, 0.000984370751728749, 0.0059353031721315549,
    0.038284778592207587, 0.029063239819559016, -0.0001877515826036143, 0.0,
    0.0033690819832402682, 0.0028218463087974089, -1.4332584980973915E-5,
    -0.00088370610807833518, 0.0010877588806645171, 0.0077380022415320946,
    0.038372417220315584, 0.035056627436016605, -4.634363912435984E-5, 0.0,
    0.0046275598281650945, 0.0043932358301320314, -6.9202572103202192E-6,
    -0.00093219348467385541, 0.0011301251608970195, 0.0094549611400509687,
    0.035949097799074868, 0.039118963178182836, 0.00018840012431222731, 0.0,
    0.0057307040828358021, 0.0061209378716336575, 1.4228364171763658E-5,
    -0.00090443930240191118, 0.0011329532079862731, 0.011088696165303913,
    0.032336970688930662, 0.04132810309639473, 0.00050011991607834452, 0.0,
    0.00664222892733604, 0.0079156577616609179, 5.2501371284616649E-5,
    -0.00080349399699248961, 0.0011121622881278001, 0.012642241664372788,
    0.028395620667837858, 0.0418285314829304, 0.00087020044792009317, 0.0,
    0.0073597906534701579, 0.00969668181913341, 0.00011034171177573473,
    -0.00063533798268077, 0.0010790145827917301, 0.01411896081282206,
    0.024641539531302686, 0.040816497866809458, 0.0012796998356205361, 0.0,
    0.0079004230433163576, 0.011394090655931458, 0.00018926275707432255,
    -0.00040824404672798584, 0.0010410718558982628, 0.01552239048802781,
    0.02134831919825797, 0.0385250575094498, 0.0017105267608725728, 0.0,
    0.0082904698928620724, 0.01295023522278608, 0.00028990993190658812,
    -0.00013213075603135031, 0.0010030885797492424, 0.016856120469814714,
    0.018626398129647937, 0.035209634693518316, 0.0021461428964605891, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.00031185892138120834, -0.00050257013436989741, 0.0021189752999033816,
    -0.023341150699844011, 0.011594289336350715, 4.8538698886608567E-5,
    0.00020586795104612229, -0.0, -0.00086995623361496588,
    0.00053660101735923357, 1.5306708468308147E-6, -0.00057297910874745152,
    -0.00083359519431663322, 0.004119248160739955, -0.035495899890902981,
    0.021430149447512051, 6.54082842232448E-5, 0.00060627118913526379, -0.0,
    -0.0021471788857608319, 0.0015176122837254379, 3.6460185703158066E-6,
    -0.00077034491777451411, -0.001035155325503919, 0.0060112845231374149,
    -0.040171560763765359, 0.029352888902237733, 7.6101215650564892E-5,
    0.0011908412917109568, -0.0, -0.0035314309384240376, 0.0028454618318544097,
    6.6294921173456436E-6, -0.00089555200508320781, -0.0011434481783357141,
    0.0078039387061703035, -0.0401761770089912, 0.035300685361534516,
    0.00010352169015720728, 0.0019500242678547547, -0.0, -0.0048429060012226393,
    0.004421628723515118, 1.1770888489239871E-5, -0.00094453662973384325,
    -0.0011878922635308313, 0.0095046860602438655, -0.037542072616071238,
    0.039295727814625439, 0.00016467428301353455, 0.0028749549914754268, -0.0,
    -0.005987006717235, 0.0061505759056418863, 2.1035254999411158E-5,
    -0.00091716878475691342, -0.0011912658049384594, 0.01111986880888134,
    -0.033669554571301968, 0.041433198448315854, 0.00026950643131986516,
    0.0039573555927472333, -0.0, -0.00692632074987407, 0.0079430910275364534,
    3.6711018305390848E-5, -0.00081674138386906279, -0.0011704175763008568,
    0.012654925863460518, -0.029468311129123081, 0.041868716552104321,
    0.00042112234888680477, 0.0051894553636579873, -0.0, -0.0076593329913996963,
    0.00971897451281721, 6.1090607957709023E-5, -0.00064938830542570825,
    -0.0011372333641091216, 0.014114591733434101, -0.025484039012415069,
    0.040804892537124514, 0.00061678702026516654, 0.0065639287573136694, -0.0,
    -0.0082049716994792733, 0.01140904630781259, 9.621210676253911E-5,
    -0.0004234631537616511, -0.0010996549666288814, 0.01550305918633214,
    -0.022004664482222415, 0.038477622702890478, 0.00084930644176672637,
    0.0080738478468586686, -0.0, -0.0085919231511164072, 0.012956473101216526,
    0.00014367324314189123, -0.00014890838604834564, -0.0010626319711789308,
    0.016824106212107545, -0.019144919197986637, 0.035142704197345838,
    0.0011085037444974752, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834,
    0.00050257013436989741, -0.0021189752999033816, 0.023341150699844011,
    -0.011594289336350715, -4.8538698886608567E-5, 0.0, 0.00086995623361496588,
    -0.00053660101735923357, -1.5306708468308147E-6, 0.00057297910874745152,
    0.00083359519431663322, -0.004119248160739955, 0.035495899890902981,
    -0.021430149447512051, -6.54082842232448E-5, 0.0, 0.0021471788857608319,
    -0.0015176122837254379, -3.6460185703158066E-6, 0.00077034491777451411,
    0.001035155325503919, -0.0060112845231374149, 0.040171560763765359,
    -0.029352888902237733, -7.6101215650564892E-5, 0.0, 0.0035314309384240376,
    -0.0028454618318544097, -6.6294921173456436E-6, 0.00089555200508320781,
    0.0011434481783357141, -0.0078039387061703035, 0.0401761770089912,
    -0.035300685361534516, -0.00010352169015720728, 0.0, 0.0048429060012226393,
    -0.004421628723515118, -1.1770888489239871E-5, 0.00094453662973384325,
    0.0011878922635308313, -0.0095046860602438655, 0.037542072616071238,
    -0.039295727814625439, -0.00016467428301353455, 0.0, 0.005987006717235,
    -0.0061505759056418863, -2.1035254999411158E-5, 0.00091716878475691342,
    0.0011912658049384594, -0.01111986880888134, 0.033669554571301968,
    -0.041433198448315854, -0.00026950643131986516, 0.0, 0.00692632074987407,
    -0.0079430910275364534, -3.6711018305390848E-5, 0.00081674138386906279,
    0.0011704175763008568, -0.012654925863460518, 0.029468311129123081,
    -0.041868716552104321, -0.00042112234888680477, 0.0, 0.0076593329913996963,
    -0.00971897451281721, -6.1090607957709023E-5, 0.00064938830542570825,
    0.0011372333641091216, -0.014114591733434101, 0.025484039012415069,
    -0.040804892537124514, -0.00061678702026516654, 0.0, 0.0082049716994792733,
    -0.01140904630781259, -9.621210676253911E-5, 0.0004234631537616511,
    0.0010996549666288814, -0.01550305918633214, 0.022004664482222415,
    -0.038477622702890478, -0.00084930644176672637, 0.0, 0.0085919231511164072,
    -0.012956473101216526, -0.00014367324314189123, 0.00014890838604834564,
    0.0010626319711789308, -0.016824106212107545, 0.019144919197986637,
    -0.035142704197345838, -0.0011085037444974752, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00030054479102572547,
    0.00049767135583767474, -0.0021060467935265117, 0.023116544038926289,
    0.011176150484746518, -0.00015990468077679311, -0.00020472360440944681, -0.0,
    0.00086250459888361885, 0.00051992442604286435, -5.8493716335300836E-6,
    -0.00055357584434958845, 0.00082582972575257027, -0.0040963740802913793,
    0.0351884546314794, 0.020755271773573836, -0.00022930166594377192,
    -0.0006031382673933989, -0.0, 0.0021306025281304327, 0.0014745525426902745,
    -1.2527320172892051E-5, -0.00074557056444952052, 0.0010258881719512614,
    -0.0059814644588271574, 0.039872588438262253, 0.028540115168772581,
    -0.00019211696170261014, -0.0011851716423019643, -0.0, 0.0035075992244199615,
    0.0027713681646644862, -1.46882765012302E-5, -0.0008676565971343248,
    0.0011334747275251506, -0.0077700772574709181, 0.039937891366846612,
    0.034434766523231866, -4.9907041550486245E-5, -0.0019415513939444267, -0.0,
    0.0048155393478105258, 0.004315397802002437, -7.34214183640527E-6,
    -0.00091534992019124913, 0.0011775529445634482, -0.0094694972435115515,
    0.037387902246241632, 0.038434999109990681, 0.00018567409305926037,
    -0.0028636709460735806, -0.0, 0.00596046391467955, 0.0060134989801012458,
    1.3772680035192538E-5, -0.00088814905894720657, 0.0011805616857412788,
    -0.011085798160126016, 0.033602932633910773, 0.040616087041396992,
    0.00049778776367507334, -0.0039434810125758141, -0.0, 0.0069047842642461343,
    0.0077779949224503573, 5.2013988864612053E-5, -0.00078902133406024972,
    0.0011591169843456447, -0.012624091237964225, 0.029479801837986826,
    0.0411189906789786, 0.00086752465064485261, -0.0051734045321709405, -0.0,
    0.0076463100523052868, 0.00952959503961538, 0.00010978417410949378,
    -0.00062381636303371216, 0.0011249641755140449, -0.014088743071422632,
    0.025556864775857654, 0.040135731467599592, 0.0012758223267157289,
    -0.0065462715759112581, -0.0, 0.00820303525992785, 0.011199579034205169,
    0.0001885537429421543, -0.00040064012777111304, 0.0010859803475433754,
    -0.015483556773029566, 0.0221188082258435, 0.0378946723419464,
    0.0017046117505578507, -0.0080552705112773917, -0.0, 0.0086026269302377691,
    0.012731255590154726, 0.00028892914897577377, -0.000129220009118365,
    0.0010471094052040082, -0.016811916276412941, 0.019280023927169761,
    0.034646313177504842, 0.002137481497047595, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572547, -0.00049767135583767474, 0.0021060467935265117,
    -0.023116544038926289, -0.011176150484746518, 0.00015990468077679311, 0.0,
    -0.00086250459888361885, -0.00051992442604286435, 5.8493716335300836E-6,
    0.00055357584434958845, -0.00082582972575257027, 0.0040963740802913793,
    -0.0351884546314794, -0.020755271773573836, 0.00022930166594377192, 0.0,
    -0.0021306025281304327, -0.0014745525426902745, 1.2527320172892051E-5,
    0.00074557056444952052, -0.0010258881719512614, 0.0059814644588271574,
    -0.039872588438262253, -0.028540115168772581, 0.00019211696170261014, 0.0,
    -0.0035075992244199615, -0.0027713681646644862, 1.46882765012302E-5,
    0.0008676565971343248, -0.0011334747275251506, 0.0077700772574709181,
    -0.039937891366846612, -0.034434766523231866, 4.9907041550486245E-5, 0.0,
    -0.0048155393478105258, -0.004315397802002437, 7.34214183640527E-6,
    0.00091534992019124913, -0.0011775529445634482, 0.0094694972435115515,
    -0.037387902246241632, -0.038434999109990681, -0.00018567409305926037, 0.0,
    -0.00596046391467955, -0.0060134989801012458, -1.3772680035192538E-5,
    0.00088814905894720657, -0.0011805616857412788, 0.011085798160126016,
    -0.033602932633910773, -0.040616087041396992, -0.00049778776367507334, 0.0,
    -0.0069047842642461343, -0.0077779949224503573, -5.2013988864612053E-5,
    0.00078902133406024972, -0.0011591169843456447, 0.012624091237964225,
    -0.029479801837986826, -0.0411189906789786, -0.00086752465064485261, 0.0,
    -0.0076463100523052868, -0.00952959503961538, -0.00010978417410949378,
    0.00062381636303371216, -0.0011249641755140449, 0.014088743071422632,
    -0.025556864775857654, -0.040135731467599592, -0.0012758223267157289, 0.0,
    -0.00820303525992785, -0.011199579034205169, -0.0001885537429421543,
    0.00040064012777111304, -0.0010859803475433754, 0.015483556773029566,
    -0.0221188082258435, -0.0378946723419464, -0.0017046117505578507, 0.0,
    -0.0086026269302377691, -0.012731255590154726, -0.00028892914897577377,
    0.000129220009118365, -0.0010471094052040082, 0.016811916276412941,
    -0.019280023927169761, -0.034646313177504842, -0.002137481497047595, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0020445512957285371,
    0.0014603487861040304, 4.9246767934457634E-6, -0.0052868326178782156,
    -0.0020754199270452173, 0.015163628780498446, 3.1616010707720426E-7, -0.0,
    -0.00019811352068166364, -9.73333699342812E-5, 0.00066585862709166957,
    -0.0040091552269349209, 0.0028909658887442155, 6.5614497023245073E-6,
    -0.0080792362290577815, -0.0038844512459874081, 0.026788702408483002,
    6.8512917620797536E-7, -0.0, -0.00049104314225850254,
    -0.00027751213812133571, 0.0018419406261771351, -0.0058989572722036735,
    0.0042850903886228146, 6.1601073524460959E-6, -0.0091991288332427812,
    -0.0053836032115810945, 0.035691534155111788, 9.51595524168609E-7, -0.0,
    -0.00081150591943761959, -0.00052435232813021957, 0.0034085439914897236,
    -0.0077185036154530772, 0.0056372660414857906, 4.6396980079752364E-6,
    -0.00926906335060941, -0.006548320744319591, 0.042501234100522735,
    1.0377937756639665E-6, -0.0, -0.0011189252136054833, -0.00082088448415742132,
    0.0052736567007514515, -0.0094716827009443637, 0.0069435063749424446,
    2.6414509523473936E-6, -0.008739896629381582, -0.00737143213587389,
    0.047702538425699506, 9.1853767957218194E-7, -0.0, -0.0013916387797655108,
    -0.0011501728132765291, 0.0073666001295169623, -0.011161718745088724,
    0.008201241533242561, 5.8494966353777778E-7, -0.00792273074079747,
    -0.007861076035806859, 0.051668868765490657, 6.01743722369558E-7, -0.0,
    -0.001620703686020732, -0.0014960212712305325, 0.0096331287280922023,
    -0.012791205168029366, 0.0094091464493969573, -1.2790233473825457E-6,
    -0.0070202354586047528, -0.0080382793893777667, 0.054687847403532837,
    1.1391978754040816E-7, -0.0, -0.001805191914282023, -0.0018435530683128011,
    0.012031653450661765, -0.01436216724881885, 0.010566918108659434,
    -2.8223985500875043E-6, -0.0061546448498688575, -0.007934340486205024,
    0.056980982028061261, -5.1013685987928413E-7, -0.0, -0.0019487749913619972,
    -0.0021796573224240928, 0.014530331906291044, -0.015876144576630242,
    0.011675045183589609, -4.0018112448208258E-6, -0.0053912134366169567,
    -0.0075881528377809079, 0.058718842971069225, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020445512957285371,
    -0.0014603487861040304, -4.9246767934457634E-6, 0.0052868326178782156,
    0.0020754199270452173, -0.015163628780498446, 0.0, 0.00019811352068166364,
    9.73333699342812E-5, -0.00066585862709166957, 0.0040091552269349209,
    -0.0028909658887442155, -6.5614497023245073E-6, 0.0080792362290577815,
    0.0038844512459874081, -0.026788702408483002, 0.0, 0.00049104314225850254,
    0.00027751213812133571, -0.0018419406261771351, 0.0058989572722036735,
    -0.0042850903886228146, -6.1601073524460959E-6, 0.0091991288332427812,
    0.0053836032115810945, -0.035691534155111788, 0.0, 0.00081150591943761959,
    0.00052435232813021957, -0.0034085439914897236, 0.0077185036154530772,
    -0.0056372660414857906, -4.6396980079752364E-6, 0.00926906335060941,
    0.006548320744319591, -0.042501234100522735, 0.0, 0.0011189252136054833,
    0.00082088448415742132, -0.0052736567007514515, 0.0094716827009443637,
    -0.0069435063749424446, -2.6414509523473936E-6, 0.008739896629381582,
    0.00737143213587389, -0.047702538425699506, 0.0, 0.0013916387797655108,
    0.0011501728132765291, -0.0073666001295169623, 0.011161718745088724,
    -0.008201241533242561, -5.8494966353777778E-7, 0.00792273074079747,
    0.007861076035806859, -0.051668868765490657, 0.0, 0.001620703686020732,
    0.0014960212712305325, -0.0096331287280922023, 0.012791205168029366,
    -0.0094091464493969573, 1.2790233473825457E-6, 0.0070202354586047528,
    0.0080382793893777667, -0.054687847403532837, 0.0, 0.001805191914282023,
    0.0018435530683128011, -0.012031653450661765, 0.01436216724881885,
    -0.010566918108659434, 2.8223985500875043E-6, 0.0061546448498688575,
    0.007934340486205024, -0.056980982028061261, 0.0, 0.0019487749913619972,
    0.0021796573224240928, -0.014530331906291044, 0.015876144576630242,
    -0.011675045183589609, 4.0018112448208258E-6, 0.0053912134366169567,
    0.0075881528377809079, -0.058718842971069225, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0020430568849590363, -0.0014846744549160563,
    -7.0936716057342316E-6, 0.0051391900270571448, -0.0021227702215873057,
    0.015228232305159621, -5.1746825674618411E-7, -0.0, 0.00019360954683992086,
    -9.8951619720029927E-5, 0.00066903596330777568, -0.0040067314306774949,
    -0.0029322591857517642, -1.0565746060026215E-5, 0.0078884598525309352,
    -0.0039509928253638827, 0.026917231873970968, -1.25018041672658E-6, -0.0,
    0.0004813724987437641, -0.0002812123096721656, 0.0018515897913409906,
    -0.0058959962902359435, -0.00433805660413819, -1.1566011819059168E-5,
    0.00901826988341082, -0.0054509447270126056, 0.03588820965614524,
    -1.99674342474268E-6, -0.0, 0.00079779982914969841, -0.000529877384341185,
    0.0034281815934806724, -0.0077152543580130614, -0.0056981223890151169,
    -1.0967109079724052E-5, 0.0091195753483278869, -0.00660567593380442,
    0.04277015614884281, -2.6308219371928471E-6, -0.0, 0.0011028937830708171,
    -0.0008275864795065065, 0.005306950518510354, -0.0094682805098512471,
    -0.0070095628750181035, -9.4049919993817815E-6, 0.0086253321268044067,
    -0.0074136435021352051, 0.048045444848981857, -3.0797420946197447E-6, -0.0,
    0.0013749180814484161, -0.0011572507586087781, 0.00741723100352391,
    -0.011158213201939327, -0.00827058862369585, -7.3245584742921849E-6,
    0.0078377590270683143, -0.0078869236468970261, 0.052084536642155926,
    -3.3076191174553684E-6, -0.0, 0.0016045634974302969, -0.001502682321689071,
    0.0097046471474189055, -0.012787584797297882, -0.009480426545954863,
    -5.0236620287564976E-6, 0.0069562410011868329, -0.0080491061052958713,
    0.055172377151487921, -3.3026429098114517E-6, -0.0, 0.0017904596235921708,
    -0.0018491127346458545, 0.012127361717645797, -0.014358380565562009,
    -0.010639161635940208, -2.6918556487285848E-6, 0.0061029256813059174,
    -0.0079329836605401376, 0.057528472990236564, -3.0679042907758847E-6, -0.0,
    0.0019358763409865634, -0.0021835932805221218, 0.014653203386246897,
    -0.01587211736084377, -0.01174755497429808, -4.42337866151435E-7,
    0.00534457038431273, -0.007578149996654163, 0.059322164719128163, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020430568849590363, 0.0014846744549160563, 7.0936716057342316E-6,
    -0.0051391900270571448, 0.0021227702215873057, -0.015228232305159621, 0.0,
    -0.00019360954683992086, 9.8951619720029927E-5, -0.00066903596330777568,
    0.0040067314306774949, 0.0029322591857517642, 1.0565746060026215E-5,
    -0.0078884598525309352, 0.0039509928253638827, -0.026917231873970968, 0.0,
    -0.0004813724987437641, 0.0002812123096721656, -0.0018515897913409906,
    0.0058959962902359435, 0.00433805660413819, 1.1566011819059168E-5,
    -0.00901826988341082, 0.0054509447270126056, -0.03588820965614524, 0.0,
    -0.00079779982914969841, 0.000529877384341185, -0.0034281815934806724,
    0.0077152543580130614, 0.0056981223890151169, 1.0967109079724052E-5,
    -0.0091195753483278869, 0.00660567593380442, -0.04277015614884281, 0.0,
    -0.0011028937830708171, 0.0008275864795065065, -0.005306950518510354,
    0.0094682805098512471, 0.0070095628750181035, 9.4049919993817815E-6,
    -0.0086253321268044067, 0.0074136435021352051, -0.048045444848981857, 0.0,
    -0.0013749180814484161, 0.0011572507586087781, -0.00741723100352391,
    0.011158213201939327, 0.00827058862369585, 7.3245584742921849E-6,
    -0.0078377590270683143, 0.0078869236468970261, -0.052084536642155926, 0.0,
    -0.0016045634974302969, 0.001502682321689071, -0.0097046471474189055,
    0.012787584797297882, 0.009480426545954863, 5.0236620287564976E-6,
    -0.0069562410011868329, 0.0080491061052958713, -0.055172377151487921, 0.0,
    -0.0017904596235921708, 0.0018491127346458545, -0.012127361717645797,
    0.014358380565562009, 0.010639161635940208, 2.6918556487285848E-6,
    -0.0061029256813059174, 0.0079329836605401376, -0.057528472990236564, 0.0,
    -0.0019358763409865634, 0.0021835932805221218, -0.014653203386246897,
    0.01587211736084377, 0.01174755497429808, 4.42337866151435E-7,
    -0.00534457038431273, 0.007578149996654163, -0.059322164719128163, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0021016480453829815,
    0.0014857887933183286, 4.7070151263154063E-6, -0.0050961555194273559,
    -0.0020754929921346357, -0.015462266265499226, 3.0426878718878496E-7, -0.0,
    -0.00019216872658156067, -9.73459460026197E-5, -0.0006792751071504849,
    -0.0041074683619141631, 0.0029340512081696577, 6.3057460452133884E-6,
    -0.00782907896809333, -0.0038849506557918018, -0.027331354583334473,
    6.6273426813855175E-7, -0.0, -0.00047814040658582105, -0.000277566493848083,
    -0.0018802229105924365, -0.0060264210814452886, 0.0043402263594654331,
    5.9587145352081763E-6, -0.0089598311740056828, -0.0053848318467642564,
    -0.036451644592615427, 9.2636180986459172E-7, -0.0, -0.0007930998311513511,
    -0.00052449064683289992, -0.0034822500476397213, -0.0078659750107290677,
    0.0057004858091328926, 4.5303525006595133E-6, -0.0090720820218160424,
    -0.0065504901027000958, -0.04346807648358772, 1.0194144264559595E-6, -0.0,
    -0.0010974076290702971, -0.00082115681443972331, -0.0053930322171731326,
    -0.0096322567462445857, 0.00701202851618736, 2.6300941233486434E-6,
    -0.0085934122806193176, -0.0073746438770505617, -0.048873310311435589,
    9.1637309261321547E-7, -0.0, -0.0013694590279160136, -0.001150631492424329,
    -0.0075418405117768745, -0.011330203401756304, 0.0082731347444936279,
    6.61013790805109E-7, -0.00782228984031321, -0.0078653210901301167,
    -0.053043720345121143, 6.2369573871460237E-7, -0.0, -0.0015999229352117708,
    -0.0014967156366828343, -0.0098744448046202624, -0.012963718195152128,
    0.0094830801904353113, -1.1328950919024408E-6, -0.0069556646472008427,
    -0.0080434495506573524, -0.056266866774456553, 1.6606812914153581E-7, -0.0,
    -0.0017873120317849199, -0.001844524963056166, -0.012349220884839871,
    -0.014535826846399721, 0.010641980597964829, -2.6245895611173081E-6,
    -0.0061142707936579534, -0.00794024786087918, -0.058762467425333663,
    -4.2346592189730975E-7, -0.0, -0.0019347286197374006, -0.0021809376864936609,
    -0.014934176702927581, -0.016048831986543406, 0.011750612976507079,
    -3.7686667972724733E-6, -0.0053642122139471319, -0.0075945532602473683,
    -0.060698414364158154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.00019216872658156067, 9.73459460026197E-5,
    0.0006792751071504849, 0.0041074683619141631, -0.0029340512081696577,
    -6.3057460452133884E-6, 0.00782907896809333, 0.0038849506557918018,
    0.027331354583334473, 0.0, 0.00047814040658582105, 0.000277566493848083,
    0.0018802229105924365, 0.0060264210814452886, -0.0043402263594654331,
    -5.9587145352081763E-6, 0.0089598311740056828, 0.0053848318467642564,
    0.036451644592615427, 0.0, 0.0007930998311513511, 0.00052449064683289992,
    0.0034822500476397213, 0.0078659750107290677, -0.0057004858091328926,
    -4.5303525006595133E-6, 0.0090720820218160424, 0.0065504901027000958,
    0.04346807648358772, 0.0, 0.0010974076290702971, 0.00082115681443972331,
    0.0053930322171731326, 0.0096322567462445857, -0.00701202851618736,
    -2.6300941233486434E-6, 0.0085934122806193176, 0.0073746438770505617,
    0.048873310311435589, 0.0, 0.0013694590279160136, 0.001150631492424329,
    0.0075418405117768745, 0.011330203401756304, -0.0082731347444936279,
    -6.61013790805109E-7, 0.00782228984031321, 0.0078653210901301167,
    0.053043720345121143, 0.0, 0.0015999229352117708, 0.0014967156366828343,
    0.0098744448046202624, 0.012963718195152128, -0.0094830801904353113,
    1.1328950919024408E-6, 0.0069556646472008427, 0.0080434495506573524,
    0.056266866774456553, 0.0, 0.0017873120317849199, 0.001844524963056166,
    0.012349220884839871, 0.014535826846399721, -0.010641980597964829,
    2.6245895611173081E-6, 0.0061142707936579534, 0.00794024786087918,
    0.058762467425333663, 0.0, 0.0019347286197374006, 0.0021809376864936609,
    0.014934176702927581, 0.016048831986543406, -0.011750612976507079,
    3.7686667972724733E-6, 0.0053642122139471319, 0.0075945532602473683,
    0.060698414364158154, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021001536346134803, -0.0014592344477017574, -7.3113332728645879E-6,
    0.0053298671255080053, -0.0021228432866767255, -0.015397662740838059,
    -5.2935957663460309E-7, -0.0, 0.00019955434094002391, -9.8964195788368479E-5,
    -0.00067609777093437912, -0.0041050445656567363, -0.0028891738663263207,
    -1.082144971713733E-5, 0.00813861711349539, -0.0039514922351682781,
    -0.027202825117846524, -1.2725753247960032E-6, -0.0, 0.00049427523441644564,
    -0.00028126666539891307, -0.0018705737454285823, -0.0060234600994775568,
    -0.00428292063329557, -1.176740463629708E-5, 0.0092575675426479209,
    -0.00545217336219577, -0.036254969091582, -2.0219771390466966E-6, -0.0,
    0.000816205917435967, -0.00053001570304386553, -0.0034626124456487747,
    -0.00786272575328905, -0.0056349026213680133, -1.1076454587039766E-5,
    0.0093165566771212568, -0.0066078452921849284, -0.043199154435267666,
    -2.649201286400853E-6, -0.0, 0.0011244113676060037, -0.00082785880978880882,
    -0.0053597383994142336, -0.0096288545551514691, -0.0069410407337731853,
    -9.41634882838052E-6, 0.0087718164755666728, -0.007416855243311881,
    -0.048530403888153259, -3.0819066815787091E-6, -0.0, 0.0013970978332979137,
    -0.0011577094377565786, -0.00749120963776993, -0.011326697858606906,
    -0.00819869541244478, -7.24849434702484E-6, 0.0079381999275525764,
    -0.0078911687012202889, -0.0526280524684559, -3.2856671011103207E-6, -0.0,
    0.0016253442482392585, -0.0015033766871413736, -0.0098029263852935644,
    -0.012960097824420645, -0.0094064928049165039, -4.8775337732763766E-6,
    0.0070208118125907448, -0.0080542762665754622, -0.0557823370265015,
    -3.25049456821032E-6, -0.0, 0.0018083395060892744, -0.0018500846293892205,
    -0.012253512617855846, -0.014532040163142882, -0.010564099146634807,
    -2.4940466597583703E-6, 0.0061432997375168224, -0.0079388910352142985,
    -0.058214976463158388, -2.9812333527939047E-6, -0.0, 0.0019499227126111602,
    -0.0021848736445916912, -0.014811305222971737, -0.016044804770756937,
    -0.011671987181380605, -2.091934186030613E-7, 0.0053715716069825548,
    -0.0075845504191206286, -0.060095092616099251, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021001536346134803,
    0.0014592344477017574, 7.3113332728645879E-6, -0.0053298671255080053,
    0.0021228432866767255, 0.015397662740838059, 0.0, -0.00019955434094002391,
    9.8964195788368479E-5, 0.00067609777093437912, 0.0041050445656567363,
    0.0028891738663263207, 1.082144971713733E-5, -0.00813861711349539,
    0.0039514922351682781, 0.027202825117846524, 0.0, -0.00049427523441644564,
    0.00028126666539891307, 0.0018705737454285823, 0.0060234600994775568,
    0.00428292063329557, 1.176740463629708E-5, -0.0092575675426479209,
    0.00545217336219577, 0.036254969091582, 0.0, -0.000816205917435967,
    0.00053001570304386553, 0.0034626124456487747, 0.00786272575328905,
    0.0056349026213680133, 1.1076454587039766E-5, -0.0093165566771212568,
    0.0066078452921849284, 0.043199154435267666, 0.0, -0.0011244113676060037,
    0.00082785880978880882, 0.0053597383994142336, 0.0096288545551514691,
    0.0069410407337731853, 9.41634882838052E-6, -0.0087718164755666728,
    0.007416855243311881, 0.048530403888153259, 0.0, -0.0013970978332979137,
    0.0011577094377565786, 0.00749120963776993, 0.011326697858606906,
    0.00819869541244478, 7.24849434702484E-6, -0.0079381999275525764,
    0.0078911687012202889, 0.0526280524684559, 0.0, -0.0016253442482392585,
    0.0015033766871413736, 0.0098029263852935644, 0.012960097824420645,
    0.0094064928049165039, 4.8775337732763766E-6, -0.0070208118125907448,
    0.0080542762665754622, 0.0557823370265015, 0.0, -0.0018083395060892744,
    0.0018500846293892205, 0.012253512617855846, 0.014532040163142882,
    0.010564099146634807, 2.4940466597583703E-6, -0.0061432997375168224,
    0.0079388910352142985, 0.058214976463158388, 0.0, -0.0019499227126111602,
    0.0021848736445916912, 0.014811305222971737, 0.016044804770756937,
    0.011671987181380605, 2.091934186030613E-7, -0.0053715716069825548,
    0.0075845504191206286, 0.060095092616099251, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, 0.00030616429069496923, 0.00048221414518065164,
    0.0020535983066627917, 0.022397032944284023, -0.011382823490747531,
    -4.5300466257935429E-5, 0.00020111824649365363, -0.0, 0.00083519681622152143,
    -0.00052693283295635128, -1.4202292023779372E-6, 0.00056258770077962489,
    0.00080001208779628685, 0.0040222089662175116, 0.034075479854978247,
    -0.021043808615419376, -6.0914557418032596E-5, 0.00059482891125992249, -0.0,
    0.002062143106284854, -0.0014904815292193945, -3.3998696950912874E-6,
    0.00075646106685663085, 0.0009936379052814066, 0.0059054831078212966,
    0.038583750917710678, -0.028829764251451326, -7.1735836551568879E-5,
    0.0011726262150481637, -0.0, 0.0033929136972443439, -0.0027949836877214896,
    -6.2738005970893479E-6, 0.00087950249413920047, 0.0010977323314750806,
    0.0077041407928327083, 0.038610702862460149, -0.034678824448749805,
    -9.99582877310808E-5, 0.0019261216668453409, -0.0, 0.004654926481577208,
    -0.004343790695385528, -1.1349003863154811E-5, 0.00092769306525124055,
    0.0011404644798644031, 0.0094197723233186512, 0.036103268168904461,
    -0.038611763746433318, -0.00016194825176056761, 0.0028471204265186328, -0.0,
    0.0057572468853912514, -0.00604313701410948, -2.0579570862840042E-5,
    0.00090087854130221272, 0.0011436573271834541, 0.011054625516548585,
    0.03240359262632185, -0.040721182393318144, -0.00026717427891659415,
    0.0039276769289651285, -0.0, 0.006663765412963975, -0.0078054281883259,
    -3.6223635885386266E-5, 0.00080226872093682724, 0.0011234628800830127,
    0.012611407038876492, 0.028384129958974106, -0.041159175748152539,
    -0.00041844655161156453, 0.0051601319868246516, -0.0, 0.0073728135925645675,
    -0.009551887733299189, -6.0533070291468119E-5, 0.000637866685778655,
    0.0010912837713868075, 0.014093112150810589, 0.024568713767860097,
    -0.040124126137914662, -0.00061290951136036, 0.0065371345335159276, -0.0,
    0.0079023594828677816, -0.011214534686086311, -9.5503092630370968E-5,
    0.000415859234804783, 0.0010547464749837694, 0.015502888074725234,
    0.021234175454636881, -0.037847237535387088, -0.00084339143145200518, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00030616429069496923, -0.00048221414518065164, -0.0020535983066627917,
    -0.022397032944284023, 0.011382823490747531, 4.5300466257935429E-5, 0.0,
    -0.00083519681622152143, 0.00052693283295635128, 1.4202292023779372E-6,
    -0.00056258770077962489, -0.00080001208779628685, -0.0040222089662175116,
    -0.034075479854978247, 0.021043808615419376, 6.0914557418032596E-5, 0.0,
    -0.002062143106284854, 0.0014904815292193945, 3.3998696950912874E-6,
    -0.00075646106685663085, -0.0009936379052814066, -0.0059054831078212966,
    -0.038583750917710678, 0.028829764251451326, 7.1735836551568879E-5, 0.0,
    -0.0033929136972443439, 0.0027949836877214896, 6.2738005970893479E-6,
    -0.00087950249413920047, -0.0010977323314750806, -0.0077041407928327083,
    -0.038610702862460149, 0.034678824448749805, 9.99582877310808E-5, 0.0,
    -0.004654926481577208, 0.004343790695385528, 1.1349003863154811E-5,
    -0.00092769306525124055, -0.0011404644798644031, -0.0094197723233186512,
    -0.036103268168904461, 0.038611763746433318, 0.00016194825176056761, 0.0,
    -0.0057572468853912514, 0.00604313701410948, 2.0579570862840042E-5,
    -0.00090087854130221272, -0.0011436573271834541, -0.011054625516548585,
    -0.03240359262632185, 0.040721182393318144, 0.00026717427891659415, 0.0,
    -0.006663765412963975, 0.0078054281883259, 3.6223635885386266E-5,
    -0.00080226872093682724, -0.0011234628800830127, -0.012611407038876492,
    -0.028384129958974106, 0.041159175748152539, 0.00041844655161156453, 0.0,
    -0.0073728135925645675, 0.009551887733299189, 6.0533070291468119E-5,
    -0.000637866685778655, -0.0010912837713868075, -0.014093112150810589,
    -0.024568713767860097, 0.040124126137914662, 0.00061290951136036, 0.0,
    -0.0079023594828677816, 0.011214534686086311, 9.5503092630370968E-5,
    -0.000415859234804783, -0.0010547464749837694, -0.015502888074725234,
    -0.021234175454636881, 0.037847237535387088, 0.00084339143145200518, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.00030623942171196546,
    -0.00047731536664842887, -0.002066526813039662, -0.022172426283366305,
    -0.011387616330349713, 0.00015666644814812009, -0.0002022625931303291, -0.0,
    -0.00082774518149017452, -0.000529592610445747, 5.7389299890772109E-6,
    0.00056396725231741681, -0.0007922466192322238, -0.0040450830466660882,
    -0.033768034595554677, -0.021141612605666528, 0.00022480793913855988,
    -0.0005979618330017876, -0.0, -0.0020455667486544552, -0.0015016832971963196,
    1.2281171297667541E-5, 0.00075945441536740617, -0.000984370751728749,
    -0.0059353031721315549, -0.038284778592207587, -0.029063239819559016,
    0.0001877515826036143, -0.0011782958644571567, -0.0, -0.0033690819832402682,
    -0.0028218463087974089, 1.4332584980973915E-5, 0.00088370610807833518,
    -0.0010877588806645171, -0.0077380022415320946, -0.038372417220315584,
    -0.035056627436016605, 4.634363912435984E-5, -0.0019345945407556694, -0.0,
    -0.0046275598281650945, -0.0043932358301320314, 6.9202572103202192E-6,
    0.00093219348467385541, -0.0011301251608970195, -0.0094549611400509687,
    -0.035949097799074868, -0.039118963178182836, -0.00018840012431222731,
    -0.0028584044719204794, -0.0, -0.0057307040828358021, -0.0061209378716336575,
    -1.4228364171763658E-5, 0.00090443930240191118, -0.0011329532079862731,
    -0.011088696165303913, -0.032336970688930662, -0.04132810309639473,
    -0.00050011991607834452, -0.0039415515091365486, -0.0, -0.00664222892733604,
    -0.0079156577616609179, -5.2501371284616649E-5, 0.00080349399699248961,
    -0.0011121622881278001, -0.012642241664372788, -0.028395620667837858,
    -0.0418285314829304, -0.00087020044792009317, -0.0051761828183116993, -0.0,
    -0.0073597906534701579, -0.00969668181913341, -0.00011034171177573473,
    0.00063533798268077, -0.0010790145827917301, -0.01411896081282206,
    -0.024641539531302686, -0.040816497866809458, -0.0012796998356205361,
    -0.00655479171491834, -0.0, -0.0079004230433163576, -0.011394090655931458,
    -0.00018926275707432255, 0.00040824404672798584, -0.0010410718558982628,
    -0.01552239048802781, -0.02134831919825797, -0.0385250575094498,
    -0.0017105267608725728, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.00082774518149017452, 0.000529592610445747,
    -5.7389299890772109E-6, -0.00056396725231741681, 0.0007922466192322238,
    0.0040450830466660882, 0.033768034595554677, 0.021141612605666528,
    -0.00022480793913855988, 0.0, 0.0020455667486544552, 0.0015016832971963196,
    -1.2281171297667541E-5, -0.00075945441536740617, 0.000984370751728749,
    0.0059353031721315549, 0.038284778592207587, 0.029063239819559016,
    -0.0001877515826036143, 0.0, 0.0033690819832402682, 0.0028218463087974089,
    -1.4332584980973915E-5, -0.00088370610807833518, 0.0010877588806645171,
    0.0077380022415320946, 0.038372417220315584, 0.035056627436016605,
    -4.634363912435984E-5, 0.0, 0.0046275598281650945, 0.0043932358301320314,
    -6.9202572103202192E-6, -0.00093219348467385541, 0.0011301251608970195,
    0.0094549611400509687, 0.035949097799074868, 0.039118963178182836,
    0.00018840012431222731, 0.0, 0.0057307040828358021, 0.0061209378716336575,
    1.4228364171763658E-5, -0.00090443930240191118, 0.0011329532079862731,
    0.011088696165303913, 0.032336970688930662, 0.04132810309639473,
    0.00050011991607834452, 0.0, 0.00664222892733604, 0.0079156577616609179,
    5.2501371284616649E-5, -0.00080349399699248961, 0.0011121622881278001,
    0.012642241664372788, 0.028395620667837858, 0.0418285314829304,
    0.00087020044792009317, 0.0, 0.0073597906534701579, 0.00969668181913341,
    0.00011034171177573473, -0.00063533798268077, 0.0010790145827917301,
    0.01411896081282206, 0.024641539531302686, 0.040816497866809458,
    0.0012796998356205361, 0.0, 0.0079004230433163576, 0.011394090655931458,
    0.00018926275707432255, -0.00040824404672798584, 0.0010410718558982628,
    0.01552239048802781, 0.02134831919825797, 0.0385250575094498,
    0.0017105267608725728, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.00031185892138120834, -0.00050257013436989741, 0.0021189752999033816,
    -0.023341150699844011, 0.011594289336350715, 4.8538698886608567E-5,
    0.00020586795104612229, -0.0, -0.00086995623361496588,
    0.00053660101735923357, 1.5306708468308147E-6, -0.00057297910874745152,
    -0.00083359519431663322, 0.004119248160739955, -0.035495899890902981,
    0.021430149447512051, 6.54082842232448E-5, 0.00060627118913526379, -0.0,
    -0.0021471788857608319, 0.0015176122837254379, 3.6460185703158066E-6,
    -0.00077034491777451411, -0.001035155325503919, 0.0060112845231374149,
    -0.040171560763765359, 0.029352888902237733, 7.6101215650564892E-5,
    0.0011908412917109568, -0.0, -0.0035314309384240376, 0.0028454618318544097,
    6.6294921173456436E-6, -0.00089555200508320781, -0.0011434481783357141,
    0.0078039387061703035, -0.0401761770089912, 0.035300685361534516,
    0.00010352169015720728, 0.0019500242678547547, -0.0, -0.0048429060012226393,
    0.004421628723515118, 1.1770888489239871E-5, -0.00094453662973384325,
    -0.0011878922635308313, 0.0095046860602438655, -0.037542072616071238,
    0.039295727814625439, 0.00016467428301353455, 0.0028749549914754268, -0.0,
    -0.005987006717235, 0.0061505759056418863, 2.1035254999411158E-5,
    -0.00091716878475691342, -0.0011912658049384594, 0.01111986880888134,
    -0.033669554571301968, 0.041433198448315854, 0.00026950643131986516,
    0.0039573555927472333, -0.0, -0.00692632074987407, 0.0079430910275364534,
    3.6711018305390848E-5, -0.00081674138386906279, -0.0011704175763008568,
    0.012654925863460518, -0.029468311129123081, 0.041868716552104321,
    0.00042112234888680477, 0.0051894553636579873, -0.0, -0.0076593329913996963,
    0.00971897451281721, 6.1090607957709023E-5, -0.00064938830542570825,
    -0.0011372333641091216, 0.014114591733434101, -0.025484039012415069,
    0.040804892537124514, 0.00061678702026516654, 0.0065639287573136694, -0.0,
    -0.0082049716994792733, 0.01140904630781259, 9.621210676253911E-5,
    -0.0004234631537616511, -0.0010996549666288814, 0.01550305918633214,
    -0.022004664482222415, 0.038477622702890478, 0.00084930644176672637, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120834, 0.00050257013436989741, -0.0021189752999033816,
    0.023341150699844011, -0.011594289336350715, -4.8538698886608567E-5, 0.0,
    0.00086995623361496588, -0.00053660101735923357, -1.5306708468308147E-6,
    0.00057297910874745152, 0.00083359519431663322, -0.004119248160739955,
    0.035495899890902981, -0.021430149447512051, -6.54082842232448E-5, 0.0,
    0.0021471788857608319, -0.0015176122837254379, -3.6460185703158066E-6,
    0.00077034491777451411, 0.001035155325503919, -0.0060112845231374149,
    0.040171560763765359, -0.029352888902237733, -7.6101215650564892E-5, 0.0,
    0.0035314309384240376, -0.0028454618318544097, -6.6294921173456436E-6,
    0.00089555200508320781, 0.0011434481783357141, -0.0078039387061703035,
    0.0401761770089912, -0.035300685361534516, -0.00010352169015720728, 0.0,
    0.0048429060012226393, -0.004421628723515118, -1.1770888489239871E-5,
    0.00094453662973384325, 0.0011878922635308313, -0.0095046860602438655,
    0.037542072616071238, -0.039295727814625439, -0.00016467428301353455, 0.0,
    0.005987006717235, -0.0061505759056418863, -2.1035254999411158E-5,
    0.00091716878475691342, 0.0011912658049384594, -0.01111986880888134,
    0.033669554571301968, -0.041433198448315854, -0.00026950643131986516, 0.0,
    0.00692632074987407, -0.0079430910275364534, -3.6711018305390848E-5,
    0.00081674138386906279, 0.0011704175763008568, -0.012654925863460518,
    0.029468311129123081, -0.041868716552104321, -0.00042112234888680477, 0.0,
    0.0076593329913996963, -0.00971897451281721, -6.1090607957709023E-5,
    0.00064938830542570825, 0.0011372333641091216, -0.014114591733434101,
    0.025484039012415069, -0.040804892537124514, -0.00061678702026516654, 0.0,
    0.0082049716994792733, -0.01140904630781259, -9.621210676253911E-5,
    0.0004234631537616511, 0.0010996549666288814, -0.01550305918633214,
    0.022004664482222415, -0.038477622702890478, -0.00084930644176672637, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00030054479102572547,
    0.00049767135583767474, -0.0021060467935265117, 0.023116544038926289,
    0.011176150484746518, -0.00015990468077679311, -0.00020472360440944681, -0.0,
    0.00086250459888361885, 0.00051992442604286435, -5.8493716335300836E-6,
    -0.00055357584434958845, 0.00082582972575257027, -0.0040963740802913793,
    0.0351884546314794, 0.020755271773573836, -0.00022930166594377192,
    -0.0006031382673933989, -0.0, 0.0021306025281304327, 0.0014745525426902745,
    -1.2527320172892051E-5, -0.00074557056444952052, 0.0010258881719512614,
    -0.0059814644588271574, 0.039872588438262253, 0.028540115168772581,
    -0.00019211696170261014, -0.0011851716423019643, -0.0, 0.0035075992244199615,
    0.0027713681646644862, -1.46882765012302E-5, -0.0008676565971343248,
    0.0011334747275251506, -0.0077700772574709181, 0.039937891366846612,
    0.034434766523231866, -4.9907041550486245E-5, -0.0019415513939444267, -0.0,
    0.0048155393478105258, 0.004315397802002437, -7.34214183640527E-6,
    -0.00091534992019124913, 0.0011775529445634482, -0.0094694972435115515,
    0.037387902246241632, 0.038434999109990681, 0.00018567409305926037,
    -0.0028636709460735806, -0.0, 0.00596046391467955, 0.0060134989801012458,
    1.3772680035192538E-5, -0.00088814905894720657, 0.0011805616857412788,
    -0.011085798160126016, 0.033602932633910773, 0.040616087041396992,
    0.00049778776367507334, -0.0039434810125758141, -0.0, 0.0069047842642461343,
    0.0077779949224503573, 5.2013988864612053E-5, -0.00078902133406024972,
    0.0011591169843456447, -0.012624091237964225, 0.029479801837986826,
    0.0411189906789786, 0.00086752465064485261, -0.0051734045321709405, -0.0,
    0.0076463100523052868, 0.00952959503961538, 0.00010978417410949378,
    -0.00062381636303371216, 0.0011249641755140449, -0.014088743071422632,
    0.025556864775857654, 0.040135731467599592, 0.0012758223267157289,
    -0.0065462715759112581, -0.0, 0.00820303525992785, 0.011199579034205169,
    0.0001885537429421543, -0.00040064012777111304, 0.0010859803475433754,
    -0.015483556773029566, 0.0221188082258435, 0.0378946723419464,
    0.0017046117505578507, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, -0.00086250459888361885,
    -0.00051992442604286435, 5.8493716335300836E-6, 0.00055357584434958845,
    -0.00082582972575257027, 0.0040963740802913793, -0.0351884546314794,
    -0.020755271773573836, 0.00022930166594377192, 0.0, -0.0021306025281304327,
    -0.0014745525426902745, 1.2527320172892051E-5, 0.00074557056444952052,
    -0.0010258881719512614, 0.0059814644588271574, -0.039872588438262253,
    -0.028540115168772581, 0.00019211696170261014, 0.0, -0.0035075992244199615,
    -0.0027713681646644862, 1.46882765012302E-5, 0.0008676565971343248,
    -0.0011334747275251506, 0.0077700772574709181, -0.039937891366846612,
    -0.034434766523231866, 4.9907041550486245E-5, 0.0, -0.0048155393478105258,
    -0.004315397802002437, 7.34214183640527E-6, 0.00091534992019124913,
    -0.0011775529445634482, 0.0094694972435115515, -0.037387902246241632,
    -0.038434999109990681, -0.00018567409305926037, 0.0, -0.00596046391467955,
    -0.0060134989801012458, -1.3772680035192538E-5, 0.00088814905894720657,
    -0.0011805616857412788, 0.011085798160126016, -0.033602932633910773,
    -0.040616087041396992, -0.00049778776367507334, 0.0, -0.0069047842642461343,
    -0.0077779949224503573, -5.2013988864612053E-5, 0.00078902133406024972,
    -0.0011591169843456447, 0.012624091237964225, -0.029479801837986826,
    -0.0411189906789786, -0.00086752465064485261, 0.0, -0.0076463100523052868,
    -0.00952959503961538, -0.00010978417410949378, 0.00062381636303371216,
    -0.0011249641755140449, 0.014088743071422632, -0.025556864775857654,
    -0.040135731467599592, -0.0012758223267157289, 0.0, -0.00820303525992785,
    -0.011199579034205169, -0.0001885537429421543, 0.00040064012777111304,
    -0.0010859803475433754, 0.015483556773029566, -0.0221188082258435,
    -0.0378946723419464, -0.0017046117505578507, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0020445512957285371, 0.0014603487861040304,
    4.9246767934457634E-6, -0.0052868326178782156, -0.0020754199270452173,
    0.015163628780498446, 3.1616010707720426E-7, -0.0, -0.00019811352068166364,
    -9.73333699342812E-5, 0.00066585862709166957, -0.0040091552269349209,
    0.0028909658887442155, 6.5614497023245073E-6, -0.0080792362290577815,
    -0.0038844512459874081, 0.026788702408483002, 6.8512917620797536E-7, -0.0,
    -0.00049104314225850254, -0.00027751213812133571, 0.0018419406261771351,
    -0.0058989572722036735, 0.0042850903886228146, 6.1601073524460959E-6,
    -0.0091991288332427812, -0.0053836032115810945, 0.035691534155111788,
    9.51595524168609E-7, -0.0, -0.00081150591943761959, -0.00052435232813021957,
    0.0034085439914897236, -0.0077185036154530772, 0.0056372660414857906,
    4.6396980079752364E-6, -0.00926906335060941, -0.006548320744319591,
    0.042501234100522735, 1.0377937756639665E-6, -0.0, -0.0011189252136054833,
    -0.00082088448415742132, 0.0052736567007514515, -0.0094716827009443637,
    0.0069435063749424446, 2.6414509523473936E-6, -0.008739896629381582,
    -0.00737143213587389, 0.047702538425699506, 9.1853767957218194E-7, -0.0,
    -0.0013916387797655108, -0.0011501728132765291, 0.0073666001295169623,
    -0.011161718745088724, 0.008201241533242561, 5.8494966353777778E-7,
    -0.00792273074079747, -0.007861076035806859, 0.051668868765490657,
    6.01743722369558E-7, -0.0, -0.001620703686020732, -0.0014960212712305325,
    0.0096331287280922023, -0.012791205168029366, 0.0094091464493969573,
    -1.2790233473825457E-6, -0.0070202354586047528, -0.0080382793893777667,
    0.054687847403532837, 1.1391978754040816E-7, -0.0, -0.001805191914282023,
    -0.0018435530683128011, 0.012031653450661765, -0.01436216724881885,
    0.010566918108659434, -2.8223985500875043E-6, -0.0061546448498688575,
    -0.007934340486205024, 0.056980982028061261, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.00019811352068166364, 9.73333699342812E-5,
    -0.00066585862709166957, 0.0040091552269349209, -0.0028909658887442155,
    -6.5614497023245073E-6, 0.0080792362290577815, 0.0038844512459874081,
    -0.026788702408483002, 0.0, 0.00049104314225850254, 0.00027751213812133571,
    -0.0018419406261771351, 0.0058989572722036735, -0.0042850903886228146,
    -6.1601073524460959E-6, 0.0091991288332427812, 0.0053836032115810945,
    -0.035691534155111788, 0.0, 0.00081150591943761959, 0.00052435232813021957,
    -0.0034085439914897236, 0.0077185036154530772, -0.0056372660414857906,
    -4.6396980079752364E-6, 0.00926906335060941, 0.006548320744319591,
    -0.042501234100522735, 0.0, 0.0011189252136054833, 0.00082088448415742132,
    -0.0052736567007514515, 0.0094716827009443637, -0.0069435063749424446,
    -2.6414509523473936E-6, 0.008739896629381582, 0.00737143213587389,
    -0.047702538425699506, 0.0, 0.0013916387797655108, 0.0011501728132765291,
    -0.0073666001295169623, 0.011161718745088724, -0.008201241533242561,
    -5.8494966353777778E-7, 0.00792273074079747, 0.007861076035806859,
    -0.051668868765490657, 0.0, 0.001620703686020732, 0.0014960212712305325,
    -0.0096331287280922023, 0.012791205168029366, -0.0094091464493969573,
    1.2790233473825457E-6, 0.0070202354586047528, 0.0080382793893777667,
    -0.054687847403532837, 0.0, 0.001805191914282023, 0.0018435530683128011,
    -0.012031653450661765, 0.01436216724881885, -0.010566918108659434,
    2.8223985500875043E-6, 0.0061546448498688575, 0.007934340486205024,
    -0.056980982028061261, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020430568849590363, -0.0014846744549160563, -7.0936716057342316E-6,
    0.0051391900270571448, -0.0021227702215873057, 0.015228232305159621,
    -5.1746825674618411E-7, -0.0, 0.00019360954683992086, -9.8951619720029927E-5,
    0.00066903596330777568, -0.0040067314306774949, -0.0029322591857517642,
    -1.0565746060026215E-5, 0.0078884598525309352, -0.0039509928253638827,
    0.026917231873970968, -1.25018041672658E-6, -0.0, 0.0004813724987437641,
    -0.0002812123096721656, 0.0018515897913409906, -0.0058959962902359435,
    -0.00433805660413819, -1.1566011819059168E-5, 0.00901826988341082,
    -0.0054509447270126056, 0.03588820965614524, -1.99674342474268E-6, -0.0,
    0.00079779982914969841, -0.000529877384341185, 0.0034281815934806724,
    -0.0077152543580130614, -0.0056981223890151169, -1.0967109079724052E-5,
    0.0091195753483278869, -0.00660567593380442, 0.04277015614884281,
    -2.6308219371928471E-6, -0.0, 0.0011028937830708171, -0.0008275864795065065,
    0.005306950518510354, -0.0094682805098512471, -0.0070095628750181035,
    -9.4049919993817815E-6, 0.0086253321268044067, -0.0074136435021352051,
    0.048045444848981857, -3.0797420946197447E-6, -0.0, 0.0013749180814484161,
    -0.0011572507586087781, 0.00741723100352391, -0.011158213201939327,
    -0.00827058862369585, -7.3245584742921849E-6, 0.0078377590270683143,
    -0.0078869236468970261, 0.052084536642155926, -3.3076191174553684E-6, -0.0,
    0.0016045634974302969, -0.001502682321689071, 0.0097046471474189055,
    -0.012787584797297882, -0.009480426545954863, -5.0236620287564976E-6,
    0.0069562410011868329, -0.0080491061052958713, 0.055172377151487921,
    -3.3026429098114517E-6, -0.0, 0.0017904596235921708, -0.0018491127346458545,
    0.012127361717645797, -0.014358380565562009, -0.010639161635940208,
    -2.6918556487285848E-6, 0.0061029256813059174, -0.0079329836605401376,
    0.057528472990236564, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020430568849590363, 0.0014846744549160563, 7.0936716057342316E-6,
    -0.0051391900270571448, 0.0021227702215873057, -0.015228232305159621, 0.0,
    -0.00019360954683992086, 9.8951619720029927E-5, -0.00066903596330777568,
    0.0040067314306774949, 0.0029322591857517642, 1.0565746060026215E-5,
    -0.0078884598525309352, 0.0039509928253638827, -0.026917231873970968, 0.0,
    -0.0004813724987437641, 0.0002812123096721656, -0.0018515897913409906,
    0.0058959962902359435, 0.00433805660413819, 1.1566011819059168E-5,
    -0.00901826988341082, 0.0054509447270126056, -0.03588820965614524, 0.0,
    -0.00079779982914969841, 0.000529877384341185, -0.0034281815934806724,
    0.0077152543580130614, 0.0056981223890151169, 1.0967109079724052E-5,
    -0.0091195753483278869, 0.00660567593380442, -0.04277015614884281, 0.0,
    -0.0011028937830708171, 0.0008275864795065065, -0.005306950518510354,
    0.0094682805098512471, 0.0070095628750181035, 9.4049919993817815E-6,
    -0.0086253321268044067, 0.0074136435021352051, -0.048045444848981857, 0.0,
    -0.0013749180814484161, 0.0011572507586087781, -0.00741723100352391,
    0.011158213201939327, 0.00827058862369585, 7.3245584742921849E-6,
    -0.0078377590270683143, 0.0078869236468970261, -0.052084536642155926, 0.0,
    -0.0016045634974302969, 0.001502682321689071, -0.0097046471474189055,
    0.012787584797297882, 0.009480426545954863, 5.0236620287564976E-6,
    -0.0069562410011868329, 0.0080491061052958713, -0.055172377151487921, 0.0,
    -0.0017904596235921708, 0.0018491127346458545, -0.012127361717645797,
    0.014358380565562009, 0.010639161635940208, 2.6918556487285848E-6,
    -0.0061029256813059174, 0.0079329836605401376, -0.057528472990236564, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0021016480453829815,
    0.0014857887933183286, 4.7070151263154063E-6, -0.0050961555194273559,
    -0.0020754929921346357, -0.015462266265499226, 3.0426878718878496E-7, -0.0,
    -0.00019216872658156067, -9.73459460026197E-5, -0.0006792751071504849,
    -0.0041074683619141631, 0.0029340512081696577, 6.3057460452133884E-6,
    -0.00782907896809333, -0.0038849506557918018, -0.027331354583334473,
    6.6273426813855175E-7, -0.0, -0.00047814040658582105, -0.000277566493848083,
    -0.0018802229105924365, -0.0060264210814452886, 0.0043402263594654331,
    5.9587145352081763E-6, -0.0089598311740056828, -0.0053848318467642564,
    -0.036451644592615427, 9.2636180986459172E-7, -0.0, -0.0007930998311513511,
    -0.00052449064683289992, -0.0034822500476397213, -0.0078659750107290677,
    0.0057004858091328926, 4.5303525006595133E-6, -0.0090720820218160424,
    -0.0065504901027000958, -0.04346807648358772, 1.0194144264559595E-6, -0.0,
    -0.0010974076290702971, -0.00082115681443972331, -0.0053930322171731326,
    -0.0096322567462445857, 0.00701202851618736, 2.6300941233486434E-6,
    -0.0085934122806193176, -0.0073746438770505617, -0.048873310311435589,
    9.1637309261321547E-7, -0.0, -0.0013694590279160136, -0.001150631492424329,
    -0.0075418405117768745, -0.011330203401756304, 0.0082731347444936279,
    6.61013790805109E-7, -0.00782228984031321, -0.0078653210901301167,
    -0.053043720345121143, 6.2369573871460237E-7, -0.0, -0.0015999229352117708,
    -0.0014967156366828343, -0.0098744448046202624, -0.012963718195152128,
    0.0094830801904353113, -1.1328950919024408E-6, -0.0069556646472008427,
    -0.0080434495506573524, -0.056266866774456553, 1.6606812914153581E-7, -0.0,
    -0.0017873120317849199, -0.001844524963056166, -0.012349220884839871,
    -0.014535826846399721, 0.010641980597964829, -2.6245895611173081E-6,
    -0.0061142707936579534, -0.00794024786087918, -0.058762467425333663, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021016480453829815,
    -0.0014857887933183286, -4.7070151263154063E-6, 0.0050961555194273559,
    0.0020754929921346357, 0.015462266265499226, 0.0, 0.00019216872658156067,
    9.73459460026197E-5, 0.0006792751071504849, 0.0041074683619141631,
    -0.0029340512081696577, -6.3057460452133884E-6, 0.00782907896809333,
    0.0038849506557918018, 0.027331354583334473, 0.0, 0.00047814040658582105,
    0.000277566493848083, 0.0018802229105924365, 0.0060264210814452886,
    -0.0043402263594654331, -5.9587145352081763E-6, 0.0089598311740056828,
    0.0053848318467642564, 0.036451644592615427, 0.0, 0.0007930998311513511,
    0.00052449064683289992, 0.0034822500476397213, 0.0078659750107290677,
    -0.0057004858091328926, -4.5303525006595133E-6, 0.0090720820218160424,
    0.0065504901027000958, 0.04346807648358772, 0.0, 0.0010974076290702971,
    0.00082115681443972331, 0.0053930322171731326, 0.0096322567462445857,
    -0.00701202851618736, -2.6300941233486434E-6, 0.0085934122806193176,
    0.0073746438770505617, 0.048873310311435589, 0.0, 0.0013694590279160136,
    0.001150631492424329, 0.0075418405117768745, 0.011330203401756304,
    -0.0082731347444936279, -6.61013790805109E-7, 0.00782228984031321,
    0.0078653210901301167, 0.053043720345121143, 0.0, 0.0015999229352117708,
    0.0014967156366828343, 0.0098744448046202624, 0.012963718195152128,
    -0.0094830801904353113, 1.1328950919024408E-6, 0.0069556646472008427,
    0.0080434495506573524, 0.056266866774456553, 0.0, 0.0017873120317849199,
    0.001844524963056166, 0.012349220884839871, 0.014535826846399721,
    -0.010641980597964829, 2.6245895611173081E-6, 0.0061142707936579534,
    0.00794024786087918, 0.058762467425333663, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0021001536346134803, -0.0014592344477017574,
    -7.3113332728645879E-6, 0.0053298671255080053, -0.0021228432866767255,
    -0.015397662740838059, -5.2935957663460309E-7, -0.0, 0.00019955434094002391,
    -9.8964195788368479E-5, -0.00067609777093437912, -0.0041050445656567363,
    -0.0028891738663263207, -1.082144971713733E-5, 0.00813861711349539,
    -0.0039514922351682781, -0.027202825117846524, -1.2725753247960032E-6, -0.0,
    0.00049427523441644564, -0.00028126666539891307, -0.0018705737454285823,
    -0.0060234600994775568, -0.00428292063329557, -1.176740463629708E-5,
    0.0092575675426479209, -0.00545217336219577, -0.036254969091582,
    -2.0219771390466966E-6, -0.0, 0.000816205917435967, -0.00053001570304386553,
    -0.0034626124456487747, -0.00786272575328905, -0.0056349026213680133,
    -1.1076454587039766E-5, 0.0093165566771212568, -0.0066078452921849284,
    -0.043199154435267666, -2.649201286400853E-6, -0.0, 0.0011244113676060037,
    -0.00082785880978880882, -0.0053597383994142336, -0.0096288545551514691,
    -0.0069410407337731853, -9.41634882838052E-6, 0.0087718164755666728,
    -0.007416855243311881, -0.048530403888153259, -3.0819066815787091E-6, -0.0,
    0.0013970978332979137, -0.0011577094377565786, -0.00749120963776993,
    -0.011326697858606906, -0.00819869541244478, -7.24849434702484E-6,
    0.0079381999275525764, -0.0078911687012202889, -0.0526280524684559,
    -3.2856671011103207E-6, -0.0, 0.0016253442482392585, -0.0015033766871413736,
    -0.0098029263852935644, -0.012960097824420645, -0.0094064928049165039,
    -4.8775337732763766E-6, 0.0070208118125907448, -0.0080542762665754622,
    -0.0557823370265015, -3.25049456821032E-6, -0.0, 0.0018083395060892744,
    -0.0018500846293892205, -0.012253512617855846, -0.014532040163142882,
    -0.010564099146634807, -2.4940466597583703E-6, 0.0061432997375168224,
    -0.0079388910352142985, -0.058214976463158388, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, -0.00019955434094002391, 9.8964195788368479E-5,
    0.00067609777093437912, 0.0041050445656567363, 0.0028891738663263207,
    1.082144971713733E-5, -0.00813861711349539, 0.0039514922351682781,
    0.027202825117846524, 0.0, -0.00049427523441644564, 0.00028126666539891307,
    0.0018705737454285823, 0.0060234600994775568, 0.00428292063329557,
    1.176740463629708E-5, -0.0092575675426479209, 0.00545217336219577,
    0.036254969091582, 0.0, -0.000816205917435967, 0.00053001570304386553,
    0.0034626124456487747, 0.00786272575328905, 0.0056349026213680133,
    1.1076454587039766E-5, -0.0093165566771212568, 0.0066078452921849284,
    0.043199154435267666, 0.0, -0.0011244113676060037, 0.00082785880978880882,
    0.0053597383994142336, 0.0096288545551514691, 0.0069410407337731853,
    9.41634882838052E-6, -0.0087718164755666728, 0.007416855243311881,
    0.048530403888153259, 0.0, -0.0013970978332979137, 0.0011577094377565786,
    0.00749120963776993, 0.011326697858606906, 0.00819869541244478,
    7.24849434702484E-6, -0.0079381999275525764, 0.0078911687012202889,
    0.0526280524684559, 0.0, -0.0016253442482392585, 0.0015033766871413736,
    0.0098029263852935644, 0.012960097824420645, 0.0094064928049165039,
    4.8775337732763766E-6, -0.0070208118125907448, 0.0080542762665754622,
    0.0557823370265015, 0.0, -0.0018083395060892744, 0.0018500846293892205,
    0.012253512617855846, 0.014532040163142882, 0.010564099146634807,
    2.4940466597583703E-6, -0.0061432997375168224, 0.0079388910352142985,
    0.058214976463158388, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.00030616429069496923, 0.00048221414518065164, 0.0020535983066627917,
    0.022397032944284023, -0.011382823490747531, -4.5300466257935429E-5,
    0.00020111824649365363, -0.0, 0.00083519681622152143,
    -0.00052693283295635128, -1.4202292023779372E-6, 0.00056258770077962489,
    0.00080001208779628685, 0.0040222089662175116, 0.034075479854978247,
    -0.021043808615419376, -6.0914557418032596E-5, 0.00059482891125992249, -0.0,
    0.002062143106284854, -0.0014904815292193945, -3.3998696950912874E-6,
    0.00075646106685663085, 0.0009936379052814066, 0.0059054831078212966,
    0.038583750917710678, -0.028829764251451326, -7.1735836551568879E-5,
    0.0011726262150481637, -0.0, 0.0033929136972443439, -0.0027949836877214896,
    -6.2738005970893479E-6, 0.00087950249413920047, 0.0010977323314750806,
    0.0077041407928327083, 0.038610702862460149, -0.034678824448749805,
    -9.99582877310808E-5, 0.0019261216668453409, -0.0, 0.004654926481577208,
    -0.004343790695385528, -1.1349003863154811E-5, 0.00092769306525124055,
    0.0011404644798644031, 0.0094197723233186512, 0.036103268168904461,
    -0.038611763746433318, -0.00016194825176056761, 0.0028471204265186328, -0.0,
    0.0057572468853912514, -0.00604313701410948, -2.0579570862840042E-5,
    0.00090087854130221272, 0.0011436573271834541, 0.011054625516548585,
    0.03240359262632185, -0.040721182393318144, -0.00026717427891659415,
    0.0039276769289651285, -0.0, 0.006663765412963975, -0.0078054281883259,
    -3.6223635885386266E-5, 0.00080226872093682724, 0.0011234628800830127,
    0.012611407038876492, 0.028384129958974106, -0.041159175748152539,
    -0.00041844655161156453, 0.0051601319868246516, -0.0, 0.0073728135925645675,
    -0.009551887733299189, -6.0533070291468119E-5, 0.000637866685778655,
    0.0010912837713868075, 0.014093112150810589, 0.024568713767860097,
    -0.040124126137914662, -0.00061290951136036, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, -0.00083519681622152143, 0.00052693283295635128,
    1.4202292023779372E-6, -0.00056258770077962489, -0.00080001208779628685,
    -0.0040222089662175116, -0.034075479854978247, 0.021043808615419376,
    6.0914557418032596E-5, 0.0, -0.002062143106284854, 0.0014904815292193945,
    3.3998696950912874E-6, -0.00075646106685663085, -0.0009936379052814066,
    -0.0059054831078212966, -0.038583750917710678, 0.028829764251451326,
    7.1735836551568879E-5, 0.0, -0.0033929136972443439, 0.0027949836877214896,
    6.2738005970893479E-6, -0.00087950249413920047, -0.0010977323314750806,
    -0.0077041407928327083, -0.038610702862460149, 0.034678824448749805,
    9.99582877310808E-5, 0.0, -0.004654926481577208, 0.004343790695385528,
    1.1349003863154811E-5, -0.00092769306525124055, -0.0011404644798644031,
    -0.0094197723233186512, -0.036103268168904461, 0.038611763746433318,
    0.00016194825176056761, 0.0, -0.0057572468853912514, 0.00604313701410948,
    2.0579570862840042E-5, -0.00090087854130221272, -0.0011436573271834541,
    -0.011054625516548585, -0.03240359262632185, 0.040721182393318144,
    0.00026717427891659415, 0.0, -0.006663765412963975, 0.0078054281883259,
    3.6223635885386266E-5, -0.00080226872093682724, -0.0011234628800830127,
    -0.012611407038876492, -0.028384129958974106, 0.041159175748152539,
    0.00041844655161156453, 0.0, -0.0073728135925645675, 0.009551887733299189,
    6.0533070291468119E-5, -0.000637866685778655, -0.0010912837713868075,
    -0.014093112150810589, -0.024568713767860097, 0.040124126137914662,
    0.00061290951136036, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.00030623942171196546, -0.00047731536664842887, -0.002066526813039662,
    -0.022172426283366305, -0.011387616330349713, 0.00015666644814812009,
    -0.0002022625931303291, -0.0, -0.00082774518149017452, -0.000529592610445747,
    5.7389299890772109E-6, 0.00056396725231741681, -0.0007922466192322238,
    -0.0040450830466660882, -0.033768034595554677, -0.021141612605666528,
    0.00022480793913855988, -0.0005979618330017876, -0.0, -0.0020455667486544552,
    -0.0015016832971963196, 1.2281171297667541E-5, 0.00075945441536740617,
    -0.000984370751728749, -0.0059353031721315549, -0.038284778592207587,
    -0.029063239819559016, 0.0001877515826036143, -0.0011782958644571567, -0.0,
    -0.0033690819832402682, -0.0028218463087974089, 1.4332584980973915E-5,
    0.00088370610807833518, -0.0010877588806645171, -0.0077380022415320946,
    -0.038372417220315584, -0.035056627436016605, 4.634363912435984E-5,
    -0.0019345945407556694, -0.0, -0.0046275598281650945, -0.0043932358301320314,
    6.9202572103202192E-6, 0.00093219348467385541, -0.0011301251608970195,
    -0.0094549611400509687, -0.035949097799074868, -0.039118963178182836,
    -0.00018840012431222731, -0.0028584044719204794, -0.0,
    -0.0057307040828358021, -0.0061209378716336575, -1.4228364171763658E-5,
    0.00090443930240191118, -0.0011329532079862731, -0.011088696165303913,
    -0.032336970688930662, -0.04132810309639473, -0.00050011991607834452,
    -0.0039415515091365486, -0.0, -0.00664222892733604, -0.0079156577616609179,
    -5.2501371284616649E-5, 0.00080349399699248961, -0.0011121622881278001,
    -0.012642241664372788, -0.028395620667837858, -0.0418285314829304,
    -0.00087020044792009317, -0.0051761828183116993, -0.0,
    -0.0073597906534701579, -0.00969668181913341, -0.00011034171177573473,
    0.00063533798268077, -0.0010790145827917301, -0.01411896081282206,
    -0.024641539531302686, -0.040816497866809458, -0.0012796998356205361, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00030623942171196546,
    0.00047731536664842887, 0.002066526813039662, 0.022172426283366305,
    0.011387616330349713, -0.00015666644814812009, 0.0, 0.00082774518149017452,
    0.000529592610445747, -5.7389299890772109E-6, -0.00056396725231741681,
    0.0007922466192322238, 0.0040450830466660882, 0.033768034595554677,
    0.021141612605666528, -0.00022480793913855988, 0.0, 0.0020455667486544552,
    0.0015016832971963196, -1.2281171297667541E-5, -0.00075945441536740617,
    0.000984370751728749, 0.0059353031721315549, 0.038284778592207587,
    0.029063239819559016, -0.0001877515826036143, 0.0, 0.0033690819832402682,
    0.0028218463087974089, -1.4332584980973915E-5, -0.00088370610807833518,
    0.0010877588806645171, 0.0077380022415320946, 0.038372417220315584,
    0.035056627436016605, -4.634363912435984E-5, 0.0, 0.0046275598281650945,
    0.0043932358301320314, -6.9202572103202192E-6, -0.00093219348467385541,
    0.0011301251608970195, 0.0094549611400509687, 0.035949097799074868,
    0.039118963178182836, 0.00018840012431222731, 0.0, 0.0057307040828358021,
    0.0061209378716336575, 1.4228364171763658E-5, -0.00090443930240191118,
    0.0011329532079862731, 0.011088696165303913, 0.032336970688930662,
    0.04132810309639473, 0.00050011991607834452, 0.0, 0.00664222892733604,
    0.0079156577616609179, 5.2501371284616649E-5, -0.00080349399699248961,
    0.0011121622881278001, 0.012642241664372788, 0.028395620667837858,
    0.0418285314829304, 0.00087020044792009317, 0.0, 0.0073597906534701579,
    0.00969668181913341, 0.00011034171177573473, -0.00063533798268077,
    0.0010790145827917301, 0.01411896081282206, 0.024641539531302686,
    0.040816497866809458, 0.0012796998356205361, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.00031185892138120834, -0.00050257013436989741,
    0.0021189752999033816, -0.023341150699844011, 0.011594289336350715,
    4.8538698886608567E-5, 0.00020586795104612229, -0.0, -0.00086995623361496588,
    0.00053660101735923357, 1.5306708468308147E-6, -0.00057297910874745152,
    -0.00083359519431663322, 0.004119248160739955, -0.035495899890902981,
    0.021430149447512051, 6.54082842232448E-5, 0.00060627118913526379, -0.0,
    -0.0021471788857608319, 0.0015176122837254379, 3.6460185703158066E-6,
    -0.00077034491777451411, -0.001035155325503919, 0.0060112845231374149,
    -0.040171560763765359, 0.029352888902237733, 7.6101215650564892E-5,
    0.0011908412917109568, -0.0, -0.0035314309384240376, 0.0028454618318544097,
    6.6294921173456436E-6, -0.00089555200508320781, -0.0011434481783357141,
    0.0078039387061703035, -0.0401761770089912, 0.035300685361534516,
    0.00010352169015720728, 0.0019500242678547547, -0.0, -0.0048429060012226393,
    0.004421628723515118, 1.1770888489239871E-5, -0.00094453662973384325,
    -0.0011878922635308313, 0.0095046860602438655, -0.037542072616071238,
    0.039295727814625439, 0.00016467428301353455, 0.0028749549914754268, -0.0,
    -0.005987006717235, 0.0061505759056418863, 2.1035254999411158E-5,
    -0.00091716878475691342, -0.0011912658049384594, 0.01111986880888134,
    -0.033669554571301968, 0.041433198448315854, 0.00026950643131986516,
    0.0039573555927472333, -0.0, -0.00692632074987407, 0.0079430910275364534,
    3.6711018305390848E-5, -0.00081674138386906279, -0.0011704175763008568,
    0.012654925863460518, -0.029468311129123081, 0.041868716552104321,
    0.00042112234888680477, 0.0051894553636579873, -0.0, -0.0076593329913996963,
    0.00971897451281721, 6.1090607957709023E-5, -0.00064938830542570825,
    -0.0011372333641091216, 0.014114591733434101, -0.025484039012415069,
    0.040804892537124514, 0.00061678702026516654, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.00086995623361496588, -0.00053660101735923357,
    -1.5306708468308147E-6, 0.00057297910874745152, 0.00083359519431663322,
    -0.004119248160739955, 0.035495899890902981, -0.021430149447512051,
    -6.54082842232448E-5, 0.0, 0.0021471788857608319, -0.0015176122837254379,
    -3.6460185703158066E-6, 0.00077034491777451411, 0.001035155325503919,
    -0.0060112845231374149, 0.040171560763765359, -0.029352888902237733,
    -7.6101215650564892E-5, 0.0, 0.0035314309384240376, -0.0028454618318544097,
    -6.6294921173456436E-6, 0.00089555200508320781, 0.0011434481783357141,
    -0.0078039387061703035, 0.0401761770089912, -0.035300685361534516,
    -0.00010352169015720728, 0.0, 0.0048429060012226393, -0.004421628723515118,
    -1.1770888489239871E-5, 0.00094453662973384325, 0.0011878922635308313,
    -0.0095046860602438655, 0.037542072616071238, -0.039295727814625439,
    -0.00016467428301353455, 0.0, 0.005987006717235, -0.0061505759056418863,
    -2.1035254999411158E-5, 0.00091716878475691342, 0.0011912658049384594,
    -0.01111986880888134, 0.033669554571301968, -0.041433198448315854,
    -0.00026950643131986516, 0.0, 0.00692632074987407, -0.0079430910275364534,
    -3.6711018305390848E-5, 0.00081674138386906279, 0.0011704175763008568,
    -0.012654925863460518, 0.029468311129123081, -0.041868716552104321,
    -0.00042112234888680477, 0.0, 0.0076593329913996963, -0.00971897451281721,
    -6.1090607957709023E-5, 0.00064938830542570825, 0.0011372333641091216,
    -0.014114591733434101, 0.025484039012415069, -0.040804892537124514,
    -0.00061678702026516654, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.00030054479102572547, 0.00049767135583767474, -0.0021060467935265117,
    0.023116544038926289, 0.011176150484746518, -0.00015990468077679311,
    -0.00020472360440944681, -0.0, 0.00086250459888361885,
    0.00051992442604286435, -5.8493716335300836E-6, -0.00055357584434958845,
    0.00082582972575257027, -0.0040963740802913793, 0.0351884546314794,
    0.020755271773573836, -0.00022930166594377192, -0.0006031382673933989, -0.0,
    0.0021306025281304327, 0.0014745525426902745, -1.2527320172892051E-5,
    -0.00074557056444952052, 0.0010258881719512614, -0.0059814644588271574,
    0.039872588438262253, 0.028540115168772581, -0.00019211696170261014,
    -0.0011851716423019643, -0.0, 0.0035075992244199615, 0.0027713681646644862,
    -1.46882765012302E-5, -0.0008676565971343248, 0.0011334747275251506,
    -0.0077700772574709181, 0.039937891366846612, 0.034434766523231866,
    -4.9907041550486245E-5, -0.0019415513939444267, -0.0, 0.0048155393478105258,
    0.004315397802002437, -7.34214183640527E-6, -0.00091534992019124913,
    0.0011775529445634482, -0.0094694972435115515, 0.037387902246241632,
    0.038434999109990681, 0.00018567409305926037, -0.0028636709460735806, -0.0,
    0.00596046391467955, 0.0060134989801012458, 1.3772680035192538E-5,
    -0.00088814905894720657, 0.0011805616857412788, -0.011085798160126016,
    0.033602932633910773, 0.040616087041396992, 0.00049778776367507334,
    -0.0039434810125758141, -0.0, 0.0069047842642461343, 0.0077779949224503573,
    5.2013988864612053E-5, -0.00078902133406024972, 0.0011591169843456447,
    -0.012624091237964225, 0.029479801837986826, 0.0411189906789786,
    0.00086752465064485261, -0.0051734045321709405, -0.0, 0.0076463100523052868,
    0.00952959503961538, 0.00010978417410949378, -0.00062381636303371216,
    0.0011249641755140449, -0.014088743071422632, 0.025556864775857654,
    0.040135731467599592, 0.0012758223267157289, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, -0.00086250459888361885,
    -0.00051992442604286435, 5.8493716335300836E-6, 0.00055357584434958845,
    -0.00082582972575257027, 0.0040963740802913793, -0.0351884546314794,
    -0.020755271773573836, 0.00022930166594377192, 0.0, -0.0021306025281304327,
    -0.0014745525426902745, 1.2527320172892051E-5, 0.00074557056444952052,
    -0.0010258881719512614, 0.0059814644588271574, -0.039872588438262253,
    -0.028540115168772581, 0.00019211696170261014, 0.0, -0.0035075992244199615,
    -0.0027713681646644862, 1.46882765012302E-5, 0.0008676565971343248,
    -0.0011334747275251506, 0.0077700772574709181, -0.039937891366846612,
    -0.034434766523231866, 4.9907041550486245E-5, 0.0, -0.0048155393478105258,
    -0.004315397802002437, 7.34214183640527E-6, 0.00091534992019124913,
    -0.0011775529445634482, 0.0094694972435115515, -0.037387902246241632,
    -0.038434999109990681, -0.00018567409305926037, 0.0, -0.00596046391467955,
    -0.0060134989801012458, -1.3772680035192538E-5, 0.00088814905894720657,
    -0.0011805616857412788, 0.011085798160126016, -0.033602932633910773,
    -0.040616087041396992, -0.00049778776367507334, 0.0, -0.0069047842642461343,
    -0.0077779949224503573, -5.2013988864612053E-5, 0.00078902133406024972,
    -0.0011591169843456447, 0.012624091237964225, -0.029479801837986826,
    -0.0411189906789786, -0.00086752465064485261, 0.0, -0.0076463100523052868,
    -0.00952959503961538, -0.00010978417410949378, 0.00062381636303371216,
    -0.0011249641755140449, 0.014088743071422632, -0.025556864775857654,
    -0.040135731467599592, -0.0012758223267157289, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0 };

  static const real_T g[5418]{ -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00013605399495041681, -0.0, -0.94789999991422, -0.0002323165737535551,
    -0.00085021850252945308, 7.4644574418929129E-5, 0.042372304854011958,
    -0.0024338870206531572, 1.8831321574108633, -0.0081315634991630855,
    -0.031843900678722045, -0.00043991587755701011, -0.0, -0.828274284000475,
    -0.00071829654764050618, -0.0029829453882918144, 6.2742313041972989E-5,
    0.068633766567946786, -0.0034563974704851, 2.7676057047313587,
    -0.010552632650718255, -0.051628892588367392, -0.0007978607868532958, -0.0,
    -0.68189638494130023, -0.0012286665032447549, -0.0058496233936728382,
    -3.1342376034699027E-6, 0.083007916472729, -0.003589951713511725,
    3.0036280976220535, -0.0094211711536435639, -0.0616105459026711,
    -0.0011410576782314458, -0.0, -0.53434951158433575, -0.0016286283183268829,
    -0.0090217493567927957, -9.6497485535297956E-5, 0.089026322360653623,
    -0.0032141564747645412, 2.8508353066487384, -0.0063671417100739369,
    -0.064250485451778444, -0.0014325731407650154, -0.0, -0.4001975245224601,
    -0.0018530175296307702, -0.012190593430831252, -0.00019695320686910947,
    0.08949246863092182, -0.0025917690009131036, 2.4929537206563306,
    -0.0025585879149516767, -0.061833129757380131, -0.0016569902495300272, -0.0,
    -0.28639136612488875, -0.0018851780974144141, -0.015153038865694137,
    -0.00028975242367587238, 0.0865307824004589, -0.0018944998662235905,
    2.0533176075220294, 0.0012185274404540422, -0.0562799951344453,
    -0.0018124939712245017, -0.0, -0.19491893240955638, -0.0017398890238911867,
    -0.017791541512902194, -0.0003650937143041076, 0.081679081417085145,
    -0.0012262657643497266, 1.60939087711851, 0.0044797329146593744,
    -0.049090033389302151, -0.0019051041979649195, -0.0, -0.12477500748160668,
    -0.0014501747445117849, -0.020053144545853444, -0.00041731907030702418,
    0.075996736268228879, -0.00064278595634549573, 1.2053422929471296,
    0.0069681642442896551, -0.04135434153915727, -0.00194467159446681, -0.0,
    -0.073359348722708634, -0.0010575604252408852, -0.021930316193073226,
    -0.00044409726735761073, 0.07017139792438172, -0.00016724585586822986,
    0.86232253270031922, 0.0085910139945617175, -0.033809555227781521,
    -0.0019422508947259365, -0.0, -0.037418484576088755, -0.0006052190463509843,
    -0.023444915627093128, -0.00044565246726613745, 0.064614740447960159,
    0.00019775366639505814, 0.58646352157906889, 0.0093674482180796919,
    -0.026906527742491044, 0.0, 0.94789999991422, 0.0002323165737535551,
    0.00085021850252945308, -7.4644574418929129E-5, -0.042372304854011958,
    0.0024338870206531572, -1.8831321574108633, 0.0081315634991630855,
    0.031843900678722045, 0.0, 0.828274284000475, 0.00071829654764050618,
    0.0029829453882918144, -6.2742313041972989E-5, -0.068633766567946786,
    0.0034563974704851, -2.7676057047313587, 0.010552632650718255,
    0.051628892588367392, 0.0, 0.68189638494130023, 0.0012286665032447549,
    0.0058496233936728382, 3.1342376034699027E-6, -0.083007916472729,
    0.003589951713511725, -3.0036280976220535, 0.0094211711536435639,
    0.0616105459026711, 0.0, 0.53434951158433575, 0.0016286283183268829,
    0.0090217493567927957, 9.6497485535297956E-5, -0.089026322360653623,
    0.0032141564747645412, -2.8508353066487384, 0.0063671417100739369,
    0.064250485451778444, 0.0, 0.4001975245224601, 0.0018530175296307702,
    0.012190593430831252, 0.00019695320686910947, -0.08949246863092182,
    0.0025917690009131036, -2.4929537206563306, 0.0025585879149516767,
    0.061833129757380131, 0.0, 0.28639136612488875, 0.0018851780974144141,
    0.015153038865694137, 0.00028975242367587238, -0.0865307824004589,
    0.0018944998662235905, -2.0533176075220294, -0.0012185274404540422,
    0.0562799951344453, 0.0, 0.19491893240955638, 0.0017398890238911867,
    0.017791541512902194, 0.0003650937143041076, -0.081679081417085145,
    0.0012262657643497266, -1.60939087711851, -0.0044797329146593744,
    0.049090033389302151, 0.0, 0.12477500748160668, 0.0014501747445117849,
    0.020053144545853444, 0.00041731907030702418, -0.075996736268228879,
    0.00064278595634549573, -1.2053422929471296, -0.0069681642442896551,
    0.04135434153915727, 0.0, 0.073359348722708634, 0.0010575604252408852,
    0.021930316193073226, 0.00044409726735761073, -0.07017139792438172,
    0.00016724585586822986, -0.86232253270031922, -0.0085910139945617175,
    0.033809555227781521, 0.0, 0.037418484576088755, 0.0006052190463509843,
    0.023444915627093128, 0.00044565246726613745, -0.064614740447960159,
    -0.00019775366639505814, -0.58646352157906889, -0.0093674482180796919,
    0.026906527742491044, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.7393041473633992E-5, -0.0,
    -0.00022368763943092688, -0.97943363183036425, -0.0014929610497083712,
    -0.039186425137886907, -5.6614700144598219E-5, 0.00052789703364104388,
    -0.0078377521590508158, 0.80137776286231466, -0.056970805070725557,
    0.00010157607708522482, -0.0, -0.00069288992274880393, -0.92211339111192792,
    -0.00543690319059872, -0.073285774807074919, -4.6123839395337206E-5,
    0.00093583978277490387, -0.010204973422867381, 1.4679406075353214,
    -0.098330079431672449, 0.00021063569275170895, -0.0, -0.0011874247713899728,
    -0.83504975370190071, -0.011094759552566745, -0.10151242737070898,
    6.5054042471132486E-6, 0.0012261501164608831, -0.0091500321471800344,
    1.9901277003085569, -0.12581707960111752, 0.00034308538224961334, -0.0,
    -0.0015770310792981505, -0.72555251236862717, -0.017816474142573421,
    -0.12341988813173868, 8.0264143073424814E-5, 0.0014049447068710742,
    -0.0062288168520714558, 2.3654096906129842, -0.14117636261848396,
    0.00048821416801761788, -0.0, -0.0017980869265099082, -0.60089840920731241,
    -0.025039554537448942, -0.13887539377535754, 0.0001587056500972321,
    0.0014815086013838215, -0.0025623484843078975, 2.5974908015098235,
    -0.14616521878490271, 0.00063637010650355059, -0.0, -0.0018336500124171175,
    -0.46804262274960007, -0.032289457713019082, -0.14802510882141279,
    0.00022990541532277094, 0.0014676225862297067, 0.0010906382789437521,
    2.6953622560768005, -0.14254095855242194, 0.000779175137043072, -0.0,
    -0.0016972204487183174, -0.33338010549621289, -0.039178997027587086,
    -0.15125252723439681, 0.00028604097569601616, 0.0013768668571441959,
    0.0042590248614922041, 2.6722641036867576, -0.13203559714993138,
    0.00090967019280314434, -0.0, -0.0014201240320154255, -0.20255999629099947,
    -0.045406297008819312, -0.14913262935985513, 0.00032277752150717772,
    0.0012239270282170206, 0.0066900551015905444, 2.5446089159537975,
    -0.11632397297836967, 0.0010223921260931036, -0.0, -0.0010421382438367171,
    -0.08035378460975387, -0.050751090741705626, -0.14238418727481642,
    0.00033858449201523889, 0.0010239286366876476, 0.008289270206172249,
    2.330915529091973, -0.0969900191888171, 0.0011133865157176926, -0.0,
    -0.00060486059428951639, 0.029424345381619782, -0.0550693612167144,
    -0.13182237870724536, 0.000334062679490346, 0.00079182395248274045,
    0.0090709498678183224, 2.0507944495975985, -0.075494757610177043, 0.0,
    0.00022368763943092688, 0.97943363183036425, 0.0014929610497083712,
    0.039186425137886907, 5.6614700144598219E-5, -0.00052789703364104388,
    0.0078377521590508158, -0.80137776286231466, 0.056970805070725557, 0.0,
    0.00069288992274880393, 0.92211339111192792, 0.00543690319059872,
    0.073285774807074919, 4.6123839395337206E-5, -0.00093583978277490387,
    0.010204973422867381, -1.4679406075353214, 0.098330079431672449, 0.0,
    0.0011874247713899728, 0.83504975370190071, 0.011094759552566745,
    0.10151242737070898, -6.5054042471132486E-6, -0.0012261501164608831,
    0.0091500321471800344, -1.9901277003085569, 0.12581707960111752, 0.0,
    0.0015770310792981505, 0.72555251236862717, 0.017816474142573421,
    0.12341988813173868, -8.0264143073424814E-5, -0.0014049447068710742,
    0.0062288168520714558, -2.3654096906129842, 0.14117636261848396, 0.0,
    0.0017980869265099082, 0.60089840920731241, 0.025039554537448942,
    0.13887539377535754, -0.0001587056500972321, -0.0014815086013838215,
    0.0025623484843078975, -2.5974908015098235, 0.14616521878490271, 0.0,
    0.0018336500124171175, 0.46804262274960007, 0.032289457713019082,
    0.14802510882141279, -0.00022990541532277094, -0.0014676225862297067,
    -0.0010906382789437521, -2.6953622560768005, 0.14254095855242194, 0.0,
    0.0016972204487183174, 0.33338010549621289, 0.039178997027587086,
    0.15125252723439681, -0.00028604097569601616, -0.0013768668571441959,
    -0.0042590248614922041, -2.6722641036867576, 0.13203559714993138, 0.0,
    0.0014201240320154255, 0.20255999629099947, 0.045406297008819312,
    0.14913262935985513, -0.00032277752150717772, -0.0012239270282170206,
    -0.0066900551015905444, -2.5446089159537975, 0.11632397297836967, 0.0,
    0.0010421382438367171, 0.08035378460975387, 0.050751090741705626,
    0.14238418727481642, -0.00033858449201523889, -0.0010239286366876476,
    -0.008289270206172249, -2.330915529091973, 0.0969900191888171, 0.0,
    0.00060486059428951639, -0.029424345381619782, 0.0550693612167144,
    0.13182237870724536, -0.000334062679490346, -0.00079182395248274045,
    -0.0090709498678183224, -2.0507944495975985, 0.075494757610177043, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.698526643327685E-7, -0.0,
    3.7822888752805087E-6, -0.00035289231485000289, 3.4189139533984093E-5,
    -0.95461902809957677, 7.1100422694502463E-7, -8.9811567385581109E-6,
    0.00013126902944982948, -0.013640927712662433, 0.0012950988615465717,
    -1.7147269904128773E-6, -0.0, 1.1507673407768968E-5, -0.0013155663659935382,
    0.00012285543303127417, -0.91135406143948428, 3.3163316882791257E-7,
    -1.5519561417705546E-5, 0.00016502531726898071, -0.02437486627411839,
    0.0021906279895870522, -3.4972112753480514E-6, -0.0, 1.9307665671200687E-5,
    -0.0027413219232082326, 0.00024768220209586342, -0.87012380424921076,
    -6.8812811117453584E-7, -1.9763302213130122E-5, 0.00013982125919807825,
    -0.032169433587467634, 0.002751745249648645, -5.5977294121393278E-6, -0.0,
    2.498997904561869E-5, -0.0044849430478703725, 0.00039342983713991055,
    -0.83084483046096391, -1.9796506295754575E-6, -2.1918801185016628E-5,
    8.4343468160018255E-5, -0.037113411718708571, 0.003036672947804085,
    -7.8197074306270982E-6, -0.0, 2.7577534552949767E-5, -0.0064082900969058155,
    0.00054762695322665067, -0.793432109991374, -3.2636836733291779E-6,
    -2.2237423184653563E-5, 1.8765440426749996E-5, -0.039397727302456866,
    0.00309809039554805, -9.9933900139764189E-6, -0.0, 2.6921553480488257E-5,
    -0.0083848942547339062, 0.00070031450657208035, -0.75779967207486343,
    -4.3468217299391274E-6, -2.1001923672367668E-5, -4.3690464320354867E-5,
    -0.039294754138992867, 0.002983898890566264, -1.1978309599851325E-5, -0.0,
    2.3392946258553423E-5, -0.010303497261330055, 0.00084381691343032752,
    -0.72386135489367576, -5.1114348042188457E-6, -1.8513122731324463E-5,
    -9.5211988147830874E-5, -0.037136984758420775, 0.0027375673439149939,
    -1.3664452072861686E-5, -0.0, 1.7647377061867561E-5, -0.01207052875767038,
    0.00097252341176911846, -0.69153159412636034, -5.502545487094056E-6,
    -1.507723451236707E-5, -0.00013200584315001872, -0.033296009575319148,
    0.0023982197708525069, -1.497220553904411E-5, -0.0, 1.0454783952044933E-5,
    -0.013611557377969874, 0.0010826699647867736, -0.6607262078574051,
    -5.5139498958081136E-6, -1.099426428108596E-5, -0.00015311621421909297,
    -0.028162610037210684, 0.0020005870008040919, -1.58512172573075E-5, -0.0,
    2.58235105769498E-6, -0.014871788389995259, 0.0011721172939975261,
    -0.63136314118173154, -5.17499959191226E-6, -6.5478271176522308E-6,
    -0.00015946802271606813, -0.022128624315847615, 0.0015749128178946059, 0.0,
    -3.7822888752805087E-6, 0.00035289231485000289, -3.4189139533984093E-5,
    0.95461902809957677, -7.1100422694502463E-7, 8.9811567385581109E-6,
    -0.00013126902944982948, 0.013640927712662433, -0.0012950988615465717, 0.0,
    -1.1507673407768968E-5, 0.0013155663659935382, -0.00012285543303127417,
    0.91135406143948428, -3.3163316882791257E-7, 1.5519561417705546E-5,
    -0.00016502531726898071, 0.02437486627411839, -0.0021906279895870522, 0.0,
    -1.9307665671200687E-5, 0.0027413219232082326, -0.00024768220209586342,
    0.87012380424921076, 6.8812811117453584E-7, 1.9763302213130122E-5,
    -0.00013982125919807825, 0.032169433587467634, -0.002751745249648645, 0.0,
    -2.498997904561869E-5, 0.0044849430478703725, -0.00039342983713991055,
    0.83084483046096391, 1.9796506295754575E-6, 2.1918801185016628E-5,
    -8.4343468160018255E-5, 0.037113411718708571, -0.003036672947804085, 0.0,
    -2.7577534552949767E-5, 0.0064082900969058155, -0.00054762695322665067,
    0.793432109991374, 3.2636836733291779E-6, 2.2237423184653563E-5,
    -1.8765440426749996E-5, 0.039397727302456866, -0.00309809039554805, 0.0,
    -2.6921553480488257E-5, 0.0083848942547339062, -0.00070031450657208035,
    0.75779967207486343, 4.3468217299391274E-6, 2.1001923672367668E-5,
    4.3690464320354867E-5, 0.039294754138992867, -0.002983898890566264, 0.0,
    -2.3392946258553423E-5, 0.010303497261330055, -0.00084381691343032752,
    0.72386135489367576, 5.1114348042188457E-6, 1.8513122731324463E-5,
    9.5211988147830874E-5, 0.037136984758420775, -0.0027375673439149939, 0.0,
    -1.7647377061867561E-5, 0.01207052875767038, -0.00097252341176911846,
    0.69153159412636034, 5.502545487094056E-6, 1.507723451236707E-5,
    0.00013200584315001872, 0.033296009575319148, -0.0023982197708525069, 0.0,
    -1.0454783952044933E-5, 0.013611557377969874, -0.0010826699647867736,
    0.6607262078574051, 5.5139498958081136E-6, 1.099426428108596E-5,
    0.00015311621421909297, 0.028162610037210684, -0.0020005870008040919, 0.0,
    -2.58235105769498E-6, 0.014871788389995259, -0.0011721172939975261,
    0.63136314118173154, 5.17499959191226E-6, 6.5478271176522308E-6,
    0.00015946802271606813, 0.022128624315847615, -0.0015749128178946059, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -2.3215726369779438E-6, -0.0, 0.0008890798672821649,
    -3.9634420482915878E-6, -1.8779150781494828E-5, 9.562169117717856E-7,
    -0.95478880828256985, -4.1141673422749054E-5, 0.0318401126387842,
    -0.00013737224957398742, -0.00070099650111093514, -7.3749882091488885E-6,
    -0.0, 0.0028798974838508042, -1.2031552401106183E-5, -6.5541259101970566E-5,
    4.8937143347579689E-7, -0.91186205573102064, -5.6569476786228757E-5,
    0.04536253292905823, -0.00017200519888355798, -0.0011287940711174952,
    -1.3114491684476178E-5, -0.0, 0.0052334722224648142, -2.014283052930879E-5,
    -0.00012809304656000972, -8.0572652135228347E-7, -0.87104654382409041,
    -5.6272387520390857E-5, 0.047311950839458591, -0.00014500909869676951,
    -0.001342599506139663, -1.83453639080477E-5, -0.0, 0.0075008822299020492,
    -2.6016006319195021E-5, -0.00019720530542317128, -2.4591635624240212E-6,
    -0.83218851749958367, -4.7375846559661015E-5, 0.042598626592462448,
    -8.6719294425031889E-5, -0.0014003980563196165, -2.2465939196138063E-5, -0.0,
    0.0094397080120113015, -2.8650001241530735E-5, -0.00026638512436625997,
    -4.121569324240198E-6, -0.79515340435959636, -3.4709382880706838E-5,
    0.0346286857523732, -1.8297222644219323E-5, -0.0013530038284554769,
    -2.5265426660065388E-5, -0.0, 0.010947156098591046, -2.7909176085084102E-5,
    -0.00033144457013503203, -5.551978767944541E-6, -0.75982412569723878,
    -2.1346028683459181E-5, 0.0256340556623987, 4.65077577251771E-5,
    -0.0012416072499104723, -2.6772519265671071E-5, -0.0, 0.012008978947283578,
    -2.4195712839857462E-5, -0.00039000535890606141, -6.6018196083699552E-6,
    -0.72609874903249794, -9.0743971089963886E-6, 0.016970752909635903,
    9.9662858362088664E-5, -0.0010974787977650574, -2.7147117444576643E-5, -0.0,
    0.012662186267626626, -1.8202379750182139E-5, -0.00044102211346605606,
    -7.1976650371651611E-6, -0.6938879802645469, 1.2122638267861729E-6,
    0.0093708626981430839, 0.00013734580510611549, -0.00094287838447155666,
    -2.6606724261902655E-5, -0.0, 0.012969100796935945, -1.0734651929982677E-5,
    -0.00048436730788981974, -7.3244316656170674E-6, -0.66311279263693523,
    9.2109903987888745E-6, 0.0031443429792448185, 0.0001586810986538784,
    -0.00079252796888270661, -2.5379438859688538E-5, -0.0, 0.013000295015379673,
    -2.5897223918498751E-6, -0.00052049499991581837, -7.0100060277412595E-6,
    -0.63370234787111412, 1.4980529515579588E-5, -0.0016667489508736912,
    0.00016472688705361694, -0.00065523809709111341, 0.0, -0.0008890798672821649,
    3.9634420482915878E-6, 1.8779150781494828E-5, -9.562169117717856E-7,
    0.95478880828256985, 4.1141673422749054E-5, -0.0318401126387842,
    0.00013737224957398742, 0.00070099650111093514, 0.0, -0.0028798974838508042,
    1.2031552401106183E-5, 6.5541259101970566E-5, -4.8937143347579689E-7,
    0.91186205573102064, 5.6569476786228757E-5, -0.04536253292905823,
    0.00017200519888355798, 0.0011287940711174952, 0.0, -0.0052334722224648142,
    2.014283052930879E-5, 0.00012809304656000972, 8.0572652135228347E-7,
    0.87104654382409041, 5.6272387520390857E-5, -0.047311950839458591,
    0.00014500909869676951, 0.001342599506139663, 0.0, -0.0075008822299020492,
    2.6016006319195021E-5, 0.00019720530542317128, 2.4591635624240212E-6,
    0.83218851749958367, 4.7375846559661015E-5, -0.042598626592462448,
    8.6719294425031889E-5, 0.0014003980563196165, 0.0, -0.0094397080120113015,
    2.8650001241530735E-5, 0.00026638512436625997, 4.121569324240198E-6,
    0.79515340435959636, 3.4709382880706838E-5, -0.0346286857523732,
    1.8297222644219323E-5, 0.0013530038284554769, 0.0, -0.010947156098591046,
    2.7909176085084102E-5, 0.00033144457013503203, 5.551978767944541E-6,
    0.75982412569723878, 2.1346028683459181E-5, -0.0256340556623987,
    -4.65077577251771E-5, 0.0012416072499104723, 0.0, -0.012008978947283578,
    2.4195712839857462E-5, 0.00039000535890606141, 6.6018196083699552E-6,
    0.72609874903249794, 9.0743971089963886E-6, -0.016970752909635903,
    -9.9662858362088664E-5, 0.0010974787977650574, 0.0, -0.012662186267626626,
    1.8202379750182139E-5, 0.00044102211346605606, 7.1976650371651611E-6,
    0.6938879802645469, -1.2122638267861729E-6, -0.0093708626981430839,
    -0.00013734580510611549, 0.00094287838447155666, 0.0, -0.012969100796935945,
    1.0734651929982677E-5, 0.00048436730788981974, 7.3244316656170674E-6,
    0.66311279263693523, -9.2109903987888745E-6, -0.0031443429792448185,
    -0.0001586810986538784, 0.00079252796888270661, 0.0, -0.013000295015379673,
    2.5897223918498751E-6, 0.00052049499991581837, 7.0100060277412595E-6,
    0.63370234787111412, -1.4980529515579588E-5, 0.0016667489508736912,
    -0.00016472688705361694, 0.00065523809709111341, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.097546159765407481, -0.0, -0.00010755525579326925, 2.1621574234746445E-5,
    2.1868160728403164E-7, -1.3780352347645445E-5, -4.7263455001554586E-5,
    -0.95132850476213759, -0.0038484242973110924, 0.0008333234816673673,
    7.0205219328639671E-6, -0.19034474888147193, -0.0, -0.00034781644809942923,
    8.0172011321042347E-5, 5.496988180212806E-7, -2.27156084527028E-5,
    -6.1029197992035013E-5, -0.90502865766333274, -0.0054665593201632234,
    0.0014772527708812099, 4.9543081419284395E-6, -0.27862705672350024, -0.0,
    -0.00063091851878645309, 0.0001662507404090787, 6.1735780707766864E-7,
    -2.6252607162803279E-5, -5.1494038048002871E-5, -0.8609839718388137,
    -0.0056795948236747409, 0.0019356125977258323, -2.9115307819425437E-6,
    -0.36261302471049905, -0.0, -0.00090245519432003915, 0.00027079983551271973,
    2.2119866829129186E-7, -2.4200604136820606E-5, -2.6945584800949674E-5,
    -0.81908391692432025, -0.0050872380724722305, 0.0022181312643041414,
    -1.3038309501360827E-5, -0.44251182472821315, -0.0, -0.0011332184496505038,
    0.00038537548095676294, -6.7382439476825781E-7, -1.6687728185037593E-5,
    6.21913541560381E-6, -0.77922357682239962, -0.0041046725047747847,
    0.0023394769197791015, -2.2436874234736947E-5, -0.51852240413199324, -0.0,
    -0.0013110011036634782, 0.00050236920150929082, -1.9748026060020105E-6,
    -4.1108907278707827E-6, 4.3301618795228949E-5, -0.74130332450590952,
    -0.0030032803749125677, 0.0023182169173743905, -2.9006231826818779E-5,
    -0.59083399926298907, -0.0, -0.0014343460932402772, 0.00061517585671316127,
    -3.5074845746161284E-6, 1.2918293945842887E-5, 8.103021524185864E-5,
    -0.70522851787898222, -0.0019473513770154644, 0.0021757356069629611,
    -3.1585817150007182E-5, -0.65962661966219382, -0.0, -0.0015079911327062045,
    0.00071830734181529911, -5.0610477977019531E-6, 3.3629077447434695E-5,
    0.00011726944236928755, -0.67090921790025126, -0.0010250256181252703,
    0.0019351518713853484, -2.9846869647270919E-5, -0.72507150519220553, -0.0,
    -0.001539705243111793, 0.00080745303342220714, -6.4252668261849241E-6,
    5.714631561806359E-5, 0.00015074631934028045, -0.63825992842150658,
    -0.00027303091474990723, 0.0016202781342734007, -2.4108355014696247E-5,
    -0.78733155816749312, -0.0, -0.0015382130601616088, 0.00087949002793622237,
    -7.4177895974795306E-6, 8.254233258825301E-5, 0.00018081245359503995,
    -0.60719935621397325, 0.00030444277158693495, 0.001254658953866428,
    -1.5132465589501508E-5, 0.0, 0.00010755525579326925, -2.1621574234746445E-5,
    -2.1868160728403164E-7, 1.3780352347645445E-5, 4.7263455001554586E-5,
    0.95132850476213759, 0.0038484242973110924, -0.0008333234816673673,
    -7.0205219328639671E-6, 0.0, 0.00034781644809942923, -8.0172011321042347E-5,
    -5.496988180212806E-7, 2.27156084527028E-5, 6.1029197992035013E-5,
    0.90502865766333274, 0.0054665593201632234, -0.0014772527708812099,
    -4.9543081419284395E-6, 0.0, 0.00063091851878645309, -0.0001662507404090787,
    -6.1735780707766864E-7, 2.6252607162803279E-5, 5.1494038048002871E-5,
    0.8609839718388137, 0.0056795948236747409, -0.0019356125977258323,
    2.9115307819425437E-6, 0.0, 0.00090245519432003915, -0.00027079983551271973,
    -2.2119866829129186E-7, 2.4200604136820606E-5, 2.6945584800949674E-5,
    0.81908391692432025, 0.0050872380724722305, -0.0022181312643041414,
    1.3038309501360827E-5, 0.0, 0.0011332184496505038, -0.00038537548095676294,
    6.7382439476825781E-7, 1.6687728185037593E-5, -6.21913541560381E-6,
    0.77922357682239962, 0.0041046725047747847, -0.0023394769197791015,
    2.2436874234736947E-5, 0.0, 0.0013110011036634782, -0.00050236920150929082,
    1.9748026060020105E-6, 4.1108907278707827E-6, -4.3301618795228949E-5,
    0.74130332450590952, 0.0030032803749125677, -0.0023182169173743905,
    2.9006231826818779E-5, 0.0, 0.0014343460932402772, -0.00061517585671316127,
    3.5074845746161284E-6, -1.2918293945842887E-5, -8.103021524185864E-5,
    0.70522851787898222, 0.0019473513770154644, -0.0021757356069629611,
    3.1585817150007182E-5, 0.0, 0.0015079911327062045, -0.00071830734181529911,
    5.0610477977019531E-6, -3.3629077447434695E-5, -0.00011726944236928755,
    0.67090921790025126, 0.0010250256181252703, -0.0019351518713853484,
    2.9846869647270919E-5, 0.0, 0.001539705243111793, -0.00080745303342220714,
    6.4252668261849241E-6, -5.714631561806359E-5, -0.00015074631934028045,
    0.63825992842150658, 0.00027303091474990723, -0.0016202781342734007,
    2.4108355014696247E-5, 0.0, 0.0015382130601616088, -0.00087949002793622237,
    7.4177895974795306E-6, -8.254233258825301E-5, -0.00018081245359503995,
    0.60719935621397325, -0.00030444277158693495, -0.001254658953866428,
    1.5132465589501508E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.3122055023886013E-5, -0.0,
    -0.037320608448162429, -5.6600484105171559E-5, -3.80158480245163E-5,
    3.1210978741585189E-5, 0.0063626044977050378, -0.0006178014929020413,
    -0.5225327707856211, -0.0020692471467052189, -0.0015825196049838539,
    -0.00011574479420093425, -0.0, -0.054883325379601215,
    -0.00018966443044090409, -0.00015913497745743803, 4.0945532666326075E-5,
    0.01098062367358197, -0.0010008925162674567, -0.20297142785939054,
    -0.0031026752110159066, -0.0032311282598539459, -0.00022752205992960297,
    -0.0, -0.059609081713834292, -0.0003539149117734189, -0.00035558528147582892,
    3.38718431928376E-5, 0.014100450874041782, -0.0012102947949394326,
    -0.0030704723812153669, -0.0033580569219097342, -0.0045552335440573258,
    -0.00035373445001635119, -0.0, -0.0566310939380206, -0.00051640836201293644,
    -0.00060680377897153121, 1.4575749290501959E-5, 0.016007318935255435,
    -0.0012972660302894572, 0.11018003657398466, -0.0030685538629213705,
    -0.0054126799810898293, -0.00048426672704270573, -0.0, -0.04958344279424165,
    -0.00065501984891378027, -0.00088904456777334751, -1.2704805442094308E-5,
    0.016981062543788644, -0.0013026524393105448, 0.16368620902280703,
    -0.0024327504919446049, -0.0058038975365799156, -0.00061259029406701118,
    -0.0, -0.040906977376478831, -0.00075661345705760742, -0.001180614271105825,
    -4.4240364479383093E-5, 0.017271651919341397, -0.0012575153590614735,
    0.17834162877389836, -0.0016115203185206896, -0.0058011916778807626,
    -0.0007348455173708349, -0.0, -0.03213584920181916, -0.0008151709006146402,
    -0.0014642560380119243, -7.6892574247333667E-5, 0.017088226244018196,
    -0.0011844178761378536, 0.16965200751586221, -0.00072912249565741042,
    -0.0055040033969808973, -0.00084906792512870206, -0.0, -0.024145793721376804,
    -0.00083004077131965733, -0.0017277857906788886, -0.0001081406462955811,
    0.016596797545768028, -0.001098961720757274, 0.14860158330679765,
    0.00012332407723901758, -0.0050126254392374586, -0.00095456944621838543,
    -0.0, -0.017357138733195041, -0.0008043936494899703, -0.0019637497123331004,
    -0.00013606869238948604, 0.015923070727663548, -0.0010113191101064469,
    0.12257349852075856, 0.00088324870111464746, -0.0044144807303690961,
    -0.001051466224878606, -0.0, -0.011892888990472743, -0.00074391712028932264,
    -0.0021686144256626546, -0.0001593268472522379, 0.0151578844015864,
    -0.00092761579980605322, 0.096212946275474359, 0.0015117292327753965,
    -0.0037785205440147417, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.054883325379601215, 0.00018966443044090409,
    0.00015913497745743803, -4.0945532666326075E-5, -0.01098062367358197,
    0.0010008925162674567, 0.20297142785939054, 0.0031026752110159066,
    0.0032311282598539459, 0.0, 0.059609081713834292, 0.0003539149117734189,
    0.00035558528147582892, -3.38718431928376E-5, -0.014100450874041782,
    0.0012102947949394326, 0.0030704723812153669, 0.0033580569219097342,
    0.0045552335440573258, 0.0, 0.0566310939380206, 0.00051640836201293644,
    0.00060680377897153121, -1.4575749290501959E-5, -0.016007318935255435,
    0.0012972660302894572, -0.11018003657398466, 0.0030685538629213705,
    0.0054126799810898293, 0.0, 0.04958344279424165, 0.00065501984891378027,
    0.00088904456777334751, 1.2704805442094308E-5, -0.016981062543788644,
    0.0013026524393105448, -0.16368620902280703, 0.0024327504919446049,
    0.0058038975365799156, 0.0, 0.040906977376478831, 0.00075661345705760742,
    0.001180614271105825, 4.4240364479383093E-5, -0.017271651919341397,
    0.0012575153590614735, -0.17834162877389836, 0.0016115203185206896,
    0.0058011916778807626, 0.0, 0.03213584920181916, 0.0008151709006146402,
    0.0014642560380119243, 7.6892574247333667E-5, -0.017088226244018196,
    0.0011844178761378536, -0.16965200751586221, 0.00072912249565741042,
    0.0055040033969808973, 0.0, 0.024145793721376804, 0.00083004077131965733,
    0.0017277857906788886, 0.0001081406462955811, -0.016596797545768028,
    0.001098961720757274, -0.14860158330679765, -0.00012332407723901758,
    0.0050126254392374586, 0.0, 0.017357138733195041, 0.0008043936494899703,
    0.0019637497123331004, 0.00013606869238948604, -0.015923070727663548,
    0.0010113191101064469, -0.12257349852075856, -0.00088324870111464746,
    0.0044144807303690961, 0.0, 0.011892888990472743, 0.00074391712028932264,
    0.0021686144256626546, 0.0001593268472522379, -0.0151578844015864,
    0.00092761579980605322, -0.096212946275474359, -0.0015117292327753965,
    0.0037785205440147417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.7891849279322587E-6, -0.0,
    -4.0707966674953438E-5, -0.0464090538358248, -2.4610229279834434E-5,
    -0.0030919673412285178, -1.7576703166230974E-5, 9.7029434768206214E-5,
    -0.0015099715156626865, -0.85302749794390476, -0.0014260811666531243,
    1.9553719176953735E-5, -0.0, -0.00014006202707132642, -0.085043975442043368,
    -0.00017751299843456395, -0.00740711831933932, -2.3316767283689809E-5,
    0.00019851677117884567, -0.0023646344510826261, -0.69051044383405968,
    -0.004954155578038663, 4.4454435358372445E-5, -0.0, -0.00026826271666735173,
    -0.11534365076190714, -0.00053902544131978166, -0.012536343471712256,
    -1.909818544135809E-5, 0.0002988879087654879, -0.0026849353030476111,
    -0.520979283271595, -0.0096289389499085859, 7.9134060107265958E-5, -0.0,
    -0.00040176330142696653, -0.13715425116620267, -0.0011468724162840489,
    -0.018093900163176455, -7.1564909796442766E-6, 0.00039337136440643975,
    -0.0025974596751517339, -0.35215480870159865, -0.014697559634988085,
    0.00012280175601163309, -0.0, -0.00052321971195518058, -0.15068329187039023,
    -0.0020056697008370367, -0.023729720288973084, 1.0187559718062528E-5,
    0.00047807706044242535, -0.0022221772612705994, -0.19074114854511837,
    -0.01958465295628432, 0.00017432350426563407, -0.0, -0.00062096627057911925,
    -0.156445031663433, -0.0030952386675238376, -0.029138730282527434,
    3.0718566326344523E-5, 0.00055003449195668548, -0.0016654345695013317,
    -0.042286139963745077, -0.023870305244826039, 0.00023231434335936228, -0.0,
    -0.00068823862252685925, -0.15520051836868357, -0.0043778662362908066,
    -0.034067186692455738, 5.2451113500909514E-5, 0.00060719215788508272,
    -0.0010166182473423744, 0.088893913180309217, -0.027269783951359681,
    0.00029522876116313797, -0.0, -0.00072229547807478014, -0.14789537730594471,
    -0.0058045821695615419, -0.038316151156875658, 7.3702925095851858E-5,
    0.00064838193668042329, -0.00034726845470145251, 0.19973030442548706,
    -0.029614426390290671, 0.00036144597642456361, -0.0, -0.00072353779133067406,
    -0.1355981346702376, -0.0073205027918376176, -0.041742328553016711,
    9.3129050438580933E-5, 0.00067325342140161679, 0.00028826495310264172,
    0.28836573449166886, -0.030833377529667579, 0.0004293473947233296, -0.0,
    -0.00069468534504446707, -0.11944148905527346, -0.0088692806573745422,
    -0.044256570097747604, 0.00010972744951220589, 0.00068218410550778476,
    0.00085127183938045264, 0.35407400817630913, -0.030936089919557017, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0,
    0.00014006202707132642, 0.085043975442043368, 0.00017751299843456395,
    0.00740711831933932, 2.3316767283689809E-5, -0.00019851677117884567,
    0.0023646344510826261, 0.69051044383405968, 0.004954155578038663, 0.0,
    0.00026826271666735173, 0.11534365076190714, 0.00053902544131978166,
    0.012536343471712256, 1.909818544135809E-5, -0.0002988879087654879,
    0.0026849353030476111, 0.520979283271595, 0.0096289389499085859, 0.0,
    0.00040176330142696653, 0.13715425116620267, 0.0011468724162840489,
    0.018093900163176455, 7.1564909796442766E-6, -0.00039337136440643975,
    0.0025974596751517339, 0.35215480870159865, 0.014697559634988085, 0.0,
    0.00052321971195518058, 0.15068329187039023, 0.0020056697008370367,
    0.023729720288973084, -1.0187559718062528E-5, -0.00047807706044242535,
    0.0022221772612705994, 0.19074114854511837, 0.01958465295628432, 0.0,
    0.00062096627057911925, 0.156445031663433, 0.0030952386675238376,
    0.029138730282527434, -3.0718566326344523E-5, -0.00055003449195668548,
    0.0016654345695013317, 0.042286139963745077, 0.023870305244826039, 0.0,
    0.00068823862252685925, 0.15520051836868357, 0.0043778662362908066,
    0.034067186692455738, -5.2451113500909514E-5, -0.00060719215788508272,
    0.0010166182473423744, -0.088893913180309217, 0.027269783951359681, 0.0,
    0.00072229547807478014, 0.14789537730594471, 0.0058045821695615419,
    0.038316151156875658, -7.3702925095851858E-5, -0.00064838193668042329,
    0.00034726845470145251, -0.19973030442548706, 0.029614426390290671, 0.0,
    0.00072353779133067406, 0.1355981346702376, 0.0073205027918376176,
    0.041742328553016711, -9.3129050438580933E-5, -0.00067325342140161679,
    -0.00028826495310264172, -0.28836573449166886, 0.030833377529667579, 0.0,
    0.00069468534504446707, 0.11944148905527346, 0.0088692806573745422,
    0.044256570097747604, -0.00010972744951220589, -0.00068218410550778476,
    -0.00085127183938045264, -0.35407400817630913, 0.030936089919557017, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 9.77126980353158E-8, -0.0, -3.75160498220011E-5,
    2.1506383219102515E-9, -0.04392176650032184, 0.00043412487299914751,
    -0.00017734495634069353, 1.6549466756155209E-6, -0.0012849062652771342,
    5.4203394113382109E-7, -0.76714673440244707, 2.8623302431047421E-7, -0.0,
    -0.00011213902996173026, 9.9930280580189556E-8, -0.077616305140426584,
    0.00074750619914524109, -0.00029561181255359948, 1.9554069952167185E-6,
    -0.0015808726960927764, 3.8087378155025909E-6, -0.58851802581999169,
    4.6650639151568763E-7, -0.0, -0.0001871142060260516, 4.2294604396763049E-7,
    -0.10346524275805116, 0.00096914766771613744, -0.00037180786338522848,
    1.5787303151743393E-6, -0.0013617474267855684, 9.4592306518407534E-6,
    -0.45148691855727247, 5.9359525743418006E-7, -0.0, -0.00024479725336299486,
    1.0741642050550257E-6, -0.12329559588148699, 0.0011212711730100332,
    -0.00041847461841373451, 9.4463966810712122E-7, -0.00092758038898164594,
    1.6803124111984035E-5, -0.346366306838756, 6.5500201794533037E-7, -0.0,
    -0.00027928663428123833, 2.1172715458094582E-6, -0.138508903504834,
    0.0012208947103972338, -0.00044470714519871988, 2.9366712462844609E-7,
    -0.00045553929121130727, 2.4987385449466571E-5, -0.26572470476623739,
    6.558898892160096E-7, -0.0, -0.00029131346062250332, 3.57234813557054E-6,
    -0.15018030302999721, 0.0012810427483857993, -0.00045699420172890974,
    -2.5292400768863529E-7, -3.9477188905058346E-5, 3.3141365333322384E-5,
    -0.20386119065003519, 6.0948040329946978E-7, -0.0, -0.0002848538285191443,
    5.4177287146368184E-6, -0.1591345420557225, 0.001311674867081696,
    -0.0004598920407324363, -6.4904531571258E-7, 0.00028047075352852,
    4.04797172861197E-5, -0.15640251435364058, 5.311916515130164E-7, -0.0,
    -0.00026500649983706521, 7.5960372283493957E-6, -0.16600429269349035,
    0.0013203984116997654, -0.00045655152686565, -8.9257237188670212E-7,
    0.00049658191433857616, 4.6367322924956285E-5, -0.11999395989233737,
    4.3537253332436258E-7, -0.0, -0.00023676421406210009, 1.0022645589551685E-5,
    -0.17127488705181956, 0.0013130155456245142, -0.00044912096591901839,
    -1.0041862766183767E-6, 0.00061883103334603917, 5.0352466044721581E-5,
    -0.092062158674784081, 3.3375645750419255E-7, -0.0, -0.00020438893444202764,
    1.2595141097730492E-5, -0.17531863458673524, 0.0012939433112788587,
    -0.00043904709155616475, -1.0137574627819884E-6, 0.00066520498038440557,
    5.2175154946732963E-5, -0.070633117078497357, 0.0, 3.75160498220011E-5,
    -2.1506383219102515E-9, 0.04392176650032184, -0.00043412487299914751,
    0.00017734495634069353, -1.6549466756155209E-6, 0.0012849062652771342,
    -5.4203394113382109E-7, 0.76714673440244707, 0.0, 0.00011213902996173026,
    -9.9930280580189556E-8, 0.077616305140426584, -0.00074750619914524109,
    0.00029561181255359948, -1.9554069952167185E-6, 0.0015808726960927764,
    -3.8087378155025909E-6, 0.58851802581999169, 0.0, 0.0001871142060260516,
    -4.2294604396763049E-7, 0.10346524275805116, -0.00096914766771613744,
    0.00037180786338522848, -1.5787303151743393E-6, 0.0013617474267855684,
    -9.4592306518407534E-6, 0.45148691855727247, 0.0, 0.00024479725336299486,
    -1.0741642050550257E-6, 0.12329559588148699, -0.0011212711730100332,
    0.00041847461841373451, -9.4463966810712122E-7, 0.00092758038898164594,
    -1.6803124111984035E-5, 0.346366306838756, 0.0, 0.00027928663428123833,
    -2.1172715458094582E-6, 0.138508903504834, -0.0012208947103972338,
    0.00044470714519871988, -2.9366712462844609E-7, 0.00045553929121130727,
    -2.4987385449466571E-5, 0.26572470476623739, 0.0, 0.00029131346062250332,
    -3.57234813557054E-6, 0.15018030302999721, -0.0012810427483857993,
    0.00045699420172890974, 2.5292400768863529E-7, 3.9477188905058346E-5,
    -3.3141365333322384E-5, 0.20386119065003519, 0.0, 0.0002848538285191443,
    -5.4177287146368184E-6, 0.1591345420557225, -0.001311674867081696,
    0.0004598920407324363, 6.4904531571258E-7, -0.00028047075352852,
    -4.04797172861197E-5, 0.15640251435364058, 0.0, 0.00026500649983706521,
    -7.5960372283493957E-6, 0.16600429269349035, -0.0013203984116997654,
    0.00045655152686565, 8.9257237188670212E-7, -0.00049658191433857616,
    -4.6367322924956285E-5, 0.11999395989233737, 0.0, 0.00023676421406210009,
    -1.0022645589551685E-5, 0.17127488705181956, -0.0013130155456245142,
    0.00044912096591901839, 1.0041862766183767E-6, -0.00061883103334603917,
    -5.0352466044721581E-5, 0.092062158674784081, 0.0, 0.00020438893444202764,
    -1.2595141097730492E-5, 0.17531863458673524, -0.0012939433112788587,
    0.00043904709155616475, 1.0137574627819884E-6, -0.00066520498038440557,
    -5.2175154946732963E-5, 0.070633117078497357, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T e_0[4851]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -4.6042543754832843E-6, -0.0022720436034725897, 0.00013605399495041681, 0.0,
    0.94789999991422, 0.0002323165737535551, 0.00085021850252945308,
    -7.4644574418929129E-5, -0.042372304854011958, 0.0024338870206531572,
    -1.8831321574108633, 0.0081315634991630855, 0.031843900678722045, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T h[2064]{ -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020445512957285371, 0.0014603487861040304, 4.9246767934457634E-6,
    -0.0052868326178782156, -0.0020754199270452173, 0.015163628780498446,
    3.1616010707720426E-7, -0.0, -0.00019811352068166364, -9.73333699342812E-5,
    0.00066585862709166957, -0.0040091552269349209, 0.0028909658887442155,
    6.5614497023245073E-6, -0.0080792362290577815, -0.0038844512459874081,
    0.026788702408483002, 6.8512917620797536E-7, -0.0, -0.00049104314225850254,
    -0.00027751213812133571, 0.0018419406261771351, -0.0058989572722036735,
    0.0042850903886228146, 6.1601073524460959E-6, -0.0091991288332427812,
    -0.0053836032115810945, 0.035691534155111788, 9.51595524168609E-7, -0.0,
    -0.00081150591943761959, -0.00052435232813021957, 0.0034085439914897236,
    -0.0077185036154530772, 0.0056372660414857906, 4.6396980079752364E-6,
    -0.00926906335060941, -0.006548320744319591, 0.042501234100522735,
    1.0377937756639665E-6, -0.0, -0.0011189252136054833, -0.00082088448415742132,
    0.0052736567007514515, -0.0094716827009443637, 0.0069435063749424446,
    2.6414509523473936E-6, -0.008739896629381582, -0.00737143213587389,
    0.047702538425699506, 9.1853767957218194E-7, -0.0, -0.0013916387797655108,
    -0.0011501728132765291, 0.0073666001295169623, -0.011161718745088724,
    0.008201241533242561, 5.8494966353777778E-7, -0.00792273074079747,
    -0.007861076035806859, 0.051668868765490657, 6.01743722369558E-7, -0.0,
    -0.001620703686020732, -0.0014960212712305325, 0.0096331287280922023,
    -0.012791205168029366, 0.0094091464493969573, -1.2790233473825457E-6,
    -0.0070202354586047528, -0.0080382793893777667, 0.054687847403532837,
    1.1391978754040816E-7, -0.0, -0.001805191914282023, -0.0018435530683128011,
    0.012031653450661765, -0.01436216724881885, 0.010566918108659434,
    -2.8223985500875043E-6, -0.0061546448498688575, -0.007934340486205024,
    0.056980982028061261, -5.1013685987928413E-7, -0.0, -0.0019487749913619972,
    -0.0021796573224240928, 0.014530331906291044, -0.015876144576630242,
    0.011675045183589609, -4.0018112448208258E-6, -0.0053912134366169567,
    -0.0075881528377809079, 0.058718842971069225, -1.2342489191791384E-6, -0.0,
    -0.0020573611713821547, -0.002493302894833033, 0.017104826530695772,
    -0.017334285099427416, 0.012734595324628301, -4.8286811668071772E-6,
    -0.0047568768666075411, -0.0070435863941390019, 0.060032756331813382, 0.0,
    0.0, 0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.00019811352068166364, 9.73333699342812E-5,
    -0.00066585862709166957, 0.0040091552269349209, -0.0028909658887442155,
    -6.5614497023245073E-6, 0.0080792362290577815, 0.0038844512459874081,
    -0.026788702408483002, 0.0, 0.00049104314225850254, 0.00027751213812133571,
    -0.0018419406261771351, 0.0058989572722036735, -0.0042850903886228146,
    -6.1601073524460959E-6, 0.0091991288332427812, 0.0053836032115810945,
    -0.035691534155111788, 0.0, 0.00081150591943761959, 0.00052435232813021957,
    -0.0034085439914897236, 0.0077185036154530772, -0.0056372660414857906,
    -4.6396980079752364E-6, 0.00926906335060941, 0.006548320744319591,
    -0.042501234100522735, 0.0, 0.0011189252136054833, 0.00082088448415742132,
    -0.0052736567007514515, 0.0094716827009443637, -0.0069435063749424446,
    -2.6414509523473936E-6, 0.008739896629381582, 0.00737143213587389,
    -0.047702538425699506, 0.0, 0.0013916387797655108, 0.0011501728132765291,
    -0.0073666001295169623, 0.011161718745088724, -0.008201241533242561,
    -5.8494966353777778E-7, 0.00792273074079747, 0.007861076035806859,
    -0.051668868765490657, 0.0, 0.001620703686020732, 0.0014960212712305325,
    -0.0096331287280922023, 0.012791205168029366, -0.0094091464493969573,
    1.2790233473825457E-6, 0.0070202354586047528, 0.0080382793893777667,
    -0.054687847403532837, 0.0, 0.001805191914282023, 0.0018435530683128011,
    -0.012031653450661765, 0.01436216724881885, -0.010566918108659434,
    2.8223985500875043E-6, 0.0061546448498688575, 0.007934340486205024,
    -0.056980982028061261, 0.0, 0.0019487749913619972, 0.0021796573224240928,
    -0.014530331906291044, 0.015876144576630242, -0.011675045183589609,
    4.0018112448208258E-6, 0.0053912134366169567, 0.0075881528377809079,
    -0.058718842971069225, 0.0, 0.0020573611713821547, 0.002493302894833033,
    -0.017104826530695772, 0.017334285099427416, -0.012734595324628301,
    4.8286811668071772E-6, 0.0047568768666075411, 0.0070435863941390019,
    -0.060032756331813382, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0020430568849590363, -0.0014846744549160563,
    -7.0936716057342316E-6, 0.0051391900270571448, -0.0021227702215873057,
    0.015228232305159621, -5.1746825674618411E-7, -0.0, 0.00019360954683992086,
    -9.8951619720029927E-5, 0.00066903596330777568, -0.0040067314306774949,
    -0.0029322591857517642, -1.0565746060026215E-5, 0.0078884598525309352,
    -0.0039509928253638827, 0.026917231873970968, -1.25018041672658E-6, -0.0,
    0.0004813724987437641, -0.0002812123096721656, 0.0018515897913409906,
    -0.0058959962902359435, -0.00433805660413819, -1.1566011819059168E-5,
    0.00901826988341082, -0.0054509447270126056, 0.03588820965614524,
    -1.99674342474268E-6, -0.0, 0.00079779982914969841, -0.000529877384341185,
    0.0034281815934806724, -0.0077152543580130614, -0.0056981223890151169,
    -1.0967109079724052E-5, 0.0091195753483278869, -0.00660567593380442,
    0.04277015614884281, -2.6308219371928471E-6, -0.0, 0.0011028937830708171,
    -0.0008275864795065065, 0.005306950518510354, -0.0094682805098512471,
    -0.0070095628750181035, -9.4049919993817815E-6, 0.0086253321268044067,
    -0.0074136435021352051, 0.048045444848981857, -3.0797420946197447E-6, -0.0,
    0.0013749180814484161, -0.0011572507586087781, 0.00741723100352391,
    -0.011158213201939327, -0.00827058862369585, -7.3245584742921849E-6,
    0.0078377590270683143, -0.0078869236468970261, 0.052084536642155926,
    -3.3076191174553684E-6, -0.0, 0.0016045634974302969, -0.001502682321689071,
    0.0097046471474189055, -0.012787584797297882, -0.009480426545954863,
    -5.0236620287564976E-6, 0.0069562410011868329, -0.0080491061052958713,
    0.055172377151487921, -3.3026429098114517E-6, -0.0, 0.0017904596235921708,
    -0.0018491127346458545, 0.012127361717645797, -0.014358380565562009,
    -0.010639161635940208, -2.6918556487285848E-6, 0.0061029256813059174,
    -0.0079329836605401376, 0.057528472990236564, -3.0679042907758847E-6, -0.0,
    0.0019358763409865634, -0.0021835932805221218, 0.014653203386246897,
    -0.01587211736084377, -0.01174755497429808, -4.42337866151435E-7,
    0.00534457038431273, -0.007578149996654163, 0.059322164719128163,
    -2.6150642512061722E-6, -0.0, 0.0020464129014495149, -0.0024952750539298735,
    0.017257462274893824, -0.0173299340528133, -0.012806866470529164,
    1.663084598604466E-6, 0.0047101836644297549, -0.0070286124953556394,
    0.060684253833634447, 0.0, 0.0, 0.0, 0.0, 0.0020430568849590363,
    0.0014846744549160563, 7.0936716057342316E-6, -0.0051391900270571448,
    0.0021227702215873057, -0.015228232305159621, 0.0, -0.00019360954683992086,
    9.8951619720029927E-5, -0.00066903596330777568, 0.0040067314306774949,
    0.0029322591857517642, 1.0565746060026215E-5, -0.0078884598525309352,
    0.0039509928253638827, -0.026917231873970968, 0.0, -0.0004813724987437641,
    0.0002812123096721656, -0.0018515897913409906, 0.0058959962902359435,
    0.00433805660413819, 1.1566011819059168E-5, -0.00901826988341082,
    0.0054509447270126056, -0.03588820965614524, 0.0, -0.00079779982914969841,
    0.000529877384341185, -0.0034281815934806724, 0.0077152543580130614,
    0.0056981223890151169, 1.0967109079724052E-5, -0.0091195753483278869,
    0.00660567593380442, -0.04277015614884281, 0.0, -0.0011028937830708171,
    0.0008275864795065065, -0.005306950518510354, 0.0094682805098512471,
    0.0070095628750181035, 9.4049919993817815E-6, -0.0086253321268044067,
    0.0074136435021352051, -0.048045444848981857, 0.0, -0.0013749180814484161,
    0.0011572507586087781, -0.00741723100352391, 0.011158213201939327,
    0.00827058862369585, 7.3245584742921849E-6, -0.0078377590270683143,
    0.0078869236468970261, -0.052084536642155926, 0.0, -0.0016045634974302969,
    0.001502682321689071, -0.0097046471474189055, 0.012787584797297882,
    0.009480426545954863, 5.0236620287564976E-6, -0.0069562410011868329,
    0.0080491061052958713, -0.055172377151487921, 0.0, -0.0017904596235921708,
    0.0018491127346458545, -0.012127361717645797, 0.014358380565562009,
    0.010639161635940208, 2.6918556487285848E-6, -0.0061029256813059174,
    0.0079329836605401376, -0.057528472990236564, 0.0, -0.0019358763409865634,
    0.0021835932805221218, -0.014653203386246897, 0.01587211736084377,
    0.01174755497429808, 4.42337866151435E-7, -0.00534457038431273,
    0.007578149996654163, -0.059322164719128163, 0.0, -0.0020464129014495149,
    0.0024952750539298735, -0.017257462274893824, 0.0173299340528133,
    0.012806866470529164, -1.663084598604466E-6, -0.0047101836644297549,
    0.0070286124953556394, -0.060684253833634447, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0021016480453829815,
    0.0014857887933183286, 4.7070151263154063E-6, -0.0050961555194273559,
    -0.0020754929921346357, -0.015462266265499226, 3.0426878718878496E-7, -0.0,
    -0.00019216872658156067, -9.73459460026197E-5, -0.0006792751071504849,
    -0.0041074683619141631, 0.0029340512081696577, 6.3057460452133884E-6,
    -0.00782907896809333, -0.0038849506557918018, -0.027331354583334473,
    6.6273426813855175E-7, -0.0, -0.00047814040658582105, -0.000277566493848083,
    -0.0018802229105924365, -0.0060264210814452886, 0.0043402263594654331,
    5.9587145352081763E-6, -0.0089598311740056828, -0.0053848318467642564,
    -0.036451644592615427, 9.2636180986459172E-7, -0.0, -0.0007930998311513511,
    -0.00052449064683289992, -0.0034822500476397213, -0.0078659750107290677,
    0.0057004858091328926, 4.5303525006595133E-6, -0.0090720820218160424,
    -0.0065504901027000958, -0.04346807648358772, 1.0194144264559595E-6, -0.0,
    -0.0010974076290702971, -0.00082115681443972331, -0.0053930322171731326,
    -0.0096322567462445857, 0.00701202851618736, 2.6300941233486434E-6,
    -0.0085934122806193176, -0.0073746438770505617, -0.048873310311435589,
    9.1637309261321547E-7, -0.0, -0.0013694590279160136, -0.001150631492424329,
    -0.0075418405117768745, -0.011330203401756304, 0.0082731347444936279,
    6.61013790805109E-7, -0.00782228984031321, -0.0078653210901301167,
    -0.053043720345121143, 6.2369573871460237E-7, -0.0, -0.0015999229352117708,
    -0.0014967156366828343, -0.0098744448046202624, -0.012963718195152128,
    0.0094830801904353113, -1.1328950919024408E-6, -0.0069556646472008427,
    -0.0080434495506573524, -0.056266866774456553, 1.6606812914153581E-7, -0.0,
    -0.0017873120317849199, -0.001844524963056166, -0.012349220884839871,
    -0.014535826846399721, 0.010641980597964829, -2.6245895611173081E-6,
    -0.0061142707936579534, -0.00794024786087918, -0.058762467425333663,
    -4.2346592189730975E-7, -0.0, -0.0019347286197374006, -0.0021809376864936609,
    -0.014934176702927581, -0.016048831986543406, 0.011750612976507079,
    -3.7686667972724733E-6, -0.0053642122139471319, -0.0075945532602473683,
    -0.060698414364158154, -1.1102016279514281E-6, -0.0, -0.0020475860319608364,
    -0.0024949095612962508, -0.017604680748317732, -0.017504462457878039,
    0.012810241540071939, -4.5731930224289468E-6, -0.0047343841216166494,
    -0.0070502037507671972, -0.062203013141477644, 0.0, 0.0, 0.0, 0.0,
    0.0021016480453829815, -0.0014857887933183286, -4.7070151263154063E-6,
    0.0050961555194273559, 0.0020754929921346357, 0.015462266265499226, 0.0,
    0.00019216872658156067, 9.73459460026197E-5, 0.0006792751071504849,
    0.0041074683619141631, -0.0029340512081696577, -6.3057460452133884E-6,
    0.00782907896809333, 0.0038849506557918018, 0.027331354583334473, 0.0,
    0.00047814040658582105, 0.000277566493848083, 0.0018802229105924365,
    0.0060264210814452886, -0.0043402263594654331, -5.9587145352081763E-6,
    0.0089598311740056828, 0.0053848318467642564, 0.036451644592615427, 0.0,
    0.0007930998311513511, 0.00052449064683289992, 0.0034822500476397213,
    0.0078659750107290677, -0.0057004858091328926, -4.5303525006595133E-6,
    0.0090720820218160424, 0.0065504901027000958, 0.04346807648358772, 0.0,
    0.0010974076290702971, 0.00082115681443972331, 0.0053930322171731326,
    0.0096322567462445857, -0.00701202851618736, -2.6300941233486434E-6,
    0.0085934122806193176, 0.0073746438770505617, 0.048873310311435589, 0.0,
    0.0013694590279160136, 0.001150631492424329, 0.0075418405117768745,
    0.011330203401756304, -0.0082731347444936279, -6.61013790805109E-7,
    0.00782228984031321, 0.0078653210901301167, 0.053043720345121143, 0.0,
    0.0015999229352117708, 0.0014967156366828343, 0.0098744448046202624,
    0.012963718195152128, -0.0094830801904353113, 1.1328950919024408E-6,
    0.0069556646472008427, 0.0080434495506573524, 0.056266866774456553, 0.0,
    0.0017873120317849199, 0.001844524963056166, 0.012349220884839871,
    0.014535826846399721, -0.010641980597964829, 2.6245895611173081E-6,
    0.0061142707936579534, 0.00794024786087918, 0.058762467425333663, 0.0,
    0.0019347286197374006, 0.0021809376864936609, 0.014934176702927581,
    0.016048831986543406, -0.011750612976507079, 3.7686667972724733E-6,
    0.0053642122139471319, 0.0075945532602473683, 0.060698414364158154, 0.0,
    0.0020475860319608364, 0.0024949095612962508, 0.017604680748317732,
    0.017504462457878039, -0.012810241540071939, 4.5731930224289468E-6,
    0.0047343841216166494, 0.0070502037507671972, 0.062203013141477644, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021001536346134803, -0.0014592344477017574, -7.3113332728645879E-6,
    0.0053298671255080053, -0.0021228432866767255, -0.015397662740838059,
    -5.2935957663460309E-7, -0.0, 0.00019955434094002391, -9.8964195788368479E-5,
    -0.00067609777093437912, -0.0041050445656567363, -0.0028891738663263207,
    -1.082144971713733E-5, 0.00813861711349539, -0.0039514922351682781,
    -0.027202825117846524, -1.2725753247960032E-6, -0.0, 0.00049427523441644564,
    -0.00028126666539891307, -0.0018705737454285823, -0.0060234600994775568,
    -0.00428292063329557, -1.176740463629708E-5, 0.0092575675426479209,
    -0.00545217336219577, -0.036254969091582, -2.0219771390466966E-6, -0.0,
    0.000816205917435967, -0.00053001570304386553, -0.0034626124456487747,
    -0.00786272575328905, -0.0056349026213680133, -1.1076454587039766E-5,
    0.0093165566771212568, -0.0066078452921849284, -0.043199154435267666,
    -2.649201286400853E-6, -0.0, 0.0011244113676060037, -0.00082785880978880882,
    -0.0053597383994142336, -0.0096288545551514691, -0.0069410407337731853,
    -9.41634882838052E-6, 0.0087718164755666728, -0.007416855243311881,
    -0.048530403888153259, -3.0819066815787091E-6, -0.0, 0.0013970978332979137,
    -0.0011577094377565786, -0.00749120963776993, -0.011326697858606906,
    -0.00819869541244478, -7.24849434702484E-6, 0.0079381999275525764,
    -0.0078911687012202889, -0.0526280524684559, -3.2856671011103207E-6, -0.0,
    0.0016253442482392585, -0.0015033766871413736, -0.0098029263852935644,
    -0.012960097824420645, -0.0094064928049165039, -4.8775337732763766E-6,
    0.0070208118125907448, -0.0080542762665754622, -0.0557823370265015,
    -3.25049456821032E-6, -0.0, 0.0018083395060892744, -0.0018500846293892205,
    -0.012253512617855846, -0.014532040163142882, -0.010564099146634807,
    -2.4940466597583703E-6, 0.0061432997375168224, -0.0079388910352142985,
    -0.058214976463158388, -2.9812333527939047E-6, -0.0, 0.0019499227126111602,
    -0.0021848736445916912, -0.014811305222971737, -0.016044804770756937,
    -0.011671987181380605, -2.091934186030613E-7, 0.0053715716069825548,
    -0.0075845504191206286, -0.060095092616099251, -2.4910169599784537E-6, -0.0,
    0.0020561880408708341, -0.0024968817203930927, -0.017452045004119694,
    -0.017500111411263931, -0.012731220255085524, 1.9185727429827189E-6,
    0.0047326764094206457, -0.00703522985198384, -0.061551515639656613, 0.0, 0.0,
    0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, -0.00019955434094002391, 9.8964195788368479E-5,
    0.00067609777093437912, 0.0041050445656567363, 0.0028891738663263207,
    1.082144971713733E-5, -0.00813861711349539, 0.0039514922351682781,
    0.027202825117846524, 0.0, -0.00049427523441644564, 0.00028126666539891307,
    0.0018705737454285823, 0.0060234600994775568, 0.00428292063329557,
    1.176740463629708E-5, -0.0092575675426479209, 0.00545217336219577,
    0.036254969091582, 0.0, -0.000816205917435967, 0.00053001570304386553,
    0.0034626124456487747, 0.00786272575328905, 0.0056349026213680133,
    1.1076454587039766E-5, -0.0093165566771212568, 0.0066078452921849284,
    0.043199154435267666, 0.0, -0.0011244113676060037, 0.00082785880978880882,
    0.0053597383994142336, 0.0096288545551514691, 0.0069410407337731853,
    9.41634882838052E-6, -0.0087718164755666728, 0.007416855243311881,
    0.048530403888153259, 0.0, -0.0013970978332979137, 0.0011577094377565786,
    0.00749120963776993, 0.011326697858606906, 0.00819869541244478,
    7.24849434702484E-6, -0.0079381999275525764, 0.0078911687012202889,
    0.0526280524684559, 0.0, -0.0016253442482392585, 0.0015033766871413736,
    0.0098029263852935644, 0.012960097824420645, 0.0094064928049165039,
    4.8775337732763766E-6, -0.0070208118125907448, 0.0080542762665754622,
    0.0557823370265015, 0.0, -0.0018083395060892744, 0.0018500846293892205,
    0.012253512617855846, 0.014532040163142882, 0.010564099146634807,
    2.4940466597583703E-6, -0.0061432997375168224, 0.0079388910352142985,
    0.058214976463158388, 0.0, -0.0019499227126111602, 0.0021848736445916912,
    0.014811305222971737, 0.016044804770756937, 0.011671987181380605,
    2.091934186030613E-7, -0.0053715716069825548, 0.0075845504191206286,
    0.060095092616099251, 0.0, -0.0020561880408708341, 0.0024968817203930927,
    0.017452045004119694, 0.017500111411263931, 0.012731220255085524,
    -1.9185727429827189E-6, -0.0047326764094206457, 0.00703522985198384,
    0.061551515639656613, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 0.00030616429069496923, 0.00048221414518065164,
    0.0020535983066627917, 0.022397032944284023, -0.011382823490747531,
    -4.5300466257935429E-5, 0.00020111824649365363, -0.0, 0.00083519681622152143,
    -0.00052693283295635128, -1.4202292023779372E-6, 0.00056258770077962489,
    0.00080001208779628685, 0.0040222089662175116, 0.034075479854978247,
    -0.021043808615419376, -6.0914557418032596E-5, 0.00059482891125992249, -0.0,
    0.002062143106284854, -0.0014904815292193945, -3.3998696950912874E-6,
    0.00075646106685663085, 0.0009936379052814066, 0.0059054831078212966,
    0.038583750917710678, -0.028829764251451326, -7.1735836551568879E-5,
    0.0011726262150481637, -0.0, 0.0033929136972443439, -0.0027949836877214896,
    -6.2738005970893479E-6, 0.00087950249413920047, 0.0010977323314750806,
    0.0077041407928327083, 0.038610702862460149, -0.034678824448749805,
    -9.99582877310808E-5, 0.0019261216668453409, -0.0, 0.004654926481577208,
    -0.004343790695385528, -1.1349003863154811E-5, 0.00092769306525124055,
    0.0011404644798644031, 0.0094197723233186512, 0.036103268168904461,
    -0.038611763746433318, -0.00016194825176056761, 0.0028471204265186328, -0.0,
    0.0057572468853912514, -0.00604313701410948, -2.0579570862840042E-5,
    0.00090087854130221272, 0.0011436573271834541, 0.011054625516548585,
    0.03240359262632185, -0.040721182393318144, -0.00026717427891659415,
    0.0039276769289651285, -0.0, 0.006663765412963975, -0.0078054281883259,
    -3.6223635885386266E-5, 0.00080226872093682724, 0.0011234628800830127,
    0.012611407038876492, 0.028384129958974106, -0.041159175748152539,
    -0.00041844655161156453, 0.0051601319868246516, -0.0, 0.0073728135925645675,
    -0.009551887733299189, -6.0533070291468119E-5, 0.000637866685778655,
    0.0010912837713868075, 0.014093112150810589, 0.024568713767860097,
    -0.040124126137914662, -0.00061290951136036, 0.0065371345335159276, -0.0,
    0.0079023594828677816, -0.011214534686086311, -9.5503092630370968E-5,
    0.000415859234804783, 0.0010547464749837694, 0.015502888074725234,
    0.021234175454636881, -0.037847237535387088, -0.00084339143145200518,
    0.0080516513816897874, -0.0, 0.0082797661137407122, -0.012737493468585182,
    -0.00014269246021107707, 0.00014599763913536522, 0.0010186111457241656,
    0.016843930534120106, 0.01849129340046481, -0.034579382681332371,
    -0.001099842345084482, 0.0, 0.0, 0.0, 0.0, -0.00030616429069496923,
    -0.00048221414518065164, -0.0020535983066627917, -0.022397032944284023,
    0.011382823490747531, 4.5300466257935429E-5, 0.0, -0.00083519681622152143,
    0.00052693283295635128, 1.4202292023779372E-6, -0.00056258770077962489,
    -0.00080001208779628685, -0.0040222089662175116, -0.034075479854978247,
    0.021043808615419376, 6.0914557418032596E-5, 0.0, -0.002062143106284854,
    0.0014904815292193945, 3.3998696950912874E-6, -0.00075646106685663085,
    -0.0009936379052814066, -0.0059054831078212966, -0.038583750917710678,
    0.028829764251451326, 7.1735836551568879E-5, 0.0, -0.0033929136972443439,
    0.0027949836877214896, 6.2738005970893479E-6, -0.00087950249413920047,
    -0.0010977323314750806, -0.0077041407928327083, -0.038610702862460149,
    0.034678824448749805, 9.99582877310808E-5, 0.0, -0.004654926481577208,
    0.004343790695385528, 1.1349003863154811E-5, -0.00092769306525124055,
    -0.0011404644798644031, -0.0094197723233186512, -0.036103268168904461,
    0.038611763746433318, 0.00016194825176056761, 0.0, -0.0057572468853912514,
    0.00604313701410948, 2.0579570862840042E-5, -0.00090087854130221272,
    -0.0011436573271834541, -0.011054625516548585, -0.03240359262632185,
    0.040721182393318144, 0.00026717427891659415, 0.0, -0.006663765412963975,
    0.0078054281883259, 3.6223635885386266E-5, -0.00080226872093682724,
    -0.0011234628800830127, -0.012611407038876492, -0.028384129958974106,
    0.041159175748152539, 0.00041844655161156453, 0.0, -0.0073728135925645675,
    0.009551887733299189, 6.0533070291468119E-5, -0.000637866685778655,
    -0.0010912837713868075, -0.014093112150810589, -0.024568713767860097,
    0.040124126137914662, 0.00061290951136036, 0.0, -0.0079023594828677816,
    0.011214534686086311, 9.5503092630370968E-5, -0.000415859234804783,
    -0.0010547464749837694, -0.015502888074725234, -0.021234175454636881,
    0.037847237535387088, 0.00084339143145200518, 0.0, -0.0082797661137407122,
    0.012737493468585182, 0.00014269246021107707, -0.00014599763913536522,
    -0.0010186111457241656, -0.016843930534120106, -0.01849129340046481,
    0.034579382681332371, 0.001099842345084482, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.00030623942171196546,
    -0.00047731536664842887, -0.002066526813039662, -0.022172426283366305,
    -0.011387616330349713, 0.00015666644814812009, -0.0002022625931303291, -0.0,
    -0.00082774518149017452, -0.000529592610445747, 5.7389299890772109E-6,
    0.00056396725231741681, -0.0007922466192322238, -0.0040450830466660882,
    -0.033768034595554677, -0.021141612605666528, 0.00022480793913855988,
    -0.0005979618330017876, -0.0, -0.0020455667486544552, -0.0015016832971963196,
    1.2281171297667541E-5, 0.00075945441536740617, -0.000984370751728749,
    -0.0059353031721315549, -0.038284778592207587, -0.029063239819559016,
    0.0001877515826036143, -0.0011782958644571567, -0.0, -0.0033690819832402682,
    -0.0028218463087974089, 1.4332584980973915E-5, 0.00088370610807833518,
    -0.0010877588806645171, -0.0077380022415320946, -0.038372417220315584,
    -0.035056627436016605, 4.634363912435984E-5, -0.0019345945407556694, -0.0,
    -0.0046275598281650945, -0.0043932358301320314, 6.9202572103202192E-6,
    0.00093219348467385541, -0.0011301251608970195, -0.0094549611400509687,
    -0.035949097799074868, -0.039118963178182836, -0.00018840012431222731,
    -0.0028584044719204794, -0.0, -0.0057307040828358021, -0.0061209378716336575,
    -1.4228364171763658E-5, 0.00090443930240191118, -0.0011329532079862731,
    -0.011088696165303913, -0.032336970688930662, -0.04132810309639473,
    -0.00050011991607834452, -0.0039415515091365486, -0.0, -0.00664222892733604,
    -0.0079156577616609179, -5.2501371284616649E-5, 0.00080349399699248961,
    -0.0011121622881278001, -0.012642241664372788, -0.028395620667837858,
    -0.0418285314829304, -0.00087020044792009317, -0.0051761828183116993, -0.0,
    -0.0073597906534701579, -0.00969668181913341, -0.00011034171177573473,
    0.00063533798268077, -0.0010790145827917301, -0.01411896081282206,
    -0.024641539531302686, -0.040816497866809458, -0.0012796998356205361,
    -0.00655479171491834, -0.0, -0.0079004230433163576, -0.011394090655931458,
    -0.00018926275707432255, 0.00040824404672798584, -0.0010410718558982628,
    -0.01552239048802781, -0.02134831919825797, -0.0385250575094498,
    -0.0017105267608725728, -0.0080702287172710677, -0.0, -0.0082904698928620724,
    -0.01295023522278608, -0.00028990993190658812, 0.00013213075603135031,
    -0.0010030885797492424, -0.016856120469814714, -0.018626398129647937,
    -0.035209634693518316, -0.0021461428964605891, 0.0, 0.0, 0.0, 0.0,
    -0.00030623942171196546, 0.00047731536664842887, 0.002066526813039662,
    0.022172426283366305, 0.011387616330349713, -0.00015666644814812009, 0.0,
    0.00082774518149017452, 0.000529592610445747, -5.7389299890772109E-6,
    -0.00056396725231741681, 0.0007922466192322238, 0.0040450830466660882,
    0.033768034595554677, 0.021141612605666528, -0.00022480793913855988, 0.0,
    0.0020455667486544552, 0.0015016832971963196, -1.2281171297667541E-5,
    -0.00075945441536740617, 0.000984370751728749, 0.0059353031721315549,
    0.038284778592207587, 0.029063239819559016, -0.0001877515826036143, 0.0,
    0.0033690819832402682, 0.0028218463087974089, -1.4332584980973915E-5,
    -0.00088370610807833518, 0.0010877588806645171, 0.0077380022415320946,
    0.038372417220315584, 0.035056627436016605, -4.634363912435984E-5, 0.0,
    0.0046275598281650945, 0.0043932358301320314, -6.9202572103202192E-6,
    -0.00093219348467385541, 0.0011301251608970195, 0.0094549611400509687,
    0.035949097799074868, 0.039118963178182836, 0.00018840012431222731, 0.0,
    0.0057307040828358021, 0.0061209378716336575, 1.4228364171763658E-5,
    -0.00090443930240191118, 0.0011329532079862731, 0.011088696165303913,
    0.032336970688930662, 0.04132810309639473, 0.00050011991607834452, 0.0,
    0.00664222892733604, 0.0079156577616609179, 5.2501371284616649E-5,
    -0.00080349399699248961, 0.0011121622881278001, 0.012642241664372788,
    0.028395620667837858, 0.0418285314829304, 0.00087020044792009317, 0.0,
    0.0073597906534701579, 0.00969668181913341, 0.00011034171177573473,
    -0.00063533798268077, 0.0010790145827917301, 0.01411896081282206,
    0.024641539531302686, 0.040816497866809458, 0.0012796998356205361, 0.0,
    0.0079004230433163576, 0.011394090655931458, 0.00018926275707432255,
    -0.00040824404672798584, 0.0010410718558982628, 0.01552239048802781,
    0.02134831919825797, 0.0385250575094498, 0.0017105267608725728, 0.0,
    0.0082904698928620724, 0.01295023522278608, 0.00028990993190658812,
    -0.00013213075603135031, 0.0010030885797492424, 0.016856120469814714,
    0.018626398129647937, 0.035209634693518316, 0.0021461428964605891, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.00031185892138120834, -0.00050257013436989741, 0.0021189752999033816,
    -0.023341150699844011, 0.011594289336350715, 4.8538698886608567E-5,
    0.00020586795104612229, -0.0, -0.00086995623361496588,
    0.00053660101735923357, 1.5306708468308147E-6, -0.00057297910874745152,
    -0.00083359519431663322, 0.004119248160739955, -0.035495899890902981,
    0.021430149447512051, 6.54082842232448E-5, 0.00060627118913526379, -0.0,
    -0.0021471788857608319, 0.0015176122837254379, 3.6460185703158066E-6,
    -0.00077034491777451411, -0.001035155325503919, 0.0060112845231374149,
    -0.040171560763765359, 0.029352888902237733, 7.6101215650564892E-5,
    0.0011908412917109568, -0.0, -0.0035314309384240376, 0.0028454618318544097,
    6.6294921173456436E-6, -0.00089555200508320781, -0.0011434481783357141,
    0.0078039387061703035, -0.0401761770089912, 0.035300685361534516,
    0.00010352169015720728, 0.0019500242678547547, -0.0, -0.0048429060012226393,
    0.004421628723515118, 1.1770888489239871E-5, -0.00094453662973384325,
    -0.0011878922635308313, 0.0095046860602438655, -0.037542072616071238,
    0.039295727814625439, 0.00016467428301353455, 0.0028749549914754268, -0.0,
    -0.005987006717235, 0.0061505759056418863, 2.1035254999411158E-5,
    -0.00091716878475691342, -0.0011912658049384594, 0.01111986880888134,
    -0.033669554571301968, 0.041433198448315854, 0.00026950643131986516,
    0.0039573555927472333, -0.0, -0.00692632074987407, 0.0079430910275364534,
    3.6711018305390848E-5, -0.00081674138386906279, -0.0011704175763008568,
    0.012654925863460518, -0.029468311129123081, 0.041868716552104321,
    0.00042112234888680477, 0.0051894553636579873, -0.0, -0.0076593329913996963,
    0.00971897451281721, 6.1090607957709023E-5, -0.00064938830542570825,
    -0.0011372333641091216, 0.014114591733434101, -0.025484039012415069,
    0.040804892537124514, 0.00061678702026516654, 0.0065639287573136694, -0.0,
    -0.0082049716994792733, 0.01140904630781259, 9.621210676253911E-5,
    -0.0004234631537616511, -0.0010996549666288814, 0.01550305918633214,
    -0.022004664482222415, 0.038477622702890478, 0.00084930644176672637,
    0.0080738478468586686, -0.0, -0.0085919231511164072, 0.012956473101216526,
    0.00014367324314189123, -0.00014890838604834564, -0.0010626319711789308,
    0.016824106212107545, -0.019144919197986637, 0.035142704197345838,
    0.0011085037444974752, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834,
    0.00050257013436989741, -0.0021189752999033816, 0.023341150699844011,
    -0.011594289336350715, -4.8538698886608567E-5, 0.0, 0.00086995623361496588,
    -0.00053660101735923357, -1.5306708468308147E-6, 0.00057297910874745152,
    0.00083359519431663322, -0.004119248160739955, 0.035495899890902981,
    -0.021430149447512051, -6.54082842232448E-5, 0.0, 0.0021471788857608319,
    -0.0015176122837254379, -3.6460185703158066E-6, 0.00077034491777451411,
    0.001035155325503919, -0.0060112845231374149, 0.040171560763765359,
    -0.029352888902237733, -7.6101215650564892E-5, 0.0, 0.0035314309384240376,
    -0.0028454618318544097, -6.6294921173456436E-6, 0.00089555200508320781,
    0.0011434481783357141, -0.0078039387061703035, 0.0401761770089912,
    -0.035300685361534516, -0.00010352169015720728, 0.0, 0.0048429060012226393,
    -0.004421628723515118, -1.1770888489239871E-5, 0.00094453662973384325,
    0.0011878922635308313, -0.0095046860602438655, 0.037542072616071238,
    -0.039295727814625439, -0.00016467428301353455, 0.0, 0.005987006717235,
    -0.0061505759056418863, -2.1035254999411158E-5, 0.00091716878475691342,
    0.0011912658049384594, -0.01111986880888134, 0.033669554571301968,
    -0.041433198448315854, -0.00026950643131986516, 0.0, 0.00692632074987407,
    -0.0079430910275364534, -3.6711018305390848E-5, 0.00081674138386906279,
    0.0011704175763008568, -0.012654925863460518, 0.029468311129123081,
    -0.041868716552104321, -0.00042112234888680477, 0.0, 0.0076593329913996963,
    -0.00971897451281721, -6.1090607957709023E-5, 0.00064938830542570825,
    0.0011372333641091216, -0.014114591733434101, 0.025484039012415069,
    -0.040804892537124514, -0.00061678702026516654, 0.0, 0.0082049716994792733,
    -0.01140904630781259, -9.621210676253911E-5, 0.0004234631537616511,
    0.0010996549666288814, -0.01550305918633214, 0.022004664482222415,
    -0.038477622702890478, -0.00084930644176672637, 0.0, 0.0085919231511164072,
    -0.012956473101216526, -0.00014367324314189123, 0.00014890838604834564,
    0.0010626319711789308, -0.016824106212107545, 0.019144919197986637,
    -0.035142704197345838, -0.0011085037444974752, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00030054479102572547,
    0.00049767135583767474, -0.0021060467935265117, 0.023116544038926289,
    0.011176150484746518, -0.00015990468077679311, -0.00020472360440944681, -0.0,
    0.00086250459888361885, 0.00051992442604286435, -5.8493716335300836E-6,
    -0.00055357584434958845, 0.00082582972575257027, -0.0040963740802913793,
    0.0351884546314794, 0.020755271773573836, -0.00022930166594377192,
    -0.0006031382673933989, -0.0, 0.0021306025281304327, 0.0014745525426902745,
    -1.2527320172892051E-5, -0.00074557056444952052, 0.0010258881719512614,
    -0.0059814644588271574, 0.039872588438262253, 0.028540115168772581,
    -0.00019211696170261014, -0.0011851716423019643, -0.0, 0.0035075992244199615,
    0.0027713681646644862, -1.46882765012302E-5, -0.0008676565971343248,
    0.0011334747275251506, -0.0077700772574709181, 0.039937891366846612,
    0.034434766523231866, -4.9907041550486245E-5, -0.0019415513939444267, -0.0,
    0.0048155393478105258, 0.004315397802002437, -7.34214183640527E-6,
    -0.00091534992019124913, 0.0011775529445634482, -0.0094694972435115515,
    0.037387902246241632, 0.038434999109990681, 0.00018567409305926037,
    -0.0028636709460735806, -0.0, 0.00596046391467955, 0.0060134989801012458,
    1.3772680035192538E-5, -0.00088814905894720657, 0.0011805616857412788,
    -0.011085798160126016, 0.033602932633910773, 0.040616087041396992,
    0.00049778776367507334, -0.0039434810125758141, -0.0, 0.0069047842642461343,
    0.0077779949224503573, 5.2013988864612053E-5, -0.00078902133406024972,
    0.0011591169843456447, -0.012624091237964225, 0.029479801837986826,
    0.0411189906789786, 0.00086752465064485261, -0.0051734045321709405, -0.0,
    0.0076463100523052868, 0.00952959503961538, 0.00010978417410949378,
    -0.00062381636303371216, 0.0011249641755140449, -0.014088743071422632,
    0.025556864775857654, 0.040135731467599592, 0.0012758223267157289,
    -0.0065462715759112581, -0.0, 0.00820303525992785, 0.011199579034205169,
    0.0001885537429421543, -0.00040064012777111304, 0.0010859803475433754,
    -0.015483556773029566, 0.0221188082258435, 0.0378946723419464,
    0.0017046117505578507, -0.0080552705112773917, -0.0, 0.0086026269302377691,
    0.012731255590154726, 0.00028892914897577377, -0.000129220009118365,
    0.0010471094052040082, -0.016811916276412941, 0.019280023927169761,
    0.034646313177504842, 0.002137481497047595, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572547, -0.00049767135583767474, 0.0021060467935265117,
    -0.023116544038926289, -0.011176150484746518, 0.00015990468077679311, 0.0,
    -0.00086250459888361885, -0.00051992442604286435, 5.8493716335300836E-6,
    0.00055357584434958845, -0.00082582972575257027, 0.0040963740802913793,
    -0.0351884546314794, -0.020755271773573836, 0.00022930166594377192, 0.0,
    -0.0021306025281304327, -0.0014745525426902745, 1.2527320172892051E-5,
    0.00074557056444952052, -0.0010258881719512614, 0.0059814644588271574,
    -0.039872588438262253, -0.028540115168772581, 0.00019211696170261014, 0.0,
    -0.0035075992244199615, -0.0027713681646644862, 1.46882765012302E-5,
    0.0008676565971343248, -0.0011334747275251506, 0.0077700772574709181,
    -0.039937891366846612, -0.034434766523231866, 4.9907041550486245E-5, 0.0,
    -0.0048155393478105258, -0.004315397802002437, 7.34214183640527E-6,
    0.00091534992019124913, -0.0011775529445634482, 0.0094694972435115515,
    -0.037387902246241632, -0.038434999109990681, -0.00018567409305926037, 0.0,
    -0.00596046391467955, -0.0060134989801012458, -1.3772680035192538E-5,
    0.00088814905894720657, -0.0011805616857412788, 0.011085798160126016,
    -0.033602932633910773, -0.040616087041396992, -0.00049778776367507334, 0.0,
    -0.0069047842642461343, -0.0077779949224503573, -5.2013988864612053E-5,
    0.00078902133406024972, -0.0011591169843456447, 0.012624091237964225,
    -0.029479801837986826, -0.0411189906789786, -0.00086752465064485261, 0.0,
    -0.0076463100523052868, -0.00952959503961538, -0.00010978417410949378,
    0.00062381636303371216, -0.0011249641755140449, 0.014088743071422632,
    -0.025556864775857654, -0.040135731467599592, -0.0012758223267157289, 0.0,
    -0.00820303525992785, -0.011199579034205169, -0.0001885537429421543,
    0.00040064012777111304, -0.0010859803475433754, 0.015483556773029566,
    -0.0221188082258435, -0.0378946723419464, -0.0017046117505578507, 0.0,
    -0.0086026269302377691, -0.012731255590154726, -0.00028892914897577377,
    0.000129220009118365, -0.0010471094052040082, 0.016811916276412941,
    -0.019280023927169761, -0.034646313177504842, -0.002137481497047595, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T n[1920]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T o[640]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T c[630]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020445512957285371, -0.0014603487861040304, -4.9246767934457634E-6,
    0.0052868326178782156, 0.0020754199270452173, -0.015163628780498446, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020430568849590363, 0.0014846744549160563, 7.0936716057342316E-6,
    -0.0051391900270571448, 0.0021227702215873057, -0.015228232305159621, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021016480453829815, -0.0014857887933183286, -4.7070151263154063E-6,
    0.0050961555194273559, 0.0020754929921346357, 0.015462266265499226, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021001536346134803, 0.0014592344477017574, 7.3113332728645879E-6,
    -0.0053298671255080053, 0.0021228432866767255, 0.015397662740838059, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00030616429069496923, -0.00048221414518065164, -0.0020535983066627917,
    -0.022397032944284023, 0.011382823490747531, 4.5300466257935429E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00030623942171196546, 0.00047731536664842887, 0.002066526813039662,
    0.022172426283366305, 0.011387616330349713, -0.00015666644814812009, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120834, 0.00050257013436989741, -0.0021189752999033816,
    0.023341150699844011, -0.011594289336350715, -4.8538698886608567E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572547, -0.00049767135583767474, 0.0021060467935265117,
    -0.023116544038926289, -0.011176150484746518, 0.00015990468077679311, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0 };

  static const real_T k[625]{ 2.5651005531616526, 1.7832054070796954,
    -1.4357517509568316, -1.6576468970387892, 0.038415984331271066,
    0.30953950737012759, -0.036229291873675754, -0.31172619982772276,
    1.9679357617939497, 1.4295004343096527, -1.1575905629246026,
    -1.3360258904089002, 0.025276540266900779, 0.2655856659786861,
    -0.02314559813158994, -0.26771660811399678, 1.5615376074345662,
    1.1032299118194073, -0.89860536209461106, -1.0369130577097705,
    0.014232747440195048, 0.21768871393257191, -0.012271877159177897,
    -0.21964958421358893, 0.0, 1.7832054070796952, 2.5938374699880686,
    -1.6864513320323564, -1.4358192691239851, 0.31456501060355418,
    0.034578475258586462, -0.32320230353911855, -0.025941182323022022,
    1.4301302001994403, 1.9904696214899711, -1.3585505251609047,
    -1.1582111038703746, 0.26704904376737276, 0.025103638724043718,
    -0.27448762952558253, -0.017665052965833893, 1.1042123892484588,
    1.5785400487059464, -1.0538589663101676, -0.89953130685268068,
    0.21681950057590282, 0.016364187353088786, -0.22294883638262,
    -0.010234851546371489, 0.0, -1.4357517509568316, -1.6864513320323564,
    2.6637476660450394, 1.8530480849695157, 0.061175434686292114,
    0.34697869874687787, -0.059238726472737945, -0.34891540696043188,
    -1.1595115795805104, -1.3598261280790449, 2.0456432776402114,
    1.4853287291416781, 0.040071962567831639, 0.28646920047444907,
    -0.038142271589842756, -0.28839889145243791, -0.901525947013911,
    -1.05577034819889, 1.6205553787978095, 1.1463109776128313,
    0.023428452250500678, 0.22711693381664597, -0.021632835899309123,
    -0.22891255016783749, 0.0, -1.6576468970387892, -1.4358192691239851,
    1.8530480849695157, 2.6348757128843223, 0.33732446095857538,
    0.072017666635336791, -0.34621173813818085, -0.0631303894557312,
    -1.3373171411750207, -1.158856940898727, 1.4846833154039105,
    2.0231435156802049, 0.28184446606830382, 0.045987173219806811,
    -0.28948430298383548, -0.038347336304275045, -1.0388511652000192,
    -0.90046021131235188, 1.1453017745822538, 1.6036927284699218,
    0.22601520538620853, 0.025792407237162931, -0.23230979512275141,
    -0.019497817500620036, 0.0, 0.038415984331271073, 0.31456501060355418,
    0.061175434686292114, 0.33732446095857538, 2.4332119794597995,
    0.28387059424322758, -1.530388388904937, -0.53669418479808917,
    0.02356714053589672, 0.26525036165671073, 0.042634422344713728,
    0.28431764346552785, 1.8476932294982764, 0.20820193191198363,
    -1.2952250548625788, -0.4006701065476807, 0.011728466860207709,
    0.2140528320983216, 0.027189527462265609, 0.22951389270037961,
    1.5095706772179307, 0.14110294085987346, -1.0486715565364275,
    -0.28200206154137619, 0.0, 0.30953950737012759, 0.034578475258586462,
    0.34697869874687787, 0.0720176666353368, 0.28387059424322764,
    2.4635388544622812, -0.57357610916460122, -1.5238333395409063,
    0.260971331909727, 0.020598627328193817, 0.29183959519419223,
    0.051466890612659091, 0.20830081490567373, 1.8714062262747171,
    -0.43119617723699893, -1.2885108639433911, 0.21051299307584551,
    0.0094928611126686418, 0.23514619404989942, 0.034126062086722586,
    0.14127588067616664, 1.5272035102066492, -0.3061782159902493,
    -1.0423011748925657, 0.0, -0.036229291873675747, -0.32320230353911861,
    -0.059238726472737938, -0.3462117381381809, -1.5303883889049368,
    -0.57357610916460111, 2.5191280342931268, 0.23483646377641038,
    -0.021460594211957486, -0.27263724863388733, -0.040742853574748508,
    -0.29191950799667843, -1.295005723079041, -0.43117388551542035,
    1.9210291564180642, 0.16515045217639676, -0.0098143754826808417,
    -0.22009695782929731, -0.025454128685161757, -0.23573671103177829,
    -1.0483105313326602, -0.30614093914991974, 1.5695063263391356,
    0.10494514414344404, 0.0, -0.31172619982772276, -0.025941182323022016,
    -0.34891540696043188, -0.063130389455731212, -0.53669418479808917,
    -1.5238333395409063, 0.23483646377641032, 2.4756910605625846,
    -0.26307787823366624, -0.013211740351017083, -0.29373116396415733,
    -0.043865026081508315, -0.40098832132490814, -1.2884342726712799,
    0.16539207568151268, 1.8840305183146748, -0.21242708445337227,
    -0.0034487353816929182, -0.23688159282700311, -0.027903243755323826,
    -0.28253602656143634, -1.0421655119166022, 0.10534344618754052,
    1.5393580922904977, 0.0, 1.9679357617939497, 1.4301302001994403,
    -1.1595115795805104, -1.3373171411750207, 0.02356714053589672,
    0.260971331909727, -0.021460594211957479, -0.26307787823366618,
    1.8187456854766071, 1.15402996228403, -0.94086525535301579,
    -1.0855809785455934, 0.013298267165473538, 0.22685173633114031,
    -0.011228981312191603, -0.22892102218442215, 1.3304685671830272,
    0.89686054151959849, -0.735331645138114, -0.848939670801543,
    0.004967698063662174, 0.18839318874542979, -0.0030483044154117228,
    -0.19031258239368015, 0.0, 1.4295004343096527, 1.9904696214899711,
    -1.3598261280790447, -1.158856940898727, 0.26525036165671068,
    0.02059862732819381, -0.27263724863388727, -0.01321174035101709,
    1.15402996228403, 1.8364873328796218, -1.103241106627034,
    -0.94078373603144283, 0.22816501563166114, 0.013369122048675611,
    -0.23461971128878367, -0.0069144263915529832, 0.89726281942289732,
    1.343912367047255, -0.86227171563751992, -0.73562216801316271,
    0.18773636679554151, 0.0069598011756325214, -0.19313308548950037,
    -0.001563082481673631, 0.0, -1.1575905629246026, -1.3585505251609047,
    2.0456432776402118, 1.4846833154039105, 0.042634422344713735,
    0.29183959519419228, -0.040742853574748508, -0.29373116396415733,
    -0.94086525535301591, -1.103241106627034, 1.8802446281789942,
    1.1978687769049765, 0.025839259102388584, 0.24411085821980033,
    -0.023945564525735465, -0.24600455279645331, -0.73649431966447942,
    -0.86301973062578374, 1.3774112082382064, 0.93088579727690279,
    0.012876024582111947, 0.19616369932882119, -0.011102637024009761,
    -0.19793708688692335, 0.0, -1.3360258904089002, -1.1582111038703746,
    1.4853287291416781, 2.0231435156802049, 0.28431764346552779,
    0.051466890612659084, -0.29191950799667843, -0.043865026081508322,
    -1.0855809785455934, -0.94078373603144283, 1.1978687769049765,
    1.8626660194191282, 0.24070600756857624, 0.03062824393733565,
    -0.24733629450232761, -0.023997957003584196, -0.84970006742460957,
    -0.73596790509812748, 0.93047113773880108, 1.3642033000652838,
    0.1956446933139914, 0.014730311759023958, -0.20118741809809848,
    -0.0091875869749168185, 0.0, 0.025276540266900783, 0.26704904376737282,
    0.040071962567831632, 0.28184446606830382, 1.8476932294982764,
    0.20830081490567368, -1.295005723079041, -0.40098832132490808,
    0.013298267165473542, 0.22816501563166114, 0.025839259102388577,
    0.24070600756857624, 1.8668240091802315, 0.14746281480728818,
    -1.109949607143369, -0.29433721684415037, 0.0040187908493104739,
    0.18660952370886674, 0.014318068257450328, 0.19690880111700665,
    1.3379579905658878, 0.094397380535924474, -0.91031589174451244,
    -0.20203947935729985, 0.0, 0.2655856659786861, 0.025103638724043711,
    0.28646920047444907, 0.045987173219806832, 0.20820193191198369,
    1.8714062262747171, -0.43117388551542041, -1.2884342726712799,
    0.22685173633114031, 0.013369122048675615, 0.24411085821980033,
    0.030628243937335656, 0.14746281480728821, 1.8853355707079815,
    -0.31955709655916142, -1.1032412889561074, 0.18545186495829785,
    0.0042202094447316828, 0.19928933877055158, 0.018057683256985421,
    0.094480316601296119, 1.3516781961210096, -0.22221115182347151,
    -0.90394736089883376, 0.0, -0.023145598131589951, -0.27448762952558253,
    -0.038142271589842743, -0.28948430298383548, -1.2952250548625788,
    -0.43119617723699893, 1.9210291564180642, 0.16539207568151268,
    -0.011228981312191603, -0.2346197112887837, -0.023945564525735461,
    -0.24733629450232764, -1.1099496071433688, -0.31955709655916142,
    1.9303146419591297, 0.10919206174339982, -0.00212334990554983,
    -0.19196803613498084, -0.012570583822115464, -0.20241527005154655,
    -0.91015568867457086, -0.22219334173916902, 1.3905918575197918,
    0.0617571728939479, 0.0, -0.26771660811399683, -0.017665052965833889,
    -0.28839889145243791, -0.038347336304275038, -0.4006701065476807,
    -1.2885108639433913, 0.16515045217639676, 1.8840305183146748,
    -0.22892102218442217, -0.0069144263915529866, -0.24600455279645334,
    -0.023997957003584203, -0.29433721684415043, -1.1032412889561074,
    0.10919206174339978, 1.8983864440568576, -0.18734730590205853,
    0.0011383029813825066, -0.20103682320588639, -0.012551214322445431,
    -0.20228261849261273, -0.90388223491776487, 0.06193518604819169,
    1.3642296673621854, 0.0, 1.5615376074345662, 1.1042123892484585,
    -0.90152594701391109, -1.0388511652000192, 0.011728466860207712,
    0.21051299307584548, -0.00981437548268084, -0.21242708445337227,
    1.3304685671830272, 0.89726281942289732, -0.73649431966447942,
    -0.84970006742460957, 0.004018790849310473, 0.18545186495829785,
    -0.0021233499055498214, -0.1873473059020585, 1.273151137299263,
    0.70295475794942475, -0.58017398347814353, -0.670370362827982,
    -0.0021411187530547154, 0.15637294340933683, 0.0039222871526195489,
    -0.15815411180890163, 0.0, 1.1032299118194073, 1.5785400487059464,
    -1.05577034819889, -0.90046021131235188, 0.2140528320983216,
    0.0094928611126686453, -0.22009695782929728, -0.0034487353816929256,
    0.89686054151959849, 1.343912367047255, -0.86301973062578352,
    -0.73596790509812748, 0.18660952370886674, 0.0042202094447316794,
    -0.19196803613498084, 0.0011383029813825021, 0.70295475794942475,
    1.2833860338604444, -0.680461979991674, -0.58003070408065482,
    0.15591294193371841, -0.00037053237500229687, -0.16046890278232892,
    0.0049264932236128822, 0.0, -0.89860536209461117, -1.0538589663101676,
    1.6205553787978095, 1.145301774582254, 0.027189527462265609,
    0.23514619404989942, -0.02545412868516176, -0.23688159282700313,
    -0.735331645138114, -0.86227171563751992, 1.3774112082382064,
    0.93047113773880119, 0.014318068257450332, 0.19928933877055161,
    -0.012570583822115459, -0.20103682320588639, -0.58017398347814353,
    -0.680461979991674, 1.3091937089813479, 0.72890571246781766,
    0.0044639609733761057, 0.16259556364532235, -0.0028077765980394132,
    -0.16425174802065898, 0.0, -1.0369130577097705, -0.89953130685268079,
    1.1463109776128313, 1.6036927284699218, 0.22951389270037958,
    0.034126062086722586, -0.23573671103177826, -0.027903243755323829,
    -0.848939670801543, -0.73562216801316271, 0.93088579727690279,
    1.3642033000652838, 0.19690880111700665, 0.018057683256985417,
    -0.20241527005154655, -0.012551214322445435, -0.670370362827982,
    -0.58003070408065482, 0.72890571246781766, 1.2992453712151453,
    0.16251802166014928, 0.0058520878609832306, -0.16719896653298796,
    -0.0011711429881444955, 0.0, 0.014232747440195058, 0.21681950057590282,
    0.023428452250500682, 0.22601520538620856, 1.5095706772179307,
    0.14127588067616664, -1.0483105313326604, -0.28253602656143639,
    0.0049676980636621775, 0.18773636679554156, 0.012876024582111947,
    0.1956446933139914, 1.3379579905658878, 0.094480316601296091,
    -0.91015568867457086, -0.2022826184926127, -0.0021411187530547111,
    0.15591294193371841, 0.0044639609733761075, 0.16251802166014928,
    1.4066817610803473, 0.053805777895071051, -0.75760893586517486,
    -0.13287860311024324, 0.0, 0.21768871393257189, 0.01636418735308879,
    0.22711693381664597, 0.025792407237162942, 0.14110294085987343,
    1.5272035102066492, -0.30614093914991974, -1.0421655119166022,
    0.18839318874542979, 0.0069598011756325162, 0.19616369932882116,
    0.014730311759023966, 0.094397380535924516, 1.3516781961210096,
    -0.22219334173916902, -0.90388223491776487, 0.15637294340933683,
    -0.00037053237500229606, 0.16259556364532235, 0.0058520878609832324,
    0.053805777895071044, 1.4167781665031873, -0.148976375167632,
    -0.75160756923062577, 0.0, -0.012271877159177895, -0.22294883638262,
    -0.021632835899309123, -0.23230979512275141, -1.0486715565364275,
    -0.3061782159902493, 1.5695063263391356, 0.1053434461875405,
    -0.003048304415411728, -0.19313308548950037, -0.011102637024009753,
    -0.20118741809809848, -0.91031589174451233, -0.22221115182347151,
    1.3905918575197918, 0.0619351860481917, 0.0039222871526195489,
    -0.16046890278232895, -0.0028077765980394098, -0.16719896653298796,
    -0.75760893586517475, -0.14897637516763204, 1.4510387673335794,
    0.025546543699226893, 0.0, -0.21964958421358893, -0.010234851546371489,
    -0.22891255016783746, -0.019497817500620029, -0.28200206154137619,
    -1.0423011748925657, 0.10494514414344405, 1.5393580922904977,
    -0.19031258239368018, -0.0015630824816736364, -0.19793708688692332,
    -0.0091875869749168167, -0.20203947935729985, -0.90394736089883376,
    0.061757172893947866, 1.3642296673621854, -0.15815411180890163,
    0.004926493223612884, -0.16425174802065898, -0.0011711429881445018,
    -0.13287860311024324, -0.75160756923062588, 0.025546543699226862,
    1.4289396286416418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    100000.0 };

  static const real_T b_0[441]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -4.6042543754832843E-6, -0.0022720436034725897, 0.00013605399495041681, 0.0,
    0.94789999991422, 0.0002323165737535551, 0.00085021850252945308,
    -7.4644574418929129E-5, -0.042372304854011958, 0.0024338870206531572,
    -1.8831321574108633, 0.0081315634991630855, 0.031843900678722045, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T l_0[390]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T e[258]{ 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7,
    0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0,
    20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0,
    20.0, 20.0, 20.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0,
    15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0,
    15.0 };

  static const real_T c_b[48]{ 0.02112443491058583, -0.015284356933675683,
    -7.0837403672252146E-5, 0.062952228101239543, 0.019032522297668636,
    -0.17235611708486639, 0.021112545591001931, 0.015556523198782039,
    9.3712054745178266E-5, -0.060884483374622281, 0.019613805650913103,
    -0.17335012146094617, 0.021790267284400529, -0.015565687047941387,
    -6.7363334491227168E-5, 0.060331047065513795, 0.019031465986279986,
    0.17628138981294922, 0.021778377964816624, 0.015275193084516326,
    9.7186123926203244E-5, -0.063505664410348023, 0.019612749339524459,
    0.17528738543686956, -0.001819638864719295, -0.0034249251816346319,
    -0.02095639900015615, -0.26767193546582568, 0.10593667623599359,
    0.00062021813460420567, -0.0018124211550371481, 0.003387750973601051,
    0.021100316216985739, 0.26476621250220889, 0.10537885436940329,
    -0.0006207996116589, 0.0018538731733468781, 0.0035708122797193441,
    -0.021822949502860629, 0.2790736050389333, -0.10793139553633729,
    -0.00064672437426625525, 0.001778186846409557, -0.0035336380716857632,
    0.02167903228603104, -0.27616788207531651, -0.1033841350690595,
    0.00064730585132094889 };

  static const real_T f_0[21]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T old_yoff[13]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0 };

  static const real_T tmp_1[13]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0 };

  static real_T d[130]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0
  };

  static real_T f[130]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 };

  static const int32_T b_Mrows[258]{ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17,
    18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
    39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61,
    62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84,
    85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123,
    124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141,
    142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162,
    163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180,
    181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 200, 201,
    202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219,
    220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238, 239, 240,
    241, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 258,
    259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273,
    274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 341, 342, 343, 344,
    345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359,
    360, 361, 362, 363, 364 };

  static const int8_T b_D[4290]{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T d_1[3003]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T a[1920]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0 };

  static const int8_T d_0[273]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T c_0[169]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T b[7]{ 3, 4, 5, 6, 10, 11, 12 };

  static const int8_T tmp_0[7]{ 0, 0, 0, 1, 0, 0, 0 };

  SL_Bus_proc_control_std_msgs_Bool BusAssignment;
  SL_Bus_proc_control_std_msgs_Bool b_varargout_2_0;
  SL_Bus_proc_control_std_msgs_UInt8 b_varargout_2;
  char_T expl_temp[3];
  boolean_T exitg1;
  boolean_T rtb_Merge;
  boolean_T rtb_NewDvlMsg;
  boolean_T rtb_newPressureMsg;

  // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
  // Outputs for IfAction SubSystem: '<S138>/Quaternion Non linear MPC (Not for codegen)' incorporates:
  //   ActionPort: '<S145>/Action Port'

  // SwitchCase: '<S138>/Switch Case' incorporates:
  //   MATLAB Function: '<S214>/NLMPC'

  f[0U] = (rtInf);
  f[1U] = (rtInf);
  f[2U] = (rtInf);
  f[3U] = (rtInf);
  f[4U] = (rtInf);
  f[5U] = (rtInf);
  f[6U] = (rtInf);
  f[7U] = (rtInf);
  f[8U] = (rtInf);
  f[9U] = (rtInf);
  f[10U] = (rtInf);
  f[11U] = (rtInf);
  f[12U] = (rtInf);
  f[13U] = (rtInf);
  f[14U] = (rtInf);
  f[15U] = (rtInf);
  f[16U] = (rtInf);
  f[17U] = (rtInf);
  f[18U] = (rtInf);
  f[19U] = (rtInf);
  d[0U] = (rtMinusInf);
  d[1U] = (rtMinusInf);
  d[2U] = (rtMinusInf);
  d[3U] = (rtMinusInf);
  d[4U] = (rtMinusInf);
  d[5U] = (rtMinusInf);
  d[6U] = (rtMinusInf);
  d[7U] = (rtMinusInf);
  d[8U] = (rtMinusInf);
  d[9U] = (rtMinusInf);
  d[10U] = (rtMinusInf);
  d[11U] = (rtMinusInf);
  d[12U] = (rtMinusInf);
  d[13U] = (rtMinusInf);
  d[14U] = (rtMinusInf);
  d[15U] = (rtMinusInf);
  d[16U] = (rtMinusInf);
  d[17U] = (rtMinusInf);
  d[18U] = (rtMinusInf);
  d[19U] = (rtMinusInf);
  d[20U] = (rtMinusInf);
  d[21U] = (rtMinusInf);
  d[22U] = (rtMinusInf);
  d[23U] = (rtMinusInf);
  d[24U] = (rtMinusInf);
  d[25U] = (rtMinusInf);
  d[26U] = (rtMinusInf);
  d[27U] = (rtMinusInf);
  d[28U] = (rtMinusInf);
  d[29U] = (rtMinusInf);

  // End of Outputs for SubSystem: '<S138>/Quaternion Non linear MPC (Not for codegen)' 
  // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    boolean_T b_varargout_1;
    boolean_T b_varargout_1_0;
    boolean_T b_varargout_1_1;

    // Outputs for Atomic SubSystem: '<Root>/Subsystem1'
    // Outputs for Atomic SubSystem: '<S10>/Subscribe2'
    // MATLABSystem: '<S331>/SourceBlock'
    rtb_Merge = Sub_proc_control_185_13.getLatestMessage(&b_varargout_2);

    // Outputs for Enabled SubSystem: '<S331>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S337>/Enable'

    if (rtb_Merge) {
      // SignalConversion generated from: '<S337>/In1'
      proc_control_B.In1_i2 = b_varargout_2;
    }

    // End of Outputs for SubSystem: '<S331>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe2'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe3'
    // MATLABSystem: '<S332>/SourceBlock'
    rtb_NewDvlMsg = Sub_proc_control_185_14.getLatestMessage(&b_varargout_2_0);

    // End of Outputs for SubSystem: '<S10>/Subscribe3'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe1'
    // MATLABSystem: '<S330>/SourceBlock'
    rtb_newPressureMsg = Sub_proc_control_185_12.getLatestMessage
      (&b_varargout_2_0);

    // Outputs for Enabled SubSystem: '<S330>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S336>/Enable'

    if (rtb_newPressureMsg) {
      // SignalConversion generated from: '<S336>/In1'
      proc_control_B.In1_cx = b_varargout_2_0;
    }

    // End of Outputs for SubSystem: '<S330>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe1'

    // Outputs for Atomic SubSystem: '<S10>/startSim'
    // MATLABSystem: '<S335>/SourceBlock'
    b_varargout_1 = Sub_proc_control_185_11.getLatestMessage
      (&proc_control_B.b_varargout_2_o);

    // Outputs for Enabled SubSystem: '<S335>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S341>/Enable'

    if (b_varargout_1) {
      // SignalConversion generated from: '<S341>/In1'
      proc_control_B.In1_n = proc_control_B.b_varargout_2_o;
    }

    // End of Outputs for SubSystem: '<S335>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/startSim'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe5'
    // MATLABSystem: '<S334>/SourceBlock'
    b_varargout_1_0 = Sub_proc_control_185_270.getLatestMessage(&b_varargout_2_0);

    // Outputs for Enabled SubSystem: '<S334>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S340>/Enable'

    if (b_varargout_1_0) {
      // SignalConversion generated from: '<S340>/In1'
      proc_control_B.In1_f1 = b_varargout_2_0;
    }

    // End of Outputs for SubSystem: '<S334>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe5'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe4'
    // MATLABSystem: '<S333>/SourceBlock'
    b_varargout_1_1 = Sub_proc_control_185_268.getLatestMessage(&b_varargout_2_0);

    // End of Outputs for SubSystem: '<S10>/Subscribe4'

    // MATLABSystem: '<S10>/MATLAB System' incorporates:
    //   MATLABSystem: '<S330>/SourceBlock'
    //   MATLABSystem: '<S331>/SourceBlock'
    //   MATLABSystem: '<S332>/SourceBlock'
    //   MATLABSystem: '<S334>/SourceBlock'
    //   MATLABSystem: '<S335>/SourceBlock'
    //   SignalConversion generated from: '<S10>/MATLAB System'

    if (proc_control_DW.obj_mv.initial_mode != proc_control_P.mode.init) {
      proc_control_DW.obj_mv.initial_mode = proc_control_P.mode.init;
    }

    // Outputs for Atomic SubSystem: '<S10>/Subscribe5'
    //         %% Fonction qui détermine si on est mode dry_run
    if (b_varargout_1_0) {
      proc_control_DW.obj_mv.m_notDryRun = !proc_control_B.In1_f1.Data;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe5'

    // Outputs for Atomic SubSystem: '<S10>/startSim'
    //          %% Fonction qui détermine la condition initial
    if (b_varargout_1) {
      proc_control_DW.obj_mv.m_simulation = 1.0;

      //  activer la simulation
      proc_control_DW.obj_mv.m_initCond[0] = 0.0;
      proc_control_DW.obj_mv.m_initCond[1] = 0.0;
      proc_control_DW.obj_mv.m_initCond[2] = proc_control_B.In1_n.Position.Z;

      //         %% Fonction qui vérifie si le quaternion est unitaire
      proc_control_B.scale = 3.3121686421112381E-170;
      proc_control_B.absxk = std::abs(proc_control_B.In1_n.Orientation.W);
      if (proc_control_B.absxk > 3.3121686421112381E-170) {
        proc_control_B.d = 1.0;
        proc_control_B.scale = proc_control_B.absxk;
      } else {
        proc_control_B.t = proc_control_B.absxk / 3.3121686421112381E-170;
        proc_control_B.d = proc_control_B.t * proc_control_B.t;
      }

      proc_control_B.absxk = std::abs(proc_control_B.In1_n.Orientation.X);
      if (proc_control_B.absxk > proc_control_B.scale) {
        proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
        proc_control_B.d = proc_control_B.d * proc_control_B.t *
          proc_control_B.t + 1.0;
        proc_control_B.scale = proc_control_B.absxk;
      } else {
        proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
        proc_control_B.d += proc_control_B.t * proc_control_B.t;
      }

      proc_control_B.absxk = std::abs(proc_control_B.In1_n.Orientation.Y);
      if (proc_control_B.absxk > proc_control_B.scale) {
        proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
        proc_control_B.d = proc_control_B.d * proc_control_B.t *
          proc_control_B.t + 1.0;
        proc_control_B.scale = proc_control_B.absxk;
      } else {
        proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
        proc_control_B.d += proc_control_B.t * proc_control_B.t;
      }

      proc_control_B.absxk = std::abs(proc_control_B.In1_n.Orientation.Z);
      if (proc_control_B.absxk > proc_control_B.scale) {
        proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
        proc_control_B.d = proc_control_B.d * proc_control_B.t *
          proc_control_B.t + 1.0;
        proc_control_B.scale = proc_control_B.absxk;
      } else {
        proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
        proc_control_B.d += proc_control_B.t * proc_control_B.t;
      }

      proc_control_B.d = proc_control_B.scale * std::sqrt(proc_control_B.d);
      proc_control_B.n_e = proc_control_B.In1_n.Orientation.W / proc_control_B.d;
      proc_control_B.b_ad2[0] = std::isnan(proc_control_B.n_e);
      proc_control_B.n[0] = proc_control_B.n_e;
      proc_control_B.n_e = proc_control_B.In1_n.Orientation.X / proc_control_B.d;
      proc_control_B.b_ad2[1] = std::isnan(proc_control_B.n_e);
      proc_control_B.n[1] = proc_control_B.n_e;
      proc_control_B.n_e = proc_control_B.In1_n.Orientation.Y / proc_control_B.d;
      proc_control_B.b_ad2[2] = std::isnan(proc_control_B.n_e);
      proc_control_B.n[2] = proc_control_B.n_e;
      proc_control_B.n_e = proc_control_B.In1_n.Orientation.Z / proc_control_B.d;
      proc_control_B.b_ad2[3] = std::isnan(proc_control_B.n_e);
      b_varargout_1_0 = true;
      proc_control_B.ibmat = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.ibmat < 4)) {
        if (!proc_control_B.b_ad2[proc_control_B.ibmat]) {
          b_varargout_1_0 = false;
          exitg1 = true;
        } else {
          proc_control_B.ibmat++;
        }
      }

      if (b_varargout_1_0) {
        proc_control_DW.obj_mv.m_initCond[3] = 1.0;
        proc_control_DW.obj_mv.m_initCond[4] = 0.0;
        proc_control_DW.obj_mv.m_initCond[5] = 0.0;
        proc_control_DW.obj_mv.m_initCond[6] = 0.0;
      } else {
        proc_control_DW.obj_mv.m_initCond[3] = proc_control_B.n[0];
        proc_control_DW.obj_mv.m_initCond[4] = proc_control_B.n[1];
        proc_control_DW.obj_mv.m_initCond[5] = proc_control_B.n[2];
        proc_control_DW.obj_mv.m_initCond[6] = proc_control_B.n_e;
      }
    }

    // End of Outputs for SubSystem: '<S10>/startSim'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe1'
    //         %% Fonction qui détermine le mode
    //          %% Fonction qui détermine l'arret d'urgence
    if (rtb_newPressureMsg) {
      proc_control_DW.obj_mv.m_killStatus = !proc_control_B.In1_cx.Data;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe1'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe2'
    //  regarder l'états de la kill
    if (rtb_Merge && (!(proc_control_DW.obj_mv.m_killStatus != 0.0)) &&
        (proc_control_DW.Delay_DSTATE_e != 0.0)) {
      proc_control_DW.obj_mv.m_mode = proc_control_B.In1_i2.Data;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe2'
    if ((proc_control_DW.obj_mv.m_killStatus != 0.0) ||
        (!(proc_control_DW.obj_mv.m_notDryRun != 0.0))) {
      proc_control_DW.obj_mv.m_mode = 0.0;
    }

    // Outputs for Atomic SubSystem: '<S10>/Subscribe3'
    //          %% Fonction qui détermine si on reset
    if (rtb_NewDvlMsg || b_varargout_1) {
      proc_control_DW.obj_mv.m_reset = 1.0;
    } else {
      proc_control_DW.obj_mv.m_reset = 0.0;
    }

    //          %% Fonction qui détermine si on clear la trajectoire
    if (rtb_NewDvlMsg || b_varargout_1 || rtb_Merge || b_varargout_1_1) {
      proc_control_DW.obj_mv.m_trajClear = 1.0;
    } else {
      proc_control_DW.obj_mv.m_trajClear = 0.0;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe3'

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_B.MATLABSystem_o1[0] = proc_control_DW.obj_mv.m_initCond[3];
    proc_control_B.MATLABSystem_o1[1] = proc_control_DW.obj_mv.m_initCond[4];
    proc_control_B.MATLABSystem_o1[2] = proc_control_DW.obj_mv.m_initCond[5];
    proc_control_B.MATLABSystem_o1[3] = proc_control_DW.obj_mv.m_initCond[6];

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_B.MATLABSystem_o2[0] = proc_control_DW.obj_mv.m_initCond[0];
    proc_control_B.MATLABSystem_o2[1] = proc_control_DW.obj_mv.m_initCond[1];
    proc_control_B.MATLABSystem_o2[2] = proc_control_DW.obj_mv.m_initCond[2];

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_B.MATLABSystem_o3 = proc_control_DW.obj_mv.m_simulation;

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_B.MATLABSystem_o4 = proc_control_DW.obj_mv.m_reset;

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_B.d = proc_control_DW.obj_mv.m_trajClear;
    proc_control_B.MATLABSystem_o7 = proc_control_DW.obj_mv.m_notDryRun;

    // DataTypeConversion: '<S10>/Data Type Conversion' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'

    proc_control_B.DataTypeConversion_j = static_cast<uint8_T>
      (proc_control_DW.obj_mv.m_mode);

    // End of Outputs for SubSystem: '<Root>/Subsystem1'

    // Delay: '<S247>/ '
    std::memcpy(&proc_control_B.u[0], &proc_control_DW._DSTATE[0], sizeof(real_T)
                << 3U);

    // Outputs for Atomic SubSystem: '<Root>/Subsystem1'
    // DataTypeConversion: '<S3>/Cast To Double' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'

    proc_control_B.CastToDouble = static_cast<uint8_T>
      (proc_control_DW.obj_mv.m_simulation);

    // End of Outputs for SubSystem: '<Root>/Subsystem1'
  }

  // SwitchCase: '<S3>/Switch Case' incorporates:
  //   MATLABSystem: '<S68>/SourceBlock'
  //   MATLABSystem: '<S69>/SourceBlock'
  //   MATLABSystem: '<S70>/SourceBlock'
  //   MATLABSystem: '<S76>/SourceBlock'
  //   MATLABSystem: '<S77>/SourceBlock'
  //   MATLABSystem: '<S78>/SourceBlock'
  //   ZeroOrderHold: '<S3>/Zero-Order Hold'

  if (proc_control_B.CastToDouble == 1) {
    // Outputs for IfAction SubSystem: '<S3>/Simulation' incorporates:
    //   ActionPort: '<S66>/Action Port'

    // Outputs for Atomic SubSystem: '<S66>/Subscribe'
    // MATLABSystem: '<S76>/SourceBlock'
    rtb_Merge = Sub_proc_control_31_1241.getLatestMessage
      (&proc_control_B.msg_c_b);

    // Outputs for Enabled SubSystem: '<S76>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S80>/Enable'

    if (rtb_Merge) {
      // SignalConversion generated from: '<S80>/In1'
      proc_control_B.In1_pd = proc_control_B.msg_c_b;
    }

    // End of Outputs for SubSystem: '<S76>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S66>/Subscribe'

    // SignalConversion generated from: '<S66>/imu Data' incorporates:
    //   MATLABSystem: '<S76>/SourceBlock'
    //   Merge: '<S3>/Merge1'

    proc_control_B.Product5 = proc_control_B.In1_pd.Orientation.X;
    proc_control_B.Divide_p = proc_control_B.In1_pd.Orientation.Y;
    proc_control_B.Divide1_k = proc_control_B.In1_pd.Orientation.Z;
    proc_control_B.Divide2_c = proc_control_B.In1_pd.Orientation.W;

    // Outputs for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
    // SignalConversion generated from: '<S241>/IMU' incorporates:
    //   SignalConversion generated from: '<S66>/imu Data'

    proc_control_B.TmpSignalConversionAtMATLAB[4] =
      proc_control_B.In1_pd.AngularVelocity.X;
    proc_control_B.TmpSignalConversionAtMATLAB[5] =
      proc_control_B.In1_pd.AngularVelocity.Y;
    proc_control_B.TmpSignalConversionAtMATLAB[6] =
      proc_control_B.In1_pd.AngularVelocity.Z;

    // End of Outputs for SubSystem: '<S8>/AHRS//Detph Mesurments'

    // Outputs for Atomic SubSystem: '<S66>/Subscribe1'
    // MATLABSystem: '<S78>/SourceBlock'
    rtb_NewDvlMsg = Sub_proc_control_31_1242.getLatestMessage
      (&proc_control_B.msg_b);

    // Outputs for Enabled SubSystem: '<S78>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S82>/Enable'

    if (rtb_NewDvlMsg) {
      // SignalConversion generated from: '<S82>/In1'
      proc_control_B.In1_c = proc_control_B.msg_b;
    }

    // End of Outputs for SubSystem: '<S78>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S66>/Subscribe1'

    // SignalConversion generated from: '<S66>/dvl data' incorporates:
    //   MATLABSystem: '<S78>/SourceBlock'
    //   Merge: '<S3>/Merge2'

    proc_control_B.t15 = proc_control_B.In1_c.XVelBtm;
    proc_control_B.t16 = proc_control_B.In1_c.YVelBtm;
    proc_control_B.t63 = proc_control_B.In1_c.ZVelBtm;
    proc_control_B.t5 = proc_control_B.In1_c.EVelBtm;
    proc_control_B.t = proc_control_B.In1_c.Velocity1;
    proc_control_B.absxk = proc_control_B.In1_c.Velocity2;
    proc_control_B.ob = proc_control_B.In1_c.Velocity3;
    proc_control_B.oa = proc_control_B.In1_c.Velocity4;

    // Outputs for Atomic SubSystem: '<S66>/Subscribe depth'
    // MATLABSystem: '<S77>/SourceBlock'
    rtb_newPressureMsg = Sub_proc_control_31_1305.getLatestMessage
      (&proc_control_B.b_varargout_2_c);

    // Outputs for Enabled SubSystem: '<S77>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S81>/Enable'

    if (rtb_newPressureMsg) {
      // SignalConversion generated from: '<S81>/In1'
      proc_control_B.In1_om = proc_control_B.b_varargout_2_c;
    }

    // End of Outputs for SubSystem: '<S77>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S66>/Subscribe depth'

    // SignalConversion generated from: '<S66>/depth data' incorporates:
    //   MATLABSystem: '<S77>/SourceBlock'
    //   Merge: '<S3>/Merge4'

    proc_control_B.rtb_Merge4_Data = proc_control_B.In1_om.Data;

    // Outputs for Atomic SubSystem: '<S66>/Subscribe2'
    // MATLABSystem: '<S79>/SourceBlock'
    Sub_proc_control_31_1318.getLatestMessage(&proc_control_B.BusAssignment);

    // End of Outputs for SubSystem: '<S66>/Subscribe2'
    // End of Outputs for SubSystem: '<S3>/Simulation'
  } else {
    // Outputs for IfAction SubSystem: '<S3>/AUV8' incorporates:
    //   ActionPort: '<S65>/Action Port'

    // Outputs for Atomic SubSystem: '<S65>/Subscribe'
    // MATLABSystem: '<S68>/SourceBlock'
    rtb_Merge = Sub_proc_control_31_5.getLatestMessage(&proc_control_B.msg_c_b);

    // Outputs for Enabled SubSystem: '<S68>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S72>/Enable'

    if (rtb_Merge) {
      // SignalConversion generated from: '<S72>/In1'
      proc_control_B.In1_p = proc_control_B.msg_c_b;
    }

    // End of Outputs for SubSystem: '<S68>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S65>/Subscribe'

    // SignalConversion generated from: '<S65>/imu Data' incorporates:
    //   MATLABSystem: '<S68>/SourceBlock'
    //   Merge: '<S3>/Merge1'

    proc_control_B.Product5 = proc_control_B.In1_p.Orientation.X;
    proc_control_B.Divide_p = proc_control_B.In1_p.Orientation.Y;
    proc_control_B.Divide1_k = proc_control_B.In1_p.Orientation.Z;
    proc_control_B.Divide2_c = proc_control_B.In1_p.Orientation.W;

    // Outputs for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
    // SignalConversion generated from: '<S241>/IMU' incorporates:
    //   SignalConversion generated from: '<S65>/imu Data'

    proc_control_B.TmpSignalConversionAtMATLAB[4] =
      proc_control_B.In1_p.AngularVelocity.X;
    proc_control_B.TmpSignalConversionAtMATLAB[5] =
      proc_control_B.In1_p.AngularVelocity.Y;
    proc_control_B.TmpSignalConversionAtMATLAB[6] =
      proc_control_B.In1_p.AngularVelocity.Z;

    // End of Outputs for SubSystem: '<S8>/AHRS//Detph Mesurments'

    // Outputs for Atomic SubSystem: '<S65>/Subscribe1'
    // MATLABSystem: '<S69>/SourceBlock'
    rtb_NewDvlMsg = Sub_proc_control_31_1235.getLatestMessage
      (&proc_control_B.msg_b);

    // Outputs for Enabled SubSystem: '<S69>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S73>/Enable'

    if (rtb_NewDvlMsg) {
      // SignalConversion generated from: '<S73>/In1'
      proc_control_B.In1_i = proc_control_B.msg_b;
    }

    // End of Outputs for SubSystem: '<S69>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S65>/Subscribe1'

    // SignalConversion generated from: '<S65>/dvl data' incorporates:
    //   MATLABSystem: '<S69>/SourceBlock'
    //   Merge: '<S3>/Merge2'

    proc_control_B.t15 = proc_control_B.In1_i.XVelBtm;
    proc_control_B.t16 = proc_control_B.In1_i.YVelBtm;
    proc_control_B.t63 = proc_control_B.In1_i.ZVelBtm;
    proc_control_B.t5 = proc_control_B.In1_i.EVelBtm;
    proc_control_B.t = proc_control_B.In1_i.Velocity1;
    proc_control_B.absxk = proc_control_B.In1_i.Velocity2;
    proc_control_B.ob = proc_control_B.In1_i.Velocity3;
    proc_control_B.oa = proc_control_B.In1_i.Velocity4;

    // Outputs for Atomic SubSystem: '<S65>/Subscribe2'
    // MATLABSystem: '<S70>/SourceBlock'
    rtb_newPressureMsg = Sub_proc_control_31_1302.getLatestMessage
      (&proc_control_B.b_varargout_2_c);

    // Outputs for Enabled SubSystem: '<S70>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S74>/Enable'

    if (rtb_newPressureMsg) {
      // SignalConversion generated from: '<S74>/In1'
      proc_control_B.In1_e = proc_control_B.b_varargout_2_c;
    }

    // End of Outputs for SubSystem: '<S70>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S65>/Subscribe2'

    // SignalConversion generated from: '<S65>/depth data' incorporates:
    //   MATLABSystem: '<S70>/SourceBlock'
    //   Merge: '<S3>/Merge4'

    proc_control_B.rtb_Merge4_Data = proc_control_B.In1_e.Data;

    // Outputs for Atomic SubSystem: '<S65>/Subscribe3'
    // MATLABSystem: '<S71>/SourceBlock'
    Sub_proc_control_31_1321.getLatestMessage(&proc_control_B.BusAssignment);

    // End of Outputs for SubSystem: '<S65>/Subscribe3'
    // End of Outputs for SubSystem: '<S3>/AUV8'
  }

  // End of SwitchCase: '<S3>/Switch Case'

  // Outputs for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
  // MATLAB Function: '<S241>/ ' incorporates:
  //   Merge: '<S3>/Merge1'
  //   SignalConversion generated from: '<S3>/Bus Selector2'

  proc_control_u(proc_control_B.Divide2_c, proc_control_B.Product5,
                 proc_control_B.Divide_p, proc_control_B.Divide1_k,
                 proc_control_B.y_d_a);

  // Sum: '<S254>/Sum' incorporates:
  //   Product: '<S254>/Product'
  //   Product: '<S254>/Product1'
  //   Product: '<S254>/Product2'
  //   Product: '<S254>/Product3'
  //   UnaryMinus: '<S249>/Unary Minus'
  //   UnaryMinus: '<S249>/Unary Minus1'
  //   UnaryMinus: '<S249>/Unary Minus2'

  proc_control_B.Product8 = ((proc_control_B.y_d_a[0] * proc_control_B.y_d_a[0]
    + -proc_control_B.y_d_a[1] * -proc_control_B.y_d_a[1]) +
    -proc_control_B.y_d_a[2] * -proc_control_B.y_d_a[2]) +
    -proc_control_B.y_d_a[3] * -proc_control_B.y_d_a[3];

  // SignalConversion generated from: '<S241>/IMU' incorporates:
  //   Product: '<S250>/Divide'
  //   Product: '<S250>/Divide1'
  //   Product: '<S250>/Divide2'
  //   Product: '<S250>/Divide3'
  //   UnaryMinus: '<S249>/Unary Minus'
  //   UnaryMinus: '<S249>/Unary Minus1'
  //   UnaryMinus: '<S249>/Unary Minus2'

  proc_control_B.TmpSignalConversionAtMATLAB[0] = proc_control_B.y_d_a[0] /
    proc_control_B.Product8;
  proc_control_B.TmpSignalConversionAtMATLAB[1] = proc_control_B.y_d_a[1] /
    proc_control_B.Product8;
  proc_control_B.TmpSignalConversionAtMATLAB[2] = proc_control_B.y_d_a[2] /
    proc_control_B.Product8;
  proc_control_B.TmpSignalConversionAtMATLAB[3] = proc_control_B.y_d_a[3] /
    proc_control_B.Product8;

  // End of Outputs for SubSystem: '<S8>/AHRS//Detph Mesurments'

  // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
  //   EnablePort: '<S242>/Enable'

  if (rtb_NewDvlMsg) {
    // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
    //   EnablePort: '<S270>/Enable'

    // Delay: '<S267>/Delay'
    if (proc_control_DW.Delay_DSTATE_i > 0.0) {
      // Gain: '<S271>/1//2' incorporates:
      //   Constant: '<S270>/si y devant'

      proc_control_B.rtb_u2_f = proc_control_P.u2_Gain_b *
        proc_control_P.physics.dvlRotation[0];

      // Trigonometry: '<S271>/sincos'
      proc_control_B.sincos_o2[0] = std::sin(proc_control_B.rtb_u2_f);
      proc_control_B.rtb_Sum6_idx_0 = std::cos(proc_control_B.rtb_u2_f);

      // Gain: '<S271>/1//2' incorporates:
      //   Constant: '<S270>/si y devant'

      proc_control_B.rtb_u2_f = proc_control_P.u2_Gain_b *
        proc_control_P.physics.dvlRotation[1];

      // Trigonometry: '<S271>/sincos'
      proc_control_B.sincos_o2[1] = std::sin(proc_control_B.rtb_u2_f);
      proc_control_B.rtb_Sum6_idx_1 = std::cos(proc_control_B.rtb_u2_f);

      // Gain: '<S271>/1//2' incorporates:
      //   Constant: '<S270>/si y devant'

      proc_control_B.rtb_u2_f = proc_control_P.u2_Gain_b *
        proc_control_P.physics.dvlRotation[2];

      // Trigonometry: '<S271>/sincos'
      proc_control_B.sincos_o2[2] = std::sin(proc_control_B.rtb_u2_f);
      proc_control_B.rtb_Sum6_idx_2 = std::cos(proc_control_B.rtb_u2_f);

      // Fcn: '<S271>/q0' incorporates:
      //   Fcn: '<S271>/q3'

      proc_control_B.t65 = proc_control_B.rtb_Sum6_idx_0 *
        proc_control_B.rtb_Sum6_idx_1;
      proc_control_B.t4 = proc_control_B.sincos_o2[0] *
        proc_control_B.sincos_o2[1];

      // Fcn: '<S271>/q0'
      proc_control_B.q0 = proc_control_B.t65 * proc_control_B.rtb_Sum6_idx_2 -
        proc_control_B.t4 * proc_control_B.sincos_o2[2];

      // Fcn: '<S271>/q1' incorporates:
      //   Fcn: '<S271>/q2'

      proc_control_B.od = proc_control_B.rtb_Sum6_idx_0 *
        proc_control_B.sincos_o2[1];
      proc_control_B.t57 = proc_control_B.sincos_o2[0] *
        proc_control_B.rtb_Sum6_idx_1;

      // Fcn: '<S271>/q1'
      proc_control_B.q1 = proc_control_B.od * proc_control_B.sincos_o2[2] +
        proc_control_B.t57 * proc_control_B.rtb_Sum6_idx_2;

      // Fcn: '<S271>/q2'
      proc_control_B.q2 = proc_control_B.od * proc_control_B.rtb_Sum6_idx_2 -
        proc_control_B.t57 * proc_control_B.sincos_o2[2];

      // Fcn: '<S271>/q3'
      proc_control_B.q3 = proc_control_B.t65 * proc_control_B.sincos_o2[2] +
        proc_control_B.t4 * proc_control_B.rtb_Sum6_idx_2;
    }

    // End of Delay: '<S267>/Delay'
    // End of Outputs for SubSystem: '<S267>/Subsystem2'

    // SignalConversion generated from: '<S268>/ SFunction ' incorporates:
    //   MATLAB Function: '<S242>/MATLAB Function1'
    //   Merge: '<S3>/Merge2'
    //   SignalConversion generated from: '<S3>/Bus Selector1'

    proc_control_B.y_d_a[0] = proc_control_B.t15;
    proc_control_B.y_d_a[1] = proc_control_B.t16;
    proc_control_B.y_d_a[2] = proc_control_B.t63;
    proc_control_B.y_d_a[3] = proc_control_B.t5;

    // MATLAB Function: '<S242>/MATLAB Function1' incorporates:
    //   Constant: '<S242>/Constant1'
    //   Merge: '<S3>/Merge2'
    //   SignalConversion generated from: '<S3>/Bus Selector1'

    proc_control_B.u2[0] = std::abs(proc_control_B.t15);
    proc_control_B.u2[1] = std::abs(proc_control_B.t16);
    proc_control_B.u2[2] = std::abs(proc_control_B.t63);
    if (!std::isnan(proc_control_B.u2[0])) {
      proc_control_B.idx_m = 1;
    } else {
      proc_control_B.idx_m = 0;
      proc_control_B.ibmat = 2;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.ibmat <= 3)) {
        if (!std::isnan(proc_control_B.u2[proc_control_B.ibmat - 1])) {
          proc_control_B.idx_m = proc_control_B.ibmat;
          exitg1 = true;
        } else {
          proc_control_B.ibmat++;
        }
      }
    }

    if (proc_control_B.idx_m == 0) {
      proc_control_B.scale = proc_control_B.u2[0];
    } else {
      proc_control_B.scale = proc_control_B.u2[proc_control_B.idx_m - 1];
      while (proc_control_B.idx_m + 1 <= 3) {
        if (proc_control_B.scale < proc_control_B.u2[proc_control_B.idx_m]) {
          proc_control_B.scale = proc_control_B.u2[proc_control_B.idx_m];
        }

        proc_control_B.idx_m++;
      }
    }

    if (proc_control_B.scale < proc_control_P.Constant1_Value_a) {
      proc_control_B.u2[0] = proc_control_B.t15;
      proc_control_B.u2[1] = proc_control_B.t16;
      proc_control_B.u2[2] = proc_control_B.t63;
    } else {
      proc_control_B.y_d_a[0] = std::abs(proc_control_B.t);
      proc_control_B.y_d_a[1] = std::abs(proc_control_B.absxk);
      proc_control_B.y_d_a[2] = std::abs(proc_control_B.ob);
      proc_control_B.y_d_a[3] = std::abs(proc_control_B.oa);
      if (!std::isnan(proc_control_B.y_d_a[0])) {
        proc_control_B.idx_m = 1;
      } else {
        proc_control_B.idx_m = 0;
        proc_control_B.ibmat = 2;
        exitg1 = false;
        while ((!exitg1) && (proc_control_B.ibmat <= 4)) {
          if (!std::isnan(proc_control_B.y_d_a[proc_control_B.ibmat - 1])) {
            proc_control_B.idx_m = proc_control_B.ibmat;
            exitg1 = true;
          } else {
            proc_control_B.ibmat++;
          }
        }
      }

      if (proc_control_B.idx_m == 0) {
        proc_control_B.scale = proc_control_B.y_d_a[0];
      } else {
        proc_control_B.scale = proc_control_B.y_d_a[proc_control_B.idx_m - 1];
        while (proc_control_B.idx_m + 1 <= 4) {
          if (proc_control_B.scale < proc_control_B.y_d_a[proc_control_B.idx_m])
          {
            proc_control_B.scale = proc_control_B.y_d_a[proc_control_B.idx_m];
          }

          proc_control_B.idx_m++;
        }
      }

      if (proc_control_B.scale < proc_control_P.Constant1_Value_a) {
        proc_control_B.u2[0] = proc_control_B.t;
        proc_control_B.u2[1] = proc_control_B.absxk;
        proc_control_B.u2[2] = proc_control_B.ob;
      } else {
        proc_control_B.u2[0] = 0.0;
        proc_control_B.u2[1] = 0.0;
        proc_control_B.u2[2] = 0.0;
      }
    }

    // Sqrt: '<S276>/sqrt' incorporates:
    //   Product: '<S277>/Product'
    //   Product: '<S277>/Product1'
    //   Product: '<S277>/Product2'
    //   Product: '<S277>/Product3'
    //   Sum: '<S277>/Sum'

    proc_control_B.scale = std::sqrt(((proc_control_B.q0 * proc_control_B.q0 +
      proc_control_B.q1 * proc_control_B.q1) + proc_control_B.q2 *
      proc_control_B.q2) + proc_control_B.q3 * proc_control_B.q3);

    // Product: '<S272>/Product'
    proc_control_B.Product8 = proc_control_B.q0 / proc_control_B.scale;

    // Product: '<S272>/Product1'
    proc_control_B.oa = proc_control_B.q1 / proc_control_B.scale;

    // Product: '<S272>/Product2'
    proc_control_B.ob = proc_control_B.q2 / proc_control_B.scale;

    // Product: '<S272>/Product3'
    proc_control_B.scale = proc_control_B.q3 / proc_control_B.scale;

    // Product: '<S273>/Product7' incorporates:
    //   Product: '<S274>/Product7'

    proc_control_B.t65 = proc_control_B.scale * proc_control_B.scale;

    // Product: '<S273>/Product' incorporates:
    //   Product: '<S274>/Product'

    proc_control_B.t4 = proc_control_B.oa * proc_control_B.ob;

    // Product: '<S273>/Product6' incorporates:
    //   Product: '<S275>/Product7'

    proc_control_B.t15 = proc_control_B.ob * proc_control_B.ob;

    // Sum: '<S273>/Sum' incorporates:
    //   Constant: '<S273>/Constant'
    //   Gain: '<S273>/Gain'
    //   Gain: '<S273>/Gain1'
    //   Gain: '<S273>/Gain2'
    //   Product: '<S273>/Product'
    //   Product: '<S273>/Product1'
    //   Product: '<S273>/Product2'
    //   Product: '<S273>/Product3'
    //   Product: '<S273>/Product4'
    //   Product: '<S273>/Product5'
    //   Product: '<S273>/Product6'
    //   Product: '<S273>/Product7'
    //   Product: '<S273>/Product8'
    //   Sum: '<S273>/Sum1'
    //   Sum: '<S273>/Sum2'
    //   Sum: '<S273>/Sum3'

    proc_control_B.Sum = (((proc_control_P.Constant_Value_fg -
      proc_control_B.t15) - proc_control_B.t65) * proc_control_P.Gain2_Gain_o *
                          proc_control_B.u2[0] + (proc_control_B.Product8 *
      proc_control_B.scale + proc_control_B.t4) * proc_control_P.Gain_Gain_o *
                          proc_control_B.u2[1]) + (proc_control_B.oa *
      proc_control_B.scale - proc_control_B.Product8 * proc_control_B.ob) *
      proc_control_P.Gain1_Gain_k * proc_control_B.u2[2];

    // Product: '<S274>/Product2' incorporates:
    //   Product: '<S275>/Product2'

    proc_control_B.od = proc_control_B.Product8 * proc_control_B.oa;

    // Product: '<S274>/Product6' incorporates:
    //   Product: '<S275>/Product6'

    proc_control_B.t57 = proc_control_B.oa * proc_control_B.oa;

    // Product: '<S274>/Product3' incorporates:
    //   Product: '<S275>/Product3'

    proc_control_B.Divide3_m = proc_control_B.ob * proc_control_B.scale;

    // Sum: '<S274>/Sum' incorporates:
    //   Constant: '<S274>/Constant'
    //   Gain: '<S274>/Gain'
    //   Gain: '<S274>/Gain1'
    //   Gain: '<S274>/Gain2'
    //   Product: '<S274>/Product1'
    //   Product: '<S274>/Product2'
    //   Product: '<S274>/Product3'
    //   Product: '<S274>/Product4'
    //   Product: '<S274>/Product5'
    //   Product: '<S274>/Product6'
    //   Product: '<S274>/Product8'
    //   Sum: '<S274>/Sum1'
    //   Sum: '<S274>/Sum2'
    //   Sum: '<S274>/Sum3'

    proc_control_B.Sum_o = (((proc_control_P.Constant_Value_j -
      proc_control_B.t57) - proc_control_B.t65) * proc_control_P.Gain2_Gain_k *
      proc_control_B.u2[1] + (proc_control_B.t4 - proc_control_B.Product8 *
      proc_control_B.scale) * proc_control_P.Gain_Gain_mq * proc_control_B.u2[0])
      + (proc_control_B.od + proc_control_B.Divide3_m) *
      proc_control_P.Gain1_Gain_bk * proc_control_B.u2[2];

    // Sum: '<S275>/Sum' incorporates:
    //   Constant: '<S275>/Constant'
    //   Gain: '<S275>/Gain'
    //   Gain: '<S275>/Gain1'
    //   Gain: '<S275>/Gain2'
    //   Product: '<S275>/Product'
    //   Product: '<S275>/Product1'
    //   Product: '<S275>/Product4'
    //   Product: '<S275>/Product5'
    //   Product: '<S275>/Product8'
    //   Sum: '<S275>/Sum1'
    //   Sum: '<S275>/Sum2'
    //   Sum: '<S275>/Sum3'

    proc_control_B.Sum_c = ((proc_control_B.oa * proc_control_B.scale +
      proc_control_B.Product8 * proc_control_B.ob) * proc_control_P.Gain_Gain_nh
      * proc_control_B.u2[0] + (proc_control_B.Divide3_m - proc_control_B.od) *
      proc_control_P.Gain1_Gain_c * proc_control_B.u2[1]) +
      ((proc_control_P.Constant_Value_ol - proc_control_B.t57) -
       proc_control_B.t15) * proc_control_P.Gain2_Gain_br * proc_control_B.u2[2];

    // Update for Delay: '<S267>/Delay' incorporates:
    //   Constant: '<S267>/Constant6'

    proc_control_DW.Delay_DSTATE_i = proc_control_P.Constant6_Value;
  }

  // End of Outputs for SubSystem: '<S8>/DVL Mesurments'

  // Outputs for Enabled SubSystem: '<S8>/Detph Mesurments' incorporates:
  //   EnablePort: '<S243>/Enable'

  if (rtb_newPressureMsg) {
    // MATLAB Function: '<S243>/ ' incorporates:
    //   Merge: '<S3>/Merge1'
    //   SignalConversion generated from: '<S3>/Bus Selector2'

    proc_control_u(proc_control_B.Divide2_c, proc_control_B.Product5,
                   proc_control_B.Divide_p, proc_control_B.Divide1_k,
                   proc_control_B.y_d_a);

    // Sum: '<S284>/Sum' incorporates:
    //   Product: '<S284>/Product'
    //   Product: '<S284>/Product1'
    //   Product: '<S284>/Product2'
    //   Product: '<S284>/Product3'
    //   UnaryMinus: '<S280>/Unary Minus'
    //   UnaryMinus: '<S280>/Unary Minus1'
    //   UnaryMinus: '<S280>/Unary Minus2'

    proc_control_B.Product5 = ((proc_control_B.y_d_a[0] * proc_control_B.y_d_a[0]
      + -proc_control_B.y_d_a[1] * -proc_control_B.y_d_a[1]) +
      -proc_control_B.y_d_a[2] * -proc_control_B.y_d_a[2]) +
      -proc_control_B.y_d_a[3] * -proc_control_B.y_d_a[3];

    // Product: '<S281>/Divide'
    proc_control_B.Divide_p = proc_control_B.y_d_a[0] / proc_control_B.Product5;

    // Product: '<S281>/Divide1' incorporates:
    //   UnaryMinus: '<S280>/Unary Minus'

    proc_control_B.Divide1_k = proc_control_B.y_d_a[1] / proc_control_B.Product5;

    // Product: '<S281>/Divide2' incorporates:
    //   UnaryMinus: '<S280>/Unary Minus1'

    proc_control_B.Divide2_c = proc_control_B.y_d_a[2] / proc_control_B.Product5;

    // Product: '<S281>/Divide3' incorporates:
    //   UnaryMinus: '<S280>/Unary Minus2'

    proc_control_B.Divide3_m = proc_control_B.y_d_a[3] / proc_control_B.Product5;

    // Sqrt: '<S289>/sqrt' incorporates:
    //   Product: '<S290>/Product'
    //   Product: '<S290>/Product1'
    //   Product: '<S290>/Product2'
    //   Product: '<S290>/Product3'
    //   Sum: '<S290>/Sum'
    //   UnitDelay: '<S243>/Unit Delay'

    proc_control_B.Product8 = std::sqrt(((proc_control_DW.UnitDelay_DSTATE[0] *
      proc_control_DW.UnitDelay_DSTATE[0] + proc_control_DW.UnitDelay_DSTATE[1] *
      proc_control_DW.UnitDelay_DSTATE[1]) + proc_control_DW.UnitDelay_DSTATE[2]
      * proc_control_DW.UnitDelay_DSTATE[2]) + proc_control_DW.UnitDelay_DSTATE
      [3] * proc_control_DW.UnitDelay_DSTATE[3]);

    // Product: '<S285>/Product' incorporates:
    //   UnitDelay: '<S243>/Unit Delay'

    proc_control_B.oa = proc_control_DW.UnitDelay_DSTATE[0] /
      proc_control_B.Product8;

    // Product: '<S285>/Product1' incorporates:
    //   UnitDelay: '<S243>/Unit Delay'

    proc_control_B.ob = proc_control_DW.UnitDelay_DSTATE[1] /
      proc_control_B.Product8;

    // Product: '<S285>/Product2' incorporates:
    //   UnitDelay: '<S243>/Unit Delay'

    proc_control_B.Product5 = proc_control_DW.UnitDelay_DSTATE[2] /
      proc_control_B.Product8;

    // Product: '<S285>/Product3' incorporates:
    //   UnitDelay: '<S243>/Unit Delay'

    proc_control_B.Product8 = proc_control_DW.UnitDelay_DSTATE[3] /
      proc_control_B.Product8;

    // Sum: '<S243>/Sum' incorporates:
    //   Constant: '<S243>/Constant'
    //   Constant: '<S288>/Constant'
    //   Gain: '<S288>/Gain'
    //   Gain: '<S288>/Gain1'
    //   Gain: '<S288>/Gain2'
    //   Merge: '<S3>/Merge4'
    //   Product: '<S288>/Product'
    //   Product: '<S288>/Product1'
    //   Product: '<S288>/Product2'
    //   Product: '<S288>/Product3'
    //   Product: '<S288>/Product4'
    //   Product: '<S288>/Product5'
    //   Product: '<S288>/Product6'
    //   Product: '<S288>/Product7'
    //   Product: '<S288>/Product8'
    //   SignalConversion generated from: '<S3>/Bus Selector6'
    //   Sum: '<S288>/Sum'
    //   Sum: '<S288>/Sum1'
    //   Sum: '<S288>/Sum2'
    //   Sum: '<S288>/Sum3'

    proc_control_B.zposition = proc_control_B.rtb_Merge4_Data -
      (((proc_control_B.ob * proc_control_B.Product8 + proc_control_B.oa *
         proc_control_B.Product5) * proc_control_P.Gain_Gain_bk *
        proc_control_P.physics.DepthPose[0] + (proc_control_B.Product5 *
         proc_control_B.Product8 - proc_control_B.oa * proc_control_B.ob) *
        proc_control_P.Gain1_Gain_p * proc_control_P.physics.DepthPose[1]) +
       ((proc_control_P.Constant_Value_ay - proc_control_B.ob *
         proc_control_B.ob) - proc_control_B.Product5 * proc_control_B.Product5)
       * proc_control_P.Gain2_Gain_dh * proc_control_P.physics.DepthPose[2]);

    // Update for UnitDelay: '<S243>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE[0] = proc_control_B.Divide_p;
    proc_control_DW.UnitDelay_DSTATE[1] = proc_control_B.Divide1_k;
    proc_control_DW.UnitDelay_DSTATE[2] = proc_control_B.Divide2_c;
    proc_control_DW.UnitDelay_DSTATE[3] = proc_control_B.Divide3_m;
  }

  // End of Outputs for SubSystem: '<S8>/Detph Mesurments'
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // Logic: '<S245>/NOT'
    proc_control_B.NOT = !(proc_control_B.MATLABSystem_o4 != 0.0);
  }

  // Outputs for Enabled SubSystem: '<S3>/Subsystem' incorporates:
  //   EnablePort: '<S67>/Enable'

  // Logic: '<S3>/NOT' incorporates:
  //   Delay: '<S3>/Delay'

  if (!(proc_control_B.y != 0.0)) {
    // Switch: '<S87>/Reset' incorporates:
    //   Constant: '<S67>/Constant1'
    //   Constant: '<S87>/Initial Condition'
    //   Memory: '<S87>/Memory'
    //   MinMax: '<S85>/MinMax'

    if (proc_control_P.Constant1_Value_h != 0.0) {
      rtb_NewDvlMsg = proc_control_P.MinMaxRunningResettable_vinit;
    } else {
      rtb_NewDvlMsg = (rtb_NewDvlMsg || proc_control_DW.Memory_PreviousInput_i);
    }

    // End of Switch: '<S87>/Reset'

    // Switch: '<S88>/Reset' incorporates:
    //   Constant: '<S67>/Constant'
    //   Constant: '<S88>/Initial Condition'
    //   Memory: '<S88>/Memory'
    //   MinMax: '<S86>/MinMax'

    if (proc_control_P.Constant_Value_f2j != 0.0) {
      rtb_Merge = proc_control_P.MinMaxRunningResettable1_vinit;
    } else {
      rtb_Merge = (rtb_Merge || proc_control_DW.Memory_PreviousInput_f);
    }

    // End of Switch: '<S88>/Reset'

    // MATLAB Function: '<S67>/MATLAB Function'
    proc_control_B.y = (rtb_NewDvlMsg + rtb_Merge >= 2);

    // Update for Memory: '<S87>/Memory'
    proc_control_DW.Memory_PreviousInput_i = rtb_NewDvlMsg;

    // Update for Memory: '<S88>/Memory'
    proc_control_DW.Memory_PreviousInput_f = rtb_Merge;
  }

  // End of Logic: '<S3>/NOT'
  // End of Outputs for SubSystem: '<S3>/Subsystem'

  // Logic: '<S245>/AND'
  rtb_Merge = (proc_control_B.NOT && (proc_control_B.y != 0.0));

  // Outputs for Enabled SubSystem: '<S8>/Subsystem' incorporates:
  //   EnablePort: '<S246>/Enable'

  if (rtb_Merge) {
    // Outputs for Enabled SubSystem: '<S294>/Correct1' incorporates:
    //   EnablePort: '<S295>/Enable'

    // Constant: '<S294>/Enable1'
    if (proc_control_P.Enable1_Value) {
      // MATLAB Function: '<S295>/Correct' incorporates:
      //   Constant: '<S294>/BlockOrdering'
      //   Constant: '<S294>/R1'
      //   DataStoreRead: '<S295>/Data Store ReadX'
      //   DataStoreWrite: '<S295>/Data Store WriteP'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S140>/N to A'
      //   Lookup_n-D: '<S140>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   Trigonometry: '<S271>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //   UniformRandomNumber: '<S12>/ Drift'
      //
      proc_control_B.blockOrdering_o = proc_control_P.BlockOrdering_Value;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        proc_control_B.z_l[proc_control_B.Ns] =
          proc_control_DW.x[b[proc_control_B.Ns]];
      }

      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        std::memcpy(&proc_control_B.TmpSignalConversionAtMAT_lt[0],
                    &proc_control_DW.x[0], 13U * sizeof(real_T));
        proc_control_B.Product8 = std::fmax(1.4901161193847656E-8,
          1.4901161193847656E-8 * std::abs
          (proc_control_DW.x[proc_control_B.ibmat]));
        proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.ibmat] =
          proc_control_DW.x[proc_control_B.ibmat] + proc_control_B.Product8;
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++)
        {
          proc_control_B.dHdx[proc_control_B.Ns + 7 * proc_control_B.ibmat] =
            (proc_control_B.TmpSignalConversionAtMAT_lt[b[proc_control_B.Ns]] -
             proc_control_B.z_l[proc_control_B.Ns]) / proc_control_B.Product8;
        }
      }

      proc_control_qrFactor_MMa7wW5h(proc_control_B.dHdx, proc_control_DW.P,
        proc_control_P.R1_Value, proc_control_B.Sy);
      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 13; proc_control_B.i_m++)
      {
        std::memset(&proc_control_B.A_m[proc_control_B.Ns], 0, 13U * sizeof
                    (real_T));
        proc_control_B.Ns += 13;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 13; proc_control_B.i_m
             ++) {
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
               proc_control_B.ibmat++) {
            proc_control_B.idx_k = 13 * proc_control_B.i_m +
              proc_control_B.ibmat;
            proc_control_B.A_m[proc_control_B.idx_k] += proc_control_DW.P[13 *
              proc_control_B.Ns + proc_control_B.ibmat] * proc_control_DW.P[13 *
              proc_control_B.Ns + proc_control_B.i_m];
          }
        }

        for (proc_control_B.i_m = 0; proc_control_B.i_m < 7; proc_control_B.i_m
             ++) {
          proc_control_B.K[proc_control_B.i_m + 7 * proc_control_B.Ns] = 0.0;
        }
      }

      proc_control_B.Ns = 0;
      proc_control_B.ibmat = 0;
      for (proc_control_B.idx_k = 0; proc_control_B.idx_k < 13;
           proc_control_B.idx_k++) {
        proc_control_B.idx_mc = 0;
        for (proc_control_B.idx_h = 0; proc_control_B.idx_h < 13;
             proc_control_B.idx_h++) {
          for (proc_control_B.i_m = 0; proc_control_B.i_m < 7;
               proc_control_B.i_m++) {
            proc_control_B.K_tmp = proc_control_B.i_m + proc_control_B.idx_mc;
            proc_control_B.K[proc_control_B.K_tmp] +=
              proc_control_B.A_m[proc_control_B.idx_h + proc_control_B.Ns] *
              proc_control_B.dHdx[proc_control_B.i_m + proc_control_B.ibmat];
          }

          proc_control_B.idx_mc += 7;
        }

        proc_control_B.Ns += 13;
        proc_control_B.ibmat += 7;
      }

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S242>/Enable'

      // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
      //   EnablePort: '<S270>/Enable'

      proc_control_B.idx_k = 0;

      // End of Outputs for SubSystem: '<S267>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 13;
           proc_control_B.idx_m++) {
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 7; proc_control_B.i_m
             ++) {
          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S242>/Enable'

          // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
          //   EnablePort: '<S270>/Enable'

          proc_control_B.Ns = proc_control_B.i_m + proc_control_B.idx_k;
          proc_control_B.C_l[proc_control_B.Ns] =
            proc_control_B.K[proc_control_B.Ns];

          // End of Outputs for SubSystem: '<S267>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        }

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S242>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_B.idx_k += 7;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      proc_control_trisolve_Ewqm83ue(proc_control_B.Sy, proc_control_B.C_l);

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S242>/Enable'

      // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
      //   EnablePort: '<S270>/Enable'

      proc_control_B.idx_k = 0;

      // End of Outputs for SubSystem: '<S267>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 13;
           proc_control_B.idx_m++) {
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 7; proc_control_B.i_m
             ++) {
          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S242>/Enable'

          // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
          //   EnablePort: '<S270>/Enable'

          proc_control_B.K_tmp = proc_control_B.i_m + proc_control_B.idx_k;
          proc_control_B.b_C_pe[proc_control_B.K_tmp] =
            proc_control_B.C_l[proc_control_B.K_tmp];

          // End of Outputs for SubSystem: '<S267>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        }

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S242>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_B.idx_k += 7;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 7; proc_control_B.i_m++)
      {
        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_k = 0; proc_control_B.idx_k < 7;
             proc_control_B.idx_k++) {
          proc_control_B.Sy_i[proc_control_B.idx_k + proc_control_B.Ns] =
            proc_control_B.Sy[proc_control_B.ibmat + proc_control_B.i_m];
          proc_control_B.ibmat += 7;
        }

        proc_control_B.Ns += 7;
      }

      proc_control_trisolve_kmp7BqBh(proc_control_B.Sy_i, proc_control_B.b_C_pe);
      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 7; proc_control_B.i_m++)
      {
        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_k = 0; proc_control_B.idx_k < 13;
             proc_control_B.idx_k++) {
          proc_control_B.K[proc_control_B.idx_k + proc_control_B.Ns] =
            proc_control_B.b_C_pe[proc_control_B.ibmat + proc_control_B.i_m];
          proc_control_B.ibmat += 7;
        }

        proc_control_B.Ns += 13;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 91; proc_control_B.Ns++) {
        proc_control_B.C_l[proc_control_B.Ns] =
          -proc_control_B.K[proc_control_B.Ns];
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        std::memset(&proc_control_B.A_m[proc_control_B.Ns * 13], 0, 13U * sizeof
                    (real_T));
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
             proc_control_B.ibmat++) {
          for (proc_control_B.i_m = 0; proc_control_B.i_m < 13;
               proc_control_B.i_m++) {
            proc_control_B.idx_m = 13 * proc_control_B.Ns + proc_control_B.i_m;
            proc_control_B.A_m[proc_control_B.idx_m] += proc_control_B.C_l[13 *
              proc_control_B.ibmat + proc_control_B.i_m] * proc_control_B.dHdx[7
              * proc_control_B.Ns + proc_control_B.ibmat];
          }
        }
      }

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S242>/Enable'

      // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
      //   EnablePort: '<S270>/Enable'

      proc_control_B.idx_k = 0;

      // End of Outputs for SubSystem: '<S267>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 13;
           proc_control_B.idx_m++) {
        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S242>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_B.A_m[proc_control_B.idx_k]++;
        proc_control_B.idx_k += 14;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        std::memset(&proc_control_B.C_l[proc_control_B.Ns * 13], 0, 13U * sizeof
                    (real_T));
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
             proc_control_B.ibmat++) {
          for (proc_control_B.i_m = 0; proc_control_B.i_m < 13;
               proc_control_B.i_m++) {
            proc_control_B.K_tmp = 13 * proc_control_B.Ns + proc_control_B.i_m;
            proc_control_B.C_l[proc_control_B.K_tmp] += proc_control_B.K[13 *
              proc_control_B.ibmat + proc_control_B.i_m] *
              proc_control_P.R1_Value[7 * proc_control_B.Ns +
              proc_control_B.ibmat];
          }
        }
      }

      proc_control_qrFactor_1jDj6Vzn(proc_control_B.A_m, proc_control_DW.P,
        proc_control_B.C_l);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        proc_control_B.z_l[proc_control_B.Ns] =
          proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.Ns] -
          proc_control_DW.x[b[proc_control_B.Ns]];
      }

      // DataStoreWrite: '<S295>/Data Store WriteX' incorporates:
      //   DataStoreRead: '<S295>/Data Store ReadX'
      //   MATLAB Function: '<S295>/Correct'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.rtb_u2_f = 0.0;
        proc_control_B.i_m = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
             proc_control_B.ibmat++) {
          proc_control_B.rtb_u2_f += proc_control_B.K[proc_control_B.i_m +
            proc_control_B.Ns] * proc_control_B.z_l[proc_control_B.ibmat];
          proc_control_B.i_m += 13;
        }

        proc_control_DW.x[proc_control_B.Ns] += proc_control_B.rtb_u2_f;
      }

      // End of DataStoreWrite: '<S295>/Data Store WriteX'
    }

    // End of Constant: '<S294>/Enable1'
    // End of Outputs for SubSystem: '<S294>/Correct1'

    // Outputs for Enabled SubSystem: '<S294>/Correct2' incorporates:
    //   EnablePort: '<S296>/Enable'

    // DataTypeConversion: '<S294>/DataTypeConversion_Enable2' incorporates:
    //   Constant: '<S246>/Constant'

    if (proc_control_P.Constant_Value_lx != 0.0) {
      // MATLAB Function: '<S296>/Correct' incorporates:
      //   Constant: '<S294>/R2'
      //   DataStoreRead: '<S296>/Data Store ReadX'
      //   DataStoreWrite: '<S296>/Data Store WriteP'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S140>/N to A'
      //   Lookup_n-D: '<S140>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   SignalConversion generated from: '<S301>/ SFunction '
      //   Trigonometry: '<S271>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //   UniformRandomNumber: '<S12>/ Drift'
      //
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        std::memcpy(&proc_control_B.TmpSignalConversionAtMAT_lt[0],
                    &proc_control_DW.x[0], 13U * sizeof(real_T));
        proc_control_B.Product8 = std::fmax(1.4901161193847656E-8,
          1.4901161193847656E-8 * std::abs
          (proc_control_DW.x[proc_control_B.ibmat]));
        proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.ibmat] =
          proc_control_DW.x[proc_control_B.ibmat] + proc_control_B.Product8;
        proc_control_B.dHdx_j[proc_control_B.Ns] =
          (proc_control_B.TmpSignalConversionAtMAT_lt[7] - proc_control_DW.x[7])
          / proc_control_B.Product8;
        proc_control_B.dHdx_j[proc_control_B.Ns + 1] =
          (proc_control_B.TmpSignalConversionAtMAT_lt[8] - proc_control_DW.x[8])
          / proc_control_B.Product8;
        proc_control_B.dHdx_j[proc_control_B.Ns + 2] =
          (proc_control_B.TmpSignalConversionAtMAT_lt[9] - proc_control_DW.x[9])
          / proc_control_B.Product8;
        proc_control_B.Ns += 3;
      }

      proc_control_qrFactor_qGSgSIIm(proc_control_B.dHdx_j, proc_control_DW.P,
        proc_control_P.R2_Value, proc_control_B.TmpSignalConversionAtMATL_b);
      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 13; proc_control_B.i_m++)
      {
        std::memset(&proc_control_B.A_m[proc_control_B.Ns], 0, 13U * sizeof
                    (real_T));
        proc_control_B.Ns += 13;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.idx_k = 0; proc_control_B.idx_k < 13;
           proc_control_B.idx_k++) {
        proc_control_B.idx_mc = 0;
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 13; proc_control_B.i_m
             ++) {
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
               proc_control_B.ibmat++) {
            proc_control_B.idx_h = proc_control_B.ibmat + proc_control_B.idx_mc;
            proc_control_B.A_m[proc_control_B.idx_h] +=
              proc_control_DW.P[proc_control_B.ibmat + proc_control_B.Ns] *
              proc_control_DW.P[proc_control_B.i_m + proc_control_B.Ns];
          }

          proc_control_B.idx_mc += 13;
        }

        proc_control_B.Ns += 13;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 3; proc_control_B.Ns++) {
        proc_control_B.i_m = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
             proc_control_B.ibmat++) {
          proc_control_B.K_tmp = proc_control_B.i_m + proc_control_B.Ns;
          proc_control_B.K_e[proc_control_B.K_tmp] = 0.0;
          proc_control_B.idx_k = 0;
          proc_control_B.idx_mc = 0;
          for (proc_control_B.idx_h = 0; proc_control_B.idx_h < 13;
               proc_control_B.idx_h++) {
            proc_control_B.K_e[proc_control_B.K_tmp] +=
              proc_control_B.A_m[proc_control_B.idx_k + proc_control_B.ibmat] *
              proc_control_B.dHdx_j[proc_control_B.idx_mc + proc_control_B.Ns];
            proc_control_B.idx_k += 13;
            proc_control_B.idx_mc += 3;
          }

          proc_control_B.i_m += 3;
        }
      }

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S242>/Enable'

      // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
      //   EnablePort: '<S270>/Enable'

      proc_control_B.idx_k = 0;

      // End of Outputs for SubSystem: '<S267>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 13;
           proc_control_B.idx_m++) {
        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S242>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_B.C_m[proc_control_B.idx_k] =
          proc_control_B.K_e[proc_control_B.idx_k];
        proc_control_B.C_m[proc_control_B.idx_k + 1] =
          proc_control_B.K_e[proc_control_B.idx_k + 1];
        proc_control_B.C_m[proc_control_B.idx_k + 2] =
          proc_control_B.K_e[proc_control_B.idx_k + 2];
        proc_control_B.idx_k += 3;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      proc_control_trisolve_nzh2XTxC(proc_control_B.TmpSignalConversionAtMATL_b,
        proc_control_B.C_m);

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S242>/Enable'

      // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
      //   EnablePort: '<S270>/Enable'

      proc_control_B.idx_k = 0;

      // End of Outputs for SubSystem: '<S267>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 13;
           proc_control_B.idx_m++) {
        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S242>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_B.b_C_m[proc_control_B.idx_k] =
          proc_control_B.C_m[proc_control_B.idx_k];
        proc_control_B.b_C_m[proc_control_B.idx_k + 1] =
          proc_control_B.C_m[proc_control_B.idx_k + 1];
        proc_control_B.b_C_m[proc_control_B.idx_k + 2] =
          proc_control_B.C_m[proc_control_B.idx_k + 2];
        proc_control_B.idx_k += 3;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 3; proc_control_B.i_m++)
      {
        proc_control_B.twpt[proc_control_B.Ns] =
          proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.i_m];
        proc_control_B.twpt[proc_control_B.Ns + 1] =
          proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.i_m + 3];
        proc_control_B.twpt[proc_control_B.Ns + 2] =
          proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.i_m + 6];
        proc_control_B.Ns += 3;
      }

      proc_control_trisolve_QLyTZPzT(proc_control_B.twpt, proc_control_B.b_C_m);
      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 3; proc_control_B.i_m++)
      {
        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_k = 0; proc_control_B.idx_k < 13;
             proc_control_B.idx_k++) {
          proc_control_B.K_e[proc_control_B.idx_k + proc_control_B.Ns] =
            proc_control_B.b_C_m[proc_control_B.ibmat + proc_control_B.i_m];
          proc_control_B.ibmat += 3;
        }

        proc_control_B.Ns += 13;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 39; proc_control_B.Ns++) {
        proc_control_B.C_m[proc_control_B.Ns] =
          -proc_control_B.K_e[proc_control_B.Ns];
      }

      proc_control_B.Ns = 0;
      proc_control_B.i_m = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        for (proc_control_B.idx_k = 0; proc_control_B.idx_k < 13;
             proc_control_B.idx_k++) {
          proc_control_B.idx_m = proc_control_B.idx_k + proc_control_B.Ns;
          proc_control_B.A_m[proc_control_B.idx_m] = 0.0;
          proc_control_B.A_m[proc_control_B.idx_m] +=
            proc_control_B.dHdx_j[proc_control_B.i_m] *
            proc_control_B.C_m[proc_control_B.idx_k];
          proc_control_B.A_m[proc_control_B.idx_m] +=
            proc_control_B.dHdx_j[proc_control_B.i_m + 1] *
            proc_control_B.C_m[proc_control_B.idx_k + 13];
          proc_control_B.A_m[proc_control_B.idx_m] +=
            proc_control_B.dHdx_j[proc_control_B.i_m + 2] *
            proc_control_B.C_m[proc_control_B.idx_k + 26];
        }

        proc_control_B.Ns += 13;
        proc_control_B.i_m += 3;
      }

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S242>/Enable'

      // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
      //   EnablePort: '<S270>/Enable'

      proc_control_B.idx_k = 0;

      // End of Outputs for SubSystem: '<S267>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 13;
           proc_control_B.idx_m++) {
        proc_control_B.Ns = 0;
        proc_control_B.i_m = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 3;
             proc_control_B.ibmat++) {
          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S242>/Enable'

          // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
          //   EnablePort: '<S270>/Enable'

          proc_control_B.K_tmp = proc_control_B.Ns + proc_control_B.idx_m;
          proc_control_B.C_m[proc_control_B.K_tmp] = 0.0;
          proc_control_B.C_m[proc_control_B.K_tmp] +=
            proc_control_P.R2_Value[proc_control_B.i_m] *
            proc_control_B.K_e[proc_control_B.idx_m];
          proc_control_B.C_m[proc_control_B.K_tmp] +=
            proc_control_P.R2_Value[proc_control_B.i_m + 1] *
            proc_control_B.K_e[proc_control_B.idx_m + 13];
          proc_control_B.C_m[proc_control_B.K_tmp] +=
            proc_control_P.R2_Value[proc_control_B.i_m + 2] *
            proc_control_B.K_e[proc_control_B.idx_m + 26];

          // End of Outputs for SubSystem: '<S267>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          proc_control_B.Ns += 13;
          proc_control_B.i_m += 3;
        }

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S242>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_B.A_m[proc_control_B.idx_k]++;
        proc_control_B.idx_k += 14;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      proc_control_qrFactor_3bJrEoRT(proc_control_B.A_m, proc_control_DW.P,
        proc_control_B.C_m);
      proc_control_B.Divide_p = proc_control_B.Sum - proc_control_DW.x[7];
      proc_control_B.t65 = proc_control_B.Sum_o - proc_control_DW.x[8];
      proc_control_B.t4 = proc_control_B.Sum_c - proc_control_DW.x[9];

      // DataStoreWrite: '<S296>/Data Store WriteX' incorporates:
      //   DataStoreRead: '<S296>/Data Store ReadX'
      //   MATLAB Function: '<S296>/Correct'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_DW.x[proc_control_B.Ns] +=
          (proc_control_B.K_e[proc_control_B.Ns + 13] * proc_control_B.t65 +
           proc_control_B.K_e[proc_control_B.Ns] * proc_control_B.Divide_p) +
          proc_control_B.K_e[proc_control_B.Ns + 26] * proc_control_B.t4;
      }

      // End of DataStoreWrite: '<S296>/Data Store WriteX'
    }

    // End of DataTypeConversion: '<S294>/DataTypeConversion_Enable2'
    // End of Outputs for SubSystem: '<S294>/Correct2'

    // Outputs for Enabled SubSystem: '<S294>/Correct3' incorporates:
    //   EnablePort: '<S297>/Enable'

    // Constant: '<S294>/Enable3'
    if (proc_control_P.Enable3_Value) {
      // MATLAB Function: '<S297>/Correct' incorporates:
      //   Constant: '<S294>/R3'
      //   DataStoreRead: '<S297>/Data Store ReadX'
      //   DataStoreWrite: '<S297>/Data Store WriteP'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S140>/N to A'
      //   Lookup_n-D: '<S140>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   Trigonometry: '<S271>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //   UniformRandomNumber: '<S12>/ Drift'
      //
      EKFCorrectorAdditive_g_6pDXID_k(proc_control_P.R3_Value, proc_control_DW.x,
        proc_control_DW.P, &proc_control_B.oa, proc_control_B.K_j,
        &proc_control_B.Product8, proc_control_B.TmpSignalConversionAtMAT_lt,
        &proc_control_B.theta0);
      proc_control_B.Divide_p = proc_control_B.zposition - proc_control_B.oa;
      std::memcpy(&proc_control_B.z_k[0], &proc_control_B.K_j[0], 13U * sizeof
                  (real_T));
      trisolve_jVll4a1A(proc_control_B.Product8, proc_control_B.z_k);

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S242>/Enable'

      // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
      //   EnablePort: '<S270>/Enable'

      std::memcpy(&proc_control_B.K_j[0], &proc_control_B.z_k[0], 13U * sizeof
                  (real_T));

      // End of Outputs for SubSystem: '<S267>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      trisolve_jVll4a1A(proc_control_B.Product8, proc_control_B.K_j);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.z_k[proc_control_B.Ns] =
          -proc_control_B.K_j[proc_control_B.Ns];
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 13; proc_control_B.i_m++)
      {
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
             proc_control_B.ibmat++) {
          proc_control_B.A_m[proc_control_B.ibmat + proc_control_B.Ns] =
            proc_control_B.z_k[proc_control_B.ibmat] *
            proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.i_m];
        }

        proc_control_B.Ns += 13;
      }

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S242>/Enable'

      // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
      //   EnablePort: '<S270>/Enable'

      proc_control_B.idx_k = 0;

      // End of Outputs for SubSystem: '<S267>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 13;
           proc_control_B.idx_m++) {
        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S242>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_B.z_k[proc_control_B.idx_m] =
          proc_control_B.K_j[proc_control_B.idx_m] * proc_control_B.theta0;
        proc_control_B.A_m[proc_control_B.idx_k]++;
        proc_control_B.idx_k += 14;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      proc_control_qrFactor_TeAoo2Mt(proc_control_B.A_m, proc_control_DW.P,
        proc_control_B.z_k);

      // DataStoreWrite: '<S297>/Data Store WriteX' incorporates:
      //   DataStoreRead: '<S297>/Data Store ReadX'
      //   MATLAB Function: '<S297>/Correct'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_DW.x[proc_control_B.Ns] +=
          proc_control_B.K_j[proc_control_B.Ns] * proc_control_B.Divide_p;
      }

      // End of DataStoreWrite: '<S297>/Data Store WriteX'
    }

    // End of Constant: '<S294>/Enable3'
    // End of Outputs for SubSystem: '<S294>/Correct3'

    // Outputs for Atomic SubSystem: '<S294>/Output'
    // DataStoreRead: '<S298>/Data Store Read'
    std::memcpy(&proc_control_B.DataStoreRead[0], &proc_control_DW.x[0], 13U *
                sizeof(real_T));

    // End of Outputs for SubSystem: '<S294>/Output'

    // Outputs for Atomic SubSystem: '<S294>/Predict'
    // MATLAB Function: '<S299>/Predict' incorporates:
    //   Constant: '<S294>/Q'
    //   DataStoreRead: '<S299>/Data Store ReadX'
    //   DataStoreWrite: '<S299>/Data Store WriteP'
    //   Delay: '<S247>/ '
    //   ZeroOrderHold: '<S247>/Zero-Order Hold'

    for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
      proc_control_B.dv27[proc_control_B.Ns] = 0.0;
    }

    for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 2;
         proc_control_B.idx_m++) {
      AUV8QuatPerturbedSimFc_Tstvmp_b(proc_control_DW.x, proc_control_B.dv27,
        proc_control_B.u, proc_control_B.TmpSignalConversionAtMAT_lt);
    }

    std::memcpy(&proc_control_B.z_k[0], &proc_control_DW.x[0], 13U * sizeof
                (real_T));
    for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
      proc_control_B.dv27[proc_control_B.Ns] = 0.0;
    }

    for (proc_control_B.i_m = 0; proc_control_B.i_m < 2; proc_control_B.i_m++) {
      AUV8QuatPerturbedSimFc_Tstvmp_b(proc_control_DW.x, proc_control_B.dv27,
        proc_control_B.u, proc_control_B.K_j);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.z_k[proc_control_B.Ns] +=
          proc_control_B.K_j[proc_control_B.Ns] * 0.01;
      }
    }

    for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
      proc_control_B.dv27[proc_control_B.Ns] = 0.0;
    }

    for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
         proc_control_B.ibmat++) {
      std::memcpy(&proc_control_B.TmpSignalConversionAtMAT_lt[0],
                  &proc_control_DW.x[0], 13U * sizeof(real_T));
      proc_control_B.Product8 = std::fmax(1.4901161193847656E-8,
        1.4901161193847656E-8 * std::abs(proc_control_DW.x[proc_control_B.ibmat]));
      proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.ibmat] =
        proc_control_DW.x[proc_control_B.ibmat] + proc_control_B.Product8;
      std::memcpy(&proc_control_B.imz[0],
                  &proc_control_B.TmpSignalConversionAtMAT_lt[0], 13U * sizeof
                  (real_T));
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 2; proc_control_B.i_m++)
      {
        AUV8QuatPerturbedSimFc_Tstvmp_b
          (proc_control_B.TmpSignalConversionAtMAT_lt, proc_control_B.dv27,
           proc_control_B.u, proc_control_B.K_j);
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.imz[proc_control_B.Ns] +=
            proc_control_B.K_j[proc_control_B.Ns] * 0.01;
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.A_m[proc_control_B.Ns + 13 * proc_control_B.ibmat] =
          (proc_control_B.imz[proc_control_B.Ns] -
           proc_control_B.z_k[proc_control_B.Ns]) / proc_control_B.Product8;
      }
    }

    std::memcpy(&proc_control_B.TmpSignalConversionAtMAT_lt[0],
                &proc_control_DW.x[0], 13U * sizeof(real_T));
    for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
      proc_control_B.dv27[proc_control_B.Ns] = 0.0;
    }

    for (proc_control_B.i_m = 0; proc_control_B.i_m < 2; proc_control_B.i_m++) {
      AUV8QuatPerturbedSimFc_Tstvmp_b(proc_control_DW.x, proc_control_B.dv27,
        proc_control_B.u, proc_control_B.K_j);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.Ns] +=
          proc_control_B.K_j[proc_control_B.Ns] * 0.01;
      }
    }

    proc_control_qrFactor_O58Jhapw(proc_control_B.A_m, proc_control_DW.P,
      proc_control_P.Q_Value);

    // DataStoreWrite: '<S299>/Data Store WriteX' incorporates:
    //   MATLAB Function: '<S299>/Predict'

    std::memcpy(&proc_control_DW.x[0],
                &proc_control_B.TmpSignalConversionAtMAT_lt[0], 13U * sizeof
                (real_T));

    // End of Outputs for SubSystem: '<S294>/Predict'
  }

  // End of Outputs for SubSystem: '<S8>/Subsystem'

  // Sum: '<S293>/Sum' incorporates:
  //   Product: '<S293>/Product'
  //   Product: '<S293>/Product1'
  //   Product: '<S293>/Product2'
  //   Product: '<S293>/Product3'

  proc_control_B.Product5 = ((proc_control_B.DataStoreRead[3] *
    proc_control_B.DataStoreRead[3] + proc_control_B.DataStoreRead[4] *
    proc_control_B.DataStoreRead[4]) + proc_control_B.DataStoreRead[5] *
    proc_control_B.DataStoreRead[5]) + proc_control_B.DataStoreRead[6] *
    proc_control_B.DataStoreRead[6];

  // Product: '<S291>/Divide'
  proc_control_B.Divide_p = proc_control_B.DataStoreRead[3] /
    proc_control_B.Product5;

  // Product: '<S291>/Divide1' incorporates:
  //   UnaryMinus: '<S292>/Unary Minus'

  proc_control_B.Divide1_k = -proc_control_B.DataStoreRead[4] /
    proc_control_B.Product5;

  // Product: '<S291>/Divide2' incorporates:
  //   UnaryMinus: '<S292>/Unary Minus1'

  proc_control_B.Divide2_c = -proc_control_B.DataStoreRead[5] /
    proc_control_B.Product5;

  // Product: '<S291>/Divide3' incorporates:
  //   UnaryMinus: '<S292>/Unary Minus2'

  proc_control_B.Divide3_m = -proc_control_B.DataStoreRead[6] /
    proc_control_B.Product5;

  // Outputs for Enabled SubSystem: '<Root>/Sensor Manager' incorporates:
  //   EnablePort: '<S6>/Enable'

  if (rtb_Merge) {
    // MATLAB Function: '<S115>/MATLAB Function1'
    proc_control_B.msg_a.Position.X = proc_control_B.DataStoreRead[0];
    proc_control_B.msg_a.Position.Y = proc_control_B.DataStoreRead[1];
    proc_control_B.msg_a.Position.Z = proc_control_B.DataStoreRead[2];
    proc_control_B.msg_a.Orientation.W = proc_control_B.DataStoreRead[3];
    proc_control_B.msg_a.Orientation.X = proc_control_B.DataStoreRead[4];
    proc_control_B.msg_a.Orientation.Y = proc_control_B.DataStoreRead[5];
    proc_control_B.msg_a.Orientation.Z = proc_control_B.DataStoreRead[6];

    // Outputs for Atomic SubSystem: '<S115>/Publish'
    // MATLABSystem: '<S122>/SinkBlock'
    Pub_proc_control_388.publish(&proc_control_B.msg_a);

    // End of Outputs for SubSystem: '<S115>/Publish'

    // Sqrt: '<S136>/sqrt' incorporates:
    //   Product: '<S137>/Product'
    //   Product: '<S137>/Product1'
    //   Product: '<S137>/Product2'
    //   Product: '<S137>/Product3'
    //   Sum: '<S137>/Sum'

    proc_control_B.absxk = std::sqrt(((proc_control_B.Divide_p *
      proc_control_B.Divide_p + proc_control_B.Divide1_k *
      proc_control_B.Divide1_k) + proc_control_B.Divide2_c *
      proc_control_B.Divide2_c) + proc_control_B.Divide3_m *
      proc_control_B.Divide3_m);

    // Product: '<S131>/Product'
    proc_control_B.t = proc_control_B.Divide_p / proc_control_B.absxk;

    // Product: '<S131>/Product1'
    proc_control_B.scale = proc_control_B.Divide1_k / proc_control_B.absxk;

    // Product: '<S131>/Product2'
    proc_control_B.Product8 = proc_control_B.Divide2_c / proc_control_B.absxk;

    // Product: '<S131>/Product3'
    proc_control_B.absxk = proc_control_B.Divide3_m / proc_control_B.absxk;

    // Fcn: '<S127>/fcn3'
    proc_control_B.Divide_p = (proc_control_B.scale * proc_control_B.absxk +
      proc_control_B.t * proc_control_B.Product8) * 2.0;

    // If: '<S132>/If' incorporates:
    //   Constant: '<S133>/Constant'
    //   Constant: '<S134>/Constant'

    if (proc_control_B.Divide_p > 1.0) {
      proc_control_B.Divide_p = proc_control_P.Constant_Value_pz;
    } else if (proc_control_B.Divide_p < -1.0) {
      proc_control_B.Divide_p = proc_control_P.Constant_Value_pm;
    }

    // End of If: '<S132>/If'

    // Fcn: '<S127>/fcn2' incorporates:
    //   Fcn: '<S127>/fcn5'

    proc_control_B.t4 = proc_control_B.t * proc_control_B.t;
    proc_control_B.t65 = proc_control_B.scale * proc_control_B.scale;
    proc_control_B.t15 = proc_control_B.Product8 * proc_control_B.Product8;
    proc_control_B.od = proc_control_B.absxk * proc_control_B.absxk;

    // Trigonometry: '<S130>/trigFcn'
    if (proc_control_B.Divide_p > 1.0) {
      proc_control_B.Divide_p = 1.0;
    } else if (proc_control_B.Divide_p < -1.0) {
      proc_control_B.Divide_p = -1.0;
    }

    // MATLAB Function: '<S116>/MATLAB Function1' incorporates:
    //   Constant: '<S123>/Constant'
    //   Fcn: '<S127>/fcn1'
    //   Fcn: '<S127>/fcn2'
    //   Fcn: '<S127>/fcn4'
    //   Fcn: '<S127>/fcn5'
    //   Gain: '<S128>/Gain'
    //   Gain: '<S129>/Gain'
    //   SignalConversion generated from: '<S125>/ SFunction '
    //   Trigonometry: '<S130>/Trigonometric Function1'
    //   Trigonometry: '<S130>/Trigonometric Function3'
    //   Trigonometry: '<S130>/trigFcn'

    proc_control_B.msg_po = proc_control_P.Constant_Value_fw;
    proc_control_B.msg_po.Pose.Pose.Position.X = proc_control_B.DataStoreRead[0];
    proc_control_B.msg_po.Pose.Pose.Position.Y = proc_control_B.DataStoreRead[1];
    proc_control_B.msg_po.Pose.Pose.Position.Z = proc_control_B.DataStoreRead[2];
    proc_control_B.msg_po.Pose.Pose.Orientation.X = proc_control_rt_atan2d_snf
      ((proc_control_B.Product8 * proc_control_B.absxk - proc_control_B.t *
        proc_control_B.scale) * -2.0, ((proc_control_B.t4 - proc_control_B.t65)
        - proc_control_B.t15) + proc_control_B.od) * proc_control_P.Gain_Gain_ei;
    proc_control_B.msg_po.Pose.Pose.Orientation.Y = proc_control_P.Gain_Gain_ei *
      std::asin(proc_control_B.Divide_p);
    proc_control_B.msg_po.Pose.Pose.Orientation.Z = proc_control_rt_atan2d_snf
      ((proc_control_B.scale * proc_control_B.Product8 - proc_control_B.t *
        proc_control_B.absxk) * -2.0, ((proc_control_B.t4 + proc_control_B.t65)
        - proc_control_B.t15) - proc_control_B.od) * proc_control_P.Gain_Gain_ei;
    proc_control_B.msg_po.Twist.Twist.Linear.X = proc_control_B.DataStoreRead[7];
    proc_control_B.msg_po.Twist.Twist.Linear.Y = proc_control_B.DataStoreRead[8];
    proc_control_B.msg_po.Twist.Twist.Linear.Z = proc_control_B.DataStoreRead[9];
    proc_control_B.msg_po.Twist.Twist.Angular.X = proc_control_P.Gain_Gain_i *
      proc_control_B.DataStoreRead[10];
    proc_control_B.msg_po.Twist.Twist.Angular.Y = proc_control_P.Gain_Gain_i *
      proc_control_B.DataStoreRead[11];
    proc_control_B.msg_po.Twist.Twist.Angular.Z = proc_control_P.Gain_Gain_i *
      proc_control_B.DataStoreRead[12];

    // Outputs for Atomic SubSystem: '<S116>/Publish'
    // MATLABSystem: '<S126>/SinkBlock'
    Pub_proc_control_163.publish(&proc_control_B.msg_po);

    // End of Outputs for SubSystem: '<S116>/Publish'

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.WorldPosition[0] = proc_control_B.DataStoreRead[0];
    proc_control_B.WorldPosition[1] = proc_control_B.DataStoreRead[1];
    proc_control_B.WorldPosition[2] = proc_control_B.DataStoreRead[2];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.qS2W[0] = proc_control_B.DataStoreRead[3];
    proc_control_B.qS2W[1] = proc_control_B.DataStoreRead[4];
    proc_control_B.qS2W[2] = proc_control_B.DataStoreRead[5];
    proc_control_B.qS2W[3] = proc_control_B.DataStoreRead[6];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.BodyVelocity[0] = proc_control_B.DataStoreRead[7];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.AngularRate[0] = proc_control_B.DataStoreRead[10];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.BodyVelocity[1] = proc_control_B.DataStoreRead[8];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.AngularRate[1] = proc_control_B.DataStoreRead[11];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.BodyVelocity[2] = proc_control_B.DataStoreRead[9];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.AngularRate[2] = proc_control_B.DataStoreRead[12];

    // BusAssignment: '<S114>/Bus Assignment' incorporates:
    //   DataTypeConversion: '<S114>/Cast To Boolean'

    BusAssignment.Data = (proc_control_B.y != 0.0);

    // ZeroOrderHold: '<S114>/Zero-Order Hold'
    if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
      // Outputs for Atomic SubSystem: '<S114>/Publish'
      // MATLABSystem: '<S118>/SinkBlock'
      Pub_proc_control_116.publish(&BusAssignment);

      // End of Outputs for SubSystem: '<S114>/Publish'
    }

    // End of ZeroOrderHold: '<S114>/Zero-Order Hold'
  }

  // End of Outputs for SubSystem: '<Root>/Sensor Manager'
  if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
    // Outputs for Atomic SubSystem: '<S309>/Subscribe'
    // MATLABSystem: '<S317>/SourceBlock'
    proc_control_B.SourceBlock_o1 = Sub_proc_control_184_1581.getLatestMessage
      (&proc_control_B.b_varargout_2);

    // Outputs for Enabled SubSystem: '<S317>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S318>/Enable'

    if (proc_control_B.SourceBlock_o1) {
      // SignalConversion generated from: '<S318>/In1' incorporates:
      //   MATLABSystem: '<S317>/SourceBlock'

      proc_control_B.In1 = proc_control_B.b_varargout_2;
    }

    // End of Outputs for SubSystem: '<S317>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S309>/Subscribe'
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[1] == 0) {
    // Outputs for Atomic SubSystem: '<S308>/Subscribe2'
    // MATLABSystem: '<S315>/SourceBlock'
    rtb_Merge = Sub_proc_control_184_1122.getLatestMessage
      (&proc_control_B.b_varargout_2_n);

    // Outputs for Enabled SubSystem: '<S315>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S316>/Enable'

    if (rtb_Merge) {
      // SignalConversion generated from: '<S316>/In1'
      proc_control_B.In1_od = proc_control_B.b_varargout_2_n;
    }

    // End of MATLABSystem: '<S315>/SourceBlock'
    // End of Outputs for SubSystem: '<S315>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S308>/Subscribe2'

    // Gain: '<S308>/Gain'
    proc_control_B.Gain[0] = proc_control_P.Gain_Gain_g *
      proc_control_B.In1_od.Angular.X;
    proc_control_B.Gain[1] = proc_control_P.Gain_Gain_g *
      proc_control_B.In1_od.Angular.Y;
    proc_control_B.Gain[2] = proc_control_P.Gain_Gain_g *
      proc_control_B.In1_od.Angular.Z;
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    int8_T rtAction;
    int8_T rtPrevAction;

    // SwitchCase: '<S9>/Switch Case' incorporates:
    //   Concatenate: '<S324>/Matrix Concatenate'
    //   Constant: '<S324>/Constant1'
    //   Logic: '<S312>/OR'
    //   MATLABSystem: '<S325>/SourceBlock'

    rtPrevAction = proc_control_DW.SwitchCase_ActiveSubsystem;
    switch (proc_control_B.DataTypeConversion_j) {
     case 19:
     case 20:
     case 21:
      rtAction = 0;
      break;

     case 10:
      rtAction = 1;
      break;

     case 11:
     case 30:
     case 31:
     case 40:
     case 41:
      rtAction = 2;
      break;

     default:
      rtAction = 3;
      break;
    }

    proc_control_DW.SwitchCase_ActiveSubsystem = rtAction;
    switch (rtAction) {
     case 0:
      // Outputs for IfAction SubSystem: '<S9>/SpaceNav' incorporates:
      //   ActionPort: '<S307>/Action Port'

      // SignalConversion generated from: '<S307>/Transpose' incorporates:
      //   Constant: '<S307>/Constant7'

      for (proc_control_B.i_m = 0; proc_control_B.i_m < 7; proc_control_B.i_m++)
      {
        proc_control_B.K_j[proc_control_B.i_m] =
          proc_control_P.Constant7_Value[proc_control_B.i_m];
      }

      proc_control_B.K_j[7] = proc_control_B.In1_od.Linear.X;
      proc_control_B.K_j[8] = proc_control_B.In1_od.Linear.Y;
      proc_control_B.K_j[9] = proc_control_B.In1_od.Linear.Z;
      proc_control_B.K_j[10] = proc_control_B.Gain[0];
      proc_control_B.K_j[11] = proc_control_B.Gain[1];
      proc_control_B.K_j[12] = proc_control_B.Gain[2];

      // MATLAB Function: '<S307>/MATLAB Function1' incorporates:
      //   Math: '<S307>/Transpose'

      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 13;
           proc_control_B.idx_m++) {
        proc_control_B.ibmat = proc_control_B.idx_m * 10;
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 10; proc_control_B.i_m
             ++) {
          proc_control_B.y_j[proc_control_B.ibmat + proc_control_B.i_m] =
            proc_control_B.K_j[proc_control_B.idx_m];
        }
      }

      // End of MATLAB Function: '<S307>/MATLAB Function1'

      // Merge generated from: '<S9>/Merge' incorporates:
      //   SignalConversion generated from: '<S307>/Output'

      std::memcpy(&proc_control_B.Reference[0], &proc_control_B.y_j[0], 130U *
                  sizeof(real_T));

      // Merge generated from: '<S9>/Merge' incorporates:
      //   Constant: '<S307>/Constant1'
      //   SignalConversion generated from: '<S307>/Output'

      proc_control_B.isReached = proc_control_P.Constant1_Value_ds;

      // Merge generated from: '<S9>/Merge' incorporates:
      //   Constant: '<S307>/Constant2'
      //   SignalConversion generated from: '<S307>/Output'

      proc_control_B.isTrajDone = proc_control_P.Constant2_Value_l;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 7; proc_control_B.i_m++)
      {
        // Merge generated from: '<S9>/Merge' incorporates:
        //   Math: '<S307>/Transpose'
        //   SignalConversion generated from: '<S307>/Output'

        proc_control_B.target[proc_control_B.i_m] =
          proc_control_B.K_j[proc_control_B.i_m];
      }

      // End of Outputs for SubSystem: '<S9>/SpaceNav'
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S9>/SubsystemAuto' incorporates:
      //   ActionPort: '<S311>/Action Port'

      // RelationalOperator: '<S323>/Compare' incorporates:
      //   Constant: '<S323>/Constant'

      rtb_Merge = (static_cast<int32_T>(proc_control_B.SourceBlock_o1) >
                   static_cast<int32_T>(proc_control_P.Constant_Value_hm));

      // SignalConversion generated from: '<S311>/MATLAB System'
      proc_control_B.z_k[0] = proc_control_B.WorldPosition[0];
      proc_control_B.z_k[1] = proc_control_B.WorldPosition[1];
      proc_control_B.z_k[2] = proc_control_B.WorldPosition[2];
      proc_control_B.z_k[3] = proc_control_B.qS2W[0];
      proc_control_B.z_k[4] = proc_control_B.qS2W[1];
      proc_control_B.z_k[5] = proc_control_B.qS2W[2];
      proc_control_B.z_k[6] = proc_control_B.qS2W[3];
      proc_control_B.z_k[7] = proc_control_B.BodyVelocity[0];
      proc_control_B.z_k[10] = proc_control_B.AngularRate[0];
      proc_control_B.z_k[8] = proc_control_B.BodyVelocity[1];
      proc_control_B.z_k[11] = proc_control_B.AngularRate[1];
      proc_control_B.z_k[9] = proc_control_B.BodyVelocity[2];
      proc_control_B.z_k[12] = proc_control_B.AngularRate[2];

      // Merge generated from: '<S9>/Merge' incorporates:
      //   MATLABSystem: '<S311>/MATLAB System'
      //   RelationalOperator: '<S322>/FixPt Relational Operator'
      //   UnitDelay: '<S322>/Delay Input1'
      //
      //  Block description for '<S322>/Delay Input1':
      //
      //   Store in Global RAM

      MultiTrajectoryManager_stepImpl(&proc_control_DW.obj_o,
        static_cast<int32_T>(rtb_Merge) > static_cast<int32_T>
        (proc_control_DW.DelayInput1_DSTATE), proc_control_B.In1.Transforms,
        proc_control_B.In1.Transforms_SL_Info.ReceivedLength,
        proc_control_B.In1.Velocities, proc_control_B.d, proc_control_B.z_k,
        proc_control_B.y_j, &proc_control_B.isReached,
        &proc_control_B.isTrajDone, proc_control_B.TmpSignalConversionAtMATLAB);

      // Merge generated from: '<S9>/Merge' incorporates:
      //   MATLABSystem: '<S311>/MATLAB System'
      //   SignalConversion generated from: '<S311>/MATLAB System'

      std::memcpy(&proc_control_B.Reference[0], &proc_control_B.y_j[0], 130U *
                  sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        // Merge generated from: '<S9>/Merge' incorporates:
        //   MATLABSystem: '<S311>/MATLAB System'
        //   SignalConversion generated from: '<S311>/MATLAB System'

        proc_control_B.target[proc_control_B.Ns] =
          proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.Ns];
      }

      // Update for UnitDelay: '<S322>/Delay Input1'
      //
      //  Block description for '<S322>/Delay Input1':
      //
      //   Store in Global RAM

      proc_control_DW.DelayInput1_DSTATE = rtb_Merge;

      // End of Outputs for SubSystem: '<S9>/SubsystemAuto'
      break;

     case 2:
      {
        if (rtAction != rtPrevAction) {
          // InitializeConditions for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S312>/Action Port'

          // InitializeConditions for SwitchCase: '<S9>/Switch Case' incorporates:
          //   Delay: '<S312>/Delay1'

          proc_control_DW.Delay1_DSTATE_c =
            proc_control_P.Delay1_InitialCondition_k;

          // End of InitializeConditions for SubSystem: '<S9>/singleWpts Trajectory' 

          // SystemReset for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S312>/Action Port'

          //  Fonction Reset
          //  Initialize / reset discrete-state properties
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 18; proc_control_B.Ns
               ++) {
            // SystemReset for SwitchCase: '<S9>/Switch Case' incorporates:
            //   MATLABSystem: '<S312>/MATLAB System1'

            proc_control_DW.obj_a.poseList[proc_control_B.Ns] = 999.0;
          }

          // SystemReset for SwitchCase: '<S9>/Switch Case' incorporates:
          //   DiscreteIntegrator: '<S327>/Discrete-Time Integrator'
          //   MATLABSystem: '<S312>/MATLAB System1'

          proc_control_DW.obj_a.poseList[0] = 0.0;
          proc_control_DW.obj_a.poseList[2] = 0.0;
          proc_control_DW.obj_a.poseList[4] = 0.0;
          proc_control_DW.obj_a.poseList[6] = 1.0;
          proc_control_DW.obj_a.poseList[8] = 0.0;
          proc_control_DW.obj_a.poseList[10] = 0.0;
          proc_control_DW.obj_a.poseList[12] = 0.0;
          proc_control_DW.obj_a.poseList[14] = 0.0;
          proc_control_DW.obj_a.poseList[16] = 0.0;

          // initCond(1,1:7);
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++)
          {
            proc_control_DW.obj_a.initcond[proc_control_B.Ns] =
              tmp_0[proc_control_B.Ns];
          }

          proc_control_DW.obj_a.i = 2.0;

          // SystemReset for Resettable SubSystem: '<S312>/Trajectory generator' 
          proc_control_DW.DiscreteTimeIntegrator_DSTATE =
            proc_control_P.DiscreteTimeIntegrator_IC;

          // End of SystemReset for SubSystem: '<S312>/Trajectory generator'
          // End of SystemReset for SubSystem: '<S9>/singleWpts Trajectory'
          //  Fonction reset
          //  Initialize / reset discrete-state properties
        }

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S312>/Action Port'

        // Outputs for Atomic SubSystem: '<S312>/Subscribe'
        // MATLABSystem: '<S325>/SourceBlock'
        rtb_Merge = Sub_proc_control_184_1168.getLatestMessage
          (&proc_control_B.b_varargout_2_p);

        // Outputs for Enabled SubSystem: '<S312>/Subsystem1' incorporates:
        //   EnablePort: '<S326>/Enable'

        // Outputs for Enabled SubSystem: '<S325>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S328>/Enable'

        if (rtb_Merge) {
          // DataTypeConversion: '<S326>/Data Type Conversion'
          proc_control_B.DataTypeConversion[0] =
            proc_control_B.b_varargout_2_p.Position.X;
          proc_control_B.DataTypeConversion[1] =
            proc_control_B.b_varargout_2_p.Position.Y;
          proc_control_B.DataTypeConversion[2] =
            proc_control_B.b_varargout_2_p.Position.Z;
          proc_control_B.DataTypeConversion[3] =
            proc_control_B.b_varargout_2_p.Orientation.Z;
          proc_control_B.DataTypeConversion[4] =
            proc_control_B.b_varargout_2_p.Orientation.Y;
          proc_control_B.DataTypeConversion[5] =
            proc_control_B.b_varargout_2_p.Orientation.X;

          // DataTypeConversion: '<S326>/Data Type Conversion1'
          proc_control_B.DataTypeConversion1[0] =
            proc_control_B.b_varargout_2_p.Frame;
          proc_control_B.DataTypeConversion1[1] =
            proc_control_B.b_varargout_2_p.Speed;

          // DataTypeConversion: '<S326>/Data Type Conversion2'
          proc_control_B.DataTypeConversion2 =
            proc_control_B.b_varargout_2_p.Fine;
        }

        // End of Outputs for SubSystem: '<S325>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S312>/Subsystem1'
        // End of Outputs for SubSystem: '<S312>/Subscribe'

        // SignalConversion generated from: '<S312>/MATLAB System1' incorporates:
        //   MATLABSystem: '<S325>/SourceBlock'

        for (proc_control_B.i_m = 0; proc_control_B.i_m < 6; proc_control_B.i_m
             ++) {
          proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.i_m] =
            proc_control_B.DataTypeConversion[proc_control_B.i_m];
        }

        proc_control_B.TmpSignalConversionAtMATL_b[6] =
          proc_control_B.DataTypeConversion1[0];
        proc_control_B.TmpSignalConversionAtMATL_b[7] =
          proc_control_B.DataTypeConversion1[1];
        proc_control_B.TmpSignalConversionAtMATL_b[8] =
          proc_control_B.DataTypeConversion2;

        // SignalConversion generated from: '<S312>/MATLAB System1'
        proc_control_B.TmpSignalConversionAtMATLAB[0] =
          proc_control_B.WorldPosition[0];
        proc_control_B.TmpSignalConversionAtMATLAB[1] =
          proc_control_B.WorldPosition[1];
        proc_control_B.TmpSignalConversionAtMATLAB[2] =
          proc_control_B.WorldPosition[2];

        // MATLABSystem: '<S312>/MATLAB System1' incorporates:
        //   Constant: '<S312>/Constant'
        //   Delay: '<S312>/Delay1'
        //   MATLABSystem: '<S325>/SourceBlock'
        //   SignalConversion generated from: '<S312>/MATLAB System1'

        //  Main appeller à chaque exécution
        //  Suppression du buffer.
        //  ======================================================================== 
        //  Sous Routines
        // ==========================================================================         
        //  Fonction qui interprete les message ROS
        if (proc_control_P.Constant_Value_ha == 1.0) {
          //  supprimer le buffer de way points
          proc_control_B.Ns = 0;
          for (proc_control_B.i_m = 0; proc_control_B.i_m < 9;
               proc_control_B.i_m++) {
            proc_control_DW.obj_a.poseList[proc_control_B.Ns + 1] = 999.0;
            proc_control_B.Ns += 2;
          }

          proc_control_DW.obj_a.i = 2.0;
        }

        // Outputs for Atomic SubSystem: '<S312>/Subscribe'
        //  Ajout d'un waypoint provenant de ROS.
        if (rtb_Merge && (proc_control_DW.obj_a.i <= 2.0)) {
          uint8_T tmp;

          // ==========================================================================    
          //  Fonction qui interprete les waypoints reçu par ROS
          //  Determiner le quaternion en fonction des angles d'euler.
          //  Orde de rotation : ZYX.
          //  Reel
          //  Information sur le nouveau waypoints
          std::memset(&proc_control_B.twpt[0], 0, 9U * sizeof(real_T));
          proc_control_B.twpt[7] = proc_control_B.DataTypeConversion1[1];

          //  Information de la pose précédente
          //  LastPosition
          //  LastQuaternion
          //  transformer les angle d'euler quaternions
          proc_control_B.rtb_u2_f = 0.017453292519943295 *
            proc_control_B.TmpSignalConversionAtMATL_b[3] / 2.0;
          proc_control_B.c_f[0] = proc_control_B.rtb_u2_f;
          proc_control_B.u2[0] = proc_control_B.rtb_u2_f;
          proc_control_B.rtb_u2_f = 0.017453292519943295 *
            proc_control_B.TmpSignalConversionAtMATL_b[4] / 2.0;
          proc_control_B.c_f[1] = proc_control_B.rtb_u2_f;
          proc_control_B.u2[1] = proc_control_B.rtb_u2_f;
          proc_control_B.rtb_u2_f = 0.017453292519943295 *
            proc_control_B.TmpSignalConversionAtMATL_b[5] / 2.0;
          proc_control_B.c_f[0] = std::cos(proc_control_B.c_f[0]);
          proc_control_B.u2[0] = std::sin(proc_control_B.u2[0]);
          proc_control_B.c_f[1] = std::cos(proc_control_B.c_f[1]);
          proc_control_B.u2[1] = std::sin(proc_control_B.u2[1]);
          proc_control_B.c_f[2] = std::cos(proc_control_B.rtb_u2_f);
          proc_control_B.u2[2] = std::sin(proc_control_B.rtb_u2_f);
          proc_control_B.Divide_p = proc_control_B.c_f[0] * proc_control_B.c_f[1];
          proc_control_B.t65 = proc_control_B.u2[0] * proc_control_B.u2[1];
          proc_control_B.n[0] = proc_control_B.Divide_p * proc_control_B.c_f[2]
            + proc_control_B.t65 * proc_control_B.u2[2];
          proc_control_B.n[1] = proc_control_B.Divide_p * proc_control_B.u2[2] -
            proc_control_B.t65 * proc_control_B.c_f[2];
          proc_control_B.Divide_p = proc_control_B.u2[0] * proc_control_B.c_f[1];
          proc_control_B.t65 = proc_control_B.c_f[0] * proc_control_B.u2[1];
          proc_control_B.n[2] = proc_control_B.t65 * proc_control_B.c_f[2] +
            proc_control_B.Divide_p * proc_control_B.u2[2];
          proc_control_B.n[3] = proc_control_B.Divide_p * proc_control_B.c_f[2]
            - proc_control_B.t65 * proc_control_B.u2[2];

          //  calculer
          //  quaternion partie scalaire
          //  quaternion partie vectoriel
          proc_control_B.Divide1_k = 0.0;
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 3;
               proc_control_B.ibmat++) {
            proc_control_B.Divide1_k += proc_control_DW.obj_a.poseList
              [(((proc_control_B.ibmat + 4) << 1) + static_cast<int32_T>
                (proc_control_DW.obj_a.i - 1.0)) - 1] *
              proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.ibmat];
          }

          proc_control_B.Divide_p = 2.0 * proc_control_B.Divide1_k;
          proc_control_B.Divide1_k = 0.0;
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 3;
               proc_control_B.ibmat++) {
            proc_control_B.t15 = proc_control_DW.obj_a.poseList
              [(((proc_control_B.ibmat + 4) << 1) + static_cast<int32_T>
                (proc_control_DW.obj_a.i - 1.0)) - 1];
            proc_control_B.Divide1_k += proc_control_B.t15 * proc_control_B.t15;
          }

          proc_control_B.scale = proc_control_DW.obj_a.poseList
            [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 5];
          proc_control_B.Divide1_k = proc_control_B.scale * proc_control_B.scale
            - proc_control_B.Divide1_k;
          proc_control_B.Divide2_c = proc_control_B.scale * 2.0;

          //  QuatRotate n'est pas compilable
          //  choisir sens du quaternion
          proc_control_B.y_d_a[0] = proc_control_B.n[0];
          proc_control_B.y_d_a[1] = proc_control_B.n[1];
          proc_control_B.y_d_a[2] = proc_control_B.n[2];
          proc_control_B.y_d_a[3] = proc_control_B.n[3];

          // ==========================================================================    
          //  Fonnction qui retoure le quaternion le plus court/long selon
          //  l'utilisateur
          proc_control_B.Divide3_m = 0.0;
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 4;
               proc_control_B.ibmat++) {
            proc_control_B.Divide3_m += proc_control_DW.obj_a.poseList
              [(((proc_control_B.ibmat + 3) << 1) + static_cast<int32_T>
                (proc_control_DW.obj_a.i - 1.0)) - 1] *
              proc_control_B.n[proc_control_B.ibmat];
          }

          //  conjuger le quaternion au besoin
          if (((proc_control_B.Divide3_m > 1.0) &&
               (proc_control_B.DataTypeConversion2 == 0.0)) ||
              ((proc_control_B.Divide3_m < 1.0) &&
               (proc_control_B.DataTypeConversion2 == 1.0))) {
            proc_control_B.y_d_a[0] = proc_control_B.n[0];
            proc_control_B.y_d_a[1] = -proc_control_B.n[1];
            proc_control_B.y_d_a[2] = -proc_control_B.n[2];
            proc_control_B.y_d_a[3] = -proc_control_B.n[3];
          }

          //  transformer le point en fonction du frame
          proc_control_B.rtb_u2_f = std::round
            (proc_control_B.DataTypeConversion1[0]);
          if (proc_control_B.rtb_u2_f < 256.0) {
            if (proc_control_B.rtb_u2_f >= 0.0) {
              tmp = static_cast<uint8_T>(proc_control_B.rtb_u2_f);
            } else {
              tmp = 0U;
            }
          } else {
            tmp = MAX_uint8_T;
          }

          switch (tmp) {
           case 0U:
            //  position et angle absolue
            proc_control_B.twpt[0] = proc_control_B.TmpSignalConversionAtMATL_b
              [0];
            proc_control_B.twpt[1] = proc_control_B.TmpSignalConversionAtMATL_b
              [1];
            proc_control_B.twpt[2] = proc_control_B.TmpSignalConversionAtMATL_b
              [2];
            proc_control_B.twpt[3] = proc_control_B.n[0];
            proc_control_B.twpt[4] = proc_control_B.n[1];
            proc_control_B.twpt[5] = proc_control_B.n[2];
            proc_control_B.twpt[6] = proc_control_B.n[3];
            break;

           case 1U:
            //  position et angle relatif
            proc_control_B.t65 = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 11];
            proc_control_B.t4 = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 7];
            proc_control_B.od = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 9];
            proc_control_B.twpt[0] = ((proc_control_B.od *
              proc_control_B.TmpSignalConversionAtMATL_b[2] - proc_control_B.t65
              * proc_control_B.TmpSignalConversionAtMATL_b[1]) *
              proc_control_B.Divide2_c + (proc_control_B.t4 *
              proc_control_B.Divide_p + proc_control_B.Divide1_k *
              proc_control_B.TmpSignalConversionAtMATL_b[0])) +
              proc_control_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) - 1];
            proc_control_B.twpt[1] = ((proc_control_B.t65 *
              proc_control_B.TmpSignalConversionAtMATL_b[0] - proc_control_B.t4 *
              proc_control_B.TmpSignalConversionAtMATL_b[2]) *
              proc_control_B.Divide2_c + (proc_control_B.od *
              proc_control_B.Divide_p + proc_control_B.Divide1_k *
              proc_control_B.TmpSignalConversionAtMATL_b[1])) +
              proc_control_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) + 1];
            proc_control_B.twpt[2] = ((proc_control_B.t4 *
              proc_control_B.TmpSignalConversionAtMATL_b[1] - proc_control_B.od *
              proc_control_B.TmpSignalConversionAtMATL_b[0]) *
              proc_control_B.Divide2_c + (proc_control_B.t65 *
              proc_control_B.Divide_p + proc_control_B.Divide1_k *
              proc_control_B.TmpSignalConversionAtMATL_b[2])) +
              proc_control_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) + 3];
            proc_control_B.twpt[3] = ((proc_control_B.scale *
              proc_control_B.y_d_a[0] - proc_control_B.t4 *
              proc_control_B.y_d_a[1]) - proc_control_B.od *
              proc_control_B.y_d_a[2]) - proc_control_B.t65 *
              proc_control_B.y_d_a[3];
            proc_control_B.twpt[4] = (proc_control_B.scale *
              proc_control_B.y_d_a[1] + proc_control_B.t4 *
              proc_control_B.y_d_a[0]) + (proc_control_B.od *
              proc_control_B.y_d_a[3] - proc_control_B.t65 *
              proc_control_B.y_d_a[2]);
            proc_control_B.twpt[5] = (proc_control_B.scale *
              proc_control_B.y_d_a[2] + proc_control_B.od *
              proc_control_B.y_d_a[0]) + (proc_control_B.t65 *
              proc_control_B.y_d_a[1] - proc_control_B.t4 *
              proc_control_B.y_d_a[3]);
            proc_control_B.twpt[6] = (proc_control_B.scale *
              proc_control_B.y_d_a[3] + proc_control_B.t65 *
              proc_control_B.y_d_a[0]) + (proc_control_B.t4 *
              proc_control_B.y_d_a[2] - proc_control_B.od *
              proc_control_B.y_d_a[1]);
            break;

           case 2U:
            //  position relatif et angle absolue
            proc_control_B.t65 = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 11];
            proc_control_B.t15 = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 7];
            proc_control_B.ob = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 9];
            proc_control_B.twpt[0] = ((proc_control_B.ob *
              proc_control_B.TmpSignalConversionAtMATL_b[2] - proc_control_B.t65
              * proc_control_B.TmpSignalConversionAtMATL_b[1]) *
              proc_control_B.Divide2_c + (proc_control_B.t15 *
              proc_control_B.Divide_p + proc_control_B.Divide1_k *
              proc_control_B.TmpSignalConversionAtMATL_b[0])) +
              proc_control_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) - 1];
            proc_control_B.twpt[1] = ((proc_control_B.t65 *
              proc_control_B.TmpSignalConversionAtMATL_b[0] - proc_control_B.t15
              * proc_control_B.TmpSignalConversionAtMATL_b[2]) *
              proc_control_B.Divide2_c + (proc_control_B.ob *
              proc_control_B.Divide_p + proc_control_B.Divide1_k *
              proc_control_B.TmpSignalConversionAtMATL_b[1])) +
              proc_control_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) + 1];
            proc_control_B.twpt[2] = ((proc_control_B.t15 *
              proc_control_B.TmpSignalConversionAtMATL_b[1] - proc_control_B.ob *
              proc_control_B.TmpSignalConversionAtMATL_b[0]) *
              proc_control_B.Divide2_c + (proc_control_B.t65 *
              proc_control_B.Divide_p + proc_control_B.Divide1_k *
              proc_control_B.TmpSignalConversionAtMATL_b[2])) +
              proc_control_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) + 3];
            proc_control_B.twpt[3] = proc_control_B.n[0];
            proc_control_B.twpt[4] = proc_control_B.n[1];
            proc_control_B.twpt[5] = proc_control_B.n[2];
            proc_control_B.twpt[6] = proc_control_B.n[3];
            break;

           case 3U:
            //  position absolue et angle relatif
            proc_control_B.twpt[0] = proc_control_B.TmpSignalConversionAtMATL_b
              [0];
            proc_control_B.twpt[1] = proc_control_B.TmpSignalConversionAtMATL_b
              [1];
            proc_control_B.twpt[2] = proc_control_B.TmpSignalConversionAtMATL_b
              [2];
            proc_control_B.t65 = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 7];
            proc_control_B.t15 = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 9];
            proc_control_B.ob = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 11];
            proc_control_B.twpt[3] = ((proc_control_B.scale *
              proc_control_B.y_d_a[0] - proc_control_B.t65 *
              proc_control_B.y_d_a[1]) - proc_control_B.t15 *
              proc_control_B.y_d_a[2]) - proc_control_B.ob *
              proc_control_B.y_d_a[3];
            proc_control_B.twpt[4] = (proc_control_B.scale *
              proc_control_B.y_d_a[1] + proc_control_B.t65 *
              proc_control_B.y_d_a[0]) + (proc_control_B.t15 *
              proc_control_B.y_d_a[3] - proc_control_B.ob *
              proc_control_B.y_d_a[2]);
            proc_control_B.twpt[5] = (proc_control_B.scale *
              proc_control_B.y_d_a[2] + proc_control_B.t15 *
              proc_control_B.y_d_a[0]) + (proc_control_B.ob *
              proc_control_B.y_d_a[1] - proc_control_B.t65 *
              proc_control_B.y_d_a[3]);
            proc_control_B.twpt[6] = (proc_control_B.scale *
              proc_control_B.y_d_a[3] + proc_control_B.ob *
              proc_control_B.y_d_a[0]) + (proc_control_B.t65 *
              proc_control_B.y_d_a[2] - proc_control_B.t15 *
              proc_control_B.y_d_a[1]);
            break;

           default:
            //  retourne le point précédent
            proc_control_B.twpt[0] = proc_control_DW.obj_a.poseList[static_cast<
              int32_T>(proc_control_DW.obj_a.i - 1.0) - 1];
            proc_control_B.twpt[1] = proc_control_DW.obj_a.poseList[static_cast<
              int32_T>(proc_control_DW.obj_a.i - 1.0) + 1];
            proc_control_B.twpt[2] = proc_control_DW.obj_a.poseList[static_cast<
              int32_T>(proc_control_DW.obj_a.i - 1.0) + 3];
            proc_control_B.twpt[3] = proc_control_B.scale;
            proc_control_B.twpt[4] = proc_control_DW.obj_a.poseList[static_cast<
              int32_T>(proc_control_DW.obj_a.i - 1.0) + 7];
            proc_control_B.twpt[5] = proc_control_DW.obj_a.poseList[static_cast<
              int32_T>(proc_control_DW.obj_a.i - 1.0) + 9];
            proc_control_B.twpt[6] = proc_control_DW.obj_a.poseList[static_cast<
              int32_T>(proc_control_DW.obj_a.i - 1.0) + 11];
            break;
          }

          for (proc_control_B.Ns = 0; proc_control_B.Ns < 9; proc_control_B.Ns++)
          {
            proc_control_DW.obj_a.poseList[(static_cast<int32_T>
              (proc_control_DW.obj_a.i) + (proc_control_B.Ns << 1)) - 1] =
              proc_control_B.twpt[proc_control_B.Ns];
          }

          proc_control_DW.obj_a.i++;
        }

        // End of Outputs for SubSystem: '<S312>/Subscribe'
        //  Générer la trajectoire
        if (proc_control_DW.Delay1_DSTATE_c) {
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 9; proc_control_B.Ns++)
          {
            proc_control_B.i_m = proc_control_B.Ns << 1;
            proc_control_DW.obj_a.poseList[proc_control_B.i_m] =
              proc_control_DW.obj_a.poseList[(static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) + proc_control_B.i_m) - 1];
            proc_control_DW.obj_a.poseList[proc_control_B.i_m + 1] = 999.0;
          }

          proc_control_DW.obj_a.i = 2.0;
        }

        //  Reset Trajectoire
        if (proc_control_B.d != 0.0) {
          // ========================================================================== 
          // ==========================================================================    
          //  Fonction qui reset la trajectoire
          //  remove roll and pitch from initial condition
          proc_control_B.Divide_p = 1.0 / std::sqrt(((proc_control_B.qS2W[0] *
            proc_control_B.qS2W[0] + proc_control_B.qS2W[1] *
            proc_control_B.qS2W[1]) + proc_control_B.qS2W[2] *
            proc_control_B.qS2W[2]) + proc_control_B.qS2W[3] *
            proc_control_B.qS2W[3]);
          proc_control_B.n[0] = proc_control_B.qS2W[0] * proc_control_B.Divide_p;
          proc_control_B.n[1] = proc_control_B.qS2W[1] * proc_control_B.Divide_p;
          proc_control_B.n[2] = proc_control_B.qS2W[2] * proc_control_B.Divide_p;
          proc_control_B.n[3] = proc_control_B.qS2W[3] * proc_control_B.Divide_p;
          proc_control_B.Divide1_k = (proc_control_B.n[1] * proc_control_B.n[3]
            + proc_control_B.n[0] * proc_control_B.n[2]) * 2.0;
          rtb_NewDvlMsg = (proc_control_B.Divide1_k >= 0.99999999999999778);
          rtb_newPressureMsg = (proc_control_B.Divide1_k <= -0.99999999999999778);
          proc_control_B.ibmat = 0;
          if (proc_control_B.Divide1_k >= 0.99999999999999778) {
            proc_control_B.Divide1_k = 1.0;
          }

          if (rtb_newPressureMsg) {
            proc_control_B.Divide1_k = -1.0;
          }

          proc_control_B.Divide_p = proc_control_B.n[0] * proc_control_B.n[0];
          proc_control_B.t65 = proc_control_B.n[1] * proc_control_B.n[1];
          proc_control_B.t4 = proc_control_B.n[2] * proc_control_B.n[2];
          proc_control_B.t15 = proc_control_B.n[3] * proc_control_B.n[3];
          proc_control_B.c_f[0] = proc_control_rt_atan2d_snf((proc_control_B.n[2]
            * proc_control_B.n[3] - proc_control_B.n[0] * proc_control_B.n[1]) *
            -2.0, ((proc_control_B.Divide_p - proc_control_B.t65) -
                   proc_control_B.t4) + proc_control_B.t15);
          proc_control_B.c_f[1] = std::asin(proc_control_B.Divide1_k);
          proc_control_B.c_f[2] = proc_control_rt_atan2d_snf((proc_control_B.n[1]
            * proc_control_B.n[2] - proc_control_B.n[0] * proc_control_B.n[3]) *
            -2.0, ((proc_control_B.Divide_p + proc_control_B.t65) -
                   proc_control_B.t4) - proc_control_B.t15);
          if (rtb_NewDvlMsg || rtb_newPressureMsg) {
            for (proc_control_B.i_m = 0; proc_control_B.i_m < 1;
                 proc_control_B.i_m++) {
              proc_control_B.ibmat++;
            }
          }

          if (proc_control_B.ibmat - 1 >= 0) {
            proc_control_B.c_f[0] = 0.0;
          }

          proc_control_B.ibmat = 0;
          if (rtb_NewDvlMsg || rtb_newPressureMsg) {
            for (proc_control_B.i_m = 0; proc_control_B.i_m < 1;
                 proc_control_B.i_m++) {
              proc_control_B.ibmat++;
            }
          }

          proc_control_B.Ns = proc_control_B.ibmat;
          proc_control_B.b_x_size = proc_control_B.ibmat;
          if (proc_control_B.ibmat - 1 >= 0) {
            proc_control_B.b_x_data = proc_control_B.Divide1_k;
          }

          proc_control_B.ibmat--;
          for (proc_control_B.idx_m = 0; proc_control_B.idx_m <=
               proc_control_B.ibmat; proc_control_B.idx_m++) {
            proc_control_B.Divide_p = proc_control_B.b_x_data;
            if (!std::isnan(proc_control_B.b_x_data)) {
              if (proc_control_B.b_x_data < 0.0) {
                proc_control_B.Divide_p = -1.0;
              } else {
                proc_control_B.Divide_p = (proc_control_B.b_x_data > 0.0);
              }
            }

            proc_control_B.b_x_data = proc_control_B.Divide_p;
          }

          proc_control_B.ibmat = 0;
          if (rtb_NewDvlMsg || rtb_newPressureMsg) {
            for (proc_control_B.i_m = 0; proc_control_B.i_m < 1;
                 proc_control_B.i_m++) {
              proc_control_B.ibmat++;
            }
          }

          proc_control_B.idx_m = proc_control_B.ibmat;
          proc_control_B.e_size = proc_control_B.ibmat;
          if (proc_control_B.ibmat - 1 >= 0) {
            proc_control_B.e_data = proc_control_rt_atan2d_snf(proc_control_B.n
              [1], proc_control_B.n[0]);
          }

          proc_control_B.ibmat = 0;
          if (rtb_NewDvlMsg || rtb_newPressureMsg) {
            for (proc_control_B.i_m = 0; proc_control_B.i_m < 1;
                 proc_control_B.i_m++) {
              proc_control_B.k_data = 1;
              proc_control_B.ibmat++;
            }
          }

          if (proc_control_B.Ns == proc_control_B.idx_m) {
            if (proc_control_B.Ns - 1 >= 0) {
              proc_control_B.c_f[2] = proc_control_B.b_x_data * 2.0 *
                proc_control_B.e_data;
            }
          } else {
            proc_control_binary_expand_op_p(proc_control_B.c_f,
              &proc_control_B.k_data, &proc_control_B.b_x_data,
              &proc_control_B.b_x_size, &proc_control_B.e_data,
              &proc_control_B.e_size);
          }

          //  Retransformer en quaternion
          proc_control_B.u2[0] = proc_control_B.c_f[0] * 0.0 / 2.0;
          proc_control_B.u2[1] = proc_control_B.c_f[1] * 0.0 / 2.0;
          proc_control_B.u2[2] = proc_control_B.c_f[2] / 2.0;
          proc_control_B.c_f[0] = std::cos(proc_control_B.u2[0]);
          proc_control_B.u2[0] = std::sin(proc_control_B.u2[0]);
          proc_control_B.c_f[1] = std::cos(proc_control_B.u2[1]);
          proc_control_B.u2[1] = std::sin(proc_control_B.u2[1]);
          proc_control_B.c_f[2] = std::cos(proc_control_B.u2[2]);
          proc_control_B.u2[2] = std::sin(proc_control_B.u2[2]);
          proc_control_B.Divide_p = proc_control_B.c_f[0] * proc_control_B.c_f[1];
          proc_control_B.t65 = proc_control_B.u2[0] * proc_control_B.u2[1];
          proc_control_B.TmpSignalConversionAtMATLAB[3] =
            proc_control_B.Divide_p * proc_control_B.c_f[2] - proc_control_B.t65
            * proc_control_B.u2[2];
          proc_control_B.t4 = proc_control_B.c_f[0] * proc_control_B.u2[1];
          proc_control_B.TmpSignalConversionAtMATLAB[4] = proc_control_B.u2[0] *
            proc_control_B.c_f[1] * proc_control_B.c_f[2] + proc_control_B.t4 *
            proc_control_B.u2[2];
          proc_control_B.TmpSignalConversionAtMATLAB[5] = -proc_control_B.u2[0] *
            proc_control_B.c_f[1] * proc_control_B.u2[2] + proc_control_B.t4 *
            proc_control_B.c_f[2];
          proc_control_B.TmpSignalConversionAtMATLAB[6] =
            proc_control_B.Divide_p * proc_control_B.u2[2] + proc_control_B.t65 *
            proc_control_B.c_f[2];
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++)
          {
            proc_control_DW.obj_a.initcond[proc_control_B.Ns] =
              proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.Ns];
          }

          //  definir les conditions initiaux
          proc_control_B.Ns = 0;
          for (proc_control_B.i_m = 0; proc_control_B.i_m < 9;
               proc_control_B.i_m++) {
            proc_control_DW.obj_a.poseList[proc_control_B.Ns + 1] = 999.0;
            proc_control_B.Ns += 2;
          }

          proc_control_DW.obj_a.poseList[14] = 0.0;
          proc_control_DW.obj_a.poseList[16] = 0.0;
          proc_control_B.Ns = 0;
          for (proc_control_B.i_m = 0; proc_control_B.i_m < 7;
               proc_control_B.i_m++) {
            proc_control_DW.obj_a.poseList[proc_control_B.Ns] =
              proc_control_DW.obj_a.initcond[proc_control_B.i_m];
            proc_control_DW.obj_a.poseList[proc_control_B.Ns + 1] =
              proc_control_DW.obj_a.initcond[proc_control_B.i_m];
            proc_control_B.Ns += 2;
          }

          proc_control_DW.obj_a.poseList[15] = 1.0;
          proc_control_DW.obj_a.poseList[17] = 0.0;
          proc_control_DW.obj_a.i = 2.0;
        }

        // Outputs for Enabled SubSystem: '<S312>/Pre-traitement' incorporates:
        //   EnablePort: '<S324>/Enable'

        // Outputs for Atomic SubSystem: '<S312>/Subscribe'
        if (rtb_Merge || (proc_control_B.d != 0.0)) {
          proc_control_B.MatrixConcatenate[0] = proc_control_P.Constant1_Value_o;

          // Math: '<S324>/Transpose' incorporates:
          //   Concatenate: '<S324>/Matrix Concatenate'
          //   Constant: '<S324>/Constant1'
          //   MATLABSystem: '<S312>/MATLAB System1'
          //   Selector: '<S324>/Selector'
          //   Selector: '<S324>/Selector1'

          proc_control_B.Ns = 0;
          proc_control_B.i_m = 0;
          proc_control_B.ibmat = 0;
          for (proc_control_B.idx_k = 0; proc_control_B.idx_k < 2;
               proc_control_B.idx_k++) {
            proc_control_B.idx_mc = 0;
            for (proc_control_B.idx_h = 0; proc_control_B.idx_h < 9;
                 proc_control_B.idx_h++) {
              proc_control_B.Transpose_i[proc_control_B.idx_h +
                proc_control_B.i_m] =
                proc_control_DW.obj_a.poseList[proc_control_B.idx_mc +
                proc_control_B.idx_k];
              proc_control_B.idx_mc += 2;
            }

            proc_control_B.Selector[proc_control_B.Ns] =
              proc_control_B.Transpose_i[proc_control_B.i_m];
            proc_control_B.Selector[proc_control_B.Ns + 1] =
              proc_control_B.Transpose_i[proc_control_B.i_m + 1];
            proc_control_B.Selector[proc_control_B.Ns + 2] =
              proc_control_B.Transpose_i[proc_control_B.i_m + 2];
            proc_control_B.Selector1[proc_control_B.ibmat] =
              proc_control_B.Transpose_i[proc_control_B.i_m + 3];
            proc_control_B.Selector1[proc_control_B.ibmat + 1] =
              proc_control_B.Transpose_i[proc_control_B.i_m + 4];
            proc_control_B.Selector1[proc_control_B.ibmat + 2] =
              proc_control_B.Transpose_i[proc_control_B.i_m + 5];
            proc_control_B.Selector1[proc_control_B.ibmat + 3] =
              proc_control_B.Transpose_i[proc_control_B.i_m + 6];
            proc_control_B.Ns += 3;
            proc_control_B.i_m += 9;
            proc_control_B.ibmat += 4;
          }

          // End of Math: '<S324>/Transpose'

          // Selector: '<S324>/Selector2' incorporates:
          //   Concatenate: '<S324>/Matrix Concatenate'
          //   Math: '<S324>/Transpose'

          proc_control_B.MatrixConcatenate[1] = proc_control_B.Transpose_i[16];
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++)
          {
            // Selector: '<S324>/Selector4' incorporates:
            //   Math: '<S324>/Transpose'

            proc_control_B.Selector4[proc_control_B.Ns] =
              proc_control_B.Transpose_i[proc_control_B.Ns + 9];
          }
        }

        // End of Outputs for SubSystem: '<S312>/Pre-traitement'

        // Outputs for Resettable SubSystem: '<S312>/Trajectory generator' incorporates:
        //   ResetPort: '<S327>/Reset'

        if (rtb_Merge && (proc_control_PrevZCX.Trajectorygenerator_Reset_ZCE !=
                          POS_ZCSIG)) {
          // InitializeConditions for DiscreteIntegrator: '<S327>/Discrete-Time Integrator' 
          proc_control_DW.DiscreteTimeIntegrator_DSTATE =
            proc_control_P.DiscreteTimeIntegrator_IC;
        }

        proc_control_PrevZCX.Trajectorygenerator_Reset_ZCE = rtb_Merge;

        // End of Outputs for SubSystem: '<S312>/Subscribe'

        // DiscreteIntegrator: '<S327>/Discrete-Time Integrator' incorporates:
        //   Concatenate: '<S324>/Matrix Concatenate'
        //   Constant: '<S324>/Constant1'
        //   Constant: '<S327>/Constant'
        //   Logic: '<S312>/OR'
        //   MATLABSystem: '<S325>/SourceBlock'

        proc_control_B.t65 = proc_control_P.DiscreteTimeIntegrator_gainva_e *
          proc_control_P.Constant_Value_ep;

        // DiscreteIntegrator: '<S327>/Discrete-Time Integrator'
        proc_control_B.Divide_p = proc_control_B.t65 +
          proc_control_DW.DiscreteTimeIntegrator_DSTATE;

        // MATLABSystem: '<S327>/Rotation Trajectory' incorporates:
        //   Concatenate: '<S324>/Matrix Concatenate'
        //   Selector: '<S324>/Selector1'
        //   Selector: '<S327>/Selector1'
        //   Selector: '<S327>/Selector2'

        if (proc_control_DW.obj_j.TunablePropsChanged) {
          proc_control_DW.obj_j.TunablePropsChanged = false;
        }

        proc_control_B.Divide1_k = 1.0 / (proc_control_B.MatrixConcatenate[1] -
          proc_control_B.MatrixConcatenate[0]);
        proc_control_B.t4 = (proc_control_B.Divide_p -
                             proc_control_B.MatrixConcatenate[0]) *
          proc_control_B.Divide1_k;
        proc_control_B.ibmat = 0;
        if (proc_control_B.Divide_p < proc_control_B.MatrixConcatenate[0]) {
          proc_control_B.t4 = 0.0;
        }

        if (proc_control_B.Divide_p > proc_control_B.MatrixConcatenate[1]) {
          proc_control_B.t4 = 1.0;
        }

        if (proc_control_B.Divide_p < proc_control_B.MatrixConcatenate[0]) {
          proc_control_B.Divide1_k = 0.0;
        }

        proc_control_B.od = proc_control_B.Divide1_k;
        if (proc_control_B.Divide_p > proc_control_B.MatrixConcatenate[1]) {
          proc_control_B.od = 0.0;
        }

        proc_control_B.n_e = std::sqrt(((proc_control_B.Selector1[0] *
          proc_control_B.Selector1[0] + proc_control_B.Selector1[1] *
          proc_control_B.Selector1[1]) + proc_control_B.Selector1[2] *
          proc_control_B.Selector1[2]) + proc_control_B.Selector1[3] *
          proc_control_B.Selector1[3]);
        proc_control_B.Divide1_k = proc_control_B.Selector1[0] /
          proc_control_B.n_e;
        proc_control_B.Divide2_c = proc_control_B.Selector1[1] /
          proc_control_B.n_e;
        proc_control_B.Divide3_m = proc_control_B.Selector1[2] /
          proc_control_B.n_e;
        proc_control_B.t15 = proc_control_B.Selector1[3] / proc_control_B.n_e;
        proc_control_B.n_e = std::sqrt(((proc_control_B.Selector1[4] *
          proc_control_B.Selector1[4] + proc_control_B.Selector1[5] *
          proc_control_B.Selector1[5]) + proc_control_B.Selector1[6] *
          proc_control_B.Selector1[6]) + proc_control_B.Selector1[7] *
          proc_control_B.Selector1[7]);
        proc_control_B.t16 = proc_control_B.Selector1[4] / proc_control_B.n_e;
        proc_control_B.t63 = proc_control_B.Selector1[5] / proc_control_B.n_e;
        proc_control_B.t5 = proc_control_B.Selector1[6] / proc_control_B.n_e;
        proc_control_B.t = proc_control_B.Selector1[7] / proc_control_B.n_e;
        proc_control_B.n_e = std::sqrt(((proc_control_B.Divide1_k *
          proc_control_B.Divide1_k + proc_control_B.Divide2_c *
          proc_control_B.Divide2_c) + proc_control_B.Divide3_m *
          proc_control_B.Divide3_m) + proc_control_B.t15 * proc_control_B.t15);
        proc_control_B.t21 = proc_control_B.Divide1_k / proc_control_B.n_e;
        proc_control_B.dp = proc_control_B.Divide2_c / proc_control_B.n_e;
        proc_control_B.t69 = proc_control_B.Divide3_m / proc_control_B.n_e;
        proc_control_B.t35 = proc_control_B.t15 / proc_control_B.n_e;
        proc_control_B.oa = ((proc_control_B.t21 - proc_control_B.dp * 0.0) -
                             proc_control_B.t69 * 0.0) - proc_control_B.t35 *
          0.0;
        proc_control_B.ob = ((proc_control_B.t21 * 0.0 + proc_control_B.dp) +
                             proc_control_B.t69 * 0.0) - proc_control_B.t35 *
          0.0;
        proc_control_B.absxk = ((proc_control_B.t21 * 0.0 - proc_control_B.dp *
          0.0) + proc_control_B.t69) + proc_control_B.t35 * 0.0;
        proc_control_B.Product8 = ((proc_control_B.t21 * 0.0 + proc_control_B.dp
          * 0.0) - proc_control_B.t69 * 0.0) + proc_control_B.t35;
        proc_control_B.n_e = std::sqrt(((proc_control_B.t16 * proc_control_B.t16
          + proc_control_B.t63 * proc_control_B.t63) + proc_control_B.t5 *
          proc_control_B.t5) + proc_control_B.t * proc_control_B.t);
        proc_control_B.t21 = proc_control_B.t16 / proc_control_B.n_e;
        proc_control_B.dp = proc_control_B.t63 / proc_control_B.n_e;
        proc_control_B.t69 = proc_control_B.t5 / proc_control_B.n_e;
        proc_control_B.t35 = proc_control_B.t / proc_control_B.n_e;
        proc_control_B.scale = ((proc_control_B.t21 - proc_control_B.dp * 0.0) -
          proc_control_B.t69 * 0.0) - proc_control_B.t35 * 0.0;
        proc_control_B.t12 = ((proc_control_B.t21 * 0.0 + proc_control_B.dp) +
                              proc_control_B.t69 * 0.0) - proc_control_B.t35 *
          0.0;
        proc_control_B.n_e = ((proc_control_B.t21 * 0.0 - proc_control_B.dp *
          0.0) + proc_control_B.t69) + proc_control_B.t35 * 0.0;
        proc_control_B.t21 = ((proc_control_B.t21 * 0.0 + proc_control_B.dp *
          0.0) - proc_control_B.t69 * 0.0) + proc_control_B.t35;
        proc_control_B.dp = ((proc_control_B.oa * proc_control_B.scale +
                              proc_control_B.ob * proc_control_B.t12) +
                             proc_control_B.absxk * proc_control_B.n_e) +
          proc_control_B.Product8 * proc_control_B.t21;
        if (proc_control_B.dp < 0.0) {
          proc_control_B.scale = -proc_control_B.scale;
          proc_control_B.t12 = -proc_control_B.t12;
          proc_control_B.n_e = -proc_control_B.n_e;
          proc_control_B.t21 = -proc_control_B.t21;
          proc_control_B.dp = -proc_control_B.dp;
        }

        if (proc_control_B.dp > 1.0) {
          proc_control_B.dp = 1.0;
        }

        proc_control_B.theta0 = std::acos(proc_control_B.dp);
        proc_control_B.t69 = std::sin(proc_control_B.theta0);
        proc_control_B.dp = 1.0 / proc_control_B.t69;
        proc_control_B.theta0 = std::sin(0.0 * proc_control_B.theta0);
        proc_control_B.oa = (proc_control_B.t69 * proc_control_B.oa +
                             proc_control_B.theta0 * proc_control_B.scale) *
          proc_control_B.dp;
        proc_control_B.ob = (proc_control_B.t69 * proc_control_B.ob +
                             proc_control_B.theta0 * proc_control_B.t12) *
          proc_control_B.dp;
        proc_control_B.absxk = (proc_control_B.t69 * proc_control_B.absxk +
          proc_control_B.theta0 * proc_control_B.n_e) * proc_control_B.dp;
        proc_control_B.Product8 = (proc_control_B.t69 * proc_control_B.Product8
          + proc_control_B.theta0 * proc_control_B.t21) * proc_control_B.dp;
        if (std::isinf(proc_control_B.dp)) {
          proc__quaternion_parenReference(proc_control_B.Divide1_k,
            proc_control_B.Divide2_c, proc_control_B.Divide3_m,
            proc_control_B.t15, true, &proc_control_B.b_x_data,
            proc_control_B.k_size, &proc_control_B.e_data,
            proc_control_B.assign_temp_b_size,
            &proc_control_B.assign_temp_c_data,
            proc_control_B.assign_temp_c_size,
            &proc_control_B.assign_temp_d_data,
            proc_control_B.assign_temp_d_size);
          proc_con_quaternion_parenAssign(proc_control_B.oa, proc_control_B.ob,
            proc_control_B.absxk, proc_control_B.Product8,
            &proc_control_B.b_x_data, proc_control_B.k_size,
            &proc_control_B.e_data, proc_control_B.assign_temp_b_size,
            &proc_control_B.assign_temp_c_data,
            proc_control_B.assign_temp_c_size,
            &proc_control_B.assign_temp_d_data,
            proc_control_B.assign_temp_d_size, &proc_control_B.oa,
            &proc_control_B.ob, &proc_control_B.absxk, &proc_control_B.Product8);
        }

        proc_control_B.n_e = std::sqrt(((proc_control_B.oa * proc_control_B.oa +
          proc_control_B.ob * proc_control_B.ob) + proc_control_B.absxk *
          proc_control_B.absxk) + proc_control_B.Product8 *
          proc_control_B.Product8);
        proc_contr_quaternionBase_slerp(proc_control_B.Divide1_k,
          proc_control_B.Divide2_c, proc_control_B.Divide3_m, proc_control_B.t15,
          proc_control_B.t16, proc_control_B.t63, proc_control_B.t5,
          proc_control_B.t, &proc_control_B.t69, &proc_control_B.theta0,
          &proc_control_B.t35, &proc_control_B.oa_p);
        proc_con_quaternionBase_slerp_p(proc_control_B.Divide1_k,
          proc_control_B.Divide2_c, proc_control_B.Divide3_m, proc_control_B.t15,
          proc_control_B.t16, proc_control_B.t63, proc_control_B.t5,
          proc_control_B.t, proc_control_B.t4, &proc_control_B.t12,
          &proc_control_B.scale, &proc_control_B.t21, &proc_control_B.dp);
        proc_control_B.expl_temp_e = proc_computeFirstQuatDerivative
          (proc_control_B.oa / proc_control_B.n_e, proc_control_B.ob /
           proc_control_B.n_e, proc_control_B.absxk / proc_control_B.n_e,
           proc_control_B.Product8 / proc_control_B.n_e, proc_control_B.t69,
           proc_control_B.theta0, proc_control_B.t35, proc_control_B.oa_p,
           proc_control_B.od, proc_control_B.t12, proc_control_B.scale,
           proc_control_B.t21, proc_control_B.dp);
        proc_control_B.oa = 2.0 * proc_control_B.expl_temp_e.a;
        proc_control_B.ob = 2.0 * proc_control_B.expl_temp_e.b;
        proc_control_B.absxk = 2.0 * proc_control_B.expl_temp_e.c;
        proc_control_B.Product8 = 2.0 * proc_control_B.expl_temp_e.d;

        // MATLABSystem: '<S329>/Polynomial Trajectory1' incorporates:
        //   Concatenate: '<S324>/Matrix Concatenate'
        //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
        //   Lookup_n-D: '<S11>/ PWM to N'
        //   Lookup_n-D: '<S140>/N to A'
        //   Lookup_n-D: '<S140>/N to PWM'
        //   Lookup_n-D: '<S16>/N to RPM'
        //   Selector: '<S324>/Selector'
        //   Trigonometry: '<S271>/sincos'
        //   Trigonometry: '<S40>/sincos'
        //   UniformRandomNumber: '<S12>/ Drift'
        //
        rtb_NewDvlMsg = false;
        rtb_newPressureMsg = true;
        exitg1 = false;
        while ((!exitg1) && (proc_control_B.ibmat < 6)) {
          if (!(proc_control_DW.obj_jo.VelocityBoundaryCondition[proc_control_B.ibmat]
                ==
                proc_control_P.PolynomialTrajectory1_VelocityB[proc_control_B.ibmat]))
          {
            rtb_newPressureMsg = false;
            exitg1 = true;
          } else {
            proc_control_B.ibmat++;
          }
        }

        if (rtb_newPressureMsg) {
          rtb_NewDvlMsg = true;
        }

        if (!rtb_NewDvlMsg) {
          if (proc_control_DW.obj_jo.isInitialized == 1) {
            proc_control_DW.obj_jo.TunablePropsChanged = true;
          }

          for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
          {
            proc_control_DW.obj_jo.VelocityBoundaryCondition[proc_control_B.Ns] =
              proc_control_P.PolynomialTrajectory1_VelocityB[proc_control_B.Ns];
          }
        }

        if (proc_control_DW.obj_jo.TunablePropsChanged) {
          proc_control_DW.obj_jo.TunablePropsChanged = false;
        }

        std::memset(&proc_control_B.TmpSignalConversionAtSFun_p[0], 0, 12U *
                    sizeof(real_T));
        proc_control_B.t15 = proc_control_B.MatrixConcatenate[1] -
          proc_control_B.MatrixConcatenate[0];
        for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 3;
             proc_control_B.idx_m++) {
          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S242>/Enable'

          // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
          //   EnablePort: '<S270>/Enable'

          proc_control_B.n[0] = proc_control_B.Selector[proc_control_B.idx_m];
          proc_control_B.n[1] =
            proc_control_DW.obj_jo.VelocityBoundaryCondition[proc_control_B.idx_m];
          proc_control_B.od = proc_control_B.Selector[proc_control_B.idx_m + 3]
            - (proc_control_B.t15 * proc_control_B.n[1] + proc_control_B.n[0]);
          proc_control_B.t57 =
            proc_control_DW.obj_jo.VelocityBoundaryCondition[proc_control_B.idx_m
            + 3] - (0.0 * proc_control_B.n[0] + proc_control_B.n[1]);

          // End of Outputs for SubSystem: '<S267>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          proc_control_B.n[3] = proc_control_B.n[0];
          proc_control_B.t4 = proc_control_B.t15 * proc_control_B.t15;

          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S242>/Enable'

          // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
          //   EnablePort: '<S270>/Enable'

          proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.idx_m] = 1.0
            / proc_control_B.t4 * proc_control_B.t57 + -2.0 /
            proc_control_rt_powd_snf(proc_control_B.t15, 3.0) *
            proc_control_B.od;
          proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.idx_m + 3] =
            3.0 / proc_control_B.t4 * proc_control_B.od + -1.0 /
            proc_control_B.t15 * proc_control_B.t57;
          proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.idx_m + 6] =
            proc_control_B.n[1];
          proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.idx_m + 9] =
            proc_control_B.n[3];

          // End of Outputs for SubSystem: '<S267>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        }

        std::memset(&proc_control_B.coeffMat[0], 0, 12U * sizeof(real_T));
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 3; proc_control_B.Ns++)
        {
          proc_control_B.coeffMat[proc_control_B.Ns + 9] = 0.0;
          proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
            proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.Ns] * 0.0;
          proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
            proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.Ns + 3] *
            0.0;
          proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
            proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.Ns + 6] *
            0.0;
          proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
            proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.Ns + 9];
        }

        std::memset(&proc_control_B.coefsWithFlatStart[0], 0, 24U * sizeof
                    (real_T));
        proc_control_B.Ns = 0;
        proc_control_B.i_m = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 4;
             proc_control_B.ibmat++) {
          proc_control_B.coefsWithFlatStart[proc_control_B.Ns] =
            proc_control_B.coeffMat[proc_control_B.i_m];
          proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 3] =
            proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.i_m];
          proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 1] =
            proc_control_B.coeffMat[proc_control_B.i_m + 1];
          proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 4] =
            proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.i_m + 1];
          proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 2] =
            proc_control_B.coeffMat[proc_control_B.i_m + 2];
          proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 5] =
            proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.i_m + 2];
          proc_control_B.Ns += 6;
          proc_control_B.i_m += 3;
        }

        proc_control_B.n[0] = proc_control_rt_powd_snf(proc_control_B.t15, 3.0);
        proc_control_B.n[1] = proc_control_rt_powd_snf(proc_control_B.t15, 2.0);
        proc_control_B.n[2] = proc_control_rt_powd_snf(proc_control_B.t15, 1.0);
        proc_control_B.n[3] = proc_control_rt_powd_snf(proc_control_B.t15, 0.0);
        std::memset(&proc_control_B.coeffMat[0], 0, 12U * sizeof(real_T));
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 3; proc_control_B.Ns++)
        {
          proc_control_B.coeffMat[proc_control_B.Ns + 9] = 0.0;
          proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
            proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 3] *
            proc_control_B.n[0];
          proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
            proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 9] *
            proc_control_B.n[1];
          proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
            proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 15] *
            proc_control_B.n[2];
          proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
            proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 21] *
            proc_control_B.n[3];
        }

        std::memset(&proc_control_B.b_newCoefs[0], 0, 36U * sizeof(real_T));
        proc_control_B.Ns = 0;
        proc_control_B.i_m = 0;
        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_k = 0; proc_control_B.idx_k < 4;
             proc_control_B.idx_k++) {
          for (proc_control_B.idx_mc = 0; proc_control_B.idx_mc < 6;
               proc_control_B.idx_mc++) {
            proc_control_B.b_newCoefs[proc_control_B.idx_mc + proc_control_B.Ns]
              = proc_control_B.coefsWithFlatStart[proc_control_B.idx_mc +
              proc_control_B.ibmat];
          }

          proc_control_B.b_newCoefs[proc_control_B.Ns + 6] =
            proc_control_B.coeffMat[proc_control_B.i_m];
          proc_control_B.b_newCoefs[proc_control_B.Ns + 7] =
            proc_control_B.coeffMat[proc_control_B.i_m + 1];
          proc_control_B.b_newCoefs[proc_control_B.Ns + 8] =
            proc_control_B.coeffMat[proc_control_B.i_m + 2];
          proc_control_B.Ns += 9;
          proc_control_B.i_m += 3;
          proc_control_B.ibmat += 6;
        }

        proc_control_B.n[0] = proc_control_B.MatrixConcatenate[0] - 1.0;
        proc_control_B.n[1] = proc_control_B.MatrixConcatenate[0];
        proc_control_B.n[2] = proc_control_B.MatrixConcatenate[1];
        proc_control_B.n[3] = proc_control_B.MatrixConcatenate[1] + 1.0;
        proc_control_B.y_d_a[0] = proc_control_B.MatrixConcatenate[0] - 1.0;
        proc_control_B.y_d_a[1] = proc_control_B.MatrixConcatenate[0];
        proc_control_B.y_d_a[3] = proc_control_B.MatrixConcatenate[1] + 1.0;
        proc_control_B.Divide1_k = 0.01;
        if (proc_control_B.Divide_p > proc_control_B.MatrixConcatenate[1]) {
          proc_control_B.ibmat = 1;
          proc_control_B.idx_m = 1;
        } else {
          proc_control_B.ibmat = 0;
          proc_control_B.idx_m = 0;
        }

        if ((proc_control_B.ibmat != 0) && (proc_control_B.idx_m != 0)) {
          proc_control_B.Divide1_k = std::fmin((proc_control_B.Divide_p -
            proc_control_B.MatrixConcatenate[1]) / 2.0, 0.01);
        }

        proc_control_B.y_d_a[2] = proc_control_B.MatrixConcatenate[1] +
          proc_control_B.Divide1_k;
        std::memset(&proc_control_B.dCoefs[0], 0, 36U * sizeof(real_T));
        proc_control_B.idx_m = 0;
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 3; proc_control_B.i_m
             ++) {
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 9; proc_control_B.Ns++)
          {
            proc_control_B.ibmat = proc_control_B.Ns + proc_control_B.idx_m;
            proc_control_B.dCoefs[proc_control_B.ibmat + 9] = static_cast<real_T>
              (3 - proc_control_B.i_m) *
              proc_control_B.b_newCoefs[proc_control_B.ibmat];
          }

          proc_control_B.idx_m += 9;
        }

        // Update for DiscreteIntegrator: '<S327>/Discrete-Time Integrator'
        proc_control_DW.DiscreteTimeIntegrator_DSTATE = proc_control_B.t65 +
          proc_control_B.Divide_p;

        // End of Outputs for SubSystem: '<S312>/Trajectory generator'

        // MATLABSystem: '<S312>/MATLAB System'
        if (proc_control_DW.obj.linearConvergence !=
            proc_control_P.MATLABSystem_linearConvergence) {
          proc_control_DW.obj.linearConvergence =
            proc_control_P.MATLABSystem_linearConvergence;
        }

        if (proc_control_DW.obj.quaternionConvergence !=
            proc_control_P.MATLABSystem_quaternionConverge) {
          proc_control_DW.obj.quaternionConvergence =
            proc_control_P.MATLABSystem_quaternionConverge;
        }

        if (proc_control_DW.obj.TargetThreshold !=
            proc_control_P.MATLABSystem_TargetThreshold) {
          proc_control_DW.obj.TargetThreshold =
            proc_control_P.MATLABSystem_TargetThreshold;
        }

        // Outputs for Resettable SubSystem: '<S312>/Trajectory generator' incorporates:
        //   ResetPort: '<S327>/Reset'

        // MATLABSystem: '<S329>/Polynomial Trajectory1'
        proc_control_ppval_p(proc_control_B.n, proc_control_B.b_newCoefs,
                             proc_control_B.Divide_p, proc_control_B.c_f);
        proc_control_ppval_p(proc_control_B.y_d_a, proc_control_B.dCoefs,
                             proc_control_B.Divide_p, proc_control_B.u2_j);

        // MATLABSystem: '<S312>/MATLAB System' incorporates:
        //   MATLABSystem: '<S327>/Rotation Trajectory'
        //   MATLABSystem: '<S329>/Polynomial Trajectory1'
        //   SignalConversion generated from: '<S312>/Transpose2'

        proc_control_B.z_k[0] = proc_control_B.c_f[0];
        proc_control_B.z_k[1] = proc_control_B.c_f[1];
        proc_control_B.z_k[2] = proc_control_B.c_f[2];
        proc_control_B.z_k[3] = proc_control_B.t12;
        proc_control_B.z_k[4] = proc_control_B.scale;
        proc_control_B.z_k[5] = proc_control_B.t21;
        proc_control_B.z_k[6] = proc_control_B.dp;
        proc_control_B.z_k[7] = proc_control_B.u2_j[0];
        proc_control_B.z_k[10] = ((proc_control_B.oa * -proc_control_B.scale +
          proc_control_B.ob * proc_control_B.t12) + proc_control_B.absxk *
          -proc_control_B.dp) - proc_control_B.Product8 * -proc_control_B.t21;

        // End of Outputs for SubSystem: '<S312>/Trajectory generator'
        proc_control_B.imz[0] = proc_control_B.WorldPosition[0];

        // Outputs for Resettable SubSystem: '<S312>/Trajectory generator' incorporates:
        //   ResetPort: '<S327>/Reset'

        proc_control_B.z_k[8] = proc_control_B.u2_j[1];
        proc_control_B.z_k[11] = ((proc_control_B.oa * -proc_control_B.t21 -
          proc_control_B.ob * -proc_control_B.dp) + proc_control_B.absxk *
          proc_control_B.t12) + proc_control_B.Product8 * -proc_control_B.scale;

        // End of Outputs for SubSystem: '<S312>/Trajectory generator'
        proc_control_B.imz[1] = proc_control_B.WorldPosition[1];

        // Outputs for Resettable SubSystem: '<S312>/Trajectory generator' incorporates:
        //   ResetPort: '<S327>/Reset'

        proc_control_B.z_k[9] = proc_control_B.u2_j[2];
        proc_control_B.z_k[12] = ((proc_control_B.oa * -proc_control_B.dp +
          proc_control_B.ob * -proc_control_B.t21) - proc_control_B.absxk *
          -proc_control_B.scale) + proc_control_B.Product8 * proc_control_B.t12;

        // End of Outputs for SubSystem: '<S312>/Trajectory generator'
        proc_control_B.imz[2] = proc_control_B.WorldPosition[2];
        proc_control_B.imz[3] = proc_control_B.qS2W[0];
        proc_control_B.imz[4] = proc_control_B.qS2W[1];
        proc_control_B.imz[5] = proc_control_B.qS2W[2];
        proc_control_B.imz[6] = proc_control_B.qS2W[3];
        proc_control_B.imz[7] = proc_control_B.BodyVelocity[0];
        proc_control_B.imz[10] = proc_control_B.AngularRate[0];
        proc_control_B.imz[8] = proc_control_B.BodyVelocity[1];
        proc_control_B.imz[11] = proc_control_B.AngularRate[1];
        proc_control_B.imz[9] = proc_control_B.BodyVelocity[2];
        proc_control_B.imz[12] = proc_control_B.AngularRate[2];

        // Merge generated from: '<S9>/Merge' incorporates:
        //   MATLABSystem: '<S312>/MATLAB System'
        //   MATLABSystem: '<S312>/MATLAB System1'
        //   Math: '<S312>/Transpose1'
        //   Selector: '<S324>/Selector4'

        proc_TrajectoryManager_stepImpl(&proc_control_DW.obj, proc_control_B.d,
          proc_control_B.z_k, proc_control_B.Selector4,
          proc_control_DW.obj_a.initcond, proc_control_B.imz, proc_control_B.y_j,
          &proc_control_B.isReached);

        // Merge generated from: '<S9>/Merge' incorporates:
        //   MATLABSystem: '<S312>/MATLAB System'
        //   SignalConversion generated from: '<S312>/Reference '

        std::memcpy(&proc_control_B.Reference[0], &proc_control_B.y_j[0], 130U *
                    sizeof(real_T));

        // Merge generated from: '<S9>/Merge' incorporates:
        //   Constant: '<S312>/Constant2'
        //   SignalConversion generated from: '<S312>/Reference '

        proc_control_B.isTrajDone = proc_control_P.Constant2_Value_i;
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 7; proc_control_B.i_m
             ++) {
          // Merge generated from: '<S9>/Merge' incorporates:
          //   Math: '<S312>/Transpose1'
          //   Selector: '<S324>/Selector4'
          //   SignalConversion generated from: '<S312>/Reference '

          proc_control_B.target[proc_control_B.i_m] =
            proc_control_B.Selector4[proc_control_B.i_m];
        }

        // Outputs for Atomic SubSystem: '<S312>/Subscribe'
        // Update for Delay: '<S312>/Delay1' incorporates:
        //   MATLABSystem: '<S325>/SourceBlock'

        proc_control_DW.Delay1_DSTATE_c = rtb_Merge;

        // End of Outputs for SubSystem: '<S312>/Subscribe'
        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      }
      break;

     default:
      // Outputs for IfAction SubSystem: '<S9>/IDLE' incorporates:
      //   ActionPort: '<S305>/Action Port'

      // MATLAB Function: '<S305>/MATLAB Function1' incorporates:
      //   Constant: '<S305>/Constant'
      //   Math: '<S305>/Transpose'

      std::memcpy(&proc_control_B.K_j[0], &proc_control_P.Constant_Value_m5[0],
                  13U * sizeof(real_T));
      proc_control_B.K_j[9] = -proc_control_P.Constant_Value_m5[9];
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 13;
           proc_control_B.idx_m++) {
        proc_control_B.ibmat = proc_control_B.idx_m * 10;
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 10; proc_control_B.i_m
             ++) {
          proc_control_B.y_j[proc_control_B.ibmat + proc_control_B.i_m] =
            proc_control_B.K_j[proc_control_B.idx_m];
        }
      }

      // End of MATLAB Function: '<S305>/MATLAB Function1'

      // Merge generated from: '<S9>/Merge' incorporates:
      //   SignalConversion generated from: '<S305>/y'

      std::memcpy(&proc_control_B.Reference[0], &proc_control_B.y_j[0], 130U *
                  sizeof(real_T));

      // Merge generated from: '<S9>/Merge' incorporates:
      //   Constant: '<S305>/Constant5'
      //   SignalConversion generated from: '<S305>/y'

      proc_control_B.isReached = proc_control_P.Constant5_Value;

      // Merge generated from: '<S9>/Merge' incorporates:
      //   Constant: '<S305>/Constant4'
      //   SignalConversion generated from: '<S305>/y'

      proc_control_B.isTrajDone = proc_control_P.Constant4_Value;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 7; proc_control_B.i_m++)
      {
        // Merge generated from: '<S9>/Merge' incorporates:
        //   Constant: '<S305>/Constant'
        //   Math: '<S305>/Transpose'
        //   SignalConversion generated from: '<S305>/y'

        proc_control_B.target[proc_control_B.i_m] =
          proc_control_P.Constant_Value_m5[proc_control_B.i_m];
      }

      // End of Outputs for SubSystem: '<S9>/IDLE'
      break;
    }

    // End of SwitchCase: '<S9>/Switch Case'

    // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Switch: '<S7>/Switch' incorporates:
    //   Constant: '<S7>/Constant'
    //   Constant: '<S7>/Constant1'

    if (proc_control_B.DataTypeConversion_j > proc_control_P.Switch_Threshold_d)
    {
      proc_control_B.rtb_u2_f = proc_control_P.Constant_Value_hf;
    } else {
      proc_control_B.rtb_u2_f = proc_control_P.Constant1_Value_f;
    }

    // End of Switch: '<S7>/Switch'

    // Outputs for Enabled SubSystem: '<S7>/MPC manager' incorporates:
    //   EnablePort: '<S139>/Enable'

    if (proc_control_B.rtb_u2_f > 0.0) {
      if (!proc_control_DW.MPCmanager_MODE) {
        // InitializeConditions for MATLABSystem: '<S139>/MPC manager'
        proc_contr_mpcManager_resetImpl(&proc_control_DW.obj_f);
        proc_control_DW.MPCmanager_MODE = true;
      }

      // Outputs for Atomic SubSystem: '<S139>/Subscribe1'
      // MATLABSystem: '<S238>/SourceBlock'
      rtb_Merge = Sub_proc_control_182_1643.getLatestMessage
        (&proc_control_B.b_varargout_2_m3);

      // Outputs for Enabled SubSystem: '<S238>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S240>/Enable'

      if (rtb_Merge) {
        // SignalConversion generated from: '<S240>/In1'
        proc_control_B.In1_o = proc_control_B.b_varargout_2_m3;
      }

      // End of Outputs for SubSystem: '<S238>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S139>/Subscribe1'

      // Outputs for Atomic SubSystem: '<S139>/Subscribe'
      // MATLABSystem: '<S237>/SourceBlock'
      rtb_NewDvlMsg = Sub_proc_control_182_1620.getLatestMessage
        (&proc_control_B.b_varargout_2_m);

      // Outputs for Enabled SubSystem: '<S237>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S239>/Enable'

      if (rtb_NewDvlMsg) {
        // SignalConversion generated from: '<S239>/In1'
        proc_control_B.In1_f = proc_control_B.b_varargout_2_m;
      }

      // End of Outputs for SubSystem: '<S237>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S139>/Subscribe'

      // MATLABSystem: '<S139>/MPC manager' incorporates:
      //   Delay: '<S7>/Delay'
      //   MATLABSystem: '<S237>/SourceBlock'
      //   MATLABSystem: '<S238>/SourceBlock'
      //   Math: '<S139>/Transpose'

      //         %% Fonction D'initialisation
      //  Conditions initial
      if (proc_control_DW.obj_f.init == 0.0) {
        proc_control_DW.obj_f.init = 1.0;
      }

      // Outputs for Atomic SubSystem: '<S139>/Subscribe1'
      //  Init function
      //       %% Fonction qui traite les gains recu via ros.
      if (rtb_Merge) {
        if (proc_control_B.In1_o.OV_SL_Info.CurrentLength == 13U) {
          //  regarder la vaiditée des ov
          std::memcpy(&proc_control_DW.obj_f.rosOV[0], &proc_control_B.In1_o.OV
                      [0], 13U * sizeof(real_T));
        }

        if (proc_control_B.In1_o.MV_SL_Info.CurrentLength == 8U) {
          //  regarder la vaiditée des mv
          std::memcpy(&proc_control_DW.obj_f.rosMV[0], &proc_control_B.In1_o.MV
                      [0], sizeof(real_T) << 3U);
        }

        if (proc_control_B.In1_o.MVR_SL_Info.CurrentLength == 8U) {
          //  regarder la vaiditée des mvr
          std::memcpy(&proc_control_DW.obj_f.rosMVR[0],
                      &proc_control_B.In1_o.MVR[0], sizeof(real_T) << 3U);
        }
      }

      // End of Outputs for SubSystem: '<S139>/Subscribe1'
      //  traiter les gains recu via ros.
      proc_co_mpcManager_getMpcWeigth(&proc_control_DW.obj_f,
        proc_control_B.DataTypeConversion_j, proc_control_B.K_j,
        proc_control_B.u_scale, proc_control_B.U_h);

      //  Avoir les gains selon le mode
      std::memcpy(&proc_control_B.readCurrent[0], &proc_control_B.In1_f.Data[0],
                  sizeof(real_T) << 7U);

      // Outputs for Atomic SubSystem: '<S139>/Subscribe'
      //         %% Fonction qui vérifie l'états des moteurs.
      if (rtb_NewDvlMsg) {
        proc_control_B.readCurrent[7] = 0.0;

        //  regarder si le courant est en dessou du seuil
        //  Rénitialiser le compteur si thruster est bon
        //  Aditionner les échantillion défectueux
        //  Condition qui vérifie si les thruster sont defectueux
        //  rajouter des moteur défecteux
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          rtb_Merge = (proc_control_B.readCurrent[proc_control_B.Ns] <
                       static_cast<uint16_T>(static_cast<int32_T>(std::round(
            static_cast<real_T>(proc_control_DW.Delay_DSTATE_g[proc_control_B.Ns])
            * 0.1))));
          proc_control_DW.obj_f.currentFaultCount[proc_control_B.Ns] *=
            static_cast<real_T>(rtb_Merge);
          proc_control_DW.obj_f.currentFaultCount[proc_control_B.Ns] +=
            static_cast<real_T>(rtb_Merge);
          proc_control_DW.obj_f.isThrusterFault[proc_control_B.Ns] =
            ((proc_control_DW.obj_f.currentFaultCount[proc_control_B.Ns] >= 20.0)
             + proc_control_DW.obj_f.isThrusterFault[proc_control_B.Ns] != 0);
        }
      }

      // End of Outputs for SubSystem: '<S139>/Subscribe'
      //  Vérifier l'etats des thrusters
      //         %% Fonction qui applique la saturation des moteurs
      //  Enlever les thrusters defectueux
      //       %% Fonction qui prend la decision de kill le sub
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.idx_m =
          !proc_control_DW.obj_f.isThrusterFault[proc_control_B.Ns];

        // MATLABSystem: '<S139>/MPC manager'
        proc_control_B.mvmin[proc_control_B.Ns] = -15.0 * static_cast<real_T>
          (proc_control_B.idx_m);

        // MATLABSystem: '<S139>/MPC manager'
        proc_control_B.mvmax[proc_control_B.Ns] = 20.0 * static_cast<real_T>
          (proc_control_B.idx_m);
      }

      // MATLABSystem: '<S139>/MPC manager'
      std::memcpy(&proc_control_B.ywt[0], &proc_control_B.K_j[0], 13U * sizeof
                  (real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        // MATLABSystem: '<S139>/MPC manager'
        proc_control_B.mvwt[proc_control_B.Ns] =
          proc_control_B.u_scale[proc_control_B.Ns];

        // MATLABSystem: '<S139>/MPC manager'
        proc_control_B.dmwwt[proc_control_B.Ns] =
          proc_control_B.U_h[proc_control_B.Ns];

        // MATLABSystem: '<S139>/MPC manager'
        proc_control_B.thrustersStatus[proc_control_B.Ns] =
          !proc_control_DW.obj_f.isThrusterFault[proc_control_B.Ns];
      }
    } else {
      proc_control_DW.MPCmanager_MODE = false;
    }

    // End of Outputs for SubSystem: '<S7>/MPC manager'

    // SwitchCase: '<S138>/Switch Case' incorporates:
    //   Gain: '<S148>/u_scale'
    //   MATLAB Function: '<S176>/FixedHorizonOptimizer'
    //   MATLAB Function: '<S210>/FixedHorizonOptimizer'
    //   Memory: '<S148>/Memory'
    //   Memory: '<S182>/Memory'

    rtPrevAction = proc_control_DW.SwitchCase_ActiveSubsystem_l;
    switch (proc_control_B.DataTypeConversion_j) {
     case 10:
     case 11:
     case 19:
     case 31:
      rtAction = 0;
      break;

     case 20:
     case 21:
      rtAction = 1;
      break;

     case 30:
      rtAction = 2;
      break;

     case 40:
      rtAction = 3;
      break;

     default:
      rtAction = 4;
      break;
    }

    proc_control_DW.SwitchCase_ActiveSubsystem_l = rtAction;
    switch (rtAction) {
     case 0:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S138>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S141>/Action Port'

        // InitializeConditions for SwitchCase: '<S138>/Switch Case' incorporates:
        //   Delay: '<S141>/Delay1'
        //   DiscretePulseGenerator: '<S141>/Pulse Generator'
        //   Memory: '<S148>/Memory'
        //   UnitDelay: '<S148>/last_mv'

        std::memcpy(&proc_control_DW.Memory_PreviousInput_g[0],
                    &proc_control_P.Memory_InitialCondition[0], 258U * sizeof
                    (boolean_T));
        std::memcpy(&proc_control_DW.last_mv_DSTATE_f[0],
                    &proc_control_P.last_mv_InitialCondition[0], sizeof(real_T) <<
                    3U);
        std::memcpy(&proc_control_DW.Delay1_DSTATE_e[0],
                    &proc_control_P.Delay1_InitialCondition[0], sizeof(real_T) <<
                    3U);
        proc_control_DW.clockTickCounter_j = 0;

        // End of InitializeConditions for SubSystem: '<S138>/Adaptive MPC quaternion ' 

        // SystemReset for IfAction SubSystem: '<S138>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S141>/Action Port'

        // SystemReset for SwitchCase: '<S138>/Switch Case' incorporates:
        //   MATLABSystem: '<S141>/MATLAB System'

        //  Initialize / reset discrete-state properties
        proc_control_DW.obj_b.qkm[0] = 1.0;
        proc_control_DW.obj_b.qkt[0] = 1.0;
        proc_control_DW.obj_b.qkm[1] = 0.0;
        proc_control_DW.obj_b.qkt[1] = 0.0;
        proc_control_DW.obj_b.qkm[2] = 0.0;
        proc_control_DW.obj_b.qkt[2] = 0.0;
        proc_control_DW.obj_b.qkm[3] = 0.0;
        proc_control_DW.obj_b.qkt[3] = 0.0;
        std::memcpy(&proc_control_DW.obj_b.xl[0], &tmp_1[0], 13U * sizeof(real_T));

        // End of SystemReset for SubSystem: '<S138>/Adaptive MPC quaternion '
      }

      // Outputs for IfAction SubSystem: '<S138>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S141>/Action Port'

      // SignalConversion generated from: '<S141>/MATLAB System'
      proc_control_B.TmpSignalConversionAtMAT_lt[0] =
        proc_control_B.WorldPosition[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[1] =
        proc_control_B.WorldPosition[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[2] =
        proc_control_B.WorldPosition[2];
      proc_control_B.TmpSignalConversionAtMAT_lt[7] =
        proc_control_B.BodyVelocity[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[10] =
        proc_control_B.AngularRate[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[8] =
        proc_control_B.BodyVelocity[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[11] =
        proc_control_B.AngularRate[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[9] =
        proc_control_B.BodyVelocity[2];
      proc_control_B.TmpSignalConversionAtMAT_lt[12] =
        proc_control_B.AngularRate[2];

      // MATLABSystem: '<S141>/MATLAB System' incorporates:
      //   Delay: '<S141>/Delay1'
      //   Merge generated from: '<S9>/Merge'
      //   SignalConversion generated from: '<S141>/MATLAB System'

      //  Regarder la discontinuité entre le qk et qk-1 pour la mesure
      // =================================================================
      //  Fonction qui assure la continuité entre 2 quaternions
      //  Regarder la discontinuité entre le qk et qk-1
      proc_control_B.t15 = proc_control_B.qS2W[0];
      proc_control_B.t16 = proc_control_B.qS2W[1];
      proc_control_B.t63 = proc_control_B.qS2W[2];
      proc_control_B.t = proc_control_B.qS2W[3];
      if (((proc_control_DW.obj_b.qkm[0] * proc_control_B.qS2W[0] +
            proc_control_DW.obj_b.qkm[1] * proc_control_B.qS2W[1]) +
           proc_control_DW.obj_b.qkm[2] * proc_control_B.qS2W[2]) +
          proc_control_DW.obj_b.qkm[3] * proc_control_B.qS2W[3] < 0.0) {
        proc_control_B.t15 = -proc_control_B.qS2W[0];
        proc_control_B.t16 = -proc_control_B.qS2W[1];
        proc_control_B.t63 = -proc_control_B.qS2W[2];
        proc_control_B.t = -proc_control_B.qS2W[3];
      }

      proc_control_B.TmpSignalConversionAtMAT_lt[3] = proc_control_B.t15;
      proc_control_DW.obj_b.qkm[0] = proc_control_B.t15;
      proc_control_B.TmpSignalConversionAtMAT_lt[4] = proc_control_B.t16;
      proc_control_DW.obj_b.qkm[1] = proc_control_B.t16;
      proc_control_B.TmpSignalConversionAtMAT_lt[5] = proc_control_B.t63;
      proc_control_DW.obj_b.qkm[2] = proc_control_B.t63;
      proc_control_B.TmpSignalConversionAtMAT_lt[6] = proc_control_B.t;
      proc_control_DW.obj_b.qkm[3] = proc_control_B.t;

      //  Regarder la discontinuité entre le qk et qk + p pour la trajectoire
      std::memcpy(&proc_control_B.y_j[0], &proc_control_B.Reference[0], 130U *
                  sizeof(real_T));

      //  check fist ref
      // =================================================================
      //  Fonction qui assure la continuité entre 2 quaternions
      //  Regarder la discontinuité entre le qk et qk-1
      proc_control_B.y_j[30] = proc_control_B.Reference[30];
      proc_control_B.y_j[40] = proc_control_B.Reference[40];
      proc_control_B.y_j[50] = proc_control_B.Reference[50];
      proc_control_B.y_j[60] = proc_control_B.Reference[60];
      if (((proc_control_DW.obj_b.qkt[0] * proc_control_B.Reference[30] +
            proc_control_DW.obj_b.qkt[1] * proc_control_B.Reference[40]) +
           proc_control_DW.obj_b.qkt[2] * proc_control_B.Reference[50]) +
          proc_control_DW.obj_b.qkt[3] * proc_control_B.Reference[60] < 0.0) {
        proc_control_B.y_j[30] = -proc_control_B.Reference[30];
        proc_control_B.y_j[40] = -proc_control_B.Reference[40];
        proc_control_B.y_j[50] = -proc_control_B.Reference[50];
        proc_control_B.y_j[60] = -proc_control_B.Reference[60];
      }

      for (proc_control_B.i_m = 0; proc_control_B.i_m < 9; proc_control_B.i_m++)
      {
        // =================================================================
        //  Fonction qui assure la continuité entre 2 quaternions
        //  Regarder la discontinuité entre le qk et qk-1
        proc_control_B.t15 = proc_control_B.y_j[proc_control_B.i_m + 31];
        proc_control_B.t16 = proc_control_B.y_j[proc_control_B.i_m + 41];
        proc_control_B.t63 = proc_control_B.y_j[proc_control_B.i_m + 51];
        proc_control_B.t = proc_control_B.y_j[proc_control_B.i_m + 61];
        if (((proc_control_B.y_j[proc_control_B.i_m + 30] * proc_control_B.t15 +
              proc_control_B.y_j[proc_control_B.i_m + 40] * proc_control_B.t16)
             + proc_control_B.y_j[proc_control_B.i_m + 50] * proc_control_B.t63)
            + proc_control_B.y_j[proc_control_B.i_m + 60] * proc_control_B.t <
            0.0) {
          proc_control_B.t15 = -proc_control_B.t15;
          proc_control_B.t16 = -proc_control_B.t16;
          proc_control_B.t63 = -proc_control_B.t63;
          proc_control_B.t = -proc_control_B.t;
        }

        proc_control_B.y_j[proc_control_B.i_m + 31] = proc_control_B.t15;
        proc_control_B.y_j[proc_control_B.i_m + 41] = proc_control_B.t16;
        proc_control_B.y_j[proc_control_B.i_m + 51] = proc_control_B.t63;
        proc_control_B.y_j[proc_control_B.i_m + 61] = proc_control_B.t;
      }

      //  save quat for next step
      proc_control_DW.obj_b.qkt[0] = proc_control_B.y_j[30];
      proc_control_DW.obj_b.qkt[1] = proc_control_B.y_j[40];
      proc_control_DW.obj_b.qkt[2] = proc_control_B.y_j[50];
      proc_control_DW.obj_b.qkt[3] = proc_control_B.y_j[60];

      //  Calculer le residue de mesure
      //  Linéariser le systeme.
      proc_co_TrimPlant_trimPlantQuat(&proc_control_DW.obj_b,
        proc_control_DW.Delay1_DSTATE_e,
        proc_control_B.TmpSignalConversionAtMAT_lt, proc_control_B.A_m,
        proc_control_B.b_B_m, proc_control_B.u_scale, proc_control_B.K_j,
        proc_control_B.z_k, proc_control_B.imz);

      // MATLAB Function: '<S176>/FixedHorizonOptimizer' incorporates:
      //   DiscretePulseGenerator: '<S144>/Pulse Generator'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S140>/N to A'
      //   Lookup_n-D: '<S140>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   MATLABSystem: '<S141>/MATLAB System'
      //   SignalConversion generated from: '<S177>/ SFunction '
      //   Trigonometry: '<S271>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //   UniformRandomNumber: '<S12>/ Drift'
      //
      std::memset(&proc_control_B.Bu[0], 0, 1848U * sizeof(real_T));
      std::memset(&proc_control_B.Bv[0], 0, 231U * sizeof(real_T));
      std::memset(&proc_control_B.Dv[0], 0, 143U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_A_o[0], &b_0[0], 441U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_B[0], &c[0], 630U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 273; proc_control_B.Ns++)
      {
        proc_control_B.b_C_c[proc_control_B.Ns] = d_0[proc_control_B.Ns];
      }

      proc_control_B.Ns = 0;
      proc_control_B.i_m = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        for (proc_control_B.idx_k = 0; proc_control_B.idx_k < 13;
             proc_control_B.idx_k++) {
          proc_control_B.K_tmp = proc_control_B.idx_k + proc_control_B.Ns;
          proc_control_B.b_C_c[proc_control_B.K_tmp] = c_0[proc_control_B.K_tmp];
          proc_control_B.b_A_o[proc_control_B.idx_k + proc_control_B.i_m] =
            proc_control_B.A_m[proc_control_B.K_tmp];
        }

        proc_control_B.Ns += 13;
        proc_control_B.i_m += 21;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        std::memcpy(&proc_control_B.b_B[proc_control_B.Ns * 21],
                    &proc_control_B.b_B_m[proc_control_B.Ns * 13], 13U * sizeof
                    (real_T));
        std::memcpy(&proc_control_B.Bu[proc_control_B.Ns * 21],
                    &proc_control_B.b_B[proc_control_B.Ns * 21], 21U * sizeof
                    (real_T));
      }

      std::memcpy(&proc_control_B.Bv[0], &proc_control_B.b_B[168], 21U * sizeof
                  (real_T));
      std::memset(&proc_control_B.Dv[0], 0, 13U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_Mlim[0], &e[0], 258U * sizeof(real_T));
      std::memset(&proc_control_B.b_utarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_xoff[0], &f_0[0], 21U * sizeof(real_T));
      std::memcpy(&proc_control_B.U_h[0], &proc_control_B.u_scale[0], sizeof
                  (real_T) << 3U);
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 258;
           proc_control_B.idx_m++) {
        proc_control_B.Divide_p = proc_control_B.b_Mlim[proc_control_B.idx_m];
        proc_control_B.Ns = b_Mrows[proc_control_B.idx_m];
        if (proc_control_B.Ns <= 130) {
          proc_control_B.Ns = (proc_control_B.Ns - div_nde_s32_floor
                               (proc_control_B.Ns - 1, proc_control_ny) *
                               proc_control_ny) - 1;
          proc_control_B.Divide_p += old_yoff[proc_control_B.Ns] -
            proc_control_B.K_j[proc_control_B.Ns];
        } else if (proc_control_B.Ns <= 260) {
          proc_control_B.Ns = (proc_control_B.Ns - div_nde_s32_floor
                               (proc_control_B.Ns - 131, proc_control_ny) *
                               proc_control_ny) - 131;
          proc_control_B.Divide_p -= old_yoff[proc_control_B.Ns] -
            proc_control_B.K_j[proc_control_B.Ns];
        } else if (proc_control_B.Ns <= 340) {
          proc_control_B.Divide_p += 0.0 - proc_control_B.U_h[(proc_control_B.Ns
            - (((proc_control_B.Ns - 261) >> 3) << 3)) - 261];
        } else {
          proc_control_B.Divide_p -= 0.0 - proc_control_B.U_h[(proc_control_B.Ns
            - (((proc_control_B.Ns - 341) >> 3) << 3)) - 341];
        }

        proc_control_B.b_Mlim[proc_control_B.idx_m] = proc_control_B.Divide_p;
      }

      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 8;
           proc_control_B.idx_m++) {
        proc_control_B.Divide_p = proc_control_B.U_h[proc_control_B.idx_m];
        proc_control_B.Ns = 0;
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 10; proc_control_B.i_m
             ++) {
          proc_control_B.ibmat = proc_control_B.Ns + proc_control_B.idx_m;
          proc_control_B.b_utarget[proc_control_B.ibmat] -=
            proc_control_B.Divide_p;
          proc_control_B.Ns += 8;
        }
      }

      std::memcpy(&proc_control_B.b_xoff[0], &proc_control_B.z_k[0], 13U *
                  sizeof(real_T));
      std::memcpy(&proc_control_B.Bv[0], &proc_control_B.imz[0], 13U * sizeof
                  (real_T));
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 11;
           proc_control_B.idx_m++) {
        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S242>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_B.vseq[proc_control_B.idx_m] = 1.0;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      std::memset(&proc_control_B.rseq[0], 0, 130U * sizeof(real_T));
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_B.idx_m = 0;
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 10; proc_control_B.i_m
             ++) {
          proc_control_B.rseq[proc_control_B.idx_m + proc_control_B.ibmat] =
            proc_control_B.y_j[proc_control_B.i_m + proc_control_B.Ns] -
            proc_control_B.K_j[proc_control_B.ibmat];
          proc_control_B.idx_m += 13;
        }

        proc_control_B.z_c[proc_control_B.ibmat] =
          proc_control_B.z_k[proc_control_B.ibmat] -
          proc_control_B.b_xoff[proc_control_B.ibmat];
        proc_control_B.Ns += 10;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        // SignalConversion generated from: '<S177>/ SFunction ' incorporates:
        //   Constant: '<S141>/Constant'
        //   MATLAB Function: '<S176>/FixedHorizonOptimizer'

        proc_control_B.z_c[proc_control_B.Ns + 13] =
          proc_control_P.Constant_Value_e3[proc_control_B.Ns] -
          proc_control_B.b_xoff[proc_control_B.Ns + 13];
      }

      // SignalConversion generated from: '<S177>/ SFunction ' incorporates:
      //   Constant: '<S141>/Constant1'
      //   MATLAB Function: '<S176>/FixedHorizonOptimizer'

      proc_control_B.z_c[19] = proc_control_P.Constant1_Value_mt[0] -
        proc_control_B.b_xoff[19];
      proc_control_B.z_c[20] = proc_control_P.Constant1_Value_mt[1] -
        proc_control_B.b_xoff[20];

      // MATLAB Function: '<S176>/FixedHorizonOptimizer' incorporates:
      //   UnitDelay: '<S148>/last_mv'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv25[proc_control_B.Ns] =
          proc_control_DW.last_mv_DSTATE_f[proc_control_B.Ns] -
          proc_control_B.u_scale[proc_control_B.Ns];
      }

      std::memset(&proc_control_B.dv1[0], 0, 2838U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv26[proc_control_B.Ns] = 1.0;
      }

      std::memcpy(&proc_control_B.g[0], &g[0], 5418U * sizeof(real_T));
      std::memcpy(&proc_control_B.h[0], &h[0], 2064U * sizeof(real_T));
      std::memcpy(&proc_control_B.k[0], &k[0], 625U * sizeof(real_T));
      std::memcpy(&proc_control_B.l[0], &l[0], 6450U * sizeof(real_T));
      std::memcpy(&proc_control_B.bv[0],
                  &proc_control_DW.Memory_PreviousInput_g[0], 258U * sizeof
                  (boolean_T));

      // Update for Memory: '<S148>/Memory' incorporates:
      //   MATLAB Function: '<S176>/FixedHorizonOptimizer'
      //   MATLABSystem: '<S139>/MPC manager'
      //   Math: '<S148>/Math Function'
      //   Math: '<S148>/Math Function1'
      //   Math: '<S148>/Math Function2'
      //   Merge generated from: '<S138>/Merge'

      proc_control_mpcblock_optimizer(proc_control_B.rseq, proc_control_B.vseq,
        proc_control_B.mvmin, proc_control_B.mvmax, proc_control_B.z_c,
        proc_control_B.dv25, proc_control_B.bv, proc_control_B.b_Mlim,
        proc_control_B.g, proc_control_B.h, proc_control_B.dv1,
        proc_control_B.b_utarget, proc_control_B.u_scale, proc_control_B.k,
        proc_control_B.l, proc_control_B.ywt, proc_control_B.mvwt,
        proc_control_B.dmwwt, n, o, proc_control_B.b_A_o, proc_control_B.Bu,
        proc_control_B.Bv, proc_control_B.b_C_c, proc_control_B.Dv, b_Mrows,
        proc_control_B.dv26, proc_control_B.U_h, proc_control_B.useq_a,
        &proc_control_B.MpcStatus, proc_control_DW.Memory_PreviousInput_g);

      // Merge generated from: '<S138>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S141>/Pulse Generator'

      proc_control_B.alive = (proc_control_DW.clockTickCounter_j <
        proc_control_P.PulseGenerator_Duty) &&
        (proc_control_DW.clockTickCounter_j >= 0) ?
        proc_control_P.PulseGenerator_Amp : 0.0;

      // DiscretePulseGenerator: '<S141>/Pulse Generator'
      if (proc_control_DW.clockTickCounter_j >=
          proc_control_P.PulseGenerator_Period - 1.0) {
        proc_control_DW.clockTickCounter_j = 0;
      } else {
        proc_control_DW.clockTickCounter_j++;
      }

      for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m++)
      {
        proc_control_B.Divide_p = proc_control_B.U_h[proc_control_B.i_m];

        // Gain: '<S148>/u_scale'
        proc_control_B.t65 = proc_control_P.u_scale_Gain[proc_control_B.i_m] *
          proc_control_B.Divide_p;

        // Merge generated from: '<S138>/Merge' incorporates:
        //   Gain: '<S148>/u_scale'
        //   SignalConversion generated from: '<S141>/out'

        proc_control_B.mv[proc_control_B.i_m] = proc_control_B.t65;

        // Update for UnitDelay: '<S148>/last_mv' incorporates:
        //   Gain: '<S148>/u_scale'

        proc_control_DW.last_mv_DSTATE_f[proc_control_B.i_m] =
          proc_control_B.Divide_p;

        // Update for Delay: '<S141>/Delay1' incorporates:
        //   Gain: '<S148>/u_scale'

        proc_control_DW.Delay1_DSTATE_e[proc_control_B.i_m] = proc_control_B.t65;
      }

      // End of Outputs for SubSystem: '<S138>/Adaptive MPC quaternion '
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S138>/JoyStick OpenLoop' incorporates:
      //   ActionPort: '<S143>/Action Port'

      // SampleTimeMath: '<S178>/TSamp' incorporates:
      //   Merge generated from: '<S9>/Merge'
      //   Selector: '<S143>/Selector'
      //
      //  About '<S178>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )

      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 6; proc_control_B.i_m++)
      {
        proc_control_B.TSamp[proc_control_B.i_m] =
          proc_control_B.Reference[proc_control_B.Ns + 70] *
          proc_control_P.TSamp_WtEt;
        proc_control_B.Ns += 10;
      }

      // End of SampleTimeMath: '<S178>/TSamp'

      // MATLABSystem: '<S143>/MATLAB System' incorporates:
      //   Merge generated from: '<S9>/Merge'
      //   Selector: '<S143>/Selector'

      if (proc_control_DW.obj_m.k != proc_control_P.MATLABSystem_k) {
        proc_control_DW.obj_m.k = proc_control_P.MATLABSystem_k;
      }

      rtb_NewDvlMsg = false;
      rtb_newPressureMsg = true;
      proc_control_B.ibmat = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.ibmat < 48)) {
        if (!(proc_control_DW.obj_m.binv[proc_control_B.ibmat] ==
              proc_control_P.binv[proc_control_B.ibmat])) {
          rtb_newPressureMsg = false;
          exitg1 = true;
        } else {
          proc_control_B.ibmat++;
        }
      }

      if (rtb_newPressureMsg) {
        rtb_NewDvlMsg = true;
      }

      if (!rtb_NewDvlMsg) {
        std::memcpy(&proc_control_DW.obj_m.binv[0], &proc_control_P.binv[0], 48U
                    * sizeof(real_T));
      }

      if (proc_control_DW.obj_m.mass != proc_control_P.physics.mass) {
        proc_control_DW.obj_m.mass = proc_control_P.physics.mass;
      }

      if (proc_control_DW.obj_m.volume != proc_control_P.physics.volume) {
        proc_control_DW.obj_m.volume = proc_control_P.physics.volume;
      }

      if (proc_control_DW.obj_m.height != proc_control_P.physics.height) {
        proc_control_DW.obj_m.height = proc_control_P.physics.height;
      }

      rtb_NewDvlMsg = false;
      rtb_newPressureMsg = true;
      proc_control_B.ibmat = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.ibmat < 9)) {
        if (!(proc_control_DW.obj_m.I[proc_control_B.ibmat] ==
              proc_control_P.physics.I[proc_control_B.ibmat])) {
          rtb_newPressureMsg = false;
          exitg1 = true;
        } else {
          proc_control_B.ibmat++;
        }
      }

      if (rtb_newPressureMsg) {
        rtb_NewDvlMsg = true;
      }

      if (!rtb_NewDvlMsg) {
        std::memcpy(&proc_control_DW.obj_m.I[0], &proc_control_P.physics.I[0],
                    9U * sizeof(real_T));
      }

      if (!proc_control_isequal(proc_control_DW.obj_m.RG,
           proc_control_P.physics.RG)) {
        proc_control_DW.obj_m.RG[0] = proc_control_P.physics.RG[0];
        proc_control_DW.obj_m.RG[1] = proc_control_P.physics.RG[1];
        proc_control_DW.obj_m.RG[2] = proc_control_P.physics.RG[2];
      }

      if (!proc_control_isequal(proc_control_DW.obj_m.RB,
           proc_control_P.physics.RB)) {
        proc_control_DW.obj_m.RB[0] = proc_control_P.physics.RB[0];
        proc_control_DW.obj_m.RB[1] = proc_control_P.physics.RB[1];
        proc_control_DW.obj_m.RB[2] = proc_control_P.physics.RB[2];
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_m.AddedMass,
           proc_control_P.physics.AddedMass)) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_m.AddedMass[proc_control_B.Ns] =
            proc_control_P.physics.AddedMass[proc_control_B.Ns];
        }
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_m.CDL,
           proc_control_P.physics.CDL)) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_m.CDL[proc_control_B.Ns] =
            proc_control_P.physics.CDL[proc_control_B.Ns];
        }
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_m.CDQ,
           proc_control_P.physics.CDQ)) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_m.CDQ[proc_control_B.Ns] =
            proc_control_P.physics.CDQ[proc_control_B.Ns];
        }
      }

      if (!proc_control_isequal(proc_control_DW.obj_m.AF,
           proc_control_P.physics.AF)) {
        proc_control_DW.obj_m.AF[0] = proc_control_P.physics.AF[0];
        proc_control_DW.obj_m.AF[1] = proc_control_P.physics.AF[1];
        proc_control_DW.obj_m.AF[2] = proc_control_P.physics.AF[2];
      }

      if (proc_control_DW.obj_m.g != proc_control_P.physics.g) {
        proc_control_DW.obj_m.g = proc_control_P.physics.g;
      }

      if (proc_control_DW.obj_m.rho != proc_control_P.physics.rho) {
        proc_control_DW.obj_m.rho = proc_control_P.physics.rho;
      }

      //  Implement algorithm. Calculate y as a function of input u and
      //  discrete states.
      switch (proc_control_B.DataTypeConversion_j) {
       case 20U:
        //  Open loop avec modèle physique
        //  Construire le vecteur constantes
        proc_control_B.constValues[0] = proc_control_DW.obj_m.mass;
        proc_control_B.constValues[1] = proc_control_DW.obj_m.volume;
        proc_control_B.constValues[6] = proc_control_DW.obj_m.I[0];
        proc_control_B.constValues[9] = proc_control_DW.obj_m.I[1];
        proc_control_B.constValues[12] = proc_control_DW.obj_m.I[2];
        proc_control_B.constValues[15] = proc_control_DW.obj_m.RG[0];
        proc_control_B.constValues[18] = proc_control_DW.obj_m.RB[0];
        proc_control_B.constValues[7] = proc_control_DW.obj_m.I[3];
        proc_control_B.constValues[10] = proc_control_DW.obj_m.I[4];
        proc_control_B.constValues[13] = proc_control_DW.obj_m.I[5];
        proc_control_B.constValues[16] = proc_control_DW.obj_m.RG[1];
        proc_control_B.constValues[19] = proc_control_DW.obj_m.RB[1];
        proc_control_B.constValues[8] = proc_control_DW.obj_m.I[6];
        proc_control_B.constValues[11] = proc_control_DW.obj_m.I[7];
        proc_control_B.constValues[14] = proc_control_DW.obj_m.I[8];
        proc_control_B.constValues[17] = proc_control_DW.obj_m.RG[2];
        proc_control_B.constValues[20] = proc_control_DW.obj_m.RB[2];
        proc_control_B.constValues[39] = proc_control_DW.obj_m.rho;
        proc_control_B.constValues[40] = proc_control_DW.obj_m.g;

        // construire le vecteur state avec la imu et spaceNAV
        proc_control_B.K_j[3] = 1.0;
        proc_control_B.K_j[4] = 0.0;
        proc_control_B.K_j[5] = 0.0;
        proc_control_B.K_j[6] = 0.0;
        proc_control_B.Ns = 0;
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 6; proc_control_B.i_m
             ++) {
          proc_control_B.constValues[proc_control_B.i_m + 21] =
            proc_control_DW.obj_m.CDL[proc_control_B.i_m];
          proc_control_B.constValues[proc_control_B.i_m + 27] =
            proc_control_DW.obj_m.CDQ[proc_control_B.i_m];
          proc_control_B.constValues[proc_control_B.i_m + 33] =
            proc_control_DW.obj_m.AddedMass[proc_control_B.i_m];
          proc_control_B.K_j[proc_control_B.i_m + 7] =
            proc_control_B.Reference[proc_control_B.Ns + 70];
          proc_control_B.Ns += 10;
        }

        // [0;0;0;mo(4:7);ref.'];;
        //  Déterminer les matrices du modèle physique
        // AUVMODELMATRICES
        //     [M,C,D,GQ] = AUVMODELMATRICES(IN1,IN2)
        //     This function was generated by the Symbolic Math Toolbox version 8.7. 
        //     19-Nov-2021 10:15:42
        proc_control_B.oc = proc_control_B.constValues[6] * proc_control_B.K_j
          [10];
        proc_control_B.od = proc_control_B.constValues[9] * proc_control_B.K_j
          [10];
        proc_control_B.t4 = proc_control_B.K_j[10] * proc_control_B.constValues
          [12];
        proc_control_B.t5 = proc_control_B.constValues[7] * proc_control_B.K_j
          [11];
        proc_control_B.t = proc_control_B.constValues[10] * proc_control_B.K_j
          [11];
        proc_control_B.absxk = proc_control_B.K_j[11] *
          proc_control_B.constValues[13];
        proc_control_B.ob = proc_control_B.constValues[8] * proc_control_B.K_j
          [12];
        proc_control_B.oa = proc_control_B.constValues[11] * proc_control_B.K_j
          [12];
        proc_control_B.Product8 = proc_control_B.K_j[12] *
          proc_control_B.constValues[14];
        proc_control_B.n_e = proc_control_B.K_j[10] *
          proc_control_B.constValues[36];
        proc_control_B.t12 = proc_control_B.K_j[11] *
          proc_control_B.constValues[37];
        proc_control_B.scale = proc_control_B.constValues[0] *
          proc_control_B.constValues[15];
        proc_control_B.Divide3_m = proc_control_B.constValues[0] *
          proc_control_B.constValues[16];
        proc_control_B.t15 = proc_control_B.constValues[0] *
          proc_control_B.constValues[17];
        proc_control_B.t16 = proc_control_B.K_j[12] *
          proc_control_B.constValues[38];
        proc_control_B.dp = proc_control_B.K_j[10] * proc_control_B.constValues
          [15];
        proc_control_B.t21 = proc_control_B.K_j[11] *
          proc_control_B.constValues[16];
        proc_control_B.t25 = proc_control_B.K_j[12] *
          proc_control_B.constValues[17];
        proc_control_B.t26 = proc_control_B.K_j[7] * proc_control_B.constValues
          [33];
        proc_control_B.t27 = proc_control_B.K_j[8] * proc_control_B.constValues
          [34];
        proc_control_B.d = proc_control_B.K_j[9] * proc_control_B.constValues[35];
        proc_control_B.t29 = proc_control_B.constValues[1] *
          proc_control_B.constValues[39];
        proc_control_B.Divide2_c = proc_control_B.K_j[5] * proc_control_B.K_j[6];
        proc_control_B.t39 = proc_control_B.K_j[3] * proc_control_B.K_j[4];
        proc_control_B.t65 = proc_control_B.Divide2_c * 2.0 + proc_control_B.t39
          * 2.0;
        proc_control_B.Divide_p = (proc_control_B.K_j[11] *
          proc_control_B.constValues[17] + proc_control_B.K_j[7]) *
          proc_control_B.constValues[0];
        proc_control_B.t57 = (proc_control_B.K_j[10] *
                              proc_control_B.constValues[16] +
                              proc_control_B.K_j[9]) *
          proc_control_B.constValues[0];
        proc_control_B.t58 = (proc_control_B.K_j[12] *
                              proc_control_B.constValues[15] +
                              proc_control_B.K_j[8]) *
          proc_control_B.constValues[0];
        proc_control_B.t62 = (proc_control_B.dp + proc_control_B.t21) *
          proc_control_B.constValues[0];
        proc_control_B.t63 = (proc_control_B.dp + proc_control_B.t25) *
          proc_control_B.constValues[0];
        proc_control_B.dp = (proc_control_B.t21 + proc_control_B.t25) *
          proc_control_B.constValues[0];
        proc_control_B.t40 = proc_control_B.K_j[4] * proc_control_B.K_j[6];
        proc_control_B.t41 = proc_control_B.K_j[3] * proc_control_B.K_j[5];
        proc_control_B.t69 = proc_control_B.t40 * 2.0 + -(proc_control_B.t41 *
          2.0);
        proc_control_B.t21 = (proc_control_B.K_j[4] * proc_control_B.K_j[4] *
                              2.0 + proc_control_B.K_j[5] * proc_control_B.K_j[5]
                              * 2.0) - 1.0;

        //  CAlculer la comande
        proc_control_B.constValues_f[0] = -proc_control_B.constValues[33] +
          proc_control_B.constValues[0];
        proc_control_B.constValues_f[1] = 0.0;
        proc_control_B.constValues_f[2] = 0.0;
        proc_control_B.constValues_f[3] = 0.0;
        proc_control_B.constValues_f[4] = proc_control_B.t15;
        proc_control_B.constValues_f[5] = -proc_control_B.Divide3_m;
        proc_control_B.constValues_f[6] = 0.0;
        proc_control_B.constValues_f[7] = -proc_control_B.constValues[34] +
          proc_control_B.constValues[0];
        proc_control_B.constValues_f[8] = 0.0;
        proc_control_B.constValues_f[9] = -proc_control_B.t15;
        proc_control_B.constValues_f[10] = 0.0;
        proc_control_B.constValues_f[11] = proc_control_B.scale;
        proc_control_B.constValues_f[12] = 0.0;
        proc_control_B.constValues_f[13] = 0.0;
        proc_control_B.constValues_f[14] = -proc_control_B.constValues[35] +
          proc_control_B.constValues[0];
        proc_control_B.constValues_f[15] = proc_control_B.Divide3_m;
        proc_control_B.constValues_f[16] = -proc_control_B.scale;
        proc_control_B.constValues_f[17] = 0.0;
        proc_control_B.constValues_f[18] = 0.0;
        proc_control_B.constValues_f[19] = -proc_control_B.t15;
        proc_control_B.constValues_f[20] = proc_control_B.Divide3_m;
        proc_control_B.constValues_f[21] = proc_control_B.constValues[6] -
          proc_control_B.constValues[36];
        proc_control_B.constValues_f[22] = proc_control_B.constValues[9];
        proc_control_B.constValues_f[23] = proc_control_B.constValues[12];
        proc_control_B.constValues_f[24] = proc_control_B.t15;
        proc_control_B.constValues_f[25] = 0.0;
        proc_control_B.constValues_f[26] = -proc_control_B.scale;
        proc_control_B.constValues_f[27] = proc_control_B.constValues[7];
        proc_control_B.constValues_f[28] = proc_control_B.constValues[10] -
          proc_control_B.constValues[37];
        proc_control_B.constValues_f[29] = proc_control_B.constValues[13];
        proc_control_B.constValues_f[30] = -proc_control_B.Divide3_m;
        proc_control_B.constValues_f[31] = proc_control_B.scale;
        proc_control_B.constValues_f[32] = 0.0;
        proc_control_B.constValues_f[33] = proc_control_B.constValues[8];
        proc_control_B.constValues_f[34] = proc_control_B.constValues[11];
        proc_control_B.constValues_f[35] = proc_control_B.constValues[14] -
          proc_control_B.constValues[38];

        // Sum: '<S178>/Diff' incorporates:
        //   Merge generated from: '<S9>/Merge'
        //   SampleTimeMath: '<S178>/TSamp'
        //   Selector: '<S143>/Selector'
        //   UnitDelay: '<S178>/UD'
        //
        //  About '<S178>/TSamp':
        //   y = u * K where K = 1 / ( w * Ts )
        //
        //  Block description for '<S178>/Diff':
        //
        //   Add in CPU
        //
        //  Block description for '<S178>/UD':
        //
        //   Store in Global RAM

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.rtb_TSamp_i[proc_control_B.Ns] =
            proc_control_B.TSamp[proc_control_B.Ns] -
            proc_control_DW.UD_DSTATE[proc_control_B.Ns];
        }

        // End of Sum: '<S178>/Diff'
        proc_control_B.b_newCoefs[0] = 0.0;
        proc_control_B.b_newCoefs[1] = 0.0;
        proc_control_B.b_newCoefs[2] = 0.0;
        proc_control_B.b_newCoefs[3] = -proc_control_B.dp;
        proc_control_B.rtb_u2_f = proc_control_B.K_j[11] *
          proc_control_B.constValues[15] - proc_control_B.K_j[9];
        proc_control_B.b_newCoefs[4] = proc_control_B.rtb_u2_f *
          proc_control_B.constValues[0] + proc_control_B.d;
        proc_control_B.b_newCoefs[5] = -proc_control_B.t27 + proc_control_B.t58;
        proc_control_B.b_newCoefs[6] = 0.0;
        proc_control_B.b_newCoefs[7] = 0.0;
        proc_control_B.b_newCoefs[8] = 0.0;
        proc_control_B.b_newCoefs[9] = -proc_control_B.d + proc_control_B.t57;
        proc_control_B.b_newCoefs[10] = -proc_control_B.t63;
        proc_control_B.AngularRate_a_idx_1 = proc_control_B.K_j[12] *
          proc_control_B.constValues[16] - proc_control_B.K_j[7];
        proc_control_B.b_newCoefs[11] = proc_control_B.AngularRate_a_idx_1 *
          proc_control_B.constValues[0] + proc_control_B.t26;
        proc_control_B.b_newCoefs[12] = 0.0;
        proc_control_B.b_newCoefs[13] = 0.0;
        proc_control_B.b_newCoefs[14] = 0.0;
        proc_control_B.Divide1_k = proc_control_B.K_j[10] *
          proc_control_B.constValues[17] - proc_control_B.K_j[8];
        proc_control_B.b_newCoefs[15] = proc_control_B.Divide1_k *
          proc_control_B.constValues[0] + proc_control_B.t27;
        proc_control_B.b_newCoefs[16] = -proc_control_B.t26 +
          proc_control_B.Divide_p;
        proc_control_B.b_newCoefs[17] = -proc_control_B.t62;
        proc_control_B.b_newCoefs[18] = proc_control_B.dp;
        proc_control_B.b_newCoefs[19] = proc_control_B.d - proc_control_B.t57;
        proc_control_B.b_newCoefs[20] = proc_control_B.Divide1_k *
          -proc_control_B.constValues[0] + -proc_control_B.t27;
        proc_control_B.b_newCoefs[21] = 0.0;
        proc_control_B.b_newCoefs[22] = ((-proc_control_B.t4 -
          proc_control_B.absxk) - proc_control_B.Product8) + proc_control_B.t16;
        proc_control_B.b_newCoefs[23] = ((proc_control_B.od + proc_control_B.t)
          + proc_control_B.oa) - proc_control_B.t12;
        proc_control_B.b_newCoefs[24] = proc_control_B.rtb_u2_f *
          -proc_control_B.constValues[0] + -proc_control_B.d;
        proc_control_B.b_newCoefs[25] = proc_control_B.t63;
        proc_control_B.b_newCoefs[26] = proc_control_B.t26 -
          proc_control_B.Divide_p;
        proc_control_B.b_newCoefs[27] = ((proc_control_B.t4 +
          proc_control_B.absxk) + proc_control_B.Product8) - proc_control_B.t16;
        proc_control_B.b_newCoefs[28] = 0.0;
        proc_control_B.b_newCoefs[29] = ((-proc_control_B.oc - proc_control_B.t5)
          - proc_control_B.ob) + proc_control_B.n_e;
        proc_control_B.b_newCoefs[30] = proc_control_B.t27 - proc_control_B.t58;
        proc_control_B.b_newCoefs[31] = proc_control_B.AngularRate_a_idx_1 *
          -proc_control_B.constValues[0] + -proc_control_B.t26;
        proc_control_B.b_newCoefs[32] = proc_control_B.t62;
        proc_control_B.b_newCoefs[33] = ((-proc_control_B.od - proc_control_B.t)
          - proc_control_B.oa) + proc_control_B.t12;
        proc_control_B.b_newCoefs[34] = ((proc_control_B.oc + proc_control_B.t5)
          + proc_control_B.ob) - proc_control_B.n_e;
        proc_control_B.b_newCoefs[35] = 0.0;
        proc_control_B.constValues_a[0] = proc_control_B.constValues[27] * std::
          abs(proc_control_B.K_j[7]) + proc_control_B.constValues[21];
        proc_control_B.constValues_a[1] = 0.0;
        proc_control_B.constValues_a[2] = 0.0;
        proc_control_B.constValues_a[3] = 0.0;
        proc_control_B.constValues_a[4] = 0.0;
        proc_control_B.constValues_a[5] = 0.0;
        proc_control_B.constValues_a[6] = 0.0;
        proc_control_B.constValues_a[7] = proc_control_B.constValues[28] * std::
          abs(proc_control_B.K_j[8]) + proc_control_B.constValues[22];
        proc_control_B.constValues_a[8] = 0.0;
        proc_control_B.constValues_a[9] = 0.0;
        proc_control_B.constValues_a[10] = 0.0;
        proc_control_B.constValues_a[11] = 0.0;
        proc_control_B.constValues_a[12] = 0.0;
        proc_control_B.constValues_a[13] = 0.0;
        proc_control_B.constValues_a[14] = proc_control_B.constValues[29] * std::
          abs(proc_control_B.K_j[9]) + proc_control_B.constValues[23];
        proc_control_B.constValues_a[15] = 0.0;
        proc_control_B.constValues_a[16] = 0.0;
        proc_control_B.constValues_a[17] = 0.0;
        proc_control_B.constValues_a[18] = 0.0;
        proc_control_B.constValues_a[19] = 0.0;
        proc_control_B.constValues_a[20] = 0.0;
        proc_control_B.constValues_a[21] = proc_control_B.constValues[30] * std::
          abs(proc_control_B.K_j[10]) + proc_control_B.constValues[24];
        proc_control_B.constValues_a[22] = 0.0;
        proc_control_B.constValues_a[23] = 0.0;
        proc_control_B.constValues_a[24] = 0.0;
        proc_control_B.constValues_a[25] = 0.0;
        proc_control_B.constValues_a[26] = 0.0;
        proc_control_B.constValues_a[27] = 0.0;
        proc_control_B.constValues_a[28] = proc_control_B.constValues[31] * std::
          abs(proc_control_B.K_j[11]) + proc_control_B.constValues[25];
        proc_control_B.constValues_a[29] = 0.0;
        proc_control_B.constValues_a[30] = 0.0;
        proc_control_B.constValues_a[31] = 0.0;
        proc_control_B.constValues_a[32] = 0.0;
        proc_control_B.constValues_a[33] = 0.0;
        proc_control_B.constValues_a[34] = 0.0;
        proc_control_B.constValues_a[35] = proc_control_B.constValues[32] * std::
          abs(proc_control_B.K_j[12]) + proc_control_B.constValues[26];
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 36; proc_control_B.Ns++)
        {
          proc_control_B.dCoefs[proc_control_B.Ns] =
            proc_control_B.b_newCoefs[proc_control_B.Ns] +
            proc_control_B.constValues_a[proc_control_B.Ns];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.constValues_l[proc_control_B.Ns] = 0.0;
        }

        proc_control_B.i_m = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
             proc_control_B.ibmat++) {
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
          {
            proc_control_B.constValues_l[proc_control_B.Ns] +=
              proc_control_B.constValues_f[proc_control_B.Ns +
              proc_control_B.i_m] *
              proc_control_B.rtb_TSamp_i[proc_control_B.ibmat];
          }

          proc_control_B.dv27[proc_control_B.ibmat] = 0.0;
          proc_control_B.i_m += 6;
        }

        proc_control_B.Ns = 0;
        proc_control_B.i_m = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
             proc_control_B.ibmat++) {
          for (proc_control_B.idx_k = 0; proc_control_B.idx_k < 6;
               proc_control_B.idx_k++) {
            proc_control_B.dv27[proc_control_B.idx_k] +=
              proc_control_B.dCoefs[proc_control_B.idx_k + proc_control_B.Ns] *
              proc_control_B.Reference[proc_control_B.i_m + 70];
          }

          proc_control_B.Ns += 6;
          proc_control_B.i_m += 10;
        }

        proc_control_B.Divide_p = (proc_control_B.constValues[0] +
          -proc_control_B.t29) * proc_control_B.constValues[40];
        proc_control_B.rtb_TSamp_i[0] = (proc_control_B.t40 - proc_control_B.t41)
          * proc_control_B.Divide_p * -2.0;
        proc_control_B.rtb_TSamp_i[1] = (proc_control_B.Divide2_c +
          proc_control_B.t39) * proc_control_B.Divide_p * -2.0;
        proc_control_B.rtb_TSamp_i[2] = proc_control_B.Divide_p *
          proc_control_B.t21;
        proc_control_B.Divide_p = proc_control_B.constValues[20] *
          proc_control_B.constValues[40];
        proc_control_B.t4 = proc_control_B.constValues[40] *
          proc_control_B.Divide3_m;
        proc_control_B.od = proc_control_B.constValues[19] *
          proc_control_B.constValues[40] * -proc_control_B.t29;
        proc_control_B.rtb_TSamp_i[3] = ((proc_control_B.constValues[40] *
          proc_control_B.t15 * proc_control_B.t65 + proc_control_B.t4 *
          proc_control_B.t21) + proc_control_B.Divide_p * -proc_control_B.t29 *
          proc_control_B.t65) + proc_control_B.od * proc_control_B.t21;
        proc_control_B.t57 = proc_control_B.constValues[40] *
          -proc_control_B.scale;
        proc_control_B.oc = proc_control_B.constValues[18] *
          proc_control_B.constValues[40] * proc_control_B.t29;
        proc_control_B.rtb_TSamp_i[4] = ((proc_control_B.constValues[40] *
          -proc_control_B.t15 * proc_control_B.t69 + proc_control_B.t57 *
          proc_control_B.t21) + proc_control_B.oc * proc_control_B.t21) +
          proc_control_B.Divide_p * proc_control_B.t29 * proc_control_B.t69;
        proc_control_B.rtb_TSamp_i[5] = ((proc_control_B.t4 * proc_control_B.t69
          + proc_control_B.t57 * proc_control_B.t65) + proc_control_B.oc *
          proc_control_B.t65) + proc_control_B.od * proc_control_B.t69;
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.constValues_i[proc_control_B.Ns] =
            (proc_control_B.constValues_l[proc_control_B.Ns] +
             proc_control_B.dv27[proc_control_B.Ns]) +
            proc_control_B.rtb_TSamp_i[proc_control_B.Ns];
        }

        // Merge generated from: '<S138>/Merge' incorporates:
        //   Merge generated from: '<S9>/Merge'
        //   Selector: '<S143>/Selector'

        std::memset(&proc_control_B.mv[0], 0, sizeof(real_T) << 3U);
        proc_control_B.i_m = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
             proc_control_B.ibmat++) {
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
          {
            proc_control_B.mv[proc_control_B.Ns] +=
              proc_control_DW.obj_m.binv[proc_control_B.Ns + proc_control_B.i_m]
              * proc_control_B.constValues_i[proc_control_B.ibmat];
          }

          proc_control_B.i_m += 8;
        }
        break;

       case 21U:
        //  Open loop matrice b invese directe
        std::memset(&proc_control_B.dv25[0], 0, sizeof(real_T) << 3U);
        proc_control_B.i_m = 0;
        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_k = 0; proc_control_B.idx_k < 6;
             proc_control_B.idx_k++) {
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
          {
            proc_control_B.dv25[proc_control_B.Ns] +=
              proc_control_DW.obj_m.binv[proc_control_B.Ns + proc_control_B.i_m]
              * proc_control_B.Reference[proc_control_B.ibmat + 70];
          }

          proc_control_B.i_m += 8;
          proc_control_B.ibmat += 10;
        }

        // Merge generated from: '<S138>/Merge' incorporates:
        //   Merge generated from: '<S9>/Merge'
        //   Selector: '<S143>/Selector'

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.mv[proc_control_B.Ns] =
            proc_control_B.dv25[proc_control_B.Ns] * proc_control_DW.obj_m.k;
        }
        break;

       default:
        // Merge generated from: '<S138>/Merge'
        std::memset(&proc_control_B.mv[0], 0, sizeof(real_T) << 3U);
        break;
      }

      // End of MATLABSystem: '<S143>/MATLAB System'

      // Merge generated from: '<S138>/Merge' incorporates:
      //   Constant: '<S143>/Constant1'
      //   SignalConversion generated from: '<S143>/Constant1'

      proc_control_B.alive = proc_control_P.Constant1_Value_p;

      // Merge generated from: '<S138>/Merge' incorporates:
      //   Constant: '<S143>/Constant'
      //   SignalConversion generated from: '<S143>/Constant'

      proc_control_B.MpcStatus = proc_control_P.Constant_Value_d1;

      // Update for UnitDelay: '<S178>/UD' incorporates:
      //   SampleTimeMath: '<S178>/TSamp'
      //
      //  About '<S178>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )
      //
      //  Block description for '<S178>/UD':
      //
      //   Store in Global RAM

      for (proc_control_B.i_m = 0; proc_control_B.i_m < 6; proc_control_B.i_m++)
      {
        proc_control_DW.UD_DSTATE[proc_control_B.i_m] =
          proc_control_B.TSamp[proc_control_B.i_m];
      }

      // End of Update for UnitDelay: '<S178>/UD'
      // End of Outputs for SubSystem: '<S138>/JoyStick OpenLoop'
      break;

     case 2:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S138>/LTV MPC quaternion ' incorporates:
        //   ActionPort: '<S144>/Action Port'

        // InitializeConditions for SwitchCase: '<S138>/Switch Case' incorporates:
        //   Delay: '<S144>/Delay1'
        //   DiscretePulseGenerator: '<S144>/Pulse Generator'
        //   Memory: '<S182>/Memory'
        //   UnitDelay: '<S182>/last_mv'

        std::memcpy(&proc_control_DW.last_mv_DSTATE[0],
                    &proc_control_P.last_mv_InitialCondition_o[0], sizeof(real_T)
                    << 3U);
        std::memcpy(&proc_control_DW.Delay1_DSTATE[0],
                    &proc_control_P.Delay1_InitialCondition_n[0], 88U * sizeof
                    (real_T));
        std::memcpy(&proc_control_DW.Memory_PreviousInput[0],
                    &proc_control_P.Memory_InitialCondition_p[0], 258U * sizeof
                    (boolean_T));
        proc_control_DW.clockTickCounter_g = 0;

        // End of InitializeConditions for SubSystem: '<S138>/LTV MPC quaternion ' 
      }

      // Outputs for IfAction SubSystem: '<S138>/LTV MPC quaternion ' incorporates:
      //   ActionPort: '<S144>/Action Port'

      // MATLAB Function: '<S144>/MATLAB Function2' incorporates:
      //   Constant: '<S144>/Constant1'
      //   Constant: '<S144>/Constant3'
      //   Delay: '<S144>/Delay1'
      //   SignalConversion generated from: '<S181>/ SFunction '

      proc_control_B.K_j[0] = proc_control_B.WorldPosition[0];
      proc_control_B.K_j[1] = proc_control_B.WorldPosition[1];
      proc_control_B.K_j[2] = proc_control_B.WorldPosition[2];
      proc_control_B.K_j[3] = proc_control_B.qS2W[0];
      proc_control_B.K_j[4] = proc_control_B.qS2W[1];
      proc_control_B.K_j[5] = proc_control_B.qS2W[2];
      proc_control_B.K_j[6] = proc_control_B.qS2W[3];
      proc_control_B.K_j[7] = proc_control_B.BodyVelocity[0];
      proc_control_B.K_j[10] = proc_control_B.AngularRate[0];
      proc_control_B.K_j[8] = proc_control_B.BodyVelocity[1];
      proc_control_B.K_j[11] = proc_control_B.AngularRate[1];
      proc_control_B.K_j[9] = proc_control_B.BodyVelocity[2];
      proc_control_B.K_j[12] = proc_control_B.AngularRate[2];
      std::memset(&proc_control_B.A[0], 0, 1859U * sizeof(real_T));
      std::memset(&proc_control_B.A_m[0], 0, 38U * sizeof(real_T));
      proc_control_B.A_m[38] = 0.0;
      proc_control_B.A_m[42] = 0.0;
      proc_control_B.A_m[56] = 0.0;
      proc_control_B.A_m[70] = 0.0;
      proc_control_B.A_m[84] = 0.0;
      proc_control_B.A_m[94] = 0.0;
      proc_control_B.A_m[95] = 0.0;
      proc_control_B.A_m[96] = 0.0;
      proc_control_B.A_m[97] = 0.0;
      proc_control_B.A_m[107] = 0.0;
      proc_control_B.A_m[108] = 0.0;
      proc_control_B.A_m[109] = 0.0;
      proc_control_B.A_m[110] = 0.0;
      proc_control_B.A_m[120] = 0.0;
      proc_control_B.A_m[121] = 0.0;
      proc_control_B.A_m[122] = 0.0;
      proc_control_B.A_m[123] = 0.0;
      proc_control_B.A_m[130] = 0.0;
      proc_control_B.A_m[131] = 0.0;
      proc_control_B.A_m[132] = 0.0;
      proc_control_B.A_m[143] = 0.0;
      proc_control_B.A_m[144] = 0.0;
      proc_control_B.A_m[145] = 0.0;
      proc_control_B.A_m[156] = 0.0;
      proc_control_B.A_m[157] = 0.0;
      proc_control_B.A_m[158] = 0.0;
      std::memset(&proc_control_B.dv7[0], 0, 38U * sizeof(real_T));
      proc_control_B.dv7[38] = 0.0;
      proc_control_B.dv7[42] = 0.0;
      proc_control_B.dv7[56] = 0.0;
      proc_control_B.dv7[70] = 0.0;
      proc_control_B.dv7[84] = 0.0;
      proc_control_B.dv7[94] = 0.0;
      proc_control_B.dv7[95] = 0.0;
      proc_control_B.dv7[96] = 0.0;
      proc_control_B.dv7[97] = 0.0;
      proc_control_B.dv7[107] = 0.0;
      proc_control_B.dv7[108] = 0.0;
      proc_control_B.dv7[109] = 0.0;
      proc_control_B.dv7[110] = 0.0;
      proc_control_B.dv7[120] = 0.0;
      proc_control_B.dv7[121] = 0.0;
      proc_control_B.dv7[122] = 0.0;
      proc_control_B.dv7[123] = 0.0;
      proc_control_B.dv7[130] = 0.0;
      proc_control_B.dv7[131] = 0.0;
      proc_control_B.dv7[132] = 0.0;
      proc_control_B.dv7[143] = 0.0;
      proc_control_B.dv7[144] = 0.0;
      proc_control_B.dv7[145] = 0.0;
      proc_control_B.dv7[156] = 0.0;
      proc_control_B.dv7[157] = 0.0;
      proc_control_B.dv7[158] = 0.0;
      eye_4CWHrAiR(proc_control_B.b_newCoefs);
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 11;
           proc_control_B.idx_m++) {
        proc_control_B.oc = std::abs(proc_control_B.K_j[10]);
        proc_control_B.od = std::abs(proc_control_B.K_j[11]);
        proc_control_B.t4 = std::abs(proc_control_B.K_j[12]);
        proc_control_B.t5 = std::abs(proc_control_B.K_j[7]);
        proc_control_B.t = std::abs(proc_control_B.K_j[8]);
        proc_control_B.absxk = std::abs(proc_control_B.K_j[9]);
        if (std::isnan(proc_control_B.K_j[10])) {
          proc_control_B.ob = proc_control_B.K_j[10];
        } else if (proc_control_B.K_j[10] < 0.0) {
          proc_control_B.ob = -1.0;
        } else {
          proc_control_B.ob = (proc_control_B.K_j[10] > 0.0);
        }

        if (std::isnan(proc_control_B.K_j[11])) {
          proc_control_B.oa = proc_control_B.K_j[11];
        } else if (proc_control_B.K_j[11] < 0.0) {
          proc_control_B.oa = -1.0;
        } else {
          proc_control_B.oa = (proc_control_B.K_j[11] > 0.0);
        }

        if (std::isnan(proc_control_B.K_j[12])) {
          proc_control_B.Product8 = proc_control_B.K_j[12];
        } else if (proc_control_B.K_j[12] < 0.0) {
          proc_control_B.Product8 = -1.0;
        } else {
          proc_control_B.Product8 = (proc_control_B.K_j[12] > 0.0);
        }

        if (std::isnan(proc_control_B.K_j[7])) {
          proc_control_B.n_e = proc_control_B.K_j[7];
        } else if (proc_control_B.K_j[7] < 0.0) {
          proc_control_B.n_e = -1.0;
        } else {
          proc_control_B.n_e = (proc_control_B.K_j[7] > 0.0);
        }

        if (std::isnan(proc_control_B.K_j[8])) {
          proc_control_B.t12 = proc_control_B.K_j[8];
        } else if (proc_control_B.K_j[8] < 0.0) {
          proc_control_B.t12 = -1.0;
        } else {
          proc_control_B.t12 = (proc_control_B.K_j[8] > 0.0);
        }

        if (std::isnan(proc_control_B.K_j[9])) {
          proc_control_B.scale = proc_control_B.K_j[9];
        } else if (proc_control_B.K_j[9] < 0.0) {
          proc_control_B.scale = -1.0;
        } else {
          proc_control_B.scale = (proc_control_B.K_j[9] > 0.0);
        }

        proc_control_B.dp = proc_control_B.K_j[4] * proc_control_B.K_j[5] * 2.0;
        proc_control_B.t69 = proc_control_B.K_j[4] * proc_control_B.K_j[6] * 2.0;
        proc_control_B.Divide1_k = proc_control_B.K_j[5] * proc_control_B.K_j[6]
          * 2.0;
        proc_control_B.Divide2_c = proc_control_B.K_j[3] * proc_control_B.K_j[4]
          * 2.0;
        proc_control_B.t21 = proc_control_B.K_j[3] * proc_control_B.K_j[5] * 2.0;
        proc_control_B.theta0 = proc_control_B.K_j[3] * proc_control_B.K_j[6] *
          2.0;
        proc_control_B.t52 = proc_control_B.K_j[4] * proc_control_B.K_j[7] * 2.0;
        proc_control_B.t24_tmp = proc_control_B.K_j[5] * proc_control_B.K_j[7];
        proc_control_B.t24 = proc_control_B.t24_tmp * 2.0;
        proc_control_B.t25_tmp = proc_control_B.K_j[6] * proc_control_B.K_j[7];
        proc_control_B.t25 = proc_control_B.t25_tmp * 2.0;
        proc_control_B.t26 = proc_control_B.K_j[3] * proc_control_B.K_j[7] * 2.0;
        proc_control_B.t27_tmp = proc_control_B.K_j[4] * proc_control_B.K_j[8];
        proc_control_B.t27 = proc_control_B.t27_tmp * 2.0;
        proc_control_B.d = proc_control_B.K_j[5] * proc_control_B.K_j[8] * 2.0;
        proc_control_B.t29_tmp = proc_control_B.K_j[6] * proc_control_B.K_j[8];
        proc_control_B.t29 = proc_control_B.t29_tmp * 2.0;
        proc_control_B.t30 = proc_control_B.K_j[3] * proc_control_B.K_j[8] * 2.0;
        proc_control_B.t31_tmp = proc_control_B.K_j[4] * proc_control_B.K_j[9];
        proc_control_B.t31 = proc_control_B.t31_tmp * 2.0;
        proc_control_B.rtb_Divide3_m_tmp = proc_control_B.K_j[5] *
          proc_control_B.K_j[9];
        proc_control_B.Divide3_m = proc_control_B.rtb_Divide3_m_tmp * 2.0;
        proc_control_B.t33 = proc_control_B.K_j[6] * proc_control_B.K_j[9] * 2.0;
        proc_control_B.t34 = proc_control_B.K_j[3] * proc_control_B.K_j[9] * 2.0;
        proc_control_B.t39 = proc_control_B.K_j[4] / 2.0;
        proc_control_B.t40 = proc_control_B.K_j[5] / 2.0;
        proc_control_B.t41 = proc_control_B.K_j[6] / 2.0;
        proc_control_B.t15 = proc_control_B.K_j[3] / 2.0;
        proc_control_B.t43 = proc_control_B.K_j[10] / 2.0;
        proc_control_B.t44 = proc_control_B.K_j[11] / 2.0;
        proc_control_B.t45 = proc_control_B.K_j[12] / 2.0;
        proc_control_B.t16 = proc_control_B.K_j[12] * 1.0571299073092789E-5;
        proc_control_B.Divide_p = proc_control_B.K_j[11] * 9.7602896722846373E-5;
        proc_control_B.t57 = proc_control_B.K_j[8] * 0.01129023503850542;
        proc_control_B.t58 = proc_control_B.K_j[7] * 0.00477039452928936;
        proc_control_B.t59 = proc_control_B.K_j[10] * 9.1703771260780813E-5;
        proc_control_B.t61 = proc_control_B.K_j[9] * 0.143523560675718;
        proc_control_B.t62 = proc_control_B.K_j[7] * 0.00568699616459184;
        proc_control_B.t65 = proc_control_B.K_j[9] * 0.069014505171846527;
        proc_control_B.t63 = proc_control_B.K_j[8] * 0.0071670223909459834;
        proc_control_B.t35_tmp = proc_control_B.K_j[4] * proc_control_B.K_j[4] *
          2.0;
        proc_control_B.BodyVelocity_c_idx_2 = proc_control_B.K_j[5] *
          proc_control_B.K_j[5] * 2.0;
        proc_control_B.Product5 = proc_control_B.K_j[6] * proc_control_B.K_j[6] *
          2.0;
        proc_control_B.t60 = -(proc_control_B.K_j[10] * 9.1703771260780813E-5);
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 13; proc_control_B.i_m
             ++) {
          proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.i_m] =
            proc_control_B.K_j[proc_control_B.i_m];
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns
               ++) {
            proc_control_B.ibmat = 13 * proc_control_B.i_m + proc_control_B.Ns;
            proc_control_B.C[proc_control_B.ibmat + 169 * proc_control_B.idx_m] =
              c_0[proc_control_B.ibmat];
          }
        }

        proc_control_B.rtb_u2_f = -proc_control_B.t29 + proc_control_B.Divide3_m;
        proc_control_B.A_m[39] = proc_control_B.rtb_u2_f;
        proc_control_B.AngularRate_a_idx_1 = proc_control_B.t25 -
          proc_control_B.t31;
        proc_control_B.A_m[40] = proc_control_B.AngularRate_a_idx_1;
        proc_control_B.t57_tmp = -proc_control_B.t24 + proc_control_B.t27;
        proc_control_B.A_m[41] = proc_control_B.t57_tmp;
        proc_control_B.A_m[43] = proc_control_B.t43;
        proc_control_B.A_m[44] = proc_control_B.t44;
        proc_control_B.A_m[45] = proc_control_B.t45;
        proc_control_B.t57_tmp_n = proc_control_B.K_j[4] * -0.0013017970932508 +
          proc_control_B.K_j[5] * 0.4138016519122657;
        proc_control_B.A_m[46] = proc_control_B.t57_tmp_n;
        proc_control_B.rtb_Sum6_idx_2 = proc_control_B.K_j[4] *
          -0.51979016069898065 + proc_control_B.K_j[5] * 0.00099202109956931486;
        proc_control_B.A_m[47] = proc_control_B.rtb_Sum6_idx_2;
        proc_control_B.rtb_Sum6_idx_1 = proc_control_B.K_j[4] *
          0.033540735888224739 - proc_control_B.K_j[5] * 0.0058758415205803329;
        proc_control_B.A_m[48] = proc_control_B.rtb_Sum6_idx_1;
        proc_control_B.rtb_Sum6_idx_0 = proc_control_B.K_j[4] *
          -25.242114556122988 + proc_control_B.K_j[5] * 0.1138522338822895;
        proc_control_B.A_m[49] = proc_control_B.rtb_Sum6_idx_0;
        proc_control_B.t35 = proc_control_B.K_j[4] * 0.1184627304742461 -
          proc_control_B.K_j[5] * 8.6371397256799973;
        proc_control_B.A_m[50] = proc_control_B.t35;
        proc_control_B.oa_p = proc_control_B.K_j[4] * 0.38451002147839958 +
          proc_control_B.K_j[5] * 0.65361132374006825;
        proc_control_B.A_m[51] = proc_control_B.oa_p;
        proc_control_B.d_h = proc_control_B.d + proc_control_B.t33;
        proc_control_B.A_m[52] = proc_control_B.d_h;
        proc_control_B.t24 = (proc_control_B.t24 - proc_control_B.t34) -
          proc_control_B.t27_tmp * 4.0;
        proc_control_B.A_m[53] = proc_control_B.t24;
        proc_control_B.t25 = (proc_control_B.t25 + proc_control_B.t30) -
          proc_control_B.t31_tmp * 4.0;
        proc_control_B.A_m[54] = proc_control_B.t25;
        proc_control_B.A_m[55] = -proc_control_B.t43;
        proc_control_B.A_m[57] = -proc_control_B.t45;
        proc_control_B.A_m[58] = proc_control_B.t44;
        proc_control_B.t31_tmp = (proc_control_B.K_j[4] * -0.01263905936484723 -
          proc_control_B.K_j[6] * 0.4138016519122657) - proc_control_B.K_j[3] *
          0.0013017970932508;
        proc_control_B.A_m[59] = proc_control_B.t31_tmp;
        proc_control_B.t27_tmp = (proc_control_B.K_j[4] * -0.05386046241846134 -
          proc_control_B.K_j[6] * 0.00099202109956931486) - proc_control_B.K_j[3]
          * 0.51979016069898065;
        proc_control_B.A_m[60] = proc_control_B.t27_tmp;
        proc_control_B.d1 = (proc_control_B.K_j[4] * 0.37271497842704371 +
                             proc_control_B.K_j[6] * 0.0058758415205803329) +
          proc_control_B.K_j[3] * 0.033540735888224739;
        proc_control_B.A_m[61] = proc_control_B.d1;
        proc_control_B.d2 = (proc_control_B.K_j[4] * -4.2094140168137981 -
                             proc_control_B.K_j[6] * 0.1138522338822895) -
          proc_control_B.K_j[3] * 25.242114556122988;
        proc_control_B.A_m[62] = proc_control_B.d2;
        proc_control_B.d3 = (proc_control_B.K_j[4] * 0.73643595165049924 +
                             proc_control_B.K_j[6] * 8.6371397256799973) +
          proc_control_B.K_j[3] * 0.1184627304742461;
        proc_control_B.A_m[63] = proc_control_B.d3;
        proc_control_B.d4 = (proc_control_B.K_j[4] * 0.009785912146552939 -
                             proc_control_B.K_j[6] * 0.65361132374006825) +
          proc_control_B.K_j[3] * 0.38451002147839958;
        proc_control_B.A_m[64] = proc_control_B.d4;
        proc_control_B.t27 = (proc_control_B.t27 + proc_control_B.t34) -
          proc_control_B.t24_tmp * 4.0;
        proc_control_B.A_m[65] = proc_control_B.t27;
        proc_control_B.t33 += proc_control_B.t52;
        proc_control_B.A_m[66] = proc_control_B.t33;
        proc_control_B.t29 = (-proc_control_B.t26 + proc_control_B.t29) -
          proc_control_B.rtb_Divide3_m_tmp * 4.0;
        proc_control_B.A_m[67] = proc_control_B.t29;
        proc_control_B.A_m[68] = -proc_control_B.t44;
        proc_control_B.A_m[69] = proc_control_B.t45;
        proc_control_B.A_m[71] = -proc_control_B.t43;
        proc_control_B.rtb_Divide3_m_tmp = (proc_control_B.K_j[5] *
          -0.01263905936484723 - proc_control_B.K_j[6] * 0.0013017970932508) +
          proc_control_B.K_j[3] * 0.4138016519122657;
        proc_control_B.A_m[72] = proc_control_B.rtb_Divide3_m_tmp;
        proc_control_B.t24_tmp = (proc_control_B.K_j[5] * -0.05386046241846134 -
          proc_control_B.K_j[6] * 0.51979016069898065) + proc_control_B.K_j[3] *
          0.00099202109956931486;
        proc_control_B.A_m[73] = proc_control_B.t24_tmp;
        proc_control_B.t34 = (proc_control_B.K_j[5] * 0.37271497842704371 +
                              proc_control_B.K_j[6] * 0.033540735888224739) -
          proc_control_B.K_j[3] * 0.0058758415205803329;
        proc_control_B.A_m[74] = proc_control_B.t34;
        proc_control_B.d5 = (proc_control_B.K_j[5] * -4.2094140168137981 -
                             proc_control_B.K_j[6] * 25.242114556122988) +
          proc_control_B.K_j[3] * 0.1138522338822895;
        proc_control_B.A_m[75] = proc_control_B.d5;
        proc_control_B.d6 = (proc_control_B.K_j[5] * 0.73643595165049924 +
                             proc_control_B.K_j[6] * 0.1184627304742461) -
          proc_control_B.K_j[3] * 8.6371397256799973;
        proc_control_B.A_m[76] = proc_control_B.d6;
        proc_control_B.d7 = (proc_control_B.K_j[5] * 0.009785912146552939 +
                             proc_control_B.K_j[6] * 0.38451002147839958) +
          proc_control_B.K_j[3] * 0.65361132374006825;
        proc_control_B.A_m[77] = proc_control_B.d7;
        proc_control_B.t25_tmp = (-proc_control_B.t30 + proc_control_B.t31) -
          proc_control_B.t25_tmp * 4.0;
        proc_control_B.A_m[78] = proc_control_B.t25_tmp;
        proc_control_B.t26 = (proc_control_B.t26 + proc_control_B.Divide3_m) -
          proc_control_B.t29_tmp * 4.0;
        proc_control_B.A_m[79] = proc_control_B.t26;
        proc_control_B.d += proc_control_B.t52;
        proc_control_B.A_m[80] = proc_control_B.d;
        proc_control_B.A_m[81] = -proc_control_B.t45;
        proc_control_B.A_m[82] = -proc_control_B.t44;
        proc_control_B.A_m[83] = proc_control_B.t43;
        proc_control_B.Divide3_m = proc_control_B.K_j[4] * -0.4138016519122657 -
          proc_control_B.K_j[5] * 0.0013017970932508;
        proc_control_B.A_m[85] = proc_control_B.Divide3_m;
        proc_control_B.t52 = proc_control_B.K_j[4] * -0.00099202109956931486 -
          proc_control_B.K_j[5] * 0.51979016069898065;
        proc_control_B.A_m[86] = proc_control_B.t52;
        proc_control_B.t29_tmp = proc_control_B.K_j[4] * 0.0058758415205803329 +
          proc_control_B.K_j[5] * 0.033540735888224739;
        proc_control_B.A_m[87] = proc_control_B.t29_tmp;
        proc_control_B.t30 = proc_control_B.K_j[4] * -0.1138522338822895 -
          proc_control_B.K_j[5] * 25.242114556122988;
        proc_control_B.A_m[88] = proc_control_B.t30;
        proc_control_B.t31 = proc_control_B.K_j[4] * 8.6371397256799973 +
          proc_control_B.K_j[5] * 0.1184627304742461;
        proc_control_B.A_m[89] = proc_control_B.t31;
        proc_control_B.d8 = proc_control_B.K_j[4] * -0.65361132374006825 +
          proc_control_B.K_j[5] * 0.38451002147839958;
        proc_control_B.A_m[90] = proc_control_B.d8;
        proc_control_B.A_tmp = (-proc_control_B.BodyVelocity_c_idx_2 +
          -proc_control_B.Product5) + 1.0;
        proc_control_B.A_m[91] = proc_control_B.A_tmp;
        proc_control_B.d9 = proc_control_B.dp + proc_control_B.theta0;
        proc_control_B.A_m[92] = proc_control_B.d9;
        proc_control_B.d10 = proc_control_B.t69 - proc_control_B.t21;
        proc_control_B.A_m[93] = proc_control_B.d10;
        proc_control_B.n_e *= proc_control_B.K_j[7];
        proc_control_B.d11 = (((((proc_control_B.t5 * -0.036243063166504788 +
          proc_control_B.t16) + proc_control_B.Divide_p) - proc_control_B.t57) -
          proc_control_B.t61) - proc_control_B.n_e * 0.036243063166504788) -
          0.46465465598083061;
        proc_control_B.A_m[98] = proc_control_B.d11;
        proc_control_B.d12 = (((proc_control_B.K_j[8] * 0.00477039452928936 -
          proc_control_B.K_j[9] * 0.001468966557066211) - proc_control_B.n_e *
          1.109195745194835E-6) - 1.422045827172866E-5) + ((proc_control_B.K_j
          [11] * 0.00041592787873873338 - proc_control_B.K_j[12] *
          0.74121409319149256) - proc_control_B.t5 * 1.109195745194835E-6);
        proc_control_B.A_m[99] = proc_control_B.d12;
        proc_control_B.d13 = (((proc_control_B.K_j[8] * -5.890830655932608E-5 +
          proc_control_B.K_j[9] * 0.00568699616459184) + proc_control_B.n_e *
          7.9830677445685858E-6) + 0.0001023470223662639) +
          ((proc_control_B.K_j[11] * 0.69409782663856512 - proc_control_B.K_j[12]
            * 0.00032422410747795261) + proc_control_B.t5 *
           7.9830677445685858E-6);
        proc_control_B.A_m[100] = proc_control_B.d13;
        proc_control_B.d14 = (((proc_control_B.K_j[11] * 0.032506453976272241 +
          proc_control_B.K_j[12] * 0.24400486517334929) - proc_control_B.t5 *
          0.0001525121428377004) + ((proc_control_B.K_j[8] *
          0.044446246736648841 - proc_control_B.K_j[9] * 0.1148218101592509) -
          proc_control_B.n_e * 0.0001525121428377004)) + -0.0019552838825346208;
        proc_control_B.A_m[101] = proc_control_B.d14;
        proc_control_B.d15 = (((proc_control_B.K_j[8] * 1.7911420833141059E-5 +
          proc_control_B.K_j[9] * 8.3502908029033716) + proc_control_B.n_e *
          0.011738978516892359) + 0.150499724575543) + ((proc_control_B.K_j[11] *
          -0.00568699616459184 - proc_control_B.K_j[12] * 0.001145088836853196)
          + proc_control_B.t5 * 0.011738978516892359);
        proc_control_B.A_m[102] = proc_control_B.d15;
        proc_control_B.n_e = (((proc_control_B.K_j[11] * -7.5569972812640509E-5
          - proc_control_B.K_j[12] * 0.00477039452928936) - proc_control_B.t5 *
          0.0011846302503005471) + ((proc_control_B.K_j[8] * -5.91169722427816 -
          proc_control_B.K_j[9] * 2.2977499514997389E-5) - proc_control_B.n_e *
          0.0011846302503005471)) + -0.015187567311545479;
        proc_control_B.A_m[103] = proc_control_B.n_e;
        proc_control_B.t5 = proc_control_B.dp - proc_control_B.theta0;
        proc_control_B.A_m[104] = proc_control_B.t5;
        proc_control_B.Product5 = (-proc_control_B.t35_tmp +
          -proc_control_B.Product5) + 1.0;
        proc_control_B.A_m[105] = proc_control_B.Product5;
        proc_control_B.dp = proc_control_B.Divide1_k + proc_control_B.Divide2_c;
        proc_control_B.A_m[106] = proc_control_B.dp;
        proc_control_B.theta0 = proc_control_B.t12 * proc_control_B.K_j[8];
        proc_control_B.d16 = (((proc_control_B.K_j[10] * -2.1519484922730651E-5
          + proc_control_B.K_j[12] * 1.3454180758607359) - proc_control_B.t *
          7.7738505218783331E-7) - proc_control_B.K_j[7] * 0.01129023503850542)
          + ((proc_control_B.K_j[9] * -0.00041111798914172931 -
              proc_control_B.theta0 * 7.7738505218783331E-7) -
             1.8960611028971542E-5);
        proc_control_B.A_m[111] = proc_control_B.d16;
        proc_control_B.A_m[112] = (((((proc_control_B.t * -0.01903042325061665 +
          proc_control_B.t16) + proc_control_B.t58) + -proc_control_B.t59) -
          proc_control_B.t65) - proc_control_B.theta0 * 0.01903042325061665) -
          0.46415666464918648;
        proc_control_B.d17 = (((proc_control_B.K_j[7] * -5.890830655932608E-5 +
          proc_control_B.K_j[9] * 0.0071670223909459834) + proc_control_B.theta0
          * 2.3842573459475649E-5) + 0.00058152618193843065) +
          ((proc_control_B.K_j[10] * -0.93255469429176219 - proc_control_B.K_j
            [12] * 7.6083411800115719E-5) + proc_control_B.t *
           2.3842573459475649E-5);
        proc_control_B.A_m[113] = proc_control_B.d17;
        proc_control_B.d18 = (((proc_control_B.K_j[10] * -0.0071670223909459834
          + proc_control_B.K_j[12] * 0.00145353196782447) - proc_control_B.t *
          0.017943464992838758) + ((proc_control_B.K_j[7] * 0.044446246736648841
          - proc_control_B.K_j[9] * 5.3937622658585171) - proc_control_B.theta0 *
          0.017943464992838758)) + -0.4376454876302136;
        proc_control_B.A_m[114] = proc_control_B.d18;
        proc_control_B.d19 = (((proc_control_B.K_j[10] * 0.0012538688125934979 -
          proc_control_B.K_j[12] * 0.1118794885864644) + proc_control_B.t *
          8.4206769578830268E-5) + proc_control_B.K_j[7] * 1.7911420833141059E-5)
          + ((proc_control_B.theta0 * 8.4206769578830268E-5 +
              proc_control_B.K_j[9] * 0.025315910649035739) +
             0.0020538236482641531);
        proc_control_B.A_m[115] = proc_control_B.d19;
        proc_control_B.theta0 = (((proc_control_B.K_j[10] *
          1.6661666253314429E-5 + proc_control_B.K_j[12] * 0.01129023503850542)
          + proc_control_B.t * 0.00035080205133418912) + ((proc_control_B.K_j[7]
          * -5.91169722427816 + proc_control_B.K_j[9] * 0.01257120723021817) +
          proc_control_B.theta0 * 0.00035080205133418912)) +
          0.0085561475935168052;
        proc_control_B.A_m[116] = proc_control_B.theta0;
        proc_control_B.t21 += proc_control_B.t69;
        proc_control_B.A_m[117] = proc_control_B.t21;
        proc_control_B.Divide1_k -= proc_control_B.Divide2_c;
        proc_control_B.A_m[118] = proc_control_B.Divide1_k;
        proc_control_B.t35_tmp = (-proc_control_B.t35_tmp +
          -proc_control_B.BodyVelocity_c_idx_2) + 1.0;
        proc_control_B.A_m[119] = proc_control_B.t35_tmp;
        proc_control_B.Divide2_c = proc_control_B.scale * proc_control_B.K_j[9];
        proc_control_B.t69 = (((proc_control_B.K_j[10] * 2.989993556213668E-6 -
          proc_control_B.K_j[11] * 1.4431163638272659) + proc_control_B.absxk *
          5.1582899272597018E-6) - proc_control_B.K_j[7] * 0.143523560675718) +
          ((proc_control_B.Divide2_c * 5.1582899272597018E-6 +
            proc_control_B.K_j[8] * -0.00041111798914172931) +
           0.0001592064792364106);
        proc_control_B.A_m[124] = proc_control_B.t69;
        proc_control_B.BodyVelocity_c_idx_2 = (((proc_control_B.K_j[10] *
          1.0731951852318531 - proc_control_B.K_j[11] * 1.356129262930646E-5) +
          proc_control_B.absxk * 2.1981689677272681E-5) + ((proc_control_B.K_j[7]
          * -0.001468966557066211 - proc_control_B.K_j[8] * 0.069014505171846527)
          + proc_control_B.Divide2_c * 2.1981689677272681E-5)) +
          0.00067844721226150231;
        proc_control_B.A_m[125] = proc_control_B.BodyVelocity_c_idx_2;
        proc_control_B.A_m[126] = (((((proc_control_B.absxk *
          -0.01616685726098728 + proc_control_B.Divide_p) + -proc_control_B.t59)
          + proc_control_B.t62) + proc_control_B.t63) - proc_control_B.Divide2_c
          * 0.01616685726098728) - 0.49897707595639768;
        proc_control_B.t59 = (((proc_control_B.K_j[10] * 0.069014505171846527 -
          proc_control_B.K_j[11] * 0.0018646499569661989) + proc_control_B.absxk
          * 0.00171795837774031) + ((proc_control_B.K_j[7] * -0.1148218101592509
          - proc_control_B.K_j[8] * 5.3937622658585171) +
          proc_control_B.Divide2_c * 0.00171795837774031)) +
          0.053023406720379938;
        proc_control_B.A_m[127] = proc_control_B.t59;
        proc_control_B.d20 = (((proc_control_B.K_j[10] * -0.00032387772021301561
          + proc_control_B.K_j[11] * 0.143523560675718) - proc_control_B.absxk *
          0.00030055639757781919) + ((proc_control_B.K_j[7] * 8.3502908029033716
          + proc_control_B.K_j[8] * 0.025315910649035739) -
          proc_control_B.Divide2_c * 0.00030055639757781919)) +
          -0.0092764320240067664;
        proc_control_B.A_m[128] = proc_control_B.d20;
        proc_control_B.Divide2_c = (((proc_control_B.K_j[10] *
          -0.0013492616947596331 - proc_control_B.K_j[11] * 0.01448357294143097)
          - proc_control_B.absxk * 3.993855127780116E-6) - proc_control_B.K_j[7]
          * 2.2977499514997389E-5) + ((proc_control_B.K_j[8] *
          0.01257120723021817 - proc_control_B.Divide2_c * 3.993855127780116E-6)
          - 0.00012326713357346041);
        proc_control_B.A_m[129] = proc_control_B.Divide2_c;
        proc_control_B.A_m[133] = -proc_control_B.t39;
        proc_control_B.A_m[134] = proc_control_B.t15;
        proc_control_B.A_m[135] = proc_control_B.t41;
        proc_control_B.A_m[136] = -proc_control_B.t40;
        proc_control_B.ob *= proc_control_B.K_j[10];
        proc_control_B.d21 = (((proc_control_B.K_j[10] * -0.00010396365424827521
          - proc_control_B.K_j[11] * 0.0030560301354578762) -
          proc_control_B.K_j[12] * 0.030270009262121408) - proc_control_B.oc *
                              2.1768827225552109E-5) + (((proc_control_B.K_j[8] *
          -2.1519484922730651E-5 + proc_control_B.K_j[9] * 2.989993556213668E-6)
          - proc_control_B.ob * 2.1768827225552109E-5) - 0.00043450752945213789);
        proc_control_B.A_m[137] = proc_control_B.d21;
        proc_control_B.d22 = ((((proc_control_B.K_j[10] * 0.0028513455484883 -
          proc_control_B.K_j[11] * 0.00032316342950661811) + proc_control_B.K_j
          [12] * 4.2079285691049859E-5) - proc_control_B.oc *
          0.0036543398217122828) + ((proc_control_B.K_j[8] *
          -9.1703771260780813E-5 + proc_control_B.K_j[9] * 1.0731951852318531) -
          proc_control_B.ob * 0.0036543398217122828)) + -0.072940914605035587;
        proc_control_B.A_m[138] = proc_control_B.d22;
        proc_control_B.d23 = (((proc_control_B.K_j[10] * 0.023864851221217471 +
          proc_control_B.K_j[11] * 4.0426879502317728E-6) - proc_control_B.K_j
          [12] * 0.00016269010774240791) + ((proc_control_B.oc *
          0.0003794960966701478 - proc_control_B.K_j[8] * 0.93255469429176219) -
          proc_control_B.K_j[9] * 9.1703771260780813E-5)) + (proc_control_B.ob *
          0.0003794960966701478 + 0.007574772388625705);
        proc_control_B.A_m[139] = proc_control_B.d23;
        proc_control_B.d24 = ((((proc_control_B.oc * -0.28560141361437341 +
          proc_control_B.t65) - proc_control_B.t63) - proc_control_B.ob *
          0.28560141361437341) - 5.7006270182509668) + ((proc_control_B.K_j[10] *
          0.00017692814721597281 - proc_control_B.K_j[11] * 0.00301187450220627)
          + proc_control_B.K_j[12] * 0.0032852614324183722);
        proc_control_B.A_m[140] = proc_control_B.d24;
        proc_control_B.d25 = (((proc_control_B.K_j[10] * 0.005100926963153893 +
          proc_control_B.K_j[11] * 7.54282242443926E-5) + proc_control_B.K_j[12]
          * 0.76112100692746432) + ((proc_control_B.oc * 0.0013404854555911631 +
          proc_control_B.K_j[8] * 0.0012538688125934979) - proc_control_B.K_j[9]
          * 0.00032387772021301561)) + (proc_control_B.ob *
          0.0013404854555911631 + 0.026756196718386482);
        proc_control_B.A_m[141] = proc_control_B.d25;
        proc_control_B.ob = (((proc_control_B.K_j[10] * -0.0085297096290247246 -
          proc_control_B.K_j[11] * 0.59953739020136265) - proc_control_B.K_j[12]
                              * 6.8948828938803766E-5) + ((proc_control_B.oc *
          0.00066564938883491385 + proc_control_B.K_j[8] * 1.6661666253314429E-5)
          - proc_control_B.K_j[9] * 0.0013492616947596331)) + (proc_control_B.ob
          * 0.00066564938883491385 + 0.013286414946804669);
        proc_control_B.A_m[142] = proc_control_B.ob;
        proc_control_B.A_m[146] = -proc_control_B.t40;
        proc_control_B.A_m[147] = -proc_control_B.t41;
        proc_control_B.A_m[148] = proc_control_B.t15;
        proc_control_B.A_m[149] = proc_control_B.t39;
        proc_control_B.oc = proc_control_B.K_j[11] * proc_control_B.oa;
        proc_control_B.oa = ((((proc_control_B.K_j[10] * -0.0030560301354578762
          + proc_control_B.K_j[11] * 0.001929418735906703) + proc_control_B.K_j
          [12] * 6.2884941489263073E-5) + proc_control_B.od *
                              0.001003331497170287) + ((proc_control_B.K_j[7] *
          9.7602896722846373E-5 - proc_control_B.K_j[9] * 1.4431163638272659) +
          proc_control_B.oc * 0.001003331497170287)) + 0.0234110682673067;
        proc_control_B.A_m[150] = proc_control_B.oa;
        proc_control_B.d26 = (((proc_control_B.K_j[10] * -0.00032316342950661811
          + proc_control_B.K_j[11] * 4.5292476302332957E-6) -
          proc_control_B.K_j[12] * 0.016528998001422841) + proc_control_B.od *
                              1.026911824132076E-5) + (((proc_control_B.K_j[7] *
          0.00041592787873873338 - proc_control_B.K_j[9] * 1.356129262930646E-5)
          + proc_control_B.oc * 1.026911824132076E-5) + 0.00023961275896415121);
        proc_control_B.A_m[151] = proc_control_B.d26;
        proc_control_B.d27 = (((proc_control_B.K_j[10] * 4.0426879502317728E-6 +
          proc_control_B.K_j[11] * 0.023860477346842442) - proc_control_B.K_j[12]
          * 0.000941018323416786) + ((proc_control_B.od * -3.9756137245743291E-5
          + proc_control_B.K_j[7] * 0.69409782663856512) + proc_control_B.K_j[9]
          * 9.7602896722846373E-5)) + (proc_control_B.oc *
          -3.9756137245743291E-5 - 0.00092764320240067675);
        proc_control_B.A_m[152] = proc_control_B.d27;
        proc_control_B.d28 = (((proc_control_B.K_j[10] * -0.00301187450220627 +
          proc_control_B.K_j[11] * 0.00082864946354184129) - proc_control_B.K_j
          [12] * 0.291807921220024) + ((proc_control_B.od *
          0.00080268590155159437 + proc_control_B.K_j[7] * 0.032506453976272241)
          - proc_control_B.K_j[9] * 0.0018646499569661989)) + (proc_control_B.oc
          * 0.00080268590155159437 + 0.018729337702870542);
        proc_control_B.A_m[153] = proc_control_B.d28;
        proc_control_B.t61 = ((((proc_control_B.od * -0.058374455968341669 +
          proc_control_B.t61) - proc_control_B.t62) - proc_control_B.oc *
          0.058374455968341669) - 1.362070639261306) + ((proc_control_B.K_j[10] *
          7.54282242443926E-5 - proc_control_B.K_j[11] * 0.00019446645525741661)
          - proc_control_B.K_j[12] * 0.003324115892995542);
        proc_control_B.A_m[154] = proc_control_B.t61;
        proc_control_B.oc = ((((proc_control_B.od * 1.6062902063655571E-7 -
          proc_control_B.K_j[7] * 7.5569972812640509E-5) - proc_control_B.K_j[9]
          * 0.01448357294143097) + proc_control_B.oc * 1.6062902063655571E-7) +
                             ((proc_control_B.K_j[10] * -0.59953739020136265 +
          proc_control_B.K_j[11] * 0.0085432434746820687) + proc_control_B.K_j
                              [12] * 0.0030111351640179931)) +
          3.7480104815196341E-6;
        proc_control_B.A_m[155] = proc_control_B.oc;
        proc_control_B.A_m[159] = -proc_control_B.t41;
        proc_control_B.A_m[160] = proc_control_B.t40;
        proc_control_B.A_m[161] = -proc_control_B.t39;
        proc_control_B.A_m[162] = proc_control_B.t15;
        proc_control_B.od = proc_control_B.K_j[12] * proc_control_B.Product8;
        proc_control_B.Product8 = (((proc_control_B.K_j[10] *
          -0.030270009262121408 + proc_control_B.K_j[11] * 6.2884941489263073E-5)
          + proc_control_B.K_j[12] * 0.0020006959490984312) - proc_control_B.t4 *
          0.0001032754577185093) + (((proc_control_B.K_j[7] *
          1.0571299073092789E-5 + proc_control_B.K_j[8] * 1.3454180758607359) -
          proc_control_B.od * 0.0001032754577185093) - 0.0050625224371818262);
        proc_control_B.A_m[163] = proc_control_B.Product8;
        proc_control_B.d29 = (((proc_control_B.K_j[10] * 4.2079285691049859E-5 -
          proc_control_B.K_j[11] * 0.016528998001422841) + proc_control_B.K_j[12]
          * 0.00283488707941543) + proc_control_B.t4 * 4.3636352726935713E-5) +
          (((proc_control_B.K_j[7] * -0.74121409319149256 + proc_control_B.K_j[8]
             * 1.0571299073092789E-5) + proc_control_B.od *
            4.3636352726935713E-5) + 0.0021390368983792022);
        proc_control_B.A_m[164] = proc_control_B.d29;
        proc_control_B.d30 = ((((proc_control_B.t4 * -5.3885346962112674E-7 -
          proc_control_B.K_j[7] * 0.00032422410747795261) - proc_control_B.K_j[8]
          * 7.6083411800115719E-5) - proc_control_B.od * 5.3885346962112674E-7)
                              + ((proc_control_B.K_j[10] *
          -0.00016269010774240791 - proc_control_B.K_j[11] *
          0.000941018323416786) - proc_control_B.K_j[12] * 2.6641242336162E-6))
          + -2.6414385765741509E-5;
        proc_control_B.A_m[165] = proc_control_B.d30;
        proc_control_B.d31 = (((proc_control_B.K_j[10] * 0.0032852614324183722 -
          proc_control_B.K_j[11] * 0.291807921220024) - proc_control_B.K_j[12] *
          0.00063467747547131872) + ((proc_control_B.t4 * 0.00040656429737222281
          + proc_control_B.K_j[7] * 0.24400486517334929) + proc_control_B.K_j[8]
          * 0.00145353196782447)) + (proc_control_B.od * 0.00040656429737222281
          + 0.019929622420207);
        proc_control_B.A_m[166] = proc_control_B.d31;
        proc_control_B.d32 = ((((proc_control_B.t4 * 1.6384160104928689E-7 -
          proc_control_B.K_j[7] * 0.001145088836853196) - proc_control_B.K_j[8] *
          0.1118794885864644) + proc_control_B.od * 1.6384160104928689E-7) +
                              ((proc_control_B.K_j[10] * 0.76112100692746432 -
          proc_control_B.K_j[11] * 0.003324115892995542) - proc_control_B.K_j[12]
          * 0.005288701994301117)) + 8.0314510318277867E-6;
        proc_control_B.A_m[167] = proc_control_B.d32;
        proc_control_B.od = ((((proc_control_B.t4 * -0.054076220260104418 +
          proc_control_B.t57) - proc_control_B.t58) - proc_control_B.od *
                              0.054076220260104418) - 2.6507951107894319) +
          ((proc_control_B.K_j[10] * -6.8948828938803766E-5 +
            proc_control_B.K_j[11] * 0.0030111351640179931) +
           proc_control_B.K_j[12] * 1.7711862430984169E-5);
        proc_control_B.A_m[168] = proc_control_B.od;
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 169; proc_control_B.Ns++)
        {
          proc_control_B.dv6[proc_control_B.Ns] =
            proc_control_B.A_m[proc_control_B.Ns] *
            proc_control_P.Constant3_Value;
        }

        proc_control_expm_m(proc_control_B.dv6, &proc_control_B.A[169 *
                            proc_control_B.idx_m]);
        proc_control_B.dv7[39] = proc_control_B.rtb_u2_f;
        proc_control_B.dv7[40] = proc_control_B.AngularRate_a_idx_1;
        proc_control_B.dv7[41] = proc_control_B.t57_tmp;
        proc_control_B.dv7[43] = proc_control_B.t43;
        proc_control_B.dv7[44] = proc_control_B.t44;
        proc_control_B.dv7[45] = proc_control_B.t45;
        proc_control_B.dv7[46] = proc_control_B.t57_tmp_n;
        proc_control_B.dv7[47] = proc_control_B.rtb_Sum6_idx_2;
        proc_control_B.dv7[48] = proc_control_B.rtb_Sum6_idx_1;
        proc_control_B.dv7[49] = proc_control_B.rtb_Sum6_idx_0;
        proc_control_B.dv7[50] = proc_control_B.t35;
        proc_control_B.dv7[51] = proc_control_B.oa_p;
        proc_control_B.dv7[52] = proc_control_B.d_h;
        proc_control_B.dv7[53] = proc_control_B.t24;
        proc_control_B.dv7[54] = proc_control_B.t25;
        proc_control_B.dv7[55] = -proc_control_B.t43;
        proc_control_B.dv7[57] = -proc_control_B.t45;
        proc_control_B.dv7[58] = proc_control_B.t44;
        proc_control_B.dv7[59] = proc_control_B.t31_tmp;
        proc_control_B.dv7[60] = proc_control_B.t27_tmp;
        proc_control_B.dv7[61] = proc_control_B.d1;
        proc_control_B.dv7[62] = proc_control_B.d2;
        proc_control_B.dv7[63] = proc_control_B.d3;
        proc_control_B.dv7[64] = proc_control_B.d4;
        proc_control_B.dv7[65] = proc_control_B.t27;
        proc_control_B.dv7[66] = proc_control_B.t33;
        proc_control_B.dv7[67] = proc_control_B.t29;
        proc_control_B.dv7[68] = -proc_control_B.t44;
        proc_control_B.dv7[69] = proc_control_B.t45;
        proc_control_B.dv7[71] = -proc_control_B.t43;
        proc_control_B.dv7[72] = proc_control_B.rtb_Divide3_m_tmp;
        proc_control_B.dv7[73] = proc_control_B.t24_tmp;
        proc_control_B.dv7[74] = proc_control_B.t34;
        proc_control_B.dv7[75] = proc_control_B.d5;
        proc_control_B.dv7[76] = proc_control_B.d6;
        proc_control_B.dv7[77] = proc_control_B.d7;
        proc_control_B.dv7[78] = proc_control_B.t25_tmp;
        proc_control_B.dv7[79] = proc_control_B.t26;
        proc_control_B.dv7[80] = proc_control_B.d;
        proc_control_B.dv7[81] = -proc_control_B.t45;
        proc_control_B.dv7[82] = -proc_control_B.t44;
        proc_control_B.dv7[83] = proc_control_B.t43;
        proc_control_B.dv7[85] = proc_control_B.Divide3_m;
        proc_control_B.dv7[86] = proc_control_B.t52;
        proc_control_B.dv7[87] = proc_control_B.t29_tmp;
        proc_control_B.dv7[88] = proc_control_B.t30;
        proc_control_B.dv7[89] = proc_control_B.t31;
        proc_control_B.dv7[90] = proc_control_B.d8;
        proc_control_B.dv7[91] = proc_control_B.A_tmp;
        proc_control_B.dv7[92] = proc_control_B.d9;
        proc_control_B.dv7[93] = proc_control_B.d10;
        proc_control_B.dv7[98] = proc_control_B.d11;
        proc_control_B.dv7[99] = proc_control_B.d12;
        proc_control_B.dv7[100] = proc_control_B.d13;
        proc_control_B.dv7[101] = proc_control_B.d14;
        proc_control_B.dv7[102] = proc_control_B.d15;
        proc_control_B.dv7[103] = proc_control_B.n_e;
        proc_control_B.dv7[104] = proc_control_B.t5;
        proc_control_B.dv7[105] = proc_control_B.Product5;
        proc_control_B.dv7[106] = proc_control_B.dp;
        proc_control_B.dv7[111] = proc_control_B.d16;
        proc_control_B.dv7[112] = (((((proc_control_B.t * -0.01903042325061665 +
          proc_control_B.t16) + proc_control_B.t58) + proc_control_B.t60) -
          proc_control_B.t65) - proc_control_B.t12 * proc_control_B.K_j[8] *
          0.01903042325061665) - 0.46415666464918648;
        proc_control_B.dv7[113] = proc_control_B.d17;
        proc_control_B.dv7[114] = proc_control_B.d18;
        proc_control_B.dv7[115] = proc_control_B.d19;
        proc_control_B.dv7[116] = proc_control_B.theta0;
        proc_control_B.dv7[117] = proc_control_B.t21;
        proc_control_B.dv7[118] = proc_control_B.Divide1_k;
        proc_control_B.dv7[119] = proc_control_B.t35_tmp;
        proc_control_B.dv7[124] = proc_control_B.t69;
        proc_control_B.dv7[125] = proc_control_B.BodyVelocity_c_idx_2;
        proc_control_B.dv7[126] = (((((proc_control_B.absxk *
          -0.01616685726098728 + proc_control_B.Divide_p) + proc_control_B.t60)
          + proc_control_B.t62) + proc_control_B.t63) - proc_control_B.scale *
          proc_control_B.K_j[9] * 0.01616685726098728) - 0.49897707595639768;
        proc_control_B.dv7[127] = proc_control_B.t59;
        proc_control_B.dv7[128] = proc_control_B.d20;
        proc_control_B.dv7[129] = proc_control_B.Divide2_c;
        proc_control_B.dv7[133] = -proc_control_B.t39;
        proc_control_B.dv7[134] = proc_control_B.t15;
        proc_control_B.dv7[135] = proc_control_B.t41;
        proc_control_B.dv7[136] = -proc_control_B.t40;
        proc_control_B.dv7[137] = proc_control_B.d21;
        proc_control_B.dv7[138] = proc_control_B.d22;
        proc_control_B.dv7[139] = proc_control_B.d23;
        proc_control_B.dv7[140] = proc_control_B.d24;
        proc_control_B.dv7[141] = proc_control_B.d25;
        proc_control_B.dv7[142] = proc_control_B.ob;
        proc_control_B.dv7[146] = -proc_control_B.t40;
        proc_control_B.dv7[147] = -proc_control_B.t41;
        proc_control_B.dv7[148] = proc_control_B.t15;
        proc_control_B.dv7[149] = proc_control_B.t39;
        proc_control_B.dv7[150] = proc_control_B.oa;
        proc_control_B.dv7[151] = proc_control_B.d26;
        proc_control_B.dv7[152] = proc_control_B.d27;
        proc_control_B.dv7[153] = proc_control_B.d28;
        proc_control_B.dv7[154] = proc_control_B.t61;
        proc_control_B.dv7[155] = proc_control_B.oc;
        proc_control_B.dv7[159] = -proc_control_B.t41;
        proc_control_B.dv7[160] = proc_control_B.t40;
        proc_control_B.dv7[161] = -proc_control_B.t39;
        proc_control_B.dv7[162] = proc_control_B.t15;
        proc_control_B.dv7[163] = proc_control_B.Product8;
        proc_control_B.dv7[164] = proc_control_B.d29;
        proc_control_B.dv7[165] = proc_control_B.d30;
        proc_control_B.dv7[166] = proc_control_B.d31;
        proc_control_B.dv7[167] = proc_control_B.d32;
        proc_control_B.dv7[168] = proc_control_B.od;
        proc_control_B.Ns = 0;
        proc_control_B.i_m = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
             proc_control_B.ibmat++) {
          for (proc_control_B.idx_k = 0; proc_control_B.idx_k < 6;
               proc_control_B.idx_k++) {
            proc_control_B.idx_mc = (proc_control_B.idx_k + proc_control_B.i_m)
              + 98;
            proc_control_B.idx_h = proc_control_B.idx_k + proc_control_B.Ns;
            proc_control_B.dCoefs[proc_control_B.idx_h] =
              proc_control_B.dv7[proc_control_B.idx_mc];
            proc_control_B.constValues_f[proc_control_B.idx_h] =
              proc_control_B.A[proc_control_B.idx_mc] -
              proc_control_B.b_newCoefs[proc_control_B.idx_h];
          }

          proc_control_B.Ns += 6;
          proc_control_B.i_m += 13;
        }

        proc_control_mldivide_Z0xqFpTr(proc_control_B.dCoefs,
          proc_control_B.constValues_f, proc_control_B.constValues_a);
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.i_m = 0;
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
               proc_control_B.ibmat++) {
            proc_control_B.idx_k = proc_control_B.i_m + proc_control_B.Ns;
            proc_control_B.dv17[proc_control_B.idx_k] = 0.0;
            proc_control_B.idx_mc = 0;
            for (proc_control_B.idx_h = 0; proc_control_B.idx_h < 6;
                 proc_control_B.idx_h++) {
              proc_control_B.dv17[proc_control_B.idx_k] +=
                proc_control_B.constValues_a[proc_control_B.idx_mc +
                proc_control_B.Ns] * c_b[proc_control_B.idx_h +
                proc_control_B.i_m];
              proc_control_B.idx_mc += 6;
            }

            proc_control_B.i_m += 6;
          }
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          for (proc_control_B.i_m = 0; proc_control_B.i_m < 7;
               proc_control_B.i_m++) {
            proc_control_B.B[(proc_control_B.i_m + 13 * proc_control_B.Ns) + 104
              * proc_control_B.idx_m] = 0.0;
          }

          for (proc_control_B.i_m = 0; proc_control_B.i_m < 6;
               proc_control_B.i_m++) {
            proc_control_B.B[((proc_control_B.i_m + 13 * proc_control_B.Ns) +
                              104 * proc_control_B.idx_m) + 7] =
              proc_control_B.dv17[6 * proc_control_B.Ns + proc_control_B.i_m];
          }
        }

        if (static_cast<int32_T>(proc_control_P.Constant1_Value_k) - 1 >= 0) {
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
          {
            proc_control_B.dv25[proc_control_B.Ns] =
              proc_control_DW.Delay1_DSTATE[11 * proc_control_B.Ns +
              proc_control_B.idx_m];
          }
        }

        proc_control_B.ibmat = 0;
        while (proc_control_B.ibmat <= static_cast<int32_T>
               (proc_control_P.Constant1_Value_k) - 1) {
          proc_control_B.Divide_p = proc_control_P.Constant3_Value /
            proc_control_P.Constant1_Value_k;
          proc_co_AUV8QuatSimFcn_AbfqyrNU(proc_control_B.K_j,
            proc_control_B.dv25, proc_control_B.z_k);
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns
               ++) {
            proc_control_B.K_j[proc_control_B.Ns] +=
              proc_control_B.z_k[proc_control_B.Ns] * proc_control_B.Divide_p;
          }

          proc_control_B.d = proc_control_norm_115oznfV(&proc_control_B.K_j[3]);
          proc_control_B.K_j[3] /= proc_control_B.d;
          proc_control_B.K_j[4] /= proc_control_B.d;
          proc_control_B.K_j[5] /= proc_control_B.d;
          proc_control_B.K_j[6] /= proc_control_B.d;
          proc_control_B.ibmat++;
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.useq_a[proc_control_B.Ns + (proc_control_B.idx_m << 3)]
            = proc_control_DW.Delay1_DSTATE[11 * proc_control_B.Ns +
            proc_control_B.idx_m];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.Divide_p =
            proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.Ns];
          proc_control_B.i_m = 13 * proc_control_B.idx_m + proc_control_B.Ns;
          proc_control_B.Y_p[proc_control_B.i_m] = proc_control_B.Divide_p;
          proc_control_B.X_d[proc_control_B.i_m] = proc_control_B.Divide_p;
          proc_control_B.DX[proc_control_B.i_m] =
            proc_control_B.K_j[proc_control_B.Ns] - proc_control_B.Divide_p;
        }
      }

      // End of MATLAB Function: '<S144>/MATLAB Function2'

      // MATLAB Function: '<S210>/FixedHorizonOptimizer'
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 3003; proc_control_B.Ns++)
      {
        proc_control_B.b_C[proc_control_B.Ns] = d_1[proc_control_B.Ns];
      }

      std::memcpy(&proc_control_B.b_A[0], &e_0[0], 4851U * sizeof(real_T));
      std::memset(&proc_control_B.Bu[0], 0, 1848U * sizeof(real_T));
      std::memset(&proc_control_B.Bv[0], 0, 231U * sizeof(real_T));
      std::memset(&proc_control_B.Dv[0], 0, 143U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 21; proc_control_B.Ns++) {
        std::memcpy(&proc_control_B.b_A[proc_control_B.Ns * 21],
                    &b_0[proc_control_B.Ns * 21], 21U * sizeof(real_T));
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 13; proc_control_B.i_m
             ++) {
          proc_control_B.K_tmp = 13 * proc_control_B.Ns + proc_control_B.i_m;
          proc_control_B.b_C[proc_control_B.K_tmp] = d_0[proc_control_B.K_tmp];
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.iv1[proc_control_B.Ns] = proc_control_B.Ns + 1;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.iv[proc_control_B.Ns] = proc_control_B.Ns + 1;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv25[proc_control_B.Ns] = 1.0;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.z_k[proc_control_B.Ns] = 1.0;
      }

      std::memcpy(&proc_control_B.b_B_m[0], &(*(real_T (*)[104])&
        proc_control_B.B[0])[0], 104U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_B[0], &c[0], 630U * sizeof(real_T));

      // MATLAB Function: '<S210>/FixedHorizonOptimizer' incorporates:
      //   DiscretePulseGenerator: '<S144>/Pulse Generator'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S140>/N to A'
      //   Lookup_n-D: '<S140>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   Merge generated from: '<S9>/Merge'
      //   Trigonometry: '<S271>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //   UniformRandomNumber: '<S12>/ Drift'
      //
      proc_c_mpc_plantupdate_opKkKWqM(&proc_control_B.A[0], proc_control_B.b_B_m,
        &proc_control_B.C[0], &proc_control_B.b_A[0], proc_control_B.b_B,
        &proc_control_B.b_C[0], l_0, proc_control_B.iv1, proc_control_B.iv,
        proc_control_B.dv25, proc_control_B.z_k, &proc_control_B.Bu[0],
        &proc_control_B.Bv[0], proc_control_B.b_C_c, &proc_control_B.Dv[0],
        proc_control_B.K_j, proc_control_B.b_A_o, proc_control_B.A_m,
        proc_control_B.Nk);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.iv1[proc_control_B.Ns] = proc_control_B.Ns + 1;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.iv[proc_control_B.Ns] = proc_control_B.Ns + 1;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv25[proc_control_B.Ns] = 1.0;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.z_k[proc_control_B.Ns] = 1.0;
      }

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S242>/Enable'

      // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
      //   EnablePort: '<S270>/Enable'

      proc_control_B.idx_k = 0;
      proc_control_B.K_tmp = 0;
      proc_control_B.idx_mc = 0;
      proc_control_B.idx_h = 0;
      proc_control_B.idx_i = 0;
      proc_control_B.idx_c = 0;
      proc_control_B.idx_n = 0;
      proc_control_B.idx_il = 0;
      proc_control_B.idx_o = 0;

      // End of Outputs for SubSystem: '<S267>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 10;
           proc_control_B.idx_m++) {
        proc_control_B.Ns = 0;
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 30; proc_control_B.i_m
             ++) {
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
               proc_control_B.ibmat++) {
            proc_control_B.b_D_tmp = proc_control_B.ibmat + proc_control_B.Ns;

            // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
            //   EnablePort: '<S1>/Enable'

            // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
            //   EnablePort: '<S242>/Enable'

            // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
            //   EnablePort: '<S270>/Enable'

            proc_control_B.b_D_m[proc_control_B.b_D_tmp] = b_D
              [(proc_control_B.b_D_tmp + proc_control_B.idx_o) + 390];

            // End of Outputs for SubSystem: '<S267>/Subsystem2'
            // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
            // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          }

          proc_control_B.Ns += 13;
        }

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S242>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        std::memcpy(&proc_control_B.b_B_m[0], &(*(real_T (*)[104])&
          proc_control_B.B[proc_control_B.K_tmp + 104])[0], 104U * sizeof(real_T));
        std::memcpy(&proc_control_B.b_B[0], &(*(real_T (*)[630])&
          b_B[proc_control_B.idx_h + 630])[0], 630U * sizeof(real_T));
        proc_c_mpc_plantupdate_opKkKWqM(&proc_control_B.A[proc_control_B.idx_k +
          169], proc_control_B.b_B_m, &proc_control_B.C[proc_control_B.idx_k +
          169], &proc_control_B.b_A[proc_control_B.idx_mc + 441],
          proc_control_B.b_B, &proc_control_B.b_C[proc_control_B.idx_i + 273],
          proc_control_B.b_D_m, proc_control_B.iv1, proc_control_B.iv,
          proc_control_B.dv25, proc_control_B.z_k,
          &proc_control_B.Bu[proc_control_B.idx_c + 168],
          &proc_control_B.Bv[proc_control_B.idx_n + 21], proc_control_B.b_C_c,
          &proc_control_B.Dv[proc_control_B.idx_il + 13], proc_control_B.K_j,
          proc_control_B.b_A_o, proc_control_B.A_m, proc_control_B.Nk);
        proc_control_B.idx_k += 169;
        proc_control_B.K_tmp += 104;
        proc_control_B.idx_mc += 441;
        proc_control_B.idx_h += 630;
        proc_control_B.idx_i += 273;
        proc_control_B.idx_c += 168;
        proc_control_B.idx_n += 21;
        proc_control_B.idx_il += 13;
        proc_control_B.idx_o += 390;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      std::memcpy(&proc_control_B.b_Mlim[0], &e[0], 258U * sizeof(real_T));
      std::memset(&proc_control_B.b_utarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_xoff[0], &f_0[0], 21U * sizeof(real_T));
      std::memcpy(&proc_control_B.U_h[0], &proc_control_B.useq_a[0], sizeof
                  (real_T) << 3U);
      std::memcpy(&proc_control_B.K_j[0], &proc_control_B.Y_p[0], 13U * sizeof
                  (real_T));
      std::memcpy(&proc_control_B.u_scale[0], &proc_control_B.useq_a[0], sizeof
                  (real_T) << 3U);
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 258;
           proc_control_B.idx_m++) {
        proc_control_B.Divide_p = proc_control_B.b_Mlim[proc_control_B.idx_m];
        proc_control_B.Ns = b_Mrows[proc_control_B.idx_m];
        if (proc_control_B.Ns <= 130) {
          proc_control_B.Ns = (proc_control_B.Ns - div_nde_s32_floor
                               (proc_control_B.Ns - 1, proc_control_ny) *
                               proc_control_ny) - 1;
          proc_control_B.Divide_p += old_yoff[proc_control_B.Ns] -
            proc_control_B.K_j[proc_control_B.Ns];
        } else if (proc_control_B.Ns <= 260) {
          proc_control_B.Ns = (proc_control_B.Ns - div_nde_s32_floor
                               (proc_control_B.Ns - 131, proc_control_ny) *
                               proc_control_ny) - 131;
          proc_control_B.Divide_p -= old_yoff[proc_control_B.Ns] -
            proc_control_B.K_j[proc_control_B.Ns];
        } else if (proc_control_B.Ns <= 340) {
          proc_control_B.Divide_p += 0.0 - proc_control_B.U_h[(proc_control_B.Ns
            - (((proc_control_B.Ns - 261) >> 3) << 3)) - 261];
        } else {
          proc_control_B.Divide_p -= 0.0 - proc_control_B.U_h[(proc_control_B.Ns
            - (((proc_control_B.Ns - 341) >> 3) << 3)) - 341];
        }

        proc_control_B.b_Mlim[proc_control_B.idx_m] = proc_control_B.Divide_p;
      }

      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 8;
           proc_control_B.idx_m++) {
        proc_control_B.Divide_p = proc_control_B.U_h[proc_control_B.idx_m];
        proc_control_B.Ns = 0;
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 10; proc_control_B.i_m
             ++) {
          proc_control_B.ibmat = proc_control_B.Ns + proc_control_B.idx_m;
          proc_control_B.b_utarget[proc_control_B.ibmat] -=
            proc_control_B.Divide_p;
          proc_control_B.Ns += 8;
        }
      }

      std::memcpy(&proc_control_B.b_xoff[0], &proc_control_B.X_d[0], 13U *
                  sizeof(real_T));
      std::memcpy(&proc_control_B.Bv[0], &proc_control_B.DX[0], 13U * sizeof
                  (real_T));
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 10;
           proc_control_B.idx_m++) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.Ns] =
            proc_control_B.b_xoff[proc_control_B.Ns] - proc_control_B.X_d
            [(proc_control_B.idx_m + 1) * 13 + proc_control_B.Ns];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.U_h[proc_control_B.Ns] =
            proc_control_B.u_scale[proc_control_B.Ns] - proc_control_B.useq_a
            [((proc_control_B.idx_m + 1) << 3) + proc_control_B.Ns];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.rtb_u2_f = 0.0;
          for (proc_control_B.i_m = 0; proc_control_B.i_m < 13;
               proc_control_B.i_m++) {
            proc_control_B.rtb_u2_f += proc_control_B.b_A[(21 *
              proc_control_B.i_m + proc_control_B.Ns) + (proc_control_B.idx_m +
              1) * 441] *
              proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.i_m];
          }

          proc_control_B.z_k[proc_control_B.Ns] = 0.0;
          for (proc_control_B.i_m = 0; proc_control_B.i_m < 8;
               proc_control_B.i_m++) {
            proc_control_B.z_k[proc_control_B.Ns] += proc_control_B.Bu[(21 *
              proc_control_B.i_m + proc_control_B.Ns) + (proc_control_B.idx_m +
              1) * 168] * proc_control_B.U_h[proc_control_B.i_m];
          }

          proc_control_B.ibmat = (proc_control_B.idx_m + 1) * 13 +
            proc_control_B.Ns;
          proc_control_B.Bv[proc_control_B.Ns + 21 * (proc_control_B.idx_m + 1)]
            = (((proc_control_B.DX[proc_control_B.ibmat] +
                 proc_control_B.X_d[proc_control_B.ibmat]) -
                proc_control_B.b_xoff[proc_control_B.Ns]) +
               proc_control_B.rtb_u2_f) + proc_control_B.z_k[proc_control_B.Ns];
          proc_control_B.rtb_u2_f = 0.0;
          for (proc_control_B.i_m = 0; proc_control_B.i_m < 13;
               proc_control_B.i_m++) {
            proc_control_B.rtb_u2_f += proc_control_B.b_C[(13 *
              proc_control_B.i_m + proc_control_B.Ns) + (proc_control_B.idx_m +
              1) * 273] *
              proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.i_m];
          }

          proc_control_B.Dv[proc_control_B.ibmat] =
            (proc_control_B.Y_p[proc_control_B.ibmat] -
             proc_control_B.K_j[proc_control_B.Ns]) + proc_control_B.rtb_u2_f;
        }
      }

      for (proc_control_B.i_m = 0; proc_control_B.i_m < 11; proc_control_B.i_m++)
      {
        proc_control_B.vseq[proc_control_B.i_m] = 1.0;
      }

      proc_control_B.idx_m = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 10; proc_control_B.i_m++)
      {
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
             proc_control_B.ibmat++) {
          proc_control_B.rseq[proc_control_B.ibmat + proc_control_B.idx_m] =
            proc_control_B.Reference[proc_control_B.Ns + proc_control_B.i_m] -
            proc_control_B.K_j[proc_control_B.ibmat];
          proc_control_B.Ns += 10;
        }

        proc_control_B.idx_m += 13;
      }

      // SignalConversion generated from: '<S211>/ SFunction ' incorporates:
      //   Constant: '<S144>/Constant'
      //   MATLAB Function: '<S210>/FixedHorizonOptimizer'
      //   UnitDelay: '<S182>/last_mv'

      proc_control_B.z_c[0] = proc_control_B.WorldPosition[0] -
        proc_control_B.b_xoff[0];
      proc_control_B.z_c[1] = proc_control_B.WorldPosition[1] -
        proc_control_B.b_xoff[1];
      proc_control_B.z_c[2] = proc_control_B.WorldPosition[2] -
        proc_control_B.b_xoff[2];
      proc_control_B.z_c[3] = proc_control_B.qS2W[0] - proc_control_B.b_xoff[3];
      proc_control_B.z_c[4] = proc_control_B.qS2W[1] - proc_control_B.b_xoff[4];
      proc_control_B.z_c[5] = proc_control_B.qS2W[2] - proc_control_B.b_xoff[5];
      proc_control_B.z_c[6] = proc_control_B.qS2W[3] - proc_control_B.b_xoff[6];
      proc_control_B.z_c[7] = proc_control_B.BodyVelocity[0] -
        proc_control_B.b_xoff[7];
      proc_control_B.z_c[10] = proc_control_B.AngularRate[0] -
        proc_control_B.b_xoff[10];
      proc_control_B.z_c[8] = proc_control_B.BodyVelocity[1] -
        proc_control_B.b_xoff[8];
      proc_control_B.z_c[11] = proc_control_B.AngularRate[1] -
        proc_control_B.b_xoff[11];
      proc_control_B.z_c[9] = proc_control_B.BodyVelocity[2] -
        proc_control_B.b_xoff[9];
      proc_control_B.z_c[12] = proc_control_B.AngularRate[2] -
        proc_control_B.b_xoff[12];
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.z_c[proc_control_B.Ns + 13] =
          proc_control_P.Constant_Value_ct[proc_control_B.Ns] -
          proc_control_B.b_xoff[proc_control_B.Ns + 13];
        proc_control_B.dv25[proc_control_B.Ns] =
          proc_control_DW.last_mv_DSTATE[proc_control_B.Ns] -
          proc_control_B.u_scale[proc_control_B.Ns];
      }

      // End of SignalConversion generated from: '<S211>/ SFunction '

      // MATLAB Function: '<S210>/FixedHorizonOptimizer'
      std::memset(&proc_control_B.dv1[0], 0, 2838U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv26[proc_control_B.Ns] = 1.0;
      }

      std::memcpy(&proc_control_B.g[0], &g[0], 5418U * sizeof(real_T));
      std::memcpy(&proc_control_B.h[0], &h[0], 2064U * sizeof(real_T));
      std::memcpy(&proc_control_B.k[0], &k[0], 625U * sizeof(real_T));
      std::memcpy(&proc_control_B.l[0], &l[0], 6450U * sizeof(real_T));
      std::memcpy(&proc_control_B.bv[0], &proc_control_DW.Memory_PreviousInput[0],
                  258U * sizeof(boolean_T));

      // Update for Memory: '<S182>/Memory' incorporates:
      //   MATLAB Function: '<S210>/FixedHorizonOptimizer'
      //   MATLABSystem: '<S139>/MPC manager'
      //   Math: '<S182>/Math Function'
      //   Math: '<S182>/Math Function1'
      //   Math: '<S182>/Math Function2'
      //   Merge generated from: '<S138>/Merge'

      proc_contr_mpcblock_optimizer_d(proc_control_B.rseq, proc_control_B.vseq,
        proc_control_B.mvmin, proc_control_B.mvmax, proc_control_B.z_c,
        proc_control_B.dv25, proc_control_B.bv, proc_control_B.b_Mlim,
        proc_control_B.g, proc_control_B.h, proc_control_B.dv1,
        proc_control_B.b_utarget, proc_control_B.u_scale, proc_control_B.k,
        proc_control_B.l, proc_control_B.ywt, proc_control_B.mvwt,
        proc_control_B.dmwwt, n, o, proc_control_B.b_A, proc_control_B.Bu,
        proc_control_B.Bv, proc_control_B.b_C, proc_control_B.Dv, b_Mrows,
        proc_control_B.dv26, proc_control_B.U_h, proc_control_B.useq_a,
        &proc_control_B.MpcStatus, proc_control_DW.Memory_PreviousInput);

      // Merge generated from: '<S138>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S144>/Pulse Generator'

      proc_control_B.alive = (proc_control_DW.clockTickCounter_g <
        proc_control_P.PulseGenerator_Duty_j) &&
        (proc_control_DW.clockTickCounter_g >= 0) ?
        proc_control_P.PulseGenerator_Amp_i : 0.0;

      // DiscretePulseGenerator: '<S144>/Pulse Generator'
      if (proc_control_DW.clockTickCounter_g >=
          proc_control_P.PulseGenerator_Period_e - 1.0) {
        proc_control_DW.clockTickCounter_g = 0;
      } else {
        proc_control_DW.clockTickCounter_g++;
      }

      for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m++)
      {
        proc_control_B.Divide_p = proc_control_B.U_h[proc_control_B.i_m];

        // Merge generated from: '<S138>/Merge' incorporates:
        //   Gain: '<S182>/u_scale'
        //   SignalConversion generated from: '<S144>/out'

        proc_control_B.mv[proc_control_B.i_m] =
          proc_control_P.u_scale_Gain_i[proc_control_B.i_m] *
          proc_control_B.Divide_p;

        // Update for UnitDelay: '<S182>/last_mv' incorporates:
        //   Merge generated from: '<S138>/Merge'
        //   SignalConversion generated from: '<S144>/out'

        proc_control_DW.last_mv_DSTATE[proc_control_B.i_m] =
          proc_control_B.Divide_p;
      }

      // Update for Delay: '<S144>/Delay1' incorporates:
      //   Gain: '<S182>/u_scale'
      //   Gain: '<S182>/useq_scale'
      //   Merge generated from: '<S138>/Merge'
      //   SignalConversion generated from: '<S144>/out'

      for (proc_control_B.i_m = 0; proc_control_B.i_m < 88; proc_control_B.i_m++)
      {
        proc_control_DW.Delay1_DSTATE[proc_control_B.i_m] =
          proc_control_P.useq_scale_Gain[proc_control_B.i_m] *
          proc_control_B.useq_a[proc_control_B.i_m];
      }

      // End of Update for Delay: '<S144>/Delay1'
      // End of Outputs for SubSystem: '<S138>/LTV MPC quaternion '
      break;

     case 3:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S138>/Quaternion Non linear MPC (Not for codegen)' incorporates:
        //   ActionPort: '<S145>/Action Port'

        // InitializeConditions for SwitchCase: '<S138>/Switch Case' incorporates:
        //   Delay: '<S145>/Delay'
        //   Delay: '<S215>/mv_Delay'
        //   Delay: '<S215>/slack_delay'
        //   Delay: '<S215>/x_Delay'
        //   DiscretePulseGenerator: '<S145>/Pulse Generator'

        std::memcpy(&proc_control_DW.Delay_DSTATE_a[0],
                    &proc_control_P.Delay_InitialCondition[0], sizeof(real_T) <<
                    3U);
        proc_control_DW.icLoad = true;
        proc_control_DW.icLoad_a = true;
        proc_control_DW.icLoad_j = true;
        proc_control_DW.clockTickCounter = 0;

        // End of InitializeConditions for SubSystem: '<S138>/Quaternion Non linear MPC (Not for codegen)' 
      }

      // Outputs for IfAction SubSystem: '<S138>/Quaternion Non linear MPC (Not for codegen)' incorporates:
      //   ActionPort: '<S145>/Action Port'

      // Reshape: '<S214>/Reshape'
      proc_control_B.CostFcn_workspace_runtimedata.x[0] =
        proc_control_B.WorldPosition[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[1] =
        proc_control_B.WorldPosition[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[2] =
        proc_control_B.WorldPosition[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[3] = proc_control_B.qS2W[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[4] = proc_control_B.qS2W[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[5] = proc_control_B.qS2W[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[6] = proc_control_B.qS2W[3];
      proc_control_B.CostFcn_workspace_runtimedata.x[7] =
        proc_control_B.BodyVelocity[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[10] =
        proc_control_B.AngularRate[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[8] =
        proc_control_B.BodyVelocity[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[11] =
        proc_control_B.AngularRate[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[9] =
        proc_control_B.BodyVelocity[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[12] =
        proc_control_B.AngularRate[2];

      // Delay: '<S215>/mv_Delay' incorporates:
      //   Constant: '<S215>/ones'
      //   Delay: '<S145>/Delay'
      //   Product: '<S215>/Product'

      if (proc_control_DW.icLoad) {
        proc_control_B.Ns = 0;
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m
             ++) {
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 11;
               proc_control_B.ibmat++) {
            proc_control_DW.mv_Delay_DSTATE[proc_control_B.ibmat +
              proc_control_B.Ns] =
              proc_control_P.ones_Value[proc_control_B.ibmat] *
              proc_control_DW.Delay_DSTATE_a[proc_control_B.i_m];
          }

          proc_control_B.Ns += 11;
        }
      }

      // Selector: '<S215>/Selector1' incorporates:
      //   Constant: '<S215>/Constant1'
      //   Delay: '<S215>/mv_Delay'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 9; proc_control_B.i_m
             ++) {
          proc_control_B.Selector1_n[proc_control_B.i_m + 9 * proc_control_B.Ns]
            = proc_control_DW.mv_Delay_DSTATE[(11 * proc_control_B.Ns +
            static_cast<int32_T>
            (proc_control_P.Constant1_Value_i[proc_control_B.i_m])) - 1];
        }
      }

      // End of Selector: '<S215>/Selector1'

      // Delay: '<S215>/x_Delay' incorporates:
      //   Constant: '<S215>/ones'
      //   Product: '<S215>/Product1'

      if (proc_control_DW.icLoad_a) {
        // Product: '<S215>/Product1' incorporates:
        //   Reshape: '<S215>/reshape_x'

        proc_control_B.z_k[0] = proc_control_B.WorldPosition[0];
        proc_control_B.z_k[1] = proc_control_B.WorldPosition[1];
        proc_control_B.z_k[2] = proc_control_B.WorldPosition[2];
        proc_control_B.z_k[3] = proc_control_B.qS2W[0];
        proc_control_B.z_k[4] = proc_control_B.qS2W[1];
        proc_control_B.z_k[5] = proc_control_B.qS2W[2];
        proc_control_B.z_k[6] = proc_control_B.qS2W[3];
        proc_control_B.z_k[7] = proc_control_B.BodyVelocity[0];
        proc_control_B.z_k[10] = proc_control_B.AngularRate[0];
        proc_control_B.z_k[8] = proc_control_B.BodyVelocity[1];
        proc_control_B.z_k[11] = proc_control_B.AngularRate[1];
        proc_control_B.z_k[9] = proc_control_B.BodyVelocity[2];
        proc_control_B.z_k[12] = proc_control_B.AngularRate[2];
        proc_control_B.Ns = 0;
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 13; proc_control_B.i_m
             ++) {
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 11;
               proc_control_B.ibmat++) {
            proc_control_DW.x_Delay_DSTATE[proc_control_B.ibmat +
              proc_control_B.Ns] =
              proc_control_P.ones_Value[proc_control_B.ibmat] *
              proc_control_B.z_k[proc_control_B.i_m];
          }

          proc_control_B.Ns += 11;
        }
      }

      // Selector: '<S215>/Selector' incorporates:
      //   Constant: '<S215>/Constant'
      //   Delay: '<S215>/x_Delay'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 9; proc_control_B.i_m
             ++) {
          proc_control_B.Selector_p[proc_control_B.i_m + 9 * proc_control_B.Ns] =
            proc_control_DW.x_Delay_DSTATE[(11 * proc_control_B.Ns +
            static_cast<int32_T>
            (proc_control_P.Constant_Value_cr[proc_control_B.i_m])) - 1];
        }
      }

      // End of Selector: '<S215>/Selector'

      // Delay: '<S215>/slack_delay' incorporates:
      //   Constant: '<S213>/e.init_zero'

      if (proc_control_DW.icLoad_j) {
        proc_control_DW.slack_delay_DSTATE = proc_control_P.einit_zero_Value;
      }

      // MATLAB Function: '<S214>/NLMPC' incorporates:
      //   Delay: '<S145>/Delay'
      //   Delay: '<S215>/slack_delay'
      //   MATLABSystem: '<S139>/MPC manager'
      //   Merge generated from: '<S9>/Merge'
      //   Reshape: '<S214>/Reshape'
      //   Selector: '<S215>/Selector'
      //   Selector: '<S215>/Selector1'

      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 13; proc_control_B.i_m++)
      {
        proc_control_B.CostFcn_workspace_runtimedata.OutputWeights[proc_control_B.Ns]
          = proc_control_B.ywt[proc_control_B.i_m];
        proc_control_B.Ns += 10;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 13; proc_control_B.i_m++)
      {
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
             proc_control_B.ibmat++) {
          proc_control_B.CostFcn_workspace_runtimedata.OutputWeights
            [(proc_control_B.ibmat + proc_control_B.Ns) + 1] =
            proc_control_B.ywt[proc_control_B.i_m];
        }

        proc_control_B.Ns += 10;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m++)
      {
        proc_control_B.CostFcn_workspace_runtimedata.MVWeights[proc_control_B.Ns]
          = proc_control_B.mvwt[proc_control_B.i_m];
        proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[proc_control_B.Ns]
          = proc_control_B.dmwwt[proc_control_B.i_m];
        proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.Ns] =
          proc_control_B.mvmin[proc_control_B.i_m];
        proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.Ns] =
          proc_control_B.mvmax[proc_control_B.i_m];
        proc_control_B.Ns += 10;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m++)
      {
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
             proc_control_B.ibmat++) {
          proc_control_B.idx_k = (proc_control_B.ibmat + proc_control_B.Ns) + 1;
          proc_control_B.CostFcn_workspace_runtimedata.MVWeights[proc_control_B.idx_k]
            = proc_control_B.mvwt[proc_control_B.i_m];
          proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[proc_control_B.idx_k]
            = proc_control_B.dmwwt[proc_control_B.i_m];
          proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.idx_k]
            = proc_control_B.mvmin[proc_control_B.i_m];
          proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.idx_k]
            = proc_control_B.mvmax[proc_control_B.i_m];
        }

        proc_control_B.Ns += 10;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 80; proc_control_B.Ns++) {
        proc_control_B.b_utarget[proc_control_B.Ns] = (rtMinusInf);
        proc_control_B.dv14[proc_control_B.Ns] = (rtInf);
      }

      proc_control_znlmpc_getUBounds(proc_control_DW.Delay_DSTATE_a,
        proc_control_B.CostFcn_workspace_runtimedata.MVMin,
        proc_control_B.CostFcn_workspace_runtimedata.MVMax,
        proc_control_B.b_utarget, proc_control_B.dv14, proc_control_B.A_data,
        proc_control_B.k_size, proc_control_B.B_data_h, &proc_control_B.e_size);
      std::memcpy(&proc_control_B.CostFcn_workspace_runtimedata.lastMV[0],
                  &proc_control_DW.Delay_DSTATE_a[0], sizeof(real_T) << 3U);
      proc_control_B.CostFcn_workspace_runtimedata.ECRWeight = 100000.0;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 130; proc_control_B.Ns++)
      {
        proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.Ns] =
          proc_control_B.Reference[proc_control_B.Ns];
        proc_control_B.CostFcn_workspace_runtimedata.OutputMin[proc_control_B.Ns]
          = d[proc_control_B.Ns];
        proc_control_B.CostFcn_workspace_runtimedata.OutputMax[proc_control_B.Ns]
          = f[proc_control_B.Ns];
        proc_control_B.CostFcn_workspace_runtimedata.StateMin[proc_control_B.Ns]
          = (rtMinusInf);
        proc_control_B.CostFcn_workspace_runtimedata.StateMax[proc_control_B.Ns]
          = (rtInf);
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 80; proc_control_B.Ns++) {
        proc_control_B.CostFcn_workspace_runtimedata.MVRateMin[proc_control_B.Ns]
          = (rtMinusInf);
        proc_control_B.CostFcn_workspace_runtimedata.MVRateMax[proc_control_B.Ns]
          = (rtInf);
        proc_control_B.CostFcn_workspace_runtimedata.MVScaledTarget[proc_control_B.Ns]
          = 0.0;
      }

      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.x[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.x[0], 13U *
                  sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.lastMV[0],
                  &proc_control_DW.Delay_DSTATE_a[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.ref[0],
                  &proc_control_B.Reference[0], 130U * sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.OutputWeights[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.OutputWeights[0],
                  130U * sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.MVWeights[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.MVWeights[0],
                  80U * sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.MVRateWeights[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[0],
                  80U * sizeof(real_T));
      proc_control_B.ConFcn_workspace_runtimedata.ECRWeight = 100000.0;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 130; proc_control_B.Ns++)
      {
        proc_control_B.ConFcn_workspace_runtimedata.OutputMin[proc_control_B.Ns]
          = d[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.OutputMax[proc_control_B.Ns]
          = f[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.StateMin[proc_control_B.Ns] =
          (rtMinusInf);
        proc_control_B.ConFcn_workspace_runtimedata.StateMax[proc_control_B.Ns] =
          (rtInf);
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 80; proc_control_B.Ns++) {
        proc_control_B.ConFcn_workspace_runtimedata.MVMin[proc_control_B.Ns] =
          proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.MVMax[proc_control_B.Ns] =
          proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.MVRateMin[proc_control_B.Ns]
          = (rtMinusInf);
        proc_control_B.ConFcn_workspace_runtimedata.MVRateMax[proc_control_B.Ns]
          = (rtInf);
        proc_control_B.ConFcn_workspace_runtimedata.MVScaledTarget[proc_control_B.Ns]
          = 0.0;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.expl_temp.MVIndex[proc_control_B.Ns] = static_cast<real_T>
          (proc_control_B.Ns) + 1.0;
      }

      proc_control_B.expl_temp.NumOfInputs = 8.0;
      proc_control_B.expl_temp.NumOfOutputs = 13.0;
      proc_control_B.expl_temp.NumOfStates = 13.0;
      proc_control_B.expl_temp.PredictionHorizon = 10.0;
      std::memset(&proc_control_B.expl_temp.MVTarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_B.expl_temp.References[0],
                  &proc_control_B.Reference[0], 130U * sizeof(real_T));
      std::memcpy(&proc_control_B.expl_temp.LastMV[0],
                  &proc_control_DW.Delay_DSTATE_a[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.expl_temp.CurrentStates[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.x[0], 13U *
                  sizeof(real_T));
      proc_control_B.expl_temp.Ts = 0.1;
      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 9; proc_control_B.i_m++)
      {
        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_k = 0; proc_control_B.idx_k < 13;
             proc_control_B.idx_k++) {
          proc_control_B.y_j[proc_control_B.idx_k + proc_control_B.Ns] =
            proc_control_B.Selector_p[proc_control_B.ibmat + proc_control_B.i_m];
          proc_control_B.ibmat += 9;
        }

        proc_control_B.Ns += 13;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 13; proc_control_B.i_m++)
      {
        proc_control_B.y_j[proc_control_B.i_m + 117] =
          proc_control_B.Selector_p[proc_control_B.Ns + 8];
        proc_control_B.Ns += 9;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m++)
      {
        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_k = 0; proc_control_B.idx_k < 9;
             proc_control_B.idx_k++) {
          proc_control_B.b_utarget[proc_control_B.ibmat + proc_control_B.i_m] =
            proc_control_B.Selector1_n[proc_control_B.idx_k + proc_control_B.Ns];
          proc_control_B.ibmat += 8;
        }

        proc_control_B.Ns += 9;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m++)
      {
        proc_control_B.b_utarget[proc_control_B.i_m + 72] =
          proc_control_B.Selector1_n[proc_control_B.Ns + 8];
        proc_control_B.Ns += 9;
      }

      std::memset(&proc_control_B.coefsWithFlatStart[0], 0, 24U * sizeof(real_T));
      proc_control_B.i_m = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 80;
           proc_control_B.ibmat++) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 24; proc_control_B.Ns++)
        {
          proc_control_B.coefsWithFlatStart[proc_control_B.Ns] +=
            static_cast<real_T>(a[proc_control_B.Ns + proc_control_B.i_m]) *
            proc_control_B.b_utarget[proc_control_B.ibmat];
        }

        proc_control_B.i_m += 24;
      }

      std::memset(&proc_control_B.b_utarget[0], 0, 80U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv25[proc_control_B.Ns] = static_cast<real_T>
          (proc_control_B.Ns) + 1.0;
      }

      std::memcpy(&proc_control_B.rtb_Selector_o[0], &proc_control_B.y_j[0],
                  130U * sizeof(real_T));
      std::memcpy(&proc_control_B.rtb_Selector_o[130],
                  &proc_control_B.coefsWithFlatStart[0], 24U * sizeof(real_T));
      proc_control_B.rtb_Selector_o[154] = proc_control_DW.slack_delay_DSTATE;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 130; proc_control_B.Ns++)
      {
        proc_control_B.dv13[proc_control_B.Ns] = (rtMinusInf);
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 24; proc_control_B.Ns++) {
        proc_control_B.dv13[proc_control_B.Ns + 130] = (rtMinusInf);
      }

      proc_control_B.dv13[154] = 0.0;
      proc_control_fmincon(&proc_control_B.CostFcn_workspace_runtimedata, 0.1,
                           proc_control_B.CostFcn_workspace_runtimedata.x,
                           proc_control_DW.Delay_DSTATE_a,
                           proc_control_B.Reference, proc_control_B.b_utarget,
                           10.0, 13.0, 13.0, 8.0, proc_control_B.dv25,
                           proc_control_B.rtb_Selector_o, proc_control_B.A_data,
                           proc_control_B.B_data_h, &proc_control_B.e_size,
                           proc_control_B.dv13,
                           &proc_control_B.ConFcn_workspace_runtimedata,
                           &proc_control_B.expl_temp, proc_control_B.z,
                           &proc_control_B.d, &proc_control_B.t63,
                           &proc_control_B.Divide_p, &proc_control_B.Divide1_k,
                           expl_temp, &proc_control_B.Divide2_c,
                           &proc_control_B.Divide3_m, &proc_control_B.t15,
                           &proc_control_B.t16);
      if ((proc_control_B.t63 == 0.0) && (proc_control_B.Divide2_c > 0.02)) {
        proc_control_B.t63 = -2.0;
      }

      // Update for Delay: '<S215>/slack_delay' incorporates:
      //   MATLAB Function: '<S214>/NLMPC'
      //   Reshape: '<S214>/Reshape'

      proc_control_znlmpc_getXUe(proc_control_B.z,
        proc_control_B.CostFcn_workspace_runtimedata.x, proc_control_B.Dv,
        proc_control_B.useq_a, &proc_control_DW.slack_delay_DSTATE);

      // MATLAB Function: '<S214>/NLMPC' incorporates:
      //   Delay: '<S145>/Delay'

      if (proc_control_B.t63 > 0.0) {
        proc_control_B.Ns = 0;
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m
             ++) {
          proc_control_B.u_scale[proc_control_B.i_m] =
            proc_control_B.useq_a[proc_control_B.Ns];
          proc_control_B.Ns += 11;
        }
      } else {
        std::memcpy(&proc_control_B.u_scale[0], &proc_control_DW.Delay_DSTATE_a
                    [0], sizeof(real_T) << 3U);
      }

      // Merge generated from: '<S138>/Merge' incorporates:
      //   MATLAB Function: '<S214>/NLMPC'
      //   SignalConversion generated from: '<S145>/out'

      proc_control_B.MpcStatus = proc_control_B.t63;

      // Merge generated from: '<S138>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S145>/Pulse Generator'

      proc_control_B.alive = (proc_control_DW.clockTickCounter <
        proc_control_P.PulseGenerator_Duty_f) &&
        (proc_control_DW.clockTickCounter >= 0) ?
        proc_control_P.PulseGenerator_Amp_p : 0.0;

      // DiscretePulseGenerator: '<S145>/Pulse Generator'
      if (proc_control_DW.clockTickCounter >=
          proc_control_P.PulseGenerator_Period_e5 - 1.0) {
        proc_control_DW.clockTickCounter = 0;
      } else {
        proc_control_DW.clockTickCounter++;
      }

      for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m++)
      {
        proc_control_B.t65 = proc_control_B.u_scale[proc_control_B.i_m];

        // Merge generated from: '<S138>/Merge' incorporates:
        //   SignalConversion generated from: '<S145>/out'

        proc_control_B.mv[proc_control_B.i_m] = proc_control_B.t65;

        // Update for Delay: '<S145>/Delay' incorporates:
        //   Merge generated from: '<S138>/Merge'
        //   SignalConversion generated from: '<S145>/out'

        proc_control_DW.Delay_DSTATE_a[proc_control_B.i_m] = proc_control_B.t65;
      }

      // Update for Delay: '<S215>/mv_Delay' incorporates:
      //   MATLAB Function: '<S214>/NLMPC'
      //   Merge generated from: '<S138>/Merge'
      //   SignalConversion generated from: '<S145>/out'

      proc_control_DW.icLoad = false;
      std::memcpy(&proc_control_DW.mv_Delay_DSTATE[0], &proc_control_B.useq_a[0],
                  88U * sizeof(real_T));

      // Update for Delay: '<S215>/x_Delay' incorporates:
      //   MATLAB Function: '<S214>/NLMPC'

      proc_control_DW.icLoad_a = false;
      std::memcpy(&proc_control_DW.x_Delay_DSTATE[0], &proc_control_B.Dv[0],
                  143U * sizeof(real_T));

      // Update for Delay: '<S215>/slack_delay'
      proc_control_DW.icLoad_j = false;

      // End of Outputs for SubSystem: '<S138>/Quaternion Non linear MPC (Not for codegen)' 
      break;

     default:
      // Outputs for IfAction SubSystem: '<S138>/IDLE' incorporates:
      //   ActionPort: '<S142>/Action Port'

      // Merge generated from: '<S138>/Merge' incorporates:
      //   Constant: '<S142>/Constant1'
      //   SignalConversion generated from: '<S142>/Constant1'

      std::memcpy(&proc_control_B.mv[0], &proc_control_P.Constant1_Value_n[0],
                  sizeof(real_T) << 3U);

      // Merge generated from: '<S138>/Merge' incorporates:
      //   Constant: '<S142>/Constant2'
      //   SignalConversion generated from: '<S142>/Constant2'

      proc_control_B.alive = proc_control_P.Constant2_Value_p;

      // Merge generated from: '<S138>/Merge' incorporates:
      //   Constant: '<S142>/Constant'
      //   SignalConversion generated from: '<S142>/Constant'

      proc_control_B.MpcStatus = proc_control_P.Constant_Value_mg;

      // End of Outputs for SubSystem: '<S138>/IDLE'
      break;
    }

    // Sum: '<S140>/Sum' incorporates:
    //   Delay: '<S140>/Delay'

    proc_control_B.d = proc_control_DW.Delay_DSTATE_k - proc_control_B.alive;

    // Saturate: '<S140>/PSU safe'
    for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m++) {
      // Math: '<S140>/Transpose'
      proc_control_B.Divide_p = proc_control_B.mv[proc_control_B.i_m];
      if (proc_control_B.Divide_p > proc_control_P.PSUsafe_UpperSat) {
        proc_control_B.u_scale[proc_control_B.i_m] =
          proc_control_P.PSUsafe_UpperSat;
      } else if (proc_control_B.Divide_p < proc_control_P.PSUsafe_LowerSat) {
        proc_control_B.u_scale[proc_control_B.i_m] =
          proc_control_P.PSUsafe_LowerSat;
      } else {
        proc_control_B.u_scale[proc_control_B.i_m] = proc_control_B.Divide_p;
      }
    }

    // End of Saturate: '<S140>/PSU safe'

    // Lookup_n-D: '<S140>/N to A' incorporates:
    //   Saturate: '<S140>/PSU safe'

    for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 8;
         proc_control_B.idx_m++) {
      proc_control_B.bpIdx = plook_u32d_binckpang
        (proc_control_B.u_scale[proc_control_B.idx_m], proc_control_P.N, 200U,
         &proc_control_DW.m_bpIndex[proc_control_B.idx_m]);
      proc_control_B.current[proc_control_B.idx_m] =
        proc_control_P.A[proc_control_B.bpIdx];
    }

    // Lookup_n-D: '<S140>/N to PWM' incorporates:
    //   Saturate: '<S140>/PSU safe'

    for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 8;
         proc_control_B.idx_m++) {
      proc_control_B.bpIdx = plook_u32d_binckpang
        (proc_control_B.u_scale[proc_control_B.idx_m], proc_control_P.N, 200U,
         &proc_control_DW.m_bpIndex_c[proc_control_B.idx_m]);
      proc_control_B.pwm[proc_control_B.idx_m] =
        proc_control_P.PWM[proc_control_B.bpIdx];
    }

    // Update for Delay: '<S7>/Delay' incorporates:
    //   Lookup_n-D: '<S140>/N to A'

    for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m++) {
      proc_control_DW.Delay_DSTATE_g[proc_control_B.i_m] =
        proc_control_B.current[proc_control_B.i_m];
    }

    // End of Update for Delay: '<S7>/Delay'

    // Update for Delay: '<S140>/Delay'
    proc_control_DW.Delay_DSTATE_k = proc_control_B.alive;

    // End of Outputs for SubSystem: '<Root>/Subsystem Controller'

    // Outputs for Enabled SubSystem: '<Root>/Send Data to ROS' incorporates:
    //   EnablePort: '<S5>/Enable'

    if (proc_control_B.MATLABSystem_o7 > 0.0) {
      if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
        // MATLAB Function: '<S5>/MATLAB Function3' incorporates:
        //   Constant: '<S107>/Constant'
        //   Lookup_n-D: '<S140>/N to PWM'

        proc_control_B.msg_h = proc_control_P.Constant_Value_c;
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m
             ++) {
          proc_control_B.msg_h.Data[proc_control_B.i_m] =
            proc_control_B.pwm[proc_control_B.i_m];
        }

        proc_control_B.msg_h.Data_SL_Info.CurrentLength = 8U;

        // End of MATLAB Function: '<S5>/MATLAB Function3'

        // Outputs for Atomic SubSystem: '<S5>/Publish2'
        // MATLABSystem: '<S109>/SinkBlock'
        Pub_proc_control_104.publish(&proc_control_B.msg_h);

        // End of Outputs for SubSystem: '<S5>/Publish2'
      }

      if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
        // Outputs for Atomic SubSystem: '<S5>/Subsystem'
        // MATLAB Function: '<S110>/MATLAB Function' incorporates:
        //   Constant: '<S110>/Constant'
        //   Constant: '<S110>/Constant1'
        //   Constant: '<S111>/Constant'
        //   DataTypeConversion: '<S140>/Data Type Conversion3'
        //   MATLABSystem: '<S139>/MPC manager'

        proc_control_B.msg_c = proc_control_P.Constant_Value_o;
        proc_control_B.msg_c.TargetReached = proc_control_B.isReached;
        proc_control_B.msg_c.IsTrajectoryDone = proc_control_B.isTrajDone;
        proc_control_B.msg_c.MpcMode = proc_control_B.DataTypeConversion_j;

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        proc_control_B.msg_c.IsMpcAlive = (proc_control_B.d != 0.0);

        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        if (proc_control_P.Constant1_Value_d < 1.0) {
          proc_control_B.Ns = -1;
        } else {
          proc_control_B.Ns = static_cast<int32_T>
            (proc_control_P.Constant1_Value_d) - 1;
        }

        proc_control_B.idx_m = proc_control_B.Ns + 1;
        if (proc_control_B.idx_m - 1 >= 0) {
          std::memcpy(&proc_control_B.msg_c.ThrustersStatus[0],
                      &proc_control_B.thrustersStatus[0], proc_control_B.idx_m *
                      sizeof(boolean_T));
        }

        proc_control_B.rtb_u2_f = std::round(proc_control_P.Constant1_Value_d);
        if (proc_control_B.rtb_u2_f < 4.294967296E+9) {
          if (proc_control_B.rtb_u2_f >= 0.0) {
            proc_control_B.msg_c.ThrustersStatus_SL_Info.CurrentLength =
              static_cast<uint32_T>(proc_control_B.rtb_u2_f);
          } else {
            proc_control_B.msg_c.ThrustersStatus_SL_Info.CurrentLength = 0U;
          }
        } else {
          proc_control_B.msg_c.ThrustersStatus_SL_Info.CurrentLength =
            MAX_uint32_T;
        }

        proc_control_B.AngularRate_a_idx_1 = std::round(proc_control_B.MpcStatus);
        if (proc_control_B.AngularRate_a_idx_1 < 128.0) {
          if (proc_control_B.AngularRate_a_idx_1 >= -128.0) {
            proc_control_B.msg_c.MpcStatus = static_cast<int8_T>
              (proc_control_B.AngularRate_a_idx_1);
          } else {
            proc_control_B.msg_c.MpcStatus = MIN_int8_T;
          }
        } else {
          proc_control_B.msg_c.MpcStatus = MAX_int8_T;
        }

        if (proc_control_P.Constant_Value_lo < 1.0) {
          proc_control_B.Ns = -1;
        } else {
          proc_control_B.Ns = static_cast<int32_T>
            (proc_control_P.Constant_Value_lo) - 1;
        }

        proc_control_B.idx_m = proc_control_B.Ns + 1;
        if (proc_control_B.idx_m - 1 >= 0) {
          std::memcpy(&proc_control_B.msg_c.CurrentGains.OV[0],
                      &proc_control_B.ywt[0], proc_control_B.idx_m * sizeof
                      (real_T));
        }

        proc_control_B.AngularRate_a_idx_1 = std::round
          (proc_control_P.Constant_Value_lo);
        if (proc_control_B.AngularRate_a_idx_1 < 4.294967296E+9) {
          if (proc_control_B.AngularRate_a_idx_1 >= 0.0) {
            proc_control_B.msg_c.CurrentGains.OV_SL_Info.CurrentLength =
              static_cast<uint32_T>(proc_control_B.AngularRate_a_idx_1);
          } else {
            proc_control_B.msg_c.CurrentGains.OV_SL_Info.CurrentLength = 0U;
          }
        } else {
          proc_control_B.msg_c.CurrentGains.OV_SL_Info.CurrentLength =
            MAX_uint32_T;
        }

        if (proc_control_P.Constant1_Value_d < 1.0) {
          proc_control_B.Ns = -1;
        } else {
          proc_control_B.Ns = static_cast<int32_T>
            (proc_control_P.Constant1_Value_d) - 1;
        }

        proc_control_B.idx_m = proc_control_B.Ns + 1;
        if (proc_control_B.idx_m - 1 >= 0) {
          std::memcpy(&proc_control_B.msg_c.CurrentGains.MV[0],
                      &proc_control_B.mvwt[0], proc_control_B.idx_m * sizeof
                      (real_T));
        }

        if (proc_control_B.rtb_u2_f < 4.294967296E+9) {
          if (proc_control_B.rtb_u2_f >= 0.0) {
            proc_control_B.msg_c.CurrentGains.MV_SL_Info.CurrentLength =
              static_cast<uint32_T>(proc_control_B.rtb_u2_f);
          } else {
            proc_control_B.msg_c.CurrentGains.MV_SL_Info.CurrentLength = 0U;
          }
        } else {
          proc_control_B.msg_c.CurrentGains.MV_SL_Info.CurrentLength =
            MAX_uint32_T;
        }

        if (proc_control_P.Constant1_Value_d < 1.0) {
          proc_control_B.Ns = -1;
        } else {
          proc_control_B.Ns = static_cast<int32_T>
            (proc_control_P.Constant1_Value_d) - 1;
        }

        proc_control_B.idx_m = proc_control_B.Ns + 1;
        if (proc_control_B.idx_m - 1 >= 0) {
          std::memcpy(&proc_control_B.msg_c.CurrentGains.MVR[0],
                      &proc_control_B.dmwwt[0], proc_control_B.idx_m * sizeof
                      (real_T));
        }

        if (proc_control_B.rtb_u2_f < 4.294967296E+9) {
          if (proc_control_B.rtb_u2_f >= 0.0) {
            proc_control_B.msg_c.CurrentGains.MVR_SL_Info.CurrentLength =
              static_cast<uint32_T>(proc_control_B.rtb_u2_f);
          } else {
            proc_control_B.msg_c.CurrentGains.MVR_SL_Info.CurrentLength = 0U;
          }
        } else {
          proc_control_B.msg_c.CurrentGains.MVR_SL_Info.CurrentLength =
            MAX_uint32_T;
        }

        // End of MATLAB Function: '<S110>/MATLAB Function'

        // Outputs for Atomic SubSystem: '<S110>/Publish5'
        // MATLABSystem: '<S113>/SinkBlock'
        Pub_proc_control_287.publish(&proc_control_B.msg_c);

        // End of Outputs for SubSystem: '<S110>/Publish5'
        // End of Outputs for SubSystem: '<S5>/Subsystem'
      }

      if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
        // SignalConversion generated from: '<S5>/thrust' incorporates:
        //   Saturate: '<S140>/PSU safe'
        //   SignalConversion generated from: '<S5>/mv'

        std::memcpy(&proc_control_B.BufferToMakeInportVirtual_Inser[0],
                    &proc_control_B.u_scale[0], sizeof(real_T) << 3U);
        for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m
             ++) {
          // SignalConversion generated from: '<S5>/mv' incorporates:
          //   Lookup_n-D: '<S140>/N to PWM'

          proc_control_B.BufferToMakeInportVirtual_Ins_e[proc_control_B.i_m] =
            proc_control_B.pwm[proc_control_B.i_m];
        }
      }
    }

    // End of Outputs for SubSystem: '<Root>/Send Data to ROS'

    // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
    //   EnablePort: '<S1>/Enable'

    proc_control_DW.ModlePhysique_MODE = (proc_control_B.MATLABSystem_o3 > 0.0);

    // End of Outputs for SubSystem: '<Root>/Modèle Physique'
  }

  // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
  //   EnablePort: '<S1>/Enable'

  if (proc_control_DW.ModlePhysique_MODE) {
    if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
      // MATLAB Function: '<S11>/MATLAB Function1' incorporates:
      //   SignalConversion generated from: '<S5>/mv'

      for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m++)
      {
        proc_control_B.current[proc_control_B.i_m] =
          proc_control_B.BufferToMakeInportVirtual_Ins_e[proc_control_B.i_m];
      }

      if (proc_control_B.BufferToMakeInportVirtual_Ins_e[0] < 1100) {
        proc_control_B.current[0] = 1500U;
      } else if (proc_control_B.BufferToMakeInportVirtual_Ins_e[0] > 1900) {
        proc_control_B.current[0] = 1500U;
      }

      // End of MATLAB Function: '<S11>/MATLAB Function1'

      // Lookup_n-D: '<S11>/ PWM to N'
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 8;
           proc_control_B.idx_m++) {
        proc_control_B.bpIdx = plook_u32u16_binckpan
          (proc_control_B.current[proc_control_B.idx_m], proc_control_P.PWM,
           200U, &proc_control_DW.m_bpIndex_m[proc_control_B.idx_m]);
        proc_control_B.PWMtoN[proc_control_B.idx_m] =
          proc_control_P.N[proc_control_B.bpIdx];
      }
    }

    // DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
    proc_control_B.MATLABSystem_o7 = (proc_control_B.PWMtoN[0] -
      proc_control_P.DiscreteTransferFcn1_DenCoef[1] *
      proc_control_DW.DiscreteTransferFcn1_states) /
      proc_control_P.DiscreteTransferFcn1_DenCoef[0];

    // DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
    proc_control_B.oc = (proc_control_B.PWMtoN[1] -
                         proc_control_P.DiscreteTransferFcn1_DenCoef_n[1] *
                         proc_control_DW.DiscreteTransferFcn1_states_k) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_n[0];

    // DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
    proc_control_B.od = (proc_control_B.PWMtoN[2] -
                         proc_control_P.DiscreteTransferFcn1_DenCoef_m[1] *
                         proc_control_DW.DiscreteTransferFcn1_states_o) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_m[0];

    // DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
    proc_control_B.t4 = (proc_control_B.PWMtoN[3] -
                         proc_control_P.DiscreteTransferFcn1_DenCoef_b[1] *
                         proc_control_DW.DiscreteTransferFcn1_states_i) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_b[0];

    // DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
    proc_control_B.t24 = (proc_control_B.PWMtoN[4] -
                          proc_control_P.DiscreteTransferFcn1_DenCoef_l[1] *
                          proc_control_DW.DiscreteTransferFcn1_states_g) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_l[0];

    // DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
    proc_control_B.t26 = (proc_control_B.PWMtoN[5] -
                          proc_control_P.DiscreteTransferFcn1_DenCoef_l0[1] *
                          proc_control_DW.DiscreteTransferFcn1_states_h) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_l0[0];

    // DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
    proc_control_B.t27 = (proc_control_B.PWMtoN[6] -
                          proc_control_P.DiscreteTransferFcn1_DenCoef_a[1] *
                          proc_control_DW.DiscreteTransferFcn1_states_l) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_a[0];

    // DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
    proc_control_B.t29 = (proc_control_B.PWMtoN[7] -
                          proc_control_P.DiscreteTransferFcn1_DenCoef_g[1] *
                          proc_control_DW.DiscreteTransferFcn1_states_ge) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_g[0];

    // SignalConversion generated from: '<S1>/MATLAB System' incorporates:
    //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'

    proc_control_B.u_scale[0] = proc_control_P.DiscreteTransferFcn1_NumCoef[0] *
      proc_control_B.MATLABSystem_o7 +
      proc_control_P.DiscreteTransferFcn1_NumCoef[1] *
      proc_control_DW.DiscreteTransferFcn1_states;
    proc_control_B.u_scale[1] = proc_control_P.DiscreteTransferFcn1_NumCoef_k[0]
      * proc_control_B.oc + proc_control_P.DiscreteTransferFcn1_NumCoef_k[1] *
      proc_control_DW.DiscreteTransferFcn1_states_k;
    proc_control_B.u_scale[2] = proc_control_P.DiscreteTransferFcn1_NumCoef_n[0]
      * proc_control_B.od + proc_control_P.DiscreteTransferFcn1_NumCoef_n[1] *
      proc_control_DW.DiscreteTransferFcn1_states_o;
    proc_control_B.u_scale[3] = proc_control_P.DiscreteTransferFcn1_NumCoef_e[0]
      * proc_control_B.t4 + proc_control_P.DiscreteTransferFcn1_NumCoef_e[1] *
      proc_control_DW.DiscreteTransferFcn1_states_i;
    proc_control_B.u_scale[4] = proc_control_P.DiscreteTransferFcn1_NumCoef_b[0]
      * proc_control_B.t24 + proc_control_P.DiscreteTransferFcn1_NumCoef_b[1] *
      proc_control_DW.DiscreteTransferFcn1_states_g;
    proc_control_B.u_scale[5] = proc_control_P.DiscreteTransferFcn1_NumCoef_i[0]
      * proc_control_B.t26 + proc_control_P.DiscreteTransferFcn1_NumCoef_i[1] *
      proc_control_DW.DiscreteTransferFcn1_states_h;
    proc_control_B.u_scale[6] = proc_control_P.DiscreteTransferFcn1_NumCoef_c[0]
      * proc_control_B.t27 + proc_control_P.DiscreteTransferFcn1_NumCoef_c[1] *
      proc_control_DW.DiscreteTransferFcn1_states_l;
    proc_control_B.u_scale[7] = proc_control_P.DiscreteTransferFcn1_NumCoef_m[0]
      * proc_control_B.t29 + proc_control_P.DiscreteTransferFcn1_NumCoef_m[1] *
      proc_control_DW.DiscreteTransferFcn1_states_ge;
    if ((&proc_control_M)->Timing.TaskCounters.TID[5] == 0) {
      // UniformRandomNumber: '<S12>/ Drift' incorporates:
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S140>/N to A'
      //   Lookup_n-D: '<S140>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   Trigonometry: '<S271>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 6;
           proc_control_B.idx_m++) {
        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S242>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_B.Drift[proc_control_B.idx_m] =
          proc_control_DW.Drift_NextOutput[proc_control_B.idx_m];

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      }
    }

    // Switch: '<S12>/Switch' incorporates:
    //   Constant: '<Root>/Constant'
    //   Constant: '<S12>/Constant2'
    //   Product: '<S12>/Product1'
    //   Sin: '<S12>/Sine Wave'
    //   Sum: '<S12>/Sum2'

    if (proc_control_P.Constant_Value_de >= proc_control_P.Switch_Threshold) {
      // Sum: '<S12>/Add' incorporates:
      //   Constant: '<S12>/Constant'
      //   Constant: '<S12>/Constant1'
      //   Product: '<S12>/Product'
      //   UnitDelay: '<S1>/Unit Delay'

      proc_control_B.t60 = proc_control_DW.UnitDelay_DSTATE_o[2] *
        proc_control_P.Constant_Value_h0 + proc_control_P.Constant1_Value;

      // Saturate: '<S12>/Saturation'
      if (proc_control_B.t60 > proc_control_P.Saturation_UpperSat) {
        proc_control_B.t60 = proc_control_P.Saturation_UpperSat;
      } else if (proc_control_B.t60 < proc_control_P.Saturation_LowerSat) {
        proc_control_B.t60 = proc_control_P.Saturation_LowerSat;
      }

      // End of Saturate: '<S12>/Saturation'
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 6; proc_control_B.i_m++)
      {
        proc_control_B.TSamp[proc_control_B.i_m] = (std::sin((static_cast<real_T>
          (proc_control_DW.counter[proc_control_B.i_m]) +
          proc_control_P.SineWave_Offset[proc_control_B.i_m]) * 2.0 *
          3.1415926535897931 /
          proc_control_P.waveDiscreteFrequency[proc_control_B.i_m]) *
          proc_control_P.SineWave_Amp[proc_control_B.i_m] +
          proc_control_P.SineWave_Bias) * proc_control_B.t60 +
          proc_control_B.Drift[proc_control_B.i_m];
      }
    } else {
      for (proc_control_B.i_m = 0; proc_control_B.i_m < 6; proc_control_B.i_m++)
      {
        proc_control_B.TSamp[proc_control_B.i_m] =
          proc_control_P.Constant2_Value[proc_control_B.i_m];
      }
    }

    // End of Switch: '<S12>/Switch'

    // MATLABSystem: '<S1>/MATLAB System' incorporates:
    //   UnitDelay: '<S1>/Unit Delay'

    //  Implement algorithm. Calculate y as a function of input u and
    //  discrete states.
    proc_co_AUV8QuatPerturbedSimFcn(proc_control_DW.UnitDelay_DSTATE_o,
      proc_control_B.TSamp, proc_control_B.u_scale, proc_control_B.K_j);

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'
    //   MATLABSystem: '<S1>/MATLAB System'

    if (proc_control_DW.DiscreteTimeIntegrator_IC_LOADI != 0) {
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[0] =
        proc_control_B.MATLABSystem_o2[0];
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[1] =
        proc_control_B.MATLABSystem_o2[1];
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[2] =
        proc_control_B.MATLABSystem_o2[2];
    }

    if ((proc_control_B.MATLABSystem_o4 > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator_PrevRese <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[0] =
        proc_control_B.MATLABSystem_o2[0];
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[1] =
        proc_control_B.MATLABSystem_o2[1];
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[2] =
        proc_control_B.MATLABSystem_o2[2];
    }

    proc_control_B.rtb_u2_f = proc_control_P.DiscreteTimeIntegrator_gainval *
      proc_control_B.K_j[0];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_B.WorldPosition_n[0] =
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[0] +
      proc_control_B.rtb_u2_f;
    proc_control_B.u2[0] = proc_control_B.rtb_u2_f;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.rtb_u2_f = proc_control_P.DiscreteTimeIntegrator_gainval *
      proc_control_B.K_j[1];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_B.WorldPosition_n[1] =
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[1] +
      proc_control_B.rtb_u2_f;
    proc_control_B.u2[1] = proc_control_B.rtb_u2_f;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.rtb_u2_f = proc_control_P.DiscreteTimeIntegrator_gainval *
      proc_control_B.K_j[2];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_B.WorldPosition_n[2] =
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[2] +
      proc_control_B.rtb_u2_f;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   Constant: '<S1>/Initial Angular Rates'
    //   MATLABSystem: '<S1>/MATLAB System'

    if ((proc_control_B.MATLABSystem_o4 > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator1_PrevRes <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] =
        proc_control_P.InitialAngularRates_Value[0];
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] =
        proc_control_P.InitialAngularRates_Value[1];
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] =
        proc_control_P.InitialAngularRates_Value[2];
    }

    proc_control_B.t58 = proc_control_P.DiscreteTimeIntegrator1_gainval *
      proc_control_B.K_j[10];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'
    proc_control_B.t62 = proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] +
      proc_control_B.t58;
    proc_control_B.c_f[0] = proc_control_B.t58;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t58 = proc_control_P.DiscreteTimeIntegrator1_gainval *
      proc_control_B.K_j[11];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'
    proc_control_B.AngularRate_a_idx_1 =
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] + proc_control_B.t58;
    proc_control_B.c_f[1] = proc_control_B.t58;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t58 = proc_control_P.DiscreteTimeIntegrator1_gainval *
      proc_control_B.K_j[12];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'
    proc_control_B.t39 = proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] +
      proc_control_B.t58;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'
    //   MATLABSystem: '<S1>/MATLAB System'

    if (proc_control_DW.DiscreteTimeIntegrator2_IC_LOAD != 0) {
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] =
        proc_control_B.MATLABSystem_o1[0];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] =
        proc_control_B.MATLABSystem_o1[1];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] =
        proc_control_B.MATLABSystem_o1[2];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[3] =
        proc_control_B.MATLABSystem_o1[3];
    }

    if ((proc_control_B.MATLABSystem_o4 > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator2_PrevRes <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] =
        proc_control_B.MATLABSystem_o1[0];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] =
        proc_control_B.MATLABSystem_o1[1];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] =
        proc_control_B.MATLABSystem_o1[2];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[3] =
        proc_control_B.MATLABSystem_o1[3];
    }

    proc_control_B.t40 = proc_control_P.DiscreteTimeIntegrator2_gainval *
      proc_control_B.K_j[3];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_B.y_d_a[0] = proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0]
      + proc_control_B.t40;
    proc_control_B.n[0] = proc_control_B.t40;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t40 = proc_control_P.DiscreteTimeIntegrator2_gainval *
      proc_control_B.K_j[4];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_B.y_d_a[1] = proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1]
      + proc_control_B.t40;
    proc_control_B.n[1] = proc_control_B.t40;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t40 = proc_control_P.DiscreteTimeIntegrator2_gainval *
      proc_control_B.K_j[5];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_B.y_d_a[2] = proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2]
      + proc_control_B.t40;
    proc_control_B.n[2] = proc_control_B.t40;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t40 = proc_control_P.DiscreteTimeIntegrator2_gainval *
      proc_control_B.K_j[6];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_B.y_d_a[3] = proc_control_DW.DiscreteTimeIntegrator2_DSTATE[3]
      + proc_control_B.t40;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S1>/Initial Body velocity '
    //   MATLABSystem: '<S1>/MATLAB System'

    if ((proc_control_B.MATLABSystem_o4 > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator3_PrevRes <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] =
        proc_control_P.InitialBodyvelocity_Value[0];
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] =
        proc_control_P.InitialBodyvelocity_Value[1];
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] =
        proc_control_P.InitialBodyvelocity_Value[2];
    }

    proc_control_B.t41 = proc_control_P.DiscreteTimeIntegrator3_gainval *
      proc_control_B.K_j[7];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3'
    proc_control_B.t43 = proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] +
      proc_control_B.t41;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t44 = proc_control_B.t41;
    proc_control_B.t41 = proc_control_P.DiscreteTimeIntegrator3_gainval *
      proc_control_B.K_j[8];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3'
    proc_control_B.t45 = proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] +
      proc_control_B.t41;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t35_tmp = proc_control_B.t41;
    proc_control_B.t41 = proc_control_P.DiscreteTimeIntegrator3_gainval *
      proc_control_B.K_j[9];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3'
    proc_control_B.BodyVelocity_c_idx_2 =
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] + proc_control_B.t41;

    // Lookup_n-D: '<S16>/N to RPM'
    for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 8;
         proc_control_B.idx_m++) {
      proc_control_B.bpIdx = plook_u32d_binckpan
        (proc_control_B.u_scale[proc_control_B.idx_m], proc_control_P.N, 200U,
         &proc_control_DW.m_bpIndex_cj[proc_control_B.idx_m]);
      proc_control_B.NtoRPM[proc_control_B.idx_m] = static_cast<int16_T>
        (proc_control_P.RPM[proc_control_B.bpIdx]);
    }

    for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
      // Signum: '<S16>/Sign' incorporates:
      //   Product: '<S16>/Product'

      proc_control_B.Divide_p = proc_control_B.u_scale[proc_control_B.Ns];
      if (!std::isnan(proc_control_B.Divide_p)) {
        if (proc_control_B.Divide_p < 0.0) {
          proc_control_B.Divide_p = -1.0;
        } else {
          proc_control_B.Divide_p = (proc_control_B.Divide_p > 0.0);
        }
      }

      // End of Signum: '<S16>/Sign'

      // Product: '<S16>/Product'
      proc_control_B.NtoRPM[proc_control_B.Ns] = static_cast<int16_T>(std::floor
        (static_cast<real_T>(proc_control_B.NtoRPM[proc_control_B.Ns]) *
         proc_control_B.Divide_p));
    }

    if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
      // MATLAB Function: '<S16>/MATLAB Function3' incorporates:
      //   Constant: '<S25>/Constant'

      proc_control_B.msg_p = proc_control_P.Constant_Value_m;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.msg_p.Data[proc_control_B.Ns] =
          proc_control_B.NtoRPM[proc_control_B.Ns];
      }

      proc_control_B.msg_p.Data_SL_Info.CurrentLength = 8U;

      // End of MATLAB Function: '<S16>/MATLAB Function3'

      // Outputs for Atomic SubSystem: '<S16>/Publish2'
      // MATLABSystem: '<S27>/SinkBlock'
      Pub_proc_control_19_1361.publish(&proc_control_B.msg_p);

      // End of Outputs for SubSystem: '<S16>/Publish2'
    }

    // MATLAB Function: '<S1>/Quaternion Normalise'
    proc_control_B.scale = 3.3121686421112381E-170;
    proc_control_B.absxk = std::abs(proc_control_B.y_d_a[0]);
    if (proc_control_B.absxk > 3.3121686421112381E-170) {
      proc_control_B.d = 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / 3.3121686421112381E-170;
      proc_control_B.d = proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = std::abs(proc_control_B.y_d_a[1]);
    if (proc_control_B.absxk > proc_control_B.scale) {
      proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
      proc_control_B.d = proc_control_B.d * proc_control_B.t * proc_control_B.t
        + 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
      proc_control_B.d += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = std::abs(proc_control_B.y_d_a[2]);
    if (proc_control_B.absxk > proc_control_B.scale) {
      proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
      proc_control_B.d = proc_control_B.d * proc_control_B.t * proc_control_B.t
        + 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
      proc_control_B.d += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = std::abs(proc_control_B.y_d_a[3]);
    if (proc_control_B.absxk > proc_control_B.scale) {
      proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
      proc_control_B.d = proc_control_B.d * proc_control_B.t * proc_control_B.t
        + 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
      proc_control_B.d += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.d = proc_control_B.scale * std::sqrt(proc_control_B.d);
    proc_control_B.y_d[0] = proc_control_B.y_d_a[0] / proc_control_B.d;
    proc_control_B.y_d[1] = proc_control_B.y_d_a[1] / proc_control_B.d;
    proc_control_B.y_d[2] = proc_control_B.y_d_a[2] / proc_control_B.d;
    proc_control_B.y_d[3] = proc_control_B.y_d_a[3] / proc_control_B.d;

    // End of MATLAB Function: '<S1>/Quaternion Normalise'

    // Gain: '<S28>/Output' incorporates:
    //   RandomNumber: '<S28>/White Noise'

    proc_control_B.t60 = std::sqrt(proc_control_P.BandLimitedWhiteNoise_Cov) /
      0.1414213562373095 * proc_control_DW.NextOutput;

    // Gain: '<S29>/Output' incorporates:
    //   RandomNumber: '<S29>/White Noise'

    proc_control_B.Product5 = std::sqrt
      (proc_control_P.BandLimitedWhiteNoise1_Cov) / 0.1414213562373095 *
      proc_control_DW.NextOutput_b;

    // Gain: '<S30>/Output' incorporates:
    //   RandomNumber: '<S30>/White Noise'

    proc_control_B.absxk = std::sqrt(proc_control_P.BandLimitedWhiteNoise2_Cov) /
      0.1414213562373095 * proc_control_DW.NextOutput_g;

    // Gain: '<S32>/Output' incorporates:
    //   RandomNumber: '<S32>/White Noise'

    proc_control_B.t65 = std::sqrt(proc_control_P.BandLimitedWhiteNoise4_Cov) /
      0.1414213562373095 * proc_control_DW.NextOutput_e;

    // Product: '<S52>/Product1' incorporates:
    //   MATLABSystem: '<S33>/MATLAB System'

    proc_control_B.t12 = proc_control_B.y_d[1] * proc_control_B.y_d[1];

    // Product: '<S52>/Product2' incorporates:
    //   MATLABSystem: '<S33>/MATLAB System'

    proc_control_B.t63 = proc_control_B.y_d[2] * proc_control_B.y_d[2];

    // Product: '<S52>/Product3' incorporates:
    //   MATLABSystem: '<S33>/MATLAB System'

    proc_control_B.t16 = proc_control_B.y_d[3] * proc_control_B.y_d[3];

    // Product: '<S52>/Product' incorporates:
    //   Product: '<S46>/Product'

    proc_control_B.t57_tmp = proc_control_B.y_d[0] * proc_control_B.y_d[0];

    // Sqrt: '<S51>/sqrt' incorporates:
    //   MATLAB Function: '<S14>/MATLAB Function'
    //   Product: '<S52>/Product'
    //   Product: '<S52>/Product1'
    //   Product: '<S52>/Product2'
    //   Product: '<S52>/Product3'
    //   Sum: '<S52>/Sum'

    proc_control_B.t57_tmp_n = std::sqrt(((proc_control_B.t57_tmp +
      proc_control_B.t12) + proc_control_B.t63) + proc_control_B.t16);

    // Product: '<S47>/Product1' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.scale = proc_control_B.y_d[1] / proc_control_B.t57_tmp_n;

    // Product: '<S47>/Product3' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.Product8 = proc_control_B.y_d[3] / proc_control_B.t57_tmp_n;

    // Product: '<S50>/Product'
    proc_control_B.d = proc_control_B.scale * proc_control_B.Product8;

    // Product: '<S47>/Product' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.oa = proc_control_B.y_d[0] / proc_control_B.t57_tmp_n;

    // Product: '<S47>/Product2' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.t = proc_control_B.y_d[2] / proc_control_B.t57_tmp_n;

    // Product: '<S50>/Product1'
    proc_control_B.Divide_p = proc_control_B.oa * proc_control_B.t;

    // Product: '<S50>/Product2'
    proc_control_B.Divide1_k = proc_control_B.oa * proc_control_B.scale;

    // Product: '<S50>/Product3'
    proc_control_B.Divide2_c = proc_control_B.t * proc_control_B.Product8;

    // Product: '<S50>/Product6'
    proc_control_B.Divide3_m = proc_control_B.scale * proc_control_B.scale;

    // Product: '<S50>/Product7'
    proc_control_B.t15 = proc_control_B.t * proc_control_B.t;

    // Gain: '<S40>/1//2' incorporates:
    //   Constant: '<S14>/ y devant Z haut'

    proc_control_B.t = proc_control_P.u2_Gain *
      proc_control_P.physics.dvlRotation[0];

    // Trigonometry: '<S40>/sincos'
    proc_control_B.rtb_Sum6_idx_0 = std::sin(proc_control_B.t);
    proc_control_B.sincos_o2[0] = std::cos(proc_control_B.t);

    // Gain: '<S40>/1//2' incorporates:
    //   Constant: '<S14>/ y devant Z haut'

    proc_control_B.t = proc_control_P.u2_Gain *
      proc_control_P.physics.dvlRotation[1];

    // Trigonometry: '<S40>/sincos'
    proc_control_B.rtb_Sum6_idx_1 = std::sin(proc_control_B.t);
    proc_control_B.sincos_o2[1] = std::cos(proc_control_B.t);

    // Gain: '<S40>/1//2' incorporates:
    //   Constant: '<S14>/ y devant Z haut'

    proc_control_B.t = proc_control_P.u2_Gain *
      proc_control_P.physics.dvlRotation[2];

    // Trigonometry: '<S40>/sincos'
    proc_control_B.rtb_Sum6_idx_2 = std::sin(proc_control_B.t);
    proc_control_B.sincos_o2[2] = std::cos(proc_control_B.t);

    // Fcn: '<S40>/q2' incorporates:
    //   Fcn: '<S40>/q1'

    proc_control_B.oa = proc_control_B.sincos_o2[0] *
      proc_control_B.rtb_Sum6_idx_1;
    proc_control_B.Product8 = proc_control_B.rtb_Sum6_idx_0 *
      proc_control_B.sincos_o2[1];
    proc_control_B.t = proc_control_B.oa * proc_control_B.sincos_o2[2] -
      proc_control_B.Product8 * proc_control_B.rtb_Sum6_idx_2;

    // Fcn: '<S40>/q0' incorporates:
    //   Fcn: '<S40>/q3'

    proc_control_B.ob = proc_control_B.sincos_o2[0] * proc_control_B.sincos_o2[1];
    proc_control_B.t21 = proc_control_B.rtb_Sum6_idx_0 *
      proc_control_B.rtb_Sum6_idx_1;
    proc_control_B.scale = proc_control_B.ob * proc_control_B.sincos_o2[2] -
      proc_control_B.t21 * proc_control_B.rtb_Sum6_idx_2;

    // Fcn: '<S40>/q1'
    proc_control_B.Product8 = proc_control_B.oa * proc_control_B.rtb_Sum6_idx_2
      + proc_control_B.Product8 * proc_control_B.sincos_o2[2];

    // Fcn: '<S40>/q3'
    proc_control_B.oa = proc_control_B.ob * proc_control_B.rtb_Sum6_idx_2 +
      proc_control_B.t21 * proc_control_B.sincos_o2[2];

    // Sqrt: '<S57>/sqrt' incorporates:
    //   Product: '<S58>/Product'
    //   Product: '<S58>/Product1'
    //   Product: '<S58>/Product2'
    //   Product: '<S58>/Product3'
    //   Sum: '<S58>/Sum'

    proc_control_B.ob = std::sqrt(((proc_control_B.scale * proc_control_B.scale
      + proc_control_B.Product8 * proc_control_B.Product8) + proc_control_B.t *
      proc_control_B.t) + proc_control_B.oa * proc_control_B.oa);

    // Product: '<S53>/Product2'
    proc_control_B.t /= proc_control_B.ob;

    // Product: '<S53>/Product3'
    proc_control_B.oa /= proc_control_B.ob;

    // Product: '<S53>/Product1'
    proc_control_B.Product8 /= proc_control_B.ob;

    // Product: '<S53>/Product'
    proc_control_B.scale /= proc_control_B.ob;

    // Product: '<S54>/Product7' incorporates:
    //   Product: '<S55>/Product7'

    proc_control_B.ob = proc_control_B.oa * proc_control_B.oa;

    // Product: '<S54>/Product' incorporates:
    //   Product: '<S55>/Product'

    proc_control_B.t21 = proc_control_B.Product8 * proc_control_B.t;

    // Product: '<S54>/Product1' incorporates:
    //   Product: '<S55>/Product1'

    proc_control_B.t69 = proc_control_B.scale * proc_control_B.oa;

    // Product: '<S54>/Product3' incorporates:
    //   Product: '<S56>/Product'

    proc_control_B.t5 = proc_control_B.Product8 * proc_control_B.oa;

    // Product: '<S54>/Product2' incorporates:
    //   Product: '<S56>/Product1'

    proc_control_B.dp = proc_control_B.scale * proc_control_B.t;

    // Product: '<S54>/Product6' incorporates:
    //   Product: '<S56>/Product7'

    proc_control_B.rtb_Sum6_idx_2 = proc_control_B.t * proc_control_B.t;

    // MATLABSystem: '<S14>/Divide by Constant and Round1' incorporates:
    //   Constant: '<S54>/Constant'
    //   Gain: '<S54>/Gain'
    //   Gain: '<S54>/Gain1'
    //   Gain: '<S54>/Gain2'
    //   Product: '<S54>/Product'
    //   Product: '<S54>/Product1'
    //   Product: '<S54>/Product2'
    //   Product: '<S54>/Product3'
    //   Product: '<S54>/Product4'
    //   Product: '<S54>/Product5'
    //   Product: '<S54>/Product6'
    //   Product: '<S54>/Product7'
    //   Product: '<S54>/Product8'
    //   Sum: '<S14>/Sum2'
    //   Sum: '<S54>/Sum'
    //   Sum: '<S54>/Sum1'
    //   Sum: '<S54>/Sum2'
    //   Sum: '<S54>/Sum3'

    proc_control_B.sincos_o2[0] = std::floor
      ((((((proc_control_P.Constant_Value_k2 - proc_control_B.rtb_Sum6_idx_2) -
           proc_control_B.ob) * proc_control_P.Gain2_Gain_d * proc_control_B.t43
          + (proc_control_B.t21 + proc_control_B.t69) *
          proc_control_P.Gain_Gain_j * proc_control_B.t45) + (proc_control_B.t5
          - proc_control_B.dp) * proc_control_P.Gain1_Gain_e *
         proc_control_B.BodyVelocity_c_idx_2) + proc_control_B.absxk) * 1000.0 +
       0.5);

    // Product: '<S55>/Product3' incorporates:
    //   Product: '<S56>/Product3'

    proc_control_B.t *= proc_control_B.oa;

    // Product: '<S55>/Product2' incorporates:
    //   Product: '<S56>/Product2'

    proc_control_B.scale *= proc_control_B.Product8;

    // Product: '<S55>/Product6' incorporates:
    //   Product: '<S56>/Product6'

    proc_control_B.Product8 *= proc_control_B.Product8;

    // MATLABSystem: '<S14>/Divide by Constant and Round1' incorporates:
    //   Constant: '<S55>/Constant'
    //   Constant: '<S56>/Constant'
    //   Gain: '<S55>/Gain'
    //   Gain: '<S55>/Gain1'
    //   Gain: '<S55>/Gain2'
    //   Gain: '<S56>/Gain'
    //   Gain: '<S56>/Gain1'
    //   Gain: '<S56>/Gain2'
    //   Product: '<S55>/Product2'
    //   Product: '<S55>/Product3'
    //   Product: '<S55>/Product4'
    //   Product: '<S55>/Product5'
    //   Product: '<S55>/Product6'
    //   Product: '<S55>/Product8'
    //   Product: '<S56>/Product4'
    //   Product: '<S56>/Product5'
    //   Product: '<S56>/Product8'
    //   Sum: '<S14>/Sum2'
    //   Sum: '<S55>/Sum'
    //   Sum: '<S55>/Sum1'
    //   Sum: '<S55>/Sum2'
    //   Sum: '<S55>/Sum3'
    //   Sum: '<S56>/Sum'
    //   Sum: '<S56>/Sum1'
    //   Sum: '<S56>/Sum2'
    //   Sum: '<S56>/Sum3'

    proc_control_B.sincos_o2[1] = std::floor
      ((((((proc_control_P.Constant_Value_gp - proc_control_B.Product8) -
           proc_control_B.ob) * proc_control_P.Gain2_Gain_l * proc_control_B.t45
          + (proc_control_B.t21 - proc_control_B.t69) *
          proc_control_P.Gain_Gain_e * proc_control_B.t43) +
         (proc_control_B.scale + proc_control_B.t) *
         proc_control_P.Gain1_Gain_eg * proc_control_B.BodyVelocity_c_idx_2) +
        proc_control_B.absxk) * 1000.0 + 0.5);
    proc_control_B.sincos_o2[2] = std::floor(((((proc_control_B.t5 +
      proc_control_B.dp) * proc_control_P.Gain_Gain_m * proc_control_B.t43 +
      (proc_control_B.t - proc_control_B.scale) * proc_control_P.Gain1_Gain_g *
      proc_control_B.t45) + ((proc_control_P.Constant_Value_iw -
      proc_control_B.Product8) - proc_control_B.rtb_Sum6_idx_2) *
      proc_control_P.Gain2_Gain_b * proc_control_B.BodyVelocity_c_idx_2) +
      proc_control_B.absxk) * 1000.0 + 0.5);

    // Gain: '<S14>/Gain' incorporates:
    //   Constant: '<S14>/Constant'
    //   Constant: '<S50>/Constant'
    //   Gain: '<S31>/Output'
    //   Gain: '<S50>/Gain'
    //   Gain: '<S50>/Gain1'
    //   Gain: '<S50>/Gain2'
    //   MATLABSystem: '<S14>/Divide by Constant and Round'
    //   Product: '<S50>/Product4'
    //   Product: '<S50>/Product5'
    //   Product: '<S50>/Product8'
    //   RandomNumber: '<S31>/White Noise'
    //   Sum: '<S14>/Sum'
    //   Sum: '<S14>/Sum4'
    //   Sum: '<S50>/Sum'
    //   Sum: '<S50>/Sum1'
    //   Sum: '<S50>/Sum2'
    //   Sum: '<S50>/Sum3'

    proc_control_B.PressureDepth = std::floor((((((proc_control_B.d +
      proc_control_B.Divide_p) * proc_control_P.Gain_Gain *
      proc_control_P.physics.DepthPose[0] + (proc_control_B.Divide2_c -
      proc_control_B.Divide1_k) * proc_control_P.Gain1_Gain *
      proc_control_P.physics.DepthPose[1]) + ((proc_control_P.Constant_Value_mj
      - proc_control_B.Divide3_m) - proc_control_B.t15) *
      proc_control_P.Gain2_Gain * proc_control_P.physics.DepthPose[2]) +
      proc_control_B.WorldPosition_n[2]) + std::sqrt
      (proc_control_P.BandLimitedWhiteNoise3_Cov) / 0.1414213562373095 *
      proc_control_DW.NextOutput_l) * 1000.0 + 0.5) * proc_control_P.Gain_Gain_n;

    // Outputs for Atomic SubSystem: '<S33>/Subscribe'
    // MATLABSystem: '<S42>/SourceBlock'
    rtb_Merge = Sub_proc_control_19_1385.getLatestMessage
      (&proc_control_B.b_varargout_2_j);

    // Outputs for Enabled SubSystem: '<S42>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S44>/Enable'

    // MATLABSystem: '<S33>/MATLAB System' incorporates:
    //   DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    //   MATLABSystem: '<S42>/SourceBlock'

    if (rtb_Merge) {
      proc_control_DW.obj_fj.pingerPosition = proc_control_B.b_varargout_2_j;
    }

    // End of Outputs for SubSystem: '<S42>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S33>/Subscribe'
    //  Ajout du bruit sur la position du pinger.
    proc_control_rand(proc_control_B.u2_j);
    proc_control_B.rtb_Sum6_idx_0 = proc_control_B.u2_j[0] * 0.0 +
      proc_control_DW.obj_fj.pingerPosition.X;
    proc_control_B.rtb_Sum6_idx_1 = proc_control_B.u2_j[1] * 0.0 +
      proc_control_DW.obj_fj.pingerPosition.Y;
    proc_control_B.rtb_Sum6_idx_2 = proc_control_B.u2_j[2] * 0.0 +
      proc_control_DW.obj_fj.pingerPosition.Z;

    //  Calculer les angles des hydros.
    // pinger2hydroAngles
    //     T__H_N = pinger2hydroAngles(IN1,IN2,IN3,IN4)
    //     This function was generated by the Symbolic Math Toolbox version 9.0. 
    //     02-Mar-2022 21:23:59
    proc_control_B.t5 = proc_control_B.y_d[1] * proc_control_B.y_d[2] * 2.0;
    proc_control_B.t = proc_control_B.y_d[1] * proc_control_B.y_d[3] * 2.0;
    proc_control_B.absxk = proc_control_B.y_d[2] * proc_control_B.y_d[3] * 2.0;
    proc_control_B.ob = proc_control_B.y_d[0] * proc_control_B.y_d[1] * 2.0;
    proc_control_B.oa = proc_control_B.y_d[0] * proc_control_B.y_d[2] * 2.0;
    proc_control_B.Product8 = proc_control_B.y_d[0] * proc_control_B.y_d[3] *
      2.0;
    proc_control_B.n_e = proc_control_B.t12 * 2.0;
    proc_control_B.t12 = proc_control_B.t63 * 2.0;
    proc_control_B.scale = proc_control_B.t16 * 2.0;
    proc_control_B.dp = proc_control_B.t5 + proc_control_B.Product8;
    proc_control_B.t69 = proc_control_B.t + proc_control_B.oa;
    proc_control_B.Divide1_k = proc_control_B.absxk + proc_control_B.ob;
    proc_control_B.Divide2_c = proc_control_B.t5 + -proc_control_B.Product8;
    proc_control_B.t21 = proc_control_B.t + -proc_control_B.oa;
    proc_control_B.theta0 = proc_control_B.absxk + -proc_control_B.ob;
    proc_control_B.t35 = (proc_control_B.n_e + proc_control_B.t12) - 1.0;
    proc_control_B.ob = (proc_control_B.n_e + proc_control_B.scale) - 1.0;
    proc_control_B.oa_p = (proc_control_B.t12 + proc_control_B.scale) - 1.0;
    proc_control_B.t15 = proc_control_B.rtb_Sum6_idx_1 * proc_control_B.ob;
    proc_control_B.absxk = ((0.155 * proc_control_B.t69 +
      proc_control_B.WorldPosition_n[0]) + 0.0 * proc_control_B.Divide2_c) +
      -(0.16 * proc_control_B.oa_p);
    proc_control_B.t = ((0.16 * proc_control_B.dp +
                         proc_control_B.WorldPosition_n[1]) + 0.155 *
                        proc_control_B.theta0) + -(0.0 * proc_control_B.ob);
    proc_control_B.t52 = ((0.0 * proc_control_B.Divide1_k +
      proc_control_B.WorldPosition_n[2]) + 0.16 * proc_control_B.t21) + -(0.155 *
      proc_control_B.t35);
    proc_control_B.t16 = proc_control_B.Divide1_k * proc_control_B.t52;
    proc_control_B.Divide_p = proc_control_B.Divide2_c * proc_control_B.absxk;
    proc_control_B.scale = proc_control_B.ob * proc_control_B.t;
    proc_control_B.t63 = ((((proc_control_B.rtb_Sum6_idx_0 * proc_control_B.t69
      + proc_control_B.rtb_Sum6_idx_1 * proc_control_B.theta0) +
      -(proc_control_B.rtb_Sum6_idx_2 * proc_control_B.t35)) +
      -(proc_control_B.t69 * proc_control_B.absxk)) + -(proc_control_B.theta0 *
      proc_control_B.t)) + proc_control_B.t35 * proc_control_B.t52;
    proc_control_B.t21 = ((((proc_control_B.rtb_Sum6_idx_1 * proc_control_B.dp +
      proc_control_B.rtb_Sum6_idx_2 * proc_control_B.t21) +
      -(proc_control_B.rtb_Sum6_idx_0 * proc_control_B.oa_p)) +
      -(proc_control_B.dp * proc_control_B.t)) + -(proc_control_B.t21 *
      proc_control_B.t52)) + proc_control_B.oa_p * proc_control_B.absxk;
    proc_control_B.absxk = std::abs(proc_control_B.t63);
    proc_control_B.oa = proc_control_B.rtb_Sum6_idx_2 * proc_control_B.Divide1_k
      + proc_control_B.rtb_Sum6_idx_0 * proc_control_B.Divide2_c;
    proc_control_B.t = std::abs((((proc_control_B.oa + -proc_control_B.t15) +
      -proc_control_B.t16) + -proc_control_B.Divide_p) + proc_control_B.scale);
    proc_control_B.Product8 = std::abs(proc_control_B.t21);
    proc_control_B.absxk = std::sqrt((proc_control_B.absxk *
      proc_control_B.absxk + proc_control_B.t * proc_control_B.t) +
      proc_control_B.Product8 * proc_control_B.Product8);

    // MATLABSystem: '<S33>/MATLAB System'
    proc_control_B.MATLABSystem_o2_k[0] = proc_control_rt_atan2d_snf
      ((((proc_control_B.oa - proc_control_B.t15) - proc_control_B.t16) -
        proc_control_B.Divide_p) + proc_control_B.scale, proc_control_B.t21);
    proc_control_B.MATLABSystem_o2_k[1] = std::acos(proc_control_B.t63 /
      proc_control_B.absxk);
    proc_control_B.MATLABSystem_o2_k[2] = proc_control_B.absxk;

    // ZeroOrderHold: '<S33>/Zero-Order Hold'
    if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
      // Outputs for Atomic SubSystem: '<S33>/Publish'
      // MATLABSystem: '<S41>/SinkBlock' incorporates:
      //   MATLABSystem: '<S33>/MATLAB System'

      Pub_proc_control_19_1384.publish(&proc_control_DW.obj_fj.pingerPosition);

      // End of Outputs for SubSystem: '<S33>/Publish'
    }

    // End of ZeroOrderHold: '<S33>/Zero-Order Hold'

    // Sum: '<S46>/Sum' incorporates:
    //   Product: '<S46>/Product1'
    //   Product: '<S46>/Product2'
    //   Product: '<S46>/Product3'
    //   UnaryMinus: '<S36>/Unary Minus'
    //   UnaryMinus: '<S36>/Unary Minus1'
    //   UnaryMinus: '<S36>/Unary Minus2'

    proc_control_B.d = ((-proc_control_B.y_d[1] * -proc_control_B.y_d[1] +
                         proc_control_B.t57_tmp) + -proc_control_B.y_d[2] *
                        -proc_control_B.y_d[2]) + -proc_control_B.y_d[3] *
      -proc_control_B.y_d[3];

    // Product: '<S34>/Divide'
    proc_control_B.scale = proc_control_B.y_d[0] / proc_control_B.d;

    // Product: '<S34>/Divide1' incorporates:
    //   UnaryMinus: '<S36>/Unary Minus'

    proc_control_B.Divide_p = proc_control_B.y_d[1] / proc_control_B.d;

    // Product: '<S34>/Divide2' incorporates:
    //   UnaryMinus: '<S36>/Unary Minus1'

    proc_control_B.absxk = proc_control_B.y_d[2] / proc_control_B.d;

    // Product: '<S34>/Divide3' incorporates:
    //   UnaryMinus: '<S36>/Unary Minus2'

    proc_control_B.d = proc_control_B.y_d[3] / proc_control_B.d;

    // MATLAB Function: '<S14>/MATLAB Function' incorporates:
    //   Gain: '<S14>/Gain1'
    //   MATLABSystem: '<S14>/Divide by Constant and Round1'

    proc_control_B.y_e[0] = proc_control_P.Gain1_Gain_h *
      proc_control_B.sincos_o2[0];
    proc_control_B.y_e[1] = proc_control_P.Gain1_Gain_h *
      proc_control_B.sincos_o2[1];
    proc_control_B.y_e[2] = proc_control_P.Gain1_Gain_h *
      proc_control_B.sincos_o2[2];
    proc_control_B.Product8 = 1.0 / proc_control_B.t57_tmp_n;
    proc_control_B.t15 = proc_control_B.y_d[0] * proc_control_B.Product8;
    proc_control_B.t16 = proc_control_B.y_d[1] * proc_control_B.Product8;
    proc_control_B.t63 = proc_control_B.y_d[2] * proc_control_B.Product8;
    proc_control_B.t = proc_control_B.y_d[3] * proc_control_B.Product8;
    proc_control_B.Divide1_k = (proc_control_B.t16 * proc_control_B.t -
      proc_control_B.t15 * proc_control_B.t63) * -2.0;
    rtb_NewDvlMsg = (proc_control_B.Divide1_k >= 0.99999999999999778);
    rtb_newPressureMsg = (proc_control_B.Divide1_k <= -0.99999999999999778);
    if (proc_control_B.Divide1_k >= 0.99999999999999778) {
      proc_control_B.Divide1_k = 1.0;
    }

    if (rtb_newPressureMsg) {
      proc_control_B.Divide1_k = -1.0;
    }

    proc_control_B.ob = proc_control_B.t15 * proc_control_B.t15;
    proc_control_B.t21 = proc_control_B.t16 * proc_control_B.t16;
    proc_control_B.t69 = proc_control_B.t63 * proc_control_B.t63;
    proc_control_B.t5 = proc_control_B.t * proc_control_B.t;
    proc_control_B.sincos_o2[0] = proc_control_rt_atan2d_snf((proc_control_B.t16
      * proc_control_B.t63 + proc_control_B.t15 * proc_control_B.t) * 2.0,
      ((proc_control_B.ob + proc_control_B.t21) - proc_control_B.t69) -
      proc_control_B.t5);
    proc_control_B.sincos_o2[1] = std::asin(proc_control_B.Divide1_k);
    proc_control_B.sincos_o2[2] = proc_control_rt_atan2d_snf((proc_control_B.t63
      * proc_control_B.t + proc_control_B.t15 * proc_control_B.t16) * 2.0,
      ((proc_control_B.ob - proc_control_B.t21) - proc_control_B.t69) +
      proc_control_B.t5);
    proc_control_B.ibmat = 0;
    if (rtb_NewDvlMsg || rtb_newPressureMsg) {
      proc_control_B.ibmat = 1;
    }

    proc_control_B.i_m = proc_control_B.ibmat;
    proc_control_B.b_x_size = proc_control_B.ibmat;
    if (proc_control_B.ibmat - 1 >= 0) {
      proc_control_B.b_x_data = proc_control_B.Divide1_k;
    }

    proc_control_B.idx_m = 0;
    while (proc_control_B.idx_m <= proc_control_B.ibmat - 1) {
      if (!std::isnan(proc_control_B.b_x_data)) {
        if (proc_control_B.b_x_data < 0.0) {
          proc_control_B.b_x_data = -1.0;
        } else {
          proc_control_B.b_x_data = (proc_control_B.b_x_data > 0.0);
        }
      }

      proc_control_B.idx_m = 1;
    }

    proc_control_B.ibmat = 0;
    if (rtb_NewDvlMsg || rtb_newPressureMsg) {
      proc_control_B.ibmat = 1;
    }

    proc_control_B.d_size = static_cast<int8_T>(proc_control_B.ibmat);
    if (static_cast<int8_T>(proc_control_B.ibmat) - 1 >= 0) {
      proc_control_B.d_data_i = proc_control_rt_atan2d_snf(proc_control_B.t16,
        proc_control_B.t15);
    }

    if (proc_control_B.i_m != static_cast<int8_T>(proc_control_B.ibmat)) {
      proc_control_binary_expand_op(proc_control_B.sincos_o2,
        &proc_control_B.b_x_data, &proc_control_B.b_x_size,
        &proc_control_B.d_data_i, &proc_control_B.d_size);
    }

    proc_control_B.idx_m = 0;
    if (rtb_NewDvlMsg || rtb_newPressureMsg) {
      proc_control_B.idx_m = 1;
    }

    if (proc_control_B.idx_m - 1 >= 0) {
      proc_control_B.sincos_o2[2] = 0.0;
    }

    if (std::abs(proc_control_B.sincos_o2[1]) > 0.349066) {
      proc_control_B.y_e[0] = 32.7675;
      proc_control_B.y_e[1] = 32.7675;
      proc_control_B.y_e[2] = 32.7675;
    } else if (std::abs(proc_control_B.sincos_o2[2]) > 0.349066) {
      proc_control_B.y_e[0] = 32.7675;
      proc_control_B.y_e[1] = 32.7675;
      proc_control_B.y_e[2] = 32.7675;
    }

    // Product: '<S59>/Product' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.Product8 = proc_control_B.y_d[0] / proc_control_B.t57_tmp_n;

    // Product: '<S59>/Product1' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.oa = proc_control_B.y_d[1] / proc_control_B.t57_tmp_n;

    // Product: '<S59>/Product2' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.ob = proc_control_B.y_d[2] / proc_control_B.t57_tmp_n;

    // Product: '<S59>/Product3' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.t = proc_control_B.y_d[3] / proc_control_B.t57_tmp_n;

    // Sum: '<S14>/Sum1'
    proc_control_B.Quaternion[0] = proc_control_B.t60 + proc_control_B.scale;
    proc_control_B.Quaternion[1] = proc_control_B.t60 + proc_control_B.Divide_p;
    proc_control_B.Quaternion[2] = proc_control_B.t60 + proc_control_B.absxk;
    proc_control_B.Quaternion[3] = proc_control_B.t60 + proc_control_B.d;

    // Sum: '<S14>/Sum3' incorporates:
    //   DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'

    proc_control_B.AngularRate_d[0] = proc_control_B.Product5 +
      proc_control_B.t62;
    proc_control_B.AngularRate_d[1] = proc_control_B.Product5 +
      proc_control_B.AngularRate_a_idx_1;
    proc_control_B.AngularRate_d[2] = proc_control_B.Product5 +
      proc_control_B.t39;

    // Product: '<S60>/Product7' incorporates:
    //   Product: '<S61>/Product7'

    proc_control_B.Divide_p = proc_control_B.t * proc_control_B.t;

    // Product: '<S60>/Product' incorporates:
    //   Product: '<S61>/Product'

    proc_control_B.t15 = proc_control_B.oa * proc_control_B.ob;

    // Product: '<S60>/Product1' incorporates:
    //   Product: '<S61>/Product1'

    proc_control_B.t57 = proc_control_B.Product8 * proc_control_B.t;

    // Product: '<S60>/Product3' incorporates:
    //   Product: '<S62>/Product'

    proc_control_B.Divide1_k = proc_control_B.oa * proc_control_B.t;

    // Product: '<S60>/Product2' incorporates:
    //   Product: '<S62>/Product1'

    proc_control_B.d = proc_control_B.Product8 * proc_control_B.ob;

    // Product: '<S60>/Product6' incorporates:
    //   Product: '<S62>/Product7'

    proc_control_B.absxk = proc_control_B.ob * proc_control_B.ob;

    // Sum: '<S14>/Sum5' incorporates:
    //   Constant: '<S14>/Constant1'
    //   Constant: '<S60>/Constant'
    //   Gain: '<S60>/Gain'
    //   Gain: '<S60>/Gain1'
    //   Gain: '<S60>/Gain2'
    //   MATLABSystem: '<S1>/MATLAB System'
    //   Product: '<S60>/Product'
    //   Product: '<S60>/Product1'
    //   Product: '<S60>/Product2'
    //   Product: '<S60>/Product3'
    //   Product: '<S60>/Product4'
    //   Product: '<S60>/Product5'
    //   Product: '<S60>/Product6'
    //   Product: '<S60>/Product7'
    //   Product: '<S60>/Product8'
    //   Sum: '<S14>/Sum6'
    //   Sum: '<S60>/Sum'
    //   Sum: '<S60>/Sum1'
    //   Sum: '<S60>/Sum2'
    //   Sum: '<S60>/Sum3'

    proc_control_B.LinearAcceleration[0] = (((((proc_control_P.Constant_Value_ah
      - proc_control_B.absxk) - proc_control_B.Divide_p) *
      proc_control_P.Gain2_Gain_p * proc_control_P.Constant1_Value_m[0] +
      (proc_control_B.t15 + proc_control_B.t57) * proc_control_P.Gain_Gain_a *
      proc_control_P.Constant1_Value_m[1]) + (proc_control_B.Divide1_k -
      proc_control_B.d) * proc_control_P.Gain1_Gain_b *
      proc_control_P.Constant1_Value_m[2]) + proc_control_B.K_j[7]) +
      proc_control_B.t65;

    // Product: '<S61>/Product3' incorporates:
    //   Product: '<S62>/Product3'

    proc_control_B.t16 = proc_control_B.ob * proc_control_B.t;

    // Product: '<S61>/Product2' incorporates:
    //   Product: '<S62>/Product2'

    proc_control_B.t63 = proc_control_B.Product8 * proc_control_B.oa;

    // Product: '<S61>/Product6' incorporates:
    //   Product: '<S62>/Product6'

    proc_control_B.t = proc_control_B.oa * proc_control_B.oa;

    // Sum: '<S14>/Sum5' incorporates:
    //   Constant: '<S14>/Constant1'
    //   Constant: '<S61>/Constant'
    //   Constant: '<S62>/Constant'
    //   Gain: '<S61>/Gain'
    //   Gain: '<S61>/Gain1'
    //   Gain: '<S61>/Gain2'
    //   Gain: '<S62>/Gain'
    //   Gain: '<S62>/Gain1'
    //   Gain: '<S62>/Gain2'
    //   MATLABSystem: '<S1>/MATLAB System'
    //   Product: '<S61>/Product2'
    //   Product: '<S61>/Product3'
    //   Product: '<S61>/Product4'
    //   Product: '<S61>/Product5'
    //   Product: '<S61>/Product6'
    //   Product: '<S61>/Product8'
    //   Product: '<S62>/Product4'
    //   Product: '<S62>/Product5'
    //   Product: '<S62>/Product8'
    //   Sum: '<S14>/Sum6'
    //   Sum: '<S61>/Sum'
    //   Sum: '<S61>/Sum1'
    //   Sum: '<S61>/Sum2'
    //   Sum: '<S61>/Sum3'
    //   Sum: '<S62>/Sum'
    //   Sum: '<S62>/Sum1'
    //   Sum: '<S62>/Sum2'
    //   Sum: '<S62>/Sum3'

    proc_control_B.LinearAcceleration[1] = (((((proc_control_P.Constant_Value_ar
      - proc_control_B.t) - proc_control_B.Divide_p) *
      proc_control_P.Gain2_Gain_a * proc_control_P.Constant1_Value_m[1] +
      (proc_control_B.t15 - proc_control_B.t57) * proc_control_P.Gain_Gain_c *
      proc_control_P.Constant1_Value_m[0]) + (proc_control_B.t63 +
      proc_control_B.t16) * proc_control_P.Gain1_Gain_a *
      proc_control_P.Constant1_Value_m[2]) + proc_control_B.K_j[8]) +
      proc_control_B.t65;
    proc_control_B.LinearAcceleration[2] = ((((proc_control_B.Divide1_k +
      proc_control_B.d) * proc_control_P.Gain_Gain_b *
      proc_control_P.Constant1_Value_m[0] + (proc_control_B.t16 -
      proc_control_B.t63) * proc_control_P.Gain1_Gain_f *
      proc_control_P.Constant1_Value_m[1]) + ((proc_control_P.Constant_Value_i2
      - proc_control_B.t) - proc_control_B.absxk) * proc_control_P.Gain2_Gain_m *
      proc_control_P.Constant1_Value_m[2]) + proc_control_B.K_j[9]) +
      proc_control_B.t65;

    // Update for DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states = proc_control_B.MATLABSystem_o7;

    // Update for DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_k = proc_control_B.oc;

    // Update for DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_o = proc_control_B.od;

    // Update for DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_i = proc_control_B.t4;

    // Update for DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_g = proc_control_B.t24;

    // Update for DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_h = proc_control_B.t26;

    // Update for DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_l = proc_control_B.t27;

    // Update for DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_ge = proc_control_B.t29;
    if ((&proc_control_M)->Timing.TaskCounters.TID[5] == 0) {
      // Update for UniformRandomNumber: '<S12>/ Drift' incorporates:
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S140>/N to A'
      //   Lookup_n-D: '<S140>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   Trigonometry: '<S271>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //
      for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 6;
           proc_control_B.idx_m++) {
        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S242>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_DW.Drift_NextOutput[proc_control_B.idx_m] =
          (proc_control_P.dmax[proc_control_B.idx_m] -
           proc_control_P.dmin[proc_control_B.idx_m]) *
          rt_urand_Upu32_Yd_f_pw_snf
          (&proc_control_DW.RandSeed[proc_control_B.idx_m]) +
          proc_control_P.dmin[proc_control_B.idx_m];

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      }
    }

    // Update for Sin: '<S12>/Sine Wave'
    for (proc_control_B.idx_m = 0; proc_control_B.idx_m < 6;
         proc_control_B.idx_m++) {
      proc_control_DW.counter[proc_control_B.idx_m]++;
      if (proc_control_DW.counter[proc_control_B.idx_m] ==
          proc_control_P.waveDiscreteFrequency[proc_control_B.idx_m]) {
        proc_control_DW.counter[proc_control_B.idx_m] = 0;
      }
    }

    // End of Update for Sin: '<S12>/Sine Wave'

    // Update for UnitDelay: '<S1>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE_o[0] = proc_control_B.WorldPosition_n[0];
    proc_control_DW.UnitDelay_DSTATE_o[1] = proc_control_B.WorldPosition_n[1];
    proc_control_DW.UnitDelay_DSTATE_o[2] = proc_control_B.WorldPosition_n[2];
    proc_control_DW.UnitDelay_DSTATE_o[3] = proc_control_B.y_d[0];
    proc_control_DW.UnitDelay_DSTATE_o[4] = proc_control_B.y_d[1];
    proc_control_DW.UnitDelay_DSTATE_o[5] = proc_control_B.y_d[2];
    proc_control_DW.UnitDelay_DSTATE_o[6] = proc_control_B.y_d[3];

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_DW.DiscreteTimeIntegrator_IC_LOADI = 0U;
    if (proc_control_B.MATLABSystem_o4 > 0.0) {
      proc_control_DW.DiscreteTimeIntegrator_PrevRese = 1;
    } else if (proc_control_B.MATLABSystem_o4 < 0.0) {
      proc_control_DW.DiscreteTimeIntegrator_PrevRese = -1;
    } else if (proc_control_B.MATLABSystem_o4 == 0.0) {
      proc_control_DW.DiscreteTimeIntegrator_PrevRese = 0;
    } else {
      proc_control_DW.DiscreteTimeIntegrator_PrevRese = 2;
    }

    // Update for UnitDelay: '<S1>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE_o[7] = proc_control_B.t43;
    proc_control_DW.UnitDelay_DSTATE_o[10] = proc_control_B.t62;

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[0] =
      proc_control_B.WorldPosition_n[0] + proc_control_B.u2[0];

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   UnitDelay: '<S1>/Unit Delay'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] = proc_control_B.t62 +
      proc_control_B.c_f[0];

    // Update for UnitDelay: '<S1>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE_o[8] = proc_control_B.t45;
    proc_control_DW.UnitDelay_DSTATE_o[11] = proc_control_B.AngularRate_a_idx_1;

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[1] =
      proc_control_B.WorldPosition_n[1] + proc_control_B.u2[1];

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   UnitDelay: '<S1>/Unit Delay'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] =
      proc_control_B.AngularRate_a_idx_1 + proc_control_B.c_f[1];

    // Update for UnitDelay: '<S1>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE_o[9] = proc_control_B.BodyVelocity_c_idx_2;
    proc_control_DW.UnitDelay_DSTATE_o[12] = proc_control_B.t39;

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[2] =
      proc_control_B.WorldPosition_n[2] + proc_control_B.rtb_u2_f;

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   UnitDelay: '<S1>/Unit Delay'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] = proc_control_B.t39 +
      proc_control_B.t58;
    if (proc_control_B.MATLABSystem_o4 > 0.0) {
      proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 1;
    } else if (proc_control_B.MATLABSystem_o4 < 0.0) {
      proc_control_DW.DiscreteTimeIntegrator1_PrevRes = -1;
    } else if (proc_control_B.MATLABSystem_o4 == 0.0) {
      proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 0;
    } else {
      proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 2;
    }

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_DW.DiscreteTimeIntegrator2_IC_LOAD = 0U;
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] = proc_control_B.y_d_a[0]
      + proc_control_B.n[0];
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] = proc_control_B.y_d_a[1]
      + proc_control_B.n[1];
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] = proc_control_B.y_d_a[2]
      + proc_control_B.n[2];
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[3] = proc_control_B.y_d_a[3]
      + proc_control_B.t40;
    if (proc_control_B.MATLABSystem_o4 > 0.0) {
      proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 1;
    } else if (proc_control_B.MATLABSystem_o4 < 0.0) {
      proc_control_DW.DiscreteTimeIntegrator2_PrevRes = -1;
    } else if (proc_control_B.MATLABSystem_o4 == 0.0) {
      proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 0;
    } else {
      proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 2;
    }

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator3'
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] = proc_control_B.t43 +
      proc_control_B.t44;
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] = proc_control_B.t45 +
      proc_control_B.t35_tmp;
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] =
      proc_control_B.BodyVelocity_c_idx_2 + proc_control_B.t41;
    if (proc_control_B.MATLABSystem_o4 > 0.0) {
      proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 1;
    } else if (proc_control_B.MATLABSystem_o4 < 0.0) {
      proc_control_DW.DiscreteTimeIntegrator3_PrevRes = -1;
    } else if (proc_control_B.MATLABSystem_o4 == 0.0) {
      proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 0;
    } else {
      proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 2;
    }

    // Update for RandomNumber: '<S28>/White Noise'
    proc_control_DW.NextOutput = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_j) * proc_control_P.WhiteNoise_StdDev +
      proc_control_P.WhiteNoise_Mean;

    // Update for RandomNumber: '<S29>/White Noise'
    proc_control_DW.NextOutput_b = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_d) * proc_control_P.WhiteNoise_StdDev_d +
      proc_control_P.WhiteNoise_Mean_e;

    // Update for RandomNumber: '<S30>/White Noise'
    proc_control_DW.NextOutput_g = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_e) * proc_control_P.WhiteNoise_StdDev_e +
      proc_control_P.WhiteNoise_Mean_c;

    // Update for RandomNumber: '<S31>/White Noise'
    proc_control_DW.NextOutput_l = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_n) * proc_control_P.WhiteNoise_StdDev_j +
      proc_control_P.WhiteNoise_Mean_p;

    // Update for RandomNumber: '<S32>/White Noise'
    proc_control_DW.NextOutput_e = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_b) * proc_control_P.WhiteNoise_StdDev_p +
      proc_control_P.WhiteNoise_Mean_l;
  }

  // End of Outputs for SubSystem: '<Root>/Modèle Physique'

  // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
  //   EnablePort: '<S4>/Enable'

  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    proc_control_DW.ROSOutput_MODE = (proc_control_B.MATLABSystem_o3 > 0.0);
  }

  if (proc_control_DW.ROSOutput_MODE) {
    // MATLAB Function: '<S93>/MATLAB Function'
    proc_control_B.msg_i.Position.X = proc_control_B.WorldPosition_n[0];
    proc_control_B.msg_i.Position.Y = proc_control_B.WorldPosition_n[1];
    proc_control_B.msg_i.Position.Z = proc_control_B.WorldPosition_n[2];
    proc_control_B.msg_i.Orientation.X = proc_control_B.y_d[1];
    proc_control_B.msg_i.Orientation.Y = proc_control_B.y_d[2];
    proc_control_B.msg_i.Orientation.Z = proc_control_B.y_d[3];
    proc_control_B.msg_i.Orientation.W = proc_control_B.y_d[0];

    // Outputs for Atomic SubSystem: '<S93>/Publish'
    // MATLABSystem: '<S106>/SinkBlock'
    Pub_proc_control_75.publish(&proc_control_B.msg_i);

    // End of Outputs for SubSystem: '<S93>/Publish'

    // MATLAB Function: '<S89>/MATLAB Function' incorporates:
    //   Constant: '<S94>/Constant'

    proc_control_B.msg_b = proc_control_P.Constant_Value_h;
    proc_control_B.msg_b.XVelBtm = proc_control_B.y_e[0];
    proc_control_B.msg_b.YVelBtm = proc_control_B.y_e[1];
    proc_control_B.msg_b.ZVelBtm = proc_control_B.y_e[2];

    // Outputs for Atomic SubSystem: '<S89>/Publish'
    // MATLABSystem: '<S96>/SinkBlock'
    Pub_proc_control_41.publish(&proc_control_B.msg_b);

    // End of Outputs for SubSystem: '<S89>/Publish'

    // BusAssignment: '<S90>/Bus Assignment' incorporates:
    //   DataTypeConversion: '<S90>/Cast To Double'

    proc_control_B.BusAssignment_h.Data = static_cast<real32_T>
      (proc_control_B.PressureDepth);

    // Outputs for Atomic SubSystem: '<S90>/Publish Depth'
    // MATLABSystem: '<S98>/SinkBlock'
    Pub_proc_control_243.publish(&proc_control_B.BusAssignment_h);

    // End of Outputs for SubSystem: '<S90>/Publish Depth'

    // MATLAB Function: '<S91>/MATLAB Function' incorporates:
    //   Constant: '<S99>/Constant'
    //   Sum: '<S14>/Sum5'

    proc_control_B.msg_c_b = proc_control_P.Constant_Value_g;
    proc_control_B.msg_c_b.AngularVelocity.X = proc_control_B.AngularRate_d[0];
    proc_control_B.msg_c_b.AngularVelocity.Y = proc_control_B.AngularRate_d[1];
    proc_control_B.msg_c_b.AngularVelocity.Z = proc_control_B.AngularRate_d[2];
    proc_control_B.msg_c_b.Orientation.X = proc_control_B.Quaternion[1];
    proc_control_B.msg_c_b.Orientation.Y = proc_control_B.Quaternion[2];
    proc_control_B.msg_c_b.Orientation.Z = proc_control_B.Quaternion[3];
    proc_control_B.msg_c_b.Orientation.W = proc_control_B.Quaternion[0];
    proc_control_B.msg_c_b.LinearAcceleration.X =
      proc_control_B.LinearAcceleration[0];
    proc_control_B.msg_c_b.LinearAcceleration.Y =
      proc_control_B.LinearAcceleration[1];
    proc_control_B.msg_c_b.LinearAcceleration.Z =
      proc_control_B.LinearAcceleration[2];

    // Outputs for Atomic SubSystem: '<S91>/Publish imu_info'
    // MATLABSystem: '<S101>/SinkBlock'
    Pub_proc_control_47.publish(&proc_control_B.msg_c_b);

    // End of Outputs for SubSystem: '<S91>/Publish imu_info'

    // ZeroOrderHold: '<S92>/Zero-Order Hold'
    if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
      // BusAssignment: '<S92>/Bus Assignment' incorporates:
      //   Constant: '<S102>/Constant'
      //   MATLABSystem: '<S33>/MATLAB System'

      proc_control_B.BusAssignment = proc_control_P.Constant_Value_k5;
      proc_control_B.BusAssignment.Heading = proc_control_B.MATLABSystem_o2_k[0];
      proc_control_B.BusAssignment.Elevation = proc_control_B.MATLABSystem_o2_k
        [1];

      // Outputs for Atomic SubSystem: '<S92>/Publish Ping'
      // MATLABSystem: '<S103>/SinkBlock'
      Pub_proc_control_350.publish(&proc_control_B.BusAssignment);

      // End of Outputs for SubSystem: '<S92>/Publish Ping'
    }

    // End of ZeroOrderHold: '<S92>/Zero-Order Hold'
  }

  // End of Outputs for SubSystem: '<Root>/ROS Output'
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // MATLAB Function: '<S310>/MATLAB Function2' incorporates:
    //   Merge generated from: '<S9>/Merge'

    proc_control_B.msg.Position.X = proc_control_B.target[0];
    proc_control_B.msg.Position.Y = proc_control_B.target[1];
    proc_control_B.msg.Position.Z = proc_control_B.target[2];
    proc_control_B.msg.Orientation.W = proc_control_B.target[3];
    proc_control_B.msg.Orientation.X = proc_control_B.target[4];
    proc_control_B.msg.Orientation.Y = proc_control_B.target[5];
    proc_control_B.msg.Orientation.Z = proc_control_B.target[6];

    // ZeroOrderHold: '<S310>/Zero-Order Hold'
    if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
      // ZeroOrderHold: '<S310>/Zero-Order Hold'
      proc_control_B.ZeroOrderHold = proc_control_B.msg;
    }

    // End of ZeroOrderHold: '<S310>/Zero-Order Hold'
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
    // Outputs for Atomic SubSystem: '<S310>/Publish5'
    // MATLABSystem: '<S321>/SinkBlock'
    Pub_proc_control_184_1596.publish(&proc_control_B.ZeroOrderHold);

    // End of Outputs for SubSystem: '<S310>/Publish5'
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // Update for Atomic SubSystem: '<Root>/Subsystem1'
    // Update for Delay: '<S10>/Delay'
    proc_control_DW.Delay_DSTATE_e = proc_control_B.y;

    // End of Update for SubSystem: '<Root>/Subsystem1'

    // Update for Delay: '<S247>/ ' incorporates:
    //   SignalConversion generated from: '<S5>/thrust'

    std::memcpy(&proc_control_DW._DSTATE[0],
                &proc_control_B.BufferToMakeInportVirtual_Inser[0], sizeof
                (real_T) << 3U);
  }

  rate_scheduler((&proc_control_M));
}

// Model initialize function
void proc_control::initialize()
{
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));

  {
    static const real_T tmp_j[33]{ 0.0, 1.0, 0.0, 0.1, 1.0, 0.0, 0.2, 1.0, 0.0,
      0.30000000000000004, 1.0, 0.0, 0.4, 1.0, 0.0, 0.5, 1.0, 0.0, 0.6, 1.0, 0.0,
      0.7, 1.0, 0.0, 0.8, 1.0, 0.0, 0.9, 1.0, 0.0, 1.0, 1.0, 0.0 };

    static const real_T tmp_n[13]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0 };

    static const char_T tmp_1[38]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'k', 'i', 'l', 'l', '_', 'm', 'i', 's', 's', 'i', 'o', 'n', '/', 'k',
      'i', 'l', 'l', '_', 's', 'w', 'i', 't', 'c', 'h', '_', 'm', 's', 'g' };

    static const char_T tmp_r[36]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 's', 'e', 't', '_', 'p', 'i', 'n',
      'g', 'e', 'r', '_', 'l', 'o', 'c', 'a', 't', 'i', 'o', 'n' };

    static const char_T tmp_g[34]{ '/', 'p', 'r', 'o', 'c', '_', 'p', 'l', 'a',
      'n', 'n', 'e', 'r', '/', 's', 'e', 'n', 'd', '_', 't', 'r', 'a', 'j', 'e',
      'c', 't', 'o', 'r', 'y', '_', 'l', 'i', 's', 't' };

    static const char_T tmp_2[33]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 's', 't', 'a', 'r', 't', '_', 's',
      'i', 'm', 'u', 'l', 'a', 't', 'i', 'o', 'n' };

    static const char_T tmp_s[32]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'p', 'i', 'n', 'g', 'e', 'r', '_',
      'l', 'o', 'c', 'a', 't', 'i', 'o', 'n' };

    static const char_T tmp_o[31]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 't', 'h', 'r', 'u', 's', 't', 'e', 'r', '/', 't', 'h', 'r', 'u', 's',
      't', 'e', 'r', '_', 'p', 'w', 'm' };

    static const char_T tmp_4[30]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'r', 'e', 's', 'e', 't', '_', 't', 'r', 'a', 'j',
      'e', 'c', 't', 'o', 'r', 'y' };

    static const char_T tmp_6[29]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'd', 'v', 'l', '_', 'v', 'e', 'l',
      'o', 'c', 'i', 't', 'y' };

    static const char_T tmp_q[29]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 't', 'h', 'r', 'u', 's', 't', 'e',
      'r', '_', 'r', 'p', 'm' };

    static const char_T tmp_p[28]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 'c', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', '_',
      'i', 'n', 'f', 'o' };

    static const char_T tmp_u[28]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'c', 'u', 'r', 'r', 'e', 'n', 't', '_', 't', 'a',
      'r', 'g', 'e', 't' };

    static const char_T tmp_l[27]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 's', 'e', 't', '_', 'm', 'p', 'c', '_', 'g', 'a',
      'i', 'n', 's' };

    static const char_T tmp_m[27]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'p', 'o', 'w', 'e', 'r', '/', 'c', 'u', 'r', 'r', 'e', 'n', 't', '_',
      'n', 'o', 't' };

    static const char_T tmp_t[27]{ 'p', 'r', 'o', 'c', '_', 's', 'i', 'm', 'u',
      'l', 'a', 't', 'i', 'o', 'n', '/', 't', 'r', 'u', 'e', '_', 's', 't', 'a',
      't', 'e', 's' };

    static const char_T tmp_a[26]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'd', 'v', 'l', '/', 'd', 'v', 'l', '_', 'v', 'e', 'l', 'o', 'c', 'i',
      't', 'y' };

    static const char_T tmp_5[25]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'i', 'm', 'u', '_', 'i', 'n', 'f',
      'o' };

    static const char_T tmp[22]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 's', 'e', 't', '_', 'm', 'o', 'd', 'e' };

    static const char_T tmp_7[22]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'd', 'e', 'p', 't', 'h' };

    static const char_T tmp_9[22]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'i', 'm', 'u', '/', 'i', 'm', 'u', '_', 'i', 'n', 'f', 'o' };

    static const char_T tmp_e[22]{ '/', 't', 'e', 'l', 'e', 'm', 'e', 't', 'r',
      'y', '/', 'a', 'u', 'v', '_', 's', 't', 'a', 't', 'e', 's', '/' };

    static const char_T tmp_f[22]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 's', 'e', 'n', 's', 'o', 'r', '_', 'o', 'n' };

    static const char_T tmp_8[21]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'p', 'i', 'n', 'g' };

    static const char_T tmp_b[21]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'd', 'e', 'p', 't', 'h', '/', 'd', 'e', 'p', 't', 'h' };

    static const char_T tmp_i[21]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 'a', 'd', 'd', '_', 'p', 'o', 's', 'e' };

    static const char_T tmp_0[19]{ '/', 'p', 'r', 'o', 'c', '_', 'n', 'a', 'v',
      '/', 'r', 'e', 's', 'e', 't', '_', 'p', 'o', 's' };

    static const char_T tmp_3[18]{ '/', 't', 'e', 'l', 'e', 'm', 'e', 't', 'r',
      'y', '/', 'd', 'r', 'y', '_', 'r', 'u', 'n' };

    static const char_T tmp_d[18]{ '/', 'p', 'r', 'o', 'c', '_', 'n', 'a', 'v',
      '/', 'a', 'u', 'v', '_', 'p', 'o', 's', 'e' };

    static const char_T tmp_c[16]{ '/', 'p', 'r', 'o', 'c', '_', 'h', 'y', 'd',
      'r', 'o', '/', 'p', 'i', 'n', 'g' };

    static const char_T tmp_h[15]{ '/', 's', 'p', 'a', 'c', 'e', 'n', 'a', 'v',
      '/', 't', 'w', 'i', 's', 't' };

    static const int8_T tmp_k[7]{ 0, 0, 0, 1, 0, 0, 0 };

    int32_T i;
    int32_T t;
    uint32_T tseed;
    char_T b_zeroDelimTopic[16];

    // Start for SwitchCase: '<S9>/Switch Case'
    proc_control_DW.SwitchCase_ActiveSubsystem = -1;
    proc_control_PrevZCX.Trajectorygenerator_Reset_ZCE = POS_ZCSIG;

    // InitializeConditions for Delay: '<S247>/ '
    std::memcpy(&proc_control_DW._DSTATE[0], &proc_control_P._InitialCondition[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for Atomic SubSystem: '<Root>/Subsystem1'
    // InitializeConditions for Delay: '<S10>/Delay'
    proc_control_DW.Delay_DSTATE_e = proc_control_P.Delay_InitialCondition_c;

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S331>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S337>/In1' incorporates:
    //   Outport: '<S337>/Out1'

    proc_control_B.In1_i2 = proc_control_P.Out1_Y0_kc;

    // End of SystemInitialize for SubSystem: '<S331>/Enabled Subsystem'

    // Start for MATLABSystem: '<S331>/SourceBlock'
    proc_control_DW.obj_mt.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_mt.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_B.b_zeroDelimTopic_av[i] = tmp[i];
    }

    proc_control_B.b_zeroDelimTopic_av[22] = '\x00';
    Sub_proc_control_185_13.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_av[0], 1);
    proc_control_DW.obj_mt.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S331>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe2'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe3'
    // Start for MATLABSystem: '<S332>/SourceBlock'
    proc_control_DW.obj_oz.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_oz.isInitialized = 1;
    for (i = 0; i < 19; i++) {
      proc_control_B.b_zeroDelimTopic_bn[i] = tmp_0[i];
    }

    proc_control_B.b_zeroDelimTopic_bn[19] = '\x00';
    Sub_proc_control_185_14.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_bn[0], 1);
    proc_control_DW.obj_oz.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S332>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe3'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S330>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S336>/In1' incorporates:
    //   Outport: '<S336>/Out1'

    proc_control_B.In1_cx = proc_control_P.Out1_Y0_h;

    // End of SystemInitialize for SubSystem: '<S330>/Enabled Subsystem'

    // Start for MATLABSystem: '<S330>/SourceBlock'
    proc_control_DW.obj_hb.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hb.isInitialized = 1;
    for (i = 0; i < 38; i++) {
      proc_control_B.b_zeroDelimTopic[i] = tmp_1[i];
    }

    proc_control_B.b_zeroDelimTopic[38] = '\x00';
    Sub_proc_control_185_12.createSubscriber(&proc_control_B.b_zeroDelimTopic[0],
      1);
    proc_control_DW.obj_hb.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S330>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S10>/startSim'
    // SystemInitialize for Enabled SubSystem: '<S335>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S341>/In1' incorporates:
    //   Outport: '<S341>/Out1'

    proc_control_B.In1_n = proc_control_P.Out1_Y0_g;

    // End of SystemInitialize for SubSystem: '<S335>/Enabled Subsystem'

    // Start for MATLABSystem: '<S335>/SourceBlock'
    proc_control_DW.obj_bh.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_bh.isInitialized = 1;
    for (i = 0; i < 33; i++) {
      proc_control_B.b_zeroDelimTopic_d[i] = tmp_2[i];
    }

    proc_control_B.b_zeroDelimTopic_d[33] = '\x00';
    Sub_proc_control_185_11.createSubscriber(&proc_control_B.b_zeroDelimTopic_d
      [0], 1);
    proc_control_DW.obj_bh.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S335>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/startSim'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe5'
    // SystemInitialize for Enabled SubSystem: '<S334>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S340>/In1' incorporates:
    //   Outport: '<S340>/Out1'

    proc_control_B.In1_f1 = proc_control_P.Out1_Y0_a;

    // End of SystemInitialize for SubSystem: '<S334>/Enabled Subsystem'

    // Start for MATLABSystem: '<S334>/SourceBlock'
    proc_control_DW.obj_fx.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fx.isInitialized = 1;
    for (i = 0; i < 18; i++) {
      proc_control_B.b_zeroDelimTopic_h[i] = tmp_3[i];
    }

    proc_control_B.b_zeroDelimTopic_h[18] = '\x00';
    Sub_proc_control_185_270.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_h[0], 1);
    proc_control_DW.obj_fx.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S334>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe5'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe4'
    // Start for MATLABSystem: '<S333>/SourceBlock'
    proc_control_DW.obj_h.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_h.isInitialized = 1;
    for (i = 0; i < 30; i++) {
      proc_control_B.b_zeroDelimTopic_f[i] = tmp_4[i];
    }

    proc_control_B.b_zeroDelimTopic_f[30] = '\x00';
    Sub_proc_control_185_268.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_f[0], 1);
    proc_control_DW.obj_h.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S333>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe4'

    // Start for MATLABSystem: '<S10>/MATLAB System'
    proc_control_DW.obj_mv.initial_mode = proc_control_P.mode.init;
    proc_control_DW.obj_mv.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S10>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    for (i = 0; i < 7; i++) {
      proc_control_DW.obj_mv.m_initCond[i] = 0.0;
    }

    proc_control_DW.obj_mv.m_mode = proc_control_DW.obj_mv.initial_mode;
    proc_control_DW.obj_mv.m_killStatus = 0.0;
    proc_control_DW.obj_mv.m_simulation = 0.0;
    proc_control_DW.obj_mv.m_reset = 0.0;
    proc_control_DW.obj_mv.m_trajClear = 0.0;
    proc_control_DW.obj_mv.m_notDryRun = 1.0;

    // End of InitializeConditions for MATLABSystem: '<S10>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<Root>/Subsystem1'

    // SystemInitialize for IfAction SubSystem: '<S3>/Simulation'
    // SystemInitialize for Atomic SubSystem: '<S66>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S76>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S80>/In1' incorporates:
    //   Outport: '<S80>/Out1'

    proc_control_B.In1_pd = proc_control_P.Out1_Y0_f;

    // End of SystemInitialize for SubSystem: '<S76>/Enabled Subsystem'

    // Start for MATLABSystem: '<S76>/SourceBlock' incorporates:
    //   MATLABSystem: '<S101>/SinkBlock'

    proc_control_DW.obj_i4.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_i4.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S91>/Publish imu_info'
    for (i = 0; i < 25; i++) {
      proc_control_B.b_zeroDelimTopic_dv[i] = tmp_5[i];
    }

    proc_control_B.b_zeroDelimTopic_dv[25] = '\x00';

    // End of SystemInitialize for SubSystem: '<S91>/Publish imu_info'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 26; i++) {
      proc_control_B.b_zeroDelimTopic_d4[i] =
        proc_control_B.b_zeroDelimTopic_dv[i];
    }

    Sub_proc_control_31_1241.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_d4[0], 1);
    proc_control_DW.obj_i4.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S76>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S66>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S66>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S78>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S82>/In1' incorporates:
    //   Outport: '<S82>/Out1'

    proc_control_B.In1_c = proc_control_P.Out1_Y0_ma;

    // End of SystemInitialize for SubSystem: '<S78>/Enabled Subsystem'

    // Start for MATLABSystem: '<S78>/SourceBlock' incorporates:
    //   MATLABSystem: '<S96>/SinkBlock'

    proc_control_DW.obj_bg.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_bg.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S89>/Publish'
    for (i = 0; i < 29; i++) {
      proc_control_B.b_zeroDelimTopic_o[i] = tmp_6[i];
    }

    proc_control_B.b_zeroDelimTopic_o[29] = '\x00';

    // End of SystemInitialize for SubSystem: '<S89>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 30; i++) {
      proc_control_B.b_zeroDelimTopic_j[i] = proc_control_B.b_zeroDelimTopic_o[i];
    }

    Sub_proc_control_31_1242.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_j[0], 1);
    proc_control_DW.obj_bg.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S78>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S66>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S66>/Subscribe depth'
    // SystemInitialize for Enabled SubSystem: '<S77>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S81>/In1' incorporates:
    //   Outport: '<S81>/Out1'

    proc_control_B.In1_om = proc_control_P.Out1_Y0_n;

    // End of SystemInitialize for SubSystem: '<S77>/Enabled Subsystem'

    // Start for MATLABSystem: '<S77>/SourceBlock' incorporates:
    //   MATLABSystem: '<S98>/SinkBlock'

    proc_control_DW.obj_df1.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_df1.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S90>/Publish Depth'
    for (i = 0; i < 22; i++) {
      proc_control_B.b_zeroDelimTopic_av[i] = tmp_7[i];
    }

    proc_control_B.b_zeroDelimTopic_av[22] = '\x00';

    // End of SystemInitialize for SubSystem: '<S90>/Publish Depth'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 23; i++) {
      proc_control_B.b_zeroDelimTopic_fn[i] =
        proc_control_B.b_zeroDelimTopic_av[i];
    }

    Sub_proc_control_31_1305.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_fn[0], 1);
    proc_control_DW.obj_df1.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S77>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S66>/Subscribe depth'

    // SystemInitialize for Atomic SubSystem: '<S66>/Subscribe2'
    // Start for MATLABSystem: '<S79>/SourceBlock' incorporates:
    //   MATLABSystem: '<S103>/SinkBlock'

    proc_control_DW.obj_hx.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hx.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S92>/Publish Ping'
    for (i = 0; i < 21; i++) {
      proc_control_B.b_zeroDelimTopic_kl[i] = tmp_8[i];
    }

    proc_control_B.b_zeroDelimTopic_kl[21] = '\x00';

    // End of SystemInitialize for SubSystem: '<S92>/Publish Ping'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 22; i++) {
      proc_control_B.b_zeroDelimTopic_jz[i] =
        proc_control_B.b_zeroDelimTopic_kl[i];
    }

    Sub_proc_control_31_1318.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_jz[0], 1);
    proc_control_DW.obj_hx.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S79>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S66>/Subscribe2'
    // End of SystemInitialize for SubSystem: '<S3>/Simulation'

    // SystemInitialize for IfAction SubSystem: '<S3>/AUV8'
    // SystemInitialize for Atomic SubSystem: '<S65>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S68>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S72>/In1' incorporates:
    //   Outport: '<S72>/Out1'

    proc_control_B.In1_p = proc_control_P.Out1_Y0_l;

    // End of SystemInitialize for SubSystem: '<S68>/Enabled Subsystem'

    // Start for MATLABSystem: '<S68>/SourceBlock'
    proc_control_DW.obj_l.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_l.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_B.b_zeroDelimTopic_fn[i] = tmp_9[i];
    }

    proc_control_B.b_zeroDelimTopic_fn[22] = '\x00';
    Sub_proc_control_31_5.createSubscriber(&proc_control_B.b_zeroDelimTopic_fn[0],
      1);
    proc_control_DW.obj_l.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S68>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S65>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S65>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S69>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S73>/In1' incorporates:
    //   Outport: '<S73>/Out1'

    proc_control_B.In1_i = proc_control_P.Out1_Y0_p;

    // End of SystemInitialize for SubSystem: '<S69>/Enabled Subsystem'

    // Start for MATLABSystem: '<S69>/SourceBlock'
    proc_control_DW.obj_dh.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_dh.isInitialized = 1;
    for (i = 0; i < 26; i++) {
      proc_control_B.b_zeroDelimTopic_l[i] = tmp_a[i];
    }

    proc_control_B.b_zeroDelimTopic_l[26] = '\x00';
    Sub_proc_control_31_1235.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_l[0], 1);
    proc_control_DW.obj_dh.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S69>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S65>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S65>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S70>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S74>/In1' incorporates:
    //   Outport: '<S74>/Out1'

    proc_control_B.In1_e = proc_control_P.Out1_Y0_nb;

    // End of SystemInitialize for SubSystem: '<S70>/Enabled Subsystem'

    // Start for MATLABSystem: '<S70>/SourceBlock'
    proc_control_DW.obj_ow.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ow.isInitialized = 1;
    for (i = 0; i < 21; i++) {
      proc_control_B.b_zeroDelimTopic_jz[i] = tmp_b[i];
    }

    proc_control_B.b_zeroDelimTopic_jz[21] = '\x00';
    Sub_proc_control_31_1302.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_jz[0], 1);
    proc_control_DW.obj_ow.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S70>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S65>/Subscribe2'

    // SystemInitialize for Atomic SubSystem: '<S65>/Subscribe3'
    // Start for MATLABSystem: '<S71>/SourceBlock'
    proc_control_DW.obj_p0.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_p0.isInitialized = 1;
    for (i = 0; i < 16; i++) {
      proc_control_B.b_zeroDelimTopic_eg[i] = tmp_c[i];
    }

    proc_control_B.b_zeroDelimTopic_eg[16] = '\x00';
    Sub_proc_control_31_1321.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_eg[0], 1);
    proc_control_DW.obj_p0.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S71>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S65>/Subscribe3'
    // End of SystemInitialize for SubSystem: '<S3>/AUV8'

    // SystemInitialize for Enabled SubSystem: '<S8>/DVL Mesurments'
    // InitializeConditions for Delay: '<S267>/Delay'
    proc_control_DW.Delay_DSTATE_i = proc_control_P.Delay_InitialCondition_l;

    // SystemInitialize for Enabled SubSystem: '<S267>/Subsystem2'
    // SystemInitialize for Fcn: '<S271>/q0' incorporates:
    //   Outport: '<S270>/Quat'

    proc_control_B.q0 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S271>/q1' incorporates:
    //   Outport: '<S270>/Quat'

    proc_control_B.q1 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S271>/q2' incorporates:
    //   Outport: '<S270>/Quat'

    proc_control_B.q2 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S271>/q3' incorporates:
    //   Outport: '<S270>/Quat'

    proc_control_B.q3 = proc_control_P.Quat_Y0;

    // End of SystemInitialize for SubSystem: '<S267>/Subsystem2'
    // End of SystemInitialize for SubSystem: '<S8>/DVL Mesurments'

    // SystemInitialize for Enabled SubSystem: '<S8>/Detph Mesurments'
    // InitializeConditions for UnitDelay: '<S243>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE[0] =
      proc_control_P.UnitDelay_InitialCondition_g[0];
    proc_control_DW.UnitDelay_DSTATE[1] =
      proc_control_P.UnitDelay_InitialCondition_g[1];
    proc_control_DW.UnitDelay_DSTATE[2] =
      proc_control_P.UnitDelay_InitialCondition_g[2];
    proc_control_DW.UnitDelay_DSTATE[3] =
      proc_control_P.UnitDelay_InitialCondition_g[3];

    // SystemInitialize for Sum: '<S243>/Sum' incorporates:
    //   Outport: '<S243>/Depth Measurments'

    proc_control_B.zposition = proc_control_P.DepthMeasurments_Y0;

    // End of SystemInitialize for SubSystem: '<S8>/Detph Mesurments'

    // SystemInitialize for Enabled SubSystem: '<S3>/Subsystem'
    // InitializeConditions for Memory: '<S87>/Memory'
    proc_control_DW.Memory_PreviousInput_i =
      proc_control_P.MinMaxRunningResettable_vinit;

    // InitializeConditions for Memory: '<S88>/Memory'
    proc_control_DW.Memory_PreviousInput_f =
      proc_control_P.MinMaxRunningResettable1_vinit;

    // SystemInitialize for Outport: '<S67>/y'
    proc_control_B.y = proc_control_P.y_Y0;

    // End of SystemInitialize for SubSystem: '<S3>/Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S8>/Subsystem'
    // Start for DataStoreMemory: '<S294>/DataStoreMemory - P'
    std::memcpy(&proc_control_DW.P[0],
                &proc_control_P.DataStoreMemoryP_InitialValue[0], 169U * sizeof
                (real_T));

    // SystemInitialize for Enabled SubSystem: '<S294>/Correct1'
    // SystemInitialize for Outport: '<S295>/yBlockOrdering'
    proc_control_B.blockOrdering_o = proc_control_P.yBlockOrdering_Y0;

    // End of SystemInitialize for SubSystem: '<S294>/Correct1'
    for (i = 0; i < 13; i++) {
      // Start for DataStoreMemory: '<S294>/DataStoreMemory - x'
      proc_control_DW.x[i] = proc_control_P.DataStoreMemoryx_InitialValue[i];

      // SystemInitialize for DataStoreRead: '<S298>/Data Store Read' incorporates:
      //   DataStoreMemory: '<S294>/DataStoreMemory - x'
      //   Outport: '<S246>/xhat'

      proc_control_B.DataStoreRead[i] = proc_control_P.xhat_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S8>/Subsystem'

    // SystemInitialize for Enabled SubSystem: '<Root>/Sensor Manager'
    // SystemInitialize for Atomic SubSystem: '<S115>/Publish'
    // Start for MATLABSystem: '<S122>/SinkBlock'
    proc_control_DW.obj_g.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_g.isInitialized = 1;
    for (i = 0; i < 18; i++) {
      proc_control_B.b_zeroDelimTopic_h[i] = tmp_d[i];
    }

    proc_control_B.b_zeroDelimTopic_h[18] = '\x00';
    Pub_proc_control_388.createPublisher(&proc_control_B.b_zeroDelimTopic_h[0],
      1);
    proc_control_DW.obj_g.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S122>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S115>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S116>/Publish'
    // Start for MATLABSystem: '<S126>/SinkBlock'
    proc_control_DW.obj_ag.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ag.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_B.b_zeroDelimTopic_fn[i] = tmp_e[i];
    }

    proc_control_B.b_zeroDelimTopic_fn[22] = '\x00';
    Pub_proc_control_163.createPublisher(&proc_control_B.b_zeroDelimTopic_fn[0],
      1);
    proc_control_DW.obj_ag.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S126>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S116>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S114>/Publish'
    // Start for MATLABSystem: '<S118>/SinkBlock'
    proc_control_DW.obj_e.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_e.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_B.b_zeroDelimTopic_fn[i] = tmp_f[i];
    }

    proc_control_B.b_zeroDelimTopic_fn[22] = '\x00';
    Pub_proc_control_116.createPublisher(&proc_control_B.b_zeroDelimTopic_fn[0],
      1);
    proc_control_DW.obj_e.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S118>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S114>/Publish'

    // SystemInitialize for SignalConversion generated from: '<S6>/Output' incorporates:
    //   Outport: '<S6>/Output'

    proc_control_B.WorldPosition[0] = proc_control_P.Output_Y0.WorldPosition[0];
    proc_control_B.WorldPosition[1] = proc_control_P.Output_Y0.WorldPosition[1];
    proc_control_B.WorldPosition[2] = proc_control_P.Output_Y0.WorldPosition[2];

    // SystemInitialize for SignalConversion generated from: '<S6>/Output' incorporates:
    //   Outport: '<S6>/Output'

    proc_control_B.qS2W[0] = proc_control_P.Output_Y0.qS2W[0];
    proc_control_B.qS2W[1] = proc_control_P.Output_Y0.qS2W[1];
    proc_control_B.qS2W[2] = proc_control_P.Output_Y0.qS2W[2];
    proc_control_B.qS2W[3] = proc_control_P.Output_Y0.qS2W[3];

    // End of SystemInitialize for SubSystem: '<Root>/Sensor Manager'

    // SystemInitialize for Atomic SubSystem: '<S309>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S317>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S318>/In1' incorporates:
    //   Outport: '<S318>/Out1'

    proc_control_B.In1 = proc_control_P.Out1_Y0;

    // End of SystemInitialize for SubSystem: '<S317>/Enabled Subsystem'

    // Start for MATLABSystem: '<S317>/SourceBlock'
    proc_control_DW.obj_df.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_df.isInitialized = 1;
    for (i = 0; i < 34; i++) {
      proc_control_B.b_zeroDelimTopic_a[i] = tmp_g[i];
    }

    proc_control_B.b_zeroDelimTopic_a[34] = '\x00';
    Sub_proc_control_184_1581.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_a[0], 1);
    proc_control_DW.obj_df.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S317>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S309>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S308>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S315>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S316>/In1' incorporates:
    //   Outport: '<S316>/Out1'

    proc_control_B.In1_od = proc_control_P.Out1_Y0_pb;

    // End of SystemInitialize for SubSystem: '<S315>/Enabled Subsystem'

    // Start for MATLABSystem: '<S315>/SourceBlock'
    proc_control_DW.obj_cs.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_cs.isInitialized = 1;
    for (i = 0; i < 15; i++) {
      b_zeroDelimTopic[i] = tmp_h[i];
    }

    b_zeroDelimTopic[15] = '\x00';
    Sub_proc_control_184_1122.createSubscriber(&b_zeroDelimTopic[0], 2);
    proc_control_DW.obj_cs.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S315>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S308>/Subscribe2'

    // SystemInitialize for IfAction SubSystem: '<S9>/SubsystemAuto'
    // InitializeConditions for UnitDelay: '<S322>/Delay Input1'
    //
    //  Block description for '<S322>/Delay Input1':
    //
    //   Store in Global RAM

    proc_control_DW.DelayInput1_DSTATE = proc_control_P.DetectRisePositive_vinit;

    // Start for MATLABSystem: '<S311>/MATLAB System'
    proc_control_DW.obj_o.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S311>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    proc_control_DW.obj_o.dummy = 999.0;

    //  Chiffre NULL
    for (i = 0; i < 13; i++) {
      proc_control_DW.obj_o.emptyArray[i] = proc_control_DW.obj_o.dummy;
    }

    //  Vecteur pose NULL
    proc_control_DW.obj_o.targetReachedCount = 0.0;
    for (i = 0; i < 7; i++) {
      proc_control_DW.obj_o.initialPose[i] = 0.0;
    }

    //  Buffer trajectoire
    for (i = 0; i < 78000; i++) {
      proc_control_DW.obj_o.poseBuffer[i] = proc_control_DW.obj_o.dummy;
    }

    proc_control_DW.obj_o.bufferCount = 0.0;
    proc_control_DW.obj_o.done = false;
    proc_control_DW.obj_o.init = false;

    // End of InitializeConditions for MATLABSystem: '<S311>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S9>/SubsystemAuto'

    // SystemInitialize for IfAction SubSystem: '<S9>/singleWpts Trajectory'
    // InitializeConditions for Delay: '<S312>/Delay1'
    proc_control_DW.Delay1_DSTATE_c = proc_control_P.Delay1_InitialCondition_k;

    // SystemInitialize for Atomic SubSystem: '<S312>/Subscribe'
    // Start for MATLABSystem: '<S325>/SourceBlock'
    proc_control_DW.obj_hd.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hd.isInitialized = 1;
    for (i = 0; i < 21; i++) {
      proc_control_B.b_zeroDelimTopic_jz[i] = tmp_i[i];
    }

    proc_control_B.b_zeroDelimTopic_jz[21] = '\x00';
    Sub_proc_control_184_1168.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_jz[0], 1);
    proc_control_DW.obj_hd.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S325>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S312>/Subscribe'

    // SystemInitialize for Enabled SubSystem: '<S312>/Subsystem1'
    // SystemInitialize for DataTypeConversion: '<S326>/Data Type Conversion1' incorporates:
    //   Outport: '<S326>/Out1'

    proc_control_B.DataTypeConversion1[0] = proc_control_P.Out1_Y0_i;
    proc_control_B.DataTypeConversion1[1] = proc_control_P.Out1_Y0_i;

    // SystemInitialize for DataTypeConversion: '<S326>/Data Type Conversion2' incorporates:
    //   Outport: '<S326>/Out1'

    proc_control_B.DataTypeConversion2 = proc_control_P.Out1_Y0_i;

    // SystemInitialize for Enabled SubSystem: '<S312>/Pre-traitement'
    for (i = 0; i < 6; i++) {
      // SystemInitialize for DataTypeConversion: '<S326>/Data Type Conversion' incorporates:
      //   Outport: '<S326>/Out1'

      proc_control_B.DataTypeConversion[i] = proc_control_P.Out1_Y0_i;

      // SystemInitialize for Selector: '<S324>/Selector' incorporates:
      //   DataTypeConversion: '<S326>/Data Type Conversion'
      //   Outport: '<S324>/linWpts'
      //   Outport: '<S326>/Out1'

      proc_control_B.Selector[i] = proc_control_P.linWpts_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S312>/Subsystem1'
    for (i = 0; i < 8; i++) {
      // SystemInitialize for Selector: '<S324>/Selector1' incorporates:
      //   Outport: '<S324>/RotWpts'

      proc_control_B.Selector1[i] = proc_control_P.RotWpts_Y0;
    }

    // SystemInitialize for Concatenate: '<S324>/Matrix Concatenate' incorporates:
    //   Outport: '<S324>/time'

    proc_control_B.MatrixConcatenate[0] = proc_control_P.time_Y0;
    proc_control_B.MatrixConcatenate[1] = proc_control_P.time_Y0;
    for (i = 0; i < 7; i++) {
      // SystemInitialize for Selector: '<S324>/Selector4' incorporates:
      //   Outport: '<S324>/target'

      proc_control_B.Selector4[i] = proc_control_P.target_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S312>/Pre-traitement'

    // SystemInitialize for Resettable SubSystem: '<S312>/Trajectory generator'
    // InitializeConditions for DiscreteIntegrator: '<S327>/Discrete-Time Integrator' 
    proc_control_DW.DiscreteTimeIntegrator_DSTATE =
      proc_control_P.DiscreteTimeIntegrator_IC;

    // Start for MATLABSystem: '<S327>/Rotation Trajectory'
    std::memcpy(&proc_control_DW.obj_j.TimeScaling[0], &tmp_j[0], 33U * sizeof
                (real_T));
    proc_control_DW.obj_j.isInitialized = 1;
    proc_control_DW.obj_j.TunablePropsChanged = false;

    // Start for MATLABSystem: '<S329>/Polynomial Trajectory1'
    std::memset(&proc_control_DW.obj_jo.AccelerationBoundaryCondition[0], 0, 10U
                * sizeof(real_T));
    proc_control_DW.obj_jo.isInitialized = 0;
    for (i = 0; i < 6; i++) {
      proc_control_DW.obj_jo.VelocityBoundaryCondition[i] =
        proc_control_P.PolynomialTrajectory1_VelocityB[i];
    }

    proc_control_DW.obj_jo.isInitialized = 1;
    proc_control_DW.obj_jo.TunablePropsChanged = false;

    // End of Start for MATLABSystem: '<S329>/Polynomial Trajectory1'
    // End of SystemInitialize for SubSystem: '<S312>/Trajectory generator'

    // InitializeConditions for MATLABSystem: '<S312>/MATLAB System1'
    // ========================================================================== 
    //  Fonctions Principales
    // ========================================================================== 
    //  Fonction appeler a l'initialisation
    //  Perform one-time calculations, such as computing constants
    //  Fonction Reset
    //  Initialize / reset discrete-state properties
    for (i = 0; i < 18; i++) {
      proc_control_DW.obj_a.poseList[i] = 999.0;
    }

    proc_control_DW.obj_a.poseList[0] = 0.0;
    proc_control_DW.obj_a.poseList[2] = 0.0;
    proc_control_DW.obj_a.poseList[4] = 0.0;
    proc_control_DW.obj_a.poseList[6] = 1.0;
    proc_control_DW.obj_a.poseList[8] = 0.0;
    proc_control_DW.obj_a.poseList[10] = 0.0;
    proc_control_DW.obj_a.poseList[12] = 0.0;
    proc_control_DW.obj_a.poseList[14] = 0.0;
    proc_control_DW.obj_a.poseList[16] = 0.0;

    // initCond(1,1:7);
    for (i = 0; i < 7; i++) {
      proc_control_DW.obj_a.initcond[i] = tmp_k[i];
    }

    proc_control_DW.obj_a.i = 2.0;

    // End of InitializeConditions for MATLABSystem: '<S312>/MATLAB System1'

    // Start for MATLABSystem: '<S312>/MATLAB System'
    proc_control_DW.obj.linearConvergence =
      proc_control_P.MATLABSystem_linearConvergence;
    proc_control_DW.obj.quaternionConvergence =
      proc_control_P.MATLABSystem_quaternionConverge;
    proc_control_DW.obj.TargetThreshold =
      proc_control_P.MATLABSystem_TargetThreshold;
    proc_control_DW.obj.isInitialized = 1;

    //  Perform one-time calculations, such as computing constants
    proc_control_DW.obj.generationNumber = 0.0;
    proc_control_DW.obj.dummy = 999.0;

    //  Chiffre NULL
    for (i = 0; i < 13; i++) {
      proc_control_DW.obj.emptyArray[i] = proc_control_DW.obj.dummy;
    }

    //  Vecteur pose NULL
    proc_control_DW.obj.targetReachedCount = 0.0;

    //  Buffer trajectoire
    for (i = 0; i < 78013; i++) {
      proc_control_DW.obj.poseBuffer[i] = proc_control_DW.obj.dummy;
    }

    proc_control_DW.obj.bufferCount = 0.0;
    proc_control_DW.obj.done = false;
    proc_control_DW.obj.init = 0.0;

    // End of Start for MATLABSystem: '<S312>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S9>/singleWpts Trajectory'
    //  Fonction reset
    //  Initialize / reset discrete-state properties
    for (i = 0; i < 130; i++) {
      // SystemInitialize for Merge generated from: '<S9>/Merge'
      proc_control_B.Reference[i] = proc_control_P.Merge_1_InitialOutput_l;
    }

    // SystemInitialize for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Start for SwitchCase: '<S138>/Switch Case'
    proc_control_DW.SwitchCase_ActiveSubsystem_l = -1;

    // InitializeConditions for Delay: '<S7>/Delay'
    for (i = 0; i < 8; i++) {
      proc_control_DW.Delay_DSTATE_g[i] =
        proc_control_P.Delay_InitialCondition_jd[i];
    }

    // End of InitializeConditions for Delay: '<S7>/Delay'

    // InitializeConditions for Delay: '<S140>/Delay'
    proc_control_DW.Delay_DSTATE_k = proc_control_P.Delay_InitialCondition_i;

    // SystemInitialize for Enabled SubSystem: '<S7>/MPC manager'
    // SystemInitialize for Atomic SubSystem: '<S139>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S238>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S240>/In1' incorporates:
    //   Outport: '<S240>/Out1'

    proc_control_B.In1_o = proc_control_P.Out1_Y0_c;

    // End of SystemInitialize for SubSystem: '<S238>/Enabled Subsystem'

    // Start for MATLABSystem: '<S238>/SourceBlock'
    proc_control_DW.obj_hh.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hh.isInitialized = 1;
    for (i = 0; i < 27; i++) {
      proc_control_B.b_zeroDelimTopic_oy[i] = tmp_l[i];
    }

    proc_control_B.b_zeroDelimTopic_oy[27] = '\x00';
    Sub_proc_control_182_1643.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_oy[0], 1);
    proc_control_DW.obj_hh.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S238>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S139>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S139>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S237>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S239>/In1' incorporates:
    //   Outport: '<S239>/Out1'

    proc_control_B.In1_f = proc_control_P.Out1_Y0_m;

    // End of SystemInitialize for SubSystem: '<S237>/Enabled Subsystem'

    // Start for MATLABSystem: '<S237>/SourceBlock'
    proc_control_DW.obj_k4.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_k4.isInitialized = 1;
    for (i = 0; i < 27; i++) {
      proc_control_B.b_zeroDelimTopic_oy[i] = tmp_m[i];
    }

    proc_control_B.b_zeroDelimTopic_oy[27] = '\x00';
    Sub_proc_control_182_1620.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_oy[0], 1);
    proc_control_DW.obj_k4.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S237>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S139>/Subscribe'

    // Start for MATLABSystem: '<S139>/MPC manager'
    proc_control_DW.obj_f.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S139>/MPC manager'
    //         %% Fonction execute a chaque iteration
    //  Perform one-time calculations, such as computing constants
    proc_contr_mpcManager_resetImpl(&proc_control_DW.obj_f);

    // SystemInitialize for MATLABSystem: '<S139>/MPC manager' incorporates:
    //   Outport: '<S139>/MPC param'

    std::memcpy(&proc_control_B.mvmin[0], &proc_control_P.MPCparam_Y0.mvmin[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S139>/MPC manager' incorporates:
    //   Outport: '<S139>/MPC param'

    std::memcpy(&proc_control_B.mvmax[0], &proc_control_P.MPCparam_Y0.mvmax[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S139>/MPC manager' incorporates:
    //   Outport: '<S139>/MPC param'

    std::memcpy(&proc_control_B.ywt[0], &proc_control_P.MPCparam_Y0.ywt[0], 13U *
                sizeof(real_T));

    // SystemInitialize for MATLABSystem: '<S139>/MPC manager' incorporates:
    //   Outport: '<S139>/MPC param'

    std::memcpy(&proc_control_B.mvwt[0], &proc_control_P.MPCparam_Y0.mvwt[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S139>/MPC manager' incorporates:
    //   Outport: '<S139>/MPC param'

    std::memcpy(&proc_control_B.dmwwt[0], &proc_control_P.MPCparam_Y0.dmwwt[0],
                sizeof(real_T) << 3U);
    for (i = 0; i < 8; i++) {
      // SystemInitialize for MATLABSystem: '<S139>/MPC manager' incorporates:
      //   Outport: '<S139>/MPC param'

      proc_control_B.thrustersStatus[i] =
        proc_control_P.MPCparam_Y0.thrustersStatus[i];
    }

    // End of SystemInitialize for SubSystem: '<S7>/MPC manager'

    // SystemInitialize for IfAction SubSystem: '<S138>/Adaptive MPC quaternion ' 
    // InitializeConditions for Memory: '<S148>/Memory'
    std::memcpy(&proc_control_DW.Memory_PreviousInput_g[0],
                &proc_control_P.Memory_InitialCondition[0], 258U * sizeof
                (boolean_T));

    // InitializeConditions for UnitDelay: '<S148>/last_mv'
    std::memcpy(&proc_control_DW.last_mv_DSTATE_f[0],
                &proc_control_P.last_mv_InitialCondition[0], sizeof(real_T) <<
                3U);

    // InitializeConditions for Delay: '<S141>/Delay1' incorporates:
    //   UnitDelay: '<S148>/last_mv'

    std::memcpy(&proc_control_DW.Delay1_DSTATE_e[0],
                &proc_control_P.Delay1_InitialCondition[0], sizeof(real_T) << 3U);

    // InitializeConditions for MATLABSystem: '<S141>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_b.qkm[0] = 1.0;
    proc_control_DW.obj_b.qkt[0] = 1.0;
    proc_control_DW.obj_b.qkm[1] = 0.0;
    proc_control_DW.obj_b.qkt[1] = 0.0;
    proc_control_DW.obj_b.qkm[2] = 0.0;
    proc_control_DW.obj_b.qkt[2] = 0.0;
    proc_control_DW.obj_b.qkm[3] = 0.0;
    proc_control_DW.obj_b.qkt[3] = 0.0;
    std::memcpy(&proc_control_DW.obj_b.xl[0], &tmp_n[0], 13U * sizeof(real_T));

    // End of SystemInitialize for SubSystem: '<S138>/Adaptive MPC quaternion '

    // SystemInitialize for IfAction SubSystem: '<S138>/JoyStick OpenLoop'
    // InitializeConditions for UnitDelay: '<S178>/UD'
    //
    //  Block description for '<S178>/UD':
    //
    //   Store in Global RAM

    for (i = 0; i < 6; i++) {
      proc_control_DW.UD_DSTATE[i] =
        proc_control_P.DiscreteDerivative_ICPrevScaled;
    }

    // End of InitializeConditions for UnitDelay: '<S178>/UD'

    // Start for MATLABSystem: '<S143>/MATLAB System'
    proc_control_DW.obj_m.k = proc_control_P.MATLABSystem_k;
    std::memcpy(&proc_control_DW.obj_m.binv[0], &proc_control_P.binv[0], 48U *
                sizeof(real_T));
    proc_control_DW.obj_m.mass = proc_control_P.physics.mass;
    proc_control_DW.obj_m.volume = proc_control_P.physics.volume;
    proc_control_DW.obj_m.height = proc_control_P.physics.height;
    std::memcpy(&proc_control_DW.obj_m.I[0], &proc_control_P.physics.I[0], 9U *
                sizeof(real_T));
    proc_control_DW.obj_m.RG[0] = proc_control_P.physics.RG[0];
    proc_control_DW.obj_m.RB[0] = proc_control_P.physics.RB[0];
    proc_control_DW.obj_m.RG[1] = proc_control_P.physics.RG[1];
    proc_control_DW.obj_m.RB[1] = proc_control_P.physics.RB[1];
    proc_control_DW.obj_m.RG[2] = proc_control_P.physics.RG[2];
    proc_control_DW.obj_m.RB[2] = proc_control_P.physics.RB[2];
    for (i = 0; i < 6; i++) {
      proc_control_DW.obj_m.AddedMass[i] = proc_control_P.physics.AddedMass[i];
      proc_control_DW.obj_m.CDL[i] = proc_control_P.physics.CDL[i];
      proc_control_DW.obj_m.CDQ[i] = proc_control_P.physics.CDQ[i];
    }

    proc_control_DW.obj_m.AF[0] = proc_control_P.physics.AF[0];
    proc_control_DW.obj_m.AF[1] = proc_control_P.physics.AF[1];
    proc_control_DW.obj_m.AF[2] = proc_control_P.physics.AF[2];
    proc_control_DW.obj_m.g = proc_control_P.physics.g;
    proc_control_DW.obj_m.rho = proc_control_P.physics.rho;
    proc_control_DW.obj_m.isInitialized = 1;

    // End of Start for MATLABSystem: '<S143>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S138>/JoyStick OpenLoop'

    // SystemInitialize for IfAction SubSystem: '<S138>/LTV MPC quaternion '
    // InitializeConditions for UnitDelay: '<S182>/last_mv'
    //  Perform one-time calculations, such as computing constants
    // [M,C,D,Gq] = AUVModelMatrices(in1,in2)
    //  Initialize / reset discrete-state properties
    std::memcpy(&proc_control_DW.last_mv_DSTATE[0],
                &proc_control_P.last_mv_InitialCondition_o[0], sizeof(real_T) <<
                3U);

    // InitializeConditions for Delay: '<S144>/Delay1'
    std::memcpy(&proc_control_DW.Delay1_DSTATE[0],
                &proc_control_P.Delay1_InitialCondition_n[0], 88U * sizeof
                (real_T));

    // InitializeConditions for Memory: '<S182>/Memory'
    std::memcpy(&proc_control_DW.Memory_PreviousInput[0],
                &proc_control_P.Memory_InitialCondition_p[0], 258U * sizeof
                (boolean_T));

    // End of SystemInitialize for SubSystem: '<S138>/LTV MPC quaternion '

    // SystemInitialize for IfAction SubSystem: '<S138>/Quaternion Non linear MPC (Not for codegen)' 
    // InitializeConditions for Delay: '<S215>/mv_Delay'
    proc_control_DW.icLoad = true;

    // InitializeConditions for Delay: '<S215>/x_Delay'
    proc_control_DW.icLoad_a = true;

    // InitializeConditions for Delay: '<S215>/slack_delay'
    proc_control_DW.icLoad_j = true;
    for (i = 0; i < 8; i++) {
      // InitializeConditions for Delay: '<S145>/Delay'
      proc_control_DW.Delay_DSTATE_a[i] =
        proc_control_P.Delay_InitialCondition[i];

      // SystemInitialize for Merge generated from: '<S138>/Merge' incorporates:
      //   Delay: '<S145>/Delay'

      proc_control_B.mv[i] = proc_control_P.Merge_1_InitialOutput;
    }

    // End of SystemInitialize for SubSystem: '<S138>/Quaternion Non linear MPC (Not for codegen)' 

    // SystemInitialize for Merge generated from: '<S138>/Merge'
    proc_control_B.MpcStatus = proc_control_P.Merge_2_InitialOutput;

    // SystemInitialize for Merge generated from: '<S138>/Merge'
    proc_control_B.alive = proc_control_P.Merge_3_InitialOutput;

    // End of SystemInitialize for SubSystem: '<Root>/Subsystem Controller'

    // SystemInitialize for Merge generated from: '<S9>/Merge'
    proc_control_B.isReached = proc_control_P.Merge_2_InitialOutput_l;

    // SystemInitialize for Merge generated from: '<S9>/Merge'
    proc_control_B.isTrajDone = proc_control_P.Merge_3_InitialOutput_l;

    // SystemInitialize for Enabled SubSystem: '<Root>/Send Data to ROS'
    // SystemInitialize for Atomic SubSystem: '<S5>/Publish2'
    // Start for MATLABSystem: '<S109>/SinkBlock'
    proc_control_DW.obj_p.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_p.isInitialized = 1;
    for (i = 0; i < 31; i++) {
      proc_control_B.b_zeroDelimTopic_b[i] = tmp_o[i];
    }

    proc_control_B.b_zeroDelimTopic_b[31] = '\x00';
    Pub_proc_control_104.createPublisher(&proc_control_B.b_zeroDelimTopic_b[0],
      1);
    proc_control_DW.obj_p.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S109>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish2'

    // SystemInitialize for Atomic SubSystem: '<S5>/Subsystem'
    // SystemInitialize for Atomic SubSystem: '<S110>/Publish5'
    // Start for MATLABSystem: '<S113>/SinkBlock'
    proc_control_DW.obj_i1.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_i1.isInitialized = 1;
    for (i = 0; i < 28; i++) {
      proc_control_B.b_zeroDelimTopic_fr[i] = tmp_p[i];
    }

    proc_control_B.b_zeroDelimTopic_fr[28] = '\x00';
    Pub_proc_control_287.createPublisher(&proc_control_B.b_zeroDelimTopic_fr[0],
      1);
    proc_control_DW.obj_i1.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S113>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S110>/Publish5'
    // End of SystemInitialize for SubSystem: '<S5>/Subsystem'
    for (i = 0; i < 8; i++) {
      // SystemInitialize for SignalConversion generated from: '<S5>/mv' incorporates:
      //   Outport: '<S5>/mv'

      proc_control_B.BufferToMakeInportVirtual_Ins_e[i] = proc_control_P.mv_Y0;

      // SystemInitialize for SignalConversion generated from: '<S5>/thrust' incorporates:
      //   Outport: '<S5>/mv'
      //   Outport: '<S5>/thrust'
      //   SignalConversion generated from: '<S5>/mv'

      proc_control_B.BufferToMakeInportVirtual_Inser[i] =
        proc_control_P.thrust_Y0;
    }

    // End of SystemInitialize for SubSystem: '<Root>/Send Data to ROS'

    // SystemInitialize for Enabled SubSystem: '<Root>/Modèle Physique'
    // InitializeConditions for DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states =
      proc_control_P.DiscreteTransferFcn1_InitialSta;

    // InitializeConditions for DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_k =
      proc_control_P.DiscreteTransferFcn1_InitialS_k;

    // InitializeConditions for DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_o =
      proc_control_P.DiscreteTransferFcn1_InitialS_g;

    // InitializeConditions for DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_i =
      proc_control_P.DiscreteTransferFcn1_InitialS_h;

    // InitializeConditions for DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_g =
      proc_control_P.DiscreteTransferFcn1_InitialS_m;

    // InitializeConditions for DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_h =
      proc_control_P.DiscreteTransferFcn1_InitialS_b;

    // InitializeConditions for DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_l =
      proc_control_P.DiscreteTransferFcn1_Initial_mm;

    // InitializeConditions for DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_ge =
      proc_control_P.DiscreteTransferFcn1_Initial_gv;

    // InitializeConditions for UniformRandomNumber: '<S12>/ Drift'
    i = static_cast<int32_T>(static_cast<uint32_T>(proc_control_P.dSeedX) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>(proc_control_P.dSeedX) &
      32768U);
    for (int32_T Ns{0}; Ns < 6; Ns++) {
      tseed = ((((static_cast<uint32_T>(proc_control_P.dSeedX) -
                  (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
      if (tseed < 1U) {
        tseed = 1144108930U;
      } else if (tseed > 2147483646U) {
        tseed = 2147483646U;
      }

      proc_control_DW.RandSeed[Ns] = tseed;
      proc_control_DW.Drift_NextOutput[Ns] = (proc_control_P.dmax[Ns] -
        proc_control_P.dmin[Ns]) * rt_urand_Upu32_Yd_f_pw_snf
        (&proc_control_DW.RandSeed[Ns]) + proc_control_P.dmin[Ns];
    }

    // End of InitializeConditions for UniformRandomNumber: '<S12>/ Drift'

    // InitializeConditions for UnitDelay: '<S1>/Unit Delay'
    std::memcpy(&proc_control_DW.UnitDelay_DSTATE_o[0],
                &proc_control_P.UnitDelay_InitialCondition[0], 13U * sizeof
                (real_T));

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' 
    proc_control_DW.DiscreteTimeIntegrator_PrevRese = 2;
    proc_control_DW.DiscreteTimeIntegrator_IC_LOADI = 1U;

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' 
    proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 2;

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' 
    proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 2;
    proc_control_DW.DiscreteTimeIntegrator2_IC_LOAD = 1U;

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   Constant: '<S1>/Initial Angular Rates'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] =
      proc_control_P.InitialAngularRates_Value[0];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S1>/Initial Body velocity '

    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] =
      proc_control_P.InitialBodyvelocity_Value[0];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   Constant: '<S1>/Initial Angular Rates'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] =
      proc_control_P.InitialAngularRates_Value[1];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S1>/Initial Body velocity '

    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] =
      proc_control_P.InitialBodyvelocity_Value[1];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   Constant: '<S1>/Initial Angular Rates'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] =
      proc_control_P.InitialAngularRates_Value[2];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S1>/Initial Body velocity '

    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] =
      proc_control_P.InitialBodyvelocity_Value[2];
    proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 2;

    // InitializeConditions for RandomNumber: '<S28>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_P.BandLimitedWhiteNoise_seed)
                - (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_j = tseed;
    proc_control_DW.NextOutput = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_j) * proc_control_P.WhiteNoise_StdDev +
      proc_control_P.WhiteNoise_Mean;

    // End of InitializeConditions for RandomNumber: '<S28>/White Noise'

    // InitializeConditions for RandomNumber: '<S29>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise1_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise1_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_P.BandLimitedWhiteNoise1_seed)
                - (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_d = tseed;
    proc_control_DW.NextOutput_b = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_d) * proc_control_P.WhiteNoise_StdDev_d +
      proc_control_P.WhiteNoise_Mean_e;

    // End of InitializeConditions for RandomNumber: '<S29>/White Noise'

    // InitializeConditions for RandomNumber: '<S30>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise2_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise2_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_P.BandLimitedWhiteNoise2_seed)
                - (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_e = tseed;
    proc_control_DW.NextOutput_g = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_e) * proc_control_P.WhiteNoise_StdDev_e +
      proc_control_P.WhiteNoise_Mean_c;

    // End of InitializeConditions for RandomNumber: '<S30>/White Noise'

    // InitializeConditions for RandomNumber: '<S31>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise3_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise3_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_P.BandLimitedWhiteNoise3_seed)
                - (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_n = tseed;
    proc_control_DW.NextOutput_l = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_n) * proc_control_P.WhiteNoise_StdDev_j +
      proc_control_P.WhiteNoise_Mean_p;

    // End of InitializeConditions for RandomNumber: '<S31>/White Noise'

    // InitializeConditions for RandomNumber: '<S32>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise4_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise4_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_P.BandLimitedWhiteNoise4_seed)
                - (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_b = tseed;
    proc_control_DW.NextOutput_e = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_b) * proc_control_P.WhiteNoise_StdDev_p +
      proc_control_P.WhiteNoise_Mean_l;

    // End of InitializeConditions for RandomNumber: '<S32>/White Noise'

    // SystemInitialize for Atomic SubSystem: '<S16>/Publish2'
    // Start for MATLABSystem: '<S27>/SinkBlock'
    proc_control_DW.obj_jj.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_jj.isInitialized = 1;
    for (i = 0; i < 29; i++) {
      proc_control_B.b_zeroDelimTopic_j[i] = tmp_q[i];
    }

    proc_control_B.b_zeroDelimTopic_j[29] = '\x00';
    Pub_proc_control_19_1361.createPublisher(&proc_control_B.b_zeroDelimTopic_j
      [0], 1);
    proc_control_DW.obj_jj.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S27>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S16>/Publish2'

    // SystemInitialize for Atomic SubSystem: '<S33>/Subscribe'
    // Start for MATLABSystem: '<S42>/SourceBlock'
    proc_control_DW.obj_n.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_n.isInitialized = 1;
    for (i = 0; i < 36; i++) {
      proc_control_B.b_zeroDelimTopic_k[i] = tmp_r[i];
    }

    proc_control_B.b_zeroDelimTopic_k[36] = '\x00';
    Sub_proc_control_19_1385.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_k[0], 1);
    proc_control_DW.obj_n.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S42>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S33>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S33>/Publish'
    // Start for MATLABSystem: '<S41>/SinkBlock'
    proc_control_DW.obj_d.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_d.isInitialized = 1;
    for (i = 0; i < 32; i++) {
      proc_control_B.b_zeroDelimTopic_e[i] = tmp_s[i];
    }

    proc_control_B.b_zeroDelimTopic_e[32] = '\x00';
    Pub_proc_control_19_1384.createPublisher(&proc_control_B.b_zeroDelimTopic_e
      [0], 1);
    proc_control_DW.obj_d.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S41>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S33>/Publish'

    // Start for MATLABSystem: '<S33>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.method = 7U;
    proc_control_DW.state = 1144108930U;
    proc_control_DW.state_k[0] = 362436069U;
    proc_control_DW.state_k[1] = 521288629U;
    proc_control_DW.obj_fj.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S33>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    // this.pingerPosition = this.pingerStartPosition;
    proc_control_DW.obj_fj.pingerPosition.X = 10.0;
    proc_control_DW.obj_fj.pingerPosition.Y = 0.0;
    proc_control_DW.obj_fj.pingerPosition.Z = 5.0;

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_B.y_d[0] = proc_control_P.CleanOutput_Y0.x.Quaternion[0];

    // SystemInitialize for Sum: '<S14>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_B.Quaternion[0] = proc_control_P.SensorsOutput_Y0.Quaternion[0];

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_B.y_d[1] = proc_control_P.CleanOutput_Y0.x.Quaternion[1];

    // SystemInitialize for Sum: '<S14>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_B.Quaternion[1] = proc_control_P.SensorsOutput_Y0.Quaternion[1];

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_B.y_d[2] = proc_control_P.CleanOutput_Y0.x.Quaternion[2];

    // SystemInitialize for Sum: '<S14>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_B.Quaternion[2] = proc_control_P.SensorsOutput_Y0.Quaternion[2];

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_B.y_d[3] = proc_control_P.CleanOutput_Y0.x.Quaternion[3];

    // SystemInitialize for Sum: '<S14>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_B.Quaternion[3] = proc_control_P.SensorsOutput_Y0.Quaternion[3];

    // End of SystemInitialize for SubSystem: '<Root>/Modèle Physique'

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S93>/Publish'
    // Start for MATLABSystem: '<S106>/SinkBlock'
    proc_control_DW.obj_ap.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ap.isInitialized = 1;
    for (i = 0; i < 27; i++) {
      proc_control_B.b_zeroDelimTopic_oy[i] = tmp_t[i];
    }

    proc_control_B.b_zeroDelimTopic_oy[27] = '\x00';
    Pub_proc_control_75.createPublisher(&proc_control_B.b_zeroDelimTopic_oy[0],
      1);
    proc_control_DW.obj_ap.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S106>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S93>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S89>/Publish'
    // Start for MATLABSystem: '<S96>/SinkBlock'
    proc_control_DW.obj_kw.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_kw.isInitialized = 1;
    Pub_proc_control_41.createPublisher(&proc_control_B.b_zeroDelimTopic_o[0], 1);
    proc_control_DW.obj_kw.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S89>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S90>/Publish Depth'
    // Start for MATLABSystem: '<S98>/SinkBlock'
    proc_control_DW.obj_k.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_k.isInitialized = 1;
    Pub_proc_control_243.createPublisher(&proc_control_B.b_zeroDelimTopic_av[0],
      1);
    proc_control_DW.obj_k.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S90>/Publish Depth'

    // SystemInitialize for Atomic SubSystem: '<S91>/Publish imu_info'
    // Start for MATLABSystem: '<S101>/SinkBlock'
    proc_control_DW.obj_ab.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ab.isInitialized = 1;
    Pub_proc_control_47.createPublisher(&proc_control_B.b_zeroDelimTopic_dv[0],
      1);
    proc_control_DW.obj_ab.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S91>/Publish imu_info'

    // SystemInitialize for Atomic SubSystem: '<S92>/Publish Ping'
    // Start for MATLABSystem: '<S103>/SinkBlock'
    proc_control_DW.obj_c.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_c.isInitialized = 1;
    Pub_proc_control_350.createPublisher(&proc_control_B.b_zeroDelimTopic_kl[0],
      1);
    proc_control_DW.obj_c.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S92>/Publish Ping'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 7; i++) {
      // SystemInitialize for Merge generated from: '<S9>/Merge'
      proc_control_B.target[i] = proc_control_P.Merge_4_InitialOutput;
    }

    // SystemInitialize for Atomic SubSystem: '<S310>/Publish5'
    // Start for MATLABSystem: '<S321>/SinkBlock'
    proc_control_DW.obj_i.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_i.isInitialized = 1;
    for (i = 0; i < 28; i++) {
      proc_control_B.b_zeroDelimTopic_fr[i] = tmp_u[i];
    }

    proc_control_B.b_zeroDelimTopic_fr[28] = '\x00';
    Pub_proc_control_184_1596.createPublisher
      (&proc_control_B.b_zeroDelimTopic_fr[0], 1);
    proc_control_DW.obj_i.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S321>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S310>/Publish5'
  }
}

// Model terminate function
void proc_control::terminate()
{
  // Terminate for Atomic SubSystem: '<Root>/Subsystem1'
  // Terminate for Atomic SubSystem: '<S10>/Subscribe2'
  // Terminate for MATLABSystem: '<S331>/SourceBlock'
  if (!proc_control_DW.obj_mt.matlabCodegenIsDeleted) {
    proc_control_DW.obj_mt.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S331>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe2'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe3'
  // Terminate for MATLABSystem: '<S332>/SourceBlock'
  if (!proc_control_DW.obj_oz.matlabCodegenIsDeleted) {
    proc_control_DW.obj_oz.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S332>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe3'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe1'
  // Terminate for MATLABSystem: '<S330>/SourceBlock'
  if (!proc_control_DW.obj_hb.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hb.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S330>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S10>/startSim'
  // Terminate for MATLABSystem: '<S335>/SourceBlock'
  if (!proc_control_DW.obj_bh.matlabCodegenIsDeleted) {
    proc_control_DW.obj_bh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S335>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/startSim'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe5'
  // Terminate for MATLABSystem: '<S334>/SourceBlock'
  if (!proc_control_DW.obj_fx.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fx.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S334>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe5'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe4'
  // Terminate for MATLABSystem: '<S333>/SourceBlock'
  if (!proc_control_DW.obj_h.matlabCodegenIsDeleted) {
    proc_control_DW.obj_h.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S333>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe4'
  // End of Terminate for SubSystem: '<Root>/Subsystem1'

  // Terminate for IfAction SubSystem: '<S3>/Simulation'
  // Terminate for Atomic SubSystem: '<S66>/Subscribe'
  // Terminate for MATLABSystem: '<S76>/SourceBlock'
  if (!proc_control_DW.obj_i4.matlabCodegenIsDeleted) {
    proc_control_DW.obj_i4.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S76>/SourceBlock'
  // End of Terminate for SubSystem: '<S66>/Subscribe'

  // Terminate for Atomic SubSystem: '<S66>/Subscribe1'
  // Terminate for MATLABSystem: '<S78>/SourceBlock'
  if (!proc_control_DW.obj_bg.matlabCodegenIsDeleted) {
    proc_control_DW.obj_bg.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S78>/SourceBlock'
  // End of Terminate for SubSystem: '<S66>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S66>/Subscribe depth'
  // Terminate for MATLABSystem: '<S77>/SourceBlock'
  if (!proc_control_DW.obj_df1.matlabCodegenIsDeleted) {
    proc_control_DW.obj_df1.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S77>/SourceBlock'
  // End of Terminate for SubSystem: '<S66>/Subscribe depth'

  // Terminate for Atomic SubSystem: '<S66>/Subscribe2'
  // Terminate for MATLABSystem: '<S79>/SourceBlock'
  if (!proc_control_DW.obj_hx.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hx.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S79>/SourceBlock'
  // End of Terminate for SubSystem: '<S66>/Subscribe2'
  // End of Terminate for SubSystem: '<S3>/Simulation'

  // Terminate for IfAction SubSystem: '<S3>/AUV8'
  // Terminate for Atomic SubSystem: '<S65>/Subscribe'
  // Terminate for MATLABSystem: '<S68>/SourceBlock'
  if (!proc_control_DW.obj_l.matlabCodegenIsDeleted) {
    proc_control_DW.obj_l.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S68>/SourceBlock'
  // End of Terminate for SubSystem: '<S65>/Subscribe'

  // Terminate for Atomic SubSystem: '<S65>/Subscribe1'
  // Terminate for MATLABSystem: '<S69>/SourceBlock'
  if (!proc_control_DW.obj_dh.matlabCodegenIsDeleted) {
    proc_control_DW.obj_dh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S69>/SourceBlock'
  // End of Terminate for SubSystem: '<S65>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S65>/Subscribe2'
  // Terminate for MATLABSystem: '<S70>/SourceBlock'
  if (!proc_control_DW.obj_ow.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ow.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S70>/SourceBlock'
  // End of Terminate for SubSystem: '<S65>/Subscribe2'

  // Terminate for Atomic SubSystem: '<S65>/Subscribe3'
  // Terminate for MATLABSystem: '<S71>/SourceBlock'
  if (!proc_control_DW.obj_p0.matlabCodegenIsDeleted) {
    proc_control_DW.obj_p0.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S71>/SourceBlock'
  // End of Terminate for SubSystem: '<S65>/Subscribe3'
  // End of Terminate for SubSystem: '<S3>/AUV8'

  // Terminate for Enabled SubSystem: '<Root>/Sensor Manager'
  // Terminate for Atomic SubSystem: '<S115>/Publish'
  // Terminate for MATLABSystem: '<S122>/SinkBlock'
  if (!proc_control_DW.obj_g.matlabCodegenIsDeleted) {
    proc_control_DW.obj_g.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S122>/SinkBlock'
  // End of Terminate for SubSystem: '<S115>/Publish'

  // Terminate for Atomic SubSystem: '<S116>/Publish'
  // Terminate for MATLABSystem: '<S126>/SinkBlock'
  if (!proc_control_DW.obj_ag.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ag.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S126>/SinkBlock'
  // End of Terminate for SubSystem: '<S116>/Publish'

  // Terminate for Atomic SubSystem: '<S114>/Publish'
  // Terminate for MATLABSystem: '<S118>/SinkBlock'
  if (!proc_control_DW.obj_e.matlabCodegenIsDeleted) {
    proc_control_DW.obj_e.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S118>/SinkBlock'
  // End of Terminate for SubSystem: '<S114>/Publish'
  // End of Terminate for SubSystem: '<Root>/Sensor Manager'

  // Terminate for Atomic SubSystem: '<S309>/Subscribe'
  // Terminate for MATLABSystem: '<S317>/SourceBlock'
  if (!proc_control_DW.obj_df.matlabCodegenIsDeleted) {
    proc_control_DW.obj_df.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S317>/SourceBlock'
  // End of Terminate for SubSystem: '<S309>/Subscribe'

  // Terminate for Atomic SubSystem: '<S308>/Subscribe2'
  // Terminate for MATLABSystem: '<S315>/SourceBlock'
  if (!proc_control_DW.obj_cs.matlabCodegenIsDeleted) {
    proc_control_DW.obj_cs.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S315>/SourceBlock'
  // End of Terminate for SubSystem: '<S308>/Subscribe2'

  // Terminate for IfAction SubSystem: '<S9>/singleWpts Trajectory'
  // Terminate for Atomic SubSystem: '<S312>/Subscribe'
  // Terminate for MATLABSystem: '<S325>/SourceBlock'
  if (!proc_control_DW.obj_hd.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hd.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S325>/SourceBlock'
  // End of Terminate for SubSystem: '<S312>/Subscribe'
  // End of Terminate for SubSystem: '<S9>/singleWpts Trajectory'

  // Terminate for Atomic SubSystem: '<Root>/Subsystem Controller'
  // Terminate for Enabled SubSystem: '<S7>/MPC manager'
  // Terminate for Atomic SubSystem: '<S139>/Subscribe1'
  // Terminate for MATLABSystem: '<S238>/SourceBlock'
  if (!proc_control_DW.obj_hh.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S238>/SourceBlock'
  // End of Terminate for SubSystem: '<S139>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S139>/Subscribe'
  // Terminate for MATLABSystem: '<S237>/SourceBlock'
  if (!proc_control_DW.obj_k4.matlabCodegenIsDeleted) {
    proc_control_DW.obj_k4.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S237>/SourceBlock'
  // End of Terminate for SubSystem: '<S139>/Subscribe'
  // End of Terminate for SubSystem: '<S7>/MPC manager'
  // End of Terminate for SubSystem: '<Root>/Subsystem Controller'

  // Terminate for Enabled SubSystem: '<Root>/Send Data to ROS'
  // Terminate for Atomic SubSystem: '<S5>/Publish2'
  // Terminate for MATLABSystem: '<S109>/SinkBlock'
  if (!proc_control_DW.obj_p.matlabCodegenIsDeleted) {
    proc_control_DW.obj_p.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S109>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish2'

  // Terminate for Atomic SubSystem: '<S5>/Subsystem'
  // Terminate for Atomic SubSystem: '<S110>/Publish5'
  // Terminate for MATLABSystem: '<S113>/SinkBlock'
  if (!proc_control_DW.obj_i1.matlabCodegenIsDeleted) {
    proc_control_DW.obj_i1.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S113>/SinkBlock'
  // End of Terminate for SubSystem: '<S110>/Publish5'
  // End of Terminate for SubSystem: '<S5>/Subsystem'
  // End of Terminate for SubSystem: '<Root>/Send Data to ROS'

  // Terminate for Enabled SubSystem: '<Root>/Modèle Physique'
  // Terminate for Atomic SubSystem: '<S16>/Publish2'
  // Terminate for MATLABSystem: '<S27>/SinkBlock'
  if (!proc_control_DW.obj_jj.matlabCodegenIsDeleted) {
    proc_control_DW.obj_jj.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S27>/SinkBlock'
  // End of Terminate for SubSystem: '<S16>/Publish2'

  // Terminate for Atomic SubSystem: '<S33>/Subscribe'
  // Terminate for MATLABSystem: '<S42>/SourceBlock'
  if (!proc_control_DW.obj_n.matlabCodegenIsDeleted) {
    proc_control_DW.obj_n.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S42>/SourceBlock'
  // End of Terminate for SubSystem: '<S33>/Subscribe'

  // Terminate for Atomic SubSystem: '<S33>/Publish'
  // Terminate for MATLABSystem: '<S41>/SinkBlock'
  if (!proc_control_DW.obj_d.matlabCodegenIsDeleted) {
    proc_control_DW.obj_d.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S41>/SinkBlock'
  // End of Terminate for SubSystem: '<S33>/Publish'
  // End of Terminate for SubSystem: '<Root>/Modèle Physique'

  // Terminate for Enabled SubSystem: '<Root>/ROS Output'
  // Terminate for Atomic SubSystem: '<S93>/Publish'
  // Terminate for MATLABSystem: '<S106>/SinkBlock'
  if (!proc_control_DW.obj_ap.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ap.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S106>/SinkBlock'
  // End of Terminate for SubSystem: '<S93>/Publish'

  // Terminate for Atomic SubSystem: '<S89>/Publish'
  // Terminate for MATLABSystem: '<S96>/SinkBlock'
  if (!proc_control_DW.obj_kw.matlabCodegenIsDeleted) {
    proc_control_DW.obj_kw.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S96>/SinkBlock'
  // End of Terminate for SubSystem: '<S89>/Publish'

  // Terminate for Atomic SubSystem: '<S90>/Publish Depth'
  // Terminate for MATLABSystem: '<S98>/SinkBlock'
  if (!proc_control_DW.obj_k.matlabCodegenIsDeleted) {
    proc_control_DW.obj_k.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S98>/SinkBlock'
  // End of Terminate for SubSystem: '<S90>/Publish Depth'

  // Terminate for Atomic SubSystem: '<S91>/Publish imu_info'
  // Terminate for MATLABSystem: '<S101>/SinkBlock'
  if (!proc_control_DW.obj_ab.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ab.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S101>/SinkBlock'
  // End of Terminate for SubSystem: '<S91>/Publish imu_info'

  // Terminate for Atomic SubSystem: '<S92>/Publish Ping'
  // Terminate for MATLABSystem: '<S103>/SinkBlock'
  if (!proc_control_DW.obj_c.matlabCodegenIsDeleted) {
    proc_control_DW.obj_c.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S103>/SinkBlock'
  // End of Terminate for SubSystem: '<S92>/Publish Ping'
  // End of Terminate for SubSystem: '<Root>/ROS Output'

  // Terminate for Atomic SubSystem: '<S310>/Publish5'
  // Terminate for MATLABSystem: '<S321>/SinkBlock'
  if (!proc_control_DW.obj_i.matlabCodegenIsDeleted) {
    proc_control_DW.obj_i.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S321>/SinkBlock'
  // End of Terminate for SubSystem: '<S310>/Publish5'
}

// Constructor
proc_control::proc_control() :
  proc_control_B(),
  proc_control_DW(),
  proc_control_PrevZCX(),
  proc_control_M()
{
  // Currently there is no constructor body generated.
}

// Destructor
proc_control::~proc_control()
{
  // Currently there is no destructor body generated.
}

// Real-Time Model get method
proc_control::RT_MODEL_proc_control_T * proc_control::getRTM()
{
  return (&proc_control_M);
}

//
// File trailer for generated code.
//
// [EOF]
//
