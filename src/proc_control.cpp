//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// File: proc_control.cpp
//
// Code generated for Simulink model 'proc_control'.
//
// Model version                  : 3.74
// Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021
// C/C++ source code generated on : Wed Jul 13 15:26:04 2022
//
// Target selection: ert.tlc
// Embedded hardware selection: ARM Compatible->ARM 64-bit (LLP64)
// Code generation objectives: Unspecified
// Validation result: Not run
//
#include "proc_control.h"
#include "rtwtypes.h"
#include "proc_control_types.h"
#include <cstring>
#include <cmath>
#include "AUV8QuatPerturbedSimFc_Tstvmpci.h"
#include "trisolve_jVll4a1A.h"
#include "trisolve_Ewqm83ue.h"
#include "trisolve_nzh2XTxC.h"
#include "trisolve_kmp7BqBh.h"
#include <string>
#include "trisolve_QLyTZPzT.h"
#include "rt_atan2d_snf.h"
#include "rt_powd_snf.h"
#include "eye_4CWHrAiR.h"
#include "rt_urand_Upu32_Yd_f_pw_snf.h"
#include "mldivide_Z0xqFpTr.h"
#include "norm_115oznfV.h"
#include <math.h>
#include "updateWeights_YixtX2P7.h"
#include "updateWeights_HTL7SM8h.h"
#include "eps_AH2epkhQ.h"
#include "kron_5Yeqlajx.h"
#include "WtMult_xTv5xWC7.h"
#include "mpc_checkhessian_AF9zNtya.h"
#include "trisolve_bR4rdVHP.h"
#include "xnrm2_LFVDqtKo.h"
#include "xgemv_sOAKB8Uk.h"
#include "Unconstrained_UjzZuo4S.h"
#include "norm_LIDj52w3.h"
#include "abs_5XxirU9Z.h"
#include "maximum_YsmBif7U.h"
#include "abs_1HbhVWDZ.h"
#include "maximum2_goSZU0Rz.h"
#include "mtimes_mjx3OaTZ.h"
#include "DropConstraint_rIRdy5KO.h"
#include "norm_GdpreYkZ.h"
#include "log2_blLsPIAE.h"
#include "recomputeBlockDiag_qmxFvKVu.h"
#include "xnrm2_vEpa8zuo.h"
#include "xzlarf_2N2eIztg.h"
#include "xrot_3pYuG0oG.h"
#include "xrot_yqSjxpUW.h"
#include "xnrm2_yAJpxfog.h"
#include "checkVectorNonFinite_2JllBqp7.h"
#include "xrotg_XzIjz1eG.h"
#include "xnrm2_KuvT0oF6.h"
#include "xgemv_AUXWxjLv.h"
#include "xnrm2_H2991AvN.h"
#include "xgemv_3az3hqLU.h"
#include "xgemv_hztnEYXM.h"
#include "xgerc_6YFUaNlM.h"
#include "xnrm2_ZWAmJ4ix.h"
#include "xgemv_F8pkuUXW.h"
#include "xnrm2_Cmmg4Lta.h"
#include "xgemv_wB0hPhuq.h"
#include "xnrm2_UCgE6veV.h"
#include "xgemv_5ht9hnKF.h"
#include <cstdlib>
#include <stddef.h>
#include "plook_u32u16_binckpan.h"
#include "plook_u32d_binckpan.h"
#include "plook_u32d_binckpang.h"
#include "div_nde_s32_floor.h"
#include "zero_crossing_types.h"

extern "C" {

#include "rt_nonfinite.h"

}
// Named constants for MATLAB Function: '<S158>/VariableHorizonOptimizer'
  const int32_T proc_control_nu
{
  8
};
static void rate_scheduler(proc_control::RT_MODEL_proc_control_T *const
  proc_control_M);

//
//         This function updates active task flag for each subrate.
//         The function is called at model base rate, hence the
//         generated code self-manages all its subrates.
//
static void rate_scheduler(proc_control::RT_MODEL_proc_control_T *const
  proc_control_M)
{
  // Compute which subrates run during the next base time step.  Subrates
  //  are an integer multiple of the base rate counter.  Therefore, the subtask
  //  counter is reset when it reaches its limit (zero means run).

  (proc_control_M->Timing.TaskCounters.TID[1])++;
  if ((proc_control_M->Timing.TaskCounters.TID[1]) > 1) {// Sample time: [0.04s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[1] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[2])++;
  if ((proc_control_M->Timing.TaskCounters.TID[2]) > 4) {// Sample time: [0.1s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[2] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[3])++;
  if ((proc_control_M->Timing.TaskCounters.TID[3]) > 49) {// Sample time: [1.0s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[3] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[4])++;
  if ((proc_control_M->Timing.TaskCounters.TID[4]) > 99) {// Sample time: [2.0s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[4] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[5])++;
  if ((proc_control_M->Timing.TaskCounters.TID[5]) > 249) {// Sample time: [5.0s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[5] = 0;
  }
}

// System initialize for atomic system:
void proc_control::proc_control_CurrentTime_Init(DW_CurrentTime_proc_control_T
  *localDW)
{
  // Start for MATLABSystem: '<S95>/Current Time'
  localDW->obj.matlabCodegenIsDeleted = false;
  localDW->objisempty = true;
  localDW->obj.isInitialized = 1;
  localDW->obj.isSetupComplete = true;
}

// Output and update for atomic system:
void proc_control::proc_control_CurrentTime(B_CurrentTime_proc_control_T *localB)
{
  // MATLABSystem: '<S95>/Current Time'
  currentROSTimeBus(&localB->CurrentTime);
}

// Termination for atomic system:
void proc_control::proc_control_CurrentTime_Term(DW_CurrentTime_proc_control_T
  *localDW)
{
  // Terminate for MATLABSystem: '<S95>/Current Time'
  if (!localDW->obj.matlabCodegenIsDeleted) {
    localDW->obj.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S95>/Current Time'
}

void proc_control::proc_control_copydigits(const char_T s1_data[], const int32_T
  s1_size[2], int32_T idx, const char_T s_data[], int32_T k, int32_T n,
  boolean_T allowpoint, char_T b_s1_data[], int32_T b_s1_size[2], int32_T *b_idx,
  int32_T *b_k, boolean_T *success, B_MATLABSystem_proc_control_T *localB)
{
  boolean_T exitg1;
  *b_k = k;
  *b_idx = idx;
  b_s1_size[0] = 1;
  b_s1_size[1] = s1_size[1];
  localB->loop_ub = s1_size[1] - 1;
  if (localB->loop_ub >= 0) {
    std::memcpy(&b_s1_data[0], &s1_data[0], (localB->loop_ub + 1) * sizeof
                (char_T));
  }

  *success = (k <= n);
  localB->haspoint = false;
  exitg1 = false;
  while ((!exitg1) && ((*success) && (*b_k <= n))) {
    localB->c = s_data[*b_k - 1];
    if ((localB->c >= '0') && (localB->c <= '9')) {
      b_s1_data[*b_idx - 1] = localB->c;
      (*b_idx)++;
      (*b_k)++;
    } else if (localB->c == '.') {
      if (allowpoint && (!localB->haspoint)) {
        b_s1_data[*b_idx - 1] = '.';
        (*b_idx)++;
        localB->haspoint = true;
      } else {
        *success = false;
      }

      (*b_k)++;
    } else if (localB->c == ',') {
      (*b_k)++;
    } else {
      exitg1 = true;
    }
  }
}

void proc_control::proc_control_readfloat(const char_T s1_data[], const int32_T
  s1_size[2], int32_T idx, const char_T s_data[], int32_T k, int32_T n,
  boolean_T allowimag, char_T b_s1_data[], int32_T b_s1_size[2], int32_T *b_idx,
  int32_T *b_k, boolean_T *isimag, boolean_T *b_finite, real_T *nfv, boolean_T
  *foundsign, boolean_T *success, B_MATLABSystem_proc_control_T *localB)
{
  static const boolean_T tmp[128]{ false, false, false, false, false, false,
    false, false, false, true, true, true, true, true, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    true, true, true, true, true, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false };

  int32_T c_s1_size[2];
  int32_T c_s1_size_0[2];
  int32_T d_s1_size[2];
  int32_T b_k_0;
  int32_T c_idx;
  int32_T entryg2;
  char_T c_s1_data[67];
  char_T d_s1_data[67];
  char_T c_idx_0;
  boolean_T a__3;
  boolean_T exitg1;
  boolean_T isneg;
  *isimag = false;
  *b_finite = true;
  *nfv = 0.0;
  *b_k = k;
  c_idx = idx;
  c_s1_size[0] = 1;
  c_s1_size[1] = s1_size[1];
  b_k_0 = s1_size[1] - 1;
  if (b_k_0 >= 0) {
    std::memcpy(&c_s1_data[0], &s1_data[0], (b_k_0 + 1) * sizeof(char_T));
  }

  isneg = false;
  *foundsign = false;
  exitg1 = false;
  while ((!exitg1) && (*b_k <= n)) {
    c_idx_0 = s_data[*b_k - 1];
    if (c_idx_0 == '-') {
      isneg = !isneg;
      *foundsign = true;
      (*b_k)++;
    } else if (c_idx_0 == ',') {
      (*b_k)++;
    } else if (c_idx_0 == '+') {
      *foundsign = true;
      (*b_k)++;
    } else if (!tmp[static_cast<uint8_T>(c_idx_0) & 127]) {
      exitg1 = true;
    } else {
      (*b_k)++;
    }
  }

  *success = (*b_k <= n);
  if ((*success) && isneg) {
    if ((idx >= 2) && (s1_data[idx - 2] == '-')) {
      c_s1_data[idx - 2] = ' ';
    } else {
      c_s1_data[idx - 1] = '-';
      c_idx = idx + 1;
    }
  }

  b_s1_size[0] = 1;
  b_s1_size[1] = s1_size[1];
  b_k_0 = s1_size[1] - 1;
  if (b_k_0 >= 0) {
    std::memcpy(&b_s1_data[0], &c_s1_data[0], (b_k_0 + 1) * sizeof(char_T));
  }

  *b_idx = c_idx;
  if (*success) {
    char_T c_idx_1;
    char_T c_idx_2;
    boolean_T guard1{ false };

    boolean_T guard2{ false };

    guard1 = false;
    guard2 = false;
    if (*b_k <= n) {
      c_idx_0 = s_data[*b_k - 1];
      if (c_idx_0 == 'j') {
        guard2 = true;
      } else if (c_idx_0 == 'i') {
        if (*b_k >= n - 1) {
          guard2 = true;
        } else {
          b_k_0 = *b_k;
          c_idx_0 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_0 = s_data[b_k_0 - 1];
          }

          b_k_0++;
          c_idx_1 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_1 = s_data[b_k_0 - 1];
          }

          b_k_0++;
          c_idx_2 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_2 = s_data[b_k_0 - 1];
          }

          if ((((c_idx_0 == 'I') || (c_idx_0 == 'i')) && ((c_idx_1 == 'N') ||
                (c_idx_1 == 'n')) && ((c_idx_2 == 'F') || (c_idx_2 == 'f'))) ||
              (((c_idx_0 == 'N') || (c_idx_0 == 'n')) && ((c_idx_1 == 'A') ||
                (c_idx_1 == 'a')) && ((c_idx_2 == 'N') || (c_idx_2 == 'n')))) {
            guard1 = true;
          } else {
            guard2 = true;
          }
        }
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard2) {
      if (allowimag) {
        *isimag = true;
        (*b_k)++;
        exitg1 = false;
        while ((!exitg1) && (*b_k <= n)) {
          c_idx_0 = s_data[*b_k - 1];
          if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
              (c_idx_0 == ',')) {
            (*b_k)++;
          } else {
            exitg1 = true;
          }
        }

        if ((*b_k <= n) && (s_data[*b_k - 1] == '*')) {
          (*b_k)++;
          proc_control_readfloat(c_s1_data, c_s1_size, c_idx, s_data, *b_k, n,
            false, b_s1_data, b_s1_size, b_idx, b_k, &isneg, b_finite, nfv,
            &a__3, success, localB);
        } else {
          b_s1_data[c_idx - 1] = '1';
          *b_idx = c_idx + 1;
        }
      } else {
        *success = false;
      }

      entryg2 = 1;
    }

    if (guard1) {
      b_k_0 = *b_k;
      c_idx_0 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_0 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      c_idx_1 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_1 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      c_idx_2 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_2 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      if (((c_idx_0 == 'I') || (c_idx_0 == 'i')) && ((c_idx_1 == 'N') ||
           (c_idx_1 == 'n')) && ((c_idx_2 == 'F') || (c_idx_2 == 'f'))) {
        *b_finite = false;
        *nfv = (rtInf);
      } else if (((c_idx_0 == 'N') || (c_idx_0 == 'n')) && ((c_idx_1 == 'A') ||
                  (c_idx_1 == 'a')) && ((c_idx_2 == 'N') || (c_idx_2 == 'n'))) {
        *b_finite = false;
        *nfv = (rtNaN);
      } else {
        b_k_0 = *b_k;
      }

      *b_k = b_k_0;
      if (*b_finite) {
        proc_control_copydigits(c_s1_data, c_s1_size, c_idx, s_data, b_k_0, n,
          true, d_s1_data, d_s1_size, b_idx, b_k, success, localB);
        b_s1_size[0] = 1;
        b_s1_size[1] = d_s1_size[1];
        c_idx = d_s1_size[1] - 1;
        if (c_idx >= 0) {
          std::memcpy(&b_s1_data[0], &d_s1_data[0], (c_idx + 1) * sizeof(char_T));
        }

        if (*success) {
          c_s1_size[1] = d_s1_size[1];
          if (c_idx >= 0) {
            std::memcpy(&c_s1_data[0], &d_s1_data[0], (c_idx + 1) * sizeof
                        (char_T));
          }

          if (*b_k <= n) {
            c_idx_0 = s_data[*b_k - 1];
            if ((c_idx_0 == 'E') || (c_idx_0 == 'e')) {
              int32_T loop_ub;
              c_s1_data[*b_idx - 1] = 'e';
              c_idx = *b_idx - 1;
              b_k_0 = *b_k;
              while ((b_k_0 + 1 <= n) && (s_data[b_k_0] == ',')) {
                b_k_0++;
              }

              if (b_k_0 + 1 <= n) {
                c_idx_0 = s_data[b_k_0];
                if (c_idx_0 == '-') {
                  c_s1_data[*b_idx] = '-';
                  c_idx = *b_idx;
                  b_k_0++;
                } else if (c_idx_0 == '+') {
                  b_k_0++;
                }
              }

              c_s1_size_0[0] = 1;
              c_s1_size_0[1] = d_s1_size[1];
              loop_ub = d_s1_size[1] - 1;
              if (loop_ub >= 0) {
                std::memcpy(&d_s1_data[0], &c_s1_data[0], (loop_ub + 1) * sizeof
                            (char_T));
              }

              proc_control_copydigits(d_s1_data, c_s1_size_0, c_idx + 2, s_data,
                b_k_0 + 1, n, false, c_s1_data, c_s1_size, b_idx, b_k, &isneg,
                localB);
              if (isneg && (*b_k > b_k_0 + 1)) {
              } else {
                *success = false;
              }
            }
          }

          b_s1_size[0] = 1;
          b_s1_size[1] = c_s1_size[1];
          b_k_0 = c_s1_size[1] - 1;
          if (b_k_0 >= 0) {
            std::memcpy(&b_s1_data[0], &c_s1_data[0], (b_k_0 + 1) * sizeof
                        (char_T));
          }
        }
      } else if ((c_idx >= 2) && (c_s1_data[c_idx - 2] == '-')) {
        *b_idx = c_idx - 1;
        b_s1_data[c_idx - 2] = ' ';
        *nfv = -*nfv;
      }

      exitg1 = false;
      while ((!exitg1) && (*b_k <= n)) {
        c_idx_0 = s_data[*b_k - 1];
        if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
            (c_idx_0 == ',')) {
          (*b_k)++;
        } else {
          exitg1 = true;
        }
      }

      if ((*b_k <= n) && (s_data[*b_k - 1] == '*')) {
        (*b_k)++;
        exitg1 = false;
        while ((!exitg1) && (*b_k <= n)) {
          c_idx_0 = s_data[*b_k - 1];
          if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
              (c_idx_0 == ',')) {
            (*b_k)++;
          } else {
            exitg1 = true;
          }
        }
      }

      if (*b_k <= n) {
        c_idx_0 = s_data[*b_k - 1];
        if ((c_idx_0 == 'i') || (c_idx_0 == 'j')) {
          (*b_k)++;
          *isimag = true;
        }
      }

      entryg2 = 0;
    }

    int32_T exitg3;
    do {
      exitg3 = 0;
      if (entryg2 == 0) {
      } else {
        entryg2 = 0;
      }

      if (*b_k <= n) {
        c_idx_0 = s_data[*b_k - 1];
        if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
            (c_idx_0 == ',')) {
          (*b_k)++;
        } else {
          exitg3 = 1;
        }
      } else {
        exitg3 = 1;
      }
    } while (exitg3 == 0);
  }
}

// System initialize for atomic system:
void proc_control::proc_control_MATLABSystem_Init(DW_MATLABSystem_proc_control_T
  *localDW)
{
  // Start for MATLABSystem: '<S314>/MATLAB System'
  localDW->objisempty = true;

  // InitializeConditions for MATLABSystem: '<S314>/MATLAB System'
  //  Perform one-time calculations, such as computing constants
  //  Initialize / reset discrete-state properties
  std::memset(&localDW->obj.lastMsg[0], 0, 400U * sizeof(real_T));
  for (int32_T i{0}; i < 13; i++) {
    localDW->obj.lastValues[i] = 0.0;
    localDW->lastValues[i] = localDW->obj.lastValues[i];
  }

  std::memcpy(&localDW->lastMsg[0], &localDW->obj.lastMsg[0], 400U * sizeof
              (real_T));

  // End of InitializeConditions for MATLABSystem: '<S314>/MATLAB System'
}

// System reset for atomic system:
void proc_control::proc_control_MATLABSystem_Reset
  (DW_MATLABSystem_proc_control_T *localDW)
{
  // InitializeConditions for MATLABSystem: '<S314>/MATLAB System'
  //  Initialize / reset discrete-state properties
  std::memset(&localDW->obj.lastMsg[0], 0, 400U * sizeof(real_T));
  for (int32_T i{0}; i < 13; i++) {
    localDW->obj.lastValues[i] = 0.0;
    localDW->lastValues[i] = localDW->obj.lastValues[i];
  }

  std::memcpy(&localDW->lastMsg[0], &localDW->obj.lastMsg[0], 400U * sizeof
              (real_T));

  // End of InitializeConditions for MATLABSystem: '<S314>/MATLAB System'
}

// Output and update for atomic system:
void proc_control::proc_control_MATLABSystem(const uint8_T rtu_0[64], uint32_T
  rtu_1, B_MATLABSystem_proc_control_T *localB, DW_MATLABSystem_proc_control_T
  *localDW)
{
  static const boolean_T tmp[128]{ false, false, false, false, false, false,
    false, false, false, true, true, true, true, true, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    true, true, true, true, true, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false };

  // MATLABSystem: '<S314>/MATLAB System'
  for (localB->c_k = 0; localB->c_k < 64; localB->c_k++) {
    localB->u0[localB->c_k] = rtu_0[localB->c_k];
  }

  //  Implement algorithm. Calculate y as a function of input u and
  //  discrete states.
  //  remove space and add a comma at the end
  if (rtu_1 < 1U) {
    localB->k = 0;
  } else {
    localB->k = static_cast<int32_T>(rtu_1);
  }

  localB->st_Value_size_idx_1 = localB->k;
  for (localB->c_k = 0; localB->c_k < localB->k; localB->c_k++) {
    localB->b_y_data[localB->c_k] = static_cast<int8_T>(localB->u0[localB->c_k]);
  }

  localB->nbMatches = -1;
  localB->i = 1;
  while (localB->i <= localB->k) {
    if (localB->b_y_data[localB->i - 1] == ' ') {
      localB->nbMatches++;
      localB->matches_data[localB->nbMatches] = static_cast<int8_T>(localB->i);
      localB->i++;
    } else {
      localB->i++;
    }
  }

  localB->replaced_size_idx_1 = (localB->k - localB->nbMatches) - 1;
  localB->k = 0;
  localB->i = 0;
  for (localB->j = 0; localB->j <= localB->nbMatches; localB->j++) {
    while (localB->i + 1 < localB->matches_data[localB->j]) {
      localB->replaced_data[localB->k] = localB->b_y_data[localB->i];
      localB->k++;
      localB->i++;
    }

    localB->i++;
  }

  while (localB->i + 1 <= localB->st_Value_size_idx_1) {
    localB->replaced_data[localB->k] = localB->b_y_data[localB->i];
    localB->k++;
    localB->i++;
  }

  localB->st_Value_size_idx_1 = localB->replaced_size_idx_1 + 1;
  if (localB->replaced_size_idx_1 - 1 >= 0) {
    std::memcpy(&localB->cleanStr_data[0], &localB->replaced_data[0],
                localB->replaced_size_idx_1 * sizeof(char_T));
  }

  localB->cleanStr_data[localB->replaced_size_idx_1] = ',';

  //  new msg
  for (localB->c_k = 0; localB->c_k < localB->st_Value_size_idx_1; localB->c_k++)
  {
    localB->s1_data[localB->c_k] = static_cast<int8_T>(localDW->
      obj.lastMsg[localB->c_k]);
  }

  localB->b_bool = false;
  localB->nbMatches = 1;
  int32_T exitg1;
  do {
    exitg1 = 0;
    if (localB->nbMatches - 1 <= localB->replaced_size_idx_1) {
      localB->j = localB->nbMatches - 1;
      if (localB->s1_data[localB->j] != localB->cleanStr_data[localB->j]) {
        exitg1 = 1;
      } else {
        localB->nbMatches++;
      }
    } else {
      localB->b_bool = true;
      exitg1 = 1;
    }
  } while (exitg1 == 0);

  if (!localB->b_bool) {
    localB->k = 0;
    while ((localB->k + 1 <= localB->replaced_size_idx_1 + 1) &&
           (localB->cleanStr_data[localB->k] == ';')) {
      localB->k++;
    }

    localB->itoken = localB->k;
    while ((localB->k + 1 <= localB->replaced_size_idx_1 + 1) &&
           (localB->cleanStr_data[localB->k] != ';')) {
      localB->k++;
    }

    if (localB->itoken + 1 > localB->k) {
      localB->itoken = 0;
      localB->n = -1;
    } else {
      localB->n = localB->k - 1;
    }

    localB->replaced_size_idx_1 = localB->n - localB->itoken;
    localB->nbMatches = localB->replaced_size_idx_1 + 1;
    localB->j = localB->replaced_size_idx_1 + 1;
    for (localB->c_k = 0; localB->c_k <= localB->replaced_size_idx_1;
         localB->c_k++) {
      localB->str_data[localB->c_k] = localB->cleanStr_data[localB->itoken +
        localB->c_k];
    }

    //         %% string2array
    for (localB->c_k = 0; localB->c_k < localB->nbMatches; localB->c_k++) {
      localB->b_varargin_1_data[localB->c_k] = localB->cleanStr_data
        [localB->itoken + localB->c_k];
    }

    localB->b_varargin_1_data[localB->replaced_size_idx_1 + 1] = '\x00';
    printf("input : %s \n", &localB->b_varargin_1_data[0]);
    fflush(stdout);
    for (localB->nbMatches = 0; localB->nbMatches < 13; localB->nbMatches++) {
      localB->k = 1;
      while ((localB->k <= localB->j) && (localB->str_data[localB->k - 1] == ','))
      {
        localB->k++;
      }

      localB->itoken = localB->k - 1;
      while ((localB->k <= localB->j) && (localB->str_data[localB->k - 1] != ','))
      {
        localB->k++;
      }

      if (localB->k > localB->j) {
        localB->i = 0;
        localB->j = 0;
      } else {
        localB->i = localB->k - 1;
      }

      if (localB->itoken + 1 > localB->k - 1) {
        localB->itoken = 0;
        localB->n = 0;
      } else {
        localB->n = localB->k - 1;
      }

      localB->array[localB->nbMatches] = (rtNaN);
      localB->replaced_size_idx_1 = localB->n - localB->itoken;
      if (localB->replaced_size_idx_1 >= 1) {
        boolean_T exitg2;
        localB->ntoread = 0;
        localB->k = 0;
        exitg2 = false;
        while ((!exitg2) && (localB->k + 1 <= localB->replaced_size_idx_1)) {
          localB->b_y_tmp = localB->str_data[localB->itoken + localB->k];
          if (tmp[static_cast<uint8_T>(localB->b_y_tmp) & 127] ||
              (localB->b_y_tmp == '\x00')) {
            localB->k++;
          } else {
            exitg2 = true;
          }
        }

        localB->unnamed_idx_1 = localB->replaced_size_idx_1 + 2;
        localB->s1_size[0] = 1;
        localB->s1_size[1] = localB->replaced_size_idx_1 + 2;
        if (localB->unnamed_idx_1 - 1 >= 0) {
          std::memset(&localB->s1_data[0], 0, localB->unnamed_idx_1 * sizeof
                      (char_T));
        }

        localB->str_size[0] = 1;
        localB->str_size[1] = localB->replaced_size_idx_1;
        for (localB->c_k = 0; localB->c_k < localB->replaced_size_idx_1;
             localB->c_k++) {
          localB->str_data_m[localB->c_k] = localB->str_data[localB->itoken +
            localB->c_k];
        }

        proc_control_readfloat(localB->s1_data, localB->s1_size, 1,
          localB->str_data_m, localB->k + 1, localB->n - localB->itoken, true,
          localB->b_s1_data, localB->b_s1_size, &localB->unnamed_idx_1,
          &localB->b_k, &localB->b_bool, &localB->isfinite1, &localB->scanned1,
          &localB->a__1, &localB->success, localB);
        localB->k = localB->b_s1_size[1] - 1;
        if (localB->k >= 0) {
          std::memcpy(&localB->s1_data[0], &localB->b_s1_data[0], (localB->k + 1)
                      * sizeof(char_T));
        }

        localB->k = localB->unnamed_idx_1;
        if (localB->isfinite1) {
          localB->ntoread = 1;
        }

        if (localB->success && (localB->b_k <= localB->replaced_size_idx_1)) {
          localB->s1_data[localB->unnamed_idx_1 - 1] = ' ';
          localB->str_size[0] = 1;
          localB->str_size[1] = localB->replaced_size_idx_1;
          for (localB->c_k = 0; localB->c_k < localB->replaced_size_idx_1;
               localB->c_k++) {
            localB->str_data_m[localB->c_k] = localB->str_data[localB->itoken +
              localB->c_k];
          }

          localB->s1_size_k[0] = 1;
          localB->s1_size_k[1] = localB->b_s1_size[1];
          localB->c_k = localB->b_s1_size[1] - 1;
          if (localB->c_k >= 0) {
            std::memcpy(&localB->b_s1_data[0], &localB->s1_data[0], (localB->c_k
              + 1) * sizeof(char_T));
          }

          proc_control_readfloat(localB->b_s1_data, localB->s1_size_k,
            localB->unnamed_idx_1 + 1, localB->str_data_m, localB->b_k,
            localB->n - localB->itoken, true, localB->s1_data, localB->s1_size,
            &localB->k, &localB->c_k, &localB->a__1, &localB->success,
            &localB->scanned2, &localB->foundsign, &localB->c_success, localB);
          if (localB->success) {
            localB->ntoread++;
          }

          if (localB->c_success && (localB->c_k > localB->replaced_size_idx_1) &&
              (static_cast<boolean_T>(localB->b_bool ^ localB->a__1)) &&
              localB->foundsign) {
            localB->success = true;
          } else {
            localB->success = false;
          }
        } else {
          localB->scanned2 = 0.0;
        }

        if (localB->success) {
          localB->s1_data[localB->k - 1] = '\x00';
          if (localB->ntoread == 2) {
            localB->k = sscanf(&localB->s1_data[0], "%lf %lf", &localB->scanned1,
                               &localB->scanned2);
            if (localB->k != 2) {
              localB->scanned1 = (rtNaN);
              localB->scanned2 = (rtNaN);
            }
          } else if (localB->ntoread == 1) {
            localB->k = sscanf(&localB->s1_data[0], "%lf", &localB->scanned1_c);
            if (localB->isfinite1) {
              if (localB->k == 1) {
                localB->scanned1 = localB->scanned1_c;
              } else {
                localB->scanned1 = (rtNaN);
              }
            } else if (localB->k == 1) {
              localB->scanned2 = localB->scanned1_c;
            } else {
              localB->scanned2 = (rtNaN);
            }
          }

          if (localB->b_bool) {
            localB->array[localB->nbMatches] = localB->scanned2;
          } else {
            localB->array[localB->nbMatches] = localB->scanned1;
          }
        }
      }

      localB->c_k = localB->j - localB->i;
      if (localB->c_k < 2) {
        localB->k = 0;
        localB->itoken = -1;
      } else {
        localB->k = 1;
        localB->itoken = localB->c_k - 1;
      }

      localB->j = localB->itoken - localB->k;
      for (localB->c_k = 0; localB->c_k <= localB->j; localB->c_k++) {
        localB->str_data[localB->c_k] = localB->str_data[(localB->i + localB->k)
          + localB->c_k];
      }

      localB->j++;
    }

    std::memcpy(&localDW->obj.lastValues[0], &localB->array[0], 13U * sizeof
                (real_T));
    for (localB->c_k = 0; localB->c_k < localB->st_Value_size_idx_1; localB->c_k
         ++) {
      localDW->obj.lastMsg[localB->c_k] = static_cast<uint8_T>
        (localB->cleanStr_data[localB->c_k]);
    }
  }

  // MATLABSystem: '<S314>/MATLAB System'
  std::memcpy(&localB->OV[0], &localDW->obj.lastValues[0], 13U * sizeof(real_T));

  // MATLABSystem: '<S314>/MATLAB System'
  std::memcpy(&localDW->lastValues[0], &localDW->obj.lastValues[0], 13U * sizeof
              (real_T));
  std::memcpy(&localDW->lastMsg[0], &localDW->obj.lastMsg[0], 400U * sizeof
              (real_T));
}

// Termination for atomic system:
void proc_control::proc_control_MATLABSystem_Term(DW_MATLABSystem_proc_control_T
  *localDW)
{
  // Terminate for MATLABSystem: '<S314>/MATLAB System'
  std::memcpy(&localDW->lastValues[0], &localDW->obj.lastValues[0], 13U * sizeof
              (real_T));
  std::memcpy(&localDW->lastMsg[0], &localDW->obj.lastMsg[0], 400U * sizeof
              (real_T));
}

void proc_control::proc_control_copydigits_a(const char_T s1_data[], const
  int32_T s1_size[2], int32_T idx, const char_T s_data[], int32_T k, int32_T n,
  boolean_T allowpoint, char_T b_s1_data[], int32_T b_s1_size[2], int32_T *b_idx,
  int32_T *b_k, boolean_T *success, B_MATLABSystem1_proc_control_T *localB)
{
  boolean_T exitg1;
  *b_k = k;
  *b_idx = idx;
  b_s1_size[0] = 1;
  b_s1_size[1] = s1_size[1];
  localB->loop_ub = s1_size[1] - 1;
  if (localB->loop_ub >= 0) {
    std::memcpy(&b_s1_data[0], &s1_data[0], (localB->loop_ub + 1) * sizeof
                (char_T));
  }

  *success = (k <= n);
  localB->haspoint = false;
  exitg1 = false;
  while ((!exitg1) && ((*success) && (*b_k <= n))) {
    localB->c = s_data[*b_k - 1];
    if ((localB->c >= '0') && (localB->c <= '9')) {
      b_s1_data[*b_idx - 1] = localB->c;
      (*b_idx)++;
      (*b_k)++;
    } else if (localB->c == '.') {
      if (allowpoint && (!localB->haspoint)) {
        b_s1_data[*b_idx - 1] = '.';
        (*b_idx)++;
        localB->haspoint = true;
      } else {
        *success = false;
      }

      (*b_k)++;
    } else if (localB->c == ',') {
      (*b_k)++;
    } else {
      exitg1 = true;
    }
  }
}

void proc_control::proc_control_readfloat_l(const char_T s1_data[], const
  int32_T s1_size[2], int32_T idx, const char_T s_data[], int32_T k, int32_T n,
  boolean_T allowimag, char_T b_s1_data[], int32_T b_s1_size[2], int32_T *b_idx,
  int32_T *b_k, boolean_T *isimag, boolean_T *b_finite, real_T *nfv, boolean_T
  *foundsign, boolean_T *success, B_MATLABSystem1_proc_control_T *localB)
{
  static const boolean_T tmp[128]{ false, false, false, false, false, false,
    false, false, false, true, true, true, true, true, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    true, true, true, true, true, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false };

  int32_T c_s1_size[2];
  int32_T c_s1_size_0[2];
  int32_T d_s1_size[2];
  int32_T b_k_0;
  int32_T c_idx;
  int32_T entryg2;
  char_T c_s1_data[67];
  char_T d_s1_data[67];
  char_T c_idx_0;
  boolean_T a__3;
  boolean_T exitg1;
  boolean_T isneg;
  *isimag = false;
  *b_finite = true;
  *nfv = 0.0;
  *b_k = k;
  c_idx = idx;
  c_s1_size[0] = 1;
  c_s1_size[1] = s1_size[1];
  b_k_0 = s1_size[1] - 1;
  if (b_k_0 >= 0) {
    std::memcpy(&c_s1_data[0], &s1_data[0], (b_k_0 + 1) * sizeof(char_T));
  }

  isneg = false;
  *foundsign = false;
  exitg1 = false;
  while ((!exitg1) && (*b_k <= n)) {
    c_idx_0 = s_data[*b_k - 1];
    if (c_idx_0 == '-') {
      isneg = !isneg;
      *foundsign = true;
      (*b_k)++;
    } else if (c_idx_0 == ',') {
      (*b_k)++;
    } else if (c_idx_0 == '+') {
      *foundsign = true;
      (*b_k)++;
    } else if (!tmp[static_cast<uint8_T>(c_idx_0) & 127]) {
      exitg1 = true;
    } else {
      (*b_k)++;
    }
  }

  *success = (*b_k <= n);
  if ((*success) && isneg) {
    if ((idx >= 2) && (s1_data[idx - 2] == '-')) {
      c_s1_data[idx - 2] = ' ';
    } else {
      c_s1_data[idx - 1] = '-';
      c_idx = idx + 1;
    }
  }

  b_s1_size[0] = 1;
  b_s1_size[1] = s1_size[1];
  b_k_0 = s1_size[1] - 1;
  if (b_k_0 >= 0) {
    std::memcpy(&b_s1_data[0], &c_s1_data[0], (b_k_0 + 1) * sizeof(char_T));
  }

  *b_idx = c_idx;
  if (*success) {
    char_T c_idx_1;
    char_T c_idx_2;
    boolean_T guard1{ false };

    boolean_T guard2{ false };

    guard1 = false;
    guard2 = false;
    if (*b_k <= n) {
      c_idx_0 = s_data[*b_k - 1];
      if (c_idx_0 == 'j') {
        guard2 = true;
      } else if (c_idx_0 == 'i') {
        if (*b_k >= n - 1) {
          guard2 = true;
        } else {
          b_k_0 = *b_k;
          c_idx_0 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_0 = s_data[b_k_0 - 1];
          }

          b_k_0++;
          c_idx_1 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_1 = s_data[b_k_0 - 1];
          }

          b_k_0++;
          c_idx_2 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_2 = s_data[b_k_0 - 1];
          }

          if ((((c_idx_0 == 'I') || (c_idx_0 == 'i')) && ((c_idx_1 == 'N') ||
                (c_idx_1 == 'n')) && ((c_idx_2 == 'F') || (c_idx_2 == 'f'))) ||
              (((c_idx_0 == 'N') || (c_idx_0 == 'n')) && ((c_idx_1 == 'A') ||
                (c_idx_1 == 'a')) && ((c_idx_2 == 'N') || (c_idx_2 == 'n')))) {
            guard1 = true;
          } else {
            guard2 = true;
          }
        }
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard2) {
      if (allowimag) {
        *isimag = true;
        (*b_k)++;
        exitg1 = false;
        while ((!exitg1) && (*b_k <= n)) {
          c_idx_0 = s_data[*b_k - 1];
          if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
              (c_idx_0 == ',')) {
            (*b_k)++;
          } else {
            exitg1 = true;
          }
        }

        if ((*b_k <= n) && (s_data[*b_k - 1] == '*')) {
          (*b_k)++;
          proc_control_readfloat_l(c_s1_data, c_s1_size, c_idx, s_data, *b_k, n,
            false, b_s1_data, b_s1_size, b_idx, b_k, &isneg, b_finite, nfv,
            &a__3, success, localB);
        } else {
          b_s1_data[c_idx - 1] = '1';
          *b_idx = c_idx + 1;
        }
      } else {
        *success = false;
      }

      entryg2 = 1;
    }

    if (guard1) {
      b_k_0 = *b_k;
      c_idx_0 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_0 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      c_idx_1 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_1 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      c_idx_2 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_2 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      if (((c_idx_0 == 'I') || (c_idx_0 == 'i')) && ((c_idx_1 == 'N') ||
           (c_idx_1 == 'n')) && ((c_idx_2 == 'F') || (c_idx_2 == 'f'))) {
        *b_finite = false;
        *nfv = (rtInf);
      } else if (((c_idx_0 == 'N') || (c_idx_0 == 'n')) && ((c_idx_1 == 'A') ||
                  (c_idx_1 == 'a')) && ((c_idx_2 == 'N') || (c_idx_2 == 'n'))) {
        *b_finite = false;
        *nfv = (rtNaN);
      } else {
        b_k_0 = *b_k;
      }

      *b_k = b_k_0;
      if (*b_finite) {
        proc_control_copydigits_a(c_s1_data, c_s1_size, c_idx, s_data, b_k_0, n,
          true, d_s1_data, d_s1_size, b_idx, b_k, success, localB);
        b_s1_size[0] = 1;
        b_s1_size[1] = d_s1_size[1];
        c_idx = d_s1_size[1] - 1;
        if (c_idx >= 0) {
          std::memcpy(&b_s1_data[0], &d_s1_data[0], (c_idx + 1) * sizeof(char_T));
        }

        if (*success) {
          c_s1_size[1] = d_s1_size[1];
          if (c_idx >= 0) {
            std::memcpy(&c_s1_data[0], &d_s1_data[0], (c_idx + 1) * sizeof
                        (char_T));
          }

          if (*b_k <= n) {
            c_idx_0 = s_data[*b_k - 1];
            if ((c_idx_0 == 'E') || (c_idx_0 == 'e')) {
              int32_T loop_ub;
              c_s1_data[*b_idx - 1] = 'e';
              c_idx = *b_idx - 1;
              b_k_0 = *b_k;
              while ((b_k_0 + 1 <= n) && (s_data[b_k_0] == ',')) {
                b_k_0++;
              }

              if (b_k_0 + 1 <= n) {
                c_idx_0 = s_data[b_k_0];
                if (c_idx_0 == '-') {
                  c_s1_data[*b_idx] = '-';
                  c_idx = *b_idx;
                  b_k_0++;
                } else if (c_idx_0 == '+') {
                  b_k_0++;
                }
              }

              c_s1_size_0[0] = 1;
              c_s1_size_0[1] = d_s1_size[1];
              loop_ub = d_s1_size[1] - 1;
              if (loop_ub >= 0) {
                std::memcpy(&d_s1_data[0], &c_s1_data[0], (loop_ub + 1) * sizeof
                            (char_T));
              }

              proc_control_copydigits_a(d_s1_data, c_s1_size_0, c_idx + 2,
                s_data, b_k_0 + 1, n, false, c_s1_data, c_s1_size, b_idx, b_k,
                &isneg, localB);
              if (isneg && (*b_k > b_k_0 + 1)) {
              } else {
                *success = false;
              }
            }
          }

          b_s1_size[0] = 1;
          b_s1_size[1] = c_s1_size[1];
          b_k_0 = c_s1_size[1] - 1;
          if (b_k_0 >= 0) {
            std::memcpy(&b_s1_data[0], &c_s1_data[0], (b_k_0 + 1) * sizeof
                        (char_T));
          }
        }
      } else if ((c_idx >= 2) && (c_s1_data[c_idx - 2] == '-')) {
        *b_idx = c_idx - 1;
        b_s1_data[c_idx - 2] = ' ';
        *nfv = -*nfv;
      }

      exitg1 = false;
      while ((!exitg1) && (*b_k <= n)) {
        c_idx_0 = s_data[*b_k - 1];
        if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
            (c_idx_0 == ',')) {
          (*b_k)++;
        } else {
          exitg1 = true;
        }
      }

      if ((*b_k <= n) && (s_data[*b_k - 1] == '*')) {
        (*b_k)++;
        exitg1 = false;
        while ((!exitg1) && (*b_k <= n)) {
          c_idx_0 = s_data[*b_k - 1];
          if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
              (c_idx_0 == ',')) {
            (*b_k)++;
          } else {
            exitg1 = true;
          }
        }
      }

      if (*b_k <= n) {
        c_idx_0 = s_data[*b_k - 1];
        if ((c_idx_0 == 'i') || (c_idx_0 == 'j')) {
          (*b_k)++;
          *isimag = true;
        }
      }

      entryg2 = 0;
    }

    int32_T exitg3;
    do {
      exitg3 = 0;
      if (entryg2 == 0) {
      } else {
        entryg2 = 0;
      }

      if (*b_k <= n) {
        c_idx_0 = s_data[*b_k - 1];
        if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
            (c_idx_0 == ',')) {
          (*b_k)++;
        } else {
          exitg3 = 1;
        }
      } else {
        exitg3 = 1;
      }
    } while (exitg3 == 0);
  }
}

// System initialize for atomic system:
void proc_control::proc_control_MATLABSystem1_Init
  (DW_MATLABSystem1_proc_control_T *localDW)
{
  // Start for MATLABSystem: '<S314>/MATLAB System1'
  localDW->objisempty = true;

  // InitializeConditions for MATLABSystem: '<S314>/MATLAB System1'
  //  Perform one-time calculations, such as computing constants
  //  Initialize / reset discrete-state properties
  std::memset(&localDW->obj.lastMsg[0], 0, 400U * sizeof(real_T));
  for (int32_T i{0}; i < 8; i++) {
    localDW->obj.lastValues[i] = 0.0;
    localDW->lastValues[i] = localDW->obj.lastValues[i];
  }

  std::memcpy(&localDW->lastMsg[0], &localDW->obj.lastMsg[0], 400U * sizeof
              (real_T));

  // End of InitializeConditions for MATLABSystem: '<S314>/MATLAB System1'
}

// System reset for atomic system:
void proc_control::proc_contro_MATLABSystem1_Reset
  (DW_MATLABSystem1_proc_control_T *localDW)
{
  // InitializeConditions for MATLABSystem: '<S314>/MATLAB System1'
  //  Initialize / reset discrete-state properties
  std::memset(&localDW->obj.lastMsg[0], 0, 400U * sizeof(real_T));
  for (int32_T i{0}; i < 8; i++) {
    localDW->obj.lastValues[i] = 0.0;
    localDW->lastValues[i] = localDW->obj.lastValues[i];
  }

  std::memcpy(&localDW->lastMsg[0], &localDW->obj.lastMsg[0], 400U * sizeof
              (real_T));

  // End of InitializeConditions for MATLABSystem: '<S314>/MATLAB System1'
}

// Output and update for atomic system:
void proc_control::proc_control_MATLABSystem1(const uint8_T rtu_0[64], uint32_T
  rtu_1, B_MATLABSystem1_proc_control_T *localB, DW_MATLABSystem1_proc_control_T
  *localDW)
{
  static const boolean_T tmp[128]{ false, false, false, false, false, false,
    false, false, false, true, true, true, true, true, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    true, true, true, true, true, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false };

  // MATLABSystem: '<S314>/MATLAB System1'
  for (localB->c_k = 0; localB->c_k < 64; localB->c_k++) {
    localB->u0[localB->c_k] = rtu_0[localB->c_k];
  }

  //  Implement algorithm. Calculate y as a function of input u and
  //  discrete states.
  //  remove space and add a comma at the end
  if (rtu_1 < 1U) {
    localB->k = 0;
  } else {
    localB->k = static_cast<int32_T>(rtu_1);
  }

  localB->st_Value_size_idx_1 = localB->k;
  for (localB->c_k = 0; localB->c_k < localB->k; localB->c_k++) {
    localB->b_y_data[localB->c_k] = static_cast<int8_T>(localB->u0[localB->c_k]);
  }

  localB->nbMatches = -1;
  localB->i = 1;
  while (localB->i <= localB->k) {
    if (localB->b_y_data[localB->i - 1] == ' ') {
      localB->nbMatches++;
      localB->matches_data[localB->nbMatches] = static_cast<int8_T>(localB->i);
      localB->i++;
    } else {
      localB->i++;
    }
  }

  localB->replaced_size_idx_1 = (localB->k - localB->nbMatches) - 1;
  localB->k = 0;
  localB->i = 0;
  for (localB->j = 0; localB->j <= localB->nbMatches; localB->j++) {
    while (localB->i + 1 < localB->matches_data[localB->j]) {
      localB->replaced_data[localB->k] = localB->b_y_data[localB->i];
      localB->k++;
      localB->i++;
    }

    localB->i++;
  }

  while (localB->i + 1 <= localB->st_Value_size_idx_1) {
    localB->replaced_data[localB->k] = localB->b_y_data[localB->i];
    localB->k++;
    localB->i++;
  }

  localB->st_Value_size_idx_1 = localB->replaced_size_idx_1 + 1;
  if (localB->replaced_size_idx_1 - 1 >= 0) {
    std::memcpy(&localB->cleanStr_data[0], &localB->replaced_data[0],
                localB->replaced_size_idx_1 * sizeof(char_T));
  }

  localB->cleanStr_data[localB->replaced_size_idx_1] = ',';

  //  new msg
  for (localB->c_k = 0; localB->c_k < localB->st_Value_size_idx_1; localB->c_k++)
  {
    localB->s1_data[localB->c_k] = static_cast<int8_T>(localDW->
      obj.lastMsg[localB->c_k]);
  }

  localB->b_bool = false;
  localB->nbMatches = 1;
  int32_T exitg1;
  do {
    exitg1 = 0;
    if (localB->nbMatches - 1 <= localB->replaced_size_idx_1) {
      localB->j = localB->nbMatches - 1;
      if (localB->s1_data[localB->j] != localB->cleanStr_data[localB->j]) {
        exitg1 = 1;
      } else {
        localB->nbMatches++;
      }
    } else {
      localB->b_bool = true;
      exitg1 = 1;
    }
  } while (exitg1 == 0);

  if (!localB->b_bool) {
    localB->k = 0;
    while ((localB->k + 1 <= localB->replaced_size_idx_1 + 1) &&
           (localB->cleanStr_data[localB->k] == ';')) {
      localB->k++;
    }

    localB->itoken = localB->k;
    while ((localB->k + 1 <= localB->replaced_size_idx_1 + 1) &&
           (localB->cleanStr_data[localB->k] != ';')) {
      localB->k++;
    }

    if (localB->itoken + 1 > localB->k) {
      localB->itoken = 0;
      localB->n = -1;
    } else {
      localB->n = localB->k - 1;
    }

    localB->replaced_size_idx_1 = localB->n - localB->itoken;
    localB->nbMatches = localB->replaced_size_idx_1 + 1;
    localB->j = localB->replaced_size_idx_1 + 1;
    for (localB->c_k = 0; localB->c_k <= localB->replaced_size_idx_1;
         localB->c_k++) {
      localB->str_data[localB->c_k] = localB->cleanStr_data[localB->itoken +
        localB->c_k];
    }

    //         %% string2array
    for (localB->c_k = 0; localB->c_k < localB->nbMatches; localB->c_k++) {
      localB->b_varargin_1_data[localB->c_k] = localB->cleanStr_data
        [localB->itoken + localB->c_k];
    }

    localB->b_varargin_1_data[localB->replaced_size_idx_1 + 1] = '\x00';
    printf("input : %s \n", &localB->b_varargin_1_data[0]);
    fflush(stdout);
    for (localB->nbMatches = 0; localB->nbMatches < 8; localB->nbMatches++) {
      localB->k = 1;
      while ((localB->k <= localB->j) && (localB->str_data[localB->k - 1] == ','))
      {
        localB->k++;
      }

      localB->itoken = localB->k - 1;
      while ((localB->k <= localB->j) && (localB->str_data[localB->k - 1] != ','))
      {
        localB->k++;
      }

      if (localB->k > localB->j) {
        localB->i = 0;
        localB->j = 0;
      } else {
        localB->i = localB->k - 1;
      }

      if (localB->itoken + 1 > localB->k - 1) {
        localB->itoken = 0;
        localB->n = 0;
      } else {
        localB->n = localB->k - 1;
      }

      localB->array[localB->nbMatches] = (rtNaN);
      localB->replaced_size_idx_1 = localB->n - localB->itoken;
      if (localB->replaced_size_idx_1 >= 1) {
        boolean_T exitg2;
        localB->ntoread = 0;
        localB->k = 0;
        exitg2 = false;
        while ((!exitg2) && (localB->k + 1 <= localB->replaced_size_idx_1)) {
          localB->b_y_tmp = localB->str_data[localB->itoken + localB->k];
          if (tmp[static_cast<uint8_T>(localB->b_y_tmp) & 127] ||
              (localB->b_y_tmp == '\x00')) {
            localB->k++;
          } else {
            exitg2 = true;
          }
        }

        localB->unnamed_idx_1 = localB->replaced_size_idx_1 + 2;
        localB->s1_size[0] = 1;
        localB->s1_size[1] = localB->replaced_size_idx_1 + 2;
        if (localB->unnamed_idx_1 - 1 >= 0) {
          std::memset(&localB->s1_data[0], 0, localB->unnamed_idx_1 * sizeof
                      (char_T));
        }

        localB->str_size[0] = 1;
        localB->str_size[1] = localB->replaced_size_idx_1;
        for (localB->c_k = 0; localB->c_k < localB->replaced_size_idx_1;
             localB->c_k++) {
          localB->str_data_m[localB->c_k] = localB->str_data[localB->itoken +
            localB->c_k];
        }

        proc_control_readfloat_l(localB->s1_data, localB->s1_size, 1,
          localB->str_data_m, localB->k + 1, localB->n - localB->itoken, true,
          localB->b_s1_data, localB->b_s1_size, &localB->unnamed_idx_1,
          &localB->b_k, &localB->b_bool, &localB->isfinite1, &localB->scanned1,
          &localB->a__1, &localB->success, localB);
        localB->k = localB->b_s1_size[1] - 1;
        if (localB->k >= 0) {
          std::memcpy(&localB->s1_data[0], &localB->b_s1_data[0], (localB->k + 1)
                      * sizeof(char_T));
        }

        localB->k = localB->unnamed_idx_1;
        if (localB->isfinite1) {
          localB->ntoread = 1;
        }

        if (localB->success && (localB->b_k <= localB->replaced_size_idx_1)) {
          localB->s1_data[localB->unnamed_idx_1 - 1] = ' ';
          localB->str_size[0] = 1;
          localB->str_size[1] = localB->replaced_size_idx_1;
          for (localB->c_k = 0; localB->c_k < localB->replaced_size_idx_1;
               localB->c_k++) {
            localB->str_data_m[localB->c_k] = localB->str_data[localB->itoken +
              localB->c_k];
          }

          localB->s1_size_k[0] = 1;
          localB->s1_size_k[1] = localB->b_s1_size[1];
          localB->c_k = localB->b_s1_size[1] - 1;
          if (localB->c_k >= 0) {
            std::memcpy(&localB->b_s1_data[0], &localB->s1_data[0], (localB->c_k
              + 1) * sizeof(char_T));
          }

          proc_control_readfloat_l(localB->b_s1_data, localB->s1_size_k,
            localB->unnamed_idx_1 + 1, localB->str_data_m, localB->b_k,
            localB->n - localB->itoken, true, localB->s1_data, localB->s1_size,
            &localB->k, &localB->c_k, &localB->a__1, &localB->success,
            &localB->scanned2, &localB->foundsign, &localB->c_success, localB);
          if (localB->success) {
            localB->ntoread++;
          }

          if (localB->c_success && (localB->c_k > localB->replaced_size_idx_1) &&
              (static_cast<boolean_T>(localB->b_bool ^ localB->a__1)) &&
              localB->foundsign) {
            localB->success = true;
          } else {
            localB->success = false;
          }
        } else {
          localB->scanned2 = 0.0;
        }

        if (localB->success) {
          localB->s1_data[localB->k - 1] = '\x00';
          if (localB->ntoread == 2) {
            localB->k = sscanf(&localB->s1_data[0], "%lf %lf", &localB->scanned1,
                               &localB->scanned2);
            if (localB->k != 2) {
              localB->scanned1 = (rtNaN);
              localB->scanned2 = (rtNaN);
            }
          } else if (localB->ntoread == 1) {
            localB->k = sscanf(&localB->s1_data[0], "%lf", &localB->scanned1_c);
            if (localB->isfinite1) {
              if (localB->k == 1) {
                localB->scanned1 = localB->scanned1_c;
              } else {
                localB->scanned1 = (rtNaN);
              }
            } else if (localB->k == 1) {
              localB->scanned2 = localB->scanned1_c;
            } else {
              localB->scanned2 = (rtNaN);
            }
          }

          if (localB->b_bool) {
            localB->array[localB->nbMatches] = localB->scanned2;
          } else {
            localB->array[localB->nbMatches] = localB->scanned1;
          }
        }
      }

      localB->c_k = localB->j - localB->i;
      if (localB->c_k < 2) {
        localB->k = 0;
        localB->itoken = -1;
      } else {
        localB->k = 1;
        localB->itoken = localB->c_k - 1;
      }

      localB->j = localB->itoken - localB->k;
      for (localB->c_k = 0; localB->c_k <= localB->j; localB->c_k++) {
        localB->str_data[localB->c_k] = localB->str_data[(localB->i + localB->k)
          + localB->c_k];
      }

      localB->j++;
    }

    std::memcpy(&localDW->obj.lastValues[0], &localB->array[0], sizeof(real_T) <<
                3U);
    for (localB->c_k = 0; localB->c_k < localB->st_Value_size_idx_1; localB->c_k
         ++) {
      localDW->obj.lastMsg[localB->c_k] = static_cast<uint8_T>
        (localB->cleanStr_data[localB->c_k]);
    }
  }

  // MATLABSystem: '<S314>/MATLAB System1'
  std::memcpy(&localB->MV[0], &localDW->obj.lastValues[0], sizeof(real_T) << 3U);

  // MATLABSystem: '<S314>/MATLAB System1'
  std::memcpy(&localDW->lastValues[0], &localDW->obj.lastValues[0], sizeof
              (real_T) << 3U);
  std::memcpy(&localDW->lastMsg[0], &localDW->obj.lastMsg[0], 400U * sizeof
              (real_T));
}

// Termination for atomic system:
void proc_control::proc_control_MATLABSystem1_Term
  (DW_MATLABSystem1_proc_control_T *localDW)
{
  // Terminate for MATLABSystem: '<S314>/MATLAB System1'
  std::memcpy(&localDW->lastValues[0], &localDW->obj.lastValues[0], sizeof
              (real_T) << 3U);
  std::memcpy(&localDW->lastMsg[0], &localDW->obj.lastMsg[0], 400U * sizeof
              (real_T));
}

void proc_control::proc_control_copydigits_az(const char_T s1_data[], const
  int32_T s1_size[2], int32_T idx, const char_T s_data[], int32_T k, int32_T n,
  boolean_T allowpoint, char_T b_s1_data[], int32_T b_s1_size[2], int32_T *b_idx,
  int32_T *b_k, boolean_T *success, B_MATLABSystem1_proc_contro_c_T *localB)
{
  boolean_T exitg1;
  *b_k = k;
  *b_idx = idx;
  b_s1_size[0] = 1;
  b_s1_size[1] = s1_size[1];
  localB->loop_ub = s1_size[1] - 1;
  if (localB->loop_ub >= 0) {
    std::memcpy(&b_s1_data[0], &s1_data[0], (localB->loop_ub + 1) * sizeof
                (char_T));
  }

  *success = (k <= n);
  localB->haspoint = false;
  exitg1 = false;
  while ((!exitg1) && ((*success) && (*b_k <= n))) {
    localB->c = s_data[*b_k - 1];
    if ((localB->c >= '0') && (localB->c <= '9')) {
      b_s1_data[*b_idx - 1] = localB->c;
      (*b_idx)++;
      (*b_k)++;
    } else if (localB->c == '.') {
      if (allowpoint && (!localB->haspoint)) {
        b_s1_data[*b_idx - 1] = '.';
        (*b_idx)++;
        localB->haspoint = true;
      } else {
        *success = false;
      }

      (*b_k)++;
    } else if (localB->c == ',') {
      (*b_k)++;
    } else {
      exitg1 = true;
    }
  }
}

void proc_control::proc_control_readfloat_l2(const char_T s1_data[], const
  int32_T s1_size[2], int32_T idx, const char_T s_data[], int32_T k, int32_T n,
  boolean_T allowimag, char_T b_s1_data[], int32_T b_s1_size[2], int32_T *b_idx,
  int32_T *b_k, boolean_T *isimag, boolean_T *b_finite, real_T *nfv, boolean_T
  *foundsign, boolean_T *success, B_MATLABSystem1_proc_contro_c_T *localB)
{
  static const boolean_T tmp[128]{ false, false, false, false, false, false,
    false, false, false, true, true, true, true, true, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    true, true, true, true, true, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false };

  int32_T c_s1_size[2];
  int32_T c_s1_size_0[2];
  int32_T d_s1_size[2];
  int32_T b_k_0;
  int32_T c_idx;
  int32_T entryg2;
  char_T c_s1_data[67];
  char_T d_s1_data[67];
  char_T c_idx_0;
  boolean_T a__3;
  boolean_T exitg1;
  boolean_T isneg;
  *isimag = false;
  *b_finite = true;
  *nfv = 0.0;
  *b_k = k;
  c_idx = idx;
  c_s1_size[0] = 1;
  c_s1_size[1] = s1_size[1];
  b_k_0 = s1_size[1] - 1;
  if (b_k_0 >= 0) {
    std::memcpy(&c_s1_data[0], &s1_data[0], (b_k_0 + 1) * sizeof(char_T));
  }

  isneg = false;
  *foundsign = false;
  exitg1 = false;
  while ((!exitg1) && (*b_k <= n)) {
    c_idx_0 = s_data[*b_k - 1];
    if (c_idx_0 == '-') {
      isneg = !isneg;
      *foundsign = true;
      (*b_k)++;
    } else if (c_idx_0 == ',') {
      (*b_k)++;
    } else if (c_idx_0 == '+') {
      *foundsign = true;
      (*b_k)++;
    } else if (!tmp[static_cast<uint8_T>(c_idx_0) & 127]) {
      exitg1 = true;
    } else {
      (*b_k)++;
    }
  }

  *success = (*b_k <= n);
  if ((*success) && isneg) {
    if ((idx >= 2) && (s1_data[idx - 2] == '-')) {
      c_s1_data[idx - 2] = ' ';
    } else {
      c_s1_data[idx - 1] = '-';
      c_idx = idx + 1;
    }
  }

  b_s1_size[0] = 1;
  b_s1_size[1] = s1_size[1];
  b_k_0 = s1_size[1] - 1;
  if (b_k_0 >= 0) {
    std::memcpy(&b_s1_data[0], &c_s1_data[0], (b_k_0 + 1) * sizeof(char_T));
  }

  *b_idx = c_idx;
  if (*success) {
    char_T c_idx_1;
    char_T c_idx_2;
    boolean_T guard1{ false };

    boolean_T guard2{ false };

    guard1 = false;
    guard2 = false;
    if (*b_k <= n) {
      c_idx_0 = s_data[*b_k - 1];
      if (c_idx_0 == 'j') {
        guard2 = true;
      } else if (c_idx_0 == 'i') {
        if (*b_k >= n - 1) {
          guard2 = true;
        } else {
          b_k_0 = *b_k;
          c_idx_0 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_0 = s_data[b_k_0 - 1];
          }

          b_k_0++;
          c_idx_1 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_1 = s_data[b_k_0 - 1];
          }

          b_k_0++;
          c_idx_2 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_2 = s_data[b_k_0 - 1];
          }

          if ((((c_idx_0 == 'I') || (c_idx_0 == 'i')) && ((c_idx_1 == 'N') ||
                (c_idx_1 == 'n')) && ((c_idx_2 == 'F') || (c_idx_2 == 'f'))) ||
              (((c_idx_0 == 'N') || (c_idx_0 == 'n')) && ((c_idx_1 == 'A') ||
                (c_idx_1 == 'a')) && ((c_idx_2 == 'N') || (c_idx_2 == 'n')))) {
            guard1 = true;
          } else {
            guard2 = true;
          }
        }
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard2) {
      if (allowimag) {
        *isimag = true;
        (*b_k)++;
        exitg1 = false;
        while ((!exitg1) && (*b_k <= n)) {
          c_idx_0 = s_data[*b_k - 1];
          if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
              (c_idx_0 == ',')) {
            (*b_k)++;
          } else {
            exitg1 = true;
          }
        }

        if ((*b_k <= n) && (s_data[*b_k - 1] == '*')) {
          (*b_k)++;
          proc_control_readfloat_l2(c_s1_data, c_s1_size, c_idx, s_data, *b_k, n,
            false, b_s1_data, b_s1_size, b_idx, b_k, &isneg, b_finite, nfv,
            &a__3, success, localB);
        } else {
          b_s1_data[c_idx - 1] = '1';
          *b_idx = c_idx + 1;
        }
      } else {
        *success = false;
      }

      entryg2 = 1;
    }

    if (guard1) {
      b_k_0 = *b_k;
      c_idx_0 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_0 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      c_idx_1 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_1 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      c_idx_2 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_2 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      if (((c_idx_0 == 'I') || (c_idx_0 == 'i')) && ((c_idx_1 == 'N') ||
           (c_idx_1 == 'n')) && ((c_idx_2 == 'F') || (c_idx_2 == 'f'))) {
        *b_finite = false;
        *nfv = (rtInf);
      } else if (((c_idx_0 == 'N') || (c_idx_0 == 'n')) && ((c_idx_1 == 'A') ||
                  (c_idx_1 == 'a')) && ((c_idx_2 == 'N') || (c_idx_2 == 'n'))) {
        *b_finite = false;
        *nfv = (rtNaN);
      } else {
        b_k_0 = *b_k;
      }

      *b_k = b_k_0;
      if (*b_finite) {
        proc_control_copydigits_az(c_s1_data, c_s1_size, c_idx, s_data, b_k_0, n,
          true, d_s1_data, d_s1_size, b_idx, b_k, success, localB);
        b_s1_size[0] = 1;
        b_s1_size[1] = d_s1_size[1];
        c_idx = d_s1_size[1] - 1;
        if (c_idx >= 0) {
          std::memcpy(&b_s1_data[0], &d_s1_data[0], (c_idx + 1) * sizeof(char_T));
        }

        if (*success) {
          c_s1_size[1] = d_s1_size[1];
          if (c_idx >= 0) {
            std::memcpy(&c_s1_data[0], &d_s1_data[0], (c_idx + 1) * sizeof
                        (char_T));
          }

          if (*b_k <= n) {
            c_idx_0 = s_data[*b_k - 1];
            if ((c_idx_0 == 'E') || (c_idx_0 == 'e')) {
              int32_T loop_ub;
              c_s1_data[*b_idx - 1] = 'e';
              c_idx = *b_idx - 1;
              b_k_0 = *b_k;
              while ((b_k_0 + 1 <= n) && (s_data[b_k_0] == ',')) {
                b_k_0++;
              }

              if (b_k_0 + 1 <= n) {
                c_idx_0 = s_data[b_k_0];
                if (c_idx_0 == '-') {
                  c_s1_data[*b_idx] = '-';
                  c_idx = *b_idx;
                  b_k_0++;
                } else if (c_idx_0 == '+') {
                  b_k_0++;
                }
              }

              c_s1_size_0[0] = 1;
              c_s1_size_0[1] = d_s1_size[1];
              loop_ub = d_s1_size[1] - 1;
              if (loop_ub >= 0) {
                std::memcpy(&d_s1_data[0], &c_s1_data[0], (loop_ub + 1) * sizeof
                            (char_T));
              }

              proc_control_copydigits_az(d_s1_data, c_s1_size_0, c_idx + 2,
                s_data, b_k_0 + 1, n, false, c_s1_data, c_s1_size, b_idx, b_k,
                &isneg, localB);
              if (isneg && (*b_k > b_k_0 + 1)) {
              } else {
                *success = false;
              }
            }
          }

          b_s1_size[0] = 1;
          b_s1_size[1] = c_s1_size[1];
          b_k_0 = c_s1_size[1] - 1;
          if (b_k_0 >= 0) {
            std::memcpy(&b_s1_data[0], &c_s1_data[0], (b_k_0 + 1) * sizeof
                        (char_T));
          }
        }
      } else if ((c_idx >= 2) && (c_s1_data[c_idx - 2] == '-')) {
        *b_idx = c_idx - 1;
        b_s1_data[c_idx - 2] = ' ';
        *nfv = -*nfv;
      }

      exitg1 = false;
      while ((!exitg1) && (*b_k <= n)) {
        c_idx_0 = s_data[*b_k - 1];
        if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
            (c_idx_0 == ',')) {
          (*b_k)++;
        } else {
          exitg1 = true;
        }
      }

      if ((*b_k <= n) && (s_data[*b_k - 1] == '*')) {
        (*b_k)++;
        exitg1 = false;
        while ((!exitg1) && (*b_k <= n)) {
          c_idx_0 = s_data[*b_k - 1];
          if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
              (c_idx_0 == ',')) {
            (*b_k)++;
          } else {
            exitg1 = true;
          }
        }
      }

      if (*b_k <= n) {
        c_idx_0 = s_data[*b_k - 1];
        if ((c_idx_0 == 'i') || (c_idx_0 == 'j')) {
          (*b_k)++;
          *isimag = true;
        }
      }

      entryg2 = 0;
    }

    int32_T exitg3;
    do {
      exitg3 = 0;
      if (entryg2 == 0) {
      } else {
        entryg2 = 0;
      }

      if (*b_k <= n) {
        c_idx_0 = s_data[*b_k - 1];
        if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
            (c_idx_0 == ',')) {
          (*b_k)++;
        } else {
          exitg3 = 1;
        }
      } else {
        exitg3 = 1;
      }
    } while (exitg3 == 0);
  }
}

// System initialize for atomic system:
void proc_control::proc_contr_MATLABSystem1_l_Init
  (DW_MATLABSystem1_proc_contr_g_T *localDW)
{
  // Start for MATLABSystem: '<S311>/MATLAB System1'
  localDW->objisempty = true;

  // InitializeConditions for MATLABSystem: '<S311>/MATLAB System1'
  //  Perform one-time calculations, such as computing constants
  //  Initialize / reset discrete-state properties
  localDW->obj.lastValues[0] = 0.0;
  localDW->lastValues[0] = localDW->obj.lastValues[0];
  localDW->obj.lastValues[1] = 0.0;
  localDW->lastValues[1] = localDW->obj.lastValues[1];
  localDW->obj.lastValues[2] = 0.0;
  localDW->lastValues[2] = localDW->obj.lastValues[2];
  for (int32_T i{0}; i < 400; i++) {
    // InitializeConditions for MATLABSystem: '<S311>/MATLAB System1'
    localDW->obj.lastMsg[i] = 0.0;
    localDW->lastMsg[i] = localDW->obj.lastMsg[i];
  }
}

// System reset for atomic system:
void proc_control::proc_cont_MATLABSystem1_a_Reset
  (DW_MATLABSystem1_proc_contr_g_T *localDW)
{
  // InitializeConditions for MATLABSystem: '<S311>/MATLAB System1'
  //  Initialize / reset discrete-state properties
  localDW->obj.lastValues[0] = 0.0;
  localDW->lastValues[0] = localDW->obj.lastValues[0];
  localDW->obj.lastValues[1] = 0.0;
  localDW->lastValues[1] = localDW->obj.lastValues[1];
  localDW->obj.lastValues[2] = 0.0;
  localDW->lastValues[2] = localDW->obj.lastValues[2];
  for (int32_T i{0}; i < 400; i++) {
    localDW->obj.lastMsg[i] = 0.0;
    localDW->lastMsg[i] = localDW->obj.lastMsg[i];
  }

  // End of InitializeConditions for MATLABSystem: '<S311>/MATLAB System1'
}

// Output and update for atomic system:
void proc_control::proc_control_MATLABSystem1_f(const uint8_T rtu_0[64],
  uint32_T rtu_1, B_MATLABSystem1_proc_contro_c_T *localB,
  DW_MATLABSystem1_proc_contr_g_T *localDW)
{
  static const boolean_T tmp[128]{ false, false, false, false, false, false,
    false, false, false, true, true, true, true, true, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    true, true, true, true, true, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false };

  // MATLABSystem: '<S311>/MATLAB System1'
  for (localB->c_k = 0; localB->c_k < 64; localB->c_k++) {
    localB->u0[localB->c_k] = rtu_0[localB->c_k];
  }

  //  Implement algorithm. Calculate y as a function of input u and
  //  discrete states.
  //  remove space and add a comma at the end
  if (rtu_1 < 1U) {
    localB->k = 0;
  } else {
    localB->k = static_cast<int32_T>(rtu_1);
  }

  localB->st_Value_size_idx_1 = localB->k;
  for (localB->c_k = 0; localB->c_k < localB->k; localB->c_k++) {
    localB->b_y_data[localB->c_k] = static_cast<int8_T>(localB->u0[localB->c_k]);
  }

  localB->nbMatches = -1;
  localB->i = 1;
  while (localB->i <= localB->k) {
    if (localB->b_y_data[localB->i - 1] == ' ') {
      localB->nbMatches++;
      localB->matches_data[localB->nbMatches] = static_cast<int8_T>(localB->i);
      localB->i++;
    } else {
      localB->i++;
    }
  }

  localB->replaced_size_idx_1 = (localB->k - localB->nbMatches) - 1;
  localB->k = 0;
  localB->i = 0;
  for (localB->j = 0; localB->j <= localB->nbMatches; localB->j++) {
    while (localB->i + 1 < localB->matches_data[localB->j]) {
      localB->replaced_data[localB->k] = localB->b_y_data[localB->i];
      localB->k++;
      localB->i++;
    }

    localB->i++;
  }

  while (localB->i + 1 <= localB->st_Value_size_idx_1) {
    localB->replaced_data[localB->k] = localB->b_y_data[localB->i];
    localB->k++;
    localB->i++;
  }

  localB->st_Value_size_idx_1 = localB->replaced_size_idx_1 + 1;
  if (localB->replaced_size_idx_1 - 1 >= 0) {
    std::memcpy(&localB->cleanStr_data[0], &localB->replaced_data[0],
                localB->replaced_size_idx_1 * sizeof(char_T));
  }

  localB->cleanStr_data[localB->replaced_size_idx_1] = ',';

  //  new msg
  for (localB->c_k = 0; localB->c_k < localB->st_Value_size_idx_1; localB->c_k++)
  {
    localB->s1_data[localB->c_k] = static_cast<int8_T>(localDW->
      obj.lastMsg[localB->c_k]);
  }

  localB->b_bool = false;
  localB->nbMatches = 1;
  int32_T exitg1;
  do {
    exitg1 = 0;
    if (localB->nbMatches - 1 <= localB->replaced_size_idx_1) {
      localB->j = localB->nbMatches - 1;
      if (localB->s1_data[localB->j] != localB->cleanStr_data[localB->j]) {
        exitg1 = 1;
      } else {
        localB->nbMatches++;
      }
    } else {
      localB->b_bool = true;
      exitg1 = 1;
    }
  } while (exitg1 == 0);

  if (!localB->b_bool) {
    localB->k = 0;
    while ((localB->k + 1 <= localB->replaced_size_idx_1 + 1) &&
           (localB->cleanStr_data[localB->k] == ';')) {
      localB->k++;
    }

    localB->itoken = localB->k;
    while ((localB->k + 1 <= localB->replaced_size_idx_1 + 1) &&
           (localB->cleanStr_data[localB->k] != ';')) {
      localB->k++;
    }

    if (localB->itoken + 1 > localB->k) {
      localB->itoken = 0;
      localB->n = -1;
    } else {
      localB->n = localB->k - 1;
    }

    localB->replaced_size_idx_1 = localB->n - localB->itoken;
    localB->nbMatches = localB->replaced_size_idx_1 + 1;
    localB->j = localB->replaced_size_idx_1 + 1;
    for (localB->c_k = 0; localB->c_k <= localB->replaced_size_idx_1;
         localB->c_k++) {
      localB->str_data[localB->c_k] = localB->cleanStr_data[localB->itoken +
        localB->c_k];
    }

    //         %% string2array
    for (localB->c_k = 0; localB->c_k < localB->nbMatches; localB->c_k++) {
      localB->b_varargin_1_data[localB->c_k] = localB->cleanStr_data
        [localB->itoken + localB->c_k];
    }

    localB->b_varargin_1_data[localB->replaced_size_idx_1 + 1] = '\x00';
    printf("input : %s \n", &localB->b_varargin_1_data[0]);
    fflush(stdout);
    for (localB->nbMatches = 0; localB->nbMatches < 3; localB->nbMatches++) {
      localB->k = 1;
      while ((localB->k <= localB->j) && (localB->str_data[localB->k - 1] == ','))
      {
        localB->k++;
      }

      localB->itoken = localB->k - 1;
      while ((localB->k <= localB->j) && (localB->str_data[localB->k - 1] != ','))
      {
        localB->k++;
      }

      if (localB->k > localB->j) {
        localB->i = 0;
        localB->j = 0;
      } else {
        localB->i = localB->k - 1;
      }

      if (localB->itoken + 1 > localB->k - 1) {
        localB->itoken = 0;
        localB->n = 0;
      } else {
        localB->n = localB->k - 1;
      }

      localB->array[localB->nbMatches] = (rtNaN);
      localB->replaced_size_idx_1 = localB->n - localB->itoken;
      if (localB->replaced_size_idx_1 >= 1) {
        boolean_T exitg2;
        localB->ntoread = 0;
        localB->k = 0;
        exitg2 = false;
        while ((!exitg2) && (localB->k + 1 <= localB->replaced_size_idx_1)) {
          localB->b_y_tmp = localB->str_data[localB->itoken + localB->k];
          if (tmp[static_cast<uint8_T>(localB->b_y_tmp) & 127] ||
              (localB->b_y_tmp == '\x00')) {
            localB->k++;
          } else {
            exitg2 = true;
          }
        }

        localB->unnamed_idx_1 = localB->replaced_size_idx_1 + 2;
        localB->s1_size[0] = 1;
        localB->s1_size[1] = localB->replaced_size_idx_1 + 2;
        if (localB->unnamed_idx_1 - 1 >= 0) {
          std::memset(&localB->s1_data[0], 0, localB->unnamed_idx_1 * sizeof
                      (char_T));
        }

        localB->str_size[0] = 1;
        localB->str_size[1] = localB->replaced_size_idx_1;
        for (localB->c_k = 0; localB->c_k < localB->replaced_size_idx_1;
             localB->c_k++) {
          localB->str_data_m[localB->c_k] = localB->str_data[localB->itoken +
            localB->c_k];
        }

        proc_control_readfloat_l2(localB->s1_data, localB->s1_size, 1,
          localB->str_data_m, localB->k + 1, localB->n - localB->itoken, true,
          localB->b_s1_data, localB->b_s1_size, &localB->unnamed_idx_1,
          &localB->b_k, &localB->b_bool, &localB->isfinite1, &localB->scanned1,
          &localB->a__1, &localB->success, localB);
        localB->k = localB->b_s1_size[1] - 1;
        if (localB->k >= 0) {
          std::memcpy(&localB->s1_data[0], &localB->b_s1_data[0], (localB->k + 1)
                      * sizeof(char_T));
        }

        localB->k = localB->unnamed_idx_1;
        if (localB->isfinite1) {
          localB->ntoread = 1;
        }

        if (localB->success && (localB->b_k <= localB->replaced_size_idx_1)) {
          localB->s1_data[localB->unnamed_idx_1 - 1] = ' ';
          localB->str_size[0] = 1;
          localB->str_size[1] = localB->replaced_size_idx_1;
          for (localB->c_k = 0; localB->c_k < localB->replaced_size_idx_1;
               localB->c_k++) {
            localB->str_data_m[localB->c_k] = localB->str_data[localB->itoken +
              localB->c_k];
          }

          localB->s1_size_k[0] = 1;
          localB->s1_size_k[1] = localB->b_s1_size[1];
          localB->c_k = localB->b_s1_size[1] - 1;
          if (localB->c_k >= 0) {
            std::memcpy(&localB->b_s1_data[0], &localB->s1_data[0], (localB->c_k
              + 1) * sizeof(char_T));
          }

          proc_control_readfloat_l2(localB->b_s1_data, localB->s1_size_k,
            localB->unnamed_idx_1 + 1, localB->str_data_m, localB->b_k,
            localB->n - localB->itoken, true, localB->s1_data, localB->s1_size,
            &localB->k, &localB->c_k, &localB->a__1, &localB->success,
            &localB->scanned2, &localB->foundsign, &localB->c_success, localB);
          if (localB->success) {
            localB->ntoread++;
          }

          if (localB->c_success && (localB->c_k > localB->replaced_size_idx_1) &&
              (static_cast<boolean_T>(localB->b_bool ^ localB->a__1)) &&
              localB->foundsign) {
            localB->success = true;
          } else {
            localB->success = false;
          }
        } else {
          localB->scanned2 = 0.0;
        }

        if (localB->success) {
          localB->s1_data[localB->k - 1] = '\x00';
          if (localB->ntoread == 2) {
            localB->k = sscanf(&localB->s1_data[0], "%lf %lf", &localB->scanned1,
                               &localB->scanned2);
            if (localB->k != 2) {
              localB->scanned1 = (rtNaN);
              localB->scanned2 = (rtNaN);
            }
          } else if (localB->ntoread == 1) {
            localB->k = sscanf(&localB->s1_data[0], "%lf", &localB->scanned1_c);
            if (localB->isfinite1) {
              if (localB->k == 1) {
                localB->scanned1 = localB->scanned1_c;
              } else {
                localB->scanned1 = (rtNaN);
              }
            } else if (localB->k == 1) {
              localB->scanned2 = localB->scanned1_c;
            } else {
              localB->scanned2 = (rtNaN);
            }
          }

          if (localB->b_bool) {
            localB->array[localB->nbMatches] = localB->scanned2;
          } else {
            localB->array[localB->nbMatches] = localB->scanned1;
          }
        }
      }

      localB->c_k = localB->j - localB->i;
      if (localB->c_k < 2) {
        localB->k = 0;
        localB->itoken = -1;
      } else {
        localB->k = 1;
        localB->itoken = localB->c_k - 1;
      }

      localB->j = localB->itoken - localB->k;
      for (localB->c_k = 0; localB->c_k <= localB->j; localB->c_k++) {
        localB->str_data[localB->c_k] = localB->str_data[(localB->i + localB->k)
          + localB->c_k];
      }

      localB->j++;
    }

    localDW->obj.lastValues[0] = localB->array[0];
    localDW->obj.lastValues[1] = localB->array[1];
    localDW->obj.lastValues[2] = localB->array[2];
    for (localB->c_k = 0; localB->c_k < localB->st_Value_size_idx_1; localB->c_k
         ++) {
      localDW->obj.lastMsg[localB->c_k] = static_cast<uint8_T>
        (localB->cleanStr_data[localB->c_k]);
    }
  }

  // MATLABSystem: '<S311>/MATLAB System1'
  localB->rg[0] = localDW->obj.lastValues[0];

  // MATLABSystem: '<S311>/MATLAB System1'
  localDW->lastValues[0] = localDW->obj.lastValues[0];

  // MATLABSystem: '<S311>/MATLAB System1'
  localB->rg[1] = localDW->obj.lastValues[1];

  // MATLABSystem: '<S311>/MATLAB System1'
  localDW->lastValues[1] = localDW->obj.lastValues[1];

  // MATLABSystem: '<S311>/MATLAB System1'
  localB->rg[2] = localDW->obj.lastValues[2];

  // MATLABSystem: '<S311>/MATLAB System1'
  localDW->lastValues[2] = localDW->obj.lastValues[2];
  std::memcpy(&localDW->lastMsg[0], &localDW->obj.lastMsg[0], 400U * sizeof
              (real_T));
}

// Termination for atomic system:
void proc_control::proc_contr_MATLABSystem1_p_Term
  (DW_MATLABSystem1_proc_contr_g_T *localDW)
{
  // Terminate for MATLABSystem: '<S311>/MATLAB System1'
  localDW->lastValues[0] = localDW->obj.lastValues[0];
  localDW->lastValues[1] = localDW->obj.lastValues[1];
  localDW->lastValues[2] = localDW->obj.lastValues[2];
  std::memcpy(&localDW->lastMsg[0], &localDW->obj.lastMsg[0], 400U * sizeof
              (real_T));
}

void proc_control::proc_control_copydigits_azi(const char_T s1_data[], const
  int32_T s1_size[2], int32_T idx, const char_T s_data[], int32_T k, int32_T n,
  boolean_T allowpoint, char_T b_s1_data[], int32_T b_s1_size[2], int32_T *b_idx,
  int32_T *b_k, boolean_T *success, B_MATLABSystem4_proc_control_T *localB)
{
  boolean_T exitg1;
  *b_k = k;
  *b_idx = idx;
  b_s1_size[0] = 1;
  b_s1_size[1] = s1_size[1];
  localB->loop_ub = s1_size[1] - 1;
  if (localB->loop_ub >= 0) {
    std::memcpy(&b_s1_data[0], &s1_data[0], (localB->loop_ub + 1) * sizeof
                (char_T));
  }

  *success = (k <= n);
  localB->haspoint = false;
  exitg1 = false;
  while ((!exitg1) && ((*success) && (*b_k <= n))) {
    localB->c = s_data[*b_k - 1];
    if ((localB->c >= '0') && (localB->c <= '9')) {
      b_s1_data[*b_idx - 1] = localB->c;
      (*b_idx)++;
      (*b_k)++;
    } else if (localB->c == '.') {
      if (allowpoint && (!localB->haspoint)) {
        b_s1_data[*b_idx - 1] = '.';
        (*b_idx)++;
        localB->haspoint = true;
      } else {
        *success = false;
      }

      (*b_k)++;
    } else if (localB->c == ',') {
      (*b_k)++;
    } else {
      exitg1 = true;
    }
  }
}

void proc_control::proc_control_readfloat_l2g(const char_T s1_data[], const
  int32_T s1_size[2], int32_T idx, const char_T s_data[], int32_T k, int32_T n,
  boolean_T allowimag, char_T b_s1_data[], int32_T b_s1_size[2], int32_T *b_idx,
  int32_T *b_k, boolean_T *isimag, boolean_T *b_finite, real_T *nfv, boolean_T
  *foundsign, boolean_T *success, B_MATLABSystem4_proc_control_T *localB)
{
  static const boolean_T tmp[128]{ false, false, false, false, false, false,
    false, false, false, true, true, true, true, true, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    true, true, true, true, true, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false };

  int32_T c_s1_size[2];
  int32_T c_s1_size_0[2];
  int32_T d_s1_size[2];
  int32_T b_k_0;
  int32_T c_idx;
  int32_T entryg2;
  char_T c_s1_data[67];
  char_T d_s1_data[67];
  char_T c_idx_0;
  boolean_T a__3;
  boolean_T exitg1;
  boolean_T isneg;
  *isimag = false;
  *b_finite = true;
  *nfv = 0.0;
  *b_k = k;
  c_idx = idx;
  c_s1_size[0] = 1;
  c_s1_size[1] = s1_size[1];
  b_k_0 = s1_size[1] - 1;
  if (b_k_0 >= 0) {
    std::memcpy(&c_s1_data[0], &s1_data[0], (b_k_0 + 1) * sizeof(char_T));
  }

  isneg = false;
  *foundsign = false;
  exitg1 = false;
  while ((!exitg1) && (*b_k <= n)) {
    c_idx_0 = s_data[*b_k - 1];
    if (c_idx_0 == '-') {
      isneg = !isneg;
      *foundsign = true;
      (*b_k)++;
    } else if (c_idx_0 == ',') {
      (*b_k)++;
    } else if (c_idx_0 == '+') {
      *foundsign = true;
      (*b_k)++;
    } else if (!tmp[static_cast<uint8_T>(c_idx_0) & 127]) {
      exitg1 = true;
    } else {
      (*b_k)++;
    }
  }

  *success = (*b_k <= n);
  if ((*success) && isneg) {
    if ((idx >= 2) && (s1_data[idx - 2] == '-')) {
      c_s1_data[idx - 2] = ' ';
    } else {
      c_s1_data[idx - 1] = '-';
      c_idx = idx + 1;
    }
  }

  b_s1_size[0] = 1;
  b_s1_size[1] = s1_size[1];
  b_k_0 = s1_size[1] - 1;
  if (b_k_0 >= 0) {
    std::memcpy(&b_s1_data[0], &c_s1_data[0], (b_k_0 + 1) * sizeof(char_T));
  }

  *b_idx = c_idx;
  if (*success) {
    char_T c_idx_1;
    char_T c_idx_2;
    boolean_T guard1{ false };

    boolean_T guard2{ false };

    guard1 = false;
    guard2 = false;
    if (*b_k <= n) {
      c_idx_0 = s_data[*b_k - 1];
      if (c_idx_0 == 'j') {
        guard2 = true;
      } else if (c_idx_0 == 'i') {
        if (*b_k >= n - 1) {
          guard2 = true;
        } else {
          b_k_0 = *b_k;
          c_idx_0 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_0 = s_data[b_k_0 - 1];
          }

          b_k_0++;
          c_idx_1 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_1 = s_data[b_k_0 - 1];
          }

          b_k_0++;
          c_idx_2 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_2 = s_data[b_k_0 - 1];
          }

          if ((((c_idx_0 == 'I') || (c_idx_0 == 'i')) && ((c_idx_1 == 'N') ||
                (c_idx_1 == 'n')) && ((c_idx_2 == 'F') || (c_idx_2 == 'f'))) ||
              (((c_idx_0 == 'N') || (c_idx_0 == 'n')) && ((c_idx_1 == 'A') ||
                (c_idx_1 == 'a')) && ((c_idx_2 == 'N') || (c_idx_2 == 'n')))) {
            guard1 = true;
          } else {
            guard2 = true;
          }
        }
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard2) {
      if (allowimag) {
        *isimag = true;
        (*b_k)++;
        exitg1 = false;
        while ((!exitg1) && (*b_k <= n)) {
          c_idx_0 = s_data[*b_k - 1];
          if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
              (c_idx_0 == ',')) {
            (*b_k)++;
          } else {
            exitg1 = true;
          }
        }

        if ((*b_k <= n) && (s_data[*b_k - 1] == '*')) {
          (*b_k)++;
          proc_control_readfloat_l2g(c_s1_data, c_s1_size, c_idx, s_data, *b_k,
            n, false, b_s1_data, b_s1_size, b_idx, b_k, &isneg, b_finite, nfv,
            &a__3, success, localB);
        } else {
          b_s1_data[c_idx - 1] = '1';
          *b_idx = c_idx + 1;
        }
      } else {
        *success = false;
      }

      entryg2 = 1;
    }

    if (guard1) {
      b_k_0 = *b_k;
      c_idx_0 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_0 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      c_idx_1 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_1 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      c_idx_2 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_2 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      if (((c_idx_0 == 'I') || (c_idx_0 == 'i')) && ((c_idx_1 == 'N') ||
           (c_idx_1 == 'n')) && ((c_idx_2 == 'F') || (c_idx_2 == 'f'))) {
        *b_finite = false;
        *nfv = (rtInf);
      } else if (((c_idx_0 == 'N') || (c_idx_0 == 'n')) && ((c_idx_1 == 'A') ||
                  (c_idx_1 == 'a')) && ((c_idx_2 == 'N') || (c_idx_2 == 'n'))) {
        *b_finite = false;
        *nfv = (rtNaN);
      } else {
        b_k_0 = *b_k;
      }

      *b_k = b_k_0;
      if (*b_finite) {
        proc_control_copydigits_azi(c_s1_data, c_s1_size, c_idx, s_data, b_k_0,
          n, true, d_s1_data, d_s1_size, b_idx, b_k, success, localB);
        b_s1_size[0] = 1;
        b_s1_size[1] = d_s1_size[1];
        c_idx = d_s1_size[1] - 1;
        if (c_idx >= 0) {
          std::memcpy(&b_s1_data[0], &d_s1_data[0], (c_idx + 1) * sizeof(char_T));
        }

        if (*success) {
          c_s1_size[1] = d_s1_size[1];
          if (c_idx >= 0) {
            std::memcpy(&c_s1_data[0], &d_s1_data[0], (c_idx + 1) * sizeof
                        (char_T));
          }

          if (*b_k <= n) {
            c_idx_0 = s_data[*b_k - 1];
            if ((c_idx_0 == 'E') || (c_idx_0 == 'e')) {
              int32_T loop_ub;
              c_s1_data[*b_idx - 1] = 'e';
              c_idx = *b_idx - 1;
              b_k_0 = *b_k;
              while ((b_k_0 + 1 <= n) && (s_data[b_k_0] == ',')) {
                b_k_0++;
              }

              if (b_k_0 + 1 <= n) {
                c_idx_0 = s_data[b_k_0];
                if (c_idx_0 == '-') {
                  c_s1_data[*b_idx] = '-';
                  c_idx = *b_idx;
                  b_k_0++;
                } else if (c_idx_0 == '+') {
                  b_k_0++;
                }
              }

              c_s1_size_0[0] = 1;
              c_s1_size_0[1] = d_s1_size[1];
              loop_ub = d_s1_size[1] - 1;
              if (loop_ub >= 0) {
                std::memcpy(&d_s1_data[0], &c_s1_data[0], (loop_ub + 1) * sizeof
                            (char_T));
              }

              proc_control_copydigits_azi(d_s1_data, c_s1_size_0, c_idx + 2,
                s_data, b_k_0 + 1, n, false, c_s1_data, c_s1_size, b_idx, b_k,
                &isneg, localB);
              if (isneg && (*b_k > b_k_0 + 1)) {
              } else {
                *success = false;
              }
            }
          }

          b_s1_size[0] = 1;
          b_s1_size[1] = c_s1_size[1];
          b_k_0 = c_s1_size[1] - 1;
          if (b_k_0 >= 0) {
            std::memcpy(&b_s1_data[0], &c_s1_data[0], (b_k_0 + 1) * sizeof
                        (char_T));
          }
        }
      } else if ((c_idx >= 2) && (c_s1_data[c_idx - 2] == '-')) {
        *b_idx = c_idx - 1;
        b_s1_data[c_idx - 2] = ' ';
        *nfv = -*nfv;
      }

      exitg1 = false;
      while ((!exitg1) && (*b_k <= n)) {
        c_idx_0 = s_data[*b_k - 1];
        if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
            (c_idx_0 == ',')) {
          (*b_k)++;
        } else {
          exitg1 = true;
        }
      }

      if ((*b_k <= n) && (s_data[*b_k - 1] == '*')) {
        (*b_k)++;
        exitg1 = false;
        while ((!exitg1) && (*b_k <= n)) {
          c_idx_0 = s_data[*b_k - 1];
          if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
              (c_idx_0 == ',')) {
            (*b_k)++;
          } else {
            exitg1 = true;
          }
        }
      }

      if (*b_k <= n) {
        c_idx_0 = s_data[*b_k - 1];
        if ((c_idx_0 == 'i') || (c_idx_0 == 'j')) {
          (*b_k)++;
          *isimag = true;
        }
      }

      entryg2 = 0;
    }

    int32_T exitg3;
    do {
      exitg3 = 0;
      if (entryg2 == 0) {
      } else {
        entryg2 = 0;
      }

      if (*b_k <= n) {
        c_idx_0 = s_data[*b_k - 1];
        if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
            (c_idx_0 == ',')) {
          (*b_k)++;
        } else {
          exitg3 = 1;
        }
      } else {
        exitg3 = 1;
      }
    } while (exitg3 == 0);
  }
}

// System initialize for atomic system:
void proc_control::proc_control_MATLABSystem4_Init
  (DW_MATLABSystem4_proc_control_T *localDW)
{
  // Start for MATLABSystem: '<S311>/MATLAB System4'
  localDW->objisempty = true;

  // InitializeConditions for MATLABSystem: '<S311>/MATLAB System4'
  //  Perform one-time calculations, such as computing constants
  //  Initialize / reset discrete-state properties
  std::memset(&localDW->obj.lastMsg[0], 0, 400U * sizeof(real_T));
  for (int32_T i{0}; i < 6; i++) {
    localDW->obj.lastValues[i] = 0.0;
    localDW->lastValues[i] = localDW->obj.lastValues[i];
  }

  std::memcpy(&localDW->lastMsg[0], &localDW->obj.lastMsg[0], 400U * sizeof
              (real_T));

  // End of InitializeConditions for MATLABSystem: '<S311>/MATLAB System4'
}

// System reset for atomic system:
void proc_control::proc_contro_MATLABSystem4_Reset
  (DW_MATLABSystem4_proc_control_T *localDW)
{
  // InitializeConditions for MATLABSystem: '<S311>/MATLAB System4'
  //  Initialize / reset discrete-state properties
  std::memset(&localDW->obj.lastMsg[0], 0, 400U * sizeof(real_T));
  for (int32_T i{0}; i < 6; i++) {
    localDW->obj.lastValues[i] = 0.0;
    localDW->lastValues[i] = localDW->obj.lastValues[i];
  }

  std::memcpy(&localDW->lastMsg[0], &localDW->obj.lastMsg[0], 400U * sizeof
              (real_T));

  // End of InitializeConditions for MATLABSystem: '<S311>/MATLAB System4'
}

// Output and update for atomic system:
void proc_control::proc_control_MATLABSystem4(const uint8_T rtu_0[64], uint32_T
  rtu_1, B_MATLABSystem4_proc_control_T *localB, DW_MATLABSystem4_proc_control_T
  *localDW)
{
  static const boolean_T tmp[128]{ false, false, false, false, false, false,
    false, false, false, true, true, true, true, true, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    true, true, true, true, true, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false };

  // MATLABSystem: '<S311>/MATLAB System4'
  for (localB->c_k = 0; localB->c_k < 64; localB->c_k++) {
    localB->u0[localB->c_k] = rtu_0[localB->c_k];
  }

  //  Implement algorithm. Calculate y as a function of input u and
  //  discrete states.
  //  remove space and add a comma at the end
  if (rtu_1 < 1U) {
    localB->k = 0;
  } else {
    localB->k = static_cast<int32_T>(rtu_1);
  }

  localB->st_Value_size_idx_1 = localB->k;
  for (localB->c_k = 0; localB->c_k < localB->k; localB->c_k++) {
    localB->b_y_data[localB->c_k] = static_cast<int8_T>(localB->u0[localB->c_k]);
  }

  localB->nbMatches = -1;
  localB->i = 1;
  while (localB->i <= localB->k) {
    if (localB->b_y_data[localB->i - 1] == ' ') {
      localB->nbMatches++;
      localB->matches_data[localB->nbMatches] = static_cast<int8_T>(localB->i);
      localB->i++;
    } else {
      localB->i++;
    }
  }

  localB->replaced_size_idx_1 = (localB->k - localB->nbMatches) - 1;
  localB->k = 0;
  localB->i = 0;
  for (localB->j = 0; localB->j <= localB->nbMatches; localB->j++) {
    while (localB->i + 1 < localB->matches_data[localB->j]) {
      localB->replaced_data[localB->k] = localB->b_y_data[localB->i];
      localB->k++;
      localB->i++;
    }

    localB->i++;
  }

  while (localB->i + 1 <= localB->st_Value_size_idx_1) {
    localB->replaced_data[localB->k] = localB->b_y_data[localB->i];
    localB->k++;
    localB->i++;
  }

  localB->st_Value_size_idx_1 = localB->replaced_size_idx_1 + 1;
  if (localB->replaced_size_idx_1 - 1 >= 0) {
    std::memcpy(&localB->cleanStr_data[0], &localB->replaced_data[0],
                localB->replaced_size_idx_1 * sizeof(char_T));
  }

  localB->cleanStr_data[localB->replaced_size_idx_1] = ',';

  //  new msg
  for (localB->c_k = 0; localB->c_k < localB->st_Value_size_idx_1; localB->c_k++)
  {
    localB->s1_data[localB->c_k] = static_cast<int8_T>(localDW->
      obj.lastMsg[localB->c_k]);
  }

  localB->b_bool = false;
  localB->nbMatches = 1;
  int32_T exitg1;
  do {
    exitg1 = 0;
    if (localB->nbMatches - 1 <= localB->replaced_size_idx_1) {
      localB->j = localB->nbMatches - 1;
      if (localB->s1_data[localB->j] != localB->cleanStr_data[localB->j]) {
        exitg1 = 1;
      } else {
        localB->nbMatches++;
      }
    } else {
      localB->b_bool = true;
      exitg1 = 1;
    }
  } while (exitg1 == 0);

  if (!localB->b_bool) {
    localB->k = 0;
    while ((localB->k + 1 <= localB->replaced_size_idx_1 + 1) &&
           (localB->cleanStr_data[localB->k] == ';')) {
      localB->k++;
    }

    localB->itoken = localB->k;
    while ((localB->k + 1 <= localB->replaced_size_idx_1 + 1) &&
           (localB->cleanStr_data[localB->k] != ';')) {
      localB->k++;
    }

    if (localB->itoken + 1 > localB->k) {
      localB->itoken = 0;
      localB->n = -1;
    } else {
      localB->n = localB->k - 1;
    }

    localB->replaced_size_idx_1 = localB->n - localB->itoken;
    localB->nbMatches = localB->replaced_size_idx_1 + 1;
    localB->j = localB->replaced_size_idx_1 + 1;
    for (localB->c_k = 0; localB->c_k <= localB->replaced_size_idx_1;
         localB->c_k++) {
      localB->str_data[localB->c_k] = localB->cleanStr_data[localB->itoken +
        localB->c_k];
    }

    //         %% string2array
    for (localB->c_k = 0; localB->c_k < localB->nbMatches; localB->c_k++) {
      localB->b_varargin_1_data[localB->c_k] = localB->cleanStr_data
        [localB->itoken + localB->c_k];
    }

    localB->b_varargin_1_data[localB->replaced_size_idx_1 + 1] = '\x00';
    printf("input : %s \n", &localB->b_varargin_1_data[0]);
    fflush(stdout);
    for (localB->nbMatches = 0; localB->nbMatches < 6; localB->nbMatches++) {
      localB->k = 1;
      while ((localB->k <= localB->j) && (localB->str_data[localB->k - 1] == ','))
      {
        localB->k++;
      }

      localB->itoken = localB->k - 1;
      while ((localB->k <= localB->j) && (localB->str_data[localB->k - 1] != ','))
      {
        localB->k++;
      }

      if (localB->k > localB->j) {
        localB->i = 0;
        localB->j = 0;
      } else {
        localB->i = localB->k - 1;
      }

      if (localB->itoken + 1 > localB->k - 1) {
        localB->itoken = 0;
        localB->n = 0;
      } else {
        localB->n = localB->k - 1;
      }

      localB->array[localB->nbMatches] = (rtNaN);
      localB->replaced_size_idx_1 = localB->n - localB->itoken;
      if (localB->replaced_size_idx_1 >= 1) {
        boolean_T exitg2;
        localB->ntoread = 0;
        localB->k = 0;
        exitg2 = false;
        while ((!exitg2) && (localB->k + 1 <= localB->replaced_size_idx_1)) {
          localB->b_y_tmp = localB->str_data[localB->itoken + localB->k];
          if (tmp[static_cast<uint8_T>(localB->b_y_tmp) & 127] ||
              (localB->b_y_tmp == '\x00')) {
            localB->k++;
          } else {
            exitg2 = true;
          }
        }

        localB->unnamed_idx_1 = localB->replaced_size_idx_1 + 2;
        localB->s1_size[0] = 1;
        localB->s1_size[1] = localB->replaced_size_idx_1 + 2;
        if (localB->unnamed_idx_1 - 1 >= 0) {
          std::memset(&localB->s1_data[0], 0, localB->unnamed_idx_1 * sizeof
                      (char_T));
        }

        localB->str_size[0] = 1;
        localB->str_size[1] = localB->replaced_size_idx_1;
        for (localB->c_k = 0; localB->c_k < localB->replaced_size_idx_1;
             localB->c_k++) {
          localB->str_data_m[localB->c_k] = localB->str_data[localB->itoken +
            localB->c_k];
        }

        proc_control_readfloat_l2g(localB->s1_data, localB->s1_size, 1,
          localB->str_data_m, localB->k + 1, localB->n - localB->itoken, true,
          localB->b_s1_data, localB->b_s1_size, &localB->unnamed_idx_1,
          &localB->b_k, &localB->b_bool, &localB->isfinite1, &localB->scanned1,
          &localB->a__1, &localB->success, localB);
        localB->k = localB->b_s1_size[1] - 1;
        if (localB->k >= 0) {
          std::memcpy(&localB->s1_data[0], &localB->b_s1_data[0], (localB->k + 1)
                      * sizeof(char_T));
        }

        localB->k = localB->unnamed_idx_1;
        if (localB->isfinite1) {
          localB->ntoread = 1;
        }

        if (localB->success && (localB->b_k <= localB->replaced_size_idx_1)) {
          localB->s1_data[localB->unnamed_idx_1 - 1] = ' ';
          localB->str_size[0] = 1;
          localB->str_size[1] = localB->replaced_size_idx_1;
          for (localB->c_k = 0; localB->c_k < localB->replaced_size_idx_1;
               localB->c_k++) {
            localB->str_data_m[localB->c_k] = localB->str_data[localB->itoken +
              localB->c_k];
          }

          localB->s1_size_k[0] = 1;
          localB->s1_size_k[1] = localB->b_s1_size[1];
          localB->c_k = localB->b_s1_size[1] - 1;
          if (localB->c_k >= 0) {
            std::memcpy(&localB->b_s1_data[0], &localB->s1_data[0], (localB->c_k
              + 1) * sizeof(char_T));
          }

          proc_control_readfloat_l2g(localB->b_s1_data, localB->s1_size_k,
            localB->unnamed_idx_1 + 1, localB->str_data_m, localB->b_k,
            localB->n - localB->itoken, true, localB->s1_data, localB->s1_size,
            &localB->k, &localB->c_k, &localB->a__1, &localB->success,
            &localB->scanned2, &localB->foundsign, &localB->c_success, localB);
          if (localB->success) {
            localB->ntoread++;
          }

          if (localB->c_success && (localB->c_k > localB->replaced_size_idx_1) &&
              (static_cast<boolean_T>(localB->b_bool ^ localB->a__1)) &&
              localB->foundsign) {
            localB->success = true;
          } else {
            localB->success = false;
          }
        } else {
          localB->scanned2 = 0.0;
        }

        if (localB->success) {
          localB->s1_data[localB->k - 1] = '\x00';
          if (localB->ntoread == 2) {
            localB->k = sscanf(&localB->s1_data[0], "%lf %lf", &localB->scanned1,
                               &localB->scanned2);
            if (localB->k != 2) {
              localB->scanned1 = (rtNaN);
              localB->scanned2 = (rtNaN);
            }
          } else if (localB->ntoread == 1) {
            localB->k = sscanf(&localB->s1_data[0], "%lf", &localB->scanned1_c);
            if (localB->isfinite1) {
              if (localB->k == 1) {
                localB->scanned1 = localB->scanned1_c;
              } else {
                localB->scanned1 = (rtNaN);
              }
            } else if (localB->k == 1) {
              localB->scanned2 = localB->scanned1_c;
            } else {
              localB->scanned2 = (rtNaN);
            }
          }

          if (localB->b_bool) {
            localB->array[localB->nbMatches] = localB->scanned2;
          } else {
            localB->array[localB->nbMatches] = localB->scanned1;
          }
        }
      }

      localB->c_k = localB->j - localB->i;
      if (localB->c_k < 2) {
        localB->k = 0;
        localB->itoken = -1;
      } else {
        localB->k = 1;
        localB->itoken = localB->c_k - 1;
      }

      localB->j = localB->itoken - localB->k;
      for (localB->c_k = 0; localB->c_k <= localB->j; localB->c_k++) {
        localB->str_data[localB->c_k] = localB->str_data[(localB->i + localB->k)
          + localB->c_k];
      }

      localB->j++;
    }

    for (localB->c_k = 0; localB->c_k < 6; localB->c_k++) {
      localDW->obj.lastValues[localB->c_k] = localB->array[localB->c_k];
    }

    for (localB->c_k = 0; localB->c_k < localB->st_Value_size_idx_1; localB->c_k
         ++) {
      localDW->obj.lastMsg[localB->c_k] = static_cast<uint8_T>
        (localB->cleanStr_data[localB->c_k]);
    }
  }

  for (localB->c_k = 0; localB->c_k < 6; localB->c_k++) {
    // MATLABSystem: '<S311>/MATLAB System4'
    localB->cdq[localB->c_k] = localDW->obj.lastValues[localB->c_k];

    // MATLABSystem: '<S311>/MATLAB System4'
    localDW->lastValues[localB->c_k] = localDW->obj.lastValues[localB->c_k];
  }

  // MATLABSystem: '<S311>/MATLAB System4'
  std::memcpy(&localDW->lastMsg[0], &localDW->obj.lastMsg[0], 400U * sizeof
              (real_T));
}

// Termination for atomic system:
void proc_control::proc_control_MATLABSystem4_Term
  (DW_MATLABSystem4_proc_control_T *localDW)
{
  // Terminate for MATLABSystem: '<S311>/MATLAB System4'
  for (int32_T i{0}; i < 6; i++) {
    localDW->lastValues[i] = localDW->obj.lastValues[i];
  }

  std::memcpy(&localDW->lastMsg[0], &localDW->obj.lastMsg[0], 400U * sizeof
              (real_T));

  // End of Terminate for MATLABSystem: '<S311>/MATLAB System4'
}

real_T proc_control::proc_rt_nrand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  real_T y;

  // Normal (Gaussian) random number generator
  do {
    proc_control_B.sr = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    proc_control_B.si = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    proc_control_B.si = proc_control_B.sr * proc_control_B.sr +
      proc_control_B.si * proc_control_B.si;
  } while (proc_control_B.si > 1.0);

  y = std::sqrt(-2.0 * std::log(proc_control_B.si) / proc_control_B.si) *
    proc_control_B.sr;
  return y;
}

void proc_control::proc_control_binary_expand_op(real_T in1[3], const real_T
  in3_data[], const int32_T *in3_size, const real_T in4_data[], const int32_T
  *in4_size)
{
  real_T in3_data_idx_0;
  int32_T in3_size_idx_0;
  int32_T loop_ub;

  // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
  // Outputs for IfAction SubSystem: '<S7>/MPC manager' incorporates:
  //   ActionPort: '<S121>/Action Port'

  // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
  //   EnablePort: '<S1>/Enable'

  // If: '<S7>/If' incorporates:
  //   MATLAB Function: '<S14>/MATLAB Function'
  //   MATLABSystem: '<S121>/MPC manager'

  in3_size_idx_0 = *in4_size == 1 ? *in3_size : *in4_size;
  loop_ub = *in4_size == 1 ? *in3_size : *in4_size;
  for (int32_T i{0}; i < loop_ub; i++) {
    in3_data_idx_0 = -in3_data[0] * 2.0 * in4_data[0];
  }

  for (int32_T i{0}; i < in3_size_idx_0; i++) {
    in1[0] = in3_data_idx_0;
  }

  // End of If: '<S7>/If'
  // End of Outputs for SubSystem: '<Root>/Modèle Physique'
  // End of Outputs for SubSystem: '<S7>/MPC manager'
  // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
}

void proc_control::proc_control_rand(real_T r[3])
{
  if (proc_control_DW.method == 4U) {
    proc_control_B.r_hv = proc_control_DW.state / 127773U;
    proc_control_B.y_g = (proc_control_DW.state - proc_control_B.r_hv * 127773U)
      * 16807U;
    proc_control_B.r_hv *= 2836U;
    if (proc_control_B.y_g < proc_control_B.r_hv) {
      proc_control_B.y_g = ~(proc_control_B.r_hv - proc_control_B.y_g) &
        2147483647U;
    } else {
      proc_control_B.y_g -= proc_control_B.r_hv;
    }

    r[0] = static_cast<real_T>(proc_control_B.y_g) * 4.6566128752457969E-10;
    proc_control_B.r_hv = proc_control_B.y_g / 127773U;
    proc_control_B.y_g = (proc_control_B.y_g - proc_control_B.r_hv * 127773U) *
      16807U;
    proc_control_B.r_hv *= 2836U;
    if (proc_control_B.y_g < proc_control_B.r_hv) {
      proc_control_B.y_g = ~(proc_control_B.r_hv - proc_control_B.y_g) &
        2147483647U;
    } else {
      proc_control_B.y_g -= proc_control_B.r_hv;
    }

    r[1] = static_cast<real_T>(proc_control_B.y_g) * 4.6566128752457969E-10;
    proc_control_B.r_hv = proc_control_B.y_g / 127773U;
    proc_control_B.y_g = (proc_control_B.y_g - proc_control_B.r_hv * 127773U) *
      16807U;
    proc_control_B.r_hv *= 2836U;
    if (proc_control_B.y_g < proc_control_B.r_hv) {
      proc_control_B.y_g = ~(proc_control_B.r_hv - proc_control_B.y_g) &
        2147483647U;
    } else {
      proc_control_B.y_g -= proc_control_B.r_hv;
    }

    r[2] = static_cast<real_T>(proc_control_B.y_g) * 4.6566128752457969E-10;
    proc_control_DW.state = proc_control_B.y_g;
  } else if (proc_control_DW.method == 5U) {
    for (proc_control_B.b_k_h = 0; proc_control_B.b_k_h < 3;
         proc_control_B.b_k_h++) {
      proc_control_B.r_hv = 69069U * proc_control_DW.state_k[0] + 1234567U;
      proc_control_B.y_g = proc_control_DW.state_k[1] << 13 ^
        proc_control_DW.state_k[1];
      proc_control_B.y_g ^= proc_control_B.y_g >> 17;
      proc_control_B.y_g ^= proc_control_B.y_g << 5;
      proc_control_DW.state_k[0] = proc_control_B.r_hv;
      proc_control_DW.state_k[1] = proc_control_B.y_g;
      r[proc_control_B.b_k_h] = static_cast<real_T>(proc_control_B.r_hv +
        proc_control_B.y_g) * 2.328306436538696E-10;
    }
  } else {
    if (!proc_control_DW.state_not_empty_e) {
      std::memset(&proc_control_DW.state_i[0], 0, 625U * sizeof(uint32_T));
      proc_control_B.r_hv = 5489U;
      proc_control_DW.state_i[0] = 5489U;
      for (proc_control_B.i_oc = 0; proc_control_B.i_oc < 623;
           proc_control_B.i_oc++) {
        proc_control_B.r_hv = ((proc_control_B.r_hv >> 30U ^ proc_control_B.r_hv)
          * 1812433253U + proc_control_B.i_oc) + 1U;
        proc_control_DW.state_i[proc_control_B.i_oc + 1] = proc_control_B.r_hv;
      }

      proc_control_DW.state_i[624] = 624U;
      proc_control_DW.state_not_empty_e = true;
    }

    for (proc_control_B.b_k_h = 0; proc_control_B.b_k_h < 3;
         proc_control_B.b_k_h++) {
      std::memcpy(&proc_control_B.c_mt[0], &proc_control_DW.state_i[0], 625U *
                  sizeof(uint32_T));

      // ========================= COPYRIGHT NOTICE ============================ 
      //  This is a uniform (0,1) pseudorandom number generator based on:        
      //                                                                         
      //  A C-program for MT19937, with initialization improved 2002/1/26.       
      //  Coded by Takuji Nishimura and Makoto Matsumoto.                        
      //                                                                         
      //  Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,      
      //  All rights reserved.                                                   
      //                                                                         
      //  Redistribution and use in source and binary forms, with or without     
      //  modification, are permitted provided that the following conditions     
      //  are met:                                                               
      //                                                                         
      //    1. Redistributions of source code must retain the above copyright    
      //       notice, this list of conditions and the following disclaimer.     
      //                                                                         
      //    2. Redistributions in binary form must reproduce the above copyright 
      //       notice, this list of conditions and the following disclaimer      
      //       in the documentation and/or other materials provided with the     
      //       distribution.                                                     
      //                                                                         
      //    3. The names of its contributors may not be used to endorse or       
      //       promote products derived from this software without specific      
      //       prior written permission.                                         
      //                                                                         
      //  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    
      //  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      
      //  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  
      //  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT  
      //  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  
      //  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       
      //  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  
      //  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  
      //  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    
      //  (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
      //  OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
      //                                                                         
      // =============================   END   ================================= 
      int32_T exitg1;
      do {
        exitg1 = 0;
        for (proc_control_B.i_oc = 0; proc_control_B.i_oc < 2;
             proc_control_B.i_oc++) {
          proc_control_B.r_hv = proc_control_B.c_mt[624] + 1U;
          if (proc_control_B.c_mt[624] + 1U >= 625U) {
            for (proc_control_B.b_kk = 0; proc_control_B.b_kk < 227;
                 proc_control_B.b_kk++) {
              proc_control_B.y_g = (proc_control_B.c_mt[proc_control_B.b_kk + 1]
                                    & 2147483647U) |
                (proc_control_B.c_mt[proc_control_B.b_kk] & 2147483648U);
              if ((proc_control_B.y_g & 1U) == 0U) {
                proc_control_B.y_g >>= 1U;
              } else {
                proc_control_B.y_g = proc_control_B.y_g >> 1U ^ 2567483615U;
              }

              proc_control_B.c_mt[proc_control_B.b_kk] =
                proc_control_B.c_mt[proc_control_B.b_kk + 397] ^
                proc_control_B.y_g;
            }

            for (proc_control_B.b_kk = 0; proc_control_B.b_kk < 396;
                 proc_control_B.b_kk++) {
              proc_control_B.y_g = (proc_control_B.c_mt[proc_control_B.b_kk +
                                    227] & 2147483648U) |
                (proc_control_B.c_mt[proc_control_B.b_kk + 228] & 2147483647U);
              if ((proc_control_B.y_g & 1U) == 0U) {
                proc_control_B.y_g >>= 1U;
              } else {
                proc_control_B.y_g = proc_control_B.y_g >> 1U ^ 2567483615U;
              }

              proc_control_B.c_mt[proc_control_B.b_kk + 227] =
                proc_control_B.c_mt[proc_control_B.b_kk] ^ proc_control_B.y_g;
            }

            proc_control_B.y_g = (proc_control_B.c_mt[623] & 2147483648U) |
              (proc_control_B.c_mt[0] & 2147483647U);
            if ((proc_control_B.y_g & 1U) == 0U) {
              proc_control_B.y_g >>= 1U;
            } else {
              proc_control_B.y_g = proc_control_B.y_g >> 1U ^ 2567483615U;
            }

            proc_control_B.c_mt[623] = proc_control_B.c_mt[396] ^
              proc_control_B.y_g;
            proc_control_B.r_hv = 1U;
          }

          proc_control_B.y_g = proc_control_B.c_mt[static_cast<int32_T>
            (proc_control_B.r_hv) - 1];
          proc_control_B.c_mt[624] = proc_control_B.r_hv;
          proc_control_B.y_g ^= proc_control_B.y_g >> 11U;
          proc_control_B.y_g ^= proc_control_B.y_g << 7U & 2636928640U;
          proc_control_B.y_g ^= proc_control_B.y_g << 15U & 4022730752U;
          proc_control_B.b_u[proc_control_B.i_oc] = proc_control_B.y_g >> 18U ^
            proc_control_B.y_g;
        }

        proc_control_B.b_r = (static_cast<real_T>(proc_control_B.b_u[0] >> 5U) *
                              6.7108864E+7 + static_cast<real_T>
                              (proc_control_B.b_u[1] >> 6U)) *
          1.1102230246251565E-16;
        if (proc_control_B.b_r == 0.0) {
          if ((proc_control_B.c_mt[624] >= 1U) && (proc_control_B.c_mt[624] <
               625U)) {
            boolean_T exitg2;
            proc_control_B.b_isvalid = false;
            proc_control_B.i_oc = 0;
            exitg2 = false;
            while ((!exitg2) && (proc_control_B.i_oc + 1 < 625)) {
              if (proc_control_B.c_mt[proc_control_B.i_oc] == 0U) {
                proc_control_B.i_oc++;
              } else {
                proc_control_B.b_isvalid = true;
                exitg2 = true;
              }
            }
          } else {
            proc_control_B.b_isvalid = false;
          }

          if (!proc_control_B.b_isvalid) {
            proc_control_B.r_hv = 5489U;
            proc_control_B.c_mt[0] = 5489U;
            for (proc_control_B.i_oc = 0; proc_control_B.i_oc < 623;
                 proc_control_B.i_oc++) {
              proc_control_B.r_hv = ((proc_control_B.r_hv >> 30U ^
                proc_control_B.r_hv) * 1812433253U + proc_control_B.i_oc) + 1U;
              proc_control_B.c_mt[proc_control_B.i_oc + 1] = proc_control_B.r_hv;
            }

            proc_control_B.c_mt[624] = 624U;
          }
        } else {
          exitg1 = 1;
        }
      } while (exitg1 == 0);

      std::memcpy(&proc_control_DW.state_i[0], &proc_control_B.c_mt[0], 625U *
                  sizeof(uint32_T));
      r[proc_control_B.b_k_h] = proc_control_B.b_r;
    }
  }
}

real_T proc_control::proc_control_erf(real_T x)
{
  real_T absx;
  real_T y;
  int32_T b_e;

  // ========================== COPYRIGHT NOTICE ============================
  //  The algorithms for calculating ERF(X) and ERFC(X) are derived
  //  from FDLIBM, which has the following notice:
  //
  //  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
  //
  //  Developed at SunSoft, a Sun Microsystems, Inc. business.
  //  Permission to use, copy, modify, and distribute this
  //  software is freely granted, provided that this notice
  //  is preserved.
  // =============================    END    ================================
  absx = std::abs(x);
  if (std::isnan(x)) {
    y = x;
  } else if (std::isinf(x)) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else if (absx < 0.84375) {
    if (absx < 3.7252902984619141E-9) {
      if (absx < 2.8480945388892178E-306) {
        y = (8.0 * x + 1.0270333367641007 * x) * 0.125;
      } else {
        y = 0.12837916709551259 * x + x;
      }
    } else {
      real_T z;
      z = x * x;
      y = ((((z * -2.3763016656650163E-5 + -0.0057702702964894416) * z +
             -0.02848174957559851) * z + -0.3250421072470015) * z +
           0.12837916709551256) / (((((z * -3.9602282787753681E-6 +
        0.00013249473800432164) * z + 0.0050813062818757656) * z +
        0.0650222499887673) * z + 0.39791722395915535) * z + 1.0) * x + x;
    }
  } else if (absx < 1.25) {
    if (x >= 0.0) {
      y = (((((((absx - 1.0) * -0.0021663755948687908 + 0.035478304325618236) *
               (absx - 1.0) + -0.11089469428239668) * (absx - 1.0) +
              0.31834661990116175) * (absx - 1.0) + -0.37220787603570132) *
            (absx - 1.0) + 0.41485611868374833) * (absx - 1.0) +
           -0.0023621185607526594) / (((((((absx - 1.0) * 0.011984499846799107 +
        0.013637083912029051) * (absx - 1.0) + 0.12617121980876164) * (absx -
        1.0) + 0.071828654414196266) * (absx - 1.0) + 0.540397917702171) * (absx
        - 1.0) + 0.10642088040084423) * (absx - 1.0) + 1.0) +
        0.84506291151046753;
    } else {
      y = -0.84506291151046753 - (((((((absx - 1.0) * -0.0021663755948687908 +
        0.035478304325618236) * (absx - 1.0) + -0.11089469428239668) * (absx -
        1.0) + 0.31834661990116175) * (absx - 1.0) + -0.37220787603570132) *
        (absx - 1.0) + 0.41485611868374833) * (absx - 1.0) +
        -0.0023621185607526594) / (((((((absx - 1.0) * 0.011984499846799107 +
        0.013637083912029051) * (absx - 1.0) + 0.12617121980876164) * (absx -
        1.0) + 0.071828654414196266) * (absx - 1.0) + 0.540397917702171) * (absx
        - 1.0) + 0.10642088040084423) * (absx - 1.0) + 1.0);
    }
  } else if (absx > 6.0) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else {
    real_T R;
    real_T s;
    real_T z;
    s = 1.0 / (absx * absx);
    if (absx < 2.8571434020996094) {
      R = ((((((s * -9.8143293441691455 + -81.2874355063066) * s +
               -184.60509290671104) * s + -162.39666946257347) * s +
             -62.375332450326006) * s + -10.558626225323291) * s +
           -0.69385857270718176) * s + -0.0098649440348471482;
      s = (((((((s * -0.0604244152148581 + 6.5702497703192817) * s +
                108.63500554177944) * s + 429.00814002756783) * s +
              645.38727173326788) * s + 434.56587747522923) * s +
            137.65775414351904) * s + 19.651271667439257) * s + 1.0;
    } else {
      R = (((((s * -483.5191916086514 + -1025.0951316110772) * s +
              -637.56644336838963) * s + -160.63638485582192) * s +
            -17.757954917754752) * s + -0.799283237680523) * s +
        -0.0098649429247001;
      s = ((((((s * -22.440952446585818 + 474.52854120695537) * s +
               2553.0504064331644) * s + 3199.8582195085955) * s +
             1536.729586084437) * s + 325.79251299657392) * s +
           30.338060743482458) * s + 1.0;
    }

    if (!std::isnan(absx)) {
      z = frexp(absx, &b_e);
    } else {
      z = absx;
      b_e = 0;
    }

    z = std::floor(z * 2.097152E+6) / 2.097152E+6 * rt_powd_snf(2.0,
      static_cast<real_T>(b_e));
    if (x < 0.0) {
      y = std::exp((z - absx) * (z + absx) + R / s) * std::exp(-z * z - 0.5625) /
        absx - 1.0;
    } else {
      y = 1.0 - std::exp((z - absx) * (z + absx) + R / s) * std::exp(-z * z -
        0.5625) / absx;
    }
  }

  return y;
}

void proc_control::proc_co_AUV8QuatPerturbedSimFcn(const real_T in1[13], const
  real_T in2[6], const real_T in3[8], real_T out1[13])
{
  real_T out1_tmp;
  real_T out1_tmp_0;
  real_T out1_tmp_1;
  real_T out1_tmp_2;
  real_T out1_tmp_3;
  real_T out1_tmp_4;
  real_T out1_tmp_5;
  real_T out1_tmp_6;
  real_T out1_tmp_7;
  real_T t10;
  real_T t11;
  real_T t12;
  real_T t13;
  real_T t15;
  real_T t16;
  real_T t17;
  real_T t18;
  real_T t19;
  real_T t20;
  real_T t21;
  real_T t22;
  real_T t23;
  real_T t33;
  real_T t37;
  real_T t39;
  real_T t45;
  real_T t55;
  real_T t56;
  real_T t63;
  real_T t65;
  real_T t67;
  real_T t68;
  real_T t71;
  real_T t8;
  real_T t80;
  real_T t81;
  real_T t84;
  real_T t85;
  real_T t86;
  real_T t87;
  real_T t9;

  // AUVQUATPERTURBEDSIMFCN
  //     OUT1 = AUVQUATPERTURBEDSIMFCN(IN1,IN2,IN3)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     19-Nov-2021 10:15:43
  t8 = in1[4] * in1[6];
  t9 = in1[5] * in1[6];
  t10 = in1[3] * in1[4];
  t11 = in1[3] * in1[5];
  t12 = in1[4] * in1[4];
  t13 = in1[5] * in1[5];
  t15 = in1[4] * in1[5] * 2.0;
  t20 = in1[3] * in1[6] * 2.0;
  t33 = in1[11] / 500.0;
  t37 = in1[10] / 1000.0;
  t39 = in1[12] * 0.018;
  t63 = in1[7] * 32.4648;
  t67 = in1[8] * 43.6156;
  t68 = in1[9] * 46.7695;
  t16 = t8 * 2.0;
  t17 = t9 * 2.0;
  t18 = t10 * 2.0;
  t19 = t11 * 2.0;
  t21 = t12 * 2.0;
  t22 = t13 * 2.0;
  t23 = in1[6] * in1[6] * 2.0;
  t71 = t33 + t39;
  t33 += t37;
  t37 += t39;
  t39 = in1[11] * 0.558 + t63;
  t80 = in1[10] * 0.062 + t68;
  t81 = in1[12] * 0.031 + t67;
  t84 = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 0.592;
  t45 = t17 + t18;
  t55 = proc_control_erf(in1[2] * 13.333333333333334 - 2.0);
  t65 = (t21 + t22) - 1.0;
  t63 = in1[12] * 0.062 + -t63;
  t67 = in1[10] * 0.558 + -t67;
  t68 = in1[11] * 0.031 + -t68;
  t86 = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] * 1.8864;
  t87 = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] * 1.7228;
  t56 = t16 + -t19;
  t85 = t55 * 0.01575 + 0.01575;
  t55 = t55 * 15.7185 - 15.2815;
  out1[0] = (((t22 + t23) - 1.0) * -in1[7] + (t16 + t19) * in1[9]) + (t15 - t20)
    * in1[8];
  out1[1] = ((t15 + t20) * in1[7] - ((t21 + t23) - 1.0) * in1[8]) + (t17 - t18) *
    in1[9];
  out1[2] = (t56 * in1[7] + t45 * in1[8]) - t65 * in1[9];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  t15 = in1[10] * t71;
  t20 = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) * in1[10];
  t16 = in1[10] * t80;
  t17 = in1[10] * t67;
  t18 = in1[10] * t86;
  t19 = in1[10] * t87;
  t21 = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) * in1[11];
  t22 = in1[11] * t37;
  t23 = in1[11] * t39;
  out1_tmp = in1[11] * t68;
  out1_tmp_0 = in1[11] * t84;
  t86 *= in1[11];
  out1_tmp_1 = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  out1_tmp_2 = in1[12] * t33;
  out1_tmp_3 = in1[12] * t63;
  out1_tmp_4 = in1[12] * t81;
  t84 *= in1[12];
  t87 *= in1[12];
  out1_tmp_5 = (t9 + t10) * t55;
  t45 *= t85;
  out1_tmp_6 = (t8 + -t11) * t55;
  t56 *= t85;
  t55 *= t65;
  t65 = (std::abs(in1[7]) * 1.17 + 15.0) * in1[7];
  t71 *= in1[7];
  t81 *= in1[7];
  t68 *= in1[7];
  t85 = (std::abs(in1[8]) * 0.82 + 20.0) * in1[8];
  t37 *= in1[8];
  t63 *= in1[8];
  t80 *= in1[8];
  out1_tmp_7 = (std::abs(in1[9]) * 0.756 + 23.333333333333332) * in1[9];
  t33 *= in1[9];
  t39 *= in1[9];
  t67 *= in1[9];
  out1[7] = (((((((((((((((((((((in2[0] * 0.030976977065388711 + in2[1] *
    9.4803055144857715E-7) - in2[2] * 6.8231348244175949E-6) + in2[3] *
    0.0001303522588356414) + (in2[4] * -0.010033314971702871 + in2[5] *
    0.0010125044874363649)) + (in3[0] * -0.00033076834054020519 + in3[1] *
    1.8595780444550231E-21)) + in3[2] * 0.00033506403327449372) + (in3[3] *
    0.00033363213569639753 - in3[4] * 0.001819638864719295)) + (in3[5] *
    -0.0018124211550371481 + in3[6] * 0.0018538731733468781)) + (in3[7] *
    0.001778186846409557 - t8 * 0.11107598193630119)) + ((t9 *
    -0.00081126583629370218 - t10 * 0.00081126583629370218) + t11 *
    0.11107598193630119)) + ((t12 * -0.0062610285338271466 - t13 *
    0.0062610285338271466) + in3[0] * 1.4142135623730951 * 0.015171119710606879))
                      + ((in3[1] * 1.4142135623730951 * 0.014928824155507611 +
    in3[2] * 1.4142135623730951 * 0.015171119710606879) + in3[3] *
    1.4142135623730951 * 0.01516372519659284)) + (((t15 * -0.96028628902704993 -
    t20 * 0.0001303522588356414) + t16 * 9.4803055144857715E-7) - t17 *
    6.8231348244175949E-6)) + (((t18 * -0.010033314971702871 - t19 *
    0.0010125044874363649) + t21 * 0.010033314971702871) - t22 *
    2.9388947094905889E-5)) + (((t23 * -6.8231348244175949E-6 + out1_tmp *
    0.030976977065388711) + out1_tmp_0 * 0.0010125044874363649) - t86 *
    0.0001303522588356414)) + (((out1_tmp_1 * -0.0010125044874363649 +
    out1_tmp_2 * 0.0002115171795569455) + out1_tmp_3 * 9.4803055144857715E-7) +
    out1_tmp_4 * 0.030976977065388711)) + ((t84 * 0.010033314971702871 + t87 *
    0.0001303522588356414) - out1_tmp_5 * 1.860035941942108E-5)) + ((t45 *
    -0.0076571888871557192 - out1_tmp_6 * 0.60776829002292643) - t56 *
    0.589379797395962)) + ((t55 * -6.6934952627536608E-5 - t65 *
    0.030976977065388711) + t71 * 0.0040409200239048832)) + (((t81 *
    -0.0010125044874363649 + t68 * 0.010033314971702871) - t85 *
    9.4803055144857715E-7) - t37 * 0.311032764122789)) + (((t63 *
    -0.0010125044874363649 - t80 * 0.0001303522588356414) + out1_tmp_7 *
    6.8231348244175949E-6) + t33 * 0.031387639110527318)) + ((t39 *
    0.010033314971702871 - t67 * 0.0001303522588356414) + 0.0031305142669135729);
  out1[8] = (((((((((((((((((((((in2[0] * 9.4803055144857715E-7 + in2[1] *
    0.02320783323245932) - in2[2] * 2.9076309096921531E-5) + in2[3] *
    0.021882274381510681) + (in2[4] * -0.0001026911824132076 - in2[5] *
    0.00042780737967584029)) + (in3[0] * 0.00013975754063522079 + in3[1] *
    7.9244610288113972E-21)) + in3[2] * -0.00014157257363048341) + (in3[3] *
    -0.0001409675626320625 - in3[4] * 0.0034249251816346319)) + (in3[5] *
    0.003387750973601051 + in3[6] * 0.0035708122797193441)) + (in3[7] *
    -0.0035336380716857632 - t8 * 0.00060385694847962161)) + ((t9 *
    -0.23982646564227009 - t10 * 0.23982646564227009) + t11 *
    0.00060385694847962161)) + ((t12 * -0.026680932679612211 - t13 *
    0.026680932679612211) - in3[0] * 1.4142135623730951 * 0.01090649593858282))
                      + ((in3[1] * 1.4142135623730951 * 0.011000123045544621 -
    in3[2] * 1.4142135623730951 * 0.01090649593858282) + in3[3] *
    1.4142135623730951 * 0.01090087173345982)) + (((t15 * -2.9388947094905889E-5
    - t20 * 0.021882274381510681) + t16 * 0.02320783323245932) - t17 *
    2.9076309096921531E-5)) + (((t18 * -0.0001026911824132076 + t19 *
    0.00042780737967584029) + t21 * 0.0001026911824132076) - t22 *
    0.71944283020623911)) + (((t23 * -2.9076309096921531E-5 + out1_tmp *
    9.4803055144857715E-7) - out1_tmp_0 * 0.00042780737967584029) - t86 *
    0.021882274381510681)) + (((out1_tmp_1 * 0.00042780737967584029 + out1_tmp_2
    * 0.00090136558200456737) + out1_tmp_3 * 0.02320783323245932) + out1_tmp_4 *
    9.4803055144857715E-7)) + ((t84 * 0.0001026911824132076 + t87 *
    0.021882274381510681) - out1_tmp_5 * 0.45533768802085189)) + ((t45 *
    -1.2854146887555269 - out1_tmp_6 * 1.860035941942108E-5) - t56 *
    0.0060323141908477191)) + (((t55 * -0.00028523859224080018 - t65 *
    9.4803055144857715E-7) + t71 * 0.678350505826831) + t81 *
    0.00042780737967584029)) + (((t68 * 0.0001026911824132076 - t85 *
    0.02320783323245932) - t37 * 0.0031834266548094372) + t63 *
    0.00042780737967584029)) + (((t80 * -0.021882274381510681 + out1_tmp_7 *
    2.9076309096921531E-5) - t33 * 0.013262028769951049) + t39 *
              0.0001026911824132076)) + (t67 * -0.021882274381510681 +
    0.0133404663398061);
  out1[9] = ((((((((((((((((((((((in2[0] * -6.8231348244175949E-6 - in2[1] *
    2.9076309096921531E-5) + in2[2] * 0.021384731826702759) - in2[3] *
    0.002272431716587712) + (in2[4] * 0.00039756137245743289 + in2[5] *
    5.2828771531483014E-6)) + in3[0] * -1.725827915740819E-6) + in3[1] *
    -5.8281975682474322E-18) + in3[2] * 1.748241265284163E-6) + (in3[3] *
    1.740770148765829E-6 - in3[4] * 0.02095639900015615)) + (in3[5] *
    0.021100316216985739 - in3[6] * 0.021822949502860629)) + (in3[7] *
    0.02167903228603104 + t8 * 0.004346059700124901)) + ((t9 *
    0.024881704687475689 + t10 * 0.024881704687475689) - t11 *
    0.004346059700124901)) + ((t12 * 0.0030060816152820162 + t13 *
    0.0030060816152820162) - in3[0] * 1.4142135623730951 * 4.8869263875916949E-5))
                      + ((in3[1] * 1.4142135623730951 * 6.6264429389244648E-5 -
    in3[2] * 1.4142135623730951 * 4.8869263875916949E-5) + in3[3] *
    1.4142135623730951 * 6.7490056888775055E-5)) + (((t15 *
    0.0002115171795569455 + t20 * 0.002272431716587712) - t16 *
    2.9076309096921531E-5) + t17 * 0.021384731826702759)) + (((t18 *
    0.00039756137245743289 - t19 * 5.2828771531483014E-6) - t21 *
    0.00039756137245743289) + t22 * 0.00090136558200456737)) + (((t23 *
    0.021384731826702759 - out1_tmp * 6.8231348244175949E-6) + out1_tmp_0 *
    5.2828771531483014E-6) + t86 * 0.002272431716587712)) + (((out1_tmp_1 *
    -5.2828771531483014E-6 - out1_tmp_2 * 0.66292668662778553) - out1_tmp_3 *
    2.9076309096921531E-5) - out1_tmp_4 * 6.8231348244175949E-6)) + ((t84 *
    -0.00039756137245743289 - t87 * 0.002272431716587712) + out1_tmp_5 *
    0.00057047718448160036)) + ((t45 * 0.133487820176676 + out1_tmp_6 *
    0.00013386990525507319) + t56 * 0.023353661458078809)) + (((t55 *
    0.2097842192199541 + t65 * 6.8231348244175949E-6) - t71 *
    0.070445383214219059) - t81 * 5.2828771531483014E-6)) + (((t68 *
    -0.00039756137245743289 + t85 * 2.9076309096921531E-5) + t37 *
    0.01232440254618042) - t63 * 5.2828771531483014E-6)) + (((t80 *
    0.002272431716587712 - out1_tmp_7 * 0.021384731826702759) + t33 *
    0.00016376919174759729) - t39 * 0.00039756137245743289)) + (t67 *
    0.002272431716587712 - 0.0015030408076410081);
  out1[10] = ((((((((((((((((((((((((in2[0] * 0.0001303522588356414 + in2[1] *
    0.021882274381510681) - in2[2] * 0.002272431716587712) + in2[3] *
    1.71018810547529) + (in2[4] * -0.0080268590155159435 - in2[5] *
    0.0039859244840414)) + in3[0] * 0.0013021350951669831) + in3[1] *
    6.1932883292401409E-19) + in3[2] * -0.00131904594055876) + (in3[3] *
    -0.0013134089920948341 - in3[4] * 0.26767193546582568)) + (in3[5] *
    0.26476621250220889 + in3[6] * 0.2790736050389333)) + (in3[7] *
    -0.27616788207531651 - t8 * 0.0830290934481406)) + ((t9 * -18.72549529020894
    - t10 * 18.72549529020894) + t11 * 0.0830290934481406)) + ((t12 *
    -2.0852233152147792 - t13 * 2.0852233152147792) + in3[0] *
    1.4142135623730951 * 0.043593198825375247)) + ((in3[1] * 1.4142135623730951 *
    -0.043051831063235027 + in3[2] * 1.4142135623730951 * 0.043593198825375247)
    - in3[3] * 1.4142135623730951 * 0.043976565543532631)) + ((t15 *
    -0.0040409200239048832 - t20 * 1.71018810547529) + t16 *
    0.021882274381510681)) + ((t17 * -0.002272431716587712 - t18 *
    0.0080268590155159435) + t19 * 0.0039859244840414)) + ((t21 *
    0.0080268590155159435 - t22 * 0.678350505826831) - t23 *
    0.002272431716587712)) + ((out1_tmp * 0.0001303522588356414 - out1_tmp_0 *
    0.0039859244840414) - t86 * 1.71018810547529)) + (((out1_tmp_1 *
    0.0039859244840414 + out1_tmp_2 * 0.070445383214219059) + out1_tmp_3 *
    0.021882274381510681) + out1_tmp_4 * 0.0001303522588356414)) + ((t84 *
    0.0080268590155159435 + t87 * 1.71018810547529) - out1_tmp_5 *
    0.42933022336523952)) + ((t45 * -100.460348544499 - out1_tmp_6 *
    0.0025575113183552841) - t56 * 0.47151599980996189)) + ((t55 *
    -0.022292555139725449 - t65 * 0.0001303522588356414) + t71 *
    53.015831269733987)) + ((t81 * 0.0039859244840414 + t68 *
    0.0080268590155159435) - t85 * 0.021882274381510681)) + ((t37 *
    -0.2488326294809943 + t63 * 0.0039859244840414) - t80 * 1.71018810547529)) +
              ((out1_tmp_7 * 0.002272431716587712 - t33 * 0.1235636590052834) +
               t39 * 0.0080268590155159435)) + (t67 * -1.71018810547529 +
    1.0426116576073889);
  out1[11] = ((((((((((((((((((((((in2[0] * -0.010033314971702871 - in2[1] *
    0.0001026911824132076) + in2[2] * 0.00039756137245743289) - in2[3] *
    0.0080268590155159435) + (in2[4] * 0.58374455968341665 - in2[5] *
    1.606290206365557E-6)) + (in3[0] * 5.24748238233168E-7 - in3[1] *
    1.083514276897426E-19)) + in3[2] * -5.3156315041823265E-7) + (in3[3] *
    -5.2929151302328333E-7 + in3[4] * 0.10593667623599359)) + (in3[5] *
    0.10537885436940329 - in3[6] * 0.10793139553633729)) + (in3[7] *
    -0.1033841350690595 + t8 * 6.3908140435873166)) + ((t9 *
    0.087876754449678615 + t10 * 0.087876754449678615) - t11 *
    6.3908140435873166)) + ((t12 * 0.36480930847148191 + t13 *
    0.36480930847148191) + in3[0] * 1.4142135623730951 * 0.013457654526727991))
                        + ((in3[1] * 1.4142135623730951 * 0.013869054980635681 +
    in3[2] * 1.4142135623730951 * 0.013457654526727991) + in3[3] *
    1.4142135623730951 * 0.01386868232130781)) + (((t15 * 0.311032764122789 +
    t20 * 0.0080268590155159435) - t16 * 0.0001026911824132076) + t17 *
    0.00039756137245743289)) + ((t18 * 0.58374455968341665 + t19 *
    1.606290206365557E-6) - t21 * 0.58374455968341665)) + (((t22 *
    0.0031834266548094372 + t23 * 0.00039756137245743289) - out1_tmp *
    0.010033314971702871) - out1_tmp_0 * 1.606290206365557E-6)) + (((t86 *
    0.0080268590155159435 + out1_tmp_1 * 1.606290206365557E-6) - out1_tmp_2 *
    0.01232440254618042) - out1_tmp_3 * 0.0001026911824132076)) + ((out1_tmp_4 *
    -0.010033314971702871 - t84 * 0.58374455968341665) - t87 *
    0.0080268590155159435)) + ((out1_tmp_5 * 0.002014800998947134 + t45 *
    0.47151599980996189) + out1_tmp_6 * 0.19685363974481029)) + ((t56 *
    34.290486373399979 + t55 * 0.003900077063807416) + t65 *
    0.010033314971702871)) + ((t71 * -0.2488326294809943 + t81 *
    1.606290206365557E-6) - t68 * 0.58374455968341665)) + (((t85 *
    0.0001026911824132076 + t37 * 18.096081350185919) + t63 *
    1.606290206365557E-6) + t80 * 0.0080268590155159435)) + ((out1_tmp_7 *
    -0.00039756137245743289 - t33 * 4.9794996397332282E-5) - t39 *
    0.58374455968341665)) + (t67 * 0.0080268590155159435 - 0.182404654235741);
  out1[12] = (((((((((((((((((((((((in2[0] * 0.0010125044874363649 - in2[1] *
    0.00042780737967584029) + in2[2] * 5.2828771531483014E-6) - in2[3] *
    0.0039859244840414) + (in2[4] * -1.606290206365557E-6 + in2[5] *
    0.53015902215788635)) + in3[0] * -0.1731941163298826) + in3[1] *
    -1.4397960202092559E-21) + in3[2] * 0.175443390567933) + (in3[3] *
    0.17469363248858291 + in3[4] * 0.00062021813460420567)) + (in3[5] *
    -0.0006207996116589 - in3[6] * 0.00064672437426625525)) + (in3[7] *
    0.00064730585132094889 - t8 * 0.64492422651466708)) + ((t9 *
    0.3660910622711756 + t10 * 0.3660910622711756) + t11 * 0.64492422651466708))
    + ((t12 * 0.0048476610015380046 + t13 * 0.0048476610015380046) + in3[0] *
       1.4142135623730951 * 0.00059255494878017434)) + ((in3[1] *
    1.4142135623730951 * -0.1225770464045467 + in3[2] * 1.4142135623730951 *
    0.00059255494878017434) + in3[3] * 1.4142135623730951 *
    0.00041984673608298361)) + (((t15 * -0.031387639110527318 + t20 *
    0.0039859244840414) - t16 * 0.00042780737967584029) + t17 *
    5.2828771531483014E-6)) + (((t18 * -1.606290206365557E-6 - t19 *
    0.53015902215788635) + t21 * 1.606290206365557E-6) + t22 *
    0.013262028769951049)) + (((t23 * 5.2828771531483014E-6 + out1_tmp *
    0.0010125044874363649) + out1_tmp_0 * 0.53015902215788635) + t86 *
    0.0039859244840414)) + ((out1_tmp_1 * -0.53015902215788635 - out1_tmp_2 *
    0.00016376919174759729) - out1_tmp_3 * 0.00042780737967584029)) +
                   (((out1_tmp_4 * 0.0010125044874363649 + t84 *
                      1.606290206365557E-6) - t87 * 0.0039859244840414) +
                    out1_tmp_5 * 0.008393580789239987)) + ((t45 *
    0.23414229210041551 - out1_tmp_6 * 0.01986533804350149) - t56 *
    9.4357149063583354E-5)) + ((t55 * 5.1825024872384838E-5 - t65 *
    0.0010125044874363649) - t71 * 0.1235636590052834)) + (((t81 *
    -0.53015902215788635 + t68 * 1.606290206365557E-6) + t85 *
    0.00042780737967584029) - t37 * 4.9794996397332282E-5)) + ((t63 *
    -0.53015902215788635 + t80 * 0.0039859244840414) - out1_tmp_7 *
    5.2828771531483014E-6)) + ((t33 * 16.434929686894481 + t39 *
    1.606290206365557E-6) + t67 * 0.0039859244840414)) + -0.0024238305007690032;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_znlmpc_getXUe(const real_T z[139], const real_T
  x[13], real_T X[143], real_T U[88], real_T *e)
{
  static const int8_T y[640]{ 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };

  std::memset(&X[0], 0, 143U * sizeof(real_T));
  std::memset(&proc_control_B.Umv[0], 0, 88U * sizeof(real_T));
  std::memset(&proc_control_B.y_b[0], 0, 80U * sizeof(real_T));
  proc_control_B.i_ct = 0;
  for (proc_control_B.i_i1 = 0; proc_control_B.i_i1 < 8; proc_control_B.i_i1++)
  {
    for (proc_control_B.i20 = 0; proc_control_B.i20 < 80; proc_control_B.i20++)
    {
      proc_control_B.y_b[proc_control_B.i20] += static_cast<real_T>
        (y[proc_control_B.i20 + proc_control_B.i_ct]) * z[proc_control_B.i_i1 +
        130];
    }

    proc_control_B.i_ct += 80;
  }

  proc_control_B.i20 = 0;
  for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 8; proc_control_B.i_ct++)
  {
    proc_control_B.i_i1 = 0;
    for (proc_control_B.U_tmp_n = 0; proc_control_B.U_tmp_n < 10;
         proc_control_B.U_tmp_n++) {
      proc_control_B.Umv[proc_control_B.U_tmp_n + proc_control_B.i20] =
        proc_control_B.y_b[proc_control_B.i_i1 + proc_control_B.i_ct];
      proc_control_B.i_i1 += 8;
    }

    proc_control_B.i20 += 11;
  }

  *e = z[138];
  std::memcpy(&proc_control_B.z_d[0], &z[0], 130U * sizeof(real_T));
  proc_control_B.i20 = 0;
  for (proc_control_B.i_ct = 0; proc_control_B.i_ct < 10; proc_control_B.i_ct++)
  {
    proc_control_B.i_i1 = 0;
    for (proc_control_B.U_tmp_n = 0; proc_control_B.U_tmp_n < 13;
         proc_control_B.U_tmp_n++) {
      X[(proc_control_B.i_i1 + proc_control_B.i_ct) + 1] =
        proc_control_B.z_d[proc_control_B.U_tmp_n + proc_control_B.i20];
      proc_control_B.i_i1 += 11;
    }

    proc_control_B.i20 += 13;
  }

  proc_control_B.i20 = 0;
  for (proc_control_B.U_tmp_n = 0; proc_control_B.U_tmp_n < 13;
       proc_control_B.U_tmp_n++) {
    X[proc_control_B.i20] = x[proc_control_B.U_tmp_n];
    proc_control_B.i20 += 11;
  }

  proc_control_B.i_ct = 0;
  for (proc_control_B.i_i1 = 0; proc_control_B.i_i1 < 8; proc_control_B.i_i1++)
  {
    proc_control_B.Umv[proc_control_B.i_ct + 10] =
      proc_control_B.Umv[proc_control_B.i_ct + 9];
    std::memcpy(&U[proc_control_B.i_ct], &proc_control_B.Umv[proc_control_B.i_ct],
                11U * sizeof(real_T));
    proc_control_B.i_ct += 11;
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::AUV8QuatJacobianMatrix_wW6vUT_g(const real_T in1[13], real_T
  Anqv[169])
{
  proc_control_B.t2 = std::abs(in1[10]);
  proc_control_B.t3_e = std::abs(in1[11]);
  proc_control_B.t4_e = std::abs(in1[12]);
  proc_control_B.t5 = std::abs(in1[7]);
  proc_control_B.t6 = std::abs(in1[8]);
  proc_control_B.t7 = std::abs(in1[9]);
  if (std::isnan(in1[10])) {
    proc_control_B.t8_g = in1[10];
  } else if (in1[10] < 0.0) {
    proc_control_B.t8_g = -1.0;
  } else {
    proc_control_B.t8_g = (in1[10] > 0.0);
  }

  if (std::isnan(in1[11])) {
    proc_control_B.t9_g = in1[11];
  } else if (in1[11] < 0.0) {
    proc_control_B.t9_g = -1.0;
  } else {
    proc_control_B.t9_g = (in1[11] > 0.0);
  }

  if (std::isnan(in1[12])) {
    proc_control_B.t10 = in1[12];
  } else if (in1[12] < 0.0) {
    proc_control_B.t10 = -1.0;
  } else {
    proc_control_B.t10 = (in1[12] > 0.0);
  }

  if (std::isnan(in1[7])) {
    proc_control_B.t11 = in1[7];
  } else if (in1[7] < 0.0) {
    proc_control_B.t11 = -1.0;
  } else {
    proc_control_B.t11 = (in1[7] > 0.0);
  }

  if (std::isnan(in1[8])) {
    proc_control_B.t12 = in1[8];
  } else if (in1[8] < 0.0) {
    proc_control_B.t12 = -1.0;
  } else {
    proc_control_B.t12 = (in1[8] > 0.0);
  }

  if (std::isnan(in1[9])) {
    proc_control_B.t13 = in1[9];
  } else if (in1[9] < 0.0) {
    proc_control_B.t13 = -1.0;
  } else {
    proc_control_B.t13 = (in1[9] > 0.0);
  }

  proc_control_B.t17_d = in1[4] * in1[5] * 2.0;
  proc_control_B.t18_n = in1[4] * in1[6] * 2.0;
  proc_control_B.t19_p = in1[5] * in1[6] * 2.0;
  proc_control_B.t20 = in1[3] * in1[4] * 2.0;
  proc_control_B.t21 = in1[3] * in1[5] * 2.0;
  proc_control_B.t22 = in1[3] * in1[6] * 2.0;
  proc_control_B.t23_b = in1[4] * in1[7] * 2.0;
  proc_control_B.t24_tmp = in1[5] * in1[7];
  proc_control_B.t24 = proc_control_B.t24_tmp * 2.0;
  proc_control_B.t25_tmp = in1[6] * in1[7];
  proc_control_B.t25_i = proc_control_B.t25_tmp * 2.0;
  proc_control_B.t26_b = in1[3] * in1[7] * 2.0;
  proc_control_B.t27_tmp_d = in1[4] * in1[8];
  proc_control_B.t27_jv = proc_control_B.t27_tmp_d * 2.0;
  proc_control_B.t28_g = in1[5] * in1[8] * 2.0;
  proc_control_B.t29_tmp = in1[6] * in1[8];
  proc_control_B.t29 = proc_control_B.t29_tmp * 2.0;
  proc_control_B.t30 = in1[3] * in1[8] * 2.0;
  proc_control_B.t31_tmp = in1[4] * in1[9];
  proc_control_B.t31 = proc_control_B.t31_tmp * 2.0;
  proc_control_B.t32_tmp_p = in1[5] * in1[9];
  proc_control_B.t32_n = proc_control_B.t32_tmp_p * 2.0;
  proc_control_B.t33_p = in1[6] * in1[9] * 2.0;
  proc_control_B.t34_f = in1[3] * in1[9] * 2.0;
  proc_control_B.t39_f = in1[4] / 2.0;
  proc_control_B.t40_a = in1[5] / 2.0;
  proc_control_B.t41_g = in1[6] / 2.0;
  proc_control_B.t42_m = in1[3] / 2.0;
  proc_control_B.t43_d = in1[10] / 2.0;
  proc_control_B.t44_e = in1[11] / 2.0;
  proc_control_B.t45_e = in1[12] / 2.0;
  proc_control_B.t55_d = in1[12] * 1.0571299073092789E-5;
  proc_control_B.t56 = in1[11] * 9.7602896722846373E-5;
  proc_control_B.t57_jb = in1[8] * 0.01129023503850542;
  proc_control_B.t58_n = in1[7] * 0.00477039452928936;
  proc_control_B.t59_j = in1[10] * 9.1703771260780813E-5;
  proc_control_B.t61_p = in1[9] * 0.143523560675718;
  proc_control_B.t62 = in1[7] * 0.00568699616459184;
  proc_control_B.t65_a = in1[9] * 0.069014505171846527;
  proc_control_B.t68 = in1[8] * 0.0071670223909459834;
  proc_control_B.t35_d = in1[4] * in1[4] * 2.0;
  proc_control_B.t36 = in1[5] * in1[5] * 2.0;
  proc_control_B.t37_p = in1[6] * in1[6] * 2.0;
  std::memset(&Anqv[0], 0, 39U * sizeof(real_T));
  Anqv[39] = -proc_control_B.t29 + proc_control_B.t32_n;
  Anqv[40] = proc_control_B.t25_i - proc_control_B.t31;
  Anqv[41] = -proc_control_B.t24 + proc_control_B.t27_jv;
  Anqv[42] = 0.0;
  Anqv[43] = proc_control_B.t43_d;
  Anqv[44] = proc_control_B.t44_e;
  Anqv[45] = proc_control_B.t45_e;
  Anqv[46] = in1[4] * -0.0013017970932508 + in1[5] * 0.4138016519122657;
  Anqv[47] = in1[4] * -0.51979016069898065 + in1[5] * 0.00099202109956931486;
  Anqv[48] = in1[4] * 0.033540735888224739 - in1[5] * 0.0058758415205803329;
  Anqv[49] = in1[4] * -25.242114556122988 + in1[5] * 0.1138522338822895;
  Anqv[50] = in1[4] * 0.1184627304742461 - in1[5] * 8.6371397256799973;
  Anqv[51] = in1[4] * 0.38451002147839958 + in1[5] * 0.65361132374006825;
  Anqv[52] = proc_control_B.t28_g + proc_control_B.t33_p;
  Anqv[53] = (proc_control_B.t24 - proc_control_B.t34_f) -
    proc_control_B.t27_tmp_d * 4.0;
  Anqv[54] = (proc_control_B.t25_i + proc_control_B.t30) -
    proc_control_B.t31_tmp * 4.0;
  Anqv[55] = -proc_control_B.t43_d;
  Anqv[56] = 0.0;
  Anqv[57] = -proc_control_B.t45_e;
  Anqv[58] = proc_control_B.t44_e;
  Anqv[59] = (in1[4] * -0.01263905936484723 - in1[6] * 0.4138016519122657) -
    in1[3] * 0.0013017970932508;
  Anqv[60] = (in1[4] * -0.05386046241846134 - in1[6] * 0.00099202109956931486) -
    in1[3] * 0.51979016069898065;
  Anqv[61] = (in1[4] * 0.37271497842704371 + in1[6] * 0.0058758415205803329) +
    in1[3] * 0.033540735888224739;
  Anqv[62] = (in1[4] * -4.2094140168137981 - in1[6] * 0.1138522338822895) - in1
    [3] * 25.242114556122988;
  Anqv[63] = (in1[4] * 0.73643595165049924 + in1[6] * 8.6371397256799973) + in1
    [3] * 0.1184627304742461;
  Anqv[64] = (in1[4] * 0.009785912146552939 - in1[6] * 0.65361132374006825) +
    in1[3] * 0.38451002147839958;
  Anqv[65] = (proc_control_B.t27_jv + proc_control_B.t34_f) -
    proc_control_B.t24_tmp * 4.0;
  Anqv[66] = proc_control_B.t23_b + proc_control_B.t33_p;
  Anqv[67] = (-proc_control_B.t26_b + proc_control_B.t29) -
    proc_control_B.t32_tmp_p * 4.0;
  Anqv[68] = -proc_control_B.t44_e;
  Anqv[69] = proc_control_B.t45_e;
  Anqv[70] = 0.0;
  Anqv[71] = -proc_control_B.t43_d;
  Anqv[72] = (in1[5] * -0.01263905936484723 - in1[6] * 0.0013017970932508) +
    in1[3] * 0.4138016519122657;
  Anqv[73] = (in1[5] * -0.05386046241846134 - in1[6] * 0.51979016069898065) +
    in1[3] * 0.00099202109956931486;
  Anqv[74] = (in1[5] * 0.37271497842704371 + in1[6] * 0.033540735888224739) -
    in1[3] * 0.0058758415205803329;
  Anqv[75] = (in1[5] * -4.2094140168137981 - in1[6] * 25.242114556122988) + in1
    [3] * 0.1138522338822895;
  Anqv[76] = (in1[5] * 0.73643595165049924 + in1[6] * 0.1184627304742461) - in1
    [3] * 8.6371397256799973;
  Anqv[77] = (in1[5] * 0.009785912146552939 + in1[6] * 0.38451002147839958) +
    in1[3] * 0.65361132374006825;
  Anqv[78] = (-proc_control_B.t30 + proc_control_B.t31) - proc_control_B.t25_tmp
    * 4.0;
  Anqv[79] = (proc_control_B.t26_b + proc_control_B.t32_n) -
    proc_control_B.t29_tmp * 4.0;
  Anqv[80] = proc_control_B.t23_b + proc_control_B.t28_g;
  Anqv[81] = -proc_control_B.t45_e;
  Anqv[82] = -proc_control_B.t44_e;
  Anqv[83] = proc_control_B.t43_d;
  Anqv[84] = 0.0;
  Anqv[85] = in1[4] * -0.4138016519122657 - in1[5] * 0.0013017970932508;
  Anqv[86] = in1[4] * -0.00099202109956931486 - in1[5] * 0.51979016069898065;
  Anqv[87] = in1[4] * 0.0058758415205803329 + in1[5] * 0.033540735888224739;
  Anqv[88] = in1[4] * -0.1138522338822895 - in1[5] * 25.242114556122988;
  Anqv[89] = in1[4] * 8.6371397256799973 + in1[5] * 0.1184627304742461;
  Anqv[90] = in1[4] * -0.65361132374006825 + in1[5] * 0.38451002147839958;
  Anqv[91] = (-proc_control_B.t36 + -proc_control_B.t37_p) + 1.0;
  Anqv[92] = proc_control_B.t17_d + proc_control_B.t22;
  Anqv[93] = proc_control_B.t18_n - proc_control_B.t21;
  Anqv[94] = 0.0;
  Anqv[95] = 0.0;
  Anqv[96] = 0.0;
  Anqv[97] = 0.0;
  proc_control_B.t11 *= in1[7];
  Anqv[98] = (((((proc_control_B.t5 * -0.036243063166504788 +
                  proc_control_B.t55_d) + proc_control_B.t56) -
                proc_control_B.t57_jb) - proc_control_B.t61_p) -
              proc_control_B.t11 * 0.036243063166504788) - 0.46465465598083061;
  Anqv[99] = (((in1[8] * 0.00477039452928936 - in1[9] * 0.001468966557066211) -
               proc_control_B.t11 * 1.109195745194835E-6) - 1.422045827172866E-5)
    + ((in1[11] * 0.00041592787873873338 - in1[12] * 0.74121409319149256) -
       proc_control_B.t5 * 1.109195745194835E-6);
  Anqv[100] = (((in1[8] * -5.890830655932608E-5 + in1[9] * 0.00568699616459184)
                + proc_control_B.t11 * 7.9830677445685858E-6) +
               0.0001023470223662639) + ((in1[11] * 0.69409782663856512 - in1[12]
    * 0.00032422410747795261) + proc_control_B.t5 * 7.9830677445685858E-6);
  Anqv[101] = (((in1[11] * 0.032506453976272241 + in1[12] * 0.24400486517334929)
                - proc_control_B.t5 * 0.0001525121428377004) + ((in1[8] *
    0.044446246736648841 - in1[9] * 0.1148218101592509) - proc_control_B.t11 *
    0.0001525121428377004)) + -0.0019552838825346208;
  Anqv[102] = (((in1[8] * 1.7911420833141059E-5 + in1[9] * 8.3502908029033716) +
                proc_control_B.t11 * 0.011738978516892359) + 0.150499724575543)
    + ((in1[11] * -0.00568699616459184 - in1[12] * 0.001145088836853196) +
       proc_control_B.t5 * 0.011738978516892359);
  Anqv[103] = (((in1[11] * -7.5569972812640509E-5 - in1[12] *
                 0.00477039452928936) - proc_control_B.t5 *
                0.0011846302503005471) + ((in1[8] * -5.91169722427816 - in1[9] *
    2.2977499514997389E-5) - proc_control_B.t11 * 0.0011846302503005471)) +
    -0.015187567311545479;
  Anqv[104] = proc_control_B.t17_d - proc_control_B.t22;
  Anqv[105] = (-proc_control_B.t35_d + -proc_control_B.t37_p) + 1.0;
  Anqv[106] = proc_control_B.t19_p + proc_control_B.t20;
  Anqv[107] = 0.0;
  Anqv[108] = 0.0;
  Anqv[109] = 0.0;
  Anqv[110] = 0.0;
  proc_control_B.t11 = proc_control_B.t12 * in1[8];
  Anqv[111] = (((in1[10] * -2.1519484922730651E-5 + in1[12] * 1.3454180758607359)
                - proc_control_B.t6 * 7.7738505218783331E-7) - in1[7] *
               0.01129023503850542) + ((in1[9] * -0.00041111798914172931 -
    proc_control_B.t11 * 7.7738505218783331E-7) - 1.8960611028971542E-5);
  Anqv[112] = (((((proc_control_B.t6 * -0.01903042325061665 +
                   proc_control_B.t55_d) + proc_control_B.t58_n) +
                 -proc_control_B.t59_j) - proc_control_B.t65_a) -
               proc_control_B.t11 * 0.01903042325061665) - 0.46415666464918648;
  Anqv[113] = (((in1[7] * -5.890830655932608E-5 + in1[9] * 0.0071670223909459834)
                + proc_control_B.t11 * 2.3842573459475649E-5) +
               0.00058152618193843065) + ((in1[10] * -0.93255469429176219 - in1
    [12] * 7.6083411800115719E-5) + proc_control_B.t6 * 2.3842573459475649E-5);
  Anqv[114] = (((in1[10] * -0.0071670223909459834 + in1[12] *
                 0.00145353196782447) - proc_control_B.t6 * 0.017943464992838758)
               + ((in1[7] * 0.044446246736648841 - in1[9] * 5.3937622658585171)
                  - proc_control_B.t11 * 0.017943464992838758)) +
    -0.4376454876302136;
  Anqv[115] = (((in1[10] * 0.0012538688125934979 - in1[12] * 0.1118794885864644)
                + proc_control_B.t6 * 8.4206769578830268E-5) + in1[7] *
               1.7911420833141059E-5) + ((proc_control_B.t11 *
    8.4206769578830268E-5 + in1[9] * 0.025315910649035739) +
    0.0020538236482641531);
  Anqv[116] = (((in1[10] * 1.6661666253314429E-5 + in1[12] * 0.01129023503850542)
                + proc_control_B.t6 * 0.00035080205133418912) + ((in1[7] *
    -5.91169722427816 + in1[9] * 0.01257120723021817) + proc_control_B.t11 *
    0.00035080205133418912)) + 0.0085561475935168052;
  Anqv[117] = proc_control_B.t18_n + proc_control_B.t21;
  Anqv[118] = proc_control_B.t19_p - proc_control_B.t20;
  Anqv[119] = (-proc_control_B.t35_d + -proc_control_B.t36) + 1.0;
  Anqv[120] = 0.0;
  Anqv[121] = 0.0;
  Anqv[122] = 0.0;
  Anqv[123] = 0.0;
  proc_control_B.t11 = proc_control_B.t13 * in1[9];
  Anqv[124] = (((in1[10] * 2.989993556213668E-6 - in1[11] * 1.4431163638272659)
                + proc_control_B.t7 * 5.1582899272597018E-6) - in1[7] *
               0.143523560675718) + ((proc_control_B.t11 * 5.1582899272597018E-6
    + in1[8] * -0.00041111798914172931) + 0.0001592064792364106);
  Anqv[125] = (((in1[10] * 1.0731951852318531 - in1[11] * 1.356129262930646E-5)
                + proc_control_B.t7 * 2.1981689677272681E-5) + ((in1[7] *
    -0.001468966557066211 - in1[8] * 0.069014505171846527) + proc_control_B.t11 *
    2.1981689677272681E-5)) + 0.00067844721226150231;
  Anqv[126] = (((((proc_control_B.t7 * -0.01616685726098728 + proc_control_B.t56)
                  + -proc_control_B.t59_j) + proc_control_B.t62) +
                proc_control_B.t68) - proc_control_B.t11 * 0.01616685726098728)
    - 0.49897707595639768;
  Anqv[127] = (((in1[10] * 0.069014505171846527 - in1[11] *
                 0.0018646499569661989) + proc_control_B.t7 *
                0.00171795837774031) + ((in1[7] * -0.1148218101592509 - in1[8] *
    5.3937622658585171) + proc_control_B.t11 * 0.00171795837774031)) +
    0.053023406720379938;
  Anqv[128] = (((in1[10] * -0.00032387772021301561 + in1[11] * 0.143523560675718)
                - proc_control_B.t7 * 0.00030055639757781919) + ((in1[7] *
    8.3502908029033716 + in1[8] * 0.025315910649035739) - proc_control_B.t11 *
    0.00030055639757781919)) + -0.0092764320240067664;
  Anqv[129] = (((in1[10] * -0.0013492616947596331 - in1[11] *
                 0.01448357294143097) - proc_control_B.t7 * 3.993855127780116E-6)
               - in1[7] * 2.2977499514997389E-5) + ((in1[8] *
    0.01257120723021817 - proc_control_B.t11 * 3.993855127780116E-6) -
    0.00012326713357346041);
  Anqv[130] = 0.0;
  Anqv[131] = 0.0;
  Anqv[132] = 0.0;
  Anqv[133] = -proc_control_B.t39_f;
  Anqv[134] = proc_control_B.t42_m;
  Anqv[135] = proc_control_B.t41_g;
  Anqv[136] = -proc_control_B.t40_a;
  proc_control_B.t11 = in1[10] * proc_control_B.t8_g;
  Anqv[137] = (((in1[10] * -0.00010396365424827521 - in1[11] *
                 0.0030560301354578762) - in1[12] * 0.030270009262121408) -
               proc_control_B.t2 * 2.1768827225552109E-5) + (((in1[8] *
    -2.1519484922730651E-5 + in1[9] * 2.989993556213668E-6) - proc_control_B.t11
    * 2.1768827225552109E-5) - 0.00043450752945213789);
  Anqv[138] = ((((in1[10] * 0.0028513455484883 - in1[11] *
                  0.00032316342950661811) + in1[12] * 4.2079285691049859E-5) -
                proc_control_B.t2 * 0.0036543398217122828) + ((in1[8] *
    -9.1703771260780813E-5 + in1[9] * 1.0731951852318531) - proc_control_B.t11 *
    0.0036543398217122828)) + -0.072940914605035587;
  Anqv[139] = (((in1[10] * 0.023864851221217471 + in1[11] *
                 4.0426879502317728E-6) - in1[12] * 0.00016269010774240791) +
               ((proc_control_B.t2 * 0.0003794960966701478 - in1[8] *
                 0.93255469429176219) - in1[9] * 9.1703771260780813E-5)) +
    (proc_control_B.t11 * 0.0003794960966701478 + 0.007574772388625705);
  Anqv[140] = ((((proc_control_B.t2 * -0.28560141361437341 +
                  proc_control_B.t65_a) - proc_control_B.t68) -
                proc_control_B.t11 * 0.28560141361437341) - 5.7006270182509668)
    + ((in1[10] * 0.00017692814721597281 - in1[11] * 0.00301187450220627) + in1
       [12] * 0.0032852614324183722);
  Anqv[141] = (((in1[10] * 0.005100926963153893 + in1[11] * 7.54282242443926E-5)
                + in1[12] * 0.76112100692746432) + ((proc_control_B.t2 *
    0.0013404854555911631 + in1[8] * 0.0012538688125934979) - in1[9] *
    0.00032387772021301561)) + (proc_control_B.t11 * 0.0013404854555911631 +
    0.026756196718386482);
  Anqv[142] = (((in1[10] * -0.0085297096290247246 - in1[11] *
                 0.59953739020136265) - in1[12] * 6.8948828938803766E-5) +
               ((proc_control_B.t2 * 0.00066564938883491385 + in1[8] *
                 1.6661666253314429E-5) - in1[9] * 0.0013492616947596331)) +
    (proc_control_B.t11 * 0.00066564938883491385 + 0.013286414946804669);
  Anqv[143] = 0.0;
  Anqv[144] = 0.0;
  Anqv[145] = 0.0;
  Anqv[146] = -proc_control_B.t40_a;
  Anqv[147] = -proc_control_B.t41_g;
  Anqv[148] = proc_control_B.t42_m;
  Anqv[149] = proc_control_B.t39_f;
  proc_control_B.t11 = in1[11] * proc_control_B.t9_g;
  Anqv[150] = ((((in1[10] * -0.0030560301354578762 + in1[11] *
                  0.001929418735906703) + in1[12] * 6.2884941489263073E-5) +
                proc_control_B.t3_e * 0.001003331497170287) + ((in1[7] *
    9.7602896722846373E-5 - in1[9] * 1.4431163638272659) + proc_control_B.t11 *
    0.001003331497170287)) + 0.0234110682673067;
  Anqv[151] = (((in1[10] * -0.00032316342950661811 + in1[11] *
                 4.5292476302332957E-6) - in1[12] * 0.016528998001422841) +
               proc_control_B.t3_e * 1.026911824132076E-5) + (((in1[7] *
    0.00041592787873873338 - in1[9] * 1.356129262930646E-5) + proc_control_B.t11
    * 1.026911824132076E-5) + 0.00023961275896415121);
  Anqv[152] = (((in1[10] * 4.0426879502317728E-6 + in1[11] *
                 0.023860477346842442) - in1[12] * 0.000941018323416786) +
               ((proc_control_B.t3_e * -3.9756137245743291E-5 + in1[7] *
                 0.69409782663856512) + in1[9] * 9.7602896722846373E-5)) +
    (proc_control_B.t11 * -3.9756137245743291E-5 - 0.00092764320240067675);
  Anqv[153] = (((in1[10] * -0.00301187450220627 + in1[11] *
                 0.00082864946354184129) - in1[12] * 0.291807921220024) +
               ((proc_control_B.t3_e * 0.00080268590155159437 + in1[7] *
                 0.032506453976272241) - in1[9] * 0.0018646499569661989)) +
    (proc_control_B.t11 * 0.00080268590155159437 + 0.018729337702870542);
  Anqv[154] = ((((proc_control_B.t3_e * -0.058374455968341669 +
                  proc_control_B.t61_p) - proc_control_B.t62) -
                proc_control_B.t11 * 0.058374455968341669) - 1.362070639261306)
    + ((in1[10] * 7.54282242443926E-5 - in1[11] * 0.00019446645525741661) - in1
       [12] * 0.003324115892995542);
  Anqv[155] = ((((proc_control_B.t3_e * 1.6062902063655571E-7 - in1[7] *
                  7.5569972812640509E-5) - in1[9] * 0.01448357294143097) +
                proc_control_B.t11 * 1.6062902063655571E-7) + ((in1[10] *
    -0.59953739020136265 + in1[11] * 0.0085432434746820687) + in1[12] *
    0.0030111351640179931)) + 3.7480104815196341E-6;
  Anqv[156] = 0.0;
  Anqv[157] = 0.0;
  Anqv[158] = 0.0;
  Anqv[159] = -proc_control_B.t41_g;
  Anqv[160] = proc_control_B.t40_a;
  Anqv[161] = -proc_control_B.t39_f;
  Anqv[162] = proc_control_B.t42_m;
  proc_control_B.t11 = in1[12] * proc_control_B.t10;
  Anqv[163] = (((in1[10] * -0.030270009262121408 + in1[11] *
                 6.2884941489263073E-5) + in1[12] * 0.0020006959490984312) -
               proc_control_B.t4_e * 0.0001032754577185093) + (((in1[7] *
    1.0571299073092789E-5 + in1[8] * 1.3454180758607359) - proc_control_B.t11 *
    0.0001032754577185093) - 0.0050625224371818262);
  Anqv[164] = (((in1[10] * 4.2079285691049859E-5 - in1[11] *
                 0.016528998001422841) + in1[12] * 0.00283488707941543) +
               proc_control_B.t4_e * 4.3636352726935713E-5) + (((in1[7] *
    -0.74121409319149256 + in1[8] * 1.0571299073092789E-5) + proc_control_B.t11 *
    4.3636352726935713E-5) + 0.0021390368983792022);
  Anqv[165] = ((((proc_control_B.t4_e * -5.3885346962112674E-7 - in1[7] *
                  0.00032422410747795261) - in1[8] * 7.6083411800115719E-5) -
                proc_control_B.t11 * 5.3885346962112674E-7) + ((in1[10] *
    -0.00016269010774240791 - in1[11] * 0.000941018323416786) - in1[12] *
    2.6641242336162E-6)) + -2.6414385765741509E-5;
  Anqv[166] = (((in1[10] * 0.0032852614324183722 - in1[11] * 0.291807921220024)
                - in1[12] * 0.00063467747547131872) + ((proc_control_B.t4_e *
    0.00040656429737222281 + in1[7] * 0.24400486517334929) + in1[8] *
    0.00145353196782447)) + (proc_control_B.t11 * 0.00040656429737222281 +
    0.019929622420207);
  Anqv[167] = ((((proc_control_B.t4_e * 1.6384160104928689E-7 - in1[7] *
                  0.001145088836853196) - in1[8] * 0.1118794885864644) +
                proc_control_B.t11 * 1.6384160104928689E-7) + ((in1[10] *
    0.76112100692746432 - in1[11] * 0.003324115892995542) - in1[12] *
    0.005288701994301117)) + 8.0314510318277867E-6;
  Anqv[168] = ((((proc_control_B.t4_e * -0.054076220260104418 +
                  proc_control_B.t57_jb) - proc_control_B.t58_n) -
                proc_control_B.t11 * 0.054076220260104418) - 2.6507951107894319)
    + ((in1[10] * -6.8948828938803766E-5 + in1[11] * 0.0030111351640179931) +
       in1[12] * 1.7711862430984169E-5);
}

// Function for MATLAB Function: '<S126>/MATLAB Function2'
void proc_control::proc_co_AUV8QuatSimFcn_AbfqyrNU(const real_T in1[13], const
  real_T in2[8], real_T out1[13])
{
  proc_control_B.t8_a = in1[4] * in1[4];
  proc_control_B.t9_i = in1[5] * in1[5];
  proc_control_B.t11_c = in1[4] * in1[5] * 2.0;
  proc_control_B.t12_tmp = in1[4] * in1[6];
  proc_control_B.t12_m = proc_control_B.t12_tmp * 2.0;
  proc_control_B.t13_tmp = in1[5] * in1[6];
  proc_control_B.t13_n = proc_control_B.t13_tmp * 2.0;
  proc_control_B.t14_tmp = in1[3] * in1[4];
  proc_control_B.t14_c = proc_control_B.t14_tmp * 2.0;
  proc_control_B.t15_tmp = in1[3] * in1[5];
  proc_control_B.t15_n = proc_control_B.t15_tmp * 2.0;
  proc_control_B.t16_h = in1[3] * in1[6] * 2.0;
  proc_control_B.t25_iu = in1[11] / 500.0;
  proc_control_B.t29_e = in1[10] / 1000.0;
  proc_control_B.t31_p = in1[12] * 0.018;
  proc_control_B.t50_k = in1[7] * 32.4648;
  proc_control_B.t53 = in1[8] * 43.6156;
  proc_control_B.t54 = in1[9] * 46.7695;
  proc_control_B.t17_i = proc_control_B.t8_a * 2.0;
  proc_control_B.t18_nl = proc_control_B.t9_i * 2.0;
  proc_control_B.t19_o = in1[6] * in1[6] * 2.0;
  proc_control_B.t57_l = proc_control_B.t25_iu + proc_control_B.t31_p;
  proc_control_B.t25_iu += proc_control_B.t29_e;
  proc_control_B.t29_e += proc_control_B.t31_p;
  proc_control_B.t31_p = in1[11] * 0.558 + proc_control_B.t50_k;
  proc_control_B.t64 = in1[10] * 0.062 + proc_control_B.t54;
  proc_control_B.t65_p = in1[12] * 0.031 + proc_control_B.t53;
  proc_control_B.t68_b = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 0.592;
  proc_control_B.t50_k = in1[12] * 0.062 + -proc_control_B.t50_k;
  proc_control_B.t53 = in1[10] * 0.558 + -proc_control_B.t53;
  proc_control_B.t54 = in1[11] * 0.031 + -proc_control_B.t54;
  proc_control_B.t69 = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_B.t70_f = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  out1[0] = (((proc_control_B.t18_nl + proc_control_B.t19_o) - 1.0) * -in1[7] +
             (proc_control_B.t12_m + proc_control_B.t15_n) * in1[9]) +
    (proc_control_B.t11_c - proc_control_B.t16_h) * in1[8];
  out1[1] = ((proc_control_B.t11_c + proc_control_B.t16_h) * in1[7] -
             ((proc_control_B.t17_i + proc_control_B.t19_o) - 1.0) * in1[8]) +
    (proc_control_B.t13_n - proc_control_B.t14_c) * in1[9];
  out1[2] = ((proc_control_B.t13_n + proc_control_B.t14_c) * in1[8] -
             ((proc_control_B.t17_i + proc_control_B.t18_nl) - 1.0) * in1[9]) +
    (proc_control_B.t12_m - proc_control_B.t15_n) * in1[7];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_B.t11_c = in1[10] * proc_control_B.t57_l;
  proc_control_B.t12_m = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) * in1
    [10];
  proc_control_B.t13_n = in1[10] * proc_control_B.t64;
  proc_control_B.t14_c = in1[10] * proc_control_B.t53;
  proc_control_B.t15_n = in1[10] * proc_control_B.t69;
  proc_control_B.t16_h = in1[10] * proc_control_B.t70_f;
  proc_control_B.t17_i = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) * in1
    [11];
  proc_control_B.t18_nl = in1[11] * proc_control_B.t29_e;
  proc_control_B.t19_o = in1[11] * proc_control_B.t31_p;
  proc_control_B.out1_tmp = in1[11] * proc_control_B.t54;
  proc_control_B.out1_tmp_i = in1[11] * proc_control_B.t68_b;
  proc_control_B.t69 *= in1[11];
  proc_control_B.out1_tmp_c = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  proc_control_B.out1_tmp_g = in1[12] * proc_control_B.t25_iu;
  proc_control_B.out1_tmp_iu = in1[12] * proc_control_B.t50_k;
  proc_control_B.out1_tmp_b = in1[12] * proc_control_B.t65_p;
  proc_control_B.t68_b *= in1[12];
  proc_control_B.t70_f *= in1[12];
  proc_control_B.out1_tmp_n = (std::abs(in1[7]) * 1.17 + 15.0) * in1[7];
  proc_control_B.t57_l *= in1[7];
  proc_control_B.t65_p *= in1[7];
  proc_control_B.t54 *= in1[7];
  proc_control_B.out1_tmp_p = (std::abs(in1[8]) * 0.82 + 20.0) * in1[8];
  proc_control_B.t29_e *= in1[8];
  proc_control_B.t50_k *= in1[8];
  proc_control_B.t64 *= in1[8];
  proc_control_B.out1_tmp_o = (std::abs(in1[9]) * 0.756 + 23.333333333333332) *
    in1[9];
  proc_control_B.t25_iu *= in1[9];
  proc_control_B.t31_p *= in1[9];
  proc_control_B.t53 *= in1[9];
  out1[7] = (((((((((((((((in2[0] * -0.00033076834054020519 + in2[1] *
    1.8595780444550231E-21) + in2[2] * 0.00033506403327449372) + (in2[3] *
    0.00033363213569639753 - in2[4] * 0.001819638864719295)) + (in2[5] *
    -0.0018124211550371481 + in2[6] * 0.0018538731733468781)) + (in2[7] *
    0.001778186846409557 - proc_control_B.t8_a * 0.0063195296824236141)) +
                      ((in2[0] * 1.4142135623730951 * 0.015171119710606879 +
                        proc_control_B.t9_i * -0.0063195296824236141) + in2[1] *
                       1.4142135623730951 * 0.014928824155507611)) + ((in2[2] *
    1.4142135623730951 * 0.015171119710606879 + in2[3] * 1.4142135623730951 *
    0.01516372519659284) - proc_control_B.t12_tmp * 0.4138016519122657)) +
                    ((proc_control_B.t13_tmp * -0.0013017970932508 -
                      proc_control_B.t14_tmp * 0.0013017970932508) +
                     proc_control_B.t15_tmp * 0.4138016519122657)) +
                   (((proc_control_B.t11_c * -0.96028628902704993 -
                      proc_control_B.t12_m * 0.0001303522588356414) +
                     proc_control_B.t13_n * 9.4803055144857715E-7) -
                    proc_control_B.t14_c * 6.8231348244175949E-6)) +
                  (((proc_control_B.t15_n * -0.010033314971702871 -
                     proc_control_B.t16_h * 0.0010125044874363649) +
                    proc_control_B.t17_i * 0.010033314971702871) -
                   proc_control_B.t18_nl * 2.9388947094905889E-5)) +
                 (((proc_control_B.t19_o * -6.8231348244175949E-6 +
                    proc_control_B.out1_tmp * 0.030976977065388711) +
                   proc_control_B.out1_tmp_i * 0.0010125044874363649) -
                  proc_control_B.t69 * 0.0001303522588356414)) +
                (((proc_control_B.out1_tmp_c * -0.0010125044874363649 +
                   proc_control_B.out1_tmp_g * 0.0002115171795569455) +
                  proc_control_B.out1_tmp_iu * 9.4803055144857715E-7) +
                 proc_control_B.out1_tmp_b * 0.030976977065388711)) +
               (((proc_control_B.t68_b * 0.010033314971702871 +
                  proc_control_B.t70_f * 0.0001303522588356414) -
                 proc_control_B.out1_tmp_n * 0.030976977065388711) +
                proc_control_B.t57_l * 0.0040409200239048832)) +
              (((proc_control_B.t65_p * -0.0010125044874363649 +
                 proc_control_B.t54 * 0.010033314971702871) -
                proc_control_B.out1_tmp_p * 9.4803055144857715E-7) -
               proc_control_B.t29_e * 0.311032764122789)) +
             (((proc_control_B.t50_k * -0.0010125044874363649 -
                proc_control_B.t64 * 0.0001303522588356414) +
               proc_control_B.out1_tmp_o * 6.8231348244175949E-6) +
              proc_control_B.t25_iu * 0.031387639110527318)) +
    ((proc_control_B.t31_p * 0.010033314971702871 - proc_control_B.t53 *
      0.0001303522588356414) + 0.003159764841211807);
  out1[8] = (((((((((((((((in2[0] * 0.00013975754063522079 + in2[1] *
    7.9244610288113972E-21) + in2[2] * -0.00014157257363048341) + (in2[3] *
    -0.0001409675626320625 - in2[4] * 0.0034249251816346319)) + (in2[5] *
    0.003387750973601051 + in2[6] * 0.0035708122797193441)) + (in2[7] *
    -0.0035336380716857632 - proc_control_B.t8_a * 0.02693023120923067)) +
                      ((proc_control_B.t9_i * -0.02693023120923067 - in2[0] *
                        1.4142135623730951 * 0.01090649593858282) + in2[1] *
                       1.4142135623730951 * 0.011000123045544621)) + ((in2[2] *
    1.4142135623730951 * -0.01090649593858282 + in2[3] * 1.4142135623730951 *
    0.01090087173345982) - proc_control_B.t12_tmp * 0.00099202109956931486)) +
                    ((proc_control_B.t13_tmp * -0.51979016069898065 -
                      proc_control_B.t14_tmp * 0.51979016069898065) +
                     proc_control_B.t15_tmp * 0.00099202109956931486)) +
                   (((proc_control_B.t11_c * -2.9388947094905889E-5 -
                      proc_control_B.t12_m * 0.021882274381510681) +
                     proc_control_B.t13_n * 0.02320783323245932) -
                    proc_control_B.t14_c * 2.9076309096921531E-5)) +
                  (((proc_control_B.t15_n * -0.0001026911824132076 +
                     proc_control_B.t16_h * 0.00042780737967584029) +
                    proc_control_B.t17_i * 0.0001026911824132076) -
                   proc_control_B.t18_nl * 0.71944283020623911)) +
                 (((proc_control_B.t19_o * -2.9076309096921531E-5 +
                    proc_control_B.out1_tmp * 9.4803055144857715E-7) -
                   proc_control_B.out1_tmp_i * 0.00042780737967584029) -
                  proc_control_B.t69 * 0.021882274381510681)) +
                (((proc_control_B.out1_tmp_c * 0.00042780737967584029 +
                   proc_control_B.out1_tmp_g * 0.00090136558200456737) +
                  proc_control_B.out1_tmp_iu * 0.02320783323245932) +
                 proc_control_B.out1_tmp_b * 9.4803055144857715E-7)) +
               (((proc_control_B.t68_b * 0.0001026911824132076 +
                  proc_control_B.t70_f * 0.021882274381510681) -
                 proc_control_B.out1_tmp_n * 9.4803055144857715E-7) +
                proc_control_B.t57_l * 0.678350505826831)) +
              (((proc_control_B.t65_p * 0.00042780737967584029 +
                 proc_control_B.t54 * 0.0001026911824132076) -
                proc_control_B.out1_tmp_p * 0.02320783323245932) -
               proc_control_B.t29_e * 0.0031834266548094372)) +
             (((proc_control_B.t50_k * 0.00042780737967584029 -
                proc_control_B.t64 * 0.021882274381510681) +
               proc_control_B.out1_tmp_o * 2.9076309096921531E-5) -
              proc_control_B.t25_iu * 0.013262028769951049)) +
    ((proc_control_B.t31_p * 0.0001026911824132076 - proc_control_B.t53 *
      0.021882274381510681) + 0.01346511560461533);
  out1[9] = (((((((((((((((in2[0] * -1.725827915740819E-6 + in2[1] *
    -5.8281975682474322E-18) + in2[2] * 1.748241265284163E-6) + (in2[3] *
    1.740770148765829E-6 - in2[4] * 0.02095639900015615)) + (in2[5] *
    0.021100316216985739 - in2[6] * 0.021822949502860629)) + (in2[7] *
    0.02167903228603104 + proc_control_B.t8_a * 0.18635748921352191)) +
                      ((proc_control_B.t9_i * 0.18635748921352191 - in2[0] *
                        1.4142135623730951 * 4.8869263875916949E-5) + in2[1] *
                       1.4142135623730951 * 6.6264429389244648E-5)) + ((in2[2] *
    1.4142135623730951 * -4.8869263875916949E-5 + in2[3] * 1.4142135623730951 *
    6.7490056888775055E-5) + proc_control_B.t12_tmp * 0.0058758415205803329)) +
                    ((proc_control_B.t13_tmp * 0.033540735888224739 +
                      proc_control_B.t14_tmp * 0.033540735888224739) -
                     proc_control_B.t15_tmp * 0.0058758415205803329)) +
                   (((proc_control_B.t11_c * 0.0002115171795569455 +
                      proc_control_B.t12_m * 0.002272431716587712) -
                     proc_control_B.t13_n * 2.9076309096921531E-5) +
                    proc_control_B.t14_c * 0.021384731826702759)) +
                  (((proc_control_B.t15_n * 0.00039756137245743289 -
                     proc_control_B.t16_h * 5.2828771531483014E-6) -
                    proc_control_B.t17_i * 0.00039756137245743289) +
                   proc_control_B.t18_nl * 0.00090136558200456737)) +
                 (((proc_control_B.t19_o * 0.021384731826702759 -
                    proc_control_B.out1_tmp * 6.8231348244175949E-6) +
                   proc_control_B.out1_tmp_i * 5.2828771531483014E-6) +
                  proc_control_B.t69 * 0.002272431716587712)) +
                (((proc_control_B.out1_tmp_c * -5.2828771531483014E-6 -
                   proc_control_B.out1_tmp_g * 0.66292668662778553) -
                  proc_control_B.out1_tmp_iu * 2.9076309096921531E-5) -
                 proc_control_B.out1_tmp_b * 6.8231348244175949E-6)) +
               (((proc_control_B.t68_b * -0.00039756137245743289 -
                  proc_control_B.t70_f * 0.002272431716587712) +
                 proc_control_B.out1_tmp_n * 6.8231348244175949E-6) -
                proc_control_B.t57_l * 0.070445383214219059)) +
              (((proc_control_B.t65_p * -5.2828771531483014E-6 -
                 proc_control_B.t54 * 0.00039756137245743289) +
                proc_control_B.out1_tmp_p * 2.9076309096921531E-5) +
               proc_control_B.t29_e * 0.01232440254618042)) +
             (((proc_control_B.t50_k * -5.2828771531483014E-6 +
                proc_control_B.t64 * 0.002272431716587712) -
               proc_control_B.out1_tmp_o * 0.021384731826702759) +
              proc_control_B.t25_iu * 0.00016376919174759729)) +
    ((proc_control_B.t31_p * -0.00039756137245743289 + proc_control_B.t53 *
      0.002272431716587712) - 0.093178744606760927);
  out1[10] = (((((((((((((((((in2[0] * 0.0013021350951669831 + in2[1] *
    6.1932883292401409E-19) + in2[2] * -0.00131904594055876) + (in2[3] *
    -0.0013134089920948341 - in2[4] * 0.26767193546582568)) + (in2[5] *
    0.26476621250220889 + in2[6] * 0.2790736050389333)) + (in2[7] *
    -0.27616788207531651 - proc_control_B.t8_a * 2.1047070084068991)) + ((in2[0]
    * 1.4142135623730951 * 0.043593198825375247 + proc_control_B.t9_i *
    -2.1047070084068991) - in2[1] * 1.4142135623730951 * 0.043051831063235027))
                        + ((in2[2] * 1.4142135623730951 * 0.043593198825375247 -
    in2[3] * 1.4142135623730951 * 0.043976565543532631) - proc_control_B.t12_tmp
    * 0.1138522338822895)) + ((proc_control_B.t13_tmp * -25.242114556122988 -
    proc_control_B.t14_tmp * 25.242114556122988) + proc_control_B.t15_tmp *
    0.1138522338822895)) + ((proc_control_B.t11_c * -0.0040409200239048832 -
    proc_control_B.t12_m * 1.71018810547529) + proc_control_B.t13_n *
    0.021882274381510681)) + ((proc_control_B.t14_c * -0.002272431716587712 -
    proc_control_B.t15_n * 0.0080268590155159435) + proc_control_B.t16_h *
    0.0039859244840414)) + ((proc_control_B.t17_i * 0.0080268590155159435 -
    proc_control_B.t18_nl * 0.678350505826831) - proc_control_B.t19_o *
    0.002272431716587712)) + ((proc_control_B.out1_tmp * 0.0001303522588356414 -
    proc_control_B.out1_tmp_i * 0.0039859244840414) - proc_control_B.t69 *
    1.71018810547529)) + (((proc_control_B.out1_tmp_c * 0.0039859244840414 +
    proc_control_B.out1_tmp_g * 0.070445383214219059) +
    proc_control_B.out1_tmp_iu * 0.021882274381510681) +
    proc_control_B.out1_tmp_b * 0.0001303522588356414)) + ((proc_control_B.t68_b
    * 0.0080268590155159435 + proc_control_B.t70_f * 1.71018810547529) -
    proc_control_B.out1_tmp_n * 0.0001303522588356414)) + ((proc_control_B.t57_l
    * 53.015831269733987 + proc_control_B.t65_p * 0.0039859244840414) +
    proc_control_B.t54 * 0.0080268590155159435)) + ((proc_control_B.out1_tmp_p *
    -0.021882274381510681 - proc_control_B.t29_e * 0.2488326294809943) +
    proc_control_B.t50_k * 0.0039859244840414)) + ((proc_control_B.t64 *
    -1.71018810547529 + proc_control_B.out1_tmp_o * 0.002272431716587712) -
    proc_control_B.t25_iu * 0.1235636590052834)) + ((proc_control_B.t31_p *
    0.0080268590155159435 - proc_control_B.t53 * 1.71018810547529) +
    1.0523535042034491);
  out1[11] = ((((((((((((((((in2[0] * 5.24748238233168E-7 - in2[1] *
    1.083514276897426E-19) + in2[2] * -5.3156315041823265E-7) + (in2[3] *
    -5.2929151302328333E-7 + in2[4] * 0.10593667623599359)) + (in2[5] *
    0.10537885436940329 - in2[6] * 0.10793139553633729)) + (in2[7] *
    -0.1033841350690595 + proc_control_B.t8_a * 0.36821797582524962)) + ((in2[0]
    * 1.4142135623730951 * 0.013457654526727991 + proc_control_B.t9_i *
    0.36821797582524962) + in2[1] * 1.4142135623730951 * 0.013869054980635681))
                       + ((in2[2] * 1.4142135623730951 * 0.013457654526727991 +
    in2[3] * 1.4142135623730951 * 0.01386868232130781) + proc_control_B.t12_tmp *
    8.6371397256799973)) + ((proc_control_B.t13_tmp * 0.1184627304742461 +
    proc_control_B.t14_tmp * 0.1184627304742461) - proc_control_B.t15_tmp *
    8.6371397256799973)) + (((proc_control_B.t11_c * 0.311032764122789 +
    proc_control_B.t12_m * 0.0080268590155159435) - proc_control_B.t13_n *
    0.0001026911824132076) + proc_control_B.t14_c * 0.00039756137245743289)) +
                    ((proc_control_B.t15_n * 0.58374455968341665 +
                      proc_control_B.t16_h * 1.606290206365557E-6) -
                     proc_control_B.t17_i * 0.58374455968341665)) +
                   (((proc_control_B.t18_nl * 0.0031834266548094372 +
                      proc_control_B.t19_o * 0.00039756137245743289) -
                     proc_control_B.out1_tmp * 0.010033314971702871) -
                    proc_control_B.out1_tmp_i * 1.606290206365557E-6)) +
                  (((proc_control_B.t69 * 0.0080268590155159435 +
                     proc_control_B.out1_tmp_c * 1.606290206365557E-6) -
                    proc_control_B.out1_tmp_g * 0.01232440254618042) -
                   proc_control_B.out1_tmp_iu * 0.0001026911824132076)) +
                 ((proc_control_B.out1_tmp_b * -0.010033314971702871 -
                   proc_control_B.t68_b * 0.58374455968341665) -
                  proc_control_B.t70_f * 0.0080268590155159435)) +
                ((proc_control_B.out1_tmp_n * 0.010033314971702871 -
                  proc_control_B.t57_l * 0.2488326294809943) +
                 proc_control_B.t65_p * 1.606290206365557E-6)) +
               ((proc_control_B.t54 * -0.58374455968341665 +
                 proc_control_B.out1_tmp_p * 0.0001026911824132076) +
                proc_control_B.t29_e * 18.096081350185919)) +
              (((proc_control_B.t50_k * 1.606290206365557E-6 +
                 proc_control_B.t64 * 0.0080268590155159435) -
                proc_control_B.out1_tmp_o * 0.00039756137245743289) -
               proc_control_B.t25_iu * 4.9794996397332282E-5)) +
    ((proc_control_B.t31_p * -0.58374455968341665 + proc_control_B.t53 *
      0.0080268590155159435) - 0.18410898791262481);
  out1[12] = ((((((((((((((((in2[0] * -0.1731941163298826 + in2[1] *
    -1.4397960202092559E-21) + in2[2] * 0.175443390567933) + (in2[3] *
    0.17469363248858291 + in2[4] * 0.00062021813460420567)) + (in2[5] *
    -0.0006207996116589 - in2[6] * 0.00064672437426625525)) + (in2[7] *
    0.00064730585132094889 + proc_control_B.t8_a * 0.0048929560732764686)) +
                        ((in2[0] * 1.4142135623730951 * 0.00059255494878017434 +
    proc_control_B.t9_i * 0.0048929560732764686) - in2[1] * 1.4142135623730951 *
    0.1225770464045467)) + ((in2[2] * 1.4142135623730951 *
    0.00059255494878017434 + in2[3] * 1.4142135623730951 *
    0.00041984673608298361) - proc_control_B.t12_tmp * 0.65361132374006825)) +
                      ((proc_control_B.t13_tmp * 0.38451002147839958 +
                        proc_control_B.t14_tmp * 0.38451002147839958) +
                       proc_control_B.t15_tmp * 0.65361132374006825)) +
                     (((proc_control_B.t11_c * -0.031387639110527318 +
                        proc_control_B.t12_m * 0.0039859244840414) -
                       proc_control_B.t13_n * 0.00042780737967584029) +
                      proc_control_B.t14_c * 5.2828771531483014E-6)) +
                    (((proc_control_B.t15_n * -1.606290206365557E-6 -
                       proc_control_B.t16_h * 0.53015902215788635) +
                      proc_control_B.t17_i * 1.606290206365557E-6) +
                     proc_control_B.t18_nl * 0.013262028769951049)) +
                   (((proc_control_B.t19_o * 5.2828771531483014E-6 +
                      proc_control_B.out1_tmp * 0.0010125044874363649) +
                     proc_control_B.out1_tmp_i * 0.53015902215788635) +
                    proc_control_B.t69 * 0.0039859244840414)) +
                  ((proc_control_B.out1_tmp_c * -0.53015902215788635 -
                    proc_control_B.out1_tmp_g * 0.00016376919174759729) -
                   proc_control_B.out1_tmp_iu * 0.00042780737967584029)) +
                 (((proc_control_B.out1_tmp_b * 0.0010125044874363649 +
                    proc_control_B.t68_b * 1.606290206365557E-6) -
                   proc_control_B.t70_f * 0.0039859244840414) -
                  proc_control_B.out1_tmp_n * 0.0010125044874363649)) +
                ((proc_control_B.t57_l * -0.1235636590052834 -
                  proc_control_B.t65_p * 0.53015902215788635) +
                 proc_control_B.t54 * 1.606290206365557E-6)) +
               ((proc_control_B.out1_tmp_p * 0.00042780737967584029 -
                 proc_control_B.t29_e * 4.9794996397332282E-5) -
                proc_control_B.t50_k * 0.53015902215788635)) +
              (((proc_control_B.t64 * 0.0039859244840414 -
                 proc_control_B.out1_tmp_o * 5.2828771531483014E-6) +
                proc_control_B.t25_iu * 16.434929686894481) +
               proc_control_B.t31_p * 1.606290206365557E-6)) +
    (proc_control_B.t53 * 0.0039859244840414 - 0.0024464780366382352);
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_co_stateEvolution_p6X6Q73G(const real_T X[143], const
  real_T U[88], real_T c[130], real_T J[18070])
{
  static const real_T val[104]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.002112443491058583, -0.0015284356933675683, -7.0837403672252151E-6,
    0.0062952228101239545, 0.0019032522297668638, -0.017235611708486639, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021112545591001931, 0.001555652319878204,
    9.371205474517828E-6, -0.0060884483374622281, 0.0019613805650913105,
    -0.017335012146094616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021790267284400532, -0.0015565687047941388, -6.7363334491227172E-6,
    0.00603310470655138, 0.0019031465986279986, 0.017628138981294922, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0021778377964816625, 0.0015275193084516327,
    9.7186123926203251E-6, -0.0063505664410348026, 0.001961274933952446,
    0.017528738543686955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00018196388647192952, -0.00034249251816346321, -0.0020956399000156153,
    -0.026767193546582569, 0.010593667623599361, 6.2021813460420573E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.00018124211550371483, 0.00033877509736010515,
    0.0021100316216985742, 0.026476621250220891, 0.01053788543694033,
    -6.207996116589E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00018538731733468782, 0.00035708122797193444, -0.0021822949502860629,
    0.027907360503893332, -0.010793139553633729, -6.4672437426625527E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00017781868464095571,
    -0.00035336380716857632, 0.002167903228603104, -0.027616788207531651,
    -0.010338413506905951, 6.4730585132094889E-5 };

  static const int8_T b[640]{ 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };

  std::memset(&proc_control_B.Jx_c[0], 0, 16900U * sizeof(real_T));
  std::memset(&proc_control_B.Jmv[0], 0, 10400U * sizeof(real_T));
  std::memset(&c[0], 0, 130U * sizeof(real_T));
  for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 13;
       proc_control_B.Jx_tmp++) {
    proc_control_B.ic_l[proc_control_B.Jx_tmp] = static_cast<real_T>
      (proc_control_B.Jx_tmp) + 1.0;
  }

  for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 11;
       proc_control_B.Jx_tmp++) {
    for (proc_control_B.i_h = 0; proc_control_B.i_h < 8; proc_control_B.i_h++) {
      proc_control_B.b_U_o[proc_control_B.i_h + (proc_control_B.Jx_tmp << 3)] =
        U[11 * proc_control_B.i_h + proc_control_B.Jx_tmp];
    }

    for (proc_control_B.i_h = 0; proc_control_B.i_h < 13; proc_control_B.i_h++)
    {
      proc_control_B.b_X_f[proc_control_B.i_h + 13 * proc_control_B.Jx_tmp] = X
        [11 * proc_control_B.i_h + proc_control_B.Jx_tmp];
    }
  }

  for (proc_control_B.i_h = 0; proc_control_B.i_h < 10; proc_control_B.i_h++) {
    AUV8QuatJacobianMatrix_wW6vUT_g(&proc_control_B.b_X_f[13 *
      proc_control_B.i_h], proc_control_B.Ak);
    proc_control_B.Ak1_tmp = (proc_control_B.i_h + 1) * 13;
    AUV8QuatJacobianMatrix_wW6vUT_g(&proc_control_B.b_X_f[proc_control_B.Ak1_tmp],
      proc_control_B.Ak1);
    proc_control_B.Jx_tmp = proc_control_B.i_h << 3;
    proc_co_AUV8QuatSimFcn_AbfqyrNU(&proc_control_B.b_X_f[13 *
      proc_control_B.i_h], &proc_control_B.b_U_o[proc_control_B.Jx_tmp],
      proc_control_B.dv13);
    proc_co_AUV8QuatSimFcn_AbfqyrNU(&proc_control_B.b_X_f[proc_control_B.Ak1_tmp],
      &proc_control_B.b_U_o[proc_control_B.Jx_tmp], proc_control_B.dv14);
    for (proc_control_B.k_p = 0; proc_control_B.k_p < 13; proc_control_B.k_p++)
    {
      proc_control_B.c_tmp_g = static_cast<int32_T>
        (proc_control_B.ic_l[proc_control_B.k_p]);
      c[proc_control_B.c_tmp_g - 1] = (proc_control_B.b_X_f[13 *
        proc_control_B.i_h + proc_control_B.k_p] +
        (proc_control_B.dv13[proc_control_B.k_p] +
         proc_control_B.dv14[proc_control_B.k_p]) * 0.05) -
        proc_control_B.b_X_f[proc_control_B.Ak1_tmp + proc_control_B.k_p];
      if (proc_control_B.i_h + 1 > 1) {
        for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 13;
             proc_control_B.Jx_tmp++) {
          proc_control_B.Jx_c[((static_cast<int32_T>
                                (proc_control_B.ic_l[proc_control_B.Jx_tmp]) +
                                130 * proc_control_B.k_p) + 1690 *
                               (proc_control_B.i_h - 1)) - 1] =
            proc_control_B.Ak[13 * proc_control_B.k_p + proc_control_B.Jx_tmp] *
            0.05;
        }

        proc_control_B.Jx_c[((static_cast<int32_T>
                              (proc_control_B.ic_l[proc_control_B.k_p]) + 130 *
                              proc_control_B.k_p) + 1690 * (proc_control_B.i_h -
          1)) - 1] = proc_control_B.Jx_c[((130 * proc_control_B.k_p +
          proc_control_B.c_tmp_g) + (proc_control_B.i_h - 1) * 1690) - 1] + 1.0;
      }
    }

    for (proc_control_B.k_p = 0; proc_control_B.k_p < 13; proc_control_B.k_p++)
    {
      for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 13;
           proc_control_B.Jx_tmp++) {
        proc_control_B.Jx_c[((static_cast<int32_T>
                              (proc_control_B.ic_l[proc_control_B.Jx_tmp]) + 130
                              * proc_control_B.k_p) + 1690 * proc_control_B.i_h)
          - 1] = proc_control_B.Ak1[13 * proc_control_B.k_p +
          proc_control_B.Jx_tmp] * 0.05;
      }

      proc_control_B.Jx_tmp = ((130 * proc_control_B.k_p + static_cast<int32_T>
        (proc_control_B.ic_l[proc_control_B.k_p])) + 1690 * proc_control_B.i_h)
        - 1;
      proc_control_B.Jx_c[proc_control_B.Jx_tmp]--;
    }

    for (proc_control_B.k_p = 0; proc_control_B.k_p < 8; proc_control_B.k_p++) {
      for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 13;
           proc_control_B.Jx_tmp++) {
        proc_control_B.Jmv[((static_cast<int32_T>
                             (proc_control_B.ic_l[proc_control_B.Jx_tmp]) + 130 *
                             proc_control_B.k_p) + 1040 * proc_control_B.i_h) -
          1] = val[13 * proc_control_B.k_p + proc_control_B.Jx_tmp];
      }
    }

    for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 13;
         proc_control_B.Jx_tmp++) {
      proc_control_B.ic_l[proc_control_B.Jx_tmp] += 13.0;
    }
  }

  for (proc_control_B.Jx_tmp = 0; proc_control_B.Jx_tmp < 130;
       proc_control_B.Jx_tmp++) {
    for (proc_control_B.i_h = 0; proc_control_B.i_h < 8; proc_control_B.i_h++) {
      proc_control_B.k_p = (proc_control_B.Jx_tmp << 3) + proc_control_B.i_h;
      proc_control_B.Jmv_n[proc_control_B.k_p] = 0.0;
      for (proc_control_B.Ak1_tmp = 0; proc_control_B.Ak1_tmp < 80;
           proc_control_B.Ak1_tmp++) {
        proc_control_B.Jmv_n[proc_control_B.k_p] += proc_control_B.Jmv[130 *
          proc_control_B.Ak1_tmp + proc_control_B.Jx_tmp] * static_cast<real_T>
          (b[80 * proc_control_B.i_h + proc_control_B.Ak1_tmp]);
      }
    }

    for (proc_control_B.i_h = 0; proc_control_B.i_h < 130; proc_control_B.i_h++)
    {
      J[proc_control_B.i_h + 139 * proc_control_B.Jx_tmp] = proc_control_B.Jx_c
        [130 * proc_control_B.i_h + proc_control_B.Jx_tmp];
    }

    std::memcpy(&J[proc_control_B.Jx_tmp * 139 + 130],
                &proc_control_B.Jmv_n[proc_control_B.Jx_tmp << 3], sizeof(real_T)
                << 3U);
    J[139 * proc_control_B.Jx_tmp + 138] = 0.0;
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_all_H4RNf0h2(const boolean_T x[130], boolean_T
  y[13])
{
  proc_control_B.i2_g = 1;
  for (proc_control_B.i_b = 0; proc_control_B.i_b < 13; proc_control_B.i_b++) {
    boolean_T exitg1;
    y[proc_control_B.i_b] = true;
    proc_control_B.a_du = proc_control_B.i2_g + 9;
    proc_control_B.ix_a = proc_control_B.i2_g;
    proc_control_B.i2_g += 10;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.ix_a <= proc_control_B.a_du)) {
      if (!x[proc_control_B.ix_a - 1]) {
        y[proc_control_B.i_b] = false;
        exitg1 = true;
      } else {
        proc_control_B.ix_a++;
      }
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
boolean_T proc_control::proc_control_any(const boolean_T x[26])
{
  int32_T k;
  boolean_T exitg1;
  boolean_T y;
  y = false;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k <= 25)) {
    if (x[k]) {
      y = true;
      exitg1 = true;
    } else {
      k++;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_mtimes_f(const real_T A_data[], const int32_T
  A_size[2], real_T C_data[], int32_T C_size[2])
{
  static const int8_T b[640]{ 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };

  proc_control_B.mc_i = A_size[0];
  C_size[0] = A_size[0];
  C_size[1] = 8;
  for (proc_control_B.j_b = 0; proc_control_B.j_b < 8; proc_control_B.j_b++) {
    proc_control_B.coffset_k = proc_control_B.j_b * proc_control_B.mc_i;
    proc_control_B.boffset_a = proc_control_B.j_b * 80;
    proc_control_B.i_kg = 0;
    while (proc_control_B.i_kg <= proc_control_B.mc_i - 1) {
      C_data[proc_control_B.coffset_k + proc_control_B.i_kg] = 0.0;
      proc_control_B.i_kg++;
    }

    for (proc_control_B.i_kg = 0; proc_control_B.i_kg < 80; proc_control_B.i_kg
         ++) {
      proc_control_B.aoffset_m = proc_control_B.i_kg * A_size[0];
      proc_control_B.bkj_c = b[proc_control_B.boffset_a + proc_control_B.i_kg];
      proc_control_B.b_i_l = 1;
      while (proc_control_B.b_i_l - 1 <= proc_control_B.mc_i - 1) {
        proc_control_B.i8 = (proc_control_B.coffset_k + proc_control_B.b_i_l) -
          1;
        C_data[proc_control_B.i8] += A_data[(proc_control_B.aoffset_m +
          proc_control_B.b_i_l) - 1] * static_cast<real_T>(proc_control_B.bkj_c);
        proc_control_B.b_i_l++;
      }
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_cont_znlmpc_reformJacobian(const real_T Jx_data[], const
  int32_T Jx_size[3], const real_T Jmv_data[], const real_T Je_data[], const
  int32_T *Je_size, real_T Jc_data[], int32_T Jc_size[2])
{
  if (Jx_size[0] == 0) {
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    proc_control_B.Jx_j[0] = static_cast<int16_T>(Jx_size[0]);
    proc_control_B.Jx_j[1] = 130;
    proc_control_B.varargin_1_size_idx_1_tmp = static_cast<int16_T>(Jx_size[0]);
    for (proc_control_B.i7 = 0; proc_control_B.i7 <
         proc_control_B.varargin_1_size_idx_1_tmp; proc_control_B.i7++) {
      for (proc_control_B.i6 = 0; proc_control_B.i6 < 130; proc_control_B.i6++)
      {
        proc_control_B.varargin_1_data[proc_control_B.i6 + 130 *
          proc_control_B.i7] = Jx_data[proc_control_B.Jx_j[0] *
          proc_control_B.i6 + proc_control_B.i7];
      }
    }

    proc_control_B.Jx_p[0] = Jx_size[0];
    proc_control_B.Jx_p[1] = 80;
    proc_control_mtimes_f(Jmv_data, proc_control_B.Jx_p,
                          proc_control_B.tmp_data_dy, proc_control_B.tmp_size_b);
    proc_control_B.varargin_1_size_idx_1_tmp = proc_control_B.tmp_size_b[0];
    for (proc_control_B.i7 = 0; proc_control_B.i7 <
         proc_control_B.varargin_1_size_idx_1_tmp; proc_control_B.i7++) {
      for (proc_control_B.i6 = 0; proc_control_B.i6 < 8; proc_control_B.i6++) {
        proc_control_B.varargin_2_data_l[proc_control_B.i6 + (proc_control_B.i7 <<
          3)] = proc_control_B.tmp_data_dy[proc_control_B.tmp_size_b[0] *
          proc_control_B.i6 + proc_control_B.i7];
      }
    }

    proc_control_B.Jx_j[0] = 130;
    proc_control_B.Jx_j[1] = static_cast<int16_T>(Jx_size[0]);
    if (proc_control_B.tmp_size_b[0] != 0) {
      proc_control_B.varargin_2[0] = 8;
    } else {
      proc_control_B.varargin_2[0] = 0;
    }

    proc_control_B.varargin_2[1] = static_cast<int16_T>(Jx_size[0]);
    proc_control_B.varargin_1_size_idx_1_tmp = *Je_size;
    if (proc_control_B.varargin_1_size_idx_1_tmp - 1 >= 0) {
      std::memcpy(&proc_control_B.Je_data[0], &Je_data[0],
                  proc_control_B.varargin_1_size_idx_1_tmp * sizeof(real_T));
    }

    proc_control_B.Je_g[0] = (*Je_size != 0);
    proc_control_B.Je_g[1] = static_cast<int16_T>(Jx_size[0]);
    Jc_size[0] = (proc_control_B.varargin_2[0] + proc_control_B.Je_g[0]) + 130;
    Jc_size[1] = static_cast<int16_T>(Jx_size[0]);
    proc_control_B.varargin_1_size_idx_1_tmp = static_cast<int16_T>(Jx_size[0]);
    for (proc_control_B.i7 = 0; proc_control_B.i7 <
         proc_control_B.varargin_1_size_idx_1_tmp; proc_control_B.i7++) {
      for (proc_control_B.i6 = 0; proc_control_B.i6 < 130; proc_control_B.i6++)
      {
        Jc_data[proc_control_B.i6 + Jc_size[0] * proc_control_B.i7] =
          proc_control_B.varargin_1_data[proc_control_B.Jx_j[0] *
          proc_control_B.i7 + proc_control_B.i6];
      }
    }

    proc_control_B.varargin_1_size_idx_1_tmp = static_cast<int16_T>(Jx_size[0]);
    proc_control_B.loop_ub_i = proc_control_B.varargin_2[0];
    for (proc_control_B.i7 = 0; proc_control_B.i7 <
         proc_control_B.varargin_1_size_idx_1_tmp; proc_control_B.i7++) {
      for (proc_control_B.i6 = 0; proc_control_B.i6 < proc_control_B.loop_ub_i;
           proc_control_B.i6++) {
        Jc_data[(proc_control_B.i6 + Jc_size[0] * proc_control_B.i7) + 130] =
          proc_control_B.varargin_2_data_l[proc_control_B.varargin_2[0] *
          proc_control_B.i7 + proc_control_B.i6];
      }
    }

    proc_control_B.varargin_1_size_idx_1_tmp = static_cast<int16_T>(Jx_size[0]);
    if (proc_control_B.Je_g[0] - 1 >= 0) {
      for (proc_control_B.i7 = 0; proc_control_B.i7 <
           proc_control_B.varargin_1_size_idx_1_tmp; proc_control_B.i7++) {
        Jc_data[(proc_control_B.varargin_2[0] + Jc_size[0] * proc_control_B.i7)
          + 130] = proc_control_B.Je_data[proc_control_B.Je_g[0] *
          proc_control_B.i7];
      }
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_outputBounds(const real_T runtimedata_OutputMin
  [130], const real_T runtimedata_OutputMax[130], const real_T X[143], real_T e,
  real_T c_data[], int32_T c_size[2], real_T Jc_data[], int32_T Jc_size[2])
{
  boolean_T exitg1;
  for (proc_control_B.i_a = 0; proc_control_B.i_a < 130; proc_control_B.i_a++) {
    proc_control_B.bv2[proc_control_B.i_a] = std::isinf
      (runtimedata_OutputMin[proc_control_B.i_a]);
  }

  proc_control_all_H4RNf0h2(proc_control_B.bv2, proc_control_B.x_n);
  proc_control_B.y_h = true;
  proc_control_B.d_k = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.d_k < 13)) {
    if (!proc_control_B.x_n[proc_control_B.d_k]) {
      proc_control_B.y_h = false;
      exitg1 = true;
    } else {
      proc_control_B.d_k++;
    }
  }

  if (proc_control_B.y_h) {
    for (proc_control_B.i_a = 0; proc_control_B.i_a < 130; proc_control_B.i_a++)
    {
      proc_control_B.bv2[proc_control_B.i_a] = std::isinf
        (runtimedata_OutputMax[proc_control_B.i_a]);
    }

    proc_control_all_H4RNf0h2(proc_control_B.bv2, proc_control_B.x_n);
    proc_control_B.d_k = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.d_k < 13)) {
      if (!proc_control_B.x_n[proc_control_B.d_k]) {
        proc_control_B.y_h = false;
        exitg1 = true;
      } else {
        proc_control_B.d_k++;
      }
    }
  }

  if (proc_control_B.y_h) {
    c_size[0] = 0;
    c_size[1] = 0;
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    for (proc_control_B.i_a = 0; proc_control_B.i_a < 260; proc_control_B.i_a++)
    {
      proc_control_B.b_c_f[proc_control_B.i_a] = 0.0;
      proc_control_B.icf_n[proc_control_B.i_a] = true;
    }

    std::memset(&proc_control_B.Jx[0], 0, 33800U * sizeof(real_T));
    std::memset(&proc_control_B.Je[0], 0, 260U * sizeof(int8_T));
    for (proc_control_B.i_a = 0; proc_control_B.i_a < 13; proc_control_B.i_a++)
    {
      proc_control_B.ic_i[proc_control_B.i_a] = static_cast<real_T>
        (proc_control_B.i_a) + 1.0;
    }

    for (proc_control_B.d_k = 0; proc_control_B.d_k < 10; proc_control_B.d_k++)
    {
      for (proc_control_B.i_a = 0; proc_control_B.i_a < 13; proc_control_B.i_a++)
      {
        proc_control_B.runtimedata_OutputMin_g = runtimedata_OutputMin[10 *
          proc_control_B.i_a + proc_control_B.d_k];
        proc_control_B.icf_n[static_cast<int32_T>
          (proc_control_B.ic_i[proc_control_B.i_a]) - 1] = ((!std::isinf
          (proc_control_B.runtimedata_OutputMin_g)) && (!std::isnan
          (proc_control_B.runtimedata_OutputMin_g)));
      }

      for (proc_control_B.i_a = 0; proc_control_B.i_a < 13; proc_control_B.i_a++)
      {
        proc_control_B.runtimedata_OutputMin_g =
          proc_control_B.ic_i[proc_control_B.i_a];
        proc_control_B.runtimedata_OutputMax_l = runtimedata_OutputMax[10 *
          proc_control_B.i_a + proc_control_B.d_k];
        proc_control_B.icf_n[static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_g + 13.0) - 1] = ((!std::isinf
          (proc_control_B.runtimedata_OutputMax_l)) && (!std::isnan
          (proc_control_B.runtimedata_OutputMax_l)));
        proc_control_B.ic_p[proc_control_B.i_a] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_g) - 1;
        proc_control_B.ic_p[proc_control_B.i_a + 13] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_g + 13.0) - 1;
      }

      for (proc_control_B.i_a = 0; proc_control_B.i_a < 26; proc_control_B.i_a++)
      {
        proc_control_B.icf_a[proc_control_B.i_a] =
          proc_control_B.icf_n[proc_control_B.ic_p[proc_control_B.i_a]];
      }

      if (proc_control_any(proc_control_B.icf_a)) {
        std::memset(&proc_control_B.Ck[0], 0, 169U * sizeof(int8_T));
        for (proc_control_B.c_k = 0; proc_control_B.c_k < 13; proc_control_B.c_k
             ++) {
          proc_control_B.Ck[proc_control_B.c_k + 13 * proc_control_B.c_k] = 1;
          proc_control_B.b_c_f[static_cast<int32_T>
            (proc_control_B.ic_i[proc_control_B.c_k]) - 1] =
            (runtimedata_OutputMin[10 * proc_control_B.c_k + proc_control_B.d_k]
             - e) - X[(11 * proc_control_B.c_k + proc_control_B.d_k) + 1];
        }

        for (proc_control_B.i_a = 0; proc_control_B.i_a < 13; proc_control_B.i_a
             ++) {
          proc_control_B.b_c_f[static_cast<int32_T>
            (proc_control_B.ic_i[proc_control_B.i_a] + 13.0) - 1] = (X[(11 *
            proc_control_B.i_a + proc_control_B.d_k) + 1] -
            runtimedata_OutputMax[10 * proc_control_B.i_a + proc_control_B.d_k])
            - e;
        }

        for (proc_control_B.i_a = 0; proc_control_B.i_a < 169;
             proc_control_B.i_a++) {
          proc_control_B.val[proc_control_B.i_a] = static_cast<int8_T>
            (-proc_control_B.Ck[proc_control_B.i_a]);
        }

        for (proc_control_B.c_k = 0; proc_control_B.c_k < 13; proc_control_B.c_k
             ++) {
          for (proc_control_B.i_a = 0; proc_control_B.i_a < 13;
               proc_control_B.i_a++) {
            proc_control_B.Jx[((static_cast<int32_T>
                                (proc_control_B.ic_i[proc_control_B.i_a]) + 260 *
                                proc_control_B.c_k) + 3380 * proc_control_B.d_k)
              - 1] = proc_control_B.val[13 * proc_control_B.c_k +
              proc_control_B.i_a];
          }
        }

        for (proc_control_B.c_k = 0; proc_control_B.c_k < 13; proc_control_B.c_k
             ++) {
          for (proc_control_B.i_a = 0; proc_control_B.i_a < 13;
               proc_control_B.i_a++) {
            proc_control_B.Jx[((static_cast<int32_T>
                                (proc_control_B.ic_i[proc_control_B.i_a] + 13.0)
                                + 260 * proc_control_B.c_k) + 3380 *
                               proc_control_B.d_k) - 1] = proc_control_B.Ck[13 *
              proc_control_B.c_k + proc_control_B.i_a];
          }

          proc_control_B.Je[static_cast<int32_T>
            (proc_control_B.ic_i[proc_control_B.c_k]) - 1] = -1;
        }

        for (proc_control_B.i_a = 0; proc_control_B.i_a < 13; proc_control_B.i_a
             ++) {
          proc_control_B.Je[static_cast<int32_T>
            (proc_control_B.ic_i[proc_control_B.i_a] + 13.0) - 1] = -1;
        }
      }

      for (proc_control_B.i_a = 0; proc_control_B.i_a < 13; proc_control_B.i_a++)
      {
        proc_control_B.ic_i[proc_control_B.i_a] += 26.0;
      }
    }

    proc_control_B.d_k = 0;
    for (proc_control_B.c_k = 0; proc_control_B.c_k < 260; proc_control_B.c_k++)
    {
      if (proc_control_B.icf_n[proc_control_B.c_k]) {
        proc_control_B.d_k++;
      }
    }

    proc_control_B.b_size_idx_0_m = proc_control_B.d_k;
    proc_control_B.d_k = 0;
    for (proc_control_B.c_k = 0; proc_control_B.c_k < 260; proc_control_B.c_k++)
    {
      if (proc_control_B.icf_n[proc_control_B.c_k]) {
        proc_control_B.b_data_m[proc_control_B.d_k] = static_cast<int16_T>
          (proc_control_B.c_k + 1);
        proc_control_B.d_k++;
      }
    }

    for (proc_control_B.i_a = 0; proc_control_B.i_a <
         proc_control_B.b_size_idx_0_m; proc_control_B.i_a++) {
      proc_control_B.b_c_data_i[proc_control_B.i_a] =
        proc_control_B.b_c_f[proc_control_B.b_data_m[proc_control_B.i_a] - 1];
    }

    c_size[0] = proc_control_B.b_size_idx_0_m;
    c_size[1] = 1;
    if (proc_control_B.b_size_idx_0_m - 1 >= 0) {
      std::memcpy(&c_data[0], &proc_control_B.b_c_data_i[0],
                  proc_control_B.b_size_idx_0_m * sizeof(real_T));
    }

    proc_control_B.d_k = 0;
    for (proc_control_B.c_k = 0; proc_control_B.c_k < 260; proc_control_B.c_k++)
    {
      if (proc_control_B.icf_n[proc_control_B.c_k]) {
        proc_control_B.d_k++;
      }
    }

    proc_control_B.b_size_idx_0_m = proc_control_B.d_k;
    proc_control_B.d_k = 0;
    for (proc_control_B.c_k = 0; proc_control_B.c_k < 260; proc_control_B.c_k++)
    {
      if (proc_control_B.icf_n[proc_control_B.c_k]) {
        proc_control_B.d_data[proc_control_B.d_k] = static_cast<int16_T>
          (proc_control_B.c_k + 1);
        proc_control_B.d_k++;
      }
    }

    proc_control_B.Jx_size[0] = proc_control_B.b_size_idx_0_m;
    proc_control_B.Jx_size[1] = 13;
    proc_control_B.Jx_size[2] = 10;
    for (proc_control_B.i_a = 0; proc_control_B.i_a < 10; proc_control_B.i_a++)
    {
      for (proc_control_B.d_k = 0; proc_control_B.d_k < 13; proc_control_B.d_k++)
      {
        for (proc_control_B.c_k = 0; proc_control_B.c_k <
             proc_control_B.b_size_idx_0_m; proc_control_B.c_k++) {
          proc_control_B.Jx_data[(proc_control_B.c_k +
            proc_control_B.b_size_idx_0_m * proc_control_B.d_k) +
            proc_control_B.b_size_idx_0_m * 13 * proc_control_B.i_a] =
            proc_control_B.Jx[((260 * proc_control_B.d_k +
                                proc_control_B.d_data[proc_control_B.c_k]) +
                               3380 * proc_control_B.i_a) - 1];
        }
      }

      for (proc_control_B.d_k = 0; proc_control_B.d_k < 8; proc_control_B.d_k++)
      {
        for (proc_control_B.c_k = 0; proc_control_B.c_k <
             proc_control_B.b_size_idx_0_m; proc_control_B.c_k++) {
          proc_control_B.tmp_data[(proc_control_B.c_k +
            proc_control_B.b_size_idx_0_m * proc_control_B.d_k) +
            (proc_control_B.b_size_idx_0_m << 3) * proc_control_B.i_a] = 0.0;
        }
      }
    }

    proc_control_B.b_c_size = proc_control_B.b_size_idx_0_m;
    for (proc_control_B.i_a = 0; proc_control_B.i_a <
         proc_control_B.b_size_idx_0_m; proc_control_B.i_a++) {
      proc_control_B.b_c_data_i[proc_control_B.i_a] =
        proc_control_B.Je[proc_control_B.d_data[proc_control_B.i_a] - 1];
    }

    proc_cont_znlmpc_reformJacobian(proc_control_B.Jx_data,
      proc_control_B.Jx_size, proc_control_B.tmp_data, proc_control_B.b_c_data_i,
      &proc_control_B.b_c_size, Jc_data, Jc_size);
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_co_eML_blk_kernel_anonFcn2(const real_T runtimedata_x[13],
  const real_T runtimedata_OutputMin[130], const real_T runtimedata_OutputMax
  [130], const real_T z[139], real_T varargout_1_data[], int32_T
  varargout_1_size[2], real_T varargout_2[130], real_T varargout_3_data[],
  int32_T varargout_3_size[2], real_T varargout_4[18070])
{
  proc_control_znlmpc_getXUe(z, runtimedata_x, proc_control_B.X_a,
    proc_control_B.U_o, &proc_control_B.e_m);
  proc_co_stateEvolution_p6X6Q73G(proc_control_B.X_a, proc_control_B.U_o,
    varargout_2, varargout_4);
  proc_control_outputBounds(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_B.X_a, proc_control_B.e_m, proc_control_B.varargin_1_data_ip,
    proc_control_B.varargin_1_size_k, proc_control_B.b_varargin_1_data,
    proc_control_B.b_varargin_1_size);
  proc_control_B.sizes_idx_1_d = ((proc_control_B.varargin_1_size_k[0] != 0) &&
    (proc_control_B.varargin_1_size_k[1] != 0));
  if (proc_control_B.sizes_idx_1_d == 0) {
    proc_control_B.sizes_idx_0_f = proc_control_B.varargin_1_size_k[0];
  } else if ((proc_control_B.varargin_1_size_k[0] != 0) &&
             (proc_control_B.varargin_1_size_k[1] != 0)) {
    proc_control_B.sizes_idx_0_f = proc_control_B.varargin_1_size_k[0];
  } else {
    proc_control_B.sizes_idx_0_f = 0;
  }

  varargout_1_size[0] = proc_control_B.sizes_idx_0_f;
  varargout_1_size[1] = proc_control_B.sizes_idx_1_d;
  if ((proc_control_B.sizes_idx_1_d - 1 >= 0) && (proc_control_B.sizes_idx_0_f -
       1 >= 0)) {
    std::memcpy(&varargout_1_data[0], &proc_control_B.varargin_1_data_ip[0],
                proc_control_B.sizes_idx_0_f * sizeof(real_T));
  }

  if ((proc_control_B.b_varargin_1_size[0] != 0) &&
      (proc_control_B.b_varargin_1_size[1] != 0)) {
    proc_control_B.sizes_idx_1_d = static_cast<uint8_T>
      (proc_control_B.b_varargin_1_size[0]);
  } else {
    proc_control_B.sizes_idx_1_d = 0U;
  }

  varargout_3_size[0] = proc_control_B.sizes_idx_1_d;
  if (proc_control_B.sizes_idx_1_d == 0) {
    varargout_3_size[1] = proc_control_B.b_varargin_1_size[1];
    proc_control_B.sizes = static_cast<int16_T>
      (proc_control_B.b_varargin_1_size[1]);
  } else if ((proc_control_B.b_varargin_1_size[0] != 0) &&
             (proc_control_B.b_varargin_1_size[1] != 0)) {
    varargout_3_size[1] = proc_control_B.b_varargin_1_size[1];
    proc_control_B.sizes = static_cast<int16_T>
      (proc_control_B.b_varargin_1_size[1]);
  } else {
    varargout_3_size[1] = 0;
    proc_control_B.sizes = 0;
  }

  proc_control_B.sizes_idx_0_f = proc_control_B.sizes_idx_1_d *
    proc_control_B.sizes;
  if (proc_control_B.sizes_idx_0_f - 1 >= 0) {
    std::memcpy(&varargout_3_data[0], &proc_control_B.b_varargin_1_data[0],
                proc_control_B.sizes_idx_0_f * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_factoryConstruct(int32_T nVarMax, int32_T
  mConstrMax, int32_T mIneq, int32_T mNonlinIneq,
  s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *obj)
{
  obj->nVarMax = nVarMax;
  obj->mNonlinIneq = mNonlinIneq;
  obj->mNonlinEq = 130;
  obj->mIneq = mIneq;
  obj->mEq = 130;
  obj->iNonIneq0 = (mIneq - mNonlinIneq) + 1;
  obj->iNonEq0 = 1;
  obj->sqpFval = 0.0;
  obj->sqpFval_old = 0.0;
  obj->cIneq.size = mIneq;
  obj->cIneq_old.size = mIneq;
  obj->grad.size = nVarMax;
  obj->grad_old.size = nVarMax;
  obj->FunctionEvaluations = 0;
  obj->sqpIterations = 0;
  obj->sqpExitFlag = 0;
  obj->lambdasqp.size = mConstrMax;
  if (mConstrMax - 1 >= 0) {
    std::memset(&obj->lambdasqp.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->lambdaStopTest.size = mConstrMax;
  obj->lambdaStopTestPrev.size = mConstrMax;
  obj->steplength = 1.0;
  obj->delta_x.size = nVarMax;
  if (nVarMax - 1 >= 0) {
    std::memset(&obj->delta_x.data[0], 0, nVarMax * sizeof(real_T));
  }

  obj->socDirection.size = nVarMax;
  obj->workingset_old.size = mConstrMax;
  if (mNonlinIneq > 0) {
    obj->JacCineqTrans_old.size[0] = nVarMax;
    obj->JacCineqTrans_old.size[1] = mNonlinIneq;
  } else {
    obj->JacCineqTrans_old.size[0] = 0;
    obj->JacCineqTrans_old.size[1] = 0;
  }

  obj->JacCeqTrans_old.size[0] = nVarMax;
  obj->JacCeqTrans_old.size[1] = 130;
  obj->gradLag.size = nVarMax;
  obj->delta_gradLag.size = nVarMax;
  obj->xstar.size = nVarMax;
  obj->fstar = 0.0;
  obj->firstorderopt = 0.0;
  obj->lambda.size = mConstrMax;
  if (mConstrMax - 1 >= 0) {
    std::memset(&obj->lambda.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->state = 0;
  obj->maxConstr = 0.0;
  obj->iterations = 0;
  obj->searchDir.size = nVarMax;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_cont_factoryConstruct_lnz4(int32_T MaxVars, int32_T
  *obj_grad_size, int32_T *obj_Hx_size, boolean_T *obj_hasLinear, int32_T
  *obj_nvar, int32_T *obj_maxVar, real_T *obj_beta, real_T *obj_rho, int32_T
  *obj_objtype, int32_T *obj_prev_objtype, int32_T *obj_prev_nvar, boolean_T
  *obj_prev_hasLinear, real_T *obj_gammaScalar)
{
  *obj_grad_size = MaxVars;
  *obj_Hx_size = MaxVars - 1;
  *obj_hasLinear = false;
  *obj_nvar = 0;
  *obj_maxVar = MaxVars;
  *obj_beta = 0.0;
  *obj_rho = 0.0;
  *obj_objtype = 3;
  *obj_prev_objtype = 3;
  *obj_prev_nvar = 0;
  *obj_prev_hasLinear = false;
  *obj_gammaScalar = 0.0;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_con_factoryConstruct_lnz42(int32_T mIneqMax, int32_T
  nVarMax, int32_T mConstrMax, s_gnTVUZmGpKWoq4tCE9AGn_proc__T *obj)
{
  obj->mConstr = 0;
  obj->mConstrOrig = 0;
  obj->mConstrMax = mConstrMax;
  obj->nVar = 139;
  obj->nVarOrig = 139;
  obj->nVarMax = nVarMax;
  obj->ldA = nVarMax;
  obj->Aineq.size = mIneqMax * nVarMax;
  obj->bineq.size = mIneqMax;
  obj->Aeq.size = 130 * nVarMax;
  obj->lb.size = nVarMax;
  obj->ub.size = nVarMax;
  obj->indexLB.size = nVarMax;
  obj->indexUB.size = nVarMax;
  obj->indexFixed.size = nVarMax;
  obj->mEqRemoved = 0;
  obj->ATwset.size = nVarMax * mConstrMax;
  obj->bwset.size = mConstrMax;
  obj->nActiveConstr = 0;
  obj->maxConstrWorkspace.size = mConstrMax;
  for (int32_T i{0}; i < 5; i++) {
    obj->sizes[i] = 0;
    obj->sizesNormal[i] = 0;
    obj->sizesPhaseOne[i] = 0;
    obj->sizesRegularized[i] = 0;
    obj->sizesRegPhaseOne[i] = 0;
  }

  for (int32_T i{0}; i < 6; i++) {
    obj->isActiveIdx[i] = 0;
    obj->isActiveIdxNormal[i] = 0;
    obj->isActiveIdxPhaseOne[i] = 0;
    obj->isActiveIdxRegularized[i] = 0;
    obj->isActiveIdxRegPhaseOne[i] = 0;
  }

  obj->isActiveConstr.size = mConstrMax;
  obj->Wid.size = mConstrMax;
  obj->Wlocalidx.size = mConstrMax;
  for (int32_T i{0}; i < 5; i++) {
    obj->nWConstr[i] = 0;
  }

  obj->probType = 3;
  obj->SLACK0 = 1.0E-5;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_loadProblem(s_gnTVUZmGpKWoq4tCE9AGn_proc__T *obj,
  int32_T mIneq, int32_T mLinIneq, const real_T Aineq_data[], int32_T mLB,
  int32_T mUB, int32_T mFixed, int32_T mConstrMax)
{
  int32_T b_idx_col;
  int32_T k;
  b_idx_col = mIneq + mLB;
  k = ((b_idx_col + mUB) + mFixed) + 130;
  obj->mConstr = k;
  obj->mConstrOrig = k;
  obj->mConstrMax = mConstrMax;
  obj->sizes[0] = mFixed;
  obj->sizes[1] = 130;
  obj->sizes[2] = mIneq;
  obj->sizes[3] = mLB;
  obj->sizes[4] = mUB;
  for (k = 0; k < 5; k++) {
    obj->sizesNormal[k] = obj->sizes[k];
  }

  obj->sizesPhaseOne[0] = mFixed;
  obj->sizesPhaseOne[1] = 130;
  obj->sizesPhaseOne[2] = mIneq;
  obj->sizesPhaseOne[3] = mLB + 1;
  obj->sizesPhaseOne[4] = mUB;
  obj->sizesRegularized[0] = mFixed;
  obj->sizesRegularized[1] = 130;
  obj->sizesRegularized[2] = mIneq;
  obj->sizesRegularized[3] = b_idx_col + 260;
  obj->sizesRegularized[4] = mUB;
  obj->sizesRegPhaseOne[0] = mFixed;
  obj->sizesRegPhaseOne[1] = 130;
  obj->sizesRegPhaseOne[2] = mIneq;
  obj->sizesRegPhaseOne[3] = b_idx_col + 261;
  obj->sizesRegPhaseOne[4] = mUB;
  obj->isActiveIdxNormal[0] = 1;
  obj->isActiveIdxNormal[1] = mFixed;
  obj->isActiveIdxNormal[2] = 130;
  obj->isActiveIdxNormal[3] = mIneq;
  obj->isActiveIdxNormal[4] = mLB;
  obj->isActiveIdxNormal[5] = mUB;
  for (k = 0; k < 6; k++) {
    obj->isActiveIdxRegPhaseOne[k] = obj->isActiveIdxNormal[k];
  }

  for (k = 0; k < 5; k++) {
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  for (k = 0; k < 6; k++) {
    obj->isActiveIdx[k] = obj->isActiveIdxRegPhaseOne[k];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = mLB + 1;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (k = 0; k < 5; k++) {
    obj->isActiveIdxNormal[k + 1] += obj->isActiveIdxNormal[k];
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  for (k = 0; k < 6; k++) {
    obj->isActiveIdxPhaseOne[k] = obj->isActiveIdxRegPhaseOne[k];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = b_idx_col + 260;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (k = 0; k < 5; k++) {
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  for (k = 0; k < 6; k++) {
    obj->isActiveIdxRegularized[k] = obj->isActiveIdxRegPhaseOne[k];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = b_idx_col + 261;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (k = 0; k < 5; k++) {
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  if (mIneq > 0) {
    for (b_idx_col = 0; b_idx_col < mLinIneq; b_idx_col++) {
      for (k = 0; k < 139; k++) {
        obj->Aineq.data[k + obj->ldA * b_idx_col] = Aineq_data[mLinIneq * k +
          b_idx_col];
      }
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
int32_T proc_control::proc_contr_checkVectorNonFinite(int32_T N, const real_T
  vec_data[], int32_T iv0)
{
  int32_T idx_current;
  int32_T idx_end;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = iv0 - 2;
  idx_end = (iv0 + N) - 1;
  while (allFinite && (idx_current + 2 <= idx_end)) {
    real_T allFinite_tmp;
    allFinite_tmp = vec_data[idx_current + 1];
    allFinite = ((!std::isinf(allFinite_tmp)) && (!std::isnan(allFinite_tmp)));
    idx_current++;
  }

  if (!allFinite) {
    if (std::isnan(vec_data[idx_current])) {
      status = -3;
    } else if (vec_data[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::computeObjectiveAndUserGradient(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T x[139], real_T
  grad_workspace_data[], real_T *fval, int32_T *status)
{
  static const int8_T b[640]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T c[169]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  proc_control_znlmpc_getXUe(x, obj_objfun_workspace_runtimedat,
    proc_control_B.X_g, proc_control_B.U_k, &proc_control_B.e_e);
  std::memset(&proc_control_B.gfX[0], 0, 130U * sizeof(real_T));
  std::memset(&proc_control_B.gfU[0], 0, 80U * sizeof(real_T));
  proc_control_B.fs_c = 0.0;
  for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 13; proc_control_B.i_mc++)
  {
    proc_control_B.ix[proc_control_B.i_mc] = static_cast<real_T>
      (proc_control_B.i_mc) + 1.0;
  }

  for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 8; proc_control_B.i_mc++)
  {
    proc_control_B.iu[proc_control_B.i_mc] = static_cast<real_T>
      (proc_control_B.i_mc) + 1.0;
  }

  for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 11; proc_control_B.i_mc++)
  {
    for (proc_control_B.obj_objfun_workspace_runtimed_h = 0;
         proc_control_B.obj_objfun_workspace_runtimed_h < 13;
         proc_control_B.obj_objfun_workspace_runtimed_h++) {
      proc_control_B.b_X_e[proc_control_B.obj_objfun_workspace_runtimed_h + 13 *
        proc_control_B.i_mc] = proc_control_B.X_g[11 *
        proc_control_B.obj_objfun_workspace_runtimed_h + proc_control_B.i_mc];
    }

    for (proc_control_B.obj_objfun_workspace_runtimed_h = 0;
         proc_control_B.obj_objfun_workspace_runtimed_h < 8;
         proc_control_B.obj_objfun_workspace_runtimed_h++) {
      proc_control_B.b_U_i[proc_control_B.obj_objfun_workspace_runtimed_h +
        (proc_control_B.i_mc << 3)] = proc_control_B.U_k[11 *
        proc_control_B.obj_objfun_workspace_runtimed_h + proc_control_B.i_mc];
    }
  }

  for (proc_control_B.i_kw = 0; proc_control_B.i_kw < 10; proc_control_B.i_kw++)
  {
    proc_control_B.wtYerr_m = 0.0;
    for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 13; proc_control_B.i_mc
         ++) {
      proc_control_B.obj_objfun_workspace_runtimed_h = 10 * proc_control_B.i_mc
        + proc_control_B.i_kw;
      proc_control_B.obj_objfun_workspace_runtimed_o =
        obj_objfun_workspace_runtimed_2[proc_control_B.obj_objfun_workspace_runtimed_h];
      proc_control_B.wtYerr_a = (proc_control_B.b_X_e[(proc_control_B.i_kw + 1) *
        13 + proc_control_B.i_mc] -
        obj_objfun_workspace_runtimed_1[proc_control_B.obj_objfun_workspace_runtimed_h])
        * proc_control_B.obj_objfun_workspace_runtimed_o;
      proc_control_B.wtYerr_m += proc_control_B.wtYerr_a *
        proc_control_B.wtYerr_a;
      proc_control_B.obj_objfun_workspace_runtimedat[proc_control_B.i_mc] =
        proc_control_B.obj_objfun_workspace_runtimed_o * proc_control_B.wtYerr_a;
    }

    proc_control_B.fs_c += proc_control_B.wtYerr_m;
    for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 13; proc_control_B.i_mc
         ++) {
      proc_control_B.wtYerr_m = 0.0;
      for (proc_control_B.obj_objfun_workspace_runtimed_h = 0;
           proc_control_B.obj_objfun_workspace_runtimed_h < 13;
           proc_control_B.obj_objfun_workspace_runtimed_h++) {
        proc_control_B.wtYerr_m += static_cast<real_T>(c[13 *
          proc_control_B.obj_objfun_workspace_runtimed_h + proc_control_B.i_mc])
          * proc_control_B.obj_objfun_workspace_runtimedat[proc_control_B.obj_objfun_workspace_runtimed_h];
      }

      proc_control_B.gfX_d[proc_control_B.i_mc] = proc_control_B.gfX[
        static_cast<int32_T>(proc_control_B.ix[proc_control_B.i_mc]) - 1] +
        proc_control_B.wtYerr_m;
    }

    for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 13; proc_control_B.i_mc
         ++) {
      proc_control_B.gfX[static_cast<int32_T>
        (proc_control_B.ix[proc_control_B.i_mc]) - 1] =
        proc_control_B.gfX_d[proc_control_B.i_mc];
    }

    for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 13; proc_control_B.i_mc
         ++) {
      proc_control_B.ix[proc_control_B.i_mc] += 13.0;
    }

    std::memcpy(&proc_control_B.umvk_f[0],
                &proc_control_B.b_U_i[proc_control_B.i_kw << 3], sizeof(real_T) <<
                3U);
    if (proc_control_B.i_kw + 1 == 1) {
      for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 8; proc_control_B.i_mc
           ++) {
        proc_control_B.duk_c[proc_control_B.i_mc] =
          proc_control_B.umvk_f[proc_control_B.i_mc] -
          obj_objfun_workspace_runtimed_0[proc_control_B.i_mc];
      }
    } else {
      for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 8; proc_control_B.i_mc
           ++) {
        proc_control_B.duk_c[proc_control_B.i_mc] =
          proc_control_B.umvk_f[proc_control_B.i_mc] - proc_control_B.b_U_i
          [((proc_control_B.i_kw - 1) << 3) + proc_control_B.i_mc];
      }
    }

    for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 8; proc_control_B.i_mc++)
    {
      proc_control_B.obj_objfun_workspace_runtimed_h = 10 * proc_control_B.i_mc
        + proc_control_B.i_kw;
      proc_control_B.obj_objfun_workspace_runtimed_o =
        obj_objfun_workspace_runtimed_3[proc_control_B.obj_objfun_workspace_runtimed_h];
      proc_control_B.wtYerr_m = (proc_control_B.umvk_f[proc_control_B.i_mc] -
        obj_objfun_workspace_runtimed_5[proc_control_B.obj_objfun_workspace_runtimed_h])
        * proc_control_B.obj_objfun_workspace_runtimed_o;
      proc_control_B.gfU_f[proc_control_B.i_mc] = proc_control_B.gfU[
        static_cast<int32_T>(proc_control_B.iu[proc_control_B.i_mc]) - 1] +
        proc_control_B.obj_objfun_workspace_runtimed_o * proc_control_B.wtYerr_m;
      proc_control_B.umvk_f[proc_control_B.i_mc] = proc_control_B.wtYerr_m;
    }

    proc_control_B.wtYerr_m = 0.0;
    proc_control_B.obj_objfun_workspace_runtimed_o = 0.0;
    for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 8; proc_control_B.i_mc++)
    {
      proc_control_B.wtYerr_a = proc_control_B.umvk_f[proc_control_B.i_mc];
      proc_control_B.obj_objfun_workspace_runtimed_j =
        obj_objfun_workspace_runtimed_4[10 * proc_control_B.i_mc +
        proc_control_B.i_kw];
      proc_control_B.gfU[static_cast<int32_T>
        (proc_control_B.iu[proc_control_B.i_mc]) - 1] =
        proc_control_B.gfU_f[proc_control_B.i_mc];
      proc_control_B.duk_g = proc_control_B.obj_objfun_workspace_runtimed_j *
        proc_control_B.duk_c[proc_control_B.i_mc];
      proc_control_B.wtYerr_m += proc_control_B.wtYerr_a *
        proc_control_B.wtYerr_a;
      proc_control_B.obj_objfun_workspace_runtimed_o += proc_control_B.duk_g *
        proc_control_B.duk_g;
      proc_control_B.umvk_f[proc_control_B.i_mc] =
        proc_control_B.obj_objfun_workspace_runtimed_j * proc_control_B.duk_g;
      proc_control_B.duk_c[proc_control_B.i_mc] = proc_control_B.duk_g;
    }

    proc_control_B.fs_c = (proc_control_B.fs_c + proc_control_B.wtYerr_m) +
      proc_control_B.obj_objfun_workspace_runtimed_o;
    for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 8; proc_control_B.i_mc++)
    {
      proc_control_B.gfU_f[proc_control_B.i_mc] = proc_control_B.gfU[
        static_cast<int32_T>(proc_control_B.iu[proc_control_B.i_mc]) - 1] +
        proc_control_B.umvk_f[proc_control_B.i_mc];
    }

    for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 8; proc_control_B.i_mc++)
    {
      proc_control_B.gfU[static_cast<int32_T>
        (proc_control_B.iu[proc_control_B.i_mc]) - 1] =
        proc_control_B.gfU_f[proc_control_B.i_mc];
    }

    if (proc_control_B.i_kw + 1 > 1) {
      for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 8; proc_control_B.i_mc
           ++) {
        proc_control_B.gfU_tmp[proc_control_B.i_mc] = static_cast<int32_T>
          (proc_control_B.iu[proc_control_B.i_mc] - 8.0);
      }

      for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 8; proc_control_B.i_mc
           ++) {
        proc_control_B.gfU_f[proc_control_B.i_mc] =
          proc_control_B.gfU[proc_control_B.gfU_tmp[proc_control_B.i_mc] - 1] -
          proc_control_B.umvk_f[proc_control_B.i_mc];
      }

      for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 8; proc_control_B.i_mc
           ++) {
        proc_control_B.gfU[proc_control_B.gfU_tmp[proc_control_B.i_mc] - 1] =
          proc_control_B.gfU_f[proc_control_B.i_mc];
      }
    }

    for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 8; proc_control_B.i_mc++)
    {
      proc_control_B.iu[proc_control_B.i_mc] += 8.0;
    }
  }

  *fval = 100000.0 * proc_control_B.e_e * proc_control_B.e_e +
    proc_control_B.fs_c;
  for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 8; proc_control_B.i_mc++)
  {
    proc_control_B.wtYerr_m = 0.0;
    proc_control_B.obj_objfun_workspace_runtimed_h = 0;
    for (proc_control_B.i_kw = 0; proc_control_B.i_kw < 80; proc_control_B.i_kw
         ++) {
      proc_control_B.wtYerr_m += static_cast<real_T>
        (b[proc_control_B.obj_objfun_workspace_runtimed_h + proc_control_B.i_mc])
        * (2.0 * proc_control_B.gfU[proc_control_B.i_kw]);
      proc_control_B.obj_objfun_workspace_runtimed_h += 8;
    }

    proc_control_B.iu[proc_control_B.i_mc] = proc_control_B.wtYerr_m;
  }

  for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 130; proc_control_B.i_mc++)
  {
    proc_control_B.b_x[proc_control_B.i_mc] = 2.0 *
      proc_control_B.gfX[proc_control_B.i_mc];
  }

  std::memcpy(&proc_control_B.b_x[130], &proc_control_B.iu[0], sizeof(real_T) <<
              3U);
  proc_control_B.b_x[138] = 200000.0 * proc_control_B.e_e;
  std::memcpy(&grad_workspace_data[0], &proc_control_B.b_x[0], 139U * sizeof
              (real_T));
  if (std::isinf(*fval) || std::isnan(*fval)) {
    if (std::isnan(*fval)) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    *status = proc_contr_checkVectorNonFinite(139, grad_workspace_data, 1);
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
int32_T proc_control::proc_contr_checkMatrixNonFinite(int32_T ncols, const
  real_T mat_data[], int32_T col0, int32_T ldm)
{
  int32_T col;
  int32_T col_end;
  int32_T idx_mat;
  int32_T row;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  row = -1;
  col = col0;
  col_end = (col0 + ncols) - 1;
  while (allFinite && (col <= col_end)) {
    row = -1;
    while (allFinite && (row + 2 <= 139)) {
      idx_mat = ((col - 1) * ldm + row) + 1;
      allFinite = ((!std::isinf(mat_data[idx_mat])) && (!std::isnan
        (mat_data[idx_mat])));
      row++;
    }

    col++;
  }

  if (!allFinite) {
    idx_mat = (col - 2) * ldm + row;
    if (std::isnan(mat_data[idx_mat])) {
      status = -3;
    } else if (mat_data[idx_mat] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S196>/NLMPC'
int32_T proc_control::computeConstraintsAndUserJacobi(const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[139],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130],
  real_T JacIneqTrans_workspace_data[], int32_T iJI_col, int32_T ldJI, real_T
  JacEqTrans_workspace_data[], int32_T ldJE)
{
  int32_T status;
  if (obj_mCineq > 0) {
    proc_co_eML_blk_kernel_anonFcn2(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_B.a__3_data, proc_control_B.a__3_size, proc_control_B.b_x_a,
      proc_control_B.a__4_data, proc_control_B.a__4_size,
      proc_control_B.JacEqTrans_tmp);
    proc_control_B.b_k_d = 0;
    while (proc_control_B.b_k_d <= obj_mCineq - 1) {
      Cineq_workspace_data[(ineq0 + proc_control_B.b_k_d) - 1] =
        proc_control_B.a__3_data[proc_control_B.b_k_d];
      proc_control_B.b_k_d++;
    }

    std::memcpy(&Ceq_workspace[0], &proc_control_B.b_x_a[0], 130U * sizeof
                (real_T));
    proc_control_B.b_k_d = 0;
    while (proc_control_B.b_k_d <= proc_control_B.a__4_size[0] - 1) {
      proc_control_B.c_idx_col = 0;
      while (proc_control_B.c_idx_col <= proc_control_B.a__4_size[1] - 1) {
        JacIneqTrans_workspace_data[proc_control_B.b_k_d + ldJI * ((iJI_col +
          proc_control_B.c_idx_col) - 1)] =
          proc_control_B.a__4_data[proc_control_B.a__4_size[0] *
          proc_control_B.c_idx_col + proc_control_B.b_k_d];
        proc_control_B.c_idx_col++;
      }

      proc_control_B.b_k_d++;
    }

    for (proc_control_B.b_k_d = 0; proc_control_B.b_k_d < 139;
         proc_control_B.b_k_d++) {
      for (proc_control_B.c_idx_col = 0; proc_control_B.c_idx_col < 130;
           proc_control_B.c_idx_col++) {
        JacEqTrans_workspace_data[proc_control_B.b_k_d + ldJE *
          proc_control_B.c_idx_col] = proc_control_B.JacEqTrans_tmp[139 *
          proc_control_B.c_idx_col + proc_control_B.b_k_d];
      }
    }
  } else {
    proc_co_eML_blk_kernel_anonFcn2(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_B.a__3_data, proc_control_B.a__3_size, proc_control_B.b_x_a,
      proc_control_B.a__4_data, proc_control_B.a__4_size,
      proc_control_B.JacEqTrans_tmp);
    std::memcpy(&Ceq_workspace[0], &proc_control_B.b_x_a[0], 130U * sizeof
                (real_T));
    for (proc_control_B.b_k_d = 0; proc_control_B.b_k_d < 139;
         proc_control_B.b_k_d++) {
      for (proc_control_B.c_idx_col = 0; proc_control_B.c_idx_col < 130;
           proc_control_B.c_idx_col++) {
        JacEqTrans_workspace_data[proc_control_B.b_k_d + ldJE *
          proc_control_B.c_idx_col] = proc_control_B.JacEqTrans_tmp[139 *
          proc_control_B.c_idx_col + proc_control_B.b_k_d];
      }
    }
  }

  status = proc_contr_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
    ineq0);
  if (status == 1) {
    status = checkVectorNonFinite_2JllBqp7(Ceq_workspace);
    if (status == 1) {
      status = proc_contr_checkMatrixNonFinite(obj_mCineq,
        JacIneqTrans_workspace_data, iJI_col, ldJI);
      if (status == 1) {
        status = proc_contr_checkMatrixNonFinite(130, JacEqTrans_workspace_data,
          1, ldJE);
      }
    }
  }

  return status;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::evalObjAndConstrAndDerivatives(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[139],
  real_T grad_workspace_data[], real_T Cineq_workspace_data[], int32_T ineq0,
  real_T Ceq_workspace[130], real_T JacIneqTrans_workspace_data[], int32_T
  iJI_col, int32_T ldJI, real_T JacEqTrans_workspace_data[], int32_T ldJE,
  real_T *fval, int32_T *status)
{
  computeObjectiveAndUserGradient(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x,
    grad_workspace_data, fval, status);
  if (*status == 1) {
    *status = computeConstraintsAndUserJacobi(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1,
      obj_mCineq, x, Cineq_workspace_data, ineq0, Ceq_workspace,
      JacIneqTrans_workspace_data, iJI_col, ldJI, JacEqTrans_workspace_data,
      ldJE);
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_c_updateWorkingSetForNewQP(const real_T xk[139],
  s_gnTVUZmGpKWoq4tCE9AGn_proc__T *WorkingSet, int32_T mIneq, const real_T
  cIneq_data[], const real_T cEq[130], int32_T mLB, const real_T lb[139],
  int32_T mUB, int32_T mFixed)
{
  int32_T iEq0;
  int32_T iw0;
  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (int32_T b_idx{0}; b_idx < 130; b_idx++) {
    WorkingSet->beq[b_idx] = -cEq[b_idx];
    WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
    std::memcpy(&WorkingSet->ATwset.data[iw0], &WorkingSet->Aeq.data[iEq0], 139U
                * sizeof(real_T));
    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (int32_T b_idx{0}; b_idx < mIneq; b_idx++) {
    WorkingSet->bineq.data[b_idx] = -cIneq_data[b_idx];
  }

  for (int32_T b_idx{0}; b_idx < mLB; b_idx++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[b_idx] - 1] = -lb
      [WorkingSet->indexLB.data[b_idx] - 1] + xk[WorkingSet->indexLB.data[b_idx]
      - 1];
  }

  for (int32_T b_idx{0}; b_idx < mUB; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[b_idx] - 1];
  }

  for (int32_T b_idx{0}; b_idx < mFixed; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[b_idx] - 1];
    WorkingSet->bwset.data[b_idx] = (rtInf) - xk[WorkingSet->
      indexFixed.data[b_idx] - 1];
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_co_modifyOverheadPhaseOne_
  (s_gnTVUZmGpKWoq4tCE9AGn_proc__T *obj)
{
  for (int32_T idx{0}; idx < obj->sizes[0]; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * idx) - 1] = 0.0;
  }

  for (int32_T idx{0}; idx < 130; idx++) {
    int32_T idxEq;
    idxEq = (obj->ldA * idx + obj->nVar) - 1;
    obj->Aeq.data[idxEq] = 0.0;
    obj->ATwset.data[idxEq + obj->ldA * (obj->isActiveIdx[1] - 1)] = 0.0;
  }

  for (int32_T idx{0}; idx < obj->sizes[2]; idx++) {
    obj->Aineq.data[(obj->nVar + obj->ldA * idx) - 1] = -1.0;
  }

  obj->indexLB.data[obj->sizes[3] - 1] = obj->nVar;
  obj->lb.data[obj->nVar - 1] = 1.0E-5;
  for (int32_T idx{obj->isActiveIdx[2]}; idx <= obj->nActiveConstr; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * (idx - 1)) - 1] = -1.0;
  }

  if (obj->nWConstr[4] > 0) {
    for (int32_T idx{0}; idx <= obj->sizesNormal[4]; idx++) {
      obj->isActiveConstr.data[(obj->isActiveIdx[4] + idx) - 1] = false;
    }
  }

  obj->isActiveConstr.data[obj->isActiveIdx[4] - 2] = false;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_setProblemType(s_gnTVUZmGpKWoq4tCE9AGn_proc__T
  *obj, int32_T PROBLEM_TYPE)
{
  switch (PROBLEM_TYPE) {
   case 3:
    obj->nVar = 139;
    obj->mConstr = obj->mConstrOrig;
    if (obj->nWConstr[4] > 0) {
      for (int32_T mIneq{-1}; mIneq < obj->sizesNormal[4] - 1; mIneq++) {
        obj->isActiveConstr.data[obj->isActiveIdxNormal[4] + mIneq] =
          obj->isActiveConstr.data[obj->isActiveIdx[4] + mIneq];
      }
    }

    for (int32_T d_idx_row{0}; d_idx_row < 5; d_idx_row++) {
      obj->sizes[d_idx_row] = obj->sizesNormal[d_idx_row];
    }

    for (int32_T d_idx_row{0}; d_idx_row < 6; d_idx_row++) {
      obj->isActiveIdx[d_idx_row] = obj->isActiveIdxNormal[d_idx_row];
    }
    break;

   case 1:
    obj->nVar = 140;
    obj->mConstr = obj->mConstrOrig + 1;
    for (int32_T d_idx_row{0}; d_idx_row < 5; d_idx_row++) {
      obj->sizes[d_idx_row] = obj->sizesPhaseOne[d_idx_row];
    }

    for (int32_T d_idx_row{0}; d_idx_row < 6; d_idx_row++) {
      obj->isActiveIdx[d_idx_row] = obj->isActiveIdxPhaseOne[d_idx_row];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    break;

   case 2:
    {
      int32_T d_idx_row;
      obj->nVar = obj->nVarMax - 1;
      obj->mConstr = obj->mConstrMax - 1;
      for (d_idx_row = 0; d_idx_row < 5; d_idx_row++) {
        obj->sizes[d_idx_row] = obj->sizesRegularized[d_idx_row];
      }

      if (obj->probType != 4) {
        int32_T c_idx;
        int32_T colOffsetATw;
        int32_T colOffsetAeq;
        int32_T mIneq;
        mIneq = obj->sizes[2] + 140;
        for (c_idx = 0; c_idx < obj->sizes[0]; c_idx++) {
          colOffsetATw = obj->ldA * c_idx;
          for (colOffsetAeq = 140; colOffsetAeq <= obj->nVar; colOffsetAeq++) {
            obj->ATwset.data[(colOffsetAeq + colOffsetATw) - 1] = 0.0;
          }
        }

        for (colOffsetATw = 0; colOffsetATw <= mIneq - 141; colOffsetATw++) {
          c_idx = obj->ldA * colOffsetATw - 1;
          for (d_idx_row = 140; d_idx_row <= colOffsetATw + 139; d_idx_row++) {
            obj->Aineq.data[d_idx_row + c_idx] = 0.0;
          }

          obj->Aineq.data[(colOffsetATw + c_idx) + 140] = -1.0;
          for (colOffsetAeq = colOffsetATw + 141; colOffsetAeq <= obj->nVar;
               colOffsetAeq++) {
            obj->Aineq.data[colOffsetAeq + c_idx] = 0.0;
          }
        }

        for (c_idx = 0; c_idx < 130; c_idx++) {
          int32_T b_tmp;
          colOffsetAeq = obj->ldA * c_idx - 1;
          colOffsetATw = (obj->isActiveIdx[1] - 1) * obj->ldA + colOffsetAeq;
          for (d_idx_row = 140; d_idx_row < mIneq; d_idx_row++) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
          }

          d_idx_row = mIneq;
          b_tmp = mIneq + c_idx;
          while (d_idx_row <= b_tmp - 1) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
            d_idx_row++;
          }

          obj->Aeq.data[b_tmp + colOffsetAeq] = -1.0;
          obj->ATwset.data[b_tmp + colOffsetATw] = -1.0;
          for (d_idx_row = b_tmp + 1; d_idx_row <= mIneq + 129; d_idx_row++) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
          }

          d_idx_row = mIneq + 130;
          b_tmp = mIneq + c_idx;
          while (d_idx_row <= b_tmp + 129) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
            d_idx_row++;
          }

          obj->Aeq.data[((mIneq + c_idx) + colOffsetAeq) + 130] = 1.0;
          d_idx_row = mIneq + c_idx;
          obj->ATwset.data[(d_idx_row + colOffsetATw) + 130] = 1.0;
          for (d_idx_row += 131; d_idx_row <= obj->nVar; d_idx_row++) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
          }
        }

        colOffsetATw = 139;
        for (c_idx = obj->sizesNormal[3]; c_idx < obj->sizesRegularized[3];
             c_idx++) {
          colOffsetATw++;
          obj->indexLB.data[c_idx] = colOffsetATw;
        }

        if (obj->nWConstr[4] > 0) {
          for (colOffsetATw = -1; colOffsetATw < obj->sizesRegularized[4] - 1;
               colOffsetATw++) {
            obj->isActiveConstr.data[(obj->isActiveIdxRegularized[4] +
              colOffsetATw) + 1] = obj->isActiveConstr.data[obj->isActiveIdx[4]
              + colOffsetATw];
          }
        }

        for (colOffsetATw = obj->isActiveIdx[4]; colOffsetATw <
             obj->isActiveIdxRegularized[4]; colOffsetATw++) {
          obj->isActiveConstr.data[colOffsetATw - 1] = false;
        }

        for (colOffsetATw = 140; colOffsetATw <= mIneq + 259; colOffsetATw++) {
          obj->lb.data[colOffsetATw - 1] = 0.0;
        }

        for (mIneq = obj->isActiveIdx[2] - 1; mIneq < obj->nActiveConstr; mIneq
             ++) {
          colOffsetATw = obj->ldA * mIneq - 1;
          if (obj->Wid.data[mIneq] == 3) {
            for (c_idx = 140; c_idx <= obj->Wlocalidx.data[mIneq] + 138; c_idx++)
            {
              obj->ATwset.data[c_idx + colOffsetATw] = 0.0;
            }

            obj->ATwset.data[(obj->Wlocalidx.data[mIneq] + colOffsetATw) + 139] =
              -1.0;
            for (c_idx = obj->Wlocalidx.data[mIneq] + 140; c_idx <= obj->nVar;
                 c_idx++) {
              obj->ATwset.data[c_idx + colOffsetATw] = 0.0;
            }
          } else {
            for (c_idx = 140; c_idx <= obj->nVar; c_idx++) {
              obj->ATwset.data[c_idx + colOffsetATw] = 0.0;
            }
          }
        }
      }

      for (d_idx_row = 0; d_idx_row < 6; d_idx_row++) {
        obj->isActiveIdx[d_idx_row] = obj->isActiveIdxRegularized[d_idx_row];
      }
    }
    break;

   default:
    obj->nVar = obj->nVarMax;
    obj->mConstr = obj->mConstrMax;
    for (int32_T d_idx_row{0}; d_idx_row < 5; d_idx_row++) {
      obj->sizes[d_idx_row] = obj->sizesRegPhaseOne[d_idx_row];
    }

    for (int32_T d_idx_row{0}; d_idx_row < 6; d_idx_row++) {
      obj->isActiveIdx[d_idx_row] = obj->isActiveIdxRegPhaseOne[d_idx_row];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    break;
  }

  obj->probType = PROBLEM_TYPE;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_initActiveSet(s_gnTVUZmGpKWoq4tCE9AGn_proc__T
  *obj)
{
  int32_T iATw0;
  int32_T iAeq0;
  int32_T nWFixed;
  proc_control_setProblemType(obj, 3);
  for (nWFixed = obj->isActiveIdx[2]; nWFixed <= obj->mConstrMax; nWFixed++) {
    obj->isActiveConstr.data[nWFixed - 1] = false;
  }

  obj->nWConstr[0] = obj->sizes[0];
  obj->nWConstr[1] = 130;
  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + 130;
  nWFixed = obj->sizes[0];
  for (int32_T b_idx_local{0}; b_idx_local < nWFixed; b_idx_local++) {
    obj->Wid.data[b_idx_local] = 1;
    obj->Wlocalidx.data[b_idx_local] = b_idx_local + 1;
    obj->isActiveConstr.data[b_idx_local] = true;
    iAeq0 = obj->ldA * b_idx_local - 1;
    for (iATw0 = 0; iATw0 <= obj->indexFixed.data[b_idx_local] - 2; iATw0++) {
      obj->ATwset.data[(iATw0 + iAeq0) + 1] = 0.0;
    }

    obj->ATwset.data[obj->indexFixed.data[b_idx_local] + iAeq0] = 1.0;
    for (iATw0 = obj->indexFixed.data[b_idx_local] + 1; iATw0 <= obj->nVar;
         iATw0++) {
      obj->ATwset.data[iATw0 + iAeq0] = 0.0;
    }

    obj->bwset.data[b_idx_local] = obj->ub.data[obj->indexFixed.data[b_idx_local]
      - 1];
  }

  for (int32_T b_idx_local{0}; b_idx_local < 130; b_idx_local++) {
    int32_T idx_global;
    idx_global = nWFixed + b_idx_local;
    obj->Wid.data[idx_global] = 2;
    obj->Wlocalidx.data[idx_global] = b_idx_local + 1;
    obj->isActiveConstr.data[idx_global] = true;
    iAeq0 = obj->ldA * b_idx_local;
    iATw0 = obj->ldA * idx_global;
    for (int32_T c_i{0}; c_i < obj->nVar; c_i++) {
      obj->ATwset.data[iATw0 + c_i] = obj->Aeq.data[iAeq0 + c_i];
    }

    obj->bwset.data[idx_global] = obj->beq[b_idx_local];
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_factoryConstruct_l(const
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *objfun_workspace_runtimedata, real_T
  objfun_workspace_userdata_Ts, const real_T objfun_workspace_userdata_Curre[13],
  const real_T objfun_workspace_userdata_LastM[8], const real_T
  objfun_workspace_userdata_Refer[130], const real_T
  objfun_workspace_userdata_MVTar[80], real_T objfun_workspace_userdata_Predi,
  real_T objfun_workspace_userdata_NumOf, real_T objfun_workspace_userdata_Num_0,
  real_T objfun_workspace_userdata_Num_1, const real_T
  objfun_workspace_userdata_MVInd[8], const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *nonlin_workspace_runtimedata, const s6FZHgorTEIlMmVIrDGGTjF_proc__T
  *nonlin_workspace_userdata, int32_T mCineq, const real_T lb[139],
  s_IDHIEhzA2KtfYk7ehxTmaH_proc_T *obj)
{
  int32_T i;
  boolean_T c;
  obj->objfun.workspace.runtimedata = *objfun_workspace_runtimedata;
  obj->objfun.workspace.userdata.Ts = objfun_workspace_userdata_Ts;
  std::memcpy(&obj->objfun.workspace.userdata.CurrentStates[0],
              &objfun_workspace_userdata_Curre[0], 13U * sizeof(real_T));
  std::memcpy(&obj->objfun.workspace.userdata.LastMV[0],
              &objfun_workspace_userdata_LastM[0], sizeof(real_T) << 3U);
  std::memcpy(&obj->objfun.workspace.userdata.References[0],
              &objfun_workspace_userdata_Refer[0], 130U * sizeof(real_T));
  std::memcpy(&obj->objfun.workspace.userdata.MVTarget[0],
              &objfun_workspace_userdata_MVTar[0], 80U * sizeof(real_T));
  obj->objfun.workspace.userdata.PredictionHorizon =
    objfun_workspace_userdata_Predi;
  obj->objfun.workspace.userdata.NumOfStates = objfun_workspace_userdata_NumOf;
  obj->objfun.workspace.userdata.NumOfOutputs = objfun_workspace_userdata_Num_0;
  obj->objfun.workspace.userdata.NumOfInputs = objfun_workspace_userdata_Num_1;
  std::memcpy(&obj->objfun.workspace.userdata.MVIndex[0],
              &objfun_workspace_userdata_MVInd[0], sizeof(real_T) << 3U);
  obj->nonlin.workspace.runtimedata = *nonlin_workspace_runtimedata;
  obj->nonlin.workspace.userdata = *nonlin_workspace_userdata;
  obj->f_1 = 0.0;
  obj->cIneq_1.size = mCineq;
  obj->f_2 = 0.0;
  obj->cIneq_2.size = mCineq;
  obj->nVar = 139;
  obj->mIneq = mCineq;
  obj->mEq = 130;
  obj->numEvals = 0;
  obj->SpecifyObjectiveGradient = true;
  obj->SpecifyConstraintGradient = true;
  obj->isEmptyNonlcon = false;
  obj->FiniteDifferenceType = 0;
  c = false;
  i = 0;
  while ((!c) && (i + 1 <= 139)) {
    obj->hasLB[i] = ((!std::isinf(lb[i])) && (!std::isnan(lb[i])));
    obj->hasUB[i] = false;
    c = obj->hasLB[i];
    i++;
  }

  while (i + 1 <= 139) {
    obj->hasLB[i] = ((!std::isinf(lb[i])) && (!std::isnan(lb[i])));
    obj->hasUB[i] = false;
    i++;
  }

  obj->hasBounds = c;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_contro_factoryConstruct_ln(int32_T maxRows, int32_T
  maxCols, int32_T *obj_ldq, int32_T obj_QR_size[2], real_T obj_Q_data[],
  int32_T obj_Q_size[2], int32_T obj_jpvt_data[], int32_T *obj_jpvt_size,
  int32_T *obj_mrows, int32_T *obj_ncols, int32_T *obj_tau_size, int32_T
  *obj_minRowCol, boolean_T *obj_usedPivoting)
{
  int32_T loop_ub;
  *obj_ldq = maxRows;
  obj_QR_size[0] = maxRows;
  obj_QR_size[1] = maxCols;
  obj_Q_size[0] = maxRows;
  obj_Q_size[1] = maxRows;
  loop_ub = maxRows * maxRows - 1;
  if (loop_ub >= 0) {
    std::memset(&obj_Q_data[0], 0, (loop_ub + 1) * sizeof(real_T));
  }

  *obj_jpvt_size = maxCols;
  if (maxCols - 1 >= 0) {
    std::memset(&obj_jpvt_data[0], 0, maxCols * sizeof(int32_T));
  }

  *obj_mrows = 0;
  *obj_ncols = 0;
  if (maxRows <= maxCols) {
    *obj_tau_size = maxRows;
  } else {
    *obj_tau_size = maxCols;
  }

  *obj_minRowCol = 0;
  *obj_usedPivoting = false;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_contr_factoryConstruct_lnz(int32_T MaxDims, int32_T
  obj_FMat_size[2], int32_T *obj_ldm, int32_T *obj_ndims, int32_T *obj_info,
  real_T *obj_scaleFactor, boolean_T *obj_ConvexCheck, real_T *obj_regTol_,
  real_T *obj_workspace_, real_T *obj_workspace2_)
{
  obj_FMat_size[0] = MaxDims;
  obj_FMat_size[1] = MaxDims;
  *obj_ldm = MaxDims;
  *obj_ndims = 0;
  *obj_info = 0;
  *obj_scaleFactor = 0.0;
  *obj_ConvexCheck = true;
  *obj_regTol_ = (rtInf);
  *obj_workspace_ = (rtInf);
  *obj_workspace2_ = (rtInf);
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgemv_m(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T iac;
    int32_T ix;
    ix = ix0;
    b = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      int32_T c;
      int32_T iy;
      iy = 0;
      c = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= c; ia++) {
        y_data[iy] += A_data[ia - 1] * x_data[ix - 1];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_computeGradLag(real_T workspace_data[], int32_T
  ldA, int32_T nVar, const real_T grad_data[], int32_T mIneq, const real_T
  AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
  int32_T iL0;
  for (iL0 = 0; iL0 < nVar; iL0++) {
    workspace_data[iL0] = grad_data[iL0];
  }

  for (iL0 = 0; iL0 < mFixed; iL0++) {
    workspace_data[finiteFixed_data[iL0] - 1] += lambda_data[iL0];
  }

  proc_control_xgemv_m(nVar, 130, AeqTrans_data, ldA, lambda_data, mFixed + 1,
                       workspace_data);
  proc_control_xgemv_m(nVar, mIneq, AineqTrans_data, ldA, lambda_data, mFixed +
                       131, workspace_data);
  iL0 = (mFixed + mIneq) + 130;
  for (int32_T c_idx{0}; c_idx < mLB; c_idx++) {
    workspace_data[finiteLB_data[c_idx] - 1] -= lambda_data[iL0];
    iL0++;
  }

  for (int32_T c_idx{0}; c_idx < mUB; c_idx++) {
    workspace_data[finiteUB_data[c_idx] - 1] += lambda_data[iL0];
    iL0++;
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
real_T proc_control::proc_con_computePrimalFeasError(const real_T x[139],
  int32_T mLinIneq, int32_T mNonlinIneq, const real_T cIneq_data[], const real_T
  cEq[130], const int32_T finiteLB_data[], int32_T mLB, const real_T lb[139],
  const int32_T finiteUB_data[], int32_T mUB)
{
  real_T feasError;
  int32_T mIneq;
  feasError = 0.0;
  mIneq = mNonlinIneq + mLinIneq;
  for (int32_T idx{0}; idx < 130; idx++) {
    feasError = std::fmax(feasError, std::abs(cEq[idx]));
  }

  for (int32_T idx{0}; idx < mIneq; idx++) {
    feasError = std::fmax(feasError, cIneq_data[idx]);
  }

  for (mIneq = 0; mIneq < mLB; mIneq++) {
    feasError = std::fmax(feasError, lb[finiteLB_data[mIneq] - 1] -
                          x[finiteLB_data[mIneq] - 1]);
  }

  for (mIneq = 0; mIneq < mUB; mIneq++) {
    feasError = std::fmax(feasError, x[finiteUB_data[mIneq] - 1] - (rtInf));
  }

  return feasError;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_contr_computeDualFeasError(int32_T nVar, const real_T
  gradLag_data[], boolean_T *gradOK, real_T *val)
{
  int32_T b_idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!std::isinf(gradLag_data[b_idx])) && (!std::isnan
                (gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      *val = std::fmax(*val, std::abs(gradLag_data[b_idx]));
      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_saveJacobian(s_VA2YLuOkHrWNKQO7FEpyoH_proc_T
  *obj, int32_T nVar, int32_T mIneq, const real_T JacCineqTrans_data[], int32_T
  ineqCol0, const real_T JacCeqTrans_data[], int32_T ldJ)
{
  int32_T b;
  int32_T iCol;
  int32_T iCol_old;
  iCol = (ineqCol0 - 1) * ldJ;
  iCol_old = -1;
  b = mIneq - ineqCol0;
  for (int32_T idx_col{0}; idx_col <= b; idx_col++) {
    int32_T loop_ub_tmp;
    int32_T y_size_idx_0;
    int32_T y_size_idx_1;
    y_size_idx_0 = obj->JacCineqTrans_old.size[0];
    y_size_idx_1 = obj->JacCineqTrans_old.size[1];
    loop_ub_tmp = obj->JacCineqTrans_old.size[0] * obj->JacCineqTrans_old.size[1];
    if (loop_ub_tmp - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data[0], &obj->JacCineqTrans_old.data[0],
                  loop_ub_tmp * sizeof(real_T));
    }

    for (loop_ub_tmp = 1; loop_ub_tmp - 1 < nVar; loop_ub_tmp++) {
      proc_control_B.y_data[iCol_old + loop_ub_tmp] = JacCineqTrans_data[(iCol +
        loop_ub_tmp) - 1];
    }

    obj->JacCineqTrans_old.size[1] = y_size_idx_1;
    y_size_idx_0 *= y_size_idx_1;
    if (y_size_idx_0 - 1 >= 0) {
      std::memcpy(&obj->JacCineqTrans_old.data[0], &proc_control_B.y_data[0],
                  y_size_idx_0 * sizeof(real_T));
    }

    iCol += ldJ;
    iCol_old += ldJ;
  }

  iCol = -1;
  iCol_old = -1;
  for (b = 0; b < 130; b++) {
    for (int32_T idx_col{1}; idx_col - 1 < nVar; idx_col++) {
      obj->JacCeqTrans_old.data[iCol_old + idx_col] = JacCeqTrans_data[iCol +
        idx_col];
    }

    iCol += ldJ;
    iCol_old += ldJ;
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_saveState(s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *obj)
{
  int32_T y_size_idx_0;
  obj->sqpFval_old = obj->sqpFval;
  for (int32_T k{0}; k < 139; k++) {
    obj->xstarsqp_old[k] = obj->xstarsqp[k];
    obj->grad_old.data[k] = obj->grad.data[k];
  }

  y_size_idx_0 = obj->cIneq_old.size;
  if (obj->cIneq_old.size - 1 >= 0) {
    std::memcpy(&proc_control_B.y_data_bn[0], &obj->cIneq_old.data[0],
                obj->cIneq_old.size * sizeof(real_T));
  }

  for (int32_T k{0}; k < obj->mIneq; k++) {
    proc_control_B.y_data_bn[k] = obj->cIneq.data[k];
  }

  if (y_size_idx_0 - 1 >= 0) {
    std::memcpy(&obj->cIneq_old.data[0], &proc_control_B.y_data_bn[0],
                y_size_idx_0 * sizeof(real_T));
  }

  std::memcpy(&obj->cEq_old[0], &obj->cEq[0], 130U * sizeof(real_T));
}

// Function for MATLAB Function: '<S196>/NLMPC'
real_T proc_control::proc_control_computeComplError(const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  const real_T xCurrent[139], int32_T mIneq, const real_T cIneq_data[], const
  int32_T finiteLB_data[], int32_T mLB, const real_T lb[139], const int32_T
  finiteUB_data[], int32_T mUB, const real_T lambda_data[], int32_T iL0)
{
  real_T nlpComplError;
  nlpComplError = 0.0;
  if ((mIneq + mLB) + mUB > 0) {
    real_T lbLambda;
    real_T ubLambda;
    int32_T iLineq0;
    int32_T lbOffset;
    int32_T mLinIneq;
    for (iLineq0 = 0; iLineq0 < *fscales_lineq_constraint_size; iLineq0++) {
      lbLambda = lambda_data[(iL0 + iLineq0) - 1];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(lbLambda *
        cIneq_data[iLineq0]), std::fmin(std::abs(cIneq_data[iLineq0]), lbLambda)));
    }

    iLineq0 = (iL0 + *fscales_lineq_constraint_size) - 2;
    for (lbOffset = 1; lbOffset - 1 < *fscales_cineq_constraint_size; lbOffset++)
    {
      lbLambda = lambda_data[iLineq0 + lbOffset];
      ubLambda = cIneq_data[(*fscales_lineq_constraint_size - 1) + lbOffset];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(ubLambda *
        lbLambda), std::fmin(std::abs(ubLambda), lbLambda)));
    }

    lbOffset = (iL0 + mIneq) - 1;
    mLinIneq = lbOffset + mLB;
    for (iLineq0 = 0; iLineq0 < mLB; iLineq0++) {
      ubLambda = xCurrent[finiteLB_data[iLineq0] - 1] - lb[finiteLB_data[iLineq0]
        - 1];
      lbLambda = lambda_data[lbOffset + iLineq0];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(ubLambda *
        lbLambda), std::fmin(std::abs(ubLambda), lbLambda)));
    }

    for (lbOffset = 0; lbOffset < mUB; lbOffset++) {
      ubLambda = lambda_data[mLinIneq + lbOffset];
      lbLambda = (rtInf) - xCurrent[finiteUB_data[lbOffset] - 1];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(lbLambda *
        ubLambda), std::fmin(lbLambda, ubLambda)));
    }
  }

  return nlpComplError;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgemv_mt(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T iac;
    int32_T ix;
    ix = ix0;
    b = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      int32_T c;
      int32_T iy;
      iy = 0;
      c = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= c; ia++) {
        y_data[iy] += A_data[ia - 1] * x_data[ix - 1];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_computeGradLag_b(real_T workspace_data[],
  int32_T ldA, int32_T nVar, const real_T grad_data[], int32_T mIneq, const
  real_T AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
  int32_T iL0;
  for (iL0 = 0; iL0 < nVar; iL0++) {
    workspace_data[iL0] = grad_data[iL0];
  }

  for (iL0 = 0; iL0 < mFixed; iL0++) {
    workspace_data[finiteFixed_data[iL0] - 1] += lambda_data[iL0];
  }

  proc_control_xgemv_mt(nVar, 130, AeqTrans_data, ldA, lambda_data, mFixed + 1,
                        workspace_data);
  proc_control_xgemv_mt(nVar, mIneq, AineqTrans_data, ldA, lambda_data, mFixed +
                        131, workspace_data);
  iL0 = (mFixed + mIneq) + 130;
  for (int32_T c_idx{0}; c_idx < mLB; c_idx++) {
    workspace_data[finiteLB_data[c_idx] - 1] -= lambda_data[iL0];
    iL0++;
  }

  for (int32_T c_idx{0}; c_idx < mUB; c_idx++) {
    workspace_data[finiteUB_data[c_idx] - 1] += lambda_data[iL0];
    iL0++;
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_con_computeDualFeasError_b(int32_T nVar, const real_T
  gradLag_data[], boolean_T *gradOK, real_T *val)
{
  int32_T b_idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!std::isinf(gradLag_data[b_idx])) && (!std::isnan
                (gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      *val = std::fmax(*val, std::abs(gradLag_data[b_idx]));
      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_updateWorkingSetForNewQP_l(const real_T xk[139],
  s_gnTVUZmGpKWoq4tCE9AGn_proc__T *WorkingSet, int32_T mIneq, int32_T
  mNonlinIneq, const real_T cIneq_data[], const real_T cEq[130], int32_T mLB,
  const real_T lb[139], int32_T mUB, int32_T mFixed)
{
  int32_T iEq0;
  int32_T iw0;
  int32_T nVar;
  nVar = WorkingSet->nVar - 1;
  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (int32_T b_idx{0}; b_idx < 130; b_idx++) {
    WorkingSet->beq[b_idx] = -cEq[b_idx];
    WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
    for (int32_T i{0}; i <= nVar; i++) {
      WorkingSet->ATwset.data[iw0 + i] = WorkingSet->Aeq.data[iEq0 + i];
    }

    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (iw0 = 0; iw0 < mIneq; iw0++) {
    WorkingSet->bineq.data[iw0] = -cIneq_data[iw0];
  }

  for (iw0 = 0; iw0 < mLB; iw0++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[iw0] - 1] = -lb
      [WorkingSet->indexLB.data[iw0] - 1] + xk[WorkingSet->indexLB.data[iw0] - 1];
  }

  for (iw0 = 0; iw0 < mUB; iw0++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[iw0] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[iw0] - 1];
  }

  for (iw0 = 0; iw0 < mFixed; iw0++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[iw0] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[iw0] - 1];
    WorkingSet->bwset.data[iw0] = (rtInf) - xk[WorkingSet->indexFixed.data[iw0]
      - 1];
  }

  if (WorkingSet->nActiveConstr > mFixed + 130) {
    for (int32_T b_idx{mFixed + 130}; b_idx < WorkingSet->nActiveConstr; b_idx++)
    {
      switch (WorkingSet->Wid.data[b_idx]) {
       case 4:
        WorkingSet->bwset.data[b_idx] = WorkingSet->lb.data
          [WorkingSet->indexLB.data[WorkingSet->Wlocalidx.data[b_idx] - 1] - 1];
        break;

       case 5:
        WorkingSet->bwset.data[b_idx] = WorkingSet->ub.data
          [WorkingSet->indexUB.data[WorkingSet->Wlocalidx.data[b_idx] - 1] - 1];
        break;

       default:
        WorkingSet->bwset.data[b_idx] = WorkingSet->bineq.data
          [WorkingSet->Wlocalidx.data[b_idx] - 1];
        if ((mNonlinIneq > 0) && (WorkingSet->Wlocalidx.data[b_idx] >=
             mNonlinIneq)) {
          iw0 = WorkingSet->ldA * b_idx;
          iEq0 = (WorkingSet->Wlocalidx.data[b_idx] - 1) * WorkingSet->ldA;
          for (int32_T i{1}; i - 1 <= nVar; i++) {
            WorkingSet->ATwset.data[(iw0 + i) - 1] = WorkingSet->Aineq.data
              [(iEq0 + i) - 1];
          }
        }
        break;
      }
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
real_T proc_control::proc_control_xnrm2(int32_T n, const real_T x_data[],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x_data[ix0 - 1]);
    } else {
      real_T scale;
      int32_T kend;
      scale = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        real_T absxk;
        absxk = std::abs(x_data[k - 1]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * std::sqrt(y);
    }
  }

  return y;
}

real_T proc_control::proc_control_rt_hypotd_snf(real_T u0, real_T u1)
{
  real_T y;
  proc_control_B.a_g = std::abs(u0);
  y = std::abs(u1);
  if (proc_control_B.a_g < y) {
    proc_control_B.a_g /= y;
    y *= std::sqrt(proc_control_B.a_g * proc_control_B.a_g + 1.0);
  } else if (proc_control_B.a_g > y) {
    y /= proc_control_B.a_g;
    y = std::sqrt(y * y + 1.0) * proc_control_B.a_g;
  } else if (!std::isnan(y)) {
    y = proc_control_B.a_g * 1.4142135623730951;
  }

  return y;
}

// Function for MATLAB Function: '<S196>/NLMPC'
real_T proc_control::proc_control_xzlarfg(int32_T n, real_T *alpha1, real_T
  x_data[], int32_T ix0)
{
  real_T tau;
  tau = 0.0;
  if (n > 0) {
    real_T xnorm;
    xnorm = proc_control_xnrm2(n - 1, x_data, ix0);
    if (xnorm != 0.0) {
      xnorm = proc_control_rt_hypotd_snf(*alpha1, xnorm);
      if (*alpha1 >= 0.0) {
        xnorm = -xnorm;
      }

      if (std::abs(xnorm) < 1.0020841800044864E-292) {
        real_T a;
        int32_T c_k;
        int32_T knt;
        knt = 0;
        c_k = (ix0 + n) - 2;
        do {
          knt++;
          for (int32_T b_k{ix0}; b_k <= c_k; b_k++) {
            x_data[b_k - 1] *= 9.9792015476736E+291;
          }

          xnorm *= 9.9792015476736E+291;
          *alpha1 *= 9.9792015476736E+291;
        } while ((std::abs(xnorm) < 1.0020841800044864E-292) && (knt < 20));

        xnorm = proc_control_rt_hypotd_snf(*alpha1, proc_control_xnrm2(n - 1,
          x_data, ix0));
        if (*alpha1 >= 0.0) {
          xnorm = -xnorm;
        }

        tau = (xnorm - *alpha1) / xnorm;
        a = 1.0 / (*alpha1 - xnorm);
        for (int32_T b_k{ix0}; b_k <= c_k; b_k++) {
          x_data[b_k - 1] *= a;
        }

        for (c_k = 0; c_k < knt; c_k++) {
          xnorm *= 1.0020841800044864E-292;
        }

        *alpha1 = xnorm;
      } else {
        real_T a;
        int32_T knt;
        tau = (xnorm - *alpha1) / xnorm;
        a = 1.0 / (*alpha1 - xnorm);
        knt = (ix0 + n) - 2;
        for (int32_T c_k{ix0}; c_k <= knt; c_k++) {
          x_data[c_k - 1] *= a;
        }

        *alpha1 = xnorm;
      }
    }
  }

  return tau;
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_xgemv(int32_T b_m, int32_T n, const real_T
  b_A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0,
  real_T y_data[])
{
  if (n != 0) {
    proc_control_B.b_iy_a = 0;
    while (proc_control_B.b_iy_a <= n - 1) {
      y_data[proc_control_B.b_iy_a] = 0.0;
      proc_control_B.b_iy_a++;
    }

    proc_control_B.b_iy_a = 0;
    proc_control_B.b_d = (n - 1) * lda + ia0;
    proc_control_B.iac_e = ia0;
    while (((lda > 0) && (proc_control_B.iac_e <= proc_control_B.b_d)) || ((lda <
             0) && (proc_control_B.iac_e >= proc_control_B.b_d))) {
      proc_control_B.ix_oz = ix0;
      proc_control_B.c_g = 0.0;
      proc_control_B.d_iz = (proc_control_B.iac_e + b_m) - 1;
      proc_control_B.ia_b = proc_control_B.iac_e;
      while (proc_control_B.ia_b <= proc_control_B.d_iz) {
        proc_control_B.c_g += b_A_data[proc_control_B.ia_b - 1] *
          x_data[proc_control_B.ix_oz - 1];
        proc_control_B.ix_oz++;
        proc_control_B.ia_b++;
      }

      y_data[proc_control_B.b_iy_a] += proc_control_B.c_g;
      proc_control_B.b_iy_a++;
      proc_control_B.iac_e += lda;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgerc_e(int32_T m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y_data[], real_T A_data[], int32_T ia0, int32_T lda)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y_data[jy] != 0.0) {
        real_T temp;
        int32_T b;
        int32_T ijA;
        int32_T ix;
        temp = y_data[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A_data[ijA] += A_data[ix - 1] * temp;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += lda;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xzlarf(int32_T m, int32_T n, int32_T iv0, real_T
  tau, real_T C_data[], int32_T ic0, int32_T ldc, real_T work_data[])
{
  int32_T lastc;
  int32_T lastv;
  if (tau != 0.0) {
    boolean_T exitg2;
    lastv = m;
    lastc = iv0 + m;
    while ((lastv > 0) && (C_data[lastc - 2] == 0.0)) {
      lastv--;
      lastc--;
    }

    lastc = n;
    exitg2 = false;
    while ((!exitg2) && (lastc > 0)) {
      int32_T coltop;
      int32_T exitg1;
      int32_T ia;
      coltop = (lastc - 1) * ldc + ic0;
      ia = coltop;
      do {
        exitg1 = 0;
        if (ia <= (coltop + lastv) - 1) {
          if (C_data[ia - 1] != 0.0) {
            exitg1 = 1;
          } else {
            ia++;
          }
        } else {
          lastc--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    lastv = 0;
    lastc = 0;
  }

  if (lastv > 0) {
    proc_control_xgemv(lastv, lastc, C_data, ic0, ldc, C_data, iv0, work_data);
    proc_control_xgerc_e(lastv, lastc, -tau, iv0, work_data, C_data, ic0, ldc);
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_qrf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[])
{
  real_T b_atmp;
  int32_T ii;
  int32_T lda;
  lda = A_size[0];
  ii = A_size[1];
  if (ii - 1 >= 0) {
    std::memset(&proc_control_B.work_data[0], 0, ii * sizeof(real_T));
  }

  for (int32_T i{0}; i < nfxd; i++) {
    int32_T mmi;
    ii = i * lda + i;
    mmi = m - i;
    if (i + 1 < m) {
      b_atmp = A_data[ii];
      tau_data[i] = proc_control_xzlarfg(mmi, &b_atmp, A_data, ii + 2);
      A_data[ii] = b_atmp;
    } else {
      tau_data[i] = 0.0;
    }

    if (i + 1 < n) {
      b_atmp = A_data[ii];
      A_data[ii] = 1.0;
      proc_control_xzlarf(mmi, (n - i) - 1, ii + 1, tau_data[i], A_data, (ii +
        lda) + 1, lda, proc_control_B.work_data);
      A_data[ii] = b_atmp;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xswap(int32_T n, real_T x_data[], int32_T ix0,
  int32_T iy0)
{
  int32_T ix;
  int32_T iy;
  ix = ix0 - 1;
  iy = iy0 - 1;
  for (int32_T k{0}; k < n; k++) {
    real_T temp;
    temp = x_data[ix];
    x_data[ix] = x_data[iy];
    x_data[iy] = temp;
    ix++;
    iy++;
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_qrpf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[], int32_T jpvt_data[])
{
  real_T smax;
  int32_T loop_ub;
  int32_T ma;
  int32_T minmn;
  ma = A_size[0];
  if (m <= n) {
    minmn = m;
  } else {
    minmn = n;
  }

  loop_ub = A_size[1];
  if (loop_ub - 1 >= 0) {
    std::memset(&proc_control_B.work_data_l[0], 0, loop_ub * sizeof(real_T));
  }

  loop_ub = A_size[1];
  if (loop_ub - 1 >= 0) {
    std::memset(&proc_control_B.vn1_data[0], 0, loop_ub * sizeof(real_T));
  }

  loop_ub = A_size[1];
  if (loop_ub - 1 >= 0) {
    std::memset(&proc_control_B.vn2_data[0], 0, loop_ub * sizeof(real_T));
  }

  for (int32_T j{nfxd}; j < n; j++) {
    proc_control_B.vn1_data[j] = proc_control_xnrm2(m - nfxd, A_data, (j * ma +
      nfxd) + 1);
    proc_control_B.vn2_data[j] = proc_control_B.vn1_data[j];
  }

  for (int32_T j{nfxd}; j < minmn; j++) {
    real_T s;
    int32_T ii;
    int32_T ix;
    int32_T mmi;
    int32_T nmi;
    int32_T pvt;
    loop_ub = j + 1;
    ii = j * ma + j;
    nmi = n - j;
    mmi = m - j;
    if (nmi < 1) {
      pvt = -1;
    } else {
      pvt = 0;
      if (nmi > 1) {
        ix = j;
        smax = std::abs(proc_control_B.vn1_data[j]);
        for (int32_T k{2}; k <= nmi; k++) {
          ix++;
          s = std::abs(proc_control_B.vn1_data[ix]);
          if (s > smax) {
            pvt = k - 1;
            smax = s;
          }
        }
      }
    }

    pvt += j;
    if (pvt + 1 != j + 1) {
      proc_control_xswap(m, A_data, pvt * ma + 1, j * ma + 1);
      ix = jpvt_data[pvt];
      jpvt_data[pvt] = jpvt_data[j];
      jpvt_data[j] = ix;
      proc_control_B.vn1_data[pvt] = proc_control_B.vn1_data[j];
      proc_control_B.vn2_data[pvt] = proc_control_B.vn2_data[j];
    }

    if (j + 1 < m) {
      smax = A_data[ii];
      tau_data[j] = proc_control_xzlarfg(mmi, &smax, A_data, ii + 2);
      A_data[ii] = smax;
    } else {
      tau_data[j] = 0.0;
    }

    if (j + 1 < n) {
      smax = A_data[ii];
      A_data[ii] = 1.0;
      proc_control_xzlarf(mmi, nmi - 1, ii + 1, tau_data[j], A_data, (ii + ma) +
                          1, ma, proc_control_B.work_data_l);
      A_data[ii] = smax;
    }

    while (loop_ub + 1 <= n) {
      ii = loop_ub * ma + j;
      if (proc_control_B.vn1_data[loop_ub] != 0.0) {
        smax = std::abs(A_data[ii]) / proc_control_B.vn1_data[loop_ub];
        smax = 1.0 - smax * smax;
        if (smax < 0.0) {
          smax = 0.0;
        }

        s = proc_control_B.vn1_data[loop_ub] / proc_control_B.vn2_data[loop_ub];
        s = s * s * smax;
        if (s <= 1.4901161193847656E-8) {
          if (j + 1 < m) {
            proc_control_B.vn1_data[loop_ub] = proc_control_xnrm2(mmi - 1,
              A_data, ii + 2);
            proc_control_B.vn2_data[loop_ub] = proc_control_B.vn1_data[loop_ub];
          } else {
            proc_control_B.vn1_data[loop_ub] = 0.0;
            proc_control_B.vn2_data[loop_ub] = 0.0;
          }
        } else {
          proc_control_B.vn1_data[loop_ub] *= std::sqrt(smax);
        }
      }

      loop_ub++;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgeqp3(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T jpvt_data[], real_T tau_data[], int32_T
  *tau_size)
{
  int32_T ma;
  int32_T minmana;
  int32_T minmn;
  ma = A_size[0];
  if (A_size[0] <= A_size[1]) {
    minmana = A_size[0];
  } else {
    minmana = A_size[1];
  }

  if (m <= n) {
    minmn = m;
  } else {
    minmn = n;
  }

  *tau_size = minmana;
  if (minmana - 1 >= 0) {
    std::memset(&tau_data[0], 0, minmana * sizeof(real_T));
  }

  if (minmn < 1) {
    for (ma = 0; ma < n; ma++) {
      jpvt_data[ma] = ma + 1;
    }
  } else {
    int32_T nfxd;
    nfxd = -1;
    for (int32_T c_j{0}; c_j < n; c_j++) {
      if (jpvt_data[c_j] != 0) {
        nfxd++;
        if (c_j + 1 != nfxd + 1) {
          proc_control_xswap(m, A_data, c_j * ma + 1, nfxd * ma + 1);
          jpvt_data[c_j] = jpvt_data[nfxd];
          jpvt_data[nfxd] = c_j + 1;
        } else {
          jpvt_data[c_j] = c_j + 1;
        }
      } else {
        jpvt_data[c_j] = c_j + 1;
      }
    }

    if (nfxd + 1 <= minmn) {
      nfxd++;
    } else {
      nfxd = minmn;
    }

    if (minmana - 1 >= 0) {
      std::memset(&tau_data[0], 0, minmana * sizeof(real_T));
    }

    proc_control_qrf(A_data, A_size, m, n, nfxd, tau_data);
    if (nfxd < minmn) {
      proc_control_qrpf(A_data, A_size, m, n, nfxd, tau_data, jpvt_data);
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_factorQRE(s_Ref0liQlfQOPmAop9i3aPH_proc_T *obj,
  const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA)
{
  for (int32_T b_idx{0}; b_idx < ncols; b_idx++) {
    int32_T idx;
    int32_T ix0;
    ix0 = ldA * b_idx;
    idx = obj->ldq * b_idx;
    for (int32_T k{1}; k - 1 < mrows; k++) {
      obj->QR.data[(idx + k) - 1] = A_data[(ix0 + k) - 1];
    }
  }

  obj->usedPivoting = true;
  obj->mrows = mrows;
  obj->ncols = ncols;
  if (mrows <= ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_xgeqp3(obj->QR.data, obj->QR.size, mrows, ncols, obj->jpvt.data,
                      obj->tau.data, &obj->tau.size);
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xorgqr_k(int32_T m, int32_T n, int32_T k, real_T
  A_data[], const int32_T A_size[2], int32_T lda, const real_T tau_data[])
{
  if (n >= 1) {
    int32_T i;
    int32_T iaii;
    int32_T itau;
    for (itau = k; itau < n; itau++) {
      i = itau * lda;
      for (iaii = 0; iaii < m; iaii++) {
        A_data[i + iaii] = 0.0;
      }

      A_data[i + itau] = 1.0;
    }

    itau = k - 1;
    iaii = static_cast<int16_T>(A_size[1]);
    if (iaii - 1 >= 0) {
      std::memset(&proc_control_B.work_data_h[0], 0, iaii * sizeof(real_T));
    }

    for (i = k; i >= 1; i--) {
      int32_T c;
      iaii = (i - 1) * lda + i;
      if (i < n) {
        A_data[iaii - 1] = 1.0;
        proc_control_xzlarf((m - i) + 1, n - i, iaii, tau_data[itau], A_data,
                            iaii + lda, lda, proc_control_B.work_data_h);
      }

      if (i < m) {
        c = (iaii + m) - i;
        for (int32_T b_k{iaii}; b_k < c; b_k++) {
          A_data[b_k] *= -tau_data[itau];
        }
      }

      A_data[iaii - 1] = 1.0 - tau_data[itau];
      for (c = 0; c <= i - 2; c++) {
        A_data[(iaii - c) - 2] = 0.0;
      }

      itau--;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_computeQ_(s_Ref0liQlfQOPmAop9i3aPH_proc_T *obj,
  int32_T nrows)
{
  for (int32_T idx{0}; idx < obj->minRowCol; idx++) {
    int32_T iQR0;
    int32_T n;
    iQR0 = obj->ldq * idx + idx;
    n = obj->mrows - idx;
    for (int32_T k{1}; k - 1 <= n - 2; k++) {
      int32_T tmp;
      tmp = iQR0 + k;
      obj->Q.data[tmp] = obj->QR.data[tmp];
    }
  }

  proc_control_xorgqr_k(obj->mrows, nrows, obj->minRowCol, obj->Q.data,
                        obj->Q.size, obj->ldq, obj->tau.data);
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgemv_mtmc(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (m != 0) {
    int32_T b;
    int32_T b_iy;
    int32_T iac;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      real_T c;
      int32_T d;
      int32_T ix;
      ix = 0;
      c = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        c += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[b_iy] += c;
      b_iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xtrsv(int32_T n, const real_T A_data[], int32_T
  lda, real_T x_data[])
{
  if (n != 0) {
    for (int32_T j{n - 1}; j + 1 > 0; j--) {
      int32_T jjA;
      jjA = j * lda + j;
      x_data[j] /= A_data[jjA];
      for (int32_T i{1}; i - 1 < j; i++) {
        int32_T ix;
        ix = j - i;
        x_data[ix] -= A_data[jjA - i] * x_data[j];
      }
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_sortLambdaQP(real_T lambda_data[], int32_T
  WorkingSet_nActiveConstr, const int32_T WorkingSet_sizes[5], const int32_T
  WorkingSet_isActiveIdx[6], const int32_T WorkingSet_Wid_data[], const int32_T
  WorkingSet_Wlocalidx_data[], real_T workspace_data[])
{
  if (WorkingSet_nActiveConstr != 0) {
    int32_T idx;
    int32_T idxOffset;
    int32_T mAll;
    mAll = (((WorkingSet_sizes[0] + WorkingSet_sizes[3]) + WorkingSet_sizes[4])
            + WorkingSet_sizes[2]) + 129;
    for (idx = 0; idx <= mAll; idx++) {
      workspace_data[idx] = lambda_data[idx];
    }

    for (idx = 0; idx <= mAll; idx++) {
      lambda_data[idx] = 0.0;
    }

    mAll = 0;
    idx = 0;
    while ((idx + 1 <= WorkingSet_nActiveConstr) && (WorkingSet_Wid_data[idx] <=
            2)) {
      if (WorkingSet_Wid_data[idx] == 1) {
        idxOffset = 1;
      } else {
        idxOffset = WorkingSet_isActiveIdx[1];
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
        workspace_data[mAll];
      mAll++;
      idx++;
    }

    while (idx + 1 <= WorkingSet_nActiveConstr) {
      switch (WorkingSet_Wid_data[idx]) {
       case 3:
        idxOffset = WorkingSet_isActiveIdx[2];
        break;

       case 4:
        idxOffset = WorkingSet_isActiveIdx[3];
        break;

       default:
        idxOffset = WorkingSet_isActiveIdx[4];
        break;
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
        workspace_data[mAll];
      mAll++;
      idx++;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
int32_T proc_control::proc_control_ixamax(int32_T n, const real_T x_data[])
{
  int32_T idxmax;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      real_T smax;
      int32_T ix;
      ix = 0;
      smax = std::abs(x_data[0]);
      for (int32_T k{2}; k <= n; k++) {
        real_T s;
        ix++;
        s = std::abs(x_data[ix]);
        if (s > smax) {
          idxmax = k;
          smax = s;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_test_exit(s7RdrPWkr8UPAUyTdDJkLaG_proc__T *Flags,
  s_j0X3urodUv3ospvkLXsspC_proc_T *memspace, sG8JZ69axY52WWR6RKyApQC_proc__T
  *MeritFunction, const int32_T *fscales_lineq_constraint_size, const int32_T
  *fscales_cineq_constraint_size, s_gnTVUZmGpKWoq4tCE9AGn_proc__T *WorkingSet,
  s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *TrialState, s_Ref0liQlfQOPmAop9i3aPH_proc_T
  *QRManager, const real_T lb[139])
{
  real_T optimRelativeFactor;
  real_T tol;
  int32_T fullRank_R;
  int32_T mLambda;
  boolean_T dxTooSmall;
  boolean_T isFeasible;
  mLambda = (((WorkingSet->sizes[0] + WorkingSet->sizes[2]) + WorkingSet->sizes
              [3]) + WorkingSet->sizes[4]) + 129;
  for (fullRank_R = 0; fullRank_R <= mLambda; fullRank_R++) {
    TrialState->lambdaStopTest.data[fullRank_R] = TrialState->
      lambdasqp.data[fullRank_R];
  }

  proc_control_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  optimRelativeFactor = std::fmax(1.0, std::abs(TrialState->
    grad.data[proc_control_ixamax(WorkingSet->nVar, TrialState->grad.data) - 1]));
  if (std::isinf(optimRelativeFactor)) {
    optimRelativeFactor = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if (TrialState->sqpIterations == 0) {
    MeritFunction->feasRelativeFactor = std::fmax(1.0,
      MeritFunction->nlpPrimalFeasError);
  }

  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &Flags->gradOK, &MeritFunction->nlpDualFeasError);
  if (!Flags->gradOK) {
    Flags->done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    real_T nlpComplErrorTmp;
    MeritFunction->nlpComplError = proc_control_computeComplError
      (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
       TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
       WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
       WorkingSet->indexUB.data, WorkingSet->sizes[4],
       TrialState->lambdaStopTest.data, WorkingSet->sizes[0] + 131);
    MeritFunction->firstOrderOpt = std::fmax(MeritFunction->nlpDualFeasError,
      MeritFunction->nlpComplError);
    if (TrialState->sqpIterations > 1) {
      real_T tmp;
      proc_control_computeGradLag_b(memspace->workspace_double.data,
        WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
        WorkingSet->sizes[2], WorkingSet->Aineq.data, WorkingSet->Aeq.data,
        WorkingSet->indexFixed.data, WorkingSet->sizes[0],
        WorkingSet->indexLB.data, WorkingSet->sizes[3], WorkingSet->indexUB.data,
        WorkingSet->sizes[4], TrialState->lambdaStopTestPrev.data);
      proc_con_computeDualFeasError_b(WorkingSet->nVar,
        memspace->workspace_double.data, &dxTooSmall, &tol);
      nlpComplErrorTmp = proc_control_computeComplError
        (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
         TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
         WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
         WorkingSet->indexUB.data, WorkingSet->sizes[4],
         TrialState->lambdaStopTestPrev.data, WorkingSet->sizes[0] + 131);
      tmp = std::fmax(tol, nlpComplErrorTmp);
      if (tmp < std::fmax(MeritFunction->nlpDualFeasError,
                          MeritFunction->nlpComplError)) {
        MeritFunction->nlpDualFeasError = tol;
        MeritFunction->nlpComplError = nlpComplErrorTmp;
        MeritFunction->firstOrderOpt = tmp;
        for (fullRank_R = 0; fullRank_R <= mLambda; fullRank_R++) {
          TrialState->lambdaStopTest.data[fullRank_R] =
            TrialState->lambdaStopTestPrev.data[fullRank_R];
        }
      } else {
        for (fullRank_R = 0; fullRank_R <= mLambda; fullRank_R++) {
          TrialState->lambdaStopTestPrev.data[fullRank_R] =
            TrialState->lambdaStopTest.data[fullRank_R];
        }
      }
    } else {
      for (fullRank_R = 0; fullRank_R <= mLambda; fullRank_R++) {
        TrialState->lambdaStopTestPrev.data[fullRank_R] =
          TrialState->lambdaStopTest.data[fullRank_R];
      }
    }

    if (isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
                       optimRelativeFactor) && (MeritFunction->nlpComplError <=
         0.02 * optimRelativeFactor)) {
      Flags->done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      Flags->done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        Flags->done = true;
        TrialState->sqpExitFlag = -3;
      } else {
        boolean_T guard1{ false };

        guard1 = false;
        if (TrialState->sqpIterations > 0) {
          boolean_T exitg1;
          dxTooSmall = true;
          fullRank_R = 0;
          exitg1 = false;
          while ((!exitg1) && (fullRank_R <= WorkingSet->nVar - 1)) {
            if (0.1 * std::fmax(1.0, std::abs(TrialState->xstarsqp[fullRank_R]))
                <= std::abs(TrialState->delta_x.data[fullRank_R])) {
              dxTooSmall = false;
              exitg1 = true;
            } else {
              fullRank_R++;
            }
          }

          if (dxTooSmall) {
            if (!isFeasible) {
              if (Flags->stepType != 2) {
                Flags->stepType = 2;
                Flags->failedLineSearch = false;
                Flags->stepAccepted = false;
                guard1 = true;
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = -2;
              }
            } else if (WorkingSet->nActiveConstr > 0) {
              int32_T iQR_diag;
              int32_T rankR;
              proc_updateWorkingSetForNewQP_l(TrialState->xstarsqp, WorkingSet,
                WorkingSet->sizes[2], TrialState->mNonlinIneq,
                TrialState->cIneq.data, TrialState->cEq, WorkingSet->sizes[3],
                lb, WorkingSet->sizes[4], WorkingSet->sizes[0]);
              for (fullRank_R = 0; fullRank_R < WorkingSet->nActiveConstr;
                   fullRank_R++) {
                TrialState->lambda.data[fullRank_R] = 0.0;
              }

              proc_control_factorQRE(QRManager, WorkingSet->ATwset.data,
                WorkingSet->nVar, WorkingSet->nActiveConstr, WorkingSet->ldA);
              proc_control_computeQ_(QRManager, QRManager->mrows);
              if (WorkingSet->nVar >= WorkingSet->nActiveConstr) {
                fullRank_R = WorkingSet->nVar;
              } else {
                fullRank_R = WorkingSet->nActiveConstr;
              }

              tol = std::fmin(1.4901161193847656E-8, static_cast<real_T>
                              (fullRank_R) * 2.2204460492503131E-16) * std::abs
                (QRManager->QR.data[0]);
              if (WorkingSet->nVar <= WorkingSet->nActiveConstr) {
                fullRank_R = WorkingSet->nVar;
              } else {
                fullRank_R = WorkingSet->nActiveConstr;
              }

              rankR = 0;
              iQR_diag = 0;
              while ((rankR < fullRank_R) && (std::abs(QRManager->
                       QR.data[iQR_diag]) > tol)) {
                rankR++;
                iQR_diag = (iQR_diag + QRManager->ldq) + 1;
              }

              proc_control_xgemv_mtmc(WorkingSet->nVar, WorkingSet->nVar,
                QRManager->Q.data, QRManager->ldq, TrialState->grad.data,
                memspace->workspace_double.data);
              proc_control_xtrsv(rankR, QRManager->QR.data, QRManager->ldq,
                                 memspace->workspace_double.data);
              if (WorkingSet->nActiveConstr <= fullRank_R) {
                fullRank_R = WorkingSet->nActiveConstr;
              }

              for (rankR = 0; rankR < fullRank_R; rankR++) {
                TrialState->lambda.data[QRManager->jpvt.data[rankR] - 1] =
                  memspace->workspace_double.data[rankR];
              }

              for (fullRank_R = WorkingSet->sizes[0]; fullRank_R <
                   WorkingSet->sizes[0] + 130; fullRank_R++) {
                TrialState->lambda.data[fullRank_R] = -TrialState->
                  lambda.data[fullRank_R];
              }

              proc_control_sortLambdaQP(TrialState->lambda.data,
                WorkingSet->nActiveConstr, WorkingSet->sizes,
                WorkingSet->isActiveIdx, WorkingSet->Wid.data,
                WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
              proc_control_computeGradLag_b(memspace->workspace_double.data,
                WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
                WorkingSet->sizes[2], WorkingSet->Aineq.data,
                WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
                WorkingSet->sizes[0], WorkingSet->indexLB.data,
                WorkingSet->sizes[3], WorkingSet->indexUB.data,
                WorkingSet->sizes[4], TrialState->lambda.data);
              proc_con_computeDualFeasError_b(WorkingSet->nVar,
                memspace->workspace_double.data, &isFeasible, &tol);
              nlpComplErrorTmp = proc_control_computeComplError
                (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
                 TrialState->xstarsqp, WorkingSet->sizes[2],
                 TrialState->cIneq.data, WorkingSet->indexLB.data,
                 WorkingSet->sizes[3], lb, WorkingSet->indexUB.data,
                 WorkingSet->sizes[4], TrialState->lambda.data,
                 WorkingSet->sizes[0] + 1);
              if ((tol <= 0.02 * optimRelativeFactor) && (nlpComplErrorTmp <=
                   0.02 * optimRelativeFactor)) {
                MeritFunction->nlpDualFeasError = tol;
                MeritFunction->nlpComplError = nlpComplErrorTmp;
                MeritFunction->firstOrderOpt = std::fmax(tol, nlpComplErrorTmp);
                for (fullRank_R = 0; fullRank_R <= mLambda; fullRank_R++) {
                  TrialState->lambdaStopTest.data[fullRank_R] =
                    TrialState->lambda.data[fullRank_R];
                }

                Flags->done = true;
                TrialState->sqpExitFlag = 1;
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = 2;
              }
            } else {
              Flags->done = true;
              TrialState->sqpExitFlag = 2;
            }
          } else {
            guard1 = true;
          }
        } else {
          guard1 = true;
        }

        if (guard1) {
          if (TrialState->sqpIterations >= 400) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          } else if (TrialState->FunctionEvaluations >= 13900) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_contro_xgemv_mtmcjbiadz2ic(int32_T m, int32_T n, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0,
  real_T y_data[])
{
  int32_T b;
  int32_T iac;
  int32_T ix;
  ix = ix0;
  b = (n - 1) * lda + ia0;
  iac = ia0;
  while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
    int32_T c;
    int32_T iy;
    iy = 0;
    c = (iac + m) - 1;
    for (int32_T ia{iac}; ia <= c; ia++) {
      y_data[iy] += A_data[ia - 1] * x_data[ix - 1];
      iy++;
    }

    ix++;
    iac += lda;
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
boolean_T proc_control::proc_control_BFGSUpdate(int32_T nvar, real_T Bk[19321],
  const real_T sk_data[], real_T yk_data[], real_T workspace_data[])
{
  real_T curvatureS;
  real_T dotSY;
  int32_T b_ix;
  int32_T b_jA;
  int32_T c_ix;
  int32_T ijA;
  int32_T ix;
  int32_T jy;
  boolean_T success;
  dotSY = 0.0;
  if (nvar >= 1) {
    for (b_jA = 0; b_jA < nvar; b_jA++) {
      dotSY += sk_data[b_jA] * yk_data[b_jA];
    }
  }

  for (b_jA = 0; b_jA < nvar; b_jA++) {
    workspace_data[b_jA] = 0.0;
  }

  ix = 0;
  jy = (nvar - 1) * 139 + 1;
  for (c_ix = 1; c_ix <= jy; c_ix += 139) {
    b_ix = 0;
    ijA = (c_ix + nvar) - 1;
    for (b_jA = c_ix; b_jA <= ijA; b_jA++) {
      workspace_data[b_ix] += Bk[b_jA - 1] * sk_data[ix];
      b_ix++;
    }

    ix++;
  }

  curvatureS = 0.0;
  if (nvar >= 1) {
    for (ix = 0; ix < nvar; ix++) {
      curvatureS += workspace_data[ix] * sk_data[ix];
    }
  }

  if (dotSY < 0.2 * curvatureS) {
    dotSY = 0.8 * curvatureS / (curvatureS - dotSY);
    for (b_jA = 0; b_jA < nvar; b_jA++) {
      yk_data[b_jA] *= dotSY;
    }

    if (!(1.0 - dotSY == 0.0)) {
      for (ix = 0; ix < nvar; ix++) {
        yk_data[ix] += (1.0 - dotSY) * workspace_data[ix];
      }
    }

    dotSY = 0.0;
    if (nvar >= 1) {
      for (b_jA = 0; b_jA < nvar; b_jA++) {
        dotSY += sk_data[b_jA] * yk_data[b_jA];
      }
    }
  }

  success = ((curvatureS > 2.2204460492503131E-16) && (dotSY >
              2.2204460492503131E-16));
  if (success) {
    curvatureS = -1.0 / curvatureS;
    if (!(curvatureS == 0.0)) {
      ix = 0;
      jy = 0;
      for (c_ix = 0; c_ix < nvar; c_ix++) {
        if (workspace_data[jy] != 0.0) {
          real_T temp;
          temp = workspace_data[jy] * curvatureS;
          b_ix = 0;
          ijA = ix;
          b_jA = nvar + ix;
          while (ijA + 1 <= b_jA) {
            Bk[ijA] += workspace_data[b_ix] * temp;
            b_ix++;
            ijA++;
          }
        }

        jy++;
        ix += 139;
      }
    }

    dotSY = 1.0 / dotSY;
    if (!(dotSY == 0.0)) {
      b_jA = 0;
      ix = 0;
      for (jy = 0; jy < nvar; jy++) {
        if (yk_data[ix] != 0.0) {
          curvatureS = yk_data[ix] * dotSY;
          c_ix = 0;
          b_ix = b_jA;
          ijA = nvar + b_jA;
          while (b_ix + 1 <= ijA) {
            Bk[b_ix] += yk_data[c_ix] * curvatureS;
            c_ix++;
            b_ix++;
          }
        }

        ix++;
        b_jA += 139;
      }
    }
  }

  return success;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_factorQRE_f(s_Ref0liQlfQOPmAop9i3aPH_proc_T *obj,
  int32_T mrows, int32_T ncols)
{
  if (mrows * ncols == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    obj->usedPivoting = true;
    obj->mrows = mrows;
    obj->ncols = ncols;
    if (mrows <= ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_xgeqp3(obj->QR.data, obj->QR.size, mrows, ncols, obj->jpvt.data,
                        obj->tau.data, &obj->tau.size);
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_countsort(int32_T x_data[], int32_T xLen,
  int32_T workspace_data[], int32_T xMin, int32_T xMax)
{
  if ((xLen > 1) && (xMax > xMin)) {
    int32_T idxEnd;
    int32_T idxStart;
    int32_T maxOffset_tmp;
    maxOffset_tmp = xMax - xMin;
    for (idxStart = 0; idxStart <= maxOffset_tmp; idxStart++) {
      workspace_data[idxStart] = 0;
    }

    for (idxStart = 0; idxStart < xLen; idxStart++) {
      idxEnd = x_data[idxStart] - xMin;
      workspace_data[idxEnd]++;
    }

    for (idxStart = 1; idxStart < maxOffset_tmp + 1; idxStart++) {
      workspace_data[idxStart] += workspace_data[idxStart - 1];
    }

    idxStart = 0;
    idxEnd = workspace_data[0];
    for (int32_T b_idxW{0}; b_idxW < maxOffset_tmp; b_idxW++) {
      while (idxStart + 1 <= idxEnd) {
        x_data[idxStart] = b_idxW + xMin;
        idxStart++;
      }

      idxStart = workspace_data[b_idxW];
      idxEnd = workspace_data[b_idxW + 1];
    }

    while (idxStart + 1 <= idxEnd) {
      x_data[idxStart] = xMax;
      idxStart++;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_removeConstr(s_gnTVUZmGpKWoq4tCE9AGn_proc__T
  *obj, int32_T idx_global)
{
  int32_T TYPE_tmp;
  int32_T idx_global_start_tmp_tmp;
  TYPE_tmp = obj->Wid.data[idx_global - 1] - 1;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE_tmp] + obj->
    Wlocalidx.data[idx_global - 1]) - 2] = false;
  idx_global_start_tmp_tmp = obj->nActiveConstr - 1;
  obj->Wid.data[idx_global - 1] = obj->Wid.data[obj->nActiveConstr - 1];
  obj->Wlocalidx.data[idx_global - 1] = obj->
    Wlocalidx.data[idx_global_start_tmp_tmp];
  for (int32_T b_idx{0}; b_idx < obj->nVar; b_idx++) {
    obj->ATwset.data[b_idx + obj->ldA * (idx_global - 1)] = obj->ATwset.data
      [obj->ldA * idx_global_start_tmp_tmp + b_idx];
  }

  obj->bwset.data[idx_global - 1] = obj->bwset.data[idx_global_start_tmp_tmp];
  obj->nActiveConstr--;
  obj->nWConstr[TYPE_tmp]--;
}

// Function for MATLAB Function: '<S196>/NLMPC'
int32_T proc_control::proc_control_RemoveDependentEq_
  (s_j0X3urodUv3ospvkLXsspC_proc_T *memspace, s_gnTVUZmGpKWoq4tCE9AGn_proc__T
   *workingset, s_Ref0liQlfQOPmAop9i3aPH_proc_T *qrmanager)
{
  int32_T mTotalWorkingEq;
  int32_T nDepInd;
  int32_T nVar;
  nVar = workingset->nVar - 1;
  mTotalWorkingEq = workingset->nWConstr[0] + workingset->nWConstr[1];
  nDepInd = 0;
  if (mTotalWorkingEq > 0) {
    real_T tol;
    int32_T ix;
    int32_T iy;
    int32_T totalRank;
    for (totalRank = 0; totalRank < mTotalWorkingEq; totalRank++) {
      for (ix = 0; ix <= nVar; ix++) {
        qrmanager->QR.data[totalRank + qrmanager->ldq * ix] =
          workingset->ATwset.data[workingset->ldA * totalRank + ix];
      }
    }

    iy = mTotalWorkingEq - workingset->nVar;
    if (iy > 0) {
      nDepInd = iy;
    }

    for (totalRank = 0; totalRank <= nVar; totalRank++) {
      qrmanager->jpvt.data[totalRank] = 0;
    }

    proc_control_factorQRE_f(qrmanager, mTotalWorkingEq, workingset->nVar);
    tol = 100.0 * static_cast<real_T>(workingset->nVar) * 2.2204460492503131E-16;
    if (workingset->nVar <= mTotalWorkingEq) {
      totalRank = workingset->nVar;
    } else {
      totalRank = mTotalWorkingEq;
    }

    totalRank += (totalRank - 1) * qrmanager->ldq;
    while ((totalRank > 0) && (std::abs(qrmanager->QR.data[totalRank - 1]) < tol))
    {
      totalRank = (totalRank - qrmanager->ldq) - 1;
      nDepInd++;
    }

    if (nDepInd > 0) {
      boolean_T exitg1;
      proc_control_computeQ_(qrmanager, qrmanager->mrows);
      totalRank = 0;
      exitg1 = false;
      while ((!exitg1) && (totalRank <= nDepInd - 1)) {
        real_T qtb;
        ix = ((mTotalWorkingEq - totalRank) - 1) * qrmanager->ldq;
        qtb = 0.0;
        iy = 0;
        for (int32_T b_k{0}; b_k < mTotalWorkingEq; b_k++) {
          qtb += qrmanager->Q.data[ix] * workingset->bwset.data[iy];
          ix++;
          iy++;
        }

        if (std::abs(qtb) >= tol) {
          nDepInd = -1;
          exitg1 = true;
        } else {
          totalRank++;
        }
      }
    }

    if (nDepInd > 0) {
      for (totalRank = 0; totalRank < mTotalWorkingEq; totalRank++) {
        ix = qrmanager->ldq * totalRank;
        iy = workingset->ldA * totalRank;
        for (int32_T b_k{1}; b_k - 1 <= nVar; b_k++) {
          qrmanager->QR.data[(ix + b_k) - 1] = workingset->ATwset.data[(iy + b_k)
            - 1];
        }
      }

      for (nVar = 0; nVar < workingset->nWConstr[0]; nVar++) {
        qrmanager->jpvt.data[nVar] = 1;
      }

      for (nVar = workingset->nWConstr[0]; nVar < mTotalWorkingEq; nVar++) {
        qrmanager->jpvt.data[nVar] = 0;
      }

      proc_control_factorQRE_f(qrmanager, workingset->nVar, mTotalWorkingEq);
      for (nVar = 0; nVar < nDepInd; nVar++) {
        memspace->workspace_int.data[nVar] = qrmanager->jpvt.data
          [(mTotalWorkingEq - nDepInd) + nVar];
      }

      proc_control_countsort(memspace->workspace_int.data, nDepInd,
        memspace->workspace_sort.data, 1, mTotalWorkingEq);
      for (mTotalWorkingEq = nDepInd - 1; mTotalWorkingEq + 1 > 0;
           mTotalWorkingEq--) {
        nVar = (workingset->nWConstr[0] + workingset->nWConstr[1]) - 1;
        if ((nVar + 1 != 0) && (memspace->workspace_int.data[mTotalWorkingEq] <=
             nVar + 1)) {
          if ((nVar + 1 == workingset->nActiveConstr) || (nVar + 1 ==
               memspace->workspace_int.data[mTotalWorkingEq])) {
            workingset->mEqRemoved++;
            workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[mTotalWorkingEq] - 1];
            proc_control_removeConstr(workingset, memspace->
              workspace_int.data[mTotalWorkingEq]);
          } else {
            workingset->mEqRemoved++;
            totalRank = workingset->Wid.data[memspace->
              workspace_int.data[mTotalWorkingEq] - 1] - 1;
            workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[mTotalWorkingEq] - 1];
            workingset->isActiveConstr.data[(workingset->isActiveIdx
              [workingset->Wid.data[memspace->workspace_int.data[mTotalWorkingEq]
              - 1] - 1] + workingset->Wlocalidx.data
              [memspace->workspace_int.data[mTotalWorkingEq] - 1]) - 2] = false;
            workingset->Wid.data[memspace->workspace_int.data[mTotalWorkingEq] -
              1] = workingset->Wid.data[nVar];
            workingset->Wlocalidx.data[memspace->
              workspace_int.data[mTotalWorkingEq] - 1] =
              workingset->Wlocalidx.data[nVar];
            for (ix = 0; ix < workingset->nVar; ix++) {
              workingset->ATwset.data[ix + workingset->ldA *
                (memspace->workspace_int.data[mTotalWorkingEq] - 1)] =
                workingset->ATwset.data[workingset->ldA * nVar + ix];
            }

            workingset->bwset.data[memspace->workspace_int.data[mTotalWorkingEq]
              - 1] = workingset->bwset.data[nVar];
            ix = workingset->nActiveConstr - 1;
            workingset->Wid.data[nVar] = workingset->Wid.data
              [workingset->nActiveConstr - 1];
            workingset->Wlocalidx.data[nVar] = workingset->Wlocalidx.data[ix];
            for (iy = 0; iy < workingset->nVar; iy++) {
              workingset->ATwset.data[iy + workingset->ldA * nVar] =
                workingset->ATwset.data[workingset->ldA * ix + iy];
            }

            workingset->bwset.data[nVar] = workingset->bwset.data[ix];
            workingset->nActiveConstr--;
            workingset->nWConstr[totalRank]--;
          }
        }
      }
    }
  }

  return nDepInd;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_contro_removeAllIneqConstr
  (s_gnTVUZmGpKWoq4tCE9AGn_proc__T *obj)
{
  for (int32_T idx_global{obj->nWConstr[0] + obj->nWConstr[1]}; idx_global <
       obj->nActiveConstr; idx_global++) {
    obj->isActiveConstr.data[(obj->isActiveIdx[obj->Wid.data[idx_global] - 1] +
      obj->Wlocalidx.data[idx_global]) - 2] = false;
  }

  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + obj->nWConstr[1];
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_contr_RemoveDependentIneq_
  (s_gnTVUZmGpKWoq4tCE9AGn_proc__T *workingset, s_Ref0liQlfQOPmAop9i3aPH_proc_T *
   qrmanager, s_j0X3urodUv3ospvkLXsspC_proc_T *memspace)
{
  int32_T nFixedConstr;
  int32_T nVar;
  nFixedConstr = workingset->nWConstr[0] + workingset->nWConstr[1];
  nVar = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    real_T tol;
    int32_T idx;
    int32_T nDepIneq;
    tol = 100.0 * static_cast<real_T>(workingset->nVar) * 2.2204460492503131E-16;
    for (nDepIneq = 0; nDepIneq < nFixedConstr; nDepIneq++) {
      qrmanager->jpvt.data[nDepIneq] = 1;
    }

    for (nDepIneq = nFixedConstr + 1; nDepIneq <= workingset->nActiveConstr;
         nDepIneq++) {
      qrmanager->jpvt.data[nDepIneq - 1] = 0;
    }

    for (nDepIneq = 0; nDepIneq < workingset->nActiveConstr; nDepIneq++) {
      int32_T idx_col;
      idx = qrmanager->ldq * nDepIneq;
      idx_col = workingset->ldA * nDepIneq;
      for (int32_T k{1}; k - 1 < nVar; k++) {
        qrmanager->QR.data[(idx + k) - 1] = workingset->ATwset.data[(idx_col + k)
          - 1];
      }
    }

    proc_control_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    nDepIneq = 0;
    for (idx = workingset->nActiveConstr - 1; idx + 1 > nVar; idx--) {
      nDepIneq++;
      memspace->workspace_int.data[nDepIneq - 1] = qrmanager->jpvt.data[idx];
    }

    if (idx + 1 <= workingset->nVar) {
      nVar = qrmanager->ldq * idx + idx;
      while ((idx + 1 > nFixedConstr) && (std::abs(qrmanager->QR.data[nVar]) <
              tol)) {
        nDepIneq++;
        memspace->workspace_int.data[nDepIneq - 1] = qrmanager->jpvt.data[idx];
        idx--;
        nVar = (nVar - qrmanager->ldq) - 1;
      }
    }

    proc_control_countsort(memspace->workspace_int.data, nDepIneq,
      memspace->workspace_sort.data, nFixedConstr + 1, workingset->nActiveConstr);
    for (nFixedConstr = nDepIneq; nFixedConstr > 0; nFixedConstr--) {
      proc_control_removeConstr(workingset, memspace->
        workspace_int.data[nFixedConstr - 1]);
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgeqrf_d(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, real_T tau_data[], int32_T *tau_size)
{
  int32_T minmana;
  int32_T minmn;
  if (A_size[0] <= A_size[1]) {
    minmana = A_size[0];
  } else {
    minmana = A_size[1];
  }

  if (m <= n) {
    minmn = m;
  } else {
    minmn = n;
  }

  *tau_size = minmana;
  if (minmana - 1 >= 0) {
    std::memset(&tau_data[0], 0, minmana * sizeof(real_T));
  }

  if (minmn >= 1) {
    if (minmana - 1 >= 0) {
      std::memset(&tau_data[0], 0, minmana * sizeof(real_T));
    }

    proc_control_qrf(A_data, A_size, m, n, minmn, tau_data);
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_factorQR_h(s_Ref0liQlfQOPmAop9i3aPH_proc_T *obj,
  const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA)
{
  int32_T b_idx;
  boolean_T guard1{ false };

  b_idx = mrows * ncols;
  guard1 = false;
  if (b_idx > 0) {
    for (b_idx = 0; b_idx < ncols; b_idx++) {
      int32_T idx;
      int32_T ix0;
      ix0 = ldA * b_idx;
      idx = obj->ldq * b_idx;
      for (int32_T k{1}; k - 1 < mrows; k++) {
        obj->QR.data[(idx + k) - 1] = A_data[(ix0 + k) - 1];
      }
    }

    guard1 = true;
  } else if (b_idx == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    guard1 = true;
  }

  if (guard1) {
    obj->usedPivoting = false;
    obj->mrows = mrows;
    obj->ncols = ncols;
    for (b_idx = 0; b_idx < ncols; b_idx++) {
      obj->jpvt.data[b_idx] = b_idx + 1;
    }

    if (mrows <= ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_xgeqrf_d(obj->QR.data, obj->QR.size, mrows, ncols,
                          obj->tau.data, &obj->tau.size);
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_factorQR(s_Ref0liQlfQOPmAop9i3aPH_proc_T *obj,
  int32_T mrows, int32_T ncols)
{
  obj->usedPivoting = false;
  obj->mrows = mrows;
  obj->ncols = ncols;
  for (int32_T idx{0}; idx < ncols; idx++) {
    obj->jpvt.data[idx] = idx + 1;
  }

  if (mrows <= ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_xgeqrf_d(obj->QR.data, obj->QR.size, mrows, ncols, obj->tau.data,
                        &obj->tau.size);
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjb(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      real_T c;
      int32_T d;
      int32_T ix;
      ix = 0;
      c = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        c += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += c;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgemv_mtmcj(int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      real_T c;
      int32_T ix;
      ix = 0;
      c = 0.0;
      for (int32_T ia{iac}; ia <= iac + 138; ia++) {
        c += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += c;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
real_T proc_control::proc_con_maxConstraintViolation
  (s_gnTVUZmGpKWoq4tCE9AGn_proc__T *obj, const real_T x_data[])
{
  real_T v;
  int32_T mFixed;
  int32_T mIneq;
  int32_T mLB;
  int32_T mUB;
  mLB = obj->sizes[3];
  mUB = obj->sizes[4];
  mFixed = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_xgemv_mtmcj(obj->sizes[2], obj->Aineq.data, obj->ldA, x_data,
        obj->maxConstrWorkspace.data);
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] -= x_data[b_k + 139];
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcj(130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (int32_T b_k{0}; b_k < 130; b_k++) {
      obj->maxConstrWorkspace.data[b_k] = (obj->maxConstrWorkspace.data[b_k] -
        x_data[(mIneq + b_k) + 140]) + x_data[(obj->sizes[2] + b_k) + 269];
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[b_k]));
    }
  } else {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_xgemv_mtmcjb(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcjb(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (mIneq = 0; mIneq < 130; mIneq++) {
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[mIneq]));
    }
  }

  if (mLB > 0) {
    for (mIneq = 0; mIneq < mLB; mIneq++) {
      v = std::fmax(v, -x_data[obj->indexLB.data[mIneq] - 1] - obj->lb.data
                    [obj->indexLB.data[mIneq] - 1]);
    }
  }

  if (mUB > 0) {
    for (mLB = 0; mLB < mUB; mLB++) {
      v = std::fmax(v, x_data[obj->indexUB.data[mLB] - 1] - obj->ub.data
                    [obj->indexUB.data[mLB] - 1]);
    }
  }

  if (mFixed > 0) {
    for (mUB = 0; mUB < mFixed; mUB++) {
      v = std::fmax(v, std::abs(x_data[obj->indexFixed.data[mUB] - 1] -
        obj->ub.data[obj->indexFixed.data[mUB] - 1]));
    }
  }

  return v;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbi(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      real_T c;
      int32_T d;
      int32_T ix;
      ix = ix0;
      c = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        c += x_data[ix - 1] * A_data[ia - 1];
        ix++;
      }

      y_data[iy] += c;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
real_T proc_control::proc_c_maxConstraintViolation_d
  (s_gnTVUZmGpKWoq4tCE9AGn_proc__T *obj, const real_T x_data[], int32_T ix0)
{
  real_T v;
  int32_T mFixed;
  int32_T mIneq;
  int32_T mLB;
  int32_T mUB;
  mLB = obj->sizes[3];
  mUB = obj->sizes[4];
  mFixed = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_xgemv_mtmcjbi(139, obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, ix0, obj->maxConstrWorkspace.data);
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] -= x_data[(ix0 + b_k) + 138];
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcjbi(139, 130, obj->Aeq.data, obj->ldA, x_data, ix0,
      obj->maxConstrWorkspace.data);
    for (int32_T b_k{0}; b_k < 130; b_k++) {
      obj->maxConstrWorkspace.data[b_k] = (obj->maxConstrWorkspace.data[b_k] -
        x_data[((ix0 + mIneq) + b_k) + 139]) + x_data[((ix0 + obj->sizes[2]) +
        b_k) + 268];
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[b_k]));
    }
  } else {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_xgemv_mtmcjbi(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, ix0, obj->maxConstrWorkspace.data);
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcjbi(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data,
      ix0, obj->maxConstrWorkspace.data);
    for (mIneq = 0; mIneq < 130; mIneq++) {
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[mIneq]));
    }
  }

  if (mLB > 0) {
    for (mIneq = 0; mIneq < mLB; mIneq++) {
      v = std::fmax(v, -x_data[(ix0 + obj->indexLB.data[mIneq]) - 2] -
                    obj->lb.data[obj->indexLB.data[mIneq] - 1]);
    }
  }

  if (mUB > 0) {
    for (mLB = 0; mLB < mUB; mLB++) {
      v = std::fmax(v, x_data[(ix0 + obj->indexUB.data[mLB]) - 2] - obj->
                    ub.data[obj->indexUB.data[mLB] - 1]);
    }
  }

  if (mFixed > 0) {
    for (mUB = 0; mUB < mFixed; mUB++) {
      v = std::fmax(v, std::abs(x_data[(ix0 + obj->indexFixed.data[mUB]) - 2] -
        obj->ub.data[obj->indexFixed.data[mUB] - 1]));
    }
  }

  return v;
}

// Function for MATLAB Function: '<S196>/NLMPC'
boolean_T proc_control::proc_co_feasibleX0ForWorkingSet(real_T workspace_data[],
  const int32_T workspace_size[2], real_T xCurrent_data[],
  s_gnTVUZmGpKWoq4tCE9AGn_proc__T *workingset, s_Ref0liQlfQOPmAop9i3aPH_proc_T
  *qrmanager)
{
  int32_T mWConstr_tmp_tmp;
  int32_T nVar;
  boolean_T nonDegenerateWset;
  mWConstr_tmp_tmp = workingset->nActiveConstr - 1;
  nVar = workingset->nVar;
  nonDegenerateWset = true;
  if (workingset->nActiveConstr != 0) {
    real_T c;
    int32_T b_ar;
    int32_T b_br;
    int32_T iAcol;
    int32_T ix;
    int32_T iy;
    int32_T jBcol;
    int32_T ldq;
    for (iy = 0; iy <= mWConstr_tmp_tmp; iy++) {
      workspace_data[iy] = workingset->bwset.data[iy];
      workspace_data[iy + workspace_size[0]] = workingset->bwset.data[iy];
    }

    ldq = workingset->ldA;
    if (workingset->nActiveConstr != 0) {
      iy = 0;
      iAcol = (workingset->nActiveConstr - 1) * workingset->ldA + 1;
      b_br = 1;
      while (((ldq > 0) && (b_br <= iAcol)) || ((ldq < 0) && (b_br >= iAcol))) {
        ix = 0;
        c = 0.0;
        jBcol = (b_br + nVar) - 1;
        for (b_ar = b_br; b_ar <= jBcol; b_ar++) {
          c += workingset->ATwset.data[b_ar - 1] * xCurrent_data[ix];
          ix++;
        }

        workspace_data[iy] += -c;
        iy++;
        b_br += ldq;
      }
    }

    if (workingset->nActiveConstr >= workingset->nVar) {
      for (ldq = 0; ldq < nVar; ldq++) {
        ix = qrmanager->ldq * ldq;
        for (iAcol = 0; iAcol <= mWConstr_tmp_tmp; iAcol++) {
          qrmanager->QR.data[iAcol + ix] = workingset->ATwset.data
            [workingset->ldA * iAcol + ldq];
        }
      }

      proc_control_factorQR(qrmanager, workingset->nActiveConstr,
                            workingset->nVar);
      proc_control_computeQ_(qrmanager, qrmanager->mrows);
      ldq = qrmanager->ldq;
      iy = workspace_size[0];
      iAcol = workspace_size[0] * workspace_size[1];
      if (iAcol - 1 >= 0) {
        std::memcpy(&proc_control_B.B_data[0], &workspace_data[0], iAcol *
                    sizeof(real_T));
      }

      ix = 0;
      while ((iy > 0) && (ix <= iy)) {
        iAcol = ix;
        b_br = ix + nVar;
        while (iAcol + 1 <= b_br) {
          workspace_data[iAcol] = 0.0;
          iAcol++;
        }

        ix += iy;
      }

      b_br = -1;
      jBcol = 0;
      while ((iy > 0) && (jBcol <= iy)) {
        b_ar = -1;
        iAcol = jBcol;
        ix = jBcol + nVar;
        while (iAcol + 1 <= ix) {
          c = 0.0;
          for (int32_T f{1}; f - 1 <= mWConstr_tmp_tmp; f++) {
            c += qrmanager->Q.data[f + b_ar] * proc_control_B.B_data[f + b_br];
          }

          workspace_data[iAcol] += c;
          b_ar += ldq;
          iAcol++;
        }

        b_br += iy;
        jBcol += iy;
      }

      for (b_ar = workingset->nVar; b_ar > 0; b_ar--) {
        iAcol = (b_ar - 1) * ldq - 1;
        c = workspace_data[b_ar + -1];
        if (c != 0.0) {
          workspace_data[b_ar + -1] = c / qrmanager->QR.data[b_ar + iAcol];
          for (ix = 1; ix - 1 <= b_ar - 2; ix++) {
            workspace_data[ix + -1] -= workspace_data[b_ar + -1] *
              qrmanager->QR.data[ix + iAcol];
          }
        }
      }

      for (b_ar = workingset->nVar; b_ar > 0; b_ar--) {
        iAcol = (b_ar - 1) * ldq - 1;
        jBcol = (iy + b_ar) - 1;
        if (workspace_data[jBcol] != 0.0) {
          workspace_data[jBcol] /= qrmanager->QR.data[b_ar + iAcol];
          for (ix = 1; ix - 1 <= b_ar - 2; ix++) {
            mWConstr_tmp_tmp = (iy + ix) - 1;
            workspace_data[mWConstr_tmp_tmp] -= qrmanager->QR.data[ix + iAcol] *
              workspace_data[jBcol];
          }
        }
      }
    } else {
      proc_control_factorQR_h(qrmanager, workingset->ATwset.data,
        workingset->nVar, workingset->nActiveConstr, workingset->ldA);
      proc_control_computeQ_(qrmanager, qrmanager->minRowCol);
      ldq = qrmanager->ldq;
      iy = workspace_size[0];
      for (b_ar = 1; b_ar - 1 <= mWConstr_tmp_tmp; b_ar++) {
        iAcol = (b_ar - 1) * ldq - 1;
        c = workspace_data[b_ar + -1];
        for (ix = 1; ix - 1 <= b_ar - 2; ix++) {
          c -= qrmanager->QR.data[ix + iAcol] * workspace_data[ix + -1];
        }

        workspace_data[b_ar + -1] = c / qrmanager->QR.data[b_ar + iAcol];
      }

      for (b_ar = 1; b_ar - 1 <= mWConstr_tmp_tmp; b_ar++) {
        iAcol = (b_ar - 1) * ldq - 1;
        c = workspace_data[(iy + b_ar) - 1];
        for (ix = 1; ix - 1 <= b_ar - 2; ix++) {
          c -= workspace_data[(iy + ix) - 1] * qrmanager->QR.data[ix + iAcol];
        }

        workspace_data[(b_ar + iy) - 1] = c / qrmanager->QR.data[b_ar + iAcol];
      }

      iAcol = workspace_size[0] * workspace_size[1];
      if (iAcol - 1 >= 0) {
        std::memcpy(&proc_control_B.B_data[0], &workspace_data[0], iAcol *
                    sizeof(real_T));
      }

      ix = 0;
      while ((iy > 0) && (ix <= iy)) {
        iAcol = ix;
        b_br = ix + nVar;
        while (iAcol + 1 <= b_br) {
          workspace_data[iAcol] = 0.0;
          iAcol++;
        }

        ix += iy;
      }

      jBcol = 1;
      b_ar = 0;
      while ((iy > 0) && (b_ar <= iy)) {
        int32_T f;
        iAcol = -1;
        ix = jBcol;
        f = jBcol + mWConstr_tmp_tmp;
        while (ix <= f) {
          int32_T b_ic;
          int32_T g;
          b_br = iAcol;
          b_ic = b_ar;
          g = b_ar + nVar;
          while (b_ic + 1 <= g) {
            b_br++;
            workspace_data[b_ic] += proc_control_B.B_data[ix - 1] *
              qrmanager->Q.data[b_br];
            b_ic++;
          }

          iAcol += ldq;
          ix++;
        }

        jBcol += iy;
        b_ar += iy;
      }
    }

    iy = 0;
    int32_T exitg1;
    do {
      exitg1 = 0;
      if (iy <= nVar - 1) {
        c = workspace_data[iy];
        if (std::isinf(c) || std::isnan(c)) {
          nonDegenerateWset = false;
          exitg1 = 1;
        } else {
          c = workspace_data[iy + workspace_size[0]];
          if (std::isinf(c) || std::isnan(c)) {
            nonDegenerateWset = false;
            exitg1 = 1;
          } else {
            iy++;
          }
        }
      } else {
        real_T constrViolation_basicX;
        for (iy = 0; iy < nVar; iy++) {
          workspace_data[iy] += xCurrent_data[iy];
        }

        c = proc_con_maxConstraintViolation(workingset, workspace_data);
        constrViolation_basicX = proc_c_maxConstraintViolation_d(workingset,
          workspace_data, workspace_size[0] + 1);
        if ((c <= 2.2204460492503131E-16) || (c < constrViolation_basicX)) {
          for (iy = 0; iy < nVar; iy++) {
            xCurrent_data[iy] = workspace_data[iy];
          }
        } else {
          for (iy = 0; iy < nVar; iy++) {
            xCurrent_data[iy] = workspace_data[workspace_size[0] + iy];
          }
        }

        exitg1 = 1;
      }
    } while (exitg1 == 0);
  }

  return nonDegenerateWset;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_con_RemoveDependentIneq__f
  (s_gnTVUZmGpKWoq4tCE9AGn_proc__T *workingset, s_Ref0liQlfQOPmAop9i3aPH_proc_T *
   qrmanager, s_j0X3urodUv3ospvkLXsspC_proc_T *memspace)
{
  int32_T nFixedConstr;
  int32_T nVar;
  nFixedConstr = workingset->nWConstr[0] + workingset->nWConstr[1];
  nVar = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    real_T tol;
    int32_T idx;
    int32_T nDepIneq;
    tol = 1000.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    for (nDepIneq = 0; nDepIneq < nFixedConstr; nDepIneq++) {
      qrmanager->jpvt.data[nDepIneq] = 1;
    }

    for (nDepIneq = nFixedConstr + 1; nDepIneq <= workingset->nActiveConstr;
         nDepIneq++) {
      qrmanager->jpvt.data[nDepIneq - 1] = 0;
    }

    for (nDepIneq = 0; nDepIneq < workingset->nActiveConstr; nDepIneq++) {
      int32_T idx_col;
      idx = qrmanager->ldq * nDepIneq;
      idx_col = workingset->ldA * nDepIneq;
      for (int32_T k{1}; k - 1 < nVar; k++) {
        qrmanager->QR.data[(idx + k) - 1] = workingset->ATwset.data[(idx_col + k)
          - 1];
      }
    }

    proc_control_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    nDepIneq = 0;
    for (idx = workingset->nActiveConstr - 1; idx + 1 > nVar; idx--) {
      nDepIneq++;
      memspace->workspace_int.data[nDepIneq - 1] = qrmanager->jpvt.data[idx];
    }

    if (idx + 1 <= workingset->nVar) {
      nVar = qrmanager->ldq * idx + idx;
      while ((idx + 1 > nFixedConstr) && (std::abs(qrmanager->QR.data[nVar]) <
              tol)) {
        nDepIneq++;
        memspace->workspace_int.data[nDepIneq - 1] = qrmanager->jpvt.data[idx];
        idx--;
        nVar = (nVar - qrmanager->ldq) - 1;
      }
    }

    proc_control_countsort(memspace->workspace_int.data, nDepIneq,
      memspace->workspace_sort.data, nFixedConstr + 1, workingset->nActiveConstr);
    for (nFixedConstr = nDepIneq; nFixedConstr > 0; nFixedConstr--) {
      proc_control_removeConstr(workingset, memspace->
        workspace_int.data[nFixedConstr - 1]);
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbiad(int32_T m, int32_T n, const
  real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      real_T c;
      int32_T d;
      int32_T ix;
      ix = 0;
      c = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        c += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += c;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbia(int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      real_T c;
      int32_T ix;
      ix = 0;
      c = 0.0;
      for (int32_T ia{iac}; ia <= iac + 138; ia++) {
        c += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += c;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
real_T proc_control::proc__maxConstraintViolation_du
  (s_gnTVUZmGpKWoq4tCE9AGn_proc__T *obj, const real_T x_data[])
{
  real_T v;
  int32_T mFixed;
  int32_T mIneq;
  int32_T mLB;
  int32_T mUB;
  mLB = obj->sizes[3];
  mUB = obj->sizes[4];
  mFixed = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_xgemv_mtmcjbia(obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, obj->maxConstrWorkspace.data);
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] -= x_data[b_k + 139];
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcjbia(130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (int32_T b_k{0}; b_k < 130; b_k++) {
      obj->maxConstrWorkspace.data[b_k] = (obj->maxConstrWorkspace.data[b_k] -
        x_data[(mIneq + b_k) + 140]) + x_data[(obj->sizes[2] + b_k) + 269];
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[b_k]));
    }
  } else {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_xgemv_mtmcjbiad(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcjbiad(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (mIneq = 0; mIneq < 130; mIneq++) {
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[mIneq]));
    }
  }

  if (mLB > 0) {
    for (mIneq = 0; mIneq < mLB; mIneq++) {
      v = std::fmax(v, -x_data[obj->indexLB.data[mIneq] - 1] - obj->lb.data
                    [obj->indexLB.data[mIneq] - 1]);
    }
  }

  if (mUB > 0) {
    for (mLB = 0; mLB < mUB; mLB++) {
      v = std::fmax(v, x_data[obj->indexUB.data[mLB] - 1] - obj->ub.data
                    [obj->indexUB.data[mLB] - 1]);
    }
  }

  if (mFixed > 0) {
    for (mUB = 0; mUB < mFixed; mUB++) {
      v = std::fmax(v, std::abs(x_data[obj->indexFixed.data[mUB] - 1] -
        obj->ub.data[obj->indexFixed.data[mUB] - 1]));
    }
  }

  return v;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_PresolveWorkingSet
  (s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *solution, s_j0X3urodUv3ospvkLXsspC_proc_T
   *memspace, s_gnTVUZmGpKWoq4tCE9AGn_proc__T *workingset,
   s_Ref0liQlfQOPmAop9i3aPH_proc_T *qrmanager)
{
  int32_T b;
  solution->state = 82;
  b = proc_control_RemoveDependentEq_(memspace, workingset, qrmanager);
  if ((b != -1) && (workingset->nActiveConstr <= qrmanager->ldq)) {
    boolean_T guard1{ false };

    boolean_T okWorkingSet;
    proc_contr_RemoveDependentIneq_(workingset, qrmanager, memspace);
    okWorkingSet = proc_co_feasibleX0ForWorkingSet
      (memspace->workspace_double.data, memspace->workspace_double.size,
       solution->xstar.data, workingset, qrmanager);
    guard1 = false;
    if (!okWorkingSet) {
      proc_con_RemoveDependentIneq__f(workingset, qrmanager, memspace);
      okWorkingSet = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         solution->xstar.data, workingset, qrmanager);
      if (!okWorkingSet) {
        solution->state = -7;
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      if (workingset->nWConstr[0] + workingset->nWConstr[1] == workingset->nVar)
      {
        real_T constrViolation;
        constrViolation = proc__maxConstraintViolation_du(workingset,
          solution->xstar.data);
        if (constrViolation > 0.02) {
          solution->state = -2;
        }
      }
    }
  } else {
    solution->state = -3;
    proc_contro_removeAllIneqConstr(workingset);
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbiadz(int32_T m, int32_T n, const
  real_T A[19321], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T iac;
    int32_T ix;
    for (ix = 0; ix < m; ix++) {
      y_data[ix] = 0.0;
    }

    ix = 0;
    b = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      int32_T c;
      int32_T iy;
      iy = 0;
      c = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= c; ia++) {
        y_data[iy] += A[ia - 1] * x_data[ix];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_contro_computeGrad_StoreHx
  (s_wbACub5hw4pAYPfHb1hrsB_proc_T *obj, const real_T H[19321], const real_T
   f_data[], const real_T x_data[])
{
  switch (obj->objtype) {
   case 5:
    for (int32_T maxRegVar{0}; maxRegVar <= obj->nvar - 2; maxRegVar++) {
      obj->grad.data[maxRegVar] = 0.0;
    }

    obj->grad.data[obj->nvar - 1] = obj->gammaScalar;
    break;

   case 3:
    {
      int32_T maxRegVar;
      proc_control_xgemv_mtmcjbiadz(obj->nvar, obj->nvar, H, obj->nvar, x_data,
        obj->Hx.data);
      for (maxRegVar = 0; maxRegVar < obj->nvar; maxRegVar++) {
        obj->grad.data[maxRegVar] = obj->Hx.data[maxRegVar];
      }

      if (obj->hasLinear && (obj->nvar >= 1)) {
        maxRegVar = obj->nvar - 1;
        for (int32_T iy{0}; iy <= maxRegVar; iy++) {
          obj->grad.data[iy] += f_data[iy];
        }
      }
    }
    break;

   default:
    {
      int32_T iy;
      int32_T maxRegVar;
      maxRegVar = obj->maxVar - 1;
      proc_control_xgemv_mtmcjbiadz(obj->nvar, obj->nvar, H, obj->nvar, x_data,
        obj->Hx.data);
      for (iy = obj->nvar; iy < maxRegVar; iy++) {
        obj->Hx.data[iy] = obj->beta * x_data[iy];
      }

      for (int32_T d_i{0}; d_i < maxRegVar; d_i++) {
        obj->grad.data[d_i] = obj->Hx.data[d_i];
      }

      if (obj->hasLinear && (obj->nvar >= 1)) {
        maxRegVar = obj->nvar - 1;
        for (iy = 0; iy <= maxRegVar; iy++) {
          obj->grad.data[iy] += f_data[iy];
        }
      }

      maxRegVar = (obj->maxVar - obj->nvar) - 1;
      if (maxRegVar >= 1) {
        iy = obj->nvar;
        for (int32_T d_i{0}; d_i < maxRegVar; d_i++) {
          obj->grad.data[iy] += obj->rho;
          iy++;
        }
      }
    }
    break;
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
real_T proc_control::proc_contro_computeFval_ReuseHx(const
  s_wbACub5hw4pAYPfHb1hrsB_proc_T *obj, real_T workspace_data[], const real_T
  f_data[], const real_T x_data[])
{
  real_T val;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    if (obj->hasLinear) {
      for (int32_T maxRegVar{0}; maxRegVar < obj->nvar; maxRegVar++) {
        workspace_data[maxRegVar] = 0.5 * obj->Hx.data[maxRegVar] +
          f_data[maxRegVar];
      }

      val = 0.0;
      if (obj->nvar >= 1) {
        for (int32_T maxRegVar{0}; maxRegVar < obj->nvar; maxRegVar++) {
          val += workspace_data[maxRegVar] * x_data[maxRegVar];
        }
      }
    } else {
      val = 0.0;
      if (obj->nvar >= 1) {
        for (int32_T maxRegVar{0}; maxRegVar < obj->nvar; maxRegVar++) {
          val += x_data[maxRegVar] * obj->Hx.data[maxRegVar];
        }
      }

      val *= 0.5;
    }
    break;

   default:
    {
      int32_T maxRegVar;
      maxRegVar = obj->maxVar - 1;
      if (obj->hasLinear) {
        int32_T d_k;
        for (d_k = 0; d_k < obj->nvar; d_k++) {
          workspace_data[d_k] = f_data[d_k];
        }

        d_k = obj->maxVar - obj->nvar;
        for (int32_T c_k{0}; c_k <= d_k - 2; c_k++) {
          workspace_data[obj->nvar + c_k] = obj->rho;
        }

        for (d_k = 0; d_k < maxRegVar; d_k++) {
          workspace_data[d_k] += 0.5 * obj->Hx.data[d_k];
        }

        val = 0.0;
        if (obj->maxVar - 1 >= 1) {
          for (maxRegVar = 0; maxRegVar <= obj->maxVar - 2; maxRegVar++) {
            val += workspace_data[maxRegVar] * x_data[maxRegVar];
          }
        }
      } else {
        val = 0.0;
        if (obj->maxVar - 1 >= 1) {
          for (int32_T d_k{0}; d_k <= obj->maxVar - 2; d_k++) {
            val += x_data[d_k] * obj->Hx.data[d_k];
          }
        }

        val *= 0.5;
        for (int32_T d_k = obj->nvar; d_k < maxRegVar; d_k++) {
          val += x_data[d_k] * obj->rho;
        }
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_deleteColMoveEnd(s_Ref0liQlfQOPmAop9i3aPH_proc_T
  *obj, int32_T idx)
{
  real_T b_s;
  real_T b_temp;
  real_T c_c;
  int32_T i;
  if (obj->usedPivoting) {
    i = 1;
    while ((i <= obj->ncols) && (obj->jpvt.data[i - 1] != idx)) {
      i++;
    }

    idx = i;
  }

  if (idx >= obj->ncols) {
    obj->ncols--;
  } else {
    obj->jpvt.data[idx - 1] = obj->jpvt.data[obj->ncols - 1];
    for (i = 0; i < obj->minRowCol; i++) {
      obj->QR.data[i + obj->ldq * (idx - 1)] = obj->QR.data[(obj->ncols - 1) *
        obj->ldq + i];
    }

    obj->ncols--;
    if (obj->mrows <= obj->ncols) {
      obj->minRowCol = obj->mrows;
    } else {
      obj->minRowCol = obj->ncols;
    }

    if (idx < obj->mrows) {
      int32_T QRk0;
      int32_T b_ix;
      int32_T idxRotGCol;
      int32_T ix;
      int32_T k;
      if (obj->mrows - 1 <= obj->ncols) {
        i = obj->mrows - 1;
      } else {
        i = obj->ncols;
      }

      k = i;
      idxRotGCol = (idx - 1) * obj->ldq;
      while (k >= idx) {
        QRk0 = k + idxRotGCol;
        b_temp = obj->QR.data[QRk0];
        xrotg_XzIjz1eG(&obj->QR.data[(k + idxRotGCol) - 1], &b_temp, &c_c, &b_s);
        obj->QR.data[QRk0] = b_temp;
        obj->QR.data[k + obj->ldq * (k - 1)] = 0.0;
        QRk0 = obj->ldq * idx + k;
        b_ix = obj->ncols - idx;
        if (b_ix >= 1) {
          ix = QRk0 - 1;
          for (int32_T d_k{0}; d_k < b_ix; d_k++) {
            b_temp = obj->QR.data[ix] * c_c + obj->QR.data[QRk0] * b_s;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * c_c - obj->QR.data[ix] *
              b_s;
            obj->QR.data[ix] = b_temp;
            QRk0 += obj->ldq;
            ix += obj->ldq;
          }
        }

        QRk0 = (k - 1) * obj->ldq;
        if (obj->mrows >= 1) {
          b_ix = obj->ldq + QRk0;
          for (ix = 0; ix < obj->mrows; ix++) {
            b_temp = obj->Q.data[QRk0] * c_c + obj->Q.data[b_ix] * b_s;
            obj->Q.data[b_ix] = obj->Q.data[b_ix] * c_c - obj->Q.data[QRk0] *
              b_s;
            obj->Q.data[QRk0] = b_temp;
            b_ix++;
            QRk0++;
          }
        }

        k--;
      }

      for (k = idx + 1; k <= i; k++) {
        idxRotGCol = (k - 1) * obj->ldq;
        QRk0 = k + idxRotGCol;
        b_temp = obj->QR.data[QRk0];
        xrotg_XzIjz1eG(&obj->QR.data[(k + idxRotGCol) - 1], &b_temp, &c_c, &b_s);
        obj->QR.data[QRk0] = b_temp;
        QRk0 = (obj->ldq + 1) * k;
        idxRotGCol = obj->ncols - k;
        if (idxRotGCol >= 1) {
          b_ix = QRk0 - 1;
          for (ix = 0; ix < idxRotGCol; ix++) {
            b_temp = obj->QR.data[b_ix] * c_c + obj->QR.data[QRk0] * b_s;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * c_c - obj->QR.data[b_ix] *
              b_s;
            obj->QR.data[b_ix] = b_temp;
            QRk0 += obj->ldq;
            b_ix += obj->ldq;
          }
        }

        idxRotGCol = (k - 1) * obj->ldq;
        if (obj->mrows >= 1) {
          QRk0 = obj->ldq + idxRotGCol;
          for (b_ix = 0; b_ix < obj->mrows; b_ix++) {
            b_temp = obj->Q.data[idxRotGCol] * c_c + obj->Q.data[QRk0] * b_s;
            obj->Q.data[QRk0] = obj->Q.data[QRk0] * c_c - obj->Q.data[idxRotGCol]
              * b_s;
            obj->Q.data[idxRotGCol] = b_temp;
            QRk0++;
            idxRotGCol++;
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
boolean_T proc_control::proc_control_strcmp(const char_T a[7])
{
  static const char_T b[7]{ 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  int32_T ret;
  ret = memcmp(&a[0], &b[0], 7);
  return ret == 0;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgemm(int32_T m, int32_T n, int32_T k, const
  real_T A[19321], int32_T lda, const real_T B_data[], int32_T ib0, int32_T ldb,
  real_T C_data[], int32_T ldc)
{
  if ((m != 0) && (n != 0)) {
    int32_T ar;
    int32_T br;
    int32_T cr;
    int32_T ib;
    int32_T lastColC;
    br = ib0;
    lastColC = (n - 1) * ldc;
    cr = 0;
    while (((ldc > 0) && (cr <= lastColC)) || ((ldc < 0) && (cr >= lastColC))) {
      ar = cr;
      ib = cr + m;
      while (ar + 1 <= ib) {
        C_data[ar] = 0.0;
        ar++;
      }

      cr += ldc;
    }

    cr = 0;
    while (((ldc > 0) && (cr <= lastColC)) || ((ldc < 0) && (cr >= lastColC))) {
      int32_T c;
      ar = -1;
      ib = br;
      c = br + k;
      while (ib <= c - 1) {
        int32_T b_ic;
        int32_T d;
        int32_T ia;
        ia = ar;
        b_ic = cr;
        d = cr + m;
        while (b_ic + 1 <= d) {
          ia++;
          C_data[b_ic] += B_data[ib - 1] * A[ia];
          b_ic++;
        }

        ar += lda;
        ib++;
      }

      br += ldb;
      cr += ldc;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgemm_m(int32_T m, int32_T n, int32_T k, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T B_data[], int32_T ldb,
  real_T C_data[], int32_T ldc)
{
  if ((m != 0) && (n != 0)) {
    int32_T ar;
    int32_T b_cr;
    int32_T br;
    int32_T lastColC;
    lastColC = (n - 1) * ldc;
    br = 0;
    while (((ldc > 0) && (br <= lastColC)) || ((ldc < 0) && (br >= lastColC))) {
      b_cr = br;
      ar = br + m;
      while (b_cr + 1 <= ar) {
        C_data[b_cr] = 0.0;
        b_cr++;
      }

      br += ldc;
    }

    br = -1;
    b_cr = 0;
    while (((ldc > 0) && (b_cr <= lastColC)) || ((ldc < 0) && (b_cr >= lastColC)))
    {
      int32_T b_ic;
      int32_T c;
      ar = ia0;
      b_ic = b_cr;
      c = b_cr + m;
      while (b_ic + 1 <= c) {
        real_T temp;
        temp = 0.0;
        for (int32_T w{1}; w - 1 < k; w++) {
          temp += A_data[(w + ar) - 2] * B_data[w + br];
        }

        C_data[b_ic] += temp;
        ar += lda;
        b_ic++;
      }

      br += ldb;
      b_cr += ldc;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
int32_T proc_control::proc_control_ixamax_k(int32_T n, const real_T x_data[],
  int32_T incx)
{
  int32_T idxmax;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      real_T smax;
      int32_T ix;
      ix = 0;
      smax = std::abs(x_data[0]);
      for (int32_T k{2}; k <= n; k++) {
        real_T s;
        ix += incx;
        s = std::abs(x_data[ix]);
        if (s > smax) {
          idxmax = k;
          smax = s;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_fullColLDL2_(s_8RbNZtrzTH63iHAPCwMh6G_proc_T
  *obj, int32_T LD_offset, int32_T NColsRemain)
{
  int32_T LDimSizeP1;
  LDimSizeP1 = obj->ldm;
  for (int32_T k{0}; k < NColsRemain; k++) {
    real_T alpha1;
    real_T y;
    int32_T LD_diagOffset;
    int32_T j;
    int32_T jA;
    int32_T subMatrixDim;
    LD_diagOffset = ((LDimSizeP1 + 1) * k + LD_offset) - 1;
    alpha1 = -1.0 / obj->FMat.data[LD_diagOffset];
    subMatrixDim = (NColsRemain - k) - 2;
    for (jA = 1; jA - 1 <= subMatrixDim; jA++) {
      obj->workspace_ = obj->FMat.data[LD_diagOffset + jA];
    }

    y = obj->workspace_;
    if (!(alpha1 == 0.0)) {
      jA = (LD_diagOffset + LDimSizeP1) + 1;
      for (j = 0; j <= subMatrixDim; j++) {
        if (y != 0.0) {
          real_T temp;
          int32_T b;
          int32_T ijA;
          temp = y * alpha1;
          ijA = jA;
          b = subMatrixDim + jA;
          while (ijA + 1 <= b + 1) {
            obj->FMat.data[ijA] += obj->workspace_ * temp;
            ijA++;
          }
        }

        jA += obj->ldm;
      }
    }

    for (jA = 1; jA - 1 <= subMatrixDim; jA++) {
      j = LD_diagOffset + jA;
      obj->FMat.data[j] /= obj->FMat.data[LD_diagOffset];
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_partialColLDL3_(s_8RbNZtrzTH63iHAPCwMh6G_proc_T *
  obj, int32_T LD_offset, int32_T NColsRemain)
{
  int32_T FMat_offset;
  int32_T LD_diagOffset;
  int32_T LDimSizeP1;
  int32_T br;
  int32_T d;
  int32_T ia;
  int32_T idx;
  int32_T ix;
  int32_T subRows;
  LDimSizeP1 = obj->ldm + 1;
  for (int32_T k{0}; k < 48; k++) {
    real_T y;
    subRows = (NColsRemain - k) - 1;
    LD_diagOffset = (LDimSizeP1 * k + LD_offset) - 1;
    for (idx = 0; idx <= subRows; idx++) {
      obj->workspace_ = obj->FMat.data[LD_diagOffset + idx];
    }

    for (idx = 0; idx < NColsRemain; idx++) {
      obj->workspace2_ = obj->workspace_;
    }

    idx = obj->ldm;
    y = obj->workspace2_;
    if ((NColsRemain != 0) && (k != 0)) {
      ix = LD_offset + k;
      FMat_offset = (k - 1) * obj->ldm + 1;
      br = 1;
      while (((idx > 0) && (br <= FMat_offset)) || ((idx < 0) && (br >=
               FMat_offset))) {
        d = (br + NColsRemain) - 1;
        for (ia = br; ia <= d; ia++) {
          y += -obj->FMat.data[ix - 1] * obj->workspace_;
        }

        ix += obj->ldm;
        br += idx;
      }
    }

    obj->workspace2_ = y;
    for (idx = 0; idx < NColsRemain; idx++) {
      obj->workspace_ = y;
    }

    for (idx = 0; idx <= subRows; idx++) {
      obj->FMat.data[LD_diagOffset + idx] = obj->workspace_;
    }

    for (idx = 1; idx - 1 < subRows; idx++) {
      ix = LD_diagOffset + idx;
      obj->FMat.data[ix] /= obj->FMat.data[LD_diagOffset];
    }
  }

  for (int32_T k{48}; k <= NColsRemain - 1; k += 48) {
    int32_T LD_diagOffset_tmp;
    int32_T h;
    int32_T iy;
    LD_diagOffset = NColsRemain - k;
    if (LD_diagOffset >= 48) {
      subRows = 48;
    } else {
      subRows = LD_diagOffset;
    }

    LD_diagOffset_tmp = k + subRows;
    for (idx = k; idx < LD_diagOffset_tmp; idx++) {
      ix = LD_diagOffset_tmp - idx;
      FMat_offset = (LDimSizeP1 * idx + LD_offset) - 1;
      for (br = 0; br < 48; br++) {
        obj->workspace2_ = obj->FMat.data[((LD_offset + idx) + br * obj->ldm) -
          1];
      }

      br = obj->ldm;
      if (ix != 0) {
        d = (obj->ldm * 47 + idx) + 1;
        ia = idx + 1;
        while (((br > 0) && (ia <= d)) || ((br < 0) && (ia >= d))) {
          iy = FMat_offset;
          h = (ia + ix) - 1;
          for (int32_T b_ia{ia}; b_ia <= h; b_ia++) {
            obj->FMat.data[iy] += obj->workspace_ * -obj->workspace2_;
            iy++;
          }

          ia += br;
        }
      }
    }

    if (LD_diagOffset_tmp < NColsRemain) {
      LD_diagOffset -= subRows;
      idx = ((LD_offset + subRows) + LDimSizeP1 * k) - 1;
      for (ix = 0; ix < 48; ix++) {
        FMat_offset = (LD_offset + k) + ix * obj->ldm;
        for (br = 0; br < subRows; br++) {
          obj->workspace2_ = obj->FMat.data[(FMat_offset + br) - 1];
        }
      }

      ix = obj->ldm;
      FMat_offset = obj->ldm;
      if ((LD_diagOffset != 0) && (subRows != 0)) {
        subRows = (subRows - 1) * obj->ldm + idx;
        br = 0;
        while (((FMat_offset > 0) && (idx <= subRows)) || ((FMat_offset < 0) &&
                (idx >= subRows))) {
          br++;
          d = ix * 47 + br;
          ia = br;
          while (((ix > 0) && (ia <= d)) || ((ix < 0) && (ia >= d))) {
            iy = idx;
            h = idx + LD_diagOffset;
            while (iy + 1 <= h) {
              obj->FMat.data[iy] += -obj->workspace2_ * obj->workspace_;
              iy++;
            }

            ia += ix;
          }

          idx += FMat_offset;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
int32_T proc_control::proc_control_xpotrf_h(int32_T n, real_T A_data[], int32_T
  lda)
{
  int32_T b_j;
  int32_T info;
  boolean_T exitg1;
  info = 0;
  b_j = 0;
  exitg1 = false;
  while ((!exitg1) && (b_j <= n - 1)) {
    real_T ssq;
    int32_T b_ix;
    int32_T b_iy;
    int32_T idxA1j;
    int32_T idxAjj;
    int32_T iy;
    idxA1j = b_j * lda;
    idxAjj = idxA1j + b_j;
    ssq = 0.0;
    if (b_j >= 1) {
      b_ix = idxA1j;
      b_iy = idxA1j;
      for (iy = 0; iy < b_j; iy++) {
        ssq += A_data[b_ix] * A_data[b_iy];
        b_ix++;
        b_iy++;
      }
    }

    ssq = A_data[idxAjj] - ssq;
    if (ssq > 0.0) {
      ssq = std::sqrt(ssq);
      A_data[idxAjj] = ssq;
      if (b_j + 1 < n) {
        b_ix = (n - b_j) - 2;
        b_iy = (idxA1j + lda) + 1;
        idxAjj += lda;
        if ((b_j != 0) && (b_ix + 1 != 0)) {
          int32_T b;
          iy = idxAjj;
          b = lda * b_ix + b_iy;
          while (((lda > 0) && (b_iy <= b)) || ((lda < 0) && (b_iy >= b))) {
            real_T c;
            int32_T d;
            int32_T ix;
            ix = idxA1j;
            c = 0.0;
            d = (b_iy + b_j) - 1;
            for (int32_T ia{b_iy}; ia <= d; ia++) {
              c += A_data[ia - 1] * A_data[ix];
              ix++;
            }

            A_data[iy] += -c;
            iy += lda;
            b_iy += lda;
          }
        }

        ssq = 1.0 / ssq;
        idxA1j = (lda * b_ix + idxAjj) + 1;
        while (((lda > 0) && (idxAjj + 1 <= idxA1j)) || ((lda < 0) && (idxAjj +
                 1 >= idxA1j))) {
          A_data[idxAjj] *= ssq;
          idxAjj += lda;
        }
      }

      b_j++;
    } else {
      A_data[idxAjj] = ssq;
      info = b_j + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbiadz2(int32_T m, int32_T n, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  if (m != 0) {
    int32_T b;
    int32_T iac;
    int32_T ix;
    for (ix = 0; ix < m; ix++) {
      y_data[ix] = 0.0;
    }

    ix = 0;
    b = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      int32_T c;
      int32_T iy;
      iy = 0;
      c = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= c; ia++) {
        y_data[iy] += A_data[ia - 1] * x_data[ix];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_factor(s_8RbNZtrzTH63iHAPCwMh6G_proc_T *obj,
  const real_T A[19321], int32_T ndims, int32_T ldA)
{
  obj->ndims = ndims;
  for (int32_T b_idx{0}; b_idx < ndims; b_idx++) {
    int32_T idx;
    int32_T ix0;
    ix0 = ldA * b_idx;
    idx = obj->ldm * b_idx;
    for (int32_T k{1}; k - 1 < ndims; k++) {
      obj->FMat.data[(idx + k) - 1] = A[(ix0 + k) - 1];
    }
  }

  obj->info = proc_control_xpotrf_h(ndims, obj->FMat.data, obj->ldm);
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_solve(const s_8RbNZtrzTH63iHAPCwMh6G_proc_T *obj,
  real_T rhs_data[])
{
  if (obj->ndims != 0) {
    int32_T ix;
    int32_T jA;
    for (int32_T b_j{0}; b_j < obj->ndims; b_j++) {
      real_T temp;
      jA = b_j * obj->ldm;
      temp = rhs_data[b_j];
      for (ix = 0; ix < b_j; ix++) {
        temp -= obj->FMat.data[jA + ix] * rhs_data[ix];
      }

      rhs_data[b_j] = temp / obj->FMat.data[jA + b_j];
    }

    for (int32_T b_j{obj->ndims - 1}; b_j + 1 > 0; b_j--) {
      int32_T jjA;
      jjA = b_j * obj->ldm + b_j;
      rhs_data[b_j] /= obj->FMat.data[jjA];
      for (jA = 1; jA - 1 < b_j; jA++) {
        ix = b_j - jA;
        rhs_data[ix] -= obj->FMat.data[jjA - jA] * rhs_data[b_j];
      }
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_factor_p(s_8RbNZtrzTH63iHAPCwMh6G_proc_T *obj,
  const real_T A[19321], int32_T ndims, int32_T ldA)
{
  int32_T A_maxDiag_idx;
  int32_T LD_diagOffset;
  int32_T LDimSizeP1;
  int32_T order;
  LDimSizeP1 = obj->ldm + 1;
  obj->ndims = ndims;
  for (A_maxDiag_idx = 0; A_maxDiag_idx < ndims; A_maxDiag_idx++) {
    LD_diagOffset = ldA * A_maxDiag_idx;
    order = obj->ldm * A_maxDiag_idx;
    for (int32_T b_k{1}; b_k - 1 < ndims; b_k++) {
      obj->FMat.data[(order + b_k) - 1] = A[(LD_diagOffset + b_k) - 1];
    }
  }

  A_maxDiag_idx = proc_control_ixamax_k(ndims, obj->FMat.data, obj->ldm + 1) - 1;
  obj->regTol_ = std::fmax(std::abs(obj->FMat.data[obj->ldm * A_maxDiag_idx +
    A_maxDiag_idx]) * 2.2204460492503131E-16, 0.0);
  if (ndims > 128) {
    boolean_T exitg1;
    A_maxDiag_idx = 0;
    exitg1 = false;
    while ((!exitg1) && (A_maxDiag_idx < ndims)) {
      LD_diagOffset = LDimSizeP1 * A_maxDiag_idx + 1;
      order = ndims - A_maxDiag_idx;
      if (A_maxDiag_idx + 48 <= ndims) {
        proc_control_partialColLDL3_(obj, LD_diagOffset, order);
        A_maxDiag_idx += 48;
      } else {
        proc_control_fullColLDL2_(obj, LD_diagOffset, order);
        exitg1 = true;
      }
    }
  } else {
    proc_control_fullColLDL2_(obj, 1, ndims);
  }

  if (obj->ConvexCheck) {
    LDimSizeP1 = 0;
    int32_T exitg2;
    do {
      exitg2 = 0;
      if (LDimSizeP1 <= ndims - 1) {
        if (obj->FMat.data[obj->ldm * LDimSizeP1 + LDimSizeP1] <= 0.0) {
          obj->info = -LDimSizeP1 - 1;
          exitg2 = 1;
        } else {
          LDimSizeP1++;
        }
      } else {
        obj->ConvexCheck = false;
        exitg2 = 1;
      }
    } while (exitg2 == 0);
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_solve_l(const s_8RbNZtrzTH63iHAPCwMh6G_proc_T
  *obj, real_T rhs_data[])
{
  int32_T b;
  int32_T jA;
  int32_T jjA;
  int32_T n_tmp;
  n_tmp = obj->ndims - 1;
  if (obj->ndims != 0) {
    for (jA = 0; jA <= n_tmp; jA++) {
      jjA = jA * obj->ldm + jA;
      b = n_tmp - jA;
      for (int32_T i{1}; i - 1 < b; i++) {
        int32_T ix;
        ix = jA + i;
        rhs_data[ix] -= obj->FMat.data[jjA + i] * rhs_data[jA];
      }
    }
  }

  for (b = 0; b <= n_tmp; b++) {
    rhs_data[b] /= obj->FMat.data[obj->ldm * b + b];
  }

  if (obj->ndims != 0) {
    for (b = obj->ndims - 1; b + 1 > 0; b--) {
      real_T temp;
      jA = b * obj->ldm;
      temp = rhs_data[b];
      for (jjA = obj->ndims; jjA >= b + 2; jjA--) {
        temp -= obj->FMat.data[(jA + jjA) - 1] * rhs_data[jjA - 1];
      }

      rhs_data[b] = temp;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_compute_deltax(const real_T H[19321],
  s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *solution, s_j0X3urodUv3ospvkLXsspC_proc_T
  *memspace, const s_Ref0liQlfQOPmAop9i3aPH_proc_T *qrmanager,
  s_8RbNZtrzTH63iHAPCwMh6G_proc_T *cholmanager, const
  s_wbACub5hw4pAYPfHb1hrsB_proc_T *objective, boolean_T alwaysPositiveDef)
{
  int32_T mNull;
  int32_T nVar;
  nVar = qrmanager->mrows - 1;
  mNull = qrmanager->mrows - qrmanager->ncols;
  if (mNull <= 0) {
    for (mNull = 0; mNull <= nVar; mNull++) {
      solution->searchDir.data[mNull] = 0.0;
    }
  } else {
    int32_T nullStartIdx;
    for (nullStartIdx = 0; nullStartIdx <= nVar; nullStartIdx++) {
      solution->searchDir.data[nullStartIdx] = -objective->
        grad.data[nullStartIdx];
    }

    if (qrmanager->ncols <= 0) {
      switch (objective->objtype) {
       case 5:
        break;

       case 3:
        if (alwaysPositiveDef) {
          proc_control_factor(cholmanager, H, qrmanager->mrows, qrmanager->mrows);
        } else {
          proc_control_factor_p(cholmanager, H, qrmanager->mrows,
                                qrmanager->mrows);
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else if (alwaysPositiveDef) {
          proc_control_solve(cholmanager, solution->searchDir.data);
        } else {
          proc_control_solve_l(cholmanager, solution->searchDir.data);
        }
        break;

       default:
        {
          if (alwaysPositiveDef) {
            proc_control_factor(cholmanager, H, objective->nvar, objective->nvar);
            if (cholmanager->info != 0) {
              solution->state = -6;
            } else {
              real_T c;
              proc_control_solve(cholmanager, solution->searchDir.data);
              c = 1.0 / objective->beta;
              for (mNull = objective->nvar; mNull < qrmanager->mrows; mNull++) {
                solution->searchDir.data[mNull] *= c;
              }
            }
          }
        }
        break;
      }
    } else {
      nullStartIdx = qrmanager->ldq * qrmanager->ncols + 1;
      if (objective->objtype == 5) {
        for (int32_T b_ldw{0}; b_ldw < mNull; b_ldw++) {
          memspace->workspace_double.data[b_ldw] = -qrmanager->Q.data
            [(qrmanager->ncols + b_ldw) * qrmanager->ldq + nVar];
        }

        proc_control_xgemv_mtmcjbiadz2(qrmanager->mrows, mNull,
          qrmanager->Q.data, nullStartIdx, qrmanager->ldq,
          memspace->workspace_double.data, solution->searchDir.data);
      } else {
        int32_T b_ldw;
        int32_T b_nullStart;
        int32_T ix;
        int32_T order;
        if (objective->objtype == 3) {
          proc_control_xgemm(qrmanager->mrows, mNull, qrmanager->mrows, H,
                             qrmanager->mrows, qrmanager->Q.data, nullStartIdx,
                             qrmanager->ldq, memspace->workspace_double.data,
                             memspace->workspace_double.size[0]);
          proc_control_xgemm_m(mNull, mNull, qrmanager->mrows, qrmanager->Q.data,
                               nullStartIdx, qrmanager->ldq,
                               memspace->workspace_double.data,
                               memspace->workspace_double.size[0],
                               cholmanager->FMat.data, cholmanager->ldm);
        } else if (alwaysPositiveDef) {
          b_ldw = memspace->workspace_double.size[0];
          proc_control_xgemm(objective->nvar, mNull, objective->nvar, H,
                             objective->nvar, qrmanager->Q.data, nullStartIdx,
                             qrmanager->ldq, memspace->workspace_double.data,
                             memspace->workspace_double.size[0]);
          for (order = 0; order < mNull; order++) {
            for (ix = objective->nvar; ix < qrmanager->mrows; ix++) {
              memspace->workspace_double.data[ix +
                memspace->workspace_double.size[0] * order] = qrmanager->Q.data
                [(order + qrmanager->ncols) * qrmanager->Q.size[0] + ix] *
                objective->beta;
            }
          }

          proc_control_xgemm_m(mNull, mNull, qrmanager->mrows, qrmanager->Q.data,
                               nullStartIdx, qrmanager->ldq,
                               memspace->workspace_double.data, b_ldw,
                               cholmanager->FMat.data, cholmanager->ldm);
        }

        if (alwaysPositiveDef) {
          cholmanager->ndims = mNull;
          cholmanager->info = proc_control_xpotrf_h(mNull,
            cholmanager->FMat.data, cholmanager->ldm);
        } else {
          b_ldw = cholmanager->ldm + 1;
          cholmanager->ndims = mNull;
          b_nullStart = proc_control_ixamax_k(mNull, cholmanager->FMat.data,
            cholmanager->ldm + 1) - 1;
          cholmanager->regTol_ = std::fmax(std::abs(cholmanager->
            FMat.data[cholmanager->ldm * b_nullStart + b_nullStart]) *
            2.2204460492503131E-16, 0.0);
          if (mNull > 128) {
            boolean_T exitg1;
            ix = 0;
            exitg1 = false;
            while ((!exitg1) && (ix < mNull)) {
              b_nullStart = b_ldw * ix + 1;
              order = mNull - ix;
              if (ix + 48 <= mNull) {
                proc_control_partialColLDL3_(cholmanager, b_nullStart, order);
                ix += 48;
              } else {
                proc_control_fullColLDL2_(cholmanager, b_nullStart, order);
                exitg1 = true;
              }
            }
          } else {
            proc_control_fullColLDL2_(cholmanager, 1, mNull);
          }

          if (cholmanager->ConvexCheck) {
            ix = 0;
            int32_T exitg2;
            do {
              exitg2 = 0;
              if (ix <= mNull - 1) {
                if (cholmanager->FMat.data[cholmanager->ldm * ix + ix] <= 0.0) {
                  cholmanager->info = -ix - 1;
                  exitg2 = 1;
                } else {
                  ix++;
                }
              } else {
                cholmanager->ConvexCheck = false;
                exitg2 = 1;
              }
            } while (exitg2 == 0);
          }
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else {
          real_T c;
          int32_T b_ix;
          int32_T b_ldw_tmp;
          int32_T idx_col;
          b_ldw = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            for (ix = 0; ix < mNull; ix++) {
              memspace->workspace_double.data[ix] = 0.0;
            }

            b_nullStart = 0;
            order = (mNull - 1) * qrmanager->ldq + nullStartIdx;
            idx_col = nullStartIdx;
            while (((b_ldw > 0) && (idx_col <= order)) || ((b_ldw < 0) &&
                    (idx_col >= order))) {
              ix = 0;
              c = 0.0;
              b_ix = idx_col + nVar;
              for (b_ldw_tmp = idx_col; b_ldw_tmp <= b_ix; b_ldw_tmp++) {
                c += qrmanager->Q.data[b_ldw_tmp - 1] * objective->grad.data[ix];
                ix++;
              }

              memspace->workspace_double.data[b_nullStart] += -c;
              b_nullStart++;
              idx_col += b_ldw;
            }
          }

          if (alwaysPositiveDef) {
            if (cholmanager->ndims != 0) {
              for (b_ldw = 0; b_ldw < cholmanager->ndims; b_ldw++) {
                order = b_ldw * cholmanager->ldm;
                c = memspace->workspace_double.data[b_ldw];
                for (idx_col = 0; idx_col < b_ldw; idx_col++) {
                  c -= cholmanager->FMat.data[order + idx_col] *
                    memspace->workspace_double.data[idx_col];
                }

                memspace->workspace_double.data[b_ldw] = c /
                  cholmanager->FMat.data[order + b_ldw];
              }
            }

            proc_control_xtrsv(cholmanager->ndims, cholmanager->FMat.data,
                               cholmanager->ldm, memspace->workspace_double.data);
          } else {
            b_ldw_tmp = cholmanager->ndims - 1;
            if (cholmanager->ndims != 0) {
              for (b_nullStart = 0; b_nullStart <= b_ldw_tmp; b_nullStart++) {
                order = b_nullStart * cholmanager->ldm + b_nullStart;
                idx_col = b_ldw_tmp - b_nullStart;
                for (ix = 1; ix - 1 < idx_col; ix++) {
                  b_ix = b_nullStart + ix;
                  memspace->workspace_double.data[b_ix] -=
                    cholmanager->FMat.data[order + ix] *
                    memspace->workspace_double.data[b_nullStart];
                }
              }
            }

            for (b_ldw = 0; b_ldw <= b_ldw_tmp; b_ldw++) {
              memspace->workspace_double.data[b_ldw] /= cholmanager->
                FMat.data[cholmanager->ldm * b_ldw + b_ldw];
            }

            if (cholmanager->ndims != 0) {
              for (b_ldw = cholmanager->ndims - 1; b_ldw + 1 > 0; b_ldw--) {
                b_nullStart = b_ldw * cholmanager->ldm;
                c = memspace->workspace_double.data[b_ldw];
                for (order = cholmanager->ndims; order >= b_ldw + 2; order--) {
                  c -= cholmanager->FMat.data[(b_nullStart + order) - 1] *
                    memspace->workspace_double.data[order - 1];
                }

                memspace->workspace_double.data[b_ldw] = c;
              }
            }
          }

          proc_control_xgemv_mtmcjbiadz2(qrmanager->mrows, mNull,
            qrmanager->Q.data, nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, solution->searchDir.data);
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
real_T proc_control::proc_control_xnrm2_md(int32_T n, const real_T x_data[])
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x_data[0]);
    } else {
      real_T scale;
      scale = 3.3121686421112381E-170;
      for (int32_T k{0}; k < n; k++) {
        real_T absxk;
        absxk = std::abs(x_data[k]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbiadz2i(int32_T m, int32_T n, const
  real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      real_T c;
      int32_T d;
      int32_T ix;
      ix = 0;
      c = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        c += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += c;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_feasibleratiotest(const real_T
  solution_xstar_data[], const real_T solution_searchDir_data[], real_T
  workspace_data[], const int32_T workspace_size[2], int32_T workingset_nVar,
  int32_T workingset_ldA, const real_T workingset_Aineq_data[], const real_T
  workingset_bineq_data[], const real_T workingset_lb_data[], const int32_T
  workingset_indexLB_data[], const int32_T workingset_sizes[5], const int32_T
  workingset_isActiveIdx[6], const boolean_T workingset_isActiveConstr_data[],
  const int32_T workingset_nWConstr[5], boolean_T isPhaseOne, real_T *alpha,
  boolean_T *newBlocking, int32_T *constrType, int32_T *constrIdx)
{
  real_T c;
  real_T denomTol;
  real_T ratio;
  int32_T b_iy;
  int32_T totalIneq;
  totalIneq = workingset_sizes[2] - 1;
  *alpha = 1.0E+30;
  *newBlocking = false;
  *constrType = 0;
  *constrIdx = 0;
  denomTol = 2.2204460492503131E-13 * proc_control_xnrm2_md(workingset_nVar,
    solution_searchDir_data);
  if (workingset_nWConstr[2] < workingset_sizes[2]) {
    int32_T iyend;
    int32_T ldw;
    for (ldw = 0; ldw <= totalIneq; ldw++) {
      workspace_data[ldw] = workingset_bineq_data[ldw];
    }

    proc_control_xgemv_mtmcjbiadz2i(workingset_nVar, workingset_sizes[2],
      workingset_Aineq_data, workingset_ldA, solution_xstar_data, workspace_data);
    ldw = workspace_size[0];
    if (workingset_sizes[2] != 0) {
      int32_T iac;
      iyend = workspace_size[0] + workingset_sizes[2];
      for (b_iy = workspace_size[0]; b_iy < iyend; b_iy++) {
        workspace_data[b_iy] = 0.0;
      }

      iyend = workspace_size[0];
      b_iy = (workingset_sizes[2] - 1) * workingset_ldA + 1;
      iac = 1;
      while (((workingset_ldA > 0) && (iac <= b_iy)) || ((workingset_ldA < 0) &&
              (iac >= b_iy))) {
        int32_T d;
        int32_T ix;
        ix = 0;
        c = 0.0;
        d = (iac + workingset_nVar) - 1;
        for (int32_T ia{iac}; ia <= d; ia++) {
          c += workingset_Aineq_data[ia - 1] * solution_searchDir_data[ix];
          ix++;
        }

        workspace_data[iyend] += c;
        iyend++;
        iac += workingset_ldA;
      }
    }

    for (iyend = 0; iyend <= totalIneq; iyend++) {
      b_iy = ldw + iyend;
      if ((workspace_data[b_iy] > denomTol) && (!workingset_isActiveConstr_data
           [(workingset_isActiveIdx[2] + iyend) - 1])) {
        ratio = std::fmin(std::abs(workspace_data[iyend]), 0.02 -
                          workspace_data[iyend]) / workspace_data[b_iy];
        if (ratio < *alpha) {
          *alpha = ratio;
          *constrType = 3;
          *constrIdx = iyend + 1;
          *newBlocking = true;
        }
      }
    }
  }

  if (workingset_nWConstr[3] < workingset_sizes[3]) {
    real_T phaseOneCorrectionP;
    c = solution_xstar_data[workingset_nVar - 1] * static_cast<real_T>
      (isPhaseOne);
    phaseOneCorrectionP = solution_searchDir_data[workingset_nVar - 1] *
      static_cast<real_T>(isPhaseOne);
    for (totalIneq = 0; totalIneq <= workingset_sizes[3] - 2; totalIneq++) {
      real_T pk_corrected;
      pk_corrected = -solution_searchDir_data[workingset_indexLB_data[totalIneq]
        - 1] - phaseOneCorrectionP;
      if ((pk_corrected > denomTol) && (!workingset_isActiveConstr_data
           [(workingset_isActiveIdx[3] + totalIneq) - 1])) {
        ratio = (-solution_xstar_data[workingset_indexLB_data[totalIneq] - 1] -
                 workingset_lb_data[workingset_indexLB_data[totalIneq] - 1]) - c;
        ratio = std::fmin(std::abs(ratio), 0.02 - ratio) / pk_corrected;
        if (ratio < *alpha) {
          *alpha = ratio;
          *constrType = 4;
          *constrIdx = totalIneq + 1;
          *newBlocking = true;
        }
      }
    }

    b_iy = workingset_indexLB_data[workingset_sizes[3] - 1] - 1;
    c = -solution_searchDir_data[b_iy];
    if ((c > denomTol) && (!workingset_isActiveConstr_data
                           [(workingset_isActiveIdx[3] + workingset_sizes[3]) -
                           2])) {
      ratio = -solution_xstar_data[b_iy] - workingset_lb_data[b_iy];
      ratio = std::fmin(std::abs(ratio), 0.02 - ratio) / c;
      if (ratio < *alpha) {
        *alpha = ratio;
        *constrType = 4;
        *constrIdx = workingset_sizes[3];
        *newBlocking = true;
      }
    }
  }

  if (!isPhaseOne) {
    *newBlocking = (((!*newBlocking) || (!(*alpha > 1.0))) && (*newBlocking));
    *alpha = std::fmin(*alpha, 1.0);
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_c_checkUnboundedOrIllPosed
  (s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *solution, const
   s_wbACub5hw4pAYPfHb1hrsB_proc_T *objective)
{
  if (objective->objtype == 5) {
    if (proc_control_xnrm2_md(objective->nvar, solution->searchDir.data) > 100.0
        * static_cast<real_T>(objective->nvar) * 1.4901161193847656E-8) {
      solution->state = 3;
    } else {
      solution->state = 4;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_addBoundToActiveSetMatrix_
  (s_gnTVUZmGpKWoq4tCE9AGn_proc__T *obj, int32_T TYPE, int32_T idx_local)
{
  int32_T colOffset;
  int32_T idx_bnd_local;
  obj->nWConstr[TYPE - 1]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE - 1] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = TYPE;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  colOffset = (obj->nActiveConstr - 1) * obj->ldA - 1;
  if (TYPE == 5) {
    idx_bnd_local = obj->indexUB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->ub.data[idx_bnd_local - 1];
  } else {
    idx_bnd_local = obj->indexLB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->lb.data[idx_bnd_local - 1];
  }

  for (int32_T idx{0}; idx <= idx_bnd_local - 2; idx++) {
    obj->ATwset.data[(idx + colOffset) + 1] = 0.0;
  }

  obj->ATwset.data[idx_bnd_local + colOffset] = static_cast<real_T>(TYPE == 5) *
    2.0 - 1.0;
  for (idx_bnd_local++; idx_bnd_local <= obj->nVar; idx_bnd_local++) {
    obj->ATwset.data[idx_bnd_local + colOffset] = 0.0;
  }

  switch (obj->probType) {
   case 3:
   case 2:
    break;

   default:
    obj->ATwset.data[obj->nVar + colOffset] = -1.0;
    break;
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_addAineqConstr(s_gnTVUZmGpKWoq4tCE9AGn_proc__T
  *obj, int32_T idx_local)
{
  int32_T iAineq0;
  int32_T iAw0;
  obj->nWConstr[2]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[2] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = 3;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  iAineq0 = (idx_local - 1) * obj->ldA;
  iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
  for (int32_T idx{0}; idx < obj->nVar; idx++) {
    obj->ATwset.data[iAw0 + idx] = obj->Aineq.data[iAineq0 + idx];
  }

  obj->bwset.data[obj->nActiveConstr - 1] = obj->bineq.data[idx_local - 1];
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_checkStoppingAndUpdateFval(int32_T *activeSetChangeID,
  const real_T f_data[], s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *solution,
  s_j0X3urodUv3ospvkLXsspC_proc_T *memspace, const
  s_wbACub5hw4pAYPfHb1hrsB_proc_T *objective, s_gnTVUZmGpKWoq4tCE9AGn_proc__T
  *workingset, s_Ref0liQlfQOPmAop9i3aPH_proc_T *qrmanager, real_T
  options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations, boolean_T
  updateFval)
{
  int32_T nVar_tmp_tmp;
  solution->iterations++;
  nVar_tmp_tmp = objective->nvar - 1;
  if ((solution->iterations >= runTimeOptions_MaxIterations) &&
      ((solution->state != 1) || (objective->objtype == 5))) {
    solution->state = 0;
  }

  if (solution->iterations - solution->iterations / 50 * 50 == 0) {
    real_T tempMaxConstr;
    solution->maxConstr = proc__maxConstraintViolation_du(workingset,
      solution->xstar.data);
    tempMaxConstr = solution->maxConstr;
    if (objective->objtype == 5) {
      tempMaxConstr = solution->maxConstr - solution->xstar.data[objective->nvar
        - 1];
    }

    if (tempMaxConstr > 0.02) {
      int32_T y_size_idx_0;
      boolean_T nonDegenerateWset;
      y_size_idx_0 = solution->searchDir.size;
      if (solution->searchDir.size - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_j[0], &solution->searchDir.data[0],
                    solution->searchDir.size * sizeof(real_T));
      }

      for (int32_T loop_ub{0}; loop_ub <= nVar_tmp_tmp; loop_ub++) {
        proc_control_B.y_data_j[loop_ub] = solution->xstar.data[loop_ub];
      }

      if (y_size_idx_0 - 1 >= 0) {
        std::memcpy(&solution->searchDir.data[0], &proc_control_B.y_data_j[0],
                    y_size_idx_0 * sizeof(real_T));
      }

      nonDegenerateWset = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         solution->searchDir.data, workingset, qrmanager);
      if ((!nonDegenerateWset) && (solution->state != 0)) {
        solution->state = -2;
      }

      *activeSetChangeID = 0;
      tempMaxConstr = proc__maxConstraintViolation_du(workingset,
        solution->searchDir.data);
      if (tempMaxConstr < solution->maxConstr) {
        for (int32_T loop_ub{0}; loop_ub <= nVar_tmp_tmp; loop_ub++) {
          solution->xstar.data[loop_ub] = solution->searchDir.data[loop_ub];
        }

        solution->maxConstr = tempMaxConstr;
      }
    }
  }

  if (updateFval && (options_ObjectiveLimit > (rtMinusInf))) {
    solution->fstar = proc_contro_computeFval_ReuseHx(objective,
      memspace->workspace_double.data, f_data, solution->xstar.data);
    if ((solution->fstar < options_ObjectiveLimit) && ((solution->state != 0) ||
         (objective->objtype != 5))) {
      solution->state = 2;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_iterate(const real_T H[19321], const real_T
  f_data[], s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *solution,
  s_j0X3urodUv3ospvkLXsspC_proc_T *memspace, s_gnTVUZmGpKWoq4tCE9AGn_proc__T
  *workingset, s_Ref0liQlfQOPmAop9i3aPH_proc_T *qrmanager,
  s_8RbNZtrzTH63iHAPCwMh6G_proc_T *cholmanager, s_wbACub5hw4pAYPfHb1hrsB_proc_T *
  objective, const char_T options_SolverName[7], real_T options_StepTolerance,
  real_T options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations)
{
  real_T normDelta;
  real_T s;
  real_T temp;
  int32_T activeSetChangeID;
  int32_T globalActiveConstrIdx;
  int32_T idx;
  int32_T iyend;
  int32_T nVar;
  boolean_T subProblemChanged;
  boolean_T updateFval;
  subProblemChanged = true;
  updateFval = true;
  activeSetChangeID = 0;
  nVar = workingset->nVar;
  globalActiveConstrIdx = 0;
  proc_contro_computeGrad_StoreHx(objective, H, f_data, solution->xstar.data);
  solution->fstar = proc_contro_computeFval_ReuseHx(objective,
    memspace->workspace_double.data, f_data, solution->xstar.data);
  if (solution->iterations < runTimeOptions_MaxIterations) {
    solution->state = -5;
  } else {
    solution->state = 0;
  }

  for (iyend = 0; iyend < workingset->mConstrMax; iyend++) {
    solution->lambda.data[iyend] = 0.0;
  }

  int32_T exitg1;
  do {
    exitg1 = 0;
    if (solution->state == -5) {
      boolean_T guard11{ false };

      guard11 = false;
      if (subProblemChanged) {
        switch (activeSetChangeID) {
         case 1:
          {
            int32_T b_iy;
            int32_T c_iy;
            int32_T ix;
            idx = (workingset->nActiveConstr - 1) * workingset->ldA;
            if (qrmanager->mrows <= qrmanager->ncols + 1) {
              qrmanager->minRowCol = qrmanager->mrows;
            } else {
              qrmanager->minRowCol = qrmanager->ncols + 1;
            }

            b_iy = qrmanager->ldq * qrmanager->ncols;
            ix = qrmanager->ldq;
            if (qrmanager->mrows != 0) {
              iyend = b_iy + qrmanager->mrows;
              for (c_iy = b_iy; c_iy < iyend; c_iy++) {
                qrmanager->QR.data[c_iy] = 0.0;
              }

              c_iy = (qrmanager->mrows - 1) * qrmanager->ldq + 1;
              iyend = 1;
              while (((ix > 0) && (iyend <= c_iy)) || ((ix < 0) && (iyend >=
                       c_iy))) {
                int32_T b_ix;
                int32_T h;
                b_ix = idx;
                normDelta = 0.0;
                h = (iyend + qrmanager->mrows) - 1;
                for (int32_T ia{iyend}; ia <= h; ia++) {
                  normDelta += qrmanager->Q.data[ia - 1] *
                    workingset->ATwset.data[b_ix];
                  b_ix++;
                }

                qrmanager->QR.data[b_iy] += normDelta;
                b_iy++;
                iyend += ix;
              }
            }

            qrmanager->ncols++;
            qrmanager->jpvt.data[qrmanager->ncols - 1] = qrmanager->ncols;
            for (idx = qrmanager->mrows - 2; idx + 2 > qrmanager->ncols; idx--)
            {
              iyend = (qrmanager->ncols - 1) * qrmanager->ldq;
              temp = qrmanager->QR.data[(idx + iyend) + 1];
              xrotg_XzIjz1eG(&qrmanager->QR.data[idx + iyend], &temp, &normDelta,
                             &s);
              qrmanager->QR.data[(idx + iyend) + 1] = temp;
              iyend = qrmanager->ldq * idx;
              if (qrmanager->mrows >= 1) {
                ix = iyend;
                b_iy = qrmanager->ldq + iyend;
                for (c_iy = 0; c_iy < qrmanager->mrows; c_iy++) {
                  temp = qrmanager->Q.data[ix] * normDelta + qrmanager->
                    Q.data[b_iy] * s;
                  qrmanager->Q.data[b_iy] = qrmanager->Q.data[b_iy] * normDelta
                    - qrmanager->Q.data[ix] * s;
                  qrmanager->Q.data[ix] = temp;
                  b_iy++;
                  ix++;
                }
              }
            }
          }
          break;

         case -1:
          proc_control_deleteColMoveEnd(qrmanager, globalActiveConstrIdx);
          break;

         default:
          proc_control_factorQR_h(qrmanager, workingset->ATwset.data, nVar,
            workingset->nActiveConstr, workingset->ldA);
          proc_control_computeQ_(qrmanager, qrmanager->mrows);
          break;
        }

        proc_control_compute_deltax(H, solution, memspace, qrmanager,
          cholmanager, objective, proc_control_strcmp(options_SolverName));
        if (solution->state != -5) {
          exitg1 = 1;
        } else {
          normDelta = proc_control_xnrm2_md(nVar, solution->searchDir.data);
          guard11 = true;
        }
      } else {
        idx = solution->searchDir.size;
        if (solution->searchDir.size - 1 >= 0) {
          std::memcpy(&proc_control_B.y_data_bj[0], &solution->searchDir.data[0],
                      solution->searchDir.size * sizeof(real_T));
        }

        for (iyend = 0; iyend < nVar; iyend++) {
          proc_control_B.y_data_bj[iyend] = 0.0;
        }

        if (solution->searchDir.size - 1 >= 0) {
          std::memcpy(&solution->searchDir.data[0], &proc_control_B.y_data_bj[0],
                      solution->searchDir.size * sizeof(real_T));
        }

        normDelta = 0.0;
        guard11 = true;
      }

      if (guard11) {
        if ((!subProblemChanged) || (normDelta < options_StepTolerance) ||
            (workingset->nActiveConstr >= nVar)) {
          if (qrmanager->ncols > 0) {
            boolean_T guard1{ false };

            guard1 = false;
            if (objective->objtype != 4) {
              normDelta = 100.0 * static_cast<real_T>(qrmanager->mrows) *
                2.2204460492503131E-16;
              updateFval = ((qrmanager->mrows > 0) && (qrmanager->ncols > 0));
              if (updateFval) {
                boolean_T guard2{ false };

                iyend = qrmanager->ncols;
                guard2 = false;
                if (qrmanager->mrows < qrmanager->ncols) {
                  idx = (qrmanager->ncols - 1) * qrmanager->ldq +
                    qrmanager->mrows;
                  while ((iyend > qrmanager->mrows) && (std::abs
                          (qrmanager->QR.data[idx - 1]) >= normDelta)) {
                    iyend--;
                    idx -= qrmanager->ldq;
                  }

                  updateFval = (iyend == qrmanager->mrows);
                  if (!updateFval) {
                  } else {
                    guard2 = true;
                  }
                } else {
                  guard2 = true;
                }

                if (guard2) {
                  idx = (iyend - 1) * qrmanager->ldq + iyend;
                  while ((iyend >= 1) && (std::abs(qrmanager->QR.data[idx - 1]) >=
                          normDelta)) {
                    iyend--;
                    idx = (idx - qrmanager->ldq) - 1;
                  }

                  updateFval = (iyend == 0);
                }
              }

              if (!updateFval) {
                solution->state = -7;
              } else {
                guard1 = true;
              }
            } else {
              guard1 = true;
            }

            if (guard1) {
              proc_control_xgemv_mtmc(qrmanager->mrows, qrmanager->ncols,
                qrmanager->Q.data, qrmanager->ldq, objective->grad.data,
                memspace->workspace_double.data);
              proc_control_xtrsv(qrmanager->ncols, qrmanager->QR.data,
                                 qrmanager->ldq, memspace->workspace_double.data);
              for (iyend = 0; iyend < qrmanager->ncols; iyend++) {
                solution->lambda.data[iyend] = -memspace->
                  workspace_double.data[iyend];
              }
            }
          }

          if ((solution->state != -7) || (workingset->nActiveConstr > nVar)) {
            iyend = 0;
            normDelta = 0.0;
            for (idx = workingset->nWConstr[0] + workingset->nWConstr[1]; idx <
                 workingset->nActiveConstr; idx++) {
              if (solution->lambda.data[idx] < normDelta) {
                normDelta = solution->lambda.data[idx];
                iyend = idx + 1;
              }
            }

            if (iyend == 0) {
              solution->state = 1;
            } else {
              activeSetChangeID = -1;
              globalActiveConstrIdx = iyend;
              subProblemChanged = true;
              proc_control_removeConstr(workingset, iyend);
              solution->lambda.data[iyend - 1] = 0.0;
            }
          } else {
            iyend = workingset->nActiveConstr;
            activeSetChangeID = 0;
            globalActiveConstrIdx = workingset->nActiveConstr;
            subProblemChanged = true;
            proc_control_removeConstr(workingset, workingset->nActiveConstr);
            solution->lambda.data[iyend - 1] = 0.0;
          }

          updateFval = false;
        } else {
          proc_control_feasibleratiotest(solution->xstar.data,
            solution->searchDir.data, memspace->workspace_double.data,
            memspace->workspace_double.size, workingset->nVar, workingset->ldA,
            workingset->Aineq.data, workingset->bineq.data, workingset->lb.data,
            workingset->indexLB.data, workingset->sizes, workingset->isActiveIdx,
            workingset->isActiveConstr.data, workingset->nWConstr,
            objective->objtype == 5, &normDelta, &updateFval, &iyend, &idx);
          if (updateFval) {
            switch (iyend) {
             case 3:
              proc_control_addAineqConstr(workingset, idx);
              break;

             case 4:
              proc_addBoundToActiveSetMatrix_(workingset, 4, idx);
              break;

             default:
              proc_addBoundToActiveSetMatrix_(workingset, 5, idx);
              break;
            }

            activeSetChangeID = 1;
          } else {
            proc_c_checkUnboundedOrIllPosed(solution, objective);
            subProblemChanged = false;
            if (workingset->nActiveConstr == 0) {
              solution->state = 1;
            }
          }

          if ((nVar >= 1) && (!(normDelta == 0.0))) {
            for (iyend = 0; iyend < nVar; iyend++) {
              solution->xstar.data[iyend] += normDelta *
                solution->searchDir.data[iyend];
            }
          }

          proc_contro_computeGrad_StoreHx(objective, H, f_data,
            solution->xstar.data);
          updateFval = true;
        }

        proc_checkStoppingAndUpdateFval(&activeSetChangeID, f_data, solution,
          memspace, objective, workingset, qrmanager, options_ObjectiveLimit,
          runTimeOptions_MaxIterations, updateFval);
      }
    } else {
      if (!updateFval) {
        solution->fstar = proc_contro_computeFval_ReuseHx(objective,
          memspace->workspace_double.data, f_data, solution->xstar.data);
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_linearForm_(boolean_T obj_hasLinear, int32_T
  obj_nvar, real_T workspace_data[], const real_T H[19321], const real_T f_data[],
  const real_T x_data[])
{
  int32_T ix;
  ix = 0;
  if (obj_hasLinear) {
    while (ix <= obj_nvar - 1) {
      workspace_data[ix] = f_data[ix];
      ix++;
    }

    ix = 1;
  }

  if (obj_nvar != 0) {
    int32_T b;
    int32_T iac;
    if (ix != 1) {
      while (ix <= obj_nvar - 1) {
        workspace_data[ix] = 0.0;
        ix++;
      }
    }

    ix = 0;
    b = (obj_nvar - 1) * obj_nvar + 1;
    iac = 1;
    while (((obj_nvar > 0) && (iac <= b)) || ((obj_nvar < 0) && (iac >= b))) {
      real_T c;
      int32_T d;
      int32_T iy;
      c = 0.5 * x_data[ix];
      iy = 0;
      d = (iac + obj_nvar) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        workspace_data[iy] += H[ia - 1] * c;
        iy++;
      }

      ix++;
      iac += obj_nvar;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
real_T proc_control::proc_control_computeFval(const
  s_wbACub5hw4pAYPfHb1hrsB_proc_T *obj, real_T workspace_data[], const real_T H
  [19321], const real_T f_data[], const real_T x_data[])
{
  real_T val;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    proc_control_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    val = 0.0;
    if (obj->nvar >= 1) {
      for (int32_T idx{0}; idx < obj->nvar; idx++) {
        val += workspace_data[idx] * x_data[idx];
      }
    }
    break;

   default:
    proc_control_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    for (int32_T idx = obj->nvar; idx < obj->maxVar - 1; idx++) {
      workspace_data[idx] = 0.5 * obj->beta * x_data[idx] + obj->rho;
    }

    val = 0.0;
    if (obj->maxVar - 1 >= 1) {
      for (int32_T idx{0}; idx <= obj->maxVar - 2; idx++) {
        val += workspace_data[idx] * x_data[idx];
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_phaseone(const real_T H[19321], const real_T
  f_data[], s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *solution,
  s_j0X3urodUv3ospvkLXsspC_proc_T *memspace, s_gnTVUZmGpKWoq4tCE9AGn_proc__T
  *workingset, s_Ref0liQlfQOPmAop9i3aPH_proc_T *qrmanager,
  s_8RbNZtrzTH63iHAPCwMh6G_proc_T *cholmanager, s_wbACub5hw4pAYPfHb1hrsB_proc_T *
  objective, somzaGboVhDG7PNQS6E98jD_proc__T *options, const
  somzaGboVhDG7PNQS6E98jD_proc__T *runTimeOptions)
{
  int32_T PROBTYPE_ORIG;
  int32_T mConstr;
  int32_T nVar_tmp;
  PROBTYPE_ORIG = workingset->probType;
  nVar_tmp = workingset->nVar;
  solution->xstar.data[workingset->nVar] = solution->maxConstr + 1.0;
  if (workingset->probType == 3) {
    mConstr = 1;
  } else {
    mConstr = 4;
  }

  proc_control_setProblemType(workingset, mConstr);
  proc_contro_removeAllIneqConstr(workingset);
  objective->prev_objtype = objective->objtype;
  objective->prev_nvar = objective->nvar;
  objective->prev_hasLinear = objective->hasLinear;
  objective->objtype = 5;
  objective->nvar = nVar_tmp + 1;
  objective->gammaScalar = 1.0;
  objective->hasLinear = true;
  options->ObjectiveLimit = 0.02;
  options->StepTolerance = 1.4901161193847657E-10;
  solution->fstar = proc_control_computeFval(objective,
    memspace->workspace_double.data, H, f_data, solution->xstar.data);
  solution->state = 5;
  proc_control_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                       cholmanager, objective, options->SolverName,
                       options->StepTolerance, options->ObjectiveLimit,
                       runTimeOptions->MaxIterations);
  if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
       workingset->sizes[3]) - 2]) {
    boolean_T exitg1;
    mConstr = workingset->sizes[0] + 131;
    exitg1 = false;
    while ((!exitg1) && (mConstr <= workingset->nActiveConstr)) {
      if ((workingset->Wid.data[mConstr - 1] == 4) &&
          (workingset->Wlocalidx.data[mConstr - 1] == workingset->sizes[3])) {
        proc_control_removeConstr(workingset, mConstr);
        exitg1 = true;
      } else {
        mConstr++;
      }
    }
  }

  mConstr = workingset->nActiveConstr;
  while ((mConstr > workingset->sizes[0] + 130) && (mConstr > nVar_tmp)) {
    proc_control_removeConstr(workingset, mConstr);
    mConstr--;
  }

  solution->maxConstr = solution->xstar.data[nVar_tmp];
  proc_control_setProblemType(workingset, PROBTYPE_ORIG);
  objective->objtype = objective->prev_objtype;
  objective->nvar = objective->prev_nvar;
  objective->hasLinear = objective->prev_hasLinear;
  options->ObjectiveLimit = (rtMinusInf);
  options->StepTolerance = 1.0E-6;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_driver_i(const real_T H[19321], const real_T
  f_data[], s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *solution,
  s_j0X3urodUv3ospvkLXsspC_proc_T *memspace, s_gnTVUZmGpKWoq4tCE9AGn_proc__T
  *workingset, s_Ref0liQlfQOPmAop9i3aPH_proc_T *qrmanager,
  s_8RbNZtrzTH63iHAPCwMh6G_proc_T *cholmanager, s_wbACub5hw4pAYPfHb1hrsB_proc_T *
  objective, somzaGboVhDG7PNQS6E98jD_proc__T *options,
  somzaGboVhDG7PNQS6E98jD_proc__T *runTimeOptions)
{
  int32_T nVar;
  boolean_T guard1{ false };

  solution->iterations = 0;
  runTimeOptions->RemainFeasible = true;
  nVar = workingset->nVar - 1;
  guard1 = false;
  if (workingset->probType == 3) {
    for (int32_T b_idx{0}; b_idx < workingset->sizes[0]; b_idx++) {
      solution->xstar.data[workingset->indexFixed.data[b_idx] - 1] =
        workingset->ub.data[workingset->indexFixed.data[b_idx] - 1];
    }

    for (int32_T b_idx{0}; b_idx < workingset->sizes[3]; b_idx++) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] + b_idx) -
          1]) {
        solution->xstar.data[workingset->indexLB.data[b_idx] - 1] =
          -workingset->lb.data[workingset->indexLB.data[b_idx] - 1];
      }
    }

    for (int32_T b_idx{0}; b_idx < workingset->sizes[4]; b_idx++) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[4] + b_idx) -
          1]) {
        solution->xstar.data[workingset->indexUB.data[b_idx] - 1] =
          workingset->ub.data[workingset->indexUB.data[b_idx] - 1];
      }
    }

    proc_control_PresolveWorkingSet(solution, memspace, workingset, qrmanager);
    if (solution->state < 0) {
    } else {
      guard1 = true;
    }
  } else {
    solution->state = 82;
    guard1 = true;
  }

  if (guard1) {
    solution->iterations = 0;
    solution->maxConstr = proc__maxConstraintViolation_du(workingset,
      solution->xstar.data);
    if (solution->maxConstr > 0.02) {
      proc_control_phaseone(H, f_data, solution, memspace, workingset, qrmanager,
                            cholmanager, objective, options, runTimeOptions);
      if (solution->state != 0) {
        solution->maxConstr = proc__maxConstraintViolation_du(workingset,
          solution->xstar.data);
        if (solution->maxConstr > 0.02) {
          for (nVar = 0; nVar < workingset->mConstrMax; nVar++) {
            solution->lambda.data[nVar] = 0.0;
          }

          solution->fstar = proc_control_computeFval(objective,
            memspace->workspace_double.data, H, f_data, solution->xstar.data);
          solution->state = -2;
        } else {
          if (solution->maxConstr > 0.0) {
            real_T maxConstr_new;
            int32_T y_size_idx_0;
            y_size_idx_0 = solution->searchDir.size;
            if (solution->searchDir.size - 1 >= 0) {
              std::memcpy(&proc_control_B.y_data_e[0], &solution->
                          searchDir.data[0], solution->searchDir.size * sizeof
                          (real_T));
            }

            for (int32_T b_idx{0}; b_idx <= nVar; b_idx++) {
              proc_control_B.y_data_e[b_idx] = solution->xstar.data[b_idx];
            }

            if (y_size_idx_0 - 1 >= 0) {
              std::memcpy(&solution->searchDir.data[0],
                          &proc_control_B.y_data_e[0], y_size_idx_0 * sizeof
                          (real_T));
            }

            proc_control_PresolveWorkingSet(solution, memspace, workingset,
              qrmanager);
            maxConstr_new = proc__maxConstraintViolation_du(workingset,
              solution->xstar.data);
            if (maxConstr_new >= solution->maxConstr) {
              solution->maxConstr = maxConstr_new;
              y_size_idx_0 = solution->xstar.size;
              if (solution->xstar.size - 1 >= 0) {
                std::memcpy(&proc_control_B.y_data_e[0], &solution->xstar.data[0],
                            solution->xstar.size * sizeof(real_T));
              }

              for (int32_T b_idx{0}; b_idx <= nVar; b_idx++) {
                proc_control_B.y_data_e[b_idx] = solution->searchDir.data[b_idx];
              }

              if (y_size_idx_0 - 1 >= 0) {
                std::memcpy(&solution->xstar.data[0], &proc_control_B.y_data_e[0],
                            y_size_idx_0 * sizeof(real_T));
              }
            }
          }

          proc_control_iterate(H, f_data, solution, memspace, workingset,
                               qrmanager, cholmanager, objective,
                               options->SolverName, options->StepTolerance,
                               options->ObjectiveLimit,
                               runTimeOptions->MaxIterations);
        }
      }
    } else {
      proc_control_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                           cholmanager, objective, options->SolverName,
                           options->StepTolerance, options->ObjectiveLimit,
                           runTimeOptions->MaxIterations);
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_addAeqConstr(s_gnTVUZmGpKWoq4tCE9AGn_proc__T
  *obj, int32_T idx_local)
{
  int32_T totalEq;
  totalEq = obj->nWConstr[0] + obj->nWConstr[1];
  if ((obj->nActiveConstr == totalEq) && (idx_local > obj->nWConstr[1])) {
    int32_T iAeq0;
    int32_T iAw0;
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->nActiveConstr++;
    obj->Wid.data[obj->nActiveConstr - 1] = 2;
    obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
    for (totalEq = 1; totalEq - 1 < obj->nVar; totalEq++) {
      obj->ATwset.data[(iAw0 + totalEq) - 1] = obj->Aeq.data[(iAeq0 + totalEq) -
        1];
    }

    obj->bwset.data[obj->nActiveConstr - 1] = obj->beq[idx_local - 1];
  } else {
    int32_T iAeq0;
    int32_T iAw0;
    obj->nActiveConstr++;
    iAeq0 = obj->nActiveConstr - 1;
    obj->Wid.data[obj->nActiveConstr - 1] = obj->Wid.data[totalEq];
    obj->Wlocalidx.data[iAeq0] = obj->Wlocalidx.data[totalEq];
    for (iAw0 = 0; iAw0 < obj->nVar; iAw0++) {
      obj->ATwset.data[iAw0 + obj->ldA * iAeq0] = obj->ATwset.data[obj->ldA *
        totalEq + iAw0];
    }

    obj->bwset.data[iAeq0] = obj->bwset.data[totalEq];
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->Wid.data[totalEq] = 2;
    obj->Wlocalidx.data[totalEq] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = obj->ldA * totalEq;
    for (int32_T b_idx{1}; b_idx - 1 < obj->nVar; b_idx++) {
      obj->ATwset.data[(iAw0 + b_idx) - 1] = obj->Aeq.data[(iAeq0 + b_idx) - 1];
    }

    obj->bwset.data[totalEq] = obj->beq[idx_local - 1];
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
boolean_T proc_control::proc_control_soc(const real_T Hessian[19321], const
  real_T grad_data[], s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *TrialState,
  s_j0X3urodUv3ospvkLXsspC_proc_T *memspace, s_gnTVUZmGpKWoq4tCE9AGn_proc__T
  *WorkingSet, s_Ref0liQlfQOPmAop9i3aPH_proc_T *QRManager,
  s_8RbNZtrzTH63iHAPCwMh6G_proc_T *CholManager, s_wbACub5hw4pAYPfHb1hrsB_proc_T *
  QPObjective, const somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  somzaGboVhDG7PNQS6E98jD_proc__T qpoptions_0;
  somzaGboVhDG7PNQS6E98jD_proc__T qpoptions_1;
  real_T oldDirIdx;
  int32_T iac;
  int32_T idx_Aineq;
  int32_T idx_Aineq_tmp_tmp;
  int32_T idx_Partition;
  int32_T idx_upper;
  int32_T iy;
  int32_T mConstrMax;
  int32_T nVar;
  int32_T nWIneq_old;
  int32_T nWLower_old;
  int32_T nWUpper_old;
  boolean_T success;
  nWIneq_old = WorkingSet->nWConstr[2];
  nWLower_old = WorkingSet->nWConstr[3];
  nWUpper_old = WorkingSet->nWConstr[4];
  nVar = WorkingSet->nVar - 1;
  mConstrMax = WorkingSet->mConstrMax - 1;
  for (idx_Aineq = 0; idx_Aineq <= nVar; idx_Aineq++) {
    TrialState->xstarsqp[idx_Aineq] = TrialState->xstarsqp_old[idx_Aineq];
  }

  for (idx_Aineq = 0; idx_Aineq <= nVar; idx_Aineq++) {
    TrialState->socDirection.data[idx_Aineq] = TrialState->xstar.data[idx_Aineq];
  }

  for (idx_Aineq = 0; idx_Aineq <= mConstrMax; idx_Aineq++) {
    TrialState->lambdaStopTest.data[idx_Aineq] = TrialState->
      lambda.data[idx_Aineq];
  }

  for (idx_Aineq = 0; idx_Aineq < 130; idx_Aineq++) {
    WorkingSet->beq[idx_Aineq] = -TrialState->cEq[idx_Aineq];
  }

  idx_Aineq_tmp_tmp = WorkingSet->ldA;
  iy = 0;
  idx_upper = WorkingSet->ldA * 129 + 1;
  iac = 1;
  while (((idx_Aineq_tmp_tmp > 0) && (iac <= idx_upper)) || ((idx_Aineq_tmp_tmp <
           0) && (iac >= idx_upper))) {
    idx_Partition = 0;
    oldDirIdx = 0.0;
    idx_Aineq = (iac + WorkingSet->nVar) - 1;
    for (int32_T b_ia{iac}; b_ia <= idx_Aineq; b_ia++) {
      oldDirIdx += WorkingSet->Aeq.data[b_ia - 1] * TrialState->
        searchDir.data[idx_Partition];
      idx_Partition++;
    }

    WorkingSet->beq[iy] += oldDirIdx;
    iy++;
    iac += idx_Aineq_tmp_tmp;
  }

  for (idx_Aineq = 0; idx_Aineq < 130; idx_Aineq++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + idx_Aineq] = WorkingSet->
      beq[idx_Aineq];
  }

  if (WorkingSet->sizes[2] > 0) {
    for (idx_Aineq = 0; idx_Aineq < WorkingSet->sizes[2]; idx_Aineq++) {
      WorkingSet->bineq.data[idx_Aineq] = -TrialState->cIneq.data[idx_Aineq];
    }

    idx_Aineq_tmp_tmp = WorkingSet->ldA;
    iy = 0;
    idx_upper = (WorkingSet->sizes[2] - 1) * WorkingSet->ldA + 1;
    iac = 1;
    while (((idx_Aineq_tmp_tmp > 0) && (iac <= idx_upper)) ||
           ((idx_Aineq_tmp_tmp < 0) && (iac >= idx_upper))) {
      idx_Partition = 0;
      oldDirIdx = 0.0;
      idx_Aineq = (iac + WorkingSet->nVar) - 1;
      for (int32_T b_ia{iac}; b_ia <= idx_Aineq; b_ia++) {
        oldDirIdx += WorkingSet->Aineq.data[b_ia - 1] *
          TrialState->searchDir.data[idx_Partition];
        idx_Partition++;
      }

      WorkingSet->bineq.data[iy] += oldDirIdx;
      iy++;
      iac += idx_Aineq_tmp_tmp;
    }

    idx_Aineq = 1;
    iy = WorkingSet->sizes[2] + 1;
    idx_upper = (WorkingSet->sizes[2] + WorkingSet->sizes[3]) + 1;
    for (iac = WorkingSet->isActiveIdx[2] - 1; iac < WorkingSet->nActiveConstr;
         iac++) {
      switch (WorkingSet->Wid.data[iac]) {
       case 3:
        idx_Partition = idx_Aineq;
        idx_Aineq++;
        WorkingSet->bwset.data[iac] = WorkingSet->bineq.data
          [WorkingSet->Wlocalidx.data[iac] - 1];
        break;

       case 4:
        idx_Partition = iy;
        iy++;
        break;

       default:
        idx_Partition = idx_upper;
        idx_upper++;
        break;
      }

      TrialState->workingset_old.data[idx_Partition - 1] =
        WorkingSet->Wlocalidx.data[iac];
    }
  }

  for (idx_Aineq = 0; idx_Aineq <= nVar; idx_Aineq++) {
    TrialState->xstar.data[idx_Aineq] = TrialState->xstarsqp[idx_Aineq];
  }

  qpoptions_0 = *qpoptions;
  qpoptions_1 = *qpoptions;
  proc_control_driver_i(Hessian, grad_data, TrialState, memspace, WorkingSet,
                        QRManager, CholManager, QPObjective, &qpoptions_0,
                        &qpoptions_1);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_addAeqConstr(WorkingSet, WorkingSet->indexEqRemoved
      [WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  for (idx_Aineq = 0; idx_Aineq <= nVar; idx_Aineq++) {
    oldDirIdx = TrialState->socDirection.data[idx_Aineq];
    TrialState->socDirection.data[idx_Aineq] = TrialState->xstar.data[idx_Aineq]
      - TrialState->socDirection.data[idx_Aineq];
    TrialState->xstar.data[idx_Aineq] = oldDirIdx;
  }

  success = (proc_control_xnrm2_md(nVar + 1, TrialState->socDirection.data) <=
             proc_control_xnrm2_md(nVar + 1, TrialState->xstar.data) * 2.0);
  idx_Aineq = WorkingSet->sizes[2];
  iy = WorkingSet->sizes[3];
  for (nVar = 0; nVar < 130; nVar++) {
    WorkingSet->beq[nVar] = -TrialState->cEq[nVar];
  }

  for (nVar = 0; nVar < 130; nVar++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + nVar] = WorkingSet->beq[nVar];
  }

  if (WorkingSet->sizes[2] > 0) {
    for (nVar = 0; nVar < idx_Aineq; nVar++) {
      WorkingSet->bineq.data[nVar] = -TrialState->cIneq.data[nVar];
    }

    if (!success) {
      proc_contro_removeAllIneqConstr(WorkingSet);
      for (nVar = 0; nVar < nWIneq_old; nVar++) {
        proc_control_addAineqConstr(WorkingSet, TrialState->
          workingset_old.data[nVar]);
      }

      for (nWIneq_old = 0; nWIneq_old < nWLower_old; nWIneq_old++) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 4,
          TrialState->workingset_old.data[nWIneq_old + idx_Aineq]);
      }

      for (nWLower_old = 0; nWLower_old < nWUpper_old; nWLower_old++) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 5,
          TrialState->workingset_old.data[(nWLower_old + idx_Aineq) + iy]);
      }
    }
  }

  if (!success) {
    for (nWUpper_old = 0; nWUpper_old <= mConstrMax; nWUpper_old++) {
      TrialState->lambda.data[nWUpper_old] = TrialState->
        lambdaStopTest.data[nWUpper_old];
    }
  } else {
    proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
      WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
      WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
  }

  return success;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_normal(const real_T Hessian[19321], const real_T
  grad_data[], s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_j0X3urodUv3ospvkLXsspC_proc_T *memspace, s_gnTVUZmGpKWoq4tCE9AGn_proc__T
  *WorkingSet, s_Ref0liQlfQOPmAop9i3aPH_proc_T *QRManager,
  s_8RbNZtrzTH63iHAPCwMh6G_proc_T *CholManager, s_wbACub5hw4pAYPfHb1hrsB_proc_T *
  QPObjective, const somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  somzaGboVhDG7PNQS6E98jD_proc__T qpoptions_0;
  somzaGboVhDG7PNQS6E98jD_proc__T qpoptions_1;
  boolean_T nonlinEqRemoved;
  qpoptions_0 = *qpoptions;
  qpoptions_1 = *qpoptions;
  proc_control_driver_i(Hessian, grad_data, TrialState, memspace, WorkingSet,
                        QRManager, CholManager, QPObjective, &qpoptions_0,
                        &qpoptions_1);
  if (TrialState->state > 0) {
    real_T constrViolationEq;
    real_T constrViolationIneq;
    real_T penaltyParamTrial;
    penaltyParamTrial = MeritFunction->penaltyParam;
    constrViolationEq = 0.0;
    for (int32_T k{0}; k < 130; k++) {
      constrViolationEq += std::abs(TrialState->cEq[k]);
    }

    constrViolationIneq = 0.0;
    for (int32_T k{0}; k < WorkingSet->sizes[2]; k++) {
      if (TrialState->cIneq.data[k] > 0.0) {
        constrViolationIneq += TrialState->cIneq.data[k];
      }
    }

    constrViolationEq += constrViolationIneq;
    constrViolationIneq = MeritFunction->linearizedConstrViol;
    MeritFunction->linearizedConstrViol = 0.0;
    constrViolationIneq += constrViolationEq;
    if ((constrViolationIneq > 2.2204460492503131E-16) && (TrialState->fstar >
         0.0)) {
      if (TrialState->sqpFval == 0.0) {
        penaltyParamTrial = 1.0;
      } else {
        penaltyParamTrial = 1.5;
      }

      penaltyParamTrial = penaltyParamTrial * TrialState->fstar /
        constrViolationIneq;
    }

    if (penaltyParamTrial < MeritFunction->penaltyParam) {
      MeritFunction->phi = penaltyParamTrial * constrViolationEq +
        TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) * penaltyParamTrial +
           MeritFunction->initFval) - MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        MeritFunction->penaltyParam = std::fmax(penaltyParamTrial, 1.0E-10);
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam * constrViolationEq +
          TrialState->sqpFval;
      }
    } else {
      MeritFunction->penaltyParam = std::fmax(penaltyParamTrial, 1.0E-10);
      MeritFunction->phi = MeritFunction->penaltyParam * constrViolationEq +
        TrialState->sqpFval;
    }

    MeritFunction->phiPrimePlus = std::fmin(TrialState->fstar -
      MeritFunction->penaltyParam * constrViolationEq, 0.0);
  }

  proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
    WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
    WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
  nonlinEqRemoved = (WorkingSet->mEqRemoved > 0);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_addAeqConstr(WorkingSet, WorkingSet->indexEqRemoved
      [WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  if (nonlinEqRemoved) {
    for (int32_T k{0}; k < 130; k++) {
      WorkingSet->Wlocalidx.data[WorkingSet->sizes[0] + k] = k + 1;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_relaxed(const real_T Hessian[19321], const
  real_T grad_data[], s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_j0X3urodUv3ospvkLXsspC_proc_T *memspace, s_gnTVUZmGpKWoq4tCE9AGn_proc__T
  *WorkingSet, s_Ref0liQlfQOPmAop9i3aPH_proc_T *QRManager,
  s_8RbNZtrzTH63iHAPCwMh6G_proc_T *CholManager, s_wbACub5hw4pAYPfHb1hrsB_proc_T *
  QPObjective, somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  somzaGboVhDG7PNQS6E98jD_proc__T qpoptions_0;
  somzaGboVhDG7PNQS6E98jD_proc__T qpoptions_1;
  real_T beta;
  real_T rho;
  int32_T idx_positive;
  int32_T mIneq;
  int32_T mLBOrig;
  int32_T nVarOrig;
  int32_T temp;
  boolean_T tf;
  nVarOrig = WorkingSet->nVar - 1;
  beta = 0.0;
  for (temp = 0; temp <= nVarOrig; temp++) {
    beta += Hessian[139 * temp + temp];
  }

  beta /= static_cast<real_T>(WorkingSet->nVar);
  if (TrialState->sqpIterations <= 1) {
    rho = std::fmax(1.0, std::abs(grad_data[proc_control_ixamax
      (QPObjective->nvar, grad_data) - 1])) * 100.0;
  } else {
    rho = std::abs(TrialState->lambdasqp.data[proc_control_ixamax
                   (WorkingSet->mConstr, TrialState->lambdasqp.data) - 1]);
  }

  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->beta = beta;
  QPObjective->rho = rho;
  QPObjective->hasLinear = true;
  QPObjective->objtype = 4;
  proc_control_B.b = *WorkingSet;
  proc_control_setProblemType(&proc_control_B.b, 2);
  proc_control_B.b_WorkingSet = proc_control_B.b;
  mIneq = proc_control_B.b_WorkingSet.sizes[2] - 1;
  mLBOrig = (proc_control_B.b_WorkingSet.sizes[3] -
             proc_control_B.b_WorkingSet.sizes[2]) - 260;
  for (temp = 0; temp <= mIneq; temp++) {
    memspace->workspace_double.data[temp] =
      proc_control_B.b_WorkingSet.bineq.data[temp];
  }

  proc_control_xgemv_mtmcjbiadz2i(WorkingSet->nVar,
    proc_control_B.b_WorkingSet.sizes[2], proc_control_B.b_WorkingSet.Aineq.data,
    proc_control_B.b_WorkingSet.ldA, TrialState->xstar.data,
    memspace->workspace_double.data);
  for (temp = 0; temp <= mIneq; temp++) {
    TrialState->xstar.data[(nVarOrig + temp) + 1] = static_cast<real_T>
      (memspace->workspace_double.data[temp] > 0.0) *
      memspace->workspace_double.data[temp];
  }

  std::memcpy(&memspace->workspace_double.data[0],
              &proc_control_B.b_WorkingSet.beq[0], 130U * sizeof(real_T));
  proc_control_xgemv_mtmcjbiadz2i(WorkingSet->nVar, 130,
    proc_control_B.b_WorkingSet.Aeq.data, proc_control_B.b_WorkingSet.ldA,
    TrialState->xstar.data, memspace->workspace_double.data);
  for (temp = 0; temp < 130; temp++) {
    idx_positive = mIneq + temp;
    if (memspace->workspace_double.data[temp] <= 0.0) {
      TrialState->xstar.data[(nVarOrig + idx_positive) + 2] = 0.0;
      TrialState->xstar.data[(nVarOrig + idx_positive) + 132] =
        -memspace->workspace_double.data[temp];
      proc_control_B.b = proc_control_B.b_WorkingSet;
      proc_addBoundToActiveSetMatrix_(&proc_control_B.b, 4, (mLBOrig +
        idx_positive) + 2);
      proc_control_B.b_WorkingSet = proc_control_B.b;
      if (memspace->workspace_double.data[temp] >= -0.02) {
        proc_control_B.b = proc_control_B.b_WorkingSet;
        proc_addBoundToActiveSetMatrix_(&proc_control_B.b, 4, (mLBOrig +
          idx_positive) + 132);
        proc_control_B.b_WorkingSet = proc_control_B.b;
      }
    } else {
      int32_T tmp;
      tmp = nVarOrig + idx_positive;
      TrialState->xstar.data[tmp + 2] = memspace->workspace_double.data[temp];
      TrialState->xstar.data[tmp + 132] = 0.0;
      proc_control_B.b = proc_control_B.b_WorkingSet;
      proc_addBoundToActiveSetMatrix_(&proc_control_B.b, 4, (mLBOrig +
        idx_positive) + 132);
      proc_control_B.b_WorkingSet = proc_control_B.b;
      if (memspace->workspace_double.data[temp] <= 0.02) {
        proc_control_B.b = proc_control_B.b_WorkingSet;
        proc_addBoundToActiveSetMatrix_(&proc_control_B.b, 4, (mLBOrig +
          idx_positive) + 2);
        proc_control_B.b_WorkingSet = proc_control_B.b;
      }
    }
  }

  temp = qpoptions->MaxIterations;
  qpoptions->MaxIterations = (qpoptions->MaxIterations +
    proc_control_B.b_WorkingSet.nVar) - WorkingSet->nVar;
  proc_control_B.b = proc_control_B.b_WorkingSet;
  qpoptions_0 = *qpoptions;
  qpoptions_1 = *qpoptions;
  proc_control_driver_i(Hessian, grad_data, TrialState, memspace,
                        &proc_control_B.b, QRManager, CholManager, QPObjective,
                        &qpoptions_0, &qpoptions_1);
  proc_control_B.b_WorkingSet = proc_control_B.b;
  qpoptions->MaxIterations = temp;
  mIneq = proc_control_B.b_WorkingSet.sizes[2] - 1;
  mLBOrig = proc_control_B.b_WorkingSet.sizes[3] - 261;
  temp = 0;
  for (nVarOrig = 0; nVarOrig < 130; nVarOrig++) {
    boolean_T b_tf;
    idx_positive = (proc_control_B.b_WorkingSet.isActiveIdx[3] + mLBOrig) +
      nVarOrig;
    tf = proc_control_B.b_WorkingSet.isActiveConstr.data[idx_positive];
    b_tf = proc_control_B.b_WorkingSet.isActiveConstr.data[idx_positive + 130];
    memspace->workspace_int.data[nVarOrig] = tf;
    memspace->workspace_int.data[nVarOrig + 130] = b_tf;
    temp = (temp + tf) + b_tf;
  }

  for (nVarOrig = 0; nVarOrig <= mIneq; nVarOrig++) {
    tf = proc_control_B.b_WorkingSet.isActiveConstr.data
      [(((proc_control_B.b_WorkingSet.isActiveIdx[3] + mLBOrig) - mIneq) +
        nVarOrig) - 1];
    memspace->workspace_int.data[nVarOrig + 260] = tf;
    temp += tf;
  }

  if (TrialState->state != -6) {
    real_T qpfvalLinearExcess;
    real_T qpfvalQuadExcess;
    real_T y;
    nVarOrig = (proc_control_B.b_WorkingSet.nVarMax - WorkingSet->nVar) - 1;
    qpfvalLinearExcess = 0.0;
    qpfvalQuadExcess = 0.0;
    if (nVarOrig >= 1) {
      mIneq = WorkingSet->nVar + nVarOrig;
      for (mLBOrig = WorkingSet->nVar; mLBOrig < mIneq; mLBOrig++) {
        qpfvalLinearExcess += std::abs(TrialState->xstar.data[mLBOrig]);
      }

      mIneq = WorkingSet->nVar;
      mLBOrig = WorkingSet->nVar;
      for (idx_positive = 0; idx_positive < nVarOrig; idx_positive++) {
        qpfvalQuadExcess += TrialState->xstar.data[mIneq] *
          TrialState->xstar.data[mLBOrig];
        mIneq++;
        mLBOrig++;
      }
    }

    beta = (TrialState->fstar - rho * qpfvalLinearExcess) - beta / 2.0 *
      qpfvalQuadExcess;
    mIneq = (WorkingSet->nVarMax - WorkingSet->nVar) - 1;
    rho = MeritFunction->penaltyParam;
    qpfvalLinearExcess = 0.0;
    for (nVarOrig = 0; nVarOrig < 130; nVarOrig++) {
      qpfvalLinearExcess += std::abs(TrialState->cEq[nVarOrig]);
    }

    qpfvalQuadExcess = 0.0;
    for (nVarOrig = 0; nVarOrig < WorkingSet->sizes[2]; nVarOrig++) {
      if (TrialState->cIneq.data[nVarOrig] > 0.0) {
        qpfvalQuadExcess += TrialState->cIneq.data[nVarOrig];
      }
    }

    qpfvalLinearExcess += qpfvalQuadExcess;
    qpfvalQuadExcess = MeritFunction->linearizedConstrViol;
    y = 0.0;
    if (mIneq >= 1) {
      nVarOrig = WorkingSet->nVar + mIneq;
      for (mIneq = WorkingSet->nVar; mIneq < nVarOrig; mIneq++) {
        y += std::abs(TrialState->xstar.data[mIneq]);
      }
    }

    MeritFunction->linearizedConstrViol = y;
    qpfvalQuadExcess = (qpfvalLinearExcess + qpfvalQuadExcess) - y;
    if ((qpfvalQuadExcess > 2.2204460492503131E-16) && (beta > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        rho = 1.0;
      } else {
        rho = 1.5;
      }

      rho = rho * beta / qpfvalQuadExcess;
    }

    if (rho < MeritFunction->penaltyParam) {
      MeritFunction->phi = rho * qpfvalLinearExcess + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) * rho +
           MeritFunction->initFval) - MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        MeritFunction->penaltyParam = std::fmax(rho, 1.0E-10);
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam * qpfvalLinearExcess +
          TrialState->sqpFval;
      }
    } else {
      MeritFunction->penaltyParam = std::fmax(rho, 1.0E-10);
      MeritFunction->phi = MeritFunction->penaltyParam * qpfvalLinearExcess +
        TrialState->sqpFval;
    }

    MeritFunction->phiPrimePlus = std::fmin(beta - MeritFunction->penaltyParam *
      qpfvalLinearExcess, 0.0);
    mIneq = proc_control_B.b_WorkingSet.isActiveIdx[1] - 1;
    for (nVarOrig = 0; nVarOrig < 130; nVarOrig++) {
      if (memspace->workspace_int.data[nVarOrig] != 0) {
        tf = (memspace->workspace_int.data[nVarOrig + 130] != 0);
      } else {
        tf = false;
      }

      mLBOrig = mIneq + nVarOrig;
      TrialState->lambda.data[mLBOrig] *= static_cast<real_T>(tf);
    }

    for (nVarOrig = proc_control_B.b_WorkingSet.isActiveIdx[2] - 1; nVarOrig <
         proc_control_B.b_WorkingSet.nActiveConstr; nVarOrig++) {
      if (proc_control_B.b_WorkingSet.Wid.data[nVarOrig] == 3) {
        TrialState->lambda.data[nVarOrig] *= static_cast<real_T>
          (memspace->
           workspace_int.data[proc_control_B.b_WorkingSet.Wlocalidx.data[nVarOrig]
           + 259]);
      }
    }
  }

  proc_control_B.b = proc_control_B.b_WorkingSet;
  nVarOrig = (proc_control_B.b_WorkingSet.sizes[3] -
              proc_control_B.b_WorkingSet.sizes[2]) - 260;
  mIneq = proc_control_B.b_WorkingSet.nActiveConstr;
  while ((mIneq > proc_control_B.b_WorkingSet.sizes[0] + 130) && (temp > 0)) {
    if ((proc_control_B.b.Wid.data[mIneq - 1] == 4) &&
        (proc_control_B.b.Wlocalidx.data[mIneq - 1] > nVarOrig)) {
      beta = TrialState->lambda.data[proc_control_B.b.nActiveConstr - 1];
      TrialState->lambda.data[proc_control_B.b.nActiveConstr - 1] = 0.0;
      TrialState->lambda.data[mIneq - 1] = beta;
      proc_control_removeConstr(&proc_control_B.b, mIneq);
      temp--;
    }

    mIneq--;
  }

  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->hasLinear = true;
  QPObjective->objtype = 3;
  *WorkingSet = proc_control_B.b;
  proc_control_setProblemType(WorkingSet, 3);
  proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
    WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
    WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
}

// Function for MATLAB Function: '<S196>/NLMPC'
boolean_T proc_control::proc_control_step_k(int32_T *STEP_TYPE, real_T Hessian
  [19321], const real_T lb[139], s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_j0X3urodUv3ospvkLXsspC_proc_T *memspace, s_gnTVUZmGpKWoq4tCE9AGn_proc__T
  *WorkingSet, s_Ref0liQlfQOPmAop9i3aPH_proc_T *QRManager,
  s_8RbNZtrzTH63iHAPCwMh6G_proc_T *CholManager, s_wbACub5hw4pAYPfHb1hrsB_proc_T *
  QPObjective, somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  real_T nrmDirInf;
  real_T nrmGradInf;
  int32_T nVar;
  int32_T y_size_idx_0;
  boolean_T checkBoundViolation;
  boolean_T stepSuccess;
  stepSuccess = true;
  checkBoundViolation = true;
  nVar = WorkingSet->nVar - 1;
  if (*STEP_TYPE != 3) {
    for (int32_T b_k{0}; b_k <= nVar; b_k++) {
      TrialState->xstar.data[b_k] = TrialState->xstarsqp[b_k];
    }
  } else {
    y_size_idx_0 = TrialState->searchDir.size;
    if (TrialState->searchDir.size - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data_d[0], &TrialState->searchDir.data[0],
                  TrialState->searchDir.size * sizeof(real_T));
    }

    for (int32_T b_k{0}; b_k <= nVar; b_k++) {
      proc_control_B.y_data_d[b_k] = TrialState->xstar.data[b_k];
    }

    if (y_size_idx_0 - 1 >= 0) {
      std::memcpy(&TrialState->searchDir.data[0], &proc_control_B.y_data_d[0],
                  y_size_idx_0 * sizeof(real_T));
    }
  }

  int32_T exitg1;
  boolean_T guard1{ false };

  do {
    exitg1 = 0;
    guard1 = false;
    switch (*STEP_TYPE) {
     case 1:
      proc_control_normal(Hessian, TrialState->grad.data, TrialState,
                          MeritFunction, memspace, WorkingSet, QRManager,
                          CholManager, QPObjective, qpoptions);
      if ((TrialState->state <= 0) && (TrialState->state != -6)) {
        *STEP_TYPE = 2;
      } else {
        y_size_idx_0 = TrialState->delta_x.size;
        if (TrialState->delta_x.size - 1 >= 0) {
          std::memcpy(&proc_control_B.y_data_d[0], &TrialState->delta_x.data[0],
                      TrialState->delta_x.size * sizeof(real_T));
        }

        for (int32_T b_k{0}; b_k <= nVar; b_k++) {
          proc_control_B.y_data_d[b_k] = TrialState->xstar.data[b_k];
        }

        if (y_size_idx_0 - 1 >= 0) {
          std::memcpy(&TrialState->delta_x.data[0], &proc_control_B.y_data_d[0],
                      y_size_idx_0 * sizeof(real_T));
        }

        guard1 = true;
      }
      break;

     case 2:
      proc_contro_removeAllIneqConstr(WorkingSet);
      if (TrialState->xstar.size - 1 >= 0) {
        std::memcpy(&proc_control_B.c_data[0], &TrialState->xstar.data[0],
                    TrialState->xstar.size * sizeof(real_T));
      }

      for (int32_T b_k{0}; b_k < WorkingSet->sizes[3]; b_k++) {
        nrmGradInf = WorkingSet->lb.data[WorkingSet->indexLB.data[b_k] - 1];
        if (-proc_control_B.c_data[WorkingSet->indexLB.data[b_k] - 1] >
            nrmGradInf) {
          proc_control_B.c_data[WorkingSet->indexLB.data[b_k] - 1] = -nrmGradInf
            + std::abs(nrmGradInf);
        }
      }

      if (TrialState->xstar.size - 1 >= 0) {
        std::memcpy(&TrialState->xstar.data[0], &proc_control_B.c_data[0],
                    TrialState->xstar.size * sizeof(real_T));
      }

      proc_control_relaxed(Hessian, TrialState->grad.data, TrialState,
                           MeritFunction, memspace, WorkingSet, QRManager,
                           CholManager, QPObjective, qpoptions);
      y_size_idx_0 = TrialState->delta_x.size;
      if (TrialState->delta_x.size - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_d[0], &TrialState->delta_x.data[0],
                    TrialState->delta_x.size * sizeof(real_T));
      }

      for (int32_T b_k{0}; b_k <= nVar; b_k++) {
        proc_control_B.y_data_d[b_k] = TrialState->xstar.data[b_k];
      }

      if (y_size_idx_0 - 1 >= 0) {
        std::memcpy(&TrialState->delta_x.data[0], &proc_control_B.y_data_d[0],
                    y_size_idx_0 * sizeof(real_T));
      }

      guard1 = true;
      break;

     default:
      stepSuccess = proc_control_soc(Hessian, TrialState->grad.data, TrialState,
        memspace, WorkingSet, QRManager, CholManager, QPObjective, qpoptions);
      checkBoundViolation = stepSuccess;
      if (stepSuccess && (TrialState->state != -6)) {
        for (int32_T b_k{0}; b_k <= nVar; b_k++) {
          TrialState->delta_x.data[b_k] = TrialState->xstar.data[b_k] +
            TrialState->socDirection.data[b_k];
        }
      }

      guard1 = true;
      break;
    }

    if (guard1) {
      if (TrialState->state != -6) {
        exitg1 = 1;
      } else {
        nrmGradInf = 0.0;
        nrmDirInf = 1.0;
        for (int32_T b_k{0}; b_k < 139; b_k++) {
          nrmGradInf = std::fmax(nrmGradInf, std::abs(TrialState->grad.data[b_k]));
          nrmDirInf = std::fmax(nrmDirInf, std::abs(TrialState->xstar.data[b_k]));
        }

        nrmGradInf = std::fmax(2.2204460492503131E-16, nrmGradInf / nrmDirInf);
        for (int32_T b_k{0}; b_k < 139; b_k++) {
          int32_T iH0;
          iH0 = 139 * b_k;
          for (y_size_idx_0 = 0; y_size_idx_0 < b_k; y_size_idx_0++) {
            Hessian[iH0 + y_size_idx_0] = 0.0;
          }

          Hessian[b_k + 139 * b_k] = nrmGradInf;
          iH0 += b_k;
          for (y_size_idx_0 = 0; y_size_idx_0 <= 137 - b_k; y_size_idx_0++) {
            Hessian[(iH0 + y_size_idx_0) + 1] = 0.0;
          }
        }
      }
    }
  } while (exitg1 == 0);

  if (checkBoundViolation) {
    y_size_idx_0 = TrialState->delta_x.size;
    if (TrialState->delta_x.size - 1 >= 0) {
      std::memcpy(&proc_control_B.c_data[0], &TrialState->delta_x.data[0],
                  TrialState->delta_x.size * sizeof(real_T));
    }

    for (nVar = 0; nVar < WorkingSet->sizes[3]; nVar++) {
      nrmDirInf = proc_control_B.c_data[WorkingSet->indexLB.data[nVar] - 1];
      nrmGradInf = (TrialState->xstarsqp[WorkingSet->indexLB.data[nVar] - 1] +
                    nrmDirInf) - lb[WorkingSet->indexLB.data[nVar] - 1];
      if (nrmGradInf < 0.0) {
        proc_control_B.c_data[WorkingSet->indexLB.data[nVar] - 1] = nrmDirInf -
          nrmGradInf;
        TrialState->xstar.data[WorkingSet->indexLB.data[nVar] - 1] -= nrmGradInf;
      }
    }

    TrialState->delta_x.size = y_size_idx_0;
    if (y_size_idx_0 - 1 >= 0) {
      std::memcpy(&TrialState->delta_x.data[0], &proc_control_B.c_data[0],
                  y_size_idx_0 * sizeof(real_T));
    }
  }

  return stepSuccess;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_outputBounds_p(const real_T
  runtimedata_OutputMin[130], const real_T runtimedata_OutputMax[130], const
  real_T X[143], real_T e, real_T c_data[], int32_T c_size[2])
{
  boolean_T exitg1;
  for (proc_control_B.i_gy = 0; proc_control_B.i_gy < 130; proc_control_B.i_gy++)
  {
    proc_control_B.bv1[proc_control_B.i_gy] = std::isinf
      (runtimedata_OutputMin[proc_control_B.i_gy]);
  }

  proc_control_all_H4RNf0h2(proc_control_B.bv1, proc_control_B.x_ew);
  proc_control_B.y_ef = true;
  proc_control_B.k = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.k < 13)) {
    if (!proc_control_B.x_ew[proc_control_B.k]) {
      proc_control_B.y_ef = false;
      exitg1 = true;
    } else {
      proc_control_B.k++;
    }
  }

  if (proc_control_B.y_ef) {
    for (proc_control_B.i_gy = 0; proc_control_B.i_gy < 130; proc_control_B.i_gy
         ++) {
      proc_control_B.bv1[proc_control_B.i_gy] = std::isinf
        (runtimedata_OutputMax[proc_control_B.i_gy]);
    }

    proc_control_all_H4RNf0h2(proc_control_B.bv1, proc_control_B.x_ew);
    proc_control_B.k = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.k < 13)) {
      if (!proc_control_B.x_ew[proc_control_B.k]) {
        proc_control_B.y_ef = false;
        exitg1 = true;
      } else {
        proc_control_B.k++;
      }
    }
  }

  if (proc_control_B.y_ef) {
    c_size[0] = 0;
    c_size[1] = 0;
  } else {
    for (proc_control_B.i_gy = 0; proc_control_B.i_gy < 260; proc_control_B.i_gy
         ++) {
      proc_control_B.b_c[proc_control_B.i_gy] = 0.0;
      proc_control_B.icf[proc_control_B.i_gy] = true;
    }

    for (proc_control_B.i_gy = 0; proc_control_B.i_gy < 13; proc_control_B.i_gy
         ++) {
      proc_control_B.ic_c[proc_control_B.i_gy] = static_cast<real_T>
        (proc_control_B.i_gy) + 1.0;
    }

    for (proc_control_B.k = 0; proc_control_B.k < 10; proc_control_B.k++) {
      for (proc_control_B.i_gy = 0; proc_control_B.i_gy < 13;
           proc_control_B.i_gy++) {
        proc_control_B.runtimedata_OutputMin = runtimedata_OutputMin[10 *
          proc_control_B.i_gy + proc_control_B.k];
        proc_control_B.icf[static_cast<int32_T>
          (proc_control_B.ic_c[proc_control_B.i_gy]) - 1] = ((!std::isinf
          (proc_control_B.runtimedata_OutputMin)) && (!std::isnan
          (proc_control_B.runtimedata_OutputMin)));
      }

      for (proc_control_B.i_gy = 0; proc_control_B.i_gy < 13;
           proc_control_B.i_gy++) {
        proc_control_B.runtimedata_OutputMin =
          proc_control_B.ic_c[proc_control_B.i_gy];
        proc_control_B.runtimedata_OutputMax = runtimedata_OutputMax[10 *
          proc_control_B.i_gy + proc_control_B.k];
        proc_control_B.icf[static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin + 13.0) - 1] = ((!std::isinf
          (proc_control_B.runtimedata_OutputMax)) && (!std::isnan
          (proc_control_B.runtimedata_OutputMax)));
        proc_control_B.ic[proc_control_B.i_gy] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin) - 1;
        proc_control_B.ic[proc_control_B.i_gy + 13] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin + 13.0) - 1;
      }

      for (proc_control_B.i_gy = 0; proc_control_B.i_gy < 26;
           proc_control_B.i_gy++) {
        proc_control_B.icf_k[proc_control_B.i_gy] =
          proc_control_B.icf[proc_control_B.ic[proc_control_B.i_gy]];
      }

      if (proc_control_any(proc_control_B.icf_k)) {
        for (proc_control_B.i_gy = 0; proc_control_B.i_gy < 13;
             proc_control_B.i_gy++) {
          proc_control_B.b_c[static_cast<int32_T>
            (proc_control_B.ic_c[proc_control_B.i_gy]) - 1] =
            (runtimedata_OutputMin[10 * proc_control_B.i_gy + proc_control_B.k]
             - e) - X[(11 * proc_control_B.i_gy + proc_control_B.k) + 1];
        }

        for (proc_control_B.i_gy = 0; proc_control_B.i_gy < 13;
             proc_control_B.i_gy++) {
          proc_control_B.b_c[static_cast<int32_T>
            (proc_control_B.ic_c[proc_control_B.i_gy] + 13.0) - 1] = (X[(11 *
            proc_control_B.i_gy + proc_control_B.k) + 1] -
            runtimedata_OutputMax[10 * proc_control_B.i_gy + proc_control_B.k])
            - e;
        }
      }

      for (proc_control_B.i_gy = 0; proc_control_B.i_gy < 13;
           proc_control_B.i_gy++) {
        proc_control_B.ic_c[proc_control_B.i_gy] += 26.0;
      }
    }

    proc_control_B.k = 0;
    for (proc_control_B.i_gy = 0; proc_control_B.i_gy < 260; proc_control_B.i_gy
         ++) {
      if (proc_control_B.icf[proc_control_B.i_gy]) {
        proc_control_B.k++;
      }
    }

    proc_control_B.b_size_idx_0 = proc_control_B.k;
    proc_control_B.k = 0;
    for (proc_control_B.i_gy = 0; proc_control_B.i_gy < 260; proc_control_B.i_gy
         ++) {
      if (proc_control_B.icf[proc_control_B.i_gy]) {
        proc_control_B.b_data_i[proc_control_B.k] = static_cast<int16_T>
          (proc_control_B.i_gy + 1);
        proc_control_B.k++;
      }
    }

    for (proc_control_B.i_gy = 0; proc_control_B.i_gy <
         proc_control_B.b_size_idx_0; proc_control_B.i_gy++) {
      proc_control_B.b_c_data[proc_control_B.i_gy] =
        proc_control_B.b_c[proc_control_B.b_data_i[proc_control_B.i_gy] - 1];
    }

    c_size[0] = proc_control_B.b_size_idx_0;
    c_size[1] = 1;
    if (proc_control_B.b_size_idx_0 - 1 >= 0) {
      std::memcpy(&c_data[0], &proc_control_B.b_c_data[0],
                  proc_control_B.b_size_idx_0 * sizeof(real_T));
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_co_stateEvolution_IBbdjakB(const real_T X[143], const
  real_T U[88], real_T c[130])
{
  std::memset(&c[0], 0, 130U * sizeof(real_T));
  for (proc_control_B.i25 = 0; proc_control_B.i25 < 13; proc_control_B.i25++) {
    proc_control_B.ic_ch[proc_control_B.i25] = static_cast<real_T>
      (proc_control_B.i25) + 1.0;
  }

  for (proc_control_B.i25 = 0; proc_control_B.i25 < 11; proc_control_B.i25++) {
    for (proc_control_B.i26 = 0; proc_control_B.i26 < 8; proc_control_B.i26++) {
      proc_control_B.b_U_m[proc_control_B.i26 + (proc_control_B.i25 << 3)] = U
        [11 * proc_control_B.i26 + proc_control_B.i25];
    }

    for (proc_control_B.i26 = 0; proc_control_B.i26 < 13; proc_control_B.i26++)
    {
      proc_control_B.b_X_h[proc_control_B.i26 + 13 * proc_control_B.i25] = X[11 *
        proc_control_B.i26 + proc_control_B.i25];
    }
  }

  for (proc_control_B.i_fo = 0; proc_control_B.i_fo < 10; proc_control_B.i_fo++)
  {
    proc_control_B.i25 = proc_control_B.i_fo << 3;
    proc_co_AUV8QuatSimFcn_AbfqyrNU(&proc_control_B.b_X_h[13 *
      proc_control_B.i_fo], &proc_control_B.b_U_m[proc_control_B.i25],
      proc_control_B.dv15);
    proc_control_B.i26 = (proc_control_B.i_fo + 1) * 13;
    proc_co_AUV8QuatSimFcn_AbfqyrNU(&proc_control_B.b_X_h[proc_control_B.i26],
      &proc_control_B.b_U_m[proc_control_B.i25], proc_control_B.dv16);
    for (proc_control_B.i25 = 0; proc_control_B.i25 < 13; proc_control_B.i25++)
    {
      c[static_cast<int32_T>(proc_control_B.ic_ch[proc_control_B.i25]) - 1] =
        (proc_control_B.b_X_h[13 * proc_control_B.i_fo + proc_control_B.i25] +
         (proc_control_B.dv15[proc_control_B.i25] +
          proc_control_B.dv16[proc_control_B.i25]) * 0.05) -
        proc_control_B.b_X_h[proc_control_B.i26 + proc_control_B.i25];
    }

    for (proc_control_B.i25 = 0; proc_control_B.i25 < 13; proc_control_B.i25++)
    {
      proc_control_B.ic_ch[proc_control_B.i25] += 13.0;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc__eML_blk_kernel_anonFcn2_g(const real_T runtimedata_x[13],
  const real_T runtimedata_OutputMin[130], const real_T runtimedata_OutputMax
  [130], const real_T z[139], real_T varargout_1_data[], int32_T
  varargout_1_size[2], real_T varargout_2[130])
{
  proc_control_znlmpc_getXUe(z, runtimedata_x, proc_control_B.X_b,
    proc_control_B.U_i, &proc_control_B.e);
  proc_control_outputBounds_p(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_B.X_b, proc_control_B.e, proc_control_B.varargin_1_data_o2,
    proc_control_B.varargin_1_size);
  proc_control_B.sizes_idx_1_p = static_cast<int8_T>
    ((proc_control_B.varargin_1_size[0] != 0) &&
     (proc_control_B.varargin_1_size[1] != 0));
  if (proc_control_B.sizes_idx_1_p == 0) {
    proc_control_B.sizes_idx_0 = proc_control_B.varargin_1_size[0];
  } else if ((proc_control_B.varargin_1_size[0] != 0) &&
             (proc_control_B.varargin_1_size[1] != 0)) {
    proc_control_B.sizes_idx_0 = proc_control_B.varargin_1_size[0];
  } else {
    proc_control_B.sizes_idx_0 = 0;
  }

  varargout_1_size[0] = proc_control_B.sizes_idx_0;
  varargout_1_size[1] = proc_control_B.sizes_idx_1_p;
  if ((proc_control_B.sizes_idx_1_p - 1 >= 0) && (proc_control_B.sizes_idx_0 - 1
       >= 0)) {
    std::memcpy(&varargout_1_data[0], &proc_control_B.varargin_1_data_o2[0],
                proc_control_B.sizes_idx_0 * sizeof(real_T));
  }

  proc_co_stateEvolution_IBbdjakB(proc_control_B.X_b, proc_control_B.U_i,
    varargout_2);
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_evalObjAndConstr(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[139],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130],
  real_T *fval, int32_T *status)
{
  proc_control_znlmpc_getXUe(x, obj_objfun_workspace_runtimedat,
    proc_control_B.X, proc_control_B.U_f, &proc_control_B.b_e);
  proc_control_B.fs = 0.0;
  for (proc_control_B.i_f = 0; proc_control_B.i_f < 11; proc_control_B.i_f++) {
    for (proc_control_B.i_l = 0; proc_control_B.i_l < 13; proc_control_B.i_l++)
    {
      proc_control_B.b_X[proc_control_B.i_l + 13 * proc_control_B.i_f] =
        proc_control_B.X[11 * proc_control_B.i_l + proc_control_B.i_f];
    }

    for (proc_control_B.i_l = 0; proc_control_B.i_l < 8; proc_control_B.i_l++) {
      proc_control_B.b_U[proc_control_B.i_l + (proc_control_B.i_f << 3)] =
        proc_control_B.U_f[11 * proc_control_B.i_l + proc_control_B.i_f];
    }
  }

  for (proc_control_B.i_l = 0; proc_control_B.i_l < 10; proc_control_B.i_l++) {
    proc_control_B.wtYerr = 0.0;
    for (proc_control_B.i_f = 0; proc_control_B.i_f < 13; proc_control_B.i_f++)
    {
      proc_control_B.wtYerr_tmp = 10 * proc_control_B.i_f + proc_control_B.i_l;
      proc_control_B.wtYerr_k = (proc_control_B.b_X[(proc_control_B.i_l + 1) *
        13 + proc_control_B.i_f] -
        obj_objfun_workspace_runtimed_1[proc_control_B.wtYerr_tmp]) *
        obj_objfun_workspace_runtimed_2[proc_control_B.wtYerr_tmp];
      proc_control_B.wtYerr += proc_control_B.wtYerr_k * proc_control_B.wtYerr_k;
    }

    proc_control_B.fs += proc_control_B.wtYerr;
    std::memcpy(&proc_control_B.umvk[0], &proc_control_B.b_U[proc_control_B.i_l <<
                3], sizeof(real_T) << 3U);
    if (proc_control_B.i_l + 1 == 1) {
      for (proc_control_B.i_f = 0; proc_control_B.i_f < 8; proc_control_B.i_f++)
      {
        proc_control_B.duk[proc_control_B.i_f] =
          proc_control_B.umvk[proc_control_B.i_f] -
          obj_objfun_workspace_runtimed_0[proc_control_B.i_f];
      }
    } else {
      for (proc_control_B.i_f = 0; proc_control_B.i_f < 8; proc_control_B.i_f++)
      {
        proc_control_B.duk[proc_control_B.i_f] =
          proc_control_B.umvk[proc_control_B.i_f] - proc_control_B.b_U
          [((proc_control_B.i_l - 1) << 3) + proc_control_B.i_f];
      }
    }

    proc_control_B.wtYerr = 0.0;
    proc_control_B.wtYerr_k = 0.0;
    for (proc_control_B.i_f = 0; proc_control_B.i_f < 8; proc_control_B.i_f++) {
      proc_control_B.wtYerr_tmp = 10 * proc_control_B.i_f + proc_control_B.i_l;
      proc_control_B.umvk_i = (proc_control_B.umvk[proc_control_B.i_f] -
        obj_objfun_workspace_runtimed_5[proc_control_B.wtYerr_tmp]) *
        obj_objfun_workspace_runtimed_3[proc_control_B.wtYerr_tmp];
      proc_control_B.duk_h =
        obj_objfun_workspace_runtimed_4[proc_control_B.wtYerr_tmp] *
        proc_control_B.duk[proc_control_B.i_f];
      proc_control_B.wtYerr += proc_control_B.umvk_i * proc_control_B.umvk_i;
      proc_control_B.wtYerr_k += proc_control_B.duk_h * proc_control_B.duk_h;
      proc_control_B.umvk[proc_control_B.i_f] = proc_control_B.umvk_i;
      proc_control_B.duk[proc_control_B.i_f] = proc_control_B.duk_h;
    }

    proc_control_B.fs = (proc_control_B.fs + proc_control_B.wtYerr) +
      proc_control_B.wtYerr_k;
  }

  *fval = 100000.0 * proc_control_B.b_e * proc_control_B.b_e + proc_control_B.fs;
  if (std::isinf(*fval) || std::isnan(*fval)) {
    if (std::isnan(*fval)) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    proc_control_B.i_f = (ineq0 + obj_mCineq) - 2;
    proc__eML_blk_kernel_anonFcn2_g(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_B.b_data_o, proc_control_B.b_size, proc_control_B.c);
    if (ineq0 > proc_control_B.i_f + 1) {
      proc_control_B.i_l = -1;
      proc_control_B.i_f = -1;
    } else {
      proc_control_B.i_l = ineq0 - 2;
    }

    proc_control_B.wtYerr_tmp = proc_control_B.i_f - proc_control_B.i_l;
    for (proc_control_B.i_f = 0; proc_control_B.i_f < proc_control_B.wtYerr_tmp;
         proc_control_B.i_f++) {
      Cineq_workspace_data[(proc_control_B.i_l + proc_control_B.i_f) + 1] =
        proc_control_B.b_data_o[proc_control_B.i_f];
    }

    std::memcpy(&Ceq_workspace[0], &proc_control_B.c[0], 130U * sizeof(real_T));
    *status = proc_contr_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
      ineq0);
    if (*status == 1) {
      *status = checkVectorNonFinite_2JllBqp7(Ceq_workspace);
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_con_computeLinearResiduals(const real_T x[139], int32_T
  nVar, real_T workspaceIneq_data[], const int32_T *workspaceIneq_size, int32_T
  mLinIneq, const real_T AineqT_data[], const real_T bineq_data[], int32_T ldAi)
{
  if (mLinIneq > 0) {
    int32_T k;
    int32_T loop_ub;
    int32_T y_size_idx_0;
    if (*workspaceIneq_size - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data_f[0], &workspaceIneq_data[0],
                  *workspaceIneq_size * sizeof(real_T));
    }

    for (k = 0; k < mLinIneq; k++) {
      proc_control_B.y_data_f[k] = bineq_data[k];
    }

    if (*workspaceIneq_size - 1 >= 0) {
      std::memcpy(&workspaceIneq_data[0], &proc_control_B.y_data_f[0],
                  *workspaceIneq_size * sizeof(real_T));
    }

    for (k = 0; k < mLinIneq; k++) {
      workspaceIneq_data[k] = -workspaceIneq_data[k];
    }

    k = 0;
    loop_ub = (mLinIneq - 1) * ldAi + 1;
    y_size_idx_0 = 1;
    while (((ldAi > 0) && (y_size_idx_0 <= loop_ub)) || ((ldAi < 0) &&
            (y_size_idx_0 >= loop_ub))) {
      real_T c;
      int32_T d;
      int32_T ix;
      ix = 0;
      c = 0.0;
      d = (y_size_idx_0 + nVar) - 1;
      for (int32_T ia{y_size_idx_0}; ia <= d; ia++) {
        c += AineqT_data[ia - 1] * x[ix];
        ix++;
      }

      workspaceIneq_data[k] += c;
      k++;
      y_size_idx_0 += ldAi;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
real_T proc_control::proc_control_computeMeritFcn(real_T obj_penaltyParam,
  real_T fval, const real_T Cineq_workspace_data[], int32_T mIneq, const real_T
  Ceq_workspace[130], boolean_T evalWellDefined)
{
  real_T val;
  if (evalWellDefined) {
    real_T constrViolationEq;
    real_T constrViolationIneq;
    constrViolationEq = 0.0;
    for (int32_T k{0}; k < 130; k++) {
      constrViolationEq += std::abs(Ceq_workspace[k]);
    }

    constrViolationIneq = 0.0;
    for (int32_T k{0}; k < mIneq; k++) {
      if (Cineq_workspace_data[k] > 0.0) {
        constrViolationIneq += Cineq_workspace_data[k];
      }
    }

    val = (constrViolationEq + constrViolationIneq) * obj_penaltyParam + fval;
  } else {
    val = (rtInf);
  }

  return val;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_linesearch(boolean_T *evalWellDefined, const
  real_T bineq_data[], int32_T WorkingSet_nVar, int32_T WorkingSet_ldA, const
  real_T WorkingSet_Aineq_data[], s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *TrialState,
  real_T MeritFunction_penaltyParam, real_T MeritFunction_phi, real_T
  MeritFunction_phiPrimePlus, real_T MeritFunction_phiFullStep, const
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *FcnEvaluator_objfun_workspace_r, const
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *FcnEvaluator_nonlcon_workspace_, int32_T
  FcnEvaluator_mCineq, boolean_T socTaken, real_T *alpha, int32_T *exitflag)
{
  proc_control_B.mLinIneq = TrialState->mIneq - TrialState->mNonlinIneq;
  *alpha = 1.0;
  *exitflag = 1;
  proc_control_B.phi_alpha = MeritFunction_phiFullStep;
  proc_control_B.y_size_idx_0_l = TrialState->searchDir.size;
  proc_control_B.loop_ub_f = TrialState->searchDir.size;
  if (proc_control_B.loop_ub_f - 1 >= 0) {
    std::memcpy(&proc_control_B.y_data_a[0], &TrialState->searchDir.data[0],
                proc_control_B.loop_ub_f * sizeof(real_T));
  }

  proc_control_B.loop_ub_f = 0;
  while (proc_control_B.loop_ub_f <= WorkingSet_nVar - 1) {
    proc_control_B.y_data_a[proc_control_B.loop_ub_f] = TrialState->
      delta_x.data[proc_control_B.loop_ub_f];
    proc_control_B.loop_ub_f++;
  }

  if (proc_control_B.y_size_idx_0_l - 1 >= 0) {
    std::memcpy(&TrialState->searchDir.data[0], &proc_control_B.y_data_a[0],
                proc_control_B.y_size_idx_0_l * sizeof(real_T));
  }

  int32_T exitg1;
  do {
    exitg1 = 0;
    if (TrialState->FunctionEvaluations < 13900) {
      if ((*evalWellDefined) && (proc_control_B.phi_alpha <= *alpha * 0.0001 *
           MeritFunction_phiPrimePlus + MeritFunction_phi)) {
        exitg1 = 1;
      } else {
        boolean_T exitg2;
        *alpha *= 0.7;
        proc_control_B.loop_ub_f = 0;
        while (proc_control_B.loop_ub_f <= WorkingSet_nVar - 1) {
          TrialState->delta_x.data[proc_control_B.loop_ub_f] = *alpha *
            TrialState->xstar.data[proc_control_B.loop_ub_f];
          proc_control_B.loop_ub_f++;
        }

        if (socTaken) {
          proc_control_B.phi_alpha = *alpha * *alpha;
          if ((WorkingSet_nVar >= 1) && (!(proc_control_B.phi_alpha == 0.0))) {
            proc_control_B.loop_ub_f = 0;
            while (proc_control_B.loop_ub_f <= WorkingSet_nVar - 1) {
              TrialState->delta_x.data[proc_control_B.loop_ub_f] +=
                proc_control_B.phi_alpha * TrialState->
                socDirection.data[proc_control_B.loop_ub_f];
              proc_control_B.loop_ub_f++;
            }
          }
        }

        proc_control_B.tooSmallX = true;
        proc_control_B.loop_ub_f = 0;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.loop_ub_f <= WorkingSet_nVar - 1)) {
          if (0.1 * std::fmax(1.0, std::abs(TrialState->
                xstarsqp[proc_control_B.loop_ub_f])) <= std::abs
              (TrialState->delta_x.data[proc_control_B.loop_ub_f])) {
            proc_control_B.tooSmallX = false;
            exitg2 = true;
          } else {
            proc_control_B.loop_ub_f++;
          }
        }

        if (proc_control_B.tooSmallX) {
          *exitflag = -2;
          exitg1 = 1;
        } else {
          proc_control_B.loop_ub_f = 0;
          while (proc_control_B.loop_ub_f <= WorkingSet_nVar - 1) {
            TrialState->xstarsqp[proc_control_B.loop_ub_f] =
              TrialState->xstarsqp_old[proc_control_B.loop_ub_f] +
              TrialState->delta_x.data[proc_control_B.loop_ub_f];
            proc_control_B.loop_ub_f++;
          }

          proc_control_evalObjAndConstr(FcnEvaluator_objfun_workspace_r->x,
            FcnEvaluator_objfun_workspace_r->lastMV,
            FcnEvaluator_objfun_workspace_r->ref,
            FcnEvaluator_objfun_workspace_r->OutputWeights,
            FcnEvaluator_objfun_workspace_r->MVWeights,
            FcnEvaluator_objfun_workspace_r->MVRateWeights,
            FcnEvaluator_objfun_workspace_r->MVScaledTarget,
            FcnEvaluator_nonlcon_workspace_->x,
            FcnEvaluator_nonlcon_workspace_->OutputMin,
            FcnEvaluator_nonlcon_workspace_->OutputMax, FcnEvaluator_mCineq,
            TrialState->xstarsqp, TrialState->cIneq.data, TrialState->iNonIneq0,
            TrialState->cEq, &TrialState->sqpFval, &proc_control_B.loop_ub_f);
          proc_con_computeLinearResiduals(TrialState->xstarsqp, WorkingSet_nVar,
            TrialState->cIneq.data, &TrialState->cIneq.size,
            proc_control_B.mLinIneq, WorkingSet_Aineq_data, bineq_data,
            WorkingSet_ldA);
          TrialState->FunctionEvaluations++;
          *evalWellDefined = (proc_control_B.loop_ub_f == 1);
          proc_control_B.phi_alpha = proc_control_computeMeritFcn
            (MeritFunction_penaltyParam, TrialState->sqpFval,
             TrialState->cIneq.data, TrialState->mIneq, TrialState->cEq,
             *evalWellDefined);
        }
      }
    } else {
      *exitflag = 0;
      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_driver(const real_T bineq_data[], const real_T
  lb[139], s_VA2YLuOkHrWNKQO7FEpyoH_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction, const
  s_lkFpKxHZB0M4xOcTLHVN2_proc__T *FcnEvaluator, s_j0X3urodUv3ospvkLXsspC_proc_T
  *memspace, s_gnTVUZmGpKWoq4tCE9AGn_proc__T *WorkingSet,
  s_Ref0liQlfQOPmAop9i3aPH_proc_T *QRManager, s_8RbNZtrzTH63iHAPCwMh6G_proc_T
  *CholManager, s_wbACub5hw4pAYPfHb1hrsB_proc_T *QPObjective, const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  real_T Hessian[19321])
{
  static const char_T h[7]{ 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  static const int8_T j[19321]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  for (proc_control_B.mLambda = 0; proc_control_B.mLambda < 19321;
       proc_control_B.mLambda++) {
    Hessian[proc_control_B.mLambda] = j[proc_control_B.mLambda];
  }

  proc_control_B.nVar_tmp_tmp = WorkingSet->nVar;
  proc_control_B.mFixed = WorkingSet->sizes[0];
  proc_control_B.mIneq_i = WorkingSet->sizes[2];
  proc_control_B.mLB = WorkingSet->sizes[3];
  proc_control_B.mUB = WorkingSet->sizes[4];
  proc_control_B.mConstr_tmp = (((WorkingSet->sizes[0] + WorkingSet->sizes[2]) +
    WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 129;
  proc_control_B.mLinIneq_tmp_tmp = WorkingSet->sizes[2] -
    TrialState->mNonlinIneq;
  proc_control_B.mLambda = ((WorkingSet->sizes[2] + WorkingSet->sizes[3]) +
    WorkingSet->sizes[4]) + (WorkingSet->sizes[0] << 1);
  if (WorkingSet->nVar >= proc_control_B.mLambda) {
    proc_control_B.mLambda = WorkingSet->nVar;
  }

  proc_control_B.qpoptions_MaxIterations = 10 * proc_control_B.mLambda;
  TrialState->steplength = 1.0;
  proc_control_B.Flags.fevalOK = true;
  proc_control_B.Flags.stepAccepted = false;
  proc_control_B.Flags.failedLineSearch = false;
  proc_control_B.Flags.stepType = 1;
  proc_control_B.ix_h = 0;
  while (proc_control_B.ix_h <= proc_control_B.mConstr_tmp) {
    TrialState->lambdaStopTest.data[proc_control_B.ix_h] =
      TrialState->lambdasqp.data[proc_control_B.ix_h];
    proc_control_B.ix_h++;
  }

  proc_control_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  proc_control_B.optimRelativeFactor = std::fmax(1.0, std::abs
    (TrialState->grad.data[proc_control_ixamax(WorkingSet->nVar,
    TrialState->grad.data) - 1]));
  if (std::isinf(proc_control_B.optimRelativeFactor)) {
    proc_control_B.optimRelativeFactor = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  MeritFunction->feasRelativeFactor = std::fmax(1.0,
    MeritFunction->nlpPrimalFeasError);
  proc_control_B.isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
    MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &proc_control_B.Flags.gradOK, &MeritFunction->nlpDualFeasError);
  if (!proc_control_B.Flags.gradOK) {
    proc_control_B.Flags.done = true;
    if (proc_control_B.isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = 0.0;
    MeritFunction->firstOrderOpt = std::fmax(MeritFunction->nlpDualFeasError,
      0.0);
    proc_control_B.ix_h = 0;
    while (proc_control_B.ix_h <= proc_control_B.mConstr_tmp) {
      TrialState->lambdaStopTestPrev.data[proc_control_B.ix_h] =
        TrialState->lambdaStopTest.data[proc_control_B.ix_h];
      proc_control_B.ix_h++;
    }

    if (proc_control_B.isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
         proc_control_B.optimRelativeFactor)) {
      proc_control_B.Flags.done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      proc_control_B.Flags.done = false;
      if (proc_control_B.isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        proc_control_B.Flags.done = true;
        TrialState->sqpExitFlag = -3;
      }
    }
  }

  proc_control_B.m_c = *TrialState;
  proc_control_saveJacobian(&proc_control_B.m_c, WorkingSet->nVar,
    WorkingSet->sizes[2], WorkingSet->Aineq.data, TrialState->iNonIneq0,
    WorkingSet->Aeq.data, WorkingSet->ldA);
  *TrialState = proc_control_B.m_c;
  proc_control_saveState(TrialState);
  if (!proc_control_B.Flags.done) {
    TrialState->sqpIterations = 1;
  }

  while (!proc_control_B.Flags.done) {
    if ((!proc_control_B.Flags.stepAccepted) &&
        (!proc_control_B.Flags.failedLineSearch)) {
      proc_control_B.expl_temp_c.IterDisplayQP = false;
      proc_control_B.expl_temp_c.RemainFeasible = false;
      proc_control_B.expl_temp_c.ProbRelTolFactor = 1.0;
      proc_control_B.expl_temp_c.ConstrRelTolFactor = 1.0;
      proc_control_B.expl_temp_c.PricingTolerance = 0.0;
      proc_control_B.expl_temp_c.ObjectiveLimit = (rtMinusInf);
      proc_control_B.expl_temp_c.ConstraintTolerance = 0.02;
      proc_control_B.expl_temp_c.OptimalityTolerance = 2.2204460492503131E-14;
      proc_control_B.expl_temp_c.StepTolerance = 1.0E-6;
      proc_control_B.expl_temp_c.MaxIterations =
        proc_control_B.qpoptions_MaxIterations;
      for (proc_control_B.mLambda = 0; proc_control_B.mLambda < 7;
           proc_control_B.mLambda++) {
        proc_control_B.expl_temp_c.SolverName[proc_control_B.mLambda] =
          h[proc_control_B.mLambda];
      }
    }

    while ((!proc_control_B.Flags.stepAccepted) &&
           (!proc_control_B.Flags.failedLineSearch)) {
      if (proc_control_B.Flags.stepType != 3) {
        proc_updateWorkingSetForNewQP_l(TrialState->xstarsqp, WorkingSet,
          proc_control_B.mIneq_i, TrialState->mNonlinIneq,
          TrialState->cIneq.data, TrialState->cEq, proc_control_B.mLB, lb,
          proc_control_B.mUB, proc_control_B.mFixed);
      }

      proc_control_B.expl_temp_h = proc_control_B.expl_temp_c;
      proc_control_B.Flags.stepAccepted = proc_control_step_k
        (&proc_control_B.Flags.stepType, Hessian, lb, TrialState, MeritFunction,
         memspace, WorkingSet, QRManager, CholManager, QPObjective,
         &proc_control_B.expl_temp_h);
      if (proc_control_B.Flags.stepAccepted) {
        proc_control_B.mLambda = 0;
        while (proc_control_B.mLambda <= proc_control_B.nVar_tmp_tmp - 1) {
          TrialState->xstarsqp[proc_control_B.mLambda] +=
            TrialState->delta_x.data[proc_control_B.mLambda];
          proc_control_B.mLambda++;
        }

        proc_control_evalObjAndConstr
          (FcnEvaluator->objfun.workspace.runtimedata.x,
           FcnEvaluator->objfun.workspace.runtimedata.lastMV,
           FcnEvaluator->objfun.workspace.runtimedata.ref,
           FcnEvaluator->objfun.workspace.runtimedata.OutputWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVRateWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVScaledTarget,
           FcnEvaluator->nonlcon.workspace.runtimedata.x,
           FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
           FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
           FcnEvaluator->mCineq, TrialState->xstarsqp, TrialState->cIneq.data,
           TrialState->iNonIneq0, TrialState->cEq, &TrialState->sqpFval,
           &proc_control_B.mLambda);
        proc_control_B.Flags.fevalOK = (proc_control_B.mLambda == 1);
        TrialState->FunctionEvaluations++;
        proc_con_computeLinearResiduals(TrialState->xstarsqp,
          proc_control_B.nVar_tmp_tmp, TrialState->cIneq.data,
          &TrialState->cIneq.size, proc_control_B.mLinIneq_tmp_tmp,
          WorkingSet->Aineq.data, bineq_data, WorkingSet->ldA);
        MeritFunction->phiFullStep = proc_control_computeMeritFcn
          (MeritFunction->penaltyParam, TrialState->sqpFval,
           TrialState->cIneq.data, proc_control_B.mIneq_i, TrialState->cEq,
           proc_control_B.Flags.fevalOK);
      }

      if ((proc_control_B.Flags.stepType == 1) &&
          proc_control_B.Flags.stepAccepted && proc_control_B.Flags.fevalOK &&
          (MeritFunction->phi < MeritFunction->phiFullStep) &&
          (TrialState->sqpFval < TrialState->sqpFval_old)) {
        proc_control_B.Flags.stepType = 3;
        proc_control_B.Flags.stepAccepted = false;
      } else {
        proc_control_linesearch(&proc_control_B.Flags.fevalOK, bineq_data,
          WorkingSet->nVar, WorkingSet->ldA, WorkingSet->Aineq.data, TrialState,
          MeritFunction->penaltyParam, MeritFunction->phi,
          MeritFunction->phiPrimePlus, MeritFunction->phiFullStep,
          &FcnEvaluator->objfun.workspace.runtimedata,
          &FcnEvaluator->nonlcon.workspace.runtimedata, FcnEvaluator->mCineq,
          (proc_control_B.Flags.stepType == 3) &&
          proc_control_B.Flags.stepAccepted, &proc_control_B.optimRelativeFactor,
          &proc_control_B.mLambda);
        TrialState->steplength = proc_control_B.optimRelativeFactor;
        if (proc_control_B.mLambda > 0) {
          proc_control_B.Flags.stepAccepted = true;
        } else {
          proc_control_B.Flags.failedLineSearch = true;
        }
      }
    }

    if (proc_control_B.Flags.stepAccepted &&
        (!proc_control_B.Flags.failedLineSearch)) {
      proc_control_B.ix_h = 0;
      while (proc_control_B.ix_h <= proc_control_B.nVar_tmp_tmp - 1) {
        TrialState->xstarsqp[proc_control_B.ix_h] = TrialState->
          xstarsqp_old[proc_control_B.ix_h] + TrialState->
          delta_x.data[proc_control_B.ix_h];
        proc_control_B.ix_h++;
      }

      proc_control_B.ix_h = 0;
      while (proc_control_B.ix_h <= proc_control_B.mConstr_tmp) {
        TrialState->lambdasqp.data[proc_control_B.ix_h] +=
          (TrialState->lambda.data[proc_control_B.ix_h] -
           TrialState->lambdasqp.data[proc_control_B.ix_h]) *
          TrialState->steplength;
        proc_control_B.ix_h++;
      }

      proc_control_saveState(TrialState);
      proc_control_B.Flags.gradOK = true;
      evalObjAndConstrAndDerivatives
        (FcnEvaluator->objfun.workspace.runtimedata.x,
         FcnEvaluator->objfun.workspace.runtimedata.lastMV,
         FcnEvaluator->objfun.workspace.runtimedata.ref,
         FcnEvaluator->objfun.workspace.runtimedata.OutputWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVRateWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVScaledTarget,
         FcnEvaluator->nonlcon.workspace.runtimedata.x,
         FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
         FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
         FcnEvaluator->mCineq, TrialState->xstarsqp, TrialState->grad.data,
         TrialState->cIneq.data, TrialState->iNonIneq0, TrialState->cEq,
         WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->ldA,
         WorkingSet->Aeq.data, WorkingSet->ldA, &TrialState->sqpFval,
         &proc_control_B.mLambda);
      TrialState->FunctionEvaluations++;
      proc_control_B.Flags.fevalOK = (proc_control_B.mLambda == 1);
    } else {
      TrialState->sqpFval = TrialState->sqpFval_old;
      std::memcpy(&TrialState->xstarsqp[0], &TrialState->xstarsqp_old[0], 139U *
                  sizeof(real_T));
      proc_control_B.ix_h = TrialState->cIneq.size;
      proc_control_B.b_ix = TrialState->cIneq.size;
      if (proc_control_B.b_ix - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_bs[0], &TrialState->cIneq.data[0],
                    proc_control_B.b_ix * sizeof(real_T));
      }

      proc_control_B.mLambda = 0;
      while (proc_control_B.mLambda <= TrialState->mIneq - 1) {
        proc_control_B.y_data_bs[proc_control_B.mLambda] =
          TrialState->cIneq_old.data[proc_control_B.mLambda];
        proc_control_B.mLambda++;
      }

      if (proc_control_B.ix_h - 1 >= 0) {
        std::memcpy(&TrialState->cIneq.data[0], &proc_control_B.y_data_bs[0],
                    proc_control_B.ix_h * sizeof(real_T));
      }

      std::memcpy(&TrialState->cEq[0], &TrialState->cEq_old[0], 130U * sizeof
                  (real_T));
    }

    proc_control_test_exit(&proc_control_B.Flags, memspace, MeritFunction,
      fscales_lineq_constraint_size, fscales_cineq_constraint_size, WorkingSet,
      TrialState, QRManager, lb);
    if ((!proc_control_B.Flags.done) && proc_control_B.Flags.stepAccepted) {
      proc_control_B.Flags.stepAccepted = false;
      proc_control_B.Flags.stepType = 1;
      proc_control_B.Flags.failedLineSearch = false;
      proc_control_B.b_ix = proc_control_B.mFixed + TrialState->iNonIneq0;
      proc_control_B.mLambda = WorkingSet->ldA;
      proc_control_B.ix_h = 0;
      while (proc_control_B.ix_h <= proc_control_B.nVar_tmp_tmp - 1) {
        TrialState->delta_gradLag.data[proc_control_B.ix_h] =
          TrialState->grad.data[proc_control_B.ix_h];
        proc_control_B.ix_h++;
      }

      if (proc_control_B.nVar_tmp_tmp >= 1) {
        proc_control_B.ix_h = 0;
        while (proc_control_B.ix_h <= proc_control_B.nVar_tmp_tmp - 1) {
          TrialState->delta_gradLag.data[proc_control_B.ix_h] +=
            -TrialState->grad_old.data[proc_control_B.ix_h];
          proc_control_B.ix_h++;
        }
      }

      proc_contro_xgemv_mtmcjbiadz2ic(proc_control_B.nVar_tmp_tmp, 130,
        WorkingSet->Aeq.data, 1, WorkingSet->ldA, TrialState->lambdasqp.data,
        proc_control_B.mFixed + 1, TrialState->delta_gradLag.data);
      proc_control_B.ix_h = proc_control_B.mFixed;
      proc_control_B.c_dj = WorkingSet->ldA * 129 + 1;
      proc_control_B.b_iy = 1;
      while (((proc_control_B.mLambda > 0) && (proc_control_B.b_iy <=
               proc_control_B.c_dj)) || ((proc_control_B.mLambda < 0) &&
              (proc_control_B.b_iy >= proc_control_B.c_dj))) {
        proc_control_B.iy = 0;
        proc_control_B.b_ia = (proc_control_B.b_iy + proc_control_B.nVar_tmp_tmp)
          - 1;
        proc_control_B.ia_l = proc_control_B.b_iy;
        while (proc_control_B.ia_l <= proc_control_B.b_ia) {
          TrialState->delta_gradLag.data[proc_control_B.iy] +=
            TrialState->JacCeqTrans_old.data[proc_control_B.ia_l - 1] *
            -TrialState->lambdasqp.data[proc_control_B.ix_h];
          proc_control_B.iy++;
          proc_control_B.ia_l++;
        }

        proc_control_B.ix_h++;
        proc_control_B.b_iy += proc_control_B.mLambda;
      }

      if (TrialState->mNonlinIneq > 0) {
        proc_contro_xgemv_mtmcjbiadz2ic(proc_control_B.nVar_tmp_tmp,
          TrialState->mNonlinIneq, WorkingSet->Aineq.data, WorkingSet->ldA *
          (TrialState->iNonIneq0 - 1) + 1, WorkingSet->ldA,
          TrialState->lambdasqp.data, proc_control_B.b_ix + 130,
          TrialState->delta_gradLag.data);
        proc_control_B.ix_h = (TrialState->mNonlinIneq - 1) * WorkingSet->ldA +
          1;
        proc_control_B.c_dj = 1;
        while (((proc_control_B.mLambda > 0) && (proc_control_B.c_dj <=
                 proc_control_B.ix_h)) || ((proc_control_B.mLambda < 0) &&
                (proc_control_B.c_dj >= proc_control_B.ix_h))) {
          proc_control_B.b_iy = 0;
          proc_control_B.iy = (proc_control_B.c_dj + proc_control_B.nVar_tmp_tmp)
            - 1;
          proc_control_B.b_ia = proc_control_B.c_dj;
          while (proc_control_B.b_ia <= proc_control_B.iy) {
            TrialState->delta_gradLag.data[proc_control_B.b_iy] +=
              TrialState->JacCineqTrans_old.data[proc_control_B.b_ia - 1] *
              -TrialState->lambdasqp.data[proc_control_B.b_ix + 129];
            proc_control_B.b_iy++;
            proc_control_B.b_ia++;
          }

          proc_control_B.b_ix++;
          proc_control_B.c_dj += proc_control_B.mLambda;
        }
      }

      proc_control_saveJacobian(TrialState, proc_control_B.nVar_tmp_tmp,
        proc_control_B.mIneq_i, WorkingSet->Aineq.data, TrialState->iNonIneq0,
        WorkingSet->Aeq.data, WorkingSet->ldA);
      proc_control_BFGSUpdate(proc_control_B.nVar_tmp_tmp, Hessian,
        TrialState->delta_x.data, TrialState->delta_gradLag.data,
        memspace->workspace_double.data);
      TrialState->sqpIterations++;
    }
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_fmincon(const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *fun_workspace_runtimedata, real_T fun_workspace_userdata_Ts, const real_T
  fun_workspace_userdata_CurrentS[13], const real_T
  fun_workspace_userdata_LastMV[8], const real_T
  fun_workspace_userdata_Referenc[130], const real_T
  fun_workspace_userdata_MVTarget[80], real_T fun_workspace_userdata_Predicti,
  real_T fun_workspace_userdata_NumOfSta, real_T fun_workspace_userdata_NumOfOut,
  real_T fun_workspace_userdata_NumOfInp, const real_T
  fun_workspace_userdata_MVIndex[8], const real_T x0[139], const real_T
  Aineq_data[], const real_T bineq_data[], const int32_T *bineq_size, const
  real_T lb[139], const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *nonlcon_workspace_runtimedata, const s6FZHgorTEIlMmVIrDGGTjF_proc__T
  *nonlcon_workspace_userdata, real_T x[139], real_T *fval, real_T *exitflag,
  real_T *output_iterations, real_T *output_funcCount, char_T output_algorithm[3],
  real_T *output_constrviolation, real_T *output_stepsize, real_T
  *output_lssteplength, real_T *output_firstorderopt)
{
  proc_co_eML_blk_kernel_anonFcn2(nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, x0, proc_control_B.Cineq_data,
    proc_control_B.Cineq_size, proc_control_B.Ceq,
    proc_control_B.JacCineqTrans_data, proc_control_B.JacCineqTrans_size,
    proc_control_B.JacCeqTrans);
  proc_control_B.mNonlinIneq = proc_control_B.Cineq_size[0] *
    proc_control_B.Cineq_size[1];
  proc_control_B.mIneq = *bineq_size + proc_control_B.mNonlinIneq;
  proc_control_B.mConstrMax = (proc_control_B.mIneq + proc_control_B.mIneq) +
    669;
  if (proc_control_B.mIneq + 400 >= proc_control_B.mConstrMax) {
    proc_control_B.maxDims = proc_control_B.mIneq + 400;
  } else {
    proc_control_B.maxDims = proc_control_B.mConstrMax;
  }

  proc_control_factoryConstruct(proc_control_B.mIneq + 400,
    proc_control_B.mConstrMax, proc_control_B.mIneq, proc_control_B.mNonlinIneq,
    &proc_control_B.TrialState);
  std::memcpy(&proc_control_B.TrialState.xstarsqp[0], &x0[0], 139U * sizeof
              (real_T));
  proc_control_B.FcnEvaluator.objfun.workspace.runtimedata =
    *fun_workspace_runtimedata;
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.Ts =
    fun_workspace_userdata_Ts;
  std::memcpy
    (&proc_control_B.FcnEvaluator.objfun.workspace.userdata.CurrentStates[0],
     &fun_workspace_userdata_CurrentS[0], 13U * sizeof(real_T));
  std::memcpy(&proc_control_B.FcnEvaluator.objfun.workspace.userdata.LastMV[0],
              &fun_workspace_userdata_LastMV[0], sizeof(real_T) << 3U);
  std::memcpy(&proc_control_B.FcnEvaluator.objfun.workspace.userdata.References
              [0], &fun_workspace_userdata_Referenc[0], 130U * sizeof(real_T));
  std::memcpy(&proc_control_B.FcnEvaluator.objfun.workspace.userdata.MVTarget[0],
              &fun_workspace_userdata_MVTarget[0], 80U * sizeof(real_T));
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.PredictionHorizon =
    fun_workspace_userdata_Predicti;
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.NumOfStates =
    fun_workspace_userdata_NumOfSta;
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.NumOfOutputs =
    fun_workspace_userdata_NumOfOut;
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.NumOfInputs =
    fun_workspace_userdata_NumOfInp;
  std::memcpy(&proc_control_B.FcnEvaluator.objfun.workspace.userdata.MVIndex[0],
              &fun_workspace_userdata_MVIndex[0], sizeof(real_T) << 3U);
  proc_control_B.FcnEvaluator.nonlcon.workspace.runtimedata =
    *nonlcon_workspace_runtimedata;
  proc_control_B.FcnEvaluator.nonlcon.workspace.userdata =
    *nonlcon_workspace_userdata;
  proc_control_B.FcnEvaluator.mCineq = proc_control_B.mNonlinIneq;
  proc_control_B.FcnEvaluator.nVar = 139;
  proc_control_B.FcnEvaluator.mCeq = 130;
  proc_control_B.FcnEvaluator.NonFiniteSupport = true;
  proc_control_B.FcnEvaluator.SpecifyObjectiveGradient = true;
  proc_control_B.FcnEvaluator.SpecifyConstraintGradient = true;
  proc_control_B.FcnEvaluator.ScaleProblem = false;
  proc_cont_factoryConstruct_lnz4(proc_control_B.mIneq + 400,
    &proc_control_B.s.grad.size, &proc_control_B.s.Hx.size,
    &proc_control_B.QPObjective_hasLinear, &proc_control_B.QPObjective_nvar,
    &proc_control_B.i_ii, &proc_control_B.QPObjective_beta,
    &proc_control_B.scale_f, &proc_control_B.QPObjective_objtype,
    &proc_control_B.QPObjective_prev_objtype,
    &proc_control_B.QPObjective_prev_nvar,
    &proc_control_B.QPObjective_prev_hasLinear, &proc_control_B.absxk_d);
  proc_control_B.p_m.workspace_double.size[0] = proc_control_B.maxDims;
  proc_control_B.p_m.workspace_double.size[1] = proc_control_B.mIneq + 400;
  proc_control_B.p_m.workspace_int.size = proc_control_B.maxDims;
  proc_control_B.p_m.workspace_sort.size = proc_control_B.maxDims;
  proc_con_factoryConstruct_lnz42(proc_control_B.mIneq, proc_control_B.mIneq +
    400, proc_control_B.mConstrMax, &proc_control_B.WorkingSet);
  proc_control_B.QPObjective_nvar = 0;
  for (proc_control_B.QPObjective_objtype = 0;
       proc_control_B.QPObjective_objtype < 139;
       proc_control_B.QPObjective_objtype++) {
    proc_control_B.t_l = lb[proc_control_B.QPObjective_objtype];
    if ((!std::isinf(proc_control_B.t_l)) && (!std::isnan(proc_control_B.t_l)))
    {
      proc_control_B.QPObjective_nvar++;
      proc_control_B.WorkingSet.indexLB.data[proc_control_B.QPObjective_nvar - 1]
        = proc_control_B.QPObjective_objtype + 1;
    }
  }

  proc_control_loadProblem(&proc_control_B.WorkingSet, proc_control_B.mIneq,
    *bineq_size, Aineq_data, proc_control_B.QPObjective_nvar, 0, 0,
    proc_control_B.mConstrMax);
  proc_control_B.mConstrMax = 0;
  while (proc_control_B.mConstrMax <= proc_control_B.QPObjective_nvar - 1) {
    proc_control_B.TrialState.xstarsqp[proc_control_B.WorkingSet.indexLB.data[proc_control_B.mConstrMax]
      - 1] = std::fmax
      (proc_control_B.TrialState.xstarsqp[proc_control_B.WorkingSet.indexLB.data[
       proc_control_B.mConstrMax] - 1],
       lb[proc_control_B.WorkingSet.indexLB.data[proc_control_B.mConstrMax] - 1]);
    proc_control_B.mConstrMax++;
  }

  evalObjAndConstrAndDerivatives(fun_workspace_runtimedata->x,
    fun_workspace_runtimedata->lastMV, fun_workspace_runtimedata->ref,
    fun_workspace_runtimedata->OutputWeights,
    fun_workspace_runtimedata->MVWeights,
    fun_workspace_runtimedata->MVRateWeights,
    fun_workspace_runtimedata->MVScaledTarget, nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, proc_control_B.mNonlinIneq,
    proc_control_B.TrialState.xstarsqp, proc_control_B.TrialState.grad.data,
    proc_control_B.TrialState.cIneq.data, proc_control_B.TrialState.iNonIneq0,
    proc_control_B.TrialState.cEq, proc_control_B.WorkingSet.Aineq.data,
    proc_control_B.TrialState.iNonIneq0, proc_control_B.WorkingSet.ldA,
    proc_control_B.WorkingSet.Aeq.data, proc_control_B.WorkingSet.ldA,
    &proc_control_B.TrialState.sqpFval, &proc_control_B.mConstrMax);
  proc_control_B.TrialState.FunctionEvaluations = 1;
  proc_control_B.mConstrMax = proc_control_B.WorkingSet.ldA;
  if (*bineq_size > 0) {
    proc_control_B.y_size_idx_0 = proc_control_B.TrialState.cIneq.size;
    proc_control_B.loop_ub_a = proc_control_B.TrialState.cIneq.size;
    if (proc_control_B.loop_ub_a - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data_n[0],
                  &proc_control_B.TrialState.cIneq.data[0],
                  proc_control_B.loop_ub_a * sizeof(real_T));
    }

    proc_control_B.QPObjective_objtype = 0;
    while (proc_control_B.QPObjective_objtype <= *bineq_size - 1) {
      proc_control_B.y_data_n[proc_control_B.QPObjective_objtype] =
        bineq_data[proc_control_B.QPObjective_objtype];
      proc_control_B.QPObjective_objtype++;
    }

    if (proc_control_B.y_size_idx_0 - 1 >= 0) {
      std::memcpy(&proc_control_B.TrialState.cIneq.data[0],
                  &proc_control_B.y_data_n[0], proc_control_B.y_size_idx_0 *
                  sizeof(real_T));
    }

    proc_control_B.QPObjective_objtype = 0;
    while (proc_control_B.QPObjective_objtype <= *bineq_size - 1) {
      proc_control_B.TrialState.cIneq.data[proc_control_B.QPObjective_objtype] =
        -proc_control_B.TrialState.cIneq.data[proc_control_B.QPObjective_objtype];
      proc_control_B.QPObjective_objtype++;
    }

    proc_control_B.QPObjective_objtype = 0;
    proc_control_B.loop_ub_a = (*bineq_size - 1) * proc_control_B.WorkingSet.ldA
      + 1;
    proc_control_B.y_size_idx_0 = 1;
    while (((proc_control_B.mConstrMax > 0) && (proc_control_B.y_size_idx_0 <=
             proc_control_B.loop_ub_a)) || ((proc_control_B.mConstrMax < 0) &&
            (proc_control_B.y_size_idx_0 >= proc_control_B.loop_ub_a))) {
      proc_control_B.ix_j = 0;
      proc_control_B.t_l = 0.0;
      proc_control_B.ia = proc_control_B.y_size_idx_0;
      while (proc_control_B.ia <= proc_control_B.y_size_idx_0 + 138) {
        proc_control_B.t_l +=
          proc_control_B.WorkingSet.Aineq.data[proc_control_B.ia - 1] *
          proc_control_B.TrialState.xstarsqp[proc_control_B.ix_j];
        proc_control_B.ix_j++;
        proc_control_B.ia++;
      }

      proc_control_B.TrialState.cIneq.data[proc_control_B.QPObjective_objtype] +=
        proc_control_B.t_l;
      proc_control_B.QPObjective_objtype++;
      proc_control_B.y_size_idx_0 += proc_control_B.mConstrMax;
    }
  }

  proc_c_updateWorkingSetForNewQP(x0, &proc_control_B.WorkingSet,
    proc_control_B.mIneq, proc_control_B.TrialState.cIneq.data,
    proc_control_B.TrialState.cEq, proc_control_B.QPObjective_nvar, lb, 0, 0);
  proc_control_initActiveSet(&proc_control_B.WorkingSet);
  proc_control_B.MeritFunction.initFval = proc_control_B.TrialState.sqpFval;
  proc_control_B.MeritFunction.penaltyParam = 1.0;
  proc_control_B.MeritFunction.threshold = 0.0001;
  proc_control_B.MeritFunction.nPenaltyDecreases = 0;
  proc_control_B.MeritFunction.linearizedConstrViol = 0.0;
  proc_control_B.t_l = 0.0;
  for (proc_control_B.QPObjective_nvar = 0; proc_control_B.QPObjective_nvar <
       130; proc_control_B.QPObjective_nvar++) {
    proc_control_B.t_l += std::abs
      (proc_control_B.TrialState.cEq[proc_control_B.QPObjective_nvar]);
  }

  proc_control_B.MeritFunction.initConstrViolationEq = proc_control_B.t_l;
  proc_control_B.t_l = 0.0;
  proc_control_B.QPObjective_nvar = 0;
  while (proc_control_B.QPObjective_nvar <= proc_control_B.mIneq - 1) {
    if (proc_control_B.TrialState.cIneq.data[proc_control_B.QPObjective_nvar] >
        0.0) {
      proc_control_B.t_l +=
        proc_control_B.TrialState.cIneq.data[proc_control_B.QPObjective_nvar];
    }

    proc_control_B.QPObjective_nvar++;
  }

  proc_control_B.MeritFunction.initConstrViolationIneq = proc_control_B.t_l;
  proc_control_B.MeritFunction.phi = 0.0;
  proc_control_B.MeritFunction.phiPrimePlus = 0.0;
  proc_control_B.MeritFunction.phiFullStep = 0.0;
  proc_control_B.MeritFunction.feasRelativeFactor = 0.0;
  proc_control_B.MeritFunction.nlpPrimalFeasError = 0.0;
  proc_control_B.MeritFunction.nlpDualFeasError = 0.0;
  proc_control_B.MeritFunction.nlpComplError = 0.0;
  proc_control_B.MeritFunction.firstOrderOpt = 0.0;
  proc_control_B.MeritFunction.hasObjective = true;
  proc_control_factoryConstruct_l(fun_workspace_runtimedata,
    fun_workspace_userdata_Ts, fun_workspace_userdata_CurrentS,
    fun_workspace_userdata_LastMV, fun_workspace_userdata_Referenc,
    fun_workspace_userdata_MVTarget, fun_workspace_userdata_Predicti,
    fun_workspace_userdata_NumOfSta, fun_workspace_userdata_NumOfOut,
    fun_workspace_userdata_NumOfInp, fun_workspace_userdata_MVIndex,
    nonlcon_workspace_runtimedata, nonlcon_workspace_userdata,
    proc_control_B.mNonlinIneq, lb, &proc_control_B.o);
  proc_contro_factoryConstruct_ln(proc_control_B.maxDims, proc_control_B.maxDims,
    &proc_control_B.q.ldq, proc_control_B.q.QR.size, proc_control_B.q.Q.data,
    proc_control_B.q.Q.size, proc_control_B.q.jpvt.data,
    &proc_control_B.q.jpvt.size, &proc_control_B.q.mrows,
    &proc_control_B.q.ncols, &proc_control_B.q.tau.size,
    &proc_control_B.q.minRowCol, &proc_control_B.q.usedPivoting);
  proc_contr_factoryConstruct_lnz(proc_control_B.maxDims,
    proc_control_B.r.FMat.size, &proc_control_B.r.ldm, &proc_control_B.r.ndims,
    &proc_control_B.r.info, &proc_control_B.r.scaleFactor,
    &proc_control_B.r.ConvexCheck, &proc_control_B.r.regTol_,
    &proc_control_B.r.workspace_, &proc_control_B.r.workspace2_);
  proc_control_B.s.hasLinear = true;
  proc_control_B.s.nvar = 139;
  proc_control_B.s.maxVar = proc_control_B.i_ii;
  proc_control_B.s.beta = proc_control_B.QPObjective_beta;
  proc_control_B.s.rho = proc_control_B.scale_f;
  proc_control_B.s.objtype = 3;
  proc_control_B.s.prev_objtype = proc_control_B.QPObjective_prev_objtype;
  proc_control_B.s.prev_nvar = proc_control_B.QPObjective_prev_nvar;
  proc_control_B.s.prev_hasLinear = proc_control_B.QPObjective_prev_hasLinear;
  proc_control_B.s.gammaScalar = proc_control_B.absxk_d;
  proc_control_B.tmp_size_h = *bineq_size;
  proc_control_B.tmp_size_d = proc_control_B.mNonlinIneq;
  proc_control_driver(bineq_data, lb, &proc_control_B.TrialState,
                      &proc_control_B.MeritFunction,
                      &proc_control_B.FcnEvaluator, &proc_control_B.p_m,
                      &proc_control_B.WorkingSet, &proc_control_B.q,
                      &proc_control_B.r, &proc_control_B.s,
                      &proc_control_B.tmp_size_h, &proc_control_B.tmp_size_d,
                      proc_control_B.unusedExpr);
  *fval = proc_control_B.TrialState.sqpFval;
  *exitflag = proc_control_B.TrialState.sqpExitFlag;
  *output_iterations = proc_control_B.TrialState.sqpIterations;
  *output_funcCount = proc_control_B.TrialState.FunctionEvaluations;
  output_algorithm[0] = 's';
  output_algorithm[1] = 'q';
  output_algorithm[2] = 'p';
  *output_constrviolation = proc_control_B.MeritFunction.nlpPrimalFeasError;
  proc_control_B.QPObjective_beta = 0.0;
  proc_control_B.scale_f = 3.3121686421112381E-170;
  for (proc_control_B.mNonlinIneq = 0; proc_control_B.mNonlinIneq < 139;
       proc_control_B.mNonlinIneq++) {
    x[proc_control_B.mNonlinIneq] =
      proc_control_B.TrialState.xstarsqp[proc_control_B.mNonlinIneq];
    proc_control_B.absxk_d = std::abs
      (proc_control_B.TrialState.delta_x.data[proc_control_B.mNonlinIneq]);
    if (proc_control_B.absxk_d > proc_control_B.scale_f) {
      proc_control_B.t_l = proc_control_B.scale_f / proc_control_B.absxk_d;
      proc_control_B.QPObjective_beta = proc_control_B.QPObjective_beta *
        proc_control_B.t_l * proc_control_B.t_l + 1.0;
      proc_control_B.scale_f = proc_control_B.absxk_d;
    } else {
      proc_control_B.t_l = proc_control_B.absxk_d / proc_control_B.scale_f;
      proc_control_B.QPObjective_beta += proc_control_B.t_l * proc_control_B.t_l;
    }
  }

  *output_stepsize = proc_control_B.scale_f * std::sqrt
    (proc_control_B.QPObjective_beta);
  *output_lssteplength = proc_control_B.TrialState.steplength;
  *output_firstorderopt = proc_control_B.MeritFunction.firstOrderOpt;
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_isfinite_NLoqvmdK(const real_T x[8], boolean_T
  b[8])
{
  for (proc_control_B.i24 = 0; proc_control_B.i24 < 8; proc_control_B.i24++) {
    proc_control_B.x_l = x[proc_control_B.i24];
    b[proc_control_B.i24] = ((!std::isinf(proc_control_B.x_l)) && (!std::isnan
      (proc_control_B.x_l)));
  }
}

// Function for MATLAB Function: '<S196>/NLMPC'
void proc_control::proc_control_znlmpc_getUBounds(const real_T
  runtimedata_lastMV[8], const real_T runtimedata_MVMin[80], const real_T
  runtimedata_MVMax[80], const real_T runtimedata_MVRateMin[80], const real_T
  runtimedata_MVRateMax[80], real_T A_data[], int32_T A_size[2], real_T Bu_data[],
  int32_T *Bu_size)
{
  boolean_T exitg1;
  std::memset(&proc_control_B.Au[0], 0, 25600U * sizeof(real_T));
  std::memset(&proc_control_B.b_Bu[0], 0, 320U * sizeof(real_T));
  std::memset(&proc_control_B.x[0], 0, 320U * sizeof(boolean_T));
  for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc++)
  {
    proc_control_B.ic_n[proc_control_B.i_hc] = static_cast<real_T>
      (proc_control_B.i_hc) + 1.0;
  }

  std::memset(&proc_control_B.As[0], 0, sizeof(int8_T) << 6U);
  proc_control_B.i_hc = 0;
  for (proc_control_B.idx_b = 0; proc_control_B.idx_b < 8; proc_control_B.idx_b
       ++) {
    proc_control_B.As[proc_control_B.i_hc] = 1;
    proc_control_B.i_hc += 9;
  }

  for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 64; proc_control_B.i_hc++)
  {
    proc_control_B.idx_b = proc_control_B.As[proc_control_B.i_hc];
    proc_control_B.Au_tmp_l[proc_control_B.i_hc] = static_cast<int8_T>
      (-proc_control_B.idx_b);
    proc_control_B.Au_tmp[proc_control_B.i_hc] = static_cast<int8_T>
      (proc_control_B.idx_b);
  }

  for (proc_control_B.idx_b = 0; proc_control_B.idx_b < 10; proc_control_B.idx_b
       ++) {
    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc++)
    {
      proc_control_B.runtimedata_MVRateMin[proc_control_B.i_hc] =
        runtimedata_MVRateMin[10 * proc_control_B.i_hc + proc_control_B.idx_b];
    }

    proc_control_isfinite_NLoqvmdK(proc_control_B.runtimedata_MVRateMin,
      proc_control_B.bv3);
    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc++)
    {
      proc_control_B.x[static_cast<int32_T>
        (proc_control_B.ic_n[proc_control_B.i_hc]) - 1] =
        proc_control_B.bv3[proc_control_B.i_hc];
      proc_control_B.runtimedata_MVRateMin[proc_control_B.i_hc] =
        runtimedata_MVRateMax[10 * proc_control_B.i_hc + proc_control_B.idx_b];
    }

    proc_control_isfinite_NLoqvmdK(proc_control_B.runtimedata_MVRateMin,
      proc_control_B.bv3);
    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc++)
    {
      proc_control_B.x[static_cast<int32_T>
        (proc_control_B.ic_n[proc_control_B.i_hc] + 8.0) - 1] =
        proc_control_B.bv3[proc_control_B.i_hc];
      proc_control_B.runtimedata_MVRateMin[proc_control_B.i_hc] =
        runtimedata_MVMin[10 * proc_control_B.i_hc + proc_control_B.idx_b];
    }

    proc_control_isfinite_NLoqvmdK(proc_control_B.runtimedata_MVRateMin,
      proc_control_B.bv3);
    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc++)
    {
      proc_control_B.x[static_cast<int32_T>
        (proc_control_B.ic_n[proc_control_B.i_hc] + 16.0) - 1] =
        proc_control_B.bv3[proc_control_B.i_hc];
      proc_control_B.runtimedata_MVRateMin[proc_control_B.i_hc] =
        runtimedata_MVMax[10 * proc_control_B.i_hc + proc_control_B.idx_b];
    }

    proc_control_isfinite_NLoqvmdK(proc_control_B.runtimedata_MVRateMin,
      proc_control_B.bv3);
    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc++)
    {
      proc_control_B.x[static_cast<int32_T>
        (proc_control_B.ic_n[proc_control_B.i_hc] + 24.0) - 1] =
        proc_control_B.bv3[proc_control_B.i_hc];
      for (proc_control_B.k_m = 0; proc_control_B.k_m < 8; proc_control_B.k_m++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_n[proc_control_B.k_m]) + 320 *
                            proc_control_B.i_hc) + 2560 * proc_control_B.idx_b)
          - 1] = proc_control_B.Au_tmp_l[(proc_control_B.i_hc << 3) +
          proc_control_B.k_m];
      }
    }

    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc++)
    {
      for (proc_control_B.k_m = 0; proc_control_B.k_m < 8; proc_control_B.k_m++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_n[proc_control_B.k_m] + 8.0) +
                            320 * proc_control_B.i_hc) + 2560 *
                           proc_control_B.idx_b) - 1] = proc_control_B.Au_tmp
          [(proc_control_B.i_hc << 3) + proc_control_B.k_m];
      }
    }

    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc++)
    {
      for (proc_control_B.k_m = 0; proc_control_B.k_m < 8; proc_control_B.k_m++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_n[proc_control_B.k_m] + 16.0) +
                            320 * proc_control_B.i_hc) + 2560 *
                           proc_control_B.idx_b) - 1] = proc_control_B.Au_tmp_l
          [(proc_control_B.i_hc << 3) + proc_control_B.k_m];
      }
    }

    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc++)
    {
      for (proc_control_B.k_m = 0; proc_control_B.k_m < 8; proc_control_B.k_m++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_n[proc_control_B.k_m] + 24.0) +
                            320 * proc_control_B.i_hc) + 2560 *
                           proc_control_B.idx_b) - 1] = proc_control_B.Au_tmp
          [(proc_control_B.i_hc << 3) + proc_control_B.k_m];
      }

      proc_control_B.b_Bu[static_cast<int32_T>
        (proc_control_B.ic_n[proc_control_B.i_hc]) - 1] =
        -runtimedata_MVRateMin[10 * proc_control_B.i_hc + proc_control_B.idx_b];
    }

    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc++)
    {
      proc_control_B.b_Bu[static_cast<int32_T>
        (proc_control_B.ic_n[proc_control_B.i_hc] + 8.0) - 1] =
        runtimedata_MVRateMax[10 * proc_control_B.i_hc + proc_control_B.idx_b];
    }

    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc++)
    {
      proc_control_B.b_Bu[static_cast<int32_T>
        (proc_control_B.ic_n[proc_control_B.i_hc] + 16.0) - 1] =
        -runtimedata_MVMin[10 * proc_control_B.i_hc + proc_control_B.idx_b];
    }

    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc++)
    {
      proc_control_B.b_Bu[static_cast<int32_T>
        (proc_control_B.ic_n[proc_control_B.i_hc] + 24.0) - 1] =
        runtimedata_MVMax[10 * proc_control_B.i_hc + proc_control_B.idx_b];
    }

    if (proc_control_B.idx_b + 1 == 1) {
      for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc
           ++) {
        proc_control_B.c_e = runtimedata_lastMV[proc_control_B.i_hc];
        proc_control_B.runtimedata_MVRateMin[proc_control_B.i_hc] =
          proc_control_B.b_Bu[static_cast<int32_T>
          (proc_control_B.ic_n[proc_control_B.i_hc]) - 1] - proc_control_B.c_e;
        proc_control_B.c_i[proc_control_B.i_hc] = proc_control_B.c_e;
      }

      for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc
           ++) {
        proc_control_B.b_Bu[static_cast<int32_T>
          (proc_control_B.ic_n[proc_control_B.i_hc]) - 1] =
          proc_control_B.runtimedata_MVRateMin[proc_control_B.i_hc];
      }

      for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc
           ++) {
        proc_control_B.runtimedata_MVRateMin[proc_control_B.i_hc] =
          proc_control_B.b_Bu[static_cast<int32_T>
          (proc_control_B.ic_n[proc_control_B.i_hc] + 8.0) - 1] +
          proc_control_B.c_i[proc_control_B.i_hc];
      }

      for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc
           ++) {
        proc_control_B.b_Bu[static_cast<int32_T>
          (proc_control_B.ic_n[proc_control_B.i_hc] + 8.0) - 1] =
          proc_control_B.runtimedata_MVRateMin[proc_control_B.i_hc];
      }
    } else {
      for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc
           ++) {
        for (proc_control_B.k_m = 0; proc_control_B.k_m < 8; proc_control_B.k_m
             ++) {
          proc_control_B.Au[((static_cast<int32_T>
                              (proc_control_B.ic_n[proc_control_B.k_m]) + 320 *
                              proc_control_B.i_hc) + 2560 *
                             (proc_control_B.idx_b - 1)) - 1] =
            proc_control_B.Au_tmp[(proc_control_B.i_hc << 3) +
            proc_control_B.k_m];
        }
      }

      for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc
           ++) {
        for (proc_control_B.k_m = 0; proc_control_B.k_m < 8; proc_control_B.k_m
             ++) {
          proc_control_B.Au[((static_cast<int32_T>
                              (proc_control_B.ic_n[proc_control_B.k_m] + 8.0) +
                              320 * proc_control_B.i_hc) + 2560 *
                             (proc_control_B.idx_b - 1)) - 1] =
            proc_control_B.Au_tmp_l[(proc_control_B.i_hc << 3) +
            proc_control_B.k_m];
        }
      }
    }

    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc++)
    {
      proc_control_B.ic_n[proc_control_B.i_hc] += 32.0;
    }
  }

  proc_control_B.idx_b = 0;
  proc_control_B.i_hc = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.i_hc < 320)) {
    if (proc_control_B.x[proc_control_B.i_hc]) {
      proc_control_B.idx_b++;
      proc_control_B.ii_data[proc_control_B.idx_b - 1] = static_cast<int16_T>
        (proc_control_B.i_hc + 1);
      if (proc_control_B.idx_b >= 320) {
        exitg1 = true;
      } else {
        proc_control_B.i_hc++;
      }
    } else {
      proc_control_B.i_hc++;
    }
  }

  if (proc_control_B.idx_b < 1) {
    proc_control_B.idx_b = 0;
  }

  if (proc_control_B.idx_b > 0) {
    *Bu_size = proc_control_B.idx_b;
    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < proc_control_B.idx_b;
         proc_control_B.i_hc++) {
      Bu_data[proc_control_B.i_hc] =
        proc_control_B.b_Bu[proc_control_B.ii_data[proc_control_B.i_hc] - 1];
    }

    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < 8; proc_control_B.i_hc++)
    {
      for (proc_control_B.k_m = 0; proc_control_B.k_m < 10; proc_control_B.k_m++)
      {
        proc_control_B.b_i_k = 0;
        while (proc_control_B.b_i_k <= proc_control_B.idx_b - 1) {
          proc_control_B.Auf_data[(proc_control_B.b_i_k + proc_control_B.idx_b *
            proc_control_B.i_hc) + (proc_control_B.idx_b << 3) *
            proc_control_B.k_m] = proc_control_B.Au[((320 * proc_control_B.i_hc
            + proc_control_B.ii_data[proc_control_B.b_i_k]) + 2560 *
            proc_control_B.k_m) - 1];
          proc_control_B.b_i_k++;
        }
      }
    }

    proc_control_B.idx[0] = proc_control_B.idx_b;
    proc_control_B.idx[1] = 80;
    proc_control_mtimes_f(proc_control_B.Auf_data, proc_control_B.idx,
                          proc_control_B.tmp_data_dh, proc_control_B.tmp_size_l);
    A_size[0] = proc_control_B.idx_b;
    A_size[1] = 139;
    proc_control_B.k_m = proc_control_B.idx_b * 130;
    std::memset(&A_data[0], 0, proc_control_B.k_m * sizeof(real_T));
    proc_control_B.k_m = proc_control_B.idx_b << 3;
    for (proc_control_B.i_hc = 0; proc_control_B.i_hc < proc_control_B.k_m;
         proc_control_B.i_hc++) {
      A_data[proc_control_B.i_hc + proc_control_B.idx_b * 130] =
        proc_control_B.tmp_data_dh[proc_control_B.i_hc];
    }

    std::memset(&A_data[proc_control_B.idx_b * 130 + proc_control_B.k_m], 0,
                ((((proc_control_B.idx_b + proc_control_B.idx_b * 130) +
                   proc_control_B.k_m) - proc_control_B.idx_b * 130) -
                 proc_control_B.k_m) * sizeof(real_T));
  } else {
    *Bu_size = 0;
    A_size[0] = 0;
    A_size[1] = 211;
  }
}

// Function for MATLAB Function: '<S192>/FixedHorizonOptimizer'
void proc_control::mpc_constraintcoefLTV_j7mSZmy_g(const real_T b_A[4851], const
  real_T Bu[1848], const real_T Bv[231], const real_T b_C[3003], const real_T
  Dv[143], const real_T b_Jm[640], real_T b_SuJm[1040], real_T b_Sx[2730],
  real_T b_Su1[1040], real_T b_Hv[1430])
{
  std::memset(&proc_control_B.b_C_g[0], 0, 13U * sizeof(real_T));
  proc_control_B.i22 = 0;
  for (proc_control_B.i_o = 0; proc_control_B.i_o < 21; proc_control_B.i_o++) {
    for (proc_control_B.i21 = 0; proc_control_B.i21 < 13; proc_control_B.i21++)
    {
      proc_control_B.b_C_g[proc_control_B.i21] += b_C[(proc_control_B.i21 +
        proc_control_B.i22) + 273] * Bv[proc_control_B.i_o];
    }

    proc_control_B.i22 += 13;
  }

  for (proc_control_B.i21 = 0; proc_control_B.i21 < 13; proc_control_B.i21++) {
    b_Hv[proc_control_B.i21] = proc_control_B.b_C_g[proc_control_B.i21];
    b_Hv[proc_control_B.i21 + 130] = Dv[proc_control_B.i21 + 13];
  }

  proc_control_B.i21 = 0;
  for (proc_control_B.i22 = 0; proc_control_B.i22 < 9; proc_control_B.i22++) {
    std::memset(&b_Hv[proc_control_B.i21 + 260], 0, 13U * sizeof(real_T));
    proc_control_B.i21 += 130;
  }

  proc_control_B.i21 = 0;
  for (proc_control_B.i22 = 0; proc_control_B.i22 < 11; proc_control_B.i22++) {
    std::memset(&b_Hv[proc_control_B.i21 + 13], 0, 117U * sizeof(real_T));
    proc_control_B.i21 += 130;
  }

  for (proc_control_B.i21 = 0; proc_control_B.i21 < 21; proc_control_B.i21++) {
    std::memset(&proc_control_B.b_C_l[proc_control_B.i21 * 13], 0, 13U * sizeof
                (real_T));
    for (proc_control_B.i_o = 0; proc_control_B.i_o < 21; proc_control_B.i_o++)
    {
      for (proc_control_B.i22 = 0; proc_control_B.i22 < 13; proc_control_B.i22++)
      {
        proc_control_B.b_C_tmp = 13 * proc_control_B.i21 + proc_control_B.i22;
        proc_control_B.b_C_l[proc_control_B.b_C_tmp] += b_C[(13 *
          proc_control_B.i_o + proc_control_B.i22) + 273] * b_A[21 *
          proc_control_B.i21 + proc_control_B.i_o];
      }
    }

    std::memcpy(&b_Sx[proc_control_B.i21 * 130],
                &proc_control_B.b_C_l[proc_control_B.i21 * 13], 13U * sizeof
                (real_T));
    std::memset(&b_Sx[proc_control_B.i21 * 130 + 13], 0, 117U * sizeof(real_T));
  }

  for (proc_control_B.i21 = 0; proc_control_B.i21 < 8; proc_control_B.i21++) {
    std::memset(&proc_control_B.b_C_n[proc_control_B.i21 * 13], 0, 13U * sizeof
                (real_T));
    for (proc_control_B.i_o = 0; proc_control_B.i_o < 21; proc_control_B.i_o++)
    {
      for (proc_control_B.i22 = 0; proc_control_B.i22 < 13; proc_control_B.i22++)
      {
        proc_control_B.b_C_tmp = 13 * proc_control_B.i21 + proc_control_B.i22;
        proc_control_B.b_C_n[proc_control_B.b_C_tmp] += b_C[(13 *
          proc_control_B.i_o + proc_control_B.i22) + 273] * Bu[21 *
          proc_control_B.i21 + proc_control_B.i_o];
      }
    }

    std::memcpy(&b_Su1[proc_control_B.i21 * 130],
                &proc_control_B.b_C_n[proc_control_B.i21 * 13], 13U * sizeof
                (real_T));
    std::memset(&b_Su1[proc_control_B.i21 * 130 + 13], 0, 117U * sizeof(real_T));
    std::memcpy(&proc_control_B.a[proc_control_B.i21 * 130],
                &b_Su1[proc_control_B.i21 * 130], 13U * sizeof(real_T));
  }

  proc_control_B.i21 = 0;
  for (proc_control_B.i22 = 0; proc_control_B.i22 < 72; proc_control_B.i22++) {
    std::memset(&proc_control_B.a[proc_control_B.i21 + 1040], 0, 13U * sizeof
                (real_T));
    proc_control_B.i21 += 130;
  }

  proc_control_B.i21 = 0;
  for (proc_control_B.i22 = 0; proc_control_B.i22 < 80; proc_control_B.i22++) {
    std::memset(&proc_control_B.a[proc_control_B.i21 + 13], 0, 117U * sizeof
                (real_T));
    proc_control_B.i21 += 130;
  }

  proc_control_B.i21 = 0;
  for (proc_control_B.i22 = 0; proc_control_B.i22 < 21; proc_control_B.i22++) {
    std::memcpy(&proc_control_B.AA[proc_control_B.i21], &b_A[proc_control_B.i21
                + 441], 21U * sizeof(real_T));
    proc_control_B.i21 += 21;
  }

  proc_control_B.i21 = 0;
  for (proc_control_B.i22 = 0; proc_control_B.i22 < 168; proc_control_B.i22++) {
    std::memset(&proc_control_B.AA[proc_control_B.i21 + 441], 0, 21U * sizeof
                (real_T));
    proc_control_B.i21 += 21;
  }

  for (proc_control_B.i_il = 0; proc_control_B.i_il < 9; proc_control_B.i_il++)
  {
    proc_control_B.i_pz = static_cast<uint8_T>((proc_control_B.i_il + 1) * 13U +
      1U);
    for (proc_control_B.i21 = 0; proc_control_B.i21 < 13; proc_control_B.i21++)
    {
      proc_control_B.rows_h[proc_control_B.i21] = static_cast<uint8_T>(
        static_cast<uint32_T>(proc_control_B.i21) + proc_control_B.i_pz);
    }

    for (proc_control_B.i21 = 0; proc_control_B.i21 < 13; proc_control_B.i21++)
    {
      for (proc_control_B.i22 = 0; proc_control_B.i22 < 8; proc_control_B.i22++)
      {
        proc_control_B.b_Su1_tmp = (130 * proc_control_B.i22 +
          proc_control_B.rows_h[proc_control_B.i21]) - 1;
        b_Su1[proc_control_B.b_Su1_tmp] = 0.0;
        for (proc_control_B.i_o = 0; proc_control_B.i_o < 21; proc_control_B.i_o
             ++) {
          b_Su1[proc_control_B.b_Su1_tmp] += b_C[(13 * proc_control_B.i_o +
            proc_control_B.i21) + (proc_control_B.i_il + 2) * 273] * Bu[(21 *
            proc_control_B.i22 + proc_control_B.i_o) + (proc_control_B.i_il + 1)
            * 168];
        }
      }
    }

    proc_control_B.i_o = (proc_control_B.i_il + 1) << 3;
    for (proc_control_B.i21 = 0; proc_control_B.i21 < 8; proc_control_B.i21++) {
      for (proc_control_B.i22 = 0; proc_control_B.i22 < 13; proc_control_B.i22++)
      {
        proc_control_B.i_pz = proc_control_B.rows_h[proc_control_B.i22];
        proc_control_B.a[(proc_control_B.i_pz + 130 * (proc_control_B.i21 +
          proc_control_B.i_o)) - 1] = b_Su1[(130 * proc_control_B.i21 +
          proc_control_B.i_pz) - 1];
      }
    }

    proc_control_B.b_Su1_tmp = 0;
    while (proc_control_B.b_Su1_tmp <= proc_control_B.i_il) {
      proc_control_B.b_Hv_tmp = proc_control_B.i_il - proc_control_B.b_Su1_tmp;
      proc_control_B.i_o = proc_control_B.b_Hv_tmp * 21;
      for (proc_control_B.i21 = 0; proc_control_B.i21 < 21; proc_control_B.i21++)
      {
        std::memcpy(&proc_control_B.AA_c[proc_control_B.i21 * 21],
                    &proc_control_B.AA[proc_control_B.i21 * 21 +
                    proc_control_B.i_o * 21], 21U * sizeof(real_T));
      }

      for (proc_control_B.i21 = 0; proc_control_B.i21 < 13; proc_control_B.i21++)
      {
        for (proc_control_B.i22 = 0; proc_control_B.i22 < 21; proc_control_B.i22
             ++) {
          proc_control_B.b_C_tmp = 13 * proc_control_B.i22 + proc_control_B.i21;
          proc_control_B.b_C_l[proc_control_B.b_C_tmp] = 0.0;
          for (proc_control_B.i_o = 0; proc_control_B.i_o < 21;
               proc_control_B.i_o++) {
            proc_control_B.b_C_l[proc_control_B.b_C_tmp] += b_C[(13 *
              proc_control_B.i_o + proc_control_B.i21) + (proc_control_B.i_il +
              2) * 273] * proc_control_B.AA_c[21 * proc_control_B.i22 +
              proc_control_B.i_o];
          }
        }

        for (proc_control_B.i22 = 0; proc_control_B.i22 < 8; proc_control_B.i22
             ++) {
          proc_control_B.d36 = 0.0;
          for (proc_control_B.i_o = 0; proc_control_B.i_o < 21;
               proc_control_B.i_o++) {
            proc_control_B.d36 += Bu[(21 * proc_control_B.i22 +
              proc_control_B.i_o) + 168 * proc_control_B.b_Hv_tmp] *
              proc_control_B.b_C_l[13 * proc_control_B.i_o + proc_control_B.i21];
          }

          proc_control_B.b_C_n[proc_control_B.i21 + 13 * proc_control_B.i22] =
            b_Su1[(130 * proc_control_B.i22 +
                   proc_control_B.rows_h[proc_control_B.i21]) - 1] +
            proc_control_B.d36;
        }
      }

      for (proc_control_B.i21 = 0; proc_control_B.i21 < 8; proc_control_B.i21++)
      {
        for (proc_control_B.i22 = 0; proc_control_B.i22 < 13; proc_control_B.i22
             ++) {
          b_Su1[(proc_control_B.rows_h[proc_control_B.i22] + 130 *
                 proc_control_B.i21) - 1] = proc_control_B.b_C_n[13 *
            proc_control_B.i21 + proc_control_B.i22];
        }
      }

      proc_control_B.b_Hv_tmp <<= 3;
      for (proc_control_B.i21 = 0; proc_control_B.i21 < 8; proc_control_B.i21++)
      {
        for (proc_control_B.i22 = 0; proc_control_B.i22 < 13; proc_control_B.i22
             ++) {
          proc_control_B.i_pz = proc_control_B.rows_h[proc_control_B.i22];
          proc_control_B.a[(proc_control_B.i_pz + 130 * (proc_control_B.i21 +
            proc_control_B.b_Hv_tmp)) - 1] = b_Su1[(130 * proc_control_B.i21 +
            proc_control_B.i_pz) - 1];
        }
      }

      proc_control_B.b_Su1_tmp++;
    }

    for (proc_control_B.i21 = 0; proc_control_B.i21 < 13; proc_control_B.i21++)
    {
      b_Hv[(proc_control_B.rows_h[proc_control_B.i21] + 130 *
            (proc_control_B.i_il + 2)) - 1] = Dv[(proc_control_B.i_il + 2) * 13
        + proc_control_B.i21];
    }

    for (proc_control_B.i21 = 0; proc_control_B.i21 < 13; proc_control_B.i21++)
    {
      proc_control_B.b_Hv_tmp = ((proc_control_B.i_il + 1) * 130 +
        proc_control_B.rows_h[proc_control_B.i21]) - 1;
      b_Hv[proc_control_B.b_Hv_tmp] = 0.0;
      for (proc_control_B.i22 = 0; proc_control_B.i22 < 21; proc_control_B.i22++)
      {
        b_Hv[proc_control_B.b_Hv_tmp] += b_C[(13 * proc_control_B.i22 +
          proc_control_B.i21) + (proc_control_B.i_il + 2) * 273] * Bv
          [(proc_control_B.i_il + 1) * 21 + proc_control_B.i22];
      }
    }

    proc_control_B.b_Su1_tmp = 0;
    while (proc_control_B.b_Su1_tmp <= proc_control_B.i_il) {
      proc_control_B.i_o = proc_control_B.b_Su1_tmp * 21;
      for (proc_control_B.i21 = 0; proc_control_B.i21 < 21; proc_control_B.i21++)
      {
        std::memcpy(&proc_control_B.AA_c[proc_control_B.i21 * 21],
                    &proc_control_B.AA[proc_control_B.i21 * 21 +
                    proc_control_B.i_o * 21], 21U * sizeof(real_T));
      }

      for (proc_control_B.i21 = 0; proc_control_B.i21 < 13; proc_control_B.i21++)
      {
        proc_control_B.b_Hv_tmp = (130 * proc_control_B.b_Su1_tmp +
          proc_control_B.rows_h[proc_control_B.i21]) - 1;
        b_Hv[proc_control_B.b_Hv_tmp] = 0.0;
        for (proc_control_B.i22 = 0; proc_control_B.i22 < 21; proc_control_B.i22
             ++) {
          proc_control_B.b_C_tmp = 13 * proc_control_B.i22 + proc_control_B.i21;
          proc_control_B.b_C_l[proc_control_B.b_C_tmp] = 0.0;
          for (proc_control_B.i_o = 0; proc_control_B.i_o < 21;
               proc_control_B.i_o++) {
            proc_control_B.b_C_l[proc_control_B.b_C_tmp] += b_C[(13 *
              proc_control_B.i_o + proc_control_B.i21) + (proc_control_B.i_il +
              2) * 273] * proc_control_B.AA_c[21 * proc_control_B.i22 +
              proc_control_B.i_o];
          }

          b_Hv[proc_control_B.b_Hv_tmp] += Bv[21 * proc_control_B.b_Su1_tmp +
            proc_control_B.i22] * proc_control_B.b_C_l[proc_control_B.b_C_tmp];
        }
      }

      proc_control_B.b_Su1_tmp++;
    }

    for (proc_control_B.i21 = 0; proc_control_B.i21 < 13; proc_control_B.i21++)
    {
      for (proc_control_B.i22 = 0; proc_control_B.i22 < 21; proc_control_B.i22++)
      {
        proc_control_B.b_C_tmp = 13 * proc_control_B.i22 + proc_control_B.i21;
        proc_control_B.b_C_l[proc_control_B.b_C_tmp] = 0.0;
        for (proc_control_B.i_o = 0; proc_control_B.i_o < 21; proc_control_B.i_o
             ++) {
          proc_control_B.b_C_l[proc_control_B.b_C_tmp] += b_C[(13 *
            proc_control_B.i_o + proc_control_B.i21) + (proc_control_B.i_il + 2)
            * 273] * proc_control_B.AA[21 * proc_control_B.i22 +
            proc_control_B.i_o];
        }
      }

      for (proc_control_B.i22 = 0; proc_control_B.i22 < 21; proc_control_B.i22++)
      {
        proc_control_B.b_C_tmp = (130 * proc_control_B.i22 +
          proc_control_B.rows_h[proc_control_B.i21]) - 1;
        b_Sx[proc_control_B.b_C_tmp] = 0.0;
        for (proc_control_B.i_o = 0; proc_control_B.i_o < 21; proc_control_B.i_o
             ++) {
          b_Sx[proc_control_B.b_C_tmp] += proc_control_B.b_C_l[13 *
            proc_control_B.i_o + proc_control_B.i21] * b_A[21 *
            proc_control_B.i22 + proc_control_B.i_o];
        }
      }
    }

    if (proc_control_B.i_il + 2 < 10) {
      proc_control_B.b_Su1_tmp = 0;
      while (proc_control_B.b_Su1_tmp <= proc_control_B.i_il) {
        proc_control_B.b_Hv_tmp = proc_control_B.b_Su1_tmp * 21;
        for (proc_control_B.i21 = 0; proc_control_B.i21 < 21; proc_control_B.i21
             ++) {
          std::memcpy(&proc_control_B.AA_c[proc_control_B.i21 * 21],
                      &proc_control_B.AA[proc_control_B.i21 * 21 +
                      proc_control_B.b_Hv_tmp * 21], 21U * sizeof(real_T));
        }

        for (proc_control_B.i21 = 0; proc_control_B.i21 < 21; proc_control_B.i21
             ++) {
          for (proc_control_B.i22 = 0; proc_control_B.i22 < 21;
               proc_control_B.i22++) {
            proc_control_B.b_C_tmp = (proc_control_B.i22 +
              proc_control_B.b_Hv_tmp) * 21 + proc_control_B.i21;
            proc_control_B.AA[proc_control_B.b_C_tmp] = 0.0;
            for (proc_control_B.i_o = 0; proc_control_B.i_o < 21;
                 proc_control_B.i_o++) {
              proc_control_B.AA[proc_control_B.b_C_tmp] += b_A[(21 *
                proc_control_B.i_o + proc_control_B.i21) + (proc_control_B.i_il
                + 2) * 441] * proc_control_B.AA_c[21 * proc_control_B.i22 +
                proc_control_B.i_o];
            }
          }
        }

        proc_control_B.b_Su1_tmp++;
      }

      proc_control_B.i_o = (proc_control_B.i_il + 1) * 21;
      for (proc_control_B.i21 = 0; proc_control_B.i21 < 21; proc_control_B.i21++)
      {
        std::memcpy(&proc_control_B.AA[proc_control_B.i21 * 21 +
                    proc_control_B.i_o * 21], &b_A[(proc_control_B.i_il * 441 +
          proc_control_B.i21 * 21) + 882], 21U * sizeof(real_T));
      }
    }
  }

  for (proc_control_B.i21 = 0; proc_control_B.i21 < 8; proc_control_B.i21++) {
    std::memset(&b_SuJm[proc_control_B.i21 * 130], 0, 130U * sizeof(real_T));
    for (proc_control_B.i_o = 0; proc_control_B.i_o < 80; proc_control_B.i_o++)
    {
      for (proc_control_B.i22 = 0; proc_control_B.i22 < 130; proc_control_B.i22
           ++) {
        proc_control_B.i_il = 130 * proc_control_B.i21 + proc_control_B.i22;
        b_SuJm[proc_control_B.i_il] += proc_control_B.a[130 * proc_control_B.i_o
          + proc_control_B.i22] * b_Jm[80 * proc_control_B.i21 +
          proc_control_B.i_o];
      }
    }
  }
}

// Function for MATLAB Function: '<S192>/FixedHorizonOptimizer'
void proc_control::proc_control_xgerc_LQbeTO3S(int32_T b_m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[9], real_T b_A[81], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA = ia0 - 1;
    proc_control_B.jy = 0;
    proc_control_B.j_j = 0;
    while (proc_control_B.j_j <= n - 1) {
      if (y[proc_control_B.jy] != 0.0) {
        proc_control_B.temp = y[proc_control_B.jy] * alpha1;
        proc_control_B.ix_l = ix0;
        proc_control_B.ijA = proc_control_B.jA;
        proc_control_B.b_m = b_m + proc_control_B.jA;
        while (proc_control_B.ijA + 1 <= proc_control_B.b_m) {
          b_A[proc_control_B.ijA] += b_A[proc_control_B.ix_l - 1] *
            proc_control_B.temp;
          proc_control_B.ix_l++;
          proc_control_B.ijA++;
        }
      }

      proc_control_B.jy++;
      proc_control_B.jA += 9;
      proc_control_B.j_j++;
    }
  }
}

// Function for MATLAB Function: '<S192>/FixedHorizonOptimizer'
void proc_control::proc_control_qr_MNq6sfUL(const real_T b_A[81], real_T Q[81],
  real_T R[81])
{
  int32_T exitg1;
  boolean_T exitg2;
  std::memcpy(&proc_control_B.c_A[0], &b_A[0], 81U * sizeof(real_T));
  std::memset(&proc_control_B.tau_dk[0], 0, 9U * sizeof(real_T));
  std::memset(&proc_control_B.work_oi[0], 0, 9U * sizeof(real_T));
  for (proc_control_B.itau = 0; proc_control_B.itau < 9; proc_control_B.itau++)
  {
    proc_control_B.i_my = proc_control_B.itau * 9 + proc_control_B.itau;
    if (proc_control_B.itau + 1 < 9) {
      proc_control_B.atmp = proc_control_B.c_A[proc_control_B.i_my];
      proc_control_B.tau_dk[proc_control_B.itau] = 0.0;
      proc_control_B.beta1 = xnrm2_LFVDqtKo(8 - proc_control_B.itau,
        proc_control_B.c_A, proc_control_B.i_my + 2);
      if (proc_control_B.beta1 != 0.0) {
        proc_control_B.beta1 = proc_control_rt_hypotd_snf
          (proc_control_B.c_A[proc_control_B.i_my], proc_control_B.beta1);
        if (proc_control_B.c_A[proc_control_B.i_my] >= 0.0) {
          proc_control_B.beta1 = -proc_control_B.beta1;
        }

        if (std::abs(proc_control_B.beta1) < 1.0020841800044864E-292) {
          proc_control_B.knt = 0;
          proc_control_B.c_lastc = (proc_control_B.i_my - proc_control_B.itau) +
            9;
          do {
            proc_control_B.knt++;
            proc_control_B.b_coltop = proc_control_B.i_my + 1;
            while (proc_control_B.b_coltop + 1 <= proc_control_B.c_lastc) {
              proc_control_B.c_A[proc_control_B.b_coltop] *=
                9.9792015476736E+291;
              proc_control_B.b_coltop++;
            }

            proc_control_B.beta1 *= 9.9792015476736E+291;
            proc_control_B.atmp *= 9.9792015476736E+291;
          } while ((std::abs(proc_control_B.beta1) < 1.0020841800044864E-292) &&
                   (proc_control_B.knt < 20));

          proc_control_B.beta1 = proc_control_rt_hypotd_snf(proc_control_B.atmp,
            xnrm2_LFVDqtKo(8 - proc_control_B.itau, proc_control_B.c_A,
                           proc_control_B.i_my + 2));
          if (proc_control_B.atmp >= 0.0) {
            proc_control_B.beta1 = -proc_control_B.beta1;
          }

          proc_control_B.tau_dk[proc_control_B.itau] = (proc_control_B.beta1 -
            proc_control_B.atmp) / proc_control_B.beta1;
          proc_control_B.atmp = 1.0 / (proc_control_B.atmp -
            proc_control_B.beta1);
          proc_control_B.b_coltop = proc_control_B.i_my + 1;
          while (proc_control_B.b_coltop + 1 <= proc_control_B.c_lastc) {
            proc_control_B.c_A[proc_control_B.b_coltop] *= proc_control_B.atmp;
            proc_control_B.b_coltop++;
          }

          proc_control_B.c_lastc = 0;
          while (proc_control_B.c_lastc <= proc_control_B.knt - 1) {
            proc_control_B.beta1 *= 1.0020841800044864E-292;
            proc_control_B.c_lastc++;
          }

          proc_control_B.atmp = proc_control_B.beta1;
        } else {
          proc_control_B.tau_dk[proc_control_B.itau] = (proc_control_B.beta1 -
            proc_control_B.c_A[proc_control_B.i_my]) / proc_control_B.beta1;
          proc_control_B.atmp = 1.0 / (proc_control_B.c_A[proc_control_B.i_my] -
            proc_control_B.beta1);
          proc_control_B.knt = (proc_control_B.i_my - proc_control_B.itau) + 9;
          proc_control_B.c_lastc = proc_control_B.i_my + 1;
          while (proc_control_B.c_lastc + 1 <= proc_control_B.knt) {
            proc_control_B.c_A[proc_control_B.c_lastc] *= proc_control_B.atmp;
            proc_control_B.c_lastc++;
          }

          proc_control_B.atmp = proc_control_B.beta1;
        }
      }

      proc_control_B.c_A[proc_control_B.i_my] = proc_control_B.atmp;
      proc_control_B.beta1 = proc_control_B.c_A[proc_control_B.i_my];
      proc_control_B.c_A[proc_control_B.i_my] = 1.0;
      if (proc_control_B.tau_dk[proc_control_B.itau] != 0.0) {
        proc_control_B.knt = 9 - proc_control_B.itau;
        proc_control_B.c_lastc = (proc_control_B.i_my - proc_control_B.itau) + 8;
        while ((proc_control_B.knt > 0) &&
               (proc_control_B.c_A[proc_control_B.c_lastc] == 0.0)) {
          proc_control_B.knt--;
          proc_control_B.c_lastc--;
        }

        proc_control_B.c_lastc = 8 - proc_control_B.itau;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.c_lastc > 0)) {
          proc_control_B.b_coltop = ((proc_control_B.c_lastc - 1) * 9 +
            proc_control_B.i_my) + 9;
          proc_control_B.coltop = proc_control_B.b_coltop;
          do {
            exitg1 = 0;
            if (proc_control_B.coltop + 1 <= proc_control_B.b_coltop +
                proc_control_B.knt) {
              if (proc_control_B.c_A[proc_control_B.coltop] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.coltop++;
              }
            } else {
              proc_control_B.c_lastc--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt = 0;
        proc_control_B.c_lastc = 0;
      }

      if (proc_control_B.knt > 0) {
        xgemv_sOAKB8Uk(proc_control_B.knt, proc_control_B.c_lastc,
                       proc_control_B.c_A, proc_control_B.i_my + 10,
                       proc_control_B.c_A, proc_control_B.i_my + 1,
                       proc_control_B.work_oi);
        proc_control_xgerc_LQbeTO3S(proc_control_B.knt, proc_control_B.c_lastc,
          -proc_control_B.tau_dk[proc_control_B.itau], proc_control_B.i_my + 1,
          proc_control_B.work_oi, proc_control_B.c_A, proc_control_B.i_my + 10);
      }

      proc_control_B.c_A[proc_control_B.i_my] = proc_control_B.beta1;
    } else {
      proc_control_B.tau_dk[8] = 0.0;
    }
  }

  for (proc_control_B.itau = 0; proc_control_B.itau < 9; proc_control_B.itau++)
  {
    proc_control_B.i_my = 0;
    while (proc_control_B.i_my <= proc_control_B.itau) {
      R[proc_control_B.i_my + 9 * proc_control_B.itau] = proc_control_B.c_A[9 *
        proc_control_B.itau + proc_control_B.i_my];
      proc_control_B.i_my++;
    }

    proc_control_B.i_my = proc_control_B.itau + 1;
    while (proc_control_B.i_my + 1 < 10) {
      R[proc_control_B.i_my + 9 * proc_control_B.itau] = 0.0;
      proc_control_B.i_my++;
    }

    proc_control_B.work_oi[proc_control_B.itau] = 0.0;
  }

  for (proc_control_B.i_my = 8; proc_control_B.i_my >= 0; proc_control_B.i_my--)
  {
    proc_control_B.knt = (proc_control_B.i_my * 9 + proc_control_B.i_my) + 10;
    if (proc_control_B.i_my + 1 < 9) {
      proc_control_B.c_A[proc_control_B.knt - 10] = 1.0;
      if (proc_control_B.tau_dk[proc_control_B.i_my] != 0.0) {
        proc_control_B.c_lastc = 9 - proc_control_B.i_my;
        proc_control_B.b_coltop = proc_control_B.knt - proc_control_B.i_my;
        while ((proc_control_B.c_lastc > 0) &&
               (proc_control_B.c_A[proc_control_B.b_coltop - 2] == 0.0)) {
          proc_control_B.c_lastc--;
          proc_control_B.b_coltop--;
        }

        proc_control_B.b_coltop = 8 - proc_control_B.i_my;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.b_coltop > 0)) {
          proc_control_B.coltop = (proc_control_B.b_coltop - 1) * 9 +
            proc_control_B.knt;
          proc_control_B.itau = proc_control_B.coltop;
          do {
            exitg1 = 0;
            if (proc_control_B.itau <= (proc_control_B.coltop +
                 proc_control_B.c_lastc) - 1) {
              if (proc_control_B.c_A[proc_control_B.itau - 1] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.itau++;
              }
            } else {
              proc_control_B.b_coltop--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.c_lastc = 0;
        proc_control_B.b_coltop = 0;
      }

      if (proc_control_B.c_lastc > 0) {
        xgemv_sOAKB8Uk(proc_control_B.c_lastc, proc_control_B.b_coltop,
                       proc_control_B.c_A, proc_control_B.knt,
                       proc_control_B.c_A, proc_control_B.knt - 9,
                       proc_control_B.work_oi);
        proc_control_xgerc_LQbeTO3S(proc_control_B.c_lastc,
          proc_control_B.b_coltop, -proc_control_B.tau_dk[proc_control_B.i_my],
          proc_control_B.knt - 9, proc_control_B.work_oi, proc_control_B.c_A,
          proc_control_B.knt);
      }

      proc_control_B.c_lastc = (proc_control_B.knt - proc_control_B.i_my) - 1;
      proc_control_B.b_coltop = proc_control_B.knt - 9;
      while (proc_control_B.b_coltop + 1 <= proc_control_B.c_lastc) {
        proc_control_B.c_A[proc_control_B.b_coltop] *=
          -proc_control_B.tau_dk[proc_control_B.i_my];
        proc_control_B.b_coltop++;
      }
    }

    proc_control_B.c_A[proc_control_B.knt - 10] = 1.0 -
      proc_control_B.tau_dk[proc_control_B.i_my];
    proc_control_B.c_lastc = 0;
    while (proc_control_B.c_lastc <= proc_control_B.i_my - 1) {
      proc_control_B.c_A[(proc_control_B.knt - proc_control_B.c_lastc) - 11] =
        0.0;
      proc_control_B.c_lastc++;
    }
  }

  proc_control_B.knt = 0;
  for (proc_control_B.itau = 0; proc_control_B.itau < 9; proc_control_B.itau++)
  {
    std::memcpy(&Q[proc_control_B.knt], &proc_control_B.c_A[proc_control_B.knt],
                9U * sizeof(real_T));
    proc_control_B.knt += 9;
  }
}

// Function for MATLAB Function: '<S192>/FixedHorizonOptimizer'
void proc_control::proc_contro_KWIKfactor_Vb6zpQ7O(const real_T b_Ac[2034],
  const int32_T iC[226], int32_T nA, const real_T b_Linv[81], real_T b_D[81],
  real_T b_H[81], int32_T n, real_T RLinv[81], real_T *Status)
{
  *Status = 1.0;
  std::memset(&RLinv[0], 0, 81U * sizeof(real_T));
  proc_control_B.b_i_f = 0;
  while (proc_control_B.b_i_f <= nA - 1) {
    proc_control_B.iC_m = iC[proc_control_B.b_i_f];
    for (proc_control_B.c_j = 0; proc_control_B.c_j < 9; proc_control_B.c_j++) {
      proc_control_B.g_i = 9 * proc_control_B.b_i_f + proc_control_B.c_j;
      RLinv[proc_control_B.g_i] = 0.0;
      for (proc_control_B.d_i = 0; proc_control_B.d_i < 9; proc_control_B.d_i++)
      {
        RLinv[proc_control_B.g_i] += b_Ac[(226 * proc_control_B.d_i +
          proc_control_B.iC_m) - 1] * b_Linv[9 * proc_control_B.d_i +
          proc_control_B.c_j];
      }
    }

    proc_control_B.b_i_f++;
  }

  proc_control_qr_MNq6sfUL(RLinv, proc_control_B.QQ, proc_control_B.RR);
  proc_control_B.b_i_f = 0;
  int32_T exitg1;
  do {
    exitg1 = 0;
    if (proc_control_B.b_i_f <= nA - 1) {
      if (std::abs(proc_control_B.RR[9 * proc_control_B.b_i_f +
                   proc_control_B.b_i_f]) < 1.0E-12) {
        *Status = -2.0;
        exitg1 = 1;
      } else {
        proc_control_B.b_i_f++;
      }
    } else {
      proc_control_B.d_i = 0;
      while (proc_control_B.d_i <= n - 1) {
        proc_control_B.g_i = 0;
        while (proc_control_B.g_i <= n - 1) {
          proc_control_B.b_Linv_h = 0.0;
          for (proc_control_B.c_j = 0; proc_control_B.c_j < 9;
               proc_control_B.c_j++) {
            proc_control_B.b_Linv_h += b_Linv[9 * proc_control_B.d_i +
              proc_control_B.c_j] * proc_control_B.QQ[9 * proc_control_B.g_i +
              proc_control_B.c_j];
          }

          proc_control_B.TL[proc_control_B.d_i + 9 * proc_control_B.g_i] =
            proc_control_B.b_Linv_h;
          proc_control_B.g_i++;
        }

        proc_control_B.d_i++;
      }

      std::memset(&RLinv[0], 0, 81U * sizeof(real_T));
      proc_control_B.c_j = nA - 1;
      while (proc_control_B.c_j + 1 > 0) {
        proc_control_B.g_i = 9 * proc_control_B.c_j + proc_control_B.c_j;
        RLinv[proc_control_B.g_i] = 1.0;
        proc_control_B.b_i_f = proc_control_B.c_j;
        while (proc_control_B.b_i_f + 1 <= nA) {
          proc_control_B.d_i = 9 * proc_control_B.b_i_f + proc_control_B.c_j;
          RLinv[proc_control_B.d_i] /= proc_control_B.RR[proc_control_B.g_i];
          proc_control_B.b_i_f++;
        }

        if (proc_control_B.c_j + 1 > 1) {
          proc_control_B.b_i_f = 0;
          while (proc_control_B.b_i_f <= proc_control_B.c_j - 1) {
            proc_control_B.d_i = proc_control_B.c_j;
            while (proc_control_B.d_i + 1 <= nA) {
              proc_control_B.g_i = 9 * proc_control_B.d_i + proc_control_B.b_i_f;
              RLinv[proc_control_B.g_i] -= proc_control_B.RR[9 *
                proc_control_B.c_j + proc_control_B.b_i_f] * RLinv[9 *
                proc_control_B.d_i + proc_control_B.c_j];
              proc_control_B.d_i++;
            }

            proc_control_B.b_i_f++;
          }
        }

        proc_control_B.c_j--;
      }

      proc_control_B.b_i_f = 0;
      while (proc_control_B.b_i_f <= n - 1) {
        proc_control_B.d_i = proc_control_B.b_i_f;
        while (proc_control_B.d_i + 1 <= n) {
          proc_control_B.c_j = 9 * proc_control_B.d_i + proc_control_B.b_i_f;
          b_H[proc_control_B.c_j] = 0.0;
          proc_control_B.g_i = nA;
          while (proc_control_B.g_i + 1 <= n) {
            b_H[proc_control_B.c_j] -= proc_control_B.TL[9 * proc_control_B.g_i
              + proc_control_B.b_i_f] * proc_control_B.TL[9 * proc_control_B.g_i
              + proc_control_B.d_i];
            proc_control_B.g_i++;
          }

          b_H[proc_control_B.d_i + 9 * proc_control_B.b_i_f] =
            b_H[proc_control_B.c_j];
          proc_control_B.d_i++;
        }

        proc_control_B.b_i_f++;
      }

      proc_control_B.d_i = 0;
      while (proc_control_B.d_i <= nA - 1) {
        proc_control_B.g_i = 0;
        while (proc_control_B.g_i <= n - 1) {
          proc_control_B.c_j = 9 * proc_control_B.d_i + proc_control_B.g_i;
          b_D[proc_control_B.c_j] = 0.0;
          proc_control_B.b_i_f = proc_control_B.d_i;
          while (proc_control_B.b_i_f + 1 <= nA) {
            b_D[proc_control_B.c_j] += proc_control_B.TL[9 *
              proc_control_B.b_i_f + proc_control_B.g_i] * RLinv[9 *
              proc_control_B.b_i_f + proc_control_B.d_i];
            proc_control_B.b_i_f++;
          }

          proc_control_B.g_i++;
        }

        proc_control_B.d_i++;
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S192>/FixedHorizonOptimizer'
void proc_control::proc_control_qpkwik_l(const real_T b_Linv[81], const real_T
  b_Hinv[81], const real_T f[9], const real_T b_Ac[2034], const real_T b[226],
  boolean_T iA[226], int32_T maxiter, real_T FeasTol, real_T x[9], real_T
  lambda[226], int32_T *status)
{
  boolean_T guard1{ false };

  std::memset(&x[0], 0, 9U * sizeof(real_T));
  std::memset(&lambda[0], 0, 226U * sizeof(real_T));
  *status = 1;
  std::memset(&proc_control_B.r_n[0], 0, 9U * sizeof(real_T));
  proc_control_B.rMin = 0.0;
  proc_control_B.cTolComputed = false;
  for (proc_control_B.i_p = 0; proc_control_B.i_p < 226; proc_control_B.i_p++) {
    proc_control_B.cTol[proc_control_B.i_p] = 1.0;
    proc_control_B.iC[proc_control_B.i_p] = 0;
  }

  proc_control_B.nA = 0;
  for (proc_control_B.tmp = 0; proc_control_B.tmp < 226; proc_control_B.tmp++) {
    if (iA[proc_control_B.tmp]) {
      proc_control_B.nA++;
      proc_control_B.iC[proc_control_B.nA - 1] = proc_control_B.tmp + 1;
    }
  }

  guard1 = false;
  if (proc_control_B.nA > 0) {
    int32_T exitg3;
    std::memset(&proc_control_B.Opt[0], 0, 18U * sizeof(real_T));
    for (proc_control_B.i_p = 0; proc_control_B.i_p < 9; proc_control_B.i_p++) {
      proc_control_B.Rhs[proc_control_B.i_p] = f[proc_control_B.i_p];
      proc_control_B.Rhs[proc_control_B.i_p + 9] = 0.0;
    }

    proc_control_B.DualFeasible = false;
    proc_control_B.tmp = static_cast<int32_T>(std::round(0.3 *
      static_cast<real_T>(proc_control_B.nA)));
    proc_control_B.ColdReset = false;
    do {
      exitg3 = 0;
      if ((!proc_control_B.DualFeasible) && (proc_control_B.nA > 0) && (*status <=
           maxiter)) {
        proc_contro_KWIKfactor_Vb6zpQ7O(b_Ac, proc_control_B.iC,
          proc_control_B.nA, b_Linv, proc_control_B.b_D_c, proc_control_B.b_H, 9,
          proc_control_B.RLinv, &proc_control_B.Xnorm0);
        if (proc_control_B.Xnorm0 < 0.0) {
          if (proc_control_B.ColdReset) {
            *status = -2;
            exitg3 = 2;
          } else {
            proc_control_B.nA = 0;
            std::memset(&iA[0], 0, 226U * sizeof(boolean_T));
            std::memset(&proc_control_B.iC[0], 0, 226U * sizeof(int32_T));
            proc_control_B.ColdReset = true;
          }
        } else {
          proc_control_B.i_p = 0;
          while (proc_control_B.i_p <= proc_control_B.nA - 1) {
            proc_control_B.Rhs[proc_control_B.i_p + 9] =
              b[proc_control_B.iC[proc_control_B.i_p] - 1];
            proc_control_B.iSave = proc_control_B.i_p;
            while (proc_control_B.iSave + 1 <= proc_control_B.nA) {
              proc_control_B.U_tmp = 9 * proc_control_B.i_p +
                proc_control_B.iSave;
              proc_control_B.U_fb[proc_control_B.U_tmp] = 0.0;
              proc_control_B.i_i = 0;
              while (proc_control_B.i_i <= proc_control_B.nA - 1) {
                proc_control_B.U_fb[proc_control_B.U_tmp] +=
                  proc_control_B.RLinv[9 * proc_control_B.i_i +
                  proc_control_B.iSave] * proc_control_B.RLinv[9 *
                  proc_control_B.i_i + proc_control_B.i_p];
                proc_control_B.i_i++;
              }

              proc_control_B.U_fb[proc_control_B.i_p + 9 * proc_control_B.iSave]
                = proc_control_B.U_fb[proc_control_B.U_tmp];
              proc_control_B.iSave++;
            }

            proc_control_B.i_p++;
          }

          for (proc_control_B.i_p = 0; proc_control_B.i_p < 9;
               proc_control_B.i_p++) {
            proc_control_B.Xnorm0 = 0.0;
            for (proc_control_B.i_i = 0; proc_control_B.i_i < 9;
                 proc_control_B.i_i++) {
              proc_control_B.Xnorm0 += proc_control_B.b_H[9 * proc_control_B.i_i
                + proc_control_B.i_p] * proc_control_B.Rhs[proc_control_B.i_i];
            }

            proc_control_B.Opt[proc_control_B.i_p] = proc_control_B.Xnorm0;
            proc_control_B.iSave = 0;
            while (proc_control_B.iSave <= proc_control_B.nA - 1) {
              proc_control_B.Opt[proc_control_B.i_p] += proc_control_B.b_D_c[9 *
                proc_control_B.iSave + proc_control_B.i_p] *
                proc_control_B.Rhs[proc_control_B.iSave + 9];
              proc_control_B.iSave++;
            }
          }

          proc_control_B.i_p = 0;
          while (proc_control_B.i_p <= proc_control_B.nA - 1) {
            proc_control_B.Xnorm0 = 0.0;
            for (proc_control_B.i_i = 0; proc_control_B.i_i < 9;
                 proc_control_B.i_i++) {
              proc_control_B.Xnorm0 += proc_control_B.b_D_c[9 *
                proc_control_B.i_p + proc_control_B.i_i] *
                proc_control_B.Rhs[proc_control_B.i_i];
            }

            proc_control_B.Opt[proc_control_B.i_p + 9] = proc_control_B.Xnorm0;
            proc_control_B.iSave = 0;
            while (proc_control_B.iSave <= proc_control_B.nA - 1) {
              proc_control_B.Opt[proc_control_B.i_p + 9] += proc_control_B.U_fb
                [9 * proc_control_B.iSave + proc_control_B.i_p] *
                proc_control_B.Rhs[proc_control_B.iSave + 9];
              proc_control_B.iSave++;
            }

            proc_control_B.i_p++;
          }

          proc_control_B.Xnorm0 = -1.0E-12;
          proc_control_B.i_p = 0;
          proc_control_B.iSave = 9;
          while (proc_control_B.iSave - 9 <= proc_control_B.nA - 1) {
            lambda[proc_control_B.iC[proc_control_B.iSave - 9] - 1] =
              proc_control_B.Opt[proc_control_B.iSave];
            if ((proc_control_B.Opt[proc_control_B.iSave] <
                 proc_control_B.Xnorm0) && (proc_control_B.iSave - 8 <=
                 proc_control_B.nA)) {
              proc_control_B.i_p = proc_control_B.iSave - 8;
              proc_control_B.Xnorm0 = proc_control_B.Opt[proc_control_B.iSave];
            }

            proc_control_B.iSave++;
          }

          if (proc_control_B.i_p <= 0) {
            proc_control_B.DualFeasible = true;
            std::memcpy(&x[0], &proc_control_B.Opt[0], 9U * sizeof(real_T));
          } else {
            (*status)++;
            if (proc_control_B.tmp <= 5) {
              proc_control_B.i_i = 5;
            } else {
              proc_control_B.i_i = proc_control_B.tmp;
            }

            if (*status > proc_control_B.i_i) {
              proc_control_B.nA = 0;
              std::memset(&iA[0], 0, 226U * sizeof(boolean_T));
              std::memset(&proc_control_B.iC[0], 0, 226U * sizeof(int32_T));
              proc_control_B.ColdReset = true;
            } else {
              lambda[proc_control_B.iC[proc_control_B.i_p - 1] - 1] = 0.0;
              DropConstraint_rIRdy5KO(proc_control_B.i_p, iA, &proc_control_B.nA,
                proc_control_B.iC);
            }
          }
        }
      } else {
        if (proc_control_B.nA <= 0) {
          std::memset(&lambda[0], 0, 226U * sizeof(real_T));
          Unconstrained_UjzZuo4S(b_Hinv, f, x, 9);
        }

        exitg3 = 1;
      }
    } while (exitg3 == 0);

    if (exitg3 == 1) {
      guard1 = true;
    }
  } else {
    Unconstrained_UjzZuo4S(b_Hinv, f, x, 9);
    guard1 = true;
  }

  if (guard1) {
    boolean_T exitg2;
    proc_control_B.Xnorm0 = norm_LIDj52w3(x);
    exitg2 = false;
    while ((!exitg2) && (*status <= maxiter)) {
      proc_control_B.cMin = -FeasTol;
      proc_control_B.tmp = -1;
      for (proc_control_B.i_p = 0; proc_control_B.i_p < 226; proc_control_B.i_p
           ++) {
        proc_control_B.t_k = proc_control_B.cTol[proc_control_B.i_p];
        if (!proc_control_B.cTolComputed) {
          for (proc_control_B.i_i = 0; proc_control_B.i_i < 9;
               proc_control_B.i_i++) {
            proc_control_B.b_Ac[proc_control_B.i_i] = b_Ac[226 *
              proc_control_B.i_i + proc_control_B.i_p] * x[proc_control_B.i_i];
          }

          abs_5XxirU9Z(proc_control_B.b_Ac, proc_control_B.z_p);
          proc_control_B.t_k = std::fmax(proc_control_B.t_k, maximum_YsmBif7U
            (proc_control_B.z_p));
        }

        if (!iA[proc_control_B.i_p]) {
          proc_control_B.b_Ac_j = 0.0;
          for (proc_control_B.i_i = 0; proc_control_B.i_i < 9;
               proc_control_B.i_i++) {
            proc_control_B.b_Ac_j += b_Ac[226 * proc_control_B.i_i +
              proc_control_B.i_p] * x[proc_control_B.i_i];
          }

          proc_control_B.cVal = (proc_control_B.b_Ac_j - b[proc_control_B.i_p]) /
            proc_control_B.t_k;
          if (proc_control_B.cVal < proc_control_B.cMin) {
            proc_control_B.cMin = proc_control_B.cVal;
            proc_control_B.tmp = proc_control_B.i_p;
          }
        }

        proc_control_B.cTol[proc_control_B.i_p] = proc_control_B.t_k;
      }

      proc_control_B.cTolComputed = true;
      if (proc_control_B.tmp + 1 <= 0) {
        exitg2 = true;
      } else if (*status == maxiter) {
        *status = 0;
        exitg2 = true;
      } else {
        int32_T exitg1;
        do {
          exitg1 = 0;
          if ((proc_control_B.tmp + 1 > 0) && (*status <= maxiter)) {
            boolean_T guard2{ false };

            guard2 = false;
            if (proc_control_B.nA == 0) {
              for (proc_control_B.i_i = 0; proc_control_B.i_i < 9;
                   proc_control_B.i_i++) {
                proc_control_B.z_p[proc_control_B.i_i] = 0.0;
                for (proc_control_B.i_p = 0; proc_control_B.i_p < 9;
                     proc_control_B.i_p++) {
                  proc_control_B.z_p[proc_control_B.i_i] += b_Hinv[9 *
                    proc_control_B.i_p + proc_control_B.i_i] * b_Ac[226 *
                    proc_control_B.i_p + proc_control_B.tmp];
                }
              }

              guard2 = true;
            } else {
              proc_contro_KWIKfactor_Vb6zpQ7O(b_Ac, proc_control_B.iC,
                proc_control_B.nA, b_Linv, proc_control_B.b_D_c,
                proc_control_B.b_H, 9, proc_control_B.RLinv,
                &proc_control_B.cMin);
              if (proc_control_B.cMin <= 0.0) {
                *status = -2;
                exitg1 = 1;
              } else {
                for (proc_control_B.i_i = 0; proc_control_B.i_i < 81;
                     proc_control_B.i_i++) {
                  proc_control_B.U_fb[proc_control_B.i_i] =
                    -proc_control_B.b_H[proc_control_B.i_i];
                }

                for (proc_control_B.i_i = 0; proc_control_B.i_i < 9;
                     proc_control_B.i_i++) {
                  proc_control_B.z_p[proc_control_B.i_i] = 0.0;
                  for (proc_control_B.i_p = 0; proc_control_B.i_p < 9;
                       proc_control_B.i_p++) {
                    proc_control_B.z_p[proc_control_B.i_i] +=
                      proc_control_B.U_fb[9 * proc_control_B.i_p +
                      proc_control_B.i_i] * b_Ac[226 * proc_control_B.i_p +
                      proc_control_B.tmp];
                  }
                }

                proc_control_B.i_p = 0;
                while (proc_control_B.i_p <= proc_control_B.nA - 1) {
                  proc_control_B.b_Ac_j = 0.0;
                  for (proc_control_B.i_i = 0; proc_control_B.i_i < 9;
                       proc_control_B.i_i++) {
                    proc_control_B.b_Ac_j += b_Ac[226 * proc_control_B.i_i +
                      proc_control_B.tmp] * proc_control_B.b_D_c[9 *
                      proc_control_B.i_p + proc_control_B.i_i];
                  }

                  proc_control_B.r_n[proc_control_B.i_p] = proc_control_B.b_Ac_j;
                  proc_control_B.i_p++;
                }

                guard2 = true;
              }
            }

            if (guard2) {
              boolean_T exitg4;
              proc_control_B.i_p = 0;
              proc_control_B.cMin = 0.0;
              proc_control_B.DualFeasible = true;
              proc_control_B.ColdReset = true;
              if (proc_control_B.nA > 0) {
                proc_control_B.iSave = 0;
                exitg4 = false;
                while ((!exitg4) && (proc_control_B.iSave <= proc_control_B.nA -
                                     1)) {
                  if (proc_control_B.r_n[proc_control_B.iSave] >= 1.0E-12) {
                    proc_control_B.ColdReset = false;
                    exitg4 = true;
                  } else {
                    proc_control_B.iSave++;
                  }
                }
              }

              if ((proc_control_B.nA != 0) && (!proc_control_B.ColdReset)) {
                proc_control_B.i_i = 0;
                while (proc_control_B.i_i <= proc_control_B.nA - 1) {
                  if (proc_control_B.r_n[proc_control_B.i_i] > 1.0E-12) {
                    proc_control_B.cVal =
                      lambda[proc_control_B.iC[proc_control_B.i_i] - 1] /
                      proc_control_B.r_n[proc_control_B.i_i];
                    if ((proc_control_B.i_p == 0) || (proc_control_B.cVal <
                         proc_control_B.rMin)) {
                      proc_control_B.rMin = proc_control_B.cVal;
                      proc_control_B.i_p = proc_control_B.i_i + 1;
                    }
                  }

                  proc_control_B.i_i++;
                }

                if (proc_control_B.i_p > 0) {
                  proc_control_B.cMin = proc_control_B.rMin;
                  proc_control_B.DualFeasible = false;
                }
              }

              for (proc_control_B.i_i = 0; proc_control_B.i_i < 9;
                   proc_control_B.i_i++) {
                proc_control_B.b_Ac[proc_control_B.i_i] = b_Ac[226 *
                  proc_control_B.i_i + proc_control_B.tmp];
              }

              proc_control_B.cVal = mtimes_mjx3OaTZ(proc_control_B.z_p,
                proc_control_B.b_Ac);
              if (proc_control_B.cVal <= 0.0) {
                proc_control_B.cVal = 0.0;
                proc_control_B.ColdReset = true;
              } else {
                proc_control_B.b_Ac_j = 0.0;
                for (proc_control_B.i_i = 0; proc_control_B.i_i < 9;
                     proc_control_B.i_i++) {
                  proc_control_B.b_Ac_j += b_Ac[226 * proc_control_B.i_i +
                    proc_control_B.tmp] * x[proc_control_B.i_i];
                }

                proc_control_B.cVal = (b[proc_control_B.tmp] -
                  proc_control_B.b_Ac_j) / proc_control_B.cVal;
                proc_control_B.ColdReset = false;
              }

              if (proc_control_B.DualFeasible && proc_control_B.ColdReset) {
                *status = -1;
                exitg1 = 1;
              } else {
                if (proc_control_B.ColdReset) {
                  proc_control_B.t_k = proc_control_B.cMin;
                } else if (proc_control_B.DualFeasible) {
                  proc_control_B.t_k = proc_control_B.cVal;
                } else if (proc_control_B.cMin < proc_control_B.cVal) {
                  proc_control_B.t_k = proc_control_B.cMin;
                } else {
                  proc_control_B.t_k = proc_control_B.cVal;
                }

                proc_control_B.i_i = 0;
                while (proc_control_B.i_i <= proc_control_B.nA - 1) {
                  lambda[proc_control_B.iC[proc_control_B.i_i] - 1] -=
                    proc_control_B.t_k * proc_control_B.r_n[proc_control_B.i_i];
                  if ((proc_control_B.iC[proc_control_B.i_i] <= 226) &&
                      (lambda[proc_control_B.iC[proc_control_B.i_i] - 1] < 0.0))
                  {
                    lambda[proc_control_B.iC[proc_control_B.i_i] - 1] = 0.0;
                  }

                  proc_control_B.i_i++;
                }

                lambda[proc_control_B.tmp] += proc_control_B.t_k;
                if (std::abs(proc_control_B.t_k - proc_control_B.cMin) <
                    eps_AH2epkhQ()) {
                  DropConstraint_rIRdy5KO(proc_control_B.i_p, iA,
                    &proc_control_B.nA, proc_control_B.iC);
                }

                if (!proc_control_B.ColdReset) {
                  for (proc_control_B.i_i = 0; proc_control_B.i_i < 9;
                       proc_control_B.i_i++) {
                    x[proc_control_B.i_i] += proc_control_B.t_k *
                      proc_control_B.z_p[proc_control_B.i_i];
                  }

                  if (std::abs(proc_control_B.t_k - proc_control_B.cVal) <
                      eps_AH2epkhQ()) {
                    if (proc_control_B.nA == 9) {
                      *status = -1;
                      exitg1 = 1;
                    } else {
                      proc_control_B.nA++;
                      proc_control_B.iC[proc_control_B.nA - 1] =
                        proc_control_B.tmp + 1;
                      proc_control_B.i_p = proc_control_B.nA - 1;
                      exitg4 = false;
                      while ((!exitg4) && (proc_control_B.i_p + 1 > 1)) {
                        proc_control_B.i_i =
                          proc_control_B.iC[proc_control_B.i_p - 1];
                        if (proc_control_B.iC[proc_control_B.i_p] >
                            proc_control_B.i_i) {
                          exitg4 = true;
                        } else {
                          proc_control_B.iSave =
                            proc_control_B.iC[proc_control_B.i_p];
                          proc_control_B.iC[proc_control_B.i_p] =
                            proc_control_B.i_i;
                          proc_control_B.iC[proc_control_B.i_p - 1] =
                            proc_control_B.iSave;
                          proc_control_B.i_p--;
                        }
                      }

                      iA[proc_control_B.tmp] = true;
                      proc_control_B.tmp = -1;
                      (*status)++;
                    }
                  } else {
                    (*status)++;
                  }
                } else {
                  (*status)++;
                }
              }
            }
          } else {
            proc_control_B.cMin = norm_LIDj52w3(x);
            if (std::abs(proc_control_B.cMin - proc_control_B.Xnorm0) > 0.001) {
              proc_control_B.Xnorm0 = proc_control_B.cMin;
              abs_1HbhVWDZ(b, proc_control_B.dv3);
              maximum2_goSZU0Rz(proc_control_B.dv3, 1.0, proc_control_B.cTol);
              proc_control_B.cTolComputed = false;
            }

            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S192>/FixedHorizonOptimizer'
void proc_control::proc_control_mpcblock_optimizer(const real_T rseq[130], const
  real_T vseq[11], const real_T umin[8], const real_T umax[8], const real_T x[21],
  const real_T old_u[8], const boolean_T iA[226], const real_T b_Mlim[226],
  real_T b_Mx[4746], real_T b_Mu1[1808], real_T b_Mv[2486], const real_T
  b_utarget[80], const real_T b_uoff[8], real_T b_H[81], real_T b_Ac[2034],
  const real_T ywt[13], const real_T uwt[8], const real_T duwt[8], const real_T
  b_Jm[640], const real_T b_I1[640], const real_T b_A[4851], const real_T Bu
  [1848], const real_T Bv[231], const real_T b_C[3003], const real_T Dv[143],
  const int32_T b_Mrows[226], const real_T b_RMVscale[8], real_T u[8], real_T
  useq[88], real_T *status, boolean_T iAout[226])
{
  static const real_T b[100]{ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  boolean_T exitg1;
  std::memset(&iAout[0], 0, 226U * sizeof(boolean_T));
  mpc_constraintcoefLTV_j7mSZmy_g(b_A, Bu, Bv, b_C, Dv, b_Jm,
    proc_control_B.b_SuJm, proc_control_B.b_Sx, proc_control_B.b_Su1,
    proc_control_B.b_Hv);
  if (b_Mrows[0] > 0) {
    proc_control_B.i_k = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.i_k < 226)) {
      if (b_Mrows[proc_control_B.i_k] <= 130) {
        proc_control_B.i_g = b_Mrows[proc_control_B.i_k];
        for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 8;
             proc_control_B.ii_i++) {
          b_Ac[proc_control_B.i_k + 226 * proc_control_B.ii_i] =
            -proc_control_B.b_SuJm[(130 * proc_control_B.ii_i +
            proc_control_B.i_g) - 1];
        }

        proc_control_B.i_g = b_Mrows[proc_control_B.i_k];
        for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 21;
             proc_control_B.ii_i++) {
          b_Mx[proc_control_B.i_k + 226 * proc_control_B.ii_i] =
            -proc_control_B.b_Sx[(130 * proc_control_B.ii_i + proc_control_B.i_g)
            - 1];
        }

        proc_control_B.i_g = b_Mrows[proc_control_B.i_k];
        for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 8;
             proc_control_B.ii_i++) {
          b_Mu1[proc_control_B.i_k + 226 * proc_control_B.ii_i] =
            -proc_control_B.b_Su1[(130 * proc_control_B.ii_i +
            proc_control_B.i_g) - 1];
        }

        proc_control_B.i_g = b_Mrows[proc_control_B.i_k];
        for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 11;
             proc_control_B.ii_i++) {
          b_Mv[proc_control_B.i_k + 226 * proc_control_B.ii_i] =
            -proc_control_B.b_Hv[(130 * proc_control_B.ii_i + proc_control_B.i_g)
            - 1];
        }

        proc_control_B.i_k++;
      } else if (b_Mrows[proc_control_B.i_k] <= 260) {
        proc_control_B.i_g = b_Mrows[proc_control_B.i_k];
        for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 8;
             proc_control_B.ii_i++) {
          b_Ac[proc_control_B.i_k + 226 * proc_control_B.ii_i] =
            proc_control_B.b_SuJm[(130 * proc_control_B.ii_i +
            proc_control_B.i_g) - 131];
        }

        proc_control_B.i_g = b_Mrows[proc_control_B.i_k];
        for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 21;
             proc_control_B.ii_i++) {
          b_Mx[proc_control_B.i_k + 226 * proc_control_B.ii_i] =
            proc_control_B.b_Sx[(130 * proc_control_B.ii_i + proc_control_B.i_g)
            - 131];
        }

        proc_control_B.i_g = b_Mrows[proc_control_B.i_k];
        for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 8;
             proc_control_B.ii_i++) {
          b_Mu1[proc_control_B.i_k + 226 * proc_control_B.ii_i] =
            proc_control_B.b_Su1[(130 * proc_control_B.ii_i + proc_control_B.i_g)
            - 131];
        }

        proc_control_B.i_g = b_Mrows[proc_control_B.i_k];
        for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 11;
             proc_control_B.ii_i++) {
          b_Mv[proc_control_B.i_k + 226 * proc_control_B.ii_i] =
            proc_control_B.b_Hv[(130 * proc_control_B.ii_i + proc_control_B.i_g)
            - 131];
        }

        proc_control_B.i_k++;
      } else {
        exitg1 = true;
      }
    }
  }

  for (proc_control_B.i_k = 0; proc_control_B.i_k < 13; proc_control_B.i_k++) {
    proc_control_B.ywt_m = ywt[proc_control_B.i_k];
    if (proc_control_B.ywt_m < 0.0) {
      proc_control_B.b_Wy[proc_control_B.i_k] = 0.0;
    } else {
      proc_control_B.b_Wy[proc_control_B.i_k] = proc_control_B.ywt_m *
        proc_control_B.ywt_m;
    }
  }

  for (proc_control_B.i_k = 0; proc_control_B.i_k < 8; proc_control_B.i_k++) {
    proc_control_B.ywt_m = duwt[proc_control_B.i_k];
    proc_control_B.uwt = uwt[proc_control_B.i_k];
    if (proc_control_B.uwt < 0.0) {
      proc_control_B.b_Wu[proc_control_B.i_k] = 0.0;
    } else {
      proc_control_B.b_Wu[proc_control_B.i_k] = proc_control_B.uwt *
        proc_control_B.uwt;
    }

    if (proc_control_B.ywt_m < 0.0) {
      proc_control_B.b_Wdu[proc_control_B.i_k] = 0.0;
    } else {
      proc_control_B.b_Wdu[proc_control_B.i_k] = proc_control_B.ywt_m *
        proc_control_B.ywt_m;
    }
  }

  std::memset(&proc_control_B.b_I[0], 0, sizeof(real_T) << 6U);
  proc_control_B.i_g = 0;
  for (proc_control_B.i_k = 0; proc_control_B.i_k < 8; proc_control_B.i_k++) {
    proc_control_B.b_I[proc_control_B.i_g] = 1.0;
    proc_control_B.i_g += 9;
  }

  kron_5Yeqlajx(b, proc_control_B.b_I, proc_control_B.dv);
  for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 8; proc_control_B.ii_i++)
  {
    std::memset(&proc_control_B.I2Jm[proc_control_B.ii_i * 80], 0, 80U * sizeof
                (real_T));
    for (proc_control_B.i_g = 0; proc_control_B.i_g < 80; proc_control_B.i_g++)
    {
      for (proc_control_B.i_k = 0; proc_control_B.i_k < 80; proc_control_B.i_k++)
      {
        proc_control_B.I2Jm_tmp = 80 * proc_control_B.ii_i + proc_control_B.i_k;
        proc_control_B.I2Jm[proc_control_B.I2Jm_tmp] += proc_control_B.dv[80 *
          proc_control_B.i_g + proc_control_B.i_k] * b_Jm[80 *
          proc_control_B.ii_i + proc_control_B.i_g];
      }
    }
  }

  proc_control_B.ixw = 1;
  for (proc_control_B.i_k = 0; proc_control_B.i_k < 130; proc_control_B.i_k++) {
    proc_control_B.ywt_m = proc_control_B.b_Wy[proc_control_B.ixw - 1];
    for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 8; proc_control_B.ii_i++)
    {
      proc_control_B.i_g = 130 * proc_control_B.ii_i + proc_control_B.i_k;
      proc_control_B.WySuJm[proc_control_B.i_g] =
        proc_control_B.b_SuJm[proc_control_B.i_g] * proc_control_B.ywt_m;
    }

    proc_control_B.ixw = static_cast<int16_T>(proc_control_B.ixw + 1);
    if (proc_control_B.ixw > 13) {
      proc_control_B.ixw = 1;
    }
  }

  WtMult_xTv5xWC7(proc_control_B.b_Wu, proc_control_B.I2Jm, proc_control_nu,
                  proc_control_B.WuI2Jm);
  WtMult_xTv5xWC7(proc_control_B.b_Wdu, b_Jm, proc_control_nu,
                  proc_control_B.dv2);
  for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 8; proc_control_B.ii_i++)
  {
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 8; proc_control_B.i_k++) {
      proc_control_B.I2Jm_tmp = (proc_control_B.ii_i << 3) + proc_control_B.i_k;
      proc_control_B.b_I[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 130; proc_control_B.i_g
           ++) {
        proc_control_B.b_I[proc_control_B.I2Jm_tmp] += proc_control_B.b_SuJm[130
          * proc_control_B.i_k + proc_control_B.i_g] * proc_control_B.WySuJm[130
          * proc_control_B.ii_i + proc_control_B.i_g];
      }

      proc_control_B.b_Jm[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 80; proc_control_B.i_g++)
      {
        proc_control_B.b_Jm[proc_control_B.I2Jm_tmp] += b_Jm[80 *
          proc_control_B.i_k + proc_control_B.i_g] * proc_control_B.dv2[80 *
          proc_control_B.ii_i + proc_control_B.i_g];
      }
    }
  }

  for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 8; proc_control_B.ii_i++)
  {
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 8; proc_control_B.i_k++) {
      proc_control_B.ywt_m = 0.0;
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 80; proc_control_B.i_g++)
      {
        proc_control_B.ywt_m += proc_control_B.I2Jm[80 * proc_control_B.ii_i +
          proc_control_B.i_g] * proc_control_B.WuI2Jm[80 * proc_control_B.i_k +
          proc_control_B.i_g];
      }

      proc_control_B.i_g = (proc_control_B.i_k << 3) + proc_control_B.ii_i;
      b_H[proc_control_B.ii_i + 9 * proc_control_B.i_k] =
        (proc_control_B.b_I[proc_control_B.i_g] +
         proc_control_B.b_Jm[proc_control_B.i_g]) + proc_control_B.ywt_m;
      proc_control_B.I2Jm_tmp = (proc_control_B.ii_i << 3) + proc_control_B.i_k;
      proc_control_B.b_Su1_j[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 130; proc_control_B.i_g
           ++) {
        proc_control_B.b_Su1_j[proc_control_B.I2Jm_tmp] += proc_control_B.b_Su1
          [130 * proc_control_B.i_k + proc_control_B.i_g] *
          proc_control_B.WySuJm[130 * proc_control_B.ii_i + proc_control_B.i_g];
      }

      proc_control_B.b_I1_e[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 80; proc_control_B.i_g++)
      {
        proc_control_B.b_I1_e[proc_control_B.I2Jm_tmp] += b_I1[80 *
          proc_control_B.i_k + proc_control_B.i_g] * proc_control_B.WuI2Jm[80 *
          proc_control_B.ii_i + proc_control_B.i_g];
      }
    }
  }

  for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 64; proc_control_B.ii_i++)
  {
    proc_control_B.b_I[proc_control_B.ii_i] =
      proc_control_B.b_Su1_j[proc_control_B.ii_i] +
      proc_control_B.b_I1_e[proc_control_B.ii_i];
  }

  for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 640; proc_control_B.ii_i++)
  {
    proc_control_B.WuI2Jm[proc_control_B.ii_i] =
      -proc_control_B.WuI2Jm[proc_control_B.ii_i];
  }

  for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 8; proc_control_B.ii_i++)
  {
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 21; proc_control_B.i_k++)
    {
      proc_control_B.I2Jm_tmp = 21 * proc_control_B.ii_i + proc_control_B.i_k;
      proc_control_B.b_Kx[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 130; proc_control_B.i_g
           ++) {
        proc_control_B.b_Kx[proc_control_B.I2Jm_tmp] += proc_control_B.b_Sx[130 *
          proc_control_B.i_k + proc_control_B.i_g] * proc_control_B.WySuJm[130 *
          proc_control_B.ii_i + proc_control_B.i_g];
      }
    }

    for (proc_control_B.i_k = 0; proc_control_B.i_k < 11; proc_control_B.i_k++)
    {
      proc_control_B.I2Jm_tmp = 11 * proc_control_B.ii_i + proc_control_B.i_k;
      proc_control_B.b_Kv[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 130; proc_control_B.i_g
           ++) {
        proc_control_B.b_Kv[proc_control_B.I2Jm_tmp] += proc_control_B.b_Hv[130 *
          proc_control_B.i_k + proc_control_B.i_g] * proc_control_B.WySuJm[130 *
          proc_control_B.ii_i + proc_control_B.i_g];
      }
    }
  }

  for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 1040; proc_control_B.ii_i
       ++) {
    proc_control_B.WySuJm[proc_control_B.ii_i] =
      -proc_control_B.WySuJm[proc_control_B.ii_i];
  }

  std::memcpy(&proc_control_B.b_Linv[0], &b_H[0], 81U * sizeof(real_T));
  mpc_checkhessian_AF9zNtya(proc_control_B.b_Linv, proc_control_B.c_Linv,
    &proc_control_B.ywt_m);
  if (proc_control_B.ywt_m > 1.0) {
    proc_control_B.i_k = 0;
    for (proc_control_B.i_g = 0; proc_control_B.i_g < 8; proc_control_B.i_g++) {
      u[proc_control_B.i_g] = old_u[proc_control_B.i_g] +
        b_uoff[proc_control_B.i_g];
      for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 11;
           proc_control_B.ii_i++) {
        useq[proc_control_B.ii_i + proc_control_B.i_k] = u[proc_control_B.i_g];
      }

      proc_control_B.i_k += 11;
    }

    *status = -2.0;
  } else {
    std::memset(&proc_control_B.b_B_g[0], 0, 81U * sizeof(int8_T));
    proc_control_B.i_g = 0;
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 9; proc_control_B.i_k++) {
      proc_control_B.b_B_g[proc_control_B.i_g] = 1;
      proc_control_B.i_g += 10;
    }

    proc_control_B.i_g = 0;
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 9; proc_control_B.i_k++) {
      for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 9; proc_control_B.ii_i
           ++) {
        proc_control_B.I2Jm_tmp = proc_control_B.ii_i + proc_control_B.i_g;
        proc_control_B.b_Linv[proc_control_B.I2Jm_tmp] =
          proc_control_B.b_B_g[proc_control_B.I2Jm_tmp];
      }

      proc_control_B.i_g += 9;
    }

    trisolve_bR4rdVHP(proc_control_B.c_Linv, proc_control_B.b_Linv);
    for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 226; proc_control_B.ii_i
         ++) {
      proc_control_B.ywt_m = 0.0;
      proc_control_B.i_k = 0;
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 21; proc_control_B.i_g++)
      {
        proc_control_B.ywt_m += b_Mx[proc_control_B.i_k + proc_control_B.ii_i] *
          x[proc_control_B.i_g];
        proc_control_B.i_k += 226;
      }

      proc_control_B.b_Mlim_g[proc_control_B.ii_i] = b_Mlim[proc_control_B.ii_i]
        + proc_control_B.ywt_m;
      proc_control_B.b_Mu1[proc_control_B.ii_i] = 0.0;
    }

    proc_control_B.ii_i = 0;
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 8; proc_control_B.i_k++) {
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 226; proc_control_B.i_g
           ++) {
        proc_control_B.b_Mu1[proc_control_B.i_g] += b_Mu1[proc_control_B.i_g +
          proc_control_B.ii_i] * old_u[proc_control_B.i_k];
      }

      proc_control_B.ii_i += 226;
    }

    for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 226; proc_control_B.ii_i
         ++) {
      proc_control_B.ywt_m = 0.0;
      proc_control_B.i_k = 0;
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 11; proc_control_B.i_g++)
      {
        proc_control_B.ywt_m += b_Mv[proc_control_B.i_k + proc_control_B.ii_i] *
          vseq[proc_control_B.i_g];
        proc_control_B.i_k += 226;
      }

      proc_control_B.Bc[proc_control_B.ii_i] =
        -((proc_control_B.b_Mlim_g[proc_control_B.ii_i] +
           proc_control_B.b_Mu1[proc_control_B.ii_i]) + proc_control_B.ywt_m);
    }

    std::memset(&proc_control_B.b_Wu[0], 0, sizeof(real_T) << 3U);
    std::memset(&proc_control_B.b_Wdu[0], 0, sizeof(real_T) << 3U);
    for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 8; proc_control_B.ii_i++)
    {
      proc_control_B.umax_incr_flag_f[proc_control_B.ii_i] = false;
      proc_control_B.umin_incr_flag_n[proc_control_B.ii_i] = false;
    }

    if (b_Mrows[0] > 0) {
      proc_control_B.i_k = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.i_k < 226)) {
        if ((b_Mrows[proc_control_B.i_k] <= 130) || (b_Mrows[proc_control_B.i_k]
             <= 260)) {
          proc_control_B.i_k++;
        } else if (b_Mrows[proc_control_B.i_k] <= 340) {
          proc_control_B.ii_i = (b_Mrows[proc_control_B.i_k] -
            (((b_Mrows[proc_control_B.i_k] - 261) >> 3) << 3)) - 261;
          proc_control_B.b_Del_Save_Flag0 =
            proc_control_B.umax_incr_flag_f[proc_control_B.ii_i];
          if (!proc_control_B.umax_incr_flag_f[proc_control_B.ii_i]) {
            proc_control_B.ywt_m = -(b_RMVscale[proc_control_B.ii_i] *
              umax[proc_control_B.ii_i] - b_uoff[proc_control_B.ii_i]) -
              (-b_Mlim[proc_control_B.i_k]);
            proc_control_B.b_Del_Save_Flag0 = true;
          } else {
            proc_control_B.ywt_m = proc_control_B.b_Wu[proc_control_B.ii_i];
          }

          proc_control_B.b_Wu[proc_control_B.ii_i] = proc_control_B.ywt_m;
          proc_control_B.umax_incr_flag_f[proc_control_B.ii_i] =
            proc_control_B.b_Del_Save_Flag0;
          proc_control_B.Bc[proc_control_B.i_k] += proc_control_B.ywt_m;
          proc_control_B.i_k++;
        } else if (b_Mrows[proc_control_B.i_k] <= 420) {
          proc_control_B.ii_i = (b_Mrows[proc_control_B.i_k] -
            (((b_Mrows[proc_control_B.i_k] - 341) >> 3) << 3)) - 341;
          proc_control_B.b_Del_Save_Flag0 =
            proc_control_B.umin_incr_flag_n[proc_control_B.ii_i];
          if (!proc_control_B.umin_incr_flag_n[proc_control_B.ii_i]) {
            proc_control_B.ywt_m = (b_RMVscale[proc_control_B.ii_i] *
              umin[proc_control_B.ii_i] - b_uoff[proc_control_B.ii_i]) -
              (-b_Mlim[proc_control_B.i_k]);
            proc_control_B.b_Del_Save_Flag0 = true;
          } else {
            proc_control_B.ywt_m = proc_control_B.b_Wdu[proc_control_B.ii_i];
          }

          proc_control_B.b_Wdu[proc_control_B.ii_i] = proc_control_B.ywt_m;
          proc_control_B.umin_incr_flag_n[proc_control_B.ii_i] =
            proc_control_B.b_Del_Save_Flag0;
          proc_control_B.Bc[proc_control_B.i_k] += proc_control_B.ywt_m;
          proc_control_B.i_k++;
        } else {
          exitg1 = true;
        }
      }
    }

    std::memset(&proc_control_B.f[0], 0, 9U * sizeof(real_T));
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 8; proc_control_B.i_k++) {
      proc_control_B.ywt_m = 0.0;
      for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 21;
           proc_control_B.ii_i++) {
        proc_control_B.ywt_m += proc_control_B.b_Kx[21 * proc_control_B.i_k +
          proc_control_B.ii_i] * x[proc_control_B.ii_i];
      }

      proc_control_B.uwt = 0.0;
      for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 130;
           proc_control_B.ii_i++) {
        proc_control_B.uwt += proc_control_B.WySuJm[130 * proc_control_B.i_k +
          proc_control_B.ii_i] * rseq[proc_control_B.ii_i];
      }

      proc_control_B.b_I_b = 0.0;
      for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 8; proc_control_B.ii_i
           ++) {
        proc_control_B.b_I_b += proc_control_B.b_I[(proc_control_B.i_k << 3) +
          proc_control_B.ii_i] * old_u[proc_control_B.ii_i];
      }

      proc_control_B.b_Kv_o = 0.0;
      for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 11;
           proc_control_B.ii_i++) {
        proc_control_B.b_Kv_o += proc_control_B.b_Kv[11 * proc_control_B.i_k +
          proc_control_B.ii_i] * vseq[proc_control_B.ii_i];
      }

      proc_control_B.WuI2Jm_n = 0.0;
      for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 80;
           proc_control_B.ii_i++) {
        proc_control_B.WuI2Jm_n += proc_control_B.WuI2Jm[80 * proc_control_B.i_k
          + proc_control_B.ii_i] * b_utarget[proc_control_B.ii_i];
      }

      proc_control_B.f[proc_control_B.i_k] = (((proc_control_B.ywt_m +
        proc_control_B.uwt) + proc_control_B.b_I_b) + proc_control_B.b_Kv_o) +
        proc_control_B.WuI2Jm_n;
    }

    std::memcpy(&iAout[0], &iA[0], 226U * sizeof(boolean_T));
    proc_control_B.ii_i = 0;
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 9; proc_control_B.i_k++) {
      proc_control_B.i_g = 0;
      for (proc_control_B.i4 = 0; proc_control_B.i4 < 9; proc_control_B.i4++) {
        proc_control_B.I2Jm_tmp = proc_control_B.i4 + proc_control_B.ii_i;
        proc_control_B.c_Linv[proc_control_B.I2Jm_tmp] = 0.0;
        for (proc_control_B.i5 = 0; proc_control_B.i5 < 9; proc_control_B.i5++)
        {
          proc_control_B.c_Linv[proc_control_B.I2Jm_tmp] +=
            proc_control_B.b_Linv[proc_control_B.i5 + proc_control_B.i_g] *
            proc_control_B.b_Linv[proc_control_B.i5 + proc_control_B.ii_i];
        }

        proc_control_B.i_g += 9;
      }

      proc_control_B.ii_i += 9;
    }

    proc_control_qpkwik_l(proc_control_B.b_Linv, proc_control_B.c_Linv,
                          proc_control_B.f, b_Ac, proc_control_B.Bc, iAout, 940,
                          0.01, proc_control_B.zopt, proc_control_B.b_Mlim_g,
                          &proc_control_B.i_k);
    if ((proc_control_B.i_k < 0) || (proc_control_B.i_k == 0)) {
      std::memset(&proc_control_B.zopt[0], 0, 9U * sizeof(real_T));
    }

    *status = proc_control_B.i_k;
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 8; proc_control_B.i_k++) {
      u[proc_control_B.i_k] = (old_u[proc_control_B.i_k] +
        proc_control_B.zopt[proc_control_B.i_k]) + b_uoff[proc_control_B.i_k];
    }

    std::memset(&proc_control_B.b_I[0], 0, sizeof(real_T) << 6U);
    proc_control_B.i_g = 0;
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 8; proc_control_B.i_k++) {
      proc_control_B.b_I[proc_control_B.i_g] = 1.0;
      proc_control_B.i_g += 9;
    }

    kron_5Yeqlajx(b, proc_control_B.b_I, proc_control_B.dv);
    for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 8; proc_control_B.ii_i++)
    {
      std::memset(&proc_control_B.dv2[proc_control_B.ii_i * 80], 0, 80U * sizeof
                  (real_T));
      for (proc_control_B.i_g = 0; proc_control_B.i_g < 80; proc_control_B.i_g++)
      {
        for (proc_control_B.i_k = 0; proc_control_B.i_k < 80; proc_control_B.i_k
             ++) {
          proc_control_B.i4 = 80 * proc_control_B.ii_i + proc_control_B.i_k;
          proc_control_B.dv2[proc_control_B.i4] += proc_control_B.dv[80 *
            proc_control_B.i_g + proc_control_B.i_k] * b_Jm[80 *
            proc_control_B.ii_i + proc_control_B.i_g];
        }
      }

      proc_control_B.b_Wu[proc_control_B.ii_i] = old_u[proc_control_B.ii_i] +
        b_uoff[proc_control_B.ii_i];
    }

    std::memset(&proc_control_B.dv9[0], 0, 80U * sizeof(real_T));
    proc_control_B.i_k = 0;
    for (proc_control_B.i_g = 0; proc_control_B.i_g < 8; proc_control_B.i_g++) {
      for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 80;
           proc_control_B.ii_i++) {
        proc_control_B.dv9[proc_control_B.ii_i] +=
          proc_control_B.dv2[proc_control_B.ii_i + proc_control_B.i_k] *
          proc_control_B.zopt[proc_control_B.i_g];
      }

      proc_control_B.i_k += 80;
    }

    std::memset(&proc_control_B.b_I1[0], 0, 80U * sizeof(real_T));
    proc_control_B.i_k = 0;
    for (proc_control_B.i_g = 0; proc_control_B.i_g < 8; proc_control_B.i_g++) {
      for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 80;
           proc_control_B.ii_i++) {
        proc_control_B.b_I1[proc_control_B.ii_i] += b_I1[proc_control_B.ii_i +
          proc_control_B.i_k] * proc_control_B.b_Wu[proc_control_B.i_g];
      }

      proc_control_B.i_k += 80;
    }

    for (proc_control_B.ii_i = 0; proc_control_B.ii_i < 80; proc_control_B.ii_i
         ++) {
      proc_control_B.dv10[proc_control_B.ii_i] =
        proc_control_B.dv9[proc_control_B.ii_i] +
        proc_control_B.b_I1[proc_control_B.ii_i];
    }

    proc_control_B.ii_i = 0;
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 8; proc_control_B.i_k++) {
      proc_control_B.i_g = 0;
      for (proc_control_B.i4 = 0; proc_control_B.i4 < 10; proc_control_B.i4++) {
        useq[proc_control_B.i4 + proc_control_B.ii_i] =
          proc_control_B.dv10[proc_control_B.i_g + proc_control_B.i_k];
        proc_control_B.i_g += 8;
      }

      proc_control_B.ii_i += 11;
    }

    proc_control_B.ii_i = 0;
    for (proc_control_B.i_k = 0; proc_control_B.i_k < 8; proc_control_B.i_k++) {
      proc_control_B.b_Wu[proc_control_B.i_k] = useq[proc_control_B.ii_i + 9];
      useq[proc_control_B.ii_i + 10] = proc_control_B.b_Wu[proc_control_B.i_k];
      proc_control_B.ii_i += 11;
    }
  }
}

// Function for MATLAB Function: '<S192>/FixedHorizonOptimizer'
void proc_control::proc_c_mpc_plantupdate_opKkKWqM(const real_T a[169], real_T
  b[104], const real_T c[169], real_T b_A[441], real_T b_B[630], real_T b_C[273],
  const real_T b_D[390], const int32_T b_mvindex[8], const int32_T b_myindex[13],
  const real_T b_Uscale[8], const real_T b_Yscale[13], real_T Bu[168], real_T
  Bv[21], real_T Cm[273], real_T Dv[13], real_T Dvm[13], real_T QQ[441], real_T
  RR[169], real_T NN[273])
{
  int32_T b_tmp;
  int32_T i_0;
  int32_T i_1;
  int32_T tmp;
  int8_T UnknownIn[29];
  i_1 = 0;
  for (i_0 = 0; i_0 < 8; i_0++) {
    for (int32_T i{0}; i < 13; i++) {
      b_tmp = i + i_1;
      b[b_tmp] *= b_Uscale[i_0];
    }

    i_1 += 13;
  }

  i_1 = 0;
  i_0 = 0;
  for (int32_T i{0}; i < 13; i++) {
    for (b_tmp = 0; b_tmp < 13; b_tmp++) {
      tmp = b_tmp + i_1;
      b_C[tmp] = c[tmp] / b_Yscale[b_tmp];
      b_A[b_tmp + i_0] = a[tmp];
    }

    i_1 += 13;
    i_0 += 21;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
      b_B[i_0 + 21 * i_1] = b[(b_mvindex[i_1] - 1) * 13 + i_0];
    }

    std::memcpy(&Bu[i_1 * 21], &b_B[i_1 * 21], 21U * sizeof(real_T));
  }

  for (i_1 = 0; i_1 < 21; i_1++) {
    Bv[i_1] = b_B[i_1 + 168];
    for (i_0 = 0; i_0 < 13; i_0++) {
      Cm[i_0 + 13 * i_1] = b_C[(13 * i_1 + b_myindex[i_0]) - 1];
    }
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    Dv[i_1] = b_D[i_1 + 104];
    Dvm[i_1] = b_D[b_myindex[i_1] + 103];
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    UnknownIn[i_1] = 0;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    UnknownIn[i_1] = static_cast<int8_T>(i_1 + 1);
  }

  for (i_1 = 0; i_1 < 21; i_1++) {
    UnknownIn[i_1 + 8] = static_cast<int8_T>(i_1 + 10);
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    for (i_0 = 0; i_0 < 21; i_0++) {
      proc_control_B.b_tmp[i_0 + 34 * i_1] = b_B[(UnknownIn[i_1] - 1) * 21 + i_0];
    }
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_B.b_tmp[(i_0 + 34 * i_1) + 21] = b_D[((UnknownIn[i_1] - 1) *
        13 + b_myindex[i_0]) - 1];
    }
  }

  i_1 = 0;
  for (i_0 = 0; i_0 < 34; i_0++) {
    std::memset(&proc_control_B.CovMat[i_1], 0, 34U * sizeof(real_T));
    i_1 += 34;
  }

  i_1 = 0;
  for (b_tmp = 0; b_tmp < 29; b_tmp++) {
    tmp = 0;
    for (i_0 = 0; i_0 < 34; i_0++) {
      for (int32_T i{0}; i < 34; i++) {
        int32_T CovMat_tmp;
        CovMat_tmp = i + tmp;
        proc_control_B.CovMat[CovMat_tmp] += proc_control_B.b_tmp[i + i_1] *
          proc_control_B.b_tmp[i_0 + i_1];
      }

      tmp += 34;
    }

    i_1 += 34;
  }

  i_1 = 0;
  i_0 = 0;
  for (int32_T i{0}; i < 21; i++) {
    std::memcpy(&QQ[i_1], &proc_control_B.CovMat[i_0], 21U * sizeof(real_T));
    i_1 += 21;
    i_0 += 34;
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    std::memcpy(&RR[i_1 * 13], &proc_control_B.CovMat[i_1 * 34 + 735], 13U *
                sizeof(real_T));
    std::memcpy(&NN[i_1 * 21], &proc_control_B.CovMat[i_1 * 34 + 714], 21U *
                sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S126>/MATLAB Function2'
boolean_T proc_control::proc_control_anyNonFinite(const real_T x[169])
{
  boolean_T b_p;
  b_p = true;
  for (int32_T k{0}; k < 169; k++) {
    real_T x_0;
    x_0 = x[k];
    if (b_p && (std::isinf(x_0) || std::isnan(x_0))) {
      b_p = false;
    }
  }

  return !b_p;
}

// Function for MATLAB Function: '<S126>/MATLAB Function2'
void proc_control::proc_control_mpower_k(const real_T a[169], real_T b, real_T
  c[169])
{
  proc_control_B.e_gd = std::abs(b);
  if (proc_control_B.e_gd <= 2.147483647E+9) {
    std::memcpy(&proc_control_B.b_a[0], &a[0], 169U * sizeof(real_T));
    proc_control_B.n_a = static_cast<int32_T>(proc_control_B.e_gd);
    proc_control_B.b_n_m = static_cast<int32_T>(proc_control_B.e_gd);
    proc_control_B.nbitson_b = 0;
    proc_control_B.nb_b = -2;
    while (proc_control_B.b_n_m > 0) {
      proc_control_B.nb_b++;
      if ((proc_control_B.b_n_m & 1U) != 0U) {
        proc_control_B.nbitson_b++;
      }

      proc_control_B.b_n_m >>= 1;
    }

    if (static_cast<int32_T>(proc_control_B.e_gd) <= 2) {
      if (b == 2.0) {
        for (proc_control_B.nbitson_b = 0; proc_control_B.nbitson_b < 13;
             proc_control_B.nbitson_b++) {
          std::memset(&c[proc_control_B.nbitson_b * 13], 0, 13U * sizeof(real_T));
          for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
               proc_control_B.i16++) {
            for (proc_control_B.i18 = 0; proc_control_B.i18 < 13;
                 proc_control_B.i18++) {
              proc_control_B.c_tmp_m = 13 * proc_control_B.nbitson_b +
                proc_control_B.i18;
              c[proc_control_B.c_tmp_m] += a[13 * proc_control_B.i16 +
                proc_control_B.i18] * a[13 * proc_control_B.nbitson_b +
                proc_control_B.i16];
            }
          }
        }
      } else {
        proc_control_B.firstmult_c = false;
        for (proc_control_B.n_a = 0; proc_control_B.n_a < 169;
             proc_control_B.n_a++) {
          if (!proc_control_B.firstmult_c) {
            proc_control_B.firstmult_c = std::isnan(a[proc_control_B.n_a]);
          }
        }

        if (proc_control_B.firstmult_c) {
          for (proc_control_B.nbitson_b = 0; proc_control_B.nbitson_b < 169;
               proc_control_B.nbitson_b++) {
            c[proc_control_B.nbitson_b] = (rtNaN);
          }
        } else {
          std::memset(&c[0], 0, 169U * sizeof(real_T));
          proc_control_B.b_n_m = 0;
          for (proc_control_B.n_a = 0; proc_control_B.n_a < 13;
               proc_control_B.n_a++) {
            c[proc_control_B.b_n_m] = 1.0;
            proc_control_B.b_n_m += 14;
          }
        }
      }
    } else {
      proc_control_B.firstmult_c = true;
      proc_control_B.aBufferInUse_a = false;
      proc_control_B.cBufferInUse_f = ((proc_control_B.nbitson_b & 1U) == 0U);
      while (proc_control_B.b_n_m <= proc_control_B.nb_b) {
        if ((proc_control_B.n_a & 1U) != 0U) {
          if (proc_control_B.firstmult_c) {
            proc_control_B.firstmult_c = false;
            if (proc_control_B.cBufferInUse_f) {
              if (proc_control_B.aBufferInUse_a) {
                std::memcpy(&proc_control_B.cBuffer_l[0],
                            &proc_control_B.aBuffer_h[0], 169U * sizeof(real_T));
              } else {
                std::memcpy(&proc_control_B.cBuffer_l[0], &proc_control_B.b_a[0],
                            169U * sizeof(real_T));
              }
            } else if (proc_control_B.aBufferInUse_a) {
              std::memcpy(&c[0], &proc_control_B.aBuffer_h[0], 169U * sizeof
                          (real_T));
            } else {
              std::memcpy(&c[0], &proc_control_B.b_a[0], 169U * sizeof(real_T));
            }
          } else {
            if (proc_control_B.aBufferInUse_a) {
              if (proc_control_B.cBufferInUse_f) {
                for (proc_control_B.nbitson_b = 0; proc_control_B.nbitson_b < 13;
                     proc_control_B.nbitson_b++) {
                  proc_control_B.i18 = 0;
                  for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                       proc_control_B.i16++) {
                    proc_control_B.c_tmp_m = proc_control_B.i18 +
                      proc_control_B.nbitson_b;
                    c[proc_control_B.c_tmp_m] = 0.0;
                    proc_control_B.i19 = 0;
                    for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
                         proc_control_B.i17++) {
                      c[proc_control_B.c_tmp_m] +=
                        proc_control_B.cBuffer_l[proc_control_B.i19 +
                        proc_control_B.nbitson_b] *
                        proc_control_B.aBuffer_h[proc_control_B.i17 +
                        proc_control_B.i18];
                      proc_control_B.i19 += 13;
                    }

                    proc_control_B.i18 += 13;
                  }
                }
              } else {
                for (proc_control_B.nbitson_b = 0; proc_control_B.nbitson_b < 13;
                     proc_control_B.nbitson_b++) {
                  proc_control_B.i18 = 0;
                  for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                       proc_control_B.i16++) {
                    proc_control_B.c_tmp_m = proc_control_B.i18 +
                      proc_control_B.nbitson_b;
                    proc_control_B.cBuffer_l[proc_control_B.c_tmp_m] = 0.0;
                    proc_control_B.i19 = 0;
                    for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
                         proc_control_B.i17++) {
                      proc_control_B.cBuffer_l[proc_control_B.c_tmp_m] +=
                        c[proc_control_B.i19 + proc_control_B.nbitson_b] *
                        proc_control_B.aBuffer_h[proc_control_B.i17 +
                        proc_control_B.i18];
                      proc_control_B.i19 += 13;
                    }

                    proc_control_B.i18 += 13;
                  }
                }
              }
            } else if (proc_control_B.cBufferInUse_f) {
              for (proc_control_B.nbitson_b = 0; proc_control_B.nbitson_b < 13;
                   proc_control_B.nbitson_b++) {
                proc_control_B.i18 = 0;
                for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                     proc_control_B.i16++) {
                  proc_control_B.c_tmp_m = proc_control_B.i18 +
                    proc_control_B.nbitson_b;
                  c[proc_control_B.c_tmp_m] = 0.0;
                  proc_control_B.i19 = 0;
                  for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
                       proc_control_B.i17++) {
                    c[proc_control_B.c_tmp_m] +=
                      proc_control_B.cBuffer_l[proc_control_B.i19 +
                      proc_control_B.nbitson_b] *
                      proc_control_B.b_a[proc_control_B.i17 + proc_control_B.i18];
                    proc_control_B.i19 += 13;
                  }

                  proc_control_B.i18 += 13;
                }
              }
            } else {
              for (proc_control_B.nbitson_b = 0; proc_control_B.nbitson_b < 13;
                   proc_control_B.nbitson_b++) {
                proc_control_B.i18 = 0;
                for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                     proc_control_B.i16++) {
                  proc_control_B.c_tmp_m = proc_control_B.i18 +
                    proc_control_B.nbitson_b;
                  proc_control_B.cBuffer_l[proc_control_B.c_tmp_m] = 0.0;
                  proc_control_B.i19 = 0;
                  for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
                       proc_control_B.i17++) {
                    proc_control_B.cBuffer_l[proc_control_B.c_tmp_m] +=
                      c[proc_control_B.i19 + proc_control_B.nbitson_b] *
                      proc_control_B.b_a[proc_control_B.i17 + proc_control_B.i18];
                    proc_control_B.i19 += 13;
                  }

                  proc_control_B.i18 += 13;
                }
              }
            }

            proc_control_B.cBufferInUse_f = !proc_control_B.cBufferInUse_f;
          }
        }

        proc_control_B.n_a >>= 1;
        if (proc_control_B.aBufferInUse_a) {
          for (proc_control_B.nbitson_b = 0; proc_control_B.nbitson_b < 13;
               proc_control_B.nbitson_b++) {
            proc_control_B.i18 = 0;
            for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                 proc_control_B.i16++) {
              proc_control_B.c_tmp_m = proc_control_B.i18 +
                proc_control_B.nbitson_b;
              proc_control_B.b_a[proc_control_B.c_tmp_m] = 0.0;
              proc_control_B.i19 = 0;
              for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
                   proc_control_B.i17++) {
                proc_control_B.b_a[proc_control_B.c_tmp_m] +=
                  proc_control_B.aBuffer_h[proc_control_B.i19 +
                  proc_control_B.nbitson_b] *
                  proc_control_B.aBuffer_h[proc_control_B.i17 +
                  proc_control_B.i18];
                proc_control_B.i19 += 13;
              }

              proc_control_B.i18 += 13;
            }
          }
        } else {
          for (proc_control_B.nbitson_b = 0; proc_control_B.nbitson_b < 13;
               proc_control_B.nbitson_b++) {
            proc_control_B.i18 = 0;
            for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                 proc_control_B.i16++) {
              proc_control_B.c_tmp_m = proc_control_B.i18 +
                proc_control_B.nbitson_b;
              proc_control_B.aBuffer_h[proc_control_B.c_tmp_m] = 0.0;
              proc_control_B.i19 = 0;
              for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
                   proc_control_B.i17++) {
                proc_control_B.aBuffer_h[proc_control_B.c_tmp_m] +=
                  proc_control_B.b_a[proc_control_B.i19 +
                  proc_control_B.nbitson_b] *
                  proc_control_B.b_a[proc_control_B.i17 + proc_control_B.i18];
                proc_control_B.i19 += 13;
              }

              proc_control_B.i18 += 13;
            }
          }
        }

        proc_control_B.aBufferInUse_a = !proc_control_B.aBufferInUse_a;
        proc_control_B.b_n_m++;
      }

      for (proc_control_B.nbitson_b = 0; proc_control_B.nbitson_b < 13;
           proc_control_B.nbitson_b++) {
        std::memset(&proc_control_B.cBuffer_m[proc_control_B.nbitson_b * 13], 0,
                    13U * sizeof(real_T));
        for (proc_control_B.i16 = 0; proc_control_B.i16 < 13; proc_control_B.i16
             ++) {
          for (proc_control_B.i18 = 0; proc_control_B.i18 < 13;
               proc_control_B.i18++) {
            proc_control_B.c_tmp_m = 13 * proc_control_B.nbitson_b +
              proc_control_B.i18;
            proc_control_B.cBuffer_m[proc_control_B.c_tmp_m] +=
              proc_control_B.cBuffer_l[13 * proc_control_B.i16 +
              proc_control_B.i18] * proc_control_B.aBuffer_h[13 *
              proc_control_B.nbitson_b + proc_control_B.i16];
          }
        }

        std::memset(&proc_control_B.cBuffer_mc[proc_control_B.nbitson_b * 13], 0,
                    13U * sizeof(real_T));
        for (proc_control_B.i16 = 0; proc_control_B.i16 < 13; proc_control_B.i16
             ++) {
          for (proc_control_B.i18 = 0; proc_control_B.i18 < 13;
               proc_control_B.i18++) {
            proc_control_B.c_tmp_m = 13 * proc_control_B.nbitson_b +
              proc_control_B.i18;
            proc_control_B.cBuffer_mc[proc_control_B.c_tmp_m] +=
              proc_control_B.cBuffer_l[13 * proc_control_B.i16 +
              proc_control_B.i18] * proc_control_B.b_a[13 *
              proc_control_B.nbitson_b + proc_control_B.i16];
          }
        }
      }

      for (proc_control_B.nbitson_b = 0; proc_control_B.nbitson_b < 169;
           proc_control_B.nbitson_b++) {
        if (proc_control_B.firstmult_c) {
          if (proc_control_B.aBufferInUse_a) {
            c[proc_control_B.nbitson_b] =
              proc_control_B.aBuffer_h[proc_control_B.nbitson_b];
          } else {
            c[proc_control_B.nbitson_b] =
              proc_control_B.b_a[proc_control_B.nbitson_b];
          }
        } else if (proc_control_B.aBufferInUse_a) {
          c[proc_control_B.nbitson_b] =
            proc_control_B.cBuffer_m[proc_control_B.nbitson_b];
        } else {
          c[proc_control_B.nbitson_b] =
            proc_control_B.cBuffer_mc[proc_control_B.nbitson_b];
        }
      }
    }
  } else {
    std::memcpy(&proc_control_B.b_a[0], &a[0], 169U * sizeof(real_T));
    if ((!std::isinf(b)) && (!std::isnan(b))) {
      proc_control_B.firstmult_c = true;
      int32_T exitg1;
      do {
        exitg1 = 0;
        proc_control_B.ed2_j = std::floor(proc_control_B.e_gd / 2.0);
        if (2.0 * proc_control_B.ed2_j != proc_control_B.e_gd) {
          if (proc_control_B.firstmult_c) {
            std::memcpy(&c[0], &proc_control_B.b_a[0], 169U * sizeof(real_T));
            proc_control_B.firstmult_c = false;
          } else {
            for (proc_control_B.nbitson_b = 0; proc_control_B.nbitson_b < 13;
                 proc_control_B.nbitson_b++) {
              proc_control_B.i18 = 0;
              for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                   proc_control_B.i16++) {
                proc_control_B.c_tmp_m = proc_control_B.i18 +
                  proc_control_B.nbitson_b;
                proc_control_B.cBuffer_l[proc_control_B.c_tmp_m] = 0.0;
                proc_control_B.i19 = 0;
                for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
                     proc_control_B.i17++) {
                  proc_control_B.cBuffer_l[proc_control_B.c_tmp_m] +=
                    c[proc_control_B.i19 + proc_control_B.nbitson_b] *
                    proc_control_B.b_a[proc_control_B.i17 + proc_control_B.i18];
                  proc_control_B.i19 += 13;
                }

                proc_control_B.i18 += 13;
              }
            }

            std::memcpy(&c[0], &proc_control_B.cBuffer_l[0], 169U * sizeof
                        (real_T));
          }
        }

        if (proc_control_B.ed2_j == 0.0) {
          exitg1 = 1;
        } else {
          proc_control_B.e_gd = proc_control_B.ed2_j;
          for (proc_control_B.nbitson_b = 0; proc_control_B.nbitson_b < 13;
               proc_control_B.nbitson_b++) {
            proc_control_B.i18 = 0;
            for (proc_control_B.i16 = 0; proc_control_B.i16 < 13;
                 proc_control_B.i16++) {
              proc_control_B.c_tmp_m = proc_control_B.i18 +
                proc_control_B.nbitson_b;
              proc_control_B.cBuffer_l[proc_control_B.c_tmp_m] = 0.0;
              proc_control_B.i19 = 0;
              for (proc_control_B.i17 = 0; proc_control_B.i17 < 13;
                   proc_control_B.i17++) {
                proc_control_B.cBuffer_l[proc_control_B.c_tmp_m] +=
                  proc_control_B.b_a[proc_control_B.i19 +
                  proc_control_B.nbitson_b] *
                  proc_control_B.b_a[proc_control_B.i17 + proc_control_B.i18];
                proc_control_B.i19 += 13;
              }

              proc_control_B.i18 += 13;
            }
          }

          std::memcpy(&proc_control_B.b_a[0], &proc_control_B.cBuffer_l[0], 169U
                      * sizeof(real_T));
        }
      } while (exitg1 == 0);
    } else {
      for (proc_control_B.nbitson_b = 0; proc_control_B.nbitson_b < 169;
           proc_control_B.nbitson_b++) {
        c[proc_control_B.nbitson_b] = (rtNaN);
      }
    }
  }
}

// Function for MATLAB Function: '<S126>/MATLAB Function2'
void proc_control::proc_padeApproximation_NWSCAcaS(const real_T A[169], const
  real_T A2[169], const real_T A4[169], const real_T A6[169], int32_T m, real_T
  F[169])
{
  switch (m) {
   case 3:
    std::memcpy(&F[0], &A2[0], 169U * sizeof(real_T));
    proc_control_B.e_k_n = 0;
    proc_control_B.iy_a = 0;
    for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++)
    {
      std::memset(&proc_control_B.A6_e[proc_control_B.iy_a], 0, 13U * sizeof
                  (real_T));
      F[proc_control_B.e_k_n] += 60.0;
      proc_control_B.e_k_n += 14;
      proc_control_B.iy_a += 13;
    }

    proc_control_B.e_k = 0;
    for (proc_control_B.e_k_n = 0; proc_control_B.e_k_n < 13;
         proc_control_B.e_k_n++) {
      proc_control_B.iy_a = 0;
      for (proc_control_B.c_ix = 0; proc_control_B.c_ix < 13;
           proc_control_B.c_ix++) {
        for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 13;
             proc_control_B.jj_e++) {
          proc_control_B.ix_c = proc_control_B.jj_e + proc_control_B.e_k;
          proc_control_B.A6_e[proc_control_B.ix_c] += A[proc_control_B.jj_e +
            proc_control_B.iy_a] * F[proc_control_B.c_ix + proc_control_B.e_k];
        }

        proc_control_B.iy_a += 13;
      }

      proc_control_B.e_k += 13;
    }

    for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 169; proc_control_B.jj_e
         ++) {
      F[proc_control_B.jj_e] = proc_control_B.A6_e[proc_control_B.jj_e];
      proc_control_B.V_j[proc_control_B.jj_e] = 12.0 * A2[proc_control_B.jj_e];
    }

    proc_control_B.d_l = 120.0;
    break;

   case 5:
    for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 169; proc_control_B.jj_e
         ++) {
      F[proc_control_B.jj_e] = 420.0 * A2[proc_control_B.jj_e] +
        A4[proc_control_B.jj_e];
    }

    proc_control_B.e_k_n = 0;
    proc_control_B.iy_a = 0;
    for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++)
    {
      std::memset(&proc_control_B.A6_e[proc_control_B.iy_a], 0, 13U * sizeof
                  (real_T));
      F[proc_control_B.e_k_n] += 15120.0;
      proc_control_B.e_k_n += 14;
      proc_control_B.iy_a += 13;
    }

    proc_control_B.e_k = 0;
    for (proc_control_B.e_k_n = 0; proc_control_B.e_k_n < 13;
         proc_control_B.e_k_n++) {
      proc_control_B.iy_a = 0;
      for (proc_control_B.c_ix = 0; proc_control_B.c_ix < 13;
           proc_control_B.c_ix++) {
        for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 13;
             proc_control_B.jj_e++) {
          proc_control_B.ix_c = proc_control_B.jj_e + proc_control_B.e_k;
          proc_control_B.A6_e[proc_control_B.ix_c] += A[proc_control_B.jj_e +
            proc_control_B.iy_a] * F[proc_control_B.c_ix + proc_control_B.e_k];
        }

        proc_control_B.iy_a += 13;
      }

      proc_control_B.e_k += 13;
    }

    for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 169; proc_control_B.jj_e
         ++) {
      F[proc_control_B.jj_e] = proc_control_B.A6_e[proc_control_B.jj_e];
      proc_control_B.V_j[proc_control_B.jj_e] = 30.0 * A4[proc_control_B.jj_e] +
        3360.0 * A2[proc_control_B.jj_e];
    }

    proc_control_B.d_l = 30240.0;
    break;

   case 7:
    for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 169; proc_control_B.jj_e
         ++) {
      F[proc_control_B.jj_e] = (1512.0 * A4[proc_control_B.jj_e] +
        A6[proc_control_B.jj_e]) + 277200.0 * A2[proc_control_B.jj_e];
    }

    proc_control_B.e_k_n = 0;
    proc_control_B.iy_a = 0;
    for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++)
    {
      std::memset(&proc_control_B.A6_e[proc_control_B.iy_a], 0, 13U * sizeof
                  (real_T));
      F[proc_control_B.e_k_n] += 8.64864E+6;
      proc_control_B.e_k_n += 14;
      proc_control_B.iy_a += 13;
    }

    proc_control_B.e_k = 0;
    for (proc_control_B.e_k_n = 0; proc_control_B.e_k_n < 13;
         proc_control_B.e_k_n++) {
      proc_control_B.iy_a = 0;
      for (proc_control_B.c_ix = 0; proc_control_B.c_ix < 13;
           proc_control_B.c_ix++) {
        for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 13;
             proc_control_B.jj_e++) {
          proc_control_B.ix_c = proc_control_B.jj_e + proc_control_B.e_k;
          proc_control_B.A6_e[proc_control_B.ix_c] += A[proc_control_B.jj_e +
            proc_control_B.iy_a] * F[proc_control_B.c_ix + proc_control_B.e_k];
        }

        proc_control_B.iy_a += 13;
      }

      proc_control_B.e_k += 13;
    }

    for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 169; proc_control_B.jj_e
         ++) {
      F[proc_control_B.jj_e] = proc_control_B.A6_e[proc_control_B.jj_e];
      proc_control_B.V_j[proc_control_B.jj_e] = (56.0 * A6[proc_control_B.jj_e]
        + 25200.0 * A4[proc_control_B.jj_e]) + 1.99584E+6 *
        A2[proc_control_B.jj_e];
    }

    proc_control_B.d_l = 1.729728E+7;
    break;

   case 9:
    for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 13; proc_control_B.jj_e
         ++) {
      std::memset(&proc_control_B.V_j[proc_control_B.jj_e * 13], 0, 13U * sizeof
                  (real_T));
      for (proc_control_B.e_k_n = 0; proc_control_B.e_k_n < 13;
           proc_control_B.e_k_n++) {
        for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k
             ++) {
          proc_control_B.iy_a = 13 * proc_control_B.jj_e + proc_control_B.e_k;
          proc_control_B.V_j[proc_control_B.iy_a] += A6[13 *
            proc_control_B.e_k_n + proc_control_B.e_k] * A2[13 *
            proc_control_B.jj_e + proc_control_B.e_k_n];
        }
      }
    }

    for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 169; proc_control_B.jj_e
         ++) {
      F[proc_control_B.jj_e] = ((3960.0 * A6[proc_control_B.jj_e] +
        proc_control_B.V_j[proc_control_B.jj_e]) + 2.16216E+6 *
        A4[proc_control_B.jj_e]) + 3.027024E+8 * A2[proc_control_B.jj_e];
    }

    proc_control_B.e_k_n = 0;
    proc_control_B.iy_a = 0;
    for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++)
    {
      std::memset(&proc_control_B.A6_e[proc_control_B.iy_a], 0, 13U * sizeof
                  (real_T));
      F[proc_control_B.e_k_n] += 8.8216128E+9;
      proc_control_B.e_k_n += 14;
      proc_control_B.iy_a += 13;
    }

    proc_control_B.e_k = 0;
    for (proc_control_B.e_k_n = 0; proc_control_B.e_k_n < 13;
         proc_control_B.e_k_n++) {
      proc_control_B.iy_a = 0;
      for (proc_control_B.c_ix = 0; proc_control_B.c_ix < 13;
           proc_control_B.c_ix++) {
        for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 13;
             proc_control_B.jj_e++) {
          proc_control_B.ix_c = proc_control_B.jj_e + proc_control_B.e_k;
          proc_control_B.A6_e[proc_control_B.ix_c] += A[proc_control_B.jj_e +
            proc_control_B.iy_a] * F[proc_control_B.c_ix + proc_control_B.e_k];
        }

        proc_control_B.iy_a += 13;
      }

      proc_control_B.e_k += 13;
    }

    for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 169; proc_control_B.jj_e
         ++) {
      F[proc_control_B.jj_e] = proc_control_B.A6_e[proc_control_B.jj_e];
      proc_control_B.V_j[proc_control_B.jj_e] = ((90.0 *
        proc_control_B.V_j[proc_control_B.jj_e] + 110880.0 *
        A6[proc_control_B.jj_e]) + 3.027024E+7 * A4[proc_control_B.jj_e]) +
        2.0756736E+9 * A2[proc_control_B.jj_e];
    }

    proc_control_B.d_l = 1.76432256E+10;
    break;

   default:
    for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 169; proc_control_B.jj_e
         ++) {
      F[proc_control_B.jj_e] = (3.352212864E+10 * A6[proc_control_B.jj_e] +
        1.05594705216E+13 * A4[proc_control_B.jj_e]) + 1.1873537964288E+15 *
        A2[proc_control_B.jj_e];
    }

    proc_control_B.e_k_n = 0;
    for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++)
    {
      F[proc_control_B.e_k_n] += 3.238237626624E+16;
      proc_control_B.e_k_n += 14;
    }

    for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 169; proc_control_B.jj_e
         ++) {
      proc_control_B.V_j[proc_control_B.jj_e] = (16380.0 *
        A4[proc_control_B.jj_e] + A6[proc_control_B.jj_e]) + 4.08408E+7 *
        A2[proc_control_B.jj_e];
    }

    for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 13; proc_control_B.jj_e
         ++) {
      proc_control_B.e_k = 0;
      for (proc_control_B.e_k_n = 0; proc_control_B.e_k_n < 13;
           proc_control_B.e_k_n++) {
        proc_control_B.d_l = 0.0;
        proc_control_B.iy_a = 0;
        for (proc_control_B.c_ix = 0; proc_control_B.c_ix < 13;
             proc_control_B.c_ix++) {
          proc_control_B.d_l += A6[proc_control_B.iy_a + proc_control_B.jj_e] *
            proc_control_B.V_j[proc_control_B.c_ix + proc_control_B.e_k];
          proc_control_B.iy_a += 13;
        }

        proc_control_B.iy_a = proc_control_B.e_k + proc_control_B.jj_e;
        proc_control_B.A6_e[proc_control_B.iy_a] = F[proc_control_B.iy_a] +
          proc_control_B.d_l;
        proc_control_B.e_k += 13;
      }
    }

    for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 13; proc_control_B.jj_e
         ++) {
      std::memset(&F[proc_control_B.jj_e * 13], 0, 13U * sizeof(real_T));
      for (proc_control_B.e_k_n = 0; proc_control_B.e_k_n < 13;
           proc_control_B.e_k_n++) {
        for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k
             ++) {
          proc_control_B.c_ix = 13 * proc_control_B.jj_e + proc_control_B.e_k;
          F[proc_control_B.c_ix] += A[13 * proc_control_B.e_k_n +
            proc_control_B.e_k] * proc_control_B.A6_e[13 * proc_control_B.jj_e +
            proc_control_B.e_k_n];
        }
      }
    }

    for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 169; proc_control_B.jj_e
         ++) {
      proc_control_B.A6_e[proc_control_B.jj_e] = (182.0 * A6[proc_control_B.jj_e]
        + 960960.0 * A4[proc_control_B.jj_e]) + 1.32324192E+9 *
        A2[proc_control_B.jj_e];
    }

    for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 13; proc_control_B.jj_e
         ++) {
      proc_control_B.e_k = 0;
      for (proc_control_B.e_k_n = 0; proc_control_B.e_k_n < 13;
           proc_control_B.e_k_n++) {
        proc_control_B.d_l = 0.0;
        proc_control_B.iy_a = 0;
        for (proc_control_B.c_ix = 0; proc_control_B.c_ix < 13;
             proc_control_B.c_ix++) {
          proc_control_B.d_l += A6[proc_control_B.iy_a + proc_control_B.jj_e] *
            proc_control_B.A6_e[proc_control_B.c_ix + proc_control_B.e_k];
          proc_control_B.iy_a += 13;
        }

        proc_control_B.iy_a = proc_control_B.e_k + proc_control_B.jj_e;
        proc_control_B.V_j[proc_control_B.iy_a] = ((A6[proc_control_B.iy_a] *
          6.704425728E+11 + proc_control_B.d_l) + A4[proc_control_B.iy_a] *
          1.29060195264E+14) + A2[proc_control_B.iy_a] * 7.7717703038976E+15;
        proc_control_B.e_k += 13;
      }
    }

    proc_control_B.d_l = 6.476475253248E+16;
    break;
  }

  proc_control_B.e_k_n = 0;
  for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++) {
    proc_control_B.V_j[proc_control_B.e_k_n] += proc_control_B.d_l;
    proc_control_B.e_k_n += 14;
  }

  for (proc_control_B.e_k = 0; proc_control_B.e_k < 169; proc_control_B.e_k++) {
    proc_control_B.V_j[proc_control_B.e_k] -= F[proc_control_B.e_k];
    F[proc_control_B.e_k] *= 2.0;
  }

  for (proc_control_B.jj_e = 0; proc_control_B.jj_e < 13; proc_control_B.jj_e++)
  {
    proc_control_B.ipiv[proc_control_B.jj_e] = static_cast<int8_T>
      (proc_control_B.jj_e + 1);
  }

  for (proc_control_B.e_k = 0; proc_control_B.e_k < 12; proc_control_B.e_k++) {
    proc_control_B.jj_e = proc_control_B.e_k * 14;
    proc_control_B.iy_a = 0;
    proc_control_B.ix_c = proc_control_B.jj_e;
    proc_control_B.d_l = std::abs(proc_control_B.V_j[proc_control_B.jj_e]);
    proc_control_B.e_k_n = 2;
    while (proc_control_B.e_k_n <= 13 - proc_control_B.e_k) {
      proc_control_B.ix_c++;
      proc_control_B.s_iy = std::abs(proc_control_B.V_j[proc_control_B.ix_c]);
      if (proc_control_B.s_iy > proc_control_B.d_l) {
        proc_control_B.iy_a = proc_control_B.e_k_n - 1;
        proc_control_B.d_l = proc_control_B.s_iy;
      }

      proc_control_B.e_k_n++;
    }

    if (proc_control_B.V_j[proc_control_B.jj_e + proc_control_B.iy_a] != 0.0) {
      if (proc_control_B.iy_a != 0) {
        proc_control_B.c_ix = proc_control_B.e_k + proc_control_B.iy_a;
        proc_control_B.ipiv[proc_control_B.e_k] = static_cast<int8_T>
          (proc_control_B.c_ix + 1);
        for (proc_control_B.e_k_n = 0; proc_control_B.e_k_n < 13;
             proc_control_B.e_k_n++) {
          proc_control_B.d_l = proc_control_B.V_j[proc_control_B.e_k_n * 13 +
            proc_control_B.e_k];
          proc_control_B.iy_a = proc_control_B.e_k_n * 13 + proc_control_B.c_ix;
          proc_control_B.V_j[proc_control_B.e_k + proc_control_B.e_k_n * 13] =
            proc_control_B.V_j[proc_control_B.iy_a];
          proc_control_B.V_j[proc_control_B.iy_a] = proc_control_B.d_l;
        }
      }

      proc_control_B.iy_a = (proc_control_B.jj_e - proc_control_B.e_k) + 13;
      proc_control_B.ix_c = proc_control_B.jj_e + 1;
      while (proc_control_B.ix_c + 1 <= proc_control_B.iy_a) {
        proc_control_B.V_j[proc_control_B.ix_c] /=
          proc_control_B.V_j[proc_control_B.jj_e];
        proc_control_B.ix_c++;
      }
    }

    proc_control_B.iy_a = proc_control_B.jj_e + 13;
    proc_control_B.ix_c = proc_control_B.jj_e;
    proc_control_B.e_k_n = 0;
    while (proc_control_B.e_k_n <= 11 - proc_control_B.e_k) {
      proc_control_B.d_l = proc_control_B.V_j[proc_control_B.iy_a];
      if (proc_control_B.V_j[proc_control_B.iy_a] != 0.0) {
        proc_control_B.c_ix = proc_control_B.jj_e + 1;
        proc_control_B.ijA_e = proc_control_B.ix_c + 14;
        proc_control_B.c_h = (proc_control_B.ix_c - proc_control_B.e_k) + 26;
        while (proc_control_B.ijA_e + 1 <= proc_control_B.c_h) {
          proc_control_B.V_j[proc_control_B.ijA_e] +=
            proc_control_B.V_j[proc_control_B.c_ix] * -proc_control_B.d_l;
          proc_control_B.c_ix++;
          proc_control_B.ijA_e++;
        }
      }

      proc_control_B.iy_a += 13;
      proc_control_B.ix_c += 13;
      proc_control_B.e_k_n++;
    }
  }

  for (proc_control_B.e_k = 0; proc_control_B.e_k < 12; proc_control_B.e_k++) {
    proc_control_B.ipiv_j = proc_control_B.ipiv[proc_control_B.e_k];
    if (proc_control_B.e_k + 1 != proc_control_B.ipiv_j) {
      for (proc_control_B.iy_a = 0; proc_control_B.iy_a < 13;
           proc_control_B.iy_a++) {
        proc_control_B.jj_e = 13 * proc_control_B.iy_a + proc_control_B.e_k;
        proc_control_B.d_l = F[proc_control_B.jj_e];
        proc_control_B.e_k_n = (13 * proc_control_B.iy_a + proc_control_B.ipiv_j)
          - 1;
        F[proc_control_B.jj_e] = F[proc_control_B.e_k_n];
        F[proc_control_B.e_k_n] = proc_control_B.d_l;
      }
    }
  }

  for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++) {
    proc_control_B.jj_e = 13 * proc_control_B.e_k;
    for (proc_control_B.iy_a = 0; proc_control_B.iy_a < 13; proc_control_B.iy_a
         ++) {
      proc_control_B.ix_c = 13 * proc_control_B.iy_a;
      if (F[proc_control_B.iy_a + proc_control_B.jj_e] != 0.0) {
        proc_control_B.e_k_n = proc_control_B.iy_a + 2;
        while (proc_control_B.e_k_n < 14) {
          proc_control_B.c_ix = (proc_control_B.e_k_n + proc_control_B.jj_e) - 1;
          F[proc_control_B.c_ix] -= proc_control_B.V_j[(proc_control_B.e_k_n +
            proc_control_B.ix_c) - 1] * F[proc_control_B.iy_a +
            proc_control_B.jj_e];
          proc_control_B.e_k_n++;
        }
      }
    }
  }

  for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++) {
    proc_control_B.jj_e = 13 * proc_control_B.e_k;
    for (proc_control_B.iy_a = 12; proc_control_B.iy_a >= 0; proc_control_B.iy_a
         --) {
      proc_control_B.ix_c = 13 * proc_control_B.iy_a;
      if (F[proc_control_B.iy_a + proc_control_B.jj_e] != 0.0) {
        proc_control_B.c_ix = proc_control_B.iy_a + proc_control_B.jj_e;
        F[proc_control_B.c_ix] /= proc_control_B.V_j[proc_control_B.iy_a +
          proc_control_B.ix_c];
        proc_control_B.e_k_n = 0;
        while (proc_control_B.e_k_n <= proc_control_B.iy_a - 1) {
          proc_control_B.c_ix = proc_control_B.e_k_n + proc_control_B.jj_e;
          F[proc_control_B.c_ix] -= F[proc_control_B.iy_a + proc_control_B.jj_e]
            * proc_control_B.V_j[proc_control_B.e_k_n + proc_control_B.ix_c];
          proc_control_B.e_k_n++;
        }
      }
    }
  }

  proc_control_B.e_k_n = 0;
  for (proc_control_B.e_k = 0; proc_control_B.e_k < 13; proc_control_B.e_k++) {
    F[proc_control_B.e_k_n]++;
    proc_control_B.e_k_n += 14;
  }
}

// Function for MATLAB Function: '<S126>/MATLAB Function2'
real_T proc_control::proc_control_xzlarfg_RGPUCK3Y(int32_T n, real_T *alpha1,
  real_T x[3])
{
  real_T tau;
  tau = 0.0;
  if (n > 0) {
    real_T xnorm;
    xnorm = xnrm2_yAJpxfog(n - 1, x);
    if (xnorm != 0.0) {
      xnorm = proc_control_rt_hypotd_snf(*alpha1, xnorm);
      if (*alpha1 >= 0.0) {
        xnorm = -xnorm;
      }

      if (std::abs(xnorm) < 1.0020841800044864E-292) {
        real_T a;
        int32_T knt;
        knt = 0;
        do {
          knt++;
          for (int32_T c_k{1}; c_k < n; c_k++) {
            x[c_k] *= 9.9792015476736E+291;
          }

          xnorm *= 9.9792015476736E+291;
          *alpha1 *= 9.9792015476736E+291;
        } while ((std::abs(xnorm) < 1.0020841800044864E-292) && (knt < 20));

        xnorm = proc_control_rt_hypotd_snf(*alpha1, xnrm2_yAJpxfog(n - 1, x));
        if (*alpha1 >= 0.0) {
          xnorm = -xnorm;
        }

        tau = (xnorm - *alpha1) / xnorm;
        a = 1.0 / (*alpha1 - xnorm);
        for (int32_T c_k{1}; c_k < n; c_k++) {
          x[c_k] *= a;
        }

        for (int32_T c_k{0}; c_k < knt; c_k++) {
          xnorm *= 1.0020841800044864E-292;
        }

        *alpha1 = xnorm;
      } else {
        real_T a;
        tau = (xnorm - *alpha1) / xnorm;
        a = 1.0 / (*alpha1 - xnorm);
        for (int32_T knt{1}; knt < n; knt++) {
          x[knt] *= a;
        }

        *alpha1 = xnorm;
      }
    }
  }

  return tau;
}

// Function for MATLAB Function: '<S126>/MATLAB Function2'
void proc_control::proc_control_xdlanv2_W63kZdPv(real_T *a, real_T *b, real_T *c,
  real_T *d, real_T *rt1r, real_T *rt1i, real_T *rt2r, real_T *rt2i, real_T *cs,
  real_T *sn)
{
  if (*c == 0.0) {
    *cs = 1.0;
    *sn = 0.0;
  } else if (*b == 0.0) {
    real_T temp;
    *cs = 0.0;
    *sn = 1.0;
    temp = *d;
    *d = *a;
    *a = temp;
    *b = -*c;
    *c = 0.0;
  } else {
    real_T temp;
    temp = *a - *d;
    if ((temp == 0.0) && ((*b < 0.0) != (*c < 0.0))) {
      *cs = 1.0;
      *sn = 0.0;
    } else {
      real_T bcmax;
      real_T bcmis;
      real_T p;
      real_T scale;
      real_T z;
      int32_T b_0;
      int32_T c_0;
      p = 0.5 * temp;
      bcmis = std::abs(*b);
      z = std::abs(*c);
      bcmax = std::fmax(bcmis, z);
      if (!(*b < 0.0)) {
        b_0 = 1;
      } else {
        b_0 = -1;
      }

      if (!(*c < 0.0)) {
        c_0 = 1;
      } else {
        c_0 = -1;
      }

      bcmis = std::fmin(bcmis, z) * static_cast<real_T>(b_0) *
        static_cast<real_T>(c_0);
      scale = std::fmax(std::abs(p), bcmax);
      z = p / scale * p + bcmax / scale * bcmis;
      if (z >= 8.8817841970012523E-16) {
        if (!(p < 0.0)) {
          z = std::sqrt(scale) * std::sqrt(z);
        } else {
          z = -(std::sqrt(scale) * std::sqrt(z));
        }

        z += p;
        *a = *d + z;
        *d -= bcmax / z * bcmis;
        bcmax = proc_control_rt_hypotd_snf(*c, z);
        *cs = z / bcmax;
        *sn = *c / bcmax;
        *b -= *c;
        *c = 0.0;
      } else {
        bcmis = *b + *c;
        bcmax = proc_control_rt_hypotd_snf(bcmis, temp);
        *cs = std::sqrt((std::abs(bcmis) / bcmax + 1.0) * 0.5);
        if (!(bcmis < 0.0)) {
          b_0 = 1;
        } else {
          b_0 = -1;
        }

        *sn = -(p / (bcmax * *cs)) * static_cast<real_T>(b_0);
        temp = *a * *cs + *b * *sn;
        p = -*a * *sn + *b * *cs;
        bcmax = *c * *cs + *d * *sn;
        bcmis = -*c * *sn + *d * *cs;
        *b = p * *cs + bcmis * *sn;
        *c = -temp * *sn + bcmax * *cs;
        temp = ((temp * *cs + bcmax * *sn) + (-p * *sn + bcmis * *cs)) * 0.5;
        *a = temp;
        *d = temp;
        if (*c != 0.0) {
          if (*b != 0.0) {
            if ((*b < 0.0) == (*c < 0.0)) {
              z = std::sqrt(std::abs(*b));
              bcmis = std::sqrt(std::abs(*c));
              p = z * bcmis;
              if (*c < 0.0) {
                p = -p;
              }

              bcmax = 1.0 / std::sqrt(std::abs(*b + *c));
              *a = temp + p;
              *d = temp - p;
              *b -= *c;
              *c = 0.0;
              p = z * bcmax;
              bcmax *= bcmis;
              temp = *cs * p - *sn * bcmax;
              *sn = *cs * bcmax + *sn * p;
              *cs = temp;
            }
          } else {
            *b = -*c;
            *c = 0.0;
            temp = *cs;
            *cs = -*sn;
            *sn = temp;
          }
        }
      }
    }
  }

  *rt1r = *a;
  *rt2r = *d;
  if (*c == 0.0) {
    *rt1i = 0.0;
    *rt2i = 0.0;
  } else {
    *rt1i = std::sqrt(std::abs(*b)) * std::sqrt(std::abs(*c));
    *rt2i = -*rt1i;
  }
}

// Function for MATLAB Function: '<S126>/MATLAB Function2'
int32_T proc_control::proc_contro_eml_dlahqr_HmsDpVfQ(real_T h[169], real_T z
  [169])
{
  real_T v[3];
  real_T a__4;
  real_T aa;
  real_T ab;
  real_T ba;
  real_T h12;
  real_T htmp1;
  real_T tst;
  real_T tst_tmp;
  real_T tst_tmp_tmp;
  int32_T L;
  int32_T i;
  int32_T info;
  boolean_T exitg1;
  info = 0;
  v[0] = 0.0;
  v[1] = 0.0;
  v[2] = 0.0;
  L = 0;
  for (i = 0; i < 10; i++) {
    h[L + 2] = 0.0;
    h[L + 3] = 0.0;
    L += 14;
  }

  h[142] = 0.0;
  i = 12;
  exitg1 = false;
  while ((!exitg1) && (i + 1 >= 1)) {
    int32_T ix;
    int32_T k;
    int32_T m;
    boolean_T exitg2;
    boolean_T goto150;
    L = 1;
    goto150 = false;
    ix = 0;
    exitg2 = false;
    while ((!exitg2) && (ix < 391)) {
      int32_T hoffset;
      int32_T nr;
      boolean_T exitg3;
      k = i;
      exitg3 = false;
      while ((!exitg3) && (k + 1 > L)) {
        hoffset = (k - 1) * 13 + k;
        if (std::abs(h[hoffset]) <= 1.3027094340058323E-291) {
          exitg3 = true;
        } else {
          nr = 13 * k + k;
          tst = std::abs(h[hoffset - 1]) + std::abs(h[nr]);
          if (tst == 0.0) {
            if (k - 1 >= 1) {
              tst = std::abs(h[((k - 2) * 13 + k) - 1]);
            }

            if (k + 2 <= 13) {
              tst += std::abs(h[nr + 1]);
            }
          }

          if (std::abs(h[hoffset]) <= 2.2204460492503131E-16 * tst) {
            htmp1 = std::abs(h[hoffset]);
            tst = std::abs(h[nr - 1]);
            if (htmp1 > tst) {
              ab = htmp1;
              ba = tst;
            } else {
              ab = tst;
              ba = htmp1;
            }

            tst = h[nr];
            htmp1 = std::abs(tst);
            tst = std::abs(h[hoffset - 1] - tst);
            if (htmp1 > tst) {
              aa = htmp1;
              htmp1 = tst;
            } else {
              aa = tst;
            }

            tst = aa + ab;
            if (ab / tst * ba <= std::fmax(1.3027094340058323E-291, aa / tst *
                 htmp1 * 2.2204460492503131E-16)) {
              exitg3 = true;
            } else {
              k--;
            }
          } else {
            k--;
          }
        }
      }

      L = k + 1;
      if (k + 1 > 1) {
        h[k + 13 * (k - 1)] = 0.0;
      }

      if (k + 1 >= i) {
        goto150 = true;
        exitg2 = true;
      } else {
        switch (ix) {
         case 10:
          nr = 13 * k + k;
          tst = std::abs(h[((k + 1) * 13 + k) + 2]) + std::abs(h[nr + 1]);
          ba = 0.75 * tst + h[nr];
          h12 = -0.4375 * tst;
          aa = tst;
          htmp1 = ba;
          break;

         case 20:
          tst = std::abs(h[((i - 2) * 13 + i) - 1]) + std::abs(h[(i - 1) * 13 +
            i]);
          ba = h[13 * i + i] + 0.75 * tst;
          h12 = -0.4375 * tst;
          aa = tst;
          htmp1 = ba;
          break;

         default:
          m = (i - 1) * 13 + i;
          ba = h[m - 1];
          aa = h[m];
          h12 = h[(13 * i + i) - 1];
          htmp1 = h[13 * i + i];
          break;
        }

        tst = ((std::abs(ba) + std::abs(h12)) + std::abs(aa)) + std::abs(htmp1);
        if (tst == 0.0) {
          ba = 0.0;
          htmp1 = 0.0;
          ab = 0.0;
          aa = 0.0;
        } else {
          ba /= tst;
          htmp1 /= tst;
          ab = (ba + htmp1) / 2.0;
          ba = (ba - ab) * (htmp1 - ab) - h12 / tst * (aa / tst);
          aa = std::sqrt(std::abs(ba));
          if (ba >= 0.0) {
            ba = ab * tst;
            ab = ba;
            htmp1 = aa * tst;
            aa = -htmp1;
          } else {
            ba = ab + aa;
            ab -= aa;
            if (std::abs(ba - htmp1) <= std::abs(ab - htmp1)) {
              ba *= tst;
              ab = ba;
            } else {
              ab *= tst;
              ba = ab;
            }

            htmp1 = 0.0;
            aa = 0.0;
          }
        }

        m = i - 1;
        exitg3 = false;
        while ((!exitg3) && (m >= k + 1)) {
          nr = (m - 1) * 13 + m;
          h12 = h[nr];
          tst_tmp_tmp = h[nr - 1];
          tst_tmp = tst_tmp_tmp - ab;
          tst = (std::abs(tst_tmp) + std::abs(aa)) + std::abs(h12);
          h12 /= tst;
          nr = 13 * m + m;
          v[0] = (tst_tmp / tst * (tst_tmp_tmp - ba) + h[nr - 1] * h12) - aa /
            tst * htmp1;
          tst_tmp = h[nr];
          v[1] = (((tst_tmp_tmp + tst_tmp) - ba) - ab) * h12;
          v[2] = h[nr + 1] * h12;
          tst = (std::abs(v[0]) + std::abs(v[1])) + std::abs(v[2]);
          v[0] /= tst;
          v[1] /= tst;
          v[2] /= tst;
          if (k + 1 == m) {
            exitg3 = true;
          } else {
            hoffset = (m - 2) * 13 + m;
            if (std::abs(h[hoffset - 1]) * (std::abs(v[1]) + std::abs(v[2])) <=
                ((std::abs(h[hoffset - 2]) + std::abs(tst_tmp_tmp)) + std::abs
                 (tst_tmp)) * (2.2204460492503131E-16 * std::abs(v[0]))) {
              exitg3 = true;
            } else {
              m--;
            }
          }
        }

        for (int32_T b_k{m}; b_k <= i; b_k++) {
          int32_T b_j;
          nr = (i - b_k) + 2;
          if (nr >= 3) {
            nr = 3;
          }

          if (b_k > m) {
            hoffset = (b_k - 2) * 13 + b_k;
            for (b_j = 0; b_j < nr; b_j++) {
              v[b_j] = h[(b_j + hoffset) - 1];
            }
          }

          htmp1 = v[0];
          tst = proc_control_xzlarfg_RGPUCK3Y(nr, &htmp1, v);
          v[0] = htmp1;
          if (b_k > m) {
            h[(b_k + 13 * (b_k - 2)) - 1] = htmp1;
            h[b_k + 13 * (b_k - 2)] = 0.0;
            if (b_k < i) {
              h[(b_k + 13 * (b_k - 2)) + 1] = 0.0;
            }
          } else if (m > k + 1) {
            hoffset = ((b_k - 2) * 13 + b_k) - 1;
            h[hoffset] *= 1.0 - tst;
          }

          htmp1 = v[1];
          ab = tst * v[1];
          switch (nr) {
           case 3:
            {
              int32_T h12_tmp;
              int32_T h12_tmp_0;
              ba = v[2];
              aa = tst * v[2];
              for (nr = b_k - 1; nr + 1 < 14; nr++) {
                b_j = 13 * nr + b_k;
                h12 = (h[b_j - 1] + h[b_j] * htmp1) + h[b_j + 1] * ba;
                h[b_j - 1] -= h12 * tst;
                h[b_j] -= h12 * ab;
                h[b_j + 1] -= h12 * aa;
              }

              if (b_k + 3 <= i + 1) {
                nr = b_k + 3;
              } else {
                nr = i + 1;
              }

              for (hoffset = 0; hoffset < nr; hoffset++) {
                b_j = (b_k - 1) * 13 + hoffset;
                h12_tmp = 13 * b_k + hoffset;
                h12_tmp_0 = (b_k + 1) * 13 + hoffset;
                h12 = (h[h12_tmp] * htmp1 + h[b_j]) + h[h12_tmp_0] * ba;
                h[b_j] -= h12 * tst;
                h[h12_tmp] -= h12 * ab;
                h[h12_tmp_0] -= h12 * aa;
              }

              for (nr = 0; nr < 13; nr++) {
                b_j = (b_k - 1) * 13 + nr;
                h12_tmp = 13 * b_k + nr;
                h12_tmp_0 = (b_k + 1) * 13 + nr;
                h12 = (z[h12_tmp] * htmp1 + z[b_j]) + z[h12_tmp_0] * ba;
                z[b_j] -= h12 * tst;
                z[h12_tmp] -= h12 * ab;
                z[h12_tmp_0] -= h12 * aa;
              }
            }
            break;

           case 2:
            {
              for (nr = b_k - 1; nr + 1 < 14; nr++) {
                b_j = 13 * nr + b_k;
                ba = h[b_j - 1];
                h12 = h[b_j] * htmp1 + ba;
                h[b_j - 1] = ba - h12 * tst;
                h[b_j] -= h12 * ab;
              }

              for (nr = 0; nr <= i; nr++) {
                int32_T h12_tmp;
                b_j = (b_k - 1) * 13 + nr;
                h12_tmp = 13 * b_k + nr;
                h12 = h[h12_tmp] * htmp1 + h[b_j];
                h[b_j] -= h12 * tst;
                h[h12_tmp] -= h12 * ab;
              }

              for (nr = 0; nr < 13; nr++) {
                b_j = (b_k - 1) * 13;
                h12 = z[13 * b_k + nr] * htmp1 + z[b_j + nr];
                hoffset = b_j + nr;
                z[hoffset] -= h12 * tst;
                hoffset = 13 * b_k + nr;
                z[hoffset] -= h12 * ab;
              }
            }
            break;
          }
        }

        ix++;
      }
    }

    if (!goto150) {
      info = i + 1;
      exitg1 = true;
    } else {
      if ((i + 1 != L) && (L == i)) {
        ix = 13 * i + i;
        ab = h[ix - 1];
        m = (i - 1) * 13 + i;
        ba = h[m];
        aa = h[ix];
        proc_control_xdlanv2_W63kZdPv(&h[(i + 13 * (i - 1)) - 1], &ab, &ba, &aa,
          &h12, &tst_tmp_tmp, &tst_tmp, &a__4, &tst, &htmp1);
        h[ix - 1] = ab;
        h[m] = ba;
        h[ix] = aa;
        if (i + 1 < 13) {
          k = (i + 1) * 13 + i;
          ix = k - 1;
          for (m = 0; m <= 11 - i; m++) {
            ab = tst * h[ix] + htmp1 * h[k];
            h[k] = tst * h[k] - htmp1 * h[ix];
            h[ix] = ab;
            k += 13;
            ix += 13;
          }
        }

        xrot_3pYuG0oG(i - 1, h, (i - 1) * 13 + 1, i * 13 + 1, tst, htmp1);
        xrot_yqSjxpUW(z, (i - 1) * 13 + 1, i * 13 + 1, tst, htmp1);
      }

      i = L - 2;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S126>/MATLAB Function2'
void proc_control::proc_control_schur_o(const real_T A[169], real_T V[169],
  real_T T[169])
{
  real_T work[13];
  real_T tau[12];
  if (proc_control_anyNonFinite(A)) {
    int32_T i;
    for (i = 0; i < 169; i++) {
      V[i] = (rtNaN);
    }

    i = 2;
    for (int32_T im1n{0}; im1n < 12; im1n++) {
      for (int32_T in{i}; in < 14; in++) {
        V[(in + 13 * im1n) - 1] = 0.0;
      }

      i++;
    }

    for (i = 0; i < 169; i++) {
      T[i] = (rtNaN);
    }
  } else {
    int32_T i;
    int32_T im1n;
    int32_T in;
    int32_T knt;
    int32_T lastc;
    std::memcpy(&T[0], &A[0], 169U * sizeof(real_T));
    std::memset(&work[0], 0, 13U * sizeof(real_T));
    for (i = 0; i < 12; i++) {
      real_T alpha1_tmp_0;
      real_T beta1;
      int32_T alpha1_tmp;
      int32_T jy;
      int32_T rowleft;
      im1n = i * 13 + 2;
      in = (i + 1) * 13;
      alpha1_tmp = (13 * i + i) + 1;
      alpha1_tmp_0 = T[alpha1_tmp];
      if (i + 3 <= 13) {
        lastc = i + 3;
      } else {
        lastc = 13;
      }

      lastc += i * 13;
      tau[i] = 0.0;
      beta1 = xnrm2_vEpa8zuo(11 - i, T, lastc);
      if (beta1 != 0.0) {
        beta1 = proc_control_rt_hypotd_snf(alpha1_tmp_0, beta1);
        if (alpha1_tmp_0 >= 0.0) {
          beta1 = -beta1;
        }

        if (std::abs(beta1) < 1.0020841800044864E-292) {
          knt = 0;
          jy = (lastc - i) + 10;
          do {
            knt++;
            for (rowleft = lastc; rowleft <= jy; rowleft++) {
              T[rowleft - 1] *= 9.9792015476736E+291;
            }

            beta1 *= 9.9792015476736E+291;
            alpha1_tmp_0 *= 9.9792015476736E+291;
          } while ((std::abs(beta1) < 1.0020841800044864E-292) && (knt < 20));

          beta1 = proc_control_rt_hypotd_snf(alpha1_tmp_0, xnrm2_vEpa8zuo(11 - i,
            T, lastc));
          if (alpha1_tmp_0 >= 0.0) {
            beta1 = -beta1;
          }

          tau[i] = (beta1 - alpha1_tmp_0) / beta1;
          alpha1_tmp_0 = 1.0 / (alpha1_tmp_0 - beta1);
          jy = (lastc - i) + 10;
          while (lastc <= jy) {
            T[lastc - 1] *= alpha1_tmp_0;
            lastc++;
          }

          for (lastc = 0; lastc < knt; lastc++) {
            beta1 *= 1.0020841800044864E-292;
          }

          alpha1_tmp_0 = beta1;
        } else {
          alpha1_tmp_0 = T[(13 * i + i) + 1];
          tau[i] = (beta1 - alpha1_tmp_0) / beta1;
          alpha1_tmp_0 = 1.0 / (alpha1_tmp_0 - beta1);
          knt = (lastc - i) + 10;
          while (lastc <= knt) {
            T[lastc - 1] *= alpha1_tmp_0;
            lastc++;
          }

          alpha1_tmp_0 = beta1;
        }
      }

      T[alpha1_tmp] = 1.0;
      jy = (i + im1n) - 1;
      if (tau[i] != 0.0) {
        boolean_T exitg2;
        knt = 11 - i;
        lastc = (jy - i) + 11;
        while ((knt + 1 > 0) && (T[lastc] == 0.0)) {
          knt--;
          lastc--;
        }

        lastc = 13;
        exitg2 = false;
        while ((!exitg2) && (lastc > 0)) {
          int32_T exitg1;
          rowleft = in + lastc;
          alpha1_tmp = rowleft;
          do {
            exitg1 = 0;
            if (alpha1_tmp <= knt * 13 + rowleft) {
              if (T[alpha1_tmp - 1] != 0.0) {
                exitg1 = 1;
              } else {
                alpha1_tmp += 13;
              }
            } else {
              lastc--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        knt = -1;
        lastc = 0;
      }

      if (knt + 1 > 0) {
        int32_T b_ix;
        int32_T g;
        int32_T iy;
        if (lastc != 0) {
          for (rowleft = 0; rowleft < lastc; rowleft++) {
            work[rowleft] = 0.0;
          }

          rowleft = jy;
          alpha1_tmp = (13 * knt + in) + 1;
          for (b_ix = in + 1; b_ix <= alpha1_tmp; b_ix += 13) {
            iy = 0;
            g = (b_ix + lastc) - 1;
            for (int32_T b_ia{b_ix}; b_ia <= g; b_ia++) {
              work[iy] += T[b_ia - 1] * T[rowleft];
              iy++;
            }

            rowleft++;
          }
        }

        if (!(-tau[i] == 0.0)) {
          rowleft = in;
          for (alpha1_tmp = 0; alpha1_tmp <= knt; alpha1_tmp++) {
            if (T[jy] != 0.0) {
              beta1 = T[jy] * -tau[i];
              b_ix = 0;
              iy = rowleft;
              g = lastc + rowleft;
              while (iy + 1 <= g) {
                T[iy] += work[b_ix] * beta1;
                b_ix++;
                iy++;
              }
            }

            jy++;
            rowleft += 13;
          }
        }
      }

      xzlarf_2N2eIztg(12 - i, 12 - i, i + im1n, tau[i], T, (i + in) + 2, work);
      T[(i + 13 * i) + 1] = alpha1_tmp_0;
    }

    std::memcpy(&V[0], &T[0], 169U * sizeof(real_T));
    for (i = 11; i >= 0; i--) {
      im1n = (i + 1) * 13;
      for (in = 0; in <= i; in++) {
        V[im1n + in] = 0.0;
      }

      for (in = i; in + 3 < 14; in++) {
        lastc = im1n + in;
        V[lastc + 2] = V[lastc - 11];
      }
    }

    std::memset(&V[0], 0, 13U * sizeof(real_T));
    std::memset(&work[0], 0, 13U * sizeof(real_T));
    V[0] = 1.0;
    for (im1n = 11; im1n >= 0; im1n--) {
      in = (im1n * 13 + im1n) + 14;
      if (im1n + 1 < 12) {
        V[in] = 1.0;
        xzlarf_2N2eIztg(12 - im1n, 11 - im1n, in + 1, tau[im1n], V, in + 14,
                        work);
        knt = (in - im1n) + 12;
        for (lastc = in + 1; lastc < knt; lastc++) {
          V[lastc] *= -tau[im1n];
        }
      }

      V[in] = 1.0 - tau[im1n];
      for (knt = 0; knt < im1n; knt++) {
        V[(in - knt) - 1] = 0.0;
      }
    }

    proc_contro_eml_dlahqr_HmsDpVfQ(T, V);
    i = 4;
    for (im1n = 0; im1n < 10; im1n++) {
      for (in = i; in < 14; in++) {
        T[(in + 13 * im1n) - 1] = 0.0;
      }

      i++;
    }
  }
}

// Function for MATLAB Function: '<S126>/MATLAB Function2'
void proc_control::proc_control_expm_m(real_T A[169], real_T F[169])
{
  if (proc_control_anyNonFinite(A)) {
    for (proc_control_B.e_i = 0; proc_control_B.e_i < 169; proc_control_B.e_i++)
    {
      F[proc_control_B.e_i] = (rtNaN);
    }
  } else {
    int32_T exitg1;
    boolean_T exitg2;
    proc_control_B.recomputeDiags_g = true;
    proc_control_B.e_j = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.e_j < 13)) {
      proc_control_B.e_i = 0;
      do {
        exitg1 = 0;
        if (proc_control_B.e_i < 13) {
          if ((proc_control_B.e_i != proc_control_B.e_j) && (!(A[13 *
                proc_control_B.e_j + proc_control_B.e_i] == 0.0))) {
            proc_control_B.recomputeDiags_g = false;
            exitg1 = 1;
          } else {
            proc_control_B.e_i++;
          }
        } else {
          proc_control_B.e_j++;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    if (proc_control_B.recomputeDiags_g) {
      std::memset(&F[0], 0, 169U * sizeof(real_T));
      proc_control_B.e_i = 0;
      for (proc_control_B.b_s = 0; proc_control_B.b_s < 13; proc_control_B.b_s++)
      {
        F[proc_control_B.e_i] = std::exp(A[proc_control_B.e_i]);
        proc_control_B.e_i += 14;
      }
    } else {
      proc_control_B.recomputeDiags_g = true;
      proc_control_B.e_j = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.e_j < 13)) {
        proc_control_B.e_i = 0;
        do {
          exitg1 = 0;
          if (proc_control_B.e_i <= proc_control_B.e_j) {
            if (!(A[13 * proc_control_B.e_j + proc_control_B.e_i] == A[13 *
                  proc_control_B.e_i + proc_control_B.e_j])) {
              proc_control_B.recomputeDiags_g = false;
              exitg1 = 1;
            } else {
              proc_control_B.e_i++;
            }
          } else {
            proc_control_B.e_j++;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }

      if (proc_control_B.recomputeDiags_g) {
        proc_control_schur_o(A, proc_control_B.A2, proc_control_B.A4_h);
        proc_control_B.e_i = 0;
        proc_control_B.b_s_o = 0;
        for (proc_control_B.b_s = 0; proc_control_B.b_s < 13; proc_control_B.b_s
             ++) {
          proc_control_B.exptj_d = std::exp
            (proc_control_B.A4_h[proc_control_B.e_i]);
          for (proc_control_B.e_j = 0; proc_control_B.e_j < 13;
               proc_control_B.e_j++) {
            proc_control_B.A2_tmp = proc_control_B.e_j + proc_control_B.b_s_o;
            proc_control_B.A4[proc_control_B.A2_tmp] =
              proc_control_B.A2[proc_control_B.A2_tmp] * proc_control_B.exptj_d;
            F[proc_control_B.A2_tmp] = 0.0;
          }

          proc_control_B.e_i += 14;
          proc_control_B.b_s_o += 13;
        }

        proc_control_B.e_i = 0;
        for (proc_control_B.b_s_o = 0; proc_control_B.b_s_o < 13;
             proc_control_B.b_s_o++) {
          proc_control_B.e_j = 0;
          for (proc_control_B.A2_tmp = 0; proc_control_B.A2_tmp < 13;
               proc_control_B.A2_tmp++) {
            for (proc_control_B.i15 = 0; proc_control_B.i15 < 13;
                 proc_control_B.i15++) {
              proc_control_B.A4_tmp = proc_control_B.i15 + proc_control_B.e_j;
              F[proc_control_B.A4_tmp] += proc_control_B.A4[proc_control_B.i15 +
                proc_control_B.e_i] * proc_control_B.A2[proc_control_B.A2_tmp +
                proc_control_B.e_i];
            }

            proc_control_B.e_j += 13;
          }

          proc_control_B.e_i += 13;
        }

        proc_control_B.e_i = 0;
        for (proc_control_B.b_s_o = 0; proc_control_B.b_s_o < 13;
             proc_control_B.b_s_o++) {
          proc_control_B.e_j = 0;
          for (proc_control_B.A2_tmp = 0; proc_control_B.A2_tmp < 13;
               proc_control_B.A2_tmp++) {
            proc_control_B.A4_tmp = proc_control_B.A2_tmp + proc_control_B.e_i;
            proc_control_B.A2[proc_control_B.A4_tmp] = (F[proc_control_B.e_j +
              proc_control_B.b_s_o] + F[proc_control_B.A4_tmp]) / 2.0;
            proc_control_B.e_j += 13;
          }

          proc_control_B.e_i += 13;
        }

        std::memcpy(&F[0], &proc_control_B.A2[0], 169U * sizeof(real_T));
      } else {
        boolean_T guard1{ false };

        boolean_T guard2{ false };

        boolean_T guard3{ false };

        boolean_T guard4{ false };

        proc_control_B.recomputeDiags_g = true;
        proc_control_B.e_j = 3;
        while (proc_control_B.recomputeDiags_g && (proc_control_B.e_j <= 13)) {
          proc_control_B.e_i = proc_control_B.e_j;
          while (proc_control_B.recomputeDiags_g && (proc_control_B.e_i <= 13))
          {
            proc_control_B.recomputeDiags_g = (A[((proc_control_B.e_j - 3) * 13
              + proc_control_B.e_i) - 1] == 0.0);
            proc_control_B.e_i++;
          }

          proc_control_B.e_j++;
        }

        if (proc_control_B.recomputeDiags_g) {
          proc_control_B.e_j = 1;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.e_j - 1 < 12)) {
            proc_control_B.e_i = (proc_control_B.e_j - 1) * 13 +
              proc_control_B.e_j;
            proc_control_B.exptj_d = A[proc_control_B.e_i];
            if (proc_control_B.exptj_d != 0.0) {
              if ((proc_control_B.e_j != 12) && (A[(13 * proc_control_B.e_j +
                    proc_control_B.e_j) + 1] != 0.0)) {
                proc_control_B.recomputeDiags_g = false;
                exitg2 = true;
              } else {
                proc_control_B.b_s_o = 13 * proc_control_B.e_j +
                  proc_control_B.e_j;
                if (A[proc_control_B.e_i - 1] != A[proc_control_B.b_s_o]) {
                  proc_control_B.recomputeDiags_g = false;
                  exitg2 = true;
                } else {
                  proc_control_B.d6_mq = A[proc_control_B.b_s_o - 1];
                  if (!std::isnan(proc_control_B.exptj_d)) {
                    if (proc_control_B.exptj_d < 0.0) {
                      proc_control_B.exptj_d = -1.0;
                    } else {
                      proc_control_B.exptj_d = (proc_control_B.exptj_d > 0.0);
                    }
                  }

                  if (!std::isnan(proc_control_B.d6_mq)) {
                    if (proc_control_B.d6_mq < 0.0) {
                      proc_control_B.d6_mq = -1.0;
                    } else {
                      proc_control_B.d6_mq = (proc_control_B.d6_mq > 0.0);
                    }
                  }

                  if (proc_control_B.exptj_d * proc_control_B.d6_mq != -1.0) {
                    proc_control_B.recomputeDiags_g = false;
                    exitg2 = true;
                  } else {
                    proc_control_B.e_j++;
                  }
                }
              }
            } else {
              proc_control_B.e_j++;
            }
          }
        }

        proc_control_B.exptj_d = 0.0;
        for (proc_control_B.e_i = 0; proc_control_B.e_i < 13; proc_control_B.e_i
             ++) {
          std::memset(&proc_control_B.A2[proc_control_B.e_i * 13], 0, 13U *
                      sizeof(real_T));
          for (proc_control_B.e_j = 0; proc_control_B.e_j < 13;
               proc_control_B.e_j++) {
            for (proc_control_B.b_s_o = 0; proc_control_B.b_s_o < 13;
                 proc_control_B.b_s_o++) {
              proc_control_B.A2_tmp = 13 * proc_control_B.e_i +
                proc_control_B.b_s_o;
              proc_control_B.A2[proc_control_B.A2_tmp] += A[13 *
                proc_control_B.e_j + proc_control_B.b_s_o] * A[13 *
                proc_control_B.e_i + proc_control_B.e_j];
            }
          }

          std::memset(&proc_control_B.A4[proc_control_B.e_i * 13], 0, 13U *
                      sizeof(real_T));
        }

        proc_control_B.e_i = 0;
        for (proc_control_B.e_j = 0; proc_control_B.e_j < 13; proc_control_B.e_j
             ++) {
          proc_control_B.A2_tmp = 0;
          for (proc_control_B.i15 = 0; proc_control_B.i15 < 13;
               proc_control_B.i15++) {
            for (proc_control_B.b_s_o = 0; proc_control_B.b_s_o < 13;
                 proc_control_B.b_s_o++) {
              proc_control_B.A4_tmp = proc_control_B.b_s_o + proc_control_B.e_i;
              proc_control_B.A4[proc_control_B.A4_tmp] +=
                proc_control_B.A2[proc_control_B.b_s_o + proc_control_B.A2_tmp] *
                proc_control_B.A2[proc_control_B.i15 + proc_control_B.e_i];
            }

            proc_control_B.A6[proc_control_B.i15 + proc_control_B.e_i] = 0.0;
            proc_control_B.A2_tmp += 13;
          }

          proc_control_B.e_i += 13;
        }

        proc_control_B.e_i = 0;
        for (proc_control_B.b_s_o = 0; proc_control_B.b_s_o < 13;
             proc_control_B.b_s_o++) {
          proc_control_B.e_j = 0;
          for (proc_control_B.A2_tmp = 0; proc_control_B.A2_tmp < 13;
               proc_control_B.A2_tmp++) {
            for (proc_control_B.i15 = 0; proc_control_B.i15 < 13;
                 proc_control_B.i15++) {
              proc_control_B.A4_tmp = proc_control_B.i15 + proc_control_B.e_i;
              proc_control_B.A6[proc_control_B.A4_tmp] +=
                proc_control_B.A4[proc_control_B.i15 + proc_control_B.e_j] *
                proc_control_B.A2[proc_control_B.A2_tmp + proc_control_B.e_i];
            }

            proc_control_B.e_j += 13;
          }

          proc_control_B.e_i += 13;
        }

        proc_control_B.d6_mq = rt_powd_snf(norm_GdpreYkZ(proc_control_B.A6),
          0.16666666666666666);
        proc_control_B.eta1_f = std::fmax(rt_powd_snf(norm_GdpreYkZ
          (proc_control_B.A4), 0.25), proc_control_B.d6_mq);
        guard1 = false;
        guard2 = false;
        guard3 = false;
        guard4 = false;
        if (proc_control_B.eta1_f <= 0.01495585217958292) {
          for (proc_control_B.e_j = 0; proc_control_B.e_j < 169;
               proc_control_B.e_j++) {
            proc_control_B.dv5[proc_control_B.e_j] = 0.19285012468241128 * std::
              abs(A[proc_control_B.e_j]);
          }

          proc_control_mpower_k(proc_control_B.dv5, 7.0, proc_control_B.dv6);
          proc_control_B.b_varargin_1 = log2_blLsPIAE(norm_GdpreYkZ
            (proc_control_B.dv6) / norm_GdpreYkZ(A) * 2.0 /
            2.2204460492503131E-16) / 6.0;
          if (std::fmax(std::ceil(proc_control_B.b_varargin_1), 0.0) == 0.0) {
            proc_control_B.b_s = 3;
          } else {
            guard4 = true;
          }
        } else {
          guard4 = true;
        }

        if (guard4) {
          if (proc_control_B.eta1_f <= 0.253939833006323) {
            for (proc_control_B.e_j = 0; proc_control_B.e_j < 169;
                 proc_control_B.e_j++) {
              proc_control_B.dv5[proc_control_B.e_j] = 0.12321872304378752 * std::
                abs(A[proc_control_B.e_j]);
            }

            proc_control_mpower_k(proc_control_B.dv5, 11.0, proc_control_B.dv6);
            proc_control_B.eta1_f = log2_blLsPIAE(norm_GdpreYkZ
              (proc_control_B.dv6) / norm_GdpreYkZ(A) * 2.0 /
              2.2204460492503131E-16) / 10.0;
            if (std::fmax(std::ceil(proc_control_B.eta1_f), 0.0) == 0.0) {
              proc_control_B.b_s = 5;
            } else {
              guard3 = true;
            }
          } else {
            guard3 = true;
          }
        }

        if (guard3) {
          proc_control_mpower_k(proc_control_B.A4, 2.0, proc_control_B.dv5);
          proc_control_B.eta1_f = rt_powd_snf(norm_GdpreYkZ(proc_control_B.dv5),
            0.125);
          proc_control_B.d6_mq = std::fmax(proc_control_B.d6_mq,
            proc_control_B.eta1_f);
          if (proc_control_B.d6_mq <= 0.95041789961629319) {
            for (proc_control_B.e_j = 0; proc_control_B.e_j < 169;
                 proc_control_B.e_j++) {
              proc_control_B.dv5[proc_control_B.e_j] = 0.090475336558796943 *
                std::abs(A[proc_control_B.e_j]);
            }

            proc_control_mpower_k(proc_control_B.dv5, 15.0, proc_control_B.dv6);
            proc_control_B.b_varargin_1 = log2_blLsPIAE(norm_GdpreYkZ
              (proc_control_B.dv6) / norm_GdpreYkZ(A) * 2.0 /
              2.2204460492503131E-16) / 14.0;
            if (std::fmax(std::ceil(proc_control_B.b_varargin_1), 0.0) == 0.0) {
              proc_control_B.b_s = 7;
            } else {
              guard2 = true;
            }
          } else {
            guard2 = true;
          }
        }

        if (guard2) {
          if (proc_control_B.d6_mq <= 2.097847961257068) {
            for (proc_control_B.e_j = 0; proc_control_B.e_j < 169;
                 proc_control_B.e_j++) {
              proc_control_B.dv5[proc_control_B.e_j] = 0.071467735648795785 *
                std::abs(A[proc_control_B.e_j]);
            }

            proc_control_mpower_k(proc_control_B.dv5, 19.0, proc_control_B.dv6);
            proc_control_B.b_varargin_1 = log2_blLsPIAE(norm_GdpreYkZ
              (proc_control_B.dv6) / norm_GdpreYkZ(A) * 2.0 /
              2.2204460492503131E-16) / 18.0;
            if (std::fmax(std::ceil(proc_control_B.b_varargin_1), 0.0) == 0.0) {
              proc_control_B.b_s = 9;
            } else {
              guard1 = true;
            }
          } else {
            guard1 = true;
          }
        }

        if (guard1) {
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 13;
               proc_control_B.e_i++) {
            std::memset(&proc_control_B.A4_h[proc_control_B.e_i * 13], 0, 13U *
                        sizeof(real_T));
            for (proc_control_B.e_j = 0; proc_control_B.e_j < 13;
                 proc_control_B.e_j++) {
              for (proc_control_B.b_s_o = 0; proc_control_B.b_s_o < 13;
                   proc_control_B.b_s_o++) {
                proc_control_B.A4_tmp = 13 * proc_control_B.e_i +
                  proc_control_B.b_s_o;
                proc_control_B.A4_h[proc_control_B.A4_tmp] += proc_control_B.A4
                  [13 * proc_control_B.e_j + proc_control_B.b_s_o] *
                  proc_control_B.A6[13 * proc_control_B.e_i + proc_control_B.e_j];
              }
            }
          }

          proc_control_B.exptj_d = log2_blLsPIAE(std::fmin(proc_control_B.d6_mq,
            std::fmax(proc_control_B.eta1_f, rt_powd_snf(norm_GdpreYkZ
            (proc_control_B.A4_h), 0.1))) / 5.3719203511481517);
          proc_control_B.exptj_d = std::fmax(std::ceil(proc_control_B.exptj_d),
            0.0);
          proc_control_B.d6_mq = rt_powd_snf(2.0, proc_control_B.exptj_d);
          for (proc_control_B.e_j = 0; proc_control_B.e_j < 169;
               proc_control_B.e_j++) {
            proc_control_B.eta1_f = A[proc_control_B.e_j] / proc_control_B.d6_mq;
            proc_control_B.dv5[proc_control_B.e_j] = 0.05031554467093536 * std::
              abs(proc_control_B.eta1_f);
            proc_control_B.A4_h[proc_control_B.e_j] = proc_control_B.eta1_f;
          }

          proc_control_mpower_k(proc_control_B.dv5, 27.0, proc_control_B.dv6);
          proc_control_B.d6_mq = log2_blLsPIAE(norm_GdpreYkZ(proc_control_B.dv6)
            / norm_GdpreYkZ(proc_control_B.A4_h) * 2.0 / 2.2204460492503131E-16)
            / 26.0;
          proc_control_B.exptj_d += std::fmax(std::ceil(proc_control_B.d6_mq),
            0.0);
          if (std::isinf(proc_control_B.exptj_d)) {
            proc_control_B.d6_mq = norm_GdpreYkZ(A) / 5.3719203511481517;
            if ((!std::isinf(proc_control_B.d6_mq)) && (!std::isnan
                 (proc_control_B.d6_mq))) {
              proc_control_B.d6_mq = frexp(proc_control_B.d6_mq,
                &proc_control_B.b_s);
            } else {
              proc_control_B.b_s = 0;
            }

            proc_control_B.exptj_d = proc_control_B.b_s;
            if (proc_control_B.d6_mq == 0.5) {
              proc_control_B.exptj_d = static_cast<real_T>(proc_control_B.b_s) -
                1.0;
            }
          }

          proc_control_B.b_s = 13;
        }

        if (proc_control_B.exptj_d != 0.0) {
          proc_control_B.d6_mq = rt_powd_snf(2.0, proc_control_B.exptj_d);
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            A[proc_control_B.e_i] /= proc_control_B.d6_mq;
          }

          proc_control_B.d6_mq = rt_powd_snf(2.0, 2.0 * proc_control_B.exptj_d);
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            proc_control_B.A2[proc_control_B.e_i] /= proc_control_B.d6_mq;
          }

          proc_control_B.d6_mq = rt_powd_snf(2.0, 4.0 * proc_control_B.exptj_d);
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            proc_control_B.A4[proc_control_B.e_i] /= proc_control_B.d6_mq;
          }

          proc_control_B.d6_mq = rt_powd_snf(2.0, 6.0 * proc_control_B.exptj_d);
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            proc_control_B.A6[proc_control_B.e_i] /= proc_control_B.d6_mq;
          }
        }

        if (proc_control_B.recomputeDiags_g) {
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 12;
               proc_control_B.e_i++) {
            proc_control_B.blockFormat_e[proc_control_B.e_i] = 0;
          }

          proc_control_B.e_j = 1;
          while (proc_control_B.e_j < 12) {
            proc_control_B.d6_mq = A[(proc_control_B.e_j - 1) * 13 +
              proc_control_B.e_j];
            if (proc_control_B.d6_mq != 0.0) {
              proc_control_B.blockFormat_e[proc_control_B.e_j - 1] = 2;
              proc_control_B.blockFormat_e[proc_control_B.e_j] = 0;
              proc_control_B.e_j += 2;
            } else if ((proc_control_B.d6_mq == 0.0) && (A[(13 *
                         proc_control_B.e_j + proc_control_B.e_j) + 1] == 0.0))
            {
              proc_control_B.blockFormat_e[proc_control_B.e_j - 1] = 1;
              proc_control_B.e_j++;
            } else {
              proc_control_B.blockFormat_e[proc_control_B.e_j - 1] = 0;
              proc_control_B.e_j++;
            }
          }

          if (A[155] != 0.0) {
            proc_control_B.blockFormat_e[11] = 2;
          } else {
            switch (proc_control_B.blockFormat_e[10]) {
             case 0:
              proc_control_B.blockFormat_e[11] = 1;
              break;

             case 1:
              proc_control_B.blockFormat_e[11] = 1;
              break;
            }
          }
        }

        proc_padeApproximation_NWSCAcaS(A, proc_control_B.A2, proc_control_B.A4,
          proc_control_B.A6, proc_control_B.b_s, F);
        if (proc_control_B.recomputeDiags_g) {
          recomputeBlockDiag_qmxFvKVu(A, F, proc_control_B.blockFormat_e);
        }

        proc_control_B.b_s = 0;
        while (proc_control_B.b_s <= static_cast<int32_T>(proc_control_B.exptj_d)
               - 1) {
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 13;
               proc_control_B.e_i++) {
            proc_control_B.b_s_o = 0;
            for (proc_control_B.e_j = 0; proc_control_B.e_j < 13;
                 proc_control_B.e_j++) {
              proc_control_B.A4_tmp = proc_control_B.b_s_o + proc_control_B.e_i;
              proc_control_B.A2[proc_control_B.A4_tmp] = 0.0;
              proc_control_B.A2_tmp = 0;
              for (proc_control_B.i15 = 0; proc_control_B.i15 < 13;
                   proc_control_B.i15++) {
                proc_control_B.A2[proc_control_B.A4_tmp] +=
                  F[proc_control_B.A2_tmp + proc_control_B.e_i] *
                  F[proc_control_B.i15 + proc_control_B.b_s_o];
                proc_control_B.A2_tmp += 13;
              }

              proc_control_B.b_s_o += 13;
            }
          }

          std::memcpy(&F[0], &proc_control_B.A2[0], 169U * sizeof(real_T));
          if (proc_control_B.recomputeDiags_g) {
            for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
                 proc_control_B.e_i++) {
              A[proc_control_B.e_i] *= 2.0;
            }

            recomputeBlockDiag_qmxFvKVu(A, F, proc_control_B.blockFormat_e);
          }

          proc_control_B.b_s++;
        }
      }
    }
  }
}

boolean_T proc_control::proc_control_isequal(const real_T varargin_1[3], const
  real_T varargin_2[3])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 3)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

boolean_T proc_control::proc_control_isequal_p(const real_T varargin_1[6], const
  real_T varargin_2[6])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 6)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

void proc_control::proc_control_emxFree_real_T(emxArray_real_T_proc_control_T
  **pEmxArray)
{
  if (*pEmxArray != static_cast<emxArray_real_T_proc_control_T *>(nullptr)) {
    if (((*pEmxArray)->data != static_cast<real_T *>(nullptr)) && (*pEmxArray)
        ->canFreeData) {
      std::free((*pEmxArray)->data);
    }

    std::free((*pEmxArray)->size);
    std::free(*pEmxArray);
    *pEmxArray = static_cast<emxArray_real_T_proc_control_T *>(nullptr);
  }
}

void proc_control::proc_control_emxFree_int32_T(emxArray_int32_T_proc_control_T **
  pEmxArray)
{
  if (*pEmxArray != static_cast<emxArray_int32_T_proc_control_T *>(nullptr)) {
    if (((*pEmxArray)->data != static_cast<int32_T *>(nullptr)) && (*pEmxArray
        )->canFreeData) {
      std::free((*pEmxArray)->data);
    }

    std::free((*pEmxArray)->size);
    std::free(*pEmxArray);
    *pEmxArray = static_cast<emxArray_int32_T_proc_control_T *>(nullptr);
  }
}

void proc_control::proc_control_emxFree_boolean_T
  (emxArray_boolean_T_proc_contr_T **pEmxArray)
{
  if (*pEmxArray != static_cast<emxArray_boolean_T_proc_contr_T *>(nullptr)) {
    if (((*pEmxArray)->data != static_cast<boolean_T *>(nullptr)) && (*pEmxArray)
        ->canFreeData) {
      std::free((*pEmxArray)->data);
    }

    std::free((*pEmxArray)->size);
    std::free(*pEmxArray);
    *pEmxArray = static_cast<emxArray_boolean_T_proc_contr_T *>(nullptr);
  }
}

void proc_control::proc_control_emxInit_boolean_T
  (emxArray_boolean_T_proc_contr_T **pEmxArray, int32_T numDimensions)
{
  emxArray_boolean_T_proc_contr_T *emxArray;
  *pEmxArray = static_cast<emxArray_boolean_T_proc_contr_T *>(std::malloc(sizeof
    (emxArray_boolean_T_proc_contr_T)));
  emxArray = *pEmxArray;
  emxArray->data = static_cast<boolean_T *>(nullptr);
  emxArray->numDimensions = numDimensions;
  emxArray->size = static_cast<int32_T *>(std::malloc(sizeof(int32_T)
    * numDimensions));
  emxArray->allocatedSize = 0;
  emxArray->canFreeData = true;
  for (int32_T i{0}; i < numDimensions; i++) {
    emxArray->size[i] = 0;
  }
}

void proc_control::pro_emxEnsureCapacity_boolean_T
  (emxArray_boolean_T_proc_contr_T *emxArray, int32_T oldNumel)
{
  int32_T i;
  int32_T newNumel;
  void *newData;
  if (oldNumel < 0) {
    oldNumel = 0;
  }

  newNumel = 1;
  for (i = 0; i < emxArray->numDimensions; i++) {
    newNumel *= emxArray->size[i];
  }

  if (newNumel > emxArray->allocatedSize) {
    i = emxArray->allocatedSize;
    if (i < 16) {
      i = 16;
    }

    while (i < newNumel) {
      if (i > 1073741823) {
        i = MAX_int32_T;
      } else {
        i <<= 1;
      }
    }

    newData = std::calloc(static_cast<uint32_T>(i), sizeof(boolean_T));
    if (emxArray->data != nullptr) {
      std::memcpy(newData, emxArray->data, sizeof(boolean_T) * oldNumel);
      if (emxArray->canFreeData) {
        std::free(emxArray->data);
      }
    }

    emxArray->data = static_cast<boolean_T *>(newData);
    emxArray->allocatedSize = i;
    emxArray->canFreeData = true;
  }
}

void proc_control::proc_control_emxInit_real_T(emxArray_real_T_proc_control_T
  **pEmxArray, int32_T numDimensions)
{
  emxArray_real_T_proc_control_T *emxArray;
  *pEmxArray = static_cast<emxArray_real_T_proc_control_T *>(std::malloc(sizeof
    (emxArray_real_T_proc_control_T)));
  emxArray = *pEmxArray;
  emxArray->data = static_cast<real_T *>(nullptr);
  emxArray->numDimensions = numDimensions;
  emxArray->size = static_cast<int32_T *>(std::malloc(sizeof(int32_T)
    * numDimensions));
  emxArray->allocatedSize = 0;
  emxArray->canFreeData = true;
  for (int32_T i{0}; i < numDimensions; i++) {
    emxArray->size[i] = 0;
  }
}

void proc_control::proc_c_emxEnsureCapacity_real_T
  (emxArray_real_T_proc_control_T *emxArray, int32_T oldNumel)
{
  int32_T i;
  int32_T newNumel;
  void *newData;
  if (oldNumel < 0) {
    oldNumel = 0;
  }

  newNumel = 1;
  for (i = 0; i < emxArray->numDimensions; i++) {
    newNumel *= emxArray->size[i];
  }

  if (newNumel > emxArray->allocatedSize) {
    i = emxArray->allocatedSize;
    if (i < 16) {
      i = 16;
    }

    while (i < newNumel) {
      if (i > 1073741823) {
        i = MAX_int32_T;
      } else {
        i <<= 1;
      }
    }

    newData = std::calloc(static_cast<uint32_T>(i), sizeof(real_T));
    if (emxArray->data != nullptr) {
      std::memcpy(newData, emxArray->data, sizeof(real_T) * oldNumel);
      if (emxArray->canFreeData) {
        std::free(emxArray->data);
      }
    }

    emxArray->data = static_cast<real_T *>(newData);
    emxArray->allocatedSize = i;
    emxArray->canFreeData = true;
  }
}

void proc_control::proc_control_emxInit_int32_T(emxArray_int32_T_proc_control_T **
  pEmxArray, int32_T numDimensions)
{
  emxArray_int32_T_proc_control_T *emxArray;
  *pEmxArray = static_cast<emxArray_int32_T_proc_control_T *>(std::malloc(sizeof
    (emxArray_int32_T_proc_control_T)));
  emxArray = *pEmxArray;
  emxArray->data = static_cast<int32_T *>(nullptr);
  emxArray->numDimensions = numDimensions;
  emxArray->size = static_cast<int32_T *>(std::malloc(sizeof(int32_T)
    * numDimensions));
  emxArray->allocatedSize = 0;
  emxArray->canFreeData = true;
  for (int32_T i{0}; i < numDimensions; i++) {
    emxArray->size[i] = 0;
  }
}

void proc_control::proc__emxEnsureCapacity_int32_T
  (emxArray_int32_T_proc_control_T *emxArray, int32_T oldNumel)
{
  int32_T i;
  int32_T newNumel;
  void *newData;
  if (oldNumel < 0) {
    oldNumel = 0;
  }

  newNumel = 1;
  for (i = 0; i < emxArray->numDimensions; i++) {
    newNumel *= emxArray->size[i];
  }

  if (newNumel > emxArray->allocatedSize) {
    i = emxArray->allocatedSize;
    if (i < 16) {
      i = 16;
    }

    while (i < newNumel) {
      if (i > 1073741823) {
        i = MAX_int32_T;
      } else {
        i <<= 1;
      }
    }

    newData = std::calloc(static_cast<uint32_T>(i), sizeof(int32_T));
    if (emxArray->data != nullptr) {
      std::memcpy(newData, emxArray->data, sizeof(int32_T) * oldNumel);
      if (emxArray->canFreeData) {
        std::free(emxArray->data);
      }
    }

    emxArray->data = static_cast<int32_T *>(newData);
    emxArray->allocatedSize = i;
    emxArray->canFreeData = true;
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
real_T proc_control::proc_control_norm(const real_T x_data[], const int32_T
  *x_size)
{
  real_T y;
  if (*x_size == 0) {
    y = 0.0;
  } else {
    y = 0.0;
    if (*x_size == 1) {
      y = std::abs(x_data[0]);
    } else {
      real_T scale;
      scale = 3.3121686421112381E-170;
      for (int32_T k{0}; k < *x_size; k++) {
        real_T absxk;
        absxk = std::abs(x_data[k]);
        if (absxk > scale) {
          real_T t;
          t = scale / absxk;
          y = y * t * t + 1.0;
          scale = absxk;
        } else {
          real_T t;
          t = absxk / scale;
          y += t * t;
        }
      }

      y = scale * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_maximum2(const emxArray_real_T_proc_control_T *x,
  emxArray_real_T_proc_control_T *ex)
{
  int32_T k;
  k = ex->size[0];
  ex->size[0] = x->size[0];
  proc_c_emxEnsureCapacity_real_T(ex, k);
  for (k = 0; k < x->size[0]; k++) {
    ex->data[k] = std::fmax(x->data[k], 1.0);
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_xgerc(int32_T b_m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y_data[], real_T b_A_data[], int32_T ia0, int32_T
  lda)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA_o = ia0 - 1;
    proc_control_B.jy_b = 0;
    proc_control_B.j_i = 0;
    while (proc_control_B.j_i <= n - 1) {
      if (y_data[proc_control_B.jy_b] != 0.0) {
        proc_control_B.temp_m = y_data[proc_control_B.jy_b] * alpha1;
        proc_control_B.ix_m = ix0;
        proc_control_B.ijA_g = proc_control_B.jA_o;
        proc_control_B.b_ih = b_m + proc_control_B.jA_o;
        while (proc_control_B.ijA_g + 1 <= proc_control_B.b_ih) {
          b_A_data[proc_control_B.ijA_g] += b_A_data[proc_control_B.ix_m - 1] *
            proc_control_B.temp_m;
          proc_control_B.ix_m++;
          proc_control_B.ijA_g++;
        }
      }

      proc_control_B.jy_b++;
      proc_control_B.jA_o += lda;
      proc_control_B.j_i++;
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_xgeqrf(real_T b_A_data[], const int32_T
  b_A_size[2], real_T tau_data[], int32_T *tau_size)
{
  proc_control_B.b_m_a = b_A_size[0] + 1;
  proc_control_B.n_eg = b_A_size[1];
  if (b_A_size[0] <= b_A_size[1]) {
    proc_control_B.minmana = b_A_size[0];
  } else {
    proc_control_B.minmana = b_A_size[1];
  }

  if (b_A_size[0] <= b_A_size[1]) {
    proc_control_B.minmn = b_A_size[0];
  } else {
    proc_control_B.minmn = b_A_size[1];
  }

  *tau_size = proc_control_B.minmana;
  if (proc_control_B.minmana - 1 >= 0) {
    std::memset(&tau_data[0], 0, proc_control_B.minmana * sizeof(real_T));
  }

  if ((b_A_size[0] != 0) && (b_A_size[1] != 0) && (proc_control_B.minmn >= 1)) {
    *tau_size = proc_control_B.minmana;
    if (proc_control_B.minmana - 1 >= 0) {
      std::memset(&tau_data[0], 0, proc_control_B.minmana * sizeof(real_T));
    }

    proc_control_B.minmana = b_A_size[0];
    proc_control_B.ii_n = b_A_size[1];
    if (proc_control_B.ii_n - 1 >= 0) {
      std::memset(&proc_control_B.work_data_a[0], 0, proc_control_B.ii_n *
                  sizeof(real_T));
    }

    proc_control_B.i_ob = 0;
    while (proc_control_B.i_ob <= proc_control_B.minmn - 1) {
      proc_control_B.ii_n = proc_control_B.i_ob * proc_control_B.minmana +
        proc_control_B.i_ob;
      proc_control_B.mmi = (proc_control_B.b_m_a - proc_control_B.i_ob) - 1;
      if (proc_control_B.i_ob + 1 < proc_control_B.b_m_a - 1) {
        proc_control_B.atmp_i = b_A_data[proc_control_B.ii_n];
        tau_data[proc_control_B.i_ob] = 0.0;
        if (proc_control_B.mmi > 0) {
          proc_control_B.xnorm = proc_control_xnrm2(proc_control_B.mmi - 1,
            b_A_data, proc_control_B.ii_n + 2);
          if (proc_control_B.xnorm != 0.0) {
            proc_control_B.xnorm = proc_control_rt_hypotd_snf
              (b_A_data[proc_control_B.ii_n], proc_control_B.xnorm);
            if (b_A_data[proc_control_B.ii_n] >= 0.0) {
              proc_control_B.xnorm = -proc_control_B.xnorm;
            }

            if (std::abs(proc_control_B.xnorm) < 1.0020841800044864E-292) {
              proc_control_B.knt_d = 0;
              proc_control_B.c_k_m = proc_control_B.ii_n + proc_control_B.mmi;
              do {
                proc_control_B.knt_d++;
                proc_control_B.b_k_c = proc_control_B.ii_n + 1;
                while (proc_control_B.b_k_c + 1 <= proc_control_B.c_k_m) {
                  b_A_data[proc_control_B.b_k_c] *= 9.9792015476736E+291;
                  proc_control_B.b_k_c++;
                }

                proc_control_B.xnorm *= 9.9792015476736E+291;
                proc_control_B.atmp_i *= 9.9792015476736E+291;
              } while ((std::abs(proc_control_B.xnorm) < 1.0020841800044864E-292)
                       && (proc_control_B.knt_d < 20));

              proc_control_B.xnorm = proc_control_rt_hypotd_snf
                (proc_control_B.atmp_i, proc_control_xnrm2(proc_control_B.mmi -
                  1, b_A_data, proc_control_B.ii_n + 2));
              if (proc_control_B.atmp_i >= 0.0) {
                proc_control_B.xnorm = -proc_control_B.xnorm;
              }

              tau_data[proc_control_B.i_ob] = (proc_control_B.xnorm -
                proc_control_B.atmp_i) / proc_control_B.xnorm;
              proc_control_B.atmp_i = 1.0 / (proc_control_B.atmp_i -
                proc_control_B.xnorm);
              proc_control_B.c_k_m = proc_control_B.ii_n + proc_control_B.mmi;
              proc_control_B.b_k_c = proc_control_B.ii_n + 1;
              while (proc_control_B.b_k_c + 1 <= proc_control_B.c_k_m) {
                b_A_data[proc_control_B.b_k_c] *= proc_control_B.atmp_i;
                proc_control_B.b_k_c++;
              }

              proc_control_B.b_k_c = 0;
              while (proc_control_B.b_k_c <= proc_control_B.knt_d - 1) {
                proc_control_B.xnorm *= 1.0020841800044864E-292;
                proc_control_B.b_k_c++;
              }

              proc_control_B.atmp_i = proc_control_B.xnorm;
            } else {
              tau_data[proc_control_B.i_ob] = (proc_control_B.xnorm -
                b_A_data[proc_control_B.ii_n]) / proc_control_B.xnorm;
              proc_control_B.atmp_i = 1.0 / (b_A_data[proc_control_B.ii_n] -
                proc_control_B.xnorm);
              proc_control_B.knt_d = proc_control_B.ii_n + proc_control_B.mmi;
              proc_control_B.c_k_m = proc_control_B.ii_n + 1;
              while (proc_control_B.c_k_m + 1 <= proc_control_B.knt_d) {
                b_A_data[proc_control_B.c_k_m] *= proc_control_B.atmp_i;
                proc_control_B.c_k_m++;
              }

              proc_control_B.atmp_i = proc_control_B.xnorm;
            }
          }
        }

        b_A_data[proc_control_B.ii_n] = proc_control_B.atmp_i;
      } else {
        tau_data[proc_control_B.i_ob] = 0.0;
      }

      if (proc_control_B.i_ob + 1 < proc_control_B.n_eg) {
        proc_control_B.xnorm = b_A_data[proc_control_B.ii_n];
        b_A_data[proc_control_B.ii_n] = 1.0;
        proc_control_B.b_k_c = (proc_control_B.ii_n + proc_control_B.minmana) +
          1;
        if (tau_data[proc_control_B.i_ob] != 0.0) {
          boolean_T exitg2;
          proc_control_B.mmip1 = proc_control_B.ii_n + proc_control_B.mmi;
          while ((proc_control_B.mmi > 0) && (b_A_data[proc_control_B.mmip1 - 1]
                  == 0.0)) {
            proc_control_B.mmi--;
            proc_control_B.mmip1--;
          }

          proc_control_B.mmip1 = (proc_control_B.n_eg - proc_control_B.i_ob) - 1;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.mmip1 > 0)) {
            int32_T exitg1;
            proc_control_B.knt_d = (proc_control_B.mmip1 - 1) *
              proc_control_B.minmana + proc_control_B.b_k_c;
            proc_control_B.c_k_m = proc_control_B.knt_d;
            do {
              exitg1 = 0;
              if (proc_control_B.c_k_m <= (proc_control_B.knt_d +
                   proc_control_B.mmi) - 1) {
                if (b_A_data[proc_control_B.c_k_m - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  proc_control_B.c_k_m++;
                }
              } else {
                proc_control_B.mmip1--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          proc_control_B.mmi = 0;
          proc_control_B.mmip1 = 0;
        }

        if (proc_control_B.mmi > 0) {
          proc_control_xgemv(proc_control_B.mmi, proc_control_B.mmip1, b_A_data,
                             proc_control_B.b_k_c, proc_control_B.minmana,
                             b_A_data, proc_control_B.ii_n + 1,
                             proc_control_B.work_data_a);
          proc_control_xgerc(proc_control_B.mmi, proc_control_B.mmip1,
                             -tau_data[proc_control_B.i_ob], proc_control_B.ii_n
                             + 1, proc_control_B.work_data_a, b_A_data,
                             proc_control_B.b_k_c, proc_control_B.minmana);
        }

        b_A_data[proc_control_B.ii_n] = proc_control_B.xnorm;
      }

      proc_control_B.i_ob++;
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_xorgqr(int32_T b_m, int32_T n, int32_T k, real_T
  b_A_data[], const int32_T b_A_size[2], int32_T lda, const real_T tau_data[])
{
  if (n >= 1) {
    proc_control_B.itau_j = k;
    while (proc_control_B.itau_j <= n - 1) {
      proc_control_B.i_bw = proc_control_B.itau_j * lda;
      proc_control_B.iaii_k = 0;
      while (proc_control_B.iaii_k <= b_m - 1) {
        b_A_data[proc_control_B.i_bw + proc_control_B.iaii_k] = 0.0;
        proc_control_B.iaii_k++;
      }

      b_A_data[proc_control_B.i_bw + proc_control_B.itau_j] = 1.0;
      proc_control_B.itau_j++;
    }

    proc_control_B.itau_j = k - 1;
    proc_control_B.iaii_k = static_cast<int8_T>(b_A_size[1]);
    if (proc_control_B.iaii_k - 1 >= 0) {
      std::memset(&proc_control_B.work_data_k[0], 0, proc_control_B.iaii_k *
                  sizeof(real_T));
    }

    proc_control_B.i_bw = k;
    while (proc_control_B.i_bw >= 1) {
      proc_control_B.iaii_k = (proc_control_B.i_bw - 1) * lda +
        proc_control_B.i_bw;
      if (proc_control_B.i_bw < n) {
        b_A_data[proc_control_B.iaii_k - 1] = 1.0;
        proc_control_B.lastc_d = (b_m - proc_control_B.i_bw) - 1;
        proc_control_B.ic0 = proc_control_B.iaii_k + lda;
        if (tau_data[proc_control_B.itau_j] != 0.0) {
          boolean_T exitg2;
          proc_control_B.lastv_d = proc_control_B.lastc_d + 2;
          proc_control_B.lastc_d += proc_control_B.iaii_k;
          while ((proc_control_B.lastv_d > 0) &&
                 (b_A_data[proc_control_B.lastc_d] == 0.0)) {
            proc_control_B.lastv_d--;
            proc_control_B.lastc_d--;
          }

          proc_control_B.lastc_d = n - proc_control_B.i_bw;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.lastc_d > 0)) {
            int32_T exitg1;
            proc_control_B.coltop_o = (proc_control_B.lastc_d - 1) * lda +
              proc_control_B.ic0;
            proc_control_B.b_ia_c = proc_control_B.coltop_o;
            do {
              exitg1 = 0;
              if (proc_control_B.b_ia_c <= (proc_control_B.coltop_o +
                   proc_control_B.lastv_d) - 1) {
                if (b_A_data[proc_control_B.b_ia_c - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  proc_control_B.b_ia_c++;
                }
              } else {
                proc_control_B.lastc_d--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          proc_control_B.lastv_d = 0;
          proc_control_B.lastc_d = 0;
        }

        if (proc_control_B.lastv_d > 0) {
          proc_control_xgemv(proc_control_B.lastv_d, proc_control_B.lastc_d,
                             b_A_data, proc_control_B.ic0, lda, b_A_data,
                             proc_control_B.iaii_k, proc_control_B.work_data_k);
          proc_control_xgerc(proc_control_B.lastv_d, proc_control_B.lastc_d,
                             -tau_data[proc_control_B.itau_j],
                             proc_control_B.iaii_k, proc_control_B.work_data_k,
                             b_A_data, proc_control_B.ic0, lda);
        }
      }

      if (proc_control_B.i_bw < b_m) {
        proc_control_B.ic0 = (proc_control_B.iaii_k + b_m) - proc_control_B.i_bw;
        proc_control_B.lastv_d = proc_control_B.iaii_k;
        while (proc_control_B.lastv_d + 1 <= proc_control_B.ic0) {
          b_A_data[proc_control_B.lastv_d] *= -tau_data[proc_control_B.itau_j];
          proc_control_B.lastv_d++;
        }
      }

      b_A_data[proc_control_B.iaii_k - 1] = 1.0 - tau_data[proc_control_B.itau_j];
      proc_control_B.ic0 = 0;
      while (proc_control_B.ic0 <= proc_control_B.i_bw - 2) {
        b_A_data[(proc_control_B.iaii_k - proc_control_B.ic0) - 2] = 0.0;
        proc_control_B.ic0++;
      }

      proc_control_B.itau_j--;
      proc_control_B.i_bw--;
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_kcnhu0(const real_T b_A_data[], const
  int32_T b_A_size[2], const real_T b_B_data[], real_T b_C_data[], int32_T
  *b_C_size)
{
  int32_T mc;
  mc = b_A_size[0] - 1;
  *b_C_size = b_A_size[0];
  for (int32_T i{0}; i <= mc; i++) {
    b_C_data[i] = 0.0;
  }

  for (int32_T i{0}; i < b_A_size[1]; i++) {
    int32_T aoffset;
    aoffset = i * b_A_size[0];
    for (int32_T b_i{0}; b_i <= mc; b_i++) {
      b_C_data[b_i] += b_A_data[aoffset + b_i] * b_B_data[i];
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
real_T proc_control::proc_control_KWIKfactor(const
  emxArray_real_T_proc_control_T *b_Ac, const emxArray_int32_T_proc_control_T
  *iC, int32_T nA, const real_T Linv_data[], const int32_T Linv_size[2], real_T
  RLinv_data[], const int32_T RLinv_size[2], real_T b_D_data[], const int32_T
  b_D_size[2], real_T b_H_data[], const int32_T b_H_size[2], int32_T n)
{
  real_T Status;
  proc_control_B.TL_size_idx_0 = Linv_size[0];
  Status = 1.0;
  proc_control_B.RLinv_j = RLinv_size[0];
  proc_control_B.b_m_o = RLinv_size[1];
  for (proc_control_B.d_k_d = 0; proc_control_B.d_k_d < proc_control_B.b_m_o;
       proc_control_B.d_k_d++) {
    for (proc_control_B.b_n_k = 0; proc_control_B.b_n_k < proc_control_B.RLinv_j;
         proc_control_B.b_n_k++) {
      RLinv_data[proc_control_B.b_n_k + RLinv_size[0] * proc_control_B.d_k_d] =
        0.0;
    }
  }

  proc_control_B.b_n_k = 0;
  while (proc_control_B.b_n_k <= nA - 1) {
    proc_control_B.b_m_o = iC->data[proc_control_B.b_n_k];
    proc_control_B.RLinv_j = b_Ac->size[1];
    for (proc_control_B.d_k_d = 0; proc_control_B.d_k_d < proc_control_B.RLinv_j;
         proc_control_B.d_k_d++) {
      proc_control_B.b_Ac_data_m[proc_control_B.d_k_d] = b_Ac->data[(b_Ac->size
        [0] * proc_control_B.d_k_d + proc_control_B.b_m_o) - 1];
    }

    proc_control_mtimes_kcnhu0(Linv_data, Linv_size, proc_control_B.b_Ac_data_m,
      proc_control_B.tau_data, &proc_control_B.tau_size);
    proc_control_B.RLinv_j = proc_control_B.tau_size;
    for (proc_control_B.d_k_d = 0; proc_control_B.d_k_d < proc_control_B.RLinv_j;
         proc_control_B.d_k_d++) {
      RLinv_data[proc_control_B.d_k_d + RLinv_size[0] * proc_control_B.b_n_k] =
        proc_control_B.tau_data[proc_control_B.d_k_d];
    }

    proc_control_B.b_n_k++;
  }

  proc_control_B.b_m_o = RLinv_size[0] - 1;
  proc_control_B.b_n_k = RLinv_size[1];
  proc_control_B.d_k_d = static_cast<int8_T>(RLinv_size[0]);
  proc_control_B.Q_size_idx_0 = static_cast<int8_T>(RLinv_size[0]);
  proc_control_B.R_size_idx_0 = RLinv_size[0];
  if (RLinv_size[0] > RLinv_size[1]) {
    proc_control_B.b_A_d = 0;
    while (proc_control_B.b_A_d <= proc_control_B.b_n_k - 1) {
      proc_control_B.b_A_fs = 0;
      while (proc_control_B.b_A_fs <= proc_control_B.b_m_o) {
        proc_control_B.Q_data[proc_control_B.b_A_fs + proc_control_B.d_k_d *
          proc_control_B.b_A_d] = RLinv_data[RLinv_size[0] *
          proc_control_B.b_A_d + proc_control_B.b_A_fs];
        proc_control_B.b_A_fs++;
      }

      proc_control_B.b_A_d++;
    }

    proc_control_B.b_A_d = RLinv_size[1];
    while (proc_control_B.b_A_d + 1 <= proc_control_B.b_m_o + 1) {
      proc_control_B.b_A_fs = 0;
      while (proc_control_B.b_A_fs <= proc_control_B.b_m_o) {
        proc_control_B.Q_data[proc_control_B.b_A_fs + proc_control_B.d_k_d *
          proc_control_B.b_A_d] = 0.0;
        proc_control_B.b_A_fs++;
      }

      proc_control_B.b_A_d++;
    }

    proc_control_B.b_A_size[0] = static_cast<int8_T>(RLinv_size[0]);
    proc_control_B.b_A_size[1] = static_cast<int8_T>(RLinv_size[0]);
    proc_control_B.RLinv_j = static_cast<int8_T>(RLinv_size[0]) *
      static_cast<int8_T>(RLinv_size[0]);
    if (proc_control_B.RLinv_j - 1 >= 0) {
      std::memcpy(&proc_control_B.b_A_data[0], &proc_control_B.Q_data[0],
                  proc_control_B.RLinv_j * sizeof(real_T));
    }

    proc_control_xgeqrf(proc_control_B.b_A_data, proc_control_B.b_A_size,
                        proc_control_B.tau_data, &proc_control_B.tau_size);
    proc_control_B.Q_size_idx_0 = proc_control_B.b_A_size[0];
    proc_control_B.d_k_d = proc_control_B.b_A_size[1];
    proc_control_B.b_A_d = proc_control_B.b_A_size[0] * proc_control_B.b_A_size
      [1];
    if (proc_control_B.b_A_d - 1 >= 0) {
      std::memcpy(&proc_control_B.Q_data[0], &proc_control_B.b_A_data[0],
                  proc_control_B.b_A_d * sizeof(real_T));
    }

    proc_control_B.b_A_d = 0;
    while (proc_control_B.b_A_d <= proc_control_B.b_n_k - 1) {
      proc_control_B.b_A_fs = 0;
      while (proc_control_B.b_A_fs <= proc_control_B.b_A_d) {
        proc_control_B.R_data[proc_control_B.b_A_fs +
          proc_control_B.R_size_idx_0 * proc_control_B.b_A_d] =
          proc_control_B.Q_data[proc_control_B.Q_size_idx_0 *
          proc_control_B.b_A_d + proc_control_B.b_A_fs];
        proc_control_B.b_A_fs++;
      }

      proc_control_B.b_A_fs = proc_control_B.b_A_d + 1;
      while (proc_control_B.b_A_fs + 1 <= proc_control_B.b_m_o + 1) {
        proc_control_B.R_data[proc_control_B.b_A_fs +
          proc_control_B.R_size_idx_0 * proc_control_B.b_A_d] = 0.0;
        proc_control_B.b_A_fs++;
      }

      proc_control_B.b_A_d++;
    }

    proc_control_B.RLinv_j = proc_control_B.Q_size_idx_0 * proc_control_B.d_k_d;
    if (proc_control_B.RLinv_j - 1 >= 0) {
      std::memcpy(&proc_control_B.b_A_data[0], &proc_control_B.Q_data[0],
                  proc_control_B.RLinv_j * sizeof(real_T));
    }

    proc_control_xorgqr(RLinv_size[0], RLinv_size[0], RLinv_size[1],
                        proc_control_B.b_A_data, proc_control_B.b_A_size,
                        RLinv_size[0], proc_control_B.tau_data);
    proc_control_B.Q_size_idx_0 = proc_control_B.b_A_size[0];
    proc_control_B.RLinv_j = proc_control_B.b_A_size[0] *
      proc_control_B.b_A_size[1];
    if (proc_control_B.RLinv_j - 1 >= 0) {
      std::memcpy(&proc_control_B.Q_data[0], &proc_control_B.b_A_data[0],
                  proc_control_B.RLinv_j * sizeof(real_T));
    }
  } else {
    proc_control_B.b_A_size[0] = RLinv_size[0];
    proc_control_B.b_A_size[1] = RLinv_size[1];
    proc_control_B.RLinv_j = RLinv_size[0] * RLinv_size[1];
    if (proc_control_B.RLinv_j - 1 >= 0) {
      std::memcpy(&proc_control_B.b_A_data[0], &RLinv_data[0],
                  proc_control_B.RLinv_j * sizeof(real_T));
    }

    proc_control_xgeqrf(proc_control_B.b_A_data, proc_control_B.b_A_size,
                        proc_control_B.tau_data, &proc_control_B.tau_size);
    proc_control_B.b_A_d = 0;
    while (proc_control_B.b_A_d <= proc_control_B.b_m_o) {
      proc_control_B.b_A_fs = 0;
      while (proc_control_B.b_A_fs <= proc_control_B.b_A_d) {
        proc_control_B.R_data[proc_control_B.b_A_fs +
          proc_control_B.R_size_idx_0 * proc_control_B.b_A_d] =
          proc_control_B.b_A_data[proc_control_B.b_A_size[0] *
          proc_control_B.b_A_d + proc_control_B.b_A_fs];
        proc_control_B.b_A_fs++;
      }

      proc_control_B.b_A_fs = proc_control_B.b_A_d + 1;
      while (proc_control_B.b_A_fs + 1 <= proc_control_B.b_m_o + 1) {
        proc_control_B.R_data[proc_control_B.b_A_fs +
          proc_control_B.R_size_idx_0 * proc_control_B.b_A_d] = 0.0;
        proc_control_B.b_A_fs++;
      }

      proc_control_B.b_A_d++;
    }

    proc_control_B.b_A_d = RLinv_size[0];
    while (proc_control_B.b_A_d + 1 <= proc_control_B.b_n_k) {
      proc_control_B.b_A_fs = 0;
      while (proc_control_B.b_A_fs <= proc_control_B.b_m_o) {
        proc_control_B.R_data[proc_control_B.b_A_fs +
          proc_control_B.R_size_idx_0 * proc_control_B.b_A_d] =
          proc_control_B.b_A_data[proc_control_B.b_A_size[0] *
          proc_control_B.b_A_d + proc_control_B.b_A_fs];
        proc_control_B.b_A_fs++;
      }

      proc_control_B.b_A_d++;
    }

    proc_control_xorgqr(RLinv_size[0], RLinv_size[0], RLinv_size[0],
                        proc_control_B.b_A_data, proc_control_B.b_A_size,
                        RLinv_size[0], proc_control_B.tau_data);
    proc_control_B.b_n_k = 0;
    while (proc_control_B.b_n_k <= proc_control_B.b_m_o) {
      proc_control_B.b_A_d = 0;
      while (proc_control_B.b_A_d <= proc_control_B.b_m_o) {
        proc_control_B.Q_data[proc_control_B.b_A_d + proc_control_B.d_k_d *
          proc_control_B.b_n_k] =
          proc_control_B.b_A_data[proc_control_B.b_A_size[0] *
          proc_control_B.b_n_k + proc_control_B.b_A_d];
        proc_control_B.b_A_d++;
      }

      proc_control_B.b_n_k++;
    }
  }

  proc_control_B.b_n_k = 0;
  int32_T exitg1;
  do {
    exitg1 = 0;
    if (proc_control_B.b_n_k <= nA - 1) {
      if (std::abs(proc_control_B.R_data[proc_control_B.R_size_idx_0 *
                   proc_control_B.b_n_k + proc_control_B.b_n_k]) < 1.0E-12) {
        Status = -2.0;
        exitg1 = 1;
      } else {
        proc_control_B.b_n_k++;
      }
    } else {
      proc_control_B.b_A_d = 0;
      while (proc_control_B.b_A_d <= n - 1) {
        proc_control_B.b_A_fs = 0;
        while (proc_control_B.b_A_fs <= n - 1) {
          proc_control_B.RLinv_j = Linv_size[0];
          proc_control_B.Linv = 0.0;
          for (proc_control_B.d_k_d = 0; proc_control_B.d_k_d <
               proc_control_B.RLinv_j; proc_control_B.d_k_d++) {
            proc_control_B.Linv += Linv_data[Linv_size[0] * proc_control_B.b_A_d
              + proc_control_B.d_k_d] *
              proc_control_B.Q_data[proc_control_B.Q_size_idx_0 *
              proc_control_B.b_A_fs + proc_control_B.d_k_d];
          }

          proc_control_B.TL_data[proc_control_B.b_A_d +
            proc_control_B.TL_size_idx_0 * proc_control_B.b_A_fs] =
            proc_control_B.Linv;
          proc_control_B.b_A_fs++;
        }

        proc_control_B.b_A_d++;
      }

      proc_control_B.RLinv_j = RLinv_size[0];
      proc_control_B.b_m_o = RLinv_size[1];
      for (proc_control_B.d_k_d = 0; proc_control_B.d_k_d < proc_control_B.b_m_o;
           proc_control_B.d_k_d++) {
        for (proc_control_B.b_n_k = 0; proc_control_B.b_n_k <
             proc_control_B.RLinv_j; proc_control_B.b_n_k++) {
          RLinv_data[proc_control_B.b_n_k + RLinv_size[0] * proc_control_B.d_k_d]
            = 0.0;
        }
      }

      proc_control_B.b_m_o = nA - 1;
      while (proc_control_B.b_m_o + 1 > 0) {
        RLinv_data[proc_control_B.b_m_o + RLinv_size[0] * proc_control_B.b_m_o] =
          1.0;
        proc_control_B.b_n_k = proc_control_B.b_m_o;
        while (proc_control_B.b_n_k + 1 <= nA) {
          proc_control_B.Q_size_idx_0 = RLinv_size[0] * proc_control_B.b_n_k +
            proc_control_B.b_m_o;
          RLinv_data[proc_control_B.Q_size_idx_0] /=
            proc_control_B.R_data[proc_control_B.R_size_idx_0 *
            proc_control_B.b_m_o + proc_control_B.b_m_o];
          proc_control_B.b_n_k++;
        }

        if (proc_control_B.b_m_o + 1 > 1) {
          proc_control_B.b_n_k = 0;
          while (proc_control_B.b_n_k <= proc_control_B.b_m_o - 1) {
            proc_control_B.b_A_d = proc_control_B.b_m_o;
            while (proc_control_B.b_A_d + 1 <= nA) {
              proc_control_B.Q_size_idx_0 = RLinv_size[0] * proc_control_B.b_A_d;
              proc_control_B.d_k_d = proc_control_B.b_n_k +
                proc_control_B.Q_size_idx_0;
              RLinv_data[proc_control_B.d_k_d] -=
                proc_control_B.R_data[proc_control_B.R_size_idx_0 *
                proc_control_B.b_m_o + proc_control_B.b_n_k] *
                RLinv_data[proc_control_B.b_m_o + proc_control_B.Q_size_idx_0];
              proc_control_B.b_A_d++;
            }

            proc_control_B.b_n_k++;
          }
        }

        proc_control_B.b_m_o--;
      }

      proc_control_B.b_n_k = 0;
      while (proc_control_B.b_n_k <= n - 1) {
        proc_control_B.b_A_d = proc_control_B.b_n_k;
        while (proc_control_B.b_A_d + 1 <= n) {
          proc_control_B.Q_size_idx_0 = b_H_size[0] * proc_control_B.b_A_d +
            proc_control_B.b_n_k;
          b_H_data[proc_control_B.Q_size_idx_0] = 0.0;
          proc_control_B.b_A_fs = nA;
          while (proc_control_B.b_A_fs + 1 <= n) {
            proc_control_B.d_k_d = proc_control_B.TL_size_idx_0 *
              proc_control_B.b_A_fs;
            b_H_data[proc_control_B.Q_size_idx_0] -=
              proc_control_B.TL_data[proc_control_B.b_n_k + proc_control_B.d_k_d]
              * proc_control_B.TL_data[proc_control_B.b_A_d +
              proc_control_B.d_k_d];
            proc_control_B.b_A_fs++;
          }

          b_H_data[proc_control_B.b_A_d + b_H_size[0] * proc_control_B.b_n_k] =
            b_H_data[proc_control_B.Q_size_idx_0];
          proc_control_B.b_A_d++;
        }

        proc_control_B.b_n_k++;
      }

      proc_control_B.b_A_d = 0;
      while (proc_control_B.b_A_d <= nA - 1) {
        proc_control_B.b_A_fs = 0;
        while (proc_control_B.b_A_fs <= n - 1) {
          proc_control_B.Q_size_idx_0 = b_D_size[0] * proc_control_B.b_A_d +
            proc_control_B.b_A_fs;
          b_D_data[proc_control_B.Q_size_idx_0] = 0.0;
          proc_control_B.d_k_d = proc_control_B.b_A_d;
          while (proc_control_B.d_k_d + 1 <= nA) {
            b_D_data[proc_control_B.Q_size_idx_0] +=
              proc_control_B.TL_data[proc_control_B.TL_size_idx_0 *
              proc_control_B.d_k_d + proc_control_B.b_A_fs] *
              RLinv_data[RLinv_size[0] * proc_control_B.d_k_d +
              proc_control_B.b_A_d];
            proc_control_B.d_k_d++;
          }

          proc_control_B.b_A_fs++;
        }

        proc_control_B.b_A_d++;
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);

  return Status;
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
real_T proc_control::proc_control_mtimes_kcnhu0x(const real_T b_A_data[], const
  int32_T *b_A_size, const real_T b_B_data[])
{
  real_T b_C;
  b_C = 0.0;
  if (*b_A_size >= 1) {
    for (int32_T k{0}; k < *b_A_size; k++) {
      b_C += b_A_data[k] * b_B_data[k];
    }
  }

  return b_C;
}

void proc_control::proc__binary_expand_op_pr351ewp(real_T in1_data[], int32_T
  *in1_size, real_T in2, const real_T in3_data[], const int32_T *in3_size)
{
  real_T in1_data_0[81];
  int32_T in1_size_idx_0;
  int32_T loop_ub;
  int32_T stride_0_0;
  int32_T stride_1_0;
  in1_size_idx_0 = *in3_size == 1 ? *in1_size : *in3_size;
  stride_0_0 = (*in1_size != 1);
  stride_1_0 = (*in3_size != 1);
  loop_ub = *in3_size == 1 ? *in1_size : *in3_size;
  for (int32_T i{0}; i < loop_ub; i++) {
    in1_data_0[i] = in3_data[i * stride_1_0] * in2 + in1_data[i * stride_0_0];
  }

  *in1_size = in1_size_idx_0;
  for (int32_T i{0}; i < in1_size_idx_0; i++) {
    in1_data[i] = in1_data_0[i];
  }
}

void proc_control::proc_c_binary_expand_op_pr351ew(real_T in1_data[], int32_T
  in1_size[2], const emxArray_real_T_proc_control_T *in2, int32_T in3, const
  real_T in4_data[], const int32_T *in4_size)
{
  real_T in2_data[81];
  int32_T in2_0;
  int32_T in2_size_idx_1;
  int32_T loop_ub;
  int32_T stride_0_1;
  int32_T stride_1_1;
  in2_0 = in2->size[1] - 1;
  in2_size_idx_1 = *in4_size == 1 ? in2_0 + 1 : *in4_size;
  stride_0_1 = (in2_0 + 1 != 1);
  stride_1_1 = (*in4_size != 1);
  loop_ub = *in4_size == 1 ? in2_0 + 1 : *in4_size;
  for (in2_0 = 0; in2_0 < loop_ub; in2_0++) {
    in2_data[in2_0] = in2->data[in2_0 * stride_0_1 * in2->size[0] + in3] *
      in4_data[in2_0 * stride_1_1];
  }

  in1_size[0] = 1;
  in1_size[1] = in2_size_idx_1;
  for (in2_0 = 0; in2_0 < in2_size_idx_1; in2_0++) {
    in1_data[in2_0] = in2_data[in2_0];
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_qpkwik(const real_T Linv_data[], const int32_T
  Linv_size[2], const real_T Hinv_data[], const int32_T Hinv_size[2], const
  real_T f_data[], const emxArray_real_T_proc_control_T *b_Ac, const
  emxArray_real_T_proc_control_T *b, emxArray_boolean_T_proc_contr_T *iA,
  int32_T b_m, int32_T n, real_T x_data[], int32_T *x_size,
  emxArray_real_T_proc_control_T *lambda, int32_T *status)
{
  emxArray_int32_T_proc_control_T *iC;
  emxArray_real_T_proc_control_T *b_varargin_1;
  emxArray_real_T_proc_control_T *cTol;
  proc_control_B.last = lambda->size[0];
  lambda->size[0] = b_m;
  proc_c_emxEnsureCapacity_real_T(lambda, proc_control_B.last);
  if (b_m - 1 >= 0) {
    std::memset(&lambda->data[0], 0, b_m * sizeof(real_T));
  }

  proc_control_B.status = 1;
  if (b_m == 0) {
    *x_size = n;
    if (n - 1 >= 0) {
      std::memset(&x_data[0], 0, n * sizeof(real_T));
    }

    proc_control_B.nA_b = 0;
    while (proc_control_B.nA_b <= n - 1) {
      proc_control_B.idx_j = Hinv_size[1];
      proc_control_B.Xnorm0_g = 0.0;
      for (proc_control_B.last = 0; proc_control_B.last < proc_control_B.idx_j;
           proc_control_B.last++) {
        proc_control_B.Xnorm0_g += -Hinv_data[Hinv_size[0] * proc_control_B.last
          + proc_control_B.nA_b] * f_data[proc_control_B.last];
      }

      x_data[proc_control_B.nA_b] = proc_control_B.Xnorm0_g;
      proc_control_B.nA_b++;
    }
  } else {
    boolean_T exitg2;
    if (n - 1 >= 0) {
      std::memset(&proc_control_B.r_data_h[0], 0, n * sizeof(real_T));
    }

    proc_control_emxInit_real_T(&cTol, 1);
    proc_control_emxInit_int32_T(&iC, 1);
    proc_control_B.rMin_f = 0.0;
    proc_control_B.RLinv_size[0] = Linv_size[0];
    proc_control_B.RLinv_size[1] = Linv_size[1];
    proc_control_B.b_D_size[0] = Linv_size[0];
    proc_control_B.b_D_size[1] = Linv_size[1];
    proc_control_B.b_H_size_i[0] = Linv_size[0];
    proc_control_B.b_H_size_i[1] = Linv_size[1];
    proc_control_B.last = cTol->size[0];
    cTol->size[0] = b_m;
    proc_c_emxEnsureCapacity_real_T(cTol, proc_control_B.last);
    proc_control_B.cTolComputed_i = false;
    proc_control_B.last = iC->size[0];
    iC->size[0] = b_m;
    proc__emxEnsureCapacity_int32_T(iC, proc_control_B.last);
    for (proc_control_B.last = 0; proc_control_B.last < b_m; proc_control_B.last
         ++) {
      cTol->data[proc_control_B.last] = 1.0;
      iC->data[proc_control_B.last] = 0;
    }

    proc_control_B.nA_b = -1;
    *x_size = n;
    if (n - 1 >= 0) {
      std::memset(&x_data[0], 0, n * sizeof(real_T));
    }

    proc_control_B.kNext = 0;
    while (proc_control_B.kNext <= n - 1) {
      proc_control_B.idx_j = Hinv_size[1];
      proc_control_B.Xnorm0_g = 0.0;
      for (proc_control_B.last = 0; proc_control_B.last < proc_control_B.idx_j;
           proc_control_B.last++) {
        proc_control_B.Xnorm0_g += -Hinv_data[Hinv_size[0] * proc_control_B.last
          + proc_control_B.kNext] * f_data[proc_control_B.last];
      }

      x_data[proc_control_B.kNext] = proc_control_B.Xnorm0_g;
      proc_control_B.kNext++;
    }

    proc_control_B.Xnorm0_g = proc_control_norm(x_data, x_size);
    proc_control_emxInit_real_T(&b_varargin_1, 1);
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.status <= 940)) {
      boolean_T exitg3;
      proc_control_B.cMin_d = -0.01;
      proc_control_B.kNext = -1;
      proc_control_B.kDrop = 0;
      while (proc_control_B.kDrop <= b_m - 1) {
        if (!proc_control_B.cTolComputed_i) {
          if (*x_size == b_Ac->size[1]) {
            proc_control_B.idx_j = b_Ac->size[1];
            proc_control_B.b_x_size[0] = 1;
            proc_control_B.b_x_size[1] = b_Ac->size[1];
            for (proc_control_B.last = 0; proc_control_B.last <
                 proc_control_B.idx_j; proc_control_B.last++) {
              proc_control_B.b_x_data[proc_control_B.last] = b_Ac->data
                [b_Ac->size[0] * proc_control_B.last + proc_control_B.kDrop] *
                x_data[proc_control_B.last];
            }
          } else {
            proc_c_binary_expand_op_pr351ew(proc_control_B.b_x_data,
              proc_control_B.b_x_size, (emxArray_real_T_proc_control_T *)b_Ac,
              proc_control_B.kDrop, x_data, x_size);
          }

          proc_control_B.last = 0;
          while (proc_control_B.last <= proc_control_B.b_x_size[1] - 1) {
            proc_control_B.idx_j = proc_control_B.last;
            proc_control_B.b_Ac_data[proc_control_B.idx_j] = std::abs
              (proc_control_B.b_x_data[proc_control_B.idx_j]);
            proc_control_B.last++;
          }

          proc_control_B.last = proc_control_B.b_x_size[1];
          if (proc_control_B.b_x_size[1] <= 2) {
            if (proc_control_B.b_x_size[1] == 1) {
              proc_control_B.zTa = proc_control_B.b_Ac_data[0];
            } else {
              proc_control_B.last = 0;
              proc_control_B.t_h =
                proc_control_B.b_Ac_data[proc_control_B.b_x_size[1] - 1];
              proc_control_B.zTa = proc_control_B.b_Ac_data[proc_control_B.last];
              if (proc_control_B.zTa < proc_control_B.t_h) {
                proc_control_B.zTa = proc_control_B.t_h;
              } else if (std::isnan(proc_control_B.b_Ac_data[proc_control_B.last])
                         && (!std::isnan(proc_control_B.t_h))) {
                proc_control_B.zTa = proc_control_B.t_h;
              }
            }
          } else {
            proc_control_B.zTa = proc_control_B.b_Ac_data[0];
            if (!std::isnan(proc_control_B.zTa)) {
              proc_control_B.idx_j = 1;
            } else {
              proc_control_B.idx_j = 0;
              proc_control_B.b_H_h = 2;
              exitg3 = false;
              while ((!exitg3) && (proc_control_B.b_H_h <= proc_control_B.last))
              {
                if (!std::isnan(proc_control_B.b_Ac_data[proc_control_B.b_H_h -
                                1])) {
                  proc_control_B.idx_j = proc_control_B.b_H_h;
                  exitg3 = true;
                } else {
                  proc_control_B.b_H_h++;
                }
              }
            }

            if (proc_control_B.idx_j == 0) {
            } else {
              proc_control_B.zTa = proc_control_B.b_Ac_data[proc_control_B.idx_j
                - 1];
              while (proc_control_B.idx_j + 1 <= proc_control_B.last) {
                proc_control_B.t_h =
                  proc_control_B.b_Ac_data[proc_control_B.idx_j];
                if (proc_control_B.zTa < proc_control_B.t_h) {
                  proc_control_B.zTa = proc_control_B.t_h;
                }

                proc_control_B.idx_j++;
              }
            }
          }

          cTol->data[proc_control_B.kDrop] = std::fmax(cTol->
            data[proc_control_B.kDrop], proc_control_B.zTa);
        }

        if (!iA->data[proc_control_B.kDrop]) {
          proc_control_B.idx_j = b_Ac->size[1];
          proc_control_B.t_h = 0.0;
          for (proc_control_B.last = 0; proc_control_B.last <
               proc_control_B.idx_j; proc_control_B.last++) {
            proc_control_B.t_h += b_Ac->data[b_Ac->size[0] * proc_control_B.last
              + proc_control_B.kDrop] * x_data[proc_control_B.last];
          }

          proc_control_B.zTa = (proc_control_B.t_h - b->
                                data[proc_control_B.kDrop]) / cTol->
            data[proc_control_B.kDrop];
          if (proc_control_B.zTa < proc_control_B.cMin_d) {
            proc_control_B.cMin_d = proc_control_B.zTa;
            proc_control_B.kNext = proc_control_B.kDrop;
          }
        }

        proc_control_B.kDrop++;
      }

      proc_control_B.cTolComputed_i = true;
      if (proc_control_B.kNext + 1 <= 0) {
        exitg2 = true;
      } else if (proc_control_B.status == 940) {
        proc_control_B.status = 0;
        exitg2 = true;
      } else {
        int32_T exitg1;
        do {
          exitg1 = 0;
          if ((proc_control_B.kNext + 1 > 0) && (proc_control_B.status <= 940))
          {
            boolean_T guard1{ false };

            guard1 = false;
            if (proc_control_B.nA_b + 1 == 0) {
              proc_control_B.idx_j = b_Ac->size[1];
              for (proc_control_B.last = 0; proc_control_B.last <
                   proc_control_B.idx_j; proc_control_B.last++) {
                proc_control_B.b_Ac_data[proc_control_B.last] = b_Ac->data
                  [b_Ac->size[0] * proc_control_B.last + proc_control_B.kNext];
              }

              proc_control_mtimes_kcnhu0(Hinv_data, Hinv_size,
                proc_control_B.b_Ac_data, proc_control_B.z_data,
                &proc_control_B.z_size);
              guard1 = true;
            } else {
              proc_control_B.cMin_d = proc_control_KWIKfactor(b_Ac, iC,
                proc_control_B.nA_b + 1, Linv_data, Linv_size,
                proc_control_B.RLinv_data, proc_control_B.RLinv_size,
                proc_control_B.b_D_data, proc_control_B.b_D_size,
                proc_control_B.b_H_data_g, proc_control_B.b_H_size_i, n);
              if (proc_control_B.cMin_d <= 0.0) {
                proc_control_B.status = -2;
                exitg1 = 1;
              } else {
                proc_control_B.b_H_size_p[0] = proc_control_B.b_H_size_i[0];
                proc_control_B.b_H_size_p[1] = proc_control_B.b_H_size_i[1];
                proc_control_B.idx_j = proc_control_B.b_H_size_i[0] *
                  proc_control_B.b_H_size_i[1];
                for (proc_control_B.last = 0; proc_control_B.last <
                     proc_control_B.idx_j; proc_control_B.last++) {
                  proc_control_B.b_H_data_m[proc_control_B.last] =
                    -proc_control_B.b_H_data_g[proc_control_B.last];
                }

                proc_control_B.idx_j = b_Ac->size[1];
                for (proc_control_B.last = 0; proc_control_B.last <
                     proc_control_B.idx_j; proc_control_B.last++) {
                  proc_control_B.b_Ac_data[proc_control_B.last] = b_Ac->
                    data[b_Ac->size[0] * proc_control_B.last +
                    proc_control_B.kNext];
                }

                proc_control_mtimes_kcnhu0(proc_control_B.b_H_data_m,
                  proc_control_B.b_H_size_p, proc_control_B.b_Ac_data,
                  proc_control_B.z_data, &proc_control_B.z_size);
                proc_control_B.kDrop = 0;
                while (proc_control_B.kDrop <= proc_control_B.nA_b) {
                  proc_control_B.idx_j = b_Ac->size[1];
                  proc_control_B.t_h = 0.0;
                  for (proc_control_B.last = 0; proc_control_B.last <
                       proc_control_B.idx_j; proc_control_B.last++) {
                    proc_control_B.t_h += b_Ac->data[b_Ac->size[0] *
                      proc_control_B.last + proc_control_B.kNext] *
                      proc_control_B.b_D_data[proc_control_B.b_D_size[0] *
                      proc_control_B.kDrop + proc_control_B.last];
                  }

                  proc_control_B.r_data_h[proc_control_B.kDrop] =
                    proc_control_B.t_h;
                  proc_control_B.kDrop++;
                }

                guard1 = true;
              }
            }

            if (guard1) {
              proc_control_B.kDrop = 0;
              proc_control_B.cMin_d = 0.0;
              proc_control_B.isT1Inf = true;
              proc_control_B.tempOK = true;
              if (proc_control_B.nA_b + 1 > 0) {
                proc_control_B.idx_j = 0;
                exitg3 = false;
                while ((!exitg3) && (proc_control_B.idx_j <= proc_control_B.nA_b))
                {
                  if (proc_control_B.r_data_h[proc_control_B.idx_j] >= 1.0E-12)
                  {
                    proc_control_B.tempOK = false;
                    exitg3 = true;
                  } else {
                    proc_control_B.idx_j++;
                  }
                }
              }

              if ((proc_control_B.nA_b + 1 != 0) && (!proc_control_B.tempOK)) {
                proc_control_B.last = 0;
                while (proc_control_B.last <= proc_control_B.nA_b) {
                  if (proc_control_B.r_data_h[proc_control_B.last] > 1.0E-12) {
                    proc_control_B.zTa = lambda->data[iC->
                      data[proc_control_B.last] - 1] /
                      proc_control_B.r_data_h[proc_control_B.last];
                    if ((proc_control_B.kDrop == 0) || (proc_control_B.zTa <
                         proc_control_B.rMin_f)) {
                      proc_control_B.rMin_f = proc_control_B.zTa;
                      proc_control_B.kDrop = proc_control_B.last + 1;
                    }
                  }

                  proc_control_B.last++;
                }

                if (proc_control_B.kDrop > 0) {
                  proc_control_B.cMin_d = proc_control_B.rMin_f;
                  proc_control_B.isT1Inf = false;
                }
              }

              proc_control_B.idx_j = b_Ac->size[1];
              for (proc_control_B.last = 0; proc_control_B.last <
                   proc_control_B.idx_j; proc_control_B.last++) {
                proc_control_B.b_Ac_data[proc_control_B.last] = b_Ac->data
                  [b_Ac->size[0] * proc_control_B.last + proc_control_B.kNext];
              }

              proc_control_B.zTa = proc_control_mtimes_kcnhu0x
                (proc_control_B.z_data, &proc_control_B.z_size,
                 proc_control_B.b_Ac_data);
              if (proc_control_B.zTa <= 0.0) {
                proc_control_B.zTa = 0.0;
                proc_control_B.tempOK = true;
              } else {
                proc_control_B.idx_j = b_Ac->size[1];
                proc_control_B.t_h = 0.0;
                for (proc_control_B.last = 0; proc_control_B.last <
                     proc_control_B.idx_j; proc_control_B.last++) {
                  proc_control_B.t_h += b_Ac->data[b_Ac->size[0] *
                    proc_control_B.last + proc_control_B.kNext] *
                    x_data[proc_control_B.last];
                }

                proc_control_B.zTa = (b->data[proc_control_B.kNext] -
                                      proc_control_B.t_h) / proc_control_B.zTa;
                proc_control_B.tempOK = false;
              }

              if (proc_control_B.isT1Inf && proc_control_B.tempOK) {
                proc_control_B.status = -1;
                exitg1 = 1;
              } else {
                if (proc_control_B.tempOK) {
                  proc_control_B.t_h = proc_control_B.cMin_d;
                } else if (proc_control_B.isT1Inf) {
                  proc_control_B.t_h = proc_control_B.zTa;
                } else if (proc_control_B.cMin_d < proc_control_B.zTa) {
                  proc_control_B.t_h = proc_control_B.cMin_d;
                } else {
                  proc_control_B.t_h = proc_control_B.zTa;
                }

                proc_control_B.last = 0;
                while (proc_control_B.last <= proc_control_B.nA_b) {
                  lambda->data[iC->data[proc_control_B.last] - 1] -=
                    proc_control_B.t_h *
                    proc_control_B.r_data_h[proc_control_B.last];
                  if ((iC->data[proc_control_B.last] <= b_m) && (lambda->data
                       [iC->data[proc_control_B.last] - 1] < 0.0)) {
                    lambda->data[iC->data[proc_control_B.last] - 1] = 0.0;
                  }

                  proc_control_B.last++;
                }

                lambda->data[proc_control_B.kNext] += proc_control_B.t_h;
                if ((std::abs(proc_control_B.t_h - proc_control_B.cMin_d) <
                     eps_AH2epkhQ()) && (proc_control_B.kDrop > 0)) {
                  iA->data[iC->data[proc_control_B.kDrop - 1] - 1] = false;
                  if (proc_control_B.kDrop < proc_control_B.nA_b + 1) {
                    while (proc_control_B.kDrop <= proc_control_B.nA_b) {
                      iC->data[proc_control_B.kDrop - 1] = iC->
                        data[proc_control_B.kDrop];
                      proc_control_B.kDrop++;
                    }
                  }

                  iC->data[proc_control_B.nA_b] = 0;
                  proc_control_B.nA_b--;
                }

                if (!proc_control_B.tempOK) {
                  if (*x_size == proc_control_B.z_size) {
                    proc_control_B.idx_j = *x_size;
                    for (proc_control_B.last = 0; proc_control_B.last <
                         proc_control_B.idx_j; proc_control_B.last++) {
                      x_data[proc_control_B.last] += proc_control_B.t_h *
                        proc_control_B.z_data[proc_control_B.last];
                    }
                  } else {
                    proc__binary_expand_op_pr351ewp(x_data, x_size,
                      proc_control_B.t_h, proc_control_B.z_data,
                      &proc_control_B.z_size);
                  }

                  if (std::abs(proc_control_B.t_h - proc_control_B.zTa) <
                      eps_AH2epkhQ()) {
                    if (proc_control_B.nA_b + 1 == n) {
                      proc_control_B.status = -1;
                      exitg1 = 1;
                    } else {
                      proc_control_B.nA_b++;
                      iC->data[proc_control_B.nA_b] = proc_control_B.kNext + 1;
                      proc_control_B.idx_j = proc_control_B.nA_b;
                      exitg3 = false;
                      while ((!exitg3) && (proc_control_B.idx_j + 1 > 1)) {
                        proc_control_B.last = iC->data[proc_control_B.idx_j - 1];
                        if (iC->data[proc_control_B.idx_j] > proc_control_B.last)
                        {
                          exitg3 = true;
                        } else {
                          proc_control_B.kDrop = iC->data[proc_control_B.idx_j];
                          iC->data[proc_control_B.idx_j] = proc_control_B.last;
                          iC->data[proc_control_B.idx_j - 1] =
                            proc_control_B.kDrop;
                          proc_control_B.idx_j--;
                        }
                      }

                      iA->data[proc_control_B.kNext] = true;
                      proc_control_B.kNext = -1;
                      proc_control_B.status++;
                    }
                  } else {
                    proc_control_B.status++;
                  }
                } else {
                  proc_control_B.status++;
                }
              }
            }
          } else {
            proc_control_B.cMin_d = proc_control_norm(x_data, x_size);
            if (std::abs(proc_control_B.cMin_d - proc_control_B.Xnorm0_g) >
                0.001) {
              proc_control_B.Xnorm0_g = proc_control_B.cMin_d;
              proc_control_B.last = b_varargin_1->size[0];
              b_varargin_1->size[0] = b->size[0];
              proc_c_emxEnsureCapacity_real_T(b_varargin_1, proc_control_B.last);
              proc_control_B.kNext = 0;
              while (proc_control_B.kNext <= b->size[0] - 1) {
                b_varargin_1->data[proc_control_B.kNext] = std::abs(b->
                  data[proc_control_B.kNext]);
                proc_control_B.kNext++;
              }

              proc_control_maximum2(b_varargin_1, cTol);
              proc_control_B.cTolComputed_i = false;
            }

            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    }

    proc_control_emxFree_real_T(&b_varargin_1);
    proc_control_emxFree_int32_T(&iC);
    proc_control_emxFree_real_T(&cTol);
  }

  *status = proc_control_B.status;
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_mpc_solveQP(const real_T xQP[21], int32_T nCon,
  int32_T b_degrees, const real_T Kx_data[], const real_T Kr_data[], const
  int32_T Kr_size[2], const emxArray_real_T_proc_control_T *rseq, const real_T
  Ku1_data[], const real_T old_u[8], const real_T Kv_data[], const int32_T
  Kv_size[2], const emxArray_real_T_proc_control_T *vseq, const real_T Kut_data[],
  const int32_T Kut_size[2], const real_T b_utarget_data[], const real_T
  Linv_data[], const int32_T Linv_size[2], const real_T Hinv_data[], const
  int32_T Hinv_size[2], const emxArray_real_T_proc_control_T *b_Ac, const
  emxArray_real_T_proc_control_T *Bc, const emxArray_boolean_T_proc_contr_T *iA,
  real_T zopt_data[], int32_T *zopt_size, real_T f_data[], int32_T *f_size,
  real_T *status)
{
  emxArray_boolean_T_proc_contr_T *b;
  emxArray_real_T_proc_control_T *a__1;
  proc_control_emxInit_boolean_T(&b, 1);
  *f_size = b_degrees;
  if (b_degrees - 1 >= 0) {
    std::memset(&f_data[0], 0, b_degrees * sizeof(real_T));
  }

  proc_control_B.b_i_c = 0;
  while (proc_control_B.b_i_c <= b_degrees - 2) {
    proc_control_B.Kx = 0.0;
    for (proc_control_B.i23 = 0; proc_control_B.i23 < 21; proc_control_B.i23++)
    {
      proc_control_B.Kx += Kx_data[21 * proc_control_B.b_i_c +
        proc_control_B.i23] * xQP[proc_control_B.i23];
    }

    proc_control_B.loop_ub_g = Kr_size[0];
    proc_control_B.Kr = 0.0;
    for (proc_control_B.i23 = 0; proc_control_B.i23 < proc_control_B.loop_ub_g;
         proc_control_B.i23++) {
      proc_control_B.Kr += Kr_data[Kr_size[0] * proc_control_B.b_i_c +
        proc_control_B.i23] * rseq->data[proc_control_B.i23];
    }

    proc_control_B.Ku1 = 0.0;
    for (proc_control_B.i23 = 0; proc_control_B.i23 < 8; proc_control_B.i23++) {
      proc_control_B.Ku1 += Ku1_data[(proc_control_B.b_i_c << 3) +
        proc_control_B.i23] * old_u[proc_control_B.i23];
    }

    proc_control_B.loop_ub_g = Kv_size[0];
    proc_control_B.Kv = 0.0;
    for (proc_control_B.i23 = 0; proc_control_B.i23 < proc_control_B.loop_ub_g;
         proc_control_B.i23++) {
      proc_control_B.Kv += Kv_data[Kv_size[0] * proc_control_B.b_i_c +
        proc_control_B.i23] * vseq->data[proc_control_B.i23];
    }

    proc_control_B.loop_ub_g = Kut_size[0];
    proc_control_B.Kut = 0.0;
    for (proc_control_B.i23 = 0; proc_control_B.i23 < proc_control_B.loop_ub_g;
         proc_control_B.i23++) {
      proc_control_B.Kut += Kut_data[Kut_size[0] * proc_control_B.b_i_c +
        proc_control_B.i23] * b_utarget_data[proc_control_B.i23];
    }

    f_data[proc_control_B.b_i_c] = (((proc_control_B.Kx + proc_control_B.Kr) +
      proc_control_B.Ku1) + proc_control_B.Kv) + proc_control_B.Kut;
    proc_control_B.b_i_c++;
  }

  proc_control_B.i23 = b->size[0];
  b->size[0] = iA->size[0];
  pro_emxEnsureCapacity_boolean_T(b, proc_control_B.i23);
  proc_control_B.loop_ub_g = iA->size[0];
  for (proc_control_B.i23 = 0; proc_control_B.i23 < proc_control_B.loop_ub_g;
       proc_control_B.i23++) {
    b->data[proc_control_B.i23] = iA->data[proc_control_B.i23];
  }

  proc_control_emxInit_real_T(&a__1, 1);
  proc_control_qpkwik(Linv_data, Linv_size, Hinv_data, Hinv_size, f_data, b_Ac,
                      Bc, b, nCon, b_degrees, zopt_data, zopt_size, a__1,
                      &proc_control_B.b_i_c);
  *status = proc_control_B.b_i_c;
  proc_control_emxFree_real_T(&a__1);
  if ((proc_control_B.b_i_c < 0) || (proc_control_B.b_i_c == 0)) {
    *zopt_size = b_degrees;
    if (b_degrees - 1 >= 0) {
      std::memset(&zopt_data[0], 0, b_degrees * sizeof(real_T));
    }
  }

  proc_control_emxFree_boolean_T(&b);
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_k(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B_data[], const int32_T b_B_size[2], real_T
  b_C_data[], int32_T b_C_size[2])
{
  int32_T mc;
  mc = b_A_size[1];
  b_C_size[0] = b_A_size[1];
  b_C_size[1] = b_B_size[1];
  for (int32_T j{0}; j < b_B_size[1]; j++) {
    int32_T boffset;
    int32_T coffset;
    coffset = j * mc;
    boffset = j * b_B_size[0];
    for (int32_T i{0}; i < mc; i++) {
      b_C_data[coffset + i] = 0.0;
    }

    for (int32_T i{0}; i < b_A_size[0]; i++) {
      real_T bkj;
      bkj = b_B_data[boffset + i];
      for (int32_T b_i{0}; b_i < mc; b_i++) {
        int32_T tmp;
        tmp = coffset + b_i;
        b_C_data[tmp] += b_A_data[b_i * b_A_size[0] + i] * bkj;
      }
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_kcnhu(const
  emxArray_real_T_proc_control_T *b_A, const emxArray_real_T_proc_control_T *b_B,
  emxArray_real_T_proc_control_T *b_C)
{
  int32_T i;
  int32_T mc;
  mc = b_A->size[0] - 1;
  i = b_C->size[0];
  b_C->size[0] = b_A->size[0];
  proc_c_emxEnsureCapacity_real_T(b_C, i);
  for (i = 0; i <= mc; i++) {
    b_C->data[i] = 0.0;
  }

  for (i = 0; i < b_A->size[1]; i++) {
    int32_T aoffset;
    aoffset = i * b_A->size[0];
    for (int32_T b_i{0}; b_i <= mc; b_i++) {
      b_C->data[b_i] += b_A->data[aoffset + b_i] * b_B->data[i];
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_kcnh(const emxArray_real_T_proc_control_T
  *b_A, const real_T b_B[8], emxArray_real_T_proc_control_T *b_C)
{
  int32_T k;
  k = b_C->size[0];
  b_C->size[0] = b_A->size[0];
  proc_c_emxEnsureCapacity_real_T(b_C, k);
  for (int32_T i{0}; i < b_A->size[0]; i++) {
    real_T s;
    s = 0.0;
    for (k = 0; k < 8; k++) {
      s += b_A->data[k * b_A->size[0] + i] * b_B[k];
    }

    b_C->data[i] = s;
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_kcn(const emxArray_real_T_proc_control_T *
  b_A, const real_T b_B[21], emxArray_real_T_proc_control_T *b_C)
{
  int32_T i;
  int32_T mc;
  mc = b_A->size[0] - 1;
  i = b_C->size[0];
  b_C->size[0] = b_A->size[0];
  proc_c_emxEnsureCapacity_real_T(b_C, i);
  for (i = 0; i <= mc; i++) {
    b_C->data[i] = 0.0;
  }

  for (i = 0; i < 21; i++) {
    int32_T aoffset;
    aoffset = i * b_A->size[0];
    for (int32_T b_i{0}; b_i <= mc; b_i++) {
      b_C->data[b_i] += b_A->data[aoffset + b_i] * b_B[i];
    }
  }
}

void proc_control::proc_co_binary_expand_op_pr351e
  (emxArray_real_T_proc_control_T *in1, const emxArray_real_T_proc_control_T
   *in2, const emxArray_real_T_proc_control_T *in3, real_T in4[21], const
   emxArray_real_T_proc_control_T *in5, real_T in6[8], const
   emxArray_real_T_proc_control_T *in7, const emxArray_real_T_proc_control_T
   *in8)
{
  emxArray_real_T_proc_control_T *in2_0;
  emxArray_real_T_proc_control_T *tmp;
  emxArray_real_T_proc_control_T *tmp_0;
  emxArray_real_T_proc_control_T *tmp_1;
  real_T in4_0[21];
  real_T in6_0[8];
  int32_T i;
  int32_T loop_ub;
  int32_T stride_0_0;
  int32_T stride_1_0;
  int32_T stride_2_0;
  int32_T stride_3_0;
  proc_control_emxInit_real_T(&tmp, 1);
  proc_control_emxInit_real_T(&tmp_0, 1);
  proc_control_emxInit_real_T(&tmp_1, 1);
  proc_control_emxInit_real_T(&in2_0, 1);
  std::memcpy(&in4_0[0], &in4[0], 21U * sizeof(real_T));
  proc_control_mtimes_kcn(in3, in4_0, tmp);
  std::memcpy(&in6_0[0], &in6[0], sizeof(real_T) << 3);
  proc_control_mtimes_kcnh(in5, in6_0, tmp_0);
  proc_control_mtimes_kcnhu(in7, in8, tmp_1);
  i = in2_0->size[0];
  in2_0->size[0] = tmp_1->size[0] == 1 ? tmp_0->size[0] == 1 ? tmp->size[0] == 1
    ? in2->size[0] : tmp->size[0] : tmp_0->size[0] : tmp_1->size[0];
  proc_c_emxEnsureCapacity_real_T(in2_0, i);
  stride_0_0 = (in2->size[0] != 1);
  stride_1_0 = (tmp->size[0] != 1);
  stride_2_0 = (tmp_0->size[0] != 1);
  stride_3_0 = (tmp_1->size[0] != 1);
  loop_ub = tmp_1->size[0] == 1 ? tmp_0->size[0] == 1 ? tmp->size[0] == 1 ?
    in2->size[0] : tmp->size[0] : tmp_0->size[0] : tmp_1->size[0];
  for (i = 0; i < loop_ub; i++) {
    in2_0->data[i] = -(((in2->data[i * stride_0_0] + tmp->data[i * stride_1_0])
                        + tmp_0->data[i * stride_2_0]) + tmp_1->data[i *
                       stride_3_0]);
  }

  proc_control_emxFree_real_T(&tmp_1);
  proc_control_emxFree_real_T(&tmp_0);
  proc_control_emxFree_real_T(&tmp);
  i = in1->size[0];
  in1->size[0] = in2_0->size[0];
  proc_c_emxEnsureCapacity_real_T(in1, i);
  loop_ub = in2_0->size[0];
  for (i = 0; i < loop_ub; i++) {
    in1->data[i] = in2_0->data[i];
  }

  proc_control_emxFree_real_T(&in2_0);
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_trisolve(const real_T b_A_data[], const int32_T
  b_A_size[2], real_T b_B_data[], const int32_T b_B_size[2])
{
  int32_T mB;
  int32_T n;
  int32_T y;
  mB = b_B_size[0];
  n = b_B_size[1] - 1;
  if (b_A_size[0] <= b_A_size[1]) {
    y = b_A_size[0];
  } else {
    y = b_A_size[1];
  }

  if (y > b_B_size[0]) {
    y = b_B_size[0];
  }

  if ((b_B_size[1] != 0) && ((b_B_size[0] != 0) && (b_B_size[1] != 0))) {
    for (int32_T j{0}; j <= n; j++) {
      int32_T jBcol;
      jBcol = mB * j - 1;
      for (int32_T k{1}; k - 1 < y; k++) {
        int32_T kAcol;
        int32_T tmp;
        kAcol = (k - 1) * b_A_size[0] - 1;
        tmp = k + jBcol;
        if (b_B_data[tmp] != 0.0) {
          b_B_data[tmp] /= b_A_data[k + kAcol];
          for (int32_T i{k + 1}; i <= y; i++) {
            int32_T tmp_0;
            tmp_0 = i + jBcol;
            b_B_data[tmp_0] -= b_A_data[i + kAcol] * b_B_data[tmp];
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_linsolve(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B_data[], const int32_T b_B_size[2], real_T
  b_C_data[], int32_T b_C_size[2])
{
  int32_T y;
  if (b_A_size[0] <= b_A_size[1]) {
    y = b_A_size[0];
  } else {
    y = b_A_size[1];
  }

  b_C_size[0] = static_cast<int8_T>(b_A_size[1]);
  b_C_size[1] = static_cast<int8_T>(b_B_size[1]);
  for (int32_T j{0}; j < b_B_size[1]; j++) {
    for (int32_T i{0}; i < y; i++) {
      b_C_data[i + b_C_size[0] * j] = b_B_data[b_B_size[0] * j + i];
    }

    for (int32_T i{y}; i < b_A_size[1]; i++) {
      b_C_data[i + b_C_size[0] * j] = 0.0;
    }
  }

  proc_control_trisolve(b_A_data, b_A_size, b_C_data, b_C_size);
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_eye_b(int32_T varargin_1, real_T b_I_data[],
  int32_T b_I_size[2])
{
  int32_T loop_ub;
  b_I_size[0] = varargin_1;
  b_I_size[1] = varargin_1;
  loop_ub = varargin_1 * varargin_1 - 1;
  if (loop_ub >= 0) {
    std::memset(&b_I_data[0], 0, (loop_ub + 1) * sizeof(real_T));
  }

  if (varargin_1 > 0) {
    for (loop_ub = 0; loop_ub < varargin_1; loop_ub++) {
      b_I_data[loop_ub + varargin_1 * loop_ub] = 1.0;
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
int32_T proc_control::proc_control_xpotrf(int32_T n, real_T b_A_data[], int32_T
  lda)
{
  int32_T info;
  boolean_T exitg1;
  info = 0;
  proc_control_B.j_jx = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.j_jx <= n - 1)) {
    proc_control_B.idxAjj = proc_control_B.j_jx * lda + proc_control_B.j_jx;
    proc_control_B.ssq = 0.0;
    if (proc_control_B.j_jx >= 1) {
      proc_control_B.b_ix_k = proc_control_B.j_jx;
      proc_control_B.b_iy_f = proc_control_B.j_jx;
      proc_control_B.b_k_cz = 0;
      while (proc_control_B.b_k_cz <= proc_control_B.j_jx - 1) {
        proc_control_B.ssq += b_A_data[proc_control_B.b_ix_k] *
          b_A_data[proc_control_B.b_iy_f];
        proc_control_B.b_ix_k += lda;
        proc_control_B.b_iy_f += lda;
        proc_control_B.b_k_cz++;
      }
    }

    proc_control_B.ssq = b_A_data[proc_control_B.idxAjj] - proc_control_B.ssq;
    if (proc_control_B.ssq > 0.0) {
      proc_control_B.ssq = std::sqrt(proc_control_B.ssq);
      b_A_data[proc_control_B.idxAjj] = proc_control_B.ssq;
      if (proc_control_B.j_jx + 1 < n) {
        proc_control_B.b_ix_k = (n - proc_control_B.j_jx) - 1;
        if ((proc_control_B.b_ix_k != 0) && (proc_control_B.j_jx != 0)) {
          proc_control_B.b_iy_f = proc_control_B.j_jx;
          proc_control_B.b_k_cz = ((proc_control_B.j_jx - 1) * lda +
            proc_control_B.j_jx) + 2;
          proc_control_B.iac_k = proc_control_B.j_jx + 2;
          while (((lda > 0) && (proc_control_B.iac_k <= proc_control_B.b_k_cz)) ||
                 ((lda < 0) && (proc_control_B.iac_k >= proc_control_B.b_k_cz)))
          {
            proc_control_B.c_d = -b_A_data[proc_control_B.b_iy_f];
            proc_control_B.iy_j = proc_control_B.idxAjj + 1;
            proc_control_B.d_kp = (proc_control_B.iac_k + proc_control_B.b_ix_k)
              - 1;
            proc_control_B.ia_a = proc_control_B.iac_k;
            while (proc_control_B.ia_a <= proc_control_B.d_kp) {
              b_A_data[proc_control_B.iy_j] += b_A_data[proc_control_B.ia_a - 1]
                * proc_control_B.c_d;
              proc_control_B.iy_j++;
              proc_control_B.ia_a++;
            }

            proc_control_B.b_iy_f += lda;
            proc_control_B.iac_k += lda;
          }
        }

        proc_control_B.ssq = 1.0 / proc_control_B.ssq;
        proc_control_B.b_ix_k += proc_control_B.idxAjj;
        proc_control_B.idxAjj++;
        while (proc_control_B.idxAjj + 1 <= proc_control_B.b_ix_k + 1) {
          b_A_data[proc_control_B.idxAjj] *= proc_control_B.ssq;
          proc_control_B.idxAjj++;
        }
      }

      proc_control_B.j_jx++;
    } else {
      b_A_data[proc_control_B.idxAjj] = proc_control_B.ssq;
      info = proc_control_B.j_jx + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_diag(const real_T v_data[], const int32_T
  v_size[2], real_T d_data[], int32_T *d_size)
{
  if ((v_size[0] == 1) && (v_size[1] == 1)) {
    *d_size = 1;
    d_data[0] = v_data[0];
  } else {
    int32_T dlen;
    if (v_size[1] > 0) {
      if (v_size[0] <= v_size[1]) {
        dlen = v_size[0];
      } else {
        dlen = v_size[1];
      }
    } else {
      dlen = 0;
    }

    *d_size = dlen;
    for (int32_T k{0}; k < dlen; k++) {
      d_data[k] = v_data[v_size[0] * k + k];
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
real_T proc_control::proc_control_minimum(const real_T x_data[], const int32_T
  *x_size)
{
  real_T ex;
  if (*x_size <= 2) {
    if (*x_size == 1) {
      ex = x_data[0];
    } else {
      ex = x_data[*x_size - 1];
      if (x_data[0] > ex) {
      } else if (std::isnan(x_data[0])) {
        if (!std::isnan(ex)) {
        } else {
          ex = x_data[0];
        }
      } else {
        ex = x_data[0];
      }
    }
  } else {
    int32_T idx;
    if (!std::isnan(x_data[0])) {
      idx = 1;
    } else {
      int32_T k;
      boolean_T exitg1;
      idx = 0;
      k = 2;
      exitg1 = false;
      while ((!exitg1) && (k <= *x_size)) {
        if (!std::isnan(x_data[k - 1])) {
          idx = k;
          exitg1 = true;
        } else {
          k++;
        }
      }
    }

    if (idx == 0) {
      ex = x_data[0];
    } else {
      ex = x_data[idx - 1];
      while (idx + 1 <= *x_size) {
        if (ex > x_data[idx]) {
          ex = x_data[idx];
        }

        idx++;
      }
    }
  }

  return ex;
}

void proc_control::proc_con_binary_expand_op_pr351(real_T in1_data[], int32_T
  in1_size[2], real_T in2, const int8_T in3_data[], const int32_T in3_size[2])
{
  int32_T aux_0_1;
  int32_T aux_1_1;
  int32_T in1_size_idx_0;
  int32_T in1_size_idx_1;
  int32_T loop_ub;
  int32_T stride_0_0;
  int32_T stride_0_1;
  int32_T stride_1_0;
  int32_T stride_1_1;
  in1_size_idx_0 = in3_size[0] == 1 ? in1_size[0] : in3_size[0];
  in1_size_idx_1 = in3_size[1] == 1 ? in1_size[1] : in3_size[1];
  stride_0_0 = (in1_size[0] != 1);
  stride_0_1 = (in1_size[1] != 1);
  stride_1_0 = (in3_size[0] != 1);
  stride_1_1 = (in3_size[1] != 1);
  aux_0_1 = 0;
  aux_1_1 = 0;
  loop_ub = in3_size[1] == 1 ? in1_size[1] : in3_size[1];
  for (int32_T i_0{0}; i_0 < loop_ub; i_0++) {
    int32_T loop_ub_0;
    loop_ub_0 = in3_size[0] == 1 ? in1_size[0] : in3_size[0];
    for (int32_T i{0}; i < loop_ub_0; i++) {
      proc_control_B.in1_data[i + in1_size_idx_0 * i_0] = static_cast<real_T>
        (in3_data[i * stride_1_0 + in3_size[0] * aux_1_1]) * in2 + in1_data[i *
        stride_0_0 + in1_size[0] * aux_0_1];
    }

    aux_1_1 += stride_1_1;
    aux_0_1 += stride_0_1;
  }

  in1_size[0] = in1_size_idx_0;
  in1_size[1] = in1_size_idx_1;
  for (int32_T i_0{0}; i_0 < in1_size_idx_1; i_0++) {
    for (int32_T i{0}; i < in1_size_idx_0; i++) {
      in1_data[i + in1_size[0] * i_0] = proc_control_B.in1_data[in1_size_idx_0 *
        i_0 + i];
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_mpc_checkhessian(real_T b_H_data[], int32_T
  b_H_size[2], real_T L_data[], int32_T L_size[2], real_T *BadH)
{
  boolean_T guard1{ false };

  proc_control_B.b_degrees = b_H_size[0];
  *BadH = 0.0;
  proc_control_B.emlN = b_H_size[1];
  L_size[0] = b_H_size[0];
  L_size[1] = b_H_size[1];
  proc_control_B.loop_ub_tmp_m = b_H_size[0] * b_H_size[1];
  if (proc_control_B.loop_ub_tmp_m - 1 >= 0) {
    std::memcpy(&L_data[0], &b_H_data[0], proc_control_B.loop_ub_tmp_m * sizeof
                (real_T));
  }

  proc_control_B.Tries = proc_control_xpotrf(b_H_size[1], L_data, b_H_size[1]);
  guard1 = false;
  if (proc_control_B.Tries == 0) {
    proc_control_diag(L_data, L_size, proc_control_B.tmp_data_pc,
                      &proc_control_B.tmp_size_k);
    if (proc_control_minimum(proc_control_B.tmp_data_pc,
         &proc_control_B.tmp_size_k) > 1.4901161193847656E-7) {
    } else {
      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    proc_control_B.VECTOR_INPUT_AND_P_IS_INF = false;
    proc_control_B.MATRIX_INPUT_AND_P_IS_INF = false;
    if ((b_H_size[0] == 1) || (b_H_size[1] == 1)) {
      proc_control_B.VECTOR_INPUT_AND_P_IS_INF = true;
    } else {
      proc_control_B.MATRIX_INPUT_AND_P_IS_INF = true;
    }

    if ((b_H_size[0] == 0) || (b_H_size[1] == 0)) {
      proc_control_B.normH = 0.0;
    } else if (proc_control_B.MATRIX_INPUT_AND_P_IS_INF) {
      boolean_T exitg2;
      proc_control_B.normH = 0.0;
      proc_control_B.Tries = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.Tries <= b_H_size[0] - 1)) {
        proc_control_B.absx = 0.0;
        proc_control_B.loop_ub_an = 0;
        while (proc_control_B.loop_ub_an <= b_H_size[1] - 1) {
          proc_control_B.absx += std::abs(b_H_data[b_H_size[0] *
            proc_control_B.loop_ub_an + proc_control_B.Tries]);
          proc_control_B.loop_ub_an++;
        }

        if (std::isnan(proc_control_B.absx)) {
          proc_control_B.normH = (rtNaN);
          exitg2 = true;
        } else {
          if (proc_control_B.absx > proc_control_B.normH) {
            proc_control_B.normH = proc_control_B.absx;
          }

          proc_control_B.Tries++;
        }
      }
    } else if (proc_control_B.VECTOR_INPUT_AND_P_IS_INF) {
      proc_control_B.normH = 0.0;
      proc_control_B.loop_ub_an = 0;
      while (proc_control_B.loop_ub_an <= proc_control_B.loop_ub_tmp_m - 1) {
        proc_control_B.absx = std::abs(b_H_data[proc_control_B.loop_ub_an]);
        if (std::isnan(proc_control_B.absx)) {
          proc_control_B.normH = proc_control_B.absx;
        } else if (proc_control_B.absx > proc_control_B.normH) {
          proc_control_B.normH = proc_control_B.absx;
        }

        proc_control_B.loop_ub_an++;
      }
    } else {
      proc_control_B.normH = (rtNaN);
    }

    if (proc_control_B.normH >= 1.0E+10) {
      *BadH = 2.0;
    } else {
      boolean_T exitg1;
      proc_control_B.Tries = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.Tries <= 4)) {
        boolean_T guard2{ false };

        proc_control_B.normH = rt_powd_snf(10.0, static_cast<real_T>
          (proc_control_B.Tries)) * 1.4901161193847656E-7;
        proc_control_B.b_size_e[0] = proc_control_B.b_degrees;
        proc_control_B.b_size_e[1] = proc_control_B.b_degrees;
        proc_control_B.loop_ub_an = proc_control_B.b_degrees *
          proc_control_B.b_degrees - 1;
        if (proc_control_B.loop_ub_an >= 0) {
          std::memset(&proc_control_B.b_data[0], 0, (proc_control_B.loop_ub_an +
            1) * sizeof(int8_T));
        }

        if (proc_control_B.b_degrees > 0) {
          proc_control_B.loop_ub_an = 0;
          while (proc_control_B.loop_ub_an <= proc_control_B.b_degrees - 1) {
            proc_control_B.b_data[proc_control_B.loop_ub_an +
              proc_control_B.b_degrees * proc_control_B.loop_ub_an] = 1;
            proc_control_B.loop_ub_an++;
          }
        }

        if ((b_H_size[0] == proc_control_B.b_degrees) && (b_H_size[1] ==
             proc_control_B.b_degrees)) {
          proc_control_B.loop_ub_an = b_H_size[0] * b_H_size[1];
          for (proc_control_B.loop_ub_tmp_m = 0; proc_control_B.loop_ub_tmp_m <
               proc_control_B.loop_ub_an; proc_control_B.loop_ub_tmp_m++) {
            b_H_data[proc_control_B.loop_ub_tmp_m] += static_cast<real_T>
              (proc_control_B.b_data[proc_control_B.loop_ub_tmp_m]) *
              proc_control_B.normH;
          }
        } else {
          proc_con_binary_expand_op_pr351(b_H_data, b_H_size,
            proc_control_B.normH, proc_control_B.b_data, proc_control_B.b_size_e);
        }

        L_size[0] = b_H_size[0];
        L_size[1] = b_H_size[1];
        proc_control_B.loop_ub_an = b_H_size[0] * b_H_size[1];
        if (proc_control_B.loop_ub_an - 1 >= 0) {
          std::memcpy(&L_data[0], &b_H_data[0], proc_control_B.loop_ub_an *
                      sizeof(real_T));
        }

        proc_control_B.loop_ub_an = proc_control_xpotrf(proc_control_B.emlN,
          L_data, proc_control_B.emlN);
        guard2 = false;
        if (proc_control_B.loop_ub_an == 0) {
          proc_control_diag(L_data, L_size, proc_control_B.tmp_data_pc,
                            &proc_control_B.tmp_size_k);
          if (proc_control_minimum(proc_control_B.tmp_data_pc,
               &proc_control_B.tmp_size_k) > 1.4901161193847656E-7) {
            *BadH = 1.0;
            exitg1 = true;
          } else {
            guard2 = true;
          }
        } else {
          guard2 = true;
        }

        if (guard2) {
          *BadH = 3.0;
          proc_control_B.Tries++;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_WtMult(const real_T W[8], const real_T M_data[],
  const int32_T M_size[2], real_T WM_data[], int32_T WM_size[2])
{
  int32_T loop_ub;
  int16_T ixw;
  int8_T b_idx_0;
  b_idx_0 = static_cast<int8_T>(M_size[0]);
  WM_size[0] = static_cast<int8_T>(M_size[0]);
  WM_size[1] = static_cast<int8_T>(M_size[1]);
  loop_ub = static_cast<int8_T>(M_size[0]) * static_cast<int8_T>(M_size[1]) - 1;
  if (loop_ub >= 0) {
    std::memset(&WM_data[0], 0, (loop_ub + 1) * sizeof(real_T));
  }

  ixw = 1;
  for (int32_T i{0}; i < b_idx_0; i++) {
    real_T W_0;
    W_0 = W[ixw - 1];
    loop_ub = M_size[1];
    for (int32_T i_0{0}; i_0 < loop_ub; i_0++) {
      WM_data[i + WM_size[0] * i_0] = M_data[M_size[0] * i_0 + i] * W_0;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 8) {
      ixw = 1;
    }
  }
}

void proc_control::proc_cont_binary_expand_op_pr35(real_T in1_data[], int32_T
  in1_size[2], const real_T in2_data[], const int32_T in2_size[2], const real_T
  in3_data[], const int32_T in3_size[2], const real_T in4_data[], const int32_T
  in4_size[2], real_T in5[8], const real_T in6_data[], const int32_T in6_size[2],
  const real_T in7_data[], const int32_T in7_size[2])
{
  real_T in5_0[8];
  int32_T in2_size_0[2];
  int32_T in3_size_0[2];
  int32_T in4_size_0[2];
  int32_T in7_size_0[2];
  int32_T tmp_size[2];
  int32_T aux_0_1;
  int32_T aux_1_1;
  int32_T aux_2_1;
  int32_T loop_ub;
  int32_T stride_0_0;
  int32_T stride_0_1;
  int32_T stride_1_0;
  int32_T stride_1_1;
  int32_T stride_2_0;
  int32_T stride_2_1;
  for (int32_T i_0{0}; i_0 < 2; i_0++) {
    in2_size_0[i_0] = in2_size[i_0];
  }

  for (int32_T i_0{0}; i_0 < 2; i_0++) {
    in3_size_0[i_0] = in3_size[i_0];
  }

  proc_control_mtimes_k(in2_data, in2_size_0, in3_data, in3_size_0,
                        proc_control_B.tmp_data_n, tmp_size);
  std::memcpy(&in5_0[0], &in5[0], sizeof(real_T) << 3);
  for (int32_T i_0{0}; i_0 < 2; i_0++) {
    in4_size_0[i_0] = in4_size[i_0];
  }

  proc_control_WtMult(in5_0, in4_data, in4_size_0, proc_control_B.tmp_data_d,
                      in2_size_0);
  for (int32_T i_0{0}; i_0 < 2; i_0++) {
    in4_size_0[i_0] = in4_size[i_0];
  }

  proc_control_mtimes_k(in4_data, in4_size_0, proc_control_B.tmp_data_d,
                        in2_size_0, proc_control_B.tmp_data_pp, in3_size_0);
  for (int32_T i_0{0}; i_0 < 2; i_0++) {
    in4_size_0[i_0] = in6_size[i_0];
  }

  for (int32_T i_0{0}; i_0 < 2; i_0++) {
    in7_size_0[i_0] = in7_size[i_0];
  }

  proc_control_mtimes_k(in6_data, in4_size_0, in7_data, in7_size_0,
                        proc_control_B.tmp_data_l, in2_size_0);
  in1_size[0] = in2_size_0[0] == 1 ? in3_size_0[0] == 1 ? tmp_size[0] :
    in3_size_0[0] : in2_size_0[0];
  in1_size[1] = in2_size_0[1] == 1 ? in3_size_0[1] == 1 ? tmp_size[1] :
    in3_size_0[1] : in2_size_0[1];
  stride_0_0 = (tmp_size[0] != 1);
  stride_0_1 = (tmp_size[1] != 1);
  stride_1_0 = (in3_size_0[0] != 1);
  stride_1_1 = (in3_size_0[1] != 1);
  stride_2_0 = (in2_size_0[0] != 1);
  stride_2_1 = (in2_size_0[1] != 1);
  aux_0_1 = 0;
  aux_1_1 = 0;
  aux_2_1 = 0;
  loop_ub = in2_size_0[1] == 1 ? in3_size_0[1] == 1 ? tmp_size[1] : in3_size_0[1]
    : in2_size_0[1];
  for (int32_T i_0{0}; i_0 < loop_ub; i_0++) {
    int32_T loop_ub_0;
    loop_ub_0 = in2_size_0[0] == 1 ? in3_size_0[0] == 1 ? tmp_size[0] :
      in3_size_0[0] : in2_size_0[0];
    for (int32_T i{0}; i < loop_ub_0; i++) {
      in1_data[i + in1_size[0] * i_0] = (proc_control_B.tmp_data_n[i *
        stride_0_0 + tmp_size[0] * aux_0_1] + proc_control_B.tmp_data_pp[i *
        stride_1_0 + in3_size_0[0] * aux_1_1]) + proc_control_B.tmp_data_l[i *
        stride_2_0 + in2_size_0[0] * aux_2_1];
    }

    aux_2_1 += stride_2_1;
    aux_1_1 += stride_1_1;
    aux_0_1 += stride_0_1;
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes_kc(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B_data[], const int32_T b_B_size[2], real_T
  b_C_data[], int32_T b_C_size[2])
{
  b_C_size[0] = 8;
  b_C_size[1] = b_B_size[1];
  for (int32_T j{0}; j < b_B_size[1]; j++) {
    int32_T boffset;
    int32_T coffset;
    coffset = j << 3;
    boffset = j * b_B_size[0];
    std::memset(&b_C_data[coffset], 0, sizeof(real_T) << 3U);
    for (int32_T i{0}; i < b_A_size[0]; i++) {
      real_T bkj;
      bkj = b_B_data[boffset + i];
      for (int32_T b_i{0}; b_i < 8; b_i++) {
        int32_T tmp;
        tmp = coffset + b_i;
        b_C_data[tmp] += b_A_data[b_i * b_A_size[0] + i] * bkj;
      }
    }
  }
}

void proc_control::proc_contr_binary_expand_op_pr3(real_T in1_data[], int32_T
  in1_size[2], const real_T in2_data[], const int32_T in2_size[2], const real_T
  in3_data[], const int32_T in3_size[2], const real_T in4_data[], const int32_T
  in4_size[2], const real_T in5_data[], const int32_T in5_size[2])
{
  int32_T in2_size_0[2];
  int32_T in3_size_0[2];
  int32_T tmp_size[2];
  int32_T tmp_size_0[2];
  int32_T aux_0_1;
  int32_T aux_1_1;
  int32_T loop_ub;
  int32_T stride_0_1;
  int32_T stride_1_1;
  for (int32_T i_0{0}; i_0 < 2; i_0++) {
    in2_size_0[i_0] = in2_size[i_0];
  }

  for (int32_T i_0{0}; i_0 < 2; i_0++) {
    in3_size_0[i_0] = in3_size[i_0];
  }

  proc_control_mtimes_kc(in2_data, in2_size_0, in3_data, in3_size_0,
    proc_control_B.tmp_data_m3, tmp_size);
  for (int32_T i_0{0}; i_0 < 2; i_0++) {
    in2_size_0[i_0] = in4_size[i_0];
  }

  for (int32_T i_0{0}; i_0 < 2; i_0++) {
    in3_size_0[i_0] = in5_size[i_0];
  }

  proc_control_mtimes_kc(in4_data, in2_size_0, in5_data, in3_size_0,
    proc_control_B.tmp_data_ja, tmp_size_0);
  in1_size[0] = 8;
  in1_size[1] = tmp_size_0[1] == 1 ? tmp_size[1] : tmp_size_0[1];
  stride_0_1 = (tmp_size[1] != 1);
  stride_1_1 = (tmp_size_0[1] != 1);
  aux_0_1 = 0;
  aux_1_1 = 0;
  loop_ub = tmp_size_0[1] == 1 ? tmp_size[1] : tmp_size_0[1];
  for (int32_T i_0{0}; i_0 < loop_ub; i_0++) {
    for (int32_T i{0}; i < 8; i++) {
      in1_data[i + (i_0 << 3)] = proc_control_B.tmp_data_m3[(aux_0_1 << 3) + i]
        + proc_control_B.tmp_data_ja[(aux_1_1 << 3) + i];
    }

    aux_1_1 += stride_1_1;
    aux_0_1 += stride_0_1;
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_contr_mpc_calculatehessian(const real_T b_Wy[13], const
  real_T b_Wu[8], const real_T b_Wdu[8], const real_T SuJm_data[], const int32_T
  SuJm_size[2], const real_T I2Jm_data[], const int32_T I2Jm_size[2], const
  real_T Jm_data[], const int32_T Jm_size[2], const real_T I1_data[], const
  int32_T I1_size[2], const real_T Su1_data[], const int32_T Su1_size[2], const
  real_T Sx_data[], const int32_T Sx_size[2], const real_T Hv_data[], const
  int32_T Hv_size[2], real_T b_H_data[], int32_T b_H_size[2], real_T Ku1_data[],
  int32_T Ku1_size[2], real_T Kut_data[], int32_T Kut_size[2], real_T Kx_data[],
  int32_T Kx_size[2], real_T Kv_data[], int32_T Kv_size[2], real_T Kr_data[],
  int32_T Kr_size[2])
{
  real_T bkj;
  int32_T tmp_size[2];
  int32_T tmp_size_0[2];
  int32_T tmp_size_1[2];
  int32_T tmp_size_2[2];
  int32_T tmp_size_3[2];
  int32_T tmp_size_4[2];
  int32_T tmp_size_5[2];
  int32_T tmp_size_6[2];
  int32_T tmp_size_7[2];
  int32_T tmp_size_8[2];
  int32_T i_0;
  int32_T loop_ub;
  int16_T ixw;
  uint8_T b_idx_0;
  b_idx_0 = static_cast<uint8_T>(SuJm_size[0]);
  Kr_size[0] = static_cast<uint8_T>(SuJm_size[0]);
  Kr_size[1] = static_cast<uint8_T>(SuJm_size[1]);
  loop_ub = static_cast<uint8_T>(SuJm_size[0]) * static_cast<uint8_T>(SuJm_size
    [1]) - 1;
  if (loop_ub >= 0) {
    std::memset(&Kr_data[0], 0, (loop_ub + 1) * sizeof(real_T));
  }

  ixw = 1;
  for (int32_T i{0}; i < b_idx_0; i++) {
    bkj = b_Wy[ixw - 1];
    loop_ub = SuJm_size[1];
    for (i_0 = 0; i_0 < loop_ub; i_0++) {
      Kr_data[i + Kr_size[0] * i_0] = SuJm_data[SuJm_size[0] * i_0 + i] * bkj;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 13) {
      ixw = 1;
    }
  }

  proc_control_WtMult(b_Wu, I2Jm_data, I2Jm_size, Kut_data, Kut_size);
  proc_control_mtimes_k(SuJm_data, SuJm_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_p, tmp_size);
  proc_control_mtimes_k(SuJm_data, SuJm_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_c, tmp_size_0);
  proc_control_mtimes_k(SuJm_data, SuJm_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_p, tmp_size_1);
  proc_control_WtMult(b_Wdu, Jm_data, Jm_size, proc_control_B.tmp_data_j,
                      tmp_size_2);
  proc_control_mtimes_k(Jm_data, Jm_size, proc_control_B.tmp_data_j, tmp_size_2,
                        proc_control_B.tmp_data_p, tmp_size_3);
  proc_control_mtimes_k(SuJm_data, SuJm_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_p, tmp_size_2);
  proc_control_WtMult(b_Wdu, Jm_data, Jm_size, proc_control_B.tmp_data_j,
                      tmp_size_4);
  proc_control_mtimes_k(Jm_data, Jm_size, proc_control_B.tmp_data_j, tmp_size_4,
                        proc_control_B.tmp_data_p, tmp_size_5);
  proc_control_WtMult(b_Wdu, Jm_data, Jm_size, proc_control_B.tmp_data_j,
                      tmp_size_4);
  proc_control_mtimes_k(Jm_data, Jm_size, proc_control_B.tmp_data_j, tmp_size_4,
                        proc_control_B.tmp_data_p, tmp_size_6);
  proc_control_mtimes_k(I2Jm_data, I2Jm_size, Kut_data, Kut_size,
                        proc_control_B.tmp_data_p, tmp_size_4);
  proc_control_WtMult(b_Wdu, Jm_data, Jm_size, proc_control_B.tmp_data_j,
                      tmp_size_7);
  proc_control_mtimes_k(Jm_data, Jm_size, proc_control_B.tmp_data_j, tmp_size_7,
                        proc_control_B.tmp_data_p, tmp_size_8);
  proc_control_mtimes_k(I2Jm_data, I2Jm_size, Kut_data, Kut_size,
                        proc_control_B.tmp_data_p, tmp_size_7);
  if ((tmp_size_1[0] == tmp_size_3[0]) && (tmp_size_2[1] == tmp_size_5[1]) &&
      ((tmp_size[0] == 1 ? tmp_size_6[0] : tmp_size[0]) == tmp_size_4[0]) &&
      ((tmp_size_0[1] == 1 ? tmp_size_8[1] : tmp_size_0[1]) == tmp_size_7[1])) {
    proc_control_mtimes_k(SuJm_data, SuJm_size, Kr_data, Kr_size,
                          proc_control_B.tmp_data_p, tmp_size);
    proc_control_WtMult(b_Wdu, Jm_data, Jm_size, proc_control_B.tmp_data_j,
                        tmp_size_1);
    proc_control_mtimes_k(Jm_data, Jm_size, proc_control_B.tmp_data_j,
                          tmp_size_1, proc_control_B.tmp_data_c, tmp_size_0);
    proc_control_mtimes_k(I2Jm_data, I2Jm_size, Kut_data, Kut_size,
                          proc_control_B.tmp_data_f, tmp_size_0);
    b_H_size[0] = tmp_size[0];
    b_H_size[1] = tmp_size[1];
    loop_ub = tmp_size[0] * tmp_size[1];
    for (i_0 = 0; i_0 < loop_ub; i_0++) {
      b_H_data[i_0] = (proc_control_B.tmp_data_p[i_0] +
                       proc_control_B.tmp_data_c[i_0]) +
        proc_control_B.tmp_data_f[i_0];
    }
  } else {
    proc_cont_binary_expand_op_pr35(b_H_data, b_H_size, *(real_T (*)[])&
      SuJm_data[0], *(int32_T (*)[2])&SuJm_size[0], Kr_data, Kr_size, *(real_T (*)
      [])&Jm_data[0], *(int32_T (*)[2])&Jm_size[0], *(real_T (*)[8])&b_Wdu[0],
      *(real_T (*)[])&I2Jm_data[0], *(int32_T (*)[2])&I2Jm_size[0], Kut_data,
      Kut_size);
  }

  proc_control_mtimes_kc(Su1_data, Su1_size, Kr_data, Kr_size,
    proc_control_B.tmp_data_m, tmp_size);
  proc_control_mtimes_kc(I1_data, I1_size, Kut_data, Kut_size,
    proc_control_B.tmp_data_m, tmp_size_0);
  if (tmp_size[1] == tmp_size_0[1]) {
    proc_control_mtimes_kc(Su1_data, Su1_size, Kr_data, Kr_size,
      proc_control_B.tmp_data_m, tmp_size);
    proc_control_mtimes_kc(I1_data, I1_size, Kut_data, Kut_size,
      proc_control_B.tmp_data_cz, tmp_size_0);
    Ku1_size[0] = 8;
    Ku1_size[1] = tmp_size[1];
    loop_ub = tmp_size[1] << 3;
    for (i_0 = 0; i_0 < loop_ub; i_0++) {
      Ku1_data[i_0] = proc_control_B.tmp_data_m[i_0] +
        proc_control_B.tmp_data_cz[i_0];
    }
  } else {
    proc_contr_binary_expand_op_pr3(Ku1_data, Ku1_size, *(real_T (*)[])&
      Su1_data[0], *(int32_T (*)[2])&Su1_size[0], Kr_data, Kr_size, *(real_T (*)
      [])&I1_data[0], *(int32_T (*)[2])&I1_size[0], Kut_data, Kut_size);
  }

  loop_ub = Kut_size[0] * Kut_size[1];
  for (i_0 = 0; i_0 < loop_ub; i_0++) {
    Kut_data[i_0] = -Kut_data[i_0];
  }

  Kx_size[0] = 21;
  Kx_size[1] = Kr_size[1];
  for (int32_T i{0}; i < Kr_size[1]; i++) {
    int32_T boffset;
    int32_T coffset;
    coffset = i * 21;
    boffset = i * Kr_size[0];
    std::memset(&Kx_data[coffset], 0, 21U * sizeof(real_T));
    for (loop_ub = 0; loop_ub < Sx_size[0]; loop_ub++) {
      bkj = Kr_data[boffset + loop_ub];
      for (int32_T c_i{0}; c_i < 21; c_i++) {
        i_0 = coffset + c_i;
        Kx_data[i_0] += Sx_data[c_i * Sx_size[0] + loop_ub] * bkj;
      }
    }
  }

  proc_control_mtimes_k(Hv_data, Hv_size, Kr_data, Kr_size,
                        proc_control_B.tmp_data_p, tmp_size);
  Kv_size[0] = tmp_size[0];
  Kv_size[1] = tmp_size[1];
  loop_ub = tmp_size[0] * tmp_size[1];
  if (loop_ub - 1 >= 0) {
    std::memcpy(&Kv_data[0], &proc_control_B.tmp_data_p[0], loop_ub * sizeof
                (real_T));
  }

  loop_ub = Kr_size[0] * Kr_size[1];
  for (i_0 = 0; i_0 < loop_ub; i_0++) {
    Kr_data[i_0] = -Kr_data[i_0];
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_mtimes(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B_data[], const int32_T b_B_size[2], real_T
  b_C_data[], int32_T b_C_size[2])
{
  proc_control_B.mc = b_A_size[0];
  b_C_size[0] = b_A_size[0];
  b_C_size[1] = b_B_size[1];
  proc_control_B.j_g = 0;
  while (proc_control_B.j_g <= b_B_size[1] - 1) {
    proc_control_B.coffset = proc_control_B.j_g * proc_control_B.mc;
    proc_control_B.boffset = proc_control_B.j_g * b_B_size[0];
    proc_control_B.i_c = 0;
    while (proc_control_B.i_c <= proc_control_B.mc - 1) {
      b_C_data[proc_control_B.coffset + proc_control_B.i_c] = 0.0;
      proc_control_B.i_c++;
    }

    proc_control_B.i_c = 0;
    while (proc_control_B.i_c <= b_A_size[1] - 1) {
      proc_control_B.aoffset = proc_control_B.i_c * b_A_size[0];
      proc_control_B.bkj = b_B_data[proc_control_B.boffset + proc_control_B.i_c];
      proc_control_B.b_i = 1;
      while (proc_control_B.b_i - 1 <= proc_control_B.mc - 1) {
        proc_control_B.i3 = (proc_control_B.coffset + proc_control_B.b_i) - 1;
        b_C_data[proc_control_B.i3] += b_A_data[(proc_control_B.aoffset +
          proc_control_B.b_i) - 1] * proc_control_B.bkj;
        proc_control_B.b_i++;
      }

      proc_control_B.i_c++;
    }

    proc_control_B.j_g++;
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_kron_b(const real_T b_A_data[], const int32_T
  b_A_size[2], const real_T b_B[64], real_T K_data[], int32_T K_size[2])
{
  int32_T kidx;
  K_size[0] = static_cast<int8_T>(b_A_size[0] << 3);
  K_size[1] = static_cast<int8_T>(b_A_size[1] << 3);
  kidx = -1;
  for (int32_T b_j1{0}; b_j1 < b_A_size[1]; b_j1++) {
    for (int32_T j2{0}; j2 < 8; j2++) {
      for (int32_T i1{0}; i1 < b_A_size[0]; i1++) {
        for (int32_T i2{0}; i2 < 8; i2++) {
          K_data[(kidx + i2) + 1] = b_B[(j2 << 3) + i2] * b_A_data[b_A_size[0] *
            b_j1 + i1];
        }

        kidx += 8;
      }
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_tril(real_T x_data[], const int32_T x_size[2])
{
  int32_T b_m;
  int32_T n;
  b_m = x_size[0];
  n = x_size[1];
  if (x_size[1] > 1) {
    int32_T iend;
    iend = 1;
    for (int32_T j{2}; j <= n; j++) {
      for (int32_T i{0}; i < iend; i++) {
        x_data[i + x_size[0] * (j - 1)] = 0.0;
      }

      if (iend < b_m) {
        iend++;
      }
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_eye(real_T b_I[64])
{
  int32_T k_0;
  std::memset(&b_I[0], 0, sizeof(real_T) << 6U);
  k_0 = 0;
  for (int32_T k{0}; k < 8; k++) {
    b_I[k_0] = 1.0;
    k_0 += 9;
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
int32_T proc_control::proc_cont_combineVectorElements(const boolean_T x_data[],
  const int32_T *x_size)
{
  int32_T y;
  y = x_data[0];
  for (int32_T k{2}; k <= *x_size; k++) {
    y += x_data[k - 1];
  }

  return y;
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_repmat_f(const boolean_T a[8], int32_T
  varargin_1, boolean_T b_data[], int32_T *b_size)
{
  *b_size = static_cast<int8_T>(varargin_1 << 3);
  proc_control_B.itilerow = 0;
  while (proc_control_B.itilerow <= varargin_1 - 1) {
    proc_control_B.ibcol = proc_control_B.itilerow << 3;
    for (proc_control_B.k_py = 0; proc_control_B.k_py < 8; proc_control_B.k_py++)
    {
      b_data[proc_control_B.ibcol + proc_control_B.k_py] = a[proc_control_B.k_py];
    }

    proc_control_B.itilerow++;
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_repmat(const real_T a[8], int32_T varargin_1,
  real_T b_data[], int32_T *b_size)
{
  *b_size = static_cast<int8_T>(varargin_1 << 3);
  proc_control_B.itilerow_n = 0;
  while (proc_control_B.itilerow_n <= varargin_1 - 1) {
    proc_control_B.ibcol_b = proc_control_B.itilerow_n << 3;
    std::memcpy(&b_data[proc_control_B.ibcol_b], &a[0], sizeof(real_T) << 3U);
    proc_control_B.itilerow_n++;
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_contro_Mrows_reshape_c5gfi(boolean_T isMrows_data[],
  real_T Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436],
  const real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T
  ioff)
{
  if (b_p <= 1) {
    proc_control_B.isMrows_tmp_n = b_p << 3;
    proc_control_B.s_bp = proc_control_B.isMrows_tmp_n;
    if (proc_control_B.isMrows_tmp_n + 428 < 429) {
      proc_control_B.u_p = 0;
      proc_control_B.s_bp = -428;
    } else {
      proc_control_B.u_p = 428;
    }

    for (proc_control_B.i30 = 0; proc_control_B.i30 <
         proc_control_B.isMrows_tmp_n; proc_control_B.i30++) {
      proc_control_B.v_data_dv[proc_control_B.i30] = (proc_control_B.i30 + ioff)
        + 1;
    }

    proc_control_B.s_bp -= proc_control_B.u_p;
    for (proc_control_B.i30 = 0; proc_control_B.i30 <= proc_control_B.s_bp + 427;
         proc_control_B.i30++) {
      isMrows_data[proc_control_B.v_data_dv[proc_control_B.i30] - 1] =
        isMrows0[proc_control_B.u_p + proc_control_B.i30];
    }

    proc_control_B.s_bp = proc_control_B.isMrows_tmp_n;
    if (proc_control_B.isMrows_tmp_n + 428 < 429) {
      proc_control_B.u_p = 0;
      proc_control_B.s_bp = -428;
    } else {
      proc_control_B.u_p = 428;
    }

    proc_control_B.s_bp -= proc_control_B.u_p;
    for (proc_control_B.i30 = 0; proc_control_B.i30 <= proc_control_B.s_bp + 427;
         proc_control_B.i30++) {
      Mlimfull_data[proc_control_B.v_data_dv[proc_control_B.i30] - 1] =
        Mlimfull0[proc_control_B.u_p + proc_control_B.i30];
    }

    proc_control_B.s_bp = proc_control_B.isMrows_tmp_n;
    if (proc_control_B.isMrows_tmp_n + 428 < 429) {
      proc_control_B.u_p = 0;
      proc_control_B.s_bp = -428;
    } else {
      proc_control_B.u_p = 428;
    }

    proc_control_B.s_bp -= proc_control_B.u_p;
    for (proc_control_B.i30 = 0; proc_control_B.i30 <= proc_control_B.s_bp + 427;
         proc_control_B.i30++) {
      Vfull_data[proc_control_B.v_data_dv[proc_control_B.i30] - 1] =
        Vfull0[proc_control_B.u_p + proc_control_B.i30];
    }
  } else {
    std::memcpy(&Mlimfull_data[ioff], &Mlimfull0[428], sizeof(real_T) << 3U);
    std::memcpy(&Vfull_data[ioff], &Vfull0[428], sizeof(real_T) << 3U);
    for (proc_control_B.i30 = 0; proc_control_B.i30 < 8; proc_control_B.i30++) {
      proc_control_B.isMrows_tmp_n = (proc_control_B.i30 + ioff) + 1;
      isMrows_data[proc_control_B.isMrows_tmp_n - 1] =
        isMrows0[proc_control_B.i30 + 428];
    }

    proc_control_B.isMrows_tmp_n = (b_p << 3) + ioff;
    if (ioff + 9 > proc_control_B.isMrows_tmp_n) {
      proc_control_B.u_p = -8;
      proc_control_B.s_bp = -8;
    } else {
      proc_control_B.u_p = ioff;
      proc_control_B.s_bp = proc_control_B.isMrows_tmp_n - 8;
    }

    proc_control_repmat_f(&isMrows0[428], b_p - 1, proc_control_B.tmp_data_ce,
                          &proc_control_B.tmp_size_j);
    proc_control_B.s_bp -= proc_control_B.u_p;
    for (proc_control_B.i30 = 0; proc_control_B.i30 < proc_control_B.s_bp;
         proc_control_B.i30++) {
      isMrows_data[(proc_control_B.u_p + proc_control_B.i30) + 8] =
        proc_control_B.tmp_data_ce[proc_control_B.i30];
    }

    if (ioff + 9 > proc_control_B.isMrows_tmp_n) {
      proc_control_B.u_p = -8;
      proc_control_B.s_bp = -8;
    } else {
      proc_control_B.u_p = ioff;
      proc_control_B.s_bp = proc_control_B.isMrows_tmp_n - 8;
    }

    proc_control_repmat(&Mlimfull0[428], b_p - 1, proc_control_B.tmp_data_nb,
                        &proc_control_B.tmp_size_j);
    proc_control_B.s_bp -= proc_control_B.u_p;
    for (proc_control_B.i30 = 0; proc_control_B.i30 < proc_control_B.s_bp;
         proc_control_B.i30++) {
      Mlimfull_data[(proc_control_B.u_p + proc_control_B.i30) + 8] =
        proc_control_B.tmp_data_nb[proc_control_B.i30];
    }

    if (ioff + 9 > proc_control_B.isMrows_tmp_n) {
      proc_control_B.u_p = -8;
      proc_control_B.s_bp = -8;
    } else {
      proc_control_B.u_p = ioff;
      proc_control_B.s_bp = proc_control_B.isMrows_tmp_n - 8;
    }

    proc_control_repmat(&Vfull0[428], b_p - 1, proc_control_B.tmp_data_nb,
                        &proc_control_B.tmp_size_j);
    proc_control_B.s_bp -= proc_control_B.u_p;
    for (proc_control_B.i30 = 0; proc_control_B.i30 < proc_control_B.s_bp;
         proc_control_B.i30++) {
      Vfull_data[(proc_control_B.u_p + proc_control_B.i30) + 8] =
        proc_control_B.tmp_data_nb[proc_control_B.i30];
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape_c5gf(boolean_T isMrows_data[],
  real_T Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436],
  const real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T
  ioff)
{
  if (b_p <= 1) {
    proc_control_B.isMrows_tmp = b_p << 3;
    proc_control_B.s_d = proc_control_B.isMrows_tmp;
    if (proc_control_B.isMrows_tmp + 420 < 421) {
      proc_control_B.u_h = 0;
      proc_control_B.s_d = -420;
    } else {
      proc_control_B.u_h = 420;
    }

    for (proc_control_B.i29 = 0; proc_control_B.i29 < proc_control_B.isMrows_tmp;
         proc_control_B.i29++) {
      proc_control_B.v_data_d[proc_control_B.i29] = (proc_control_B.i29 + ioff)
        + 1;
    }

    proc_control_B.s_d -= proc_control_B.u_h;
    for (proc_control_B.i29 = 0; proc_control_B.i29 <= proc_control_B.s_d + 419;
         proc_control_B.i29++) {
      isMrows_data[proc_control_B.v_data_d[proc_control_B.i29] - 1] =
        isMrows0[proc_control_B.u_h + proc_control_B.i29];
    }

    proc_control_B.s_d = proc_control_B.isMrows_tmp;
    if (proc_control_B.isMrows_tmp + 420 < 421) {
      proc_control_B.u_h = 0;
      proc_control_B.s_d = -420;
    } else {
      proc_control_B.u_h = 420;
    }

    proc_control_B.s_d -= proc_control_B.u_h;
    for (proc_control_B.i29 = 0; proc_control_B.i29 <= proc_control_B.s_d + 419;
         proc_control_B.i29++) {
      Mlimfull_data[proc_control_B.v_data_d[proc_control_B.i29] - 1] =
        Mlimfull0[proc_control_B.u_h + proc_control_B.i29];
    }

    proc_control_B.s_d = proc_control_B.isMrows_tmp;
    if (proc_control_B.isMrows_tmp + 420 < 421) {
      proc_control_B.u_h = 0;
      proc_control_B.s_d = -420;
    } else {
      proc_control_B.u_h = 420;
    }

    proc_control_B.s_d -= proc_control_B.u_h;
    for (proc_control_B.i29 = 0; proc_control_B.i29 <= proc_control_B.s_d + 419;
         proc_control_B.i29++) {
      Vfull_data[proc_control_B.v_data_d[proc_control_B.i29] - 1] =
        Vfull0[proc_control_B.u_h + proc_control_B.i29];
    }
  } else {
    std::memcpy(&Mlimfull_data[ioff], &Mlimfull0[420], sizeof(real_T) << 3U);
    std::memcpy(&Vfull_data[ioff], &Vfull0[420], sizeof(real_T) << 3U);
    for (proc_control_B.i29 = 0; proc_control_B.i29 < 8; proc_control_B.i29++) {
      proc_control_B.isMrows_tmp = (proc_control_B.i29 + ioff) + 1;
      isMrows_data[proc_control_B.isMrows_tmp - 1] = isMrows0[proc_control_B.i29
        + 420];
    }

    proc_control_B.isMrows_tmp = (b_p << 3) + ioff;
    if (ioff + 9 > proc_control_B.isMrows_tmp) {
      proc_control_B.u_h = -8;
      proc_control_B.s_d = -8;
    } else {
      proc_control_B.u_h = ioff;
      proc_control_B.s_d = proc_control_B.isMrows_tmp - 8;
    }

    proc_control_repmat_f(&isMrows0[420], b_p - 1, proc_control_B.tmp_data_l0,
                          &proc_control_B.tmp_size_bf);
    proc_control_B.s_d -= proc_control_B.u_h;
    for (proc_control_B.i29 = 0; proc_control_B.i29 < proc_control_B.s_d;
         proc_control_B.i29++) {
      isMrows_data[(proc_control_B.u_h + proc_control_B.i29) + 8] =
        proc_control_B.tmp_data_l0[proc_control_B.i29];
    }

    if (ioff + 9 > proc_control_B.isMrows_tmp) {
      proc_control_B.u_h = -8;
      proc_control_B.s_d = -8;
    } else {
      proc_control_B.u_h = ioff;
      proc_control_B.s_d = proc_control_B.isMrows_tmp - 8;
    }

    proc_control_repmat(&Mlimfull0[420], b_p - 1, proc_control_B.tmp_data_ch,
                        &proc_control_B.tmp_size_bf);
    proc_control_B.s_d -= proc_control_B.u_h;
    for (proc_control_B.i29 = 0; proc_control_B.i29 < proc_control_B.s_d;
         proc_control_B.i29++) {
      Mlimfull_data[(proc_control_B.u_h + proc_control_B.i29) + 8] =
        proc_control_B.tmp_data_ch[proc_control_B.i29];
    }

    if (ioff + 9 > proc_control_B.isMrows_tmp) {
      proc_control_B.u_h = -8;
      proc_control_B.s_d = -8;
    } else {
      proc_control_B.u_h = ioff;
      proc_control_B.s_d = proc_control_B.isMrows_tmp - 8;
    }

    proc_control_repmat(&Vfull0[420], b_p - 1, proc_control_B.tmp_data_ch,
                        &proc_control_B.tmp_size_bf);
    proc_control_B.s_d -= proc_control_B.u_h;
    for (proc_control_B.i29 = 0; proc_control_B.i29 < proc_control_B.s_d;
         proc_control_B.i29++) {
      Vfull_data[(proc_control_B.u_h + proc_control_B.i29) + 8] =
        proc_control_B.tmp_data_ch[proc_control_B.i29];
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape_c5g(boolean_T isMrows_data[],
  real_T Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436],
  const real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T
  ioff)
{
  int32_T b_data[80];
  int32_T loop_ub_tmp;
  loop_ub_tmp = b_p << 3;
  for (int32_T i{0}; i < loop_ub_tmp; i++) {
    b_data[i] = (i + ioff) + 1;
  }

  loop_ub_tmp--;
  for (int32_T i{0}; i <= loop_ub_tmp; i++) {
    isMrows_data[b_data[i] - 1] = isMrows0[i + 340];
    Mlimfull_data[b_data[i] - 1] = Mlimfull0[i + 340];
    Vfull_data[b_data[i] - 1] = Vfull0[i + 340];
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape_c5(boolean_T isMrows_data[],
  real_T Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436],
  const real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T
  ioff)
{
  int32_T b_data[80];
  int32_T loop_ub_tmp;
  loop_ub_tmp = b_p << 3;
  for (int32_T i{0}; i < loop_ub_tmp; i++) {
    b_data[i] = (i + ioff) + 1;
  }

  loop_ub_tmp--;
  for (int32_T i{0}; i <= loop_ub_tmp; i++) {
    isMrows_data[b_data[i] - 1] = isMrows0[i + 260];
    Mlimfull_data[b_data[i] - 1] = Mlimfull0[i + 260];
    Vfull_data[b_data[i] - 1] = Vfull0[i + 260];
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape_c(boolean_T isMrows_data[], real_T
  Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436], const
  real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p, int32_T ioff)
{
  int32_T b_data[130];
  int32_T loop_ub;
  loop_ub = b_p * 13;
  for (int32_T i{0}; i < loop_ub; i++) {
    b_data[i] = (i + ioff) + 1;
  }

  loop_ub = b_p * 13 - 1;
  for (int32_T i{0}; i <= loop_ub; i++) {
    isMrows_data[b_data[i] - 1] = isMrows0[i + 130];
    Mlimfull_data[b_data[i] - 1] = Mlimfull0[i + 130];
    Vfull_data[b_data[i] - 1] = Vfull0[i + 130];
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_Mrows_reshape(boolean_T isMrows_data[], real_T
  Mlimfull_data[], real_T Vfull_data[], const boolean_T isMrows0[436], const
  real_T Mlimfull0[436], const real_T Vfull0[436], int32_T b_p)
{
  int32_T loop_ub_tmp;
  loop_ub_tmp = b_p * 13;
  if (loop_ub_tmp - 1 >= 0) {
    std::memcpy(&isMrows_data[0], &isMrows0[0], loop_ub_tmp * sizeof(boolean_T));
  }

  if (loop_ub_tmp - 1 >= 0) {
    std::memcpy(&Mlimfull_data[0], &Mlimfull0[0], loop_ub_tmp * sizeof(real_T));
  }

  if (loop_ub_tmp - 1 >= 0) {
    std::memcpy(&Vfull_data[0], &Vfull0[0], loop_ub_tmp * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_mpc_constraintcoef(const real_T b_A[441], const
  real_T Bu[168], const real_T Bv[21], const real_T b_C[273], const real_T Dv[13],
  const real_T Jm_data[], const int32_T Jm_size[2], real_T SuJm_data[], int32_T
  SuJm_size[2], real_T Sx_data[], int32_T Sx_size[2], real_T Su1_data[], int32_T
  Su1_size[2], real_T Hv_data[], int32_T Hv_size[2])
{
  proc_control_B.b_p = static_cast<real_T>(Jm_size[0]) / 8.0;
  proc_control_B.pny1 = (proc_control_B.b_p - 1.0) * 13.0;
  for (proc_control_B.i_mi = 0; proc_control_B.i_mi < 21; proc_control_B.i_mi++)
  {
    std::memset(&proc_control_B.CA[proc_control_B.i_mi * 13], 0, 13U * sizeof
                (real_T));
    for (proc_control_B.loop_ub = 0; proc_control_B.loop_ub < 21;
         proc_control_B.loop_ub++) {
      for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n < 13;
           proc_control_B.varargin_1_n++) {
        proc_control_B.CA_tmp = 13 * proc_control_B.i_mi +
          proc_control_B.varargin_1_n;
        proc_control_B.CA[proc_control_B.CA_tmp] += b_C[13 *
          proc_control_B.loop_ub + proc_control_B.varargin_1_n] * b_A[21 *
          proc_control_B.i_mi + proc_control_B.loop_ub];
      }
    }
  }

  for (proc_control_B.i_mi = 0; proc_control_B.i_mi < 8; proc_control_B.i_mi++)
  {
    std::memset(&proc_control_B.Sum_o3[proc_control_B.i_mi * 13], 0, 13U *
                sizeof(real_T));
    for (proc_control_B.loop_ub = 0; proc_control_B.loop_ub < 21;
         proc_control_B.loop_ub++) {
      for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n < 13;
           proc_control_B.varargin_1_n++) {
        proc_control_B.CA_tmp = 13 * proc_control_B.i_mi +
          proc_control_B.varargin_1_n;
        proc_control_B.Sum_o3[proc_control_B.CA_tmp] += b_C[13 *
          proc_control_B.loop_ub + proc_control_B.varargin_1_n] * Bu[21 *
          proc_control_B.i_mi + proc_control_B.loop_ub];
      }
    }
  }

  std::memset(&proc_control_B.b_C_c3[0], 0, 13U * sizeof(real_T));
  proc_control_B.varargin_1_n = 0;
  for (proc_control_B.loop_ub = 0; proc_control_B.loop_ub < 21;
       proc_control_B.loop_ub++) {
    for (proc_control_B.i_mi = 0; proc_control_B.i_mi < 13; proc_control_B.i_mi
         ++) {
      proc_control_B.b_C_c3[proc_control_B.i_mi] += b_C[proc_control_B.i_mi +
        proc_control_B.varargin_1_n] * Bv[proc_control_B.loop_ub];
    }

    proc_control_B.varargin_1_n += 13;
  }

  proc_control_B.varargin_1_size_idx_1 = static_cast<int32_T>(proc_control_B.b_p
    - 1.0) + 2;
  for (proc_control_B.i_mi = 0; proc_control_B.i_mi < 13; proc_control_B.i_mi++)
  {
    proc_control_B.varargin_1_data_i[proc_control_B.i_mi] =
      proc_control_B.b_C_c3[proc_control_B.i_mi];
    proc_control_B.varargin_1_data_i[proc_control_B.i_mi + 13] =
      Dv[proc_control_B.i_mi];
  }

  proc_control_B.loop_ub = static_cast<int32_T>(proc_control_B.b_p - 1.0) * 13;
  if (proc_control_B.loop_ub - 1 >= 0) {
    std::memset(&proc_control_B.varargin_1_data_i[26], 0, proc_control_B.loop_ub
                * sizeof(real_T));
  }

  if (static_cast<int32_T>(proc_control_B.pny1) != 0) {
    proc_control_B.input_sizes_idx_0 = static_cast<int8_T>(static_cast<int32_T>
      (proc_control_B.pny1));
    proc_control_B.pny1_j = static_cast<int8_T>(static_cast<int32_T>
      (proc_control_B.pny1));
  } else {
    proc_control_B.input_sizes_idx_0 = 0;
    proc_control_B.pny1_j = 0;
  }

  Hv_size[0] = proc_control_B.pny1_j + 13;
  Hv_size[1] = static_cast<int32_T>(proc_control_B.b_p - 1.0) + 2;
  for (proc_control_B.i_mi = 0; proc_control_B.i_mi <
       proc_control_B.varargin_1_size_idx_1; proc_control_B.i_mi++) {
    for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n < 13;
         proc_control_B.varargin_1_n++) {
      Hv_data[proc_control_B.varargin_1_n + (proc_control_B.pny1_j + 13) *
        proc_control_B.i_mi] = proc_control_B.varargin_1_data_i[13 *
        proc_control_B.i_mi + proc_control_B.varargin_1_n];
    }
  }

  for (proc_control_B.i_mi = 0; proc_control_B.i_mi <
       proc_control_B.varargin_1_size_idx_1; proc_control_B.i_mi++) {
    for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n <
         proc_control_B.input_sizes_idx_0; proc_control_B.varargin_1_n++) {
      Hv_data[(proc_control_B.varargin_1_n + (proc_control_B.pny1_j + 13) *
               proc_control_B.i_mi) + 13] = 0.0;
    }
  }

  proc_control_B.input_sizes_idx_0 = static_cast<int32_T>(proc_control_B.pny1);
  proc_control_B.Sx_size_tmp = static_cast<int32_T>(proc_control_B.pny1) + 13;
  Sx_size[0] = static_cast<int32_T>(proc_control_B.pny1) + 13;
  Sx_size[1] = 21;
  for (proc_control_B.i_mi = 0; proc_control_B.i_mi < 21; proc_control_B.i_mi++)
  {
    for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n < 13;
         proc_control_B.varargin_1_n++) {
      Sx_data[proc_control_B.varargin_1_n + (static_cast<int32_T>
        (proc_control_B.pny1) + 13) * proc_control_B.i_mi] = proc_control_B.CA
        [13 * proc_control_B.i_mi + proc_control_B.varargin_1_n];
    }

    for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n <
         proc_control_B.input_sizes_idx_0; proc_control_B.varargin_1_n++) {
      Sx_data[(proc_control_B.varargin_1_n + (static_cast<int32_T>
                (proc_control_B.pny1) + 13) * proc_control_B.i_mi) + 13] = 0.0;
    }
  }

  proc_control_B.input_sizes_idx_0 = static_cast<int32_T>(proc_control_B.pny1);
  Su1_size[0] = static_cast<int32_T>(proc_control_B.pny1) + 13;
  Su1_size[1] = 8;
  for (proc_control_B.i_mi = 0; proc_control_B.i_mi < 8; proc_control_B.i_mi++)
  {
    for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n < 13;
         proc_control_B.varargin_1_n++) {
      Su1_data[proc_control_B.varargin_1_n + (static_cast<int32_T>
        (proc_control_B.pny1) + 13) * proc_control_B.i_mi] =
        proc_control_B.Sum_o3[13 * proc_control_B.i_mi +
        proc_control_B.varargin_1_n];
    }

    for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n <
         proc_control_B.input_sizes_idx_0; proc_control_B.varargin_1_n++) {
      Su1_data[(proc_control_B.varargin_1_n + (static_cast<int32_T>
                 (proc_control_B.pny1) + 13) * proc_control_B.i_mi) + 13] = 0.0;
    }
  }

  proc_control_B.varargin_1_size_idx_1_tmp_tmp = (proc_control_B.b_p - 1.0) *
    8.0;
  proc_control_B.varargin_1_size_idx_1 = static_cast<int32_T>
    (proc_control_B.varargin_1_size_idx_1_tmp_tmp) + 8;
  proc_control_B.loop_ub = static_cast<int32_T>
    (proc_control_B.varargin_1_size_idx_1_tmp_tmp) * 13 - 1;
  std::memcpy(&proc_control_B.varargin_1_data_i[0], &proc_control_B.Sum_o3[0],
              104U * sizeof(real_T));
  if (proc_control_B.loop_ub >= 0) {
    std::memset(&proc_control_B.varargin_1_data_i[104], 0,
                (proc_control_B.loop_ub + 1) * sizeof(real_T));
  }

  if ((static_cast<int32_T>(proc_control_B.pny1) != 0) && (static_cast<int32_T>
       (proc_control_B.b_p * 8.0) != 0)) {
    proc_control_B.input_sizes_idx_0 = static_cast<int8_T>(static_cast<int32_T>
      (proc_control_B.pny1));
    proc_control_B.pny1_j = static_cast<int8_T>(static_cast<int32_T>
      (proc_control_B.pny1));
  } else {
    proc_control_B.input_sizes_idx_0 = 0;
    proc_control_B.pny1_j = 0;
  }

  proc_control_B.Su_size[0] = proc_control_B.pny1_j + 13;
  proc_control_B.Su_size[1] = static_cast<int32_T>
    (proc_control_B.varargin_1_size_idx_1_tmp_tmp) + 8;
  for (proc_control_B.i_mi = 0; proc_control_B.i_mi <
       proc_control_B.varargin_1_size_idx_1; proc_control_B.i_mi++) {
    for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n < 13;
         proc_control_B.varargin_1_n++) {
      proc_control_B.Su_data[proc_control_B.varargin_1_n +
        (proc_control_B.pny1_j + 13) * proc_control_B.i_mi] =
        proc_control_B.varargin_1_data_i[13 * proc_control_B.i_mi +
        proc_control_B.varargin_1_n];
    }
  }

  for (proc_control_B.i_mi = 0; proc_control_B.i_mi <
       proc_control_B.varargin_1_size_idx_1; proc_control_B.i_mi++) {
    for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n <
         proc_control_B.input_sizes_idx_0; proc_control_B.varargin_1_n++) {
      proc_control_B.Su_data[(proc_control_B.varargin_1_n +
        (proc_control_B.pny1_j + 13) * proc_control_B.i_mi) + 13] = 0.0;
    }
  }

  if (static_cast<int32_T>(proc_control_B.b_p + -1.0) - 1 >= 0) {
    if (proc_control_B.varargin_1_size_idx_1_tmp_tmp < 1.0) {
      proc_control_B.loop_ub_b = -1;
    } else {
      proc_control_B.loop_ub_b = static_cast<int32_T>
        (proc_control_B.varargin_1_size_idx_1_tmp_tmp) - 1;
    }

    proc_control_B.loop_ub_c = static_cast<int32_T>(proc_control_B.b_p);
  }

  proc_control_B.input_sizes_idx_0 = 0;
  while (proc_control_B.input_sizes_idx_0 <= static_cast<int32_T>
         (proc_control_B.b_p + -1.0) - 1) {
    proc_control_B.i_mc5 = static_cast<uint8_T>
      ((proc_control_B.input_sizes_idx_0 + 1) * 13U + 1U);
    for (proc_control_B.i_mi = 0; proc_control_B.i_mi < 13; proc_control_B.i_mi
         ++) {
      proc_control_B.rows[proc_control_B.i_mi] = static_cast<uint8_T>(
        static_cast<uint32_T>(proc_control_B.i_mi) + proc_control_B.i_mc5);
      proc_control_B.varargin_1_n = 0;
      proc_control_B.loop_ub = 0;
      for (proc_control_B.varargin_1_size_idx_1 = 0;
           proc_control_B.varargin_1_size_idx_1 < 8;
           proc_control_B.varargin_1_size_idx_1++) {
        proc_control_B.pny1 = 0.0;
        proc_control_B.i2 = 0;
        for (proc_control_B.i1 = 0; proc_control_B.i1 < 21; proc_control_B.i1++)
        {
          proc_control_B.pny1 += proc_control_B.CA[proc_control_B.i2 +
            proc_control_B.i_mi] * Bu[proc_control_B.i1 + proc_control_B.loop_ub];
          proc_control_B.i2 += 13;
        }

        proc_control_B.CA_tmp = proc_control_B.varargin_1_n +
          proc_control_B.i_mi;
        proc_control_B.Sum_o3[proc_control_B.CA_tmp] += proc_control_B.pny1;
        proc_control_B.varargin_1_n += 13;
        proc_control_B.loop_ub += 21;
      }
    }

    proc_control_B.varargin_1_size_idx_1 = proc_control_B.loop_ub_b + 9;
    for (proc_control_B.i_mi = 0; proc_control_B.i_mi < 8; proc_control_B.i_mi++)
    {
      for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n < 13;
           proc_control_B.varargin_1_n++) {
        proc_control_B.loop_ub = 13 * proc_control_B.i_mi +
          proc_control_B.varargin_1_n;
        proc_control_B.pny1 = proc_control_B.Sum_o3[proc_control_B.loop_ub];
        Su1_data[(proc_control_B.rows[proc_control_B.varargin_1_n] +
                  proc_control_B.Sx_size_tmp * proc_control_B.i_mi) - 1] =
          proc_control_B.pny1;
        proc_control_B.varargin_1_data_i[proc_control_B.loop_ub] =
          proc_control_B.pny1;
      }
    }

    for (proc_control_B.i_mi = 0; proc_control_B.i_mi <=
         proc_control_B.loop_ub_b; proc_control_B.i_mi++) {
      for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n < 13;
           proc_control_B.varargin_1_n++) {
        proc_control_B.varargin_1_data_i[proc_control_B.varargin_1_n + 13 *
          (proc_control_B.i_mi + 8)] = proc_control_B.Su_data
          [((proc_control_B.pny1_j + 13) * proc_control_B.i_mi +
            proc_control_B.rows[proc_control_B.varargin_1_n]) - 14];
      }
    }

    for (proc_control_B.i_mi = 0; proc_control_B.i_mi <
         proc_control_B.varargin_1_size_idx_1; proc_control_B.i_mi++) {
      for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n < 13;
           proc_control_B.varargin_1_n++) {
        proc_control_B.Su_data[(proc_control_B.rows[proc_control_B.varargin_1_n]
          + (proc_control_B.pny1_j + 13) * proc_control_B.i_mi) - 1] =
          proc_control_B.varargin_1_data_i[13 * proc_control_B.i_mi +
          proc_control_B.varargin_1_n];
      }
    }

    proc_control_B.varargin_1_size_idx_1 = static_cast<int32_T>
      (proc_control_B.b_p) + 1;
    for (proc_control_B.i_mi = 0; proc_control_B.i_mi < 13; proc_control_B.i_mi
         ++) {
      proc_control_B.b_C_c3[proc_control_B.i_mi] = 0.0;
      proc_control_B.varargin_1_n = 0;
      for (proc_control_B.loop_ub = 0; proc_control_B.loop_ub < 21;
           proc_control_B.loop_ub++) {
        proc_control_B.b_C_c3[proc_control_B.i_mi] +=
          proc_control_B.CA[proc_control_B.varargin_1_n + proc_control_B.i_mi] *
          Bv[proc_control_B.loop_ub];
        proc_control_B.varargin_1_n += 13;
      }

      proc_control_B.CA_data[proc_control_B.i_mi] =
        proc_control_B.b_C_c3[proc_control_B.i_mi];
    }

    for (proc_control_B.i_mi = 0; proc_control_B.i_mi < proc_control_B.loop_ub_c;
         proc_control_B.i_mi++) {
      for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n < 13;
           proc_control_B.varargin_1_n++) {
        proc_control_B.CA_data[proc_control_B.varargin_1_n + 13 *
          (proc_control_B.i_mi + 1)] = Hv_data[(Hv_size[0] * proc_control_B.i_mi
          + proc_control_B.rows[proc_control_B.varargin_1_n]) - 14];
      }
    }

    for (proc_control_B.i_mi = 0; proc_control_B.i_mi <
         proc_control_B.varargin_1_size_idx_1; proc_control_B.i_mi++) {
      for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n < 13;
           proc_control_B.varargin_1_n++) {
        Hv_data[(proc_control_B.rows[proc_control_B.varargin_1_n] + Hv_size[0] *
                 proc_control_B.i_mi) - 1] = proc_control_B.CA_data[13 *
          proc_control_B.i_mi + proc_control_B.varargin_1_n];
      }
    }

    for (proc_control_B.i_mi = 0; proc_control_B.i_mi < 13; proc_control_B.i_mi
         ++) {
      proc_control_B.varargin_1_n = 0;
      proc_control_B.loop_ub = 0;
      for (proc_control_B.varargin_1_size_idx_1 = 0;
           proc_control_B.varargin_1_size_idx_1 < 21;
           proc_control_B.varargin_1_size_idx_1++) {
        proc_control_B.CA_tmp = proc_control_B.varargin_1_n +
          proc_control_B.i_mi;
        proc_control_B.CA_i[proc_control_B.CA_tmp] = 0.0;
        proc_control_B.i2 = 0;
        for (proc_control_B.i1 = 0; proc_control_B.i1 < 21; proc_control_B.i1++)
        {
          proc_control_B.CA_i[proc_control_B.CA_tmp] +=
            proc_control_B.CA[proc_control_B.i2 + proc_control_B.i_mi] *
            b_A[proc_control_B.i1 + proc_control_B.loop_ub];
          proc_control_B.i2 += 13;
        }

        proc_control_B.varargin_1_n += 13;
        proc_control_B.loop_ub += 21;
      }
    }

    std::memcpy(&proc_control_B.CA[0], &proc_control_B.CA_i[0], 273U * sizeof
                (real_T));
    for (proc_control_B.i_mi = 0; proc_control_B.i_mi < 21; proc_control_B.i_mi
         ++) {
      for (proc_control_B.varargin_1_n = 0; proc_control_B.varargin_1_n < 13;
           proc_control_B.varargin_1_n++) {
        Sx_data[(proc_control_B.rows[proc_control_B.varargin_1_n] +
                 proc_control_B.Sx_size_tmp * proc_control_B.i_mi) - 1] =
          proc_control_B.CA[13 * proc_control_B.i_mi +
          proc_control_B.varargin_1_n];
      }
    }

    proc_control_B.input_sizes_idx_0++;
  }

  proc_control_mtimes(proc_control_B.Su_data, proc_control_B.Su_size, Jm_data,
                      Jm_size, SuJm_data, SuJm_size);
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_control_kron(const int32_T *b_A_size, real_T K_data[],
  int32_T K_size[2])
{
  static const int8_T b_B[64]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  int32_T kidx;
  K_size[0] = *b_A_size << 3;
  K_size[1] = 8;
  kidx = -1;
  for (int32_T j2{0}; j2 < 8; j2++) {
    for (int32_T i1{0}; i1 < *b_A_size; i1++) {
      for (int32_T i2{0}; i2 < 8; i2++) {
        K_data[(kidx + i2) + 1] = b_B[(j2 << 3) + i2];
      }

      kidx += 8;
    }
  }
}

// Function for MATLAB Function: '<S158>/VariableHorizonOptimizer'
void proc_control::proc_contr_mpcblock_optimizerPM(const
  emxArray_real_T_proc_control_T *rseq, const emxArray_real_T_proc_control_T
  *vseq, const real_T umin[8], const real_T umax[8], const real_T x[21], const
  real_T old_u[8], const real_T Mlim0[226], const real_T utargetseq[80], int32_T
  b_p, int32_T moves, const real_T b_uoff[8], const real_T ywt[13], const real_T
  uwt[8], const real_T duwt[8], const real_T b_A[441], const
  emxArray_real_T_proc_control_T *Bu, const emxArray_real_T_proc_control_T *Bv,
  const real_T b_C[273], const emxArray_real_T_proc_control_T *Dv, real_T u[8],
  real_T useq[88], real_T *status)
{
  static const int16_T ab[226]{ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 16, 17,
    18, 19, 20, 21, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 54, 55, 56, 57, 58, 59, 60, 61,
    62, 63, 64, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84,
    85, 86, 87, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 106,
    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 123,
    124, 125, 126, 127, 128, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141,
    142, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 162,
    163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180,
    181, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 199, 200, 201,
    202, 203, 204, 205, 206, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219,
    220, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 237, 238, 239, 240,
    241, 242, 243, 244, 245, 246, 250, 251, 252, 253, 254, 255, 256, 257, 258,
    259, 260, 261, 262, 263, 264, 265, 266, 267, 340, 341, 342, 343, 344, 345,
    346, 347 };

  static const int8_T bb[226]{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0 };

  emxArray_boolean_T_proc_contr_T *tmp_2;
  emxArray_int32_T_proc_control_T *b_Mrows;
  emxArray_real_T_proc_control_T *Bc;
  emxArray_real_T_proc_control_T *b_Ac;
  emxArray_real_T_proc_control_T *b_Mlim;
  emxArray_real_T_proc_control_T *b_Mu1;
  emxArray_real_T_proc_control_T *b_Mv;
  emxArray_real_T_proc_control_T *b_Mx;
  emxArray_real_T_proc_control_T *tmp;
  emxArray_real_T_proc_control_T *tmp_0;
  emxArray_real_T_proc_control_T *tmp_1;
  emxArray_real_T_proc_control_T *tmp_3;
  emxArray_real_T_proc_control_T *tmp_4;
  emxArray_real_T_proc_control_T *tmp_5;
  emxArray_real_T_proc_control_T *tmp_6;
  emxArray_real_T_proc_control_T *tmp_7;
  std::memset(&useq[0], 0, 88U * sizeof(real_T));
  if (b_p > 10) {
    b_p = 10;
  }

  if (b_p <= 1) {
    b_p = 1;
  }

  proc_control_B.pny = b_p * 13;
  proc_control_B.pny_f = b_p << 3;
  if (b_p <= moves) {
    proc_control_B.nmoves = b_p;
  } else {
    proc_control_B.nmoves = moves;
  }

  proc_control_B.TotalFreeMoves = proc_control_B.nmoves << 3;
  proc_control_B.Jm_size[0] = proc_control_B.pny_f;
  proc_control_B.Jm_size[1] = proc_control_B.TotalFreeMoves;
  proc_control_B.c_t = proc_control_B.pny_f * proc_control_B.TotalFreeMoves - 1;
  if (proc_control_B.c_t >= 0) {
    std::memset(&proc_control_B.Jm_data[0], 0, (proc_control_B.c_t + 1) * sizeof
                (real_T));
  }

  proc_control_B.j = 0;
  proc_control_B.ii = 0;
  while (proc_control_B.ii <= proc_control_B.nmoves - 1) {
    for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m++) {
      proc_control_B.Jm_data[((proc_control_B.j << 3) + proc_control_B.i_m) +
        proc_control_B.pny_f * ((proc_control_B.ii << 3) + proc_control_B.i_m)] =
        1.0;
    }

    proc_control_B.j++;
    proc_control_B.ii++;
  }

  proc_control_B.tmp_size_m = b_p;
  proc_control_kron(&proc_control_B.tmp_size_m, proc_control_B.I1_data,
                    proc_control_B.I1_size);
  proc_control_mpc_constraintcoef(b_A, &Bu->data[0], &Bv->data[0], b_C,
    &Dv->data[0], proc_control_B.Jm_data, proc_control_B.Jm_size,
    proc_control_B.SuJm_data, proc_control_B.SuJm_size, proc_control_B.Sx_data_l,
    proc_control_B.Sx_size, proc_control_B.Su1_data_o, proc_control_B.Su1_size,
    proc_control_B.Hv_data, proc_control_B.Hv_size);
  proc_control_B.nmoves_tmp = proc_control_B.TotalFreeMoves << 1;
  proc_control_B.nmoves = ((b_p << 1) * 21 + proc_control_B.nmoves_tmp) - 1;
  std::memset(&proc_control_B.isMrows0[0], 0, 436U * sizeof(boolean_T));
  for (proc_control_B.i_m = 0; proc_control_B.i_m < 226; proc_control_B.i_m++) {
    proc_control_B.isMrows0[ab[proc_control_B.i_m]] = true;
  }

  std::memset(&proc_control_B.Mlimfull0[0], 0, 436U * sizeof(real_T));
  for (proc_control_B.i_m = 0; proc_control_B.i_m < 226; proc_control_B.i_m++) {
    proc_control_B.Mlimfull0[ab[proc_control_B.i_m]] = Mlim0[proc_control_B.i_m];
  }

  std::memset(&proc_control_B.Vfull0[0], 0, 436U * sizeof(real_T));
  for (proc_control_B.i_m = 0; proc_control_B.i_m < 226; proc_control_B.i_m++) {
    proc_control_B.Vfull0[ab[proc_control_B.i_m]] = bb[proc_control_B.i_m];
  }

  proc_control_B.isMrows_size = proc_control_B.nmoves + 1;
  if (proc_control_B.nmoves >= 0) {
    std::memset(&proc_control_B.isMrows_data[0], 0, (proc_control_B.nmoves + 1) *
                sizeof(boolean_T));
  }

  if (proc_control_B.nmoves >= 0) {
    std::memset(&proc_control_B.Mlimfull_data[0], 0, (proc_control_B.nmoves + 1)
                * sizeof(real_T));
  }

  if (proc_control_B.nmoves >= 0) {
    std::memset(&proc_control_B.Vfull_data[0], 0, (proc_control_B.nmoves + 1) *
                sizeof(real_T));
  }

  proc_control_Mrows_reshape(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    b_p);
  proc_control_Mrows_reshape_c(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    b_p, proc_control_B.pny);
  proc_control_B.i_m = b_p * 13 + proc_control_B.pny;
  proc_control_Mrows_reshape_c5(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    b_p, proc_control_B.i_m);
  proc_control_B.i_m += proc_control_B.pny_f;
  proc_control_Mrows_reshape_c5g(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    b_p, proc_control_B.i_m);
  proc_control_B.i_m += proc_control_B.pny_f;
  proc_control_B.b_q = static_cast<uint32_T>(proc_control_B.TotalFreeMoves) >> 3;
  if (proc_control_B.TotalFreeMoves - (proc_control_B.b_q << 3) >= 4U) {
    proc_control_B.b_q++;
  }

  proc_control_Mrows_reshape_c5gf(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    static_cast<int32_T>(proc_control_B.b_q), proc_control_B.i_m);
  proc_control_B.i_m += proc_control_B.TotalFreeMoves;
  proc_control_B.b_q = static_cast<uint32_T>(proc_control_B.TotalFreeMoves) >> 3;
  if (proc_control_B.TotalFreeMoves - (proc_control_B.b_q << 3) >= 4U) {
    proc_control_B.b_q++;
  }

  proc_control_emxInit_int32_T(&b_Mrows, 1);
  proc_contro_Mrows_reshape_c5gfi(proc_control_B.isMrows_data,
    proc_control_B.Mlimfull_data, proc_control_B.Vfull_data,
    proc_control_B.isMrows0, proc_control_B.Mlimfull0, proc_control_B.Vfull0,
    static_cast<int32_T>(proc_control_B.b_q), proc_control_B.i_m);
  proc_control_B.i_m = proc_cont_combineVectorElements
    (proc_control_B.isMrows_data, &proc_control_B.isMrows_size);
  proc_control_B.ii = b_Mrows->size[0];
  b_Mrows->size[0] = proc_control_B.i_m;
  proc__emxEnsureCapacity_int32_T(b_Mrows, proc_control_B.ii);
  if (proc_control_B.i_m - 1 >= 0) {
    std::memset(&b_Mrows->data[0], 0, proc_control_B.i_m * sizeof(int32_T));
  }

  proc_control_B.b_j = 0.0;
  proc_control_B.j = 0;
  while (proc_control_B.j <= proc_control_B.nmoves) {
    if (proc_control_B.isMrows_data[proc_control_B.j]) {
      proc_control_B.b_j++;
      b_Mrows->data[static_cast<int32_T>(proc_control_B.b_j) - 1] =
        proc_control_B.j + 1;
    }

    proc_control_B.j++;
  }

  proc_control_emxInit_real_T(&b_Ac, 2);
  proc_control_B.ii = b_Ac->size[0] * b_Ac->size[1];
  b_Ac->size[0] = proc_control_B.i_m;
  b_Ac->size[1] = proc_control_B.TotalFreeMoves + 1;
  proc_c_emxEnsureCapacity_real_T(b_Ac, proc_control_B.ii);
  proc_control_B.c_t = (proc_control_B.TotalFreeMoves + 1) * proc_control_B.i_m
    - 1;
  if (proc_control_B.c_t >= 0) {
    std::memset(&b_Ac->data[0], 0, (proc_control_B.c_t + 1) * sizeof(real_T));
  }

  proc_control_emxInit_real_T(&b_Mx, 2);
  proc_control_B.ii = b_Mx->size[0] * b_Mx->size[1];
  b_Mx->size[0] = proc_control_B.i_m;
  b_Mx->size[1] = 21;
  proc_c_emxEnsureCapacity_real_T(b_Mx, proc_control_B.ii);
  proc_control_B.c_t = proc_control_B.i_m * 21 - 1;
  if (proc_control_B.c_t >= 0) {
    std::memset(&b_Mx->data[0], 0, (proc_control_B.c_t + 1) * sizeof(real_T));
  }

  proc_control_emxInit_real_T(&b_Mu1, 2);
  proc_control_B.ii = b_Mu1->size[0] * b_Mu1->size[1];
  b_Mu1->size[0] = proc_control_B.i_m;
  b_Mu1->size[1] = 8;
  proc_c_emxEnsureCapacity_real_T(b_Mu1, proc_control_B.ii);
  proc_control_B.c_t = (proc_control_B.i_m << 3) - 1;
  if (proc_control_B.c_t >= 0) {
    std::memset(&b_Mu1->data[0], 0, (proc_control_B.c_t + 1) * sizeof(real_T));
  }

  proc_control_emxInit_real_T(&b_Mv, 2);
  proc_control_B.ii = b_Mv->size[0] * b_Mv->size[1];
  b_Mv->size[0] = proc_control_B.i_m;
  b_Mv->size[1] = proc_control_B.Hv_size[1];
  proc_c_emxEnsureCapacity_real_T(b_Mv, proc_control_B.ii);
  proc_control_B.c_t = proc_control_B.i_m * proc_control_B.Hv_size[1] - 1;
  if (proc_control_B.c_t >= 0) {
    std::memset(&b_Mv->data[0], 0, (proc_control_B.c_t + 1) * sizeof(real_T));
  }

  proc_control_emxInit_real_T(&b_Mlim, 1);
  proc_control_B.ii = b_Mlim->size[0];
  b_Mlim->size[0] = proc_control_B.i_m;
  proc_c_emxEnsureCapacity_real_T(b_Mlim, proc_control_B.ii);
  if (proc_control_B.i_m - 1 >= 0) {
    std::memset(&b_Mlim->data[0], 0, proc_control_B.i_m * sizeof(real_T));
  }

  if (proc_control_B.i_m < 1) {
    proc_control_B.ii = -1;
  } else {
    proc_control_B.ii = proc_control_B.i_m - 1;
  }

  proc_control_B.nmoves = proc_control_B.ii + 1;
  proc_control_B.j_tmp = proc_control_B.isMrows_size - 1;
  proc_control_B.ii = 0;
  proc_control_B.c_t = 0;
  while (proc_control_B.c_t <= proc_control_B.j_tmp) {
    if (proc_control_B.isMrows_data[proc_control_B.c_t]) {
      proc_control_B.w_data[proc_control_B.ii] = static_cast<int16_T>
        (proc_control_B.c_t + 1);
      proc_control_B.ii++;
    }

    proc_control_B.c_t++;
  }

  for (proc_control_B.ii = 0; proc_control_B.ii < proc_control_B.nmoves;
       proc_control_B.ii++) {
    b_Mlim->data[proc_control_B.ii] =
      proc_control_B.Mlimfull_data[proc_control_B.w_data[proc_control_B.ii] - 1];
  }

  proc_control_B.cb_size[0] = b_p;
  proc_control_B.cb_size[1] = b_p;
  proc_control_B.c_t = b_p * b_p - 1;
  for (proc_control_B.ii = 0; proc_control_B.ii <= proc_control_B.c_t;
       proc_control_B.ii++) {
    proc_control_B.cb_data[proc_control_B.ii] = 1.0;
  }

  proc_control_tril(proc_control_B.cb_data, proc_control_B.cb_size);
  proc_control_eye(proc_control_B.y_tmp);
  proc_control_kron_b(proc_control_B.cb_data, proc_control_B.cb_size,
                      proc_control_B.y_tmp, proc_control_B.I2Jm_data,
                      proc_control_B.tmp_size);
  proc_control_mtimes(proc_control_B.I2Jm_data, proc_control_B.tmp_size,
                      proc_control_B.Jm_data, proc_control_B.Jm_size,
                      proc_control_B.y_data_b, proc_control_B.y_size);
  proc_control_B.cb_size[0] = b_p;
  proc_control_B.cb_size[1] = b_p;
  for (proc_control_B.ii = 0; proc_control_B.ii <= proc_control_B.c_t;
       proc_control_B.ii++) {
    proc_control_B.cb_data[proc_control_B.ii] = 1.0;
  }

  proc_control_tril(proc_control_B.cb_data, proc_control_B.cb_size);
  proc_control_kron_b(proc_control_B.cb_data, proc_control_B.cb_size,
                      proc_control_B.y_tmp, proc_control_B.I2Jm_data,
                      proc_control_B.tmp_size);
  proc_control_mtimes(proc_control_B.I2Jm_data, proc_control_B.tmp_size,
                      proc_control_B.Jm_data, proc_control_B.Jm_size,
                      proc_control_B.varargin_2_data, proc_control_B.cb_size);
  proc_control_B.c_t = proc_control_B.cb_size[0] * proc_control_B.cb_size[1];
  if (proc_control_B.c_t - 1 >= 0) {
    std::memcpy(&proc_control_B.I2Jm_data[0], &proc_control_B.varargin_2_data[0],
                proc_control_B.c_t * sizeof(real_T));
  }

  proc_control_eye_b(proc_control_B.TotalFreeMoves, proc_control_B.I3_data,
                     proc_control_B.I3_size);
  proc_control_B.c_t = proc_control_B.SuJm_size[0] * proc_control_B.SuJm_size[1];
  for (proc_control_B.ii = 0; proc_control_B.ii < proc_control_B.c_t;
       proc_control_B.ii++) {
    proc_control_B.varargin_2_data[proc_control_B.ii] =
      -proc_control_B.SuJm_data[proc_control_B.ii];
  }

  proc_control_B.c_t = proc_control_B.y_size[0] * proc_control_B.y_size[1];
  for (proc_control_B.ii = 0; proc_control_B.ii < proc_control_B.c_t;
       proc_control_B.ii++) {
    proc_control_B.varargin_4_data[proc_control_B.ii] =
      -proc_control_B.y_data_b[proc_control_B.ii];
  }

  proc_control_B.c_t = proc_control_B.I3_size[0] * proc_control_B.I3_size[1];
  for (proc_control_B.ii = 0; proc_control_B.ii < proc_control_B.c_t;
       proc_control_B.ii++) {
    proc_control_B.varargin_6_data[proc_control_B.ii] =
      -proc_control_B.I3_data[proc_control_B.ii];
  }

  if ((proc_control_B.SuJm_size[0] != 0) && (proc_control_B.SuJm_size[1] != 0))
  {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.SuJm_size[1]);
  } else if ((proc_control_B.SuJm_size[0] != 0) && (proc_control_B.SuJm_size[1]
              != 0)) {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.SuJm_size[1]);
  } else if ((proc_control_B.cb_size[0] != 0) && (proc_control_B.cb_size[1] != 0))
  {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.y_size[1]);
  } else if ((proc_control_B.y_size[0] != 0) && (proc_control_B.y_size[1] != 0))
  {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.y_size[1]);
  } else if ((proc_control_B.I3_size[0] != 0) && (proc_control_B.I3_size[1] != 0))
  {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.I3_size[1]);
  } else if ((proc_control_B.I3_size[0] != 0) && (proc_control_B.I3_size[1] != 0))
  {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.I3_size[1]);
  } else {
    proc_control_B.nmoves = proc_control_B.SuJm_size[1];
    if (proc_control_B.y_size[1] > proc_control_B.nmoves) {
      proc_control_B.nmoves = proc_control_B.y_size[1];
    }

    if (proc_control_B.y_size[1] > proc_control_B.nmoves) {
      proc_control_B.nmoves = proc_control_B.y_size[1];
    }

    if (proc_control_B.I3_size[1] > proc_control_B.nmoves) {
      proc_control_B.nmoves = proc_control_B.I3_size[1];
    }

    if (proc_control_B.I3_size[1] > proc_control_B.nmoves) {
      proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.I3_size[1]);
    } else {
      proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.nmoves);
    }
  }

  proc_control_B.empty_non_axis_sizes_g = (proc_control_B.sizes_idx_1 == 0);
  if (proc_control_B.empty_non_axis_sizes_g) {
    proc_control_B.empty_non_axis_sizes_h[0] = static_cast<uint8_T>
      (proc_control_B.SuJm_size[0]);
  } else if ((proc_control_B.SuJm_size[0] != 0) && (proc_control_B.SuJm_size[1]
              != 0)) {
    proc_control_B.empty_non_axis_sizes_h[0] = static_cast<uint8_T>
      (proc_control_B.SuJm_size[0]);
  } else {
    proc_control_B.empty_non_axis_sizes_h[0] = 0U;
  }

  proc_control_B.empty_non_axis_sizes_h[1] = static_cast<uint8_T>
    (proc_control_B.sizes_idx_1);
  if (proc_control_B.empty_non_axis_sizes_g) {
    proc_control_B.empty_non_axis_sizes_d[0] = static_cast<uint8_T>
      (proc_control_B.SuJm_size[0]);
  } else if ((proc_control_B.SuJm_size[0] != 0) && (proc_control_B.SuJm_size[1]
              != 0)) {
    proc_control_B.empty_non_axis_sizes_d[0] = static_cast<uint8_T>
      (proc_control_B.SuJm_size[0]);
  } else {
    proc_control_B.empty_non_axis_sizes_d[0] = 0U;
  }

  proc_control_B.empty_non_axis_sizes_d[1] = static_cast<uint8_T>
    (proc_control_B.sizes_idx_1);
  if (proc_control_B.empty_non_axis_sizes_g) {
    proc_control_B.empty_non_axis_sizes_m[0] = static_cast<uint8_T>
      (proc_control_B.y_size[0]);
  } else if ((proc_control_B.y_size[0] != 0) && (proc_control_B.y_size[1] != 0))
  {
    proc_control_B.empty_non_axis_sizes_m[0] = static_cast<uint8_T>
      (proc_control_B.y_size[0]);
  } else {
    proc_control_B.empty_non_axis_sizes_m[0] = 0U;
  }

  proc_control_B.empty_non_axis_sizes_m[1] = static_cast<uint8_T>
    (proc_control_B.sizes_idx_1);
  if (proc_control_B.empty_non_axis_sizes_g) {
    proc_control_B.empty_non_axis_sizes[0] = static_cast<int8_T>
      (proc_control_B.y_size[0]);
  } else if ((proc_control_B.y_size[0] != 0) && (proc_control_B.y_size[1] != 0))
  {
    proc_control_B.empty_non_axis_sizes[0] = static_cast<int8_T>
      (proc_control_B.y_size[0]);
  } else {
    proc_control_B.empty_non_axis_sizes[0] = 0;
  }

  proc_control_B.empty_non_axis_sizes[1] = proc_control_B.sizes_idx_1;
  if (proc_control_B.empty_non_axis_sizes_g) {
    proc_control_B.empty_non_axis_sizes_o[0] = static_cast<int8_T>
      (proc_control_B.I3_size[0]);
  } else if ((proc_control_B.I3_size[0] != 0) && (proc_control_B.I3_size[1] != 0))
  {
    proc_control_B.empty_non_axis_sizes_o[0] = static_cast<int8_T>
      (proc_control_B.I3_size[0]);
  } else {
    proc_control_B.empty_non_axis_sizes_o[0] = 0;
  }

  proc_control_B.empty_non_axis_sizes_o[1] = proc_control_B.sizes_idx_1;
  if (proc_control_B.empty_non_axis_sizes_g) {
    proc_control_B.empty_non_axis_sizes_l[0] = static_cast<int8_T>
      (proc_control_B.I3_size[0]);
  } else if ((proc_control_B.I3_size[0] != 0) && (proc_control_B.I3_size[1] != 0))
  {
    proc_control_B.empty_non_axis_sizes_l[0] = static_cast<int8_T>
      (proc_control_B.I3_size[0]);
  } else {
    proc_control_B.empty_non_axis_sizes_l[0] = 0;
  }

  proc_control_B.empty_non_axis_sizes_l[1] = proc_control_B.sizes_idx_1;
  proc_control_B.Mu_size_idx_0 = ((((proc_control_B.empty_non_axis_sizes_h[0] +
    proc_control_B.empty_non_axis_sizes_d[0]) +
    proc_control_B.empty_non_axis_sizes_m[0]) +
    proc_control_B.empty_non_axis_sizes[0]) +
    proc_control_B.empty_non_axis_sizes_o[0]) +
    proc_control_B.empty_non_axis_sizes_l[0];
  proc_control_B.Mu_size_idx_1_tmp = static_cast<uint8_T>
    (proc_control_B.sizes_idx_1);
  for (proc_control_B.ii = 0; proc_control_B.ii <
       proc_control_B.Mu_size_idx_1_tmp; proc_control_B.ii++) {
    proc_control_B.nmoves = proc_control_B.empty_non_axis_sizes_h[0];
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.nmoves; proc_control_B.varargin_1++) {
      proc_control_B.Mu_data[proc_control_B.varargin_1 +
        proc_control_B.Mu_size_idx_0 * proc_control_B.ii] =
        proc_control_B.SuJm_data[proc_control_B.empty_non_axis_sizes_h[0] *
        proc_control_B.ii + proc_control_B.varargin_1];
    }
  }

  for (proc_control_B.ii = 0; proc_control_B.ii <
       proc_control_B.Mu_size_idx_1_tmp; proc_control_B.ii++) {
    proc_control_B.nmoves = proc_control_B.empty_non_axis_sizes_d[0];
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.nmoves; proc_control_B.varargin_1++) {
      proc_control_B.Mu_data[(proc_control_B.varargin_1 +
        proc_control_B.empty_non_axis_sizes_h[0]) + proc_control_B.Mu_size_idx_0
        * proc_control_B.ii] =
        proc_control_B.varargin_2_data[proc_control_B.empty_non_axis_sizes_d[0] *
        proc_control_B.ii + proc_control_B.varargin_1];
    }
  }

  for (proc_control_B.ii = 0; proc_control_B.ii <
       proc_control_B.Mu_size_idx_1_tmp; proc_control_B.ii++) {
    proc_control_B.nmoves = proc_control_B.empty_non_axis_sizes_m[0];
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.nmoves; proc_control_B.varargin_1++) {
      proc_control_B.Mu_data[((proc_control_B.varargin_1 +
        proc_control_B.empty_non_axis_sizes_h[0]) +
        proc_control_B.empty_non_axis_sizes_d[0]) + proc_control_B.Mu_size_idx_0
        * proc_control_B.ii] =
        proc_control_B.I2Jm_data[proc_control_B.empty_non_axis_sizes_m[0] *
        proc_control_B.ii + proc_control_B.varargin_1];
    }
  }

  proc_control_B.c_t = proc_control_B.sizes_idx_1;
  for (proc_control_B.ii = 0; proc_control_B.ii < proc_control_B.c_t;
       proc_control_B.ii++) {
    proc_control_B.nmoves = proc_control_B.empty_non_axis_sizes[0];
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.nmoves; proc_control_B.varargin_1++) {
      proc_control_B.Mu_data[(((proc_control_B.varargin_1 +
        proc_control_B.empty_non_axis_sizes_h[0]) +
        proc_control_B.empty_non_axis_sizes_d[0]) +
        proc_control_B.empty_non_axis_sizes_m[0]) + proc_control_B.Mu_size_idx_0
        * proc_control_B.ii] =
        proc_control_B.varargin_4_data[proc_control_B.empty_non_axis_sizes[0] *
        proc_control_B.ii + proc_control_B.varargin_1];
    }
  }

  proc_control_B.c_t = proc_control_B.sizes_idx_1;
  for (proc_control_B.ii = 0; proc_control_B.ii < proc_control_B.c_t;
       proc_control_B.ii++) {
    proc_control_B.nmoves = proc_control_B.empty_non_axis_sizes_o[0];
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.nmoves; proc_control_B.varargin_1++) {
      proc_control_B.Mu_data[((((proc_control_B.varargin_1 +
        proc_control_B.empty_non_axis_sizes_h[0]) +
        proc_control_B.empty_non_axis_sizes_d[0]) +
        proc_control_B.empty_non_axis_sizes_m[0]) +
        proc_control_B.empty_non_axis_sizes[0]) + proc_control_B.Mu_size_idx_0 *
        proc_control_B.ii] =
        proc_control_B.I3_data[proc_control_B.empty_non_axis_sizes_o[0] *
        proc_control_B.ii + proc_control_B.varargin_1];
    }
  }

  proc_control_B.c_t = proc_control_B.sizes_idx_1;
  for (proc_control_B.ii = 0; proc_control_B.ii < proc_control_B.c_t;
       proc_control_B.ii++) {
    proc_control_B.nmoves = proc_control_B.empty_non_axis_sizes_l[0];
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.nmoves; proc_control_B.varargin_1++) {
      proc_control_B.Mu_data[(((((proc_control_B.varargin_1 +
        proc_control_B.empty_non_axis_sizes_h[0]) +
        proc_control_B.empty_non_axis_sizes_d[0]) +
        proc_control_B.empty_non_axis_sizes_m[0]) +
        proc_control_B.empty_non_axis_sizes[0]) +
        proc_control_B.empty_non_axis_sizes_o[0]) + proc_control_B.Mu_size_idx_0
        * proc_control_B.ii] =
        proc_control_B.varargin_6_data[proc_control_B.empty_non_axis_sizes_l[0] *
        proc_control_B.ii + proc_control_B.varargin_1];
    }
  }

  proc_control_B.j = (proc_control_B.pny_f + proc_control_B.TotalFreeMoves) << 1;
  proc_control_B.c_t = proc_control_B.Hv_size[0] * proc_control_B.Hv_size[1];
  for (proc_control_B.ii = 0; proc_control_B.ii < proc_control_B.c_t;
       proc_control_B.ii++) {
    proc_control_B.varargin_1_data_o[proc_control_B.ii] =
      -proc_control_B.Hv_data[proc_control_B.ii];
  }

  if ((proc_control_B.Hv_size[0] != 0) && (proc_control_B.Hv_size[1] != 0)) {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.Hv_size[1]);
  } else if ((proc_control_B.Hv_size[0] != 0) && (proc_control_B.Hv_size[1] != 0))
  {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.Hv_size[1]);
  } else if ((proc_control_B.j != 0) && (proc_control_B.Hv_size[1] != 0)) {
    proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.Hv_size[1]);
  } else {
    proc_control_B.ii = proc_control_B.Hv_size[1];
    if (proc_control_B.Hv_size[1] > proc_control_B.ii) {
      proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.Hv_size[1]);
    } else {
      proc_control_B.sizes_idx_1 = static_cast<int8_T>(proc_control_B.ii);
    }
  }

  if ((proc_control_B.Hv_size[0] != 0) && (proc_control_B.Hv_size[1] != 0)) {
    proc_control_B.varargin_1_i[0] = static_cast<uint8_T>
      (proc_control_B.Hv_size[0]);
  } else {
    proc_control_B.varargin_1_i[0] = 0U;
  }

  proc_control_B.varargin_1_i[1] = static_cast<uint8_T>
    (proc_control_B.sizes_idx_1);
  if ((proc_control_B.Hv_size[0] != 0) && (proc_control_B.Hv_size[1] != 0)) {
    proc_control_B.empty_non_axis_sizes_h[0] = static_cast<uint8_T>
      (proc_control_B.Hv_size[0]);
  } else {
    proc_control_B.empty_non_axis_sizes_h[0] = 0U;
  }

  proc_control_B.empty_non_axis_sizes_h[1] = static_cast<uint8_T>
    (proc_control_B.sizes_idx_1);
  if ((proc_control_B.j != 0) && (proc_control_B.Hv_size[1] != 0)) {
    proc_control_B.c_t = static_cast<int16_T>(proc_control_B.j);
    proc_control_B.j_f = static_cast<int16_T>(proc_control_B.j);
  } else {
    proc_control_B.c_t = 0;
    proc_control_B.j_f = 0;
  }

  proc_control_B.i_input_sizes_idx_1 = proc_control_B.sizes_idx_1;
  proc_control_B.Mv_aux_size_idx_0 = (proc_control_B.varargin_1_i[0] +
    proc_control_B.empty_non_axis_sizes_h[0]) + proc_control_B.j_f;
  proc_control_B.Mv_aux_size_idx_1_tmp = static_cast<uint8_T>
    (proc_control_B.sizes_idx_1);
  for (proc_control_B.ii = 0; proc_control_B.ii <
       proc_control_B.Mv_aux_size_idx_1_tmp; proc_control_B.ii++) {
    proc_control_B.nmoves = proc_control_B.varargin_1_i[0];
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.nmoves; proc_control_B.varargin_1++) {
      proc_control_B.Mv_aux_data[proc_control_B.varargin_1 +
        proc_control_B.Mv_aux_size_idx_0 * proc_control_B.ii] =
        proc_control_B.varargin_1_data_o[proc_control_B.varargin_1_i[0] *
        proc_control_B.ii + proc_control_B.varargin_1];
    }
  }

  for (proc_control_B.ii = 0; proc_control_B.ii <
       proc_control_B.Mv_aux_size_idx_1_tmp; proc_control_B.ii++) {
    proc_control_B.nmoves = proc_control_B.empty_non_axis_sizes_h[0];
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.nmoves; proc_control_B.varargin_1++) {
      proc_control_B.Mv_aux_data[(proc_control_B.varargin_1 +
        proc_control_B.varargin_1_i[0]) + proc_control_B.Mv_aux_size_idx_0 *
        proc_control_B.ii] =
        proc_control_B.Hv_data[proc_control_B.empty_non_axis_sizes_h[0] *
        proc_control_B.ii + proc_control_B.varargin_1];
    }
  }

  for (proc_control_B.ii = 0; proc_control_B.ii <
       proc_control_B.i_input_sizes_idx_1; proc_control_B.ii++) {
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.c_t; proc_control_B.varargin_1++) {
      proc_control_B.Mv_aux_data[((proc_control_B.varargin_1 +
        proc_control_B.varargin_1_i[0]) + proc_control_B.empty_non_axis_sizes_h
        [0]) + proc_control_B.Mv_aux_size_idx_0 * proc_control_B.ii] = 0.0;
    }
  }

  proc_control_B.c_t = 0;
  proc_control_B.nmoves = 0;
  while (proc_control_B.nmoves <= proc_control_B.j_tmp) {
    if (proc_control_B.isMrows_data[proc_control_B.nmoves]) {
      proc_control_B.c_t++;
    }

    proc_control_B.nmoves++;
  }

  proc_control_B.i_input_sizes_idx_1 = proc_control_B.c_t;
  proc_control_B.c_t = 0;
  proc_control_B.nmoves = 0;
  while (proc_control_B.nmoves <= proc_control_B.j_tmp) {
    if (proc_control_B.isMrows_data[proc_control_B.nmoves]) {
      proc_control_B.q_data[proc_control_B.c_t] = static_cast<int16_T>
        (proc_control_B.nmoves + 1);
      proc_control_B.c_t++;
    }

    proc_control_B.nmoves++;
  }

  for (proc_control_B.ii = 0; proc_control_B.ii <
       proc_control_B.Mu_size_idx_1_tmp; proc_control_B.ii++) {
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.i_input_sizes_idx_1; proc_control_B.varargin_1++) {
      b_Ac->data[proc_control_B.varargin_1 + b_Ac->size[0] * proc_control_B.ii] =
        -proc_control_B.Mu_data[(proc_control_B.Mu_size_idx_0 *
        proc_control_B.ii + proc_control_B.q_data[proc_control_B.varargin_1]) -
        1];
    }
  }

  proc_control_B.c_t = 0;
  proc_control_B.nmoves = 0;
  while (proc_control_B.nmoves <= proc_control_B.j_tmp) {
    if (proc_control_B.isMrows_data[proc_control_B.nmoves]) {
      proc_control_B.c_t++;
    }

    proc_control_B.nmoves++;
  }

  proc_control_B.varargin_1 = proc_control_B.c_t;
  proc_control_B.c_t = 0;
  proc_control_B.nmoves = 0;
  while (proc_control_B.nmoves <= proc_control_B.j_tmp) {
    if (proc_control_B.isMrows_data[proc_control_B.nmoves]) {
      proc_control_B.r_data[proc_control_B.c_t] = static_cast<int16_T>
        (proc_control_B.nmoves + 1);
      proc_control_B.c_t++;
    }

    proc_control_B.nmoves++;
  }

  proc_control_B.nmoves = b_Ac->size[1] - 1;
  for (proc_control_B.ii = 0; proc_control_B.ii < proc_control_B.varargin_1;
       proc_control_B.ii++) {
    b_Ac->data[proc_control_B.ii + b_Ac->size[0] * proc_control_B.nmoves] =
      proc_control_B.Vfull_data[proc_control_B.r_data[proc_control_B.ii] - 1];
  }

  proc_control_B.c_t = 0;
  proc_control_B.nmoves = 0;
  while (proc_control_B.nmoves <= proc_control_B.j_tmp) {
    if (proc_control_B.isMrows_data[proc_control_B.nmoves]) {
      proc_control_B.c_t++;
    }

    proc_control_B.nmoves++;
  }

  proc_control_B.Mu_size_idx_0 = proc_control_B.c_t;
  proc_control_B.c_t = 0;
  proc_control_B.nmoves = 0;
  while (proc_control_B.nmoves <= proc_control_B.j_tmp) {
    if (proc_control_B.isMrows_data[proc_control_B.nmoves]) {
      proc_control_B.s_data[proc_control_B.c_t] = static_cast<int16_T>
        (proc_control_B.nmoves + 1);
      proc_control_B.c_t++;
    }

    proc_control_B.nmoves++;
  }

  proc_control_B.nmoves = (proc_control_B.Sx_size[0] + proc_control_B.Sx_size[0])
    + proc_control_B.j;
  proc_control_B.c_t = proc_control_B.Sx_size[0];
  for (proc_control_B.ii = 0; proc_control_B.ii < 21; proc_control_B.ii++) {
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.c_t; proc_control_B.varargin_1++) {
      proc_control_B.b_j = proc_control_B.Sx_data_l[proc_control_B.Sx_size[0] *
        proc_control_B.ii + proc_control_B.varargin_1];
      proc_control_B.Mu_size_idx_1_tmp = proc_control_B.nmoves *
        proc_control_B.ii;
      proc_control_B.Sx_data[proc_control_B.varargin_1 +
        proc_control_B.Mu_size_idx_1_tmp] = -proc_control_B.b_j;
      proc_control_B.Sx_data[(proc_control_B.varargin_1 +
        proc_control_B.Sx_size[0]) + proc_control_B.Mu_size_idx_1_tmp] =
        proc_control_B.b_j;
    }

    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.j; proc_control_B.varargin_1++) {
      proc_control_B.Sx_data[((proc_control_B.varargin_1 +
        proc_control_B.Sx_size[0]) + proc_control_B.Sx_size[0]) +
        proc_control_B.nmoves * proc_control_B.ii] = 0.0;
    }
  }

  for (proc_control_B.ii = 0; proc_control_B.ii < 21; proc_control_B.ii++) {
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.Mu_size_idx_0; proc_control_B.varargin_1++) {
      b_Mx->data[proc_control_B.varargin_1 + b_Mx->size[0] * proc_control_B.ii] =
        proc_control_B.Sx_data[(proc_control_B.nmoves * proc_control_B.ii +
        proc_control_B.s_data[proc_control_B.varargin_1]) - 1];
    }
  }

  proc_control_B.ii = 0;
  proc_control_B.c_t = 0;
  while (proc_control_B.c_t <= proc_control_B.j_tmp) {
    if (proc_control_B.isMrows_data[proc_control_B.c_t]) {
      proc_control_B.ii++;
    }

    proc_control_B.c_t++;
  }

  proc_control_B.Mu_size_idx_0 = proc_control_B.ii;
  proc_control_B.ii = 0;
  proc_control_B.c_t = 0;
  while (proc_control_B.c_t <= proc_control_B.j_tmp) {
    if (proc_control_B.isMrows_data[proc_control_B.c_t]) {
      proc_control_B.t_data[proc_control_B.ii] = static_cast<int16_T>
        (proc_control_B.c_t + 1);
      proc_control_B.ii++;
    }

    proc_control_B.c_t++;
  }

  proc_control_B.Mu_size_idx_1_tmp = (((proc_control_B.Su1_size[0] +
    proc_control_B.Su1_size[0]) + proc_control_B.I1_size[0]) +
    proc_control_B.I1_size[0]) + proc_control_B.nmoves_tmp;
  proc_control_B.c_t = proc_control_B.Su1_size[0];
  proc_control_B.nmoves = proc_control_B.I1_size[0];
  proc_control_B.j = proc_control_B.I1_size[0];
  for (proc_control_B.ii = 0; proc_control_B.ii < 8; proc_control_B.ii++) {
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.c_t; proc_control_B.varargin_1++) {
      proc_control_B.b_j = proc_control_B.Su1_data_o[proc_control_B.Su1_size[0] *
        proc_control_B.ii + proc_control_B.varargin_1];
      proc_control_B.i_input_sizes_idx_1 = proc_control_B.Mu_size_idx_1_tmp *
        proc_control_B.ii;
      proc_control_B.Su1_data[proc_control_B.varargin_1 +
        proc_control_B.i_input_sizes_idx_1] = -proc_control_B.b_j;
      proc_control_B.Su1_data[(proc_control_B.varargin_1 +
        proc_control_B.Su1_size[0]) + proc_control_B.i_input_sizes_idx_1] =
        proc_control_B.b_j;
    }

    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.nmoves; proc_control_B.varargin_1++) {
      proc_control_B.Su1_data[((proc_control_B.varargin_1 +
        proc_control_B.Su1_size[0]) + proc_control_B.Su1_size[0]) +
        proc_control_B.Mu_size_idx_1_tmp * proc_control_B.ii] =
        -proc_control_B.I1_data[proc_control_B.I1_size[0] * proc_control_B.ii +
        proc_control_B.varargin_1];
    }

    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.j; proc_control_B.varargin_1++) {
      proc_control_B.Su1_data[(((proc_control_B.varargin_1 +
        proc_control_B.Su1_size[0]) + proc_control_B.Su1_size[0]) +
        proc_control_B.I1_size[0]) + proc_control_B.Mu_size_idx_1_tmp *
        proc_control_B.ii] = proc_control_B.I1_data[proc_control_B.I1_size[0] *
        proc_control_B.ii + proc_control_B.varargin_1];
    }

    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.nmoves_tmp; proc_control_B.varargin_1++) {
      proc_control_B.Su1_data[((((proc_control_B.varargin_1 +
        proc_control_B.Su1_size[0]) + proc_control_B.Su1_size[0]) +
        proc_control_B.I1_size[0]) + proc_control_B.I1_size[0]) +
        proc_control_B.Mu_size_idx_1_tmp * proc_control_B.ii] = 0.0;
    }
  }

  for (proc_control_B.ii = 0; proc_control_B.ii < 8; proc_control_B.ii++) {
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.Mu_size_idx_0; proc_control_B.varargin_1++) {
      b_Mu1->data[proc_control_B.varargin_1 + b_Mu1->size[0] * proc_control_B.ii]
        = proc_control_B.Su1_data[(proc_control_B.Mu_size_idx_1_tmp *
        proc_control_B.ii + proc_control_B.t_data[proc_control_B.varargin_1]) -
        1];
    }
  }

  proc_control_B.j = 0;
  proc_control_B.ii = 0;
  while (proc_control_B.ii <= proc_control_B.j_tmp) {
    if (proc_control_B.isMrows_data[proc_control_B.ii]) {
      proc_control_B.j++;
    }

    proc_control_B.ii++;
  }

  proc_control_B.nmoves_tmp = proc_control_B.j;
  proc_control_B.j = 0;
  proc_control_B.ii = 0;
  while (proc_control_B.ii <= proc_control_B.j_tmp) {
    if (proc_control_B.isMrows_data[proc_control_B.ii]) {
      proc_control_B.v_data[proc_control_B.j] = static_cast<int16_T>
        (proc_control_B.ii + 1);
      proc_control_B.j++;
    }

    proc_control_B.ii++;
  }

  for (proc_control_B.ii = 0; proc_control_B.ii <
       proc_control_B.Mv_aux_size_idx_1_tmp; proc_control_B.ii++) {
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.nmoves_tmp; proc_control_B.varargin_1++) {
      b_Mv->data[proc_control_B.varargin_1 + b_Mv->size[0] * proc_control_B.ii] =
        proc_control_B.Mv_aux_data[(proc_control_B.Mv_aux_size_idx_0 *
        proc_control_B.ii + proc_control_B.v_data[proc_control_B.varargin_1]) -
        1];
    }
  }

  proc_control_B.b_H_size[0] = proc_control_B.TotalFreeMoves + 1;
  proc_control_B.b_H_size[1] = proc_control_B.TotalFreeMoves + 1;
  proc_control_B.c_t = (proc_control_B.TotalFreeMoves + 1) *
    (proc_control_B.TotalFreeMoves + 1) - 1;
  if (proc_control_B.c_t >= 0) {
    std::memset(&proc_control_B.b_H_data[0], 0, (proc_control_B.c_t + 1) *
                sizeof(real_T));
  }

  proc_control_B.b_H_data[proc_control_B.TotalFreeMoves +
    (proc_control_B.TotalFreeMoves + 1) * proc_control_B.TotalFreeMoves] =
    100000.0;
  updateWeights_YixtX2P7(ywt, proc_control_B.dv12);
  updateWeights_HTL7SM8h(uwt, proc_control_B.umax_incr);
  updateWeights_HTL7SM8h(duwt, proc_control_B.umin_incr);
  proc_contr_mpc_calculatehessian(proc_control_B.dv12, proc_control_B.umax_incr,
    proc_control_B.umin_incr, proc_control_B.SuJm_data, proc_control_B.SuJm_size,
    proc_control_B.y_data_b, proc_control_B.y_size, proc_control_B.Jm_data,
    proc_control_B.Jm_size, proc_control_B.I1_data, proc_control_B.I1_size,
    proc_control_B.Su1_data_o, proc_control_B.Su1_size, proc_control_B.Sx_data_l,
    proc_control_B.Sx_size, proc_control_B.Hv_data, proc_control_B.Hv_size,
    proc_control_B.I2Jm_data, proc_control_B.tmp_size, proc_control_B.Ku1_data,
    proc_control_B.Ku1_size, proc_control_B.I3_data, proc_control_B.I3_size,
    proc_control_B.Kx_data, proc_control_B.Kx_size,
    proc_control_B.varargin_4_data, proc_control_B.varargin_4_size,
    proc_control_B.varargin_2_data, proc_control_B.cb_size);
  proc_control_B.c_t = proc_control_B.tmp_size[1];
  for (proc_control_B.ii = 0; proc_control_B.ii < proc_control_B.c_t;
       proc_control_B.ii++) {
    proc_control_B.nmoves = proc_control_B.tmp_size[0];
    for (proc_control_B.varargin_1 = 0; proc_control_B.varargin_1 <
         proc_control_B.nmoves; proc_control_B.varargin_1++) {
      proc_control_B.b_H_data[proc_control_B.varargin_1 +
        (proc_control_B.TotalFreeMoves + 1) * proc_control_B.ii] =
        proc_control_B.I2Jm_data[proc_control_B.tmp_size[0] * proc_control_B.ii
        + proc_control_B.varargin_1];
    }
  }

  proc_control_mpc_checkhessian(proc_control_B.b_H_data, proc_control_B.b_H_size,
    proc_control_B.b_Linv_data, proc_control_B.Jm_size, &proc_control_B.b_j);
  if (proc_control_B.b_j > 1.0) {
    proc_control_B.pny = 0;
    for (proc_control_B.pny_f = 0; proc_control_B.pny_f < 8;
         proc_control_B.pny_f++) {
      u[proc_control_B.pny_f] = old_u[proc_control_B.pny_f] +
        b_uoff[proc_control_B.pny_f];
      for (proc_control_B.ii = 0; proc_control_B.ii < 11; proc_control_B.ii++) {
        useq[proc_control_B.ii + proc_control_B.pny] = u[proc_control_B.pny_f];
      }

      proc_control_B.pny += 11;
    }

    *status = -2.0;
  } else {
    proc_control_emxInit_real_T(&tmp, 1);
    proc_control_emxInit_real_T(&tmp_3, 1);
    proc_control_emxInit_real_T(&tmp_4, 1);
    proc_control_emxInit_real_T(&tmp_5, 1);
    proc_control_emxInit_real_T(&tmp_6, 1);
    proc_control_emxInit_real_T(&tmp_7, 1);
    proc_control_eye_b(proc_control_B.TotalFreeMoves + 1,
                       proc_control_B.tmp_data_g, proc_control_B.tmp_size);
    proc_control_linsolve(proc_control_B.b_Linv_data, proc_control_B.Jm_size,
                          proc_control_B.tmp_data_g, proc_control_B.tmp_size,
                          proc_control_B.b_H_data, proc_control_B.b_H_size);
    proc_control_mtimes_kcn(b_Mx, x, tmp);
    proc_control_mtimes_kcn(b_Mx, x, tmp_3);
    proc_control_mtimes_kcn(b_Mx, x, tmp_4);
    proc_control_mtimes_kcnh(b_Mu1, old_u, tmp_5);
    proc_control_mtimes_kcnh(b_Mu1, old_u, tmp_6);
    proc_control_mtimes_kcnhu(b_Mv, vseq, tmp_7);
    proc_control_emxInit_real_T(&Bc, 1);
    if ((b_Mlim->size[0] == tmp_3->size[0]) && ((b_Mlim->size[0] == 1 ?
          tmp_4->size[0] : b_Mlim->size[0]) == tmp_5->size[0]) &&
        (((b_Mlim->size[0] == 1 ? tmp->size[0] : b_Mlim->size[0]) == 1 ?
          tmp_6->size[0] : b_Mlim->size[0] == 1 ? tmp->size[0] : b_Mlim->size[0])
         == tmp_7->size[0])) {
      proc_control_emxInit_real_T(&tmp_0, 1);
      proc_control_emxInit_real_T(&tmp_1, 1);
      proc_control_mtimes_kcn(b_Mx, x, tmp);
      proc_control_mtimes_kcnh(b_Mu1, old_u, tmp_0);
      proc_control_mtimes_kcnhu(b_Mv, vseq, tmp_1);
      proc_control_B.ii = Bc->size[0];
      Bc->size[0] = b_Mlim->size[0];
      proc_c_emxEnsureCapacity_real_T(Bc, proc_control_B.ii);
      proc_control_B.c_t = b_Mlim->size[0];
      for (proc_control_B.ii = 0; proc_control_B.ii < proc_control_B.c_t;
           proc_control_B.ii++) {
        Bc->data[proc_control_B.ii] = -(((b_Mlim->data[proc_control_B.ii] +
          tmp->data[proc_control_B.ii]) + tmp_0->data[proc_control_B.ii]) +
          tmp_1->data[proc_control_B.ii]);
      }

      proc_control_emxFree_real_T(&tmp_1);
      proc_control_emxFree_real_T(&tmp_0);
    } else {
      proc_co_binary_expand_op_pr351e(Bc, b_Mlim, b_Mx, *(real_T (*)[21])&x[0],
        b_Mu1, *(real_T (*)[8])&old_u[0], b_Mv, (emxArray_real_T_proc_control_T *)
        vseq);
    }

    proc_control_emxFree_real_T(&tmp_7);
    proc_control_emxFree_real_T(&tmp_6);
    proc_control_emxFree_real_T(&tmp_5);
    proc_control_emxFree_real_T(&tmp_4);
    proc_control_emxFree_real_T(&tmp_3);
    proc_control_emxFree_real_T(&tmp);
    std::memset(&proc_control_B.umax_incr[0], 0, sizeof(real_T) << 3U);
    std::memset(&proc_control_B.umin_incr[0], 0, sizeof(real_T) << 3U);
    for (proc_control_B.ii = 0; proc_control_B.ii < 8; proc_control_B.ii++) {
      proc_control_B.umax_incr_flag[proc_control_B.ii] = false;
      proc_control_B.umin_incr_flag[proc_control_B.ii] = false;
    }

    if ((b_Mrows->size[0] != 0) && (b_Mrows->data[0] > 0)) {
      boolean_T exitg1;
      proc_control_B.nmoves = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.nmoves <= b_Mrows->size[0] - 1)) {
        if (b_Mrows->data[proc_control_B.nmoves] <= proc_control_B.pny) {
          proc_control_B.nmoves++;
        } else {
          proc_control_B.ii = proc_control_B.pny << 1;
          if (b_Mrows->data[proc_control_B.nmoves] <= proc_control_B.ii) {
            proc_control_B.nmoves++;
          } else if (b_Mrows->data[proc_control_B.nmoves] <= proc_control_B.ii +
                     proc_control_B.pny_f) {
            proc_control_B.ii = (b_Mrows->data[proc_control_B.nmoves] -
                                 proc_control_B.ii) - 1;
            proc_control_B.nmoves_tmp = proc_control_B.ii - ((proc_control_B.ii >>
              3) << 3);
            if (!proc_control_B.umax_incr_flag[proc_control_B.nmoves_tmp]) {
              proc_control_B.b_j = -(umax[proc_control_B.nmoves_tmp] -
                b_uoff[proc_control_B.nmoves_tmp]) - (-b_Mlim->
                data[proc_control_B.nmoves]);
            } else {
              proc_control_B.b_j =
                proc_control_B.umax_incr[proc_control_B.nmoves_tmp];
            }

            proc_control_B.umax_incr[proc_control_B.nmoves_tmp] =
              proc_control_B.b_j;
            proc_control_B.umax_incr_flag[proc_control_B.nmoves_tmp] = true;
            Bc->data[proc_control_B.nmoves] += proc_control_B.b_j;
            proc_control_B.nmoves++;
          } else if (b_Mrows->data[proc_control_B.nmoves] <=
                     (proc_control_B.pny_f << 1) + proc_control_B.ii) {
            proc_control_B.ii = ((b_Mrows->data[proc_control_B.nmoves] -
                                  (proc_control_B.pny << 1)) -
                                 proc_control_B.pny_f) - 1;
            proc_control_B.c_t = (proc_control_B.ii >> 3) << 3;
            proc_control_B.j = proc_control_B.ii - proc_control_B.c_t;
            proc_control_B.ii -= proc_control_B.c_t;
            if (!proc_control_B.umin_incr_flag[proc_control_B.ii]) {
              proc_control_B.b_j = (umin[proc_control_B.ii] -
                                    b_uoff[proc_control_B.ii]) - (-b_Mlim->
                data[proc_control_B.nmoves]);
            } else {
              proc_control_B.b_j = proc_control_B.umin_incr[proc_control_B.ii];
            }

            proc_control_B.umin_incr[proc_control_B.j] = proc_control_B.b_j;
            proc_control_B.umin_incr_flag[proc_control_B.j] = true;
            Bc->data[proc_control_B.nmoves] += proc_control_B.b_j;
            proc_control_B.nmoves++;
          } else {
            exitg1 = true;
          }
        }
      }
    }

    std::memcpy(&proc_control_B.utargetseq_data[0], &utargetseq[0],
                proc_control_B.pny_f * sizeof(real_T));
    proc_control_emxInit_boolean_T(&tmp_2, 1);
    proc_control_B.ii = tmp_2->size[0];
    tmp_2->size[0] = proc_control_B.i_m;
    pro_emxEnsureCapacity_boolean_T(tmp_2, proc_control_B.ii);
    if (proc_control_B.i_m - 1 >= 0) {
      std::memset(&tmp_2->data[0], 0, proc_control_B.i_m * sizeof(boolean_T));
    }

    proc_control_mtimes_k(proc_control_B.b_H_data, proc_control_B.b_H_size,
                          proc_control_B.b_H_data, proc_control_B.b_H_size,
                          proc_control_B.tmp_data_g, proc_control_B.tmp_size);
    proc_control_mpc_solveQP(x, proc_control_B.i_m,
      proc_control_B.TotalFreeMoves + 1, proc_control_B.Kx_data,
      proc_control_B.varargin_2_data, proc_control_B.cb_size, rseq,
      proc_control_B.Ku1_data, old_u, proc_control_B.varargin_4_data,
      proc_control_B.varargin_4_size, vseq, proc_control_B.I3_data,
      proc_control_B.I3_size, proc_control_B.utargetseq_data,
      proc_control_B.b_H_data, proc_control_B.b_H_size,
      proc_control_B.tmp_data_g, proc_control_B.tmp_size, b_Ac, Bc, tmp_2,
      proc_control_B.zopt_data, &proc_control_B.tmp_size_m,
      proc_control_B.f_data, &proc_control_B.isMrows_size, status);
    proc_control_emxFree_boolean_T(&tmp_2);
    proc_control_emxFree_real_T(&Bc);
    for (proc_control_B.pny = 0; proc_control_B.pny < 8; proc_control_B.pny++) {
      u[proc_control_B.pny] = (old_u[proc_control_B.pny] +
        proc_control_B.zopt_data[proc_control_B.pny]) +
        b_uoff[proc_control_B.pny];
    }
  }

  proc_control_emxFree_real_T(&b_Mlim);
  proc_control_emxFree_real_T(&b_Mv);
  proc_control_emxFree_real_T(&b_Mu1);
  proc_control_emxFree_real_T(&b_Mx);
  proc_control_emxFree_real_T(&b_Ac);
  proc_control_emxFree_int32_T(&b_Mrows);
}

void proc_control::proc_control_xgetrf(const real_T A[36], real_T b_A[36],
  int32_T ipiv[6], int32_T *info)
{
  std::memcpy(&b_A[0], &A[0], 36U * sizeof(real_T));
  for (int32_T b_j{0}; b_j < 6; b_j++) {
    ipiv[b_j] = b_j + 1;
  }

  *info = 0;
  for (int32_T b_j{0}; b_j < 5; b_j++) {
    real_T smax;
    int32_T a;
    int32_T c;
    int32_T iy;
    int32_T jj;
    int32_T jp1j;
    int32_T k;
    c = b_j * 7 + 2;
    jj = b_j * 7;
    iy = 6 - b_j;
    a = 1;
    smax = std::abs(b_A[jj]);
    for (k = 2; k <= iy; k++) {
      real_T s;
      s = std::abs(b_A[(c + k) - 3]);
      if (s > smax) {
        a = k;
        smax = s;
      }
    }

    if (b_A[(c + a) - 3] != 0.0) {
      if (a - 1 != 0) {
        iy = b_j + a;
        ipiv[b_j] = iy;
        for (k = 0; k < 6; k++) {
          a = k * 6 + b_j;
          smax = b_A[a];
          jp1j = (k * 6 + iy) - 1;
          b_A[a] = b_A[jp1j];
          b_A[jp1j] = smax;
        }
      }

      k = c - b_j;
      for (iy = c; iy <= k + 4; iy++) {
        b_A[iy - 1] /= b_A[jj];
      }
    } else {
      *info = b_j + 1;
    }

    iy = 5 - b_j;
    jp1j = jj;
    jj += 6;
    for (a = 0; a < iy; a++) {
      smax = b_A[a * 6 + jj];
      if (smax != 0.0) {
        int32_T c_0;
        k = jp1j + 8;
        c_0 = jp1j - b_j;
        for (int32_T ijA{k}; ijA <= c_0 + 12; ijA++) {
          b_A[ijA - 1] += b_A[((c + ijA) - jp1j) - 9] * -smax;
        }
      }

      jp1j += 6;
    }
  }

  if ((*info == 0) && (!(b_A[35] != 0.0))) {
    *info = 6;
  }
}

void proc_control::proc_control_mldivide_p(const real_T A[36], const real_T B[36],
  real_T Y[36])
{
  real_T c_A[36];
  real_T temp;
  int32_T ipiv[6];
  int32_T Y_tmp;
  int32_T b_info;
  int32_T ip;
  int32_T ipiv_0;
  int32_T kAcol;
  proc_control_xgetrf(A, c_A, ipiv, &b_info);
  std::memcpy(&Y[0], &B[0], 36U * sizeof(real_T));
  for (int32_T b_i{0}; b_i < 5; b_i++) {
    ipiv_0 = ipiv[b_i];
    if (b_i + 1 != ipiv_0) {
      for (int32_T b_j{0}; b_j < 6; b_j++) {
        ip = 6 * b_j + b_i;
        temp = Y[ip];
        Y_tmp = (6 * b_j + ipiv_0) - 1;
        Y[ip] = Y[Y_tmp];
        Y[Y_tmp] = temp;
      }
    }
  }

  for (int32_T b_j{0}; b_j < 6; b_j++) {
    ip = 6 * b_j - 1;
    for (int32_T b_i{0}; b_i < 6; b_i++) {
      kAcol = 6 * b_i - 1;
      ipiv_0 = (b_i + ip) + 1;
      if (Y[ipiv_0] != 0.0) {
        for (b_info = b_i + 2; b_info < 7; b_info++) {
          Y_tmp = b_info + ip;
          Y[Y_tmp] -= c_A[b_info + kAcol] * Y[ipiv_0];
        }
      }
    }
  }

  for (int32_T b_j{0}; b_j < 6; b_j++) {
    ip = 6 * b_j;
    for (b_info = 5; b_info >= 0; b_info--) {
      kAcol = 6 * b_info;
      ipiv_0 = b_info + ip;
      temp = Y[ipiv_0];
      if (temp != 0.0) {
        int32_T b;
        Y[ipiv_0] = temp / c_A[b_info + kAcol];
        b = b_info - 1;
        for (int32_T b_i{0}; b_i <= b; b_i++) {
          Y_tmp = b_i + ip;
          Y[Y_tmp] -= c_A[b_i + kAcol] * Y[ipiv_0];
        }
      }
    }
  }
}

real_T proc_control::proc_control_norm_pr(const real_T x[4])
{
  real_T absxk;
  real_T scale;
  real_T t;
  real_T y;
  scale = 3.3121686421112381E-170;
  absxk = std::abs(x[0]);
  if (absxk > 3.3121686421112381E-170) {
    y = 1.0;
    scale = absxk;
  } else {
    t = absxk / 3.3121686421112381E-170;
    y = t * t;
  }

  absxk = std::abs(x[1]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  absxk = std::abs(x[2]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  absxk = std::abs(x[3]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  return scale * std::sqrt(y);
}

void proc_control::proc_control_AUV8QuatSimFcn(const real_T in1[13], const
  real_T in2[8], real_T out1[13])
{
  real_T out1_tmp;
  real_T out1_tmp_0;
  real_T out1_tmp_1;
  real_T out1_tmp_2;
  real_T out1_tmp_3;
  real_T out1_tmp_4;
  real_T out1_tmp_5;
  real_T out1_tmp_6;
  real_T out1_tmp_7;
  real_T t11;
  real_T t12;
  real_T t12_tmp;
  real_T t13;
  real_T t13_tmp;
  real_T t14;
  real_T t14_tmp;
  real_T t15;
  real_T t15_tmp;
  real_T t16;
  real_T t17;
  real_T t18;
  real_T t19;
  real_T t25;
  real_T t29;
  real_T t31;
  real_T t50;
  real_T t53;
  real_T t54;
  real_T t57;
  real_T t64;
  real_T t65;
  real_T t68;
  real_T t69;
  real_T t70;
  real_T t8;
  real_T t9;

  // AUVQUATSIMFCN
  //     OUT1 = AUVQUATSIMFCN(IN1,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 8.7.
  //     19-Nov-2021 10:15:44
  t8 = in1[4] * in1[4];
  t9 = in1[5] * in1[5];
  t11 = in1[4] * in1[5] * 2.0;
  t12_tmp = in1[4] * in1[6];
  t12 = t12_tmp * 2.0;
  t13_tmp = in1[5] * in1[6];
  t13 = t13_tmp * 2.0;
  t14_tmp = in1[3] * in1[4];
  t14 = t14_tmp * 2.0;
  t15_tmp = in1[3] * in1[5];
  t15 = t15_tmp * 2.0;
  t16 = in1[3] * in1[6] * 2.0;
  t25 = in1[11] / 500.0;
  t29 = in1[10] / 1000.0;
  t31 = in1[12] * 0.018;
  t50 = in1[7] * 32.4648;
  t53 = in1[8] * 43.6156;
  t54 = in1[9] * 46.7695;
  t17 = t8 * 2.0;
  t18 = t9 * 2.0;
  t19 = in1[6] * in1[6] * 2.0;
  t57 = t25 + t31;
  t25 += t29;
  t29 += t31;
  t31 = in1[11] * 0.558 + t50;
  t64 = in1[10] * 0.062 + t54;
  t65 = in1[12] * 0.031 + t53;
  t68 = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 0.592;
  t50 = in1[12] * 0.062 + -t50;
  t53 = in1[10] * 0.558 + -t53;
  t54 = in1[11] * 0.031 + -t54;
  t69 = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] * 1.8864;
  t70 = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] * 1.7228;
  out1[0] = (((t18 + t19) - 1.0) * -in1[7] + (t12 + t15) * in1[9]) + (t11 - t16)
    * in1[8];
  out1[1] = ((t11 + t16) * in1[7] - ((t17 + t19) - 1.0) * in1[8]) + (t13 - t14) *
    in1[9];
  out1[2] = ((t13 + t14) * in1[8] - ((t17 + t18) - 1.0) * in1[9]) + (t12 - t15) *
    in1[7];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  t11 = in1[10] * t57;
  t12 = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) * in1[10];
  t13 = in1[10] * t64;
  t14 = in1[10] * t53;
  t15 = in1[10] * t69;
  t16 = in1[10] * t70;
  t17 = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) * in1[11];
  t18 = in1[11] * t29;
  t19 = in1[11] * t31;
  out1_tmp = in1[11] * t54;
  out1_tmp_0 = in1[11] * t68;
  t69 *= in1[11];
  out1_tmp_1 = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  out1_tmp_2 = in1[12] * t25;
  out1_tmp_3 = in1[12] * t50;
  out1_tmp_4 = in1[12] * t65;
  t68 *= in1[12];
  t70 *= in1[12];
  out1_tmp_5 = (std::abs(in1[7]) * 1.17 + 15.0) * in1[7];
  t57 *= in1[7];
  t65 *= in1[7];
  t54 *= in1[7];
  out1_tmp_6 = (std::abs(in1[8]) * 0.82 + 20.0) * in1[8];
  t29 *= in1[8];
  t50 *= in1[8];
  t64 *= in1[8];
  out1_tmp_7 = (std::abs(in1[9]) * 0.756 + 23.333333333333332) * in1[9];
  t25 *= in1[9];
  t31 *= in1[9];
  t53 *= in1[9];
  out1[7] = (((((((((((((((in2[0] * -0.00033076834054020519 + in2[1] *
    1.8595780444550231E-21) + in2[2] * 0.00033506403327449372) + (in2[3] *
    0.00033363213569639753 - in2[4] * 0.001819638864719295)) + (in2[5] *
    -0.0018124211550371481 + in2[6] * 0.0018538731733468781)) + (in2[7] *
    0.001778186846409557 - t8 * 0.0063195296824236141)) + ((in2[0] *
    1.4142135623730951 * 0.015171119710606879 + t9 * -0.0063195296824236141) +
    in2[1] * 1.4142135623730951 * 0.014928824155507611)) + ((in2[2] *
    1.4142135623730951 * 0.015171119710606879 + in2[3] * 1.4142135623730951 *
    0.01516372519659284) - t12_tmp * 0.4138016519122657)) + ((t13_tmp *
    -0.0013017970932508 - t14_tmp * 0.0013017970932508) + t15_tmp *
    0.4138016519122657)) + (((t11 * -0.96028628902704993 - t12 *
    0.0001303522588356414) + t13 * 9.4803055144857715E-7) - t14 *
    6.8231348244175949E-6)) + (((t15 * -0.010033314971702871 - t16 *
    0.0010125044874363649) + t17 * 0.010033314971702871) - t18 *
    2.9388947094905889E-5)) + (((t19 * -6.8231348244175949E-6 + out1_tmp *
    0.030976977065388711) + out1_tmp_0 * 0.0010125044874363649) - t69 *
    0.0001303522588356414)) + (((out1_tmp_1 * -0.0010125044874363649 +
    out1_tmp_2 * 0.0002115171795569455) + out1_tmp_3 * 9.4803055144857715E-7) +
    out1_tmp_4 * 0.030976977065388711)) + (((t68 * 0.010033314971702871 + t70 *
    0.0001303522588356414) - out1_tmp_5 * 0.030976977065388711) + t57 *
    0.0040409200239048832)) + (((t65 * -0.0010125044874363649 + t54 *
    0.010033314971702871) - out1_tmp_6 * 9.4803055144857715E-7) - t29 *
    0.311032764122789)) + (((t50 * -0.0010125044874363649 - t64 *
    0.0001303522588356414) + out1_tmp_7 * 6.8231348244175949E-6) + t25 *
              0.031387639110527318)) + ((t31 * 0.010033314971702871 - t53 *
    0.0001303522588356414) + 0.003159764841211807);
  out1[8] = (((((((((((((((in2[0] * 0.00013975754063522079 + in2[1] *
    7.9244610288113972E-21) + in2[2] * -0.00014157257363048341) + (in2[3] *
    -0.0001409675626320625 - in2[4] * 0.0034249251816346319)) + (in2[5] *
    0.003387750973601051 + in2[6] * 0.0035708122797193441)) + (in2[7] *
    -0.0035336380716857632 - t8 * 0.02693023120923067)) + ((t9 *
    -0.02693023120923067 - in2[0] * 1.4142135623730951 * 0.01090649593858282) +
    in2[1] * 1.4142135623730951 * 0.011000123045544621)) + ((in2[2] *
    1.4142135623730951 * -0.01090649593858282 + in2[3] * 1.4142135623730951 *
    0.01090087173345982) - t12_tmp * 0.00099202109956931486)) + ((t13_tmp *
    -0.51979016069898065 - t14_tmp * 0.51979016069898065) + t15_tmp *
    0.00099202109956931486)) + (((t11 * -2.9388947094905889E-5 - t12 *
    0.021882274381510681) + t13 * 0.02320783323245932) - t14 *
    2.9076309096921531E-5)) + (((t15 * -0.0001026911824132076 + t16 *
    0.00042780737967584029) + t17 * 0.0001026911824132076) - t18 *
    0.71944283020623911)) + (((t19 * -2.9076309096921531E-5 + out1_tmp *
    9.4803055144857715E-7) - out1_tmp_0 * 0.00042780737967584029) - t69 *
    0.021882274381510681)) + (((out1_tmp_1 * 0.00042780737967584029 + out1_tmp_2
    * 0.00090136558200456737) + out1_tmp_3 * 0.02320783323245932) + out1_tmp_4 *
    9.4803055144857715E-7)) + (((t68 * 0.0001026911824132076 + t70 *
    0.021882274381510681) - out1_tmp_5 * 9.4803055144857715E-7) + t57 *
    0.678350505826831)) + (((t65 * 0.00042780737967584029 + t54 *
    0.0001026911824132076) - out1_tmp_6 * 0.02320783323245932) - t29 *
    0.0031834266548094372)) + (((t50 * 0.00042780737967584029 - t64 *
    0.021882274381510681) + out1_tmp_7 * 2.9076309096921531E-5) - t25 *
              0.013262028769951049)) + ((t31 * 0.0001026911824132076 - t53 *
    0.021882274381510681) + 0.01346511560461533);
  out1[9] = (((((((((((((((in2[0] * -1.725827915740819E-6 + in2[1] *
    -5.8281975682474322E-18) + in2[2] * 1.748241265284163E-6) + (in2[3] *
    1.740770148765829E-6 - in2[4] * 0.02095639900015615)) + (in2[5] *
    0.021100316216985739 - in2[6] * 0.021822949502860629)) + (in2[7] *
    0.02167903228603104 + t8 * 0.18635748921352191)) + ((t9 *
    0.18635748921352191 - in2[0] * 1.4142135623730951 * 4.8869263875916949E-5) +
    in2[1] * 1.4142135623730951 * 6.6264429389244648E-5)) + ((in2[2] *
    1.4142135623730951 * -4.8869263875916949E-5 + in2[3] * 1.4142135623730951 *
    6.7490056888775055E-5) + t12_tmp * 0.0058758415205803329)) + ((t13_tmp *
    0.033540735888224739 + t14_tmp * 0.033540735888224739) - t15_tmp *
    0.0058758415205803329)) + (((t11 * 0.0002115171795569455 + t12 *
    0.002272431716587712) - t13 * 2.9076309096921531E-5) + t14 *
    0.021384731826702759)) + (((t15 * 0.00039756137245743289 - t16 *
    5.2828771531483014E-6) - t17 * 0.00039756137245743289) + t18 *
    0.00090136558200456737)) + (((t19 * 0.021384731826702759 - out1_tmp *
    6.8231348244175949E-6) + out1_tmp_0 * 5.2828771531483014E-6) + t69 *
    0.002272431716587712)) + (((out1_tmp_1 * -5.2828771531483014E-6 - out1_tmp_2
    * 0.66292668662778553) - out1_tmp_3 * 2.9076309096921531E-5) - out1_tmp_4 *
    6.8231348244175949E-6)) + (((t68 * -0.00039756137245743289 - t70 *
    0.002272431716587712) + out1_tmp_5 * 6.8231348244175949E-6) - t57 *
    0.070445383214219059)) + (((t65 * -5.2828771531483014E-6 - t54 *
    0.00039756137245743289) + out1_tmp_6 * 2.9076309096921531E-5) + t29 *
    0.01232440254618042)) + (((t50 * -5.2828771531483014E-6 + t64 *
    0.002272431716587712) - out1_tmp_7 * 0.021384731826702759) + t25 *
              0.00016376919174759729)) + ((t31 * -0.00039756137245743289 + t53 *
    0.002272431716587712) - 0.093178744606760927);
  out1[10] = (((((((((((((((((in2[0] * 0.0013021350951669831 + in2[1] *
    6.1932883292401409E-19) + in2[2] * -0.00131904594055876) + (in2[3] *
    -0.0013134089920948341 - in2[4] * 0.26767193546582568)) + (in2[5] *
    0.26476621250220889 + in2[6] * 0.2790736050389333)) + (in2[7] *
    -0.27616788207531651 - t8 * 2.1047070084068991)) + ((in2[0] *
    1.4142135623730951 * 0.043593198825375247 + t9 * -2.1047070084068991) - in2
    [1] * 1.4142135623730951 * 0.043051831063235027)) + ((in2[2] *
    1.4142135623730951 * 0.043593198825375247 - in2[3] * 1.4142135623730951 *
    0.043976565543532631) - t12_tmp * 0.1138522338822895)) + ((t13_tmp *
    -25.242114556122988 - t14_tmp * 25.242114556122988) + t15_tmp *
    0.1138522338822895)) + ((t11 * -0.0040409200239048832 - t12 *
    1.71018810547529) + t13 * 0.021882274381510681)) + ((t14 *
    -0.002272431716587712 - t15 * 0.0080268590155159435) + t16 *
    0.0039859244840414)) + ((t17 * 0.0080268590155159435 - t18 *
    0.678350505826831) - t19 * 0.002272431716587712)) + ((out1_tmp *
    0.0001303522588356414 - out1_tmp_0 * 0.0039859244840414) - t69 *
    1.71018810547529)) + (((out1_tmp_1 * 0.0039859244840414 + out1_tmp_2 *
    0.070445383214219059) + out1_tmp_3 * 0.021882274381510681) + out1_tmp_4 *
    0.0001303522588356414)) + ((t68 * 0.0080268590155159435 + t70 *
    1.71018810547529) - out1_tmp_5 * 0.0001303522588356414)) + ((t57 *
    53.015831269733987 + t65 * 0.0039859244840414) + t54 * 0.0080268590155159435))
               + ((out1_tmp_6 * -0.021882274381510681 - t29 * 0.2488326294809943)
                  + t50 * 0.0039859244840414)) + ((t64 * -1.71018810547529 +
    out1_tmp_7 * 0.002272431716587712) - t25 * 0.1235636590052834)) + ((t31 *
    0.0080268590155159435 - t53 * 1.71018810547529) + 1.0523535042034491);
  out1[11] = ((((((((((((((((in2[0] * 5.24748238233168E-7 - in2[1] *
    1.083514276897426E-19) + in2[2] * -5.3156315041823265E-7) + (in2[3] *
    -5.2929151302328333E-7 + in2[4] * 0.10593667623599359)) + (in2[5] *
    0.10537885436940329 - in2[6] * 0.10793139553633729)) + (in2[7] *
    -0.1033841350690595 + t8 * 0.36821797582524962)) + ((in2[0] *
    1.4142135623730951 * 0.013457654526727991 + t9 * 0.36821797582524962) + in2
    [1] * 1.4142135623730951 * 0.013869054980635681)) + ((in2[2] *
    1.4142135623730951 * 0.013457654526727991 + in2[3] * 1.4142135623730951 *
    0.01386868232130781) + t12_tmp * 8.6371397256799973)) + ((t13_tmp *
    0.1184627304742461 + t14_tmp * 0.1184627304742461) - t15_tmp *
    8.6371397256799973)) + (((t11 * 0.311032764122789 + t12 *
    0.0080268590155159435) - t13 * 0.0001026911824132076) + t14 *
    0.00039756137245743289)) + ((t15 * 0.58374455968341665 + t16 *
    1.606290206365557E-6) - t17 * 0.58374455968341665)) + (((t18 *
    0.0031834266548094372 + t19 * 0.00039756137245743289) - out1_tmp *
    0.010033314971702871) - out1_tmp_0 * 1.606290206365557E-6)) + (((t69 *
    0.0080268590155159435 + out1_tmp_1 * 1.606290206365557E-6) - out1_tmp_2 *
    0.01232440254618042) - out1_tmp_3 * 0.0001026911824132076)) + ((out1_tmp_4 *
    -0.010033314971702871 - t68 * 0.58374455968341665) - t70 *
    0.0080268590155159435)) + ((out1_tmp_5 * 0.010033314971702871 - t57 *
    0.2488326294809943) + t65 * 1.606290206365557E-6)) + ((t54 *
    -0.58374455968341665 + out1_tmp_6 * 0.0001026911824132076) + t29 *
    18.096081350185919)) + (((t50 * 1.606290206365557E-6 + t64 *
    0.0080268590155159435) - out1_tmp_7 * 0.00039756137245743289) - t25 *
    4.9794996397332282E-5)) + ((t31 * -0.58374455968341665 + t53 *
    0.0080268590155159435) - 0.18410898791262481);
  out1[12] = ((((((((((((((((in2[0] * -0.1731941163298826 + in2[1] *
    -1.4397960202092559E-21) + in2[2] * 0.175443390567933) + (in2[3] *
    0.17469363248858291 + in2[4] * 0.00062021813460420567)) + (in2[5] *
    -0.0006207996116589 - in2[6] * 0.00064672437426625525)) + (in2[7] *
    0.00064730585132094889 + t8 * 0.0048929560732764686)) + ((in2[0] *
    1.4142135623730951 * 0.00059255494878017434 + t9 * 0.0048929560732764686) -
    in2[1] * 1.4142135623730951 * 0.1225770464045467)) + ((in2[2] *
    1.4142135623730951 * 0.00059255494878017434 + in2[3] * 1.4142135623730951 *
    0.00041984673608298361) - t12_tmp * 0.65361132374006825)) + ((t13_tmp *
    0.38451002147839958 + t14_tmp * 0.38451002147839958) + t15_tmp *
    0.65361132374006825)) + (((t11 * -0.031387639110527318 + t12 *
    0.0039859244840414) - t13 * 0.00042780737967584029) + t14 *
    5.2828771531483014E-6)) + (((t15 * -1.606290206365557E-6 - t16 *
    0.53015902215788635) + t17 * 1.606290206365557E-6) + t18 *
    0.013262028769951049)) + (((t19 * 5.2828771531483014E-6 + out1_tmp *
    0.0010125044874363649) + out1_tmp_0 * 0.53015902215788635) + t69 *
    0.0039859244840414)) + ((out1_tmp_1 * -0.53015902215788635 - out1_tmp_2 *
    0.00016376919174759729) - out1_tmp_3 * 0.00042780737967584029)) +
                 (((out1_tmp_4 * 0.0010125044874363649 + t68 *
                    1.606290206365557E-6) - t70 * 0.0039859244840414) -
                  out1_tmp_5 * 0.0010125044874363649)) + ((t57 *
    -0.1235636590052834 - t65 * 0.53015902215788635) + t54 *
    1.606290206365557E-6)) + ((out1_tmp_6 * 0.00042780737967584029 - t29 *
    4.9794996397332282E-5) - t50 * 0.53015902215788635)) + (((t64 *
    0.0039859244840414 - out1_tmp_7 * 5.2828771531483014E-6) + t25 *
    16.434929686894481) + t31 * 1.606290206365557E-6)) + (t53 *
    0.0039859244840414 - 0.0024464780366382352);
}

real_T proc_control::proc_control_norm_p(const real_T x[169])
{
  real_T y;
  int32_T b_j;
  boolean_T exitg1;
  y = 0.0;
  b_j = 0;
  exitg1 = false;
  while ((!exitg1) && (b_j < 13)) {
    real_T s;
    s = 0.0;
    for (int32_T b_i{0}; b_i < 13; b_i++) {
      s += std::abs(x[13 * b_j + b_i]);
    }

    if (std::isnan(s)) {
      y = (rtNaN);
      exitg1 = true;
    } else {
      if (s > y) {
        y = s;
      }

      b_j++;
    }
  }

  return y;
}

void proc_control::proc_control_mpower(const real_T a[169], real_T b, real_T c
  [169])
{
  proc_control_B.e_g = std::abs(b);
  if (proc_control_B.e_g <= 2.147483647E+9) {
    std::memcpy(&proc_control_B.a_p[0], &a[0], 169U * sizeof(real_T));
    proc_control_B.n_e = static_cast<int32_T>(proc_control_B.e_g);
    proc_control_B.n_n = static_cast<int32_T>(proc_control_B.e_g);
    proc_control_B.nbitson = 0;
    proc_control_B.nb = -1;
    while (proc_control_B.n_n > 0) {
      proc_control_B.nb++;
      if ((proc_control_B.n_n & 1U) != 0U) {
        proc_control_B.nbitson++;
      }

      proc_control_B.n_n >>= 1;
    }

    if (static_cast<int32_T>(proc_control_B.e_g) <= 2) {
      if (b == 2.0) {
        for (proc_control_B.nb = 0; proc_control_B.nb < 13; proc_control_B.nb++)
        {
          std::memset(&c[proc_control_B.nb * 13], 0, 13U * sizeof(real_T));
          for (proc_control_B.i11 = 0; proc_control_B.i11 < 13;
               proc_control_B.i11++) {
            for (proc_control_B.i13 = 0; proc_control_B.i13 < 13;
                 proc_control_B.i13++) {
              proc_control_B.c_tmp = 13 * proc_control_B.nb + proc_control_B.i13;
              c[proc_control_B.c_tmp] += a[13 * proc_control_B.i11 +
                proc_control_B.i13] * a[13 * proc_control_B.nb +
                proc_control_B.i11];
            }
          }
        }
      } else {
        proc_control_B.firstmult = false;
        for (proc_control_B.n_e = 0; proc_control_B.n_e < 169;
             proc_control_B.n_e++) {
          if (proc_control_B.firstmult || std::isnan(a[proc_control_B.n_e])) {
            proc_control_B.firstmult = true;
          }
        }

        if (proc_control_B.firstmult) {
          for (proc_control_B.nb = 0; proc_control_B.nb < 169; proc_control_B.nb
               ++) {
            c[proc_control_B.nb] = (rtNaN);
          }
        } else {
          std::memset(&c[0], 0, 169U * sizeof(real_T));
          proc_control_B.n_n = 0;
          for (proc_control_B.n_e = 0; proc_control_B.n_e < 13;
               proc_control_B.n_e++) {
            c[proc_control_B.n_n] = 1.0;
            proc_control_B.n_n += 14;
          }
        }
      }
    } else {
      proc_control_B.firstmult = true;
      proc_control_B.aBufferInUse = false;
      proc_control_B.cBufferInUse = ((proc_control_B.nbitson & 1U) == 0U);
      proc_control_B.n_n = proc_control_B.nb - 1;
      for (proc_control_B.nbitson = 0; proc_control_B.nbitson <=
           proc_control_B.n_n; proc_control_B.nbitson++) {
        if ((proc_control_B.n_e & 1U) != 0U) {
          if (proc_control_B.firstmult) {
            proc_control_B.firstmult = false;
            if (proc_control_B.cBufferInUse) {
              if (proc_control_B.aBufferInUse) {
                std::memcpy(&proc_control_B.cBuffer[0], &proc_control_B.aBuffer
                            [0], 169U * sizeof(real_T));
              } else {
                std::memcpy(&proc_control_B.cBuffer[0], &proc_control_B.a_p[0],
                            169U * sizeof(real_T));
              }
            } else if (proc_control_B.aBufferInUse) {
              std::memcpy(&c[0], &proc_control_B.aBuffer[0], 169U * sizeof
                          (real_T));
            } else {
              std::memcpy(&c[0], &proc_control_B.a_p[0], 169U * sizeof(real_T));
            }
          } else {
            if (proc_control_B.aBufferInUse) {
              if (proc_control_B.cBufferInUse) {
                for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                     proc_control_B.nb++) {
                  proc_control_B.i13 = 0;
                  for (proc_control_B.i11 = 0; proc_control_B.i11 < 13;
                       proc_control_B.i11++) {
                    proc_control_B.c_tmp = proc_control_B.i13 +
                      proc_control_B.nb;
                    c[proc_control_B.c_tmp] = 0.0;
                    proc_control_B.i14 = 0;
                    for (proc_control_B.i12 = 0; proc_control_B.i12 < 13;
                         proc_control_B.i12++) {
                      c[proc_control_B.c_tmp] +=
                        proc_control_B.cBuffer[proc_control_B.i14 +
                        proc_control_B.nb] *
                        proc_control_B.aBuffer[proc_control_B.i12 +
                        proc_control_B.i13];
                      proc_control_B.i14 += 13;
                    }

                    proc_control_B.i13 += 13;
                  }
                }
              } else {
                for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                     proc_control_B.nb++) {
                  proc_control_B.i13 = 0;
                  for (proc_control_B.i11 = 0; proc_control_B.i11 < 13;
                       proc_control_B.i11++) {
                    proc_control_B.c_tmp = proc_control_B.i13 +
                      proc_control_B.nb;
                    proc_control_B.cBuffer[proc_control_B.c_tmp] = 0.0;
                    proc_control_B.i14 = 0;
                    for (proc_control_B.i12 = 0; proc_control_B.i12 < 13;
                         proc_control_B.i12++) {
                      proc_control_B.cBuffer[proc_control_B.c_tmp] +=
                        c[proc_control_B.i14 + proc_control_B.nb] *
                        proc_control_B.aBuffer[proc_control_B.i12 +
                        proc_control_B.i13];
                      proc_control_B.i14 += 13;
                    }

                    proc_control_B.i13 += 13;
                  }
                }
              }
            } else if (proc_control_B.cBufferInUse) {
              for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                   proc_control_B.nb++) {
                proc_control_B.i13 = 0;
                for (proc_control_B.i11 = 0; proc_control_B.i11 < 13;
                     proc_control_B.i11++) {
                  proc_control_B.c_tmp = proc_control_B.i13 + proc_control_B.nb;
                  c[proc_control_B.c_tmp] = 0.0;
                  proc_control_B.i14 = 0;
                  for (proc_control_B.i12 = 0; proc_control_B.i12 < 13;
                       proc_control_B.i12++) {
                    c[proc_control_B.c_tmp] +=
                      proc_control_B.cBuffer[proc_control_B.i14 +
                      proc_control_B.nb] * proc_control_B.a_p[proc_control_B.i12
                      + proc_control_B.i13];
                    proc_control_B.i14 += 13;
                  }

                  proc_control_B.i13 += 13;
                }
              }
            } else {
              for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                   proc_control_B.nb++) {
                proc_control_B.i13 = 0;
                for (proc_control_B.i11 = 0; proc_control_B.i11 < 13;
                     proc_control_B.i11++) {
                  proc_control_B.c_tmp = proc_control_B.i13 + proc_control_B.nb;
                  proc_control_B.cBuffer[proc_control_B.c_tmp] = 0.0;
                  proc_control_B.i14 = 0;
                  for (proc_control_B.i12 = 0; proc_control_B.i12 < 13;
                       proc_control_B.i12++) {
                    proc_control_B.cBuffer[proc_control_B.c_tmp] +=
                      c[proc_control_B.i14 + proc_control_B.nb] *
                      proc_control_B.a_p[proc_control_B.i12 + proc_control_B.i13];
                    proc_control_B.i14 += 13;
                  }

                  proc_control_B.i13 += 13;
                }
              }
            }

            proc_control_B.cBufferInUse = !proc_control_B.cBufferInUse;
          }
        }

        proc_control_B.n_e >>= 1;
        if (proc_control_B.aBufferInUse) {
          for (proc_control_B.nb = 0; proc_control_B.nb < 13; proc_control_B.nb
               ++) {
            proc_control_B.i13 = 0;
            for (proc_control_B.i11 = 0; proc_control_B.i11 < 13;
                 proc_control_B.i11++) {
              proc_control_B.c_tmp = proc_control_B.i13 + proc_control_B.nb;
              proc_control_B.a_p[proc_control_B.c_tmp] = 0.0;
              proc_control_B.i14 = 0;
              for (proc_control_B.i12 = 0; proc_control_B.i12 < 13;
                   proc_control_B.i12++) {
                proc_control_B.a_p[proc_control_B.c_tmp] +=
                  proc_control_B.aBuffer[proc_control_B.i14 + proc_control_B.nb]
                  * proc_control_B.aBuffer[proc_control_B.i12 +
                  proc_control_B.i13];
                proc_control_B.i14 += 13;
              }

              proc_control_B.i13 += 13;
            }
          }
        } else {
          for (proc_control_B.nb = 0; proc_control_B.nb < 13; proc_control_B.nb
               ++) {
            proc_control_B.i13 = 0;
            for (proc_control_B.i11 = 0; proc_control_B.i11 < 13;
                 proc_control_B.i11++) {
              proc_control_B.c_tmp = proc_control_B.i13 + proc_control_B.nb;
              proc_control_B.aBuffer[proc_control_B.c_tmp] = 0.0;
              proc_control_B.i14 = 0;
              for (proc_control_B.i12 = 0; proc_control_B.i12 < 13;
                   proc_control_B.i12++) {
                proc_control_B.aBuffer[proc_control_B.c_tmp] +=
                  proc_control_B.a_p[proc_control_B.i14 + proc_control_B.nb] *
                  proc_control_B.a_p[proc_control_B.i12 + proc_control_B.i13];
                proc_control_B.i14 += 13;
              }

              proc_control_B.i13 += 13;
            }
          }
        }

        proc_control_B.aBufferInUse = !proc_control_B.aBufferInUse;
      }

      for (proc_control_B.nb = 0; proc_control_B.nb < 13; proc_control_B.nb++) {
        std::memset(&proc_control_B.cBuffer_e[proc_control_B.nb * 13], 0, 13U *
                    sizeof(real_T));
        for (proc_control_B.i11 = 0; proc_control_B.i11 < 13; proc_control_B.i11
             ++) {
          for (proc_control_B.i13 = 0; proc_control_B.i13 < 13;
               proc_control_B.i13++) {
            proc_control_B.c_tmp = 13 * proc_control_B.nb + proc_control_B.i13;
            proc_control_B.cBuffer_e[proc_control_B.c_tmp] +=
              proc_control_B.cBuffer[13 * proc_control_B.i11 +
              proc_control_B.i13] * proc_control_B.aBuffer[13 *
              proc_control_B.nb + proc_control_B.i11];
          }
        }

        std::memset(&proc_control_B.cBuffer_o[proc_control_B.nb * 13], 0, 13U *
                    sizeof(real_T));
        for (proc_control_B.i11 = 0; proc_control_B.i11 < 13; proc_control_B.i11
             ++) {
          for (proc_control_B.i13 = 0; proc_control_B.i13 < 13;
               proc_control_B.i13++) {
            proc_control_B.c_tmp = 13 * proc_control_B.nb + proc_control_B.i13;
            proc_control_B.cBuffer_o[proc_control_B.c_tmp] +=
              proc_control_B.cBuffer[13 * proc_control_B.i11 +
              proc_control_B.i13] * proc_control_B.a_p[13 * proc_control_B.nb +
              proc_control_B.i11];
          }
        }
      }

      for (proc_control_B.nb = 0; proc_control_B.nb < 169; proc_control_B.nb++)
      {
        if (proc_control_B.firstmult) {
          if (proc_control_B.aBufferInUse) {
            c[proc_control_B.nb] = proc_control_B.aBuffer[proc_control_B.nb];
          } else {
            c[proc_control_B.nb] = proc_control_B.a_p[proc_control_B.nb];
          }
        } else if (proc_control_B.aBufferInUse) {
          c[proc_control_B.nb] = proc_control_B.cBuffer_e[proc_control_B.nb];
        } else {
          c[proc_control_B.nb] = proc_control_B.cBuffer_o[proc_control_B.nb];
        }
      }
    }
  } else {
    std::memcpy(&proc_control_B.a_p[0], &a[0], 169U * sizeof(real_T));
    if ((!std::isinf(b)) && (!std::isnan(b))) {
      proc_control_B.firstmult = true;
      int32_T exitg1;
      do {
        exitg1 = 0;
        proc_control_B.ed2 = std::floor(proc_control_B.e_g / 2.0);
        if (2.0 * proc_control_B.ed2 != proc_control_B.e_g) {
          if (proc_control_B.firstmult) {
            std::memcpy(&c[0], &proc_control_B.a_p[0], 169U * sizeof(real_T));
            proc_control_B.firstmult = false;
          } else {
            for (proc_control_B.nb = 0; proc_control_B.nb < 13;
                 proc_control_B.nb++) {
              proc_control_B.i13 = 0;
              for (proc_control_B.i11 = 0; proc_control_B.i11 < 13;
                   proc_control_B.i11++) {
                proc_control_B.c_tmp = proc_control_B.i13 + proc_control_B.nb;
                proc_control_B.cBuffer[proc_control_B.c_tmp] = 0.0;
                proc_control_B.i14 = 0;
                for (proc_control_B.i12 = 0; proc_control_B.i12 < 13;
                     proc_control_B.i12++) {
                  proc_control_B.cBuffer[proc_control_B.c_tmp] +=
                    c[proc_control_B.i14 + proc_control_B.nb] *
                    proc_control_B.a_p[proc_control_B.i12 + proc_control_B.i13];
                  proc_control_B.i14 += 13;
                }

                proc_control_B.i13 += 13;
              }
            }

            std::memcpy(&c[0], &proc_control_B.cBuffer[0], 169U * sizeof(real_T));
          }
        }

        if (proc_control_B.ed2 == 0.0) {
          exitg1 = 1;
        } else {
          proc_control_B.e_g = proc_control_B.ed2;
          for (proc_control_B.nb = 0; proc_control_B.nb < 13; proc_control_B.nb
               ++) {
            proc_control_B.i13 = 0;
            for (proc_control_B.i11 = 0; proc_control_B.i11 < 13;
                 proc_control_B.i11++) {
              proc_control_B.c_tmp = proc_control_B.i13 + proc_control_B.nb;
              proc_control_B.cBuffer[proc_control_B.c_tmp] = 0.0;
              proc_control_B.i14 = 0;
              for (proc_control_B.i12 = 0; proc_control_B.i12 < 13;
                   proc_control_B.i12++) {
                proc_control_B.cBuffer[proc_control_B.c_tmp] +=
                  proc_control_B.a_p[proc_control_B.i14 + proc_control_B.nb] *
                  proc_control_B.a_p[proc_control_B.i12 + proc_control_B.i13];
                proc_control_B.i14 += 13;
              }

              proc_control_B.i13 += 13;
            }
          }

          std::memcpy(&proc_control_B.a_p[0], &proc_control_B.cBuffer[0], 169U *
                      sizeof(real_T));
        }
      } while (exitg1 == 0);
    } else {
      for (proc_control_B.nb = 0; proc_control_B.nb < 169; proc_control_B.nb++)
      {
        c[proc_control_B.nb] = (rtNaN);
      }
    }
  }
}

real_T proc_control::proc_control_log2(real_T x)
{
  real_T f;
  int32_T eint;
  if (x == 0.0) {
    f = (rtMinusInf);
  } else if ((!std::isinf(x)) && (!std::isnan(x))) {
    real_T t;
    t = frexp(x, &eint);
    if (t == 0.5) {
      f = static_cast<real_T>(eint) - 1.0;
    } else if ((eint == 1) && (t < 0.75)) {
      f = std::log(2.0 * t) / 0.69314718055994529;
    } else {
      f = std::log(t) / 0.69314718055994529 + static_cast<real_T>(eint);
    }
  } else {
    f = x;
  }

  return f;
}

void proc_control::proc_control_padeApproximation(const real_T A[169], const
  real_T A2[169], const real_T A4[169], const real_T A6[169], int32_T m, real_T
  F[169])
{
  if (m == 3) {
    std::memcpy(&F[0], &A2[0], 169U * sizeof(real_T));
    proc_control_B.g_k_d = 0;
    proc_control_B.kAcol = 0;
    for (proc_control_B.g_k_o = 0; proc_control_B.g_k_o < 13;
         proc_control_B.g_k_o++) {
      F[proc_control_B.g_k_d] += 60.0;
      std::memset(&proc_control_B.A6_a[proc_control_B.kAcol], 0, 13U * sizeof
                  (real_T));
      proc_control_B.g_k_d += 14;
      proc_control_B.kAcol += 13;
    }

    proc_control_B.g_k_o = 0;
    for (proc_control_B.g_k_d = 0; proc_control_B.g_k_d < 13;
         proc_control_B.g_k_d++) {
      proc_control_B.kAcol = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++) {
        for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 13;
             proc_control_B.jA_gr++) {
          proc_control_B.iy_f = proc_control_B.jA_gr + proc_control_B.g_k_o;
          proc_control_B.A6_a[proc_control_B.iy_f] += A[proc_control_B.jA_gr +
            proc_control_B.kAcol] * F[proc_control_B.jj + proc_control_B.g_k_o];
        }

        proc_control_B.kAcol += 13;
      }

      proc_control_B.g_k_o += 13;
    }

    for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 169;
         proc_control_B.jA_gr++) {
      F[proc_control_B.jA_gr] = proc_control_B.A6_a[proc_control_B.jA_gr];
      proc_control_B.V_p[proc_control_B.jA_gr] = 12.0 * A2[proc_control_B.jA_gr];
    }

    proc_control_B.d_a = 120.0;
  } else if (m == 5) {
    for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 169;
         proc_control_B.jA_gr++) {
      F[proc_control_B.jA_gr] = 420.0 * A2[proc_control_B.jA_gr] +
        A4[proc_control_B.jA_gr];
    }

    proc_control_B.g_k_d = 0;
    proc_control_B.kAcol = 0;
    for (proc_control_B.g_k_o = 0; proc_control_B.g_k_o < 13;
         proc_control_B.g_k_o++) {
      F[proc_control_B.g_k_d] += 15120.0;
      std::memset(&proc_control_B.A6_a[proc_control_B.kAcol], 0, 13U * sizeof
                  (real_T));
      proc_control_B.g_k_d += 14;
      proc_control_B.kAcol += 13;
    }

    proc_control_B.g_k_o = 0;
    for (proc_control_B.g_k_d = 0; proc_control_B.g_k_d < 13;
         proc_control_B.g_k_d++) {
      proc_control_B.kAcol = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++) {
        for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 13;
             proc_control_B.jA_gr++) {
          proc_control_B.iy_f = proc_control_B.jA_gr + proc_control_B.g_k_o;
          proc_control_B.A6_a[proc_control_B.iy_f] += A[proc_control_B.jA_gr +
            proc_control_B.kAcol] * F[proc_control_B.jj + proc_control_B.g_k_o];
        }

        proc_control_B.kAcol += 13;
      }

      proc_control_B.g_k_o += 13;
    }

    for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 169;
         proc_control_B.jA_gr++) {
      F[proc_control_B.jA_gr] = proc_control_B.A6_a[proc_control_B.jA_gr];
      proc_control_B.V_p[proc_control_B.jA_gr] = 30.0 * A4[proc_control_B.jA_gr]
        + 3360.0 * A2[proc_control_B.jA_gr];
    }

    proc_control_B.d_a = 30240.0;
  } else if (m == 7) {
    for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 169;
         proc_control_B.jA_gr++) {
      F[proc_control_B.jA_gr] = (1512.0 * A4[proc_control_B.jA_gr] +
        A6[proc_control_B.jA_gr]) + 277200.0 * A2[proc_control_B.jA_gr];
    }

    proc_control_B.g_k_d = 0;
    proc_control_B.kAcol = 0;
    for (proc_control_B.g_k_o = 0; proc_control_B.g_k_o < 13;
         proc_control_B.g_k_o++) {
      F[proc_control_B.g_k_d] += 8.64864E+6;
      std::memset(&proc_control_B.A6_a[proc_control_B.kAcol], 0, 13U * sizeof
                  (real_T));
      proc_control_B.g_k_d += 14;
      proc_control_B.kAcol += 13;
    }

    proc_control_B.g_k_o = 0;
    for (proc_control_B.g_k_d = 0; proc_control_B.g_k_d < 13;
         proc_control_B.g_k_d++) {
      proc_control_B.kAcol = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++) {
        for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 13;
             proc_control_B.jA_gr++) {
          proc_control_B.iy_f = proc_control_B.jA_gr + proc_control_B.g_k_o;
          proc_control_B.A6_a[proc_control_B.iy_f] += A[proc_control_B.jA_gr +
            proc_control_B.kAcol] * F[proc_control_B.jj + proc_control_B.g_k_o];
        }

        proc_control_B.kAcol += 13;
      }

      proc_control_B.g_k_o += 13;
    }

    for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 169;
         proc_control_B.jA_gr++) {
      F[proc_control_B.jA_gr] = proc_control_B.A6_a[proc_control_B.jA_gr];
      proc_control_B.V_p[proc_control_B.jA_gr] = (56.0 * A6[proc_control_B.jA_gr]
        + 25200.0 * A4[proc_control_B.jA_gr]) + 1.99584E+6 *
        A2[proc_control_B.jA_gr];
    }

    proc_control_B.d_a = 1.729728E+7;
  } else if (m == 9) {
    for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 13;
         proc_control_B.jA_gr++) {
      std::memset(&proc_control_B.V_p[proc_control_B.jA_gr * 13], 0, 13U *
                  sizeof(real_T));
      for (proc_control_B.g_k_d = 0; proc_control_B.g_k_d < 13;
           proc_control_B.g_k_d++) {
        for (proc_control_B.g_k_o = 0; proc_control_B.g_k_o < 13;
             proc_control_B.g_k_o++) {
          proc_control_B.kAcol = 13 * proc_control_B.jA_gr +
            proc_control_B.g_k_o;
          proc_control_B.V_p[proc_control_B.kAcol] += A6[13 *
            proc_control_B.g_k_d + proc_control_B.g_k_o] * A2[13 *
            proc_control_B.jA_gr + proc_control_B.g_k_d];
        }
      }
    }

    for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 169;
         proc_control_B.jA_gr++) {
      F[proc_control_B.jA_gr] = ((3960.0 * A6[proc_control_B.jA_gr] +
        proc_control_B.V_p[proc_control_B.jA_gr]) + 2.16216E+6 *
        A4[proc_control_B.jA_gr]) + 3.027024E+8 * A2[proc_control_B.jA_gr];
    }

    proc_control_B.g_k_d = 0;
    proc_control_B.kAcol = 0;
    for (proc_control_B.g_k_o = 0; proc_control_B.g_k_o < 13;
         proc_control_B.g_k_o++) {
      F[proc_control_B.g_k_d] += 8.8216128E+9;
      std::memset(&proc_control_B.A6_a[proc_control_B.kAcol], 0, 13U * sizeof
                  (real_T));
      proc_control_B.g_k_d += 14;
      proc_control_B.kAcol += 13;
    }

    proc_control_B.g_k_o = 0;
    for (proc_control_B.g_k_d = 0; proc_control_B.g_k_d < 13;
         proc_control_B.g_k_d++) {
      proc_control_B.kAcol = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++) {
        for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 13;
             proc_control_B.jA_gr++) {
          proc_control_B.iy_f = proc_control_B.jA_gr + proc_control_B.g_k_o;
          proc_control_B.A6_a[proc_control_B.iy_f] += A[proc_control_B.jA_gr +
            proc_control_B.kAcol] * F[proc_control_B.jj + proc_control_B.g_k_o];
        }

        proc_control_B.kAcol += 13;
      }

      proc_control_B.g_k_o += 13;
    }

    for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 169;
         proc_control_B.jA_gr++) {
      F[proc_control_B.jA_gr] = proc_control_B.A6_a[proc_control_B.jA_gr];
      proc_control_B.V_p[proc_control_B.jA_gr] = ((90.0 *
        proc_control_B.V_p[proc_control_B.jA_gr] + 110880.0 *
        A6[proc_control_B.jA_gr]) + 3.027024E+7 * A4[proc_control_B.jA_gr]) +
        2.0756736E+9 * A2[proc_control_B.jA_gr];
    }

    proc_control_B.d_a = 1.76432256E+10;
  } else {
    for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 169;
         proc_control_B.jA_gr++) {
      F[proc_control_B.jA_gr] = (3.352212864E+10 * A6[proc_control_B.jA_gr] +
        1.05594705216E+13 * A4[proc_control_B.jA_gr]) + 1.1873537964288E+15 *
        A2[proc_control_B.jA_gr];
    }

    proc_control_B.g_k_d = 0;
    for (proc_control_B.g_k_o = 0; proc_control_B.g_k_o < 13;
         proc_control_B.g_k_o++) {
      F[proc_control_B.g_k_d] += 3.238237626624E+16;
      proc_control_B.g_k_d += 14;
    }

    for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 169;
         proc_control_B.jA_gr++) {
      proc_control_B.V_p[proc_control_B.jA_gr] = (16380.0 *
        A4[proc_control_B.jA_gr] + A6[proc_control_B.jA_gr]) + 4.08408E+7 *
        A2[proc_control_B.jA_gr];
    }

    for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 13;
         proc_control_B.jA_gr++) {
      proc_control_B.g_k_o = 0;
      for (proc_control_B.g_k_d = 0; proc_control_B.g_k_d < 13;
           proc_control_B.g_k_d++) {
        proc_control_B.d_a = 0.0;
        proc_control_B.kAcol = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++)
        {
          proc_control_B.d_a += A6[proc_control_B.kAcol + proc_control_B.jA_gr] *
            proc_control_B.V_p[proc_control_B.jj + proc_control_B.g_k_o];
          proc_control_B.kAcol += 13;
        }

        proc_control_B.kAcol = proc_control_B.g_k_o + proc_control_B.jA_gr;
        proc_control_B.A6_a[proc_control_B.kAcol] = F[proc_control_B.kAcol] +
          proc_control_B.d_a;
        proc_control_B.g_k_o += 13;
      }
    }

    for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 13;
         proc_control_B.jA_gr++) {
      std::memset(&F[proc_control_B.jA_gr * 13], 0, 13U * sizeof(real_T));
      for (proc_control_B.g_k_d = 0; proc_control_B.g_k_d < 13;
           proc_control_B.g_k_d++) {
        for (proc_control_B.g_k_o = 0; proc_control_B.g_k_o < 13;
             proc_control_B.g_k_o++) {
          proc_control_B.jj = 13 * proc_control_B.jA_gr + proc_control_B.g_k_o;
          F[proc_control_B.jj] += A[13 * proc_control_B.g_k_d +
            proc_control_B.g_k_o] * proc_control_B.A6_a[13 *
            proc_control_B.jA_gr + proc_control_B.g_k_d];
        }
      }
    }

    for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 169;
         proc_control_B.jA_gr++) {
      proc_control_B.A6_a[proc_control_B.jA_gr] = (182.0 *
        A6[proc_control_B.jA_gr] + 960960.0 * A4[proc_control_B.jA_gr]) +
        1.32324192E+9 * A2[proc_control_B.jA_gr];
    }

    for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 13;
         proc_control_B.jA_gr++) {
      proc_control_B.g_k_o = 0;
      for (proc_control_B.g_k_d = 0; proc_control_B.g_k_d < 13;
           proc_control_B.g_k_d++) {
        proc_control_B.d_a = 0.0;
        proc_control_B.kAcol = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++)
        {
          proc_control_B.d_a += A6[proc_control_B.kAcol + proc_control_B.jA_gr] *
            proc_control_B.A6_a[proc_control_B.jj + proc_control_B.g_k_o];
          proc_control_B.kAcol += 13;
        }

        proc_control_B.kAcol = proc_control_B.g_k_o + proc_control_B.jA_gr;
        proc_control_B.V_p[proc_control_B.kAcol] = ((A6[proc_control_B.kAcol] *
          6.704425728E+11 + proc_control_B.d_a) + A4[proc_control_B.kAcol] *
          1.29060195264E+14) + A2[proc_control_B.kAcol] * 7.7717703038976E+15;
        proc_control_B.g_k_o += 13;
      }
    }

    proc_control_B.d_a = 6.476475253248E+16;
  }

  proc_control_B.g_k_d = 0;
  for (proc_control_B.g_k_o = 0; proc_control_B.g_k_o < 13; proc_control_B.g_k_o
       ++) {
    proc_control_B.V_p[proc_control_B.g_k_d] += proc_control_B.d_a;
    proc_control_B.g_k_d += 14;
  }

  for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 169;
       proc_control_B.jA_gr++) {
    proc_control_B.V_p[proc_control_B.jA_gr] -= F[proc_control_B.jA_gr];
    F[proc_control_B.jA_gr] *= 2.0;
  }

  for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 13; proc_control_B.jA_gr
       ++) {
    proc_control_B.b_ipiv[proc_control_B.jA_gr] = static_cast<int8_T>
      (proc_control_B.jA_gr + 1);
  }

  for (proc_control_B.g_k_o = 0; proc_control_B.g_k_o < 12; proc_control_B.g_k_o
       ++) {
    proc_control_B.g_k_d = proc_control_B.g_k_o * 14 + 2;
    proc_control_B.jj = proc_control_B.g_k_o * 14;
    proc_control_B.kAcol = 13 - proc_control_B.g_k_o;
    proc_control_B.iy_f = 1;
    proc_control_B.d_a = std::abs(proc_control_B.V_p[proc_control_B.jj]);
    for (proc_control_B.jA_gr = 2; proc_control_B.jA_gr <= proc_control_B.kAcol;
         proc_control_B.jA_gr++) {
      proc_control_B.s_i = std::abs(proc_control_B.V_p[(proc_control_B.g_k_d +
        proc_control_B.jA_gr) - 3]);
      if (proc_control_B.s_i > proc_control_B.d_a) {
        proc_control_B.iy_f = proc_control_B.jA_gr;
        proc_control_B.d_a = proc_control_B.s_i;
      }
    }

    if (proc_control_B.V_p[(proc_control_B.g_k_d + proc_control_B.iy_f) - 3] !=
        0.0) {
      if (proc_control_B.iy_f - 1 != 0) {
        proc_control_B.jp1j = proc_control_B.g_k_o + proc_control_B.iy_f;
        proc_control_B.b_ipiv[proc_control_B.g_k_o] = static_cast<int8_T>
          (proc_control_B.jp1j);
        for (proc_control_B.jA_gr = 0; proc_control_B.jA_gr < 13;
             proc_control_B.jA_gr++) {
          proc_control_B.iy_f = proc_control_B.jA_gr * 13 + proc_control_B.g_k_o;
          proc_control_B.d_a = proc_control_B.V_p[proc_control_B.iy_f];
          proc_control_B.kAcol = (proc_control_B.jA_gr * 13 +
            proc_control_B.jp1j) - 1;
          proc_control_B.V_p[proc_control_B.iy_f] =
            proc_control_B.V_p[proc_control_B.kAcol];
          proc_control_B.V_p[proc_control_B.kAcol] = proc_control_B.d_a;
        }
      }

      proc_control_B.iy_f = proc_control_B.g_k_d - proc_control_B.g_k_o;
      for (proc_control_B.ix_n = proc_control_B.g_k_d; proc_control_B.ix_n <=
           proc_control_B.iy_f + 11; proc_control_B.ix_n++) {
        proc_control_B.V_p[proc_control_B.ix_n - 1] /=
          proc_control_B.V_p[proc_control_B.jj];
      }
    }

    proc_control_B.kAcol = 12 - proc_control_B.g_k_o;
    proc_control_B.jA_gr = proc_control_B.jj;
    proc_control_B.jj += 13;
    for (proc_control_B.jp1j = 0; proc_control_B.jp1j < proc_control_B.kAcol;
         proc_control_B.jp1j++) {
      proc_control_B.d_a = proc_control_B.V_p[proc_control_B.jp1j * 13 +
        proc_control_B.jj];
      if (proc_control_B.d_a != 0.0) {
        proc_control_B.iy_f = proc_control_B.jA_gr + 15;
        proc_control_B.ix_n = proc_control_B.jA_gr - proc_control_B.g_k_o;
        for (proc_control_B.ijA_d = proc_control_B.iy_f; proc_control_B.ijA_d <=
             proc_control_B.ix_n + 26; proc_control_B.ijA_d++) {
          proc_control_B.V_p[proc_control_B.ijA_d - 1] += proc_control_B.V_p
            [((proc_control_B.g_k_d + proc_control_B.ijA_d) -
              proc_control_B.jA_gr) - 16] * -proc_control_B.d_a;
        }
      }

      proc_control_B.jA_gr += 13;
    }
  }

  for (proc_control_B.g_k_d = 0; proc_control_B.g_k_d < 12; proc_control_B.g_k_d
       ++) {
    proc_control_B.b_ipiv_d = proc_control_B.b_ipiv[proc_control_B.g_k_d];
    if (proc_control_B.g_k_d + 1 != proc_control_B.b_ipiv_d) {
      for (proc_control_B.g_k_o = 0; proc_control_B.g_k_o < 13;
           proc_control_B.g_k_o++) {
        proc_control_B.iy_f = 13 * proc_control_B.g_k_o + proc_control_B.g_k_d;
        proc_control_B.d_a = F[proc_control_B.iy_f];
        proc_control_B.jj = (13 * proc_control_B.g_k_o + proc_control_B.b_ipiv_d)
          - 1;
        F[proc_control_B.iy_f] = F[proc_control_B.jj];
        F[proc_control_B.jj] = proc_control_B.d_a;
      }
    }
  }

  for (proc_control_B.g_k_o = 0; proc_control_B.g_k_o < 13; proc_control_B.g_k_o
       ++) {
    proc_control_B.jp1j = 13 * proc_control_B.g_k_o - 1;
    for (proc_control_B.g_k_d = 0; proc_control_B.g_k_d < 13;
         proc_control_B.g_k_d++) {
      proc_control_B.kAcol = 13 * proc_control_B.g_k_d - 1;
      proc_control_B.jA_gr = (proc_control_B.g_k_d + proc_control_B.jp1j) + 1;
      if (F[proc_control_B.jA_gr] != 0.0) {
        for (proc_control_B.ix_n = proc_control_B.g_k_d + 2; proc_control_B.ix_n
             < 14; proc_control_B.ix_n++) {
          proc_control_B.jj = proc_control_B.ix_n + proc_control_B.jp1j;
          F[proc_control_B.jj] -= proc_control_B.V_p[proc_control_B.ix_n +
            proc_control_B.kAcol] * F[proc_control_B.jA_gr];
        }
      }
    }
  }

  for (proc_control_B.g_k_o = 0; proc_control_B.g_k_o < 13; proc_control_B.g_k_o
       ++) {
    proc_control_B.jp1j = 13 * proc_control_B.g_k_o;
    for (proc_control_B.jA_gr = 12; proc_control_B.jA_gr >= 0;
         proc_control_B.jA_gr--) {
      proc_control_B.kAcol = 13 * proc_control_B.jA_gr;
      if (F[proc_control_B.jA_gr + proc_control_B.jp1j] != 0.0) {
        proc_control_B.jj = proc_control_B.jA_gr + proc_control_B.jp1j;
        F[proc_control_B.jj] /= proc_control_B.V_p[proc_control_B.jA_gr +
          proc_control_B.kAcol];
        proc_control_B.iy_f = proc_control_B.jA_gr - 1;
        for (proc_control_B.g_k_d = 0; proc_control_B.g_k_d <=
             proc_control_B.iy_f; proc_control_B.g_k_d++) {
          proc_control_B.ix_n = proc_control_B.g_k_d + proc_control_B.jp1j;
          F[proc_control_B.ix_n] -= proc_control_B.V_p[proc_control_B.g_k_d +
            proc_control_B.kAcol] * F[proc_control_B.jj];
        }
      }
    }
  }

  proc_control_B.g_k_d = 0;
  for (proc_control_B.g_k_o = 0; proc_control_B.g_k_o < 13; proc_control_B.g_k_o
       ++) {
    F[proc_control_B.g_k_d]++;
    proc_control_B.g_k_d += 14;
  }
}

void proc_control::proc_control_recomputeBlockDiag(const real_T A[169], const
  real_T F[169], const int32_T blockFormat[12], real_T b_F[169])
{
  std::memcpy(&b_F[0], &F[0], 169U * sizeof(real_T));
  for (int32_T b_j{0}; b_j < 12; b_j++) {
    int32_T blockFormat_0;
    blockFormat_0 = blockFormat[b_j];
    if (blockFormat_0 != 0) {
      if (blockFormat_0 == 1) {
        real_T delta;
        real_T delta_tmp;
        real_T delta_tmp_0;
        real_T expa;
        real_T sinchdelta;
        int32_T delta_tmp_tmp;
        blockFormat_0 = 13 * b_j + b_j;
        delta_tmp = A[blockFormat_0];
        delta = std::exp(delta_tmp);
        delta_tmp_tmp = (b_j + 1) * 13 + b_j;
        delta_tmp_0 = A[delta_tmp_tmp + 1];
        expa = std::exp(delta_tmp_0);
        sinchdelta = (delta_tmp_0 + delta_tmp) / 2.0;
        if (std::fmax(sinchdelta, std::abs(delta_tmp - delta_tmp_0) / 2.0) <
            709.782712893384) {
          delta_tmp = (A[delta_tmp_tmp + 1] - A[blockFormat_0]) / 2.0;
          if (delta_tmp == 0.0) {
            delta_tmp = 1.0;
          } else {
            delta_tmp = std::sinh(delta_tmp) / delta_tmp;
          }

          sinchdelta = A[delta_tmp_tmp] * std::exp(sinchdelta) * delta_tmp;
        } else {
          sinchdelta = (expa - delta) * A[delta_tmp_tmp] / (delta_tmp_0 -
            delta_tmp);
        }

        b_F[blockFormat_0] = delta;
        b_F[delta_tmp_tmp] = sinchdelta;
        b_F[delta_tmp_tmp + 1] = expa;
      } else {
        real_T delta;
        real_T delta_tmp;
        real_T delta_tmp_0;
        real_T expa;
        real_T sinchdelta;
        int32_T delta_tmp_tmp;
        blockFormat_0 = 13 * b_j + b_j;
        delta_tmp = A[blockFormat_0 + 1];
        delta_tmp_tmp = (b_j + 1) * 13 + b_j;
        delta_tmp_0 = A[delta_tmp_tmp];
        delta = std::sqrt(std::abs(delta_tmp_0 * delta_tmp));
        expa = std::exp(A[blockFormat_0]);
        if (delta == 0.0) {
          sinchdelta = 1.0;
        } else {
          sinchdelta = std::sin(delta) / delta;
        }

        b_F[blockFormat_0] = expa * std::cos(delta);
        b_F[blockFormat_0 + 1] = delta_tmp * expa * sinchdelta;
        b_F[delta_tmp_tmp] = delta_tmp_0 * expa * sinchdelta;
        b_F[delta_tmp_tmp + 1] = b_F[blockFormat_0];
      }
    }
  }

  if (blockFormat[11] == 0) {
    b_F[168] = std::exp(A[168]);
  }
}

real_T proc_control::proc_control_xnrm2_p(int32_T n, const real_T x[169],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n < 1) {
  } else if (n == 1) {
    y = std::abs(x[ix0 - 1]);
  } else {
    proc_control_B.scale_d = 3.3121686421112381E-170;
    proc_control_B.kend_c = ix0 + n;
    for (proc_control_B.k_j = ix0; proc_control_B.k_j < proc_control_B.kend_c;
         proc_control_B.k_j++) {
      proc_control_B.absxk_g = std::abs(x[proc_control_B.k_j - 1]);
      if (proc_control_B.absxk_g > proc_control_B.scale_d) {
        proc_control_B.t_i = proc_control_B.scale_d / proc_control_B.absxk_g;
        y = y * proc_control_B.t_i * proc_control_B.t_i + 1.0;
        proc_control_B.scale_d = proc_control_B.absxk_g;
      } else {
        proc_control_B.t_i = proc_control_B.absxk_g / proc_control_B.scale_d;
        y += proc_control_B.t_i * proc_control_B.t_i;
      }
    }

    y = proc_control_B.scale_d * std::sqrt(y);
  }

  return y;
}

void proc_control::proc_control_xgerc_p(int32_T m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y[13], const real_T A[169], int32_T ia0, real_T b_A
  [169])
{
  std::memcpy(&b_A[0], &A[0], 169U * sizeof(real_T));
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    jA = ia0;
    for (int32_T j{0}; j < n; j++) {
      real_T temp;
      temp = y[j];
      if (temp != 0.0) {
        int32_T c;
        temp *= alpha1;
        c = (m + jA) - 1;
        for (int32_T ijA{jA}; ijA <= c; ijA++) {
          b_A[ijA - 1] += b_A[((ix0 + ijA) - jA) - 1] * temp;
        }
      }

      jA += 13;
    }
  }
}

void proc_control::proc_control_xgehrd(const real_T a[169], real_T b_a[169],
  real_T tau[12])
{
  std::memcpy(&b_a[0], &a[0], 169U * sizeof(real_T));
  std::memset(&proc_control_B.work_e[0], 0, 13U * sizeof(real_T));
  for (proc_control_B.b_i_j = 0; proc_control_B.b_i_j < 12; proc_control_B.b_i_j
       ++) {
    int32_T exitg1;
    boolean_T exitg2;
    proc_control_B.in = (proc_control_B.b_i_j + 1) * 13;
    if (proc_control_B.b_i_j + 3 <= 13) {
      proc_control_B.ia0 = proc_control_B.b_i_j + 3;
    } else {
      proc_control_B.ia0 = 13;
    }

    proc_control_B.ia0 += proc_control_B.b_i_j * 13;
    proc_control_B.b_i_tmp = 13 * proc_control_B.b_i_j + proc_control_B.b_i_j;
    proc_control_B.b_alpha1_tmp = b_a[proc_control_B.b_i_tmp + 1];
    tau[proc_control_B.b_i_j] = 0.0;
    proc_control_B.xnorm_o = proc_control_xnrm2_p(11 - proc_control_B.b_i_j, b_a,
      proc_control_B.ia0);
    if (proc_control_B.xnorm_o != 0.0) {
      proc_control_B.xnorm_o = proc_control_rt_hypotd_snf
        (proc_control_B.b_alpha1_tmp, proc_control_B.xnorm_o);
      if (proc_control_B.b_alpha1_tmp >= 0.0) {
        proc_control_B.xnorm_o = -proc_control_B.xnorm_o;
      }

      if (std::abs(proc_control_B.xnorm_o) < 1.0020841800044864E-292) {
        proc_control_B.knt_n = -1;
        do {
          proc_control_B.knt_n++;
          proc_control_B.i_kwn = proc_control_B.ia0 - proc_control_B.b_i_j;
          for (proc_control_B.lastv_o = proc_control_B.ia0;
               proc_control_B.lastv_o <= proc_control_B.i_kwn + 10;
               proc_control_B.lastv_o++) {
            b_a[proc_control_B.lastv_o - 1] *= 9.9792015476736E+291;
          }

          proc_control_B.xnorm_o *= 9.9792015476736E+291;
          proc_control_B.b_alpha1_tmp *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.xnorm_o) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_n + 1 < 20));

        proc_control_B.xnorm_o = proc_control_rt_hypotd_snf
          (proc_control_B.b_alpha1_tmp, proc_control_xnrm2_p(11 -
            proc_control_B.b_i_j, b_a, proc_control_B.ia0));
        if (proc_control_B.b_alpha1_tmp >= 0.0) {
          proc_control_B.xnorm_o = -proc_control_B.xnorm_o;
        }

        tau[proc_control_B.b_i_j] = (proc_control_B.xnorm_o -
          proc_control_B.b_alpha1_tmp) / proc_control_B.xnorm_o;
        proc_control_B.b_alpha1_tmp = 1.0 / (proc_control_B.b_alpha1_tmp -
          proc_control_B.xnorm_o);
        proc_control_B.i_kwn = proc_control_B.ia0 - proc_control_B.b_i_j;
        for (proc_control_B.lastv_o = proc_control_B.ia0; proc_control_B.lastv_o
             <= proc_control_B.i_kwn + 10; proc_control_B.lastv_o++) {
          b_a[proc_control_B.lastv_o - 1] *= proc_control_B.b_alpha1_tmp;
        }

        for (proc_control_B.lastv_o = 0; proc_control_B.lastv_o <=
             proc_control_B.knt_n; proc_control_B.lastv_o++) {
          proc_control_B.xnorm_o *= 1.0020841800044864E-292;
        }

        proc_control_B.b_alpha1_tmp = proc_control_B.xnorm_o;
      } else {
        tau[proc_control_B.b_i_j] = (proc_control_B.xnorm_o -
          proc_control_B.b_alpha1_tmp) / proc_control_B.xnorm_o;
        proc_control_B.b_alpha1_tmp = 1.0 / (proc_control_B.b_alpha1_tmp -
          proc_control_B.xnorm_o);
        proc_control_B.i_kwn = proc_control_B.ia0 - proc_control_B.b_i_j;
        for (proc_control_B.lastv_o = proc_control_B.ia0; proc_control_B.lastv_o
             <= proc_control_B.i_kwn + 10; proc_control_B.lastv_o++) {
          b_a[proc_control_B.lastv_o - 1] *= proc_control_B.b_alpha1_tmp;
        }

        proc_control_B.b_alpha1_tmp = proc_control_B.xnorm_o;
      }
    }

    b_a[proc_control_B.b_i_tmp + 1] = 1.0;
    if (tau[proc_control_B.b_i_j] != 0.0) {
      proc_control_B.lastv_o = 12 - proc_control_B.b_i_j;
      proc_control_B.i_kwn = (proc_control_B.b_i_tmp - proc_control_B.b_i_j) + 2;
      while ((proc_control_B.lastv_o > 0) && (b_a[proc_control_B.i_kwn + 10] ==
              0.0)) {
        proc_control_B.lastv_o--;
        proc_control_B.i_kwn--;
      }

      proc_control_B.knt_n = 13;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.knt_n > 0)) {
        proc_control_B.i_kwn = proc_control_B.in + proc_control_B.knt_n;
        proc_control_B.jA_a = proc_control_B.i_kwn;
        do {
          exitg1 = 0;
          if (proc_control_B.jA_a <= (proc_control_B.lastv_o - 1) * 13 +
              proc_control_B.i_kwn) {
            if (b_a[proc_control_B.jA_a - 1] != 0.0) {
              exitg1 = 1;
            } else {
              proc_control_B.jA_a += 13;
            }
          } else {
            proc_control_B.knt_n--;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    } else {
      proc_control_B.lastv_o = 0;
      proc_control_B.knt_n = 0;
    }

    if (proc_control_B.lastv_o > 0) {
      if (proc_control_B.knt_n != 0) {
        std::memset(&proc_control_B.work_e[0], 0, proc_control_B.knt_n * sizeof
                    (real_T));
        proc_control_B.ix_o = proc_control_B.b_i_tmp + 1;
        proc_control_B.i_kwn = (proc_control_B.lastv_o - 1) * 13 +
          proc_control_B.in;
        for (proc_control_B.iac_d = proc_control_B.in + 1; proc_control_B.iac_d <=
             proc_control_B.i_kwn + 1; proc_control_B.iac_d += 13) {
          proc_control_B.ia0 = proc_control_B.iac_d + proc_control_B.knt_n;
          for (proc_control_B.jA_a = proc_control_B.iac_d; proc_control_B.jA_a <
               proc_control_B.ia0; proc_control_B.jA_a++) {
            proc_control_B.work_tmp = proc_control_B.jA_a - proc_control_B.iac_d;
            proc_control_B.work_e[proc_control_B.work_tmp] +=
              b_a[proc_control_B.jA_a - 1] * b_a[proc_control_B.ix_o];
          }

          proc_control_B.ix_o++;
        }
      }

      if (!(-tau[proc_control_B.b_i_j] == 0.0)) {
        proc_control_B.jA_a = proc_control_B.in;
        for (proc_control_B.iac_d = 0; proc_control_B.iac_d <
             proc_control_B.lastv_o; proc_control_B.iac_d++) {
          proc_control_B.xnorm_o = b_a[(proc_control_B.b_i_tmp +
            proc_control_B.iac_d) + 1];
          if (proc_control_B.xnorm_o != 0.0) {
            proc_control_B.xnorm_o *= -tau[proc_control_B.b_i_j];
            proc_control_B.ia0 = proc_control_B.knt_n + proc_control_B.jA_a;
            for (proc_control_B.i_kwn = proc_control_B.jA_a + 1;
                 proc_control_B.i_kwn <= proc_control_B.ia0;
                 proc_control_B.i_kwn++) {
              b_a[proc_control_B.i_kwn - 1] += proc_control_B.work_e
                [(proc_control_B.i_kwn - proc_control_B.jA_a) - 1] *
                proc_control_B.xnorm_o;
            }
          }

          proc_control_B.jA_a += 13;
        }
      }
    }

    proc_control_B.ix_o = (proc_control_B.b_i_j + proc_control_B.in) + 2;
    if (tau[proc_control_B.b_i_j] != 0.0) {
      proc_control_B.lastv_o = 12 - proc_control_B.b_i_j;
      proc_control_B.i_kwn = (proc_control_B.b_i_tmp - proc_control_B.b_i_j) + 2;
      while ((proc_control_B.lastv_o > 0) && (b_a[proc_control_B.i_kwn + 10] ==
              0.0)) {
        proc_control_B.lastv_o--;
        proc_control_B.i_kwn--;
      }

      proc_control_B.knt_n = 12 - proc_control_B.b_i_j;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.knt_n > 0)) {
        proc_control_B.in = (proc_control_B.knt_n - 1) * 13 +
          proc_control_B.ix_o;
        proc_control_B.jA_a = proc_control_B.in;
        do {
          exitg1 = 0;
          if (proc_control_B.jA_a <= (proc_control_B.in + proc_control_B.lastv_o)
              - 1) {
            if (b_a[proc_control_B.jA_a - 1] != 0.0) {
              exitg1 = 1;
            } else {
              proc_control_B.jA_a++;
            }
          } else {
            proc_control_B.knt_n--;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    } else {
      proc_control_B.lastv_o = 0;
      proc_control_B.knt_n = 0;
    }

    if (proc_control_B.lastv_o > 0) {
      if (proc_control_B.knt_n != 0) {
        std::memset(&proc_control_B.work_e[0], 0, proc_control_B.knt_n * sizeof
                    (real_T));
        proc_control_B.i_kwn = (proc_control_B.knt_n - 1) * 13 +
          proc_control_B.ix_o;
        for (proc_control_B.iac_d = proc_control_B.ix_o; proc_control_B.iac_d <=
             proc_control_B.i_kwn; proc_control_B.iac_d += 13) {
          proc_control_B.xnorm_o = 0.0;
          proc_control_B.ia0 = proc_control_B.iac_d + proc_control_B.lastv_o;
          for (proc_control_B.jA_a = proc_control_B.iac_d; proc_control_B.jA_a <
               proc_control_B.ia0; proc_control_B.jA_a++) {
            proc_control_B.xnorm_o += b_a[((proc_control_B.b_i_tmp +
              proc_control_B.jA_a) - proc_control_B.iac_d) + 1] *
              b_a[proc_control_B.jA_a - 1];
          }

          proc_control_B.work_tmp = div_nde_s32_floor(proc_control_B.iac_d -
            proc_control_B.ix_o, 13);
          proc_control_B.work_e[proc_control_B.work_tmp] +=
            proc_control_B.xnorm_o;
        }
      }

      std::memcpy(&proc_control_B.b_a_o[0], &b_a[0], 169U * sizeof(real_T));
      proc_control_xgerc_p(proc_control_B.lastv_o, proc_control_B.knt_n,
                           -tau[proc_control_B.b_i_j], proc_control_B.b_i_tmp +
                           2, proc_control_B.work_e, proc_control_B.b_a_o,
                           proc_control_B.ix_o, b_a);
    }

    b_a[proc_control_B.b_i_tmp + 1] = proc_control_B.b_alpha1_tmp;
  }
}

real_T proc_control::proc_control_xnrm2_pr(int32_T n, const real_T x[3])
{
  real_T y;
  y = 0.0;
  if (n < 1) {
  } else if (n == 1) {
    y = std::abs(x[1]);
  } else {
    real_T absxk;
    real_T scale;
    real_T t;
    scale = 3.3121686421112381E-170;
    absxk = std::abs(x[1]);
    if (absxk > 3.3121686421112381E-170) {
      y = 1.0;
      scale = absxk;
    } else {
      t = absxk / 3.3121686421112381E-170;
      y = t * t;
    }

    absxk = std::abs(x[2]);
    if (absxk > scale) {
      t = scale / absxk;
      y = y * t * t + 1.0;
      scale = absxk;
    } else {
      t = absxk / scale;
      y += t * t;
    }

    y = scale * std::sqrt(y);
  }

  return y;
}

void proc_control::proc_control_xdlanv2(real_T a, real_T b, real_T c, real_T d,
  real_T *rt1r, real_T *rt1i, real_T *rt2r, real_T *rt2i, real_T *b_a, real_T
  *b_b, real_T *b_c, real_T *b_d, real_T *cs, real_T *sn)
{
  *b_d = d;
  *b_c = c;
  *b_b = b;
  *b_a = a;
  if (c == 0.0) {
    *cs = 1.0;
    *sn = 0.0;
  } else if (b == 0.0) {
    *cs = 0.0;
    *sn = 1.0;
    *b_d = a;
    *b_a = d;
    *b_b = -c;
    *b_c = 0.0;
  } else {
    proc_control_B.temp_l = a - d;
    if ((proc_control_B.temp_l == 0.0) && ((b < 0.0) != (c < 0.0))) {
      *cs = 1.0;
      *sn = 0.0;
    } else {
      proc_control_B.p_p = 0.5 * proc_control_B.temp_l;
      proc_control_B.scale_i = std::abs(b);
      proc_control_B.z_b = std::abs(c);
      proc_control_B.bcmax = std::fmax(proc_control_B.scale_i,
        proc_control_B.z_b);
      if (!(b < 0.0)) {
        proc_control_B.b_l = 1;
      } else {
        proc_control_B.b_l = -1;
      }

      if (!(c < 0.0)) {
        proc_control_B.c_l = 1;
      } else {
        proc_control_B.c_l = -1;
      }

      proc_control_B.bcmis = std::fmin(proc_control_B.scale_i,
        proc_control_B.z_b) * static_cast<real_T>(proc_control_B.b_l) *
        static_cast<real_T>(proc_control_B.c_l);
      proc_control_B.scale_i = std::fmax(std::abs(proc_control_B.p_p),
        proc_control_B.bcmax);
      proc_control_B.z_b = proc_control_B.p_p / proc_control_B.scale_i *
        proc_control_B.p_p + proc_control_B.bcmax / proc_control_B.scale_i *
        proc_control_B.bcmis;
      if (proc_control_B.z_b >= 8.8817841970012523E-16) {
        proc_control_B.scale_i = std::sqrt(proc_control_B.scale_i) * std::sqrt
          (proc_control_B.z_b);
        if (proc_control_B.p_p < 0.0) {
          proc_control_B.scale_i = -proc_control_B.scale_i;
        }

        proc_control_B.z_b = proc_control_B.p_p + proc_control_B.scale_i;
        *b_a = d + proc_control_B.z_b;
        *b_d = d - proc_control_B.bcmax / proc_control_B.z_b *
          proc_control_B.bcmis;
        proc_control_B.scale_i = proc_control_rt_hypotd_snf(c,
          proc_control_B.z_b);
        *cs = proc_control_B.z_b / proc_control_B.scale_i;
        *sn = c / proc_control_B.scale_i;
        *b_b = b - c;
        *b_c = 0.0;
      } else {
        proc_control_B.bcmax = b + c;
        proc_control_B.scale_i = proc_control_rt_hypotd_snf(proc_control_B.bcmax,
          proc_control_B.temp_l);
        *cs = std::sqrt((std::abs(proc_control_B.bcmax) / proc_control_B.scale_i
                         + 1.0) * 0.5);
        if (!(proc_control_B.bcmax < 0.0)) {
          proc_control_B.b_l = 1;
        } else {
          proc_control_B.b_l = -1;
        }

        *sn = -(proc_control_B.p_p / (proc_control_B.scale_i * *cs)) *
          static_cast<real_T>(proc_control_B.b_l);
        proc_control_B.temp_l = a * *cs + b * *sn;
        proc_control_B.p_p = -a * *sn + b * *cs;
        proc_control_B.scale_i = c * *cs + d * *sn;
        proc_control_B.bcmax = -c * *sn + d * *cs;
        *b_b = proc_control_B.p_p * *cs + proc_control_B.bcmax * *sn;
        *b_c = -proc_control_B.temp_l * *sn + proc_control_B.scale_i * *cs;
        proc_control_B.temp_l = ((proc_control_B.temp_l * *cs +
          proc_control_B.scale_i * *sn) + (-proc_control_B.p_p * *sn +
          proc_control_B.bcmax * *cs)) * 0.5;
        *b_a = proc_control_B.temp_l;
        *b_d = proc_control_B.temp_l;
        if (*b_c != 0.0) {
          if (*b_b != 0.0) {
            if ((*b_b < 0.0) == (*b_c < 0.0)) {
              proc_control_B.z_b = std::sqrt(std::abs(*b_b));
              proc_control_B.bcmax = std::sqrt(std::abs(*b_c));
              if (!(*b_c < 0.0)) {
                proc_control_B.p_p = proc_control_B.z_b * proc_control_B.bcmax;
              } else {
                proc_control_B.p_p = -(proc_control_B.z_b * proc_control_B.bcmax);
              }

              proc_control_B.scale_i = 1.0 / std::sqrt(std::abs(*b_b + *b_c));
              *b_a = proc_control_B.temp_l + proc_control_B.p_p;
              *b_d = proc_control_B.temp_l - proc_control_B.p_p;
              *b_b -= *b_c;
              *b_c = 0.0;
              proc_control_B.p_p = proc_control_B.z_b * proc_control_B.scale_i;
              proc_control_B.scale_i *= proc_control_B.bcmax;
              proc_control_B.temp_l = *cs * proc_control_B.p_p - *sn *
                proc_control_B.scale_i;
              *sn = *cs * proc_control_B.scale_i + *sn * proc_control_B.p_p;
              *cs = proc_control_B.temp_l;
            }
          } else {
            *b_b = -*b_c;
            *b_c = 0.0;
            proc_control_B.temp_l = *cs;
            *cs = -*sn;
            *sn = proc_control_B.temp_l;
          }
        }
      }
    }
  }

  *rt1r = *b_a;
  *rt2r = *b_d;
  if (*b_c == 0.0) {
    *rt1i = 0.0;
    *rt2i = 0.0;
  } else {
    *rt1i = std::sqrt(std::abs(*b_b)) * std::sqrt(std::abs(*b_c));
    *rt2i = -*rt1i;
  }
}

void proc_control::proc_control_xrot(int32_T n, const real_T x[169], int32_T ix0,
  int32_T iy0, real_T c, real_T s, real_T b_x[169])
{
  std::memcpy(&b_x[0], &x[0], 169U * sizeof(real_T));
  for (int32_T k{0}; k < n; k++) {
    real_T temp_tmp_0;
    real_T temp_tmp_2;
    int32_T temp_tmp;
    int32_T temp_tmp_1;
    temp_tmp = (k * 13 + iy0) - 1;
    temp_tmp_0 = b_x[temp_tmp];
    temp_tmp_1 = (k * 13 + ix0) - 1;
    temp_tmp_2 = b_x[temp_tmp_1];
    b_x[temp_tmp] = temp_tmp_0 * c - temp_tmp_2 * s;
    b_x[temp_tmp_1] = temp_tmp_2 * c + temp_tmp_0 * s;
  }
}

void proc_control::proc_control_xrot_p(int32_T n, const real_T x[169], int32_T
  ix0, int32_T iy0, real_T c, real_T s, real_T b_x[169])
{
  std::memcpy(&b_x[0], &x[0], 169U * sizeof(real_T));
  if (n >= 1) {
    for (int32_T k{0}; k < n; k++) {
      real_T temp_tmp_0;
      real_T temp_tmp_2;
      int32_T temp_tmp;
      int32_T temp_tmp_1;
      temp_tmp = (iy0 + k) - 1;
      temp_tmp_0 = b_x[temp_tmp];
      temp_tmp_1 = (ix0 + k) - 1;
      temp_tmp_2 = b_x[temp_tmp_1];
      b_x[temp_tmp] = temp_tmp_0 * c - temp_tmp_2 * s;
      b_x[temp_tmp_1] = temp_tmp_2 * c + temp_tmp_0 * s;
    }
  }
}

void proc_control::proc_control_xrot_pr(const real_T x[169], int32_T ix0,
  int32_T iy0, real_T c, real_T s, real_T b_x[169])
{
  std::memcpy(&b_x[0], &x[0], 169U * sizeof(real_T));
  for (int32_T k{0}; k < 13; k++) {
    real_T temp_tmp_0;
    real_T temp_tmp_2;
    int32_T temp_tmp;
    int32_T temp_tmp_1;
    temp_tmp = (iy0 + k) - 1;
    temp_tmp_0 = b_x[temp_tmp];
    temp_tmp_1 = (ix0 + k) - 1;
    temp_tmp_2 = b_x[temp_tmp_1];
    b_x[temp_tmp] = temp_tmp_0 * c - temp_tmp_2 * s;
    b_x[temp_tmp_1] = temp_tmp_2 * c + temp_tmp_0 * s;
  }
}

void proc_control::proc_control_eml_dlahqr(const real_T h[169], const real_T z
  [169], real_T b_h[169], int32_T *info, real_T b_z[169])
{
  boolean_T exitg1;
  std::memcpy(&b_z[0], &z[0], 169U * sizeof(real_T));
  std::memcpy(&b_h[0], &h[0], 169U * sizeof(real_T));
  *info = 0;
  proc_control_B.v[0] = 0.0;
  proc_control_B.v[1] = 0.0;
  proc_control_B.v[2] = 0.0;
  proc_control_B.L = 0;
  for (proc_control_B.i_kr = 0; proc_control_B.i_kr < 10; proc_control_B.i_kr++)
  {
    b_h[proc_control_B.L + 2] = 0.0;
    b_h[proc_control_B.L + 3] = 0.0;
    proc_control_B.L += 14;
  }

  b_h[142] = 0.0;
  proc_control_B.i_kr = 12;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.i_kr + 1 >= 1)) {
    boolean_T exitg2;
    proc_control_B.L = 1;
    proc_control_B.goto150 = false;
    proc_control_B.its = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.its < 391)) {
      boolean_T exitg3;
      proc_control_B.k_k = proc_control_B.i_kr;
      exitg3 = false;
      while ((!exitg3) && (proc_control_B.k_k + 1 > proc_control_B.L)) {
        proc_control_B.m_i = (proc_control_B.k_k - 1) * 13 + proc_control_B.k_k;
        proc_control_B.ba = std::abs(b_h[proc_control_B.m_i]);
        if (proc_control_B.ba <= 1.3027094340058323E-291) {
          exitg3 = true;
        } else {
          proc_control_B.hoffset = 13 * proc_control_B.k_k + proc_control_B.k_k;
          proc_control_B.aa = b_h[proc_control_B.hoffset];
          proc_control_B.bb = std::abs(proc_control_B.aa);
          proc_control_B.h12 = b_h[proc_control_B.m_i - 1];
          proc_control_B.tst = std::abs(proc_control_B.h12) + proc_control_B.bb;
          if (proc_control_B.tst == 0.0) {
            if (proc_control_B.k_k - 1 >= 1) {
              proc_control_B.tst = std::abs(b_h[((proc_control_B.k_k - 2) * 13 +
                proc_control_B.k_k) - 1]);
            }

            if (proc_control_B.k_k + 2 <= 13) {
              proc_control_B.tst += std::abs(b_h[proc_control_B.hoffset + 1]);
            }
          }

          if (proc_control_B.ba <= 2.2204460492503131E-16 * proc_control_B.tst)
          {
            proc_control_B.tst = std::abs(b_h[proc_control_B.hoffset - 1]);
            if (proc_control_B.ba > proc_control_B.tst) {
              proc_control_B.ab = proc_control_B.ba;
              proc_control_B.ba = proc_control_B.tst;
            } else {
              proc_control_B.ab = proc_control_B.tst;
            }

            proc_control_B.tst = std::abs(proc_control_B.h12 - proc_control_B.aa);
            if (proc_control_B.bb > proc_control_B.tst) {
              proc_control_B.aa = proc_control_B.bb;
              proc_control_B.bb = proc_control_B.tst;
            } else {
              proc_control_B.aa = proc_control_B.tst;
            }

            proc_control_B.tst = proc_control_B.aa + proc_control_B.ab;
            if (proc_control_B.ab / proc_control_B.tst * proc_control_B.ba <=
                std::fmax(1.3027094340058323E-291, proc_control_B.aa /
                          proc_control_B.tst * proc_control_B.bb *
                          2.2204460492503131E-16)) {
              exitg3 = true;
            } else {
              proc_control_B.k_k--;
            }
          } else {
            proc_control_B.k_k--;
          }
        }
      }

      proc_control_B.L = proc_control_B.k_k + 1;
      if (proc_control_B.k_k + 1 > 1) {
        b_h[proc_control_B.k_k + 13 * (proc_control_B.k_k - 1)] = 0.0;
      }

      if (proc_control_B.k_k + 1 >= proc_control_B.i_kr) {
        proc_control_B.goto150 = true;
        exitg2 = true;
      } else {
        if (proc_control_B.its == 10) {
          proc_control_B.bb_tmp = 13 * proc_control_B.k_k + proc_control_B.k_k;
          proc_control_B.tst = std::abs(b_h[((proc_control_B.k_k + 1) * 13 +
            proc_control_B.k_k) + 2]) + std::abs(b_h[proc_control_B.bb_tmp + 1]);
          proc_control_B.ab = 0.75 * proc_control_B.tst +
            b_h[proc_control_B.bb_tmp];
          proc_control_B.h12 = -0.4375 * proc_control_B.tst;
          proc_control_B.aa = proc_control_B.tst;
          proc_control_B.ba = proc_control_B.ab;
        } else if (proc_control_B.its == 20) {
          proc_control_B.tst = std::abs(b_h[((proc_control_B.i_kr - 2) * 13 +
            proc_control_B.i_kr) - 1]) + std::abs(b_h[(proc_control_B.i_kr - 1) *
            13 + proc_control_B.i_kr]);
          proc_control_B.ab = b_h[13 * proc_control_B.i_kr + proc_control_B.i_kr]
            + 0.75 * proc_control_B.tst;
          proc_control_B.h12 = -0.4375 * proc_control_B.tst;
          proc_control_B.aa = proc_control_B.tst;
          proc_control_B.ba = proc_control_B.ab;
        } else {
          proc_control_B.ab_tmp = (proc_control_B.i_kr - 1) * 13 +
            proc_control_B.i_kr;
          proc_control_B.ab = b_h[proc_control_B.ab_tmp - 1];
          proc_control_B.aa = b_h[proc_control_B.ab_tmp];
          proc_control_B.h12 = b_h[(13 * proc_control_B.i_kr +
            proc_control_B.i_kr) - 1];
          proc_control_B.ba = b_h[13 * proc_control_B.i_kr + proc_control_B.i_kr];
        }

        proc_control_B.tst = ((std::abs(proc_control_B.ab) + std::abs
          (proc_control_B.h12)) + std::abs(proc_control_B.aa)) + std::abs
          (proc_control_B.ba);
        if (proc_control_B.tst == 0.0) {
          proc_control_B.ab = 0.0;
          proc_control_B.ba = 0.0;
          proc_control_B.bb = 0.0;
          proc_control_B.aa = 0.0;
        } else {
          proc_control_B.ab /= proc_control_B.tst;
          proc_control_B.ba /= proc_control_B.tst;
          proc_control_B.bb = (proc_control_B.ab + proc_control_B.ba) / 2.0;
          proc_control_B.ab = (proc_control_B.ab - proc_control_B.bb) *
            (proc_control_B.ba - proc_control_B.bb) - proc_control_B.h12 /
            proc_control_B.tst * (proc_control_B.aa / proc_control_B.tst);
          proc_control_B.aa = std::sqrt(std::abs(proc_control_B.ab));
          if (proc_control_B.ab >= 0.0) {
            proc_control_B.ab = proc_control_B.bb * proc_control_B.tst;
            proc_control_B.bb = proc_control_B.ab;
            proc_control_B.ba = proc_control_B.aa * proc_control_B.tst;
            proc_control_B.aa = -proc_control_B.ba;
          } else {
            proc_control_B.ab = proc_control_B.bb + proc_control_B.aa;
            proc_control_B.bb -= proc_control_B.aa;
            if (std::abs(proc_control_B.ab - proc_control_B.ba) <= std::abs
                (proc_control_B.bb - proc_control_B.ba)) {
              proc_control_B.ab *= proc_control_B.tst;
              proc_control_B.bb = proc_control_B.ab;
            } else {
              proc_control_B.bb *= proc_control_B.tst;
              proc_control_B.ab = proc_control_B.bb;
            }

            proc_control_B.ba = 0.0;
            proc_control_B.aa = 0.0;
          }
        }

        proc_control_B.m_i = proc_control_B.i_kr - 2;
        exitg3 = false;
        while ((!exitg3) && (proc_control_B.m_i + 1 >= proc_control_B.k_k + 1))
        {
          proc_control_B.bb_tmp = 13 * proc_control_B.m_i + proc_control_B.m_i;
          proc_control_B.h12 = b_h[proc_control_B.bb_tmp + 1];
          proc_control_B.tst_tmp_tmp = b_h[proc_control_B.bb_tmp];
          proc_control_B.tst_tmp = proc_control_B.tst_tmp_tmp -
            proc_control_B.bb;
          proc_control_B.tst = (std::abs(proc_control_B.tst_tmp) + std::abs
                                (proc_control_B.aa)) + std::abs
            (proc_control_B.h12);
          proc_control_B.h12 /= proc_control_B.tst;
          proc_control_B.bb_tmp = (proc_control_B.m_i + 1) * 13 +
            proc_control_B.m_i;
          proc_control_B.v[0] = (proc_control_B.tst_tmp / proc_control_B.tst *
            (proc_control_B.tst_tmp_tmp - proc_control_B.ab) +
            b_h[proc_control_B.bb_tmp] * proc_control_B.h12) - proc_control_B.aa
            / proc_control_B.tst * proc_control_B.ba;
          proc_control_B.tst_tmp = b_h[proc_control_B.bb_tmp + 1];
          proc_control_B.v[1] = (((proc_control_B.tst_tmp +
            proc_control_B.tst_tmp_tmp) - proc_control_B.ab) - proc_control_B.bb)
            * proc_control_B.h12;
          proc_control_B.v[2] = b_h[proc_control_B.bb_tmp + 2] *
            proc_control_B.h12;
          proc_control_B.tst = (std::abs(proc_control_B.v[0]) + std::abs
                                (proc_control_B.v[1])) + std::abs
            (proc_control_B.v[2]);
          proc_control_B.v[0] /= proc_control_B.tst;
          proc_control_B.v[1] /= proc_control_B.tst;
          proc_control_B.v[2] /= proc_control_B.tst;
          if (proc_control_B.m_i + 1 == proc_control_B.k_k + 1) {
            exitg3 = true;
          } else {
            proc_control_B.bb_tmp = (proc_control_B.m_i - 1) * 13 +
              proc_control_B.m_i;
            if ((std::abs(proc_control_B.v[1]) + std::abs(proc_control_B.v[2])) *
                std::abs(b_h[proc_control_B.bb_tmp]) <= ((std::abs
                  (b_h[proc_control_B.bb_tmp - 1]) + std::abs
                  (proc_control_B.tst_tmp_tmp)) + std::abs
                 (proc_control_B.tst_tmp)) * (2.2204460492503131E-16 * std::abs
                 (proc_control_B.v[0]))) {
              exitg3 = true;
            } else {
              proc_control_B.m_i--;
            }
          }
        }

        for (proc_control_B.bb_tmp = proc_control_B.m_i + 1;
             proc_control_B.bb_tmp <= proc_control_B.i_kr; proc_control_B.bb_tmp
             ++) {
          proc_control_B.nr = (proc_control_B.i_kr - proc_control_B.bb_tmp) + 2;
          if (proc_control_B.nr >= 3) {
            proc_control_B.nr = 3;
          }

          if (proc_control_B.bb_tmp > proc_control_B.m_i + 1) {
            proc_control_B.hoffset = ((proc_control_B.bb_tmp - 2) * 13 +
              proc_control_B.bb_tmp) - 2;
            for (proc_control_B.ab_tmp = 0; proc_control_B.ab_tmp <
                 proc_control_B.nr; proc_control_B.ab_tmp++) {
              proc_control_B.v[proc_control_B.ab_tmp] = b_h
                [(proc_control_B.ab_tmp + proc_control_B.hoffset) + 1];
            }
          }

          proc_control_B.ba = proc_control_B.v[0];
          proc_control_B.tst = 0.0;
          if (proc_control_B.nr > 0) {
            proc_control_B.aa = proc_control_xnrm2_pr(proc_control_B.nr - 1,
              proc_control_B.v);
            if (proc_control_B.aa != 0.0) {
              proc_control_B.bb = proc_control_rt_hypotd_snf(proc_control_B.v[0],
                proc_control_B.aa);
              if (proc_control_B.v[0] >= 0.0) {
                proc_control_B.bb = -proc_control_B.bb;
              }

              if (std::abs(proc_control_B.bb) < 1.0020841800044864E-292) {
                proc_control_B.hoffset = -1;
                do {
                  proc_control_B.hoffset++;
                  for (proc_control_B.j_e = 2; proc_control_B.j_e <=
                       proc_control_B.nr; proc_control_B.j_e++) {
                    proc_control_B.v[proc_control_B.j_e - 1] *=
                      9.9792015476736E+291;
                  }

                  proc_control_B.bb *= 9.9792015476736E+291;
                  proc_control_B.ba *= 9.9792015476736E+291;
                } while ((std::abs(proc_control_B.bb) < 1.0020841800044864E-292)
                         && (proc_control_B.hoffset + 1 < 20));

                proc_control_B.bb = proc_control_rt_hypotd_snf(proc_control_B.ba,
                  proc_control_xnrm2_pr(proc_control_B.nr - 1, proc_control_B.v));
                if (proc_control_B.ba >= 0.0) {
                  proc_control_B.bb = -proc_control_B.bb;
                }

                proc_control_B.tst = (proc_control_B.bb - proc_control_B.ba) /
                  proc_control_B.bb;
                proc_control_B.ba = 1.0 / (proc_control_B.ba - proc_control_B.bb);
                for (proc_control_B.j_e = 2; proc_control_B.j_e <=
                     proc_control_B.nr; proc_control_B.j_e++) {
                  proc_control_B.v[proc_control_B.j_e - 1] *= proc_control_B.ba;
                }

                for (proc_control_B.j_e = 0; proc_control_B.j_e <=
                     proc_control_B.hoffset; proc_control_B.j_e++) {
                  proc_control_B.bb *= 1.0020841800044864E-292;
                }

                proc_control_B.ba = proc_control_B.bb;
              } else {
                proc_control_B.tst = (proc_control_B.bb - proc_control_B.v[0]) /
                  proc_control_B.bb;
                proc_control_B.ba = 1.0 / (proc_control_B.v[0] -
                  proc_control_B.bb);
                for (proc_control_B.j_e = 2; proc_control_B.j_e <=
                     proc_control_B.nr; proc_control_B.j_e++) {
                  proc_control_B.v[proc_control_B.j_e - 1] *= proc_control_B.ba;
                }

                proc_control_B.ba = proc_control_B.bb;
              }
            }
          }

          proc_control_B.v[0] = proc_control_B.ba;
          if (proc_control_B.bb_tmp > proc_control_B.m_i + 1) {
            proc_control_B.hoffset = (proc_control_B.bb_tmp - 2) * 13 +
              proc_control_B.bb_tmp;
            b_h[proc_control_B.hoffset - 1] = proc_control_B.ba;
            b_h[proc_control_B.hoffset] = 0.0;
            if (proc_control_B.bb_tmp < proc_control_B.i_kr) {
              b_h[proc_control_B.hoffset + 1] = 0.0;
            }
          } else if (proc_control_B.m_i + 1 > proc_control_B.k_k + 1) {
            proc_control_B.hoffset = ((proc_control_B.bb_tmp - 2) * 13 +
              proc_control_B.bb_tmp) - 1;
            b_h[proc_control_B.hoffset] *= 1.0 - proc_control_B.tst;
          }

          proc_control_B.ba = proc_control_B.v[1];
          proc_control_B.bb = proc_control_B.tst * proc_control_B.v[1];
          if (proc_control_B.nr == 3) {
            proc_control_B.aa = proc_control_B.v[2];
            proc_control_B.h12 = proc_control_B.tst * proc_control_B.v[2];
            for (proc_control_B.j_e = proc_control_B.bb_tmp; proc_control_B.j_e <
                 14; proc_control_B.j_e++) {
              proc_control_B.ab_tmp = (proc_control_B.j_e - 1) * 13 +
                proc_control_B.bb_tmp;
              proc_control_B.ab_tmp_e = ((proc_control_B.j_e - 1) * 13 +
                proc_control_B.bb_tmp) - 1;
              proc_control_B.ab = (b_h[proc_control_B.ab_tmp] *
                                   proc_control_B.ba +
                                   b_h[proc_control_B.ab_tmp_e]) +
                b_h[proc_control_B.ab_tmp + 1] * proc_control_B.aa;
              b_h[proc_control_B.ab_tmp_e] -= proc_control_B.ab *
                proc_control_B.tst;
              b_h[proc_control_B.ab_tmp] -= proc_control_B.ab *
                proc_control_B.bb;
              b_h[proc_control_B.ab_tmp + 1] -= proc_control_B.ab *
                proc_control_B.h12;
            }

            if (proc_control_B.bb_tmp + 3 <= proc_control_B.i_kr + 1) {
              proc_control_B.nr = proc_control_B.bb_tmp + 3;
            } else {
              proc_control_B.nr = proc_control_B.i_kr + 1;
            }

            proc_control_B.nr--;
            for (proc_control_B.hoffset = 0; proc_control_B.hoffset <=
                 proc_control_B.nr; proc_control_B.hoffset++) {
              proc_control_B.ab_tmp = (proc_control_B.bb_tmp - 1) * 13 +
                proc_control_B.hoffset;
              proc_control_B.tst_tmp_tmp = b_h[proc_control_B.ab_tmp];
              proc_control_B.ab_tmp_e = 13 * proc_control_B.bb_tmp +
                proc_control_B.hoffset;
              proc_control_B.j_e = (proc_control_B.bb_tmp + 1) * 13 +
                proc_control_B.hoffset;
              proc_control_B.ab = (b_h[proc_control_B.ab_tmp_e] *
                                   proc_control_B.ba +
                                   proc_control_B.tst_tmp_tmp) +
                b_h[proc_control_B.j_e] * proc_control_B.aa;
              b_h[proc_control_B.ab_tmp] = proc_control_B.tst_tmp_tmp -
                proc_control_B.ab * proc_control_B.tst;
              b_h[proc_control_B.ab_tmp_e] -= proc_control_B.ab *
                proc_control_B.bb;
              b_h[proc_control_B.j_e] -= proc_control_B.ab * proc_control_B.h12;
            }

            for (proc_control_B.nr = 0; proc_control_B.nr < 13;
                 proc_control_B.nr++) {
              proc_control_B.ab_tmp = (proc_control_B.bb_tmp - 1) * 13 +
                proc_control_B.nr;
              proc_control_B.tst_tmp_tmp = b_z[proc_control_B.ab_tmp];
              proc_control_B.ab_tmp_e = 13 * proc_control_B.bb_tmp +
                proc_control_B.nr;
              proc_control_B.j_e = (proc_control_B.bb_tmp + 1) * 13 +
                proc_control_B.nr;
              proc_control_B.ab = (b_z[proc_control_B.ab_tmp_e] *
                                   proc_control_B.ba +
                                   proc_control_B.tst_tmp_tmp) +
                b_z[proc_control_B.j_e] * proc_control_B.aa;
              b_z[proc_control_B.ab_tmp] = proc_control_B.tst_tmp_tmp -
                proc_control_B.ab * proc_control_B.tst;
              b_z[proc_control_B.ab_tmp_e] -= proc_control_B.ab *
                proc_control_B.bb;
              b_z[proc_control_B.j_e] -= proc_control_B.ab * proc_control_B.h12;
            }
          } else if (proc_control_B.nr == 2) {
            for (proc_control_B.j_e = proc_control_B.bb_tmp; proc_control_B.j_e <
                 14; proc_control_B.j_e++) {
              proc_control_B.ab_tmp = (proc_control_B.j_e - 1) * 13 +
                proc_control_B.bb_tmp;
              proc_control_B.tst_tmp_tmp = b_h[proc_control_B.ab_tmp - 1];
              proc_control_B.ab = b_h[proc_control_B.ab_tmp] * proc_control_B.ba
                + proc_control_B.tst_tmp_tmp;
              b_h[proc_control_B.ab_tmp - 1] = proc_control_B.tst_tmp_tmp -
                proc_control_B.ab * proc_control_B.tst;
              b_h[proc_control_B.ab_tmp] -= proc_control_B.ab *
                proc_control_B.bb;
            }

            for (proc_control_B.nr = 0; proc_control_B.nr <= proc_control_B.i_kr;
                 proc_control_B.nr++) {
              proc_control_B.ab_tmp = (proc_control_B.bb_tmp - 1) * 13 +
                proc_control_B.nr;
              proc_control_B.tst_tmp_tmp = b_h[proc_control_B.ab_tmp];
              proc_control_B.ab_tmp_e = 13 * proc_control_B.bb_tmp +
                proc_control_B.nr;
              proc_control_B.ab = b_h[proc_control_B.ab_tmp_e] *
                proc_control_B.ba + proc_control_B.tst_tmp_tmp;
              b_h[proc_control_B.ab_tmp] = proc_control_B.tst_tmp_tmp -
                proc_control_B.ab * proc_control_B.tst;
              b_h[proc_control_B.ab_tmp_e] -= proc_control_B.ab *
                proc_control_B.bb;
            }

            for (proc_control_B.nr = 0; proc_control_B.nr < 13;
                 proc_control_B.nr++) {
              proc_control_B.ab = b_z[(proc_control_B.bb_tmp - 1) * 13 +
                proc_control_B.nr] + b_z[13 * proc_control_B.bb_tmp +
                proc_control_B.nr] * proc_control_B.ba;
              proc_control_B.hoffset = (proc_control_B.bb_tmp - 1) * 13 +
                proc_control_B.nr;
              b_z[proc_control_B.hoffset] -= proc_control_B.ab *
                proc_control_B.tst;
              proc_control_B.hoffset = 13 * proc_control_B.bb_tmp +
                proc_control_B.nr;
              b_z[proc_control_B.hoffset] -= proc_control_B.ab *
                proc_control_B.bb;
            }
          }
        }

        proc_control_B.its++;
      }
    }

    if (!proc_control_B.goto150) {
      *info = proc_control_B.i_kr + 1;
      exitg1 = true;
    } else {
      if ((proc_control_B.i_kr + 1 != proc_control_B.L) && (proc_control_B.L ==
           proc_control_B.i_kr)) {
        proc_control_xdlanv2(b_h[(proc_control_B.i_kr + 13 *
          (proc_control_B.i_kr - 1)) - 1], b_h[(proc_control_B.i_kr + 13 *
          proc_control_B.i_kr) - 1], b_h[proc_control_B.i_kr + 13 *
                             (proc_control_B.i_kr - 1)], b_h[proc_control_B.i_kr
                             + 13 * proc_control_B.i_kr], &proc_control_B.tst,
                             &proc_control_B.ba, &proc_control_B.bb,
                             &proc_control_B.ab, &b_h[(proc_control_B.i_kr + 13 *
          (proc_control_B.i_kr - 1)) - 1], &proc_control_B.aa,
                             &proc_control_B.h12, &proc_control_B.tst_tmp_tmp,
                             &proc_control_B.tst_tmp, &proc_control_B.sn);
        proc_control_B.hoffset = 13 * proc_control_B.i_kr + proc_control_B.i_kr;
        b_h[proc_control_B.hoffset - 1] = proc_control_B.aa;
        proc_control_B.its = (proc_control_B.i_kr - 1) * 13;
        b_h[proc_control_B.i_kr + proc_control_B.its] = proc_control_B.h12;
        b_h[proc_control_B.hoffset] = proc_control_B.tst_tmp_tmp;
        if (proc_control_B.i_kr + 1 < 13) {
          proc_control_B.hoffset = (proc_control_B.i_kr + 1) * 13 +
            proc_control_B.i_kr;
          std::memcpy(&proc_control_B.b_h[0], &b_h[0], 169U * sizeof(real_T));
          proc_control_xrot(12 - proc_control_B.i_kr, proc_control_B.b_h,
                            proc_control_B.hoffset, proc_control_B.hoffset + 1,
                            proc_control_B.tst_tmp, proc_control_B.sn, b_h);
        }

        proc_control_B.hoffset = proc_control_B.i_kr * 13 + 1;
        std::memcpy(&proc_control_B.b_h[0], &b_h[0], 169U * sizeof(real_T));
        proc_control_xrot_p(proc_control_B.i_kr - 1, proc_control_B.b_h,
                            proc_control_B.its + 1, proc_control_B.hoffset,
                            proc_control_B.tst_tmp, proc_control_B.sn, b_h);
        std::memcpy(&proc_control_B.b_h[0], &b_z[0], 169U * sizeof(real_T));
        proc_control_xrot_pr(proc_control_B.b_h, proc_control_B.its + 1,
                             proc_control_B.hoffset, proc_control_B.tst_tmp,
                             proc_control_B.sn, b_z);
      }

      proc_control_B.i_kr = proc_control_B.L - 2;
    }
  }
}

void proc_control::proc_control_schur(const real_T A[169], real_T V[169], real_T
  T[169])
{
  proc_control_B.p_c = true;
  for (proc_control_B.lastv = 0; proc_control_B.lastv < 169;
       proc_control_B.lastv++) {
    if (proc_control_B.p_c) {
      proc_control_B.c_c = A[proc_control_B.lastv];
      if ((!std::isinf(proc_control_B.c_c)) && (!std::isnan(proc_control_B.c_c)))
      {
      } else {
        proc_control_B.p_c = false;
      }
    } else {
      proc_control_B.p_c = false;
    }
  }

  if (!proc_control_B.p_c) {
    for (proc_control_B.i_n = 0; proc_control_B.i_n < 169; proc_control_B.i_n++)
    {
      V[proc_control_B.i_n] = (rtNaN);
    }

    proc_control_B.ia_m = 2;
    proc_control_B.itau_c = 0;
    for (proc_control_B.lastv = 0; proc_control_B.lastv < 12;
         proc_control_B.lastv++) {
      if (proc_control_B.ia_m <= 13) {
        std::memset(&V[(proc_control_B.ia_m + proc_control_B.itau_c) + -1], 0,
                    (((proc_control_B.itau_c - proc_control_B.ia_m) -
                      proc_control_B.itau_c) + 14) * sizeof(real_T));
      }

      proc_control_B.ia_m++;
      proc_control_B.itau_c += 13;
    }

    for (proc_control_B.i_n = 0; proc_control_B.i_n < 169; proc_control_B.i_n++)
    {
      T[proc_control_B.i_n] = (rtNaN);
    }
  } else {
    proc_control_xgehrd(A, proc_control_B.b_A_h3, proc_control_B.tau_ik);
    std::memcpy(&V[0], &proc_control_B.b_A_h3[0], 169U * sizeof(real_T));
    for (proc_control_B.itau_c = 11; proc_control_B.itau_c >= 0;
         proc_control_B.itau_c--) {
      proc_control_B.ia_m = (proc_control_B.itau_c + 1) * 13;
      for (proc_control_B.i_n = 0; proc_control_B.i_n <= proc_control_B.itau_c;
           proc_control_B.i_n++) {
        V[proc_control_B.ia_m + proc_control_B.i_n] = 0.0;
      }

      for (proc_control_B.iaii = proc_control_B.itau_c + 3; proc_control_B.iaii <
           14; proc_control_B.iaii++) {
        proc_control_B.lastv = proc_control_B.ia_m + proc_control_B.iaii;
        V[proc_control_B.lastv - 1] = V[proc_control_B.lastv - 14];
      }
    }

    proc_control_B.itau_c = 11;
    std::memset(&V[0], 0, 13U * sizeof(real_T));
    std::memset(&proc_control_B.work[0], 0, 13U * sizeof(real_T));
    V[0] = 1.0;
    for (proc_control_B.i_n = 11; proc_control_B.i_n >= 0; proc_control_B.i_n--)
    {
      proc_control_B.iaii = (proc_control_B.i_n * 13 + proc_control_B.i_n) + 28;
      if (proc_control_B.i_n + 1 < 12) {
        V[proc_control_B.iaii - 14] = 1.0;
        if (proc_control_B.tau_ik[proc_control_B.itau_c] != 0.0) {
          boolean_T exitg2;
          proc_control_B.lastv = 12 - proc_control_B.i_n;
          proc_control_B.ia_m = (proc_control_B.iaii - proc_control_B.i_n) - 3;
          while ((proc_control_B.lastv > 0) && (V[proc_control_B.ia_m] == 0.0))
          {
            proc_control_B.lastv--;
            proc_control_B.ia_m--;
          }

          proc_control_B.lastc = 11 - proc_control_B.i_n;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.lastc > 0)) {
            int32_T exitg1;
            proc_control_B.coltop_e = (proc_control_B.lastc - 1) * 13 +
              proc_control_B.iaii;
            proc_control_B.ia_m = proc_control_B.coltop_e;
            do {
              exitg1 = 0;
              if (proc_control_B.ia_m <= (proc_control_B.coltop_e +
                   proc_control_B.lastv) - 1) {
                if (V[proc_control_B.ia_m - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  proc_control_B.ia_m++;
                }
              } else {
                proc_control_B.lastc--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          proc_control_B.lastv = 0;
          proc_control_B.lastc = 0;
        }

        if (proc_control_B.lastv > 0) {
          if (proc_control_B.lastc != 0) {
            std::memset(&proc_control_B.work[0], 0, proc_control_B.lastc *
                        sizeof(real_T));
            proc_control_B.coltop_e = (proc_control_B.lastc - 1) * 13 +
              proc_control_B.iaii;
            for (proc_control_B.iac = proc_control_B.iaii; proc_control_B.iac <=
                 proc_control_B.coltop_e; proc_control_B.iac += 13) {
              proc_control_B.c_c = 0.0;
              proc_control_B.d_j = proc_control_B.iac + proc_control_B.lastv;
              for (proc_control_B.ia_m = proc_control_B.iac; proc_control_B.ia_m
                   < proc_control_B.d_j; proc_control_B.ia_m++) {
                proc_control_B.c_c += V[((proc_control_B.iaii +
                  proc_control_B.ia_m) - proc_control_B.iac) - 14] *
                  V[proc_control_B.ia_m - 1];
              }

              proc_control_B.ia_m = div_nde_s32_floor(proc_control_B.iac -
                proc_control_B.iaii, 13);
              proc_control_B.work[proc_control_B.ia_m] += proc_control_B.c_c;
            }
          }

          std::memcpy(&proc_control_B.V[0], &V[0], 169U * sizeof(real_T));
          proc_control_xgerc_p(proc_control_B.lastv, proc_control_B.lastc,
                               -proc_control_B.tau_ik[proc_control_B.itau_c],
                               proc_control_B.iaii - 13, proc_control_B.work,
                               proc_control_B.V, proc_control_B.iaii, V);
        }

        proc_control_B.coltop_e = proc_control_B.iaii - proc_control_B.i_n;
        for (proc_control_B.ia_m = proc_control_B.iaii - 12; proc_control_B.ia_m
             <= proc_control_B.coltop_e - 2; proc_control_B.ia_m++) {
          V[proc_control_B.ia_m - 1] *=
            -proc_control_B.tau_ik[proc_control_B.itau_c];
        }
      }

      V[proc_control_B.iaii - 14] = 1.0 -
        proc_control_B.tau_ik[proc_control_B.itau_c];
      proc_control_B.coltop_e = proc_control_B.i_n - 1;
      for (proc_control_B.lastv = 0; proc_control_B.lastv <=
           proc_control_B.coltop_e; proc_control_B.lastv++) {
        V[(proc_control_B.iaii - proc_control_B.lastv) - 15] = 0.0;
      }

      proc_control_B.itau_c--;
    }

    std::memcpy(&proc_control_B.V[0], &V[0], 169U * sizeof(real_T));
    proc_control_eml_dlahqr(proc_control_B.b_A_h3, proc_control_B.V, T,
      &proc_control_B.lastv, V);
    proc_control_B.ia_m = 4;
    proc_control_B.itau_c = 0;
    for (proc_control_B.lastv = 0; proc_control_B.lastv < 10;
         proc_control_B.lastv++) {
      if (proc_control_B.ia_m <= 13) {
        std::memset(&T[(proc_control_B.ia_m + proc_control_B.itau_c) + -1], 0,
                    (((proc_control_B.itau_c - proc_control_B.ia_m) -
                      proc_control_B.itau_c) + 14) * sizeof(real_T));
      }

      proc_control_B.ia_m++;
      proc_control_B.itau_c += 13;
    }
  }
}

void proc_control::proc_control_expm(real_T A[169], real_T F[169])
{
  proc_control_B.recomputeDiags = true;
  for (proc_control_B.b_k_p = 0; proc_control_B.b_k_p < 169;
       proc_control_B.b_k_p++) {
    if (proc_control_B.recomputeDiags) {
      proc_control_B.x_nt = A[proc_control_B.b_k_p];
      if ((!std::isinf(proc_control_B.x_nt)) && (!std::isnan(proc_control_B.x_nt)))
      {
      } else {
        proc_control_B.recomputeDiags = false;
      }
    } else {
      proc_control_B.recomputeDiags = false;
    }
  }

  if (!proc_control_B.recomputeDiags) {
    for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 169; proc_control_B.i_f0
         ++) {
      F[proc_control_B.i_f0] = (rtNaN);
    }
  } else {
    int32_T exitg1;
    boolean_T exitg2;
    proc_control_B.b_k_p = 1;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.b_k_p - 1 < 13)) {
      proc_control_B.i_f0 = 1;
      do {
        exitg1 = 0;
        if (proc_control_B.i_f0 - 1 < 13) {
          if ((proc_control_B.i_f0 != proc_control_B.b_k_p) && (!(A
                [((proc_control_B.b_k_p - 1) * 13 + proc_control_B.i_f0) - 1] ==
                0.0))) {
            proc_control_B.recomputeDiags = false;
            exitg1 = 1;
          } else {
            proc_control_B.i_f0++;
          }
        } else {
          proc_control_B.b_k_p++;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    if (proc_control_B.recomputeDiags) {
      std::memset(&F[0], 0, 169U * sizeof(real_T));
      proc_control_B.eint = 0;
      for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 13;
           proc_control_B.i_f0++) {
        F[proc_control_B.eint] = std::exp(A[proc_control_B.eint]);
        proc_control_B.eint += 14;
      }
    } else {
      proc_control_B.recomputeDiags = true;
      proc_control_B.b_k_p = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.b_k_p < 13)) {
        proc_control_B.i_f0 = 0;
        do {
          exitg1 = 0;
          if (proc_control_B.i_f0 <= proc_control_B.b_k_p) {
            if (!(A[13 * proc_control_B.b_k_p + proc_control_B.i_f0] == A[13 *
                  proc_control_B.i_f0 + proc_control_B.b_k_p])) {
              proc_control_B.recomputeDiags = false;
              exitg1 = 1;
            } else {
              proc_control_B.i_f0++;
            }
          } else {
            proc_control_B.b_k_p++;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }

      if (proc_control_B.recomputeDiags) {
        proc_control_schur(A, proc_control_B.b_A2, proc_control_B.b_A4_f);
        proc_control_B.i_f0 = 0;
        proc_control_B.b_k_k = 0;
        for (proc_control_B.b_k_p = 0; proc_control_B.b_k_p < 13;
             proc_control_B.b_k_p++) {
          proc_control_B.exptj = std::exp
            (proc_control_B.b_A4_f[proc_control_B.i_f0]);
          for (proc_control_B.eint = 0; proc_control_B.eint < 13;
               proc_control_B.eint++) {
            proc_control_B.b_A2_tmp = proc_control_B.eint + proc_control_B.b_k_k;
            F[proc_control_B.b_A2_tmp] =
              proc_control_B.b_A2[proc_control_B.b_A2_tmp] *
              proc_control_B.exptj;
          }

          proc_control_B.i_f0 += 14;
          proc_control_B.b_k_k += 13;
        }

        proc_control_B.i_f0 = 0;
        for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 13;
             proc_control_B.b_k_k++) {
          std::memset(&proc_control_B.b_A4[proc_control_B.i_f0], 0, 13U * sizeof
                      (real_T));
          proc_control_B.i_f0 += 13;
        }

        proc_control_B.i_f0 = 0;
        for (proc_control_B.i10 = 0; proc_control_B.i10 < 13; proc_control_B.i10
             ++) {
          proc_control_B.i9 = 0;
          for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 13;
               proc_control_B.b_k_k++) {
            for (proc_control_B.b_k_p = 0; proc_control_B.b_k_p < 13;
                 proc_control_B.b_k_p++) {
              proc_control_B.b_A2_tmp = proc_control_B.b_k_p + proc_control_B.i9;
              proc_control_B.b_A4[proc_control_B.b_A2_tmp] +=
                F[proc_control_B.b_k_p + proc_control_B.i_f0] *
                proc_control_B.b_A2[proc_control_B.b_k_k + proc_control_B.i_f0];
            }

            proc_control_B.i9 += 13;
          }

          proc_control_B.i_f0 += 13;
        }

        std::memcpy(&F[0], &proc_control_B.b_A4[0], 169U * sizeof(real_T));
        proc_control_B.i_f0 = 0;
        for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 13;
             proc_control_B.b_k_k++) {
          proc_control_B.b_k_p = 0;
          for (proc_control_B.i10 = 0; proc_control_B.i10 < 13;
               proc_control_B.i10++) {
            proc_control_B.b_A2_tmp = proc_control_B.i10 + proc_control_B.i_f0;
            proc_control_B.b_A4[proc_control_B.b_A2_tmp] =
              (F[proc_control_B.b_k_p + proc_control_B.b_k_k] +
               F[proc_control_B.b_A2_tmp]) / 2.0;
            proc_control_B.b_k_p += 13;
          }

          proc_control_B.i_f0 += 13;
        }

        std::memcpy(&F[0], &proc_control_B.b_A4[0], 169U * sizeof(real_T));
      } else {
        boolean_T guard1{ false };

        boolean_T guard2{ false };

        boolean_T guard3{ false };

        boolean_T guard4{ false };

        proc_control_B.recomputeDiags = true;
        proc_control_B.j_n = 3;
        while (proc_control_B.recomputeDiags && (proc_control_B.j_n <= 13)) {
          proc_control_B.i_f0 = proc_control_B.j_n;
          while (proc_control_B.recomputeDiags && (proc_control_B.i_f0 <= 13)) {
            proc_control_B.recomputeDiags = (A[((proc_control_B.j_n - 3) * 13 +
              proc_control_B.i_f0) - 1] == 0.0);
            proc_control_B.i_f0++;
          }

          proc_control_B.j_n++;
        }

        if (proc_control_B.recomputeDiags) {
          proc_control_B.b_k_p = 1;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.b_k_p - 1 < 12)) {
            proc_control_B.i_f0 = (proc_control_B.b_k_p - 1) * 13 +
              proc_control_B.b_k_p;
            proc_control_B.exptj = A[proc_control_B.i_f0];
            if (proc_control_B.exptj != 0.0) {
              if ((proc_control_B.b_k_p != 12) && (A[(13 * proc_control_B.b_k_p
                    + proc_control_B.b_k_p) + 1] != 0.0)) {
                proc_control_B.recomputeDiags = false;
                exitg2 = true;
              } else {
                proc_control_B.b_k_k = 13 * proc_control_B.b_k_p +
                  proc_control_B.b_k_p;
                if (A[proc_control_B.i_f0 - 1] != A[proc_control_B.b_k_k]) {
                  proc_control_B.recomputeDiags = false;
                  exitg2 = true;
                } else {
                  proc_control_B.x_nt = A[proc_control_B.b_k_k - 1];
                  if (!std::isnan(proc_control_B.exptj)) {
                    if (proc_control_B.exptj < 0.0) {
                      proc_control_B.exptj = -1.0;
                    } else {
                      proc_control_B.exptj = (proc_control_B.exptj > 0.0);
                    }
                  }

                  if (!std::isnan(proc_control_B.x_nt)) {
                    if (proc_control_B.x_nt < 0.0) {
                      proc_control_B.x_nt = -1.0;
                    } else {
                      proc_control_B.x_nt = (proc_control_B.x_nt > 0.0);
                    }
                  }

                  if (proc_control_B.exptj * proc_control_B.x_nt != -1.0) {
                    proc_control_B.recomputeDiags = false;
                    exitg2 = true;
                  } else {
                    proc_control_B.b_k_p++;
                  }
                }
              }
            } else {
              proc_control_B.b_k_p++;
            }
          }
        }

        proc_control_B.exptj = 0.0;
        for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 13;
             proc_control_B.i_f0++) {
          std::memset(&proc_control_B.b_A2[proc_control_B.i_f0 * 13], 0, 13U *
                      sizeof(real_T));
          for (proc_control_B.b_k_p = 0; proc_control_B.b_k_p < 13;
               proc_control_B.b_k_p++) {
            for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 13;
                 proc_control_B.b_k_k++) {
              proc_control_B.b_A2_tmp = 13 * proc_control_B.i_f0 +
                proc_control_B.b_k_k;
              proc_control_B.b_A2[proc_control_B.b_A2_tmp] += A[13 *
                proc_control_B.b_k_p + proc_control_B.b_k_k] * A[13 *
                proc_control_B.i_f0 + proc_control_B.b_k_p];
            }
          }

          std::memset(&proc_control_B.b_A4[proc_control_B.i_f0 * 13], 0, 13U *
                      sizeof(real_T));
        }

        proc_control_B.i_f0 = 0;
        for (proc_control_B.b_k_p = 0; proc_control_B.b_k_p < 13;
             proc_control_B.b_k_p++) {
          proc_control_B.i10 = 0;
          for (proc_control_B.i9 = 0; proc_control_B.i9 < 13; proc_control_B.i9
               ++) {
            for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 13;
                 proc_control_B.b_k_k++) {
              proc_control_B.b_A2_tmp = proc_control_B.b_k_k +
                proc_control_B.i_f0;
              proc_control_B.b_A4[proc_control_B.b_A2_tmp] +=
                proc_control_B.b_A2[proc_control_B.b_k_k + proc_control_B.i10] *
                proc_control_B.b_A2[proc_control_B.i9 + proc_control_B.i_f0];
            }

            proc_control_B.b_A6[proc_control_B.i9 + proc_control_B.i_f0] = 0.0;
            proc_control_B.i10 += 13;
          }

          proc_control_B.i_f0 += 13;
        }

        proc_control_B.i_f0 = 0;
        for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 13;
             proc_control_B.b_k_k++) {
          proc_control_B.b_k_p = 0;
          for (proc_control_B.i10 = 0; proc_control_B.i10 < 13;
               proc_control_B.i10++) {
            for (proc_control_B.i9 = 0; proc_control_B.i9 < 13;
                 proc_control_B.i9++) {
              proc_control_B.b_A2_tmp = proc_control_B.i9 + proc_control_B.i_f0;
              proc_control_B.b_A6[proc_control_B.b_A2_tmp] +=
                proc_control_B.b_A4[proc_control_B.i9 + proc_control_B.b_k_p] *
                proc_control_B.b_A2[proc_control_B.i10 + proc_control_B.i_f0];
            }

            proc_control_B.b_k_p += 13;
          }

          proc_control_B.i_f0 += 13;
        }

        proc_control_B.d6_m = rt_powd_snf(proc_control_norm_p
          (proc_control_B.b_A6), 0.16666666666666666);
        proc_control_B.eta1 = std::fmax(rt_powd_snf(proc_control_norm_p
          (proc_control_B.b_A4), 0.25), proc_control_B.d6_m);
        guard1 = false;
        guard2 = false;
        guard3 = false;
        guard4 = false;
        if (proc_control_B.eta1 <= 0.01495585217958292) {
          for (proc_control_B.b_k_p = 0; proc_control_B.b_k_p < 169;
               proc_control_B.b_k_p++) {
            proc_control_B.y_c[proc_control_B.b_k_p] = std::abs
              (A[proc_control_B.b_k_p]);
            proc_control_B.dv4[proc_control_B.b_k_p] = 0.19285012468241128 *
              proc_control_B.y_c[proc_control_B.b_k_p];
          }

          proc_control_mpower(proc_control_B.dv4, 7.0, proc_control_B.y_c);
          proc_control_B.x_nt = proc_control_log2(proc_control_norm_p
            (proc_control_B.y_c) / proc_control_norm_p(A) * 2.0 /
            2.2204460492503131E-16) / 6.0;
          if (std::fmax(std::ceil(proc_control_B.x_nt), 0.0) == 0.0) {
            proc_control_B.eint = 3;
          } else {
            guard4 = true;
          }
        } else {
          guard4 = true;
        }

        if (guard4) {
          if (proc_control_B.eta1 <= 0.253939833006323) {
            for (proc_control_B.b_k_p = 0; proc_control_B.b_k_p < 169;
                 proc_control_B.b_k_p++) {
              proc_control_B.y_c[proc_control_B.b_k_p] = std::abs
                (A[proc_control_B.b_k_p]);
              proc_control_B.dv4[proc_control_B.b_k_p] = 0.12321872304378752 *
                proc_control_B.y_c[proc_control_B.b_k_p];
            }

            proc_control_mpower(proc_control_B.dv4, 11.0, proc_control_B.y_c);
            proc_control_B.x_nt = proc_control_log2(proc_control_norm_p
              (proc_control_B.y_c) / proc_control_norm_p(A) * 2.0 /
              2.2204460492503131E-16) / 10.0;
            if (std::fmax(std::ceil(proc_control_B.x_nt), 0.0) == 0.0) {
              proc_control_B.eint = 5;
            } else {
              guard3 = true;
            }
          } else {
            guard3 = true;
          }
        }

        if (guard3) {
          proc_control_mpower(proc_control_B.b_A4, 2.0, proc_control_B.dv4);
          proc_control_B.eta1 = rt_powd_snf(proc_control_norm_p
            (proc_control_B.dv4), 0.125);
          proc_control_B.d6_m = std::fmax(proc_control_B.d6_m,
            proc_control_B.eta1);
          if (proc_control_B.d6_m <= 0.95041789961629319) {
            for (proc_control_B.b_k_p = 0; proc_control_B.b_k_p < 169;
                 proc_control_B.b_k_p++) {
              proc_control_B.y_c[proc_control_B.b_k_p] = std::abs
                (A[proc_control_B.b_k_p]);
              proc_control_B.dv4[proc_control_B.b_k_p] = 0.090475336558796943 *
                proc_control_B.y_c[proc_control_B.b_k_p];
            }

            proc_control_mpower(proc_control_B.dv4, 15.0, proc_control_B.y_c);
            proc_control_B.x_nt = proc_control_log2(proc_control_norm_p
              (proc_control_B.y_c) / proc_control_norm_p(A) * 2.0 /
              2.2204460492503131E-16) / 14.0;
            if (std::fmax(std::ceil(proc_control_B.x_nt), 0.0) == 0.0) {
              proc_control_B.eint = 7;
            } else {
              guard2 = true;
            }
          } else {
            guard2 = true;
          }
        }

        if (guard2) {
          if (proc_control_B.d6_m <= 2.097847961257068) {
            for (proc_control_B.b_k_p = 0; proc_control_B.b_k_p < 169;
                 proc_control_B.b_k_p++) {
              proc_control_B.y_c[proc_control_B.b_k_p] = std::abs
                (A[proc_control_B.b_k_p]);
              proc_control_B.dv4[proc_control_B.b_k_p] = 0.071467735648795785 *
                proc_control_B.y_c[proc_control_B.b_k_p];
            }

            proc_control_mpower(proc_control_B.dv4, 19.0, proc_control_B.y_c);
            proc_control_B.x_nt = proc_control_log2(proc_control_norm_p
              (proc_control_B.y_c) / proc_control_norm_p(A) * 2.0 /
              2.2204460492503131E-16) / 18.0;
            if (std::fmax(std::ceil(proc_control_B.x_nt), 0.0) == 0.0) {
              proc_control_B.eint = 9;
            } else {
              guard1 = true;
            }
          } else {
            guard1 = true;
          }
        }

        if (guard1) {
          for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 13;
               proc_control_B.i_f0++) {
            std::memset(&proc_control_B.b_A4_f[proc_control_B.i_f0 * 13], 0, 13U
                        * sizeof(real_T));
            for (proc_control_B.b_k_p = 0; proc_control_B.b_k_p < 13;
                 proc_control_B.b_k_p++) {
              for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 13;
                   proc_control_B.b_k_k++) {
                proc_control_B.b_A2_tmp = 13 * proc_control_B.i_f0 +
                  proc_control_B.b_k_k;
                proc_control_B.b_A4_f[proc_control_B.b_A2_tmp] +=
                  proc_control_B.b_A4[13 * proc_control_B.b_k_p +
                  proc_control_B.b_k_k] * proc_control_B.b_A6[13 *
                  proc_control_B.i_f0 + proc_control_B.b_k_p];
              }
            }
          }

          proc_control_B.x_nt = proc_control_log2(std::fmin(proc_control_B.d6_m,
            std::fmax(proc_control_B.eta1, rt_powd_snf(proc_control_norm_p
            (proc_control_B.b_A4_f), 0.1))) / 5.3719203511481517);
          proc_control_B.exptj = std::fmax(std::ceil(proc_control_B.x_nt), 0.0);
          proc_control_B.x_nt = rt_powd_snf(2.0, proc_control_B.exptj);
          for (proc_control_B.b_k_p = 0; proc_control_B.b_k_p < 169;
               proc_control_B.b_k_p++) {
            proc_control_B.b_A4_f[proc_control_B.b_k_p] = A[proc_control_B.b_k_p]
              / proc_control_B.x_nt;
            proc_control_B.y_c[proc_control_B.b_k_p] = std::abs
              (proc_control_B.b_A4_f[proc_control_B.b_k_p]);
            proc_control_B.dv4[proc_control_B.b_k_p] = 0.05031554467093536 *
              proc_control_B.y_c[proc_control_B.b_k_p];
          }

          proc_control_mpower(proc_control_B.dv4, 27.0, proc_control_B.y_c);
          proc_control_B.x_nt = proc_control_log2(proc_control_norm_p
            (proc_control_B.y_c) / proc_control_norm_p(proc_control_B.b_A4_f) *
            2.0 / 2.2204460492503131E-16) / 26.0;
          proc_control_B.exptj += std::fmax(std::ceil(proc_control_B.x_nt), 0.0);
          if (std::isinf(proc_control_B.exptj)) {
            proc_control_B.x_nt = proc_control_norm_p(A) / 5.3719203511481517;
            if ((!std::isinf(proc_control_B.x_nt)) && (!std::isnan
                 (proc_control_B.x_nt))) {
              proc_control_B.x_nt = frexp(proc_control_B.x_nt,
                &proc_control_B.eint);
              proc_control_B.exptj = proc_control_B.eint;
            } else {
              proc_control_B.exptj = 0.0;
            }

            if (proc_control_B.x_nt == 0.5) {
              proc_control_B.exptj--;
            }
          }

          proc_control_B.eint = 13;
        }

        if (proc_control_B.exptj != 0.0) {
          proc_control_B.x_nt = rt_powd_snf(2.0, proc_control_B.exptj);
          for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 169;
               proc_control_B.i_f0++) {
            A[proc_control_B.i_f0] /= proc_control_B.x_nt;
          }

          proc_control_B.x_nt = rt_powd_snf(2.0, 2.0 * proc_control_B.exptj);
          for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 169;
               proc_control_B.i_f0++) {
            proc_control_B.b_A2[proc_control_B.i_f0] /= proc_control_B.x_nt;
          }

          proc_control_B.x_nt = rt_powd_snf(2.0, 4.0 * proc_control_B.exptj);
          for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 169;
               proc_control_B.i_f0++) {
            proc_control_B.b_A4[proc_control_B.i_f0] /= proc_control_B.x_nt;
          }

          proc_control_B.x_nt = rt_powd_snf(2.0, 6.0 * proc_control_B.exptj);
          for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 169;
               proc_control_B.i_f0++) {
            proc_control_B.b_A6[proc_control_B.i_f0] /= proc_control_B.x_nt;
          }
        }

        if (proc_control_B.recomputeDiags) {
          for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 12;
               proc_control_B.i_f0++) {
            proc_control_B.blockFormat[proc_control_B.i_f0] = 0;
          }

          proc_control_B.j_n = 0;
          while (proc_control_B.j_n + 1 < 12) {
            proc_control_B.x_nt = A[(13 * proc_control_B.j_n +
              proc_control_B.j_n) + 1];
            if (proc_control_B.x_nt != 0.0) {
              proc_control_B.blockFormat[proc_control_B.j_n] = 2;
              proc_control_B.blockFormat[proc_control_B.j_n + 1] = 0;
              proc_control_B.j_n += 2;
            } else if ((proc_control_B.x_nt == 0.0) && (A[((proc_control_B.j_n +
              1) * 13 + proc_control_B.j_n) + 2] == 0.0)) {
              proc_control_B.blockFormat[proc_control_B.j_n] = 1;
              proc_control_B.j_n++;
            } else {
              proc_control_B.blockFormat[proc_control_B.j_n] = 0;
              proc_control_B.j_n++;
            }
          }

          if (A[155] != 0.0) {
            proc_control_B.blockFormat[11] = 2;
          } else if ((proc_control_B.blockFormat[10] == 0) ||
                     (proc_control_B.blockFormat[10] == 1)) {
            proc_control_B.blockFormat[11] = 1;
          }
        }

        proc_control_padeApproximation(A, proc_control_B.b_A2,
          proc_control_B.b_A4, proc_control_B.b_A6, proc_control_B.eint, F);
        if (proc_control_B.recomputeDiags) {
          std::memcpy(&proc_control_B.b_A2[0], &F[0], 169U * sizeof(real_T));
          proc_control_recomputeBlockDiag(A, proc_control_B.b_A2,
            proc_control_B.blockFormat, F);
        }

        proc_control_B.eint = static_cast<int32_T>(proc_control_B.exptj) - 1;
        for (proc_control_B.j_n = 0; proc_control_B.j_n <= proc_control_B.eint;
             proc_control_B.j_n++) {
          for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 13;
               proc_control_B.i_f0++) {
            proc_control_B.b_k_k = 0;
            for (proc_control_B.b_k_p = 0; proc_control_B.b_k_p < 13;
                 proc_control_B.b_k_p++) {
              proc_control_B.b_A2_tmp = proc_control_B.b_k_k +
                proc_control_B.i_f0;
              proc_control_B.b_A4[proc_control_B.b_A2_tmp] = 0.0;
              proc_control_B.i10 = 0;
              for (proc_control_B.i9 = 0; proc_control_B.i9 < 13;
                   proc_control_B.i9++) {
                proc_control_B.b_A4[proc_control_B.b_A2_tmp] +=
                  F[proc_control_B.i10 + proc_control_B.i_f0] *
                  F[proc_control_B.i9 + proc_control_B.b_k_k];
                proc_control_B.i10 += 13;
              }

              proc_control_B.b_k_k += 13;
            }
          }

          std::memcpy(&F[0], &proc_control_B.b_A4[0], 169U * sizeof(real_T));
          if (proc_control_B.recomputeDiags) {
            for (proc_control_B.i_f0 = 0; proc_control_B.i_f0 < 169;
                 proc_control_B.i_f0++) {
              A[proc_control_B.i_f0] *= 2.0;
            }

            std::memcpy(&proc_control_B.b_A2[0], &F[0], 169U * sizeof(real_T));
            proc_control_recomputeBlockDiag(A, proc_control_B.b_A2,
              proc_control_B.blockFormat, F);
          }
        }
      }
    }
  }
}

void proc_control::proc_control_ft_6(const real_T ct[2166], real_T Anq[169])
{
  real_T tmp;
  real_T tmp_0;
  real_T tmp_1;
  real_T tmp_2;
  real_T tmp_3;
  proc_control_B.t3179 = ct[144] + ct[1693];
  proc_control_B.t3180 = ct[148] + ct[1697];
  proc_control_B.t3181 = (ct[202] + ct[2041]) + ct[40];
  proc_control_B.t3182 = (ct[208] + ct[2043]) + ct[37];
  proc_control_B.t3183 = (ct[214] + ct[2042]) + ct[41];
  proc_control_B.t3190 = (ct[1729] + ct[2129]) + ct[1565];
  proc_control_B.t3184 = proc_control_B.t3190 + ct[820];
  proc_control_B.t3191 = (ct[1736] + ct[2093]) + ct[1576];
  proc_control_B.t3185 = proc_control_B.t3191 + ct[828];
  proc_control_B.t3192 = (ct[1744] + ct[2104]) + ct[1554];
  proc_control_B.t3186 = proc_control_B.t3192 + ct[825];
  proc_control_B.t3190 += ct[1445];
  proc_control_B.t3191 += ct[1442];
  proc_control_B.t3192 += ct[1451];
  proc_control_B.t3196 = ((ct[1688] + ct[1692]) + ct[139]) + ct[143];
  proc_control_B.t3197 = ((ct[1689] + ct[2014]) + ct[2047]) + ct[140];
  proc_control_B.t3198 = ((ct[1690] + ct[1699]) + ct[141]) + ct[150];
  proc_control_B.t3199 = ((ct[1698] + ct[1699]) + ct[149]) + ct[150];
  proc_control_B.t3200 = ((ct[1691] + ct[1700]) + ct[142]) + ct[151];
  proc_control_B.t3201 = ((ct[1696] + ct[2016]) + ct[2048]) + ct[147];
  proc_control_B.t3202 = ((ct[1694] + ct[2017]) + ct[2049]) + ct[145];
  proc_control_B.t3203 = ((ct[1695] + ct[1701]) + ct[146]) + ct[152];
  proc_control_B.t3204 = ((((ct[283] + ct[1150]) + ct[1887]) + ct[46]) + ct[153])
    + ct[856];
  proc_control_B.t3205 = ((((ct[382] + ct[845]) + ct[1913]) + ct[2155]) + ct[163])
    + ct[869];
  proc_control_B.t3206 = ((((ct[1012] + ct[1369]) + ct[1880]) + ct[21]) + ct[168])
    + ct[855];
  proc_control_B.t3207 = ((((ct[283] + ct[730]) + ct[1904]) + ct[153]) + ct[1595])
    + ct[857];
  proc_control_B.t3208 = ((((ct[845] + ct[1277]) + ct[1871]) + ct[163]) + ct
    [1605]) + ct[854];
  proc_control_B.t3209 = ((((ct[583] + ct[1369]) + ct[1895]) + ct[168]) + ct
    [1587]) + ct[868];
  proc_control_B.t3224 = ((((((((((((((((((((((((((((((((((((((((((((((((((((ct
    [788] + ct[894]) + ct[1066]) + ct[1189]) + ct[1264]) + ct[1328]) + ct[1638])
    + ct[1675]) + ct[1733]) + ct[1831]) + ct[1845]) + ct[1860]) + ct[1878]) +
    ct[1883]) + ct[1922]) + ct[2056]) + ct[2083]) + ct[2092]) + ct[2102]) + ct
    [2134]) + ct[2138]) + ct[33]) + ct[34]) + ct[269]) + ct[295]) + ct[310]) +
    ct[347]) + ct[409]) + ct[421]) + ct[433]) + ct[446]) + ct[455]) + ct[461]) +
    ct[465]) + ct[735]) + ct[834]) + ct[844]) + ct[852]) + ct[1046]) + ct[1052])
    + ct[1056]) + ct[1061]) + ct[1070]) + ct[1074]) + ct[1218]) + ct[1229]) +
    ct[1325]) + ct[1337]) + ct[1340]) + ct[1352]) + ct[1388]) + ct[1391]) + ct
    [1463]) + -ct[1234];
  proc_control_B.t3225 = ((((((((((((((((((((((((((((((((((((((((((((((((((((ct
    [826] + ct[960]) + ct[1118]) + ct[1197]) + ct[1285]) + ct[1359]) + ct[1669])
    + ct[1676]) + ct[1740]) + ct[1837]) + ct[1852]) + ct[1866]) + ct[1882]) +
    ct[1886]) + ct[1922]) + ct[2057]) + ct[2087]) + ct[2097]) + ct[2107]) + ct
    [2151]) + ct[2153]) + ct[33]) + ct[34]) + ct[269]) + ct[295]) + ct[314]) +
    ct[352]) + ct[413]) + ct[426]) + ct[437]) + ct[446]) + ct[457]) + ct[463]) +
    ct[468]) + ct[735]) + ct[836]) + ct[848]) + ct[852]) + ct[1049]) + ct[1054])
    + ct[1058]) + ct[1064]) + ct[1070]) + ct[1074]) + ct[1220]) + ct[1231]) +
    ct[1332]) + ct[1346]) + ct[1347]) + ct[1358]) + ct[1388]) + ct[1391]) + ct
    [1463]) + -ct[1234];
  proc_control_B.t3228 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1780] + ct[1784]) +
    ct[1804]) + ct[1818]) + ct[1821]) + ct[1964]) + ct[1966]) + ct[2000]) + ct
    [2019]) + ct[2021]) + ct[2128]) + ct[2136]) + ct[172]) + ct[174]) + ct[191])
    + ct[195]) + ct[236]) + ct[256]) + ct[260]) + ct[385]) + ct[389]) + ct[429])
    + ct[513]) + ct[515]) + ct[552]) + ct[610]) + ct[616]) + ct[629]) + ct[634])
    + ct[667]) + ct[680]) + ct[732]) + ct[870]) + ct[916]) + ct[919]) + ct[940])
                       + ct[944]) + ct[976]) + ct[983]) + ct[1005]) + ct[1008])
                  + ct[1021]) + ct[1026]) + ct[1206]) + ct[1212]) + ct[1303]) +
             ct[1315]) + ct[1322]) + ct[1338]) + ct[1444]) + ct[1590]) + ct[1591])
       + ct[1598]) + ct[1601]) + ct[1603]) + ct[1611];
  proc_control_B.t3229 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1780] + ct[1792]) +
    ct[1804]) + ct[1818]) + ct[1824]) + ct[1964]) + ct[1970]) + ct[2000]) + ct
    [2019]) + ct[2026]) + ct[2128]) + ct[2143]) + ct[172]) + ct[179]) + ct[191])
    + ct[199]) + ct[234]) + ct[256]) + ct[260]) + ct[385]) + ct[395]) + ct[429])
    + ct[513]) + ct[518]) + ct[552]) + ct[610]) + ct[629]) + ct[638]) + ct[667])
    + ct[673]) + ct[680]) + ct[732]) + ct[870]) + ct[916]) + ct[925]) + ct[940])
                       + ct[948]) + ct[976]) + ct[983]) + ct[1005]) + ct[1013])
                  + ct[1021]) + ct[1031]) + ct[1206]) + ct[1212]) + ct[1303]) +
             ct[1315]) + ct[1322]) + ct[1342]) + ct[1443]) + ct[1591]) + ct[1592])
       + ct[1598]) + ct[1601]) + ct[1603]) + ct[1621];
  proc_control_B.t3230 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1769] + ct[1777]) +
    ct[1799]) + ct[1807]) + ct[1811]) + ct[1975]) + ct[1978]) + ct[2002]) + ct
    [2018]) + ct[2024]) + ct[2128]) + ct[2139]) + ct[165]) + ct[170]) + ct[203])
    + ct[211]) + ct[234]) + ct[252]) + ct[259]) + ct[373]) + ct[380]) + ct[417])
    + ct[520]) + ct[524]) + ct[551]) + ct[612]) + ct[616]) + ct[625]) + ct[629])
    + ct[638]) + ct[643]) + ct[732]) + ct[870]) + ct[910]) + ct[914]) + ct[954])
                       + ct[962]) + ct[975]) + ct[987]) + ct[991]) + ct[997]) +
                  ct[1020]) + ct[1029]) + ct[1208]) + ct[1210]) + ct[1305]) +
             ct[1309]) + ct[1322]) + ct[1353]) + ct[1443]) + ct[1590]) + ct[1591])
       + ct[1592]) + ct[1593]) + -ct[1186]) + ct[1625];
  proc_control_B.t3231 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1769] + ct[1791]) +
    ct[1799]) + ct[1807]) + ct[1814]) + ct[1975]) + ct[1983]) + ct[2002]) + ct
    [2018]) + ct[2029]) + ct[2128]) + ct[2156]) + ct[165]) + ct[180]) + ct[203])
    + ct[221]) + ct[236]) + ct[252]) + ct[259]) + ct[373]) + ct[396]) + ct[417])
    + ct[520]) + ct[528]) + ct[551]) + ct[612]) + ct[616]) + ct[638]) + ct[643])
    + ct[646]) + ct[667]) + ct[732]) + ct[870]) + ct[910]) + ct[924]) + ct[954])
                       + ct[971]) + ct[975]) + ct[987]) + ct[994]) + ct[997]) +
                  ct[1020]) + ct[1035]) + ct[1208]) + ct[1210]) + ct[1305]) +
             ct[1309]) + ct[1322]) + ct[1360]) + ct[1444]) + ct[1590]) + ct[1592])
       + ct[1593]) + ct[1598]) + -ct[1186]) + ct[1628];
  proc_control_B.t3232 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1772] + ct[1776]) +
    ct[1800]) + ct[1802]) + ct[1808]) + ct[1988]) + ct[1991]) + ct[2007]) + ct
    [2009]) + ct[2031]) + ct[2144]) + ct[2150]) + ct[184]) + ct[187]) + ct[204])
    + ct[209]) + ct[231]) + ct[257]) + ct[261]) + ct[374]) + ct[378]) + ct[418])
    + ct[531]) + ct[534]) + ct[554]) + ct[611]) + ct[615]) + ct[637]) + ct[640])
    + ct[652]) + ct[659]) + ct[737]) + ct[873]) + ct[933]) + ct[936]) + ct[956])
                       + ct[961]) + ct[978]) + ct[981]) + ct[998]) + ct[1000]) +
                  ct[1006]) + ct[1022]) + ct[1207]) + ct[1214]) + ct[1304]) +
             ct[1312]) + ct[1343]) + ct[1357]) + ct[1447]) + ct[1604]) + ct[1606])
       + ct[1612]) + ct[1616]) + ct[1627]) + -ct[1195];
  proc_control_B.t3233 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1772] + ct[1781]) +
    ct[1800]) + ct[1805]) + ct[1808]) + ct[1988]) + ct[1994]) + ct[2007]) + ct
    [2011]) + ct[2031]) + ct[2144]) + ct[2159]) + ct[184]) + ct[192]) + ct[204])
    + ct[215]) + ct[235]) + ct[257]) + ct[261]) + ct[374]) + ct[386]) + ct[418])
    + ct[531]) + ct[537]) + ct[554]) + ct[611]) + ct[615]) + ct[619]) + ct[637])
    + ct[652]) + ct[679]) + ct[737]) + ct[873]) + ct[933]) + ct[941]) + ct[956])
                       + ct[965]) + ct[978]) + ct[984]) + ct[998]) + ct[1003]) +
                  ct[1006]) + ct[1022]) + ct[1207]) + ct[1214]) + ct[1304]) +
             ct[1312]) + ct[1343]) + ct[1362]) + ct[1448]) + ct[1604]) + ct[1606])
       + ct[1612]) + ct[1622]) + ct[1624]) + -ct[1195];
  proc_control_B.t3234 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1782] + ct[1795]) +
    ct[1815]) + ct[1819]) + ct[1826]) + ct[1965]) + ct[1971]) + ct[2006]) + ct
    [2020]) + ct[2027]) + ct[2132]) + ct[2144]) + ct[173]) + ct[182]) + ct[193])
    + ct[200]) + ct[231]) + ct[275]) + ct[289]) + ct[387]) + ct[398]) + ct[453])
    + ct[514]) + ct[519]) + ct[555]) + ct[615]) + ct[644]) + ct[659]) + ct[675])
    + ct[679]) + ct[686]) + ct[737]) + ct[873]) + ct[918]) + ct[927]) + ct[942])
                       + ct[951]) + ct[995]) + ct[1007]) + ct[1015]) + ct[1018])
                  + ct[1024]) + ct[1032]) + ct[1209]) + ct[1216]) + ct[1310]) +
             ct[1319]) + ct[1324]) + ct[1343]) + ct[1447]) + ct[1594]) + ct[1600])
       + ct[1606]) + ct[1616]) + ct[1622]) + ct[1623];
  proc_control_B.t3235 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1790] + ct[1795]) +
    ct[1815]) + ct[1823]) + ct[1826]) + ct[1969]) + ct[1971]) + ct[2006]) + ct
    [2025]) + ct[2027]) + ct[2141]) + ct[2144]) + ct[177]) + ct[182]) + ct[197])
    + ct[200]) + ct[235]) + ct[275]) + ct[289]) + ct[393]) + ct[398]) + ct[453])
    + ct[516]) + ct[519]) + ct[555]) + ct[637]) + ct[644]) + ct[656]) + ct[659])
    + ct[679]) + ct[686]) + ct[737]) + ct[873]) + ct[923]) + ct[927]) + ct[947])
                       + ct[951]) + ct[995]) + ct[1011]) + ct[1015]) + ct[1018])
                  + ct[1030]) + ct[1032]) + ct[1209]) + ct[1216]) + ct[1310]) +
             ct[1319]) + ct[1329]) + ct[1343]) + ct[1448]) + ct[1594]) + ct[1597])
       + ct[1612]) + ct[1616]) + ct[1622]) + ct[1623];
  proc_control_B.t3236 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1774] + ct[1783]) +
    ct[1801]) + ct[1806]) + ct[1820]) + ct[1989]) + ct[1995]) + ct[2008]) + ct
    [2012]) + ct[2037]) + ct[2147]) + ct[2160]) + ct[186]) + ct[194]) + ct[206])
    + ct[216]) + ct[232]) + ct[262]) + ct[277]) + ct[376]) + ct[388]) + ct[430])
    + ct[533]) + ct[538]) + ct[556]) + ct[613]) + ct[622]) + ct[628]) + ct[658])
    + ct[666]) + ct[687]) + ct[740]) + ct[876]) + ct[934]) + ct[943]) + ct[958])
                       + ct[966]) + ct[980]) + ct[985]) + ct[999]) + ct[1004]) +
                  ct[1025]) + ct[1037]) + ct[1211]) + ct[1217]) + ct[1306]) +
             ct[1320]) + ct[1345]) + ct[1363]) + ct[1454]) + ct[1607]) + -ct
        [1183]) + -ct[1187]) + -ct[1191]) + -ct[1199]) + -ct[1200];
  proc_control_B.t3237 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1779] + ct[1783]) +
    ct[1803]) + ct[1806]) + ct[1820]) + ct[1992]) + ct[1995]) + ct[2010]) + ct
    [2012]) + ct[2037]) + ct[2157]) + ct[2160]) + ct[190]) + ct[194]) + ct[213])
    + ct[216]) + ct[230]) + ct[262]) + ct[277]) + ct[384]) + ct[388]) + ct[430])
    + ct[536]) + ct[538]) + ct[556]) + ct[613]) + ct[628]) + ct[664]) + ct[666])
    + ct[678]) + ct[687]) + ct[740]) + ct[876]) + ct[939]) + ct[943]) + ct[964])
                       + ct[966]) + ct[982]) + ct[985]) + ct[1002]) + ct[1004])
                  + ct[1025]) + ct[1037]) + ct[1211]) + ct[1217]) + ct[1306]) +
             ct[1320]) + ct[1349]) + ct[1363]) + ct[1453]) + ct[1617]) + -ct
        [1183]) + -ct[1187]) + -ct[1191]) + -ct[1200]) + -ct[1203];
  proc_control_B.t3238 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1773] + ct[1796]) +
    ct[1809]) + ct[1816]) + ct[1827]) + ct[1977]) + ct[1985]) + ct[2022]) + ct
    [2030]) + ct[2035]) + ct[2137]) + ct[2160]) + ct[167]) + ct[183]) + ct[207])
    + ct[224]) + ct[230]) + ct[276]) + ct[302]) + ct[377]) + ct[400]) + ct[454])
    + ct[523]) + ct[530]) + ct[557]) + ct[628]) + ct[651]) + ct[654]) + ct[658])
    + ct[678]) + ct[681]) + ct[740]) + ct[876]) + ct[912]) + ct[928]) + ct[957])
                       + ct[974]) + ct[988]) + ct[996]) + ct[1016]) + ct[1027])
                  + ct[1036]) + ct[1040]) + ct[1213]) + ct[1215]) + ct[1313]) +
             ct[1316]) + ct[1326]) + ct[1363]) + ct[1453]) + ct[1596]) + ct[1602])
       + -ct[1191]) + -ct[1196]) + -ct[1199]) + -ct[1203];
  proc_control_B.t3239 =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((ct[1788] + ct[1796]) +
    ct[1812]) + ct[1816]) + ct[1827]) + ct[1982]) + ct[1985]) + ct[2028]) + ct
    [2030]) + ct[2035]) + ct[2152]) + ct[2160]) + ct[176]) + ct[183]) + ct[219])
    + ct[224]) + ct[232]) + ct[276]) + ct[302]) + ct[392]) + ct[400]) + ct[454])
    + ct[527]) + ct[530]) + ct[557]) + ct[654]) + ct[658]) + ct[666]) + ct[669])
    + ct[678]) + ct[681]) + ct[740]) + ct[876]) + ct[921]) + ct[928]) + ct[969])
                       + ct[974]) + ct[992]) + ct[996]) + ct[1016]) + ct[1033])
                  + ct[1036]) + ct[1040]) + ct[1213]) + ct[1215]) + ct[1313]) +
             ct[1316]) + ct[1333]) + ct[1363]) + ct[1454]) + ct[1599]) + ct[1602])
       + -ct[1196]) + -ct[1199]) + -ct[1200]) + -ct[1203];
  proc_control_B.t3240 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    (((((((ct[425] + ct[757]) + ct[858]) + ct[1023]) + ct[1380]) + ct[1395]) +
    ct[1416]) + ct[1614]) + ct[1679]) + ct[1730]) + ct[1748]) + ct[1828]) + ct
    [1842]) + ct[1857]) + ct[1870]) + ct[1891]) + ct[1896]) + ct[1898]) + ct
    [1902]) + ct[1910]) + ct[2046]) + ct[2064]) + ct[2081]) + ct[2090]) + ct
    [2100]) + ct[2110]) + ct[2112]) + ct[2114]) + ct[2116]) + ct[2118]) + ct
    [2122]) + ct[22]) + ct[24]) + ct[26]) + ct[27]) + ct[263]) + ct[267]) + ct
    [278]) + ct[282]) + ct[307]) + ct[317]) + ct[320]) + ct[345]) + ct[407]) +
    ct[419]) + ct[431]) + ct[442]) + ct[445]) + ct[469]) + ct[472]) + ct[474]) +
    ct[691]) + ct[696]) + ct[697]) + ct[705]) + ct[707]) + ct[710]) + ct[720]) +
    ct[726]) + ct[859]) + ct[861]) + ct[863]) + ct[864]) + ct[882]) + ct[1076])
    + ct[1077]) + ct[1233]) + ct[1237]) + ct[1239]) + ct[1243]) + ct[1364]) +
                  ct[1365]) + ct[1367]) + ct[1370]) + ct[1371]) + ct[1374]) +
             ct[1376]) + ct[1384]) + ct[1458]) + ct[1459]) + ct[1630]) + ct[1631])
       + ct[1636]) + ct[1640]) + -ct[1496]) + -ct[1499];
  proc_control_B.t3241 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    (((((((ct[488] + ct[812]) + ct[917]) + ct[1095]) + ct[1405]) + ct[1427]) +
    ct[1449]) + ct[1663]) + ct[1683]) + ct[1737]) + ct[1751]) + ct[1834]) + ct
    [1849]) + ct[1863]) + ct[1874]) + ct[1894]) + ct[1901]) + ct[1903]) + ct
    [1911]) + ct[1917]) + ct[2045]) + ct[2067]) + ct[2085]) + ct[2095]) + ct
    [2105]) + ct[2111]) + ct[2113]) + ct[2117]) + ct[2119]) + ct[2123]) + ct
    [2126]) + ct[22]) + ct[23]) + ct[29]) + ct[30]) + ct[266]) + ct[272]) + ct
    [292]) + ct[298]) + ct[312]) + ct[318]) + ct[322]) + ct[349]) + ct[411]) +
    ct[423]) + ct[435]) + ct[444]) + ct[448]) + ct[473]) + ct[475]) + ct[477]) +
    ct[691]) + ct[703]) + ct[704]) + ct[706]) + ct[715]) + ct[717]) + ct[718]) +
    ct[729]) + ct[859]) + ct[860]) + ct[866]) + ct[867]) + ct[881]) + ct[1075])
    + ct[1077]) + ct[1235]) + ct[1238]) + ct[1242]) + ct[1245]) + ct[1364]) +
                  ct[1366]) + ct[1372]) + ct[1373]) + ct[1377]) + ct[1378]) +
             ct[1383]) + ct[1386]) + ct[1462]) + ct[1464]) + ct[1633]) + ct[1634])
       + ct[1637]) + ct[1639]) + -ct[1495]) + -ct[1501];
  proc_control_B.t3242 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    (((((((ct[456] + ct[521]) + ct[853]) + ct[1001]) + ct[1145]) + ct[1438]) +
    ct[1460]) + ct[1471]) + ct[1672]) + ct[1684]) + ct[1743]) + ct[1840]) + ct
    [1855]) + ct[1869]) + ct[1897]) + ct[1907]) + ct[1908]) + ct[1915]) + ct
    [1916]) + ct[1920]) + ct[2044]) + ct[2072]) + ct[2089]) + ct[2099]) + ct
    [2109]) + ct[2115]) + ct[2120]) + ct[2121]) + ct[2124]) + ct[2125]) + ct
    [2127]) + ct[25]) + ct[26]) + ct[28]) + ct[30]) + ct[284]) + ct[288]) + ct
    [297]) + ct[301]) + ct[316]) + ct[321]) + ct[323]) + ct[354]) + ct[416]) +
    ct[428]) + ct[439]) + ct[447]) + ct[450]) + ct[476]) + ct[478]) + ct[479]) +
    ct[695]) + ct[701]) + ct[710]) + ct[714]) + ct[716]) + ct[724]) + ct[725]) +
    ct[729]) + ct[862]) + ct[863]) + ct[865]) + ct[867]) + ct[880]) + ct[1075])
    + ct[1076]) + ct[1240]) + ct[1241]) + ct[1244]) + ct[1246]) + ct[1368]) +
                  ct[1375]) + ct[1376]) + ct[1379]) + ct[1381]) + ct[1382]) +
             ct[1385]) + ct[1386]) + ct[1466]) + ct[1467]) + ct[1632]) + ct[1635])
       + ct[1641]) + ct[1642]) + -ct[1497]) + -ct[1500];
  proc_control_B.t3210 = ((((((((((((((((((((((((((((((((((((((ct[1771] + ct
    [1775]) + ct[1810]) + ct[1960]) + ct[1961]) + ct[2003]) + ct[166]) + ct[169])
    + ct[185]) + ct[188]) + ct[225]) + ct[229]) + ct[239]) + ct[255]) + ct[375])
    + ct[379]) + ct[401]) + ct[509]) + ct[511]) + ct[542]) + ct[627]) + ct[631])
    + ct[821]) + ct[830]) + ct[911]) + ct[913]) + ct[932]) + ct[935]) + -ct[233])
    + ct[989]) + ct[1010]) + ct[1019]) + ct[1169]) + ct[1171]) + -ct[641]) +
    -ct[655]) + ct[1446]) + ct[1455]) + ct[1609]) + ct[1610];
  proc_control_B.t3211 = ((((((((((((((((((((((((((((((((((((((ct[1778] + ct
    [1789]) + ct[1813]) + ct[1963]) + ct[1967]) + ct[2005]) + ct[171]) + ct[178])
    + ct[189]) + ct[198]) + ct[226]) + ct[229]) + ct[240]) + ct[255]) + ct[381])
    + ct[394]) + ct[402]) + ct[512]) + ct[517]) + ct[543]) + ct[648]) + ct[671])
    + ct[821]) + ct[830]) + ct[915]) + ct[922]) + ct[937]) + ct[946]) + -ct[233])
    + ct[993]) + ct[1017]) + ct[1019]) + ct[1167]) + ct[1174]) + -ct[620]) +
    -ct[674]) + ct[1446]) + ct[1455]) + ct[1613]) + ct[1620];
  proc_control_B.t3212 = ((((((((((((((((((((((((((((((((((((((ct[1771] + ct
    [1794]) + ct[1825]) + ct[1976]) + ct[1984]) + ct[2034]) + ct[166]) + ct[181])
    + ct[205]) + ct[222]) + ct[225]) + ct[229]) + ct[244]) + ct[258]) + ct[375])
    + ct[397]) + ct[401]) + ct[522]) + ct[529]) + ct[545]) + ct[648]) + ct[671])
    + ct[822]) + ct[831]) + ct[911]) + ct[926]) + ct[955]) + ct[973]) + -ct[238])
    + ct[1014]) + ct[1019]) + ct[1039]) + ct[1168]) + ct[1170]) + -ct[623]) +
    -ct[650]) + ct[1452]) + ct[1456]) + -ct[1194]) + -ct[1201];
  proc_control_B.t3213 = ((((((((((((((((((((((((((((((((((((((ct[1778] + ct
    [1786]) + ct[1822]) + ct[1979]) + ct[1981]) + ct[2032]) + ct[171]) + ct[175])
    + ct[212]) + ct[217]) + ct[226]) + ct[229]) + ct[245]) + ct[258]) + ct[381])
    + ct[390]) + ct[402]) + ct[525]) + ct[526]) + ct[546]) + ct[627]) + ct[631])
    + ct[822]) + ct[831]) + ct[915]) + ct[920]) + ct[963]) + ct[968]) + -ct[238])
    + ct[1009]) + ct[1019]) + ct[1038]) + ct[1172]) + ct[1173]) + -ct[665]) +
    -ct[668]) + ct[1452]) + ct[1456]) + -ct[1190]) + -ct[1192];
  proc_control_B.t3214 = ((((((((((((((((((((((((((((((((((((((ct[1775] + ct
    [1785]) + ct[1810]) + ct[1990]) + ct[1996]) + ct[2033]) + ct[188]) + ct[196])
    + ct[210]) + ct[218]) + ct[238]) + ct[250]) + ct[253]) + ct[255]) + ct[379])
    + ct[391]) + ct[405]) + ct[535]) + ct[539]) + ct[549]) + ct[623]) + ct[650])
    + ct[829]) + ct[832]) + ct[935]) + ct[945]) + ct[959]) + ct[967]) + -ct[233])
    + ct[1010]) + ct[1028]) + ct[1041]) + ct[1188]) + ct[1202]) + -ct[620]) +
    -ct[674]) + ct[1450]) + ct[1457]) + ct[1608]) + ct[1615];
  proc_control_B.t3215 = ((((((((((((((((((((((((((((((((((((((ct[1789] + ct
    [1793]) + ct[1813]) + ct[1997]) + ct[1998]) + ct[2036]) + ct[198]) + ct[201])
    + ct[220]) + ct[223]) + ct[238]) + ct[251]) + ct[254]) + ct[255]) + ct[394])
    + ct[399]) + ct[406]) + ct[540]) + ct[541]) + ct[550]) + ct[665]) + ct[668])
    + ct[829]) + ct[832]) + ct[946]) + ct[950]) + ct[970]) + ct[972]) + -ct[233])
    + ct[1017]) + ct[1034]) + ct[1041]) + ct[1193]) + ct[1198]) + -ct[641]) +
    -ct[655]) + ct[1450]) + ct[1457]) + ct[1618]) + ct[1619];
  proc_control_B.t3216 = ((((((((((((((((((((((((((((((((((((((ct[59] + ct[106])
    + ct[110]) + ct[130]) + ct[138]) + ct[161]) + ct[164]) + ct[560]) + ct[657])
    + ct[690]) + ct[748]) + ct[763]) + ct[765]) + ct[823]) + -ct[62]) + -ct[102])
    + -ct[109]) + ct[986]) + ct[1080]) + ct[1113]) + ct[1115]) + ct[1117]) + ct
    [1121]) + ct[1126]) + ct[1134]) + ct[1273]) + ct[1284]) + ct[1314]) + ct
    [1321]) + -ct[747]) + -ct[764]) + -ct[766]) + ct[1403]) + ct[1410]) + ct
    [1424]) + ct[1425]) + ct[1480]) + ct[1483]) + ct[1503]) + ct[1569];
  proc_control_B.t3217 = ((((((((((((((((((((((((((((((((((((((ct[89] + ct[93])
    + ct[110]) + ct[134]) + ct[138]) + ct[157]) + ct[164]) + ct[566]) + ct[657])
    + ct[690]) + ct[754]) + ct[758]) + ct[765]) + ct[823]) + -ct[87]) + -ct[94])
    + -ct[109]) + ct[986]) + ct[1081]) + ct[1114]) + ct[1115]) + ct[1117]) + ct
    [1121]) + ct[1126]) + ct[1134]) + ct[1275]) + ct[1286]) + ct[1314]) + ct
    [1321]) + -ct[755]) + -ct[756]) + -ct[766]) + ct[1407]) + ct[1410]) + ct
    [1421]) + ct[1425]) + ct[1480]) + ct[1483]) + ct[1505]) + ct[1569];
  proc_control_B.t3218 = ((((((((((((((((((((((((((((((((((((((ct[57] + ct[82])
    + ct[91]) + ct[117]) + ct[124]) + ct[154]) + ct[158]) + ct[565]) + ct[617])
    + ct[685]) + ct[767]) + ct[775]) + ct[781]) + ct[817]) + -ct[56]) + -ct[78])
    + -ct[90]) + ct[953]) + ct[1092]) + ct[1119]) + ct[1127]) + ct[1129]) + ct
    [1130]) + ct[1138]) + ct[1146]) + ct[1274]) + ct[1287]) + ct[1308]) + ct
    [1317]) + -ct[768]) + -ct[778]) + -ct[782]) + ct[1396]) + ct[1401]) + ct
    [1428]) + ct[1431]) + ct[1474]) + ct[1481]) + ct[1514]) + ct[1588];
  proc_control_B.t3219 = ((((((((((((((((((((((((((((((((((((((ct[74] + ct[82])
    + ct[108]) + ct[121]) + ct[124]) + ct[154]) + ct[162]) + ct[575]) + ct[617])
    + ct[685]) + ct[771]) + ct[775]) + ct[785]) + ct[817]) + -ct[73]) + -ct[78])
    + -ct[107]) + ct[953]) + ct[1098]) + ct[1119]) + ct[1127]) + ct[1129]) + ct
    [1130]) + ct[1138]) + ct[1147]) + ct[1280]) + ct[1288]) + ct[1308]) + ct
    [1317]) + -ct[773]) + -ct[778]) + -ct[786]) + ct[1399]) + ct[1401]) + ct
    [1428]) + ct[1437]) + ct[1474]) + ct[1481]) + ct[1519]) + ct[1588];
  proc_control_B.t3220 = ((((((((((((((((((((((((((((((((((((((ct[55] + ct[69])
    + ct[76]) + ct[116]) + ct[122]) + ct[129]) + ct[133]) + ct[573]) + ct[614])
    + ct[649]) + ct[787]) + ct[797]) + ct[798]) + ct[816]) + -ct[54]) + -ct[72])
    + -ct[75]) + ct[931]) + ct[1108]) + ct[1123]) + ct[1131]) + ct[1136]) + ct
    [1140]) + ct[1143]) + ct[1152]) + ct[1279]) + ct[1289]) + ct[1307]) + ct
    [1311]) + -ct[789]) + -ct[796]) + -ct[799]) + ct[1411]) + ct[1415]) + ct
    [1426]) + ct[1434]) + ct[1472]) + ct[1475]) + ct[1528]) + ct[1589];
  proc_control_B.t3221 = ((((((((((((((((((((((((((((((((((((((ct[55] + ct[61])
    + ct[100]) + ct[116]) + ct[118]) + ct[129]) + ct[137]) + ct[576]) + ct[614])
    + ct[649]) + ct[787]) + ct[790]) + ct[806]) + ct[816]) + -ct[54]) + -ct[58])
    + -ct[104]) + ct[931]) + ct[1109]) + ct[1123]) + ct[1131]) + ct[1136]) + ct
    [1140]) + ct[1143]) + ct[1153]) + ct[1282]) + ct[1290]) + ct[1307]) + ct
    [1311]) + -ct[789]) + -ct[791]) + -ct[805]) + ct[1411]) + ct[1412]) + ct
    [1426]) + ct[1441]) + ct[1472]) + ct[1475]) + ct[1530]) + ct[1589];
  proc_control_B.t3245 = (ct[308] + ct[319]) + ct[350];
  tmp =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_B.t3245 + ct
    [467]) + ct[532]) + ct[553]) + ct[592]) + ct[609]) + ct[632]) + ct[738]) +
    ct[741]) + ct[1702]) + ct[1703]) + ct[1704]) + ct[1711]) + ct[1713]) + ct
    [1715]) + ct[1719]) + ct[1721]) + ct[1725]) + ct[1745]) + ct[1746]) + ct
    [1747]) + ct[1752]) + ct[1753]) + ct[1754]) + ct[1759]) + ct[1761]) + ct
    [1763]) + ct[1765]) + ct[1767]) + ct[1797]) + ct[2050]) + ct[2051]) + ct
    [2052]) + ct[2058]) + ct[2061]) + ct[2062]) + ct[2065]) + ct[2066]) + ct
    [2068]) + ct[2070]) + ct[2073]) + ct[2074]) + ct[2075]) + ct[2077]) + ct
    [2079]) + ct[2161]) + ct[64]) + ct[65]) + ct[79]) + ct[95]) + ct[119]) + ct
    [123]) + ct[131]) + ct[135]) + ct[324]) + ct[325]) + ct[326]) + ct[333]) +
    ct[335]) + ct[337]) + ct[342]) + ct[355]) + ct[356]) + ct[357]) + ct[360]) +
    ct[361]) + ct[362]) + ct[366]) + ct[368]) + ct[370]) + ct[403]) + ct[558]) +
    ct[562]) + ct[571]) + ct[580]) + ct[584]) + ct[586]) + ct[590]) + ct[593]) +
    ct[595]) + ct[599]) + ct[603]) + ct[607]) + ct[630]) + ct[660]) + ct[670]) +
    ct[682]) + ct[751]) + ct[761]) + ct[769]) + ct[774]) + ct[877]) + -ct[63]) +
    -ct[66]) + -ct[77]) + -ct[97]) + ct[1078]) + ct[1087]) + ct[1090]) + ct[1096])
    + ct[1116]) + ct[1125]) + ct[1148]) + ct[1155]) + ct[1165]) + ct[1178]) +
    ct[1271]) + ct[1272]) + ct[1278]) + ct[1283]) + ct[1291]) + ct[1293]) + ct
                    [1297]) + ct[1301]) + -ct[749]) + -ct[759]) + -ct[770]) +
               -ct[776]) + ct[1397]) + ct[1400]) + ct[1404]) + ct[1408]) + ct
          [1470]) + ct[1478]) + ct[1502]) + ct[1510]) + ct[1512]) + ct[1517]) +
    ct[1534];
  proc_control_B.t3243 = ((((((((tmp + ct[1538]) + ct[1542]) + ct[1545]) + ct
    [1549]) + ct[1559]) + ct[1564]) + ct[1577]) + ct[1652]) + ct[1657];
  tmp_0 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((ct[371] + ct[383]) + ct
    [414]) + ct[467]) + ct[553]) + ct[568]) + ct[592]) + ct[653]) + ct[684]) +
    ct[738]) + ct[750]) + ct[1705]) + ct[1706]) + ct[1707]) + ct[1712]) + ct
    [1716]) + ct[1717]) + ct[1722]) + ct[1723]) + ct[1727]) + ct[1745]) + ct
    [1746]) + ct[1747]) + ct[1752]) + ct[1753]) + ct[1754]) + ct[1759]) + ct
    [1761]) + ct[1763]) + ct[1765]) + ct[1767]) + ct[1797]) + ct[2053]) + ct
    [2054]) + ct[2055]) + ct[2058]) + ct[2062]) + ct[2063]) + ct[2065]) + ct
    [2069]) + ct[2070]) + ct[2071]) + ct[2073]) + ct[2076]) + ct[2077]) + ct
    [2078]) + ct[2080]) + ct[2146]) + ct[65]) + ct[79]) + ct[83]) + ct[98]) +
    ct[119]) + ct[123]) + ct[155]) + ct[159]) + ct[327]) + ct[328]) + ct[329]) +
    ct[334]) + ct[338]) + ct[339]) + ct[343]) + ct[355]) + ct[356]) + ct[357]) +
    ct[360]) + ct[361]) + ct[362]) + ct[366]) + ct[368]) + ct[370]) + ct[403]) +
    ct[562]) + ct[567]) + ct[571]) + ct[577]) + ct[586]) + ct[588]) + ct[590]) +
    ct[595]) + ct[597]) + ct[601]) + ct[603]) + ct[605]) + ct[618]) + ct[639]) +
    ct[661]) + ct[683]) + ct[752]) + ct[760]) + ct[792]) + ct[800]) + ct[874]) +
    -ct[63]) + -ct[77]) + -ct[80]) + -ct[96]) + ct[1082]) + ct[1085]) + ct[1103])
    + ct[1105]) + ct[1122]) + ct[1135]) + ct[1154]) + ct[1162]) + ct[1176]) +
    ct[1180]) + ct[1272]) + ct[1276]) + ct[1278]) + ct[1281]) + ct[1293]) + ct
                   [1295]) + ct[1297]) + ct[1299]) + -ct[753]) + -ct[762]) +
              -ct[794]) + -ct[801]) + ct[1413]) + ct[1417]) + ct[1419]) + ct
         [1422]) + ct[1468]) + ct[1486]) + ct[1506]) + ct[1508]) + ct[1525];
  proc_control_B.t3244 = ((((((((((tmp_0 + ct[1527]) + ct[1536]) + ct[1547]) +
    ct[1553]) + ct[1556]) + ct[1558]) + ct[1562]) + ct[1573]) + ct[1583]) + ct
    [1650]) + ct[1661];
  tmp_1 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((proc_control_B.t3245 + ct
    [371]) + ct[383]) + ct[414]) + ct[532]) + ct[568]) + ct[609]) + ct[632]) +
    ct[653]) + ct[684]) + ct[741]) + ct[750]) + ct[1708]) + ct[1709]) + ct[1710])
    + ct[1714]) + ct[1718]) + ct[1720]) + ct[1724]) + ct[1726]) + ct[1728]) +
    ct[1752]) + ct[1753]) + ct[1754]) + ct[1759]) + ct[1761]) + ct[1763]) + ct
    [1765]) + ct[1767]) + ct[1797]) + ct[2050]) + ct[2051]) + ct[2052]) + ct
    [2053]) + ct[2054]) + ct[2055]) + ct[2061]) + ct[2063]) + ct[2066]) + ct
    [2068]) + ct[2069]) + ct[2071]) + ct[2074]) + ct[2075]) + ct[2076]) + ct
    [2078]) + ct[2079]) + ct[2080]) + ct[2131]) + ct[64]) + ct[83]) + ct[95]) +
    ct[98]) + ct[131]) + ct[135]) + ct[155]) + ct[159]) + ct[330]) + ct[331]) +
    ct[332]) + ct[336]) + ct[340]) + ct[341]) + ct[344]) + ct[360]) + ct[361]) +
    ct[362]) + ct[366]) + ct[368]) + ct[370]) + ct[403]) + ct[558]) + ct[567]) +
    ct[577]) + ct[580]) + ct[584]) + ct[588]) + ct[593]) + ct[597]) + ct[599]) +
    ct[601]) + ct[605]) + ct[607]) + ct[621]) + ct[633]) + ct[642]) + ct[672]) +
    ct[777]) + ct[783]) + ct[795]) + ct[804]) + ct[871]) + -ct[66]) + -ct[80]) +
    -ct[96]) + -ct[97]) + ct[1093]) + ct[1099]) + ct[1101]) + ct[1110]) + ct
    [1132]) + ct[1141]) + ct[1159]) + ct[1160]) + ct[1184]) + ct[1204]) + ct
    [1271]) + ct[1276]) + ct[1281]) + ct[1283]) + ct[1291]) + ct[1295]) + ct
                    [1299]) + ct[1301]) + -ct[779]) + -ct[784]) + -ct[793]) +
               -ct[802]) + ct[1429]) + ct[1432]) + ct[1435]) + ct[1439]) + ct
          [1476]) + ct[1484]) + ct[1515]) + ct[1520]) + ct[1523]) + ct[1531]) +
    ct[1540];
  proc_control_B.t3245 = ((((((((tmp_1 + ct[1551]) + ct[1567]) + ct[1570]) + ct
    [1571]) + ct[1579]) + ct[1581]) + ct[1585]) + ct[1654]) + ct[1659];
  proc_control_B.t3247 = ct[11] * ct[1787];
  proc_control_B.t3247_tmp = ct[9] * ct[1757];
  proc_control_B.t3247_tmp_o = ct[10] * ct[1770];
  tmp_2 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((ct[1755] + ct[1756]) + ct
    [1758]) + ct[1760]) + ct[1762]) + ct[1764]) + ct[1766]) + ct[1768]) + ct
    [1798]) + ct[1925]) + ct[1926]) + ct[1927]) + ct[1928]) + ct[1929]) + ct
    [1931]) + ct[1932]) + ct[1933]) + ct[1934]) + ct[1936]) + ct[1937]) + ct
    [1938]) + ct[1939]) + ct[1940]) + ct[1942]) + ct[1943]) + ct[1944]) + ct
    [1945]) + ct[1946]) + ct[1948]) + ct[1949]) + ct[1950]) + ct[1951]) + ct
    [1952]) + ct[1954]) + ct[1955]) + ct[1956]) + ct[1957]) + ct[1958]) + ct
    [1959]) + ct[1972]) + ct[1973]) + ct[1986]) + ct[2001]) + ct[2135]) + ct
    [2149]) + ct[2162]) + ct[43]) + ct[44]) + ct[45]) + ct[47]) + ct[48]) + ct
    [49]) + ct[50]) + ct[51]) + ct[52]) + ct[53]) + ct[68]) + ct[70]) + ct[85])
    + ct[88]) + ct[99]) + ct[105]) + ct[111]) + ct[112]) + ct[113]) + ct[114]) +
    ct[115]) + ct[120]) + ct[125]) + ct[126]) + ct[127]) + ct[128]) + ct[132]) +
    ct[136]) + ct[156]) + ct[160]) + ct[228]) + ct[242]) + ct[247]) + ct[363]) +
    ct[364]) + ct[365]) + ct[367]) + ct[369]) + ct[372]) + ct[404]) + ct[480]) +
    ct[481]) + ct[482]) + ct[483]) + ct[484]) + ct[485]) + ct[486]) + ct[487]) +
    ct[489]) + ct[490]) + ct[491]) + ct[492]) + ct[493]) + ct[494]) + ct[495]) +
    ct[496]) + ct[497]) + ct[498]) + ct[500]) + ct[501]) + ct[502]) + ct[503]) +
    ct[504]) + ct[505]) + ct[506]) + ct[507]) + ct[508]) + ct[544]) + ct[547]) +
                 ct[548]) + ct[561]) + ct[564]) + ct[570]) + ct[574]) + ct[579])
           + ct[582]) + ct[585]) + ct[587]) + ct[589]) + ct[591]) + ct[594]) +
     ct[596]) + ct[598];
  tmp_3 =
    (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
    ((((((((((((((((((((((((((((((((((((((((((((((((((ct[904] + ct[905]) + ct
    [907]) + ct[908]) + ct[909]) + ct[929]) + ct[930]) + ct[952]) + ct[977]) +
    ct[1079]) + ct[1084]) + ct[1086]) + ct[1088]) + ct[1091]) + ct[1094]) + ct
    [1097]) + ct[1100]) + ct[1102]) + ct[1104]) + ct[1107]) + ct[1111]) + ct
    [1120]) + ct[1124]) + ct[1128]) + ct[1133]) + ct[1137]) + ct[1142]) + ct
    [1149]) + ct[1156]) + ct[1157]) + ct[1161]) + ct[1163]) + ct[1164]) + ct
    [1166]) + ct[1177]) + ct[1179]) + ct[1181]) + ct[1185]) + ct[1205]) + ct
    [1249]) + ct[1250]) + ct[1252]) + ct[1253]) + ct[1254]) + ct[1255]) + ct
    [1256]) + ct[1258]) + ct[1259]) + ct[1260]) + ct[1261]) + ct[1262]) + ct
    [1263]) + ct[1265]) + ct[1266]) + ct[1267]) + ct[1268]) + ct[1269]) + -ct
    [559]) + -ct[563]) + -ct[569]) + -ct[572]) + -ct[578]) + -ct[581]) + ct[1292])
    + ct[1294]) + ct[1296]) + ct[1298]) + ct[1300]) + ct[1302]) + -ct[693]) +
    -ct[712]) + -ct[731]) + -(ct[9] * ct[64])) + -(ct[9] * ct[83])) + -(ct[9] *
    ct[95])) + -(ct[9] * ct[98])) + -(ct[10] * ct[65])) + -(ct[10] * ct[79])) +
    -(ct[10] * ct[83])) + -(ct[10] * ct[98])) + -(ct[11] * ct[64])) + -(ct[11] *
    ct[65])) + -(ct[11] * ct[79])) + -(ct[11] * ct[95])) + ct[1398]) + ct[1402])
    + ct[1406]) + ct[1409]) + ct[1414]) + ct[1418]) + ct[1420]) + ct[1423]) +
    ct[1430]) + ct[1433]) + ct[1436]) + ct[1440]) + ct[1469]) + ct[1473]) + ct
    [1477]) + ct[1479]) + ct[1485]) + ct[1487]) + -(ct[10] * ct[752])) + -(ct[10]
    * ct[760])) + -(ct[11] * ct[751])) + -(ct[11] * ct[761])) + -(ct[11] * ct
    [769])) + -(ct[11] * ct[774])) + ct[10] * ct[1488]) + ct[9] * ct[1490]) +
                      ct[11] * ct[1489]) + ct[9] * ct[1493]) + ct[11] * ct[1492])
                   + ct[10] * ct[1494]) + ct[1504]) + ct[1507]) + ct[1509]) +
               ct[1511]) + ct[1513]) + ct[1516]) + ct[1518]) + ct[1522]) + ct
          [1524]) + ct[1526]) + ct[1529]) + ct[1533]) + ct[1535]) + ct[1537]) +
    ct[1539];
  proc_control_B.t3247 = 1.0 /
    ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((tmp_2
    + ct[600]) + ct[602]) + ct[604]) + ct[606]) + ct[608]) + ct[624]) + ct[626])
    + ct[635]) + ct[636]) + ct[645]) + ct[647]) + ct[662]) + ct[663]) + ct[676])
    + ct[677]) + ct[688]) + ct[689]) + ct[733]) + ct[739]) + ct[742]) + ct[9] *
    ct[66]) + ct[9] * ct[80]) + ct[9] * ct[96]) + ct[9] * ct[97]) + ct[10] * ct
    [63]) + ct[10] * ct[77]) + ct[10] * ct[80]) + ct[10] * ct[96]) + ct[11] *
    ct[63]) + ct[11] * ct[66]) + ct[11] * ct[77]) + ct[11] * ct[97]) + ct[10] *
    ct[753]) + ct[10] * ct[762]) + ct[11] * ct[749]) + ct[11] * ct[759]) + ct[11]
    * ct[770]) + ct[11] * ct[776]) + ct[11] * ct[807]) + ct[11] * ct[808]) + ct
    [10] * ct[813]) + ct[11] * ct[810]) + ct[10] * ct[814]) + ct[11] * ct[811])
    + ct[872]) + ct[875]) + ct[878]) + ct[883]) + ct[884]) + ct[885]) + ct[886])
    + ct[887]) + ct[888]) + ct[889]) + ct[891]) + ct[892]) + ct[893]) + -ct[67])
                  + -ct[71]) + -ct[84]) + -ct[86]) + -ct[101]) + -ct[103]) + ct
             [896]) + ct[897]) + ct[898]) + ct[899]) + ct[900]) + ct[901]) + ct
       [902]) + ct[903]) +
     (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((tmp_3 + ct
    [1541]) + ct[1544]) + ct[1546]) + ct[1548]) + ct[1550]) + ct[1552]) + ct
    [1555]) + ct[1557]) + ct[1560]) + ct[1561]) + ct[1563]) + ct[1566]) + ct
    [1568]) + ct[1572]) + ct[1574]) + ct[1575]) + ct[1578]) + ct[1580]) + ct
    [1582]) + ct[1584]) + ct[1586]) + -(ct[9] * ct[621])) + -(ct[9] * ct[633]))
    + -(ct[9] * ct[642])) + -(ct[9] * ct[672])) + -(ct[10] * ct[618])) + -(ct[10]
    * ct[639])) + -(ct[10] * ct[661])) + -(ct[10] * ct[683])) + -(ct[11] * ct
    [630])) + -(ct[11] * ct[660])) + -(ct[11] * ct[670])) + -(ct[11] * ct[682]))
    + ct[10] * ct[1757] * ct[411]) + proc_control_B.t3247_tmp_o * ct[416]) + ct
    [11] * ct[1757] * ct[407]) + proc_control_B.t3247 * ct[416]) + ct[11] * ct
    [1770] * ct[419]) + proc_control_B.t3247 * ct[423]) +
    proc_control_B.t3247_tmp * ct[447]) + proc_control_B.t3247_tmp * ct[450]) +
    proc_control_B.t3247_tmp_o * ct[444]) + proc_control_B.t3247_tmp_o * ct[448])
    + proc_control_B.t3247 * ct[442]) + proc_control_B.t3247 * ct[445]) + ct
                       [1643]) + ct[1645]) + ct[1646]) + ct[1647]) + ct[1648]) +
                  ct[1649]) + ct[1651]) + ct[1653]) + ct[1656]) + ct[1658]) +
             ct[1660]) + ct[1662]) + ct[9] * ct[1770] * ct[862]) + ct[9] * ct
          [1787] * ct[865]) + proc_control_B.t3247_tmp_o * ct[859]) + ct[10] *
        ct[1787] * ct[866]) + proc_control_B.t3247 * ct[859]) +
      proc_control_B.t3247 * ct[863]));
  std::memset(&Anq[0], 0, 39U * sizeof(real_T));
  Anq[39] = -ct[1993] + ct[2013];
  Anq[40] = ct[1968] - ct[2004];
  Anq[41] = -ct[1962] + ct[1980];
  Anq[42] = 0.0;
  Anq[43] = ct[246];
  Anq[44] = ct[248];
  Anq[45] = ct[249];
  proc_control_B.t3247_tmp = ct[13] * ct[16] * ct[1817];
  proc_control_B.t3247_tmp_o = ct[12] * ct[16] * ct[1817];
  Anq[46] = (((-proc_control_B.t3179 * proc_control_B.t3215 *
               proc_control_B.t3247 - proc_control_B.t3180 *
               proc_control_B.t3237 * proc_control_B.t3247) -
              proc_control_B.t3196 * proc_control_B.t3232 * proc_control_B.t3247)
             + proc_control_B.t3247_tmp_o * proc_control_B.t3221 *
             proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp *
    proc_control_B.t3245 * proc_control_B.t3247 * 2.0;
  Anq[47] = (((-proc_control_B.t3180 * proc_control_B.t3213 *
               proc_control_B.t3247 + proc_control_B.t3179 *
               proc_control_B.t3239 * proc_control_B.t3247) +
              proc_control_B.t3196 * proc_control_B.t3230 * proc_control_B.t3247)
             - proc_control_B.t3247_tmp * proc_control_B.t3220 *
             proc_control_B.t3247 * 2.0) + proc_control_B.t3247_tmp_o *
    proc_control_B.t3244 * proc_control_B.t3247 * 2.0;
  Anq[48] = (((-proc_control_B.t3196 * proc_control_B.t3210 *
               proc_control_B.t3247 + proc_control_B.t3180 *
               proc_control_B.t3228 * proc_control_B.t3247) -
              proc_control_B.t3179 * proc_control_B.t3235 * proc_control_B.t3247)
             + proc_control_B.t3247_tmp_o * proc_control_B.t3216 *
             proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp *
    proc_control_B.t3218 * proc_control_B.t3247 * 2.0;
  proc_control_B.Anq_tmp_tmp = ct[1] * ct[5];
  proc_control_B.Anq_tmp = proc_control_B.Anq_tmp_tmp * ct[9];
  proc_control_B.Anq_tmp_d = ct[0] * ct[9];
  proc_control_B.Anq_tmp_i = ct[6] * ct[7];
  proc_control_B.Anq_tmp_e = proc_control_B.Anq_tmp_i * ct[1856] * ct[81];
  proc_control_B.Anq_tmp_i = proc_control_B.Anq_tmp_i * ct[9] * ct[10] * ct[1841]
    * ct[81];
  proc_control_B.Anq_tmp_g5 = proc_control_B.t3180 * proc_control_B.t3247;
  proc_control_B.Anq_tmp =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((ct[499] + ct[815]) + ct
    [938]) + ct[1106]) + ct[1664]) - ct[1668]) - ct[1738]) + ct[1739]) - ct[1835])
    + ct[1836]) - ct[1850]) + ct[1851]) - ct[1864]) + ct[1865]) - ct[1879]) -
    ct[1889]) + ct[1890]) + ct[1905]) + ct[1912]) + ct[1918]) - ct[2130]) - ct
    [2133]) - ct[31]) - ct[32]) + ct[273]) - ct[274]) + ct[281]) - ct[287]) +
    ct[293]) + ct[300]) + ct[305]) + ct[306]) + ct[692]) + ct[708]) + ct[719]) +
                      ct[721]) - ct[734]) + ct[743]) + ct[744]) + ct[838]) - ct
                 [842]) - ct[847]) - ct[1223]) - ct[1228]) + ct[1236]) + ct[0] *
            ct[1848] * ct[81]) + proc_control_B.Anq_tmp_e) +
          proc_control_B.Anq_tmp * ct[10] * ct[92]) + proc_control_B.Anq_tmp *
         ct[11] * ct[92]) + proc_control_B.Anq_tmp_tmp * ct[10] * ct[11] * ct[92])
       + proc_control_B.Anq_tmp_d * ct[10] * ct[17] * ct[81]) +
      proc_control_B.Anq_tmp_d * ct[11] * ct[17] * ct[81]) + ct[0] * ct[10] *
     ct[11] * ct[17] * ct[81]) + proc_control_B.Anq_tmp_i;
  Anq[49] = (((proc_control_B.t3196 * proc_control_B.t3224 *
               proc_control_B.t3247 - proc_control_B.t3179 *
               proc_control_B.t3242 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp * proc_control_B.Anq_tmp_g5) -
             proc_control_B.t3247_tmp * proc_control_B.t3214 *
             proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp_o *
    proc_control_B.t3238 * proc_control_B.t3247 * 2.0;
  proc_control_B.Anq_tmp_tmp = ct[1] * ct[2];
  proc_control_B.Anq_tmp_d = proc_control_B.Anq_tmp_tmp * ct[9];
  proc_control_B.Anq_tmp_g = ct[3] * ct[9];
  proc_control_B.Anq_tmp_c = ct[7] * ct[8];
  proc_control_B.Anq_tmp_tmp_h = ct[3] * ct[4];
  proc_control_B.Anq_tmp_a = proc_control_B.Anq_tmp_tmp_h * ct[9];
  proc_control_B.Anq_tmp_ef = ct[2] * ct[9];
  proc_control_B.Anq_tmp_dw = proc_control_B.Anq_tmp_c * ct[1856] * ct[60];
  proc_control_B.Anq_tmp_c = proc_control_B.Anq_tmp_c * ct[10] * ct[11] * ct
    [1841] * ct[60];
  proc_control_B.Anq_tmp_d =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((ct[772] + ct[879]) + ct
    [1044]) + ct[1626]) - ct[1629]) - ct[1731]) + ct[1732]) + ct[1749]) - ct
    [1829]) + ct[1830]) - ct[1843]) + ct[1844]) - ct[1858]) + ct[1859]) + ct
    [1872]) + ct[1875]) - ct[1877]) - ct[1881]) + ct[1892]) + ct[1899]) - ct
    [2145]) - ct[2148]) - ct[35]) - ct[36]) + ct[265]) + ct[268]) - ct[279]) +
    ct[280]) - ct[290]) + ct[294]) + ct[303]) + ct[304]) + ct[698]) + ct[699]) +
                       ct[711]) + ct[727]) - ct[736]) + ct[745]) + ct[746]) -
                  ct[833]) - ct[840]) + ct[843]) - ct[1219]) - ct[1225]) + ct
             [1232]) + ct[3] * ct[1848] * ct[60]) + proc_control_B.Anq_tmp_dw) +
          proc_control_B.Anq_tmp_d * ct[10] * ct[92]) + proc_control_B.Anq_tmp_d
         * ct[11] * ct[92]) + proc_control_B.Anq_tmp_tmp * ct[10] * ct[11] * ct
        [92]) + proc_control_B.Anq_tmp_g * ct[10] * ct[17] * ct[60]) +
      proc_control_B.Anq_tmp_g * ct[11] * ct[17] * ct[60]) + ct[3] * ct[10] *
     ct[11] * ct[17] * ct[60]) + proc_control_B.Anq_tmp_c;
  proc_control_B.Anq_tmp_i +=
    (((((((((((((((((((((((((((((((((((((((((((((((((((ct[510] + ct[837]) + ct
    [979]) + ct[1139]) + ct[1670]) - ct[1671]) - ct[1741]) + ct[1742]) - ct[1838])
    + ct[1839]) - ct[1853]) + ct[1854]) - ct[1867]) + ct[1868]) - ct[1884]) -
    ct[1888]) + ct[1890]) + ct[1906]) + ct[1914]) + ct[1919]) - ct[2140]) - ct
    [2142]) - ct[31]) - ct[32]) + ct[270]) - ct[274]) + ct[286]) - ct[287]) +
    ct[296]) + ct[299]) + ct[305]) + ct[306]) + ct[694]) + ct[709]) + ct[722]) +
                     ct[723]) - ct[734]) + ct[743]) + ct[744]) + ct[838]) - ct
                [841]) - ct[849]) - ct[1224]) - ct[1230]) + ct[1236]) + ct[2] *
           ct[1848] * ct[81]) + proc_control_B.Anq_tmp_e) +
         proc_control_B.Anq_tmp_a * ct[10] * ct[92]) + proc_control_B.Anq_tmp_a *
        ct[11] * ct[92]) + proc_control_B.Anq_tmp_tmp_h * ct[10] * ct[11] * ct
       [92]) + proc_control_B.Anq_tmp_ef * ct[10] * ct[17] * ct[81]) +
     proc_control_B.Anq_tmp_ef * ct[11] * ct[17] * ct[81]) + ct[2] * ct[10] *
    ct[11] * ct[17] * ct[81];
  proc_control_B.Anq_tmp_e = proc_control_B.t3179 * proc_control_B.t3247;
  Anq[50] = ((proc_control_B.t3247_tmp_o * proc_control_B.t3212 *
              proc_control_B.t3247 * 2.0 + -proc_control_B.t3196 *
              proc_control_B.t3247 * proc_control_B.Anq_tmp_d) -
             proc_control_B.t3247_tmp * proc_control_B.t3236 *
             proc_control_B.t3247 * 2.0) + (-proc_control_B.t3180 *
    proc_control_B.t3241 * proc_control_B.t3247 + proc_control_B.Anq_tmp_i *
    proc_control_B.Anq_tmp_e);
  proc_control_B.Anq_tmp_tmp = ct[0] * ct[4];
  proc_control_B.Anq_tmp_g = proc_control_B.Anq_tmp_tmp * ct[9];
  proc_control_B.Anq_tmp_a = ct[5] * ct[9];
  proc_control_B.Anq_tmp_g =
    ((((((((((((((((((((((((((((((((((((((((((((((((((((ct[803] + ct[895]) + ct
    [1083]) + ct[1644]) - ct[1655]) - ct[1734]) + ct[1735]) + ct[1750]) - ct
    [1832]) + ct[1833]) - ct[1846]) + ct[1847]) - ct[1861]) + ct[1862]) + ct
    [1873]) + ct[1875]) - ct[1876]) - ct[1885]) + ct[1893]) + ct[1900]) - ct
    [2154]) - ct[2158]) - ct[35]) - ct[36]) + ct[264]) + ct[271]) - ct[279]) +
    ct[285]) - ct[290]) + ct[291]) + ct[303]) + ct[304]) + ct[700]) + ct[702]) +
                       ct[713]) + ct[728]) - ct[736]) + ct[745]) + ct[746]) -
                  ct[835]) - ct[839]) + ct[843]) - ct[1221]) - ct[1226]) + ct
             [1232]) + ct[5] * ct[1848] * ct[60]) + proc_control_B.Anq_tmp_dw) +
          proc_control_B.Anq_tmp_g * ct[10] * ct[92]) + proc_control_B.Anq_tmp_g
         * ct[11] * ct[92]) + proc_control_B.Anq_tmp_tmp * ct[10] * ct[11] * ct
        [92]) + proc_control_B.Anq_tmp_a * ct[10] * ct[17] * ct[60]) +
      proc_control_B.Anq_tmp_a * ct[11] * ct[17] * ct[60]) + ct[5] * ct[10] *
     ct[11] * ct[17] * ct[60]) + proc_control_B.Anq_tmp_c;
  Anq[51] = (((-proc_control_B.t3179 * proc_control_B.t3225 *
               proc_control_B.t3247 + proc_control_B.t3196 *
               proc_control_B.t3240 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp_g * proc_control_B.Anq_tmp_g5) +
             proc_control_B.t3247_tmp_o * proc_control_B.t3231 *
             proc_control_B.t3247 * 2.0) + proc_control_B.t3247_tmp *
    proc_control_B.t3233 * proc_control_B.t3247 * 2.0;
  Anq[52] = ct[1987] + ct[2015];
  Anq[53] = (ct[1962] - ct[2023]) - ct[12] * ct[2164] * 4.0;
  Anq[54] = (ct[1968] + ct[1999]) - ct[12] * ct[2165] * 4.0;
  Anq[55] = ct[1685];
  Anq[56] = 0.0;
  Anq[57] = ct[1687];
  Anq[58] = ct[248];
  proc_control_B.Anq_tmp_c = ct[14] * ct[16] * ct[1817];
  proc_control_B.Anq_tmp_a = ct[15] * ct[16] * ct[1817];
  Anq[59] = ((((-proc_control_B.t3203 * proc_control_B.t3215 *
                proc_control_B.t3247 + proc_control_B.t3201 *
                proc_control_B.t3232 * proc_control_B.t3247) +
               proc_control_B.t3198 * proc_control_B.t3237 *
               proc_control_B.t3247) - proc_control_B.t3247_tmp_o *
              proc_control_B.t3219 * proc_control_B.t3247 * 4.0) +
             proc_control_B.Anq_tmp_c * proc_control_B.t3245 *
             proc_control_B.t3247 * 2.0) + proc_control_B.Anq_tmp_a *
    proc_control_B.t3221 * proc_control_B.t3247 * 2.0;
  Anq[60] = ((((proc_control_B.t3198 * proc_control_B.t3213 *
                proc_control_B.t3247 - proc_control_B.t3201 *
                proc_control_B.t3230 * proc_control_B.t3247) +
               proc_control_B.t3203 * proc_control_B.t3239 *
               proc_control_B.t3247) - proc_control_B.t3247_tmp_o *
              proc_control_B.t3217 * proc_control_B.t3247 * 4.0) +
             proc_control_B.Anq_tmp_c * proc_control_B.t3220 *
             proc_control_B.t3247 * 2.0) + proc_control_B.Anq_tmp_a *
    proc_control_B.t3244 * proc_control_B.t3247 * 2.0;
  Anq[61] = ((((proc_control_B.t3201 * proc_control_B.t3210 *
                proc_control_B.t3247 - proc_control_B.t3198 *
                proc_control_B.t3228 * proc_control_B.t3247) -
               proc_control_B.t3203 * proc_control_B.t3235 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_c *
              proc_control_B.t3218 * proc_control_B.t3247 * 2.0) -
             proc_control_B.t3247_tmp_o * proc_control_B.t3243 *
             proc_control_B.t3247 * 4.0) + proc_control_B.Anq_tmp_a *
    proc_control_B.t3216 * proc_control_B.t3247 * 2.0;
  proc_control_B.Anq_tmp_ef = proc_control_B.t3198 * proc_control_B.t3247;
  Anq[62] = ((((-proc_control_B.t3201 * proc_control_B.t3224 *
                proc_control_B.t3247 - proc_control_B.t3203 *
                proc_control_B.t3242 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp * proc_control_B.Anq_tmp_ef) +
              proc_control_B.Anq_tmp_c * proc_control_B.t3214 *
              proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp_o *
             proc_control_B.t3234 * proc_control_B.t3247 * 4.0) -
    proc_control_B.Anq_tmp_a * proc_control_B.t3238 * proc_control_B.t3247 * 2.0;
  Anq[63] = (((proc_control_B.t3247_tmp_o * proc_control_B.t3229 *
               proc_control_B.t3247 * 4.0 + proc_control_B.t3201 *
               proc_control_B.t3247 * proc_control_B.Anq_tmp_d) +
              proc_control_B.Anq_tmp_c * proc_control_B.t3236 *
              proc_control_B.t3247 * 2.0) + proc_control_B.Anq_tmp_a *
             proc_control_B.t3212 * proc_control_B.t3247 * 2.0) +
    (proc_control_B.t3203 * proc_control_B.t3247 * proc_control_B.Anq_tmp_i +
     proc_control_B.t3198 * proc_control_B.t3241 * proc_control_B.t3247);
  Anq[64] = ((((-proc_control_B.t3203 * proc_control_B.t3225 *
                proc_control_B.t3247 - proc_control_B.t3201 *
                proc_control_B.t3240 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_g * proc_control_B.Anq_tmp_ef) +
              proc_control_B.t3247_tmp_o * proc_control_B.t3211 *
              proc_control_B.t3247 * 4.0) - proc_control_B.Anq_tmp_c *
             proc_control_B.t3233 * proc_control_B.t3247 * 2.0) +
    proc_control_B.Anq_tmp_a * proc_control_B.t3231 * proc_control_B.t3247 * 2.0;
  Anq[65] = (ct[1980] + ct[2023]) - ct[13] * ct[2163] * 4.0;
  Anq[66] = ct[1953] + ct[2015];
  Anq[67] = (-ct[1974] + ct[1993]) - ct[13] * ct[2165] * 4.0;
  Anq[68] = ct[1686];
  Anq[69] = ct[249];
  Anq[70] = 0.0;
  Anq[71] = ct[1685];
  Anq[72] = ((((-proc_control_B.t3199 * proc_control_B.t3215 *
                proc_control_B.t3247 - proc_control_B.t3200 *
                proc_control_B.t3232 * proc_control_B.t3247) +
               proc_control_B.t3202 * proc_control_B.t3237 *
               proc_control_B.t3247) - proc_control_B.t3247_tmp *
              proc_control_B.t3219 * proc_control_B.t3247 * 4.0) +
             proc_control_B.Anq_tmp_c * proc_control_B.t3221 *
             proc_control_B.t3247 * 2.0) - proc_control_B.Anq_tmp_a *
    proc_control_B.t3245 * proc_control_B.t3247 * 2.0;
  Anq[73] = ((((proc_control_B.t3202 * proc_control_B.t3213 *
                proc_control_B.t3247 + proc_control_B.t3200 *
                proc_control_B.t3230 * proc_control_B.t3247) +
               proc_control_B.t3199 * proc_control_B.t3239 *
               proc_control_B.t3247) - proc_control_B.t3247_tmp *
              proc_control_B.t3217 * proc_control_B.t3247 * 4.0) +
             proc_control_B.Anq_tmp_c * proc_control_B.t3244 *
             proc_control_B.t3247 * 2.0) - proc_control_B.Anq_tmp_a *
    proc_control_B.t3220 * proc_control_B.t3247 * 2.0;
  Anq[74] = ((((-proc_control_B.t3200 * proc_control_B.t3210 *
                proc_control_B.t3247 - proc_control_B.t3202 *
                proc_control_B.t3228 * proc_control_B.t3247) -
               proc_control_B.t3199 * proc_control_B.t3235 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_c *
              proc_control_B.t3216 * proc_control_B.t3247 * 2.0) -
             proc_control_B.t3247_tmp * proc_control_B.t3243 *
             proc_control_B.t3247 * 4.0) - proc_control_B.Anq_tmp_a *
    proc_control_B.t3218 * proc_control_B.t3247 * 2.0;
  proc_control_B.Anq_tmp_ef = proc_control_B.t3202 * proc_control_B.t3247;
  Anq[75] = ((((proc_control_B.t3200 * proc_control_B.t3224 *
                proc_control_B.t3247 - proc_control_B.t3199 *
                proc_control_B.t3242 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp * proc_control_B.Anq_tmp_ef) -
              proc_control_B.t3247_tmp * proc_control_B.t3234 *
              proc_control_B.t3247 * 4.0) - proc_control_B.Anq_tmp_c *
             proc_control_B.t3238 * proc_control_B.t3247 * 2.0) -
    proc_control_B.Anq_tmp_a * proc_control_B.t3214 * proc_control_B.t3247 * 2.0;
  Anq[76] = (((proc_control_B.Anq_tmp_c * proc_control_B.t3212 *
               proc_control_B.t3247 * 2.0 + -proc_control_B.t3200 *
               proc_control_B.t3247 * proc_control_B.Anq_tmp_d) +
              proc_control_B.t3247_tmp * proc_control_B.t3229 *
              proc_control_B.t3247 * 4.0) - proc_control_B.Anq_tmp_a *
             proc_control_B.t3236 * proc_control_B.t3247 * 2.0) +
    (proc_control_B.t3199 * proc_control_B.t3247 * proc_control_B.Anq_tmp_i +
     proc_control_B.t3202 * proc_control_B.t3241 * proc_control_B.t3247);
  Anq[77] = ((((-proc_control_B.t3199 * proc_control_B.t3225 *
                proc_control_B.t3247 + proc_control_B.t3200 *
                proc_control_B.t3240 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_g * proc_control_B.Anq_tmp_ef) +
              proc_control_B.t3247_tmp * proc_control_B.t3211 *
              proc_control_B.t3247 * 4.0) + proc_control_B.Anq_tmp_c *
             proc_control_B.t3231 * proc_control_B.t3247 * 2.0) +
    proc_control_B.Anq_tmp_a * proc_control_B.t3233 * proc_control_B.t3247 * 2.0;
  Anq[78] = (-ct[1999] + ct[2004]) - ct[14] * ct[2163] * 4.0;
  Anq[79] = (ct[1974] + ct[2013]) - ct[14] * ct[2164] * 4.0;
  Anq[80] = ct[1953] + ct[1987];
  Anq[81] = ct[1687];
  Anq[82] = ct[1686];
  Anq[83] = ct[246];
  Anq[84] = 0.0;
  Anq[85] = (((-proc_control_B.t3180 * proc_control_B.t3215 *
               proc_control_B.t3247 + proc_control_B.t3179 *
               proc_control_B.t3237 * proc_control_B.t3247) -
              proc_control_B.t3197 * proc_control_B.t3232 * proc_control_B.t3247)
             + proc_control_B.t3247_tmp * proc_control_B.t3221 *
             proc_control_B.t3247 * 2.0) + proc_control_B.t3247_tmp_o *
    proc_control_B.t3245 * proc_control_B.t3247 * 2.0;
  Anq[86] = (((proc_control_B.t3179 * proc_control_B.t3213 *
               proc_control_B.t3247 + proc_control_B.t3180 *
               proc_control_B.t3239 * proc_control_B.t3247) +
              proc_control_B.t3197 * proc_control_B.t3230 * proc_control_B.t3247)
             + proc_control_B.t3247_tmp_o * proc_control_B.t3220 *
             proc_control_B.t3247 * 2.0) + proc_control_B.t3247_tmp *
    proc_control_B.t3244 * proc_control_B.t3247 * 2.0;
  Anq[87] = (((-proc_control_B.t3179 * proc_control_B.t3228 *
               proc_control_B.t3247 - proc_control_B.t3197 *
               proc_control_B.t3210 * proc_control_B.t3247) -
              proc_control_B.t3180 * proc_control_B.t3235 * proc_control_B.t3247)
             + proc_control_B.t3247_tmp * proc_control_B.t3216 *
             proc_control_B.t3247 * 2.0) + proc_control_B.t3247_tmp_o *
    proc_control_B.t3218 * proc_control_B.t3247 * 2.0;
  Anq[88] = (((proc_control_B.t3197 * proc_control_B.t3224 *
               proc_control_B.t3247 - proc_control_B.t3180 *
               proc_control_B.t3242 * proc_control_B.t3247) -
              proc_control_B.Anq_tmp * proc_control_B.Anq_tmp_e) +
             proc_control_B.t3247_tmp_o * proc_control_B.t3214 *
             proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp *
    proc_control_B.t3238 * proc_control_B.t3247 * 2.0;
  Anq[89] = ((proc_control_B.t3247_tmp * proc_control_B.t3212 *
              proc_control_B.t3247 * 2.0 + -proc_control_B.t3197 *
              proc_control_B.t3247 * proc_control_B.Anq_tmp_d) +
             proc_control_B.t3247_tmp_o * proc_control_B.t3236 *
             proc_control_B.t3247 * 2.0) + (proc_control_B.t3179 *
    proc_control_B.t3241 * proc_control_B.t3247 + proc_control_B.Anq_tmp_i *
    proc_control_B.Anq_tmp_g5);
  Anq[90] = (((-proc_control_B.t3180 * proc_control_B.t3225 *
               proc_control_B.t3247 + proc_control_B.t3197 *
               proc_control_B.t3240 * proc_control_B.t3247) -
              proc_control_B.Anq_tmp_g * proc_control_B.Anq_tmp_e) +
             proc_control_B.t3247_tmp * proc_control_B.t3231 *
             proc_control_B.t3247 * 2.0) - proc_control_B.t3247_tmp_o *
    proc_control_B.t3233 * proc_control_B.t3247 * 2.0;
  Anq[91] = (ct[1491] + ct[1498]) + 1.0;
  Anq[92] = ct[1921] + ct[1947];
  Anq[93] = ct[1924] - ct[1941];
  Anq[94] = 0.0;
  Anq[95] = 0.0;
  Anq[96] = 0.0;
  Anq[97] = 0.0;
  proc_control_B.t3247_tmp = (ct[1744] - ct[39]) + ct[1451];
  proc_control_B.t3247_tmp_o = ct[19] * ct[1521];
  proc_control_B.Anq_tmp_e = ct[20] * ct[1521];
  proc_control_B.Anq_tmp_g5 = ct[17] * ct[2040];
  Anq[98] = ((((-proc_control_B.t3237 * proc_control_B.t3247 *
                proc_control_B.t3247_tmp - ct[1247] * proc_control_B.t3245 *
                proc_control_B.t3247) + proc_control_B.t3182 *
               proc_control_B.t3232 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp_g5 * proc_control_B.t3215 *
              proc_control_B.t3247) - proc_control_B.t3247_tmp_o *
             proc_control_B.t3219 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_e * proc_control_B.t3221 * proc_control_B.t3247;
  proc_control_B.Anq_tmp_c = ct[92] * ct[2040];
  Anq[99] = ((((-proc_control_B.t3213 * proc_control_B.t3247 *
                proc_control_B.t3247_tmp - ct[1247] * proc_control_B.t3220 *
                proc_control_B.t3247) - proc_control_B.t3182 *
               proc_control_B.t3230 * proc_control_B.t3247) -
              proc_control_B.t3247_tmp_o * proc_control_B.t3217 *
              proc_control_B.t3247) + proc_control_B.Anq_tmp_e *
             proc_control_B.t3244 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_c * proc_control_B.t3239 * proc_control_B.t3247;
  Anq[100] = ((((proc_control_B.t3228 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1247] * proc_control_B.t3218 *
                 proc_control_B.t3247) + proc_control_B.t3182 *
                proc_control_B.t3210 * proc_control_B.t3247) +
               proc_control_B.Anq_tmp_g5 * proc_control_B.t3235 *
               proc_control_B.t3247) - proc_control_B.t3247_tmp_o *
              proc_control_B.t3243 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_e * proc_control_B.t3216 * proc_control_B.t3247;
  proc_control_B.Anq_tmp_a = proc_control_B.t3247_tmp * proc_control_B.t3247;
  Anq[101] = ((((proc_control_B.Anq_tmp * proc_control_B.Anq_tmp_a - ct[1247] *
                 proc_control_B.t3214 * proc_control_B.t3247) -
                proc_control_B.t3182 * proc_control_B.t3224 *
                proc_control_B.t3247) + proc_control_B.Anq_tmp_g5 *
               proc_control_B.t3242 * proc_control_B.t3247) -
              proc_control_B.t3247_tmp_o * proc_control_B.t3234 *
              proc_control_B.t3247) - proc_control_B.Anq_tmp_e *
    proc_control_B.t3238 * proc_control_B.t3247;
  Anq[102] = ((((-proc_control_B.t3241 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1247] * proc_control_B.t3236 *
                 proc_control_B.t3247) + proc_control_B.t3182 *
                proc_control_B.t3247 * proc_control_B.Anq_tmp_d) +
               proc_control_B.t3247_tmp_o * proc_control_B.t3229 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_e *
              proc_control_B.t3212 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_c * proc_control_B.t3247 * proc_control_B.Anq_tmp_i;
  Anq[103] = ((((ct[1247] * proc_control_B.t3233 * proc_control_B.t3247 +
                 proc_control_B.Anq_tmp_g * proc_control_B.Anq_tmp_a) -
                proc_control_B.t3182 * proc_control_B.t3240 *
                proc_control_B.t3247) + proc_control_B.Anq_tmp_g5 *
               proc_control_B.t3225 * proc_control_B.t3247) +
              proc_control_B.t3247_tmp_o * proc_control_B.t3211 *
              proc_control_B.t3247) + proc_control_B.Anq_tmp_e *
    proc_control_B.t3231 * proc_control_B.t3247;
  Anq[104] = ct[1921] - ct[1947];
  Anq[105] = (ct[1482] + ct[1498]) + 1.0;
  Anq[106] = ct[1930] + ct[1935];
  Anq[107] = 0.0;
  Anq[108] = 0.0;
  Anq[109] = 0.0;
  Anq[110] = 0.0;
  proc_control_B.t3247_tmp = (ct[1729] - ct[38]) + ct[1445];
  proc_control_B.t3247_tmp_o = ct[17] * ct[2039];
  proc_control_B.Anq_tmp_e = ct[18] * ct[1532];
  proc_control_B.Anq_tmp_a = ct[20] * ct[1532];
  Anq[111] = ((((proc_control_B.t3232 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1248] * proc_control_B.t3221 *
                 proc_control_B.t3247) - proc_control_B.t3183 *
                proc_control_B.t3215 * proc_control_B.t3247) +
               proc_control_B.t3247_tmp_o * proc_control_B.t3237 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_e *
              proc_control_B.t3219 * proc_control_B.t3247) -
    proc_control_B.Anq_tmp_a * proc_control_B.t3245 * proc_control_B.t3247;
  Anq[112] = ((((-proc_control_B.t3230 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1248] * proc_control_B.t3244 *
                 proc_control_B.t3247) + proc_control_B.t3183 *
                proc_control_B.t3239 * proc_control_B.t3247) +
               proc_control_B.t3247_tmp_o * proc_control_B.t3213 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_e *
              proc_control_B.t3217 * proc_control_B.t3247) -
    proc_control_B.Anq_tmp_a * proc_control_B.t3220 * proc_control_B.t3247;
  proc_control_B.Anq_tmp_ef = ct[92] * ct[2039];
  Anq[113] = ((((proc_control_B.t3210 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1248] * proc_control_B.t3216 *
                 proc_control_B.t3247) - proc_control_B.t3183 *
                proc_control_B.t3235 * proc_control_B.t3247) +
               proc_control_B.Anq_tmp_e * proc_control_B.t3243 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp_a *
              proc_control_B.t3218 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_ef * proc_control_B.t3228 * proc_control_B.t3247;
  proc_control_B.Anq_tmp_dw = proc_control_B.Anq_tmp_ef * proc_control_B.t3247;
  Anq[114] = ((((-proc_control_B.t3224 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp + ct[1248] * proc_control_B.t3238 *
                 proc_control_B.t3247) - proc_control_B.t3183 *
                proc_control_B.t3242 * proc_control_B.t3247) +
               proc_control_B.Anq_tmp_e * proc_control_B.t3234 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp_a *
              proc_control_B.t3214 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp * proc_control_B.Anq_tmp_dw;
  Anq[115] = (((proc_control_B.t3183 * proc_control_B.t3247 *
                proc_control_B.Anq_tmp_i + proc_control_B.t3247_tmp_o *
                proc_control_B.t3241 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_e * proc_control_B.t3229 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp_a *
              proc_control_B.t3236 * proc_control_B.t3247) +
    (proc_control_B.t3247_tmp * proc_control_B.t3247 * proc_control_B.Anq_tmp_d
     - ct[1248] * proc_control_B.t3212 * proc_control_B.t3247);
  Anq[116] = ((((-proc_control_B.t3240 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1248] * proc_control_B.t3231 *
                 proc_control_B.t3247) - proc_control_B.t3183 *
                proc_control_B.t3225 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_e * proc_control_B.t3211 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_a *
              proc_control_B.t3233 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_g * proc_control_B.Anq_tmp_dw;
  Anq[117] = ct[1924] + ct[1941];
  Anq[118] = ct[1930] - ct[1935];
  Anq[119] = (ct[1482] + ct[1491]) + 1.0;
  Anq[120] = 0.0;
  Anq[121] = 0.0;
  Anq[122] = 0.0;
  Anq[123] = 0.0;
  proc_control_B.t3247_tmp = (ct[1736] - ct[42]) + ct[1442];
  proc_control_B.Anq_tmp_e = ct[18] * ct[1543];
  proc_control_B.Anq_tmp_a = ct[19] * ct[1543];
  proc_control_B.Anq_tmp_dw = ct[92] * ct[2038];
  Anq[124] = ((((-proc_control_B.t3215 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1251] * proc_control_B.t3219 *
                 proc_control_B.t3247) - proc_control_B.t3181 *
                proc_control_B.t3237 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_e * proc_control_B.t3221 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_a *
              proc_control_B.t3245 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_dw * proc_control_B.t3232 * proc_control_B.t3247;
  proc_control_B.t3179 = ct[17] * ct[2038];
  Anq[125] = ((((proc_control_B.t3239 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1251] * proc_control_B.t3217 *
                 proc_control_B.t3247) - proc_control_B.t3181 *
                proc_control_B.t3213 * proc_control_B.t3247) +
               proc_control_B.t3179 * proc_control_B.t3230 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp_e *
              proc_control_B.t3244 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_a * proc_control_B.t3220 * proc_control_B.t3247;
  Anq[126] = ((((-proc_control_B.t3235 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1251] * proc_control_B.t3243 *
                 proc_control_B.t3247) + proc_control_B.t3181 *
                proc_control_B.t3228 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_e * proc_control_B.t3216 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_a *
              proc_control_B.t3218 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_dw * proc_control_B.t3210 * proc_control_B.t3247;
  proc_control_B.t3180 = proc_control_B.t3181 * proc_control_B.t3247;
  Anq[127] = ((((-proc_control_B.t3242 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp - ct[1251] * proc_control_B.t3234 *
                 proc_control_B.t3247) + proc_control_B.Anq_tmp *
                proc_control_B.t3180) + proc_control_B.t3179 *
               proc_control_B.t3224 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp_e * proc_control_B.t3238 *
              proc_control_B.t3247) + proc_control_B.Anq_tmp_a *
    proc_control_B.t3214 * proc_control_B.t3247;
  Anq[128] = ((((proc_control_B.t3247_tmp * proc_control_B.t3247 *
                 proc_control_B.Anq_tmp_i + ct[1251] * proc_control_B.t3229 *
                 proc_control_B.t3247) - proc_control_B.t3181 *
                proc_control_B.t3241 * proc_control_B.t3247) -
               proc_control_B.Anq_tmp_e * proc_control_B.t3212 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_a *
              proc_control_B.t3236 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_dw * proc_control_B.t3247 * proc_control_B.Anq_tmp_d;
  Anq[129] = ((((-proc_control_B.t3225 * proc_control_B.t3247 *
                 proc_control_B.t3247_tmp + ct[1251] * proc_control_B.t3211 *
                 proc_control_B.t3247) + proc_control_B.Anq_tmp_g *
                proc_control_B.t3180) + proc_control_B.t3179 *
               proc_control_B.t3240 * proc_control_B.t3247) -
              proc_control_B.Anq_tmp_e * proc_control_B.t3231 *
              proc_control_B.t3247) - proc_control_B.Anq_tmp_a *
    proc_control_B.t3233 * proc_control_B.t3247;
  Anq[130] = 0.0;
  Anq[131] = 0.0;
  Anq[132] = 0.0;
  Anq[133] = ct[1680];
  Anq[134] = ct[243];
  Anq[135] = ct[241];
  Anq[136] = ct[1681];
  Anq[137] = ((((-proc_control_B.t3186 * proc_control_B.t3221 *
                 proc_control_B.t3247 - ct[1665] * proc_control_B.t3215 *
                 proc_control_B.t3247) + proc_control_B.t3191 *
                proc_control_B.t3219 * proc_control_B.t3247) +
               proc_control_B.t3208 * proc_control_B.t3232 *
               proc_control_B.t3247) + proc_control_B.t3206 *
              proc_control_B.t3237 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_c * proc_control_B.t3245 * proc_control_B.t3247;
  Anq[138] = ((((proc_control_B.t3191 * proc_control_B.t3217 *
                 proc_control_B.t3247 + proc_control_B.t3206 *
                 proc_control_B.t3213 * proc_control_B.t3247) -
                proc_control_B.t3186 * proc_control_B.t3244 *
                proc_control_B.t3247) + ct[1665] * proc_control_B.t3239 *
               proc_control_B.t3247) - proc_control_B.t3208 *
              proc_control_B.t3230 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_c * proc_control_B.t3220 * proc_control_B.t3247;
  Anq[139] = ((((-proc_control_B.t3186 * proc_control_B.t3216 *
                 proc_control_B.t3247 + proc_control_B.t3208 *
                 proc_control_B.t3210 * proc_control_B.t3247) - ct[1665] *
                proc_control_B.t3235 * proc_control_B.t3247) +
               proc_control_B.t3191 * proc_control_B.t3243 *
               proc_control_B.t3247) - proc_control_B.t3206 *
              proc_control_B.t3228 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_c * proc_control_B.t3218 * proc_control_B.t3247;
  proc_control_B.t3247_tmp = proc_control_B.t3206 * proc_control_B.t3247;
  Anq[140] = ((((proc_control_B.t3186 * proc_control_B.t3238 *
                 proc_control_B.t3247 + proc_control_B.t3191 *
                 proc_control_B.t3234 * proc_control_B.t3247) -
                proc_control_B.t3208 * proc_control_B.t3224 *
                proc_control_B.t3247) - ct[1665] * proc_control_B.t3242 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp *
              proc_control_B.t3247_tmp) + proc_control_B.Anq_tmp_c *
    proc_control_B.t3214 * proc_control_B.t3247;
  Anq[141] = (((-proc_control_B.t3186 * proc_control_B.t3212 *
                proc_control_B.t3247 - proc_control_B.t3191 *
                proc_control_B.t3229 * proc_control_B.t3247) +
               proc_control_B.t3206 * proc_control_B.t3241 *
               proc_control_B.t3247) + ct[1665] * proc_control_B.t3247 *
              proc_control_B.Anq_tmp_i) + (proc_control_B.t3208 *
    proc_control_B.t3247 * proc_control_B.Anq_tmp_d + proc_control_B.Anq_tmp_c *
    proc_control_B.t3236 * proc_control_B.t3247);
  Anq[142] = ((((-proc_control_B.t3191 * proc_control_B.t3211 *
                 proc_control_B.t3247 - proc_control_B.t3186 *
                 proc_control_B.t3231 * proc_control_B.t3247) - ct[1665] *
                proc_control_B.t3225 * proc_control_B.t3247) -
               proc_control_B.t3208 * proc_control_B.t3240 *
               proc_control_B.t3247) - proc_control_B.Anq_tmp_g *
              proc_control_B.t3247_tmp) + proc_control_B.Anq_tmp_g5 *
    proc_control_B.t3233 * proc_control_B.t3247;
  Anq[143] = 0.0;
  Anq[144] = 0.0;
  Anq[145] = 0.0;
  Anq[146] = ct[1681];
  Anq[147] = ct[1682];
  Anq[148] = ct[243];
  Anq[149] = ct[227];
  Anq[150] = ((((-proc_control_B.t3184 * proc_control_B.t3219 *
                 proc_control_B.t3247 - proc_control_B.t3209 *
                 proc_control_B.t3215 * proc_control_B.t3247) - ct[1666] *
                proc_control_B.t3237 * proc_control_B.t3247) -
               proc_control_B.t3204 * proc_control_B.t3232 *
               proc_control_B.t3247) + proc_control_B.t3192 *
              proc_control_B.t3245 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_ef * proc_control_B.t3221 * proc_control_B.t3247;
  Anq[151] = ((((-proc_control_B.t3184 * proc_control_B.t3217 *
                 proc_control_B.t3247 - ct[1666] * proc_control_B.t3213 *
                 proc_control_B.t3247) + proc_control_B.t3192 *
                proc_control_B.t3220 * proc_control_B.t3247) +
               proc_control_B.t3204 * proc_control_B.t3230 *
               proc_control_B.t3247) + proc_control_B.t3209 *
              proc_control_B.t3239 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_ef * proc_control_B.t3244 * proc_control_B.t3247;
  Anq[152] = ((((proc_control_B.t3192 * proc_control_B.t3218 *
                 proc_control_B.t3247 - proc_control_B.t3204 *
                 proc_control_B.t3210 * proc_control_B.t3247) + ct[1666] *
                proc_control_B.t3228 * proc_control_B.t3247) -
               proc_control_B.t3184 * proc_control_B.t3243 *
               proc_control_B.t3247) - proc_control_B.t3209 *
              proc_control_B.t3235 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_ef * proc_control_B.t3216 * proc_control_B.t3247;
  proc_control_B.t3247_tmp = ct[1666] * proc_control_B.t3247;
  Anq[153] = ((((proc_control_B.t3192 * proc_control_B.t3214 *
                 proc_control_B.t3247 - proc_control_B.t3184 *
                 proc_control_B.t3234 * proc_control_B.t3247) +
                proc_control_B.t3204 * proc_control_B.t3224 *
                proc_control_B.t3247) - proc_control_B.t3209 *
               proc_control_B.t3242 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp * proc_control_B.t3247_tmp) +
    proc_control_B.t3247_tmp_o * proc_control_B.t3238 * proc_control_B.t3247;
  Anq[154] = (((proc_control_B.t3184 * proc_control_B.t3229 *
                proc_control_B.t3247 + proc_control_B.t3192 *
                proc_control_B.t3236 * proc_control_B.t3247) - ct[1666] *
               proc_control_B.t3241 * proc_control_B.t3247) +
              proc_control_B.t3209 * proc_control_B.t3247 *
              proc_control_B.Anq_tmp_i) + (-proc_control_B.t3204 *
    proc_control_B.t3247 * proc_control_B.Anq_tmp_d + proc_control_B.Anq_tmp_ef *
    proc_control_B.t3212 * proc_control_B.t3247);
  Anq[155] = ((((proc_control_B.t3184 * proc_control_B.t3211 *
                 proc_control_B.t3247 - proc_control_B.t3192 *
                 proc_control_B.t3233 * proc_control_B.t3247) -
                proc_control_B.t3209 * proc_control_B.t3225 *
                proc_control_B.t3247) + proc_control_B.t3204 *
               proc_control_B.t3240 * proc_control_B.t3247) +
              proc_control_B.Anq_tmp_g * proc_control_B.t3247_tmp) +
    proc_control_B.Anq_tmp_ef * proc_control_B.t3231 * proc_control_B.t3247;
  Anq[156] = 0.0;
  Anq[157] = 0.0;
  Anq[158] = 0.0;
  Anq[159] = ct[1682];
  Anq[160] = ct[237];
  Anq[161] = ct[1680];
  Anq[162] = ct[243];
  Anq[163] = ((((proc_control_B.t3190 * proc_control_B.t3221 *
                 proc_control_B.t3247 + proc_control_B.t3205 *
                 proc_control_B.t3215 * proc_control_B.t3247) + ct[1667] *
                proc_control_B.t3232 * proc_control_B.t3247) -
               proc_control_B.t3185 * proc_control_B.t3245 *
               proc_control_B.t3247) - proc_control_B.t3207 *
              proc_control_B.t3237 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_dw * proc_control_B.t3219 * proc_control_B.t3247;
  Anq[164] = ((((-proc_control_B.t3185 * proc_control_B.t3220 *
                 proc_control_B.t3247 - proc_control_B.t3207 *
                 proc_control_B.t3213 * proc_control_B.t3247) - ct[1667] *
                proc_control_B.t3230 * proc_control_B.t3247) +
               proc_control_B.t3190 * proc_control_B.t3244 *
               proc_control_B.t3247) - proc_control_B.t3205 *
              proc_control_B.t3239 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_dw * proc_control_B.t3217 * proc_control_B.t3247;
  Anq[165] = ((((-proc_control_B.t3185 * proc_control_B.t3218 *
                 proc_control_B.t3247 + ct[1667] * proc_control_B.t3210 *
                 proc_control_B.t3247) + proc_control_B.t3190 *
                proc_control_B.t3216 * proc_control_B.t3247) +
               proc_control_B.t3207 * proc_control_B.t3228 *
               proc_control_B.t3247) + proc_control_B.t3205 *
              proc_control_B.t3235 * proc_control_B.t3247) +
    proc_control_B.Anq_tmp_dw * proc_control_B.t3243 * proc_control_B.t3247;
  proc_control_B.t3247_tmp = proc_control_B.t3207 * proc_control_B.t3247;
  Anq[166] = ((((-proc_control_B.t3185 * proc_control_B.t3214 *
                 proc_control_B.t3247 - ct[1667] * proc_control_B.t3224 *
                 proc_control_B.t3247) - proc_control_B.t3190 *
                proc_control_B.t3238 * proc_control_B.t3247) +
               proc_control_B.t3205 * proc_control_B.t3242 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp *
              proc_control_B.t3247_tmp) + proc_control_B.Anq_tmp_dw *
    proc_control_B.t3234 * proc_control_B.t3247;
  Anq[167] = (((proc_control_B.t3190 * proc_control_B.t3212 *
                proc_control_B.t3247 - proc_control_B.t3185 *
                proc_control_B.t3236 * proc_control_B.t3247) -
               proc_control_B.t3207 * proc_control_B.t3241 *
               proc_control_B.t3247) - proc_control_B.t3205 *
              proc_control_B.t3247 * proc_control_B.Anq_tmp_i) + (ct[1667] *
    proc_control_B.t3247 * proc_control_B.Anq_tmp_d + proc_control_B.t3179 *
    proc_control_B.t3229 * proc_control_B.t3247);
  Anq[168] = ((((proc_control_B.t3185 * proc_control_B.t3233 *
                 proc_control_B.t3247 + proc_control_B.t3190 *
                 proc_control_B.t3231 * proc_control_B.t3247) +
                proc_control_B.t3205 * proc_control_B.t3225 *
                proc_control_B.t3247) - ct[1667] * proc_control_B.t3240 *
               proc_control_B.t3247) + proc_control_B.Anq_tmp_g *
              proc_control_B.t3247_tmp) + proc_control_B.t3179 *
    proc_control_B.t3211 * proc_control_B.t3247;
}

void proc_control::proc_control_ft_5(const real_T ct[1959], real_T Anq[169])
{
  proc_control_B.ct[0] = ct[0];
  proc_control_B.ct[1] = ct[1];
  proc_control_B.ct[2] = ct[2];
  proc_control_B.ct[3] = ct[3];
  proc_control_B.ct[4] = ct[4];
  proc_control_B.ct[5] = ct[5];
  std::memcpy(&proc_control_B.ct[6], &ct[7], 15U * sizeof(real_T));
  proc_control_B.ct[21] = ct[22];
  proc_control_B.ct[22] = ct[24];
  proc_control_B.ct[23] = ct[26];
  proc_control_B.ct[24] = ct[28];
  proc_control_B.ct[25] = ct[29];
  proc_control_B.ct[26] = ct[30];
  proc_control_B.ct[27] = ct[32];
  proc_control_B.ct[28] = ct[34];
  proc_control_B.ct[29] = ct[35];
  proc_control_B.ct[30] = ct[36];
  proc_control_B.ct[31] = ct[39];
  proc_control_B.ct[32] = ct[40];
  proc_control_B.ct[33] = ct[41];
  proc_control_B.ct[34] = ct[42];
  proc_control_B.ct[35] = ct[43];
  proc_control_B.ct[36] = ct[44];
  proc_control_B.ct[37] = ct[48];
  proc_control_B.ct[38] = ct[49];
  proc_control_B.ct[39] = ct[50];
  proc_control_B.ct[40] = ct[51];
  proc_control_B.ct[41] = ct[52];
  proc_control_B.ct[42] = ct[53];
  proc_control_B.ct[43] = ct[55];
  proc_control_B.ct[44] = ct[56];
  proc_control_B.ct[45] = ct[59];
  proc_control_B.ct[46] = ct[60];
  proc_control_B.ct[47] = ct[62];
  proc_control_B.ct[48] = ct[63];
  proc_control_B.ct[49] = ct[66];
  proc_control_B.ct[50] = ct[68];
  proc_control_B.ct[51] = ct[69];
  std::memcpy(&proc_control_B.ct[52], &ct[72], 18U * sizeof(real_T));
  proc_control_B.ct[70] = ct[90];
  std::memcpy(&proc_control_B.ct[71], &ct[92], 94U * sizeof(real_T));
  proc_control_B.ct[165] = ct[186];
  proc_control_B.ct[166] = ct[189];
  proc_control_B.ct[167] = ct[191];
  proc_control_B.ct[168] = ct[193];
  proc_control_B.ct[169] = ct[194];
  proc_control_B.ct[170] = ct[196];
  proc_control_B.ct[171] = ct[198];
  proc_control_B.ct[172] = ct[199];
  proc_control_B.ct[173] = ct[201];
  proc_control_B.ct[174] = ct[203];
  proc_control_B.ct[175] = ct[205];
  proc_control_B.ct[176] = ct[208];
  proc_control_B.ct[177] = ct[210];
  proc_control_B.ct[178] = ct[211];
  proc_control_B.ct[179] = ct[214];
  proc_control_B.ct[180] = ct[215];
  proc_control_B.ct[181] = ct[217];
  proc_control_B.ct[182] = ct[218];
  proc_control_B.ct[183] = ct[221];
  proc_control_B.ct[184] = ct[223];
  proc_control_B.ct[185] = ct[226];
  proc_control_B.ct[186] = ct[227];
  proc_control_B.ct[187] = ct[229];
  proc_control_B.ct[188] = ct[232];
  proc_control_B.ct[189] = ct[234];
  proc_control_B.ct[190] = ct[235];
  proc_control_B.ct[191] = ct[236];
  proc_control_B.ct[192] = ct[239];
  proc_control_B.ct[193] = ct[241];
  proc_control_B.ct[194] = ct[243];
  proc_control_B.ct[195] = ct[244];
  proc_control_B.ct[196] = ct[248];
  proc_control_B.ct[197] = ct[250];
  proc_control_B.ct[198] = ct[251];
  proc_control_B.ct[199] = ct[253];
  proc_control_B.ct[200] = ct[256];
  proc_control_B.ct[201] = ct[257];
  proc_control_B.ct[202] = ct[259];
  proc_control_B.ct[203] = ct[260];
  proc_control_B.ct[204] = ct[262];
  proc_control_B.ct[205] = ct[265];
  proc_control_B.ct[206] = ct[266];
  proc_control_B.ct[207] = ct[269];
  proc_control_B.ct[208] = ct[270];
  proc_control_B.ct[209] = ct[271];
  proc_control_B.ct[210] = ct[274];
  proc_control_B.ct[211] = ct[276];
  proc_control_B.ct[212] = ct[278];
  proc_control_B.ct[213] = ct[279];
  proc_control_B.ct[214] = ct[281];
  proc_control_B.ct[215] = ct[282];
  proc_control_B.ct[216] = ct[284];
  proc_control_B.ct[217] = ct[286];
  proc_control_B.ct[218] = ct[287];
  proc_control_B.ct[219] = ct[289];
  proc_control_B.ct[220] = ct[291];
  proc_control_B.ct[221] = ct[293];
  proc_control_B.ct[222] = ct[294];
  proc_control_B.ct[223] = ct[295];
  proc_control_B.ct[224] = ct[296];
  std::memcpy(&proc_control_B.ct[225], &ct[298], 15U * sizeof(real_T));
  proc_control_B.ct[240] = ct[314];
  proc_control_B.ct[241] = ct[317];
  proc_control_B.ct[242] = ct[318];
  proc_control_B.ct[243] = ct[322];
  proc_control_B.ct[244] = ct[324];
  proc_control_B.ct[245] = ct[326];
  proc_control_B.ct[246] = ct[328];
  proc_control_B.ct[247] = ct[329];
  proc_control_B.ct[248] = ct[332];
  proc_control_B.ct[249] = ct[337];
  proc_control_B.ct[250] = ct[340];
  proc_control_B.ct[251] = ct[344];
  std::memcpy(&proc_control_B.ct[252], &ct[347], 305U * sizeof(real_T));
  proc_control_B.ct[557] = ct[652];
  proc_control_B.ct[558] = ct[654];
  proc_control_B.ct[559] = ct[655];
  proc_control_B.ct[560] = ct[657];
  proc_control_B.ct[561] = ct[658];
  proc_control_B.ct[562] = ct[659];
  proc_control_B.ct[563] = ct[661];
  proc_control_B.ct[564] = ct[662];
  proc_control_B.ct[565] = ct[664];
  proc_control_B.ct[566] = ct[665];
  proc_control_B.ct[567] = ct[668];
  proc_control_B.ct[568] = ct[669];
  proc_control_B.ct[569] = ct[670];
  proc_control_B.ct[570] = ct[671];
  proc_control_B.ct[571] = ct[673];
  proc_control_B.ct[572] = ct[674];
  proc_control_B.ct[573] = ct[675];
  proc_control_B.ct[574] = ct[676];
  proc_control_B.ct[575] = ct[679];
  proc_control_B.ct[576] = ct[680];
  proc_control_B.ct[577] = ct[683];
  proc_control_B.ct[578] = ct[684];
  std::memcpy(&proc_control_B.ct[579], &ct[686], 30U * sizeof(real_T));
  proc_control_B.ct[609] = ct[716];
  proc_control_B.ct[610] = ct[721];
  proc_control_B.ct[611] = ct[722];
  proc_control_B.ct[612] = ct[723];
  proc_control_B.ct[613] = ct[724];
  proc_control_B.ct[614] = ct[8] * ct[1912];
  proc_control_B.ct[615] = ct[7] * ct[1919];
  proc_control_B.ct[616] = ct[8] * ct[1915];
  proc_control_B.ct[617] = ct[9] * ct[1912];
  proc_control_B.ct[618] = ct[7] * ct[1922];
  proc_control_B.ct[619] = ct[725];
  proc_control_B.ct[620] = ct[9] * ct[1915];
  proc_control_B.ct[621] = ct[8] * ct[1918];
  proc_control_B.ct[622] = ct[726];
  proc_control_B.ct[623] = ct[8] * ct[1920];
  proc_control_B.ct[624] = ct[727];
  proc_control_B.ct[625] = ct[728];
  proc_control_B.ct[626] = ct[729];
  proc_control_B.ct[627] = ct[9] * ct[1919];
  proc_control_B.ct[628] = ct[7] * ct[1924];
  proc_control_B.ct[629] = ct[9] * ct[1920];
  proc_control_B.ct[630] = ct[7] * ct[1925];
  proc_control_B.ct[631] = ct[8] * ct[1924];
  proc_control_B.ct[632] = ct[730];
  proc_control_B.ct[633] = ct[9] * ct[1923];
  proc_control_B.ct[634] = ct[731];
  proc_control_B.ct[635] = ct[732];
  proc_control_B.ct[636] = ct[733];
  proc_control_B.ct[637] = ct[7] * ct[1928];
  proc_control_B.ct[638] = ct[8] * ct[1926];
  proc_control_B.ct[639] = ct[7] * ct[1930];
  proc_control_B.ct[640] = ct[734];
  proc_control_B.ct[641] = ct[9] * ct[1926];
  proc_control_B.ct[642] = ct[8] * ct[1927];
  proc_control_B.ct[643] = ct[7] * ct[1931];
  proc_control_B.ct[644] = ct[8] * ct[1929];
  proc_control_B.ct[645] = ct[735];
  proc_control_B.ct[646] = ct[736];
  proc_control_B.ct[647] = ct[737];
  proc_control_B.ct[648] = ct[9] * ct[1928];
  proc_control_B.ct[649] = ct[7] * ct[1932];
  proc_control_B.ct[650] = ct[7] * ct[1934];
  proc_control_B.ct[651] = ct[738];
  proc_control_B.ct[652] = ct[8] * ct[1933];
  proc_control_B.ct[653] = ct[739];
  proc_control_B.ct[654] = ct[9] * ct[1931];
  proc_control_B.ct[655] = ct[7] * ct[1937];
  proc_control_B.ct[656] = ct[740];
  proc_control_B.ct[657] = ct[9] * ct[1932];
  proc_control_B.ct[658] = ct[8] * ct[1937];
  proc_control_B.ct[659] = ct[9] * ct[1934];
  proc_control_B.ct[660] = ct[8] * ct[1939];
  proc_control_B.ct[661] = ct[9] * ct[1936];
  proc_control_B.ct[662] = ct[741];
  proc_control_B.ct[663] = ct[742];
  proc_control_B.ct[664] = ct[743];
  proc_control_B.ct[665] = ct[8] * ct[1940];
  proc_control_B.ct[666] = ct[7] * ct[1942];
  proc_control_B.ct[667] = ct[9] * ct[1940];
  proc_control_B.ct[668] = ct[7] * ct[1943];
  proc_control_B.ct[669] = ct[744];
  proc_control_B.ct[670] = ct[7] * ct[1946];
  proc_control_B.ct[671] = ct[8] * ct[1942];
  proc_control_B.ct[672] = ct[9] * ct[1941];
  proc_control_B.ct[673] = ct[745];
  proc_control_B.ct[674] = ct[7] * ct[1948];
  proc_control_B.ct[675] = ct[746];
  proc_control_B.ct[676] = ct[747];
  proc_control_B.ct[677] = ct[748];
  proc_control_B.ct[678] = ct[8] * ct[1948];
  proc_control_B.ct[679] = ct[9] * ct[1943];
  proc_control_B.ct[680] = ct[7] * ct[1951];
  proc_control_B.ct[681] = ct[9] * ct[1944];
  proc_control_B.ct[682] = ct[8] * ct[1950];
  proc_control_B.ct[683] = ct[9] * ct[1947];
  proc_control_B.ct[684] = ct[749];
  proc_control_B.ct[685] = ct[7] * ct[1952];
  proc_control_B.ct[686] = ct[8] * ct[1951];
  proc_control_B.ct[687] = ct[9] * ct[1949];
  proc_control_B.ct[688] = ct[750];
  proc_control_B.ct[689] = ct[751];
  proc_control_B.ct[690] = ct[8] * ct[1952];
  proc_control_B.ct[691] = ct[754];
  proc_control_B.ct[692] = ct[755];
  proc_control_B.ct[693] = ct[10] * ct[1916];
  std::memcpy(&proc_control_B.ct[694], &ct[756], 18U * sizeof(real_T));
  proc_control_B.ct[712] = ct[11] * ct[1935];
  std::memcpy(&proc_control_B.ct[713], &ct[774], 18U * sizeof(real_T));
  proc_control_B.ct[731] = ct[12] * ct[1953];
  proc_control_B.ct[732] = ct[792];
  proc_control_B.ct[733] = ct[10] * ct[27];
  proc_control_B.ct[734] = ct[793];
  proc_control_B.ct[735] = ct[794];
  proc_control_B.ct[736] = ct[795];
  proc_control_B.ct[737] = ct[796];
  proc_control_B.ct[738] = ct[797];
  proc_control_B.ct[739] = ct[11] * ct[33];
  proc_control_B.ct[740] = ct[798];
  proc_control_B.ct[741] = ct[799];
  proc_control_B.ct[742] = ct[12] * ct[38];
  proc_control_B.ct[743] = ct[800];
  proc_control_B.ct[744] = ct[802];
  proc_control_B.ct[745] = ct[803];
  proc_control_B.ct[746] = ct[805];
  proc_control_B.ct[747] = ct[8] * ct[190];
  proc_control_B.ct[748] = ct[8] * ct[191];
  proc_control_B.ct[749] = ct[9] * ct[190];
  proc_control_B.ct[750] = ct[806];
  proc_control_B.ct[751] = ct[9] * ct[191];
  proc_control_B.ct[752] = ct[8] * ct[201];
  proc_control_B.ct[753] = ct[8] * ct[202];
  proc_control_B.ct[754] = ct[9] * ct[201];
  proc_control_B.ct[755] = ct[9] * ct[202];
  proc_control_B.ct[756] = ct[8] * ct[207];
  proc_control_B.ct[757] = ct[807];
  proc_control_B.ct[758] = ct[8] * ct[208];
  proc_control_B.ct[759] = ct[9] * ct[207];
  proc_control_B.ct[760] = ct[8] * ct[210];
  proc_control_B.ct[761] = ct[9] * ct[208];
  proc_control_B.ct[762] = ct[8] * ct[212];
  proc_control_B.ct[763] = ct[9] * ct[210];
  proc_control_B.ct[764] = ct[9] * ct[212];
  proc_control_B.ct[765] = ct[9] * ct[218];
  proc_control_B.ct[766] = ct[9] * ct[220];
  proc_control_B.ct[767] = ct[8] * ct[224];
  proc_control_B.ct[768] = ct[8] * ct[226];
  proc_control_B.ct[769] = ct[9] * ct[227];
  proc_control_B.ct[770] = ct[9] * ct[228];
  proc_control_B.ct[771] = ct[8] * ct[233];
  proc_control_B.ct[772] = ct[808];
  proc_control_B.ct[773] = ct[8] * ct[234];
  proc_control_B.ct[774] = ct[9] * ct[235];
  proc_control_B.ct[775] = ct[9] * ct[236];
  proc_control_B.ct[776] = ct[9] * ct[237];
  proc_control_B.ct[777] = ct[8] * ct[241];
  proc_control_B.ct[778] = ct[9] * ct[238];
  proc_control_B.ct[779] = ct[8] * ct[242];
  proc_control_B.ct[780] = ct[809];
  proc_control_B.ct[781] = ct[9] * ct[244];
  proc_control_B.ct[782] = ct[9] * ct[246];
  proc_control_B.ct[783] = ct[8] * ct[250];
  proc_control_B.ct[784] = ct[8] * ct[252];
  proc_control_B.ct[785] = ct[9] * ct[253];
  proc_control_B.ct[786] = ct[9] * ct[254];
  proc_control_B.ct[787] = ct[8] * ct[260];
  proc_control_B.ct[788] = ct[810];
  proc_control_B.ct[789] = ct[8] * ct[261];
  proc_control_B.ct[790] = ct[9] * ct[263];
  proc_control_B.ct[791] = ct[9] * ct[265];
  proc_control_B.ct[792] = ct[9] * ct[266];
  proc_control_B.ct[793] = ct[9] * ct[267];
  proc_control_B.ct[794] = ct[9] * ct[268];
  proc_control_B.ct[795] = ct[9] * ct[269];
  proc_control_B.ct[796] = ct[9] * ct[272];
  proc_control_B.ct[797] = ct[9] * ct[274];
  proc_control_B.ct[798] = ct[9] * ct[277];
  proc_control_B.ct[799] = ct[9] * ct[278];
  proc_control_B.ct[800] = ct[9] * ct[279];
  proc_control_B.ct[801] = ct[9] * ct[280];
  proc_control_B.ct[802] = ct[9] * ct[288];
  proc_control_B.ct[803] = ct[811];
  proc_control_B.ct[804] = ct[9] * ct[289];
  proc_control_B.ct[805] = ct[9] * ct[290];
  proc_control_B.ct[806] = ct[9] * ct[291];
  proc_control_B.ct[807] = ct[9] * ct[313];
  proc_control_B.ct[808] = ct[9] * ct[315];
  proc_control_B.ct[809] = ct[812];
  proc_control_B.ct[810] = ct[9] * ct[319];
  proc_control_B.ct[811] = ct[9] * ct[320];
  proc_control_B.ct[812] = ct[813];
  proc_control_B.ct[813] = ct[8] * ct[330];
  proc_control_B.ct[814] = ct[8] * ct[331];
  proc_control_B.ct[815] = ct[814];
  proc_control_B.ct[816] = ct[8] * ct[354];
  proc_control_B.ct[817] = ct[9] * ct[355];
  proc_control_B.ct[818] = ct[815];
  proc_control_B.ct[819] = ct[816];
  proc_control_B.ct[820] = ct[817];
  proc_control_B.ct[821] = ct[818];
  proc_control_B.ct[822] = ct[821];
  proc_control_B.ct[823] = ct[9] * ct[370];
  proc_control_B.ct[824] = ct[822];
  proc_control_B.ct[825] = ct[823];
  proc_control_B.ct[826] = ct[826];
  proc_control_B.ct[827] = ct[829];
  proc_control_B.ct[828] = ct[830];
  std::memcpy(&proc_control_B.ct[829], &ct[834], 25U * sizeof(real_T));
  proc_control_B.ct[854] = -ct[1907];
  proc_control_B.ct[855] = -ct[1908];
  proc_control_B.ct[856] = -ct[1909];
  proc_control_B.ct[857] = -ct[1910];
  proc_control_B.ct[858] = ct[859];
  proc_control_B.ct[859] = -ct[1911];
  proc_control_B.ct[860] = -ct[1913];
  proc_control_B.ct[861] = -ct[1917];
  proc_control_B.ct[862] = -ct[1929];
  proc_control_B.ct[863] = -ct[1931];
  proc_control_B.ct[864] = -ct[1933];
  proc_control_B.ct[865] = -ct[1944];
  proc_control_B.ct[866] = -ct[1949];
  proc_control_B.ct[867] = -ct[1951];
  proc_control_B.ct[868] = -ct[1955];
  proc_control_B.ct[869] = -ct[23];
  proc_control_B.ct[870] = ct[860];
  proc_control_B.ct[871] = ct[861];
  proc_control_B.ct[872] = ct[80] * ct[1823];
  proc_control_B.ct[873] = ct[862];
  proc_control_B.ct[874] = ct[863];
  proc_control_B.ct[875] = ct[91] * ct[1824];
  proc_control_B.ct[876] = ct[864];
  proc_control_B.ct[877] = ct[865];
  proc_control_B.ct[878] = ct[102] * ct[1825];
  proc_control_B.ct[879] = ct[866];
  proc_control_B.ct[880] = -ct[45];
  proc_control_B.ct[881] = -ct[46];
  proc_control_B.ct[882] = -ct[47];
  proc_control_B.ct[883] = -ct[54];
  proc_control_B.ct[884] = -ct[57];
  proc_control_B.ct[885] = -ct[58];
  proc_control_B.ct[886] = -ct[61];
  proc_control_B.ct[887] = -ct[64];
  proc_control_B.ct[888] = -ct[65];
  proc_control_B.ct[889] = -ct[67];
  proc_control_B.ct[890] = ct[867];
  proc_control_B.ct[891] = -ct[70];
  proc_control_B.ct[892] = -ct[71];
  std::memcpy(&proc_control_B.ct[893], &ct[868], 17U * sizeof(real_T));
  proc_control_B.ct[910] = -ct[187];
  proc_control_B.ct[911] = -ct[188];
  proc_control_B.ct[912] = -ct[190];
  proc_control_B.ct[913] = -ct[192];
  proc_control_B.ct[914] = -ct[195];
  proc_control_B.ct[915] = -ct[197];
  proc_control_B.ct[916] = -ct[200];
  proc_control_B.ct[917] = ct[885];
  proc_control_B.ct[918] = -ct[202];
  proc_control_B.ct[919] = -ct[204];
  proc_control_B.ct[920] = -ct[206];
  proc_control_B.ct[921] = -ct[207];
  proc_control_B.ct[922] = -ct[209];
  proc_control_B.ct[923] = -ct[212];
  proc_control_B.ct[924] = -ct[213];
  proc_control_B.ct[925] = -ct[216];
  proc_control_B.ct[926] = -ct[219];
  proc_control_B.ct[927] = -ct[220];
  proc_control_B.ct[928] = -ct[222];
  proc_control_B.ct[929] = ct[886];
  proc_control_B.ct[930] = ct[887];
  proc_control_B.ct[931] = ct[888];
  proc_control_B.ct[932] = -ct[224];
  proc_control_B.ct[933] = -ct[225];
  proc_control_B.ct[934] = -ct[228];
  proc_control_B.ct[935] = -ct[230];
  proc_control_B.ct[936] = -ct[231];
  proc_control_B.ct[937] = -ct[233];
  proc_control_B.ct[938] = ct[889];
  proc_control_B.ct[939] = -ct[237];
  proc_control_B.ct[940] = -ct[238];
  proc_control_B.ct[941] = -ct[240];
  proc_control_B.ct[942] = -ct[242];
  proc_control_B.ct[943] = -ct[245];
  proc_control_B.ct[944] = -ct[246];
  proc_control_B.ct[945] = -ct[247];
  proc_control_B.ct[946] = -ct[249];
  proc_control_B.ct[947] = -ct[252];
  proc_control_B.ct[948] = -ct[254];
  proc_control_B.ct[949] = ct[890];
  proc_control_B.ct[950] = -ct[255];
  proc_control_B.ct[951] = -ct[258];
  proc_control_B.ct[952] = ct[891];
  proc_control_B.ct[953] = ct[892];
  proc_control_B.ct[954] = -ct[261];
  proc_control_B.ct[955] = -ct[263];
  proc_control_B.ct[956] = -ct[264];
  proc_control_B.ct[957] = -ct[267];
  proc_control_B.ct[958] = -ct[268];
  proc_control_B.ct[959] = -ct[272];
  proc_control_B.ct[960] = ct[893];
  proc_control_B.ct[961] = -ct[273];
  proc_control_B.ct[962] = -ct[275];
  proc_control_B.ct[963] = -ct[277];
  proc_control_B.ct[964] = -ct[280];
  proc_control_B.ct[965] = -ct[283];
  proc_control_B.ct[966] = -ct[285];
  proc_control_B.ct[967] = -ct[286];
  proc_control_B.ct[968] = -ct[287];
  proc_control_B.ct[969] = -ct[288];
  proc_control_B.ct[970] = -ct[290];
  proc_control_B.ct[971] = -ct[292];
  proc_control_B.ct[972] = -ct[294];
  proc_control_B.ct[973] = -ct[295];
  proc_control_B.ct[974] = -ct[297];
  std::memcpy(&proc_control_B.ct[975], &ct[894], 104U * sizeof(real_T));
  proc_control_B.ct[1079] = ct[10] * ct[653];
  proc_control_B.ct[1080] = ct[1000];
  proc_control_B.ct[1081] = ct[1002];
  proc_control_B.ct[1082] = ct[1003];
  proc_control_B.ct[1083] = ct[1004];
  proc_control_B.ct[1084] = ct[10] * ct[667];
  proc_control_B.ct[1085] = ct[1006];
  proc_control_B.ct[1086] = ct[10] * ct[681];
  proc_control_B.ct[1087] = ct[1008];
  proc_control_B.ct[1088] = ct[10] * ct[685];
  proc_control_B.ct[1089] = ct[1010];
  proc_control_B.ct[1090] = ct[1011];
  proc_control_B.ct[1091] = ct[11] * ct[656];
  proc_control_B.ct[1092] = ct[1013];
  proc_control_B.ct[1093] = ct[1015];
  proc_control_B.ct[1094] = ct[11] * ct[667];
  proc_control_B.ct[1095] = ct[1017];
  proc_control_B.ct[1096] = ct[1018];
  proc_control_B.ct[1097] = ct[11] * ct[672];
  proc_control_B.ct[1098] = ct[1020];
  proc_control_B.ct[1099] = ct[1022];
  proc_control_B.ct[1100] = ct[11] * ct[681];
  proc_control_B.ct[1101] = ct[1024];
  proc_control_B.ct[1102] = ct[12] * ct[653];
  proc_control_B.ct[1103] = ct[1026];
  proc_control_B.ct[1104] = ct[12] * ct[656];
  proc_control_B.ct[1105] = ct[1028];
  proc_control_B.ct[1106] = ct[1029];
  proc_control_B.ct[1107] = ct[12] * ct[672];
  proc_control_B.ct[1108] = ct[1032];
  proc_control_B.ct[1109] = ct[1034];
  proc_control_B.ct[1110] = ct[1035];
  proc_control_B.ct[1111] = ct[12] * ct[685];
  proc_control_B.ct[1112] = ct[1037];
  proc_control_B.ct[1113] = ct[1039];
  proc_control_B.ct[1114] = ct[1040];
  proc_control_B.ct[1115] = ct[1529] * ct[1648];
  proc_control_B.ct[1116] = ct[1559] * ct[1647];
  proc_control_B.ct[1117] = ct[1542] * ct[1649];
  proc_control_B.ct[1118] = ct[1042];
  proc_control_B.ct[1119] = ct[1529] * ct[1651];
  proc_control_B.ct[1120] = ct[1043];
  proc_control_B.ct[1121] = ct[1559] * ct[1650];
  proc_control_B.ct[1122] = ct[1542] * ct[1652];
  proc_control_B.ct[1123] = ct[1529] * ct[1653];
  proc_control_B.ct[1124] = ct[1044];
  proc_control_B.ct[1125] = ct[1559] * ct[1655];
  proc_control_B.ct[1126] = ct[1542] * ct[1656];
  proc_control_B.ct[1127] = ct[1529] * ct[1657];
  proc_control_B.ct[1128] = ct[1045];
  proc_control_B.ct[1129] = ct[1542] * ct[1658];
  proc_control_B.ct[1130] = ct[1559] * ct[1659];
  proc_control_B.ct[1131] = ct[1542] * ct[1660];
  proc_control_B.ct[1132] = ct[1529] * ct[1661];
  proc_control_B.ct[1133] = ct[1046];
  proc_control_B.ct[1134] = ct[1559] * ct[1662];
  proc_control_B.ct[1135] = ct[1542] * ct[1663];
  proc_control_B.ct[1136] = ct[1529] * ct[1666];
  proc_control_B.ct[1137] = ct[1047];
  proc_control_B.ct[1138] = ct[1559] * ct[1664];
  proc_control_B.ct[1139] = ct[1048];
  proc_control_B.ct[1140] = ct[1542] * ct[1667];
  proc_control_B.ct[1141] = ct[1529] * ct[1669];
  proc_control_B.ct[1142] = ct[1049];
  proc_control_B.ct[1143] = ct[1559] * ct[1668];
  proc_control_B.ct[1144] = ct[1052];
  proc_control_B.ct[1145] = ct[1056];
  proc_control_B.ct[1146] = ct[1059];
  proc_control_B.ct[1147] = ct[1062];
  proc_control_B.ct[1148] = ct[1064];
  proc_control_B.ct[1149] = ct[10] * ct[717];
  proc_control_B.ct[1150] = ct[1065];
  proc_control_B.ct[1151] = ct[1066];
  proc_control_B.ct[1152] = ct[1067];
  proc_control_B.ct[1153] = ct[1068];
  proc_control_B.ct[1154] = ct[1069];
  proc_control_B.ct[1155] = ct[1070];
  proc_control_B.ct[1156] = ct[10] * ct[719];
  proc_control_B.ct[1157] = ct[11] * ct[718];
  proc_control_B.ct[1158] = ct[1071];
  proc_control_B.ct[1159] = ct[1072];
  proc_control_B.ct[1160] = ct[1073];
  proc_control_B.ct[1161] = ct[12] * ct[717];
  proc_control_B.ct[1162] = ct[1074];
  proc_control_B.ct[1163] = ct[11] * ct[719];
  proc_control_B.ct[1164] = ct[12] * ct[718];
  proc_control_B.ct[1165] = ct[1075];
  proc_control_B.ct[1166] = ct[11] * ct[720];
  proc_control_B.ct[1167] = ct[1077];
  proc_control_B.ct[1168] = ct[1078];
  proc_control_B.ct[1169] = ct[1081];
  proc_control_B.ct[1170] = ct[1084];
  proc_control_B.ct[1171] = ct[1085];
  proc_control_B.ct[1172] = ct[1086];
  proc_control_B.ct[1173] = ct[1088];
  proc_control_B.ct[1174] = ct[1089];
  proc_control_B.ct[1175] = ct[1090];
  proc_control_B.ct[1176] = ct[1093];
  proc_control_B.ct[1177] = ct[10] * ct[752];
  proc_control_B.ct[1178] = ct[1094];
  proc_control_B.ct[1179] = ct[10] * ct[753];
  proc_control_B.ct[1180] = ct[1095];
  proc_control_B.ct[1181] = ct[12] * ct[720];
  proc_control_B.ct[1182] = ct[1097];
  proc_control_B.ct[1183] = ct[1112];
  proc_control_B.ct[1184] = ct[1113];
  proc_control_B.ct[1185] = ct[11] * ct[752];
  std::memcpy(&proc_control_B.ct[1186], &ct[1114], 19U * sizeof(real_T));
  proc_control_B.ct[1205] = ct[12] * ct[753];
  std::memcpy(&proc_control_B.ct[1206], &ct[1133], 43U * sizeof(real_T));
  proc_control_B.ct[1249] = ct[11] * ct[1005];
  proc_control_B.ct[1250] = ct[11] * ct[1007];
  proc_control_B.ct[1251] = ct[1176];
  proc_control_B.ct[1252] = ct[12] * ct[998];
  proc_control_B.ct[1253] = ct[12] * ct[1009];
  proc_control_B.ct[1254] = ct[12] * ct[1012];
  proc_control_B.ct[1255] = ct[12] * ct[1019];
  proc_control_B.ct[1256] = ct[11] * ct[1041];
  proc_control_B.ct[1257] = ct[1177];
  proc_control_B.ct[1258] = ct[12] * ct[1038];
  proc_control_B.ct[1259] = ct[11] * ct[1054];
  proc_control_B.ct[1260] = ct[12] * ct[1050];
  proc_control_B.ct[1261] = ct[12] * ct[1051];
  proc_control_B.ct[1262] = ct[12] * ct[1053];
  proc_control_B.ct[1263] = ct[11] * ct[1057];
  proc_control_B.ct[1264] = ct[1178];
  proc_control_B.ct[1265] = ct[11] * ct[1060];
  proc_control_B.ct[1266] = ct[12] * ct[1055];
  proc_control_B.ct[1267] = ct[12] * ct[1058];
  proc_control_B.ct[1268] = ct[12] * ct[1061];
  proc_control_B.ct[1269] = ct[12] * ct[1063];
  proc_control_B.ct[1270] = ct[1179];
  proc_control_B.ct[1271] = -ct[653];
  proc_control_B.ct[1272] = -ct[656];
  proc_control_B.ct[1273] = -ct[660];
  proc_control_B.ct[1274] = -ct[663];
  proc_control_B.ct[1275] = -ct[666];
  proc_control_B.ct[1276] = -ct[667];
  proc_control_B.ct[1277] = ct[1180];
  proc_control_B.ct[1278] = -ct[672];
  proc_control_B.ct[1279] = -ct[677];
  proc_control_B.ct[1280] = -ct[678];
  proc_control_B.ct[1281] = -ct[681];
  proc_control_B.ct[1282] = -ct[682];
  proc_control_B.ct[1283] = -ct[685];
  std::memcpy(&proc_control_B.ct[1284], &ct[1181], sizeof(real_T) << 3U);
  proc_control_B.ct[1292] = ct[29] * ct[80];
  proc_control_B.ct[1293] = ct[1189];
  proc_control_B.ct[1294] = ct[30] * ct[80];
  proc_control_B.ct[1295] = ct[1190];
  proc_control_B.ct[1296] = ct[34] * ct[80];
  proc_control_B.ct[1297] = ct[1191];
  proc_control_B.ct[1298] = ct[36] * ct[80];
  proc_control_B.ct[1299] = ct[1192];
  proc_control_B.ct[1300] = ct[35] * ct[91];
  proc_control_B.ct[1301] = ct[1193];
  proc_control_B.ct[1302] = ct[36] * ct[91];
  proc_control_B.ct[1303] = ct[1194];
  proc_control_B.ct[1304] = ct[1195];
  proc_control_B.ct[1305] = ct[1196];
  proc_control_B.ct[1306] = ct[1197];
  proc_control_B.ct[1307] = ct[8] * ct[860];
  proc_control_B.ct[1308] = ct[9] * ct[860];
  proc_control_B.ct[1309] = ct[1198];
  proc_control_B.ct[1310] = ct[1199];
  proc_control_B.ct[1311] = ct[7] * ct[862];
  proc_control_B.ct[1312] = ct[1200];
  proc_control_B.ct[1313] = ct[1201];
  proc_control_B.ct[1314] = ct[9] * ct[862];
  proc_control_B.ct[1315] = ct[1202];
  proc_control_B.ct[1316] = ct[1203];
  proc_control_B.ct[1317] = ct[7] * ct[864];
  proc_control_B.ct[1318] = ct[1204];
  proc_control_B.ct[1319] = ct[1205];
  proc_control_B.ct[1320] = ct[1206];
  proc_control_B.ct[1321] = ct[8] * ct[864];
  std::memcpy(&proc_control_B.ct[1322], &ct[1207], 65U * sizeof(real_T));
  proc_control_B.ct[1387] = -ct[800];
  proc_control_B.ct[1388] = -ct[801];
  proc_control_B.ct[1389] = -ct[802];
  proc_control_B.ct[1390] = -ct[803];
  proc_control_B.ct[1391] = -ct[804];
  proc_control_B.ct[1392] = -ct[805];
  proc_control_B.ct[1393] = ct[1272];
  proc_control_B.ct[1394] = ct[1273];
  proc_control_B.ct[1395] = ct[1274];
  proc_control_B.ct[1396] = ct[7] * ct[899];
  proc_control_B.ct[1397] = ct[9] * ct[899];
  proc_control_B.ct[1398] = ct[1275];
  proc_control_B.ct[1399] = ct[7] * ct[901];
  proc_control_B.ct[1400] = ct[9] * ct[901];
  proc_control_B.ct[1401] = ct[1276];
  proc_control_B.ct[1402] = ct[1277];
  proc_control_B.ct[1403] = ct[8] * ct[907];
  proc_control_B.ct[1404] = ct[9] * ct[907];
  proc_control_B.ct[1405] = ct[1278];
  proc_control_B.ct[1406] = ct[1279];
  proc_control_B.ct[1407] = ct[8] * ct[911];
  proc_control_B.ct[1408] = ct[9] * ct[911];
  proc_control_B.ct[1409] = ct[1280];
  proc_control_B.ct[1410] = ct[1281];
  proc_control_B.ct[1411] = ct[1282];
  proc_control_B.ct[1412] = ct[7] * ct[919];
  proc_control_B.ct[1413] = ct[9] * ct[918];
  proc_control_B.ct[1414] = ct[1283];
  proc_control_B.ct[1415] = ct[7] * ct[922];
  proc_control_B.ct[1416] = ct[1284];
  proc_control_B.ct[1417] = ct[9] * ct[921];
  proc_control_B.ct[1418] = ct[1285];
  proc_control_B.ct[1419] = ct[8] * ct[926];
  proc_control_B.ct[1420] = ct[1286];
  proc_control_B.ct[1421] = ct[9] * ct[926];
  proc_control_B.ct[1422] = ct[8] * ct[930];
  proc_control_B.ct[1423] = ct[1287];
  proc_control_B.ct[1424] = ct[9] * ct[930];
  proc_control_B.ct[1425] = ct[1288];
  proc_control_B.ct[1426] = ct[1289];
  proc_control_B.ct[1427] = ct[1290];
  proc_control_B.ct[1428] = ct[1291];
  proc_control_B.ct[1429] = ct[8] * ct[943];
  proc_control_B.ct[1430] = ct[1292];
  proc_control_B.ct[1431] = ct[9] * ct[945];
  proc_control_B.ct[1432] = ct[9] * ct[946];
  proc_control_B.ct[1433] = ct[1293];
  proc_control_B.ct[1434] = ct[9] * ct[947];
  proc_control_B.ct[1435] = ct[8] * ct[949];
  proc_control_B.ct[1436] = ct[1294];
  proc_control_B.ct[1437] = ct[9] * ct[950];
  proc_control_B.ct[1438] = ct[1295];
  proc_control_B.ct[1439] = ct[9] * ct[952];
  proc_control_B.ct[1440] = ct[1296];
  proc_control_B.ct[1441] = ct[9] * ct[953];
  proc_control_B.ct[1442] = ct[1297];
  proc_control_B.ct[1443] = -ct[819];
  proc_control_B.ct[1444] = -ct[820];
  proc_control_B.ct[1445] = ct[1298];
  proc_control_B.ct[1446] = -ct[824];
  proc_control_B.ct[1447] = -ct[825];
  proc_control_B.ct[1448] = -ct[827];
  proc_control_B.ct[1449] = ct[1299];
  proc_control_B.ct[1450] = -ct[828];
  proc_control_B.ct[1451] = ct[1300];
  proc_control_B.ct[1452] = -ct[831];
  proc_control_B.ct[1453] = -ct[832];
  proc_control_B.ct[1454] = -ct[833];
  std::memcpy(&proc_control_B.ct[1455], &ct[1301], 13U * sizeof(real_T));
  proc_control_B.ct[1468] = ct[1542] * ct[1911];
  proc_control_B.ct[1469] = ct[1314];
  proc_control_B.ct[1470] = ct[1559] * ct[1911];
  proc_control_B.ct[1471] = ct[1315];
  proc_control_B.ct[1472] = ct[1542] * ct[1915];
  proc_control_B.ct[1473] = ct[1316];
  proc_control_B.ct[1474] = ct[1559] * ct[1920];
  proc_control_B.ct[1475] = ct[1542] * ct[1926];
  proc_control_B.ct[1476] = ct[1542] * ct[1929];
  proc_control_B.ct[1477] = ct[1317];
  proc_control_B.ct[1478] = ct[1559] * ct[1931];
  proc_control_B.ct[1479] = ct[1318];
  proc_control_B.ct[1480] = ct[1559] * ct[1934];
  proc_control_B.ct[1481] = ct[1559] * ct[1940];
  proc_control_B.ct[1482] = ct[1319];
  proc_control_B.ct[1483] = ct[1559] * ct[1943];
  proc_control_B.ct[1484] = ct[1559] * ct[1944];
  proc_control_B.ct[1485] = ct[1320];
  proc_control_B.ct[1486] = ct[1559] * ct[1949];
  proc_control_B.ct[1487] = ct[1321];
  proc_control_B.ct[1488] = ct[24] * ct[1542];
  proc_control_B.ct[1489] = ct[24] * ct[1559];
  proc_control_B.ct[1490] = ct[29] * ct[1542];
  proc_control_B.ct[1491] = ct[1322];
  proc_control_B.ct[1492] = ct[30] * ct[1559];
  proc_control_B.ct[1493] = ct[34] * ct[1559];
  proc_control_B.ct[1494] = ct[35] * ct[1559];
  proc_control_B.ct[1495] = ct[1323];
  proc_control_B.ct[1496] = ct[1324];
  proc_control_B.ct[1497] = ct[1325];
  proc_control_B.ct[1498] = ct[1326];
  proc_control_B.ct[1499] = ct[1327];
  proc_control_B.ct[1500] = ct[1328];
  proc_control_B.ct[1501] = ct[1329];
  proc_control_B.ct[1502] = -ct[998];
  proc_control_B.ct[1503] = -ct[999];
  proc_control_B.ct_tmp_im = ct[10] * ct[1529];
  proc_control_B.ct[1504] = proc_control_B.ct_tmp_im * ct[402];
  proc_control_B.ct[1505] = -ct[1001];
  proc_control_B.ct[1506] = -ct[1005];
  proc_control_B.ct[1507] = proc_control_B.ct_tmp_im * ct[407];
  proc_control_B.ct[1508] = -ct[1007];
  proc_control_B.ct[1509] = ct[10] * ct[1542] * ct[411];
  proc_control_B.ct[1510] = -ct[1009];
  proc_control_B.ct[1511] = ct[10] * ct[1559] * ct[411];
  proc_control_B.ct[1512] = -ct[1012];
  proc_control_B.ct_tmp_im = ct[11] * ct[1542];
  proc_control_B.ct[1513] = proc_control_B.ct_tmp_im * ct[402];
  proc_control_B.ct[1514] = -ct[1014];
  proc_control_B.ct[1515] = -ct[1016];
  proc_control_B.ct[1516] = ct[11] * ct[1529] * ct[407];
  proc_control_B.ct[1517] = -ct[1019];
  proc_control_B.ct[1518] = ct[11] * ct[1559] * ct[407];
  proc_control_B.ct[1519] = -ct[1021];
  proc_control_B.ct[1520] = -ct[1023];
  proc_control_B.ct[1521] = ct[1330];
  proc_control_B.ct[1522] = proc_control_B.ct_tmp_im * ct[411];
  proc_control_B.ct[1523] = -ct[1025];
  proc_control_B.ct[1524] = ct[12] * ct[1529] * ct[402];
  proc_control_B.ct[1525] = -ct[1027];
  proc_control_B.ct[1526] = ct[12] * ct[1542] * ct[402];
  proc_control_B.ct[1527] = -ct[1030];
  proc_control_B.ct[1528] = -ct[1031];
  proc_control_B.ct_tmp_im = ct[12] * ct[1559];
  proc_control_B.ct[1529] = proc_control_B.ct_tmp_im * ct[407];
  proc_control_B.ct[1530] = -ct[1033];
  proc_control_B.ct[1531] = -ct[1036];
  proc_control_B.ct[1532] = ct[1331];
  proc_control_B.ct[1533] = proc_control_B.ct_tmp_im * ct[411];
  std::memcpy(&proc_control_B.ct[1534], &ct[1332], 35U * sizeof(real_T));
  proc_control_B.ct[1569] = ct[9] * ct[1195];
  std::memcpy(&proc_control_B.ct[1570], &ct[1367], 18U * sizeof(real_T));
  proc_control_B.ct[1588] = ct[9] * ct[1198];
  proc_control_B.ct[1589] = ct[8] * ct[1202];
  proc_control_B.ct[1590] = -ct[1076];
  proc_control_B.ct[1591] = -ct[1079];
  proc_control_B.ct[1592] = -ct[1080];
  proc_control_B.ct[1593] = -ct[1082];
  proc_control_B.ct[1594] = -ct[1083];
  proc_control_B.ct[1595] = ct[1385];
  proc_control_B.ct[1596] = ct[1386];
  proc_control_B.ct[1597] = ct[1387];
  proc_control_B.ct[1598] = -ct[1087];
  proc_control_B.ct[1599] = ct[1388];
  proc_control_B.ct[1600] = ct[1389];
  proc_control_B.ct[1601] = -ct[1091];
  proc_control_B.ct[1602] = -ct[1092];
  proc_control_B.ct[1603] = -ct[1096];
  proc_control_B.ct[1604] = -ct[1098];
  proc_control_B.ct[1605] = ct[1390];
  proc_control_B.ct[1606] = -ct[1099];
  proc_control_B.ct[1607] = ct[1391];
  proc_control_B.ct[1608] = -ct[1100];
  proc_control_B.ct[1609] = -ct[1101];
  proc_control_B.ct[1610] = -ct[1102];
  proc_control_B.ct[1611] = ct[1392];
  proc_control_B.ct[1612] = -ct[1103];
  proc_control_B.ct[1613] = -ct[1104];
  proc_control_B.ct[1614] = ct[1393];
  proc_control_B.ct[1615] = -ct[1105];
  proc_control_B.ct[1616] = -ct[1106];
  proc_control_B.ct[1617] = ct[1394];
  proc_control_B.ct[1618] = -ct[1107];
  proc_control_B.ct[1619] = -ct[1108];
  proc_control_B.ct[1620] = -ct[1109];
  proc_control_B.ct[1621] = ct[1395];
  proc_control_B.ct[1622] = -ct[1110];
  proc_control_B.ct[1623] = -ct[1111];
  std::memcpy(&proc_control_B.ct[1624], &ct[1396], 250U * sizeof(real_T));
  proc_control_B.ct[1874] = ct[1646];
  proc_control_B.ct[1875] = ct[1648];
  proc_control_B.ct[1876] = ct[1649];
  proc_control_B.ct[1877] = ct[1650];
  proc_control_B.ct[1878] = ct[1651];
  proc_control_B.ct[1879] = ct[1653];
  proc_control_B.ct[1880] = ct[1654];
  proc_control_B.ct[1881] = ct[1656];
  proc_control_B.ct[1882] = ct[1657];
  proc_control_B.ct[1883] = ct[1659];
  proc_control_B.ct[1884] = ct[1660];
  proc_control_B.ct[1885] = ct[1662];
  proc_control_B.ct[1886] = ct[1664];
  proc_control_B.ct[1887] = ct[1665];
  proc_control_B.ct[1888] = ct[1666];
  proc_control_B.ct[1889] = ct[1667];
  proc_control_B.ct[1890] = ct[1668];
  std::memcpy(&proc_control_B.ct[1891], &ct[1670], 237U * sizeof(real_T));
  proc_control_B.ct[2128] = ct[1912];
  proc_control_B.ct[2129] = ct[1914];
  proc_control_B.ct[2130] = ct[1915];
  proc_control_B.ct[2131] = ct[1916];
  std::memcpy(&proc_control_B.ct[2132], &ct[1918], 10U * sizeof(real_T));
  proc_control_B.ct[2142] = ct[1928];
  proc_control_B.ct[2143] = ct[1930];
  proc_control_B.ct[2144] = ct[1932];
  std::memcpy(&proc_control_B.ct[2145], &ct[1934], 9U * sizeof(real_T));
  proc_control_B.ct[2154] = ct[1943];
  proc_control_B.ct[2155] = ct[1945];
  proc_control_B.ct[2156] = ct[1946];
  proc_control_B.ct[2157] = ct[1947];
  proc_control_B.ct[2158] = ct[1948];
  proc_control_B.ct[2159] = ct[1950];
  proc_control_B.ct[2160] = ct[1952];
  proc_control_B.ct[2161] = ct[1953];
  proc_control_B.ct[2162] = ct[1954];
  proc_control_B.ct[2163] = ct[1956];
  proc_control_B.ct[2164] = ct[1957];
  proc_control_B.ct[2165] = ct[1958];
  proc_control_ft_6(proc_control_B.ct, Anq);
}

void proc_control::proc_control_ft_4(const real_T ct[1640], real_T Anq[169])
{
  proc_control_B.ct_b[0] = ct[7];
  proc_control_B.ct_b[1] = ct[8];
  proc_control_B.ct_b[2] = ct[9];
  proc_control_B.ct_b[3] = ct[11];
  proc_control_B.ct_b[4] = ct[12];
  proc_control_B.ct_b[5] = ct[13];
  std::memcpy(&proc_control_B.ct_b[6], &ct[17], 25U * sizeof(real_T));
  proc_control_B.ct_b[31] = ct[42];
  std::memcpy(&proc_control_B.ct_b[32], &ct[44], 38U * sizeof(real_T));
  proc_control_B.ct_b[70] = ct[82];
  proc_control_B.ct_b[71] = ct[84];
  proc_control_B.ct_b[72] = ct[85];
  proc_control_B.ct_b[73] = ct[86];
  proc_control_B.ct_b[74] = ct[19] * ct[1169];
  proc_control_B.ct_b[75] = ct[19] * ct[1170];
  proc_control_B.ct_b[76] = ct[19] * ct[1173];
  proc_control_B.ct_b[77] = ct[19] * ct[1175];
  proc_control_B.ct_b[78] = ct[20] * ct[1173];
  proc_control_B.ct_b[79] = ct[19] * ct[1177];
  proc_control_B.ct_b[80] = ct[87];
  proc_control_B.ct_b[81] = ct[20] * ct[1175];
  proc_control_B.ct_b[82] = ct[19] * ct[1179];
  proc_control_B.ct_b[83] = ct[20] * ct[1176];
  proc_control_B.ct_b[84] = ct[20] * ct[1177];
  proc_control_B.ct_b[85] = ct[20] * ct[1178];
  proc_control_B.ct_b[86] = ct[20] * ct[1179];
  proc_control_B.ct_b[87] = ct[11] * ct[1313];
  proc_control_B.ct_b[88] = ct[11] * ct[1314];
  proc_control_B.ct_b[89] = ct[20] * ct[1181];
  proc_control_B.ct_b[90] = ct[9] * ct[1318];
  proc_control_B.ct_b[91] = ct[88];
  proc_control_B.ct_b[92] = ct[10] * ct[1317];
  proc_control_B.ct_b[93] = ct[20] * ct[1183];
  proc_control_B.ct_b[94] = ct[19] * ct[1186];
  proc_control_B.ct_b[95] = ct[19] * ct[1187];
  proc_control_B.ct_b[96] = ct[20] * ct[1186];
  proc_control_B.ct_b[97] = ct[20] * ct[1187];
  proc_control_B.ct_b[98] = ct[20] * ct[1188];
  proc_control_B.ct_b[99] = ct[20] * ct[1189];
  proc_control_B.ct_b[100] = ct[20] * ct[1190];
  proc_control_B.ct_b[101] = ct[19] * ct[1194];
  proc_control_B.ct_b[102] = ct[89];
  proc_control_B.ct_b[103] = ct[20] * ct[1191];
  proc_control_B.ct_b[104] = ct[19] * ct[1195];
  proc_control_B.ct_b[105] = ct[13] * ct[1313];
  proc_control_B.ct_b[106] = ct[12] * ct[1316];
  proc_control_B.ct_b[107] = ct[14] * ct[1312];
  proc_control_B.ct_b[108] = ct[20] * ct[1194];
  proc_control_B.ct_b[109] = ct[13] * ct[1315];
  proc_control_B.ct_b[110] = ct[20] * ct[1195];
  proc_control_B.ct_b[111] = ct[20] * ct[1197];
  proc_control_B.ct_b[112] = ct[20] * ct[1199];
  proc_control_B.ct_b[113] = ct[90];
  proc_control_B.ct_b[114] = ct[19] * ct[1203];
  proc_control_B.ct_b[115] = ct[19] * ct[1204];
  proc_control_B.ct_b[116] = ct[20] * ct[1203];
  proc_control_B.ct_b[117] = ct[19] * ct[1206];
  proc_control_B.ct_b[118] = ct[20] * ct[1204];
  proc_control_B.ct_b[119] = ct[19] * ct[1208];
  proc_control_B.ct_b[120] = ct[13] * ct[1321];
  proc_control_B.ct_b[121] = ct[20] * ct[1205];
  proc_control_B.ct_b[122] = ct[14] * ct[1320];
  proc_control_B.ct_b[123] = ct[20] * ct[1206];
  proc_control_B.ct_b[124] = ct[12] * ct[1323];
  proc_control_B.ct_b[125] = ct[20] * ct[1207];
  proc_control_B.ct_b[126] = ct[12] * ct[1324];
  proc_control_B.ct_b[127] = ct[20] * ct[1208];
  proc_control_B.ct_b[128] = ct[20] * ct[1210];
  proc_control_B.ct_b[129] = ct[20] * ct[1212];
  proc_control_B.ct_b[130] = ct[20] * ct[1214];
  proc_control_B.ct_b[131] = ct[20] * ct[1216];
  proc_control_B.ct_b[132] = ct[92];
  proc_control_B.ct_b[133] = ct[94];
  proc_control_B.ct_b[134] = ct[95];
  proc_control_B.ct_b[135] = ct[96];
  proc_control_B.ct_b[136] = ct[97];
  proc_control_B.ct_b[137] = ct[19] * ct[1221];
  proc_control_B.ct_b[138] = ct[19] * ct[1223];
  proc_control_B.ct_b[139] = ct[20] * ct[1223];
  proc_control_B.ct_b[140] = ct[20] * ct[1224];
  proc_control_B.ct_b[141] = ct[15] * ct[1326];
  proc_control_B.ct_b[142] = ct[19] * ct[1226];
  proc_control_B.ct_b[143] = ct[20] * ct[1226];
  proc_control_B.ct_b[144] = ct[20] * ct[1227];
  proc_control_B.ct_b[145] = ct[20] * ct[1228];
  proc_control_B.ct_b[146] = ct[15] * ct[1334];
  proc_control_B.ct_b[147] = ct[99];
  proc_control_B.ct_b[148] = ct[101];
  proc_control_B.ct_b[149] = ct[102];
  proc_control_B.ct_b[150] = ct[19] * ct[1231];
  proc_control_B.ct_b[151] = ct[19] * ct[1233];
  proc_control_B.ct_b[152] = ct[20] * ct[1233];
  proc_control_B.ct_b[153] = ct[16] * ct[1317];
  proc_control_B.ct_b[154] = ct[20] * ct[1234];
  proc_control_B.ct_b[155] = ct[19] * ct[1236];
  proc_control_B.ct_b[156] = ct[20] * ct[1236];
  proc_control_B.ct_b[157] = ct[16] * ct[1328];
  proc_control_B.ct_b[158] = ct[20] * ct[1237];
  proc_control_B.ct_b[159] = ct[20] * ct[1239];
  proc_control_B.ct_b[160] = ct[104];
  proc_control_B.ct_b[161] = ct[105];
  proc_control_B.ct_b[162] = ct[106];
  proc_control_B.ct_b[163] = ct[107];
  proc_control_B.ct_b[164] = ct[108];
  std::memcpy(&proc_control_B.ct_b[165], &ct[110], 10U * sizeof(real_T));
  proc_control_B.ct_b[175] = ct[20] * ct[1242];
  proc_control_B.ct_b[176] = ct[19] * ct[1243];
  proc_control_B.ct_b[177] = ct[17] * ct[1312];
  proc_control_B.ct_b[178] = ct[20] * ct[1243];
  proc_control_B.ct_b[179] = ct[20] * ct[1245];
  proc_control_B.ct_b[180] = ct[19] * ct[1247];
  proc_control_B.ct_b[181] = ct[17] * ct[1320];
  proc_control_B.ct_b[182] = ct[20] * ct[1247];
  proc_control_B.ct_b[183] = ct[20] * ct[1248];
  proc_control_B.ct_b[184] = ct[120];
  proc_control_B.ct_b[185] = ct[20] * ct[1250];
  std::memcpy(&proc_control_B.ct_b[186], &ct[121], 116U * sizeof(real_T));
  proc_control_B.ct_b[302] = ct[18] * ct[1313];
  proc_control_B.ct_b[303] = ct[20] * ct[1312];
  proc_control_B.ct_b[304] = ct[20] * ct[1315];
  proc_control_B.ct_b[305] = ct[20] * ct[1320];
  proc_control_B.ct_b[306] = ct[19] * ct[1323];
  proc_control_B.ct_b[307] = ct[20] * ct[1324];
  proc_control_B.ct_b[308] = ct[20] * ct[1327];
  proc_control_B.ct_b[309] = ct[20] * ct[1329];
  proc_control_B.ct_b[310] = ct[237];
  proc_control_B.ct_b[311] = ct[20] * ct[1333];
  std::memcpy(&proc_control_B.ct_b[312], &ct[238], 33U * sizeof(real_T));
  proc_control_B.ct_b[345] = ct[271];
  proc_control_B.ct_b[346] = ct[273];
  proc_control_B.ct_b[347] = ct[274];
  proc_control_B.ct_b[348] = ct[275];
  proc_control_B.ct_b[349] = ct[276];
  proc_control_B.ct_b[350] = ct[19] * ct[1370];
  proc_control_B.ct_b[351] = ct[277];
  proc_control_B.ct_b[352] = ct[278];
  proc_control_B.ct_b[353] = ct[20] * ct[1373];
  proc_control_B.ct_b[354] = ct[279];
  proc_control_B.ct_b[355] = ct[280];
  proc_control_B.ct_b[356] = ct[281];
  proc_control_B.ct_b[357] = ct[282];
  proc_control_B.ct_b[358] = ct[283];
  proc_control_B.ct_b[359] = ct[284];
  proc_control_B.ct_b[360] = ct[285];
  proc_control_B.ct_b[361] = ct[286];
  std::memcpy(&proc_control_B.ct_b[362], &ct[288], 24U * sizeof(real_T));
  proc_control_B.ct_b[386] = ct[312];
  proc_control_B.ct_b[387] = ct[315];
  proc_control_B.ct_b[388] = ct[316];
  proc_control_B.ct_b[389] = ct[317];
  std::memcpy(&proc_control_B.ct_b[390], &ct[319], 68U * sizeof(real_T));
  proc_control_B.ct_b[458] = -ct[1153];
  proc_control_B.ct_b[459] = -ct[1154];
  proc_control_B.ct_b[460] = -ct[1158];
  proc_control_B.ct_b[461] = ct[387];
  proc_control_B.ct_b[462] = ct[388];
  proc_control_B.ct_b[463] = ct[389];
  proc_control_B.ct_b[464] = ct[390];
  proc_control_B.ct_b[465] = ct[391];
  proc_control_B.ct_b[466] = ct[392];
  proc_control_B.ct_b[467] = ct[393];
  proc_control_B.ct_b[468] = -ct[1169];
  proc_control_B.ct_b[469] = -ct[1172];
  proc_control_B.ct_b[470] = -ct[1175];
  proc_control_B.ct_b[471] = -ct[1176];
  proc_control_B.ct_b[472] = -ct[1179];
  proc_control_B.ct_b[473] = -ct[1180];
  proc_control_B.ct_b[474] = -ct[1183];
  proc_control_B.ct_b[475] = -ct[1185];
  proc_control_B.ct_b[476] = -ct[1187];
  proc_control_B.ct_b[477] = ct[394];
  proc_control_B.ct_b[478] = ct[395];
  proc_control_B.ct_b[479] = -ct[1188];
  proc_control_B.ct_b[480] = -ct[1189];
  proc_control_B.ct_b[481] = -ct[1192];
  proc_control_B.ct_b[482] = -ct[1194];
  proc_control_B.ct_b[483] = -ct[1196];
  proc_control_B.ct_b[484] = -ct[1197];
  proc_control_B.ct_b[485] = -ct[1200];
  proc_control_B.ct_b[486] = -ct[1201];
  proc_control_B.ct_b[487] = -ct[1204];
  proc_control_B.ct_b[488] = -ct[1206];
  proc_control_B.ct_b[489] = -ct[1207];
  proc_control_B.ct_b[490] = -ct[1210];
  proc_control_B.ct_b[491] = -ct[1211];
  proc_control_B.ct_b[492] = -ct[1213];
  proc_control_B.ct_b[493] = -ct[1214];
  proc_control_B.ct_b[494] = -ct[1215];
  proc_control_B.ct_b[495] = -ct[1217];
  std::memcpy(&proc_control_B.ct_b[496], &ct[396], 41U * sizeof(real_T));
  proc_control_B.ct_b[537] = -ct[1312];
  proc_control_B.ct_b[538] = -ct[1313];
  proc_control_B.ct_b[539] = -ct[1317];
  proc_control_B.ct_b[540] = -ct[1320];
  proc_control_B.ct_b[541] = -ct[1323];
  proc_control_B.ct_b[542] = -ct[1326];
  proc_control_B.ct_b[543] = -ct[1328];
  proc_control_B.ct_b[544] = -ct[1333];
  proc_control_B.ct_b[545] = -ct[1334];
  std::memcpy(&proc_control_B.ct_b[546], &ct[437], 36U * sizeof(real_T));
  proc_control_B.ct_b[582] = ct[473];
  std::memcpy(&proc_control_B.ct_b[583], &ct[475], 72U * sizeof(real_T));
  proc_control_B.ct_b[655] = ct[10] * ct[1594];
  proc_control_B.ct_b[656] = ct[547];
  proc_control_B.ct_b[657] = ct[548];
  proc_control_B.ct_b[658] = ct[9] * ct[1598];
  proc_control_B.ct_b[659] = ct[549];
  proc_control_B.ct_b[660] = ct[550];
  proc_control_B.ct_b[661] = ct[10] * ct[1596];
  proc_control_B.ct_b[662] = ct[9] * ct[1602];
  proc_control_B.ct_b[663] = ct[551];
  proc_control_B.ct_b[664] = ct[552];
  proc_control_B.ct_b[665] = ct[553];
  proc_control_B.ct_b[666] = ct[554];
  proc_control_B.ct_b[667] = ct[555];
  proc_control_B.ct_b[668] = ct[556];
  proc_control_B.ct_b[669] = ct[557];
  proc_control_B.ct_b[670] = ct[14] * ct[1594];
  proc_control_B.ct_b[671] = ct[12] * ct[1603];
  proc_control_B.ct_b[672] = ct[558];
  proc_control_B.ct_b[673] = ct[559];
  proc_control_B.ct_b[674] = ct[14] * ct[1600];
  proc_control_B.ct_b[675] = ct[560];
  proc_control_B.ct_b[676] = ct[12] * ct[1606];
  proc_control_B.ct_b[677] = ct[561];
  proc_control_B.ct_b[678] = ct[562];
  proc_control_B.ct_b[679] = ct[563];
  proc_control_B.ct_b[680] = ct[564];
  proc_control_B.ct_b[681] = ct[565];
  proc_control_B.ct_b[682] = ct[566];
  proc_control_B.ct_b[683] = ct[567];
  proc_control_B.ct_b[684] = ct[14] * ct[1614];
  proc_control_B.ct_b[685] = ct[568];
  proc_control_B.ct_b[686] = ct[13] * ct[1617];
  proc_control_B.ct_b[687] = ct[569];
  proc_control_B.ct_b[688] = ct[14] * ct[1616];
  proc_control_B.ct_b[689] = ct[13] * ct[1620];
  proc_control_B.ct_b[690] = ct[570];
  proc_control_B.ct_b[691] = ct[571];
  proc_control_B.ct_b[692] = ct[15] * ct[1612];
  proc_control_B.ct_b[693] = ct[572];
  proc_control_B.ct_b[694] = ct[15] * ct[1614];
  proc_control_B.ct_b[695] = ct[573];
  proc_control_B.ct_b[696] = ct[15] * ct[1626];
  proc_control_B.ct_b[697] = ct[574];
  proc_control_B.ct_b[698] = ct[15] * ct[1633];
  proc_control_B.ct_b[699] = ct[575];
  proc_control_B.ct_b[700] = ct[576];
  proc_control_B.ct_b[701] = ct[16] * ct[1594];
  proc_control_B.ct_b[702] = ct[577];
  proc_control_B.ct_b[703] = ct[16] * ct[1596];
  proc_control_B.ct_b[704] = ct[578];
  proc_control_B.ct_b[705] = ct[16] * ct[1631];
  proc_control_B.ct_b[706] = ct[579];
  proc_control_B.ct_b[707] = ct[16] * ct[1633];
  proc_control_B.ct_b[708] = ct[580];
  proc_control_B.ct_b[709] = ct[17] * ct[1594];
  proc_control_B.ct_b[710] = ct[581];
  proc_control_B.ct_b[711] = ct[17] * ct[1600];
  proc_control_B.ct_b[712] = ct[582];
  proc_control_B.ct_b[713] = ct[17] * ct[1614];
  proc_control_B.ct_b[714] = ct[583];
  proc_control_B.ct_b[715] = ct[17] * ct[1616];
  proc_control_B.ct_b[716] = ct[584];
  proc_control_B.ct_b[717] = ct[585];
  proc_control_B.ct_b[718] = ct[586];
  proc_control_B.ct_b[719] = ct[587];
  proc_control_B.ct_b[720] = ct[588];
  proc_control_B.ct_b[721] = ct[18] * ct[1596];
  proc_control_B.ct_b[722] = ct[19] * ct[1594];
  proc_control_B.ct_b[723] = ct[18] * ct[1600];
  proc_control_B.ct_b[724] = ct[20] * ct[1594];
  std::memcpy(&proc_control_B.ct_b[725], &ct[589], 29U * sizeof(real_T));
  proc_control_B.ct_b[754] = ct[618];
  proc_control_B.ct_b[755] = ct[620];
  proc_control_B.ct_b[756] = ct[624];
  proc_control_B.ct_b[757] = ct[626];
  proc_control_B.ct_b[758] = ct[627];
  proc_control_B.ct_b[759] = ct[628];
  proc_control_B.ct_b[760] = ct[629];
  proc_control_B.ct_b[761] = ct[630];
  std::memcpy(&proc_control_B.ct_b[762], &ct[633], 9U * sizeof(real_T));
  proc_control_B.ct_b[771] = ct[645];
  proc_control_B.ct_b[772] = ct[647];
  proc_control_B.ct_b[773] = ct[649];
  proc_control_B.ct_b[774] = ct[653];
  proc_control_B.ct_b[775] = ct[654];
  proc_control_B.ct_b[776] = ct[656];
  proc_control_B.ct_b[777] = ct[657];
  proc_control_B.ct_b[778] = ct[658];
  proc_control_B.ct_b[779] = ct[659];
  proc_control_B.ct_b[780] = ct[660];
  proc_control_B.ct_b[781] = ct[661];
  proc_control_B.ct_b[782] = ct[662];
  proc_control_B.ct_b[783] = ct[665];
  proc_control_B.ct_b[784] = ct[666];
  proc_control_B.ct_b[785] = ct[667];
  proc_control_B.ct_b[786] = ct[668];
  proc_control_B.ct_b[787] = ct[669];
  proc_control_B.ct_b[788] = ct[670];
  proc_control_B.ct_b[789] = ct[674];
  proc_control_B.ct_b[790] = ct[676];
  proc_control_B.ct_b[791] = ct[678];
  proc_control_B.ct_b[792] = ct[679];
  proc_control_B.ct_b[793] = ct[680];
  proc_control_B.ct_b[794] = ct[681];
  proc_control_B.ct_b[795] = ct[682];
  proc_control_B.ct_b[796] = ct[690];
  proc_control_B.ct_b[797] = ct[691];
  std::memcpy(&proc_control_B.ct_b[798], &ct[697], 40U * sizeof(real_T));
  proc_control_B.ct_b[838] = ct[738];
  proc_control_B.ct_b[839] = ct[740];
  proc_control_B.ct_b[840] = ct[741];
  proc_control_B.ct_b[841] = ct[742];
  proc_control_B.ct_b[842] = ct[743];
  proc_control_B.ct_b[843] = ct[744];
  proc_control_B.ct_b[844] = ct[745];
  proc_control_B.ct_b[845] = ct[747];
  proc_control_B.ct_b[846] = ct[749];
  proc_control_B.ct_b[847] = ct[751];
  proc_control_B.ct_b[848] = ct[752];
  proc_control_B.ct_b[849] = ct[753];
  proc_control_B.ct_b[850] = ct[754];
  proc_control_B.ct_b[851] = ct[755];
  proc_control_B.ct_b[852] = ct[756];
  proc_control_B.ct_b[853] = ct[757];
  proc_control_B.ct_b[854] = ct[759];
  std::memcpy(&proc_control_B.ct_b[855], &ct[761], 25U * sizeof(real_T));
  proc_control_B.ct_b[880] = ct[786];
  std::memcpy(&proc_control_B.ct_b[881], &ct[788], 99U * sizeof(real_T));
  proc_control_B.ct_b[980] = -ct[314];
  proc_control_B.ct_b[981] = -ct[316];
  proc_control_B.ct_b[982] = -ct[317];
  proc_control_B.ct_b[983] = -ct[318];
  proc_control_B.ct_b[984] = -ct[320];
  proc_control_B.ct_b[985] = ct[887];
  proc_control_B.ct_b[986] = -ct[323];
  proc_control_B.ct_b[987] = -ct[324];
  std::memcpy(&proc_control_B.ct_b[988], &ct[888], 9U * sizeof(real_T));
  proc_control_B.ct_b[997] = ct[1156] * ct[1252];
  proc_control_B.ct_b[998] = ct[1156] * ct[1253];
  proc_control_B.ct_b[999] = ct[1156] * ct[1254];
  proc_control_B.ct_b[1000] = ct[1156] * ct[1255];
  proc_control_B.ct_b[1001] = ct[1156] * ct[1257];
  proc_control_B.ct_b[1002] = ct[1156] * ct[1258];
  proc_control_B.ct_b[1003] = ct[1156] * ct[1259];
  proc_control_B.ct_b[1004] = ct[897];
  proc_control_B.ct_b[1005] = ct[1156] * ct[1260];
  proc_control_B.ct_b[1006] = ct[1171] * ct[1266];
  proc_control_B.ct_b[1007] = ct[1171] * ct[1267];
  proc_control_B.ct_b[1008] = ct[1202] * ct[1266];
  proc_control_B.ct_b[1009] = ct[1202] * ct[1267];
  proc_control_B.ct_b[1010] = ct[898];
  proc_control_B.ct_b[1011] = ct[1171] * ct[1270];
  proc_control_B.ct_b[1012] = ct[1171] * ct[1271];
  proc_control_B.ct_b[1013] = ct[1171] * ct[1274];
  proc_control_B.ct_b[1014] = ct[1171] * ct[1275];
  proc_control_B.ct_b[1015] = ct[1156] * ct[1278];
  proc_control_B.ct_b[1016] = ct[1156] * ct[1280];
  proc_control_B.ct_b[1017] = ct[899];
  proc_control_B.ct_b[1018] = ct[1202] * ct[1278];
  proc_control_B.ct_b[1019] = ct[1202] * ct[1280];
  proc_control_B.ct_b[1020] = ct[1171] * ct[1283];
  proc_control_B.ct_b[1021] = ct[1171] * ct[1284];
  proc_control_B.ct_b[1022] = ct[1171] * ct[1287];
  proc_control_B.ct_b[1023] = ct[1171] * ct[1288];
  proc_control_B.ct_b[1024] = ct[1156] * ct[1291];
  proc_control_B.ct_b[1025] = ct[1156] * ct[1292];
  proc_control_B.ct_b[1026] = ct[1171] * ct[1291];
  proc_control_B.ct_b[1027] = ct[1171] * ct[1292];
  proc_control_B.ct_b[1028] = ct[1202] * ct[1298];
  proc_control_B.ct_b[1029] = ct[901];
  proc_control_B.ct_b[1030] = ct[1202] * ct[1299];
  proc_control_B.ct_b[1031] = ct[1202] * ct[1300];
  proc_control_B.ct_b[1032] = ct[1202] * ct[1301];
  proc_control_B.ct_b[1033] = ct[1202] * ct[1303];
  proc_control_B.ct_b[1034] = ct[1202] * ct[1304];
  proc_control_B.ct_b[1035] = ct[1202] * ct[1305];
  proc_control_B.ct_b[1036] = ct[1202] * ct[1306];
  proc_control_B.ct_b[1037] = ct[902];
  proc_control_B.ct_b[1038] = ct[1156] * ct[1307];
  proc_control_B.ct_b[1039] = ct[1156] * ct[1309];
  proc_control_B.ct_b[1040] = ct[1156] * ct[1310];
  proc_control_B.ct_b[1041] = ct[1156] * ct[1311];
  proc_control_B.ct_b[1042] = ct[903];
  proc_control_B.ct_b[1043] = ct[7] * ct[680];
  proc_control_B.ct_b[1044] = ct[8] * ct[681];
  proc_control_B.ct_b[1045] = ct[9] * ct[680];
  proc_control_B.ct_b[1046] = ct[11] * ct[682];
  proc_control_B.ct_b[1047] = ct[12] * ct[681];
  proc_control_B.ct_b[1048] = ct[904];
  proc_control_B.ct_b[1049] = ct[13] * ct[682];
  proc_control_B.ct_b[1050] = ct[1171] * ct[1335];
  proc_control_B.ct_b[1051] = ct[1202] * ct[1338];
  proc_control_B.ct_b[1052] = ct[905];
  proc_control_B.ct_b[1053] = ct[1156] * ct[1341];
  proc_control_B.ct_b[1054] = ct[1171] * ct[1342];
  proc_control_B.ct_b[1055] = ct[1202] * ct[1342];
  proc_control_B.ct_b[1056] = ct[906];
  proc_control_B.ct_b[1057] = ct[1156] * ct[1348];
  proc_control_B.ct_b[1058] = ct[1171] * ct[1347];
  proc_control_B.ct_b[1059] = ct[1171] * ct[1351];
  proc_control_B.ct_b[1060] = ct[1171] * ct[1353];
  proc_control_B.ct_b[1061] = ct[1202] * ct[1353];
  proc_control_B.ct_b[1062] = ct[1171] * ct[1354];
  proc_control_B.ct_b[1063] = ct[1202] * ct[1358];
  proc_control_B.ct_b[1064] = ct[1156] * ct[1364];
  proc_control_B.ct_b[1065] = ct[907];
  proc_control_B.ct_b[1066] = ct[908];
  proc_control_B.ct_b[1067] = ct[1202] * ct[1366];
  proc_control_B.ct_b[1068] = ct[1202] * ct[1367];
  proc_control_B.ct_b[1069] = ct[1156] * ct[1372];
  proc_control_B.ct_b[1070] = ct[1171] * ct[1371];
  proc_control_B.ct_b[1071] = ct[909];
  proc_control_B.ct_b[1072] = ct[1156] * ct[1374];
  proc_control_B.ct_b[1073] = ct[1156] * ct[1375];
  proc_control_B.ct_b[1074] = ct[1171] * ct[1374];
  proc_control_B.ct_b[1075] = ct[1202] * ct[1375];
  proc_control_B.ct_b[1076] = ct[19] * ct[620];
  proc_control_B.ct_b[1077] = ct[20] * ct[620];
  proc_control_B.ct_b[1078] = ct[19] * ct[622];
  proc_control_B.ct_b[1079] = ct[20] * ct[622];
  proc_control_B.ct_b[1080] = ct[19] * ct[624];
  proc_control_B.ct_b[1081] = ct[20] * ct[624];
  proc_control_B.ct_b[1082] = ct[18] * ct[627];
  proc_control_B.ct_b[1083] = ct[19] * ct[626];
  proc_control_B.ct_b[1084] = ct[18] * ct[629];
  proc_control_B.ct_b[1085] = ct[18] * ct[630];
  proc_control_B.ct_b[1086] = ct[19] * ct[631];
  proc_control_B.ct_b[1087] = ct[20] * ct[631];
  proc_control_B.ct_b[1088] = ct[18] * ct[633];
  proc_control_B.ct_b[1089] = ct[18] * ct[635];
  proc_control_B.ct_b[1090] = ct[914];
  proc_control_B.ct_b[1091] = ct[18] * ct[637];
  proc_control_B.ct_b[1092] = ct[20] * ct[634];
  proc_control_B.ct_b[1093] = ct[1171] * ct[1376];
  proc_control_B.ct_b[1094] = ct[1202] * ct[1376];
  proc_control_B.ct_b[1095] = ct[1202] * ct[1377];
  proc_control_B.ct_b[1096] = ct[18] * ct[639];
  proc_control_B.ct_b[1097] = ct[915];
  proc_control_B.ct_b[1098] = ct[19] * ct[638];
  proc_control_B.ct_b[1099] = ct[18] * ct[641];
  proc_control_B.ct_b[1100] = ct[19] * ct[642];
  proc_control_B.ct_b[1101] = ct[20] * ct[641];
  proc_control_B.ct_b[1102] = ct[19] * ct[644];
  proc_control_B.ct_b[1103] = ct[18] * ct[645];
  proc_control_B.ct_b[1104] = ct[20] * ct[645];
  proc_control_B.ct_b[1105] = ct[18] * ct[649];
  proc_control_B.ct_b[1106] = ct[20] * ct[649];
  proc_control_B.ct_b[1107] = ct[19] * ct[651];
  proc_control_B.ct_b[1108] = ct[18] * ct[653];
  proc_control_B.ct_b[1109] = ct[19] * ct[652];
  proc_control_B.ct_b[1110] = ct[20] * ct[653];
  proc_control_B.ct_b[1111] = ct[19] * ct[657];
  proc_control_B.ct_b[1112] = ct[20] * ct[656];
  proc_control_B.ct_b[1113] = ct[1171] * ct[1378];
  proc_control_B.ct_b[1114] = ct[18] * ct[661];
  proc_control_B.ct_b[1115] = ct[20] * ct[658];
  proc_control_B.ct_b[1116] = ct[20] * ct[660];
  proc_control_B.ct_b[1117] = ct[922];
  proc_control_B.ct_b[1118] = ct[20] * ct[662];
  proc_control_B.ct_b[1119] = ct[18] * ct[663];
  proc_control_B.ct_b[1120] = ct[19] * ct[663];
  proc_control_B.ct_b[1121] = ct[20] * ct[665];
  proc_control_B.ct_b[1122] = ct[20] * ct[666];
  proc_control_B.ct_b[1123] = ct[19] * ct[669];
  proc_control_B.ct_b[1124] = ct[20] * ct[668];
  proc_control_B.ct_b[1125] = ct[925];
  proc_control_B.ct_b[1126] = ct[18] * ct[670];
  proc_control_B.ct_b[1127] = ct[19] * ct[670];
  proc_control_B.ct_b[1128] = ct[18] * ct[672];
  proc_control_B.ct_b[1129] = ct[19] * ct[672];
  proc_control_B.ct_b[1130] = ct[18] * ct[674];
  proc_control_B.ct_b[1131] = ct[19] * ct[674];
  proc_control_B.ct_b[1132] = ct[1202] * ct[1379];
  proc_control_B.ct_b[1133] = ct[18] * ct[684];
  proc_control_B.ct_b[1134] = ct[19] * ct[683];
  proc_control_B.ct_b[1135] = ct[18] * ct[686];
  proc_control_B.ct_b[1136] = ct[19] * ct[685];
  proc_control_B.ct_b[1137] = ct[18] * ct[688];
  proc_control_B.ct_b[1138] = ct[20] * ct[687];
  proc_control_B.ct_b[1139] = ct[18] * ct[692];
  proc_control_B.ct_b[1140] = ct[20] * ct[689];
  proc_control_B.ct_b[1141] = ct[19] * ct[695];
  proc_control_B.ct_b[1142] = ct[20] * ct[693];
  proc_control_B.ct_b[1143] = ct[19] * ct[696];
  proc_control_B.ct_b[1144] = ct[20] * ct[694];
  proc_control_B.ct_b[1145] = ct[927];
  proc_control_B.ct_b[1146] = ct[929];
  proc_control_B.ct_b[1147] = ct[930];
  proc_control_B.ct_b[1148] = ct[931];
  proc_control_B.ct_b[1149] = ct[933];
  proc_control_B.ct_b[1150] = ct[936];
  proc_control_B.ct_b[1151] = ct[937];
  proc_control_B.ct_b[1152] = ct[940];
  proc_control_B.ct_b[1153] = ct[941];
  proc_control_B.ct_b[1154] = ct[944];
  proc_control_B.ct_b[1155] = ct[946];
  proc_control_B.ct_b[1156] = ct[947];
  proc_control_B.ct_b[1157] = ct[948];
  proc_control_B.ct_b[1158] = ct[950];
  proc_control_B.ct_b[1159] = ct[19] * ct[20] * ct[21] * ct[1156] * ct[1290];
  proc_control_B.ct_b[1160] = ct[952];
  proc_control_B.ct_b[1161] = ct[18] * ct[20] * ct[22] * ct[1171] * ct[1290];
  proc_control_B.ct_b[1162] = ct[953];
  proc_control_B.ct_b[1163] = ct[18] * ct[19] * ct[23] * ct[1202] * ct[1290];
  std::memcpy(&proc_control_B.ct_b[1164], &ct[954], 10U * sizeof(real_T));
  proc_control_B.ct_b[1174] = (ct[0] + ct[1512]) + ct[91];
  proc_control_B.ct_b[1175] = (ct[1] + ct[1523]) + ct[93];
  proc_control_B.ct_b[1176] = (ct[2] + ct[1534]) + ct[98];
  std::memcpy(&proc_control_B.ct_b[1177], &ct[964], 17U * sizeof(real_T));
  proc_control_B.ct_tmp_p3 = ct[18] * ct[1171] * ct[1290];
  proc_control_B.ct_b[1194] = proc_control_B.ct_tmp_p3 * ct[87];
  proc_control_B.ct_tmp_k1y = ct[19] * ct[1156] * ct[1290];
  proc_control_B.ct_b[1195] = proc_control_B.ct_tmp_k1y * ct[87];
  proc_control_B.ct_tmp_k4 = ct[18] * ct[1202] * ct[1290];
  proc_control_B.ct_b[1196] = proc_control_B.ct_tmp_k4 * ct[87];
  proc_control_B.ct_tmp_iv = ct[20] * ct[1156] * ct[1290];
  proc_control_B.ct_b[1197] = proc_control_B.ct_tmp_iv * ct[87];
  proc_control_B.ct_b[1198] = proc_control_B.ct_tmp_p3 * ct[88];
  proc_control_B.ct_b[1199] = proc_control_B.ct_tmp_k1y * ct[88];
  proc_control_B.ct_tmp_p3 = ct[19] * ct[1202] * ct[1290];
  proc_control_B.ct_b[1200] = proc_control_B.ct_tmp_p3 * ct[88];
  proc_control_B.ct_tmp_k1y = ct[20] * ct[1171] * ct[1290];
  proc_control_B.ct_b[1201] = proc_control_B.ct_tmp_k1y * ct[88];
  proc_control_B.ct_b[1202] = proc_control_B.ct_tmp_k4 * ct[89];
  proc_control_B.ct_b[1203] = proc_control_B.ct_tmp_iv * ct[89];
  proc_control_B.ct_b[1204] = ct[981];
  proc_control_B.ct_b[1205] = proc_control_B.ct_tmp_p3 * ct[89];
  proc_control_B.ct_b[1206] = proc_control_B.ct_tmp_k1y * ct[89];
  proc_control_B.ct_b[1207] = -ct[619];
  proc_control_B.ct_b[1208] = -ct[620];
  proc_control_B.ct_b[1209] = -ct[621];
  proc_control_B.ct_b[1210] = -ct[622];
  proc_control_B.ct_b[1211] = -ct[623];
  proc_control_B.ct_b[1212] = -ct[624];
  proc_control_B.ct_b[1213] = ct[982];
  proc_control_B.ct_b[1214] = -ct[625];
  proc_control_B.ct_b[1215] = -ct[629];
  proc_control_B.ct_b[1216] = -ct[630];
  proc_control_B.ct_b[1217] = -ct[631];
  proc_control_B.ct_b[1218] = -ct[632];
  proc_control_B.ct_b[1219] = -ct[633];
  proc_control_B.ct_b[1220] = -ct[635];
  proc_control_B.ct_b[1221] = -ct[641];
  proc_control_B.ct_b[1222] = -ct[642];
  proc_control_B.ct_b[1223] = -ct[643];
  proc_control_B.ct_b[1224] = ct[983];
  proc_control_B.ct_b[1225] = -ct[644];
  proc_control_B.ct_b[1226] = -ct[645];
  proc_control_B.ct_b[1227] = -ct[646];
  proc_control_B.ct_b[1228] = -ct[648];
  proc_control_B.ct_b[1229] = -ct[649];
  proc_control_B.ct_b[1230] = -ct[650];
  proc_control_B.ct_b[1231] = -ct[651];
  proc_control_B.ct_b[1232] = -ct[652];
  proc_control_B.ct_b[1233] = -ct[653];
  proc_control_B.ct_b[1234] = -ct[655];
  proc_control_B.ct_b[1235] = -ct[660];
  proc_control_B.ct_b[1236] = -ct[662];
  proc_control_B.ct_b[1237] = -ct[663];
  proc_control_B.ct_b[1238] = -ct[664];
  proc_control_B.ct_b[1239] = -ct[665];
  proc_control_B.ct_b[1240] = -ct[666];
  proc_control_B.ct_b[1241] = -ct[670];
  proc_control_B.ct_b[1242] = -ct[671];
  proc_control_B.ct_b[1243] = -ct[672];
  proc_control_B.ct_b[1244] = ct[984];
  proc_control_B.ct_b[1245] = -ct[673];
  proc_control_B.ct_b[1246] = -ct[674];
  proc_control_B.ct_b[1247] = -ct[675];
  proc_control_B.ct_b[1248] = -ct[677];
  std::memcpy(&proc_control_B.ct_b[1249], &ct[985], 26U * sizeof(real_T));
  proc_control_B.ct_b[1275] = ct[87] * ct[305];
  proc_control_B.ct_b[1276] = ct[20] * ct[809];
  proc_control_B.ct_b[1277] = ct[87] * ct[309];
  proc_control_B.ct_b[1278] = ct[1011];
  proc_control_B.ct_b[1279] = ct[88] * ct[286];
  proc_control_B.ct_b[1280] = ct[88] * ct[293];
  proc_control_B.ct_b[1281] = ct[20] * ct[821];
  proc_control_B.ct_b[1282] = ct[19] * ct[823];
  proc_control_B.ct_b[1283] = ct[87] * ct[321];
  proc_control_B.ct_b[1284] = ct[1012];
  proc_control_B.ct_b[1285] = ct[87] * ct[325];
  proc_control_B.ct_b[1286] = ct[89] * ct[283];
  proc_control_B.ct_b[1287] = ct[89] * ct[288];
  proc_control_B.ct_b[1288] = ct[20] * ct[841];
  proc_control_B.ct_b[1289] = ct[19] * ct[846];
  proc_control_B.ct_b[1290] = ct[1013];
  proc_control_B.ct_b[1291] = ct[20] * ct[847];
  proc_control_B.ct_b[1292] = ct[89] * ct[299];
  proc_control_B.ct_b[1293] = ct[88] * ct[315];
  proc_control_B.ct_b[1294] = ct[89] * ct[303];
  proc_control_B.ct_b[1295] = ct[1014];
  proc_control_B.ct_b[1296] = ct[88] * ct[322];
  proc_control_B.ct_b[1297] = ct[1015];
  proc_control_B.ct_b[1298] = ct[1016];
  proc_control_B.ct_b[1299] = ct[1017];
  proc_control_B.ct_b[1300] = ct[1018];
  proc_control_B.ct_b[1301] = ct[19] * ct[889];
  proc_control_B.ct_b[1302] = ct[20] * ct[891];
  proc_control_B.ct_b[1303] = ct[19] * ct[893];
  proc_control_B.ct_b[1304] = -ct[737];
  proc_control_B.ct_b[1305] = -ct[739];
  proc_control_B.ct_b[1306] = ct[1019];
  proc_control_B.ct_b[1307] = -ct[744];
  proc_control_B.ct_b[1308] = -ct[746];
  proc_control_B.ct_b[1309] = -ct[748];
  proc_control_B.ct_b[1310] = -ct[750];
  proc_control_B.ct_b[1311] = -ct[752];
  proc_control_B.ct_b[1312] = -ct[758];
  proc_control_B.ct_b[1313] = -ct[760];
  proc_control_B.ct_b[1314] = ct[6] * ct[894];
  proc_control_B.ct_b[1315] = ct[1020];
  proc_control_B.ct_b[1316] = ct[6] * ct[895];
  proc_control_B.ct_b[1317] = ct[10] * ct[894];
  proc_control_B.ct_b[1318] = ct[10] * ct[896];
  proc_control_B.ct_b[1319] = ct[1021];
  proc_control_B.ct_b[1320] = ct[14] * ct[895];
  proc_control_B.ct_b[1321] = ct[14] * ct[896];
  proc_control_B.ct_b[1322] = ct[1022];
  proc_control_B.ct_tmp_p3 = ct[21] * ct[1156];
  proc_control_B.ct_b[1323] = proc_control_B.ct_tmp_p3 * ct[1171] * ct[1290];
  proc_control_B.ct_b[1324] = proc_control_B.ct_tmp_p3 * ct[1202] * ct[1290];
  proc_control_B.ct_tmp_k1y = ct[22] * ct[1156];
  proc_control_B.ct_b[1325] = proc_control_B.ct_tmp_k1y * ct[1171] * ct[1290];
  proc_control_B.ct_b[1326] = ct[1023];
  proc_control_B.ct_tmp_k4 = ct[22] * ct[1171];
  proc_control_B.ct_b[1327] = proc_control_B.ct_tmp_k4 * ct[1202] * ct[1290];
  proc_control_B.ct_tmp_iv = ct[23] * ct[1156];
  proc_control_B.ct_b[1328] = proc_control_B.ct_tmp_iv * ct[1202] * ct[1290];
  proc_control_B.ct_tmp_ew = ct[23] * ct[1171];
  proc_control_B.ct_b[1329] = proc_control_B.ct_tmp_ew * ct[1202] * ct[1290];
  proc_control_B.ct_b[1330] = ct[1024];
  proc_control_B.ct_b[1331] = ct[1025];
  proc_control_B.ct_b[1332] = ct[1026];
  proc_control_B.ct_b[1333] = proc_control_B.ct_tmp_p3 * ct[341];
  proc_control_B.ct_b[1334] = ct[1027];
  proc_control_B.ct_b[1335] = proc_control_B.ct_tmp_p3 * ct[342];
  proc_control_B.ct_b[1336] = ct[1028];
  proc_control_B.ct_b[1337] = proc_control_B.ct_tmp_k4 * ct[341];
  proc_control_B.ct_b[1338] = ct[1029];
  proc_control_B.ct_b[1339] = proc_control_B.ct_tmp_k1y * ct[342];
  proc_control_B.ct_b[1340] = ct[1030];
  proc_control_B.ct_b[1341] = ct[1031];
  proc_control_B.ct_tmp_ne = ct[22] * ct[1202];
  proc_control_B.ct_b[1342] = proc_control_B.ct_tmp_ne * ct[342];
  proc_control_B.ct_b[1343] = ct[1032];
  proc_control_B.ct_b[1344] = proc_control_B.ct_tmp_p3 * ct[344];
  proc_control_B.ct_b[1345] = ct[1033];
  proc_control_B.ct_tmp_ft = ct[21] * ct[1171];
  proc_control_B.ct_b[1346] = proc_control_B.ct_tmp_ft * ct[345];
  proc_control_B.ct_b[1347] = ct[1034];
  proc_control_B.ct_tmp_kx = ct[21] * ct[1202];
  proc_control_B.ct_b[1348] = proc_control_B.ct_tmp_kx * ct[345];
  proc_control_B.ct_b[1349] = ct[1035];
  proc_control_B.ct_b[1350] = proc_control_B.ct_tmp_iv * ct[341];
  proc_control_B.ct_b[1351] = ct[1036];
  proc_control_B.ct_b[1352] = ct[1037];
  proc_control_B.ct_b[1353] = proc_control_B.ct_tmp_ew * ct[341];
  proc_control_B.ct_b[1354] = ct[1038];
  proc_control_B.ct_tmp_it = ct[23] * ct[1202];
  proc_control_B.ct_b[1355] = proc_control_B.ct_tmp_it * ct[342];
  proc_control_B.ct_b[1356] = ct[1039];
  proc_control_B.ct_b[1357] = ct[1040];
  proc_control_B.ct_b[1358] = proc_control_B.ct_tmp_p3 * ct[346];
  proc_control_B.ct_b[1359] = proc_control_B.ct_tmp_k4 * ct[344];
  proc_control_B.ct_b[1360] = ct[1041];
  proc_control_B.ct_b[1361] = proc_control_B.ct_tmp_ft * ct[347];
  proc_control_B.ct_b[1362] = ct[1042];
  proc_control_B.ct_b[1363] = ct[1043];
  proc_control_B.ct_b[1364] = proc_control_B.ct_tmp_kx * ct[347];
  proc_control_B.ct_b[1365] = ct[1044];
  proc_control_B.ct_b[1366] = proc_control_B.ct_tmp_k4 * ct[345];
  proc_control_B.ct_b[1367] = ct[1045];
  proc_control_B.ct_b[1368] = ct[1046];
  proc_control_B.ct_b[1369] = proc_control_B.ct_tmp_iv * ct[344];
  proc_control_B.ct_b[1370] = ct[1047];
  proc_control_B.ct_b[1371] = proc_control_B.ct_tmp_k1y * ct[346];
  proc_control_B.ct_b[1372] = proc_control_B.ct_tmp_ew * ct[344];
  proc_control_B.ct_b[1373] = ct[1048];
  proc_control_B.ct_b[1374] = ct[1049];
  proc_control_B.ct_b[1375] = proc_control_B.ct_tmp_ne * ct[346];
  proc_control_B.ct_b[1376] = ct[1050];
  proc_control_B.ct_b[1377] = proc_control_B.ct_tmp_k4 * ct[347];
  proc_control_B.ct_b[1378] = ct[1051];
  proc_control_B.ct_b[1379] = proc_control_B.ct_tmp_it * ct[345];
  proc_control_B.ct_b[1380] = ct[1052];
  proc_control_B.ct_b[1381] = proc_control_B.ct_tmp_it * ct[346];
  proc_control_B.ct_b[1382] = ct[1053];
  proc_control_B.ct_b[1383] = proc_control_B.ct_tmp_it * ct[347];
  proc_control_B.ct_b[1384] = ct[1054];
  proc_control_B.ct_b[1385] = ct[1055];
  proc_control_B.ct_b[1386] = -ct[910];
  proc_control_B.ct_b[1387] = -ct[911];
  proc_control_B.ct_b[1388] = -ct[912];
  proc_control_B.ct_b[1389] = -ct[913];
  proc_control_B.ct_b[1390] = ct[1056];
  proc_control_B.ct_b[1391] = -ct[916];
  proc_control_B.ct_b[1392] = -ct[917];
  proc_control_B.ct_b[1393] = ct[1057];
  proc_control_B.ct_b[1394] = -ct[918];
  proc_control_B.ct_b[1395] = -ct[919];
  proc_control_B.ct_b[1396] = -ct[920];
  proc_control_B.ct_b[1397] = -ct[921];
  proc_control_B.ct_b[1398] = ct[1058];
  proc_control_B.ct_b[1399] = -ct[923];
  proc_control_B.ct_b[1400] = -ct[924];
  proc_control_B.ct_b[1401] = ct[1059];
  proc_control_B.ct_b[1402] = -ct[926];
  proc_control_B.ct_b[1403] = -ct[928];
  proc_control_B.ct_b[1404] = -ct[932];
  proc_control_B.ct_b[1405] = -ct[934];
  proc_control_B.ct_b[1406] = -ct[935];
  proc_control_B.ct_b[1407] = -ct[938];
  proc_control_B.ct_b[1408] = -ct[939];
  proc_control_B.ct_b[1409] = -ct[942];
  proc_control_B.ct_b[1410] = ct[1060];
  proc_control_B.ct_b[1411] = -ct[943];
  proc_control_B.ct_b[1412] = -ct[945];
  proc_control_B.ct_b[1413] = -ct[949];
  proc_control_B.ct_b[1414] = -ct[951];
  proc_control_B.ct_b[1415] = proc_control_B.ct_tmp_iv * ct[455];
  proc_control_B.ct_b[1416] = ct[1061];
  proc_control_B.ct_b[1417] = proc_control_B.ct_tmp_k1y * ct[459];
  proc_control_B.ct_b[1418] = proc_control_B.ct_tmp_ew * ct[458];
  proc_control_B.ct_b[1419] = proc_control_B.ct_tmp_k4 * ct[462];
  proc_control_B.ct_b[1420] = proc_control_B.ct_tmp_it * ct[461];
  proc_control_B.ct_b[1421] = proc_control_B.ct_tmp_it * ct[462];
  proc_control_B.ct_tmp_p3 = ct[1156] * ct[1171] * ct[1290];
  proc_control_B.ct_b[1422] = proc_control_B.ct_tmp_p3 * ct[87];
  proc_control_B.ct_b[1423] = ct[87] * ct[894];
  proc_control_B.ct_tmp_k1y = ct[1156] * ct[1202] * ct[1290];
  proc_control_B.ct_b[1424] = proc_control_B.ct_tmp_k1y * ct[87];
  proc_control_B.ct_b[1425] = ct[87] * ct[895];
  proc_control_B.ct_b[1426] = proc_control_B.ct_tmp_p3 * ct[88];
  proc_control_B.ct_b[1427] = ct[1062];
  proc_control_B.ct_b[1428] = ct[88] * ct[894];
  proc_control_B.ct_tmp_p3 = ct[1171] * ct[1202] * ct[1290];
  proc_control_B.ct_b[1429] = proc_control_B.ct_tmp_p3 * ct[88];
  proc_control_B.ct_b[1430] = ct[88] * ct[896];
  proc_control_B.ct_b[1431] = proc_control_B.ct_tmp_k1y * ct[89];
  proc_control_B.ct_b[1432] = ct[89] * ct[895];
  proc_control_B.ct_b[1433] = proc_control_B.ct_tmp_p3 * ct[89];
  proc_control_B.ct_b[1434] = ct[89] * ct[896];
  proc_control_B.ct_b[1435] = ct[1063];
  proc_control_B.ct_b[1436] = ct[1064];
  proc_control_B.ct_b[1437] = (((((ct[3] + ct[787]) + ct[1490]) + ct[43]) + ct
    [83]) + ct[109]) + ct[272];
  proc_control_B.ct_b[1438] = (((((ct[4] + ct[900]) + ct[1495]) + ct[1607]) +
    ct[83]) + ct[100]) + ct[287];
  proc_control_B.ct_b[1439] = (((((ct[5] + ct[474]) + ct[1504]) + ct[1607]) +
    ct[43]) + ct[103]) + ct[313];
  std::memcpy(&proc_control_B.ct_b[1440], &ct[1065], 87U * sizeof(real_T));
  proc_control_B.ct_b[1527] = ct[1152];
  proc_control_B.ct_b[1528] = ct[1155];
  proc_control_B.ct_b[1529] = ct[1156];
  proc_control_B.ct_b[1530] = ct[1157];
  std::memcpy(&proc_control_B.ct_b[1531], &ct[1159], 9U * sizeof(real_T));
  proc_control_B.ct_b[1540] = ct[1168];
  proc_control_B.ct_b[1541] = ct[1170];
  proc_control_B.ct_b[1542] = ct[1171];
  proc_control_B.ct_b[1543] = ct[1173];
  proc_control_B.ct_b[1544] = ct[1174];
  proc_control_B.ct_b[1545] = ct[1177];
  proc_control_B.ct_b[1546] = ct[1178];
  proc_control_B.ct_b[1547] = ct[1181];
  proc_control_B.ct_b[1548] = ct[1182];
  proc_control_B.ct_b[1549] = ct[1184];
  proc_control_B.ct_b[1550] = ct[1186];
  proc_control_B.ct_b[1551] = ct[1190];
  proc_control_B.ct_b[1552] = ct[1191];
  proc_control_B.ct_b[1553] = ct[1193];
  proc_control_B.ct_b[1554] = ct[1195];
  proc_control_B.ct_b[1555] = ct[1198];
  proc_control_B.ct_b[1556] = ct[1199];
  proc_control_B.ct_b[1557] = ct[1200];
  proc_control_B.ct_b[1558] = ct[1201];
  proc_control_B.ct_b[1559] = ct[1202];
  proc_control_B.ct_b[1560] = ct[1203];
  proc_control_B.ct_b[1561] = ct[1205];
  proc_control_B.ct_b[1562] = ct[1208];
  proc_control_B.ct_b[1563] = ct[1209];
  proc_control_B.ct_b[1564] = ct[1212];
  proc_control_B.ct_b[1565] = ct[1213];
  proc_control_B.ct_b[1566] = ct[1215];
  proc_control_B.ct_b[1567] = ct[1216];
  proc_control_B.ct_b[1568] = ct[1218];
  proc_control_B.ct_b[1569] = ct[1219];
  proc_control_B.ct_b[1570] = ct[1220];
  proc_control_B.ct_b[1571] = ct[1221];
  proc_control_B.ct_b[1572] = ct[1222];
  proc_control_B.ct_b[1573] = ct[1224];
  proc_control_B.ct_b[1574] = ct[1225];
  std::memcpy(&proc_control_B.ct_b[1575], &ct[1227], 24U * sizeof(real_T));
  proc_control_B.ct_b[1599] = ct[1251];
  proc_control_B.ct_b[1600] = ct[1253];
  proc_control_B.ct_b[1601] = ct[1254];
  proc_control_B.ct_b[1602] = ct[1255];
  proc_control_B.ct_b[1603] = ct[1256];
  proc_control_B.ct_b[1604] = ct[1257];
  proc_control_B.ct_b[1605] = ct[1258];
  proc_control_B.ct_b[1606] = ct[1260];
  proc_control_B.ct_b[1607] = ct[1261];
  proc_control_B.ct_b[1608] = ct[1262];
  proc_control_B.ct_b[1609] = ct[1263];
  proc_control_B.ct_b[1610] = ct[1264];
  proc_control_B.ct_b[1611] = ct[1265];
  proc_control_B.ct_b[1612] = ct[1267];
  proc_control_B.ct_b[1613] = ct[1269];
  proc_control_B.ct_b[1614] = ct[1271];
  proc_control_B.ct_b[1615] = ct[1272];
  proc_control_B.ct_b[1616] = ct[1273];
  proc_control_B.ct_b[1617] = ct[1275];
  proc_control_B.ct_b[1618] = ct[1276];
  proc_control_B.ct_b[1619] = ct[1277];
  proc_control_B.ct_b[1620] = ct[1279];
  proc_control_B.ct_b[1621] = ct[1280];
  proc_control_B.ct_b[1622] = ct[1281];
  proc_control_B.ct_b[1623] = ct[1282];
  proc_control_B.ct_b[1624] = ct[1284];
  proc_control_B.ct_b[1625] = ct[1285];
  proc_control_B.ct_b[1626] = ct[1286];
  proc_control_B.ct_b[1627] = ct[1288];
  proc_control_B.ct_b[1628] = ct[1290];
  proc_control_B.ct_b[1629] = ct[1292];
  proc_control_B.ct_b[1630] = ct[1293];
  proc_control_B.ct_b[1631] = ct[1294];
  proc_control_B.ct_b[1632] = ct[1295];
  proc_control_B.ct_b[1633] = ct[1296];
  proc_control_B.ct_b[1634] = ct[1297];
  proc_control_B.ct_b[1635] = ct[1299];
  proc_control_B.ct_b[1636] = ct[1300];
  proc_control_B.ct_b[1637] = ct[1301];
  proc_control_B.ct_b[1638] = ct[1302];
  proc_control_B.ct_b[1639] = ct[1303];
  proc_control_B.ct_b[1640] = ct[1304];
  std::memcpy(&proc_control_B.ct_b[1641], &ct[1306], sizeof(real_T) << 5U);
  proc_control_B.ct_b[1673] = ct[1338];
  std::memcpy(&proc_control_B.ct_b[1674], &ct[1340], 10U * sizeof(real_T));
  proc_control_B.ct_b[1684] = ct[1350];
  proc_control_B.ct_b[1685] = ct[1352];
  proc_control_B.ct_b[1686] = ct[1353];
  std::memcpy(&proc_control_B.ct_b[1687], &ct[1355], sizeof(real_T) << 3U);
  proc_control_B.ct_b[1695] = ct[1363];
  proc_control_B.ct_b[1696] = ct[1365];
  proc_control_B.ct_b[1697] = ct[1366];
  proc_control_B.ct_b[1698] = ct[1367];
  proc_control_B.ct_b[1699] = ct[1368];
  proc_control_B.ct_b[1700] = ct[1369];
  proc_control_B.ct_b[1701] = ct[1370];
  proc_control_B.ct_b[1702] = ct[1373];
  std::memcpy(&proc_control_B.ct_b[1703], &ct[1380], 109U * sizeof(real_T));
  proc_control_B.ct_b[1812] = ct[1489];
  proc_control_B.ct_b[1813] = ct[1491];
  proc_control_B.ct_b[1814] = ct[1492];
  proc_control_B.ct_b[1815] = ct[1493];
  proc_control_B.ct_b[1816] = ct[1494];
  proc_control_B.ct_b[1817] = ct[1496];
  proc_control_B.ct_b[1818] = ct[1497];
  proc_control_B.ct_b[1819] = ct[1498];
  proc_control_B.ct_b[1820] = ct[1499];
  proc_control_B.ct_b[1821] = ct[1500];
  proc_control_B.ct_b[1822] = ct[1501];
  proc_control_B.ct_b[1823] = ct[1502];
  proc_control_B.ct_b[1824] = ct[1503];
  proc_control_B.ct_b[1825] = ct[1505];
  proc_control_B.ct_b[1826] = ct[1506];
  proc_control_B.ct_b[1827] = ct[1507];
  proc_control_B.ct_b[1828] = ct[1508];
  proc_control_B.ct_b[1829] = ct[1509];
  proc_control_B.ct_b[1830] = ct[1510];
  proc_control_B.ct_b[1831] = ct[1511];
  std::memcpy(&proc_control_B.ct_b[1832], &ct[1513], 9U * sizeof(real_T));
  proc_control_B.ct_b[1841] = ct[1522];
  std::memcpy(&proc_control_B.ct_b[1842], &ct[1524], 9U * sizeof(real_T));
  proc_control_B.ct_b[1851] = ct[1533];
  std::memcpy(&proc_control_B.ct_b[1852], &ct[1535], 69U * sizeof(real_T));
  proc_control_B.ct_b[1921] = ct[6] * ct[1502];
  proc_control_B.ct_b[1922] = ct[1604];
  proc_control_B.ct_b[1923] = ct[1605];
  proc_control_B.ct_b[1924] = ct[1606];
  std::memcpy(&proc_control_B.ct_b[1925], &ct[1608], 13U * sizeof(real_T));
  proc_control_B.ct_b[1938] = ct[10] * ct[1503];
  std::memcpy(&proc_control_B.ct_b[1939], &ct[1621], 15U * sizeof(real_T));
  proc_control_B.ct_b[1954] = ct[14] * ct[1505];
  proc_control_B.ct_b[1955] = ct[1636];
  proc_control_B.ct_b[1956] = ct[1637];
  proc_control_B.ct_b[1957] = ct[1638];
  proc_control_B.ct_b[1958] = ct[1639];
  proc_control_ft_5(proc_control_B.ct_b, Anq);
}

void proc_control::proc_control_ft_3(const real_T ct[1260], real_T Anq[169])
{
  std::memcpy(&proc_control_B.ct_j[0], &ct[0], 57U * sizeof(real_T));
  proc_control_B.ct_j[57] = ct[21] * ct[772] * ct[888];
  proc_control_B.ct_j[58] = ct[22] * ct[805] * ct[888];
  proc_control_B.ct_j[59] = ct[23] * ct[826] * ct[888];
  proc_control_B.ct_j[60] = ct[596] * ct[1258];
  proc_control_B.ct_j[61] = ct[597] * ct[1257];
  proc_control_B.ct_j[62] = ct[596] * ct[1259];
  proc_control_B.ct_j[63] = ct[603] * ct[1257];
  proc_control_B.ct_j[64] = ct[597] * ct[1259];
  proc_control_B.ct_j[65] = ct[603] * ct[1258];
  proc_control_B.ct_j[66] = ct[21] * ct[732];
  proc_control_B.ct_j[67] = ct[21] * ct[733];
  proc_control_B.ct_j[68] = ct[21] * ct[734];
  proc_control_B.ct_j[69] = ct[21] * ct[735];
  proc_control_B.ct_j[70] = ct[21] * ct[736];
  proc_control_B.ct_j[71] = ct[21] * ct[737];
  proc_control_B.ct_j[72] = ct[57];
  proc_control_B.ct_j[73] = ct[22] * ct[732];
  proc_control_B.ct_j[74] = ct[22] * ct[733];
  proc_control_B.ct_j[75] = ct[22] * ct[734];
  proc_control_B.ct_j[76] = ct[22] * ct[735];
  proc_control_B.ct_j[77] = ct[22] * ct[736];
  proc_control_B.ct_j[78] = ct[22] * ct[737];
  proc_control_B.ct_j[79] = ct[23] * ct[732];
  proc_control_B.ct_j[80] = ct[23] * ct[733];
  proc_control_B.ct_j[81] = ct[23] * ct[734];
  proc_control_B.ct_j[82] = ct[23] * ct[735];
  proc_control_B.ct_j[83] = ct[58];
  proc_control_B.ct_j[84] = ct[23] * ct[736];
  proc_control_B.ct_j[85] = ct[23] * ct[737];
  proc_control_B.ct_j[86] = ct[21] * ct[745];
  proc_control_B.ct_j[87] = ct[59];
  proc_control_B.ct_j[88] = ct[60];
  proc_control_B.ct_j[89] = ct[61];
  proc_control_B.ct_j[90] = ct[62];
  proc_control_B.ct_j[91] = ct[63];
  proc_control_B.ct_j[92] = ct[22] * ct[745];
  proc_control_B.ct_j[93] = ct[64];
  proc_control_B.ct_j[94] = ct[21] * ct[748];
  proc_control_B.ct_j[95] = ct[23] * ct[745];
  proc_control_B.ct_j[96] = ct[21] * ct[752];
  proc_control_B.ct_j[97] = ct[22] * ct[748];
  proc_control_B.ct_j[98] = ct[65];
  proc_control_B.ct_j[99] = ct[22] * ct[752];
  proc_control_B.ct_j[100] = ct[66];
  proc_control_B.ct_j[101] = ct[23] * ct[748];
  proc_control_B.ct_j[102] = ct[23] * ct[752];
  proc_control_B.ct_j[103] = ct[67];
  proc_control_B.ct_j[104] = -ct[1076];
  proc_control_B.ct_j[105] = -ct[1077];
  proc_control_B.ct_j[106] = -ct[1080];
  proc_control_B.ct_j[107] = -ct[1081];
  proc_control_B.ct_j[108] = -ct[1082];
  proc_control_B.ct_j[109] = ct[68];
  proc_control_B.ct_j[110] = -ct[1083];
  proc_control_B.ct_j[111] = -ct[1084];
  proc_control_B.ct_j[112] = -ct[1085];
  proc_control_B.ct_j[113] = -ct[1086];
  proc_control_B.ct_j[114] = -ct[1087];
  proc_control_B.ct_j[115] = -ct[1088];
  proc_control_B.ct_j[116] = -ct[1090];
  proc_control_B.ct_j[117] = -ct[1092];
  proc_control_B.ct_j[118] = -ct[1093];
  proc_control_B.ct_j[119] = ct[69];
  proc_control_B.ct_j[120] = ct[70];
  proc_control_B.ct_j[121] = ct[18] * ct[848];
  proc_control_B.ct_j[122] = ct[18] * ct[849];
  proc_control_B.ct_j[123] = ct[18] * ct[850];
  proc_control_B.ct_j[124] = ct[18] * ct[851];
  proc_control_B.ct_j[125] = ct[18] * ct[852];
  proc_control_B.ct_j[126] = ct[18] * ct[853];
  proc_control_B.ct_j[127] = ct[19] * ct[852];
  proc_control_B.ct_j[128] = ct[71];
  proc_control_B.ct_j[129] = ct[19] * ct[853];
  proc_control_B.ct_j[130] = ct[20] * ct[852];
  proc_control_B.ct_j[131] = ct[20] * ct[853];
  proc_control_B.ct_j[132] = ct[18] * ct[854];
  proc_control_B.ct_j[133] = ct[18] * ct[855];
  proc_control_B.ct_j[134] = ct[18] * ct[856];
  proc_control_B.ct_j[135] = ct[18] * ct[857];
  proc_control_B.ct_j[136] = ct[18] * ct[858];
  proc_control_B.ct_j[137] = ct[18] * ct[859];
  proc_control_B.ct_j[138] = ct[19] * ct[858];
  proc_control_B.ct_j[139] = ct[19] * ct[859];
  proc_control_B.ct_j[140] = ct[20] * ct[858];
  proc_control_B.ct_j[141] = ct[20] * ct[859];
  proc_control_B.ct_j[142] = ct[18] * ct[860];
  proc_control_B.ct_j[143] = ct[18] * ct[861];
  proc_control_B.ct_j[144] = ct[19] * ct[860];
  proc_control_B.ct_j[145] = ct[18] * ct[862];
  proc_control_B.ct_j[146] = ct[19] * ct[861];
  proc_control_B.ct_j[147] = ct[18] * ct[863];
  proc_control_B.ct_j[148] = ct[20] * ct[860];
  proc_control_B.ct_j[149] = ct[19] * ct[862];
  proc_control_B.ct_j[150] = ct[20] * ct[861];
  proc_control_B.ct_j[151] = ct[19] * ct[863];
  proc_control_B.ct_j[152] = ct[20] * ct[862];
  proc_control_B.ct_j[153] = ct[19] * ct[864];
  proc_control_B.ct_j[154] = ct[20] * ct[863];
  proc_control_B.ct_j[155] = ct[19] * ct[865];
  proc_control_B.ct_j[156] = ct[20] * ct[864];
  proc_control_B.ct_j[157] = ct[20] * ct[865];
  proc_control_B.ct_j[158] = ct[19] * ct[868];
  proc_control_B.ct_j[159] = ct[18] * ct[870];
  proc_control_B.ct_j[160] = ct[19] * ct[869];
  proc_control_B.ct_j[161] = ct[18] * ct[871];
  proc_control_B.ct_j[162] = ct[19] * ct[870];
  proc_control_B.ct_j[163] = ct[19] * ct[871];
  proc_control_B.ct_j[164] = ct[20] * ct[870];
  proc_control_B.ct_j[165] = ct[19] * ct[872];
  proc_control_B.ct_j[166] = ct[20] * ct[871];
  proc_control_B.ct_j[167] = ct[19] * ct[873];
  proc_control_B.ct_j[168] = ct[18] * ct[874];
  proc_control_B.ct_j[169] = ct[18] * ct[875];
  proc_control_B.ct_j[170] = ct[19] * ct[874];
  proc_control_B.ct_j[171] = ct[18] * ct[876];
  proc_control_B.ct_j[172] = ct[19] * ct[875];
  proc_control_B.ct_j[173] = ct[18] * ct[878];
  proc_control_B.ct_j[174] = ct[20] * ct[874];
  proc_control_B.ct_j[175] = ct[20] * ct[875];
  proc_control_B.ct_j[176] = ct[18] * ct[879];
  proc_control_B.ct_j[177] = ct[18] * ct[880];
  proc_control_B.ct_j[178] = ct[20] * ct[876];
  proc_control_B.ct_j[179] = ct[19] * ct[879];
  proc_control_B.ct_j[180] = ct[20] * ct[878];
  proc_control_B.ct_j[181] = ct[19] * ct[880];
  proc_control_B.ct_j[182] = ct[20] * ct[879];
  proc_control_B.ct_j[183] = ct[20] * ct[880];
  proc_control_B.ct_j[184] = ct[19] * ct[881];
  proc_control_B.ct_j[185] = ct[18] * ct[883];
  proc_control_B.ct_j[186] = ct[19] * ct[882];
  proc_control_B.ct_j[187] = ct[18] * ct[884];
  proc_control_B.ct_j[188] = ct[19] * ct[883];
  proc_control_B.ct_j[189] = ct[19] * ct[884];
  proc_control_B.ct_j[190] = ct[20] * ct[883];
  proc_control_B.ct_j[191] = ct[19] * ct[885];
  proc_control_B.ct_j[192] = ct[20] * ct[884];
  proc_control_B.ct_j[193] = ct[19] * ct[886];
  proc_control_B.ct_j[194] = ct[72];
  proc_control_B.ct_j[195] = ct[18] * ct[889];
  proc_control_B.ct_j[196] = ct[18] * ct[890];
  proc_control_B.ct_j[197] = ct[19] * ct[889];
  proc_control_B.ct_j[198] = ct[18] * ct[891];
  proc_control_B.ct_j[199] = ct[19] * ct[890];
  proc_control_B.ct_j[200] = ct[18] * ct[892];
  proc_control_B.ct_j[201] = ct[19] * ct[891];
  proc_control_B.ct_j[202] = ct[18] * ct[893];
  proc_control_B.ct_j[203] = ct[19] * ct[892];
  proc_control_B.ct_j[204] = ct[18] * ct[894];
  proc_control_B.ct_j[205] = ct[73];
  proc_control_B.ct_j[206] = ct[20] * ct[891];
  proc_control_B.ct_j[207] = ct[19] * ct[893];
  proc_control_B.ct_j[208] = ct[20] * ct[892];
  proc_control_B.ct_j[209] = ct[19] * ct[894];
  proc_control_B.ct_j[210] = ct[20] * ct[893];
  proc_control_B.ct_j[211] = ct[20] * ct[894];
  proc_control_B.ct_j[212] = ct[18] * ct[895];
  proc_control_B.ct_j[213] = ct[18] * ct[896];
  proc_control_B.ct_j[214] = ct[19] * ct[895];
  proc_control_B.ct_j[215] = ct[19] * ct[896];
  proc_control_B.ct_j[216] = ct[74];
  proc_control_B.ct_j[217] = ct[20] * ct[895];
  proc_control_B.ct_j[218] = ct[20] * ct[896];
  proc_control_B.ct_j[219] = ct[20] * ct[897];
  proc_control_B.ct_j[220] = ct[20] * ct[898];
  proc_control_B.ct_j[221] = ct[20] * ct[899];
  proc_control_B.ct_j[222] = ct[20] * ct[900];
  proc_control_B.ct_j[223] = ct[18] * ct[901];
  proc_control_B.ct_j[224] = ct[18] * ct[902];
  proc_control_B.ct_j[225] = ct[19] * ct[901];
  proc_control_B.ct_j[226] = ct[19] * ct[902];
  proc_control_B.ct_j[227] = ct[20] * ct[901];
  proc_control_B.ct_j[228] = ct[20] * ct[902];
  proc_control_B.ct_j[229] = ct[20] * ct[903];
  proc_control_B.ct_j[230] = ct[20] * ct[904];
  proc_control_B.ct_j[231] = ct[20] * ct[905];
  proc_control_B.ct_j[232] = ct[20] * ct[906];
  proc_control_B.ct_j[233] = ct[18] * ct[909];
  proc_control_B.ct_j[234] = ct[18] * ct[910];
  proc_control_B.ct_j[235] = ct[75];
  proc_control_B.ct_j[236] = ct[21] * ct[825];
  proc_control_B.ct_j[237] = ct[76];
  proc_control_B.ct_j[238] = ct[18] * ct[936];
  proc_control_B.ct_j[239] = ct[19] * ct[936];
  proc_control_B.ct_j[240] = ct[18] * ct[937];
  proc_control_B.ct_j[241] = ct[19] * ct[937];
  proc_control_B.ct_j[242] = ct[18] * ct[938];
  proc_control_B.ct_j[243] = ct[77];
  proc_control_B.ct_j[244] = ct[22] * ct[825];
  proc_control_B.ct_j[245] = ct[18] * ct[942];
  proc_control_B.ct_j[246] = ct[18] * ct[943];
  proc_control_B.ct_j[247] = ct[19] * ct[944];
  proc_control_B.ct_j[248] = ct[78];
  proc_control_B.ct_j[249] = ct[18] * ct[945];
  proc_control_B.ct_j[250] = ct[18] * ct[946];
  proc_control_B.ct_j[251] = ct[19] * ct[946];
  proc_control_B.ct_j[252] = ct[18] * ct[947];
  proc_control_B.ct_j[253] = ct[19] * ct[947];
  proc_control_B.ct_j[254] = ct[79];
  proc_control_B.ct_j[255] = ct[23] * ct[825];
  proc_control_B.ct_j[256] = ct[18] * ct[952];
  proc_control_B.ct_j[257] = ct[18] * ct[954];
  proc_control_B.ct_j[258] = ct[80];
  proc_control_B.ct_j[259] = ct[19] * ct[955];
  proc_control_B.ct_j[260] = ct[18] * ct[959];
  proc_control_B.ct_j[261] = ct[18] * ct[960];
  proc_control_B.ct_j[262] = ct[18] * ct[961];
  proc_control_B.ct_j[263] = ct[81];
  proc_control_B.ct_j[264] = ct[19] * ct[961];
  proc_control_B.ct_j[265] = ct[18] * ct[963];
  proc_control_B.ct_j[266] = ct[20] * ct[961];
  proc_control_B.ct_j[267] = ct[19] * ct[963];
  proc_control_B.ct_j[268] = ct[18] * ct[964];
  proc_control_B.ct_j[269] = ct[19] * ct[964];
  proc_control_B.ct_j[270] = ct[20] * ct[964];
  proc_control_B.ct_j[271] = ct[18] * ct[966];
  proc_control_B.ct_j[272] = ct[82];
  proc_control_B.ct_j[273] = ct[19] * ct[966];
  proc_control_B.ct_j[274] = ct[18] * ct[968];
  proc_control_B.ct_j[275] = ct[20] * ct[970];
  proc_control_B.ct_j[276] = ct[20] * ct[971];
  proc_control_B.ct_j[277] = ct[18] * ct[976];
  proc_control_B.ct_j[278] = ct[19] * ct[975];
  proc_control_B.ct_j[279] = ct[18] * ct[978];
  proc_control_B.ct_j[280] = ct[18] * ct[979];
  proc_control_B.ct_j[281] = ct[19] * ct[978];
  proc_control_B.ct_j[282] = ct[20] * ct[979];
  proc_control_B.ct_j[283] = ct[84];
  proc_control_B.ct_j[284] = ct[85];
  proc_control_B.ct_j[285] = ct[86];
  proc_control_B.ct_j[286] = ct[87];
  proc_control_B.ct_j[287] = ct[88];
  proc_control_B.ct_j[288] = ct[89];
  proc_control_B.ct_j[289] = ct[90];
  proc_control_B.ct_j[290] = ct[91];
  proc_control_B.ct_j[291] = ct[93];
  proc_control_B.ct_j[292] = ct[94];
  proc_control_B.ct_j[293] = ct[95];
  proc_control_B.ct_j[294] = ct[97];
  proc_control_B.ct_j[295] = ct[98];
  proc_control_B.ct_j[296] = ct[19] * ct[980];
  proc_control_B.ct_j[297] = ct[20] * ct[980];
  proc_control_B.ct_j[298] = ct[20] * ct[981];
  proc_control_B.ct_j[299] = ct[100];
  proc_control_B.ct_j[300] = ct[101];
  proc_control_B.ct_j[301] = ct[102];
  proc_control_B.ct_j[302] = ct[104];
  proc_control_B.ct_j[303] = ct[105];
  proc_control_B.ct_j[304] = ct[107];
  proc_control_B.ct_j[305] = ct[110];
  proc_control_B.ct_j[306] = ct[111];
  proc_control_B.ct_j[307] = ct[113];
  proc_control_B.ct_j[308] = ct[114];
  proc_control_B.ct_j[309] = ct[115];
  proc_control_B.ct_j[310] = ct[19] * ct[982];
  std::memcpy(&proc_control_B.ct_j[311], &ct[116], 15U * sizeof(real_T));
  proc_control_B.ct_j[326] = ct[20] * ct[983];
  proc_control_B.ct_j[327] = ct[131];
  proc_control_B.ct_j[328] = ct[133];
  proc_control_B.ct_j[329] = ct[134];
  proc_control_B.ct_j[330] = ct[135];
  proc_control_B.ct_j[331] = -ct[630];
  proc_control_B.ct_j[332] = ct[137];
  proc_control_B.ct_j[333] = -ct[631];
  proc_control_B.ct_j[334] = -ct[634];
  proc_control_B.ct_j[335] = -ct[635];
  proc_control_B.ct_j[336] = -ct[638];
  proc_control_B.ct_j[337] = -ct[639];
  proc_control_B.ct_j[338] = -ct[642];
  proc_control_B.ct_j[339] = -ct[643];
  proc_control_B.ct_j[340] = -ct[646];
  std::memcpy(&proc_control_B.ct_j[341], &ct[138], 43U * sizeof(real_T));
  proc_control_B.ct_j[384] = -ct[733];
  proc_control_B.ct_j[385] = -ct[734];
  proc_control_B.ct_j[386] = -ct[737];
  proc_control_B.ct_j[387] = ct[181];
  proc_control_B.ct_j[388] = ct[59] * ct[645];
  proc_control_B.ct_j[389] = ct[182];
  proc_control_B.ct_j[390] = ct[60] * ct[637];
  proc_control_B.ct_j[391] = ct[183];
  proc_control_B.ct_j[392] = ct[184];
  proc_control_B.ct_j[393] = ct[61] * ct[629];
  proc_control_B.ct_j[394] = ct[185];
  proc_control_B.ct_j[395] = ct[186];
  proc_control_B.ct_j[396] = ct[187];
  proc_control_B.ct_j[397] = ct[188];
  proc_control_B.ct_j[398] = ct[189];
  proc_control_B.ct_j[399] = ct[59] * ct[664];
  proc_control_B.ct_j[400] = ct[190];
  proc_control_B.ct_j[401] = ct[191];
  proc_control_B.ct_j[402] = -ct[848];
  proc_control_B.ct_j[403] = -ct[851];
  proc_control_B.ct_j[404] = -ct[852];
  proc_control_B.ct_j[405] = -ct[855];
  proc_control_B.ct_j[406] = -ct[856];
  proc_control_B.ct_j[407] = -ct[859];
  proc_control_B.ct_j[408] = -ct[860];
  proc_control_B.ct_j[409] = ct[192];
  proc_control_B.ct_j[410] = -ct[863];
  proc_control_B.ct_j[411] = -ct[864];
  proc_control_B.ct_j[412] = ct[193];
  proc_control_B.ct_j[413] = ct[194];
  proc_control_B.ct_j[414] = -ct[868];
  proc_control_B.ct_j[415] = -ct[871];
  proc_control_B.ct_j[416] = -ct[872];
  proc_control_B.ct_j[417] = -ct[875];
  proc_control_B.ct_j[418] = -ct[876];
  proc_control_B.ct_j[419] = -ct[880];
  proc_control_B.ct_j[420] = ct[195];
  proc_control_B.ct_j[421] = -ct[881];
  proc_control_B.ct_j[422] = -ct[884];
  proc_control_B.ct_j[423] = -ct[885];
  proc_control_B.ct_j[424] = ct[196];
  proc_control_B.ct_j[425] = ct[197];
  proc_control_B.ct_j[426] = -ct[889];
  proc_control_B.ct_j[427] = -ct[892];
  proc_control_B.ct_j[428] = -ct[893];
  proc_control_B.ct_j[429] = -ct[896];
  proc_control_B.ct_j[430] = -ct[897];
  proc_control_B.ct_j[431] = -ct[900];
  proc_control_B.ct_j[432] = -ct[901];
  proc_control_B.ct_j[433] = -ct[904];
  proc_control_B.ct_j[434] = -ct[905];
  std::memcpy(&proc_control_B.ct_j[435], &ct[198], 31U * sizeof(real_T));
  proc_control_B.ct_j[466] = -ct[985];
  proc_control_B.ct_j[467] = -ct[988];
  proc_control_B.ct_j[468] = -ct[989];
  std::memcpy(&proc_control_B.ct_j[469], &ct[229], 29U * sizeof(real_T));
  proc_control_B.ct_j[498] = ct[19] * ct[1165];
  proc_control_B.ct_j[499] = ct[258];
  proc_control_B.ct_j[500] = ct[259];
  proc_control_B.ct_j[501] = ct[18] * ct[1168];
  proc_control_B.ct_j[502] = ct[19] * ct[1168];
  proc_control_B.ct_j[503] = ct[18] * ct[1170];
  proc_control_B.ct_j[504] = ct[19] * ct[1169];
  proc_control_B.ct_j[505] = ct[19] * ct[1170];
  proc_control_B.ct_j[506] = ct[260];
  proc_control_B.ct_j[507] = ct[261];
  proc_control_B.ct_j[508] = ct[262];
  proc_control_B.ct_j[509] = ct[263];
  proc_control_B.ct_j[510] = ct[18] * ct[1174];
  proc_control_B.ct_j[511] = ct[20] * ct[1174];
  proc_control_B.ct_j[512] = ct[264];
  proc_control_B.ct_j[513] = ct[20] * ct[1178];
  proc_control_B.ct_j[514] = ct[18] * ct[1179];
  proc_control_B.ct_j[515] = ct[20] * ct[1179];
  proc_control_B.ct_j[516] = ct[20] * ct[1180];
  proc_control_B.ct_j[517] = ct[265];
  proc_control_B.ct_j[518] = ct[266];
  proc_control_B.ct_j[519] = ct[267];
  proc_control_B.ct_j[520] = ct[19] * ct[1183];
  proc_control_B.ct_j[521] = ct[20] * ct[1183];
  proc_control_B.ct_j[522] = ct[19] * ct[1184];
  proc_control_B.ct_j[523] = ct[19] * ct[1185];
  proc_control_B.ct_j[524] = ct[20] * ct[1185];
  proc_control_B.ct_j[525] = ct[268];
  proc_control_B.ct_j[526] = ct[269];
  proc_control_B.ct_j[527] = ct[19] * ct[1189];
  std::memcpy(&proc_control_B.ct_j[528], &ct[270], 17U * sizeof(real_T));
  proc_control_B.ct_j[545] = ct[629] * ct[742];
  proc_control_B.ct_j[546] = ct[630] * ct[742];
  proc_control_B.ct_j[547] = ct[629] * ct[761];
  proc_control_B.ct_j[548] = ct[631] * ct[742];
  proc_control_B.ct_j[549] = ct[630] * ct[761];
  proc_control_B.ct_j[550] = ct[632] * ct[742];
  proc_control_B.ct_j[551] = ct[633] * ct[761];
  proc_control_B.ct_j[552] = ct[634] * ct[761];
  proc_control_B.ct_j[553] = ct[635] * ct[742];
  proc_control_B.ct_j[554] = ct[636] * ct[742];
  proc_control_B.ct_j[555] = ct[637] * ct[742];
  proc_control_B.ct_j[556] = ct[638] * ct[742];
  proc_control_B.ct_j[557] = ct[287];
  proc_control_B.ct_j[558] = ct[637] * ct[794];
  proc_control_B.ct_j[559] = ct[638] * ct[794];
  proc_control_B.ct_j[560] = ct[639] * ct[794];
  proc_control_B.ct_j[561] = ct[640] * ct[794];
  proc_control_B.ct_j[562] = ct[641] * ct[761];
  proc_control_B.ct_j[563] = ct[642] * ct[761];
  proc_control_B.ct_j[564] = ct[643] * ct[794];
  proc_control_B.ct_j[565] = ct[645] * ct[761];
  proc_control_B.ct_j[566] = ct[644] * ct[794];
  proc_control_B.ct_j[567] = ct[646] * ct[761];
  proc_control_B.ct_j[568] = ct[645] * ct[794];
  proc_control_B.ct_j[569] = ct[646] * ct[794];
  proc_control_B.ct_j[570] = ct[288];
  proc_control_B.ct_j[571] = ct[647] * ct[742];
  proc_control_B.ct_j[572] = ct[647] * ct[761];
  proc_control_B.ct_j[573] = ct[650] * ct[742];
  proc_control_B.ct_j[574] = ct[650] * ct[794];
  proc_control_B.ct_j[575] = ct[289];
  proc_control_B.ct_j[576] = ct[651] * ct[742];
  proc_control_B.ct_j[577] = ct[651] * ct[761];
  proc_control_B.ct_j[578] = ct[654] * ct[761];
  proc_control_B.ct_j[579] = ct[654] * ct[794];
  proc_control_B.ct_j[580] = ct[655] * ct[742];
  proc_control_B.ct_j[581] = ct[655] * ct[794];
  proc_control_B.ct_j[582] = ct[658] * ct[761];
  proc_control_B.ct_j[583] = ct[658] * ct[794];
  proc_control_B.ct_j[584] = ct[290];
  proc_control_B.ct_j[585] = ct[659] * ct[742];
  proc_control_B.ct_j[586] = ct[659] * ct[761];
  proc_control_B.ct_j[587] = ct[663] * ct[742];
  proc_control_B.ct_j[588] = ct[663] * ct[794];
  proc_control_B.ct_j[589] = ct[7] * ct[18] * ct[794] * ct[888];
  proc_control_B.ct_j[590] = ct[8] * ct[18] * ct[761] * ct[888];
  proc_control_B.ct_j[591] = ct[7] * ct[51];
  proc_control_B.ct_j[592] = ct[7] * ct[19] * ct[794] * ct[888];
  proc_control_B.ct_j[593] = ct[7] * ct[52];
  proc_control_B.ct_j[594] = ct[291];
  proc_control_B.ct_j[595] = ct[8] * ct[20] * ct[761] * ct[888];
  proc_control_B.ct_j[596] = ct[8] * ct[53];
  proc_control_B.ct_j[597] = ct[8] * ct[54];
  proc_control_B.ct_j[598] = ct[9] * ct[18] * ct[794] * ct[888];
  proc_control_B.ct_j[599] = ct[9] * ct[51];
  proc_control_B.ct_j[600] = ct[9] * ct[19] * ct[794] * ct[888];
  proc_control_B.ct_j[601] = ct[9] * ct[52];
  proc_control_B.ct_j[602] = ct[11] * ct[19] * ct[742] * ct[888];
  proc_control_B.ct_j[603] = ct[292];
  proc_control_B.ct_j[604] = ct[11] * ct[20] * ct[742] * ct[888];
  proc_control_B.ct_j[605] = ct[11] * ct[55];
  proc_control_B.ct_j[606] = ct[11] * ct[56];
  proc_control_B.ct_j[607] = ct[12] * ct[18] * ct[761] * ct[888];
  proc_control_B.ct_j[608] = ct[13] * ct[19] * ct[742] * ct[888];
  proc_control_B.ct_j[609] = ct[12] * ct[20] * ct[761] * ct[888];
  proc_control_B.ct_j[610] = ct[13] * ct[20] * ct[742] * ct[888];
  proc_control_B.ct_j[611] = ct[12] * ct[53];
  proc_control_B.ct_j[612] = ct[12] * ct[54];
  proc_control_B.ct_j[613] = ct[293];
  proc_control_B.ct_j[614] = ct[13] * ct[55];
  proc_control_B.ct_j[615] = ct[13] * ct[56];
  proc_control_B.ct_j[616] = ct[664] * ct[761];
  proc_control_B.ct_j[617] = ct[664] * ct[794];
  std::memcpy(&proc_control_B.ct_j[618], &ct[294], 81U * sizeof(real_T));
  proc_control_B.ct_j[699] = ct[19] * ct[21] * ct[751] * ct[888];
  proc_control_B.ct_j[700] = ct[20] * ct[21] * ct[751] * ct[888];
  proc_control_B.ct_j[701] = ct[18] * ct[22] * ct[783] * ct[888];
  proc_control_B.ct_j[702] = ct[20] * ct[22] * ct[783] * ct[888];
  proc_control_B.ct_j[703] = ct[18] * ct[23] * ct[816] * ct[888];
  proc_control_B.ct_j[704] = ct[19] * ct[23] * ct[816] * ct[888];
  std::memcpy(&proc_control_B.ct_j[705], &ct[375], 11U * sizeof(real_T));
  proc_control_B.ct_j[716] = ct[62] * ct[83];
  proc_control_B.ct_j[717] = ct[19] * ct[91];
  proc_control_B.ct_j[718] = ct[20] * ct[92];
  proc_control_B.ct_j[719] = ct[20] * ct[96];
  proc_control_B.ct_j[720] = ct[20] * ct[98];
  proc_control_B.ct_j[721] = ct[386];
  proc_control_B.ct_j[722] = ct[62] * ct[99];
  proc_control_B.ct_j[723] = ct[18] * ct[101];
  proc_control_B.ct_j[724] = ct[20] * ct[102];
  proc_control_B.ct_j[725] = ct[387];
  proc_control_B.ct_j[726] = ct[20] * ct[111];
  proc_control_B.ct_j[727] = ct[20] * ct[114];
  proc_control_B.ct_j[728] = ct[388];
  proc_control_B.ct_j[729] = ct[62] * ct[108];
  proc_control_B.ct_j[730] = ct[18] * ct[116];
  proc_control_B.ct_j[731] = ct[19] * ct[117];
  proc_control_B.ct_j[732] = ct[19] * ct[122];
  proc_control_B.ct_j[733] = ct[19] * ct[124];
  proc_control_B.ct_j[734] = ct[18] * ct[131];
  proc_control_B.ct_j[735] = ct[18] * ct[133];
  proc_control_B.ct_j[736] = ct[20] * ct[135];
  std::memcpy(&proc_control_B.ct_j[737], &ct[389], 29U * sizeof(real_T));
  proc_control_B.ct_j[766] = ct[751] * ct[888] * ct[59];
  proc_control_B.ct_j[767] = ct[772] * ct[888] * ct[59];
  proc_control_B.ct_j[768] = ct[783] * ct[888] * ct[60];
  proc_control_B.ct_j[769] = ct[805] * ct[888] * ct[60];
  proc_control_B.ct_j[770] = ct[816] * ct[888] * ct[61];
  proc_control_B.ct_j[771] = ct[826] * ct[888] * ct[61];
  proc_control_B.ct_j[772] = ct[418];
  proc_control_B.ct_j[773] = ct[419];
  proc_control_B.ct_j[774] = ct[59] * ct[865];
  proc_control_B.ct_j[775] = ct[420];
  proc_control_B.ct_j[776] = ct[421];
  proc_control_B.ct_j[777] = ct[59] * ct[886];
  proc_control_B.ct_j[778] = ct[60] * ct[857];
  proc_control_B.ct_j[779] = ct[59] * ct[906];
  proc_control_B.ct_j[780] = ct[61] * ct[849];
  proc_control_B.ct_j[781] = ct[60] * ct[878];
  proc_control_B.ct_j[782] = ct[61] * ct[869];
  proc_control_B.ct_j[783] = ct[60] * ct[898];
  proc_control_B.ct_j[784] = ct[59] * ct[944];
  proc_control_B.ct_j[785] = ct[61] * ct[890];
  proc_control_B.ct_j[786] = ct[59] * ct[955];
  proc_control_B.ct_j[787] = ct[422];
  proc_control_B.ct_j[788] = ct[423];
  proc_control_B.ct_j[789] = ct[59] * ct[957];
  proc_control_B.ct_j[790] = ct[59] * ct[965];
  proc_control_B.ct_j[791] = ct[59] * ct[967];
  proc_control_B.ct_j[792] = ct[424];
  proc_control_B.ct_j[793] = ct[60] * ct[950];
  proc_control_B.ct_j[794] = ct[59] * ct[972];
  proc_control_B.ct_j[795] = ct[19] * ct[193];
  proc_control_B.ct_j[796] = ct[425];
  proc_control_B.ct_j[797] = ct[426];
  proc_control_B.ct_j[798] = ct[60] * ct[960];
  proc_control_B.ct_j[799] = ct[20] * ct[196];
  proc_control_B.ct_j[800] = ct[427];
  proc_control_B.ct_j[801] = ct[428];
  proc_control_B.ct_j[802] = ct[429];
  proc_control_B.ct_j[803] = ct[60] * ct[969];
  proc_control_B.ct_j[804] = ct[430];
  proc_control_B.ct_j[805] = ct[431];
  proc_control_B.ct_j[806] = ct[19] * ct[200];
  proc_control_B.ct_j[807] = ct[20] * ct[200];
  proc_control_B.ct_j[808] = ct[19] * ct[201];
  proc_control_B.ct_j[809] = ct[432];
  proc_control_B.ct_j[810] = ct[20] * ct[201];
  proc_control_B.ct_j[811] = ct[433];
  proc_control_B.ct_j[812] = ct[20] * ct[202];
  proc_control_B.ct_j[813] = ct[434];
  proc_control_B.ct_j[814] = ct[18] * ct[204];
  proc_control_B.ct_j[815] = ct[19] * ct[204];
  proc_control_B.ct_j[816] = ct[435];
  proc_control_B.ct_j[817] = ct[20] * ct[204];
  proc_control_B.ct_j[818] = ct[18] * ct[206];
  proc_control_B.ct_j[819] = ct[19] * ct[206];
  proc_control_B.ct_j[820] = ct[20] * ct[206];
  proc_control_B.ct_j[821] = ct[436];
  proc_control_B.ct_j[822] = ct[437];
  proc_control_B.ct_j[823] = ct[438];
  proc_control_B.ct_j[824] = ct[439];
  proc_control_B.ct_j[825] = ct[19] * ct[207];
  proc_control_B.ct_j[826] = ct[20] * ct[207];
  proc_control_B.ct_j[827] = ct[440];
  proc_control_B.ct_j[828] = ct[19] * ct[208];
  proc_control_B.ct_j[829] = ct[20] * ct[208];
  proc_control_B.ct_j[830] = ct[441];
  proc_control_B.ct_j[831] = ct[442];
  proc_control_B.ct_j[832] = ct[443];
  proc_control_B.ct_j[833] = ct[18] * ct[209];
  proc_control_B.ct_j[834] = ct[19] * ct[209];
  proc_control_B.ct_j[835] = ct[20] * ct[209];
  proc_control_B.ct_j[836] = ct[19] * ct[210];
  proc_control_B.ct_j[837] = ct[18] * ct[211];
  proc_control_B.ct_j[838] = ct[444];
  proc_control_B.ct_j[839] = ct[19] * ct[211];
  proc_control_B.ct_j[840] = ct[20] * ct[211];
  proc_control_B.ct_j[841] = ct[445];
  proc_control_B.ct_j[842] = ct[446];
  proc_control_B.ct_j[843] = ct[19] * ct[212];
  proc_control_B.ct_j[844] = ct[447];
  proc_control_B.ct_tmp_fo = ct[18] * ct[19] * ct[20] * ct[888];
  proc_control_B.ct_j[845] = proc_control_B.ct_tmp_fo * ct[59];
  proc_control_B.ct_j[846] = ct[448];
  proc_control_B.ct_j[847] = ct[449];
  proc_control_B.ct_j[848] = ct[450];
  proc_control_B.ct_j[849] = ct[451];
  proc_control_B.ct_j[850] = ct[18] * ct[213];
  proc_control_B.ct_j[851] = ct[452];
  proc_control_B.ct_j[852] = ct[19] * ct[213];
  proc_control_B.ct_j[853] = ct[18] * ct[214];
  proc_control_B.ct_j[854] = ct[19] * ct[214];
  proc_control_B.ct_j[855] = ct[20] * ct[214];
  proc_control_B.ct_j[856] = ct[18] * ct[215];
  proc_control_B.ct_j[857] = ct[19] * ct[215];
  proc_control_B.ct_j[858] = ct[453];
  proc_control_B.ct_j[859] = ct[18] * ct[217];
  proc_control_B.ct_j[860] = ct[19] * ct[217];
  proc_control_B.ct_j[861] = ct[20] * ct[217];
  proc_control_B.ct_j[862] = ct[454];
  proc_control_B.ct_j[863] = ct[455];
  proc_control_B.ct_j[864] = ct[20] * ct[219];
  proc_control_B.ct_j[865] = ct[20] * ct[220];
  proc_control_B.ct_j[866] = ct[456];
  proc_control_B.ct_j[867] = proc_control_B.ct_tmp_fo * ct[61];
  proc_control_B.ct_j[868] = -ct[85];
  proc_control_B.ct_j[869] = -ct[86];
  proc_control_B.ct_j[870] = ct[457];
  proc_control_B.ct_j[871] = -ct[90];
  proc_control_B.ct_j[872] = -ct[92];
  proc_control_B.ct_j[873] = -ct[93];
  proc_control_B.ct_j[874] = -ct[94];
  proc_control_B.ct_j[875] = -ct[96];
  proc_control_B.ct_j[876] = -ct[97];
  proc_control_B.ct_j[877] = -ct[102];
  proc_control_B.ct_j[878] = -ct[103];
  proc_control_B.ct_j[879] = -ct[104];
  proc_control_B.ct_j[880] = -ct[106];
  proc_control_B.ct_j[881] = ct[458];
  proc_control_B.ct_j[882] = -ct[109];
  proc_control_B.ct_j[883] = -ct[111];
  proc_control_B.ct_j[884] = -ct[112];
  proc_control_B.ct_j[885] = -ct[113];
  proc_control_B.ct_j[886] = -ct[117];
  std::memcpy(&proc_control_B.ct_j[887], &ct[459], 170U * sizeof(real_T));
  proc_control_B.ct_j[1057] = ct[629];
  proc_control_B.ct_j[1058] = ct[631];
  proc_control_B.ct_j[1059] = ct[632];
  proc_control_B.ct_j[1060] = ct[633];
  proc_control_B.ct_j[1061] = ct[635];
  proc_control_B.ct_j[1062] = ct[636];
  proc_control_B.ct_j[1063] = ct[637];
  proc_control_B.ct_j[1064] = ct[639];
  proc_control_B.ct_j[1065] = ct[640];
  proc_control_B.ct_j[1066] = ct[641];
  proc_control_B.ct_j[1067] = ct[643];
  proc_control_B.ct_j[1068] = ct[644];
  proc_control_B.ct_j[1069] = ct[645];
  proc_control_B.ct_j[1070] = ct[648];
  proc_control_B.ct_j[1071] = ct[649];
  proc_control_B.ct_j[1072] = ct[652];
  proc_control_B.ct_j[1073] = ct[653];
  proc_control_B.ct_j[1074] = ct[656];
  proc_control_B.ct_j[1075] = ct[657];
  std::memcpy(&proc_control_B.ct_j[1076], &ct[659], 73U * sizeof(real_T));
  proc_control_B.ct_j[1149] = ct[732];
  proc_control_B.ct_j[1150] = ct[735];
  proc_control_B.ct_j[1151] = ct[736];
  proc_control_B.ct_j[1152] = ct[738];
  proc_control_B.ct_j[1153] = ct[739];
  proc_control_B.ct_j[1154] = ct[740];
  proc_control_B.ct_j[1155] = ct[741];
  proc_control_B.ct_j[1156] = ct[742];
  proc_control_B.ct_j[1157] = ct[743];
  proc_control_B.ct_j[1158] = ct[744];
  proc_control_B.ct_j[1159] = ct[746];
  proc_control_B.ct_j[1160] = ct[747];
  proc_control_B.ct_j[1161] = ct[749];
  proc_control_B.ct_j[1162] = ct[750];
  std::memcpy(&proc_control_B.ct_j[1163], &ct[753], 18U * sizeof(real_T));
  proc_control_B.ct_j[1181] = ct[771];
  std::memcpy(&proc_control_B.ct_j[1182], &ct[773], 9U * sizeof(real_T));
  proc_control_B.ct_j[1191] = ct[782];
  std::memcpy(&proc_control_B.ct_j[1192], &ct[784], 20U * sizeof(real_T));
  proc_control_B.ct_j[1212] = ct[804];
  std::memcpy(&proc_control_B.ct_j[1213], &ct[806], 9U * sizeof(real_T));
  proc_control_B.ct_j[1222] = ct[815];
  proc_control_B.ct_j[1223] = ct[817];
  proc_control_B.ct_j[1224] = ct[818];
  proc_control_B.ct_j[1225] = ct[819];
  proc_control_B.ct_j[1226] = ct[820];
  proc_control_B.ct_j[1227] = ct[821];
  proc_control_B.ct_j[1228] = ct[822];
  proc_control_B.ct_j[1229] = ct[823];
  proc_control_B.ct_j[1230] = ct[824];
  std::memcpy(&proc_control_B.ct_j[1231], &ct[827], 24U * sizeof(real_T));
  proc_control_B.ct_j[1255] = ct[851];
  proc_control_B.ct_j[1256] = ct[853];
  proc_control_B.ct_j[1257] = ct[854];
  proc_control_B.ct_j[1258] = ct[855];
  proc_control_B.ct_j[1259] = ct[856];
  proc_control_B.ct_j[1260] = ct[857];
  proc_control_B.ct_j[1261] = ct[858];
  proc_control_B.ct_j[1262] = ct[859];
  std::memcpy(&proc_control_B.ct_j[1263], &ct[861], 31U * sizeof(real_T));
  proc_control_B.ct_j[1294] = ct[892];
  proc_control_B.ct_j[1295] = ct[894];
  proc_control_B.ct_j[1296] = ct[895];
  proc_control_B.ct_j[1297] = ct[896];
  proc_control_B.ct_j[1298] = ct[897];
  proc_control_B.ct_j[1299] = ct[898];
  proc_control_B.ct_j[1300] = ct[899];
  proc_control_B.ct_j[1301] = ct[900];
  std::memcpy(&proc_control_B.ct_j[1302], &ct[902], 39U * sizeof(real_T));
  proc_control_B.ct_j[1341] = ct[941];
  std::memcpy(&proc_control_B.ct_j[1342], &ct[944], 18U * sizeof(real_T));
  proc_control_B.ct_j[1360] = ct[962];
  proc_control_B.ct_j[1361] = ct[964];
  proc_control_B.ct_j[1362] = ct[965];
  std::memcpy(&proc_control_B.ct_j[1363], &ct[967], 17U * sizeof(real_T));
  proc_control_B.ct_j[1380] = ct[984];
  proc_control_B.ct_j[1381] = ct[986];
  proc_control_B.ct_j[1382] = ct[987];
  std::memcpy(&proc_control_B.ct_j[1383], &ct[990], 85U * sizeof(real_T));
  proc_control_B.ct_j[1468] = ct[1075];
  proc_control_B.ct_j[1469] = ct[1078];
  proc_control_B.ct_j[1470] = ct[1079];
  proc_control_B.ct_j[1471] = ct[1089];
  proc_control_B.ct_j[1472] = ct[1091];
  std::memcpy(&proc_control_B.ct_j[1473], &ct[1093], 167U * sizeof(real_T));
  proc_control_ft_4(proc_control_B.ct_j, Anq);
}

void proc_control::proc_control_ft_2(const real_T ct[805], real_T Anq[169])
{
  std::memcpy(&proc_control_B.ct_n[0], &ct[0], 34U * sizeof(real_T));
  proc_control_B.ct_n[34] = ct[31] * ct[319];
  proc_control_B.ct_n[35] = ct[15] * ct[447] * ct[504];
  proc_control_B.ct_n[36] = ct[15] * ct[452] * ct[504];
  proc_control_B.ct_n[37] = ct[15] * ct[457] * ct[504];
  proc_control_B.ct_n[38] = ct[15] * ct[458] * ct[504];
  proc_control_B.ct_n[39] = ct[15] * ct[460] * ct[504];
  proc_control_B.ct_tmp_fm = ct[16] * ct[447];
  proc_control_B.ct_n[40] = proc_control_B.ct_tmp_fm * ct[504];
  proc_control_B.ct_tmp_gr1 = ct[16] * ct[457];
  proc_control_B.ct_n[41] = proc_control_B.ct_tmp_gr1 * ct[504];
  proc_control_B.ct_n[42] = ct[16] * ct[459] * ct[504];
  proc_control_B.ct_n[43] = ct[34];
  proc_control_B.ct_n[44] = ct[16] * ct[460] * ct[504];
  proc_control_B.ct_n[45] = ct[16] * ct[461] * ct[504];
  proc_control_B.ct_tmp_b0 = ct[17] * ct[447];
  proc_control_B.ct_n[46] = proc_control_B.ct_tmp_b0 * ct[504];
  proc_control_B.ct_tmp_k1 = ct[17] * ct[457];
  proc_control_B.ct_n[47] = proc_control_B.ct_tmp_k1 * ct[504];
  proc_control_B.ct_tmp_kw = ct[17] * ct[460];
  proc_control_B.ct_n[48] = proc_control_B.ct_tmp_kw * ct[504];
  proc_control_B.ct_n[49] = ct[17] * ct[463] * ct[504];
  proc_control_B.ct_n[50] = ct[17] * ct[465] * ct[504];
  std::memcpy(&proc_control_B.ct_n[51], &ct[35], 20U * sizeof(real_T));
  proc_control_B.ct_n[71] = ct[55];
  proc_control_B.ct_n[72] = ct[62];
  proc_control_B.ct_n[73] = ct[63];
  proc_control_B.ct_n[74] = ct[64];
  std::memcpy(&proc_control_B.ct_n[75], &ct[66], 162U * sizeof(real_T));
  proc_control_B.ct_n[237] = ct[46] * ct[382];
  proc_control_B.ct_n[238] = ct[46] * ct[383];
  proc_control_B.ct_n[239] = ct[46] * ct[386];
  proc_control_B.ct_n[240] = ct[46] * ct[388];
  proc_control_B.ct_n[241] = ct[46] * ct[389];
  proc_control_B.ct_n[242] = ct[46] * ct[392];
  proc_control_B.ct_n[243] = ct[46] * ct[394];
  proc_control_B.ct_n[244] = ct[46] * ct[395];
  proc_control_B.ct_n[245] = ct[46] * ct[398];
  proc_control_B.ct_n[246] = ct[228];
  proc_control_B.ct_n[247] = ct[43] * ct[257];
  proc_control_B.ct_n[248] = ct[43] * ct[271];
  proc_control_B.ct_n[249] = ct[44] * ct[250];
  proc_control_B.ct_n[250] = ct[43] * ct[286];
  proc_control_B.ct_n[251] = ct[45] * ct[244];
  proc_control_B.ct_n[252] = ct[44] * ct[265];
  proc_control_B.ct_n[253] = ct[45] * ct[258];
  proc_control_B.ct_n[254] = ct[44] * ct[279];
  proc_control_B.ct_n[255] = ct[45] * ct[273];
  proc_control_B.ct_tmp_g5 = ct[8] * ct[9] * ct[18] * ct[21];
  proc_control_B.ct_n[256] = proc_control_B.ct_tmp_g5 * ct[22] * ct[46];
  proc_control_B.ct_n[257] = ct[229];
  proc_control_B.ct_tmp_o2 = ct[7] * ct[12] * ct[18] * ct[21];
  proc_control_B.ct_n[258] = proc_control_B.ct_tmp_o2 * ct[22] * ct[46];
  proc_control_B.ct_tmp_gy = ct[6] * ct[14];
  proc_control_B.ct_n[259] = proc_control_B.ct_tmp_gy * ct[18] * ct[21] * ct[22]
    * ct[46];
  proc_control_B.ct_tmp_gf = ct[10] * ct[14];
  proc_control_B.ct_n[260] = proc_control_B.ct_tmp_gf * ct[19] * ct[21] * ct[22]
    * ct[46];
  proc_control_B.ct_tmp_ad = ct[6] * ct[10];
  proc_control_B.ct_n[261] = proc_control_B.ct_tmp_ad * ct[18] * ct[21] * ct[23]
    * ct[46];
  proc_control_B.ct_n[262] = ct[230];
  proc_control_B.ct_n[263] = proc_control_B.ct_tmp_g5 * ct[23] * ct[46];
  proc_control_B.ct_n[264] = proc_control_B.ct_tmp_o2 * ct[23] * ct[46];
  proc_control_B.ct_n[265] = proc_control_B.ct_tmp_gf * ct[20] * ct[21] * ct[23]
    * ct[46];
  proc_control_B.ct_n[266] = proc_control_B.ct_tmp_ad * ct[19] * ct[22] * ct[23]
    * ct[46];
  proc_control_B.ct_n[267] = ct[231];
  proc_control_B.ct_n[268] = proc_control_B.ct_tmp_gy * ct[20] * ct[22] * ct[23]
    * ct[46];
  proc_control_B.ct_n[269] = ct[8] * ct[13] * ct[20] * ct[22] * ct[23] * ct[46];
  proc_control_B.ct_n[270] = ct[11] * ct[12] * ct[20] * ct[22] * ct[23] * ct[46];
  proc_control_B.ct_tmp_tmp_ih = ct[11] * ct[18];
  proc_control_B.ct_tmp_g5 = proc_control_B.ct_tmp_tmp_ih * ct[21];
  proc_control_B.ct_n[271] = proc_control_B.ct_tmp_g5 * ct[22] * ct[29] * ct[43];
  proc_control_B.ct_tmp_tmp_j = ct[13] * ct[18];
  proc_control_B.ct_tmp_o2 = proc_control_B.ct_tmp_tmp_j * ct[21];
  proc_control_B.ct_n[272] = proc_control_B.ct_tmp_o2 * ct[22] * ct[29] * ct[43];
  proc_control_B.ct_n[273] = ct[43] * ct[313];
  proc_control_B.ct_n[274] = proc_control_B.ct_tmp_g5 * ct[23] * ct[29] * ct[43];
  proc_control_B.ct_n[275] = proc_control_B.ct_tmp_o2 * ct[23] * ct[29] * ct[43];
  proc_control_B.ct_n[276] = ct[43] * ct[315];
  proc_control_B.ct_n[277] = ct[43] * ct[316];
  proc_control_B.ct_n[278] = ct[7] * ct[20] * ct[22] * ct[23] * ct[29] * ct[45];
  proc_control_B.ct_n[279] = ct[9] * ct[20] * ct[22] * ct[23] * ct[29] * ct[45];
  proc_control_B.ct_tmp_g5 = ct[16] * ct[18];
  proc_control_B.ct_n[280] = proc_control_B.ct_tmp_g5 * ct[21] * ct[23] * ct[29]
    * ct[43];
  proc_control_B.ct_tmp_o2 = ct[17] * ct[18];
  proc_control_B.ct_n[281] = proc_control_B.ct_tmp_o2 * ct[21] * ct[22] * ct[29]
    * ct[43];
  proc_control_B.ct_n[282] = ct[232];
  proc_control_B.ct_n[283] = ct[16] * ct[19] * ct[22] * ct[23] * ct[29] * ct[43];
  proc_control_B.ct_n[284] = ct[17] * ct[19] * ct[21] * ct[22] * ct[29] * ct[44];
  proc_control_B.ct_tmp_gy = ct[17] * ct[20];
  proc_control_B.ct_n[285] = proc_control_B.ct_tmp_gy * ct[22] * ct[23] * ct[29]
    * ct[43];
  proc_control_B.ct_n[286] = proc_control_B.ct_tmp_gy * ct[21] * ct[23] * ct[29]
    * ct[44];
  proc_control_B.ct_n[287] = ct[233];
  proc_control_B.ct_n[288] = ct[234];
  proc_control_B.ct_n[289] = ct[235];
  proc_control_B.ct_n[290] = ct[236];
  proc_control_B.ct_n[291] = ct[237];
  proc_control_B.ct_n[292] = ct[238];
  proc_control_B.ct_n[293] = ct[239];
  proc_control_B.ct_tmp_gy = ct[6] * ct[21];
  proc_control_B.ct_tmp_gf = proc_control_B.ct_tmp_gy * ct[447];
  proc_control_B.ct_n[294] = proc_control_B.ct_tmp_gf * ct[494];
  proc_control_B.ct_n[295] = proc_control_B.ct_tmp_gy * ct[452] * ct[494];
  proc_control_B.ct_tmp_ad = ct[7] * ct[21];
  proc_control_B.ct_n[296] = proc_control_B.ct_tmp_ad * ct[447] * ct[494];
  proc_control_B.ct_n[297] = proc_control_B.ct_tmp_ad * ct[452] * ct[494];
  proc_control_B.ct_tmp_bp = ct[8] * ct[21];
  proc_control_B.ct_n[298] = proc_control_B.ct_tmp_bp * ct[447] * ct[494];
  proc_control_B.ct_n[299] = proc_control_B.ct_tmp_bp * ct[452] * ct[494];
  proc_control_B.ct_tmp_kn = ct[9] * ct[21];
  proc_control_B.ct_n[300] = proc_control_B.ct_tmp_kn * ct[447] * ct[494];
  proc_control_B.ct_n[301] = proc_control_B.ct_tmp_kn * ct[452] * ct[494];
  proc_control_B.ct_tmp_ca = ct[10] * ct[21];
  proc_control_B.ct_tmp_nj = proc_control_B.ct_tmp_ca * ct[447];
  proc_control_B.ct_n[302] = proc_control_B.ct_tmp_nj * ct[494];
  proc_control_B.ct_tmp_myu = proc_control_B.ct_tmp_ca * ct[457];
  proc_control_B.ct_n[303] = proc_control_B.ct_tmp_myu * ct[494];
  proc_control_B.ct_tmp_dk = proc_control_B.ct_tmp_ca * ct[460];
  proc_control_B.ct_n[304] = proc_control_B.ct_tmp_dk * ct[494];
  proc_control_B.ct_tmp_ji = ct[11] * ct[21];
  proc_control_B.ct_n[305] = proc_control_B.ct_tmp_ji * ct[457] * ct[494];
  proc_control_B.ct_n[306] = proc_control_B.ct_tmp_ji * ct[460] * ct[494];
  proc_control_B.ct_tmp_al = ct[12] * ct[21];
  proc_control_B.ct_n[307] = proc_control_B.ct_tmp_al * ct[447] * ct[494];
  proc_control_B.ct_n[308] = proc_control_B.ct_tmp_al * ct[452] * ct[494];
  proc_control_B.ct_tmp_dm = ct[13] * ct[21];
  proc_control_B.ct_n[309] = proc_control_B.ct_tmp_dm * ct[457] * ct[494];
  proc_control_B.ct_tmp_cx = ct[14] * ct[21];
  proc_control_B.ct_tmp_hx = proc_control_B.ct_tmp_cx * ct[447];
  proc_control_B.ct_n[310] = proc_control_B.ct_tmp_hx * ct[494];
  proc_control_B.ct_n[311] = proc_control_B.ct_tmp_dm * ct[460] * ct[494];
  proc_control_B.ct_tmp_jb = proc_control_B.ct_tmp_cx * ct[457];
  proc_control_B.ct_n[312] = proc_control_B.ct_tmp_jb * ct[494];
  proc_control_B.ct_tmp_f0 = proc_control_B.ct_tmp_cx * ct[460];
  proc_control_B.ct_n[313] = proc_control_B.ct_tmp_f0 * ct[494];
  proc_control_B.ct_tmp_d0 = ct[6] * ct[22];
  proc_control_B.ct_tmp_bwe = proc_control_B.ct_tmp_d0 * ct[447];
  proc_control_B.ct_n[314] = proc_control_B.ct_tmp_bwe * ct[494];
  proc_control_B.ct_tmp_cj = proc_control_B.ct_tmp_d0 * ct[457];
  proc_control_B.ct_n[315] = proc_control_B.ct_tmp_cj * ct[494];
  proc_control_B.ct_tmp_kg = proc_control_B.ct_tmp_d0 * ct[460];
  proc_control_B.ct_n[316] = proc_control_B.ct_tmp_kg * ct[494];
  proc_control_B.ct_tmp_a2 = ct[7] * ct[22];
  proc_control_B.ct_n[317] = proc_control_B.ct_tmp_a2 * ct[457] * ct[494];
  proc_control_B.ct_tmp_bo = ct[8] * ct[22];
  proc_control_B.ct_n[318] = proc_control_B.ct_tmp_bo * ct[447] * ct[494];
  proc_control_B.ct_n[319] = proc_control_B.ct_tmp_a2 * ct[459] * ct[494];
  proc_control_B.ct_n[320] = proc_control_B.ct_tmp_bo * ct[460] * ct[494];
  proc_control_B.ct_tmp_gu = ct[9] * ct[22];
  proc_control_B.ct_n[321] = proc_control_B.ct_tmp_gu * ct[457] * ct[494];
  proc_control_B.ct_n[322] = proc_control_B.ct_tmp_gu * ct[459] * ct[494];
  proc_control_B.ct_tmp_fb = ct[10] * ct[22];
  proc_control_B.ct_tmp_ni = proc_control_B.ct_tmp_fb * ct[457];
  proc_control_B.ct_n[323] = proc_control_B.ct_tmp_ni * ct[494];
  proc_control_B.ct_n[324] = proc_control_B.ct_tmp_fb * ct[459] * ct[494];
  proc_control_B.ct_tmp_cgx = ct[11] * ct[22];
  proc_control_B.ct_n[325] = proc_control_B.ct_tmp_cgx * ct[457] * ct[494];
  proc_control_B.ct_n[326] = proc_control_B.ct_tmp_cgx * ct[459] * ct[494];
  proc_control_B.ct_tmp_cgx = ct[12] * ct[22];
  proc_control_B.ct_n[327] = proc_control_B.ct_tmp_cgx * ct[447] * ct[494];
  proc_control_B.ct_n[328] = proc_control_B.ct_tmp_cgx * ct[460] * ct[494];
  proc_control_B.ct_tmp_pn0 = ct[13] * ct[22];
  proc_control_B.ct_n[329] = proc_control_B.ct_tmp_pn0 * ct[457] * ct[494];
  proc_control_B.ct_tmp_at = ct[14] * ct[22];
  proc_control_B.ct_tmp_mm = proc_control_B.ct_tmp_at * ct[447];
  proc_control_B.ct_n[330] = proc_control_B.ct_tmp_mm * ct[494];
  proc_control_B.ct_n[331] = proc_control_B.ct_tmp_pn0 * ct[459] * ct[494];
  proc_control_B.ct_tmp_pn0 = proc_control_B.ct_tmp_at * ct[457];
  proc_control_B.ct_n[332] = proc_control_B.ct_tmp_pn0 * ct[494];
  proc_control_B.ct_tmp_guo = proc_control_B.ct_tmp_at * ct[460];
  proc_control_B.ct_n[333] = proc_control_B.ct_tmp_guo * ct[494];
  proc_control_B.ct_tmp_noc = ct[6] * ct[23];
  proc_control_B.ct_tmp_n4 = proc_control_B.ct_tmp_noc * ct[447];
  proc_control_B.ct_n[334] = proc_control_B.ct_tmp_n4 * ct[494];
  proc_control_B.ct_tmp_p2x = proc_control_B.ct_tmp_noc * ct[457];
  proc_control_B.ct_n[335] = proc_control_B.ct_tmp_p2x * ct[494];
  proc_control_B.ct_tmp_hl = ct[7] * ct[23];
  proc_control_B.ct_n[336] = proc_control_B.ct_tmp_hl * ct[447] * ct[494];
  proc_control_B.ct_tmp_noc *= ct[460];
  proc_control_B.ct_n[337] = proc_control_B.ct_tmp_noc * ct[494];
  proc_control_B.ct_n[338] = proc_control_B.ct_tmp_hl * ct[457] * ct[494];
  proc_control_B.ct_tmp_hl = ct[8] * ct[23];
  proc_control_B.ct_n[339] = proc_control_B.ct_tmp_hl * ct[460] * ct[494];
  proc_control_B.ct_n[340] = proc_control_B.ct_tmp_hl * ct[463] * ct[494];
  proc_control_B.ct_tmp_hl = ct[9] * ct[23];
  proc_control_B.ct_n[341] = proc_control_B.ct_tmp_hl * ct[447] * ct[494];
  proc_control_B.ct_n[342] = proc_control_B.ct_tmp_hl * ct[457] * ct[494];
  proc_control_B.ct_tmp_hl = ct[10] * ct[23];
  proc_control_B.ct_tmp_ng = proc_control_B.ct_tmp_hl * ct[447];
  proc_control_B.ct_n[343] = proc_control_B.ct_tmp_ng * ct[494];
  proc_control_B.ct_tmp_gt = proc_control_B.ct_tmp_hl * ct[457];
  proc_control_B.ct_n[344] = proc_control_B.ct_tmp_gt * ct[494];
  proc_control_B.ct_tmp_hl *= ct[460];
  proc_control_B.ct_n[345] = proc_control_B.ct_tmp_hl * ct[494];
  proc_control_B.ct_tmp_m = ct[11] * ct[23];
  proc_control_B.ct_n[346] = proc_control_B.ct_tmp_m * ct[460] * ct[494];
  proc_control_B.ct_n[347] = proc_control_B.ct_tmp_m * ct[463] * ct[494];
  proc_control_B.ct_tmp_m = ct[12] * ct[23];
  proc_control_B.ct_n[348] = proc_control_B.ct_tmp_m * ct[460] * ct[494];
  proc_control_B.ct_n[349] = proc_control_B.ct_tmp_m * ct[463] * ct[494];
  proc_control_B.ct_tmp_m = ct[13] * ct[23];
  proc_control_B.ct_n[350] = proc_control_B.ct_tmp_m * ct[460] * ct[494];
  proc_control_B.ct_n[351] = proc_control_B.ct_tmp_m * ct[463] * ct[494];
  proc_control_B.ct_tmp_m = ct[14] * ct[23];
  proc_control_B.ct_tmp_d1 = proc_control_B.ct_tmp_m * ct[460];
  proc_control_B.ct_n[352] = proc_control_B.ct_tmp_d1 * ct[494];
  proc_control_B.ct_n[353] = proc_control_B.ct_tmp_m * ct[463] * ct[494];
  proc_control_B.ct_n[354] = ct[240];
  proc_control_B.ct_tmp_m = ct[15] * ct[21];
  proc_control_B.ct_n[355] = proc_control_B.ct_tmp_m * ct[452] * ct[494];
  proc_control_B.ct_tmp_ch = ct[18] * ct[19];
  proc_control_B.ct_n[356] = proc_control_B.ct_tmp_ch * ct[460] * ct[514];
  proc_control_B.ct_tmp_mp = ct[18] * ct[20];
  proc_control_B.ct_n[357] = proc_control_B.ct_tmp_mp * ct[457] * ct[514];
  proc_control_B.ct_tmp_en = ct[19] * ct[20];
  proc_control_B.ct_n[358] = proc_control_B.ct_tmp_en * ct[447] * ct[514];
  proc_control_B.ct_tmp_f5 = ct[15] * ct[22];
  proc_control_B.ct_n[359] = proc_control_B.ct_tmp_f5 * ct[447] * ct[494];
  proc_control_B.ct_n[360] = proc_control_B.ct_tmp_f5 * ct[457] * ct[494];
  proc_control_B.ct_tmp_bw = ct[16] * ct[21];
  proc_control_B.ct_n[361] = proc_control_B.ct_tmp_bw * ct[447] * ct[494];
  proc_control_B.ct_n[362] = proc_control_B.ct_tmp_bw * ct[457] * ct[494];
  proc_control_B.ct_tmp_e = ct[15] * ct[23];
  proc_control_B.ct_n[363] = proc_control_B.ct_tmp_e * ct[447] * ct[494];
  proc_control_B.ct_n[364] = proc_control_B.ct_tmp_e * ct[460] * ct[494];
  proc_control_B.ct_tmp_e = ct[17] * ct[21];
  proc_control_B.ct_n[365] = proc_control_B.ct_tmp_e * ct[447] * ct[494];
  proc_control_B.ct_tmp_ap = ct[16] * ct[22];
  proc_control_B.ct_n[366] = proc_control_B.ct_tmp_ap * ct[459] * ct[494];
  proc_control_B.ct_n[367] = ct[241];
  proc_control_B.ct_n[368] = proc_control_B.ct_tmp_e * ct[460] * ct[494];
  proc_control_B.ct_tmp_nz = ct[16] * ct[23];
  proc_control_B.ct_n[369] = proc_control_B.ct_tmp_nz * ct[457] * ct[494];
  proc_control_B.ct_tmp_p4 = ct[17] * ct[22];
  proc_control_B.ct_n[370] = proc_control_B.ct_tmp_p4 * ct[457] * ct[494];
  proc_control_B.ct_n[371] = proc_control_B.ct_tmp_nz * ct[460] * ct[494];
  proc_control_B.ct_n[372] = proc_control_B.ct_tmp_p4 * ct[460] * ct[494];
  proc_control_B.ct_n[373] = ct[17] * ct[23] * ct[463] * ct[494];
  std::memcpy(&proc_control_B.ct_n[374], &ct[242], 10U * sizeof(real_T));
  proc_control_B.ct_tmp_nz = ct[357] - ct[803];
  proc_control_B.ct_n[384] = proc_control_B.ct_tmp_nz * ct[46];
  proc_control_B.ct_n[385] = ct[252];
  proc_control_B.ct_tmp_bwc = ct[403] - ct[802];
  proc_control_B.ct_n[386] = proc_control_B.ct_tmp_bwc * ct[46];
  proc_control_B.ct_n[387] = ct[253];
  proc_control_B.ct_tmp_ix = ct[368] - ct[804];
  proc_control_B.ct_n[388] = proc_control_B.ct_tmp_ix * ct[46];
  proc_control_B.ct_tmp_lj = ct[7] * ct[18];
  proc_control_B.ct_tmp_cl = proc_control_B.ct_tmp_lj * ct[19];
  proc_control_B.ct_n[389] = proc_control_B.ct_tmp_cl * ct[21] * ct[22] * ct[484];
  proc_control_B.ct_tmp_ce = ct[8] * ct[18];
  proc_control_B.ct_tmp_cd = proc_control_B.ct_tmp_ce * ct[19];
  proc_control_B.ct_n[390] = proc_control_B.ct_tmp_cd * ct[21] * ct[22] * ct[484];
  proc_control_B.ct_tmp_gr = ct[9] * ct[18];
  proc_control_B.ct_tmp_lx = proc_control_B.ct_tmp_gr * ct[19];
  proc_control_B.ct_n[391] = proc_control_B.ct_tmp_lx * ct[21] * ct[22] * ct[484];
  proc_control_B.ct_tmp_l1 = proc_control_B.ct_tmp_tmp_ih * ct[19];
  proc_control_B.ct_n[392] = proc_control_B.ct_tmp_l1 * ct[21] * ct[22] * ct[484];
  proc_control_B.ct_tmp_c5 = ct[12] * ct[18];
  proc_control_B.ct_tmp_fbn = proc_control_B.ct_tmp_c5 * ct[19];
  proc_control_B.ct_n[393] = proc_control_B.ct_tmp_fbn * ct[21] * ct[22] * ct
    [484];
  proc_control_B.ct_tmp_dd = proc_control_B.ct_tmp_tmp_j * ct[19];
  proc_control_B.ct_n[394] = proc_control_B.ct_tmp_dd * ct[21] * ct[22] * ct[484];
  proc_control_B.ct_n[395] = ct[254];
  proc_control_B.ct_tmp_ev = ct[14] * ct[18];
  proc_control_B.ct_tmp_ls = proc_control_B.ct_tmp_ev * ct[19];
  proc_control_B.ct_n[396] = proc_control_B.ct_tmp_ls * ct[21] * ct[22] * ct[484];
  proc_control_B.ct_tmp_nm = proc_control_B.ct_tmp_lj * ct[20];
  proc_control_B.ct_n[397] = proc_control_B.ct_tmp_nm * ct[21] * ct[23] * ct[484];
  proc_control_B.ct_tmp_nq = proc_control_B.ct_tmp_ce * ct[20];
  proc_control_B.ct_n[398] = proc_control_B.ct_tmp_nq * ct[21] * ct[23] * ct[484];
  proc_control_B.ct_tmp_ge = proc_control_B.ct_tmp_gr * ct[20];
  proc_control_B.ct_n[399] = proc_control_B.ct_tmp_ge * ct[21] * ct[23] * ct[484];
  proc_control_B.ct_tmp_ly = ct[10] * ct[18];
  proc_control_B.ct_tmp_ko = proc_control_B.ct_tmp_ly * ct[20];
  proc_control_B.ct_n[400] = proc_control_B.ct_tmp_ko * ct[21] * ct[23] * ct[484];
  proc_control_B.ct_tmp_bf = proc_control_B.ct_tmp_tmp_ih * ct[20];
  proc_control_B.ct_n[401] = proc_control_B.ct_tmp_bf * ct[21] * ct[23] * ct[484];
  proc_control_B.ct_tmp_oo = proc_control_B.ct_tmp_c5 * ct[20];
  proc_control_B.ct_n[402] = proc_control_B.ct_tmp_oo * ct[21] * ct[23] * ct[484];
  proc_control_B.ct_tmp_tmp_j *= ct[20];
  proc_control_B.ct_n[403] = proc_control_B.ct_tmp_tmp_j * ct[21] * ct[23] * ct
    [484];
  proc_control_B.ct_tmp_fi = ct[6] * ct[19];
  proc_control_B.ct_tmp_n2 = proc_control_B.ct_tmp_fi * ct[20];
  proc_control_B.ct_n[404] = proc_control_B.ct_tmp_n2 * ct[22] * ct[23] * ct[484];
  proc_control_B.ct_tmp_po = ct[7] * ct[19];
  proc_control_B.ct_tmp_dkf = proc_control_B.ct_tmp_po * ct[20];
  proc_control_B.ct_n[405] = proc_control_B.ct_tmp_dkf * ct[22] * ct[23] * ct
    [484];
  proc_control_B.ct_n[406] = ct[255];
  proc_control_B.ct_n[407] = ct[256];
  proc_control_B.ct_tmp_guh = ct[8] * ct[19] * ct[20];
  proc_control_B.ct_n[408] = proc_control_B.ct_tmp_guh * ct[22] * ct[23] * ct
    [484];
  proc_control_B.ct_tmp_p2 = ct[9] * ct[19];
  proc_control_B.ct_tmp_pv = proc_control_B.ct_tmp_p2 * ct[20];
  proc_control_B.ct_n[409] = proc_control_B.ct_tmp_pv * ct[22] * ct[23] * ct[484];
  proc_control_B.ct_tmp_g4 = ct[11] * ct[19];
  proc_control_B.ct_tmp_cxc = proc_control_B.ct_tmp_g4 * ct[20];
  proc_control_B.ct_n[410] = proc_control_B.ct_tmp_cxc * ct[22] * ct[23] * ct
    [484];
  proc_control_B.ct_tmp_ld = ct[12] * ct[19] * ct[20];
  proc_control_B.ct_n[411] = proc_control_B.ct_tmp_ld * ct[22] * ct[23] * ct[484];
  proc_control_B.ct_tmp_bn = ct[13] * ct[19];
  proc_control_B.ct_tmp_dr = proc_control_B.ct_tmp_bn * ct[20];
  proc_control_B.ct_n[412] = proc_control_B.ct_tmp_dr * ct[22] * ct[23] * ct[484];
  proc_control_B.ct_tmp_ku = ct[15] * ct[19] * ct[20];
  proc_control_B.ct_n[413] = proc_control_B.ct_tmp_ku * ct[22] * ct[23] * ct[484];
  proc_control_B.ct_tmp_o2 *= ct[19];
  proc_control_B.ct_n[414] = proc_control_B.ct_tmp_o2 * ct[21] * ct[22] * ct[484];
  proc_control_B.ct_tmp_g5 *= ct[20];
  proc_control_B.ct_n[415] = proc_control_B.ct_tmp_g5 * ct[21] * ct[23] * ct[484];
  std::memcpy(&proc_control_B.ct_n[416], &ct[257], 12U * sizeof(real_T));
  proc_control_B.ct_n[428] = proc_control_B.ct_tmp_ly * ct[21] * ct[484] * ct[43];
  proc_control_B.ct_n[429] = proc_control_B.ct_tmp_ev * ct[21] * ct[484] * ct[43];
  proc_control_B.ct_tmp_dt = ct[10] * ct[19];
  proc_control_B.ct_tmp_oi = proc_control_B.ct_tmp_dt * ct[22] * ct[484];
  proc_control_B.ct_n[430] = proc_control_B.ct_tmp_oi * ct[43];
  proc_control_B.ct_n[431] = ct[269];
  proc_control_B.ct_n[432] = proc_control_B.ct_tmp_ev * ct[22] * ct[484] * ct[43];
  proc_control_B.ct_tmp_ev = ct[14] * ct[20];
  proc_control_B.ct_n[433] = proc_control_B.ct_tmp_ev * ct[22] * ct[484] * ct[43];
  proc_control_B.ct_tmp_tmp_ih = ct[6] * ct[18];
  proc_control_B.ct_tmp_my = proc_control_B.ct_tmp_tmp_ih * ct[21] * ct[484];
  proc_control_B.ct_n[434] = proc_control_B.ct_tmp_my * ct[44];
  proc_control_B.ct_n[435] = ct[270];
  proc_control_B.ct_tmp_nl = ct[14] * ct[19];
  proc_control_B.ct_n[436] = proc_control_B.ct_tmp_nl * ct[21] * ct[484] * ct[44];
  proc_control_B.ct_n[437] = proc_control_B.ct_tmp_ev * ct[21] * ct[484] * ct[44];
  proc_control_B.ct_n[438] = proc_control_B.ct_tmp_ly * ct[23] * ct[484] * ct[43];
  proc_control_B.ct_n[439] = proc_control_B.ct_tmp_dt * ct[23] * ct[484] * ct[43];
  proc_control_B.ct_n[440] = ct[271];
  proc_control_B.ct_tmp_ev = proc_control_B.ct_tmp_ev * ct[23] * ct[484];
  proc_control_B.ct_n[441] = proc_control_B.ct_tmp_ev * ct[43];
  proc_control_B.ct_n[442] = proc_control_B.ct_tmp_my * ct[45];
  proc_control_B.ct_n[443] = proc_control_B.ct_tmp_fi * ct[22] * ct[484] * ct[44];
  proc_control_B.ct_n[444] = ct[272];
  proc_control_B.ct_n[445] = proc_control_B.ct_tmp_dt * ct[21] * ct[484] * ct[45];
  proc_control_B.ct_tmp_ly = ct[10] * ct[20];
  proc_control_B.ct_n[446] = proc_control_B.ct_tmp_ly * ct[21] * ct[484] * ct[45];
  proc_control_B.ct_n[447] = proc_control_B.ct_tmp_nl * ct[22] * ct[484] * ct[44];
  proc_control_B.ct_n[448] = proc_control_B.ct_tmp_tmp_ih * ct[23] * ct[484] *
    ct[44];
  proc_control_B.ct_n[449] = proc_control_B.ct_tmp_tmp_ih * ct[22] * ct[484] *
    ct[45];
  proc_control_B.ct_n[450] = proc_control_B.ct_tmp_fi * ct[23] * ct[484] * ct[44];
  proc_control_B.ct_n[451] = ct[273];
  proc_control_B.ct_tmp_fi = ct[6] * ct[20];
  proc_control_B.ct_n[452] = proc_control_B.ct_tmp_fi * ct[22] * ct[484] * ct[45];
  proc_control_B.ct_n[453] = proc_control_B.ct_tmp_oi * ct[45];
  proc_control_B.ct_n[454] = proc_control_B.ct_tmp_ev * ct[44];
  proc_control_B.ct_n[455] = proc_control_B.ct_tmp_fi * ct[23] * ct[484] * ct[45];
  proc_control_B.ct_n[456] = proc_control_B.ct_tmp_ly * ct[23] * ct[484] * ct[45];
  proc_control_B.ct_n[457] = ct[274];
  proc_control_B.ct_n[458] = ct[275];
  proc_control_B.ct_n[459] = ct[276];
  proc_control_B.ct_n[460] = proc_control_B.ct_tmp_en * ct[22] * ct[494] * ct[43];
  proc_control_B.ct_n[461] = proc_control_B.ct_tmp_mp * ct[21] * ct[494] * ct[44];
  proc_control_B.ct_n[462] = proc_control_B.ct_tmp_en * ct[23] * ct[494] * ct[43];
  proc_control_B.ct_n[463] = proc_control_B.ct_tmp_ch * ct[21] * ct[494] * ct[45];
  proc_control_B.ct_n[464] = proc_control_B.ct_tmp_ch * ct[22] * ct[494] * ct[45];
  proc_control_B.ct_n[465] = proc_control_B.ct_tmp_mp * ct[23] * ct[494] * ct[44];
  proc_control_B.ct_n[466] = ct[447] * ct[457] * ct[514];
  proc_control_B.ct_n[467] = ct[447] * ct[460] * ct[514];
  proc_control_B.ct_n[468] = ct[457] * ct[460] * ct[514];
  std::memcpy(&proc_control_B.ct_n[469], &ct[277], 13U * sizeof(real_T));
  proc_control_B.ct_n[482] = proc_control_B.ct_tmp_g4 * ct[21] * ct[447] * ct
    [494];
  proc_control_B.ct_n[483] = ct[11] * ct[20] * ct[21] * ct[447] * ct[494];
  proc_control_B.ct_n[484] = proc_control_B.ct_tmp_bn * ct[21] * ct[447] * ct
    [494];
  proc_control_B.ct_n[485] = ct[13] * ct[20] * ct[21] * ct[447] * ct[494];
  proc_control_B.ct_n[486] = ct[290];
  proc_control_B.ct_n[487] = ct[291];
  proc_control_B.ct_n[488] = proc_control_B.ct_tmp_ce * ct[22] * ct[457] * ct
    [494];
  proc_control_B.ct_n[489] = ct[8] * ct[20] * ct[22] * ct[457] * ct[494];
  proc_control_B.ct_n[490] = proc_control_B.ct_tmp_c5 * ct[22] * ct[457] * ct
    [494];
  proc_control_B.ct_n[491] = ct[12] * ct[20] * ct[22] * ct[457] * ct[494];
  proc_control_B.ct_n[492] = proc_control_B.ct_tmp_lj * ct[23] * ct[460] * ct
    [494];
  proc_control_B.ct_n[493] = proc_control_B.ct_tmp_po * ct[23] * ct[460] * ct
    [494];
  proc_control_B.ct_n[494] = ct[292];
  proc_control_B.ct_n[495] = proc_control_B.ct_tmp_gr * ct[23] * ct[460] * ct
    [494];
  proc_control_B.ct_n[496] = proc_control_B.ct_tmp_p2 * ct[23] * ct[460] * ct
    [494];
  proc_control_B.ct_n[497] = ct[293];
  proc_control_B.ct_n[498] = proc_control_B.ct_tmp_gy * ct[22] * ct[447] * ct
    [484];
  proc_control_B.ct_n[499] = proc_control_B.ct_tmp_bp * ct[22] * ct[447] * ct
    [484];
  proc_control_B.ct_n[500] = proc_control_B.ct_tmp_ca * ct[22] * ct[457] * ct
    [484];
  proc_control_B.ct_n[501] = proc_control_B.ct_tmp_ji * ct[22] * ct[457] * ct
    [484];
  proc_control_B.ct_n[502] = proc_control_B.ct_tmp_al * ct[22] * ct[447] * ct
    [484];
  proc_control_B.ct_n[503] = proc_control_B.ct_tmp_dm * ct[22] * ct[457] * ct
    [484];
  proc_control_B.ct_tmp_bp = proc_control_B.ct_tmp_cx * ct[22];
  proc_control_B.ct_n[504] = proc_control_B.ct_tmp_bp * ct[447] * ct[484];
  proc_control_B.ct_n[505] = ct[294];
  proc_control_B.ct_n[506] = proc_control_B.ct_tmp_bp * ct[457] * ct[484];
  proc_control_B.ct_n[507] = proc_control_B.ct_tmp_gy * ct[23] * ct[447] * ct
    [484];
  proc_control_B.ct_n[508] = proc_control_B.ct_tmp_ad * ct[23] * ct[447] * ct
    [484];
  proc_control_B.ct_n[509] = proc_control_B.ct_tmp_kn * ct[23] * ct[447] * ct
    [484];
  proc_control_B.ct_tmp_gy = proc_control_B.ct_tmp_ca * ct[23];
  proc_control_B.ct_n[510] = proc_control_B.ct_tmp_gy * ct[447] * ct[484];
  proc_control_B.ct_n[511] = proc_control_B.ct_tmp_gy * ct[460] * ct[484];
  proc_control_B.ct_n[512] = proc_control_B.ct_tmp_ji * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_n[513] = proc_control_B.ct_tmp_dm * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_n[514] = proc_control_B.ct_tmp_cx * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_tmp_gy = proc_control_B.ct_tmp_d0 * ct[23];
  proc_control_B.ct_n[515] = proc_control_B.ct_tmp_gy * ct[457] * ct[484];
  proc_control_B.ct_n[516] = ct[295];
  proc_control_B.ct_n[517] = proc_control_B.ct_tmp_gy * ct[460] * ct[484];
  proc_control_B.ct_n[518] = proc_control_B.ct_tmp_a2 * ct[23] * ct[457] * ct
    [484];
  proc_control_B.ct_n[519] = proc_control_B.ct_tmp_bo * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_n[520] = proc_control_B.ct_tmp_gu * ct[23] * ct[457] * ct
    [484];
  proc_control_B.ct_n[521] = proc_control_B.ct_tmp_fb * ct[23] * ct[457] * ct
    [484];
  proc_control_B.ct_n[522] = proc_control_B.ct_tmp_cgx * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_n[523] = proc_control_B.ct_tmp_at * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_n[524] = proc_control_B.ct_tmp_m * ct[22] * ct[447] * ct[484];
  proc_control_B.ct_n[525] = proc_control_B.ct_tmp_m * ct[23] * ct[447] * ct[484];
  proc_control_B.ct_n[526] = proc_control_B.ct_tmp_bw * ct[22] * ct[457] * ct
    [484];
  proc_control_B.ct_tmp_gy = proc_control_B.ct_tmp_f5 * ct[23];
  proc_control_B.ct_n[527] = proc_control_B.ct_tmp_gy * ct[457] * ct[484];
  proc_control_B.ct_n[528] = proc_control_B.ct_tmp_gy * ct[460] * ct[484];
  proc_control_B.ct_tmp_gy = proc_control_B.ct_tmp_bw * ct[23];
  proc_control_B.ct_n[529] = proc_control_B.ct_tmp_gy * ct[447] * ct[484];
  proc_control_B.ct_tmp_ad = proc_control_B.ct_tmp_e * ct[22];
  proc_control_B.ct_n[530] = proc_control_B.ct_tmp_ad * ct[447] * ct[484];
  proc_control_B.ct_n[531] = proc_control_B.ct_tmp_ad * ct[457] * ct[484];
  proc_control_B.ct_n[532] = proc_control_B.ct_tmp_gy * ct[460] * ct[484];
  proc_control_B.ct_n[533] = proc_control_B.ct_tmp_ap * ct[23] * ct[457] * ct
    [484];
  proc_control_B.ct_n[534] = proc_control_B.ct_tmp_e * ct[23] * ct[460] * ct[484];
  proc_control_B.ct_n[535] = proc_control_B.ct_tmp_p4 * ct[23] * ct[460] * ct
    [484];
  proc_control_B.ct_n[536] = ct[296];
  proc_control_B.ct_n[537] = ct[297];
  proc_control_B.ct_n[538] = ct[298];
  proc_control_B.ct_n[539] = ct[299];
  proc_control_B.ct_n[540] = ct[11] * ct[447] * ct[494] * ct[43];
  proc_control_B.ct_n[541] = ct[300];
  proc_control_B.ct_n[542] = ct[13] * ct[447] * ct[494] * ct[43];
  proc_control_B.ct_n[543] = ct[8] * ct[457] * ct[494] * ct[44];
  proc_control_B.ct_n[544] = ct[12] * ct[457] * ct[494] * ct[44];
  proc_control_B.ct_n[545] = ct[7] * ct[460] * ct[494] * ct[45];
  proc_control_B.ct_n[546] = ct[9] * ct[460] * ct[494] * ct[45];
  proc_control_B.ct_n[547] = proc_control_B.ct_tmp_fm * ct[494] * ct[43];
  proc_control_B.ct_n[548] = proc_control_B.ct_tmp_gr1 * ct[494] * ct[43];
  proc_control_B.ct_n[549] = proc_control_B.ct_tmp_b0 * ct[494] * ct[43];
  proc_control_B.ct_tmp_fm = proc_control_B.ct_tmp_kw * ct[494];
  proc_control_B.ct_n[550] = proc_control_B.ct_tmp_fm * ct[43];
  proc_control_B.ct_n[551] = proc_control_B.ct_tmp_k1 * ct[494] * ct[44];
  proc_control_B.ct_n[552] = proc_control_B.ct_tmp_fm * ct[44];
  proc_control_B.ct_n[553] = ct[301];
  proc_control_B.ct_n[554] = ct[302];
  proc_control_B.ct_n[555] = ct[303];
  proc_control_B.ct_n[556] = ct[304];
  proc_control_B.ct_tmp_fm = ct[21] * ct[447] * ct[494];
  proc_control_B.ct_n[557] = proc_control_B.ct_tmp_fm * ct[43];
  proc_control_B.ct_tmp_gr1 = ct[22] * ct[447] * ct[494];
  proc_control_B.ct_n[558] = proc_control_B.ct_tmp_gr1 * ct[43];
  proc_control_B.ct_tmp_b0 = ct[22] * ct[457] * ct[494];
  proc_control_B.ct_n[559] = proc_control_B.ct_tmp_b0 * ct[43];
  proc_control_B.ct_tmp_k1 = ct[22] * ct[460] * ct[494];
  proc_control_B.ct_n[560] = proc_control_B.ct_tmp_k1 * ct[43];
  proc_control_B.ct_n[561] = proc_control_B.ct_tmp_fm * ct[44];
  proc_control_B.ct_n[562] = ct[305];
  proc_control_B.ct_tmp_kw = ct[21] * ct[457] * ct[494];
  proc_control_B.ct_n[563] = proc_control_B.ct_tmp_kw * ct[44];
  proc_control_B.ct_tmp_gy = ct[21] * ct[460] * ct[494];
  proc_control_B.ct_n[564] = proc_control_B.ct_tmp_gy * ct[44];
  proc_control_B.ct_tmp_ad = ct[23] * ct[447] * ct[494];
  proc_control_B.ct_n[565] = proc_control_B.ct_tmp_ad * ct[43];
  proc_control_B.ct_tmp_bp = ct[23] * ct[457] * ct[494];
  proc_control_B.ct_n[566] = proc_control_B.ct_tmp_bp * ct[43];
  proc_control_B.ct_tmp_kn = ct[23] * ct[460] * ct[494];
  proc_control_B.ct_n[567] = proc_control_B.ct_tmp_kn * ct[43];
  proc_control_B.ct_n[568] = proc_control_B.ct_tmp_fm * ct[45];
  proc_control_B.ct_n[569] = proc_control_B.ct_tmp_b0 * ct[44];
  proc_control_B.ct_n[570] = proc_control_B.ct_tmp_kw * ct[45];
  proc_control_B.ct_n[571] = proc_control_B.ct_tmp_gy * ct[45];
  proc_control_B.ct_n[572] = proc_control_B.ct_tmp_ad * ct[44];
  proc_control_B.ct_n[573] = ct[306];
  proc_control_B.ct_n[574] = proc_control_B.ct_tmp_gr1 * ct[45];
  proc_control_B.ct_n[575] = proc_control_B.ct_tmp_bp * ct[44];
  proc_control_B.ct_n[576] = proc_control_B.ct_tmp_b0 * ct[45];
  proc_control_B.ct_n[577] = proc_control_B.ct_tmp_kn * ct[44];
  proc_control_B.ct_n[578] = proc_control_B.ct_tmp_k1 * ct[45];
  proc_control_B.ct_n[579] = proc_control_B.ct_tmp_kn * ct[45];
  proc_control_B.ct_n[580] = ct[307];
  proc_control_B.ct_n[581] = ct[308];
  proc_control_B.ct_n[582] = ct[309];
  proc_control_B.ct_n[583] = ct[310];
  proc_control_B.ct_n[584] = ct[311];
  proc_control_B.ct_n[585] = ct[312];
  proc_control_B.ct_n[586] = ct[313];
  proc_control_B.ct_n[587] = proc_control_B.ct_tmp_nz * ct[29];
  proc_control_B.ct_n[588] = proc_control_B.ct_tmp_bwc * ct[29];
  proc_control_B.ct_n[589] = ct[314];
  proc_control_B.ct_n[590] = proc_control_B.ct_tmp_ix * ct[29];
  proc_control_B.ct_n[591] = ct[315];
  proc_control_B.ct_n[592] = ct[316];
  proc_control_B.ct_n[593] = -ct[59];
  proc_control_B.ct_n[594] = -ct[60];
  proc_control_B.ct_n[595] = -ct[61];
  proc_control_B.ct_n[596] = ct[320];
  proc_control_B.ct_n[597] = ct[321];
  proc_control_B.ct_n[598] = proc_control_B.ct_tmp_nj * ct[484] * ct[43];
  proc_control_B.ct_n[599] = proc_control_B.ct_tmp_hx * ct[484] * ct[43];
  proc_control_B.ct_tmp_fm = proc_control_B.ct_tmp_ni * ct[484];
  proc_control_B.ct_n[600] = proc_control_B.ct_tmp_fm * ct[43];
  proc_control_B.ct_n[601] = proc_control_B.ct_tmp_mm * ct[484] * ct[43];
  proc_control_B.ct_n[602] = proc_control_B.ct_tmp_guo * ct[484] * ct[43];
  proc_control_B.ct_n[603] = ct[322];
  proc_control_B.ct_tmp_gr1 = proc_control_B.ct_tmp_gf * ct[484];
  proc_control_B.ct_n[604] = proc_control_B.ct_tmp_gr1 * ct[44];
  proc_control_B.ct_n[605] = proc_control_B.ct_tmp_jb * ct[484] * ct[44];
  proc_control_B.ct_n[606] = proc_control_B.ct_tmp_f0 * ct[484] * ct[44];
  proc_control_B.ct_n[607] = proc_control_B.ct_tmp_ng * ct[484] * ct[43];
  proc_control_B.ct_n[608] = proc_control_B.ct_tmp_gt * ct[484] * ct[43];
  proc_control_B.ct_n[609] = -ct[751];
  proc_control_B.ct_tmp_b0 = proc_control_B.ct_tmp_d1 * ct[484];
  proc_control_B.ct_n[610] = proc_control_B.ct_tmp_b0 * ct[43];
  proc_control_B.ct_n[611] = proc_control_B.ct_tmp_gr1 * ct[45];
  proc_control_B.ct_n[612] = proc_control_B.ct_tmp_cj * ct[484] * ct[44];
  proc_control_B.ct_n[613] = proc_control_B.ct_tmp_myu * ct[484] * ct[45];
  proc_control_B.ct_n[614] = proc_control_B.ct_tmp_dk * ct[484] * ct[45];
  proc_control_B.ct_n[615] = -ct[784];
  proc_control_B.ct_n[616] = proc_control_B.ct_tmp_pn0 * ct[484] * ct[44];
  proc_control_B.ct_n[617] = proc_control_B.ct_tmp_n4 * ct[484] * ct[44];
  proc_control_B.ct_n[618] = proc_control_B.ct_tmp_bwe * ct[484] * ct[45];
  proc_control_B.ct_n[619] = proc_control_B.ct_tmp_p2x * ct[484] * ct[44];
  proc_control_B.ct_n[620] = -ct[795];
  proc_control_B.ct_n[621] = proc_control_B.ct_tmp_kg * ct[484] * ct[45];
  proc_control_B.ct_n[622] = proc_control_B.ct_tmp_fm * ct[45];
  proc_control_B.ct_n[623] = proc_control_B.ct_tmp_b0 * ct[44];
  proc_control_B.ct_n[624] = proc_control_B.ct_tmp_noc * ct[484] * ct[45];
  proc_control_B.ct_n[625] = proc_control_B.ct_tmp_hl * ct[484] * ct[45];
  std::memcpy(&proc_control_B.ct_n[626], &ct[323], 33U * sizeof(real_T));
  proc_control_B.ct_n[659] = ct[356];
  std::memcpy(&proc_control_B.ct_n[660], &ct[358], 9U * sizeof(real_T));
  proc_control_B.ct_n[669] = ct[367];
  std::memcpy(&proc_control_B.ct_n[670], &ct[369], 12U * sizeof(real_T));
  proc_control_B.ct_n[682] = ct[381];
  proc_control_B.ct_n[683] = ct[384];
  proc_control_B.ct_n[684] = ct[385];
  proc_control_B.ct_n[685] = ct[387];
  proc_control_B.ct_n[686] = ct[390];
  proc_control_B.ct_n[687] = ct[391];
  proc_control_B.ct_n[688] = ct[393];
  proc_control_B.ct_n[689] = ct[396];
  proc_control_B.ct_n[690] = ct[397];
  proc_control_B.ct_n[691] = ct[399];
  proc_control_B.ct_n[692] = ct[400];
  proc_control_B.ct_n[693] = ct[401];
  proc_control_B.ct_n[694] = ct[402];
  std::memcpy(&proc_control_B.ct_n[695], &ct[404], 43U * sizeof(real_T));
  proc_control_B.ct_n[738] = ct[14] * ct[326];
  proc_control_B.ct_n[739] = ct[13] * ct[328];
  proc_control_B.ct_n[740] = ct[14] * ct[327];
  proc_control_B.ct_n[741] = ct[12] * ct[330];
  proc_control_B.ct_n[742] = ct[447];
  proc_control_B.ct_n[743] = ct[13] * ct[329];
  proc_control_B.ct_n[744] = ct[12] * ct[331];
  proc_control_B.ct_n[745] = ct[448];
  proc_control_B.ct_n[746] = ct[449];
  proc_control_B.ct_n[747] = ct[15] * ct[343];
  proc_control_B.ct_n[748] = ct[450];
  proc_control_B.ct_n[749] = ct[451];
  proc_control_B.ct_n[750] = ct[16] * ct[335];
  proc_control_B.ct_n[751] = ct[452];
  proc_control_B.ct_n[752] = ct[453];
  proc_control_B.ct_n[753] = ct[454];
  proc_control_B.ct_n[754] = ct[17] * ct[327];
  proc_control_B.ct_n[755] = ct[455];
  proc_control_B.ct_n[756] = ct[16] * ct[347];
  proc_control_B.ct_n[757] = ct[456];
  proc_control_B.ct_n[758] = ct[17] * ct[344];
  proc_control_B.ct_n[759] = ct[18] * ct[326];
  proc_control_B.ct_n[760] = ct[18] * ct[327];
  proc_control_B.ct_n[761] = ct[457];
  proc_control_B.ct_n[762] = ct[19] * ct[326];
  proc_control_B.ct_n[763] = ct[18] * ct[328];
  proc_control_B.ct_n[764] = ct[19] * ct[327];
  proc_control_B.ct_n[765] = ct[18] * ct[329];
  proc_control_B.ct_n[766] = ct[19] * ct[328];
  proc_control_B.ct_n[767] = ct[18] * ct[330];
  proc_control_B.ct_n[768] = ct[19] * ct[329];
  proc_control_B.ct_n[769] = ct[18] * ct[331];
  proc_control_B.ct_n[770] = ct[20] * ct[328];
  proc_control_B.ct_n[771] = ct[19] * ct[330];
  proc_control_B.ct_n[772] = ct[458];
  proc_control_B.ct_n[773] = ct[20] * ct[329];
  proc_control_B.ct_n[774] = ct[19] * ct[331];
  proc_control_B.ct_n[775] = ct[20] * ct[330];
  proc_control_B.ct_n[776] = ct[20] * ct[331];
  proc_control_B.ct_n[777] = ct[18] * ct[332];
  proc_control_B.ct_n[778] = ct[18] * ct[333];
  proc_control_B.ct_n[779] = ct[19] * ct[332];
  proc_control_B.ct_n[780] = ct[18] * ct[334];
  proc_control_B.ct_n[781] = ct[19] * ct[333];
  proc_control_B.ct_n[782] = ct[18] * ct[335];
  proc_control_B.ct_n[783] = ct[459];
  proc_control_B.ct_n[784] = ct[20] * ct[332];
  proc_control_B.ct_n[785] = ct[20] * ct[333];
  proc_control_B.ct_n[786] = ct[18] * ct[336];
  proc_control_B.ct_n[787] = ct[18] * ct[337];
  proc_control_B.ct_n[788] = ct[20] * ct[334];
  proc_control_B.ct_n[789] = ct[19] * ct[336];
  proc_control_B.ct_n[790] = ct[20] * ct[335];
  proc_control_B.ct_n[791] = ct[19] * ct[337];
  proc_control_B.ct_n[792] = ct[20] * ct[336];
  proc_control_B.ct_n[793] = ct[20] * ct[337];
  proc_control_B.ct_n[794] = ct[460];
  proc_control_B.ct_n[795] = ct[18] * ct[338];
  proc_control_B.ct_n[796] = ct[18] * ct[339];
  proc_control_B.ct_n[797] = ct[19] * ct[338];
  proc_control_B.ct_n[798] = ct[18] * ct[340];
  proc_control_B.ct_n[799] = ct[19] * ct[339];
  proc_control_B.ct_n[800] = ct[18] * ct[341];
  proc_control_B.ct_n[801] = ct[20] * ct[338];
  proc_control_B.ct_n[802] = ct[19] * ct[340];
  proc_control_B.ct_n[803] = ct[20] * ct[339];
  proc_control_B.ct_n[804] = ct[19] * ct[341];
  proc_control_B.ct_n[805] = ct[461];
  proc_control_B.ct_n[806] = ct[20] * ct[340];
  proc_control_B.ct_n[807] = ct[19] * ct[342];
  proc_control_B.ct_n[808] = ct[20] * ct[341];
  proc_control_B.ct_n[809] = ct[19] * ct[343];
  proc_control_B.ct_n[810] = ct[20] * ct[342];
  proc_control_B.ct_n[811] = ct[20] * ct[343];
  proc_control_B.ct_n[812] = ct[462];
  proc_control_B.ct_n[813] = ct[17] * ct[348];
  proc_control_B.ct_n[814] = ct[18] * ct[344];
  proc_control_B.ct_n[815] = ct[19] * ct[344];
  proc_control_B.ct_n[816] = ct[463];
  proc_control_B.ct_n[817] = ct[18] * ct[345];
  proc_control_B.ct_n[818] = ct[19] * ct[345];
  proc_control_B.ct_n[819] = ct[20] * ct[345];
  proc_control_B.ct_n[820] = ct[18] * ct[346];
  proc_control_B.ct_n[821] = ct[19] * ct[346];
  proc_control_B.ct_n[822] = ct[18] * ct[347];
  proc_control_B.ct_n[823] = ct[20] * ct[346];
  proc_control_B.ct_n[824] = ct[20] * ct[347];
  proc_control_B.ct_n[825] = ct[464];
  proc_control_B.ct_n[826] = ct[465];
  proc_control_B.ct_n[827] = ct[18] * ct[348];
  proc_control_B.ct_n[828] = ct[19] * ct[348];
  proc_control_B.ct_n[829] = ct[18] * ct[349];
  proc_control_B.ct_n[830] = ct[19] * ct[349];
  proc_control_B.ct_n[831] = ct[20] * ct[349];
  proc_control_B.ct_n[832] = ct[18] * ct[350];
  proc_control_B.ct_n[833] = ct[19] * ct[350];
  proc_control_B.ct_n[834] = ct[20] * ct[350];
  proc_control_B.ct_n[835] = ct[19] * ct[351];
  proc_control_B.ct_n[836] = ct[20] * ct[351];
  proc_control_B.ct_n[837] = ct[29] + ct[65];
  proc_control_B.ct_n[838] = ct[18] * ct[352];
  proc_control_B.ct_n[839] = ct[18] * ct[353];
  proc_control_B.ct_n[840] = ct[20] * ct[352];
  proc_control_B.ct_n[841] = ct[19] * ct[353];
  proc_control_B.ct_n[842] = ct[20] * ct[353];
  proc_control_B.ct_n[843] = ct[18] * ct[354];
  proc_control_B.ct_n[844] = ct[19] * ct[354];
  proc_control_B.ct_n[845] = ct[20] * ct[354];
  proc_control_B.ct_n[846] = ct[19] * ct[355];
  proc_control_B.ct_n[847] = ct[20] * ct[355];
  std::memcpy(&proc_control_B.ct_n[848], &ct[466], 18U * sizeof(real_T));
  proc_control_B.ct_n[866] = ct[18] * ct[356];
  std::memcpy(&proc_control_B.ct_n[867], &ct[484], 20U * sizeof(real_T));
  proc_control_B.ct_n[887] = ct[18] * ct[361];
  std::memcpy(&proc_control_B.ct_n[888], &ct[504], 9U * sizeof(real_T));
  proc_control_B.ct_n[897] = ct[513];
  std::memcpy(&proc_control_B.ct_n[898], &ct[515], 14U * sizeof(real_T));
  proc_control_B.ct_n[912] = proc_control_B.ct_tmp_cl * ct[504];
  proc_control_B.ct_n[913] = proc_control_B.ct_tmp_n2 * ct[504];
  proc_control_B.ct_n[914] = proc_control_B.ct_tmp_nm * ct[504];
  proc_control_B.ct_n[915] = proc_control_B.ct_tmp_cd * ct[504];
  proc_control_B.ct_n[916] = proc_control_B.ct_tmp_dkf * ct[504];
  proc_control_B.ct_n[917] = proc_control_B.ct_tmp_nq * ct[504];
  proc_control_B.ct_n[918] = proc_control_B.ct_tmp_guh * ct[504];
  proc_control_B.ct_n[919] = ct[529];
  proc_control_B.ct_n[920] = proc_control_B.ct_tmp_lx * ct[504];
  proc_control_B.ct_n[921] = proc_control_B.ct_tmp_ge * ct[504];
  proc_control_B.ct_n[922] = proc_control_B.ct_tmp_pv * ct[504];
  proc_control_B.ct_n[923] = proc_control_B.ct_tmp_ko * ct[504];
  proc_control_B.ct_n[924] = proc_control_B.ct_tmp_l1 * ct[504];
  proc_control_B.ct_n[925] = proc_control_B.ct_tmp_bf * ct[504];
  proc_control_B.ct_n[926] = proc_control_B.ct_tmp_cxc * ct[504];
  proc_control_B.ct_n[927] = proc_control_B.ct_tmp_fbn * ct[504];
  proc_control_B.ct_n[928] = proc_control_B.ct_tmp_oo * ct[504];
  proc_control_B.ct_n[929] = proc_control_B.ct_tmp_dd * ct[504];
  proc_control_B.ct_n[930] = ct[530];
  proc_control_B.ct_n[931] = proc_control_B.ct_tmp_ld * ct[504];
  proc_control_B.ct_n[932] = proc_control_B.ct_tmp_tmp_j * ct[504];
  proc_control_B.ct_n[933] = proc_control_B.ct_tmp_ls * ct[504];
  proc_control_B.ct_n[934] = proc_control_B.ct_tmp_dr * ct[504];
  proc_control_B.ct_n[935] = ct[531];
  proc_control_B.ct_n[936] = ct[532];
  proc_control_B.ct_n[937] = ct[533];
  proc_control_B.ct_n[938] = ct[534];
  proc_control_B.ct_n[939] = ct[19] * ct[362];
  std::memcpy(&proc_control_B.ct_n[940], &ct[535], 18U * sizeof(real_T));
  proc_control_B.ct_n[958] = proc_control_B.ct_tmp_ku * ct[504];
  std::memcpy(&proc_control_B.ct_n[959], &ct[553], 15U * sizeof(real_T));
  proc_control_B.ct_n[974] = proc_control_B.ct_tmp_g5 * ct[504];
  proc_control_B.ct_n[975] = ct[568];
  proc_control_B.ct_n[976] = ct[569];
  proc_control_B.ct_n[977] = proc_control_B.ct_tmp_o2 * ct[504];
  std::memcpy(&proc_control_B.ct_n[978], &ct[570], 141U * sizeof(real_T));
  proc_control_B.ct_n[1119] = ct[29] * ct[74];
  proc_control_B.ct_n[1120] = ct[29] * ct[90];
  proc_control_B.ct_n[1121] = ct[29] * ct[99];
  proc_control_B.ct_n[1122] = ct[458] * ct[514];
  proc_control_B.ct_n[1123] = ct[461] * ct[514];
  proc_control_B.ct_n[1124] = ct[711];
  proc_control_B.ct_n[1125] = ct[465] * ct[514];
  std::memcpy(&proc_control_B.ct_n[1126], &ct[712], 38U * sizeof(real_T));
  proc_control_B.ct_n[1164] = ct[750];
  std::memcpy(&proc_control_B.ct_n[1165], &ct[752], 31U * sizeof(real_T));
  proc_control_B.ct_n[1196] = ct[783];
  std::memcpy(&proc_control_B.ct_n[1197], &ct[785], 9U * sizeof(real_T));
  proc_control_B.ct_n[1206] = ct[794];
  proc_control_B.ct_n[1207] = ct[796];
  proc_control_B.ct_n[1208] = ct[797];
  proc_control_B.ct_n[1209] = ct[798];
  proc_control_B.ct_n[1210] = ct[31] * ct[317];
  proc_control_B.ct_n[1211] = ct[32] * ct[317];
  proc_control_B.ct_n[1212] = ct[30] * ct[318];
  proc_control_B.ct_n[1213] = ct[30] * ct[319];
  proc_control_B.ct_n[1214] = ct[6] * ct[447] * ct[504];
  proc_control_B.ct_n[1215] = ct[6] * ct[452] * ct[504];
  proc_control_B.ct_n[1216] = ct[6] * ct[457] * ct[504];
  proc_control_B.ct_n[1217] = ct[799];
  proc_control_B.ct_n[1218] = ct[7] * ct[447] * ct[504];
  proc_control_B.ct_n[1219] = ct[6] * ct[458] * ct[504];
  proc_control_B.ct_n[1220] = ct[6] * ct[460] * ct[504];
  proc_control_B.ct_n[1221] = ct[7] * ct[452] * ct[504];
  proc_control_B.ct_n[1222] = ct[7] * ct[457] * ct[504];
  proc_control_B.ct_n[1223] = ct[8] * ct[447] * ct[504];
  proc_control_B.ct_n[1224] = ct[7] * ct[459] * ct[504];
  proc_control_B.ct_n[1225] = ct[8] * ct[452] * ct[504];
  proc_control_B.ct_n[1226] = ct[8] * ct[460] * ct[504];
  proc_control_B.ct_n[1227] = ct[800];
  proc_control_B.ct_n[1228] = ct[8] * ct[463] * ct[504];
  proc_control_B.ct_n[1229] = ct[9] * ct[447] * ct[504];
  proc_control_B.ct_n[1230] = ct[9] * ct[452] * ct[504];
  proc_control_B.ct_n[1231] = ct[9] * ct[457] * ct[504];
  proc_control_B.ct_n[1232] = ct[10] * ct[447] * ct[504];
  proc_control_B.ct_n[1233] = ct[9] * ct[459] * ct[504];
  proc_control_B.ct_n[1234] = ct[10] * ct[457] * ct[504];
  proc_control_B.ct_n[1235] = ct[10] * ct[459] * ct[504];
  proc_control_B.ct_n[1236] = ct[10] * ct[460] * ct[504];
  proc_control_B.ct_n[1237] = ct[11] * ct[457] * ct[504];
  proc_control_B.ct_n[1238] = ct[10] * ct[461] * ct[504];
  proc_control_B.ct_n[1239] = ct[11] * ct[459] * ct[504];
  proc_control_B.ct_n[1240] = ct[11] * ct[460] * ct[504];
  proc_control_B.ct_n[1241] = ct[11] * ct[463] * ct[504];
  proc_control_B.ct_n[1242] = ct[12] * ct[447] * ct[504];
  proc_control_B.ct_n[1243] = ct[12] * ct[452] * ct[504];
  proc_control_B.ct_n[1244] = ct[12] * ct[460] * ct[504];
  proc_control_B.ct_n[1245] = ct[13] * ct[457] * ct[504];
  proc_control_B.ct_n[1246] = ct[14] * ct[447] * ct[504];
  proc_control_B.ct_n[1247] = ct[801];
  proc_control_B.ct_n[1248] = ct[12] * ct[463] * ct[504];
  proc_control_B.ct_n[1249] = ct[13] * ct[459] * ct[504];
  proc_control_B.ct_n[1250] = ct[13] * ct[460] * ct[504];
  proc_control_B.ct_n[1251] = ct[14] * ct[457] * ct[504];
  proc_control_B.ct_n[1252] = ct[13] * ct[463] * ct[504];
  proc_control_B.ct_n[1253] = ct[14] * ct[460] * ct[504];
  proc_control_B.ct_n[1254] = ct[14] * ct[463] * ct[504];
  proc_control_B.ct_n[1255] = ct[14] * ct[465] * ct[504];
  proc_control_B.ct_n[1256] = ct[32] * ct[318];
  proc_control_B.ct_n[1257] = ct[802];
  proc_control_B.ct_n[1258] = ct[803];
  proc_control_B.ct_n[1259] = ct[804];
  proc_control_ft_3(proc_control_B.ct_n, Anq);
}

void proc_control::proc_control_ft_1(const real_T ct[433], real_T Anq[169])
{
  std::memcpy(&proc_control_B.ct_m[0], &ct[0], 17U * sizeof(real_T));
  proc_control_B.ct_m[17] = ct[17];
  std::memcpy(&proc_control_B.ct_m[18], &ct[21], 17U * sizeof(real_T));
  proc_control_B.ct_m[35] = ct[21] * ct[376] * ct[391];
  proc_control_B.ct_m[36] = ct[22] * ct[369] * ct[391];
  proc_control_B.ct_m[37] = ct[21] * ct[380] * ct[391];
  proc_control_B.ct_m[38] = ct[23] * ct[369] * ct[391];
  proc_control_B.ct_m[39] = ct[22] * ct[380] * ct[391];
  proc_control_B.ct_m[40] = ct[23] * ct[376] * ct[391];
  std::memcpy(&proc_control_B.ct_m[41], &ct[38], 34U * sizeof(real_T));
  proc_control_B.ct_tmp = ct[7] * ct[21];
  proc_control_B.ct_tmp_n = proc_control_B.ct_tmp * ct[22];
  proc_control_B.ct_m[75] = proc_control_B.ct_tmp_n * ct[24] * ct[389];
  proc_control_B.ct_tmp *= ct[23];
  proc_control_B.ct_m[76] = proc_control_B.ct_tmp * ct[24] * ct[389];
  proc_control_B.ct_tmp_d = ct[8] * ct[21];
  proc_control_B.ct_tmp_c = proc_control_B.ct_tmp_d * ct[22];
  proc_control_B.ct_m[77] = proc_control_B.ct_tmp_c * ct[24] * ct[389];
  proc_control_B.ct_tmp_d *= ct[23];
  proc_control_B.ct_m[78] = proc_control_B.ct_tmp_d * ct[24] * ct[389];
  proc_control_B.ct_m[79] = ct[72];
  proc_control_B.ct_tmp_j = ct[9] * ct[21];
  proc_control_B.ct_tmp_nh = proc_control_B.ct_tmp_j * ct[22];
  proc_control_B.ct_m[80] = proc_control_B.ct_tmp_nh * ct[24] * ct[389];
  proc_control_B.ct_tmp_j *= ct[23];
  proc_control_B.ct_m[81] = proc_control_B.ct_tmp_j * ct[24] * ct[389];
  proc_control_B.ct_tmp_jk = ct[10] * ct[21] * ct[23];
  proc_control_B.ct_m[82] = proc_control_B.ct_tmp_jk * ct[24] * ct[389];
  proc_control_B.ct_tmp_p = ct[11] * ct[21];
  proc_control_B.ct_tmp_da = proc_control_B.ct_tmp_p * ct[22];
  proc_control_B.ct_m[83] = proc_control_B.ct_tmp_da * ct[24] * ct[389];
  proc_control_B.ct_tmp_n0 = proc_control_B.ct_tmp_p * ct[23];
  proc_control_B.ct_m[84] = proc_control_B.ct_tmp_n0 * ct[24] * ct[389];
  proc_control_B.ct_tmp_b = ct[12] * ct[21];
  proc_control_B.ct_tmp_i = proc_control_B.ct_tmp_b * ct[22];
  proc_control_B.ct_m[85] = proc_control_B.ct_tmp_i * ct[24] * ct[389];
  proc_control_B.ct_tmp_b *= ct[23];
  proc_control_B.ct_m[86] = proc_control_B.ct_tmp_b * ct[24] * ct[389];
  proc_control_B.ct_tmp_pn = ct[13] * ct[21];
  proc_control_B.ct_tmp_no = proc_control_B.ct_tmp_pn * ct[22];
  proc_control_B.ct_m[87] = proc_control_B.ct_tmp_no * ct[24] * ct[389];
  proc_control_B.ct_tmp_f = proc_control_B.ct_tmp_pn * ct[23];
  proc_control_B.ct_m[88] = proc_control_B.ct_tmp_f * ct[24] * ct[389];
  proc_control_B.ct_tmp_bi = ct[14] * ct[21] * ct[22];
  proc_control_B.ct_m[89] = proc_control_B.ct_tmp_bi * ct[24] * ct[389];
  proc_control_B.ct_m[90] = ct[73];
  proc_control_B.ct_m[91] = proc_control_B.ct_tmp_n * ct[25] * ct[389];
  proc_control_B.ct_tmp_n = ct[6] * ct[22] * ct[23];
  proc_control_B.ct_m[92] = proc_control_B.ct_tmp_n * ct[25] * ct[389];
  proc_control_B.ct_m[93] = proc_control_B.ct_tmp_c * ct[25] * ct[389];
  proc_control_B.ct_tmp_c = ct[7] * ct[22] * ct[23];
  proc_control_B.ct_m[94] = proc_control_B.ct_tmp_c * ct[25] * ct[389];
  proc_control_B.ct_tmp_bt = ct[8] * ct[22] * ct[23];
  proc_control_B.ct_m[95] = proc_control_B.ct_tmp_bt * ct[25] * ct[389];
  proc_control_B.ct_m[96] = proc_control_B.ct_tmp_nh * ct[25] * ct[389];
  proc_control_B.ct_tmp_nh = ct[9] * ct[22] * ct[23];
  proc_control_B.ct_m[97] = proc_control_B.ct_tmp_nh * ct[25] * ct[389];
  proc_control_B.ct_m[98] = ct[74];
  proc_control_B.ct_m[99] = ct[75];
  proc_control_B.ct_m[100] = proc_control_B.ct_tmp_da * ct[25] * ct[389];
  proc_control_B.ct_tmp_da = ct[11] * ct[22] * ct[23];
  proc_control_B.ct_m[101] = proc_control_B.ct_tmp_da * ct[25] * ct[389];
  proc_control_B.ct_m[102] = proc_control_B.ct_tmp_i * ct[25] * ct[389];
  proc_control_B.ct_m[103] = proc_control_B.ct_tmp_no * ct[25] * ct[389];
  proc_control_B.ct_tmp_i = ct[12] * ct[22] * ct[23];
  proc_control_B.ct_m[104] = proc_control_B.ct_tmp_i * ct[25] * ct[389];
  proc_control_B.ct_m[105] = proc_control_B.ct_tmp_bi * ct[25] * ct[389];
  proc_control_B.ct_tmp_no = ct[13] * ct[22] * ct[23];
  proc_control_B.ct_m[106] = proc_control_B.ct_tmp_no * ct[25] * ct[389];
  proc_control_B.ct_m[107] = proc_control_B.ct_tmp_n * ct[26] * ct[389];
  proc_control_B.ct_m[108] = proc_control_B.ct_tmp * ct[26] * ct[389];
  proc_control_B.ct_m[109] = ct[76];
  proc_control_B.ct_m[110] = proc_control_B.ct_tmp_c * ct[26] * ct[389];
  proc_control_B.ct_m[111] = proc_control_B.ct_tmp_d * ct[26] * ct[389];
  proc_control_B.ct_m[112] = proc_control_B.ct_tmp_bt * ct[26] * ct[389];
  proc_control_B.ct_m[113] = proc_control_B.ct_tmp_j * ct[26] * ct[389];
  proc_control_B.ct_m[114] = proc_control_B.ct_tmp_nh * ct[26] * ct[389];
  proc_control_B.ct_m[115] = proc_control_B.ct_tmp_jk * ct[26] * ct[389];
  proc_control_B.ct_m[116] = proc_control_B.ct_tmp_n0 * ct[26] * ct[389];
  proc_control_B.ct_m[117] = proc_control_B.ct_tmp_da * ct[26] * ct[389];
  proc_control_B.ct_m[118] = proc_control_B.ct_tmp_b * ct[26] * ct[389];
  proc_control_B.ct_m[119] = proc_control_B.ct_tmp_i * ct[26] * ct[389];
  proc_control_B.ct_m[120] = proc_control_B.ct_tmp_f * ct[26] * ct[389];
  proc_control_B.ct_m[121] = proc_control_B.ct_tmp_no * ct[26] * ct[389];
  proc_control_B.ct_tmp = ct[15] * ct[22] * ct[23];
  proc_control_B.ct_m[122] = proc_control_B.ct_tmp * ct[25] * ct[389];
  proc_control_B.ct_tmp_tmp_f = ct[16] * ct[21];
  proc_control_B.ct_tmp_n = proc_control_B.ct_tmp_tmp_f * ct[23];
  proc_control_B.ct_m[123] = proc_control_B.ct_tmp_n * ct[24] * ct[389];
  proc_control_B.ct_m[124] = proc_control_B.ct_tmp * ct[26] * ct[389];
  proc_control_B.ct_tmp_bt = ct[17] * ct[21];
  proc_control_B.ct_tmp = proc_control_B.ct_tmp_bt * ct[22];
  proc_control_B.ct_m[125] = proc_control_B.ct_tmp * ct[24] * ct[389];
  proc_control_B.ct_m[126] = proc_control_B.ct_tmp * ct[25] * ct[389];
  proc_control_B.ct_m[127] = proc_control_B.ct_tmp_n * ct[26] * ct[389];
  proc_control_B.ct_m[128] = ct[78];
  proc_control_B.ct_tmp = ct[10] * ct[389];
  proc_control_B.ct_m[129] = proc_control_B.ct_tmp * ct[40];
  proc_control_B.ct_tmp_n = ct[14] * ct[389];
  proc_control_B.ct_m[130] = proc_control_B.ct_tmp_n * ct[40];
  proc_control_B.ct_m[131] = ct[79];
  proc_control_B.ct_tmp_d = ct[6] * ct[389];
  proc_control_B.ct_m[132] = proc_control_B.ct_tmp_d * ct[41];
  proc_control_B.ct_m[133] = proc_control_B.ct_tmp_n * ct[41];
  proc_control_B.ct_m[134] = proc_control_B.ct_tmp_d * ct[42];
  proc_control_B.ct_m[135] = proc_control_B.ct_tmp * ct[42];
  proc_control_B.ct_m[136] = -ct[291];
  proc_control_B.ct_m[137] = -ct[292];
  proc_control_B.ct_m[138] = -ct[295];
  proc_control_B.ct_m[139] = -ct[297];
  proc_control_B.ct_m[140] = -ct[298];
  proc_control_B.ct_m[141] = -ct[301];
  proc_control_B.ct_m[142] = -ct[303];
  proc_control_B.ct_m[143] = -ct[304];
  proc_control_B.ct_m[144] = -ct[307];
  proc_control_B.ct_tmp_tmp = ct[10] * ct[14];
  proc_control_B.ct_tmp = proc_control_B.ct_tmp_tmp * ct[24];
  proc_control_B.ct_m[145] = proc_control_B.ct_tmp * ct[25] * ct[40];
  proc_control_B.ct_m[146] = proc_control_B.ct_tmp * ct[26] * ct[40];
  proc_control_B.ct_tmp_tmp_e = ct[6] * ct[14];
  proc_control_B.ct_tmp_n = proc_control_B.ct_tmp_tmp_e * ct[24];
  proc_control_B.ct_m[147] = proc_control_B.ct_tmp_n * ct[25] * ct[41];
  proc_control_B.ct_tmp_d = proc_control_B.ct_tmp_tmp * ct[25];
  proc_control_B.ct_m[148] = proc_control_B.ct_tmp_d * ct[26] * ct[40];
  proc_control_B.ct_tmp_tmp_i = ct[6] * ct[10];
  proc_control_B.ct_tmp_c = proc_control_B.ct_tmp_tmp_i * ct[24];
  proc_control_B.ct_m[149] = proc_control_B.ct_tmp_c * ct[25] * ct[42];
  proc_control_B.ct_m[150] = proc_control_B.ct_tmp_n * ct[26] * ct[41];
  proc_control_B.ct_m[151] = proc_control_B.ct_tmp_c * ct[26] * ct[42];
  proc_control_B.ct_tmp_c = proc_control_B.ct_tmp_tmp_e * ct[25];
  proc_control_B.ct_m[152] = proc_control_B.ct_tmp_c * ct[26] * ct[41];
  proc_control_B.ct_tmp_j = proc_control_B.ct_tmp_tmp_i * ct[25];
  proc_control_B.ct_m[153] = proc_control_B.ct_tmp_j * ct[26] * ct[42];
  proc_control_B.ct_tmp_tmp_a = ct[16] * ct[17];
  proc_control_B.ct_tmp_nh = proc_control_B.ct_tmp_tmp_a * ct[24];
  proc_control_B.ct_m[154] = proc_control_B.ct_tmp_nh * ct[25] * ct[40];
  proc_control_B.ct_m[155] = proc_control_B.ct_tmp_nh * ct[26] * ct[40];
  proc_control_B.ct_tmp_jk = proc_control_B.ct_tmp_tmp_a * ct[25];
  proc_control_B.ct_m[156] = proc_control_B.ct_tmp_jk * ct[26] * ct[40];
  proc_control_B.ct_m[157] = -ct[330];
  proc_control_B.ct_m[158] = -ct[333];
  proc_control_B.ct_m[159] = -ct[334];
  proc_control_B.ct_m[160] = -ct[337];
  proc_control_B.ct_m[161] = -ct[339];
  proc_control_B.ct_m[162] = ct[82];
  proc_control_B.ct_m[163] = -ct[342];
  proc_control_B.ct_m[164] = -ct[343];
  proc_control_B.ct_m[165] = -ct[346];
  proc_control_B.ct_m[166] = -ct[347];
  proc_control_B.ct_tmp_da = proc_control_B.ct_tmp_tmp_i * ct[14];
  proc_control_B.ct_m[167] = proc_control_B.ct_tmp_da * ct[24] * ct[43];
  proc_control_B.ct_tmp_n0 = ct[7] * ct[11];
  proc_control_B.ct_tmp_b = proc_control_B.ct_tmp_n0 * ct[12];
  proc_control_B.ct_m[168] = proc_control_B.ct_tmp_b * ct[24] * ct[43];
  proc_control_B.ct_tmp_i = ct[8] * ct[9];
  proc_control_B.ct_tmp_no = proc_control_B.ct_tmp_i * ct[13];
  proc_control_B.ct_m[169] = proc_control_B.ct_tmp_no * ct[24] * ct[43];
  proc_control_B.ct_tmp_f = ct[11] * ct[24];
  proc_control_B.ct_m[170] = proc_control_B.ct_tmp_f * ct[25] * ct[26] * ct[40];
  proc_control_B.ct_tmp_bi = ct[13] * ct[24];
  proc_control_B.ct_m[171] = proc_control_B.ct_tmp_bi * ct[25] * ct[26] * ct[40];
  proc_control_B.ct_m[172] = proc_control_B.ct_tmp_tmp * ct[388] * ct[40];
  proc_control_B.ct_m[173] = proc_control_B.ct_tmp_tmp_e * ct[388] * ct[41];
  proc_control_B.ct_m[174] = proc_control_B.ct_tmp_tmp_i * ct[388] * ct[42];
  proc_control_B.ct_m[175] = ct[84];
  proc_control_B.ct_m[176] = ct[85];
  proc_control_B.ct_m[177] = ct[86];
  proc_control_B.ct_m[178] = proc_control_B.ct_tmp_p * ct[389] * ct[40];
  proc_control_B.ct_m[179] = proc_control_B.ct_tmp_pn * ct[389] * ct[40];
  proc_control_B.ct_m[180] = proc_control_B.ct_tmp_tmp_a * ct[388] * ct[40];
  proc_control_B.ct_m[181] = ct[7] * ct[23] * ct[389] * ct[42];
  proc_control_B.ct_m[182] = ct[9] * ct[23] * ct[389] * ct[42];
  proc_control_B.ct_m[183] = ct[89];
  proc_control_B.ct_m[184] = proc_control_B.ct_tmp_tmp_f * ct[389] * ct[40];
  proc_control_B.ct_m[185] = ct[16] * ct[22] * ct[389] * ct[40];
  proc_control_B.ct_m[186] = ct[90];
  proc_control_B.ct_m[187] = proc_control_B.ct_tmp_bt * ct[389] * ct[40];
  proc_control_B.ct_tmp_p = ct[17] * ct[23] * ct[389];
  proc_control_B.ct_m[188] = proc_control_B.ct_tmp_p * ct[40];
  proc_control_B.ct_m[189] = proc_control_B.ct_tmp_f * ct[388] * ct[40];
  proc_control_B.ct_m[190] = proc_control_B.ct_tmp_bi * ct[388] * ct[40];
  proc_control_B.ct_m[191] = ct[11] * ct[25] * ct[388] * ct[40];
  proc_control_B.ct_m[192] = ct[13] * ct[25] * ct[388] * ct[40];
  proc_control_B.ct_m[193] = ct[17] * ct[22] * ct[389] * ct[41];
  proc_control_B.ct_m[194] = proc_control_B.ct_tmp_p * ct[41];
  proc_control_B.ct_tmp_p = ct[8] * ct[24];
  proc_control_B.ct_m[195] = proc_control_B.ct_tmp_p * ct[388] * ct[41];
  proc_control_B.ct_m[196] = ct[92];
  proc_control_B.ct_tmp_pn = ct[12] * ct[24];
  proc_control_B.ct_m[197] = proc_control_B.ct_tmp_pn * ct[388] * ct[41];
  proc_control_B.ct_m[198] = ct[11] * ct[26] * ct[388] * ct[40];
  proc_control_B.ct_m[199] = ct[13] * ct[26] * ct[388] * ct[40];
  proc_control_B.ct_tmp_f = ct[7] * ct[24];
  proc_control_B.ct_m[200] = proc_control_B.ct_tmp_f * ct[388] * ct[42];
  proc_control_B.ct_m[201] = ct[8] * ct[25] * ct[388] * ct[41];
  proc_control_B.ct_tmp_bi = ct[9] * ct[24];
  proc_control_B.ct_m[202] = proc_control_B.ct_tmp_bi * ct[388] * ct[42];
  proc_control_B.ct_m[203] = ct[12] * ct[25] * ct[388] * ct[41];
  proc_control_B.ct_m[204] = ct[7] * ct[25] * ct[388] * ct[42];
  proc_control_B.ct_m[205] = ct[8] * ct[26] * ct[388] * ct[41];
  proc_control_B.ct_m[206] = ct[9] * ct[25] * ct[388] * ct[42];
  proc_control_B.ct_m[207] = ct[93];
  proc_control_B.ct_m[208] = ct[12] * ct[26] * ct[388] * ct[41];
  proc_control_B.ct_tmp_bt = ct[16] * ct[24];
  proc_control_B.ct_m[209] = proc_control_B.ct_tmp_bt * ct[388] * ct[40];
  proc_control_B.ct_m[210] = ct[7] * ct[26] * ct[388] * ct[42];
  proc_control_B.ct_m[211] = ct[9] * ct[26] * ct[388] * ct[42];
  proc_control_B.ct_m[212] = ct[16] * ct[25] * ct[388] * ct[40];
  proc_control_B.ct_tmp_tmp_f = ct[17] * ct[24];
  proc_control_B.ct_tmp_k = proc_control_B.ct_tmp_tmp_f * ct[388];
  proc_control_B.ct_m[213] = proc_control_B.ct_tmp_k * ct[40];
  proc_control_B.ct_m[214] = ct[16] * ct[26] * ct[388] * ct[40];
  proc_control_B.ct_tmp_cg = ct[17] * ct[25] * ct[388];
  proc_control_B.ct_m[215] = proc_control_B.ct_tmp_cg * ct[40];
  proc_control_B.ct_m[216] = proc_control_B.ct_tmp_k * ct[41];
  proc_control_B.ct_tmp_k = ct[17] * ct[26] * ct[388];
  proc_control_B.ct_m[217] = proc_control_B.ct_tmp_k * ct[40];
  proc_control_B.ct_m[218] = proc_control_B.ct_tmp_cg * ct[41];
  proc_control_B.ct_m[219] = proc_control_B.ct_tmp_k * ct[41];
  proc_control_B.ct_m[220] = ct[40] * ct[348];
  proc_control_B.ct_m[221] = ct[41] * ct[340];
  proc_control_B.ct_m[222] = ct[42] * ct[331];
  proc_control_B.ct_m[223] = ct[40] * ct[92];
  proc_control_B.ct_m[224] = ct[40] * ct[99];
  proc_control_B.ct_m[225] = ct[95];
  proc_control_B.ct_m[226] = ct[96];
  proc_control_B.ct_m[227] = ct[41] * ct[96];
  proc_control_B.ct_m[228] = ct[97];
  proc_control_B.ct_m[229] = ct[98];
  proc_control_B.ct_m[230] = ct[99];
  proc_control_B.ct_m[231] = ct[100];
  proc_control_B.ct_m[232] = ct[102];
  proc_control_B.ct_m[233] = ct[104];
  proc_control_B.ct_m[234] = ct[105];
  proc_control_B.ct_m[235] = ct[107];
  proc_control_B.ct_m[236] = ct[109];
  proc_control_B.ct_m[237] = ct[111];
  proc_control_B.ct_m[238] = ct[113];
  proc_control_B.ct_m[239] = ct[115];
  proc_control_B.ct_m[240] = ct[120];
  proc_control_B.ct_m[241] = ct[122];
  proc_control_B.ct_m[242] = ct[123];
  proc_control_B.ct_m[243] = ct[124];
  proc_control_B.ct_m[244] = ct[125];
  proc_control_B.ct_m[245] = ct[126];
  proc_control_B.ct_m[246] = ct[127];
  proc_control_B.ct_m[247] = ct[128];
  proc_control_B.ct_m[248] = ct[130];
  proc_control_B.ct_m[249] = ct[131];
  proc_control_B.ct_m[250] = ct[132];
  proc_control_B.ct_m[251] = ct[134];
  proc_control_B.ct_m[252] = ct[135];
  proc_control_B.ct_m[253] = ct[136];
  proc_control_B.ct_m[254] = ct[138];
  proc_control_B.ct_m[255] = ct[139];
  proc_control_B.ct_m[256] = ct[140];
  proc_control_B.ct_m[257] = ct[141];
  proc_control_B.ct_m[258] = ct[143];
  proc_control_B.ct_m[259] = ct[145];
  proc_control_B.ct_m[260] = ct[146];
  proc_control_B.ct_m[261] = ct[147];
  proc_control_B.ct_m[262] = ct[149];
  proc_control_B.ct_m[263] = ct[150];
  proc_control_B.ct_m[264] = ct[151];
  proc_control_B.ct_m[265] = ct[152];
  proc_control_B.ct_m[266] = ct[153];
  proc_control_B.ct_m[267] = ct[154];
  proc_control_B.ct_m[268] = ct[155];
  proc_control_B.ct_m[269] = ct[157];
  proc_control_B.ct_m[270] = ct[158];
  proc_control_B.ct_m[271] = ct[159];
  proc_control_B.ct_m[272] = ct[160];
  proc_control_B.ct_m[273] = ct[162];
  proc_control_B.ct_m[274] = ct[164];
  proc_control_B.ct_m[275] = ct[165];
  proc_control_B.ct_m[276] = ct[166];
  proc_control_B.ct_m[277] = ct[168];
  proc_control_B.ct_m[278] = ct[169];
  proc_control_B.ct_m[279] = ct[170];
  proc_control_B.ct_m[280] = ct[171];
  proc_control_B.ct_m[281] = ct[173];
  proc_control_B.ct_m[282] = ct[174];
  proc_control_B.ct_m[283] = ct[175];
  proc_control_B.ct_m[284] = ct[177];
  proc_control_B.ct_m[285] = ct[178];
  proc_control_B.ct_m[286] = ct[179];
  proc_control_B.ct_m[287] = ct[180];
  proc_control_B.ct_m[288] = ct[181];
  proc_control_B.ct_m[289] = ct[182];
  proc_control_B.ct_m[290] = ct[185];
  proc_control_B.ct_m[291] = ct[186];
  proc_control_B.ct_m[292] = ct[187];
  proc_control_B.ct_m[293] = ct[188];
  proc_control_B.ct_m[294] = ct[191];
  proc_control_B.ct_m[295] = ct[192];
  proc_control_B.ct_m[296] = ct[196];
  proc_control_B.ct_m[297] = ct[197];
  proc_control_B.ct_m[298] = ct[198];
  proc_control_B.ct_m[299] = ct[199];
  proc_control_B.ct_m[300] = ct[201];
  proc_control_B.ct_m[301] = ct[204];
  proc_control_B.ct_m[302] = ct[205];
  proc_control_B.ct_m[303] = ct[206];
  proc_control_B.ct_m[304] = ct[208];
  proc_control_B.ct_m[305] = ct[209];
  proc_control_B.ct_m[306] = ct[210];
  std::memcpy(&proc_control_B.ct_m[307], &ct[212], 29U * sizeof(real_T));
  proc_control_B.ct_m[336] = ct[241];
  std::memcpy(&proc_control_B.ct_m[337], &ct[243], 31U * sizeof(real_T));
  proc_control_B.ct_m[368] = ct[274];
  std::memcpy(&proc_control_B.ct_m[369], &ct[276], 9U * sizeof(real_T));
  proc_control_B.ct_m[378] = ct[286];
  std::memcpy(&proc_control_B.ct_m[379], &ct[288], 19U * sizeof(real_T));
  proc_control_B.ct_m[398] = ct[307];
  std::memcpy(&proc_control_B.ct_m[399], &ct[309], 9U * sizeof(real_T));
  proc_control_B.ct_m[408] = ct[318];
  std::memcpy(&proc_control_B.ct_m[409], &ct[320], 9U * sizeof(real_T));
  proc_control_B.ct_m[418] = ct[329];
  proc_control_B.ct_m[419] = ct[331];
  proc_control_B.ct_m[420] = ct[332];
  proc_control_B.ct_m[421] = ct[333];
  proc_control_B.ct_m[422] = ct[335];
  proc_control_B.ct_m[423] = ct[336];
  proc_control_B.ct_m[424] = ct[337];
  proc_control_B.ct_m[425] = ct[338];
  proc_control_B.ct_m[426] = ct[340];
  proc_control_B.ct_m[427] = ct[341];
  proc_control_B.ct_m[428] = ct[342];
  proc_control_B.ct_m[429] = ct[344];
  proc_control_B.ct_m[430] = ct[345];
  proc_control_B.ct_m[431] = ct[346];
  std::memcpy(&proc_control_B.ct_m[432], &ct[348], sizeof(real_T) << 3U);
  proc_control_B.ct_m[440] = ct[356];
  std::memcpy(&proc_control_B.ct_m[441], &ct[358], 30U * sizeof(real_T));
  proc_control_B.ct_tmp_k = ct[8] * ct[10];
  proc_control_B.ct_tmp_cg = proc_control_B.ct_tmp_k * ct[24];
  proc_control_B.ct_m[471] = proc_control_B.ct_tmp_cg * ct[388];
  proc_control_B.ct_tmp_j1 = ct[6] * ct[13];
  proc_control_B.ct_tmp_py = proc_control_B.ct_tmp_j1 * ct[24];
  proc_control_B.ct_m[472] = proc_control_B.ct_tmp_py * ct[388];
  proc_control_B.ct_tmp_l = ct[7] * ct[12];
  proc_control_B.ct_m[473] = proc_control_B.ct_tmp_l * ct[24] * ct[388];
  proc_control_B.ct_m[474] = proc_control_B.ct_tmp_n * ct[388];
  proc_control_B.ct_tmp_n = ct[8] * ct[12];
  proc_control_B.ct_tmp_lg = proc_control_B.ct_tmp_n * ct[24];
  proc_control_B.ct_m[475] = proc_control_B.ct_tmp_lg * ct[388];
  proc_control_B.ct_tmp_a = ct[7] * ct[14];
  proc_control_B.ct_tmp_om = proc_control_B.ct_tmp_a * ct[24];
  proc_control_B.ct_m[476] = proc_control_B.ct_tmp_om * ct[388];
  proc_control_B.ct_tmp_iy = ct[8] * ct[13];
  proc_control_B.ct_m[477] = proc_control_B.ct_tmp_iy * ct[24] * ct[388];
  proc_control_B.ct_tmp_o = ct[9] * ct[13];
  proc_control_B.ct_m[478] = proc_control_B.ct_tmp_o * ct[24] * ct[388];
  proc_control_B.ct_tmp_b4 = ct[10] * ct[12];
  proc_control_B.ct_tmp_cm = proc_control_B.ct_tmp_b4 * ct[24];
  proc_control_B.ct_m[479] = proc_control_B.ct_tmp_cm * ct[388];
  proc_control_B.ct_tmp_an = ct[9] * ct[14];
  proc_control_B.ct_tmp_oc = proc_control_B.ct_tmp_an * ct[24];
  proc_control_B.ct_m[480] = proc_control_B.ct_tmp_oc * ct[388];
  proc_control_B.ct_tmp_aq = ct[11] * ct[12];
  proc_control_B.ct_m[481] = proc_control_B.ct_tmp_aq * ct[24] * ct[388];
  proc_control_B.ct_m[482] = proc_control_B.ct_tmp * ct[388];
  proc_control_B.ct_tmp = ct[11] * ct[13];
  proc_control_B.ct_tmp_iz = proc_control_B.ct_tmp * ct[24];
  proc_control_B.ct_m[483] = proc_control_B.ct_tmp_iz * ct[388];
  proc_control_B.ct_m[484] = ct[388];
  proc_control_B.ct_m[485] = proc_control_B.ct_tmp_j * ct[388];
  proc_control_B.ct_tmp_j = ct[7] * ct[9];
  proc_control_B.ct_tmp_o5 = proc_control_B.ct_tmp_j * ct[25];
  proc_control_B.ct_m[486] = proc_control_B.ct_tmp_o5 * ct[388];
  proc_control_B.ct_tmp_i0 = ct[6] * ct[11];
  proc_control_B.ct_tmp_ol = proc_control_B.ct_tmp_i0 * ct[25];
  proc_control_B.ct_m[487] = proc_control_B.ct_tmp_ol * ct[388];
  proc_control_B.ct_m[488] = proc_control_B.ct_tmp_i * ct[25] * ct[388];
  proc_control_B.ct_m[489] = proc_control_B.ct_tmp_n0 * ct[25] * ct[388];
  proc_control_B.ct_tmp_h = proc_control_B.ct_tmp_k * ct[25];
  proc_control_B.ct_m[490] = proc_control_B.ct_tmp_h * ct[388];
  proc_control_B.ct_tmp_ih = proc_control_B.ct_tmp_j1 * ct[25];
  proc_control_B.ct_m[491] = proc_control_B.ct_tmp_ih * ct[388];
  proc_control_B.ct_m[492] = proc_control_B.ct_tmp_l * ct[25] * ct[388];
  proc_control_B.ct_m[493] = proc_control_B.ct_tmp_c * ct[388];
  proc_control_B.ct_m[494] = ct[389];
  proc_control_B.ct_tmp_c = proc_control_B.ct_tmp_n * ct[25];
  proc_control_B.ct_m[495] = proc_control_B.ct_tmp_c * ct[388];
  proc_control_B.ct_tmp_g = proc_control_B.ct_tmp_a * ct[25];
  proc_control_B.ct_m[496] = proc_control_B.ct_tmp_g * ct[388];
  proc_control_B.ct_m[497] = proc_control_B.ct_tmp_iy * ct[25] * ct[388];
  proc_control_B.ct_m[498] = proc_control_B.ct_tmp_o * ct[25] * ct[388];
  proc_control_B.ct_tmp_c1 = proc_control_B.ct_tmp_b4 * ct[25];
  proc_control_B.ct_m[499] = proc_control_B.ct_tmp_c1 * ct[388];
  proc_control_B.ct_tmp_ok = proc_control_B.ct_tmp_an * ct[25];
  proc_control_B.ct_m[500] = proc_control_B.ct_tmp_ok * ct[388];
  proc_control_B.ct_m[501] = proc_control_B.ct_tmp_aq * ct[25] * ct[388];
  proc_control_B.ct_m[502] = proc_control_B.ct_tmp_d * ct[388];
  proc_control_B.ct_tmp_d = proc_control_B.ct_tmp * ct[25];
  proc_control_B.ct_m[503] = proc_control_B.ct_tmp_d * ct[388];
  proc_control_B.ct_m[504] = ct[390];
  proc_control_B.ct_m[505] = proc_control_B.ct_tmp_tmp_i * ct[26] * ct[388];
  proc_control_B.ct_tmp_tmp_i = proc_control_B.ct_tmp_j * ct[26];
  proc_control_B.ct_m[506] = proc_control_B.ct_tmp_tmp_i * ct[388];
  proc_control_B.ct_m[507] = proc_control_B.ct_tmp_i0 * ct[26] * ct[388];
  proc_control_B.ct_m[508] = proc_control_B.ct_tmp_i * ct[26] * ct[388];
  proc_control_B.ct_m[509] = proc_control_B.ct_tmp_n0 * ct[26] * ct[388];
  proc_control_B.ct_m[510] = proc_control_B.ct_tmp_k * ct[26] * ct[388];
  proc_control_B.ct_m[511] = proc_control_B.ct_tmp_j1 * ct[26] * ct[388];
  proc_control_B.ct_m[512] = proc_control_B.ct_tmp_l * ct[26] * ct[388];
  proc_control_B.ct_m[513] = proc_control_B.ct_tmp_tmp_e * ct[26] * ct[388];
  proc_control_B.ct_m[514] = ct[391];
  proc_control_B.ct_tmp_n *= ct[26];
  proc_control_B.ct_m[515] = proc_control_B.ct_tmp_n * ct[388];
  proc_control_B.ct_m[516] = proc_control_B.ct_tmp_a * ct[26] * ct[388];
  proc_control_B.ct_m[517] = proc_control_B.ct_tmp_iy * ct[26] * ct[388];
  proc_control_B.ct_m[518] = proc_control_B.ct_tmp_o * ct[26] * ct[388];
  proc_control_B.ct_m[519] = proc_control_B.ct_tmp_b4 * ct[26] * ct[388];
  proc_control_B.ct_m[520] = proc_control_B.ct_tmp_an * ct[26] * ct[388];
  proc_control_B.ct_m[521] = proc_control_B.ct_tmp_aq * ct[26] * ct[388];
  proc_control_B.ct_m[522] = proc_control_B.ct_tmp_tmp * ct[26] * ct[388];
  proc_control_B.ct_tmp *= ct[26];
  proc_control_B.ct_m[523] = proc_control_B.ct_tmp * ct[388];
  proc_control_B.ct_tmp_n0 = ct[10] * ct[15];
  proc_control_B.ct_m[524] = proc_control_B.ct_tmp_n0 * ct[24] * ct[388];
  proc_control_B.ct_m[525] = ct[392];
  proc_control_B.ct_tmp_i = ct[11] * ct[15];
  proc_control_B.ct_m[526] = proc_control_B.ct_tmp_i * ct[24] * ct[388];
  proc_control_B.ct_tmp_k = ct[13] * ct[15];
  proc_control_B.ct_m[527] = proc_control_B.ct_tmp_k * ct[24] * ct[388];
  proc_control_B.ct_tmp_j1 = ct[14] * ct[15];
  proc_control_B.ct_m[528] = proc_control_B.ct_tmp_j1 * ct[24] * ct[388];
  proc_control_B.ct_m[529] = ct[393];
  proc_control_B.ct_m[530] = ct[394];
  proc_control_B.ct_m[531] = proc_control_B.ct_tmp_n0 * ct[25] * ct[388];
  proc_control_B.ct_m[532] = proc_control_B.ct_tmp_i * ct[25] * ct[388];
  proc_control_B.ct_m[533] = proc_control_B.ct_tmp_k * ct[25] * ct[388];
  proc_control_B.ct_m[534] = proc_control_B.ct_tmp_j1 * ct[25] * ct[388];
  proc_control_B.ct_m[535] = ct[395];
  proc_control_B.ct_tmp_l = ct[6] * ct[16];
  proc_control_B.ct_m[536] = proc_control_B.ct_tmp_l * ct[24] * ct[388];
  proc_control_B.ct_tmp_a = ct[8] * ct[16];
  proc_control_B.ct_m[537] = proc_control_B.ct_tmp_a * ct[24] * ct[388];
  proc_control_B.ct_tmp_iy = ct[12] * ct[16];
  proc_control_B.ct_m[538] = proc_control_B.ct_tmp_iy * ct[24] * ct[388];
  proc_control_B.ct_tmp_o = ct[14] * ct[16];
  proc_control_B.ct_tmp_b4 = proc_control_B.ct_tmp_o * ct[24];
  proc_control_B.ct_m[539] = proc_control_B.ct_tmp_b4 * ct[388];
  proc_control_B.ct_m[540] = proc_control_B.ct_tmp_n0 * ct[26] * ct[388];
  proc_control_B.ct_m[541] = proc_control_B.ct_tmp_i * ct[26] * ct[388];
  proc_control_B.ct_m[542] = proc_control_B.ct_tmp_k * ct[26] * ct[388];
  proc_control_B.ct_m[543] = proc_control_B.ct_tmp_j1 * ct[26] * ct[388];
  proc_control_B.ct_m[544] = proc_control_B.ct_tmp_l * ct[25] * ct[388];
  proc_control_B.ct_tmp_n0 = ct[6] * ct[17];
  proc_control_B.ct_tmp_i = proc_control_B.ct_tmp_n0 * ct[24];
  proc_control_B.ct_m[545] = proc_control_B.ct_tmp_i * ct[388];
  proc_control_B.ct_m[546] = ct[396];
  proc_control_B.ct_tmp_k = ct[7] * ct[17];
  proc_control_B.ct_m[547] = proc_control_B.ct_tmp_k * ct[24] * ct[388];
  proc_control_B.ct_m[548] = proc_control_B.ct_tmp_a * ct[25] * ct[388];
  proc_control_B.ct_tmp_j1 = ct[9] * ct[17];
  proc_control_B.ct_m[549] = proc_control_B.ct_tmp_j1 * ct[24] * ct[388];
  proc_control_B.ct_tmp_an = ct[10] * ct[17];
  proc_control_B.ct_tmp_aq = proc_control_B.ct_tmp_an * ct[24];
  proc_control_B.ct_m[550] = proc_control_B.ct_tmp_aq * ct[388];
  proc_control_B.ct_m[551] = proc_control_B.ct_tmp_iy * ct[25] * ct[388];
  proc_control_B.ct_tmp_tmp = proc_control_B.ct_tmp_o * ct[25];
  proc_control_B.ct_m[552] = proc_control_B.ct_tmp_tmp * ct[388];
  proc_control_B.ct_m[553] = proc_control_B.ct_tmp_l * ct[26] * ct[388];
  proc_control_B.ct_tmp_l = proc_control_B.ct_tmp_n0 * ct[25];
  proc_control_B.ct_m[554] = proc_control_B.ct_tmp_l * ct[388];
  proc_control_B.ct_m[555] = proc_control_B.ct_tmp_k * ct[25] * ct[388];
  proc_control_B.ct_m[556] = ct[397];
  proc_control_B.ct_m[557] = proc_control_B.ct_tmp_a * ct[26] * ct[388];
  proc_control_B.ct_m[558] = proc_control_B.ct_tmp_j1 * ct[25] * ct[388];
  proc_control_B.ct_tmp_a = proc_control_B.ct_tmp_an * ct[25];
  proc_control_B.ct_m[559] = proc_control_B.ct_tmp_a * ct[388];
  proc_control_B.ct_m[560] = proc_control_B.ct_tmp_iy * ct[26] * ct[388];
  proc_control_B.ct_tmp_iy = proc_control_B.ct_tmp_o * ct[26];
  proc_control_B.ct_m[561] = proc_control_B.ct_tmp_iy * ct[388];
  proc_control_B.ct_tmp_o = ct[15] * ct[16];
  proc_control_B.ct_m[562] = proc_control_B.ct_tmp_o * ct[24] * ct[388];
  proc_control_B.ct_tmp_n0 *= ct[26];
  proc_control_B.ct_m[563] = proc_control_B.ct_tmp_n0 * ct[388];
  proc_control_B.ct_m[564] = proc_control_B.ct_tmp_k * ct[26] * ct[388];
  proc_control_B.ct_m[565] = proc_control_B.ct_tmp_j1 * ct[26] * ct[388];
  proc_control_B.ct_tmp_k = proc_control_B.ct_tmp_an * ct[26];
  proc_control_B.ct_m[566] = proc_control_B.ct_tmp_k * ct[388];
  proc_control_B.ct_m[567] = ct[398];
  proc_control_B.ct_m[568] = proc_control_B.ct_tmp_o * ct[25] * ct[388];
  proc_control_B.ct_tmp_j1 = ct[15] * ct[17];
  proc_control_B.ct_m[569] = proc_control_B.ct_tmp_j1 * ct[24] * ct[388];
  proc_control_B.ct_m[570] = proc_control_B.ct_tmp_o * ct[26] * ct[388];
  proc_control_B.ct_m[571] = proc_control_B.ct_tmp_j1 * ct[25] * ct[388];
  proc_control_B.ct_m[572] = proc_control_B.ct_tmp_nh * ct[388];
  proc_control_B.ct_m[573] = proc_control_B.ct_tmp_j1 * ct[26] * ct[388];
  proc_control_B.ct_m[574] = proc_control_B.ct_tmp_jk * ct[388];
  proc_control_B.ct_m[575] = proc_control_B.ct_tmp_tmp_a * ct[26] * ct[388];
  proc_control_B.ct_m[576] = ct[399];
  proc_control_B.ct_m[577] = ct[26] * ct[290];
  proc_control_B.ct_m[578] = ct[26] * ct[291];
  proc_control_B.ct_m[579] = ct[26] * ct[292];
  proc_control_B.ct_m[580] = ct[26] * ct[293];
  proc_control_B.ct_m[581] = ct[26] * ct[294];
  proc_control_B.ct_m[582] = ct[26] * ct[295];
  proc_control_B.ct_m[583] = ct[26] * ct[308];
  proc_control_B.ct_m[584] = ct[14] * ct[90];
  proc_control_B.ct_m[585] = ct[400];
  proc_control_B.ct_m[586] = ct[10] * ct[96];
  proc_control_B.ct_m[587] = ct[17] * ct[106];
  proc_control_B.ct_m[588] = ct[24] * ct[77];
  proc_control_B.ct_m[589] = ct[24] * ct[80];
  proc_control_B.ct_m[590] = ct[401];
  proc_control_B.ct_m[591] = ct[24] * ct[81];
  proc_control_B.ct_m[592] = ct[24] * ct[83];
  proc_control_B.ct_m[593] = ct[24] * ct[87];
  proc_control_B.ct_m[594] = ct[24] * ct[88];
  proc_control_B.ct_m[595] = ct[26] * ct[77];
  proc_control_B.ct_m[596] = ct[402];
  proc_control_B.ct_m[597] = ct[26] * ct[80];
  proc_control_B.ct_m[598] = ct[26] * ct[81];
  proc_control_B.ct_m[599] = ct[25] * ct[94];
  proc_control_B.ct_m[600] = ct[26] * ct[94];
  proc_control_B.ct_m[601] = ct[25] * ct[103];
  proc_control_B.ct_m[602] = ct[403];
  proc_control_B.ct_m[603] = ct[26] * ct[101];
  proc_control_B.ct_m[604] = ct[25] * ct[108];
  proc_control_B.ct_m[605] = ct[26] * ct[103];
  proc_control_B.ct_m[606] = ct[26] * ct[108];
  proc_control_B.ct_m[607] = ct[26] * ct[110];
  proc_control_B.ct_m[608] = ct[404];
  proc_control_B.ct_m[609] = ct[25] * ct[114];
  proc_control_B.ct_m[610] = ct[26] * ct[112];
  proc_control_B.ct_m[611] = ct[25] * ct[116];
  proc_control_B.ct_m[612] = ct[26] * ct[114];
  proc_control_B.ct_m[613] = ct[26] * ct[116];
  proc_control_B.ct_m[614] = ct[26] * ct[117];
  proc_control_B.ct_m[615] = ct[21] * ct[126];
  proc_control_B.ct_m[616] = ct[22] * ct[128];
  proc_control_B.ct_m[617] = ct[405];
  proc_control_B.ct_m[618] = ct[21] * ct[130];
  proc_control_B.ct_m[619] = ct[21] * ct[133];
  proc_control_B.ct_m[620] = ct[21] * ct[135];
  proc_control_B.ct_m[621] = ct[22] * ct[135];
  proc_control_B.ct_m[622] = ct[22] * ct[136];
  proc_control_B.ct_m[623] = ct[406];
  proc_control_B.ct_m[624] = ct[21] * ct[140];
  proc_control_B.ct_m[625] = ct[22] * ct[140];
  proc_control_B.ct_m[626] = ct[22] * ct[142];
  proc_control_B.ct_m[627] = ct[25] * ct[119];
  proc_control_B.ct_m[628] = ct[26] * ct[118];
  proc_control_B.ct_m[629] = ct[407];
  proc_control_B.ct_m[630] = ct[21] * ct[144];
  proc_control_B.ct_m[631] = ct[21] * ct[145];
  proc_control_B.ct_m[632] = ct[21] * ct[147];
  proc_control_B.ct_m[633] = ct[23] * ct[147];
  proc_control_B.ct_m[634] = ct[21] * ct[149];
  proc_control_B.ct_m[635] = ct[408];
  proc_control_B.ct_m[636] = ct[23] * ct[154];
  proc_control_B.ct_m[637] = ct[21] * ct[155];
  proc_control_B.ct_m[638] = ct[23] * ct[155];
  proc_control_B.ct_m[639] = ct[23] * ct[158];
  proc_control_B.ct_m[640] = ct[23] * ct[161];
  proc_control_B.ct_m[641] = ct[26] * ct[119];
  proc_control_B.ct_m[642] = ct[409];
  proc_control_B.ct_m[643] = ct[22] * ct[163];
  proc_control_B.ct_m[644] = ct[22] * ct[165];
  proc_control_B.ct_m[645] = ct[22] * ct[166];
  proc_control_B.ct_m[646] = ct[23] * ct[165];
  proc_control_B.ct_m[647] = ct[22] * ct[169];
  proc_control_B.ct_m[648] = ct[410];
  proc_control_B.ct_m[649] = ct[23] * ct[169];
  proc_control_B.ct_m[650] = ct[23] * ct[172];
  proc_control_B.ct_m[651] = ct[23] * ct[173];
  proc_control_B.ct_m[652] = ct[22] * ct[175];
  proc_control_B.ct_m[653] = ct[23] * ct[177];
  proc_control_B.ct_m[654] = ct[411];
  proc_control_B.ct_m[655] = ct[21] * ct[183];
  proc_control_B.ct_m[656] = ct[26] * ct[121];
  proc_control_B.ct_m[657] = ct[21] * ct[184];
  proc_control_B.ct_m[658] = ct[22] * ct[187];
  proc_control_B.ct_m[659] = ct[412];
  proc_control_B.ct_m[660] = ct[22] * ct[188];
  proc_control_B.ct_m[661] = ct[22] * ct[189];
  proc_control_B.ct_m[662] = ct[22] * ct[190];
  proc_control_B.ct_m[663] = ct[22] * ct[191];
  proc_control_B.ct_m[664] = ct[23] * ct[191];
  proc_control_B.ct_m[665] = ct[22] * ct[192];
  proc_control_B.ct_m[666] = ct[23] * ct[192];
  proc_control_B.ct_m[667] = ct[23] * ct[193];
  proc_control_B.ct_tmp_nh = ct[18] * ct[27] * ct[31] * ct[357];
  proc_control_B.ct_m[668] = proc_control_B.ct_tmp_nh * 2.0;
  proc_control_B.ct_tmp_jk = ct[18] * ct[28] * ct[31] * ct[357];
  proc_control_B.ct_m[669] = proc_control_B.ct_tmp_jk * 2.0;
  proc_control_B.ct_m[670] = ct[413];
  proc_control_B.ct_tmp_j1 = ct[19] * ct[27] * ct[31] * ct[357];
  proc_control_B.ct_m[671] = proc_control_B.ct_tmp_j1 * 2.0;
  proc_control_B.ct_m[672] = proc_control_B.ct_tmp_nh * 4.0;
  proc_control_B.ct_m[673] = ct[18] * ct[29] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_tmp_nh = ct[19] * ct[28] * ct[31] * ct[357];
  proc_control_B.ct_m[674] = proc_control_B.ct_tmp_nh * 2.0;
  proc_control_B.ct_m[675] = ct[20] * ct[27] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_m[676] = proc_control_B.ct_tmp_jk * 4.0;
  proc_control_B.ct_m[677] = proc_control_B.ct_tmp_j1 * 4.0;
  proc_control_B.ct_m[678] = ct[19] * ct[29] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_m[679] = ct[20] * ct[28] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_m[680] = proc_control_B.ct_tmp_nh * 4.0;
  proc_control_B.ct_m[681] = ct[414];
  proc_control_B.ct_m[682] = ct[20] * ct[29] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_m[683] = ct[18] * ct[30] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_m[684] = ct[19] * ct[30] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_m[685] = ct[20] * ct[30] * ct[31] * ct[357] * 2.0;
  proc_control_B.ct_m[686] = ct[21] * ct[194];
  proc_control_B.ct_m[687] = ct[21] * ct[195];
  proc_control_B.ct_m[688] = ct[21] * ct[196];
  proc_control_B.ct_m[689] = ct[22] * ct[196];
  proc_control_B.ct_m[690] = ct[21] * ct[197];
  proc_control_B.ct_m[691] = ct[415];
  proc_control_B.ct_m[692] = ct[23] * ct[197];
  proc_control_B.ct_m[693] = ct[21] * ct[198];
  proc_control_B.ct_m[694] = ct[22] * ct[198];
  proc_control_B.ct_m[695] = ct[22] * ct[200];
  proc_control_B.ct_m[696] = ct[21] * ct[201];
  proc_control_B.ct_m[697] = ct[23] * ct[201];
  proc_control_B.ct_m[698] = ct[23] * ct[202];
  proc_control_B.ct_m[699] = ct[22] * ct[203];
  proc_control_B.ct_m[700] = ct[23] * ct[204];
  proc_control_B.ct_m[701] = ct[22] * ct[205];
  proc_control_B.ct_m[702] = ct[416];
  proc_control_B.ct_m[703] = ct[23] * ct[206];
  proc_control_B.ct_m[704] = ct[23] * ct[207];
  proc_control_B.ct_m[705] = ct[22] * ct[208];
  proc_control_B.ct_m[706] = ct[23] * ct[211];
  proc_control_B.ct_m[707] = ct[417];
  proc_control_B.ct_m[708] = ct[242] + ct[285];
  proc_control_B.ct_m[709] = ct[242] + ct[319];
  proc_control_B.ct_m[710] = ct[285] + ct[319];
  proc_control_B.ct_m[711] = ct[418];
  proc_control_B.ct_m[712] = -ct[275];
  proc_control_B.ct_m[713] = -ct[287];
  proc_control_B.ct_m[714] = -ct[289];
  proc_control_B.ct_m[715] = proc_control_B.ct_tmp_da * ct[25] * ct[43];
  proc_control_B.ct_m[716] = proc_control_B.ct_tmp_b * ct[25] * ct[43];
  proc_control_B.ct_m[717] = proc_control_B.ct_tmp_no * ct[25] * ct[43];
  proc_control_B.ct_m[718] = ct[419];
  proc_control_B.ct_m[719] = proc_control_B.ct_tmp_da * ct[26] * ct[43];
  proc_control_B.ct_m[720] = proc_control_B.ct_tmp_b * ct[26] * ct[43];
  proc_control_B.ct_m[721] = proc_control_B.ct_tmp_no * ct[26] * ct[43];
  proc_control_B.ct_m[722] = proc_control_B.ct_tmp_p * ct[25] * ct[26] * ct[41];
  proc_control_B.ct_m[723] = proc_control_B.ct_tmp_pn * ct[25] * ct[26] * ct[41];
  proc_control_B.ct_m[724] = proc_control_B.ct_tmp_iz * ct[32] * ct[40];
  proc_control_B.ct_m[725] = proc_control_B.ct_tmp_f * ct[25] * ct[26] * ct[42];
  proc_control_B.ct_m[726] = proc_control_B.ct_tmp_bi * ct[25] * ct[26] * ct[42];
  proc_control_B.ct_m[727] = proc_control_B.ct_tmp_d * ct[32] * ct[40];
  proc_control_B.ct_m[728] = proc_control_B.ct_tmp_lg * ct[32] * ct[41];
  proc_control_B.ct_m[729] = ct[420];
  proc_control_B.ct_m[730] = proc_control_B.ct_tmp * ct[32] * ct[40];
  proc_control_B.ct_m[731] = proc_control_B.ct_tmp_bt * ct[25] * ct[26] * ct[40];
  proc_control_B.ct_tmp = proc_control_B.ct_tmp_j * ct[24];
  proc_control_B.ct_m[732] = proc_control_B.ct_tmp * ct[32] * ct[42];
  proc_control_B.ct_m[733] = proc_control_B.ct_tmp_c * ct[32] * ct[41];
  proc_control_B.ct_tmp_j = proc_control_B.ct_tmp_tmp_f * ct[25] * ct[26];
  proc_control_B.ct_m[734] = proc_control_B.ct_tmp_j * ct[40];
  proc_control_B.ct_m[735] = proc_control_B.ct_tmp_o5 * ct[32] * ct[42];
  proc_control_B.ct_m[736] = proc_control_B.ct_tmp_n * ct[32] * ct[41];
  proc_control_B.ct_m[737] = proc_control_B.ct_tmp_b4 * ct[32] * ct[40];
  proc_control_B.ct_m[738] = proc_control_B.ct_tmp_tmp_i * ct[32] * ct[42];
  proc_control_B.ct_m[739] = proc_control_B.ct_tmp_j * ct[41];
  proc_control_B.ct_m[740] = ct[421];
  proc_control_B.ct_m[741] = proc_control_B.ct_tmp_aq * ct[32] * ct[40];
  proc_control_B.ct_m[742] = proc_control_B.ct_tmp_tmp * ct[32] * ct[40];
  proc_control_B.ct_m[743] = proc_control_B.ct_tmp_a * ct[32] * ct[40];
  proc_control_B.ct_m[744] = proc_control_B.ct_tmp_iy * ct[32] * ct[40];
  proc_control_B.ct_m[745] = proc_control_B.ct_tmp_i * ct[32] * ct[41];
  proc_control_B.ct_m[746] = proc_control_B.ct_tmp_k * ct[32] * ct[40];
  proc_control_B.ct_m[747] = proc_control_B.ct_tmp_l * ct[32] * ct[41];
  proc_control_B.ct_m[748] = proc_control_B.ct_tmp_n0 * ct[32] * ct[41];
  proc_control_B.ct_m[749] = proc_control_B.ct_tmp * ct[25] * ct[43];
  proc_control_B.ct_tmp_n = proc_control_B.ct_tmp_i0 * ct[24];
  proc_control_B.ct_m[750] = proc_control_B.ct_tmp_n * ct[25] * ct[43];
  proc_control_B.ct_m[751] = ct[422];
  proc_control_B.ct_m[752] = proc_control_B.ct_tmp_cg * ct[25] * ct[43];
  proc_control_B.ct_m[753] = proc_control_B.ct_tmp_py * ct[25] * ct[43];
  proc_control_B.ct_m[754] = proc_control_B.ct_tmp_lg * ct[25] * ct[43];
  proc_control_B.ct_m[755] = proc_control_B.ct_tmp_om * ct[25] * ct[43];
  proc_control_B.ct_m[756] = proc_control_B.ct_tmp_cm * ct[25] * ct[43];
  proc_control_B.ct_m[757] = proc_control_B.ct_tmp_oc * ct[25] * ct[43];
  proc_control_B.ct_m[758] = proc_control_B.ct_tmp_iz * ct[25] * ct[43];
  proc_control_B.ct_m[759] = proc_control_B.ct_tmp * ct[26] * ct[43];
  proc_control_B.ct_m[760] = proc_control_B.ct_tmp_n * ct[26] * ct[43];
  proc_control_B.ct_m[761] = proc_control_B.ct_tmp_cg * ct[26] * ct[43];
  proc_control_B.ct_m[762] = ct[423];
  proc_control_B.ct_m[763] = proc_control_B.ct_tmp_py * ct[26] * ct[43];
  proc_control_B.ct_m[764] = proc_control_B.ct_tmp_lg * ct[26] * ct[43];
  proc_control_B.ct_m[765] = proc_control_B.ct_tmp_om * ct[26] * ct[43];
  proc_control_B.ct_m[766] = proc_control_B.ct_tmp_cm * ct[26] * ct[43];
  proc_control_B.ct_m[767] = proc_control_B.ct_tmp_oc * ct[26] * ct[43];
  proc_control_B.ct_m[768] = proc_control_B.ct_tmp_iz * ct[26] * ct[43];
  proc_control_B.ct_m[769] = proc_control_B.ct_tmp_o5 * ct[26] * ct[43];
  proc_control_B.ct_m[770] = proc_control_B.ct_tmp_ol * ct[26] * ct[43];
  proc_control_B.ct_m[771] = proc_control_B.ct_tmp_h * ct[26] * ct[43];
  proc_control_B.ct_m[772] = proc_control_B.ct_tmp_ih * ct[26] * ct[43];
  proc_control_B.ct_m[773] = ct[424];
  proc_control_B.ct_m[774] = proc_control_B.ct_tmp_c * ct[26] * ct[43];
  proc_control_B.ct_m[775] = proc_control_B.ct_tmp_g * ct[26] * ct[43];
  proc_control_B.ct_m[776] = proc_control_B.ct_tmp_c1 * ct[26] * ct[43];
  proc_control_B.ct_m[777] = proc_control_B.ct_tmp_ok * ct[26] * ct[43];
  proc_control_B.ct_m[778] = proc_control_B.ct_tmp_d * ct[26] * ct[43];
  proc_control_B.ct_tmp = ct[10] * ct[24];
  proc_control_B.ct_tmp_n = proc_control_B.ct_tmp * ct[25] * ct[32];
  proc_control_B.ct_m[779] = proc_control_B.ct_tmp_n * ct[40];
  proc_control_B.ct_tmp_d = ct[14] * ct[24];
  proc_control_B.ct_tmp_c = proc_control_B.ct_tmp_d * ct[25] * ct[32];
  proc_control_B.ct_m[780] = proc_control_B.ct_tmp_c * ct[40];
  proc_control_B.ct_tmp = proc_control_B.ct_tmp * ct[26] * ct[32];
  proc_control_B.ct_m[781] = proc_control_B.ct_tmp * ct[40];
  proc_control_B.ct_tmp_d = proc_control_B.ct_tmp_d * ct[26] * ct[32];
  proc_control_B.ct_m[782] = proc_control_B.ct_tmp_d * ct[40];
  proc_control_B.ct_tmp_j = ct[6] * ct[24];
  proc_control_B.ct_tmp_nh = proc_control_B.ct_tmp_j * ct[25] * ct[32];
  proc_control_B.ct_m[783] = proc_control_B.ct_tmp_nh * ct[41];
  proc_control_B.ct_m[784] = ct[425];
  proc_control_B.ct_m[785] = proc_control_B.ct_tmp_c * ct[41];
  proc_control_B.ct_tmp_c = ct[10] * ct[25] * ct[26] * ct[32];
  proc_control_B.ct_m[786] = proc_control_B.ct_tmp_c * ct[40];
  proc_control_B.ct_tmp_jk = ct[14] * ct[25] * ct[26] * ct[32];
  proc_control_B.ct_m[787] = proc_control_B.ct_tmp_jk * ct[40];
  proc_control_B.ct_tmp_j = proc_control_B.ct_tmp_j * ct[26] * ct[32];
  proc_control_B.ct_m[788] = proc_control_B.ct_tmp_j * ct[41];
  proc_control_B.ct_m[789] = proc_control_B.ct_tmp_nh * ct[42];
  proc_control_B.ct_m[790] = proc_control_B.ct_tmp_n * ct[42];
  proc_control_B.ct_m[791] = proc_control_B.ct_tmp_d * ct[41];
  proc_control_B.ct_tmp_n = ct[6] * ct[25] * ct[26] * ct[32];
  proc_control_B.ct_m[792] = proc_control_B.ct_tmp_n * ct[41];
  proc_control_B.ct_m[793] = proc_control_B.ct_tmp_j * ct[42];
  proc_control_B.ct_m[794] = proc_control_B.ct_tmp * ct[42];
  proc_control_B.ct_m[795] = ct[426];
  proc_control_B.ct_m[796] = proc_control_B.ct_tmp_jk * ct[41];
  proc_control_B.ct_m[797] = proc_control_B.ct_tmp_n * ct[42];
  proc_control_B.ct_m[798] = proc_control_B.ct_tmp_c * ct[42];
  proc_control_B.ct_m[799] = ct[427];
  proc_control_B.ct_m[800] = ct[428];
  proc_control_B.ct_m[801] = ct[429];
  proc_control_B.ct_m[802] = ct[430];
  proc_control_B.ct_m[803] = ct[431];
  proc_control_B.ct_m[804] = ct[432];
  proc_control_ft_2(proc_control_B.ct_m, Anq);
}

void proc_control::proc_cont_AUVQuatJacobianMatrix(const real_T in1[13], const
  real_T in3[38], real_T Anq[169])
{
  // AUVQuatJacobianMatrix
  //     Anq = AUVQuatJacobianMatrix(IN1,IN2,IN3)
  //     This function was generated by the Symbolic Math Toolbox version 9.1.
  //     05-Jul-2022 23:04:31
  proc_control_B.t15_j = in3[6] * in1[10];
  proc_control_B.t17_e = in3[9] * in1[10];
  proc_control_B.t19 = in3[4] * in1[11];
  proc_control_B.t23 = in3[10] * in1[11];
  proc_control_B.t25 = in3[5] * in1[12];
  proc_control_B.t27_j = in3[8] * in1[12];
  proc_control_B.t33_j = in1[10] * in3[13];
  proc_control_B.t34_g = in1[10] * in3[14];
  proc_control_B.t35 = in1[11] * in3[12];
  proc_control_B.t37 = in1[11] * in3[14];
  proc_control_B.t38 = in3[12] * in1[12];
  proc_control_B.t39_o = in1[12] * in3[13];
  proc_control_B.t41_h = in1[7] * in3[30];
  proc_control_B.t42_c = in1[8] * in3[31];
  proc_control_B.t43 = in1[9] * in3[32];
  proc_control_B.t44_a = in3[1] * in3[36];
  proc_control_B.t45_l = in3[12] * in3[12];
  proc_control_B.t47 = in3[13] * in3[13];
  proc_control_B.t50 = in3[14] * in3[14];
  proc_control_B.t57_j = in3[0] * in3[0];
  proc_control_B.t58 = rt_powd_snf(in3[0], 3.0);
  proc_control_B.t129 = in1[4] / 2.0;
  proc_control_B.t130 = in1[5] / 2.0;
  proc_control_B.t131 = in1[6] / 2.0;
  proc_control_B.t133 = in1[10] / 2.0;
  proc_control_B.t134 = in1[11] / 2.0;
  proc_control_B.t135 = in1[12] / 2.0;
  proc_control_B.in3[0] = in3[18];
  proc_control_B.in3[1] = in3[19];
  proc_control_B.in3[2] = in3[20];
  proc_control_B.in3[3] = in3[21];
  proc_control_B.in3[4] = in3[22];
  proc_control_B.in3[5] = in3[23];
  std::memcpy(&proc_control_B.in3[6], &in3[3], sizeof(real_T) << 3U);
  proc_control_B.in3[14] = in3[11];
  proc_control_B.in3[15] = in3[33];
  proc_control_B.in3[16] = in3[34];
  proc_control_B.in3[17] = in3[35];
  proc_control_B.in3[18] = in3[15];
  proc_control_B.in3[19] = in3[16];
  proc_control_B.in3[20] = in3[17];
  proc_control_B.in3[21] = in3[12];
  proc_control_B.in3[22] = in3[13];
  proc_control_B.in3[23] = in3[14];
  proc_control_B.in3[24] = in3[30];
  proc_control_B.in3[25] = in3[31];
  proc_control_B.in3[26] = in3[32];
  proc_control_B.in3[27] = in1[4];
  proc_control_B.in3[28] = in1[5];
  proc_control_B.in3[29] = in1[6];
  proc_control_B.in3[30] = in1[3];
  proc_control_B.in3[31] = in3[37];
  proc_control_B.in3[32] = in3[0];
  proc_control_B.in3[33] = in1[10];
  proc_control_B.in3[34] = in1[11];
  proc_control_B.in3[35] = in1[12];
  proc_control_B.in3_tmp_ld = in3[0] * in3[12];
  proc_control_B.in3[36] = proc_control_B.in3_tmp_ld * in1[8];
  proc_control_B.in3_tmp = in3[0] * in3[13];
  proc_control_B.in3[37] = proc_control_B.in3_tmp * in1[8];
  proc_control_B.in3[38] = proc_control_B.in3_tmp * in1[9];
  proc_control_B.in3_tmp_ly = in3[0] * in3[14];
  proc_control_B.in3[39] = proc_control_B.in3_tmp_ly * in1[9];
  proc_control_B.in3[40] = -in3[33];
  proc_control_B.in3[41] = -in3[34];
  proc_control_B.in3[42] = -in3[35];
  proc_control_B.in3[43] = -in3[0];
  if (std::isnan(in1[7])) {
    proc_control_B.in3_tmp_tmp = in1[7];
  } else if (in1[7] < 0.0) {
    proc_control_B.in3_tmp_tmp = -1.0;
  } else {
    proc_control_B.in3_tmp_tmp = (in1[7] > 0.0);
  }

  proc_control_B.in3[44] = in3[24] * proc_control_B.in3_tmp_tmp * in1[7];
  if (std::isnan(in1[8])) {
    proc_control_B.in3_tmp_tmp = in1[8];
  } else if (in1[8] < 0.0) {
    proc_control_B.in3_tmp_tmp = -1.0;
  } else {
    proc_control_B.in3_tmp_tmp = (in1[8] > 0.0);
  }

  proc_control_B.in3[45] = in3[25] * proc_control_B.in3_tmp_tmp * in1[8];
  if (std::isnan(in1[9])) {
    proc_control_B.in3_tmp_tmp = in1[9];
  } else if (in1[9] < 0.0) {
    proc_control_B.in3_tmp_tmp = -1.0;
  } else {
    proc_control_B.in3_tmp_tmp = (in1[9] > 0.0);
  }

  proc_control_B.in3[46] = in3[26] * proc_control_B.in3_tmp_tmp * in1[9];
  proc_control_B.in3[47] = -(in3[10] * in1[10]);
  proc_control_B.in3[48] = -(in3[5] * in1[11]);
  proc_control_B.in3[49] = -(in3[6] * in1[12]);
  proc_control_B.in3[50] = -(in1[10] * in3[33]);
  proc_control_B.in3[51] = -(in1[11] * in3[34]);
  proc_control_B.in3[52] = -(in1[12] * in3[35]);
  proc_control_B.in3[53] = -proc_control_B.t34_g;
  proc_control_B.in3[54] = -proc_control_B.t35;
  proc_control_B.in3[55] = -proc_control_B.t39_o;
  proc_control_B.in3[56] = in1[4] * in1[4] * 2.0;
  proc_control_B.in3[57] = in1[5] * in1[5] * 2.0;
  proc_control_B.in3[58] = in1[6] * in1[6] * 2.0;
  proc_control_B.in3[59] = -proc_control_B.t41_h;
  proc_control_B.in3[60] = -proc_control_B.t42_c;
  proc_control_B.in3[61] = -proc_control_B.t43;
  proc_control_B.in3[62] = -proc_control_B.t44_a;
  proc_control_B.in3[63] = proc_control_B.t129;
  proc_control_B.in3[64] = proc_control_B.t130;
  proc_control_B.in3[65] = proc_control_B.t131;
  proc_control_B.in3[66] = in1[3] / 2.0;
  proc_control_B.in3[67] = proc_control_B.t133;
  proc_control_B.in3[68] = proc_control_B.t134;
  proc_control_B.in3[69] = proc_control_B.t135;
  if (std::isnan(in1[10])) {
    proc_control_B.in3_tmp_tmp = in1[10];
  } else if (in1[10] < 0.0) {
    proc_control_B.in3_tmp_tmp = -1.0;
  } else {
    proc_control_B.in3_tmp_tmp = (in1[10] > 0.0);
  }

  proc_control_B.in3[70] = in1[10] * in3[27] * proc_control_B.in3_tmp_tmp;
  proc_control_B.in3[71] = proc_control_B.t37 + in1[7];
  if (std::isnan(in1[11])) {
    proc_control_B.in3_tmp_tmp = in1[11];
  } else if (in1[11] < 0.0) {
    proc_control_B.in3_tmp_tmp = -1.0;
  } else {
    proc_control_B.in3_tmp_tmp = (in1[11] > 0.0);
  }

  proc_control_B.in3[72] = in1[11] * in3[28] * proc_control_B.in3_tmp_tmp;
  proc_control_B.in3[73] = proc_control_B.t33_j + in1[9];
  proc_control_B.in3[74] = in3[3] * in1[10];
  proc_control_B.in3[75] = proc_control_B.t38 + in1[8];
  if (std::isnan(in1[12])) {
    proc_control_B.in3_tmp_tmp = in1[12];
  } else if (in1[12] < 0.0) {
    proc_control_B.in3_tmp_tmp = -1.0;
  } else {
    proc_control_B.in3_tmp_tmp = (in1[12] > 0.0);
  }

  proc_control_B.in3[76] = in1[12] * in3[29] * proc_control_B.in3_tmp_tmp;
  proc_control_B.in3_tmp_tmp = in3[3] * in3[7];
  proc_control_B.in3_tmp_i = proc_control_B.in3_tmp_tmp * in3[11];
  proc_control_B.in3_tmp_g0 = proc_control_B.in3_tmp_i * in3[31];
  proc_control_B.in3[77] = proc_control_B.in3_tmp_g0 * in3[0];
  proc_control_B.in3_tmp_tmp_d = in3[3] * in3[8];
  proc_control_B.in3_tmp_m = proc_control_B.in3_tmp_tmp_d * in3[10];
  proc_control_B.in3_tmp_el = proc_control_B.in3_tmp_m * in3[31];
  proc_control_B.in3[78] = proc_control_B.in3_tmp_el * in3[0];
  proc_control_B.in3_tmp_tmp_f = in3[4] * in3[6];
  proc_control_B.in3_tmp_f = proc_control_B.in3_tmp_tmp_f * in3[11];
  proc_control_B.in3_tmp_n3 = proc_control_B.in3_tmp_f * in3[31];
  proc_control_B.in3[79] = proc_control_B.in3_tmp_n3 * in3[0];
  proc_control_B.in3_tmp_tmp_j = in3[4] * in3[8];
  proc_control_B.in3_tmp_o = proc_control_B.in3_tmp_tmp_j * in3[9];
  proc_control_B.in3_tmp_fn = proc_control_B.in3_tmp_o * in3[31];
  proc_control_B.in3[80] = proc_control_B.in3_tmp_fn * in3[0];
  proc_control_B.in3_tmp_tmp_n = in3[5] * in3[6];
  proc_control_B.in3_tmp_iz = proc_control_B.in3_tmp_tmp_n * in3[10];
  proc_control_B.in3_tmp_nl = proc_control_B.in3_tmp_iz * in3[31];
  proc_control_B.in3[81] = proc_control_B.in3_tmp_nl * in3[0];
  proc_control_B.in3_tmp_tmp_a = in3[5] * in3[7];
  proc_control_B.in3_tmp_e = proc_control_B.in3_tmp_tmp_a * in3[9];
  proc_control_B.in3_tmp_e2 = proc_control_B.in3_tmp_e * in3[31];
  proc_control_B.in3[82] = proc_control_B.in3_tmp_e2 * in3[0];
  proc_control_B.in3[83] = proc_control_B.in3_tmp_i * in3[32] * in3[0];
  proc_control_B.in3[84] = proc_control_B.in3_tmp_m * in3[32] * in3[0];
  proc_control_B.in3[85] = proc_control_B.t15_j;
  proc_control_B.in3[86] = proc_control_B.in3_tmp_f * in3[32] * in3[0];
  proc_control_B.in3[87] = proc_control_B.in3_tmp_o * in3[32] * in3[0];
  proc_control_B.in3[88] = proc_control_B.in3_tmp_iz * in3[32] * in3[0];
  proc_control_B.in3[89] = proc_control_B.in3_tmp_e * in3[32] * in3[0];
  proc_control_B.in3_tmp_g = in3[3] * in3[34];
  proc_control_B.in3_tmp_m4 = proc_control_B.in3_tmp_g * in3[30];
  proc_control_B.in3[90] = proc_control_B.in3_tmp_m4 * in3[31] * in3[32];
  proc_control_B.in3_tmp_tmp_tmp = in3[5] * in3[34];
  proc_control_B.in3_tmp_tmp_ft = proc_control_B.in3_tmp_tmp_tmp * in3[30];
  proc_control_B.in3_tmp_pd = proc_control_B.in3_tmp_tmp_ft * in3[31];
  proc_control_B.in3[91] = proc_control_B.in3_tmp_pd * in3[32];
  proc_control_B.in3_tmp_tmp_tmp_h = in3[11] * in3[34];
  proc_control_B.in3_tmp_tmp_kb = proc_control_B.in3_tmp_tmp_tmp_h * in3[30];
  proc_control_B.in3_tmp_p5 = proc_control_B.in3_tmp_tmp_kb * in3[31];
  proc_control_B.in3[92] = proc_control_B.in3_tmp_p5 * in3[32];
  proc_control_B.in3_tmp_tmp_dn = in3[7] * in3[11];
  proc_control_B.in3_tmp_j = proc_control_B.in3_tmp_tmp_dn * in3[33];
  proc_control_B.in3_tmp_by = proc_control_B.in3_tmp_j * in3[30];
  proc_control_B.in3[93] = proc_control_B.in3_tmp_by * in3[0];
  proc_control_B.in3_tmp_tmp_b = in3[8] * in3[10];
  proc_control_B.in3_tmp_o4 = proc_control_B.in3_tmp_tmp_b * in3[33];
  proc_control_B.in3_tmp_av = proc_control_B.in3_tmp_o4 * in3[30];
  proc_control_B.in3[94] = proc_control_B.in3_tmp_av * in3[0];
  proc_control_B.in3[95] = in3[8] * in1[10];
  proc_control_B.in3_tmp_tmp_j0 = in3[3] * in3[35];
  proc_control_B.in3_tmp_kt = proc_control_B.in3_tmp_tmp_j0 * in3[30] * in3[31];
  proc_control_B.in3[96] = proc_control_B.in3_tmp_kt * in3[32];
  proc_control_B.in3_tmp_tmp_tmp_l = in3[4] * in3[35];
  proc_control_B.in3_tmp_tmp_hj = proc_control_B.in3_tmp_tmp_tmp_l * in3[30];
  proc_control_B.in3_tmp_a0 = proc_control_B.in3_tmp_tmp_hj * in3[31];
  proc_control_B.in3[97] = proc_control_B.in3_tmp_a0 * in3[32];
  proc_control_B.in3_tmp_tmp_tmp_p = in3[6] * in3[35];
  proc_control_B.in3_tmp_tmp_d1 = proc_control_B.in3_tmp_tmp_tmp_p * in3[30];
  proc_control_B.in3_tmp_c = proc_control_B.in3_tmp_tmp_d1 * in3[31];
  proc_control_B.in3[98] = proc_control_B.in3_tmp_c * in3[32];
  proc_control_B.in3_tmp_tmp_tmp_c = in3[7] * in3[35];
  proc_control_B.in3_tmp_tmp_j1 = proc_control_B.in3_tmp_tmp_tmp_c * in3[30];
  proc_control_B.in3_tmp_jkx = proc_control_B.in3_tmp_tmp_j1 * in3[31];
  proc_control_B.in3[99] = proc_control_B.in3_tmp_jkx * in3[32];
  proc_control_B.in3[100] = proc_control_B.in3_tmp_j * in3[31] * in3[0];
  proc_control_B.in3_tmp_nq = proc_control_B.in3_tmp_o4 * in3[31];
  proc_control_B.in3[101] = proc_control_B.in3_tmp_nq * in3[0];
  proc_control_B.in3_tmp_tmp_h = in3[3] * in3[11];
  proc_control_B.in3_tmp_m3 = proc_control_B.in3_tmp_tmp_h * in3[34];
  proc_control_B.in3[102] = proc_control_B.in3_tmp_m3 * in3[30] * in3[0];
  proc_control_B.in3_tmp_tmp_i = in3[5] * in3[9];
  proc_control_B.in3_tmp_a = proc_control_B.in3_tmp_tmp_i * in3[34];
  proc_control_B.in3_tmp_i2 = proc_control_B.in3_tmp_a * in3[30];
  proc_control_B.in3[103] = proc_control_B.in3_tmp_i2 * in3[0];
  proc_control_B.in3[104] = proc_control_B.in3_tmp_j * in3[32] * in3[0];
  proc_control_B.in3[105] = proc_control_B.t17_e;
  proc_control_B.in3_tmp_l = in3[33] * in3[34];
  proc_control_B.in3_tmp_tmp_p = proc_control_B.in3_tmp_l * in3[30];
  proc_control_B.in3_tmp_np = proc_control_B.in3_tmp_tmp_p * in3[31];
  proc_control_B.in3[106] = proc_control_B.in3_tmp_np * in3[32];
  proc_control_B.in3_tmp_h = proc_control_B.in3_tmp_tmp * in3[35];
  proc_control_B.in3[107] = proc_control_B.in3_tmp_h * in3[30] * in3[0];
  proc_control_B.in3_tmp_oc = proc_control_B.in3_tmp_tmp_f * in3[35];
  proc_control_B.in3_tmp_fx = proc_control_B.in3_tmp_oc * in3[30];
  proc_control_B.in3[108] = proc_control_B.in3_tmp_fx * in3[0];
  proc_control_B.in3[109] = proc_control_B.in3_tmp_m3 * in3[31] * in3[0];
  proc_control_B.in3_tmp_i4x = proc_control_B.in3_tmp_a * in3[31];
  proc_control_B.in3[110] = proc_control_B.in3_tmp_i4x * in3[0];
  proc_control_B.in3[111] = proc_control_B.in3_tmp_h * in3[31] * in3[0];
  proc_control_B.in3_tmp_b0 = proc_control_B.in3_tmp_oc * in3[31];
  proc_control_B.in3[112] = proc_control_B.in3_tmp_b0 * in3[0];
  proc_control_B.in3[113] = proc_control_B.in3_tmp_m3 * in3[32] * in3[0];
  proc_control_B.in3_tmp_tmp_ds = in3[11] * in3[33];
  proc_control_B.in3_tmp_hn = proc_control_B.in3_tmp_tmp_ds * in3[34];
  proc_control_B.in3_tmp_k3 = proc_control_B.in3_tmp_hn * in3[30];
  proc_control_B.in3[114] = proc_control_B.in3_tmp_k3 * in3[0];
  proc_control_B.in3[115] = proc_control_B.in3_tmp_h * in3[32] * in3[0];
  proc_control_B.in3_tmp_tmp_kx = in3[7] * in3[33];
  proc_control_B.in3_tmp_j3 = proc_control_B.in3_tmp_tmp_kx * in3[35];
  proc_control_B.in3_tmp_d = proc_control_B.in3_tmp_j3 * in3[30];
  proc_control_B.in3[116] = proc_control_B.in3_tmp_d * in3[0];
  proc_control_B.in3_tmp_hs = proc_control_B.in3_tmp_hn * in3[31];
  proc_control_B.in3[117] = proc_control_B.in3_tmp_hs * in3[0];
  proc_control_B.in3_tmp_fj = proc_control_B.in3_tmp_j3 * in3[31];
  proc_control_B.in3[118] = proc_control_B.in3_tmp_fj * in3[0];
  proc_control_B.in3_tmp_jz = proc_control_B.in3_tmp_g * in3[35];
  proc_control_B.in3_tmp_nlw = proc_control_B.in3_tmp_jz * in3[30];
  proc_control_B.in3[119] = proc_control_B.in3_tmp_nlw * in3[0];
  proc_control_B.in3[120] = proc_control_B.t19;
  proc_control_B.in3_tmp_ay = proc_control_B.in3_tmp_jz * in3[31];
  proc_control_B.in3[121] = proc_control_B.in3_tmp_ay * in3[0];
  proc_control_B.in3_tmp_k = proc_control_B.in3_tmp_l * in3[35];
  proc_control_B.in3[122] = proc_control_B.in3_tmp_k * in3[30] * in3[0];
  proc_control_B.in3[123] = proc_control_B.in3_tmp_k * in3[31] * in3[0];
  proc_control_B.in3[124] = proc_control_B.in3_tmp_k * in3[32] * in3[0];
  proc_control_B.in3_tmp_hj = proc_control_B.in3_tmp_tmp * in3[30];
  proc_control_B.in3_tmp_mu = proc_control_B.in3_tmp_hj * in3[31];
  proc_control_B.in3[125] = proc_control_B.in3_tmp_mu * in3[0];
  proc_control_B.in3_tmp_p = proc_control_B.in3_tmp_tmp_d * in3[30];
  proc_control_B.in3_tmp_nh = proc_control_B.in3_tmp_p * in3[31];
  proc_control_B.in3[126] = proc_control_B.in3_tmp_nh * in3[0];
  proc_control_B.in3_tmp_n = proc_control_B.in3_tmp_tmp_n * in3[30];
  proc_control_B.in3_tmp_ch = proc_control_B.in3_tmp_n * in3[31];
  proc_control_B.in3[127] = proc_control_B.in3_tmp_ch * in3[0];
  proc_control_B.in3_tmp_jza = proc_control_B.in3_tmp_tmp_j * in3[30];
  proc_control_B.in3_tmp_d4 = proc_control_B.in3_tmp_jza * in3[31];
  proc_control_B.in3[128] = proc_control_B.in3_tmp_d4 * in3[0];
  proc_control_B.in3_tmp_ot = proc_control_B.in3_tmp_tmp_a * in3[30];
  proc_control_B.in3_tmp_ky = proc_control_B.in3_tmp_ot * in3[31];
  proc_control_B.in3[129] = proc_control_B.in3_tmp_ky * in3[0];
  proc_control_B.in3_tmp_tmp_e = in3[3] * in3[10];
  proc_control_B.in3_tmp_b = proc_control_B.in3_tmp_tmp_e * in3[30];
  proc_control_B.in3_tmp_cl = proc_control_B.in3_tmp_b * in3[31];
  proc_control_B.in3[130] = proc_control_B.in3_tmp_cl * in3[0];
  proc_control_B.in3_tmp_tmp_iz = in3[4] * in3[9];
  proc_control_B.in3_tmp_jk = proc_control_B.in3_tmp_tmp_iz * in3[30];
  proc_control_B.in3_tmp_jd = proc_control_B.in3_tmp_jk * in3[31];
  proc_control_B.in3[131] = proc_control_B.in3_tmp_jd * in3[0];
  proc_control_B.in3_tmp_eq = proc_control_B.in3_tmp_tmp_h * in3[30];
  proc_control_B.in3_tmp_mt = proc_control_B.in3_tmp_eq * in3[31];
  proc_control_B.in3[132] = proc_control_B.in3_tmp_mt * in3[0];
  proc_control_B.in3_tmp_iee = proc_control_B.in3_tmp_tmp_i * in3[30] * in3[31];
  proc_control_B.in3[133] = proc_control_B.in3_tmp_iee * in3[0];
  proc_control_B.in3_tmp_tmp_g = in3[4] * in3[11];
  proc_control_B.in3_tmp_i4 = proc_control_B.in3_tmp_tmp_g * in3[30];
  proc_control_B.in3_tmp_bj = proc_control_B.in3_tmp_i4 * in3[31];
  proc_control_B.in3[134] = proc_control_B.in3_tmp_bj * in3[0];
  proc_control_B.in3_tmp_tmp_ge = in3[5] * in3[10];
  proc_control_B.in3_tmp_ng = proc_control_B.in3_tmp_tmp_ge * in3[30];
  proc_control_B.in3_tmp_oq = proc_control_B.in3_tmp_ng * in3[31];
  proc_control_B.in3[135] = proc_control_B.in3_tmp_oq * in3[0];
  proc_control_B.in3_tmp_tmp_gb = in3[6] * in3[10];
  proc_control_B.in3_tmp_ie = proc_control_B.in3_tmp_tmp_gb * in3[30];
  proc_control_B.in3_tmp_gs = proc_control_B.in3_tmp_ie * in3[31];
  proc_control_B.in3[136] = proc_control_B.in3_tmp_gs * in3[0];
  proc_control_B.in3_tmp_tmp_gr = in3[7] * in3[9];
  proc_control_B.in3_tmp_p3 = proc_control_B.in3_tmp_tmp_gr * in3[30];
  proc_control_B.in3_tmp_ed = proc_control_B.in3_tmp_p3 * in3[31];
  proc_control_B.in3[137] = proc_control_B.in3_tmp_ed * in3[0];
  proc_control_B.in3_tmp_tmp_c = in3[6] * in3[11];
  proc_control_B.in3_tmp_og = proc_control_B.in3_tmp_tmp_c * in3[30];
  proc_control_B.in3_tmp_in = proc_control_B.in3_tmp_og * in3[31];
  proc_control_B.in3[138] = proc_control_B.in3_tmp_in * in3[0];
  proc_control_B.in3[139] = in3[7] * in1[11];
  proc_control_B.in3_tmp_tmp_k = in3[8] * in3[9];
  proc_control_B.in3_tmp_mz = proc_control_B.in3_tmp_tmp_k * in3[30];
  proc_control_B.in3_tmp_eb = proc_control_B.in3_tmp_mz * in3[31];
  proc_control_B.in3[140] = proc_control_B.in3_tmp_eb * in3[0];
  proc_control_B.in3_tmp_otc = proc_control_B.in3_tmp_tmp_dn * in3[30];
  proc_control_B.in3_tmp_is = proc_control_B.in3_tmp_otc * in3[31];
  proc_control_B.in3[141] = proc_control_B.in3_tmp_is * in3[0];
  proc_control_B.in3_tmp_gz = proc_control_B.in3_tmp_tmp_b * in3[30];
  proc_control_B.in3_tmp_m5 = proc_control_B.in3_tmp_gz * in3[31];
  proc_control_B.in3[142] = proc_control_B.in3_tmp_m5 * in3[0];
  proc_control_B.in3[143] = proc_control_B.in3_tmp_hj * in3[32] * in3[0];
  proc_control_B.in3_tmp_gu = proc_control_B.in3_tmp_tmp_f * in3[30];
  proc_control_B.in3[144] = proc_control_B.in3_tmp_gu * in3[32] * in3[0];
  proc_control_B.in3[145] = proc_control_B.in3_tmp_p * in3[32] * in3[0];
  proc_control_B.in3[146] = proc_control_B.in3_tmp_n * in3[32] * in3[0];
  proc_control_B.in3[147] = proc_control_B.in3_tmp_jza * in3[32] * in3[0];
  proc_control_B.in3[148] = proc_control_B.in3_tmp_ot * in3[32] * in3[0];
  proc_control_B.in3[149] = proc_control_B.in3_tmp_b * in3[32] * in3[0];
  proc_control_B.in3[150] = in3[9] * in1[11];
  proc_control_B.in3[151] = proc_control_B.in3_tmp_jk * in3[32] * in3[0];
  proc_control_B.in3[152] = proc_control_B.in3_tmp_eq * in3[32] * in3[0];
  proc_control_B.in3[153] = proc_control_B.in3_tmp_i4 * in3[32] * in3[0];
  proc_control_B.in3[154] = proc_control_B.in3_tmp_ng * in3[32] * in3[0];
  proc_control_B.in3[155] = proc_control_B.in3_tmp_ie * in3[32] * in3[0];
  proc_control_B.in3[156] = proc_control_B.in3_tmp_p3 * in3[32] * in3[0];
  proc_control_B.in3[157] = proc_control_B.in3_tmp_og * in3[32] * in3[0];
  proc_control_B.in3[158] = proc_control_B.in3_tmp_mz * in3[32] * in3[0];
  proc_control_B.in3[159] = proc_control_B.in3_tmp_otc * in3[32] * in3[0];
  proc_control_B.in3[160] = proc_control_B.t23;
  proc_control_B.in3[161] = proc_control_B.in3_tmp_gz * in3[32] * in3[0];
  proc_control_B.in3[162] = proc_control_B.in3_tmp_tmp * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[163] = proc_control_B.in3_tmp_tmp_f * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[164] = proc_control_B.in3_tmp_tmp_d * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[165] = proc_control_B.in3_tmp_tmp_n * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[166] = proc_control_B.in3_tmp_tmp_j * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[167] = proc_control_B.in3_tmp_tmp_a * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[168] = proc_control_B.in3_tmp_tmp_e * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[169] = proc_control_B.in3_tmp_tmp_iz * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[170] = proc_control_B.in3_tmp_tmp_h * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[171] = in3[4] * in1[12];
  proc_control_B.in3[172] = proc_control_B.in3_tmp_tmp_i * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[173] = proc_control_B.in3_tmp_tmp_g * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[174] = proc_control_B.in3_tmp_tmp_ge * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[175] = proc_control_B.in3_tmp_tmp_gb * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[176] = proc_control_B.in3_tmp_tmp_gr * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[177] = proc_control_B.in3_tmp_tmp_c * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[178] = proc_control_B.in3_tmp_tmp_k * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[179] = proc_control_B.in3_tmp_tmp_dn * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[180] = proc_control_B.t25;
  proc_control_B.in3_tmp_ie = in3[8] * in3[33];
  proc_control_B.in3_tmp_ot = proc_control_B.in3_tmp_ie * in3[30];
  proc_control_B.in3_tmp_b = proc_control_B.in3_tmp_ot * in3[31];
  proc_control_B.in3[181] = proc_control_B.in3_tmp_b * in3[0];
  proc_control_B.in3_tmp_p3 = in3[10] * in3[33];
  proc_control_B.in3_tmp_jk = proc_control_B.in3_tmp_p3 * in3[30];
  proc_control_B.in3_tmp_eq = proc_control_B.in3_tmp_jk * in3[31];
  proc_control_B.in3[182] = proc_control_B.in3_tmp_eq * in3[0];
  proc_control_B.in3_tmp_i4 = proc_control_B.in3_tmp_tmp_ds * in3[30] * in3[31];
  proc_control_B.in3[183] = proc_control_B.in3_tmp_i4 * in3[0];
  proc_control_B.in3_tmp_ng = proc_control_B.in3_tmp_tmp_kx * in3[30];
  proc_control_B.in3[184] = proc_control_B.in3_tmp_ng * in3[32] * in3[0];
  proc_control_B.in3[185] = proc_control_B.in3_tmp_ot * in3[32] * in3[0];
  proc_control_B.in3[186] = proc_control_B.in3_tmp_jk * in3[32] * in3[0];
  proc_control_B.in3[187] = proc_control_B.in3_tmp_pd * in3[0];
  proc_control_B.in3_tmp_ot = in3[9] * in3[34];
  proc_control_B.in3_tmp_pd = proc_control_B.in3_tmp_ot * in3[30];
  proc_control_B.in3[188] = proc_control_B.in3_tmp_pd * in3[31] * in3[0];
  proc_control_B.in3[189] = proc_control_B.in3_tmp_p5 * in3[0];
  proc_control_B.in3[190] = proc_control_B.in3_tmp_tmp_kx * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[191] = proc_control_B.in3_tmp_ie * in3[31] * in3[32] * in3
    [0];
  proc_control_B.in3[192] = proc_control_B.in3_tmp_p3 * in3[31] * in3[32] * in3
    [0];
  proc_control_B.in3[193] = proc_control_B.in3_tmp_tmp_ds * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[194] = proc_control_B.in3_tmp_m4 * in3[32] * in3[0];
  proc_control_B.in3[195] = proc_control_B.in3_tmp_kt * in3[0];
  proc_control_B.in3[196] = proc_control_B.in3_tmp_a0 * in3[0];
  proc_control_B.in3[197] = proc_control_B.in3_tmp_tmp_ft * in3[32] * in3[0];
  proc_control_B.in3[198] = proc_control_B.in3_tmp_c * in3[0];
  proc_control_B.in3[199] = proc_control_B.t27_j;
  proc_control_B.in3[200] = proc_control_B.in3_tmp_jkx * in3[0];
  proc_control_B.in3[201] = proc_control_B.in3_tmp_pd * in3[32] * in3[0];
  proc_control_B.in3[202] = proc_control_B.in3_tmp_tmp_kb * in3[32] * in3[0];
  proc_control_B.in3[203] = proc_control_B.in3_tmp_g * in3[31] * in3[32] * in3[0];
  proc_control_B.in3[204] = proc_control_B.in3_tmp_tmp_hj * in3[32] * in3[0];
  proc_control_B.in3[205] = proc_control_B.in3_tmp_tmp_tmp * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[206] = proc_control_B.in3_tmp_tmp_d1 * in3[32] * in3[0];
  proc_control_B.in3[207] = proc_control_B.in3_tmp_tmp_j1 * in3[32] * in3[0];
  proc_control_B.in3[208] = proc_control_B.in3_tmp_ot * in3[31] * in3[32] * in3
    [0];
  proc_control_B.in3[209] = in3[11] * in1[12];
  proc_control_B.in3[210] = proc_control_B.in3_tmp_np * in3[0];
  proc_control_B.in3[211] = proc_control_B.in3_tmp_tmp_j0 * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[212] = proc_control_B.in3_tmp_tmp_tmp_l * in3[31] * in3[32]
    * in3[0];
  proc_control_B.in3[213] = proc_control_B.in3_tmp_tmp_tmp_p * in3[31] * in3[32]
    * in3[0];
  proc_control_B.in3[214] = proc_control_B.in3_tmp_tmp_p * in3[32] * in3[0];
  proc_control_B.in3_tmp_tmp_ft = in3[33] * in3[35];
  proc_control_B.in3_tmp_m4 = proc_control_B.in3_tmp_tmp_ft * in3[30];
  proc_control_B.in3[215] = proc_control_B.in3_tmp_m4 * in3[31] * in3[0];
  proc_control_B.in3[216] = proc_control_B.in3_tmp_l * in3[31] * in3[32] * in3[0];
  proc_control_B.in3[217] = proc_control_B.in3_tmp_m4 * in3[32] * in3[0];
  proc_control_B.in3_tmp_tmp_kb = in3[34] * in3[35];
  proc_control_B.in3_tmp_m4 = proc_control_B.in3_tmp_tmp_kb * in3[30];
  proc_control_B.in3[218] = proc_control_B.in3_tmp_m4 * in3[31] * in3[0];
  proc_control_B.in3[219] = proc_control_B.in3_tmp_tmp_ft * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[220] = proc_control_B.in3_tmp_m4 * in3[32] * in3[0];
  proc_control_B.in3[221] = proc_control_B.in3_tmp_tmp_kb * in3[31] * in3[32] *
    in3[0];
  proc_control_B.in3[222] = in3[3] + -in3[33];
  proc_control_B.in3[223] = in3[7] + -in3[34];
  proc_control_B.in3[224] = in3[11] + -in3[35];
  proc_control_B.in3[225] = in3[30] + -in3[0];
  proc_control_B.in3[226] = in3[31] + -in3[0];
  proc_control_B.in3[227] = in3[32] + -in3[0];
  proc_control_B.in3[228] = -(proc_control_B.in3_tmp * in1[7]);
  proc_control_B.in3[229] = -(proc_control_B.in3_tmp_ly * in1[8]);
  proc_control_B.in3[230] = -(proc_control_B.in3_tmp_ld * in1[9]);
  proc_control_B.in3[231] = proc_control_B.in3_tmp_tmp * proc_control_B.t58;
  proc_control_B.in3[232] = proc_control_B.in3_tmp_tmp_f * proc_control_B.t58;
  proc_control_B.in3[233] = proc_control_B.in3_tmp_tmp_d * proc_control_B.t58;
  proc_control_B.in3[234] = proc_control_B.in3_tmp_tmp_n * proc_control_B.t58;
  proc_control_B.in3[235] = proc_control_B.in3_tmp_tmp_j * proc_control_B.t58;
  proc_control_B.in3[236] = proc_control_B.in3_tmp_tmp_a * proc_control_B.t58;
  proc_control_B.in3[237] = proc_control_B.in3_tmp_tmp_e * proc_control_B.t58;
  proc_control_B.in3[238] = proc_control_B.in3_tmp_tmp_iz * proc_control_B.t58;
  proc_control_B.in3[239] = proc_control_B.in3_tmp_tmp_h * proc_control_B.t58;
  proc_control_B.in3[240] = proc_control_B.in3_tmp_tmp_i * proc_control_B.t58;
  proc_control_B.in3[241] = proc_control_B.in3_tmp_tmp_g * proc_control_B.t58;
  proc_control_B.in3[242] = in1[10] * in3[12];
  proc_control_B.in3[243] = proc_control_B.in3_tmp_tmp_ge * proc_control_B.t58;
  proc_control_B.in3[244] = proc_control_B.in3_tmp_tmp_gb * proc_control_B.t58;
  proc_control_B.in3[245] = proc_control_B.in3_tmp_tmp_gr * proc_control_B.t58;
  proc_control_B.in3[246] = proc_control_B.in3_tmp_tmp_c * proc_control_B.t58;
  proc_control_B.in3[247] = proc_control_B.in3_tmp_tmp_k * proc_control_B.t58;
  proc_control_B.in3[248] = proc_control_B.in3_tmp_tmp_dn * proc_control_B.t58;
  proc_control_B.in3[249] = proc_control_B.in3_tmp_tmp_b * proc_control_B.t58;
  proc_control_B.in3[250] = proc_control_B.in3_tmp_tmp_kx * proc_control_B.t58;
  proc_control_B.in3[251] = proc_control_B.in3_tmp_ie * proc_control_B.t58;
  proc_control_B.in3[252] = proc_control_B.in3_tmp_p3 * proc_control_B.t58;
  proc_control_B.in3[253] = proc_control_B.in3_tmp_tmp_ds * proc_control_B.t58;
  proc_control_B.in3[254] = proc_control_B.in3_tmp_g * proc_control_B.t58;
  proc_control_B.in3[255] = proc_control_B.in3_tmp_tmp_tmp * proc_control_B.t58;
  proc_control_B.in3[256] = proc_control_B.in3_tmp_ot * proc_control_B.t58;
  proc_control_B.in3[257] = proc_control_B.in3_tmp_tmp_tmp_h *
    proc_control_B.t58;
  proc_control_B.in3[258] = proc_control_B.in3_tmp_tmp_j0 * proc_control_B.t58;
  proc_control_B.in3[259] = proc_control_B.in3_tmp_tmp_tmp_l *
    proc_control_B.t58;
  proc_control_B.in3[260] = proc_control_B.in3_tmp_tmp_tmp_p *
    proc_control_B.t58;
  proc_control_B.in3[261] = proc_control_B.in3_tmp_tmp_tmp_c *
    proc_control_B.t58;
  proc_control_B.in3[262] = proc_control_B.in3_tmp_l * proc_control_B.t58;
  proc_control_B.in3[263] = proc_control_B.t34_g;
  proc_control_B.in3[264] = -proc_control_B.t129;
  proc_control_B.in3[265] = -proc_control_B.t130;
  proc_control_B.in3[266] = -proc_control_B.t131;
  proc_control_B.in3[267] = proc_control_B.in3_tmp_tmp_ft * proc_control_B.t58;
  proc_control_B.in3[268] = proc_control_B.in3_tmp_tmp_kb * proc_control_B.t58;
  proc_control_B.in3[269] = -proc_control_B.t133;
  proc_control_B.in3[270] = -proc_control_B.t134;
  proc_control_B.in3[271] = -proc_control_B.t135;
  proc_control_B.in3_tmp = in1[4] * in3[12] * in3[37] * in3[0];
  proc_control_B.in3[272] = proc_control_B.in3_tmp * 2.0;
  proc_control_B.in3_tmp_g = in1[5] * in3[12] * in3[37] * in3[0];
  proc_control_B.in3[273] = proc_control_B.in3_tmp_g * 2.0;
  proc_control_B.in3[274] = proc_control_B.t35;
  proc_control_B.in3_tmp_m4 = in1[4] * in3[13] * in3[37] * in3[0];
  proc_control_B.in3[275] = proc_control_B.in3_tmp_m4 * 2.0;
  proc_control_B.in3[276] = proc_control_B.in3_tmp * 4.0;
  proc_control_B.in3[277] = in1[6] * in3[12] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3_tmp = in1[5] * in3[13] * in3[37] * in3[0];
  proc_control_B.in3[278] = proc_control_B.in3_tmp * 2.0;
  proc_control_B.in3[279] = in1[4] * in3[14] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3[280] = proc_control_B.in3_tmp_g * 4.0;
  proc_control_B.in3[281] = proc_control_B.in3_tmp_m4 * 4.0;
  proc_control_B.in3[282] = in1[6] * in3[13] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3[283] = in1[5] * in3[14] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3[284] = proc_control_B.in3_tmp * 4.0;
  proc_control_B.in3[285] = in1[11] * in3[13];
  proc_control_B.in3[286] = in1[6] * in3[14] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3[287] = in1[3] * in3[12] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3[288] = in1[3] * in3[13] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3[289] = in1[3] * in3[14] * in3[37] * in3[0] * 2.0;
  proc_control_B.in3_tmp = proc_control_B.in3_tmp_i * in3[30];
  proc_control_B.in3[290] = proc_control_B.in3_tmp * in3[31];
  proc_control_B.in3_tmp_g = proc_control_B.in3_tmp_m * in3[30];
  proc_control_B.in3[291] = proc_control_B.in3_tmp_g * in3[31];
  proc_control_B.in3_tmp_m4 = proc_control_B.in3_tmp_f * in3[30];
  proc_control_B.in3[292] = proc_control_B.in3_tmp_m4 * in3[31];
  proc_control_B.in3_tmp_pd = proc_control_B.in3_tmp_o * in3[30];
  proc_control_B.in3[293] = proc_control_B.in3_tmp_pd * in3[31];
  proc_control_B.in3_tmp_p5 = proc_control_B.in3_tmp_iz * in3[30];
  proc_control_B.in3[294] = proc_control_B.in3_tmp_p5 * in3[31];
  proc_control_B.in3_tmp_kt = proc_control_B.in3_tmp_e * in3[30];
  proc_control_B.in3[295] = proc_control_B.in3_tmp_kt * in3[31];
  proc_control_B.in3[296] = proc_control_B.in3_tmp * in3[32];
  proc_control_B.in3[297] = proc_control_B.in3_tmp_g * in3[32];
  proc_control_B.in3[298] = proc_control_B.in3_tmp_m4 * in3[32];
  proc_control_B.in3[299] = proc_control_B.in3_tmp_pd * in3[32];
  proc_control_B.in3[300] = proc_control_B.in3_tmp_p5 * in3[32];
  proc_control_B.in3[301] = proc_control_B.in3_tmp_kt * in3[32];
  proc_control_B.in3[302] = proc_control_B.in3_tmp_g0 * in3[32];
  proc_control_B.in3[303] = proc_control_B.in3_tmp_el * in3[32];
  proc_control_B.in3[304] = proc_control_B.in3_tmp_n3 * in3[32];
  proc_control_B.in3[305] = proc_control_B.in3_tmp_fn * in3[32];
  proc_control_B.in3[306] = proc_control_B.in3_tmp_nl * in3[32];
  proc_control_B.in3[307] = proc_control_B.in3_tmp_e2 * in3[32];
  proc_control_B.in3[308] = proc_control_B.in3_tmp_by * in3[31];
  proc_control_B.in3[309] = proc_control_B.in3_tmp_av * in3[31];
  proc_control_B.in3[310] = proc_control_B.in3_tmp_av * in3[32];
  proc_control_B.in3[311] = proc_control_B.in3_tmp_i2 * in3[31];
  proc_control_B.in3[312] = proc_control_B.in3_tmp_nq * in3[32];
  proc_control_B.in3[313] = proc_control_B.t39_o;
  proc_control_B.in3[314] = proc_control_B.in3_tmp_fx * in3[31];
  proc_control_B.in3[315] = proc_control_B.in3_tmp_i2 * in3[32];
  proc_control_B.in3[316] = proc_control_B.in3_tmp_fx * in3[32];
  proc_control_B.in3[317] = proc_control_B.in3_tmp_i4x * in3[32];
  proc_control_B.in3[318] = proc_control_B.in3_tmp_k3 * in3[31];
  proc_control_B.in3[319] = in1[12] * in3[14];
  proc_control_B.in3[320] = proc_control_B.in3_tmp_b0 * in3[32];
  proc_control_B.in3[321] = proc_control_B.in3_tmp_d * in3[31];
  proc_control_B.in3[322] = proc_control_B.in3_tmp_k3 * in3[32];
  proc_control_B.in3[323] = proc_control_B.in3_tmp_d * in3[32];
  proc_control_B.in3[324] = proc_control_B.in3_tmp_hs * in3[32];
  proc_control_B.in3[325] = proc_control_B.in3_tmp_nlw * in3[31];
  proc_control_B.in3[326] = proc_control_B.in3_tmp_fj * in3[32];
  proc_control_B.in3[327] = proc_control_B.in3_tmp_nlw * in3[32];
  proc_control_B.in3[328] = proc_control_B.in3_tmp_ay * in3[32];
  proc_control_B.in3[329] = proc_control_B.t41_h;
  proc_control_B.in3[330] = proc_control_B.in3_tmp_mu * in3[32];
  proc_control_B.in3[331] = proc_control_B.in3_tmp_gu * in3[31] * in3[32];
  proc_control_B.in3[332] = proc_control_B.in3_tmp_nh * in3[32];
  proc_control_B.in3[333] = proc_control_B.in3_tmp_ch * in3[32];
  proc_control_B.in3[334] = proc_control_B.in3_tmp_d4 * in3[32];
  proc_control_B.in3[335] = proc_control_B.in3_tmp_ky * in3[32];
  proc_control_B.in3[336] = proc_control_B.in3_tmp_cl * in3[32];
  proc_control_B.in3[337] = proc_control_B.in3_tmp_jd * in3[32];
  proc_control_B.in3[338] = proc_control_B.t42_c;
  proc_control_B.in3[339] = proc_control_B.in3_tmp_mt * in3[32];
  proc_control_B.in3[340] = proc_control_B.in3_tmp_iee * in3[32];
  proc_control_B.in3[341] = proc_control_B.in3_tmp_bj * in3[32];
  proc_control_B.in3[342] = proc_control_B.in3_tmp_oq * in3[32];
  proc_control_B.in3[343] = proc_control_B.in3_tmp_gs * in3[32];
  proc_control_B.in3[344] = proc_control_B.in3_tmp_ed * in3[32];
  proc_control_B.in3[345] = proc_control_B.in3_tmp_in * in3[32];
  proc_control_B.in3[346] = proc_control_B.in3_tmp_eb * in3[32];
  proc_control_B.in3[347] = proc_control_B.in3_tmp_is * in3[32];
  proc_control_B.in3[348] = proc_control_B.in3_tmp_m5 * in3[32];
  proc_control_B.in3[349] = proc_control_B.t43;
  proc_control_B.in3[350] = proc_control_B.in3_tmp_g * in3[0];
  proc_control_B.in3[351] = proc_control_B.in3_tmp_m4 * in3[0];
  proc_control_B.in3[352] = proc_control_B.in3_tmp_kt * in3[0];
  proc_control_B.in3[353] = proc_control_B.in3_tmp_ng * in3[31] * in3[32];
  proc_control_B.in3[354] = proc_control_B.in3_tmp_b * in3[32];
  proc_control_B.in3[355] = proc_control_B.in3_tmp_eq * in3[32];
  proc_control_B.in3[356] = proc_control_B.in3_tmp_i4 * in3[32];
  proc_control_B.in3[357] = proc_control_B.t44_a;
  proc_control_B.in3[358] = proc_control_B.in3_tmp_i * proc_control_B.t57_j;
  proc_control_B.in3[359] = proc_control_B.in3_tmp_m * proc_control_B.t57_j;
  proc_control_B.in3[360] = proc_control_B.in3_tmp_f * proc_control_B.t57_j;
  proc_control_B.in3[361] = proc_control_B.in3_tmp_o * proc_control_B.t57_j;
  proc_control_B.in3[362] = proc_control_B.in3_tmp_iz * proc_control_B.t57_j;
  proc_control_B.in3[363] = proc_control_B.in3_tmp_e * proc_control_B.t57_j;
  proc_control_B.in3[364] = proc_control_B.t45_l;
  proc_control_B.in3[365] = proc_control_B.in3_tmp_j * proc_control_B.t57_j;
  proc_control_B.in3[366] = proc_control_B.in3_tmp_o4 * proc_control_B.t57_j;
  proc_control_B.in3[367] = proc_control_B.in3_tmp_m3 * proc_control_B.t57_j;
  proc_control_B.in3[368] = proc_control_B.in3_tmp_a * proc_control_B.t57_j;
  proc_control_B.in3[369] = rt_powd_snf(in3[12], 3.0);
  proc_control_B.in3[370] = proc_control_B.in3_tmp_h * proc_control_B.t57_j;
  proc_control_B.in3[371] = proc_control_B.in3_tmp_oc * proc_control_B.t57_j;
  proc_control_B.in3[372] = proc_control_B.in3_tmp_hn * proc_control_B.t57_j;
  proc_control_B.in3[373] = proc_control_B.in3_tmp_j3 * proc_control_B.t57_j;
  proc_control_B.in3[374] = proc_control_B.t47;
  proc_control_B.in3[375] = proc_control_B.t45_l * proc_control_B.t45_l;
  proc_control_B.in3[376] = rt_powd_snf(in3[13], 3.0);
  proc_control_B.in3[377] = proc_control_B.t50;
  proc_control_B.in3[378] = proc_control_B.t47 * proc_control_B.t47;
  proc_control_B.in3[379] = proc_control_B.in3_tmp_jz * proc_control_B.t57_j;
  proc_control_B.in3[380] = rt_powd_snf(in3[14], 3.0);
  proc_control_B.in3[381] = proc_control_B.in3_tmp_k * proc_control_B.t57_j;
  proc_control_B.in3[382] = proc_control_B.t50 * proc_control_B.t50;
  proc_control_B.in3[383] = proc_control_B.in3_tmp_hj * proc_control_B.t57_j;
  proc_control_B.in3[384] = proc_control_B.in3_tmp_gu * proc_control_B.t57_j;
  proc_control_B.in3[385] = proc_control_B.in3_tmp_p * proc_control_B.t57_j;
  proc_control_B.in3[386] = proc_control_B.in3_tmp_n * proc_control_B.t57_j;
  proc_control_B.in3[387] = proc_control_B.in3_tmp_jza * proc_control_B.t57_j;
  proc_control_B.in3[388] = proc_control_B.t57_j;
  proc_control_B.in3[389] = proc_control_B.t58;
  proc_control_B.in3[390] = proc_control_B.t57_j * proc_control_B.t57_j;
  proc_control_B.in3[391] = rt_powd_snf(in3[0], 5.0);
  proc_control_B.in3[392] = proc_control_B.t15_j * 2.0;
  proc_control_B.in3[393] = proc_control_B.t17_e * 2.0;
  proc_control_B.in3[394] = proc_control_B.t19 * 2.0;
  proc_control_B.in3[395] = proc_control_B.t23 * 2.0;
  proc_control_B.in3[396] = proc_control_B.t25 * 2.0;
  proc_control_B.in3[397] = proc_control_B.t27_j * 2.0;
  proc_control_B.in3[398] = in1[4] * in1[5] * 2.0;
  proc_control_B.in3[399] = in1[4] * in1[6] * 2.0;
  proc_control_B.in3[400] = in1[5] * in1[6] * 2.0;
  proc_control_B.in3[401] = in1[3] * in1[4] * 2.0;
  proc_control_B.in3[402] = in1[3] * in1[5] * 2.0;
  proc_control_B.in3[403] = in1[3] * in1[6] * 2.0;
  proc_control_B.in3[404] = in1[4] * in1[7] * 2.0;
  proc_control_B.in3[405] = in1[5] * in1[7] * 2.0;
  proc_control_B.in3[406] = in1[6] * in1[7] * 2.0;
  proc_control_B.in3[407] = in1[3] * in1[7] * 2.0;
  proc_control_B.in3[408] = in1[4] * in1[8] * 2.0;
  proc_control_B.in3[409] = in1[5] * in1[8] * 2.0;
  proc_control_B.in3[410] = in1[6] * in1[8] * 2.0;
  proc_control_B.in3[411] = in1[3] * in1[8] * 2.0;
  proc_control_B.in3[412] = in1[4] * in1[9] * 2.0;
  proc_control_B.in3[413] = in1[5] * in1[9] * 2.0;
  proc_control_B.in3[414] = in1[6] * in1[9] * 2.0;
  proc_control_B.in3[415] = in1[3] * in1[9] * 2.0;
  proc_control_B.in3[416] = in3[27] * std::abs(in1[10]);
  proc_control_B.in3[417] = in3[28] * std::abs(in1[11]);
  proc_control_B.in3[418] = in3[29] * std::abs(in1[12]);
  proc_control_B.in3[419] = in3[24] * std::abs(in1[7]);
  proc_control_B.in3[420] = in3[25] * std::abs(in1[8]);
  proc_control_B.in3[421] = in3[26] * std::abs(in1[9]);
  proc_control_B.in3[422] = in3[0] * proc_control_B.t33_j;
  proc_control_B.in3[423] = in3[0] * proc_control_B.t34_g;
  proc_control_B.in3[424] = in3[0] * proc_control_B.t35;
  proc_control_B.in3[425] = in3[0] * proc_control_B.t37;
  proc_control_B.in3[426] = in3[0] * proc_control_B.t38;
  proc_control_B.in3[427] = in3[0] * proc_control_B.t39_o;
  proc_control_B.in3[428] = proc_control_B.in3_tmp_ld * in1[7];
  proc_control_B.in3[429] = proc_control_B.in3_tmp_ly * in1[7];
  proc_control_B.in3[430] = in1[7];
  proc_control_B.in3[431] = in1[8];
  proc_control_B.in3[432] = in1[9];
  proc_control_ft_1(proc_control_B.in3, Anq);
}

void proc_control::proc_control_mldivide(const real_T A[36], const real_T B[48],
  real_T Y[48])
{
  real_T c_A[36];
  real_T temp;
  int32_T ipiv[6];
  int32_T Y_tmp;
  int32_T b_info;
  int32_T ip;
  int32_T ipiv_0;
  int32_T kAcol;
  proc_control_xgetrf(A, c_A, ipiv, &b_info);
  std::memcpy(&Y[0], &B[0], 48U * sizeof(real_T));
  for (int32_T b_i{0}; b_i < 5; b_i++) {
    ipiv_0 = ipiv[b_i];
    if (b_i + 1 != ipiv_0) {
      for (int32_T b_j{0}; b_j < 8; b_j++) {
        ip = 6 * b_j + b_i;
        temp = Y[ip];
        Y_tmp = (6 * b_j + ipiv_0) - 1;
        Y[ip] = Y[Y_tmp];
        Y[Y_tmp] = temp;
      }
    }
  }

  for (int32_T b_j{0}; b_j < 8; b_j++) {
    ip = 6 * b_j - 1;
    for (int32_T b_i{0}; b_i < 6; b_i++) {
      kAcol = 6 * b_i - 1;
      ipiv_0 = (b_i + ip) + 1;
      if (Y[ipiv_0] != 0.0) {
        for (b_info = b_i + 2; b_info < 7; b_info++) {
          Y_tmp = b_info + ip;
          Y[Y_tmp] -= c_A[b_info + kAcol] * Y[ipiv_0];
        }
      }
    }
  }

  for (int32_T b_j{0}; b_j < 8; b_j++) {
    ip = 6 * b_j;
    for (b_info = 5; b_info >= 0; b_info--) {
      kAcol = 6 * b_info;
      ipiv_0 = b_info + ip;
      temp = Y[ipiv_0];
      if (temp != 0.0) {
        int32_T b;
        Y[ipiv_0] = temp / c_A[b_info + kAcol];
        b = b_info - 1;
        for (int32_T b_i{0}; b_i <= b; b_i++) {
          Y_tmp = b_i + ip;
          Y[Y_tmp] -= c_A[b_i + kAcol] * Y[ipiv_0];
        }
      }
    }
  }
}

void proc_control::proc_contr_mpcManager_resetImpl(mpcManager_proc_control_T
  *b_this)
{
  static const real_T tmp[13]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0, 45.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T tmp_0[8]{ 0.4, 0.4, 0.4, 0.4, 0.5, 0.5, 0.5, 0.5 };

  //         %% Fonction Reset
  //  Initialize discrete state
  b_this->init = 0.0;
  for (int32_T i{0}; i < 8; i++) {
    b_this->currentFaultCount[i] = 0.0;
  }

  for (int32_T i{0}; i < 8; i++) {
    b_this->isThrusterFault[i] = false;
  }

  for (int32_T i{0}; i < 600; i++) {
    b_this->gainsList[i] = 0.0;
  }

  // initialiser les gains debug
  for (int32_T i{0}; i < 13; i++) {
    b_this->rosOV[i] = tmp[i];
  }

  for (int32_T i{0}; i < 8; i++) {
    b_this->rosMV[i] = 0.2;
  }

  for (int32_T i{0}; i < 8; i++) {
    b_this->rosMVR[i] = tmp_0[i];
  }
}

real_T proc_control::proc_control_norm_pr3(const real_T x[3])
{
  real_T y;
  proc_control_B.scale_ih = 3.3121686421112381E-170;
  proc_control_B.absxk_c = std::abs(x[0]);
  if (proc_control_B.absxk_c > 3.3121686421112381E-170) {
    y = 1.0;
    proc_control_B.scale_ih = proc_control_B.absxk_c;
  } else {
    proc_control_B.t_b = proc_control_B.absxk_c / 3.3121686421112381E-170;
    y = proc_control_B.t_b * proc_control_B.t_b;
  }

  proc_control_B.absxk_c = std::abs(x[1]);
  if (proc_control_B.absxk_c > proc_control_B.scale_ih) {
    proc_control_B.t_b = proc_control_B.scale_ih / proc_control_B.absxk_c;
    y = y * proc_control_B.t_b * proc_control_B.t_b + 1.0;
    proc_control_B.scale_ih = proc_control_B.absxk_c;
  } else {
    proc_control_B.t_b = proc_control_B.absxk_c / proc_control_B.scale_ih;
    y += proc_control_B.t_b * proc_control_B.t_b;
  }

  proc_control_B.absxk_c = std::abs(x[2]);
  if (proc_control_B.absxk_c > proc_control_B.scale_ih) {
    proc_control_B.t_b = proc_control_B.scale_ih / proc_control_B.absxk_c;
    y = y * proc_control_B.t_b * proc_control_B.t_b + 1.0;
    proc_control_B.scale_ih = proc_control_B.absxk_c;
  } else {
    proc_control_B.t_b = proc_control_B.absxk_c / proc_control_B.scale_ih;
    y += proc_control_B.t_b * proc_control_B.t_b;
  }

  return proc_control_B.scale_ih * std::sqrt(y);
}

void proc_control::proc_TrajectoryManager_stepImpl
  (TrajectoryManager_proc_contro_T *b_this, real_T reset, const real_T poses[13],
   const real_T target[7], const real_T x0[7], const real_T mesuredPose[13],
   real_T currentPose[130], boolean_T *isReached)
{
  boolean_T exitg1;

  //  Main execute a chaque iteration.
  //  Implement algorithm. Calculate y as a function of input u and
  if (reset == 1.0) {
    b_this->init = 0.0;
  }

  if (b_this->init == 0.0) {
    //  Conditions Initiales
    for (proc_control_B.ibmat_b = 0; proc_control_B.ibmat_b < 7;
         proc_control_B.ibmat_b++) {
      proc_control_B.a_d[proc_control_B.ibmat_b] = x0[proc_control_B.ibmat_b];
    }

    proc_control_B.a_d[7] = 0.0;
    proc_control_B.a_d[8] = 0.0;
    proc_control_B.a_d[9] = 0.0;
    proc_control_B.a_d[10] = 0.0;
    proc_control_B.a_d[11] = 0.0;
    proc_control_B.a_d[12] = 0.0;
    for (proc_control_B.b_jcol = 0; proc_control_B.b_jcol < 13;
         proc_control_B.b_jcol++) {
      proc_control_B.ibmat_b = proc_control_B.b_jcol * 10;
      for (proc_control_B.b_itilerow = 0; proc_control_B.b_itilerow < 10;
           proc_control_B.b_itilerow++) {
        proc_control_B.b_af[proc_control_B.ibmat_b + proc_control_B.b_itilerow] =
          proc_control_B.a_d[proc_control_B.b_jcol];
      }
    }

    proc_control_B.ibmat_b = 0;
    proc_control_B.b_jcol = 0;
    for (proc_control_B.b_itilerow = 0; proc_control_B.b_itilerow < 13;
         proc_control_B.b_itilerow++) {
      for (proc_control_B.b_index_n = 0; proc_control_B.b_index_n < 10;
           proc_control_B.b_index_n++) {
        b_this->poseBuffer[proc_control_B.b_index_n + proc_control_B.ibmat_b] =
          proc_control_B.b_af[proc_control_B.b_index_n + proc_control_B.b_jcol];
      }

      proc_control_B.ibmat_b += 6001;
      proc_control_B.b_jcol += 10;
    }

    // InitCond;
    b_this->bufferCount = 1.0;
    b_this->init = 1.0;
  }

  // this.BufferReset(reset,mp);
  //  Fonction qui traites les nouveau poses.
  //  Insertion des nouveaux points.
  // if new == this.generationNumber %new>
  if (b_this->bufferCount + 1.0 < 6001.0) {
    proc_control_B.ibmat_b = static_cast<int32_T>(b_this->bufferCount + 1.0);
    for (proc_control_B.b_jcol = 0; proc_control_B.b_jcol < 13;
         proc_control_B.b_jcol++) {
      b_this->poseBuffer[(proc_control_B.ibmat_b + 6001 * proc_control_B.b_jcol)
        - 1] = poses[proc_control_B.b_jcol];
    }

    // this.poseBuffer(this.bufferCount:count + this.bufferCount,:) = pose(1:count+1,:) 
    proc_control_B.b_index = b_this->bufferCount + 1.0;
    b_this->bufferCount = proc_control_B.b_index;
    proc_control_B.b_index = b_this->generationNumber + 1.0;
    b_this->generationNumber = proc_control_B.b_index;
  } else {
    printf("%s\n", "Problem");
    fflush(stdout);
  }

  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  proc_control_B.b_index = 2.0;
  proc_control_B.isempty = false;
  proc_control_B.b_itilerow = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.b_itilerow < 9)) {
    boolean_T exitg2;
    proc_control_B.b_index = static_cast<real_T>(proc_control_B.b_itilerow) +
      2.0;
    for (proc_control_B.ibmat_b = 0; proc_control_B.ibmat_b < 13;
         proc_control_B.ibmat_b++) {
      proc_control_B.x_h[proc_control_B.ibmat_b] = (b_this->poseBuffer[(6001 *
        proc_control_B.ibmat_b + proc_control_B.b_itilerow) + 1] ==
        b_this->emptyArray[proc_control_B.ibmat_b]);
    }

    proc_control_B.y_n = true;
    proc_control_B.b_jcol = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.b_jcol < 13)) {
      if (!proc_control_B.x_h[proc_control_B.b_jcol]) {
        proc_control_B.y_n = false;
        exitg2 = true;
      } else {
        proc_control_B.b_jcol++;
      }
    }

    if (proc_control_B.y_n) {
      proc_control_B.isempty = true;
      exitg1 = true;
    } else {
      proc_control_B.b_itilerow++;
    }
  }

  std::memset(&currentPose[0], 0, 130U * sizeof(real_T));
  proc_control_B.loop_ub_tmp = static_cast<int32_T>(proc_control_B.b_index);
  proc_control_B.ibmat_b = 0;
  proc_control_B.b_jcol = 0;
  for (proc_control_B.b_itilerow = 0; proc_control_B.b_itilerow < 13;
       proc_control_B.b_itilerow++) {
    for (proc_control_B.b_index_n = 0; proc_control_B.b_index_n <
         proc_control_B.loop_ub_tmp; proc_control_B.b_index_n++) {
      currentPose[proc_control_B.b_index_n + proc_control_B.ibmat_b] =
        b_this->poseBuffer[proc_control_B.b_index_n + proc_control_B.b_jcol];
    }

    proc_control_B.ibmat_b += 10;
    proc_control_B.b_jcol += 6001;
  }

  if (proc_control_B.isempty) {
    proc_control_B.b_itilerow = 10 - proc_control_B.loop_ub_tmp;
    for (proc_control_B.b_jcol = 0; proc_control_B.b_jcol <=
         proc_control_B.b_itilerow; proc_control_B.b_jcol++) {
      proc_control_B.b_index_n = proc_control_B.loop_ub_tmp +
        proc_control_B.b_jcol;
      for (proc_control_B.ibmat_b = 0; proc_control_B.ibmat_b < 13;
           proc_control_B.ibmat_b++) {
        proc_control_B.a_d[proc_control_B.ibmat_b] = currentPose[(10 *
          proc_control_B.ibmat_b + proc_control_B.loop_ub_tmp) - 2];
      }

      for (proc_control_B.ibmat_b = 0; proc_control_B.ibmat_b < 13;
           proc_control_B.ibmat_b++) {
        currentPose[(proc_control_B.b_index_n + 10 * proc_control_B.ibmat_b) - 1]
          = proc_control_B.a_d[proc_control_B.ibmat_b];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  proc_control_B.ibmat_b = 0;
  for (proc_control_B.b_jcol = 0; proc_control_B.b_jcol < 13;
       proc_control_B.b_jcol++) {
    proc_control_B.x_h[proc_control_B.b_jcol] = !(b_this->
      poseBuffer[proc_control_B.ibmat_b + 10] == b_this->
      emptyArray[proc_control_B.b_jcol]);
    proc_control_B.ibmat_b += 6001;
  }

  proc_control_B.y_n = true;
  proc_control_B.b_jcol = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.b_jcol < 13)) {
    if (!proc_control_B.x_h[proc_control_B.b_jcol]) {
      proc_control_B.y_n = false;
      exitg1 = true;
    } else {
      proc_control_B.b_jcol++;
    }
  }

  if (proc_control_B.y_n) {
    proc_control_B.ibmat_b = 0;
    for (proc_control_B.b_jcol = 0; proc_control_B.b_jcol < 13;
         proc_control_B.b_jcol++) {
      for (proc_control_B.b_itilerow = 0; proc_control_B.b_itilerow < 6000;
           proc_control_B.b_itilerow++) {
        proc_control_B.loop_ub_tmp = proc_control_B.b_itilerow +
          proc_control_B.ibmat_b;
        proc_control_B.g[proc_control_B.loop_ub_tmp] = b_this->
          poseBuffer[proc_control_B.loop_ub_tmp + 1];
      }

      proc_control_B.ibmat_b += 6001;
    }

    proc_control_B.ibmat_b = 0;
    for (proc_control_B.b_jcol = 0; proc_control_B.b_jcol < 13;
         proc_control_B.b_jcol++) {
      proc_control_B.g[proc_control_B.ibmat_b + 6000] = b_this->
        emptyArray[proc_control_B.b_jcol];
      proc_control_B.ibmat_b += 6001;
    }

    for (proc_control_B.ibmat_b = 0; proc_control_B.ibmat_b < 78013;
         proc_control_B.ibmat_b++) {
      b_this->poseBuffer[proc_control_B.ibmat_b] =
        proc_control_B.g[proc_control_B.ibmat_b];
    }

    proc_control_B.b_index = b_this->bufferCount - 1.0;
    b_this->bufferCount = proc_control_B.b_index;
    b_this->done = false;
  } else {
    b_this->done = true;
  }

  //  Fonction qui verifie le target reached
  //  vérifier si la trajectoire est fini
  for (proc_control_B.b_jcol = 0; proc_control_B.b_jcol < 7;
       proc_control_B.b_jcol++) {
    proc_control_B.mesuredPose[proc_control_B.b_jcol] =
      mesuredPose[proc_control_B.b_jcol];
    proc_control_B.x_e[proc_control_B.b_jcol] = poses[proc_control_B.b_jcol] -
      target[proc_control_B.b_jcol];
    proc_control_B.y_d4[proc_control_B.b_jcol] = std::abs
      (proc_control_B.x_e[proc_control_B.b_jcol]);
  }

  proc_control_B.y_n = true;
  proc_control_B.b_jcol = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.b_jcol < 7)) {
    if (!(proc_control_B.y_d4[proc_control_B.b_jcol] < 0.001)) {
      proc_control_B.y_n = false;
      exitg1 = true;
    } else {
      proc_control_B.b_jcol++;
    }
  }

  b_this->done = proc_control_B.y_n;
  *isReached = false;

  //  vérifier le traget reached si la trajectoire est terminé
  if (b_this->done) {
    //  check flip
    // =================================================================
    //  Fonction qui assure la continuité entre 2 quaternions
    //  Regarder la discontinuité entre le qk et qk-1
    proc_control_B.mesuredPose[3] = mesuredPose[3];
    proc_control_B.mesuredPose[4] = mesuredPose[4];
    proc_control_B.mesuredPose[5] = mesuredPose[5];
    proc_control_B.mesuredPose[6] = mesuredPose[6];
    if (((target[3] * mesuredPose[3] + target[4] * mesuredPose[4]) + target[5] *
         mesuredPose[5]) + target[6] * mesuredPose[6] < 0.0) {
      proc_control_B.mesuredPose[3] = -mesuredPose[3];
      proc_control_B.mesuredPose[4] = -mesuredPose[4];
      proc_control_B.mesuredPose[5] = -mesuredPose[5];
      proc_control_B.mesuredPose[6] = -mesuredPose[6];
    }

    //  calculer l'erreur angulaire.
    // =================================================================
    //  Fonction qui calcule l'angle entre 2 quaternion
    proc_control_B.qRel[0] = ((target[3] * proc_control_B.mesuredPose[3] -
      -target[4] * proc_control_B.mesuredPose[4]) - -target[5] *
      proc_control_B.mesuredPose[5]) - -target[6] * proc_control_B.mesuredPose[6];
    proc_control_B.qRel[1] = (target[3] * proc_control_B.mesuredPose[4] +
      -target[4] * proc_control_B.mesuredPose[3]) + (-target[5] *
      proc_control_B.mesuredPose[6] - -target[6] * proc_control_B.mesuredPose[5]);
    proc_control_B.qRel[2] = (target[3] * proc_control_B.mesuredPose[5] +
      -target[5] * proc_control_B.mesuredPose[3]) + (-target[6] *
      proc_control_B.mesuredPose[4] - -target[4] * proc_control_B.mesuredPose[6]);
    proc_control_B.qRel[3] = (target[3] * proc_control_B.mesuredPose[6] +
      proc_control_B.mesuredPose[3] * -target[6]) + (-target[4] *
      proc_control_B.mesuredPose[5] - -target[5] * proc_control_B.mesuredPose[4]);

    //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
    proc_control_B.target_h[0] = target[0] - proc_control_B.mesuredPose[0];
    proc_control_B.target_h[1] = target[1] - proc_control_B.mesuredPose[1];
    proc_control_B.target_h[2] = target[2] - proc_control_B.mesuredPose[2];
    if ((proc_control_norm_pr3(proc_control_B.target_h) <
         b_this->linearConvergence) && (2.0 * rt_atan2d_snf
         (proc_control_norm_pr3(&proc_control_B.qRel[1]), proc_control_B.qRel[0])
         < b_this->quaternionConvergence)) {
      proc_control_B.b_index = b_this->targetReachedCount + 1.0;
      b_this->targetReachedCount = proc_control_B.b_index;
      *isReached = (b_this->targetReachedCount * 0.1 >= b_this->TargetThreshold);
    } else {
      b_this->targetReachedCount = 0.0;
    }
  }
}

void proc_control::proc_control_ppval_p(const real_T pp_breaks[4], const real_T
  pp_coefs[36], real_T x, real_T v[3])
{
  if (std::isnan(x)) {
    v[0] = x;
    v[1] = x;
    v[2] = x;
  } else {
    real_T xloc;
    int32_T high_i;
    int32_T ic0;
    int32_T low_i;
    int32_T low_ip1;
    low_i = 0;
    low_ip1 = 1;
    high_i = 4;
    while (high_i > low_ip1 + 1) {
      ic0 = ((low_i + high_i) + 1) >> 1;
      if (x >= pp_breaks[ic0 - 1]) {
        low_i = ic0 - 1;
        low_ip1 = ic0;
      } else {
        high_i = ic0;
      }
    }

    low_ip1 = low_i * 3;
    xloc = x - pp_breaks[low_i];
    v[0] = pp_coefs[low_ip1];
    v[1] = pp_coefs[low_ip1 + 1];
    v[2] = pp_coefs[low_ip1 + 2];
    for (high_i = 0; high_i < 3; high_i++) {
      ic0 = ((high_i + 1) * 9 + low_ip1) - 1;
      v[0] = xloc * v[0] + pp_coefs[ic0 + 1];
      v[1] = xloc * v[1] + pp_coefs[ic0 + 2];
      v[2] = xloc * v[2] + pp_coefs[ic0 + 3];
    }
  }
}

void proc_control::p_binary_expand_op_pr351ewpk3k4(real_T in1_data[], int32_T
  in1_size[2], real_T in2, int32_T in3)
{
  real_T in1_data_0;
  int32_T in1_size_idx_1;
  int32_T loop_ub;
  int32_T stride_0_1;
  in1_size_idx_1 = in3 == 1 ? in1_size[1] : in3;
  stride_0_1 = (in1_size[1] != 1);
  loop_ub = in3 == 1 ? in1_size[1] : in3;
  for (int32_T i{0}; i < loop_ub; i++) {
    in1_data_0 = in1_data[i * stride_0_1] / in2;
  }

  in1_size[0] = 1;
  in1_size[1] = in1_size_idx_1;
  for (int32_T i{0}; i < in1_size_idx_1; i++) {
    in1_data[0] = in1_data_0;
  }
}

void proc_control::pr_binary_expand_op_pr351ewpk3k(real_T in1_data[], int32_T
  in1_size[2], real_T in2, int32_T in3, const real_T in4_data[], const int32_T
  in4_size[2])
{
  real_T in2_data;
  int32_T in2_size_idx_1;
  int32_T loop_ub;
  int32_T stride_1_1;
  in2_size_idx_1 = in4_size[1] == 1 ? in3 : in4_size[1];
  stride_1_1 = (in4_size[1] != 1);
  loop_ub = in4_size[1] == 1 ? in3 : in4_size[1];
  for (int32_T i{0}; i < loop_ub; i++) {
    in2_data = in4_data[i * stride_1_1] * in2;
  }

  in1_size[0] = 1;
  in1_size[1] = in2_size_idx_1;
  for (int32_T i{0}; i < in2_size_idx_1; i++) {
    in1_data[0] = in2_data;
  }
}

void proc_control::pro_binary_expand_op_pr351ewpk3(real_T in1_data[], int32_T
  in1_size[2], real_T in2, int32_T in3)
{
  real_T in2_data;
  int32_T in2_size_idx_1;
  int32_T loop_ub;
  int32_T stride_1_1;
  in2_size_idx_1 = in1_size[1] == 1 ? in3 : in1_size[1];
  stride_1_1 = (in1_size[1] != 1);
  loop_ub = in1_size[1] == 1 ? in3 : in1_size[1];
  for (int32_T i{0}; i < loop_ub; i++) {
    in2_data = in1_data[i * stride_1_1] * in2;
  }

  in1_size[0] = 1;
  in1_size[1] = in2_size_idx_1;
  for (int32_T i{0}; i < in2_size_idx_1; i++) {
    in1_data[0] = in2_data;
  }
}

void proc_control::proc_control_quaternionBase_log(real_T q_a, real_T q_b,
  real_T q_c, real_T q_d, real_T *b_q_a, real_T *b_q_b, real_T *b_q_c, real_T
  *b_q_d)
{
  real_T qnorm;
  real_T vnorm;
  real_T vscale_data;
  real_T z_data;
  int32_T vscale_size[2];
  int32_T z_size[2];
  int32_T b_i;
  int32_T nx;
  int32_T trueCount;
  vnorm = std::sqrt((q_b * q_b + q_c * q_c) + q_d * q_d);
  qnorm = std::sqrt(q_a * q_a + vnorm * vnorm);
  trueCount = 0;
  if (vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      trueCount++;
    }
  }

  b_i = 0;
  if (vnorm != 0.0) {
    for (nx = 0; nx < 1; nx++) {
      b_i++;
    }
  }

  z_size[0] = 1;
  z_size[1] = b_i;
  for (nx = 0; nx < b_i; nx++) {
    z_data = q_a / qnorm;
  }

  vscale_size[0] = 1;
  vscale_size[1] = b_i;
  if (b_i - 1 >= 0) {
    vscale_data = z_data;
  }

  nx = b_i - 1;
  for (b_i = 0; b_i <= nx; b_i++) {
    vscale_data = std::acos(vscale_data);
  }

  if (z_size[1] == trueCount) {
    trueCount = z_size[1] - 1;
    vscale_size[0] = 1;
    for (nx = 0; nx <= trueCount; nx++) {
      vscale_data /= vnorm;
    }
  } else {
    p_binary_expand_op_pr351ewpk3k4(&vscale_data, vscale_size, vnorm, trueCount);
  }

  nx = 0;
  if (vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      nx++;
    }
  }

  if (nx == vscale_size[1]) {
    z_size[0] = 1;
    z_size[1] = nx;
    if (vscale_size[1] - 1 >= 0) {
      z_data = q_b * vscale_data;
    }
  } else {
    pr_binary_expand_op_pr351ewpk3k(&z_data, z_size, q_b, nx, &vscale_data,
      vscale_size);
  }

  *b_q_d = q_b;
  if (vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = z_data;
    }
  }

  *b_q_b = *b_q_d;
  if (!(vnorm != 0.0)) {
    *b_q_b = 0.0;
  }

  nx = 0;
  if (vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      nx++;
    }
  }

  if (nx == vscale_size[1]) {
    if (vscale_size[1] - 1 >= 0) {
      z_data = q_c * vscale_data;
    }
  } else {
    pr_binary_expand_op_pr351ewpk3k(&z_data, z_size, q_c, nx, &vscale_data,
      vscale_size);
  }

  *b_q_d = q_c;
  if (vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = z_data;
    }
  }

  *b_q_c = *b_q_d;
  if (!(vnorm != 0.0)) {
    *b_q_c = 0.0;
  }

  nx = 0;
  if (vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      nx++;
    }
  }

  if (nx == vscale_size[1]) {
    trueCount = vscale_size[1] - 1;
    for (nx = 0; nx <= trueCount; nx++) {
      vscale_data *= q_d;
    }
  } else {
    pro_binary_expand_op_pr351ewpk3(&vscale_data, vscale_size, q_d, nx);
  }

  *b_q_d = q_d;
  if (vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = vscale_data;
    }
  }

  if (!(vnorm != 0.0)) {
    *b_q_d = 0.0;
  }

  *b_q_a = std::log(qnorm);
}

quaternion_proc_control_T proc_control::proc_computeFirstQuatDerivative(real_T
  pn_a, real_T pn_b, real_T pn_c, real_T pn_d, real_T qn_a, real_T qn_b, real_T
  qn_c, real_T qn_d, real_T sd, real_T qinterp_a, real_T qinterp_b, real_T
  qinterp_c, real_T qinterp_d)
{
  quaternion_proc_control_T qdot;
  real_T y_a;
  real_T y_b;
  real_T y_c;
  real_T y_d;
  proc_control_quaternionBase_log(((pn_a * qn_a - -pn_b * qn_b) - -pn_c * qn_c)
    - -pn_d * qn_d, ((pn_a * qn_b + -pn_b * qn_a) + -pn_c * qn_d) - -pn_d * qn_c,
    ((pn_a * qn_c - -pn_b * qn_d) + -pn_c * qn_a) + -pn_d * qn_b, ((pn_a * qn_d
    + -pn_b * qn_c) - -pn_c * qn_b) + -pn_d * qn_a, &y_a, &y_b, &y_c, &y_d);
  qdot.a = (((qinterp_a * y_a - qinterp_b * y_b) - qinterp_c * y_c) - qinterp_d *
            y_d) * sd;
  qdot.b = (((qinterp_a * y_b + qinterp_b * y_a) + qinterp_c * y_d) - qinterp_d *
            y_c) * sd;
  qdot.c = (((qinterp_a * y_c - qinterp_b * y_d) + qinterp_c * y_a) + qinterp_d *
            y_b) * sd;
  qdot.d = (((qinterp_a * y_d + qinterp_b * y_c) - qinterp_c * y_b) + qinterp_d *
            y_a) * sd;
  return qdot;
}

void proc_control::proc__quaternion_parenReference(real_T obj_a, real_T obj_b,
  real_T obj_c, real_T obj_d, boolean_T varargin_1, real_T o_a_data[], int32_T
  o_a_size[2], real_T o_b_data[], int32_T o_b_size[2], real_T o_c_data[],
  int32_T o_c_size[2], real_T o_d_data[], int32_T o_d_size[2])
{
  int32_T b_i;
  int32_T end;
  int32_T i;
  int32_T trueCount;
  end = 0;
  trueCount = 0;
  if (varargin_1) {
    for (i = 0; i < 1; i++) {
      trueCount++;
    }
  }

  i = 0;
  if (varargin_1) {
    for (b_i = 0; b_i < 1; b_i++) {
      end++;
      i++;
    }
  }

  b_i = 0;
  if (varargin_1) {
    for (int32_T d_i{0}; d_i < 1; d_i++) {
      b_i++;
    }
  }

  o_a_size[0] = 1;
  o_a_size[1] = trueCount;
  trueCount--;
  for (int32_T d_i{0}; d_i <= trueCount; d_i++) {
    o_a_data[d_i] = obj_a;
  }

  o_b_size[0] = 1;
  o_b_size[1] = end;
  trueCount = end - 1;
  for (int32_T d_i{0}; d_i <= trueCount; d_i++) {
    o_b_data[d_i] = obj_b;
  }

  o_c_size[0] = 1;
  o_c_size[1] = i;
  trueCount = i - 1;
  for (int32_T d_i{0}; d_i <= trueCount; d_i++) {
    o_c_data[d_i] = obj_c;
  }

  o_d_size[0] = 1;
  o_d_size[1] = b_i;
  trueCount = b_i - 1;
  for (int32_T d_i{0}; d_i <= trueCount; d_i++) {
    o_d_data[d_i] = obj_d;
  }
}

void proc_control::proc_con_quaternion_parenAssign(real_T obj_a, real_T obj_b,
  real_T obj_c, real_T obj_d, const real_T rhs_a_data[], const int32_T
  rhs_a_size[2], const real_T rhs_b_data[], const int32_T rhs_b_size[2], const
  real_T rhs_c_data[], const int32_T rhs_c_size[2], const real_T rhs_d_data[],
  const int32_T rhs_d_size[2], real_T *o_a, real_T *o_b, real_T *o_c, real_T
  *o_d)
{
  *o_a = obj_a;
  if (rhs_a_size[1] - 1 >= 0) {
    *o_a = rhs_a_data[0];
  }

  *o_b = obj_b;
  if (rhs_b_size[1] - 1 >= 0) {
    *o_b = rhs_b_data[0];
  }

  *o_c = obj_c;
  if (rhs_c_size[1] - 1 >= 0) {
    *o_c = rhs_c_data[0];
  }

  *o_d = obj_d;
  if (rhs_d_size[1] - 1 >= 0) {
    *o_d = rhs_d_data[0];
  }
}

void proc_control::proc_con_quaternionBase_slerp_p(real_T q1_a, real_T q1_b,
  real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T q2_c, real_T q2_d,
  real_T t, real_T *qo_a, real_T *qo_b, real_T *qo_c, real_T *qo_d)
{
  real_T assign_temp_a_data;
  real_T assign_temp_b_data;
  real_T assign_temp_c_data;
  real_T assign_temp_d_data;
  real_T b_q_c;
  real_T dp;
  real_T n;
  real_T oa;
  real_T oa_tmp;
  real_T ob;
  real_T ob_tmp;
  real_T oc;
  real_T od;
  real_T od_tmp;
  real_T theta0;
  int32_T assign_temp_a_size[2];
  int32_T assign_temp_b_size[2];
  int32_T assign_temp_c_size[2];
  int32_T assign_temp_d_size[2];
  n = std::sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) + q1_d * q1_d);
  od_tmp = q1_a / n;
  dp = q1_b / n;
  b_q_c = q1_c / n;
  theta0 = q1_d / n;
  oa = ((od_tmp - dp * 0.0) - b_q_c * 0.0) - theta0 * 0.0;
  ob = ((od_tmp * 0.0 + dp) + b_q_c * 0.0) - theta0 * 0.0;
  oc = ((od_tmp * 0.0 - dp * 0.0) + b_q_c) + theta0 * 0.0;
  od = ((od_tmp * 0.0 + dp * 0.0) - b_q_c * 0.0) + theta0;
  n = std::sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) + q2_d * q2_d);
  od_tmp = q2_a / n;
  dp = q2_b / n;
  b_q_c = q2_c / n;
  theta0 = q2_d / n;
  oa_tmp = ((od_tmp - dp * 0.0) - b_q_c * 0.0) - theta0 * 0.0;
  ob_tmp = ((od_tmp * 0.0 + dp) + b_q_c * 0.0) - theta0 * 0.0;
  n = ((od_tmp * 0.0 - dp * 0.0) + b_q_c) + theta0 * 0.0;
  od_tmp = ((od_tmp * 0.0 + dp * 0.0) - b_q_c * 0.0) + theta0;
  dp = ((oa * oa_tmp + ob * ob_tmp) + oc * n) + od * od_tmp;
  if (dp < 0.0) {
    oa_tmp = -oa_tmp;
    ob_tmp = -ob_tmp;
    n = -n;
    od_tmp = -od_tmp;
    dp = -dp;
  }

  if (dp > 1.0) {
    dp = 1.0;
  }

  theta0 = std::acos(dp);
  dp = 1.0 / std::sin(theta0);
  b_q_c = std::sin((1.0 - t) * theta0);
  theta0 = std::sin(t * theta0);
  *qo_a = (b_q_c * oa + theta0 * oa_tmp) * dp;
  *qo_b = (b_q_c * ob + theta0 * ob_tmp) * dp;
  *qo_c = (b_q_c * oc + theta0 * n) * dp;
  *qo_d = (b_q_c * od + theta0 * od_tmp) * dp;
  if (std::isinf(dp)) {
    proc__quaternion_parenReference(q1_a, q1_b, q1_c, q1_d, true,
      &assign_temp_a_data, assign_temp_a_size, &assign_temp_b_data,
      assign_temp_b_size, &assign_temp_c_data, assign_temp_c_size,
      &assign_temp_d_data, assign_temp_d_size);
    proc_con_quaternion_parenAssign(*qo_a, *qo_b, *qo_c, *qo_d,
      &assign_temp_a_data, assign_temp_a_size, &assign_temp_b_data,
      assign_temp_b_size, &assign_temp_c_data, assign_temp_c_size,
      &assign_temp_d_data, assign_temp_d_size, qo_a, qo_b, qo_c, qo_d);
  }

  n = std::sqrt(((*qo_a * *qo_a + *qo_b * *qo_b) + *qo_c * *qo_c) + *qo_d *
                *qo_d);
  *qo_a /= n;
  *qo_b /= n;
  *qo_c /= n;
  *qo_d /= n;
}

void proc_control::proc_contr_quaternionBase_slerp(real_T q1_a, real_T q1_b,
  real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T q2_c, real_T q2_d,
  real_T *qo_a, real_T *qo_b, real_T *qo_c, real_T *qo_d)
{
  real_T assign_temp_a_data;
  real_T assign_temp_b_data;
  real_T assign_temp_c_data;
  real_T assign_temp_d_data;
  real_T b_q_c;
  real_T dp;
  real_T n;
  real_T oa;
  real_T oa_tmp;
  real_T ob;
  real_T ob_tmp;
  real_T oc;
  real_T od;
  real_T od_tmp;
  real_T theta0;
  int32_T assign_temp_a_size[2];
  int32_T assign_temp_b_size[2];
  int32_T assign_temp_c_size[2];
  int32_T assign_temp_d_size[2];
  n = std::sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) + q1_d * q1_d);
  od_tmp = q1_a / n;
  dp = q1_b / n;
  b_q_c = q1_c / n;
  theta0 = q1_d / n;
  oa = ((od_tmp - dp * 0.0) - b_q_c * 0.0) - theta0 * 0.0;
  ob = ((od_tmp * 0.0 + dp) + b_q_c * 0.0) - theta0 * 0.0;
  oc = ((od_tmp * 0.0 - dp * 0.0) + b_q_c) + theta0 * 0.0;
  od = ((od_tmp * 0.0 + dp * 0.0) - b_q_c * 0.0) + theta0;
  n = std::sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) + q2_d * q2_d);
  od_tmp = q2_a / n;
  dp = q2_b / n;
  b_q_c = q2_c / n;
  theta0 = q2_d / n;
  oa_tmp = ((od_tmp - dp * 0.0) - b_q_c * 0.0) - theta0 * 0.0;
  ob_tmp = ((od_tmp * 0.0 + dp) + b_q_c * 0.0) - theta0 * 0.0;
  n = ((od_tmp * 0.0 - dp * 0.0) + b_q_c) + theta0 * 0.0;
  od_tmp = ((od_tmp * 0.0 + dp * 0.0) - b_q_c * 0.0) + theta0;
  dp = ((oa * oa_tmp + ob * ob_tmp) + oc * n) + od * od_tmp;
  if (dp < 0.0) {
    oa_tmp = -oa_tmp;
    ob_tmp = -ob_tmp;
    n = -n;
    od_tmp = -od_tmp;
    dp = -dp;
  }

  if (dp > 1.0) {
    dp = 1.0;
  }

  theta0 = std::acos(dp);
  b_q_c = std::sin(theta0);
  dp = 1.0 / b_q_c;
  theta0 = std::sin(0.0 * theta0);
  *qo_a = (theta0 * oa + b_q_c * oa_tmp) * dp;
  *qo_b = (theta0 * ob + b_q_c * ob_tmp) * dp;
  *qo_c = (theta0 * oc + b_q_c * n) * dp;
  *qo_d = (theta0 * od + b_q_c * od_tmp) * dp;
  if (std::isinf(dp)) {
    proc__quaternion_parenReference(q1_a, q1_b, q1_c, q1_d, true,
      &assign_temp_a_data, assign_temp_a_size, &assign_temp_b_data,
      assign_temp_b_size, &assign_temp_c_data, assign_temp_c_size,
      &assign_temp_d_data, assign_temp_d_size);
    proc_con_quaternion_parenAssign(*qo_a, *qo_b, *qo_c, *qo_d,
      &assign_temp_a_data, assign_temp_a_size, &assign_temp_b_data,
      assign_temp_b_size, &assign_temp_c_data, assign_temp_c_size,
      &assign_temp_d_data, assign_temp_d_size, qo_a, qo_b, qo_c, qo_d);
  }

  n = std::sqrt(((*qo_a * *qo_a + *qo_b * *qo_b) + *qo_c * *qo_c) + *qo_d *
                *qo_d);
  *qo_a /= n;
  *qo_b /= n;
  *qo_c /= n;
  *qo_d /= n;
}

void proc_control::proc_contro_binary_expand_op_pr(real_T in1[3], const real_T
  in3_data[], const int32_T *in3_size, const real_T in4_data[], const int32_T
  *in4_size)
{
  real_T in3_data_idx_0;
  int32_T in3_size_idx_0;
  int32_T loop_ub;

  // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
  //   ActionPort: '<S290>/Action Port'

  // SwitchCase: '<S9>/Switch Case' incorporates:
  //   MATLABSystem: '<S290>/MATLAB System1'

  in3_size_idx_0 = *in4_size == 1 ? *in3_size : *in4_size;
  loop_ub = *in4_size == 1 ? *in3_size : *in4_size;
  for (int32_T i{0}; i < loop_ub; i++) {
    in3_data_idx_0 = in3_data[0] * 2.0 * in4_data[0];
  }

  for (int32_T i{0}; i < in3_size_idx_0; i++) {
    in1[2] = in3_data_idx_0;
  }

  // End of SwitchCase: '<S9>/Switch Case'
  // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
}

void proc_control::MultiTrajectoryManager_resetImp
  (MultiTrajectoryManager_proc_c_T *b_this)
{
  real_T a;

  //  Perform one-time calculations, such as computing constants
  b_this->dummy = 999.0;

  //  Chiffre NULL
  a = b_this->dummy;
  for (int32_T i{0}; i < 13; i++) {
    b_this->emptyArray[i] = a;
  }

  //  Vecteur pose NULL
  b_this->targetReachedCount = 0.0;
  for (int32_T i{0}; i < 7; i++) {
    b_this->initialPose[i] = 0.0;
  }

  //  Buffer trajectoire
  a = b_this->dummy;
  for (int32_T i{0}; i < 78000; i++) {
    b_this->poseBuffer[i] = a;
  }

  b_this->bufferCount = 0.0;
  b_this->done = false;
  b_this->init = false;
}

void proc_control::proc_binary_expand_op_pr351ewpk(real_T in1[3], const int32_T
  in2_data[], const int32_T in2_size[2], const real_T in3_data[], const int32_T *
  in3_size, const real_T in4_data[], const int32_T *in4_size)
{
  real_T in3_data_idx_0;
  int32_T in2_data_idx_0;
  int32_T in3_size_idx_0;
  int32_T loop_ub;
  loop_ub = in2_size[1];
  for (int32_T i{0}; i < loop_ub; i++) {
    in2_data_idx_0 = in2_data[0] - 1;
  }

  in3_size_idx_0 = *in4_size == 1 ? *in3_size : *in4_size;
  loop_ub = *in4_size == 1 ? *in3_size : *in4_size;
  for (int32_T i{0}; i < loop_ub; i++) {
    in3_data_idx_0 = in3_data[0] * 2.0 * in4_data[0];
  }

  for (int32_T i{0}; i < in3_size_idx_0; i++) {
    in1[in2_data_idx_0 + 2] = in3_data_idx_0;
  }
}

void proc_control::proc_control_quat2eul(real_T q[4], real_T eul[3])
{
  real_T aSinInput;
  real_T b_x_data;
  real_T c_idx_0;
  real_T e_data;
  real_T eul_tmp;
  real_T eul_tmp_0;
  real_T eul_tmp_1;
  real_T q_0;
  int32_T k_size[2];
  int32_T h_size_idx_1;
  int32_T i_size_idx_1;
  int32_T k_data;
  int32_T nx;
  boolean_T mask1;
  boolean_T mask2;
  aSinInput = 1.0 / std::sqrt(((q[0] * q[0] + q[1] * q[1]) + q[2] * q[2]) + q[3]
    * q[3]);
  q[0] *= aSinInput;
  q[1] *= aSinInput;
  q[2] *= aSinInput;
  q_0 = q[3] * aSinInput;
  aSinInput = (q[1] * q_0 + q[0] * q[2]) * 2.0;
  mask1 = (aSinInput >= 0.99999999999999778);
  mask2 = (aSinInput <= -0.99999999999999778);
  if (aSinInput >= 0.99999999999999778) {
    aSinInput = 1.0;
  }

  c_idx_0 = aSinInput;
  if (mask2) {
    c_idx_0 = -1.0;
  }

  aSinInput = q[0] * q[0];
  eul_tmp = q[1] * q[1];
  eul_tmp_0 = q[2] * q[2];
  eul_tmp_1 = q_0 * q_0;
  eul[0] = rt_atan2d_snf((q[2] * q_0 - q[0] * q[1]) * -2.0, ((aSinInput -
    eul_tmp) - eul_tmp_0) + eul_tmp_1);
  eul[1] = std::asin(c_idx_0);
  eul[2] = rt_atan2d_snf((q[1] * q[2] - q[0] * q_0) * -2.0, ((aSinInput +
    eul_tmp) - eul_tmp_0) - eul_tmp_1);
  nx = 0;
  if (mask1 || mask2) {
    for (int32_T d_i{0}; d_i < 1; d_i++) {
      nx++;
    }
  }

  if (nx - 1 >= 0) {
    eul[0] = 0.0;
  }

  nx = 0;
  if (mask1 || mask2) {
    for (int32_T d_i{0}; d_i < 1; d_i++) {
      nx++;
    }
  }

  h_size_idx_1 = nx;
  if (nx - 1 >= 0) {
    b_x_data = c_idx_0;
  }

  nx--;
  for (int32_T d_i{0}; d_i <= nx; d_i++) {
    q_0 = b_x_data;
    if (!std::isnan(b_x_data)) {
      if (b_x_data < 0.0) {
        q_0 = -1.0;
      } else {
        q_0 = (b_x_data > 0.0);
      }
    }

    b_x_data = q_0;
  }

  nx = 0;
  if (mask1 || mask2) {
    for (int32_T d_i{0}; d_i < 1; d_i++) {
      nx++;
    }
  }

  i_size_idx_1 = nx;
  if (nx - 1 >= 0) {
    e_data = rt_atan2d_snf(q[1], q[0]);
  }

  nx = 0;
  if (mask1 || mask2) {
    for (int32_T d_i{0}; d_i < 1; d_i++) {
      nx++;
    }
  }

  k_size[0] = 1;
  k_size[1] = nx;
  if (mask1 || mask2) {
    for (int32_T d_i{0}; d_i < 1; d_i++) {
      k_data = 1;
    }
  }

  if (h_size_idx_1 == i_size_idx_1) {
    if (h_size_idx_1 - 1 >= 0) {
      eul[2] = b_x_data * 2.0 * e_data;
    }
  } else {
    proc_binary_expand_op_pr351ewpk(eul, &k_data, k_size, &b_x_data,
      &h_size_idx_1, &e_data, &i_size_idx_1);
  }
}

void proc_control::MultiTrajectoryManager_stepImpl
  (MultiTrajectoryManager_proc_c_T *b_this, boolean_T isNew, const
   SL_Bus_proc_control_geometry_msgs_Transform trajMsg_Transforms[2000],
   uint32_T trajMsg_Transforms_SL_Info_Rece, const
   SL_Bus_proc_control_geometry_msgs_Twist trajMsg_Velocities[2000], real_T
   reset, const real_T mesuredPose[13], real_T mpcParams_targetReached_linearT,
   real_T mpcParams_targetReached_angular, real_T
   mpcParams_targetReached_timeInT, real_T currentPose[130], boolean_T
   *isReached, boolean_T *isTrajDone, real_T initWpt[7])
{
  real_T tamp[13];
  real_T target[13];
  real_T mesuredPose_0[4];
  real_T qRel[4];
  real_T target_0[3];
  real_T b_index;
  real_T c_idx_0;
  real_T c_idx_1;
  real_T c_idx_2;
  int32_T b_index_0;
  int32_T b_k;
  int32_T b_this_0;
  int32_T i;
  int32_T k;
  boolean_T x[13];
  boolean_T exitg1;
  boolean_T isempty;
  boolean_T y;

  //         %% ================================================================ 
  //  Main execute a chaque iteration.
  if ((reset != 0.0) || (!b_this->init)) {
    MultiTrajectoryManager_resetImp(b_this);
    std::memcpy(&tamp[0], &mesuredPose[0], 13U * sizeof(real_T));

    // =================================================================
    //  Fonction qui reset la trajectoire
    //  remove roll and pitch from initial condition
    //  Retransformer en quaternion
    for (i = 0; i < 4; i++) {
      mesuredPose_0[i] = mesuredPose[i + 3];
    }

    real_T c_tmp;
    real_T c_tmp_idx_1;
    real_T tamp_tmp;
    real_T tamp_tmp_0;
    proc_control_quat2eul(mesuredPose_0, target_0);
    c_tmp = target_0[0] * 0.0 / 2.0;
    c_idx_0 = c_tmp;
    b_index = c_tmp;
    c_tmp = target_0[1] * 0.0 / 2.0;
    c_idx_1 = c_tmp;
    c_tmp_idx_1 = c_tmp;
    c_tmp = target_0[2] / 2.0;
    c_idx_0 = std::cos(c_idx_0);
    b_index = std::sin(b_index);
    c_idx_1 = std::cos(c_idx_1);
    c_tmp_idx_1 = std::sin(c_tmp_idx_1);
    c_idx_2 = std::cos(c_tmp);
    c_tmp = std::sin(c_tmp);
    tamp_tmp = c_idx_0 * c_idx_1;
    tamp_tmp_0 = b_index * c_tmp_idx_1;
    tamp[3] = tamp_tmp * c_idx_2 - tamp_tmp_0 * c_tmp;
    c_idx_0 *= c_tmp_idx_1;
    tamp[4] = b_index * c_idx_1 * c_idx_2 + c_idx_0 * c_tmp;
    tamp[5] = -b_index * c_idx_1 * c_tmp + c_idx_0 * c_idx_2;
    tamp[6] = tamp_tmp * c_tmp + tamp_tmp_0 * c_idx_2;

    //  Mettre les vitesse à 0;
    for (i = 0; i < 6; i++) {
      tamp[i + 7] = 0.0;
    }

    //  definir les conditions initiaux
    i = 0;
    for (b_k = 0; b_k < 13; b_k++) {
      b_this->poseBuffer[i] = tamp[b_k];
      i += 6000;
    }

    // InitCond;
    b_this->bufferCount = 1.0;
    for (i = 0; i < 7; i++) {
      b_this->initialPose[i] = tamp[i];
    }

    b_this->init = true;
    isNew = false;
  }

  //  Add new pose if new arrive
  //         %% ================================================================ 
  //  Fonction qui traites les nouveau poses.
  //  Si il y a des noiveau points
  if (isNew) {
    //  nombre de points recu.
    //  si il y a asser de place dans le buffer.
    if (static_cast<real_T>(trajMsg_Transforms_SL_Info_Rece) +
        b_this->bufferCount < 6000.0) {
      std::memset(&tamp[0], 0, 13U * sizeof(real_T));

      //  Remplire le tampon
      b_k = static_cast<int32_T>(trajMsg_Transforms_SL_Info_Rece) - 1;
      for (k = 0; k <= b_k; k++) {
        tamp[0] = trajMsg_Transforms[k].Translation.X;
        tamp[1] = trajMsg_Transforms[k].Translation.Y;
        tamp[2] = trajMsg_Transforms[k].Translation.Z;
        tamp[3] = trajMsg_Transforms[k].Rotation.W;
        tamp[4] = trajMsg_Transforms[k].Rotation.X;
        tamp[5] = trajMsg_Transforms[k].Rotation.Y;
        tamp[6] = trajMsg_Transforms[k].Rotation.Z;
        tamp[7] = trajMsg_Velocities[k].Linear.X;
        tamp[8] = trajMsg_Velocities[k].Linear.Y;
        tamp[9] = trajMsg_Velocities[k].Linear.Z;
        tamp[10] = trajMsg_Velocities[k].Angular.X;
        tamp[11] = trajMsg_Velocities[k].Angular.Y;
        tamp[12] = trajMsg_Velocities[k].Angular.Z;
        b_index = b_this->bufferCount + 1.0;
        b_this->bufferCount = b_index;
        b_this_0 = static_cast<int32_T>(b_this->bufferCount);
        for (i = 0; i < 13; i++) {
          b_this->poseBuffer[(b_this_0 + 6000 * i) - 1] = tamp[i];
        }
      }

      //  Definir le pose initial pour la prochaine trajectoire
      for (i = 0; i < 7; i++) {
        b_this->initialPose[i] = tamp[i];
      }
    } else {
      printf("WARNING : proc control : trajectory buffer overflow.");
      fflush(stdout);
    }
  }

  //         %% ================================================================ 
  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  b_index = 2.0;
  isempty = false;

  //  Vérifier s'il reste au moins mpc.p points dans les buffers
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k < 9)) {
    boolean_T exitg2;
    b_index = static_cast<real_T>(k) + 2.0;
    for (i = 0; i < 13; i++) {
      x[i] = (b_this->poseBuffer[(6000 * i + k) + 1] == b_this->emptyArray[i]);
    }

    y = true;
    b_k = 0;
    exitg2 = false;
    while ((!exitg2) && (b_k < 13)) {
      if (!x[b_k]) {
        y = false;
        exitg2 = true;
      } else {
        b_k++;
      }
    }

    if (y) {
      isempty = true;
      exitg1 = true;
    } else {
      k++;
    }
  }

  std::memset(&currentPose[0], 0, 130U * sizeof(real_T));
  b_this_0 = static_cast<int32_T>(b_index);
  i = 0;
  b_k = 0;
  for (k = 0; k < 13; k++) {
    for (b_index_0 = 0; b_index_0 < b_this_0; b_index_0++) {
      currentPose[b_index_0 + i] = b_this->poseBuffer[b_index_0 + b_k];
    }

    i += 10;
    b_k += 6000;
  }

  //  S'il ya moins de mpc.p points, padder avec le dernier points
  if (isempty) {
    k = 10 - b_this_0;
    for (b_k = 0; b_k <= k; b_k++) {
      b_index_0 = b_this_0 + b_k;
      for (i = 0; i < 13; i++) {
        tamp[i] = currentPose[(10 * i + b_this_0) - 2];
      }

      for (i = 0; i < 13; i++) {
        currentPose[(b_index_0 + 10 * i) - 1] = tamp[i];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  i = 0;
  for (b_k = 0; b_k < 13; b_k++) {
    x[b_k] = !(b_this->poseBuffer[i + 1] == b_this->emptyArray[b_k]);
    i += 6000;
  }

  y = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 13)) {
    if (!x[b_k]) {
      y = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (y) {
    // this.prediction+1
    i = 0;
    for (b_k = 0; b_k < 13; b_k++) {
      for (k = 0; k < 5999; k++) {
        b_this_0 = k + i;
        proc_control_B.g_k[b_this_0] = b_this->poseBuffer[b_this_0 + 1];
      }

      i += 6000;
    }

    i = 0;
    for (b_k = 0; b_k < 13; b_k++) {
      proc_control_B.g_k[i + 5999] = b_this->emptyArray[b_k];
      i += 6000;
    }

    for (i = 0; i < 78000; i++) {
      b_this->poseBuffer[i] = proc_control_B.g_k[i];
    }

    b_index = b_this->bufferCount - 1.0;
    b_this->bufferCount = b_index;
    b_this->done = false;
  } else {
    b_this->done = true;
  }

  std::memcpy(&tamp[0], &mesuredPose[0], 13U * sizeof(real_T));

  //         %% ================================================================ 
  //  Fonction qui verifie le target reached
  *isReached = false;

  //  vérifier le traget reached si la trajectoire est terminé
  if (b_this->done) {
    //  prendre le target
    i = 0;
    for (b_k = 0; b_k < 13; b_k++) {
      target[b_k] = b_this->poseBuffer[i];
      i += 6000;
    }

    //  check flip (exemple ne pas comparer 0deg avec 360deg)
    // =================================================================
    //  Fonction qui assure la continuité entre 2 quaternions
    //  Regarder la discontinuité entre le qk et qk-1
    b_index = mesuredPose[3];
    c_idx_1 = mesuredPose[4];
    c_idx_2 = mesuredPose[5];
    c_idx_0 = mesuredPose[6];
    if (((target[3] * mesuredPose[3] + target[4] * mesuredPose[4]) + target[5] *
         mesuredPose[5]) + target[6] * mesuredPose[6] < 0.0) {
      b_index = -mesuredPose[3];
      c_idx_1 = -mesuredPose[4];
      c_idx_2 = -mesuredPose[5];
      c_idx_0 = -mesuredPose[6];
    }

    //  calculer l'erreur angulaire.
    // =================================================================
    //  Fonction qui calcule l'angle entre 2 quaternion
    qRel[0] = ((target[3] * b_index - -target[4] * c_idx_1) - -target[5] *
               c_idx_2) - -target[6] * c_idx_0;
    qRel[1] = (target[3] * c_idx_1 + b_index * -target[4]) + (-target[5] *
      c_idx_0 - -target[6] * c_idx_2);
    qRel[2] = (target[3] * c_idx_2 + b_index * -target[5]) + (-target[6] *
      c_idx_1 - -target[4] * c_idx_0);
    qRel[3] = (target[3] * c_idx_0 + b_index * -target[6]) + (-target[4] *
      c_idx_2 - -target[5] * c_idx_1);
    b_index = std::abs(2.0 * rt_atan2d_snf(proc_control_norm_pr3(&qRel[1]),
      qRel[0]));

    //  Ramener l'erreur de 0 à pi
    if (b_index > 6.2831853071795862) {
      b_index = 6.2831853071795862 - b_index;
    }

    //  calculer l'erreur lineaire
    //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
    target_0[0] = target[0] - tamp[0];
    target_0[1] = target[1] - tamp[1];
    target_0[2] = target[2] - tamp[2];
    if ((proc_control_norm_pr3(target_0) < mpcParams_targetReached_linearT) &&
        (b_index < mpcParams_targetReached_angular)) {
      //  incrementer le nombre de sample en target reached
      b_index = b_this->targetReachedCount + 1.0;
      b_this->targetReachedCount = b_index;

      //  si le sub est dans la zone de convergence depuis le temps demander
      *isReached = (b_this->targetReachedCount * 0.1 >=
                    mpcParams_targetReached_timeInT);
    } else {
      //  Remettre le compteur a 0 si le sub n'est pas dans la zone
      b_this->targetReachedCount = 0.0;
    }
  } else {
    b_this->targetReachedCount = 0.0;
  }

  *isTrajDone = b_this->done;
  for (i = 0; i < 7; i++) {
    initWpt[i] = b_this->initialPose[i];
  }
}

// Function for MATLAB Function: '<S277>/Predict'
void proc_control::proc_control_xgerc_XyRtLi2r(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[13], real_T A[338], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA_e = ia0 - 1;
    proc_control_B.jy_c = 0;
    proc_control_B.j_m = 0;
    while (proc_control_B.j_m <= n - 1) {
      if (y[proc_control_B.jy_c] != 0.0) {
        proc_control_B.temp_e = y[proc_control_B.jy_c] * alpha1;
        proc_control_B.ix_ap = ix0;
        proc_control_B.ijA_f = proc_control_B.jA_e;
        proc_control_B.b_ck = m + proc_control_B.jA_e;
        while (proc_control_B.ijA_f + 1 <= proc_control_B.b_ck) {
          A[proc_control_B.ijA_f] += A[proc_control_B.ix_ap - 1] *
            proc_control_B.temp_e;
          proc_control_B.ix_ap++;
          proc_control_B.ijA_f++;
        }
      }

      proc_control_B.jy_c++;
      proc_control_B.jA_e += 26;
      proc_control_B.j_m++;
    }
  }
}

// Function for MATLAB Function: '<S277>/Predict'
void proc_control::proc_control_qrFactor_O58Jhapw(const real_T A[169], real_T S
  [169], const real_T Ns[169])
{
  for (proc_control_B.j_i5 = 0; proc_control_B.j_i5 < 13; proc_control_B.j_i5++)
  {
    proc_control_B.coffset_l = proc_control_B.j_i5 * 13;
    for (proc_control_B.ii_e = 0; proc_control_B.ii_e < 13; proc_control_B.ii_e
         ++) {
      proc_control_B.aoffset_o = proc_control_B.ii_e * 13;
      proc_control_B.s_o = 0.0;
      for (proc_control_B.knt_l = 0; proc_control_B.knt_l < 13;
           proc_control_B.knt_l++) {
        proc_control_B.s_o += A[proc_control_B.knt_l * 13 + proc_control_B.j_i5]
          * S[proc_control_B.aoffset_o + proc_control_B.knt_l];
      }

      proc_control_B.y_cs[proc_control_B.coffset_l + proc_control_B.ii_e] =
        proc_control_B.s_o;
      proc_control_B.knt_l = 26 * proc_control_B.j_i5 + proc_control_B.ii_e;
      proc_control_B.b_A_a[proc_control_B.knt_l] = proc_control_B.y_cs[13 *
        proc_control_B.j_i5 + proc_control_B.ii_e];
      proc_control_B.b_A_a[proc_control_B.knt_l + 13] = Ns[13 *
        proc_control_B.ii_e + proc_control_B.j_i5];
    }

    proc_control_B.work_f[proc_control_B.j_i5] = 0.0;
  }

  for (proc_control_B.j_i5 = 0; proc_control_B.j_i5 < 13; proc_control_B.j_i5++)
  {
    proc_control_B.ii_e = proc_control_B.j_i5 * 26 + proc_control_B.j_i5;
    proc_control_B.atmp_b = proc_control_B.b_A_a[proc_control_B.ii_e];
    proc_control_B.tau[proc_control_B.j_i5] = 0.0;
    proc_control_B.s_o = xnrm2_UCgE6veV(25 - proc_control_B.j_i5,
      proc_control_B.b_A_a, proc_control_B.ii_e + 2);
    if (proc_control_B.s_o != 0.0) {
      proc_control_B.s_o = proc_control_rt_hypotd_snf
        (proc_control_B.b_A_a[proc_control_B.ii_e], proc_control_B.s_o);
      if (proc_control_B.b_A_a[proc_control_B.ii_e] >= 0.0) {
        proc_control_B.s_o = -proc_control_B.s_o;
      }

      if (std::abs(proc_control_B.s_o) < 1.0020841800044864E-292) {
        proc_control_B.knt_l = 0;
        proc_control_B.coffset_l = (proc_control_B.ii_e - proc_control_B.j_i5) +
          26;
        do {
          proc_control_B.knt_l++;
          proc_control_B.aoffset_o = proc_control_B.ii_e + 1;
          while (proc_control_B.aoffset_o + 1 <= proc_control_B.coffset_l) {
            proc_control_B.b_A_a[proc_control_B.aoffset_o] *=
              9.9792015476736E+291;
            proc_control_B.aoffset_o++;
          }

          proc_control_B.s_o *= 9.9792015476736E+291;
          proc_control_B.atmp_b *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s_o) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_l < 20));

        proc_control_B.s_o = proc_control_rt_hypotd_snf(proc_control_B.atmp_b,
          xnrm2_UCgE6veV(25 - proc_control_B.j_i5, proc_control_B.b_A_a,
                         proc_control_B.ii_e + 2));
        if (proc_control_B.atmp_b >= 0.0) {
          proc_control_B.s_o = -proc_control_B.s_o;
        }

        proc_control_B.tau[proc_control_B.j_i5] = (proc_control_B.s_o -
          proc_control_B.atmp_b) / proc_control_B.s_o;
        proc_control_B.atmp_b = 1.0 / (proc_control_B.atmp_b -
          proc_control_B.s_o);
        proc_control_B.aoffset_o = proc_control_B.ii_e + 1;
        while (proc_control_B.aoffset_o + 1 <= proc_control_B.coffset_l) {
          proc_control_B.b_A_a[proc_control_B.aoffset_o] *=
            proc_control_B.atmp_b;
          proc_control_B.aoffset_o++;
        }

        proc_control_B.coffset_l = 0;
        while (proc_control_B.coffset_l <= proc_control_B.knt_l - 1) {
          proc_control_B.s_o *= 1.0020841800044864E-292;
          proc_control_B.coffset_l++;
        }

        proc_control_B.atmp_b = proc_control_B.s_o;
      } else {
        proc_control_B.tau[proc_control_B.j_i5] = (proc_control_B.s_o -
          proc_control_B.b_A_a[proc_control_B.ii_e]) / proc_control_B.s_o;
        proc_control_B.atmp_b = 1.0 / (proc_control_B.b_A_a[proc_control_B.ii_e]
          - proc_control_B.s_o);
        proc_control_B.knt_l = (proc_control_B.ii_e - proc_control_B.j_i5) + 26;
        proc_control_B.coffset_l = proc_control_B.ii_e + 1;
        while (proc_control_B.coffset_l + 1 <= proc_control_B.knt_l) {
          proc_control_B.b_A_a[proc_control_B.coffset_l] *=
            proc_control_B.atmp_b;
          proc_control_B.coffset_l++;
        }

        proc_control_B.atmp_b = proc_control_B.s_o;
      }
    }

    proc_control_B.b_A_a[proc_control_B.ii_e] = proc_control_B.atmp_b;
    if (proc_control_B.j_i5 + 1 < 13) {
      proc_control_B.s_o = proc_control_B.b_A_a[proc_control_B.ii_e];
      proc_control_B.b_A_a[proc_control_B.ii_e] = 1.0;
      if (proc_control_B.tau[proc_control_B.j_i5] != 0.0) {
        boolean_T exitg2;
        proc_control_B.knt_l = 26 - proc_control_B.j_i5;
        proc_control_B.coffset_l = (proc_control_B.ii_e - proc_control_B.j_i5) +
          25;
        while ((proc_control_B.knt_l > 0) &&
               (proc_control_B.b_A_a[proc_control_B.coffset_l] == 0.0)) {
          proc_control_B.knt_l--;
          proc_control_B.coffset_l--;
        }

        proc_control_B.coffset_l = 12 - proc_control_B.j_i5;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.coffset_l > 0)) {
          int32_T exitg1;
          proc_control_B.aoffset_o = ((proc_control_B.coffset_l - 1) * 26 +
            proc_control_B.ii_e) + 26;
          proc_control_B.ia_n = proc_control_B.aoffset_o;
          do {
            exitg1 = 0;
            if (proc_control_B.ia_n + 1 <= proc_control_B.aoffset_o +
                proc_control_B.knt_l) {
              if (proc_control_B.b_A_a[proc_control_B.ia_n] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.ia_n++;
              }
            } else {
              proc_control_B.coffset_l--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt_l = 0;
        proc_control_B.coffset_l = 0;
      }

      if (proc_control_B.knt_l > 0) {
        xgemv_5ht9hnKF(proc_control_B.knt_l, proc_control_B.coffset_l,
                       proc_control_B.b_A_a, proc_control_B.ii_e + 27,
                       proc_control_B.b_A_a, proc_control_B.ii_e + 1,
                       proc_control_B.work_f);
        proc_control_xgerc_XyRtLi2r(proc_control_B.knt_l,
          proc_control_B.coffset_l, -proc_control_B.tau[proc_control_B.j_i5],
          proc_control_B.ii_e + 1, proc_control_B.work_f, proc_control_B.b_A_a,
          proc_control_B.ii_e + 27);
      }

      proc_control_B.b_A_a[proc_control_B.ii_e] = proc_control_B.s_o;
    }
  }

  for (proc_control_B.j_i5 = 0; proc_control_B.j_i5 < 13; proc_control_B.j_i5++)
  {
    proc_control_B.ii_e = 0;
    while (proc_control_B.ii_e <= proc_control_B.j_i5) {
      proc_control_B.y_cs[proc_control_B.ii_e + 13 * proc_control_B.j_i5] =
        proc_control_B.b_A_a[26 * proc_control_B.j_i5 + proc_control_B.ii_e];
      proc_control_B.ii_e++;
    }

    proc_control_B.ii_e = proc_control_B.j_i5 + 1;
    while (proc_control_B.ii_e + 1 < 14) {
      proc_control_B.y_cs[proc_control_B.ii_e + 13 * proc_control_B.j_i5] = 0.0;
      proc_control_B.ii_e++;
    }
  }

  proc_control_B.knt_l = 0;
  for (proc_control_B.j_i5 = 0; proc_control_B.j_i5 < 13; proc_control_B.j_i5++)
  {
    proc_control_B.coffset_l = 0;
    for (proc_control_B.ii_e = 0; proc_control_B.ii_e < 13; proc_control_B.ii_e
         ++) {
      S[proc_control_B.ii_e + proc_control_B.knt_l] =
        proc_control_B.y_cs[proc_control_B.coffset_l + proc_control_B.j_i5];
      proc_control_B.coffset_l += 13;
    }

    proc_control_B.knt_l += 13;
  }
}

// Function for MATLAB Function: '<S275>/Correct'
void proc_control::proc_control_xgerc_ay1ZSOWu(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[13], real_T A[182], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA_ei = ia0 - 1;
    proc_control_B.jy_lb = 0;
    proc_control_B.j_nt = 0;
    while (proc_control_B.j_nt <= n - 1) {
      if (y[proc_control_B.jy_lb] != 0.0) {
        proc_control_B.temp_c = y[proc_control_B.jy_lb] * alpha1;
        proc_control_B.ix_hg = ix0;
        proc_control_B.ijA_b = proc_control_B.jA_ei;
        proc_control_B.b_kr = m + proc_control_B.jA_ei;
        while (proc_control_B.ijA_b + 1 <= proc_control_B.b_kr) {
          A[proc_control_B.ijA_b] += A[proc_control_B.ix_hg - 1] *
            proc_control_B.temp_c;
          proc_control_B.ix_hg++;
          proc_control_B.ijA_b++;
        }
      }

      proc_control_B.jy_lb++;
      proc_control_B.jA_ei += 14;
      proc_control_B.j_nt++;
    }
  }
}

// Function for MATLAB Function: '<S275>/Correct'
void proc_control::proc_control_qrFactor_TeAoo2Mt(const real_T A[169], real_T S
  [169], const real_T Ns[13])
{
  for (proc_control_B.j_c = 0; proc_control_B.j_c < 13; proc_control_B.j_c++) {
    proc_control_B.coffset_c = proc_control_B.j_c * 13;
    for (proc_control_B.ii_bc = 0; proc_control_B.ii_bc < 13;
         proc_control_B.ii_bc++) {
      proc_control_B.aoffset_d = proc_control_B.ii_bc * 13;
      proc_control_B.s_l = 0.0;
      for (proc_control_B.knt_p = 0; proc_control_B.knt_p < 13;
           proc_control_B.knt_p++) {
        proc_control_B.s_l += A[proc_control_B.knt_p * 13 + proc_control_B.j_c] *
          S[proc_control_B.aoffset_d + proc_control_B.knt_p];
      }

      proc_control_B.y_px[proc_control_B.coffset_c + proc_control_B.ii_bc] =
        proc_control_B.s_l;
      proc_control_B.b_A_o[proc_control_B.ii_bc + 14 * proc_control_B.j_c] =
        proc_control_B.y_px[13 * proc_control_B.j_c + proc_control_B.ii_bc];
    }
  }

  proc_control_B.ii_bc = 0;
  for (proc_control_B.j_c = 0; proc_control_B.j_c < 13; proc_control_B.j_c++) {
    proc_control_B.b_A_o[proc_control_B.ii_bc + 13] = Ns[proc_control_B.j_c];
    proc_control_B.work_o[proc_control_B.j_c] = 0.0;
    proc_control_B.ii_bc += 14;
  }

  for (proc_control_B.j_c = 0; proc_control_B.j_c < 13; proc_control_B.j_c++) {
    proc_control_B.ii_bc = proc_control_B.j_c * 14 + proc_control_B.j_c;
    proc_control_B.atmp_c = proc_control_B.b_A_o[proc_control_B.ii_bc];
    proc_control_B.tau_n[proc_control_B.j_c] = 0.0;
    proc_control_B.s_l = xnrm2_Cmmg4Lta(13 - proc_control_B.j_c,
      proc_control_B.b_A_o, proc_control_B.ii_bc + 2);
    if (proc_control_B.s_l != 0.0) {
      proc_control_B.s_l = proc_control_rt_hypotd_snf
        (proc_control_B.b_A_o[proc_control_B.ii_bc], proc_control_B.s_l);
      if (proc_control_B.b_A_o[proc_control_B.ii_bc] >= 0.0) {
        proc_control_B.s_l = -proc_control_B.s_l;
      }

      if (std::abs(proc_control_B.s_l) < 1.0020841800044864E-292) {
        proc_control_B.knt_p = 0;
        proc_control_B.coffset_c = (proc_control_B.ii_bc - proc_control_B.j_c) +
          14;
        do {
          proc_control_B.knt_p++;
          proc_control_B.aoffset_d = proc_control_B.ii_bc + 1;
          while (proc_control_B.aoffset_d + 1 <= proc_control_B.coffset_c) {
            proc_control_B.b_A_o[proc_control_B.aoffset_d] *=
              9.9792015476736E+291;
            proc_control_B.aoffset_d++;
          }

          proc_control_B.s_l *= 9.9792015476736E+291;
          proc_control_B.atmp_c *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s_l) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_p < 20));

        proc_control_B.s_l = proc_control_rt_hypotd_snf(proc_control_B.atmp_c,
          xnrm2_Cmmg4Lta(13 - proc_control_B.j_c, proc_control_B.b_A_o,
                         proc_control_B.ii_bc + 2));
        if (proc_control_B.atmp_c >= 0.0) {
          proc_control_B.s_l = -proc_control_B.s_l;
        }

        proc_control_B.tau_n[proc_control_B.j_c] = (proc_control_B.s_l -
          proc_control_B.atmp_c) / proc_control_B.s_l;
        proc_control_B.atmp_c = 1.0 / (proc_control_B.atmp_c -
          proc_control_B.s_l);
        proc_control_B.aoffset_d = proc_control_B.ii_bc + 1;
        while (proc_control_B.aoffset_d + 1 <= proc_control_B.coffset_c) {
          proc_control_B.b_A_o[proc_control_B.aoffset_d] *=
            proc_control_B.atmp_c;
          proc_control_B.aoffset_d++;
        }

        proc_control_B.coffset_c = 0;
        while (proc_control_B.coffset_c <= proc_control_B.knt_p - 1) {
          proc_control_B.s_l *= 1.0020841800044864E-292;
          proc_control_B.coffset_c++;
        }

        proc_control_B.atmp_c = proc_control_B.s_l;
      } else {
        proc_control_B.tau_n[proc_control_B.j_c] = (proc_control_B.s_l -
          proc_control_B.b_A_o[proc_control_B.ii_bc]) / proc_control_B.s_l;
        proc_control_B.atmp_c = 1.0 / (proc_control_B.b_A_o[proc_control_B.ii_bc]
          - proc_control_B.s_l);
        proc_control_B.knt_p = (proc_control_B.ii_bc - proc_control_B.j_c) + 14;
        proc_control_B.coffset_c = proc_control_B.ii_bc + 1;
        while (proc_control_B.coffset_c + 1 <= proc_control_B.knt_p) {
          proc_control_B.b_A_o[proc_control_B.coffset_c] *=
            proc_control_B.atmp_c;
          proc_control_B.coffset_c++;
        }

        proc_control_B.atmp_c = proc_control_B.s_l;
      }
    }

    proc_control_B.b_A_o[proc_control_B.ii_bc] = proc_control_B.atmp_c;
    if (proc_control_B.j_c + 1 < 13) {
      proc_control_B.s_l = proc_control_B.b_A_o[proc_control_B.ii_bc];
      proc_control_B.b_A_o[proc_control_B.ii_bc] = 1.0;
      if (proc_control_B.tau_n[proc_control_B.j_c] != 0.0) {
        boolean_T exitg2;
        proc_control_B.knt_p = 14 - proc_control_B.j_c;
        proc_control_B.coffset_c = (proc_control_B.ii_bc - proc_control_B.j_c) +
          13;
        while ((proc_control_B.knt_p > 0) &&
               (proc_control_B.b_A_o[proc_control_B.coffset_c] == 0.0)) {
          proc_control_B.knt_p--;
          proc_control_B.coffset_c--;
        }

        proc_control_B.coffset_c = 12 - proc_control_B.j_c;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.coffset_c > 0)) {
          int32_T exitg1;
          proc_control_B.aoffset_d = ((proc_control_B.coffset_c - 1) * 14 +
            proc_control_B.ii_bc) + 14;
          proc_control_B.ia_h = proc_control_B.aoffset_d;
          do {
            exitg1 = 0;
            if (proc_control_B.ia_h + 1 <= proc_control_B.aoffset_d +
                proc_control_B.knt_p) {
              if (proc_control_B.b_A_o[proc_control_B.ia_h] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.ia_h++;
              }
            } else {
              proc_control_B.coffset_c--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt_p = 0;
        proc_control_B.coffset_c = 0;
      }

      if (proc_control_B.knt_p > 0) {
        xgemv_wB0hPhuq(proc_control_B.knt_p, proc_control_B.coffset_c,
                       proc_control_B.b_A_o, proc_control_B.ii_bc + 15,
                       proc_control_B.b_A_o, proc_control_B.ii_bc + 1,
                       proc_control_B.work_o);
        proc_control_xgerc_ay1ZSOWu(proc_control_B.knt_p,
          proc_control_B.coffset_c, -proc_control_B.tau_n[proc_control_B.j_c],
          proc_control_B.ii_bc + 1, proc_control_B.work_o, proc_control_B.b_A_o,
          proc_control_B.ii_bc + 15);
      }

      proc_control_B.b_A_o[proc_control_B.ii_bc] = proc_control_B.s_l;
    }
  }

  for (proc_control_B.j_c = 0; proc_control_B.j_c < 13; proc_control_B.j_c++) {
    proc_control_B.ii_bc = 0;
    while (proc_control_B.ii_bc <= proc_control_B.j_c) {
      proc_control_B.y_px[proc_control_B.ii_bc + 13 * proc_control_B.j_c] =
        proc_control_B.b_A_o[14 * proc_control_B.j_c + proc_control_B.ii_bc];
      proc_control_B.ii_bc++;
    }

    proc_control_B.ii_bc = proc_control_B.j_c + 1;
    while (proc_control_B.ii_bc + 1 < 14) {
      proc_control_B.y_px[proc_control_B.ii_bc + 13 * proc_control_B.j_c] = 0.0;
      proc_control_B.ii_bc++;
    }
  }

  proc_control_B.knt_p = 0;
  for (proc_control_B.j_c = 0; proc_control_B.j_c < 13; proc_control_B.j_c++) {
    proc_control_B.aoffset_d = 0;
    for (proc_control_B.ii_bc = 0; proc_control_B.ii_bc < 13;
         proc_control_B.ii_bc++) {
      S[proc_control_B.ii_bc + proc_control_B.knt_p] =
        proc_control_B.y_px[proc_control_B.aoffset_d + proc_control_B.j_c];
      proc_control_B.aoffset_d += 13;
    }

    proc_control_B.knt_p += 13;
  }
}

// Function for MATLAB Function: '<S275>/Correct'
real_T proc_control::proc_control_xnrm2_bRDMjHYG(int32_T n, const real_T x[14],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      proc_control_B.scale_e = 3.3121686421112381E-170;
      proc_control_B.kend = (ix0 + n) - 1;
      proc_control_B.k_h = ix0;
      while (proc_control_B.k_h <= proc_control_B.kend) {
        proc_control_B.absxk_p = std::abs(x[proc_control_B.k_h - 1]);
        if (proc_control_B.absxk_p > proc_control_B.scale_e) {
          proc_control_B.t_n = proc_control_B.scale_e / proc_control_B.absxk_p;
          y = y * proc_control_B.t_n * proc_control_B.t_n + 1.0;
          proc_control_B.scale_e = proc_control_B.absxk_p;
        } else {
          proc_control_B.t_n = proc_control_B.absxk_p / proc_control_B.scale_e;
          y += proc_control_B.t_n * proc_control_B.t_n;
        }

        proc_control_B.k_h++;
      }

      y = proc_control_B.scale_e * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S275>/Correct'
void proc_control::EKFCorrectorAdditive_g_6pDXID_k(real_T Rs, const real_T x[13],
  const real_T S[169], real_T *zEstimated, real_T Pxy[13], real_T *Sy, real_T
  dHdx[13], real_T *Rsqrt)
{
  *Rsqrt = Rs;
  *zEstimated = x[2];
  proc_control_B.knt_f = 0;
  for (proc_control_B.knt_a = 0; proc_control_B.knt_a < 13; proc_control_B.knt_a
       ++) {
    *Sy = std::fmax(1.4901161193847656E-8, 1.4901161193847656E-8 * std::abs
                    (x[proc_control_B.knt_a]));
    for (proc_control_B.i_pu = 0; proc_control_B.i_pu < 13; proc_control_B.i_pu
         ++) {
      proc_control_B.b_x_b[proc_control_B.i_pu] = x[proc_control_B.i_pu];
      proc_control_B.S[proc_control_B.i_pu + proc_control_B.knt_f] = 0.0;
    }

    proc_control_B.b_x_b[proc_control_B.knt_a] = x[proc_control_B.knt_a] + *Sy;
    dHdx[proc_control_B.knt_a] = (proc_control_B.b_x_b[2] - x[2]) / *Sy;
    proc_control_B.knt_f += 13;
  }

  proc_control_B.knt_f = 0;
  for (proc_control_B.knt_a = 0; proc_control_B.knt_a < 13; proc_control_B.knt_a
       ++) {
    proc_control_B.i_pu = 0;
    for (proc_control_B.i28 = 0; proc_control_B.i28 < 13; proc_control_B.i28++)
    {
      for (proc_control_B.i27 = 0; proc_control_B.i27 < 13; proc_control_B.i27++)
      {
        proc_control_B.S_tmp = proc_control_B.i27 + proc_control_B.i_pu;
        proc_control_B.S[proc_control_B.S_tmp] += S[proc_control_B.i27 +
          proc_control_B.knt_f] * S[proc_control_B.i28 + proc_control_B.knt_f];
      }

      proc_control_B.i_pu += 13;
    }

    Pxy[proc_control_B.knt_a] = 0.0;
    proc_control_B.knt_f += 13;
  }

  for (proc_control_B.knt_f = 0; proc_control_B.knt_f < 13; proc_control_B.knt_f
       ++) {
    proc_control_B.i_pu = proc_control_B.knt_f * 13;
    *Sy = 0.0;
    for (proc_control_B.knt_a = 0; proc_control_B.knt_a < 13;
         proc_control_B.knt_a++) {
      *Sy += S[proc_control_B.i_pu + proc_control_B.knt_a] *
        dHdx[proc_control_B.knt_a];
      Pxy[proc_control_B.knt_a] += proc_control_B.S[13 * proc_control_B.knt_f +
        proc_control_B.knt_a] * dHdx[proc_control_B.knt_f];
    }

    proc_control_B.A_mx[proc_control_B.knt_f] = *Sy;
  }

  proc_control_B.A_mx[13] = Rs;
  *Sy = proc_control_B.A_mx[0];
  proc_control_B.xnorm_j = proc_control_xnrm2_bRDMjHYG(13, proc_control_B.A_mx,
    2);
  if (proc_control_B.xnorm_j != 0.0) {
    proc_control_B.xnorm_j = proc_control_rt_hypotd_snf(proc_control_B.A_mx[0],
      proc_control_B.xnorm_j);
    if (proc_control_B.A_mx[0] >= 0.0) {
      proc_control_B.xnorm_j = -proc_control_B.xnorm_j;
    }

    if (std::abs(proc_control_B.xnorm_j) < 1.0020841800044864E-292) {
      proc_control_B.knt_a = 0;
      do {
        proc_control_B.knt_a++;
        proc_control_B.i_pu = 1;
        while (proc_control_B.i_pu + 1 <= 14) {
          proc_control_B.A_mx[proc_control_B.i_pu] *= 9.9792015476736E+291;
          proc_control_B.i_pu++;
        }

        proc_control_B.xnorm_j *= 9.9792015476736E+291;
        *Sy *= 9.9792015476736E+291;
      } while ((std::abs(proc_control_B.xnorm_j) < 1.0020841800044864E-292) &&
               (proc_control_B.knt_a < 20));

      proc_control_B.xnorm_j = proc_control_rt_hypotd_snf(*Sy,
        proc_control_xnrm2_bRDMjHYG(13, proc_control_B.A_mx, 2));
      if (*Sy >= 0.0) {
        proc_control_B.xnorm_j = -proc_control_B.xnorm_j;
      }

      proc_control_B.i_pu = 0;
      while (proc_control_B.i_pu <= proc_control_B.knt_a - 1) {
        proc_control_B.xnorm_j *= 1.0020841800044864E-292;
        proc_control_B.i_pu++;
      }

      *Sy = proc_control_B.xnorm_j;
    } else {
      *Sy = proc_control_B.xnorm_j;
    }
  }
}

// Function for MATLAB Function: '<S274>/Correct'
void proc_control::proc_control_xgerc_4X4H4v2V(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[13], real_T A[208], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA_g = ia0 - 1;
    proc_control_B.jy_p = 0;
    proc_control_B.j_d = 0;
    while (proc_control_B.j_d <= n - 1) {
      if (y[proc_control_B.jy_p] != 0.0) {
        proc_control_B.temp_h = y[proc_control_B.jy_p] * alpha1;
        proc_control_B.ix_h5 = ix0;
        proc_control_B.ijA_fo = proc_control_B.jA_g;
        proc_control_B.b_fb = m + proc_control_B.jA_g;
        while (proc_control_B.ijA_fo + 1 <= proc_control_B.b_fb) {
          A[proc_control_B.ijA_fo] += A[proc_control_B.ix_h5 - 1] *
            proc_control_B.temp_h;
          proc_control_B.ix_h5++;
          proc_control_B.ijA_fo++;
        }
      }

      proc_control_B.jy_p++;
      proc_control_B.jA_g += 16;
      proc_control_B.j_d++;
    }
  }
}

// Function for MATLAB Function: '<S274>/Correct'
void proc_control::proc_control_qrFactor_3bJrEoRT(const real_T A[169], real_T S
  [169], const real_T Ns[39])
{
  for (proc_control_B.j_i5e = 0; proc_control_B.j_i5e < 13; proc_control_B.j_i5e
       ++) {
    proc_control_B.coffset_lr = proc_control_B.j_i5e * 13;
    for (proc_control_B.ii_o = 0; proc_control_B.ii_o < 13; proc_control_B.ii_o
         ++) {
      proc_control_B.aoffset_l = proc_control_B.ii_o * 13;
      proc_control_B.s_oe = 0.0;
      for (proc_control_B.knt_b = 0; proc_control_B.knt_b < 13;
           proc_control_B.knt_b++) {
        proc_control_B.s_oe += A[proc_control_B.knt_b * 13 +
          proc_control_B.j_i5e] * S[proc_control_B.aoffset_l +
          proc_control_B.knt_b];
      }

      proc_control_B.y_p[proc_control_B.coffset_lr + proc_control_B.ii_o] =
        proc_control_B.s_oe;
      proc_control_B.b_A_c[proc_control_B.ii_o + (proc_control_B.j_i5e << 4)] =
        proc_control_B.y_p[13 * proc_control_B.j_i5e + proc_control_B.ii_o];
    }

    proc_control_B.ii_o = proc_control_B.j_i5e << 4;
    proc_control_B.b_A_c[proc_control_B.ii_o + 13] = Ns[proc_control_B.j_i5e];
    proc_control_B.b_A_c[proc_control_B.ii_o + 14] = Ns[proc_control_B.j_i5e +
      13];
    proc_control_B.b_A_c[proc_control_B.ii_o + 15] = Ns[proc_control_B.j_i5e +
      26];
    proc_control_B.work_h[proc_control_B.j_i5e] = 0.0;
  }

  for (proc_control_B.j_i5e = 0; proc_control_B.j_i5e < 13; proc_control_B.j_i5e
       ++) {
    proc_control_B.ii_o = (proc_control_B.j_i5e << 4) + proc_control_B.j_i5e;
    proc_control_B.atmp_l = proc_control_B.b_A_c[proc_control_B.ii_o];
    proc_control_B.tau_i[proc_control_B.j_i5e] = 0.0;
    proc_control_B.s_oe = xnrm2_ZWAmJ4ix(15 - proc_control_B.j_i5e,
      proc_control_B.b_A_c, proc_control_B.ii_o + 2);
    if (proc_control_B.s_oe != 0.0) {
      proc_control_B.s_oe = proc_control_rt_hypotd_snf
        (proc_control_B.b_A_c[proc_control_B.ii_o], proc_control_B.s_oe);
      if (proc_control_B.b_A_c[proc_control_B.ii_o] >= 0.0) {
        proc_control_B.s_oe = -proc_control_B.s_oe;
      }

      if (std::abs(proc_control_B.s_oe) < 1.0020841800044864E-292) {
        proc_control_B.knt_b = 0;
        proc_control_B.coffset_lr = (proc_control_B.ii_o - proc_control_B.j_i5e)
          + 16;
        do {
          proc_control_B.knt_b++;
          proc_control_B.aoffset_l = proc_control_B.ii_o + 1;
          while (proc_control_B.aoffset_l + 1 <= proc_control_B.coffset_lr) {
            proc_control_B.b_A_c[proc_control_B.aoffset_l] *=
              9.9792015476736E+291;
            proc_control_B.aoffset_l++;
          }

          proc_control_B.s_oe *= 9.9792015476736E+291;
          proc_control_B.atmp_l *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s_oe) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_b < 20));

        proc_control_B.s_oe = proc_control_rt_hypotd_snf(proc_control_B.atmp_l,
          xnrm2_ZWAmJ4ix(15 - proc_control_B.j_i5e, proc_control_B.b_A_c,
                         proc_control_B.ii_o + 2));
        if (proc_control_B.atmp_l >= 0.0) {
          proc_control_B.s_oe = -proc_control_B.s_oe;
        }

        proc_control_B.tau_i[proc_control_B.j_i5e] = (proc_control_B.s_oe -
          proc_control_B.atmp_l) / proc_control_B.s_oe;
        proc_control_B.atmp_l = 1.0 / (proc_control_B.atmp_l -
          proc_control_B.s_oe);
        proc_control_B.aoffset_l = proc_control_B.ii_o + 1;
        while (proc_control_B.aoffset_l + 1 <= proc_control_B.coffset_lr) {
          proc_control_B.b_A_c[proc_control_B.aoffset_l] *=
            proc_control_B.atmp_l;
          proc_control_B.aoffset_l++;
        }

        proc_control_B.coffset_lr = 0;
        while (proc_control_B.coffset_lr <= proc_control_B.knt_b - 1) {
          proc_control_B.s_oe *= 1.0020841800044864E-292;
          proc_control_B.coffset_lr++;
        }

        proc_control_B.atmp_l = proc_control_B.s_oe;
      } else {
        proc_control_B.tau_i[proc_control_B.j_i5e] = (proc_control_B.s_oe -
          proc_control_B.b_A_c[proc_control_B.ii_o]) / proc_control_B.s_oe;
        proc_control_B.atmp_l = 1.0 / (proc_control_B.b_A_c[proc_control_B.ii_o]
          - proc_control_B.s_oe);
        proc_control_B.knt_b = (proc_control_B.ii_o - proc_control_B.j_i5e) + 16;
        proc_control_B.coffset_lr = proc_control_B.ii_o + 1;
        while (proc_control_B.coffset_lr + 1 <= proc_control_B.knt_b) {
          proc_control_B.b_A_c[proc_control_B.coffset_lr] *=
            proc_control_B.atmp_l;
          proc_control_B.coffset_lr++;
        }

        proc_control_B.atmp_l = proc_control_B.s_oe;
      }
    }

    proc_control_B.b_A_c[proc_control_B.ii_o] = proc_control_B.atmp_l;
    if (proc_control_B.j_i5e + 1 < 13) {
      proc_control_B.s_oe = proc_control_B.b_A_c[proc_control_B.ii_o];
      proc_control_B.b_A_c[proc_control_B.ii_o] = 1.0;
      if (proc_control_B.tau_i[proc_control_B.j_i5e] != 0.0) {
        boolean_T exitg2;
        proc_control_B.knt_b = 16 - proc_control_B.j_i5e;
        proc_control_B.coffset_lr = (proc_control_B.ii_o - proc_control_B.j_i5e)
          + 15;
        while ((proc_control_B.knt_b > 0) &&
               (proc_control_B.b_A_c[proc_control_B.coffset_lr] == 0.0)) {
          proc_control_B.knt_b--;
          proc_control_B.coffset_lr--;
        }

        proc_control_B.coffset_lr = 12 - proc_control_B.j_i5e;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.coffset_lr > 0)) {
          int32_T exitg1;
          proc_control_B.aoffset_l = (((proc_control_B.coffset_lr - 1) << 4) +
            proc_control_B.ii_o) + 16;
          proc_control_B.ia_i = proc_control_B.aoffset_l;
          do {
            exitg1 = 0;
            if (proc_control_B.ia_i + 1 <= proc_control_B.aoffset_l +
                proc_control_B.knt_b) {
              if (proc_control_B.b_A_c[proc_control_B.ia_i] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.ia_i++;
              }
            } else {
              proc_control_B.coffset_lr--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt_b = 0;
        proc_control_B.coffset_lr = 0;
      }

      if (proc_control_B.knt_b > 0) {
        xgemv_F8pkuUXW(proc_control_B.knt_b, proc_control_B.coffset_lr,
                       proc_control_B.b_A_c, proc_control_B.ii_o + 17,
                       proc_control_B.b_A_c, proc_control_B.ii_o + 1,
                       proc_control_B.work_h);
        proc_control_xgerc_4X4H4v2V(proc_control_B.knt_b,
          proc_control_B.coffset_lr, -proc_control_B.tau_i[proc_control_B.j_i5e],
          proc_control_B.ii_o + 1, proc_control_B.work_h, proc_control_B.b_A_c,
          proc_control_B.ii_o + 17);
      }

      proc_control_B.b_A_c[proc_control_B.ii_o] = proc_control_B.s_oe;
    }
  }

  for (proc_control_B.j_i5e = 0; proc_control_B.j_i5e < 13; proc_control_B.j_i5e
       ++) {
    proc_control_B.ii_o = 0;
    while (proc_control_B.ii_o <= proc_control_B.j_i5e) {
      proc_control_B.y_p[proc_control_B.ii_o + 13 * proc_control_B.j_i5e] =
        proc_control_B.b_A_c[(proc_control_B.j_i5e << 4) + proc_control_B.ii_o];
      proc_control_B.ii_o++;
    }

    proc_control_B.ii_o = proc_control_B.j_i5e + 1;
    while (proc_control_B.ii_o + 1 < 14) {
      proc_control_B.y_p[proc_control_B.ii_o + 13 * proc_control_B.j_i5e] = 0.0;
      proc_control_B.ii_o++;
    }
  }

  proc_control_B.knt_b = 0;
  for (proc_control_B.j_i5e = 0; proc_control_B.j_i5e < 13; proc_control_B.j_i5e
       ++) {
    proc_control_B.aoffset_l = 0;
    for (proc_control_B.ii_o = 0; proc_control_B.ii_o < 13; proc_control_B.ii_o
         ++) {
      S[proc_control_B.ii_o + proc_control_B.knt_b] =
        proc_control_B.y_p[proc_control_B.aoffset_l + proc_control_B.j_i5e];
      proc_control_B.aoffset_l += 13;
    }

    proc_control_B.knt_b += 13;
  }
}

// Function for MATLAB Function: '<S274>/Correct'
real_T proc_control::proc_control_xnrm2_kj8IiC0H(int32_T n, const real_T x[48],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      proc_control_B.scale_eq = 3.3121686421112381E-170;
      proc_control_B.kend_e = (ix0 + n) - 1;
      proc_control_B.k_l = ix0;
      while (proc_control_B.k_l <= proc_control_B.kend_e) {
        proc_control_B.absxk_pc = std::abs(x[proc_control_B.k_l - 1]);
        if (proc_control_B.absxk_pc > proc_control_B.scale_eq) {
          proc_control_B.t_d = proc_control_B.scale_eq / proc_control_B.absxk_pc;
          y = y * proc_control_B.t_d * proc_control_B.t_d + 1.0;
          proc_control_B.scale_eq = proc_control_B.absxk_pc;
        } else {
          proc_control_B.t_d = proc_control_B.absxk_pc / proc_control_B.scale_eq;
          y += proc_control_B.t_d * proc_control_B.t_d;
        }

        proc_control_B.k_l++;
      }

      y = proc_control_B.scale_eq * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S274>/Correct'
void proc_control::proc_control_qrFactor_qGSgSIIm(const real_T A[39], const
  real_T S[169], const real_T Ns[9], real_T b_S[9])
{
  int32_T exitg1;
  for (proc_control_B.j_p = 0; proc_control_B.j_p < 3; proc_control_B.j_p++) {
    proc_control_B.coffset_o = proc_control_B.j_p * 13;
    for (proc_control_B.knt_f4 = 0; proc_control_B.knt_f4 < 13;
         proc_control_B.knt_f4++) {
      proc_control_B.aoffset_k = proc_control_B.knt_f4 * 13;
      proc_control_B.s_f = 0.0;
      for (proc_control_B.coltop_d = 0; proc_control_B.coltop_d < 13;
           proc_control_B.coltop_d++) {
        proc_control_B.s_f += A[proc_control_B.coltop_d * 3 + proc_control_B.j_p]
          * S[proc_control_B.aoffset_k + proc_control_B.coltop_d];
      }

      proc_control_B.y_f[proc_control_B.coffset_o + proc_control_B.knt_f4] =
        proc_control_B.s_f;
      proc_control_B.b_A_g[proc_control_B.knt_f4 + (proc_control_B.j_p << 4)] =
        proc_control_B.y_f[13 * proc_control_B.j_p + proc_control_B.knt_f4];
    }

    proc_control_B.knt_f4 = proc_control_B.j_p << 4;
    proc_control_B.b_A_g[proc_control_B.knt_f4 + 13] = Ns[proc_control_B.j_p];
    proc_control_B.b_A_g[proc_control_B.knt_f4 + 14] = Ns[proc_control_B.j_p + 3];
    proc_control_B.b_A_g[proc_control_B.knt_f4 + 15] = Ns[proc_control_B.j_p + 6];
    proc_control_B.work_k[proc_control_B.j_p] = 0.0;
  }

  proc_control_B.atmp_j = proc_control_B.b_A_g[0];
  proc_control_B.tau_idx_0 = 0.0;
  proc_control_B.s_f = proc_control_xnrm2_kj8IiC0H(15, proc_control_B.b_A_g, 2);
  if (proc_control_B.s_f != 0.0) {
    proc_control_B.s_f = proc_control_rt_hypotd_snf(proc_control_B.b_A_g[0],
      proc_control_B.s_f);
    if (proc_control_B.b_A_g[0] >= 0.0) {
      proc_control_B.s_f = -proc_control_B.s_f;
    }

    if (std::abs(proc_control_B.s_f) < 1.0020841800044864E-292) {
      proc_control_B.knt_f4 = 0;
      do {
        proc_control_B.knt_f4++;
        proc_control_B.coltop_d = 1;
        while (proc_control_B.coltop_d + 1 <= 16) {
          proc_control_B.b_A_g[proc_control_B.coltop_d] *= 9.9792015476736E+291;
          proc_control_B.coltop_d++;
        }

        proc_control_B.s_f *= 9.9792015476736E+291;
        proc_control_B.atmp_j *= 9.9792015476736E+291;
      } while ((std::abs(proc_control_B.s_f) < 1.0020841800044864E-292) &&
               (proc_control_B.knt_f4 < 20));

      proc_control_B.s_f = proc_control_rt_hypotd_snf(proc_control_B.atmp_j,
        proc_control_xnrm2_kj8IiC0H(15, proc_control_B.b_A_g, 2));
      if (proc_control_B.atmp_j >= 0.0) {
        proc_control_B.s_f = -proc_control_B.s_f;
      }

      proc_control_B.tau_idx_0 = (proc_control_B.s_f - proc_control_B.atmp_j) /
        proc_control_B.s_f;
      proc_control_B.atmp_j = 1.0 / (proc_control_B.atmp_j - proc_control_B.s_f);
      proc_control_B.coltop_d = 1;
      while (proc_control_B.coltop_d + 1 <= 16) {
        proc_control_B.b_A_g[proc_control_B.coltop_d] *= proc_control_B.atmp_j;
        proc_control_B.coltop_d++;
      }

      proc_control_B.aoffset_k = 0;
      while (proc_control_B.aoffset_k <= proc_control_B.knt_f4 - 1) {
        proc_control_B.s_f *= 1.0020841800044864E-292;
        proc_control_B.aoffset_k++;
      }

      proc_control_B.atmp_j = proc_control_B.s_f;
    } else {
      proc_control_B.tau_idx_0 = (proc_control_B.s_f - proc_control_B.b_A_g[0]) /
        proc_control_B.s_f;
      proc_control_B.atmp_j = 1.0 / (proc_control_B.b_A_g[0] -
        proc_control_B.s_f);
      proc_control_B.aoffset_k = 1;
      while (proc_control_B.aoffset_k + 1 <= 16) {
        proc_control_B.b_A_g[proc_control_B.aoffset_k] *= proc_control_B.atmp_j;
        proc_control_B.aoffset_k++;
      }

      proc_control_B.atmp_j = proc_control_B.s_f;
    }
  }

  proc_control_B.b_A_g[0] = 1.0;
  if (proc_control_B.tau_idx_0 != 0.0) {
    boolean_T exitg2;
    proc_control_B.knt_f4 = 16;
    proc_control_B.aoffset_k = 15;
    while ((proc_control_B.knt_f4 > 0) &&
           (proc_control_B.b_A_g[proc_control_B.aoffset_k] == 0.0)) {
      proc_control_B.knt_f4--;
      proc_control_B.aoffset_k--;
    }

    proc_control_B.aoffset_k = 2;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.aoffset_k > 0)) {
      proc_control_B.coltop_d = ((proc_control_B.aoffset_k - 1) << 4) + 16;
      proc_control_B.j_p = proc_control_B.coltop_d;
      do {
        exitg1 = 0;
        if (proc_control_B.j_p + 1 <= proc_control_B.coltop_d +
            proc_control_B.knt_f4) {
          if (proc_control_B.b_A_g[proc_control_B.j_p] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_B.j_p++;
          }
        } else {
          proc_control_B.aoffset_k--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_B.knt_f4 = 0;
    proc_control_B.aoffset_k = 0;
  }

  if (proc_control_B.knt_f4 > 0) {
    xgemv_hztnEYXM(proc_control_B.knt_f4, proc_control_B.aoffset_k,
                   proc_control_B.b_A_g, 17, proc_control_B.b_A_g, 1,
                   proc_control_B.work_k);
    xgerc_6YFUaNlM(proc_control_B.knt_f4, proc_control_B.aoffset_k,
                   -proc_control_B.tau_idx_0, 1, proc_control_B.work_k,
                   proc_control_B.b_A_g, 17);
  }

  proc_control_B.b_A_g[0] = proc_control_B.atmp_j;
  proc_control_B.atmp_j = proc_control_B.b_A_g[17];
  proc_control_B.tau_idx_0 = 0.0;
  proc_control_B.s_f = proc_control_xnrm2_kj8IiC0H(14, proc_control_B.b_A_g, 19);
  if (proc_control_B.s_f != 0.0) {
    proc_control_B.s_f = proc_control_rt_hypotd_snf(proc_control_B.b_A_g[17],
      proc_control_B.s_f);
    if (proc_control_B.b_A_g[17] >= 0.0) {
      proc_control_B.s_f = -proc_control_B.s_f;
    }

    if (std::abs(proc_control_B.s_f) < 1.0020841800044864E-292) {
      proc_control_B.knt_f4 = 0;
      do {
        proc_control_B.knt_f4++;
        proc_control_B.coltop_d = 18;
        while (proc_control_B.coltop_d + 1 <= 32) {
          proc_control_B.b_A_g[proc_control_B.coltop_d] *= 9.9792015476736E+291;
          proc_control_B.coltop_d++;
        }

        proc_control_B.s_f *= 9.9792015476736E+291;
        proc_control_B.atmp_j *= 9.9792015476736E+291;
      } while ((std::abs(proc_control_B.s_f) < 1.0020841800044864E-292) &&
               (proc_control_B.knt_f4 < 20));

      proc_control_B.s_f = proc_control_rt_hypotd_snf(proc_control_B.atmp_j,
        proc_control_xnrm2_kj8IiC0H(14, proc_control_B.b_A_g, 19));
      if (proc_control_B.atmp_j >= 0.0) {
        proc_control_B.s_f = -proc_control_B.s_f;
      }

      proc_control_B.tau_idx_0 = (proc_control_B.s_f - proc_control_B.atmp_j) /
        proc_control_B.s_f;
      proc_control_B.atmp_j = 1.0 / (proc_control_B.atmp_j - proc_control_B.s_f);
      proc_control_B.coltop_d = 18;
      while (proc_control_B.coltop_d + 1 <= 32) {
        proc_control_B.b_A_g[proc_control_B.coltop_d] *= proc_control_B.atmp_j;
        proc_control_B.coltop_d++;
      }

      proc_control_B.aoffset_k = 0;
      while (proc_control_B.aoffset_k <= proc_control_B.knt_f4 - 1) {
        proc_control_B.s_f *= 1.0020841800044864E-292;
        proc_control_B.aoffset_k++;
      }

      proc_control_B.atmp_j = proc_control_B.s_f;
    } else {
      proc_control_B.tau_idx_0 = (proc_control_B.s_f - proc_control_B.b_A_g[17])
        / proc_control_B.s_f;
      proc_control_B.atmp_j = 1.0 / (proc_control_B.b_A_g[17] -
        proc_control_B.s_f);
      proc_control_B.aoffset_k = 18;
      while (proc_control_B.aoffset_k + 1 <= 32) {
        proc_control_B.b_A_g[proc_control_B.aoffset_k] *= proc_control_B.atmp_j;
        proc_control_B.aoffset_k++;
      }

      proc_control_B.atmp_j = proc_control_B.s_f;
    }
  }

  proc_control_B.b_A_g[17] = 1.0;
  if (proc_control_B.tau_idx_0 != 0.0) {
    proc_control_B.knt_f4 = 15;
    proc_control_B.aoffset_k = 31;
    while ((proc_control_B.knt_f4 > 0) &&
           (proc_control_B.b_A_g[proc_control_B.aoffset_k] == 0.0)) {
      proc_control_B.knt_f4--;
      proc_control_B.aoffset_k--;
    }

    proc_control_B.aoffset_k = 1;
    proc_control_B.j_p = 33;
    do {
      exitg1 = 0;
      if (proc_control_B.j_p + 1 <= proc_control_B.knt_f4 + 33) {
        if (proc_control_B.b_A_g[proc_control_B.j_p] != 0.0) {
          exitg1 = 1;
        } else {
          proc_control_B.j_p++;
        }
      } else {
        proc_control_B.aoffset_k = 0;
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  } else {
    proc_control_B.knt_f4 = 0;
    proc_control_B.aoffset_k = 0;
  }

  if (proc_control_B.knt_f4 > 0) {
    xgemv_hztnEYXM(proc_control_B.knt_f4, proc_control_B.aoffset_k,
                   proc_control_B.b_A_g, 34, proc_control_B.b_A_g, 18,
                   proc_control_B.work_k);
    xgerc_6YFUaNlM(proc_control_B.knt_f4, proc_control_B.aoffset_k,
                   -proc_control_B.tau_idx_0, 18, proc_control_B.work_k,
                   proc_control_B.b_A_g, 34);
  }

  proc_control_B.b_A_g[17] = proc_control_B.atmp_j;
  proc_control_B.atmp_j = proc_control_B.b_A_g[34];
  proc_control_B.s_f = proc_control_xnrm2_kj8IiC0H(13, proc_control_B.b_A_g, 36);
  if (proc_control_B.s_f != 0.0) {
    proc_control_B.s_f = proc_control_rt_hypotd_snf(proc_control_B.b_A_g[34],
      proc_control_B.s_f);
    if (proc_control_B.b_A_g[34] >= 0.0) {
      proc_control_B.s_f = -proc_control_B.s_f;
    }

    if (std::abs(proc_control_B.s_f) < 1.0020841800044864E-292) {
      proc_control_B.knt_f4 = 0;
      do {
        proc_control_B.knt_f4++;
        proc_control_B.coltop_d = 35;
        while (proc_control_B.coltop_d + 1 <= 48) {
          proc_control_B.b_A_g[proc_control_B.coltop_d] *= 9.9792015476736E+291;
          proc_control_B.coltop_d++;
        }

        proc_control_B.s_f *= 9.9792015476736E+291;
        proc_control_B.atmp_j *= 9.9792015476736E+291;
      } while ((std::abs(proc_control_B.s_f) < 1.0020841800044864E-292) &&
               (proc_control_B.knt_f4 < 20));

      proc_control_B.s_f = proc_control_rt_hypotd_snf(proc_control_B.atmp_j,
        proc_control_xnrm2_kj8IiC0H(13, proc_control_B.b_A_g, 36));
      if (proc_control_B.atmp_j >= 0.0) {
        proc_control_B.s_f = -proc_control_B.s_f;
      }

      proc_control_B.atmp_j = 1.0 / (proc_control_B.atmp_j - proc_control_B.s_f);
      proc_control_B.coltop_d = 35;
      while (proc_control_B.coltop_d + 1 <= 48) {
        proc_control_B.b_A_g[proc_control_B.coltop_d] *= proc_control_B.atmp_j;
        proc_control_B.coltop_d++;
      }

      proc_control_B.aoffset_k = 0;
      while (proc_control_B.aoffset_k <= proc_control_B.knt_f4 - 1) {
        proc_control_B.s_f *= 1.0020841800044864E-292;
        proc_control_B.aoffset_k++;
      }

      proc_control_B.atmp_j = proc_control_B.s_f;
    } else {
      proc_control_B.atmp_j = 1.0 / (proc_control_B.b_A_g[34] -
        proc_control_B.s_f);
      proc_control_B.aoffset_k = 35;
      while (proc_control_B.aoffset_k + 1 <= 48) {
        proc_control_B.b_A_g[proc_control_B.aoffset_k] *= proc_control_B.atmp_j;
        proc_control_B.aoffset_k++;
      }

      proc_control_B.atmp_j = proc_control_B.s_f;
    }
  }

  proc_control_B.b_A_g[34] = proc_control_B.atmp_j;
  proc_control_B.R_j[0] = proc_control_B.b_A_g[0];
  proc_control_B.coffset_o = 1;
  while (proc_control_B.coffset_o + 1 < 4) {
    proc_control_B.R_j[proc_control_B.coffset_o] = 0.0;
    proc_control_B.coffset_o++;
  }

  proc_control_B.coffset_o = 0;
  while (proc_control_B.coffset_o <= 1) {
    proc_control_B.R_j[proc_control_B.coffset_o + 3] =
      proc_control_B.b_A_g[proc_control_B.coffset_o + 16];
    proc_control_B.coffset_o++;
  }

  while (proc_control_B.coffset_o + 1 < 4) {
    proc_control_B.R_j[proc_control_B.coffset_o + 3] = 0.0;
    proc_control_B.coffset_o++;
  }

  proc_control_B.coffset_o = 0;
  while (proc_control_B.coffset_o <= 2) {
    proc_control_B.R_j[proc_control_B.coffset_o + 6] =
      proc_control_B.b_A_g[proc_control_B.coffset_o + 32];
    proc_control_B.coffset_o++;
  }

  proc_control_B.j_p = 0;
  for (proc_control_B.knt_f4 = 0; proc_control_B.knt_f4 < 3;
       proc_control_B.knt_f4++) {
    b_S[proc_control_B.j_p] = proc_control_B.R_j[proc_control_B.knt_f4];
    b_S[proc_control_B.j_p + 1] = proc_control_B.R_j[proc_control_B.knt_f4 + 3];
    b_S[proc_control_B.j_p + 2] = proc_control_B.R_j[proc_control_B.knt_f4 + 6];
    proc_control_B.j_p += 3;
  }
}

// Function for MATLAB Function: '<S273>/Correct'
void proc_control::proc_control_xgerc_ZLmTruVs(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[13], real_T A[260], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA_d = ia0 - 1;
    proc_control_B.jy_l = 0;
    proc_control_B.j_bi = 0;
    while (proc_control_B.j_bi <= n - 1) {
      if (y[proc_control_B.jy_l] != 0.0) {
        proc_control_B.temp_d = y[proc_control_B.jy_l] * alpha1;
        proc_control_B.ix_jk = ix0;
        proc_control_B.ijA_p = proc_control_B.jA_d;
        proc_control_B.b_f = m + proc_control_B.jA_d;
        while (proc_control_B.ijA_p + 1 <= proc_control_B.b_f) {
          A[proc_control_B.ijA_p] += A[proc_control_B.ix_jk - 1] *
            proc_control_B.temp_d;
          proc_control_B.ix_jk++;
          proc_control_B.ijA_p++;
        }
      }

      proc_control_B.jy_l++;
      proc_control_B.jA_d += 20;
      proc_control_B.j_bi++;
    }
  }
}

// Function for MATLAB Function: '<S273>/Correct'
void proc_control::proc_control_qrFactor_1jDj6Vzn(const real_T A[169], real_T S
  [169], const real_T Ns[91])
{
  for (proc_control_B.j_bp = 0; proc_control_B.j_bp < 13; proc_control_B.j_bp++)
  {
    proc_control_B.coffset_h = proc_control_B.j_bp * 13;
    for (proc_control_B.ii_b = 0; proc_control_B.ii_b < 13; proc_control_B.ii_b
         ++) {
      proc_control_B.aoffset_h = proc_control_B.ii_b * 13;
      proc_control_B.s_c = 0.0;
      for (proc_control_B.knt_dp = 0; proc_control_B.knt_dp < 13;
           proc_control_B.knt_dp++) {
        proc_control_B.s_c += A[proc_control_B.knt_dp * 13 + proc_control_B.j_bp]
          * S[proc_control_B.aoffset_h + proc_control_B.knt_dp];
      }

      proc_control_B.y_k[proc_control_B.coffset_h + proc_control_B.ii_b] =
        proc_control_B.s_c;
      proc_control_B.b_A_f[proc_control_B.ii_b + 20 * proc_control_B.j_bp] =
        proc_control_B.y_k[13 * proc_control_B.j_bp + proc_control_B.ii_b];
    }
  }

  proc_control_B.aoffset_h = 0;
  for (proc_control_B.knt_dp = 0; proc_control_B.knt_dp < 13;
       proc_control_B.knt_dp++) {
    proc_control_B.ii_b = 0;
    for (proc_control_B.j_bp = 0; proc_control_B.j_bp < 7; proc_control_B.j_bp++)
    {
      proc_control_B.b_A_f[(proc_control_B.j_bp + proc_control_B.aoffset_h) + 13]
        = Ns[proc_control_B.ii_b + proc_control_B.knt_dp];
      proc_control_B.ii_b += 13;
    }

    proc_control_B.work_j[proc_control_B.knt_dp] = 0.0;
    proc_control_B.aoffset_h += 20;
  }

  for (proc_control_B.j_bp = 0; proc_control_B.j_bp < 13; proc_control_B.j_bp++)
  {
    proc_control_B.ii_b = proc_control_B.j_bp * 20 + proc_control_B.j_bp;
    proc_control_B.atmp_e = proc_control_B.b_A_f[proc_control_B.ii_b];
    proc_control_B.tau_d[proc_control_B.j_bp] = 0.0;
    proc_control_B.s_c = xnrm2_H2991AvN(19 - proc_control_B.j_bp,
      proc_control_B.b_A_f, proc_control_B.ii_b + 2);
    if (proc_control_B.s_c != 0.0) {
      proc_control_B.s_c = proc_control_rt_hypotd_snf
        (proc_control_B.b_A_f[proc_control_B.ii_b], proc_control_B.s_c);
      if (proc_control_B.b_A_f[proc_control_B.ii_b] >= 0.0) {
        proc_control_B.s_c = -proc_control_B.s_c;
      }

      if (std::abs(proc_control_B.s_c) < 1.0020841800044864E-292) {
        proc_control_B.knt_dp = 0;
        proc_control_B.coffset_h = (proc_control_B.ii_b - proc_control_B.j_bp) +
          20;
        do {
          proc_control_B.knt_dp++;
          proc_control_B.aoffset_h = proc_control_B.ii_b + 1;
          while (proc_control_B.aoffset_h + 1 <= proc_control_B.coffset_h) {
            proc_control_B.b_A_f[proc_control_B.aoffset_h] *=
              9.9792015476736E+291;
            proc_control_B.aoffset_h++;
          }

          proc_control_B.s_c *= 9.9792015476736E+291;
          proc_control_B.atmp_e *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s_c) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_dp < 20));

        proc_control_B.s_c = proc_control_rt_hypotd_snf(proc_control_B.atmp_e,
          xnrm2_H2991AvN(19 - proc_control_B.j_bp, proc_control_B.b_A_f,
                         proc_control_B.ii_b + 2));
        if (proc_control_B.atmp_e >= 0.0) {
          proc_control_B.s_c = -proc_control_B.s_c;
        }

        proc_control_B.tau_d[proc_control_B.j_bp] = (proc_control_B.s_c -
          proc_control_B.atmp_e) / proc_control_B.s_c;
        proc_control_B.atmp_e = 1.0 / (proc_control_B.atmp_e -
          proc_control_B.s_c);
        proc_control_B.aoffset_h = proc_control_B.ii_b + 1;
        while (proc_control_B.aoffset_h + 1 <= proc_control_B.coffset_h) {
          proc_control_B.b_A_f[proc_control_B.aoffset_h] *=
            proc_control_B.atmp_e;
          proc_control_B.aoffset_h++;
        }

        proc_control_B.coffset_h = 0;
        while (proc_control_B.coffset_h <= proc_control_B.knt_dp - 1) {
          proc_control_B.s_c *= 1.0020841800044864E-292;
          proc_control_B.coffset_h++;
        }

        proc_control_B.atmp_e = proc_control_B.s_c;
      } else {
        proc_control_B.tau_d[proc_control_B.j_bp] = (proc_control_B.s_c -
          proc_control_B.b_A_f[proc_control_B.ii_b]) / proc_control_B.s_c;
        proc_control_B.atmp_e = 1.0 / (proc_control_B.b_A_f[proc_control_B.ii_b]
          - proc_control_B.s_c);
        proc_control_B.knt_dp = (proc_control_B.ii_b - proc_control_B.j_bp) + 20;
        proc_control_B.coffset_h = proc_control_B.ii_b + 1;
        while (proc_control_B.coffset_h + 1 <= proc_control_B.knt_dp) {
          proc_control_B.b_A_f[proc_control_B.coffset_h] *=
            proc_control_B.atmp_e;
          proc_control_B.coffset_h++;
        }

        proc_control_B.atmp_e = proc_control_B.s_c;
      }
    }

    proc_control_B.b_A_f[proc_control_B.ii_b] = proc_control_B.atmp_e;
    if (proc_control_B.j_bp + 1 < 13) {
      proc_control_B.s_c = proc_control_B.b_A_f[proc_control_B.ii_b];
      proc_control_B.b_A_f[proc_control_B.ii_b] = 1.0;
      if (proc_control_B.tau_d[proc_control_B.j_bp] != 0.0) {
        boolean_T exitg2;
        proc_control_B.knt_dp = 20 - proc_control_B.j_bp;
        proc_control_B.coffset_h = (proc_control_B.ii_b - proc_control_B.j_bp) +
          19;
        while ((proc_control_B.knt_dp > 0) &&
               (proc_control_B.b_A_f[proc_control_B.coffset_h] == 0.0)) {
          proc_control_B.knt_dp--;
          proc_control_B.coffset_h--;
        }

        proc_control_B.coffset_h = 12 - proc_control_B.j_bp;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.coffset_h > 0)) {
          int32_T exitg1;
          proc_control_B.aoffset_h = ((proc_control_B.coffset_h - 1) * 20 +
            proc_control_B.ii_b) + 20;
          proc_control_B.ia_j = proc_control_B.aoffset_h;
          do {
            exitg1 = 0;
            if (proc_control_B.ia_j + 1 <= proc_control_B.aoffset_h +
                proc_control_B.knt_dp) {
              if (proc_control_B.b_A_f[proc_control_B.ia_j] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.ia_j++;
              }
            } else {
              proc_control_B.coffset_h--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt_dp = 0;
        proc_control_B.coffset_h = 0;
      }

      if (proc_control_B.knt_dp > 0) {
        xgemv_3az3hqLU(proc_control_B.knt_dp, proc_control_B.coffset_h,
                       proc_control_B.b_A_f, proc_control_B.ii_b + 21,
                       proc_control_B.b_A_f, proc_control_B.ii_b + 1,
                       proc_control_B.work_j);
        proc_control_xgerc_ZLmTruVs(proc_control_B.knt_dp,
          proc_control_B.coffset_h, -proc_control_B.tau_d[proc_control_B.j_bp],
          proc_control_B.ii_b + 1, proc_control_B.work_j, proc_control_B.b_A_f,
          proc_control_B.ii_b + 21);
      }

      proc_control_B.b_A_f[proc_control_B.ii_b] = proc_control_B.s_c;
    }
  }

  for (proc_control_B.j_bp = 0; proc_control_B.j_bp < 13; proc_control_B.j_bp++)
  {
    proc_control_B.ii_b = 0;
    while (proc_control_B.ii_b <= proc_control_B.j_bp) {
      proc_control_B.y_k[proc_control_B.ii_b + 13 * proc_control_B.j_bp] =
        proc_control_B.b_A_f[20 * proc_control_B.j_bp + proc_control_B.ii_b];
      proc_control_B.ii_b++;
    }

    proc_control_B.ii_b = proc_control_B.j_bp + 1;
    while (proc_control_B.ii_b + 1 < 14) {
      proc_control_B.y_k[proc_control_B.ii_b + 13 * proc_control_B.j_bp] = 0.0;
      proc_control_B.ii_b++;
    }
  }

  proc_control_B.ii_b = 0;
  for (proc_control_B.j_bp = 0; proc_control_B.j_bp < 13; proc_control_B.j_bp++)
  {
    proc_control_B.aoffset_h = 0;
    for (proc_control_B.knt_dp = 0; proc_control_B.knt_dp < 13;
         proc_control_B.knt_dp++) {
      S[proc_control_B.knt_dp + proc_control_B.ii_b] =
        proc_control_B.y_k[proc_control_B.aoffset_h + proc_control_B.j_bp];
      proc_control_B.aoffset_h += 13;
    }

    proc_control_B.ii_b += 13;
  }
}

// Function for MATLAB Function: '<S273>/Correct'
void proc_control::proc_control_xgerc_aQMWzodX(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[7], real_T A[140], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_B.jA_j = ia0 - 1;
    proc_control_B.jy_d = 0;
    proc_control_B.j_c5 = 0;
    while (proc_control_B.j_c5 <= n - 1) {
      if (y[proc_control_B.jy_d] != 0.0) {
        proc_control_B.temp_cm = y[proc_control_B.jy_d] * alpha1;
        proc_control_B.ix_g = ix0;
        proc_control_B.ijA_j = proc_control_B.jA_j;
        proc_control_B.b_kh = m + proc_control_B.jA_j;
        while (proc_control_B.ijA_j + 1 <= proc_control_B.b_kh) {
          A[proc_control_B.ijA_j] += A[proc_control_B.ix_g - 1] *
            proc_control_B.temp_cm;
          proc_control_B.ix_g++;
          proc_control_B.ijA_j++;
        }
      }

      proc_control_B.jy_d++;
      proc_control_B.jA_j += 20;
      proc_control_B.j_c5++;
    }
  }
}

// Function for MATLAB Function: '<S273>/Correct'
void proc_control::proc_control_qrFactor_MMa7wW5h(const real_T A[91], const
  real_T S[169], const real_T Ns[49], real_T b_S[49])
{
  for (proc_control_B.j_iw = 0; proc_control_B.j_iw < 7; proc_control_B.j_iw++)
  {
    proc_control_B.coffset_k1 = proc_control_B.j_iw * 13;
    for (proc_control_B.knt_o = 0; proc_control_B.knt_o < 13;
         proc_control_B.knt_o++) {
      proc_control_B.aoffset_e = proc_control_B.knt_o * 13;
      proc_control_B.s_b = 0.0;
      for (proc_control_B.coltop_j = 0; proc_control_B.coltop_j < 13;
           proc_control_B.coltop_j++) {
        proc_control_B.s_b += A[proc_control_B.coltop_j * 7 +
          proc_control_B.j_iw] * S[proc_control_B.aoffset_e +
          proc_control_B.coltop_j];
      }

      proc_control_B.y_pt[proc_control_B.coffset_k1 + proc_control_B.knt_o] =
        proc_control_B.s_b;
      proc_control_B.b_A_e[proc_control_B.knt_o + 20 * proc_control_B.j_iw] =
        proc_control_B.y_pt[13 * proc_control_B.j_iw + proc_control_B.knt_o];
    }
  }

  proc_control_B.knt_o = 0;
  for (proc_control_B.coltop_j = 0; proc_control_B.coltop_j < 7;
       proc_control_B.coltop_j++) {
    proc_control_B.j_iw = 0;
    for (proc_control_B.coffset_k1 = 0; proc_control_B.coffset_k1 < 7;
         proc_control_B.coffset_k1++) {
      proc_control_B.b_A_e[(proc_control_B.coffset_k1 + proc_control_B.knt_o) +
        13] = Ns[proc_control_B.j_iw + proc_control_B.coltop_j];
      proc_control_B.j_iw += 7;
    }

    proc_control_B.work_a[proc_control_B.coltop_j] = 0.0;
    proc_control_B.knt_o += 20;
  }

  for (proc_control_B.j_iw = 0; proc_control_B.j_iw < 7; proc_control_B.j_iw++)
  {
    proc_control_B.coffset_k1 = proc_control_B.j_iw * 20 + proc_control_B.j_iw;
    proc_control_B.atmp_o = proc_control_B.b_A_e[proc_control_B.coffset_k1];
    proc_control_B.tau_f[proc_control_B.j_iw] = 0.0;
    proc_control_B.s_b = xnrm2_KuvT0oF6(19 - proc_control_B.j_iw,
      proc_control_B.b_A_e, proc_control_B.coffset_k1 + 2);
    if (proc_control_B.s_b != 0.0) {
      proc_control_B.s_b = proc_control_rt_hypotd_snf
        (proc_control_B.b_A_e[proc_control_B.coffset_k1], proc_control_B.s_b);
      if (proc_control_B.b_A_e[proc_control_B.coffset_k1] >= 0.0) {
        proc_control_B.s_b = -proc_control_B.s_b;
      }

      if (std::abs(proc_control_B.s_b) < 1.0020841800044864E-292) {
        proc_control_B.knt_o = 0;
        proc_control_B.aoffset_e = (proc_control_B.coffset_k1 -
          proc_control_B.j_iw) + 20;
        do {
          proc_control_B.knt_o++;
          proc_control_B.coltop_j = proc_control_B.coffset_k1 + 1;
          while (proc_control_B.coltop_j + 1 <= proc_control_B.aoffset_e) {
            proc_control_B.b_A_e[proc_control_B.coltop_j] *=
              9.9792015476736E+291;
            proc_control_B.coltop_j++;
          }

          proc_control_B.s_b *= 9.9792015476736E+291;
          proc_control_B.atmp_o *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s_b) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_o < 20));

        proc_control_B.s_b = proc_control_rt_hypotd_snf(proc_control_B.atmp_o,
          xnrm2_KuvT0oF6(19 - proc_control_B.j_iw, proc_control_B.b_A_e,
                         proc_control_B.coffset_k1 + 2));
        if (proc_control_B.atmp_o >= 0.0) {
          proc_control_B.s_b = -proc_control_B.s_b;
        }

        proc_control_B.tau_f[proc_control_B.j_iw] = (proc_control_B.s_b -
          proc_control_B.atmp_o) / proc_control_B.s_b;
        proc_control_B.atmp_o = 1.0 / (proc_control_B.atmp_o -
          proc_control_B.s_b);
        proc_control_B.coltop_j = proc_control_B.coffset_k1 + 1;
        while (proc_control_B.coltop_j + 1 <= proc_control_B.aoffset_e) {
          proc_control_B.b_A_e[proc_control_B.coltop_j] *= proc_control_B.atmp_o;
          proc_control_B.coltop_j++;
        }

        proc_control_B.aoffset_e = 0;
        while (proc_control_B.aoffset_e <= proc_control_B.knt_o - 1) {
          proc_control_B.s_b *= 1.0020841800044864E-292;
          proc_control_B.aoffset_e++;
        }

        proc_control_B.atmp_o = proc_control_B.s_b;
      } else {
        proc_control_B.tau_f[proc_control_B.j_iw] = (proc_control_B.s_b -
          proc_control_B.b_A_e[proc_control_B.coffset_k1]) / proc_control_B.s_b;
        proc_control_B.atmp_o = 1.0 /
          (proc_control_B.b_A_e[proc_control_B.coffset_k1] - proc_control_B.s_b);
        proc_control_B.knt_o = (proc_control_B.coffset_k1 - proc_control_B.j_iw)
          + 20;
        proc_control_B.aoffset_e = proc_control_B.coffset_k1 + 1;
        while (proc_control_B.aoffset_e + 1 <= proc_control_B.knt_o) {
          proc_control_B.b_A_e[proc_control_B.aoffset_e] *=
            proc_control_B.atmp_o;
          proc_control_B.aoffset_e++;
        }

        proc_control_B.atmp_o = proc_control_B.s_b;
      }
    }

    proc_control_B.b_A_e[proc_control_B.coffset_k1] = proc_control_B.atmp_o;
    if (proc_control_B.j_iw + 1 < 7) {
      proc_control_B.s_b = proc_control_B.b_A_e[proc_control_B.coffset_k1];
      proc_control_B.b_A_e[proc_control_B.coffset_k1] = 1.0;
      if (proc_control_B.tau_f[proc_control_B.j_iw] != 0.0) {
        boolean_T exitg2;
        proc_control_B.knt_o = 20 - proc_control_B.j_iw;
        proc_control_B.aoffset_e = (proc_control_B.coffset_k1 -
          proc_control_B.j_iw) + 19;
        while ((proc_control_B.knt_o > 0) &&
               (proc_control_B.b_A_e[proc_control_B.aoffset_e] == 0.0)) {
          proc_control_B.knt_o--;
          proc_control_B.aoffset_e--;
        }

        proc_control_B.aoffset_e = 6 - proc_control_B.j_iw;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.aoffset_e > 0)) {
          int32_T exitg1;
          proc_control_B.coltop_j = ((proc_control_B.aoffset_e - 1) * 20 +
            proc_control_B.coffset_k1) + 20;
          proc_control_B.ia_k = proc_control_B.coltop_j;
          do {
            exitg1 = 0;
            if (proc_control_B.ia_k + 1 <= proc_control_B.coltop_j +
                proc_control_B.knt_o) {
              if (proc_control_B.b_A_e[proc_control_B.ia_k] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.ia_k++;
              }
            } else {
              proc_control_B.aoffset_e--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt_o = 0;
        proc_control_B.aoffset_e = 0;
      }

      if (proc_control_B.knt_o > 0) {
        xgemv_AUXWxjLv(proc_control_B.knt_o, proc_control_B.aoffset_e,
                       proc_control_B.b_A_e, proc_control_B.coffset_k1 + 21,
                       proc_control_B.b_A_e, proc_control_B.coffset_k1 + 1,
                       proc_control_B.work_a);
        proc_control_xgerc_aQMWzodX(proc_control_B.knt_o,
          proc_control_B.aoffset_e, -proc_control_B.tau_f[proc_control_B.j_iw],
          proc_control_B.coffset_k1 + 1, proc_control_B.work_a,
          proc_control_B.b_A_e, proc_control_B.coffset_k1 + 21);
      }

      proc_control_B.b_A_e[proc_control_B.coffset_k1] = proc_control_B.s_b;
    }
  }

  for (proc_control_B.j_iw = 0; proc_control_B.j_iw < 7; proc_control_B.j_iw++)
  {
    proc_control_B.coffset_k1 = 0;
    while (proc_control_B.coffset_k1 <= proc_control_B.j_iw) {
      proc_control_B.R[proc_control_B.coffset_k1 + 7 * proc_control_B.j_iw] =
        proc_control_B.b_A_e[20 * proc_control_B.j_iw +
        proc_control_B.coffset_k1];
      proc_control_B.coffset_k1++;
    }

    proc_control_B.coffset_k1 = proc_control_B.j_iw + 1;
    while (proc_control_B.coffset_k1 + 1 < 8) {
      proc_control_B.R[proc_control_B.coffset_k1 + 7 * proc_control_B.j_iw] =
        0.0;
      proc_control_B.coffset_k1++;
    }
  }

  proc_control_B.j_iw = 0;
  for (proc_control_B.coffset_k1 = 0; proc_control_B.coffset_k1 < 7;
       proc_control_B.coffset_k1++) {
    proc_control_B.knt_o = 0;
    for (proc_control_B.coltop_j = 0; proc_control_B.coltop_j < 7;
         proc_control_B.coltop_j++) {
      b_S[proc_control_B.coltop_j + proc_control_B.j_iw] =
        proc_control_B.R[proc_control_B.knt_o + proc_control_B.coffset_k1];
      proc_control_B.knt_o += 7;
    }

    proc_control_B.j_iw += 7;
  }
}

void proc_control::proc_control_copydigits_p(const char_T s1_data[], const
  int32_T s1_size[2], int32_T idx, const char_T s_data[], int32_T k, int32_T n,
  boolean_T allowpoint, char_T b_s1_data[], int32_T b_s1_size[2], int32_T *b_idx,
  int32_T *b_k, boolean_T *success)
{
  boolean_T exitg1;
  *b_k = k;
  *b_idx = idx;
  b_s1_size[0] = 1;
  b_s1_size[1] = s1_size[1];
  proc_control_B.loop_ub_e = s1_size[1] - 1;
  if (proc_control_B.loop_ub_e >= 0) {
    std::memcpy(&b_s1_data[0], &s1_data[0], (proc_control_B.loop_ub_e + 1) *
                sizeof(char_T));
  }

  *success = (k <= n);
  proc_control_B.haspoint = false;
  exitg1 = false;
  while ((!exitg1) && ((*success) && (*b_k <= n))) {
    proc_control_B.c_hu = s_data[*b_k - 1];
    if ((proc_control_B.c_hu >= '0') && (proc_control_B.c_hu <= '9')) {
      b_s1_data[*b_idx - 1] = proc_control_B.c_hu;
      (*b_idx)++;
      (*b_k)++;
    } else if (proc_control_B.c_hu == '.') {
      if (allowpoint && (!proc_control_B.haspoint)) {
        b_s1_data[*b_idx - 1] = '.';
        (*b_idx)++;
        proc_control_B.haspoint = true;
      } else {
        *success = false;
      }

      (*b_k)++;
    } else if (proc_control_B.c_hu == ',') {
      (*b_k)++;
    } else {
      exitg1 = true;
    }
  }
}

void proc_control::proc_control_readfloat_p(const char_T s1_data[], const
  int32_T s1_size[2], int32_T idx, const char_T s_data[], int32_T k, int32_T n,
  boolean_T allowimag, char_T b_s1_data[], int32_T b_s1_size[2], int32_T *b_idx,
  int32_T *b_k, boolean_T *isimag, boolean_T *b_finite, real_T *nfv, boolean_T
  *foundsign, boolean_T *success)
{
  static const boolean_T tmp[128]{ false, false, false, false, false, false,
    false, false, false, true, true, true, true, true, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    true, true, true, true, true, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false };

  int32_T c_s1_size[2];
  int32_T c_s1_size_0[2];
  int32_T d_s1_size[2];
  int32_T b_k_0;
  int32_T c_idx;
  int32_T entryg2;
  char_T c_s1_data[403];
  char_T d_s1_data[403];
  char_T c_idx_0;
  boolean_T a__3;
  boolean_T exitg1;
  boolean_T isneg;
  *isimag = false;
  *b_finite = true;
  *nfv = 0.0;
  *b_k = k;
  c_idx = idx;
  c_s1_size[0] = 1;
  c_s1_size[1] = s1_size[1];
  b_k_0 = s1_size[1] - 1;
  if (b_k_0 >= 0) {
    std::memcpy(&c_s1_data[0], &s1_data[0], (b_k_0 + 1) * sizeof(char_T));
  }

  isneg = false;
  *foundsign = false;
  exitg1 = false;
  while ((!exitg1) && (*b_k <= n)) {
    c_idx_0 = s_data[*b_k - 1];
    if (c_idx_0 == '-') {
      isneg = !isneg;
      *foundsign = true;
      (*b_k)++;
    } else if (c_idx_0 == ',') {
      (*b_k)++;
    } else if (c_idx_0 == '+') {
      *foundsign = true;
      (*b_k)++;
    } else if (!tmp[static_cast<uint8_T>(c_idx_0) & 127]) {
      exitg1 = true;
    } else {
      (*b_k)++;
    }
  }

  *success = (*b_k <= n);
  if ((*success) && isneg) {
    if ((idx >= 2) && (s1_data[idx - 2] == '-')) {
      c_s1_data[idx - 2] = ' ';
    } else {
      c_s1_data[idx - 1] = '-';
      c_idx = idx + 1;
    }
  }

  b_s1_size[0] = 1;
  b_s1_size[1] = s1_size[1];
  b_k_0 = s1_size[1] - 1;
  if (b_k_0 >= 0) {
    std::memcpy(&b_s1_data[0], &c_s1_data[0], (b_k_0 + 1) * sizeof(char_T));
  }

  *b_idx = c_idx;
  if (*success) {
    char_T c_idx_1;
    char_T c_idx_2;
    boolean_T guard1{ false };

    boolean_T guard2{ false };

    guard1 = false;
    guard2 = false;
    if (*b_k <= n) {
      c_idx_0 = s_data[*b_k - 1];
      if (c_idx_0 == 'j') {
        guard2 = true;
      } else if (c_idx_0 == 'i') {
        if (*b_k >= n - 1) {
          guard2 = true;
        } else {
          b_k_0 = *b_k;
          c_idx_0 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_0 = s_data[b_k_0 - 1];
          }

          b_k_0++;
          c_idx_1 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_1 = s_data[b_k_0 - 1];
          }

          b_k_0++;
          c_idx_2 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_2 = s_data[b_k_0 - 1];
          }

          if ((((c_idx_0 == 'I') || (c_idx_0 == 'i')) && ((c_idx_1 == 'N') ||
                (c_idx_1 == 'n')) && ((c_idx_2 == 'F') || (c_idx_2 == 'f'))) ||
              (((c_idx_0 == 'N') || (c_idx_0 == 'n')) && ((c_idx_1 == 'A') ||
                (c_idx_1 == 'a')) && ((c_idx_2 == 'N') || (c_idx_2 == 'n')))) {
            guard1 = true;
          } else {
            guard2 = true;
          }
        }
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard2) {
      if (allowimag) {
        *isimag = true;
        (*b_k)++;
        exitg1 = false;
        while ((!exitg1) && (*b_k <= n)) {
          c_idx_0 = s_data[*b_k - 1];
          if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
              (c_idx_0 == ',')) {
            (*b_k)++;
          } else {
            exitg1 = true;
          }
        }

        if ((*b_k <= n) && (s_data[*b_k - 1] == '*')) {
          (*b_k)++;
          proc_control_readfloat_p(c_s1_data, c_s1_size, c_idx, s_data, *b_k, n,
            false, b_s1_data, b_s1_size, b_idx, b_k, &isneg, b_finite, nfv,
            &a__3, success);
        } else {
          b_s1_data[c_idx - 1] = '1';
          *b_idx = c_idx + 1;
        }
      } else {
        *success = false;
      }

      entryg2 = 1;
    }

    if (guard1) {
      b_k_0 = *b_k;
      c_idx_0 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_0 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      c_idx_1 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_1 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      c_idx_2 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_2 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      if (((c_idx_0 == 'I') || (c_idx_0 == 'i')) && ((c_idx_1 == 'N') ||
           (c_idx_1 == 'n')) && ((c_idx_2 == 'F') || (c_idx_2 == 'f'))) {
        *b_finite = false;
        *nfv = (rtInf);
      } else if (((c_idx_0 == 'N') || (c_idx_0 == 'n')) && ((c_idx_1 == 'A') ||
                  (c_idx_1 == 'a')) && ((c_idx_2 == 'N') || (c_idx_2 == 'n'))) {
        *b_finite = false;
        *nfv = (rtNaN);
      } else {
        b_k_0 = *b_k;
      }

      *b_k = b_k_0;
      if (*b_finite) {
        proc_control_copydigits_p(c_s1_data, c_s1_size, c_idx, s_data, b_k_0, n,
          true, d_s1_data, d_s1_size, b_idx, b_k, success);
        b_s1_size[0] = 1;
        b_s1_size[1] = d_s1_size[1];
        c_idx = d_s1_size[1] - 1;
        if (c_idx >= 0) {
          std::memcpy(&b_s1_data[0], &d_s1_data[0], (c_idx + 1) * sizeof(char_T));
        }

        if (*success) {
          c_s1_size[1] = d_s1_size[1];
          if (c_idx >= 0) {
            std::memcpy(&c_s1_data[0], &d_s1_data[0], (c_idx + 1) * sizeof
                        (char_T));
          }

          if (*b_k <= n) {
            c_idx_0 = s_data[*b_k - 1];
            if ((c_idx_0 == 'E') || (c_idx_0 == 'e')) {
              int32_T loop_ub;
              c_s1_data[*b_idx - 1] = 'e';
              c_idx = *b_idx - 1;
              b_k_0 = *b_k;
              while ((b_k_0 + 1 <= n) && (s_data[b_k_0] == ',')) {
                b_k_0++;
              }

              if (b_k_0 + 1 <= n) {
                c_idx_0 = s_data[b_k_0];
                if (c_idx_0 == '-') {
                  c_s1_data[*b_idx] = '-';
                  c_idx = *b_idx;
                  b_k_0++;
                } else if (c_idx_0 == '+') {
                  b_k_0++;
                }
              }

              c_s1_size_0[0] = 1;
              c_s1_size_0[1] = d_s1_size[1];
              loop_ub = d_s1_size[1] - 1;
              if (loop_ub >= 0) {
                std::memcpy(&d_s1_data[0], &c_s1_data[0], (loop_ub + 1) * sizeof
                            (char_T));
              }

              proc_control_copydigits_p(d_s1_data, c_s1_size_0, c_idx + 2,
                s_data, b_k_0 + 1, n, false, c_s1_data, c_s1_size, b_idx, b_k,
                &isneg);
              if (isneg && (*b_k > b_k_0 + 1)) {
              } else {
                *success = false;
              }
            }
          }

          b_s1_size[0] = 1;
          b_s1_size[1] = c_s1_size[1];
          b_k_0 = c_s1_size[1] - 1;
          if (b_k_0 >= 0) {
            std::memcpy(&b_s1_data[0], &c_s1_data[0], (b_k_0 + 1) * sizeof
                        (char_T));
          }
        }
      } else if ((c_idx >= 2) && (c_s1_data[c_idx - 2] == '-')) {
        *b_idx = c_idx - 1;
        b_s1_data[c_idx - 2] = ' ';
        *nfv = -*nfv;
      }

      exitg1 = false;
      while ((!exitg1) && (*b_k <= n)) {
        c_idx_0 = s_data[*b_k - 1];
        if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
            (c_idx_0 == ',')) {
          (*b_k)++;
        } else {
          exitg1 = true;
        }
      }

      if ((*b_k <= n) && (s_data[*b_k - 1] == '*')) {
        (*b_k)++;
        exitg1 = false;
        while ((!exitg1) && (*b_k <= n)) {
          c_idx_0 = s_data[*b_k - 1];
          if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
              (c_idx_0 == ',')) {
            (*b_k)++;
          } else {
            exitg1 = true;
          }
        }
      }

      if (*b_k <= n) {
        c_idx_0 = s_data[*b_k - 1];
        if ((c_idx_0 == 'i') || (c_idx_0 == 'j')) {
          (*b_k)++;
          *isimag = true;
        }
      }

      entryg2 = 0;
    }

    int32_T exitg3;
    do {
      exitg3 = 0;
      if (entryg2 == 0) {
      } else {
        entryg2 = 0;
      }

      if (*b_k <= n) {
        c_idx_0 = s_data[*b_k - 1];
        if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
            (c_idx_0 == ',')) {
          (*b_k)++;
        } else {
          exitg3 = 1;
        }
      } else {
        exitg3 = 1;
      }
    } while (exitg3 == 0);
  }
}

void proc_control::proc_control_readfloat_pr3(const char_T s1_data[], const
  int32_T s1_size[2], int32_T idx, const char_T s_data[], int32_T k, int32_T n,
  boolean_T allowimag, char_T b_s1_data[], int32_T b_s1_size[2], int32_T *b_idx,
  int32_T *b_k, boolean_T *isimag, boolean_T *b_finite, real_T *nfv, boolean_T
  *foundsign, boolean_T *success)
{
  static const boolean_T tmp[128]{ false, false, false, false, false, false,
    false, false, false, true, true, true, true, true, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    true, true, true, true, true, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false };

  int32_T c_s1_size[2];
  int32_T c_s1_size_0[2];
  int32_T d_s1_size[2];
  int32_T b_k_0;
  int32_T c_idx;
  int32_T entryg2;
  char_T c_s1_data[131];
  char_T d_s1_data[131];
  char_T c_idx_0;
  boolean_T a__3;
  boolean_T exitg1;
  boolean_T isneg;
  *isimag = false;
  *b_finite = true;
  *nfv = 0.0;
  *b_k = k;
  c_idx = idx;
  c_s1_size[0] = 1;
  c_s1_size[1] = s1_size[1];
  b_k_0 = s1_size[1] - 1;
  if (b_k_0 >= 0) {
    std::memcpy(&c_s1_data[0], &s1_data[0], (b_k_0 + 1) * sizeof(char_T));
  }

  isneg = false;
  *foundsign = false;
  exitg1 = false;
  while ((!exitg1) && (*b_k <= n)) {
    c_idx_0 = s_data[*b_k - 1];
    if (c_idx_0 == '-') {
      isneg = !isneg;
      *foundsign = true;
      (*b_k)++;
    } else if (c_idx_0 == ',') {
      (*b_k)++;
    } else if (c_idx_0 == '+') {
      *foundsign = true;
      (*b_k)++;
    } else if (!tmp[static_cast<uint8_T>(c_idx_0) & 127]) {
      exitg1 = true;
    } else {
      (*b_k)++;
    }
  }

  *success = (*b_k <= n);
  if ((*success) && isneg) {
    if ((idx >= 2) && (s1_data[idx - 2] == '-')) {
      c_s1_data[idx - 2] = ' ';
    } else {
      c_s1_data[idx - 1] = '-';
      c_idx = idx + 1;
    }
  }

  b_s1_size[0] = 1;
  b_s1_size[1] = s1_size[1];
  b_k_0 = s1_size[1] - 1;
  if (b_k_0 >= 0) {
    std::memcpy(&b_s1_data[0], &c_s1_data[0], (b_k_0 + 1) * sizeof(char_T));
  }

  *b_idx = c_idx;
  if (*success) {
    char_T c_idx_1;
    char_T c_idx_2;
    boolean_T guard1{ false };

    boolean_T guard2{ false };

    guard1 = false;
    guard2 = false;
    if (*b_k <= n) {
      c_idx_0 = s_data[*b_k - 1];
      if (c_idx_0 == 'j') {
        guard2 = true;
      } else if (c_idx_0 == 'i') {
        if (*b_k >= n - 1) {
          guard2 = true;
        } else {
          b_k_0 = *b_k;
          c_idx_0 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_0 = s_data[b_k_0 - 1];
          }

          b_k_0++;
          c_idx_1 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_1 = s_data[b_k_0 - 1];
          }

          b_k_0++;
          c_idx_2 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_2 = s_data[b_k_0 - 1];
          }

          if ((((c_idx_0 == 'I') || (c_idx_0 == 'i')) && ((c_idx_1 == 'N') ||
                (c_idx_1 == 'n')) && ((c_idx_2 == 'F') || (c_idx_2 == 'f'))) ||
              (((c_idx_0 == 'N') || (c_idx_0 == 'n')) && ((c_idx_1 == 'A') ||
                (c_idx_1 == 'a')) && ((c_idx_2 == 'N') || (c_idx_2 == 'n')))) {
            guard1 = true;
          } else {
            guard2 = true;
          }
        }
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard2) {
      if (allowimag) {
        *isimag = true;
        (*b_k)++;
        exitg1 = false;
        while ((!exitg1) && (*b_k <= n)) {
          c_idx_0 = s_data[*b_k - 1];
          if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
              (c_idx_0 == ',')) {
            (*b_k)++;
          } else {
            exitg1 = true;
          }
        }

        if ((*b_k <= n) && (s_data[*b_k - 1] == '*')) {
          (*b_k)++;
          proc_control_readfloat_pr3(c_s1_data, c_s1_size, c_idx, s_data, *b_k,
            n, false, b_s1_data, b_s1_size, b_idx, b_k, &isneg, b_finite, nfv,
            &a__3, success);
        } else {
          b_s1_data[c_idx - 1] = '1';
          *b_idx = c_idx + 1;
        }
      } else {
        *success = false;
      }

      entryg2 = 1;
    }

    if (guard1) {
      b_k_0 = *b_k;
      c_idx_0 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_0 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      c_idx_1 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_1 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      c_idx_2 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_2 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      if (((c_idx_0 == 'I') || (c_idx_0 == 'i')) && ((c_idx_1 == 'N') ||
           (c_idx_1 == 'n')) && ((c_idx_2 == 'F') || (c_idx_2 == 'f'))) {
        *b_finite = false;
        *nfv = (rtInf);
      } else if (((c_idx_0 == 'N') || (c_idx_0 == 'n')) && ((c_idx_1 == 'A') ||
                  (c_idx_1 == 'a')) && ((c_idx_2 == 'N') || (c_idx_2 == 'n'))) {
        *b_finite = false;
        *nfv = (rtNaN);
      } else {
        b_k_0 = *b_k;
      }

      *b_k = b_k_0;
      if (*b_finite) {
        proc_control_copydigits_p(c_s1_data, c_s1_size, c_idx, s_data, b_k_0, n,
          true, d_s1_data, d_s1_size, b_idx, b_k, success);
        b_s1_size[0] = 1;
        b_s1_size[1] = d_s1_size[1];
        c_idx = d_s1_size[1] - 1;
        if (c_idx >= 0) {
          std::memcpy(&b_s1_data[0], &d_s1_data[0], (c_idx + 1) * sizeof(char_T));
        }

        if (*success) {
          c_s1_size[1] = d_s1_size[1];
          if (c_idx >= 0) {
            std::memcpy(&c_s1_data[0], &d_s1_data[0], (c_idx + 1) * sizeof
                        (char_T));
          }

          if (*b_k <= n) {
            c_idx_0 = s_data[*b_k - 1];
            if ((c_idx_0 == 'E') || (c_idx_0 == 'e')) {
              int32_T loop_ub;
              c_s1_data[*b_idx - 1] = 'e';
              c_idx = *b_idx - 1;
              b_k_0 = *b_k;
              while ((b_k_0 + 1 <= n) && (s_data[b_k_0] == ',')) {
                b_k_0++;
              }

              if (b_k_0 + 1 <= n) {
                c_idx_0 = s_data[b_k_0];
                if (c_idx_0 == '-') {
                  c_s1_data[*b_idx] = '-';
                  c_idx = *b_idx;
                  b_k_0++;
                } else if (c_idx_0 == '+') {
                  b_k_0++;
                }
              }

              c_s1_size_0[0] = 1;
              c_s1_size_0[1] = d_s1_size[1];
              loop_ub = d_s1_size[1] - 1;
              if (loop_ub >= 0) {
                std::memcpy(&d_s1_data[0], &c_s1_data[0], (loop_ub + 1) * sizeof
                            (char_T));
              }

              proc_control_copydigits_p(d_s1_data, c_s1_size_0, c_idx + 2,
                s_data, b_k_0 + 1, n, false, c_s1_data, c_s1_size, b_idx, b_k,
                &isneg);
              if (isneg && (*b_k > b_k_0 + 1)) {
              } else {
                *success = false;
              }
            }
          }

          b_s1_size[0] = 1;
          b_s1_size[1] = c_s1_size[1];
          b_k_0 = c_s1_size[1] - 1;
          if (b_k_0 >= 0) {
            std::memcpy(&b_s1_data[0], &c_s1_data[0], (b_k_0 + 1) * sizeof
                        (char_T));
          }
        }
      } else if ((c_idx >= 2) && (c_s1_data[c_idx - 2] == '-')) {
        *b_idx = c_idx - 1;
        b_s1_data[c_idx - 2] = ' ';
        *nfv = -*nfv;
      }

      exitg1 = false;
      while ((!exitg1) && (*b_k <= n)) {
        c_idx_0 = s_data[*b_k - 1];
        if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
            (c_idx_0 == ',')) {
          (*b_k)++;
        } else {
          exitg1 = true;
        }
      }

      if ((*b_k <= n) && (s_data[*b_k - 1] == '*')) {
        (*b_k)++;
        exitg1 = false;
        while ((!exitg1) && (*b_k <= n)) {
          c_idx_0 = s_data[*b_k - 1];
          if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
              (c_idx_0 == ',')) {
            (*b_k)++;
          } else {
            exitg1 = true;
          }
        }
      }

      if (*b_k <= n) {
        c_idx_0 = s_data[*b_k - 1];
        if ((c_idx_0 == 'i') || (c_idx_0 == 'j')) {
          (*b_k)++;
          *isimag = true;
        }
      }

      entryg2 = 0;
    }

    int32_T exitg3;
    do {
      exitg3 = 0;
      if (entryg2 == 0) {
      } else {
        entryg2 = 0;
      }

      if (*b_k <= n) {
        c_idx_0 = s_data[*b_k - 1];
        if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
            (c_idx_0 == ',')) {
          (*b_k)++;
        } else {
          exitg3 = 1;
        }
      } else {
        exitg3 = 1;
      }
    } while (exitg3 == 0);
  }
}

void proc_control::proc_control_readfloat_pr(const char_T s1_data[], const
  int32_T s1_size[2], int32_T idx, const char_T s_data[], int32_T k, int32_T n,
  boolean_T allowimag, char_T b_s1_data[], int32_T b_s1_size[2], int32_T *b_idx,
  int32_T *b_k, boolean_T *isimag, boolean_T *b_finite, real_T *nfv, boolean_T
  *foundsign, boolean_T *success)
{
  static const boolean_T tmp[128]{ false, false, false, false, false, false,
    false, false, false, true, true, true, true, true, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    true, true, true, true, true, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false };

  int32_T c_s1_size[2];
  int32_T c_s1_size_0[2];
  int32_T d_s1_size[2];
  int32_T b_k_0;
  int32_T c_idx;
  int32_T entryg2;
  char_T c_s1_data[67];
  char_T d_s1_data[67];
  char_T c_idx_0;
  boolean_T a__3;
  boolean_T exitg1;
  boolean_T isneg;
  *isimag = false;
  *b_finite = true;
  *nfv = 0.0;
  *b_k = k;
  c_idx = idx;
  c_s1_size[0] = 1;
  c_s1_size[1] = s1_size[1];
  b_k_0 = s1_size[1] - 1;
  if (b_k_0 >= 0) {
    std::memcpy(&c_s1_data[0], &s1_data[0], (b_k_0 + 1) * sizeof(char_T));
  }

  isneg = false;
  *foundsign = false;
  exitg1 = false;
  while ((!exitg1) && (*b_k <= n)) {
    c_idx_0 = s_data[*b_k - 1];
    if (c_idx_0 == '-') {
      isneg = !isneg;
      *foundsign = true;
      (*b_k)++;
    } else if (c_idx_0 == ',') {
      (*b_k)++;
    } else if (c_idx_0 == '+') {
      *foundsign = true;
      (*b_k)++;
    } else if (!tmp[static_cast<uint8_T>(c_idx_0) & 127]) {
      exitg1 = true;
    } else {
      (*b_k)++;
    }
  }

  *success = (*b_k <= n);
  if ((*success) && isneg) {
    if ((idx >= 2) && (s1_data[idx - 2] == '-')) {
      c_s1_data[idx - 2] = ' ';
    } else {
      c_s1_data[idx - 1] = '-';
      c_idx = idx + 1;
    }
  }

  b_s1_size[0] = 1;
  b_s1_size[1] = s1_size[1];
  b_k_0 = s1_size[1] - 1;
  if (b_k_0 >= 0) {
    std::memcpy(&b_s1_data[0], &c_s1_data[0], (b_k_0 + 1) * sizeof(char_T));
  }

  *b_idx = c_idx;
  if (*success) {
    char_T c_idx_1;
    char_T c_idx_2;
    boolean_T guard1{ false };

    boolean_T guard2{ false };

    guard1 = false;
    guard2 = false;
    if (*b_k <= n) {
      c_idx_0 = s_data[*b_k - 1];
      if (c_idx_0 == 'j') {
        guard2 = true;
      } else if (c_idx_0 == 'i') {
        if (*b_k >= n - 1) {
          guard2 = true;
        } else {
          b_k_0 = *b_k;
          c_idx_0 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_0 = s_data[b_k_0 - 1];
          }

          b_k_0++;
          c_idx_1 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_1 = s_data[b_k_0 - 1];
          }

          b_k_0++;
          c_idx_2 = '\x00';
          while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
            b_k_0++;
          }

          if (b_k_0 <= n) {
            c_idx_2 = s_data[b_k_0 - 1];
          }

          if ((((c_idx_0 == 'I') || (c_idx_0 == 'i')) && ((c_idx_1 == 'N') ||
                (c_idx_1 == 'n')) && ((c_idx_2 == 'F') || (c_idx_2 == 'f'))) ||
              (((c_idx_0 == 'N') || (c_idx_0 == 'n')) && ((c_idx_1 == 'A') ||
                (c_idx_1 == 'a')) && ((c_idx_2 == 'N') || (c_idx_2 == 'n')))) {
            guard1 = true;
          } else {
            guard2 = true;
          }
        }
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard2) {
      if (allowimag) {
        *isimag = true;
        (*b_k)++;
        exitg1 = false;
        while ((!exitg1) && (*b_k <= n)) {
          c_idx_0 = s_data[*b_k - 1];
          if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
              (c_idx_0 == ',')) {
            (*b_k)++;
          } else {
            exitg1 = true;
          }
        }

        if ((*b_k <= n) && (s_data[*b_k - 1] == '*')) {
          (*b_k)++;
          proc_control_readfloat_pr(c_s1_data, c_s1_size, c_idx, s_data, *b_k, n,
            false, b_s1_data, b_s1_size, b_idx, b_k, &isneg, b_finite, nfv,
            &a__3, success);
        } else {
          b_s1_data[c_idx - 1] = '1';
          *b_idx = c_idx + 1;
        }
      } else {
        *success = false;
      }

      entryg2 = 1;
    }

    if (guard1) {
      b_k_0 = *b_k;
      c_idx_0 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_0 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      c_idx_1 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_1 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      c_idx_2 = '\x00';
      while ((b_k_0 <= n) && (s_data[b_k_0 - 1] == ',')) {
        b_k_0++;
      }

      if (b_k_0 <= n) {
        c_idx_2 = s_data[b_k_0 - 1];
      }

      b_k_0++;
      if (((c_idx_0 == 'I') || (c_idx_0 == 'i')) && ((c_idx_1 == 'N') ||
           (c_idx_1 == 'n')) && ((c_idx_2 == 'F') || (c_idx_2 == 'f'))) {
        *b_finite = false;
        *nfv = (rtInf);
      } else if (((c_idx_0 == 'N') || (c_idx_0 == 'n')) && ((c_idx_1 == 'A') ||
                  (c_idx_1 == 'a')) && ((c_idx_2 == 'N') || (c_idx_2 == 'n'))) {
        *b_finite = false;
        *nfv = (rtNaN);
      } else {
        b_k_0 = *b_k;
      }

      *b_k = b_k_0;
      if (*b_finite) {
        proc_control_copydigits_p(c_s1_data, c_s1_size, c_idx, s_data, b_k_0, n,
          true, d_s1_data, d_s1_size, b_idx, b_k, success);
        b_s1_size[0] = 1;
        b_s1_size[1] = d_s1_size[1];
        c_idx = d_s1_size[1] - 1;
        if (c_idx >= 0) {
          std::memcpy(&b_s1_data[0], &d_s1_data[0], (c_idx + 1) * sizeof(char_T));
        }

        if (*success) {
          c_s1_size[1] = d_s1_size[1];
          if (c_idx >= 0) {
            std::memcpy(&c_s1_data[0], &d_s1_data[0], (c_idx + 1) * sizeof
                        (char_T));
          }

          if (*b_k <= n) {
            c_idx_0 = s_data[*b_k - 1];
            if ((c_idx_0 == 'E') || (c_idx_0 == 'e')) {
              int32_T loop_ub;
              c_s1_data[*b_idx - 1] = 'e';
              c_idx = *b_idx - 1;
              b_k_0 = *b_k;
              while ((b_k_0 + 1 <= n) && (s_data[b_k_0] == ',')) {
                b_k_0++;
              }

              if (b_k_0 + 1 <= n) {
                c_idx_0 = s_data[b_k_0];
                if (c_idx_0 == '-') {
                  c_s1_data[*b_idx] = '-';
                  c_idx = *b_idx;
                  b_k_0++;
                } else if (c_idx_0 == '+') {
                  b_k_0++;
                }
              }

              c_s1_size_0[0] = 1;
              c_s1_size_0[1] = d_s1_size[1];
              loop_ub = d_s1_size[1] - 1;
              if (loop_ub >= 0) {
                std::memcpy(&d_s1_data[0], &c_s1_data[0], (loop_ub + 1) * sizeof
                            (char_T));
              }

              proc_control_copydigits_p(d_s1_data, c_s1_size_0, c_idx + 2,
                s_data, b_k_0 + 1, n, false, c_s1_data, c_s1_size, b_idx, b_k,
                &isneg);
              if (isneg && (*b_k > b_k_0 + 1)) {
              } else {
                *success = false;
              }
            }
          }

          b_s1_size[0] = 1;
          b_s1_size[1] = c_s1_size[1];
          b_k_0 = c_s1_size[1] - 1;
          if (b_k_0 >= 0) {
            std::memcpy(&b_s1_data[0], &c_s1_data[0], (b_k_0 + 1) * sizeof
                        (char_T));
          }
        }
      } else if ((c_idx >= 2) && (c_s1_data[c_idx - 2] == '-')) {
        *b_idx = c_idx - 1;
        b_s1_data[c_idx - 2] = ' ';
        *nfv = -*nfv;
      }

      exitg1 = false;
      while ((!exitg1) && (*b_k <= n)) {
        c_idx_0 = s_data[*b_k - 1];
        if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
            (c_idx_0 == ',')) {
          (*b_k)++;
        } else {
          exitg1 = true;
        }
      }

      if ((*b_k <= n) && (s_data[*b_k - 1] == '*')) {
        (*b_k)++;
        exitg1 = false;
        while ((!exitg1) && (*b_k <= n)) {
          c_idx_0 = s_data[*b_k - 1];
          if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
              (c_idx_0 == ',')) {
            (*b_k)++;
          } else {
            exitg1 = true;
          }
        }
      }

      if (*b_k <= n) {
        c_idx_0 = s_data[*b_k - 1];
        if ((c_idx_0 == 'i') || (c_idx_0 == 'j')) {
          (*b_k)++;
          *isimag = true;
        }
      }

      entryg2 = 0;
    }

    int32_T exitg3;
    do {
      exitg3 = 0;
      if (entryg2 == 0) {
      } else {
        entryg2 = 0;
      }

      if (*b_k <= n) {
        c_idx_0 = s_data[*b_k - 1];
        if (tmp[static_cast<uint8_T>(c_idx_0) & 127] || (c_idx_0 == '\x00') ||
            (c_idx_0 == ',')) {
          (*b_k)++;
        } else {
          exitg3 = 1;
        }
      } else {
        exitg3 = 1;
      }
    } while (exitg3 == 0);
  }
}

// Model step function
void proc_control::step()
{
  static const real_T b_B[6930]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020445512957285371, -0.0014603487861040304, -4.9246767934457634E-6,
    0.0052868326178782156, 0.0020754199270452173, -0.015163628780498446, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020430568849590363, 0.0014846744549160563, 7.0936716057342316E-6,
    -0.0051391900270571448, 0.0021227702215873057, -0.015228232305159621, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021016480453829815, -0.0014857887933183286, -4.7070151263154063E-6,
    0.0050961555194273559, 0.0020754929921346357, 0.015462266265499226, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021001536346134803, 0.0014592344477017574, 7.3113332728645879E-6,
    -0.0053298671255080053, 0.0021228432866767255, 0.015397662740838059, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00030616429069496923, -0.00048221414518065164, -0.0020535983066627917,
    -0.022397032944284023, 0.011382823490747531, 4.5300466257935429E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00030623942171196546, 0.00047731536664842887, 0.002066526813039662,
    0.022172426283366305, 0.011387616330349713, -0.00015666644814812009, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120834, 0.00050257013436989741, -0.0021189752999033816,
    0.023341150699844011, -0.011594289336350715, -4.8538698886608567E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572547, -0.00049767135583767474, 0.0021060467935265117,
    -0.023116544038926289, -0.011176150484746518, 0.00015990468077679311, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020445512957285371,
    -0.0014603487861040304, -4.9246767934457634E-6, 0.0052868326178782156,
    0.0020754199270452173, -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020430568849590363,
    0.0014846744549160563, 7.0936716057342316E-6, -0.0051391900270571448,
    0.0021227702215873057, -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021016480453829815,
    -0.0014857887933183286, -4.7070151263154063E-6, 0.0050961555194273559,
    0.0020754929921346357, 0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021001536346134803,
    0.0014592344477017574, 7.3113332728645879E-6, -0.0053298671255080053,
    0.0021228432866767255, 0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00030616429069496923,
    -0.00048221414518065164, -0.0020535983066627917, -0.022397032944284023,
    0.011382823490747531, 4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00030623942171196546,
    0.00047731536664842887, 0.002066526813039662, 0.022172426283366305,
    0.011387616330349713, -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834,
    0.00050257013436989741, -0.0021189752999033816, 0.023341150699844011,
    -0.011594289336350715, -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547,
    -0.00049767135583767474, 0.0021060467935265117, -0.023116544038926289,
    -0.011176150484746518, 0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030616429069496923, -0.00048221414518065164,
    -0.0020535983066627917, -0.022397032944284023, 0.011382823490747531,
    4.5300466257935429E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.00030623942171196546, 0.00047731536664842887,
    0.002066526813039662, 0.022172426283366305, 0.011387616330349713,
    -0.00015666644814812009, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00031185892138120834, 0.00050257013436989741,
    -0.0021189752999033816, 0.023341150699844011, -0.011594289336350715,
    -4.8538698886608567E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.00030054479102572547, -0.00049767135583767474,
    0.0021060467935265117, -0.023116544038926289, -0.011176150484746518,
    0.00015990468077679311, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T e_0[4851]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -4.6042543754832843E-6, -0.0022720436034725897, 0.00013605399495041681, 0.0,
    0.94789999991422, 0.0002323165737535551, 0.00085021850252945308,
    -7.4644574418929129E-5, -0.042372304854011958, 0.0024338870206531572,
    -1.8831321574108633, 0.0081315634991630855, 0.031843900678722045, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -4.6042543754832843E-6,
    -0.0022720436034725897, 0.00013605399495041681, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T q[4746]{ -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -0.00013605399495041681, -0.0, -0.94789999991422,
    -0.0002323165737535551, -0.00085021850252945308, 7.4644574418929129E-5,
    0.042372304854011958, -0.0024338870206531572, 1.8831321574108633,
    -0.0081315634991630855, -0.031843900678722045, -0.00043991587755701011, -0.0,
    -0.828274284000475, -0.00071829654764050618, -0.0029829453882918144,
    6.2742313041972989E-5, 0.068633766567946786, -0.0034563974704851,
    2.7676057047313587, -0.010552632650718255, -0.051628892588367392,
    -0.0007978607868532958, -0.0, -0.68189638494130023, -0.0012286665032447549,
    -0.0058496233936728382, -3.1342376034699027E-6, 0.083007916472729,
    -0.003589951713511725, 3.0036280976220535, -0.0094211711536435639,
    -0.0616105459026711, -0.0011410576782314458, -0.0, -0.53434951158433575,
    -0.0016286283183268829, -0.0090217493567927957, -9.6497485535297956E-5,
    0.089026322360653623, -0.0032141564747645412, 2.8508353066487384,
    -0.0063671417100739369, -0.064250485451778444, -0.0014325731407650154, -0.0,
    -0.4001975245224601, -0.0018530175296307702, -0.012190593430831252,
    -0.00019695320686910947, 0.08949246863092182, -0.0025917690009131036,
    2.4929537206563306, -0.0025585879149516767, -0.061833129757380131,
    -0.0016569902495300272, -0.0, -0.28639136612488875, -0.0018851780974144141,
    -0.015153038865694137, -0.00028975242367587238, 0.0865307824004589,
    -0.0018944998662235905, 2.0533176075220294, 0.0012185274404540422,
    -0.0562799951344453, -0.0018124939712245017, -0.0, -0.19491893240955638,
    -0.0017398890238911867, -0.017791541512902194, -0.0003650937143041076,
    0.081679081417085145, -0.0012262657643497266, 1.60939087711851,
    0.0044797329146593744, -0.049090033389302151, -0.0019051041979649195, -0.0,
    -0.12477500748160668, -0.0014501747445117849, -0.020053144545853444,
    -0.00041731907030702418, 0.075996736268228879, -0.00064278595634549573,
    1.2053422929471296, 0.0069681642442896551, -0.04135434153915727,
    -0.00194467159446681, -0.0, -0.073359348722708634, -0.0010575604252408852,
    -0.021930316193073226, -0.00044409726735761073, 0.07017139792438172,
    -0.00016724585586822986, 0.86232253270031922, 0.0085910139945617175,
    -0.033809555227781521, -0.0019422508947259365, -0.0, -0.037418484576088755,
    -0.0006052190463509843, -0.023444915627093128, -0.00044565246726613745,
    0.064614740447960159, 0.00019775366639505814, 0.58646352157906889,
    0.0093674482180796919, -0.026906527742491044, 0.0, 0.94789999991422,
    0.0002323165737535551, 0.00085021850252945308, -7.4644574418929129E-5,
    -0.042372304854011958, 0.0024338870206531572, -1.8831321574108633,
    0.0081315634991630855, 0.031843900678722045, 0.0, 0.828274284000475,
    0.00071829654764050618, 0.0029829453882918144, -6.2742313041972989E-5,
    -0.068633766567946786, 0.0034563974704851, -2.7676057047313587,
    0.010552632650718255, 0.051628892588367392, 0.0, 0.68189638494130023,
    0.0012286665032447549, 0.0058496233936728382, 3.1342376034699027E-6,
    -0.083007916472729, 0.003589951713511725, -3.0036280976220535,
    0.0094211711536435639, 0.0616105459026711, 0.0, 0.53434951158433575,
    0.0016286283183268829, 0.0090217493567927957, 9.6497485535297956E-5,
    -0.089026322360653623, 0.0032141564747645412, -2.8508353066487384,
    0.0063671417100739369, 0.064250485451778444, 0.0, 0.4001975245224601,
    0.0018530175296307702, 0.012190593430831252, 0.00019695320686910947,
    -0.08949246863092182, 0.0025917690009131036, -2.4929537206563306,
    0.0025585879149516767, 0.061833129757380131, 0.0, 0.28639136612488875,
    0.0018851780974144141, 0.015153038865694137, 0.00028975242367587238,
    -0.0865307824004589, 0.0018944998662235905, -2.0533176075220294,
    -0.0012185274404540422, 0.0562799951344453, 0.0, 0.19491893240955638,
    0.0017398890238911867, 0.017791541512902194, 0.0003650937143041076,
    -0.081679081417085145, 0.0012262657643497266, -1.60939087711851,
    -0.0044797329146593744, 0.049090033389302151, 0.0, 0.12477500748160668,
    0.0014501747445117849, 0.020053144545853444, 0.00041731907030702418,
    -0.075996736268228879, 0.00064278595634549573, -1.2053422929471296,
    -0.0069681642442896551, 0.04135434153915727, 0.0, 0.073359348722708634,
    0.0010575604252408852, 0.021930316193073226, 0.00044409726735761073,
    -0.07017139792438172, 0.00016724585586822986, -0.86232253270031922,
    -0.0085910139945617175, 0.033809555227781521, 0.0, 0.037418484576088755,
    0.0006052190463509843, 0.023444915627093128, 0.00044565246726613745,
    -0.064614740447960159, -0.00019775366639505814, -0.58646352157906889,
    -0.0093674482180796919, 0.026906527742491044, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.7393041473633992E-5,
    -0.0, -0.00022368763943092688, -0.97943363183036425, -0.0014929610497083712,
    -0.039186425137886907, -5.6614700144598219E-5, 0.00052789703364104388,
    -0.0078377521590508158, 0.80137776286231466, -0.056970805070725557,
    0.00010157607708522482, -0.0, -0.00069288992274880393, -0.92211339111192792,
    -0.00543690319059872, -0.073285774807074919, -4.6123839395337206E-5,
    0.00093583978277490387, -0.010204973422867381, 1.4679406075353214,
    -0.098330079431672449, 0.00021063569275170895, -0.0, -0.0011874247713899728,
    -0.83504975370190071, -0.011094759552566745, -0.10151242737070898,
    6.5054042471132486E-6, 0.0012261501164608831, -0.0091500321471800344,
    1.9901277003085569, -0.12581707960111752, 0.00034308538224961334, -0.0,
    -0.0015770310792981505, -0.72555251236862717, -0.017816474142573421,
    -0.12341988813173868, 8.0264143073424814E-5, 0.0014049447068710742,
    -0.0062288168520714558, 2.3654096906129842, -0.14117636261848396,
    0.00048821416801761788, -0.0, -0.0017980869265099082, -0.60089840920731241,
    -0.025039554537448942, -0.13887539377535754, 0.0001587056500972321,
    0.0014815086013838215, -0.0025623484843078975, 2.5974908015098235,
    -0.14616521878490271, 0.00063637010650355059, -0.0, -0.0018336500124171175,
    -0.46804262274960007, -0.032289457713019082, -0.14802510882141279,
    0.00022990541532277094, 0.0014676225862297067, 0.0010906382789437521,
    2.6953622560768005, -0.14254095855242194, 0.000779175137043072, -0.0,
    -0.0016972204487183174, -0.33338010549621289, -0.039178997027587086,
    -0.15125252723439681, 0.00028604097569601616, 0.0013768668571441959,
    0.0042590248614922041, 2.6722641036867576, -0.13203559714993138,
    0.00090967019280314434, -0.0, -0.0014201240320154255, -0.20255999629099947,
    -0.045406297008819312, -0.14913262935985513, 0.00032277752150717772,
    0.0012239270282170206, 0.0066900551015905444, 2.5446089159537975,
    -0.11632397297836967, 0.0010223921260931036, -0.0, -0.0010421382438367171,
    -0.08035378460975387, -0.050751090741705626, -0.14238418727481642,
    0.00033858449201523889, 0.0010239286366876476, 0.008289270206172249,
    2.330915529091973, -0.0969900191888171, 0.0011133865157176926, -0.0,
    -0.00060486059428951639, 0.029424345381619782, -0.0550693612167144,
    -0.13182237870724536, 0.000334062679490346, 0.00079182395248274045,
    0.0090709498678183224, 2.0507944495975985, -0.075494757610177043, 0.0,
    0.00022368763943092688, 0.97943363183036425, 0.0014929610497083712,
    0.039186425137886907, 5.6614700144598219E-5, -0.00052789703364104388,
    0.0078377521590508158, -0.80137776286231466, 0.056970805070725557, 0.0,
    0.00069288992274880393, 0.92211339111192792, 0.00543690319059872,
    0.073285774807074919, 4.6123839395337206E-5, -0.00093583978277490387,
    0.010204973422867381, -1.4679406075353214, 0.098330079431672449, 0.0,
    0.0011874247713899728, 0.83504975370190071, 0.011094759552566745,
    0.10151242737070898, -6.5054042471132486E-6, -0.0012261501164608831,
    0.0091500321471800344, -1.9901277003085569, 0.12581707960111752, 0.0,
    0.0015770310792981505, 0.72555251236862717, 0.017816474142573421,
    0.12341988813173868, -8.0264143073424814E-5, -0.0014049447068710742,
    0.0062288168520714558, -2.3654096906129842, 0.14117636261848396, 0.0,
    0.0017980869265099082, 0.60089840920731241, 0.025039554537448942,
    0.13887539377535754, -0.0001587056500972321, -0.0014815086013838215,
    0.0025623484843078975, -2.5974908015098235, 0.14616521878490271, 0.0,
    0.0018336500124171175, 0.46804262274960007, 0.032289457713019082,
    0.14802510882141279, -0.00022990541532277094, -0.0014676225862297067,
    -0.0010906382789437521, -2.6953622560768005, 0.14254095855242194, 0.0,
    0.0016972204487183174, 0.33338010549621289, 0.039178997027587086,
    0.15125252723439681, -0.00028604097569601616, -0.0013768668571441959,
    -0.0042590248614922041, -2.6722641036867576, 0.13203559714993138, 0.0,
    0.0014201240320154255, 0.20255999629099947, 0.045406297008819312,
    0.14913262935985513, -0.00032277752150717772, -0.0012239270282170206,
    -0.0066900551015905444, -2.5446089159537975, 0.11632397297836967, 0.0,
    0.0010421382438367171, 0.08035378460975387, 0.050751090741705626,
    0.14238418727481642, -0.00033858449201523889, -0.0010239286366876476,
    -0.008289270206172249, -2.330915529091973, 0.0969900191888171, 0.0,
    0.00060486059428951639, -0.029424345381619782, 0.0550693612167144,
    0.13182237870724536, -0.000334062679490346, -0.00079182395248274045,
    -0.0090709498678183224, -2.0507944495975985, 0.075494757610177043, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -4.698526643327685E-7, -0.0, 3.7822888752805087E-6,
    -0.00035289231485000289, 3.4189139533984093E-5, -0.95461902809957677,
    7.1100422694502463E-7, -8.9811567385581109E-6, 0.00013126902944982948,
    -0.013640927712662433, 0.0012950988615465717, -1.7147269904128773E-6, -0.0,
    1.1507673407768968E-5, -0.0013155663659935382, 0.00012285543303127417,
    -0.91135406143948428, 3.3163316882791257E-7, -1.5519561417705546E-5,
    0.00016502531726898071, -0.02437486627411839, 0.0021906279895870522,
    -3.4972112753480514E-6, -0.0, 1.9307665671200687E-5, -0.0027413219232082326,
    0.00024768220209586342, -0.87012380424921076, -6.8812811117453584E-7,
    -1.9763302213130122E-5, 0.00013982125919807825, -0.032169433587467634,
    0.002751745249648645, -5.5977294121393278E-6, -0.0, 2.498997904561869E-5,
    -0.0044849430478703725, 0.00039342983713991055, -0.83084483046096391,
    -1.9796506295754575E-6, -2.1918801185016628E-5, 8.4343468160018255E-5,
    -0.037113411718708571, 0.003036672947804085, -7.8197074306270982E-6, -0.0,
    2.7577534552949767E-5, -0.0064082900969058155, 0.00054762695322665067,
    -0.793432109991374, -3.2636836733291779E-6, -2.2237423184653563E-5,
    1.8765440426749996E-5, -0.039397727302456866, 0.00309809039554805,
    -9.9933900139764189E-6, -0.0, 2.6921553480488257E-5, -0.0083848942547339062,
    0.00070031450657208035, -0.75779967207486343, -4.3468217299391274E-6,
    -2.1001923672367668E-5, -4.3690464320354867E-5, -0.039294754138992867,
    0.002983898890566264, -1.1978309599851325E-5, -0.0, 2.3392946258553423E-5,
    -0.010303497261330055, 0.00084381691343032752, -0.72386135489367576,
    -5.1114348042188457E-6, -1.8513122731324463E-5, -9.5211988147830874E-5,
    -0.037136984758420775, 0.0027375673439149939, -1.3664452072861686E-5, -0.0,
    1.7647377061867561E-5, -0.01207052875767038, 0.00097252341176911846,
    -0.69153159412636034, -5.502545487094056E-6, -1.507723451236707E-5,
    -0.00013200584315001872, -0.033296009575319148, 0.0023982197708525069,
    -1.497220553904411E-5, -0.0, 1.0454783952044933E-5, -0.013611557377969874,
    0.0010826699647867736, -0.6607262078574051, -5.5139498958081136E-6,
    -1.099426428108596E-5, -0.00015311621421909297, -0.028162610037210684,
    0.0020005870008040919, -1.58512172573075E-5, -0.0, 2.58235105769498E-6,
    -0.014871788389995259, 0.0011721172939975261, -0.63136314118173154,
    -5.17499959191226E-6, -6.5478271176522308E-6, -0.00015946802271606813,
    -0.022128624315847615, 0.0015749128178946059, 0.0, -3.7822888752805087E-6,
    0.00035289231485000289, -3.4189139533984093E-5, 0.95461902809957677,
    -7.1100422694502463E-7, 8.9811567385581109E-6, -0.00013126902944982948,
    0.013640927712662433, -0.0012950988615465717, 0.0, -1.1507673407768968E-5,
    0.0013155663659935382, -0.00012285543303127417, 0.91135406143948428,
    -3.3163316882791257E-7, 1.5519561417705546E-5, -0.00016502531726898071,
    0.02437486627411839, -0.0021906279895870522, 0.0, -1.9307665671200687E-5,
    0.0027413219232082326, -0.00024768220209586342, 0.87012380424921076,
    6.8812811117453584E-7, 1.9763302213130122E-5, -0.00013982125919807825,
    0.032169433587467634, -0.002751745249648645, 0.0, -2.498997904561869E-5,
    0.0044849430478703725, -0.00039342983713991055, 0.83084483046096391,
    1.9796506295754575E-6, 2.1918801185016628E-5, -8.4343468160018255E-5,
    0.037113411718708571, -0.003036672947804085, 0.0, -2.7577534552949767E-5,
    0.0064082900969058155, -0.00054762695322665067, 0.793432109991374,
    3.2636836733291779E-6, 2.2237423184653563E-5, -1.8765440426749996E-5,
    0.039397727302456866, -0.00309809039554805, 0.0, -2.6921553480488257E-5,
    0.0083848942547339062, -0.00070031450657208035, 0.75779967207486343,
    4.3468217299391274E-6, 2.1001923672367668E-5, 4.3690464320354867E-5,
    0.039294754138992867, -0.002983898890566264, 0.0, -2.3392946258553423E-5,
    0.010303497261330055, -0.00084381691343032752, 0.72386135489367576,
    5.1114348042188457E-6, 1.8513122731324463E-5, 9.5211988147830874E-5,
    0.037136984758420775, -0.0027375673439149939, 0.0, -1.7647377061867561E-5,
    0.01207052875767038, -0.00097252341176911846, 0.69153159412636034,
    5.502545487094056E-6, 1.507723451236707E-5, 0.00013200584315001872,
    0.033296009575319148, -0.0023982197708525069, 0.0, -1.0454783952044933E-5,
    0.013611557377969874, -0.0010826699647867736, 0.6607262078574051,
    5.5139498958081136E-6, 1.099426428108596E-5, 0.00015311621421909297,
    0.028162610037210684, -0.0020005870008040919, 0.0, -2.58235105769498E-6,
    0.014871788389995259, -0.0011721172939975261, 0.63136314118173154,
    5.17499959191226E-6, 6.5478271176522308E-6, 0.00015946802271606813,
    0.022128624315847615, -0.0015749128178946059, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.3215726369779438E-6,
    -0.0, 0.0008890798672821649, -3.9634420482915878E-6, -1.8779150781494828E-5,
    9.562169117717856E-7, -0.95478880828256985, -4.1141673422749054E-5,
    0.0318401126387842, -0.00013737224957398742, -0.00070099650111093514,
    -7.3749882091488885E-6, -0.0, 0.0028798974838508042, -1.2031552401106183E-5,
    -6.5541259101970566E-5, 4.8937143347579689E-7, -0.91186205573102064,
    -5.6569476786228757E-5, 0.04536253292905823, -0.00017200519888355798,
    -0.0011287940711174952, -1.3114491684476178E-5, -0.0, 0.0052334722224648142,
    -2.014283052930879E-5, -0.00012809304656000972, -8.0572652135228347E-7,
    -0.87104654382409041, -5.6272387520390857E-5, 0.047311950839458591,
    -0.00014500909869676951, -0.001342599506139663, -1.83453639080477E-5, -0.0,
    0.0075008822299020492, -2.6016006319195021E-5, -0.00019720530542317128,
    -2.4591635624240212E-6, -0.83218851749958367, -4.7375846559661015E-5,
    0.042598626592462448, -8.6719294425031889E-5, -0.0014003980563196165,
    -2.2465939196138063E-5, -0.0, 0.0094397080120113015, -2.8650001241530735E-5,
    -0.00026638512436625997, -4.121569324240198E-6, -0.79515340435959636,
    -3.4709382880706838E-5, 0.0346286857523732, -1.8297222644219323E-5,
    -0.0013530038284554769, -2.5265426660065388E-5, -0.0, 0.010947156098591046,
    -2.7909176085084102E-5, -0.00033144457013503203, -5.551978767944541E-6,
    -0.75982412569723878, -2.1346028683459181E-5, 0.0256340556623987,
    4.65077577251771E-5, -0.0012416072499104723, -2.6772519265671071E-5, -0.0,
    0.012008978947283578, -2.4195712839857462E-5, -0.00039000535890606141,
    -6.6018196083699552E-6, -0.72609874903249794, -9.0743971089963886E-6,
    0.016970752909635903, 9.9662858362088664E-5, -0.0010974787977650574,
    -2.7147117444576643E-5, -0.0, 0.012662186267626626, -1.8202379750182139E-5,
    -0.00044102211346605606, -7.1976650371651611E-6, -0.6938879802645469,
    1.2122638267861729E-6, 0.0093708626981430839, 0.00013734580510611549,
    -0.00094287838447155666, -2.6606724261902655E-5, -0.0, 0.012969100796935945,
    -1.0734651929982677E-5, -0.00048436730788981974, -7.3244316656170674E-6,
    -0.66311279263693523, 9.2109903987888745E-6, 0.0031443429792448185,
    0.0001586810986538784, -0.00079252796888270661, -2.5379438859688538E-5, -0.0,
    0.013000295015379673, -2.5897223918498751E-6, -0.00052049499991581837,
    -7.0100060277412595E-6, -0.63370234787111412, 1.4980529515579588E-5,
    -0.0016667489508736912, 0.00016472688705361694, -0.00065523809709111341, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    -0.0028798974838508042, 1.2031552401106183E-5, 6.5541259101970566E-5,
    -4.8937143347579689E-7, 0.91186205573102064, 5.6569476786228757E-5,
    -0.04536253292905823, 0.00017200519888355798, 0.0011287940711174952, 0.0,
    -0.0052334722224648142, 2.014283052930879E-5, 0.00012809304656000972,
    8.0572652135228347E-7, 0.87104654382409041, 5.6272387520390857E-5,
    -0.047311950839458591, 0.00014500909869676951, 0.001342599506139663, 0.0,
    -0.0075008822299020492, 2.6016006319195021E-5, 0.00019720530542317128,
    2.4591635624240212E-6, 0.83218851749958367, 4.7375846559661015E-5,
    -0.042598626592462448, 8.6719294425031889E-5, 0.0014003980563196165, 0.0,
    -0.0094397080120113015, 2.8650001241530735E-5, 0.00026638512436625997,
    4.121569324240198E-6, 0.79515340435959636, 3.4709382880706838E-5,
    -0.0346286857523732, 1.8297222644219323E-5, 0.0013530038284554769, 0.0,
    -0.010947156098591046, 2.7909176085084102E-5, 0.00033144457013503203,
    5.551978767944541E-6, 0.75982412569723878, 2.1346028683459181E-5,
    -0.0256340556623987, -4.65077577251771E-5, 0.0012416072499104723, 0.0,
    -0.012008978947283578, 2.4195712839857462E-5, 0.00039000535890606141,
    6.6018196083699552E-6, 0.72609874903249794, 9.0743971089963886E-6,
    -0.016970752909635903, -9.9662858362088664E-5, 0.0010974787977650574, 0.0,
    -0.012662186267626626, 1.8202379750182139E-5, 0.00044102211346605606,
    7.1976650371651611E-6, 0.6938879802645469, -1.2122638267861729E-6,
    -0.0093708626981430839, -0.00013734580510611549, 0.00094287838447155666, 0.0,
    -0.012969100796935945, 1.0734651929982677E-5, 0.00048436730788981974,
    7.3244316656170674E-6, 0.66311279263693523, -9.2109903987888745E-6,
    -0.0031443429792448185, -0.0001586810986538784, 0.00079252796888270661, 0.0,
    -0.013000295015379673, 2.5897223918498751E-6, 0.00052049499991581837,
    7.0100060277412595E-6, 0.63370234787111412, -1.4980529515579588E-5,
    0.0016667489508736912, -0.00016472688705361694, 0.00065523809709111341, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.097546159765407481, -0.0, -0.00010755525579326925, 2.1621574234746445E-5,
    2.1868160728403164E-7, -1.3780352347645445E-5, -4.7263455001554586E-5,
    -0.95132850476213759, -0.0038484242973110924, 0.0008333234816673673,
    7.0205219328639671E-6, -0.19034474888147193, -0.0, -0.00034781644809942923,
    8.0172011321042347E-5, 5.496988180212806E-7, -2.27156084527028E-5,
    -6.1029197992035013E-5, -0.90502865766333274, -0.0054665593201632234,
    0.0014772527708812099, 4.9543081419284395E-6, -0.27862705672350024, -0.0,
    -0.00063091851878645309, 0.0001662507404090787, 6.1735780707766864E-7,
    -2.6252607162803279E-5, -5.1494038048002871E-5, -0.8609839718388137,
    -0.0056795948236747409, 0.0019356125977258323, -2.9115307819425437E-6,
    -0.36261302471049905, -0.0, -0.00090245519432003915, 0.00027079983551271973,
    2.2119866829129186E-7, -2.4200604136820606E-5, -2.6945584800949674E-5,
    -0.81908391692432025, -0.0050872380724722305, 0.0022181312643041414,
    -1.3038309501360827E-5, -0.44251182472821315, -0.0, -0.0011332184496505038,
    0.00038537548095676294, -6.7382439476825781E-7, -1.6687728185037593E-5,
    6.21913541560381E-6, -0.77922357682239962, -0.0041046725047747847,
    0.0023394769197791015, -2.2436874234736947E-5, -0.51852240413199324, -0.0,
    -0.0013110011036634782, 0.00050236920150929082, -1.9748026060020105E-6,
    -4.1108907278707827E-6, 4.3301618795228949E-5, -0.74130332450590952,
    -0.0030032803749125677, 0.0023182169173743905, -2.9006231826818779E-5,
    -0.59083399926298907, -0.0, -0.0014343460932402772, 0.00061517585671316127,
    -3.5074845746161284E-6, 1.2918293945842887E-5, 8.103021524185864E-5,
    -0.70522851787898222, -0.0019473513770154644, 0.0021757356069629611,
    -3.1585817150007182E-5, -0.65962661966219382, -0.0, -0.0015079911327062045,
    0.00071830734181529911, -5.0610477977019531E-6, 3.3629077447434695E-5,
    0.00011726944236928755, -0.67090921790025126, -0.0010250256181252703,
    0.0019351518713853484, -2.9846869647270919E-5, -0.72507150519220553, -0.0,
    -0.001539705243111793, 0.00080745303342220714, -6.4252668261849241E-6,
    5.714631561806359E-5, 0.00015074631934028045, -0.63825992842150658,
    -0.00027303091474990723, 0.0016202781342734007, -2.4108355014696247E-5,
    -0.78733155816749312, -0.0, -0.0015382130601616088, 0.00087949002793622237,
    -7.4177895974795306E-6, 8.254233258825301E-5, 0.00018081245359503995,
    -0.60719935621397325, 0.00030444277158693495, 0.001254658953866428,
    -1.5132465589501508E-5, 0.0, 0.00010755525579326925, -2.1621574234746445E-5,
    -2.1868160728403164E-7, 1.3780352347645445E-5, 4.7263455001554586E-5,
    0.95132850476213759, 0.0038484242973110924, -0.0008333234816673673,
    -7.0205219328639671E-6, 0.0, 0.00034781644809942923, -8.0172011321042347E-5,
    -5.496988180212806E-7, 2.27156084527028E-5, 6.1029197992035013E-5,
    0.90502865766333274, 0.0054665593201632234, -0.0014772527708812099,
    -4.9543081419284395E-6, 0.0, 0.00063091851878645309, -0.0001662507404090787,
    -6.1735780707766864E-7, 2.6252607162803279E-5, 5.1494038048002871E-5,
    0.8609839718388137, 0.0056795948236747409, -0.0019356125977258323,
    2.9115307819425437E-6, 0.0, 0.00090245519432003915, -0.00027079983551271973,
    -2.2119866829129186E-7, 2.4200604136820606E-5, 2.6945584800949674E-5,
    0.81908391692432025, 0.0050872380724722305, -0.0022181312643041414,
    1.3038309501360827E-5, 0.0, 0.0011332184496505038, -0.00038537548095676294,
    6.7382439476825781E-7, 1.6687728185037593E-5, -6.21913541560381E-6,
    0.77922357682239962, 0.0041046725047747847, -0.0023394769197791015,
    2.2436874234736947E-5, 0.0, 0.0013110011036634782, -0.00050236920150929082,
    1.9748026060020105E-6, 4.1108907278707827E-6, -4.3301618795228949E-5,
    0.74130332450590952, 0.0030032803749125677, -0.0023182169173743905,
    2.9006231826818779E-5, 0.0, 0.0014343460932402772, -0.00061517585671316127,
    3.5074845746161284E-6, -1.2918293945842887E-5, -8.103021524185864E-5,
    0.70522851787898222, 0.0019473513770154644, -0.0021757356069629611,
    3.1585817150007182E-5, 0.0, 0.0015079911327062045, -0.00071830734181529911,
    5.0610477977019531E-6, -3.3629077447434695E-5, -0.00011726944236928755,
    0.67090921790025126, 0.0010250256181252703, -0.0019351518713853484,
    2.9846869647270919E-5, 0.0, 0.001539705243111793, -0.00080745303342220714,
    6.4252668261849241E-6, -5.714631561806359E-5, -0.00015074631934028045,
    0.63825992842150658, 0.00027303091474990723, -0.0016202781342734007,
    2.4108355014696247E-5, 0.0, 0.0015382130601616088, -0.00087949002793622237,
    7.4177895974795306E-6, -8.254233258825301E-5, -0.00018081245359503995,
    0.60719935621397325, -0.00030444277158693495, -0.001254658953866428,
    1.5132465589501508E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -3.3122055023886013E-5, -0.0, -0.037320608448162429,
    -5.6600484105171559E-5, -3.80158480245163E-5, 3.1210978741585189E-5,
    0.0063626044977050378, -0.0006178014929020413, -0.5225327707856211,
    -0.0020692471467052189, -0.0015825196049838539, -0.00011574479420093425,
    -0.0, -0.054883325379601215, -0.00018966443044090409,
    -0.00015913497745743803, 4.0945532666326075E-5, 0.01098062367358197,
    -0.0010008925162674567, -0.20297142785939054, -0.0031026752110159066,
    -0.0032311282598539459, -0.00022752205992960297, -0.0, -0.059609081713834292,
    -0.0003539149117734189, -0.00035558528147582892, 3.38718431928376E-5,
    0.014100450874041782, -0.0012102947949394326, -0.0030704723812153669,
    -0.0033580569219097342, -0.0045552335440573258, -0.00035373445001635119,
    -0.0, -0.0566310939380206, -0.00051640836201293644, -0.00060680377897153121,
    1.4575749290501959E-5, 0.016007318935255435, -0.0012972660302894572,
    0.11018003657398466, -0.0030685538629213705, -0.0054126799810898293,
    -0.00048426672704270573, -0.0, -0.04958344279424165, -0.00065501984891378027,
    -0.00088904456777334751, -1.2704805442094308E-5, 0.016981062543788644,
    -0.0013026524393105448, 0.16368620902280703, -0.0024327504919446049,
    -0.0058038975365799156, -0.00061259029406701118, -0.0, -0.040906977376478831,
    -0.00075661345705760742, -0.001180614271105825, -4.4240364479383093E-5,
    0.017271651919341397, -0.0012575153590614735, 0.17834162877389836,
    -0.0016115203185206896, -0.0058011916778807626, -0.0007348455173708349, -0.0,
    -0.03213584920181916, -0.0008151709006146402, -0.0014642560380119243,
    -7.6892574247333667E-5, 0.017088226244018196, -0.0011844178761378536,
    0.16965200751586221, -0.00072912249565741042, -0.0055040033969808973,
    -0.00084906792512870206, -0.0, -0.024145793721376804,
    -0.00083004077131965733, -0.0017277857906788886, -0.0001081406462955811,
    0.016596797545768028, -0.001098961720757274, 0.14860158330679765,
    0.00012332407723901758, -0.0050126254392374586, -0.00095456944621838543,
    -0.0, -0.017357138733195041, -0.0008043936494899703, -0.0019637497123331004,
    -0.00013606869238948604, 0.015923070727663548, -0.0010113191101064469,
    0.12257349852075856, 0.00088324870111464746, -0.0044144807303690961,
    -0.001051466224878606, -0.0, -0.011892888990472743, -0.00074391712028932264,
    -0.0021686144256626546, -0.0001593268472522379, 0.0151578844015864,
    -0.00092761579980605322, 0.096212946275474359, 0.0015117292327753965,
    -0.0037785205440147417, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.054883325379601215, 0.00018966443044090409,
    0.00015913497745743803, -4.0945532666326075E-5, -0.01098062367358197,
    0.0010008925162674567, 0.20297142785939054, 0.0031026752110159066,
    0.0032311282598539459, 0.0, 0.059609081713834292, 0.0003539149117734189,
    0.00035558528147582892, -3.38718431928376E-5, -0.014100450874041782,
    0.0012102947949394326, 0.0030704723812153669, 0.0033580569219097342,
    0.0045552335440573258, 0.0, 0.0566310939380206, 0.00051640836201293644,
    0.00060680377897153121, -1.4575749290501959E-5, -0.016007318935255435,
    0.0012972660302894572, -0.11018003657398466, 0.0030685538629213705,
    0.0054126799810898293, 0.0, 0.04958344279424165, 0.00065501984891378027,
    0.00088904456777334751, 1.2704805442094308E-5, -0.016981062543788644,
    0.0013026524393105448, -0.16368620902280703, 0.0024327504919446049,
    0.0058038975365799156, 0.0, 0.040906977376478831, 0.00075661345705760742,
    0.001180614271105825, 4.4240364479383093E-5, -0.017271651919341397,
    0.0012575153590614735, -0.17834162877389836, 0.0016115203185206896,
    0.0058011916778807626, 0.0, 0.03213584920181916, 0.0008151709006146402,
    0.0014642560380119243, 7.6892574247333667E-5, -0.017088226244018196,
    0.0011844178761378536, -0.16965200751586221, 0.00072912249565741042,
    0.0055040033969808973, 0.0, 0.024145793721376804, 0.00083004077131965733,
    0.0017277857906788886, 0.0001081406462955811, -0.016596797545768028,
    0.001098961720757274, -0.14860158330679765, -0.00012332407723901758,
    0.0050126254392374586, 0.0, 0.017357138733195041, 0.0008043936494899703,
    0.0019637497123331004, 0.00013606869238948604, -0.015923070727663548,
    0.0010113191101064469, -0.12257349852075856, -0.00088324870111464746,
    0.0044144807303690961, 0.0, 0.011892888990472743, 0.00074391712028932264,
    0.0021686144256626546, 0.0001593268472522379, -0.0151578844015864,
    0.00092761579980605322, -0.096212946275474359, -0.0015117292327753965,
    0.0037785205440147417, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 4.7891849279322587E-6, -0.0, -4.0707966674953438E-5,
    -0.0464090538358248, -2.4610229279834434E-5, -0.0030919673412285178,
    -1.7576703166230974E-5, 9.7029434768206214E-5, -0.0015099715156626865,
    -0.85302749794390476, -0.0014260811666531243, 1.9553719176953735E-5, -0.0,
    -0.00014006202707132642, -0.085043975442043368, -0.00017751299843456395,
    -0.00740711831933932, -2.3316767283689809E-5, 0.00019851677117884567,
    -0.0023646344510826261, -0.69051044383405968, -0.004954155578038663,
    4.4454435358372445E-5, -0.0, -0.00026826271666735173, -0.11534365076190714,
    -0.00053902544131978166, -0.012536343471712256, -1.909818544135809E-5,
    0.0002988879087654879, -0.0026849353030476111, -0.520979283271595,
    -0.0096289389499085859, 7.9134060107265958E-5, -0.0, -0.00040176330142696653,
    -0.13715425116620267, -0.0011468724162840489, -0.018093900163176455,
    -7.1564909796442766E-6, 0.00039337136440643975, -0.0025974596751517339,
    -0.35215480870159865, -0.014697559634988085, 0.00012280175601163309, -0.0,
    -0.00052321971195518058, -0.15068329187039023, -0.0020056697008370367,
    -0.023729720288973084, 1.0187559718062528E-5, 0.00047807706044242535,
    -0.0022221772612705994, -0.19074114854511837, -0.01958465295628432,
    0.00017432350426563407, -0.0, -0.00062096627057911925, -0.156445031663433,
    -0.0030952386675238376, -0.029138730282527434, 3.0718566326344523E-5,
    0.00055003449195668548, -0.0016654345695013317, -0.042286139963745077,
    -0.023870305244826039, 0.00023231434335936228, -0.0, -0.00068823862252685925,
    -0.15520051836868357, -0.0043778662362908066, -0.034067186692455738,
    5.2451113500909514E-5, 0.00060719215788508272, -0.0010166182473423744,
    0.088893913180309217, -0.027269783951359681, 0.00029522876116313797, -0.0,
    -0.00072229547807478014, -0.14789537730594471, -0.0058045821695615419,
    -0.038316151156875658, 7.3702925095851858E-5, 0.00064838193668042329,
    -0.00034726845470145251, 0.19973030442548706, -0.029614426390290671,
    0.00036144597642456361, -0.0, -0.00072353779133067406, -0.1355981346702376,
    -0.0073205027918376176, -0.041742328553016711, 9.3129050438580933E-5,
    0.00067325342140161679, 0.00028826495310264172, 0.28836573449166886,
    -0.030833377529667579, 0.0004293473947233296, -0.0, -0.00069468534504446707,
    -0.11944148905527346, -0.0088692806573745422, -0.044256570097747604,
    0.00010972744951220589, 0.00068218410550778476, 0.00085127183938045264,
    0.35407400817630913, -0.030936089919557017, 0.0, 4.0707966674953438E-5,
    0.0464090538358248, 2.4610229279834434E-5, 0.0030919673412285178,
    1.7576703166230974E-5, -9.7029434768206214E-5, 0.0015099715156626865,
    0.85302749794390476, 0.0014260811666531243, 0.0, 0.00014006202707132642,
    0.085043975442043368, 0.00017751299843456395, 0.00740711831933932,
    2.3316767283689809E-5, -0.00019851677117884567, 0.0023646344510826261,
    0.69051044383405968, 0.004954155578038663, 0.0, 0.00026826271666735173,
    0.11534365076190714, 0.00053902544131978166, 0.012536343471712256,
    1.909818544135809E-5, -0.0002988879087654879, 0.0026849353030476111,
    0.520979283271595, 0.0096289389499085859, 0.0, 0.00040176330142696653,
    0.13715425116620267, 0.0011468724162840489, 0.018093900163176455,
    7.1564909796442766E-6, -0.00039337136440643975, 0.0025974596751517339,
    0.35215480870159865, 0.014697559634988085, 0.0, 0.00052321971195518058,
    0.15068329187039023, 0.0020056697008370367, 0.023729720288973084,
    -1.0187559718062528E-5, -0.00047807706044242535, 0.0022221772612705994,
    0.19074114854511837, 0.01958465295628432, 0.0, 0.00062096627057911925,
    0.156445031663433, 0.0030952386675238376, 0.029138730282527434,
    -3.0718566326344523E-5, -0.00055003449195668548, 0.0016654345695013317,
    0.042286139963745077, 0.023870305244826039, 0.0, 0.00068823862252685925,
    0.15520051836868357, 0.0043778662362908066, 0.034067186692455738,
    -5.2451113500909514E-5, -0.00060719215788508272, 0.0010166182473423744,
    -0.088893913180309217, 0.027269783951359681, 0.0, 0.00072229547807478014,
    0.14789537730594471, 0.0058045821695615419, 0.038316151156875658,
    -7.3702925095851858E-5, -0.00064838193668042329, 0.00034726845470145251,
    -0.19973030442548706, 0.029614426390290671, 0.0, 0.00072353779133067406,
    0.1355981346702376, 0.0073205027918376176, 0.041742328553016711,
    -9.3129050438580933E-5, -0.00067325342140161679, -0.00028826495310264172,
    -0.28836573449166886, 0.030833377529667579, 0.0, 0.00069468534504446707,
    0.11944148905527346, 0.0088692806573745422, 0.044256570097747604,
    -0.00010972744951220589, -0.00068218410550778476, -0.00085127183938045264,
    -0.35407400817630913, 0.030936089919557017, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.77126980353158E-8, -0.0,
    -3.75160498220011E-5, 2.1506383219102515E-9, -0.04392176650032184,
    0.00043412487299914751, -0.00017734495634069353, 1.6549466756155209E-6,
    -0.0012849062652771342, 5.4203394113382109E-7, -0.76714673440244707,
    2.8623302431047421E-7, -0.0, -0.00011213902996173026, 9.9930280580189556E-8,
    -0.077616305140426584, 0.00074750619914524109, -0.00029561181255359948,
    1.9554069952167185E-6, -0.0015808726960927764, 3.8087378155025909E-6,
    -0.58851802581999169, 4.6650639151568763E-7, -0.0, -0.0001871142060260516,
    4.2294604396763049E-7, -0.10346524275805116, 0.00096914766771613744,
    -0.00037180786338522848, 1.5787303151743393E-6, -0.0013617474267855684,
    9.4592306518407534E-6, -0.45148691855727247, 5.9359525743418006E-7, -0.0,
    -0.00024479725336299486, 1.0741642050550257E-6, -0.12329559588148699,
    0.0011212711730100332, -0.00041847461841373451, 9.4463966810712122E-7,
    -0.00092758038898164594, 1.6803124111984035E-5, -0.346366306838756,
    6.5500201794533037E-7, -0.0, -0.00027928663428123833, 2.1172715458094582E-6,
    -0.138508903504834, 0.0012208947103972338, -0.00044470714519871988,
    2.9366712462844609E-7, -0.00045553929121130727, 2.4987385449466571E-5,
    -0.26572470476623739, 6.558898892160096E-7, -0.0, -0.00029131346062250332,
    3.57234813557054E-6, -0.15018030302999721, 0.0012810427483857993,
    -0.00045699420172890974, -2.5292400768863529E-7, -3.9477188905058346E-5,
    3.3141365333322384E-5, -0.20386119065003519, 6.0948040329946978E-7, -0.0,
    -0.0002848538285191443, 5.4177287146368184E-6, -0.1591345420557225,
    0.001311674867081696, -0.0004598920407324363, -6.4904531571258E-7,
    0.00028047075352852, 4.04797172861197E-5, -0.15640251435364058,
    5.311916515130164E-7, -0.0, -0.00026500649983706521, 7.5960372283493957E-6,
    -0.16600429269349035, 0.0013203984116997654, -0.00045655152686565,
    -8.9257237188670212E-7, 0.00049658191433857616, 4.6367322924956285E-5,
    -0.11999395989233737, 4.3537253332436258E-7, -0.0, -0.00023676421406210009,
    1.0022645589551685E-5, -0.17127488705181956, 0.0013130155456245142,
    -0.00044912096591901839, -1.0041862766183767E-6, 0.00061883103334603917,
    5.0352466044721581E-5, -0.092062158674784081, 3.3375645750419255E-7, -0.0,
    -0.00020438893444202764, 1.2595141097730492E-5, -0.17531863458673524,
    0.0012939433112788587, -0.00043904709155616475, -1.0137574627819884E-6,
    0.00066520498038440557, 5.2175154946732963E-5, -0.070633117078497357, 0.0,
    3.75160498220011E-5, -2.1506383219102515E-9, 0.04392176650032184,
    -0.00043412487299914751, 0.00017734495634069353, -1.6549466756155209E-6,
    0.0012849062652771342, -5.4203394113382109E-7, 0.76714673440244707, 0.0,
    0.00011213902996173026, -9.9930280580189556E-8, 0.077616305140426584,
    -0.00074750619914524109, 0.00029561181255359948, -1.9554069952167185E-6,
    0.0015808726960927764, -3.8087378155025909E-6, 0.58851802581999169, 0.0,
    0.0001871142060260516, -4.2294604396763049E-7, 0.10346524275805116,
    -0.00096914766771613744, 0.00037180786338522848, -1.5787303151743393E-6,
    0.0013617474267855684, -9.4592306518407534E-6, 0.45148691855727247, 0.0,
    0.00024479725336299486, -1.0741642050550257E-6, 0.12329559588148699,
    -0.0011212711730100332, 0.00041847461841373451, -9.4463966810712122E-7,
    0.00092758038898164594, -1.6803124111984035E-5, 0.346366306838756, 0.0,
    0.00027928663428123833, -2.1172715458094582E-6, 0.138508903504834,
    -0.0012208947103972338, 0.00044470714519871988, -2.9366712462844609E-7,
    0.00045553929121130727, -2.4987385449466571E-5, 0.26572470476623739, 0.0,
    0.00029131346062250332, -3.57234813557054E-6, 0.15018030302999721,
    -0.0012810427483857993, 0.00045699420172890974, 2.5292400768863529E-7,
    3.9477188905058346E-5, -3.3141365333322384E-5, 0.20386119065003519, 0.0,
    0.0002848538285191443, -5.4177287146368184E-6, 0.1591345420557225,
    -0.001311674867081696, 0.0004598920407324363, 6.4904531571258E-7,
    -0.00028047075352852, -4.04797172861197E-5, 0.15640251435364058, 0.0,
    0.00026500649983706521, -7.5960372283493957E-6, 0.16600429269349035,
    -0.0013203984116997654, 0.00045655152686565, 8.9257237188670212E-7,
    -0.00049658191433857616, -4.6367322924956285E-5, 0.11999395989233737, 0.0,
    0.00023676421406210009, -1.0022645589551685E-5, 0.17127488705181956,
    -0.0013130155456245142, 0.00044912096591901839, 1.0041862766183767E-6,
    -0.00061883103334603917, -5.0352466044721581E-5, 0.092062158674784081, 0.0,
    0.00020438893444202764, -1.2595141097730492E-5, 0.17531863458673524,
    -0.0012939433112788587, 0.00043904709155616475, 1.0137574627819884E-6,
    -0.00066520498038440557, -5.2175154946732963E-5, 0.070633117078497357, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T u[2034]{ -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020445512957285371, 0.0014603487861040304, 4.9246767934457634E-6,
    -0.0052868326178782156, -0.0020754199270452173, 0.015163628780498446,
    3.1616010707720426E-7, -0.0, -0.00019811352068166364, -9.73333699342812E-5,
    0.00066585862709166957, -0.0040091552269349209, 0.0028909658887442155,
    6.5614497023245073E-6, -0.0080792362290577815, -0.0038844512459874081,
    0.026788702408483002, 6.8512917620797536E-7, -0.0, -0.00049104314225850254,
    -0.00027751213812133571, 0.0018419406261771351, -0.0058989572722036735,
    0.0042850903886228146, 6.1601073524460959E-6, -0.0091991288332427812,
    -0.0053836032115810945, 0.035691534155111788, 9.51595524168609E-7, -0.0,
    -0.00081150591943761959, -0.00052435232813021957, 0.0034085439914897236,
    -0.0077185036154530772, 0.0056372660414857906, 4.6396980079752364E-6,
    -0.00926906335060941, -0.006548320744319591, 0.042501234100522735,
    1.0377937756639665E-6, -0.0, -0.0011189252136054833, -0.00082088448415742132,
    0.0052736567007514515, -0.0094716827009443637, 0.0069435063749424446,
    2.6414509523473936E-6, -0.008739896629381582, -0.00737143213587389,
    0.047702538425699506, 9.1853767957218194E-7, -0.0, -0.0013916387797655108,
    -0.0011501728132765291, 0.0073666001295169623, -0.011161718745088724,
    0.008201241533242561, 5.8494966353777778E-7, -0.00792273074079747,
    -0.007861076035806859, 0.051668868765490657, 6.01743722369558E-7, -0.0,
    -0.001620703686020732, -0.0014960212712305325, 0.0096331287280922023,
    -0.012791205168029366, 0.0094091464493969573, -1.2790233473825457E-6,
    -0.0070202354586047528, -0.0080382793893777667, 0.054687847403532837,
    1.1391978754040816E-7, -0.0, -0.001805191914282023, -0.0018435530683128011,
    0.012031653450661765, -0.01436216724881885, 0.010566918108659434,
    -2.8223985500875043E-6, -0.0061546448498688575, -0.007934340486205024,
    0.056980982028061261, -5.1013685987928413E-7, -0.0, -0.0019487749913619972,
    -0.0021796573224240928, 0.014530331906291044, -0.015876144576630242,
    0.011675045183589609, -4.0018112448208258E-6, -0.0053912134366169567,
    -0.0075881528377809079, 0.058718842971069225, -1.2342489191791384E-6, -0.0,
    -0.0020573611713821547, -0.002493302894833033, 0.017104826530695772,
    -0.017334285099427416, 0.012734595324628301, -4.8286811668071772E-6,
    -0.0047568768666075411, -0.0070435863941390019, 0.060032756331813382, 0.0,
    0.0, 0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.00019811352068166364, 9.73333699342812E-5,
    -0.00066585862709166957, 0.0040091552269349209, -0.0028909658887442155,
    -6.5614497023245073E-6, 0.0080792362290577815, 0.0038844512459874081,
    -0.026788702408483002, 0.0, 0.00049104314225850254, 0.00027751213812133571,
    -0.0018419406261771351, 0.0058989572722036735, -0.0042850903886228146,
    -6.1601073524460959E-6, 0.0091991288332427812, 0.0053836032115810945,
    -0.035691534155111788, 0.0, 0.00081150591943761959, 0.00052435232813021957,
    -0.0034085439914897236, 0.0077185036154530772, -0.0056372660414857906,
    -4.6396980079752364E-6, 0.00926906335060941, 0.006548320744319591,
    -0.042501234100522735, 0.0, 0.0011189252136054833, 0.00082088448415742132,
    -0.0052736567007514515, 0.0094716827009443637, -0.0069435063749424446,
    -2.6414509523473936E-6, 0.008739896629381582, 0.00737143213587389,
    -0.047702538425699506, 0.0, 0.0013916387797655108, 0.0011501728132765291,
    -0.0073666001295169623, 0.011161718745088724, -0.008201241533242561,
    -5.8494966353777778E-7, 0.00792273074079747, 0.007861076035806859,
    -0.051668868765490657, 0.0, 0.001620703686020732, 0.0014960212712305325,
    -0.0096331287280922023, 0.012791205168029366, -0.0094091464493969573,
    1.2790233473825457E-6, 0.0070202354586047528, 0.0080382793893777667,
    -0.054687847403532837, 0.0, 0.001805191914282023, 0.0018435530683128011,
    -0.012031653450661765, 0.01436216724881885, -0.010566918108659434,
    2.8223985500875043E-6, 0.0061546448498688575, 0.007934340486205024,
    -0.056980982028061261, 0.0, 0.0019487749913619972, 0.0021796573224240928,
    -0.014530331906291044, 0.015876144576630242, -0.011675045183589609,
    4.0018112448208258E-6, 0.0053912134366169567, 0.0075881528377809079,
    -0.058718842971069225, 0.0, 0.0020573611713821547, 0.002493302894833033,
    -0.017104826530695772, 0.017334285099427416, -0.012734595324628301,
    4.8286811668071772E-6, 0.0047568768666075411, 0.0070435863941390019,
    -0.060032756331813382, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020430568849590363, -0.0014846744549160563, -7.0936716057342316E-6,
    0.0051391900270571448, -0.0021227702215873057, 0.015228232305159621,
    -5.1746825674618411E-7, -0.0, 0.00019360954683992086, -9.8951619720029927E-5,
    0.00066903596330777568, -0.0040067314306774949, -0.0029322591857517642,
    -1.0565746060026215E-5, 0.0078884598525309352, -0.0039509928253638827,
    0.026917231873970968, -1.25018041672658E-6, -0.0, 0.0004813724987437641,
    -0.0002812123096721656, 0.0018515897913409906, -0.0058959962902359435,
    -0.00433805660413819, -1.1566011819059168E-5, 0.00901826988341082,
    -0.0054509447270126056, 0.03588820965614524, -1.99674342474268E-6, -0.0,
    0.00079779982914969841, -0.000529877384341185, 0.0034281815934806724,
    -0.0077152543580130614, -0.0056981223890151169, -1.0967109079724052E-5,
    0.0091195753483278869, -0.00660567593380442, 0.04277015614884281,
    -2.6308219371928471E-6, -0.0, 0.0011028937830708171, -0.0008275864795065065,
    0.005306950518510354, -0.0094682805098512471, -0.0070095628750181035,
    -9.4049919993817815E-6, 0.0086253321268044067, -0.0074136435021352051,
    0.048045444848981857, -3.0797420946197447E-6, -0.0, 0.0013749180814484161,
    -0.0011572507586087781, 0.00741723100352391, -0.011158213201939327,
    -0.00827058862369585, -7.3245584742921849E-6, 0.0078377590270683143,
    -0.0078869236468970261, 0.052084536642155926, -3.3076191174553684E-6, -0.0,
    0.0016045634974302969, -0.001502682321689071, 0.0097046471474189055,
    -0.012787584797297882, -0.009480426545954863, -5.0236620287564976E-6,
    0.0069562410011868329, -0.0080491061052958713, 0.055172377151487921,
    -3.3026429098114517E-6, -0.0, 0.0017904596235921708, -0.0018491127346458545,
    0.012127361717645797, -0.014358380565562009, -0.010639161635940208,
    -2.6918556487285848E-6, 0.0061029256813059174, -0.0079329836605401376,
    0.057528472990236564, -3.0679042907758847E-6, -0.0, 0.0019358763409865634,
    -0.0021835932805221218, 0.014653203386246897, -0.01587211736084377,
    -0.01174755497429808, -4.42337866151435E-7, 0.00534457038431273,
    -0.007578149996654163, 0.059322164719128163, -2.6150642512061722E-6, -0.0,
    0.0020464129014495149, -0.0024952750539298735, 0.017257462274893824,
    -0.0173299340528133, -0.012806866470529164, 1.663084598604466E-6,
    0.0047101836644297549, -0.0070286124953556394, 0.060684253833634447, 0.0,
    0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, -0.00019360954683992086, 9.8951619720029927E-5,
    -0.00066903596330777568, 0.0040067314306774949, 0.0029322591857517642,
    1.0565746060026215E-5, -0.0078884598525309352, 0.0039509928253638827,
    -0.026917231873970968, 0.0, -0.0004813724987437641, 0.0002812123096721656,
    -0.0018515897913409906, 0.0058959962902359435, 0.00433805660413819,
    1.1566011819059168E-5, -0.00901826988341082, 0.0054509447270126056,
    -0.03588820965614524, 0.0, -0.00079779982914969841, 0.000529877384341185,
    -0.0034281815934806724, 0.0077152543580130614, 0.0056981223890151169,
    1.0967109079724052E-5, -0.0091195753483278869, 0.00660567593380442,
    -0.04277015614884281, 0.0, -0.0011028937830708171, 0.0008275864795065065,
    -0.005306950518510354, 0.0094682805098512471, 0.0070095628750181035,
    9.4049919993817815E-6, -0.0086253321268044067, 0.0074136435021352051,
    -0.048045444848981857, 0.0, -0.0013749180814484161, 0.0011572507586087781,
    -0.00741723100352391, 0.011158213201939327, 0.00827058862369585,
    7.3245584742921849E-6, -0.0078377590270683143, 0.0078869236468970261,
    -0.052084536642155926, 0.0, -0.0016045634974302969, 0.001502682321689071,
    -0.0097046471474189055, 0.012787584797297882, 0.009480426545954863,
    5.0236620287564976E-6, -0.0069562410011868329, 0.0080491061052958713,
    -0.055172377151487921, 0.0, -0.0017904596235921708, 0.0018491127346458545,
    -0.012127361717645797, 0.014358380565562009, 0.010639161635940208,
    2.6918556487285848E-6, -0.0061029256813059174, 0.0079329836605401376,
    -0.057528472990236564, 0.0, -0.0019358763409865634, 0.0021835932805221218,
    -0.014653203386246897, 0.01587211736084377, 0.01174755497429808,
    4.42337866151435E-7, -0.00534457038431273, 0.007578149996654163,
    -0.059322164719128163, 0.0, -0.0020464129014495149, 0.0024952750539298735,
    -0.017257462274893824, 0.0173299340528133, 0.012806866470529164,
    -1.663084598604466E-6, -0.0047101836644297549, 0.0070286124953556394,
    -0.060684253833634447, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021016480453829815, 0.0014857887933183286, 4.7070151263154063E-6,
    -0.0050961555194273559, -0.0020754929921346357, -0.015462266265499226,
    3.0426878718878496E-7, -0.0, -0.00019216872658156067, -9.73459460026197E-5,
    -0.0006792751071504849, -0.0041074683619141631, 0.0029340512081696577,
    6.3057460452133884E-6, -0.00782907896809333, -0.0038849506557918018,
    -0.027331354583334473, 6.6273426813855175E-7, -0.0, -0.00047814040658582105,
    -0.000277566493848083, -0.0018802229105924365, -0.0060264210814452886,
    0.0043402263594654331, 5.9587145352081763E-6, -0.0089598311740056828,
    -0.0053848318467642564, -0.036451644592615427, 9.2636180986459172E-7, -0.0,
    -0.0007930998311513511, -0.00052449064683289992, -0.0034822500476397213,
    -0.0078659750107290677, 0.0057004858091328926, 4.5303525006595133E-6,
    -0.0090720820218160424, -0.0065504901027000958, -0.04346807648358772,
    1.0194144264559595E-6, -0.0, -0.0010974076290702971, -0.00082115681443972331,
    -0.0053930322171731326, -0.0096322567462445857, 0.00701202851618736,
    2.6300941233486434E-6, -0.0085934122806193176, -0.0073746438770505617,
    -0.048873310311435589, 9.1637309261321547E-7, -0.0, -0.0013694590279160136,
    -0.001150631492424329, -0.0075418405117768745, -0.011330203401756304,
    0.0082731347444936279, 6.61013790805109E-7, -0.00782228984031321,
    -0.0078653210901301167, -0.053043720345121143, 6.2369573871460237E-7, -0.0,
    -0.0015999229352117708, -0.0014967156366828343, -0.0098744448046202624,
    -0.012963718195152128, 0.0094830801904353113, -1.1328950919024408E-6,
    -0.0069556646472008427, -0.0080434495506573524, -0.056266866774456553,
    1.6606812914153581E-7, -0.0, -0.0017873120317849199, -0.001844524963056166,
    -0.012349220884839871, -0.014535826846399721, 0.010641980597964829,
    -2.6245895611173081E-6, -0.0061142707936579534, -0.00794024786087918,
    -0.058762467425333663, -4.2346592189730975E-7, -0.0, -0.0019347286197374006,
    -0.0021809376864936609, -0.014934176702927581, -0.016048831986543406,
    0.011750612976507079, -3.7686667972724733E-6, -0.0053642122139471319,
    -0.0075945532602473683, -0.060698414364158154, -1.1102016279514281E-6, -0.0,
    -0.0020475860319608364, -0.0024949095612962508, -0.017604680748317732,
    -0.017504462457878039, 0.012810241540071939, -4.5731930224289468E-6,
    -0.0047343841216166494, -0.0070502037507671972, -0.062203013141477644, 0.0,
    0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.00019216872658156067, 9.73459460026197E-5,
    0.0006792751071504849, 0.0041074683619141631, -0.0029340512081696577,
    -6.3057460452133884E-6, 0.00782907896809333, 0.0038849506557918018,
    0.027331354583334473, 0.0, 0.00047814040658582105, 0.000277566493848083,
    0.0018802229105924365, 0.0060264210814452886, -0.0043402263594654331,
    -5.9587145352081763E-6, 0.0089598311740056828, 0.0053848318467642564,
    0.036451644592615427, 0.0, 0.0007930998311513511, 0.00052449064683289992,
    0.0034822500476397213, 0.0078659750107290677, -0.0057004858091328926,
    -4.5303525006595133E-6, 0.0090720820218160424, 0.0065504901027000958,
    0.04346807648358772, 0.0, 0.0010974076290702971, 0.00082115681443972331,
    0.0053930322171731326, 0.0096322567462445857, -0.00701202851618736,
    -2.6300941233486434E-6, 0.0085934122806193176, 0.0073746438770505617,
    0.048873310311435589, 0.0, 0.0013694590279160136, 0.001150631492424329,
    0.0075418405117768745, 0.011330203401756304, -0.0082731347444936279,
    -6.61013790805109E-7, 0.00782228984031321, 0.0078653210901301167,
    0.053043720345121143, 0.0, 0.0015999229352117708, 0.0014967156366828343,
    0.0098744448046202624, 0.012963718195152128, -0.0094830801904353113,
    1.1328950919024408E-6, 0.0069556646472008427, 0.0080434495506573524,
    0.056266866774456553, 0.0, 0.0017873120317849199, 0.001844524963056166,
    0.012349220884839871, 0.014535826846399721, -0.010641980597964829,
    2.6245895611173081E-6, 0.0061142707936579534, 0.00794024786087918,
    0.058762467425333663, 0.0, 0.0019347286197374006, 0.0021809376864936609,
    0.014934176702927581, 0.016048831986543406, -0.011750612976507079,
    3.7686667972724733E-6, 0.0053642122139471319, 0.0075945532602473683,
    0.060698414364158154, 0.0, 0.0020475860319608364, 0.0024949095612962508,
    0.017604680748317732, 0.017504462457878039, -0.012810241540071939,
    4.5731930224289468E-6, 0.0047343841216166494, 0.0070502037507671972,
    0.062203013141477644, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021001536346134803, -0.0014592344477017574, -7.3113332728645879E-6,
    0.0053298671255080053, -0.0021228432866767255, -0.015397662740838059,
    -5.2935957663460309E-7, -0.0, 0.00019955434094002391, -9.8964195788368479E-5,
    -0.00067609777093437912, -0.0041050445656567363, -0.0028891738663263207,
    -1.082144971713733E-5, 0.00813861711349539, -0.0039514922351682781,
    -0.027202825117846524, -1.2725753247960032E-6, -0.0, 0.00049427523441644564,
    -0.00028126666539891307, -0.0018705737454285823, -0.0060234600994775568,
    -0.00428292063329557, -1.176740463629708E-5, 0.0092575675426479209,
    -0.00545217336219577, -0.036254969091582, -2.0219771390466966E-6, -0.0,
    0.000816205917435967, -0.00053001570304386553, -0.0034626124456487747,
    -0.00786272575328905, -0.0056349026213680133, -1.1076454587039766E-5,
    0.0093165566771212568, -0.0066078452921849284, -0.043199154435267666,
    -2.649201286400853E-6, -0.0, 0.0011244113676060037, -0.00082785880978880882,
    -0.0053597383994142336, -0.0096288545551514691, -0.0069410407337731853,
    -9.41634882838052E-6, 0.0087718164755666728, -0.007416855243311881,
    -0.048530403888153259, -3.0819066815787091E-6, -0.0, 0.0013970978332979137,
    -0.0011577094377565786, -0.00749120963776993, -0.011326697858606906,
    -0.00819869541244478, -7.24849434702484E-6, 0.0079381999275525764,
    -0.0078911687012202889, -0.0526280524684559, -3.2856671011103207E-6, -0.0,
    0.0016253442482392585, -0.0015033766871413736, -0.0098029263852935644,
    -0.012960097824420645, -0.0094064928049165039, -4.8775337732763766E-6,
    0.0070208118125907448, -0.0080542762665754622, -0.0557823370265015,
    -3.25049456821032E-6, -0.0, 0.0018083395060892744, -0.0018500846293892205,
    -0.012253512617855846, -0.014532040163142882, -0.010564099146634807,
    -2.4940466597583703E-6, 0.0061432997375168224, -0.0079388910352142985,
    -0.058214976463158388, -2.9812333527939047E-6, -0.0, 0.0019499227126111602,
    -0.0021848736445916912, -0.014811305222971737, -0.016044804770756937,
    -0.011671987181380605, -2.091934186030613E-7, 0.0053715716069825548,
    -0.0075845504191206286, -0.060095092616099251, -2.4910169599784537E-6, -0.0,
    0.0020561880408708341, -0.0024968817203930927, -0.017452045004119694,
    -0.017500111411263931, -0.012731220255085524, 1.9185727429827189E-6,
    0.0047326764094206457, -0.00703522985198384, -0.061551515639656613, 0.0, 0.0,
    0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, -0.00019955434094002391, 9.8964195788368479E-5,
    0.00067609777093437912, 0.0041050445656567363, 0.0028891738663263207,
    1.082144971713733E-5, -0.00813861711349539, 0.0039514922351682781,
    0.027202825117846524, 0.0, -0.00049427523441644564, 0.00028126666539891307,
    0.0018705737454285823, 0.0060234600994775568, 0.00428292063329557,
    1.176740463629708E-5, -0.0092575675426479209, 0.00545217336219577,
    0.036254969091582, 0.0, -0.000816205917435967, 0.00053001570304386553,
    0.0034626124456487747, 0.00786272575328905, 0.0056349026213680133,
    1.1076454587039766E-5, -0.0093165566771212568, 0.0066078452921849284,
    0.043199154435267666, 0.0, -0.0011244113676060037, 0.00082785880978880882,
    0.0053597383994142336, 0.0096288545551514691, 0.0069410407337731853,
    9.41634882838052E-6, -0.0087718164755666728, 0.007416855243311881,
    0.048530403888153259, 0.0, -0.0013970978332979137, 0.0011577094377565786,
    0.00749120963776993, 0.011326697858606906, 0.00819869541244478,
    7.24849434702484E-6, -0.0079381999275525764, 0.0078911687012202889,
    0.0526280524684559, 0.0, -0.0016253442482392585, 0.0015033766871413736,
    0.0098029263852935644, 0.012960097824420645, 0.0094064928049165039,
    4.8775337732763766E-6, -0.0070208118125907448, 0.0080542762665754622,
    0.0557823370265015, 0.0, -0.0018083395060892744, 0.0018500846293892205,
    0.012253512617855846, 0.014532040163142882, 0.010564099146634807,
    2.4940466597583703E-6, -0.0061432997375168224, 0.0079388910352142985,
    0.058214976463158388, 0.0, -0.0019499227126111602, 0.0021848736445916912,
    0.014811305222971737, 0.016044804770756937, 0.011671987181380605,
    2.091934186030613E-7, -0.0053715716069825548, 0.0075845504191206286,
    0.060095092616099251, 0.0, -0.0020561880408708341, 0.0024968817203930927,
    0.017452045004119694, 0.017500111411263931, 0.012731220255085524,
    -1.9185727429827189E-6, -0.0047326764094206457, 0.00703522985198384,
    0.061551515639656613, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.00030616429069496923, 0.00048221414518065164, 0.0020535983066627917,
    0.022397032944284023, -0.011382823490747531, -4.5300466257935429E-5,
    0.00020111824649365363, -0.0, 0.00083519681622152143,
    -0.00052693283295635128, -1.4202292023779372E-6, 0.00056258770077962489,
    0.00080001208779628685, 0.0040222089662175116, 0.034075479854978247,
    -0.021043808615419376, -6.0914557418032596E-5, 0.00059482891125992249, -0.0,
    0.002062143106284854, -0.0014904815292193945, -3.3998696950912874E-6,
    0.00075646106685663085, 0.0009936379052814066, 0.0059054831078212966,
    0.038583750917710678, -0.028829764251451326, -7.1735836551568879E-5,
    0.0011726262150481637, -0.0, 0.0033929136972443439, -0.0027949836877214896,
    -6.2738005970893479E-6, 0.00087950249413920047, 0.0010977323314750806,
    0.0077041407928327083, 0.038610702862460149, -0.034678824448749805,
    -9.99582877310808E-5, 0.0019261216668453409, -0.0, 0.004654926481577208,
    -0.004343790695385528, -1.1349003863154811E-5, 0.00092769306525124055,
    0.0011404644798644031, 0.0094197723233186512, 0.036103268168904461,
    -0.038611763746433318, -0.00016194825176056761, 0.0028471204265186328, -0.0,
    0.0057572468853912514, -0.00604313701410948, -2.0579570862840042E-5,
    0.00090087854130221272, 0.0011436573271834541, 0.011054625516548585,
    0.03240359262632185, -0.040721182393318144, -0.00026717427891659415,
    0.0039276769289651285, -0.0, 0.006663765412963975, -0.0078054281883259,
    -3.6223635885386266E-5, 0.00080226872093682724, 0.0011234628800830127,
    0.012611407038876492, 0.028384129958974106, -0.041159175748152539,
    -0.00041844655161156453, 0.0051601319868246516, -0.0, 0.0073728135925645675,
    -0.009551887733299189, -6.0533070291468119E-5, 0.000637866685778655,
    0.0010912837713868075, 0.014093112150810589, 0.024568713767860097,
    -0.040124126137914662, -0.00061290951136036, 0.0065371345335159276, -0.0,
    0.0079023594828677816, -0.011214534686086311, -9.5503092630370968E-5,
    0.000415859234804783, 0.0010547464749837694, 0.015502888074725234,
    0.021234175454636881, -0.037847237535387088, -0.00084339143145200518,
    0.0080516513816897874, -0.0, 0.0082797661137407122, -0.012737493468585182,
    -0.00014269246021107707, 0.00014599763913536522, 0.0010186111457241656,
    0.016843930534120106, 0.01849129340046481, -0.034579382681332371,
    -0.001099842345084482, 0.0, 0.0, 0.0, 0.0, -0.00030616429069496923,
    -0.00048221414518065164, -0.0020535983066627917, -0.022397032944284023,
    0.011382823490747531, 4.5300466257935429E-5, 0.0, -0.00083519681622152143,
    0.00052693283295635128, 1.4202292023779372E-6, -0.00056258770077962489,
    -0.00080001208779628685, -0.0040222089662175116, -0.034075479854978247,
    0.021043808615419376, 6.0914557418032596E-5, 0.0, -0.002062143106284854,
    0.0014904815292193945, 3.3998696950912874E-6, -0.00075646106685663085,
    -0.0009936379052814066, -0.0059054831078212966, -0.038583750917710678,
    0.028829764251451326, 7.1735836551568879E-5, 0.0, -0.0033929136972443439,
    0.0027949836877214896, 6.2738005970893479E-6, -0.00087950249413920047,
    -0.0010977323314750806, -0.0077041407928327083, -0.038610702862460149,
    0.034678824448749805, 9.99582877310808E-5, 0.0, -0.004654926481577208,
    0.004343790695385528, 1.1349003863154811E-5, -0.00092769306525124055,
    -0.0011404644798644031, -0.0094197723233186512, -0.036103268168904461,
    0.038611763746433318, 0.00016194825176056761, 0.0, -0.0057572468853912514,
    0.00604313701410948, 2.0579570862840042E-5, -0.00090087854130221272,
    -0.0011436573271834541, -0.011054625516548585, -0.03240359262632185,
    0.040721182393318144, 0.00026717427891659415, 0.0, -0.006663765412963975,
    0.0078054281883259, 3.6223635885386266E-5, -0.00080226872093682724,
    -0.0011234628800830127, -0.012611407038876492, -0.028384129958974106,
    0.041159175748152539, 0.00041844655161156453, 0.0, -0.0073728135925645675,
    0.009551887733299189, 6.0533070291468119E-5, -0.000637866685778655,
    -0.0010912837713868075, -0.014093112150810589, -0.024568713767860097,
    0.040124126137914662, 0.00061290951136036, 0.0, -0.0079023594828677816,
    0.011214534686086311, 9.5503092630370968E-5, -0.000415859234804783,
    -0.0010547464749837694, -0.015502888074725234, -0.021234175454636881,
    0.037847237535387088, 0.00084339143145200518, 0.0, -0.0082797661137407122,
    0.012737493468585182, 0.00014269246021107707, -0.00014599763913536522,
    -0.0010186111457241656, -0.016843930534120106, -0.01849129340046481,
    0.034579382681332371, 0.001099842345084482, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 0.00030623942171196546, -0.00047731536664842887,
    -0.002066526813039662, -0.022172426283366305, -0.011387616330349713,
    0.00015666644814812009, -0.0002022625931303291, -0.0,
    -0.00082774518149017452, -0.000529592610445747, 5.7389299890772109E-6,
    0.00056396725231741681, -0.0007922466192322238, -0.0040450830466660882,
    -0.033768034595554677, -0.021141612605666528, 0.00022480793913855988,
    -0.0005979618330017876, -0.0, -0.0020455667486544552, -0.0015016832971963196,
    1.2281171297667541E-5, 0.00075945441536740617, -0.000984370751728749,
    -0.0059353031721315549, -0.038284778592207587, -0.029063239819559016,
    0.0001877515826036143, -0.0011782958644571567, -0.0, -0.0033690819832402682,
    -0.0028218463087974089, 1.4332584980973915E-5, 0.00088370610807833518,
    -0.0010877588806645171, -0.0077380022415320946, -0.038372417220315584,
    -0.035056627436016605, 4.634363912435984E-5, -0.0019345945407556694, -0.0,
    -0.0046275598281650945, -0.0043932358301320314, 6.9202572103202192E-6,
    0.00093219348467385541, -0.0011301251608970195, -0.0094549611400509687,
    -0.035949097799074868, -0.039118963178182836, -0.00018840012431222731,
    -0.0028584044719204794, -0.0, -0.0057307040828358021, -0.0061209378716336575,
    -1.4228364171763658E-5, 0.00090443930240191118, -0.0011329532079862731,
    -0.011088696165303913, -0.032336970688930662, -0.04132810309639473,
    -0.00050011991607834452, -0.0039415515091365486, -0.0, -0.00664222892733604,
    -0.0079156577616609179, -5.2501371284616649E-5, 0.00080349399699248961,
    -0.0011121622881278001, -0.012642241664372788, -0.028395620667837858,
    -0.0418285314829304, -0.00087020044792009317, -0.0051761828183116993, -0.0,
    -0.0073597906534701579, -0.00969668181913341, -0.00011034171177573473,
    0.00063533798268077, -0.0010790145827917301, -0.01411896081282206,
    -0.024641539531302686, -0.040816497866809458, -0.0012796998356205361,
    -0.00655479171491834, -0.0, -0.0079004230433163576, -0.011394090655931458,
    -0.00018926275707432255, 0.00040824404672798584, -0.0010410718558982628,
    -0.01552239048802781, -0.02134831919825797, -0.0385250575094498,
    -0.0017105267608725728, -0.0080702287172710677, -0.0, -0.0082904698928620724,
    -0.01295023522278608, -0.00028990993190658812, 0.00013213075603135031,
    -0.0010030885797492424, -0.016856120469814714, -0.018626398129647937,
    -0.035209634693518316, -0.0021461428964605891, 0.0, 0.0, 0.0, 0.0,
    -0.00030623942171196546, 0.00047731536664842887, 0.002066526813039662,
    0.022172426283366305, 0.011387616330349713, -0.00015666644814812009, 0.0,
    0.00082774518149017452, 0.000529592610445747, -5.7389299890772109E-6,
    -0.00056396725231741681, 0.0007922466192322238, 0.0040450830466660882,
    0.033768034595554677, 0.021141612605666528, -0.00022480793913855988, 0.0,
    0.0020455667486544552, 0.0015016832971963196, -1.2281171297667541E-5,
    -0.00075945441536740617, 0.000984370751728749, 0.0059353031721315549,
    0.038284778592207587, 0.029063239819559016, -0.0001877515826036143, 0.0,
    0.0033690819832402682, 0.0028218463087974089, -1.4332584980973915E-5,
    -0.00088370610807833518, 0.0010877588806645171, 0.0077380022415320946,
    0.038372417220315584, 0.035056627436016605, -4.634363912435984E-5, 0.0,
    0.0046275598281650945, 0.0043932358301320314, -6.9202572103202192E-6,
    -0.00093219348467385541, 0.0011301251608970195, 0.0094549611400509687,
    0.035949097799074868, 0.039118963178182836, 0.00018840012431222731, 0.0,
    0.0057307040828358021, 0.0061209378716336575, 1.4228364171763658E-5,
    -0.00090443930240191118, 0.0011329532079862731, 0.011088696165303913,
    0.032336970688930662, 0.04132810309639473, 0.00050011991607834452, 0.0,
    0.00664222892733604, 0.0079156577616609179, 5.2501371284616649E-5,
    -0.00080349399699248961, 0.0011121622881278001, 0.012642241664372788,
    0.028395620667837858, 0.0418285314829304, 0.00087020044792009317, 0.0,
    0.0073597906534701579, 0.00969668181913341, 0.00011034171177573473,
    -0.00063533798268077, 0.0010790145827917301, 0.01411896081282206,
    0.024641539531302686, 0.040816497866809458, 0.0012796998356205361, 0.0,
    0.0079004230433163576, 0.011394090655931458, 0.00018926275707432255,
    -0.00040824404672798584, 0.0010410718558982628, 0.01552239048802781,
    0.02134831919825797, 0.0385250575094498, 0.0017105267608725728, 0.0,
    0.0082904698928620724, 0.01295023522278608, 0.00028990993190658812,
    -0.00013213075603135031, 0.0010030885797492424, 0.016856120469814714,
    0.018626398129647937, 0.035209634693518316, 0.0021461428964605891, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00031185892138120834,
    -0.00050257013436989741, 0.0021189752999033816, -0.023341150699844011,
    0.011594289336350715, 4.8538698886608567E-5, 0.00020586795104612229, -0.0,
    -0.00086995623361496588, 0.00053660101735923357, 1.5306708468308147E-6,
    -0.00057297910874745152, -0.00083359519431663322, 0.004119248160739955,
    -0.035495899890902981, 0.021430149447512051, 6.54082842232448E-5,
    0.00060627118913526379, -0.0, -0.0021471788857608319, 0.0015176122837254379,
    3.6460185703158066E-6, -0.00077034491777451411, -0.001035155325503919,
    0.0060112845231374149, -0.040171560763765359, 0.029352888902237733,
    7.6101215650564892E-5, 0.0011908412917109568, -0.0, -0.0035314309384240376,
    0.0028454618318544097, 6.6294921173456436E-6, -0.00089555200508320781,
    -0.0011434481783357141, 0.0078039387061703035, -0.0401761770089912,
    0.035300685361534516, 0.00010352169015720728, 0.0019500242678547547, -0.0,
    -0.0048429060012226393, 0.004421628723515118, 1.1770888489239871E-5,
    -0.00094453662973384325, -0.0011878922635308313, 0.0095046860602438655,
    -0.037542072616071238, 0.039295727814625439, 0.00016467428301353455,
    0.0028749549914754268, -0.0, -0.005987006717235, 0.0061505759056418863,
    2.1035254999411158E-5, -0.00091716878475691342, -0.0011912658049384594,
    0.01111986880888134, -0.033669554571301968, 0.041433198448315854,
    0.00026950643131986516, 0.0039573555927472333, -0.0, -0.00692632074987407,
    0.0079430910275364534, 3.6711018305390848E-5, -0.00081674138386906279,
    -0.0011704175763008568, 0.012654925863460518, -0.029468311129123081,
    0.041868716552104321, 0.00042112234888680477, 0.0051894553636579873, -0.0,
    -0.0076593329913996963, 0.00971897451281721, 6.1090607957709023E-5,
    -0.00064938830542570825, -0.0011372333641091216, 0.014114591733434101,
    -0.025484039012415069, 0.040804892537124514, 0.00061678702026516654,
    0.0065639287573136694, -0.0, -0.0082049716994792733, 0.01140904630781259,
    9.621210676253911E-5, -0.0004234631537616511, -0.0010996549666288814,
    0.01550305918633214, -0.022004664482222415, 0.038477622702890478,
    0.00084930644176672637, 0.0080738478468586686, -0.0, -0.0085919231511164072,
    0.012956473101216526, 0.00014367324314189123, -0.00014890838604834564,
    -0.0010626319711789308, 0.016824106212107545, -0.019144919197986637,
    0.035142704197345838, 0.0011085037444974752, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120834, 0.00050257013436989741, -0.0021189752999033816,
    0.023341150699844011, -0.011594289336350715, -4.8538698886608567E-5, 0.0,
    0.00086995623361496588, -0.00053660101735923357, -1.5306708468308147E-6,
    0.00057297910874745152, 0.00083359519431663322, -0.004119248160739955,
    0.035495899890902981, -0.021430149447512051, -6.54082842232448E-5, 0.0,
    0.0021471788857608319, -0.0015176122837254379, -3.6460185703158066E-6,
    0.00077034491777451411, 0.001035155325503919, -0.0060112845231374149,
    0.040171560763765359, -0.029352888902237733, -7.6101215650564892E-5, 0.0,
    0.0035314309384240376, -0.0028454618318544097, -6.6294921173456436E-6,
    0.00089555200508320781, 0.0011434481783357141, -0.0078039387061703035,
    0.0401761770089912, -0.035300685361534516, -0.00010352169015720728, 0.0,
    0.0048429060012226393, -0.004421628723515118, -1.1770888489239871E-5,
    0.00094453662973384325, 0.0011878922635308313, -0.0095046860602438655,
    0.037542072616071238, -0.039295727814625439, -0.00016467428301353455, 0.0,
    0.005987006717235, -0.0061505759056418863, -2.1035254999411158E-5,
    0.00091716878475691342, 0.0011912658049384594, -0.01111986880888134,
    0.033669554571301968, -0.041433198448315854, -0.00026950643131986516, 0.0,
    0.00692632074987407, -0.0079430910275364534, -3.6711018305390848E-5,
    0.00081674138386906279, 0.0011704175763008568, -0.012654925863460518,
    0.029468311129123081, -0.041868716552104321, -0.00042112234888680477, 0.0,
    0.0076593329913996963, -0.00971897451281721, -6.1090607957709023E-5,
    0.00064938830542570825, 0.0011372333641091216, -0.014114591733434101,
    0.025484039012415069, -0.040804892537124514, -0.00061678702026516654, 0.0,
    0.0082049716994792733, -0.01140904630781259, -9.621210676253911E-5,
    0.0004234631537616511, 0.0010996549666288814, -0.01550305918633214,
    0.022004664482222415, -0.038477622702890478, -0.00084930644176672637, 0.0,
    0.0085919231511164072, -0.012956473101216526, -0.00014367324314189123,
    0.00014890838604834564, 0.0010626319711789308, -0.016824106212107545,
    0.019144919197986637, -0.035142704197345838, -0.0011085037444974752, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00030054479102572547,
    0.00049767135583767474, -0.0021060467935265117, 0.023116544038926289,
    0.011176150484746518, -0.00015990468077679311, -0.00020472360440944681, -0.0,
    0.00086250459888361885, 0.00051992442604286435, -5.8493716335300836E-6,
    -0.00055357584434958845, 0.00082582972575257027, -0.0040963740802913793,
    0.0351884546314794, 0.020755271773573836, -0.00022930166594377192,
    -0.0006031382673933989, -0.0, 0.0021306025281304327, 0.0014745525426902745,
    -1.2527320172892051E-5, -0.00074557056444952052, 0.0010258881719512614,
    -0.0059814644588271574, 0.039872588438262253, 0.028540115168772581,
    -0.00019211696170261014, -0.0011851716423019643, -0.0, 0.0035075992244199615,
    0.0027713681646644862, -1.46882765012302E-5, -0.0008676565971343248,
    0.0011334747275251506, -0.0077700772574709181, 0.039937891366846612,
    0.034434766523231866, -4.9907041550486245E-5, -0.0019415513939444267, -0.0,
    0.0048155393478105258, 0.004315397802002437, -7.34214183640527E-6,
    -0.00091534992019124913, 0.0011775529445634482, -0.0094694972435115515,
    0.037387902246241632, 0.038434999109990681, 0.00018567409305926037,
    -0.0028636709460735806, -0.0, 0.00596046391467955, 0.0060134989801012458,
    1.3772680035192538E-5, -0.00088814905894720657, 0.0011805616857412788,
    -0.011085798160126016, 0.033602932633910773, 0.040616087041396992,
    0.00049778776367507334, -0.0039434810125758141, -0.0, 0.0069047842642461343,
    0.0077779949224503573, 5.2013988864612053E-5, -0.00078902133406024972,
    0.0011591169843456447, -0.012624091237964225, 0.029479801837986826,
    0.0411189906789786, 0.00086752465064485261, -0.0051734045321709405, -0.0,
    0.0076463100523052868, 0.00952959503961538, 0.00010978417410949378,
    -0.00062381636303371216, 0.0011249641755140449, -0.014088743071422632,
    0.025556864775857654, 0.040135731467599592, 0.0012758223267157289,
    -0.0065462715759112581, -0.0, 0.00820303525992785, 0.011199579034205169,
    0.0001885537429421543, -0.00040064012777111304, 0.0010859803475433754,
    -0.015483556773029566, 0.0221188082258435, 0.0378946723419464,
    0.0017046117505578507, -0.0080552705112773917, -0.0, 0.0086026269302377691,
    0.012731255590154726, 0.00028892914897577377, -0.000129220009118365,
    0.0010471094052040082, -0.016811916276412941, 0.019280023927169761,
    0.034646313177504842, 0.002137481497047595, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572547, -0.00049767135583767474, 0.0021060467935265117,
    -0.023116544038926289, -0.011176150484746518, 0.00015990468077679311, 0.0,
    -0.00086250459888361885, -0.00051992442604286435, 5.8493716335300836E-6,
    0.00055357584434958845, -0.00082582972575257027, 0.0040963740802913793,
    -0.0351884546314794, -0.020755271773573836, 0.00022930166594377192, 0.0,
    -0.0021306025281304327, -0.0014745525426902745, 1.2527320172892051E-5,
    0.00074557056444952052, -0.0010258881719512614, 0.0059814644588271574,
    -0.039872588438262253, -0.028540115168772581, 0.00019211696170261014, 0.0,
    -0.0035075992244199615, -0.0027713681646644862, 1.46882765012302E-5,
    0.0008676565971343248, -0.0011334747275251506, 0.0077700772574709181,
    -0.039937891366846612, -0.034434766523231866, 4.9907041550486245E-5, 0.0,
    -0.0048155393478105258, -0.004315397802002437, 7.34214183640527E-6,
    0.00091534992019124913, -0.0011775529445634482, 0.0094694972435115515,
    -0.037387902246241632, -0.038434999109990681, -0.00018567409305926037, 0.0,
    -0.00596046391467955, -0.0060134989801012458, -1.3772680035192538E-5,
    0.00088814905894720657, -0.0011805616857412788, 0.011085798160126016,
    -0.033602932633910773, -0.040616087041396992, -0.00049778776367507334, 0.0,
    -0.0069047842642461343, -0.0077779949224503573, -5.2013988864612053E-5,
    0.00078902133406024972, -0.0011591169843456447, 0.012624091237964225,
    -0.029479801837986826, -0.0411189906789786, -0.00086752465064485261, 0.0,
    -0.0076463100523052868, -0.00952959503961538, -0.00010978417410949378,
    0.00062381636303371216, -0.0011249641755140449, 0.014088743071422632,
    -0.025556864775857654, -0.040135731467599592, -0.0012758223267157289, 0.0,
    -0.00820303525992785, -0.011199579034205169, -0.0001885537429421543,
    0.00040064012777111304, -0.0010859803475433754, 0.015483556773029566,
    -0.0221188082258435, -0.0378946723419464, -0.0017046117505578507, 0.0,
    -0.0086026269302377691, -0.012731255590154726, -0.00028892914897577377,
    0.000129220009118365, -0.0010471094052040082, 0.016811916276412941,
    -0.019280023927169761, -0.034646313177504842, -0.002137481497047595, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0 };

  static const real_T s[1808]{ -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020445512957285371, 0.0014603487861040304, 4.9246767934457634E-6,
    -0.0052868326178782156, -0.0020754199270452173, 0.015163628780498446,
    3.1616010707720426E-7, -0.0, -0.00019811352068166364, -9.73333699342812E-5,
    0.00066585862709166957, -0.0040091552269349209, 0.0028909658887442155,
    6.5614497023245073E-6, -0.0080792362290577815, -0.0038844512459874081,
    0.026788702408483002, 6.8512917620797536E-7, -0.0, -0.00049104314225850254,
    -0.00027751213812133571, 0.0018419406261771351, -0.0058989572722036735,
    0.0042850903886228146, 6.1601073524460959E-6, -0.0091991288332427812,
    -0.0053836032115810945, 0.035691534155111788, 9.51595524168609E-7, -0.0,
    -0.00081150591943761959, -0.00052435232813021957, 0.0034085439914897236,
    -0.0077185036154530772, 0.0056372660414857906, 4.6396980079752364E-6,
    -0.00926906335060941, -0.006548320744319591, 0.042501234100522735,
    1.0377937756639665E-6, -0.0, -0.0011189252136054833, -0.00082088448415742132,
    0.0052736567007514515, -0.0094716827009443637, 0.0069435063749424446,
    2.6414509523473936E-6, -0.008739896629381582, -0.00737143213587389,
    0.047702538425699506, 9.1853767957218194E-7, -0.0, -0.0013916387797655108,
    -0.0011501728132765291, 0.0073666001295169623, -0.011161718745088724,
    0.008201241533242561, 5.8494966353777778E-7, -0.00792273074079747,
    -0.007861076035806859, 0.051668868765490657, 6.01743722369558E-7, -0.0,
    -0.001620703686020732, -0.0014960212712305325, 0.0096331287280922023,
    -0.012791205168029366, 0.0094091464493969573, -1.2790233473825457E-6,
    -0.0070202354586047528, -0.0080382793893777667, 0.054687847403532837,
    1.1391978754040816E-7, -0.0, -0.001805191914282023, -0.0018435530683128011,
    0.012031653450661765, -0.01436216724881885, 0.010566918108659434,
    -2.8223985500875043E-6, -0.0061546448498688575, -0.007934340486205024,
    0.056980982028061261, -5.1013685987928413E-7, -0.0, -0.0019487749913619972,
    -0.0021796573224240928, 0.014530331906291044, -0.015876144576630242,
    0.011675045183589609, -4.0018112448208258E-6, -0.0053912134366169567,
    -0.0075881528377809079, 0.058718842971069225, -1.2342489191791384E-6, -0.0,
    -0.0020573611713821547, -0.002493302894833033, 0.017104826530695772,
    -0.017334285099427416, 0.012734595324628301, -4.8286811668071772E-6,
    -0.0047568768666075411, -0.0070435863941390019, 0.060032756331813382, 0.0,
    0.0, 0.0, 0.0, 0.0020445512957285371, -0.0014603487861040304,
    -4.9246767934457634E-6, 0.0052868326178782156, 0.0020754199270452173,
    -0.015163628780498446, 0.0, 0.00019811352068166364, 9.73333699342812E-5,
    -0.00066585862709166957, 0.0040091552269349209, -0.0028909658887442155,
    -6.5614497023245073E-6, 0.0080792362290577815, 0.0038844512459874081,
    -0.026788702408483002, 0.0, 0.00049104314225850254, 0.00027751213812133571,
    -0.0018419406261771351, 0.0058989572722036735, -0.0042850903886228146,
    -6.1601073524460959E-6, 0.0091991288332427812, 0.0053836032115810945,
    -0.035691534155111788, 0.0, 0.00081150591943761959, 0.00052435232813021957,
    -0.0034085439914897236, 0.0077185036154530772, -0.0056372660414857906,
    -4.6396980079752364E-6, 0.00926906335060941, 0.006548320744319591,
    -0.042501234100522735, 0.0, 0.0011189252136054833, 0.00082088448415742132,
    -0.0052736567007514515, 0.0094716827009443637, -0.0069435063749424446,
    -2.6414509523473936E-6, 0.008739896629381582, 0.00737143213587389,
    -0.047702538425699506, 0.0, 0.0013916387797655108, 0.0011501728132765291,
    -0.0073666001295169623, 0.011161718745088724, -0.008201241533242561,
    -5.8494966353777778E-7, 0.00792273074079747, 0.007861076035806859,
    -0.051668868765490657, 0.0, 0.001620703686020732, 0.0014960212712305325,
    -0.0096331287280922023, 0.012791205168029366, -0.0094091464493969573,
    1.2790233473825457E-6, 0.0070202354586047528, 0.0080382793893777667,
    -0.054687847403532837, 0.0, 0.001805191914282023, 0.0018435530683128011,
    -0.012031653450661765, 0.01436216724881885, -0.010566918108659434,
    2.8223985500875043E-6, 0.0061546448498688575, 0.007934340486205024,
    -0.056980982028061261, 0.0, 0.0019487749913619972, 0.0021796573224240928,
    -0.014530331906291044, 0.015876144576630242, -0.011675045183589609,
    4.0018112448208258E-6, 0.0053912134366169567, 0.0075881528377809079,
    -0.058718842971069225, 0.0, 0.0020573611713821547, 0.002493302894833033,
    -0.017104826530695772, 0.017334285099427416, -0.012734595324628301,
    4.8286811668071772E-6, 0.0047568768666075411, 0.0070435863941390019,
    -0.060032756331813382, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0020430568849590363, -0.0014846744549160563, -7.0936716057342316E-6,
    0.0051391900270571448, -0.0021227702215873057, 0.015228232305159621,
    -5.1746825674618411E-7, -0.0, 0.00019360954683992086, -9.8951619720029927E-5,
    0.00066903596330777568, -0.0040067314306774949, -0.0029322591857517642,
    -1.0565746060026215E-5, 0.0078884598525309352, -0.0039509928253638827,
    0.026917231873970968, -1.25018041672658E-6, -0.0, 0.0004813724987437641,
    -0.0002812123096721656, 0.0018515897913409906, -0.0058959962902359435,
    -0.00433805660413819, -1.1566011819059168E-5, 0.00901826988341082,
    -0.0054509447270126056, 0.03588820965614524, -1.99674342474268E-6, -0.0,
    0.00079779982914969841, -0.000529877384341185, 0.0034281815934806724,
    -0.0077152543580130614, -0.0056981223890151169, -1.0967109079724052E-5,
    0.0091195753483278869, -0.00660567593380442, 0.04277015614884281,
    -2.6308219371928471E-6, -0.0, 0.0011028937830708171, -0.0008275864795065065,
    0.005306950518510354, -0.0094682805098512471, -0.0070095628750181035,
    -9.4049919993817815E-6, 0.0086253321268044067, -0.0074136435021352051,
    0.048045444848981857, -3.0797420946197447E-6, -0.0, 0.0013749180814484161,
    -0.0011572507586087781, 0.00741723100352391, -0.011158213201939327,
    -0.00827058862369585, -7.3245584742921849E-6, 0.0078377590270683143,
    -0.0078869236468970261, 0.052084536642155926, -3.3076191174553684E-6, -0.0,
    0.0016045634974302969, -0.001502682321689071, 0.0097046471474189055,
    -0.012787584797297882, -0.009480426545954863, -5.0236620287564976E-6,
    0.0069562410011868329, -0.0080491061052958713, 0.055172377151487921,
    -3.3026429098114517E-6, -0.0, 0.0017904596235921708, -0.0018491127346458545,
    0.012127361717645797, -0.014358380565562009, -0.010639161635940208,
    -2.6918556487285848E-6, 0.0061029256813059174, -0.0079329836605401376,
    0.057528472990236564, -3.0679042907758847E-6, -0.0, 0.0019358763409865634,
    -0.0021835932805221218, 0.014653203386246897, -0.01587211736084377,
    -0.01174755497429808, -4.42337866151435E-7, 0.00534457038431273,
    -0.007578149996654163, 0.059322164719128163, -2.6150642512061722E-6, -0.0,
    0.0020464129014495149, -0.0024952750539298735, 0.017257462274893824,
    -0.0173299340528133, -0.012806866470529164, 1.663084598604466E-6,
    0.0047101836644297549, -0.0070286124953556394, 0.060684253833634447, 0.0,
    0.0, 0.0, 0.0, 0.0020430568849590363, 0.0014846744549160563,
    7.0936716057342316E-6, -0.0051391900270571448, 0.0021227702215873057,
    -0.015228232305159621, 0.0, -0.00019360954683992086, 9.8951619720029927E-5,
    -0.00066903596330777568, 0.0040067314306774949, 0.0029322591857517642,
    1.0565746060026215E-5, -0.0078884598525309352, 0.0039509928253638827,
    -0.026917231873970968, 0.0, -0.0004813724987437641, 0.0002812123096721656,
    -0.0018515897913409906, 0.0058959962902359435, 0.00433805660413819,
    1.1566011819059168E-5, -0.00901826988341082, 0.0054509447270126056,
    -0.03588820965614524, 0.0, -0.00079779982914969841, 0.000529877384341185,
    -0.0034281815934806724, 0.0077152543580130614, 0.0056981223890151169,
    1.0967109079724052E-5, -0.0091195753483278869, 0.00660567593380442,
    -0.04277015614884281, 0.0, -0.0011028937830708171, 0.0008275864795065065,
    -0.005306950518510354, 0.0094682805098512471, 0.0070095628750181035,
    9.4049919993817815E-6, -0.0086253321268044067, 0.0074136435021352051,
    -0.048045444848981857, 0.0, -0.0013749180814484161, 0.0011572507586087781,
    -0.00741723100352391, 0.011158213201939327, 0.00827058862369585,
    7.3245584742921849E-6, -0.0078377590270683143, 0.0078869236468970261,
    -0.052084536642155926, 0.0, -0.0016045634974302969, 0.001502682321689071,
    -0.0097046471474189055, 0.012787584797297882, 0.009480426545954863,
    5.0236620287564976E-6, -0.0069562410011868329, 0.0080491061052958713,
    -0.055172377151487921, 0.0, -0.0017904596235921708, 0.0018491127346458545,
    -0.012127361717645797, 0.014358380565562009, 0.010639161635940208,
    2.6918556487285848E-6, -0.0061029256813059174, 0.0079329836605401376,
    -0.057528472990236564, 0.0, -0.0019358763409865634, 0.0021835932805221218,
    -0.014653203386246897, 0.01587211736084377, 0.01174755497429808,
    4.42337866151435E-7, -0.00534457038431273, 0.007578149996654163,
    -0.059322164719128163, 0.0, -0.0020464129014495149, 0.0024952750539298735,
    -0.017257462274893824, 0.0173299340528133, 0.012806866470529164,
    -1.663084598604466E-6, -0.0047101836644297549, 0.0070286124953556394,
    -0.060684253833634447, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021016480453829815, 0.0014857887933183286, 4.7070151263154063E-6,
    -0.0050961555194273559, -0.0020754929921346357, -0.015462266265499226,
    3.0426878718878496E-7, -0.0, -0.00019216872658156067, -9.73459460026197E-5,
    -0.0006792751071504849, -0.0041074683619141631, 0.0029340512081696577,
    6.3057460452133884E-6, -0.00782907896809333, -0.0038849506557918018,
    -0.027331354583334473, 6.6273426813855175E-7, -0.0, -0.00047814040658582105,
    -0.000277566493848083, -0.0018802229105924365, -0.0060264210814452886,
    0.0043402263594654331, 5.9587145352081763E-6, -0.0089598311740056828,
    -0.0053848318467642564, -0.036451644592615427, 9.2636180986459172E-7, -0.0,
    -0.0007930998311513511, -0.00052449064683289992, -0.0034822500476397213,
    -0.0078659750107290677, 0.0057004858091328926, 4.5303525006595133E-6,
    -0.0090720820218160424, -0.0065504901027000958, -0.04346807648358772,
    1.0194144264559595E-6, -0.0, -0.0010974076290702971, -0.00082115681443972331,
    -0.0053930322171731326, -0.0096322567462445857, 0.00701202851618736,
    2.6300941233486434E-6, -0.0085934122806193176, -0.0073746438770505617,
    -0.048873310311435589, 9.1637309261321547E-7, -0.0, -0.0013694590279160136,
    -0.001150631492424329, -0.0075418405117768745, -0.011330203401756304,
    0.0082731347444936279, 6.61013790805109E-7, -0.00782228984031321,
    -0.0078653210901301167, -0.053043720345121143, 6.2369573871460237E-7, -0.0,
    -0.0015999229352117708, -0.0014967156366828343, -0.0098744448046202624,
    -0.012963718195152128, 0.0094830801904353113, -1.1328950919024408E-6,
    -0.0069556646472008427, -0.0080434495506573524, -0.056266866774456553,
    1.6606812914153581E-7, -0.0, -0.0017873120317849199, -0.001844524963056166,
    -0.012349220884839871, -0.014535826846399721, 0.010641980597964829,
    -2.6245895611173081E-6, -0.0061142707936579534, -0.00794024786087918,
    -0.058762467425333663, -4.2346592189730975E-7, -0.0, -0.0019347286197374006,
    -0.0021809376864936609, -0.014934176702927581, -0.016048831986543406,
    0.011750612976507079, -3.7686667972724733E-6, -0.0053642122139471319,
    -0.0075945532602473683, -0.060698414364158154, -1.1102016279514281E-6, -0.0,
    -0.0020475860319608364, -0.0024949095612962508, -0.017604680748317732,
    -0.017504462457878039, 0.012810241540071939, -4.5731930224289468E-6,
    -0.0047343841216166494, -0.0070502037507671972, -0.062203013141477644, 0.0,
    0.0, 0.0, 0.0, 0.0021016480453829815, -0.0014857887933183286,
    -4.7070151263154063E-6, 0.0050961555194273559, 0.0020754929921346357,
    0.015462266265499226, 0.0, 0.00019216872658156067, 9.73459460026197E-5,
    0.0006792751071504849, 0.0041074683619141631, -0.0029340512081696577,
    -6.3057460452133884E-6, 0.00782907896809333, 0.0038849506557918018,
    0.027331354583334473, 0.0, 0.00047814040658582105, 0.000277566493848083,
    0.0018802229105924365, 0.0060264210814452886, -0.0043402263594654331,
    -5.9587145352081763E-6, 0.0089598311740056828, 0.0053848318467642564,
    0.036451644592615427, 0.0, 0.0007930998311513511, 0.00052449064683289992,
    0.0034822500476397213, 0.0078659750107290677, -0.0057004858091328926,
    -4.5303525006595133E-6, 0.0090720820218160424, 0.0065504901027000958,
    0.04346807648358772, 0.0, 0.0010974076290702971, 0.00082115681443972331,
    0.0053930322171731326, 0.0096322567462445857, -0.00701202851618736,
    -2.6300941233486434E-6, 0.0085934122806193176, 0.0073746438770505617,
    0.048873310311435589, 0.0, 0.0013694590279160136, 0.001150631492424329,
    0.0075418405117768745, 0.011330203401756304, -0.0082731347444936279,
    -6.61013790805109E-7, 0.00782228984031321, 0.0078653210901301167,
    0.053043720345121143, 0.0, 0.0015999229352117708, 0.0014967156366828343,
    0.0098744448046202624, 0.012963718195152128, -0.0094830801904353113,
    1.1328950919024408E-6, 0.0069556646472008427, 0.0080434495506573524,
    0.056266866774456553, 0.0, 0.0017873120317849199, 0.001844524963056166,
    0.012349220884839871, 0.014535826846399721, -0.010641980597964829,
    2.6245895611173081E-6, 0.0061142707936579534, 0.00794024786087918,
    0.058762467425333663, 0.0, 0.0019347286197374006, 0.0021809376864936609,
    0.014934176702927581, 0.016048831986543406, -0.011750612976507079,
    3.7686667972724733E-6, 0.0053642122139471319, 0.0075945532602473683,
    0.060698414364158154, 0.0, 0.0020475860319608364, 0.0024949095612962508,
    0.017604680748317732, 0.017504462457878039, -0.012810241540071939,
    4.5731930224289468E-6, 0.0047343841216166494, 0.0070502037507671972,
    0.062203013141477644, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0021001536346134803, -0.0014592344477017574, -7.3113332728645879E-6,
    0.0053298671255080053, -0.0021228432866767255, -0.015397662740838059,
    -5.2935957663460309E-7, -0.0, 0.00019955434094002391, -9.8964195788368479E-5,
    -0.00067609777093437912, -0.0041050445656567363, -0.0028891738663263207,
    -1.082144971713733E-5, 0.00813861711349539, -0.0039514922351682781,
    -0.027202825117846524, -1.2725753247960032E-6, -0.0, 0.00049427523441644564,
    -0.00028126666539891307, -0.0018705737454285823, -0.0060234600994775568,
    -0.00428292063329557, -1.176740463629708E-5, 0.0092575675426479209,
    -0.00545217336219577, -0.036254969091582, -2.0219771390466966E-6, -0.0,
    0.000816205917435967, -0.00053001570304386553, -0.0034626124456487747,
    -0.00786272575328905, -0.0056349026213680133, -1.1076454587039766E-5,
    0.0093165566771212568, -0.0066078452921849284, -0.043199154435267666,
    -2.649201286400853E-6, -0.0, 0.0011244113676060037, -0.00082785880978880882,
    -0.0053597383994142336, -0.0096288545551514691, -0.0069410407337731853,
    -9.41634882838052E-6, 0.0087718164755666728, -0.007416855243311881,
    -0.048530403888153259, -3.0819066815787091E-6, -0.0, 0.0013970978332979137,
    -0.0011577094377565786, -0.00749120963776993, -0.011326697858606906,
    -0.00819869541244478, -7.24849434702484E-6, 0.0079381999275525764,
    -0.0078911687012202889, -0.0526280524684559, -3.2856671011103207E-6, -0.0,
    0.0016253442482392585, -0.0015033766871413736, -0.0098029263852935644,
    -0.012960097824420645, -0.0094064928049165039, -4.8775337732763766E-6,
    0.0070208118125907448, -0.0080542762665754622, -0.0557823370265015,
    -3.25049456821032E-6, -0.0, 0.0018083395060892744, -0.0018500846293892205,
    -0.012253512617855846, -0.014532040163142882, -0.010564099146634807,
    -2.4940466597583703E-6, 0.0061432997375168224, -0.0079388910352142985,
    -0.058214976463158388, -2.9812333527939047E-6, -0.0, 0.0019499227126111602,
    -0.0021848736445916912, -0.014811305222971737, -0.016044804770756937,
    -0.011671987181380605, -2.091934186030613E-7, 0.0053715716069825548,
    -0.0075845504191206286, -0.060095092616099251, -2.4910169599784537E-6, -0.0,
    0.0020561880408708341, -0.0024968817203930927, -0.017452045004119694,
    -0.017500111411263931, -0.012731220255085524, 1.9185727429827189E-6,
    0.0047326764094206457, -0.00703522985198384, -0.061551515639656613, 0.0, 0.0,
    0.0, 0.0, 0.0021001536346134803, 0.0014592344477017574,
    7.3113332728645879E-6, -0.0053298671255080053, 0.0021228432866767255,
    0.015397662740838059, 0.0, -0.00019955434094002391, 9.8964195788368479E-5,
    0.00067609777093437912, 0.0041050445656567363, 0.0028891738663263207,
    1.082144971713733E-5, -0.00813861711349539, 0.0039514922351682781,
    0.027202825117846524, 0.0, -0.00049427523441644564, 0.00028126666539891307,
    0.0018705737454285823, 0.0060234600994775568, 0.00428292063329557,
    1.176740463629708E-5, -0.0092575675426479209, 0.00545217336219577,
    0.036254969091582, 0.0, -0.000816205917435967, 0.00053001570304386553,
    0.0034626124456487747, 0.00786272575328905, 0.0056349026213680133,
    1.1076454587039766E-5, -0.0093165566771212568, 0.0066078452921849284,
    0.043199154435267666, 0.0, -0.0011244113676060037, 0.00082785880978880882,
    0.0053597383994142336, 0.0096288545551514691, 0.0069410407337731853,
    9.41634882838052E-6, -0.0087718164755666728, 0.007416855243311881,
    0.048530403888153259, 0.0, -0.0013970978332979137, 0.0011577094377565786,
    0.00749120963776993, 0.011326697858606906, 0.00819869541244478,
    7.24849434702484E-6, -0.0079381999275525764, 0.0078911687012202889,
    0.0526280524684559, 0.0, -0.0016253442482392585, 0.0015033766871413736,
    0.0098029263852935644, 0.012960097824420645, 0.0094064928049165039,
    4.8775337732763766E-6, -0.0070208118125907448, 0.0080542762665754622,
    0.0557823370265015, 0.0, -0.0018083395060892744, 0.0018500846293892205,
    0.012253512617855846, 0.014532040163142882, 0.010564099146634807,
    2.4940466597583703E-6, -0.0061432997375168224, 0.0079388910352142985,
    0.058214976463158388, 0.0, -0.0019499227126111602, 0.0021848736445916912,
    0.014811305222971737, 0.016044804770756937, 0.011671987181380605,
    2.091934186030613E-7, -0.0053715716069825548, 0.0075845504191206286,
    0.060095092616099251, 0.0, -0.0020561880408708341, 0.0024968817203930927,
    0.017452045004119694, 0.017500111411263931, 0.012731220255085524,
    -1.9185727429827189E-6, -0.0047326764094206457, 0.00703522985198384,
    0.061551515639656613, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.00030616429069496923, 0.00048221414518065164, 0.0020535983066627917,
    0.022397032944284023, -0.011382823490747531, -4.5300466257935429E-5,
    0.00020111824649365363, -0.0, 0.00083519681622152143,
    -0.00052693283295635128, -1.4202292023779372E-6, 0.00056258770077962489,
    0.00080001208779628685, 0.0040222089662175116, 0.034075479854978247,
    -0.021043808615419376, -6.0914557418032596E-5, 0.00059482891125992249, -0.0,
    0.002062143106284854, -0.0014904815292193945, -3.3998696950912874E-6,
    0.00075646106685663085, 0.0009936379052814066, 0.0059054831078212966,
    0.038583750917710678, -0.028829764251451326, -7.1735836551568879E-5,
    0.0011726262150481637, -0.0, 0.0033929136972443439, -0.0027949836877214896,
    -6.2738005970893479E-6, 0.00087950249413920047, 0.0010977323314750806,
    0.0077041407928327083, 0.038610702862460149, -0.034678824448749805,
    -9.99582877310808E-5, 0.0019261216668453409, -0.0, 0.004654926481577208,
    -0.004343790695385528, -1.1349003863154811E-5, 0.00092769306525124055,
    0.0011404644798644031, 0.0094197723233186512, 0.036103268168904461,
    -0.038611763746433318, -0.00016194825176056761, 0.0028471204265186328, -0.0,
    0.0057572468853912514, -0.00604313701410948, -2.0579570862840042E-5,
    0.00090087854130221272, 0.0011436573271834541, 0.011054625516548585,
    0.03240359262632185, -0.040721182393318144, -0.00026717427891659415,
    0.0039276769289651285, -0.0, 0.006663765412963975, -0.0078054281883259,
    -3.6223635885386266E-5, 0.00080226872093682724, 0.0011234628800830127,
    0.012611407038876492, 0.028384129958974106, -0.041159175748152539,
    -0.00041844655161156453, 0.0051601319868246516, -0.0, 0.0073728135925645675,
    -0.009551887733299189, -6.0533070291468119E-5, 0.000637866685778655,
    0.0010912837713868075, 0.014093112150810589, 0.024568713767860097,
    -0.040124126137914662, -0.00061290951136036, 0.0065371345335159276, -0.0,
    0.0079023594828677816, -0.011214534686086311, -9.5503092630370968E-5,
    0.000415859234804783, 0.0010547464749837694, 0.015502888074725234,
    0.021234175454636881, -0.037847237535387088, -0.00084339143145200518,
    0.0080516513816897874, -0.0, 0.0082797661137407122, -0.012737493468585182,
    -0.00014269246021107707, 0.00014599763913536522, 0.0010186111457241656,
    0.016843930534120106, 0.01849129340046481, -0.034579382681332371,
    -0.001099842345084482, 0.0, 0.0, 0.0, 0.0, -0.00030616429069496923,
    -0.00048221414518065164, -0.0020535983066627917, -0.022397032944284023,
    0.011382823490747531, 4.5300466257935429E-5, 0.0, -0.00083519681622152143,
    0.00052693283295635128, 1.4202292023779372E-6, -0.00056258770077962489,
    -0.00080001208779628685, -0.0040222089662175116, -0.034075479854978247,
    0.021043808615419376, 6.0914557418032596E-5, 0.0, -0.002062143106284854,
    0.0014904815292193945, 3.3998696950912874E-6, -0.00075646106685663085,
    -0.0009936379052814066, -0.0059054831078212966, -0.038583750917710678,
    0.028829764251451326, 7.1735836551568879E-5, 0.0, -0.0033929136972443439,
    0.0027949836877214896, 6.2738005970893479E-6, -0.00087950249413920047,
    -0.0010977323314750806, -0.0077041407928327083, -0.038610702862460149,
    0.034678824448749805, 9.99582877310808E-5, 0.0, -0.004654926481577208,
    0.004343790695385528, 1.1349003863154811E-5, -0.00092769306525124055,
    -0.0011404644798644031, -0.0094197723233186512, -0.036103268168904461,
    0.038611763746433318, 0.00016194825176056761, 0.0, -0.0057572468853912514,
    0.00604313701410948, 2.0579570862840042E-5, -0.00090087854130221272,
    -0.0011436573271834541, -0.011054625516548585, -0.03240359262632185,
    0.040721182393318144, 0.00026717427891659415, 0.0, -0.006663765412963975,
    0.0078054281883259, 3.6223635885386266E-5, -0.00080226872093682724,
    -0.0011234628800830127, -0.012611407038876492, -0.028384129958974106,
    0.041159175748152539, 0.00041844655161156453, 0.0, -0.0073728135925645675,
    0.009551887733299189, 6.0533070291468119E-5, -0.000637866685778655,
    -0.0010912837713868075, -0.014093112150810589, -0.024568713767860097,
    0.040124126137914662, 0.00061290951136036, 0.0, -0.0079023594828677816,
    0.011214534686086311, 9.5503092630370968E-5, -0.000415859234804783,
    -0.0010547464749837694, -0.015502888074725234, -0.021234175454636881,
    0.037847237535387088, 0.00084339143145200518, 0.0, -0.0082797661137407122,
    0.012737493468585182, 0.00014269246021107707, -0.00014599763913536522,
    -0.0010186111457241656, -0.016843930534120106, -0.01849129340046481,
    0.034579382681332371, 0.001099842345084482, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 0.00030623942171196546, -0.00047731536664842887,
    -0.002066526813039662, -0.022172426283366305, -0.011387616330349713,
    0.00015666644814812009, -0.0002022625931303291, -0.0,
    -0.00082774518149017452, -0.000529592610445747, 5.7389299890772109E-6,
    0.00056396725231741681, -0.0007922466192322238, -0.0040450830466660882,
    -0.033768034595554677, -0.021141612605666528, 0.00022480793913855988,
    -0.0005979618330017876, -0.0, -0.0020455667486544552, -0.0015016832971963196,
    1.2281171297667541E-5, 0.00075945441536740617, -0.000984370751728749,
    -0.0059353031721315549, -0.038284778592207587, -0.029063239819559016,
    0.0001877515826036143, -0.0011782958644571567, -0.0, -0.0033690819832402682,
    -0.0028218463087974089, 1.4332584980973915E-5, 0.00088370610807833518,
    -0.0010877588806645171, -0.0077380022415320946, -0.038372417220315584,
    -0.035056627436016605, 4.634363912435984E-5, -0.0019345945407556694, -0.0,
    -0.0046275598281650945, -0.0043932358301320314, 6.9202572103202192E-6,
    0.00093219348467385541, -0.0011301251608970195, -0.0094549611400509687,
    -0.035949097799074868, -0.039118963178182836, -0.00018840012431222731,
    -0.0028584044719204794, -0.0, -0.0057307040828358021, -0.0061209378716336575,
    -1.4228364171763658E-5, 0.00090443930240191118, -0.0011329532079862731,
    -0.011088696165303913, -0.032336970688930662, -0.04132810309639473,
    -0.00050011991607834452, -0.0039415515091365486, -0.0, -0.00664222892733604,
    -0.0079156577616609179, -5.2501371284616649E-5, 0.00080349399699248961,
    -0.0011121622881278001, -0.012642241664372788, -0.028395620667837858,
    -0.0418285314829304, -0.00087020044792009317, -0.0051761828183116993, -0.0,
    -0.0073597906534701579, -0.00969668181913341, -0.00011034171177573473,
    0.00063533798268077, -0.0010790145827917301, -0.01411896081282206,
    -0.024641539531302686, -0.040816497866809458, -0.0012796998356205361,
    -0.00655479171491834, -0.0, -0.0079004230433163576, -0.011394090655931458,
    -0.00018926275707432255, 0.00040824404672798584, -0.0010410718558982628,
    -0.01552239048802781, -0.02134831919825797, -0.0385250575094498,
    -0.0017105267608725728, -0.0080702287172710677, -0.0, -0.0082904698928620724,
    -0.01295023522278608, -0.00028990993190658812, 0.00013213075603135031,
    -0.0010030885797492424, -0.016856120469814714, -0.018626398129647937,
    -0.035209634693518316, -0.0021461428964605891, 0.0, 0.0, 0.0, 0.0,
    -0.00030623942171196546, 0.00047731536664842887, 0.002066526813039662,
    0.022172426283366305, 0.011387616330349713, -0.00015666644814812009, 0.0,
    0.00082774518149017452, 0.000529592610445747, -5.7389299890772109E-6,
    -0.00056396725231741681, 0.0007922466192322238, 0.0040450830466660882,
    0.033768034595554677, 0.021141612605666528, -0.00022480793913855988, 0.0,
    0.0020455667486544552, 0.0015016832971963196, -1.2281171297667541E-5,
    -0.00075945441536740617, 0.000984370751728749, 0.0059353031721315549,
    0.038284778592207587, 0.029063239819559016, -0.0001877515826036143, 0.0,
    0.0033690819832402682, 0.0028218463087974089, -1.4332584980973915E-5,
    -0.00088370610807833518, 0.0010877588806645171, 0.0077380022415320946,
    0.038372417220315584, 0.035056627436016605, -4.634363912435984E-5, 0.0,
    0.0046275598281650945, 0.0043932358301320314, -6.9202572103202192E-6,
    -0.00093219348467385541, 0.0011301251608970195, 0.0094549611400509687,
    0.035949097799074868, 0.039118963178182836, 0.00018840012431222731, 0.0,
    0.0057307040828358021, 0.0061209378716336575, 1.4228364171763658E-5,
    -0.00090443930240191118, 0.0011329532079862731, 0.011088696165303913,
    0.032336970688930662, 0.04132810309639473, 0.00050011991607834452, 0.0,
    0.00664222892733604, 0.0079156577616609179, 5.2501371284616649E-5,
    -0.00080349399699248961, 0.0011121622881278001, 0.012642241664372788,
    0.028395620667837858, 0.0418285314829304, 0.00087020044792009317, 0.0,
    0.0073597906534701579, 0.00969668181913341, 0.00011034171177573473,
    -0.00063533798268077, 0.0010790145827917301, 0.01411896081282206,
    0.024641539531302686, 0.040816497866809458, 0.0012796998356205361, 0.0,
    0.0079004230433163576, 0.011394090655931458, 0.00018926275707432255,
    -0.00040824404672798584, 0.0010410718558982628, 0.01552239048802781,
    0.02134831919825797, 0.0385250575094498, 0.0017105267608725728, 0.0,
    0.0082904698928620724, 0.01295023522278608, 0.00028990993190658812,
    -0.00013213075603135031, 0.0010030885797492424, 0.016856120469814714,
    0.018626398129647937, 0.035209634693518316, 0.0021461428964605891, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00031185892138120834,
    -0.00050257013436989741, 0.0021189752999033816, -0.023341150699844011,
    0.011594289336350715, 4.8538698886608567E-5, 0.00020586795104612229, -0.0,
    -0.00086995623361496588, 0.00053660101735923357, 1.5306708468308147E-6,
    -0.00057297910874745152, -0.00083359519431663322, 0.004119248160739955,
    -0.035495899890902981, 0.021430149447512051, 6.54082842232448E-5,
    0.00060627118913526379, -0.0, -0.0021471788857608319, 0.0015176122837254379,
    3.6460185703158066E-6, -0.00077034491777451411, -0.001035155325503919,
    0.0060112845231374149, -0.040171560763765359, 0.029352888902237733,
    7.6101215650564892E-5, 0.0011908412917109568, -0.0, -0.0035314309384240376,
    0.0028454618318544097, 6.6294921173456436E-6, -0.00089555200508320781,
    -0.0011434481783357141, 0.0078039387061703035, -0.0401761770089912,
    0.035300685361534516, 0.00010352169015720728, 0.0019500242678547547, -0.0,
    -0.0048429060012226393, 0.004421628723515118, 1.1770888489239871E-5,
    -0.00094453662973384325, -0.0011878922635308313, 0.0095046860602438655,
    -0.037542072616071238, 0.039295727814625439, 0.00016467428301353455,
    0.0028749549914754268, -0.0, -0.005987006717235, 0.0061505759056418863,
    2.1035254999411158E-5, -0.00091716878475691342, -0.0011912658049384594,
    0.01111986880888134, -0.033669554571301968, 0.041433198448315854,
    0.00026950643131986516, 0.0039573555927472333, -0.0, -0.00692632074987407,
    0.0079430910275364534, 3.6711018305390848E-5, -0.00081674138386906279,
    -0.0011704175763008568, 0.012654925863460518, -0.029468311129123081,
    0.041868716552104321, 0.00042112234888680477, 0.0051894553636579873, -0.0,
    -0.0076593329913996963, 0.00971897451281721, 6.1090607957709023E-5,
    -0.00064938830542570825, -0.0011372333641091216, 0.014114591733434101,
    -0.025484039012415069, 0.040804892537124514, 0.00061678702026516654,
    0.0065639287573136694, -0.0, -0.0082049716994792733, 0.01140904630781259,
    9.621210676253911E-5, -0.0004234631537616511, -0.0010996549666288814,
    0.01550305918633214, -0.022004664482222415, 0.038477622702890478,
    0.00084930644176672637, 0.0080738478468586686, -0.0, -0.0085919231511164072,
    0.012956473101216526, 0.00014367324314189123, -0.00014890838604834564,
    -0.0010626319711789308, 0.016824106212107545, -0.019144919197986637,
    0.035142704197345838, 0.0011085037444974752, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120834, 0.00050257013436989741, -0.0021189752999033816,
    0.023341150699844011, -0.011594289336350715, -4.8538698886608567E-5, 0.0,
    0.00086995623361496588, -0.00053660101735923357, -1.5306708468308147E-6,
    0.00057297910874745152, 0.00083359519431663322, -0.004119248160739955,
    0.035495899890902981, -0.021430149447512051, -6.54082842232448E-5, 0.0,
    0.0021471788857608319, -0.0015176122837254379, -3.6460185703158066E-6,
    0.00077034491777451411, 0.001035155325503919, -0.0060112845231374149,
    0.040171560763765359, -0.029352888902237733, -7.6101215650564892E-5, 0.0,
    0.0035314309384240376, -0.0028454618318544097, -6.6294921173456436E-6,
    0.00089555200508320781, 0.0011434481783357141, -0.0078039387061703035,
    0.0401761770089912, -0.035300685361534516, -0.00010352169015720728, 0.0,
    0.0048429060012226393, -0.004421628723515118, -1.1770888489239871E-5,
    0.00094453662973384325, 0.0011878922635308313, -0.0095046860602438655,
    0.037542072616071238, -0.039295727814625439, -0.00016467428301353455, 0.0,
    0.005987006717235, -0.0061505759056418863, -2.1035254999411158E-5,
    0.00091716878475691342, 0.0011912658049384594, -0.01111986880888134,
    0.033669554571301968, -0.041433198448315854, -0.00026950643131986516, 0.0,
    0.00692632074987407, -0.0079430910275364534, -3.6711018305390848E-5,
    0.00081674138386906279, 0.0011704175763008568, -0.012654925863460518,
    0.029468311129123081, -0.041868716552104321, -0.00042112234888680477, 0.0,
    0.0076593329913996963, -0.00971897451281721, -6.1090607957709023E-5,
    0.00064938830542570825, 0.0011372333641091216, -0.014114591733434101,
    0.025484039012415069, -0.040804892537124514, -0.00061678702026516654, 0.0,
    0.0082049716994792733, -0.01140904630781259, -9.621210676253911E-5,
    0.0004234631537616511, 0.0010996549666288814, -0.01550305918633214,
    0.022004664482222415, -0.038477622702890478, -0.00084930644176672637, 0.0,
    0.0085919231511164072, -0.012956473101216526, -0.00014367324314189123,
    0.00014890838604834564, 0.0010626319711789308, -0.016824106212107545,
    0.019144919197986637, -0.035142704197345838, -0.0011085037444974752, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.00030054479102572547,
    0.00049767135583767474, -0.0021060467935265117, 0.023116544038926289,
    0.011176150484746518, -0.00015990468077679311, -0.00020472360440944681, -0.0,
    0.00086250459888361885, 0.00051992442604286435, -5.8493716335300836E-6,
    -0.00055357584434958845, 0.00082582972575257027, -0.0040963740802913793,
    0.0351884546314794, 0.020755271773573836, -0.00022930166594377192,
    -0.0006031382673933989, -0.0, 0.0021306025281304327, 0.0014745525426902745,
    -1.2527320172892051E-5, -0.00074557056444952052, 0.0010258881719512614,
    -0.0059814644588271574, 0.039872588438262253, 0.028540115168772581,
    -0.00019211696170261014, -0.0011851716423019643, -0.0, 0.0035075992244199615,
    0.0027713681646644862, -1.46882765012302E-5, -0.0008676565971343248,
    0.0011334747275251506, -0.0077700772574709181, 0.039937891366846612,
    0.034434766523231866, -4.9907041550486245E-5, -0.0019415513939444267, -0.0,
    0.0048155393478105258, 0.004315397802002437, -7.34214183640527E-6,
    -0.00091534992019124913, 0.0011775529445634482, -0.0094694972435115515,
    0.037387902246241632, 0.038434999109990681, 0.00018567409305926037,
    -0.0028636709460735806, -0.0, 0.00596046391467955, 0.0060134989801012458,
    1.3772680035192538E-5, -0.00088814905894720657, 0.0011805616857412788,
    -0.011085798160126016, 0.033602932633910773, 0.040616087041396992,
    0.00049778776367507334, -0.0039434810125758141, -0.0, 0.0069047842642461343,
    0.0077779949224503573, 5.2013988864612053E-5, -0.00078902133406024972,
    0.0011591169843456447, -0.012624091237964225, 0.029479801837986826,
    0.0411189906789786, 0.00086752465064485261, -0.0051734045321709405, -0.0,
    0.0076463100523052868, 0.00952959503961538, 0.00010978417410949378,
    -0.00062381636303371216, 0.0011249641755140449, -0.014088743071422632,
    0.025556864775857654, 0.040135731467599592, 0.0012758223267157289,
    -0.0065462715759112581, -0.0, 0.00820303525992785, 0.011199579034205169,
    0.0001885537429421543, -0.00040064012777111304, 0.0010859803475433754,
    -0.015483556773029566, 0.0221188082258435, 0.0378946723419464,
    0.0017046117505578507, -0.0080552705112773917, -0.0, 0.0086026269302377691,
    0.012731255590154726, 0.00028892914897577377, -0.000129220009118365,
    0.0010471094052040082, -0.016811916276412941, 0.019280023927169761,
    0.034646313177504842, 0.002137481497047595, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572547, -0.00049767135583767474, 0.0021060467935265117,
    -0.023116544038926289, -0.011176150484746518, 0.00015990468077679311, 0.0,
    -0.00086250459888361885, -0.00051992442604286435, 5.8493716335300836E-6,
    0.00055357584434958845, -0.00082582972575257027, 0.0040963740802913793,
    -0.0351884546314794, -0.020755271773573836, 0.00022930166594377192, 0.0,
    -0.0021306025281304327, -0.0014745525426902745, 1.2527320172892051E-5,
    0.00074557056444952052, -0.0010258881719512614, 0.0059814644588271574,
    -0.039872588438262253, -0.028540115168772581, 0.00019211696170261014, 0.0,
    -0.0035075992244199615, -0.0027713681646644862, 1.46882765012302E-5,
    0.0008676565971343248, -0.0011334747275251506, 0.0077700772574709181,
    -0.039937891366846612, -0.034434766523231866, 4.9907041550486245E-5, 0.0,
    -0.0048155393478105258, -0.004315397802002437, 7.34214183640527E-6,
    0.00091534992019124913, -0.0011775529445634482, 0.0094694972435115515,
    -0.037387902246241632, -0.038434999109990681, -0.00018567409305926037, 0.0,
    -0.00596046391467955, -0.0060134989801012458, -1.3772680035192538E-5,
    0.00088814905894720657, -0.0011805616857412788, 0.011085798160126016,
    -0.033602932633910773, -0.040616087041396992, -0.00049778776367507334, 0.0,
    -0.0069047842642461343, -0.0077779949224503573, -5.2013988864612053E-5,
    0.00078902133406024972, -0.0011591169843456447, 0.012624091237964225,
    -0.029479801837986826, -0.0411189906789786, -0.00086752465064485261, 0.0,
    -0.0076463100523052868, -0.00952959503961538, -0.00010978417410949378,
    0.00062381636303371216, -0.0011249641755140449, 0.014088743071422632,
    -0.025556864775857654, -0.040135731467599592, -0.0012758223267157289, 0.0,
    -0.00820303525992785, -0.011199579034205169, -0.0001885537429421543,
    0.00040064012777111304, -0.0010859803475433754, 0.015483556773029566,
    -0.0221188082258435, -0.0378946723419464, -0.0017046117505578507, 0.0,
    -0.0086026269302377691, -0.012731255590154726, -0.00028892914897577377,
    0.000129220009118365, -0.0010471094052040082, 0.016811916276412941,
    -0.019280023927169761, -0.034646313177504842, -0.002137481497047595, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0 };

  static const real_T v[640]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T w[640]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T c_0[630]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020445512957285371, -0.0014603487861040304, -4.9246767934457634E-6,
    0.0052868326178782156, 0.0020754199270452173, -0.015163628780498446, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0020430568849590363, 0.0014846744549160563, 7.0936716057342316E-6,
    -0.0051391900270571448, 0.0021227702215873057, -0.015228232305159621, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021016480453829815, -0.0014857887933183286, -4.7070151263154063E-6,
    0.0050961555194273559, 0.0020754929921346357, 0.015462266265499226, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021001536346134803, 0.0014592344477017574, 7.3113332728645879E-6,
    -0.0053298671255080053, 0.0021228432866767255, 0.015397662740838059, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00030616429069496923, -0.00048221414518065164, -0.0020535983066627917,
    -0.022397032944284023, 0.011382823490747531, 4.5300466257935429E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00030623942171196546, 0.00047731536664842887, 0.002066526813039662,
    0.022172426283366305, 0.011387616330349713, -0.00015666644814812009, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031185892138120834, 0.00050257013436989741, -0.0021189752999033816,
    0.023341150699844011, -0.011594289336350715, -4.8538698886608567E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00030054479102572547, -0.00049767135583767474, 0.0021060467935265117,
    -0.023116544038926289, -0.011176150484746518, 0.00015990468077679311, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0 };

  static const real_T b_0[441]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -4.6042543754832843E-6, -0.0022720436034725897, 0.00013605399495041681, 0.0,
    0.94789999991422, 0.0002323165737535551, 0.00085021850252945308,
    -7.4644574418929129E-5, -0.042372304854011958, 0.0024338870206531572,
    -1.8831321574108633, 0.0081315634991630855, 0.031843900678722045, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019975139621085112, 3.5019866790403587E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092688, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598219E-5,
    -0.00052789703364104388, 0.0078377521590508158, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019051E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915878E-6, 1.8779150781494828E-5,
    -9.562169117717856E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639671E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.80158480245163E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.0015825196049838539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.77126980353158E-8, 0.0, 3.75160498220011E-5, -2.1506383219102515E-9,
    0.04392176650032184, -0.00043412487299914751, 0.00017734495634069353,
    -1.6549466756155209E-6, 0.0012849062652771342, -5.4203394113382109E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T l[390]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T e[226]{ 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7,
    0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0,
    15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0 };

  static const real_T t[81]{ 2.5651005531616526, 1.7832054070796954,
    -1.4357517509568316, -1.6576468970387892, 0.038415984331271066,
    0.30953950737012759, -0.036229291873675754, -0.31172619982772276, 0.0,
    1.7832054070796952, 2.5938374699880686, -1.6864513320323564,
    -1.4358192691239851, 0.31456501060355418, 0.034578475258586462,
    -0.32320230353911855, -0.025941182323022022, 0.0, -1.4357517509568316,
    -1.6864513320323564, 2.6637476660450394, 1.8530480849695157,
    0.061175434686292114, 0.34697869874687787, -0.059238726472737945,
    -0.34891540696043188, 0.0, -1.6576468970387892, -1.4358192691239851,
    1.8530480849695157, 2.6348757128843223, 0.33732446095857538,
    0.072017666635336791, -0.34621173813818085, -0.0631303894557312, 0.0,
    0.038415984331271073, 0.31456501060355418, 0.061175434686292114,
    0.33732446095857538, 2.4332119794597995, 0.28387059424322758,
    -1.530388388904937, -0.53669418479808917, 0.0, 0.30953950737012759,
    0.034578475258586462, 0.34697869874687787, 0.0720176666353368,
    0.28387059424322764, 2.4635388544622812, -0.57357610916460122,
    -1.5238333395409063, 0.0, -0.03622929187367576, -0.32320230353911861,
    -0.059238726472737931, -0.3462117381381809, -1.530388388904937,
    -0.57357610916460122, 2.5191280342931268, 0.23483646377641038, 0.0,
    -0.31172619982772282, -0.025941182323022009, -0.34891540696043194,
    -0.0631303894557312, -0.53669418479808917, -1.5238333395409063,
    0.23483646377641032, 2.4756910605625846, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 100000.0 };

  static const real_T c_b[48]{ 0.02112443491058583, -0.015284356933675683,
    -7.0837403672252146E-5, 0.062952228101239543, 0.019032522297668636,
    -0.17235611708486639, 0.021112545591001931, 0.015556523198782039,
    9.3712054745178266E-5, -0.060884483374622281, 0.019613805650913103,
    -0.17335012146094617, 0.021790267284400529, -0.015565687047941387,
    -6.7363334491227168E-5, 0.060331047065513795, 0.019031465986279986,
    0.17628138981294922, 0.021778377964816624, 0.015275193084516326,
    9.7186123926203244E-5, -0.063505664410348023, 0.019612749339524459,
    0.17528738543686956, -0.001819638864719295, -0.0034249251816346319,
    -0.02095639900015615, -0.26767193546582568, 0.10593667623599359,
    0.00062021813460420567, -0.0018124211550371481, 0.003387750973601051,
    0.021100316216985739, 0.26476621250220889, 0.10537885436940329,
    -0.0006207996116589, 0.0018538731733468781, 0.0035708122797193441,
    -0.021822949502860629, 0.2790736050389333, -0.10793139553633729,
    -0.00064672437426625525, 0.001778186846409557, -0.0035336380716857632,
    0.02167903228603104, -0.27616788207531651, -0.1033841350690595,
    0.00064730585132094889 };

  static const real_T f_0[21]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T old_yoff[13]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0 };

  static const real_T tmp_0[13]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0 };

  static real_T d[130]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0
  };

  static real_T f[130]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 };

  static const int32_T b_Mrows_0[226]{ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16,
    17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37,
    38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60,
    61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83,
    84, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,
    104, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122,
    123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140,
    141, 142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161,
    162, 163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179,
    180, 181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 200,
    201, 202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218,
    219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238, 239,
    240, 241, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257,
    258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 341, 342, 343, 344,
    345, 346, 347, 348 };

  static const int16_T b_Mrows[226]{ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17,
    18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
    39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61,
    62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84,
    85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123,
    124, 125, 126, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141,
    142, 143, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162,
    163, 164, 165, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180,
    181, 182, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 199, 200, 201,
    202, 203, 204, 205, 206, 207, 208, 212, 213, 214, 215, 216, 217, 218, 219,
    220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 238, 239, 240,
    241, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 258,
    259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 341, 342, 343, 344, 345,
    346, 347, 348 };

  static const int8_T b_D[4290]{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T d_1[3003]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T a[640]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

  static const int8_T d_0[273]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T c[169]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T b[7]{ 3, 4, 5, 6, 10, 11, 12 };

  static const int8_T tmp[7]{ 0, 0, 0, 1, 0, 0, 0 };

  static const boolean_T tmp_1[128]{ false, false, false, false, false, false,
    false, false, false, true, true, true, true, true, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    true, true, true, true, true, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false, false, false, false, false, false, false, false, false, false, false,
    false };

  emxArray_real_T_proc_control_T *Bu;
  emxArray_real_T_proc_control_T *Bv;
  emxArray_real_T_proc_control_T *Dv;
  emxArray_real_T_proc_control_T *rseq;
  emxArray_real_T_proc_control_T *vseq;
  boolean_T exitg1;

  // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
  // Outputs for IfAction SubSystem: '<S120>/Quaternion Non linear MPC (Not for codegen)' incorporates:
  //   ActionPort: '<S127>/Action Port'

  // SwitchCase: '<S120>/Switch Case' incorporates:
  //   MATLAB Function: '<S196>/NLMPC'

  f[0U] = (rtInf);
  f[1U] = (rtInf);
  f[2U] = (rtInf);
  f[3U] = (rtInf);
  f[4U] = (rtInf);
  f[5U] = (rtInf);
  f[6U] = (rtInf);
  f[7U] = (rtInf);
  f[8U] = (rtInf);
  f[9U] = (rtInf);
  f[10U] = (rtInf);
  f[11U] = (rtInf);
  f[12U] = (rtInf);
  f[13U] = (rtInf);
  f[14U] = (rtInf);
  f[15U] = (rtInf);
  f[16U] = (rtInf);
  f[17U] = (rtInf);
  f[18U] = (rtInf);
  f[19U] = (rtInf);
  d[0U] = (rtMinusInf);
  d[1U] = (rtMinusInf);
  d[2U] = (rtMinusInf);
  d[3U] = (rtMinusInf);
  d[4U] = (rtMinusInf);
  d[5U] = (rtMinusInf);
  d[6U] = (rtMinusInf);
  d[7U] = (rtMinusInf);
  d[8U] = (rtMinusInf);
  d[9U] = (rtMinusInf);
  d[10U] = (rtMinusInf);
  d[11U] = (rtMinusInf);
  d[12U] = (rtMinusInf);
  d[13U] = (rtMinusInf);
  d[14U] = (rtMinusInf);
  d[15U] = (rtMinusInf);
  d[16U] = (rtMinusInf);
  d[17U] = (rtMinusInf);
  d[18U] = (rtMinusInf);
  d[19U] = (rtMinusInf);
  d[20U] = (rtMinusInf);
  d[21U] = (rtMinusInf);
  d[22U] = (rtMinusInf);
  d[23U] = (rtMinusInf);
  d[24U] = (rtMinusInf);
  d[25U] = (rtMinusInf);
  d[26U] = (rtMinusInf);
  d[27U] = (rtMinusInf);
  d[28U] = (rtMinusInf);
  d[29U] = (rtMinusInf);

  // End of Outputs for SubSystem: '<S120>/Quaternion Non linear MPC (Not for codegen)' 
  // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // Outputs for Atomic SubSystem: '<S10>/ROS Command Manager'
    // Outputs for Atomic SubSystem: '<S309>/Subscribe2'
    // MATLABSystem: '<S320>/SourceBlock'
    proc_control_B.Merge = Sub_proc_control_185_13.getLatestMessage
      (&proc_control_B.b_varargout_2_ik);

    // Outputs for Enabled SubSystem: '<S320>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S326>/Enable'

    if (proc_control_B.Merge) {
      // SignalConversion generated from: '<S326>/In1'
      proc_control_B.In1_i2 = proc_control_B.b_varargout_2_ik;
    }

    // End of Outputs for SubSystem: '<S320>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S309>/Subscribe2'

    // Outputs for Atomic SubSystem: '<S309>/Subscribe3'
    // MATLABSystem: '<S321>/SourceBlock'
    proc_control_B.NewDvlMsg = Sub_proc_control_185_14.getLatestMessage
      (&proc_control_B.b_varargout_2_c2);

    // End of Outputs for SubSystem: '<S309>/Subscribe3'

    // Outputs for Atomic SubSystem: '<S309>/Subscribe1'
    // MATLABSystem: '<S319>/SourceBlock'
    proc_control_B.newPressureMsg = Sub_proc_control_185_12.getLatestMessage
      (&proc_control_B.b_varargout_2_c2);

    // Outputs for Enabled SubSystem: '<S319>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S325>/Enable'

    if (proc_control_B.newPressureMsg) {
      // SignalConversion generated from: '<S325>/In1'
      proc_control_B.In1_cx = proc_control_B.b_varargout_2_c2;
    }

    // End of Outputs for SubSystem: '<S319>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S309>/Subscribe1'

    // Outputs for Atomic SubSystem: '<S309>/startSim'
    // MATLABSystem: '<S324>/SourceBlock'
    proc_control_B.b_varargout_1 = Sub_proc_control_185_11.getLatestMessage
      (&proc_control_B.b_varargout_2_i);

    // Outputs for Enabled SubSystem: '<S324>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S330>/Enable'

    if (proc_control_B.b_varargout_1) {
      // SignalConversion generated from: '<S330>/In1'
      proc_control_B.In1_n = proc_control_B.b_varargout_2_i;
    }

    // End of Outputs for SubSystem: '<S324>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S309>/startSim'

    // Outputs for Atomic SubSystem: '<S309>/Subscribe5'
    // MATLABSystem: '<S323>/SourceBlock'
    proc_control_B.mask2 = Sub_proc_control_185_270.getLatestMessage
      (&proc_control_B.b_varargout_2_c2);

    // Outputs for Enabled SubSystem: '<S323>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S329>/Enable'

    if (proc_control_B.mask2) {
      // SignalConversion generated from: '<S329>/In1'
      proc_control_B.In1_f1 = proc_control_B.b_varargout_2_c2;
    }

    // End of Outputs for SubSystem: '<S323>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S309>/Subscribe5'

    // Outputs for Atomic SubSystem: '<S309>/Subscribe4'
    // MATLABSystem: '<S322>/SourceBlock'
    proc_control_B.b_varargout_1_i = Sub_proc_control_185_268.getLatestMessage
      (&proc_control_B.b_varargout_2_c2);

    // End of Outputs for SubSystem: '<S309>/Subscribe4'

    // MATLABSystem: '<S309>/MATLAB System' incorporates:
    //   MATLABSystem: '<S319>/SourceBlock'
    //   MATLABSystem: '<S320>/SourceBlock'
    //   MATLABSystem: '<S321>/SourceBlock'
    //   MATLABSystem: '<S323>/SourceBlock'
    //   MATLABSystem: '<S324>/SourceBlock'
    //   SignalConversion generated from: '<S309>/MATLAB System'

    if (proc_control_DW.obj_mv.initial_mode != proc_control_P.mode.init) {
      proc_control_DW.obj_mv.initial_mode = proc_control_P.mode.init;
    }

    // Outputs for Atomic SubSystem: '<S309>/Subscribe5'
    //         %% Fonction qui détermine si on est mode dry_run
    if (proc_control_B.mask2) {
      proc_control_DW.obj_mv.m_notDryRun = !proc_control_B.In1_f1.Data;
    }

    // End of Outputs for SubSystem: '<S309>/Subscribe5'

    // Outputs for Atomic SubSystem: '<S309>/startSim'
    //          %% Fonction qui détermine la condition initial
    if (proc_control_B.b_varargout_1) {
      proc_control_DW.obj_mv.m_simulation = 1.0;

      //  activer la simulation
      proc_control_DW.obj_mv.m_initCond[0] = 0.0;
      proc_control_DW.obj_mv.m_initCond[1] = 0.0;
      proc_control_DW.obj_mv.m_initCond[2] = proc_control_B.In1_n.Position.Z;

      //         %% Fonction qui vérifie si le quaternion est unitaire
      proc_control_B.scale = 3.3121686421112381E-170;
      proc_control_B.absxk = std::abs(proc_control_B.In1_n.Orientation.W);
      if (proc_control_B.absxk > 3.3121686421112381E-170) {
        proc_control_B.d = 1.0;
        proc_control_B.scale = proc_control_B.absxk;
      } else {
        proc_control_B.t_f = proc_control_B.absxk / 3.3121686421112381E-170;
        proc_control_B.d = proc_control_B.t_f * proc_control_B.t_f;
      }

      proc_control_B.absxk = std::abs(proc_control_B.In1_n.Orientation.X);
      if (proc_control_B.absxk > proc_control_B.scale) {
        proc_control_B.t_f = proc_control_B.scale / proc_control_B.absxk;
        proc_control_B.d = proc_control_B.d * proc_control_B.t_f *
          proc_control_B.t_f + 1.0;
        proc_control_B.scale = proc_control_B.absxk;
      } else {
        proc_control_B.t_f = proc_control_B.absxk / proc_control_B.scale;
        proc_control_B.d += proc_control_B.t_f * proc_control_B.t_f;
      }

      proc_control_B.absxk = std::abs(proc_control_B.In1_n.Orientation.Y);
      if (proc_control_B.absxk > proc_control_B.scale) {
        proc_control_B.t_f = proc_control_B.scale / proc_control_B.absxk;
        proc_control_B.d = proc_control_B.d * proc_control_B.t_f *
          proc_control_B.t_f + 1.0;
        proc_control_B.scale = proc_control_B.absxk;
      } else {
        proc_control_B.t_f = proc_control_B.absxk / proc_control_B.scale;
        proc_control_B.d += proc_control_B.t_f * proc_control_B.t_f;
      }

      proc_control_B.absxk = std::abs(proc_control_B.In1_n.Orientation.Z);
      if (proc_control_B.absxk > proc_control_B.scale) {
        proc_control_B.t_f = proc_control_B.scale / proc_control_B.absxk;
        proc_control_B.d = proc_control_B.d * proc_control_B.t_f *
          proc_control_B.t_f + 1.0;
        proc_control_B.scale = proc_control_B.absxk;
      } else {
        proc_control_B.t_f = proc_control_B.absxk / proc_control_B.scale;
        proc_control_B.d += proc_control_B.t_f * proc_control_B.t_f;
      }

      proc_control_B.d = proc_control_B.scale * std::sqrt(proc_control_B.d);
      proc_control_B.n_k = proc_control_B.In1_n.Orientation.W / proc_control_B.d;
      proc_control_B.b_pn[0] = std::isnan(proc_control_B.n_k);
      proc_control_B.n[0] = proc_control_B.n_k;
      proc_control_B.n_k = proc_control_B.In1_n.Orientation.X / proc_control_B.d;
      proc_control_B.b_pn[1] = std::isnan(proc_control_B.n_k);
      proc_control_B.n[1] = proc_control_B.n_k;
      proc_control_B.n_k = proc_control_B.In1_n.Orientation.Y / proc_control_B.d;
      proc_control_B.b_pn[2] = std::isnan(proc_control_B.n_k);
      proc_control_B.n[2] = proc_control_B.n_k;
      proc_control_B.n_k = proc_control_B.In1_n.Orientation.Z / proc_control_B.d;
      proc_control_B.b_pn[3] = std::isnan(proc_control_B.n_k);
      proc_control_B.mask2 = true;
      proc_control_B.b_k = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_k < 4)) {
        if (!proc_control_B.b_pn[proc_control_B.b_k]) {
          proc_control_B.mask2 = false;
          exitg1 = true;
        } else {
          proc_control_B.b_k++;
        }
      }

      if (proc_control_B.mask2) {
        proc_control_DW.obj_mv.m_initCond[3] = 1.0;
        proc_control_DW.obj_mv.m_initCond[4] = 0.0;
        proc_control_DW.obj_mv.m_initCond[5] = 0.0;
        proc_control_DW.obj_mv.m_initCond[6] = 0.0;
      } else {
        proc_control_DW.obj_mv.m_initCond[3] = proc_control_B.n[0];
        proc_control_DW.obj_mv.m_initCond[4] = proc_control_B.n[1];
        proc_control_DW.obj_mv.m_initCond[5] = proc_control_B.n[2];
        proc_control_DW.obj_mv.m_initCond[6] = proc_control_B.n_k;
      }
    }

    // End of Outputs for SubSystem: '<S309>/startSim'

    // Outputs for Atomic SubSystem: '<S309>/Subscribe1'
    //         %% Fonction qui détermine le mode
    //          %% Fonction qui détermine l'arret d'urgence
    if (proc_control_B.newPressureMsg) {
      proc_control_DW.obj_mv.m_killStatus = !proc_control_B.In1_cx.Data;
    }

    // End of Outputs for SubSystem: '<S309>/Subscribe1'

    // Outputs for Atomic SubSystem: '<S309>/Subscribe2'
    //  regarder l'états de la kill
    if (proc_control_B.Merge && (!(proc_control_DW.obj_mv.m_killStatus != 0.0)) &&
        (proc_control_DW.Delay_DSTATE_e != 0.0)) {
      proc_control_DW.obj_mv.m_mode = proc_control_B.In1_i2.Data;
    }

    // End of Outputs for SubSystem: '<S309>/Subscribe2'
    if ((proc_control_DW.obj_mv.m_killStatus != 0.0) ||
        (!(proc_control_DW.obj_mv.m_notDryRun != 0.0))) {
      proc_control_DW.obj_mv.m_mode = 0.0;
    }

    // Outputs for Atomic SubSystem: '<S309>/Subscribe3'
    //          %% Fonction qui détermine si on reset
    if (proc_control_B.NewDvlMsg || proc_control_B.b_varargout_1) {
      proc_control_DW.obj_mv.m_reset = 1.0;
    } else {
      proc_control_DW.obj_mv.m_reset = 0.0;
    }

    //          %% Fonction qui détermine si on clear la trajectoire
    if (proc_control_B.NewDvlMsg || proc_control_B.b_varargout_1 ||
        proc_control_B.Merge || proc_control_B.b_varargout_1_i) {
      proc_control_DW.obj_mv.m_trajClear = 1.0;
    } else {
      proc_control_DW.obj_mv.m_trajClear = 0.0;
    }

    // End of Outputs for SubSystem: '<S309>/Subscribe3'

    // MATLABSystem: '<S309>/MATLAB System'
    proc_control_B.InitQuat[0] = proc_control_DW.obj_mv.m_initCond[3];
    proc_control_B.InitQuat[1] = proc_control_DW.obj_mv.m_initCond[4];
    proc_control_B.InitQuat[2] = proc_control_DW.obj_mv.m_initCond[5];
    proc_control_B.InitQuat[3] = proc_control_DW.obj_mv.m_initCond[6];

    // MATLABSystem: '<S309>/MATLAB System'
    proc_control_B.SimActive = proc_control_DW.obj_mv.m_simulation;

    // MATLABSystem: '<S309>/MATLAB System'
    proc_control_B.NavReset = proc_control_DW.obj_mv.m_reset;

    // MATLABSystem: '<S309>/MATLAB System'
    proc_control_B.trajClear = proc_control_DW.obj_mv.m_trajClear;
    proc_control_B.notDryRun = proc_control_DW.obj_mv.m_notDryRun;

    // DataTypeConversion: '<S309>/Data Type Conversion' incorporates:
    //   MATLABSystem: '<S309>/MATLAB System'

    proc_control_B.mode = static_cast<uint8_T>(proc_control_DW.obj_mv.m_mode);

    // End of Outputs for SubSystem: '<S10>/ROS Command Manager'

    // Delay: '<S230>/ '
    std::memcpy(&proc_control_B.u[0], &proc_control_DW._DSTATE[0], sizeof(real_T)
                << 3U);

    // Outputs for Atomic SubSystem: '<S10>/ROS Command Manager'
    // DataTypeConversion: '<S3>/Cast To Double' incorporates:
    //   MATLABSystem: '<S309>/MATLAB System'

    proc_control_B.CastToDouble = static_cast<uint8_T>
      (proc_control_DW.obj_mv.m_simulation);

    // End of Outputs for SubSystem: '<S10>/ROS Command Manager'
  }

  // SwitchCase: '<S3>/Switch Case' incorporates:
  //   MATLABSystem: '<S68>/SourceBlock'
  //   MATLABSystem: '<S69>/SourceBlock'
  //   MATLABSystem: '<S70>/SourceBlock'
  //   MATLABSystem: '<S74>/SourceBlock'
  //   MATLABSystem: '<S75>/SourceBlock'
  //   MATLABSystem: '<S76>/SourceBlock'
  //   ZeroOrderHold: '<S3>/Zero-Order Hold'

  if (proc_control_B.CastToDouble == 1) {
    // Outputs for IfAction SubSystem: '<S3>/Simulation' incorporates:
    //   ActionPort: '<S66>/Action Port'

    // Outputs for Atomic SubSystem: '<S66>/Subscribe'
    // MATLABSystem: '<S74>/SourceBlock'
    proc_control_B.Merge = Sub_proc_control_31_1241.getLatestMessage
      (&proc_control_B.b_varargout_2_m);

    // Outputs for Enabled SubSystem: '<S74>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S77>/Enable'

    if (proc_control_B.Merge) {
      // SignalConversion generated from: '<S77>/In1'
      proc_control_B.In1_pd = proc_control_B.b_varargout_2_m;
    }

    // End of Outputs for SubSystem: '<S74>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S66>/Subscribe'

    // Outputs for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
    // SignalConversion generated from: '<S231>/ SFunction ' incorporates:
    //   MATLAB Function: '<S224>/ '
    //   MATLABSystem: '<S74>/SourceBlock'
    //   SignalConversion generated from: '<S66>/imu Data'

    proc_control_B.n[1] = proc_control_B.In1_pd.Orientation.X;
    proc_control_B.n[2] = proc_control_B.In1_pd.Orientation.Y;
    proc_control_B.n[3] = proc_control_B.In1_pd.Orientation.Z;

    // End of Outputs for SubSystem: '<S8>/AHRS//Detph Mesurments'

    // SignalConversion generated from: '<S66>/imu Data' incorporates:
    //   SignalConversion generated from: '<S95>/HeaderAssign'

    proc_control_B.t_f = proc_control_B.In1_pd.Orientation.W;

    // Outputs for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
    // SignalConversion generated from: '<S224>/IMU' incorporates:
    //   SignalConversion generated from: '<S66>/imu Data'

    proc_control_B.TmpSignalConversionAtMATLAB[4] =
      proc_control_B.In1_pd.AngularVelocity.X;
    proc_control_B.TmpSignalConversionAtMATLAB[5] =
      proc_control_B.In1_pd.AngularVelocity.Y;
    proc_control_B.TmpSignalConversionAtMATLAB[6] =
      proc_control_B.In1_pd.AngularVelocity.Z;

    // End of Outputs for SubSystem: '<S8>/AHRS//Detph Mesurments'

    // Outputs for Atomic SubSystem: '<S66>/Subscribe1'
    // MATLABSystem: '<S76>/SourceBlock'
    proc_control_B.NewDvlMsg = Sub_proc_control_31_1242.getLatestMessage
      (&proc_control_B.msg_b);

    // Outputs for Enabled SubSystem: '<S76>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S79>/Enable'

    if (proc_control_B.NewDvlMsg) {
      // SignalConversion generated from: '<S79>/In1'
      proc_control_B.In1_c = proc_control_B.msg_b;
    }

    // End of Outputs for SubSystem: '<S76>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S66>/Subscribe1'

    // SignalConversion generated from: '<S66>/dvl data' incorporates:
    //   MATLABSystem: '<S76>/SourceBlock'
    //   Merge: '<S3>/Merge2'

    proc_control_B.linearScaling = proc_control_B.In1_c.XVelBtm;
    proc_control_B.xtmp = proc_control_B.In1_c.YVelBtm;
    proc_control_B.b_norm = proc_control_B.In1_c.ZVelBtm;
    proc_control_B.t4 = proc_control_B.In1_c.Velocity1;
    proc_control_B.t8 = proc_control_B.In1_c.Velocity2;
    proc_control_B.t9 = proc_control_B.In1_c.Velocity3;
    proc_control_B.oc = proc_control_B.In1_c.Velocity4;

    // Outputs for Atomic SubSystem: '<S66>/Subscribe depth'
    // MATLABSystem: '<S75>/SourceBlock'
    proc_control_B.newPressureMsg = Sub_proc_control_31_1305.getLatestMessage
      (&proc_control_B.b_varargout_2_p5);

    // Outputs for Enabled SubSystem: '<S75>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S78>/Enable'

    if (proc_control_B.newPressureMsg) {
      // SignalConversion generated from: '<S78>/In1'
      proc_control_B.In1_om = proc_control_B.b_varargout_2_p5;
    }

    // End of Outputs for SubSystem: '<S75>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S66>/Subscribe depth'

    // SignalConversion generated from: '<S66>/depth data' incorporates:
    //   MATLABSystem: '<S75>/SourceBlock'
    //   Merge: '<S3>/Merge4'

    proc_control_B.rtb_Merge4_Data = proc_control_B.In1_om.Data;

    // End of Outputs for SubSystem: '<S3>/Simulation'
  } else {
    // Outputs for IfAction SubSystem: '<S3>/AUV8' incorporates:
    //   ActionPort: '<S65>/Action Port'

    // Outputs for Atomic SubSystem: '<S65>/Subscribe'
    // MATLABSystem: '<S68>/SourceBlock'
    proc_control_B.Merge = Sub_proc_control_31_5.getLatestMessage
      (&proc_control_B.b_varargout_2_m);

    // Outputs for Enabled SubSystem: '<S68>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S71>/Enable'

    if (proc_control_B.Merge) {
      // SignalConversion generated from: '<S71>/In1'
      proc_control_B.In1_p = proc_control_B.b_varargout_2_m;
    }

    // End of Outputs for SubSystem: '<S68>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S65>/Subscribe'

    // Outputs for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
    // SignalConversion generated from: '<S231>/ SFunction ' incorporates:
    //   MATLAB Function: '<S224>/ '
    //   MATLABSystem: '<S68>/SourceBlock'
    //   SignalConversion generated from: '<S65>/imu Data'

    proc_control_B.n[1] = proc_control_B.In1_p.Orientation.X;
    proc_control_B.n[2] = proc_control_B.In1_p.Orientation.Y;
    proc_control_B.n[3] = proc_control_B.In1_p.Orientation.Z;

    // End of Outputs for SubSystem: '<S8>/AHRS//Detph Mesurments'

    // SignalConversion generated from: '<S65>/imu Data' incorporates:
    //   SignalConversion generated from: '<S95>/HeaderAssign'

    proc_control_B.t_f = proc_control_B.In1_p.Orientation.W;

    // Outputs for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
    // SignalConversion generated from: '<S224>/IMU' incorporates:
    //   SignalConversion generated from: '<S65>/imu Data'

    proc_control_B.TmpSignalConversionAtMATLAB[4] =
      proc_control_B.In1_p.AngularVelocity.X;
    proc_control_B.TmpSignalConversionAtMATLAB[5] =
      proc_control_B.In1_p.AngularVelocity.Y;
    proc_control_B.TmpSignalConversionAtMATLAB[6] =
      proc_control_B.In1_p.AngularVelocity.Z;

    // End of Outputs for SubSystem: '<S8>/AHRS//Detph Mesurments'

    // Outputs for Atomic SubSystem: '<S65>/Subscribe1'
    // MATLABSystem: '<S69>/SourceBlock'
    proc_control_B.NewDvlMsg = Sub_proc_control_31_1235.getLatestMessage
      (&proc_control_B.msg_b);

    // Outputs for Enabled SubSystem: '<S69>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S72>/Enable'

    if (proc_control_B.NewDvlMsg) {
      // SignalConversion generated from: '<S72>/In1'
      proc_control_B.In1_i = proc_control_B.msg_b;
    }

    // End of Outputs for SubSystem: '<S69>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S65>/Subscribe1'

    // SignalConversion generated from: '<S65>/dvl data' incorporates:
    //   MATLABSystem: '<S69>/SourceBlock'
    //   Merge: '<S3>/Merge2'

    proc_control_B.linearScaling = proc_control_B.In1_i.XVelBtm;
    proc_control_B.xtmp = proc_control_B.In1_i.YVelBtm;
    proc_control_B.b_norm = proc_control_B.In1_i.ZVelBtm;
    proc_control_B.t4 = proc_control_B.In1_i.Velocity1;
    proc_control_B.t8 = proc_control_B.In1_i.Velocity2;
    proc_control_B.t9 = proc_control_B.In1_i.Velocity3;
    proc_control_B.oc = proc_control_B.In1_i.Velocity4;

    // Outputs for Atomic SubSystem: '<S65>/Subscribe2'
    // MATLABSystem: '<S70>/SourceBlock'
    proc_control_B.newPressureMsg = Sub_proc_control_31_1302.getLatestMessage
      (&proc_control_B.b_varargout_2_p5);

    // Outputs for Enabled SubSystem: '<S70>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S73>/Enable'

    if (proc_control_B.newPressureMsg) {
      // SignalConversion generated from: '<S73>/In1'
      proc_control_B.In1_e = proc_control_B.b_varargout_2_p5;
    }

    // End of Outputs for SubSystem: '<S70>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S65>/Subscribe2'

    // SignalConversion generated from: '<S65>/depth data' incorporates:
    //   MATLABSystem: '<S70>/SourceBlock'
    //   Merge: '<S3>/Merge4'

    proc_control_B.rtb_Merge4_Data = proc_control_B.In1_e.Data;

    // End of Outputs for SubSystem: '<S3>/AUV8'
  }

  // End of SwitchCase: '<S3>/Switch Case'

  // Outputs for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
  // SignalConversion generated from: '<S231>/ SFunction ' incorporates:
  //   MATLAB Function: '<S224>/ '
  //   SignalConversion generated from: '<S3>/Bus Selector2'
  //   SignalConversion generated from: '<S95>/HeaderAssign'

  proc_control_B.n[0] = proc_control_B.t_f;

  // MATLAB Function: '<S224>/ ' incorporates:
  //   SignalConversion generated from: '<S3>/Bus Selector2'
  //   SignalConversion generated from: '<S95>/HeaderAssign'

  proc_control_B.scale = 3.3121686421112381E-170;
  proc_control_B.absxk = std::abs(proc_control_B.t_f);
  if (proc_control_B.absxk > 3.3121686421112381E-170) {
    proc_control_B.d = 1.0;
    proc_control_B.scale = proc_control_B.absxk;
  } else {
    proc_control_B.t_f = proc_control_B.absxk / 3.3121686421112381E-170;
    proc_control_B.d = proc_control_B.t_f * proc_control_B.t_f;
  }

  proc_control_B.absxk = std::abs(proc_control_B.n[1]);
  if (proc_control_B.absxk > proc_control_B.scale) {
    proc_control_B.t_f = proc_control_B.scale / proc_control_B.absxk;
    proc_control_B.d = proc_control_B.d * proc_control_B.t_f *
      proc_control_B.t_f + 1.0;
    proc_control_B.scale = proc_control_B.absxk;
  } else {
    proc_control_B.t_f = proc_control_B.absxk / proc_control_B.scale;
    proc_control_B.d += proc_control_B.t_f * proc_control_B.t_f;
  }

  proc_control_B.absxk = std::abs(proc_control_B.n[2]);
  if (proc_control_B.absxk > proc_control_B.scale) {
    proc_control_B.t_f = proc_control_B.scale / proc_control_B.absxk;
    proc_control_B.d = proc_control_B.d * proc_control_B.t_f *
      proc_control_B.t_f + 1.0;
    proc_control_B.scale = proc_control_B.absxk;
  } else {
    proc_control_B.t_f = proc_control_B.absxk / proc_control_B.scale;
    proc_control_B.d += proc_control_B.t_f * proc_control_B.t_f;
  }

  proc_control_B.absxk = std::abs(proc_control_B.n[3]);
  if (proc_control_B.absxk > proc_control_B.scale) {
    proc_control_B.t_f = proc_control_B.scale / proc_control_B.absxk;
    proc_control_B.d = proc_control_B.d * proc_control_B.t_f *
      proc_control_B.t_f + 1.0;
    proc_control_B.scale = proc_control_B.absxk;
  } else {
    proc_control_B.t_f = proc_control_B.absxk / proc_control_B.scale;
    proc_control_B.d += proc_control_B.t_f * proc_control_B.t_f;
  }

  proc_control_B.d = proc_control_B.scale * std::sqrt(proc_control_B.d);
  proc_control_B.n_k = proc_control_B.n[0] / proc_control_B.d;
  proc_control_B.b_pn[0] = std::isnan(proc_control_B.n_k);
  proc_control_B.n[0] = proc_control_B.n_k;
  proc_control_B.n_k = proc_control_B.n[1] / proc_control_B.d;
  proc_control_B.b_pn[1] = std::isnan(proc_control_B.n_k);
  proc_control_B.n[1] = proc_control_B.n_k;
  proc_control_B.n_k = proc_control_B.n[2] / proc_control_B.d;
  proc_control_B.b_pn[2] = std::isnan(proc_control_B.n_k);
  proc_control_B.n[2] = proc_control_B.n_k;
  proc_control_B.n_k = proc_control_B.n[3] / proc_control_B.d;
  proc_control_B.b_pn[3] = std::isnan(proc_control_B.n_k);
  proc_control_B.n[3] = proc_control_B.n_k;
  proc_control_B.mask2 = true;
  proc_control_B.b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.b_k < 4)) {
    if (!proc_control_B.b_pn[proc_control_B.b_k]) {
      proc_control_B.mask2 = false;
      exitg1 = true;
    } else {
      proc_control_B.b_k++;
    }
  }

  if (proc_control_B.mask2) {
    proc_control_B.n[0] = 1.0;
    proc_control_B.n[1] = 0.0;
    proc_control_B.n[2] = 0.0;
    proc_control_B.n[3] = 0.0;
  }

  // Sum: '<S237>/Sum' incorporates:
  //   Product: '<S237>/Product'
  //   Product: '<S237>/Product1'
  //   Product: '<S237>/Product2'
  //   Product: '<S237>/Product3'
  //   UnaryMinus: '<S232>/Unary Minus'
  //   UnaryMinus: '<S232>/Unary Minus1'
  //   UnaryMinus: '<S232>/Unary Minus2'

  proc_control_B.absxk = ((proc_control_B.n[0] * proc_control_B.n[0] +
    -proc_control_B.n[1] * -proc_control_B.n[1]) + -proc_control_B.n[2] *
    -proc_control_B.n[2]) + -proc_control_B.n[3] * -proc_control_B.n[3];

  // SignalConversion generated from: '<S224>/IMU' incorporates:
  //   Product: '<S233>/Divide'
  //   Product: '<S233>/Divide1'
  //   Product: '<S233>/Divide2'
  //   Product: '<S233>/Divide3'
  //   UnaryMinus: '<S232>/Unary Minus'
  //   UnaryMinus: '<S232>/Unary Minus1'
  //   UnaryMinus: '<S232>/Unary Minus2'

  proc_control_B.TmpSignalConversionAtMATLAB[0] = proc_control_B.n[0] /
    proc_control_B.absxk;
  proc_control_B.TmpSignalConversionAtMATLAB[1] = proc_control_B.n[1] /
    proc_control_B.absxk;
  proc_control_B.TmpSignalConversionAtMATLAB[2] = proc_control_B.n[2] /
    proc_control_B.absxk;
  proc_control_B.TmpSignalConversionAtMATLAB[3] = proc_control_B.n[3] /
    proc_control_B.absxk;

  // End of Outputs for SubSystem: '<S8>/AHRS//Detph Mesurments'

  // ZeroOrderHold: '<S10>/Zero-Order Hold'
  if (((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) && ((&proc_control_M
       )->Timing.TaskCounters.TID[4] == 0)) {
    // ZeroOrderHold: '<S10>/Zero-Order Hold'
    proc_control_B.ZeroOrderHold_c = proc_control_B.mode;
  }

  // End of ZeroOrderHold: '<S10>/Zero-Order Hold'
  if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
    // If: '<S10>/If' incorporates:
    //   MATLABSystem: '<S311>/MATLAB System11'
    //   MATLABSystem: '<S311>/MATLAB System3'
    //   MATLABSystem: '<S311>/MATLAB System6'

    proc_control_B.rtPrevAction = proc_control_DW.If_ActiveSubsystem;
    proc_control_B.rtAction = -1;
    if (proc_control_B.ZeroOrderHold_c == 0) {
      proc_control_B.rtAction = 0;
    }

    proc_control_DW.If_ActiveSubsystem = proc_control_B.rtAction;
    if (proc_control_B.rtAction == 0) {
      int32_T exitg2;
      if (proc_control_B.rtPrevAction != 0) {
        // SystemReset for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
        //   ActionPort: '<S308>/Action Port'

        // SystemReset for If: '<S10>/If' incorporates:
        //   MATLABSystem: '<S311>/MATLAB System11'
        //   MATLABSystem: '<S311>/MATLAB System3'
        //   MATLABSystem: '<S311>/MATLAB System6'

        proc_control_MATLABSystem_Reset(&proc_control_DW.MATLABSystem_f);
        proc_contro_MATLABSystem1_Reset(&proc_control_DW.MATLABSystem1_f);
        proc_contro_MATLABSystem1_Reset(&proc_control_DW.MATLABSystem2);
        proc_control_MATLABSystem_Reset(&proc_control_DW.MATLABSystem_fn);
        proc_contro_MATLABSystem1_Reset(&proc_control_DW.MATLABSystem1_fn);
        proc_contro_MATLABSystem1_Reset(&proc_control_DW.MATLABSystem2_f);
        proc_control_MATLABSystem_Reset(&proc_control_DW.MATLABSystem_fni);
        proc_contro_MATLABSystem1_Reset(&proc_control_DW.MATLABSystem1_fni);
        proc_contro_MATLABSystem1_Reset(&proc_control_DW.MATLABSystem2_fn);
        proc_control_MATLABSystem_Reset(&proc_control_DW.MATLABSystem_fnik);
        proc_contro_MATLABSystem1_Reset(&proc_control_DW.MATLABSystem1_fnik);
        proc_contro_MATLABSystem1_Reset(&proc_control_DW.MATLABSystem2_fni);
        proc_contro_MATLABSystem1_Reset(&proc_control_DW.MATLABSystem1_fnik4);
        proc_cont_MATLABSystem1_a_Reset(&proc_control_DW.MATLABSystem1_fnik4d);
        proc_cont_MATLABSystem1_a_Reset(&proc_control_DW.MATLABSystem2_fnik);

        //  Initialize / reset discrete-state properties
        std::memset(&proc_control_DW.obj_c.lastMsg[0], 0, 400U * sizeof(real_T));
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_c.lastValues[proc_control_B.Ns] = 0.0;
        }

        proc_contro_MATLABSystem4_Reset(&proc_control_DW.MATLABSystem4);
        proc_contro_MATLABSystem4_Reset(&proc_control_DW.MATLABSystem5);

        //  Initialize / reset discrete-state properties
        std::memset(&proc_control_DW.obj_f5.lastMsg[0], 0, 400U * sizeof(real_T));
        std::memset(&proc_control_DW.obj_f5.lastValues[0], 0, 9U * sizeof(real_T));
        proc_cont_MATLABSystem1_a_Reset(&proc_control_DW.MATLABSystem7);
        proc_cont_MATLABSystem1_a_Reset(&proc_control_DW.MATLABSystem8);
        proc_cont_MATLABSystem1_a_Reset(&proc_control_DW.MATLABSystem9);
        proc_cont_MATLABSystem1_a_Reset(&proc_control_DW.MATLABSystem10);

        //  Initialize / reset discrete-state properties
        std::memset(&proc_control_DW.obj_l.lastMsg[0], 0, 400U * sizeof(real_T));
        std::memset(&proc_control_DW.obj_l.lastValues[0], 0, 48U * sizeof(real_T));

        // End of SystemReset for If: '<S10>/If'
        // End of SystemReset for SubSystem: '<S10>/Get_ROS_param '
      }

      // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
      //   ActionPort: '<S308>/Action Port'

      // MATLABSystem: '<S314>/Get Parameter'
      ParamGet_proc_control_185_465.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter_o2_c);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S314>/Get Parameter'
        proc_control_B.GetParameter_o1_m[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem(proc_control_B.GetParameter_o1_m,
        proc_control_B.GetParameter_o2_c, &proc_control_B.MATLABSystem_f,
        &proc_control_DW.MATLABSystem_f);

      // MATLABSystem: '<S314>/Get Parameter1'
      ParamGet_proc_control_185_466.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter1_o2_l);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S314>/Get Parameter1'
        proc_control_B.GetParameter1_o1_m[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1(proc_control_B.GetParameter1_o1_m,
        proc_control_B.GetParameter1_o2_l, &proc_control_B.MATLABSystem1_f,
        &proc_control_DW.MATLABSystem1_f);

      // MATLABSystem: '<S314>/Get Parameter2'
      ParamGet_proc_control_185_467.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter2_o2_a);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S314>/Get Parameter2'
        proc_control_B.GetParameter2_o1_a[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1(proc_control_B.GetParameter2_o1_a,
        proc_control_B.GetParameter2_o2_a, &proc_control_B.MATLABSystem2,
        &proc_control_DW.MATLABSystem2);

      // MATLABSystem: '<S315>/Get Parameter'
      ParamGet_proc_control_185_440.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter_o2_p);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S315>/Get Parameter'
        proc_control_B.GetParameter_o1_c[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem(proc_control_B.GetParameter_o1_c,
        proc_control_B.GetParameter_o2_p, &proc_control_B.MATLABSystem_fn,
        &proc_control_DW.MATLABSystem_fn);

      // MATLABSystem: '<S315>/Get Parameter1'
      ParamGet_proc_control_185_441.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter1_o2_o);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S315>/Get Parameter1'
        proc_control_B.GetParameter1_o1_b[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1(proc_control_B.GetParameter1_o1_b,
        proc_control_B.GetParameter1_o2_o, &proc_control_B.MATLABSystem1_fn,
        &proc_control_DW.MATLABSystem1_fn);

      // MATLABSystem: '<S315>/Get Parameter2'
      ParamGet_proc_control_185_442.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter2_o2_n);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S315>/Get Parameter2'
        proc_control_B.GetParameter2_o1_l[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1(proc_control_B.GetParameter2_o1_l,
        proc_control_B.GetParameter2_o2_n, &proc_control_B.MATLABSystem2_f,
        &proc_control_DW.MATLABSystem2_f);

      // MATLABSystem: '<S316>/Get Parameter'
      ParamGet_proc_control_185_453.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter_o2_h);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S316>/Get Parameter'
        proc_control_B.GetParameter_o1_h[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem(proc_control_B.GetParameter_o1_h,
        proc_control_B.GetParameter_o2_h, &proc_control_B.MATLABSystem_fni,
        &proc_control_DW.MATLABSystem_fni);

      // MATLABSystem: '<S316>/Get Parameter1'
      ParamGet_proc_control_185_454.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter1_o2_n);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S316>/Get Parameter1'
        proc_control_B.GetParameter1_o1_f[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1(proc_control_B.GetParameter1_o1_f,
        proc_control_B.GetParameter1_o2_n, &proc_control_B.MATLABSystem1_fni,
        &proc_control_DW.MATLABSystem1_fni);

      // MATLABSystem: '<S316>/Get Parameter2'
      ParamGet_proc_control_185_455.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter2_o2_k);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S316>/Get Parameter2'
        proc_control_B.GetParameter2_o1_c[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1(proc_control_B.GetParameter2_o1_c,
        proc_control_B.GetParameter2_o2_k, &proc_control_B.MATLABSystem2_fn,
        &proc_control_DW.MATLABSystem2_fn);

      // MATLABSystem: '<S317>/Get Parameter'
      ParamGet_proc_control_185_477.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter_o2);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S317>/Get Parameter'
        proc_control_B.GetParameter_o1[proc_control_B.Ns] = static_cast<uint8_T>
          (proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem(proc_control_B.GetParameter_o1,
        proc_control_B.GetParameter_o2, &proc_control_B.MATLABSystem_fnik,
        &proc_control_DW.MATLABSystem_fnik);

      // MATLABSystem: '<S317>/Get Parameter1'
      ParamGet_proc_control_185_478.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter1_o2_f);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S317>/Get Parameter1'
        proc_control_B.GetParameter1_o1_j[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1(proc_control_B.GetParameter1_o1_j,
        proc_control_B.GetParameter1_o2_f, &proc_control_B.MATLABSystem1_fnik,
        &proc_control_DW.MATLABSystem1_fnik);

      // MATLABSystem: '<S317>/Get Parameter2'
      ParamGet_proc_control_185_479.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter2_o2);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S317>/Get Parameter2'
        proc_control_B.GetParameter2_o1[proc_control_B.Ns] = static_cast<uint8_T>
          (proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1(proc_control_B.GetParameter2_o1,
        proc_control_B.GetParameter2_o2, &proc_control_B.MATLABSystem2_fni,
        &proc_control_DW.MATLABSystem2_fni);

      // MATLABSystem: '<S318>/Get Parameter1'
      ParamGet_proc_control_185_494.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter1_o2);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S318>/Get Parameter1'
        proc_control_B.GetParameter1_o1[proc_control_B.Ns] = static_cast<uint8_T>
          (proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1(proc_control_B.GetParameter1_o1,
        proc_control_B.GetParameter1_o2, &proc_control_B.MATLABSystem1_fnik4,
        &proc_control_DW.MATLABSystem1_fnik4);

      // MATLABSystem: '<S312>/Get Parameter'
      ParamGet_proc_control_185_529.get_parameter(&proc_control_B.idx_p);

      // MATLABSystem: '<S312>/Get Parameter1'
      ParamGet_proc_control_185_530.get_parameter(&proc_control_B.ibmat);

      // BusCreator: '<S310>/Bus Creator' incorporates:
      //   DataTypeConversion: '<S312>/Data Type Conversion'
      //   DataTypeConversion: '<S312>/Data Type Conversion1'
      //   MATLABSystem: '<S312>/Get Parameter'
      //   MATLABSystem: '<S312>/Get Parameter1'
      //   MATLABSystem: '<S312>/Get Parameter2'
      //   MATLABSystem: '<S312>/Get Parameter3'
      //   MATLABSystem: '<S313>/Get Parameter'
      //   MATLABSystem: '<S313>/Get Parameter1'
      //   MATLABSystem: '<S313>/Get Parameter2'
      //   MATLABSystem: '<S314>/MATLAB System'
      //   MATLABSystem: '<S314>/MATLAB System1'
      //   MATLABSystem: '<S314>/MATLAB System2'
      //   MATLABSystem: '<S315>/MATLAB System'
      //   MATLABSystem: '<S315>/MATLAB System1'
      //   MATLABSystem: '<S315>/MATLAB System2'
      //   MATLABSystem: '<S316>/MATLAB System'
      //   MATLABSystem: '<S316>/MATLAB System1'
      //   MATLABSystem: '<S316>/MATLAB System2'
      //   MATLABSystem: '<S317>/MATLAB System'
      //   MATLABSystem: '<S317>/MATLAB System1'
      //   MATLABSystem: '<S317>/MATLAB System2'
      //   MATLABSystem: '<S318>/MATLAB System1'

      ParamGet_proc_control_185_533.get_parameter
        (&proc_control_B.mpcParams_l.gains.tmax);
      ParamGet_proc_control_185_534.get_parameter
        (&proc_control_B.mpcParams_l.gains.tmin);
      ParamGet_proc_control_185_503.get_parameter
        (&proc_control_B.mpcParams_l.targetReached.linearTol);
      ParamGet_proc_control_185_504.get_parameter
        (&proc_control_B.mpcParams_l.targetReached.angularTol);
      ParamGet_proc_control_185_505.get_parameter
        (&proc_control_B.mpcParams_l.targetReached.timeInTol);
      std::memcpy(&proc_control_B.mpcParams_l.gains.defaut.OV[0],
                  &proc_control_B.MATLABSystem_f.OV[0], 13U * sizeof(real_T));
      std::memcpy(&proc_control_B.mpcParams_l.gains.defaut.MV[0],
                  &proc_control_B.MATLABSystem1_f.MV[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.mpcParams_l.gains.defaut.MVR[0],
                  &proc_control_B.MATLABSystem2.MV[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.mpcParams_l.gains.c10.OV[0],
                  &proc_control_B.MATLABSystem_fn.OV[0], 13U * sizeof(real_T));
      std::memcpy(&proc_control_B.mpcParams_l.gains.c10.MV[0],
                  &proc_control_B.MATLABSystem1_fn.MV[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.mpcParams_l.gains.c10.MVR[0],
                  &proc_control_B.MATLABSystem2_f.MV[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.mpcParams_l.gains.c11.OV[0],
                  &proc_control_B.MATLABSystem_fni.OV[0], 13U * sizeof(real_T));
      std::memcpy(&proc_control_B.mpcParams_l.gains.c11.MV[0],
                  &proc_control_B.MATLABSystem1_fni.MV[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.mpcParams_l.gains.c11.MVR[0],
                  &proc_control_B.MATLABSystem2_fn.MV[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.mpcParams_l.gains.c19.OV[0],
                  &proc_control_B.MATLABSystem_fnik.OV[0], 13U * sizeof(real_T));
      std::memcpy(&proc_control_B.mpcParams_l.gains.c19.MV[0],
                  &proc_control_B.MATLABSystem1_fnik.MV[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.mpcParams_l.gains.c19.MVR[0],
                  &proc_control_B.MATLABSystem2_fni.MV[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.mpcParams_l.gains.noDvl.MV[0],
                  &proc_control_B.MATLABSystem1_fnik4.MV[0], sizeof(real_T) <<
                  3U);
      proc_control_B.mpcParams_l.gains.p = proc_control_B.idx_p;
      proc_control_B.mpcParams_l.gains.m = proc_control_B.ibmat;

      // BusCreator: '<S311>/Bus Creator' incorporates:
      //   MATLABSystem: '<S311>/Get Parameter'
      //   MATLABSystem: '<S311>/Get Parameter1'
      //   MATLABSystem: '<S311>/Get Parameter2'
      //   MATLABSystem: '<S311>/Get Parameter3'
      //   MATLABSystem: '<S311>/Get Parameter4'

      ParamGet_proc_control_185_535.get_parameter(&proc_control_B.BusCreator.rho);
      ParamGet_proc_control_185_540.get_parameter(&proc_control_B.BusCreator.g);
      ParamGet_proc_control_185_541.get_parameter
        (&proc_control_B.BusCreator.mass);
      ParamGet_proc_control_185_542.get_parameter
        (&proc_control_B.BusCreator.volume);
      ParamGet_proc_control_185_543.get_parameter
        (&proc_control_B.BusCreator.sub_height);

      // MATLABSystem: '<S311>/Get Parameter5'
      ParamGet_proc_control_185_544.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter5_o2);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S311>/Get Parameter5'
        proc_control_B.GetParameter5_o1[proc_control_B.Ns] = static_cast<uint8_T>
          (proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1_f(proc_control_B.GetParameter5_o1,
        proc_control_B.GetParameter5_o2, &proc_control_B.MATLABSystem1_fnik4d,
        &proc_control_DW.MATLABSystem1_fnik4d);

      // MATLABSystem: '<S311>/Get Parameter6'
      ParamGet_proc_control_185_546.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter6_o2);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S311>/Get Parameter6'
        proc_control_B.GetParameter6_o1[proc_control_B.Ns] = static_cast<uint8_T>
          (proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1_f(proc_control_B.GetParameter6_o1,
        proc_control_B.GetParameter6_o2, &proc_control_B.MATLABSystem2_fnik,
        &proc_control_DW.MATLABSystem2_fnik);

      // MATLABSystem: '<S311>/Get Parameter7'
      ParamGet_proc_control_185_548.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.receivedLength);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        proc_control_B.GetParameter7_o1[proc_control_B.Ns] = static_cast<uint8_T>
          (proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      // MATLABSystem: '<S311>/MATLAB System3' incorporates:
      //   MATLABSystem: '<S311>/Get Parameter7'

      //  Implement algorithm. Calculate y as a function of input u and
      //  discrete states.
      //  remove space and add a comma at the end
      if (proc_control_B.receivedLength < 1U) {
        proc_control_B.idx_p = 0;
      } else {
        proc_control_B.idx_p = static_cast<int32_T>
          (proc_control_B.receivedLength);
      }

      proc_control_B.st_Value_size_idx_1 = proc_control_B.idx_p;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.idx_p;
           proc_control_B.Ns++) {
        proc_control_B.charValue_jw[proc_control_B.Ns] = static_cast<int8_T>
          (proc_control_B.GetParameter7_o1[proc_control_B.Ns]);
      }

      proc_control_B.Ns_d = -1;
      proc_control_B.i = 1;
      while (proc_control_B.i <= proc_control_B.idx_p) {
        if (proc_control_B.charValue_jw[proc_control_B.i - 1] == ' ') {
          proc_control_B.Ns_d++;
          proc_control_B.matches_data_o[proc_control_B.Ns_d] =
            static_cast<int8_T>(proc_control_B.i);
          proc_control_B.i++;
        } else {
          proc_control_B.i++;
        }
      }

      proc_control_B.ibmat = (proc_control_B.idx_p - proc_control_B.Ns_d) - 1;
      proc_control_B.idx_p = 0;
      proc_control_B.i = 0;
      for (proc_control_B.b_n = 0; proc_control_B.b_n <= proc_control_B.Ns_d;
           proc_control_B.b_n++) {
        while (proc_control_B.i + 1 <
               proc_control_B.matches_data_o[proc_control_B.b_n]) {
          proc_control_B.replaced_data_p[proc_control_B.idx_p] =
            proc_control_B.charValue_jw[proc_control_B.i];
          proc_control_B.idx_p++;
          proc_control_B.i++;
        }

        proc_control_B.i++;
      }

      while (proc_control_B.i + 1 <= proc_control_B.st_Value_size_idx_1) {
        proc_control_B.replaced_data_p[proc_control_B.idx_p] =
          proc_control_B.charValue_jw[proc_control_B.i];
        proc_control_B.idx_p++;
        proc_control_B.i++;
      }

      proc_control_B.cleanStr_size_idx_1 = proc_control_B.ibmat + 1;
      if (proc_control_B.ibmat - 1 >= 0) {
        std::memcpy(&proc_control_B.cleanStr_data_p[0],
                    &proc_control_B.replaced_data_p[0], proc_control_B.ibmat *
                    sizeof(char_T));
      }

      // MATLABSystem: '<S311>/MATLAB System3'
      proc_control_B.cleanStr_data_p[proc_control_B.ibmat] = ',';

      //  new msg
      for (proc_control_B.Ns = 0; proc_control_B.Ns <
           proc_control_B.cleanStr_size_idx_1; proc_control_B.Ns++) {
        proc_control_B.s1_data_d[proc_control_B.Ns] = static_cast<int8_T>
          (proc_control_DW.obj_c.lastMsg[proc_control_B.Ns]);
      }

      proc_control_B.mask2 = false;
      proc_control_B.idx_p = 1;
      do {
        exitg2 = 0;
        if (proc_control_B.idx_p - 1 <= proc_control_B.ibmat) {
          proc_control_B.i = proc_control_B.idx_p - 1;
          if (proc_control_B.s1_data_d[proc_control_B.i] !=
              proc_control_B.cleanStr_data_p[proc_control_B.i]) {
            exitg2 = 1;
          } else {
            proc_control_B.idx_p++;
          }
        } else {
          proc_control_B.mask2 = true;
          exitg2 = 1;
        }
      } while (exitg2 == 0);

      if (!proc_control_B.mask2) {
        proc_control_B.idx_p = 0;
        while ((proc_control_B.idx_p + 1 <= proc_control_B.ibmat + 1) &&
               (proc_control_B.cleanStr_data_p[proc_control_B.idx_p] == ';')) {
          proc_control_B.idx_p++;
        }

        proc_control_B.itoken = proc_control_B.idx_p;
        while ((proc_control_B.idx_p + 1 <= proc_control_B.ibmat + 1) &&
               (proc_control_B.cleanStr_data_p[proc_control_B.idx_p] != ';')) {
          proc_control_B.idx_p++;
        }

        if (proc_control_B.itoken + 1 > proc_control_B.idx_p) {
          proc_control_B.itoken = 0;
          proc_control_B.f_j = -1;
        } else {
          proc_control_B.f_j = proc_control_B.idx_p - 1;
        }

        proc_control_B.st_Value_size_idx_1 = proc_control_B.f_j -
          proc_control_B.itoken;
        proc_control_B.idx_p = proc_control_B.st_Value_size_idx_1 + 1;
        proc_control_B.Ns_d = proc_control_B.st_Value_size_idx_1 + 1;
        for (proc_control_B.Ns = 0; proc_control_B.Ns <=
             proc_control_B.st_Value_size_idx_1; proc_control_B.Ns++) {
          proc_control_B.str_data_a[proc_control_B.Ns] =
            proc_control_B.cleanStr_data_p[proc_control_B.itoken +
            proc_control_B.Ns];
        }

        //         %% string2array
        for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.idx_p;
             proc_control_B.Ns++) {
          proc_control_B.b_varargin_1_data_p[proc_control_B.Ns] =
            proc_control_B.cleanStr_data_p[proc_control_B.itoken +
            proc_control_B.Ns];
        }

        proc_control_B.b_varargin_1_data_p[proc_control_B.st_Value_size_idx_1 +
          1] = '\x00';
        printf("input : %s \n", &proc_control_B.b_varargin_1_data_p[0]);
        fflush(stdout);
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
             proc_control_B.ibmat++) {
          proc_control_B.idx_p = 1;
          while ((proc_control_B.idx_p <= proc_control_B.Ns_d) &&
                 (proc_control_B.str_data_a[proc_control_B.idx_p - 1] == ',')) {
            proc_control_B.idx_p++;
          }

          proc_control_B.itoken = proc_control_B.idx_p - 1;
          while ((proc_control_B.idx_p <= proc_control_B.Ns_d) &&
                 (proc_control_B.str_data_a[proc_control_B.idx_p - 1] != ',')) {
            proc_control_B.idx_p++;
          }

          if (proc_control_B.idx_p > proc_control_B.Ns_d) {
            proc_control_B.i = 0;
            proc_control_B.Ns_d = 0;
          } else {
            proc_control_B.i = proc_control_B.idx_p - 1;
          }

          if (proc_control_B.itoken + 1 > proc_control_B.idx_p - 1) {
            proc_control_B.itoken = 0;
            proc_control_B.f_j = 0;
          } else {
            proc_control_B.f_j = proc_control_B.idx_p - 1;
          }

          proc_control_B.TSamp[proc_control_B.ibmat] = (rtNaN);
          proc_control_B.st_Value_size_idx_1 = proc_control_B.f_j -
            proc_control_B.itoken;
          if (proc_control_B.st_Value_size_idx_1 >= 1) {
            proc_control_B.ntoread = 0;
            proc_control_B.idx_p = 0;
            exitg1 = false;
            while ((!exitg1) && (proc_control_B.idx_p + 1 <=
                                 proc_control_B.st_Value_size_idx_1)) {
              proc_control_B.b_y_tmp =
                proc_control_B.str_data_a[proc_control_B.itoken +
                proc_control_B.idx_p];
              if (tmp_1[static_cast<uint8_T>(proc_control_B.b_y_tmp) & 127] ||
                  (proc_control_B.b_y_tmp == '\x00')) {
                proc_control_B.idx_p++;
              } else {
                exitg1 = true;
              }
            }

            proc_control_B.b_k = proc_control_B.st_Value_size_idx_1 + 2;
            proc_control_B.s1_size[0] = 1;
            proc_control_B.s1_size[1] = proc_control_B.st_Value_size_idx_1 + 2;
            if (proc_control_B.b_k - 1 >= 0) {
              std::memset(&proc_control_B.s1_data_d[0], 0, proc_control_B.b_k *
                          sizeof(char_T));
            }

            proc_control_B.str_size[0] = 1;
            proc_control_B.str_size[1] = proc_control_B.st_Value_size_idx_1;
            for (proc_control_B.Ns = 0; proc_control_B.Ns <
                 proc_control_B.st_Value_size_idx_1; proc_control_B.Ns++) {
              proc_control_B.str_data_o[proc_control_B.Ns] =
                proc_control_B.str_data_a[proc_control_B.itoken +
                proc_control_B.Ns];
            }

            proc_control_readfloat_pr(proc_control_B.s1_data_d,
              proc_control_B.s1_size, 1, proc_control_B.str_data_o,
              proc_control_B.idx_p + 1, proc_control_B.f_j -
              proc_control_B.itoken, true, proc_control_B.b_s1_data_c,
              proc_control_B.b_s1_size, &proc_control_B.b_idx,
              &proc_control_B.b_k, &proc_control_B.mask2,
              &proc_control_B.b_varargout_1, &proc_control_B.d,
              &proc_control_B.b_varargout_1_i, &proc_control_B.success);
            proc_control_B.idx_p = proc_control_B.b_s1_size[1] - 1;
            if (proc_control_B.idx_p >= 0) {
              std::memcpy(&proc_control_B.s1_data_d[0],
                          &proc_control_B.b_s1_data_c[0], (proc_control_B.idx_p
                + 1) * sizeof(char_T));
            }

            proc_control_B.idx_p = proc_control_B.b_idx;
            if (proc_control_B.b_varargout_1) {
              proc_control_B.ntoread = 1;
            }

            if (proc_control_B.success && (proc_control_B.b_k <=
                 proc_control_B.st_Value_size_idx_1)) {
              proc_control_B.s1_data_d[proc_control_B.b_idx - 1] = ' ';
              proc_control_B.str_size[0] = 1;
              proc_control_B.str_size[1] = proc_control_B.st_Value_size_idx_1;
              for (proc_control_B.Ns = 0; proc_control_B.Ns <
                   proc_control_B.st_Value_size_idx_1; proc_control_B.Ns++) {
                proc_control_B.str_data_o[proc_control_B.Ns] =
                  proc_control_B.str_data_a[proc_control_B.itoken +
                  proc_control_B.Ns];
              }

              proc_control_B.s1_size_j[0] = 1;
              proc_control_B.s1_size_j[1] = proc_control_B.b_s1_size[1];
              proc_control_B.idx_p = proc_control_B.b_s1_size[1] - 1;
              if (proc_control_B.idx_p >= 0) {
                std::memcpy(&proc_control_B.b_s1_data_c[0],
                            &proc_control_B.s1_data_d[0], (proc_control_B.idx_p
                  + 1) * sizeof(char_T));
              }

              proc_control_readfloat_pr(proc_control_B.b_s1_data_c,
                proc_control_B.s1_size_j, proc_control_B.b_idx + 1,
                proc_control_B.str_data_o, proc_control_B.b_k,
                proc_control_B.f_j - proc_control_B.itoken, true,
                proc_control_B.s1_data_d, proc_control_B.s1_size,
                &proc_control_B.idx_p, &proc_control_B.Ns,
                &proc_control_B.b_varargout_1_i, &proc_control_B.success,
                &proc_control_B.t_f, &proc_control_B.foundsign,
                &proc_control_B.c_success);
              if (proc_control_B.success) {
                proc_control_B.ntoread++;
              }

              if (proc_control_B.c_success && (proc_control_B.Ns >
                   proc_control_B.st_Value_size_idx_1) && (static_cast<boolean_T>
                   (proc_control_B.mask2 ^ proc_control_B.b_varargout_1_i)) &&
                  proc_control_B.foundsign) {
                proc_control_B.success = true;
              } else {
                proc_control_B.success = false;
              }
            } else {
              proc_control_B.t_f = 0.0;
            }

            if (proc_control_B.success) {
              proc_control_B.s1_data_d[proc_control_B.idx_p - 1] = '\x00';
              if (proc_control_B.ntoread == 2) {
                proc_control_B.idx_p = sscanf(&proc_control_B.s1_data_d[0],
                  "%lf %lf", &proc_control_B.d, &proc_control_B.t_f);
                if (proc_control_B.idx_p != 2) {
                  proc_control_B.d = (rtNaN);
                  proc_control_B.t_f = (rtNaN);
                }
              } else if (proc_control_B.ntoread == 1) {
                proc_control_B.idx_p = sscanf(&proc_control_B.s1_data_d[0],
                  "%lf", &proc_control_B.absxk);
                if (proc_control_B.b_varargout_1) {
                  if (proc_control_B.idx_p == 1) {
                    proc_control_B.d = proc_control_B.absxk;
                  } else {
                    proc_control_B.d = (rtNaN);
                  }
                } else if (proc_control_B.idx_p == 1) {
                  proc_control_B.t_f = proc_control_B.absxk;
                } else {
                  proc_control_B.t_f = (rtNaN);
                }
              }

              if (proc_control_B.mask2) {
                proc_control_B.TSamp[proc_control_B.ibmat] = proc_control_B.t_f;
              } else {
                proc_control_B.TSamp[proc_control_B.ibmat] = proc_control_B.d;
              }
            }
          }

          proc_control_B.Ns = proc_control_B.Ns_d - proc_control_B.i;
          if (proc_control_B.Ns < 2) {
            proc_control_B.n_l = 0;
            proc_control_B.str_size_idx_1 = -1;
          } else {
            proc_control_B.n_l = 1;
            proc_control_B.str_size_idx_1 = proc_control_B.Ns - 1;
          }

          proc_control_B.st_Value_size_idx_1 = proc_control_B.str_size_idx_1 -
            proc_control_B.n_l;
          for (proc_control_B.Ns = 0; proc_control_B.Ns <=
               proc_control_B.st_Value_size_idx_1; proc_control_B.Ns++) {
            proc_control_B.str_data_a[proc_control_B.Ns] =
              proc_control_B.str_data_a[(proc_control_B.i + proc_control_B.n_l)
              + proc_control_B.Ns];
          }

          proc_control_B.Ns_d = proc_control_B.st_Value_size_idx_1 + 1;
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_c.lastValues[proc_control_B.Ns] =
            proc_control_B.TSamp[proc_control_B.Ns];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns <
             proc_control_B.cleanStr_size_idx_1; proc_control_B.Ns++) {
          proc_control_DW.obj_c.lastMsg[proc_control_B.Ns] = static_cast<uint8_T>
            (proc_control_B.cleanStr_data_p[proc_control_B.Ns]);
        }
      }

      // MATLABSystem: '<S311>/Get Parameter8'
      ParamGet_proc_control_185_549.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter8_o2);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S311>/Get Parameter8'
        proc_control_B.GetParameter8_o1[proc_control_B.Ns] = static_cast<uint8_T>
          (proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem4(proc_control_B.GetParameter8_o1,
        proc_control_B.GetParameter8_o2, &proc_control_B.MATLABSystem4,
        &proc_control_DW.MATLABSystem4);

      // MATLABSystem: '<S311>/Get Parameter9'
      ParamGet_proc_control_185_552.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter9_o2);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S311>/Get Parameter9'
        proc_control_B.GetParameter9_o1[proc_control_B.Ns] = static_cast<uint8_T>
          (proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem4(proc_control_B.GetParameter9_o1,
        proc_control_B.GetParameter9_o2, &proc_control_B.MATLABSystem5,
        &proc_control_DW.MATLABSystem5);

      // MATLABSystem: '<S311>/Get Parameter10'
      ParamGet_proc_control_185_554.get_parameter(128U,
        &proc_control_B.charValue_j[0], &proc_control_B.receivedLength);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 128; proc_control_B.Ns++)
      {
        proc_control_B.GetParameter10_o1[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_j[proc_control_B.Ns]);
      }

      // MATLABSystem: '<S311>/MATLAB System6' incorporates:
      //   MATLABSystem: '<S311>/Get Parameter10'

      //  Implement algorithm. Calculate y as a function of input u and
      //  discrete states.
      //  remove space and add a comma at the end
      if (proc_control_B.receivedLength < 1U) {
        proc_control_B.idx_p = 0;
      } else {
        proc_control_B.idx_p = static_cast<int32_T>
          (proc_control_B.receivedLength);
      }

      proc_control_B.st_Value_size_idx_1 = proc_control_B.idx_p;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.idx_p;
           proc_control_B.Ns++) {
        proc_control_B.charValue_j[proc_control_B.Ns] = static_cast<int8_T>
          (proc_control_B.GetParameter10_o1[proc_control_B.Ns]);
      }

      proc_control_B.Ns_d = -1;
      proc_control_B.i = 1;
      while (proc_control_B.i <= proc_control_B.idx_p) {
        if (proc_control_B.charValue_j[proc_control_B.i - 1] == ' ') {
          proc_control_B.Ns_d++;
          proc_control_B.GetParameter10_o1[proc_control_B.Ns_d] =
            static_cast<uint8_T>(proc_control_B.i);
          proc_control_B.i++;
        } else {
          proc_control_B.i++;
        }
      }

      proc_control_B.ibmat = (proc_control_B.idx_p - proc_control_B.Ns_d) - 1;
      proc_control_B.idx_p = 0;
      proc_control_B.i = 0;
      for (proc_control_B.b_n = 0; proc_control_B.b_n <= proc_control_B.Ns_d;
           proc_control_B.b_n++) {
        while (proc_control_B.i + 1 <
               proc_control_B.GetParameter10_o1[proc_control_B.b_n]) {
          proc_control_B.replaced_data_k[proc_control_B.idx_p] =
            proc_control_B.charValue_j[proc_control_B.i];
          proc_control_B.idx_p++;
          proc_control_B.i++;
        }

        proc_control_B.i++;
      }

      while (proc_control_B.i + 1 <= proc_control_B.st_Value_size_idx_1) {
        proc_control_B.replaced_data_k[proc_control_B.idx_p] =
          proc_control_B.charValue_j[proc_control_B.i];
        proc_control_B.idx_p++;
        proc_control_B.i++;
      }

      proc_control_B.cleanStr_size_idx_1 = proc_control_B.ibmat + 1;
      if (proc_control_B.ibmat - 1 >= 0) {
        std::memcpy(&proc_control_B.cleanStr_data_c[0],
                    &proc_control_B.replaced_data_k[0], proc_control_B.ibmat *
                    sizeof(char_T));
      }

      // MATLABSystem: '<S311>/MATLAB System6'
      proc_control_B.cleanStr_data_c[proc_control_B.ibmat] = ',';

      //  new msg
      for (proc_control_B.Ns = 0; proc_control_B.Ns <
           proc_control_B.cleanStr_size_idx_1; proc_control_B.Ns++) {
        proc_control_B.s1_data_n[proc_control_B.Ns] = static_cast<int8_T>
          (proc_control_DW.obj_f5.lastMsg[proc_control_B.Ns]);
      }

      proc_control_B.mask2 = false;
      proc_control_B.idx_p = 1;
      do {
        exitg2 = 0;
        if (proc_control_B.idx_p - 1 <= proc_control_B.ibmat) {
          proc_control_B.i = proc_control_B.idx_p - 1;
          if (proc_control_B.s1_data_n[proc_control_B.i] !=
              proc_control_B.cleanStr_data_c[proc_control_B.i]) {
            exitg2 = 1;
          } else {
            proc_control_B.idx_p++;
          }
        } else {
          proc_control_B.mask2 = true;
          exitg2 = 1;
        }
      } while (exitg2 == 0);

      if (!proc_control_B.mask2) {
        proc_control_B.idx_p = 0;
        while ((proc_control_B.idx_p + 1 <= proc_control_B.ibmat + 1) &&
               (proc_control_B.cleanStr_data_c[proc_control_B.idx_p] == ';')) {
          proc_control_B.idx_p++;
        }

        proc_control_B.itoken = proc_control_B.idx_p;
        while ((proc_control_B.idx_p + 1 <= proc_control_B.ibmat + 1) &&
               (proc_control_B.cleanStr_data_c[proc_control_B.idx_p] != ';')) {
          proc_control_B.idx_p++;
        }

        if (proc_control_B.itoken + 1 > proc_control_B.idx_p) {
          proc_control_B.itoken = 0;
          proc_control_B.f_j = -1;
        } else {
          proc_control_B.f_j = proc_control_B.idx_p - 1;
        }

        proc_control_B.st_Value_size_idx_1 = proc_control_B.f_j -
          proc_control_B.itoken;
        proc_control_B.idx_p = proc_control_B.st_Value_size_idx_1 + 1;
        proc_control_B.Ns_d = proc_control_B.st_Value_size_idx_1 + 1;
        for (proc_control_B.Ns = 0; proc_control_B.Ns <=
             proc_control_B.st_Value_size_idx_1; proc_control_B.Ns++) {
          proc_control_B.str_data_c[proc_control_B.Ns] =
            proc_control_B.cleanStr_data_c[proc_control_B.itoken +
            proc_control_B.Ns];
        }

        //         %% string2array
        for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.idx_p;
             proc_control_B.Ns++) {
          proc_control_B.b_varargin_1_data_g[proc_control_B.Ns] =
            proc_control_B.cleanStr_data_c[proc_control_B.itoken +
            proc_control_B.Ns];
        }

        proc_control_B.b_varargin_1_data_g[proc_control_B.st_Value_size_idx_1 +
          1] = '\x00';
        printf("input : %s \n", &proc_control_B.b_varargin_1_data_g[0]);
        fflush(stdout);
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
             proc_control_B.ibmat++) {
          proc_control_B.idx_p = 1;
          while ((proc_control_B.idx_p <= proc_control_B.Ns_d) &&
                 (proc_control_B.str_data_c[proc_control_B.idx_p - 1] == ',')) {
            proc_control_B.idx_p++;
          }

          proc_control_B.itoken = proc_control_B.idx_p - 1;
          while ((proc_control_B.idx_p <= proc_control_B.Ns_d) &&
                 (proc_control_B.str_data_c[proc_control_B.idx_p - 1] != ',')) {
            proc_control_B.idx_p++;
          }

          if (proc_control_B.idx_p > proc_control_B.Ns_d) {
            proc_control_B.i = 0;
            proc_control_B.Ns_d = 0;
          } else {
            proc_control_B.i = proc_control_B.idx_p - 1;
          }

          if (proc_control_B.itoken + 1 > proc_control_B.idx_p - 1) {
            proc_control_B.itoken = 0;
            proc_control_B.f_j = 0;
          } else {
            proc_control_B.f_j = proc_control_B.idx_p - 1;
          }

          proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.ibmat] =
            (rtNaN);
          proc_control_B.st_Value_size_idx_1 = proc_control_B.f_j -
            proc_control_B.itoken;
          if (proc_control_B.st_Value_size_idx_1 >= 1) {
            proc_control_B.ntoread = 0;
            proc_control_B.idx_p = 0;
            exitg1 = false;
            while ((!exitg1) && (proc_control_B.idx_p + 1 <=
                                 proc_control_B.st_Value_size_idx_1)) {
              proc_control_B.b_y_tmp =
                proc_control_B.str_data_c[proc_control_B.itoken +
                proc_control_B.idx_p];
              if (tmp_1[static_cast<uint8_T>(proc_control_B.b_y_tmp) & 127] ||
                  (proc_control_B.b_y_tmp == '\x00')) {
                proc_control_B.idx_p++;
              } else {
                exitg1 = true;
              }
            }

            proc_control_B.b_k = proc_control_B.st_Value_size_idx_1 + 2;
            proc_control_B.s1_size_o[0] = 1;
            proc_control_B.s1_size_o[1] = proc_control_B.st_Value_size_idx_1 + 2;
            if (proc_control_B.b_k - 1 >= 0) {
              std::memset(&proc_control_B.s1_data_n[0], 0, proc_control_B.b_k *
                          sizeof(char_T));
            }

            proc_control_B.str_size_l[0] = 1;
            proc_control_B.str_size_l[1] = proc_control_B.st_Value_size_idx_1;
            for (proc_control_B.Ns = 0; proc_control_B.Ns <
                 proc_control_B.st_Value_size_idx_1; proc_control_B.Ns++) {
              proc_control_B.str_data_m[proc_control_B.Ns] =
                proc_control_B.str_data_c[proc_control_B.itoken +
                proc_control_B.Ns];
            }

            proc_control_readfloat_pr3(proc_control_B.s1_data_n,
              proc_control_B.s1_size_o, 1, proc_control_B.str_data_m,
              proc_control_B.idx_p + 1, proc_control_B.f_j -
              proc_control_B.itoken, true, proc_control_B.b_s1_data_o,
              proc_control_B.b_s1_size, &proc_control_B.b_idx,
              &proc_control_B.b_k, &proc_control_B.mask2,
              &proc_control_B.b_varargout_1, &proc_control_B.d,
              &proc_control_B.b_varargout_1_i, &proc_control_B.success);
            proc_control_B.idx_p = proc_control_B.b_s1_size[1] - 1;
            if (proc_control_B.idx_p >= 0) {
              std::memcpy(&proc_control_B.s1_data_n[0],
                          &proc_control_B.b_s1_data_o[0], (proc_control_B.idx_p
                + 1) * sizeof(char_T));
            }

            proc_control_B.idx_p = proc_control_B.b_idx;
            if (proc_control_B.b_varargout_1) {
              proc_control_B.ntoread = 1;
            }

            if (proc_control_B.success && (proc_control_B.b_k <=
                 proc_control_B.st_Value_size_idx_1)) {
              proc_control_B.s1_data_n[proc_control_B.b_idx - 1] = ' ';
              proc_control_B.str_size_l[0] = 1;
              proc_control_B.str_size_l[1] = proc_control_B.st_Value_size_idx_1;
              for (proc_control_B.Ns = 0; proc_control_B.Ns <
                   proc_control_B.st_Value_size_idx_1; proc_control_B.Ns++) {
                proc_control_B.str_data_m[proc_control_B.Ns] =
                  proc_control_B.str_data_c[proc_control_B.itoken +
                  proc_control_B.Ns];
              }

              proc_control_B.s1_size_g[0] = 1;
              proc_control_B.s1_size_g[1] = proc_control_B.b_s1_size[1];
              proc_control_B.idx_p = proc_control_B.b_s1_size[1] - 1;
              if (proc_control_B.idx_p >= 0) {
                std::memcpy(&proc_control_B.b_s1_data_o[0],
                            &proc_control_B.s1_data_n[0], (proc_control_B.idx_p
                  + 1) * sizeof(char_T));
              }

              proc_control_readfloat_pr3(proc_control_B.b_s1_data_o,
                proc_control_B.s1_size_g, proc_control_B.b_idx + 1,
                proc_control_B.str_data_m, proc_control_B.b_k,
                proc_control_B.f_j - proc_control_B.itoken, true,
                proc_control_B.s1_data_n, proc_control_B.s1_size_o,
                &proc_control_B.idx_p, &proc_control_B.Ns,
                &proc_control_B.b_varargout_1_i, &proc_control_B.success,
                &proc_control_B.t_f, &proc_control_B.foundsign,
                &proc_control_B.c_success);
              if (proc_control_B.success) {
                proc_control_B.ntoread++;
              }

              if (proc_control_B.c_success && (proc_control_B.Ns >
                   proc_control_B.st_Value_size_idx_1) && (static_cast<boolean_T>
                   (proc_control_B.mask2 ^ proc_control_B.b_varargout_1_i)) &&
                  proc_control_B.foundsign) {
                proc_control_B.success = true;
              } else {
                proc_control_B.success = false;
              }
            } else {
              proc_control_B.t_f = 0.0;
            }

            if (proc_control_B.success) {
              proc_control_B.s1_data_n[proc_control_B.idx_p - 1] = '\x00';
              if (proc_control_B.ntoread == 2) {
                proc_control_B.idx_p = sscanf(&proc_control_B.s1_data_n[0],
                  "%lf %lf", &proc_control_B.d, &proc_control_B.t_f);
                if (proc_control_B.idx_p != 2) {
                  proc_control_B.d = (rtNaN);
                  proc_control_B.t_f = (rtNaN);
                }
              } else if (proc_control_B.ntoread == 1) {
                proc_control_B.idx_p = sscanf(&proc_control_B.s1_data_n[0],
                  "%lf", &proc_control_B.absxk);
                if (proc_control_B.b_varargout_1) {
                  if (proc_control_B.idx_p == 1) {
                    proc_control_B.d = proc_control_B.absxk;
                  } else {
                    proc_control_B.d = (rtNaN);
                  }
                } else if (proc_control_B.idx_p == 1) {
                  proc_control_B.t_f = proc_control_B.absxk;
                } else {
                  proc_control_B.t_f = (rtNaN);
                }
              }

              if (proc_control_B.mask2) {
                proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.ibmat]
                  = proc_control_B.t_f;
              } else {
                proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.ibmat]
                  = proc_control_B.d;
              }
            }
          }

          proc_control_B.Ns = proc_control_B.Ns_d - proc_control_B.i;
          if (proc_control_B.Ns < 2) {
            proc_control_B.n_l = 0;
            proc_control_B.str_size_idx_1 = -1;
          } else {
            proc_control_B.n_l = 1;
            proc_control_B.str_size_idx_1 = proc_control_B.Ns - 1;
          }

          proc_control_B.st_Value_size_idx_1 = proc_control_B.str_size_idx_1 -
            proc_control_B.n_l;
          for (proc_control_B.Ns = 0; proc_control_B.Ns <=
               proc_control_B.st_Value_size_idx_1; proc_control_B.Ns++) {
            proc_control_B.str_data_c[proc_control_B.Ns] =
              proc_control_B.str_data_c[(proc_control_B.i + proc_control_B.n_l)
              + proc_control_B.Ns];
          }

          proc_control_B.Ns_d = proc_control_B.st_Value_size_idx_1 + 1;
        }

        std::memcpy(&proc_control_DW.obj_f5.lastValues[0],
                    &proc_control_B.TmpSignalConversionAtMATL_b[0], 9U * sizeof
                    (real_T));
        for (proc_control_B.Ns = 0; proc_control_B.Ns <
             proc_control_B.cleanStr_size_idx_1; proc_control_B.Ns++) {
          proc_control_DW.obj_f5.lastMsg[proc_control_B.Ns] =
            static_cast<uint8_T>
            (proc_control_B.cleanStr_data_c[proc_control_B.Ns]);
        }
      }

      // MATLABSystem: '<S311>/Get Parameter11'
      ParamGet_proc_control_185_556.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter11_o2);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S311>/Get Parameter11'
        proc_control_B.GetParameter11_o1[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1_f(proc_control_B.GetParameter11_o1,
        proc_control_B.GetParameter11_o2, &proc_control_B.MATLABSystem7,
        &proc_control_DW.MATLABSystem7);

      // MATLABSystem: '<S311>/Get Parameter12'
      ParamGet_proc_control_185_558.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter12_o2);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S311>/Get Parameter12'
        proc_control_B.GetParameter12_o1[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1_f(proc_control_B.GetParameter12_o1,
        proc_control_B.GetParameter12_o2, &proc_control_B.MATLABSystem8,
        &proc_control_DW.MATLABSystem8);

      // MATLABSystem: '<S311>/Get Parameter13'
      ParamGet_proc_control_185_560.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter13_o2);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S311>/Get Parameter13'
        proc_control_B.GetParameter13_o1[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1_f(proc_control_B.GetParameter13_o1,
        proc_control_B.GetParameter13_o2, &proc_control_B.MATLABSystem9,
        &proc_control_DW.MATLABSystem9);

      // MATLABSystem: '<S311>/Get Parameter14'
      ParamGet_proc_control_185_562.get_parameter(64U,
        &proc_control_B.charValue_jw[0], &proc_control_B.GetParameter14_o2);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 64; proc_control_B.Ns++) {
        // MATLABSystem: '<S311>/Get Parameter14'
        proc_control_B.GetParameter14_o1[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue_jw[proc_control_B.Ns]);
      }

      proc_control_MATLABSystem1_f(proc_control_B.GetParameter14_o1,
        proc_control_B.GetParameter14_o2, &proc_control_B.MATLABSystem10,
        &proc_control_DW.MATLABSystem10);

      // MATLABSystem: '<S311>/Get Parameter15'
      ParamGet_proc_control_185_568.get_parameter(400U,
        &proc_control_B.charValue[0], &proc_control_B.receivedLength);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 400; proc_control_B.Ns++)
      {
        proc_control_B.GetParameter15_o1[proc_control_B.Ns] =
          static_cast<uint8_T>(proc_control_B.charValue[proc_control_B.Ns]);
      }

      // MATLABSystem: '<S311>/MATLAB System11' incorporates:
      //   MATLABSystem: '<S311>/Get Parameter15'

      //  Implement algorithm. Calculate y as a function of input u and
      //  discrete states.
      //  remove space and add a comma at the end
      if (proc_control_B.receivedLength < 1U) {
        proc_control_B.idx_p = 0;
      } else {
        proc_control_B.idx_p = static_cast<int32_T>
          (proc_control_B.receivedLength);
      }

      proc_control_B.st_Value_size_idx_1 = proc_control_B.idx_p;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.idx_p;
           proc_control_B.Ns++) {
        proc_control_B.charValue[proc_control_B.Ns] = static_cast<int8_T>
          (proc_control_B.GetParameter15_o1[proc_control_B.Ns]);
      }

      proc_control_B.Ns_d = -1;
      proc_control_B.i = 1;
      while (proc_control_B.i <= proc_control_B.idx_p) {
        if (proc_control_B.charValue[proc_control_B.i - 1] == ' ') {
          proc_control_B.Ns_d++;
          proc_control_B.matches_data[proc_control_B.Ns_d] = static_cast<int16_T>
            (proc_control_B.i);
          proc_control_B.i++;
        } else {
          proc_control_B.i++;
        }
      }

      proc_control_B.ibmat = (proc_control_B.idx_p - proc_control_B.Ns_d) - 1;
      proc_control_B.idx_p = 0;
      proc_control_B.i = 0;
      for (proc_control_B.b_n = 0; proc_control_B.b_n <= proc_control_B.Ns_d;
           proc_control_B.b_n++) {
        while (proc_control_B.i + 1 <
               proc_control_B.matches_data[proc_control_B.b_n]) {
          proc_control_B.replaced_data[proc_control_B.idx_p] =
            proc_control_B.charValue[proc_control_B.i];
          proc_control_B.idx_p++;
          proc_control_B.i++;
        }

        proc_control_B.i++;
      }

      while (proc_control_B.i + 1 <= proc_control_B.st_Value_size_idx_1) {
        proc_control_B.replaced_data[proc_control_B.idx_p] =
          proc_control_B.charValue[proc_control_B.i];
        proc_control_B.idx_p++;
        proc_control_B.i++;
      }

      proc_control_B.cleanStr_size_idx_1 = proc_control_B.ibmat + 1;
      if (proc_control_B.ibmat - 1 >= 0) {
        std::memcpy(&proc_control_B.cleanStr_data[0],
                    &proc_control_B.replaced_data[0], proc_control_B.ibmat *
                    sizeof(char_T));
      }

      // MATLABSystem: '<S311>/MATLAB System11'
      proc_control_B.cleanStr_data[proc_control_B.ibmat] = ',';

      //  new msg
      for (proc_control_B.Ns = 0; proc_control_B.Ns <
           proc_control_B.cleanStr_size_idx_1; proc_control_B.Ns++) {
        proc_control_B.s1_data[proc_control_B.Ns] = static_cast<int8_T>
          (proc_control_DW.obj_l.lastMsg[proc_control_B.Ns]);
      }

      proc_control_B.mask2 = false;
      proc_control_B.idx_p = 1;
      do {
        exitg2 = 0;
        if (proc_control_B.idx_p - 1 <= proc_control_B.ibmat) {
          proc_control_B.i = proc_control_B.idx_p - 1;
          if (proc_control_B.s1_data[proc_control_B.i] !=
              proc_control_B.cleanStr_data[proc_control_B.i]) {
            exitg2 = 1;
          } else {
            proc_control_B.idx_p++;
          }
        } else {
          proc_control_B.mask2 = true;
          exitg2 = 1;
        }
      } while (exitg2 == 0);

      if (!proc_control_B.mask2) {
        proc_control_B.Ns_d = proc_control_B.ibmat + 1;
        proc_control_B.st_Value_size_idx_1 = proc_control_B.ibmat;
        std::memcpy(&proc_control_B.str_data[0], &proc_control_B.cleanStr_data[0],
                    (proc_control_B.st_Value_size_idx_1 + 1) * sizeof(char_T));
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
             proc_control_B.ibmat++) {
          proc_control_B.idx_p = 1;
          while ((proc_control_B.idx_p <= proc_control_B.Ns_d) &&
                 (proc_control_B.str_data[proc_control_B.idx_p - 1] == ';')) {
            proc_control_B.idx_p++;
          }

          proc_control_B.itoken = proc_control_B.idx_p - 1;
          while ((proc_control_B.idx_p <= proc_control_B.Ns_d) &&
                 (proc_control_B.str_data[proc_control_B.idx_p - 1] != ';')) {
            proc_control_B.idx_p++;
          }

          if (proc_control_B.idx_p > proc_control_B.Ns_d) {
            proc_control_B.i = 0;
            proc_control_B.Ns_d = 0;
          } else {
            proc_control_B.i = proc_control_B.idx_p - 1;
          }

          if (proc_control_B.itoken + 1 > proc_control_B.idx_p - 1) {
            proc_control_B.itoken = 0;
            proc_control_B.f_j = -1;
          } else {
            proc_control_B.f_j = proc_control_B.idx_p - 2;
          }

          proc_control_B.st_Value_size_idx_1 = proc_control_B.f_j -
            proc_control_B.itoken;
          proc_control_B.idx_p = proc_control_B.st_Value_size_idx_1 + 1;
          proc_control_B.str_size_idx_1 = proc_control_B.st_Value_size_idx_1 + 1;
          for (proc_control_B.Ns = 0; proc_control_B.Ns <=
               proc_control_B.st_Value_size_idx_1; proc_control_B.Ns++) {
            proc_control_B.str_data_j[proc_control_B.Ns] =
              proc_control_B.str_data[proc_control_B.itoken + proc_control_B.Ns];
          }

          //         %% string2array
          for (proc_control_B.Ns = 0; proc_control_B.Ns < proc_control_B.idx_p;
               proc_control_B.Ns++) {
            proc_control_B.b_varargin_1_data_m[proc_control_B.Ns] =
              proc_control_B.str_data[proc_control_B.itoken + proc_control_B.Ns];
          }

          proc_control_B.b_varargin_1_data_m[proc_control_B.st_Value_size_idx_1
            + 1] = '\x00';
          printf("input : %s \n", &proc_control_B.b_varargin_1_data_m[0]);
          fflush(stdout);
          for (proc_control_B.b_n = 0; proc_control_B.b_n < 6;
               proc_control_B.b_n++) {
            proc_control_B.idx_p = 1;
            while ((proc_control_B.idx_p <= proc_control_B.str_size_idx_1) &&
                   (proc_control_B.str_data_j[proc_control_B.idx_p - 1] == ','))
            {
              proc_control_B.idx_p++;
            }

            proc_control_B.itoken = proc_control_B.idx_p - 1;
            while ((proc_control_B.idx_p <= proc_control_B.str_size_idx_1) &&
                   (proc_control_B.str_data_j[proc_control_B.idx_p - 1] != ','))
            {
              proc_control_B.idx_p++;
            }

            if (proc_control_B.idx_p > proc_control_B.str_size_idx_1) {
              proc_control_B.n_l = 0;
              proc_control_B.str_size_idx_1 = 0;
            } else {
              proc_control_B.n_l = proc_control_B.idx_p - 1;
            }

            if (proc_control_B.itoken + 1 > proc_control_B.idx_p - 1) {
              proc_control_B.itoken = 0;
              proc_control_B.f_j = 0;
            } else {
              proc_control_B.f_j = proc_control_B.idx_p - 1;
            }

            proc_control_B.TSamp[proc_control_B.b_n] = (rtNaN);
            proc_control_B.st_Value_size_idx_1 = proc_control_B.f_j -
              proc_control_B.itoken;
            if (proc_control_B.st_Value_size_idx_1 >= 1) {
              proc_control_B.ntoread = 0;
              proc_control_B.idx_p = 0;
              exitg1 = false;
              while ((!exitg1) && (proc_control_B.idx_p + 1 <=
                                   proc_control_B.st_Value_size_idx_1)) {
                proc_control_B.b_y_tmp =
                  proc_control_B.str_data_j[proc_control_B.itoken +
                  proc_control_B.idx_p];
                if (tmp_1[static_cast<uint8_T>(proc_control_B.b_y_tmp) & 127] ||
                    (proc_control_B.b_y_tmp == '\x00')) {
                  proc_control_B.idx_p++;
                } else {
                  exitg1 = true;
                }
              }

              proc_control_B.b_k = proc_control_B.st_Value_size_idx_1 + 2;
              proc_control_B.s1_size_d[0] = 1;
              proc_control_B.s1_size_d[1] = proc_control_B.st_Value_size_idx_1 +
                2;
              if (proc_control_B.b_k - 1 >= 0) {
                std::memset(&proc_control_B.s1_data[0], 0, proc_control_B.b_k *
                            sizeof(char_T));
              }

              proc_control_B.str_size_f[0] = 1;
              proc_control_B.str_size_f[1] = proc_control_B.st_Value_size_idx_1;
              for (proc_control_B.Ns = 0; proc_control_B.Ns <
                   proc_control_B.st_Value_size_idx_1; proc_control_B.Ns++) {
                proc_control_B.str_data_f[proc_control_B.Ns] =
                  proc_control_B.str_data_j[proc_control_B.itoken +
                  proc_control_B.Ns];
              }

              proc_control_readfloat_p(proc_control_B.s1_data,
                proc_control_B.s1_size_d, 1, proc_control_B.str_data_f,
                proc_control_B.idx_p + 1, proc_control_B.f_j -
                proc_control_B.itoken, true, proc_control_B.b_s1_data,
                proc_control_B.b_s1_size, &proc_control_B.b_idx,
                &proc_control_B.b_k, &proc_control_B.mask2,
                &proc_control_B.b_varargout_1, &proc_control_B.d,
                &proc_control_B.b_varargout_1_i, &proc_control_B.success);
              proc_control_B.idx_p = proc_control_B.b_s1_size[1] - 1;
              if (proc_control_B.idx_p >= 0) {
                std::memcpy(&proc_control_B.s1_data[0],
                            &proc_control_B.b_s1_data[0], (proc_control_B.idx_p
                  + 1) * sizeof(char_T));
              }

              proc_control_B.idx_p = proc_control_B.b_idx;
              if (proc_control_B.b_varargout_1) {
                proc_control_B.ntoread = 1;
              }

              if (proc_control_B.success && (proc_control_B.b_k <=
                   proc_control_B.st_Value_size_idx_1)) {
                proc_control_B.s1_data[proc_control_B.b_idx - 1] = ' ';
                proc_control_B.str_size_f[0] = 1;
                proc_control_B.str_size_f[1] =
                  proc_control_B.st_Value_size_idx_1;
                for (proc_control_B.Ns = 0; proc_control_B.Ns <
                     proc_control_B.st_Value_size_idx_1; proc_control_B.Ns++) {
                  proc_control_B.str_data_f[proc_control_B.Ns] =
                    proc_control_B.str_data_j[proc_control_B.itoken +
                    proc_control_B.Ns];
                }

                proc_control_B.s1_size_l[0] = 1;
                proc_control_B.s1_size_l[1] = proc_control_B.b_s1_size[1];
                proc_control_B.idx_p = proc_control_B.b_s1_size[1] - 1;
                if (proc_control_B.idx_p >= 0) {
                  std::memcpy(&proc_control_B.b_s1_data[0],
                              &proc_control_B.s1_data[0], (proc_control_B.idx_p
                    + 1) * sizeof(char_T));
                }

                proc_control_readfloat_p(proc_control_B.b_s1_data,
                  proc_control_B.s1_size_l, proc_control_B.b_idx + 1,
                  proc_control_B.str_data_f, proc_control_B.b_k,
                  proc_control_B.f_j - proc_control_B.itoken, true,
                  proc_control_B.s1_data, proc_control_B.s1_size_d,
                  &proc_control_B.idx_p, &proc_control_B.Ns,
                  &proc_control_B.b_varargout_1_i, &proc_control_B.success,
                  &proc_control_B.t_f, &proc_control_B.foundsign,
                  &proc_control_B.c_success);
                if (proc_control_B.success) {
                  proc_control_B.ntoread++;
                }

                if (proc_control_B.c_success && (proc_control_B.Ns >
                     proc_control_B.st_Value_size_idx_1) &&
                    (static_cast<boolean_T>(proc_control_B.mask2 ^
                      proc_control_B.b_varargout_1_i)) &&
                    proc_control_B.foundsign) {
                  proc_control_B.success = true;
                } else {
                  proc_control_B.success = false;
                }
              } else {
                proc_control_B.t_f = 0.0;
              }

              if (proc_control_B.success) {
                proc_control_B.s1_data[proc_control_B.idx_p - 1] = '\x00';
                if (proc_control_B.ntoread == 2) {
                  proc_control_B.idx_p = sscanf(&proc_control_B.s1_data[0],
                    "%lf %lf", &proc_control_B.d, &proc_control_B.t_f);
                  if (proc_control_B.idx_p != 2) {
                    proc_control_B.d = (rtNaN);
                    proc_control_B.t_f = (rtNaN);
                  }
                } else if (proc_control_B.ntoread == 1) {
                  proc_control_B.idx_p = sscanf(&proc_control_B.s1_data[0],
                    "%lf", &proc_control_B.absxk);
                  if (proc_control_B.b_varargout_1) {
                    if (proc_control_B.idx_p == 1) {
                      proc_control_B.d = proc_control_B.absxk;
                    } else {
                      proc_control_B.d = (rtNaN);
                    }
                  } else if (proc_control_B.idx_p == 1) {
                    proc_control_B.t_f = proc_control_B.absxk;
                  } else {
                    proc_control_B.t_f = (rtNaN);
                  }
                }

                if (proc_control_B.mask2) {
                  proc_control_B.TSamp[proc_control_B.b_n] = proc_control_B.t_f;
                } else {
                  proc_control_B.TSamp[proc_control_B.b_n] = proc_control_B.d;
                }
              }
            }

            proc_control_B.Ns = proc_control_B.str_size_idx_1 -
              proc_control_B.n_l;
            if (proc_control_B.Ns < 2) {
              proc_control_B.idx_p = 0;
              proc_control_B.b_k = -1;
            } else {
              proc_control_B.idx_p = 1;
              proc_control_B.b_k = proc_control_B.Ns - 1;
            }

            proc_control_B.st_Value_size_idx_1 = proc_control_B.b_k -
              proc_control_B.idx_p;
            for (proc_control_B.Ns = 0; proc_control_B.Ns <=
                 proc_control_B.st_Value_size_idx_1; proc_control_B.Ns++) {
              proc_control_B.str_data_j[proc_control_B.Ns] =
                proc_control_B.str_data_j[(proc_control_B.n_l +
                proc_control_B.idx_p) + proc_control_B.Ns];
            }

            proc_control_B.str_size_idx_1 = proc_control_B.st_Value_size_idx_1 +
              1;
          }

          for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
          {
            proc_control_DW.obj_l.lastValues[proc_control_B.ibmat +
              (proc_control_B.Ns << 3)] = proc_control_B.TSamp[proc_control_B.Ns];
          }

          proc_control_B.Ns = proc_control_B.Ns_d - proc_control_B.i;
          if (proc_control_B.Ns < 2) {
            proc_control_B.idx_p = 0;
            proc_control_B.f_j = -1;
          } else {
            proc_control_B.idx_p = 1;
            proc_control_B.f_j = proc_control_B.Ns - 1;
          }

          proc_control_B.st_Value_size_idx_1 = proc_control_B.f_j -
            proc_control_B.idx_p;
          for (proc_control_B.Ns = 0; proc_control_B.Ns <=
               proc_control_B.st_Value_size_idx_1; proc_control_B.Ns++) {
            proc_control_B.str_data[proc_control_B.Ns] =
              proc_control_B.str_data[(proc_control_B.i + proc_control_B.idx_p)
              + proc_control_B.Ns];
          }

          proc_control_B.Ns_d = proc_control_B.st_Value_size_idx_1 + 1;
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns <
             proc_control_B.cleanStr_size_idx_1; proc_control_B.Ns++) {
          proc_control_DW.obj_l.lastMsg[proc_control_B.Ns] = static_cast<uint8_T>
            (proc_control_B.cleanStr_data[proc_control_B.Ns]);
        }
      }

      // BusCreator: '<S311>/Bus Creator' incorporates:
      //   MATLABSystem: '<S311>/MATLAB System1'
      //   MATLABSystem: '<S311>/MATLAB System10'
      //   MATLABSystem: '<S311>/MATLAB System11'
      //   MATLABSystem: '<S311>/MATLAB System2'
      //   MATLABSystem: '<S311>/MATLAB System3'
      //   MATLABSystem: '<S311>/MATLAB System4'
      //   MATLABSystem: '<S311>/MATLAB System5'
      //   MATLABSystem: '<S311>/MATLAB System6'
      //   MATLABSystem: '<S311>/MATLAB System7'
      //   MATLABSystem: '<S311>/MATLAB System8'
      //   MATLABSystem: '<S311>/MATLAB System9'

      proc_control_B.BusCreator.rg[0] = proc_control_B.MATLABSystem1_fnik4d.rg[0];
      proc_control_B.BusCreator.rg[1] = proc_control_B.MATLABSystem1_fnik4d.rg[1];
      proc_control_B.BusCreator.rg[2] = proc_control_B.MATLABSystem1_fnik4d.rg[2];
      proc_control_B.BusCreator.rb[0] = proc_control_B.MATLABSystem2_fnik.rg[0];
      proc_control_B.BusCreator.rb[1] = proc_control_B.MATLABSystem2_fnik.rg[1];
      proc_control_B.BusCreator.rb[2] = proc_control_B.MATLABSystem2_fnik.rg[2];
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        proc_control_B.BusCreator.cdl[proc_control_B.Ns] =
          proc_control_DW.obj_c.lastValues[proc_control_B.Ns];
      }

      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        proc_control_B.BusCreator.cdq[proc_control_B.i] =
          proc_control_B.MATLABSystem4.cdq[proc_control_B.i];
      }

      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        proc_control_B.BusCreator.added_mass[proc_control_B.i] =
          proc_control_B.MATLABSystem5.cdq[proc_control_B.i];
      }

      std::memcpy(&proc_control_B.BusCreator.I[0],
                  &proc_control_DW.obj_f5.lastValues[0], 9U * sizeof(real_T));
      proc_control_B.BusCreator.depth_pose[0] = proc_control_B.MATLABSystem7.rg
        [0];
      proc_control_B.BusCreator.depth_pose[1] = proc_control_B.MATLABSystem7.rg
        [1];
      proc_control_B.BusCreator.depth_pose[2] = proc_control_B.MATLABSystem7.rg
        [2];
      proc_control_B.BusCreator.hydro_pose[0] = proc_control_B.MATLABSystem8.rg
        [0];
      proc_control_B.BusCreator.hydro_pose[1] = proc_control_B.MATLABSystem8.rg
        [1];
      proc_control_B.BusCreator.hydro_pose[2] = proc_control_B.MATLABSystem8.rg
        [2];
      proc_control_B.BusCreator.sonar_pose[0] = proc_control_B.MATLABSystem9.rg
        [0];
      proc_control_B.BusCreator.sonar_pose[1] = proc_control_B.MATLABSystem9.rg
        [1];
      proc_control_B.BusCreator.sonar_pose[2] = proc_control_B.MATLABSystem9.rg
        [2];
      proc_control_B.BusCreator.dvl_rotation[0] =
        proc_control_B.MATLABSystem10.rg[0];
      proc_control_B.BusCreator.dvl_rotation[1] =
        proc_control_B.MATLABSystem10.rg[1];
      proc_control_B.BusCreator.dvl_rotation[2] =
        proc_control_B.MATLABSystem10.rg[2];
      std::memcpy(&proc_control_B.BusCreator.thrusters[0],
                  &proc_control_DW.obj_l.lastValues[0], 48U * sizeof(real_T));

      // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
    }
  }

  // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
  //   EnablePort: '<S225>/Enable'

  if (proc_control_B.NewDvlMsg) {
    if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
      // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
      //   EnablePort: '<S253>/Enable'

      // Delay: '<S250>/Delay'
      if (proc_control_DW.Delay_DSTATE_i > 0.0) {
        // Gain: '<S254>/1//2'
        proc_control_B.t65 = proc_control_P.u2_Gain_b *
          proc_control_B.BusCreator.dvl_rotation[0];

        // Trigonometry: '<S254>/sincos'
        proc_control_B.sincos_o2[0] = std::cos(proc_control_B.t65);
        proc_control_B.oa = std::sin(proc_control_B.t65);

        // Gain: '<S254>/1//2'
        proc_control_B.t65 = proc_control_P.u2_Gain_b *
          proc_control_B.BusCreator.dvl_rotation[1];

        // Trigonometry: '<S254>/sincos'
        proc_control_B.sincos_o2[1] = std::cos(proc_control_B.t65);
        proc_control_B.theta0 = std::sin(proc_control_B.t65);

        // Gain: '<S254>/1//2'
        proc_control_B.t65 = proc_control_P.u2_Gain_b *
          proc_control_B.BusCreator.dvl_rotation[2];

        // Trigonometry: '<S254>/sincos'
        proc_control_B.sincos_o2[2] = std::cos(proc_control_B.t65);
        proc_control_B.t65 = std::sin(proc_control_B.t65);

        // Fcn: '<S254>/q0' incorporates:
        //   Fcn: '<S254>/q3'

        proc_control_B.d = proc_control_B.sincos_o2[0] *
          proc_control_B.sincos_o2[1];
        proc_control_B.t3 = proc_control_B.oa * proc_control_B.theta0;

        // Fcn: '<S254>/q0'
        proc_control_B.q0 = proc_control_B.d * proc_control_B.sincos_o2[2] -
          proc_control_B.t3 * proc_control_B.t65;

        // Fcn: '<S254>/q1' incorporates:
        //   Fcn: '<S254>/q2'

        proc_control_B.theta0 *= proc_control_B.sincos_o2[0];
        proc_control_B.oa *= proc_control_B.sincos_o2[1];

        // Fcn: '<S254>/q1'
        proc_control_B.q1 = proc_control_B.theta0 * proc_control_B.t65 +
          proc_control_B.oa * proc_control_B.sincos_o2[2];

        // Fcn: '<S254>/q2'
        proc_control_B.q2 = proc_control_B.theta0 * proc_control_B.sincos_o2[2]
          - proc_control_B.oa * proc_control_B.t65;

        // Fcn: '<S254>/q3'
        proc_control_B.q3 = proc_control_B.d * proc_control_B.t65 +
          proc_control_B.t3 * proc_control_B.sincos_o2[2];
      }

      // End of Delay: '<S250>/Delay'
      // End of Outputs for SubSystem: '<S250>/Subsystem2'
    }

    // MATLAB Function: '<S225>/MATLAB Function1' incorporates:
    //   Constant: '<S225>/Constant1'
    //   Merge: '<S3>/Merge2'
    //   SignalConversion generated from: '<S3>/Bus Selector1'

    proc_control_B.sincos_o1_d[0] = std::abs(proc_control_B.linearScaling);
    proc_control_B.sincos_o1_d[1] = std::abs(proc_control_B.xtmp);
    proc_control_B.sincos_o1_d[2] = std::abs(proc_control_B.b_norm);
    if (!std::isnan(proc_control_B.sincos_o1_d[0])) {
      proc_control_B.idx_p = 1;
    } else {
      proc_control_B.idx_p = 0;
      proc_control_B.b_k = 2;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_k <= 3)) {
        if (!std::isnan(proc_control_B.sincos_o1_d[proc_control_B.b_k - 1])) {
          proc_control_B.idx_p = proc_control_B.b_k;
          exitg1 = true;
        } else {
          proc_control_B.b_k++;
        }
      }
    }

    if (proc_control_B.idx_p == 0) {
      proc_control_B.scale = proc_control_B.sincos_o1_d[0];
    } else {
      proc_control_B.scale = proc_control_B.sincos_o1_d[proc_control_B.idx_p - 1];
      while (proc_control_B.idx_p + 1 <= 3) {
        if (proc_control_B.scale <
            proc_control_B.sincos_o1_d[proc_control_B.idx_p]) {
          proc_control_B.scale = proc_control_B.sincos_o1_d[proc_control_B.idx_p];
        }

        proc_control_B.idx_p++;
      }
    }

    if (proc_control_B.scale < proc_control_P.Constant1_Value_aa) {
      proc_control_B.sincos_o1_d[0] = proc_control_B.linearScaling;
      proc_control_B.sincos_o1_d[1] = proc_control_B.xtmp;
      proc_control_B.sincos_o1_d[2] = proc_control_B.b_norm;
    } else {
      proc_control_B.TmpSignalConversionAtSFunct[0] = std::abs(proc_control_B.t4);
      proc_control_B.TmpSignalConversionAtSFunct[1] = std::abs(proc_control_B.t8);
      proc_control_B.TmpSignalConversionAtSFunct[2] = std::abs(proc_control_B.t9);
      proc_control_B.TmpSignalConversionAtSFunct[3] = std::abs(proc_control_B.oc);
      if (!std::isnan(proc_control_B.TmpSignalConversionAtSFunct[0])) {
        proc_control_B.b_idx = 1;
      } else {
        proc_control_B.b_idx = 0;
        proc_control_B.idx_p = 2;
        exitg1 = false;
        while ((!exitg1) && (proc_control_B.idx_p <= 4)) {
          if (!std::isnan
              (proc_control_B.TmpSignalConversionAtSFunct[proc_control_B.idx_p -
               1])) {
            proc_control_B.b_idx = proc_control_B.idx_p;
            exitg1 = true;
          } else {
            proc_control_B.idx_p++;
          }
        }
      }

      if (proc_control_B.b_idx == 0) {
        proc_control_B.scale = proc_control_B.TmpSignalConversionAtSFunct[0];
      } else {
        proc_control_B.scale =
          proc_control_B.TmpSignalConversionAtSFunct[proc_control_B.b_idx - 1];
        while (proc_control_B.b_idx + 1 <= 4) {
          if (proc_control_B.scale <
              proc_control_B.TmpSignalConversionAtSFunct[proc_control_B.b_idx])
          {
            proc_control_B.scale =
              proc_control_B.TmpSignalConversionAtSFunct[proc_control_B.b_idx];
          }

          proc_control_B.b_idx++;
        }
      }

      if (proc_control_B.scale < proc_control_P.Constant1_Value_aa) {
        proc_control_B.sincos_o1_d[0] = proc_control_B.t4;
        proc_control_B.sincos_o1_d[1] = proc_control_B.t8;
        proc_control_B.sincos_o1_d[2] = proc_control_B.t9;
      } else {
        proc_control_B.sincos_o1_d[0] = 0.0;
        proc_control_B.sincos_o1_d[1] = 0.0;
        proc_control_B.sincos_o1_d[2] = 0.0;
      }
    }

    // End of MATLAB Function: '<S225>/MATLAB Function1'
    if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
      // Sqrt: '<S259>/sqrt' incorporates:
      //   Product: '<S260>/Product'
      //   Product: '<S260>/Product1'
      //   Product: '<S260>/Product2'
      //   Product: '<S260>/Product3'
      //   Sum: '<S260>/Sum'

      proc_control_B.Product3_pv = std::sqrt(((proc_control_B.q0 *
        proc_control_B.q0 + proc_control_B.q1 * proc_control_B.q1) +
        proc_control_B.q2 * proc_control_B.q2) + proc_control_B.q3 *
        proc_control_B.q3);

      // Product: '<S255>/Product'
      proc_control_B.Product_n = proc_control_B.q0 / proc_control_B.Product3_pv;

      // Product: '<S255>/Product1'
      proc_control_B.Product1_j1 = proc_control_B.q1 /
        proc_control_B.Product3_pv;

      // Product: '<S255>/Product2'
      proc_control_B.Product2_lm = proc_control_B.q2 /
        proc_control_B.Product3_pv;

      // Product: '<S255>/Product3'
      proc_control_B.Product3_pv = proc_control_B.q3 /
        proc_control_B.Product3_pv;

      // Product: '<S256>/Product' incorporates:
      //   Product: '<S257>/Product'

      proc_control_B.linearScaling = proc_control_B.Product1_j1 *
        proc_control_B.Product2_lm;

      // Product: '<S256>/Product1' incorporates:
      //   Product: '<S257>/Product1'

      proc_control_B.xtmp = proc_control_B.Product_n *
        proc_control_B.Product3_pv;

      // Gain: '<S256>/Gain' incorporates:
      //   Product: '<S256>/Product'
      //   Product: '<S256>/Product1'
      //   Sum: '<S256>/Sum1'

      proc_control_B.Gain_p = (proc_control_B.linearScaling +
        proc_control_B.xtmp) * proc_control_P.Gain_Gain_o;

      // Gain: '<S256>/Gain1' incorporates:
      //   Product: '<S256>/Product2'
      //   Product: '<S256>/Product3'
      //   Sum: '<S256>/Sum2'

      proc_control_B.Gain1 = (proc_control_B.Product1_j1 *
        proc_control_B.Product3_pv - proc_control_B.Product_n *
        proc_control_B.Product2_lm) * proc_control_P.Gain1_Gain_k;

      // Product: '<S256>/Product7' incorporates:
      //   Product: '<S257>/Product7'

      proc_control_B.d = proc_control_B.Product3_pv * proc_control_B.Product3_pv;

      // Gain: '<S256>/Gain2' incorporates:
      //   Constant: '<S256>/Constant'
      //   Product: '<S256>/Product6'
      //   Product: '<S256>/Product7'
      //   Sum: '<S256>/Sum3'

      proc_control_B.Gain2 = ((proc_control_P.Constant_Value_fg -
        proc_control_B.Product2_lm * proc_control_B.Product2_lm) -
        proc_control_B.d) * proc_control_P.Gain2_Gain_o;

      // Gain: '<S257>/Gain' incorporates:
      //   Sum: '<S257>/Sum1'

      proc_control_B.Gain_c = (proc_control_B.linearScaling -
        proc_control_B.xtmp) * proc_control_P.Gain_Gain_mq;

      // Gain: '<S257>/Gain1' incorporates:
      //   Product: '<S257>/Product2'
      //   Product: '<S257>/Product3'
      //   Sum: '<S257>/Sum2'

      proc_control_B.Gain1_m = (proc_control_B.Product_n *
        proc_control_B.Product1_j1 + proc_control_B.Product2_lm *
        proc_control_B.Product3_pv) * proc_control_P.Gain1_Gain_bk;

      // Gain: '<S257>/Gain2' incorporates:
      //   Constant: '<S257>/Constant'
      //   Product: '<S257>/Product6'
      //   Sum: '<S257>/Sum3'

      proc_control_B.Gain2_l = ((proc_control_P.Constant_Value_j5 -
        proc_control_B.Product1_j1 * proc_control_B.Product1_j1) -
        proc_control_B.d) * proc_control_P.Gain2_Gain_k;
    }

    // Sum: '<S256>/Sum' incorporates:
    //   Product: '<S256>/Product4'
    //   Product: '<S256>/Product5'
    //   Product: '<S256>/Product8'

    proc_control_B.Sum = (proc_control_B.sincos_o1_d[0] * proc_control_B.Gain2 +
                          proc_control_B.Gain_p * proc_control_B.sincos_o1_d[1])
      + proc_control_B.Gain1 * proc_control_B.sincos_o1_d[2];

    // Sum: '<S257>/Sum' incorporates:
    //   Product: '<S257>/Product4'
    //   Product: '<S257>/Product5'
    //   Product: '<S257>/Product8'

    proc_control_B.Sum_o = (proc_control_B.sincos_o1_d[0] *
      proc_control_B.Gain_c + proc_control_B.Gain2_l *
      proc_control_B.sincos_o1_d[1]) + proc_control_B.Gain1_m *
      proc_control_B.sincos_o1_d[2];
    if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
      // Gain: '<S258>/Gain' incorporates:
      //   Product: '<S258>/Product'
      //   Product: '<S258>/Product1'
      //   Sum: '<S258>/Sum1'

      proc_control_B.Gain_i = (proc_control_B.Product1_j1 *
        proc_control_B.Product3_pv + proc_control_B.Product_n *
        proc_control_B.Product2_lm) * proc_control_P.Gain_Gain_nh;

      // Gain: '<S258>/Gain1' incorporates:
      //   Product: '<S258>/Product2'
      //   Product: '<S258>/Product3'
      //   Sum: '<S258>/Sum2'

      proc_control_B.Gain1_g = (proc_control_B.Product2_lm *
        proc_control_B.Product3_pv - proc_control_B.Product_n *
        proc_control_B.Product1_j1) * proc_control_P.Gain1_Gain_c;

      // Gain: '<S258>/Gain2' incorporates:
      //   Constant: '<S258>/Constant'
      //   Product: '<S258>/Product6'
      //   Product: '<S258>/Product7'
      //   Sum: '<S258>/Sum3'

      proc_control_B.Gain2_b = ((proc_control_P.Constant_Value_ol -
        proc_control_B.Product1_j1 * proc_control_B.Product1_j1) -
        proc_control_B.Product2_lm * proc_control_B.Product2_lm) *
        proc_control_P.Gain2_Gain_br;

      // Update for Delay: '<S250>/Delay' incorporates:
      //   Constant: '<S250>/Constant6'

      proc_control_DW.Delay_DSTATE_i = proc_control_P.Constant6_Value;
    }

    // Sum: '<S258>/Sum' incorporates:
    //   Product: '<S258>/Product4'
    //   Product: '<S258>/Product5'
    //   Product: '<S258>/Product8'

    proc_control_B.Sum_c = (proc_control_B.sincos_o1_d[0] *
      proc_control_B.Gain_i + proc_control_B.Gain1_g *
      proc_control_B.sincos_o1_d[1]) + proc_control_B.Gain2_b *
      proc_control_B.sincos_o1_d[2];
  }

  // End of Outputs for SubSystem: '<S8>/DVL Mesurments'

  // Outputs for Enabled SubSystem: '<S8>/Detph Mesurments' incorporates:
  //   EnablePort: '<S226>/Enable'

  if (proc_control_B.newPressureMsg) {
    // Sqrt: '<S267>/sqrt' incorporates:
    //   Product: '<S268>/Product'
    //   Product: '<S268>/Product1'
    //   Product: '<S268>/Product2'
    //   Product: '<S268>/Product3'
    //   Sum: '<S268>/Sum'

    proc_control_B.Product3_pv = std::sqrt
      (((proc_control_B.TmpSignalConversionAtMATLAB[0] *
         proc_control_B.TmpSignalConversionAtMATLAB[0] +
         proc_control_B.TmpSignalConversionAtMATLAB[1] *
         proc_control_B.TmpSignalConversionAtMATLAB[1]) +
        proc_control_B.TmpSignalConversionAtMATLAB[2] *
        proc_control_B.TmpSignalConversionAtMATLAB[2]) +
       proc_control_B.TmpSignalConversionAtMATLAB[3] *
       proc_control_B.TmpSignalConversionAtMATLAB[3]);

    // Product: '<S263>/Product'
    proc_control_B.Product_n = proc_control_B.TmpSignalConversionAtMATLAB[0] /
      proc_control_B.Product3_pv;

    // Product: '<S263>/Product1'
    proc_control_B.absxk = proc_control_B.TmpSignalConversionAtMATLAB[1] /
      proc_control_B.Product3_pv;

    // Product: '<S263>/Product2'
    proc_control_B.Product1_j1 = proc_control_B.TmpSignalConversionAtMATLAB[2] /
      proc_control_B.Product3_pv;

    // Product: '<S263>/Product3'
    proc_control_B.Product3_pv = proc_control_B.TmpSignalConversionAtMATLAB[3] /
      proc_control_B.Product3_pv;

    // Sum: '<S226>/Sum' incorporates:
    //   Constant: '<S266>/Constant'
    //   Gain: '<S266>/Gain'
    //   Gain: '<S266>/Gain1'
    //   Gain: '<S266>/Gain2'
    //   Merge: '<S3>/Merge4'
    //   Product: '<S266>/Product'
    //   Product: '<S266>/Product1'
    //   Product: '<S266>/Product2'
    //   Product: '<S266>/Product3'
    //   Product: '<S266>/Product4'
    //   Product: '<S266>/Product5'
    //   Product: '<S266>/Product6'
    //   Product: '<S266>/Product7'
    //   Product: '<S266>/Product8'
    //   SignalConversion generated from: '<S3>/Bus Selector6'
    //   Sum: '<S266>/Sum'
    //   Sum: '<S266>/Sum1'
    //   Sum: '<S266>/Sum2'
    //   Sum: '<S266>/Sum3'

    proc_control_B.zposition = proc_control_B.rtb_Merge4_Data -
      (((proc_control_B.absxk * proc_control_B.Product3_pv +
         proc_control_B.Product_n * proc_control_B.Product1_j1) *
        proc_control_P.Gain_Gain_bk * proc_control_B.BusCreator.depth_pose[0] +
        (proc_control_B.Product1_j1 * proc_control_B.Product3_pv -
         proc_control_B.Product_n * proc_control_B.absxk) *
        proc_control_P.Gain1_Gain_p * proc_control_B.BusCreator.depth_pose[1]) +
       ((proc_control_P.Constant_Value_ay - proc_control_B.absxk *
         proc_control_B.absxk) - proc_control_B.Product1_j1 *
        proc_control_B.Product1_j1) * proc_control_P.Gain2_Gain_dh *
       proc_control_B.BusCreator.depth_pose[2]);
  }

  // End of Outputs for SubSystem: '<S8>/Detph Mesurments'
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // Logic: '<S228>/NOT'
    proc_control_B.NOT = !(proc_control_B.NavReset != 0.0);
  }

  // Outputs for Enabled SubSystem: '<S3>/Subsystem' incorporates:
  //   EnablePort: '<S67>/Enable'

  // Logic: '<S3>/NOT' incorporates:
  //   Delay: '<S3>/Delay'

  if (!(proc_control_B.y != 0.0)) {
    // Switch: '<S83>/Reset' incorporates:
    //   Constant: '<S67>/Constant1'
    //   Constant: '<S83>/Initial Condition'
    //   Memory: '<S83>/Memory'
    //   MinMax: '<S81>/MinMax'

    if (proc_control_P.Constant1_Value_h != 0.0) {
      proc_control_B.NewDvlMsg = proc_control_P.MinMaxRunningResettable_vinit;
    } else {
      proc_control_B.NewDvlMsg = (proc_control_B.NewDvlMsg ||
        proc_control_DW.Memory_PreviousInput_i);
    }

    // End of Switch: '<S83>/Reset'

    // Switch: '<S84>/Reset' incorporates:
    //   Constant: '<S67>/Constant'
    //   Constant: '<S84>/Initial Condition'
    //   Memory: '<S84>/Memory'
    //   MinMax: '<S82>/MinMax'

    if (proc_control_P.Constant_Value_f2j != 0.0) {
      proc_control_B.Merge = proc_control_P.MinMaxRunningResettable1_vinit;
    } else {
      proc_control_B.Merge = (proc_control_B.Merge ||
        proc_control_DW.Memory_PreviousInput_f);
    }

    // End of Switch: '<S84>/Reset'

    // MATLAB Function: '<S67>/MATLAB Function'
    proc_control_B.y = (proc_control_B.NewDvlMsg + proc_control_B.Merge >= 2);

    // Update for Memory: '<S83>/Memory'
    proc_control_DW.Memory_PreviousInput_i = proc_control_B.NewDvlMsg;

    // Update for Memory: '<S84>/Memory'
    proc_control_DW.Memory_PreviousInput_f = proc_control_B.Merge;
  }

  // End of Logic: '<S3>/NOT'
  // End of Outputs for SubSystem: '<S3>/Subsystem'

  // Outputs for Enabled SubSystem: '<Root>/Sensor Manager' incorporates:
  //   EnablePort: '<S6>/Enable'

  // Outputs for Enabled SubSystem: '<S8>/Subsystem' incorporates:
  //   EnablePort: '<S229>/Enable'

  // Logic: '<S228>/AND' incorporates:
  //   Constant: '<S229>/Constant'
  //   Constant: '<S272>/Enable1'
  //   Constant: '<S272>/Enable3'
  //   DataTypeConversion: '<S272>/DataTypeConversion_Enable2'

  if (proc_control_B.NOT && (proc_control_B.y != 0.0)) {
    // Outputs for Enabled SubSystem: '<S272>/Correct1' incorporates:
    //   EnablePort: '<S273>/Enable'

    if (proc_control_P.Enable1_Value) {
      // MATLAB Function: '<S273>/Correct' incorporates:
      //   Constant: '<S272>/BlockOrdering'
      //   Constant: '<S272>/R1'
      //   DataStoreRead: '<S273>/Data Store ReadX'
      //   DataStoreWrite: '<S273>/Data Store WriteP'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   If: '<S10>/If'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S122>/N to A'
      //   Lookup_n-D: '<S122>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   MATLABSystem: '<S123>/MATLAB System'
      //   MATLABSystem: '<S290>/MATLAB System1'
      //   MATLABSystem: '<S311>/MATLAB System11'
      //   MATLABSystem: '<S311>/MATLAB System3'
      //   MATLABSystem: '<S311>/MATLAB System6'
      //   SwitchCase: '<S120>/Switch Case'
      //   SwitchCase: '<S9>/Switch Case'
      //   Trigonometry: '<S254>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //   UniformRandomNumber: '<S12>/ Drift'
      //
      proc_control_B.blockOrdering_o = proc_control_P.BlockOrdering_Value;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        proc_control_B.z_k[proc_control_B.Ns] =
          proc_control_DW.x[b[proc_control_B.Ns]];
      }

      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        std::memcpy(&proc_control_B.TmpSignalConversionAtMAT_lt[0],
                    &proc_control_DW.x[0], 13U * sizeof(real_T));
        proc_control_B.absxk = std::fmax(1.4901161193847656E-8,
          1.4901161193847656E-8 * std::abs
          (proc_control_DW.x[proc_control_B.ibmat]));
        proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.ibmat] =
          proc_control_DW.x[proc_control_B.ibmat] + proc_control_B.absxk;
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++)
        {
          proc_control_B.dHdx[proc_control_B.Ns + 7 * proc_control_B.ibmat] =
            (proc_control_B.TmpSignalConversionAtMAT_lt[b[proc_control_B.Ns]] -
             proc_control_B.z_k[proc_control_B.Ns]) / proc_control_B.absxk;
        }
      }

      proc_control_qrFactor_MMa7wW5h(proc_control_B.dHdx, proc_control_DW.P,
        proc_control_P.R1_Value, proc_control_B.Sy);
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        std::memset(&proc_control_B.A_l[proc_control_B.Ns], 0, 13U * sizeof
                    (real_T));
        proc_control_B.Ns += 13;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
             proc_control_B.ibmat++) {
          for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 13;
               proc_control_B.idx_p++) {
            proc_control_B.st_Value_size_idx_1 = 13 * proc_control_B.ibmat +
              proc_control_B.idx_p;
            proc_control_B.A_l[proc_control_B.st_Value_size_idx_1] +=
              proc_control_DW.P[13 * proc_control_B.Ns + proc_control_B.idx_p] *
              proc_control_DW.P[13 * proc_control_B.Ns + proc_control_B.ibmat];
          }
        }

        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
             proc_control_B.ibmat++) {
          proc_control_B.K[proc_control_B.ibmat + 7 * proc_control_B.Ns] = 0.0;
        }
      }

      proc_control_B.Ns = 0;
      proc_control_B.idx_p = 0;
      for (proc_control_B.st_Value_size_idx_1 = 0;
           proc_control_B.st_Value_size_idx_1 < 13;
           proc_control_B.st_Value_size_idx_1++) {
        proc_control_B.Ns_d = 0;
        for (proc_control_B.n_l = 0; proc_control_B.n_l < 13; proc_control_B.n_l
             ++) {
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
               proc_control_B.ibmat++) {
            proc_control_B.b_n = proc_control_B.ibmat + proc_control_B.Ns_d;
            proc_control_B.K[proc_control_B.b_n] +=
              proc_control_B.A_l[proc_control_B.n_l + proc_control_B.Ns] *
              proc_control_B.dHdx[proc_control_B.ibmat + proc_control_B.idx_p];
          }

          proc_control_B.Ns_d += 7;
        }

        proc_control_B.Ns += 13;
        proc_control_B.idx_p += 7;
      }

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S225>/Enable'

      // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
      //   EnablePort: '<S253>/Enable'

      proc_control_B.Ns = 0;

      // End of Outputs for SubSystem: '<S250>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 13;
           proc_control_B.idx_p++) {
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
             proc_control_B.ibmat++) {
          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S225>/Enable'

          // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
          //   EnablePort: '<S253>/Enable'

          // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
          //   ActionPort: '<S308>/Action Port'

          // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
          //   ActionPort: '<S123>/Action Port'

          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S290>/Action Port'

          proc_control_B.i = proc_control_B.ibmat + proc_control_B.Ns;

          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
          // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
          proc_control_B.C_l[proc_control_B.i] =
            proc_control_B.K[proc_control_B.i];

          // End of Outputs for SubSystem: '<S250>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        }

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S225>/Enable'

        // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
        //   EnablePort: '<S253>/Enable'

        proc_control_B.Ns += 7;

        // End of Outputs for SubSystem: '<S250>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      trisolve_Ewqm83ue(proc_control_B.Sy, proc_control_B.C_l);

      // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
      //   ActionPort: '<S308>/Action Port'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S123>/Action Port'

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S290>/Action Port'

      // SwitchCase: '<S120>/Switch Case' incorporates:
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   If: '<S10>/If'
      //   MATLAB Function: '<S273>/Correct'
      //   MATLABSystem: '<S123>/MATLAB System'
      //   MATLABSystem: '<S290>/MATLAB System1'
      //   MATLABSystem: '<S311>/MATLAB System11'
      //   MATLABSystem: '<S311>/MATLAB System3'
      //   MATLABSystem: '<S311>/MATLAB System6'
      //   SwitchCase: '<S9>/Switch Case'

      proc_control_B.Ns_d = 0;

      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<S10>/Get_ROS_param '

      // MATLAB Function: '<S273>/Correct' incorporates:
      //   Constant: '<S272>/R1'
      //   DataStoreRead: '<S273>/Data Store ReadX'
      //   DataStoreWrite: '<S273>/Data Store WriteP'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   If: '<S10>/If'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S122>/N to A'
      //   Lookup_n-D: '<S122>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   MATLABSystem: '<S123>/MATLAB System'
      //   MATLABSystem: '<S290>/MATLAB System1'
      //   MATLABSystem: '<S311>/MATLAB System11'
      //   MATLABSystem: '<S311>/MATLAB System3'
      //   MATLABSystem: '<S311>/MATLAB System6'
      //   SwitchCase: '<S120>/Switch Case'
      //   SwitchCase: '<S9>/Switch Case'
      //   Trigonometry: '<S254>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //   UniformRandomNumber: '<S12>/ Drift'
      //
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 7;
             proc_control_B.idx_p++) {
          // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
          //   ActionPort: '<S308>/Action Port'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
          //   ActionPort: '<S123>/Action Port'

          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S290>/Action Port'

          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S225>/Enable'

          // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
          //   EnablePort: '<S253>/Enable'

          proc_control_B.i = proc_control_B.idx_p + proc_control_B.Ns_d;

          // End of Outputs for SubSystem: '<S250>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          proc_control_B.b_C_p[proc_control_B.i] =
            proc_control_B.C_l[proc_control_B.i];

          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
        }

        // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
        //   ActionPort: '<S308>/Action Port'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S123>/Action Port'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S290>/Action Port'

        proc_control_B.Ns_d += 7;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
           proc_control_B.ibmat++) {
        proc_control_B.idx_p = 0;
        for (proc_control_B.st_Value_size_idx_1 = 0;
             proc_control_B.st_Value_size_idx_1 < 7;
             proc_control_B.st_Value_size_idx_1++) {
          proc_control_B.Sy_a[proc_control_B.st_Value_size_idx_1 +
            proc_control_B.Ns] = proc_control_B.Sy[proc_control_B.idx_p +
            proc_control_B.ibmat];
          proc_control_B.idx_p += 7;
        }

        proc_control_B.Ns += 7;
      }

      trisolve_kmp7BqBh(proc_control_B.Sy_a, proc_control_B.b_C_p);
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
           proc_control_B.ibmat++) {
        proc_control_B.idx_p = 0;
        for (proc_control_B.st_Value_size_idx_1 = 0;
             proc_control_B.st_Value_size_idx_1 < 13;
             proc_control_B.st_Value_size_idx_1++) {
          proc_control_B.K[proc_control_B.st_Value_size_idx_1 +
            proc_control_B.Ns] = proc_control_B.b_C_p[proc_control_B.idx_p +
            proc_control_B.ibmat];
          proc_control_B.idx_p += 7;
        }

        proc_control_B.Ns += 13;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 91; proc_control_B.Ns++) {
        proc_control_B.C_l[proc_control_B.Ns] =
          -proc_control_B.K[proc_control_B.Ns];
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        std::memset(&proc_control_B.A_l[proc_control_B.Ns * 13], 0, 13U * sizeof
                    (real_T));
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 7;
             proc_control_B.idx_p++) {
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
               proc_control_B.ibmat++) {
            proc_control_B.i = 13 * proc_control_B.Ns + proc_control_B.ibmat;
            proc_control_B.A_l[proc_control_B.i] += proc_control_B.C_l[13 *
              proc_control_B.idx_p + proc_control_B.ibmat] *
              proc_control_B.dHdx[7 * proc_control_B.Ns + proc_control_B.idx_p];
          }
        }
      }

      proc_control_B.Ns_d = 0;
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        proc_control_B.A_l[proc_control_B.Ns_d]++;
        proc_control_B.Ns_d += 14;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        std::memset(&proc_control_B.C_l[proc_control_B.Ns * 13], 0, 13U * sizeof
                    (real_T));
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 7;
             proc_control_B.idx_p++) {
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
               proc_control_B.ibmat++) {
            proc_control_B.b_n = 13 * proc_control_B.Ns + proc_control_B.ibmat;
            proc_control_B.C_l[proc_control_B.b_n] += proc_control_B.K[13 *
              proc_control_B.idx_p + proc_control_B.ibmat] *
              proc_control_P.R1_Value[7 * proc_control_B.Ns +
              proc_control_B.idx_p];
          }
        }
      }

      proc_control_qrFactor_1jDj6Vzn(proc_control_B.A_l, proc_control_DW.P,
        proc_control_B.C_l);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        proc_control_B.z_k[proc_control_B.Ns] =
          proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.Ns] -
          proc_control_DW.x[b[proc_control_B.Ns]];
      }

      // DataStoreWrite: '<S273>/Data Store WriteX' incorporates:
      //   DataStoreRead: '<S273>/Data Store ReadX'
      //   MATLAB Function: '<S273>/Correct'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.AngularRate_a_idx_1 = 0.0;
        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 7;
             proc_control_B.idx_p++) {
          proc_control_B.AngularRate_a_idx_1 +=
            proc_control_B.K[proc_control_B.ibmat + proc_control_B.Ns] *
            proc_control_B.z_k[proc_control_B.idx_p];
          proc_control_B.ibmat += 13;
        }

        proc_control_DW.x[proc_control_B.Ns] +=
          proc_control_B.AngularRate_a_idx_1;
      }

      // End of DataStoreWrite: '<S273>/Data Store WriteX'
    }

    // End of Outputs for SubSystem: '<S272>/Correct1'

    // Outputs for Enabled SubSystem: '<S272>/Correct2' incorporates:
    //   EnablePort: '<S274>/Enable'

    if (proc_control_P.Constant_Value_lx != 0.0) {
      // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
      //   ActionPort: '<S308>/Action Port'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S123>/Action Port'

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S290>/Action Port'

      // SwitchCase: '<S120>/Switch Case' incorporates:
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   If: '<S10>/If'
      //   MATLAB Function: '<S274>/Correct'
      //   MATLABSystem: '<S123>/MATLAB System'
      //   MATLABSystem: '<S290>/MATLAB System1'
      //   MATLABSystem: '<S311>/MATLAB System11'
      //   MATLABSystem: '<S311>/MATLAB System3'
      //   MATLABSystem: '<S311>/MATLAB System6'
      //   SwitchCase: '<S9>/Switch Case'

      proc_control_B.Ns_d = 0;

      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<S10>/Get_ROS_param '

      // MATLAB Function: '<S274>/Correct' incorporates:
      //   Constant: '<S272>/R2'
      //   DataStoreRead: '<S274>/Data Store ReadX'
      //   DataStoreWrite: '<S274>/Data Store WriteP'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   If: '<S10>/If'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S122>/N to A'
      //   Lookup_n-D: '<S122>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   MATLABSystem: '<S123>/MATLAB System'
      //   MATLABSystem: '<S290>/MATLAB System1'
      //   MATLABSystem: '<S311>/MATLAB System11'
      //   MATLABSystem: '<S311>/MATLAB System3'
      //   MATLABSystem: '<S311>/MATLAB System6'
      //   SwitchCase: '<S120>/Switch Case'
      //   SwitchCase: '<S9>/Switch Case'
      //   Trigonometry: '<S254>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //   UniformRandomNumber: '<S12>/ Drift'
      //
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        std::memcpy(&proc_control_B.TmpSignalConversionAtMAT_lt[0],
                    &proc_control_DW.x[0], 13U * sizeof(real_T));

        // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
        //   ActionPort: '<S308>/Action Port'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S123>/Action Port'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S290>/Action Port'

        proc_control_B.absxk = std::fmax(1.4901161193847656E-8,
          1.4901161193847656E-8 * std::abs
          (proc_control_DW.x[proc_control_B.ibmat]));
        proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.ibmat] =
          proc_control_DW.x[proc_control_B.ibmat] + proc_control_B.absxk;
        proc_control_B.dHdx_n[proc_control_B.Ns_d] =
          (proc_control_B.TmpSignalConversionAtMAT_lt[7] - proc_control_DW.x[7])
          / proc_control_B.absxk;
        proc_control_B.dHdx_n[proc_control_B.Ns_d + 1] =
          (proc_control_B.TmpSignalConversionAtMAT_lt[8] - proc_control_DW.x[8])
          / proc_control_B.absxk;
        proc_control_B.dHdx_n[proc_control_B.Ns_d + 2] =
          (proc_control_B.TmpSignalConversionAtMAT_lt[9] - proc_control_DW.x[9])
          / proc_control_B.absxk;
        proc_control_B.Ns_d += 3;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
      }

      proc_control_qrFactor_qGSgSIIm(proc_control_B.dHdx_n, proc_control_DW.P,
        proc_control_P.R2_Value, proc_control_B.TmpSignalConversionAtMATL_b);
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        std::memset(&proc_control_B.A_l[proc_control_B.Ns], 0, 13U * sizeof
                    (real_T));
        proc_control_B.Ns += 13;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.st_Value_size_idx_1 = 0;
           proc_control_B.st_Value_size_idx_1 < 13;
           proc_control_B.st_Value_size_idx_1++) {
        proc_control_B.Ns_d = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
             proc_control_B.ibmat++) {
          for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 13;
               proc_control_B.idx_p++) {
            proc_control_B.n_l = proc_control_B.idx_p + proc_control_B.Ns_d;
            proc_control_B.A_l[proc_control_B.n_l] +=
              proc_control_DW.P[proc_control_B.idx_p + proc_control_B.Ns] *
              proc_control_DW.P[proc_control_B.ibmat + proc_control_B.Ns];
          }

          proc_control_B.Ns_d += 13;
        }

        proc_control_B.Ns += 13;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 3; proc_control_B.Ns++) {
        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 13;
             proc_control_B.idx_p++) {
          proc_control_B.b_n = proc_control_B.ibmat + proc_control_B.Ns;
          proc_control_B.K_d[proc_control_B.b_n] = 0.0;
          proc_control_B.st_Value_size_idx_1 = 0;
          proc_control_B.Ns_d = 0;
          for (proc_control_B.n_l = 0; proc_control_B.n_l < 13;
               proc_control_B.n_l++) {
            proc_control_B.K_d[proc_control_B.b_n] +=
              proc_control_B.A_l[proc_control_B.st_Value_size_idx_1 +
              proc_control_B.idx_p] * proc_control_B.dHdx_n[proc_control_B.Ns_d
              + proc_control_B.Ns];
            proc_control_B.st_Value_size_idx_1 += 13;
            proc_control_B.Ns_d += 3;
          }

          proc_control_B.ibmat += 3;
        }
      }

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S225>/Enable'

      // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
      //   EnablePort: '<S253>/Enable'

      proc_control_B.Ns = 0;

      // End of Outputs for SubSystem: '<S250>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 13;
           proc_control_B.idx_p++) {
        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S225>/Enable'

        // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
        //   EnablePort: '<S253>/Enable'

        proc_control_B.C_n[proc_control_B.Ns] =
          proc_control_B.K_d[proc_control_B.Ns];
        proc_control_B.C_n[proc_control_B.Ns + 1] =
          proc_control_B.K_d[proc_control_B.Ns + 1];
        proc_control_B.C_n[proc_control_B.Ns + 2] =
          proc_control_B.K_d[proc_control_B.Ns + 2];
        proc_control_B.Ns += 3;

        // End of Outputs for SubSystem: '<S250>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      trisolve_nzh2XTxC(proc_control_B.TmpSignalConversionAtMATL_b,
                        proc_control_B.C_n);

      // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
      //   ActionPort: '<S308>/Action Port'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S123>/Action Port'

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S290>/Action Port'

      // SwitchCase: '<S120>/Switch Case' incorporates:
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   If: '<S10>/If'
      //   MATLAB Function: '<S274>/Correct'
      //   MATLABSystem: '<S123>/MATLAB System'
      //   MATLABSystem: '<S290>/MATLAB System1'
      //   MATLABSystem: '<S311>/MATLAB System11'
      //   MATLABSystem: '<S311>/MATLAB System3'
      //   MATLABSystem: '<S311>/MATLAB System6'
      //   SwitchCase: '<S9>/Switch Case'

      proc_control_B.Ns_d = 0;

      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<S10>/Get_ROS_param '

      // MATLAB Function: '<S274>/Correct' incorporates:
      //   Constant: '<S272>/R2'
      //   DataStoreRead: '<S274>/Data Store ReadX'
      //   DataStoreWrite: '<S274>/Data Store WriteP'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   If: '<S10>/If'
      //   MATLABSystem: '<S123>/MATLAB System'
      //   MATLABSystem: '<S290>/MATLAB System1'
      //   MATLABSystem: '<S311>/MATLAB System11'
      //   MATLABSystem: '<S311>/MATLAB System3'
      //   MATLABSystem: '<S311>/MATLAB System6'
      //   SignalConversion generated from: '<S279>/ SFunction '
      //   SwitchCase: '<S120>/Switch Case'
      //   SwitchCase: '<S9>/Switch Case'

      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
        //   ActionPort: '<S308>/Action Port'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S123>/Action Port'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S290>/Action Port'

        proc_control_B.b_C_c[proc_control_B.Ns_d] =
          proc_control_B.C_n[proc_control_B.Ns_d];
        proc_control_B.b_C_c[proc_control_B.Ns_d + 1] =
          proc_control_B.C_n[proc_control_B.Ns_d + 1];
        proc_control_B.b_C_c[proc_control_B.Ns_d + 2] =
          proc_control_B.C_n[proc_control_B.Ns_d + 2];
        proc_control_B.Ns_d += 3;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 3;
           proc_control_B.ibmat++) {
        proc_control_B.twpt[proc_control_B.Ns] =
          proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.ibmat];
        proc_control_B.twpt[proc_control_B.Ns + 1] =
          proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.ibmat + 3];
        proc_control_B.twpt[proc_control_B.Ns + 2] =
          proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.ibmat + 6];
        proc_control_B.Ns += 3;
      }

      trisolve_QLyTZPzT(proc_control_B.twpt, proc_control_B.b_C_c);
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 3;
           proc_control_B.ibmat++) {
        proc_control_B.idx_p = 0;
        for (proc_control_B.st_Value_size_idx_1 = 0;
             proc_control_B.st_Value_size_idx_1 < 13;
             proc_control_B.st_Value_size_idx_1++) {
          proc_control_B.K_d[proc_control_B.st_Value_size_idx_1 +
            proc_control_B.Ns] = proc_control_B.b_C_c[proc_control_B.idx_p +
            proc_control_B.ibmat];
          proc_control_B.idx_p += 3;
        }

        proc_control_B.Ns += 13;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 39; proc_control_B.Ns++) {
        proc_control_B.C_n[proc_control_B.Ns] =
          -proc_control_B.K_d[proc_control_B.Ns];
      }

      proc_control_B.Ns = 0;
      proc_control_B.ibmat = 0;
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 13;
           proc_control_B.idx_p++) {
        for (proc_control_B.st_Value_size_idx_1 = 0;
             proc_control_B.st_Value_size_idx_1 < 13;
             proc_control_B.st_Value_size_idx_1++) {
          proc_control_B.i = proc_control_B.st_Value_size_idx_1 +
            proc_control_B.Ns;
          proc_control_B.A_l[proc_control_B.i] = 0.0;
          proc_control_B.A_l[proc_control_B.i] +=
            proc_control_B.dHdx_n[proc_control_B.ibmat] *
            proc_control_B.C_n[proc_control_B.st_Value_size_idx_1];
          proc_control_B.A_l[proc_control_B.i] +=
            proc_control_B.dHdx_n[proc_control_B.ibmat + 1] *
            proc_control_B.C_n[proc_control_B.st_Value_size_idx_1 + 13];
          proc_control_B.A_l[proc_control_B.i] +=
            proc_control_B.dHdx_n[proc_control_B.ibmat + 2] *
            proc_control_B.C_n[proc_control_B.st_Value_size_idx_1 + 26];
        }

        proc_control_B.Ns += 13;
        proc_control_B.ibmat += 3;
      }

      proc_control_B.Ns_d = 0;
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        proc_control_B.Ns = 0;
        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 3;
             proc_control_B.idx_p++) {
          proc_control_B.b_n = proc_control_B.Ns + proc_control_B.i;
          proc_control_B.C_n[proc_control_B.b_n] = 0.0;
          proc_control_B.C_n[proc_control_B.b_n] +=
            proc_control_P.R2_Value[proc_control_B.ibmat] *
            proc_control_B.K_d[proc_control_B.i];
          proc_control_B.C_n[proc_control_B.b_n] +=
            proc_control_P.R2_Value[proc_control_B.ibmat + 1] *
            proc_control_B.K_d[proc_control_B.i + 13];
          proc_control_B.C_n[proc_control_B.b_n] +=
            proc_control_P.R2_Value[proc_control_B.ibmat + 2] *
            proc_control_B.K_d[proc_control_B.i + 26];
          proc_control_B.Ns += 13;
          proc_control_B.ibmat += 3;
        }

        proc_control_B.A_l[proc_control_B.Ns_d]++;
        proc_control_B.Ns_d += 14;
      }

      proc_control_qrFactor_3bJrEoRT(proc_control_B.A_l, proc_control_DW.P,
        proc_control_B.C_n);
      proc_control_B.xtmp = proc_control_B.Sum - proc_control_DW.x[7];
      proc_control_B.Product2_lm = proc_control_B.Sum_o - proc_control_DW.x[8];
      proc_control_B.t4 = proc_control_B.Sum_c - proc_control_DW.x[9];

      // DataStoreWrite: '<S274>/Data Store WriteX' incorporates:
      //   DataStoreRead: '<S274>/Data Store ReadX'
      //   MATLAB Function: '<S274>/Correct'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_DW.x[proc_control_B.Ns] +=
          (proc_control_B.K_d[proc_control_B.Ns + 13] *
           proc_control_B.Product2_lm + proc_control_B.K_d[proc_control_B.Ns] *
           proc_control_B.xtmp) + proc_control_B.K_d[proc_control_B.Ns + 26] *
          proc_control_B.t4;
      }

      // End of DataStoreWrite: '<S274>/Data Store WriteX'
    }

    // End of Outputs for SubSystem: '<S272>/Correct2'

    // Outputs for Enabled SubSystem: '<S272>/Correct3' incorporates:
    //   EnablePort: '<S275>/Enable'

    if (proc_control_P.Enable3_Value) {
      // MATLAB Function: '<S275>/Correct' incorporates:
      //   Constant: '<S272>/R3'
      //   DataStoreRead: '<S275>/Data Store ReadX'
      //   DataStoreWrite: '<S275>/Data Store WriteP'

      EKFCorrectorAdditive_g_6pDXID_k(proc_control_P.R3_Value, proc_control_DW.x,
        proc_control_DW.P, &proc_control_B.Product3_pv, proc_control_B.K_dz,
        &proc_control_B.absxk, proc_control_B.TmpSignalConversionAtMAT_lt,
        &proc_control_B.theta0);
      proc_control_B.Product2_lm = proc_control_B.zposition -
        proc_control_B.Product3_pv;

      // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
      //   ActionPort: '<S308>/Action Port'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S123>/Action Port'

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S290>/Action Port'

      // SwitchCase: '<S120>/Switch Case' incorporates:
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   If: '<S10>/If'
      //   MATLAB Function: '<S275>/Correct'
      //   MATLABSystem: '<S123>/MATLAB System'
      //   MATLABSystem: '<S290>/MATLAB System1'
      //   MATLABSystem: '<S311>/MATLAB System11'
      //   MATLABSystem: '<S311>/MATLAB System3'
      //   MATLABSystem: '<S311>/MATLAB System6'
      //   SwitchCase: '<S9>/Switch Case'

      std::memcpy(&proc_control_B.z_g[0], &proc_control_B.K_dz[0], 13U * sizeof
                  (real_T));

      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<S10>/Get_ROS_param '

      // MATLAB Function: '<S275>/Correct' incorporates:
      //   DataStoreWrite: '<S275>/Data Store WriteP'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S122>/N to A'
      //   Lookup_n-D: '<S122>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   Trigonometry: '<S254>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //   UniformRandomNumber: '<S12>/ Drift'
      //
      trisolve_jVll4a1A(proc_control_B.absxk, proc_control_B.z_g);

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S225>/Enable'

      // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
      //   EnablePort: '<S253>/Enable'

      std::memcpy(&proc_control_B.K_dz[0], &proc_control_B.z_g[0], 13U * sizeof
                  (real_T));

      // End of Outputs for SubSystem: '<S250>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      trisolve_jVll4a1A(proc_control_B.absxk, proc_control_B.K_dz);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.z_g[proc_control_B.Ns] =
          -proc_control_B.K_dz[proc_control_B.Ns];
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 13;
             proc_control_B.idx_p++) {
          proc_control_B.A_l[proc_control_B.idx_p + proc_control_B.Ns] =
            proc_control_B.z_g[proc_control_B.idx_p] *
            proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.ibmat];
        }

        proc_control_B.Ns += 13;
      }

      proc_control_B.Ns_d = 0;
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        proc_control_B.z_g[proc_control_B.i] =
          proc_control_B.K_dz[proc_control_B.i] * proc_control_B.theta0;
        proc_control_B.A_l[proc_control_B.Ns_d]++;
        proc_control_B.Ns_d += 14;
      }

      proc_control_qrFactor_TeAoo2Mt(proc_control_B.A_l, proc_control_DW.P,
        proc_control_B.z_g);

      // DataStoreWrite: '<S275>/Data Store WriteX' incorporates:
      //   DataStoreRead: '<S275>/Data Store ReadX'
      //   MATLAB Function: '<S275>/Correct'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_DW.x[proc_control_B.Ns] +=
          proc_control_B.K_dz[proc_control_B.Ns] * proc_control_B.Product2_lm;
      }

      // End of DataStoreWrite: '<S275>/Data Store WriteX'
    }

    // End of Outputs for SubSystem: '<S272>/Correct3'

    // Outputs for Atomic SubSystem: '<S272>/Output'
    // DataStoreRead: '<S276>/Data Store Read' incorporates:
    //   Constant: '<S229>/Constant'
    //   Constant: '<S272>/Enable1'
    //   Constant: '<S272>/Enable3'
    //   DataTypeConversion: '<S272>/DataTypeConversion_Enable2'

    std::memcpy(&proc_control_B.DataStoreRead[0], &proc_control_DW.x[0], 13U *
                sizeof(real_T));

    // End of Outputs for SubSystem: '<S272>/Output'

    // Outputs for Atomic SubSystem: '<S272>/Predict'
    // MATLAB Function: '<S277>/Predict' incorporates:
    //   Constant: '<S272>/Q'
    //   DataStoreRead: '<S277>/Data Store ReadX'
    //   DataStoreWrite: '<S277>/Data Store WriteP'
    //   Delay: '<S230>/ '
    //   ZeroOrderHold: '<S230>/Zero-Order Hold'

    for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
      proc_control_B.dv18[proc_control_B.Ns] = 0.0;
    }

    for (proc_control_B.i = 0; proc_control_B.i < 2; proc_control_B.i++) {
      AUV8QuatPerturbedSimFc_Tstvmpci(proc_control_DW.x, proc_control_B.dv18,
        proc_control_B.u, proc_control_B.TmpSignalConversionAtMAT_lt);
    }

    std::memcpy(&proc_control_B.z_g[0], &proc_control_DW.x[0], 13U * sizeof
                (real_T));
    for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
      proc_control_B.dv18[proc_control_B.Ns] = 0.0;
    }

    for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 2;
         proc_control_B.ibmat++) {
      AUV8QuatPerturbedSimFc_Tstvmpci(proc_control_DW.x, proc_control_B.dv18,
        proc_control_B.u, proc_control_B.K_dz);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.z_g[proc_control_B.Ns] +=
          proc_control_B.K_dz[proc_control_B.Ns] * 0.01;
      }
    }

    for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
      proc_control_B.dv18[proc_control_B.Ns] = 0.0;
    }

    for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
         proc_control_B.ibmat++) {
      std::memcpy(&proc_control_B.TmpSignalConversionAtMAT_lt[0],
                  &proc_control_DW.x[0], 13U * sizeof(real_T));
      proc_control_B.absxk = std::fmax(1.4901161193847656E-8,
        1.4901161193847656E-8 * std::abs(proc_control_DW.x[proc_control_B.ibmat]));
      proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.ibmat] =
        proc_control_DW.x[proc_control_B.ibmat] + proc_control_B.absxk;
      std::memcpy(&proc_control_B.imz[0],
                  &proc_control_B.TmpSignalConversionAtMAT_lt[0], 13U * sizeof
                  (real_T));
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 2;
           proc_control_B.idx_p++) {
        AUV8QuatPerturbedSimFc_Tstvmpci
          (proc_control_B.TmpSignalConversionAtMAT_lt, proc_control_B.dv18,
           proc_control_B.u, proc_control_B.K_dz);
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.imz[proc_control_B.Ns] +=
            proc_control_B.K_dz[proc_control_B.Ns] * 0.01;
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.A_l[proc_control_B.Ns + 13 * proc_control_B.ibmat] =
          (proc_control_B.imz[proc_control_B.Ns] -
           proc_control_B.z_g[proc_control_B.Ns]) / proc_control_B.absxk;
      }
    }

    std::memcpy(&proc_control_B.TmpSignalConversionAtMAT_lt[0],
                &proc_control_DW.x[0], 13U * sizeof(real_T));
    for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
      proc_control_B.dv18[proc_control_B.Ns] = 0.0;
    }

    for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 2;
         proc_control_B.idx_p++) {
      AUV8QuatPerturbedSimFc_Tstvmpci(proc_control_DW.x, proc_control_B.dv18,
        proc_control_B.u, proc_control_B.K_dz);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.Ns] +=
          proc_control_B.K_dz[proc_control_B.Ns] * 0.01;
      }
    }

    proc_control_qrFactor_O58Jhapw(proc_control_B.A_l, proc_control_DW.P,
      proc_control_P.Q_Value);

    // DataStoreWrite: '<S277>/Data Store WriteX' incorporates:
    //   MATLAB Function: '<S277>/Predict'

    std::memcpy(&proc_control_DW.x[0],
                &proc_control_B.TmpSignalConversionAtMAT_lt[0], 13U * sizeof
                (real_T));

    // End of Outputs for SubSystem: '<S272>/Predict'

    // Outputs for Atomic SubSystem: '<S112>/Header Assignment'
    proc_control_CurrentTime(&proc_control_B.CurrentTime_e);

    // Switch: '<S116>/Switch1' incorporates:
    //   Constant: '<S116>/Constant1'
    //   StringConstant: '<S116>/String Constant1'

    if (proc_control_P.Constant1_Value_l != 0.0) {
      proc_control_B.Switch1 = proc_control_P.StringConstant1_String_p;
    } else {
      // ASCIIToString: '<S116>/ASCII to String' incorporates:
      //   Constant: '<S115>/Constant'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 128; proc_control_B.Ns++)
      {
        proc_control_B.charValue_j[proc_control_B.Ns] = static_cast<int8_T>
          (proc_control_P.Constant_Value_fw.Header.FrameId[proc_control_B.Ns]);
      }

      proc_control_B.Switch1.assign(&proc_control_B.charValue_j[0], 128U);

      // End of ASCIIToString: '<S116>/ASCII to String'
    }

    // End of Switch: '<S116>/Switch1'

    // StringToASCII: '<S116>/String To ASCII'
    std::strncpy((char_T *)&proc_control_B.msg_po.Header.FrameId[0],
                 proc_control_B.Switch1.c_str(), 128U);

    // Switch: '<S116>/Switch' incorporates:
    //   Constant: '<S116>/Constant'

    if (proc_control_P.Constant_Value_j != 0.0) {
      // MATLAB Function: '<S112>/MATLAB Function1'
      proc_control_B.msg_po.Header.Stamp =
        proc_control_B.CurrentTime_e.CurrentTime;
    } else {
      // MATLAB Function: '<S112>/MATLAB Function1' incorporates:
      //   Constant: '<S115>/Constant'

      proc_control_B.msg_po.Header.Stamp =
        proc_control_P.Constant_Value_fw.Header.Stamp;
    }

    // End of Switch: '<S116>/Switch'

    // MATLAB Function: '<S112>/MATLAB Function1' incorporates:
    //   Constant: '<S115>/Constant'
    //   SignalConversion generated from: '<S116>/HeaderAssign'
    //   StringLength: '<S116>/String Length'

    proc_control_B.msg_po.Header.Seq =
      proc_control_P.Constant_Value_fw.Header.Seq;
    proc_control_B.msg_po.Header.FrameId_SL_Info.CurrentLength =
      proc_control_B.Switch1.length();
    proc_control_B.msg_po.Header.FrameId_SL_Info.ReceivedLength =
      proc_control_P.Constant_Value_fw.Header.FrameId_SL_Info.ReceivedLength;
    std::memcpy(&proc_control_B.msg_po.ChildFrameId[0],
                &proc_control_P.Constant_Value_fw.ChildFrameId[0], sizeof
                (uint8_T) << 7U);
    proc_control_B.msg_po.ChildFrameId_SL_Info =
      proc_control_P.Constant_Value_fw.ChildFrameId_SL_Info;
    std::memcpy(&proc_control_B.msg_po.Pose.Covariance[0],
                &proc_control_P.Constant_Value_fw.Pose.Covariance[0], 36U *
                sizeof(real_T));
    std::memcpy(&proc_control_B.msg_po.Twist.Covariance[0],
                &proc_control_P.Constant_Value_fw.Twist.Covariance[0], 36U *
                sizeof(real_T));

    // End of Outputs for SubSystem: '<S112>/Header Assignment'
    proc_control_B.msg_po.Pose.Pose.Position.X = proc_control_B.DataStoreRead[0];
    proc_control_B.msg_po.Pose.Pose.Position.Y = proc_control_B.DataStoreRead[1];
    proc_control_B.msg_po.Pose.Pose.Position.Z = proc_control_B.DataStoreRead[2];
    proc_control_B.msg_po.Pose.Pose.Orientation.W =
      proc_control_B.DataStoreRead[3];
    proc_control_B.msg_po.Pose.Pose.Orientation.X =
      proc_control_B.DataStoreRead[4];
    proc_control_B.msg_po.Pose.Pose.Orientation.Y =
      proc_control_B.DataStoreRead[5];
    proc_control_B.msg_po.Pose.Pose.Orientation.Z =
      proc_control_B.DataStoreRead[6];
    proc_control_B.msg_po.Twist.Twist.Linear.X = proc_control_B.DataStoreRead[7];
    proc_control_B.msg_po.Twist.Twist.Linear.Y = proc_control_B.DataStoreRead[8];
    proc_control_B.msg_po.Twist.Twist.Linear.Z = proc_control_B.DataStoreRead[9];
    proc_control_B.msg_po.Twist.Twist.Angular.X = proc_control_B.DataStoreRead
      [10];
    proc_control_B.msg_po.Twist.Twist.Angular.Y = proc_control_B.DataStoreRead
      [11];
    proc_control_B.msg_po.Twist.Twist.Angular.Z = proc_control_B.DataStoreRead
      [12];

    // Outputs for Atomic SubSystem: '<S112>/Publish'
    // MATLABSystem: '<S118>/SinkBlock'
    Pub_proc_control_163.publish(&proc_control_B.msg_po);

    // End of Outputs for SubSystem: '<S112>/Publish'

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.WorldPosition[0] = proc_control_B.DataStoreRead[0];
    proc_control_B.WorldPosition[1] = proc_control_B.DataStoreRead[1];
    proc_control_B.WorldPosition[2] = proc_control_B.DataStoreRead[2];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.qS2W[0] = proc_control_B.DataStoreRead[3];
    proc_control_B.qS2W[1] = proc_control_B.DataStoreRead[4];
    proc_control_B.qS2W[2] = proc_control_B.DataStoreRead[5];
    proc_control_B.qS2W[3] = proc_control_B.DataStoreRead[6];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.BodyVelocity[0] = proc_control_B.DataStoreRead[7];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.AngularRate[0] = proc_control_B.DataStoreRead[10];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.BodyVelocity[1] = proc_control_B.DataStoreRead[8];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.AngularRate[1] = proc_control_B.DataStoreRead[11];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.BodyVelocity[2] = proc_control_B.DataStoreRead[9];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.AngularRate[2] = proc_control_B.DataStoreRead[12];

    // BusAssignment: '<S111>/Bus Assignment' incorporates:
    //   DataTypeConversion: '<S111>/Cast To Boolean'

    proc_control_B.BusAssignment_c.Data = (proc_control_B.y != 0.0);

    // ZeroOrderHold: '<S111>/Zero-Order Hold'
    if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
      // Outputs for Atomic SubSystem: '<S111>/Publish'
      // MATLABSystem: '<S114>/SinkBlock'
      Pub_proc_control_116.publish(&proc_control_B.BusAssignment_c);

      // End of Outputs for SubSystem: '<S111>/Publish'
    }

    // End of ZeroOrderHold: '<S111>/Zero-Order Hold'
  }

  // End of Logic: '<S228>/AND'
  // End of Outputs for SubSystem: '<S8>/Subsystem'
  // End of Outputs for SubSystem: '<Root>/Sensor Manager'
  if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
    // Outputs for Atomic SubSystem: '<S287>/Subscribe'
    // MATLABSystem: '<S295>/SourceBlock'
    proc_control_B.SourceBlock_o1 = Sub_proc_control_184_1581.getLatestMessage
      (&proc_control_B.b_varargout_2);

    // Outputs for Enabled SubSystem: '<S295>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S296>/Enable'

    if (proc_control_B.SourceBlock_o1) {
      // SignalConversion generated from: '<S296>/In1' incorporates:
      //   MATLABSystem: '<S295>/SourceBlock'

      proc_control_B.In1 = proc_control_B.b_varargout_2;
    }

    // End of Outputs for SubSystem: '<S295>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S287>/Subscribe'
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[1] == 0) {
    // Outputs for Atomic SubSystem: '<S286>/Subscribe2'
    // MATLABSystem: '<S293>/SourceBlock'
    proc_control_B.Merge = Sub_proc_control_184_1122.getLatestMessage
      (&proc_control_B.b_varargout_2_b);

    // Outputs for Enabled SubSystem: '<S293>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S294>/Enable'

    if (proc_control_B.Merge) {
      // SignalConversion generated from: '<S294>/In1'
      proc_control_B.In1_od = proc_control_B.b_varargout_2_b;
    }

    // End of MATLABSystem: '<S293>/SourceBlock'
    // End of Outputs for SubSystem: '<S293>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S286>/Subscribe2'

    // Gain: '<S286>/Gain'
    proc_control_B.Gain[0] = proc_control_P.Gain_Gain_g *
      proc_control_B.In1_od.Angular.X;
    proc_control_B.Gain[1] = proc_control_P.Gain_Gain_g *
      proc_control_B.In1_od.Angular.Y;
    proc_control_B.Gain[2] = proc_control_P.Gain_Gain_g *
      proc_control_B.In1_od.Angular.Z;
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // SwitchCase: '<S9>/Switch Case' incorporates:
    //   Concatenate: '<S302>/Matrix Concatenate'
    //   Constant: '<S302>/Constant1'
    //   Logic: '<S290>/OR'
    //   MATLABSystem: '<S303>/SourceBlock'

    proc_control_B.rtPrevAction = proc_control_DW.SwitchCase_ActiveSubsystem;
    switch (proc_control_B.mode) {
     case 19:
     case 20:
     case 21:
      proc_control_B.rtAction = 0;
      break;

     case 10:
      proc_control_B.rtAction = 1;
      break;

     case 11:
     case 30:
     case 31:
     case 40:
     case 41:
      proc_control_B.rtAction = 2;
      break;

     default:
      proc_control_B.rtAction = 3;
      break;
    }

    proc_control_DW.SwitchCase_ActiveSubsystem = proc_control_B.rtAction;
    switch (proc_control_B.rtAction) {
     case 0:
      // Outputs for IfAction SubSystem: '<S9>/SpaceNav' incorporates:
      //   ActionPort: '<S285>/Action Port'

      // SignalConversion generated from: '<S285>/Transpose' incorporates:
      //   Constant: '<S285>/Constant7'

      for (proc_control_B.i = 0; proc_control_B.i < 7; proc_control_B.i++) {
        proc_control_B.K_dz[proc_control_B.i] =
          proc_control_P.Constant7_Value[proc_control_B.i];
      }

      proc_control_B.K_dz[7] = proc_control_B.In1_od.Linear.X;
      proc_control_B.K_dz[8] = proc_control_B.In1_od.Linear.Y;
      proc_control_B.K_dz[9] = proc_control_B.In1_od.Linear.Z;
      proc_control_B.K_dz[10] = proc_control_B.Gain[0];
      proc_control_B.K_dz[11] = proc_control_B.Gain[1];
      proc_control_B.K_dz[12] = proc_control_B.Gain[2];

      // MATLAB Function: '<S285>/MATLAB Function1' incorporates:
      //   Math: '<S285>/Transpose'

      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 13;
           proc_control_B.idx_p++) {
        proc_control_B.ibmat = proc_control_B.idx_p * 10;
        for (proc_control_B.i = 0; proc_control_B.i < 10; proc_control_B.i++) {
          proc_control_B.y_j[proc_control_B.ibmat + proc_control_B.i] =
            proc_control_B.K_dz[proc_control_B.idx_p];
        }
      }

      // End of MATLAB Function: '<S285>/MATLAB Function1'

      // Merge generated from: '<S9>/Merge' incorporates:
      //   SignalConversion generated from: '<S285>/Output'

      std::memcpy(&proc_control_B.Reference[0], &proc_control_B.y_j[0], 130U *
                  sizeof(real_T));

      // Merge generated from: '<S9>/Merge' incorporates:
      //   Constant: '<S285>/Constant1'
      //   SignalConversion generated from: '<S285>/Output'

      proc_control_B.isReached = proc_control_P.Constant1_Value_ds;

      // Merge generated from: '<S9>/Merge' incorporates:
      //   Constant: '<S285>/Constant2'
      //   SignalConversion generated from: '<S285>/Output'

      proc_control_B.isTrajDone = proc_control_P.Constant2_Value_l;
      for (proc_control_B.i = 0; proc_control_B.i < 7; proc_control_B.i++) {
        // Merge generated from: '<S9>/Merge' incorporates:
        //   Math: '<S285>/Transpose'
        //   SignalConversion generated from: '<S285>/Output'

        proc_control_B.target[proc_control_B.i] =
          proc_control_B.K_dz[proc_control_B.i];
      }

      // End of Outputs for SubSystem: '<S9>/SpaceNav'
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S9>/SubsystemAuto' incorporates:
      //   ActionPort: '<S289>/Action Port'

      // RelationalOperator: '<S301>/Compare' incorporates:
      //   Constant: '<S301>/Constant'

      proc_control_B.Merge = (static_cast<int32_T>(proc_control_B.SourceBlock_o1)
        > static_cast<int32_T>(proc_control_P.Constant_Value_hm));

      // SignalConversion generated from: '<S289>/MATLAB System'
      proc_control_B.imz[0] = proc_control_B.WorldPosition[0];
      proc_control_B.imz[1] = proc_control_B.WorldPosition[1];
      proc_control_B.imz[2] = proc_control_B.WorldPosition[2];
      proc_control_B.imz[3] = proc_control_B.qS2W[0];
      proc_control_B.imz[4] = proc_control_B.qS2W[1];
      proc_control_B.imz[5] = proc_control_B.qS2W[2];
      proc_control_B.imz[6] = proc_control_B.qS2W[3];
      proc_control_B.imz[7] = proc_control_B.BodyVelocity[0];
      proc_control_B.imz[10] = proc_control_B.AngularRate[0];
      proc_control_B.imz[8] = proc_control_B.BodyVelocity[1];
      proc_control_B.imz[11] = proc_control_B.AngularRate[1];
      proc_control_B.imz[9] = proc_control_B.BodyVelocity[2];
      proc_control_B.imz[12] = proc_control_B.AngularRate[2];

      // Merge generated from: '<S9>/Merge' incorporates:
      //   BusCreator: '<S310>/Bus Creator'
      //   MATLABSystem: '<S289>/MATLAB System'
      //   RelationalOperator: '<S300>/FixPt Relational Operator'
      //   UnitDelay: '<S300>/Delay Input1'
      //
      //  Block description for '<S300>/Delay Input1':
      //
      //   Store in Global RAM

      MultiTrajectoryManager_stepImpl(&proc_control_DW.obj_o,
        static_cast<int32_T>(proc_control_B.Merge) > static_cast<int32_T>
        (proc_control_DW.DelayInput1_DSTATE), proc_control_B.In1.Transforms,
        proc_control_B.In1.Transforms_SL_Info.ReceivedLength,
        proc_control_B.In1.Velocities, proc_control_B.trajClear,
        proc_control_B.imz, proc_control_B.mpcParams_l.targetReached.linearTol,
        proc_control_B.mpcParams_l.targetReached.angularTol,
        proc_control_B.mpcParams_l.targetReached.timeInTol, proc_control_B.y_j,
        &proc_control_B.isReached, &proc_control_B.isTrajDone,
        proc_control_B.TmpSignalConversionAtMATLAB);

      // Merge generated from: '<S9>/Merge' incorporates:
      //   MATLABSystem: '<S289>/MATLAB System'
      //   SignalConversion generated from: '<S289>/MATLAB System'

      std::memcpy(&proc_control_B.Reference[0], &proc_control_B.y_j[0], 130U *
                  sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++) {
        // Merge generated from: '<S9>/Merge' incorporates:
        //   MATLABSystem: '<S289>/MATLAB System'
        //   SignalConversion generated from: '<S289>/MATLAB System'

        proc_control_B.target[proc_control_B.Ns] =
          proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.Ns];
      }

      // Update for UnitDelay: '<S300>/Delay Input1'
      //
      //  Block description for '<S300>/Delay Input1':
      //
      //   Store in Global RAM

      proc_control_DW.DelayInput1_DSTATE = proc_control_B.Merge;

      // End of Outputs for SubSystem: '<S9>/SubsystemAuto'
      break;

     case 2:
      if (proc_control_B.rtAction != proc_control_B.rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S290>/Action Port'

        // InitializeConditions for SwitchCase: '<S9>/Switch Case' incorporates:
        //   Delay: '<S290>/Delay1'

        proc_control_DW.Delay1_DSTATE_c =
          proc_control_P.Delay1_InitialCondition_k;

        // End of InitializeConditions for SubSystem: '<S9>/singleWpts Trajectory' 

        // SystemReset for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S290>/Action Port'

        //  Fonction Reset
        //  Initialize / reset discrete-state properties
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 18; proc_control_B.Ns++)
        {
          // SystemReset for SwitchCase: '<S9>/Switch Case' incorporates:
          //   MATLABSystem: '<S290>/MATLAB System1'

          proc_control_DW.obj_a.poseList[proc_control_B.Ns] = 999.0;
        }

        // SystemReset for SwitchCase: '<S9>/Switch Case' incorporates:
        //   DiscreteIntegrator: '<S305>/Discrete-Time Integrator'
        //   MATLABSystem: '<S290>/MATLAB System1'

        proc_control_DW.obj_a.poseList[0] = 0.0;
        proc_control_DW.obj_a.poseList[2] = 0.0;
        proc_control_DW.obj_a.poseList[4] = 0.0;
        proc_control_DW.obj_a.poseList[6] = 1.0;
        proc_control_DW.obj_a.poseList[8] = 0.0;
        proc_control_DW.obj_a.poseList[10] = 0.0;
        proc_control_DW.obj_a.poseList[12] = 0.0;
        proc_control_DW.obj_a.poseList[14] = 0.0;
        proc_control_DW.obj_a.poseList[16] = 0.0;

        // initCond(1,1:7);
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++)
        {
          proc_control_DW.obj_a.initcond[proc_control_B.Ns] =
            tmp[proc_control_B.Ns];
        }

        proc_control_DW.obj_a.i = 2.0;

        // SystemReset for Resettable SubSystem: '<S290>/Trajectory generator'
        proc_control_DW.DiscreteTimeIntegrator_DSTATE =
          proc_control_P.DiscreteTimeIntegrator_IC;

        // End of SystemReset for SubSystem: '<S290>/Trajectory generator'
        // End of SystemReset for SubSystem: '<S9>/singleWpts Trajectory'
        //  Fonction reset
        //  Initialize / reset discrete-state properties
      }

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S290>/Action Port'

      // Outputs for Atomic SubSystem: '<S290>/Subscribe'
      // MATLABSystem: '<S303>/SourceBlock'
      proc_control_B.Merge = Sub_proc_control_184_1168.getLatestMessage
        (&proc_control_B.b_varargout_2_l);

      // Outputs for Enabled SubSystem: '<S290>/Subsystem1' incorporates:
      //   EnablePort: '<S304>/Enable'

      // Outputs for Enabled SubSystem: '<S303>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S306>/Enable'

      if (proc_control_B.Merge) {
        // DataTypeConversion: '<S304>/Data Type Conversion'
        proc_control_B.DataTypeConversion[0] =
          proc_control_B.b_varargout_2_l.Position.X;
        proc_control_B.DataTypeConversion[1] =
          proc_control_B.b_varargout_2_l.Position.Y;
        proc_control_B.DataTypeConversion[2] =
          proc_control_B.b_varargout_2_l.Position.Z;
        proc_control_B.DataTypeConversion[3] =
          proc_control_B.b_varargout_2_l.Orientation.Z;
        proc_control_B.DataTypeConversion[4] =
          proc_control_B.b_varargout_2_l.Orientation.Y;
        proc_control_B.DataTypeConversion[5] =
          proc_control_B.b_varargout_2_l.Orientation.X;

        // DataTypeConversion: '<S304>/Data Type Conversion1'
        proc_control_B.DataTypeConversion1[0] =
          proc_control_B.b_varargout_2_l.Frame;
        proc_control_B.DataTypeConversion1[1] =
          proc_control_B.b_varargout_2_l.Speed;

        // DataTypeConversion: '<S304>/Data Type Conversion2'
        proc_control_B.DataTypeConversion2 = proc_control_B.b_varargout_2_l.Fine;
      }

      // End of Outputs for SubSystem: '<S303>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S290>/Subsystem1'
      // End of Outputs for SubSystem: '<S290>/Subscribe'

      // SignalConversion generated from: '<S290>/MATLAB System1' incorporates:
      //   MATLABSystem: '<S303>/SourceBlock'

      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.i] =
          proc_control_B.DataTypeConversion[proc_control_B.i];
      }

      proc_control_B.TmpSignalConversionAtMATL_b[6] =
        proc_control_B.DataTypeConversion1[0];
      proc_control_B.TmpSignalConversionAtMATL_b[7] =
        proc_control_B.DataTypeConversion1[1];
      proc_control_B.TmpSignalConversionAtMATL_b[8] =
        proc_control_B.DataTypeConversion2;

      // SignalConversion generated from: '<S290>/MATLAB System1'
      proc_control_B.TmpSignalConversionAtMATLAB[0] =
        proc_control_B.WorldPosition[0];
      proc_control_B.TmpSignalConversionAtMATLAB[1] =
        proc_control_B.WorldPosition[1];
      proc_control_B.TmpSignalConversionAtMATLAB[2] =
        proc_control_B.WorldPosition[2];

      // MATLABSystem: '<S290>/MATLAB System1' incorporates:
      //   Constant: '<S290>/Constant'
      //   Delay: '<S290>/Delay1'
      //   MATLABSystem: '<S303>/SourceBlock'
      //   SignalConversion generated from: '<S290>/MATLAB System1'

      //  Main appeller à chaque exécution
      //  Suppression du buffer.
      //  ======================================================================== 
      //  Sous Routines
      // ==========================================================================         
      //  Fonction qui interprete les message ROS
      if (proc_control_P.Constant_Value_ha == 1.0) {
        //  supprimer le buffer de way points
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
             proc_control_B.ibmat++) {
          proc_control_DW.obj_a.poseList[proc_control_B.Ns + 1] = 999.0;
          proc_control_B.Ns += 2;
        }

        proc_control_DW.obj_a.i = 2.0;
      }

      // Outputs for Atomic SubSystem: '<S290>/Subscribe'
      //  Ajout d'un waypoint provenant de ROS.
      if (proc_control_B.Merge && (proc_control_DW.obj_a.i <= 2.0)) {
        // ==========================================================================    
        //  Fonction qui interprete les waypoints reçu par ROS
        //  Determiner le quaternion en fonction des angles d'euler.
        //  Orde de rotation : ZYX.
        //  Reel
        //  Information sur le nouveau waypoints
        std::memset(&proc_control_B.twpt[0], 0, 9U * sizeof(real_T));
        proc_control_B.twpt[7] = proc_control_B.DataTypeConversion1[1];

        //  Information de la pose précédente
        //  LastPosition
        //  LastQuaternion
        //  transformer les angle d'euler quaternions
        proc_control_B.t65 = 0.017453292519943295 *
          proc_control_B.TmpSignalConversionAtMATL_b[3] / 2.0;
        proc_control_B.sincos_o2[0] = proc_control_B.t65;
        proc_control_B.sincos_o1_d[0] = proc_control_B.t65;
        proc_control_B.t65 = 0.017453292519943295 *
          proc_control_B.TmpSignalConversionAtMATL_b[4] / 2.0;
        proc_control_B.sincos_o2[1] = proc_control_B.t65;
        proc_control_B.sincos_o1_d[1] = proc_control_B.t65;
        proc_control_B.t65 = 0.017453292519943295 *
          proc_control_B.TmpSignalConversionAtMATL_b[5] / 2.0;
        proc_control_B.sincos_o2[0] = std::cos(proc_control_B.sincos_o2[0]);
        proc_control_B.sincos_o1_d[0] = std::sin(proc_control_B.sincos_o1_d[0]);
        proc_control_B.sincos_o2[1] = std::cos(proc_control_B.sincos_o2[1]);
        proc_control_B.sincos_o1_d[1] = std::sin(proc_control_B.sincos_o1_d[1]);
        proc_control_B.sincos_o2[2] = std::cos(proc_control_B.t65);
        proc_control_B.sincos_o1_d[2] = std::sin(proc_control_B.t65);
        proc_control_B.n_tmp = proc_control_B.sincos_o2[0] *
          proc_control_B.sincos_o2[1];
        proc_control_B.xtmp = proc_control_B.sincos_o1_d[0] *
          proc_control_B.sincos_o1_d[1];
        proc_control_B.n[0] = proc_control_B.n_tmp * proc_control_B.sincos_o2[2]
          + proc_control_B.xtmp * proc_control_B.sincos_o1_d[2];
        proc_control_B.n[1] = proc_control_B.n_tmp * proc_control_B.sincos_o1_d
          [2] - proc_control_B.xtmp * proc_control_B.sincos_o2[2];
        proc_control_B.n_tmp = proc_control_B.sincos_o1_d[0] *
          proc_control_B.sincos_o2[1];
        proc_control_B.xtmp = proc_control_B.sincos_o2[0] *
          proc_control_B.sincos_o1_d[1];
        proc_control_B.n[2] = proc_control_B.xtmp * proc_control_B.sincos_o2[2]
          + proc_control_B.n_tmp * proc_control_B.sincos_o1_d[2];
        proc_control_B.n[3] = proc_control_B.n_tmp * proc_control_B.sincos_o2[2]
          - proc_control_B.xtmp * proc_control_B.sincos_o1_d[2];

        //  calculer
        //  quaternion partie scalaire
        //  quaternion partie vectoriel
        proc_control_B.linearScaling = 0.0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 3; proc_control_B.b_k
             ++) {
          proc_control_B.linearScaling += proc_control_DW.obj_a.poseList
            [(((proc_control_B.b_k + 4) << 1) + static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0)) - 1] *
            proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.b_k];
        }

        proc_control_B.Product2_lm = 2.0 * proc_control_B.linearScaling;
        proc_control_B.linearScaling = 0.0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 3; proc_control_B.b_k
             ++) {
          proc_control_B.t4 = proc_control_DW.obj_a.poseList
            [(((proc_control_B.b_k + 4) << 1) + static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0)) - 1];
          proc_control_B.linearScaling += proc_control_B.t4 * proc_control_B.t4;
        }

        proc_control_B.Product3_pv = proc_control_DW.obj_a.poseList
          [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 5];
        proc_control_B.linearScaling = proc_control_B.Product3_pv *
          proc_control_B.Product3_pv - proc_control_B.linearScaling;
        proc_control_B.xtmp = proc_control_B.Product3_pv * 2.0;

        //  QuatRotate n'est pas compilable
        //  choisir sens du quaternion
        proc_control_B.TmpSignalConversionAtSFunct[0] = proc_control_B.n[0];
        proc_control_B.TmpSignalConversionAtSFunct[1] = proc_control_B.n[1];
        proc_control_B.TmpSignalConversionAtSFunct[2] = proc_control_B.n[2];
        proc_control_B.TmpSignalConversionAtSFunct[3] = proc_control_B.n[3];

        // ==========================================================================    
        //  Fonnction qui retoure le quaternion le plus court/long selon
        //  l'utilisateur
        proc_control_B.b_norm = 0.0;
        for (proc_control_B.b_k = 0; proc_control_B.b_k < 4; proc_control_B.b_k
             ++) {
          proc_control_B.b_norm += proc_control_DW.obj_a.poseList
            [(((proc_control_B.b_k + 3) << 1) + static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0)) - 1] *
            proc_control_B.n[proc_control_B.b_k];
        }

        //  conjuger le quaternion au besoin
        if (((proc_control_B.b_norm > 1.0) &&
             (proc_control_B.DataTypeConversion2 == 0.0)) ||
            ((proc_control_B.b_norm < 1.0) &&
             (proc_control_B.DataTypeConversion2 == 1.0))) {
          proc_control_B.TmpSignalConversionAtSFunct[0] = proc_control_B.n[0];
          proc_control_B.TmpSignalConversionAtSFunct[1] = -proc_control_B.n[1];
          proc_control_B.TmpSignalConversionAtSFunct[2] = -proc_control_B.n[2];
          proc_control_B.TmpSignalConversionAtSFunct[3] = -proc_control_B.n[3];
        }

        //  transformer le point en fonction du frame
        proc_control_B.AngularRate_a_idx_1 = std::round
          (proc_control_B.DataTypeConversion1[0]);
        if (proc_control_B.AngularRate_a_idx_1 < 256.0) {
          if (proc_control_B.AngularRate_a_idx_1 >= 0.0) {
            proc_control_B.u_k = static_cast<uint8_T>
              (proc_control_B.AngularRate_a_idx_1);
          } else {
            proc_control_B.u_k = 0U;
          }
        } else {
          proc_control_B.u_k = MAX_uint8_T;
        }

        switch (proc_control_B.u_k) {
         case 0U:
          //  position et angle absolue
          proc_control_B.twpt[0] = proc_control_B.TmpSignalConversionAtMATL_b[0];
          proc_control_B.twpt[1] = proc_control_B.TmpSignalConversionAtMATL_b[1];
          proc_control_B.twpt[2] = proc_control_B.TmpSignalConversionAtMATL_b[2];
          proc_control_B.twpt[3] = proc_control_B.n[0];
          proc_control_B.twpt[4] = proc_control_B.n[1];
          proc_control_B.twpt[5] = proc_control_B.n[2];
          proc_control_B.twpt[6] = proc_control_B.n[3];
          break;

         case 1U:
          //  position et angle relatif
          proc_control_B.d = proc_control_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_DW.obj_a.i - 1.0) + 11];
          proc_control_B.b_norm = proc_control_DW.obj_a.poseList
            [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 7];
          proc_control_B.t3 = proc_control_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_DW.obj_a.i - 1.0) + 9];
          proc_control_B.twpt[0] = ((proc_control_B.t3 *
            proc_control_B.TmpSignalConversionAtMATL_b[2] - proc_control_B.d *
            proc_control_B.TmpSignalConversionAtMATL_b[1]) * proc_control_B.xtmp
            + (proc_control_B.b_norm * proc_control_B.Product2_lm +
               proc_control_B.linearScaling *
               proc_control_B.TmpSignalConversionAtMATL_b[0])) +
            proc_control_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_DW.obj_a.i - 1.0) - 1];
          proc_control_B.twpt[1] = ((proc_control_B.d *
            proc_control_B.TmpSignalConversionAtMATL_b[0] -
            proc_control_B.b_norm * proc_control_B.TmpSignalConversionAtMATL_b[2])
            * proc_control_B.xtmp + (proc_control_B.t3 *
            proc_control_B.Product2_lm + proc_control_B.linearScaling *
            proc_control_B.TmpSignalConversionAtMATL_b[1])) +
            proc_control_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_DW.obj_a.i - 1.0) + 1];
          proc_control_B.twpt[2] = ((proc_control_B.b_norm *
            proc_control_B.TmpSignalConversionAtMATL_b[1] - proc_control_B.t3 *
            proc_control_B.TmpSignalConversionAtMATL_b[0]) * proc_control_B.xtmp
            + (proc_control_B.d * proc_control_B.Product2_lm +
               proc_control_B.linearScaling *
               proc_control_B.TmpSignalConversionAtMATL_b[2])) +
            proc_control_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_DW.obj_a.i - 1.0) + 3];
          proc_control_B.twpt[3] = ((proc_control_B.Product3_pv *
            proc_control_B.TmpSignalConversionAtSFunct[0] -
            proc_control_B.b_norm * proc_control_B.TmpSignalConversionAtSFunct[1])
            - proc_control_B.t3 * proc_control_B.TmpSignalConversionAtSFunct[2])
            - proc_control_B.d * proc_control_B.TmpSignalConversionAtSFunct[3];
          proc_control_B.twpt[4] = (proc_control_B.Product3_pv *
            proc_control_B.TmpSignalConversionAtSFunct[1] +
            proc_control_B.b_norm * proc_control_B.TmpSignalConversionAtSFunct[0])
            + (proc_control_B.t3 * proc_control_B.TmpSignalConversionAtSFunct[3]
               - proc_control_B.d * proc_control_B.TmpSignalConversionAtSFunct[2]);
          proc_control_B.twpt[5] = (proc_control_B.Product3_pv *
            proc_control_B.TmpSignalConversionAtSFunct[2] + proc_control_B.t3 *
            proc_control_B.TmpSignalConversionAtSFunct[0]) + (proc_control_B.d *
            proc_control_B.TmpSignalConversionAtSFunct[1] -
            proc_control_B.b_norm * proc_control_B.TmpSignalConversionAtSFunct[3]);
          proc_control_B.twpt[6] = (proc_control_B.Product3_pv *
            proc_control_B.TmpSignalConversionAtSFunct[3] + proc_control_B.d *
            proc_control_B.TmpSignalConversionAtSFunct[0]) +
            (proc_control_B.b_norm * proc_control_B.TmpSignalConversionAtSFunct
             [2] - proc_control_B.t3 *
             proc_control_B.TmpSignalConversionAtSFunct[1]);
          break;

         case 2U:
          //  position relatif et angle absolue
          proc_control_B.d = proc_control_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_DW.obj_a.i - 1.0) + 11];
          proc_control_B.b_norm = proc_control_DW.obj_a.poseList
            [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 7];
          proc_control_B.Product3_pv = proc_control_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 9];
          proc_control_B.twpt[0] = ((proc_control_B.Product3_pv *
            proc_control_B.TmpSignalConversionAtMATL_b[2] - proc_control_B.d *
            proc_control_B.TmpSignalConversionAtMATL_b[1]) * proc_control_B.xtmp
            + (proc_control_B.b_norm * proc_control_B.Product2_lm +
               proc_control_B.linearScaling *
               proc_control_B.TmpSignalConversionAtMATL_b[0])) +
            proc_control_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_DW.obj_a.i - 1.0) - 1];
          proc_control_B.twpt[1] = ((proc_control_B.d *
            proc_control_B.TmpSignalConversionAtMATL_b[0] -
            proc_control_B.b_norm * proc_control_B.TmpSignalConversionAtMATL_b[2])
            * proc_control_B.xtmp + (proc_control_B.Product3_pv *
            proc_control_B.Product2_lm + proc_control_B.linearScaling *
            proc_control_B.TmpSignalConversionAtMATL_b[1])) +
            proc_control_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_DW.obj_a.i - 1.0) + 1];
          proc_control_B.twpt[2] = ((proc_control_B.b_norm *
            proc_control_B.TmpSignalConversionAtMATL_b[1] -
            proc_control_B.Product3_pv *
            proc_control_B.TmpSignalConversionAtMATL_b[0]) * proc_control_B.xtmp
            + (proc_control_B.d * proc_control_B.Product2_lm +
               proc_control_B.linearScaling *
               proc_control_B.TmpSignalConversionAtMATL_b[2])) +
            proc_control_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_DW.obj_a.i - 1.0) + 3];
          proc_control_B.twpt[3] = proc_control_B.n[0];
          proc_control_B.twpt[4] = proc_control_B.n[1];
          proc_control_B.twpt[5] = proc_control_B.n[2];
          proc_control_B.twpt[6] = proc_control_B.n[3];
          break;

         case 3U:
          //  position absolue et angle relatif
          proc_control_B.twpt[0] = proc_control_B.TmpSignalConversionAtMATL_b[0];
          proc_control_B.twpt[1] = proc_control_B.TmpSignalConversionAtMATL_b[1];
          proc_control_B.twpt[2] = proc_control_B.TmpSignalConversionAtMATL_b[2];
          proc_control_B.d = proc_control_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_DW.obj_a.i - 1.0) + 7];
          proc_control_B.b_norm = proc_control_DW.obj_a.poseList
            [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 9];
          proc_control_B.twpt[3] = ((proc_control_B.Product3_pv *
            proc_control_B.TmpSignalConversionAtSFunct[0] - proc_control_B.d *
            proc_control_B.TmpSignalConversionAtSFunct[1]) -
            proc_control_B.b_norm * proc_control_B.TmpSignalConversionAtSFunct[2])
            - proc_control_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_DW.obj_a.i - 1.0) + 11] *
            proc_control_B.TmpSignalConversionAtSFunct[3];
          proc_control_B.twpt[4] = (proc_control_B.b_norm *
            proc_control_B.TmpSignalConversionAtSFunct[3] -
            proc_control_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_DW.obj_a.i - 1.0) + 11] *
            proc_control_B.TmpSignalConversionAtSFunct[2]) +
            (proc_control_B.Product3_pv *
             proc_control_B.TmpSignalConversionAtSFunct[1] + proc_control_B.d *
             proc_control_B.TmpSignalConversionAtSFunct[0]);
          proc_control_B.twpt[5] = (proc_control_DW.obj_a.poseList
            [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 11] *
            proc_control_B.TmpSignalConversionAtSFunct[1] - proc_control_B.d *
            proc_control_B.TmpSignalConversionAtSFunct[3]) +
            (proc_control_B.Product3_pv *
             proc_control_B.TmpSignalConversionAtSFunct[2] +
             proc_control_B.b_norm * proc_control_B.TmpSignalConversionAtSFunct
             [0]);
          proc_control_B.twpt[6] = (proc_control_DW.obj_a.poseList
            [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 11] *
            proc_control_B.TmpSignalConversionAtSFunct[0] +
            proc_control_B.Product3_pv *
            proc_control_B.TmpSignalConversionAtSFunct[3]) + (proc_control_B.d *
            proc_control_B.TmpSignalConversionAtSFunct[2] -
            proc_control_B.b_norm * proc_control_B.TmpSignalConversionAtSFunct[1]);
          break;

         default:
          //  retourne le point précédent
          proc_control_B.twpt[0] = proc_control_DW.obj_a.poseList
            [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) - 1];
          proc_control_B.twpt[1] = proc_control_DW.obj_a.poseList
            [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 1];
          proc_control_B.twpt[2] = proc_control_DW.obj_a.poseList
            [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 3];
          proc_control_B.twpt[3] = proc_control_B.Product3_pv;
          proc_control_B.twpt[4] = proc_control_DW.obj_a.poseList
            [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 7];
          proc_control_B.twpt[5] = proc_control_DW.obj_a.poseList
            [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 9];
          proc_control_B.twpt[6] = proc_control_DW.obj_a.poseList
            [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 11];
          break;
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 9; proc_control_B.Ns++)
        {
          proc_control_DW.obj_a.poseList[(static_cast<int32_T>
            (proc_control_DW.obj_a.i) + (proc_control_B.Ns << 1)) - 1] =
            proc_control_B.twpt[proc_control_B.Ns];
        }

        proc_control_DW.obj_a.i++;
      }

      // End of Outputs for SubSystem: '<S290>/Subscribe'
      //  Générer la trajectoire
      if (proc_control_DW.Delay1_DSTATE_c) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 9; proc_control_B.Ns++)
        {
          proc_control_B.ibmat = proc_control_B.Ns << 1;
          proc_control_DW.obj_a.poseList[proc_control_B.ibmat] =
            proc_control_DW.obj_a.poseList[(static_cast<int32_T>
            (proc_control_DW.obj_a.i - 1.0) + proc_control_B.ibmat) - 1];
          proc_control_DW.obj_a.poseList[proc_control_B.ibmat + 1] = 999.0;
        }

        proc_control_DW.obj_a.i = 2.0;
      }

      //  Reset Trajectoire
      if (proc_control_B.trajClear != 0.0) {
        // ========================================================================== 
        // ==========================================================================    
        //  Fonction qui reset la trajectoire
        //  remove roll and pitch from initial condition
        proc_control_B.Product2_lm = 1.0 / std::sqrt(((proc_control_B.qS2W[0] *
          proc_control_B.qS2W[0] + proc_control_B.qS2W[1] * proc_control_B.qS2W
          [1]) + proc_control_B.qS2W[2] * proc_control_B.qS2W[2]) +
          proc_control_B.qS2W[3] * proc_control_B.qS2W[3]);
        proc_control_B.n[0] = proc_control_B.qS2W[0] *
          proc_control_B.Product2_lm;
        proc_control_B.n[1] = proc_control_B.qS2W[1] *
          proc_control_B.Product2_lm;
        proc_control_B.n[2] = proc_control_B.qS2W[2] *
          proc_control_B.Product2_lm;
        proc_control_B.n[3] = proc_control_B.qS2W[3] *
          proc_control_B.Product2_lm;
        proc_control_B.t_f = (proc_control_B.n[1] * proc_control_B.n[3] +
                              proc_control_B.n[0] * proc_control_B.n[2]) * 2.0;
        proc_control_B.newPressureMsg = (proc_control_B.t_f >=
          0.99999999999999778);
        proc_control_B.mask2 = (proc_control_B.t_f <= -0.99999999999999778);
        if (proc_control_B.t_f >= 0.99999999999999778) {
          proc_control_B.t_f = 1.0;
        }

        proc_control_B.i = 0;
        if (proc_control_B.mask2) {
          proc_control_B.t_f = -1.0;
        }

        proc_control_B.xtmp = proc_control_B.n[0] * proc_control_B.n[0];
        proc_control_B.Product2_lm = proc_control_B.n[1] * proc_control_B.n[1];
        proc_control_B.t4 = proc_control_B.n[2] * proc_control_B.n[2];
        proc_control_B.d = proc_control_B.n[3] * proc_control_B.n[3];
        proc_control_B.sincos_o2[0] = rt_atan2d_snf((proc_control_B.n[2] *
          proc_control_B.n[3] - proc_control_B.n[0] * proc_control_B.n[1]) *
          -2.0, ((proc_control_B.xtmp - proc_control_B.Product2_lm) -
                 proc_control_B.t4) + proc_control_B.d);
        proc_control_B.sincos_o2[1] = std::asin(proc_control_B.t_f);
        proc_control_B.sincos_o2[2] = rt_atan2d_snf((proc_control_B.n[1] *
          proc_control_B.n[2] - proc_control_B.n[0] * proc_control_B.n[3]) *
          -2.0, ((proc_control_B.xtmp + proc_control_B.Product2_lm) -
                 proc_control_B.t4) - proc_control_B.d);
        if (proc_control_B.newPressureMsg || proc_control_B.mask2) {
          for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 1;
               proc_control_B.idx_p++) {
            proc_control_B.i++;
          }
        }

        if (proc_control_B.i - 1 >= 0) {
          proc_control_B.sincos_o2[0] = 0.0;
        }

        proc_control_B.idx_p = 0;
        if (proc_control_B.newPressureMsg || proc_control_B.mask2) {
          for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
            proc_control_B.idx_p++;
          }
        }

        proc_control_B.Ns_d = proc_control_B.idx_p;
        proc_control_B.b_x_size_k = proc_control_B.idx_p;
        if (proc_control_B.idx_p - 1 >= 0) {
          proc_control_B.b_x_data_c = proc_control_B.t_f;
        }

        proc_control_B.ibmat = proc_control_B.idx_p - 1;
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p <=
             proc_control_B.ibmat; proc_control_B.idx_p++) {
          proc_control_B.xtmp = proc_control_B.b_x_data_c;
          if (!std::isnan(proc_control_B.b_x_data_c)) {
            if (proc_control_B.b_x_data_c < 0.0) {
              proc_control_B.xtmp = -1.0;
            } else {
              proc_control_B.xtmp = (proc_control_B.b_x_data_c > 0.0);
            }
          }

          proc_control_B.b_x_data_c = proc_control_B.xtmp;
        }

        proc_control_B.ibmat = 0;
        if (proc_control_B.newPressureMsg || proc_control_B.mask2) {
          for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
            proc_control_B.ibmat++;
          }
        }

        proc_control_B.e_size = proc_control_B.ibmat;
        if (proc_control_B.ibmat - 1 >= 0) {
          proc_control_B.e_data = rt_atan2d_snf(proc_control_B.n[1],
            proc_control_B.n[0]);
        }

        if (proc_control_B.Ns_d == proc_control_B.ibmat) {
          if (proc_control_B.Ns_d - 1 >= 0) {
            proc_control_B.sincos_o2[2] = proc_control_B.b_x_data_c * 2.0 *
              proc_control_B.e_data;
          }
        } else {
          proc_contro_binary_expand_op_pr(proc_control_B.sincos_o2,
            &proc_control_B.b_x_data_c, &proc_control_B.b_x_size_k,
            &proc_control_B.e_data, &proc_control_B.e_size);
        }

        //  Retransformer en quaternion
        proc_control_B.sincos_o1_d[0] = proc_control_B.sincos_o2[0] * 0.0 / 2.0;
        proc_control_B.sincos_o1_d[1] = proc_control_B.sincos_o2[1] * 0.0 / 2.0;
        proc_control_B.sincos_o1_d[2] = proc_control_B.sincos_o2[2] / 2.0;
        proc_control_B.sincos_o2[0] = std::cos(proc_control_B.sincos_o1_d[0]);
        proc_control_B.sincos_o1_d[0] = std::sin(proc_control_B.sincos_o1_d[0]);
        proc_control_B.sincos_o2[1] = std::cos(proc_control_B.sincos_o1_d[1]);
        proc_control_B.sincos_o1_d[1] = std::sin(proc_control_B.sincos_o1_d[1]);
        proc_control_B.sincos_o2[2] = std::cos(proc_control_B.sincos_o1_d[2]);
        proc_control_B.sincos_o1_d[2] = std::sin(proc_control_B.sincos_o1_d[2]);
        proc_control_B.xtmp = proc_control_B.sincos_o2[0] *
          proc_control_B.sincos_o2[1];
        proc_control_B.Product2_lm = proc_control_B.sincos_o1_d[0] *
          proc_control_B.sincos_o1_d[1];
        proc_control_B.TmpSignalConversionAtMATLAB[3] = proc_control_B.xtmp *
          proc_control_B.sincos_o2[2] - proc_control_B.Product2_lm *
          proc_control_B.sincos_o1_d[2];
        proc_control_B.t4 = proc_control_B.sincos_o2[0] *
          proc_control_B.sincos_o1_d[1];
        proc_control_B.TmpSignalConversionAtMATLAB[4] =
          proc_control_B.sincos_o1_d[0] * proc_control_B.sincos_o2[1] *
          proc_control_B.sincos_o2[2] + proc_control_B.t4 *
          proc_control_B.sincos_o1_d[2];
        proc_control_B.TmpSignalConversionAtMATLAB[5] =
          -proc_control_B.sincos_o1_d[0] * proc_control_B.sincos_o2[1] *
          proc_control_B.sincos_o1_d[2] + proc_control_B.t4 *
          proc_control_B.sincos_o2[2];
        proc_control_B.TmpSignalConversionAtMATLAB[6] = proc_control_B.xtmp *
          proc_control_B.sincos_o1_d[2] + proc_control_B.Product2_lm *
          proc_control_B.sincos_o2[2];
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++)
        {
          proc_control_DW.obj_a.initcond[proc_control_B.Ns] =
            proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.Ns];
        }

        //  definir les conditions initiaux
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
             proc_control_B.ibmat++) {
          proc_control_DW.obj_a.poseList[proc_control_B.Ns + 1] = 999.0;
          proc_control_B.Ns += 2;
        }

        proc_control_DW.obj_a.poseList[14] = 0.0;
        proc_control_DW.obj_a.poseList[16] = 0.0;
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
             proc_control_B.ibmat++) {
          proc_control_DW.obj_a.poseList[proc_control_B.Ns] =
            proc_control_DW.obj_a.initcond[proc_control_B.ibmat];
          proc_control_DW.obj_a.poseList[proc_control_B.Ns + 1] =
            proc_control_DW.obj_a.initcond[proc_control_B.ibmat];
          proc_control_B.Ns += 2;
        }

        proc_control_DW.obj_a.poseList[15] = 1.0;
        proc_control_DW.obj_a.poseList[17] = 0.0;
        proc_control_DW.obj_a.i = 2.0;
      }

      // Outputs for Enabled SubSystem: '<S290>/Pre-traitement' incorporates:
      //   EnablePort: '<S302>/Enable'

      // Outputs for Atomic SubSystem: '<S290>/Subscribe'
      if (proc_control_B.Merge || (proc_control_B.trajClear != 0.0)) {
        proc_control_B.MatrixConcatenate[0] = proc_control_P.Constant1_Value_o;

        // Math: '<S302>/Transpose' incorporates:
        //   Concatenate: '<S302>/Matrix Concatenate'
        //   Constant: '<S302>/Constant1'
        //   MATLABSystem: '<S290>/MATLAB System1'
        //   Selector: '<S302>/Selector'
        //   Selector: '<S302>/Selector1'

        proc_control_B.Ns = 0;
        proc_control_B.ibmat = 0;
        proc_control_B.idx_p = 0;
        for (proc_control_B.st_Value_size_idx_1 = 0;
             proc_control_B.st_Value_size_idx_1 < 2;
             proc_control_B.st_Value_size_idx_1++) {
          proc_control_B.Ns_d = 0;
          for (proc_control_B.n_l = 0; proc_control_B.n_l < 9;
               proc_control_B.n_l++) {
            proc_control_B.Transpose_i[proc_control_B.n_l + proc_control_B.ibmat]
              = proc_control_DW.obj_a.poseList[proc_control_B.Ns_d +
              proc_control_B.st_Value_size_idx_1];
            proc_control_B.Ns_d += 2;
          }

          proc_control_B.Selector[proc_control_B.Ns] =
            proc_control_B.Transpose_i[proc_control_B.ibmat];
          proc_control_B.Selector[proc_control_B.Ns + 1] =
            proc_control_B.Transpose_i[proc_control_B.ibmat + 1];
          proc_control_B.Selector[proc_control_B.Ns + 2] =
            proc_control_B.Transpose_i[proc_control_B.ibmat + 2];
          proc_control_B.Selector1[proc_control_B.idx_p] =
            proc_control_B.Transpose_i[proc_control_B.ibmat + 3];
          proc_control_B.Selector1[proc_control_B.idx_p + 1] =
            proc_control_B.Transpose_i[proc_control_B.ibmat + 4];
          proc_control_B.Selector1[proc_control_B.idx_p + 2] =
            proc_control_B.Transpose_i[proc_control_B.ibmat + 5];
          proc_control_B.Selector1[proc_control_B.idx_p + 3] =
            proc_control_B.Transpose_i[proc_control_B.ibmat + 6];
          proc_control_B.Ns += 3;
          proc_control_B.ibmat += 9;
          proc_control_B.idx_p += 4;
        }

        // End of Math: '<S302>/Transpose'

        // Selector: '<S302>/Selector2' incorporates:
        //   Concatenate: '<S302>/Matrix Concatenate'
        //   Math: '<S302>/Transpose'

        proc_control_B.MatrixConcatenate[1] = proc_control_B.Transpose_i[16];
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 7; proc_control_B.Ns++)
        {
          // Selector: '<S302>/Selector4' incorporates:
          //   Math: '<S302>/Transpose'

          proc_control_B.Selector4[proc_control_B.Ns] =
            proc_control_B.Transpose_i[proc_control_B.Ns + 9];
        }
      }

      // End of Outputs for SubSystem: '<S290>/Pre-traitement'

      // Outputs for Resettable SubSystem: '<S290>/Trajectory generator' incorporates:
      //   ResetPort: '<S305>/Reset'

      if (proc_control_B.Merge &&
          (proc_control_PrevZCX.Trajectorygenerator_Reset_ZCE != POS_ZCSIG)) {
        // InitializeConditions for DiscreteIntegrator: '<S305>/Discrete-Time Integrator' 
        proc_control_DW.DiscreteTimeIntegrator_DSTATE =
          proc_control_P.DiscreteTimeIntegrator_IC;
      }

      proc_control_PrevZCX.Trajectorygenerator_Reset_ZCE = proc_control_B.Merge;

      // End of Outputs for SubSystem: '<S290>/Subscribe'

      // DiscreteIntegrator: '<S305>/Discrete-Time Integrator' incorporates:
      //   Concatenate: '<S302>/Matrix Concatenate'
      //   Constant: '<S302>/Constant1'
      //   Constant: '<S305>/Constant'
      //   Logic: '<S290>/OR'
      //   MATLABSystem: '<S303>/SourceBlock'

      proc_control_B.AngularRate_a_idx_1 =
        proc_control_P.DiscreteTimeIntegrator_gainva_e *
        proc_control_P.Constant_Value_ep;

      // DiscreteIntegrator: '<S305>/Discrete-Time Integrator'
      proc_control_B.Product2_lm = proc_control_B.AngularRate_a_idx_1 +
        proc_control_DW.DiscreteTimeIntegrator_DSTATE;

      // MATLABSystem: '<S305>/Rotation Trajectory' incorporates:
      //   Concatenate: '<S302>/Matrix Concatenate'
      //   Selector: '<S302>/Selector1'
      //   Selector: '<S305>/Selector1'
      //   Selector: '<S305>/Selector2'

      if (proc_control_DW.obj_j.TunablePropsChanged) {
        proc_control_DW.obj_j.TunablePropsChanged = false;
      }

      proc_control_B.linearScaling = 1.0 / (proc_control_B.MatrixConcatenate[1]
        - proc_control_B.MatrixConcatenate[0]);
      proc_control_B.Product1_j1 = (proc_control_B.Product2_lm -
        proc_control_B.MatrixConcatenate[0]) * proc_control_B.linearScaling;
      if (proc_control_B.Product2_lm < proc_control_B.MatrixConcatenate[0]) {
        proc_control_B.Product1_j1 = 0.0;
      }

      if (proc_control_B.Product2_lm > proc_control_B.MatrixConcatenate[1]) {
        proc_control_B.Product1_j1 = 1.0;
      }

      if (proc_control_B.Product2_lm < proc_control_B.MatrixConcatenate[0]) {
        proc_control_B.linearScaling = 0.0;
      }

      proc_control_B.scale = proc_control_B.linearScaling;
      if (proc_control_B.Product2_lm > proc_control_B.MatrixConcatenate[1]) {
        proc_control_B.scale = 0.0;
      }

      proc_control_B.n_k = std::sqrt(((proc_control_B.Selector1[0] *
        proc_control_B.Selector1[0] + proc_control_B.Selector1[1] *
        proc_control_B.Selector1[1]) + proc_control_B.Selector1[2] *
        proc_control_B.Selector1[2]) + proc_control_B.Selector1[3] *
        proc_control_B.Selector1[3]);
      proc_control_B.linearScaling = proc_control_B.Selector1[0] /
        proc_control_B.n_k;
      proc_control_B.xtmp = proc_control_B.Selector1[1] / proc_control_B.n_k;
      proc_control_B.b_norm = proc_control_B.Selector1[2] / proc_control_B.n_k;
      proc_control_B.t3 = proc_control_B.Selector1[3] / proc_control_B.n_k;
      proc_control_B.n_k = std::sqrt(((proc_control_B.Selector1[4] *
        proc_control_B.Selector1[4] + proc_control_B.Selector1[5] *
        proc_control_B.Selector1[5]) + proc_control_B.Selector1[6] *
        proc_control_B.Selector1[6]) + proc_control_B.Selector1[7] *
        proc_control_B.Selector1[7]);
      proc_control_B.t4 = proc_control_B.Selector1[4] / proc_control_B.n_k;
      proc_control_B.d = proc_control_B.Selector1[5] / proc_control_B.n_k;
      proc_control_B.t8 = proc_control_B.Selector1[6] / proc_control_B.n_k;
      proc_control_B.t9 = proc_control_B.Selector1[7] / proc_control_B.n_k;
      proc_control_B.n_k = std::sqrt(((proc_control_B.linearScaling *
        proc_control_B.linearScaling + proc_control_B.xtmp * proc_control_B.xtmp)
        + proc_control_B.b_norm * proc_control_B.b_norm) + proc_control_B.t3 *
        proc_control_B.t3);
      proc_control_B.t28 = proc_control_B.linearScaling / proc_control_B.n_k;
      proc_control_B.dp = proc_control_B.xtmp / proc_control_B.n_k;
      proc_control_B.t65 = proc_control_B.b_norm / proc_control_B.n_k;
      proc_control_B.t57 = proc_control_B.t3 / proc_control_B.n_k;
      proc_control_B.oa = ((proc_control_B.t28 - proc_control_B.dp * 0.0) -
                           proc_control_B.t65 * 0.0) - proc_control_B.t57 * 0.0;
      proc_control_B.t_f = ((proc_control_B.t28 * 0.0 + proc_control_B.dp) +
                            proc_control_B.t65 * 0.0) - proc_control_B.t57 * 0.0;
      proc_control_B.oc = ((proc_control_B.t28 * 0.0 - proc_control_B.dp * 0.0)
                           + proc_control_B.t65) + proc_control_B.t57 * 0.0;
      proc_control_B.Product3_pv = ((proc_control_B.t28 * 0.0 +
        proc_control_B.dp * 0.0) - proc_control_B.t65 * 0.0) +
        proc_control_B.t57;
      proc_control_B.n_k = std::sqrt(((proc_control_B.t4 * proc_control_B.t4 +
        proc_control_B.d * proc_control_B.d) + proc_control_B.t8 *
        proc_control_B.t8) + proc_control_B.t9 * proc_control_B.t9);
      proc_control_B.t28 = proc_control_B.t4 / proc_control_B.n_k;
      proc_control_B.dp = proc_control_B.d / proc_control_B.n_k;
      proc_control_B.t65 = proc_control_B.t8 / proc_control_B.n_k;
      proc_control_B.t57 = proc_control_B.t9 / proc_control_B.n_k;
      proc_control_B.t27 = ((proc_control_B.t28 - proc_control_B.dp * 0.0) -
                            proc_control_B.t65 * 0.0) - proc_control_B.t57 * 0.0;
      proc_control_B.t26 = ((proc_control_B.t28 * 0.0 + proc_control_B.dp) +
                            proc_control_B.t65 * 0.0) - proc_control_B.t57 * 0.0;
      proc_control_B.n_k = ((proc_control_B.t28 * 0.0 - proc_control_B.dp * 0.0)
                            + proc_control_B.t65) + proc_control_B.t57 * 0.0;
      proc_control_B.t28 = ((proc_control_B.t28 * 0.0 + proc_control_B.dp * 0.0)
                            - proc_control_B.t65 * 0.0) + proc_control_B.t57;
      proc_control_B.dp = ((proc_control_B.oa * proc_control_B.t27 +
                            proc_control_B.t_f * proc_control_B.t26) +
                           proc_control_B.oc * proc_control_B.n_k) +
        proc_control_B.Product3_pv * proc_control_B.t28;
      if (proc_control_B.dp < 0.0) {
        proc_control_B.t27 = -proc_control_B.t27;
        proc_control_B.t26 = -proc_control_B.t26;
        proc_control_B.n_k = -proc_control_B.n_k;
        proc_control_B.t28 = -proc_control_B.t28;
        proc_control_B.dp = -proc_control_B.dp;
      }

      if (proc_control_B.dp > 1.0) {
        proc_control_B.dp = 1.0;
      }

      proc_control_B.theta0 = std::acos(proc_control_B.dp);
      proc_control_B.t65 = std::sin(proc_control_B.theta0);
      proc_control_B.dp = 1.0 / proc_control_B.t65;
      proc_control_B.theta0 = std::sin(0.0 * proc_control_B.theta0);
      proc_control_B.oa = (proc_control_B.t65 * proc_control_B.oa +
                           proc_control_B.theta0 * proc_control_B.t27) *
        proc_control_B.dp;
      proc_control_B.t_f = (proc_control_B.t65 * proc_control_B.t_f +
                            proc_control_B.theta0 * proc_control_B.t26) *
        proc_control_B.dp;
      proc_control_B.oc = (proc_control_B.t65 * proc_control_B.oc +
                           proc_control_B.theta0 * proc_control_B.n_k) *
        proc_control_B.dp;
      proc_control_B.Product3_pv = (proc_control_B.t65 *
        proc_control_B.Product3_pv + proc_control_B.theta0 * proc_control_B.t28)
        * proc_control_B.dp;
      if (std::isinf(proc_control_B.dp)) {
        proc__quaternion_parenReference(proc_control_B.linearScaling,
          proc_control_B.xtmp, proc_control_B.b_norm, proc_control_B.t3, true,
          &proc_control_B.b_x_data_c, proc_control_B.s1_size,
          &proc_control_B.e_data, proc_control_B.str_size,
          &proc_control_B.assign_temp_c_data, proc_control_B.b_s1_size,
          &proc_control_B.assign_temp_d_data, proc_control_B.s1_size_j);
        proc_con_quaternion_parenAssign(proc_control_B.oa, proc_control_B.t_f,
          proc_control_B.oc, proc_control_B.Product3_pv,
          &proc_control_B.b_x_data_c, proc_control_B.s1_size,
          &proc_control_B.e_data, proc_control_B.str_size,
          &proc_control_B.assign_temp_c_data, proc_control_B.b_s1_size,
          &proc_control_B.assign_temp_d_data, proc_control_B.s1_size_j,
          &proc_control_B.oa, &proc_control_B.t_f, &proc_control_B.oc,
          &proc_control_B.Product3_pv);
      }

      proc_control_B.n_k = std::sqrt(((proc_control_B.oa * proc_control_B.oa +
        proc_control_B.t_f * proc_control_B.t_f) + proc_control_B.oc *
        proc_control_B.oc) + proc_control_B.Product3_pv *
        proc_control_B.Product3_pv);
      proc_contr_quaternionBase_slerp(proc_control_B.linearScaling,
        proc_control_B.xtmp, proc_control_B.b_norm, proc_control_B.t3,
        proc_control_B.t4, proc_control_B.d, proc_control_B.t8,
        proc_control_B.t9, &proc_control_B.t65, &proc_control_B.theta0,
        &proc_control_B.t57, &proc_control_B.oa_n);
      proc_con_quaternionBase_slerp_p(proc_control_B.linearScaling,
        proc_control_B.xtmp, proc_control_B.b_norm, proc_control_B.t3,
        proc_control_B.t4, proc_control_B.d, proc_control_B.t8,
        proc_control_B.t9, proc_control_B.Product1_j1, &proc_control_B.t26,
        &proc_control_B.t27, &proc_control_B.t28, &proc_control_B.dp);
      proc_control_B.expl_temp_g = proc_computeFirstQuatDerivative
        (proc_control_B.oa / proc_control_B.n_k, proc_control_B.t_f /
         proc_control_B.n_k, proc_control_B.oc / proc_control_B.n_k,
         proc_control_B.Product3_pv / proc_control_B.n_k, proc_control_B.t65,
         proc_control_B.theta0, proc_control_B.t57, proc_control_B.oa_n,
         proc_control_B.scale, proc_control_B.t26, proc_control_B.t27,
         proc_control_B.t28, proc_control_B.dp);
      proc_control_B.oa = 2.0 * proc_control_B.expl_temp_g.a;
      proc_control_B.t_f = 2.0 * proc_control_B.expl_temp_g.b;
      proc_control_B.oc = 2.0 * proc_control_B.expl_temp_g.c;
      proc_control_B.Product3_pv = 2.0 * proc_control_B.expl_temp_g.d;

      // MATLABSystem: '<S307>/Polynomial Trajectory1' incorporates:
      //   Concatenate: '<S302>/Matrix Concatenate'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S122>/N to A'
      //   Lookup_n-D: '<S122>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   Selector: '<S302>/Selector'
      //   Trigonometry: '<S254>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //   UniformRandomNumber: '<S12>/ Drift'
      //
      proc_control_B.NewDvlMsg = false;
      proc_control_B.newPressureMsg = true;
      proc_control_B.b_k = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_k < 6)) {
        if (!(proc_control_DW.obj_jo.VelocityBoundaryCondition[proc_control_B.b_k]
              ==
              proc_control_P.PolynomialTrajectory1_VelocityB[proc_control_B.b_k]))
        {
          proc_control_B.newPressureMsg = false;
          exitg1 = true;
        } else {
          proc_control_B.b_k++;
        }
      }

      if (proc_control_B.newPressureMsg) {
        proc_control_B.NewDvlMsg = true;
      }

      if (!proc_control_B.NewDvlMsg) {
        if (proc_control_DW.obj_jo.isInitialized == 1) {
          proc_control_DW.obj_jo.TunablePropsChanged = true;
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_jo.VelocityBoundaryCondition[proc_control_B.Ns] =
            proc_control_P.PolynomialTrajectory1_VelocityB[proc_control_B.Ns];
        }
      }

      if (proc_control_DW.obj_jo.TunablePropsChanged) {
        proc_control_DW.obj_jo.TunablePropsChanged = false;
      }

      std::memset(&proc_control_B.coefMat[0], 0, 12U * sizeof(real_T));
      proc_control_B.t4 = proc_control_B.MatrixConcatenate[1] -
        proc_control_B.MatrixConcatenate[0];
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 3;
           proc_control_B.idx_p++) {
        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S225>/Enable'

        // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
        //   EnablePort: '<S253>/Enable'

        proc_control_B.n[0] = proc_control_B.Selector[proc_control_B.idx_p];
        proc_control_B.n[1] =
          proc_control_DW.obj_jo.VelocityBoundaryCondition[proc_control_B.idx_p];
        proc_control_B.xtmp = proc_control_B.Selector[proc_control_B.idx_p + 3]
          - (proc_control_B.t4 * proc_control_B.n[1] + proc_control_B.n[0]);
        proc_control_B.d =
          proc_control_DW.obj_jo.VelocityBoundaryCondition[proc_control_B.idx_p
          + 3] - (0.0 * proc_control_B.n[0] + proc_control_B.n[1]);

        // End of Outputs for SubSystem: '<S250>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        proc_control_B.n[3] = proc_control_B.n[0];
        proc_control_B.b_norm = proc_control_B.t4 * proc_control_B.t4;

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S225>/Enable'

        // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
        //   EnablePort: '<S253>/Enable'

        proc_control_B.coefMat[proc_control_B.idx_p] = 1.0 /
          proc_control_B.b_norm * proc_control_B.d + -2.0 / rt_powd_snf
          (proc_control_B.t4, 3.0) * proc_control_B.xtmp;
        proc_control_B.coefMat[proc_control_B.idx_p + 3] = 3.0 /
          proc_control_B.b_norm * proc_control_B.xtmp + -1.0 / proc_control_B.t4
          * proc_control_B.d;
        proc_control_B.coefMat[proc_control_B.idx_p + 6] = proc_control_B.n[1];
        proc_control_B.coefMat[proc_control_B.idx_p + 9] = proc_control_B.n[3];

        // End of Outputs for SubSystem: '<S250>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      std::memset(&proc_control_B.coeffMat[0], 0, 12U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 3; proc_control_B.Ns++) {
        proc_control_B.coeffMat[proc_control_B.Ns + 9] = 0.0;
        proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
          proc_control_B.coefMat[proc_control_B.Ns] * 0.0;
        proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
          proc_control_B.coefMat[proc_control_B.Ns + 3] * 0.0;
        proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
          proc_control_B.coefMat[proc_control_B.Ns + 6] * 0.0;
        proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
          proc_control_B.coefMat[proc_control_B.Ns + 9];
      }

      std::memset(&proc_control_B.coefsWithFlatStart[0], 0, 24U * sizeof(real_T));
      proc_control_B.Ns = 0;
      proc_control_B.ibmat = 0;
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 4;
           proc_control_B.idx_p++) {
        proc_control_B.coefsWithFlatStart[proc_control_B.Ns] =
          proc_control_B.coeffMat[proc_control_B.ibmat];
        proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 3] =
          proc_control_B.coefMat[proc_control_B.ibmat];
        proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 1] =
          proc_control_B.coeffMat[proc_control_B.ibmat + 1];
        proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 4] =
          proc_control_B.coefMat[proc_control_B.ibmat + 1];
        proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 2] =
          proc_control_B.coeffMat[proc_control_B.ibmat + 2];
        proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 5] =
          proc_control_B.coefMat[proc_control_B.ibmat + 2];
        proc_control_B.Ns += 6;
        proc_control_B.ibmat += 3;
      }

      proc_control_B.n[0] = rt_powd_snf(proc_control_B.t4, 3.0);
      proc_control_B.n[1] = rt_powd_snf(proc_control_B.t4, 2.0);
      proc_control_B.n[2] = rt_powd_snf(proc_control_B.t4, 1.0);
      proc_control_B.n[3] = rt_powd_snf(proc_control_B.t4, 0.0);
      std::memset(&proc_control_B.coeffMat[0], 0, 12U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 3; proc_control_B.Ns++) {
        proc_control_B.coeffMat[proc_control_B.Ns + 9] = 0.0;
        proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
          proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 3] *
          proc_control_B.n[0];
        proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
          proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 9] *
          proc_control_B.n[1];
        proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
          proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 15] *
          proc_control_B.n[2];
        proc_control_B.coeffMat[proc_control_B.Ns + 9] +=
          proc_control_B.coefsWithFlatStart[proc_control_B.Ns + 21] *
          proc_control_B.n[3];
      }

      std::memset(&proc_control_B.b_newCoefs[0], 0, 36U * sizeof(real_T));
      proc_control_B.Ns = 0;
      proc_control_B.ibmat = 0;
      proc_control_B.idx_p = 0;
      for (proc_control_B.st_Value_size_idx_1 = 0;
           proc_control_B.st_Value_size_idx_1 < 4;
           proc_control_B.st_Value_size_idx_1++) {
        for (proc_control_B.Ns_d = 0; proc_control_B.Ns_d < 6;
             proc_control_B.Ns_d++) {
          proc_control_B.b_newCoefs[proc_control_B.Ns_d + proc_control_B.Ns] =
            proc_control_B.coefsWithFlatStart[proc_control_B.Ns_d +
            proc_control_B.idx_p];
        }

        proc_control_B.b_newCoefs[proc_control_B.Ns + 6] =
          proc_control_B.coeffMat[proc_control_B.ibmat];
        proc_control_B.b_newCoefs[proc_control_B.Ns + 7] =
          proc_control_B.coeffMat[proc_control_B.ibmat + 1];
        proc_control_B.b_newCoefs[proc_control_B.Ns + 8] =
          proc_control_B.coeffMat[proc_control_B.ibmat + 2];
        proc_control_B.Ns += 9;
        proc_control_B.ibmat += 3;
        proc_control_B.idx_p += 6;
      }

      proc_control_B.n[0] = proc_control_B.MatrixConcatenate[0] - 1.0;
      proc_control_B.n[1] = proc_control_B.MatrixConcatenate[0];
      proc_control_B.n[2] = proc_control_B.MatrixConcatenate[1];
      proc_control_B.n[3] = proc_control_B.MatrixConcatenate[1] + 1.0;
      proc_control_B.TmpSignalConversionAtSFunct[0] =
        proc_control_B.MatrixConcatenate[0] - 1.0;
      proc_control_B.TmpSignalConversionAtSFunct[1] =
        proc_control_B.MatrixConcatenate[0];
      proc_control_B.TmpSignalConversionAtSFunct[3] =
        proc_control_B.MatrixConcatenate[1] + 1.0;
      proc_control_B.linearScaling = 0.01;
      if (proc_control_B.Product2_lm > proc_control_B.MatrixConcatenate[1]) {
        proc_control_B.i = 1;
        proc_control_B.idx_p = 1;
      } else {
        proc_control_B.i = 0;
        proc_control_B.idx_p = 0;
      }

      if ((proc_control_B.i != 0) && (proc_control_B.idx_p != 0)) {
        proc_control_B.linearScaling = std::fmin((proc_control_B.Product2_lm -
          proc_control_B.MatrixConcatenate[1]) / 2.0, 0.01);
      }

      proc_control_B.TmpSignalConversionAtSFunct[2] =
        proc_control_B.MatrixConcatenate[1] + proc_control_B.linearScaling;
      std::memset(&proc_control_B.dCoefs[0], 0, 36U * sizeof(real_T));

      // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
      //   ActionPort: '<S308>/Action Port'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S123>/Action Port'

      // SwitchCase: '<S120>/Switch Case' incorporates:
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   If: '<S10>/If'
      //   MATLABSystem: '<S123>/MATLAB System'
      //   MATLABSystem: '<S290>/MATLAB System1'
      //   MATLABSystem: '<S307>/Polynomial Trajectory1'
      //   MATLABSystem: '<S311>/MATLAB System11'
      //   MATLABSystem: '<S311>/MATLAB System3'
      //   MATLABSystem: '<S311>/MATLAB System6'

      proc_control_B.Ns_d = 0;

      // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<S10>/Get_ROS_param '

      // MATLABSystem: '<S307>/Polynomial Trajectory1' incorporates:
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   If: '<S10>/If'
      //   MATLABSystem: '<S123>/MATLAB System'
      //   MATLABSystem: '<S290>/MATLAB System1'
      //   MATLABSystem: '<S311>/MATLAB System11'
      //   MATLABSystem: '<S311>/MATLAB System3'
      //   MATLABSystem: '<S311>/MATLAB System6'
      //   SwitchCase: '<S120>/Switch Case'

      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 3;
           proc_control_B.ibmat++) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 9; proc_control_B.Ns++)
        {
          // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
          //   ActionPort: '<S308>/Action Port'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
          //   ActionPort: '<S123>/Action Port'

          proc_control_B.i = proc_control_B.Ns + proc_control_B.Ns_d;
          proc_control_B.dCoefs[proc_control_B.i + 9] = static_cast<real_T>(3 -
            proc_control_B.ibmat) * proc_control_B.b_newCoefs[proc_control_B.i];

          // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
        }

        // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
        //   ActionPort: '<S308>/Action Port'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S123>/Action Port'

        proc_control_B.Ns_d += 9;

        // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
      }

      // Update for DiscreteIntegrator: '<S305>/Discrete-Time Integrator'
      proc_control_DW.DiscreteTimeIntegrator_DSTATE =
        proc_control_B.AngularRate_a_idx_1 + proc_control_B.Product2_lm;

      // End of Outputs for SubSystem: '<S290>/Trajectory generator'

      // MATLABSystem: '<S290>/MATLAB System'
      if (proc_control_DW.obj.linearConvergence !=
          proc_control_P.MATLABSystem_linearConvergence) {
        proc_control_DW.obj.linearConvergence =
          proc_control_P.MATLABSystem_linearConvergence;
      }

      if (proc_control_DW.obj.quaternionConvergence !=
          proc_control_P.MATLABSystem_quaternionConverge) {
        proc_control_DW.obj.quaternionConvergence =
          proc_control_P.MATLABSystem_quaternionConverge;
      }

      if (proc_control_DW.obj.TargetThreshold !=
          proc_control_P.MATLABSystem_TargetThreshold) {
        proc_control_DW.obj.TargetThreshold =
          proc_control_P.MATLABSystem_TargetThreshold;
      }

      // Outputs for Resettable SubSystem: '<S290>/Trajectory generator' incorporates:
      //   ResetPort: '<S305>/Reset'

      // MATLABSystem: '<S307>/Polynomial Trajectory1'
      proc_control_ppval_p(proc_control_B.n, proc_control_B.b_newCoefs,
                           proc_control_B.Product2_lm, proc_control_B.sincos_o2);
      proc_control_ppval_p(proc_control_B.TmpSignalConversionAtSFunct,
                           proc_control_B.dCoefs, proc_control_B.Product2_lm,
                           proc_control_B.unusedExpr_e);

      // MATLABSystem: '<S290>/MATLAB System' incorporates:
      //   MATLABSystem: '<S305>/Rotation Trajectory'
      //   MATLABSystem: '<S307>/Polynomial Trajectory1'
      //   SignalConversion generated from: '<S290>/Transpose2'

      proc_control_B.imz[0] = proc_control_B.sincos_o2[0];
      proc_control_B.imz[1] = proc_control_B.sincos_o2[1];
      proc_control_B.imz[2] = proc_control_B.sincos_o2[2];
      proc_control_B.imz[3] = proc_control_B.t26;
      proc_control_B.imz[4] = proc_control_B.t27;
      proc_control_B.imz[5] = proc_control_B.t28;
      proc_control_B.imz[6] = proc_control_B.dp;
      proc_control_B.imz[7] = proc_control_B.unusedExpr_e[0];
      proc_control_B.imz[10] = ((proc_control_B.oa * -proc_control_B.t27 +
        proc_control_B.t_f * proc_control_B.t26) + proc_control_B.oc *
        -proc_control_B.dp) - proc_control_B.Product3_pv * -proc_control_B.t28;

      // End of Outputs for SubSystem: '<S290>/Trajectory generator'
      proc_control_B.K_dz[0] = proc_control_B.WorldPosition[0];

      // Outputs for Resettable SubSystem: '<S290>/Trajectory generator' incorporates:
      //   ResetPort: '<S305>/Reset'

      proc_control_B.imz[8] = proc_control_B.unusedExpr_e[1];
      proc_control_B.imz[11] = ((proc_control_B.oa * -proc_control_B.t28 -
        proc_control_B.t_f * -proc_control_B.dp) + proc_control_B.oc *
        proc_control_B.t26) + proc_control_B.Product3_pv * -proc_control_B.t27;

      // End of Outputs for SubSystem: '<S290>/Trajectory generator'
      proc_control_B.K_dz[1] = proc_control_B.WorldPosition[1];

      // Outputs for Resettable SubSystem: '<S290>/Trajectory generator' incorporates:
      //   ResetPort: '<S305>/Reset'

      proc_control_B.imz[9] = proc_control_B.unusedExpr_e[2];
      proc_control_B.imz[12] = ((proc_control_B.oa * -proc_control_B.dp +
        proc_control_B.t_f * -proc_control_B.t28) - proc_control_B.oc *
        -proc_control_B.t27) + proc_control_B.Product3_pv * proc_control_B.t26;

      // End of Outputs for SubSystem: '<S290>/Trajectory generator'
      proc_control_B.K_dz[2] = proc_control_B.WorldPosition[2];
      proc_control_B.K_dz[3] = proc_control_B.qS2W[0];
      proc_control_B.K_dz[4] = proc_control_B.qS2W[1];
      proc_control_B.K_dz[5] = proc_control_B.qS2W[2];
      proc_control_B.K_dz[6] = proc_control_B.qS2W[3];
      proc_control_B.K_dz[7] = proc_control_B.BodyVelocity[0];
      proc_control_B.K_dz[10] = proc_control_B.AngularRate[0];
      proc_control_B.K_dz[8] = proc_control_B.BodyVelocity[1];
      proc_control_B.K_dz[11] = proc_control_B.AngularRate[1];
      proc_control_B.K_dz[9] = proc_control_B.BodyVelocity[2];
      proc_control_B.K_dz[12] = proc_control_B.AngularRate[2];

      // Merge generated from: '<S9>/Merge' incorporates:
      //   MATLABSystem: '<S290>/MATLAB System'
      //   MATLABSystem: '<S290>/MATLAB System1'
      //   Math: '<S290>/Transpose1'
      //   Selector: '<S302>/Selector4'

      proc_TrajectoryManager_stepImpl(&proc_control_DW.obj,
        proc_control_B.trajClear, proc_control_B.imz, proc_control_B.Selector4,
        proc_control_DW.obj_a.initcond, proc_control_B.K_dz, proc_control_B.y_j,
        &proc_control_B.isReached);

      // Merge generated from: '<S9>/Merge' incorporates:
      //   MATLABSystem: '<S290>/MATLAB System'
      //   SignalConversion generated from: '<S290>/Reference '

      std::memcpy(&proc_control_B.Reference[0], &proc_control_B.y_j[0], 130U *
                  sizeof(real_T));

      // Merge generated from: '<S9>/Merge' incorporates:
      //   Constant: '<S290>/Constant2'
      //   SignalConversion generated from: '<S290>/Reference '

      proc_control_B.isTrajDone = proc_control_P.Constant2_Value_i;
      for (proc_control_B.i = 0; proc_control_B.i < 7; proc_control_B.i++) {
        // Merge generated from: '<S9>/Merge' incorporates:
        //   Math: '<S290>/Transpose1'
        //   Selector: '<S302>/Selector4'
        //   SignalConversion generated from: '<S290>/Reference '

        proc_control_B.target[proc_control_B.i] =
          proc_control_B.Selector4[proc_control_B.i];
      }

      // Outputs for Atomic SubSystem: '<S290>/Subscribe'
      // Update for Delay: '<S290>/Delay1' incorporates:
      //   MATLABSystem: '<S303>/SourceBlock'

      proc_control_DW.Delay1_DSTATE_c = proc_control_B.Merge;

      // End of Outputs for SubSystem: '<S290>/Subscribe'
      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      break;

     default:
      // Outputs for IfAction SubSystem: '<S9>/IDLE' incorporates:
      //   ActionPort: '<S283>/Action Port'

      // MATLAB Function: '<S283>/MATLAB Function1' incorporates:
      //   Constant: '<S283>/Constant'
      //   Math: '<S283>/Transpose'

      std::memcpy(&proc_control_B.K_dz[0], &proc_control_P.Constant_Value_m5[0],
                  13U * sizeof(real_T));
      proc_control_B.K_dz[9] = -proc_control_P.Constant_Value_m5[9];
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 13;
           proc_control_B.idx_p++) {
        proc_control_B.ibmat = proc_control_B.idx_p * 10;
        for (proc_control_B.i = 0; proc_control_B.i < 10; proc_control_B.i++) {
          proc_control_B.y_j[proc_control_B.ibmat + proc_control_B.i] =
            proc_control_B.K_dz[proc_control_B.idx_p];
        }
      }

      // End of MATLAB Function: '<S283>/MATLAB Function1'

      // Merge generated from: '<S9>/Merge' incorporates:
      //   SignalConversion generated from: '<S283>/y'

      std::memcpy(&proc_control_B.Reference[0], &proc_control_B.y_j[0], 130U *
                  sizeof(real_T));

      // Merge generated from: '<S9>/Merge' incorporates:
      //   Constant: '<S283>/Constant5'
      //   SignalConversion generated from: '<S283>/y'

      proc_control_B.isReached = proc_control_P.Constant5_Value;

      // Merge generated from: '<S9>/Merge' incorporates:
      //   Constant: '<S283>/Constant4'
      //   SignalConversion generated from: '<S283>/y'

      proc_control_B.isTrajDone = proc_control_P.Constant4_Value;
      for (proc_control_B.i = 0; proc_control_B.i < 7; proc_control_B.i++) {
        // Merge generated from: '<S9>/Merge' incorporates:
        //   Constant: '<S283>/Constant'
        //   Math: '<S283>/Transpose'
        //   SignalConversion generated from: '<S283>/y'

        proc_control_B.target[proc_control_B.i] =
          proc_control_P.Constant_Value_m5[proc_control_B.i];
      }

      // End of Outputs for SubSystem: '<S9>/IDLE'
      break;
    }

    // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
    // If: '<S7>/If' incorporates:
    //   BusCreator: '<S310>/Bus Creator'
    //   Delay: '<S7>/Delay'
    //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
    //   Lookup_n-D: '<S11>/ PWM to N'
    //   Lookup_n-D: '<S122>/N to A'
    //   Lookup_n-D: '<S122>/N to PWM'
    //   Lookup_n-D: '<S16>/N to RPM'
    //   MATLABSystem: '<S121>/MPC manager'
    //   MATLABSystem: '<S219>/SourceBlock'
    //   MATLABSystem: '<S220>/SourceBlock'
    //   Math: '<S121>/Transpose'
    //   Trigonometry: '<S254>/sincos'
    //   Trigonometry: '<S40>/sincos'
    //   UniformRandomNumber: '<S12>/ Drift'
    //
    proc_control_B.rtPrevAction = proc_control_DW.If_ActiveSubsystem_i;
    proc_control_DW.If_ActiveSubsystem_i = 0;
    if (proc_control_B.rtPrevAction != 0) {
      // SystemReset for IfAction SubSystem: '<S7>/MPC manager' incorporates:
      //   ActionPort: '<S121>/Action Port'

      // SystemReset for If: '<S7>/If' incorporates:
      //   MATLABSystem: '<S121>/MPC manager'

      proc_contr_mpcManager_resetImpl(&proc_control_DW.obj_f);

      // End of SystemReset for SubSystem: '<S7>/MPC manager'
    }

    // Outputs for IfAction SubSystem: '<S7>/MPC manager' incorporates:
    //   ActionPort: '<S121>/Action Port'

    // Outputs for Atomic SubSystem: '<S121>/Subscribe1'
    proc_control_B.Merge = Sub_proc_control_182_1643.getLatestMessage
      (&proc_control_B.b_varargout_2_p);

    // Outputs for Enabled SubSystem: '<S220>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S222>/Enable'

    if (proc_control_B.Merge) {
      // SignalConversion generated from: '<S222>/In1'
      proc_control_B.In1_o = proc_control_B.b_varargout_2_p;
    }

    // End of Outputs for SubSystem: '<S220>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S121>/Subscribe1'

    // Outputs for Atomic SubSystem: '<S121>/Subscribe'
    proc_control_B.NewDvlMsg = Sub_proc_control_182_1620.getLatestMessage
      (&proc_control_B.b_varargout_2_c);

    // Outputs for Enabled SubSystem: '<S219>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S221>/Enable'

    if (proc_control_B.NewDvlMsg) {
      // SignalConversion generated from: '<S221>/In1'
      proc_control_B.In1_f = proc_control_B.b_varargout_2_c;
    }

    // End of Outputs for SubSystem: '<S219>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S121>/Subscribe'
    //         %% Fonction D'initialisation
    //  Conditions initial
    if (proc_control_DW.obj_f.init == 0.0) {
      proc_control_DW.obj_f.gainsList[0] = 10.0;
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_f.gainsList[proc_control_B.Ns + 20] =
          proc_control_B.mpcParams_l.gains.c10.OV[proc_control_B.ibmat];
        proc_control_B.Ns += 20;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_f.gainsList[proc_control_B.Ns + 280] =
          proc_control_B.mpcParams_l.gains.c10.MV[proc_control_B.ibmat];
        proc_control_DW.obj_f.gainsList[proc_control_B.Ns + 440] =
          proc_control_B.mpcParams_l.gains.c10.MVR[proc_control_B.ibmat];
        proc_control_B.Ns += 20;
      }

      proc_control_DW.obj_f.gainsList[1] = 11.0;
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_f.gainsList[proc_control_B.Ns + 21] =
          proc_control_B.mpcParams_l.gains.c11.OV[proc_control_B.ibmat];
        proc_control_B.Ns += 20;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_f.gainsList[proc_control_B.Ns + 281] =
          proc_control_B.mpcParams_l.gains.c11.MV[proc_control_B.ibmat];
        proc_control_DW.obj_f.gainsList[proc_control_B.Ns + 441] =
          proc_control_B.mpcParams_l.gains.c11.MVR[proc_control_B.ibmat];
        proc_control_B.Ns += 20;
      }

      proc_control_DW.obj_f.gainsList[2] = 19.0;
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_f.gainsList[proc_control_B.Ns + 22] =
          proc_control_B.mpcParams_l.gains.c19.OV[proc_control_B.ibmat];
        proc_control_B.Ns += 20;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        proc_control_DW.obj_f.gainsList[proc_control_B.Ns + 282] =
          proc_control_B.mpcParams_l.gains.c19.MV[proc_control_B.ibmat];
        proc_control_DW.obj_f.gainsList[proc_control_B.Ns + 442] =
          proc_control_B.mpcParams_l.gains.c19.MVR[proc_control_B.ibmat];
        proc_control_B.Ns += 20;
      }

      proc_control_DW.obj_f.init = 1.0;
    }

    // Outputs for Atomic SubSystem: '<S121>/Subscribe1'
    //  Init function
    //       %% Fonction qui traite les gains recu via ros.
    if (proc_control_B.Merge) {
      if (proc_control_B.In1_o.OV_SL_Info.CurrentLength == 13U) {
        //  regarder la vaiditée des ov
        std::memcpy(&proc_control_DW.obj_f.rosOV[0], &proc_control_B.In1_o.OV[0],
                    13U * sizeof(real_T));
      }

      if (proc_control_B.In1_o.MV_SL_Info.CurrentLength == 8U) {
        //  regarder la vaiditée des mv
        std::memcpy(&proc_control_DW.obj_f.rosMV[0], &proc_control_B.In1_o.MV[0],
                    sizeof(real_T) << 3U);
      }

      if (proc_control_B.In1_o.MVR_SL_Info.CurrentLength == 8U) {
        //  regarder la vaiditée des mvr
        std::memcpy(&proc_control_DW.obj_f.rosMVR[0], &proc_control_B.In1_o.MVR
                    [0], sizeof(real_T) << 3U);
      }
    }

    // End of Outputs for SubSystem: '<S121>/Subscribe1'
    //  traiter les gains recu via ros.
    //         %% Fonction qui détermine les gain
    //  Vérifier si le mode existe
    for (proc_control_B.Ns = 0; proc_control_B.Ns < 20; proc_control_B.Ns++) {
      proc_control_B.corr[proc_control_B.Ns] =
        (proc_control_DW.obj_f.gainsList[proc_control_B.Ns] ==
         proc_control_B.mode);
    }

    if (proc_control_B.mode == 31) {
      //  Mode ros debug
      std::memcpy(&proc_control_B.K_dz[0], &proc_control_DW.obj_f.rosOV[0], 13U *
                  sizeof(real_T));
      std::memcpy(&proc_control_B.u_scale[0], &proc_control_DW.obj_f.rosMV[0],
                  sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.U_kv[0], &proc_control_DW.obj_f.rosMVR[0],
                  sizeof(real_T) << 3U);
    } else {
      proc_control_B.ibmat = proc_control_B.corr[0];
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 19;
           proc_control_B.idx_p++) {
        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S225>/Enable'

        // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
        //   EnablePort: '<S253>/Enable'

        proc_control_B.ibmat += proc_control_B.corr[proc_control_B.idx_p + 1];

        // End of Outputs for SubSystem: '<S250>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      if (proc_control_B.ibmat == 1) {
        //  mode existe et unique
        proc_control_B.idx_p = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_B.ibmat - 1 < 20)) {
          if (proc_control_B.corr[proc_control_B.ibmat - 1]) {
            proc_control_B.idx_p++;
            proc_control_B.ii_data_n[proc_control_B.idx_p - 1] =
              proc_control_B.ibmat;
            if (proc_control_B.idx_p >= 20) {
              exitg1 = true;
            } else {
              proc_control_B.ibmat++;
            }
          } else {
            proc_control_B.ibmat++;
          }
        }

        if (proc_control_B.idx_p < 1) {
          proc_control_B.idx_p = 0;
        }

        if (proc_control_B.idx_p - 1 >= 0) {
          std::memcpy(&proc_control_B.i_data[0], &proc_control_B.ii_data_n[0],
                      proc_control_B.idx_p * sizeof(int32_T));
        }

        proc_control_B.ibmat = proc_control_B.idx_p;
        if (proc_control_B.idx_p == 0) {
          proc_control_B.trajClear = 0.0;
        } else {
          proc_control_B.trajClear = proc_control_B.i_data[0];
          for (proc_control_B.idx_p = 2; proc_control_B.idx_p <=
               proc_control_B.ibmat; proc_control_B.idx_p++) {
            // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
            //   EnablePort: '<S1>/Enable'

            // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
            //   EnablePort: '<S225>/Enable'

            // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
            //   EnablePort: '<S253>/Enable'

            proc_control_B.trajClear += static_cast<real_T>
              (proc_control_B.i_data[proc_control_B.idx_p - 1]);

            // End of Outputs for SubSystem: '<S250>/Subsystem2'
            // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
            // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          }
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.K_dz[proc_control_B.Ns] =
            proc_control_DW.obj_f.gainsList[(((proc_control_B.Ns + 2) - 1) * 20
            + static_cast<int32_T>(proc_control_B.trajClear)) - 1];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.u_scale[proc_control_B.Ns] =
            proc_control_DW.obj_f.gainsList[(((proc_control_B.Ns + 15) - 1) * 20
            + static_cast<int32_T>(proc_control_B.trajClear)) - 1];
          proc_control_B.U_kv[proc_control_B.Ns] =
            proc_control_DW.obj_f.gainsList[(((proc_control_B.Ns + 23) - 1) * 20
            + static_cast<int32_T>(proc_control_B.trajClear)) - 1];
        }
      } else {
        //  mode non trouver. retourne defaut
        std::memcpy(&proc_control_B.K_dz[0],
                    &proc_control_B.mpcParams_l.gains.defaut.OV[0], 13U * sizeof
                    (real_T));
        std::memcpy(&proc_control_B.u_scale[0],
                    &proc_control_B.mpcParams_l.gains.defaut.MV[0], sizeof
                    (real_T) << 3U);
        std::memcpy(&proc_control_B.U_kv[0],
                    &proc_control_B.mpcParams_l.gains.defaut.MVR[0], sizeof
                    (real_T) << 3U);
      }
    }

    //   Ajust gain if loosing dvl
    proc_control_B.Product2_lm = 1.0 / std::sqrt(((proc_control_B.qS2W[0] *
      proc_control_B.qS2W[0] + proc_control_B.qS2W[1] * proc_control_B.qS2W[1])
      + proc_control_B.qS2W[2] * proc_control_B.qS2W[2]) + proc_control_B.qS2W[3]
      * proc_control_B.qS2W[3]);
    proc_control_B.n[0] = proc_control_B.qS2W[0] * proc_control_B.Product2_lm;
    proc_control_B.n[1] = proc_control_B.qS2W[1] * proc_control_B.Product2_lm;
    proc_control_B.n[2] = proc_control_B.qS2W[2] * proc_control_B.Product2_lm;
    proc_control_B.n[3] = proc_control_B.qS2W[3] * proc_control_B.Product2_lm;
    proc_control_B.t_f = (proc_control_B.n[1] * proc_control_B.n[3] -
                          proc_control_B.n[0] * proc_control_B.n[2]) * -2.0;
    proc_control_B.newPressureMsg = (proc_control_B.t_f >= 0.99999999999999778);
    proc_control_B.mask2 = (proc_control_B.t_f <= -0.99999999999999778);
    if (proc_control_B.t_f >= 0.99999999999999778) {
      proc_control_B.t_f = 1.0;
    }

    proc_control_B.i = 0;
    if (proc_control_B.mask2) {
      proc_control_B.t_f = -1.0;
    }

    proc_control_B.xtmp = proc_control_B.n[0] * proc_control_B.n[0];
    proc_control_B.Product2_lm = proc_control_B.n[1] * proc_control_B.n[1];
    proc_control_B.t4 = proc_control_B.n[2] * proc_control_B.n[2];
    proc_control_B.d = proc_control_B.n[3] * proc_control_B.n[3];
    proc_control_B.sincos_o2[0] = rt_atan2d_snf((proc_control_B.n[1] *
      proc_control_B.n[2] + proc_control_B.n[0] * proc_control_B.n[3]) * 2.0,
      ((proc_control_B.xtmp + proc_control_B.Product2_lm) - proc_control_B.t4) -
      proc_control_B.d);
    proc_control_B.sincos_o2[1] = std::asin(proc_control_B.t_f);
    proc_control_B.sincos_o2[2] = rt_atan2d_snf((proc_control_B.n[2] *
      proc_control_B.n[3] + proc_control_B.n[0] * proc_control_B.n[1]) * 2.0,
      ((proc_control_B.xtmp - proc_control_B.Product2_lm) - proc_control_B.t4) +
      proc_control_B.d);
    if (proc_control_B.newPressureMsg || proc_control_B.mask2) {
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 1;
           proc_control_B.idx_p++) {
        proc_control_B.i++;
      }
    }

    proc_control_B.Ns_d = proc_control_B.i;
    proc_control_B.b_x_size_k = proc_control_B.i;
    if (proc_control_B.i - 1 >= 0) {
      proc_control_B.b_x_data_c = proc_control_B.t_f;
    }

    proc_control_B.ibmat = proc_control_B.i - 1;
    for (proc_control_B.idx_p = 0; proc_control_B.idx_p <= proc_control_B.ibmat;
         proc_control_B.idx_p++) {
      proc_control_B.xtmp = proc_control_B.b_x_data_c;
      if (!std::isnan(proc_control_B.b_x_data_c)) {
        if (proc_control_B.b_x_data_c < 0.0) {
          proc_control_B.xtmp = -1.0;
        } else {
          proc_control_B.xtmp = (proc_control_B.b_x_data_c > 0.0);
        }
      }

      proc_control_B.b_x_data_c = proc_control_B.xtmp;
    }

    proc_control_B.idx_p = 0;
    if (proc_control_B.newPressureMsg || proc_control_B.mask2) {
      for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
        proc_control_B.idx_p++;
      }
    }

    proc_control_B.e_size = proc_control_B.idx_p;
    if (proc_control_B.idx_p - 1 >= 0) {
      proc_control_B.e_data = rt_atan2d_snf(proc_control_B.n[1],
        proc_control_B.n[0]);
    }

    if (proc_control_B.Ns_d != proc_control_B.idx_p) {
      proc_control_binary_expand_op(proc_control_B.sincos_o2,
        &proc_control_B.b_x_data_c, &proc_control_B.b_x_size_k,
        &proc_control_B.e_data, &proc_control_B.e_size);
    }

    proc_control_B.ibmat = 0;
    if (proc_control_B.newPressureMsg || proc_control_B.mask2) {
      for (proc_control_B.i = 0; proc_control_B.i < 1; proc_control_B.i++) {
        proc_control_B.ibmat++;
      }
    }

    if (proc_control_B.ibmat - 1 >= 0) {
      proc_control_B.sincos_o2[2] = 0.0;
    }

    if ((std::abs(proc_control_B.sincos_o2[1]) > 0.3490658503988659) || (std::
         abs(proc_control_B.sincos_o2[2]) > 0.3490658503988659)) {
      //  If roll pitch exeed 20deg
      std::memcpy(&proc_control_B.u_scale[0],
                  &proc_control_B.mpcParams_l.gains.noDvl.MV[0], sizeof(real_T) <<
                  3U);
    }

    //  Avoir les gains selon le mode
    std::memcpy(&proc_control_B.readCurrent[0], &proc_control_B.In1_f.Data[0],
                sizeof(real_T) << 7U);

    // Outputs for Atomic SubSystem: '<S121>/Subscribe'
    //         %% Fonction qui vérifie l'états des moteurs.
    if (proc_control_B.NewDvlMsg) {
      proc_control_B.readCurrent[7] = 0.0;

      //  regarder si le courant est en dessou du seuil
      //  Rénitialiser le compteur si thruster est bon
      //  Aditionner les échantillion défectueux
      //  Condition qui vérifie si les thruster sont defectueux
      //  rajouter des moteur défecteux
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.Merge = (proc_control_B.readCurrent[proc_control_B.Ns] <
          static_cast<uint16_T>(static_cast<int32_T>(std::round
          (static_cast<real_T>(proc_control_DW.Delay_DSTATE_g[proc_control_B.Ns])
           * 0.1))));
        proc_control_DW.obj_f.currentFaultCount[proc_control_B.Ns] *=
          static_cast<real_T>(proc_control_B.Merge);
        proc_control_DW.obj_f.currentFaultCount[proc_control_B.Ns] +=
          static_cast<real_T>(proc_control_B.Merge);
        proc_control_DW.obj_f.isThrusterFault[proc_control_B.Ns] =
          ((proc_control_DW.obj_f.currentFaultCount[proc_control_B.Ns] >= 20.0)
           + proc_control_DW.obj_f.isThrusterFault[proc_control_B.Ns] != 0);
      }
    }

    // End of Outputs for SubSystem: '<S121>/Subscribe'
    //  Vérifier l'etats des thrusters
    //         %% Fonction qui applique la saturation des moteurs
    //  Enlever les thrusters defectueux
    //       %% Fonction qui prend la decision de kill le sub
    for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
      proc_control_B.i =
        !proc_control_DW.obj_f.isThrusterFault[proc_control_B.Ns];

      // MATLABSystem: '<S121>/MPC manager'
      proc_control_B.mvmin[proc_control_B.Ns] =
        proc_control_B.mpcParams_l.gains.tmin * static_cast<real_T>
        (proc_control_B.i);

      // MATLABSystem: '<S121>/MPC manager'
      proc_control_B.mvmax[proc_control_B.Ns] =
        proc_control_B.mpcParams_l.gains.tmax * static_cast<real_T>
        (proc_control_B.i);
    }

    std::memcpy(&proc_control_B.ywt[0], &proc_control_B.K_dz[0], 13U * sizeof
                (real_T));
    for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
      // MATLABSystem: '<S121>/MPC manager'
      proc_control_B.mvwt[proc_control_B.Ns] =
        proc_control_B.u_scale[proc_control_B.Ns];

      // MATLABSystem: '<S121>/MPC manager'
      proc_control_B.dmwwt[proc_control_B.Ns] =
        proc_control_B.U_kv[proc_control_B.Ns];

      // MATLABSystem: '<S121>/MPC manager'
      proc_control_B.thrustersStatus[proc_control_B.Ns] =
        !proc_control_DW.obj_f.isThrusterFault[proc_control_B.Ns];
    }

    proc_control_B.p = proc_control_B.mpcParams_l.gains.p;
    proc_control_B.m = proc_control_B.mpcParams_l.gains.m;

    // End of If: '<S7>/If'
    // End of Outputs for SubSystem: '<S7>/MPC manager'

    // SwitchCase: '<S120>/Switch Case' incorporates:
    //   Gain: '<S130>/u_scale'
    //   MATLAB Function: '<S158>/VariableHorizonOptimizer'
    //   MATLAB Function: '<S192>/FixedHorizonOptimizer'
    //   Memory: '<S164>/Memory'

    proc_control_B.rtPrevAction = proc_control_DW.SwitchCase_ActiveSubsystem_l;
    switch (proc_control_B.mode) {
     case 10:
     case 11:
     case 19:
     case 31:
      proc_control_B.rtAction = 0;
      break;

     case 20:
     case 21:
      proc_control_B.rtAction = 1;
      break;

     case 30:
      proc_control_B.rtAction = 2;
      break;

     case 40:
      proc_control_B.rtAction = 3;
      break;

     default:
      proc_control_B.rtAction = 4;
      break;
    }

    proc_control_DW.SwitchCase_ActiveSubsystem_l = proc_control_B.rtAction;
    switch (proc_control_B.rtAction) {
     case 0:
      if (proc_control_B.rtAction != proc_control_B.rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S123>/Action Port'

        // InitializeConditions for SwitchCase: '<S120>/Switch Case' incorporates:
        //   Delay: '<S123>/Delay1'
        //   DiscretePulseGenerator: '<S123>/Pulse Generator'
        //   Memory: '<S130>/Memory'
        //   UnitDelay: '<S130>/last_mv'

        std::memcpy(&proc_control_DW.Memory_PreviousInput_g[0],
                    &proc_control_P.Memory_InitialCondition[0], 226U * sizeof
                    (boolean_T));
        std::memcpy(&proc_control_DW.last_mv_DSTATE_f[0],
                    &proc_control_P.last_mv_InitialCondition[0], sizeof(real_T) <<
                    3U);
        std::memcpy(&proc_control_DW.Delay1_DSTATE_e[0],
                    &proc_control_P.Delay1_InitialCondition[0], sizeof(real_T) <<
                    3U);
        proc_control_DW.clockTickCounter_j = 0;

        // End of InitializeConditions for SubSystem: '<S120>/Adaptive MPC quaternion ' 

        // SystemReset for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S123>/Action Port'

        // SystemReset for SwitchCase: '<S120>/Switch Case' incorporates:
        //   MATLABSystem: '<S123>/MATLAB System'

        //  reset  fonction
        // ------------------------------------------------------------------------------ 
        //  Initialize / reset discrete-state properties
        proc_control_DW.obj_b.qkm[0] = 1.0;
        proc_control_DW.obj_b.qkt[0] = 1.0;
        proc_control_DW.obj_b.qkm[1] = 0.0;
        proc_control_DW.obj_b.qkt[1] = 0.0;
        proc_control_DW.obj_b.qkm[2] = 0.0;
        proc_control_DW.obj_b.qkt[2] = 0.0;
        proc_control_DW.obj_b.qkm[3] = 0.0;
        proc_control_DW.obj_b.qkt[3] = 0.0;
        std::memcpy(&proc_control_DW.obj_b.xl[0], &tmp_0[0], 13U * sizeof(real_T));
        std::memset(&proc_control_DW.obj_b.constValues[0], 0, 38U * sizeof
                    (real_T));
        proc_control_DW.obj_b.init = false;

        //  initialize matrix size
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 169; proc_control_B.Ns++)
        {
          proc_control_DW.obj_b.C[proc_control_B.Ns] = c[proc_control_B.Ns];
        }

        std::memset(&proc_control_DW.obj_b.D[0], 0, 104U * sizeof(real_T));
        std::memset(&proc_control_DW.obj_b.Bc[0], 0, 104U * sizeof(real_T));

        // End of SystemReset for SwitchCase: '<S120>/Switch Case'
        // End of SystemReset for SubSystem: '<S120>/Adaptive MPC quaternion '
      }

      // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S123>/Action Port'

      // SignalConversion generated from: '<S123>/MATLAB System'
      proc_control_B.TmpSignalConversionAtMAT_lt[0] =
        proc_control_B.WorldPosition[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[1] =
        proc_control_B.WorldPosition[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[2] =
        proc_control_B.WorldPosition[2];
      proc_control_B.TmpSignalConversionAtMAT_lt[7] =
        proc_control_B.BodyVelocity[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[10] =
        proc_control_B.AngularRate[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[8] =
        proc_control_B.BodyVelocity[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[11] =
        proc_control_B.AngularRate[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[9] =
        proc_control_B.BodyVelocity[2];
      proc_control_B.TmpSignalConversionAtMAT_lt[12] =
        proc_control_B.AngularRate[2];

      // MATLABSystem: '<S123>/MATLAB System' incorporates:
      //   BusCreator: '<S311>/Bus Creator'
      //   Delay: '<S123>/Delay1'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   If: '<S10>/If'
      //   MATLABSystem: '<S290>/MATLAB System1'
      //   MATLABSystem: '<S311>/MATLAB System11'
      //   MATLABSystem: '<S311>/MATLAB System3'
      //   MATLABSystem: '<S311>/MATLAB System6'
      //   Merge generated from: '<S9>/Merge'
      //   SignalConversion generated from: '<S123>/MATLAB System'
      //   SwitchCase: '<S9>/Switch Case'

      //  Step fonction
      // ------------------------------------------------------------------------------ 
      //  check if block need to be init
      //  fonction qui initialise les constante mec
      // ------------------------------------------------------------------------------ 
      if (!proc_control_DW.obj_b.init) {
        proc_control_DW.obj_b.constValues[0] = proc_control_B.BusCreator.mass;
        proc_control_DW.obj_b.constValues[1] = proc_control_B.BusCreator.volume;
        proc_control_DW.obj_b.constValues[2] =
          proc_control_B.BusCreator.sub_height;
        std::memcpy(&proc_control_DW.obj_b.constValues[3],
                    &proc_control_B.BusCreator.I[0], 9U * sizeof(real_T));
        proc_control_DW.obj_b.constValues[12] = proc_control_B.BusCreator.rg[0];
        proc_control_DW.obj_b.constValues[15] = proc_control_B.BusCreator.rb[0];
        proc_control_DW.obj_b.constValues[13] = proc_control_B.BusCreator.rg[1];
        proc_control_DW.obj_b.constValues[16] = proc_control_B.BusCreator.rb[1];
        proc_control_DW.obj_b.constValues[14] = proc_control_B.BusCreator.rg[2];
        proc_control_DW.obj_b.constValues[17] = proc_control_B.BusCreator.rb[2];
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_b.constValues[proc_control_B.Ns + 18] =
            proc_control_B.BusCreator.cdl[proc_control_B.Ns];
          proc_control_DW.obj_b.constValues[proc_control_B.Ns + 24] =
            proc_control_B.BusCreator.cdq[proc_control_B.Ns];
          proc_control_DW.obj_b.constValues[proc_control_B.Ns + 30] =
            proc_control_B.BusCreator.added_mass[proc_control_B.Ns];
        }

        proc_control_DW.obj_b.constValues[36] = proc_control_B.BusCreator.rho;
        proc_control_DW.obj_b.constValues[37] = proc_control_B.BusCreator.g;

        // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
        //   ActionPort: '<S308>/Action Port'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S290>/Action Port'

        //  Fonction qui genere la matrice B
        // ------------------------------------------------------------------------------ 
        //  Crée la matrice thrusters
        proc_control_B.Ns_d = 0;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
             proc_control_B.ibmat++) {
          // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
          //   ActionPort: '<S308>/Action Port'

          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S290>/Action Port'

          proc_control_B.t65 =
            proc_control_B.BusCreator.thrusters[proc_control_B.ibmat + 24] *
            0.017453292519943295 / 2.0;

          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
          proc_control_B.sincos_o2[0] = proc_control_B.t65;
          proc_control_B.sincos_o1_d[0] = proc_control_B.t65;

          // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
          //   ActionPort: '<S308>/Action Port'

          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S290>/Action Port'

          proc_control_B.t65 =
            proc_control_B.BusCreator.thrusters[proc_control_B.ibmat + 32] *
            0.017453292519943295 / 2.0;

          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
          proc_control_B.sincos_o2[1] = proc_control_B.t65;
          proc_control_B.sincos_o1_d[1] = proc_control_B.t65;

          // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
          //   ActionPort: '<S308>/Action Port'

          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S290>/Action Port'

          proc_control_B.t65 =
            proc_control_B.BusCreator.thrusters[proc_control_B.ibmat + 40] *
            0.017453292519943295 / 2.0;

          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
          proc_control_B.sincos_o2[0] = std::cos(proc_control_B.sincos_o2[0]);
          proc_control_B.sincos_o1_d[0] = std::sin(proc_control_B.sincos_o1_d[0]);
          proc_control_B.sincos_o2[1] = std::cos(proc_control_B.sincos_o2[1]);
          proc_control_B.sincos_o1_d[1] = std::sin(proc_control_B.sincos_o1_d[1]);
          proc_control_B.sincos_o2[2] = std::cos(proc_control_B.t65);
          proc_control_B.sincos_o1_d[2] = std::sin(proc_control_B.t65);
          proc_control_B.xtmp = proc_control_B.sincos_o2[0] *
            proc_control_B.sincos_o2[1];
          proc_control_B.Product2_lm = proc_control_B.sincos_o1_d[0] *
            proc_control_B.sincos_o1_d[1];
          proc_control_B.Product_n = proc_control_B.xtmp *
            proc_control_B.sincos_o2[2] + proc_control_B.Product2_lm *
            proc_control_B.sincos_o1_d[2];
          proc_control_B.rq_idx_1 = proc_control_B.xtmp *
            proc_control_B.sincos_o1_d[2] - proc_control_B.Product2_lm *
            proc_control_B.sincos_o2[2];
          proc_control_B.xtmp = proc_control_B.sincos_o1_d[0] *
            proc_control_B.sincos_o2[1];
          proc_control_B.Product2_lm = proc_control_B.sincos_o2[0] *
            proc_control_B.sincos_o1_d[1];
          proc_control_B.rq_idx_2 = proc_control_B.Product2_lm *
            proc_control_B.sincos_o2[2] + proc_control_B.xtmp *
            proc_control_B.sincos_o1_d[2];
          proc_control_B.Product3_pv = proc_control_B.xtmp *
            proc_control_B.sincos_o2[2] - proc_control_B.Product2_lm *
            proc_control_B.sincos_o1_d[2];

          //  convertir les angle d'euler en uaternion
          // ThrusterVector
          //     Tt = ThrusterVector(IN1,IN2,IN3)
          //     This function was generated by the Symbolic Math Toolbox version 9.1. 
          //     12-Jul-2022 16:58:54
          proc_control_B.trajClear = proc_control_B.rq_idx_2 *
            proc_control_B.Product3_pv * 2.0;
          proc_control_B.Product2_lm = proc_control_B.Product_n *
            proc_control_B.rq_idx_1 * 2.0;

          // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
          //   ActionPort: '<S308>/Action Port'

          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S290>/Action Port'

          proc_control_B.t14 = proc_control_B.BusCreator.rg[0] +
            -proc_control_B.BusCreator.thrusters[proc_control_B.ibmat];
          proc_control_B.t15 =
            -proc_control_B.BusCreator.thrusters[proc_control_B.ibmat + 8] +
            proc_control_B.BusCreator.rg[1];
          proc_control_B.t16 =
            -proc_control_B.BusCreator.thrusters[proc_control_B.ibmat + 16] +
            proc_control_B.BusCreator.rg[2];

          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
          proc_control_B.t17 = proc_control_B.rq_idx_1 *
            proc_control_B.Product3_pv * 2.0 + proc_control_B.Product_n *
            proc_control_B.rq_idx_2 * 2.0;
          proc_control_B.t18 = proc_control_B.trajClear +
            -proc_control_B.Product2_lm;
          proc_control_B.linearScaling = (proc_control_B.rq_idx_1 *
            proc_control_B.rq_idx_1 * 2.0 + proc_control_B.rq_idx_2 *
            proc_control_B.rq_idx_2 * 2.0) - 1.0;

          // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
          //   ActionPort: '<S308>/Action Port'

          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S290>/Action Port'

          proc_control_B.Tm[proc_control_B.Ns_d] = -proc_control_B.t17;
          proc_control_B.Tm[proc_control_B.Ns_d + 1] = -proc_control_B.trajClear
            + proc_control_B.Product2_lm;
          proc_control_B.Tm[proc_control_B.Ns_d + 2] =
            proc_control_B.linearScaling;
          proc_control_B.Tm[proc_control_B.Ns_d + 3] = -proc_control_B.t15 *
            proc_control_B.linearScaling - proc_control_B.t16 *
            proc_control_B.t18;
          proc_control_B.Tm[proc_control_B.Ns_d + 4] = proc_control_B.t14 *
            proc_control_B.linearScaling + proc_control_B.t16 *
            proc_control_B.t17;
          proc_control_B.Tm[proc_control_B.Ns_d + 5] = proc_control_B.t14 *
            proc_control_B.t18 - proc_control_B.t15 * proc_control_B.t17;

          //  Calculer le vecteur thrusters
          proc_control_B.Ns_d += 6;

          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
        }

        //  prendre la matrice M
        // AUVModelMatrices
        //     [M,C,D,Gq] = AUVModelMatrices(IN1,IN2)
        //     This function was generated by the Symbolic Math Toolbox version 9.1. 
        //     12-Jul-2022 16:58:53
        proc_control_B.xtmp = proc_control_DW.obj_b.constValues[0] *
          proc_control_DW.obj_b.constValues[12];
        proc_control_B.t14 = proc_control_DW.obj_b.constValues[0] *
          proc_control_DW.obj_b.constValues[13];
        proc_control_B.t15 = proc_control_DW.obj_b.constValues[0] *
          proc_control_DW.obj_b.constValues[14];

        //  M inverse * Tm
        proc_control_B.b_newCoefs[0] = -proc_control_DW.obj_b.constValues[30] +
          proc_control_DW.obj_b.constValues[0];
        proc_control_B.b_newCoefs[1] = 0.0;
        proc_control_B.b_newCoefs[2] = 0.0;
        proc_control_B.b_newCoefs[3] = 0.0;
        proc_control_B.b_newCoefs[4] = proc_control_B.t15;
        proc_control_B.b_newCoefs[5] = -proc_control_B.t14;
        proc_control_B.b_newCoefs[6] = 0.0;
        proc_control_B.b_newCoefs[7] = -proc_control_DW.obj_b.constValues[31] +
          proc_control_DW.obj_b.constValues[0];
        proc_control_B.b_newCoefs[8] = 0.0;
        proc_control_B.b_newCoefs[9] = -proc_control_B.t15;
        proc_control_B.b_newCoefs[10] = 0.0;
        proc_control_B.b_newCoefs[11] = proc_control_B.xtmp;
        proc_control_B.b_newCoefs[12] = 0.0;
        proc_control_B.b_newCoefs[13] = 0.0;
        proc_control_B.b_newCoefs[14] = -proc_control_DW.obj_b.constValues[32] +
          proc_control_DW.obj_b.constValues[0];
        proc_control_B.b_newCoefs[15] = proc_control_B.t14;
        proc_control_B.b_newCoefs[16] = -proc_control_B.xtmp;
        proc_control_B.b_newCoefs[17] = 0.0;
        proc_control_B.b_newCoefs[18] = 0.0;
        proc_control_B.b_newCoefs[19] = -proc_control_B.t15;
        proc_control_B.b_newCoefs[20] = proc_control_B.t14;
        proc_control_B.b_newCoefs[21] = proc_control_DW.obj_b.constValues[3] -
          proc_control_DW.obj_b.constValues[33];
        proc_control_B.b_newCoefs[22] = proc_control_DW.obj_b.constValues[6];
        proc_control_B.b_newCoefs[23] = proc_control_DW.obj_b.constValues[9];
        proc_control_B.b_newCoefs[24] = proc_control_B.t15;
        proc_control_B.b_newCoefs[25] = 0.0;
        proc_control_B.b_newCoefs[26] = -proc_control_B.xtmp;
        proc_control_B.b_newCoefs[27] = proc_control_DW.obj_b.constValues[4];
        proc_control_B.b_newCoefs[28] = proc_control_DW.obj_b.constValues[7] -
          proc_control_DW.obj_b.constValues[34];
        proc_control_B.b_newCoefs[29] = proc_control_DW.obj_b.constValues[10];
        proc_control_B.b_newCoefs[30] = -proc_control_B.t14;
        proc_control_B.b_newCoefs[31] = proc_control_B.xtmp;
        proc_control_B.b_newCoefs[32] = 0.0;
        proc_control_B.b_newCoefs[33] = proc_control_DW.obj_b.constValues[5];
        proc_control_B.b_newCoefs[34] = proc_control_DW.obj_b.constValues[8];
        proc_control_B.b_newCoefs[35] = proc_control_DW.obj_b.constValues[11] -
          proc_control_DW.obj_b.constValues[35];
        proc_control_mldivide(proc_control_B.b_newCoefs, proc_control_B.Tm,
                              proc_control_B.dv11);
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
             proc_control_B.ibmat++) {
          for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 7;
               proc_control_B.idx_p++) {
            proc_control_DW.obj_b.Bc[proc_control_B.idx_p + proc_control_B.Ns] =
              0.0;
          }

          proc_control_B.Ns += 13;
        }

        proc_control_B.Ns = 0;
        proc_control_B.idx_p = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
             proc_control_B.ibmat++) {
          for (proc_control_B.st_Value_size_idx_1 = 0;
               proc_control_B.st_Value_size_idx_1 < 6;
               proc_control_B.st_Value_size_idx_1++) {
            proc_control_DW.obj_b.Bc[(proc_control_B.st_Value_size_idx_1 +
              proc_control_B.Ns) + 7] =
              proc_control_B.dv11[proc_control_B.st_Value_size_idx_1 +
              proc_control_B.idx_p];
          }

          proc_control_B.Ns += 13;
          proc_control_B.idx_p += 6;
        }

        proc_control_DW.obj_b.init = true;
      }

      //  Regarder la discontinuité entre le qk et qk-1 pour la mesure
      // =================================================================
      //  Fonction qui assure la continuité entre 2 quaternions
      //  Regarder la discontinuité entre le qk et qk-1
      proc_control_B.Product_n = proc_control_B.qS2W[0];
      proc_control_B.rq_idx_1 = proc_control_B.qS2W[1];
      proc_control_B.rq_idx_2 = proc_control_B.qS2W[2];
      proc_control_B.Product3_pv = proc_control_B.qS2W[3];
      if (((proc_control_DW.obj_b.qkm[0] * proc_control_B.qS2W[0] +
            proc_control_DW.obj_b.qkm[1] * proc_control_B.qS2W[1]) +
           proc_control_DW.obj_b.qkm[2] * proc_control_B.qS2W[2]) +
          proc_control_DW.obj_b.qkm[3] * proc_control_B.qS2W[3] < 0.0) {
        proc_control_B.Product_n = -proc_control_B.qS2W[0];
        proc_control_B.rq_idx_1 = -proc_control_B.qS2W[1];
        proc_control_B.rq_idx_2 = -proc_control_B.qS2W[2];
        proc_control_B.Product3_pv = -proc_control_B.qS2W[3];
      }

      proc_control_B.TmpSignalConversionAtMAT_lt[3] = proc_control_B.Product_n;
      proc_control_DW.obj_b.qkm[0] = proc_control_B.Product_n;
      proc_control_B.TmpSignalConversionAtMAT_lt[4] = proc_control_B.rq_idx_1;
      proc_control_DW.obj_b.qkm[1] = proc_control_B.rq_idx_1;
      proc_control_B.TmpSignalConversionAtMAT_lt[5] = proc_control_B.rq_idx_2;
      proc_control_DW.obj_b.qkm[2] = proc_control_B.rq_idx_2;
      proc_control_B.TmpSignalConversionAtMAT_lt[6] = proc_control_B.Product3_pv;
      proc_control_DW.obj_b.qkm[3] = proc_control_B.Product3_pv;

      //  Regarder la discontinuité entre le qk et qk + p pour la trajectoire
      std::memcpy(&proc_control_B.y_j[0], &proc_control_B.Reference[0], 130U *
                  sizeof(real_T));

      //  Fonction qui regarde la discontinuiter entre 2 generations du planner
      // ------------------------------------------------------------------------------ 
      //  check fist ref
      // =================================================================
      //  Fonction qui assure la continuité entre 2 quaternions
      //  Regarder la discontinuité entre le qk et qk-1
      proc_control_B.y_j[30] = proc_control_B.Reference[30];
      proc_control_B.y_j[40] = proc_control_B.Reference[40];
      proc_control_B.y_j[50] = proc_control_B.Reference[50];
      proc_control_B.y_j[60] = proc_control_B.Reference[60];
      if (((proc_control_DW.obj_b.qkt[0] * proc_control_B.Reference[30] +
            proc_control_DW.obj_b.qkt[1] * proc_control_B.Reference[40]) +
           proc_control_DW.obj_b.qkt[2] * proc_control_B.Reference[50]) +
          proc_control_DW.obj_b.qkt[3] * proc_control_B.Reference[60] < 0.0) {
        proc_control_B.y_j[30] = -proc_control_B.Reference[30];
        proc_control_B.y_j[40] = -proc_control_B.Reference[40];
        proc_control_B.y_j[50] = -proc_control_B.Reference[50];
        proc_control_B.y_j[60] = -proc_control_B.Reference[60];
      }

      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
           proc_control_B.ibmat++) {
        // =================================================================
        //  Fonction qui assure la continuité entre 2 quaternions
        //  Regarder la discontinuité entre le qk et qk-1
        proc_control_B.Product_n = proc_control_B.y_j[proc_control_B.ibmat + 31];
        proc_control_B.rq_idx_1 = proc_control_B.y_j[proc_control_B.ibmat + 41];
        proc_control_B.rq_idx_2 = proc_control_B.y_j[proc_control_B.ibmat + 51];
        proc_control_B.Product3_pv = proc_control_B.y_j[proc_control_B.ibmat +
          61];
        if (((proc_control_B.y_j[proc_control_B.ibmat + 30] *
              proc_control_B.Product_n + proc_control_B.y_j[proc_control_B.ibmat
              + 40] * proc_control_B.rq_idx_1) +
             proc_control_B.y_j[proc_control_B.ibmat + 50] *
             proc_control_B.rq_idx_2) + proc_control_B.y_j[proc_control_B.ibmat
            + 60] * proc_control_B.Product3_pv < 0.0) {
          proc_control_B.Product_n = -proc_control_B.Product_n;
          proc_control_B.rq_idx_1 = -proc_control_B.rq_idx_1;
          proc_control_B.rq_idx_2 = -proc_control_B.rq_idx_2;
          proc_control_B.Product3_pv = -proc_control_B.Product3_pv;
        }

        proc_control_B.y_j[proc_control_B.ibmat + 31] = proc_control_B.Product_n;
        proc_control_B.y_j[proc_control_B.ibmat + 41] = proc_control_B.rq_idx_1;
        proc_control_B.y_j[proc_control_B.ibmat + 51] = proc_control_B.rq_idx_2;
        proc_control_B.y_j[proc_control_B.ibmat + 61] =
          proc_control_B.Product3_pv;
      }

      //  save quat for next step
      proc_control_DW.obj_b.qkt[0] = proc_control_B.y_j[30];
      proc_control_DW.obj_b.qkt[1] = proc_control_B.y_j[40];
      proc_control_DW.obj_b.qkt[2] = proc_control_B.y_j[50];
      proc_control_DW.obj_b.qkt[3] = proc_control_B.y_j[60];

      //  Calculer le residue de mesure
      //  Linéariser le systeme.
      //  Fonction qui linéarise le systeme
      // ------------------------------------------------------------------------------ 
      proc_cont_AUVQuatJacobianMatrix(proc_control_B.TmpSignalConversionAtMAT_lt,
        proc_control_DW.obj_b.constValues, proc_control_B.A_l);

      //  Discrétiser le système.
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 169; proc_control_B.Ns++)
      {
        proc_control_B.A_m[proc_control_B.Ns] =
          proc_control_B.A_l[proc_control_B.Ns] * 0.1;
      }

      proc_control_expm(proc_control_B.A_m, proc_control_B.b_A_m);

      //  Fossen Eq B.10/B.9 page 662
      std::memset(&proc_control_B.b_newCoefs[0], 0, 36U * sizeof(real_T));
      proc_control_B.Ns = 0;
      for (proc_control_B.b_k = 0; proc_control_B.b_k < 6; proc_control_B.b_k++)
      {
        proc_control_B.b_newCoefs[proc_control_B.Ns] = 1.0;
        proc_control_B.Ns += 7;
      }

      //  Fossen Eq B.11 p 662
      //  Calculer F(x(k),u(k))
      //  Intégration trapezoidale
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        proc_control_B.K_dz[proc_control_B.i] =
          proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.i];
        proc_control_B.z_g[proc_control_B.i] = 0.0;
      }

      for (proc_control_B.i = 0; proc_control_B.i < 10; proc_control_B.i++) {
        proc_control_AUV8QuatSimFcn(proc_control_B.K_dz,
          proc_control_DW.Delay1_DSTATE_e, proc_control_B.imz);
        for (proc_control_B.Ns_d = 0; proc_control_B.Ns_d < 13;
             proc_control_B.Ns_d++) {
          proc_control_B.xtmp = proc_control_B.imz[proc_control_B.Ns_d];
          proc_control_B.K_dz[proc_control_B.Ns_d] += (proc_control_B.xtmp +
            proc_control_B.z_g[proc_control_B.Ns_d]) * 0.01 / 2.0;
          proc_control_B.z_g[proc_control_B.Ns_d] = proc_control_B.xtmp;
        }

        //  correct Quaternion
        // =================================================================
        //  Fonction qui normalise un quaternion.
        //  quatnormalize de matlab demande areospace block set pour etre compilable. 
        //  Fossen(2021) eq 2.86 p.37
        proc_control_B.AngularRate_a_idx_1 = proc_control_norm_pr
          (&proc_control_B.K_dz[3]);
        proc_control_B.K_dz[3] /= proc_control_B.AngularRate_a_idx_1;
        proc_control_B.K_dz[4] /= proc_control_B.AngularRate_a_idx_1;
        proc_control_B.K_dz[5] /= proc_control_B.AngularRate_a_idx_1;
        proc_control_B.K_dz[6] /= proc_control_B.AngularRate_a_idx_1;
      }

      //  Nominal conditions for discrete-time plant
      // (Cc*x + Dc*u).';
      //  save prediction for next step
      std::memcpy(&proc_control_DW.obj_b.xl[0], &proc_control_B.K_dz[0], 13U *
                  sizeof(real_T));

      // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
      proc_control_emxInit_real_T(&Bu, 3);

      // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S123>/Action Port'

      // MATLAB Function: '<S158>/VariableHorizonOptimizer' incorporates:
      //   Rounding: '<S130>/Floor'

      proc_control_B.Ns_d = static_cast<int32_T>(std::floor(proc_control_B.p));
      proc_control_B.i = Bu->size[0] * Bu->size[1] * Bu->size[2];

      // MATLAB Function: '<S158>/VariableHorizonOptimizer'
      Bu->size[0] = 21;
      Bu->size[1] = 8;
      Bu->size[2] = proc_control_B.Ns_d + 1;
      proc_c_emxEnsureCapacity_real_T(Bu, proc_control_B.i);

      // MATLAB Function: '<S158>/VariableHorizonOptimizer'
      proc_control_B.st_Value_size_idx_1 = (proc_control_B.Ns_d + 1) * 168 - 1;
      if (proc_control_B.st_Value_size_idx_1 >= 0) {
        std::memset(&Bu->data[0], 0, (proc_control_B.st_Value_size_idx_1 + 1) *
                    sizeof(real_T));
      }

      // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
      proc_control_emxInit_real_T(&Bv, 3);

      // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S123>/Action Port'

      proc_control_B.i = Bv->size[0] * Bv->size[1] * Bv->size[2];

      // MATLAB Function: '<S158>/VariableHorizonOptimizer'
      Bv->size[0] = 21;
      Bv->size[1] = 1;
      Bv->size[2] = proc_control_B.Ns_d + 1;
      proc_c_emxEnsureCapacity_real_T(Bv, proc_control_B.i);

      // MATLAB Function: '<S158>/VariableHorizonOptimizer'
      proc_control_B.st_Value_size_idx_1 = (proc_control_B.Ns_d + 1) * 21 - 1;
      if (proc_control_B.st_Value_size_idx_1 >= 0) {
        std::memset(&Bv->data[0], 0, (proc_control_B.st_Value_size_idx_1 + 1) *
                    sizeof(real_T));
      }

      // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
      proc_control_emxInit_real_T(&Dv, 3);

      // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S123>/Action Port'

      proc_control_B.i = Dv->size[0] * Dv->size[1] * Dv->size[2];

      // MATLAB Function: '<S158>/VariableHorizonOptimizer'
      Dv->size[0] = 13;
      Dv->size[1] = 1;
      Dv->size[2] = proc_control_B.Ns_d + 1;
      proc_c_emxEnsureCapacity_real_T(Dv, proc_control_B.i);

      // MATLAB Function: '<S158>/VariableHorizonOptimizer'
      proc_control_B.st_Value_size_idx_1 = (proc_control_B.Ns_d + 1) * 13 - 1;
      if (proc_control_B.st_Value_size_idx_1 >= 0) {
        std::memset(&Dv->data[0], 0, (proc_control_B.st_Value_size_idx_1 + 1) *
                    sizeof(real_T));
      }

      // MATLAB Function: '<S158>/VariableHorizonOptimizer' incorporates:
      //   MATLABSystem: '<S123>/MATLAB System'

      std::memcpy(&proc_control_B.b_A_h[0], &b_0[0], 441U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_B[0], &c_0[0], 630U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 273; proc_control_B.Ns++)
      {
        proc_control_B.b_C_a[proc_control_B.Ns] = d_0[proc_control_B.Ns];
      }

      proc_control_B.Ns = 0;
      proc_control_B.ibmat = 0;
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 13;
           proc_control_B.idx_p++) {
        std::memcpy(&proc_control_B.b_C_a[proc_control_B.Ns],
                    &proc_control_DW.obj_b.C[proc_control_B.Ns], 13U * sizeof
                    (real_T));
        std::memcpy(&proc_control_B.b_A_h[proc_control_B.ibmat],
                    &proc_control_B.b_A_m[proc_control_B.Ns], 13U * sizeof
                    (real_T));
        proc_control_B.Ns += 13;
        proc_control_B.ibmat += 21;
      }

      // MATLABSystem: '<S123>/MATLAB System'
      proc_control_B.Ns = 0;
      proc_control_B.ibmat = 0;
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 6;
           proc_control_B.idx_p++) {
        for (proc_control_B.st_Value_size_idx_1 = 0;
             proc_control_B.st_Value_size_idx_1 < 6;
             proc_control_B.st_Value_size_idx_1++) {
          proc_control_B.i = (proc_control_B.st_Value_size_idx_1 +
                              proc_control_B.ibmat) + 98;
          proc_control_B.b_n = proc_control_B.st_Value_size_idx_1 +
            proc_control_B.Ns;
          proc_control_B.dCoefs[proc_control_B.b_n] =
            proc_control_B.A_l[proc_control_B.i];
          proc_control_B.b_A_p[proc_control_B.b_n] =
            proc_control_B.b_A_m[proc_control_B.i] -
            proc_control_B.b_newCoefs[proc_control_B.b_n];
        }

        proc_control_B.Ns += 6;
        proc_control_B.ibmat += 13;
      }

      proc_control_mldivide_p(proc_control_B.dCoefs, proc_control_B.b_A_p,
        proc_control_B.b_newCoefs);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
             proc_control_B.ibmat++) {
          proc_control_B.dv11[proc_control_B.ibmat + 6 * proc_control_B.Ns] =
            0.0;
        }

        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 6;
             proc_control_B.idx_p++) {
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
               proc_control_B.ibmat++) {
            proc_control_B.st_Value_size_idx_1 = 6 * proc_control_B.Ns +
              proc_control_B.ibmat;
            proc_control_B.dv11[proc_control_B.st_Value_size_idx_1] +=
              proc_control_DW.obj_b.Bc[(13 * proc_control_B.Ns +
              proc_control_B.idx_p) + 7] * proc_control_B.b_newCoefs[6 *
              proc_control_B.idx_p + proc_control_B.ibmat];
          }
        }

        // MATLAB Function: '<S158>/VariableHorizonOptimizer'
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
             proc_control_B.ibmat++) {
          proc_control_B.b_B[proc_control_B.ibmat + 21 * proc_control_B.Ns] =
            0.0;
        }

        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
             proc_control_B.ibmat++) {
          proc_control_B.b_B[(proc_control_B.ibmat + 21 * proc_control_B.Ns) + 7]
            = proc_control_B.dv11[6 * proc_control_B.Ns + proc_control_B.ibmat];
        }

        std::memcpy(&Bu->data[proc_control_B.Ns * 21],
                    &proc_control_B.b_B[proc_control_B.Ns * 21], 21U * sizeof
                    (real_T));
      }

      // MATLAB Function: '<S158>/VariableHorizonOptimizer' incorporates:
      //   Delay: '<S123>/Delay1'
      //   DiscretePulseGenerator: '<S127>/Pulse Generator'
      //   MATLABSystem: '<S123>/MATLAB System'

      std::memcpy(&Bv->data[0], &proc_control_B.b_B[168], 21U * sizeof(real_T));
      std::memset(&Dv->data[0], 0, 13U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_Mlim[0], &e[0], 226U * sizeof(real_T));
      std::memset(&proc_control_B.b_utarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_xoff[0], &f_0[0], 21U * sizeof(real_T));
      std::memcpy(&proc_control_B.U_kv[0], &proc_control_DW.Delay1_DSTATE_e[0],
                  sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.z_g[0],
                  &proc_control_B.TmpSignalConversionAtMAT_lt[0], 13U * sizeof
                  (real_T));
      std::memcpy(&proc_control_B.u_scale[0], &proc_control_DW.Delay1_DSTATE_e[0],
                  sizeof(real_T) << 3U);
      for (proc_control_B.i = 0; proc_control_B.i < 226; proc_control_B.i++) {
        proc_control_B.xtmp = proc_control_B.b_Mlim[proc_control_B.i];
        proc_control_B.b_Mrows = b_Mrows[proc_control_B.i];
        if (proc_control_B.b_Mrows <= 130) {
          proc_control_B.Ns = (proc_control_B.b_Mrows - div_nde_s32_floor
                               (proc_control_B.b_Mrows - 1, 13) * 13) - 1;
          proc_control_B.xtmp += old_yoff[proc_control_B.Ns] -
            proc_control_B.z_g[proc_control_B.Ns];
        } else if (proc_control_B.b_Mrows <= 260) {
          proc_control_B.Ns = (proc_control_B.b_Mrows - div_nde_s32_floor
                               (proc_control_B.b_Mrows - 131, 13) * 13) - 131;
          proc_control_B.xtmp -= old_yoff[proc_control_B.Ns] -
            proc_control_B.z_g[proc_control_B.Ns];
        } else if (proc_control_B.b_Mrows <= 340) {
          proc_control_B.xtmp += 0.0 - proc_control_B.U_kv
            [(proc_control_B.b_Mrows - (((proc_control_B.b_Mrows - 261) >> 3) <<
               3)) - 261];
        } else {
          proc_control_B.xtmp -= 0.0 -
            proc_control_B.U_kv[proc_control_B.b_Mrows - 341];
        }

        proc_control_B.b_Mlim[proc_control_B.i] = proc_control_B.xtmp;
      }

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.xtmp = proc_control_B.U_kv[proc_control_B.i];
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 10;
             proc_control_B.ibmat++) {
          proc_control_B.idx_p = proc_control_B.Ns + proc_control_B.i;
          proc_control_B.b_utarget[proc_control_B.idx_p] -= proc_control_B.xtmp;
          proc_control_B.Ns += 8;
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.xtmp =
          proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.Ns];
        proc_control_B.b_xoff[proc_control_B.Ns] = proc_control_B.xtmp;
        Bv->data[proc_control_B.Ns] = proc_control_B.K_dz[proc_control_B.Ns] -
          proc_control_B.xtmp;
      }

      // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
      proc_control_emxInit_real_T(&vseq, 1);

      // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S123>/Action Port'

      proc_control_B.i = vseq->size[0];

      // MATLAB Function: '<S158>/VariableHorizonOptimizer'
      vseq->size[0] = proc_control_B.Ns_d + 1;
      proc_c_emxEnsureCapacity_real_T(vseq, proc_control_B.i);
      if (proc_control_B.Ns_d >= 0) {
        std::memset(&vseq->data[0], 0, (proc_control_B.Ns_d + 1) * sizeof(real_T));
      }

      // MATLAB Function: '<S158>/VariableHorizonOptimizer'
      proc_control_B.ibmat = 0;
      while (proc_control_B.ibmat <= proc_control_B.Ns_d) {
        vseq->data[proc_control_B.ibmat] = 1.0;
        proc_control_B.ibmat++;
      }

      // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
      proc_control_emxInit_real_T(&rseq, 1);

      // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S123>/Action Port'

      proc_control_B.i = rseq->size[0];

      // MATLAB Function: '<S158>/VariableHorizonOptimizer'
      rseq->size[0] = proc_control_B.Ns_d * 13;
      proc_c_emxEnsureCapacity_real_T(rseq, proc_control_B.i);

      // MATLAB Function: '<S158>/VariableHorizonOptimizer'
      proc_control_B.st_Value_size_idx_1 = proc_control_B.Ns_d * 13;
      if (proc_control_B.st_Value_size_idx_1 - 1 >= 0) {
        std::memset(&rseq->data[0], 0, proc_control_B.st_Value_size_idx_1 *
                    sizeof(real_T));
      }

      // MATLAB Function: '<S158>/VariableHorizonOptimizer' incorporates:
      //   MATLABSystem: '<S123>/MATLAB System'

      if (proc_control_B.Ns_d >= 10) {
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
             proc_control_B.ibmat++) {
          for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 10;
               proc_control_B.idx_p++) {
            rseq->data[proc_control_B.ibmat + proc_control_B.idx_p * 13] =
              proc_control_B.y_j[10 * proc_control_B.ibmat +
              proc_control_B.idx_p] - proc_control_B.z_g[proc_control_B.ibmat];
          }

          proc_control_B.idx_p = 10;
          while (proc_control_B.idx_p <= proc_control_B.Ns_d - 1) {
            rseq->data[proc_control_B.ibmat + proc_control_B.idx_p * 13] =
              proc_control_B.y_j[10 * proc_control_B.ibmat + 9] -
              proc_control_B.z_g[proc_control_B.ibmat];
            proc_control_B.idx_p++;
          }
        }
      } else {
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 13;
             proc_control_B.idx_p++) {
          proc_control_B.i = 0;
          while (proc_control_B.i <= proc_control_B.Ns_d - 1) {
            rseq->data[proc_control_B.idx_p + proc_control_B.i * 13] =
              proc_control_B.y_j[10 * proc_control_B.idx_p + proc_control_B.i] -
              proc_control_B.z_g[proc_control_B.idx_p];
            proc_control_B.i++;
          }
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        // SignalConversion generated from: '<S159>/ SFunction ' incorporates:
        //   MATLAB Function: '<S158>/VariableHorizonOptimizer'
        //   MATLABSystem: '<S123>/MATLAB System'

        proc_control_B.rtb_TmpSignalConversionAtMAT__k[proc_control_B.Ns] =
          proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.Ns] -
          proc_control_B.b_xoff[proc_control_B.Ns];
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++) {
        // SignalConversion generated from: '<S159>/ SFunction ' incorporates:
        //   Constant: '<S123>/Constant'
        //   MATLAB Function: '<S158>/VariableHorizonOptimizer'

        proc_control_B.rtb_TmpSignalConversionAtMAT__k[proc_control_B.Ns + 13] =
          proc_control_P.Constant_Value_e3[proc_control_B.Ns] -
          proc_control_B.b_xoff[proc_control_B.Ns + 13];
      }

      // SignalConversion generated from: '<S159>/ SFunction ' incorporates:
      //   Constant: '<S123>/Constant1'
      //   MATLAB Function: '<S158>/VariableHorizonOptimizer'

      proc_control_B.rtb_TmpSignalConversionAtMAT__k[19] =
        proc_control_P.Constant1_Value_mt[0] - proc_control_B.b_xoff[19];
      proc_control_B.rtb_TmpSignalConversionAtMAT__k[20] =
        proc_control_P.Constant1_Value_mt[1] - proc_control_B.b_xoff[20];

      // MATLAB Function: '<S158>/VariableHorizonOptimizer' incorporates:
      //   UnitDelay: '<S130>/last_mv'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.rtb_u_scale_jk[proc_control_B.Ns] =
          proc_control_DW.last_mv_DSTATE_f[proc_control_B.Ns] -
          proc_control_B.u_scale[proc_control_B.Ns];
      }

      // Update for Memory: '<S130>/Memory' incorporates:
      //   MATLAB Function: '<S158>/VariableHorizonOptimizer'
      //   MATLABSystem: '<S121>/MPC manager'
      //   Math: '<S130>/Math Function'
      //   Math: '<S130>/Math Function1'
      //   Math: '<S130>/Math Function2'
      //   Merge generated from: '<S120>/Merge'
      //   Rounding: '<S130>/Floor1'

      proc_contr_mpcblock_optimizerPM(rseq, vseq, proc_control_B.mvmin,
        proc_control_B.mvmax, proc_control_B.rtb_TmpSignalConversionAtMAT__k,
        proc_control_B.rtb_u_scale_jk, proc_control_B.b_Mlim,
        proc_control_B.b_utarget, proc_control_B.Ns_d, static_cast<int32_T>(std::
        floor(proc_control_B.m)), proc_control_B.u_scale, proc_control_B.ywt,
        proc_control_B.mvwt, proc_control_B.dmwwt, proc_control_B.b_A_h, Bu, Bv,
        proc_control_B.b_C_a, Dv, proc_control_B.U_kv, proc_control_B.U,
        &proc_control_B.MpcStatus);

      // Merge generated from: '<S120>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S123>/Pulse Generator'

      proc_control_B.alive = (proc_control_DW.clockTickCounter_j <
        proc_control_P.PulseGenerator_Duty) &&
        (proc_control_DW.clockTickCounter_j >= 0) ?
        proc_control_P.PulseGenerator_Amp : 0.0;

      // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
      proc_control_emxFree_real_T(&vseq);
      proc_control_emxFree_real_T(&rseq);
      proc_control_emxFree_real_T(&Dv);
      proc_control_emxFree_real_T(&Bv);
      proc_control_emxFree_real_T(&Bu);

      // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S123>/Action Port'

      // DiscretePulseGenerator: '<S123>/Pulse Generator'
      if (proc_control_DW.clockTickCounter_j >=
          proc_control_P.PulseGenerator_Period - 1.0) {
        proc_control_DW.clockTickCounter_j = 0;
      } else {
        proc_control_DW.clockTickCounter_j++;
      }

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.xtmp = proc_control_B.U_kv[proc_control_B.i];

        // Gain: '<S130>/u_scale'
        proc_control_B.Product2_lm =
          proc_control_P.u_scale_Gain[proc_control_B.i] * proc_control_B.xtmp;

        // Merge generated from: '<S120>/Merge' incorporates:
        //   Gain: '<S130>/u_scale'
        //   SignalConversion generated from: '<S123>/out'

        proc_control_B.mv[proc_control_B.i] = proc_control_B.Product2_lm;

        // Update for UnitDelay: '<S130>/last_mv' incorporates:
        //   Gain: '<S130>/u_scale'

        proc_control_DW.last_mv_DSTATE_f[proc_control_B.i] = proc_control_B.xtmp;

        // Update for Delay: '<S123>/Delay1' incorporates:
        //   Gain: '<S130>/u_scale'

        proc_control_DW.Delay1_DSTATE_e[proc_control_B.i] =
          proc_control_B.Product2_lm;
      }

      // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S120>/JoyStick OpenLoop' incorporates:
      //   ActionPort: '<S125>/Action Port'

      // SampleTimeMath: '<S160>/TSamp' incorporates:
      //   Merge generated from: '<S9>/Merge'
      //   Selector: '<S125>/Selector'
      //
      //  About '<S160>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
           proc_control_B.ibmat++) {
        proc_control_B.TSamp[proc_control_B.ibmat] =
          proc_control_B.Reference[proc_control_B.Ns + 70] *
          proc_control_P.TSamp_WtEt;
        proc_control_B.Ns += 10;
      }

      // End of SampleTimeMath: '<S160>/TSamp'

      // MATLABSystem: '<S125>/MATLAB System' incorporates:
      //   Merge generated from: '<S9>/Merge'
      //   Selector: '<S125>/Selector'

      if (proc_control_DW.obj_m.k != proc_control_P.MATLABSystem_k) {
        proc_control_DW.obj_m.k = proc_control_P.MATLABSystem_k;
      }

      proc_control_B.NewDvlMsg = false;
      proc_control_B.newPressureMsg = true;
      proc_control_B.b_k = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_k < 48)) {
        if (!(proc_control_DW.obj_m.binv[proc_control_B.b_k] ==
              proc_control_P.binv[proc_control_B.b_k])) {
          proc_control_B.newPressureMsg = false;
          exitg1 = true;
        } else {
          proc_control_B.b_k++;
        }
      }

      if (proc_control_B.newPressureMsg) {
        proc_control_B.NewDvlMsg = true;
      }

      if (!proc_control_B.NewDvlMsg) {
        std::memcpy(&proc_control_DW.obj_m.binv[0], &proc_control_P.binv[0], 48U
                    * sizeof(real_T));
      }

      if (proc_control_DW.obj_m.mass != proc_control_P.physics.mass) {
        proc_control_DW.obj_m.mass = proc_control_P.physics.mass;
      }

      if (proc_control_DW.obj_m.volume != proc_control_P.physics.volume) {
        proc_control_DW.obj_m.volume = proc_control_P.physics.volume;
      }

      if (proc_control_DW.obj_m.height != proc_control_P.physics.height) {
        proc_control_DW.obj_m.height = proc_control_P.physics.height;
      }

      proc_control_B.NewDvlMsg = false;
      proc_control_B.newPressureMsg = true;
      proc_control_B.b_k = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.b_k < 9)) {
        if (!(proc_control_DW.obj_m.I[proc_control_B.b_k] ==
              proc_control_P.physics.I[proc_control_B.b_k])) {
          proc_control_B.newPressureMsg = false;
          exitg1 = true;
        } else {
          proc_control_B.b_k++;
        }
      }

      if (proc_control_B.newPressureMsg) {
        proc_control_B.NewDvlMsg = true;
      }

      if (!proc_control_B.NewDvlMsg) {
        std::memcpy(&proc_control_DW.obj_m.I[0], &proc_control_P.physics.I[0],
                    9U * sizeof(real_T));
      }

      if (!proc_control_isequal(proc_control_DW.obj_m.RG,
           proc_control_P.physics.RG)) {
        proc_control_DW.obj_m.RG[0] = proc_control_P.physics.RG[0];
        proc_control_DW.obj_m.RG[1] = proc_control_P.physics.RG[1];
        proc_control_DW.obj_m.RG[2] = proc_control_P.physics.RG[2];
      }

      if (!proc_control_isequal(proc_control_DW.obj_m.RB,
           proc_control_P.physics.RB)) {
        proc_control_DW.obj_m.RB[0] = proc_control_P.physics.RB[0];
        proc_control_DW.obj_m.RB[1] = proc_control_P.physics.RB[1];
        proc_control_DW.obj_m.RB[2] = proc_control_P.physics.RB[2];
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_m.AddedMass,
           proc_control_P.physics.AddedMass)) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_m.AddedMass[proc_control_B.Ns] =
            proc_control_P.physics.AddedMass[proc_control_B.Ns];
        }
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_m.CDL,
           proc_control_P.physics.CDL)) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_m.CDL[proc_control_B.Ns] =
            proc_control_P.physics.CDL[proc_control_B.Ns];
        }
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_m.CDQ,
           proc_control_P.physics.CDQ)) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_DW.obj_m.CDQ[proc_control_B.Ns] =
            proc_control_P.physics.CDQ[proc_control_B.Ns];
        }
      }

      if (!proc_control_isequal(proc_control_DW.obj_m.AF,
           proc_control_P.physics.AF)) {
        proc_control_DW.obj_m.AF[0] = proc_control_P.physics.AF[0];
        proc_control_DW.obj_m.AF[1] = proc_control_P.physics.AF[1];
        proc_control_DW.obj_m.AF[2] = proc_control_P.physics.AF[2];
      }

      if (proc_control_DW.obj_m.g != proc_control_P.physics.g) {
        proc_control_DW.obj_m.g = proc_control_P.physics.g;
      }

      if (proc_control_DW.obj_m.rho != proc_control_P.physics.rho) {
        proc_control_DW.obj_m.rho = proc_control_P.physics.rho;
      }

      //  Implement algorithm. Calculate y as a function of input u and
      //  discrete states.
      switch (proc_control_B.mode) {
       case 20U:
        //  Open loop avec modèle physique
        //  Construire le vecteur constantes
        proc_control_B.constValues[0] = proc_control_DW.obj_m.mass;
        proc_control_B.constValues[1] = proc_control_DW.obj_m.volume;
        proc_control_B.constValues[3] = proc_control_DW.obj_m.AF[0];
        proc_control_B.constValues[6] = proc_control_DW.obj_m.I[0];
        proc_control_B.constValues[9] = proc_control_DW.obj_m.I[1];
        proc_control_B.constValues[12] = proc_control_DW.obj_m.I[2];
        proc_control_B.constValues[15] = proc_control_DW.obj_m.RG[0];
        proc_control_B.constValues[18] = proc_control_DW.obj_m.RB[0];
        proc_control_B.constValues[4] = proc_control_DW.obj_m.AF[1];
        proc_control_B.constValues[7] = proc_control_DW.obj_m.I[3];
        proc_control_B.constValues[10] = proc_control_DW.obj_m.I[4];
        proc_control_B.constValues[13] = proc_control_DW.obj_m.I[5];
        proc_control_B.constValues[16] = proc_control_DW.obj_m.RG[1];
        proc_control_B.constValues[19] = proc_control_DW.obj_m.RB[1];
        proc_control_B.constValues[5] = proc_control_DW.obj_m.AF[2];
        proc_control_B.constValues[8] = proc_control_DW.obj_m.I[6];
        proc_control_B.constValues[11] = proc_control_DW.obj_m.I[7];
        proc_control_B.constValues[14] = proc_control_DW.obj_m.I[8];
        proc_control_B.constValues[17] = proc_control_DW.obj_m.RG[2];
        proc_control_B.constValues[20] = proc_control_DW.obj_m.RB[2];

        // construire le vecteur state avec la imu et spaceNAV
        proc_control_B.K_dz[3] = 1.0;
        proc_control_B.K_dz[4] = 0.0;
        proc_control_B.K_dz[5] = 0.0;
        proc_control_B.K_dz[6] = 0.0;
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
             proc_control_B.ibmat++) {
          proc_control_B.constValues[proc_control_B.ibmat + 21] =
            proc_control_DW.obj_m.CDL[proc_control_B.ibmat];
          proc_control_B.constValues[proc_control_B.ibmat + 27] =
            proc_control_DW.obj_m.CDQ[proc_control_B.ibmat];
          proc_control_B.constValues[proc_control_B.ibmat + 33] =
            proc_control_DW.obj_m.AddedMass[proc_control_B.ibmat];
          proc_control_B.K_dz[proc_control_B.ibmat + 7] =
            proc_control_B.Reference[proc_control_B.Ns + 70];
          proc_control_B.Ns += 10;
        }

        // [0;0;0;mo(4:7);ref.'];;
        //  Déterminer les matrices du modèle physique
        // AUVModelMatrices
        //     [M,C,D,Gq] = AUVModelMatrices(IN1,IN2)
        //     This function was generated by the Symbolic Math Toolbox version 9.1. 
        //     12-Jul-2022 16:58:53
        proc_control_B.b_norm = proc_control_B.constValues[3] *
          proc_control_B.K_dz[10];
        proc_control_B.t3 = proc_control_B.constValues[6] * proc_control_B.K_dz
          [10];
        proc_control_B.t4 = proc_control_B.constValues[9] * proc_control_B.K_dz
          [10];
        proc_control_B.trajClear = proc_control_B.constValues[4] *
          proc_control_B.K_dz[11];
        proc_control_B.Product2_lm = proc_control_B.constValues[7] *
          proc_control_B.K_dz[11];
        proc_control_B.d = proc_control_B.constValues[10] * proc_control_B.K_dz
          [11];
        proc_control_B.t8 = proc_control_B.constValues[5] * proc_control_B.K_dz
          [12];
        proc_control_B.t9 = proc_control_B.constValues[8] * proc_control_B.K_dz
          [12];
        proc_control_B.oc = proc_control_B.constValues[11] *
          proc_control_B.K_dz[12];
        proc_control_B.t_f = proc_control_B.K_dz[10] *
          proc_control_B.constValues[33];
        proc_control_B.oa = proc_control_B.K_dz[11] *
          proc_control_B.constValues[34];
        proc_control_B.xtmp = proc_control_B.constValues[0] *
          proc_control_B.constValues[12];
        proc_control_B.t14 = proc_control_B.constValues[0] *
          proc_control_B.constValues[13];
        proc_control_B.t15 = proc_control_B.constValues[0] *
          proc_control_B.constValues[14];
        proc_control_B.t16 = proc_control_B.K_dz[12] *
          proc_control_B.constValues[35];
        proc_control_B.t17 = proc_control_B.K_dz[10] *
          proc_control_B.constValues[12];
        proc_control_B.oc_h = proc_control_B.K_dz[11] *
          proc_control_B.constValues[13];
        proc_control_B.od = proc_control_B.K_dz[12] *
          proc_control_B.constValues[14];
        proc_control_B.t26 = proc_control_B.K_dz[7] *
          proc_control_B.constValues[30];
        proc_control_B.t27 = proc_control_B.K_dz[8] *
          proc_control_B.constValues[31];
        proc_control_B.t28 = proc_control_B.K_dz[9] *
          proc_control_B.constValues[32];
        proc_control_B.dp = proc_control_B.constValues[1] *
          proc_control_B.constValues[36];
        proc_control_B.linearScaling = proc_control_B.K_dz[5] *
          proc_control_B.K_dz[6];
        proc_control_B.Product3_pv = proc_control_B.K_dz[3] *
          proc_control_B.K_dz[4];
        proc_control_B.t65 = proc_control_B.linearScaling * 2.0 +
          proc_control_B.Product3_pv * 2.0;
        proc_control_B.theta0 = (proc_control_B.K_dz[11] *
          proc_control_B.constValues[14] + proc_control_B.K_dz[7]) *
          proc_control_B.constValues[0];
        proc_control_B.t57 = (proc_control_B.K_dz[10] *
                              proc_control_B.constValues[13] +
                              proc_control_B.K_dz[9]) *
          proc_control_B.constValues[0];
        proc_control_B.oa_n = (proc_control_B.constValues[12] *
          proc_control_B.K_dz[12] + proc_control_B.K_dz[8]) *
          proc_control_B.constValues[0];
        proc_control_B.ob = (proc_control_B.t17 + proc_control_B.oc_h) *
          proc_control_B.constValues[0];
        proc_control_B.t17 = (proc_control_B.t17 + proc_control_B.od) *
          proc_control_B.constValues[0];
        proc_control_B.oc_h = (proc_control_B.oc_h + proc_control_B.od) *
          proc_control_B.constValues[0];
        proc_control_B.od_tmp = proc_control_B.K_dz[4] * proc_control_B.K_dz[6];
        proc_control_B.t39 = proc_control_B.K_dz[3] * proc_control_B.K_dz[5];
        proc_control_B.od = proc_control_B.od_tmp * 2.0 + -(proc_control_B.t39 *
          2.0);
        proc_control_B.t70 = (proc_control_B.K_dz[4] * proc_control_B.K_dz[4] *
                              2.0 + proc_control_B.K_dz[5] *
                              proc_control_B.K_dz[5] * 2.0) - 1.0;

        //  CAlculer la comande
        proc_control_B.b_A_p[0] = -proc_control_B.constValues[30] +
          proc_control_B.constValues[0];
        proc_control_B.b_A_p[1] = 0.0;
        proc_control_B.b_A_p[2] = 0.0;
        proc_control_B.b_A_p[3] = 0.0;
        proc_control_B.b_A_p[4] = proc_control_B.t15;
        proc_control_B.b_A_p[5] = -proc_control_B.t14;
        proc_control_B.b_A_p[6] = 0.0;
        proc_control_B.b_A_p[7] = -proc_control_B.constValues[31] +
          proc_control_B.constValues[0];
        proc_control_B.b_A_p[8] = 0.0;
        proc_control_B.b_A_p[9] = -proc_control_B.t15;
        proc_control_B.b_A_p[10] = 0.0;
        proc_control_B.b_A_p[11] = proc_control_B.xtmp;
        proc_control_B.b_A_p[12] = 0.0;
        proc_control_B.b_A_p[13] = 0.0;
        proc_control_B.b_A_p[14] = -proc_control_B.constValues[32] +
          proc_control_B.constValues[0];
        proc_control_B.b_A_p[15] = proc_control_B.t14;
        proc_control_B.b_A_p[16] = -proc_control_B.xtmp;
        proc_control_B.b_A_p[17] = 0.0;
        proc_control_B.b_A_p[18] = 0.0;
        proc_control_B.b_A_p[19] = -proc_control_B.t15;
        proc_control_B.b_A_p[20] = proc_control_B.t14;
        proc_control_B.b_A_p[21] = proc_control_B.constValues[3] -
          proc_control_B.constValues[33];
        proc_control_B.b_A_p[22] = proc_control_B.constValues[6];
        proc_control_B.b_A_p[23] = proc_control_B.constValues[9];
        proc_control_B.b_A_p[24] = proc_control_B.t15;
        proc_control_B.b_A_p[25] = 0.0;
        proc_control_B.b_A_p[26] = -proc_control_B.xtmp;
        proc_control_B.b_A_p[27] = proc_control_B.constValues[4];
        proc_control_B.b_A_p[28] = proc_control_B.constValues[7] -
          proc_control_B.constValues[34];
        proc_control_B.b_A_p[29] = proc_control_B.constValues[10];
        proc_control_B.b_A_p[30] = -proc_control_B.t14;
        proc_control_B.b_A_p[31] = proc_control_B.xtmp;
        proc_control_B.b_A_p[32] = 0.0;
        proc_control_B.b_A_p[33] = proc_control_B.constValues[5];
        proc_control_B.b_A_p[34] = proc_control_B.constValues[8];
        proc_control_B.b_A_p[35] = proc_control_B.constValues[11] -
          proc_control_B.constValues[35];

        // Sum: '<S160>/Diff' incorporates:
        //   Merge generated from: '<S9>/Merge'
        //   SampleTimeMath: '<S160>/TSamp'
        //   Selector: '<S125>/Selector'
        //   UnitDelay: '<S160>/UD'
        //
        //  About '<S160>/TSamp':
        //   y = u * K where K = 1 / ( w * Ts )
        //
        //  Block description for '<S160>/Diff':
        //
        //   Add in CPU
        //
        //  Block description for '<S160>/UD':
        //
        //   Store in Global RAM

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.rtb_TSamp_a[proc_control_B.Ns] =
            proc_control_B.TSamp[proc_control_B.Ns] -
            proc_control_DW.UD_DSTATE[proc_control_B.Ns];
        }

        // End of Sum: '<S160>/Diff'
        proc_control_B.b_newCoefs[0] = 0.0;
        proc_control_B.b_newCoefs[1] = 0.0;
        proc_control_B.b_newCoefs[2] = 0.0;
        proc_control_B.b_newCoefs[3] = -proc_control_B.oc_h;
        proc_control_B.AngularRate_a_idx_1 = proc_control_B.K_dz[11] *
          proc_control_B.constValues[12] - proc_control_B.K_dz[9];
        proc_control_B.b_newCoefs[4] = proc_control_B.AngularRate_a_idx_1 *
          proc_control_B.constValues[0] + proc_control_B.t28;
        proc_control_B.b_newCoefs[5] = -proc_control_B.t27 + proc_control_B.oa_n;
        proc_control_B.b_newCoefs[6] = 0.0;
        proc_control_B.b_newCoefs[7] = 0.0;
        proc_control_B.b_newCoefs[8] = 0.0;
        proc_control_B.b_newCoefs[9] = -proc_control_B.t28 + proc_control_B.t57;
        proc_control_B.b_newCoefs[10] = -proc_control_B.t17;
        proc_control_B.BodyVelocity_c_tmp_idx_0 = proc_control_B.K_dz[12] *
          proc_control_B.constValues[13] - proc_control_B.K_dz[7];
        proc_control_B.b_newCoefs[11] = proc_control_B.BodyVelocity_c_tmp_idx_0 *
          proc_control_B.constValues[0] + proc_control_B.t26;
        proc_control_B.b_newCoefs[12] = 0.0;
        proc_control_B.b_newCoefs[13] = 0.0;
        proc_control_B.b_newCoefs[14] = 0.0;
        proc_control_B.BodyVelocity_c_idx_1 = proc_control_B.K_dz[10] *
          proc_control_B.constValues[14] - proc_control_B.K_dz[8];
        proc_control_B.b_newCoefs[15] = proc_control_B.BodyVelocity_c_idx_1 *
          proc_control_B.constValues[0] + proc_control_B.t27;
        proc_control_B.b_newCoefs[16] = -proc_control_B.t26 +
          proc_control_B.theta0;
        proc_control_B.b_newCoefs[17] = -proc_control_B.ob;
        proc_control_B.b_newCoefs[18] = proc_control_B.oc_h;
        proc_control_B.b_newCoefs[19] = proc_control_B.t28 - proc_control_B.t57;
        proc_control_B.b_newCoefs[20] = proc_control_B.BodyVelocity_c_idx_1 *
          -proc_control_B.constValues[0] + -proc_control_B.t27;
        proc_control_B.b_newCoefs[21] = 0.0;
        proc_control_B.b_newCoefs[22] = ((-proc_control_B.t4 - proc_control_B.d)
          - proc_control_B.oc) + proc_control_B.t16;
        proc_control_B.b_newCoefs[23] = ((proc_control_B.t3 +
          proc_control_B.Product2_lm) + proc_control_B.t9) - proc_control_B.oa;
        proc_control_B.b_newCoefs[24] = proc_control_B.AngularRate_a_idx_1 *
          -proc_control_B.constValues[0] + -proc_control_B.t28;
        proc_control_B.b_newCoefs[25] = proc_control_B.t17;
        proc_control_B.b_newCoefs[26] = proc_control_B.t26 -
          proc_control_B.theta0;
        proc_control_B.b_newCoefs[27] = ((proc_control_B.t4 + proc_control_B.d)
          + proc_control_B.oc) - proc_control_B.t16;
        proc_control_B.b_newCoefs[28] = 0.0;
        proc_control_B.b_newCoefs[29] = ((-proc_control_B.b_norm -
          proc_control_B.trajClear) - proc_control_B.t8) + proc_control_B.t_f;
        proc_control_B.b_newCoefs[30] = proc_control_B.t27 - proc_control_B.oa_n;
        proc_control_B.b_newCoefs[31] = proc_control_B.BodyVelocity_c_tmp_idx_0 *
          -proc_control_B.constValues[0] + -proc_control_B.t26;
        proc_control_B.b_newCoefs[32] = proc_control_B.ob;
        proc_control_B.b_newCoefs[33] = ((-proc_control_B.t3 -
          proc_control_B.Product2_lm) - proc_control_B.t9) + proc_control_B.oa;
        proc_control_B.b_newCoefs[34] = ((proc_control_B.b_norm +
          proc_control_B.trajClear) + proc_control_B.t8) - proc_control_B.t_f;
        proc_control_B.b_newCoefs[35] = 0.0;
        proc_control_B.constValues_p[0] = proc_control_B.constValues[24] * std::
          abs(proc_control_B.K_dz[7]) + proc_control_B.constValues[18];
        proc_control_B.constValues_p[1] = 0.0;
        proc_control_B.constValues_p[2] = 0.0;
        proc_control_B.constValues_p[3] = 0.0;
        proc_control_B.constValues_p[4] = 0.0;
        proc_control_B.constValues_p[5] = 0.0;
        proc_control_B.constValues_p[6] = 0.0;
        proc_control_B.constValues_p[7] = proc_control_B.constValues[25] * std::
          abs(proc_control_B.K_dz[8]) + proc_control_B.constValues[19];
        proc_control_B.constValues_p[8] = 0.0;
        proc_control_B.constValues_p[9] = 0.0;
        proc_control_B.constValues_p[10] = 0.0;
        proc_control_B.constValues_p[11] = 0.0;
        proc_control_B.constValues_p[12] = 0.0;
        proc_control_B.constValues_p[13] = 0.0;
        proc_control_B.constValues_p[14] = proc_control_B.constValues[26] * std::
          abs(proc_control_B.K_dz[9]) + proc_control_B.constValues[20];
        proc_control_B.constValues_p[15] = 0.0;
        proc_control_B.constValues_p[16] = 0.0;
        proc_control_B.constValues_p[17] = 0.0;
        proc_control_B.constValues_p[18] = 0.0;
        proc_control_B.constValues_p[19] = 0.0;
        proc_control_B.constValues_p[20] = 0.0;
        proc_control_B.constValues_p[21] = proc_control_B.constValues[27] * std::
          abs(proc_control_B.K_dz[10]) + proc_control_B.constValues[21];
        proc_control_B.constValues_p[22] = 0.0;
        proc_control_B.constValues_p[23] = 0.0;
        proc_control_B.constValues_p[24] = 0.0;
        proc_control_B.constValues_p[25] = 0.0;
        proc_control_B.constValues_p[26] = 0.0;
        proc_control_B.constValues_p[27] = 0.0;
        proc_control_B.constValues_p[28] = proc_control_B.constValues[28] * std::
          abs(proc_control_B.K_dz[11]) + proc_control_B.constValues[22];
        proc_control_B.constValues_p[29] = 0.0;
        proc_control_B.constValues_p[30] = 0.0;
        proc_control_B.constValues_p[31] = 0.0;
        proc_control_B.constValues_p[32] = 0.0;
        proc_control_B.constValues_p[33] = 0.0;
        proc_control_B.constValues_p[34] = 0.0;
        proc_control_B.constValues_p[35] = proc_control_B.constValues[29] * std::
          abs(proc_control_B.K_dz[12]) + proc_control_B.constValues[23];
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 36; proc_control_B.Ns++)
        {
          proc_control_B.dCoefs[proc_control_B.Ns] =
            proc_control_B.b_newCoefs[proc_control_B.Ns] +
            proc_control_B.constValues_p[proc_control_B.Ns];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.constValues_i[proc_control_B.Ns] = 0.0;
        }

        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 6;
             proc_control_B.idx_p++) {
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
          {
            proc_control_B.constValues_i[proc_control_B.Ns] +=
              proc_control_B.b_A_p[proc_control_B.Ns + proc_control_B.ibmat] *
              proc_control_B.rtb_TSamp_a[proc_control_B.idx_p];
          }

          proc_control_B.dv18[proc_control_B.idx_p] = 0.0;
          proc_control_B.ibmat += 6;
        }

        proc_control_B.Ns = 0;
        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 6;
             proc_control_B.idx_p++) {
          for (proc_control_B.st_Value_size_idx_1 = 0;
               proc_control_B.st_Value_size_idx_1 < 6;
               proc_control_B.st_Value_size_idx_1++) {
            proc_control_B.dv18[proc_control_B.st_Value_size_idx_1] +=
              proc_control_B.dCoefs[proc_control_B.st_Value_size_idx_1 +
              proc_control_B.Ns] * proc_control_B.Reference[proc_control_B.ibmat
              + 70];
          }

          proc_control_B.Ns += 6;
          proc_control_B.ibmat += 10;
        }

        proc_control_B.Product2_lm = (proc_control_B.constValues[0] +
          -proc_control_B.dp) * proc_control_B.constValues[37];
        proc_control_B.rtb_TSamp_a[0] = (proc_control_B.od_tmp -
          proc_control_B.t39) * proc_control_B.Product2_lm * -2.0;
        proc_control_B.rtb_TSamp_a[1] = (proc_control_B.linearScaling +
          proc_control_B.Product3_pv) * proc_control_B.Product2_lm * -2.0;
        proc_control_B.rtb_TSamp_a[2] = proc_control_B.Product2_lm *
          proc_control_B.t70;
        proc_control_B.Product2_lm = proc_control_B.constValues[17] *
          proc_control_B.constValues[37];
        proc_control_B.t4 = proc_control_B.constValues[37] * proc_control_B.t14;
        proc_control_B.d = proc_control_B.constValues[16] *
          proc_control_B.constValues[37] * -proc_control_B.dp;
        proc_control_B.rtb_TSamp_a[3] = ((proc_control_B.constValues[37] *
          proc_control_B.t15 * proc_control_B.t65 + proc_control_B.t4 *
          proc_control_B.t70) + proc_control_B.Product2_lm * -proc_control_B.dp *
          proc_control_B.t65) + proc_control_B.d * proc_control_B.t70;
        proc_control_B.xtmp = proc_control_B.constValues[37] *
          -proc_control_B.xtmp;
        proc_control_B.b_norm = proc_control_B.constValues[15] *
          proc_control_B.constValues[37] * proc_control_B.dp;
        proc_control_B.rtb_TSamp_a[4] = ((proc_control_B.constValues[37] *
          -proc_control_B.t15 * proc_control_B.od + proc_control_B.xtmp *
          proc_control_B.t70) + proc_control_B.b_norm * proc_control_B.t70) +
          proc_control_B.Product2_lm * proc_control_B.dp * proc_control_B.od;
        proc_control_B.rtb_TSamp_a[5] = ((proc_control_B.t4 * proc_control_B.od
          + proc_control_B.xtmp * proc_control_B.t65) + proc_control_B.b_norm *
          proc_control_B.t65) + proc_control_B.d * proc_control_B.od;
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.constValues_f[proc_control_B.Ns] =
            (proc_control_B.constValues_i[proc_control_B.Ns] +
             proc_control_B.dv18[proc_control_B.Ns]) +
            proc_control_B.rtb_TSamp_a[proc_control_B.Ns];
        }

        // Merge generated from: '<S120>/Merge' incorporates:
        //   Merge generated from: '<S9>/Merge'
        //   Selector: '<S125>/Selector'

        std::memset(&proc_control_B.mv[0], 0, sizeof(real_T) << 3U);
        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 6;
             proc_control_B.idx_p++) {
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
          {
            proc_control_B.mv[proc_control_B.Ns] +=
              proc_control_DW.obj_m.binv[proc_control_B.Ns +
              proc_control_B.ibmat] *
              proc_control_B.constValues_f[proc_control_B.idx_p];
          }

          proc_control_B.ibmat += 8;
        }
        break;

       case 21U:
        //  Open loop matrice b invese directe
        std::memset(&proc_control_B.rtb_u_scale_jk[0], 0, sizeof(real_T) << 3U);
        proc_control_B.ibmat = 0;
        proc_control_B.idx_p = 0;
        for (proc_control_B.st_Value_size_idx_1 = 0;
             proc_control_B.st_Value_size_idx_1 < 6;
             proc_control_B.st_Value_size_idx_1++) {
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
          {
            proc_control_B.rtb_u_scale_jk[proc_control_B.Ns] +=
              proc_control_DW.obj_m.binv[proc_control_B.Ns +
              proc_control_B.ibmat] *
              proc_control_B.Reference[proc_control_B.idx_p + 70];
          }

          proc_control_B.ibmat += 8;
          proc_control_B.idx_p += 10;
        }

        // Merge generated from: '<S120>/Merge' incorporates:
        //   Merge generated from: '<S9>/Merge'
        //   Selector: '<S125>/Selector'

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.mv[proc_control_B.Ns] =
            proc_control_B.rtb_u_scale_jk[proc_control_B.Ns] *
            proc_control_DW.obj_m.k;
        }
        break;

       default:
        // Merge generated from: '<S120>/Merge'
        std::memset(&proc_control_B.mv[0], 0, sizeof(real_T) << 3U);
        break;
      }

      // End of MATLABSystem: '<S125>/MATLAB System'

      // Merge generated from: '<S120>/Merge' incorporates:
      //   Constant: '<S125>/Constant1'
      //   SignalConversion generated from: '<S125>/Constant1'

      proc_control_B.alive = proc_control_P.Constant1_Value_p;

      // Merge generated from: '<S120>/Merge' incorporates:
      //   Constant: '<S125>/Constant'
      //   SignalConversion generated from: '<S125>/Constant'

      proc_control_B.MpcStatus = proc_control_P.Constant_Value_d1;

      // Update for UnitDelay: '<S160>/UD' incorporates:
      //   SampleTimeMath: '<S160>/TSamp'
      //
      //  About '<S160>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )
      //
      //  Block description for '<S160>/UD':
      //
      //   Store in Global RAM

      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        proc_control_DW.UD_DSTATE[proc_control_B.i] =
          proc_control_B.TSamp[proc_control_B.i];
      }

      // End of Update for UnitDelay: '<S160>/UD'
      // End of Outputs for SubSystem: '<S120>/JoyStick OpenLoop'
      break;

     case 2:
      if (proc_control_B.rtAction != proc_control_B.rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S120>/LTV MPC quaternion ' incorporates:
        //   ActionPort: '<S126>/Action Port'

        // InitializeConditions for SwitchCase: '<S120>/Switch Case' incorporates:
        //   Delay: '<S126>/Delay1'
        //   DiscretePulseGenerator: '<S126>/Pulse Generator'
        //   Memory: '<S164>/Memory'
        //   UnitDelay: '<S164>/last_mv'

        std::memcpy(&proc_control_DW.last_mv_DSTATE[0],
                    &proc_control_P.last_mv_InitialCondition_o[0], sizeof(real_T)
                    << 3U);
        std::memcpy(&proc_control_DW.Delay1_DSTATE[0],
                    &proc_control_P.Delay1_InitialCondition_n[0], 88U * sizeof
                    (real_T));
        std::memcpy(&proc_control_DW.Memory_PreviousInput[0],
                    &proc_control_P.Memory_InitialCondition_p[0], 226U * sizeof
                    (boolean_T));
        proc_control_DW.clockTickCounter_g = 0;

        // End of InitializeConditions for SubSystem: '<S120>/LTV MPC quaternion ' 
      }

      // Outputs for IfAction SubSystem: '<S120>/LTV MPC quaternion ' incorporates:
      //   ActionPort: '<S126>/Action Port'

      // MATLAB Function: '<S126>/MATLAB Function2' incorporates:
      //   Constant: '<S126>/Constant1'
      //   Constant: '<S126>/Constant3'
      //   Delay: '<S126>/Delay1'
      //   SignalConversion generated from: '<S163>/ SFunction '

      proc_control_B.TmpSignalConversionAtMAT_lt[0] =
        proc_control_B.WorldPosition[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[1] =
        proc_control_B.WorldPosition[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[2] =
        proc_control_B.WorldPosition[2];
      proc_control_B.TmpSignalConversionAtMAT_lt[3] = proc_control_B.qS2W[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[4] = proc_control_B.qS2W[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[5] = proc_control_B.qS2W[2];
      proc_control_B.TmpSignalConversionAtMAT_lt[6] = proc_control_B.qS2W[3];
      proc_control_B.TmpSignalConversionAtMAT_lt[7] =
        proc_control_B.BodyVelocity[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[10] =
        proc_control_B.AngularRate[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[8] =
        proc_control_B.BodyVelocity[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[11] =
        proc_control_B.AngularRate[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[9] =
        proc_control_B.BodyVelocity[2];
      proc_control_B.TmpSignalConversionAtMAT_lt[12] =
        proc_control_B.AngularRate[2];
      std::memset(&proc_control_B.A[0], 0, 1859U * sizeof(real_T));
      std::memset(&proc_control_B.A_l[0], 0, 38U * sizeof(real_T));
      proc_control_B.A_l[38] = 0.0;
      proc_control_B.A_l[42] = 0.0;
      proc_control_B.A_l[56] = 0.0;
      proc_control_B.A_l[70] = 0.0;
      proc_control_B.A_l[84] = 0.0;
      proc_control_B.A_l[94] = 0.0;
      proc_control_B.A_l[95] = 0.0;
      proc_control_B.A_l[96] = 0.0;
      proc_control_B.A_l[97] = 0.0;
      proc_control_B.A_l[107] = 0.0;
      proc_control_B.A_l[108] = 0.0;
      proc_control_B.A_l[109] = 0.0;
      proc_control_B.A_l[110] = 0.0;
      proc_control_B.A_l[120] = 0.0;
      proc_control_B.A_l[121] = 0.0;
      proc_control_B.A_l[122] = 0.0;
      proc_control_B.A_l[123] = 0.0;
      proc_control_B.A_l[130] = 0.0;
      proc_control_B.A_l[131] = 0.0;
      proc_control_B.A_l[132] = 0.0;
      proc_control_B.A_l[143] = 0.0;
      proc_control_B.A_l[144] = 0.0;
      proc_control_B.A_l[145] = 0.0;
      proc_control_B.A_l[156] = 0.0;
      proc_control_B.A_l[157] = 0.0;
      proc_control_B.A_l[158] = 0.0;
      std::memset(&proc_control_B.A_m[0], 0, 38U * sizeof(real_T));
      proc_control_B.A_m[38] = 0.0;
      proc_control_B.A_m[42] = 0.0;
      proc_control_B.A_m[56] = 0.0;
      proc_control_B.A_m[70] = 0.0;
      proc_control_B.A_m[84] = 0.0;
      proc_control_B.A_m[94] = 0.0;
      proc_control_B.A_m[95] = 0.0;
      proc_control_B.A_m[96] = 0.0;
      proc_control_B.A_m[97] = 0.0;
      proc_control_B.A_m[107] = 0.0;
      proc_control_B.A_m[108] = 0.0;
      proc_control_B.A_m[109] = 0.0;
      proc_control_B.A_m[110] = 0.0;
      proc_control_B.A_m[120] = 0.0;
      proc_control_B.A_m[121] = 0.0;
      proc_control_B.A_m[122] = 0.0;
      proc_control_B.A_m[123] = 0.0;
      proc_control_B.A_m[130] = 0.0;
      proc_control_B.A_m[131] = 0.0;
      proc_control_B.A_m[132] = 0.0;
      proc_control_B.A_m[143] = 0.0;
      proc_control_B.A_m[144] = 0.0;
      proc_control_B.A_m[145] = 0.0;
      proc_control_B.A_m[156] = 0.0;
      proc_control_B.A_m[157] = 0.0;
      proc_control_B.A_m[158] = 0.0;
      eye_4CWHrAiR(proc_control_B.b_newCoefs);
      for (proc_control_B.i = 0; proc_control_B.i < 11; proc_control_B.i++) {
        proc_control_B.b_norm = std::abs
          (proc_control_B.TmpSignalConversionAtMAT_lt[10]);
        proc_control_B.t3 = std::abs(proc_control_B.TmpSignalConversionAtMAT_lt
          [11]);
        proc_control_B.t4 = std::abs(proc_control_B.TmpSignalConversionAtMAT_lt
          [12]);
        proc_control_B.trajClear = std::abs
          (proc_control_B.TmpSignalConversionAtMAT_lt[7]);
        proc_control_B.Product2_lm = std::abs
          (proc_control_B.TmpSignalConversionAtMAT_lt[8]);
        proc_control_B.d = std::abs(proc_control_B.TmpSignalConversionAtMAT_lt[9]);
        if (std::isnan(proc_control_B.TmpSignalConversionAtMAT_lt[10])) {
          proc_control_B.t8 = proc_control_B.TmpSignalConversionAtMAT_lt[10];
        } else if (proc_control_B.TmpSignalConversionAtMAT_lt[10] < 0.0) {
          proc_control_B.t8 = -1.0;
        } else {
          proc_control_B.t8 = (proc_control_B.TmpSignalConversionAtMAT_lt[10] >
                               0.0);
        }

        if (std::isnan(proc_control_B.TmpSignalConversionAtMAT_lt[11])) {
          proc_control_B.t9 = proc_control_B.TmpSignalConversionAtMAT_lt[11];
        } else if (proc_control_B.TmpSignalConversionAtMAT_lt[11] < 0.0) {
          proc_control_B.t9 = -1.0;
        } else {
          proc_control_B.t9 = (proc_control_B.TmpSignalConversionAtMAT_lt[11] >
                               0.0);
        }

        if (std::isnan(proc_control_B.TmpSignalConversionAtMAT_lt[12])) {
          proc_control_B.oc = proc_control_B.TmpSignalConversionAtMAT_lt[12];
        } else if (proc_control_B.TmpSignalConversionAtMAT_lt[12] < 0.0) {
          proc_control_B.oc = -1.0;
        } else {
          proc_control_B.oc = (proc_control_B.TmpSignalConversionAtMAT_lt[12] >
                               0.0);
        }

        if (std::isnan(proc_control_B.TmpSignalConversionAtMAT_lt[7])) {
          proc_control_B.t_f = proc_control_B.TmpSignalConversionAtMAT_lt[7];
        } else if (proc_control_B.TmpSignalConversionAtMAT_lt[7] < 0.0) {
          proc_control_B.t_f = -1.0;
        } else {
          proc_control_B.t_f = (proc_control_B.TmpSignalConversionAtMAT_lt[7] >
                                0.0);
        }

        if (std::isnan(proc_control_B.TmpSignalConversionAtMAT_lt[8])) {
          proc_control_B.oa = proc_control_B.TmpSignalConversionAtMAT_lt[8];
        } else if (proc_control_B.TmpSignalConversionAtMAT_lt[8] < 0.0) {
          proc_control_B.oa = -1.0;
        } else {
          proc_control_B.oa = (proc_control_B.TmpSignalConversionAtMAT_lt[8] >
                               0.0);
        }

        if (std::isnan(proc_control_B.TmpSignalConversionAtMAT_lt[9])) {
          proc_control_B.xtmp = proc_control_B.TmpSignalConversionAtMAT_lt[9];
        } else if (proc_control_B.TmpSignalConversionAtMAT_lt[9] < 0.0) {
          proc_control_B.xtmp = -1.0;
        } else {
          proc_control_B.xtmp = (proc_control_B.TmpSignalConversionAtMAT_lt[9] >
            0.0);
        }

        proc_control_B.t17 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          proc_control_B.TmpSignalConversionAtMAT_lt[5] * 2.0;
        proc_control_B.t18 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          proc_control_B.TmpSignalConversionAtMAT_lt[6] * 2.0;
        proc_control_B.linearScaling =
          proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          proc_control_B.TmpSignalConversionAtMAT_lt[6] * 2.0;
        proc_control_B.Product3_pv = proc_control_B.TmpSignalConversionAtMAT_lt
          [3] * proc_control_B.TmpSignalConversionAtMAT_lt[4] * 2.0;
        proc_control_B.oc_h = proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          proc_control_B.TmpSignalConversionAtMAT_lt[5] * 2.0;
        proc_control_B.t14 = proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          proc_control_B.TmpSignalConversionAtMAT_lt[6] * 2.0;
        proc_control_B.t15 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          proc_control_B.TmpSignalConversionAtMAT_lt[7] * 2.0;
        proc_control_B.n_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          proc_control_B.TmpSignalConversionAtMAT_lt[7];
        proc_control_B.n_k = proc_control_B.n_tmp * 2.0;
        proc_control_B.od_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          proc_control_B.TmpSignalConversionAtMAT_lt[7];
        proc_control_B.od = proc_control_B.od_tmp * 2.0;
        proc_control_B.t26 = proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          proc_control_B.TmpSignalConversionAtMAT_lt[7] * 2.0;
        proc_control_B.t27_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          proc_control_B.TmpSignalConversionAtMAT_lt[8];
        proc_control_B.t27 = proc_control_B.t27_tmp * 2.0;
        proc_control_B.t28 = proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          proc_control_B.TmpSignalConversionAtMAT_lt[8] * 2.0;
        proc_control_B.dp_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          proc_control_B.TmpSignalConversionAtMAT_lt[8];
        proc_control_B.dp = proc_control_B.dp_tmp * 2.0;
        proc_control_B.t16 = proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          proc_control_B.TmpSignalConversionAtMAT_lt[8] * 2.0;
        proc_control_B.t70_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          proc_control_B.TmpSignalConversionAtMAT_lt[9];
        proc_control_B.t70 = proc_control_B.t70_tmp * 2.0;
        proc_control_B.t32_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          proc_control_B.TmpSignalConversionAtMAT_lt[9];
        proc_control_B.t32 = proc_control_B.t32_tmp * 2.0;
        proc_control_B.t33 = proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          proc_control_B.TmpSignalConversionAtMAT_lt[9] * 2.0;
        proc_control_B.t34 = proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          proc_control_B.TmpSignalConversionAtMAT_lt[9] * 2.0;
        proc_control_B.t39 = proc_control_B.TmpSignalConversionAtMAT_lt[4] / 2.0;
        proc_control_B.t40 = proc_control_B.TmpSignalConversionAtMAT_lt[5] / 2.0;
        proc_control_B.t41 = proc_control_B.TmpSignalConversionAtMAT_lt[6] / 2.0;
        proc_control_B.t42 = proc_control_B.TmpSignalConversionAtMAT_lt[3] / 2.0;
        proc_control_B.Product1_j1 = proc_control_B.TmpSignalConversionAtMAT_lt
          [10] / 2.0;
        proc_control_B.t44 = proc_control_B.TmpSignalConversionAtMAT_lt[11] /
          2.0;
        proc_control_B.t45 = proc_control_B.TmpSignalConversionAtMAT_lt[12] /
          2.0;
        proc_control_B.t55 = proc_control_B.TmpSignalConversionAtMAT_lt[12] *
          1.0571299073092789E-5;
        proc_control_B.theta0 = proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          9.7602896722846373E-5;
        proc_control_B.t57 = proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          0.01129023503850542;
        proc_control_B.oa_n = proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          0.00477039452928936;
        proc_control_B.t59 = proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          9.1703771260780813E-5;
        proc_control_B.t61 = proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.143523560675718;
        proc_control_B.ob = proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          0.00568699616459184;
        proc_control_B.t65 = proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.069014505171846527;
        proc_control_B.scale = proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          0.0071670223909459834;
        proc_control_B.Product_n = proc_control_B.TmpSignalConversionAtMAT_lt[4]
          * proc_control_B.TmpSignalConversionAtMAT_lt[4] * 2.0;
        proc_control_B.absxk = proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          proc_control_B.TmpSignalConversionAtMAT_lt[5] * 2.0;
        proc_control_B.rtb_Sum6_idx_1 =
          proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          proc_control_B.TmpSignalConversionAtMAT_lt[6] * 2.0;
        proc_control_B.t60 = -(proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          9.1703771260780813E-5);
        for (proc_control_B.Ns_d = 0; proc_control_B.Ns_d < 13;
             proc_control_B.Ns_d++) {
          proc_control_B.K_dz[proc_control_B.Ns_d] =
            proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.Ns_d];
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns
               ++) {
            proc_control_B.ibmat = 13 * proc_control_B.Ns_d + proc_control_B.Ns;
            proc_control_B.C[proc_control_B.ibmat + 169 * proc_control_B.i] =
              c[proc_control_B.ibmat];
          }
        }

        proc_control_B.AngularRate_a_idx_1 = -proc_control_B.dp +
          proc_control_B.t32;
        proc_control_B.A_l[39] = proc_control_B.AngularRate_a_idx_1;
        proc_control_B.BodyVelocity_c_tmp_idx_0 = proc_control_B.od -
          proc_control_B.t70;
        proc_control_B.A_l[40] = proc_control_B.BodyVelocity_c_tmp_idx_0;
        proc_control_B.BodyVelocity_c_idx_1 = -proc_control_B.n_k +
          proc_control_B.t27;
        proc_control_B.A_l[41] = proc_control_B.BodyVelocity_c_idx_1;
        proc_control_B.A_l[43] = proc_control_B.Product1_j1;
        proc_control_B.A_l[44] = proc_control_B.t44;
        proc_control_B.A_l[45] = proc_control_B.t45;
        proc_control_B.rtb_sincos_o1_tmp =
          proc_control_B.TmpSignalConversionAtMAT_lt[4] * -0.0013017970932508 +
          proc_control_B.TmpSignalConversionAtMAT_lt[5] * 0.4138016519122657;
        proc_control_B.A_l[46] = proc_control_B.rtb_sincos_o1_tmp;
        proc_control_B.rq_idx_1 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          -0.51979016069898065 + proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          0.00099202109956931486;
        proc_control_B.A_l[47] = proc_control_B.rq_idx_1;
        proc_control_B.rq_idx_2 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          0.033540735888224739 - proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          0.0058758415205803329;
        proc_control_B.A_l[48] = proc_control_B.rq_idx_2;
        proc_control_B.d_h = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          -25.242114556122988 + proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          0.1138522338822895;
        proc_control_B.A_l[49] = proc_control_B.d_h;
        proc_control_B.d1 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          0.1184627304742461 - proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          8.6371397256799973;
        proc_control_B.A_l[50] = proc_control_B.d1;
        proc_control_B.d2 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          0.38451002147839958 + proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          0.65361132374006825;
        proc_control_B.A_l[51] = proc_control_B.d2;
        proc_control_B.d3 = proc_control_B.t28 + proc_control_B.t33;
        proc_control_B.A_l[52] = proc_control_B.d3;
        proc_control_B.n_k = (proc_control_B.n_k - proc_control_B.t34) -
          proc_control_B.t27_tmp * 4.0;
        proc_control_B.A_l[53] = proc_control_B.n_k;
        proc_control_B.od = (proc_control_B.od + proc_control_B.t16) -
          proc_control_B.t70_tmp * 4.0;
        proc_control_B.A_l[54] = proc_control_B.od;
        proc_control_B.A_l[55] = -proc_control_B.Product1_j1;
        proc_control_B.A_l[57] = -proc_control_B.t45;
        proc_control_B.A_l[58] = proc_control_B.t44;
        proc_control_B.t70_tmp = (proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          -0.01263905936484723 - proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          0.4138016519122657) - proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          0.0013017970932508;
        proc_control_B.A_l[59] = proc_control_B.t70_tmp;
        proc_control_B.t27_tmp = (proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          -0.05386046241846134 - proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          0.00099202109956931486) - proc_control_B.TmpSignalConversionAtMAT_lt[3]
          * 0.51979016069898065;
        proc_control_B.A_l[60] = proc_control_B.t27_tmp;
        proc_control_B.d4 = (proc_control_B.TmpSignalConversionAtMAT_lt[4] *
                             0.37271497842704371 +
                             proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                             0.0058758415205803329) +
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 0.033540735888224739;
        proc_control_B.A_l[61] = proc_control_B.d4;
        proc_control_B.d5 = (proc_control_B.TmpSignalConversionAtMAT_lt[4] *
                             -4.2094140168137981 -
                             proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                             0.1138522338822895) -
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 25.242114556122988;
        proc_control_B.A_l[62] = proc_control_B.d5;
        proc_control_B.d6 = (proc_control_B.TmpSignalConversionAtMAT_lt[4] *
                             0.73643595165049924 +
                             proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                             8.6371397256799973) +
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 0.1184627304742461;
        proc_control_B.A_l[63] = proc_control_B.d6;
        proc_control_B.d7 = (proc_control_B.TmpSignalConversionAtMAT_lt[4] *
                             0.009785912146552939 -
                             proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                             0.65361132374006825) +
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 0.38451002147839958;
        proc_control_B.A_l[64] = proc_control_B.d7;
        proc_control_B.t27 = (proc_control_B.t27 + proc_control_B.t34) -
          proc_control_B.n_tmp * 4.0;
        proc_control_B.A_l[65] = proc_control_B.t27;
        proc_control_B.n_tmp = proc_control_B.t15 + proc_control_B.t33;
        proc_control_B.A_l[66] = proc_control_B.n_tmp;
        proc_control_B.dp = (-proc_control_B.t26 + proc_control_B.dp) -
          proc_control_B.t32_tmp * 4.0;
        proc_control_B.A_l[67] = proc_control_B.dp;
        proc_control_B.A_l[68] = -proc_control_B.t44;
        proc_control_B.A_l[69] = proc_control_B.t45;
        proc_control_B.A_l[71] = -proc_control_B.Product1_j1;
        proc_control_B.t32_tmp = (proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          -0.01263905936484723 - proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          0.0013017970932508) + proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          0.4138016519122657;
        proc_control_B.A_l[72] = proc_control_B.t32_tmp;
        proc_control_B.t33 = (proc_control_B.TmpSignalConversionAtMAT_lt[5] *
                              -0.05386046241846134 -
                              proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                              0.51979016069898065) +
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 0.00099202109956931486;
        proc_control_B.A_l[73] = proc_control_B.t33;
        proc_control_B.t34 = (proc_control_B.TmpSignalConversionAtMAT_lt[5] *
                              0.37271497842704371 +
                              proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                              0.033540735888224739) -
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 0.0058758415205803329;
        proc_control_B.A_l[74] = proc_control_B.t34;
        proc_control_B.d8 = (proc_control_B.TmpSignalConversionAtMAT_lt[5] *
                             -4.2094140168137981 -
                             proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                             25.242114556122988) +
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 0.1138522338822895;
        proc_control_B.A_l[75] = proc_control_B.d8;
        proc_control_B.d9 = (proc_control_B.TmpSignalConversionAtMAT_lt[5] *
                             0.73643595165049924 +
                             proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                             0.1184627304742461) -
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 8.6371397256799973;
        proc_control_B.A_l[76] = proc_control_B.d9;
        proc_control_B.d10 = (proc_control_B.TmpSignalConversionAtMAT_lt[5] *
                              0.009785912146552939 +
                              proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                              0.38451002147839958) +
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 0.65361132374006825;
        proc_control_B.A_l[77] = proc_control_B.d10;
        proc_control_B.t70 = (-proc_control_B.t16 + proc_control_B.t70) -
          proc_control_B.od_tmp * 4.0;
        proc_control_B.A_l[78] = proc_control_B.t70;
        proc_control_B.t26 = (proc_control_B.t26 + proc_control_B.t32) -
          proc_control_B.dp_tmp * 4.0;
        proc_control_B.A_l[79] = proc_control_B.t26;
        proc_control_B.t15 += proc_control_B.t28;
        proc_control_B.A_l[80] = proc_control_B.t15;
        proc_control_B.A_l[81] = -proc_control_B.t45;
        proc_control_B.A_l[82] = -proc_control_B.t44;
        proc_control_B.A_l[83] = proc_control_B.Product1_j1;
        proc_control_B.t28 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          -0.4138016519122657 - proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          0.0013017970932508;
        proc_control_B.A_l[85] = proc_control_B.t28;
        proc_control_B.t16 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          -0.00099202109956931486 - proc_control_B.TmpSignalConversionAtMAT_lt[5]
          * 0.51979016069898065;
        proc_control_B.A_l[86] = proc_control_B.t16;
        proc_control_B.od_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          0.0058758415205803329 + proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          0.033540735888224739;
        proc_control_B.A_l[87] = proc_control_B.od_tmp;
        proc_control_B.dp_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          -0.1138522338822895 - proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          25.242114556122988;
        proc_control_B.A_l[88] = proc_control_B.dp_tmp;
        proc_control_B.t32 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          8.6371397256799973 + proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          0.1184627304742461;
        proc_control_B.A_l[89] = proc_control_B.t32;
        proc_control_B.d11 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          -0.65361132374006825 + proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          0.38451002147839958;
        proc_control_B.A_l[90] = proc_control_B.d11;
        proc_control_B.A_tmp = (-proc_control_B.absxk +
          -proc_control_B.rtb_Sum6_idx_1) + 1.0;
        proc_control_B.A_l[91] = proc_control_B.A_tmp;
        proc_control_B.d12 = proc_control_B.t17 + proc_control_B.t14;
        proc_control_B.A_l[92] = proc_control_B.d12;
        proc_control_B.d13 = proc_control_B.t18 - proc_control_B.oc_h;
        proc_control_B.A_l[93] = proc_control_B.d13;
        proc_control_B.t_f *= proc_control_B.TmpSignalConversionAtMAT_lt[7];
        proc_control_B.d14 = (((((proc_control_B.trajClear *
          -0.036243063166504788 + proc_control_B.t55) + proc_control_B.theta0) -
          proc_control_B.t57) - proc_control_B.t61) - proc_control_B.t_f *
                              0.036243063166504788) - 0.46465465598083061;
        proc_control_B.A_l[98] = proc_control_B.d14;
        proc_control_B.d15 = (((proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          0.00477039452928936 - proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.001468966557066211) - proc_control_B.t_f * 1.109195745194835E-6) -
                              1.422045827172866E-5) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[11] *
            0.00041592787873873338 - proc_control_B.TmpSignalConversionAtMAT_lt
            [12] * 0.74121409319149256) - proc_control_B.trajClear *
           1.109195745194835E-6);
        proc_control_B.A_l[99] = proc_control_B.d15;
        proc_control_B.d16 = (((proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          -5.890830655932608E-5 + proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.00568699616459184) + proc_control_B.t_f * 7.9830677445685858E-6) +
                              0.0001023470223662639) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[11] * 0.69409782663856512
            - proc_control_B.TmpSignalConversionAtMAT_lt[12] *
            0.00032422410747795261) + proc_control_B.trajClear *
           7.9830677445685858E-6);
        proc_control_B.A_l[100] = proc_control_B.d16;
        proc_control_B.d17 = (((proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          0.032506453976272241 + proc_control_B.TmpSignalConversionAtMAT_lt[12] *
          0.24400486517334929) - proc_control_B.trajClear *
          0.0001525121428377004) + ((proc_control_B.TmpSignalConversionAtMAT_lt
          [8] * 0.044446246736648841 -
          proc_control_B.TmpSignalConversionAtMAT_lt[9] * 0.1148218101592509) -
          proc_control_B.t_f * 0.0001525121428377004)) + -0.0019552838825346208;
        proc_control_B.A_l[101] = proc_control_B.d17;
        proc_control_B.d18 = (((proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          1.7911420833141059E-5 + proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          8.3502908029033716) + proc_control_B.t_f * 0.011738978516892359) +
                              0.150499724575543) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[11] *
            -0.00568699616459184 - proc_control_B.TmpSignalConversionAtMAT_lt[12]
            * 0.001145088836853196) + proc_control_B.trajClear *
           0.011738978516892359);
        proc_control_B.A_l[102] = proc_control_B.d18;
        proc_control_B.t_f = (((proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          -7.5569972812640509E-5 - proc_control_B.TmpSignalConversionAtMAT_lt[12]
          * 0.00477039452928936) - proc_control_B.trajClear *
          0.0011846302503005471) + ((proc_control_B.TmpSignalConversionAtMAT_lt
          [8] * -5.91169722427816 - proc_control_B.TmpSignalConversionAtMAT_lt[9]
          * 2.2977499514997389E-5) - proc_control_B.t_f * 0.0011846302503005471))
          + -0.015187567311545479;
        proc_control_B.A_l[103] = proc_control_B.t_f;
        proc_control_B.trajClear = proc_control_B.t17 - proc_control_B.t14;
        proc_control_B.A_l[104] = proc_control_B.trajClear;
        proc_control_B.rtb_Sum6_idx_1 = (-proc_control_B.Product_n +
          -proc_control_B.rtb_Sum6_idx_1) + 1.0;
        proc_control_B.A_l[105] = proc_control_B.rtb_Sum6_idx_1;
        proc_control_B.t14 = proc_control_B.linearScaling +
          proc_control_B.Product3_pv;
        proc_control_B.A_l[106] = proc_control_B.t14;
        proc_control_B.t17 = proc_control_B.oa *
          proc_control_B.TmpSignalConversionAtMAT_lt[8];
        proc_control_B.d19 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -2.1519484922730651E-5 + proc_control_B.TmpSignalConversionAtMAT_lt[12]
          * 1.3454180758607359) - proc_control_B.Product2_lm *
          7.7738505218783331E-7) - proc_control_B.TmpSignalConversionAtMAT_lt[7]
                              * 0.01129023503850542) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[9] *
            -0.00041111798914172931 - proc_control_B.t17 * 7.7738505218783331E-7)
           - 1.8960611028971542E-5);
        proc_control_B.A_l[111] = proc_control_B.d19;
        proc_control_B.A_l[112] = (((((proc_control_B.Product2_lm *
          -0.01903042325061665 + proc_control_B.t55) + proc_control_B.oa_n) +
          -proc_control_B.t59) - proc_control_B.t65) - proc_control_B.t17 *
          0.01903042325061665) - 0.46415666464918648;
        proc_control_B.d20 = (((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          -5.890830655932608E-5 + proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.0071670223909459834) + proc_control_B.t17 * 2.3842573459475649E-5) +
                              0.00058152618193843065) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
            -0.93255469429176219 - proc_control_B.TmpSignalConversionAtMAT_lt[12]
            * 7.6083411800115719E-5) + proc_control_B.Product2_lm *
           2.3842573459475649E-5);
        proc_control_B.A_l[113] = proc_control_B.d20;
        proc_control_B.d21 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.0071670223909459834 + proc_control_B.TmpSignalConversionAtMAT_lt[12]
          * 0.00145353196782447) - proc_control_B.Product2_lm *
          0.017943464992838758) + ((proc_control_B.TmpSignalConversionAtMAT_lt[7]
          * 0.044446246736648841 - proc_control_B.TmpSignalConversionAtMAT_lt[9]
          * 5.3937622658585171) - proc_control_B.t17 * 0.017943464992838758)) +
          -0.4376454876302136;
        proc_control_B.A_l[114] = proc_control_B.d21;
        proc_control_B.d22 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          0.0012538688125934979 - proc_control_B.TmpSignalConversionAtMAT_lt[12]
          * 0.1118794885864644) + proc_control_B.Product2_lm *
          8.4206769578830268E-5) + proc_control_B.TmpSignalConversionAtMAT_lt[7]
                              * 1.7911420833141059E-5) + ((proc_control_B.t17 *
          8.4206769578830268E-5 + proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.025315910649035739) + 0.0020538236482641531);
        proc_control_B.A_l[115] = proc_control_B.d22;
        proc_control_B.t17 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          1.6661666253314429E-5 + proc_control_B.TmpSignalConversionAtMAT_lt[12]
          * 0.01129023503850542) + proc_control_B.Product2_lm *
          0.00035080205133418912) +
                              ((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          -5.91169722427816 + proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.01257120723021817) + proc_control_B.t17 * 0.00035080205133418912)) +
          0.0085561475935168052;
        proc_control_B.A_l[116] = proc_control_B.t17;
        proc_control_B.oc_h += proc_control_B.t18;
        proc_control_B.A_l[117] = proc_control_B.oc_h;
        proc_control_B.linearScaling -= proc_control_B.Product3_pv;
        proc_control_B.A_l[118] = proc_control_B.linearScaling;
        proc_control_B.Product_n = (-proc_control_B.Product_n +
          -proc_control_B.absxk) + 1.0;
        proc_control_B.A_l[119] = proc_control_B.Product_n;
        proc_control_B.Product3_pv = proc_control_B.xtmp *
          proc_control_B.TmpSignalConversionAtMAT_lt[9];
        proc_control_B.t18 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          2.989993556213668E-6 - proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          1.4431163638272659) + proc_control_B.d * 5.1582899272597018E-6) -
                              proc_control_B.TmpSignalConversionAtMAT_lt[7] *
                              0.143523560675718) + ((proc_control_B.Product3_pv *
          5.1582899272597018E-6 + proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          -0.00041111798914172931) + 0.0001592064792364106);
        proc_control_B.A_l[124] = proc_control_B.t18;
        proc_control_B.absxk = (((proc_control_B.TmpSignalConversionAtMAT_lt[10]
          * 1.0731951852318531 - proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          1.356129262930646E-5) + proc_control_B.d * 2.1981689677272681E-5) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
            -0.001468966557066211 - proc_control_B.TmpSignalConversionAtMAT_lt[8]
            * 0.069014505171846527) + proc_control_B.Product3_pv *
           2.1981689677272681E-5)) + 0.00067844721226150231;
        proc_control_B.A_l[125] = proc_control_B.absxk;
        proc_control_B.A_l[126] = (((((proc_control_B.d * -0.01616685726098728 +
          proc_control_B.theta0) + -proc_control_B.t59) + proc_control_B.ob) +
          proc_control_B.scale) - proc_control_B.Product3_pv *
          0.01616685726098728) - 0.49897707595639768;
        proc_control_B.t59 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          0.069014505171846527 - proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          0.0018646499569661989) + proc_control_B.d * 0.00171795837774031) +
                              ((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          -0.1148218101592509 - proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          5.3937622658585171) + proc_control_B.Product3_pv * 0.00171795837774031))
          + 0.053023406720379938;
        proc_control_B.A_l[127] = proc_control_B.t59;
        proc_control_B.d23 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.00032387772021301561 + proc_control_B.TmpSignalConversionAtMAT_lt
          [11] * 0.143523560675718) - proc_control_B.d * 0.00030055639757781919)
                              + ((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          8.3502908029033716 + proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          0.025315910649035739) - proc_control_B.Product3_pv *
          0.00030055639757781919)) + -0.0092764320240067664;
        proc_control_B.A_l[128] = proc_control_B.d23;
        proc_control_B.Product3_pv =
          (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
             -0.0013492616947596331 -
             proc_control_B.TmpSignalConversionAtMAT_lt[11] *
             0.01448357294143097) - proc_control_B.d * 3.993855127780116E-6) -
           proc_control_B.TmpSignalConversionAtMAT_lt[7] * 2.2977499514997389E-5)
          + ((proc_control_B.TmpSignalConversionAtMAT_lt[8] *
              0.01257120723021817 - proc_control_B.Product3_pv *
              3.993855127780116E-6) - 0.00012326713357346041);
        proc_control_B.A_l[129] = proc_control_B.Product3_pv;
        proc_control_B.A_l[133] = -proc_control_B.t39;
        proc_control_B.A_l[134] = proc_control_B.t42;
        proc_control_B.A_l[135] = proc_control_B.t41;
        proc_control_B.A_l[136] = -proc_control_B.t40;
        proc_control_B.t8 *= proc_control_B.TmpSignalConversionAtMAT_lt[10];
        proc_control_B.d24 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.00010396365424827521 - proc_control_B.TmpSignalConversionAtMAT_lt
          [11] * 0.0030560301354578762) -
          proc_control_B.TmpSignalConversionAtMAT_lt[12] * 0.030270009262121408)
                              - proc_control_B.b_norm * 2.1768827225552109E-5) +
          (((proc_control_B.TmpSignalConversionAtMAT_lt[8] *
             -2.1519484922730651E-5 +
             proc_control_B.TmpSignalConversionAtMAT_lt[9] *
             2.989993556213668E-6) - proc_control_B.t8 * 2.1768827225552109E-5)
           - 0.00043450752945213789);
        proc_control_B.A_l[137] = proc_control_B.d24;
        proc_control_B.d25 = ((((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          0.0028513455484883 - proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          0.00032316342950661811) + proc_control_B.TmpSignalConversionAtMAT_lt
          [12] * 4.2079285691049859E-5) - proc_control_B.b_norm *
          0.0036543398217122828) + ((proc_control_B.TmpSignalConversionAtMAT_lt
          [8] * -9.1703771260780813E-5 +
          proc_control_B.TmpSignalConversionAtMAT_lt[9] * 1.0731951852318531) -
          proc_control_B.t8 * 0.0036543398217122828)) + -0.072940914605035587;
        proc_control_B.A_l[138] = proc_control_B.d25;
        proc_control_B.d26 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          0.023864851221217471 + proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          4.0426879502317728E-6) - proc_control_B.TmpSignalConversionAtMAT_lt[12]
          * 0.00016269010774240791) + ((proc_control_B.b_norm *
          0.0003794960966701478 - proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          0.93255469429176219) - proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          9.1703771260780813E-5)) + (proc_control_B.t8 * 0.0003794960966701478 +
          0.007574772388625705);
        proc_control_B.A_l[139] = proc_control_B.d26;
        proc_control_B.d27 = ((((proc_control_B.b_norm * -0.28560141361437341 +
          proc_control_B.t65) - proc_control_B.scale) - proc_control_B.t8 *
          0.28560141361437341) - 5.7006270182509668) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
            0.00017692814721597281 - proc_control_B.TmpSignalConversionAtMAT_lt
            [11] * 0.00301187450220627) +
           proc_control_B.TmpSignalConversionAtMAT_lt[12] *
           0.0032852614324183722);
        proc_control_B.A_l[140] = proc_control_B.d27;
        proc_control_B.d28 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          0.005100926963153893 + proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          7.54282242443926E-5) + proc_control_B.TmpSignalConversionAtMAT_lt[12] *
          0.76112100692746432) + ((proc_control_B.b_norm * 0.0013404854555911631
          + proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          0.0012538688125934979) - proc_control_B.TmpSignalConversionAtMAT_lt[9]
          * 0.00032387772021301561)) + (proc_control_B.t8 *
          0.0013404854555911631 + 0.026756196718386482);
        proc_control_B.A_l[141] = proc_control_B.d28;
        proc_control_B.t8 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.0085297096290247246 - proc_control_B.TmpSignalConversionAtMAT_lt[11]
          * 0.59953739020136265) - proc_control_B.TmpSignalConversionAtMAT_lt[12]
                              * 6.8948828938803766E-5) + ((proc_control_B.b_norm
          * 0.00066564938883491385 + proc_control_B.TmpSignalConversionAtMAT_lt
          [8] * 1.6661666253314429E-5) -
          proc_control_B.TmpSignalConversionAtMAT_lt[9] * 0.0013492616947596331))
          + (proc_control_B.t8 * 0.00066564938883491385 + 0.013286414946804669);
        proc_control_B.A_l[142] = proc_control_B.t8;
        proc_control_B.A_l[146] = -proc_control_B.t40;
        proc_control_B.A_l[147] = -proc_control_B.t41;
        proc_control_B.A_l[148] = proc_control_B.t42;
        proc_control_B.A_l[149] = proc_control_B.t39;
        proc_control_B.b_norm = proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          proc_control_B.t9;
        proc_control_B.t9 = ((((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.0030560301354578762 + proc_control_B.TmpSignalConversionAtMAT_lt[11]
          * 0.001929418735906703) + proc_control_B.TmpSignalConversionAtMAT_lt
          [12] * 6.2884941489263073E-5) + proc_control_B.t3 *
                              0.001003331497170287) +
                             ((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          9.7602896722846373E-5 - proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          1.4431163638272659) + proc_control_B.b_norm * 0.001003331497170287)) +
          0.0234110682673067;
        proc_control_B.A_l[150] = proc_control_B.t9;
        proc_control_B.d29 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.00032316342950661811 + proc_control_B.TmpSignalConversionAtMAT_lt
          [11] * 4.5292476302332957E-6) -
          proc_control_B.TmpSignalConversionAtMAT_lt[12] * 0.016528998001422841)
                              + proc_control_B.t3 * 1.026911824132076E-5) +
          (((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
             0.00041592787873873338 -
             proc_control_B.TmpSignalConversionAtMAT_lt[9] *
             1.356129262930646E-5) + proc_control_B.b_norm *
            1.026911824132076E-5) + 0.00023961275896415121);
        proc_control_B.A_l[151] = proc_control_B.d29;
        proc_control_B.d30 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          4.0426879502317728E-6 + proc_control_B.TmpSignalConversionAtMAT_lt[11]
          * 0.023860477346842442) - proc_control_B.TmpSignalConversionAtMAT_lt
          [12] * 0.000941018323416786) + ((proc_control_B.t3 *
          -3.9756137245743291E-5 + proc_control_B.TmpSignalConversionAtMAT_lt[7]
          * 0.69409782663856512) + proc_control_B.TmpSignalConversionAtMAT_lt[9]
          * 9.7602896722846373E-5)) + (proc_control_B.b_norm *
          -3.9756137245743291E-5 - 0.00092764320240067675);
        proc_control_B.A_l[152] = proc_control_B.d30;
        proc_control_B.d31 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.00301187450220627 + proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          0.00082864946354184129) - proc_control_B.TmpSignalConversionAtMAT_lt
          [12] * 0.291807921220024) + ((proc_control_B.t3 *
          0.00080268590155159437 + proc_control_B.TmpSignalConversionAtMAT_lt[7]
          * 0.032506453976272241) - proc_control_B.TmpSignalConversionAtMAT_lt[9]
          * 0.0018646499569661989)) + (proc_control_B.b_norm *
          0.00080268590155159437 + 0.018729337702870542);
        proc_control_B.A_l[153] = proc_control_B.d31;
        proc_control_B.t61 = ((((proc_control_B.t3 * -0.058374455968341669 +
          proc_control_B.t61) - proc_control_B.ob) - proc_control_B.b_norm *
          0.058374455968341669) - 1.362070639261306) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[10] * 7.54282242443926E-5
            - proc_control_B.TmpSignalConversionAtMAT_lt[11] *
            0.00019446645525741661) -
           proc_control_B.TmpSignalConversionAtMAT_lt[12] * 0.003324115892995542);
        proc_control_B.A_l[154] = proc_control_B.t61;
        proc_control_B.b_norm = ((((proc_control_B.t3 * 1.6062902063655571E-7 -
          proc_control_B.TmpSignalConversionAtMAT_lt[7] * 7.5569972812640509E-5)
          - proc_control_B.TmpSignalConversionAtMAT_lt[9] * 0.01448357294143097)
          + proc_control_B.b_norm * 1.6062902063655571E-7) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
            -0.59953739020136265 + proc_control_B.TmpSignalConversionAtMAT_lt[11]
            * 0.0085432434746820687) +
           proc_control_B.TmpSignalConversionAtMAT_lt[12] *
           0.0030111351640179931)) + 3.7480104815196341E-6;
        proc_control_B.A_l[155] = proc_control_B.b_norm;
        proc_control_B.A_l[159] = -proc_control_B.t41;
        proc_control_B.A_l[160] = proc_control_B.t40;
        proc_control_B.A_l[161] = -proc_control_B.t39;
        proc_control_B.A_l[162] = proc_control_B.t42;
        proc_control_B.t3 = proc_control_B.TmpSignalConversionAtMAT_lt[12] *
          proc_control_B.oc;
        proc_control_B.oc = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.030270009262121408 + proc_control_B.TmpSignalConversionAtMAT_lt[11]
          * 6.2884941489263073E-5) + proc_control_B.TmpSignalConversionAtMAT_lt
                              [12] * 0.0020006959490984312) - proc_control_B.t4 *
                             0.0001032754577185093) +
          (((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
             1.0571299073092789E-5 + proc_control_B.TmpSignalConversionAtMAT_lt
             [8] * 1.3454180758607359) - proc_control_B.t3 *
            0.0001032754577185093) - 0.0050625224371818262);
        proc_control_B.A_l[163] = proc_control_B.oc;
        proc_control_B.d32 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          4.2079285691049859E-5 - proc_control_B.TmpSignalConversionAtMAT_lt[11]
          * 0.016528998001422841) + proc_control_B.TmpSignalConversionAtMAT_lt
          [12] * 0.00283488707941543) + proc_control_B.t4 *
                              4.3636352726935713E-5) +
          (((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
             -0.74121409319149256 + proc_control_B.TmpSignalConversionAtMAT_lt[8]
             * 1.0571299073092789E-5) + proc_control_B.t3 *
            4.3636352726935713E-5) + 0.0021390368983792022);
        proc_control_B.A_l[164] = proc_control_B.d32;
        proc_control_B.d33 = ((((proc_control_B.t4 * -5.3885346962112674E-7 -
          proc_control_B.TmpSignalConversionAtMAT_lt[7] * 0.00032422410747795261)
          - proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          7.6083411800115719E-5) - proc_control_B.t3 * 5.3885346962112674E-7) +
                              ((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.00016269010774240791 - proc_control_B.TmpSignalConversionAtMAT_lt
          [11] * 0.000941018323416786) -
          proc_control_B.TmpSignalConversionAtMAT_lt[12] * 2.6641242336162E-6))
          + -2.6414385765741509E-5;
        proc_control_B.A_l[165] = proc_control_B.d33;
        proc_control_B.d34 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          0.0032852614324183722 - proc_control_B.TmpSignalConversionAtMAT_lt[11]
          * 0.291807921220024) - proc_control_B.TmpSignalConversionAtMAT_lt[12] *
          0.00063467747547131872) + ((proc_control_B.t4 * 0.00040656429737222281
          + proc_control_B.TmpSignalConversionAtMAT_lt[7] * 0.24400486517334929)
          + proc_control_B.TmpSignalConversionAtMAT_lt[8] * 0.00145353196782447))
          + (proc_control_B.t3 * 0.00040656429737222281 + 0.019929622420207);
        proc_control_B.A_l[166] = proc_control_B.d34;
        proc_control_B.d35 = ((((proc_control_B.t4 * 1.6384160104928689E-7 -
          proc_control_B.TmpSignalConversionAtMAT_lt[7] * 0.001145088836853196)
          - proc_control_B.TmpSignalConversionAtMAT_lt[8] * 0.1118794885864644)
          + proc_control_B.t3 * 1.6384160104928689E-7) +
                              ((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          0.76112100692746432 - proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          0.003324115892995542) - proc_control_B.TmpSignalConversionAtMAT_lt[12]
          * 0.005288701994301117)) + 8.0314510318277867E-6;
        proc_control_B.A_l[167] = proc_control_B.d35;
        proc_control_B.t3 = ((((proc_control_B.t4 * -0.054076220260104418 +
          proc_control_B.t57) - proc_control_B.oa_n) - proc_control_B.t3 *
                              0.054076220260104418) - 2.6507951107894319) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
            -6.8948828938803766E-5 + proc_control_B.TmpSignalConversionAtMAT_lt
            [11] * 0.0030111351640179931) +
           proc_control_B.TmpSignalConversionAtMAT_lt[12] *
           1.7711862430984169E-5);
        proc_control_B.A_l[168] = proc_control_B.t3;
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 169; proc_control_B.Ns++)
        {
          proc_control_B.b_A_m[proc_control_B.Ns] =
            proc_control_B.A_l[proc_control_B.Ns] *
            proc_control_P.Constant3_Value;
        }

        proc_control_expm_m(proc_control_B.b_A_m, &proc_control_B.A[169 *
                            proc_control_B.i]);
        proc_control_B.A_m[39] = proc_control_B.AngularRate_a_idx_1;
        proc_control_B.A_m[40] = proc_control_B.BodyVelocity_c_tmp_idx_0;
        proc_control_B.A_m[41] = proc_control_B.BodyVelocity_c_idx_1;
        proc_control_B.A_m[43] = proc_control_B.Product1_j1;
        proc_control_B.A_m[44] = proc_control_B.t44;
        proc_control_B.A_m[45] = proc_control_B.t45;
        proc_control_B.A_m[46] = proc_control_B.rtb_sincos_o1_tmp;
        proc_control_B.A_m[47] = proc_control_B.rq_idx_1;
        proc_control_B.A_m[48] = proc_control_B.rq_idx_2;
        proc_control_B.A_m[49] = proc_control_B.d_h;
        proc_control_B.A_m[50] = proc_control_B.d1;
        proc_control_B.A_m[51] = proc_control_B.d2;
        proc_control_B.A_m[52] = proc_control_B.d3;
        proc_control_B.A_m[53] = proc_control_B.n_k;
        proc_control_B.A_m[54] = proc_control_B.od;
        proc_control_B.A_m[55] = -proc_control_B.Product1_j1;
        proc_control_B.A_m[57] = -proc_control_B.t45;
        proc_control_B.A_m[58] = proc_control_B.t44;
        proc_control_B.A_m[59] = proc_control_B.t70_tmp;
        proc_control_B.A_m[60] = proc_control_B.t27_tmp;
        proc_control_B.A_m[61] = proc_control_B.d4;
        proc_control_B.A_m[62] = proc_control_B.d5;
        proc_control_B.A_m[63] = proc_control_B.d6;
        proc_control_B.A_m[64] = proc_control_B.d7;
        proc_control_B.A_m[65] = proc_control_B.t27;
        proc_control_B.A_m[66] = proc_control_B.n_tmp;
        proc_control_B.A_m[67] = proc_control_B.dp;
        proc_control_B.A_m[68] = -proc_control_B.t44;
        proc_control_B.A_m[69] = proc_control_B.t45;
        proc_control_B.A_m[71] = -proc_control_B.Product1_j1;
        proc_control_B.A_m[72] = proc_control_B.t32_tmp;
        proc_control_B.A_m[73] = proc_control_B.t33;
        proc_control_B.A_m[74] = proc_control_B.t34;
        proc_control_B.A_m[75] = proc_control_B.d8;
        proc_control_B.A_m[76] = proc_control_B.d9;
        proc_control_B.A_m[77] = proc_control_B.d10;
        proc_control_B.A_m[78] = proc_control_B.t70;
        proc_control_B.A_m[79] = proc_control_B.t26;
        proc_control_B.A_m[80] = proc_control_B.t15;
        proc_control_B.A_m[81] = -proc_control_B.t45;
        proc_control_B.A_m[82] = -proc_control_B.t44;
        proc_control_B.A_m[83] = proc_control_B.Product1_j1;
        proc_control_B.A_m[85] = proc_control_B.t28;
        proc_control_B.A_m[86] = proc_control_B.t16;
        proc_control_B.A_m[87] = proc_control_B.od_tmp;
        proc_control_B.A_m[88] = proc_control_B.dp_tmp;
        proc_control_B.A_m[89] = proc_control_B.t32;
        proc_control_B.A_m[90] = proc_control_B.d11;
        proc_control_B.A_m[91] = proc_control_B.A_tmp;
        proc_control_B.A_m[92] = proc_control_B.d12;
        proc_control_B.A_m[93] = proc_control_B.d13;
        proc_control_B.A_m[98] = proc_control_B.d14;
        proc_control_B.A_m[99] = proc_control_B.d15;
        proc_control_B.A_m[100] = proc_control_B.d16;
        proc_control_B.A_m[101] = proc_control_B.d17;
        proc_control_B.A_m[102] = proc_control_B.d18;
        proc_control_B.A_m[103] = proc_control_B.t_f;
        proc_control_B.A_m[104] = proc_control_B.trajClear;
        proc_control_B.A_m[105] = proc_control_B.rtb_Sum6_idx_1;
        proc_control_B.A_m[106] = proc_control_B.t14;
        proc_control_B.A_m[111] = proc_control_B.d19;
        proc_control_B.A_m[112] = (((((proc_control_B.Product2_lm *
          -0.01903042325061665 + proc_control_B.t55) + proc_control_B.oa_n) +
          proc_control_B.t60) - proc_control_B.t65) - proc_control_B.oa *
          proc_control_B.TmpSignalConversionAtMAT_lt[8] * 0.01903042325061665) -
          0.46415666464918648;
        proc_control_B.A_m[113] = proc_control_B.d20;
        proc_control_B.A_m[114] = proc_control_B.d21;
        proc_control_B.A_m[115] = proc_control_B.d22;
        proc_control_B.A_m[116] = proc_control_B.t17;
        proc_control_B.A_m[117] = proc_control_B.oc_h;
        proc_control_B.A_m[118] = proc_control_B.linearScaling;
        proc_control_B.A_m[119] = proc_control_B.Product_n;
        proc_control_B.A_m[124] = proc_control_B.t18;
        proc_control_B.A_m[125] = proc_control_B.absxk;
        proc_control_B.A_m[126] = (((((proc_control_B.d * -0.01616685726098728 +
          proc_control_B.theta0) + proc_control_B.t60) + proc_control_B.ob) +
          proc_control_B.scale) - proc_control_B.xtmp *
          proc_control_B.TmpSignalConversionAtMAT_lt[9] * 0.01616685726098728) -
          0.49897707595639768;
        proc_control_B.A_m[127] = proc_control_B.t59;
        proc_control_B.A_m[128] = proc_control_B.d23;
        proc_control_B.A_m[129] = proc_control_B.Product3_pv;
        proc_control_B.A_m[133] = -proc_control_B.t39;
        proc_control_B.A_m[134] = proc_control_B.t42;
        proc_control_B.A_m[135] = proc_control_B.t41;
        proc_control_B.A_m[136] = -proc_control_B.t40;
        proc_control_B.A_m[137] = proc_control_B.d24;
        proc_control_B.A_m[138] = proc_control_B.d25;
        proc_control_B.A_m[139] = proc_control_B.d26;
        proc_control_B.A_m[140] = proc_control_B.d27;
        proc_control_B.A_m[141] = proc_control_B.d28;
        proc_control_B.A_m[142] = proc_control_B.t8;
        proc_control_B.A_m[146] = -proc_control_B.t40;
        proc_control_B.A_m[147] = -proc_control_B.t41;
        proc_control_B.A_m[148] = proc_control_B.t42;
        proc_control_B.A_m[149] = proc_control_B.t39;
        proc_control_B.A_m[150] = proc_control_B.t9;
        proc_control_B.A_m[151] = proc_control_B.d29;
        proc_control_B.A_m[152] = proc_control_B.d30;
        proc_control_B.A_m[153] = proc_control_B.d31;
        proc_control_B.A_m[154] = proc_control_B.t61;
        proc_control_B.A_m[155] = proc_control_B.b_norm;
        proc_control_B.A_m[159] = -proc_control_B.t41;
        proc_control_B.A_m[160] = proc_control_B.t40;
        proc_control_B.A_m[161] = -proc_control_B.t39;
        proc_control_B.A_m[162] = proc_control_B.t42;
        proc_control_B.A_m[163] = proc_control_B.oc;
        proc_control_B.A_m[164] = proc_control_B.d32;
        proc_control_B.A_m[165] = proc_control_B.d33;
        proc_control_B.A_m[166] = proc_control_B.d34;
        proc_control_B.A_m[167] = proc_control_B.d35;
        proc_control_B.A_m[168] = proc_control_B.t3;
        proc_control_B.Ns = 0;
        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 6;
             proc_control_B.idx_p++) {
          for (proc_control_B.st_Value_size_idx_1 = 0;
               proc_control_B.st_Value_size_idx_1 < 6;
               proc_control_B.st_Value_size_idx_1++) {
            proc_control_B.Ns_d = (proc_control_B.st_Value_size_idx_1 +
              proc_control_B.ibmat) + 98;
            proc_control_B.n_l = proc_control_B.st_Value_size_idx_1 +
              proc_control_B.Ns;
            proc_control_B.dCoefs[proc_control_B.n_l] =
              proc_control_B.A_m[proc_control_B.Ns_d];
            proc_control_B.b_A_p[proc_control_B.n_l] =
              proc_control_B.A[proc_control_B.Ns_d] -
              proc_control_B.b_newCoefs[proc_control_B.n_l];
          }

          proc_control_B.Ns += 6;
          proc_control_B.ibmat += 13;
        }

        mldivide_Z0xqFpTr(proc_control_B.dCoefs, proc_control_B.b_A_p,
                          proc_control_B.constValues_p);
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 6; proc_control_B.Ns++)
        {
          proc_control_B.ibmat = 0;
          for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 8;
               proc_control_B.idx_p++) {
            proc_control_B.st_Value_size_idx_1 = proc_control_B.ibmat +
              proc_control_B.Ns;
            proc_control_B.dv11[proc_control_B.st_Value_size_idx_1] = 0.0;
            proc_control_B.Ns_d = 0;
            for (proc_control_B.n_l = 0; proc_control_B.n_l < 6;
                 proc_control_B.n_l++) {
              proc_control_B.dv11[proc_control_B.st_Value_size_idx_1] +=
                proc_control_B.constValues_p[proc_control_B.Ns_d +
                proc_control_B.Ns] * c_b[proc_control_B.n_l +
                proc_control_B.ibmat];
              proc_control_B.Ns_d += 6;
            }

            proc_control_B.ibmat += 6;
          }
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 7;
               proc_control_B.ibmat++) {
            proc_control_B.B[(proc_control_B.ibmat + 13 * proc_control_B.Ns) +
              104 * proc_control_B.i] = 0.0;
          }

          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
               proc_control_B.ibmat++) {
            proc_control_B.B[((proc_control_B.ibmat + 13 * proc_control_B.Ns) +
                              104 * proc_control_B.i) + 7] =
              proc_control_B.dv11[6 * proc_control_B.Ns + proc_control_B.ibmat];
          }
        }

        proc_control_B.ibmat = 0;
        while (proc_control_B.ibmat <= static_cast<int32_T>
               (proc_control_P.Constant1_Value_k) - 1) {
          proc_control_B.Product2_lm = proc_control_P.Constant3_Value /
            proc_control_P.Constant1_Value_k;
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
          {
            proc_control_B.rtb_u_scale_jk[proc_control_B.Ns] =
              proc_control_DW.Delay1_DSTATE[11 * proc_control_B.Ns +
              proc_control_B.i];
          }

          proc_co_AUV8QuatSimFcn_AbfqyrNU
            (proc_control_B.TmpSignalConversionAtMAT_lt,
             proc_control_B.rtb_u_scale_jk, proc_control_B.imz);
          for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns
               ++) {
            proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.Ns] +=
              proc_control_B.imz[proc_control_B.Ns] * proc_control_B.Product2_lm;
          }

          proc_control_B.d = norm_115oznfV
            (&proc_control_B.TmpSignalConversionAtMAT_lt[3]);
          proc_control_B.TmpSignalConversionAtMAT_lt[3] /= proc_control_B.d;
          proc_control_B.TmpSignalConversionAtMAT_lt[4] /= proc_control_B.d;
          proc_control_B.TmpSignalConversionAtMAT_lt[5] /= proc_control_B.d;
          proc_control_B.TmpSignalConversionAtMAT_lt[6] /= proc_control_B.d;
          proc_control_B.ibmat++;
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.U[proc_control_B.Ns + (proc_control_B.i << 3)] =
            proc_control_DW.Delay1_DSTATE[11 * proc_control_B.Ns +
            proc_control_B.i];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.xtmp = proc_control_B.K_dz[proc_control_B.Ns];
          proc_control_B.ibmat = 13 * proc_control_B.i + proc_control_B.Ns;
          proc_control_B.Y_p[proc_control_B.ibmat] = proc_control_B.xtmp;
          proc_control_B.X_d[proc_control_B.ibmat] = proc_control_B.xtmp;
          proc_control_B.DX[proc_control_B.ibmat] =
            proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.Ns] -
            proc_control_B.xtmp;
        }
      }

      // End of MATLAB Function: '<S126>/MATLAB Function2'

      // MATLAB Function: '<S192>/FixedHorizonOptimizer'
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 3003; proc_control_B.Ns++)
      {
        proc_control_B.b_C[proc_control_B.Ns] = d_1[proc_control_B.Ns];
      }

      std::memcpy(&proc_control_B.b_A[0], &e_0[0], 4851U * sizeof(real_T));
      std::memset(&proc_control_B.Bu[0], 0, 1848U * sizeof(real_T));
      std::memset(&proc_control_B.Bv[0], 0, 231U * sizeof(real_T));
      std::memset(&proc_control_B.Dv[0], 0, 143U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 21; proc_control_B.Ns++) {
        std::memcpy(&proc_control_B.b_A[proc_control_B.Ns * 21],
                    &b_0[proc_control_B.Ns * 21], 21U * sizeof(real_T));
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
             proc_control_B.ibmat++) {
          proc_control_B.i = 13 * proc_control_B.Ns + proc_control_B.ibmat;
          proc_control_B.b_C[proc_control_B.i] = d_0[proc_control_B.i];
        }
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.iv1[proc_control_B.Ns] = proc_control_B.Ns + 1;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.iv[proc_control_B.Ns] = proc_control_B.Ns + 1;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.rtb_u_scale_jk[proc_control_B.Ns] = 1.0;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.imz[proc_control_B.Ns] = 1.0;
      }

      std::memcpy(&proc_control_B.rtb_B_m[0], &(*(real_T (*)[104])&
        proc_control_B.B[0])[0], 104U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_B[0], &c_0[0], 630U * sizeof(real_T));

      // MATLAB Function: '<S192>/FixedHorizonOptimizer' incorporates:
      //   DiscretePulseGenerator: '<S127>/Pulse Generator'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   If: '<S10>/If'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S122>/N to A'
      //   Lookup_n-D: '<S122>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   MATLABSystem: '<S123>/MATLAB System'
      //   MATLABSystem: '<S290>/MATLAB System1'
      //   MATLABSystem: '<S311>/MATLAB System11'
      //   MATLABSystem: '<S311>/MATLAB System3'
      //   MATLABSystem: '<S311>/MATLAB System6'
      //   Merge generated from: '<S9>/Merge'
      //   SwitchCase: '<S9>/Switch Case'
      //   Trigonometry: '<S254>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //   UniformRandomNumber: '<S12>/ Drift'
      //
      proc_c_mpc_plantupdate_opKkKWqM(&proc_control_B.A[0],
        proc_control_B.rtb_B_m, &proc_control_B.C[0], &proc_control_B.b_A[0],
        proc_control_B.b_B, &proc_control_B.b_C[0], l, proc_control_B.iv1,
        proc_control_B.iv, proc_control_B.rtb_u_scale_jk, proc_control_B.imz,
        &proc_control_B.Bu[0], &proc_control_B.Bv[0], proc_control_B.b_C_a,
        &proc_control_B.Dv[0], proc_control_B.z_g, proc_control_B.b_A_h,
        proc_control_B.A_l, proc_control_B.Nk);
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.iv1[proc_control_B.Ns] = proc_control_B.Ns + 1;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.iv[proc_control_B.Ns] = proc_control_B.Ns + 1;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.rtb_u_scale_jk[proc_control_B.Ns] = 1.0;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        proc_control_B.imz[proc_control_B.Ns] = 1.0;
      }

      proc_control_B.Ns_d = 0;
      proc_control_B.st_Value_size_idx_1 = 0;
      proc_control_B.b_n = 0;
      proc_control_B.n_l = 0;
      proc_control_B.itoken = 0;
      proc_control_B.b_k = 0;
      proc_control_B.f_j = 0;
      proc_control_B.ntoread = 0;
      proc_control_B.str_size_idx_1 = 0;
      for (proc_control_B.i = 0; proc_control_B.i < 10; proc_control_B.i++) {
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 30;
             proc_control_B.ibmat++) {
          for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 13;
               proc_control_B.idx_p++) {
            proc_control_B.b_idx = proc_control_B.idx_p + proc_control_B.Ns;
            proc_control_B.b_D[proc_control_B.b_idx] = b_D[(proc_control_B.b_idx
              + proc_control_B.str_size_idx_1) + 390];
          }

          proc_control_B.Ns += 13;
        }

        std::memcpy(&proc_control_B.rtb_B_m[0], &(*(real_T (*)[104])&
          proc_control_B.B[proc_control_B.st_Value_size_idx_1 + 104])[0], 104U *
                    sizeof(real_T));
        std::memcpy(&proc_control_B.b_B[0], &(*(real_T (*)[630])&
          b_B[proc_control_B.n_l + 630])[0], 630U * sizeof(real_T));
        proc_c_mpc_plantupdate_opKkKWqM(&proc_control_B.A[proc_control_B.Ns_d +
          169], proc_control_B.rtb_B_m, &proc_control_B.C[proc_control_B.Ns_d +
          169], &proc_control_B.b_A[proc_control_B.b_n + 441],
          proc_control_B.b_B, &proc_control_B.b_C[proc_control_B.itoken + 273],
          proc_control_B.b_D, proc_control_B.iv1, proc_control_B.iv,
          proc_control_B.rtb_u_scale_jk, proc_control_B.imz,
          &proc_control_B.Bu[proc_control_B.b_k + 168],
          &proc_control_B.Bv[proc_control_B.f_j + 21], proc_control_B.b_C_a,
          &proc_control_B.Dv[proc_control_B.ntoread + 13], proc_control_B.K_dz,
          proc_control_B.b_A_h, proc_control_B.A_l, proc_control_B.Nk);
        proc_control_B.Ns_d += 169;
        proc_control_B.st_Value_size_idx_1 += 104;
        proc_control_B.b_n += 441;
        proc_control_B.n_l += 630;
        proc_control_B.itoken += 273;
        proc_control_B.b_k += 168;
        proc_control_B.f_j += 21;
        proc_control_B.ntoread += 13;
        proc_control_B.str_size_idx_1 += 390;
      }

      std::memcpy(&proc_control_B.b_Mlim[0], &e[0], 226U * sizeof(real_T));
      std::memset(&proc_control_B.b_utarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_xoff[0], &f_0[0], 21U * sizeof(real_T));
      std::memcpy(&proc_control_B.U_kv[0], &proc_control_B.U[0], sizeof(real_T) <<
                  3U);
      std::memcpy(&proc_control_B.z_g[0], &proc_control_B.Y_p[0], 13U * sizeof
                  (real_T));
      std::memcpy(&proc_control_B.u_scale[0], &proc_control_B.U[0], sizeof
                  (real_T) << 3U);
      for (proc_control_B.i = 0; proc_control_B.i < 226; proc_control_B.i++) {
        proc_control_B.xtmp = proc_control_B.b_Mlim[proc_control_B.i];
        proc_control_B.Ns = b_Mrows_0[proc_control_B.i];
        if (proc_control_B.Ns <= 130) {
          proc_control_B.Ns = (proc_control_B.Ns - div_nde_s32_floor
                               (proc_control_B.Ns - 1, 13) * 13) - 1;
          proc_control_B.xtmp += old_yoff[proc_control_B.Ns] -
            proc_control_B.z_g[proc_control_B.Ns];
        } else if (proc_control_B.Ns <= 260) {
          proc_control_B.Ns = (proc_control_B.Ns - div_nde_s32_floor
                               (proc_control_B.Ns - 131, 13) * 13) - 131;
          proc_control_B.xtmp -= old_yoff[proc_control_B.Ns] -
            proc_control_B.z_g[proc_control_B.Ns];
        } else if (proc_control_B.Ns <= 340) {
          proc_control_B.xtmp += 0.0 - proc_control_B.U_kv[(proc_control_B.Ns -
            (((proc_control_B.Ns - 261) >> 3) << 3)) - 261];
        } else {
          proc_control_B.xtmp -= 0.0 - proc_control_B.U_kv[proc_control_B.Ns -
            341];
        }

        proc_control_B.b_Mlim[proc_control_B.i] = proc_control_B.xtmp;
      }

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.xtmp = proc_control_B.U_kv[proc_control_B.i];
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 10;
             proc_control_B.ibmat++) {
          proc_control_B.idx_p = proc_control_B.Ns + proc_control_B.i;
          proc_control_B.b_utarget[proc_control_B.idx_p] -= proc_control_B.xtmp;
          proc_control_B.Ns += 8;
        }
      }

      std::memcpy(&proc_control_B.b_xoff[0], &proc_control_B.X_d[0], 13U *
                  sizeof(real_T));
      std::memcpy(&proc_control_B.Bv[0], &proc_control_B.DX[0], 13U * sizeof
                  (real_T));
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 10;
           proc_control_B.idx_p++) {
        for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.K_dz[proc_control_B.Ns] =
            proc_control_B.b_xoff[proc_control_B.Ns] - proc_control_B.X_d
            [(proc_control_B.idx_p + 1) * 13 + proc_control_B.Ns];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++)
        {
          proc_control_B.rtb_u_scale_jk[proc_control_B.Ns] =
            proc_control_B.u_scale[proc_control_B.Ns] - proc_control_B.U
            [((proc_control_B.idx_p + 1) << 3) + proc_control_B.Ns];
        }

        for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++)
        {
          proc_control_B.AngularRate_a_idx_1 = 0.0;
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
               proc_control_B.ibmat++) {
            proc_control_B.AngularRate_a_idx_1 += proc_control_B.b_A[(21 *
              proc_control_B.ibmat + proc_control_B.Ns) + (proc_control_B.idx_p
              + 1) * 441] * proc_control_B.K_dz[proc_control_B.ibmat];
          }

          proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.Ns] = 0.0;
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
               proc_control_B.ibmat++) {
            proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.Ns] +=
              proc_control_B.Bu[(21 * proc_control_B.ibmat + proc_control_B.Ns)
              + (proc_control_B.idx_p + 1) * 168] *
              proc_control_B.rtb_u_scale_jk[proc_control_B.ibmat];
          }

          proc_control_B.i = (proc_control_B.idx_p + 1) * 13 + proc_control_B.Ns;
          proc_control_B.Bv[proc_control_B.Ns + 21 * (proc_control_B.idx_p + 1)]
            = (((proc_control_B.DX[proc_control_B.i] +
                 proc_control_B.X_d[proc_control_B.i]) -
                proc_control_B.b_xoff[proc_control_B.Ns]) +
               proc_control_B.AngularRate_a_idx_1) +
            proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.Ns];
          proc_control_B.AngularRate_a_idx_1 = 0.0;
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
               proc_control_B.ibmat++) {
            proc_control_B.AngularRate_a_idx_1 += proc_control_B.b_C[(13 *
              proc_control_B.ibmat + proc_control_B.Ns) + (proc_control_B.idx_p
              + 1) * 273] * proc_control_B.K_dz[proc_control_B.ibmat];
          }

          proc_control_B.Dv[proc_control_B.i] =
            (proc_control_B.Y_p[proc_control_B.i] -
             proc_control_B.z_g[proc_control_B.Ns]) +
            proc_control_B.AngularRate_a_idx_1;
        }
      }

      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 11;
           proc_control_B.ibmat++) {
        // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
        //   ActionPort: '<S308>/Action Port'

        // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S123>/Action Port'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S290>/Action Port'

        proc_control_B.vseq[proc_control_B.ibmat] = 1.0;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
        // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
      }

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S225>/Enable'

      // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
      //   EnablePort: '<S253>/Enable'

      proc_control_B.Ns = 0;

      // End of Outputs for SubSystem: '<S250>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 10;
           proc_control_B.idx_p++) {
        // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
        //   ActionPort: '<S308>/Action Port'

        // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S123>/Action Port'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S290>/Action Port'

        proc_control_B.Ns_d = 0;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
        // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
             proc_control_B.ibmat++) {
          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S225>/Enable'

          // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
          //   EnablePort: '<S253>/Enable'

          // Outputs for IfAction SubSystem: '<S10>/Get_ROS_param ' incorporates:
          //   ActionPort: '<S308>/Action Port'

          // Outputs for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' incorporates:
          //   ActionPort: '<S123>/Action Port'

          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S290>/Action Port'

          proc_control_B.y_j[proc_control_B.ibmat + proc_control_B.Ns] =
            proc_control_B.Reference[proc_control_B.Ns_d + proc_control_B.idx_p]
            - proc_control_B.z_g[proc_control_B.ibmat];

          // End of Outputs for SubSystem: '<S250>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          proc_control_B.Ns_d += 10;

          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          // End of Outputs for SubSystem: '<S120>/Adaptive MPC quaternion '
          // End of Outputs for SubSystem: '<S10>/Get_ROS_param '
        }

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S225>/Enable'

        // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
        //   EnablePort: '<S253>/Enable'

        proc_control_B.Ns += 13;

        // End of Outputs for SubSystem: '<S250>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      // SignalConversion generated from: '<S193>/ SFunction ' incorporates:
      //   Constant: '<S126>/Constant'
      //   MATLAB Function: '<S192>/FixedHorizonOptimizer'
      //   UnitDelay: '<S164>/last_mv'

      proc_control_B.rtb_TmpSignalConversionAtMAT__k[0] =
        proc_control_B.WorldPosition[0] - proc_control_B.b_xoff[0];
      proc_control_B.rtb_TmpSignalConversionAtMAT__k[1] =
        proc_control_B.WorldPosition[1] - proc_control_B.b_xoff[1];
      proc_control_B.rtb_TmpSignalConversionAtMAT__k[2] =
        proc_control_B.WorldPosition[2] - proc_control_B.b_xoff[2];
      proc_control_B.rtb_TmpSignalConversionAtMAT__k[3] = proc_control_B.qS2W[0]
        - proc_control_B.b_xoff[3];
      proc_control_B.rtb_TmpSignalConversionAtMAT__k[4] = proc_control_B.qS2W[1]
        - proc_control_B.b_xoff[4];
      proc_control_B.rtb_TmpSignalConversionAtMAT__k[5] = proc_control_B.qS2W[2]
        - proc_control_B.b_xoff[5];
      proc_control_B.rtb_TmpSignalConversionAtMAT__k[6] = proc_control_B.qS2W[3]
        - proc_control_B.b_xoff[6];
      proc_control_B.rtb_TmpSignalConversionAtMAT__k[7] =
        proc_control_B.BodyVelocity[0] - proc_control_B.b_xoff[7];
      proc_control_B.rtb_TmpSignalConversionAtMAT__k[10] =
        proc_control_B.AngularRate[0] - proc_control_B.b_xoff[10];
      proc_control_B.rtb_TmpSignalConversionAtMAT__k[8] =
        proc_control_B.BodyVelocity[1] - proc_control_B.b_xoff[8];
      proc_control_B.rtb_TmpSignalConversionAtMAT__k[11] =
        proc_control_B.AngularRate[1] - proc_control_B.b_xoff[11];
      proc_control_B.rtb_TmpSignalConversionAtMAT__k[9] =
        proc_control_B.BodyVelocity[2] - proc_control_B.b_xoff[9];
      proc_control_B.rtb_TmpSignalConversionAtMAT__k[12] =
        proc_control_B.AngularRate[2] - proc_control_B.b_xoff[12];
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.rtb_TmpSignalConversionAtMAT__k[proc_control_B.Ns + 13] =
          proc_control_P.Constant_Value_ct[proc_control_B.Ns] -
          proc_control_B.b_xoff[proc_control_B.Ns + 13];
        proc_control_B.rtb_u_scale_jk[proc_control_B.Ns] =
          proc_control_DW.last_mv_DSTATE[proc_control_B.Ns] -
          proc_control_B.u_scale[proc_control_B.Ns];
      }

      // End of SignalConversion generated from: '<S193>/ SFunction '

      // MATLAB Function: '<S192>/FixedHorizonOptimizer'
      std::memset(&proc_control_B.dv1[0], 0, 2486U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv17[proc_control_B.Ns] = 1.0;
      }

      std::memcpy(&proc_control_B.q_g[0], &q[0], 4746U * sizeof(real_T));
      std::memcpy(&proc_control_B.s_j[0], &s[0], 1808U * sizeof(real_T));
      std::memcpy(&proc_control_B.t[0], &t[0], 81U * sizeof(real_T));
      std::memcpy(&proc_control_B.u_o[0], &u[0], 2034U * sizeof(real_T));
      std::memcpy(&proc_control_B.bv[0], &proc_control_DW.Memory_PreviousInput[0],
                  226U * sizeof(boolean_T));

      // Update for Memory: '<S164>/Memory' incorporates:
      //   MATLAB Function: '<S192>/FixedHorizonOptimizer'
      //   MATLABSystem: '<S121>/MPC manager'
      //   Math: '<S164>/Math Function'
      //   Math: '<S164>/Math Function1'
      //   Math: '<S164>/Math Function2'
      //   Merge generated from: '<S120>/Merge'

      proc_control_mpcblock_optimizer(proc_control_B.y_j, proc_control_B.vseq,
        proc_control_B.mvmin, proc_control_B.mvmax,
        proc_control_B.rtb_TmpSignalConversionAtMAT__k,
        proc_control_B.rtb_u_scale_jk, proc_control_B.bv, proc_control_B.b_Mlim,
        proc_control_B.q_g, proc_control_B.s_j, proc_control_B.dv1,
        proc_control_B.b_utarget, proc_control_B.u_scale, proc_control_B.t,
        proc_control_B.u_o, proc_control_B.ywt, proc_control_B.mvwt,
        proc_control_B.dmwwt, v, w, proc_control_B.b_A, proc_control_B.Bu,
        proc_control_B.Bv, proc_control_B.b_C, proc_control_B.Dv, b_Mrows_0,
        proc_control_B.dv17, proc_control_B.U_kv, proc_control_B.U,
        &proc_control_B.MpcStatus, proc_control_DW.Memory_PreviousInput);

      // Merge generated from: '<S120>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S126>/Pulse Generator'

      proc_control_B.alive = (proc_control_DW.clockTickCounter_g <
        proc_control_P.PulseGenerator_Duty_j) &&
        (proc_control_DW.clockTickCounter_g >= 0) ?
        proc_control_P.PulseGenerator_Amp_i : 0.0;

      // DiscretePulseGenerator: '<S126>/Pulse Generator'
      if (proc_control_DW.clockTickCounter_g >=
          proc_control_P.PulseGenerator_Period_e - 1.0) {
        proc_control_DW.clockTickCounter_g = 0;
      } else {
        proc_control_DW.clockTickCounter_g++;
      }

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.xtmp = proc_control_B.U_kv[proc_control_B.i];

        // Merge generated from: '<S120>/Merge' incorporates:
        //   Gain: '<S164>/u_scale'
        //   SignalConversion generated from: '<S126>/out'

        proc_control_B.mv[proc_control_B.i] =
          proc_control_P.u_scale_Gain_i[proc_control_B.i] * proc_control_B.xtmp;

        // Update for UnitDelay: '<S164>/last_mv' incorporates:
        //   Merge generated from: '<S120>/Merge'
        //   SignalConversion generated from: '<S126>/out'

        proc_control_DW.last_mv_DSTATE[proc_control_B.i] = proc_control_B.xtmp;
      }

      // Update for Delay: '<S126>/Delay1' incorporates:
      //   Gain: '<S164>/u_scale'
      //   Gain: '<S164>/useq_scale'
      //   Merge generated from: '<S120>/Merge'
      //   SignalConversion generated from: '<S126>/out'

      for (proc_control_B.i = 0; proc_control_B.i < 88; proc_control_B.i++) {
        proc_control_DW.Delay1_DSTATE[proc_control_B.i] =
          proc_control_P.useq_scale_Gain[proc_control_B.i] *
          proc_control_B.U[proc_control_B.i];
      }

      // End of Update for Delay: '<S126>/Delay1'
      // End of Outputs for SubSystem: '<S120>/LTV MPC quaternion '
      break;

     case 3:
      if (proc_control_B.rtAction != proc_control_B.rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S120>/Quaternion Non linear MPC (Not for codegen)' incorporates:
        //   ActionPort: '<S127>/Action Port'

        // InitializeConditions for SwitchCase: '<S120>/Switch Case' incorporates:
        //   Delay: '<S127>/Delay'
        //   Delay: '<S197>/mv_Delay'
        //   Delay: '<S197>/slack_delay'
        //   Delay: '<S197>/x_Delay'
        //   DiscretePulseGenerator: '<S127>/Pulse Generator'

        std::memcpy(&proc_control_DW.Delay_DSTATE_a[0],
                    &proc_control_P.Delay_InitialCondition[0], sizeof(real_T) <<
                    3U);
        proc_control_DW.icLoad = true;
        proc_control_DW.icLoad_a = true;
        proc_control_DW.icLoad_j = true;
        proc_control_DW.clockTickCounter = 0;

        // End of InitializeConditions for SubSystem: '<S120>/Quaternion Non linear MPC (Not for codegen)' 
      }

      // Outputs for IfAction SubSystem: '<S120>/Quaternion Non linear MPC (Not for codegen)' incorporates:
      //   ActionPort: '<S127>/Action Port'

      // Reshape: '<S196>/Reshape'
      proc_control_B.CostFcn_workspace_runtimedata.x[0] =
        proc_control_B.WorldPosition[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[1] =
        proc_control_B.WorldPosition[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[2] =
        proc_control_B.WorldPosition[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[3] = proc_control_B.qS2W[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[4] = proc_control_B.qS2W[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[5] = proc_control_B.qS2W[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[6] = proc_control_B.qS2W[3];
      proc_control_B.CostFcn_workspace_runtimedata.x[7] =
        proc_control_B.BodyVelocity[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[10] =
        proc_control_B.AngularRate[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[8] =
        proc_control_B.BodyVelocity[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[11] =
        proc_control_B.AngularRate[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[9] =
        proc_control_B.BodyVelocity[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[12] =
        proc_control_B.AngularRate[2];

      // Delay: '<S197>/mv_Delay' incorporates:
      //   Constant: '<S197>/ones'
      //   Delay: '<S127>/Delay'
      //   Product: '<S197>/Product'

      if (proc_control_DW.icLoad) {
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
             proc_control_B.ibmat++) {
          for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 11;
               proc_control_B.idx_p++) {
            proc_control_DW.mv_Delay_DSTATE[proc_control_B.idx_p +
              proc_control_B.Ns] =
              proc_control_P.ones_Value[proc_control_B.idx_p] *
              proc_control_DW.Delay_DSTATE_a[proc_control_B.ibmat];
          }

          proc_control_B.Ns += 11;
        }
      }

      // Selector: '<S197>/Selector1' incorporates:
      //   Constant: '<S197>/Constant1'
      //   Delay: '<S197>/mv_Delay'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
             proc_control_B.ibmat++) {
          proc_control_B.Selector1_n[proc_control_B.ibmat + 9 *
            proc_control_B.Ns] = proc_control_DW.mv_Delay_DSTATE[(11 *
            proc_control_B.Ns + static_cast<int32_T>
            (proc_control_P.Constant1_Value_i[proc_control_B.ibmat])) - 1];
        }
      }

      // End of Selector: '<S197>/Selector1'

      // Delay: '<S197>/x_Delay' incorporates:
      //   Constant: '<S197>/ones'
      //   Product: '<S197>/Product1'

      if (proc_control_DW.icLoad_a) {
        // Product: '<S197>/Product1' incorporates:
        //   Reshape: '<S197>/reshape_x'

        proc_control_B.imz[0] = proc_control_B.WorldPosition[0];
        proc_control_B.imz[1] = proc_control_B.WorldPosition[1];
        proc_control_B.imz[2] = proc_control_B.WorldPosition[2];
        proc_control_B.imz[3] = proc_control_B.qS2W[0];
        proc_control_B.imz[4] = proc_control_B.qS2W[1];
        proc_control_B.imz[5] = proc_control_B.qS2W[2];
        proc_control_B.imz[6] = proc_control_B.qS2W[3];
        proc_control_B.imz[7] = proc_control_B.BodyVelocity[0];
        proc_control_B.imz[10] = proc_control_B.AngularRate[0];
        proc_control_B.imz[8] = proc_control_B.BodyVelocity[1];
        proc_control_B.imz[11] = proc_control_B.AngularRate[1];
        proc_control_B.imz[9] = proc_control_B.BodyVelocity[2];
        proc_control_B.imz[12] = proc_control_B.AngularRate[2];
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
             proc_control_B.ibmat++) {
          for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 11;
               proc_control_B.idx_p++) {
            proc_control_DW.x_Delay_DSTATE[proc_control_B.idx_p +
              proc_control_B.Ns] =
              proc_control_P.ones_Value[proc_control_B.idx_p] *
              proc_control_B.imz[proc_control_B.ibmat];
          }

          proc_control_B.Ns += 11;
        }
      }

      // Selector: '<S197>/Selector' incorporates:
      //   Constant: '<S197>/Constant'
      //   Delay: '<S197>/x_Delay'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 13; proc_control_B.Ns++) {
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
             proc_control_B.ibmat++) {
          proc_control_B.Selector_p[proc_control_B.ibmat + 9 * proc_control_B.Ns]
            = proc_control_DW.x_Delay_DSTATE[(11 * proc_control_B.Ns +
            static_cast<int32_T>
            (proc_control_P.Constant_Value_cr[proc_control_B.ibmat])) - 1];
        }
      }

      // End of Selector: '<S197>/Selector'

      // Delay: '<S197>/slack_delay' incorporates:
      //   Constant: '<S195>/e.init_zero'

      if (proc_control_DW.icLoad_j) {
        proc_control_DW.slack_delay_DSTATE = proc_control_P.einit_zero_Value;
      }

      // MATLAB Function: '<S196>/NLMPC' incorporates:
      //   Delay: '<S127>/Delay'
      //   Delay: '<S197>/slack_delay'
      //   MATLABSystem: '<S121>/MPC manager'
      //   Merge generated from: '<S9>/Merge'
      //   Reshape: '<S196>/Reshape'
      //   Selector: '<S197>/Selector'
      //   Selector: '<S197>/Selector1'

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_B.CostFcn_workspace_runtimedata.OutputWeights[proc_control_B.Ns]
          = proc_control_B.ywt[proc_control_B.ibmat];
        proc_control_B.Ns += 10;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 9;
             proc_control_B.idx_p++) {
          proc_control_B.CostFcn_workspace_runtimedata.OutputWeights
            [(proc_control_B.idx_p + proc_control_B.Ns) + 1] =
            proc_control_B.ywt[proc_control_B.ibmat];
        }

        proc_control_B.Ns += 10;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        proc_control_B.CostFcn_workspace_runtimedata.MVWeights[proc_control_B.Ns]
          = proc_control_B.mvwt[proc_control_B.ibmat];
        proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[proc_control_B.Ns]
          = proc_control_B.dmwwt[proc_control_B.ibmat];
        proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.Ns] =
          proc_control_B.mvmin[proc_control_B.ibmat];
        proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.Ns] =
          proc_control_B.mvmax[proc_control_B.ibmat];
        proc_control_B.Ns += 10;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 9;
             proc_control_B.idx_p++) {
          proc_control_B.st_Value_size_idx_1 = (proc_control_B.idx_p +
            proc_control_B.Ns) + 1;
          proc_control_B.CostFcn_workspace_runtimedata.MVWeights[proc_control_B.st_Value_size_idx_1]
            = proc_control_B.mvwt[proc_control_B.ibmat];
          proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[proc_control_B.st_Value_size_idx_1]
            = proc_control_B.dmwwt[proc_control_B.ibmat];
          proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.st_Value_size_idx_1]
            = proc_control_B.mvmin[proc_control_B.ibmat];
          proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.st_Value_size_idx_1]
            = proc_control_B.mvmax[proc_control_B.ibmat];
        }

        proc_control_B.Ns += 10;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 80; proc_control_B.Ns++) {
        proc_control_B.b_utarget[proc_control_B.Ns] = (rtMinusInf);
        proc_control_B.dv8[proc_control_B.Ns] = (rtInf);
      }

      proc_control_znlmpc_getUBounds(proc_control_DW.Delay_DSTATE_a,
        proc_control_B.CostFcn_workspace_runtimedata.MVMin,
        proc_control_B.CostFcn_workspace_runtimedata.MVMax,
        proc_control_B.b_utarget, proc_control_B.dv8, proc_control_B.A_data,
        proc_control_B.s1_size, proc_control_B.B_data_a, &proc_control_B.e_size);
      std::memcpy(&proc_control_B.CostFcn_workspace_runtimedata.lastMV[0],
                  &proc_control_DW.Delay_DSTATE_a[0], sizeof(real_T) << 3U);
      proc_control_B.CostFcn_workspace_runtimedata.ECRWeight = 100000.0;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 130; proc_control_B.Ns++)
      {
        proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.Ns] =
          proc_control_B.Reference[proc_control_B.Ns];
        proc_control_B.CostFcn_workspace_runtimedata.OutputMin[proc_control_B.Ns]
          = d[proc_control_B.Ns];
        proc_control_B.CostFcn_workspace_runtimedata.OutputMax[proc_control_B.Ns]
          = f[proc_control_B.Ns];
        proc_control_B.CostFcn_workspace_runtimedata.StateMin[proc_control_B.Ns]
          = (rtMinusInf);
        proc_control_B.CostFcn_workspace_runtimedata.StateMax[proc_control_B.Ns]
          = (rtInf);
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 80; proc_control_B.Ns++) {
        proc_control_B.CostFcn_workspace_runtimedata.MVRateMin[proc_control_B.Ns]
          = (rtMinusInf);
        proc_control_B.CostFcn_workspace_runtimedata.MVRateMax[proc_control_B.Ns]
          = (rtInf);
        proc_control_B.CostFcn_workspace_runtimedata.MVScaledTarget[proc_control_B.Ns]
          = 0.0;
      }

      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.x[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.x[0], 13U *
                  sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.lastMV[0],
                  &proc_control_DW.Delay_DSTATE_a[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.ref[0],
                  &proc_control_B.Reference[0], 130U * sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.OutputWeights[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.OutputWeights[0],
                  130U * sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.MVWeights[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.MVWeights[0],
                  80U * sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.MVRateWeights[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[0],
                  80U * sizeof(real_T));
      proc_control_B.ConFcn_workspace_runtimedata.ECRWeight = 100000.0;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 130; proc_control_B.Ns++)
      {
        proc_control_B.ConFcn_workspace_runtimedata.OutputMin[proc_control_B.Ns]
          = d[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.OutputMax[proc_control_B.Ns]
          = f[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.StateMin[proc_control_B.Ns] =
          (rtMinusInf);
        proc_control_B.ConFcn_workspace_runtimedata.StateMax[proc_control_B.Ns] =
          (rtInf);
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 80; proc_control_B.Ns++) {
        proc_control_B.ConFcn_workspace_runtimedata.MVMin[proc_control_B.Ns] =
          proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.MVMax[proc_control_B.Ns] =
          proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.Ns];
        proc_control_B.ConFcn_workspace_runtimedata.MVRateMin[proc_control_B.Ns]
          = (rtMinusInf);
        proc_control_B.ConFcn_workspace_runtimedata.MVRateMax[proc_control_B.Ns]
          = (rtInf);
        proc_control_B.ConFcn_workspace_runtimedata.MVScaledTarget[proc_control_B.Ns]
          = 0.0;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.expl_temp.MVIndex[proc_control_B.Ns] = static_cast<real_T>
          (proc_control_B.Ns) + 1.0;
      }

      proc_control_B.expl_temp.NumOfInputs = 8.0;
      proc_control_B.expl_temp.NumOfOutputs = 13.0;
      proc_control_B.expl_temp.NumOfStates = 13.0;
      proc_control_B.expl_temp.PredictionHorizon = 10.0;
      std::memset(&proc_control_B.expl_temp.MVTarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_B.expl_temp.References[0],
                  &proc_control_B.Reference[0], 130U * sizeof(real_T));
      std::memcpy(&proc_control_B.expl_temp.LastMV[0],
                  &proc_control_DW.Delay_DSTATE_a[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.expl_temp.CurrentStates[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.x[0], 13U *
                  sizeof(real_T));
      proc_control_B.expl_temp.Ts = 0.1;
      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 9;
           proc_control_B.ibmat++) {
        proc_control_B.idx_p = 0;
        for (proc_control_B.st_Value_size_idx_1 = 0;
             proc_control_B.st_Value_size_idx_1 < 13;
             proc_control_B.st_Value_size_idx_1++) {
          proc_control_B.y_j[proc_control_B.st_Value_size_idx_1 +
            proc_control_B.Ns] = proc_control_B.Selector_p[proc_control_B.idx_p
            + proc_control_B.ibmat];
          proc_control_B.idx_p += 9;
        }

        proc_control_B.Ns += 13;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_B.y_j[proc_control_B.ibmat + 117] =
          proc_control_B.Selector_p[proc_control_B.Ns + 8];
        proc_control_B.Ns += 9;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        proc_control_B.idx_p = 0;
        for (proc_control_B.st_Value_size_idx_1 = 0;
             proc_control_B.st_Value_size_idx_1 < 9;
             proc_control_B.st_Value_size_idx_1++) {
          proc_control_B.b_utarget[proc_control_B.idx_p + proc_control_B.ibmat] =
            proc_control_B.Selector1_n[proc_control_B.st_Value_size_idx_1 +
            proc_control_B.Ns];
          proc_control_B.idx_p += 8;
        }

        proc_control_B.Ns += 9;
      }

      proc_control_B.Ns = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        proc_control_B.b_utarget[proc_control_B.ibmat + 72] =
          proc_control_B.Selector1_n[proc_control_B.Ns + 8];
        proc_control_B.u_scale[proc_control_B.ibmat] = 0.0;
        proc_control_B.Ns += 9;
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.ibmat = 0;
        for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 80;
             proc_control_B.idx_p++) {
          proc_control_B.u_scale[proc_control_B.Ns] += static_cast<real_T>
            (a[proc_control_B.ibmat + proc_control_B.Ns]) *
            proc_control_B.b_utarget[proc_control_B.idx_p];
          proc_control_B.ibmat += 8;
        }
      }

      std::memset(&proc_control_B.b_utarget[0], 0, 80U * sizeof(real_T));
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.rtb_u_scale_jk[proc_control_B.Ns] = static_cast<real_T>
          (proc_control_B.Ns) + 1.0;
      }

      std::memcpy(&proc_control_B.rtb_Selector_ch[0], &proc_control_B.y_j[0],
                  130U * sizeof(real_T));
      std::memcpy(&proc_control_B.rtb_Selector_ch[130], &proc_control_B.u_scale
                  [0], sizeof(real_T) << 3U);
      proc_control_B.rtb_Selector_ch[138] = proc_control_DW.slack_delay_DSTATE;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 130; proc_control_B.Ns++)
      {
        proc_control_B.dv7[proc_control_B.Ns] = (rtMinusInf);
      }

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.dv7[proc_control_B.Ns + 130] = (rtMinusInf);
      }

      proc_control_B.dv7[138] = 0.0;
      proc_control_fmincon(&proc_control_B.CostFcn_workspace_runtimedata, 0.1,
                           proc_control_B.CostFcn_workspace_runtimedata.x,
                           proc_control_DW.Delay_DSTATE_a,
                           proc_control_B.Reference, proc_control_B.b_utarget,
                           10.0, 13.0, 13.0, 8.0, proc_control_B.rtb_u_scale_jk,
                           proc_control_B.rtb_Selector_ch, proc_control_B.A_data,
                           proc_control_B.B_data_a, &proc_control_B.e_size,
                           proc_control_B.dv7,
                           &proc_control_B.ConFcn_workspace_runtimedata,
                           &proc_control_B.expl_temp, proc_control_B.z,
                           &proc_control_B.trajClear, &proc_control_B.d,
                           &proc_control_B.Product2_lm,
                           &proc_control_B.linearScaling,
                           proc_control_B.expl_temp_n, &proc_control_B.xtmp,
                           &proc_control_B.b_norm, &proc_control_B.t3,
                           &proc_control_B.t4);
      if ((proc_control_B.d == 0.0) && (proc_control_B.xtmp > 0.02)) {
        proc_control_B.d = -2.0;
      }

      // Update for Delay: '<S197>/slack_delay' incorporates:
      //   MATLAB Function: '<S196>/NLMPC'
      //   Reshape: '<S196>/Reshape'

      proc_control_znlmpc_getXUe(proc_control_B.z,
        proc_control_B.CostFcn_workspace_runtimedata.x, proc_control_B.Y_p,
        proc_control_B.U, &proc_control_DW.slack_delay_DSTATE);

      // MATLAB Function: '<S196>/NLMPC' incorporates:
      //   Delay: '<S127>/Delay'

      if (proc_control_B.d > 0.0) {
        proc_control_B.Ns = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
             proc_control_B.ibmat++) {
          proc_control_B.u_scale[proc_control_B.ibmat] =
            proc_control_B.U[proc_control_B.Ns];
          proc_control_B.Ns += 11;
        }
      } else {
        std::memcpy(&proc_control_B.u_scale[0], &proc_control_DW.Delay_DSTATE_a
                    [0], sizeof(real_T) << 3U);
      }

      // Merge generated from: '<S120>/Merge' incorporates:
      //   MATLAB Function: '<S196>/NLMPC'
      //   SignalConversion generated from: '<S127>/out'

      proc_control_B.MpcStatus = proc_control_B.d;

      // Merge generated from: '<S120>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S127>/Pulse Generator'

      proc_control_B.alive = (proc_control_DW.clockTickCounter <
        proc_control_P.PulseGenerator_Duty_f) &&
        (proc_control_DW.clockTickCounter >= 0) ?
        proc_control_P.PulseGenerator_Amp_p : 0.0;

      // DiscretePulseGenerator: '<S127>/Pulse Generator'
      if (proc_control_DW.clockTickCounter >=
          proc_control_P.PulseGenerator_Period_e5 - 1.0) {
        proc_control_DW.clockTickCounter = 0;
      } else {
        proc_control_DW.clockTickCounter++;
      }

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.Product2_lm = proc_control_B.u_scale[proc_control_B.i];

        // Merge generated from: '<S120>/Merge' incorporates:
        //   SignalConversion generated from: '<S127>/out'

        proc_control_B.mv[proc_control_B.i] = proc_control_B.Product2_lm;

        // Update for Delay: '<S127>/Delay' incorporates:
        //   Merge generated from: '<S120>/Merge'
        //   SignalConversion generated from: '<S127>/out'

        proc_control_DW.Delay_DSTATE_a[proc_control_B.i] =
          proc_control_B.Product2_lm;
      }

      // Update for Delay: '<S197>/mv_Delay' incorporates:
      //   MATLAB Function: '<S196>/NLMPC'
      //   Merge generated from: '<S120>/Merge'
      //   SignalConversion generated from: '<S127>/out'

      proc_control_DW.icLoad = false;
      std::memcpy(&proc_control_DW.mv_Delay_DSTATE[0], &proc_control_B.U[0], 88U
                  * sizeof(real_T));

      // Update for Delay: '<S197>/x_Delay' incorporates:
      //   MATLAB Function: '<S196>/NLMPC'

      proc_control_DW.icLoad_a = false;
      std::memcpy(&proc_control_DW.x_Delay_DSTATE[0], &proc_control_B.Y_p[0],
                  143U * sizeof(real_T));

      // Update for Delay: '<S197>/slack_delay'
      proc_control_DW.icLoad_j = false;

      // End of Outputs for SubSystem: '<S120>/Quaternion Non linear MPC (Not for codegen)' 
      break;

     default:
      // Outputs for IfAction SubSystem: '<S120>/IDLE' incorporates:
      //   ActionPort: '<S124>/Action Port'

      // Merge generated from: '<S120>/Merge' incorporates:
      //   Constant: '<S124>/Constant1'
      //   SignalConversion generated from: '<S124>/Constant1'

      std::memcpy(&proc_control_B.mv[0], &proc_control_P.Constant1_Value_n[0],
                  sizeof(real_T) << 3U);

      // Merge generated from: '<S120>/Merge' incorporates:
      //   Constant: '<S124>/Constant2'
      //   SignalConversion generated from: '<S124>/Constant2'

      proc_control_B.alive = proc_control_P.Constant2_Value_p;

      // Merge generated from: '<S120>/Merge' incorporates:
      //   Constant: '<S124>/Constant'
      //   SignalConversion generated from: '<S124>/Constant'

      proc_control_B.MpcStatus = proc_control_P.Constant_Value_mg;

      // End of Outputs for SubSystem: '<S120>/IDLE'
      break;
    }

    // Sum: '<S122>/Sum' incorporates:
    //   Delay: '<S122>/Delay'

    proc_control_B.trajClear = proc_control_DW.Delay_DSTATE_k -
      proc_control_B.alive;

    // Switch: '<S223>/Switch2' incorporates:
    //   MATLABSystem: '<S121>/MPC manager'
    //   Math: '<S122>/Transpose'
    //   RelationalOperator: '<S223>/LowerRelop1'
    //   RelationalOperator: '<S223>/UpperRelop'
    //   Switch: '<S223>/Switch'

    for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
      if (proc_control_B.mv[proc_control_B.i] >
          proc_control_B.mvmax[proc_control_B.i]) {
        proc_control_B.u_scale[proc_control_B.i] =
          proc_control_B.mvmax[proc_control_B.i];
      } else if (proc_control_B.mv[proc_control_B.i] <
                 proc_control_B.mvmin[proc_control_B.i]) {
        // Switch: '<S223>/Switch' incorporates:
        //   MATLABSystem: '<S121>/MPC manager'
        //   Switch: '<S223>/Switch2'

        proc_control_B.u_scale[proc_control_B.i] =
          proc_control_B.mvmin[proc_control_B.i];
      } else {
        proc_control_B.u_scale[proc_control_B.i] =
          proc_control_B.mv[proc_control_B.i];
      }
    }

    // End of Switch: '<S223>/Switch2'

    // Lookup_n-D: '<S122>/N to A' incorporates:
    //   Switch: '<S223>/Switch2'

    for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 8;
         proc_control_B.idx_p++) {
      proc_control_B.receivedLength = plook_u32d_binckpang
        (proc_control_B.u_scale[proc_control_B.idx_p], proc_control_P.N, 200U,
         &proc_control_DW.m_bpIndex[proc_control_B.idx_p]);
      proc_control_B.current[proc_control_B.idx_p] =
        proc_control_P.A[proc_control_B.receivedLength];
    }

    // Lookup_n-D: '<S122>/N to PWM' incorporates:
    //   Switch: '<S223>/Switch2'

    for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 8;
         proc_control_B.idx_p++) {
      proc_control_B.receivedLength = plook_u32d_binckpang
        (proc_control_B.u_scale[proc_control_B.idx_p], proc_control_P.N, 200U,
         &proc_control_DW.m_bpIndex_c[proc_control_B.idx_p]);
      proc_control_B.pwm[proc_control_B.idx_p] =
        proc_control_P.PWM[proc_control_B.receivedLength];
    }

    // Update for Delay: '<S7>/Delay' incorporates:
    //   Lookup_n-D: '<S122>/N to A'

    for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
      proc_control_DW.Delay_DSTATE_g[proc_control_B.i] =
        proc_control_B.current[proc_control_B.i];
    }

    // End of Update for Delay: '<S7>/Delay'

    // Update for Delay: '<S122>/Delay'
    proc_control_DW.Delay_DSTATE_k = proc_control_B.alive;

    // End of Outputs for SubSystem: '<Root>/Subsystem Controller'

    // Outputs for Enabled SubSystem: '<Root>/Send Data to ROS' incorporates:
    //   EnablePort: '<S5>/Enable'

    if (proc_control_B.notDryRun > 0.0) {
      if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
        // MATLAB Function: '<S5>/MATLAB Function1' incorporates:
        //   Constant: '<S101>/Constant'
        //   Switch: '<S223>/Switch2'

        proc_control_B.msg_n = proc_control_P.Constant_Value_lv;
        for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
          proc_control_B.AngularRate_a_idx_1 = std::round
            (proc_control_B.u_scale[proc_control_B.i]);
          if (proc_control_B.AngularRate_a_idx_1 < 128.0) {
            if (proc_control_B.AngularRate_a_idx_1 >= -128.0) {
              proc_control_B.msg_n.Data[proc_control_B.i] = static_cast<int8_T>
                (proc_control_B.AngularRate_a_idx_1);
            } else {
              proc_control_B.msg_n.Data[proc_control_B.i] = MIN_int8_T;
            }
          } else {
            proc_control_B.msg_n.Data[proc_control_B.i] = MAX_int8_T;
          }
        }

        proc_control_B.msg_n.Data_SL_Info.CurrentLength = 8U;

        // End of MATLAB Function: '<S5>/MATLAB Function1'

        // Outputs for Atomic SubSystem: '<S5>/Publish'
        // MATLABSystem: '<S105>/SinkBlock'
        Pub_proc_control_102.publish(&proc_control_B.msg_n);

        // End of Outputs for SubSystem: '<S5>/Publish'

        // MATLAB Function: '<S5>/MATLAB Function3' incorporates:
        //   Constant: '<S102>/Constant'
        //   Lookup_n-D: '<S122>/N to PWM'

        proc_control_B.msg_h = proc_control_P.Constant_Value_c;
        for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
          proc_control_B.msg_h.Data[proc_control_B.i] =
            proc_control_B.pwm[proc_control_B.i];
        }

        proc_control_B.msg_h.Data_SL_Info.CurrentLength = 8U;

        // End of MATLAB Function: '<S5>/MATLAB Function3'

        // Outputs for Atomic SubSystem: '<S5>/Publish2'
        // MATLABSystem: '<S106>/SinkBlock'
        Pub_proc_control_104.publish(&proc_control_B.msg_h);

        // End of Outputs for SubSystem: '<S5>/Publish2'
      }

      if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
        // Outputs for Atomic SubSystem: '<S5>/Subsystem'
        // MATLAB Function: '<S107>/MATLAB Function' incorporates:
        //   Constant: '<S107>/Constant'
        //   Constant: '<S107>/Constant1'
        //   Constant: '<S108>/Constant'
        //   DataTypeConversion: '<S122>/Data Type Conversion3'
        //   MATLABSystem: '<S121>/MPC manager'

        proc_control_B.msg_p = proc_control_P.Constant_Value_o;
        proc_control_B.msg_p.TargetReached = proc_control_B.isReached;
        proc_control_B.msg_p.IsTrajectoryDone = proc_control_B.isTrajDone;
        proc_control_B.msg_p.MpcMode = proc_control_B.mode;

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        proc_control_B.msg_p.IsMpcAlive = (proc_control_B.trajClear != 0.0);

        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        if (proc_control_P.Constant1_Value_d < 1.0) {
          proc_control_B.Ns = -1;
        } else {
          proc_control_B.Ns = static_cast<int32_T>
            (proc_control_P.Constant1_Value_d) - 1;
        }

        proc_control_B.idx_p = proc_control_B.Ns + 1;
        if (proc_control_B.idx_p - 1 >= 0) {
          std::memcpy(&proc_control_B.msg_p.ThrustersStatus[0],
                      &proc_control_B.thrustersStatus[0], proc_control_B.idx_p *
                      sizeof(boolean_T));
        }

        proc_control_B.AngularRate_a_idx_1 = std::round
          (proc_control_P.Constant1_Value_d);
        if (proc_control_B.AngularRate_a_idx_1 < 4.294967296E+9) {
          if (proc_control_B.AngularRate_a_idx_1 >= 0.0) {
            proc_control_B.msg_p.ThrustersStatus_SL_Info.CurrentLength =
              static_cast<uint32_T>(proc_control_B.AngularRate_a_idx_1);
          } else {
            proc_control_B.msg_p.ThrustersStatus_SL_Info.CurrentLength = 0U;
          }
        } else {
          proc_control_B.msg_p.ThrustersStatus_SL_Info.CurrentLength =
            MAX_uint32_T;
        }

        proc_control_B.BodyVelocity_c_tmp_idx_0 = std::round
          (proc_control_B.MpcStatus);
        if (proc_control_B.BodyVelocity_c_tmp_idx_0 < 128.0) {
          if (proc_control_B.BodyVelocity_c_tmp_idx_0 >= -128.0) {
            proc_control_B.msg_p.MpcStatus = static_cast<int8_T>
              (proc_control_B.BodyVelocity_c_tmp_idx_0);
          } else {
            proc_control_B.msg_p.MpcStatus = MIN_int8_T;
          }
        } else {
          proc_control_B.msg_p.MpcStatus = MAX_int8_T;
        }

        if (proc_control_P.Constant_Value_lo < 1.0) {
          proc_control_B.Ns = -1;
        } else {
          proc_control_B.Ns = static_cast<int32_T>
            (proc_control_P.Constant_Value_lo) - 1;
        }

        proc_control_B.Ns_d = proc_control_B.Ns + 1;
        if (proc_control_B.Ns_d - 1 >= 0) {
          std::memcpy(&proc_control_B.msg_p.CurrentGains.OV[0],
                      &proc_control_B.ywt[0], proc_control_B.Ns_d * sizeof
                      (real_T));
        }

        proc_control_B.BodyVelocity_c_tmp_idx_0 = std::round
          (proc_control_P.Constant_Value_lo);
        if (proc_control_B.BodyVelocity_c_tmp_idx_0 < 4.294967296E+9) {
          if (proc_control_B.BodyVelocity_c_tmp_idx_0 >= 0.0) {
            proc_control_B.msg_p.CurrentGains.OV_SL_Info.CurrentLength =
              static_cast<uint32_T>(proc_control_B.BodyVelocity_c_tmp_idx_0);
          } else {
            proc_control_B.msg_p.CurrentGains.OV_SL_Info.CurrentLength = 0U;
          }
        } else {
          proc_control_B.msg_p.CurrentGains.OV_SL_Info.CurrentLength =
            MAX_uint32_T;
        }

        if (proc_control_P.Constant1_Value_d < 1.0) {
          proc_control_B.Ns = -1;
        } else {
          proc_control_B.Ns = static_cast<int32_T>
            (proc_control_P.Constant1_Value_d) - 1;
        }

        proc_control_B.i = proc_control_B.Ns + 1;
        if (proc_control_B.i - 1 >= 0) {
          std::memcpy(&proc_control_B.msg_p.CurrentGains.MV[0],
                      &proc_control_B.mvwt[0], proc_control_B.i * sizeof(real_T));
        }

        if (proc_control_B.AngularRate_a_idx_1 < 4.294967296E+9) {
          if (proc_control_B.AngularRate_a_idx_1 >= 0.0) {
            proc_control_B.msg_p.CurrentGains.MV_SL_Info.CurrentLength =
              static_cast<uint32_T>(proc_control_B.AngularRate_a_idx_1);
          } else {
            proc_control_B.msg_p.CurrentGains.MV_SL_Info.CurrentLength = 0U;
          }
        } else {
          proc_control_B.msg_p.CurrentGains.MV_SL_Info.CurrentLength =
            MAX_uint32_T;
        }

        if (proc_control_P.Constant1_Value_d < 1.0) {
          proc_control_B.Ns = -1;
        } else {
          proc_control_B.Ns = static_cast<int32_T>
            (proc_control_P.Constant1_Value_d) - 1;
        }

        proc_control_B.Ns_d = proc_control_B.Ns + 1;
        if (proc_control_B.Ns_d - 1 >= 0) {
          std::memcpy(&proc_control_B.msg_p.CurrentGains.MVR[0],
                      &proc_control_B.dmwwt[0], proc_control_B.Ns_d * sizeof
                      (real_T));
        }

        if (proc_control_B.AngularRate_a_idx_1 < 4.294967296E+9) {
          if (proc_control_B.AngularRate_a_idx_1 >= 0.0) {
            proc_control_B.msg_p.CurrentGains.MVR_SL_Info.CurrentLength =
              static_cast<uint32_T>(proc_control_B.AngularRate_a_idx_1);
          } else {
            proc_control_B.msg_p.CurrentGains.MVR_SL_Info.CurrentLength = 0U;
          }
        } else {
          proc_control_B.msg_p.CurrentGains.MVR_SL_Info.CurrentLength =
            MAX_uint32_T;
        }

        // End of MATLAB Function: '<S107>/MATLAB Function'

        // Outputs for Atomic SubSystem: '<S107>/Publish5'
        // MATLABSystem: '<S110>/SinkBlock'
        Pub_proc_control_287.publish(&proc_control_B.msg_p);

        // End of Outputs for SubSystem: '<S107>/Publish5'
        // End of Outputs for SubSystem: '<S5>/Subsystem'
      }

      if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
        // SignalConversion generated from: '<S5>/thrust' incorporates:
        //   SignalConversion generated from: '<S5>/mv'
        //   Switch: '<S223>/Switch2'

        std::memcpy(&proc_control_B.BufferToMakeInportVirtual_Inser[0],
                    &proc_control_B.u_scale[0], sizeof(real_T) << 3U);
        for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
          // SignalConversion generated from: '<S5>/mv' incorporates:
          //   Lookup_n-D: '<S122>/N to PWM'

          proc_control_B.BufferToMakeInportVirtual_Ins_e[proc_control_B.i] =
            proc_control_B.pwm[proc_control_B.i];
        }
      }
    }

    // End of Outputs for SubSystem: '<Root>/Send Data to ROS'

    // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
    //   EnablePort: '<S1>/Enable'

    proc_control_DW.ModlePhysique_MODE = (proc_control_B.SimActive > 0.0);

    // End of Outputs for SubSystem: '<Root>/Modèle Physique'
  }

  // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
  //   EnablePort: '<S1>/Enable'

  if (proc_control_DW.ModlePhysique_MODE) {
    if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
      // MATLAB Function: '<S11>/MATLAB Function1' incorporates:
      //   SignalConversion generated from: '<S5>/mv'

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.current[proc_control_B.i] =
          proc_control_B.BufferToMakeInportVirtual_Ins_e[proc_control_B.i];
      }

      if (proc_control_B.BufferToMakeInportVirtual_Ins_e[0] < 1100) {
        proc_control_B.current[0] = 1500U;
      } else if (proc_control_B.BufferToMakeInportVirtual_Ins_e[0] > 1900) {
        proc_control_B.current[0] = 1500U;
      }

      // End of MATLAB Function: '<S11>/MATLAB Function1'

      // Lookup_n-D: '<S11>/ PWM to N'
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 8;
           proc_control_B.idx_p++) {
        proc_control_B.receivedLength = plook_u32u16_binckpan
          (proc_control_B.current[proc_control_B.idx_p], proc_control_P.PWM,
           200U, &proc_control_DW.m_bpIndex_m[proc_control_B.idx_p]);
        proc_control_B.PWMtoN[proc_control_B.idx_p] =
          proc_control_P.N[proc_control_B.receivedLength];
      }
    }

    // DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
    proc_control_B.notDryRun = (proc_control_B.PWMtoN[0] -
      proc_control_P.DiscreteTransferFcn1_DenCoef[1] *
      proc_control_DW.DiscreteTransferFcn1_states) /
      proc_control_P.DiscreteTransferFcn1_DenCoef[0];

    // DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
    proc_control_B.trajClear = (proc_control_B.PWMtoN[1] -
      proc_control_P.DiscreteTransferFcn1_DenCoef_n[1] *
      proc_control_DW.DiscreteTransferFcn1_states_k) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_n[0];

    // DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
    proc_control_B.Product2_lm = (proc_control_B.PWMtoN[2] -
      proc_control_P.DiscreteTransferFcn1_DenCoef_m[1] *
      proc_control_DW.DiscreteTransferFcn1_states_o) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_m[0];

    // DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
    proc_control_B.linearScaling = (proc_control_B.PWMtoN[3] -
      proc_control_P.DiscreteTransferFcn1_DenCoef_b[1] *
      proc_control_DW.DiscreteTransferFcn1_states_i) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_b[0];

    // DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
    proc_control_B.xtmp = (proc_control_B.PWMtoN[4] -
      proc_control_P.DiscreteTransferFcn1_DenCoef_l[1] *
      proc_control_DW.DiscreteTransferFcn1_states_g) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_l[0];

    // DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
    proc_control_B.b_norm = (proc_control_B.PWMtoN[5] -
      proc_control_P.DiscreteTransferFcn1_DenCoef_l0[1] *
      proc_control_DW.DiscreteTransferFcn1_states_h) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_l0[0];

    // DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
    proc_control_B.t3 = (proc_control_B.PWMtoN[6] -
                         proc_control_P.DiscreteTransferFcn1_DenCoef_a[1] *
                         proc_control_DW.DiscreteTransferFcn1_states_l) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_a[0];

    // DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
    proc_control_B.t4 = (proc_control_B.PWMtoN[7] -
                         proc_control_P.DiscreteTransferFcn1_DenCoef_g[1] *
                         proc_control_DW.DiscreteTransferFcn1_states_ge) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_g[0];

    // SignalConversion generated from: '<S1>/MATLAB System' incorporates:
    //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'

    proc_control_B.u_scale[0] = proc_control_P.DiscreteTransferFcn1_NumCoef[0] *
      proc_control_B.notDryRun + proc_control_P.DiscreteTransferFcn1_NumCoef[1] *
      proc_control_DW.DiscreteTransferFcn1_states;
    proc_control_B.u_scale[1] = proc_control_P.DiscreteTransferFcn1_NumCoef_k[0]
      * proc_control_B.trajClear +
      proc_control_P.DiscreteTransferFcn1_NumCoef_k[1] *
      proc_control_DW.DiscreteTransferFcn1_states_k;
    proc_control_B.u_scale[2] = proc_control_P.DiscreteTransferFcn1_NumCoef_n[0]
      * proc_control_B.Product2_lm +
      proc_control_P.DiscreteTransferFcn1_NumCoef_n[1] *
      proc_control_DW.DiscreteTransferFcn1_states_o;
    proc_control_B.u_scale[3] = proc_control_P.DiscreteTransferFcn1_NumCoef_e[0]
      * proc_control_B.linearScaling +
      proc_control_P.DiscreteTransferFcn1_NumCoef_e[1] *
      proc_control_DW.DiscreteTransferFcn1_states_i;
    proc_control_B.u_scale[4] = proc_control_P.DiscreteTransferFcn1_NumCoef_b[0]
      * proc_control_B.xtmp + proc_control_P.DiscreteTransferFcn1_NumCoef_b[1] *
      proc_control_DW.DiscreteTransferFcn1_states_g;
    proc_control_B.u_scale[5] = proc_control_P.DiscreteTransferFcn1_NumCoef_i[0]
      * proc_control_B.b_norm + proc_control_P.DiscreteTransferFcn1_NumCoef_i[1]
      * proc_control_DW.DiscreteTransferFcn1_states_h;
    proc_control_B.u_scale[6] = proc_control_P.DiscreteTransferFcn1_NumCoef_c[0]
      * proc_control_B.t3 + proc_control_P.DiscreteTransferFcn1_NumCoef_c[1] *
      proc_control_DW.DiscreteTransferFcn1_states_l;
    proc_control_B.u_scale[7] = proc_control_P.DiscreteTransferFcn1_NumCoef_m[0]
      * proc_control_B.t4 + proc_control_P.DiscreteTransferFcn1_NumCoef_m[1] *
      proc_control_DW.DiscreteTransferFcn1_states_ge;
    if ((&proc_control_M)->Timing.TaskCounters.TID[5] == 0) {
      // UniformRandomNumber: '<S12>/ Drift' incorporates:
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S122>/N to A'
      //   Lookup_n-D: '<S122>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   Trigonometry: '<S254>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 6;
           proc_control_B.idx_p++) {
        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S225>/Enable'

        // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
        //   EnablePort: '<S253>/Enable'

        proc_control_B.Drift[proc_control_B.idx_p] =
          proc_control_DW.Drift_NextOutput[proc_control_B.idx_p];

        // End of Outputs for SubSystem: '<S250>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      }
    }

    // Switch: '<S12>/Switch' incorporates:
    //   Constant: '<Root>/Constant'
    //   Constant: '<S12>/Constant2'
    //   Product: '<S12>/Product1'
    //   Sin: '<S12>/Sine Wave'
    //   Sum: '<S12>/Sum2'

    if (proc_control_P.Constant_Value_pu >= proc_control_P.Switch_Threshold) {
      // Sum: '<S12>/Add' incorporates:
      //   Constant: '<S12>/Constant'
      //   Constant: '<S12>/Constant1'
      //   Product: '<S12>/Product'
      //   UnitDelay: '<S1>/Unit Delay'

      proc_control_B.t45 = proc_control_DW.UnitDelay_DSTATE[2] *
        proc_control_P.Constant_Value_h0 + proc_control_P.Constant1_Value;

      // Saturate: '<S12>/Saturation'
      if (proc_control_B.t45 > proc_control_P.Saturation_UpperSat) {
        proc_control_B.t45 = proc_control_P.Saturation_UpperSat;
      } else if (proc_control_B.t45 < proc_control_P.Saturation_LowerSat) {
        proc_control_B.t45 = proc_control_P.Saturation_LowerSat;
      }

      // End of Saturate: '<S12>/Saturation'
      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        proc_control_B.TSamp[proc_control_B.i] = (std::sin((static_cast<real_T>
          (proc_control_DW.counter[proc_control_B.i]) +
          proc_control_P.SineWave_Offset[proc_control_B.i]) * 2.0 *
          3.1415926535897931 /
          proc_control_P.waveDiscreteFrequency[proc_control_B.i]) *
          proc_control_P.SineWave_Amp[proc_control_B.i] +
          proc_control_P.SineWave_Bias) * proc_control_B.t45 +
          proc_control_B.Drift[proc_control_B.i];
      }
    } else {
      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        proc_control_B.TSamp[proc_control_B.i] =
          proc_control_P.Constant2_Value[proc_control_B.i];
      }
    }

    // End of Switch: '<S12>/Switch'

    // MATLABSystem: '<S1>/MATLAB System' incorporates:
    //   UnitDelay: '<S1>/Unit Delay'

    //  Implement algorithm. Calculate y as a function of input u and
    //  discrete states.
    proc_co_AUV8QuatPerturbedSimFcn(proc_control_DW.UnitDelay_DSTATE,
      proc_control_B.TSamp, proc_control_B.u_scale, proc_control_B.K_dz);

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
    //   Constant: '<S1>/Initial Body velocity 1'
    //   MATLABSystem: '<S1>/MATLAB System'

    if ((proc_control_B.NavReset > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator_PrevRese <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[0] =
        proc_control_P.InitialBodyvelocity1_Value[0];
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[1] =
        proc_control_P.InitialBodyvelocity1_Value[1];
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[2] =
        proc_control_P.InitialBodyvelocity1_Value[2];
    }

    proc_control_B.t65 = proc_control_P.DiscreteTimeIntegrator_gainval *
      proc_control_B.K_dz[0];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_B.WorldPosition_n[0] =
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[0] + proc_control_B.t65;
    proc_control_B.sincos_o1_d[0] = proc_control_B.t65;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t65 = proc_control_P.DiscreteTimeIntegrator_gainval *
      proc_control_B.K_dz[1];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_B.WorldPosition_n[1] =
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[1] + proc_control_B.t65;
    proc_control_B.sincos_o1_d[1] = proc_control_B.t65;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t65 = proc_control_P.DiscreteTimeIntegrator_gainval *
      proc_control_B.K_dz[2];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_B.WorldPosition_n[2] =
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[2] + proc_control_B.t65;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   Constant: '<S1>/Initial Angular Rates'
    //   MATLABSystem: '<S1>/MATLAB System'

    if ((proc_control_B.NavReset > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator1_PrevRes <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] =
        proc_control_P.InitialAngularRates_Value[0];
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] =
        proc_control_P.InitialAngularRates_Value[1];
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] =
        proc_control_P.InitialAngularRates_Value[2];
    }

    proc_control_B.oa = proc_control_P.DiscreteTimeIntegrator1_gainval *
      proc_control_B.K_dz[10];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'
    proc_control_B.theta0 = proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] +
      proc_control_B.oa;
    proc_control_B.sincos_o2[0] = proc_control_B.oa;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.oa = proc_control_P.DiscreteTimeIntegrator1_gainval *
      proc_control_B.K_dz[11];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'
    proc_control_B.AngularRate_a_idx_1 =
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] + proc_control_B.oa;
    proc_control_B.sincos_o2[1] = proc_control_B.oa;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.oa = proc_control_P.DiscreteTimeIntegrator1_gainval *
      proc_control_B.K_dz[12];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'
    proc_control_B.t57 = proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] +
      proc_control_B.oa;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'
    //   MATLABSystem: '<S309>/MATLAB System'

    if (proc_control_DW.DiscreteTimeIntegrator2_IC_LOAD != 0) {
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] =
        proc_control_B.InitQuat[0];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] =
        proc_control_B.InitQuat[1];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] =
        proc_control_B.InitQuat[2];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[3] =
        proc_control_B.InitQuat[3];
    }

    if ((proc_control_B.NavReset > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator2_PrevRes <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] =
        proc_control_B.InitQuat[0];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] =
        proc_control_B.InitQuat[1];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] =
        proc_control_B.InitQuat[2];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[3] =
        proc_control_B.InitQuat[3];
    }

    proc_control_B.n_k = proc_control_P.DiscreteTimeIntegrator2_gainval *
      proc_control_B.K_dz[3];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_B.TmpSignalConversionAtSFunct[0] =
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] + proc_control_B.n_k;
    proc_control_B.n[0] = proc_control_B.n_k;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.n_k = proc_control_P.DiscreteTimeIntegrator2_gainval *
      proc_control_B.K_dz[4];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_B.TmpSignalConversionAtSFunct[1] =
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] + proc_control_B.n_k;
    proc_control_B.n[1] = proc_control_B.n_k;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.n_k = proc_control_P.DiscreteTimeIntegrator2_gainval *
      proc_control_B.K_dz[5];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_B.TmpSignalConversionAtSFunct[2] =
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] + proc_control_B.n_k;
    proc_control_B.n[2] = proc_control_B.n_k;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.n_k = proc_control_P.DiscreteTimeIntegrator2_gainval *
      proc_control_B.K_dz[6];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_B.TmpSignalConversionAtSFunct[3] =
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[3] + proc_control_B.n_k;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S1>/Initial Body velocity '
    //   MATLABSystem: '<S1>/MATLAB System'

    if ((proc_control_B.NavReset > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator3_PrevRes <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] =
        proc_control_P.InitialBodyvelocity_Value[0];
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] =
        proc_control_P.InitialBodyvelocity_Value[1];
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] =
        proc_control_P.InitialBodyvelocity_Value[2];
    }

    proc_control_B.oa_n = proc_control_P.DiscreteTimeIntegrator3_gainval *
      proc_control_B.K_dz[7];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3'
    proc_control_B.ob = proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] +
      proc_control_B.oa_n;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.BodyVelocity_c_tmp_idx_0 = proc_control_B.oa_n;
    proc_control_B.oa_n = proc_control_P.DiscreteTimeIntegrator3_gainval *
      proc_control_B.K_dz[8];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3'
    proc_control_B.BodyVelocity_c_idx_1 =
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] + proc_control_B.oa_n;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t39 = proc_control_B.oa_n;
    proc_control_B.oa_n = proc_control_P.DiscreteTimeIntegrator3_gainval *
      proc_control_B.K_dz[9];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3'
    proc_control_B.t40 = proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] +
      proc_control_B.oa_n;

    // Lookup_n-D: '<S16>/N to RPM'
    for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 8;
         proc_control_B.idx_p++) {
      proc_control_B.receivedLength = plook_u32d_binckpan
        (proc_control_B.u_scale[proc_control_B.idx_p], proc_control_P.N, 200U,
         &proc_control_DW.m_bpIndex_cj[proc_control_B.idx_p]);
      proc_control_B.NtoRPM[proc_control_B.idx_p] = static_cast<int16_T>
        (proc_control_P.RPM[proc_control_B.receivedLength]);
    }

    for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
      // Signum: '<S16>/Sign' incorporates:
      //   Product: '<S16>/Product'

      proc_control_B.d = proc_control_B.u_scale[proc_control_B.Ns];
      if (!std::isnan(proc_control_B.d)) {
        if (proc_control_B.d < 0.0) {
          proc_control_B.d = -1.0;
        } else {
          proc_control_B.d = (proc_control_B.d > 0.0);
        }
      }

      // End of Signum: '<S16>/Sign'

      // Product: '<S16>/Product'
      proc_control_B.NtoRPM[proc_control_B.Ns] = static_cast<int16_T>(std::floor
        (static_cast<real_T>(proc_control_B.NtoRPM[proc_control_B.Ns]) *
         proc_control_B.d));
    }

    if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
      // MATLAB Function: '<S16>/MATLAB Function3' incorporates:
      //   Constant: '<S25>/Constant'

      proc_control_B.msg_p_e = proc_control_P.Constant_Value_m;
      for (proc_control_B.Ns = 0; proc_control_B.Ns < 8; proc_control_B.Ns++) {
        proc_control_B.msg_p_e.Data[proc_control_B.Ns] =
          proc_control_B.NtoRPM[proc_control_B.Ns];
      }

      proc_control_B.msg_p_e.Data_SL_Info.CurrentLength = 8U;

      // End of MATLAB Function: '<S16>/MATLAB Function3'

      // Outputs for Atomic SubSystem: '<S16>/Publish2'
      // MATLABSystem: '<S27>/SinkBlock'
      Pub_proc_control_19_1361.publish(&proc_control_B.msg_p_e);

      // End of Outputs for SubSystem: '<S16>/Publish2'
    }

    // MATLAB Function: '<S1>/Quaternion Normalise'
    proc_control_B.scale = 3.3121686421112381E-170;
    proc_control_B.absxk = std::abs(proc_control_B.TmpSignalConversionAtSFunct[0]);
    if (proc_control_B.absxk > 3.3121686421112381E-170) {
      proc_control_B.d = 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t_f = proc_control_B.absxk / 3.3121686421112381E-170;
      proc_control_B.d = proc_control_B.t_f * proc_control_B.t_f;
    }

    proc_control_B.absxk = std::abs(proc_control_B.TmpSignalConversionAtSFunct[1]);
    if (proc_control_B.absxk > proc_control_B.scale) {
      proc_control_B.t_f = proc_control_B.scale / proc_control_B.absxk;
      proc_control_B.d = proc_control_B.d * proc_control_B.t_f *
        proc_control_B.t_f + 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t_f = proc_control_B.absxk / proc_control_B.scale;
      proc_control_B.d += proc_control_B.t_f * proc_control_B.t_f;
    }

    proc_control_B.absxk = std::abs(proc_control_B.TmpSignalConversionAtSFunct[2]);
    if (proc_control_B.absxk > proc_control_B.scale) {
      proc_control_B.t_f = proc_control_B.scale / proc_control_B.absxk;
      proc_control_B.d = proc_control_B.d * proc_control_B.t_f *
        proc_control_B.t_f + 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t_f = proc_control_B.absxk / proc_control_B.scale;
      proc_control_B.d += proc_control_B.t_f * proc_control_B.t_f;
    }

    proc_control_B.absxk = std::abs(proc_control_B.TmpSignalConversionAtSFunct[3]);
    if (proc_control_B.absxk > proc_control_B.scale) {
      proc_control_B.t_f = proc_control_B.scale / proc_control_B.absxk;
      proc_control_B.d = proc_control_B.d * proc_control_B.t_f *
        proc_control_B.t_f + 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t_f = proc_control_B.absxk / proc_control_B.scale;
      proc_control_B.d += proc_control_B.t_f * proc_control_B.t_f;
    }

    proc_control_B.d = proc_control_B.scale * std::sqrt(proc_control_B.d);
    proc_control_B.y_d[0] = proc_control_B.TmpSignalConversionAtSFunct[0] /
      proc_control_B.d;
    proc_control_B.y_d[1] = proc_control_B.TmpSignalConversionAtSFunct[1] /
      proc_control_B.d;
    proc_control_B.y_d[2] = proc_control_B.TmpSignalConversionAtSFunct[2] /
      proc_control_B.d;
    proc_control_B.y_d[3] = proc_control_B.TmpSignalConversionAtSFunct[3] /
      proc_control_B.d;

    // End of MATLAB Function: '<S1>/Quaternion Normalise'

    // Gain: '<S28>/Output' incorporates:
    //   RandomNumber: '<S28>/White Noise'

    proc_control_B.t55 = std::sqrt(proc_control_P.BandLimitedWhiteNoise_Cov) /
      0.1414213562373095 * proc_control_DW.NextOutput;

    // Gain: '<S29>/Output' incorporates:
    //   RandomNumber: '<S29>/White Noise'

    proc_control_B.Product1_j1 = std::sqrt
      (proc_control_P.BandLimitedWhiteNoise1_Cov) / 0.1414213562373095 *
      proc_control_DW.NextOutput_b;

    // Gain: '<S30>/Output' incorporates:
    //   RandomNumber: '<S30>/White Noise'

    proc_control_B.t45 = std::sqrt(proc_control_P.BandLimitedWhiteNoise2_Cov) /
      0.1414213562373095 * proc_control_DW.NextOutput_g;

    // Gain: '<S32>/Output' incorporates:
    //   RandomNumber: '<S32>/White Noise'

    proc_control_B.d = std::sqrt(proc_control_P.BandLimitedWhiteNoise4_Cov) /
      0.1414213562373095 * proc_control_DW.NextOutput_e;

    // Product: '<S52>/Product' incorporates:
    //   Product: '<S46>/Product'

    proc_control_B.oc = proc_control_B.y_d[0] * proc_control_B.y_d[0];

    // Sqrt: '<S51>/sqrt' incorporates:
    //   MATLAB Function: '<S14>/MATLAB Function'
    //   Product: '<S52>/Product'
    //   Product: '<S52>/Product1'
    //   Product: '<S52>/Product2'
    //   Product: '<S52>/Product3'
    //   Sum: '<S52>/Sum'

    proc_control_B.t_f = std::sqrt(((proc_control_B.y_d[1] * proc_control_B.y_d
      [1] + proc_control_B.oc) + proc_control_B.y_d[2] * proc_control_B.y_d[2])
      + proc_control_B.y_d[3] * proc_control_B.y_d[3]);

    // Product: '<S47>/Product1' incorporates:
    //   Product: '<S59>/Product1'
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.t41 = proc_control_B.y_d[1] / proc_control_B.t_f;

    // Product: '<S47>/Product3' incorporates:
    //   Product: '<S59>/Product3'
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.t44 = proc_control_B.y_d[3] / proc_control_B.t_f;

    // Product: '<S47>/Product' incorporates:
    //   Product: '<S59>/Product'
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.t42 = proc_control_B.y_d[0] / proc_control_B.t_f;

    // Product: '<S47>/Product2' incorporates:
    //   Product: '<S59>/Product2'
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.t8 = proc_control_B.y_d[2] / proc_control_B.t_f;

    // Gain: '<S40>/1//2' incorporates:
    //   Constant: '<S14>/ y devant Z haut'

    proc_control_B.t9 = proc_control_P.u2_Gain *
      proc_control_P.physics.dvlRotation[0];

    // Trigonometry: '<S40>/sincos'
    proc_control_B.sincos_o1[0] = std::sin(proc_control_B.t9);
    proc_control_B.scale = std::cos(proc_control_B.t9);

    // Gain: '<S40>/1//2' incorporates:
    //   Constant: '<S14>/ y devant Z haut'

    proc_control_B.t9 = proc_control_P.u2_Gain *
      proc_control_P.physics.dvlRotation[1];

    // Trigonometry: '<S40>/sincos'
    proc_control_B.sincos_o1[1] = std::sin(proc_control_B.t9);
    proc_control_B.rtb_Sum6_idx_1 = std::cos(proc_control_B.t9);

    // Gain: '<S40>/1//2' incorporates:
    //   Constant: '<S14>/ y devant Z haut'

    proc_control_B.t9 = proc_control_P.u2_Gain *
      proc_control_P.physics.dvlRotation[2];

    // Trigonometry: '<S40>/sincos'
    proc_control_B.sincos_o1[2] = std::sin(proc_control_B.t9);
    proc_control_B.Product_n = std::cos(proc_control_B.t9);

    // Fcn: '<S40>/q2' incorporates:
    //   Fcn: '<S40>/q1'

    proc_control_B.Product3_pv = proc_control_B.scale *
      proc_control_B.sincos_o1[1];
    proc_control_B.absxk = proc_control_B.sincos_o1[0] *
      proc_control_B.rtb_Sum6_idx_1;
    proc_control_B.t9 = proc_control_B.Product3_pv * proc_control_B.Product_n -
      proc_control_B.absxk * proc_control_B.sincos_o1[2];

    // Fcn: '<S40>/q0' incorporates:
    //   Fcn: '<S40>/q3'

    proc_control_B.rtb_Sum6_idx_1 *= proc_control_B.scale;
    proc_control_B.t60 = proc_control_B.sincos_o1[0] * proc_control_B.sincos_o1
      [1];
    proc_control_B.scale = proc_control_B.rtb_Sum6_idx_1 *
      proc_control_B.Product_n - proc_control_B.t60 * proc_control_B.sincos_o1[2];

    // Fcn: '<S40>/q1'
    proc_control_B.Product3_pv = proc_control_B.Product3_pv *
      proc_control_B.sincos_o1[2] + proc_control_B.absxk *
      proc_control_B.Product_n;

    // Fcn: '<S40>/q3'
    proc_control_B.Product_n = proc_control_B.rtb_Sum6_idx_1 *
      proc_control_B.sincos_o1[2] + proc_control_B.t60 *
      proc_control_B.Product_n;

    // Sqrt: '<S57>/sqrt' incorporates:
    //   Product: '<S58>/Product'
    //   Product: '<S58>/Product1'
    //   Product: '<S58>/Product2'
    //   Product: '<S58>/Product3'
    //   Sum: '<S58>/Sum'

    proc_control_B.absxk = std::sqrt(((proc_control_B.scale *
      proc_control_B.scale + proc_control_B.Product3_pv *
      proc_control_B.Product3_pv) + proc_control_B.t9 * proc_control_B.t9) +
      proc_control_B.Product_n * proc_control_B.Product_n);

    // Product: '<S53>/Product2'
    proc_control_B.t9 /= proc_control_B.absxk;

    // Product: '<S53>/Product3'
    proc_control_B.Product_n /= proc_control_B.absxk;

    // Product: '<S53>/Product1'
    proc_control_B.Product3_pv /= proc_control_B.absxk;

    // Product: '<S53>/Product'
    proc_control_B.scale /= proc_control_B.absxk;

    // Product: '<S54>/Product7' incorporates:
    //   Product: '<S55>/Product7'

    proc_control_B.absxk = proc_control_B.Product_n * proc_control_B.Product_n;

    // Product: '<S54>/Product' incorporates:
    //   Product: '<S55>/Product'

    proc_control_B.rtb_Sum6_idx_1 = proc_control_B.Product3_pv *
      proc_control_B.t9;

    // Product: '<S54>/Product1' incorporates:
    //   Product: '<S55>/Product1'

    proc_control_B.t60 = proc_control_B.scale * proc_control_B.Product_n;

    // Product: '<S54>/Product3' incorporates:
    //   Product: '<S56>/Product'

    proc_control_B.rtb_sincos_o1_tmp = proc_control_B.Product3_pv *
      proc_control_B.Product_n;

    // Product: '<S54>/Product2' incorporates:
    //   Product: '<S56>/Product1'

    proc_control_B.rq_idx_1 = proc_control_B.scale * proc_control_B.t9;

    // Product: '<S54>/Product6' incorporates:
    //   Product: '<S56>/Product7'

    proc_control_B.rq_idx_2 = proc_control_B.t9 * proc_control_B.t9;

    // MATLABSystem: '<S14>/Divide by Constant and Round1' incorporates:
    //   Constant: '<S54>/Constant'
    //   Gain: '<S54>/Gain'
    //   Gain: '<S54>/Gain1'
    //   Gain: '<S54>/Gain2'
    //   Product: '<S54>/Product'
    //   Product: '<S54>/Product1'
    //   Product: '<S54>/Product2'
    //   Product: '<S54>/Product3'
    //   Product: '<S54>/Product4'
    //   Product: '<S54>/Product5'
    //   Product: '<S54>/Product6'
    //   Product: '<S54>/Product7'
    //   Product: '<S54>/Product8'
    //   Sum: '<S14>/Sum2'
    //   Sum: '<S54>/Sum'
    //   Sum: '<S54>/Sum1'
    //   Sum: '<S54>/Sum2'
    //   Sum: '<S54>/Sum3'

    proc_control_B.sincos_o1[0] = std::floor
      ((((((proc_control_P.Constant_Value_k2 - proc_control_B.rq_idx_2) -
           proc_control_B.absxk) * proc_control_P.Gain2_Gain_d *
          proc_control_B.ob + (proc_control_B.rtb_Sum6_idx_1 +
           proc_control_B.t60) * proc_control_P.Gain_Gain_j *
          proc_control_B.BodyVelocity_c_idx_1) +
         (proc_control_B.rtb_sincos_o1_tmp - proc_control_B.rq_idx_1) *
         proc_control_P.Gain1_Gain_e * proc_control_B.t40) + proc_control_B.t45)
       * 1000.0 + 0.5);

    // Product: '<S55>/Product3' incorporates:
    //   Product: '<S56>/Product3'

    proc_control_B.t9 *= proc_control_B.Product_n;

    // Product: '<S55>/Product2' incorporates:
    //   Product: '<S56>/Product2'

    proc_control_B.scale *= proc_control_B.Product3_pv;

    // Product: '<S55>/Product6' incorporates:
    //   Product: '<S56>/Product6'

    proc_control_B.Product3_pv *= proc_control_B.Product3_pv;

    // MATLABSystem: '<S14>/Divide by Constant and Round1' incorporates:
    //   Constant: '<S55>/Constant'
    //   Constant: '<S56>/Constant'
    //   Gain: '<S55>/Gain'
    //   Gain: '<S55>/Gain1'
    //   Gain: '<S55>/Gain2'
    //   Gain: '<S56>/Gain'
    //   Gain: '<S56>/Gain1'
    //   Gain: '<S56>/Gain2'
    //   Product: '<S55>/Product2'
    //   Product: '<S55>/Product3'
    //   Product: '<S55>/Product4'
    //   Product: '<S55>/Product5'
    //   Product: '<S55>/Product6'
    //   Product: '<S55>/Product8'
    //   Product: '<S56>/Product4'
    //   Product: '<S56>/Product5'
    //   Product: '<S56>/Product8'
    //   Sum: '<S14>/Sum2'
    //   Sum: '<S55>/Sum'
    //   Sum: '<S55>/Sum1'
    //   Sum: '<S55>/Sum2'
    //   Sum: '<S55>/Sum3'
    //   Sum: '<S56>/Sum'
    //   Sum: '<S56>/Sum1'
    //   Sum: '<S56>/Sum2'
    //   Sum: '<S56>/Sum3'

    proc_control_B.sincos_o1[1] = std::floor
      ((((((proc_control_P.Constant_Value_gp - proc_control_B.Product3_pv) -
           proc_control_B.absxk) * proc_control_P.Gain2_Gain_l *
          proc_control_B.BodyVelocity_c_idx_1 + (proc_control_B.rtb_Sum6_idx_1 -
           proc_control_B.t60) * proc_control_P.Gain_Gain_e * proc_control_B.ob)
         + (proc_control_B.scale + proc_control_B.t9) *
         proc_control_P.Gain1_Gain_eg * proc_control_B.t40) + proc_control_B.t45)
       * 1000.0 + 0.5);
    proc_control_B.sincos_o1[2] = std::floor
      (((((proc_control_B.rtb_sincos_o1_tmp + proc_control_B.rq_idx_1) *
          proc_control_P.Gain_Gain_m * proc_control_B.ob + (proc_control_B.t9 -
           proc_control_B.scale) * proc_control_P.Gain1_Gain_g *
          proc_control_B.BodyVelocity_c_idx_1) +
         ((proc_control_P.Constant_Value_iw - proc_control_B.Product3_pv) -
          proc_control_B.rq_idx_2) * proc_control_P.Gain2_Gain_b *
         proc_control_B.t40) + proc_control_B.t45) * 1000.0 + 0.5);

    // Product: '<S50>/Product' incorporates:
    //   Product: '<S47>/Product1'
    //   Product: '<S47>/Product3'
    //   Product: '<S60>/Product3'

    proc_control_B.t28 = proc_control_B.t41 * proc_control_B.t44;

    // Product: '<S50>/Product1' incorporates:
    //   Product: '<S47>/Product'
    //   Product: '<S47>/Product2'
    //   Product: '<S60>/Product2'

    proc_control_B.dp = proc_control_B.t42 * proc_control_B.t8;

    // Product: '<S50>/Product7' incorporates:
    //   Product: '<S47>/Product2'
    //   Product: '<S60>/Product6'

    proc_control_B.t27 = proc_control_B.t8 * proc_control_B.t8;

    // Product: '<S50>/Product3' incorporates:
    //   Product: '<S47>/Product2'
    //   Product: '<S47>/Product3'
    //   Product: '<S61>/Product3'

    proc_control_B.t26 = proc_control_B.t8 * proc_control_B.t44;

    // Product: '<S50>/Product2' incorporates:
    //   Product: '<S47>/Product'
    //   Product: '<S47>/Product1'
    //   Product: '<S61>/Product2'

    proc_control_B.n_tmp = proc_control_B.t42 * proc_control_B.t41;

    // Product: '<S50>/Product6' incorporates:
    //   Product: '<S47>/Product1'
    //   Product: '<S61>/Product6'

    proc_control_B.t14 = proc_control_B.t41 * proc_control_B.t41;

    // Gain: '<S14>/Gain' incorporates:
    //   Constant: '<S14>/Constant'
    //   Constant: '<S50>/Constant'
    //   Gain: '<S31>/Output'
    //   Gain: '<S50>/Gain'
    //   Gain: '<S50>/Gain1'
    //   Gain: '<S50>/Gain2'
    //   MATLABSystem: '<S14>/Divide by Constant and Round'
    //   Product: '<S50>/Product'
    //   Product: '<S50>/Product1'
    //   Product: '<S50>/Product2'
    //   Product: '<S50>/Product3'
    //   Product: '<S50>/Product4'
    //   Product: '<S50>/Product5'
    //   Product: '<S50>/Product6'
    //   Product: '<S50>/Product7'
    //   Product: '<S50>/Product8'
    //   RandomNumber: '<S31>/White Noise'
    //   Sum: '<S14>/Sum'
    //   Sum: '<S14>/Sum4'
    //   Sum: '<S50>/Sum'
    //   Sum: '<S50>/Sum1'
    //   Sum: '<S50>/Sum2'
    //   Sum: '<S50>/Sum3'

    proc_control_B.PressureDepth = std::floor((((((proc_control_B.t28 +
      proc_control_B.dp) * proc_control_P.Gain_Gain *
      proc_control_P.physics.DepthPose[0] + (proc_control_B.t26 -
      proc_control_B.n_tmp) * proc_control_P.Gain1_Gain *
      proc_control_P.physics.DepthPose[1]) + ((proc_control_P.Constant_Value_mj
      - proc_control_B.t14) - proc_control_B.t27) * proc_control_P.Gain2_Gain *
      proc_control_P.physics.DepthPose[2]) + proc_control_B.WorldPosition_n[2])
      + std::sqrt(proc_control_P.BandLimitedWhiteNoise3_Cov) /
      0.1414213562373095 * proc_control_DW.NextOutput_l) * 1000.0 + 0.5) *
      proc_control_P.Gain_Gain_n;

    // Outputs for Atomic SubSystem: '<S33>/Subscribe'
    // MATLABSystem: '<S42>/SourceBlock'
    proc_control_B.Merge = Sub_proc_control_19_1385.getLatestMessage
      (&proc_control_B.b_varargout_2_h);

    // Outputs for Enabled SubSystem: '<S42>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S44>/Enable'

    // MATLABSystem: '<S33>/MATLAB System' incorporates:
    //   MATLABSystem: '<S42>/SourceBlock'

    if (proc_control_B.Merge) {
      proc_control_DW.obj_fj.pingerPosition = proc_control_B.b_varargout_2_h;
    }

    // End of Outputs for SubSystem: '<S42>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S33>/Subscribe'
    //  Ajout du bruit sur la position du pinger.
    proc_control_rand(proc_control_B.unusedExpr_e);

    // ZeroOrderHold: '<S33>/Zero-Order Hold'
    //  Calculer les angles des hydros.
    // pinger2hydroAngles
    //     T__H_N = pinger2hydroAngles(IN1,IN2,IN3,IN4)
    //     This function was generated by the Symbolic Math Toolbox version 9.0. 
    //     02-Mar-2022 21:23:59
    if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
      // Outputs for Atomic SubSystem: '<S33>/Publish'
      // MATLABSystem: '<S41>/SinkBlock' incorporates:
      //   MATLABSystem: '<S33>/MATLAB System'

      Pub_proc_control_19_1384.publish(&proc_control_DW.obj_fj.pingerPosition);

      // End of Outputs for SubSystem: '<S33>/Publish'
    }

    // End of ZeroOrderHold: '<S33>/Zero-Order Hold'

    // Sum: '<S46>/Sum' incorporates:
    //   Product: '<S46>/Product1'
    //   Product: '<S46>/Product2'
    //   Product: '<S46>/Product3'
    //   UnaryMinus: '<S36>/Unary Minus'
    //   UnaryMinus: '<S36>/Unary Minus1'
    //   UnaryMinus: '<S36>/Unary Minus2'

    proc_control_B.t9 = ((-proc_control_B.y_d[1] * -proc_control_B.y_d[1] +
                          proc_control_B.oc) + -proc_control_B.y_d[2] *
                         -proc_control_B.y_d[2]) + -proc_control_B.y_d[3] *
      -proc_control_B.y_d[3];

    // Product: '<S34>/Divide'
    proc_control_B.scale = proc_control_B.y_d[0] / proc_control_B.t9;

    // Product: '<S34>/Divide1' incorporates:
    //   UnaryMinus: '<S36>/Unary Minus'

    proc_control_B.oc = proc_control_B.y_d[1] / proc_control_B.t9;

    // Product: '<S34>/Divide2' incorporates:
    //   UnaryMinus: '<S36>/Unary Minus1'

    proc_control_B.t45 = proc_control_B.y_d[2] / proc_control_B.t9;

    // Product: '<S34>/Divide3' incorporates:
    //   UnaryMinus: '<S36>/Unary Minus2'

    proc_control_B.t9 = proc_control_B.y_d[3] / proc_control_B.t9;

    // MATLAB Function: '<S14>/MATLAB Function' incorporates:
    //   Gain: '<S14>/Gain1'
    //   MATLABSystem: '<S14>/Divide by Constant and Round1'

    proc_control_B.y_e[0] = proc_control_P.Gain1_Gain_h *
      proc_control_B.sincos_o1[0];
    proc_control_B.y_e[1] = proc_control_P.Gain1_Gain_h *
      proc_control_B.sincos_o1[1];
    proc_control_B.y_e[2] = proc_control_P.Gain1_Gain_h *
      proc_control_B.sincos_o1[2];
    proc_control_B.Product3_pv = 1.0 / proc_control_B.t_f;
    proc_control_B.Product_n = proc_control_B.y_d[0] *
      proc_control_B.Product3_pv;
    proc_control_B.rq_idx_1 = proc_control_B.y_d[1] * proc_control_B.Product3_pv;
    proc_control_B.rq_idx_2 = proc_control_B.y_d[2] * proc_control_B.Product3_pv;
    proc_control_B.Product3_pv *= proc_control_B.y_d[3];
    proc_control_B.t_f = (proc_control_B.rq_idx_1 * proc_control_B.Product3_pv -
                          proc_control_B.Product_n * proc_control_B.rq_idx_2) *
      -2.0;
    proc_control_B.newPressureMsg = (proc_control_B.t_f >= 0.99999999999999778);
    proc_control_B.mask2 = (proc_control_B.t_f <= -0.99999999999999778);
    if (proc_control_B.t_f >= 0.99999999999999778) {
      proc_control_B.t_f = 1.0;
    }

    if (proc_control_B.mask2) {
      proc_control_B.t_f = -1.0;
    }

    proc_control_B.absxk = proc_control_B.Product_n * proc_control_B.Product_n;
    proc_control_B.rtb_Sum6_idx_1 = proc_control_B.rq_idx_1 *
      proc_control_B.rq_idx_1;
    proc_control_B.t60 = proc_control_B.rq_idx_2 * proc_control_B.rq_idx_2;
    proc_control_B.rtb_sincos_o1_tmp = proc_control_B.Product3_pv *
      proc_control_B.Product3_pv;
    proc_control_B.sincos_o1[0] = rt_atan2d_snf((proc_control_B.rq_idx_1 *
      proc_control_B.rq_idx_2 + proc_control_B.Product_n *
      proc_control_B.Product3_pv) * 2.0, ((proc_control_B.absxk +
      proc_control_B.rtb_Sum6_idx_1) - proc_control_B.t60) -
      proc_control_B.rtb_sincos_o1_tmp);
    proc_control_B.sincos_o1[1] = std::asin(proc_control_B.t_f);
    proc_control_B.sincos_o1[2] = rt_atan2d_snf((proc_control_B.rq_idx_2 *
      proc_control_B.Product3_pv + proc_control_B.Product_n *
      proc_control_B.rq_idx_1) * 2.0, ((proc_control_B.absxk -
      proc_control_B.rtb_Sum6_idx_1) - proc_control_B.t60) +
      proc_control_B.rtb_sincos_o1_tmp);
    proc_control_B.i = 0;
    if (proc_control_B.newPressureMsg || proc_control_B.mask2) {
      proc_control_B.i = 1;
    }

    proc_control_B.b_x_size_k = proc_control_B.i;
    if (proc_control_B.i - 1 >= 0) {
      proc_control_B.b_x_data_c = proc_control_B.t_f;
    }

    proc_control_B.idx_p = 0;
    while (proc_control_B.idx_p <= proc_control_B.i - 1) {
      if (!std::isnan(proc_control_B.b_x_data_c)) {
        if (proc_control_B.b_x_data_c < 0.0) {
          proc_control_B.b_x_data_c = -1.0;
        } else {
          proc_control_B.b_x_data_c = (proc_control_B.b_x_data_c > 0.0);
        }
      }

      proc_control_B.idx_p = 1;
    }

    proc_control_B.idx_p = 0;
    if (proc_control_B.newPressureMsg || proc_control_B.mask2) {
      proc_control_B.idx_p = 1;
    }

    proc_control_B.d_size = static_cast<int8_T>(proc_control_B.idx_p);
    if (static_cast<int8_T>(proc_control_B.idx_p) - 1 >= 0) {
      proc_control_B.d_data_i = rt_atan2d_snf(proc_control_B.rq_idx_1,
        proc_control_B.Product_n);
    }

    if (proc_control_B.i != static_cast<int8_T>(proc_control_B.idx_p)) {
      proc_control_binary_expand_op(proc_control_B.sincos_o1,
        &proc_control_B.b_x_data_c, &proc_control_B.b_x_size_k,
        &proc_control_B.d_data_i, &proc_control_B.d_size);
    }

    proc_control_B.ibmat = 0;
    if (proc_control_B.newPressureMsg || proc_control_B.mask2) {
      proc_control_B.ibmat = 1;
    }

    if (proc_control_B.ibmat - 1 >= 0) {
      proc_control_B.sincos_o1[2] = 0.0;
    }

    if (std::abs(proc_control_B.sincos_o1[1]) > 0.349066) {
      proc_control_B.y_e[0] = 32.7675;
      proc_control_B.y_e[1] = 32.7675;
      proc_control_B.y_e[2] = 32.7675;
    } else if (std::abs(proc_control_B.sincos_o1[2]) > 0.349066) {
      proc_control_B.y_e[0] = 32.7675;
      proc_control_B.y_e[1] = 32.7675;
      proc_control_B.y_e[2] = 32.7675;
    }

    // Sum: '<S14>/Sum1'
    proc_control_B.Quaternion[0] = proc_control_B.t55 + proc_control_B.scale;
    proc_control_B.Quaternion[1] = proc_control_B.t55 + proc_control_B.oc;
    proc_control_B.Quaternion[2] = proc_control_B.t55 + proc_control_B.t45;
    proc_control_B.Quaternion[3] = proc_control_B.t55 + proc_control_B.t9;

    // Sum: '<S14>/Sum3' incorporates:
    //   DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'

    proc_control_B.AngularRate_d[0] = proc_control_B.Product1_j1 +
      proc_control_B.theta0;
    proc_control_B.AngularRate_d[1] = proc_control_B.Product1_j1 +
      proc_control_B.AngularRate_a_idx_1;
    proc_control_B.AngularRate_d[2] = proc_control_B.Product1_j1 +
      proc_control_B.t57;

    // Product: '<S60>/Product7' incorporates:
    //   Product: '<S61>/Product7'

    proc_control_B.oc = proc_control_B.t44 * proc_control_B.t44;

    // Product: '<S60>/Product' incorporates:
    //   Product: '<S61>/Product'

    proc_control_B.t9 = proc_control_B.t41 * proc_control_B.t8;

    // Product: '<S60>/Product1' incorporates:
    //   Product: '<S61>/Product1'

    proc_control_B.Product3_pv = proc_control_B.t42 * proc_control_B.t44;

    // Sum: '<S14>/Sum5' incorporates:
    //   Constant: '<S14>/Constant1'
    //   Constant: '<S60>/Constant'
    //   Constant: '<S61>/Constant'
    //   Constant: '<S62>/Constant'
    //   Gain: '<S60>/Gain'
    //   Gain: '<S60>/Gain1'
    //   Gain: '<S60>/Gain2'
    //   Gain: '<S61>/Gain'
    //   Gain: '<S61>/Gain1'
    //   Gain: '<S61>/Gain2'
    //   Gain: '<S62>/Gain'
    //   Gain: '<S62>/Gain1'
    //   Gain: '<S62>/Gain2'
    //   MATLABSystem: '<S1>/MATLAB System'
    //   Product: '<S60>/Product'
    //   Product: '<S60>/Product1'
    //   Product: '<S60>/Product4'
    //   Product: '<S60>/Product5'
    //   Product: '<S60>/Product7'
    //   Product: '<S60>/Product8'
    //   Product: '<S61>/Product4'
    //   Product: '<S61>/Product5'
    //   Product: '<S61>/Product8'
    //   Product: '<S62>/Product4'
    //   Product: '<S62>/Product5'
    //   Product: '<S62>/Product8'
    //   Sum: '<S14>/Sum6'
    //   Sum: '<S60>/Sum'
    //   Sum: '<S60>/Sum1'
    //   Sum: '<S60>/Sum2'
    //   Sum: '<S60>/Sum3'
    //   Sum: '<S61>/Sum'
    //   Sum: '<S61>/Sum1'
    //   Sum: '<S61>/Sum2'
    //   Sum: '<S61>/Sum3'
    //   Sum: '<S62>/Sum'
    //   Sum: '<S62>/Sum1'
    //   Sum: '<S62>/Sum2'
    //   Sum: '<S62>/Sum3'

    proc_control_B.LinearAcceleration[0] = (((((proc_control_P.Constant_Value_ah
      - proc_control_B.t27) - proc_control_B.oc) * proc_control_P.Gain2_Gain_p *
      proc_control_P.Constant1_Value_m[0] + (proc_control_B.t9 +
      proc_control_B.Product3_pv) * proc_control_P.Gain_Gain_a *
      proc_control_P.Constant1_Value_m[1]) + (proc_control_B.t28 -
      proc_control_B.dp) * proc_control_P.Gain1_Gain_b *
      proc_control_P.Constant1_Value_m[2]) + proc_control_B.K_dz[7]) +
      proc_control_B.d;
    proc_control_B.LinearAcceleration[1] = (((((proc_control_P.Constant_Value_ar
      - proc_control_B.t14) - proc_control_B.oc) * proc_control_P.Gain2_Gain_a *
      proc_control_P.Constant1_Value_m[1] + (proc_control_B.t9 -
      proc_control_B.Product3_pv) * proc_control_P.Gain_Gain_c *
      proc_control_P.Constant1_Value_m[0]) + (proc_control_B.n_tmp +
      proc_control_B.t26) * proc_control_P.Gain1_Gain_a *
      proc_control_P.Constant1_Value_m[2]) + proc_control_B.K_dz[8]) +
      proc_control_B.d;
    proc_control_B.LinearAcceleration[2] = ((((proc_control_B.t28 +
      proc_control_B.dp) * proc_control_P.Gain_Gain_b *
      proc_control_P.Constant1_Value_m[0] + (proc_control_B.t26 -
      proc_control_B.n_tmp) * proc_control_P.Gain1_Gain_f *
      proc_control_P.Constant1_Value_m[1]) + ((proc_control_P.Constant_Value_i2
      - proc_control_B.t14) - proc_control_B.t27) * proc_control_P.Gain2_Gain_m *
      proc_control_P.Constant1_Value_m[2]) + proc_control_B.K_dz[9]) +
      proc_control_B.d;

    // Update for DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states = proc_control_B.notDryRun;

    // Update for DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_k = proc_control_B.trajClear;

    // Update for DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_o = proc_control_B.Product2_lm;

    // Update for DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_i = proc_control_B.linearScaling;

    // Update for DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_g = proc_control_B.xtmp;

    // Update for DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_h = proc_control_B.b_norm;

    // Update for DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_l = proc_control_B.t3;

    // Update for DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_ge = proc_control_B.t4;
    if ((&proc_control_M)->Timing.TaskCounters.TID[5] == 0) {
      // Update for UniformRandomNumber: '<S12>/ Drift' incorporates:
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S122>/N to A'
      //   Lookup_n-D: '<S122>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   Trigonometry: '<S254>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //
      for (proc_control_B.idx_p = 0; proc_control_B.idx_p < 6;
           proc_control_B.idx_p++) {
        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S225>/Enable'

        // Outputs for Enabled SubSystem: '<S250>/Subsystem2' incorporates:
        //   EnablePort: '<S253>/Enable'

        proc_control_DW.Drift_NextOutput[proc_control_B.idx_p] =
          (proc_control_P.dmax[proc_control_B.idx_p] -
           proc_control_P.dmin[proc_control_B.idx_p]) *
          rt_urand_Upu32_Yd_f_pw_snf
          (&proc_control_DW.RandSeed[proc_control_B.idx_p]) +
          proc_control_P.dmin[proc_control_B.idx_p];

        // End of Outputs for SubSystem: '<S250>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      }
    }

    // Update for Sin: '<S12>/Sine Wave'
    for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
      proc_control_DW.counter[proc_control_B.i]++;
      if (proc_control_DW.counter[proc_control_B.i] ==
          proc_control_P.waveDiscreteFrequency[proc_control_B.i]) {
        proc_control_DW.counter[proc_control_B.i] = 0;
      }
    }

    // End of Update for Sin: '<S12>/Sine Wave'

    // Update for UnitDelay: '<S1>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE[0] = proc_control_B.WorldPosition_n[0];
    proc_control_DW.UnitDelay_DSTATE[1] = proc_control_B.WorldPosition_n[1];
    proc_control_DW.UnitDelay_DSTATE[2] = proc_control_B.WorldPosition_n[2];
    proc_control_DW.UnitDelay_DSTATE[3] = proc_control_B.y_d[0];
    proc_control_DW.UnitDelay_DSTATE[4] = proc_control_B.y_d[1];
    proc_control_DW.UnitDelay_DSTATE[5] = proc_control_B.y_d[2];
    proc_control_DW.UnitDelay_DSTATE[6] = proc_control_B.y_d[3];

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    if (proc_control_B.NavReset > 0.0) {
      proc_control_DW.DiscreteTimeIntegrator_PrevRese = 1;
    } else if (proc_control_B.NavReset < 0.0) {
      proc_control_DW.DiscreteTimeIntegrator_PrevRese = -1;
    } else if (proc_control_B.NavReset == 0.0) {
      proc_control_DW.DiscreteTimeIntegrator_PrevRese = 0;
    } else {
      proc_control_DW.DiscreteTimeIntegrator_PrevRese = 2;
    }

    // Update for UnitDelay: '<S1>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE[7] = proc_control_B.ob;
    proc_control_DW.UnitDelay_DSTATE[10] = proc_control_B.theta0;

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[0] =
      proc_control_B.WorldPosition_n[0] + proc_control_B.sincos_o1_d[0];

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   UnitDelay: '<S1>/Unit Delay'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] = proc_control_B.theta0 +
      proc_control_B.sincos_o2[0];

    // Update for UnitDelay: '<S1>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE[8] = proc_control_B.BodyVelocity_c_idx_1;
    proc_control_DW.UnitDelay_DSTATE[11] = proc_control_B.AngularRate_a_idx_1;

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[1] =
      proc_control_B.WorldPosition_n[1] + proc_control_B.sincos_o1_d[1];

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   UnitDelay: '<S1>/Unit Delay'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] =
      proc_control_B.AngularRate_a_idx_1 + proc_control_B.sincos_o2[1];

    // Update for UnitDelay: '<S1>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE[9] = proc_control_B.t40;
    proc_control_DW.UnitDelay_DSTATE[12] = proc_control_B.t57;

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[2] =
      proc_control_B.WorldPosition_n[2] + proc_control_B.t65;

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   UnitDelay: '<S1>/Unit Delay'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] = proc_control_B.t57 +
      proc_control_B.oa;
    if (proc_control_B.NavReset > 0.0) {
      proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 1;
    } else if (proc_control_B.NavReset < 0.0) {
      proc_control_DW.DiscreteTimeIntegrator1_PrevRes = -1;
    } else if (proc_control_B.NavReset == 0.0) {
      proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 0;
    } else {
      proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 2;
    }

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_DW.DiscreteTimeIntegrator2_IC_LOAD = 0U;
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] =
      proc_control_B.TmpSignalConversionAtSFunct[0] + proc_control_B.n[0];
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] =
      proc_control_B.TmpSignalConversionAtSFunct[1] + proc_control_B.n[1];
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] =
      proc_control_B.TmpSignalConversionAtSFunct[2] + proc_control_B.n[2];
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[3] =
      proc_control_B.TmpSignalConversionAtSFunct[3] + proc_control_B.n_k;
    if (proc_control_B.NavReset > 0.0) {
      proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 1;
    } else if (proc_control_B.NavReset < 0.0) {
      proc_control_DW.DiscreteTimeIntegrator2_PrevRes = -1;
    } else if (proc_control_B.NavReset == 0.0) {
      proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 0;
    } else {
      proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 2;
    }

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator3'
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] = proc_control_B.ob +
      proc_control_B.BodyVelocity_c_tmp_idx_0;
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] =
      proc_control_B.BodyVelocity_c_idx_1 + proc_control_B.t39;
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] = proc_control_B.t40 +
      proc_control_B.oa_n;
    if (proc_control_B.NavReset > 0.0) {
      proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 1;
    } else if (proc_control_B.NavReset < 0.0) {
      proc_control_DW.DiscreteTimeIntegrator3_PrevRes = -1;
    } else if (proc_control_B.NavReset == 0.0) {
      proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 0;
    } else {
      proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 2;
    }

    // Update for RandomNumber: '<S28>/White Noise'
    proc_control_DW.NextOutput = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_j) * proc_control_P.WhiteNoise_StdDev +
      proc_control_P.WhiteNoise_Mean;

    // Update for RandomNumber: '<S29>/White Noise'
    proc_control_DW.NextOutput_b = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_d) * proc_control_P.WhiteNoise_StdDev_d +
      proc_control_P.WhiteNoise_Mean_e;

    // Update for RandomNumber: '<S30>/White Noise'
    proc_control_DW.NextOutput_g = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_e) * proc_control_P.WhiteNoise_StdDev_e +
      proc_control_P.WhiteNoise_Mean_c;

    // Update for RandomNumber: '<S31>/White Noise'
    proc_control_DW.NextOutput_l = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_n) * proc_control_P.WhiteNoise_StdDev_j +
      proc_control_P.WhiteNoise_Mean_p;

    // Update for RandomNumber: '<S32>/White Noise'
    proc_control_DW.NextOutput_e = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_b) * proc_control_P.WhiteNoise_StdDev_p +
      proc_control_P.WhiteNoise_Mean_l;
  }

  // End of Outputs for SubSystem: '<Root>/Modèle Physique'

  // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
  //   EnablePort: '<S4>/Enable'

  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    proc_control_DW.ROSOutput_MODE = (proc_control_B.SimActive > 0.0);
  }

  if (proc_control_DW.ROSOutput_MODE) {
    // MATLAB Function: '<S88>/MATLAB Function'
    proc_control_B.msg_i.Position.X = proc_control_B.WorldPosition_n[0];
    proc_control_B.msg_i.Position.Y = proc_control_B.WorldPosition_n[1];
    proc_control_B.msg_i.Position.Z = proc_control_B.WorldPosition_n[2];
    proc_control_B.msg_i.Orientation.X = proc_control_B.y_d[1];
    proc_control_B.msg_i.Orientation.Y = proc_control_B.y_d[2];
    proc_control_B.msg_i.Orientation.Z = proc_control_B.y_d[3];
    proc_control_B.msg_i.Orientation.W = proc_control_B.y_d[0];

    // Outputs for Atomic SubSystem: '<S88>/Publish'
    // MATLABSystem: '<S100>/SinkBlock'
    Pub_proc_control_75.publish(&proc_control_B.msg_i);

    // End of Outputs for SubSystem: '<S88>/Publish'

    // MATLAB Function: '<S85>/MATLAB Function' incorporates:
    //   Constant: '<S89>/Constant'

    proc_control_B.msg_b = proc_control_P.Constant_Value_h;
    proc_control_B.msg_b.XVelBtm = proc_control_B.y_e[0];
    proc_control_B.msg_b.YVelBtm = proc_control_B.y_e[1];
    proc_control_B.msg_b.ZVelBtm = proc_control_B.y_e[2];

    // Outputs for Atomic SubSystem: '<S85>/Publish'
    // MATLABSystem: '<S91>/SinkBlock'
    Pub_proc_control_41.publish(&proc_control_B.msg_b);

    // End of Outputs for SubSystem: '<S85>/Publish'

    // BusAssignment: '<S86>/Bus Assignment' incorporates:
    //   DataTypeConversion: '<S86>/Cast To Double'

    proc_control_B.BusAssignment.Data = static_cast<real32_T>
      (proc_control_B.PressureDepth);

    // Outputs for Atomic SubSystem: '<S86>/Publish Depth'
    // MATLABSystem: '<S93>/SinkBlock'
    Pub_proc_control_243.publish(&proc_control_B.BusAssignment);

    // End of Outputs for SubSystem: '<S86>/Publish Depth'

    // Outputs for Atomic SubSystem: '<S87>/Header Assignment'
    proc_control_CurrentTime(&proc_control_B.CurrentTime);

    // Switch: '<S95>/Switch1' incorporates:
    //   Constant: '<S95>/Constant1'
    //   StringConstant: '<S95>/String Constant1'

    if (proc_control_P.Constant1_Value_a != 0.0) {
      proc_control_B.Switch1 = proc_control_P.StringConstant1_String;
    } else {
      // ASCIIToString: '<S95>/ASCII to String' incorporates:
      //   Constant: '<S94>/Constant'

      for (proc_control_B.Ns = 0; proc_control_B.Ns < 128; proc_control_B.Ns++)
      {
        proc_control_B.charValue_j[proc_control_B.Ns] = static_cast<int8_T>
          (proc_control_P.Constant_Value_g.Header.FrameId[proc_control_B.Ns]);
      }

      proc_control_B.Switch1.assign(&proc_control_B.charValue_j[0], 128U);

      // End of ASCIIToString: '<S95>/ASCII to String'
    }

    // End of Switch: '<S95>/Switch1'

    // StringToASCII: '<S95>/String To ASCII'
    std::strncpy((char_T *)&proc_control_B.msg_c.Header.FrameId[0],
                 proc_control_B.Switch1.c_str(), 128U);

    // Switch: '<S95>/Switch' incorporates:
    //   Constant: '<S95>/Constant'

    if (proc_control_P.Constant_Value_pr != 0.0) {
      // MATLAB Function: '<S87>/MATLAB Function'
      proc_control_B.msg_c.Header.Stamp = proc_control_B.CurrentTime.CurrentTime;
    } else {
      // MATLAB Function: '<S87>/MATLAB Function' incorporates:
      //   Constant: '<S94>/Constant'

      proc_control_B.msg_c.Header.Stamp =
        proc_control_P.Constant_Value_g.Header.Stamp;
    }

    // End of Switch: '<S95>/Switch'

    // MATLAB Function: '<S87>/MATLAB Function' incorporates:
    //   Constant: '<S94>/Constant'
    //   SignalConversion generated from: '<S95>/HeaderAssign'
    //   StringLength: '<S95>/String Length'
    //   Sum: '<S14>/Sum5'

    proc_control_B.msg_c.Header.Seq = proc_control_P.Constant_Value_g.Header.Seq;
    proc_control_B.msg_c.Header.FrameId_SL_Info.CurrentLength =
      proc_control_B.Switch1.length();
    proc_control_B.msg_c.Header.FrameId_SL_Info.ReceivedLength =
      proc_control_P.Constant_Value_g.Header.FrameId_SL_Info.ReceivedLength;
    std::memcpy(&proc_control_B.msg_c.OrientationCovariance[0],
                &proc_control_P.Constant_Value_g.OrientationCovariance[0], 9U *
                sizeof(real_T));
    std::memcpy(&proc_control_B.msg_c.AngularVelocityCovariance[0],
                &proc_control_P.Constant_Value_g.AngularVelocityCovariance[0],
                9U * sizeof(real_T));
    std::memcpy(&proc_control_B.msg_c.LinearAccelerationCovariance[0],
                &proc_control_P.Constant_Value_g.LinearAccelerationCovariance[0],
                9U * sizeof(real_T));

    // End of Outputs for SubSystem: '<S87>/Header Assignment'
    proc_control_B.msg_c.AngularVelocity.X = proc_control_B.AngularRate_d[0];
    proc_control_B.msg_c.AngularVelocity.Y = proc_control_B.AngularRate_d[1];
    proc_control_B.msg_c.AngularVelocity.Z = proc_control_B.AngularRate_d[2];
    proc_control_B.msg_c.Orientation.X = proc_control_B.Quaternion[1];
    proc_control_B.msg_c.Orientation.Y = proc_control_B.Quaternion[2];
    proc_control_B.msg_c.Orientation.Z = proc_control_B.Quaternion[3];
    proc_control_B.msg_c.Orientation.W = proc_control_B.Quaternion[0];
    proc_control_B.msg_c.LinearAcceleration.X =
      proc_control_B.LinearAcceleration[0];
    proc_control_B.msg_c.LinearAcceleration.Y =
      proc_control_B.LinearAcceleration[1];
    proc_control_B.msg_c.LinearAcceleration.Z =
      proc_control_B.LinearAcceleration[2];

    // Outputs for Atomic SubSystem: '<S87>/Publish imu_info'
    // MATLABSystem: '<S97>/SinkBlock'
    Pub_proc_control_47.publish(&proc_control_B.msg_c);

    // End of Outputs for SubSystem: '<S87>/Publish imu_info'
  }

  // End of Outputs for SubSystem: '<Root>/ROS Output'
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // MATLAB Function: '<S288>/MATLAB Function2' incorporates:
    //   Merge generated from: '<S9>/Merge'

    proc_control_B.msg.Position.X = proc_control_B.target[0];
    proc_control_B.msg.Position.Y = proc_control_B.target[1];
    proc_control_B.msg.Position.Z = proc_control_B.target[2];
    proc_control_B.msg.Orientation.W = proc_control_B.target[3];
    proc_control_B.msg.Orientation.X = proc_control_B.target[4];
    proc_control_B.msg.Orientation.Y = proc_control_B.target[5];
    proc_control_B.msg.Orientation.Z = proc_control_B.target[6];

    // ZeroOrderHold: '<S288>/Zero-Order Hold'
    if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
      // ZeroOrderHold: '<S288>/Zero-Order Hold'
      proc_control_B.ZeroOrderHold = proc_control_B.msg;
    }

    // End of ZeroOrderHold: '<S288>/Zero-Order Hold'
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
    // Outputs for Atomic SubSystem: '<S288>/Publish5'
    // MATLABSystem: '<S299>/SinkBlock'
    Pub_proc_control_184_1596.publish(&proc_control_B.ZeroOrderHold);

    // End of Outputs for SubSystem: '<S288>/Publish5'
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // Update for Atomic SubSystem: '<S10>/ROS Command Manager'
    // Update for Delay: '<S309>/Delay'
    proc_control_DW.Delay_DSTATE_e = proc_control_B.y;

    // End of Update for SubSystem: '<S10>/ROS Command Manager'

    // Update for Delay: '<S230>/ ' incorporates:
    //   SignalConversion generated from: '<S5>/thrust'

    std::memcpy(&proc_control_DW._DSTATE[0],
                &proc_control_B.BufferToMakeInportVirtual_Inser[0], sizeof
                (real_T) << 3U);
  }

  rate_scheduler((&proc_control_M));
}

// Model initialize function
void proc_control::initialize()
{
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));

  {
    static const real_T tmp_1k[33]{ 0.0, 1.0, 0.0, 0.1, 1.0, 0.0, 0.2, 1.0, 0.0,
      0.30000000000000004, 1.0, 0.0, 0.4, 1.0, 0.0, 0.5, 1.0, 0.0, 0.6, 1.0, 0.0,
      0.7, 1.0, 0.0, 0.8, 1.0, 0.0, 0.9, 1.0, 0.0, 1.0, 1.0, 0.0 };

    static const real_T tmp_1o[13]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0 };

    static const char_T tmp_u[46]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 't', 'a', 'r', 'g', 'e', 't', '_', 'r', 'e', 'a',
      'c', 'h', 'e', 'd', '/', 'a', 'n', 'g', 'u', 'l', 'a', 'r', '_', 't', 'o',
      'l', 'e', 'r', 'a', 'n', 'c', 'e' };

    static const char_T tmp_v[46]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 't', 'a', 'r', 'g', 'e', 't', '_', 'r', 'e', 'a',
      'c', 'h', 'e', 'd', '/', 't', 'i', 'm', 'e', '_', 'i', 'n', '_', 't', 'o',
      'l', 'e', 'r', 'a', 'n', 'c', 'e' };

    static const char_T tmp_t[45]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 't', 'a', 'r', 'g', 'e', 't', '_', 'r', 'e', 'a',
      'c', 'h', 'e', 'd', '/', 'l', 'i', 'n', 'e', 'a', 'r', '_', 't', 'o', 'l',
      'e', 'r', 'a', 'n', 'c', 'e' };

    static const char_T tmp_1[38]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'k', 'i', 'l', 'l', '_', 'm', 'i', 's', 's', 'i', 'o', 'n', '/', 'k',
      'i', 'l', 'l', '_', 's', 'w', 'i', 't', 'c', 'h', '_', 'm', 's', 'g' };

    static const char_T tmp_1u[36]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 's', 'e', 't', '_', 'p', 'i', 'n',
      'g', 'e', 'r', '_', 'l', 'o', 'c', 'a', 't', 'i', 'o', 'n' };

    static const char_T tmp_e[35]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'g', 'a', 'i', 'n', 's', '/',
      'd', 'e', 'f', 'a', 'u', 'l', 't', '/', 'm', 'v', 'r' };

    static const char_T tmp_1d[34]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 'd', 'v',
      'l', '_', 'r', 'o', 't', 'a', 't', 'i', 'o', 'n' };

    static const char_T tmp_1h[34]{ '/', 'p', 'r', 'o', 'c', '_', 'p', 'l', 'a',
      'n', 'n', 'e', 'r', '/', 's', 'e', 'n', 'd', '_', 't', 'r', 'a', 'j', 'e',
      'c', 't', 'o', 'r', 'y', '_', 'l', 'i', 's', 't' };

    static const char_T tmp_b[34]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'g', 'a', 'i', 'n', 's', '/',
      'd', 'e', 'f', 'a', 'u', 'l', 't', '/', 'o', 'v' };

    static const char_T tmp_d[34]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'g', 'a', 'i', 'n', 's', '/',
      'd', 'e', 'f', 'a', 'u', 'l', 't', '/', 'm', 'v' };

    static const char_T tmp_2[33]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 's', 't', 'a', 'r', 't', '_', 's',
      'i', 'm', 'u', 'l', 'a', 't', 'i', 'o', 'n' };

    static const char_T tmp_10[32]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 's', 'u',
      'b', '_', 'h', 'e', 'i', 'g', 'h', 't' };

    static const char_T tmp_17[32]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 'a', 'd',
      'd', 'e', 'd', '_', 'm', 'a', 's', 's' };

    static const char_T tmp_1a[32]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 'd', 'e',
      'p', 't', 'h', '_', 'p', 'o', 's', 'e' };

    static const char_T tmp_1b[32]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 'h', 'y',
      'd', 'r', 'o', '_', 'p', 'o', 's', 'e' };

    static const char_T tmp_1c[32]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 's', 'o',
      'n', 'a', 'r', '_', 'p', 'o', 's', 'e' };

    static const char_T tmp_1v[32]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'p', 'i', 'n', 'g', 'e', 'r', '_',
      'l', 'o', 'c', 'a', 't', 'i', 'o', 'n' };

    static const char_T tmp_c[32]{ '3', '0', ',', '3', '0', ',', '3', '0', ',',
      '4', '5', ',', '4', '5', ',', '4', '5', ',', '4', '5', ',', '0', ',', '0',
      ',', '0', ',', '0', ',', '0', ',', '0' };

    static const char_T tmp_o[32]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'g', 'a', 'i', 'n', 's', '/',
      'n', 'o', 'D', 'v', 'l', '/', 'm', 'v' };

    static const char_T tmp_1e[31]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 't', 'h',
      'r', 'u', 's', 't', 'e', 'r', 's' };

    static const char_T tmp_1r[31]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 't', 'h', 'r', 'u', 's', 't', 'e', 'r', '/', 't', 'h', 'r', 'u', 's',
      't', 'e', 'r', '_', 'p', 'w', 'm' };

    static const char_T tmp_h[31]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'g', 'a', 'i', 'n', 's', '/',
      'c', '1', '0', '/', 'm', 'v', 'r' };

    static const char_T tmp_k[31]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'g', 'a', 'i', 'n', 's', '/',
      'c', '1', '1', '/', 'm', 'v', 'r' };

    static const char_T tmp_n[31]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'g', 'a', 'i', 'n', 's', '/',
      'c', '1', '9', '/', 'm', 'v', 'r' };

    static const char_T tmp_4[30]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'r', 'e', 's', 'e', 't', '_', 't', 'r', 'a', 'j',
      'e', 'c', 't', 'o', 'r', 'y' };

    static const char_T tmp_f[30]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'g', 'a', 'i', 'n', 's', '/',
      'c', '1', '0', '/', 'o', 'v' };

    static const char_T tmp_g[30]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'g', 'a', 'i', 'n', 's', '/',
      'c', '1', '0', '/', 'm', 'v' };

    static const char_T tmp_i[30]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'g', 'a', 'i', 'n', 's', '/',
      'c', '1', '1', '/', 'o', 'v' };

    static const char_T tmp_j[30]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'g', 'a', 'i', 'n', 's', '/',
      'c', '1', '1', '/', 'm', 'v' };

    static const char_T tmp_l[30]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'g', 'a', 'i', 'n', 's', '/',
      'c', '1', '9', '/', 'o', 'v' };

    static const char_T tmp_m[30]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'g', 'a', 'i', 'n', 's', '/',
      'c', '1', '9', '/', 'm', 'v' };

    static const char_T tmp_1t[29]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 't', 'h', 'r', 'u', 's', 't', 'e',
      'r', '_', 'r', 'p', 'm' };

    static const char_T tmp_6[29]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'd', 'v', 'l', '_', 'v', 'e', 'l',
      'o', 'c', 'i', 't', 'y' };

    static const char_T tmp_1s[28]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 'c', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', '_',
      'i', 'n', 'f', 'o' };

    static const char_T tmp_1x[28]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'c', 'u', 'r', 'r', 'e', 'n', 't', '_', 't', 'a',
      'r', 'g', 'e', 't' };

    static const char_T tmp_z[28]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 'v', 'o',
      'l', 'u', 'm', 'e' };

    static const char_T tmp_1m[27]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 's', 'e', 't', '_', 'm', 'p', 'c', '_', 'g', 'a',
      'i', 'n', 's' };

    static const char_T tmp_1n[27]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'p', 'o', 'w', 'e', 'r', '/', 'c', 'u', 'r', 'r', 'e', 'n', 't', '_',
      'n', 'o', 't' };

    static const char_T tmp_1w[27]{ 'p', 'r', 'o', 'c', '_', 's', 'i', 'm', 'u',
      'l', 'a', 't', 'i', 'o', 'n', '/', 't', 'r', 'u', 'e', '_', 's', 't', 'a',
      't', 'e', 's' };

    static const char_T tmp_1q[26]{ '/', 't', 'e', 'l', 'e', 'm', 'e', 't', 'r',
      'y', '/', 't', 'h', 'r', 'u', 's', 't', 'e', 'r', '_', 'n', 'e', 'w', 't',
      'o', 'n' };

    static const char_T tmp_9[26]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'd', 'v', 'l', '/', 'd', 'v', 'l', '_', 'v', 'e', 'l', 'o', 'c', 'i',
      't', 'y' };

    static const char_T tmp_y[26]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 'm', 'a',
      's', 's' };

    static const char_T tmp_14[25]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 'c', 'd',
      'l' };

    static const char_T tmp_16[25]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 'c', 'd',
      'q' };

    static const char_T tmp_5[25]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'i', 'm', 'u', '_', 'i', 'n', 'f',
      'o' };

    static const char_T tmp_w[25]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 'r', 'h',
      'o' };

    static const char_T tmp_11[24]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 'r', 'g'
    };

    static const char_T tmp_13[24]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 'r', 'b'
    };

    static const char_T tmp_18[23]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 'I' };

    static const char_T tmp_x[23]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'p', 'h', 'y', 's', 'i', 'c', 's', '/', 'g' };

    static const char_T tmp[22]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 's', 'e', 't', '_', 'm', 'o', 'd', 'e' };

    static const char_T tmp_1g[22]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 's', 'e', 'n', 's', 'o', 'r', '_', 'o', 'n' };

    static const char_T tmp_7[22]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'd', 'e', 'p', 't', 'h' };

    static const char_T tmp_8[22]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'i', 'm', 'u', '/', 'i', 'm', 'u', '_', 'i', 'n', 'f', 'o' };

    static const char_T tmp_r[22]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 't', 'm', 'a', 'x' };

    static const char_T tmp_s[22]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 't', 'm', 'i', 'n' };

    static const char_T tmp_1f[21]{ '/', 'p', 'r', 'o', 'c', '_', 'n', 'a', 'v',
      '/', 'a', 'u', 'v', '_', 's', 't', 'a', 't', 'e', 's', '/' };

    static const char_T tmp_1j[21]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 'a', 'd', 'd', '_', 'p', 'o', 's', 'e' };

    static const char_T tmp_a[21]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'd', 'e', 'p', 't', 'h', '/', 'd', 'e', 'p', 't', 'h' };

    static const char_T tmp_0[19]{ '/', 'p', 'r', 'o', 'c', '_', 'n', 'a', 'v',
      '/', 'r', 'e', 's', 'e', 't', '_', 'p', 'o', 's' };

    static const char_T tmp_p[19]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'p' };

    static const char_T tmp_q[19]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '/', 'm' };

    static const char_T tmp_3[18]{ '/', 't', 'e', 'l', 'e', 'm', 'e', 't', 'r',
      'y', '/', 'd', 'r', 'y', '_', 'r', 'u', 'n' };

    static const char_T tmp_19[17]{ '0', ',', '0', ',', '0', ',', '0', ',', '0',
      ',', '0', ',', '0', ',', '0', ',', '0' };

    static const char_T tmp_1i[15]{ '/', 's', 'p', 'a', 'c', 'e', 'n', 'a', 'v',
      '/', 't', 'w', 'i', 's', 't' };

    static const char_T tmp_15[11]{ '0', ',', '0', ',', '0', ',', '0', ',', '0',
      ',', '0' };

    static const char_T tmp_12[5]{ '0', ',', '0', ',', '0' };

    static const int8_T tmp_1p[169]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 1 };

    static const int8_T tmp_1l[7]{ 0, 0, 0, 1, 0, 0, 0 };

    // Start for If: '<S10>/If'
    proc_control_DW.If_ActiveSubsystem = -1;

    // Start for SwitchCase: '<S9>/Switch Case'
    proc_control_DW.SwitchCase_ActiveSubsystem = -1;
    proc_control_PrevZCX.Trajectorygenerator_Reset_ZCE = POS_ZCSIG;

    // InitializeConditions for Delay: '<S230>/ '
    std::memcpy(&proc_control_DW._DSTATE[0], &proc_control_P._InitialCondition[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for Atomic SubSystem: '<S10>/ROS Command Manager'
    // InitializeConditions for Delay: '<S309>/Delay'
    proc_control_DW.Delay_DSTATE_e = proc_control_P.Delay_InitialCondition_c;

    // SystemInitialize for Atomic SubSystem: '<S309>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S320>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S326>/In1' incorporates:
    //   Outport: '<S326>/Out1'

    proc_control_B.In1_i2 = proc_control_P.Out1_Y0_k;

    // End of SystemInitialize for SubSystem: '<S320>/Enabled Subsystem'

    // Start for MATLABSystem: '<S320>/SourceBlock'
    proc_control_DW.obj_mt.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_mt.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 22; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_jw[proc_control_B.i_d] =
        tmp[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_jw[22] = '\x00';
    Sub_proc_control_185_13.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_jw[0], 1);
    proc_control_DW.obj_mt.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S320>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S309>/Subscribe2'

    // SystemInitialize for Atomic SubSystem: '<S309>/Subscribe3'
    // Start for MATLABSystem: '<S321>/SourceBlock'
    proc_control_DW.obj_oz.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_oz.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 19; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_h[proc_control_B.i_d] =
        tmp_0[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_h[19] = '\x00';
    Sub_proc_control_185_14.createSubscriber(&proc_control_B.b_zeroDelimTopic_h
      [0], 1);
    proc_control_DW.obj_oz.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S321>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S309>/Subscribe3'

    // SystemInitialize for Atomic SubSystem: '<S309>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S319>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S325>/In1' incorporates:
    //   Outport: '<S325>/Out1'

    proc_control_B.In1_cx = proc_control_P.Out1_Y0_h;

    // End of SystemInitialize for SubSystem: '<S319>/Enabled Subsystem'

    // Start for MATLABSystem: '<S319>/SourceBlock'
    proc_control_DW.obj_hb.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hb.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 38; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic[proc_control_B.i_d] =
        tmp_1[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic[38] = '\x00';
    Sub_proc_control_185_12.createSubscriber(&proc_control_B.b_zeroDelimTopic[0],
      1);
    proc_control_DW.obj_hb.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S319>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S309>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S309>/startSim'
    // SystemInitialize for Enabled SubSystem: '<S324>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S330>/In1' incorporates:
    //   Outport: '<S330>/Out1'

    proc_control_B.In1_n = proc_control_P.Out1_Y0_g;

    // End of SystemInitialize for SubSystem: '<S324>/Enabled Subsystem'

    // Start for MATLABSystem: '<S324>/SourceBlock'
    proc_control_DW.obj_bh.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_bh.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 33; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_l[proc_control_B.i_d] =
        tmp_2[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_l[33] = '\x00';
    Sub_proc_control_185_11.createSubscriber(&proc_control_B.b_zeroDelimTopic_l
      [0], 1);
    proc_control_DW.obj_bh.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S324>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S309>/startSim'

    // SystemInitialize for Atomic SubSystem: '<S309>/Subscribe5'
    // SystemInitialize for Enabled SubSystem: '<S323>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S329>/In1' incorporates:
    //   Outport: '<S329>/Out1'

    proc_control_B.In1_f1 = proc_control_P.Out1_Y0_a;

    // End of SystemInitialize for SubSystem: '<S323>/Enabled Subsystem'

    // Start for MATLABSystem: '<S323>/SourceBlock'
    proc_control_DW.obj_fx.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fx.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 18; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_i[proc_control_B.i_d] =
        tmp_3[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_i[18] = '\x00';
    Sub_proc_control_185_270.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_i[0], 1);
    proc_control_DW.obj_fx.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S323>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S309>/Subscribe5'

    // SystemInitialize for Atomic SubSystem: '<S309>/Subscribe4'
    // Start for MATLABSystem: '<S322>/SourceBlock'
    proc_control_DW.obj_hh.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hh.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 30; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_j[proc_control_B.i_d] =
        tmp_4[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_j[30] = '\x00';
    Sub_proc_control_185_268.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_j[0], 1);
    proc_control_DW.obj_hh.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S322>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S309>/Subscribe4'

    // Start for MATLABSystem: '<S309>/MATLAB System'
    proc_control_DW.obj_mv.initial_mode = proc_control_P.mode.init;
    proc_control_DW.obj_mv.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S309>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 7; proc_control_B.i_d++) {
      proc_control_DW.obj_mv.m_initCond[proc_control_B.i_d] = 0.0;
    }

    proc_control_DW.obj_mv.m_mode = proc_control_DW.obj_mv.initial_mode;
    proc_control_DW.obj_mv.m_killStatus = 0.0;
    proc_control_DW.obj_mv.m_simulation = 0.0;
    proc_control_DW.obj_mv.m_reset = 0.0;
    proc_control_DW.obj_mv.m_trajClear = 0.0;
    proc_control_DW.obj_mv.m_notDryRun = 1.0;

    // End of InitializeConditions for MATLABSystem: '<S309>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S10>/ROS Command Manager'

    // SystemInitialize for IfAction SubSystem: '<S3>/Simulation'
    // SystemInitialize for Atomic SubSystem: '<S66>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S74>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S77>/In1' incorporates:
    //   Outport: '<S77>/Out1'

    proc_control_B.In1_pd = proc_control_P.Out1_Y0_f;

    // End of SystemInitialize for SubSystem: '<S74>/Enabled Subsystem'

    // Start for MATLABSystem: '<S74>/SourceBlock' incorporates:
    //   MATLABSystem: '<S97>/SinkBlock'

    proc_control_DW.obj_i4.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_i4.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S87>/Publish imu_info'
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 25; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_jz[proc_control_B.i_d] =
        tmp_5[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_jz[25] = '\x00';

    // End of SystemInitialize for SubSystem: '<S87>/Publish imu_info'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 26; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_fn[proc_control_B.i_d] =
        proc_control_B.b_zeroDelimTopic_jz[proc_control_B.i_d];
    }

    Sub_proc_control_31_1241.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_fn[0], 1);
    proc_control_DW.obj_i4.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S74>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S66>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S66>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S76>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S79>/In1' incorporates:
    //   Outport: '<S79>/Out1'

    proc_control_B.In1_c = proc_control_P.Out1_Y0_ma;

    // End of SystemInitialize for SubSystem: '<S76>/Enabled Subsystem'

    // Start for MATLABSystem: '<S76>/SourceBlock' incorporates:
    //   MATLABSystem: '<S91>/SinkBlock'

    proc_control_DW.obj_bg.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_bg.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S85>/Publish'
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 29; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_js[proc_control_B.i_d] =
        tmp_6[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_js[29] = '\x00';

    // End of SystemInitialize for SubSystem: '<S85>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 30; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_f[proc_control_B.i_d] =
        proc_control_B.b_zeroDelimTopic_js[proc_control_B.i_d];
    }

    Sub_proc_control_31_1242.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_f[0], 1);
    proc_control_DW.obj_bg.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S76>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S66>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S66>/Subscribe depth'
    // SystemInitialize for Enabled SubSystem: '<S75>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S78>/In1' incorporates:
    //   Outport: '<S78>/Out1'

    proc_control_B.In1_om = proc_control_P.Out1_Y0_n;

    // End of SystemInitialize for SubSystem: '<S75>/Enabled Subsystem'

    // Start for MATLABSystem: '<S75>/SourceBlock' incorporates:
    //   MATLABSystem: '<S93>/SinkBlock'

    proc_control_DW.obj_df1.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_df1.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S86>/Publish Depth'
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 22; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_jw[proc_control_B.i_d] =
        tmp_7[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_jw[22] = '\x00';

    // End of SystemInitialize for SubSystem: '<S86>/Publish Depth'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 23; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_oo[proc_control_B.i_d] =
        proc_control_B.b_zeroDelimTopic_jw[proc_control_B.i_d];
    }

    Sub_proc_control_31_1305.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_oo[0], 1);
    proc_control_DW.obj_df1.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S75>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S66>/Subscribe depth'
    // End of SystemInitialize for SubSystem: '<S3>/Simulation'

    // SystemInitialize for IfAction SubSystem: '<S3>/AUV8'
    // SystemInitialize for Atomic SubSystem: '<S65>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S68>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S71>/In1' incorporates:
    //   Outport: '<S71>/Out1'

    proc_control_B.In1_p = proc_control_P.Out1_Y0_l;

    // End of SystemInitialize for SubSystem: '<S68>/Enabled Subsystem'

    // Start for MATLABSystem: '<S68>/SourceBlock'
    proc_control_DW.obj_lu.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_lu.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 22; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_oo[proc_control_B.i_d] =
        tmp_8[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_oo[22] = '\x00';
    Sub_proc_control_31_5.createSubscriber(&proc_control_B.b_zeroDelimTopic_oo[0],
      1);
    proc_control_DW.obj_lu.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S68>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S65>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S65>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S69>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S72>/In1' incorporates:
    //   Outport: '<S72>/Out1'

    proc_control_B.In1_i = proc_control_P.Out1_Y0_p;

    // End of SystemInitialize for SubSystem: '<S69>/Enabled Subsystem'

    // Start for MATLABSystem: '<S69>/SourceBlock'
    proc_control_DW.obj_dh.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_dh.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 26; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_n[proc_control_B.i_d] =
        tmp_9[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_n[26] = '\x00';
    Sub_proc_control_31_1235.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_n[0], 1);
    proc_control_DW.obj_dh.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S69>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S65>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S65>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S70>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S73>/In1' incorporates:
    //   Outport: '<S73>/Out1'

    proc_control_B.In1_e = proc_control_P.Out1_Y0_nb;

    // End of SystemInitialize for SubSystem: '<S70>/Enabled Subsystem'

    // Start for MATLABSystem: '<S70>/SourceBlock'
    proc_control_DW.obj_ow.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ow.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 21; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_cs[proc_control_B.i_d] =
        tmp_a[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_cs[21] = '\x00';
    Sub_proc_control_31_1302.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_cs[0], 1);
    proc_control_DW.obj_ow.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S70>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S65>/Subscribe2'
    // End of SystemInitialize for SubSystem: '<S3>/AUV8'

    // SystemInitialize for IfAction SubSystem: '<S10>/Get_ROS_param '
    // Start for MATLABSystem: '<S314>/Get Parameter'
    proc_control_DW.obj_f1.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_f1.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 34; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_o[proc_control_B.i_d] =
        tmp_b[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_o[34] = '\x00';
    ParamGet_proc_control_185_465.initialize(&proc_control_B.b_zeroDelimName_o[0]);
    ParamGet_proc_control_185_465.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_c[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_465.set_initial_value
      (&proc_control_B.initialValue[0], 32U);
    proc_control_DW.obj_f1.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S314>/Get Parameter'
    proc_control_MATLABSystem_Init(&proc_control_DW.MATLABSystem_f);

    // Start for MATLABSystem: '<S314>/Get Parameter1'
    proc_control_DW.obj_dj.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_dj.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 34; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_o[proc_control_B.i_d] =
        tmp_d[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_o[34] = '\x00';
    ParamGet_proc_control_185_466.initialize(&proc_control_B.b_zeroDelimName_o[0]);
    ParamGet_proc_control_185_466.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_c[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_466.set_initial_value
      (&proc_control_B.initialValue[0], 32U);
    proc_control_DW.obj_dj.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S314>/Get Parameter1'
    proc_control_MATLABSystem1_Init(&proc_control_DW.MATLABSystem1_f);

    // Start for MATLABSystem: '<S314>/Get Parameter2'
    proc_control_DW.obj_kf.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_kf.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 35; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_f[proc_control_B.i_d] =
        tmp_e[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_f[35] = '\x00';
    ParamGet_proc_control_185_467.initialize(&proc_control_B.b_zeroDelimName_f[0]);
    ParamGet_proc_control_185_467.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_c[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_467.set_initial_value
      (&proc_control_B.initialValue[0], 32U);
    proc_control_DW.obj_kf.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S314>/Get Parameter2'
    proc_control_MATLABSystem1_Init(&proc_control_DW.MATLABSystem2);

    // Start for MATLABSystem: '<S315>/Get Parameter'
    proc_control_DW.obj_k2.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_k2.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 30; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_j[proc_control_B.i_d] =
        tmp_f[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_j[30] = '\x00';
    ParamGet_proc_control_185_440.initialize(&proc_control_B.b_zeroDelimTopic_j
      [0]);
    ParamGet_proc_control_185_440.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_c[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_440.set_initial_value
      (&proc_control_B.initialValue[0], 32U);
    proc_control_DW.obj_k2.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S315>/Get Parameter'
    proc_control_MATLABSystem_Init(&proc_control_DW.MATLABSystem_fn);

    // Start for MATLABSystem: '<S315>/Get Parameter1'
    proc_control_DW.obj_frx.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_frx.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 30; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_j[proc_control_B.i_d] =
        tmp_g[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_j[30] = '\x00';
    ParamGet_proc_control_185_441.initialize(&proc_control_B.b_zeroDelimTopic_j
      [0]);
    ParamGet_proc_control_185_441.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_c[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_441.set_initial_value
      (&proc_control_B.initialValue[0], 32U);
    proc_control_DW.obj_frx.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S315>/Get Parameter1'
    proc_control_MATLABSystem1_Init(&proc_control_DW.MATLABSystem1_fn);

    // Start for MATLABSystem: '<S315>/Get Parameter2'
    proc_control_DW.obj_ku.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ku.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 31; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_h[proc_control_B.i_d];
    }

    proc_control_B.initialValue[31] = '\x00';
    ParamGet_proc_control_185_442.initialize(&proc_control_B.initialValue[0]);
    ParamGet_proc_control_185_442.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_c[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_442.set_initial_value
      (&proc_control_B.initialValue[0], 32U);
    proc_control_DW.obj_ku.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S315>/Get Parameter2'
    proc_control_MATLABSystem1_Init(&proc_control_DW.MATLABSystem2_f);

    // Start for MATLABSystem: '<S316>/Get Parameter'
    proc_control_DW.obj_hu.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hu.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 30; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_j[proc_control_B.i_d] =
        tmp_i[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_j[30] = '\x00';
    ParamGet_proc_control_185_453.initialize(&proc_control_B.b_zeroDelimTopic_j
      [0]);
    ParamGet_proc_control_185_453.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_c[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_453.set_initial_value
      (&proc_control_B.initialValue[0], 32U);
    proc_control_DW.obj_hu.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S316>/Get Parameter'
    proc_control_MATLABSystem_Init(&proc_control_DW.MATLABSystem_fni);

    // Start for MATLABSystem: '<S316>/Get Parameter1'
    proc_control_DW.obj_l4.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_l4.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 30; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_j[proc_control_B.i_d] =
        tmp_j[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_j[30] = '\x00';
    ParamGet_proc_control_185_454.initialize(&proc_control_B.b_zeroDelimTopic_j
      [0]);
    ParamGet_proc_control_185_454.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_c[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_454.set_initial_value
      (&proc_control_B.initialValue[0], 32U);
    proc_control_DW.obj_l4.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S316>/Get Parameter1'
    proc_control_MATLABSystem1_Init(&proc_control_DW.MATLABSystem1_fni);

    // Start for MATLABSystem: '<S316>/Get Parameter2'
    proc_control_DW.obj_j2.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_j2.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 31; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_k[proc_control_B.i_d];
    }

    proc_control_B.initialValue[31] = '\x00';
    ParamGet_proc_control_185_455.initialize(&proc_control_B.initialValue[0]);
    ParamGet_proc_control_185_455.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_c[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_455.set_initial_value
      (&proc_control_B.initialValue[0], 32U);
    proc_control_DW.obj_j2.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S316>/Get Parameter2'
    proc_control_MATLABSystem1_Init(&proc_control_DW.MATLABSystem2_fn);

    // Start for MATLABSystem: '<S317>/Get Parameter'
    proc_control_DW.obj_hs.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hs.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 30; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_j[proc_control_B.i_d] =
        tmp_l[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_j[30] = '\x00';
    ParamGet_proc_control_185_477.initialize(&proc_control_B.b_zeroDelimTopic_j
      [0]);
    ParamGet_proc_control_185_477.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_c[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_477.set_initial_value
      (&proc_control_B.initialValue[0], 32U);
    proc_control_DW.obj_hs.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S317>/Get Parameter'
    proc_control_MATLABSystem_Init(&proc_control_DW.MATLABSystem_fnik);

    // Start for MATLABSystem: '<S317>/Get Parameter1'
    proc_control_DW.obj_ps.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ps.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 30; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_j[proc_control_B.i_d] =
        tmp_m[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_j[30] = '\x00';
    ParamGet_proc_control_185_478.initialize(&proc_control_B.b_zeroDelimTopic_j
      [0]);
    ParamGet_proc_control_185_478.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_c[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_478.set_initial_value
      (&proc_control_B.initialValue[0], 32U);
    proc_control_DW.obj_ps.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S317>/Get Parameter1'
    proc_control_MATLABSystem1_Init(&proc_control_DW.MATLABSystem1_fnik);

    // Start for MATLABSystem: '<S317>/Get Parameter2'
    proc_control_DW.obj_ll.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ll.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 31; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_n[proc_control_B.i_d];
    }

    proc_control_B.initialValue[31] = '\x00';
    ParamGet_proc_control_185_479.initialize(&proc_control_B.initialValue[0]);
    ParamGet_proc_control_185_479.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_c[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_479.set_initial_value
      (&proc_control_B.initialValue[0], 32U);
    proc_control_DW.obj_ll.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S317>/Get Parameter2'
    proc_control_MATLABSystem1_Init(&proc_control_DW.MATLABSystem2_fni);

    // Start for MATLABSystem: '<S318>/Get Parameter1'
    proc_control_DW.obj_im.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_im.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_l[proc_control_B.i_d] =
        tmp_o[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_l[32] = '\x00';
    ParamGet_proc_control_185_494.initialize(&proc_control_B.b_zeroDelimName_l[0]);
    ParamGet_proc_control_185_494.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] = tmp_c[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_494.set_initial_value
      (&proc_control_B.initialValue[0], 32U);
    proc_control_DW.obj_im.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S318>/Get Parameter1'
    proc_control_MATLABSystem1_Init(&proc_control_DW.MATLABSystem1_fnik4);

    // Start for MATLABSystem: '<S312>/Get Parameter'
    proc_control_DW.obj_k.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_k.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 19; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_h[proc_control_B.i_d] =
        tmp_p[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_h[19] = '\x00';
    ParamGet_proc_control_185_529.initialize(&proc_control_B.b_zeroDelimTopic_h
      [0]);
    ParamGet_proc_control_185_529.initialize_error_codes(0, 1, 2, 3);
    ParamGet_proc_control_185_529.set_initial_value(10);
    proc_control_DW.obj_k.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S312>/Get Parameter'

    // Start for MATLABSystem: '<S312>/Get Parameter1'
    proc_control_DW.obj_fk.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fk.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 19; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_h[proc_control_B.i_d] =
        tmp_q[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_h[19] = '\x00';
    ParamGet_proc_control_185_530.initialize(&proc_control_B.b_zeroDelimTopic_h
      [0]);
    ParamGet_proc_control_185_530.initialize_error_codes(0, 1, 2, 3);
    ParamGet_proc_control_185_530.set_initial_value(1);
    proc_control_DW.obj_fk.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S312>/Get Parameter1'

    // Start for MATLABSystem: '<S312>/Get Parameter2'
    proc_control_DW.obj_f0.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_f0.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 22; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_oo[proc_control_B.i_d] =
        tmp_r[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_oo[22] = '\x00';
    ParamGet_proc_control_185_533.initialize
      (&proc_control_B.b_zeroDelimTopic_oo[0]);
    ParamGet_proc_control_185_533.initialize_error_codes(0, 1, 2, 3);
    ParamGet_proc_control_185_533.set_initial_value(20.0);
    proc_control_DW.obj_f0.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S312>/Get Parameter2'

    // Start for MATLABSystem: '<S312>/Get Parameter3'
    proc_control_DW.obj_er.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_er.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 22; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_oo[proc_control_B.i_d] =
        tmp_s[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_oo[22] = '\x00';
    ParamGet_proc_control_185_534.initialize
      (&proc_control_B.b_zeroDelimTopic_oo[0]);
    ParamGet_proc_control_185_534.initialize_error_codes(0, 1, 2, 3);
    ParamGet_proc_control_185_534.set_initial_value(-15.0);
    proc_control_DW.obj_er.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S312>/Get Parameter3'

    // Start for MATLABSystem: '<S313>/Get Parameter'
    proc_control_DW.obj_iy.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_iy.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 45; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_j[proc_control_B.i_d] =
        tmp_t[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_j[45] = '\x00';
    ParamGet_proc_control_185_503.initialize(&proc_control_B.b_zeroDelimName_j[0]);
    ParamGet_proc_control_185_503.initialize_error_codes(0, 1, 2, 3);
    ParamGet_proc_control_185_503.set_initial_value(0.2);
    proc_control_DW.obj_iy.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S313>/Get Parameter'

    // Start for MATLABSystem: '<S313>/Get Parameter1'
    proc_control_DW.obj_mh.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_mh.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 46; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName[proc_control_B.i_d] =
        tmp_u[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName[46] = '\x00';
    ParamGet_proc_control_185_504.initialize(&proc_control_B.b_zeroDelimName[0]);
    ParamGet_proc_control_185_504.initialize_error_codes(0, 1, 2, 3);
    ParamGet_proc_control_185_504.set_initial_value(0.1);
    proc_control_DW.obj_mh.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S313>/Get Parameter1'

    // Start for MATLABSystem: '<S313>/Get Parameter2'
    proc_control_DW.obj_gy.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_gy.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 46; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName[proc_control_B.i_d] =
        tmp_v[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName[46] = '\x00';
    ParamGet_proc_control_185_505.initialize(&proc_control_B.b_zeroDelimName[0]);
    ParamGet_proc_control_185_505.initialize_error_codes(0, 1, 2, 3);
    ParamGet_proc_control_185_505.set_initial_value(3.0);
    proc_control_DW.obj_gy.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S313>/Get Parameter2'

    // Start for MATLABSystem: '<S311>/Get Parameter'
    proc_control_DW.obj_nw.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_nw.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 25; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_fn[proc_control_B.i_d] =
        tmp_w[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_fn[25] = '\x00';
    ParamGet_proc_control_185_535.initialize
      (&proc_control_B.b_zeroDelimTopic_fn[0]);
    ParamGet_proc_control_185_535.initialize_error_codes(0, 1, 2, 3);
    ParamGet_proc_control_185_535.set_initial_value(998.0);
    proc_control_DW.obj_nw.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter'

    // Start for MATLABSystem: '<S311>/Get Parameter1'
    proc_control_DW.obj_h.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_h.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 23; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_b[proc_control_B.i_d] =
        tmp_x[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_b[23] = '\x00';
    ParamGet_proc_control_185_540.initialize(&proc_control_B.b_zeroDelimName_b[0]);
    ParamGet_proc_control_185_540.initialize_error_codes(0, 1, 2, 3);
    ParamGet_proc_control_185_540.set_initial_value(9.81);
    proc_control_DW.obj_h.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter1'

    // Start for MATLABSystem: '<S311>/Get Parameter2'
    proc_control_DW.obj_lr.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_lr.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 26; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_n[proc_control_B.i_d] =
        tmp_y[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_n[26] = '\x00';
    ParamGet_proc_control_185_541.initialize(&proc_control_B.b_zeroDelimTopic_n
      [0]);
    ParamGet_proc_control_185_541.initialize_error_codes(0, 1, 2, 3);
    ParamGet_proc_control_185_541.set_initial_value(31.0);
    proc_control_DW.obj_lr.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter2'

    // Start for MATLABSystem: '<S311>/Get Parameter3'
    proc_control_DW.obj_d.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_d.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 28; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_h[proc_control_B.i_d] =
        tmp_z[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_h[28] = '\x00';
    ParamGet_proc_control_185_542.initialize(&proc_control_B.b_zeroDelimName_h[0]);
    ParamGet_proc_control_185_542.initialize_error_codes(0, 1, 2, 3);
    ParamGet_proc_control_185_542.set_initial_value(0.0315);
    proc_control_DW.obj_d.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter3'

    // Start for MATLABSystem: '<S311>/Get Parameter4'
    proc_control_DW.obj_n.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_n.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_l[proc_control_B.i_d] =
        tmp_10[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_l[32] = '\x00';
    ParamGet_proc_control_185_543.initialize(&proc_control_B.b_zeroDelimName_l[0]);
    ParamGet_proc_control_185_543.initialize_error_codes(0, 1, 2, 3);
    ParamGet_proc_control_185_543.set_initial_value(0.3);
    proc_control_DW.obj_n.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter4'

    // Start for MATLABSystem: '<S311>/Get Parameter5'
    proc_control_DW.obj_lz.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_lz.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 24; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_k[proc_control_B.i_d] =
        tmp_11[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_k[24] = '\x00';
    ParamGet_proc_control_185_544.initialize(&proc_control_B.b_zeroDelimName_k[0]);
    ParamGet_proc_control_185_544.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 5; proc_control_B.i_d++) {
      proc_control_B.initialValue_e[proc_control_B.i_d] =
        tmp_12[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_544.set_initial_value
      (&proc_control_B.initialValue_e[0], 5U);
    proc_control_DW.obj_lz.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter5'
    proc_contr_MATLABSystem1_l_Init(&proc_control_DW.MATLABSystem1_fnik4d);

    // Start for MATLABSystem: '<S311>/Get Parameter6'
    proc_control_DW.obj_jm.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_jm.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 24; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_k[proc_control_B.i_d] =
        tmp_13[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_k[24] = '\x00';
    ParamGet_proc_control_185_546.initialize(&proc_control_B.b_zeroDelimName_k[0]);
    ParamGet_proc_control_185_546.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 5; proc_control_B.i_d++) {
      proc_control_B.initialValue_e[proc_control_B.i_d] =
        tmp_12[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_546.set_initial_value
      (&proc_control_B.initialValue_e[0], 5U);
    proc_control_DW.obj_jm.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter6'
    proc_contr_MATLABSystem1_l_Init(&proc_control_DW.MATLABSystem2_fnik);

    // Start for MATLABSystem: '<S311>/Get Parameter7'
    proc_control_DW.obj_e.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_e.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 25; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_fn[proc_control_B.i_d] =
        tmp_14[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_fn[25] = '\x00';
    ParamGet_proc_control_185_548.initialize
      (&proc_control_B.b_zeroDelimTopic_fn[0]);
    ParamGet_proc_control_185_548.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 11; proc_control_B.i_d++)
    {
      proc_control_B.initialValue_f[proc_control_B.i_d] =
        tmp_15[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_548.set_initial_value
      (&proc_control_B.initialValue_f[0], 11U);
    proc_control_DW.obj_e.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter7'

    // InitializeConditions for MATLABSystem: '<S311>/MATLAB System3'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    std::memset(&proc_control_DW.obj_c.lastMsg[0], 0, 400U * sizeof(real_T));
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 6; proc_control_B.i_d++) {
      proc_control_DW.obj_c.lastValues[proc_control_B.i_d] = 0.0;
    }

    // End of InitializeConditions for MATLABSystem: '<S311>/MATLAB System3'

    // Start for MATLABSystem: '<S311>/Get Parameter8'
    proc_control_DW.obj_fr.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fr.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 25; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_fn[proc_control_B.i_d] =
        tmp_16[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_fn[25] = '\x00';
    ParamGet_proc_control_185_549.initialize
      (&proc_control_B.b_zeroDelimTopic_fn[0]);
    ParamGet_proc_control_185_549.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 11; proc_control_B.i_d++)
    {
      proc_control_B.initialValue_f[proc_control_B.i_d] =
        tmp_15[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_549.set_initial_value
      (&proc_control_B.initialValue_f[0], 11U);
    proc_control_DW.obj_fr.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter8'
    proc_control_MATLABSystem4_Init(&proc_control_DW.MATLABSystem4);

    // Start for MATLABSystem: '<S311>/Get Parameter9'
    proc_control_DW.obj_i.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_i.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_l[proc_control_B.i_d] =
        tmp_17[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_l[32] = '\x00';
    ParamGet_proc_control_185_552.initialize(&proc_control_B.b_zeroDelimName_l[0]);
    ParamGet_proc_control_185_552.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 11; proc_control_B.i_d++)
    {
      proc_control_B.initialValue_f[proc_control_B.i_d] =
        tmp_15[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_552.set_initial_value
      (&proc_control_B.initialValue_f[0], 11U);
    proc_control_DW.obj_i.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter9'
    proc_control_MATLABSystem4_Init(&proc_control_DW.MATLABSystem5);

    // Start for MATLABSystem: '<S311>/Get Parameter10'
    proc_control_DW.obj_p.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_p.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 23; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_b[proc_control_B.i_d] =
        tmp_18[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_b[23] = '\x00';
    ParamGet_proc_control_185_554.initialize(&proc_control_B.b_zeroDelimName_b[0]);
    ParamGet_proc_control_185_554.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 17; proc_control_B.i_d++)
    {
      proc_control_B.initialValue_p[proc_control_B.i_d] =
        tmp_19[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_554.set_initial_value
      (&proc_control_B.initialValue_p[0], 17U);
    proc_control_DW.obj_p.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter10'

    // InitializeConditions for MATLABSystem: '<S311>/MATLAB System6'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    std::memset(&proc_control_DW.obj_f5.lastMsg[0], 0, 400U * sizeof(real_T));
    std::memset(&proc_control_DW.obj_f5.lastValues[0], 0, 9U * sizeof(real_T));

    // Start for MATLABSystem: '<S311>/Get Parameter11'
    proc_control_DW.obj_nu.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_nu.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_l[proc_control_B.i_d] =
        tmp_1a[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_l[32] = '\x00';
    ParamGet_proc_control_185_556.initialize(&proc_control_B.b_zeroDelimName_l[0]);
    ParamGet_proc_control_185_556.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 5; proc_control_B.i_d++) {
      proc_control_B.initialValue_e[proc_control_B.i_d] =
        tmp_12[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_556.set_initial_value
      (&proc_control_B.initialValue_e[0], 5U);
    proc_control_DW.obj_nu.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter11'
    proc_contr_MATLABSystem1_l_Init(&proc_control_DW.MATLABSystem7);

    // Start for MATLABSystem: '<S311>/Get Parameter12'
    proc_control_DW.obj_g.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_g.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_l[proc_control_B.i_d] =
        tmp_1b[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_l[32] = '\x00';
    ParamGet_proc_control_185_558.initialize(&proc_control_B.b_zeroDelimName_l[0]);
    ParamGet_proc_control_185_558.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 5; proc_control_B.i_d++) {
      proc_control_B.initialValue_e[proc_control_B.i_d] =
        tmp_12[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_558.set_initial_value
      (&proc_control_B.initialValue_e[0], 5U);
    proc_control_DW.obj_g.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter12'
    proc_contr_MATLABSystem1_l_Init(&proc_control_DW.MATLABSystem8);

    // Start for MATLABSystem: '<S311>/Get Parameter13'
    proc_control_DW.obj_lm.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_lm.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_l[proc_control_B.i_d] =
        tmp_1c[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_l[32] = '\x00';
    ParamGet_proc_control_185_560.initialize(&proc_control_B.b_zeroDelimName_l[0]);
    ParamGet_proc_control_185_560.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 5; proc_control_B.i_d++) {
      proc_control_B.initialValue_e[proc_control_B.i_d] =
        tmp_12[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_560.set_initial_value
      (&proc_control_B.initialValue_e[0], 5U);
    proc_control_DW.obj_lm.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter13'
    proc_contr_MATLABSystem1_l_Init(&proc_control_DW.MATLABSystem9);

    // Start for MATLABSystem: '<S311>/Get Parameter14'
    proc_control_DW.obj_n1.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_n1.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 34; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_o[proc_control_B.i_d] =
        tmp_1d[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_o[34] = '\x00';
    ParamGet_proc_control_185_562.initialize(&proc_control_B.b_zeroDelimName_o[0]);
    ParamGet_proc_control_185_562.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 5; proc_control_B.i_d++) {
      proc_control_B.initialValue_e[proc_control_B.i_d] =
        tmp_12[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_562.set_initial_value
      (&proc_control_B.initialValue_e[0], 5U);
    proc_control_DW.obj_n1.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter14'
    proc_contr_MATLABSystem1_l_Init(&proc_control_DW.MATLABSystem10);

    // Start for MATLABSystem: '<S311>/Get Parameter15'
    proc_control_DW.obj_a0.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_a0.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 31; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] =
        tmp_1e[proc_control_B.i_d];
    }

    proc_control_B.initialValue[31] = '\x00';
    ParamGet_proc_control_185_568.initialize(&proc_control_B.initialValue[0]);
    ParamGet_proc_control_185_568.initialize_error_codes(0, 1, 2, 3);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 5; proc_control_B.i_d++) {
      proc_control_B.initialValue_e[proc_control_B.i_d] =
        tmp_12[proc_control_B.i_d];
    }

    ParamGet_proc_control_185_568.set_initial_value
      (&proc_control_B.initialValue_e[0], 5U);
    proc_control_DW.obj_a0.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S311>/Get Parameter15'

    // InitializeConditions for MATLABSystem: '<S311>/MATLAB System11'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    std::memset(&proc_control_DW.obj_l.lastMsg[0], 0, 400U * sizeof(real_T));
    std::memset(&proc_control_DW.obj_l.lastValues[0], 0, 48U * sizeof(real_T));

    // SystemInitialize for BusCreator: '<S310>/Bus Creator' incorporates:
    //   Outport: '<S308>/MPC'

    proc_control_B.mpcParams_l = proc_control_P.MPC_Y0;

    // SystemInitialize for BusCreator: '<S311>/Bus Creator' incorporates:
    //   Outport: '<S308>/physics Constants'

    proc_control_B.BusCreator = proc_control_P.physicsConstants_Y0;

    // End of SystemInitialize for SubSystem: '<S10>/Get_ROS_param '

    // SystemInitialize for Enabled SubSystem: '<S8>/DVL Mesurments'
    // InitializeConditions for Delay: '<S250>/Delay'
    proc_control_DW.Delay_DSTATE_i = proc_control_P.Delay_InitialCondition_l;

    // SystemInitialize for Enabled SubSystem: '<S250>/Subsystem2'
    // SystemInitialize for Fcn: '<S254>/q0' incorporates:
    //   Outport: '<S253>/Quat'

    proc_control_B.q0 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S254>/q1' incorporates:
    //   Outport: '<S253>/Quat'

    proc_control_B.q1 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S254>/q2' incorporates:
    //   Outport: '<S253>/Quat'

    proc_control_B.q2 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S254>/q3' incorporates:
    //   Outport: '<S253>/Quat'

    proc_control_B.q3 = proc_control_P.Quat_Y0;

    // End of SystemInitialize for SubSystem: '<S250>/Subsystem2'
    // End of SystemInitialize for SubSystem: '<S8>/DVL Mesurments'

    // SystemInitialize for Enabled SubSystem: '<S8>/Detph Mesurments'
    // SystemInitialize for Sum: '<S226>/Sum' incorporates:
    //   Outport: '<S226>/Depth Measurments'

    proc_control_B.zposition = proc_control_P.DepthMeasurments_Y0;

    // End of SystemInitialize for SubSystem: '<S8>/Detph Mesurments'

    // SystemInitialize for Enabled SubSystem: '<S3>/Subsystem'
    // InitializeConditions for Memory: '<S83>/Memory'
    proc_control_DW.Memory_PreviousInput_i =
      proc_control_P.MinMaxRunningResettable_vinit;

    // InitializeConditions for Memory: '<S84>/Memory'
    proc_control_DW.Memory_PreviousInput_f =
      proc_control_P.MinMaxRunningResettable1_vinit;

    // SystemInitialize for Outport: '<S67>/y'
    proc_control_B.y = proc_control_P.y_Y0;

    // End of SystemInitialize for SubSystem: '<S3>/Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S8>/Subsystem'
    // Start for DataStoreMemory: '<S272>/DataStoreMemory - P'
    std::memcpy(&proc_control_DW.P[0],
                &proc_control_P.DataStoreMemoryP_InitialValue[0], 169U * sizeof
                (real_T));

    // SystemInitialize for Enabled SubSystem: '<S272>/Correct1'
    // SystemInitialize for Outport: '<S273>/yBlockOrdering'
    proc_control_B.blockOrdering_o = proc_control_P.yBlockOrdering_Y0;

    // End of SystemInitialize for SubSystem: '<S272>/Correct1'
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 13; proc_control_B.i_d++)
    {
      // Start for DataStoreMemory: '<S272>/DataStoreMemory - x'
      proc_control_DW.x[proc_control_B.i_d] =
        proc_control_P.DataStoreMemoryx_InitialValue[proc_control_B.i_d];

      // SystemInitialize for DataStoreRead: '<S276>/Data Store Read' incorporates:
      //   DataStoreMemory: '<S272>/DataStoreMemory - x'
      //   Outport: '<S229>/xhat'

      proc_control_B.DataStoreRead[proc_control_B.i_d] = proc_control_P.xhat_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S8>/Subsystem'

    // SystemInitialize for Enabled SubSystem: '<Root>/Sensor Manager'
    // SystemInitialize for Atomic SubSystem: '<S112>/Header Assignment'
    proc_control_CurrentTime_Init(&proc_control_DW.CurrentTime_e);

    // End of SystemInitialize for SubSystem: '<S112>/Header Assignment'

    // SystemInitialize for Atomic SubSystem: '<S112>/Publish'
    // Start for MATLABSystem: '<S118>/SinkBlock'
    proc_control_DW.obj_ag.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ag.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 21; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_cs[proc_control_B.i_d] =
        tmp_1f[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_cs[21] = '\x00';
    Pub_proc_control_163.createPublisher(&proc_control_B.b_zeroDelimTopic_cs[0],
      1);
    proc_control_DW.obj_ag.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S118>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S112>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S111>/Publish'
    // Start for MATLABSystem: '<S114>/SinkBlock'
    proc_control_DW.obj_eb.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_eb.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 22; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_oo[proc_control_B.i_d] =
        tmp_1g[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_oo[22] = '\x00';
    Pub_proc_control_116.createPublisher(&proc_control_B.b_zeroDelimTopic_oo[0],
      1);
    proc_control_DW.obj_eb.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S114>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S111>/Publish'

    // SystemInitialize for SignalConversion generated from: '<S6>/Output' incorporates:
    //   Outport: '<S6>/Output'

    proc_control_B.WorldPosition[0] = proc_control_P.Output_Y0.WorldPosition[0];
    proc_control_B.WorldPosition[1] = proc_control_P.Output_Y0.WorldPosition[1];
    proc_control_B.WorldPosition[2] = proc_control_P.Output_Y0.WorldPosition[2];

    // SystemInitialize for SignalConversion generated from: '<S6>/Output' incorporates:
    //   Outport: '<S6>/Output'

    proc_control_B.qS2W[0] = proc_control_P.Output_Y0.qS2W[0];
    proc_control_B.qS2W[1] = proc_control_P.Output_Y0.qS2W[1];
    proc_control_B.qS2W[2] = proc_control_P.Output_Y0.qS2W[2];
    proc_control_B.qS2W[3] = proc_control_P.Output_Y0.qS2W[3];

    // End of SystemInitialize for SubSystem: '<Root>/Sensor Manager'

    // SystemInitialize for Atomic SubSystem: '<S287>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S295>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S296>/In1' incorporates:
    //   Outport: '<S296>/Out1'

    proc_control_B.In1 = proc_control_P.Out1_Y0;

    // End of SystemInitialize for SubSystem: '<S295>/Enabled Subsystem'

    // Start for MATLABSystem: '<S295>/SourceBlock'
    proc_control_DW.obj_df.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_df.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 34; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_o[proc_control_B.i_d] =
        tmp_1h[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_o[34] = '\x00';
    Sub_proc_control_184_1581.createSubscriber
      (&proc_control_B.b_zeroDelimName_o[0], 1);
    proc_control_DW.obj_df.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S295>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S287>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S286>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S293>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S294>/In1' incorporates:
    //   Outport: '<S294>/Out1'

    proc_control_B.In1_od = proc_control_P.Out1_Y0_pb;

    // End of SystemInitialize for SubSystem: '<S293>/Enabled Subsystem'

    // Start for MATLABSystem: '<S293>/SourceBlock'
    proc_control_DW.obj_cs.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_cs.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 15; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_f0[proc_control_B.i_d] =
        tmp_1i[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_f0[15] = '\x00';
    Sub_proc_control_184_1122.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_f0[0], 2);
    proc_control_DW.obj_cs.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S293>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S286>/Subscribe2'

    // SystemInitialize for IfAction SubSystem: '<S9>/SubsystemAuto'
    // InitializeConditions for UnitDelay: '<S300>/Delay Input1'
    //
    //  Block description for '<S300>/Delay Input1':
    //
    //   Store in Global RAM

    proc_control_DW.DelayInput1_DSTATE = proc_control_P.DetectRisePositive_vinit;

    // Start for MATLABSystem: '<S289>/MATLAB System'
    proc_control_DW.obj_o.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S289>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    proc_control_DW.obj_o.dummy = 999.0;

    //  Chiffre NULL
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 13; proc_control_B.i_d++)
    {
      proc_control_DW.obj_o.emptyArray[proc_control_B.i_d] =
        proc_control_DW.obj_o.dummy;
    }

    //  Vecteur pose NULL
    proc_control_DW.obj_o.targetReachedCount = 0.0;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 7; proc_control_B.i_d++) {
      proc_control_DW.obj_o.initialPose[proc_control_B.i_d] = 0.0;
    }

    //  Buffer trajectoire
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 78000; proc_control_B.i_d
         ++) {
      proc_control_DW.obj_o.poseBuffer[proc_control_B.i_d] =
        proc_control_DW.obj_o.dummy;
    }

    proc_control_DW.obj_o.bufferCount = 0.0;
    proc_control_DW.obj_o.done = false;
    proc_control_DW.obj_o.init = false;

    // End of InitializeConditions for MATLABSystem: '<S289>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S9>/SubsystemAuto'

    // SystemInitialize for IfAction SubSystem: '<S9>/singleWpts Trajectory'
    // InitializeConditions for Delay: '<S290>/Delay1'
    proc_control_DW.Delay1_DSTATE_c = proc_control_P.Delay1_InitialCondition_k;

    // SystemInitialize for Atomic SubSystem: '<S290>/Subscribe'
    // Start for MATLABSystem: '<S303>/SourceBlock'
    proc_control_DW.obj_hd.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hd.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 21; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_cs[proc_control_B.i_d] =
        tmp_1j[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_cs[21] = '\x00';
    Sub_proc_control_184_1168.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_cs[0], 1);
    proc_control_DW.obj_hd.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S303>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S290>/Subscribe'

    // SystemInitialize for Enabled SubSystem: '<S290>/Subsystem1'
    // SystemInitialize for DataTypeConversion: '<S304>/Data Type Conversion1' incorporates:
    //   Outport: '<S304>/Out1'

    proc_control_B.DataTypeConversion1[0] = proc_control_P.Out1_Y0_i;
    proc_control_B.DataTypeConversion1[1] = proc_control_P.Out1_Y0_i;

    // SystemInitialize for DataTypeConversion: '<S304>/Data Type Conversion2' incorporates:
    //   Outport: '<S304>/Out1'

    proc_control_B.DataTypeConversion2 = proc_control_P.Out1_Y0_i;

    // SystemInitialize for Enabled SubSystem: '<S290>/Pre-traitement'
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 6; proc_control_B.i_d++) {
      // SystemInitialize for DataTypeConversion: '<S304>/Data Type Conversion' incorporates:
      //   Outport: '<S304>/Out1'

      proc_control_B.DataTypeConversion[proc_control_B.i_d] =
        proc_control_P.Out1_Y0_i;

      // SystemInitialize for Selector: '<S302>/Selector' incorporates:
      //   DataTypeConversion: '<S304>/Data Type Conversion'
      //   Outport: '<S302>/linWpts'
      //   Outport: '<S304>/Out1'

      proc_control_B.Selector[proc_control_B.i_d] = proc_control_P.linWpts_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S290>/Subsystem1'
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 8; proc_control_B.i_d++) {
      // SystemInitialize for Selector: '<S302>/Selector1' incorporates:
      //   Outport: '<S302>/RotWpts'

      proc_control_B.Selector1[proc_control_B.i_d] = proc_control_P.RotWpts_Y0;
    }

    // SystemInitialize for Concatenate: '<S302>/Matrix Concatenate' incorporates:
    //   Outport: '<S302>/time'

    proc_control_B.MatrixConcatenate[0] = proc_control_P.time_Y0;
    proc_control_B.MatrixConcatenate[1] = proc_control_P.time_Y0;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 7; proc_control_B.i_d++) {
      // SystemInitialize for Selector: '<S302>/Selector4' incorporates:
      //   Outport: '<S302>/target'

      proc_control_B.Selector4[proc_control_B.i_d] = proc_control_P.target_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S290>/Pre-traitement'

    // SystemInitialize for Resettable SubSystem: '<S290>/Trajectory generator'
    // InitializeConditions for DiscreteIntegrator: '<S305>/Discrete-Time Integrator' 
    proc_control_DW.DiscreteTimeIntegrator_DSTATE =
      proc_control_P.DiscreteTimeIntegrator_IC;

    // Start for MATLABSystem: '<S305>/Rotation Trajectory'
    std::memcpy(&proc_control_DW.obj_j.TimeScaling[0], &tmp_1k[0], 33U * sizeof
                (real_T));
    proc_control_DW.obj_j.isInitialized = 1;
    proc_control_DW.obj_j.TunablePropsChanged = false;

    // Start for MATLABSystem: '<S307>/Polynomial Trajectory1'
    std::memset(&proc_control_DW.obj_jo.AccelerationBoundaryCondition[0], 0, 10U
                * sizeof(real_T));
    proc_control_DW.obj_jo.isInitialized = 0;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 6; proc_control_B.i_d++) {
      proc_control_DW.obj_jo.VelocityBoundaryCondition[proc_control_B.i_d] =
        proc_control_P.PolynomialTrajectory1_VelocityB[proc_control_B.i_d];
    }

    proc_control_DW.obj_jo.isInitialized = 1;
    proc_control_DW.obj_jo.TunablePropsChanged = false;

    // End of Start for MATLABSystem: '<S307>/Polynomial Trajectory1'
    // End of SystemInitialize for SubSystem: '<S290>/Trajectory generator'

    // InitializeConditions for MATLABSystem: '<S290>/MATLAB System1'
    // ========================================================================== 
    //  Fonctions Principales
    // ========================================================================== 
    //  Fonction appeler a l'initialisation
    //  Perform one-time calculations, such as computing constants
    //  Fonction Reset
    //  Initialize / reset discrete-state properties
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 18; proc_control_B.i_d++)
    {
      proc_control_DW.obj_a.poseList[proc_control_B.i_d] = 999.0;
    }

    proc_control_DW.obj_a.poseList[0] = 0.0;
    proc_control_DW.obj_a.poseList[2] = 0.0;
    proc_control_DW.obj_a.poseList[4] = 0.0;
    proc_control_DW.obj_a.poseList[6] = 1.0;
    proc_control_DW.obj_a.poseList[8] = 0.0;
    proc_control_DW.obj_a.poseList[10] = 0.0;
    proc_control_DW.obj_a.poseList[12] = 0.0;
    proc_control_DW.obj_a.poseList[14] = 0.0;
    proc_control_DW.obj_a.poseList[16] = 0.0;

    // initCond(1,1:7);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 7; proc_control_B.i_d++) {
      proc_control_DW.obj_a.initcond[proc_control_B.i_d] =
        tmp_1l[proc_control_B.i_d];
    }

    proc_control_DW.obj_a.i = 2.0;

    // End of InitializeConditions for MATLABSystem: '<S290>/MATLAB System1'

    // Start for MATLABSystem: '<S290>/MATLAB System'
    proc_control_DW.obj.linearConvergence =
      proc_control_P.MATLABSystem_linearConvergence;
    proc_control_DW.obj.quaternionConvergence =
      proc_control_P.MATLABSystem_quaternionConverge;
    proc_control_DW.obj.TargetThreshold =
      proc_control_P.MATLABSystem_TargetThreshold;
    proc_control_DW.obj.isInitialized = 1;

    //  Perform one-time calculations, such as computing constants
    proc_control_DW.obj.generationNumber = 0.0;
    proc_control_DW.obj.dummy = 999.0;

    //  Chiffre NULL
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 13; proc_control_B.i_d++)
    {
      proc_control_DW.obj.emptyArray[proc_control_B.i_d] =
        proc_control_DW.obj.dummy;
    }

    //  Vecteur pose NULL
    proc_control_DW.obj.targetReachedCount = 0.0;

    //  Buffer trajectoire
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 78013; proc_control_B.i_d
         ++) {
      proc_control_DW.obj.poseBuffer[proc_control_B.i_d] =
        proc_control_DW.obj.dummy;
    }

    proc_control_DW.obj.bufferCount = 0.0;
    proc_control_DW.obj.done = false;
    proc_control_DW.obj.init = 0.0;

    // End of Start for MATLABSystem: '<S290>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S9>/singleWpts Trajectory'
    //  Fonction reset
    //  Initialize / reset discrete-state properties
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 130; proc_control_B.i_d++)
    {
      // SystemInitialize for Merge generated from: '<S9>/Merge'
      proc_control_B.Reference[proc_control_B.i_d] =
        proc_control_P.Merge_1_InitialOutput_l;
    }

    // SystemInitialize for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Start for If: '<S7>/If'
    proc_control_DW.If_ActiveSubsystem_i = -1;

    // Start for SwitchCase: '<S120>/Switch Case'
    proc_control_DW.SwitchCase_ActiveSubsystem_l = -1;

    // InitializeConditions for Delay: '<S7>/Delay'
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 8; proc_control_B.i_d++) {
      proc_control_DW.Delay_DSTATE_g[proc_control_B.i_d] =
        proc_control_P.Delay_InitialCondition_jd[proc_control_B.i_d];
    }

    // End of InitializeConditions for Delay: '<S7>/Delay'

    // InitializeConditions for Delay: '<S122>/Delay'
    proc_control_DW.Delay_DSTATE_k = proc_control_P.Delay_InitialCondition_i;

    // SystemInitialize for IfAction SubSystem: '<S7>/MPC manager'
    // SystemInitialize for Atomic SubSystem: '<S121>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S220>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S222>/In1' incorporates:
    //   Outport: '<S222>/Out1'

    proc_control_B.In1_o = proc_control_P.Out1_Y0_c;

    // End of SystemInitialize for SubSystem: '<S220>/Enabled Subsystem'

    // Start for MATLABSystem: '<S220>/SourceBlock'
    proc_control_DW.obj_hhu.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hhu.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 27; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_c[proc_control_B.i_d] =
        tmp_1m[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_c[27] = '\x00';
    Sub_proc_control_182_1643.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_c[0], 1);
    proc_control_DW.obj_hhu.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S220>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S121>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S121>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S219>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S221>/In1' incorporates:
    //   Outport: '<S221>/Out1'

    proc_control_B.In1_f = proc_control_P.Out1_Y0_m;

    // End of SystemInitialize for SubSystem: '<S219>/Enabled Subsystem'

    // Start for MATLABSystem: '<S219>/SourceBlock'
    proc_control_DW.obj_k4.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_k4.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 27; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_c[proc_control_B.i_d] =
        tmp_1n[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_c[27] = '\x00';
    Sub_proc_control_182_1620.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_c[0], 1);
    proc_control_DW.obj_k4.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S219>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S121>/Subscribe'

    // Start for MATLABSystem: '<S121>/MPC manager'
    proc_control_DW.obj_f.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S121>/MPC manager'
    //         %% Fonction execute a chaque iteration
    //  Perform one-time calculations, such as computing constants
    proc_contr_mpcManager_resetImpl(&proc_control_DW.obj_f);

    // SystemInitialize for MATLABSystem: '<S121>/MPC manager' incorporates:
    //   Outport: '<S121>/MPC param'

    std::memcpy(&proc_control_B.mvmin[0], &proc_control_P.MPCparam_Y0.mvmin[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S121>/MPC manager' incorporates:
    //   Outport: '<S121>/MPC param'

    std::memcpy(&proc_control_B.mvmax[0], &proc_control_P.MPCparam_Y0.mvmax[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S121>/MPC manager' incorporates:
    //   Outport: '<S121>/MPC param'

    std::memcpy(&proc_control_B.ywt[0], &proc_control_P.MPCparam_Y0.ywt[0], 13U *
                sizeof(real_T));

    // SystemInitialize for MATLABSystem: '<S121>/MPC manager' incorporates:
    //   Outport: '<S121>/MPC param'

    std::memcpy(&proc_control_B.mvwt[0], &proc_control_P.MPCparam_Y0.mvwt[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S121>/MPC manager' incorporates:
    //   Outport: '<S121>/MPC param'

    std::memcpy(&proc_control_B.dmwwt[0], &proc_control_P.MPCparam_Y0.dmwwt[0],
                sizeof(real_T) << 3U);
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 8; proc_control_B.i_d++) {
      // SystemInitialize for MATLABSystem: '<S121>/MPC manager' incorporates:
      //   Outport: '<S121>/MPC param'

      proc_control_B.thrustersStatus[proc_control_B.i_d] =
        proc_control_P.MPCparam_Y0.thrustersStatus[proc_control_B.i_d];
    }

    // SystemInitialize for MATLABSystem: '<S121>/MPC manager' incorporates:
    //   Outport: '<S121>/MPC param'

    proc_control_B.p = proc_control_P.MPCparam_Y0.p;

    // SystemInitialize for MATLABSystem: '<S121>/MPC manager' incorporates:
    //   Outport: '<S121>/MPC param'

    proc_control_B.m = proc_control_P.MPCparam_Y0.m;

    // End of SystemInitialize for SubSystem: '<S7>/MPC manager'

    // SystemInitialize for IfAction SubSystem: '<S120>/Adaptive MPC quaternion ' 
    // InitializeConditions for Memory: '<S130>/Memory'
    std::memcpy(&proc_control_DW.Memory_PreviousInput_g[0],
                &proc_control_P.Memory_InitialCondition[0], 226U * sizeof
                (boolean_T));

    // InitializeConditions for UnitDelay: '<S130>/last_mv'
    std::memcpy(&proc_control_DW.last_mv_DSTATE_f[0],
                &proc_control_P.last_mv_InitialCondition[0], sizeof(real_T) <<
                3U);

    // InitializeConditions for Delay: '<S123>/Delay1' incorporates:
    //   UnitDelay: '<S130>/last_mv'

    std::memcpy(&proc_control_DW.Delay1_DSTATE_e[0],
                &proc_control_P.Delay1_InitialCondition[0], sizeof(real_T) << 3U);

    // Start for MATLABSystem: '<S123>/MATLAB System'
    proc_control_DW.obj_b.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S123>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  reset  fonction
    // ------------------------------------------------------------------------------ 
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_b.qkm[0] = 1.0;
    proc_control_DW.obj_b.qkt[0] = 1.0;
    proc_control_DW.obj_b.qkm[1] = 0.0;
    proc_control_DW.obj_b.qkt[1] = 0.0;
    proc_control_DW.obj_b.qkm[2] = 0.0;
    proc_control_DW.obj_b.qkt[2] = 0.0;
    proc_control_DW.obj_b.qkm[3] = 0.0;
    proc_control_DW.obj_b.qkt[3] = 0.0;
    std::memcpy(&proc_control_DW.obj_b.xl[0], &tmp_1o[0], 13U * sizeof(real_T));
    std::memset(&proc_control_DW.obj_b.constValues[0], 0, 38U * sizeof(real_T));
    proc_control_DW.obj_b.init = false;

    //  initialize matrix size
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 169; proc_control_B.i_d++)
    {
      proc_control_DW.obj_b.C[proc_control_B.i_d] = tmp_1p[proc_control_B.i_d];
    }

    std::memset(&proc_control_DW.obj_b.D[0], 0, 104U * sizeof(real_T));
    std::memset(&proc_control_DW.obj_b.Bc[0], 0, 104U * sizeof(real_T));

    // End of InitializeConditions for MATLABSystem: '<S123>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S120>/Adaptive MPC quaternion '

    // SystemInitialize for IfAction SubSystem: '<S120>/JoyStick OpenLoop'
    // InitializeConditions for UnitDelay: '<S160>/UD'
    //
    //  Block description for '<S160>/UD':
    //
    //   Store in Global RAM

    for (proc_control_B.i_d = 0; proc_control_B.i_d < 6; proc_control_B.i_d++) {
      proc_control_DW.UD_DSTATE[proc_control_B.i_d] =
        proc_control_P.DiscreteDerivative_ICPrevScaled;
    }

    // End of InitializeConditions for UnitDelay: '<S160>/UD'

    // Start for MATLABSystem: '<S125>/MATLAB System'
    proc_control_DW.obj_m.k = proc_control_P.MATLABSystem_k;
    std::memcpy(&proc_control_DW.obj_m.binv[0], &proc_control_P.binv[0], 48U *
                sizeof(real_T));
    proc_control_DW.obj_m.mass = proc_control_P.physics.mass;
    proc_control_DW.obj_m.volume = proc_control_P.physics.volume;
    proc_control_DW.obj_m.height = proc_control_P.physics.height;
    std::memcpy(&proc_control_DW.obj_m.I[0], &proc_control_P.physics.I[0], 9U *
                sizeof(real_T));
    proc_control_DW.obj_m.RG[0] = proc_control_P.physics.RG[0];
    proc_control_DW.obj_m.RB[0] = proc_control_P.physics.RB[0];
    proc_control_DW.obj_m.RG[1] = proc_control_P.physics.RG[1];
    proc_control_DW.obj_m.RB[1] = proc_control_P.physics.RB[1];
    proc_control_DW.obj_m.RG[2] = proc_control_P.physics.RG[2];
    proc_control_DW.obj_m.RB[2] = proc_control_P.physics.RB[2];
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 6; proc_control_B.i_d++) {
      proc_control_DW.obj_m.AddedMass[proc_control_B.i_d] =
        proc_control_P.physics.AddedMass[proc_control_B.i_d];
      proc_control_DW.obj_m.CDL[proc_control_B.i_d] =
        proc_control_P.physics.CDL[proc_control_B.i_d];
      proc_control_DW.obj_m.CDQ[proc_control_B.i_d] =
        proc_control_P.physics.CDQ[proc_control_B.i_d];
    }

    proc_control_DW.obj_m.AF[0] = proc_control_P.physics.AF[0];
    proc_control_DW.obj_m.AF[1] = proc_control_P.physics.AF[1];
    proc_control_DW.obj_m.AF[2] = proc_control_P.physics.AF[2];
    proc_control_DW.obj_m.g = proc_control_P.physics.g;
    proc_control_DW.obj_m.rho = proc_control_P.physics.rho;
    proc_control_DW.obj_m.isInitialized = 1;

    // End of Start for MATLABSystem: '<S125>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S120>/JoyStick OpenLoop'

    // SystemInitialize for IfAction SubSystem: '<S120>/LTV MPC quaternion '
    // InitializeConditions for UnitDelay: '<S164>/last_mv'
    //  Perform one-time calculations, such as computing constants
    // [M,C,D,Gq] = AUVModelMatrices(in1,in2)
    //  Initialize / reset discrete-state properties
    std::memcpy(&proc_control_DW.last_mv_DSTATE[0],
                &proc_control_P.last_mv_InitialCondition_o[0], sizeof(real_T) <<
                3U);

    // InitializeConditions for Delay: '<S126>/Delay1'
    std::memcpy(&proc_control_DW.Delay1_DSTATE[0],
                &proc_control_P.Delay1_InitialCondition_n[0], 88U * sizeof
                (real_T));

    // InitializeConditions for Memory: '<S164>/Memory'
    std::memcpy(&proc_control_DW.Memory_PreviousInput[0],
                &proc_control_P.Memory_InitialCondition_p[0], 226U * sizeof
                (boolean_T));

    // End of SystemInitialize for SubSystem: '<S120>/LTV MPC quaternion '

    // SystemInitialize for IfAction SubSystem: '<S120>/Quaternion Non linear MPC (Not for codegen)' 
    // InitializeConditions for Delay: '<S197>/mv_Delay'
    proc_control_DW.icLoad = true;

    // InitializeConditions for Delay: '<S197>/x_Delay'
    proc_control_DW.icLoad_a = true;

    // InitializeConditions for Delay: '<S197>/slack_delay'
    proc_control_DW.icLoad_j = true;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 8; proc_control_B.i_d++) {
      // InitializeConditions for Delay: '<S127>/Delay'
      proc_control_DW.Delay_DSTATE_a[proc_control_B.i_d] =
        proc_control_P.Delay_InitialCondition[proc_control_B.i_d];

      // SystemInitialize for Merge generated from: '<S120>/Merge' incorporates:
      //   Delay: '<S127>/Delay'

      proc_control_B.mv[proc_control_B.i_d] =
        proc_control_P.Merge_1_InitialOutput;
    }

    // End of SystemInitialize for SubSystem: '<S120>/Quaternion Non linear MPC (Not for codegen)' 

    // SystemInitialize for Merge generated from: '<S120>/Merge'
    proc_control_B.MpcStatus = proc_control_P.Merge_2_InitialOutput;

    // SystemInitialize for Merge generated from: '<S120>/Merge'
    proc_control_B.alive = proc_control_P.Merge_3_InitialOutput;

    // End of SystemInitialize for SubSystem: '<Root>/Subsystem Controller'

    // SystemInitialize for Merge generated from: '<S9>/Merge'
    proc_control_B.isReached = proc_control_P.Merge_2_InitialOutput_l;

    // SystemInitialize for Merge generated from: '<S9>/Merge'
    proc_control_B.isTrajDone = proc_control_P.Merge_3_InitialOutput_l;

    // SystemInitialize for Enabled SubSystem: '<Root>/Send Data to ROS'
    // SystemInitialize for Atomic SubSystem: '<S5>/Publish'
    // Start for MATLABSystem: '<S105>/SinkBlock'
    proc_control_DW.obj_og.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_og.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 26; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_n[proc_control_B.i_d] =
        tmp_1q[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_n[26] = '\x00';
    Pub_proc_control_102.createPublisher(&proc_control_B.b_zeroDelimTopic_n[0],
      1);
    proc_control_DW.obj_og.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S105>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish2'
    // Start for MATLABSystem: '<S106>/SinkBlock'
    proc_control_DW.obj_po.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_po.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 31; proc_control_B.i_d++)
    {
      proc_control_B.initialValue[proc_control_B.i_d] =
        tmp_1r[proc_control_B.i_d];
    }

    proc_control_B.initialValue[31] = '\x00';
    Pub_proc_control_104.createPublisher(&proc_control_B.initialValue[0], 1);
    proc_control_DW.obj_po.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S106>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish2'

    // SystemInitialize for Atomic SubSystem: '<S5>/Subsystem'
    // SystemInitialize for Atomic SubSystem: '<S107>/Publish5'
    // Start for MATLABSystem: '<S110>/SinkBlock'
    proc_control_DW.obj_i1.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_i1.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 28; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_h[proc_control_B.i_d] =
        tmp_1s[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_h[28] = '\x00';
    Pub_proc_control_287.createPublisher(&proc_control_B.b_zeroDelimName_h[0], 1);
    proc_control_DW.obj_i1.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S110>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S107>/Publish5'
    // End of SystemInitialize for SubSystem: '<S5>/Subsystem'
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 8; proc_control_B.i_d++) {
      // SystemInitialize for SignalConversion generated from: '<S5>/mv' incorporates:
      //   Outport: '<S5>/mv'

      proc_control_B.BufferToMakeInportVirtual_Ins_e[proc_control_B.i_d] =
        proc_control_P.mv_Y0;

      // SystemInitialize for SignalConversion generated from: '<S5>/thrust' incorporates:
      //   Outport: '<S5>/mv'
      //   Outport: '<S5>/thrust'
      //   SignalConversion generated from: '<S5>/mv'

      proc_control_B.BufferToMakeInportVirtual_Inser[proc_control_B.i_d] =
        proc_control_P.thrust_Y0;
    }

    // End of SystemInitialize for SubSystem: '<Root>/Send Data to ROS'

    // SystemInitialize for Enabled SubSystem: '<Root>/Modèle Physique'
    // InitializeConditions for DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states =
      proc_control_P.DiscreteTransferFcn1_InitialSta;

    // InitializeConditions for DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_k =
      proc_control_P.DiscreteTransferFcn1_InitialS_k;

    // InitializeConditions for DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_o =
      proc_control_P.DiscreteTransferFcn1_InitialS_g;

    // InitializeConditions for DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_i =
      proc_control_P.DiscreteTransferFcn1_InitialS_h;

    // InitializeConditions for DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_g =
      proc_control_P.DiscreteTransferFcn1_InitialS_m;

    // InitializeConditions for DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_h =
      proc_control_P.DiscreteTransferFcn1_InitialS_b;

    // InitializeConditions for DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_l =
      proc_control_P.DiscreteTransferFcn1_Initial_mm;

    // InitializeConditions for DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_ge =
      proc_control_P.DiscreteTransferFcn1_Initial_gv;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 6; proc_control_B.i_d++) {
      // InitializeConditions for UniformRandomNumber: '<S12>/ Drift'
      proc_control_B.r_h = static_cast<int32_T>(static_cast<uint32_T>
        (proc_control_P.dSeedX) >> 16U);
      proc_control_B.t_c = static_cast<int32_T>(static_cast<uint32_T>
        (proc_control_P.dSeedX) & 32768U);
      proc_control_B.tseed = ((((static_cast<uint32_T>(proc_control_P.dSeedX) -
        (static_cast<uint32_T>(proc_control_B.r_h) << 16U)) + proc_control_B.t_c)
        << 16U) + proc_control_B.t_c) + proc_control_B.r_h;
      if (proc_control_B.tseed < 1U) {
        proc_control_B.tseed = 1144108930U;
      } else if (proc_control_B.tseed > 2147483646U) {
        proc_control_B.tseed = 2147483646U;
      }

      proc_control_DW.RandSeed[proc_control_B.i_d] = proc_control_B.tseed;
      proc_control_DW.Drift_NextOutput[proc_control_B.i_d] =
        (proc_control_P.dmax[proc_control_B.i_d] -
         proc_control_P.dmin[proc_control_B.i_d]) * rt_urand_Upu32_Yd_f_pw_snf
        (&proc_control_DW.RandSeed[proc_control_B.i_d]) +
        proc_control_P.dmin[proc_control_B.i_d];

      // End of InitializeConditions for UniformRandomNumber: '<S12>/ Drift'
    }

    // InitializeConditions for UnitDelay: '<S1>/Unit Delay'
    std::memcpy(&proc_control_DW.UnitDelay_DSTATE[0],
                &proc_control_P.UnitDelay_InitialCondition[0], 13U * sizeof
                (real_T));

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' 
    proc_control_DW.DiscreteTimeIntegrator_PrevRese = 2;

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' 
    proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 2;

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' 
    proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 2;
    proc_control_DW.DiscreteTimeIntegrator2_IC_LOAD = 1U;

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
    //   Constant: '<S1>/Initial Body velocity 1'

    proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[0] =
      proc_control_P.InitialBodyvelocity1_Value[0];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   Constant: '<S1>/Initial Angular Rates'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] =
      proc_control_P.InitialAngularRates_Value[0];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S1>/Initial Body velocity '

    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] =
      proc_control_P.InitialBodyvelocity_Value[0];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
    //   Constant: '<S1>/Initial Body velocity 1'

    proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[1] =
      proc_control_P.InitialBodyvelocity1_Value[1];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   Constant: '<S1>/Initial Angular Rates'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] =
      proc_control_P.InitialAngularRates_Value[1];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S1>/Initial Body velocity '

    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] =
      proc_control_P.InitialBodyvelocity_Value[1];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
    //   Constant: '<S1>/Initial Body velocity 1'

    proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[2] =
      proc_control_P.InitialBodyvelocity1_Value[2];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   Constant: '<S1>/Initial Angular Rates'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] =
      proc_control_P.InitialAngularRates_Value[2];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S1>/Initial Body velocity '

    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] =
      proc_control_P.InitialBodyvelocity_Value[2];
    proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 2;

    // InitializeConditions for RandomNumber: '<S28>/White Noise'
    proc_control_B.r_h = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise_seed) >> 16U);
    proc_control_B.t_c = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise_seed) & 32768U);
    proc_control_B.tseed = ((((static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise_seed) - (static_cast<uint32_T>
      (proc_control_B.r_h) << 16U)) + proc_control_B.t_c) << 16U) +
      proc_control_B.t_c) + proc_control_B.r_h;
    if (proc_control_B.tseed < 1U) {
      proc_control_B.tseed = 1144108930U;
    } else if (proc_control_B.tseed > 2147483646U) {
      proc_control_B.tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_j = proc_control_B.tseed;
    proc_control_DW.NextOutput = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_j) * proc_control_P.WhiteNoise_StdDev +
      proc_control_P.WhiteNoise_Mean;

    // End of InitializeConditions for RandomNumber: '<S28>/White Noise'

    // InitializeConditions for RandomNumber: '<S29>/White Noise'
    proc_control_B.r_h = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise1_seed) >> 16U);
    proc_control_B.t_c = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise1_seed) & 32768U);
    proc_control_B.tseed = ((((static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise1_seed) - (static_cast<uint32_T>
      (proc_control_B.r_h) << 16U)) + proc_control_B.t_c) << 16U) +
      proc_control_B.t_c) + proc_control_B.r_h;
    if (proc_control_B.tseed < 1U) {
      proc_control_B.tseed = 1144108930U;
    } else if (proc_control_B.tseed > 2147483646U) {
      proc_control_B.tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_d = proc_control_B.tseed;
    proc_control_DW.NextOutput_b = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_d) * proc_control_P.WhiteNoise_StdDev_d +
      proc_control_P.WhiteNoise_Mean_e;

    // End of InitializeConditions for RandomNumber: '<S29>/White Noise'

    // InitializeConditions for RandomNumber: '<S30>/White Noise'
    proc_control_B.r_h = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise2_seed) >> 16U);
    proc_control_B.t_c = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise2_seed) & 32768U);
    proc_control_B.tseed = ((((static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise2_seed) - (static_cast<uint32_T>
      (proc_control_B.r_h) << 16U)) + proc_control_B.t_c) << 16U) +
      proc_control_B.t_c) + proc_control_B.r_h;
    if (proc_control_B.tseed < 1U) {
      proc_control_B.tseed = 1144108930U;
    } else if (proc_control_B.tseed > 2147483646U) {
      proc_control_B.tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_e = proc_control_B.tseed;
    proc_control_DW.NextOutput_g = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_e) * proc_control_P.WhiteNoise_StdDev_e +
      proc_control_P.WhiteNoise_Mean_c;

    // End of InitializeConditions for RandomNumber: '<S30>/White Noise'

    // InitializeConditions for RandomNumber: '<S31>/White Noise'
    proc_control_B.r_h = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise3_seed) >> 16U);
    proc_control_B.t_c = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise3_seed) & 32768U);
    proc_control_B.tseed = ((((static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise3_seed) - (static_cast<uint32_T>
      (proc_control_B.r_h) << 16U)) + proc_control_B.t_c) << 16U) +
      proc_control_B.t_c) + proc_control_B.r_h;
    if (proc_control_B.tseed < 1U) {
      proc_control_B.tseed = 1144108930U;
    } else if (proc_control_B.tseed > 2147483646U) {
      proc_control_B.tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_n = proc_control_B.tseed;
    proc_control_DW.NextOutput_l = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_n) * proc_control_P.WhiteNoise_StdDev_j +
      proc_control_P.WhiteNoise_Mean_p;

    // End of InitializeConditions for RandomNumber: '<S31>/White Noise'

    // InitializeConditions for RandomNumber: '<S32>/White Noise'
    proc_control_B.r_h = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise4_seed) >> 16U);
    proc_control_B.t_c = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise4_seed) & 32768U);
    proc_control_B.tseed = ((((static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise4_seed) - (static_cast<uint32_T>
      (proc_control_B.r_h) << 16U)) + proc_control_B.t_c) << 16U) +
      proc_control_B.t_c) + proc_control_B.r_h;
    if (proc_control_B.tseed < 1U) {
      proc_control_B.tseed = 1144108930U;
    } else if (proc_control_B.tseed > 2147483646U) {
      proc_control_B.tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_b = proc_control_B.tseed;
    proc_control_DW.NextOutput_e = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_b) * proc_control_P.WhiteNoise_StdDev_p +
      proc_control_P.WhiteNoise_Mean_l;

    // End of InitializeConditions for RandomNumber: '<S32>/White Noise'

    // SystemInitialize for Atomic SubSystem: '<S16>/Publish2'
    // Start for MATLABSystem: '<S27>/SinkBlock'
    proc_control_DW.obj_jj.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_jj.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 29; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_f[proc_control_B.i_d] =
        tmp_1t[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_f[29] = '\x00';
    Pub_proc_control_19_1361.createPublisher(&proc_control_B.b_zeroDelimTopic_f
      [0], 1);
    proc_control_DW.obj_jj.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S27>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S16>/Publish2'

    // SystemInitialize for Atomic SubSystem: '<S33>/Subscribe'
    // Start for MATLABSystem: '<S42>/SourceBlock'
    proc_control_DW.obj_ne.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ne.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 36; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_o[proc_control_B.i_d] =
        tmp_1u[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_o[36] = '\x00';
    Sub_proc_control_19_1385.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_o[0], 1);
    proc_control_DW.obj_ne.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S42>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S33>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S33>/Publish'
    // Start for MATLABSystem: '<S41>/SinkBlock'
    proc_control_DW.obj_dt.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_dt.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 32; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_l[proc_control_B.i_d] =
        tmp_1v[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_l[32] = '\x00';
    Pub_proc_control_19_1384.createPublisher(&proc_control_B.b_zeroDelimName_l[0],
      1);
    proc_control_DW.obj_dt.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S41>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S33>/Publish'

    // Start for MATLABSystem: '<S33>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.method = 7U;
    proc_control_DW.state = 1144108930U;
    proc_control_DW.state_k[0] = 362436069U;
    proc_control_DW.state_k[1] = 521288629U;
    proc_control_DW.obj_fj.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S33>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    // this.pingerPosition = this.pingerStartPosition;
    proc_control_DW.obj_fj.pingerPosition.X = 10.0;
    proc_control_DW.obj_fj.pingerPosition.Y = 0.0;
    proc_control_DW.obj_fj.pingerPosition.Z = 5.0;

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_B.y_d[0] = proc_control_P.CleanOutput_Y0.x.Quaternion[0];

    // SystemInitialize for Sum: '<S14>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_B.Quaternion[0] = proc_control_P.SensorsOutput_Y0.Quaternion[0];

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_B.y_d[1] = proc_control_P.CleanOutput_Y0.x.Quaternion[1];

    // SystemInitialize for Sum: '<S14>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_B.Quaternion[1] = proc_control_P.SensorsOutput_Y0.Quaternion[1];

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_B.y_d[2] = proc_control_P.CleanOutput_Y0.x.Quaternion[2];

    // SystemInitialize for Sum: '<S14>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_B.Quaternion[2] = proc_control_P.SensorsOutput_Y0.Quaternion[2];

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_B.y_d[3] = proc_control_P.CleanOutput_Y0.x.Quaternion[3];

    // SystemInitialize for Sum: '<S14>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_B.Quaternion[3] = proc_control_P.SensorsOutput_Y0.Quaternion[3];

    // End of SystemInitialize for SubSystem: '<Root>/Modèle Physique'

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S88>/Publish'
    // Start for MATLABSystem: '<S100>/SinkBlock'
    proc_control_DW.obj_ap.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ap.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 27; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimTopic_c[proc_control_B.i_d] =
        tmp_1w[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimTopic_c[27] = '\x00';
    Pub_proc_control_75.createPublisher(&proc_control_B.b_zeroDelimTopic_c[0], 1);
    proc_control_DW.obj_ap.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S100>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S88>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S85>/Publish'
    // Start for MATLABSystem: '<S91>/SinkBlock'
    proc_control_DW.obj_kw.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_kw.isInitialized = 1;
    Pub_proc_control_41.createPublisher(&proc_control_B.b_zeroDelimTopic_js[0],
      1);
    proc_control_DW.obj_kw.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S85>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S86>/Publish Depth'
    // Start for MATLABSystem: '<S93>/SinkBlock'
    proc_control_DW.obj_kd.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_kd.isInitialized = 1;
    Pub_proc_control_243.createPublisher(&proc_control_B.b_zeroDelimTopic_jw[0],
      1);
    proc_control_DW.obj_kd.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S86>/Publish Depth'

    // SystemInitialize for Atomic SubSystem: '<S87>/Header Assignment'
    proc_control_CurrentTime_Init(&proc_control_DW.CurrentTime);

    // End of SystemInitialize for SubSystem: '<S87>/Header Assignment'

    // SystemInitialize for Atomic SubSystem: '<S87>/Publish imu_info'
    // Start for MATLABSystem: '<S97>/SinkBlock'
    proc_control_DW.obj_ab.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ab.isInitialized = 1;
    Pub_proc_control_47.createPublisher(&proc_control_B.b_zeroDelimTopic_jz[0],
      1);
    proc_control_DW.obj_ab.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S87>/Publish imu_info'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 7; proc_control_B.i_d++) {
      // SystemInitialize for Merge generated from: '<S9>/Merge'
      proc_control_B.target[proc_control_B.i_d] =
        proc_control_P.Merge_4_InitialOutput;
    }

    // SystemInitialize for Atomic SubSystem: '<S288>/Publish5'
    // Start for MATLABSystem: '<S299>/SinkBlock'
    proc_control_DW.obj_ik.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ik.isInitialized = 1;
    for (proc_control_B.i_d = 0; proc_control_B.i_d < 28; proc_control_B.i_d++)
    {
      proc_control_B.b_zeroDelimName_h[proc_control_B.i_d] =
        tmp_1x[proc_control_B.i_d];
    }

    proc_control_B.b_zeroDelimName_h[28] = '\x00';
    Pub_proc_control_184_1596.createPublisher(&proc_control_B.b_zeroDelimName_h
      [0], 1);
    proc_control_DW.obj_ik.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S299>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S288>/Publish5'
  }
}

// Model terminate function
void proc_control::terminate()
{
  // Terminate for Atomic SubSystem: '<S10>/ROS Command Manager'
  // Terminate for Atomic SubSystem: '<S309>/Subscribe2'
  // Terminate for MATLABSystem: '<S320>/SourceBlock'
  if (!proc_control_DW.obj_mt.matlabCodegenIsDeleted) {
    proc_control_DW.obj_mt.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S320>/SourceBlock'
  // End of Terminate for SubSystem: '<S309>/Subscribe2'

  // Terminate for Atomic SubSystem: '<S309>/Subscribe3'
  // Terminate for MATLABSystem: '<S321>/SourceBlock'
  if (!proc_control_DW.obj_oz.matlabCodegenIsDeleted) {
    proc_control_DW.obj_oz.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S321>/SourceBlock'
  // End of Terminate for SubSystem: '<S309>/Subscribe3'

  // Terminate for Atomic SubSystem: '<S309>/Subscribe1'
  // Terminate for MATLABSystem: '<S319>/SourceBlock'
  if (!proc_control_DW.obj_hb.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hb.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S319>/SourceBlock'
  // End of Terminate for SubSystem: '<S309>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S309>/startSim'
  // Terminate for MATLABSystem: '<S324>/SourceBlock'
  if (!proc_control_DW.obj_bh.matlabCodegenIsDeleted) {
    proc_control_DW.obj_bh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S324>/SourceBlock'
  // End of Terminate for SubSystem: '<S309>/startSim'

  // Terminate for Atomic SubSystem: '<S309>/Subscribe5'
  // Terminate for MATLABSystem: '<S323>/SourceBlock'
  if (!proc_control_DW.obj_fx.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fx.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S323>/SourceBlock'
  // End of Terminate for SubSystem: '<S309>/Subscribe5'

  // Terminate for Atomic SubSystem: '<S309>/Subscribe4'
  // Terminate for MATLABSystem: '<S322>/SourceBlock'
  if (!proc_control_DW.obj_hh.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S322>/SourceBlock'
  // End of Terminate for SubSystem: '<S309>/Subscribe4'
  // End of Terminate for SubSystem: '<S10>/ROS Command Manager'

  // Terminate for IfAction SubSystem: '<S3>/Simulation'
  // Terminate for Atomic SubSystem: '<S66>/Subscribe'
  // Terminate for MATLABSystem: '<S74>/SourceBlock'
  if (!proc_control_DW.obj_i4.matlabCodegenIsDeleted) {
    proc_control_DW.obj_i4.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S74>/SourceBlock'
  // End of Terminate for SubSystem: '<S66>/Subscribe'

  // Terminate for Atomic SubSystem: '<S66>/Subscribe1'
  // Terminate for MATLABSystem: '<S76>/SourceBlock'
  if (!proc_control_DW.obj_bg.matlabCodegenIsDeleted) {
    proc_control_DW.obj_bg.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S76>/SourceBlock'
  // End of Terminate for SubSystem: '<S66>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S66>/Subscribe depth'
  // Terminate for MATLABSystem: '<S75>/SourceBlock'
  if (!proc_control_DW.obj_df1.matlabCodegenIsDeleted) {
    proc_control_DW.obj_df1.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S75>/SourceBlock'
  // End of Terminate for SubSystem: '<S66>/Subscribe depth'
  // End of Terminate for SubSystem: '<S3>/Simulation'

  // Terminate for IfAction SubSystem: '<S3>/AUV8'
  // Terminate for Atomic SubSystem: '<S65>/Subscribe'
  // Terminate for MATLABSystem: '<S68>/SourceBlock'
  if (!proc_control_DW.obj_lu.matlabCodegenIsDeleted) {
    proc_control_DW.obj_lu.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S68>/SourceBlock'
  // End of Terminate for SubSystem: '<S65>/Subscribe'

  // Terminate for Atomic SubSystem: '<S65>/Subscribe1'
  // Terminate for MATLABSystem: '<S69>/SourceBlock'
  if (!proc_control_DW.obj_dh.matlabCodegenIsDeleted) {
    proc_control_DW.obj_dh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S69>/SourceBlock'
  // End of Terminate for SubSystem: '<S65>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S65>/Subscribe2'
  // Terminate for MATLABSystem: '<S70>/SourceBlock'
  if (!proc_control_DW.obj_ow.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ow.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S70>/SourceBlock'
  // End of Terminate for SubSystem: '<S65>/Subscribe2'
  // End of Terminate for SubSystem: '<S3>/AUV8'

  // Terminate for IfAction SubSystem: '<S10>/Get_ROS_param '
  // Terminate for MATLABSystem: '<S314>/Get Parameter'
  if (!proc_control_DW.obj_f1.matlabCodegenIsDeleted) {
    proc_control_DW.obj_f1.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S314>/Get Parameter'
  proc_control_MATLABSystem_Term(&proc_control_DW.MATLABSystem_f);

  // Terminate for MATLABSystem: '<S314>/Get Parameter1'
  if (!proc_control_DW.obj_dj.matlabCodegenIsDeleted) {
    proc_control_DW.obj_dj.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S314>/Get Parameter1'
  proc_control_MATLABSystem1_Term(&proc_control_DW.MATLABSystem1_f);

  // Terminate for MATLABSystem: '<S314>/Get Parameter2'
  if (!proc_control_DW.obj_kf.matlabCodegenIsDeleted) {
    proc_control_DW.obj_kf.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S314>/Get Parameter2'
  proc_control_MATLABSystem1_Term(&proc_control_DW.MATLABSystem2);

  // Terminate for MATLABSystem: '<S315>/Get Parameter'
  if (!proc_control_DW.obj_k2.matlabCodegenIsDeleted) {
    proc_control_DW.obj_k2.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S315>/Get Parameter'
  proc_control_MATLABSystem_Term(&proc_control_DW.MATLABSystem_fn);

  // Terminate for MATLABSystem: '<S315>/Get Parameter1'
  if (!proc_control_DW.obj_frx.matlabCodegenIsDeleted) {
    proc_control_DW.obj_frx.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S315>/Get Parameter1'
  proc_control_MATLABSystem1_Term(&proc_control_DW.MATLABSystem1_fn);

  // Terminate for MATLABSystem: '<S315>/Get Parameter2'
  if (!proc_control_DW.obj_ku.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ku.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S315>/Get Parameter2'
  proc_control_MATLABSystem1_Term(&proc_control_DW.MATLABSystem2_f);

  // Terminate for MATLABSystem: '<S316>/Get Parameter'
  if (!proc_control_DW.obj_hu.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hu.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S316>/Get Parameter'
  proc_control_MATLABSystem_Term(&proc_control_DW.MATLABSystem_fni);

  // Terminate for MATLABSystem: '<S316>/Get Parameter1'
  if (!proc_control_DW.obj_l4.matlabCodegenIsDeleted) {
    proc_control_DW.obj_l4.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S316>/Get Parameter1'
  proc_control_MATLABSystem1_Term(&proc_control_DW.MATLABSystem1_fni);

  // Terminate for MATLABSystem: '<S316>/Get Parameter2'
  if (!proc_control_DW.obj_j2.matlabCodegenIsDeleted) {
    proc_control_DW.obj_j2.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S316>/Get Parameter2'
  proc_control_MATLABSystem1_Term(&proc_control_DW.MATLABSystem2_fn);

  // Terminate for MATLABSystem: '<S317>/Get Parameter'
  if (!proc_control_DW.obj_hs.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hs.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S317>/Get Parameter'
  proc_control_MATLABSystem_Term(&proc_control_DW.MATLABSystem_fnik);

  // Terminate for MATLABSystem: '<S317>/Get Parameter1'
  if (!proc_control_DW.obj_ps.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ps.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S317>/Get Parameter1'
  proc_control_MATLABSystem1_Term(&proc_control_DW.MATLABSystem1_fnik);

  // Terminate for MATLABSystem: '<S317>/Get Parameter2'
  if (!proc_control_DW.obj_ll.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ll.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S317>/Get Parameter2'
  proc_control_MATLABSystem1_Term(&proc_control_DW.MATLABSystem2_fni);

  // Terminate for MATLABSystem: '<S318>/Get Parameter1'
  if (!proc_control_DW.obj_im.matlabCodegenIsDeleted) {
    proc_control_DW.obj_im.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S318>/Get Parameter1'
  proc_control_MATLABSystem1_Term(&proc_control_DW.MATLABSystem1_fnik4);

  // Terminate for MATLABSystem: '<S312>/Get Parameter'
  if (!proc_control_DW.obj_k.matlabCodegenIsDeleted) {
    proc_control_DW.obj_k.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S312>/Get Parameter'

  // Terminate for MATLABSystem: '<S312>/Get Parameter1'
  if (!proc_control_DW.obj_fk.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fk.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S312>/Get Parameter1'

  // Terminate for MATLABSystem: '<S312>/Get Parameter2'
  if (!proc_control_DW.obj_f0.matlabCodegenIsDeleted) {
    proc_control_DW.obj_f0.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S312>/Get Parameter2'

  // Terminate for MATLABSystem: '<S312>/Get Parameter3'
  if (!proc_control_DW.obj_er.matlabCodegenIsDeleted) {
    proc_control_DW.obj_er.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S312>/Get Parameter3'

  // Terminate for MATLABSystem: '<S313>/Get Parameter'
  if (!proc_control_DW.obj_iy.matlabCodegenIsDeleted) {
    proc_control_DW.obj_iy.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S313>/Get Parameter'

  // Terminate for MATLABSystem: '<S313>/Get Parameter1'
  if (!proc_control_DW.obj_mh.matlabCodegenIsDeleted) {
    proc_control_DW.obj_mh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S313>/Get Parameter1'

  // Terminate for MATLABSystem: '<S313>/Get Parameter2'
  if (!proc_control_DW.obj_gy.matlabCodegenIsDeleted) {
    proc_control_DW.obj_gy.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S313>/Get Parameter2'

  // Terminate for MATLABSystem: '<S311>/Get Parameter'
  if (!proc_control_DW.obj_nw.matlabCodegenIsDeleted) {
    proc_control_DW.obj_nw.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter'

  // Terminate for MATLABSystem: '<S311>/Get Parameter1'
  if (!proc_control_DW.obj_h.matlabCodegenIsDeleted) {
    proc_control_DW.obj_h.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter1'

  // Terminate for MATLABSystem: '<S311>/Get Parameter2'
  if (!proc_control_DW.obj_lr.matlabCodegenIsDeleted) {
    proc_control_DW.obj_lr.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter2'

  // Terminate for MATLABSystem: '<S311>/Get Parameter3'
  if (!proc_control_DW.obj_d.matlabCodegenIsDeleted) {
    proc_control_DW.obj_d.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter3'

  // Terminate for MATLABSystem: '<S311>/Get Parameter4'
  if (!proc_control_DW.obj_n.matlabCodegenIsDeleted) {
    proc_control_DW.obj_n.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter4'

  // Terminate for MATLABSystem: '<S311>/Get Parameter5'
  if (!proc_control_DW.obj_lz.matlabCodegenIsDeleted) {
    proc_control_DW.obj_lz.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter5'
  proc_contr_MATLABSystem1_p_Term(&proc_control_DW.MATLABSystem1_fnik4d);

  // Terminate for MATLABSystem: '<S311>/Get Parameter6'
  if (!proc_control_DW.obj_jm.matlabCodegenIsDeleted) {
    proc_control_DW.obj_jm.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter6'
  proc_contr_MATLABSystem1_p_Term(&proc_control_DW.MATLABSystem2_fnik);

  // Terminate for MATLABSystem: '<S311>/Get Parameter7'
  if (!proc_control_DW.obj_e.matlabCodegenIsDeleted) {
    proc_control_DW.obj_e.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter7'

  // Terminate for MATLABSystem: '<S311>/Get Parameter8'
  if (!proc_control_DW.obj_fr.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fr.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter8'
  proc_control_MATLABSystem4_Term(&proc_control_DW.MATLABSystem4);

  // Terminate for MATLABSystem: '<S311>/Get Parameter9'
  if (!proc_control_DW.obj_i.matlabCodegenIsDeleted) {
    proc_control_DW.obj_i.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter9'
  proc_control_MATLABSystem4_Term(&proc_control_DW.MATLABSystem5);

  // Terminate for MATLABSystem: '<S311>/Get Parameter10'
  if (!proc_control_DW.obj_p.matlabCodegenIsDeleted) {
    proc_control_DW.obj_p.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter10'

  // Terminate for MATLABSystem: '<S311>/Get Parameter11'
  if (!proc_control_DW.obj_nu.matlabCodegenIsDeleted) {
    proc_control_DW.obj_nu.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter11'
  proc_contr_MATLABSystem1_p_Term(&proc_control_DW.MATLABSystem7);

  // Terminate for MATLABSystem: '<S311>/Get Parameter12'
  if (!proc_control_DW.obj_g.matlabCodegenIsDeleted) {
    proc_control_DW.obj_g.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter12'
  proc_contr_MATLABSystem1_p_Term(&proc_control_DW.MATLABSystem8);

  // Terminate for MATLABSystem: '<S311>/Get Parameter13'
  if (!proc_control_DW.obj_lm.matlabCodegenIsDeleted) {
    proc_control_DW.obj_lm.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter13'
  proc_contr_MATLABSystem1_p_Term(&proc_control_DW.MATLABSystem9);

  // Terminate for MATLABSystem: '<S311>/Get Parameter14'
  if (!proc_control_DW.obj_n1.matlabCodegenIsDeleted) {
    proc_control_DW.obj_n1.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter14'
  proc_contr_MATLABSystem1_p_Term(&proc_control_DW.MATLABSystem10);

  // Terminate for MATLABSystem: '<S311>/Get Parameter15'
  if (!proc_control_DW.obj_a0.matlabCodegenIsDeleted) {
    proc_control_DW.obj_a0.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S311>/Get Parameter15'
  // End of Terminate for SubSystem: '<S10>/Get_ROS_param '

  // Terminate for Enabled SubSystem: '<Root>/Sensor Manager'
  // Terminate for Atomic SubSystem: '<S112>/Header Assignment'
  proc_control_CurrentTime_Term(&proc_control_DW.CurrentTime_e);

  // End of Terminate for SubSystem: '<S112>/Header Assignment'

  // Terminate for Atomic SubSystem: '<S112>/Publish'
  // Terminate for MATLABSystem: '<S118>/SinkBlock'
  if (!proc_control_DW.obj_ag.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ag.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S118>/SinkBlock'
  // End of Terminate for SubSystem: '<S112>/Publish'

  // Terminate for Atomic SubSystem: '<S111>/Publish'
  // Terminate for MATLABSystem: '<S114>/SinkBlock'
  if (!proc_control_DW.obj_eb.matlabCodegenIsDeleted) {
    proc_control_DW.obj_eb.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S114>/SinkBlock'
  // End of Terminate for SubSystem: '<S111>/Publish'
  // End of Terminate for SubSystem: '<Root>/Sensor Manager'

  // Terminate for Atomic SubSystem: '<S287>/Subscribe'
  // Terminate for MATLABSystem: '<S295>/SourceBlock'
  if (!proc_control_DW.obj_df.matlabCodegenIsDeleted) {
    proc_control_DW.obj_df.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S295>/SourceBlock'
  // End of Terminate for SubSystem: '<S287>/Subscribe'

  // Terminate for Atomic SubSystem: '<S286>/Subscribe2'
  // Terminate for MATLABSystem: '<S293>/SourceBlock'
  if (!proc_control_DW.obj_cs.matlabCodegenIsDeleted) {
    proc_control_DW.obj_cs.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S293>/SourceBlock'
  // End of Terminate for SubSystem: '<S286>/Subscribe2'

  // Terminate for IfAction SubSystem: '<S9>/singleWpts Trajectory'
  // Terminate for Atomic SubSystem: '<S290>/Subscribe'
  // Terminate for MATLABSystem: '<S303>/SourceBlock'
  if (!proc_control_DW.obj_hd.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hd.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S303>/SourceBlock'
  // End of Terminate for SubSystem: '<S290>/Subscribe'
  // End of Terminate for SubSystem: '<S9>/singleWpts Trajectory'

  // Terminate for Atomic SubSystem: '<Root>/Subsystem Controller'
  // Terminate for IfAction SubSystem: '<S7>/MPC manager'
  // Terminate for Atomic SubSystem: '<S121>/Subscribe1'
  // Terminate for MATLABSystem: '<S220>/SourceBlock'
  if (!proc_control_DW.obj_hhu.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hhu.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S220>/SourceBlock'
  // End of Terminate for SubSystem: '<S121>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S121>/Subscribe'
  // Terminate for MATLABSystem: '<S219>/SourceBlock'
  if (!proc_control_DW.obj_k4.matlabCodegenIsDeleted) {
    proc_control_DW.obj_k4.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S219>/SourceBlock'
  // End of Terminate for SubSystem: '<S121>/Subscribe'
  // End of Terminate for SubSystem: '<S7>/MPC manager'
  // End of Terminate for SubSystem: '<Root>/Subsystem Controller'

  // Terminate for Enabled SubSystem: '<Root>/Send Data to ROS'
  // Terminate for Atomic SubSystem: '<S5>/Publish'
  // Terminate for MATLABSystem: '<S105>/SinkBlock'
  if (!proc_control_DW.obj_og.matlabCodegenIsDeleted) {
    proc_control_DW.obj_og.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S105>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish'

  // Terminate for Atomic SubSystem: '<S5>/Publish2'
  // Terminate for MATLABSystem: '<S106>/SinkBlock'
  if (!proc_control_DW.obj_po.matlabCodegenIsDeleted) {
    proc_control_DW.obj_po.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S106>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish2'

  // Terminate for Atomic SubSystem: '<S5>/Subsystem'
  // Terminate for Atomic SubSystem: '<S107>/Publish5'
  // Terminate for MATLABSystem: '<S110>/SinkBlock'
  if (!proc_control_DW.obj_i1.matlabCodegenIsDeleted) {
    proc_control_DW.obj_i1.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S110>/SinkBlock'
  // End of Terminate for SubSystem: '<S107>/Publish5'
  // End of Terminate for SubSystem: '<S5>/Subsystem'
  // End of Terminate for SubSystem: '<Root>/Send Data to ROS'

  // Terminate for Enabled SubSystem: '<Root>/Modèle Physique'
  // Terminate for Atomic SubSystem: '<S16>/Publish2'
  // Terminate for MATLABSystem: '<S27>/SinkBlock'
  if (!proc_control_DW.obj_jj.matlabCodegenIsDeleted) {
    proc_control_DW.obj_jj.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S27>/SinkBlock'
  // End of Terminate for SubSystem: '<S16>/Publish2'

  // Terminate for Atomic SubSystem: '<S33>/Subscribe'
  // Terminate for MATLABSystem: '<S42>/SourceBlock'
  if (!proc_control_DW.obj_ne.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ne.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S42>/SourceBlock'
  // End of Terminate for SubSystem: '<S33>/Subscribe'

  // Terminate for Atomic SubSystem: '<S33>/Publish'
  // Terminate for MATLABSystem: '<S41>/SinkBlock'
  if (!proc_control_DW.obj_dt.matlabCodegenIsDeleted) {
    proc_control_DW.obj_dt.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S41>/SinkBlock'
  // End of Terminate for SubSystem: '<S33>/Publish'
  // End of Terminate for SubSystem: '<Root>/Modèle Physique'

  // Terminate for Enabled SubSystem: '<Root>/ROS Output'
  // Terminate for Atomic SubSystem: '<S88>/Publish'
  // Terminate for MATLABSystem: '<S100>/SinkBlock'
  if (!proc_control_DW.obj_ap.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ap.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S100>/SinkBlock'
  // End of Terminate for SubSystem: '<S88>/Publish'

  // Terminate for Atomic SubSystem: '<S85>/Publish'
  // Terminate for MATLABSystem: '<S91>/SinkBlock'
  if (!proc_control_DW.obj_kw.matlabCodegenIsDeleted) {
    proc_control_DW.obj_kw.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S91>/SinkBlock'
  // End of Terminate for SubSystem: '<S85>/Publish'

  // Terminate for Atomic SubSystem: '<S86>/Publish Depth'
  // Terminate for MATLABSystem: '<S93>/SinkBlock'
  if (!proc_control_DW.obj_kd.matlabCodegenIsDeleted) {
    proc_control_DW.obj_kd.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S93>/SinkBlock'
  // End of Terminate for SubSystem: '<S86>/Publish Depth'

  // Terminate for Atomic SubSystem: '<S87>/Header Assignment'
  proc_control_CurrentTime_Term(&proc_control_DW.CurrentTime);

  // End of Terminate for SubSystem: '<S87>/Header Assignment'

  // Terminate for Atomic SubSystem: '<S87>/Publish imu_info'
  // Terminate for MATLABSystem: '<S97>/SinkBlock'
  if (!proc_control_DW.obj_ab.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ab.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S97>/SinkBlock'
  // End of Terminate for SubSystem: '<S87>/Publish imu_info'
  // End of Terminate for SubSystem: '<Root>/ROS Output'

  // Terminate for Atomic SubSystem: '<S288>/Publish5'
  // Terminate for MATLABSystem: '<S299>/SinkBlock'
  if (!proc_control_DW.obj_ik.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ik.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S299>/SinkBlock'
  // End of Terminate for SubSystem: '<S288>/Publish5'
}

// Constructor
proc_control::proc_control() :
  proc_control_B(),
  proc_control_DW(),
  proc_control_PrevZCX(),
  proc_control_M()
{
  // Currently there is no constructor body generated.
}

// Destructor
proc_control::~proc_control()
{
  // Currently there is no destructor body generated.
}

// Real-Time Model get method
proc_control::RT_MODEL_proc_control_T * proc_control::getRTM()
{
  return (&proc_control_M);
}

//
// File trailer for generated code.
//
// [EOF]
//
