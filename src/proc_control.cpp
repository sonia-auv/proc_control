//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// File: proc_control.cpp
//
// Code generated for Simulink model 'proc_control'.
//
// Model version                  : 3.17
// Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021
// C/C++ source code generated on : Sat Apr 30 21:20:52 2022
//
// Target selection: ert.tlc
// Embedded hardware selection: ARM Compatible->ARM 64-bit (LLP64)
// Code generation objectives: Unspecified
// Validation result: Not run
//
#include "proc_control.h"
#include "rtwtypes.h"
#include "proc_control_types.h"
#include <cmath>
#include <cstring>
#include "trisolve_Ewqm83ue.h"
#include "trisolve_nzh2XTxC.h"
#include "trisolve_RerMU7v3.h"
#include "trisolve_kmp7BqBh.h"
#include "rt_atan2d_snf.h"
#include "trisolve_QLyTZPzT.h"
#include "trisolve_7ULo2Z2J.h"
#include "eye_4CWHrAiR.h"
#include "rt_powd_snf.h"
#include "rt_urand_Upu32_Yd_f_pw_snf.h"
#include "rt_nrand_Upu32_Yd_f_pw_snf.h"
#include "norm_115oznfV.h"
#include <math.h>
#include "WtMult_xtNnjgO3.h"
#include "trisolve_1nFOis6o.h"
#include "minimum_d12sudeP.h"
#include "Unconstrained_VQtVdCHQ.h"
#include "norm_8ho9XaR8.h"
#include "abs_9BE3kip1.h"
#include "maximum_WmXKrdSr.h"
#include "abs_TVF9gj68.h"
#include "maximum2_d2MhUgrc.h"
#include "mtimes_3lrguzTZ.h"
#include "DropConstraint_LFPKTWNz.h"
#include "eps_AH2epkhQ.h"
#include "kron_5Yeqlajx.h"
#include "norm_GdpreYkZ.h"
#include "log2_blLsPIAE.h"
#include "xnrm2_vEpa8zuo.h"
#include "xzlarf_2N2eIztg.h"
#include "isfinite_NLoqvmdK.h"
#include "all_H4RNf0h2.h"
#include "checkVectorNonFinite_2JllBqp7.h"
#include "plook_u32u16_binckpan.h"
#include "plook_u32d_binckpang.h"
#include "plook_u32d_binckpan.h"
#include "div_nde_s32_floor.h"
#include "zero_crossing_types.h"

extern "C" {

#include "rt_nonfinite.h"

}
// Named constants for MATLAB Function: '<S172>/FixedHorizonOptimizer'
  const int32_T proc_control_degrees
{
  17
};
const int32_T proc_control_nu{ 8 };

const int32_T proc_control_ny{ 13 };

static void rate_scheduler(proc_control::RT_MODEL_proc_control_T *const
  proc_control_M);

//
//         This function updates active task flag for each subrate.
//         The function is called at model base rate, hence the
//         generated code self-manages all its subrates.
//
static void rate_scheduler(proc_control::RT_MODEL_proc_control_T *const
  proc_control_M)
{
  // Compute which subrates run during the next base time step.  Subrates
  //  are an integer multiple of the base rate counter.  Therefore, the subtask
  //  counter is reset when it reaches its limit (zero means run).

  (proc_control_M->Timing.TaskCounters.TID[1])++;
  if ((proc_control_M->Timing.TaskCounters.TID[1]) > 1) {// Sample time: [0.04s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[1] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[2])++;
  if ((proc_control_M->Timing.TaskCounters.TID[2]) > 4) {// Sample time: [0.1s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[2] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[3])++;
  if ((proc_control_M->Timing.TaskCounters.TID[3]) > 49) {// Sample time: [1.0s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[3] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[4])++;
  if ((proc_control_M->Timing.TaskCounters.TID[4]) > 99) {// Sample time: [2.0s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[4] = 0;
  }

  (proc_control_M->Timing.TaskCounters.TID[5])++;
  if ((proc_control_M->Timing.TaskCounters.TID[5]) > 249) {// Sample time: [5.0s, 0.0s] 
    proc_control_M->Timing.TaskCounters.TID[5] = 0;
  }
}

// Function for MATLAB Function: '<S286>/Correct'
real_T proc_control::proc_control_xnrm2_KuvT0oF6(int32_T n, const real_T x[140],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_ih = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        real_T absxk;
        absxk = std::abs(x[k - 1]);
        if (absxk > proc_control_B.scale_ih) {
          real_T t;
          t = proc_control_B.scale_ih / absxk;
          y = y * t * t + 1.0;
          proc_control_B.scale_ih = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_B.scale_ih;
          y += t * t;
        }
      }

      y = proc_control_B.scale_ih * std::sqrt(y);
    }
  }

  return y;
}

real_T proc_control::proc_control_rt_hypotd_snf(real_T u0, real_T u1)
{
  real_T y;
  proc_control_B.a_j = std::abs(u0);
  y = std::abs(u1);
  if (proc_control_B.a_j < y) {
    proc_control_B.a_j /= y;
    y *= std::sqrt(proc_control_B.a_j * proc_control_B.a_j + 1.0);
  } else if (proc_control_B.a_j > y) {
    y /= proc_control_B.a_j;
    y = std::sqrt(y * y + 1.0) * proc_control_B.a_j;
  } else if (!std::isnan(y)) {
    y = proc_control_B.a_j * 1.4142135623730951;
  }

  return y;
}

// Function for MATLAB Function: '<S286>/Correct'
void proc_control::proc_control_xgemv_AUXWxjLv(int32_T m, int32_T n, const
  real_T A[140], int32_T ia0, const real_T x[140], int32_T ix0, real_T y[7])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T b_iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 20 + ia0;
    for (int32_T iac{ia0}; iac <= b; iac += 20) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_B.c_il = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_B.c_il += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_B.c_il;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S286>/Correct'
void proc_control::proc_control_xgerc_aQMWzodX(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[7], real_T A[140], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_B.temp_g0 = y[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A[ijA] += A[ix - 1] * proc_control_B.temp_g0;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += 20;
    }
  }
}

// Function for MATLAB Function: '<S286>/Correct'
void proc_control::proc_control_qrFactor_MMa7wW5h(const real_T A[91], const
  real_T S[169], const real_T Ns[49], real_T b_S[49])
{
  int32_T aoffset;
  int32_T coltop;
  int32_T j;
  int32_T knt;
  for (j = 0; j < 7; j++) {
    proc_control_B.coffset_hr = j * 13;
    for (knt = 0; knt < 13; knt++) {
      aoffset = knt * 13;
      proc_control_B.s_h = 0.0;
      for (coltop = 0; coltop < 13; coltop++) {
        proc_control_B.s_h += A[coltop * 7 + j] * S[aoffset + coltop];
      }

      proc_control_B.y_i[proc_control_B.coffset_hr + knt] = proc_control_B.s_h;
      proc_control_B.b_A_h[knt + 20 * j] = proc_control_B.y_i[13 * j + knt];
    }
  }

  knt = 0;
  for (coltop = 0; coltop < 7; coltop++) {
    j = 0;
    for (proc_control_B.coffset_hr = 0; proc_control_B.coffset_hr < 7;
         proc_control_B.coffset_hr++) {
      proc_control_B.b_A_h[(proc_control_B.coffset_hr + knt) + 13] = Ns[j +
        coltop];
      j += 7;
    }

    proc_control_B.work_i[coltop] = 0.0;
    knt += 20;
  }

  for (j = 0; j < 7; j++) {
    proc_control_B.coffset_hr = j * 20 + j;
    proc_control_B.atmp_c = proc_control_B.b_A_h[proc_control_B.coffset_hr];
    proc_control_B.tau_nl[j] = 0.0;
    proc_control_B.s_h = proc_control_xnrm2_KuvT0oF6(19 - j,
      proc_control_B.b_A_h, proc_control_B.coffset_hr + 2);
    if (proc_control_B.s_h != 0.0) {
      proc_control_B.s_h = proc_control_rt_hypotd_snf
        (proc_control_B.b_A_h[proc_control_B.coffset_hr], proc_control_B.s_h);
      if (proc_control_B.b_A_h[proc_control_B.coffset_hr] >= 0.0) {
        proc_control_B.s_h = -proc_control_B.s_h;
      }

      if (std::abs(proc_control_B.s_h) < 1.0020841800044864E-292) {
        knt = 0;
        aoffset = (proc_control_B.coffset_hr - j) + 20;
        do {
          knt++;
          for (coltop = proc_control_B.coffset_hr + 1; coltop < aoffset; coltop
               ++) {
            proc_control_B.b_A_h[coltop] *= 9.9792015476736E+291;
          }

          proc_control_B.s_h *= 9.9792015476736E+291;
          proc_control_B.atmp_c *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s_h) < 1.0020841800044864E-292) &&
                 (knt < 20));

        proc_control_B.s_h = proc_control_rt_hypotd_snf(proc_control_B.atmp_c,
          proc_control_xnrm2_KuvT0oF6(19 - j, proc_control_B.b_A_h,
          proc_control_B.coffset_hr + 2));
        if (proc_control_B.atmp_c >= 0.0) {
          proc_control_B.s_h = -proc_control_B.s_h;
        }

        proc_control_B.tau_nl[j] = (proc_control_B.s_h - proc_control_B.atmp_c) /
          proc_control_B.s_h;
        proc_control_B.atmp_c = 1.0 / (proc_control_B.atmp_c -
          proc_control_B.s_h);
        for (coltop = proc_control_B.coffset_hr + 1; coltop < aoffset; coltop++)
        {
          proc_control_B.b_A_h[coltop] *= proc_control_B.atmp_c;
        }

        for (aoffset = 0; aoffset < knt; aoffset++) {
          proc_control_B.s_h *= 1.0020841800044864E-292;
        }

        proc_control_B.atmp_c = proc_control_B.s_h;
      } else {
        proc_control_B.tau_nl[j] = (proc_control_B.s_h -
          proc_control_B.b_A_h[proc_control_B.coffset_hr]) / proc_control_B.s_h;
        proc_control_B.atmp_c = 1.0 /
          (proc_control_B.b_A_h[proc_control_B.coffset_hr] - proc_control_B.s_h);
        knt = (proc_control_B.coffset_hr - j) + 20;
        for (aoffset = proc_control_B.coffset_hr + 1; aoffset < knt; aoffset++)
        {
          proc_control_B.b_A_h[aoffset] *= proc_control_B.atmp_c;
        }

        proc_control_B.atmp_c = proc_control_B.s_h;
      }
    }

    proc_control_B.b_A_h[proc_control_B.coffset_hr] = proc_control_B.atmp_c;
    if (j + 1 < 7) {
      proc_control_B.s_h = proc_control_B.b_A_h[proc_control_B.coffset_hr];
      proc_control_B.b_A_h[proc_control_B.coffset_hr] = 1.0;
      if (proc_control_B.tau_nl[j] != 0.0) {
        boolean_T exitg2;
        knt = 20 - j;
        aoffset = (proc_control_B.coffset_hr - j) + 19;
        while ((knt > 0) && (proc_control_B.b_A_h[aoffset] == 0.0)) {
          knt--;
          aoffset--;
        }

        aoffset = 6 - j;
        exitg2 = false;
        while ((!exitg2) && (aoffset > 0)) {
          int32_T exitg1;
          int32_T ia;
          coltop = ((aoffset - 1) * 20 + proc_control_B.coffset_hr) + 20;
          ia = coltop;
          do {
            exitg1 = 0;
            if (ia + 1 <= coltop + knt) {
              if (proc_control_B.b_A_h[ia] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              aoffset--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        knt = 0;
        aoffset = 0;
      }

      if (knt > 0) {
        proc_control_xgemv_AUXWxjLv(knt, aoffset, proc_control_B.b_A_h,
          proc_control_B.coffset_hr + 21, proc_control_B.b_A_h,
          proc_control_B.coffset_hr + 1, proc_control_B.work_i);
        proc_control_xgerc_aQMWzodX(knt, aoffset, -proc_control_B.tau_nl[j],
          proc_control_B.coffset_hr + 1, proc_control_B.work_i,
          proc_control_B.b_A_h, proc_control_B.coffset_hr + 21);
      }

      proc_control_B.b_A_h[proc_control_B.coffset_hr] = proc_control_B.s_h;
    }
  }

  for (j = 0; j < 7; j++) {
    proc_control_B.coffset_hr = 0;
    while (proc_control_B.coffset_hr <= j) {
      proc_control_B.R[proc_control_B.coffset_hr + 7 * j] =
        proc_control_B.b_A_h[20 * j + proc_control_B.coffset_hr];
      proc_control_B.coffset_hr++;
    }

    proc_control_B.coffset_hr = j + 1;
    while (proc_control_B.coffset_hr + 1 < 8) {
      proc_control_B.R[proc_control_B.coffset_hr + 7 * j] = 0.0;
      proc_control_B.coffset_hr++;
    }
  }

  j = 0;
  for (proc_control_B.coffset_hr = 0; proc_control_B.coffset_hr < 7;
       proc_control_B.coffset_hr++) {
    knt = 0;
    for (coltop = 0; coltop < 7; coltop++) {
      b_S[coltop + j] = proc_control_B.R[knt + proc_control_B.coffset_hr];
      knt += 7;
    }

    j += 7;
  }
}

// Function for MATLAB Function: '<S286>/Correct'
real_T proc_control::proc_control_xnrm2_H2991AvN(int32_T n, const real_T x[260],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_gq = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        real_T absxk;
        absxk = std::abs(x[k - 1]);
        if (absxk > proc_control_B.scale_gq) {
          real_T t;
          t = proc_control_B.scale_gq / absxk;
          y = y * t * t + 1.0;
          proc_control_B.scale_gq = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_B.scale_gq;
          y += t * t;
        }
      }

      y = proc_control_B.scale_gq * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S286>/Correct'
void proc_control::proc_control_xgemv_3az3hqLU(int32_T m, int32_T n, const
  real_T A[260], int32_T ia0, const real_T x[260], int32_T ix0, real_T y[13])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T b_iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 20 + ia0;
    for (int32_T iac{ia0}; iac <= b; iac += 20) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_B.c_d5 = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_B.c_d5 += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_B.c_d5;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S286>/Correct'
void proc_control::proc_control_xgerc_ZLmTruVs(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[13], real_T A[260], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_B.temp_o = y[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A[ijA] += A[ix - 1] * proc_control_B.temp_o;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += 20;
    }
  }
}

// Function for MATLAB Function: '<S286>/Correct'
void proc_control::proc_control_qrFactor_1jDj6Vzn(const real_T A[169], real_T S
  [169], const real_T Ns[91])
{
  int32_T aoffset;
  int32_T ii;
  int32_T knt;
  for (int32_T j{0}; j < 13; j++) {
    proc_control_B.coffset_h = j * 13;
    for (ii = 0; ii < 13; ii++) {
      aoffset = ii * 13;
      proc_control_B.s_i = 0.0;
      for (knt = 0; knt < 13; knt++) {
        proc_control_B.s_i += A[knt * 13 + j] * S[aoffset + knt];
      }

      proc_control_B.y_m[proc_control_B.coffset_h + ii] = proc_control_B.s_i;
      proc_control_B.b_A_p[ii + 20 * j] = proc_control_B.y_m[13 * j + ii];
    }
  }

  aoffset = 0;
  for (knt = 0; knt < 13; knt++) {
    ii = 0;
    for (int32_T j{0}; j < 7; j++) {
      proc_control_B.b_A_p[(j + aoffset) + 13] = Ns[ii + knt];
      ii += 13;
    }

    proc_control_B.work_o[knt] = 0.0;
    aoffset += 20;
  }

  for (int32_T j{0}; j < 13; j++) {
    ii = j * 20 + j;
    proc_control_B.atmp_p = proc_control_B.b_A_p[ii];
    proc_control_B.tau_n[j] = 0.0;
    proc_control_B.s_i = proc_control_xnrm2_H2991AvN(19 - j,
      proc_control_B.b_A_p, ii + 2);
    if (proc_control_B.s_i != 0.0) {
      proc_control_B.s_i = proc_control_rt_hypotd_snf(proc_control_B.b_A_p[ii],
        proc_control_B.s_i);
      if (proc_control_B.b_A_p[ii] >= 0.0) {
        proc_control_B.s_i = -proc_control_B.s_i;
      }

      if (std::abs(proc_control_B.s_i) < 1.0020841800044864E-292) {
        knt = 0;
        proc_control_B.coffset_h = (ii - j) + 20;
        do {
          knt++;
          for (aoffset = ii + 1; aoffset < proc_control_B.coffset_h; aoffset++)
          {
            proc_control_B.b_A_p[aoffset] *= 9.9792015476736E+291;
          }

          proc_control_B.s_i *= 9.9792015476736E+291;
          proc_control_B.atmp_p *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s_i) < 1.0020841800044864E-292) &&
                 (knt < 20));

        proc_control_B.s_i = proc_control_rt_hypotd_snf(proc_control_B.atmp_p,
          proc_control_xnrm2_H2991AvN(19 - j, proc_control_B.b_A_p, ii + 2));
        if (proc_control_B.atmp_p >= 0.0) {
          proc_control_B.s_i = -proc_control_B.s_i;
        }

        proc_control_B.tau_n[j] = (proc_control_B.s_i - proc_control_B.atmp_p) /
          proc_control_B.s_i;
        proc_control_B.atmp_p = 1.0 / (proc_control_B.atmp_p -
          proc_control_B.s_i);
        for (aoffset = ii + 1; aoffset < proc_control_B.coffset_h; aoffset++) {
          proc_control_B.b_A_p[aoffset] *= proc_control_B.atmp_p;
        }

        proc_control_B.coffset_h = 0;
        while (proc_control_B.coffset_h <= knt - 1) {
          proc_control_B.s_i *= 1.0020841800044864E-292;
          proc_control_B.coffset_h++;
        }

        proc_control_B.atmp_p = proc_control_B.s_i;
      } else {
        proc_control_B.tau_n[j] = (proc_control_B.s_i - proc_control_B.b_A_p[ii])
          / proc_control_B.s_i;
        proc_control_B.atmp_p = 1.0 / (proc_control_B.b_A_p[ii] -
          proc_control_B.s_i);
        knt = (ii - j) + 20;
        proc_control_B.coffset_h = ii + 1;
        while (proc_control_B.coffset_h + 1 <= knt) {
          proc_control_B.b_A_p[proc_control_B.coffset_h] *=
            proc_control_B.atmp_p;
          proc_control_B.coffset_h++;
        }

        proc_control_B.atmp_p = proc_control_B.s_i;
      }
    }

    proc_control_B.b_A_p[ii] = proc_control_B.atmp_p;
    if (j + 1 < 13) {
      proc_control_B.s_i = proc_control_B.b_A_p[ii];
      proc_control_B.b_A_p[ii] = 1.0;
      if (proc_control_B.tau_n[j] != 0.0) {
        boolean_T exitg2;
        knt = 20 - j;
        proc_control_B.coffset_h = (ii - j) + 19;
        while ((knt > 0) && (proc_control_B.b_A_p[proc_control_B.coffset_h] ==
                             0.0)) {
          knt--;
          proc_control_B.coffset_h--;
        }

        proc_control_B.coffset_h = 12 - j;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.coffset_h > 0)) {
          int32_T exitg1;
          int32_T ia;
          aoffset = ((proc_control_B.coffset_h - 1) * 20 + ii) + 20;
          ia = aoffset;
          do {
            exitg1 = 0;
            if (ia + 1 <= aoffset + knt) {
              if (proc_control_B.b_A_p[ia] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              proc_control_B.coffset_h--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        knt = 0;
        proc_control_B.coffset_h = 0;
      }

      if (knt > 0) {
        proc_control_xgemv_3az3hqLU(knt, proc_control_B.coffset_h,
          proc_control_B.b_A_p, ii + 21, proc_control_B.b_A_p, ii + 1,
          proc_control_B.work_o);
        proc_control_xgerc_ZLmTruVs(knt, proc_control_B.coffset_h,
          -proc_control_B.tau_n[j], ii + 1, proc_control_B.work_o,
          proc_control_B.b_A_p, ii + 21);
      }

      proc_control_B.b_A_p[ii] = proc_control_B.s_i;
    }
  }

  for (int32_T j{0}; j < 13; j++) {
    for (ii = 0; ii <= j; ii++) {
      proc_control_B.y_m[ii + 13 * j] = proc_control_B.b_A_p[20 * j + ii];
    }

    for (ii = j + 1; ii + 1 < 14; ii++) {
      proc_control_B.y_m[ii + 13 * j] = 0.0;
    }
  }

  ii = 0;
  for (int32_T j{0}; j < 13; j++) {
    aoffset = 0;
    for (knt = 0; knt < 13; knt++) {
      S[knt + ii] = proc_control_B.y_m[aoffset + j];
      aoffset += 13;
    }

    ii += 13;
  }
}

// Function for MATLAB Function: '<S287>/Correct'
real_T proc_control::proc_control_xnrm2_kj8IiC0H(int32_T n, const real_T x[48],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_b = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        real_T absxk;
        absxk = std::abs(x[k - 1]);
        if (absxk > proc_control_B.scale_b) {
          real_T t;
          t = proc_control_B.scale_b / absxk;
          y = y * t * t + 1.0;
          proc_control_B.scale_b = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_B.scale_b;
          y += t * t;
        }
      }

      y = proc_control_B.scale_b * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S287>/Correct'
void proc_control::proc_control_xgemv_hztnEYXM(int32_T m, int32_T n, const
  real_T A[48], int32_T ia0, const real_T x[48], int32_T ix0, real_T y[3])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T b_iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = ((n - 1) << 4) + ia0;
    for (int32_T iac{ia0}; iac <= b; iac += 16) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_B.c_oe = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_B.c_oe += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_B.c_oe;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S287>/Correct'
void proc_control::proc_control_xgerc_6YFUaNlM(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[3], real_T A[48], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_B.temp_n = y[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A[ijA] += A[ix - 1] * proc_control_B.temp_n;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += 16;
    }
  }
}

// Function for MATLAB Function: '<S287>/Correct'
void proc_control::proc_control_qrFactor_qGSgSIIm(const real_T A[39], const
  real_T S[169], const real_T Ns[9], real_T b_S[9])
{
  int32_T aoffset;
  int32_T coffset;
  int32_T coltop;
  int32_T exitg1;
  int32_T j;
  int32_T knt;
  for (j = 0; j < 3; j++) {
    coffset = j * 13;
    for (knt = 0; knt < 13; knt++) {
      aoffset = knt * 13;
      proc_control_B.s_n = 0.0;
      for (coltop = 0; coltop < 13; coltop++) {
        proc_control_B.s_n += A[coltop * 3 + j] * S[aoffset + coltop];
      }

      proc_control_B.y_jg[coffset + knt] = proc_control_B.s_n;
      proc_control_B.b_A_bp[knt + (j << 4)] = proc_control_B.y_jg[13 * j + knt];
    }

    knt = j << 4;
    proc_control_B.b_A_bp[knt + 13] = Ns[j];
    proc_control_B.b_A_bp[knt + 14] = Ns[j + 3];
    proc_control_B.b_A_bp[knt + 15] = Ns[j + 6];
    proc_control_B.work_a[j] = 0.0;
  }

  proc_control_B.atmp_e2 = proc_control_B.b_A_bp[0];
  proc_control_B.tau_idx_0 = 0.0;
  proc_control_B.s_n = proc_control_xnrm2_kj8IiC0H(15, proc_control_B.b_A_bp, 2);
  if (proc_control_B.s_n != 0.0) {
    proc_control_B.s_n = proc_control_rt_hypotd_snf(proc_control_B.b_A_bp[0],
      proc_control_B.s_n);
    if (proc_control_B.b_A_bp[0] >= 0.0) {
      proc_control_B.s_n = -proc_control_B.s_n;
    }

    if (std::abs(proc_control_B.s_n) < 1.0020841800044864E-292) {
      knt = 0;
      do {
        knt++;
        for (coltop = 1; coltop < 16; coltop++) {
          proc_control_B.b_A_bp[coltop] *= 9.9792015476736E+291;
        }

        proc_control_B.s_n *= 9.9792015476736E+291;
        proc_control_B.atmp_e2 *= 9.9792015476736E+291;
      } while ((std::abs(proc_control_B.s_n) < 1.0020841800044864E-292) && (knt <
                20));

      proc_control_B.s_n = proc_control_rt_hypotd_snf(proc_control_B.atmp_e2,
        proc_control_xnrm2_kj8IiC0H(15, proc_control_B.b_A_bp, 2));
      if (proc_control_B.atmp_e2 >= 0.0) {
        proc_control_B.s_n = -proc_control_B.s_n;
      }

      proc_control_B.tau_idx_0 = (proc_control_B.s_n - proc_control_B.atmp_e2) /
        proc_control_B.s_n;
      proc_control_B.atmp_e2 = 1.0 / (proc_control_B.atmp_e2 -
        proc_control_B.s_n);
      for (coltop = 1; coltop < 16; coltop++) {
        proc_control_B.b_A_bp[coltop] *= proc_control_B.atmp_e2;
      }

      for (aoffset = 0; aoffset < knt; aoffset++) {
        proc_control_B.s_n *= 1.0020841800044864E-292;
      }

      proc_control_B.atmp_e2 = proc_control_B.s_n;
    } else {
      proc_control_B.tau_idx_0 = (proc_control_B.s_n - proc_control_B.b_A_bp[0])
        / proc_control_B.s_n;
      proc_control_B.atmp_e2 = 1.0 / (proc_control_B.b_A_bp[0] -
        proc_control_B.s_n);
      for (aoffset = 1; aoffset < 16; aoffset++) {
        proc_control_B.b_A_bp[aoffset] *= proc_control_B.atmp_e2;
      }

      proc_control_B.atmp_e2 = proc_control_B.s_n;
    }
  }

  proc_control_B.b_A_bp[0] = 1.0;
  if (proc_control_B.tau_idx_0 != 0.0) {
    boolean_T exitg2;
    knt = 16;
    aoffset = 15;
    while ((knt > 0) && (proc_control_B.b_A_bp[aoffset] == 0.0)) {
      knt--;
      aoffset--;
    }

    aoffset = 2;
    exitg2 = false;
    while ((!exitg2) && (aoffset > 0)) {
      coltop = ((aoffset - 1) << 4) + 16;
      j = coltop;
      do {
        exitg1 = 0;
        if (j + 1 <= coltop + knt) {
          if (proc_control_B.b_A_bp[j] != 0.0) {
            exitg1 = 1;
          } else {
            j++;
          }
        } else {
          aoffset--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    knt = 0;
    aoffset = 0;
  }

  if (knt > 0) {
    proc_control_xgemv_hztnEYXM(knt, aoffset, proc_control_B.b_A_bp, 17,
      proc_control_B.b_A_bp, 1, proc_control_B.work_a);
    proc_control_xgerc_6YFUaNlM(knt, aoffset, -proc_control_B.tau_idx_0, 1,
      proc_control_B.work_a, proc_control_B.b_A_bp, 17);
  }

  proc_control_B.b_A_bp[0] = proc_control_B.atmp_e2;
  proc_control_B.atmp_e2 = proc_control_B.b_A_bp[17];
  proc_control_B.tau_idx_0 = 0.0;
  proc_control_B.s_n = proc_control_xnrm2_kj8IiC0H(14, proc_control_B.b_A_bp, 19);
  if (proc_control_B.s_n != 0.0) {
    proc_control_B.s_n = proc_control_rt_hypotd_snf(proc_control_B.b_A_bp[17],
      proc_control_B.s_n);
    if (proc_control_B.b_A_bp[17] >= 0.0) {
      proc_control_B.s_n = -proc_control_B.s_n;
    }

    if (std::abs(proc_control_B.s_n) < 1.0020841800044864E-292) {
      knt = 0;
      do {
        knt++;
        for (coltop = 18; coltop < 32; coltop++) {
          proc_control_B.b_A_bp[coltop] *= 9.9792015476736E+291;
        }

        proc_control_B.s_n *= 9.9792015476736E+291;
        proc_control_B.atmp_e2 *= 9.9792015476736E+291;
      } while ((std::abs(proc_control_B.s_n) < 1.0020841800044864E-292) && (knt <
                20));

      proc_control_B.s_n = proc_control_rt_hypotd_snf(proc_control_B.atmp_e2,
        proc_control_xnrm2_kj8IiC0H(14, proc_control_B.b_A_bp, 19));
      if (proc_control_B.atmp_e2 >= 0.0) {
        proc_control_B.s_n = -proc_control_B.s_n;
      }

      proc_control_B.tau_idx_0 = (proc_control_B.s_n - proc_control_B.atmp_e2) /
        proc_control_B.s_n;
      proc_control_B.atmp_e2 = 1.0 / (proc_control_B.atmp_e2 -
        proc_control_B.s_n);
      for (coltop = 18; coltop < 32; coltop++) {
        proc_control_B.b_A_bp[coltop] *= proc_control_B.atmp_e2;
      }

      for (aoffset = 0; aoffset < knt; aoffset++) {
        proc_control_B.s_n *= 1.0020841800044864E-292;
      }

      proc_control_B.atmp_e2 = proc_control_B.s_n;
    } else {
      proc_control_B.tau_idx_0 = (proc_control_B.s_n - proc_control_B.b_A_bp[17])
        / proc_control_B.s_n;
      proc_control_B.atmp_e2 = 1.0 / (proc_control_B.b_A_bp[17] -
        proc_control_B.s_n);
      for (aoffset = 18; aoffset < 32; aoffset++) {
        proc_control_B.b_A_bp[aoffset] *= proc_control_B.atmp_e2;
      }

      proc_control_B.atmp_e2 = proc_control_B.s_n;
    }
  }

  proc_control_B.b_A_bp[17] = 1.0;
  if (proc_control_B.tau_idx_0 != 0.0) {
    knt = 15;
    aoffset = 31;
    while ((knt > 0) && (proc_control_B.b_A_bp[aoffset] == 0.0)) {
      knt--;
      aoffset--;
    }

    aoffset = 1;
    j = 33;
    do {
      exitg1 = 0;
      if (j + 1 <= knt + 33) {
        if (proc_control_B.b_A_bp[j] != 0.0) {
          exitg1 = 1;
        } else {
          j++;
        }
      } else {
        aoffset = 0;
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  } else {
    knt = 0;
    aoffset = 0;
  }

  if (knt > 0) {
    proc_control_xgemv_hztnEYXM(knt, aoffset, proc_control_B.b_A_bp, 34,
      proc_control_B.b_A_bp, 18, proc_control_B.work_a);
    proc_control_xgerc_6YFUaNlM(knt, aoffset, -proc_control_B.tau_idx_0, 18,
      proc_control_B.work_a, proc_control_B.b_A_bp, 34);
  }

  proc_control_B.b_A_bp[17] = proc_control_B.atmp_e2;
  proc_control_B.atmp_e2 = proc_control_B.b_A_bp[34];
  proc_control_B.s_n = proc_control_xnrm2_kj8IiC0H(13, proc_control_B.b_A_bp, 36);
  if (proc_control_B.s_n != 0.0) {
    proc_control_B.s_n = proc_control_rt_hypotd_snf(proc_control_B.b_A_bp[34],
      proc_control_B.s_n);
    if (proc_control_B.b_A_bp[34] >= 0.0) {
      proc_control_B.s_n = -proc_control_B.s_n;
    }

    if (std::abs(proc_control_B.s_n) < 1.0020841800044864E-292) {
      knt = 0;
      do {
        knt++;
        for (coltop = 35; coltop < 48; coltop++) {
          proc_control_B.b_A_bp[coltop] *= 9.9792015476736E+291;
        }

        proc_control_B.s_n *= 9.9792015476736E+291;
        proc_control_B.atmp_e2 *= 9.9792015476736E+291;
      } while ((std::abs(proc_control_B.s_n) < 1.0020841800044864E-292) && (knt <
                20));

      proc_control_B.s_n = proc_control_rt_hypotd_snf(proc_control_B.atmp_e2,
        proc_control_xnrm2_kj8IiC0H(13, proc_control_B.b_A_bp, 36));
      if (proc_control_B.atmp_e2 >= 0.0) {
        proc_control_B.s_n = -proc_control_B.s_n;
      }

      proc_control_B.atmp_e2 = 1.0 / (proc_control_B.atmp_e2 -
        proc_control_B.s_n);
      for (coltop = 35; coltop < 48; coltop++) {
        proc_control_B.b_A_bp[coltop] *= proc_control_B.atmp_e2;
      }

      for (aoffset = 0; aoffset < knt; aoffset++) {
        proc_control_B.s_n *= 1.0020841800044864E-292;
      }

      proc_control_B.atmp_e2 = proc_control_B.s_n;
    } else {
      proc_control_B.atmp_e2 = 1.0 / (proc_control_B.b_A_bp[34] -
        proc_control_B.s_n);
      for (aoffset = 35; aoffset < 48; aoffset++) {
        proc_control_B.b_A_bp[aoffset] *= proc_control_B.atmp_e2;
      }

      proc_control_B.atmp_e2 = proc_control_B.s_n;
    }
  }

  proc_control_B.b_A_bp[34] = proc_control_B.atmp_e2;
  proc_control_B.R_p[0] = proc_control_B.b_A_bp[0];
  for (coffset = 1; coffset + 1 < 4; coffset++) {
    proc_control_B.R_p[coffset] = 0.0;
  }

  for (coffset = 0; coffset < 2; coffset++) {
    proc_control_B.R_p[coffset + 3] = proc_control_B.b_A_bp[coffset + 16];
  }

  while (coffset + 1 < 4) {
    proc_control_B.R_p[coffset + 3] = 0.0;
    coffset++;
  }

  for (coffset = 0; coffset < 3; coffset++) {
    proc_control_B.R_p[coffset + 6] = proc_control_B.b_A_bp[coffset + 32];
  }

  j = 0;
  for (knt = 0; knt < 3; knt++) {
    b_S[j] = proc_control_B.R_p[knt];
    b_S[j + 1] = proc_control_B.R_p[knt + 3];
    b_S[j + 2] = proc_control_B.R_p[knt + 6];
    j += 3;
  }
}

// Function for MATLAB Function: '<S287>/Correct'
real_T proc_control::proc_control_xnrm2_ZWAmJ4ix(int32_T n, const real_T x[208],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_p = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        real_T absxk;
        absxk = std::abs(x[k - 1]);
        if (absxk > proc_control_B.scale_p) {
          real_T t;
          t = proc_control_B.scale_p / absxk;
          y = y * t * t + 1.0;
          proc_control_B.scale_p = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_B.scale_p;
          y += t * t;
        }
      }

      y = proc_control_B.scale_p * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S287>/Correct'
void proc_control::proc_control_xgemv_F8pkuUXW(int32_T m, int32_T n, const
  real_T A[208], int32_T ia0, const real_T x[208], int32_T ix0, real_T y[13])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T b_iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = ((n - 1) << 4) + ia0;
    for (int32_T iac{ia0}; iac <= b; iac += 16) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_B.c_e = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_B.c_e += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_B.c_e;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S287>/Correct'
void proc_control::proc_control_xgerc_4X4H4v2V(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[13], real_T A[208], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_B.temp_g = y[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A[ijA] += A[ix - 1] * proc_control_B.temp_g;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += 16;
    }
  }
}

// Function for MATLAB Function: '<S287>/Correct'
void proc_control::proc_control_qrFactor_3bJrEoRT(const real_T A[169], real_T S
  [169], const real_T Ns[39])
{
  int32_T aoffset;
  int32_T ii;
  int32_T knt;
  for (int32_T j{0}; j < 13; j++) {
    proc_control_B.coffset_d = j * 13;
    for (ii = 0; ii < 13; ii++) {
      aoffset = ii * 13;
      proc_control_B.s_m = 0.0;
      for (knt = 0; knt < 13; knt++) {
        proc_control_B.s_m += A[knt * 13 + j] * S[aoffset + knt];
      }

      proc_control_B.y_mc[proc_control_B.coffset_d + ii] = proc_control_B.s_m;
      proc_control_B.b_A_i[ii + (j << 4)] = proc_control_B.y_mc[13 * j + ii];
    }

    ii = j << 4;
    proc_control_B.b_A_i[ii + 13] = Ns[j];
    proc_control_B.b_A_i[ii + 14] = Ns[j + 13];
    proc_control_B.b_A_i[ii + 15] = Ns[j + 26];
    proc_control_B.work_b[j] = 0.0;
  }

  for (int32_T j{0}; j < 13; j++) {
    ii = (j << 4) + j;
    proc_control_B.atmp_o = proc_control_B.b_A_i[ii];
    proc_control_B.tau_c[j] = 0.0;
    proc_control_B.s_m = proc_control_xnrm2_ZWAmJ4ix(15 - j,
      proc_control_B.b_A_i, ii + 2);
    if (proc_control_B.s_m != 0.0) {
      proc_control_B.s_m = proc_control_rt_hypotd_snf(proc_control_B.b_A_i[ii],
        proc_control_B.s_m);
      if (proc_control_B.b_A_i[ii] >= 0.0) {
        proc_control_B.s_m = -proc_control_B.s_m;
      }

      if (std::abs(proc_control_B.s_m) < 1.0020841800044864E-292) {
        knt = 0;
        proc_control_B.coffset_d = (ii - j) + 16;
        do {
          knt++;
          for (aoffset = ii + 1; aoffset < proc_control_B.coffset_d; aoffset++)
          {
            proc_control_B.b_A_i[aoffset] *= 9.9792015476736E+291;
          }

          proc_control_B.s_m *= 9.9792015476736E+291;
          proc_control_B.atmp_o *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s_m) < 1.0020841800044864E-292) &&
                 (knt < 20));

        proc_control_B.s_m = proc_control_rt_hypotd_snf(proc_control_B.atmp_o,
          proc_control_xnrm2_ZWAmJ4ix(15 - j, proc_control_B.b_A_i, ii + 2));
        if (proc_control_B.atmp_o >= 0.0) {
          proc_control_B.s_m = -proc_control_B.s_m;
        }

        proc_control_B.tau_c[j] = (proc_control_B.s_m - proc_control_B.atmp_o) /
          proc_control_B.s_m;
        proc_control_B.atmp_o = 1.0 / (proc_control_B.atmp_o -
          proc_control_B.s_m);
        for (aoffset = ii + 1; aoffset < proc_control_B.coffset_d; aoffset++) {
          proc_control_B.b_A_i[aoffset] *= proc_control_B.atmp_o;
        }

        proc_control_B.coffset_d = 0;
        while (proc_control_B.coffset_d <= knt - 1) {
          proc_control_B.s_m *= 1.0020841800044864E-292;
          proc_control_B.coffset_d++;
        }

        proc_control_B.atmp_o = proc_control_B.s_m;
      } else {
        proc_control_B.tau_c[j] = (proc_control_B.s_m - proc_control_B.b_A_i[ii])
          / proc_control_B.s_m;
        proc_control_B.atmp_o = 1.0 / (proc_control_B.b_A_i[ii] -
          proc_control_B.s_m);
        knt = (ii - j) + 16;
        proc_control_B.coffset_d = ii + 1;
        while (proc_control_B.coffset_d + 1 <= knt) {
          proc_control_B.b_A_i[proc_control_B.coffset_d] *=
            proc_control_B.atmp_o;
          proc_control_B.coffset_d++;
        }

        proc_control_B.atmp_o = proc_control_B.s_m;
      }
    }

    proc_control_B.b_A_i[ii] = proc_control_B.atmp_o;
    if (j + 1 < 13) {
      proc_control_B.s_m = proc_control_B.b_A_i[ii];
      proc_control_B.b_A_i[ii] = 1.0;
      if (proc_control_B.tau_c[j] != 0.0) {
        boolean_T exitg2;
        knt = 16 - j;
        proc_control_B.coffset_d = (ii - j) + 15;
        while ((knt > 0) && (proc_control_B.b_A_i[proc_control_B.coffset_d] ==
                             0.0)) {
          knt--;
          proc_control_B.coffset_d--;
        }

        proc_control_B.coffset_d = 12 - j;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.coffset_d > 0)) {
          int32_T exitg1;
          int32_T ia;
          aoffset = (((proc_control_B.coffset_d - 1) << 4) + ii) + 16;
          ia = aoffset;
          do {
            exitg1 = 0;
            if (ia + 1 <= aoffset + knt) {
              if (proc_control_B.b_A_i[ia] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              proc_control_B.coffset_d--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        knt = 0;
        proc_control_B.coffset_d = 0;
      }

      if (knt > 0) {
        proc_control_xgemv_F8pkuUXW(knt, proc_control_B.coffset_d,
          proc_control_B.b_A_i, ii + 17, proc_control_B.b_A_i, ii + 1,
          proc_control_B.work_b);
        proc_control_xgerc_4X4H4v2V(knt, proc_control_B.coffset_d,
          -proc_control_B.tau_c[j], ii + 1, proc_control_B.work_b,
          proc_control_B.b_A_i, ii + 17);
      }

      proc_control_B.b_A_i[ii] = proc_control_B.s_m;
    }
  }

  for (int32_T j{0}; j < 13; j++) {
    for (ii = 0; ii <= j; ii++) {
      proc_control_B.y_mc[ii + 13 * j] = proc_control_B.b_A_i[(j << 4) + ii];
    }

    for (ii = j + 1; ii + 1 < 14; ii++) {
      proc_control_B.y_mc[ii + 13 * j] = 0.0;
    }
  }

  knt = 0;
  for (int32_T j{0}; j < 13; j++) {
    aoffset = 0;
    for (ii = 0; ii < 13; ii++) {
      S[ii + knt] = proc_control_B.y_mc[aoffset + j];
      aoffset += 13;
    }

    knt += 13;
  }
}

// Function for MATLAB Function: '<S288>/Correct'
real_T proc_control::proc_control_xnrm2_5AIjl0N4(int32_T n, const real_T x[30],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_f = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        real_T absxk;
        absxk = std::abs(x[k - 1]);
        if (absxk > proc_control_B.scale_f) {
          real_T t;
          t = proc_control_B.scale_f / absxk;
          y = y * t * t + 1.0;
          proc_control_B.scale_f = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_B.scale_f;
          y += t * t;
        }
      }

      y = proc_control_B.scale_f * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S288>/Correct'
void proc_control::proc_control_xgemv_tqY1LJLU(int32_T m, int32_T n, const
  real_T A[30], int32_T ia0, const real_T x[30], int32_T ix0, real_T y[2])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T b_iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 15 + ia0;
    for (int32_T iac{ia0}; iac <= b; iac += 15) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_B.c_jc = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_B.c_jc += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_B.c_jc;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S288>/Correct'
void proc_control::proc_control_xgerc_QhQfjc9Y(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[2], real_T A[30], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_B.temp_c = y[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A[ijA] += A[ix - 1] * proc_control_B.temp_c;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += 15;
    }
  }
}

// Function for MATLAB Function: '<S288>/Correct'
void proc_control::proc_control_qrFactor_wYNAcj6d(const real_T A[26], const
  real_T S[169], const real_T Ns[4], real_T b_S[4])
{
  int32_T aoffset;
  int32_T coffset;
  int32_T k;
  int32_T knt;
  for (int32_T j{0}; j < 2; j++) {
    coffset = j * 13;
    for (knt = 0; knt < 13; knt++) {
      aoffset = knt * 13;
      proc_control_B.s_a = 0.0;
      for (k = 0; k < 13; k++) {
        proc_control_B.s_a += A[(k << 1) + j] * S[aoffset + k];
      }

      proc_control_B.y_k[coffset + knt] = proc_control_B.s_a;
      proc_control_B.b_A_c[knt + 15 * j] = proc_control_B.y_k[13 * j + knt];
    }

    proc_control_B.b_A_c[15 * j + 13] = Ns[j];
    proc_control_B.b_A_c[15 * j + 14] = Ns[j + 2];
    proc_control_B.work_hw[j] = 0.0;
  }

  proc_control_B.atmp_i2 = proc_control_B.b_A_c[0];
  proc_control_B.tau_idx_0_n = 0.0;
  proc_control_B.s_a = proc_control_xnrm2_5AIjl0N4(14, proc_control_B.b_A_c, 2);
  if (proc_control_B.s_a != 0.0) {
    proc_control_B.s_a = proc_control_rt_hypotd_snf(proc_control_B.b_A_c[0],
      proc_control_B.s_a);
    if (proc_control_B.b_A_c[0] >= 0.0) {
      proc_control_B.s_a = -proc_control_B.s_a;
    }

    if (std::abs(proc_control_B.s_a) < 1.0020841800044864E-292) {
      knt = 0;
      do {
        knt++;
        for (k = 1; k < 15; k++) {
          proc_control_B.b_A_c[k] *= 9.9792015476736E+291;
        }

        proc_control_B.s_a *= 9.9792015476736E+291;
        proc_control_B.atmp_i2 *= 9.9792015476736E+291;
      } while ((std::abs(proc_control_B.s_a) < 1.0020841800044864E-292) && (knt <
                20));

      proc_control_B.s_a = proc_control_rt_hypotd_snf(proc_control_B.atmp_i2,
        proc_control_xnrm2_5AIjl0N4(14, proc_control_B.b_A_c, 2));
      if (proc_control_B.atmp_i2 >= 0.0) {
        proc_control_B.s_a = -proc_control_B.s_a;
      }

      proc_control_B.tau_idx_0_n = (proc_control_B.s_a - proc_control_B.atmp_i2)
        / proc_control_B.s_a;
      proc_control_B.atmp_i2 = 1.0 / (proc_control_B.atmp_i2 -
        proc_control_B.s_a);
      for (k = 1; k < 15; k++) {
        proc_control_B.b_A_c[k] *= proc_control_B.atmp_i2;
      }

      for (aoffset = 0; aoffset < knt; aoffset++) {
        proc_control_B.s_a *= 1.0020841800044864E-292;
      }

      proc_control_B.atmp_i2 = proc_control_B.s_a;
    } else {
      proc_control_B.tau_idx_0_n = (proc_control_B.s_a - proc_control_B.b_A_c[0])
        / proc_control_B.s_a;
      proc_control_B.atmp_i2 = 1.0 / (proc_control_B.b_A_c[0] -
        proc_control_B.s_a);
      for (aoffset = 1; aoffset < 15; aoffset++) {
        proc_control_B.b_A_c[aoffset] *= proc_control_B.atmp_i2;
      }

      proc_control_B.atmp_i2 = proc_control_B.s_a;
    }
  }

  proc_control_B.b_A_c[0] = 1.0;
  if (proc_control_B.tau_idx_0_n != 0.0) {
    knt = 15;
    aoffset = 14;
    while ((knt > 0) && (proc_control_B.b_A_c[aoffset] == 0.0)) {
      knt--;
      aoffset--;
    }

    aoffset = 1;
    k = 0;
    int32_T exitg1;
    do {
      exitg1 = 0;
      if (k + 16 <= knt + 15) {
        if (proc_control_B.b_A_c[k + 15] != 0.0) {
          exitg1 = 1;
        } else {
          k++;
        }
      } else {
        aoffset = 0;
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  } else {
    knt = 0;
    aoffset = 0;
  }

  if (knt > 0) {
    proc_control_xgemv_tqY1LJLU(knt, aoffset, proc_control_B.b_A_c, 16,
      proc_control_B.b_A_c, 1, proc_control_B.work_hw);
    proc_control_xgerc_QhQfjc9Y(knt, aoffset, -proc_control_B.tau_idx_0_n, 1,
      proc_control_B.work_hw, proc_control_B.b_A_c, 16);
  }

  proc_control_B.b_A_c[0] = proc_control_B.atmp_i2;
  proc_control_B.atmp_i2 = proc_control_B.b_A_c[16];
  proc_control_B.s_a = proc_control_xnrm2_5AIjl0N4(13, proc_control_B.b_A_c, 18);
  if (proc_control_B.s_a != 0.0) {
    proc_control_B.s_a = proc_control_rt_hypotd_snf(proc_control_B.b_A_c[16],
      proc_control_B.s_a);
    if (proc_control_B.b_A_c[16] >= 0.0) {
      proc_control_B.s_a = -proc_control_B.s_a;
    }

    if (std::abs(proc_control_B.s_a) < 1.0020841800044864E-292) {
      knt = 0;
      do {
        knt++;
        for (k = 17; k < 30; k++) {
          proc_control_B.b_A_c[k] *= 9.9792015476736E+291;
        }

        proc_control_B.s_a *= 9.9792015476736E+291;
        proc_control_B.atmp_i2 *= 9.9792015476736E+291;
      } while ((std::abs(proc_control_B.s_a) < 1.0020841800044864E-292) && (knt <
                20));

      proc_control_B.s_a = proc_control_rt_hypotd_snf(proc_control_B.atmp_i2,
        proc_control_xnrm2_5AIjl0N4(13, proc_control_B.b_A_c, 18));
      if (proc_control_B.atmp_i2 >= 0.0) {
        proc_control_B.s_a = -proc_control_B.s_a;
      }

      proc_control_B.atmp_i2 = 1.0 / (proc_control_B.atmp_i2 -
        proc_control_B.s_a);
      for (k = 17; k < 30; k++) {
        proc_control_B.b_A_c[k] *= proc_control_B.atmp_i2;
      }

      for (aoffset = 0; aoffset < knt; aoffset++) {
        proc_control_B.s_a *= 1.0020841800044864E-292;
      }

      proc_control_B.atmp_i2 = proc_control_B.s_a;
    } else {
      proc_control_B.atmp_i2 = 1.0 / (proc_control_B.b_A_c[16] -
        proc_control_B.s_a);
      for (aoffset = 17; aoffset < 30; aoffset++) {
        proc_control_B.b_A_c[aoffset] *= proc_control_B.atmp_i2;
      }

      proc_control_B.atmp_i2 = proc_control_B.s_a;
    }
  }

  proc_control_B.b_A_c[16] = proc_control_B.atmp_i2;
  proc_control_B.R_o[0] = proc_control_B.b_A_c[0];
  for (coffset = 0; coffset < 2; coffset++) {
    proc_control_B.R_o[coffset + 2] = proc_control_B.b_A_c[coffset + 15];
  }

  b_S[0] = proc_control_B.R_o[0];
  b_S[1] = proc_control_B.R_o[2];
  b_S[2] = 0.0;
  b_S[3] = proc_control_B.R_o[3];
}

// Function for MATLAB Function: '<S288>/Correct'
real_T proc_control::proc_control_xnrm2_JsSmQP8R(int32_T n, const real_T x[195],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_o1 = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        real_T absxk;
        absxk = std::abs(x[k - 1]);
        if (absxk > proc_control_B.scale_o1) {
          real_T t;
          t = proc_control_B.scale_o1 / absxk;
          y = y * t * t + 1.0;
          proc_control_B.scale_o1 = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_B.scale_o1;
          y += t * t;
        }
      }

      y = proc_control_B.scale_o1 * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S288>/Correct'
void proc_control::proc_control_xgemv_lsAhWhfs(int32_T m, int32_T n, const
  real_T A[195], int32_T ia0, const real_T x[195], int32_T ix0, real_T y[13])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T b_iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 15 + ia0;
    for (int32_T iac{ia0}; iac <= b; iac += 15) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_B.c_b = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_B.c_b += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_B.c_b;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S288>/Correct'
void proc_control::proc_control_xgerc_ARvWX7cB(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[13], real_T A[195], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_B.temp_gb = y[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A[ijA] += A[ix - 1] * proc_control_B.temp_gb;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += 15;
    }
  }
}

// Function for MATLAB Function: '<S288>/Correct'
void proc_control::proc_control_qrFactor_CnAcI93P(const real_T A[169], real_T S
  [169], const real_T Ns[26])
{
  int32_T aoffset;
  int32_T ii;
  int32_T knt;
  for (int32_T j{0}; j < 13; j++) {
    proc_control_B.coffset_i = j * 13;
    for (ii = 0; ii < 13; ii++) {
      aoffset = ii * 13;
      proc_control_B.s_e = 0.0;
      for (knt = 0; knt < 13; knt++) {
        proc_control_B.s_e += A[knt * 13 + j] * S[aoffset + knt];
      }

      proc_control_B.y_h3[proc_control_B.coffset_i + ii] = proc_control_B.s_e;
      proc_control_B.b_A_f[ii + 15 * j] = proc_control_B.y_h3[13 * j + ii];
    }

    proc_control_B.b_A_f[15 * j + 13] = Ns[j];
    proc_control_B.b_A_f[15 * j + 14] = Ns[j + 13];
    proc_control_B.work_d[j] = 0.0;
  }

  for (int32_T j{0}; j < 13; j++) {
    ii = j * 15 + j;
    proc_control_B.atmp_i = proc_control_B.b_A_f[ii];
    proc_control_B.tau_e[j] = 0.0;
    proc_control_B.s_e = proc_control_xnrm2_JsSmQP8R(14 - j,
      proc_control_B.b_A_f, ii + 2);
    if (proc_control_B.s_e != 0.0) {
      proc_control_B.s_e = proc_control_rt_hypotd_snf(proc_control_B.b_A_f[ii],
        proc_control_B.s_e);
      if (proc_control_B.b_A_f[ii] >= 0.0) {
        proc_control_B.s_e = -proc_control_B.s_e;
      }

      if (std::abs(proc_control_B.s_e) < 1.0020841800044864E-292) {
        knt = 0;
        proc_control_B.coffset_i = (ii - j) + 15;
        do {
          knt++;
          for (aoffset = ii + 1; aoffset < proc_control_B.coffset_i; aoffset++)
          {
            proc_control_B.b_A_f[aoffset] *= 9.9792015476736E+291;
          }

          proc_control_B.s_e *= 9.9792015476736E+291;
          proc_control_B.atmp_i *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s_e) < 1.0020841800044864E-292) &&
                 (knt < 20));

        proc_control_B.s_e = proc_control_rt_hypotd_snf(proc_control_B.atmp_i,
          proc_control_xnrm2_JsSmQP8R(14 - j, proc_control_B.b_A_f, ii + 2));
        if (proc_control_B.atmp_i >= 0.0) {
          proc_control_B.s_e = -proc_control_B.s_e;
        }

        proc_control_B.tau_e[j] = (proc_control_B.s_e - proc_control_B.atmp_i) /
          proc_control_B.s_e;
        proc_control_B.atmp_i = 1.0 / (proc_control_B.atmp_i -
          proc_control_B.s_e);
        for (aoffset = ii + 1; aoffset < proc_control_B.coffset_i; aoffset++) {
          proc_control_B.b_A_f[aoffset] *= proc_control_B.atmp_i;
        }

        proc_control_B.coffset_i = 0;
        while (proc_control_B.coffset_i <= knt - 1) {
          proc_control_B.s_e *= 1.0020841800044864E-292;
          proc_control_B.coffset_i++;
        }

        proc_control_B.atmp_i = proc_control_B.s_e;
      } else {
        proc_control_B.tau_e[j] = (proc_control_B.s_e - proc_control_B.b_A_f[ii])
          / proc_control_B.s_e;
        proc_control_B.atmp_i = 1.0 / (proc_control_B.b_A_f[ii] -
          proc_control_B.s_e);
        knt = (ii - j) + 15;
        proc_control_B.coffset_i = ii + 1;
        while (proc_control_B.coffset_i + 1 <= knt) {
          proc_control_B.b_A_f[proc_control_B.coffset_i] *=
            proc_control_B.atmp_i;
          proc_control_B.coffset_i++;
        }

        proc_control_B.atmp_i = proc_control_B.s_e;
      }
    }

    proc_control_B.b_A_f[ii] = proc_control_B.atmp_i;
    if (j + 1 < 13) {
      proc_control_B.s_e = proc_control_B.b_A_f[ii];
      proc_control_B.b_A_f[ii] = 1.0;
      if (proc_control_B.tau_e[j] != 0.0) {
        boolean_T exitg2;
        knt = 15 - j;
        proc_control_B.coffset_i = (ii - j) + 14;
        while ((knt > 0) && (proc_control_B.b_A_f[proc_control_B.coffset_i] ==
                             0.0)) {
          knt--;
          proc_control_B.coffset_i--;
        }

        proc_control_B.coffset_i = 12 - j;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.coffset_i > 0)) {
          int32_T exitg1;
          int32_T ia;
          aoffset = ((proc_control_B.coffset_i - 1) * 15 + ii) + 15;
          ia = aoffset;
          do {
            exitg1 = 0;
            if (ia + 1 <= aoffset + knt) {
              if (proc_control_B.b_A_f[ia] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              proc_control_B.coffset_i--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        knt = 0;
        proc_control_B.coffset_i = 0;
      }

      if (knt > 0) {
        proc_control_xgemv_lsAhWhfs(knt, proc_control_B.coffset_i,
          proc_control_B.b_A_f, ii + 16, proc_control_B.b_A_f, ii + 1,
          proc_control_B.work_d);
        proc_control_xgerc_ARvWX7cB(knt, proc_control_B.coffset_i,
          -proc_control_B.tau_e[j], ii + 1, proc_control_B.work_d,
          proc_control_B.b_A_f, ii + 16);
      }

      proc_control_B.b_A_f[ii] = proc_control_B.s_e;
    }
  }

  for (int32_T j{0}; j < 13; j++) {
    for (ii = 0; ii <= j; ii++) {
      proc_control_B.y_h3[ii + 13 * j] = proc_control_B.b_A_f[15 * j + ii];
    }

    for (ii = j + 1; ii + 1 < 14; ii++) {
      proc_control_B.y_h3[ii + 13 * j] = 0.0;
    }
  }

  knt = 0;
  for (int32_T j{0}; j < 13; j++) {
    aoffset = 0;
    for (ii = 0; ii < 13; ii++) {
      S[ii + knt] = proc_control_B.y_h3[aoffset + j];
      aoffset += 13;
    }

    knt += 13;
  }
}

// Function for MATLAB Function: '<S290>/Predict'
real_T proc_control::proc_control_erf_lY1OuNdP(real_T x)
{
  real_T y;
  int32_T b;

  // ========================== COPYRIGHT NOTICE ============================
  //  The algorithms for calculating ERF(X) and ERFC(X) are derived
  //  from FDLIBM, which has the following notice:
  //
  //  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
  //
  //  Developed at SunSoft, a Sun Microsystems, Inc. business.
  //  Permission to use, copy, modify, and distribute this
  //  software is freely granted, provided that this notice
  //  is preserved.
  // =============================    END    ================================
  proc_control_B.absx_n = std::abs(x);
  if (std::isnan(x)) {
    y = x;
  } else if (std::isinf(x)) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else if (proc_control_B.absx_n < 0.84375) {
    if (proc_control_B.absx_n < 3.7252902984619141E-9) {
      if (proc_control_B.absx_n < 2.8480945388892178E-306) {
        y = (8.0 * x + 1.0270333367641007 * x) * 0.125;
      } else {
        y = 0.12837916709551259 * x + x;
      }
    } else {
      real_T z;
      z = x * x;
      y = ((((z * -2.3763016656650163E-5 + -0.0057702702964894416) * z +
             -0.02848174957559851) * z + -0.3250421072470015) * z +
           0.12837916709551256) / (((((z * -3.9602282787753681E-6 +
        0.00013249473800432164) * z + 0.0050813062818757656) * z +
        0.0650222499887673) * z + 0.39791722395915535) * z + 1.0) * x + x;
    }
  } else if (proc_control_B.absx_n < 1.25) {
    if (x >= 0.0) {
      y = (((((((proc_control_B.absx_n - 1.0) * -0.0021663755948687908 +
                0.035478304325618236) * (proc_control_B.absx_n - 1.0) +
               -0.11089469428239668) * (proc_control_B.absx_n - 1.0) +
              0.31834661990116175) * (proc_control_B.absx_n - 1.0) +
             -0.37220787603570132) * (proc_control_B.absx_n - 1.0) +
            0.41485611868374833) * (proc_control_B.absx_n - 1.0) +
           -0.0023621185607526594) / (((((((proc_control_B.absx_n - 1.0) *
        0.011984499846799107 + 0.013637083912029051) * (proc_control_B.absx_n -
        1.0) + 0.12617121980876164) * (proc_control_B.absx_n - 1.0) +
        0.071828654414196266) * (proc_control_B.absx_n - 1.0) +
        0.540397917702171) * (proc_control_B.absx_n - 1.0) + 0.10642088040084423)
        * (proc_control_B.absx_n - 1.0) + 1.0) + 0.84506291151046753;
    } else {
      y = -0.84506291151046753 - (((((((proc_control_B.absx_n - 1.0) *
        -0.0021663755948687908 + 0.035478304325618236) * (proc_control_B.absx_n
        - 1.0) + -0.11089469428239668) * (proc_control_B.absx_n - 1.0) +
        0.31834661990116175) * (proc_control_B.absx_n - 1.0) +
        -0.37220787603570132) * (proc_control_B.absx_n - 1.0) +
        0.41485611868374833) * (proc_control_B.absx_n - 1.0) +
        -0.0023621185607526594) / (((((((proc_control_B.absx_n - 1.0) *
        0.011984499846799107 + 0.013637083912029051) * (proc_control_B.absx_n -
        1.0) + 0.12617121980876164) * (proc_control_B.absx_n - 1.0) +
        0.071828654414196266) * (proc_control_B.absx_n - 1.0) +
        0.540397917702171) * (proc_control_B.absx_n - 1.0) + 0.10642088040084423)
        * (proc_control_B.absx_n - 1.0) + 1.0);
    }
  } else if (proc_control_B.absx_n > 6.0) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else {
    real_T R;
    real_T s;
    real_T z;
    s = 1.0 / (proc_control_B.absx_n * proc_control_B.absx_n);
    if (proc_control_B.absx_n < 2.8571434020996094) {
      R = ((((((s * -9.8143293441691455 + -81.2874355063066) * s +
               -184.60509290671104) * s + -162.39666946257347) * s +
             -62.375332450326006) * s + -10.558626225323291) * s +
           -0.69385857270718176) * s + -0.0098649440348471482;
      s = (((((((s * -0.0604244152148581 + 6.5702497703192817) * s +
                108.63500554177944) * s + 429.00814002756783) * s +
              645.38727173326788) * s + 434.56587747522923) * s +
            137.65775414351904) * s + 19.651271667439257) * s + 1.0;
    } else {
      R = (((((s * -483.5191916086514 + -1025.0951316110772) * s +
              -637.56644336838963) * s + -160.63638485582192) * s +
            -17.757954917754752) * s + -0.799283237680523) * s +
        -0.0098649429247001;
      s = ((((((s * -22.440952446585818 + 474.52854120695537) * s +
               2553.0504064331644) * s + 3199.8582195085955) * s +
             1536.729586084437) * s + 325.79251299657392) * s +
           30.338060743482458) * s + 1.0;
    }

    if (!std::isnan(proc_control_B.absx_n)) {
      z = frexp(proc_control_B.absx_n, &b);
    } else {
      z = proc_control_B.absx_n;
      b = 0;
    }

    z = std::floor(z * 2.097152E+6) / 2.097152E+6 * rt_powd_snf(2.0,
      static_cast<real_T>(b));
    if (x < 0.0) {
      y = std::exp((z - proc_control_B.absx_n) * (z + proc_control_B.absx_n) + R
                   / s) * std::exp(-z * z - 0.5625) / proc_control_B.absx_n -
        1.0;
    } else {
      y = 1.0 - std::exp((z - proc_control_B.absx_n) * (z +
        proc_control_B.absx_n) + R / s) * std::exp(-z * z - 0.5625) /
        proc_control_B.absx_n;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S290>/Predict'
void proc_control::AUV8QuatPerturbedSimFc_Tstvmp_b(const real_T in1[13], const
  real_T in2[6], const real_T in3[8], real_T out1[13])
{
  proc_control_B.t8_f = in1[4] * in1[6];
  proc_control_B.t9_n = in1[5] * in1[6];
  proc_control_B.t10_o = in1[3] * in1[4];
  proc_control_B.t11_e = in1[3] * in1[5];
  proc_control_B.t12_m = in1[4] * in1[4];
  proc_control_B.t13_c = in1[5] * in1[5];
  proc_control_B.t15_g = in1[4] * in1[5] * 2.0;
  proc_control_B.t20_bn = in1[3] * in1[6] * 2.0;
  proc_control_B.t33_p = in1[11] / 500.0;
  proc_control_B.t37_p = in1[10] / 1000.0;
  proc_control_B.t39_ap = in1[12] * 0.018;
  proc_control_B.t63_f = in1[7] * 32.4648;
  proc_control_B.t67_g = in1[8] * 43.6156;
  proc_control_B.t68_b = in1[9] * 46.7695;
  proc_control_B.t16_k = proc_control_B.t8_f * 2.0;
  proc_control_B.t17_k = proc_control_B.t9_n * 2.0;
  proc_control_B.t18_bw = proc_control_B.t10_o * 2.0;
  proc_control_B.t19_i = proc_control_B.t11_e * 2.0;
  proc_control_B.t21_n = proc_control_B.t12_m * 2.0;
  proc_control_B.t22_h = proc_control_B.t13_c * 2.0;
  proc_control_B.t23_ni = in1[6] * in1[6] * 2.0;
  proc_control_B.t71 = proc_control_B.t33_p + proc_control_B.t39_ap;
  proc_control_B.t33_p += proc_control_B.t37_p;
  proc_control_B.t37_p += proc_control_B.t39_ap;
  proc_control_B.t39_ap = in1[11] * 0.558 + proc_control_B.t63_f;
  proc_control_B.t80_m = in1[10] * 0.062 + proc_control_B.t68_b;
  proc_control_B.t81_g = in1[12] * 0.031 + proc_control_B.t67_g;
  proc_control_B.t84 = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 0.592;
  proc_control_B.t45_j = proc_control_B.t17_k + proc_control_B.t18_bw;
  proc_control_B.t55 = proc_control_erf_lY1OuNdP(in1[2] * 13.333333333333334 -
    2.0);
  proc_control_B.t65_f = (proc_control_B.t21_n + proc_control_B.t22_h) - 1.0;
  proc_control_B.t63_f = in1[12] * 0.062 + -proc_control_B.t63_f;
  proc_control_B.t67_g = in1[10] * 0.558 + -proc_control_B.t67_g;
  proc_control_B.t68_b = in1[11] * 0.031 + -proc_control_B.t68_b;
  proc_control_B.t86_n = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_B.t87 = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  proc_control_B.t56_gt = proc_control_B.t16_k + -proc_control_B.t19_i;
  proc_control_B.t85_d = proc_control_B.t55 * 0.01575 + 0.01575;
  proc_control_B.t55 = proc_control_B.t55 * 15.7185 - 15.2815;
  out1[0] = (((proc_control_B.t22_h + proc_control_B.t23_ni) - 1.0) * -in1[7] +
             (proc_control_B.t16_k + proc_control_B.t19_i) * in1[9]) +
    (proc_control_B.t15_g - proc_control_B.t20_bn) * in1[8];
  out1[1] = ((proc_control_B.t15_g + proc_control_B.t20_bn) * in1[7] -
             ((proc_control_B.t21_n + proc_control_B.t23_ni) - 1.0) * in1[8]) +
    (proc_control_B.t17_k - proc_control_B.t18_bw) * in1[9];
  out1[2] = (proc_control_B.t56_gt * in1[7] + proc_control_B.t45_j * in1[8]) -
    proc_control_B.t65_f * in1[9];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_B.t15_g = in1[10] * proc_control_B.t71;
  proc_control_B.t20_bn = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) *
    in1[10];
  proc_control_B.t16_k = in1[10] * proc_control_B.t80_m;
  proc_control_B.t17_k = in1[10] * proc_control_B.t67_g;
  proc_control_B.t18_bw = in1[10] * proc_control_B.t86_n;
  proc_control_B.t19_i = in1[10] * proc_control_B.t87;
  proc_control_B.t21_n = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) * in1
    [11];
  proc_control_B.t22_h = in1[11] * proc_control_B.t37_p;
  proc_control_B.t23_ni = in1[11] * proc_control_B.t39_ap;
  proc_control_B.out1_tmp_cj = in1[11] * proc_control_B.t68_b;
  proc_control_B.out1_tmp_my = in1[11] * proc_control_B.t84;
  proc_control_B.t86_n *= in1[11];
  proc_control_B.out1_tmp_dk = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  proc_control_B.out1_tmp_n = in1[12] * proc_control_B.t33_p;
  proc_control_B.out1_tmp_b = in1[12] * proc_control_B.t63_f;
  proc_control_B.out1_tmp_p2 = in1[12] * proc_control_B.t81_g;
  proc_control_B.t84 *= in1[12];
  proc_control_B.t87 *= in1[12];
  proc_control_B.out1_tmp_k = (proc_control_B.t9_n + proc_control_B.t10_o) *
    proc_control_B.t55;
  proc_control_B.t45_j *= proc_control_B.t85_d;
  proc_control_B.out1_tmp_cl = (proc_control_B.t8_f + -proc_control_B.t11_e) *
    proc_control_B.t55;
  proc_control_B.t56_gt *= proc_control_B.t85_d;
  proc_control_B.t55 *= proc_control_B.t65_f;
  proc_control_B.t65_f = (std::abs(in1[7]) * 1.17 + 15.0) * in1[7];
  proc_control_B.t71 *= in1[7];
  proc_control_B.t81_g *= in1[7];
  proc_control_B.t68_b *= in1[7];
  proc_control_B.t85_d = (std::abs(in1[8]) * 0.82 + 20.0) * in1[8];
  proc_control_B.t37_p *= in1[8];
  proc_control_B.t63_f *= in1[8];
  proc_control_B.t80_m *= in1[8];
  proc_control_B.out1_tmp_n2 = (std::abs(in1[9]) * 0.756 + 23.333333333333332) *
    in1[9];
  proc_control_B.t33_p *= in1[9];
  proc_control_B.t39_ap *= in1[9];
  proc_control_B.t67_g *= in1[9];
  out1[7] = (((((((((((((((((((((in2[0] * 0.030976977065388711 + in2[1] *
    9.4803055144857715E-7) - in2[2] * 6.8231348244175949E-6) + in2[3] *
    0.0001303522588356414) + (in2[4] * -0.010033314971702871 + in2[5] *
    0.0010125044874363649)) + (in3[0] * -0.00033076834054020519 + in3[1] *
    1.8595780444550231E-21)) + in3[2] * 0.00033506403327449372) + (in3[3] *
    0.00033363213569639753 - in3[4] * 0.001819638864719295)) + (in3[5] *
    -0.0018124211550371481 + in3[6] * 0.0018538731733468781)) + (in3[7] *
    0.001778186846409557 - proc_control_B.t8_f * 0.11107598193630119)) +
                        ((proc_control_B.t9_n * -0.00081126583629370218 -
    proc_control_B.t10_o * 0.00081126583629370218) + proc_control_B.t11_e *
    0.11107598193630119)) + ((proc_control_B.t12_m * -0.0062610285338271466 -
    proc_control_B.t13_c * 0.0062610285338271466) + in3[0] * 1.4142135623730951 *
    0.015171119710606879)) + ((in3[1] * 1.4142135623730951 *
    0.014928824155507611 + in3[2] * 1.4142135623730951 * 0.015171119710606879) +
    in3[3] * 1.4142135623730951 * 0.01516372519659284)) +
                     (((proc_control_B.t15_g * -0.96028628902704993 -
                        proc_control_B.t20_bn * 0.0001303522588356414) +
                       proc_control_B.t16_k * 9.4803055144857715E-7) -
                      proc_control_B.t17_k * 6.8231348244175949E-6)) +
                    (((proc_control_B.t18_bw * -0.010033314971702871 -
                       proc_control_B.t19_i * 0.0010125044874363649) +
                      proc_control_B.t21_n * 0.010033314971702871) -
                     proc_control_B.t22_h * 2.9388947094905889E-5)) +
                   (((proc_control_B.t23_ni * -6.8231348244175949E-6 +
                      proc_control_B.out1_tmp_cj * 0.030976977065388711) +
                     proc_control_B.out1_tmp_my * 0.0010125044874363649) -
                    proc_control_B.t86_n * 0.0001303522588356414)) +
                  (((proc_control_B.out1_tmp_dk * -0.0010125044874363649 +
                     proc_control_B.out1_tmp_n * 0.0002115171795569455) +
                    proc_control_B.out1_tmp_b * 9.4803055144857715E-7) +
                   proc_control_B.out1_tmp_p2 * 0.030976977065388711)) +
                 ((proc_control_B.t84 * 0.010033314971702871 +
                   proc_control_B.t87 * 0.0001303522588356414) -
                  proc_control_B.out1_tmp_k * 1.860035941942108E-5)) +
                ((proc_control_B.t45_j * -0.0076571888871557192 -
                  proc_control_B.out1_tmp_cl * 0.60776829002292643) -
                 proc_control_B.t56_gt * 0.589379797395962)) +
               ((proc_control_B.t55 * -6.6934952627536608E-5 -
                 proc_control_B.t65_f * 0.030976977065388711) +
                proc_control_B.t71 * 0.0040409200239048832)) +
              (((proc_control_B.t81_g * -0.0010125044874363649 +
                 proc_control_B.t68_b * 0.010033314971702871) -
                proc_control_B.t85_d * 9.4803055144857715E-7) -
               proc_control_B.t37_p * 0.311032764122789)) +
             (((proc_control_B.t63_f * -0.0010125044874363649 -
                proc_control_B.t80_m * 0.0001303522588356414) +
               proc_control_B.out1_tmp_n2 * 6.8231348244175949E-6) +
              proc_control_B.t33_p * 0.031387639110527318)) +
    ((proc_control_B.t39_ap * 0.010033314971702871 - proc_control_B.t67_g *
      0.0001303522588356414) + 0.0031305142669135729);
  out1[8] = (((((((((((((((((((((in2[0] * 9.4803055144857715E-7 + in2[1] *
    0.02320783323245932) - in2[2] * 2.9076309096921531E-5) + in2[3] *
    0.021882274381510681) + (in2[4] * -0.0001026911824132076 - in2[5] *
    0.00042780737967584029)) + (in3[0] * 0.00013975754063522079 + in3[1] *
    7.9244610288113972E-21)) + in3[2] * -0.00014157257363048341) + (in3[3] *
    -0.0001409675626320625 - in3[4] * 0.0034249251816346319)) + (in3[5] *
    0.003387750973601051 + in3[6] * 0.0035708122797193441)) + (in3[7] *
    -0.0035336380716857632 - proc_control_B.t8_f * 0.00060385694847962161)) +
                        ((proc_control_B.t9_n * -0.23982646564227009 -
    proc_control_B.t10_o * 0.23982646564227009) + proc_control_B.t11_e *
    0.00060385694847962161)) + ((proc_control_B.t12_m * -0.026680932679612211 -
    proc_control_B.t13_c * 0.026680932679612211) - in3[0] * 1.4142135623730951 *
    0.01090649593858282)) + ((in3[1] * 1.4142135623730951 * 0.011000123045544621
    - in3[2] * 1.4142135623730951 * 0.01090649593858282) + in3[3] *
    1.4142135623730951 * 0.01090087173345982)) + (((proc_control_B.t15_g *
    -2.9388947094905889E-5 - proc_control_B.t20_bn * 0.021882274381510681) +
    proc_control_B.t16_k * 0.02320783323245932) - proc_control_B.t17_k *
    2.9076309096921531E-5)) + (((proc_control_B.t18_bw * -0.0001026911824132076
    + proc_control_B.t19_i * 0.00042780737967584029) + proc_control_B.t21_n *
    0.0001026911824132076) - proc_control_B.t22_h * 0.71944283020623911)) +
                   (((proc_control_B.t23_ni * -2.9076309096921531E-5 +
                      proc_control_B.out1_tmp_cj * 9.4803055144857715E-7) -
                     proc_control_B.out1_tmp_my * 0.00042780737967584029) -
                    proc_control_B.t86_n * 0.021882274381510681)) +
                  (((proc_control_B.out1_tmp_dk * 0.00042780737967584029 +
                     proc_control_B.out1_tmp_n * 0.00090136558200456737) +
                    proc_control_B.out1_tmp_b * 0.02320783323245932) +
                   proc_control_B.out1_tmp_p2 * 9.4803055144857715E-7)) +
                 ((proc_control_B.t84 * 0.0001026911824132076 +
                   proc_control_B.t87 * 0.021882274381510681) -
                  proc_control_B.out1_tmp_k * 0.45533768802085189)) +
                ((proc_control_B.t45_j * -1.2854146887555269 -
                  proc_control_B.out1_tmp_cl * 1.860035941942108E-5) -
                 proc_control_B.t56_gt * 0.0060323141908477191)) +
               (((proc_control_B.t55 * -0.00028523859224080018 -
                  proc_control_B.t65_f * 9.4803055144857715E-7) +
                 proc_control_B.t71 * 0.678350505826831) + proc_control_B.t81_g *
                0.00042780737967584029)) + (((proc_control_B.t68_b *
    0.0001026911824132076 - proc_control_B.t85_d * 0.02320783323245932) -
    proc_control_B.t37_p * 0.0031834266548094372) + proc_control_B.t63_f *
    0.00042780737967584029)) + (((proc_control_B.t80_m * -0.021882274381510681 +
    proc_control_B.out1_tmp_n2 * 2.9076309096921531E-5) - proc_control_B.t33_p *
    0.013262028769951049) + proc_control_B.t39_ap * 0.0001026911824132076)) +
    (proc_control_B.t67_g * -0.021882274381510681 + 0.0133404663398061);
  out1[9] = ((((((((((((((((((((((in2[0] * -6.8231348244175949E-6 - in2[1] *
    2.9076309096921531E-5) + in2[2] * 0.021384731826702759) - in2[3] *
    0.002272431716587712) + (in2[4] * 0.00039756137245743289 + in2[5] *
    5.2828771531483014E-6)) + in3[0] * -1.725827915740819E-6) + in3[1] *
    -5.8281975682474322E-18) + in3[2] * 1.748241265284163E-6) + (in3[3] *
    1.740770148765829E-6 - in3[4] * 0.02095639900015615)) + (in3[5] *
    0.021100316216985739 - in3[6] * 0.021822949502860629)) + (in3[7] *
    0.02167903228603104 + proc_control_B.t8_f * 0.004346059700124901)) +
                        ((proc_control_B.t9_n * 0.024881704687475689 +
    proc_control_B.t10_o * 0.024881704687475689) - proc_control_B.t11_e *
    0.004346059700124901)) + ((proc_control_B.t12_m * 0.0030060816152820162 +
    proc_control_B.t13_c * 0.0030060816152820162) - in3[0] * 1.4142135623730951 *
    4.8869263875916949E-5)) + ((in3[1] * 1.4142135623730951 *
    6.6264429389244648E-5 - in3[2] * 1.4142135623730951 * 4.8869263875916949E-5)
    + in3[3] * 1.4142135623730951 * 6.7490056888775055E-5)) +
                     (((proc_control_B.t15_g * 0.0002115171795569455 +
                        proc_control_B.t20_bn * 0.002272431716587712) -
                       proc_control_B.t16_k * 2.9076309096921531E-5) +
                      proc_control_B.t17_k * 0.021384731826702759)) +
                    (((proc_control_B.t18_bw * 0.00039756137245743289 -
                       proc_control_B.t19_i * 5.2828771531483014E-6) -
                      proc_control_B.t21_n * 0.00039756137245743289) +
                     proc_control_B.t22_h * 0.00090136558200456737)) +
                   (((proc_control_B.t23_ni * 0.021384731826702759 -
                      proc_control_B.out1_tmp_cj * 6.8231348244175949E-6) +
                     proc_control_B.out1_tmp_my * 5.2828771531483014E-6) +
                    proc_control_B.t86_n * 0.002272431716587712)) +
                  (((proc_control_B.out1_tmp_dk * -5.2828771531483014E-6 -
                     proc_control_B.out1_tmp_n * 0.66292668662778553) -
                    proc_control_B.out1_tmp_b * 2.9076309096921531E-5) -
                   proc_control_B.out1_tmp_p2 * 6.8231348244175949E-6)) +
                 ((proc_control_B.t84 * -0.00039756137245743289 -
                   proc_control_B.t87 * 0.002272431716587712) +
                  proc_control_B.out1_tmp_k * 0.00057047718448160036)) +
                ((proc_control_B.t45_j * 0.133487820176676 +
                  proc_control_B.out1_tmp_cl * 0.00013386990525507319) +
                 proc_control_B.t56_gt * 0.023353661458078809)) +
               (((proc_control_B.t55 * 0.2097842192199541 + proc_control_B.t65_f
                  * 6.8231348244175949E-6) - proc_control_B.t71 *
                 0.070445383214219059) - proc_control_B.t81_g *
                5.2828771531483014E-6)) + (((proc_control_B.t68_b *
    -0.00039756137245743289 + proc_control_B.t85_d * 2.9076309096921531E-5) +
    proc_control_B.t37_p * 0.01232440254618042) - proc_control_B.t63_f *
    5.2828771531483014E-6)) + (((proc_control_B.t80_m * 0.002272431716587712 -
    proc_control_B.out1_tmp_n2 * 0.021384731826702759) + proc_control_B.t33_p *
    0.00016376919174759729) - proc_control_B.t39_ap * 0.00039756137245743289)) +
    (proc_control_B.t67_g * 0.002272431716587712 - 0.0015030408076410081);
  out1[10] = ((((((((((((((((((((((((in2[0] * 0.0001303522588356414 + in2[1] *
    0.021882274381510681) - in2[2] * 0.002272431716587712) + in2[3] *
    1.71018810547529) + (in2[4] * -0.0080268590155159435 - in2[5] *
    0.0039859244840414)) + in3[0] * 0.0013021350951669831) + in3[1] *
    6.1932883292401409E-19) + in3[2] * -0.00131904594055876) + (in3[3] *
    -0.0013134089920948341 - in3[4] * 0.26767193546582568)) + (in3[5] *
    0.26476621250220889 + in3[6] * 0.2790736050389333)) + (in3[7] *
    -0.27616788207531651 - proc_control_B.t8_f * 0.0830290934481406)) +
    ((proc_control_B.t9_n * -18.72549529020894 - proc_control_B.t10_o *
      18.72549529020894) + proc_control_B.t11_e * 0.0830290934481406)) +
    ((proc_control_B.t12_m * -2.0852233152147792 - proc_control_B.t13_c *
      2.0852233152147792) + in3[0] * 1.4142135623730951 * 0.043593198825375247))
    + ((in3[1] * 1.4142135623730951 * -0.043051831063235027 + in3[2] *
        1.4142135623730951 * 0.043593198825375247) - in3[3] * 1.4142135623730951
       * 0.043976565543532631)) + ((proc_control_B.t15_g *
    -0.0040409200239048832 - proc_control_B.t20_bn * 1.71018810547529) +
    proc_control_B.t16_k * 0.021882274381510681)) + ((proc_control_B.t17_k *
    -0.002272431716587712 - proc_control_B.t18_bw * 0.0080268590155159435) +
    proc_control_B.t19_i * 0.0039859244840414)) + ((proc_control_B.t21_n *
    0.0080268590155159435 - proc_control_B.t22_h * 0.678350505826831) -
    proc_control_B.t23_ni * 0.002272431716587712)) +
                     ((proc_control_B.out1_tmp_cj * 0.0001303522588356414 -
                       proc_control_B.out1_tmp_my * 0.0039859244840414) -
                      proc_control_B.t86_n * 1.71018810547529)) +
                    (((proc_control_B.out1_tmp_dk * 0.0039859244840414 +
                       proc_control_B.out1_tmp_n * 0.070445383214219059) +
                      proc_control_B.out1_tmp_b * 0.021882274381510681) +
                     proc_control_B.out1_tmp_p2 * 0.0001303522588356414)) +
                   ((proc_control_B.t84 * 0.0080268590155159435 +
                     proc_control_B.t87 * 1.71018810547529) -
                    proc_control_B.out1_tmp_k * 0.42933022336523952)) +
                  ((proc_control_B.t45_j * -100.460348544499 -
                    proc_control_B.out1_tmp_cl * 0.0025575113183552841) -
                   proc_control_B.t56_gt * 0.47151599980996189)) +
                 ((proc_control_B.t55 * -0.022292555139725449 -
                   proc_control_B.t65_f * 0.0001303522588356414) +
                  proc_control_B.t71 * 53.015831269733987)) +
                ((proc_control_B.t81_g * 0.0039859244840414 +
                  proc_control_B.t68_b * 0.0080268590155159435) -
                 proc_control_B.t85_d * 0.021882274381510681)) +
               ((proc_control_B.t37_p * -0.2488326294809943 +
                 proc_control_B.t63_f * 0.0039859244840414) -
                proc_control_B.t80_m * 1.71018810547529)) +
              ((proc_control_B.out1_tmp_n2 * 0.002272431716587712 -
                proc_control_B.t33_p * 0.1235636590052834) +
               proc_control_B.t39_ap * 0.0080268590155159435)) +
    (proc_control_B.t67_g * -1.71018810547529 + 1.0426116576073889);
  out1[11] = ((((((((((((((((((((((in2[0] * -0.010033314971702871 - in2[1] *
    0.0001026911824132076) + in2[2] * 0.00039756137245743289) - in2[3] *
    0.0080268590155159435) + (in2[4] * 0.58374455968341665 - in2[5] *
    1.606290206365557E-6)) + (in3[0] * 5.24748238233168E-7 - in3[1] *
    1.083514276897426E-19)) + in3[2] * -5.3156315041823265E-7) + (in3[3] *
    -5.2929151302328333E-7 + in3[4] * 0.10593667623599359)) + (in3[5] *
    0.10537885436940329 - in3[6] * 0.10793139553633729)) + (in3[7] *
    -0.1033841350690595 + proc_control_B.t8_f * 6.3908140435873166)) +
    ((proc_control_B.t9_n * 0.087876754449678615 + proc_control_B.t10_o *
      0.087876754449678615) - proc_control_B.t11_e * 6.3908140435873166)) +
    ((proc_control_B.t12_m * 0.36480930847148191 + proc_control_B.t13_c *
      0.36480930847148191) + in3[0] * 1.4142135623730951 * 0.013457654526727991))
                        + ((in3[1] * 1.4142135623730951 * 0.013869054980635681 +
    in3[2] * 1.4142135623730951 * 0.013457654526727991) + in3[3] *
    1.4142135623730951 * 0.01386868232130781)) + (((proc_control_B.t15_g *
    0.311032764122789 + proc_control_B.t20_bn * 0.0080268590155159435) -
    proc_control_B.t16_k * 0.0001026911824132076) + proc_control_B.t17_k *
    0.00039756137245743289)) + ((proc_control_B.t18_bw * 0.58374455968341665 +
    proc_control_B.t19_i * 1.606290206365557E-6) - proc_control_B.t21_n *
    0.58374455968341665)) + (((proc_control_B.t22_h * 0.0031834266548094372 +
    proc_control_B.t23_ni * 0.00039756137245743289) - proc_control_B.out1_tmp_cj
    * 0.010033314971702871) - proc_control_B.out1_tmp_my * 1.606290206365557E-6))
                    + (((proc_control_B.t86_n * 0.0080268590155159435 +
    proc_control_B.out1_tmp_dk * 1.606290206365557E-6) -
                        proc_control_B.out1_tmp_n * 0.01232440254618042) -
                       proc_control_B.out1_tmp_b * 0.0001026911824132076)) +
                   ((proc_control_B.out1_tmp_p2 * -0.010033314971702871 -
                     proc_control_B.t84 * 0.58374455968341665) -
                    proc_control_B.t87 * 0.0080268590155159435)) +
                  ((proc_control_B.out1_tmp_k * 0.002014800998947134 +
                    proc_control_B.t45_j * 0.47151599980996189) +
                   proc_control_B.out1_tmp_cl * 0.19685363974481029)) +
                 ((proc_control_B.t56_gt * 34.290486373399979 +
                   proc_control_B.t55 * 0.003900077063807416) +
                  proc_control_B.t65_f * 0.010033314971702871)) +
                ((proc_control_B.t71 * -0.2488326294809943 +
                  proc_control_B.t81_g * 1.606290206365557E-6) -
                 proc_control_B.t68_b * 0.58374455968341665)) +
               (((proc_control_B.t85_d * 0.0001026911824132076 +
                  proc_control_B.t37_p * 18.096081350185919) +
                 proc_control_B.t63_f * 1.606290206365557E-6) +
                proc_control_B.t80_m * 0.0080268590155159435)) +
              ((proc_control_B.out1_tmp_n2 * -0.00039756137245743289 -
                proc_control_B.t33_p * 4.9794996397332282E-5) -
               proc_control_B.t39_ap * 0.58374455968341665)) +
    (proc_control_B.t67_g * 0.0080268590155159435 - 0.182404654235741);
  out1[12] = (((((((((((((((((((((((in2[0] * 0.0010125044874363649 - in2[1] *
    0.00042780737967584029) + in2[2] * 5.2828771531483014E-6) - in2[3] *
    0.0039859244840414) + (in2[4] * -1.606290206365557E-6 + in2[5] *
    0.53015902215788635)) + in3[0] * -0.1731941163298826) + in3[1] *
    -1.4397960202092559E-21) + in3[2] * 0.175443390567933) + (in3[3] *
    0.17469363248858291 + in3[4] * 0.00062021813460420567)) + (in3[5] *
    -0.0006207996116589 - in3[6] * 0.00064672437426625525)) + (in3[7] *
    0.00064730585132094889 - proc_control_B.t8_f * 0.64492422651466708)) +
    ((proc_control_B.t9_n * 0.3660910622711756 + proc_control_B.t10_o *
      0.3660910622711756) + proc_control_B.t11_e * 0.64492422651466708)) +
    ((proc_control_B.t12_m * 0.0048476610015380046 + proc_control_B.t13_c *
      0.0048476610015380046) + in3[0] * 1.4142135623730951 *
     0.00059255494878017434)) + ((in3[1] * 1.4142135623730951 *
    -0.1225770464045467 + in3[2] * 1.4142135623730951 * 0.00059255494878017434)
    + in3[3] * 1.4142135623730951 * 0.00041984673608298361)) +
                       (((proc_control_B.t15_g * -0.031387639110527318 +
    proc_control_B.t20_bn * 0.0039859244840414) - proc_control_B.t16_k *
    0.00042780737967584029) + proc_control_B.t17_k * 5.2828771531483014E-6)) +
                      (((proc_control_B.t18_bw * -1.606290206365557E-6 -
    proc_control_B.t19_i * 0.53015902215788635) + proc_control_B.t21_n *
                        1.606290206365557E-6) + proc_control_B.t22_h *
                       0.013262028769951049)) + (((proc_control_B.t23_ni *
    5.2828771531483014E-6 + proc_control_B.out1_tmp_cj * 0.0010125044874363649)
    + proc_control_B.out1_tmp_my * 0.53015902215788635) + proc_control_B.t86_n *
    0.0039859244840414)) + ((proc_control_B.out1_tmp_dk * -0.53015902215788635 -
    proc_control_B.out1_tmp_n * 0.00016376919174759729) -
    proc_control_B.out1_tmp_b * 0.00042780737967584029)) +
                   (((proc_control_B.out1_tmp_p2 * 0.0010125044874363649 +
                      proc_control_B.t84 * 1.606290206365557E-6) -
                     proc_control_B.t87 * 0.0039859244840414) +
                    proc_control_B.out1_tmp_k * 0.008393580789239987)) +
                  ((proc_control_B.t45_j * 0.23414229210041551 -
                    proc_control_B.out1_tmp_cl * 0.01986533804350149) -
                   proc_control_B.t56_gt * 9.4357149063583354E-5)) +
                 ((proc_control_B.t55 * 5.1825024872384838E-5 -
                   proc_control_B.t65_f * 0.0010125044874363649) -
                  proc_control_B.t71 * 0.1235636590052834)) +
                (((proc_control_B.t81_g * -0.53015902215788635 +
                   proc_control_B.t68_b * 1.606290206365557E-6) +
                  proc_control_B.t85_d * 0.00042780737967584029) -
                 proc_control_B.t37_p * 4.9794996397332282E-5)) +
               ((proc_control_B.t63_f * -0.53015902215788635 +
                 proc_control_B.t80_m * 0.0039859244840414) -
                proc_control_B.out1_tmp_n2 * 5.2828771531483014E-6)) +
              ((proc_control_B.t33_p * 16.434929686894481 +
                proc_control_B.t39_ap * 1.606290206365557E-6) +
               proc_control_B.t67_g * 0.0039859244840414)) +
    -0.0024238305007690032;
}

// Function for MATLAB Function: '<S290>/Predict'
real_T proc_control::proc_control_xnrm2_UCgE6veV(int32_T n, const real_T x[338],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_oo = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        real_T absxk;
        absxk = std::abs(x[k - 1]);
        if (absxk > proc_control_B.scale_oo) {
          real_T t;
          t = proc_control_B.scale_oo / absxk;
          y = y * t * t + 1.0;
          proc_control_B.scale_oo = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_B.scale_oo;
          y += t * t;
        }
      }

      y = proc_control_B.scale_oo * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S290>/Predict'
void proc_control::proc_control_xgemv_5ht9hnKF(int32_T m, int32_T n, const
  real_T A[338], int32_T ia0, const real_T x[338], int32_T ix0, real_T y[13])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T b_iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 26 + ia0;
    for (int32_T iac{ia0}; iac <= b; iac += 26) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_B.c_p = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_B.c_p += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_B.c_p;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S290>/Predict'
void proc_control::proc_control_xgerc_XyRtLi2r(int32_T m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[13], real_T A[338], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_B.temp_i = y[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A[ijA] += A[ix - 1] * proc_control_B.temp_i;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += 26;
    }
  }
}

// Function for MATLAB Function: '<S290>/Predict'
void proc_control::proc_control_qrFactor_O58Jhapw(const real_T A[169], real_T S
  [169], const real_T Ns[169])
{
  int32_T aoffset;
  int32_T ii;
  int32_T knt;
  for (int32_T j{0}; j < 13; j++) {
    proc_control_B.coffset = j * 13;
    for (ii = 0; ii < 13; ii++) {
      aoffset = ii * 13;
      proc_control_B.s = 0.0;
      for (knt = 0; knt < 13; knt++) {
        proc_control_B.s += A[knt * 13 + j] * S[aoffset + knt];
      }

      proc_control_B.y_h[proc_control_B.coffset + ii] = proc_control_B.s;
      knt = 26 * j + ii;
      proc_control_B.b_A_b[knt] = proc_control_B.y_h[13 * j + ii];
      proc_control_B.b_A_b[knt + 13] = Ns[13 * ii + j];
    }

    proc_control_B.work_h[j] = 0.0;
  }

  for (int32_T j{0}; j < 13; j++) {
    ii = j * 26 + j;
    proc_control_B.atmp_e = proc_control_B.b_A_b[ii];
    proc_control_B.tau_i[j] = 0.0;
    proc_control_B.s = proc_control_xnrm2_UCgE6veV(25 - j, proc_control_B.b_A_b,
      ii + 2);
    if (proc_control_B.s != 0.0) {
      proc_control_B.s = proc_control_rt_hypotd_snf(proc_control_B.b_A_b[ii],
        proc_control_B.s);
      if (proc_control_B.b_A_b[ii] >= 0.0) {
        proc_control_B.s = -proc_control_B.s;
      }

      if (std::abs(proc_control_B.s) < 1.0020841800044864E-292) {
        knt = 0;
        proc_control_B.coffset = (ii - j) + 26;
        do {
          knt++;
          for (aoffset = ii + 1; aoffset < proc_control_B.coffset; aoffset++) {
            proc_control_B.b_A_b[aoffset] *= 9.9792015476736E+291;
          }

          proc_control_B.s *= 9.9792015476736E+291;
          proc_control_B.atmp_e *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.s) < 1.0020841800044864E-292) && (knt <
                  20));

        proc_control_B.s = proc_control_rt_hypotd_snf(proc_control_B.atmp_e,
          proc_control_xnrm2_UCgE6veV(25 - j, proc_control_B.b_A_b, ii + 2));
        if (proc_control_B.atmp_e >= 0.0) {
          proc_control_B.s = -proc_control_B.s;
        }

        proc_control_B.tau_i[j] = (proc_control_B.s - proc_control_B.atmp_e) /
          proc_control_B.s;
        proc_control_B.atmp_e = 1.0 / (proc_control_B.atmp_e - proc_control_B.s);
        for (aoffset = ii + 1; aoffset < proc_control_B.coffset; aoffset++) {
          proc_control_B.b_A_b[aoffset] *= proc_control_B.atmp_e;
        }

        proc_control_B.coffset = 0;
        while (proc_control_B.coffset <= knt - 1) {
          proc_control_B.s *= 1.0020841800044864E-292;
          proc_control_B.coffset++;
        }

        proc_control_B.atmp_e = proc_control_B.s;
      } else {
        proc_control_B.tau_i[j] = (proc_control_B.s - proc_control_B.b_A_b[ii]) /
          proc_control_B.s;
        proc_control_B.atmp_e = 1.0 / (proc_control_B.b_A_b[ii] -
          proc_control_B.s);
        knt = (ii - j) + 26;
        proc_control_B.coffset = ii + 1;
        while (proc_control_B.coffset + 1 <= knt) {
          proc_control_B.b_A_b[proc_control_B.coffset] *= proc_control_B.atmp_e;
          proc_control_B.coffset++;
        }

        proc_control_B.atmp_e = proc_control_B.s;
      }
    }

    proc_control_B.b_A_b[ii] = proc_control_B.atmp_e;
    if (j + 1 < 13) {
      proc_control_B.s = proc_control_B.b_A_b[ii];
      proc_control_B.b_A_b[ii] = 1.0;
      if (proc_control_B.tau_i[j] != 0.0) {
        boolean_T exitg2;
        knt = 26 - j;
        proc_control_B.coffset = (ii - j) + 25;
        while ((knt > 0) && (proc_control_B.b_A_b[proc_control_B.coffset] == 0.0))
        {
          knt--;
          proc_control_B.coffset--;
        }

        proc_control_B.coffset = 12 - j;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.coffset > 0)) {
          int32_T exitg1;
          int32_T ia;
          aoffset = ((proc_control_B.coffset - 1) * 26 + ii) + 26;
          ia = aoffset;
          do {
            exitg1 = 0;
            if (ia + 1 <= aoffset + knt) {
              if (proc_control_B.b_A_b[ia] != 0.0) {
                exitg1 = 1;
              } else {
                ia++;
              }
            } else {
              proc_control_B.coffset--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        knt = 0;
        proc_control_B.coffset = 0;
      }

      if (knt > 0) {
        proc_control_xgemv_5ht9hnKF(knt, proc_control_B.coffset,
          proc_control_B.b_A_b, ii + 27, proc_control_B.b_A_b, ii + 1,
          proc_control_B.work_h);
        proc_control_xgerc_XyRtLi2r(knt, proc_control_B.coffset,
          -proc_control_B.tau_i[j], ii + 1, proc_control_B.work_h,
          proc_control_B.b_A_b, ii + 27);
      }

      proc_control_B.b_A_b[ii] = proc_control_B.s;
    }
  }

  for (int32_T j{0}; j < 13; j++) {
    for (ii = 0; ii <= j; ii++) {
      proc_control_B.y_h[ii + 13 * j] = proc_control_B.b_A_b[26 * j + ii];
    }

    for (ii = j + 1; ii + 1 < 14; ii++) {
      proc_control_B.y_h[ii + 13 * j] = 0.0;
    }
  }

  knt = 0;
  for (int32_T j{0}; j < 13; j++) {
    proc_control_B.coffset = 0;
    for (ii = 0; ii < 13; ii++) {
      S[ii + knt] = proc_control_B.y_h[proc_control_B.coffset + j];
      proc_control_B.coffset += 13;
    }

    knt += 13;
  }
}

void proc_control::MultiTrajectoryManager_resetImp
  (MultiTrajectoryManager_proc_c_T *b_this)
{
  int32_T i;

  //  Perform one-time calculations, such as computing constants
  b_this->dummy = 999.0;

  //  Chiffre NULL
  for (i = 0; i < 13; i++) {
    b_this->emptyArray[i] = b_this->dummy;
  }

  //  Vecteur pose NULL
  b_this->targetReachedCount = 0.0;
  for (i = 0; i < 7; i++) {
    b_this->initialPose[i] = 0.0;
  }

  //  Buffer trajectoire
  i = 0;
  for (int32_T i_1{0}; i_1 < 13; i_1++) {
    for (int32_T i_0{0}; i_0 < 6000; i_0++) {
      b_this->poseBuffer[i_0 + i] = b_this->dummy;
    }

    i += 6000;
  }

  b_this->bufferCount = 0.0;
  b_this->done = false;
  b_this->init = false;
}

void proc_control::proc_control_binary_expand_op_p(real_T in1[3], const int32_T
  in2_data[], const real_T in3_data[], const int32_T *in3_size, const real_T
  in4_data[], const int32_T *in4_size)
{
  int32_T loop_ub;

  // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
  //   ActionPort: '<S302>/Action Port'

  // SwitchCase: '<S9>/Switch Case' incorporates:
  //   MATLABSystem: '<S302>/MATLAB System1'

  loop_ub = *in4_size == 1 ? *in3_size : *in4_size;
  for (int32_T i{0}; i < loop_ub; i++) {
    in1[in2_data[0] + 1] = in3_data[0] * 2.0 * in4_data[0];
  }

  // End of SwitchCase: '<S9>/Switch Case'
  // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
}

real_T proc_control::proc_control_norm_p(const real_T x[3])
{
  real_T t;
  real_T y;
  proc_control_B.scale_k = 3.3121686421112381E-170;
  proc_control_B.absxk_l = std::abs(x[0]);
  if (proc_control_B.absxk_l > 3.3121686421112381E-170) {
    y = 1.0;
    proc_control_B.scale_k = proc_control_B.absxk_l;
  } else {
    t = proc_control_B.absxk_l / 3.3121686421112381E-170;
    y = t * t;
  }

  proc_control_B.absxk_l = std::abs(x[1]);
  if (proc_control_B.absxk_l > proc_control_B.scale_k) {
    t = proc_control_B.scale_k / proc_control_B.absxk_l;
    y = y * t * t + 1.0;
    proc_control_B.scale_k = proc_control_B.absxk_l;
  } else {
    t = proc_control_B.absxk_l / proc_control_B.scale_k;
    y += t * t;
  }

  proc_control_B.absxk_l = std::abs(x[2]);
  if (proc_control_B.absxk_l > proc_control_B.scale_k) {
    t = proc_control_B.scale_k / proc_control_B.absxk_l;
    y = y * t * t + 1.0;
    proc_control_B.scale_k = proc_control_B.absxk_l;
  } else {
    t = proc_control_B.absxk_l / proc_control_B.scale_k;
    y += t * t;
  }

  return proc_control_B.scale_k * std::sqrt(y);
}

void proc_control::MultiTrajectoryManager_stepImpl
  (MultiTrajectoryManager_proc_c_T *b_this, boolean_T isNew, const
   SL_Bus_proc_control_geometry_msgs_Transform trajMsg_Transforms[2000],
   uint32_T trajMsg_Transforms_SL_Info_Rece, const
   SL_Bus_proc_control_geometry_msgs_Twist trajMsg_Velocities[2000], real_T
   reset, const real_T mesuredPose[13], real_T currentPose[130], boolean_T
   *isReached, boolean_T *isTrajDone, real_T initWpt[7])
{
  int32_T h_size_idx_1;
  int32_T k;
  int32_T k_data;
  int32_T nx;
  int32_T trueCount;
  boolean_T exitg1;
  boolean_T mask1;
  boolean_T mask2;

  //         %% ================================================================ 
  //  Main execute a chaque iteration.
  if ((reset != 0.0) || (!b_this->init)) {
    MultiTrajectoryManager_resetImp(b_this);
    std::memcpy(&proc_control_B.tamp[0], &mesuredPose[0], 13U * sizeof(real_T));

    // =================================================================
    //  Fonction qui reset la trajectoire
    //  remove roll and pitch from initial condition
    proc_control_B.aSinInput = 1.0 / std::sqrt(((mesuredPose[3] * mesuredPose[3]
      + mesuredPose[4] * mesuredPose[4]) + mesuredPose[5] * mesuredPose[5]) +
      mesuredPose[6] * mesuredPose[6]);
    proc_control_B.y_idx_0 = mesuredPose[3] * proc_control_B.aSinInput;
    proc_control_B.y_idx_1 = mesuredPose[4] * proc_control_B.aSinInput;
    proc_control_B.y_idx_2 = mesuredPose[5] * proc_control_B.aSinInput;
    proc_control_B.y_idx_3 = mesuredPose[6] * proc_control_B.aSinInput;
    proc_control_B.aSinInput = (proc_control_B.y_idx_1 * proc_control_B.y_idx_3
      + proc_control_B.y_idx_0 * proc_control_B.y_idx_2) * 2.0;
    mask1 = (proc_control_B.aSinInput >= 0.99999999999999778);
    mask2 = (proc_control_B.aSinInput <= -0.99999999999999778);
    if (proc_control_B.aSinInput >= 0.99999999999999778) {
      proc_control_B.aSinInput = 1.0;
    }

    proc_control_B.c_idx_0 = proc_control_B.aSinInput;
    if (mask2) {
      proc_control_B.c_idx_0 = -1.0;
    }

    proc_control_B.aSinInput = proc_control_B.y_idx_0 * proc_control_B.y_idx_0;
    proc_control_B.c_tmp = proc_control_B.y_idx_1 * proc_control_B.y_idx_1;
    proc_control_B.c_tmp_g = proc_control_B.y_idx_2 * proc_control_B.y_idx_2;
    proc_control_B.c_tmp_p = proc_control_B.y_idx_3 * proc_control_B.y_idx_3;
    proc_control_B.c_jz[0] = rt_atan2d_snf((proc_control_B.y_idx_2 *
      proc_control_B.y_idx_3 - proc_control_B.y_idx_0 * proc_control_B.y_idx_1) *
      -2.0, ((proc_control_B.aSinInput - proc_control_B.c_tmp) -
             proc_control_B.c_tmp_g) + proc_control_B.c_tmp_p);
    proc_control_B.c_jz[1] = std::asin(proc_control_B.c_idx_0);
    proc_control_B.c_jz[2] = rt_atan2d_snf((proc_control_B.y_idx_1 *
      proc_control_B.y_idx_2 - proc_control_B.y_idx_0 * proc_control_B.y_idx_3) *
      -2.0, ((proc_control_B.aSinInput + proc_control_B.c_tmp) -
             proc_control_B.c_tmp_g) - proc_control_B.c_tmp_p);
    trueCount = 0;
    if (mask1 || mask2) {
      for (nx = 0; nx < 1; nx++) {
        trueCount++;
      }
    }

    if (trueCount - 1 >= 0) {
      proc_control_B.c_jz[0] = 0.0;
    }

    trueCount = 0;
    if (mask1 || mask2) {
      for (nx = 0; nx < 1; nx++) {
        trueCount++;
      }
    }

    h_size_idx_1 = trueCount;
    if (trueCount - 1 >= 0) {
      proc_control_B.b_x_data_l = proc_control_B.c_idx_0;
    }

    nx = trueCount - 1;
    for (k = 0; k <= nx; k++) {
      proc_control_B.y_idx_2 = proc_control_B.b_x_data_l;
      if (!std::isnan(proc_control_B.b_x_data_l)) {
        if (proc_control_B.b_x_data_l < 0.0) {
          proc_control_B.y_idx_2 = -1.0;
        } else {
          proc_control_B.y_idx_2 = (proc_control_B.b_x_data_l > 0.0);
        }
      }

      proc_control_B.b_x_data_l = proc_control_B.y_idx_2;
    }

    trueCount = 0;
    if (mask1 || mask2) {
      for (nx = 0; nx < 1; nx++) {
        trueCount++;
      }
    }

    if (trueCount - 1 >= 0) {
      proc_control_B.e_data_g = rt_atan2d_snf(proc_control_B.y_idx_1,
        proc_control_B.y_idx_0);
    }

    if (mask1 || mask2) {
      for (nx = 0; nx < 1; nx++) {
        k_data = 1;
      }
    }

    if (h_size_idx_1 == trueCount) {
      if (h_size_idx_1 - 1 >= 0) {
        proc_control_B.c_jz[2] = proc_control_B.b_x_data_l * 2.0 *
          proc_control_B.e_data_g;
      }
    } else {
      proc_control_binary_expand_op_p(proc_control_B.c_jz, &k_data,
        &proc_control_B.b_x_data_l, &h_size_idx_1, &proc_control_B.e_data_g,
        &trueCount);
    }

    //  Retransformer en quaternion
    proc_control_B.y_idx_0 = proc_control_B.c_jz[0] * 0.0 / 2.0;
    proc_control_B.aSinInput = proc_control_B.c_jz[1] * 0.0 / 2.0;
    proc_control_B.y_idx_1 = proc_control_B.c_jz[2] / 2.0;
    proc_control_B.c_jz[0] = std::cos(proc_control_B.y_idx_0);
    proc_control_B.y_idx_0 = std::sin(proc_control_B.y_idx_0);
    proc_control_B.c_jz[1] = std::cos(proc_control_B.aSinInput);
    proc_control_B.aSinInput = std::sin(proc_control_B.aSinInput);
    proc_control_B.c_jz[2] = std::cos(proc_control_B.y_idx_1);
    proc_control_B.y_idx_1 = std::sin(proc_control_B.y_idx_1);
    proc_control_B.y_idx_2 = proc_control_B.c_jz[0] * proc_control_B.c_jz[1];
    proc_control_B.y_idx_3 = proc_control_B.y_idx_0 * proc_control_B.aSinInput;
    proc_control_B.tamp[3] = proc_control_B.y_idx_2 * proc_control_B.c_jz[2] -
      proc_control_B.y_idx_3 * proc_control_B.y_idx_1;
    proc_control_B.aSinInput *= proc_control_B.c_jz[0];
    proc_control_B.tamp[4] = proc_control_B.y_idx_0 * proc_control_B.c_jz[1] *
      proc_control_B.c_jz[2] + proc_control_B.aSinInput * proc_control_B.y_idx_1;
    proc_control_B.tamp[5] = -proc_control_B.y_idx_0 * proc_control_B.c_jz[1] *
      proc_control_B.y_idx_1 + proc_control_B.aSinInput * proc_control_B.c_jz[2];
    proc_control_B.tamp[6] = proc_control_B.y_idx_2 * proc_control_B.y_idx_1 +
      proc_control_B.y_idx_3 * proc_control_B.c_jz[2];

    //  Mettre les vitesse à 0;
    for (trueCount = 0; trueCount < 6; trueCount++) {
      proc_control_B.tamp[trueCount + 7] = 0.0;
    }

    //  definir les conditions initiaux
    trueCount = 0;
    for (nx = 0; nx < 13; nx++) {
      b_this->poseBuffer[trueCount] = proc_control_B.tamp[nx];
      trueCount += 6000;
    }

    // InitCond;
    b_this->bufferCount = 1.0;
    for (trueCount = 0; trueCount < 7; trueCount++) {
      b_this->initialPose[trueCount] = proc_control_B.tamp[trueCount];
    }

    b_this->init = true;
    isNew = false;
  }

  //  Add new pose if new arrive
  //         %% ================================================================ 
  //  Fonction qui traites les nouveau poses.
  //  Si il y a des noiveau points
  if (isNew) {
    //  nombre de points recu.
    //  si il y a asser de place dans le buffer.
    if (static_cast<real_T>(trajMsg_Transforms_SL_Info_Rece) +
        b_this->bufferCount < 6000.0) {
      std::memset(&proc_control_B.tamp[0], 0, 13U * sizeof(real_T));

      //  Remplire le tampon
      nx = static_cast<int32_T>(trajMsg_Transforms_SL_Info_Rece) - 1;
      for (k = 0; k <= nx; k++) {
        proc_control_B.tamp[0] = trajMsg_Transforms[k].Translation.X;
        proc_control_B.tamp[1] = trajMsg_Transforms[k].Translation.Y;
        proc_control_B.tamp[2] = trajMsg_Transforms[k].Translation.Z;
        proc_control_B.tamp[3] = trajMsg_Transforms[k].Rotation.W;
        proc_control_B.tamp[4] = trajMsg_Transforms[k].Rotation.X;
        proc_control_B.tamp[5] = trajMsg_Transforms[k].Rotation.Y;
        proc_control_B.tamp[6] = trajMsg_Transforms[k].Rotation.Z;
        proc_control_B.tamp[7] = trajMsg_Velocities[k].Linear.X;
        proc_control_B.tamp[8] = trajMsg_Velocities[k].Linear.Y;
        proc_control_B.tamp[9] = trajMsg_Velocities[k].Linear.Z;
        proc_control_B.tamp[10] = trajMsg_Velocities[k].Angular.X;
        proc_control_B.tamp[11] = trajMsg_Velocities[k].Angular.Y;
        proc_control_B.tamp[12] = trajMsg_Velocities[k].Angular.Z;
        b_this->bufferCount++;
        k_data = static_cast<int32_T>(b_this->bufferCount);
        for (trueCount = 0; trueCount < 13; trueCount++) {
          b_this->poseBuffer[(k_data + 6000 * trueCount) - 1] =
            proc_control_B.tamp[trueCount];
        }
      }

      //  Definir le pose initial pour la prochaine trajectoire
      for (trueCount = 0; trueCount < 7; trueCount++) {
        b_this->initialPose[trueCount] = proc_control_B.tamp[trueCount];
      }
    } else {
      printf("WARNING : proc control : trajectory buffer overflow.");
      fflush(stdout);
    }
  }

  //         %% ================================================================ 
  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  proc_control_B.aSinInput = 2.0;
  mask1 = false;

  //  Vérifier s'il reste au moins mpc.p points dans les buffers
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k < 9)) {
    boolean_T exitg2;
    proc_control_B.aSinInput = static_cast<real_T>(k) + 2.0;
    for (trueCount = 0; trueCount < 13; trueCount++) {
      proc_control_B.x_n[trueCount] = (b_this->poseBuffer[(6000 * trueCount + k)
        + 1] == b_this->emptyArray[trueCount]);
    }

    mask2 = true;
    nx = 0;
    exitg2 = false;
    while ((!exitg2) && (nx < 13)) {
      if (!proc_control_B.x_n[nx]) {
        mask2 = false;
        exitg2 = true;
      } else {
        nx++;
      }
    }

    if (mask2) {
      mask1 = true;
      exitg1 = true;
    } else {
      k++;
    }
  }

  std::memset(&currentPose[0], 0, 130U * sizeof(real_T));
  k_data = static_cast<int32_T>(proc_control_B.aSinInput);
  trueCount = 0;
  nx = 0;
  for (k = 0; k < 13; k++) {
    for (h_size_idx_1 = 0; h_size_idx_1 < k_data; h_size_idx_1++) {
      currentPose[h_size_idx_1 + trueCount] = b_this->poseBuffer[h_size_idx_1 +
        nx];
    }

    trueCount += 10;
    nx += 6000;
  }

  //  S'il ya moins de mpc.p points, padder avec le dernier points
  if (mask1) {
    nx = 10 - k_data;
    for (k = 0; k <= nx; k++) {
      h_size_idx_1 = k_data + k;
      for (trueCount = 0; trueCount < 13; trueCount++) {
        proc_control_B.tamp[trueCount] = currentPose[(10 * trueCount + k_data) -
          2];
      }

      for (trueCount = 0; trueCount < 13; trueCount++) {
        currentPose[(h_size_idx_1 + 10 * trueCount) - 1] =
          proc_control_B.tamp[trueCount];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  trueCount = 0;
  for (nx = 0; nx < 13; nx++) {
    proc_control_B.x_n[nx] = !(b_this->poseBuffer[trueCount + 1] ==
      b_this->emptyArray[nx]);
    trueCount += 6000;
  }

  mask2 = true;
  nx = 0;
  exitg1 = false;
  while ((!exitg1) && (nx < 13)) {
    if (!proc_control_B.x_n[nx]) {
      mask2 = false;
      exitg1 = true;
    } else {
      nx++;
    }
  }

  if (mask2) {
    // this.prediction+1
    trueCount = 0;
    for (nx = 0; nx < 13; nx++) {
      std::memcpy(&proc_control_B.b_this_m[trueCount], &b_this->
                  poseBuffer[trueCount + 1], 5999U * sizeof(real_T));
      trueCount += 6000;
    }

    trueCount = 0;
    for (nx = 0; nx < 13; nx++) {
      proc_control_B.b_this_m[trueCount + 5999] = b_this->emptyArray[nx];
      trueCount += 6000;
    }

    std::memcpy(&b_this->poseBuffer[0], &proc_control_B.b_this_m[0], 78000U *
                sizeof(real_T));
    b_this->bufferCount--;
    b_this->done = false;
  } else {
    b_this->done = true;
  }

  //         %% ================================================================ 
  //  Fonction qui verifie le target reached
  *isReached = false;

  //  vérifier le traget reached si la trajectoire est terminé
  if (b_this->done) {
    //  calcule de l'angle entre les 2 quaternions
    proc_control_B.qRel_f[0] = ((mesuredPose[3] * b_this->poseBuffer[18000] -
      -b_this->poseBuffer[24000] * mesuredPose[4]) - -b_this->poseBuffer[30000] *
      mesuredPose[5]) - -b_this->poseBuffer[36000] * mesuredPose[6];
    proc_control_B.qRel_f[1] = (mesuredPose[4] * b_this->poseBuffer[18000] +
      mesuredPose[3] * -b_this->poseBuffer[24000]) + (-b_this->poseBuffer[30000]
      * mesuredPose[6] - -b_this->poseBuffer[36000] * mesuredPose[5]);
    proc_control_B.qRel_f[2] = (mesuredPose[5] * b_this->poseBuffer[18000] +
      mesuredPose[3] * -b_this->poseBuffer[30000]) + (-b_this->poseBuffer[36000]
      * mesuredPose[4] - -b_this->poseBuffer[24000] * mesuredPose[6]);
    proc_control_B.qRel_f[3] = (mesuredPose[6] * b_this->poseBuffer[18000] +
      mesuredPose[3] * -b_this->poseBuffer[36000]) + (-b_this->poseBuffer[24000]
      * mesuredPose[5] - -b_this->poseBuffer[30000] * mesuredPose[4]);

    //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
    proc_control_B.c_jz[0] = b_this->poseBuffer[0] - mesuredPose[0];
    proc_control_B.c_jz[1] = b_this->poseBuffer[6000] - mesuredPose[1];
    proc_control_B.c_jz[2] = b_this->poseBuffer[12000] - mesuredPose[2];
    if ((proc_control_norm_p(proc_control_B.c_jz) < 0.2) && (2.0 * rt_atan2d_snf
         (proc_control_norm_p(&proc_control_B.qRel_f[1]), proc_control_B.qRel_f
          [0]) < 0.1)) {
      b_this->targetReachedCount++;

      //  si le sub est dans la zone de convergence depuis le temps demander
      *isReached = (b_this->targetReachedCount * 0.1 >= 3.0);
    } else {
      //  Remettre le compteur a 0 si le sub n'est pas dans la zone
      b_this->targetReachedCount = 0.0;
    }
  } else {
    b_this->targetReachedCount = 0.0;
  }

  *isTrajDone = b_this->done;
  for (trueCount = 0; trueCount < 7; trueCount++) {
    initWpt[trueCount] = b_this->initialPose[trueCount];
  }
}

void proc_control::proc__quaternion_parenReference(real_T obj_a, real_T obj_b,
  real_T obj_c, real_T obj_d, boolean_T varargin_1, real_T o_a_data[], int32_T
  o_a_size[2], real_T o_b_data[], int32_T o_b_size[2], real_T o_c_data[],
  int32_T o_c_size[2], real_T o_d_data[], int32_T o_d_size[2])
{
  int32_T b_i;
  int32_T end;
  int32_T i;
  int32_T trueCount;
  end = 0;
  trueCount = 0;
  if (varargin_1) {
    for (i = 0; i < 1; i++) {
      trueCount++;
    }
  }

  i = 0;
  if (varargin_1) {
    for (b_i = 0; b_i < 1; b_i++) {
      end++;
      i++;
    }
  }

  b_i = 0;
  if (varargin_1) {
    for (int32_T d_i{0}; d_i < 1; d_i++) {
      b_i++;
    }
  }

  o_a_size[0] = 1;
  o_a_size[1] = trueCount;
  trueCount--;
  for (int32_T d_i{0}; d_i <= trueCount; d_i++) {
    o_a_data[d_i] = obj_a;
  }

  o_b_size[0] = 1;
  o_b_size[1] = end;
  trueCount = end - 1;
  for (int32_T d_i{0}; d_i <= trueCount; d_i++) {
    o_b_data[d_i] = obj_b;
  }

  o_c_size[0] = 1;
  o_c_size[1] = i;
  trueCount = i - 1;
  for (int32_T d_i{0}; d_i <= trueCount; d_i++) {
    o_c_data[d_i] = obj_c;
  }

  o_d_size[0] = 1;
  o_d_size[1] = b_i;
  trueCount = b_i - 1;
  for (int32_T d_i{0}; d_i <= trueCount; d_i++) {
    o_d_data[d_i] = obj_d;
  }
}

void proc_control::proc_con_quaternion_parenAssign(real_T obj_a, real_T obj_b,
  real_T obj_c, real_T obj_d, const real_T rhs_a_data[], const int32_T
  rhs_a_size[2], const real_T rhs_b_data[], const int32_T rhs_b_size[2], const
  real_T rhs_c_data[], const int32_T rhs_c_size[2], const real_T rhs_d_data[],
  const int32_T rhs_d_size[2], real_T *o_a, real_T *o_b, real_T *o_c, real_T
  *o_d)
{
  *o_a = obj_a;
  if (rhs_a_size[1] - 1 >= 0) {
    *o_a = rhs_a_data[0];
  }

  *o_b = obj_b;
  if (rhs_b_size[1] - 1 >= 0) {
    *o_b = rhs_b_data[0];
  }

  *o_c = obj_c;
  if (rhs_c_size[1] - 1 >= 0) {
    *o_c = rhs_c_data[0];
  }

  *o_d = obj_d;
  if (rhs_d_size[1] - 1 >= 0) {
    *o_d = rhs_d_data[0];
  }
}

void proc_control::proc_contr_quaternionBase_slerp(real_T q1_a, real_T q1_b,
  real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T q2_c, real_T q2_d,
  real_T *qo_a, real_T *qo_b, real_T *qo_c, real_T *qo_d)
{
  int32_T assign_temp_b_size[2];
  int32_T assign_temp_c_size[2];
  int32_T assign_temp_d_size[2];
  proc_control_B.n_b = std::sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) +
    q1_d * q1_d);
  proc_control_B.od_tmp_l = q1_a / proc_control_B.n_b;
  proc_control_B.dp_l = q1_b / proc_control_B.n_b;
  proc_control_B.b_q_c_i = q1_c / proc_control_B.n_b;
  proc_control_B.theta0_p = q1_d / proc_control_B.n_b;
  proc_control_B.oa_g = ((proc_control_B.od_tmp_l - proc_control_B.dp_l * 0.0) -
    proc_control_B.b_q_c_i * 0.0) - proc_control_B.theta0_p * 0.0;
  proc_control_B.ob_o = ((proc_control_B.od_tmp_l * 0.0 + proc_control_B.dp_l) +
    proc_control_B.b_q_c_i * 0.0) - proc_control_B.theta0_p * 0.0;
  proc_control_B.oc_b = ((proc_control_B.od_tmp_l * 0.0 - proc_control_B.dp_l *
    0.0) + proc_control_B.b_q_c_i) + proc_control_B.theta0_p * 0.0;
  proc_control_B.od_e = ((proc_control_B.od_tmp_l * 0.0 + proc_control_B.dp_l *
    0.0) - proc_control_B.b_q_c_i * 0.0) + proc_control_B.theta0_p;
  proc_control_B.n_b = std::sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) +
    q2_d * q2_d);
  proc_control_B.od_tmp_l = q2_a / proc_control_B.n_b;
  proc_control_B.dp_l = q2_b / proc_control_B.n_b;
  proc_control_B.b_q_c_i = q2_c / proc_control_B.n_b;
  proc_control_B.theta0_p = q2_d / proc_control_B.n_b;
  proc_control_B.oa_tmp_d = ((proc_control_B.od_tmp_l - proc_control_B.dp_l *
    0.0) - proc_control_B.b_q_c_i * 0.0) - proc_control_B.theta0_p * 0.0;
  proc_control_B.ob_tmp_o = ((proc_control_B.od_tmp_l * 0.0 +
    proc_control_B.dp_l) + proc_control_B.b_q_c_i * 0.0) -
    proc_control_B.theta0_p * 0.0;
  proc_control_B.n_b = ((proc_control_B.od_tmp_l * 0.0 - proc_control_B.dp_l *
    0.0) + proc_control_B.b_q_c_i) + proc_control_B.theta0_p * 0.0;
  proc_control_B.od_tmp_l = ((proc_control_B.od_tmp_l * 0.0 +
    proc_control_B.dp_l * 0.0) - proc_control_B.b_q_c_i * 0.0) +
    proc_control_B.theta0_p;
  proc_control_B.dp_l = ((proc_control_B.oa_g * proc_control_B.oa_tmp_d +
    proc_control_B.ob_o * proc_control_B.ob_tmp_o) + proc_control_B.oc_b *
    proc_control_B.n_b) + proc_control_B.od_e * proc_control_B.od_tmp_l;
  if (proc_control_B.dp_l < 0.0) {
    proc_control_B.oa_tmp_d = -proc_control_B.oa_tmp_d;
    proc_control_B.ob_tmp_o = -proc_control_B.ob_tmp_o;
    proc_control_B.n_b = -proc_control_B.n_b;
    proc_control_B.od_tmp_l = -proc_control_B.od_tmp_l;
    proc_control_B.dp_l = -proc_control_B.dp_l;
  }

  if (proc_control_B.dp_l > 1.0) {
    proc_control_B.dp_l = 1.0;
  }

  proc_control_B.theta0_p = std::acos(proc_control_B.dp_l);
  proc_control_B.b_q_c_i = std::sin(proc_control_B.theta0_p);
  proc_control_B.dp_l = 1.0 / proc_control_B.b_q_c_i;
  proc_control_B.theta0_p = std::sin(0.0 * proc_control_B.theta0_p);
  *qo_a = (proc_control_B.theta0_p * proc_control_B.oa_g +
           proc_control_B.b_q_c_i * proc_control_B.oa_tmp_d) *
    proc_control_B.dp_l;
  *qo_b = (proc_control_B.theta0_p * proc_control_B.ob_o +
           proc_control_B.b_q_c_i * proc_control_B.ob_tmp_o) *
    proc_control_B.dp_l;
  *qo_c = (proc_control_B.theta0_p * proc_control_B.oc_b +
           proc_control_B.b_q_c_i * proc_control_B.n_b) * proc_control_B.dp_l;
  *qo_d = (proc_control_B.theta0_p * proc_control_B.od_e +
           proc_control_B.b_q_c_i * proc_control_B.od_tmp_l) *
    proc_control_B.dp_l;
  if (std::isinf(proc_control_B.dp_l)) {
    proc__quaternion_parenReference(q1_a, q1_b, q1_c, q1_d, true,
      &proc_control_B.assign_temp_a_data_e, proc_control_B.assign_temp_a_size_d,
      &proc_control_B.assign_temp_b_data_l, assign_temp_b_size,
      &proc_control_B.assign_temp_c_data_c, assign_temp_c_size,
      &proc_control_B.assign_temp_d_data_e, assign_temp_d_size);
    proc_con_quaternion_parenAssign(*qo_a, *qo_b, *qo_c, *qo_d,
      &proc_control_B.assign_temp_a_data_e, proc_control_B.assign_temp_a_size_d,
      &proc_control_B.assign_temp_b_data_l, assign_temp_b_size,
      &proc_control_B.assign_temp_c_data_c, assign_temp_c_size,
      &proc_control_B.assign_temp_d_data_e, assign_temp_d_size, qo_a, qo_b, qo_c,
      qo_d);
  }

  proc_control_B.n_b = std::sqrt(((*qo_a * *qo_a + *qo_b * *qo_b) + *qo_c *
    *qo_c) + *qo_d * *qo_d);
  *qo_a /= proc_control_B.n_b;
  *qo_b /= proc_control_B.n_b;
  *qo_c /= proc_control_B.n_b;
  *qo_d /= proc_control_B.n_b;
}

void proc_control::proc_con_quaternionBase_slerp_p(real_T q1_a, real_T q1_b,
  real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T q2_c, real_T q2_d,
  real_T t, real_T *qo_a, real_T *qo_b, real_T *qo_c, real_T *qo_d)
{
  int32_T assign_temp_b_size[2];
  int32_T assign_temp_c_size[2];
  int32_T assign_temp_d_size[2];
  proc_control_B.n_p = std::sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) +
    q1_d * q1_d);
  proc_control_B.od_tmp = q1_a / proc_control_B.n_p;
  proc_control_B.dp = q1_b / proc_control_B.n_p;
  proc_control_B.b_q_c = q1_c / proc_control_B.n_p;
  proc_control_B.theta0_d = q1_d / proc_control_B.n_p;
  proc_control_B.oa_fp = ((proc_control_B.od_tmp - proc_control_B.dp * 0.0) -
    proc_control_B.b_q_c * 0.0) - proc_control_B.theta0_d * 0.0;
  proc_control_B.ob_g = ((proc_control_B.od_tmp * 0.0 + proc_control_B.dp) +
    proc_control_B.b_q_c * 0.0) - proc_control_B.theta0_d * 0.0;
  proc_control_B.oc_d = ((proc_control_B.od_tmp * 0.0 - proc_control_B.dp * 0.0)
    + proc_control_B.b_q_c) + proc_control_B.theta0_d * 0.0;
  proc_control_B.od_h = ((proc_control_B.od_tmp * 0.0 + proc_control_B.dp * 0.0)
    - proc_control_B.b_q_c * 0.0) + proc_control_B.theta0_d;
  proc_control_B.n_p = std::sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) +
    q2_d * q2_d);
  proc_control_B.od_tmp = q2_a / proc_control_B.n_p;
  proc_control_B.dp = q2_b / proc_control_B.n_p;
  proc_control_B.b_q_c = q2_c / proc_control_B.n_p;
  proc_control_B.theta0_d = q2_d / proc_control_B.n_p;
  proc_control_B.oa_tmp_c = ((proc_control_B.od_tmp - proc_control_B.dp * 0.0) -
    proc_control_B.b_q_c * 0.0) - proc_control_B.theta0_d * 0.0;
  proc_control_B.ob_tmp = ((proc_control_B.od_tmp * 0.0 + proc_control_B.dp) +
    proc_control_B.b_q_c * 0.0) - proc_control_B.theta0_d * 0.0;
  proc_control_B.n_p = ((proc_control_B.od_tmp * 0.0 - proc_control_B.dp * 0.0)
                        + proc_control_B.b_q_c) + proc_control_B.theta0_d * 0.0;
  proc_control_B.od_tmp = ((proc_control_B.od_tmp * 0.0 + proc_control_B.dp *
    0.0) - proc_control_B.b_q_c * 0.0) + proc_control_B.theta0_d;
  proc_control_B.dp = ((proc_control_B.oa_fp * proc_control_B.oa_tmp_c +
                        proc_control_B.ob_g * proc_control_B.ob_tmp) +
                       proc_control_B.oc_d * proc_control_B.n_p) +
    proc_control_B.od_h * proc_control_B.od_tmp;
  if (proc_control_B.dp < 0.0) {
    proc_control_B.oa_tmp_c = -proc_control_B.oa_tmp_c;
    proc_control_B.ob_tmp = -proc_control_B.ob_tmp;
    proc_control_B.n_p = -proc_control_B.n_p;
    proc_control_B.od_tmp = -proc_control_B.od_tmp;
    proc_control_B.dp = -proc_control_B.dp;
  }

  if (proc_control_B.dp > 1.0) {
    proc_control_B.dp = 1.0;
  }

  proc_control_B.theta0_d = std::acos(proc_control_B.dp);
  proc_control_B.dp = 1.0 / std::sin(proc_control_B.theta0_d);
  proc_control_B.b_q_c = std::sin((1.0 - t) * proc_control_B.theta0_d);
  proc_control_B.theta0_d = std::sin(t * proc_control_B.theta0_d);
  *qo_a = (proc_control_B.b_q_c * proc_control_B.oa_fp + proc_control_B.theta0_d
           * proc_control_B.oa_tmp_c) * proc_control_B.dp;
  *qo_b = (proc_control_B.b_q_c * proc_control_B.ob_g + proc_control_B.theta0_d *
           proc_control_B.ob_tmp) * proc_control_B.dp;
  *qo_c = (proc_control_B.b_q_c * proc_control_B.oc_d + proc_control_B.theta0_d *
           proc_control_B.n_p) * proc_control_B.dp;
  *qo_d = (proc_control_B.b_q_c * proc_control_B.od_h + proc_control_B.theta0_d *
           proc_control_B.od_tmp) * proc_control_B.dp;
  if (std::isinf(proc_control_B.dp)) {
    proc__quaternion_parenReference(q1_a, q1_b, q1_c, q1_d, true,
      &proc_control_B.assign_temp_a_data, proc_control_B.assign_temp_a_size,
      &proc_control_B.assign_temp_b_data, assign_temp_b_size,
      &proc_control_B.assign_temp_c_data_i, assign_temp_c_size,
      &proc_control_B.assign_temp_d_data_m, assign_temp_d_size);
    proc_con_quaternion_parenAssign(*qo_a, *qo_b, *qo_c, *qo_d,
      &proc_control_B.assign_temp_a_data, proc_control_B.assign_temp_a_size,
      &proc_control_B.assign_temp_b_data, assign_temp_b_size,
      &proc_control_B.assign_temp_c_data_i, assign_temp_c_size,
      &proc_control_B.assign_temp_d_data_m, assign_temp_d_size, qo_a, qo_b, qo_c,
      qo_d);
  }

  proc_control_B.n_p = std::sqrt(((*qo_a * *qo_a + *qo_b * *qo_b) + *qo_c *
    *qo_c) + *qo_d * *qo_d);
  *qo_a /= proc_control_B.n_p;
  *qo_b /= proc_control_B.n_p;
  *qo_c /= proc_control_B.n_p;
  *qo_d /= proc_control_B.n_p;
}

void proc_control::proc_cont_binary_expand_op_pr35(real_T in1_data[], int32_T
  in1_size[2], real_T in2, int32_T in3)
{
  real_T in1_data_0;
  int32_T in1_size_idx_1;
  int32_T loop_ub;
  int32_T stride_0_1;
  in1_size_idx_1 = in3 == 1 ? in1_size[1] : in3;
  stride_0_1 = (in1_size[1] != 1);
  loop_ub = in3 == 1 ? in1_size[1] : in3;
  for (int32_T i{0}; i < loop_ub; i++) {
    in1_data_0 = in1_data[i * stride_0_1] / in2;
  }

  in1_size[0] = 1;
  in1_size[1] = in1_size_idx_1;
  for (int32_T i{0}; i < in1_size_idx_1; i++) {
    in1_data[0] = in1_data_0;
  }
}

void proc_control::proc_contr_binary_expand_op_pr3(real_T in1_data[], int32_T
  in1_size[2], real_T in2, int32_T in3, const real_T in4_data[], const int32_T
  in4_size[2])
{
  int32_T loop_ub;
  int32_T stride_1_1;
  in1_size[0] = 1;
  in1_size[1] = in4_size[1] == 1 ? in3 : in4_size[1];
  stride_1_1 = (in4_size[1] != 1);
  loop_ub = in4_size[1] == 1 ? in3 : in4_size[1];
  for (int32_T i{0}; i < loop_ub; i++) {
    in1_data[i] = in4_data[i * stride_1_1] * in2;
  }
}

void proc_control::proc_contro_binary_expand_op_pr(real_T in1_data[], int32_T
  in1_size[2], real_T in2, int32_T in3)
{
  real_T in2_data;
  int32_T in2_size_idx_1;
  int32_T loop_ub;
  int32_T stride_1_1;
  in2_size_idx_1 = in1_size[1] == 1 ? in3 : in1_size[1];
  stride_1_1 = (in1_size[1] != 1);
  loop_ub = in1_size[1] == 1 ? in3 : in1_size[1];
  for (int32_T i{0}; i < loop_ub; i++) {
    in2_data = in1_data[i * stride_1_1] * in2;
  }

  in1_size[0] = 1;
  in1_size[1] = in2_size_idx_1;
  for (int32_T i{0}; i < in2_size_idx_1; i++) {
    in1_data[0] = in2_data;
  }
}

void proc_control::proc_control_quaternionBase_log(real_T q_a, real_T q_b,
  real_T q_c, real_T q_d, real_T *b_q_a, real_T *b_q_b, real_T *b_q_c, real_T
  *b_q_d)
{
  int32_T b_i;
  int32_T nx;
  int32_T trueCount;
  proc_control_B.vnorm = std::sqrt((q_b * q_b + q_c * q_c) + q_d * q_d);
  proc_control_B.qnorm = std::sqrt(q_a * q_a + proc_control_B.vnorm *
    proc_control_B.vnorm);
  trueCount = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      trueCount++;
    }
  }

  b_i = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (nx = 0; nx < 1; nx++) {
      b_i++;
    }
  }

  proc_control_B.z_size[0] = 1;
  proc_control_B.z_size[1] = b_i;
  for (nx = 0; nx < b_i; nx++) {
    proc_control_B.z_data = q_a / proc_control_B.qnorm;
  }

  proc_control_B.vscale_size[0] = 1;
  proc_control_B.vscale_size[1] = b_i;
  if (b_i - 1 >= 0) {
    proc_control_B.vscale_data = proc_control_B.z_data;
  }

  nx = b_i - 1;
  for (b_i = 0; b_i <= nx; b_i++) {
    proc_control_B.vscale_data = std::acos(proc_control_B.vscale_data);
  }

  if (proc_control_B.z_size[1] == trueCount) {
    trueCount = proc_control_B.z_size[1] - 1;
    proc_control_B.vscale_size[0] = 1;
    for (nx = 0; nx <= trueCount; nx++) {
      proc_control_B.vscale_data /= proc_control_B.vnorm;
    }
  } else {
    proc_cont_binary_expand_op_pr35(&proc_control_B.vscale_data,
      proc_control_B.vscale_size, proc_control_B.vnorm, trueCount);
  }

  nx = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      nx++;
    }
  }

  if (nx == proc_control_B.vscale_size[1]) {
    proc_control_B.z_size[0] = 1;
    proc_control_B.z_size[1] = nx;
    if (proc_control_B.vscale_size[1] - 1 >= 0) {
      proc_control_B.z_data = q_b * proc_control_B.vscale_data;
    }
  } else {
    proc_contr_binary_expand_op_pr3(&proc_control_B.z_data,
      proc_control_B.z_size, q_b, nx, &proc_control_B.vscale_data,
      proc_control_B.vscale_size);
  }

  *b_q_d = q_b;
  if (proc_control_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = proc_control_B.z_data;
    }
  }

  *b_q_b = *b_q_d;
  if (!(proc_control_B.vnorm != 0.0)) {
    *b_q_b = 0.0;
  }

  nx = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      nx++;
    }
  }

  if (nx == proc_control_B.vscale_size[1]) {
    if (proc_control_B.vscale_size[1] - 1 >= 0) {
      proc_control_B.z_data = q_c * proc_control_B.vscale_data;
    }
  } else {
    proc_contr_binary_expand_op_pr3(&proc_control_B.z_data,
      proc_control_B.z_size, q_c, nx, &proc_control_B.vscale_data,
      proc_control_B.vscale_size);
  }

  *b_q_d = q_c;
  if (proc_control_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = proc_control_B.z_data;
    }
  }

  *b_q_c = *b_q_d;
  if (!(proc_control_B.vnorm != 0.0)) {
    *b_q_c = 0.0;
  }

  nx = 0;
  if (proc_control_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      nx++;
    }
  }

  if (nx == proc_control_B.vscale_size[1]) {
    trueCount = proc_control_B.vscale_size[1] - 1;
    for (nx = 0; nx <= trueCount; nx++) {
      proc_control_B.vscale_data *= q_d;
    }
  } else {
    proc_contro_binary_expand_op_pr(&proc_control_B.vscale_data,
      proc_control_B.vscale_size, q_d, nx);
  }

  *b_q_d = q_d;
  if (proc_control_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = proc_control_B.vscale_data;
    }
  }

  if (!(proc_control_B.vnorm != 0.0)) {
    *b_q_d = 0.0;
  }

  *b_q_a = std::log(proc_control_B.qnorm);
}

quaternion_proc_control_T proc_control::proc_computeFirstQuatDerivative(real_T
  pn_a, real_T pn_b, real_T pn_c, real_T pn_d, real_T qn_a, real_T qn_b, real_T
  qn_c, real_T qn_d, real_T sd, real_T qinterp_a, real_T qinterp_b, real_T
  qinterp_c, real_T qinterp_d)
{
  quaternion_proc_control_T qdot;
  proc_control_quaternionBase_log(((pn_a * qn_a - -pn_b * qn_b) - -pn_c * qn_c)
    - -pn_d * qn_d, ((pn_a * qn_b + -pn_b * qn_a) + -pn_c * qn_d) - -pn_d * qn_c,
    ((pn_a * qn_c - -pn_b * qn_d) + -pn_c * qn_a) + -pn_d * qn_b, ((pn_a * qn_d
    + -pn_b * qn_c) - -pn_c * qn_b) + -pn_d * qn_a, &proc_control_B.y_a,
    &proc_control_B.y_b, &proc_control_B.y_c, &proc_control_B.y_d_c);
  qdot.a = (((qinterp_a * proc_control_B.y_a - qinterp_b * proc_control_B.y_b) -
             qinterp_c * proc_control_B.y_c) - qinterp_d * proc_control_B.y_d_c)
    * sd;
  qdot.b = (((qinterp_a * proc_control_B.y_b + qinterp_b * proc_control_B.y_a) +
             qinterp_c * proc_control_B.y_d_c) - qinterp_d * proc_control_B.y_c)
    * sd;
  qdot.c = (((qinterp_a * proc_control_B.y_c - qinterp_b * proc_control_B.y_d_c)
             + qinterp_c * proc_control_B.y_a) + qinterp_d * proc_control_B.y_b)
    * sd;
  qdot.d = (((qinterp_a * proc_control_B.y_d_c + qinterp_b * proc_control_B.y_c)
             - qinterp_c * proc_control_B.y_b) + qinterp_d * proc_control_B.y_a)
    * sd;
  return qdot;
}

void proc_control::proc_control_ppval_p(const real_T pp_breaks[4], const real_T
  pp_coefs[36], real_T x, real_T v[3])
{
  if (std::isnan(x)) {
    v[0] = x;
    v[1] = x;
    v[2] = x;
  } else {
    real_T xloc;
    int32_T high_i;
    int32_T ic0;
    int32_T low_i;
    int32_T low_ip1;
    low_i = 0;
    low_ip1 = 1;
    high_i = 4;
    while (high_i > low_ip1 + 1) {
      ic0 = ((low_i + high_i) + 1) >> 1;
      if (x >= pp_breaks[ic0 - 1]) {
        low_i = ic0 - 1;
        low_ip1 = ic0;
      } else {
        high_i = ic0;
      }
    }

    low_ip1 = low_i * 3;
    xloc = x - pp_breaks[low_i];
    v[0] = pp_coefs[low_ip1];
    v[1] = pp_coefs[low_ip1 + 1];
    v[2] = pp_coefs[low_ip1 + 2];
    for (high_i = 0; high_i < 3; high_i++) {
      ic0 = ((high_i + 1) * 9 + low_ip1) - 1;
      v[0] = xloc * v[0] + pp_coefs[ic0 + 1];
      v[1] = xloc * v[1] + pp_coefs[ic0 + 2];
      v[2] = xloc * v[2] + pp_coefs[ic0 + 3];
    }
  }
}

void proc_control::proc_TrajectoryManager_stepImpl
  (TrajectoryManager_proc_contro_T *b_this, real_T reset, const real_T poses[13],
   const real_T target[7], const real_T x0[7], const real_T mesuredPose[13],
   real_T currentPose[130], boolean_T *isReached)
{
  int32_T b_index;
  int32_T b_index_0;
  int32_T b_itilerow;
  int32_T b_jcol;
  int32_T ibmat;
  boolean_T exitg1;
  boolean_T isempty;
  boolean_T y;

  //  Main execute a chaque iteration.
  //  Implement algorithm. Calculate y as a function of input u and
  if (reset == 1.0) {
    b_this->init = 0.0;
  }

  if (b_this->init == 0.0) {
    //  Conditions Initiales
    for (ibmat = 0; ibmat < 7; ibmat++) {
      proc_control_B.a_n[ibmat] = x0[ibmat];
    }

    proc_control_B.a_n[7] = 0.0;
    proc_control_B.a_n[8] = 0.0;
    proc_control_B.a_n[9] = 0.0;
    proc_control_B.a_n[10] = 0.0;
    proc_control_B.a_n[11] = 0.0;
    proc_control_B.a_n[12] = 0.0;
    for (b_jcol = 0; b_jcol < 13; b_jcol++) {
      ibmat = b_jcol * 10;
      for (b_itilerow = 0; b_itilerow < 10; b_itilerow++) {
        proc_control_B.b[ibmat + b_itilerow] = proc_control_B.a_n[b_jcol];
        b_this->poseBuffer[((b_itilerow + 1) + 6001 * b_jcol) - 1] =
          proc_control_B.b[10 * b_jcol + b_itilerow];
      }
    }

    // InitCond;
    b_this->bufferCount = 1.0;
    b_this->init = 1.0;
  }

  // this.BufferReset(reset,mp);
  //  Fonction qui traites les nouveau poses.
  //  Insertion des nouveaux points.
  // if new == this.generationNumber %new>
  if (b_this->bufferCount + 1.0 < 6001.0) {
    ibmat = static_cast<int32_T>(b_this->bufferCount + 1.0);
    for (b_jcol = 0; b_jcol < 13; b_jcol++) {
      b_this->poseBuffer[(ibmat + 6001 * b_jcol) - 1] = poses[b_jcol];
    }

    // this.poseBuffer(this.bufferCount:count + this.bufferCount,:) = pose(1:count+1,:) 
    b_this->bufferCount++;
    b_this->generationNumber++;
  } else {
    printf("%s\n", "Problem");
    fflush(stdout);
  }

  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  b_index = 2;
  isempty = false;
  b_itilerow = 0;
  exitg1 = false;
  while ((!exitg1) && (b_itilerow < 9)) {
    boolean_T exitg2;
    b_index = b_itilerow + 2;
    for (ibmat = 0; ibmat < 13; ibmat++) {
      proc_control_B.x_e[ibmat] = (b_this->poseBuffer[(6001 * ibmat + b_itilerow)
        + 1] == b_this->emptyArray[ibmat]);
    }

    y = true;
    b_jcol = 0;
    exitg2 = false;
    while ((!exitg2) && (b_jcol < 13)) {
      if (!proc_control_B.x_e[b_jcol]) {
        y = false;
        exitg2 = true;
      } else {
        b_jcol++;
      }
    }

    if (y) {
      isempty = true;
      exitg1 = true;
    } else {
      b_itilerow++;
    }
  }

  std::memset(&currentPose[0], 0, 130U * sizeof(real_T));
  ibmat = 0;
  b_jcol = 0;
  for (b_itilerow = 0; b_itilerow < 13; b_itilerow++) {
    for (b_index_0 = 0; b_index_0 < b_index; b_index_0++) {
      currentPose[b_index_0 + ibmat] = b_this->poseBuffer[b_index_0 + b_jcol];
    }

    ibmat += 10;
    b_jcol += 6001;
  }

  if (isempty) {
    b_itilerow = 10 - b_index;
    for (b_jcol = 0; b_jcol <= b_itilerow; b_jcol++) {
      b_index_0 = b_index + b_jcol;
      for (ibmat = 0; ibmat < 13; ibmat++) {
        proc_control_B.a_n[ibmat] = currentPose[(10 * ibmat + b_index) - 2];
      }

      for (ibmat = 0; ibmat < 13; ibmat++) {
        currentPose[(b_index_0 + 10 * ibmat) - 1] = proc_control_B.a_n[ibmat];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  ibmat = 0;
  for (b_jcol = 0; b_jcol < 13; b_jcol++) {
    proc_control_B.x_e[b_jcol] = !(b_this->poseBuffer[ibmat + 10] ==
      b_this->emptyArray[b_jcol]);
    ibmat += 6001;
  }

  y = true;
  b_jcol = 0;
  exitg1 = false;
  while ((!exitg1) && (b_jcol < 13)) {
    if (!proc_control_B.x_e[b_jcol]) {
      y = false;
      exitg1 = true;
    } else {
      b_jcol++;
    }
  }

  if (y) {
    ibmat = 0;
    for (b_jcol = 0; b_jcol < 13; b_jcol++) {
      std::memcpy(&proc_control_B.b_this[ibmat], &b_this->poseBuffer[ibmat + 1],
                  6000U * sizeof(real_T));
      ibmat += 6001;
    }

    ibmat = 0;
    for (b_jcol = 0; b_jcol < 13; b_jcol++) {
      proc_control_B.b_this[ibmat + 6000] = b_this->emptyArray[b_jcol];
      ibmat += 6001;
    }

    std::memcpy(&b_this->poseBuffer[0], &proc_control_B.b_this[0], 78013U *
                sizeof(real_T));
    b_this->bufferCount--;
    b_this->done = false;
  } else {
    b_this->done = true;
  }

  //  Fonction qui verifie le target reached
  //  vérifier si la trajectoire est fini
  for (b_jcol = 0; b_jcol < 7; b_jcol++) {
    proc_control_B.x_i[b_jcol] = poses[b_jcol] - target[b_jcol];
    proc_control_B.y_l[b_jcol] = std::abs(proc_control_B.x_i[b_jcol]);
  }

  b_this->done = true;
  b_jcol = 0;
  exitg1 = false;
  while ((!exitg1) && (b_jcol < 7)) {
    if (!(proc_control_B.y_l[b_jcol] < 0.001)) {
      b_this->done = false;
      exitg1 = true;
    } else {
      b_jcol++;
    }
  }

  *isReached = false;

  //  vérifier le traget reached si la trajectoire est terminé
  if (b_this->done) {
    //  calcule de l'erreur de langle en 3D avec le quaternion
    proc_control_B.qRel[0] = ((target[3] * mesuredPose[3] - -target[4] *
      mesuredPose[4]) - -target[5] * mesuredPose[5]) - -target[6] * mesuredPose
      [6];
    proc_control_B.qRel[1] = (target[3] * mesuredPose[4] + -target[4] *
      mesuredPose[3]) + (-target[5] * mesuredPose[6] - -target[6] * mesuredPose
                         [5]);
    proc_control_B.qRel[2] = (target[3] * mesuredPose[5] + -target[5] *
      mesuredPose[3]) + (-target[6] * mesuredPose[4] - -target[4] * mesuredPose
                         [6]);
    proc_control_B.qRel[3] = (target[3] * mesuredPose[6] + mesuredPose[3] *
      -target[6]) + (-target[4] * mesuredPose[5] - -target[5] * mesuredPose[4]);

    //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
    proc_control_B.target[0] = target[0] - mesuredPose[0];
    proc_control_B.target[1] = target[1] - mesuredPose[1];
    proc_control_B.target[2] = target[2] - mesuredPose[2];
    if ((proc_control_norm_p(proc_control_B.target) < b_this->linearConvergence)
        && (2.0 * rt_atan2d_snf(proc_control_norm_p(&proc_control_B.qRel[1]),
          proc_control_B.qRel[0]) < b_this->quaternionConvergence)) {
      b_this->targetReachedCount++;
      *isReached = (b_this->targetReachedCount * 0.1 >= b_this->TargetThreshold);
    } else {
      b_this->targetReachedCount = 0.0;
    }
  }
}

void proc_control::proc_contr_mpcManager_resetImpl(mpcManager_proc_control_T
  *b_this)
{
  static const real_T tmp[13]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0, 45.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T tmp_0[8]{ 0.4, 0.4, 0.4, 0.4, 0.5, 0.5, 0.5, 0.5 };

  //         %% Fonction Reset
  //  Initialize discrete state
  b_this->init = 0.0;
  std::memset(&b_this->currentFaultCount[0], 0, sizeof(real_T) << 3U);
  for (int32_T i{0}; i < 8; i++) {
    b_this->isThrusterFault[i] = false;
  }

  // initialiser les gains debug
  std::memcpy(&b_this->rosOV[0], &tmp[0], 13U * sizeof(real_T));
  for (int32_T i{0}; i < 8; i++) {
    b_this->rosMV[i] = 0.2;
    b_this->rosMVR[i] = tmp_0[i];
  }
}

int32_T proc_control::proc_cont_combineVectorElements(const boolean_T x[3])
{
  return (x[0] + x[1]) + x[2];
}

void proc_control::proc_control_eml_find(const boolean_T x[3], int32_T i_data[],
  int32_T *i_size)
{
  int32_T b_ii;
  int32_T idx;
  boolean_T exitg1;
  idx = 0;
  b_ii = 1;
  exitg1 = false;
  while ((!exitg1) && (b_ii - 1 < 3)) {
    if (x[b_ii - 1]) {
      idx++;
      i_data[idx - 1] = b_ii;
      if (idx >= 3) {
        exitg1 = true;
      } else {
        b_ii++;
      }
    } else {
      b_ii++;
    }
  }

  if (idx < 1) {
    idx = 0;
  }

  *i_size = idx;
}

real_T proc_control::proc_control_sum(const real_T x_data[], const int32_T
  *x_size)
{
  real_T y;
  int32_T vlen;
  vlen = *x_size;
  if (*x_size == 0) {
    y = 0.0;
  } else {
    y = x_data[0];
    for (int32_T k{2}; k <= vlen; k++) {
      y += x_data[k - 1];
    }
  }

  return y;
}

void proc_control::proc_co_mpcManager_getMpcWeigth(const
  mpcManager_proc_control_T *b_this, uint8_T mode, real_T OV[13], real_T MV[8],
  real_T MVR[8])
{
  static const real_T tmp_1[90]{ 10.0, 11.0, 19.0, 30.0, 30.0, 0.0, 30.0, 30.0,
    0.0, 30.0, 30.0, 0.0, 45.0, 45.0, 0.0, 45.0, 45.0, 0.0, 45.0, 45.0, 0.0,
    45.0, 45.0, 0.0, 0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0, 0.0,
    20.0, 0.0, 0.0, 20.0, 0.0, 0.0, 20.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.2, 0.0, 0.0,
    0.2, 0.0, 0.0, 0.2, 0.0, 0.0, 0.2, 0.0, 0.0, 0.2, 0.0, 0.0, 0.2, 0.0, 0.0,
    0.2, 0.4, 0.4, 0.1, 0.4, 0.4, 0.1, 0.4, 0.4, 0.1, 0.4, 0.4, 0.1, 0.5, 0.5,
    0.3, 0.5, 0.5, 0.3, 0.5, 0.5, 0.3, 0.5, 0.5, 0.3 };

  static const real_T tmp[13]{ 30.0, 30.0, 30.0, 45.0, 45.0, 45.0, 45.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T tmp_0[8]{ 0.4, 0.4, 0.4, 0.4, 0.5, 0.5, 0.5, 0.5 };

  int32_T tmp_size;
  boolean_T corr[3];
  boolean_T corr_0[3];

  //         %% Fonction qui détermine les gain
  //  Vérifier si le mode existe
  corr[0] = (mode == 10.0);
  corr[1] = (mode == 11.0);
  corr[2] = (mode == 19.0);
  if (mode == 31) {
    //  Mode ros debug
    std::memcpy(&OV[0], &b_this->rosOV[0], 13U * sizeof(real_T));
    std::memcpy(&MV[0], &b_this->rosMV[0], sizeof(real_T) << 3U);
    std::memcpy(&MVR[0], &b_this->rosMVR[0], sizeof(real_T) << 3U);
  } else if (proc_cont_combineVectorElements(corr) == 1) {
    real_T i;

    //  mode existe et unique
    corr_0[0] = corr[0];
    corr_0[1] = corr[1];
    corr_0[2] = corr[2];
    proc_control_eml_find(corr_0, proc_control_B.tmp_data_h, &tmp_size);
    for (int32_T i_0{0}; i_0 < tmp_size; i_0++) {
      proc_control_B.tmp_data_kl[i_0] = proc_control_B.tmp_data_h[i_0];
    }

    i = proc_control_sum(proc_control_B.tmp_data_kl, &tmp_size);
    for (int32_T i_0{0}; i_0 < 13; i_0++) {
      OV[i_0] = tmp_1[(((i_0 + 2) - 1) * 3 + static_cast<int32_T>(i)) - 1];
    }

    for (int32_T i_0{0}; i_0 < 8; i_0++) {
      MV[i_0] = tmp_1[(((i_0 + 15) - 1) * 3 + static_cast<int32_T>(i)) - 1];
      MVR[i_0] = tmp_1[(((i_0 + 23) - 1) * 3 + static_cast<int32_T>(i)) - 1];
    }
  } else {
    //  mode non trouver. retourne defaut
    std::memcpy(&OV[0], &tmp[0], 13U * sizeof(real_T));
    for (int32_T i_0{0}; i_0 < 8; i_0++) {
      MV[i_0] = 0.2;
      MVR[i_0] = tmp_0[i_0];
    }
  }
}

void proc_control::proc_con_AUV7QuatJacobianMatrix(const real_T in1[13], real_T
  Anqv[169])
{
  real_T t24_tmp;
  real_T t25_tmp;
  real_T t29_tmp;
  real_T t31_tmp;
  real_T t32_tmp;

  // AUV7QuatJacobianMatrix
  //     [Anqv,Bnqv,Cnq,Dnq] = AUV7QuatJacobianMatrix(IN1,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 9.0.
  //     02-Apr-2022 21:17:21
  proc_control_B.t2_m = std::abs(in1[10]);
  proc_control_B.t3_d = std::abs(in1[11]);
  proc_control_B.t4_j = std::abs(in1[12]);
  proc_control_B.t5_p = std::abs(in1[7]);
  proc_control_B.t6_b = std::abs(in1[8]);
  proc_control_B.t7_p = std::abs(in1[9]);
  if (std::isnan(in1[10])) {
    proc_control_B.t8_n = in1[10];
  } else if (in1[10] < 0.0) {
    proc_control_B.t8_n = -1.0;
  } else {
    proc_control_B.t8_n = (in1[10] > 0.0);
  }

  if (std::isnan(in1[11])) {
    proc_control_B.t9_ce = in1[11];
  } else if (in1[11] < 0.0) {
    proc_control_B.t9_ce = -1.0;
  } else {
    proc_control_B.t9_ce = (in1[11] > 0.0);
  }

  if (std::isnan(in1[12])) {
    proc_control_B.t10_n = in1[12];
  } else if (in1[12] < 0.0) {
    proc_control_B.t10_n = -1.0;
  } else {
    proc_control_B.t10_n = (in1[12] > 0.0);
  }

  if (std::isnan(in1[7])) {
    proc_control_B.t11_d = in1[7];
  } else if (in1[7] < 0.0) {
    proc_control_B.t11_d = -1.0;
  } else {
    proc_control_B.t11_d = (in1[7] > 0.0);
  }

  if (std::isnan(in1[8])) {
    proc_control_B.t12_i = in1[8];
  } else if (in1[8] < 0.0) {
    proc_control_B.t12_i = -1.0;
  } else {
    proc_control_B.t12_i = (in1[8] > 0.0);
  }

  if (std::isnan(in1[9])) {
    proc_control_B.t13_n = in1[9];
  } else if (in1[9] < 0.0) {
    proc_control_B.t13_n = -1.0;
  } else {
    proc_control_B.t13_n = (in1[9] > 0.0);
  }

  proc_control_B.t17_b = in1[4] * in1[5] * 2.0;
  proc_control_B.t18_b = in1[4] * in1[6] * 2.0;
  proc_control_B.t19_j = in1[5] * in1[6] * 2.0;
  proc_control_B.t20_n = in1[3] * in1[4] * 2.0;
  proc_control_B.t21_f = in1[3] * in1[5] * 2.0;
  proc_control_B.t22_e = in1[3] * in1[6] * 2.0;
  proc_control_B.t23_i = in1[4] * in1[7] * 2.0;
  t24_tmp = in1[5] * in1[7];
  proc_control_B.t24_a = t24_tmp * 2.0;
  t25_tmp = in1[6] * in1[7];
  proc_control_B.t25_f = t25_tmp * 2.0;
  proc_control_B.t26_k = in1[3] * in1[7] * 2.0;
  proc_control_B.t27_tmp_g = in1[4] * in1[8];
  proc_control_B.t27_c = proc_control_B.t27_tmp_g * 2.0;
  proc_control_B.t28_j = in1[5] * in1[8] * 2.0;
  t29_tmp = in1[6] * in1[8];
  proc_control_B.t29_l = t29_tmp * 2.0;
  proc_control_B.t30_ai = in1[3] * in1[8] * 2.0;
  t31_tmp = in1[4] * in1[9];
  proc_control_B.t31_i = t31_tmp * 2.0;
  t32_tmp = in1[5] * in1[9];
  proc_control_B.t32_o = t32_tmp * 2.0;
  proc_control_B.t33_b = in1[6] * in1[9] * 2.0;
  proc_control_B.t34_a = in1[3] * in1[9] * 2.0;
  proc_control_B.t39_a = in1[4] / 2.0;
  proc_control_B.t40_i = in1[5] / 2.0;
  proc_control_B.t41_i = in1[6] / 2.0;
  proc_control_B.t42_l = in1[3] / 2.0;
  proc_control_B.t43_o = in1[10] / 2.0;
  proc_control_B.t44_p = in1[11] / 2.0;
  proc_control_B.t45_o = in1[12] / 2.0;
  proc_control_B.t58_c = in1[11] * 8.7612480428112471E-6;
  proc_control_B.t59_o = in1[7] * 3.6805220320211881E-5;
  proc_control_B.t60_o = in1[8] * 7.211946028174652E-5;
  proc_control_B.t62_he = in1[8] * 0.0026915778663054;
  proc_control_B.t63_ih = in1[7] * 0.0012514964408717271;
  proc_control_B.t64_g = in1[9] * 0.01181455270975019;
  proc_control_B.t66_c = in1[9] * 0.01276507759640369;
  proc_control_B.t35_o = in1[4] * in1[4] * 2.0;
  proc_control_B.t36_g = in1[5] * in1[5] * 2.0;
  proc_control_B.t37_o = in1[6] * in1[6] * 2.0;
  proc_control_B.t56_g = -(in1[12] * 3.9649339350647009E-8);
  proc_control_B.t61_a = -(in1[10] * 1.880816492197691E-5);
  std::memset(&Anqv[0], 0, 39U * sizeof(real_T));
  Anqv[39] = -proc_control_B.t29_l + proc_control_B.t32_o;
  Anqv[40] = proc_control_B.t25_f - proc_control_B.t31_i;
  Anqv[41] = -proc_control_B.t24_a + proc_control_B.t27_c;
  Anqv[42] = 0.0;
  Anqv[43] = proc_control_B.t43_o;
  Anqv[44] = proc_control_B.t44_p;
  Anqv[45] = proc_control_B.t45_o;
  Anqv[46] = in1[4] * 0.00024221914396928331 + in1[5] * 0.446279612603122;
  Anqv[47] = in1[4] * -0.44996381418158943 - in1[5] * 0.0002372117866458812;
  Anqv[48] = in1[4] * 0.0097440679897671783 - in1[5] * 0.0043215762663743667;
  Anqv[49] = in1[4] * -6.6132984045987788 + in1[5] * 0.025871946299473779;
  Anqv[50] = in1[4] * 0.027272006623379409 - in1[5] * 5.826458617096355;
  Anqv[51] = in1[4] * 0.27831525078194952 + in1[5] * 0.538414009042602;
  Anqv[52] = proc_control_B.t28_j + proc_control_B.t33_b;
  Anqv[53] = (proc_control_B.t24_a - proc_control_B.t34_a) -
    proc_control_B.t27_tmp_g * 4.0;
  Anqv[54] = (proc_control_B.t25_f + proc_control_B.t30_ai) - t31_tmp * 4.0;
  Anqv[55] = -proc_control_B.t43_o;
  Anqv[56] = 0.0;
  Anqv[57] = -proc_control_B.t45_o;
  Anqv[58] = proc_control_B.t44_p;
  Anqv[59] = (in1[4] * -0.0063156660948944666 - in1[6] * 0.446279612603122) +
    in1[3] * 0.00024221914396928331;
  Anqv[60] = (in1[4] * -0.014206389927440759 + in1[6] * 0.0002372117866458812) +
    in1[3] * -0.44996381418158943;
  Anqv[61] = (in1[4] * 0.76799224836099578 + in1[6] * 0.0043215762663743667) +
    in1[3] * 0.0097440679897671783;
  Anqv[62] = (in1[4] * -2.0330321882771121 - in1[6] * 0.025871946299473779) +
    in1[3] * -6.6132984045987788;
  Anqv[63] = (in1[4] * 0.90215841406066088 + in1[6] * 5.826458617096355) + in1[3]
    * 0.027272006623379409;
  Anqv[64] = (in1[4] * 0.0027990170632855231 - in1[6] * 0.538414009042602) +
    in1[3] * 0.27831525078194952;
  Anqv[65] = (proc_control_B.t27_c + proc_control_B.t34_a) - t24_tmp * 4.0;
  Anqv[66] = proc_control_B.t23_i + proc_control_B.t33_b;
  Anqv[67] = (-proc_control_B.t26_k + proc_control_B.t29_l) - t32_tmp * 4.0;
  Anqv[68] = -proc_control_B.t44_p;
  Anqv[69] = proc_control_B.t45_o;
  Anqv[70] = 0.0;
  Anqv[71] = -proc_control_B.t43_o;
  Anqv[72] = (in1[5] * -0.0063156660948944666 + in1[6] * 0.00024221914396928331)
    + in1[3] * 0.446279612603122;
  Anqv[73] = (in1[5] * -0.014206389927440759 - in1[6] * 0.44996381418158943) +
    in1[3] * -0.0002372117866458812;
  Anqv[74] = (in1[5] * 0.76799224836099578 + in1[6] * 0.0097440679897671783) +
    in1[3] * -0.0043215762663743667;
  Anqv[75] = (in1[5] * -2.0330321882771121 - in1[6] * 6.6132984045987788) + in1
    [3] * 0.025871946299473779;
  Anqv[76] = (in1[5] * 0.90215841406066088 + in1[6] * 0.027272006623379409) +
    in1[3] * -5.826458617096355;
  Anqv[77] = (in1[5] * 0.0027990170632855231 + in1[6] * 0.27831525078194952) +
    in1[3] * 0.538414009042602;
  Anqv[78] = (-proc_control_B.t30_ai + proc_control_B.t31_i) - t25_tmp * 4.0;
  Anqv[79] = (proc_control_B.t26_k + proc_control_B.t32_o) - t29_tmp * 4.0;
  Anqv[80] = proc_control_B.t23_i + proc_control_B.t28_j;
  Anqv[81] = -proc_control_B.t45_o;
  Anqv[82] = -proc_control_B.t44_p;
  Anqv[83] = proc_control_B.t43_o;
  Anqv[84] = 0.0;
  Anqv[85] = in1[4] * -0.446279612603122 + in1[5] * 0.00024221914396928331;
  Anqv[86] = in1[4] * 0.0002372117866458812 - in1[5] * 0.44996381418158943;
  Anqv[87] = in1[4] * 0.0043215762663743667 + in1[5] * 0.0097440679897671783;
  Anqv[88] = in1[4] * -0.025871946299473779 - in1[5] * 6.6132984045987788;
  Anqv[89] = in1[4] * 5.826458617096355 + in1[5] * 0.027272006623379409;
  Anqv[90] = in1[4] * -0.538414009042602 + in1[5] * 0.27831525078194952;
  Anqv[91] = (-proc_control_B.t36_g + -proc_control_B.t37_o) + 1.0;
  Anqv[92] = proc_control_B.t17_b + proc_control_B.t22_e;
  Anqv[93] = proc_control_B.t18_b - proc_control_B.t21_f;
  Anqv[94] = 0.0;
  Anqv[95] = 0.0;
  Anqv[96] = 0.0;
  Anqv[97] = 0.0;
  proc_control_B.t11_d *= in1[7];
  Anqv[98] = (((((proc_control_B.t5_p * -0.02083209676345903 +
                  proc_control_B.t56_g) + proc_control_B.t58_c) -
                proc_control_B.t60_o) - proc_control_B.t64_g) -
              proc_control_B.t11_d * 0.02083209676345903) + -0.3561042181787869;
  Anqv[99] = (((proc_control_B.t5_p * 3.0762418461708879E-7 + in1[8] *
                3.6805220320211881E-5) - in1[9] * 5.5205827244154082E-5) + (in1
    [11] * 1.9707455092950659E-5 - in1[12] * 0.99732173963403625)) +
    (proc_control_B.t11_d * 3.0762418461708879E-7 + 5.2585330703775874E-6);
  Anqv[100] = (((proc_control_B.t5_p * 3.1018428934817561E-6 - in1[8] *
                 1.771828414014215E-7) + in1[9] * 0.0012514964408717271) + (in1
    [11] * 0.94449992470847732 - in1[12] * 8.992901709737525E-7)) +
    (proc_control_B.t11_d * 3.1018428934817561E-6 + 5.3022955444132579E-5);
  Anqv[101] = (((in1[11] * 0.0028202724800340711 + in1[12] *
                 0.00061034709456155121) + (proc_control_B.t5_p *
    -1.8142075755964659E-5 + in1[8] * 0.0001156895912281943)) + (in1[9] *
    -0.0078781068937827138 - proc_control_B.t11_d * 1.8142075755964659E-5)) +
    -0.000310120953093413;
  Anqv[102] = (((in1[11] * -0.0012514964408717271 - in1[12] *
                 2.5191511327559042E-6) + (proc_control_B.t5_p *
    0.0041828385845637181 - in1[8] * 9.6246917791973632E-6)) +
               (proc_control_B.t11_d * 0.0041828385845637181 + in1[9] *
                1.6865276442684169)) + 0.071501514266046451;
  Anqv[103] = (((in1[11] * -3.8828656232047592E-6 - in1[12] *
                 3.6805220320211881E-5) + (proc_control_B.t5_p *
    -0.000559547536668723 - in1[8] * 0.046369768623910637)) + (in1[9] *
    0.00021091988675539481 - proc_control_B.t11_d * 0.000559547536668723)) +
    -0.0095649151567303078;
  Anqv[104] = proc_control_B.t17_b - proc_control_B.t22_e;
  Anqv[105] = (-proc_control_B.t35_o + -proc_control_B.t37_o) + 1.0;
  Anqv[106] = proc_control_B.t19_j + proc_control_B.t20_n;
  Anqv[107] = 0.0;
  Anqv[108] = 0.0;
  Anqv[109] = 0.0;
  Anqv[110] = 0.0;
  proc_control_B.t11_d = proc_control_B.t12_i * in1[8];
  Anqv[111] = (((proc_control_B.t6_b * 3.0762418461708879E-7 - in1[7] *
                 7.211946028174652E-5) - in1[9] * 4.8904523698065773E-5) + (in1
    [10] * -8.361454958762487E-6 + in1[12] * 1.0026850258050679)) +
    (proc_control_B.t11_d * 3.0762418461708879E-7 + 5.2585330703775874E-6);
  Anqv[112] = (((((proc_control_B.t6_b * -0.020779606287649719 +
                   proc_control_B.t56_g) + proc_control_B.t59_o) +
                 proc_control_B.t61_a) - proc_control_B.t66_c) -
               proc_control_B.t11_d * 0.020779606287649719) +
    -0.3552069450880293;
  Anqv[113] = (((proc_control_B.t6_b * 6.977251326520494E-6 - in1[7] *
                 1.771828414014215E-7) + in1[9] * 0.0026915778663054) + (in1[10]
    * -0.94703250296186225 - in1[12] * 3.9979308404875958E-7)) +
    (proc_control_B.t11_d * 6.977251326520494E-6 + 0.0001192692534447948);
  Anqv[114] = (((in1[10] * -0.0026915778663054 + in1[12] * 2.3383119863243342E-6)
                + (proc_control_B.t6_b * -0.004735451595736173 + in1[7] *
                   0.0001156895912281943)) + (in1[9] * -1.82678107880096 -
    proc_control_B.t11_d * 0.004735451595736173)) + -0.080947890525404673;
  Anqv[115] = (((in1[10] * 0.001194388181942488 - in1[12] *
                 0.00053912141756599029) + (proc_control_B.t6_b *
    1.9545138098968222E-5 - in1[7] * 9.6246917791973632E-6)) +
               (proc_control_B.t11_d * 1.9545138098968222E-5 + in1[9] *
                0.0075186132878328751)) + 0.00033410492476868751;
  Anqv[116] = (((in1[10] * 3.7056827818033371E-6 + in1[12] *
                 7.211946028174652E-5) + proc_control_B.t6_b *
                0.00028555774386371279) + (in1[7] * -0.046369768623910637 + in1
    [9] * 0.002419584892404522)) + (proc_control_B.t11_d *
    0.00028555774386371279 + 0.0048813289549352618);
  Anqv[117] = proc_control_B.t18_b + proc_control_B.t21_f;
  Anqv[118] = proc_control_B.t19_j - proc_control_B.t20_n;
  Anqv[119] = (-proc_control_B.t35_o + -proc_control_B.t36_g) + 1.0;
  Anqv[120] = 0.0;
  Anqv[121] = 0.0;
  Anqv[122] = 0.0;
  Anqv[123] = 0.0;
  proc_control_B.t11_d = proc_control_B.t13_n * in1[9];
  Anqv[124] = ((proc_control_B.t11_d * 2.0042677157882111E-6 + in1[8] *
                -4.8904523698065773E-5) + 6.1860114684821339E-5) + ((in1[10] *
    -8.2924437253319364E-7 - in1[11] * 1.0588408804907721) +
    (proc_control_B.t7_p * 2.0042677157882111E-6 - in1[7] * 0.01181455270975019));
  Anqv[125] = (((in1[10] * 1.056014359205657 + in1[11] * 8.6889371188384056E-7)
                + (proc_control_B.t7_p * 4.5083777802132416E-6 - in1[7] *
                   5.5205827244154082E-5)) + (proc_control_B.t11_d *
    4.5083777802132416E-6 + in1[8] * -0.01276507759640369)) +
    0.00013914746235226059;
  Anqv[126] = (((((proc_control_B.t7_p * -0.01269647983792513 +
                   proc_control_B.t58_c) + proc_control_B.t61_a) +
                 proc_control_B.t62_he) + proc_control_B.t63_ih) -
               proc_control_B.t11_d * 0.01269647983792513) + -0.391866661664356;
  Anqv[127] = (((in1[10] * 0.01276507759640369 - in1[11] * 5.12428356843901E-5)
                + (proc_control_B.t7_p * 0.000645179893759118 - in1[7] *
                   0.0078781068937827138)) + (proc_control_B.t11_d *
    0.000645179893759118 + in1[8] * -1.82678107880096)) + 0.0199129596839234;
  Anqv[128] = (((in1[10] * -5.2686676111398181E-5 + in1[11] *
                 0.01181455270975019) + (proc_control_B.t7_p *
    -0.0002862986986107742 + in1[7] * 1.6865276442684169)) + (in1[8] *
    0.0075186132878328751 - proc_control_B.t11_d * 0.0002862986986107742)) +
    -0.00883637958675229;
  Anqv[129] = (((in1[10] * -0.00076976116954851617 - in1[11] *
                 0.001580458755922332) + (proc_control_B.t7_p *
    -8.8826411206548176E-7 + in1[7] * 0.00021091988675539481)) + (in1[8] *
    0.002419584892404522 - proc_control_B.t11_d * 8.8826411206548176E-7)) +
    -2.7415559014366719E-5;
  Anqv[130] = 0.0;
  Anqv[131] = 0.0;
  Anqv[132] = 0.0;
  Anqv[133] = -proc_control_B.t39_a;
  Anqv[134] = proc_control_B.t42_l;
  Anqv[135] = proc_control_B.t41_i;
  Anqv[136] = -proc_control_B.t40_i;
  proc_control_B.t11_d = in1[10] * proc_control_B.t8_n;
  Anqv[137] = (((in1[10] * -3.8387792037776772E-5 - in1[11] *
                 0.001666883141735279) + (in1[12] * -0.012459373644739849 -
    proc_control_B.t2_m * 2.5895099583299988E-6)) + ((in1[8] *
    -8.361454958762487E-6 - in1[9] * 8.2924437253319364E-7) -
    proc_control_B.t11_d * 2.5895099583299988E-6)) + -5.1686825515568839E-5;
  Anqv[138] = (((in1[10] * 0.0031092639852605942 - in1[11] *
                 0.00073685477811853554) + (in1[12] * 7.0593490217135568E-6 -
    proc_control_B.t2_m * 0.000675914885887129)) + (in1[8] *
    -1.880816492197691E-5 + in1[9] * 1.056014359205657)) + (proc_control_B.t11_d
    * -0.000675914885887129 - 0.01349131508756744);
  Anqv[139] = (((in1[10] * 0.01323653524037665 + in1[11] * 3.254516699917723E-6)
                + (in1[12] * -0.00016431009062248719 + proc_control_B.t2_m *
                   0.000142519897166366)) + (in1[8] * -0.94703250296186225 -
    in1[9] * 1.880816492197691E-5)) + (proc_control_B.t11_d *
    0.000142519897166366 + 0.0028447085262747712);
  Anqv[140] = ((((in1[12] * 0.0010337362592453569 - proc_control_B.t2_m *
                  0.096728634439823824) - proc_control_B.t62_he) +
                proc_control_B.t66_c) + (in1[10] * 2.9459976186536029E-5 - in1
    [11] * 0.0023143478099307371)) + (proc_control_B.t11_d *
    -0.096728634439823824 - 1.930711266263949);
  Anqv[141] = (((in1[10] * 0.004377222757514088 - in1[11] *
                 0.0002019061675601846) + (in1[12] * 0.77857309742658121 +
    proc_control_B.t2_m * 0.00039811294558105519)) + (in1[8] *
    0.001194388181942488 - in1[9] * 5.2686676111398181E-5)) +
    (proc_control_B.t11_d * 0.00039811294558105519 + 0.0079463661792625786);
  Anqv[142] = ((((in1[12] * 0.0002100625212176024 + proc_control_B.t2_m *
                  0.00012811778338931329) + in1[8] * 3.7056827818033371E-6) +
                (in1[10] * -0.0049611737630270167 - in1[11] *
                 0.071643033330452965)) + (proc_control_B.t11_d *
    0.00012811778338931329 + in1[9] * -0.00076976116954851617)) +
    0.0025572411854154339;
  Anqv[143] = 0.0;
  Anqv[144] = 0.0;
  Anqv[145] = 0.0;
  Anqv[146] = -proc_control_B.t40_i;
  Anqv[147] = -proc_control_B.t41_i;
  Anqv[148] = proc_control_B.t42_l;
  Anqv[149] = proc_control_B.t39_a;
  proc_control_B.t11_d = in1[11] * proc_control_B.t9_ce;
  Anqv[150] = ((((in1[12] * 1.084652012219342E-5 + proc_control_B.t3_d *
                  0.00035750757133023227) + in1[7] * 8.7612480428112471E-6) +
                (in1[10] * -0.001666883141735279 + in1[11] *
                 0.001564618000917013)) + (proc_control_B.t11_d *
    0.00035750757133023227 + in1[9] * -1.0588408804907721)) +
    0.0083418433310387535;
  Anqv[151] = (((in1[10] * -0.00073685477811853554 - in1[11] *
                 5.327430934216595E-7) + (in1[12] * -0.012219391427097369 +
    proc_control_B.t3_d * 1.6705246238434379E-6)) + ((in1[7] *
    1.9707455092950659E-5 + in1[9] * 8.6889371188384056E-7) +
    proc_control_B.t11_d * 1.6705246238434379E-6)) + 3.8978907889680209E-5;
  Anqv[152] = (((in1[10] * 3.254516699917723E-6 + in1[11] * 0.01323264858496773)
                + (in1[12] * -0.000370280631189075 - proc_control_B.t3_d *
                   3.7870198228938393E-5)) + (in1[7] * 0.94449992470847732 +
    in1[9] * 8.7612480428112471E-6)) + (proc_control_B.t11_d *
    -3.7870198228938393E-5 - 0.000883637958675229);
  Anqv[153] = (((in1[10] * -0.0023143478099307371 + in1[11] *
                 0.000474986479487347) + (in1[12] * -0.74868928704241333 +
    proc_control_B.t3_d * 0.00023839098537787741)) + (in1[7] *
    0.0028202724800340711 - in1[9] * 5.12428356843901E-5)) +
    (proc_control_B.t11_d * 0.00023839098537787741 + 0.0055624563254838061);
  Anqv[154] = ((((in1[12] * -0.0010338149937763181 - proc_control_B.t3_d *
                  0.051034213219608937) - proc_control_B.t63_ih) +
                proc_control_B.t64_g) + (in1[10] * -0.0002019061675601846 - in1
    [11] * 1.83479515843041E-5)) + (proc_control_B.t11_d * -0.051034213219608937
    - 1.190798308457542);
  Anqv[155] = ((((in1[12] * 0.0023151732654294191 - proc_control_B.t3_d *
                  6.3824216042422837E-6) - in1[7] * 3.8828656232047592E-6) +
                (in1[10] * -0.071643033330452965 + in1[11] *
                 0.0049611361134530609)) + (in1[9] * -0.001580458755922332 -
    proc_control_B.t11_d * 6.3824216042422837E-6)) + -0.0001489231707656533;
  Anqv[156] = 0.0;
  Anqv[157] = 0.0;
  Anqv[158] = 0.0;
  Anqv[159] = -proc_control_B.t41_i;
  Anqv[160] = proc_control_B.t40_i;
  Anqv[161] = -proc_control_B.t39_a;
  Anqv[162] = proc_control_B.t42_l;
  proc_control_B.t11_d = in1[12] * proc_control_B.t10_n;
  Anqv[163] = ((((in1[12] * 0.0015875478170822739 - proc_control_B.t4_j *
                  4.8781067299324573E-5) - in1[7] * 3.9649339350647009E-8) +
                (in1[10] * -0.012459373644739849 + in1[11] *
                 1.084652012219342E-5)) + (in1[8] * 1.0026850258050679 -
    proc_control_B.t11_d * 4.8781067299324573E-5)) + -0.0023912287891825769;
  Anqv[164] = (((in1[10] * 7.0593490217135568E-6 - in1[11] *
                 0.012219391427097369) + (in1[12] * 0.00310220784225037 +
    proc_control_B.t4_j * 2.489477767016984E-5)) + (in1[7] *
    -0.99732173963403625 - in1[8] * 3.9649339350647009E-8)) +
    (proc_control_B.t11_d * 2.489477767016984E-5 + 0.0012203322387338161);
  Anqv[165] = (((in1[12] * -2.5992468246472442E-6 - proc_control_B.t4_j *
                 1.1984515797708881E-7) - in1[7] * 8.992901709737525E-7) + (in1
    [10] * -0.00016431009062248719 - in1[11] * 0.000370280631189075)) + ((in1[8]
    * -3.9979308404875958E-7 - proc_control_B.t11_d * 1.1984515797708881E-7) -
    5.8747626459357257E-6);
  Anqv[166] = (((in1[12] * -0.0004292180419550528 + proc_control_B.t4_j *
                 7.82515802737123E-5) + in1[7] * 0.00061034709456155121) + (in1
    [10] * 0.0010337362592453569 - in1[11] * 0.74868928704241333)) +
    ((proc_control_B.t11_d * 7.82515802737123E-5 + in1[8] *
      2.3383119863243342E-6) + 0.0038358617781231522);
  Anqv[167] = ((((in1[12] * -0.0043939282900391837 - proc_control_B.t4_j *
                  6.51007003632713E-6) - in1[7] * 2.5191511327559042E-6) + (in1
    [10] * 0.77857309742658121 - in1[11] * 0.0010338149937763181)) + (in1[8] *
    -0.00053912141756599029 - proc_control_B.t11_d * 6.51007003632713E-6)) +
    -0.0003191210802121142;
  Anqv[168] = ((((proc_control_B.t4_j * -0.031364167106358663 -
                  proc_control_B.t59_o) + proc_control_B.t60_o) -
                proc_control_B.t11_d * 0.031364167106358663) + ((in1[10] *
    0.0002100625212176024 + in1[11] * 0.0023151732654294191) + in1[12] *
    1.580332096620055E-7)) + -1.5374591718803261;
}

real_T proc_control::proc_control_norm(const real_T x[169])
{
  real_T y;
  int32_T b_j;
  boolean_T exitg1;
  y = 0.0;
  b_j = 0;
  exitg1 = false;
  while ((!exitg1) && (b_j < 13)) {
    real_T s;
    s = 0.0;
    for (int32_T b_i{0}; b_i < 13; b_i++) {
      s += std::abs(x[13 * b_j + b_i]);
    }

    if (std::isnan(s)) {
      y = (rtNaN);
      exitg1 = true;
    } else {
      if (s > y) {
        y = s;
      }

      b_j++;
    }
  }

  return y;
}

void proc_control::proc_control_mpower(const real_T a[169], real_T b, real_T c
  [169])
{
  proc_control_B.e_ga = std::abs(b);
  if (proc_control_B.e_ga <= 2.147483647E+9) {
    int32_T n;
    int32_T n_0;
    int32_T nb;
    int32_T nbitson;
    std::memcpy(&proc_control_B.a_m[0], &a[0], 169U * sizeof(real_T));
    n = static_cast<int32_T>(proc_control_B.e_ga);
    n_0 = static_cast<int32_T>(proc_control_B.e_ga);
    nbitson = 0;
    nb = -1;
    while (n_0 > 0) {
      nb++;
      if ((n_0 & 1U) != 0U) {
        nbitson++;
      }

      n_0 >>= 1;
    }

    if (static_cast<int32_T>(proc_control_B.e_ga) <= 2) {
      if (b == 2.0) {
        for (nb = 0; nb < 13; nb++) {
          std::memset(&c[nb * 13], 0, 13U * sizeof(real_T));
          for (int32_T i{0}; i < 13; i++) {
            for (int32_T i_1{0}; i_1 < 13; i_1++) {
              int32_T c_tmp;
              c_tmp = 13 * nb + i_1;
              c[c_tmp] += a[13 * i + i_1] * a[13 * nb + i];
            }
          }
        }
      } else {
        boolean_T firstmult;
        firstmult = false;
        for (n = 0; n < 169; n++) {
          if (firstmult || std::isnan(a[n])) {
            firstmult = true;
          }
        }

        if (firstmult) {
          for (nb = 0; nb < 169; nb++) {
            c[nb] = (rtNaN);
          }
        } else {
          std::memset(&c[0], 0, 169U * sizeof(real_T));
          n_0 = 0;
          for (n = 0; n < 13; n++) {
            c[n_0] = 1.0;
            n_0 += 14;
          }
        }
      }
    } else {
      int32_T c_tmp;
      int32_T i_1;
      boolean_T aBufferInUse;
      boolean_T cBufferInUse;
      boolean_T firstmult;
      firstmult = true;
      aBufferInUse = false;
      cBufferInUse = ((nbitson & 1U) == 0U);
      n_0 = nb - 1;
      for (nbitson = 0; nbitson <= n_0; nbitson++) {
        int32_T tmp;
        if ((n & 1U) != 0U) {
          if (firstmult) {
            firstmult = false;
            if (cBufferInUse) {
              if (aBufferInUse) {
                std::memcpy(&proc_control_B.cBuffer[0], &proc_control_B.aBuffer
                            [0], 169U * sizeof(real_T));
              } else {
                std::memcpy(&proc_control_B.cBuffer[0], &proc_control_B.a_m[0],
                            169U * sizeof(real_T));
              }
            } else if (aBufferInUse) {
              std::memcpy(&c[0], &proc_control_B.aBuffer[0], 169U * sizeof
                          (real_T));
            } else {
              std::memcpy(&c[0], &proc_control_B.a_m[0], 169U * sizeof(real_T));
            }
          } else {
            if (aBufferInUse) {
              if (cBufferInUse) {
                for (nb = 0; nb < 13; nb++) {
                  i_1 = 0;
                  for (int32_T i{0}; i < 13; i++) {
                    c_tmp = i_1 + nb;
                    c[c_tmp] = 0.0;
                    tmp = 0;
                    for (int32_T i_0{0}; i_0 < 13; i_0++) {
                      c[c_tmp] += proc_control_B.cBuffer[tmp + nb] *
                        proc_control_B.aBuffer[i_0 + i_1];
                      tmp += 13;
                    }

                    i_1 += 13;
                  }
                }
              } else {
                for (nb = 0; nb < 13; nb++) {
                  i_1 = 0;
                  for (int32_T i{0}; i < 13; i++) {
                    c_tmp = i_1 + nb;
                    proc_control_B.cBuffer[c_tmp] = 0.0;
                    tmp = 0;
                    for (int32_T i_0{0}; i_0 < 13; i_0++) {
                      proc_control_B.cBuffer[c_tmp] += c[tmp + nb] *
                        proc_control_B.aBuffer[i_0 + i_1];
                      tmp += 13;
                    }

                    i_1 += 13;
                  }
                }
              }
            } else if (cBufferInUse) {
              for (nb = 0; nb < 13; nb++) {
                i_1 = 0;
                for (int32_T i{0}; i < 13; i++) {
                  c_tmp = i_1 + nb;
                  c[c_tmp] = 0.0;
                  tmp = 0;
                  for (int32_T i_0{0}; i_0 < 13; i_0++) {
                    c[c_tmp] += proc_control_B.cBuffer[tmp + nb] *
                      proc_control_B.a_m[i_0 + i_1];
                    tmp += 13;
                  }

                  i_1 += 13;
                }
              }
            } else {
              for (nb = 0; nb < 13; nb++) {
                i_1 = 0;
                for (int32_T i{0}; i < 13; i++) {
                  c_tmp = i_1 + nb;
                  proc_control_B.cBuffer[c_tmp] = 0.0;
                  tmp = 0;
                  for (int32_T i_0{0}; i_0 < 13; i_0++) {
                    proc_control_B.cBuffer[c_tmp] += c[tmp + nb] *
                      proc_control_B.a_m[i_0 + i_1];
                    tmp += 13;
                  }

                  i_1 += 13;
                }
              }
            }

            cBufferInUse = !cBufferInUse;
          }
        }

        n >>= 1;
        if (aBufferInUse) {
          for (nb = 0; nb < 13; nb++) {
            i_1 = 0;
            for (int32_T i{0}; i < 13; i++) {
              c_tmp = i_1 + nb;
              proc_control_B.a_m[c_tmp] = 0.0;
              tmp = 0;
              for (int32_T i_0{0}; i_0 < 13; i_0++) {
                proc_control_B.a_m[c_tmp] += proc_control_B.aBuffer[tmp + nb] *
                  proc_control_B.aBuffer[i_0 + i_1];
                tmp += 13;
              }

              i_1 += 13;
            }
          }
        } else {
          for (nb = 0; nb < 13; nb++) {
            i_1 = 0;
            for (int32_T i{0}; i < 13; i++) {
              c_tmp = i_1 + nb;
              proc_control_B.aBuffer[c_tmp] = 0.0;
              tmp = 0;
              for (int32_T i_0{0}; i_0 < 13; i_0++) {
                proc_control_B.aBuffer[c_tmp] += proc_control_B.a_m[tmp + nb] *
                  proc_control_B.a_m[i_0 + i_1];
                tmp += 13;
              }

              i_1 += 13;
            }
          }
        }

        aBufferInUse = !aBufferInUse;
      }

      for (nb = 0; nb < 13; nb++) {
        std::memset(&proc_control_B.cBuffer_m[nb * 13], 0, 13U * sizeof(real_T));
        for (int32_T i{0}; i < 13; i++) {
          for (i_1 = 0; i_1 < 13; i_1++) {
            c_tmp = 13 * nb + i_1;
            proc_control_B.cBuffer_m[c_tmp] += proc_control_B.cBuffer[13 * i +
              i_1] * proc_control_B.aBuffer[13 * nb + i];
          }
        }

        std::memset(&proc_control_B.cBuffer_c[nb * 13], 0, 13U * sizeof(real_T));
        for (int32_T i{0}; i < 13; i++) {
          for (i_1 = 0; i_1 < 13; i_1++) {
            c_tmp = 13 * nb + i_1;
            proc_control_B.cBuffer_c[c_tmp] += proc_control_B.cBuffer[13 * i +
              i_1] * proc_control_B.a_m[13 * nb + i];
          }
        }
      }

      for (nb = 0; nb < 169; nb++) {
        if (firstmult) {
          if (aBufferInUse) {
            c[nb] = proc_control_B.aBuffer[nb];
          } else {
            c[nb] = proc_control_B.a_m[nb];
          }
        } else if (aBufferInUse) {
          c[nb] = proc_control_B.cBuffer_m[nb];
        } else {
          c[nb] = proc_control_B.cBuffer_c[nb];
        }
      }
    }
  } else {
    std::memcpy(&proc_control_B.a_m[0], &a[0], 169U * sizeof(real_T));
    if ((!std::isinf(b)) && (!std::isnan(b))) {
      boolean_T firstmult;
      firstmult = true;
      int32_T exitg1;
      do {
        int32_T c_tmp;
        int32_T i_1;
        int32_T tmp;
        exitg1 = 0;
        proc_control_B.ed2 = std::floor(proc_control_B.e_ga / 2.0);
        if (2.0 * proc_control_B.ed2 != proc_control_B.e_ga) {
          if (firstmult) {
            std::memcpy(&c[0], &proc_control_B.a_m[0], 169U * sizeof(real_T));
            firstmult = false;
          } else {
            for (int32_T nb{0}; nb < 13; nb++) {
              i_1 = 0;
              for (int32_T i{0}; i < 13; i++) {
                c_tmp = i_1 + nb;
                proc_control_B.cBuffer[c_tmp] = 0.0;
                tmp = 0;
                for (int32_T i_0{0}; i_0 < 13; i_0++) {
                  proc_control_B.cBuffer[c_tmp] += c[tmp + nb] *
                    proc_control_B.a_m[i_0 + i_1];
                  tmp += 13;
                }

                i_1 += 13;
              }
            }

            std::memcpy(&c[0], &proc_control_B.cBuffer[0], 169U * sizeof(real_T));
          }
        }

        if (proc_control_B.ed2 == 0.0) {
          exitg1 = 1;
        } else {
          proc_control_B.e_ga = proc_control_B.ed2;
          for (int32_T nb{0}; nb < 13; nb++) {
            i_1 = 0;
            for (int32_T i{0}; i < 13; i++) {
              c_tmp = i_1 + nb;
              proc_control_B.cBuffer[c_tmp] = 0.0;
              tmp = 0;
              for (int32_T i_0{0}; i_0 < 13; i_0++) {
                proc_control_B.cBuffer[c_tmp] += proc_control_B.a_m[tmp + nb] *
                  proc_control_B.a_m[i_0 + i_1];
                tmp += 13;
              }

              i_1 += 13;
            }
          }

          std::memcpy(&proc_control_B.a_m[0], &proc_control_B.cBuffer[0], 169U *
                      sizeof(real_T));
        }
      } while (exitg1 == 0);
    } else {
      for (int32_T nb{0}; nb < 169; nb++) {
        c[nb] = (rtNaN);
      }
    }
  }
}

real_T proc_control::proc_control_log2(real_T x)
{
  real_T f;
  int32_T eint;
  if (x == 0.0) {
    f = (rtMinusInf);
  } else if ((!std::isinf(x)) && (!std::isnan(x))) {
    real_T t;
    t = frexp(x, &eint);
    if (t == 0.5) {
      f = static_cast<real_T>(eint) - 1.0;
    } else if ((eint == 1) && (t < 0.75)) {
      f = std::log(2.0 * t) / 0.69314718055994529;
    } else {
      f = std::log(t) / 0.69314718055994529 + static_cast<real_T>(eint);
    }
  } else {
    f = x;
  }

  return f;
}

void proc_control::proc_control_padeApproximation(const real_T A[169], const
  real_T A2[169], const real_T A4[169], const real_T A6[169], int32_T m, real_T
  F[169])
{
  int32_T g_k;
  int32_T g_k_0;
  int32_T ix;
  int32_T iy;
  int32_T jA;
  int32_T jj;
  int32_T jp1j;
  int32_T kAcol;
  if (m == 3) {
    std::memcpy(&F[0], &A2[0], 169U * sizeof(real_T));
    g_k_0 = 0;
    kAcol = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 60.0;
      std::memset(&proc_control_B.A6_p[kAcol], 0, 13U * sizeof(real_T));
      g_k_0 += 14;
      kAcol += 13;
    }

    g_k = 0;
    for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
      kAcol = 0;
      for (jj = 0; jj < 13; jj++) {
        for (jA = 0; jA < 13; jA++) {
          iy = jA + g_k;
          proc_control_B.A6_p[iy] += A[jA + kAcol] * F[jj + g_k];
        }

        kAcol += 13;
      }

      g_k += 13;
    }

    for (jA = 0; jA < 169; jA++) {
      F[jA] = proc_control_B.A6_p[jA];
      proc_control_B.V_p[jA] = 12.0 * A2[jA];
    }

    proc_control_B.d_gb = 120.0;
  } else if (m == 5) {
    for (jA = 0; jA < 169; jA++) {
      F[jA] = 420.0 * A2[jA] + A4[jA];
    }

    g_k_0 = 0;
    kAcol = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 15120.0;
      std::memset(&proc_control_B.A6_p[kAcol], 0, 13U * sizeof(real_T));
      g_k_0 += 14;
      kAcol += 13;
    }

    g_k = 0;
    for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
      kAcol = 0;
      for (jj = 0; jj < 13; jj++) {
        for (jA = 0; jA < 13; jA++) {
          iy = jA + g_k;
          proc_control_B.A6_p[iy] += A[jA + kAcol] * F[jj + g_k];
        }

        kAcol += 13;
      }

      g_k += 13;
    }

    for (jA = 0; jA < 169; jA++) {
      F[jA] = proc_control_B.A6_p[jA];
      proc_control_B.V_p[jA] = 30.0 * A4[jA] + 3360.0 * A2[jA];
    }

    proc_control_B.d_gb = 30240.0;
  } else if (m == 7) {
    for (jA = 0; jA < 169; jA++) {
      F[jA] = (1512.0 * A4[jA] + A6[jA]) + 277200.0 * A2[jA];
    }

    g_k_0 = 0;
    kAcol = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 8.64864E+6;
      std::memset(&proc_control_B.A6_p[kAcol], 0, 13U * sizeof(real_T));
      g_k_0 += 14;
      kAcol += 13;
    }

    g_k = 0;
    for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
      kAcol = 0;
      for (jj = 0; jj < 13; jj++) {
        for (jA = 0; jA < 13; jA++) {
          iy = jA + g_k;
          proc_control_B.A6_p[iy] += A[jA + kAcol] * F[jj + g_k];
        }

        kAcol += 13;
      }

      g_k += 13;
    }

    for (jA = 0; jA < 169; jA++) {
      F[jA] = proc_control_B.A6_p[jA];
      proc_control_B.V_p[jA] = (56.0 * A6[jA] + 25200.0 * A4[jA]) + 1.99584E+6 *
        A2[jA];
    }

    proc_control_B.d_gb = 1.729728E+7;
  } else if (m == 9) {
    for (jA = 0; jA < 13; jA++) {
      std::memset(&proc_control_B.V_p[jA * 13], 0, 13U * sizeof(real_T));
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        for (g_k = 0; g_k < 13; g_k++) {
          kAcol = 13 * jA + g_k;
          proc_control_B.V_p[kAcol] += A6[13 * g_k_0 + g_k] * A2[13 * jA + g_k_0];
        }
      }
    }

    for (jA = 0; jA < 169; jA++) {
      F[jA] = ((3960.0 * A6[jA] + proc_control_B.V_p[jA]) + 2.16216E+6 * A4[jA])
        + 3.027024E+8 * A2[jA];
    }

    g_k_0 = 0;
    kAcol = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 8.8216128E+9;
      std::memset(&proc_control_B.A6_p[kAcol], 0, 13U * sizeof(real_T));
      g_k_0 += 14;
      kAcol += 13;
    }

    g_k = 0;
    for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
      kAcol = 0;
      for (jj = 0; jj < 13; jj++) {
        for (jA = 0; jA < 13; jA++) {
          iy = jA + g_k;
          proc_control_B.A6_p[iy] += A[jA + kAcol] * F[jj + g_k];
        }

        kAcol += 13;
      }

      g_k += 13;
    }

    for (jA = 0; jA < 169; jA++) {
      F[jA] = proc_control_B.A6_p[jA];
      proc_control_B.V_p[jA] = ((90.0 * proc_control_B.V_p[jA] + 110880.0 *
        A6[jA]) + 3.027024E+7 * A4[jA]) + 2.0756736E+9 * A2[jA];
    }

    proc_control_B.d_gb = 1.76432256E+10;
  } else {
    for (jA = 0; jA < 169; jA++) {
      F[jA] = (3.352212864E+10 * A6[jA] + 1.05594705216E+13 * A4[jA]) +
        1.1873537964288E+15 * A2[jA];
    }

    g_k_0 = 0;
    for (g_k = 0; g_k < 13; g_k++) {
      F[g_k_0] += 3.238237626624E+16;
      g_k_0 += 14;
    }

    for (jA = 0; jA < 169; jA++) {
      proc_control_B.V_p[jA] = (16380.0 * A4[jA] + A6[jA]) + 4.08408E+7 * A2[jA];
    }

    for (jA = 0; jA < 13; jA++) {
      g_k = 0;
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        proc_control_B.d_gb = 0.0;
        kAcol = 0;
        for (jj = 0; jj < 13; jj++) {
          proc_control_B.d_gb += A6[kAcol + jA] * proc_control_B.V_p[jj + g_k];
          kAcol += 13;
        }

        kAcol = g_k + jA;
        proc_control_B.A6_p[kAcol] = F[kAcol] + proc_control_B.d_gb;
        g_k += 13;
      }
    }

    for (jA = 0; jA < 13; jA++) {
      std::memset(&F[jA * 13], 0, 13U * sizeof(real_T));
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        for (g_k = 0; g_k < 13; g_k++) {
          jj = 13 * jA + g_k;
          F[jj] += A[13 * g_k_0 + g_k] * proc_control_B.A6_p[13 * jA + g_k_0];
        }
      }
    }

    for (jA = 0; jA < 169; jA++) {
      proc_control_B.A6_p[jA] = (182.0 * A6[jA] + 960960.0 * A4[jA]) +
        1.32324192E+9 * A2[jA];
    }

    for (jA = 0; jA < 13; jA++) {
      g_k = 0;
      for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
        proc_control_B.d_gb = 0.0;
        kAcol = 0;
        for (jj = 0; jj < 13; jj++) {
          proc_control_B.d_gb += A6[kAcol + jA] * proc_control_B.A6_p[jj + g_k];
          kAcol += 13;
        }

        kAcol = g_k + jA;
        proc_control_B.V_p[kAcol] = ((A6[kAcol] * 6.704425728E+11 +
          proc_control_B.d_gb) + A4[kAcol] * 1.29060195264E+14) + A2[kAcol] *
          7.7717703038976E+15;
        g_k += 13;
      }
    }

    proc_control_B.d_gb = 6.476475253248E+16;
  }

  g_k_0 = 0;
  for (g_k = 0; g_k < 13; g_k++) {
    proc_control_B.V_p[g_k_0] += proc_control_B.d_gb;
    g_k_0 += 14;
  }

  for (jA = 0; jA < 169; jA++) {
    proc_control_B.V_p[jA] -= F[jA];
    F[jA] *= 2.0;
  }

  for (jA = 0; jA < 13; jA++) {
    proc_control_B.b_ipiv[jA] = static_cast<int8_T>(jA + 1);
  }

  for (g_k = 0; g_k < 12; g_k++) {
    g_k_0 = g_k * 14 + 2;
    jj = g_k * 14;
    kAcol = 13 - g_k;
    iy = 1;
    proc_control_B.d_gb = std::abs(proc_control_B.V_p[jj]);
    for (jA = 2; jA <= kAcol; jA++) {
      real_T s;
      s = std::abs(proc_control_B.V_p[(g_k_0 + jA) - 3]);
      if (s > proc_control_B.d_gb) {
        iy = jA;
        proc_control_B.d_gb = s;
      }
    }

    if (proc_control_B.V_p[(g_k_0 + iy) - 3] != 0.0) {
      if (iy - 1 != 0) {
        jp1j = g_k + iy;
        proc_control_B.b_ipiv[g_k] = static_cast<int8_T>(jp1j);
        for (jA = 0; jA < 13; jA++) {
          iy = jA * 13 + g_k;
          proc_control_B.d_gb = proc_control_B.V_p[iy];
          kAcol = (jA * 13 + jp1j) - 1;
          proc_control_B.V_p[iy] = proc_control_B.V_p[kAcol];
          proc_control_B.V_p[kAcol] = proc_control_B.d_gb;
        }
      }

      iy = g_k_0 - g_k;
      for (ix = g_k_0; ix <= iy + 11; ix++) {
        proc_control_B.V_p[ix - 1] /= proc_control_B.V_p[jj];
      }
    }

    kAcol = 12 - g_k;
    jA = jj;
    jj += 13;
    for (jp1j = 0; jp1j < kAcol; jp1j++) {
      proc_control_B.d_gb = proc_control_B.V_p[jp1j * 13 + jj];
      if (proc_control_B.d_gb != 0.0) {
        iy = jA + 15;
        ix = jA - g_k;
        for (int32_T ijA{iy}; ijA <= ix + 26; ijA++) {
          proc_control_B.V_p[ijA - 1] += proc_control_B.V_p[((g_k_0 + ijA) - jA)
            - 16] * -proc_control_B.d_gb;
        }
      }

      jA += 13;
    }
  }

  for (g_k_0 = 0; g_k_0 < 12; g_k_0++) {
    int8_T b_ipiv;
    b_ipiv = proc_control_B.b_ipiv[g_k_0];
    if (g_k_0 + 1 != b_ipiv) {
      for (g_k = 0; g_k < 13; g_k++) {
        iy = 13 * g_k + g_k_0;
        proc_control_B.d_gb = F[iy];
        jj = (13 * g_k + b_ipiv) - 1;
        F[iy] = F[jj];
        F[jj] = proc_control_B.d_gb;
      }
    }
  }

  for (g_k = 0; g_k < 13; g_k++) {
    jp1j = 13 * g_k - 1;
    for (g_k_0 = 0; g_k_0 < 13; g_k_0++) {
      kAcol = 13 * g_k_0 - 1;
      jA = (g_k_0 + jp1j) + 1;
      if (F[jA] != 0.0) {
        for (ix = g_k_0 + 2; ix < 14; ix++) {
          jj = ix + jp1j;
          F[jj] -= proc_control_B.V_p[ix + kAcol] * F[jA];
        }
      }
    }
  }

  for (g_k = 0; g_k < 13; g_k++) {
    jp1j = 13 * g_k;
    for (jA = 12; jA >= 0; jA--) {
      kAcol = 13 * jA;
      if (F[jA + jp1j] != 0.0) {
        jj = jA + jp1j;
        F[jj] /= proc_control_B.V_p[jA + kAcol];
        iy = jA - 1;
        for (g_k_0 = 0; g_k_0 <= iy; g_k_0++) {
          ix = g_k_0 + jp1j;
          F[ix] -= proc_control_B.V_p[g_k_0 + kAcol] * F[jj];
        }
      }
    }
  }

  g_k_0 = 0;
  for (g_k = 0; g_k < 13; g_k++) {
    F[g_k_0]++;
    g_k_0 += 14;
  }
}

void proc_control::proc_control_recomputeBlockDiag(const real_T A[169], const
  real_T F[169], const int32_T blockFormat[12], real_T b_F[169])
{
  std::memcpy(&b_F[0], &F[0], 169U * sizeof(real_T));
  for (int32_T b_j{0}; b_j < 12; b_j++) {
    int32_T blockFormat_0;
    blockFormat_0 = blockFormat[b_j];
    if (blockFormat_0 != 0) {
      if (blockFormat_0 == 1) {
        real_T delta_tmp;
        real_T delta_tmp_0;
        real_T expa;
        real_T sinchdelta;
        int32_T delta_tmp_tmp;
        blockFormat_0 = 13 * b_j + b_j;
        delta_tmp = A[blockFormat_0];
        proc_control_B.delta_n = std::exp(delta_tmp);
        delta_tmp_tmp = (b_j + 1) * 13 + b_j;
        delta_tmp_0 = A[delta_tmp_tmp + 1];
        expa = std::exp(delta_tmp_0);
        sinchdelta = (delta_tmp_0 + delta_tmp) / 2.0;
        if (std::fmax(sinchdelta, std::abs(delta_tmp - delta_tmp_0) / 2.0) <
            709.782712893384) {
          delta_tmp = (A[delta_tmp_tmp + 1] - A[blockFormat_0]) / 2.0;
          if (delta_tmp == 0.0) {
            delta_tmp = 1.0;
          } else {
            delta_tmp = std::sinh(delta_tmp) / delta_tmp;
          }

          sinchdelta = A[delta_tmp_tmp] * std::exp(sinchdelta) * delta_tmp;
        } else {
          sinchdelta = (expa - proc_control_B.delta_n) * A[delta_tmp_tmp] /
            (delta_tmp_0 - delta_tmp);
        }

        b_F[blockFormat_0] = proc_control_B.delta_n;
        b_F[delta_tmp_tmp] = sinchdelta;
        b_F[delta_tmp_tmp + 1] = expa;
      } else {
        real_T delta_tmp;
        real_T delta_tmp_0;
        real_T expa;
        real_T sinchdelta;
        int32_T delta_tmp_tmp;
        blockFormat_0 = 13 * b_j + b_j;
        delta_tmp = A[blockFormat_0 + 1];
        delta_tmp_tmp = (b_j + 1) * 13 + b_j;
        delta_tmp_0 = A[delta_tmp_tmp];
        proc_control_B.delta_n = std::sqrt(std::abs(delta_tmp_0 * delta_tmp));
        expa = std::exp(A[blockFormat_0]);
        if (proc_control_B.delta_n == 0.0) {
          sinchdelta = 1.0;
        } else {
          sinchdelta = std::sin(proc_control_B.delta_n) / proc_control_B.delta_n;
        }

        b_F[blockFormat_0] = expa * std::cos(proc_control_B.delta_n);
        b_F[blockFormat_0 + 1] = delta_tmp * expa * sinchdelta;
        b_F[delta_tmp_tmp] = delta_tmp_0 * expa * sinchdelta;
        b_F[delta_tmp_tmp + 1] = b_F[blockFormat_0];
      }
    }
  }

  if (blockFormat[11] == 0) {
    b_F[168] = std::exp(A[168]);
  }
}

real_T proc_control::proc_control_xnrm2(int32_T n, const real_T x[169], int32_T
  ix0)
{
  real_T y;
  y = 0.0;
  if (n < 1) {
  } else if (n == 1) {
    y = std::abs(x[ix0 - 1]);
  } else {
    int32_T kend;
    proc_control_B.scale_e = 3.3121686421112381E-170;
    kend = ix0 + n;
    for (int32_T k{ix0}; k < kend; k++) {
      proc_control_B.absxk_n = std::abs(x[k - 1]);
      if (proc_control_B.absxk_n > proc_control_B.scale_e) {
        proc_control_B.t_f = proc_control_B.scale_e / proc_control_B.absxk_n;
        y = y * proc_control_B.t_f * proc_control_B.t_f + 1.0;
        proc_control_B.scale_e = proc_control_B.absxk_n;
      } else {
        proc_control_B.t_f = proc_control_B.absxk_n / proc_control_B.scale_e;
        y += proc_control_B.t_f * proc_control_B.t_f;
      }
    }

    y = proc_control_B.scale_e * std::sqrt(y);
  }

  return y;
}

void proc_control::proc_control_xgerc(int32_T m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y[13], const real_T A[169], int32_T ia0, real_T b_A
  [169])
{
  std::memcpy(&b_A[0], &A[0], 169U * sizeof(real_T));
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    jA = ia0;
    for (int32_T j{0}; j < n; j++) {
      proc_control_B.temp_br = y[j];
      if (proc_control_B.temp_br != 0.0) {
        int32_T c;
        proc_control_B.temp_br *= alpha1;
        c = (m + jA) - 1;
        for (int32_T ijA{jA}; ijA <= c; ijA++) {
          b_A[ijA - 1] += b_A[((ix0 + ijA) - jA) - 1] * proc_control_B.temp_br;
        }
      }

      jA += 13;
    }
  }
}

void proc_control::proc_control_xgehrd(const real_T a[169], real_T b_a[169],
  real_T tau[12])
{
  std::memcpy(&b_a[0], &a[0], 169U * sizeof(real_T));
  std::memset(&proc_control_B.work_g[0], 0, 13U * sizeof(real_T));
  for (proc_control_B.b_i_m = 0; proc_control_B.b_i_m < 12; proc_control_B.b_i_m
       ++) {
    int32_T b_i_tmp;
    int32_T exitg1;
    int32_T i;
    int32_T ix;
    int32_T jA;
    int32_T lastv;
    int32_T work_tmp;
    boolean_T exitg2;
    proc_control_B.in = (proc_control_B.b_i_m + 1) * 13;
    if (proc_control_B.b_i_m + 3 <= 13) {
      proc_control_B.ia0 = proc_control_B.b_i_m + 3;
    } else {
      proc_control_B.ia0 = 13;
    }

    proc_control_B.ia0 += proc_control_B.b_i_m * 13;
    b_i_tmp = 13 * proc_control_B.b_i_m + proc_control_B.b_i_m;
    proc_control_B.b_alpha1_tmp = b_a[b_i_tmp + 1];
    tau[proc_control_B.b_i_m] = 0.0;
    proc_control_B.xnorm = proc_control_xnrm2(11 - proc_control_B.b_i_m, b_a,
      proc_control_B.ia0);
    if (proc_control_B.xnorm != 0.0) {
      proc_control_B.xnorm = proc_control_rt_hypotd_snf
        (proc_control_B.b_alpha1_tmp, proc_control_B.xnorm);
      if (proc_control_B.b_alpha1_tmp >= 0.0) {
        proc_control_B.xnorm = -proc_control_B.xnorm;
      }

      if (std::abs(proc_control_B.xnorm) < 1.0020841800044864E-292) {
        proc_control_B.knt_c = -1;
        do {
          proc_control_B.knt_c++;
          i = proc_control_B.ia0 - proc_control_B.b_i_m;
          for (lastv = proc_control_B.ia0; lastv <= i + 10; lastv++) {
            b_a[lastv - 1] *= 9.9792015476736E+291;
          }

          proc_control_B.xnorm *= 9.9792015476736E+291;
          proc_control_B.b_alpha1_tmp *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.xnorm) < 1.0020841800044864E-292) &&
                 (proc_control_B.knt_c + 1 < 20));

        proc_control_B.xnorm = proc_control_rt_hypotd_snf
          (proc_control_B.b_alpha1_tmp, proc_control_xnrm2(11 -
            proc_control_B.b_i_m, b_a, proc_control_B.ia0));
        if (proc_control_B.b_alpha1_tmp >= 0.0) {
          proc_control_B.xnorm = -proc_control_B.xnorm;
        }

        tau[proc_control_B.b_i_m] = (proc_control_B.xnorm -
          proc_control_B.b_alpha1_tmp) / proc_control_B.xnorm;
        proc_control_B.b_alpha1_tmp = 1.0 / (proc_control_B.b_alpha1_tmp -
          proc_control_B.xnorm);
        i = proc_control_B.ia0 - proc_control_B.b_i_m;
        for (lastv = proc_control_B.ia0; lastv <= i + 10; lastv++) {
          b_a[lastv - 1] *= proc_control_B.b_alpha1_tmp;
        }

        for (lastv = 0; lastv <= proc_control_B.knt_c; lastv++) {
          proc_control_B.xnorm *= 1.0020841800044864E-292;
        }

        proc_control_B.b_alpha1_tmp = proc_control_B.xnorm;
      } else {
        tau[proc_control_B.b_i_m] = (proc_control_B.xnorm -
          proc_control_B.b_alpha1_tmp) / proc_control_B.xnorm;
        proc_control_B.b_alpha1_tmp = 1.0 / (proc_control_B.b_alpha1_tmp -
          proc_control_B.xnorm);
        i = proc_control_B.ia0 - proc_control_B.b_i_m;
        for (lastv = proc_control_B.ia0; lastv <= i + 10; lastv++) {
          b_a[lastv - 1] *= proc_control_B.b_alpha1_tmp;
        }

        proc_control_B.b_alpha1_tmp = proc_control_B.xnorm;
      }
    }

    b_a[b_i_tmp + 1] = 1.0;
    if (tau[proc_control_B.b_i_m] != 0.0) {
      lastv = 12 - proc_control_B.b_i_m;
      i = (b_i_tmp - proc_control_B.b_i_m) + 2;
      while ((lastv > 0) && (b_a[i + 10] == 0.0)) {
        lastv--;
        i--;
      }

      proc_control_B.knt_c = 13;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.knt_c > 0)) {
        i = proc_control_B.in + proc_control_B.knt_c;
        jA = i;
        do {
          exitg1 = 0;
          if (jA <= (lastv - 1) * 13 + i) {
            if (b_a[jA - 1] != 0.0) {
              exitg1 = 1;
            } else {
              jA += 13;
            }
          } else {
            proc_control_B.knt_c--;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    } else {
      lastv = 0;
      proc_control_B.knt_c = 0;
    }

    if (lastv > 0) {
      if (proc_control_B.knt_c != 0) {
        std::memset(&proc_control_B.work_g[0], 0, proc_control_B.knt_c * sizeof
                    (real_T));
        ix = b_i_tmp + 1;
        i = (lastv - 1) * 13 + proc_control_B.in;
        for (int32_T iac{proc_control_B.in + 1}; iac <= i + 1; iac += 13) {
          proc_control_B.ia0 = iac + proc_control_B.knt_c;
          for (jA = iac; jA < proc_control_B.ia0; jA++) {
            work_tmp = jA - iac;
            proc_control_B.work_g[work_tmp] += b_a[jA - 1] * b_a[ix];
          }

          ix++;
        }
      }

      if (!(-tau[proc_control_B.b_i_m] == 0.0)) {
        jA = proc_control_B.in;
        for (int32_T iac{0}; iac < lastv; iac++) {
          proc_control_B.xnorm = b_a[(b_i_tmp + iac) + 1];
          if (proc_control_B.xnorm != 0.0) {
            proc_control_B.xnorm *= -tau[proc_control_B.b_i_m];
            proc_control_B.ia0 = proc_control_B.knt_c + jA;
            for (i = jA + 1; i <= proc_control_B.ia0; i++) {
              b_a[i - 1] += proc_control_B.work_g[(i - jA) - 1] *
                proc_control_B.xnorm;
            }
          }

          jA += 13;
        }
      }
    }

    ix = (proc_control_B.b_i_m + proc_control_B.in) + 2;
    if (tau[proc_control_B.b_i_m] != 0.0) {
      lastv = 12 - proc_control_B.b_i_m;
      i = (b_i_tmp - proc_control_B.b_i_m) + 2;
      while ((lastv > 0) && (b_a[i + 10] == 0.0)) {
        lastv--;
        i--;
      }

      proc_control_B.knt_c = 12 - proc_control_B.b_i_m;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.knt_c > 0)) {
        proc_control_B.in = (proc_control_B.knt_c - 1) * 13 + ix;
        jA = proc_control_B.in;
        do {
          exitg1 = 0;
          if (jA <= (proc_control_B.in + lastv) - 1) {
            if (b_a[jA - 1] != 0.0) {
              exitg1 = 1;
            } else {
              jA++;
            }
          } else {
            proc_control_B.knt_c--;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    } else {
      lastv = 0;
      proc_control_B.knt_c = 0;
    }

    if (lastv > 0) {
      if (proc_control_B.knt_c != 0) {
        std::memset(&proc_control_B.work_g[0], 0, proc_control_B.knt_c * sizeof
                    (real_T));
        i = (proc_control_B.knt_c - 1) * 13 + ix;
        for (int32_T iac{ix}; iac <= i; iac += 13) {
          proc_control_B.xnorm = 0.0;
          proc_control_B.ia0 = iac + lastv;
          for (jA = iac; jA < proc_control_B.ia0; jA++) {
            proc_control_B.xnorm += b_a[((b_i_tmp + jA) - iac) + 1] * b_a[jA - 1];
          }

          work_tmp = div_nde_s32_floor(iac - ix, 13);
          proc_control_B.work_g[work_tmp] += proc_control_B.xnorm;
        }
      }

      std::memcpy(&proc_control_B.b_a_p[0], &b_a[0], 169U * sizeof(real_T));
      proc_control_xgerc(lastv, proc_control_B.knt_c, -tau[proc_control_B.b_i_m],
                         b_i_tmp + 2, proc_control_B.work_g,
                         proc_control_B.b_a_p, ix, b_a);
    }

    b_a[b_i_tmp + 1] = proc_control_B.b_alpha1_tmp;
  }
}

real_T proc_control::proc_control_xnrm2_p(int32_T n, const real_T x[3])
{
  real_T y;
  y = 0.0;
  if (n < 1) {
  } else if (n == 1) {
    y = std::abs(x[1]);
  } else {
    real_T t;
    proc_control_B.scale_g = 3.3121686421112381E-170;
    proc_control_B.absxk_i = std::abs(x[1]);
    if (proc_control_B.absxk_i > 3.3121686421112381E-170) {
      y = 1.0;
      proc_control_B.scale_g = proc_control_B.absxk_i;
    } else {
      t = proc_control_B.absxk_i / 3.3121686421112381E-170;
      y = t * t;
    }

    proc_control_B.absxk_i = std::abs(x[2]);
    if (proc_control_B.absxk_i > proc_control_B.scale_g) {
      t = proc_control_B.scale_g / proc_control_B.absxk_i;
      y = y * t * t + 1.0;
      proc_control_B.scale_g = proc_control_B.absxk_i;
    } else {
      t = proc_control_B.absxk_i / proc_control_B.scale_g;
      y += t * t;
    }

    y = proc_control_B.scale_g * std::sqrt(y);
  }

  return y;
}

void proc_control::proc_control_xdlanv2(real_T a, real_T b, real_T c, real_T d,
  real_T *rt1r, real_T *rt1i, real_T *rt2r, real_T *rt2i, real_T *b_a, real_T
  *b_b, real_T *b_c, real_T *b_d, real_T *cs, real_T *sn)
{
  *b_d = d;
  *b_c = c;
  *b_b = b;
  *b_a = a;
  if (c == 0.0) {
    *cs = 1.0;
    *sn = 0.0;
  } else if (b == 0.0) {
    *cs = 0.0;
    *sn = 1.0;
    *b_d = a;
    *b_a = d;
    *b_b = -c;
    *b_c = 0.0;
  } else {
    proc_control_B.temp_j = a - d;
    if ((proc_control_B.temp_j == 0.0) && ((b < 0.0) != (c < 0.0))) {
      *cs = 1.0;
      *sn = 0.0;
    } else {
      int32_T b_0;
      int32_T c_0;
      proc_control_B.p = 0.5 * proc_control_B.temp_j;
      proc_control_B.scale_o = std::abs(b);
      proc_control_B.z_b = std::abs(c);
      proc_control_B.bcmax = std::fmax(proc_control_B.scale_o,
        proc_control_B.z_b);
      if (!(b < 0.0)) {
        b_0 = 1;
      } else {
        b_0 = -1;
      }

      if (!(c < 0.0)) {
        c_0 = 1;
      } else {
        c_0 = -1;
      }

      proc_control_B.bcmis = std::fmin(proc_control_B.scale_o,
        proc_control_B.z_b) * static_cast<real_T>(b_0) * static_cast<real_T>(c_0);
      proc_control_B.scale_o = std::fmax(std::abs(proc_control_B.p),
        proc_control_B.bcmax);
      proc_control_B.z_b = proc_control_B.p / proc_control_B.scale_o *
        proc_control_B.p + proc_control_B.bcmax / proc_control_B.scale_o *
        proc_control_B.bcmis;
      if (proc_control_B.z_b >= 8.8817841970012523E-16) {
        proc_control_B.scale_o = std::sqrt(proc_control_B.scale_o) * std::sqrt
          (proc_control_B.z_b);
        if (proc_control_B.p < 0.0) {
          proc_control_B.scale_o = -proc_control_B.scale_o;
        }

        proc_control_B.z_b = proc_control_B.p + proc_control_B.scale_o;
        *b_a = d + proc_control_B.z_b;
        *b_d = d - proc_control_B.bcmax / proc_control_B.z_b *
          proc_control_B.bcmis;
        proc_control_B.scale_o = proc_control_rt_hypotd_snf(c,
          proc_control_B.z_b);
        *cs = proc_control_B.z_b / proc_control_B.scale_o;
        *sn = c / proc_control_B.scale_o;
        *b_b = b - c;
        *b_c = 0.0;
      } else {
        proc_control_B.bcmax = b + c;
        proc_control_B.scale_o = proc_control_rt_hypotd_snf(proc_control_B.bcmax,
          proc_control_B.temp_j);
        *cs = std::sqrt((std::abs(proc_control_B.bcmax) / proc_control_B.scale_o
                         + 1.0) * 0.5);
        if (!(proc_control_B.bcmax < 0.0)) {
          b_0 = 1;
        } else {
          b_0 = -1;
        }

        *sn = -(proc_control_B.p / (proc_control_B.scale_o * *cs)) *
          static_cast<real_T>(b_0);
        proc_control_B.temp_j = a * *cs + b * *sn;
        proc_control_B.p = -a * *sn + b * *cs;
        proc_control_B.scale_o = c * *cs + d * *sn;
        proc_control_B.bcmax = -c * *sn + d * *cs;
        *b_b = proc_control_B.p * *cs + proc_control_B.bcmax * *sn;
        *b_c = -proc_control_B.temp_j * *sn + proc_control_B.scale_o * *cs;
        proc_control_B.temp_j = ((proc_control_B.temp_j * *cs +
          proc_control_B.scale_o * *sn) + (-proc_control_B.p * *sn +
          proc_control_B.bcmax * *cs)) * 0.5;
        *b_a = proc_control_B.temp_j;
        *b_d = proc_control_B.temp_j;
        if (*b_c != 0.0) {
          if (*b_b != 0.0) {
            if ((*b_b < 0.0) == (*b_c < 0.0)) {
              proc_control_B.z_b = std::sqrt(std::abs(*b_b));
              proc_control_B.bcmax = std::sqrt(std::abs(*b_c));
              if (!(*b_c < 0.0)) {
                proc_control_B.p = proc_control_B.z_b * proc_control_B.bcmax;
              } else {
                proc_control_B.p = -(proc_control_B.z_b * proc_control_B.bcmax);
              }

              proc_control_B.scale_o = 1.0 / std::sqrt(std::abs(*b_b + *b_c));
              *b_a = proc_control_B.temp_j + proc_control_B.p;
              *b_d = proc_control_B.temp_j - proc_control_B.p;
              *b_b -= *b_c;
              *b_c = 0.0;
              proc_control_B.p = proc_control_B.z_b * proc_control_B.scale_o;
              proc_control_B.scale_o *= proc_control_B.bcmax;
              proc_control_B.temp_j = *cs * proc_control_B.p - *sn *
                proc_control_B.scale_o;
              *sn = *cs * proc_control_B.scale_o + *sn * proc_control_B.p;
              *cs = proc_control_B.temp_j;
            }
          } else {
            *b_b = -*b_c;
            *b_c = 0.0;
            proc_control_B.temp_j = *cs;
            *cs = -*sn;
            *sn = proc_control_B.temp_j;
          }
        }
      }
    }
  }

  *rt1r = *b_a;
  *rt2r = *b_d;
  if (*b_c == 0.0) {
    *rt1i = 0.0;
    *rt2i = 0.0;
  } else {
    *rt1i = std::sqrt(std::abs(*b_b)) * std::sqrt(std::abs(*b_c));
    *rt2i = -*rt1i;
  }
}

void proc_control::proc_control_xrot(int32_T n, const real_T x[169], int32_T ix0,
  int32_T iy0, real_T c, real_T s, real_T b_x[169])
{
  std::memcpy(&b_x[0], &x[0], 169U * sizeof(real_T));
  for (int32_T k{0}; k < n; k++) {
    int32_T temp_tmp;
    int32_T temp_tmp_0;
    temp_tmp = (k * 13 + iy0) - 1;
    proc_control_B.temp_tmp_o = b_x[temp_tmp];
    temp_tmp_0 = (k * 13 + ix0) - 1;
    proc_control_B.temp_tmp_l = b_x[temp_tmp_0];
    b_x[temp_tmp] = proc_control_B.temp_tmp_o * c - proc_control_B.temp_tmp_l *
      s;
    b_x[temp_tmp_0] = proc_control_B.temp_tmp_l * c + proc_control_B.temp_tmp_o *
      s;
  }
}

void proc_control::proc_control_xrot_p(int32_T n, const real_T x[169], int32_T
  ix0, int32_T iy0, real_T c, real_T s, real_T b_x[169])
{
  std::memcpy(&b_x[0], &x[0], 169U * sizeof(real_T));
  if (n >= 1) {
    for (int32_T k{0}; k < n; k++) {
      int32_T temp_tmp;
      int32_T temp_tmp_0;
      temp_tmp = (iy0 + k) - 1;
      proc_control_B.temp_tmp_i = b_x[temp_tmp];
      temp_tmp_0 = (ix0 + k) - 1;
      proc_control_B.temp_tmp_n = b_x[temp_tmp_0];
      b_x[temp_tmp] = proc_control_B.temp_tmp_i * c - proc_control_B.temp_tmp_n *
        s;
      b_x[temp_tmp_0] = proc_control_B.temp_tmp_n * c +
        proc_control_B.temp_tmp_i * s;
    }
  }
}

void proc_control::proc_control_xrot_pr(const real_T x[169], int32_T ix0,
  int32_T iy0, real_T c, real_T s, real_T b_x[169])
{
  std::memcpy(&b_x[0], &x[0], 169U * sizeof(real_T));
  for (int32_T k{0}; k < 13; k++) {
    int32_T temp_tmp;
    int32_T temp_tmp_0;
    temp_tmp = (iy0 + k) - 1;
    proc_control_B.temp_tmp = b_x[temp_tmp];
    temp_tmp_0 = (ix0 + k) - 1;
    proc_control_B.temp_tmp_e = b_x[temp_tmp_0];
    b_x[temp_tmp] = proc_control_B.temp_tmp * c - proc_control_B.temp_tmp_e * s;
    b_x[temp_tmp_0] = proc_control_B.temp_tmp_e * c + proc_control_B.temp_tmp *
      s;
  }
}

void proc_control::proc_control_eml_dlahqr(const real_T h[169], const real_T z
  [169], real_T b_h[169], int32_T *info, real_T b_z[169])
{
  boolean_T exitg1;
  std::memcpy(&b_z[0], &z[0], 169U * sizeof(real_T));
  std::memcpy(&b_h[0], &h[0], 169U * sizeof(real_T));
  *info = 0;
  proc_control_B.v[0] = 0.0;
  proc_control_B.v[1] = 0.0;
  proc_control_B.v[2] = 0.0;
  proc_control_B.L_c = 0;
  for (proc_control_B.i_j4 = 0; proc_control_B.i_j4 < 10; proc_control_B.i_j4++)
  {
    b_h[proc_control_B.L_c + 2] = 0.0;
    b_h[proc_control_B.L_c + 3] = 0.0;
    proc_control_B.L_c += 14;
  }

  b_h[142] = 0.0;
  proc_control_B.i_j4 = 12;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.i_j4 + 1 >= 1)) {
    int32_T hoffset;
    int32_T its;
    boolean_T exitg2;
    boolean_T goto150;
    proc_control_B.L_c = 1;
    goto150 = false;
    its = 0;
    exitg2 = false;
    while ((!exitg2) && (its < 391)) {
      int32_T k;
      int32_T m;
      boolean_T exitg3;
      k = proc_control_B.i_j4;
      exitg3 = false;
      while ((!exitg3) && (k + 1 > proc_control_B.L_c)) {
        m = (k - 1) * 13 + k;
        proc_control_B.ba = std::abs(b_h[m]);
        if (proc_control_B.ba <= 1.3027094340058323E-291) {
          exitg3 = true;
        } else {
          hoffset = 13 * k + k;
          proc_control_B.aa = b_h[hoffset];
          proc_control_B.bb = std::abs(proc_control_B.aa);
          proc_control_B.h12 = b_h[m - 1];
          proc_control_B.tst = std::abs(proc_control_B.h12) + proc_control_B.bb;
          if (proc_control_B.tst == 0.0) {
            if (k - 1 >= 1) {
              proc_control_B.tst = std::abs(b_h[((k - 2) * 13 + k) - 1]);
            }

            if (k + 2 <= 13) {
              proc_control_B.tst += std::abs(b_h[hoffset + 1]);
            }
          }

          if (proc_control_B.ba <= 2.2204460492503131E-16 * proc_control_B.tst)
          {
            proc_control_B.tst = std::abs(b_h[hoffset - 1]);
            if (proc_control_B.ba > proc_control_B.tst) {
              proc_control_B.ab = proc_control_B.ba;
              proc_control_B.ba = proc_control_B.tst;
            } else {
              proc_control_B.ab = proc_control_B.tst;
            }

            proc_control_B.tst = std::abs(proc_control_B.h12 - proc_control_B.aa);
            if (proc_control_B.bb > proc_control_B.tst) {
              proc_control_B.aa = proc_control_B.bb;
              proc_control_B.bb = proc_control_B.tst;
            } else {
              proc_control_B.aa = proc_control_B.tst;
            }

            proc_control_B.tst = proc_control_B.aa + proc_control_B.ab;
            if (proc_control_B.ab / proc_control_B.tst * proc_control_B.ba <=
                std::fmax(1.3027094340058323E-291, proc_control_B.aa /
                          proc_control_B.tst * proc_control_B.bb *
                          2.2204460492503131E-16)) {
              exitg3 = true;
            } else {
              k--;
            }
          } else {
            k--;
          }
        }
      }

      proc_control_B.L_c = k + 1;
      if (k + 1 > 1) {
        b_h[k + 13 * (k - 1)] = 0.0;
      }

      if (k + 1 >= proc_control_B.i_j4) {
        goto150 = true;
        exitg2 = true;
      } else {
        int32_T ab_tmp;
        int32_T bb_tmp;
        if (its == 10) {
          bb_tmp = 13 * k + k;
          proc_control_B.tst = std::abs(b_h[((k + 1) * 13 + k) + 2]) + std::abs
            (b_h[bb_tmp + 1]);
          proc_control_B.ab = 0.75 * proc_control_B.tst + b_h[bb_tmp];
          proc_control_B.h12 = -0.4375 * proc_control_B.tst;
          proc_control_B.aa = proc_control_B.tst;
          proc_control_B.ba = proc_control_B.ab;
        } else if (its == 20) {
          proc_control_B.tst = std::abs(b_h[((proc_control_B.i_j4 - 2) * 13 +
            proc_control_B.i_j4) - 1]) + std::abs(b_h[(proc_control_B.i_j4 - 1) *
            13 + proc_control_B.i_j4]);
          proc_control_B.ab = b_h[13 * proc_control_B.i_j4 + proc_control_B.i_j4]
            + 0.75 * proc_control_B.tst;
          proc_control_B.h12 = -0.4375 * proc_control_B.tst;
          proc_control_B.aa = proc_control_B.tst;
          proc_control_B.ba = proc_control_B.ab;
        } else {
          ab_tmp = (proc_control_B.i_j4 - 1) * 13 + proc_control_B.i_j4;
          proc_control_B.ab = b_h[ab_tmp - 1];
          proc_control_B.aa = b_h[ab_tmp];
          proc_control_B.h12 = b_h[(13 * proc_control_B.i_j4 +
            proc_control_B.i_j4) - 1];
          proc_control_B.ba = b_h[13 * proc_control_B.i_j4 + proc_control_B.i_j4];
        }

        proc_control_B.tst = ((std::abs(proc_control_B.ab) + std::abs
          (proc_control_B.h12)) + std::abs(proc_control_B.aa)) + std::abs
          (proc_control_B.ba);
        if (proc_control_B.tst == 0.0) {
          proc_control_B.ab = 0.0;
          proc_control_B.ba = 0.0;
          proc_control_B.bb = 0.0;
          proc_control_B.aa = 0.0;
        } else {
          proc_control_B.ab /= proc_control_B.tst;
          proc_control_B.ba /= proc_control_B.tst;
          proc_control_B.bb = (proc_control_B.ab + proc_control_B.ba) / 2.0;
          proc_control_B.ab = (proc_control_B.ab - proc_control_B.bb) *
            (proc_control_B.ba - proc_control_B.bb) - proc_control_B.h12 /
            proc_control_B.tst * (proc_control_B.aa / proc_control_B.tst);
          proc_control_B.aa = std::sqrt(std::abs(proc_control_B.ab));
          if (proc_control_B.ab >= 0.0) {
            proc_control_B.ab = proc_control_B.bb * proc_control_B.tst;
            proc_control_B.bb = proc_control_B.ab;
            proc_control_B.ba = proc_control_B.aa * proc_control_B.tst;
            proc_control_B.aa = -proc_control_B.ba;
          } else {
            proc_control_B.ab = proc_control_B.bb + proc_control_B.aa;
            proc_control_B.bb -= proc_control_B.aa;
            if (std::abs(proc_control_B.ab - proc_control_B.ba) <= std::abs
                (proc_control_B.bb - proc_control_B.ba)) {
              proc_control_B.ab *= proc_control_B.tst;
              proc_control_B.bb = proc_control_B.ab;
            } else {
              proc_control_B.bb *= proc_control_B.tst;
              proc_control_B.ab = proc_control_B.bb;
            }

            proc_control_B.ba = 0.0;
            proc_control_B.aa = 0.0;
          }
        }

        m = proc_control_B.i_j4 - 2;
        exitg3 = false;
        while ((!exitg3) && (m + 1 >= k + 1)) {
          bb_tmp = 13 * m + m;
          proc_control_B.h12 = b_h[bb_tmp + 1];
          proc_control_B.tst_tmp_tmp = b_h[bb_tmp];
          proc_control_B.tst_tmp = proc_control_B.tst_tmp_tmp -
            proc_control_B.bb;
          proc_control_B.tst = (std::abs(proc_control_B.tst_tmp) + std::abs
                                (proc_control_B.aa)) + std::abs
            (proc_control_B.h12);
          proc_control_B.h12 /= proc_control_B.tst;
          bb_tmp = (m + 1) * 13 + m;
          proc_control_B.v[0] = (proc_control_B.tst_tmp / proc_control_B.tst *
            (proc_control_B.tst_tmp_tmp - proc_control_B.ab) + b_h[bb_tmp] *
            proc_control_B.h12) - proc_control_B.aa / proc_control_B.tst *
            proc_control_B.ba;
          proc_control_B.tst_tmp = b_h[bb_tmp + 1];
          proc_control_B.v[1] = (((proc_control_B.tst_tmp +
            proc_control_B.tst_tmp_tmp) - proc_control_B.ab) - proc_control_B.bb)
            * proc_control_B.h12;
          proc_control_B.v[2] = b_h[bb_tmp + 2] * proc_control_B.h12;
          proc_control_B.tst = (std::abs(proc_control_B.v[0]) + std::abs
                                (proc_control_B.v[1])) + std::abs
            (proc_control_B.v[2]);
          proc_control_B.v[0] /= proc_control_B.tst;
          proc_control_B.v[1] /= proc_control_B.tst;
          proc_control_B.v[2] /= proc_control_B.tst;
          if (m + 1 == k + 1) {
            exitg3 = true;
          } else {
            bb_tmp = (m - 1) * 13 + m;
            if ((std::abs(proc_control_B.v[1]) + std::abs(proc_control_B.v[2])) *
                std::abs(b_h[bb_tmp]) <= ((std::abs(b_h[bb_tmp - 1]) + std::abs
                  (proc_control_B.tst_tmp_tmp)) + std::abs
                 (proc_control_B.tst_tmp)) * (2.2204460492503131E-16 * std::abs
                 (proc_control_B.v[0]))) {
              exitg3 = true;
            } else {
              m--;
            }
          }
        }

        for (bb_tmp = m + 1; bb_tmp <= proc_control_B.i_j4; bb_tmp++) {
          int32_T nr;
          nr = (proc_control_B.i_j4 - bb_tmp) + 2;
          if (nr >= 3) {
            nr = 3;
          }

          if (bb_tmp > m + 1) {
            hoffset = ((bb_tmp - 2) * 13 + bb_tmp) - 2;
            for (ab_tmp = 0; ab_tmp < nr; ab_tmp++) {
              proc_control_B.v[ab_tmp] = b_h[(ab_tmp + hoffset) + 1];
            }
          }

          proc_control_B.ba = proc_control_B.v[0];
          proc_control_B.tst = 0.0;
          if (nr > 0) {
            proc_control_B.aa = proc_control_xnrm2_p(nr - 1, proc_control_B.v);
            if (proc_control_B.aa != 0.0) {
              proc_control_B.bb = proc_control_rt_hypotd_snf(proc_control_B.v[0],
                proc_control_B.aa);
              if (proc_control_B.v[0] >= 0.0) {
                proc_control_B.bb = -proc_control_B.bb;
              }

              if (std::abs(proc_control_B.bb) < 1.0020841800044864E-292) {
                hoffset = -1;
                do {
                  hoffset++;
                  for (proc_control_B.j_m = 2; proc_control_B.j_m <= nr;
                       proc_control_B.j_m++) {
                    proc_control_B.v[proc_control_B.j_m - 1] *=
                      9.9792015476736E+291;
                  }

                  proc_control_B.bb *= 9.9792015476736E+291;
                  proc_control_B.ba *= 9.9792015476736E+291;
                } while ((std::abs(proc_control_B.bb) < 1.0020841800044864E-292)
                         && (hoffset + 1 < 20));

                proc_control_B.bb = proc_control_rt_hypotd_snf(proc_control_B.ba,
                  proc_control_xnrm2_p(nr - 1, proc_control_B.v));
                if (proc_control_B.ba >= 0.0) {
                  proc_control_B.bb = -proc_control_B.bb;
                }

                proc_control_B.tst = (proc_control_B.bb - proc_control_B.ba) /
                  proc_control_B.bb;
                proc_control_B.ba = 1.0 / (proc_control_B.ba - proc_control_B.bb);
                for (proc_control_B.j_m = 2; proc_control_B.j_m <= nr;
                     proc_control_B.j_m++) {
                  proc_control_B.v[proc_control_B.j_m - 1] *= proc_control_B.ba;
                }

                for (proc_control_B.j_m = 0; proc_control_B.j_m <= hoffset;
                     proc_control_B.j_m++) {
                  proc_control_B.bb *= 1.0020841800044864E-292;
                }

                proc_control_B.ba = proc_control_B.bb;
              } else {
                proc_control_B.tst = (proc_control_B.bb - proc_control_B.v[0]) /
                  proc_control_B.bb;
                proc_control_B.ba = 1.0 / (proc_control_B.v[0] -
                  proc_control_B.bb);
                for (proc_control_B.j_m = 2; proc_control_B.j_m <= nr;
                     proc_control_B.j_m++) {
                  proc_control_B.v[proc_control_B.j_m - 1] *= proc_control_B.ba;
                }

                proc_control_B.ba = proc_control_B.bb;
              }
            }
          }

          proc_control_B.v[0] = proc_control_B.ba;
          if (bb_tmp > m + 1) {
            hoffset = (bb_tmp - 2) * 13 + bb_tmp;
            b_h[hoffset - 1] = proc_control_B.ba;
            b_h[hoffset] = 0.0;
            if (bb_tmp < proc_control_B.i_j4) {
              b_h[hoffset + 1] = 0.0;
            }
          } else if (m + 1 > k + 1) {
            hoffset = ((bb_tmp - 2) * 13 + bb_tmp) - 1;
            b_h[hoffset] *= 1.0 - proc_control_B.tst;
          }

          proc_control_B.ba = proc_control_B.v[1];
          proc_control_B.bb = proc_control_B.tst * proc_control_B.v[1];
          if (nr == 3) {
            int32_T ab_tmp_0;
            proc_control_B.aa = proc_control_B.v[2];
            proc_control_B.h12 = proc_control_B.tst * proc_control_B.v[2];
            for (proc_control_B.j_m = bb_tmp; proc_control_B.j_m < 14;
                 proc_control_B.j_m++) {
              ab_tmp = (proc_control_B.j_m - 1) * 13 + bb_tmp;
              ab_tmp_0 = ((proc_control_B.j_m - 1) * 13 + bb_tmp) - 1;
              proc_control_B.ab = (b_h[ab_tmp] * proc_control_B.ba +
                                   b_h[ab_tmp_0]) + b_h[ab_tmp + 1] *
                proc_control_B.aa;
              b_h[ab_tmp_0] -= proc_control_B.ab * proc_control_B.tst;
              b_h[ab_tmp] -= proc_control_B.ab * proc_control_B.bb;
              b_h[ab_tmp + 1] -= proc_control_B.ab * proc_control_B.h12;
            }

            if (bb_tmp + 3 <= proc_control_B.i_j4 + 1) {
              nr = bb_tmp + 3;
            } else {
              nr = proc_control_B.i_j4 + 1;
            }

            nr--;
            for (hoffset = 0; hoffset <= nr; hoffset++) {
              ab_tmp = (bb_tmp - 1) * 13 + hoffset;
              proc_control_B.tst_tmp_tmp = b_h[ab_tmp];
              ab_tmp_0 = 13 * bb_tmp + hoffset;
              proc_control_B.j_m = (bb_tmp + 1) * 13 + hoffset;
              proc_control_B.ab = (b_h[ab_tmp_0] * proc_control_B.ba +
                                   proc_control_B.tst_tmp_tmp) +
                b_h[proc_control_B.j_m] * proc_control_B.aa;
              b_h[ab_tmp] = proc_control_B.tst_tmp_tmp - proc_control_B.ab *
                proc_control_B.tst;
              b_h[ab_tmp_0] -= proc_control_B.ab * proc_control_B.bb;
              b_h[proc_control_B.j_m] -= proc_control_B.ab * proc_control_B.h12;
            }

            for (nr = 0; nr < 13; nr++) {
              ab_tmp = (bb_tmp - 1) * 13 + nr;
              proc_control_B.tst_tmp_tmp = b_z[ab_tmp];
              ab_tmp_0 = 13 * bb_tmp + nr;
              proc_control_B.j_m = (bb_tmp + 1) * 13 + nr;
              proc_control_B.ab = (b_z[ab_tmp_0] * proc_control_B.ba +
                                   proc_control_B.tst_tmp_tmp) +
                b_z[proc_control_B.j_m] * proc_control_B.aa;
              b_z[ab_tmp] = proc_control_B.tst_tmp_tmp - proc_control_B.ab *
                proc_control_B.tst;
              b_z[ab_tmp_0] -= proc_control_B.ab * proc_control_B.bb;
              b_z[proc_control_B.j_m] -= proc_control_B.ab * proc_control_B.h12;
            }
          } else if (nr == 2) {
            for (proc_control_B.j_m = bb_tmp; proc_control_B.j_m < 14;
                 proc_control_B.j_m++) {
              ab_tmp = (proc_control_B.j_m - 1) * 13 + bb_tmp;
              proc_control_B.tst_tmp_tmp = b_h[ab_tmp - 1];
              proc_control_B.ab = b_h[ab_tmp] * proc_control_B.ba +
                proc_control_B.tst_tmp_tmp;
              b_h[ab_tmp - 1] = proc_control_B.tst_tmp_tmp - proc_control_B.ab *
                proc_control_B.tst;
              b_h[ab_tmp] -= proc_control_B.ab * proc_control_B.bb;
            }

            for (nr = 0; nr <= proc_control_B.i_j4; nr++) {
              int32_T ab_tmp_0;
              ab_tmp = (bb_tmp - 1) * 13 + nr;
              proc_control_B.tst_tmp_tmp = b_h[ab_tmp];
              ab_tmp_0 = 13 * bb_tmp + nr;
              proc_control_B.ab = b_h[ab_tmp_0] * proc_control_B.ba +
                proc_control_B.tst_tmp_tmp;
              b_h[ab_tmp] = proc_control_B.tst_tmp_tmp - proc_control_B.ab *
                proc_control_B.tst;
              b_h[ab_tmp_0] -= proc_control_B.ab * proc_control_B.bb;
            }

            for (nr = 0; nr < 13; nr++) {
              proc_control_B.ab = b_z[(bb_tmp - 1) * 13 + nr] + b_z[13 * bb_tmp
                + nr] * proc_control_B.ba;
              hoffset = (bb_tmp - 1) * 13 + nr;
              b_z[hoffset] -= proc_control_B.ab * proc_control_B.tst;
              hoffset = 13 * bb_tmp + nr;
              b_z[hoffset] -= proc_control_B.ab * proc_control_B.bb;
            }
          }
        }

        its++;
      }
    }

    if (!goto150) {
      *info = proc_control_B.i_j4 + 1;
      exitg1 = true;
    } else {
      if ((proc_control_B.i_j4 + 1 != proc_control_B.L_c) && (proc_control_B.L_c
           == proc_control_B.i_j4)) {
        proc_control_xdlanv2(b_h[(proc_control_B.i_j4 + 13 *
          (proc_control_B.i_j4 - 1)) - 1], b_h[(proc_control_B.i_j4 + 13 *
          proc_control_B.i_j4) - 1], b_h[proc_control_B.i_j4 + 13 *
                             (proc_control_B.i_j4 - 1)], b_h[proc_control_B.i_j4
                             + 13 * proc_control_B.i_j4], &proc_control_B.tst,
                             &proc_control_B.ba, &proc_control_B.bb,
                             &proc_control_B.ab, &b_h[(proc_control_B.i_j4 + 13 *
          (proc_control_B.i_j4 - 1)) - 1], &proc_control_B.aa,
                             &proc_control_B.h12, &proc_control_B.tst_tmp_tmp,
                             &proc_control_B.tst_tmp, &proc_control_B.sn);
        hoffset = 13 * proc_control_B.i_j4 + proc_control_B.i_j4;
        b_h[hoffset - 1] = proc_control_B.aa;
        its = (proc_control_B.i_j4 - 1) * 13;
        b_h[proc_control_B.i_j4 + its] = proc_control_B.h12;
        b_h[hoffset] = proc_control_B.tst_tmp_tmp;
        if (proc_control_B.i_j4 + 1 < 13) {
          hoffset = (proc_control_B.i_j4 + 1) * 13 + proc_control_B.i_j4;
          std::memcpy(&proc_control_B.b_h[0], &b_h[0], 169U * sizeof(real_T));
          proc_control_xrot(12 - proc_control_B.i_j4, proc_control_B.b_h,
                            hoffset, hoffset + 1, proc_control_B.tst_tmp,
                            proc_control_B.sn, b_h);
        }

        hoffset = proc_control_B.i_j4 * 13 + 1;
        std::memcpy(&proc_control_B.b_h[0], &b_h[0], 169U * sizeof(real_T));
        proc_control_xrot_p(proc_control_B.i_j4 - 1, proc_control_B.b_h, its + 1,
                            hoffset, proc_control_B.tst_tmp, proc_control_B.sn,
                            b_h);
        std::memcpy(&proc_control_B.b_h[0], &b_z[0], 169U * sizeof(real_T));
        proc_control_xrot_pr(proc_control_B.b_h, its + 1, hoffset,
                             proc_control_B.tst_tmp, proc_control_B.sn, b_z);
      }

      proc_control_B.i_j4 = proc_control_B.L_c - 2;
    }
  }
}

void proc_control::proc_control_schur(const real_T A[169], real_T V[169], real_T
  T[169])
{
  boolean_T p;
  p = true;
  for (proc_control_B.lastv = 0; proc_control_B.lastv < 169;
       proc_control_B.lastv++) {
    if (p) {
      proc_control_B.c_n = A[proc_control_B.lastv];
      if ((!std::isinf(proc_control_B.c_n)) && (!std::isnan(proc_control_B.c_n)))
      {
      } else {
        p = false;
      }
    } else {
      p = false;
    }
  }

  if (!p) {
    for (proc_control_B.i_my = 0; proc_control_B.i_my < 169; proc_control_B.i_my
         ++) {
      V[proc_control_B.i_my] = (rtNaN);
    }

    proc_control_B.ia_m = 2;
    proc_control_B.itau_l = 0;
    for (proc_control_B.lastv = 0; proc_control_B.lastv < 12;
         proc_control_B.lastv++) {
      if (proc_control_B.ia_m <= 13) {
        std::memset(&V[(proc_control_B.ia_m + proc_control_B.itau_l) + -1], 0,
                    (((proc_control_B.itau_l - proc_control_B.ia_m) -
                      proc_control_B.itau_l) + 14) * sizeof(real_T));
      }

      proc_control_B.ia_m++;
      proc_control_B.itau_l += 13;
    }

    for (proc_control_B.i_my = 0; proc_control_B.i_my < 169; proc_control_B.i_my
         ++) {
      T[proc_control_B.i_my] = (rtNaN);
    }
  } else {
    proc_control_xgehrd(A, proc_control_B.b_A_l5, proc_control_B.tau_ce);
    std::memcpy(&V[0], &proc_control_B.b_A_l5[0], 169U * sizeof(real_T));
    for (proc_control_B.itau_l = 11; proc_control_B.itau_l >= 0;
         proc_control_B.itau_l--) {
      proc_control_B.ia_m = (proc_control_B.itau_l + 1) * 13;
      for (proc_control_B.i_my = 0; proc_control_B.i_my <= proc_control_B.itau_l;
           proc_control_B.i_my++) {
        V[proc_control_B.ia_m + proc_control_B.i_my] = 0.0;
      }

      for (proc_control_B.iaii = proc_control_B.itau_l + 3; proc_control_B.iaii <
           14; proc_control_B.iaii++) {
        proc_control_B.lastv = proc_control_B.ia_m + proc_control_B.iaii;
        V[proc_control_B.lastv - 1] = V[proc_control_B.lastv - 14];
      }
    }

    proc_control_B.itau_l = 11;
    std::memset(&V[0], 0, 13U * sizeof(real_T));
    std::memset(&proc_control_B.work_j[0], 0, 13U * sizeof(real_T));
    V[0] = 1.0;
    for (proc_control_B.i_my = 11; proc_control_B.i_my >= 0; proc_control_B.i_my
         --) {
      proc_control_B.iaii = (proc_control_B.i_my * 13 + proc_control_B.i_my) +
        28;
      if (proc_control_B.i_my + 1 < 12) {
        V[proc_control_B.iaii - 14] = 1.0;
        if (proc_control_B.tau_ce[proc_control_B.itau_l] != 0.0) {
          boolean_T exitg2;
          proc_control_B.lastv = 12 - proc_control_B.i_my;
          proc_control_B.ia_m = (proc_control_B.iaii - proc_control_B.i_my) - 3;
          while ((proc_control_B.lastv > 0) && (V[proc_control_B.ia_m] == 0.0))
          {
            proc_control_B.lastv--;
            proc_control_B.ia_m--;
          }

          proc_control_B.lastc = 11 - proc_control_B.i_my;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.lastc > 0)) {
            int32_T exitg1;
            proc_control_B.coltop = (proc_control_B.lastc - 1) * 13 +
              proc_control_B.iaii;
            proc_control_B.ia_m = proc_control_B.coltop;
            do {
              exitg1 = 0;
              if (proc_control_B.ia_m <= (proc_control_B.coltop +
                   proc_control_B.lastv) - 1) {
                if (V[proc_control_B.ia_m - 1] != 0.0) {
                  exitg1 = 1;
                } else {
                  proc_control_B.ia_m++;
                }
              } else {
                proc_control_B.lastc--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          proc_control_B.lastv = 0;
          proc_control_B.lastc = 0;
        }

        if (proc_control_B.lastv > 0) {
          if (proc_control_B.lastc != 0) {
            std::memset(&proc_control_B.work_j[0], 0, proc_control_B.lastc *
                        sizeof(real_T));
            proc_control_B.coltop = (proc_control_B.lastc - 1) * 13 +
              proc_control_B.iaii;
            for (proc_control_B.iac = proc_control_B.iaii; proc_control_B.iac <=
                 proc_control_B.coltop; proc_control_B.iac += 13) {
              proc_control_B.c_n = 0.0;
              proc_control_B.d_j = proc_control_B.iac + proc_control_B.lastv;
              for (proc_control_B.ia_m = proc_control_B.iac; proc_control_B.ia_m
                   < proc_control_B.d_j; proc_control_B.ia_m++) {
                proc_control_B.c_n += V[((proc_control_B.iaii +
                  proc_control_B.ia_m) - proc_control_B.iac) - 14] *
                  V[proc_control_B.ia_m - 1];
              }

              proc_control_B.ia_m = div_nde_s32_floor(proc_control_B.iac -
                proc_control_B.iaii, 13);
              proc_control_B.work_j[proc_control_B.ia_m] += proc_control_B.c_n;
            }
          }

          std::memcpy(&proc_control_B.V[0], &V[0], 169U * sizeof(real_T));
          proc_control_xgerc(proc_control_B.lastv, proc_control_B.lastc,
                             -proc_control_B.tau_ce[proc_control_B.itau_l],
                             proc_control_B.iaii - 13, proc_control_B.work_j,
                             proc_control_B.V, proc_control_B.iaii, V);
        }

        proc_control_B.coltop = proc_control_B.iaii - proc_control_B.i_my;
        for (proc_control_B.ia_m = proc_control_B.iaii - 12; proc_control_B.ia_m
             <= proc_control_B.coltop - 2; proc_control_B.ia_m++) {
          V[proc_control_B.ia_m - 1] *=
            -proc_control_B.tau_ce[proc_control_B.itau_l];
        }
      }

      V[proc_control_B.iaii - 14] = 1.0 -
        proc_control_B.tau_ce[proc_control_B.itau_l];
      proc_control_B.coltop = proc_control_B.i_my - 1;
      for (proc_control_B.lastv = 0; proc_control_B.lastv <=
           proc_control_B.coltop; proc_control_B.lastv++) {
        V[(proc_control_B.iaii - proc_control_B.lastv) - 15] = 0.0;
      }

      proc_control_B.itau_l--;
    }

    std::memcpy(&proc_control_B.V[0], &V[0], 169U * sizeof(real_T));
    proc_control_eml_dlahqr(proc_control_B.b_A_l5, proc_control_B.V, T,
      &proc_control_B.lastv, V);
    proc_control_B.ia_m = 4;
    proc_control_B.itau_l = 0;
    for (proc_control_B.lastv = 0; proc_control_B.lastv < 10;
         proc_control_B.lastv++) {
      if (proc_control_B.ia_m <= 13) {
        std::memset(&T[(proc_control_B.ia_m + proc_control_B.itau_l) + -1], 0,
                    (((proc_control_B.itau_l - proc_control_B.ia_m) -
                      proc_control_B.itau_l) + 14) * sizeof(real_T));
      }

      proc_control_B.ia_m++;
      proc_control_B.itau_l += 13;
    }
  }
}

void proc_control::proc_control_expm(real_T A[169], real_T F[169])
{
  boolean_T recomputeDiags;
  recomputeDiags = true;
  for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 169;
       proc_control_B.b_k_c++) {
    if (recomputeDiags) {
      proc_control_B.x_j = A[proc_control_B.b_k_c];
      if ((!std::isinf(proc_control_B.x_j)) && (!std::isnan(proc_control_B.x_j)))
      {
      } else {
        recomputeDiags = false;
      }
    } else {
      recomputeDiags = false;
    }
  }

  if (!recomputeDiags) {
    for (proc_control_B.i_iz = 0; proc_control_B.i_iz < 169; proc_control_B.i_iz
         ++) {
      F[proc_control_B.i_iz] = (rtNaN);
    }
  } else {
    int32_T exitg1;
    boolean_T exitg2;
    proc_control_B.b_k_c = 1;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.b_k_c - 1 < 13)) {
      proc_control_B.i_iz = 1;
      do {
        exitg1 = 0;
        if (proc_control_B.i_iz - 1 < 13) {
          if ((proc_control_B.i_iz != proc_control_B.b_k_c) && (!(A
                [((proc_control_B.b_k_c - 1) * 13 + proc_control_B.i_iz) - 1] ==
                0.0))) {
            recomputeDiags = false;
            exitg1 = 1;
          } else {
            proc_control_B.i_iz++;
          }
        } else {
          proc_control_B.b_k_c++;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    if (recomputeDiags) {
      std::memset(&F[0], 0, 169U * sizeof(real_T));
      proc_control_B.eint = 0;
      for (proc_control_B.i_iz = 0; proc_control_B.i_iz < 13;
           proc_control_B.i_iz++) {
        F[proc_control_B.eint] = std::exp(A[proc_control_B.eint]);
        proc_control_B.eint += 14;
      }
    } else {
      recomputeDiags = true;
      proc_control_B.b_k_c = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.b_k_c < 13)) {
        proc_control_B.i_iz = 0;
        do {
          exitg1 = 0;
          if (proc_control_B.i_iz <= proc_control_B.b_k_c) {
            if (!(A[13 * proc_control_B.b_k_c + proc_control_B.i_iz] == A[13 *
                  proc_control_B.i_iz + proc_control_B.b_k_c])) {
              recomputeDiags = false;
              exitg1 = 1;
            } else {
              proc_control_B.i_iz++;
            }
          } else {
            proc_control_B.b_k_c++;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }

      if (recomputeDiags) {
        proc_control_schur(A, proc_control_B.b_A2, proc_control_B.b_A4_l);
        proc_control_B.i_iz = 0;
        proc_control_B.b_k_k = 0;
        for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 13;
             proc_control_B.b_k_c++) {
          proc_control_B.exptj = std::exp
            (proc_control_B.b_A4_l[proc_control_B.i_iz]);
          for (proc_control_B.eint = 0; proc_control_B.eint < 13;
               proc_control_B.eint++) {
            proc_control_B.b_A2_tmp = proc_control_B.eint + proc_control_B.b_k_k;
            F[proc_control_B.b_A2_tmp] =
              proc_control_B.b_A2[proc_control_B.b_A2_tmp] *
              proc_control_B.exptj;
          }

          proc_control_B.i_iz += 14;
          proc_control_B.b_k_k += 13;
        }

        proc_control_B.i_iz = 0;
        for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 13;
             proc_control_B.b_k_k++) {
          std::memset(&proc_control_B.b_A4[proc_control_B.i_iz], 0, 13U * sizeof
                      (real_T));
          proc_control_B.i_iz += 13;
        }

        proc_control_B.i_iz = 0;
        for (proc_control_B.i5 = 0; proc_control_B.i5 < 13; proc_control_B.i5++)
        {
          proc_control_B.i4 = 0;
          for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 13;
               proc_control_B.b_k_k++) {
            for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 13;
                 proc_control_B.b_k_c++) {
              proc_control_B.b_A2_tmp = proc_control_B.b_k_c + proc_control_B.i4;
              proc_control_B.b_A4[proc_control_B.b_A2_tmp] +=
                F[proc_control_B.b_k_c + proc_control_B.i_iz] *
                proc_control_B.b_A2[proc_control_B.b_k_k + proc_control_B.i_iz];
            }

            proc_control_B.i4 += 13;
          }

          proc_control_B.i_iz += 13;
        }

        std::memcpy(&F[0], &proc_control_B.b_A4[0], 169U * sizeof(real_T));
        proc_control_B.i_iz = 0;
        for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 13;
             proc_control_B.b_k_k++) {
          proc_control_B.b_k_c = 0;
          for (proc_control_B.i5 = 0; proc_control_B.i5 < 13; proc_control_B.i5
               ++) {
            proc_control_B.b_A2_tmp = proc_control_B.i5 + proc_control_B.i_iz;
            proc_control_B.b_A4[proc_control_B.b_A2_tmp] =
              (F[proc_control_B.b_k_c + proc_control_B.b_k_k] +
               F[proc_control_B.b_A2_tmp]) / 2.0;
            proc_control_B.b_k_c += 13;
          }

          proc_control_B.i_iz += 13;
        }

        std::memcpy(&F[0], &proc_control_B.b_A4[0], 169U * sizeof(real_T));
      } else {
        boolean_T guard1{ false };

        boolean_T guard2{ false };

        boolean_T guard3{ false };

        boolean_T guard4{ false };

        recomputeDiags = true;
        proc_control_B.j = 3;
        while (recomputeDiags && (proc_control_B.j <= 13)) {
          proc_control_B.i_iz = proc_control_B.j;
          while (recomputeDiags && (proc_control_B.i_iz <= 13)) {
            recomputeDiags = (A[((proc_control_B.j - 3) * 13 +
                                 proc_control_B.i_iz) - 1] == 0.0);
            proc_control_B.i_iz++;
          }

          proc_control_B.j++;
        }

        if (recomputeDiags) {
          proc_control_B.b_k_c = 1;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.b_k_c - 1 < 12)) {
            proc_control_B.i_iz = (proc_control_B.b_k_c - 1) * 13 +
              proc_control_B.b_k_c;
            proc_control_B.exptj = A[proc_control_B.i_iz];
            if (proc_control_B.exptj != 0.0) {
              if ((proc_control_B.b_k_c != 12) && (A[(13 * proc_control_B.b_k_c
                    + proc_control_B.b_k_c) + 1] != 0.0)) {
                recomputeDiags = false;
                exitg2 = true;
              } else {
                proc_control_B.b_k_k = 13 * proc_control_B.b_k_c +
                  proc_control_B.b_k_c;
                if (A[proc_control_B.i_iz - 1] != A[proc_control_B.b_k_k]) {
                  recomputeDiags = false;
                  exitg2 = true;
                } else {
                  proc_control_B.x_j = A[proc_control_B.b_k_k - 1];
                  if (!std::isnan(proc_control_B.exptj)) {
                    if (proc_control_B.exptj < 0.0) {
                      proc_control_B.exptj = -1.0;
                    } else {
                      proc_control_B.exptj = (proc_control_B.exptj > 0.0);
                    }
                  }

                  if (!std::isnan(proc_control_B.x_j)) {
                    if (proc_control_B.x_j < 0.0) {
                      proc_control_B.x_j = -1.0;
                    } else {
                      proc_control_B.x_j = (proc_control_B.x_j > 0.0);
                    }
                  }

                  if (proc_control_B.exptj * proc_control_B.x_j != -1.0) {
                    recomputeDiags = false;
                    exitg2 = true;
                  } else {
                    proc_control_B.b_k_c++;
                  }
                }
              }
            } else {
              proc_control_B.b_k_c++;
            }
          }
        }

        proc_control_B.exptj = 0.0;
        for (proc_control_B.i_iz = 0; proc_control_B.i_iz < 13;
             proc_control_B.i_iz++) {
          std::memset(&proc_control_B.b_A2[proc_control_B.i_iz * 13], 0, 13U *
                      sizeof(real_T));
          for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 13;
               proc_control_B.b_k_c++) {
            for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 13;
                 proc_control_B.b_k_k++) {
              proc_control_B.b_A2_tmp = 13 * proc_control_B.i_iz +
                proc_control_B.b_k_k;
              proc_control_B.b_A2[proc_control_B.b_A2_tmp] += A[13 *
                proc_control_B.b_k_c + proc_control_B.b_k_k] * A[13 *
                proc_control_B.i_iz + proc_control_B.b_k_c];
            }
          }

          std::memset(&proc_control_B.b_A4[proc_control_B.i_iz * 13], 0, 13U *
                      sizeof(real_T));
        }

        proc_control_B.i_iz = 0;
        for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 13;
             proc_control_B.b_k_c++) {
          proc_control_B.i5 = 0;
          for (proc_control_B.i4 = 0; proc_control_B.i4 < 13; proc_control_B.i4
               ++) {
            for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 13;
                 proc_control_B.b_k_k++) {
              proc_control_B.b_A2_tmp = proc_control_B.b_k_k +
                proc_control_B.i_iz;
              proc_control_B.b_A4[proc_control_B.b_A2_tmp] +=
                proc_control_B.b_A2[proc_control_B.b_k_k + proc_control_B.i5] *
                proc_control_B.b_A2[proc_control_B.i4 + proc_control_B.i_iz];
            }

            proc_control_B.b_A6[proc_control_B.i4 + proc_control_B.i_iz] = 0.0;
            proc_control_B.i5 += 13;
          }

          proc_control_B.i_iz += 13;
        }

        proc_control_B.i_iz = 0;
        for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 13;
             proc_control_B.b_k_k++) {
          proc_control_B.b_k_c = 0;
          for (proc_control_B.i5 = 0; proc_control_B.i5 < 13; proc_control_B.i5
               ++) {
            for (proc_control_B.i4 = 0; proc_control_B.i4 < 13;
                 proc_control_B.i4++) {
              proc_control_B.b_A2_tmp = proc_control_B.i4 + proc_control_B.i_iz;
              proc_control_B.b_A6[proc_control_B.b_A2_tmp] +=
                proc_control_B.b_A4[proc_control_B.i4 + proc_control_B.b_k_c] *
                proc_control_B.b_A2[proc_control_B.i5 + proc_control_B.i_iz];
            }

            proc_control_B.b_k_c += 13;
          }

          proc_control_B.i_iz += 13;
        }

        proc_control_B.d6_a = rt_powd_snf(proc_control_norm(proc_control_B.b_A6),
          0.16666666666666666);
        proc_control_B.eta1 = std::fmax(rt_powd_snf(proc_control_norm
          (proc_control_B.b_A4), 0.25), proc_control_B.d6_a);
        guard1 = false;
        guard2 = false;
        guard3 = false;
        guard4 = false;
        if (proc_control_B.eta1 <= 0.01495585217958292) {
          for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 169;
               proc_control_B.b_k_c++) {
            proc_control_B.y_o[proc_control_B.b_k_c] = std::abs
              (A[proc_control_B.b_k_c]);
            proc_control_B.dv6[proc_control_B.b_k_c] = 0.19285012468241128 *
              proc_control_B.y_o[proc_control_B.b_k_c];
          }

          proc_control_mpower(proc_control_B.dv6, 7.0, proc_control_B.y_o);
          proc_control_B.x_j = proc_control_log2(proc_control_norm
            (proc_control_B.y_o) / proc_control_norm(A) * 2.0 /
            2.2204460492503131E-16) / 6.0;
          if (std::fmax(std::ceil(proc_control_B.x_j), 0.0) == 0.0) {
            proc_control_B.eint = 3;
          } else {
            guard4 = true;
          }
        } else {
          guard4 = true;
        }

        if (guard4) {
          if (proc_control_B.eta1 <= 0.253939833006323) {
            for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 169;
                 proc_control_B.b_k_c++) {
              proc_control_B.y_o[proc_control_B.b_k_c] = std::abs
                (A[proc_control_B.b_k_c]);
              proc_control_B.dv6[proc_control_B.b_k_c] = 0.12321872304378752 *
                proc_control_B.y_o[proc_control_B.b_k_c];
            }

            proc_control_mpower(proc_control_B.dv6, 11.0, proc_control_B.y_o);
            proc_control_B.x_j = proc_control_log2(proc_control_norm
              (proc_control_B.y_o) / proc_control_norm(A) * 2.0 /
              2.2204460492503131E-16) / 10.0;
            if (std::fmax(std::ceil(proc_control_B.x_j), 0.0) == 0.0) {
              proc_control_B.eint = 5;
            } else {
              guard3 = true;
            }
          } else {
            guard3 = true;
          }
        }

        if (guard3) {
          proc_control_mpower(proc_control_B.b_A4, 2.0, proc_control_B.dv6);
          proc_control_B.eta1 = rt_powd_snf(proc_control_norm(proc_control_B.dv6),
            0.125);
          proc_control_B.d6_a = std::fmax(proc_control_B.d6_a,
            proc_control_B.eta1);
          if (proc_control_B.d6_a <= 0.95041789961629319) {
            for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 169;
                 proc_control_B.b_k_c++) {
              proc_control_B.y_o[proc_control_B.b_k_c] = std::abs
                (A[proc_control_B.b_k_c]);
              proc_control_B.dv6[proc_control_B.b_k_c] = 0.090475336558796943 *
                proc_control_B.y_o[proc_control_B.b_k_c];
            }

            proc_control_mpower(proc_control_B.dv6, 15.0, proc_control_B.y_o);
            proc_control_B.x_j = proc_control_log2(proc_control_norm
              (proc_control_B.y_o) / proc_control_norm(A) * 2.0 /
              2.2204460492503131E-16) / 14.0;
            if (std::fmax(std::ceil(proc_control_B.x_j), 0.0) == 0.0) {
              proc_control_B.eint = 7;
            } else {
              guard2 = true;
            }
          } else {
            guard2 = true;
          }
        }

        if (guard2) {
          if (proc_control_B.d6_a <= 2.097847961257068) {
            for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 169;
                 proc_control_B.b_k_c++) {
              proc_control_B.y_o[proc_control_B.b_k_c] = std::abs
                (A[proc_control_B.b_k_c]);
              proc_control_B.dv6[proc_control_B.b_k_c] = 0.071467735648795785 *
                proc_control_B.y_o[proc_control_B.b_k_c];
            }

            proc_control_mpower(proc_control_B.dv6, 19.0, proc_control_B.y_o);
            proc_control_B.x_j = proc_control_log2(proc_control_norm
              (proc_control_B.y_o) / proc_control_norm(A) * 2.0 /
              2.2204460492503131E-16) / 18.0;
            if (std::fmax(std::ceil(proc_control_B.x_j), 0.0) == 0.0) {
              proc_control_B.eint = 9;
            } else {
              guard1 = true;
            }
          } else {
            guard1 = true;
          }
        }

        if (guard1) {
          for (proc_control_B.i_iz = 0; proc_control_B.i_iz < 13;
               proc_control_B.i_iz++) {
            std::memset(&proc_control_B.b_A4_l[proc_control_B.i_iz * 13], 0, 13U
                        * sizeof(real_T));
            for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 13;
                 proc_control_B.b_k_c++) {
              for (proc_control_B.b_k_k = 0; proc_control_B.b_k_k < 13;
                   proc_control_B.b_k_k++) {
                proc_control_B.b_A2_tmp = 13 * proc_control_B.i_iz +
                  proc_control_B.b_k_k;
                proc_control_B.b_A4_l[proc_control_B.b_A2_tmp] +=
                  proc_control_B.b_A4[13 * proc_control_B.b_k_c +
                  proc_control_B.b_k_k] * proc_control_B.b_A6[13 *
                  proc_control_B.i_iz + proc_control_B.b_k_c];
              }
            }
          }

          proc_control_B.x_j = proc_control_log2(std::fmin(proc_control_B.d6_a,
            std::fmax(proc_control_B.eta1, rt_powd_snf(proc_control_norm
            (proc_control_B.b_A4_l), 0.1))) / 5.3719203511481517);
          proc_control_B.exptj = std::fmax(std::ceil(proc_control_B.x_j), 0.0);
          proc_control_B.x_j = rt_powd_snf(2.0, proc_control_B.exptj);
          for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 169;
               proc_control_B.b_k_c++) {
            proc_control_B.b_A4_l[proc_control_B.b_k_c] = A[proc_control_B.b_k_c]
              / proc_control_B.x_j;
            proc_control_B.y_o[proc_control_B.b_k_c] = std::abs
              (proc_control_B.b_A4_l[proc_control_B.b_k_c]);
            proc_control_B.dv6[proc_control_B.b_k_c] = 0.05031554467093536 *
              proc_control_B.y_o[proc_control_B.b_k_c];
          }

          proc_control_mpower(proc_control_B.dv6, 27.0, proc_control_B.y_o);
          proc_control_B.x_j = proc_control_log2(proc_control_norm
            (proc_control_B.y_o) / proc_control_norm(proc_control_B.b_A4_l) *
            2.0 / 2.2204460492503131E-16) / 26.0;
          proc_control_B.exptj += std::fmax(std::ceil(proc_control_B.x_j), 0.0);
          if (std::isinf(proc_control_B.exptj)) {
            proc_control_B.x_j = proc_control_norm(A) / 5.3719203511481517;
            if ((!std::isinf(proc_control_B.x_j)) && (!std::isnan
                 (proc_control_B.x_j))) {
              proc_control_B.x_j = frexp(proc_control_B.x_j,
                &proc_control_B.eint);
              proc_control_B.exptj = proc_control_B.eint;
            } else {
              proc_control_B.exptj = 0.0;
            }

            if (proc_control_B.x_j == 0.5) {
              proc_control_B.exptj--;
            }
          }

          proc_control_B.eint = 13;
        }

        if (proc_control_B.exptj != 0.0) {
          proc_control_B.x_j = rt_powd_snf(2.0, proc_control_B.exptj);
          for (proc_control_B.i_iz = 0; proc_control_B.i_iz < 169;
               proc_control_B.i_iz++) {
            A[proc_control_B.i_iz] /= proc_control_B.x_j;
          }

          proc_control_B.x_j = rt_powd_snf(2.0, 2.0 * proc_control_B.exptj);
          for (proc_control_B.i_iz = 0; proc_control_B.i_iz < 169;
               proc_control_B.i_iz++) {
            proc_control_B.b_A2[proc_control_B.i_iz] /= proc_control_B.x_j;
          }

          proc_control_B.x_j = rt_powd_snf(2.0, 4.0 * proc_control_B.exptj);
          for (proc_control_B.i_iz = 0; proc_control_B.i_iz < 169;
               proc_control_B.i_iz++) {
            proc_control_B.b_A4[proc_control_B.i_iz] /= proc_control_B.x_j;
          }

          proc_control_B.x_j = rt_powd_snf(2.0, 6.0 * proc_control_B.exptj);
          for (proc_control_B.i_iz = 0; proc_control_B.i_iz < 169;
               proc_control_B.i_iz++) {
            proc_control_B.b_A6[proc_control_B.i_iz] /= proc_control_B.x_j;
          }
        }

        if (recomputeDiags) {
          for (proc_control_B.i_iz = 0; proc_control_B.i_iz < 12;
               proc_control_B.i_iz++) {
            proc_control_B.blockFormat[proc_control_B.i_iz] = 0;
          }

          proc_control_B.j = 0;
          while (proc_control_B.j + 1 < 12) {
            proc_control_B.x_j = A[(13 * proc_control_B.j + proc_control_B.j) +
              1];
            if (proc_control_B.x_j != 0.0) {
              proc_control_B.blockFormat[proc_control_B.j] = 2;
              proc_control_B.blockFormat[proc_control_B.j + 1] = 0;
              proc_control_B.j += 2;
            } else if ((proc_control_B.x_j == 0.0) && (A[((proc_control_B.j + 1)
              * 13 + proc_control_B.j) + 2] == 0.0)) {
              proc_control_B.blockFormat[proc_control_B.j] = 1;
              proc_control_B.j++;
            } else {
              proc_control_B.blockFormat[proc_control_B.j] = 0;
              proc_control_B.j++;
            }
          }

          if (A[155] != 0.0) {
            proc_control_B.blockFormat[11] = 2;
          } else if ((proc_control_B.blockFormat[10] == 0) ||
                     (proc_control_B.blockFormat[10] == 1)) {
            proc_control_B.blockFormat[11] = 1;
          }
        }

        proc_control_padeApproximation(A, proc_control_B.b_A2,
          proc_control_B.b_A4, proc_control_B.b_A6, proc_control_B.eint, F);
        if (recomputeDiags) {
          std::memcpy(&proc_control_B.b_A2[0], &F[0], 169U * sizeof(real_T));
          proc_control_recomputeBlockDiag(A, proc_control_B.b_A2,
            proc_control_B.blockFormat, F);
        }

        proc_control_B.eint = static_cast<int32_T>(proc_control_B.exptj) - 1;
        for (proc_control_B.j = 0; proc_control_B.j <= proc_control_B.eint;
             proc_control_B.j++) {
          for (proc_control_B.i_iz = 0; proc_control_B.i_iz < 13;
               proc_control_B.i_iz++) {
            proc_control_B.b_k_k = 0;
            for (proc_control_B.b_k_c = 0; proc_control_B.b_k_c < 13;
                 proc_control_B.b_k_c++) {
              proc_control_B.b_A2_tmp = proc_control_B.b_k_k +
                proc_control_B.i_iz;
              proc_control_B.b_A4[proc_control_B.b_A2_tmp] = 0.0;
              proc_control_B.i5 = 0;
              for (proc_control_B.i4 = 0; proc_control_B.i4 < 13;
                   proc_control_B.i4++) {
                proc_control_B.b_A4[proc_control_B.b_A2_tmp] +=
                  F[proc_control_B.i5 + proc_control_B.i_iz] *
                  F[proc_control_B.i4 + proc_control_B.b_k_k];
                proc_control_B.i5 += 13;
              }

              proc_control_B.b_k_k += 13;
            }
          }

          std::memcpy(&F[0], &proc_control_B.b_A4[0], 169U * sizeof(real_T));
          if (recomputeDiags) {
            for (proc_control_B.i_iz = 0; proc_control_B.i_iz < 169;
                 proc_control_B.i_iz++) {
              A[proc_control_B.i_iz] *= 2.0;
            }

            std::memcpy(&proc_control_B.b_A2[0], &F[0], 169U * sizeof(real_T));
            proc_control_recomputeBlockDiag(A, proc_control_B.b_A2,
              proc_control_B.blockFormat, F);
          }
        }
      }
    }
  }
}

void proc_control::proc_control_AUV7QuatSimFcn(const real_T in1[13], const
  real_T in2[8], real_T out1[13])
{
  real_T out1_tmp;
  real_T out1_tmp_0;
  real_T out1_tmp_1;
  real_T out1_tmp_2;
  real_T out1_tmp_3;

  // AUV7QuatSimFcn
  //     OUT1 = AUV7QuatSimFcn(IN1,IN2)
  //     This function was generated by the Symbolic Math Toolbox version 9.0.
  //     02-Apr-2022 21:17:20
  proc_control_B.t8_g5 = in1[4] * in1[4];
  proc_control_B.t9_e = in1[5] * in1[5];
  proc_control_B.t11_eq = in1[4] * in1[5] * 2.0;
  proc_control_B.t12_tmp_d = in1[4] * in1[6];
  proc_control_B.t12_g = proc_control_B.t12_tmp_d * 2.0;
  proc_control_B.t13_tmp_j = in1[5] * in1[6];
  proc_control_B.t13_g = proc_control_B.t13_tmp_j * 2.0;
  proc_control_B.t14_tmp_n = in1[3] * in1[4];
  proc_control_B.t14_d = proc_control_B.t14_tmp_n * 2.0;
  proc_control_B.t15_tmp_j = in1[3] * in1[5];
  proc_control_B.t15_n = proc_control_B.t15_tmp_j * 2.0;
  proc_control_B.t16_p2 = in1[3] * in1[6] * 2.0;
  proc_control_B.t25_b = in1[11] / 500.0;
  proc_control_B.t27_i = in1[10] / 1000.0;
  proc_control_B.t33_bi = in1[12] * 0.009;
  proc_control_B.t45_jv = in1[7] * 56.2448;
  proc_control_B.t53_g = in1[8] * 56.3956;
  proc_control_B.t54_n = in1[9] * 59.5495;
  proc_control_B.t17_p = proc_control_B.t8_g5 * 2.0;
  proc_control_B.t18_f = proc_control_B.t9_e * 2.0;
  proc_control_B.t19_fs = in1[6] * in1[6] * 2.0;
  proc_control_B.t59_a = proc_control_B.t25_b + proc_control_B.t27_i;
  proc_control_B.t25_b += proc_control_B.t33_bi;
  proc_control_B.t27_i += proc_control_B.t33_bi;
  proc_control_B.t33_bi = in1[11] * 0.39402 + proc_control_B.t45_jv;
  proc_control_B.t64_g3 = in1[10] * 0.08756 + proc_control_B.t54_n;
  proc_control_B.t65_m = in1[12] * 0.04378 + proc_control_B.t53_g;
  proc_control_B.t67_d = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 1.7294;
  proc_control_B.t45_jv = in1[12] * 0.08756 + -proc_control_B.t45_jv;
  proc_control_B.t54_n = in1[11] * 0.04378 + -proc_control_B.t54_n;
  proc_control_B.t53_g = in1[10] * 0.39402 + -proc_control_B.t53_g;
  proc_control_B.t69_e = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.9623;
  proc_control_B.t70_e = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    3.2523;
  out1[0] = (((proc_control_B.t18_f + proc_control_B.t19_fs) - 1.0) * -in1[7] +
             (proc_control_B.t12_g + proc_control_B.t15_n) * in1[9]) +
    (proc_control_B.t11_eq - proc_control_B.t16_p2) * in1[8];
  out1[1] = ((proc_control_B.t11_eq + proc_control_B.t16_p2) * in1[7] -
             ((proc_control_B.t17_p + proc_control_B.t19_fs) - 1.0) * in1[8]) +
    (proc_control_B.t13_g - proc_control_B.t14_d) * in1[9];
  out1[2] = ((proc_control_B.t13_g + proc_control_B.t14_d) * in1[8] -
             ((proc_control_B.t17_p + proc_control_B.t18_f) - 1.0) * in1[9]) +
    (proc_control_B.t12_g - proc_control_B.t15_n) * in1[7];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_B.t11_eq = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) *
    in1[10];
  proc_control_B.t12_g = in1[10] * proc_control_B.t25_b;
  proc_control_B.t13_g = in1[10] * proc_control_B.t64_g3;
  proc_control_B.t14_d = in1[10] * proc_control_B.t53_g;
  proc_control_B.t15_n = in1[10] * proc_control_B.t69_e;
  proc_control_B.t16_p2 = in1[10] * proc_control_B.t70_e;
  proc_control_B.t17_p = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) * in1
    [11];
  proc_control_B.t18_f = in1[11] * proc_control_B.t27_i;
  proc_control_B.t19_fs = in1[11] * proc_control_B.t33_bi;
  proc_control_B.out1_tmp_pm = in1[11] * proc_control_B.t54_n;
  proc_control_B.out1_tmp_aw = in1[11] * proc_control_B.t67_d;
  proc_control_B.t70_e *= in1[11];
  proc_control_B.out1_tmp_df = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  proc_control_B.out1_tmp_pz = in1[12] * proc_control_B.t59_a;
  out1_tmp = in1[12] * proc_control_B.t45_jv;
  out1_tmp_0 = in1[12] * proc_control_B.t65_m;
  proc_control_B.t67_d *= in1[12];
  proc_control_B.t69_e *= in1[12];
  out1_tmp_1 = (std::abs(in1[7]) * 1.17 + 20.0) * in1[7];
  proc_control_B.t25_b *= in1[7];
  proc_control_B.t65_m *= in1[7];
  proc_control_B.t54_n *= in1[7];
  out1_tmp_2 = (std::abs(in1[8]) * 1.17 + 20.0) * in1[8];
  proc_control_B.t27_i *= in1[8];
  proc_control_B.t45_jv *= in1[8];
  proc_control_B.t64_g3 *= in1[8];
  out1_tmp_3 = (std::abs(in1[9]) * 0.756 + 23.333333333333332) * in1[9];
  proc_control_B.t59_a *= in1[9];
  proc_control_B.t33_bi *= in1[9];
  proc_control_B.t53_g *= in1[9];
  out1[7] = ((((((((((((((((((((((((in2[0] * -0.0001437270800342623 + in2[1] *
    -0.00014420606190511319) + in2[2] * 0.00019106203022123869) + (in2[3] *
    2.2850322404196561E-5 - in2[4] * 0.00064004748139144052)) + (in2[5] *
    -0.00064697977539739777 + in2[6] * 0.00065256195255307707)) + (in2[7] *
    0.00063446530423575689 - proc_control_B.t8_g5 * 0.0031578330474472342)) +
    (in2[0] * 1.4142135623730951 * 0.00890273691779643 + proc_control_B.t9_e *
    -0.0031578330474472342)) + (in2[1] * 1.4142135623730951 *
    0.0089024739911429118 + in2[2] * 1.4142135623730951 * 0.00890273691779643))
    + (in2[3] * 1.4142135623730951 * 0.0090210789390863678 -
       proc_control_B.t12_tmp_d * 0.446279612603122)) +
    (proc_control_B.t13_tmp_j * 0.00024221914396928331 +
     proc_control_B.t14_tmp_n * 0.00024221914396928331)) +
    (proc_control_B.t15_tmp_j * 0.446279612603122 - proc_control_B.t11_eq *
     1.5506047654670649E-5)) + (proc_control_B.t12_g * -0.77951213359336435 -
    proc_control_B.t13_g * 2.6292665351887938E-7)) + (proc_control_B.t14_d *
    -2.651147772206629E-6 - proc_control_B.t15_n * 0.00047824575783651541)) +
                        (proc_control_B.t17_p * 0.0035750757133023231 +
    proc_control_B.t16_p2 * -0.0035750757133023231)) + (proc_control_B.t18_f *
    1.151092889105654E-5 - proc_control_B.t19_fs * 2.651147772206629E-6)) +
                      (proc_control_B.out1_tmp_pm * 0.017805210908939339 +
                       proc_control_B.out1_tmp_aw * 0.00047824575783651541)) +
                     (proc_control_B.t70_e * -1.5506047654670649E-5 -
                      proc_control_B.out1_tmp_df * 0.00047824575783651541)) +
                    (proc_control_B.out1_tmp_pz * 0.0001160672494672062 -
                     out1_tmp * 2.6292665351887938E-7)) + (out1_tmp_0 *
    0.017805210908939339 + proc_control_B.t67_d * 0.0035750757133023231)) +
                  (proc_control_B.t69_e * 1.5506047654670649E-5 - out1_tmp_1 *
                   0.017805210908939339)) + (proc_control_B.t25_b *
    0.0006788547663214811 - proc_control_B.t65_m * 0.00047824575783651541)) +
                (out1_tmp_2 * 2.6292665351887938E-7 + proc_control_B.t54_n *
                 0.0035750757133023231)) + (proc_control_B.t27_i *
    -0.1565168147283757 - proc_control_B.t45_jv * 0.00047824575783651541)) +
              (out1_tmp_3 * 2.651147772206629E-6 + proc_control_B.t64_g3 *
               -1.5506047654670649E-5)) + (proc_control_B.t59_a *
              0.020937599278082641 + proc_control_B.t33_bi *
              0.0035750757133023231)) + (proc_control_B.t53_g *
    -1.5506047654670649E-5 + 0.0015789165237236171);
  out1[8] = (((((((((((((((((((((((((in2[0] * 5.9258722303931477E-5 + in2[1] *
    0.0001111188064663891) + in2[2] * -0.0001115965075552979) + (in2[3] *
    2.5863772577036511E-5 - in2[4] * 0.00071746300208054158)) + (in2[5] *
    0.00071144911343470516 + in2[6] * 0.00074561291602257885)) + in2[7] *
    -0.00073959902737674255) + (proc_control_B.t8_g5 * -0.0071031949637203823 -
    proc_control_B.t9_e * 0.0071031949637203823)) + (in2[0] * 1.4142135623730951
    * -0.0088803050905274933 + in2[1] * 1.4142135623730951 *
    0.0088800421638739746)) + (in2[2] * 1.4142135623730951 *
    -0.0088803050905274933 + in2[3] * 1.4142135623730951 * 0.0088195136848327766))
    + (proc_control_B.t12_tmp_d * 0.0002372117866458812 -
       proc_control_B.t13_tmp_j * 0.44996381418158943)) +
    (proc_control_B.t14_tmp_n * -0.44996381418158943 - proc_control_B.t15_tmp_j *
     0.0002372117866458812)) + (proc_control_B.t11_eq * -0.0040473945262702333 +
    proc_control_B.t12_g * 1.151092889105654E-5)) + (proc_control_B.t13_g *
    0.017760347254401471 - proc_control_B.t14_d * 5.9634626722397381E-6)) +
    (proc_control_B.t15_n * 0.00024406644774676309 - proc_control_B.t16_p2 *
     1.670524623843438E-5)) + (proc_control_B.t17_p * 1.670524623843438E-5 -
    proc_control_B.t18_f * 0.7775480027976962)) + (proc_control_B.t19_fs *
    -5.9634626722397381E-6 - proc_control_B.out1_tmp_pm * 2.6292665351887938E-7))
                      + (proc_control_B.out1_tmp_aw * -0.00024406644774676309 -
    proc_control_B.t70_e * 0.0040473945262702333)) + (proc_control_B.out1_tmp_df
    * 0.00024406644774676309 + proc_control_B.out1_tmp_pz *
    0.00026108039579065569)) + (out1_tmp * 0.017760347254401471 - out1_tmp_0 *
    2.6292665351887938E-7)) + (proc_control_B.t67_d * 1.670524623843438E-5 +
    proc_control_B.t69_e * 0.0040473945262702333)) + (out1_tmp_1 *
    2.6292665351887938E-7 + proc_control_B.t25_b * 0.1771949323601108)) +
                 (proc_control_B.t65_m * 0.00024406644774676309 +
                  proc_control_B.t54_n * 1.670524623843438E-5)) + (out1_tmp_2 *
    -0.017760347254401471 - proc_control_B.t27_i * 0.000731355680318657)) +
               (proc_control_B.t45_jv * 0.00024406644774676309 -
                proc_control_B.t64_g3 * 0.0040473945262702333)) + (out1_tmp_3 *
    5.9634626722397381E-6 - proc_control_B.t59_a * 0.01068522908235329)) +
             (proc_control_B.t33_bi * 1.670524623843438E-5 -
              proc_control_B.t53_g * 0.0040473945262702333)) +
    0.0035515974818601912;
  out1[9] = ((((((((((((((((((((((((in2[0] * 2.6122776886482448E-6 + in2[1] *
    -8.2515524680653645E-6) + in2[2] * 3.4347864205989959E-6) + (in2[3] *
    -7.84112891899092E-6 - in2[4] * 0.0165745904097681)) + (in2[5] *
    0.016710923123392282 - in2[6] * 0.017018151644229949)) + in2[7] *
    0.016881818930605769) + (proc_control_B.t8_g5 * 0.38399612418049789 +
    proc_control_B.t9_e * 0.38399612418049789)) + ((in2[0] * 1.4142135623730951 *
    1.656157450016555E-6 - in2[1] * 1.4142135623730951 * 4.3073052222231838E-6)
    + in2[2] * 1.4142135623730951 * 1.656157450016555E-6)) + (in2[3] *
    1.4142135623730951 * -4.0159169949847719E-6 + proc_control_B.t12_tmp_d *
    0.0043215762663743667)) + (proc_control_B.t13_tmp_j * 0.0097440679897671783
    + proc_control_B.t14_tmp_n * 0.0097440679897671783)) +
    (proc_control_B.t11_eq * 0.00085341255788243134 + proc_control_B.t15_tmp_j *
     -0.0043215762663743667)) + (proc_control_B.t12_g * 0.0001160672494672062 -
    proc_control_B.t13_g * 5.9634626722397381E-6)) + (proc_control_B.t14_d *
    0.01679428549990097 - proc_control_B.t15_n * 1.174952529187145E-6)) +
                        (proc_control_B.t16_p2 * 0.0003787019822893839 -
    proc_control_B.t17_p * 0.0003787019822893839)) + (proc_control_B.t18_f *
    0.00026108039579065569 + proc_control_B.t19_fs * 0.01679428549990097)) +
                      (proc_control_B.out1_tmp_pm * -2.651147772206629E-6 +
                       proc_control_B.out1_tmp_aw * 1.174952529187145E-6)) +
                     (proc_control_B.t70_e * 0.00085341255788243134 -
                      proc_control_B.out1_tmp_df * 1.174952529187145E-6)) +
                    (proc_control_B.out1_tmp_pz * -0.73525381918566446 -
                     out1_tmp * 5.9634626722397381E-6)) + (out1_tmp_0 *
    -2.651147772206629E-6 - proc_control_B.t67_d * 0.0003787019822893839)) +
                  (out1_tmp_1 * 2.651147772206629E-6 + proc_control_B.t69_e *
                   -0.00085341255788243134)) + (proc_control_B.t25_b *
    -0.037362401784092843 - proc_control_B.t65_m * 1.174952529187145E-6)) +
                (out1_tmp_2 * 5.9634626722397381E-6 + proc_control_B.t54_n *
                 -0.0003787019822893839)) + (proc_control_B.t27_i *
    0.01657957278462923 - proc_control_B.t45_jv * 1.174952529187145E-6)) +
              (proc_control_B.t64_g3 * 0.00085341255788243134 - out1_tmp_3 *
               0.01679428549990097)) + (proc_control_B.t59_a *
              5.1439421727813221E-5 - proc_control_B.t33_bi *
              0.0003787019822893839)) + (proc_control_B.t53_g *
    0.00085341255788243134 - 0.191998062090249);
  out1[10] = (((((((((((((((((((((((((in2[0] * -0.0034040236632883881 + in2[1] *
    0.0039692440382595364) + in2[2] * -0.00394107171053934) + (in2[3] *
    0.0037012624874090969 - in2[4] * 0.1026732889244388)) + (in2[5] *
    0.1018150813770785 + in2[6] * 0.106701735379428)) + in2[7] *
    -0.1058435278320676) + (proc_control_B.t8_g5 * -1.016516094138556 -
    proc_control_B.t9_e * 1.016516094138556)) + (in2[0] * 1.4142135623730951 *
    -0.002015944239307781 + in2[1] * 1.4142135623730951 * 0.0020314502869624518))
    + (in2[2] * 1.4142135623730951 * -0.002015944239307781 + in2[3] *
       1.4142135623730951 * 0.0018411915427675441)) + (proc_control_B.t12_tmp_d *
    -0.025871946299473779 - proc_control_B.t13_tmp_j * 6.6132984045987788)) +
    (proc_control_B.t14_tmp_n * -6.6132984045987788 + proc_control_B.t15_tmp_j *
     0.025871946299473779)) + (proc_control_B.t11_eq * -0.57921337987918464 -
    proc_control_B.t12_g * 0.0006788547663214811)) + (proc_control_B.t13_g *
    0.0040473945262702333 - proc_control_B.t14_d * 0.00085341255788243134)) +
    (proc_control_B.t15_n * 0.00076717235562463032 - proc_control_B.t16_p2 *
     0.0023839098537787738)) + (proc_control_B.t17_p * 0.0023839098537787738 -
    proc_control_B.t18_f * 0.1771949323601108)) + (proc_control_B.t19_fs *
    -0.00085341255788243134 + proc_control_B.out1_tmp_pm * 1.5506047654670649E-5))
                       + (proc_control_B.out1_tmp_aw * -0.00076717235562463032 -
    proc_control_B.t70_e * 0.57921337987918464)) + (proc_control_B.out1_tmp_df *
    0.00076717235562463032 + proc_control_B.out1_tmp_pz * 0.037362401784092843))
                     + (out1_tmp * 0.0040473945262702333 + out1_tmp_0 *
                        1.5506047654670649E-5)) + (proc_control_B.t67_d *
    0.0023839098537787738 + proc_control_B.t69_e * 0.57921337987918464)) +
                   (out1_tmp_1 * -1.5506047654670649E-5 + proc_control_B.t25_b *
                    25.3579617711107)) + (proc_control_B.t65_m *
    0.00076717235562463032 + proc_control_B.t54_n * 0.0023839098537787738)) +
                 (out1_tmp_2 * -0.0040473945262702333 - proc_control_B.t27_i *
                  0.10436757339843469)) + (proc_control_B.t45_jv *
    0.00076717235562463032 - proc_control_B.t64_g3 * 0.57921337987918464)) +
               (out1_tmp_3 * 0.00085341255788243134 - proc_control_B.t59_a *
                0.03358680572924632)) + (proc_control_B.t33_bi *
    0.0023839098537787738 - proc_control_B.t53_g * 0.57921337987918464)) +
    0.508258047069278;
  out1[11] = ((((((((((((((((((((((((((in2[0] * -0.0032548305558953859 + in2[1] *
    -0.0032852630357875952) + in2[2] * -0.0032101513252876229) + (in2[3] *
    -0.0032629685510195692 + in2[4] * 0.091396875634783256)) + in2[5] *
    0.092326291955808951) + in2[6] * -0.093184499503169316) + in2[7] *
    -0.090538668087422891) + (proc_control_B.t8_g5 * 0.4510792070303305 +
    proc_control_B.t9_e * 0.4510792070303305)) + (in2[0] * 1.4142135623730951 *
    -0.001779185233531944 - in2[1] * 1.4142135623730951 * 0.0017958904797703791))
    + (in2[2] * 1.4142135623730951 * -0.001779185233531944 - in2[3] *
       1.4142135623730951 * 0.001780062074191858)) + (proc_control_B.t12_tmp_d *
    5.826458617096355 + proc_control_B.t13_tmp_j * 0.027272006623379409)) +
    (proc_control_B.t14_tmp_n * 0.027272006623379409 - proc_control_B.t15_tmp_j *
     5.826458617096355)) + (proc_control_B.t11_eq * 0.0023839098537787738 +
    proc_control_B.t12_g * 0.1565168147283757)) + (proc_control_B.t13_g *
    -1.670524623843438E-5 + proc_control_B.t14_d * 0.0003787019822893839)) +
    (proc_control_B.t15_n * -6.3824216042422834E-5 + proc_control_B.t16_p2 *
     0.51034213219608937)) + (proc_control_B.t17_p * -0.51034213219608937 +
    proc_control_B.t18_f * 0.000731355680318657)) + (proc_control_B.t19_fs *
    0.0003787019822893839 - proc_control_B.out1_tmp_pm * 0.0035750757133023231))
                       + (proc_control_B.out1_tmp_aw * 6.3824216042422834E-5 +
    proc_control_B.t70_e * 0.0023839098537787738)) + (proc_control_B.out1_tmp_df
    * -6.3824216042422834E-5 - proc_control_B.out1_tmp_pz * 0.01657957278462923))
                     + (out1_tmp * -1.670524623843438E-5 - out1_tmp_0 *
                        0.0035750757133023231)) + (proc_control_B.t67_d *
    -0.51034213219608937 - proc_control_B.t69_e * 0.0023839098537787738)) +
                   (out1_tmp_1 * 0.0035750757133023231 - proc_control_B.t25_b *
                    0.10436757339843469)) + (proc_control_B.t65_m *
    -6.3824216042422834E-5 - proc_control_B.t54_n * 0.51034213219608937)) +
                 (out1_tmp_2 * 1.670524623843438E-5 + proc_control_B.t27_i *
                  22.3427785475448)) + (proc_control_B.t45_jv *
    -6.3824216042422834E-5 + proc_control_B.t64_g3 * 0.0023839098537787738)) +
               (out1_tmp_3 * -0.0003787019822893839 + proc_control_B.t59_a *
                0.0027942241783372721)) + (proc_control_B.t33_bi *
    -0.51034213219608937 + proc_control_B.t53_g * 0.0023839098537787738)) +
    -0.22553960351516519;
  out1[12] = ((((((((((((((((((((((((in2[0] * -0.1069708680532775 + in2[1] *
    -0.10741549168572111) + in2[2] * 0.1082843975810609) + (in2[3] *
    -5.2884297987169583E-6 + in2[4] * 0.00014680626144359071)) + (in2[5] *
    -0.00012382954366831189 - in2[6] * 0.00015235250435654841)) + (in2[7] *
    0.00012937578658126929 + proc_control_B.t8_g5 * 0.0013995085316427609)) +
    (in2[0] * 1.4142135623730951 * 0.0003611561027916392 + proc_control_B.t9_e *
    0.0013995085316427609)) + (in2[1] * 1.4142135623730951 *
    0.00011708965504487611 + in2[2] * 1.4142135623730951 * 0.0003611561027916392))
    + (in2[3] * 1.4142135623730951 * 0.076375064580309057 -
       proc_control_B.t12_tmp_d * 0.538414009042602)) +
    (proc_control_B.t13_tmp_j * 0.27831525078194952 + proc_control_B.t14_tmp_n *
     0.27831525078194952)) + (proc_control_B.t11_eq * 0.00076717235562463032 +
    proc_control_B.t15_tmp_j * 0.538414009042602)) + (proc_control_B.t12_g *
    -0.020937599278082641 - proc_control_B.t13_g * 0.00024406644774676309)) +
    (proc_control_B.t14_d * 1.174952529187145E-6 - proc_control_B.t15_n *
     0.30749183437606531)) + (proc_control_B.t16_p2 * 6.3824216042422834E-5 -
    proc_control_B.t17_p * 6.3824216042422834E-5)) + (proc_control_B.t18_f *
    0.01068522908235329 + proc_control_B.t19_fs * 1.174952529187145E-6)) +
                       (proc_control_B.out1_tmp_pm * 0.00047824575783651541 +
                        proc_control_B.out1_tmp_aw * 0.30749183437606531)) +
                      (proc_control_B.t70_e * 0.00076717235562463032 -
                       proc_control_B.out1_tmp_df * 0.30749183437606531)) +
                     (proc_control_B.out1_tmp_pz * -5.1439421727813221E-5 -
                      out1_tmp * 0.00024406644774676309)) + (out1_tmp_0 *
    0.00047824575783651541 - proc_control_B.t67_d * 6.3824216042422834E-5)) +
                   (proc_control_B.t69_e * -0.00076717235562463032 - out1_tmp_1 *
                    0.00047824575783651541)) + (proc_control_B.t25_b *
    -0.03358680572924632 - proc_control_B.t65_m * 0.30749183437606531)) +
                 (out1_tmp_2 * 0.00024406644774676309 + proc_control_B.t54_n *
                  -6.3824216042422834E-5)) + (proc_control_B.t27_i *
    0.0027942241783372721 - proc_control_B.t45_jv * 0.30749183437606531)) +
               (proc_control_B.t64_g3 * 0.00076717235562463032 - out1_tmp_3 *
                1.174952529187145E-6)) + (proc_control_B.t59_a *
    13.461992508984141 - proc_control_B.t33_bi * 6.3824216042422834E-5)) +
    (proc_control_B.t53_g * 0.00076717235562463032 - 0.00069975426582138066);
}

// Function for MATLAB Function: '<S172>/FixedHorizonOptimizer'
int32_T proc_control::proc_control_xpotrf_7bq7KrAq(real_T b_A[289])
{
  int32_T info;
  int32_T j;
  boolean_T exitg1;
  info = 0;
  j = 0;
  exitg1 = false;
  while ((!exitg1) && (j < 17)) {
    int32_T b_ix;
    int32_T b_iy;
    int32_T idxAjj;
    idxAjj = j * 17 + j;
    proc_control_B.ssq = 0.0;
    if (j >= 1) {
      b_ix = j;
      b_iy = j;
      for (int32_T b_k{0}; b_k < j; b_k++) {
        proc_control_B.ssq += b_A[b_ix] * b_A[b_iy];
        b_ix += 17;
        b_iy += 17;
      }
    }

    proc_control_B.ssq = b_A[idxAjj] - proc_control_B.ssq;
    if (proc_control_B.ssq > 0.0) {
      proc_control_B.ssq = std::sqrt(proc_control_B.ssq);
      b_A[idxAjj] = proc_control_B.ssq;
      if (j + 1 < 17) {
        if (j != 0) {
          b_ix = j;
          b_iy = ((j - 1) * 17 + j) + 2;
          for (int32_T b_k{j + 2}; b_k <= b_iy; b_k += 17) {
            int32_T d;
            int32_T iy;
            proc_control_B.c_nh = -b_A[b_ix];
            iy = idxAjj + 1;
            d = (b_k - j) + 15;
            for (int32_T ia{b_k}; ia <= d; ia++) {
              b_A[iy] += b_A[ia - 1] * proc_control_B.c_nh;
              iy++;
            }

            b_ix += 17;
          }
        }

        proc_control_B.ssq = 1.0 / proc_control_B.ssq;
        b_ix = (idxAjj - j) + 17;
        for (idxAjj++; idxAjj < b_ix; idxAjj++) {
          b_A[idxAjj] *= proc_control_B.ssq;
        }
      }

      j++;
    } else {
      b_A[idxAjj] = proc_control_B.ssq;
      info = j + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S172>/FixedHorizonOptimizer'
void proc_control::proc__mpc_checkhessian_IKf8MUv4(real_T b_H[289], real_T L[289],
  real_T *BadH)
{
  int32_T Tries;
  int32_T Tries_0;
  boolean_T guard1{ false };

  *BadH = 0.0;
  std::memcpy(&L[0], &b_H[0], 289U * sizeof(real_T));
  Tries = proc_control_xpotrf_7bq7KrAq(L);
  guard1 = false;
  if (Tries == 0) {
    Tries_0 = 0;
    for (Tries = 0; Tries < 17; Tries++) {
      proc_control_B.varargin_1[Tries] = L[Tries_0];
      Tries_0 += 18;
    }

    if (minimum_d12sudeP(proc_control_B.varargin_1) > 1.4901161193847656E-7) {
    } else {
      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    boolean_T exitg2;
    proc_control_B.normH = 0.0;
    Tries = 0;
    exitg2 = false;
    while ((!exitg2) && (Tries < 17)) {
      proc_control_B.s_g = 0.0;
      for (Tries_0 = 0; Tries_0 < 17; Tries_0++) {
        proc_control_B.s_g += std::abs(b_H[17 * Tries_0 + Tries]);
      }

      if (std::isnan(proc_control_B.s_g)) {
        proc_control_B.normH = (rtNaN);
        exitg2 = true;
      } else {
        if (proc_control_B.s_g > proc_control_B.normH) {
          proc_control_B.normH = proc_control_B.s_g;
        }

        Tries++;
      }
    }

    if (proc_control_B.normH >= 1.0E+10) {
      *BadH = 2.0;
    } else {
      boolean_T exitg1;
      Tries = 0;
      exitg1 = false;
      while ((!exitg1) && (Tries <= 4)) {
        int32_T j;
        boolean_T guard2{ false };

        proc_control_B.normH = rt_powd_snf(10.0, static_cast<real_T>(Tries)) *
          1.4901161193847656E-7;
        std::memset(&proc_control_B.b_m[0], 0, 289U * sizeof(int8_T));
        j = 0;
        for (Tries_0 = 0; Tries_0 < 17; Tries_0++) {
          proc_control_B.b_m[j] = 1;
          j += 18;
        }

        for (Tries_0 = 0; Tries_0 < 289; Tries_0++) {
          b_H[Tries_0] += proc_control_B.normH * static_cast<real_T>
            (proc_control_B.b_m[Tries_0]);
          L[Tries_0] = b_H[Tries_0];
        }

        Tries_0 = proc_control_xpotrf_7bq7KrAq(L);
        guard2 = false;
        if (Tries_0 == 0) {
          j = 0;
          for (Tries_0 = 0; Tries_0 < 17; Tries_0++) {
            proc_control_B.varargin_1[Tries_0] = L[j];
            j += 18;
          }

          if (minimum_d12sudeP(proc_control_B.varargin_1) >
              1.4901161193847656E-7) {
            *BadH = 1.0;
            exitg1 = true;
          } else {
            guard2 = true;
          }
        } else {
          guard2 = true;
        }

        if (guard2) {
          *BadH = 3.0;
          Tries++;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S172>/FixedHorizonOptimizer'
real_T proc_control::proc_control_xnrm2_1aaecztk(int32_T n, const real_T x[289],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_i = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        real_T absxk;
        absxk = std::abs(x[k - 1]);
        if (absxk > proc_control_B.scale_i) {
          real_T t;
          t = proc_control_B.scale_i / absxk;
          y = y * t * t + 1.0;
          proc_control_B.scale_i = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_B.scale_i;
          y += t * t;
        }
      }

      y = proc_control_B.scale_i * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S172>/FixedHorizonOptimizer'
void proc_control::proc_control_xgemv_U0Jqf2wS(int32_T b_m, int32_T n, const
  real_T b_A[289], int32_T ia0, const real_T x[289], int32_T ix0, real_T y[17])
{
  if ((b_m != 0) && (n != 0)) {
    int32_T b;
    int32_T b_iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 17 + ia0;
    for (int32_T iac{ia0}; iac <= b; iac += 17) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_B.c_o = 0.0;
      d = (iac + b_m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_B.c_o += b_A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_B.c_o;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S172>/FixedHorizonOptimizer'
void proc_control::proc_control_xgerc_iZ8mXg2O(int32_T b_m, int32_T n, real_T
  alpha1, int32_T ix0, const real_T y[17], real_T b_A[289], int32_T ia0)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_B.temp = y[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = b_m + jA;
        while (ijA + 1 <= b) {
          b_A[ijA] += b_A[ix - 1] * proc_control_B.temp;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += 17;
    }
  }
}

// Function for MATLAB Function: '<S172>/FixedHorizonOptimizer'
void proc_control::proc_control_qr_EKZRqbwx(const real_T b_A[289], real_T Q[289],
  real_T R[289])
{
  int32_T b_coltop;
  int32_T c_lastc;
  int32_T coltop;
  int32_T exitg1;
  int32_T i;
  boolean_T exitg2;
  std::memcpy(&proc_control_B.c_A[0], &b_A[0], 289U * sizeof(real_T));
  std::memset(&proc_control_B.tau[0], 0, 17U * sizeof(real_T));
  std::memset(&proc_control_B.work[0], 0, 17U * sizeof(real_T));
  for (proc_control_B.itau = 0; proc_control_B.itau < 17; proc_control_B.itau++)
  {
    i = proc_control_B.itau * 17 + proc_control_B.itau;
    if (proc_control_B.itau + 1 < 17) {
      proc_control_B.atmp = proc_control_B.c_A[i];
      proc_control_B.tau[proc_control_B.itau] = 0.0;
      proc_control_B.beta1 = proc_control_xnrm2_1aaecztk(16 -
        proc_control_B.itau, proc_control_B.c_A, i + 2);
      if (proc_control_B.beta1 != 0.0) {
        proc_control_B.beta1 = proc_control_rt_hypotd_snf(proc_control_B.c_A[i],
          proc_control_B.beta1);
        if (proc_control_B.c_A[i] >= 0.0) {
          proc_control_B.beta1 = -proc_control_B.beta1;
        }

        if (std::abs(proc_control_B.beta1) < 1.0020841800044864E-292) {
          proc_control_B.knt = 0;
          c_lastc = (i - proc_control_B.itau) + 17;
          do {
            proc_control_B.knt++;
            for (b_coltop = i + 1; b_coltop < c_lastc; b_coltop++) {
              proc_control_B.c_A[b_coltop] *= 9.9792015476736E+291;
            }

            proc_control_B.beta1 *= 9.9792015476736E+291;
            proc_control_B.atmp *= 9.9792015476736E+291;
          } while ((std::abs(proc_control_B.beta1) < 1.0020841800044864E-292) &&
                   (proc_control_B.knt < 20));

          proc_control_B.beta1 = proc_control_rt_hypotd_snf(proc_control_B.atmp,
            proc_control_xnrm2_1aaecztk(16 - proc_control_B.itau,
            proc_control_B.c_A, i + 2));
          if (proc_control_B.atmp >= 0.0) {
            proc_control_B.beta1 = -proc_control_B.beta1;
          }

          proc_control_B.tau[proc_control_B.itau] = (proc_control_B.beta1 -
            proc_control_B.atmp) / proc_control_B.beta1;
          proc_control_B.atmp = 1.0 / (proc_control_B.atmp -
            proc_control_B.beta1);
          for (b_coltop = i + 1; b_coltop < c_lastc; b_coltop++) {
            proc_control_B.c_A[b_coltop] *= proc_control_B.atmp;
          }

          for (c_lastc = 0; c_lastc < proc_control_B.knt; c_lastc++) {
            proc_control_B.beta1 *= 1.0020841800044864E-292;
          }

          proc_control_B.atmp = proc_control_B.beta1;
        } else {
          proc_control_B.tau[proc_control_B.itau] = (proc_control_B.beta1 -
            proc_control_B.c_A[i]) / proc_control_B.beta1;
          proc_control_B.atmp = 1.0 / (proc_control_B.c_A[i] -
            proc_control_B.beta1);
          proc_control_B.knt = (i - proc_control_B.itau) + 17;
          for (c_lastc = i + 1; c_lastc < proc_control_B.knt; c_lastc++) {
            proc_control_B.c_A[c_lastc] *= proc_control_B.atmp;
          }

          proc_control_B.atmp = proc_control_B.beta1;
        }
      }

      proc_control_B.c_A[i] = proc_control_B.atmp;
      proc_control_B.beta1 = proc_control_B.c_A[i];
      proc_control_B.c_A[i] = 1.0;
      if (proc_control_B.tau[proc_control_B.itau] != 0.0) {
        proc_control_B.knt = 17 - proc_control_B.itau;
        c_lastc = (i - proc_control_B.itau) + 16;
        while ((proc_control_B.knt > 0) && (proc_control_B.c_A[c_lastc] == 0.0))
        {
          proc_control_B.knt--;
          c_lastc--;
        }

        c_lastc = 16 - proc_control_B.itau;
        exitg2 = false;
        while ((!exitg2) && (c_lastc > 0)) {
          b_coltop = ((c_lastc - 1) * 17 + i) + 17;
          coltop = b_coltop;
          do {
            exitg1 = 0;
            if (coltop + 1 <= b_coltop + proc_control_B.knt) {
              if (proc_control_B.c_A[coltop] != 0.0) {
                exitg1 = 1;
              } else {
                coltop++;
              }
            } else {
              c_lastc--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt = 0;
        c_lastc = 0;
      }

      if (proc_control_B.knt > 0) {
        proc_control_xgemv_U0Jqf2wS(proc_control_B.knt, c_lastc,
          proc_control_B.c_A, i + 18, proc_control_B.c_A, i + 1,
          proc_control_B.work);
        proc_control_xgerc_iZ8mXg2O(proc_control_B.knt, c_lastc,
          -proc_control_B.tau[proc_control_B.itau], i + 1, proc_control_B.work,
          proc_control_B.c_A, i + 18);
      }

      proc_control_B.c_A[i] = proc_control_B.beta1;
    } else {
      proc_control_B.tau[16] = 0.0;
    }
  }

  for (proc_control_B.itau = 0; proc_control_B.itau < 17; proc_control_B.itau++)
  {
    for (i = 0; i <= proc_control_B.itau; i++) {
      R[i + 17 * proc_control_B.itau] = proc_control_B.c_A[17 *
        proc_control_B.itau + i];
    }

    for (i = proc_control_B.itau + 1; i + 1 < 18; i++) {
      R[i + 17 * proc_control_B.itau] = 0.0;
    }

    proc_control_B.work[proc_control_B.itau] = 0.0;
  }

  for (i = 16; i >= 0; i--) {
    proc_control_B.knt = (i * 17 + i) + 18;
    if (i + 1 < 17) {
      proc_control_B.c_A[proc_control_B.knt - 18] = 1.0;
      if (proc_control_B.tau[i] != 0.0) {
        c_lastc = 17 - i;
        b_coltop = proc_control_B.knt - i;
        while ((c_lastc > 0) && (proc_control_B.c_A[b_coltop - 2] == 0.0)) {
          c_lastc--;
          b_coltop--;
        }

        b_coltop = 16 - i;
        exitg2 = false;
        while ((!exitg2) && (b_coltop > 0)) {
          coltop = (b_coltop - 1) * 17 + proc_control_B.knt;
          proc_control_B.itau = coltop;
          do {
            exitg1 = 0;
            if (proc_control_B.itau <= (coltop + c_lastc) - 1) {
              if (proc_control_B.c_A[proc_control_B.itau - 1] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.itau++;
              }
            } else {
              b_coltop--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        c_lastc = 0;
        b_coltop = 0;
      }

      if (c_lastc > 0) {
        proc_control_xgemv_U0Jqf2wS(c_lastc, b_coltop, proc_control_B.c_A,
          proc_control_B.knt, proc_control_B.c_A, proc_control_B.knt - 17,
          proc_control_B.work);
        proc_control_xgerc_iZ8mXg2O(c_lastc, b_coltop, -proc_control_B.tau[i],
          proc_control_B.knt - 17, proc_control_B.work, proc_control_B.c_A,
          proc_control_B.knt);
      }

      c_lastc = (proc_control_B.knt - i) - 1;
      for (b_coltop = proc_control_B.knt - 17; b_coltop < c_lastc; b_coltop++) {
        proc_control_B.c_A[b_coltop] *= -proc_control_B.tau[i];
      }
    }

    proc_control_B.c_A[proc_control_B.knt - 18] = 1.0 - proc_control_B.tau[i];
    for (c_lastc = 0; c_lastc < i; c_lastc++) {
      proc_control_B.c_A[(proc_control_B.knt - c_lastc) - 19] = 0.0;
    }
  }

  proc_control_B.knt = 0;
  for (proc_control_B.itau = 0; proc_control_B.itau < 17; proc_control_B.itau++)
  {
    std::memcpy(&Q[proc_control_B.knt], &proc_control_B.c_A[proc_control_B.knt],
                17U * sizeof(real_T));
    proc_control_B.knt += 17;
  }
}

// Function for MATLAB Function: '<S172>/FixedHorizonOptimizer'
void proc_control::proc_contro_KWIKfactor_OsVLwuhY(const real_T b_Ac[4284],
  const int32_T iC[252], int32_T nA, const real_T b_Linv[289], real_T b_D[289],
  real_T b_H[289], int32_T n, real_T RLinv[289], real_T *Status)
{
  *Status = 1.0;
  std::memset(&RLinv[0], 0, 289U * sizeof(real_T));
  proc_control_B.b_i = 0;
  while (proc_control_B.b_i <= nA - 1) {
    proc_control_B.iC_l = iC[proc_control_B.b_i];
    for (proc_control_B.c_j_p = 0; proc_control_B.c_j_p < 17;
         proc_control_B.c_j_p++) {
      proc_control_B.g_i = 17 * proc_control_B.b_i + proc_control_B.c_j_p;
      RLinv[proc_control_B.g_i] = 0.0;
      for (proc_control_B.d_i = 0; proc_control_B.d_i < 17; proc_control_B.d_i++)
      {
        RLinv[proc_control_B.g_i] += b_Ac[(252 * proc_control_B.d_i +
          proc_control_B.iC_l) - 1] * b_Linv[17 * proc_control_B.d_i +
          proc_control_B.c_j_p];
      }
    }

    proc_control_B.b_i++;
  }

  proc_control_qr_EKZRqbwx(RLinv, proc_control_B.QQ, proc_control_B.RR);
  proc_control_B.b_i = 0;
  int32_T exitg1;
  do {
    exitg1 = 0;
    if (proc_control_B.b_i <= nA - 1) {
      if (std::abs(proc_control_B.RR[17 * proc_control_B.b_i +
                   proc_control_B.b_i]) < 1.0E-12) {
        *Status = -2.0;
        exitg1 = 1;
      } else {
        proc_control_B.b_i++;
      }
    } else {
      proc_control_B.d_i = 0;
      while (proc_control_B.d_i <= n - 1) {
        proc_control_B.g_i = 0;
        while (proc_control_B.g_i <= n - 1) {
          proc_control_B.b_Linv_j = 0.0;
          for (proc_control_B.c_j_p = 0; proc_control_B.c_j_p < 17;
               proc_control_B.c_j_p++) {
            proc_control_B.b_Linv_j += b_Linv[17 * proc_control_B.d_i +
              proc_control_B.c_j_p] * proc_control_B.QQ[17 * proc_control_B.g_i
              + proc_control_B.c_j_p];
          }

          proc_control_B.TL[proc_control_B.d_i + 17 * proc_control_B.g_i] =
            proc_control_B.b_Linv_j;
          proc_control_B.g_i++;
        }

        proc_control_B.d_i++;
      }

      std::memset(&RLinv[0], 0, 289U * sizeof(real_T));
      proc_control_B.c_j_p = nA - 1;
      while (proc_control_B.c_j_p + 1 > 0) {
        proc_control_B.g_i = 17 * proc_control_B.c_j_p + proc_control_B.c_j_p;
        RLinv[proc_control_B.g_i] = 1.0;
        proc_control_B.b_i = proc_control_B.c_j_p;
        while (proc_control_B.b_i + 1 <= nA) {
          proc_control_B.d_i = 17 * proc_control_B.b_i + proc_control_B.c_j_p;
          RLinv[proc_control_B.d_i] /= proc_control_B.RR[proc_control_B.g_i];
          proc_control_B.b_i++;
        }

        if (proc_control_B.c_j_p + 1 > 1) {
          proc_control_B.b_i = 0;
          while (proc_control_B.b_i <= proc_control_B.c_j_p - 1) {
            proc_control_B.d_i = proc_control_B.c_j_p;
            while (proc_control_B.d_i + 1 <= nA) {
              proc_control_B.g_i = 17 * proc_control_B.d_i + proc_control_B.b_i;
              RLinv[proc_control_B.g_i] -= proc_control_B.RR[17 *
                proc_control_B.c_j_p + proc_control_B.b_i] * RLinv[17 *
                proc_control_B.d_i + proc_control_B.c_j_p];
              proc_control_B.d_i++;
            }

            proc_control_B.b_i++;
          }
        }

        proc_control_B.c_j_p--;
      }

      proc_control_B.b_i = 0;
      while (proc_control_B.b_i <= n - 1) {
        proc_control_B.d_i = proc_control_B.b_i;
        while (proc_control_B.d_i + 1 <= n) {
          proc_control_B.c_j_p = 17 * proc_control_B.d_i + proc_control_B.b_i;
          b_H[proc_control_B.c_j_p] = 0.0;
          proc_control_B.g_i = nA;
          while (proc_control_B.g_i + 1 <= n) {
            b_H[proc_control_B.c_j_p] -= proc_control_B.TL[17 *
              proc_control_B.g_i + proc_control_B.b_i] * proc_control_B.TL[17 *
              proc_control_B.g_i + proc_control_B.d_i];
            proc_control_B.g_i++;
          }

          b_H[proc_control_B.d_i + 17 * proc_control_B.b_i] =
            b_H[proc_control_B.c_j_p];
          proc_control_B.d_i++;
        }

        proc_control_B.b_i++;
      }

      proc_control_B.d_i = 0;
      while (proc_control_B.d_i <= nA - 1) {
        proc_control_B.g_i = 0;
        while (proc_control_B.g_i <= n - 1) {
          proc_control_B.c_j_p = 17 * proc_control_B.d_i + proc_control_B.g_i;
          b_D[proc_control_B.c_j_p] = 0.0;
          proc_control_B.b_i = proc_control_B.d_i;
          while (proc_control_B.b_i + 1 <= nA) {
            b_D[proc_control_B.c_j_p] += proc_control_B.TL[17 *
              proc_control_B.b_i + proc_control_B.g_i] * RLinv[17 *
              proc_control_B.b_i + proc_control_B.d_i];
            proc_control_B.b_i++;
          }

          proc_control_B.g_i++;
        }

        proc_control_B.d_i++;
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S172>/FixedHorizonOptimizer'
void proc_control::proc_control_qpkwik(const real_T b_Linv[289], const real_T
  b_Hinv[289], const real_T f[17], const real_T b_Ac[4284], const real_T b[252],
  boolean_T iA[252], int32_T maxiter, real_T FeasTol, real_T x[17], real_T
  lambda[252], int32_T *status)
{
  boolean_T ColdReset;
  boolean_T DualFeasible;
  boolean_T cTolComputed;
  boolean_T guard1{ false };

  std::memset(&x[0], 0, 17U * sizeof(real_T));
  std::memset(&lambda[0], 0, 252U * sizeof(real_T));
  *status = 1;
  std::memset(&proc_control_B.r[0], 0, 17U * sizeof(real_T));
  proc_control_B.rMin = 0.0;
  cTolComputed = false;
  for (proc_control_B.i_i3 = 0; proc_control_B.i_i3 < 252; proc_control_B.i_i3++)
  {
    proc_control_B.cTol[proc_control_B.i_i3] = 1.0;
    proc_control_B.iC[proc_control_B.i_i3] = 0;
  }

  proc_control_B.nA = 0;
  for (proc_control_B.tmp = 0; proc_control_B.tmp < 252; proc_control_B.tmp++) {
    if (iA[proc_control_B.tmp]) {
      proc_control_B.nA++;
      proc_control_B.iC[proc_control_B.nA - 1] = proc_control_B.tmp + 1;
    }
  }

  guard1 = false;
  if (proc_control_B.nA > 0) {
    int32_T exitg3;
    std::memset(&proc_control_B.Opt[0], 0, 34U * sizeof(real_T));
    for (proc_control_B.i_i3 = 0; proc_control_B.i_i3 < 17; proc_control_B.i_i3
         ++) {
      proc_control_B.Rhs[proc_control_B.i_i3] = f[proc_control_B.i_i3];
      proc_control_B.Rhs[proc_control_B.i_i3 + 17] = 0.0;
    }

    DualFeasible = false;
    proc_control_B.tmp = static_cast<int32_T>(std::round(0.3 *
      static_cast<real_T>(proc_control_B.nA)));
    ColdReset = false;
    do {
      exitg3 = 0;
      if ((!DualFeasible) && (proc_control_B.nA > 0) && (*status <= maxiter)) {
        proc_contro_KWIKfactor_OsVLwuhY(b_Ac, proc_control_B.iC,
          proc_control_B.nA, b_Linv, proc_control_B.b_D_j, proc_control_B.b_H,
          proc_control_degrees, proc_control_B.RLinv, &proc_control_B.Xnorm0);
        if (proc_control_B.Xnorm0 < 0.0) {
          if (ColdReset) {
            *status = -2;
            exitg3 = 2;
          } else {
            proc_control_B.nA = 0;
            std::memset(&iA[0], 0, 252U * sizeof(boolean_T));
            std::memset(&proc_control_B.iC[0], 0, 252U * sizeof(int32_T));
            ColdReset = true;
          }
        } else {
          proc_control_B.i_i3 = 0;
          while (proc_control_B.i_i3 <= proc_control_B.nA - 1) {
            proc_control_B.Rhs[proc_control_B.i_i3 + 17] =
              b[proc_control_B.iC[proc_control_B.i_i3] - 1];
            proc_control_B.iSave = proc_control_B.i_i3;
            while (proc_control_B.iSave + 1 <= proc_control_B.nA) {
              proc_control_B.U_tmp = 17 * proc_control_B.i_i3 +
                proc_control_B.iSave;
              proc_control_B.U[proc_control_B.U_tmp] = 0.0;
              proc_control_B.i_i = 0;
              while (proc_control_B.i_i <= proc_control_B.nA - 1) {
                proc_control_B.U[proc_control_B.U_tmp] += proc_control_B.RLinv
                  [17 * proc_control_B.i_i + proc_control_B.iSave] *
                  proc_control_B.RLinv[17 * proc_control_B.i_i +
                  proc_control_B.i_i3];
                proc_control_B.i_i++;
              }

              proc_control_B.U[proc_control_B.i_i3 + 17 * proc_control_B.iSave] =
                proc_control_B.U[proc_control_B.U_tmp];
              proc_control_B.iSave++;
            }

            proc_control_B.i_i3++;
          }

          for (proc_control_B.i_i3 = 0; proc_control_B.i_i3 < 17;
               proc_control_B.i_i3++) {
            proc_control_B.Xnorm0 = 0.0;
            for (proc_control_B.i_i = 0; proc_control_B.i_i < 17;
                 proc_control_B.i_i++) {
              proc_control_B.Xnorm0 += proc_control_B.b_H[17 *
                proc_control_B.i_i + proc_control_B.i_i3] *
                proc_control_B.Rhs[proc_control_B.i_i];
            }

            proc_control_B.Opt[proc_control_B.i_i3] = proc_control_B.Xnorm0;
            proc_control_B.iSave = 0;
            while (proc_control_B.iSave <= proc_control_B.nA - 1) {
              proc_control_B.Opt[proc_control_B.i_i3] += proc_control_B.b_D_j[17
                * proc_control_B.iSave + proc_control_B.i_i3] *
                proc_control_B.Rhs[proc_control_B.iSave + 17];
              proc_control_B.iSave++;
            }
          }

          proc_control_B.i_i3 = 0;
          while (proc_control_B.i_i3 <= proc_control_B.nA - 1) {
            proc_control_B.Xnorm0 = 0.0;
            for (proc_control_B.i_i = 0; proc_control_B.i_i < 17;
                 proc_control_B.i_i++) {
              proc_control_B.Xnorm0 += proc_control_B.b_D_j[17 *
                proc_control_B.i_i3 + proc_control_B.i_i] *
                proc_control_B.Rhs[proc_control_B.i_i];
            }

            proc_control_B.Opt[proc_control_B.i_i3 + 17] = proc_control_B.Xnorm0;
            proc_control_B.iSave = 0;
            while (proc_control_B.iSave <= proc_control_B.nA - 1) {
              proc_control_B.Opt[proc_control_B.i_i3 + 17] += proc_control_B.U
                [17 * proc_control_B.iSave + proc_control_B.i_i3] *
                proc_control_B.Rhs[proc_control_B.iSave + 17];
              proc_control_B.iSave++;
            }

            proc_control_B.i_i3++;
          }

          proc_control_B.Xnorm0 = -1.0E-12;
          proc_control_B.i_i3 = 0;
          proc_control_B.iSave = 17;
          while (proc_control_B.iSave - 17 <= proc_control_B.nA - 1) {
            lambda[proc_control_B.iC[proc_control_B.iSave - 17] - 1] =
              proc_control_B.Opt[proc_control_B.iSave];
            if ((proc_control_B.Opt[proc_control_B.iSave] <
                 proc_control_B.Xnorm0) && (proc_control_B.iSave - 16 <=
                 proc_control_B.nA)) {
              proc_control_B.i_i3 = proc_control_B.iSave - 16;
              proc_control_B.Xnorm0 = proc_control_B.Opt[proc_control_B.iSave];
            }

            proc_control_B.iSave++;
          }

          if (proc_control_B.i_i3 <= 0) {
            DualFeasible = true;
            std::memcpy(&x[0], &proc_control_B.Opt[0], 17U * sizeof(real_T));
          } else {
            (*status)++;
            if (proc_control_B.tmp <= 5) {
              proc_control_B.i_i = 5;
            } else {
              proc_control_B.i_i = proc_control_B.tmp;
            }

            if (*status > proc_control_B.i_i) {
              proc_control_B.nA = 0;
              std::memset(&iA[0], 0, 252U * sizeof(boolean_T));
              std::memset(&proc_control_B.iC[0], 0, 252U * sizeof(int32_T));
              ColdReset = true;
            } else {
              lambda[proc_control_B.iC[proc_control_B.i_i3 - 1] - 1] = 0.0;
              DropConstraint_LFPKTWNz(proc_control_B.i_i3, iA,
                &proc_control_B.nA, proc_control_B.iC);
            }
          }
        }
      } else {
        if (proc_control_B.nA <= 0) {
          std::memset(&lambda[0], 0, 252U * sizeof(real_T));
          Unconstrained_VQtVdCHQ(b_Hinv, f, x, proc_control_degrees);
        }

        exitg3 = 1;
      }
    } while (exitg3 == 0);

    if (exitg3 == 1) {
      guard1 = true;
    }
  } else {
    Unconstrained_VQtVdCHQ(b_Hinv, f, x, proc_control_degrees);
    guard1 = true;
  }

  if (guard1) {
    boolean_T exitg2;
    proc_control_B.Xnorm0 = norm_8ho9XaR8(x);
    exitg2 = false;
    while ((!exitg2) && (*status <= maxiter)) {
      proc_control_B.cMin = -FeasTol;
      proc_control_B.tmp = -1;
      for (proc_control_B.i_i3 = 0; proc_control_B.i_i3 < 252;
           proc_control_B.i_i3++) {
        proc_control_B.t_m = proc_control_B.cTol[proc_control_B.i_i3];
        if (!cTolComputed) {
          for (proc_control_B.i_i = 0; proc_control_B.i_i < 17;
               proc_control_B.i_i++) {
            proc_control_B.b_Ac[proc_control_B.i_i] = b_Ac[252 *
              proc_control_B.i_i + proc_control_B.i_i3] * x[proc_control_B.i_i];
          }

          abs_9BE3kip1(proc_control_B.b_Ac, proc_control_B.z_o);
          proc_control_B.t_m = std::fmax(proc_control_B.t_m, maximum_WmXKrdSr
            (proc_control_B.z_o));
        }

        if (!iA[proc_control_B.i_i3]) {
          proc_control_B.b_Ac_k = 0.0;
          for (proc_control_B.i_i = 0; proc_control_B.i_i < 17;
               proc_control_B.i_i++) {
            proc_control_B.b_Ac_k += b_Ac[252 * proc_control_B.i_i +
              proc_control_B.i_i3] * x[proc_control_B.i_i];
          }

          proc_control_B.cVal = (proc_control_B.b_Ac_k - b[proc_control_B.i_i3])
            / proc_control_B.t_m;
          if (proc_control_B.cVal < proc_control_B.cMin) {
            proc_control_B.cMin = proc_control_B.cVal;
            proc_control_B.tmp = proc_control_B.i_i3;
          }
        }

        proc_control_B.cTol[proc_control_B.i_i3] = proc_control_B.t_m;
      }

      cTolComputed = true;
      if (proc_control_B.tmp + 1 <= 0) {
        exitg2 = true;
      } else if (*status == maxiter) {
        *status = 0;
        exitg2 = true;
      } else {
        int32_T exitg1;
        do {
          exitg1 = 0;
          if ((proc_control_B.tmp + 1 > 0) && (*status <= maxiter)) {
            boolean_T guard2{ false };

            guard2 = false;
            if (proc_control_B.nA == 0) {
              for (proc_control_B.i_i = 0; proc_control_B.i_i < 17;
                   proc_control_B.i_i++) {
                proc_control_B.z_o[proc_control_B.i_i] = 0.0;
                for (proc_control_B.i_i3 = 0; proc_control_B.i_i3 < 17;
                     proc_control_B.i_i3++) {
                  proc_control_B.z_o[proc_control_B.i_i] += b_Hinv[17 *
                    proc_control_B.i_i3 + proc_control_B.i_i] * b_Ac[252 *
                    proc_control_B.i_i3 + proc_control_B.tmp];
                }
              }

              guard2 = true;
            } else {
              proc_contro_KWIKfactor_OsVLwuhY(b_Ac, proc_control_B.iC,
                proc_control_B.nA, b_Linv, proc_control_B.b_D_j,
                proc_control_B.b_H, proc_control_degrees, proc_control_B.RLinv,
                &proc_control_B.cMin);
              if (proc_control_B.cMin <= 0.0) {
                *status = -2;
                exitg1 = 1;
              } else {
                for (proc_control_B.i_i = 0; proc_control_B.i_i < 289;
                     proc_control_B.i_i++) {
                  proc_control_B.U[proc_control_B.i_i] =
                    -proc_control_B.b_H[proc_control_B.i_i];
                }

                for (proc_control_B.i_i = 0; proc_control_B.i_i < 17;
                     proc_control_B.i_i++) {
                  proc_control_B.z_o[proc_control_B.i_i] = 0.0;
                  for (proc_control_B.i_i3 = 0; proc_control_B.i_i3 < 17;
                       proc_control_B.i_i3++) {
                    proc_control_B.z_o[proc_control_B.i_i] += proc_control_B.U
                      [17 * proc_control_B.i_i3 + proc_control_B.i_i] * b_Ac[252
                      * proc_control_B.i_i3 + proc_control_B.tmp];
                  }
                }

                proc_control_B.i_i3 = 0;
                while (proc_control_B.i_i3 <= proc_control_B.nA - 1) {
                  proc_control_B.b_Ac_k = 0.0;
                  for (proc_control_B.i_i = 0; proc_control_B.i_i < 17;
                       proc_control_B.i_i++) {
                    proc_control_B.b_Ac_k += b_Ac[252 * proc_control_B.i_i +
                      proc_control_B.tmp] * proc_control_B.b_D_j[17 *
                      proc_control_B.i_i3 + proc_control_B.i_i];
                  }

                  proc_control_B.r[proc_control_B.i_i3] = proc_control_B.b_Ac_k;
                  proc_control_B.i_i3++;
                }

                guard2 = true;
              }
            }

            if (guard2) {
              boolean_T exitg4;
              proc_control_B.i_i3 = 0;
              proc_control_B.cMin = 0.0;
              DualFeasible = true;
              ColdReset = true;
              if (proc_control_B.nA > 0) {
                proc_control_B.iSave = 0;
                exitg4 = false;
                while ((!exitg4) && (proc_control_B.iSave <= proc_control_B.nA -
                                     1)) {
                  if (proc_control_B.r[proc_control_B.iSave] >= 1.0E-12) {
                    ColdReset = false;
                    exitg4 = true;
                  } else {
                    proc_control_B.iSave++;
                  }
                }
              }

              if ((proc_control_B.nA != 0) && (!ColdReset)) {
                proc_control_B.i_i = 0;
                while (proc_control_B.i_i <= proc_control_B.nA - 1) {
                  if (proc_control_B.r[proc_control_B.i_i] > 1.0E-12) {
                    proc_control_B.cVal =
                      lambda[proc_control_B.iC[proc_control_B.i_i] - 1] /
                      proc_control_B.r[proc_control_B.i_i];
                    if ((proc_control_B.i_i3 == 0) || (proc_control_B.cVal <
                         proc_control_B.rMin)) {
                      proc_control_B.rMin = proc_control_B.cVal;
                      proc_control_B.i_i3 = proc_control_B.i_i + 1;
                    }
                  }

                  proc_control_B.i_i++;
                }

                if (proc_control_B.i_i3 > 0) {
                  proc_control_B.cMin = proc_control_B.rMin;
                  DualFeasible = false;
                }
              }

              for (proc_control_B.i_i = 0; proc_control_B.i_i < 17;
                   proc_control_B.i_i++) {
                proc_control_B.b_Ac[proc_control_B.i_i] = b_Ac[252 *
                  proc_control_B.i_i + proc_control_B.tmp];
              }

              proc_control_B.cVal = mtimes_3lrguzTZ(proc_control_B.z_o,
                proc_control_B.b_Ac);
              if (proc_control_B.cVal <= 0.0) {
                proc_control_B.cVal = 0.0;
                ColdReset = true;
              } else {
                proc_control_B.b_Ac_k = 0.0;
                for (proc_control_B.i_i = 0; proc_control_B.i_i < 17;
                     proc_control_B.i_i++) {
                  proc_control_B.b_Ac_k += b_Ac[252 * proc_control_B.i_i +
                    proc_control_B.tmp] * x[proc_control_B.i_i];
                }

                proc_control_B.cVal = (b[proc_control_B.tmp] -
                  proc_control_B.b_Ac_k) / proc_control_B.cVal;
                ColdReset = false;
              }

              if (DualFeasible && ColdReset) {
                *status = -1;
                exitg1 = 1;
              } else {
                if (ColdReset) {
                  proc_control_B.t_m = proc_control_B.cMin;
                } else if (DualFeasible) {
                  proc_control_B.t_m = proc_control_B.cVal;
                } else if (proc_control_B.cMin < proc_control_B.cVal) {
                  proc_control_B.t_m = proc_control_B.cMin;
                } else {
                  proc_control_B.t_m = proc_control_B.cVal;
                }

                proc_control_B.i_i = 0;
                while (proc_control_B.i_i <= proc_control_B.nA - 1) {
                  lambda[proc_control_B.iC[proc_control_B.i_i] - 1] -=
                    proc_control_B.t_m * proc_control_B.r[proc_control_B.i_i];
                  if ((proc_control_B.iC[proc_control_B.i_i] <= 252) &&
                      (lambda[proc_control_B.iC[proc_control_B.i_i] - 1] < 0.0))
                  {
                    lambda[proc_control_B.iC[proc_control_B.i_i] - 1] = 0.0;
                  }

                  proc_control_B.i_i++;
                }

                lambda[proc_control_B.tmp] += proc_control_B.t_m;
                if (std::abs(proc_control_B.t_m - proc_control_B.cMin) <
                    eps_AH2epkhQ()) {
                  DropConstraint_LFPKTWNz(proc_control_B.i_i3, iA,
                    &proc_control_B.nA, proc_control_B.iC);
                }

                if (!ColdReset) {
                  for (proc_control_B.i_i = 0; proc_control_B.i_i < 17;
                       proc_control_B.i_i++) {
                    x[proc_control_B.i_i] += proc_control_B.t_m *
                      proc_control_B.z_o[proc_control_B.i_i];
                  }

                  if (std::abs(proc_control_B.t_m - proc_control_B.cVal) <
                      eps_AH2epkhQ()) {
                    if (proc_control_B.nA == proc_control_degrees) {
                      *status = -1;
                      exitg1 = 1;
                    } else {
                      proc_control_B.nA++;
                      proc_control_B.iC[proc_control_B.nA - 1] =
                        proc_control_B.tmp + 1;
                      proc_control_B.i_i3 = proc_control_B.nA - 1;
                      exitg4 = false;
                      while ((!exitg4) && (proc_control_B.i_i3 + 1 > 1)) {
                        proc_control_B.i_i =
                          proc_control_B.iC[proc_control_B.i_i3 - 1];
                        if (proc_control_B.iC[proc_control_B.i_i3] >
                            proc_control_B.i_i) {
                          exitg4 = true;
                        } else {
                          proc_control_B.iSave =
                            proc_control_B.iC[proc_control_B.i_i3];
                          proc_control_B.iC[proc_control_B.i_i3] =
                            proc_control_B.i_i;
                          proc_control_B.iC[proc_control_B.i_i3 - 1] =
                            proc_control_B.iSave;
                          proc_control_B.i_i3--;
                        }
                      }

                      iA[proc_control_B.tmp] = true;
                      proc_control_B.tmp = -1;
                      (*status)++;
                    }
                  } else {
                    (*status)++;
                  }
                } else {
                  (*status)++;
                }
              }
            }
          } else {
            proc_control_B.cMin = norm_8ho9XaR8(x);
            if (std::abs(proc_control_B.cMin - proc_control_B.Xnorm0) > 0.001) {
              proc_control_B.Xnorm0 = proc_control_B.cMin;
              abs_TVF9gj68(b, proc_control_B.dv4);
              maximum2_d2MhUgrc(proc_control_B.dv4, 1.0, proc_control_B.cTol);
              cTolComputed = false;
            }

            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S172>/FixedHorizonOptimizer'
void proc_control::proc_control_mpcblock_optimizer(const real_T rseq[130], const
  real_T vseq[11], const real_T umin[8], const real_T umax[8], const real_T x[25],
  const real_T old_u[8], const boolean_T iA[252], const real_T b_Mlim[252],
  real_T b_Mx[6300], real_T b_Mu1[2016], real_T b_Mv[2772], const real_T
  b_utarget[80], const real_T b_uoff[8], real_T b_H[289], real_T b_Ac[4284],
  const real_T ywt[13], const real_T uwt[8], const real_T duwt[8], const real_T
  b_Jm[1280], const real_T b_I1[640], const real_T b_A[625], const real_T Bu
  [2200], const real_T Bv[275], const real_T b_C[325], const real_T Dv[143],
  const int32_T b_Mrows[252], const real_T b_RMVscale[8], real_T u[8], real_T
  useq[88], real_T *status, boolean_T iAout[252])
{
  static const int8_T c_A[100]{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,
    0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
    1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1 };

  int16_T ixw;
  boolean_T exitg1;
  std::memset(&useq[0], 0, 88U * sizeof(real_T));
  std::memset(&iAout[0], 0, 252U * sizeof(boolean_T));
  for (proc_control_B.i_p = 0; proc_control_B.i_p < 25; proc_control_B.i_p++) {
    std::memset(&proc_control_B.CA[proc_control_B.i_p * 13], 0, 13U * sizeof
                (real_T));
    for (proc_control_B.i1 = 0; proc_control_B.i1 < 25; proc_control_B.i1++) {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.CA_tmp = 13 * proc_control_B.i_p + proc_control_B.j2;
        proc_control_B.CA[proc_control_B.CA_tmp] += b_C[13 * proc_control_B.i1 +
          proc_control_B.j2] * b_A[25 * proc_control_B.i_p + proc_control_B.i1];
      }
    }
  }

  for (proc_control_B.i_p = 0; proc_control_B.i_p < 8; proc_control_B.i_p++) {
    std::memset(&proc_control_B.Sum_l[proc_control_B.i_p * 13], 0, 13U * sizeof
                (real_T));
    for (proc_control_B.i1 = 0; proc_control_B.i1 < 25; proc_control_B.i1++) {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.Sum_tmp = 13 * proc_control_B.i_p + proc_control_B.j2;
        proc_control_B.Sum_l[proc_control_B.Sum_tmp] += b_C[13 *
          proc_control_B.i1 + proc_control_B.j2] * Bu[25 * proc_control_B.i_p +
          proc_control_B.i1];
      }
    }
  }

  std::memset(&proc_control_B.rows[0], 0, 13U * sizeof(real_T));
  proc_control_B.j2 = 0;
  for (proc_control_B.i1 = 0; proc_control_B.i1 < 25; proc_control_B.i1++) {
    for (proc_control_B.i_p = 0; proc_control_B.i_p < 13; proc_control_B.i_p++)
    {
      proc_control_B.rows[proc_control_B.i_p] += b_C[proc_control_B.i_p +
        proc_control_B.j2] * Bv[proc_control_B.i1];
    }

    proc_control_B.j2 += 13;
  }

  for (proc_control_B.i_p = 0; proc_control_B.i_p < 13; proc_control_B.i_p++) {
    proc_control_B.b_Hv[proc_control_B.i_p] =
      proc_control_B.rows[proc_control_B.i_p];
    proc_control_B.b_Hv[proc_control_B.i_p + 130] = Dv[proc_control_B.i_p];
  }

  proc_control_B.i_p = 0;
  for (proc_control_B.j2 = 0; proc_control_B.j2 < 9; proc_control_B.j2++) {
    std::memset(&proc_control_B.b_Hv[proc_control_B.i_p + 260], 0, 13U * sizeof
                (real_T));
    proc_control_B.i_p += 130;
  }

  proc_control_B.i_p = 0;
  for (proc_control_B.j2 = 0; proc_control_B.j2 < 11; proc_control_B.j2++) {
    std::memset(&proc_control_B.b_Hv[proc_control_B.i_p + 13], 0, 117U * sizeof
                (real_T));
    proc_control_B.i_p += 130;
  }

  for (proc_control_B.i_p = 0; proc_control_B.i_p < 25; proc_control_B.i_p++) {
    std::memcpy(&proc_control_B.b_Sx[proc_control_B.i_p * 130],
                &proc_control_B.CA[proc_control_B.i_p * 13], 13U * sizeof(real_T));
    std::memset(&proc_control_B.b_Sx[proc_control_B.i_p * 130 + 13], 0, 117U *
                sizeof(real_T));
  }

  for (proc_control_B.i_p = 0; proc_control_B.i_p < 8; proc_control_B.i_p++) {
    std::memcpy(&proc_control_B.b_Su1[proc_control_B.i_p * 130],
                &proc_control_B.Sum_l[proc_control_B.i_p * 13], 13U * sizeof
                (real_T));
    std::memset(&proc_control_B.b_Su1[proc_control_B.i_p * 130 + 13], 0, 117U *
                sizeof(real_T));
    std::memcpy(&proc_control_B.Su[proc_control_B.i_p * 130],
                &proc_control_B.Sum_l[proc_control_B.i_p * 13], 13U * sizeof
                (real_T));
  }

  proc_control_B.i_p = 0;
  for (proc_control_B.j2 = 0; proc_control_B.j2 < 72; proc_control_B.j2++) {
    std::memset(&proc_control_B.Su[proc_control_B.i_p + 1040], 0, 13U * sizeof
                (real_T));
    proc_control_B.i_p += 130;
  }

  proc_control_B.i_p = 0;
  for (proc_control_B.j2 = 0; proc_control_B.j2 < 80; proc_control_B.j2++) {
    std::memset(&proc_control_B.Su[proc_control_B.i_p + 13], 0, 117U * sizeof
                (real_T));
    proc_control_B.i_p += 130;
  }

  for (proc_control_B.kidx = 0; proc_control_B.kidx < 9; proc_control_B.kidx++)
  {
    proc_control_B.CA_tmp = (proc_control_B.kidx + 1) * 13;
    for (proc_control_B.i_p = 0; proc_control_B.i_p < 13; proc_control_B.i_p++)
    {
      proc_control_B.rows[proc_control_B.i_p] = static_cast<real_T>
        (proc_control_B.CA_tmp + proc_control_B.i_p) + 1.0;
      proc_control_B.j2 = 0;
      proc_control_B.i1 = 0;
      for (proc_control_B.i_b = 0; proc_control_B.i_b < 8; proc_control_B.i_b++)
      {
        proc_control_B.Sum_n = 0.0;
        proc_control_B.Sum_tmp = 0;
        for (proc_control_B.b_Linv_tmp = 0; proc_control_B.b_Linv_tmp < 25;
             proc_control_B.b_Linv_tmp++) {
          proc_control_B.Sum_n += proc_control_B.CA[proc_control_B.Sum_tmp +
            proc_control_B.i_p] * Bu[proc_control_B.b_Linv_tmp +
            proc_control_B.i1];
          proc_control_B.Sum_tmp += 13;
        }

        proc_control_B.Sum_tmp = proc_control_B.j2 + proc_control_B.i_p;
        proc_control_B.Sum_l[proc_control_B.Sum_tmp] += proc_control_B.Sum_n;
        proc_control_B.j2 += 13;
        proc_control_B.i1 += 25;
      }

      proc_control_B.b_Su1_tmp[proc_control_B.i_p] = static_cast<uint8_T>
        (proc_control_B.rows[proc_control_B.i_p]);
    }

    for (proc_control_B.i_p = 0; proc_control_B.i_p < 8; proc_control_B.i_p++) {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.Sum_tmp = 13 * proc_control_B.i_p + proc_control_B.j2;
        proc_control_B.Sum_n = proc_control_B.Sum_l[proc_control_B.Sum_tmp];
        proc_control_B.b_Su1[(proc_control_B.b_Su1_tmp[proc_control_B.j2] + 130 *
                              proc_control_B.i_p) - 1] = proc_control_B.Sum_n;
        proc_control_B.Sum_b[proc_control_B.Sum_tmp] = proc_control_B.Sum_n;
      }
    }

    for (proc_control_B.i_p = 0; proc_control_B.i_p < 72; proc_control_B.i_p++)
    {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.Sum_b[proc_control_B.j2 + 13 * (proc_control_B.i_p + 8)] =
          proc_control_B.Su[(130 * proc_control_B.i_p +
                             proc_control_B.b_Su1_tmp[proc_control_B.j2]) - 14];
      }
    }

    for (proc_control_B.i_p = 0; proc_control_B.i_p < 80; proc_control_B.i_p++)
    {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.Su[(static_cast<int32_T>
                           (proc_control_B.rows[proc_control_B.j2]) + 130 *
                           proc_control_B.i_p) - 1] = proc_control_B.Sum_b[13 *
          proc_control_B.i_p + proc_control_B.j2];
      }
    }

    for (proc_control_B.i_p = 0; proc_control_B.i_p < 13; proc_control_B.i_p++)
    {
      proc_control_B.CA_i[proc_control_B.i_p] = 0.0;
      proc_control_B.j2 = 0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 25; proc_control_B.i1++) {
        proc_control_B.CA_i[proc_control_B.i_p] +=
          proc_control_B.CA[proc_control_B.j2 + proc_control_B.i_p] *
          Bv[proc_control_B.i1];
        proc_control_B.j2 += 13;
      }

      proc_control_B.CA_j[proc_control_B.i_p] =
        proc_control_B.CA_i[proc_control_B.i_p];
    }

    for (proc_control_B.i_p = 0; proc_control_B.i_p < 10; proc_control_B.i_p++)
    {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.CA_j[proc_control_B.j2 + 13 * (proc_control_B.i_p + 1)] =
          proc_control_B.b_Hv[(130 * proc_control_B.i_p + static_cast<int32_T>
          (proc_control_B.rows[proc_control_B.j2])) - 14];
      }
    }

    for (proc_control_B.i_p = 0; proc_control_B.i_p < 11; proc_control_B.i_p++)
    {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.b_Hv[(static_cast<int32_T>
                             (proc_control_B.rows[proc_control_B.j2]) + 130 *
                             proc_control_B.i_p) - 1] = proc_control_B.CA_j[13 *
          proc_control_B.i_p + proc_control_B.j2];
      }
    }

    for (proc_control_B.i_p = 0; proc_control_B.i_p < 13; proc_control_B.i_p++)
    {
      proc_control_B.j2 = 0;
      proc_control_B.i1 = 0;
      for (proc_control_B.i_b = 0; proc_control_B.i_b < 25; proc_control_B.i_b++)
      {
        proc_control_B.CA_tmp = proc_control_B.j2 + proc_control_B.i_p;
        proc_control_B.CA_f[proc_control_B.CA_tmp] = 0.0;
        proc_control_B.Sum_tmp = 0;
        for (proc_control_B.b_Linv_tmp = 0; proc_control_B.b_Linv_tmp < 25;
             proc_control_B.b_Linv_tmp++) {
          proc_control_B.CA_f[proc_control_B.CA_tmp] +=
            proc_control_B.CA[proc_control_B.Sum_tmp + proc_control_B.i_p] *
            b_A[proc_control_B.b_Linv_tmp + proc_control_B.i1];
          proc_control_B.Sum_tmp += 13;
        }

        proc_control_B.j2 += 13;
        proc_control_B.i1 += 25;
      }
    }

    std::memcpy(&proc_control_B.CA[0], &proc_control_B.CA_f[0], 325U * sizeof
                (real_T));
    for (proc_control_B.i_p = 0; proc_control_B.i_p < 25; proc_control_B.i_p++)
    {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 13; proc_control_B.j2++) {
        proc_control_B.b_Sx[(static_cast<int32_T>
                             (proc_control_B.rows[proc_control_B.j2]) + 130 *
                             proc_control_B.i_p) - 1] = proc_control_B.CA[13 *
          proc_control_B.i_p + proc_control_B.j2];
      }
    }
  }

  for (proc_control_B.i_p = 0; proc_control_B.i_p < 16; proc_control_B.i_p++) {
    std::memset(&proc_control_B.b_SuJm[proc_control_B.i_p * 130], 0, 130U *
                sizeof(real_T));
    for (proc_control_B.i1 = 0; proc_control_B.i1 < 80; proc_control_B.i1++) {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 130; proc_control_B.j2++)
      {
        proc_control_B.kidx = 130 * proc_control_B.i_p + proc_control_B.j2;
        proc_control_B.b_SuJm[proc_control_B.kidx] += proc_control_B.Su[130 *
          proc_control_B.i1 + proc_control_B.j2] * b_Jm[80 * proc_control_B.i_p
          + proc_control_B.i1];
      }
    }
  }

  if (b_Mrows[0] > 0) {
    proc_control_B.kidx = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.kidx < 252)) {
      if (b_Mrows[proc_control_B.kidx] <= 130) {
        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_p = 0; proc_control_B.i_p < 16; proc_control_B.i_p
             ++) {
          b_Ac[proc_control_B.kidx + 252 * proc_control_B.i_p] =
            -proc_control_B.b_SuJm[(130 * proc_control_B.i_p + proc_control_B.j2)
            - 1];
        }

        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_p = 0; proc_control_B.i_p < 25; proc_control_B.i_p
             ++) {
          b_Mx[proc_control_B.kidx + 252 * proc_control_B.i_p] =
            -proc_control_B.b_Sx[(130 * proc_control_B.i_p + proc_control_B.j2)
            - 1];
        }

        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_p = 0; proc_control_B.i_p < 8; proc_control_B.i_p
             ++) {
          b_Mu1[proc_control_B.kidx + 252 * proc_control_B.i_p] =
            -proc_control_B.b_Su1[(130 * proc_control_B.i_p + proc_control_B.j2)
            - 1];
        }

        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_p = 0; proc_control_B.i_p < 11; proc_control_B.i_p
             ++) {
          b_Mv[proc_control_B.kidx + 252 * proc_control_B.i_p] =
            -proc_control_B.b_Hv[(130 * proc_control_B.i_p + proc_control_B.j2)
            - 1];
        }

        proc_control_B.kidx++;
      } else if (b_Mrows[proc_control_B.kidx] <= 260) {
        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_p = 0; proc_control_B.i_p < 16; proc_control_B.i_p
             ++) {
          b_Ac[proc_control_B.kidx + 252 * proc_control_B.i_p] =
            proc_control_B.b_SuJm[(130 * proc_control_B.i_p + proc_control_B.j2)
            - 131];
        }

        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_p = 0; proc_control_B.i_p < 25; proc_control_B.i_p
             ++) {
          b_Mx[proc_control_B.kidx + 252 * proc_control_B.i_p] =
            proc_control_B.b_Sx[(130 * proc_control_B.i_p + proc_control_B.j2) -
            131];
        }

        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_p = 0; proc_control_B.i_p < 8; proc_control_B.i_p
             ++) {
          b_Mu1[proc_control_B.kidx + 252 * proc_control_B.i_p] =
            proc_control_B.b_Su1[(130 * proc_control_B.i_p + proc_control_B.j2)
            - 131];
        }

        proc_control_B.j2 = b_Mrows[proc_control_B.kidx];
        for (proc_control_B.i_p = 0; proc_control_B.i_p < 11; proc_control_B.i_p
             ++) {
          b_Mv[proc_control_B.kidx + 252 * proc_control_B.i_p] =
            proc_control_B.b_Hv[(130 * proc_control_B.i_p + proc_control_B.j2) -
            131];
        }

        proc_control_B.kidx++;
      } else {
        exitg1 = true;
      }
    }
  }

  for (proc_control_B.kidx = 0; proc_control_B.kidx < 13; proc_control_B.kidx++)
  {
    proc_control_B.Sum_n = ywt[proc_control_B.kidx];
    if (proc_control_B.Sum_n < 0.0) {
      proc_control_B.rows[proc_control_B.kidx] = 0.0;
    } else {
      proc_control_B.rows[proc_control_B.kidx] = proc_control_B.Sum_n *
        proc_control_B.Sum_n;
    }
  }

  for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
  {
    proc_control_B.Sum_n = duwt[proc_control_B.kidx];
    proc_control_B.uwt = uwt[proc_control_B.kidx];
    if (proc_control_B.uwt < 0.0) {
      proc_control_B.b_Wu[proc_control_B.kidx] = 0.0;
    } else {
      proc_control_B.b_Wu[proc_control_B.kidx] = proc_control_B.uwt *
        proc_control_B.uwt;
    }

    if (proc_control_B.Sum_n < 0.0) {
      proc_control_B.b_Wdu[proc_control_B.kidx] = 0.0;
    } else {
      proc_control_B.b_Wdu[proc_control_B.kidx] = proc_control_B.Sum_n *
        proc_control_B.Sum_n;
    }
  }

  std::memset(&proc_control_B.b_B_p[0], 0, sizeof(int8_T) << 6U);
  proc_control_B.CA_tmp = 0;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
  {
    proc_control_B.b_B_p[proc_control_B.CA_tmp] = 1;
    proc_control_B.CA_tmp += 9;
  }

  proc_control_B.kidx = -1;
  for (proc_control_B.i_p = 0; proc_control_B.i_p < 10; proc_control_B.i_p++) {
    for (proc_control_B.j2 = 0; proc_control_B.j2 < 8; proc_control_B.j2++) {
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 10; proc_control_B.i1++) {
        for (proc_control_B.CA_tmp = 0; proc_control_B.CA_tmp < 8;
             proc_control_B.CA_tmp++) {
          proc_control_B.a_b[(proc_control_B.kidx + proc_control_B.CA_tmp) + 1] =
            static_cast<int8_T>(c_A[10 * proc_control_B.i_p + proc_control_B.i1]
                                * proc_control_B.b_B_p[(proc_control_B.j2 << 3)
                                + proc_control_B.CA_tmp]);
        }

        proc_control_B.kidx += 8;
      }
    }
  }

  for (proc_control_B.i_p = 0; proc_control_B.i_p < 16; proc_control_B.i_p++) {
    std::memset(&proc_control_B.I2Jm[proc_control_B.i_p * 80], 0, 80U * sizeof
                (real_T));
    for (proc_control_B.i1 = 0; proc_control_B.i1 < 80; proc_control_B.i1++) {
      for (proc_control_B.j2 = 0; proc_control_B.j2 < 80; proc_control_B.j2++) {
        proc_control_B.kidx = 80 * proc_control_B.i_p + proc_control_B.j2;
        proc_control_B.I2Jm[proc_control_B.kidx] += static_cast<real_T>
          (proc_control_B.a_b[80 * proc_control_B.i1 + proc_control_B.j2]) *
          b_Jm[80 * proc_control_B.i_p + proc_control_B.i1];
      }
    }
  }

  ixw = 1;
  for (proc_control_B.kidx = 0; proc_control_B.kidx < 130; proc_control_B.kidx++)
  {
    proc_control_B.Sum_n = proc_control_B.rows[ixw - 1];
    for (proc_control_B.i_p = 0; proc_control_B.i_p < 16; proc_control_B.i_p++)
    {
      proc_control_B.j2 = 130 * proc_control_B.i_p + proc_control_B.kidx;
      proc_control_B.WySuJm[proc_control_B.j2] =
        proc_control_B.b_SuJm[proc_control_B.j2] * proc_control_B.Sum_n;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 13) {
      ixw = 1;
    }
  }

  WtMult_xtNnjgO3(proc_control_B.b_Wu, proc_control_B.I2Jm, proc_control_nu,
                  proc_control_B.WuI2Jm);
  WtMult_xtNnjgO3(proc_control_B.b_Wdu, b_Jm, proc_control_nu,
                  proc_control_B.dv2);
  for (proc_control_B.i_p = 0; proc_control_B.i_p < 16; proc_control_B.i_p++) {
    for (proc_control_B.j2 = 0; proc_control_B.j2 < 16; proc_control_B.j2++) {
      proc_control_B.kidx = (proc_control_B.i_p << 4) + proc_control_B.j2;
      proc_control_B.b_SuJm_a[proc_control_B.kidx] = 0.0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 130; proc_control_B.i1++)
      {
        proc_control_B.b_SuJm_a[proc_control_B.kidx] += proc_control_B.b_SuJm
          [130 * proc_control_B.j2 + proc_control_B.i1] * proc_control_B.WySuJm
          [130 * proc_control_B.i_p + proc_control_B.i1];
      }

      proc_control_B.b_Jm[proc_control_B.kidx] = 0.0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 80; proc_control_B.i1++) {
        proc_control_B.b_Jm[proc_control_B.kidx] += b_Jm[80 * proc_control_B.j2
          + proc_control_B.i1] * proc_control_B.dv2[80 * proc_control_B.i_p +
          proc_control_B.i1];
      }
    }
  }

  for (proc_control_B.i_p = 0; proc_control_B.i_p < 16; proc_control_B.i_p++) {
    for (proc_control_B.j2 = 0; proc_control_B.j2 < 16; proc_control_B.j2++) {
      proc_control_B.Sum_n = 0.0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 80; proc_control_B.i1++) {
        proc_control_B.Sum_n += proc_control_B.I2Jm[80 * proc_control_B.i_p +
          proc_control_B.i1] * proc_control_B.WuI2Jm[80 * proc_control_B.j2 +
          proc_control_B.i1];
      }

      proc_control_B.kidx = (proc_control_B.j2 << 4) + proc_control_B.i_p;
      b_H[proc_control_B.i_p + 17 * proc_control_B.j2] =
        (proc_control_B.b_SuJm_a[proc_control_B.kidx] +
         proc_control_B.b_Jm[proc_control_B.kidx]) + proc_control_B.Sum_n;
    }

    for (proc_control_B.j2 = 0; proc_control_B.j2 < 8; proc_control_B.j2++) {
      proc_control_B.kidx = (proc_control_B.i_p << 3) + proc_control_B.j2;
      proc_control_B.b_Su1_a[proc_control_B.kidx] = 0.0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 130; proc_control_B.i1++)
      {
        proc_control_B.b_Su1_a[proc_control_B.kidx] += proc_control_B.b_Su1[130 *
          proc_control_B.j2 + proc_control_B.i1] * proc_control_B.WySuJm[130 *
          proc_control_B.i_p + proc_control_B.i1];
      }

      proc_control_B.b_I1[proc_control_B.kidx] = 0.0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 80; proc_control_B.i1++) {
        proc_control_B.b_I1[proc_control_B.kidx] += b_I1[80 * proc_control_B.j2
          + proc_control_B.i1] * proc_control_B.WuI2Jm[80 * proc_control_B.i_p +
          proc_control_B.i1];
      }
    }
  }

  for (proc_control_B.i_p = 0; proc_control_B.i_p < 128; proc_control_B.i_p++) {
    proc_control_B.b_Ku1[proc_control_B.i_p] =
      proc_control_B.b_Su1_a[proc_control_B.i_p] +
      proc_control_B.b_I1[proc_control_B.i_p];
  }

  for (proc_control_B.i_p = 0; proc_control_B.i_p < 1280; proc_control_B.i_p++)
  {
    proc_control_B.WuI2Jm[proc_control_B.i_p] =
      -proc_control_B.WuI2Jm[proc_control_B.i_p];
  }

  for (proc_control_B.i_p = 0; proc_control_B.i_p < 16; proc_control_B.i_p++) {
    for (proc_control_B.j2 = 0; proc_control_B.j2 < 25; proc_control_B.j2++) {
      proc_control_B.kidx = 25 * proc_control_B.i_p + proc_control_B.j2;
      proc_control_B.b_Kx[proc_control_B.kidx] = 0.0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 130; proc_control_B.i1++)
      {
        proc_control_B.b_Kx[proc_control_B.kidx] += proc_control_B.b_Sx[130 *
          proc_control_B.j2 + proc_control_B.i1] * proc_control_B.WySuJm[130 *
          proc_control_B.i_p + proc_control_B.i1];
      }
    }

    for (proc_control_B.j2 = 0; proc_control_B.j2 < 11; proc_control_B.j2++) {
      proc_control_B.kidx = 11 * proc_control_B.i_p + proc_control_B.j2;
      proc_control_B.b_Kv[proc_control_B.kidx] = 0.0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 130; proc_control_B.i1++)
      {
        proc_control_B.b_Kv[proc_control_B.kidx] += proc_control_B.b_Hv[130 *
          proc_control_B.j2 + proc_control_B.i1] * proc_control_B.WySuJm[130 *
          proc_control_B.i_p + proc_control_B.i1];
      }
    }
  }

  for (proc_control_B.i_p = 0; proc_control_B.i_p < 2080; proc_control_B.i_p++)
  {
    proc_control_B.WySuJm[proc_control_B.i_p] =
      -proc_control_B.WySuJm[proc_control_B.i_p];
  }

  std::memcpy(&proc_control_B.b_Linv[0], &b_H[0], 289U * sizeof(real_T));
  proc__mpc_checkhessian_IKf8MUv4(proc_control_B.b_Linv, proc_control_B.c_Linv,
    &proc_control_B.Sum_n);
  if (proc_control_B.Sum_n > 1.0) {
    proc_control_B.kidx = 0;
    for (proc_control_B.CA_tmp = 0; proc_control_B.CA_tmp < 8;
         proc_control_B.CA_tmp++) {
      u[proc_control_B.CA_tmp] = old_u[proc_control_B.CA_tmp] +
        b_uoff[proc_control_B.CA_tmp];
      for (proc_control_B.i_p = 0; proc_control_B.i_p < 11; proc_control_B.i_p++)
      {
        useq[proc_control_B.i_p + proc_control_B.kidx] = u[proc_control_B.CA_tmp];
      }

      proc_control_B.kidx += 11;
    }

    *status = -2.0;
  } else {
    std::memset(&proc_control_B.c_B[0], 0, 289U * sizeof(int8_T));
    proc_control_B.CA_tmp = 0;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 17; proc_control_B.kidx
         ++) {
      proc_control_B.c_B[proc_control_B.CA_tmp] = 1;
      proc_control_B.CA_tmp += 18;
    }

    proc_control_B.CA_tmp = 0;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 17; proc_control_B.kidx
         ++) {
      for (proc_control_B.i_p = 0; proc_control_B.i_p < 17; proc_control_B.i_p++)
      {
        proc_control_B.b_Linv_tmp = proc_control_B.i_p + proc_control_B.CA_tmp;
        proc_control_B.b_Linv[proc_control_B.b_Linv_tmp] =
          proc_control_B.c_B[proc_control_B.b_Linv_tmp];
      }

      proc_control_B.CA_tmp += 17;
    }

    trisolve_1nFOis6o(proc_control_B.c_Linv, proc_control_B.b_Linv);
    for (proc_control_B.i_p = 0; proc_control_B.i_p < 252; proc_control_B.i_p++)
    {
      proc_control_B.Sum_n = 0.0;
      proc_control_B.j2 = 0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 25; proc_control_B.i1++) {
        proc_control_B.Sum_n += b_Mx[proc_control_B.j2 + proc_control_B.i_p] *
          x[proc_control_B.i1];
        proc_control_B.j2 += 252;
      }

      proc_control_B.b_Mlim_a[proc_control_B.i_p] = b_Mlim[proc_control_B.i_p] +
        proc_control_B.Sum_n;
      proc_control_B.b_Mu1[proc_control_B.i_p] = 0.0;
    }

    proc_control_B.i_p = 0;
    for (proc_control_B.j2 = 0; proc_control_B.j2 < 8; proc_control_B.j2++) {
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 252; proc_control_B.i1++)
      {
        proc_control_B.b_Mu1[proc_control_B.i1] += b_Mu1[proc_control_B.i1 +
          proc_control_B.i_p] * old_u[proc_control_B.j2];
      }

      proc_control_B.i_p += 252;
    }

    for (proc_control_B.i_p = 0; proc_control_B.i_p < 252; proc_control_B.i_p++)
    {
      proc_control_B.Sum_n = 0.0;
      proc_control_B.j2 = 0;
      for (proc_control_B.i1 = 0; proc_control_B.i1 < 11; proc_control_B.i1++) {
        proc_control_B.Sum_n += b_Mv[proc_control_B.j2 + proc_control_B.i_p] *
          vseq[proc_control_B.i1];
        proc_control_B.j2 += 252;
      }

      proc_control_B.Bc[proc_control_B.i_p] =
        -((proc_control_B.b_Mlim_a[proc_control_B.i_p] +
           proc_control_B.b_Mu1[proc_control_B.i_p]) + proc_control_B.Sum_n);
    }

    std::memset(&proc_control_B.b_Wu[0], 0, sizeof(real_T) << 3U);
    std::memset(&proc_control_B.b_Wdu[0], 0, sizeof(real_T) << 3U);
    for (proc_control_B.i_p = 0; proc_control_B.i_p < 8; proc_control_B.i_p++) {
      proc_control_B.umax_incr_flag[proc_control_B.i_p] = false;
      proc_control_B.umin_incr_flag[proc_control_B.i_p] = false;
    }

    if (b_Mrows[0] > 0) {
      proc_control_B.kidx = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.kidx < 252)) {
        if ((b_Mrows[proc_control_B.kidx] <= 130) ||
            (b_Mrows[proc_control_B.kidx] <= 260)) {
          proc_control_B.kidx++;
        } else if (b_Mrows[proc_control_B.kidx] <= 340) {
          boolean_T b_Del_Save_Flag0;
          proc_control_B.i_p = (b_Mrows[proc_control_B.kidx] -
                                (((b_Mrows[proc_control_B.kidx] - 261) >> 3) <<
            3)) - 261;
          b_Del_Save_Flag0 = proc_control_B.umax_incr_flag[proc_control_B.i_p];
          if (!proc_control_B.umax_incr_flag[proc_control_B.i_p]) {
            proc_control_B.Sum_n = -(b_RMVscale[proc_control_B.i_p] *
              umax[proc_control_B.i_p] - b_uoff[proc_control_B.i_p]) -
              (-b_Mlim[proc_control_B.kidx]);
            b_Del_Save_Flag0 = true;
          } else {
            proc_control_B.Sum_n = proc_control_B.b_Wu[proc_control_B.i_p];
          }

          proc_control_B.b_Wu[proc_control_B.i_p] = proc_control_B.Sum_n;
          proc_control_B.umax_incr_flag[proc_control_B.i_p] = b_Del_Save_Flag0;
          proc_control_B.Bc[proc_control_B.kidx] += proc_control_B.Sum_n;
          proc_control_B.kidx++;
        } else if (b_Mrows[proc_control_B.kidx] <= 420) {
          boolean_T b_Del_Save_Flag0;
          proc_control_B.i_p = (b_Mrows[proc_control_B.kidx] -
                                (((b_Mrows[proc_control_B.kidx] - 341) >> 3) <<
            3)) - 341;
          b_Del_Save_Flag0 = proc_control_B.umin_incr_flag[proc_control_B.i_p];
          if (!proc_control_B.umin_incr_flag[proc_control_B.i_p]) {
            proc_control_B.Sum_n = (b_RMVscale[proc_control_B.i_p] *
              umin[proc_control_B.i_p] - b_uoff[proc_control_B.i_p]) -
              (-b_Mlim[proc_control_B.kidx]);
            b_Del_Save_Flag0 = true;
          } else {
            proc_control_B.Sum_n = proc_control_B.b_Wdu[proc_control_B.i_p];
          }

          proc_control_B.b_Wdu[proc_control_B.i_p] = proc_control_B.Sum_n;
          proc_control_B.umin_incr_flag[proc_control_B.i_p] = b_Del_Save_Flag0;
          proc_control_B.Bc[proc_control_B.kidx] += proc_control_B.Sum_n;
          proc_control_B.kidx++;
        } else {
          exitg1 = true;
        }
      }
    }

    std::memset(&proc_control_B.f[0], 0, 17U * sizeof(real_T));
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 16; proc_control_B.kidx
         ++) {
      proc_control_B.Sum_n = 0.0;
      for (proc_control_B.i_p = 0; proc_control_B.i_p < 25; proc_control_B.i_p++)
      {
        proc_control_B.Sum_n += proc_control_B.b_Kx[25 * proc_control_B.kidx +
          proc_control_B.i_p] * x[proc_control_B.i_p];
      }

      proc_control_B.uwt = 0.0;
      for (proc_control_B.i_p = 0; proc_control_B.i_p < 130; proc_control_B.i_p
           ++) {
        proc_control_B.uwt += proc_control_B.WySuJm[130 * proc_control_B.kidx +
          proc_control_B.i_p] * rseq[proc_control_B.i_p];
      }

      proc_control_B.b_Ku1_h = 0.0;
      for (proc_control_B.i_p = 0; proc_control_B.i_p < 8; proc_control_B.i_p++)
      {
        proc_control_B.b_Ku1_h += proc_control_B.b_Ku1[(proc_control_B.kidx << 3)
          + proc_control_B.i_p] * old_u[proc_control_B.i_p];
      }

      proc_control_B.b_Kv_b = 0.0;
      for (proc_control_B.i_p = 0; proc_control_B.i_p < 11; proc_control_B.i_p++)
      {
        proc_control_B.b_Kv_b += proc_control_B.b_Kv[11 * proc_control_B.kidx +
          proc_control_B.i_p] * vseq[proc_control_B.i_p];
      }

      proc_control_B.WuI2Jm_os = 0.0;
      for (proc_control_B.i_p = 0; proc_control_B.i_p < 80; proc_control_B.i_p++)
      {
        proc_control_B.WuI2Jm_os += proc_control_B.WuI2Jm[80 *
          proc_control_B.kidx + proc_control_B.i_p] *
          b_utarget[proc_control_B.i_p];
      }

      proc_control_B.f[proc_control_B.kidx] = (((proc_control_B.Sum_n +
        proc_control_B.uwt) + proc_control_B.b_Ku1_h) + proc_control_B.b_Kv_b) +
        proc_control_B.WuI2Jm_os;
    }

    std::memcpy(&iAout[0], &iA[0], 252U * sizeof(boolean_T));
    proc_control_B.i_p = 0;
    for (proc_control_B.j2 = 0; proc_control_B.j2 < 17; proc_control_B.j2++) {
      proc_control_B.i1 = 0;
      for (proc_control_B.i_b = 0; proc_control_B.i_b < 17; proc_control_B.i_b++)
      {
        proc_control_B.b_Linv_tmp = proc_control_B.i_b + proc_control_B.i_p;
        proc_control_B.c_Linv[proc_control_B.b_Linv_tmp] = 0.0;
        for (proc_control_B.Sum_tmp = 0; proc_control_B.Sum_tmp < 17;
             proc_control_B.Sum_tmp++) {
          proc_control_B.c_Linv[proc_control_B.b_Linv_tmp] +=
            proc_control_B.b_Linv[proc_control_B.Sum_tmp + proc_control_B.i1] *
            proc_control_B.b_Linv[proc_control_B.Sum_tmp + proc_control_B.i_p];
        }

        proc_control_B.i1 += 17;
      }

      proc_control_B.i_p += 17;
    }

    proc_control_qpkwik(proc_control_B.b_Linv, proc_control_B.c_Linv,
                        proc_control_B.f, b_Ac, proc_control_B.Bc, iAout, 1076,
                        0.01, proc_control_B.zopt, proc_control_B.b_Mlim_a,
                        &proc_control_B.kidx);
    if ((proc_control_B.kidx < 0) || (proc_control_B.kidx == 0)) {
      std::memset(&proc_control_B.zopt[0], 0, 17U * sizeof(real_T));
    }

    *status = proc_control_B.kidx;
    for (proc_control_B.kidx = 0; proc_control_B.kidx < 8; proc_control_B.kidx++)
    {
      u[proc_control_B.kidx] = (old_u[proc_control_B.kidx] +
        proc_control_B.zopt[proc_control_B.kidx]) + b_uoff[proc_control_B.kidx];
    }
  }
}

boolean_T proc_control::proc_control_isequal(const real_T varargin_1[3], const
  real_T varargin_2[3])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 3)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

boolean_T proc_control::proc_control_isequal_p(const real_T varargin_1[6], const
  real_T varargin_2[6])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 6)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

// Function for MATLAB Function: '<S140>/MATLAB Function2'
boolean_T proc_control::proc_control_anyNonFinite(const real_T x[169])
{
  boolean_T b_p;
  b_p = true;
  for (int32_T k{0}; k < 169; k++) {
    real_T x_0;
    x_0 = x[k];
    if (b_p && (std::isinf(x_0) || std::isnan(x_0))) {
      b_p = false;
    }
  }

  return !b_p;
}

// Function for MATLAB Function: '<S140>/MATLAB Function2'
void proc_control::proc_control_mpower_k(const real_T a[169], real_T b, real_T
  c[169])
{
  proc_control_B.e_j = std::abs(b);
  if (proc_control_B.e_j <= 2.147483647E+9) {
    int32_T b_n;
    int32_T n;
    int32_T nb;
    int32_T nbitson;
    std::memcpy(&proc_control_B.b_a[0], &a[0], 169U * sizeof(real_T));
    n = static_cast<int32_T>(proc_control_B.e_j);
    b_n = static_cast<int32_T>(proc_control_B.e_j);
    nbitson = 0;
    nb = -2;
    while (b_n > 0) {
      nb++;
      if ((b_n & 1U) != 0U) {
        nbitson++;
      }

      b_n >>= 1;
    }

    if (static_cast<int32_T>(proc_control_B.e_j) <= 2) {
      if (b == 2.0) {
        for (nbitson = 0; nbitson < 13; nbitson++) {
          std::memset(&c[nbitson * 13], 0, 13U * sizeof(real_T));
          for (int32_T i{0}; i < 13; i++) {
            for (int32_T i_1{0}; i_1 < 13; i_1++) {
              int32_T c_tmp;
              c_tmp = 13 * nbitson + i_1;
              c[c_tmp] += a[13 * i + i_1] * a[13 * nbitson + i];
            }
          }
        }
      } else {
        boolean_T firstmult;
        firstmult = false;
        for (n = 0; n < 169; n++) {
          if (!firstmult) {
            firstmult = std::isnan(a[n]);
          }
        }

        if (firstmult) {
          for (nbitson = 0; nbitson < 169; nbitson++) {
            c[nbitson] = (rtNaN);
          }
        } else {
          std::memset(&c[0], 0, 169U * sizeof(real_T));
          b_n = 0;
          for (n = 0; n < 13; n++) {
            c[b_n] = 1.0;
            b_n += 14;
          }
        }
      }
    } else {
      int32_T c_tmp;
      int32_T i_1;
      boolean_T aBufferInUse;
      boolean_T cBufferInUse;
      boolean_T firstmult;
      firstmult = true;
      aBufferInUse = false;
      cBufferInUse = ((nbitson & 1U) == 0U);
      while (b_n <= nb) {
        int32_T tmp;
        if ((n & 1U) != 0U) {
          if (firstmult) {
            firstmult = false;
            if (cBufferInUse) {
              if (aBufferInUse) {
                std::memcpy(&proc_control_B.cBuffer_p[0],
                            &proc_control_B.aBuffer_e[0], 169U * sizeof(real_T));
              } else {
                std::memcpy(&proc_control_B.cBuffer_p[0], &proc_control_B.b_a[0],
                            169U * sizeof(real_T));
              }
            } else if (aBufferInUse) {
              std::memcpy(&c[0], &proc_control_B.aBuffer_e[0], 169U * sizeof
                          (real_T));
            } else {
              std::memcpy(&c[0], &proc_control_B.b_a[0], 169U * sizeof(real_T));
            }
          } else {
            if (aBufferInUse) {
              if (cBufferInUse) {
                for (nbitson = 0; nbitson < 13; nbitson++) {
                  i_1 = 0;
                  for (int32_T i{0}; i < 13; i++) {
                    c_tmp = i_1 + nbitson;
                    c[c_tmp] = 0.0;
                    tmp = 0;
                    for (int32_T i_0{0}; i_0 < 13; i_0++) {
                      c[c_tmp] += proc_control_B.cBuffer_p[tmp + nbitson] *
                        proc_control_B.aBuffer_e[i_0 + i_1];
                      tmp += 13;
                    }

                    i_1 += 13;
                  }
                }
              } else {
                for (nbitson = 0; nbitson < 13; nbitson++) {
                  i_1 = 0;
                  for (int32_T i{0}; i < 13; i++) {
                    c_tmp = i_1 + nbitson;
                    proc_control_B.cBuffer_p[c_tmp] = 0.0;
                    tmp = 0;
                    for (int32_T i_0{0}; i_0 < 13; i_0++) {
                      proc_control_B.cBuffer_p[c_tmp] += c[tmp + nbitson] *
                        proc_control_B.aBuffer_e[i_0 + i_1];
                      tmp += 13;
                    }

                    i_1 += 13;
                  }
                }
              }
            } else if (cBufferInUse) {
              for (nbitson = 0; nbitson < 13; nbitson++) {
                i_1 = 0;
                for (int32_T i{0}; i < 13; i++) {
                  c_tmp = i_1 + nbitson;
                  c[c_tmp] = 0.0;
                  tmp = 0;
                  for (int32_T i_0{0}; i_0 < 13; i_0++) {
                    c[c_tmp] += proc_control_B.cBuffer_p[tmp + nbitson] *
                      proc_control_B.b_a[i_0 + i_1];
                    tmp += 13;
                  }

                  i_1 += 13;
                }
              }
            } else {
              for (nbitson = 0; nbitson < 13; nbitson++) {
                i_1 = 0;
                for (int32_T i{0}; i < 13; i++) {
                  c_tmp = i_1 + nbitson;
                  proc_control_B.cBuffer_p[c_tmp] = 0.0;
                  tmp = 0;
                  for (int32_T i_0{0}; i_0 < 13; i_0++) {
                    proc_control_B.cBuffer_p[c_tmp] += c[tmp + nbitson] *
                      proc_control_B.b_a[i_0 + i_1];
                    tmp += 13;
                  }

                  i_1 += 13;
                }
              }
            }

            cBufferInUse = !cBufferInUse;
          }
        }

        n >>= 1;
        if (aBufferInUse) {
          for (nbitson = 0; nbitson < 13; nbitson++) {
            i_1 = 0;
            for (int32_T i{0}; i < 13; i++) {
              c_tmp = i_1 + nbitson;
              proc_control_B.b_a[c_tmp] = 0.0;
              tmp = 0;
              for (int32_T i_0{0}; i_0 < 13; i_0++) {
                proc_control_B.b_a[c_tmp] += proc_control_B.aBuffer_e[tmp +
                  nbitson] * proc_control_B.aBuffer_e[i_0 + i_1];
                tmp += 13;
              }

              i_1 += 13;
            }
          }
        } else {
          for (nbitson = 0; nbitson < 13; nbitson++) {
            i_1 = 0;
            for (int32_T i{0}; i < 13; i++) {
              c_tmp = i_1 + nbitson;
              proc_control_B.aBuffer_e[c_tmp] = 0.0;
              tmp = 0;
              for (int32_T i_0{0}; i_0 < 13; i_0++) {
                proc_control_B.aBuffer_e[c_tmp] += proc_control_B.b_a[tmp +
                  nbitson] * proc_control_B.b_a[i_0 + i_1];
                tmp += 13;
              }

              i_1 += 13;
            }
          }
        }

        aBufferInUse = !aBufferInUse;
        b_n++;
      }

      for (nbitson = 0; nbitson < 13; nbitson++) {
        std::memset(&proc_control_B.cBuffer_o[nbitson * 13], 0, 13U * sizeof
                    (real_T));
        for (int32_T i{0}; i < 13; i++) {
          for (i_1 = 0; i_1 < 13; i_1++) {
            c_tmp = 13 * nbitson + i_1;
            proc_control_B.cBuffer_o[c_tmp] += proc_control_B.cBuffer_p[13 * i +
              i_1] * proc_control_B.aBuffer_e[13 * nbitson + i];
          }
        }

        std::memset(&proc_control_B.cBuffer_h[nbitson * 13], 0, 13U * sizeof
                    (real_T));
        for (int32_T i{0}; i < 13; i++) {
          for (i_1 = 0; i_1 < 13; i_1++) {
            c_tmp = 13 * nbitson + i_1;
            proc_control_B.cBuffer_h[c_tmp] += proc_control_B.cBuffer_p[13 * i +
              i_1] * proc_control_B.b_a[13 * nbitson + i];
          }
        }
      }

      for (nbitson = 0; nbitson < 169; nbitson++) {
        if (firstmult) {
          if (aBufferInUse) {
            c[nbitson] = proc_control_B.aBuffer_e[nbitson];
          } else {
            c[nbitson] = proc_control_B.b_a[nbitson];
          }
        } else if (aBufferInUse) {
          c[nbitson] = proc_control_B.cBuffer_o[nbitson];
        } else {
          c[nbitson] = proc_control_B.cBuffer_h[nbitson];
        }
      }
    }
  } else {
    std::memcpy(&proc_control_B.b_a[0], &a[0], 169U * sizeof(real_T));
    if ((!std::isinf(b)) && (!std::isnan(b))) {
      boolean_T firstmult;
      firstmult = true;
      int32_T exitg1;
      do {
        int32_T c_tmp;
        int32_T i_1;
        int32_T tmp;
        exitg1 = 0;
        proc_control_B.ed2_g = std::floor(proc_control_B.e_j / 2.0);
        if (2.0 * proc_control_B.ed2_g != proc_control_B.e_j) {
          if (firstmult) {
            std::memcpy(&c[0], &proc_control_B.b_a[0], 169U * sizeof(real_T));
            firstmult = false;
          } else {
            for (int32_T nbitson{0}; nbitson < 13; nbitson++) {
              i_1 = 0;
              for (int32_T i{0}; i < 13; i++) {
                c_tmp = i_1 + nbitson;
                proc_control_B.cBuffer_p[c_tmp] = 0.0;
                tmp = 0;
                for (int32_T i_0{0}; i_0 < 13; i_0++) {
                  proc_control_B.cBuffer_p[c_tmp] += c[tmp + nbitson] *
                    proc_control_B.b_a[i_0 + i_1];
                  tmp += 13;
                }

                i_1 += 13;
              }
            }

            std::memcpy(&c[0], &proc_control_B.cBuffer_p[0], 169U * sizeof
                        (real_T));
          }
        }

        if (proc_control_B.ed2_g == 0.0) {
          exitg1 = 1;
        } else {
          proc_control_B.e_j = proc_control_B.ed2_g;
          for (int32_T nbitson{0}; nbitson < 13; nbitson++) {
            i_1 = 0;
            for (int32_T i{0}; i < 13; i++) {
              c_tmp = i_1 + nbitson;
              proc_control_B.cBuffer_p[c_tmp] = 0.0;
              tmp = 0;
              for (int32_T i_0{0}; i_0 < 13; i_0++) {
                proc_control_B.cBuffer_p[c_tmp] += proc_control_B.b_a[tmp +
                  nbitson] * proc_control_B.b_a[i_0 + i_1];
                tmp += 13;
              }

              i_1 += 13;
            }
          }

          std::memcpy(&proc_control_B.b_a[0], &proc_control_B.cBuffer_p[0], 169U
                      * sizeof(real_T));
        }
      } while (exitg1 == 0);
    } else {
      for (int32_T nbitson{0}; nbitson < 169; nbitson++) {
        c[nbitson] = (rtNaN);
      }
    }
  }
}

// Function for MATLAB Function: '<S140>/MATLAB Function2'
void proc_control::proc_padeApproximation_NWSCAcaS(const real_T A[169], const
  real_T A2[169], const real_T A4[169], const real_T A6[169], int32_T m, real_T
  F[169])
{
  int32_T c_ix;
  int32_T e_k;
  int32_T e_k_0;
  int32_T ix;
  int32_T iy;
  int32_T jj;
  switch (m) {
   case 3:
    std::memcpy(&F[0], &A2[0], 169U * sizeof(real_T));
    e_k_0 = 0;
    iy = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      std::memset(&proc_control_B.A6_k[iy], 0, 13U * sizeof(real_T));
      F[e_k_0] += 60.0;
      e_k_0 += 14;
      iy += 13;
    }

    e_k = 0;
    for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
      iy = 0;
      for (c_ix = 0; c_ix < 13; c_ix++) {
        for (jj = 0; jj < 13; jj++) {
          ix = jj + e_k;
          proc_control_B.A6_k[ix] += A[jj + iy] * F[c_ix + e_k];
        }

        iy += 13;
      }

      e_k += 13;
    }

    for (jj = 0; jj < 169; jj++) {
      F[jj] = proc_control_B.A6_k[jj];
      proc_control_B.V_c[jj] = 12.0 * A2[jj];
    }

    proc_control_B.d_g = 120.0;
    break;

   case 5:
    for (jj = 0; jj < 169; jj++) {
      F[jj] = 420.0 * A2[jj] + A4[jj];
    }

    e_k_0 = 0;
    iy = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      std::memset(&proc_control_B.A6_k[iy], 0, 13U * sizeof(real_T));
      F[e_k_0] += 15120.0;
      e_k_0 += 14;
      iy += 13;
    }

    e_k = 0;
    for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
      iy = 0;
      for (c_ix = 0; c_ix < 13; c_ix++) {
        for (jj = 0; jj < 13; jj++) {
          ix = jj + e_k;
          proc_control_B.A6_k[ix] += A[jj + iy] * F[c_ix + e_k];
        }

        iy += 13;
      }

      e_k += 13;
    }

    for (jj = 0; jj < 169; jj++) {
      F[jj] = proc_control_B.A6_k[jj];
      proc_control_B.V_c[jj] = 30.0 * A4[jj] + 3360.0 * A2[jj];
    }

    proc_control_B.d_g = 30240.0;
    break;

   case 7:
    for (jj = 0; jj < 169; jj++) {
      F[jj] = (1512.0 * A4[jj] + A6[jj]) + 277200.0 * A2[jj];
    }

    e_k_0 = 0;
    iy = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      std::memset(&proc_control_B.A6_k[iy], 0, 13U * sizeof(real_T));
      F[e_k_0] += 8.64864E+6;
      e_k_0 += 14;
      iy += 13;
    }

    e_k = 0;
    for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
      iy = 0;
      for (c_ix = 0; c_ix < 13; c_ix++) {
        for (jj = 0; jj < 13; jj++) {
          ix = jj + e_k;
          proc_control_B.A6_k[ix] += A[jj + iy] * F[c_ix + e_k];
        }

        iy += 13;
      }

      e_k += 13;
    }

    for (jj = 0; jj < 169; jj++) {
      F[jj] = proc_control_B.A6_k[jj];
      proc_control_B.V_c[jj] = (56.0 * A6[jj] + 25200.0 * A4[jj]) + 1.99584E+6 *
        A2[jj];
    }

    proc_control_B.d_g = 1.729728E+7;
    break;

   case 9:
    for (jj = 0; jj < 13; jj++) {
      std::memset(&proc_control_B.V_c[jj * 13], 0, 13U * sizeof(real_T));
      for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
        for (e_k = 0; e_k < 13; e_k++) {
          iy = 13 * jj + e_k;
          proc_control_B.V_c[iy] += A6[13 * e_k_0 + e_k] * A2[13 * jj + e_k_0];
        }
      }
    }

    for (jj = 0; jj < 169; jj++) {
      F[jj] = ((3960.0 * A6[jj] + proc_control_B.V_c[jj]) + 2.16216E+6 * A4[jj])
        + 3.027024E+8 * A2[jj];
    }

    e_k_0 = 0;
    iy = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      std::memset(&proc_control_B.A6_k[iy], 0, 13U * sizeof(real_T));
      F[e_k_0] += 8.8216128E+9;
      e_k_0 += 14;
      iy += 13;
    }

    e_k = 0;
    for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
      iy = 0;
      for (c_ix = 0; c_ix < 13; c_ix++) {
        for (jj = 0; jj < 13; jj++) {
          ix = jj + e_k;
          proc_control_B.A6_k[ix] += A[jj + iy] * F[c_ix + e_k];
        }

        iy += 13;
      }

      e_k += 13;
    }

    for (jj = 0; jj < 169; jj++) {
      F[jj] = proc_control_B.A6_k[jj];
      proc_control_B.V_c[jj] = ((90.0 * proc_control_B.V_c[jj] + 110880.0 *
        A6[jj]) + 3.027024E+7 * A4[jj]) + 2.0756736E+9 * A2[jj];
    }

    proc_control_B.d_g = 1.76432256E+10;
    break;

   default:
    for (jj = 0; jj < 169; jj++) {
      F[jj] = (3.352212864E+10 * A6[jj] + 1.05594705216E+13 * A4[jj]) +
        1.1873537964288E+15 * A2[jj];
    }

    e_k_0 = 0;
    for (e_k = 0; e_k < 13; e_k++) {
      F[e_k_0] += 3.238237626624E+16;
      e_k_0 += 14;
    }

    for (jj = 0; jj < 169; jj++) {
      proc_control_B.V_c[jj] = (16380.0 * A4[jj] + A6[jj]) + 4.08408E+7 * A2[jj];
    }

    for (jj = 0; jj < 13; jj++) {
      e_k = 0;
      for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
        proc_control_B.d_g = 0.0;
        iy = 0;
        for (c_ix = 0; c_ix < 13; c_ix++) {
          proc_control_B.d_g += A6[iy + jj] * proc_control_B.V_c[c_ix + e_k];
          iy += 13;
        }

        iy = e_k + jj;
        proc_control_B.A6_k[iy] = F[iy] + proc_control_B.d_g;
        e_k += 13;
      }
    }

    for (jj = 0; jj < 13; jj++) {
      std::memset(&F[jj * 13], 0, 13U * sizeof(real_T));
      for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
        for (e_k = 0; e_k < 13; e_k++) {
          c_ix = 13 * jj + e_k;
          F[c_ix] += A[13 * e_k_0 + e_k] * proc_control_B.A6_k[13 * jj + e_k_0];
        }
      }
    }

    for (jj = 0; jj < 169; jj++) {
      proc_control_B.A6_k[jj] = (182.0 * A6[jj] + 960960.0 * A4[jj]) +
        1.32324192E+9 * A2[jj];
    }

    for (jj = 0; jj < 13; jj++) {
      e_k = 0;
      for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
        proc_control_B.d_g = 0.0;
        iy = 0;
        for (c_ix = 0; c_ix < 13; c_ix++) {
          proc_control_B.d_g += A6[iy + jj] * proc_control_B.A6_k[c_ix + e_k];
          iy += 13;
        }

        iy = e_k + jj;
        proc_control_B.V_c[iy] = ((A6[iy] * 6.704425728E+11 + proc_control_B.d_g)
          + A4[iy] * 1.29060195264E+14) + A2[iy] * 7.7717703038976E+15;
        e_k += 13;
      }
    }

    proc_control_B.d_g = 6.476475253248E+16;
    break;
  }

  e_k_0 = 0;
  for (e_k = 0; e_k < 13; e_k++) {
    proc_control_B.V_c[e_k_0] += proc_control_B.d_g;
    e_k_0 += 14;
  }

  for (e_k = 0; e_k < 169; e_k++) {
    proc_control_B.V_c[e_k] -= F[e_k];
    F[e_k] *= 2.0;
  }

  for (jj = 0; jj < 13; jj++) {
    proc_control_B.ipiv[jj] = static_cast<int8_T>(jj + 1);
  }

  for (e_k = 0; e_k < 12; e_k++) {
    jj = e_k * 14;
    iy = 0;
    ix = jj;
    proc_control_B.d_g = std::abs(proc_control_B.V_c[jj]);
    for (e_k_0 = 2; e_k_0 <= 13 - e_k; e_k_0++) {
      real_T s;
      ix++;
      s = std::abs(proc_control_B.V_c[ix]);
      if (s > proc_control_B.d_g) {
        iy = e_k_0 - 1;
        proc_control_B.d_g = s;
      }
    }

    if (proc_control_B.V_c[jj + iy] != 0.0) {
      if (iy != 0) {
        c_ix = e_k + iy;
        proc_control_B.ipiv[e_k] = static_cast<int8_T>(c_ix + 1);
        for (e_k_0 = 0; e_k_0 < 13; e_k_0++) {
          proc_control_B.d_g = proc_control_B.V_c[e_k_0 * 13 + e_k];
          iy = e_k_0 * 13 + c_ix;
          proc_control_B.V_c[e_k + e_k_0 * 13] = proc_control_B.V_c[iy];
          proc_control_B.V_c[iy] = proc_control_B.d_g;
        }
      }

      iy = (jj - e_k) + 13;
      for (ix = jj + 1; ix < iy; ix++) {
        proc_control_B.V_c[ix] /= proc_control_B.V_c[jj];
      }
    }

    iy = jj + 13;
    ix = jj;
    for (e_k_0 = 0; e_k_0 <= 11 - e_k; e_k_0++) {
      proc_control_B.d_g = proc_control_B.V_c[iy];
      if (proc_control_B.V_c[iy] != 0.0) {
        int32_T c;
        int32_T ijA;
        c_ix = jj + 1;
        ijA = ix + 14;
        c = (ix - e_k) + 26;
        while (ijA + 1 <= c) {
          proc_control_B.V_c[ijA] += proc_control_B.V_c[c_ix] *
            -proc_control_B.d_g;
          c_ix++;
          ijA++;
        }
      }

      iy += 13;
      ix += 13;
    }
  }

  for (e_k = 0; e_k < 12; e_k++) {
    int8_T ipiv;
    ipiv = proc_control_B.ipiv[e_k];
    if (e_k + 1 != ipiv) {
      for (iy = 0; iy < 13; iy++) {
        jj = 13 * iy + e_k;
        proc_control_B.d_g = F[jj];
        e_k_0 = (13 * iy + ipiv) - 1;
        F[jj] = F[e_k_0];
        F[e_k_0] = proc_control_B.d_g;
      }
    }
  }

  for (e_k = 0; e_k < 13; e_k++) {
    jj = 13 * e_k;
    for (iy = 0; iy < 13; iy++) {
      ix = 13 * iy;
      if (F[iy + jj] != 0.0) {
        for (e_k_0 = iy + 2; e_k_0 < 14; e_k_0++) {
          c_ix = (e_k_0 + jj) - 1;
          F[c_ix] -= proc_control_B.V_c[(e_k_0 + ix) - 1] * F[iy + jj];
        }
      }
    }
  }

  for (e_k = 0; e_k < 13; e_k++) {
    jj = 13 * e_k;
    for (iy = 12; iy >= 0; iy--) {
      ix = 13 * iy;
      if (F[iy + jj] != 0.0) {
        c_ix = iy + jj;
        F[c_ix] /= proc_control_B.V_c[iy + ix];
        for (e_k_0 = 0; e_k_0 < iy; e_k_0++) {
          c_ix = e_k_0 + jj;
          F[c_ix] -= F[iy + jj] * proc_control_B.V_c[e_k_0 + ix];
        }
      }
    }
  }

  e_k_0 = 0;
  for (e_k = 0; e_k < 13; e_k++) {
    F[e_k_0]++;
    e_k_0 += 14;
  }
}

// Function for MATLAB Function: '<S140>/MATLAB Function2'
void proc_control::pro_recomputeBlockDiag_qmxFvKVu(const real_T A[169], real_T
  F[169], const int32_T blockFormat[12])
{
  for (int32_T j{0}; j < 12; j++) {
    switch (blockFormat[j]) {
     case 0:
      break;

     case 1:
      {
        real_T delta_tmp_0;
        real_T delta_tmp_1;
        real_T expa;
        real_T sinchdelta;
        int32_T delta_tmp;
        int32_T delta_tmp_tmp;
        delta_tmp = 13 * j + j;
        delta_tmp_0 = A[delta_tmp];
        proc_control_B.delta = std::exp(delta_tmp_0);
        delta_tmp_tmp = (j + 1) * 13 + j;
        delta_tmp_1 = A[delta_tmp_tmp + 1];
        expa = std::exp(delta_tmp_1);
        sinchdelta = (delta_tmp_1 + delta_tmp_0) / 2.0;
        if (std::fmax(sinchdelta, std::abs(delta_tmp_0 - delta_tmp_1) / 2.0) <
            709.782712893384) {
          delta_tmp_0 = (A[delta_tmp_tmp + 1] - A[delta_tmp]) / 2.0;
          if (delta_tmp_0 == 0.0) {
            delta_tmp_0 = 1.0;
          } else {
            delta_tmp_0 = std::sinh(delta_tmp_0) / delta_tmp_0;
          }

          sinchdelta = A[delta_tmp_tmp] * std::exp(sinchdelta) * delta_tmp_0;
        } else {
          sinchdelta = (expa - proc_control_B.delta) * A[delta_tmp_tmp] /
            (delta_tmp_1 - delta_tmp_0);
        }

        F[delta_tmp] = proc_control_B.delta;
        F[delta_tmp_tmp] = sinchdelta;
        F[delta_tmp_tmp + 1] = expa;
      }
      break;

     default:
      {
        real_T delta_tmp_0;
        real_T delta_tmp_1;
        real_T expa;
        real_T sinchdelta;
        int32_T delta_tmp;
        int32_T delta_tmp_tmp;
        delta_tmp = 13 * j + j;
        delta_tmp_0 = A[delta_tmp + 1];
        delta_tmp_tmp = (j + 1) * 13 + j;
        delta_tmp_1 = A[delta_tmp_tmp];
        proc_control_B.delta = std::sqrt(std::abs(delta_tmp_1 * delta_tmp_0));
        expa = std::exp(A[delta_tmp]);
        if (proc_control_B.delta == 0.0) {
          sinchdelta = 1.0;
        } else {
          sinchdelta = std::sin(proc_control_B.delta) / proc_control_B.delta;
        }

        F[delta_tmp] = expa * std::cos(proc_control_B.delta);
        F[delta_tmp + 1] = delta_tmp_0 * expa * sinchdelta;
        F[delta_tmp_tmp] = delta_tmp_1 * expa * sinchdelta;
        F[delta_tmp_tmp + 1] = F[delta_tmp];
      }
      break;
    }
  }

  if (blockFormat[11] == 0) {
    F[168] = std::exp(A[168]);
  }
}

// Function for MATLAB Function: '<S140>/MATLAB Function2'
real_T proc_control::proc_control_xnrm2_yAJpxfog(int32_T n, const real_T x[3])
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x[1]);
    } else {
      proc_control_B.scale_m = 3.3121686421112381E-170;
      proc_control_B.absxk_nn = std::abs(x[1]);
      if (proc_control_B.absxk_nn > 3.3121686421112381E-170) {
        y = 1.0;
        proc_control_B.scale_m = proc_control_B.absxk_nn;
      } else {
        proc_control_B.t_c = proc_control_B.absxk_nn / 3.3121686421112381E-170;
        y = proc_control_B.t_c * proc_control_B.t_c;
      }

      proc_control_B.absxk_nn = std::abs(x[2]);
      if (proc_control_B.absxk_nn > proc_control_B.scale_m) {
        proc_control_B.t_c = proc_control_B.scale_m / proc_control_B.absxk_nn;
        y = y * proc_control_B.t_c * proc_control_B.t_c + 1.0;
        proc_control_B.scale_m = proc_control_B.absxk_nn;
      } else {
        proc_control_B.t_c = proc_control_B.absxk_nn / proc_control_B.scale_m;
        y += proc_control_B.t_c * proc_control_B.t_c;
      }

      y = proc_control_B.scale_m * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S140>/MATLAB Function2'
real_T proc_control::proc_control_xzlarfg_RGPUCK3Y(int32_T n, real_T *alpha1,
  real_T x[3])
{
  real_T tau;
  tau = 0.0;
  if (n > 0) {
    proc_control_B.xnorm_i = proc_control_xnrm2_yAJpxfog(n - 1, x);
    if (proc_control_B.xnorm_i != 0.0) {
      proc_control_B.xnorm_i = proc_control_rt_hypotd_snf(*alpha1,
        proc_control_B.xnorm_i);
      if (*alpha1 >= 0.0) {
        proc_control_B.xnorm_i = -proc_control_B.xnorm_i;
      }

      if (std::abs(proc_control_B.xnorm_i) < 1.0020841800044864E-292) {
        int32_T knt;
        knt = 0;
        do {
          knt++;
          for (int32_T c_k{1}; c_k < n; c_k++) {
            x[c_k] *= 9.9792015476736E+291;
          }

          proc_control_B.xnorm_i *= 9.9792015476736E+291;
          *alpha1 *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.xnorm_i) < 1.0020841800044864E-292) &&
                 (knt < 20));

        proc_control_B.xnorm_i = proc_control_rt_hypotd_snf(*alpha1,
          proc_control_xnrm2_yAJpxfog(n - 1, x));
        if (*alpha1 >= 0.0) {
          proc_control_B.xnorm_i = -proc_control_B.xnorm_i;
        }

        tau = (proc_control_B.xnorm_i - *alpha1) / proc_control_B.xnorm_i;
        proc_control_B.a_c = 1.0 / (*alpha1 - proc_control_B.xnorm_i);
        for (int32_T c_k{1}; c_k < n; c_k++) {
          x[c_k] *= proc_control_B.a_c;
        }

        for (int32_T c_k{0}; c_k < knt; c_k++) {
          proc_control_B.xnorm_i *= 1.0020841800044864E-292;
        }

        *alpha1 = proc_control_B.xnorm_i;
      } else {
        tau = (proc_control_B.xnorm_i - *alpha1) / proc_control_B.xnorm_i;
        proc_control_B.a_c = 1.0 / (*alpha1 - proc_control_B.xnorm_i);
        for (int32_T knt{1}; knt < n; knt++) {
          x[knt] *= proc_control_B.a_c;
        }

        *alpha1 = proc_control_B.xnorm_i;
      }
    }
  }

  return tau;
}

// Function for MATLAB Function: '<S140>/MATLAB Function2'
void proc_control::proc_control_xdlanv2_W63kZdPv(real_T *a, real_T *b, real_T *c,
  real_T *d, real_T *rt1r, real_T *rt1i, real_T *rt2r, real_T *rt2i, real_T *cs,
  real_T *sn)
{
  if (*c == 0.0) {
    *cs = 1.0;
    *sn = 0.0;
  } else if (*b == 0.0) {
    *cs = 0.0;
    *sn = 1.0;
    proc_control_B.temp_oq = *d;
    *d = *a;
    *a = proc_control_B.temp_oq;
    *b = -*c;
    *c = 0.0;
  } else {
    proc_control_B.temp_oq = *a - *d;
    if ((proc_control_B.temp_oq == 0.0) && ((*b < 0.0) != (*c < 0.0))) {
      *cs = 1.0;
      *sn = 0.0;
    } else {
      int32_T b_0;
      int32_T c_0;
      proc_control_B.p_g = 0.5 * proc_control_B.temp_oq;
      proc_control_B.bcmis_i = std::abs(*b);
      proc_control_B.z_i = std::abs(*c);
      proc_control_B.bcmax_e = std::fmax(proc_control_B.bcmis_i,
        proc_control_B.z_i);
      if (!(*b < 0.0)) {
        b_0 = 1;
      } else {
        b_0 = -1;
      }

      if (!(*c < 0.0)) {
        c_0 = 1;
      } else {
        c_0 = -1;
      }

      proc_control_B.bcmis_i = std::fmin(proc_control_B.bcmis_i,
        proc_control_B.z_i) * static_cast<real_T>(b_0) * static_cast<real_T>(c_0);
      proc_control_B.scale_eb = std::fmax(std::abs(proc_control_B.p_g),
        proc_control_B.bcmax_e);
      proc_control_B.z_i = proc_control_B.p_g / proc_control_B.scale_eb *
        proc_control_B.p_g + proc_control_B.bcmax_e / proc_control_B.scale_eb *
        proc_control_B.bcmis_i;
      if (proc_control_B.z_i >= 8.8817841970012523E-16) {
        if (!(proc_control_B.p_g < 0.0)) {
          proc_control_B.z_i = std::sqrt(proc_control_B.scale_eb) * std::sqrt
            (proc_control_B.z_i);
        } else {
          proc_control_B.z_i = -(std::sqrt(proc_control_B.scale_eb) * std::sqrt
            (proc_control_B.z_i));
        }

        proc_control_B.z_i += proc_control_B.p_g;
        *a = *d + proc_control_B.z_i;
        *d -= proc_control_B.bcmax_e / proc_control_B.z_i *
          proc_control_B.bcmis_i;
        proc_control_B.bcmax_e = proc_control_rt_hypotd_snf(*c,
          proc_control_B.z_i);
        *cs = proc_control_B.z_i / proc_control_B.bcmax_e;
        *sn = *c / proc_control_B.bcmax_e;
        *b -= *c;
        *c = 0.0;
      } else {
        proc_control_B.bcmis_i = *b + *c;
        proc_control_B.bcmax_e = proc_control_rt_hypotd_snf
          (proc_control_B.bcmis_i, proc_control_B.temp_oq);
        *cs = std::sqrt((std::abs(proc_control_B.bcmis_i) /
                         proc_control_B.bcmax_e + 1.0) * 0.5);
        if (!(proc_control_B.bcmis_i < 0.0)) {
          b_0 = 1;
        } else {
          b_0 = -1;
        }

        *sn = -(proc_control_B.p_g / (proc_control_B.bcmax_e * *cs)) *
          static_cast<real_T>(b_0);
        proc_control_B.temp_oq = *a * *cs + *b * *sn;
        proc_control_B.p_g = -*a * *sn + *b * *cs;
        proc_control_B.bcmax_e = *c * *cs + *d * *sn;
        proc_control_B.bcmis_i = -*c * *sn + *d * *cs;
        *b = proc_control_B.p_g * *cs + proc_control_B.bcmis_i * *sn;
        *c = -proc_control_B.temp_oq * *sn + proc_control_B.bcmax_e * *cs;
        proc_control_B.temp_oq = ((proc_control_B.temp_oq * *cs +
          proc_control_B.bcmax_e * *sn) + (-proc_control_B.p_g * *sn +
          proc_control_B.bcmis_i * *cs)) * 0.5;
        *a = proc_control_B.temp_oq;
        *d = proc_control_B.temp_oq;
        if (*c != 0.0) {
          if (*b != 0.0) {
            if ((*b < 0.0) == (*c < 0.0)) {
              proc_control_B.z_i = std::sqrt(std::abs(*b));
              proc_control_B.bcmis_i = std::sqrt(std::abs(*c));
              proc_control_B.p_g = proc_control_B.z_i * proc_control_B.bcmis_i;
              if (*c < 0.0) {
                proc_control_B.p_g = -proc_control_B.p_g;
              }

              proc_control_B.bcmax_e = 1.0 / std::sqrt(std::abs(*b + *c));
              *a = proc_control_B.temp_oq + proc_control_B.p_g;
              *d = proc_control_B.temp_oq - proc_control_B.p_g;
              *b -= *c;
              *c = 0.0;
              proc_control_B.p_g = proc_control_B.z_i * proc_control_B.bcmax_e;
              proc_control_B.bcmax_e *= proc_control_B.bcmis_i;
              proc_control_B.temp_oq = *cs * proc_control_B.p_g - *sn *
                proc_control_B.bcmax_e;
              *sn = *cs * proc_control_B.bcmax_e + *sn * proc_control_B.p_g;
              *cs = proc_control_B.temp_oq;
            }
          } else {
            *b = -*c;
            *c = 0.0;
            proc_control_B.temp_oq = *cs;
            *cs = -*sn;
            *sn = proc_control_B.temp_oq;
          }
        }
      }
    }
  }

  *rt1r = *a;
  *rt2r = *d;
  if (*c == 0.0) {
    *rt1i = 0.0;
    *rt2i = 0.0;
  } else {
    *rt1i = std::sqrt(std::abs(*b)) * std::sqrt(std::abs(*c));
    *rt2i = -*rt1i;
  }
}

// Function for MATLAB Function: '<S140>/MATLAB Function2'
void proc_control::proc_control_xrot_3pYuG0oG(int32_T n, real_T x[169], int32_T
  ix0, int32_T iy0, real_T c, real_T s)
{
  if (n >= 1) {
    int32_T ix;
    int32_T iy;
    ix = ix0 - 1;
    iy = iy0 - 1;
    for (int32_T k{0}; k < n; k++) {
      proc_control_B.temp_b1 = c * x[ix] + s * x[iy];
      x[iy] = c * x[iy] - s * x[ix];
      x[ix] = proc_control_B.temp_b1;
      iy++;
      ix++;
    }
  }
}

// Function for MATLAB Function: '<S140>/MATLAB Function2'
void proc_control::proc_control_xrot_yqSjxpUW(real_T x[169], int32_T ix0,
  int32_T iy0, real_T c, real_T s)
{
  for (int32_T k{0}; k < 13; k++) {
    int32_T temp_tmp;
    int32_T temp_tmp_0;
    temp_tmp = (iy0 + k) - 1;
    proc_control_B.temp_tmp_p = x[temp_tmp];
    temp_tmp_0 = (ix0 + k) - 1;
    proc_control_B.temp_tmp_k = x[temp_tmp_0];
    x[temp_tmp] = proc_control_B.temp_tmp_p * c - proc_control_B.temp_tmp_k * s;
    x[temp_tmp_0] = proc_control_B.temp_tmp_k * c + proc_control_B.temp_tmp_p *
      s;
  }
}

// Function for MATLAB Function: '<S140>/MATLAB Function2'
int32_T proc_control::proc_contro_eml_dlahqr_HmsDpVfQ(real_T h[169], real_T z
  [169])
{
  int32_T info;
  boolean_T exitg1;
  info = 0;
  proc_control_B.v_f[0] = 0.0;
  proc_control_B.v_f[1] = 0.0;
  proc_control_B.v_f[2] = 0.0;
  proc_control_B.L = 0;
  for (proc_control_B.i_mc = 0; proc_control_B.i_mc < 10; proc_control_B.i_mc++)
  {
    h[proc_control_B.L + 2] = 0.0;
    h[proc_control_B.L + 3] = 0.0;
    proc_control_B.L += 14;
  }

  h[142] = 0.0;
  proc_control_B.i_mc = 12;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.i_mc + 1 >= 1)) {
    int32_T ix;
    int32_T m;
    boolean_T exitg2;
    boolean_T goto150;
    proc_control_B.L = 1;
    goto150 = false;
    ix = 0;
    exitg2 = false;
    while ((!exitg2) && (ix < 391)) {
      int32_T hoffset;
      int32_T nr;
      boolean_T exitg3;
      proc_control_B.k_a = proc_control_B.i_mc;
      exitg3 = false;
      while ((!exitg3) && (proc_control_B.k_a + 1 > proc_control_B.L)) {
        hoffset = (proc_control_B.k_a - 1) * 13 + proc_control_B.k_a;
        if (std::abs(h[hoffset]) <= 1.3027094340058323E-291) {
          exitg3 = true;
        } else {
          nr = 13 * proc_control_B.k_a + proc_control_B.k_a;
          proc_control_B.tst_d = std::abs(h[hoffset - 1]) + std::abs(h[nr]);
          if (proc_control_B.tst_d == 0.0) {
            if (proc_control_B.k_a - 1 >= 1) {
              proc_control_B.tst_d = std::abs(h[((proc_control_B.k_a - 2) * 13 +
                proc_control_B.k_a) - 1]);
            }

            if (proc_control_B.k_a + 2 <= 13) {
              proc_control_B.tst_d += std::abs(h[nr + 1]);
            }
          }

          if (std::abs(h[hoffset]) <= 2.2204460492503131E-16 *
              proc_control_B.tst_d) {
            proc_control_B.htmp1 = std::abs(h[hoffset]);
            proc_control_B.tst_d = std::abs(h[nr - 1]);
            if (proc_control_B.htmp1 > proc_control_B.tst_d) {
              proc_control_B.ab_k = proc_control_B.htmp1;
              proc_control_B.ba_c = proc_control_B.tst_d;
            } else {
              proc_control_B.ab_k = proc_control_B.tst_d;
              proc_control_B.ba_c = proc_control_B.htmp1;
            }

            proc_control_B.tst_d = h[nr];
            proc_control_B.htmp1 = std::abs(proc_control_B.tst_d);
            proc_control_B.tst_d = std::abs(h[hoffset - 1] -
              proc_control_B.tst_d);
            if (proc_control_B.htmp1 > proc_control_B.tst_d) {
              proc_control_B.aa_j = proc_control_B.htmp1;
              proc_control_B.htmp1 = proc_control_B.tst_d;
            } else {
              proc_control_B.aa_j = proc_control_B.tst_d;
            }

            proc_control_B.tst_d = proc_control_B.aa_j + proc_control_B.ab_k;
            if (proc_control_B.ab_k / proc_control_B.tst_d * proc_control_B.ba_c
                <= std::fmax(1.3027094340058323E-291, proc_control_B.aa_j /
                             proc_control_B.tst_d * proc_control_B.htmp1 *
                             2.2204460492503131E-16)) {
              exitg3 = true;
            } else {
              proc_control_B.k_a--;
            }
          } else {
            proc_control_B.k_a--;
          }
        }
      }

      proc_control_B.L = proc_control_B.k_a + 1;
      if (proc_control_B.k_a + 1 > 1) {
        h[proc_control_B.k_a + 13 * (proc_control_B.k_a - 1)] = 0.0;
      }

      if (proc_control_B.k_a + 1 >= proc_control_B.i_mc) {
        goto150 = true;
        exitg2 = true;
      } else {
        switch (ix) {
         case 10:
          nr = 13 * proc_control_B.k_a + proc_control_B.k_a;
          proc_control_B.tst_d = std::abs(h[((proc_control_B.k_a + 1) * 13 +
            proc_control_B.k_a) + 2]) + std::abs(h[nr + 1]);
          proc_control_B.ba_c = 0.75 * proc_control_B.tst_d + h[nr];
          proc_control_B.h12_m = -0.4375 * proc_control_B.tst_d;
          proc_control_B.aa_j = proc_control_B.tst_d;
          proc_control_B.htmp1 = proc_control_B.ba_c;
          break;

         case 20:
          proc_control_B.tst_d = std::abs(h[((proc_control_B.i_mc - 2) * 13 +
            proc_control_B.i_mc) - 1]) + std::abs(h[(proc_control_B.i_mc - 1) *
            13 + proc_control_B.i_mc]);
          proc_control_B.ba_c = h[13 * proc_control_B.i_mc + proc_control_B.i_mc]
            + 0.75 * proc_control_B.tst_d;
          proc_control_B.h12_m = -0.4375 * proc_control_B.tst_d;
          proc_control_B.aa_j = proc_control_B.tst_d;
          proc_control_B.htmp1 = proc_control_B.ba_c;
          break;

         default:
          m = (proc_control_B.i_mc - 1) * 13 + proc_control_B.i_mc;
          proc_control_B.ba_c = h[m - 1];
          proc_control_B.aa_j = h[m];
          proc_control_B.h12_m = h[(13 * proc_control_B.i_mc +
            proc_control_B.i_mc) - 1];
          proc_control_B.htmp1 = h[13 * proc_control_B.i_mc +
            proc_control_B.i_mc];
          break;
        }

        proc_control_B.tst_d = ((std::abs(proc_control_B.ba_c) + std::abs
          (proc_control_B.h12_m)) + std::abs(proc_control_B.aa_j)) + std::abs
          (proc_control_B.htmp1);
        if (proc_control_B.tst_d == 0.0) {
          proc_control_B.ba_c = 0.0;
          proc_control_B.htmp1 = 0.0;
          proc_control_B.ab_k = 0.0;
          proc_control_B.aa_j = 0.0;
        } else {
          proc_control_B.ba_c /= proc_control_B.tst_d;
          proc_control_B.htmp1 /= proc_control_B.tst_d;
          proc_control_B.ab_k = (proc_control_B.ba_c + proc_control_B.htmp1) /
            2.0;
          proc_control_B.ba_c = (proc_control_B.ba_c - proc_control_B.ab_k) *
            (proc_control_B.htmp1 - proc_control_B.ab_k) - proc_control_B.h12_m /
            proc_control_B.tst_d * (proc_control_B.aa_j / proc_control_B.tst_d);
          proc_control_B.aa_j = std::sqrt(std::abs(proc_control_B.ba_c));
          if (proc_control_B.ba_c >= 0.0) {
            proc_control_B.ba_c = proc_control_B.ab_k * proc_control_B.tst_d;
            proc_control_B.ab_k = proc_control_B.ba_c;
            proc_control_B.htmp1 = proc_control_B.aa_j * proc_control_B.tst_d;
            proc_control_B.aa_j = -proc_control_B.htmp1;
          } else {
            proc_control_B.ba_c = proc_control_B.ab_k + proc_control_B.aa_j;
            proc_control_B.ab_k -= proc_control_B.aa_j;
            if (std::abs(proc_control_B.ba_c - proc_control_B.htmp1) <= std::abs
                (proc_control_B.ab_k - proc_control_B.htmp1)) {
              proc_control_B.ba_c *= proc_control_B.tst_d;
              proc_control_B.ab_k = proc_control_B.ba_c;
            } else {
              proc_control_B.ab_k *= proc_control_B.tst_d;
              proc_control_B.ba_c = proc_control_B.ab_k;
            }

            proc_control_B.htmp1 = 0.0;
            proc_control_B.aa_j = 0.0;
          }
        }

        m = proc_control_B.i_mc - 1;
        exitg3 = false;
        while ((!exitg3) && (m >= proc_control_B.k_a + 1)) {
          nr = (m - 1) * 13 + m;
          proc_control_B.h12_m = h[nr];
          proc_control_B.tst_tmp_tmp_b = h[nr - 1];
          proc_control_B.tst_tmp_i = proc_control_B.tst_tmp_tmp_b -
            proc_control_B.ab_k;
          proc_control_B.tst_d = (std::abs(proc_control_B.tst_tmp_i) + std::abs
            (proc_control_B.aa_j)) + std::abs(proc_control_B.h12_m);
          proc_control_B.h12_m /= proc_control_B.tst_d;
          nr = 13 * m + m;
          proc_control_B.v_f[0] = (proc_control_B.tst_tmp_i /
            proc_control_B.tst_d * (proc_control_B.tst_tmp_tmp_b -
            proc_control_B.ba_c) + h[nr - 1] * proc_control_B.h12_m) -
            proc_control_B.aa_j / proc_control_B.tst_d * proc_control_B.htmp1;
          proc_control_B.tst_tmp_i = h[nr];
          proc_control_B.v_f[1] = (((proc_control_B.tst_tmp_tmp_b +
            proc_control_B.tst_tmp_i) - proc_control_B.ba_c) -
            proc_control_B.ab_k) * proc_control_B.h12_m;
          proc_control_B.v_f[2] = h[nr + 1] * proc_control_B.h12_m;
          proc_control_B.tst_d = (std::abs(proc_control_B.v_f[0]) + std::abs
            (proc_control_B.v_f[1])) + std::abs(proc_control_B.v_f[2]);
          proc_control_B.v_f[0] /= proc_control_B.tst_d;
          proc_control_B.v_f[1] /= proc_control_B.tst_d;
          proc_control_B.v_f[2] /= proc_control_B.tst_d;
          if (proc_control_B.k_a + 1 == m) {
            exitg3 = true;
          } else {
            hoffset = (m - 2) * 13 + m;
            if (std::abs(h[hoffset - 1]) * (std::abs(proc_control_B.v_f[1]) +
                 std::abs(proc_control_B.v_f[2])) <= ((std::abs(h[hoffset - 2])
                  + std::abs(proc_control_B.tst_tmp_tmp_b)) + std::abs
                 (proc_control_B.tst_tmp_i)) * (2.2204460492503131E-16 * std::
                 abs(proc_control_B.v_f[0]))) {
              exitg3 = true;
            } else {
              m--;
            }
          }
        }

        for (int32_T b_k{m}; b_k <= proc_control_B.i_mc; b_k++) {
          int32_T b_j;
          nr = (proc_control_B.i_mc - b_k) + 2;
          if (nr >= 3) {
            nr = 3;
          }

          if (b_k > m) {
            hoffset = (b_k - 2) * 13 + b_k;
            for (b_j = 0; b_j < nr; b_j++) {
              proc_control_B.v_f[b_j] = h[(b_j + hoffset) - 1];
            }
          }

          proc_control_B.htmp1 = proc_control_B.v_f[0];
          proc_control_B.tst_d = proc_control_xzlarfg_RGPUCK3Y(nr,
            &proc_control_B.htmp1, proc_control_B.v_f);
          proc_control_B.v_f[0] = proc_control_B.htmp1;
          if (b_k > m) {
            h[(b_k + 13 * (b_k - 2)) - 1] = proc_control_B.htmp1;
            h[b_k + 13 * (b_k - 2)] = 0.0;
            if (b_k < proc_control_B.i_mc) {
              h[(b_k + 13 * (b_k - 2)) + 1] = 0.0;
            }
          } else if (m > proc_control_B.k_a + 1) {
            hoffset = ((b_k - 2) * 13 + b_k) - 1;
            h[hoffset] *= 1.0 - proc_control_B.tst_d;
          }

          proc_control_B.htmp1 = proc_control_B.v_f[1];
          proc_control_B.ab_k = proc_control_B.tst_d * proc_control_B.v_f[1];
          switch (nr) {
           case 3:
            {
              int32_T h12_tmp;
              int32_T h12_tmp_0;
              proc_control_B.ba_c = proc_control_B.v_f[2];
              proc_control_B.aa_j = proc_control_B.tst_d * proc_control_B.v_f[2];
              for (nr = b_k - 1; nr + 1 < 14; nr++) {
                b_j = 13 * nr + b_k;
                proc_control_B.h12_m = (h[b_j - 1] + h[b_j] *
                  proc_control_B.htmp1) + h[b_j + 1] * proc_control_B.ba_c;
                h[b_j - 1] -= proc_control_B.h12_m * proc_control_B.tst_d;
                h[b_j] -= proc_control_B.h12_m * proc_control_B.ab_k;
                h[b_j + 1] -= proc_control_B.h12_m * proc_control_B.aa_j;
              }

              if (b_k + 3 <= proc_control_B.i_mc + 1) {
                nr = b_k + 3;
              } else {
                nr = proc_control_B.i_mc + 1;
              }

              for (hoffset = 0; hoffset < nr; hoffset++) {
                b_j = (b_k - 1) * 13 + hoffset;
                h12_tmp = 13 * b_k + hoffset;
                h12_tmp_0 = (b_k + 1) * 13 + hoffset;
                proc_control_B.h12_m = (h[h12_tmp] * proc_control_B.htmp1 +
                  h[b_j]) + h[h12_tmp_0] * proc_control_B.ba_c;
                h[b_j] -= proc_control_B.h12_m * proc_control_B.tst_d;
                h[h12_tmp] -= proc_control_B.h12_m * proc_control_B.ab_k;
                h[h12_tmp_0] -= proc_control_B.h12_m * proc_control_B.aa_j;
              }

              for (nr = 0; nr < 13; nr++) {
                b_j = (b_k - 1) * 13 + nr;
                h12_tmp = 13 * b_k + nr;
                h12_tmp_0 = (b_k + 1) * 13 + nr;
                proc_control_B.h12_m = (z[h12_tmp] * proc_control_B.htmp1 +
                  z[b_j]) + z[h12_tmp_0] * proc_control_B.ba_c;
                z[b_j] -= proc_control_B.h12_m * proc_control_B.tst_d;
                z[h12_tmp] -= proc_control_B.h12_m * proc_control_B.ab_k;
                z[h12_tmp_0] -= proc_control_B.h12_m * proc_control_B.aa_j;
              }
            }
            break;

           case 2:
            {
              for (nr = b_k - 1; nr + 1 < 14; nr++) {
                b_j = 13 * nr + b_k;
                proc_control_B.ba_c = h[b_j - 1];
                proc_control_B.h12_m = h[b_j] * proc_control_B.htmp1 +
                  proc_control_B.ba_c;
                h[b_j - 1] = proc_control_B.ba_c - proc_control_B.h12_m *
                  proc_control_B.tst_d;
                h[b_j] -= proc_control_B.h12_m * proc_control_B.ab_k;
              }

              for (nr = 0; nr <= proc_control_B.i_mc; nr++) {
                int32_T h12_tmp;
                b_j = (b_k - 1) * 13 + nr;
                h12_tmp = 13 * b_k + nr;
                proc_control_B.h12_m = h[h12_tmp] * proc_control_B.htmp1 + h[b_j];
                h[b_j] -= proc_control_B.h12_m * proc_control_B.tst_d;
                h[h12_tmp] -= proc_control_B.h12_m * proc_control_B.ab_k;
              }

              for (nr = 0; nr < 13; nr++) {
                b_j = (b_k - 1) * 13;
                proc_control_B.h12_m = z[13 * b_k + nr] * proc_control_B.htmp1 +
                  z[b_j + nr];
                hoffset = b_j + nr;
                z[hoffset] -= proc_control_B.h12_m * proc_control_B.tst_d;
                hoffset = 13 * b_k + nr;
                z[hoffset] -= proc_control_B.h12_m * proc_control_B.ab_k;
              }
            }
            break;
          }
        }

        ix++;
      }
    }

    if (!goto150) {
      info = proc_control_B.i_mc + 1;
      exitg1 = true;
    } else {
      if ((proc_control_B.i_mc + 1 != proc_control_B.L) && (proc_control_B.L ==
           proc_control_B.i_mc)) {
        ix = 13 * proc_control_B.i_mc + proc_control_B.i_mc;
        proc_control_B.ab_k = h[ix - 1];
        m = (proc_control_B.i_mc - 1) * 13 + proc_control_B.i_mc;
        proc_control_B.ba_c = h[m];
        proc_control_B.aa_j = h[ix];
        proc_control_xdlanv2_W63kZdPv(&h[(proc_control_B.i_mc + 13 *
          (proc_control_B.i_mc - 1)) - 1], &proc_control_B.ab_k,
          &proc_control_B.ba_c, &proc_control_B.aa_j, &proc_control_B.h12_m,
          &proc_control_B.tst_tmp_tmp_b, &proc_control_B.tst_tmp_i,
          &proc_control_B.a__4, &proc_control_B.tst_d, &proc_control_B.htmp1);
        h[ix - 1] = proc_control_B.ab_k;
        h[m] = proc_control_B.ba_c;
        h[ix] = proc_control_B.aa_j;
        if (proc_control_B.i_mc + 1 < 13) {
          proc_control_B.k_a = (proc_control_B.i_mc + 1) * 13 +
            proc_control_B.i_mc;
          ix = proc_control_B.k_a - 1;
          for (m = 0; m <= 11 - proc_control_B.i_mc; m++) {
            proc_control_B.ab_k = proc_control_B.tst_d * h[ix] +
              proc_control_B.htmp1 * h[proc_control_B.k_a];
            h[proc_control_B.k_a] = proc_control_B.tst_d * h[proc_control_B.k_a]
              - proc_control_B.htmp1 * h[ix];
            h[ix] = proc_control_B.ab_k;
            proc_control_B.k_a += 13;
            ix += 13;
          }
        }

        proc_control_xrot_3pYuG0oG(proc_control_B.i_mc - 1, h,
          (proc_control_B.i_mc - 1) * 13 + 1, proc_control_B.i_mc * 13 + 1,
          proc_control_B.tst_d, proc_control_B.htmp1);
        proc_control_xrot_yqSjxpUW(z, (proc_control_B.i_mc - 1) * 13 + 1,
          proc_control_B.i_mc * 13 + 1, proc_control_B.tst_d,
          proc_control_B.htmp1);
      }

      proc_control_B.i_mc = proc_control_B.L - 2;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S140>/MATLAB Function2'
void proc_control::proc_control_schur_o(const real_T A[169], real_T V[169],
  real_T T[169])
{
  if (proc_control_anyNonFinite(A)) {
    for (proc_control_B.i_ba = 0; proc_control_B.i_ba < 169; proc_control_B.i_ba
         ++) {
      V[proc_control_B.i_ba] = (rtNaN);
    }

    proc_control_B.i_ba = 2;
    for (proc_control_B.im1n = 0; proc_control_B.im1n < 12; proc_control_B.im1n
         ++) {
      proc_control_B.in_f = proc_control_B.i_ba;
      while (proc_control_B.in_f < 14) {
        V[(proc_control_B.in_f + 13 * proc_control_B.im1n) - 1] = 0.0;
        proc_control_B.in_f++;
      }

      proc_control_B.i_ba++;
    }

    for (proc_control_B.i_ba = 0; proc_control_B.i_ba < 169; proc_control_B.i_ba
         ++) {
      T[proc_control_B.i_ba] = (rtNaN);
    }
  } else {
    std::memcpy(&T[0], &A[0], 169U * sizeof(real_T));
    std::memset(&proc_control_B.work_l[0], 0, 13U * sizeof(real_T));
    for (proc_control_B.i_ba = 0; proc_control_B.i_ba < 12; proc_control_B.i_ba
         ++) {
      proc_control_B.im1n = proc_control_B.i_ba * 13 + 2;
      proc_control_B.in_f = (proc_control_B.i_ba + 1) * 13;
      proc_control_B.alpha1_tmp_m = (13 * proc_control_B.i_ba +
        proc_control_B.i_ba) + 1;
      proc_control_B.alpha1_tmp = T[proc_control_B.alpha1_tmp_m];
      if (proc_control_B.i_ba + 3 <= 13) {
        proc_control_B.lastc_e = proc_control_B.i_ba + 3;
      } else {
        proc_control_B.lastc_e = 13;
      }

      proc_control_B.lastc_e += proc_control_B.i_ba * 13;
      proc_control_B.tau_nc[proc_control_B.i_ba] = 0.0;
      proc_control_B.beta1_c = xnrm2_vEpa8zuo(11 - proc_control_B.i_ba, T,
        proc_control_B.lastc_e);
      if (proc_control_B.beta1_c != 0.0) {
        proc_control_B.beta1_c = proc_control_rt_hypotd_snf
          (proc_control_B.alpha1_tmp, proc_control_B.beta1_c);
        if (proc_control_B.alpha1_tmp >= 0.0) {
          proc_control_B.beta1_c = -proc_control_B.beta1_c;
        }

        if (std::abs(proc_control_B.beta1_c) < 1.0020841800044864E-292) {
          proc_control_B.knt_k = 0;
          proc_control_B.jy = (proc_control_B.lastc_e - proc_control_B.i_ba) +
            10;
          do {
            proc_control_B.knt_k++;
            proc_control_B.rowleft = proc_control_B.lastc_e;
            while (proc_control_B.rowleft <= proc_control_B.jy) {
              T[proc_control_B.rowleft - 1] *= 9.9792015476736E+291;
              proc_control_B.rowleft++;
            }

            proc_control_B.beta1_c *= 9.9792015476736E+291;
            proc_control_B.alpha1_tmp *= 9.9792015476736E+291;
          } while ((std::abs(proc_control_B.beta1_c) < 1.0020841800044864E-292) &&
                   (proc_control_B.knt_k < 20));

          proc_control_B.beta1_c = proc_control_rt_hypotd_snf
            (proc_control_B.alpha1_tmp, xnrm2_vEpa8zuo(11 - proc_control_B.i_ba,
              T, proc_control_B.lastc_e));
          if (proc_control_B.alpha1_tmp >= 0.0) {
            proc_control_B.beta1_c = -proc_control_B.beta1_c;
          }

          proc_control_B.tau_nc[proc_control_B.i_ba] = (proc_control_B.beta1_c -
            proc_control_B.alpha1_tmp) / proc_control_B.beta1_c;
          proc_control_B.alpha1_tmp = 1.0 / (proc_control_B.alpha1_tmp -
            proc_control_B.beta1_c);
          proc_control_B.jy = (proc_control_B.lastc_e - proc_control_B.i_ba) +
            10;
          while (proc_control_B.lastc_e <= proc_control_B.jy) {
            T[proc_control_B.lastc_e - 1] *= proc_control_B.alpha1_tmp;
            proc_control_B.lastc_e++;
          }

          proc_control_B.lastc_e = 0;
          while (proc_control_B.lastc_e <= proc_control_B.knt_k - 1) {
            proc_control_B.beta1_c *= 1.0020841800044864E-292;
            proc_control_B.lastc_e++;
          }

          proc_control_B.alpha1_tmp = proc_control_B.beta1_c;
        } else {
          proc_control_B.alpha1_tmp = T[(13 * proc_control_B.i_ba +
            proc_control_B.i_ba) + 1];
          proc_control_B.tau_nc[proc_control_B.i_ba] = (proc_control_B.beta1_c -
            proc_control_B.alpha1_tmp) / proc_control_B.beta1_c;
          proc_control_B.alpha1_tmp = 1.0 / (proc_control_B.alpha1_tmp -
            proc_control_B.beta1_c);
          proc_control_B.knt_k = (proc_control_B.lastc_e - proc_control_B.i_ba)
            + 10;
          while (proc_control_B.lastc_e <= proc_control_B.knt_k) {
            T[proc_control_B.lastc_e - 1] *= proc_control_B.alpha1_tmp;
            proc_control_B.lastc_e++;
          }

          proc_control_B.alpha1_tmp = proc_control_B.beta1_c;
        }
      }

      T[proc_control_B.alpha1_tmp_m] = 1.0;
      proc_control_B.jy = (proc_control_B.i_ba + proc_control_B.im1n) - 1;
      if (proc_control_B.tau_nc[proc_control_B.i_ba] != 0.0) {
        boolean_T exitg2;
        proc_control_B.knt_k = 11 - proc_control_B.i_ba;
        proc_control_B.lastc_e = (proc_control_B.jy - proc_control_B.i_ba) + 11;
        while ((proc_control_B.knt_k + 1 > 0) && (T[proc_control_B.lastc_e] ==
                0.0)) {
          proc_control_B.knt_k--;
          proc_control_B.lastc_e--;
        }

        proc_control_B.lastc_e = 13;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.lastc_e > 0)) {
          int32_T exitg1;
          proc_control_B.rowleft = proc_control_B.in_f + proc_control_B.lastc_e;
          proc_control_B.alpha1_tmp_m = proc_control_B.rowleft;
          do {
            exitg1 = 0;
            if (proc_control_B.alpha1_tmp_m <= proc_control_B.knt_k * 13 +
                proc_control_B.rowleft) {
              if (T[proc_control_B.alpha1_tmp_m - 1] != 0.0) {
                exitg1 = 1;
              } else {
                proc_control_B.alpha1_tmp_m += 13;
              }
            } else {
              proc_control_B.lastc_e--;
              exitg1 = 2;
            }
          } while (exitg1 == 0);

          if (exitg1 == 1) {
            exitg2 = true;
          }
        }
      } else {
        proc_control_B.knt_k = -1;
        proc_control_B.lastc_e = 0;
      }

      if (proc_control_B.knt_k + 1 > 0) {
        if (proc_control_B.lastc_e != 0) {
          proc_control_B.rowleft = 0;
          while (proc_control_B.rowleft <= proc_control_B.lastc_e - 1) {
            proc_control_B.work_l[proc_control_B.rowleft] = 0.0;
            proc_control_B.rowleft++;
          }

          proc_control_B.rowleft = proc_control_B.jy;
          proc_control_B.alpha1_tmp_m = (13 * proc_control_B.knt_k +
            proc_control_B.in_f) + 1;
          proc_control_B.b_ix_bi = proc_control_B.in_f + 1;
          while (proc_control_B.b_ix_bi <= proc_control_B.alpha1_tmp_m) {
            proc_control_B.iy_n = 0;
            proc_control_B.g_o = (proc_control_B.b_ix_bi +
                                  proc_control_B.lastc_e) - 1;
            proc_control_B.b_ia_a = proc_control_B.b_ix_bi;
            while (proc_control_B.b_ia_a <= proc_control_B.g_o) {
              proc_control_B.work_l[proc_control_B.iy_n] +=
                T[proc_control_B.b_ia_a - 1] * T[proc_control_B.rowleft];
              proc_control_B.iy_n++;
              proc_control_B.b_ia_a++;
            }

            proc_control_B.rowleft++;
            proc_control_B.b_ix_bi += 13;
          }
        }

        if (!(-proc_control_B.tau_nc[proc_control_B.i_ba] == 0.0)) {
          proc_control_B.rowleft = proc_control_B.in_f;
          proc_control_B.alpha1_tmp_m = 0;
          while (proc_control_B.alpha1_tmp_m <= proc_control_B.knt_k) {
            if (T[proc_control_B.jy] != 0.0) {
              proc_control_B.beta1_c = T[proc_control_B.jy] *
                -proc_control_B.tau_nc[proc_control_B.i_ba];
              proc_control_B.b_ix_bi = 0;
              proc_control_B.iy_n = proc_control_B.rowleft;
              proc_control_B.g_o = proc_control_B.lastc_e +
                proc_control_B.rowleft;
              while (proc_control_B.iy_n + 1 <= proc_control_B.g_o) {
                T[proc_control_B.iy_n] +=
                  proc_control_B.work_l[proc_control_B.b_ix_bi] *
                  proc_control_B.beta1_c;
                proc_control_B.b_ix_bi++;
                proc_control_B.iy_n++;
              }
            }

            proc_control_B.jy++;
            proc_control_B.rowleft += 13;
            proc_control_B.alpha1_tmp_m++;
          }
        }
      }

      xzlarf_2N2eIztg(12 - proc_control_B.i_ba, 12 - proc_control_B.i_ba,
                      proc_control_B.i_ba + proc_control_B.im1n,
                      proc_control_B.tau_nc[proc_control_B.i_ba], T,
                      (proc_control_B.i_ba + proc_control_B.in_f) + 2,
                      proc_control_B.work_l);
      T[(proc_control_B.i_ba + 13 * proc_control_B.i_ba) + 1] =
        proc_control_B.alpha1_tmp;
    }

    std::memcpy(&V[0], &T[0], 169U * sizeof(real_T));
    for (proc_control_B.i_ba = 11; proc_control_B.i_ba >= 0; proc_control_B.i_ba
         --) {
      proc_control_B.im1n = (proc_control_B.i_ba + 1) * 13;
      proc_control_B.in_f = 0;
      while (proc_control_B.in_f <= proc_control_B.i_ba) {
        V[proc_control_B.im1n + proc_control_B.in_f] = 0.0;
        proc_control_B.in_f++;
      }

      proc_control_B.in_f = proc_control_B.i_ba;
      while (proc_control_B.in_f + 3 < 14) {
        proc_control_B.lastc_e = proc_control_B.im1n + proc_control_B.in_f;
        V[proc_control_B.lastc_e + 2] = V[proc_control_B.lastc_e - 11];
        proc_control_B.in_f++;
      }
    }

    std::memset(&V[0], 0, 13U * sizeof(real_T));
    std::memset(&proc_control_B.work_l[0], 0, 13U * sizeof(real_T));
    V[0] = 1.0;
    for (proc_control_B.im1n = 11; proc_control_B.im1n >= 0; proc_control_B.im1n
         --) {
      proc_control_B.in_f = (proc_control_B.im1n * 13 + proc_control_B.im1n) +
        14;
      if (proc_control_B.im1n + 1 < 12) {
        V[proc_control_B.in_f] = 1.0;
        xzlarf_2N2eIztg(12 - proc_control_B.im1n, 11 - proc_control_B.im1n,
                        proc_control_B.in_f + 1,
                        proc_control_B.tau_nc[proc_control_B.im1n], V,
                        proc_control_B.in_f + 14, proc_control_B.work_l);
        proc_control_B.knt_k = (proc_control_B.in_f - proc_control_B.im1n) + 12;
        proc_control_B.lastc_e = proc_control_B.in_f + 1;
        while (proc_control_B.lastc_e + 1 <= proc_control_B.knt_k) {
          V[proc_control_B.lastc_e] *=
            -proc_control_B.tau_nc[proc_control_B.im1n];
          proc_control_B.lastc_e++;
        }
      }

      V[proc_control_B.in_f] = 1.0 - proc_control_B.tau_nc[proc_control_B.im1n];
      proc_control_B.knt_k = 0;
      while (proc_control_B.knt_k <= proc_control_B.im1n - 1) {
        V[(proc_control_B.in_f - proc_control_B.knt_k) - 1] = 0.0;
        proc_control_B.knt_k++;
      }
    }

    proc_contro_eml_dlahqr_HmsDpVfQ(T, V);
    proc_control_B.i_ba = 4;
    for (proc_control_B.im1n = 0; proc_control_B.im1n < 10; proc_control_B.im1n
         ++) {
      proc_control_B.in_f = proc_control_B.i_ba;
      while (proc_control_B.in_f < 14) {
        T[(proc_control_B.in_f + 13 * proc_control_B.im1n) - 1] = 0.0;
        proc_control_B.in_f++;
      }

      proc_control_B.i_ba++;
    }
  }
}

// Function for MATLAB Function: '<S140>/MATLAB Function2'
void proc_control::proc_control_expm_m(real_T A[169], real_T F[169])
{
  if (proc_control_anyNonFinite(A)) {
    for (proc_control_B.e_i = 0; proc_control_B.e_i < 169; proc_control_B.e_i++)
    {
      F[proc_control_B.e_i] = (rtNaN);
    }
  } else {
    int32_T exitg1;
    boolean_T exitg2;
    boolean_T recomputeDiags;
    recomputeDiags = true;
    proc_control_B.e_j_p = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_B.e_j_p < 13)) {
      proc_control_B.e_i = 0;
      do {
        exitg1 = 0;
        if (proc_control_B.e_i < 13) {
          if ((proc_control_B.e_i != proc_control_B.e_j_p) && (!(A[13 *
                proc_control_B.e_j_p + proc_control_B.e_i] == 0.0))) {
            recomputeDiags = false;
            exitg1 = 1;
          } else {
            proc_control_B.e_i++;
          }
        } else {
          proc_control_B.e_j_p++;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }

    if (recomputeDiags) {
      std::memset(&F[0], 0, 169U * sizeof(real_T));
      proc_control_B.e_i = 0;
      for (proc_control_B.b_s_g = 0; proc_control_B.b_s_g < 13;
           proc_control_B.b_s_g++) {
        F[proc_control_B.e_i] = std::exp(A[proc_control_B.e_i]);
        proc_control_B.e_i += 14;
      }
    } else {
      recomputeDiags = true;
      proc_control_B.e_j_p = 0;
      exitg2 = false;
      while ((!exitg2) && (proc_control_B.e_j_p < 13)) {
        proc_control_B.e_i = 0;
        do {
          exitg1 = 0;
          if (proc_control_B.e_i <= proc_control_B.e_j_p) {
            if (!(A[13 * proc_control_B.e_j_p + proc_control_B.e_i] == A[13 *
                  proc_control_B.e_i + proc_control_B.e_j_p])) {
              recomputeDiags = false;
              exitg1 = 1;
            } else {
              proc_control_B.e_i++;
            }
          } else {
            proc_control_B.e_j_p++;
            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }

      if (recomputeDiags) {
        proc_control_schur_o(A, proc_control_B.A2, proc_control_B.A4_f);
        proc_control_B.e_i = 0;
        proc_control_B.b_s_f = 0;
        for (proc_control_B.b_s_g = 0; proc_control_B.b_s_g < 13;
             proc_control_B.b_s_g++) {
          proc_control_B.exptj_j = std::exp
            (proc_control_B.A4_f[proc_control_B.e_i]);
          for (proc_control_B.e_j_p = 0; proc_control_B.e_j_p < 13;
               proc_control_B.e_j_p++) {
            proc_control_B.A2_tmp = proc_control_B.e_j_p + proc_control_B.b_s_f;
            proc_control_B.A4[proc_control_B.A2_tmp] =
              proc_control_B.A2[proc_control_B.A2_tmp] * proc_control_B.exptj_j;
            F[proc_control_B.A2_tmp] = 0.0;
          }

          proc_control_B.e_i += 14;
          proc_control_B.b_s_f += 13;
        }

        proc_control_B.e_i = 0;
        for (proc_control_B.b_s_f = 0; proc_control_B.b_s_f < 13;
             proc_control_B.b_s_f++) {
          proc_control_B.e_j_p = 0;
          for (proc_control_B.A2_tmp = 0; proc_control_B.A2_tmp < 13;
               proc_control_B.A2_tmp++) {
            for (proc_control_B.i6 = 0; proc_control_B.i6 < 13;
                 proc_control_B.i6++) {
              proc_control_B.A4_tmp = proc_control_B.i6 + proc_control_B.e_j_p;
              F[proc_control_B.A4_tmp] += proc_control_B.A4[proc_control_B.i6 +
                proc_control_B.e_i] * proc_control_B.A2[proc_control_B.A2_tmp +
                proc_control_B.e_i];
            }

            proc_control_B.e_j_p += 13;
          }

          proc_control_B.e_i += 13;
        }

        proc_control_B.e_i = 0;
        for (proc_control_B.b_s_f = 0; proc_control_B.b_s_f < 13;
             proc_control_B.b_s_f++) {
          proc_control_B.e_j_p = 0;
          for (proc_control_B.A2_tmp = 0; proc_control_B.A2_tmp < 13;
               proc_control_B.A2_tmp++) {
            proc_control_B.A4_tmp = proc_control_B.A2_tmp + proc_control_B.e_i;
            proc_control_B.A2[proc_control_B.A4_tmp] = (F[proc_control_B.e_j_p +
              proc_control_B.b_s_f] + F[proc_control_B.A4_tmp]) / 2.0;
            proc_control_B.e_j_p += 13;
          }

          proc_control_B.e_i += 13;
        }

        std::memcpy(&F[0], &proc_control_B.A2[0], 169U * sizeof(real_T));
      } else {
        boolean_T guard1{ false };

        boolean_T guard2{ false };

        boolean_T guard3{ false };

        boolean_T guard4{ false };

        recomputeDiags = true;
        proc_control_B.e_j_p = 3;
        while (recomputeDiags && (proc_control_B.e_j_p <= 13)) {
          proc_control_B.e_i = proc_control_B.e_j_p;
          while (recomputeDiags && (proc_control_B.e_i <= 13)) {
            recomputeDiags = (A[((proc_control_B.e_j_p - 3) * 13 +
                                 proc_control_B.e_i) - 1] == 0.0);
            proc_control_B.e_i++;
          }

          proc_control_B.e_j_p++;
        }

        if (recomputeDiags) {
          proc_control_B.e_j_p = 1;
          exitg2 = false;
          while ((!exitg2) && (proc_control_B.e_j_p - 1 < 12)) {
            proc_control_B.e_i = (proc_control_B.e_j_p - 1) * 13 +
              proc_control_B.e_j_p;
            proc_control_B.exptj_j = A[proc_control_B.e_i];
            if (proc_control_B.exptj_j != 0.0) {
              if ((proc_control_B.e_j_p != 12) && (A[(13 * proc_control_B.e_j_p
                    + proc_control_B.e_j_p) + 1] != 0.0)) {
                recomputeDiags = false;
                exitg2 = true;
              } else {
                proc_control_B.b_s_f = 13 * proc_control_B.e_j_p +
                  proc_control_B.e_j_p;
                if (A[proc_control_B.e_i - 1] != A[proc_control_B.b_s_f]) {
                  recomputeDiags = false;
                  exitg2 = true;
                } else {
                  proc_control_B.d6_e = A[proc_control_B.b_s_f - 1];
                  if (!std::isnan(proc_control_B.exptj_j)) {
                    if (proc_control_B.exptj_j < 0.0) {
                      proc_control_B.exptj_j = -1.0;
                    } else {
                      proc_control_B.exptj_j = (proc_control_B.exptj_j > 0.0);
                    }
                  }

                  if (!std::isnan(proc_control_B.d6_e)) {
                    if (proc_control_B.d6_e < 0.0) {
                      proc_control_B.d6_e = -1.0;
                    } else {
                      proc_control_B.d6_e = (proc_control_B.d6_e > 0.0);
                    }
                  }

                  if (proc_control_B.exptj_j * proc_control_B.d6_e != -1.0) {
                    recomputeDiags = false;
                    exitg2 = true;
                  } else {
                    proc_control_B.e_j_p++;
                  }
                }
              }
            } else {
              proc_control_B.e_j_p++;
            }
          }
        }

        proc_control_B.exptj_j = 0.0;
        for (proc_control_B.e_i = 0; proc_control_B.e_i < 13; proc_control_B.e_i
             ++) {
          std::memset(&proc_control_B.A2[proc_control_B.e_i * 13], 0, 13U *
                      sizeof(real_T));
          for (proc_control_B.e_j_p = 0; proc_control_B.e_j_p < 13;
               proc_control_B.e_j_p++) {
            for (proc_control_B.b_s_f = 0; proc_control_B.b_s_f < 13;
                 proc_control_B.b_s_f++) {
              proc_control_B.A2_tmp = 13 * proc_control_B.e_i +
                proc_control_B.b_s_f;
              proc_control_B.A2[proc_control_B.A2_tmp] += A[13 *
                proc_control_B.e_j_p + proc_control_B.b_s_f] * A[13 *
                proc_control_B.e_i + proc_control_B.e_j_p];
            }
          }

          std::memset(&proc_control_B.A4[proc_control_B.e_i * 13], 0, 13U *
                      sizeof(real_T));
        }

        proc_control_B.e_i = 0;
        for (proc_control_B.e_j_p = 0; proc_control_B.e_j_p < 13;
             proc_control_B.e_j_p++) {
          proc_control_B.A2_tmp = 0;
          for (proc_control_B.i6 = 0; proc_control_B.i6 < 13; proc_control_B.i6
               ++) {
            for (proc_control_B.b_s_f = 0; proc_control_B.b_s_f < 13;
                 proc_control_B.b_s_f++) {
              proc_control_B.A4_tmp = proc_control_B.b_s_f + proc_control_B.e_i;
              proc_control_B.A4[proc_control_B.A4_tmp] +=
                proc_control_B.A2[proc_control_B.b_s_f + proc_control_B.A2_tmp] *
                proc_control_B.A2[proc_control_B.i6 + proc_control_B.e_i];
            }

            proc_control_B.A6[proc_control_B.i6 + proc_control_B.e_i] = 0.0;
            proc_control_B.A2_tmp += 13;
          }

          proc_control_B.e_i += 13;
        }

        proc_control_B.e_i = 0;
        for (proc_control_B.b_s_f = 0; proc_control_B.b_s_f < 13;
             proc_control_B.b_s_f++) {
          proc_control_B.e_j_p = 0;
          for (proc_control_B.A2_tmp = 0; proc_control_B.A2_tmp < 13;
               proc_control_B.A2_tmp++) {
            for (proc_control_B.i6 = 0; proc_control_B.i6 < 13;
                 proc_control_B.i6++) {
              proc_control_B.A4_tmp = proc_control_B.i6 + proc_control_B.e_i;
              proc_control_B.A6[proc_control_B.A4_tmp] +=
                proc_control_B.A4[proc_control_B.i6 + proc_control_B.e_j_p] *
                proc_control_B.A2[proc_control_B.A2_tmp + proc_control_B.e_i];
            }

            proc_control_B.e_j_p += 13;
          }

          proc_control_B.e_i += 13;
        }

        proc_control_B.d6_e = rt_powd_snf(norm_GdpreYkZ(proc_control_B.A6),
          0.16666666666666666);
        proc_control_B.eta1_j = std::fmax(rt_powd_snf(norm_GdpreYkZ
          (proc_control_B.A4), 0.25), proc_control_B.d6_e);
        guard1 = false;
        guard2 = false;
        guard3 = false;
        guard4 = false;
        if (proc_control_B.eta1_j <= 0.01495585217958292) {
          for (proc_control_B.e_j_p = 0; proc_control_B.e_j_p < 169;
               proc_control_B.e_j_p++) {
            proc_control_B.dv7[proc_control_B.e_j_p] = 0.19285012468241128 * std::
              abs(A[proc_control_B.e_j_p]);
          }

          proc_control_mpower_k(proc_control_B.dv7, 7.0, proc_control_B.dv8);
          proc_control_B.b_varargin_1 = log2_blLsPIAE(norm_GdpreYkZ
            (proc_control_B.dv8) / norm_GdpreYkZ(A) * 2.0 /
            2.2204460492503131E-16) / 6.0;
          if (std::fmax(std::ceil(proc_control_B.b_varargin_1), 0.0) == 0.0) {
            proc_control_B.b_s_g = 3;
          } else {
            guard4 = true;
          }
        } else {
          guard4 = true;
        }

        if (guard4) {
          if (proc_control_B.eta1_j <= 0.253939833006323) {
            for (proc_control_B.e_j_p = 0; proc_control_B.e_j_p < 169;
                 proc_control_B.e_j_p++) {
              proc_control_B.dv7[proc_control_B.e_j_p] = 0.12321872304378752 *
                std::abs(A[proc_control_B.e_j_p]);
            }

            proc_control_mpower_k(proc_control_B.dv7, 11.0, proc_control_B.dv8);
            proc_control_B.eta1_j = log2_blLsPIAE(norm_GdpreYkZ
              (proc_control_B.dv8) / norm_GdpreYkZ(A) * 2.0 /
              2.2204460492503131E-16) / 10.0;
            if (std::fmax(std::ceil(proc_control_B.eta1_j), 0.0) == 0.0) {
              proc_control_B.b_s_g = 5;
            } else {
              guard3 = true;
            }
          } else {
            guard3 = true;
          }
        }

        if (guard3) {
          proc_control_mpower_k(proc_control_B.A4, 2.0, proc_control_B.dv7);
          proc_control_B.eta1_j = rt_powd_snf(norm_GdpreYkZ(proc_control_B.dv7),
            0.125);
          proc_control_B.d6_e = std::fmax(proc_control_B.d6_e,
            proc_control_B.eta1_j);
          if (proc_control_B.d6_e <= 0.95041789961629319) {
            for (proc_control_B.e_j_p = 0; proc_control_B.e_j_p < 169;
                 proc_control_B.e_j_p++) {
              proc_control_B.dv7[proc_control_B.e_j_p] = 0.090475336558796943 *
                std::abs(A[proc_control_B.e_j_p]);
            }

            proc_control_mpower_k(proc_control_B.dv7, 15.0, proc_control_B.dv8);
            proc_control_B.b_varargin_1 = log2_blLsPIAE(norm_GdpreYkZ
              (proc_control_B.dv8) / norm_GdpreYkZ(A) * 2.0 /
              2.2204460492503131E-16) / 14.0;
            if (std::fmax(std::ceil(proc_control_B.b_varargin_1), 0.0) == 0.0) {
              proc_control_B.b_s_g = 7;
            } else {
              guard2 = true;
            }
          } else {
            guard2 = true;
          }
        }

        if (guard2) {
          if (proc_control_B.d6_e <= 2.097847961257068) {
            for (proc_control_B.e_j_p = 0; proc_control_B.e_j_p < 169;
                 proc_control_B.e_j_p++) {
              proc_control_B.dv7[proc_control_B.e_j_p] = 0.071467735648795785 *
                std::abs(A[proc_control_B.e_j_p]);
            }

            proc_control_mpower_k(proc_control_B.dv7, 19.0, proc_control_B.dv8);
            proc_control_B.b_varargin_1 = log2_blLsPIAE(norm_GdpreYkZ
              (proc_control_B.dv8) / norm_GdpreYkZ(A) * 2.0 /
              2.2204460492503131E-16) / 18.0;
            if (std::fmax(std::ceil(proc_control_B.b_varargin_1), 0.0) == 0.0) {
              proc_control_B.b_s_g = 9;
            } else {
              guard1 = true;
            }
          } else {
            guard1 = true;
          }
        }

        if (guard1) {
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 13;
               proc_control_B.e_i++) {
            std::memset(&proc_control_B.A4_f[proc_control_B.e_i * 13], 0, 13U *
                        sizeof(real_T));
            for (proc_control_B.e_j_p = 0; proc_control_B.e_j_p < 13;
                 proc_control_B.e_j_p++) {
              for (proc_control_B.b_s_f = 0; proc_control_B.b_s_f < 13;
                   proc_control_B.b_s_f++) {
                proc_control_B.A4_tmp = 13 * proc_control_B.e_i +
                  proc_control_B.b_s_f;
                proc_control_B.A4_f[proc_control_B.A4_tmp] += proc_control_B.A4
                  [13 * proc_control_B.e_j_p + proc_control_B.b_s_f] *
                  proc_control_B.A6[13 * proc_control_B.e_i +
                  proc_control_B.e_j_p];
              }
            }
          }

          proc_control_B.exptj_j = log2_blLsPIAE(std::fmin(proc_control_B.d6_e,
            std::fmax(proc_control_B.eta1_j, rt_powd_snf(norm_GdpreYkZ
            (proc_control_B.A4_f), 0.1))) / 5.3719203511481517);
          proc_control_B.exptj_j = std::fmax(std::ceil(proc_control_B.exptj_j),
            0.0);
          proc_control_B.d6_e = rt_powd_snf(2.0, proc_control_B.exptj_j);
          for (proc_control_B.e_j_p = 0; proc_control_B.e_j_p < 169;
               proc_control_B.e_j_p++) {
            proc_control_B.eta1_j = A[proc_control_B.e_j_p] /
              proc_control_B.d6_e;
            proc_control_B.dv7[proc_control_B.e_j_p] = 0.05031554467093536 * std::
              abs(proc_control_B.eta1_j);
            proc_control_B.A4_f[proc_control_B.e_j_p] = proc_control_B.eta1_j;
          }

          proc_control_mpower_k(proc_control_B.dv7, 27.0, proc_control_B.dv8);
          proc_control_B.d6_e = log2_blLsPIAE(norm_GdpreYkZ(proc_control_B.dv8) /
            norm_GdpreYkZ(proc_control_B.A4_f) * 2.0 / 2.2204460492503131E-16) /
            26.0;
          proc_control_B.exptj_j += std::fmax(std::ceil(proc_control_B.d6_e),
            0.0);
          if (std::isinf(proc_control_B.exptj_j)) {
            proc_control_B.d6_e = norm_GdpreYkZ(A) / 5.3719203511481517;
            if ((!std::isinf(proc_control_B.d6_e)) && (!std::isnan
                 (proc_control_B.d6_e))) {
              proc_control_B.d6_e = frexp(proc_control_B.d6_e,
                &proc_control_B.b_s_g);
            } else {
              proc_control_B.b_s_g = 0;
            }

            proc_control_B.exptj_j = proc_control_B.b_s_g;
            if (proc_control_B.d6_e == 0.5) {
              proc_control_B.exptj_j = static_cast<real_T>(proc_control_B.b_s_g)
                - 1.0;
            }
          }

          proc_control_B.b_s_g = 13;
        }

        if (proc_control_B.exptj_j != 0.0) {
          proc_control_B.d6_e = rt_powd_snf(2.0, proc_control_B.exptj_j);
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            A[proc_control_B.e_i] /= proc_control_B.d6_e;
          }

          proc_control_B.d6_e = rt_powd_snf(2.0, 2.0 * proc_control_B.exptj_j);
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            proc_control_B.A2[proc_control_B.e_i] /= proc_control_B.d6_e;
          }

          proc_control_B.d6_e = rt_powd_snf(2.0, 4.0 * proc_control_B.exptj_j);
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            proc_control_B.A4[proc_control_B.e_i] /= proc_control_B.d6_e;
          }

          proc_control_B.d6_e = rt_powd_snf(2.0, 6.0 * proc_control_B.exptj_j);
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
               proc_control_B.e_i++) {
            proc_control_B.A6[proc_control_B.e_i] /= proc_control_B.d6_e;
          }
        }

        if (recomputeDiags) {
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 12;
               proc_control_B.e_i++) {
            proc_control_B.blockFormat_k[proc_control_B.e_i] = 0;
          }

          proc_control_B.e_j_p = 1;
          while (proc_control_B.e_j_p < 12) {
            proc_control_B.d6_e = A[(proc_control_B.e_j_p - 1) * 13 +
              proc_control_B.e_j_p];
            if (proc_control_B.d6_e != 0.0) {
              proc_control_B.blockFormat_k[proc_control_B.e_j_p - 1] = 2;
              proc_control_B.blockFormat_k[proc_control_B.e_j_p] = 0;
              proc_control_B.e_j_p += 2;
            } else if ((proc_control_B.d6_e == 0.0) && (A[(13 *
                         proc_control_B.e_j_p + proc_control_B.e_j_p) + 1] ==
                        0.0)) {
              proc_control_B.blockFormat_k[proc_control_B.e_j_p - 1] = 1;
              proc_control_B.e_j_p++;
            } else {
              proc_control_B.blockFormat_k[proc_control_B.e_j_p - 1] = 0;
              proc_control_B.e_j_p++;
            }
          }

          if (A[155] != 0.0) {
            proc_control_B.blockFormat_k[11] = 2;
          } else {
            switch (proc_control_B.blockFormat_k[10]) {
             case 0:
              proc_control_B.blockFormat_k[11] = 1;
              break;

             case 1:
              proc_control_B.blockFormat_k[11] = 1;
              break;
            }
          }
        }

        proc_padeApproximation_NWSCAcaS(A, proc_control_B.A2, proc_control_B.A4,
          proc_control_B.A6, proc_control_B.b_s_g, F);
        if (recomputeDiags) {
          pro_recomputeBlockDiag_qmxFvKVu(A, F, proc_control_B.blockFormat_k);
        }

        proc_control_B.b_s_g = 0;
        while (proc_control_B.b_s_g <= static_cast<int32_T>
               (proc_control_B.exptj_j) - 1) {
          for (proc_control_B.e_i = 0; proc_control_B.e_i < 13;
               proc_control_B.e_i++) {
            proc_control_B.b_s_f = 0;
            for (proc_control_B.e_j_p = 0; proc_control_B.e_j_p < 13;
                 proc_control_B.e_j_p++) {
              proc_control_B.A4_tmp = proc_control_B.b_s_f + proc_control_B.e_i;
              proc_control_B.A2[proc_control_B.A4_tmp] = 0.0;
              proc_control_B.A2_tmp = 0;
              for (proc_control_B.i6 = 0; proc_control_B.i6 < 13;
                   proc_control_B.i6++) {
                proc_control_B.A2[proc_control_B.A4_tmp] +=
                  F[proc_control_B.A2_tmp + proc_control_B.e_i] *
                  F[proc_control_B.i6 + proc_control_B.b_s_f];
                proc_control_B.A2_tmp += 13;
              }

              proc_control_B.b_s_f += 13;
            }
          }

          std::memcpy(&F[0], &proc_control_B.A2[0], 169U * sizeof(real_T));
          if (recomputeDiags) {
            for (proc_control_B.e_i = 0; proc_control_B.e_i < 169;
                 proc_control_B.e_i++) {
              A[proc_control_B.e_i] *= 2.0;
            }

            pro_recomputeBlockDiag_qmxFvKVu(A, F, proc_control_B.blockFormat_k);
          }

          proc_control_B.b_s_g++;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S140>/MATLAB Function2'
void proc_control::proc_control_mldivide_Z0xqFpTr(const real_T A[36], const
  real_T B[36], real_T Y[36])
{
  int32_T c_ix;
  int32_T ix;
  int32_T iy;
  int32_T jj;
  int8_T ipiv[6];
  std::memcpy(&proc_control_B.b_A_gl[0], &A[0], 36U * sizeof(real_T));
  std::memcpy(&Y[0], &B[0], 36U * sizeof(real_T));
  for (int32_T b_j{0}; b_j < 6; b_j++) {
    ipiv[b_j] = static_cast<int8_T>(b_j + 1);
  }

  for (int32_T b_j{0}; b_j < 5; b_j++) {
    jj = b_j * 7;
    iy = 0;
    ix = jj;
    proc_control_B.smax_c = std::abs(proc_control_B.b_A_gl[jj]);
    for (int32_T c_k{2}; c_k <= 6 - b_j; c_k++) {
      real_T s;
      ix++;
      s = std::abs(proc_control_B.b_A_gl[ix]);
      if (s > proc_control_B.smax_c) {
        iy = c_k - 1;
        proc_control_B.smax_c = s;
      }
    }

    if (proc_control_B.b_A_gl[jj + iy] != 0.0) {
      if (iy != 0) {
        iy += b_j;
        ipiv[b_j] = static_cast<int8_T>(iy + 1);
        for (int32_T c_k{0}; c_k < 6; c_k++) {
          proc_control_B.smax_c = proc_control_B.b_A_gl[c_k * 6 + b_j];
          ix = c_k * 6 + iy;
          proc_control_B.b_A_gl[b_j + c_k * 6] = proc_control_B.b_A_gl[ix];
          proc_control_B.b_A_gl[ix] = proc_control_B.smax_c;
        }
      }

      iy = (jj - b_j) + 6;
      for (ix = jj + 1; ix < iy; ix++) {
        proc_control_B.b_A_gl[ix] /= proc_control_B.b_A_gl[jj];
      }
    }

    iy = jj + 6;
    ix = jj;
    for (int32_T c_k{0}; c_k <= 4 - b_j; c_k++) {
      proc_control_B.smax_c = proc_control_B.b_A_gl[iy];
      if (proc_control_B.b_A_gl[iy] != 0.0) {
        int32_T c;
        int32_T ijA;
        c_ix = jj + 1;
        ijA = ix + 7;
        c = (ix - b_j) + 12;
        while (ijA + 1 <= c) {
          proc_control_B.b_A_gl[ijA] += proc_control_B.b_A_gl[c_ix] *
            -proc_control_B.smax_c;
          c_ix++;
          ijA++;
        }
      }

      iy += 6;
      ix += 6;
    }
  }

  for (int32_T b_j{0}; b_j < 5; b_j++) {
    int8_T ipiv_0;
    ipiv_0 = ipiv[b_j];
    if (b_j + 1 != ipiv_0) {
      for (iy = 0; iy < 6; iy++) {
        jj = 6 * iy + b_j;
        proc_control_B.smax_c = Y[jj];
        ix = (6 * iy + ipiv_0) - 1;
        Y[jj] = Y[ix];
        Y[ix] = proc_control_B.smax_c;
      }
    }
  }

  for (int32_T b_j{0}; b_j < 6; b_j++) {
    jj = 6 * b_j;
    for (iy = 0; iy < 6; iy++) {
      ix = 6 * iy;
      if (Y[iy + jj] != 0.0) {
        for (int32_T c_k{iy + 2}; c_k < 7; c_k++) {
          c_ix = (c_k + jj) - 1;
          Y[c_ix] -= proc_control_B.b_A_gl[(c_k + ix) - 1] * Y[iy + jj];
        }
      }
    }
  }

  for (int32_T b_j{0}; b_j < 6; b_j++) {
    jj = 6 * b_j;
    for (iy = 5; iy >= 0; iy--) {
      ix = 6 * iy;
      if (Y[iy + jj] != 0.0) {
        c_ix = iy + jj;
        Y[c_ix] /= proc_control_B.b_A_gl[iy + ix];
        for (int32_T c_k{0}; c_k < iy; c_k++) {
          c_ix = c_k + jj;
          Y[c_ix] -= Y[iy + jj] * proc_control_B.b_A_gl[c_k + ix];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S140>/MATLAB Function2'
void proc_control::proc_co_AUV8QuatSimFcn_AbfqyrNU(const real_T in1[13], const
  real_T in2[8], real_T out1[13])
{
  real_T out1_tmp;
  real_T out1_tmp_0;
  real_T out1_tmp_1;
  real_T out1_tmp_2;
  real_T out1_tmp_3;
  proc_control_B.t8_b = in1[4] * in1[4];
  proc_control_B.t9_cx = in1[5] * in1[5];
  proc_control_B.t11_f = in1[4] * in1[5] * 2.0;
  proc_control_B.t12_tmp_i = in1[4] * in1[6];
  proc_control_B.t12_o = proc_control_B.t12_tmp_i * 2.0;
  proc_control_B.t13_tmp_g = in1[5] * in1[6];
  proc_control_B.t13_dd = proc_control_B.t13_tmp_g * 2.0;
  proc_control_B.t14_tmp_c = in1[3] * in1[4];
  proc_control_B.t14_l = proc_control_B.t14_tmp_c * 2.0;
  proc_control_B.t15_tmp_e = in1[3] * in1[5];
  proc_control_B.t15_l = proc_control_B.t15_tmp_e * 2.0;
  proc_control_B.t16_d = in1[3] * in1[6] * 2.0;
  proc_control_B.t25_k = in1[11] / 500.0;
  proc_control_B.t29_f = in1[10] / 1000.0;
  proc_control_B.t31_p = in1[12] * 0.018;
  proc_control_B.t50 = in1[7] * 32.4648;
  proc_control_B.t53_k = in1[8] * 43.6156;
  proc_control_B.t54_k = in1[9] * 46.7695;
  proc_control_B.t17_i = proc_control_B.t8_b * 2.0;
  proc_control_B.t18_e = proc_control_B.t9_cx * 2.0;
  proc_control_B.t19_ft = in1[6] * in1[6] * 2.0;
  proc_control_B.t57_k = proc_control_B.t25_k + proc_control_B.t31_p;
  proc_control_B.t25_k += proc_control_B.t29_f;
  proc_control_B.t29_f += proc_control_B.t31_p;
  proc_control_B.t31_p = in1[11] * 0.558 + proc_control_B.t50;
  proc_control_B.t64_n = in1[10] * 0.062 + proc_control_B.t54_k;
  proc_control_B.t65_i = in1[12] * 0.031 + proc_control_B.t53_k;
  proc_control_B.t68_i = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 0.592;
  proc_control_B.t50 = in1[12] * 0.062 + -proc_control_B.t50;
  proc_control_B.t53_k = in1[10] * 0.558 + -proc_control_B.t53_k;
  proc_control_B.t54_k = in1[11] * 0.031 + -proc_control_B.t54_k;
  proc_control_B.t69_o = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_B.t70_d = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  out1[0] = (((proc_control_B.t18_e + proc_control_B.t19_ft) - 1.0) * -in1[7] +
             (proc_control_B.t12_o + proc_control_B.t15_l) * in1[9]) +
    (proc_control_B.t11_f - proc_control_B.t16_d) * in1[8];
  out1[1] = ((proc_control_B.t11_f + proc_control_B.t16_d) * in1[7] -
             ((proc_control_B.t17_i + proc_control_B.t19_ft) - 1.0) * in1[8]) +
    (proc_control_B.t13_dd - proc_control_B.t14_l) * in1[9];
  out1[2] = ((proc_control_B.t13_dd + proc_control_B.t14_l) * in1[8] -
             ((proc_control_B.t17_i + proc_control_B.t18_e) - 1.0) * in1[9]) +
    (proc_control_B.t12_o - proc_control_B.t15_l) * in1[7];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_B.t11_f = in1[10] * proc_control_B.t57_k;
  proc_control_B.t12_o = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) * in1
    [10];
  proc_control_B.t13_dd = in1[10] * proc_control_B.t64_n;
  proc_control_B.t14_l = in1[10] * proc_control_B.t53_k;
  proc_control_B.t15_l = in1[10] * proc_control_B.t69_o;
  proc_control_B.t16_d = in1[10] * proc_control_B.t70_d;
  proc_control_B.t17_i = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) * in1
    [11];
  proc_control_B.t18_e = in1[11] * proc_control_B.t29_f;
  proc_control_B.t19_ft = in1[11] * proc_control_B.t31_p;
  proc_control_B.out1_tmp_a = in1[11] * proc_control_B.t54_k;
  proc_control_B.out1_tmp_h = in1[11] * proc_control_B.t68_i;
  proc_control_B.t69_o *= in1[11];
  proc_control_B.out1_tmp_ef = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  proc_control_B.out1_tmp_dw = in1[12] * proc_control_B.t25_k;
  out1_tmp = in1[12] * proc_control_B.t50;
  out1_tmp_0 = in1[12] * proc_control_B.t65_i;
  proc_control_B.t68_i *= in1[12];
  proc_control_B.t70_d *= in1[12];
  out1_tmp_1 = (std::abs(in1[7]) * 1.17 + 15.0) * in1[7];
  proc_control_B.t57_k *= in1[7];
  proc_control_B.t65_i *= in1[7];
  proc_control_B.t54_k *= in1[7];
  out1_tmp_2 = (std::abs(in1[8]) * 0.82 + 20.0) * in1[8];
  proc_control_B.t29_f *= in1[8];
  proc_control_B.t50 *= in1[8];
  proc_control_B.t64_n *= in1[8];
  out1_tmp_3 = (std::abs(in1[9]) * 0.756 + 23.333333333333332) * in1[9];
  proc_control_B.t25_k *= in1[9];
  proc_control_B.t31_p *= in1[9];
  proc_control_B.t53_k *= in1[9];
  out1[7] = (((((((((((((((in2[0] * -0.00033076834054020519 + in2[1] *
    1.8595780444550231E-21) + in2[2] * 0.00033506403327449372) + (in2[3] *
    0.00033363213569639753 - in2[4] * 0.001819638864719295)) + (in2[5] *
    -0.0018124211550371481 + in2[6] * 0.0018538731733468781)) + (in2[7] *
    0.001778186846409557 - proc_control_B.t8_b * 0.0063195296824236141)) +
                      ((in2[0] * 1.4142135623730951 * 0.015171119710606879 +
                        proc_control_B.t9_cx * -0.0063195296824236141) + in2[1] *
                       1.4142135623730951 * 0.014928824155507611)) + ((in2[2] *
    1.4142135623730951 * 0.015171119710606879 + in2[3] * 1.4142135623730951 *
    0.01516372519659284) - proc_control_B.t12_tmp_i * 0.4138016519122657)) +
                    ((proc_control_B.t13_tmp_g * -0.0013017970932508 -
                      proc_control_B.t14_tmp_c * 0.0013017970932508) +
                     proc_control_B.t15_tmp_e * 0.4138016519122657)) +
                   (((proc_control_B.t11_f * -0.96028628902704993 -
                      proc_control_B.t12_o * 0.0001303522588356414) +
                     proc_control_B.t13_dd * 9.4803055144857715E-7) -
                    proc_control_B.t14_l * 6.8231348244175949E-6)) +
                  (((proc_control_B.t15_l * -0.010033314971702871 -
                     proc_control_B.t16_d * 0.0010125044874363649) +
                    proc_control_B.t17_i * 0.010033314971702871) -
                   proc_control_B.t18_e * 2.9388947094905889E-5)) +
                 (((proc_control_B.t19_ft * -6.8231348244175949E-6 +
                    proc_control_B.out1_tmp_a * 0.030976977065388711) +
                   proc_control_B.out1_tmp_h * 0.0010125044874363649) -
                  proc_control_B.t69_o * 0.0001303522588356414)) +
                (((proc_control_B.out1_tmp_ef * -0.0010125044874363649 +
                   proc_control_B.out1_tmp_dw * 0.0002115171795569455) +
                  out1_tmp * 9.4803055144857715E-7) + out1_tmp_0 *
                 0.030976977065388711)) + (((proc_control_B.t68_i *
    0.010033314971702871 + proc_control_B.t70_d * 0.0001303522588356414) -
    out1_tmp_1 * 0.030976977065388711) + proc_control_B.t57_k *
    0.0040409200239048832)) + (((proc_control_B.t65_i * -0.0010125044874363649 +
    proc_control_B.t54_k * 0.010033314971702871) - out1_tmp_2 *
    9.4803055144857715E-7) - proc_control_B.t29_f * 0.311032764122789)) +
             (((proc_control_B.t50 * -0.0010125044874363649 -
                proc_control_B.t64_n * 0.0001303522588356414) + out1_tmp_3 *
               6.8231348244175949E-6) + proc_control_B.t25_k *
              0.031387639110527318)) + ((proc_control_B.t31_p *
    0.010033314971702871 - proc_control_B.t53_k * 0.0001303522588356414) +
    0.003159764841211807);
  out1[8] = (((((((((((((((in2[0] * 0.00013975754063522079 + in2[1] *
    7.9244610288113972E-21) + in2[2] * -0.00014157257363048341) + (in2[3] *
    -0.0001409675626320625 - in2[4] * 0.0034249251816346319)) + (in2[5] *
    0.003387750973601051 + in2[6] * 0.0035708122797193441)) + (in2[7] *
    -0.0035336380716857632 - proc_control_B.t8_b * 0.02693023120923067)) +
                      ((proc_control_B.t9_cx * -0.02693023120923067 - in2[0] *
                        1.4142135623730951 * 0.01090649593858282) + in2[1] *
                       1.4142135623730951 * 0.011000123045544621)) + ((in2[2] *
    1.4142135623730951 * -0.01090649593858282 + in2[3] * 1.4142135623730951 *
    0.01090087173345982) - proc_control_B.t12_tmp_i * 0.00099202109956931486)) +
                    ((proc_control_B.t13_tmp_g * -0.51979016069898065 -
                      proc_control_B.t14_tmp_c * 0.51979016069898065) +
                     proc_control_B.t15_tmp_e * 0.00099202109956931486)) +
                   (((proc_control_B.t11_f * -2.9388947094905889E-5 -
                      proc_control_B.t12_o * 0.021882274381510681) +
                     proc_control_B.t13_dd * 0.02320783323245932) -
                    proc_control_B.t14_l * 2.9076309096921531E-5)) +
                  (((proc_control_B.t15_l * -0.0001026911824132076 +
                     proc_control_B.t16_d * 0.00042780737967584029) +
                    proc_control_B.t17_i * 0.0001026911824132076) -
                   proc_control_B.t18_e * 0.71944283020623911)) +
                 (((proc_control_B.t19_ft * -2.9076309096921531E-5 +
                    proc_control_B.out1_tmp_a * 9.4803055144857715E-7) -
                   proc_control_B.out1_tmp_h * 0.00042780737967584029) -
                  proc_control_B.t69_o * 0.021882274381510681)) +
                (((proc_control_B.out1_tmp_ef * 0.00042780737967584029 +
                   proc_control_B.out1_tmp_dw * 0.00090136558200456737) +
                  out1_tmp * 0.02320783323245932) + out1_tmp_0 *
                 9.4803055144857715E-7)) + (((proc_control_B.t68_i *
    0.0001026911824132076 + proc_control_B.t70_d * 0.021882274381510681) -
    out1_tmp_1 * 9.4803055144857715E-7) + proc_control_B.t57_k *
    0.678350505826831)) + (((proc_control_B.t65_i * 0.00042780737967584029 +
    proc_control_B.t54_k * 0.0001026911824132076) - out1_tmp_2 *
    0.02320783323245932) - proc_control_B.t29_f * 0.0031834266548094372)) +
             (((proc_control_B.t50 * 0.00042780737967584029 -
                proc_control_B.t64_n * 0.021882274381510681) + out1_tmp_3 *
               2.9076309096921531E-5) - proc_control_B.t25_k *
              0.013262028769951049)) + ((proc_control_B.t31_p *
    0.0001026911824132076 - proc_control_B.t53_k * 0.021882274381510681) +
    0.01346511560461533);
  out1[9] = (((((((((((((((in2[0] * -1.725827915740819E-6 + in2[1] *
    -5.8281975682474322E-18) + in2[2] * 1.748241265284163E-6) + (in2[3] *
    1.740770148765829E-6 - in2[4] * 0.02095639900015615)) + (in2[5] *
    0.021100316216985739 - in2[6] * 0.021822949502860629)) + (in2[7] *
    0.02167903228603104 + proc_control_B.t8_b * 0.18635748921352191)) +
                      ((proc_control_B.t9_cx * 0.18635748921352191 - in2[0] *
                        1.4142135623730951 * 4.8869263875916949E-5) + in2[1] *
                       1.4142135623730951 * 6.6264429389244648E-5)) + ((in2[2] *
    1.4142135623730951 * -4.8869263875916949E-5 + in2[3] * 1.4142135623730951 *
    6.7490056888775055E-5) + proc_control_B.t12_tmp_i * 0.0058758415205803329))
                    + ((proc_control_B.t13_tmp_g * 0.033540735888224739 +
                        proc_control_B.t14_tmp_c * 0.033540735888224739) -
                       proc_control_B.t15_tmp_e * 0.0058758415205803329)) +
                   (((proc_control_B.t11_f * 0.0002115171795569455 +
                      proc_control_B.t12_o * 0.002272431716587712) -
                     proc_control_B.t13_dd * 2.9076309096921531E-5) +
                    proc_control_B.t14_l * 0.021384731826702759)) +
                  (((proc_control_B.t15_l * 0.00039756137245743289 -
                     proc_control_B.t16_d * 5.2828771531483014E-6) -
                    proc_control_B.t17_i * 0.00039756137245743289) +
                   proc_control_B.t18_e * 0.00090136558200456737)) +
                 (((proc_control_B.t19_ft * 0.021384731826702759 -
                    proc_control_B.out1_tmp_a * 6.8231348244175949E-6) +
                   proc_control_B.out1_tmp_h * 5.2828771531483014E-6) +
                  proc_control_B.t69_o * 0.002272431716587712)) +
                (((proc_control_B.out1_tmp_ef * -5.2828771531483014E-6 -
                   proc_control_B.out1_tmp_dw * 0.66292668662778553) - out1_tmp *
                  2.9076309096921531E-5) - out1_tmp_0 * 6.8231348244175949E-6))
               + (((proc_control_B.t68_i * -0.00039756137245743289 -
                    proc_control_B.t70_d * 0.002272431716587712) + out1_tmp_1 *
                   6.8231348244175949E-6) - proc_control_B.t57_k *
                  0.070445383214219059)) + (((proc_control_B.t65_i *
    -5.2828771531483014E-6 - proc_control_B.t54_k * 0.00039756137245743289) +
    out1_tmp_2 * 2.9076309096921531E-5) + proc_control_B.t29_f *
    0.01232440254618042)) + (((proc_control_B.t50 * -5.2828771531483014E-6 +
    proc_control_B.t64_n * 0.002272431716587712) - out1_tmp_3 *
    0.021384731826702759) + proc_control_B.t25_k * 0.00016376919174759729)) +
    ((proc_control_B.t31_p * -0.00039756137245743289 + proc_control_B.t53_k *
      0.002272431716587712) - 0.093178744606760927);
  out1[10] = (((((((((((((((((in2[0] * 0.0013021350951669831 + in2[1] *
    6.1932883292401409E-19) + in2[2] * -0.00131904594055876) + (in2[3] *
    -0.0013134089920948341 - in2[4] * 0.26767193546582568)) + (in2[5] *
    0.26476621250220889 + in2[6] * 0.2790736050389333)) + (in2[7] *
    -0.27616788207531651 - proc_control_B.t8_b * 2.1047070084068991)) + ((in2[0]
    * 1.4142135623730951 * 0.043593198825375247 + proc_control_B.t9_cx *
    -2.1047070084068991) - in2[1] * 1.4142135623730951 * 0.043051831063235027))
                        + ((in2[2] * 1.4142135623730951 * 0.043593198825375247 -
    in2[3] * 1.4142135623730951 * 0.043976565543532631) -
    proc_control_B.t12_tmp_i * 0.1138522338822895)) + ((proc_control_B.t13_tmp_g
    * -25.242114556122988 - proc_control_B.t14_tmp_c * 25.242114556122988) +
    proc_control_B.t15_tmp_e * 0.1138522338822895)) + ((proc_control_B.t11_f *
    -0.0040409200239048832 - proc_control_B.t12_o * 1.71018810547529) +
    proc_control_B.t13_dd * 0.021882274381510681)) + ((proc_control_B.t14_l *
    -0.002272431716587712 - proc_control_B.t15_l * 0.0080268590155159435) +
    proc_control_B.t16_d * 0.0039859244840414)) + ((proc_control_B.t17_i *
    0.0080268590155159435 - proc_control_B.t18_e * 0.678350505826831) -
    proc_control_B.t19_ft * 0.002272431716587712)) + ((proc_control_B.out1_tmp_a
    * 0.0001303522588356414 - proc_control_B.out1_tmp_h * 0.0039859244840414) -
    proc_control_B.t69_o * 1.71018810547529)) + (((proc_control_B.out1_tmp_ef *
    0.0039859244840414 + proc_control_B.out1_tmp_dw * 0.070445383214219059) +
    out1_tmp * 0.021882274381510681) + out1_tmp_0 * 0.0001303522588356414)) +
                 ((proc_control_B.t68_i * 0.0080268590155159435 +
                   proc_control_B.t70_d * 1.71018810547529) - out1_tmp_1 *
                  0.0001303522588356414)) + ((proc_control_B.t57_k *
    53.015831269733987 + proc_control_B.t65_i * 0.0039859244840414) +
    proc_control_B.t54_k * 0.0080268590155159435)) + ((out1_tmp_2 *
    -0.021882274381510681 - proc_control_B.t29_f * 0.2488326294809943) +
    proc_control_B.t50 * 0.0039859244840414)) + ((proc_control_B.t64_n *
    -1.71018810547529 + out1_tmp_3 * 0.002272431716587712) -
    proc_control_B.t25_k * 0.1235636590052834)) + ((proc_control_B.t31_p *
    0.0080268590155159435 - proc_control_B.t53_k * 1.71018810547529) +
    1.0523535042034491);
  out1[11] = ((((((((((((((((in2[0] * 5.24748238233168E-7 - in2[1] *
    1.083514276897426E-19) + in2[2] * -5.3156315041823265E-7) + (in2[3] *
    -5.2929151302328333E-7 + in2[4] * 0.10593667623599359)) + (in2[5] *
    0.10537885436940329 - in2[6] * 0.10793139553633729)) + (in2[7] *
    -0.1033841350690595 + proc_control_B.t8_b * 0.36821797582524962)) + ((in2[0]
    * 1.4142135623730951 * 0.013457654526727991 + proc_control_B.t9_cx *
    0.36821797582524962) + in2[1] * 1.4142135623730951 * 0.013869054980635681))
                       + ((in2[2] * 1.4142135623730951 * 0.013457654526727991 +
    in2[3] * 1.4142135623730951 * 0.01386868232130781) +
    proc_control_B.t12_tmp_i * 8.6371397256799973)) + ((proc_control_B.t13_tmp_g
    * 0.1184627304742461 + proc_control_B.t14_tmp_c * 0.1184627304742461) -
    proc_control_B.t15_tmp_e * 8.6371397256799973)) + (((proc_control_B.t11_f *
    0.311032764122789 + proc_control_B.t12_o * 0.0080268590155159435) -
    proc_control_B.t13_dd * 0.0001026911824132076) + proc_control_B.t14_l *
    0.00039756137245743289)) + ((proc_control_B.t15_l * 0.58374455968341665 +
    proc_control_B.t16_d * 1.606290206365557E-6) - proc_control_B.t17_i *
    0.58374455968341665)) + (((proc_control_B.t18_e * 0.0031834266548094372 +
    proc_control_B.t19_ft * 0.00039756137245743289) - proc_control_B.out1_tmp_a *
    0.010033314971702871) - proc_control_B.out1_tmp_h * 1.606290206365557E-6)) +
                  (((proc_control_B.t69_o * 0.0080268590155159435 +
                     proc_control_B.out1_tmp_ef * 1.606290206365557E-6) -
                    proc_control_B.out1_tmp_dw * 0.01232440254618042) - out1_tmp
                   * 0.0001026911824132076)) + ((out1_tmp_0 *
    -0.010033314971702871 - proc_control_B.t68_i * 0.58374455968341665) -
    proc_control_B.t70_d * 0.0080268590155159435)) + ((out1_tmp_1 *
    0.010033314971702871 - proc_control_B.t57_k * 0.2488326294809943) +
    proc_control_B.t65_i * 1.606290206365557E-6)) + ((proc_control_B.t54_k *
    -0.58374455968341665 + out1_tmp_2 * 0.0001026911824132076) +
    proc_control_B.t29_f * 18.096081350185919)) + (((proc_control_B.t50 *
    1.606290206365557E-6 + proc_control_B.t64_n * 0.0080268590155159435) -
    out1_tmp_3 * 0.00039756137245743289) - proc_control_B.t25_k *
    4.9794996397332282E-5)) + ((proc_control_B.t31_p * -0.58374455968341665 +
    proc_control_B.t53_k * 0.0080268590155159435) - 0.18410898791262481);
  out1[12] = ((((((((((((((((in2[0] * -0.1731941163298826 + in2[1] *
    -1.4397960202092559E-21) + in2[2] * 0.175443390567933) + (in2[3] *
    0.17469363248858291 + in2[4] * 0.00062021813460420567)) + (in2[5] *
    -0.0006207996116589 - in2[6] * 0.00064672437426625525)) + (in2[7] *
    0.00064730585132094889 + proc_control_B.t8_b * 0.0048929560732764686)) +
                        ((in2[0] * 1.4142135623730951 * 0.00059255494878017434 +
    proc_control_B.t9_cx * 0.0048929560732764686) - in2[1] * 1.4142135623730951 *
    0.1225770464045467)) + ((in2[2] * 1.4142135623730951 *
    0.00059255494878017434 + in2[3] * 1.4142135623730951 *
    0.00041984673608298361) - proc_control_B.t12_tmp_i * 0.65361132374006825)) +
                      ((proc_control_B.t13_tmp_g * 0.38451002147839958 +
                        proc_control_B.t14_tmp_c * 0.38451002147839958) +
                       proc_control_B.t15_tmp_e * 0.65361132374006825)) +
                     (((proc_control_B.t11_f * -0.031387639110527318 +
                        proc_control_B.t12_o * 0.0039859244840414) -
                       proc_control_B.t13_dd * 0.00042780737967584029) +
                      proc_control_B.t14_l * 5.2828771531483014E-6)) +
                    (((proc_control_B.t15_l * -1.606290206365557E-6 -
                       proc_control_B.t16_d * 0.53015902215788635) +
                      proc_control_B.t17_i * 1.606290206365557E-6) +
                     proc_control_B.t18_e * 0.013262028769951049)) +
                   (((proc_control_B.t19_ft * 5.2828771531483014E-6 +
                      proc_control_B.out1_tmp_a * 0.0010125044874363649) +
                     proc_control_B.out1_tmp_h * 0.53015902215788635) +
                    proc_control_B.t69_o * 0.0039859244840414)) +
                  ((proc_control_B.out1_tmp_ef * -0.53015902215788635 -
                    proc_control_B.out1_tmp_dw * 0.00016376919174759729) -
                   out1_tmp * 0.00042780737967584029)) + (((out1_tmp_0 *
    0.0010125044874363649 + proc_control_B.t68_i * 1.606290206365557E-6) -
    proc_control_B.t70_d * 0.0039859244840414) - out1_tmp_1 *
    0.0010125044874363649)) + ((proc_control_B.t57_k * -0.1235636590052834 -
    proc_control_B.t65_i * 0.53015902215788635) + proc_control_B.t54_k *
    1.606290206365557E-6)) + ((out1_tmp_2 * 0.00042780737967584029 -
    proc_control_B.t29_f * 4.9794996397332282E-5) - proc_control_B.t50 *
    0.53015902215788635)) + (((proc_control_B.t64_n * 0.0039859244840414 -
    out1_tmp_3 * 5.2828771531483014E-6) + proc_control_B.t25_k *
    16.434929686894481) + proc_control_B.t31_p * 1.606290206365557E-6)) +
    (proc_control_B.t53_k * 0.0039859244840414 - 0.0024464780366382352);
}

// Function for MATLAB Function: '<S206>/FixedHorizonOptimizer'
void proc_control::proc_c_mpc_plantupdate_2nNGk7pQ(const real_T a[169], real_T
  b[104], const real_T c[169], real_T b_A[625], real_T b_B[700], real_T b_C[325],
  const real_T b_D[364], const int32_T b_mvindex[8], const int32_T b_myindex[13],
  const real_T b_Uscale[8], const real_T b_Yscale[13], real_T Bu[200], real_T
  Bv[25], real_T Cm[325], real_T Dv[13], real_T Dvm[13], real_T QQ[625], real_T
  RR[169], real_T NN[325])
{
  int32_T b_tmp;
  int32_T i_0;
  int32_T i_1;
  int32_T tmp;
  i_1 = 0;
  for (i_0 = 0; i_0 < 8; i_0++) {
    for (int32_T i{0}; i < 13; i++) {
      b_tmp = i + i_1;
      b[b_tmp] *= b_Uscale[i_0];
    }

    i_1 += 13;
  }

  i_1 = 0;
  i_0 = 0;
  for (int32_T i{0}; i < 13; i++) {
    for (b_tmp = 0; b_tmp < 13; b_tmp++) {
      tmp = b_tmp + i_1;
      b_C[tmp] = c[tmp] / b_Yscale[b_tmp];
      b_A[b_tmp + i_0] = a[tmp];
    }

    i_1 += 13;
    i_0 += 25;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
      b_B[i_0 + 25 * i_1] = b[(b_mvindex[i_1] - 1) * 13 + i_0];
    }

    std::memcpy(&Bu[i_1 * 25], &b_B[i_1 * 25], 25U * sizeof(real_T));
  }

  for (i_1 = 0; i_1 < 25; i_1++) {
    Bv[i_1] = b_B[i_1 + 200];
    for (i_0 = 0; i_0 < 13; i_0++) {
      Cm[i_0 + 13 * i_1] = b_C[(13 * i_1 + b_myindex[i_0]) - 1];
    }
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    Dv[i_1] = b_D[i_1 + 104];
    Dvm[i_1] = b_D[b_myindex[i_1] + 103];
  }

  for (i_1 = 0; i_1 < 27; i_1++) {
    proc_control_B.UnknownIn[i_1] = 0;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    proc_control_B.UnknownIn[i_1] = static_cast<int8_T>(i_1 + 1);
  }

  for (i_1 = 0; i_1 < 19; i_1++) {
    proc_control_B.UnknownIn[i_1 + 8] = static_cast<int8_T>(i_1 + 10);
  }

  for (i_1 = 0; i_1 < 27; i_1++) {
    for (i_0 = 0; i_0 < 25; i_0++) {
      proc_control_B.b_tmp[i_0 + 38 * i_1] = b_B[(proc_control_B.UnknownIn[i_1]
        - 1) * 25 + i_0];
    }
  }

  for (i_1 = 0; i_1 < 27; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_B.b_tmp[(i_0 + 38 * i_1) + 25] = b_D
        [((proc_control_B.UnknownIn[i_1] - 1) * 13 + b_myindex[i_0]) - 1];
    }
  }

  i_1 = 0;
  for (i_0 = 0; i_0 < 38; i_0++) {
    std::memset(&proc_control_B.CovMat[i_1], 0, 38U * sizeof(real_T));
    i_1 += 38;
  }

  i_1 = 0;
  for (b_tmp = 0; b_tmp < 27; b_tmp++) {
    tmp = 0;
    for (i_0 = 0; i_0 < 38; i_0++) {
      for (int32_T i{0}; i < 38; i++) {
        int32_T CovMat_tmp;
        CovMat_tmp = i + tmp;
        proc_control_B.CovMat[CovMat_tmp] += proc_control_B.b_tmp[i + i_1] *
          proc_control_B.b_tmp[i_0 + i_1];
      }

      tmp += 38;
    }

    i_1 += 38;
  }

  i_1 = 0;
  i_0 = 0;
  for (int32_T i{0}; i < 25; i++) {
    std::memcpy(&QQ[i_1], &proc_control_B.CovMat[i_0], 25U * sizeof(real_T));
    i_1 += 25;
    i_0 += 38;
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    std::memcpy(&RR[i_1 * 13], &proc_control_B.CovMat[i_1 * 38 + 975], 13U *
                sizeof(real_T));
    std::memcpy(&NN[i_1 * 25], &proc_control_B.CovMat[i_1 * 38 + 950], 25U *
                sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S206>/FixedHorizonOptimizer'
void proc_control::mpc_constraintcoefLTV_q2od2L1_p(const real_T b_A[6875], const
  real_T Bu[2200], const real_T Bv[275], const real_T b_C[3575], const real_T
  Dv[143], const real_T b_Jm[1280], real_T b_SuJm[2080], real_T b_Sx[3250],
  real_T b_Su1[1040], real_T b_Hv[1430])
{
  int32_T b_C_tmp;
  int32_T i;
  int32_T i_1;
  int32_T i_2;
  int32_T i_3;
  std::memset(&proc_control_B.b_C_d[0], 0, 13U * sizeof(real_T));
  i_3 = 0;
  for (i_1 = 0; i_1 < 25; i_1++) {
    for (i_2 = 0; i_2 < 13; i_2++) {
      proc_control_B.b_C_d[i_2] += b_C[(i_2 + i_3) + 325] * Bv[i_1];
    }

    i_3 += 13;
  }

  for (i_2 = 0; i_2 < 13; i_2++) {
    b_Hv[i_2] = proc_control_B.b_C_d[i_2];
    b_Hv[i_2 + 130] = Dv[i_2 + 13];
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 9; i_3++) {
    std::memset(&b_Hv[i_2 + 260], 0, 13U * sizeof(real_T));
    i_2 += 130;
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 11; i_3++) {
    std::memset(&b_Hv[i_2 + 13], 0, 117U * sizeof(real_T));
    i_2 += 130;
  }

  for (i_2 = 0; i_2 < 25; i_2++) {
    std::memset(&proc_control_B.b_C_a[i_2 * 13], 0, 13U * sizeof(real_T));
    for (i_1 = 0; i_1 < 25; i_1++) {
      for (i_3 = 0; i_3 < 13; i_3++) {
        b_C_tmp = 13 * i_2 + i_3;
        proc_control_B.b_C_a[b_C_tmp] += b_C[(13 * i_1 + i_3) + 325] * b_A[25 *
          i_2 + i_1];
      }
    }

    std::memcpy(&b_Sx[i_2 * 130], &proc_control_B.b_C_a[i_2 * 13], 13U * sizeof
                (real_T));
    std::memset(&b_Sx[i_2 * 130 + 13], 0, 117U * sizeof(real_T));
  }

  for (i_2 = 0; i_2 < 8; i_2++) {
    std::memset(&proc_control_B.b_C_p[i_2 * 13], 0, 13U * sizeof(real_T));
    for (i_1 = 0; i_1 < 25; i_1++) {
      for (i_3 = 0; i_3 < 13; i_3++) {
        b_C_tmp = 13 * i_2 + i_3;
        proc_control_B.b_C_p[b_C_tmp] += b_C[(13 * i_1 + i_3) + 325] * Bu[25 *
          i_2 + i_1];
      }
    }

    std::memcpy(&b_Su1[i_2 * 130], &proc_control_B.b_C_p[i_2 * 13], 13U * sizeof
                (real_T));
    std::memset(&b_Su1[i_2 * 130 + 13], 0, 117U * sizeof(real_T));
    std::memcpy(&proc_control_B.a[i_2 * 130], &b_Su1[i_2 * 130], 13U * sizeof
                (real_T));
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 72; i_3++) {
    std::memset(&proc_control_B.a[i_2 + 1040], 0, 13U * sizeof(real_T));
    i_2 += 130;
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 80; i_3++) {
    std::memset(&proc_control_B.a[i_2 + 13], 0, 117U * sizeof(real_T));
    i_2 += 130;
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 25; i_3++) {
    std::memcpy(&proc_control_B.AA[i_2], &b_A[i_2 + 625], 25U * sizeof(real_T));
    i_2 += 25;
  }

  i_2 = 0;
  for (i_3 = 0; i_3 < 200; i_3++) {
    std::memset(&proc_control_B.AA[i_2 + 625], 0, 25U * sizeof(real_T));
    i_2 += 25;
  }

  for (i = 0; i < 9; i++) {
    int32_T b_Hv_tmp;
    int32_T b_Su1_tmp;
    uint8_T i_0;
    i_0 = static_cast<uint8_T>((i + 1) * 13U + 1U);
    for (i_2 = 0; i_2 < 13; i_2++) {
      proc_control_B.rows_i[i_2] = static_cast<uint8_T>(static_cast<uint32_T>
        (i_2) + i_0);
    }

    for (i_2 = 0; i_2 < 13; i_2++) {
      for (i_3 = 0; i_3 < 8; i_3++) {
        b_Su1_tmp = (130 * i_3 + proc_control_B.rows_i[i_2]) - 1;
        b_Su1[b_Su1_tmp] = 0.0;
        for (i_1 = 0; i_1 < 25; i_1++) {
          b_Su1[b_Su1_tmp] += b_C[(13 * i_1 + i_2) + (i + 2) * 325] * Bu[(25 *
            i_3 + i_1) + (i + 1) * 200];
        }
      }
    }

    i_1 = (i + 1) << 3;
    for (i_2 = 0; i_2 < 8; i_2++) {
      for (i_3 = 0; i_3 < 13; i_3++) {
        i_0 = proc_control_B.rows_i[i_3];
        proc_control_B.a[(i_0 + 130 * (i_2 + i_1)) - 1] = b_Su1[(130 * i_2 + i_0)
          - 1];
      }
    }

    for (b_Su1_tmp = 0; b_Su1_tmp <= i; b_Su1_tmp++) {
      b_Hv_tmp = i - b_Su1_tmp;
      i_1 = b_Hv_tmp * 25;
      for (i_2 = 0; i_2 < 25; i_2++) {
        std::memcpy(&proc_control_B.AA_h[i_2 * 25], &proc_control_B.AA[i_2 * 25
                    + i_1 * 25], 25U * sizeof(real_T));
      }

      for (i_2 = 0; i_2 < 13; i_2++) {
        for (i_3 = 0; i_3 < 25; i_3++) {
          b_C_tmp = 13 * i_3 + i_2;
          proc_control_B.b_C_a[b_C_tmp] = 0.0;
          for (i_1 = 0; i_1 < 25; i_1++) {
            proc_control_B.b_C_a[b_C_tmp] += b_C[(13 * i_1 + i_2) + (i + 2) *
              325] * proc_control_B.AA_h[25 * i_3 + i_1];
          }
        }

        for (i_3 = 0; i_3 < 8; i_3++) {
          proc_control_B.d33 = 0.0;
          for (i_1 = 0; i_1 < 25; i_1++) {
            proc_control_B.d33 += Bu[(25 * i_3 + i_1) + 200 * b_Hv_tmp] *
              proc_control_B.b_C_a[13 * i_1 + i_2];
          }

          proc_control_B.b_C_p[i_2 + 13 * i_3] = b_Su1[(130 * i_3 +
            proc_control_B.rows_i[i_2]) - 1] + proc_control_B.d33;
        }
      }

      for (i_2 = 0; i_2 < 8; i_2++) {
        for (i_3 = 0; i_3 < 13; i_3++) {
          b_Su1[(proc_control_B.rows_i[i_3] + 130 * i_2) - 1] =
            proc_control_B.b_C_p[13 * i_2 + i_3];
        }
      }

      b_Hv_tmp <<= 3;
      for (i_2 = 0; i_2 < 8; i_2++) {
        for (i_3 = 0; i_3 < 13; i_3++) {
          i_0 = proc_control_B.rows_i[i_3];
          proc_control_B.a[(i_0 + 130 * (i_2 + b_Hv_tmp)) - 1] = b_Su1[(130 *
            i_2 + i_0) - 1];
        }
      }
    }

    for (i_2 = 0; i_2 < 13; i_2++) {
      b_Hv[(proc_control_B.rows_i[i_2] + 130 * (i + 2)) - 1] = Dv[(i + 2) * 13 +
        i_2];
    }

    for (i_2 = 0; i_2 < 13; i_2++) {
      b_Hv_tmp = ((i + 1) * 130 + proc_control_B.rows_i[i_2]) - 1;
      b_Hv[b_Hv_tmp] = 0.0;
      for (i_3 = 0; i_3 < 25; i_3++) {
        b_Hv[b_Hv_tmp] += b_C[(13 * i_3 + i_2) + (i + 2) * 325] * Bv[(i + 1) *
          25 + i_3];
      }
    }

    for (b_Su1_tmp = 0; b_Su1_tmp <= i; b_Su1_tmp++) {
      i_1 = b_Su1_tmp * 25;
      for (i_2 = 0; i_2 < 25; i_2++) {
        std::memcpy(&proc_control_B.AA_h[i_2 * 25], &proc_control_B.AA[i_2 * 25
                    + i_1 * 25], 25U * sizeof(real_T));
      }

      for (i_2 = 0; i_2 < 13; i_2++) {
        b_Hv_tmp = (130 * b_Su1_tmp + proc_control_B.rows_i[i_2]) - 1;
        b_Hv[b_Hv_tmp] = 0.0;
        for (i_3 = 0; i_3 < 25; i_3++) {
          b_C_tmp = 13 * i_3 + i_2;
          proc_control_B.b_C_a[b_C_tmp] = 0.0;
          for (i_1 = 0; i_1 < 25; i_1++) {
            proc_control_B.b_C_a[b_C_tmp] += b_C[(13 * i_1 + i_2) + (i + 2) *
              325] * proc_control_B.AA_h[25 * i_3 + i_1];
          }

          b_Hv[b_Hv_tmp] += Bv[25 * b_Su1_tmp + i_3] *
            proc_control_B.b_C_a[b_C_tmp];
        }
      }
    }

    for (i_2 = 0; i_2 < 13; i_2++) {
      for (i_3 = 0; i_3 < 25; i_3++) {
        b_C_tmp = 13 * i_3 + i_2;
        proc_control_B.b_C_a[b_C_tmp] = 0.0;
        for (i_1 = 0; i_1 < 25; i_1++) {
          proc_control_B.b_C_a[b_C_tmp] += b_C[(13 * i_1 + i_2) + (i + 2) * 325]
            * proc_control_B.AA[25 * i_3 + i_1];
        }
      }

      for (i_3 = 0; i_3 < 25; i_3++) {
        b_C_tmp = (130 * i_3 + proc_control_B.rows_i[i_2]) - 1;
        b_Sx[b_C_tmp] = 0.0;
        for (i_1 = 0; i_1 < 25; i_1++) {
          b_Sx[b_C_tmp] += proc_control_B.b_C_a[13 * i_1 + i_2] * b_A[25 * i_3 +
            i_1];
        }
      }
    }

    if (i + 2 < 10) {
      for (b_Su1_tmp = 0; b_Su1_tmp <= i; b_Su1_tmp++) {
        b_Hv_tmp = b_Su1_tmp * 25;
        for (i_2 = 0; i_2 < 25; i_2++) {
          std::memcpy(&proc_control_B.AA_h[i_2 * 25], &proc_control_B.AA[i_2 *
                      25 + b_Hv_tmp * 25], 25U * sizeof(real_T));
        }

        for (i_2 = 0; i_2 < 25; i_2++) {
          for (i_3 = 0; i_3 < 25; i_3++) {
            b_C_tmp = (i_3 + b_Hv_tmp) * 25 + i_2;
            proc_control_B.AA[b_C_tmp] = 0.0;
            for (i_1 = 0; i_1 < 25; i_1++) {
              proc_control_B.AA[b_C_tmp] += b_A[(25 * i_1 + i_2) + (i + 2) * 625]
                * proc_control_B.AA_h[25 * i_3 + i_1];
            }
          }
        }
      }

      i_1 = (i + 1) * 25;
      for (i_2 = 0; i_2 < 25; i_2++) {
        std::memcpy(&proc_control_B.AA[i_2 * 25 + i_1 * 25], &b_A[(i * 625 + i_2
          * 25) + 1250], 25U * sizeof(real_T));
      }
    }
  }

  for (i_2 = 0; i_2 < 16; i_2++) {
    std::memset(&b_SuJm[i_2 * 130], 0, 130U * sizeof(real_T));
    for (i_1 = 0; i_1 < 80; i_1++) {
      for (i_3 = 0; i_3 < 130; i_3++) {
        i = 130 * i_2 + i_3;
        b_SuJm[i] += proc_control_B.a[130 * i_1 + i_3] * b_Jm[80 * i_2 + i_1];
      }
    }
  }
}

// Function for MATLAB Function: '<S206>/FixedHorizonOptimizer'
void proc_control::proc_contr_mpcblock_optimizer_d(const real_T rseq[130], const
  real_T vseq[11], const real_T umin[8], const real_T umax[8], const real_T x[25],
  const real_T old_u[8], const boolean_T iA[252], const real_T b_Mlim[252],
  real_T b_Mx[6300], real_T b_Mu1[2016], real_T b_Mv[2772], const real_T
  b_utarget[80], const real_T b_uoff[8], real_T b_H[289], real_T b_Ac[4284],
  const real_T ywt[13], const real_T uwt[8], const real_T duwt[8], const real_T
  b_Jm[1280], const real_T b_I1[640], const real_T b_A[6875], const real_T Bu
  [2200], const real_T Bv[275], const real_T b_C[3575], const real_T Dv[143],
  const int32_T b_Mrows[252], const real_T b_RMVscale[8], real_T u[8], real_T
  useq[88], real_T *status, boolean_T iAout[252])
{
  static const real_T b[100]{ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  int16_T ixw;
  boolean_T exitg1;
  std::memset(&iAout[0], 0, 252U * sizeof(boolean_T));
  mpc_constraintcoefLTV_q2od2L1_p(b_A, Bu, Bv, b_C, Dv, b_Jm,
    proc_control_B.b_SuJm_p, proc_control_B.b_Sx_b, proc_control_B.b_Su1_n,
    proc_control_B.b_Hv_d);
  if (b_Mrows[0] > 0) {
    proc_control_B.i_e = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.i_e < 252)) {
      if (b_Mrows[proc_control_B.i_e] <= 130) {
        proc_control_B.i_pp = b_Mrows[proc_control_B.i_e];
        for (proc_control_B.ii = 0; proc_control_B.ii < 16; proc_control_B.ii++)
        {
          b_Ac[proc_control_B.i_e + 252 * proc_control_B.ii] =
            -proc_control_B.b_SuJm_p[(130 * proc_control_B.ii +
            proc_control_B.i_pp) - 1];
        }

        proc_control_B.i_pp = b_Mrows[proc_control_B.i_e];
        for (proc_control_B.ii = 0; proc_control_B.ii < 25; proc_control_B.ii++)
        {
          b_Mx[proc_control_B.i_e + 252 * proc_control_B.ii] =
            -proc_control_B.b_Sx_b[(130 * proc_control_B.ii +
            proc_control_B.i_pp) - 1];
        }

        proc_control_B.i_pp = b_Mrows[proc_control_B.i_e];
        for (proc_control_B.ii = 0; proc_control_B.ii < 8; proc_control_B.ii++)
        {
          b_Mu1[proc_control_B.i_e + 252 * proc_control_B.ii] =
            -proc_control_B.b_Su1_n[(130 * proc_control_B.ii +
            proc_control_B.i_pp) - 1];
        }

        proc_control_B.i_pp = b_Mrows[proc_control_B.i_e];
        for (proc_control_B.ii = 0; proc_control_B.ii < 11; proc_control_B.ii++)
        {
          b_Mv[proc_control_B.i_e + 252 * proc_control_B.ii] =
            -proc_control_B.b_Hv_d[(130 * proc_control_B.ii +
            proc_control_B.i_pp) - 1];
        }

        proc_control_B.i_e++;
      } else if (b_Mrows[proc_control_B.i_e] <= 260) {
        proc_control_B.i_pp = b_Mrows[proc_control_B.i_e];
        for (proc_control_B.ii = 0; proc_control_B.ii < 16; proc_control_B.ii++)
        {
          b_Ac[proc_control_B.i_e + 252 * proc_control_B.ii] =
            proc_control_B.b_SuJm_p[(130 * proc_control_B.ii +
            proc_control_B.i_pp) - 131];
        }

        proc_control_B.i_pp = b_Mrows[proc_control_B.i_e];
        for (proc_control_B.ii = 0; proc_control_B.ii < 25; proc_control_B.ii++)
        {
          b_Mx[proc_control_B.i_e + 252 * proc_control_B.ii] =
            proc_control_B.b_Sx_b[(130 * proc_control_B.ii + proc_control_B.i_pp)
            - 131];
        }

        proc_control_B.i_pp = b_Mrows[proc_control_B.i_e];
        for (proc_control_B.ii = 0; proc_control_B.ii < 8; proc_control_B.ii++)
        {
          b_Mu1[proc_control_B.i_e + 252 * proc_control_B.ii] =
            proc_control_B.b_Su1_n[(130 * proc_control_B.ii +
            proc_control_B.i_pp) - 131];
        }

        proc_control_B.i_pp = b_Mrows[proc_control_B.i_e];
        for (proc_control_B.ii = 0; proc_control_B.ii < 11; proc_control_B.ii++)
        {
          b_Mv[proc_control_B.i_e + 252 * proc_control_B.ii] =
            proc_control_B.b_Hv_d[(130 * proc_control_B.ii + proc_control_B.i_pp)
            - 131];
        }

        proc_control_B.i_e++;
      } else {
        exitg1 = true;
      }
    }
  }

  for (proc_control_B.i_e = 0; proc_control_B.i_e < 13; proc_control_B.i_e++) {
    proc_control_B.ywt_l = ywt[proc_control_B.i_e];
    if (proc_control_B.ywt_l < 0.0) {
      proc_control_B.b_Wy[proc_control_B.i_e] = 0.0;
    } else {
      proc_control_B.b_Wy[proc_control_B.i_e] = proc_control_B.ywt_l *
        proc_control_B.ywt_l;
    }
  }

  for (proc_control_B.i_e = 0; proc_control_B.i_e < 8; proc_control_B.i_e++) {
    proc_control_B.ywt_l = duwt[proc_control_B.i_e];
    proc_control_B.uwt_k = uwt[proc_control_B.i_e];
    if (proc_control_B.uwt_k < 0.0) {
      proc_control_B.b_Wu_o[proc_control_B.i_e] = 0.0;
    } else {
      proc_control_B.b_Wu_o[proc_control_B.i_e] = proc_control_B.uwt_k *
        proc_control_B.uwt_k;
    }

    if (proc_control_B.ywt_l < 0.0) {
      proc_control_B.b_Wdu_j[proc_control_B.i_e] = 0.0;
    } else {
      proc_control_B.b_Wdu_j[proc_control_B.i_e] = proc_control_B.ywt_l *
        proc_control_B.ywt_l;
    }
  }

  std::memset(&proc_control_B.b_I[0], 0, sizeof(real_T) << 6U);
  proc_control_B.i_pp = 0;
  for (proc_control_B.i_e = 0; proc_control_B.i_e < 8; proc_control_B.i_e++) {
    proc_control_B.b_I[proc_control_B.i_pp] = 1.0;
    proc_control_B.i_pp += 9;
  }

  kron_5Yeqlajx(b, proc_control_B.b_I, proc_control_B.dv);
  for (proc_control_B.ii = 0; proc_control_B.ii < 16; proc_control_B.ii++) {
    std::memset(&proc_control_B.I2Jm_l[proc_control_B.ii * 80], 0, 80U * sizeof
                (real_T));
    for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 80; proc_control_B.i_pp
         ++) {
      for (proc_control_B.i_e = 0; proc_control_B.i_e < 80; proc_control_B.i_e++)
      {
        proc_control_B.I2Jm_tmp = 80 * proc_control_B.ii + proc_control_B.i_e;
        proc_control_B.I2Jm_l[proc_control_B.I2Jm_tmp] += proc_control_B.dv[80 *
          proc_control_B.i_pp + proc_control_B.i_e] * b_Jm[80 *
          proc_control_B.ii + proc_control_B.i_pp];
      }
    }
  }

  ixw = 1;
  for (proc_control_B.i_e = 0; proc_control_B.i_e < 130; proc_control_B.i_e++) {
    proc_control_B.ywt_l = proc_control_B.b_Wy[ixw - 1];
    for (proc_control_B.ii = 0; proc_control_B.ii < 16; proc_control_B.ii++) {
      proc_control_B.i_pp = 130 * proc_control_B.ii + proc_control_B.i_e;
      proc_control_B.WySuJm_c[proc_control_B.i_pp] =
        proc_control_B.b_SuJm_p[proc_control_B.i_pp] * proc_control_B.ywt_l;
    }

    ixw = static_cast<int16_T>(ixw + 1);
    if (ixw > 13) {
      ixw = 1;
    }
  }

  WtMult_xtNnjgO3(proc_control_B.b_Wu_o, proc_control_B.I2Jm_l, proc_control_nu,
                  proc_control_B.WuI2Jm_o);
  WtMult_xtNnjgO3(proc_control_B.b_Wdu_j, b_Jm, proc_control_nu,
                  proc_control_B.dv3);
  for (proc_control_B.ii = 0; proc_control_B.ii < 16; proc_control_B.ii++) {
    for (proc_control_B.i_e = 0; proc_control_B.i_e < 16; proc_control_B.i_e++)
    {
      proc_control_B.I2Jm_tmp = (proc_control_B.ii << 4) + proc_control_B.i_e;
      proc_control_B.b_SuJm_e[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 130;
           proc_control_B.i_pp++) {
        proc_control_B.b_SuJm_e[proc_control_B.I2Jm_tmp] +=
          proc_control_B.b_SuJm_p[130 * proc_control_B.i_e + proc_control_B.i_pp]
          * proc_control_B.WySuJm_c[130 * proc_control_B.ii +
          proc_control_B.i_pp];
      }

      proc_control_B.b_Jm_a[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 80;
           proc_control_B.i_pp++) {
        proc_control_B.b_Jm_a[proc_control_B.I2Jm_tmp] += b_Jm[80 *
          proc_control_B.i_e + proc_control_B.i_pp] * proc_control_B.dv3[80 *
          proc_control_B.ii + proc_control_B.i_pp];
      }
    }
  }

  for (proc_control_B.ii = 0; proc_control_B.ii < 16; proc_control_B.ii++) {
    for (proc_control_B.i_e = 0; proc_control_B.i_e < 16; proc_control_B.i_e++)
    {
      proc_control_B.ywt_l = 0.0;
      for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 80;
           proc_control_B.i_pp++) {
        proc_control_B.ywt_l += proc_control_B.I2Jm_l[80 * proc_control_B.ii +
          proc_control_B.i_pp] * proc_control_B.WuI2Jm_o[80 * proc_control_B.i_e
          + proc_control_B.i_pp];
      }

      proc_control_B.i_pp = (proc_control_B.i_e << 4) + proc_control_B.ii;
      b_H[proc_control_B.ii + 17 * proc_control_B.i_e] =
        (proc_control_B.b_SuJm_e[proc_control_B.i_pp] +
         proc_control_B.b_Jm_a[proc_control_B.i_pp]) + proc_control_B.ywt_l;
    }

    for (proc_control_B.i_e = 0; proc_control_B.i_e < 8; proc_control_B.i_e++) {
      proc_control_B.I2Jm_tmp = (proc_control_B.ii << 3) + proc_control_B.i_e;
      proc_control_B.b_Su1_af[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 130;
           proc_control_B.i_pp++) {
        proc_control_B.b_Su1_af[proc_control_B.I2Jm_tmp] +=
          proc_control_B.b_Su1_n[130 * proc_control_B.i_e + proc_control_B.i_pp]
          * proc_control_B.WySuJm_c[130 * proc_control_B.ii +
          proc_control_B.i_pp];
      }

      proc_control_B.b_I1_p[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 80;
           proc_control_B.i_pp++) {
        proc_control_B.b_I1_p[proc_control_B.I2Jm_tmp] += b_I1[80 *
          proc_control_B.i_e + proc_control_B.i_pp] * proc_control_B.WuI2Jm_o[80
          * proc_control_B.ii + proc_control_B.i_pp];
      }
    }
  }

  for (proc_control_B.ii = 0; proc_control_B.ii < 128; proc_control_B.ii++) {
    proc_control_B.b_Ku1_d[proc_control_B.ii] =
      proc_control_B.b_Su1_af[proc_control_B.ii] +
      proc_control_B.b_I1_p[proc_control_B.ii];
  }

  for (proc_control_B.ii = 0; proc_control_B.ii < 1280; proc_control_B.ii++) {
    proc_control_B.WuI2Jm_o[proc_control_B.ii] =
      -proc_control_B.WuI2Jm_o[proc_control_B.ii];
  }

  for (proc_control_B.ii = 0; proc_control_B.ii < 16; proc_control_B.ii++) {
    for (proc_control_B.i_e = 0; proc_control_B.i_e < 25; proc_control_B.i_e++)
    {
      proc_control_B.I2Jm_tmp = 25 * proc_control_B.ii + proc_control_B.i_e;
      proc_control_B.b_Kx_d[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 130;
           proc_control_B.i_pp++) {
        proc_control_B.b_Kx_d[proc_control_B.I2Jm_tmp] += proc_control_B.b_Sx_b
          [130 * proc_control_B.i_e + proc_control_B.i_pp] *
          proc_control_B.WySuJm_c[130 * proc_control_B.ii + proc_control_B.i_pp];
      }
    }

    for (proc_control_B.i_e = 0; proc_control_B.i_e < 11; proc_control_B.i_e++)
    {
      proc_control_B.I2Jm_tmp = 11 * proc_control_B.ii + proc_control_B.i_e;
      proc_control_B.b_Kv_i[proc_control_B.I2Jm_tmp] = 0.0;
      for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 130;
           proc_control_B.i_pp++) {
        proc_control_B.b_Kv_i[proc_control_B.I2Jm_tmp] += proc_control_B.b_Hv_d
          [130 * proc_control_B.i_e + proc_control_B.i_pp] *
          proc_control_B.WySuJm_c[130 * proc_control_B.ii + proc_control_B.i_pp];
      }
    }
  }

  for (proc_control_B.ii = 0; proc_control_B.ii < 2080; proc_control_B.ii++) {
    proc_control_B.WySuJm_c[proc_control_B.ii] =
      -proc_control_B.WySuJm_c[proc_control_B.ii];
  }

  std::memcpy(&proc_control_B.b_Linv_o[0], &b_H[0], 289U * sizeof(real_T));
  proc__mpc_checkhessian_IKf8MUv4(proc_control_B.b_Linv_o,
    proc_control_B.c_Linv_n, &proc_control_B.ywt_l);
  if (proc_control_B.ywt_l > 1.0) {
    proc_control_B.i_e = 0;
    for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 8; proc_control_B.i_pp++)
    {
      u[proc_control_B.i_pp] = old_u[proc_control_B.i_pp] +
        b_uoff[proc_control_B.i_pp];
      for (proc_control_B.ii = 0; proc_control_B.ii < 11; proc_control_B.ii++) {
        useq[proc_control_B.ii + proc_control_B.i_e] = u[proc_control_B.i_pp];
      }

      proc_control_B.i_e += 11;
    }

    *status = -2.0;
  } else {
    std::memset(&proc_control_B.b_B_e[0], 0, 289U * sizeof(int8_T));
    proc_control_B.i_pp = 0;
    for (proc_control_B.i_e = 0; proc_control_B.i_e < 17; proc_control_B.i_e++)
    {
      proc_control_B.b_B_e[proc_control_B.i_pp] = 1;
      proc_control_B.i_pp += 18;
    }

    proc_control_B.i_pp = 0;
    for (proc_control_B.i_e = 0; proc_control_B.i_e < 17; proc_control_B.i_e++)
    {
      for (proc_control_B.ii = 0; proc_control_B.ii < 17; proc_control_B.ii++) {
        proc_control_B.I2Jm_tmp = proc_control_B.ii + proc_control_B.i_pp;
        proc_control_B.b_Linv_o[proc_control_B.I2Jm_tmp] =
          proc_control_B.b_B_e[proc_control_B.I2Jm_tmp];
      }

      proc_control_B.i_pp += 17;
    }

    trisolve_1nFOis6o(proc_control_B.c_Linv_n, proc_control_B.b_Linv_o);
    for (proc_control_B.ii = 0; proc_control_B.ii < 252; proc_control_B.ii++) {
      proc_control_B.ywt_l = 0.0;
      proc_control_B.i_e = 0;
      for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 25;
           proc_control_B.i_pp++) {
        proc_control_B.ywt_l += b_Mx[proc_control_B.i_e + proc_control_B.ii] *
          x[proc_control_B.i_pp];
        proc_control_B.i_e += 252;
      }

      proc_control_B.b_Mlim_l[proc_control_B.ii] = b_Mlim[proc_control_B.ii] +
        proc_control_B.ywt_l;
      proc_control_B.b_Mu1_o[proc_control_B.ii] = 0.0;
    }

    proc_control_B.ii = 0;
    for (proc_control_B.i_e = 0; proc_control_B.i_e < 8; proc_control_B.i_e++) {
      for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 252;
           proc_control_B.i_pp++) {
        proc_control_B.b_Mu1_o[proc_control_B.i_pp] += b_Mu1[proc_control_B.i_pp
          + proc_control_B.ii] * old_u[proc_control_B.i_e];
      }

      proc_control_B.ii += 252;
    }

    for (proc_control_B.ii = 0; proc_control_B.ii < 252; proc_control_B.ii++) {
      proc_control_B.ywt_l = 0.0;
      proc_control_B.i_e = 0;
      for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 11;
           proc_control_B.i_pp++) {
        proc_control_B.ywt_l += b_Mv[proc_control_B.i_e + proc_control_B.ii] *
          vseq[proc_control_B.i_pp];
        proc_control_B.i_e += 252;
      }

      proc_control_B.Bc_i[proc_control_B.ii] =
        -((proc_control_B.b_Mlim_l[proc_control_B.ii] +
           proc_control_B.b_Mu1_o[proc_control_B.ii]) + proc_control_B.ywt_l);
    }

    std::memset(&proc_control_B.b_Wu_o[0], 0, sizeof(real_T) << 3U);
    std::memset(&proc_control_B.b_Wdu_j[0], 0, sizeof(real_T) << 3U);
    for (proc_control_B.ii = 0; proc_control_B.ii < 8; proc_control_B.ii++) {
      proc_control_B.umax_incr_flag_d[proc_control_B.ii] = false;
      proc_control_B.umin_incr_flag_f[proc_control_B.ii] = false;
    }

    if (b_Mrows[0] > 0) {
      proc_control_B.i_e = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.i_e < 252)) {
        if ((b_Mrows[proc_control_B.i_e] <= 130) || (b_Mrows[proc_control_B.i_e]
             <= 260)) {
          proc_control_B.i_e++;
        } else if (b_Mrows[proc_control_B.i_e] <= 340) {
          boolean_T b_Del_Save_Flag0;
          proc_control_B.ii = (b_Mrows[proc_control_B.i_e] -
                               (((b_Mrows[proc_control_B.i_e] - 261) >> 3) << 3))
            - 261;
          b_Del_Save_Flag0 = proc_control_B.umax_incr_flag_d[proc_control_B.ii];
          if (!proc_control_B.umax_incr_flag_d[proc_control_B.ii]) {
            proc_control_B.ywt_l = -(b_RMVscale[proc_control_B.ii] *
              umax[proc_control_B.ii] - b_uoff[proc_control_B.ii]) -
              (-b_Mlim[proc_control_B.i_e]);
            b_Del_Save_Flag0 = true;
          } else {
            proc_control_B.ywt_l = proc_control_B.b_Wu_o[proc_control_B.ii];
          }

          proc_control_B.b_Wu_o[proc_control_B.ii] = proc_control_B.ywt_l;
          proc_control_B.umax_incr_flag_d[proc_control_B.ii] = b_Del_Save_Flag0;
          proc_control_B.Bc_i[proc_control_B.i_e] += proc_control_B.ywt_l;
          proc_control_B.i_e++;
        } else if (b_Mrows[proc_control_B.i_e] <= 420) {
          boolean_T b_Del_Save_Flag0;
          proc_control_B.ii = (b_Mrows[proc_control_B.i_e] -
                               (((b_Mrows[proc_control_B.i_e] - 341) >> 3) << 3))
            - 341;
          b_Del_Save_Flag0 = proc_control_B.umin_incr_flag_f[proc_control_B.ii];
          if (!proc_control_B.umin_incr_flag_f[proc_control_B.ii]) {
            proc_control_B.ywt_l = (b_RMVscale[proc_control_B.ii] *
              umin[proc_control_B.ii] - b_uoff[proc_control_B.ii]) -
              (-b_Mlim[proc_control_B.i_e]);
            b_Del_Save_Flag0 = true;
          } else {
            proc_control_B.ywt_l = proc_control_B.b_Wdu_j[proc_control_B.ii];
          }

          proc_control_B.b_Wdu_j[proc_control_B.ii] = proc_control_B.ywt_l;
          proc_control_B.umin_incr_flag_f[proc_control_B.ii] = b_Del_Save_Flag0;
          proc_control_B.Bc_i[proc_control_B.i_e] += proc_control_B.ywt_l;
          proc_control_B.i_e++;
        } else {
          exitg1 = true;
        }
      }
    }

    std::memset(&proc_control_B.f_c[0], 0, 17U * sizeof(real_T));
    for (proc_control_B.i_e = 0; proc_control_B.i_e < 16; proc_control_B.i_e++)
    {
      proc_control_B.ywt_l = 0.0;
      for (proc_control_B.ii = 0; proc_control_B.ii < 25; proc_control_B.ii++) {
        proc_control_B.ywt_l += proc_control_B.b_Kx_d[25 * proc_control_B.i_e +
          proc_control_B.ii] * x[proc_control_B.ii];
      }

      proc_control_B.uwt_k = 0.0;
      for (proc_control_B.ii = 0; proc_control_B.ii < 130; proc_control_B.ii++)
      {
        proc_control_B.uwt_k += proc_control_B.WySuJm_c[130 * proc_control_B.i_e
          + proc_control_B.ii] * rseq[proc_control_B.ii];
      }

      proc_control_B.b_Ku1_hc = 0.0;
      for (proc_control_B.ii = 0; proc_control_B.ii < 8; proc_control_B.ii++) {
        proc_control_B.b_Ku1_hc += proc_control_B.b_Ku1_d[(proc_control_B.i_e <<
          3) + proc_control_B.ii] * old_u[proc_control_B.ii];
      }

      proc_control_B.b_Kv_f = 0.0;
      for (proc_control_B.ii = 0; proc_control_B.ii < 11; proc_control_B.ii++) {
        proc_control_B.b_Kv_f += proc_control_B.b_Kv_i[11 * proc_control_B.i_e +
          proc_control_B.ii] * vseq[proc_control_B.ii];
      }

      proc_control_B.WuI2Jm_d = 0.0;
      for (proc_control_B.ii = 0; proc_control_B.ii < 80; proc_control_B.ii++) {
        proc_control_B.WuI2Jm_d += proc_control_B.WuI2Jm_o[80 *
          proc_control_B.i_e + proc_control_B.ii] * b_utarget[proc_control_B.ii];
      }

      proc_control_B.f_c[proc_control_B.i_e] = (((proc_control_B.ywt_l +
        proc_control_B.uwt_k) + proc_control_B.b_Ku1_hc) + proc_control_B.b_Kv_f)
        + proc_control_B.WuI2Jm_d;
    }

    std::memcpy(&iAout[0], &iA[0], 252U * sizeof(boolean_T));
    proc_control_B.ii = 0;
    for (proc_control_B.i_e = 0; proc_control_B.i_e < 17; proc_control_B.i_e++)
    {
      proc_control_B.i_pp = 0;
      for (proc_control_B.i1_e = 0; proc_control_B.i1_e < 17;
           proc_control_B.i1_e++) {
        proc_control_B.I2Jm_tmp = proc_control_B.i1_e + proc_control_B.ii;
        proc_control_B.c_Linv_n[proc_control_B.I2Jm_tmp] = 0.0;
        for (proc_control_B.i8 = 0; proc_control_B.i8 < 17; proc_control_B.i8++)
        {
          proc_control_B.c_Linv_n[proc_control_B.I2Jm_tmp] +=
            proc_control_B.b_Linv_o[proc_control_B.i8 + proc_control_B.i_pp] *
            proc_control_B.b_Linv_o[proc_control_B.i8 + proc_control_B.ii];
        }

        proc_control_B.i_pp += 17;
      }

      proc_control_B.ii += 17;
    }

    proc_control_qpkwik(proc_control_B.b_Linv_o, proc_control_B.c_Linv_n,
                        proc_control_B.f_c, b_Ac, proc_control_B.Bc_i, iAout,
                        1076, 0.01, proc_control_B.zopt_g,
                        proc_control_B.b_Mlim_l, &proc_control_B.i_e);
    if ((proc_control_B.i_e < 0) || (proc_control_B.i_e == 0)) {
      std::memset(&proc_control_B.zopt_g[0], 0, 17U * sizeof(real_T));
    }

    *status = proc_control_B.i_e;
    for (proc_control_B.i_e = 0; proc_control_B.i_e < 8; proc_control_B.i_e++) {
      u[proc_control_B.i_e] = (old_u[proc_control_B.i_e] +
        proc_control_B.zopt_g[proc_control_B.i_e]) + b_uoff[proc_control_B.i_e];
    }

    std::memset(&proc_control_B.b_I[0], 0, sizeof(real_T) << 6U);
    proc_control_B.i_pp = 0;
    for (proc_control_B.i_e = 0; proc_control_B.i_e < 8; proc_control_B.i_e++) {
      proc_control_B.b_I[proc_control_B.i_pp] = 1.0;
      proc_control_B.i_pp += 9;
    }

    kron_5Yeqlajx(b, proc_control_B.b_I, proc_control_B.dv);
    for (proc_control_B.ii = 0; proc_control_B.ii < 16; proc_control_B.ii++) {
      std::memset(&proc_control_B.dv3[proc_control_B.ii * 80], 0, 80U * sizeof
                  (real_T));
      for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 80;
           proc_control_B.i_pp++) {
        for (proc_control_B.i_e = 0; proc_control_B.i_e < 80; proc_control_B.i_e
             ++) {
          proc_control_B.i1_e = 80 * proc_control_B.ii + proc_control_B.i_e;
          proc_control_B.dv3[proc_control_B.i1_e] += proc_control_B.dv[80 *
            proc_control_B.i_pp + proc_control_B.i_e] * b_Jm[80 *
            proc_control_B.ii + proc_control_B.i_pp];
        }
      }
    }

    for (proc_control_B.ii = 0; proc_control_B.ii < 8; proc_control_B.ii++) {
      proc_control_B.b_Wu_o[proc_control_B.ii] = old_u[proc_control_B.ii] +
        b_uoff[proc_control_B.ii];
    }

    std::memset(&proc_control_B.dv11[0], 0, 80U * sizeof(real_T));
    proc_control_B.i_e = 0;
    for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 16; proc_control_B.i_pp
         ++) {
      for (proc_control_B.ii = 0; proc_control_B.ii < 80; proc_control_B.ii++) {
        proc_control_B.dv11[proc_control_B.ii] +=
          proc_control_B.dv3[proc_control_B.ii + proc_control_B.i_e] *
          proc_control_B.zopt_g[proc_control_B.i_pp];
      }

      proc_control_B.i_e += 80;
    }

    std::memset(&proc_control_B.b_I1_h[0], 0, 80U * sizeof(real_T));
    proc_control_B.i_e = 0;
    for (proc_control_B.i_pp = 0; proc_control_B.i_pp < 8; proc_control_B.i_pp++)
    {
      for (proc_control_B.ii = 0; proc_control_B.ii < 80; proc_control_B.ii++) {
        proc_control_B.b_I1_h[proc_control_B.ii] += b_I1[proc_control_B.ii +
          proc_control_B.i_e] * proc_control_B.b_Wu_o[proc_control_B.i_pp];
      }

      proc_control_B.i_e += 80;
    }

    for (proc_control_B.ii = 0; proc_control_B.ii < 80; proc_control_B.ii++) {
      proc_control_B.dv12[proc_control_B.ii] =
        proc_control_B.dv11[proc_control_B.ii] +
        proc_control_B.b_I1_h[proc_control_B.ii];
    }

    proc_control_B.ii = 0;
    for (proc_control_B.i_e = 0; proc_control_B.i_e < 8; proc_control_B.i_e++) {
      proc_control_B.i_pp = 0;
      for (proc_control_B.i1_e = 0; proc_control_B.i1_e < 10;
           proc_control_B.i1_e++) {
        useq[proc_control_B.i1_e + proc_control_B.ii] =
          proc_control_B.dv12[proc_control_B.i_pp + proc_control_B.i_e];
        proc_control_B.i_pp += 8;
      }

      proc_control_B.ii += 11;
    }

    proc_control_B.ii = 0;
    for (proc_control_B.i_e = 0; proc_control_B.i_e < 8; proc_control_B.i_e++) {
      proc_control_B.b_Wu_o[proc_control_B.i_e] = useq[proc_control_B.ii + 9];
      useq[proc_control_B.ii + 10] = proc_control_B.b_Wu_o[proc_control_B.i_e];
      proc_control_B.ii += 11;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_mtimes(const real_T A_data[], const int32_T
  A_size[2], real_T C_data[], int32_T C_size[2])
{
  static const int8_T b[1280]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };

  int32_T mc;
  mc = A_size[0];
  C_size[0] = A_size[0];
  C_size[1] = 16;
  for (int32_T j{0}; j < 16; j++) {
    int32_T boffset;
    int32_T coffset;
    coffset = j * mc;
    boffset = j * 80;
    for (int32_T i{0}; i < mc; i++) {
      C_data[coffset + i] = 0.0;
    }

    for (int32_T i{0}; i < 80; i++) {
      int32_T aoffset;
      int32_T bkj;
      aoffset = i * A_size[0];
      bkj = b[boffset + i];
      for (int32_T b_i{1}; b_i - 1 < mc; b_i++) {
        int32_T tmp;
        tmp = (coffset + b_i) - 1;
        C_data[tmp] += A_data[(aoffset + b_i) - 1] * static_cast<real_T>(bkj);
      }
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_znlmpc_getUBounds(const real_T
  runtimedata_lastMV[8], const real_T runtimedata_MVMin[80], const real_T
  runtimedata_MVMax[80], const real_T runtimedata_MVRateMin[80], const real_T
  runtimedata_MVRateMax[80], real_T A_data[], int32_T A_size[2], real_T Bu_data[],
  int32_T *Bu_size)
{
  int32_T i;
  int32_T idx;
  boolean_T exitg1;
  std::memset(&proc_control_B.Au[0], 0, 25600U * sizeof(real_T));
  std::memset(&proc_control_B.b_Bu[0], 0, 320U * sizeof(real_T));
  std::memset(&proc_control_B.x[0], 0, 320U * sizeof(boolean_T));
  for (i = 0; i < 8; i++) {
    proc_control_B.ic_k[i] = static_cast<real_T>(i) + 1.0;
  }

  std::memset(&proc_control_B.As[0], 0, sizeof(int8_T) << 6U);
  i = 0;
  for (idx = 0; idx < 8; idx++) {
    proc_control_B.As[i] = 1;
    i += 9;
  }

  for (i = 0; i < 64; i++) {
    idx = proc_control_B.As[i];
    proc_control_B.Au_tmp_p[i] = static_cast<int8_T>(-idx);
    proc_control_B.Au_tmp[i] = static_cast<int8_T>(idx);
  }

  for (idx = 0; idx < 10; idx++) {
    for (i = 0; i < 8; i++) {
      proc_control_B.runtimedata_MVRateMin[i] = runtimedata_MVRateMin[10 * i +
        idx];
    }

    isfinite_NLoqvmdK(proc_control_B.runtimedata_MVRateMin, proc_control_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_B.x[static_cast<int32_T>(proc_control_B.ic_k[i]) - 1] =
        proc_control_B.bv3[i];
      proc_control_B.runtimedata_MVRateMin[i] = runtimedata_MVRateMax[10 * i +
        idx];
    }

    isfinite_NLoqvmdK(proc_control_B.runtimedata_MVRateMin, proc_control_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_B.x[static_cast<int32_T>(proc_control_B.ic_k[i] + 8.0) - 1] =
        proc_control_B.bv3[i];
      proc_control_B.runtimedata_MVRateMin[i] = runtimedata_MVMin[10 * i + idx];
    }

    isfinite_NLoqvmdK(proc_control_B.runtimedata_MVRateMin, proc_control_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_B.x[static_cast<int32_T>(proc_control_B.ic_k[i] + 16.0) - 1] =
        proc_control_B.bv3[i];
      proc_control_B.runtimedata_MVRateMin[i] = runtimedata_MVMax[10 * i + idx];
    }

    isfinite_NLoqvmdK(proc_control_B.runtimedata_MVRateMin, proc_control_B.bv3);
    for (i = 0; i < 8; i++) {
      proc_control_B.x[static_cast<int32_T>(proc_control_B.ic_k[i] + 24.0) - 1] =
        proc_control_B.bv3[i];
      for (proc_control_B.k_i = 0; proc_control_B.k_i < 8; proc_control_B.k_i++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_k[proc_control_B.k_i]) + 320 * i)
                           + 2560 * idx) - 1] = proc_control_B.Au_tmp_p[(i << 3)
          + proc_control_B.k_i];
      }
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_B.k_i = 0; proc_control_B.k_i < 8; proc_control_B.k_i++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_k[proc_control_B.k_i] + 8.0) +
                            320 * i) + 2560 * idx) - 1] = proc_control_B.Au_tmp
          [(i << 3) + proc_control_B.k_i];
      }
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_B.k_i = 0; proc_control_B.k_i < 8; proc_control_B.k_i++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_k[proc_control_B.k_i] + 16.0) +
                            320 * i) + 2560 * idx) - 1] =
          proc_control_B.Au_tmp_p[(i << 3) + proc_control_B.k_i];
      }
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_B.k_i = 0; proc_control_B.k_i < 8; proc_control_B.k_i++)
      {
        proc_control_B.Au[((static_cast<int32_T>
                            (proc_control_B.ic_k[proc_control_B.k_i] + 24.0) +
                            320 * i) + 2560 * idx) - 1] = proc_control_B.Au_tmp
          [(i << 3) + proc_control_B.k_i];
      }

      proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_k[i]) - 1] =
        -runtimedata_MVRateMin[10 * i + idx];
    }

    for (i = 0; i < 8; i++) {
      proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_k[i] + 8.0) - 1]
        = runtimedata_MVRateMax[10 * i + idx];
    }

    for (i = 0; i < 8; i++) {
      proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_k[i] + 16.0) -
        1] = -runtimedata_MVMin[10 * i + idx];
    }

    for (i = 0; i < 8; i++) {
      proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_k[i] + 24.0) -
        1] = runtimedata_MVMax[10 * i + idx];
    }

    if (idx + 1 == 1) {
      for (i = 0; i < 8; i++) {
        proc_control_B.c_ng = runtimedata_lastMV[i];
        proc_control_B.runtimedata_MVRateMin[i] = proc_control_B.b_Bu[
          static_cast<int32_T>(proc_control_B.ic_k[i]) - 1] -
          proc_control_B.c_ng;
        proc_control_B.c_j[i] = proc_control_B.c_ng;
      }

      for (i = 0; i < 8; i++) {
        proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_k[i]) - 1] =
          proc_control_B.runtimedata_MVRateMin[i];
      }

      for (i = 0; i < 8; i++) {
        proc_control_B.runtimedata_MVRateMin[i] = proc_control_B.b_Bu[
          static_cast<int32_T>(proc_control_B.ic_k[i] + 8.0) - 1] +
          proc_control_B.c_j[i];
      }

      for (i = 0; i < 8; i++) {
        proc_control_B.b_Bu[static_cast<int32_T>(proc_control_B.ic_k[i] + 8.0) -
          1] = proc_control_B.runtimedata_MVRateMin[i];
      }
    } else {
      for (i = 0; i < 8; i++) {
        for (proc_control_B.k_i = 0; proc_control_B.k_i < 8; proc_control_B.k_i
             ++) {
          proc_control_B.Au[((static_cast<int32_T>
                              (proc_control_B.ic_k[proc_control_B.k_i]) + 320 *
                              i) + 2560 * (idx - 1)) - 1] =
            proc_control_B.Au_tmp[(i << 3) + proc_control_B.k_i];
        }
      }

      for (i = 0; i < 8; i++) {
        for (proc_control_B.k_i = 0; proc_control_B.k_i < 8; proc_control_B.k_i
             ++) {
          proc_control_B.Au[((static_cast<int32_T>
                              (proc_control_B.ic_k[proc_control_B.k_i] + 8.0) +
                              320 * i) + 2560 * (idx - 1)) - 1] =
            proc_control_B.Au_tmp_p[(i << 3) + proc_control_B.k_i];
        }
      }
    }

    for (i = 0; i < 8; i++) {
      proc_control_B.ic_k[i] += 32.0;
    }
  }

  idx = 0;
  i = 0;
  exitg1 = false;
  while ((!exitg1) && (i < 320)) {
    if (proc_control_B.x[i]) {
      idx++;
      proc_control_B.ii_data[idx - 1] = static_cast<int16_T>(i + 1);
      if (idx >= 320) {
        exitg1 = true;
      } else {
        i++;
      }
    } else {
      i++;
    }
  }

  if (idx < 1) {
    idx = 0;
  }

  if (idx > 0) {
    *Bu_size = idx;
    for (i = 0; i < idx; i++) {
      Bu_data[i] = proc_control_B.b_Bu[proc_control_B.ii_data[i] - 1];
    }

    for (i = 0; i < 8; i++) {
      for (proc_control_B.k_i = 0; proc_control_B.k_i < 10; proc_control_B.k_i++)
      {
        proc_control_B.b_i_a = 0;
        while (proc_control_B.b_i_a <= idx - 1) {
          proc_control_B.Auf_data[(proc_control_B.b_i_a + idx * i) + (idx << 3) *
            proc_control_B.k_i] = proc_control_B.Au[((320 * i +
            proc_control_B.ii_data[proc_control_B.b_i_a]) + 2560 *
            proc_control_B.k_i) - 1];
          proc_control_B.b_i_a++;
        }
      }
    }

    proc_control_B.idx[0] = idx;
    proc_control_B.idx[1] = 80;
    proc_control_mtimes(proc_control_B.Auf_data, proc_control_B.idx,
                        proc_control_B.tmp_data_k, proc_control_B.tmp_size_p);
    A_size[0] = idx;
    A_size[1] = 147;
    proc_control_B.k_i = idx * 130;
    std::memset(&A_data[0], 0, proc_control_B.k_i * sizeof(real_T));
    proc_control_B.k_i = idx << 4;
    for (i = 0; i < proc_control_B.k_i; i++) {
      A_data[i + idx * 130] = proc_control_B.tmp_data_k[i];
    }

    std::memset(&A_data[idx * 130 + proc_control_B.k_i], 0, ((((idx + idx * 130)
      + proc_control_B.k_i) - idx * 130) - proc_control_B.k_i) * sizeof(real_T));
  } else {
    *Bu_size = 0;
    A_size[0] = 0;
    A_size[1] = 211;
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_znlmpc_getXUe(const real_T z[147], const real_T
  x[13], real_T X[143], real_T U[88], real_T *e)
{
  static const int8_T y[1280]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };

  int32_T i;
  int32_T i_0;
  int32_T i_1;
  std::memset(&X[0], 0, 143U * sizeof(real_T));
  std::memset(&proc_control_B.Umv[0], 0, 88U * sizeof(real_T));
  std::memset(&proc_control_B.y_m4[0], 0, 80U * sizeof(real_T));
  i_1 = 0;
  for (i_0 = 0; i_0 < 16; i_0++) {
    for (i = 0; i < 80; i++) {
      proc_control_B.y_m4[i] += static_cast<real_T>(y[i + i_1]) * z[i_0 + 130];
    }

    i_1 += 80;
  }

  i = 0;
  for (i_1 = 0; i_1 < 8; i_1++) {
    i_0 = 0;
    for (int32_T U_tmp{0}; U_tmp < 10; U_tmp++) {
      proc_control_B.Umv[U_tmp + i] = proc_control_B.y_m4[i_0 + i_1];
      i_0 += 8;
    }

    i += 11;
  }

  *e = z[146];
  std::memcpy(&proc_control_B.z_c[0], &z[0], 130U * sizeof(real_T));
  i = 0;
  for (i_1 = 0; i_1 < 10; i_1++) {
    i_0 = 0;
    for (int32_T U_tmp{0}; U_tmp < 13; U_tmp++) {
      X[(i_0 + i_1) + 1] = proc_control_B.z_c[U_tmp + i];
      i_0 += 11;
    }

    i += 13;
  }

  i = 0;
  for (int32_T U_tmp{0}; U_tmp < 13; U_tmp++) {
    X[i] = x[U_tmp];
    i += 11;
  }

  i_1 = 0;
  for (i_0 = 0; i_0 < 8; i_0++) {
    proc_control_B.Umv[i_1 + 10] = proc_control_B.Umv[i_1 + 9];
    std::memcpy(&U[i_1], &proc_control_B.Umv[i_1], 11U * sizeof(real_T));
    i_1 += 11;
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::AUV7QuatJacobianMatrix_nTvSBp_d(const real_T in1[13], real_T
  Anqv[169])
{
  real_T t25_tmp;
  real_T t29_tmp;
  proc_control_B.t2 = std::abs(in1[10]);
  proc_control_B.t3_m = std::abs(in1[11]);
  proc_control_B.t4_f = std::abs(in1[12]);
  proc_control_B.t5_o = std::abs(in1[7]);
  proc_control_B.t6_i = std::abs(in1[8]);
  proc_control_B.t7 = std::abs(in1[9]);
  if (std::isnan(in1[10])) {
    proc_control_B.t8 = in1[10];
  } else if (in1[10] < 0.0) {
    proc_control_B.t8 = -1.0;
  } else {
    proc_control_B.t8 = (in1[10] > 0.0);
  }

  if (std::isnan(in1[11])) {
    proc_control_B.t9 = in1[11];
  } else if (in1[11] < 0.0) {
    proc_control_B.t9 = -1.0;
  } else {
    proc_control_B.t9 = (in1[11] > 0.0);
  }

  if (std::isnan(in1[12])) {
    proc_control_B.t10 = in1[12];
  } else if (in1[12] < 0.0) {
    proc_control_B.t10 = -1.0;
  } else {
    proc_control_B.t10 = (in1[12] > 0.0);
  }

  if (std::isnan(in1[7])) {
    proc_control_B.t11 = in1[7];
  } else if (in1[7] < 0.0) {
    proc_control_B.t11 = -1.0;
  } else {
    proc_control_B.t11 = (in1[7] > 0.0);
  }

  if (std::isnan(in1[8])) {
    proc_control_B.t12 = in1[8];
  } else if (in1[8] < 0.0) {
    proc_control_B.t12 = -1.0;
  } else {
    proc_control_B.t12 = (in1[8] > 0.0);
  }

  if (std::isnan(in1[9])) {
    proc_control_B.t13 = in1[9];
  } else if (in1[9] < 0.0) {
    proc_control_B.t13 = -1.0;
  } else {
    proc_control_B.t13 = (in1[9] > 0.0);
  }

  proc_control_B.t17 = in1[4] * in1[5] * 2.0;
  proc_control_B.t18 = in1[4] * in1[6] * 2.0;
  proc_control_B.t19 = in1[5] * in1[6] * 2.0;
  proc_control_B.t20 = in1[3] * in1[4] * 2.0;
  proc_control_B.t21 = in1[3] * in1[5] * 2.0;
  proc_control_B.t22 = in1[3] * in1[6] * 2.0;
  proc_control_B.t23 = in1[4] * in1[7] * 2.0;
  proc_control_B.t24_tmp_p = in1[5] * in1[7];
  proc_control_B.t24_e = proc_control_B.t24_tmp_p * 2.0;
  t25_tmp = in1[6] * in1[7];
  proc_control_B.t25_j = t25_tmp * 2.0;
  proc_control_B.t26_o = in1[3] * in1[7] * 2.0;
  proc_control_B.t27_tmp_b = in1[4] * in1[8];
  proc_control_B.t27_f = proc_control_B.t27_tmp_b * 2.0;
  proc_control_B.t28 = in1[5] * in1[8] * 2.0;
  t29_tmp = in1[6] * in1[8];
  proc_control_B.t29_m = t29_tmp * 2.0;
  proc_control_B.t30_a = in1[3] * in1[8] * 2.0;
  proc_control_B.t31_tmp_h = in1[4] * in1[9];
  proc_control_B.t31_h = proc_control_B.t31_tmp_h * 2.0;
  proc_control_B.t32_tmp = in1[5] * in1[9];
  proc_control_B.t32 = proc_control_B.t32_tmp * 2.0;
  proc_control_B.t33_o = in1[6] * in1[9] * 2.0;
  proc_control_B.t34_h = in1[3] * in1[9] * 2.0;
  proc_control_B.t39_j = in1[4] / 2.0;
  proc_control_B.t40_g = in1[5] / 2.0;
  proc_control_B.t41_j = in1[6] / 2.0;
  proc_control_B.t42 = in1[3] / 2.0;
  proc_control_B.t43_l = in1[10] / 2.0;
  proc_control_B.t44_k = in1[11] / 2.0;
  proc_control_B.t45_d = in1[12] / 2.0;
  proc_control_B.t58_n = in1[11] * 8.7612480428112471E-6;
  proc_control_B.t59_j = in1[7] * 3.6805220320211881E-5;
  proc_control_B.t60_a = in1[8] * 7.211946028174652E-5;
  proc_control_B.t62_h = in1[8] * 0.0026915778663054;
  proc_control_B.t63_i = in1[7] * 0.0012514964408717271;
  proc_control_B.t64 = in1[9] * 0.01181455270975019;
  proc_control_B.t66 = in1[9] * 0.01276507759640369;
  proc_control_B.t35 = in1[4] * in1[4] * 2.0;
  proc_control_B.t36 = in1[5] * in1[5] * 2.0;
  proc_control_B.t37 = in1[6] * in1[6] * 2.0;
  proc_control_B.t56 = -(in1[12] * 3.9649339350647009E-8);
  proc_control_B.t61_d = -(in1[10] * 1.880816492197691E-5);
  std::memset(&Anqv[0], 0, 39U * sizeof(real_T));
  Anqv[39] = -proc_control_B.t29_m + proc_control_B.t32;
  Anqv[40] = proc_control_B.t25_j - proc_control_B.t31_h;
  Anqv[41] = -proc_control_B.t24_e + proc_control_B.t27_f;
  Anqv[42] = 0.0;
  Anqv[43] = proc_control_B.t43_l;
  Anqv[44] = proc_control_B.t44_k;
  Anqv[45] = proc_control_B.t45_d;
  Anqv[46] = in1[4] * 0.00024221914396928331 + in1[5] * 0.446279612603122;
  Anqv[47] = in1[4] * -0.44996381418158943 - in1[5] * 0.0002372117866458812;
  Anqv[48] = in1[4] * 0.0097440679897671783 - in1[5] * 0.0043215762663743667;
  Anqv[49] = in1[4] * -6.6132984045987788 + in1[5] * 0.025871946299473779;
  Anqv[50] = in1[4] * 0.027272006623379409 - in1[5] * 5.826458617096355;
  Anqv[51] = in1[4] * 0.27831525078194952 + in1[5] * 0.538414009042602;
  Anqv[52] = proc_control_B.t28 + proc_control_B.t33_o;
  Anqv[53] = (proc_control_B.t24_e - proc_control_B.t34_h) -
    proc_control_B.t27_tmp_b * 4.0;
  Anqv[54] = (proc_control_B.t25_j + proc_control_B.t30_a) -
    proc_control_B.t31_tmp_h * 4.0;
  Anqv[55] = -proc_control_B.t43_l;
  Anqv[56] = 0.0;
  Anqv[57] = -proc_control_B.t45_d;
  Anqv[58] = proc_control_B.t44_k;
  Anqv[59] = (in1[4] * -0.0063156660948944666 - in1[6] * 0.446279612603122) +
    in1[3] * 0.00024221914396928331;
  Anqv[60] = (in1[4] * -0.014206389927440759 + in1[6] * 0.0002372117866458812) +
    in1[3] * -0.44996381418158943;
  Anqv[61] = (in1[4] * 0.76799224836099578 + in1[6] * 0.0043215762663743667) +
    in1[3] * 0.0097440679897671783;
  Anqv[62] = (in1[4] * -2.0330321882771121 - in1[6] * 0.025871946299473779) +
    in1[3] * -6.6132984045987788;
  Anqv[63] = (in1[4] * 0.90215841406066088 + in1[6] * 5.826458617096355) + in1[3]
    * 0.027272006623379409;
  Anqv[64] = (in1[4] * 0.0027990170632855231 - in1[6] * 0.538414009042602) +
    in1[3] * 0.27831525078194952;
  Anqv[65] = (proc_control_B.t27_f + proc_control_B.t34_h) -
    proc_control_B.t24_tmp_p * 4.0;
  Anqv[66] = proc_control_B.t23 + proc_control_B.t33_o;
  Anqv[67] = (-proc_control_B.t26_o + proc_control_B.t29_m) -
    proc_control_B.t32_tmp * 4.0;
  Anqv[68] = -proc_control_B.t44_k;
  Anqv[69] = proc_control_B.t45_d;
  Anqv[70] = 0.0;
  Anqv[71] = -proc_control_B.t43_l;
  Anqv[72] = (in1[5] * -0.0063156660948944666 + in1[6] * 0.00024221914396928331)
    + in1[3] * 0.446279612603122;
  Anqv[73] = (in1[5] * -0.014206389927440759 - in1[6] * 0.44996381418158943) +
    in1[3] * -0.0002372117866458812;
  Anqv[74] = (in1[5] * 0.76799224836099578 + in1[6] * 0.0097440679897671783) +
    in1[3] * -0.0043215762663743667;
  Anqv[75] = (in1[5] * -2.0330321882771121 - in1[6] * 6.6132984045987788) + in1
    [3] * 0.025871946299473779;
  Anqv[76] = (in1[5] * 0.90215841406066088 + in1[6] * 0.027272006623379409) +
    in1[3] * -5.826458617096355;
  Anqv[77] = (in1[5] * 0.0027990170632855231 + in1[6] * 0.27831525078194952) +
    in1[3] * 0.538414009042602;
  Anqv[78] = (-proc_control_B.t30_a + proc_control_B.t31_h) - t25_tmp * 4.0;
  Anqv[79] = (proc_control_B.t26_o + proc_control_B.t32) - t29_tmp * 4.0;
  Anqv[80] = proc_control_B.t23 + proc_control_B.t28;
  Anqv[81] = -proc_control_B.t45_d;
  Anqv[82] = -proc_control_B.t44_k;
  Anqv[83] = proc_control_B.t43_l;
  Anqv[84] = 0.0;
  Anqv[85] = in1[4] * -0.446279612603122 + in1[5] * 0.00024221914396928331;
  Anqv[86] = in1[4] * 0.0002372117866458812 - in1[5] * 0.44996381418158943;
  Anqv[87] = in1[4] * 0.0043215762663743667 + in1[5] * 0.0097440679897671783;
  Anqv[88] = in1[4] * -0.025871946299473779 - in1[5] * 6.6132984045987788;
  Anqv[89] = in1[4] * 5.826458617096355 + in1[5] * 0.027272006623379409;
  Anqv[90] = in1[4] * -0.538414009042602 + in1[5] * 0.27831525078194952;
  Anqv[91] = (-proc_control_B.t36 + -proc_control_B.t37) + 1.0;
  Anqv[92] = proc_control_B.t17 + proc_control_B.t22;
  Anqv[93] = proc_control_B.t18 - proc_control_B.t21;
  Anqv[94] = 0.0;
  Anqv[95] = 0.0;
  Anqv[96] = 0.0;
  Anqv[97] = 0.0;
  proc_control_B.t11 *= in1[7];
  Anqv[98] = (((((proc_control_B.t5_o * -0.02083209676345903 +
                  proc_control_B.t56) + proc_control_B.t58_n) -
                proc_control_B.t60_a) - proc_control_B.t64) - proc_control_B.t11
              * 0.02083209676345903) + -0.3561042181787869;
  Anqv[99] = (((proc_control_B.t5_o * 3.0762418461708879E-7 + in1[8] *
                3.6805220320211881E-5) - in1[9] * 5.5205827244154082E-5) + (in1
    [11] * 1.9707455092950659E-5 - in1[12] * 0.99732173963403625)) +
    (proc_control_B.t11 * 3.0762418461708879E-7 + 5.2585330703775874E-6);
  Anqv[100] = (((proc_control_B.t5_o * 3.1018428934817561E-6 - in1[8] *
                 1.771828414014215E-7) + in1[9] * 0.0012514964408717271) + (in1
    [11] * 0.94449992470847732 - in1[12] * 8.992901709737525E-7)) +
    (proc_control_B.t11 * 3.1018428934817561E-6 + 5.3022955444132579E-5);
  Anqv[101] = (((in1[11] * 0.0028202724800340711 + in1[12] *
                 0.00061034709456155121) + (proc_control_B.t5_o *
    -1.8142075755964659E-5 + in1[8] * 0.0001156895912281943)) + (in1[9] *
    -0.0078781068937827138 - proc_control_B.t11 * 1.8142075755964659E-5)) +
    -0.000310120953093413;
  Anqv[102] = (((in1[11] * -0.0012514964408717271 - in1[12] *
                 2.5191511327559042E-6) + (proc_control_B.t5_o *
    0.0041828385845637181 - in1[8] * 9.6246917791973632E-6)) +
               (proc_control_B.t11 * 0.0041828385845637181 + in1[9] *
                1.6865276442684169)) + 0.071501514266046451;
  Anqv[103] = (((in1[11] * -3.8828656232047592E-6 - in1[12] *
                 3.6805220320211881E-5) + (proc_control_B.t5_o *
    -0.000559547536668723 - in1[8] * 0.046369768623910637)) + (in1[9] *
    0.00021091988675539481 - proc_control_B.t11 * 0.000559547536668723)) +
    -0.0095649151567303078;
  Anqv[104] = proc_control_B.t17 - proc_control_B.t22;
  Anqv[105] = (-proc_control_B.t35 + -proc_control_B.t37) + 1.0;
  Anqv[106] = proc_control_B.t19 + proc_control_B.t20;
  Anqv[107] = 0.0;
  Anqv[108] = 0.0;
  Anqv[109] = 0.0;
  Anqv[110] = 0.0;
  proc_control_B.t11 = proc_control_B.t12 * in1[8];
  Anqv[111] = (((proc_control_B.t6_i * 3.0762418461708879E-7 - in1[7] *
                 7.211946028174652E-5) - in1[9] * 4.8904523698065773E-5) + (in1
    [10] * -8.361454958762487E-6 + in1[12] * 1.0026850258050679)) +
    (proc_control_B.t11 * 3.0762418461708879E-7 + 5.2585330703775874E-6);
  Anqv[112] = (((((proc_control_B.t6_i * -0.020779606287649719 +
                   proc_control_B.t56) + proc_control_B.t59_j) +
                 proc_control_B.t61_d) - proc_control_B.t66) -
               proc_control_B.t11 * 0.020779606287649719) + -0.3552069450880293;
  Anqv[113] = (((proc_control_B.t6_i * 6.977251326520494E-6 - in1[7] *
                 1.771828414014215E-7) + in1[9] * 0.0026915778663054) + (in1[10]
    * -0.94703250296186225 - in1[12] * 3.9979308404875958E-7)) +
    (proc_control_B.t11 * 6.977251326520494E-6 + 0.0001192692534447948);
  Anqv[114] = (((in1[10] * -0.0026915778663054 + in1[12] * 2.3383119863243342E-6)
                + (proc_control_B.t6_i * -0.004735451595736173 + in1[7] *
                   0.0001156895912281943)) + (in1[9] * -1.82678107880096 -
    proc_control_B.t11 * 0.004735451595736173)) + -0.080947890525404673;
  Anqv[115] = (((in1[10] * 0.001194388181942488 - in1[12] *
                 0.00053912141756599029) + (proc_control_B.t6_i *
    1.9545138098968222E-5 - in1[7] * 9.6246917791973632E-6)) +
               (proc_control_B.t11 * 1.9545138098968222E-5 + in1[9] *
                0.0075186132878328751)) + 0.00033410492476868751;
  Anqv[116] = (((in1[10] * 3.7056827818033371E-6 + in1[12] *
                 7.211946028174652E-5) + proc_control_B.t6_i *
                0.00028555774386371279) + (in1[7] * -0.046369768623910637 + in1
    [9] * 0.002419584892404522)) + (proc_control_B.t11 * 0.00028555774386371279
    + 0.0048813289549352618);
  Anqv[117] = proc_control_B.t18 + proc_control_B.t21;
  Anqv[118] = proc_control_B.t19 - proc_control_B.t20;
  Anqv[119] = (-proc_control_B.t35 + -proc_control_B.t36) + 1.0;
  Anqv[120] = 0.0;
  Anqv[121] = 0.0;
  Anqv[122] = 0.0;
  Anqv[123] = 0.0;
  proc_control_B.t11 = proc_control_B.t13 * in1[9];
  Anqv[124] = ((proc_control_B.t11 * 2.0042677157882111E-6 + in1[8] *
                -4.8904523698065773E-5) + 6.1860114684821339E-5) + ((in1[10] *
    -8.2924437253319364E-7 - in1[11] * 1.0588408804907721) + (proc_control_B.t7 *
    2.0042677157882111E-6 - in1[7] * 0.01181455270975019));
  Anqv[125] = (((in1[10] * 1.056014359205657 + in1[11] * 8.6889371188384056E-7)
                + (proc_control_B.t7 * 4.5083777802132416E-6 - in1[7] *
                   5.5205827244154082E-5)) + (proc_control_B.t11 *
    4.5083777802132416E-6 + in1[8] * -0.01276507759640369)) +
    0.00013914746235226059;
  Anqv[126] = (((((proc_control_B.t7 * -0.01269647983792513 +
                   proc_control_B.t58_n) + proc_control_B.t61_d) +
                 proc_control_B.t62_h) + proc_control_B.t63_i) -
               proc_control_B.t11 * 0.01269647983792513) + -0.391866661664356;
  Anqv[127] = (((in1[10] * 0.01276507759640369 - in1[11] * 5.12428356843901E-5)
                + (proc_control_B.t7 * 0.000645179893759118 - in1[7] *
                   0.0078781068937827138)) + (proc_control_B.t11 *
    0.000645179893759118 + in1[8] * -1.82678107880096)) + 0.0199129596839234;
  Anqv[128] = (((in1[10] * -5.2686676111398181E-5 + in1[11] *
                 0.01181455270975019) + (proc_control_B.t7 *
    -0.0002862986986107742 + in1[7] * 1.6865276442684169)) + (in1[8] *
    0.0075186132878328751 - proc_control_B.t11 * 0.0002862986986107742)) +
    -0.00883637958675229;
  Anqv[129] = (((in1[10] * -0.00076976116954851617 - in1[11] *
                 0.001580458755922332) + (proc_control_B.t7 *
    -8.8826411206548176E-7 + in1[7] * 0.00021091988675539481)) + (in1[8] *
    0.002419584892404522 - proc_control_B.t11 * 8.8826411206548176E-7)) +
    -2.7415559014366719E-5;
  Anqv[130] = 0.0;
  Anqv[131] = 0.0;
  Anqv[132] = 0.0;
  Anqv[133] = -proc_control_B.t39_j;
  Anqv[134] = proc_control_B.t42;
  Anqv[135] = proc_control_B.t41_j;
  Anqv[136] = -proc_control_B.t40_g;
  proc_control_B.t11 = in1[10] * proc_control_B.t8;
  Anqv[137] = (((in1[10] * -3.8387792037776772E-5 - in1[11] *
                 0.001666883141735279) + (in1[12] * -0.012459373644739849 -
    proc_control_B.t2 * 2.5895099583299988E-6)) + ((in1[8] *
    -8.361454958762487E-6 - in1[9] * 8.2924437253319364E-7) - proc_control_B.t11
    * 2.5895099583299988E-6)) + -5.1686825515568839E-5;
  Anqv[138] = (((in1[10] * 0.0031092639852605942 - in1[11] *
                 0.00073685477811853554) + (in1[12] * 7.0593490217135568E-6 -
    proc_control_B.t2 * 0.000675914885887129)) + (in1[8] * -1.880816492197691E-5
    + in1[9] * 1.056014359205657)) + (proc_control_B.t11 * -0.000675914885887129
    - 0.01349131508756744);
  Anqv[139] = (((in1[10] * 0.01323653524037665 + in1[11] * 3.254516699917723E-6)
                + (in1[12] * -0.00016431009062248719 + proc_control_B.t2 *
                   0.000142519897166366)) + (in1[8] * -0.94703250296186225 -
    in1[9] * 1.880816492197691E-5)) + (proc_control_B.t11 * 0.000142519897166366
    + 0.0028447085262747712);
  Anqv[140] = ((((in1[12] * 0.0010337362592453569 - proc_control_B.t2 *
                  0.096728634439823824) - proc_control_B.t62_h) +
                proc_control_B.t66) + (in1[10] * 2.9459976186536029E-5 - in1[11]
    * 0.0023143478099307371)) + (proc_control_B.t11 * -0.096728634439823824 -
    1.930711266263949);
  Anqv[141] = (((in1[10] * 0.004377222757514088 - in1[11] *
                 0.0002019061675601846) + (in1[12] * 0.77857309742658121 +
    proc_control_B.t2 * 0.00039811294558105519)) + (in1[8] *
    0.001194388181942488 - in1[9] * 5.2686676111398181E-5)) +
    (proc_control_B.t11 * 0.00039811294558105519 + 0.0079463661792625786);
  Anqv[142] = ((((in1[12] * 0.0002100625212176024 + proc_control_B.t2 *
                  0.00012811778338931329) + in1[8] * 3.7056827818033371E-6) +
                (in1[10] * -0.0049611737630270167 - in1[11] *
                 0.071643033330452965)) + (proc_control_B.t11 *
    0.00012811778338931329 + in1[9] * -0.00076976116954851617)) +
    0.0025572411854154339;
  Anqv[143] = 0.0;
  Anqv[144] = 0.0;
  Anqv[145] = 0.0;
  Anqv[146] = -proc_control_B.t40_g;
  Anqv[147] = -proc_control_B.t41_j;
  Anqv[148] = proc_control_B.t42;
  Anqv[149] = proc_control_B.t39_j;
  proc_control_B.t11 = in1[11] * proc_control_B.t9;
  Anqv[150] = ((((in1[12] * 1.084652012219342E-5 + proc_control_B.t3_m *
                  0.00035750757133023227) + in1[7] * 8.7612480428112471E-6) +
                (in1[10] * -0.001666883141735279 + in1[11] *
                 0.001564618000917013)) + (proc_control_B.t11 *
    0.00035750757133023227 + in1[9] * -1.0588408804907721)) +
    0.0083418433310387535;
  Anqv[151] = (((in1[10] * -0.00073685477811853554 - in1[11] *
                 5.327430934216595E-7) + (in1[12] * -0.012219391427097369 +
    proc_control_B.t3_m * 1.6705246238434379E-6)) + ((in1[7] *
    1.9707455092950659E-5 + in1[9] * 8.6889371188384056E-7) + proc_control_B.t11
    * 1.6705246238434379E-6)) + 3.8978907889680209E-5;
  Anqv[152] = (((in1[10] * 3.254516699917723E-6 + in1[11] * 0.01323264858496773)
                + (in1[12] * -0.000370280631189075 - proc_control_B.t3_m *
                   3.7870198228938393E-5)) + (in1[7] * 0.94449992470847732 +
    in1[9] * 8.7612480428112471E-6)) + (proc_control_B.t11 *
    -3.7870198228938393E-5 - 0.000883637958675229);
  Anqv[153] = (((in1[10] * -0.0023143478099307371 + in1[11] *
                 0.000474986479487347) + (in1[12] * -0.74868928704241333 +
    proc_control_B.t3_m * 0.00023839098537787741)) + (in1[7] *
    0.0028202724800340711 - in1[9] * 5.12428356843901E-5)) + (proc_control_B.t11
    * 0.00023839098537787741 + 0.0055624563254838061);
  Anqv[154] = ((((in1[12] * -0.0010338149937763181 - proc_control_B.t3_m *
                  0.051034213219608937) - proc_control_B.t63_i) +
                proc_control_B.t64) + (in1[10] * -0.0002019061675601846 - in1[11]
    * 1.83479515843041E-5)) + (proc_control_B.t11 * -0.051034213219608937 -
    1.190798308457542);
  Anqv[155] = ((((in1[12] * 0.0023151732654294191 - proc_control_B.t3_m *
                  6.3824216042422837E-6) - in1[7] * 3.8828656232047592E-6) +
                (in1[10] * -0.071643033330452965 + in1[11] *
                 0.0049611361134530609)) + (in1[9] * -0.001580458755922332 -
    proc_control_B.t11 * 6.3824216042422837E-6)) + -0.0001489231707656533;
  Anqv[156] = 0.0;
  Anqv[157] = 0.0;
  Anqv[158] = 0.0;
  Anqv[159] = -proc_control_B.t41_j;
  Anqv[160] = proc_control_B.t40_g;
  Anqv[161] = -proc_control_B.t39_j;
  Anqv[162] = proc_control_B.t42;
  proc_control_B.t11 = in1[12] * proc_control_B.t10;
  Anqv[163] = ((((in1[12] * 0.0015875478170822739 - proc_control_B.t4_f *
                  4.8781067299324573E-5) - in1[7] * 3.9649339350647009E-8) +
                (in1[10] * -0.012459373644739849 + in1[11] *
                 1.084652012219342E-5)) + (in1[8] * 1.0026850258050679 -
    proc_control_B.t11 * 4.8781067299324573E-5)) + -0.0023912287891825769;
  Anqv[164] = (((in1[10] * 7.0593490217135568E-6 - in1[11] *
                 0.012219391427097369) + (in1[12] * 0.00310220784225037 +
    proc_control_B.t4_f * 2.489477767016984E-5)) + (in1[7] *
    -0.99732173963403625 - in1[8] * 3.9649339350647009E-8)) +
    (proc_control_B.t11 * 2.489477767016984E-5 + 0.0012203322387338161);
  Anqv[165] = (((in1[12] * -2.5992468246472442E-6 - proc_control_B.t4_f *
                 1.1984515797708881E-7) - in1[7] * 8.992901709737525E-7) + (in1
    [10] * -0.00016431009062248719 - in1[11] * 0.000370280631189075)) + ((in1[8]
    * -3.9979308404875958E-7 - proc_control_B.t11 * 1.1984515797708881E-7) -
    5.8747626459357257E-6);
  Anqv[166] = (((in1[12] * -0.0004292180419550528 + proc_control_B.t4_f *
                 7.82515802737123E-5) + in1[7] * 0.00061034709456155121) + (in1
    [10] * 0.0010337362592453569 - in1[11] * 0.74868928704241333)) +
    ((proc_control_B.t11 * 7.82515802737123E-5 + in1[8] * 2.3383119863243342E-6)
     + 0.0038358617781231522);
  Anqv[167] = ((((in1[12] * -0.0043939282900391837 - proc_control_B.t4_f *
                  6.51007003632713E-6) - in1[7] * 2.5191511327559042E-6) + (in1
    [10] * 0.77857309742658121 - in1[11] * 0.0010338149937763181)) + (in1[8] *
    -0.00053912141756599029 - proc_control_B.t11 * 6.51007003632713E-6)) +
    -0.0003191210802121142;
  Anqv[168] = ((((proc_control_B.t4_f * -0.031364167106358663 -
                  proc_control_B.t59_j) + proc_control_B.t60_a) -
                proc_control_B.t11 * 0.031364167106358663) + ((in1[10] *
    0.0002100625212176024 + in1[11] * 0.0023151732654294191) + in1[12] *
    1.580332096620055E-7)) + -1.5374591718803261;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_co_AUV7QuatSimFcn_AMXO4i32(const real_T in1[13], const
  real_T in2[8], real_T out1[13])
{
  real_T out1_tmp;
  real_T out1_tmp_0;
  proc_control_B.t8_g = in1[4] * in1[4];
  proc_control_B.t9_c = in1[5] * in1[5];
  proc_control_B.t11_k = in1[4] * in1[5] * 2.0;
  proc_control_B.t12_tmp = in1[4] * in1[6];
  proc_control_B.t12_d = proc_control_B.t12_tmp * 2.0;
  proc_control_B.t13_tmp = in1[5] * in1[6];
  proc_control_B.t13_k = proc_control_B.t13_tmp * 2.0;
  proc_control_B.t14_tmp = in1[3] * in1[4];
  proc_control_B.t14 = proc_control_B.t14_tmp * 2.0;
  proc_control_B.t15_tmp = in1[3] * in1[5];
  proc_control_B.t15_p = proc_control_B.t15_tmp * 2.0;
  proc_control_B.t16_p = in1[3] * in1[6] * 2.0;
  proc_control_B.t25_m = in1[11] / 500.0;
  proc_control_B.t27_k = in1[10] / 1000.0;
  proc_control_B.t33_a = in1[12] * 0.009;
  proc_control_B.t45_f = in1[7] * 56.2448;
  proc_control_B.t53 = in1[8] * 56.3956;
  proc_control_B.t54 = in1[9] * 59.5495;
  proc_control_B.t17_c = proc_control_B.t8_g * 2.0;
  proc_control_B.t18_j = proc_control_B.t9_c * 2.0;
  proc_control_B.t19_k = in1[6] * in1[6] * 2.0;
  proc_control_B.t59_h = proc_control_B.t25_m + proc_control_B.t27_k;
  proc_control_B.t25_m += proc_control_B.t33_a;
  proc_control_B.t27_k += proc_control_B.t33_a;
  proc_control_B.t33_a = in1[11] * 0.39402 + proc_control_B.t45_f;
  proc_control_B.t64_d = in1[10] * 0.08756 + proc_control_B.t54;
  proc_control_B.t65_j = in1[12] * 0.04378 + proc_control_B.t53;
  proc_control_B.t67 = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 1.7294;
  proc_control_B.t45_f = in1[12] * 0.08756 + -proc_control_B.t45_f;
  proc_control_B.t54 = in1[11] * 0.04378 + -proc_control_B.t54;
  proc_control_B.t53 = in1[10] * 0.39402 + -proc_control_B.t53;
  proc_control_B.t69_n = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.9623;
  proc_control_B.t70 = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    3.2523;
  out1[0] = (((proc_control_B.t18_j + proc_control_B.t19_k) - 1.0) * -in1[7] +
             (proc_control_B.t12_d + proc_control_B.t15_p) * in1[9]) +
    (proc_control_B.t11_k - proc_control_B.t16_p) * in1[8];
  out1[1] = ((proc_control_B.t11_k + proc_control_B.t16_p) * in1[7] -
             ((proc_control_B.t17_c + proc_control_B.t19_k) - 1.0) * in1[8]) +
    (proc_control_B.t13_k - proc_control_B.t14) * in1[9];
  out1[2] = ((proc_control_B.t13_k + proc_control_B.t14) * in1[8] -
             ((proc_control_B.t17_c + proc_control_B.t18_j) - 1.0) * in1[9]) +
    (proc_control_B.t12_d - proc_control_B.t15_p) * in1[7];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_B.t11_k = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) * in1
    [10];
  proc_control_B.t12_d = in1[10] * proc_control_B.t25_m;
  proc_control_B.t13_k = in1[10] * proc_control_B.t64_d;
  proc_control_B.t14 = in1[10] * proc_control_B.t53;
  proc_control_B.t15_p = in1[10] * proc_control_B.t69_n;
  proc_control_B.t16_p = in1[10] * proc_control_B.t70;
  proc_control_B.t17_c = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) * in1
    [11];
  proc_control_B.t18_j = in1[11] * proc_control_B.t27_k;
  proc_control_B.t19_k = in1[11] * proc_control_B.t33_a;
  proc_control_B.out1_tmp = in1[11] * proc_control_B.t54;
  proc_control_B.out1_tmp_j = in1[11] * proc_control_B.t67;
  proc_control_B.t70 *= in1[11];
  proc_control_B.out1_tmp_l = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  proc_control_B.out1_tmp_p = in1[12] * proc_control_B.t59_h;
  proc_control_B.out1_tmp_po = in1[12] * proc_control_B.t45_f;
  proc_control_B.out1_tmp_ly = in1[12] * proc_control_B.t65_j;
  proc_control_B.t67 *= in1[12];
  proc_control_B.t69_n *= in1[12];
  proc_control_B.out1_tmp_ld = (std::abs(in1[7]) * 1.17 + 20.0) * in1[7];
  proc_control_B.t25_m *= in1[7];
  proc_control_B.t65_j *= in1[7];
  proc_control_B.t54 *= in1[7];
  out1_tmp = (std::abs(in1[8]) * 1.17 + 20.0) * in1[8];
  proc_control_B.t27_k *= in1[8];
  proc_control_B.t45_f *= in1[8];
  proc_control_B.t64_d *= in1[8];
  out1_tmp_0 = (std::abs(in1[9]) * 0.756 + 23.333333333333332) * in1[9];
  proc_control_B.t59_h *= in1[9];
  proc_control_B.t33_a *= in1[9];
  proc_control_B.t53 *= in1[9];
  out1[7] = ((((((((((((((((((((((((in2[0] * -0.0001437270800342623 + in2[1] *
    -0.00014420606190511319) + in2[2] * 0.00019106203022123869) + (in2[3] *
    2.2850322404196561E-5 - in2[4] * 0.00064004748139144052)) + (in2[5] *
    -0.00064697977539739777 + in2[6] * 0.00065256195255307707)) + (in2[7] *
    0.00063446530423575689 - proc_control_B.t8_g * 0.0031578330474472342)) +
    (in2[0] * 1.4142135623730951 * 0.00890273691779643 + proc_control_B.t9_c *
    -0.0031578330474472342)) + (in2[1] * 1.4142135623730951 *
    0.0089024739911429118 + in2[2] * 1.4142135623730951 * 0.00890273691779643))
    + (in2[3] * 1.4142135623730951 * 0.0090210789390863678 -
       proc_control_B.t12_tmp * 0.446279612603122)) + (proc_control_B.t13_tmp *
    0.00024221914396928331 + proc_control_B.t14_tmp * 0.00024221914396928331)) +
    (proc_control_B.t15_tmp * 0.446279612603122 - proc_control_B.t11_k *
     1.5506047654670649E-5)) + (proc_control_B.t12_d * -0.77951213359336435 -
    proc_control_B.t13_k * 2.6292665351887938E-7)) + (proc_control_B.t14 *
    -2.651147772206629E-6 - proc_control_B.t15_p * 0.00047824575783651541)) +
                        (proc_control_B.t17_c * 0.0035750757133023231 +
    proc_control_B.t16_p * -0.0035750757133023231)) + (proc_control_B.t18_j *
    1.151092889105654E-5 - proc_control_B.t19_k * 2.651147772206629E-6)) +
                      (proc_control_B.out1_tmp * 0.017805210908939339 +
                       proc_control_B.out1_tmp_j * 0.00047824575783651541)) +
                     (proc_control_B.t70 * -1.5506047654670649E-5 -
                      proc_control_B.out1_tmp_l * 0.00047824575783651541)) +
                    (proc_control_B.out1_tmp_p * 0.0001160672494672062 -
                     proc_control_B.out1_tmp_po * 2.6292665351887938E-7)) +
                   (proc_control_B.out1_tmp_ly * 0.017805210908939339 +
                    proc_control_B.t67 * 0.0035750757133023231)) +
                  (proc_control_B.t69_n * 1.5506047654670649E-5 -
                   proc_control_B.out1_tmp_ld * 0.017805210908939339)) +
                 (proc_control_B.t25_m * 0.0006788547663214811 -
                  proc_control_B.t65_j * 0.00047824575783651541)) + (out1_tmp *
    2.6292665351887938E-7 + proc_control_B.t54 * 0.0035750757133023231)) +
               (proc_control_B.t27_k * -0.1565168147283757 -
                proc_control_B.t45_f * 0.00047824575783651541)) + (out1_tmp_0 *
    2.651147772206629E-6 + proc_control_B.t64_d * -1.5506047654670649E-5)) +
             (proc_control_B.t59_h * 0.020937599278082641 + proc_control_B.t33_a
              * 0.0035750757133023231)) + (proc_control_B.t53 *
    -1.5506047654670649E-5 + 0.0015789165237236171);
  out1[8] = (((((((((((((((((((((((((in2[0] * 5.9258722303931477E-5 + in2[1] *
    0.0001111188064663891) + in2[2] * -0.0001115965075552979) + (in2[3] *
    2.5863772577036511E-5 - in2[4] * 0.00071746300208054158)) + (in2[5] *
    0.00071144911343470516 + in2[6] * 0.00074561291602257885)) + in2[7] *
    -0.00073959902737674255) + (proc_control_B.t8_g * -0.0071031949637203823 -
    proc_control_B.t9_c * 0.0071031949637203823)) + (in2[0] * 1.4142135623730951
    * -0.0088803050905274933 + in2[1] * 1.4142135623730951 *
    0.0088800421638739746)) + (in2[2] * 1.4142135623730951 *
    -0.0088803050905274933 + in2[3] * 1.4142135623730951 * 0.0088195136848327766))
    + (proc_control_B.t12_tmp * 0.0002372117866458812 - proc_control_B.t13_tmp *
       0.44996381418158943)) + (proc_control_B.t14_tmp * -0.44996381418158943 -
    proc_control_B.t15_tmp * 0.0002372117866458812)) + (proc_control_B.t11_k *
    -0.0040473945262702333 + proc_control_B.t12_d * 1.151092889105654E-5)) +
    (proc_control_B.t13_k * 0.017760347254401471 - proc_control_B.t14 *
     5.9634626722397381E-6)) + (proc_control_B.t15_p * 0.00024406644774676309 -
    proc_control_B.t16_p * 1.670524623843438E-5)) + (proc_control_B.t17_c *
    1.670524623843438E-5 - proc_control_B.t18_j * 0.7775480027976962)) +
                       (proc_control_B.t19_k * -5.9634626722397381E-6 -
                        proc_control_B.out1_tmp * 2.6292665351887938E-7)) +
                      (proc_control_B.out1_tmp_j * -0.00024406644774676309 -
                       proc_control_B.t70 * 0.0040473945262702333)) +
                     (proc_control_B.out1_tmp_l * 0.00024406644774676309 +
                      proc_control_B.out1_tmp_p * 0.00026108039579065569)) +
                    (proc_control_B.out1_tmp_po * 0.017760347254401471 -
                     proc_control_B.out1_tmp_ly * 2.6292665351887938E-7)) +
                   (proc_control_B.t67 * 1.670524623843438E-5 +
                    proc_control_B.t69_n * 0.0040473945262702333)) +
                  (proc_control_B.out1_tmp_ld * 2.6292665351887938E-7 +
                   proc_control_B.t25_m * 0.1771949323601108)) +
                 (proc_control_B.t65_j * 0.00024406644774676309 +
                  proc_control_B.t54 * 1.670524623843438E-5)) + (out1_tmp *
    -0.017760347254401471 - proc_control_B.t27_k * 0.000731355680318657)) +
               (proc_control_B.t45_f * 0.00024406644774676309 -
                proc_control_B.t64_d * 0.0040473945262702333)) + (out1_tmp_0 *
    5.9634626722397381E-6 - proc_control_B.t59_h * 0.01068522908235329)) +
             (proc_control_B.t33_a * 1.670524623843438E-5 - proc_control_B.t53 *
              0.0040473945262702333)) + 0.0035515974818601912;
  out1[9] = ((((((((((((((((((((((((in2[0] * 2.6122776886482448E-6 + in2[1] *
    -8.2515524680653645E-6) + in2[2] * 3.4347864205989959E-6) + (in2[3] *
    -7.84112891899092E-6 - in2[4] * 0.0165745904097681)) + (in2[5] *
    0.016710923123392282 - in2[6] * 0.017018151644229949)) + in2[7] *
    0.016881818930605769) + (proc_control_B.t8_g * 0.38399612418049789 +
    proc_control_B.t9_c * 0.38399612418049789)) + ((in2[0] * 1.4142135623730951 *
    1.656157450016555E-6 - in2[1] * 1.4142135623730951 * 4.3073052222231838E-6)
    + in2[2] * 1.4142135623730951 * 1.656157450016555E-6)) + (in2[3] *
    1.4142135623730951 * -4.0159169949847719E-6 + proc_control_B.t12_tmp *
    0.0043215762663743667)) + (proc_control_B.t13_tmp * 0.0097440679897671783 +
    proc_control_B.t14_tmp * 0.0097440679897671783)) + (proc_control_B.t11_k *
    0.00085341255788243134 + proc_control_B.t15_tmp * -0.0043215762663743667)) +
    (proc_control_B.t12_d * 0.0001160672494672062 - proc_control_B.t13_k *
     5.9634626722397381E-6)) + (proc_control_B.t14 * 0.01679428549990097 -
    proc_control_B.t15_p * 1.174952529187145E-6)) + (proc_control_B.t16_p *
    0.0003787019822893839 - proc_control_B.t17_c * 0.0003787019822893839)) +
                       (proc_control_B.t18_j * 0.00026108039579065569 +
                        proc_control_B.t19_k * 0.01679428549990097)) +
                      (proc_control_B.out1_tmp * -2.651147772206629E-6 +
                       proc_control_B.out1_tmp_j * 1.174952529187145E-6)) +
                     (proc_control_B.t70 * 0.00085341255788243134 -
                      proc_control_B.out1_tmp_l * 1.174952529187145E-6)) +
                    (proc_control_B.out1_tmp_p * -0.73525381918566446 -
                     proc_control_B.out1_tmp_po * 5.9634626722397381E-6)) +
                   (proc_control_B.out1_tmp_ly * -2.651147772206629E-6 -
                    proc_control_B.t67 * 0.0003787019822893839)) +
                  (proc_control_B.out1_tmp_ld * 2.651147772206629E-6 +
                   proc_control_B.t69_n * -0.00085341255788243134)) +
                 (proc_control_B.t25_m * -0.037362401784092843 -
                  proc_control_B.t65_j * 1.174952529187145E-6)) + (out1_tmp *
    5.9634626722397381E-6 + proc_control_B.t54 * -0.0003787019822893839)) +
               (proc_control_B.t27_k * 0.01657957278462923 -
                proc_control_B.t45_f * 1.174952529187145E-6)) +
              (proc_control_B.t64_d * 0.00085341255788243134 - out1_tmp_0 *
               0.01679428549990097)) + (proc_control_B.t59_h *
              5.1439421727813221E-5 - proc_control_B.t33_a *
              0.0003787019822893839)) + (proc_control_B.t53 *
    0.00085341255788243134 - 0.191998062090249);
  out1[10] = (((((((((((((((((((((((((in2[0] * -0.0034040236632883881 + in2[1] *
    0.0039692440382595364) + in2[2] * -0.00394107171053934) + (in2[3] *
    0.0037012624874090969 - in2[4] * 0.1026732889244388)) + (in2[5] *
    0.1018150813770785 + in2[6] * 0.106701735379428)) + in2[7] *
    -0.1058435278320676) + (proc_control_B.t8_g * -1.016516094138556 -
    proc_control_B.t9_c * 1.016516094138556)) + (in2[0] * 1.4142135623730951 *
    -0.002015944239307781 + in2[1] * 1.4142135623730951 * 0.0020314502869624518))
    + (in2[2] * 1.4142135623730951 * -0.002015944239307781 + in2[3] *
       1.4142135623730951 * 0.0018411915427675441)) + (proc_control_B.t12_tmp *
    -0.025871946299473779 - proc_control_B.t13_tmp * 6.6132984045987788)) +
    (proc_control_B.t14_tmp * -6.6132984045987788 + proc_control_B.t15_tmp *
     0.025871946299473779)) + (proc_control_B.t11_k * -0.57921337987918464 -
    proc_control_B.t12_d * 0.0006788547663214811)) + (proc_control_B.t13_k *
    0.0040473945262702333 - proc_control_B.t14 * 0.00085341255788243134)) +
    (proc_control_B.t15_p * 0.00076717235562463032 - proc_control_B.t16_p *
     0.0023839098537787738)) + (proc_control_B.t17_c * 0.0023839098537787738 -
    proc_control_B.t18_j * 0.1771949323601108)) + (proc_control_B.t19_k *
    -0.00085341255788243134 + proc_control_B.out1_tmp * 1.5506047654670649E-5))
                       + (proc_control_B.out1_tmp_j * -0.00076717235562463032 -
    proc_control_B.t70 * 0.57921337987918464)) + (proc_control_B.out1_tmp_l *
    0.00076717235562463032 + proc_control_B.out1_tmp_p * 0.037362401784092843))
                     + (proc_control_B.out1_tmp_po * 0.0040473945262702333 +
                        proc_control_B.out1_tmp_ly * 1.5506047654670649E-5)) +
                    (proc_control_B.t67 * 0.0023839098537787738 +
                     proc_control_B.t69_n * 0.57921337987918464)) +
                   (proc_control_B.out1_tmp_ld * -1.5506047654670649E-5 +
                    proc_control_B.t25_m * 25.3579617711107)) +
                  (proc_control_B.t65_j * 0.00076717235562463032 +
                   proc_control_B.t54 * 0.0023839098537787738)) + (out1_tmp *
    -0.0040473945262702333 - proc_control_B.t27_k * 0.10436757339843469)) +
                (proc_control_B.t45_f * 0.00076717235562463032 -
                 proc_control_B.t64_d * 0.57921337987918464)) + (out1_tmp_0 *
    0.00085341255788243134 - proc_control_B.t59_h * 0.03358680572924632)) +
              (proc_control_B.t33_a * 0.0023839098537787738 - proc_control_B.t53
               * 0.57921337987918464)) + 0.508258047069278;
  out1[11] = ((((((((((((((((((((((((((in2[0] * -0.0032548305558953859 + in2[1] *
    -0.0032852630357875952) + in2[2] * -0.0032101513252876229) + (in2[3] *
    -0.0032629685510195692 + in2[4] * 0.091396875634783256)) + in2[5] *
    0.092326291955808951) + in2[6] * -0.093184499503169316) + in2[7] *
    -0.090538668087422891) + (proc_control_B.t8_g * 0.4510792070303305 +
    proc_control_B.t9_c * 0.4510792070303305)) + (in2[0] * 1.4142135623730951 *
    -0.001779185233531944 - in2[1] * 1.4142135623730951 * 0.0017958904797703791))
    + (in2[2] * 1.4142135623730951 * -0.001779185233531944 - in2[3] *
       1.4142135623730951 * 0.001780062074191858)) + (proc_control_B.t12_tmp *
    5.826458617096355 + proc_control_B.t13_tmp * 0.027272006623379409)) +
    (proc_control_B.t14_tmp * 0.027272006623379409 - proc_control_B.t15_tmp *
     5.826458617096355)) + (proc_control_B.t11_k * 0.0023839098537787738 +
    proc_control_B.t12_d * 0.1565168147283757)) + (proc_control_B.t13_k *
    -1.670524623843438E-5 + proc_control_B.t14 * 0.0003787019822893839)) +
    (proc_control_B.t15_p * -6.3824216042422834E-5 + proc_control_B.t16_p *
     0.51034213219608937)) + (proc_control_B.t17_c * -0.51034213219608937 +
    proc_control_B.t18_j * 0.000731355680318657)) + (proc_control_B.t19_k *
    0.0003787019822893839 - proc_control_B.out1_tmp * 0.0035750757133023231)) +
                       (proc_control_B.out1_tmp_j * 6.3824216042422834E-5 +
                        proc_control_B.t70 * 0.0023839098537787738)) +
                      (proc_control_B.out1_tmp_l * -6.3824216042422834E-5 -
                       proc_control_B.out1_tmp_p * 0.01657957278462923)) +
                     (proc_control_B.out1_tmp_po * -1.670524623843438E-5 -
                      proc_control_B.out1_tmp_ly * 0.0035750757133023231)) +
                    (proc_control_B.t67 * -0.51034213219608937 -
                     proc_control_B.t69_n * 0.0023839098537787738)) +
                   (proc_control_B.out1_tmp_ld * 0.0035750757133023231 -
                    proc_control_B.t25_m * 0.10436757339843469)) +
                  (proc_control_B.t65_j * -6.3824216042422834E-5 -
                   proc_control_B.t54 * 0.51034213219608937)) + (out1_tmp *
    1.670524623843438E-5 + proc_control_B.t27_k * 22.3427785475448)) +
                (proc_control_B.t45_f * -6.3824216042422834E-5 +
                 proc_control_B.t64_d * 0.0023839098537787738)) + (out1_tmp_0 *
    -0.0003787019822893839 + proc_control_B.t59_h * 0.0027942241783372721)) +
              (proc_control_B.t33_a * -0.51034213219608937 + proc_control_B.t53 *
               0.0023839098537787738)) + -0.22553960351516519;
  out1[12] = ((((((((((((((((((((((((in2[0] * -0.1069708680532775 + in2[1] *
    -0.10741549168572111) + in2[2] * 0.1082843975810609) + (in2[3] *
    -5.2884297987169583E-6 + in2[4] * 0.00014680626144359071)) + (in2[5] *
    -0.00012382954366831189 - in2[6] * 0.00015235250435654841)) + (in2[7] *
    0.00012937578658126929 + proc_control_B.t8_g * 0.0013995085316427609)) +
    (in2[0] * 1.4142135623730951 * 0.0003611561027916392 + proc_control_B.t9_c *
    0.0013995085316427609)) + (in2[1] * 1.4142135623730951 *
    0.00011708965504487611 + in2[2] * 1.4142135623730951 * 0.0003611561027916392))
    + (in2[3] * 1.4142135623730951 * 0.076375064580309057 -
       proc_control_B.t12_tmp * 0.538414009042602)) + (proc_control_B.t13_tmp *
    0.27831525078194952 + proc_control_B.t14_tmp * 0.27831525078194952)) +
    (proc_control_B.t11_k * 0.00076717235562463032 + proc_control_B.t15_tmp *
     0.538414009042602)) + (proc_control_B.t12_d * -0.020937599278082641 -
    proc_control_B.t13_k * 0.00024406644774676309)) + (proc_control_B.t14 *
    1.174952529187145E-6 - proc_control_B.t15_p * 0.30749183437606531)) +
    (proc_control_B.t16_p * 6.3824216042422834E-5 - proc_control_B.t17_c *
     6.3824216042422834E-5)) + (proc_control_B.t18_j * 0.01068522908235329 +
    proc_control_B.t19_k * 1.174952529187145E-6)) + (proc_control_B.out1_tmp *
    0.00047824575783651541 + proc_control_B.out1_tmp_j * 0.30749183437606531)) +
                      (proc_control_B.t70 * 0.00076717235562463032 -
                       proc_control_B.out1_tmp_l * 0.30749183437606531)) +
                     (proc_control_B.out1_tmp_p * -5.1439421727813221E-5 -
                      proc_control_B.out1_tmp_po * 0.00024406644774676309)) +
                    (proc_control_B.out1_tmp_ly * 0.00047824575783651541 -
                     proc_control_B.t67 * 6.3824216042422834E-5)) +
                   (proc_control_B.t69_n * -0.00076717235562463032 -
                    proc_control_B.out1_tmp_ld * 0.00047824575783651541)) +
                  (proc_control_B.t25_m * -0.03358680572924632 -
                   proc_control_B.t65_j * 0.30749183437606531)) + (out1_tmp *
    0.00024406644774676309 + proc_control_B.t54 * -6.3824216042422834E-5)) +
                (proc_control_B.t27_k * 0.0027942241783372721 -
                 proc_control_B.t45_f * 0.30749183437606531)) +
               (proc_control_B.t64_d * 0.00076717235562463032 - out1_tmp_0 *
                1.174952529187145E-6)) + (proc_control_B.t59_h *
    13.461992508984141 - proc_control_B.t33_a * 6.3824216042422834E-5)) +
    (proc_control_B.t53 * 0.00076717235562463032 - 0.00069975426582138066);
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_co_stateEvolution_7mRMr5Nb(const real_T X[143], const
  real_T U[88], real_T c[130], real_T J[19110])
{
  static const real_T val[104]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00124466442113531, -0.0012499389174730887, 4.9544380158868982E-7,
    -0.00062549993475053648, -0.00057709784431302037, -0.010646011619457576, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012445793395042929, 0.0012669394869061891,
    -1.434300193061385E-6, 0.00068421485853685515, -0.0005825035708815591,
    -0.010724990190754305, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00127814333216086, -0.0012670244404590116, 5.77694674783765E-7,
    -0.00067920473947563175, -0.000572629921252244, 0.010879514943976265, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012780582505298431, 0.0012498539639202661,
    -1.3520493198662991E-6, 0.00063051005381176009, -0.0005780356478207677,
    0.010800536372679536, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.4004748139144052E-5, -7.1746300208054163E-5, -0.0016574590409768103,
    -0.010267328892443882, 0.0091396875634783253, 1.4680626144359072E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6.4697977539739782E-5, 7.1144911343470519E-5,
    0.0016710923123392282, 0.010181508137707851, 0.0092326291955808961,
    -1.238295436683119E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    6.52561952553077E-5, 7.4561291602257891E-5, -0.0017018151644229949,
    0.0106701735379428, -0.0093184499503169323, -1.5235250435654842E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 6.34465304235757E-5, -7.395990273767426E-5,
    0.0016881818930605771, -0.010584352783206762, -0.0090538668087422891,
    1.293757865812693E-5 };

  static const int8_T b[1280]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };

  int32_T Ak1_tmp;
  int32_T Jx_tmp;
  int32_T k;
  std::memset(&proc_control_B.Jx_c[0], 0, 16900U * sizeof(real_T));
  std::memset(&proc_control_B.Jmv[0], 0, 10400U * sizeof(real_T));
  std::memset(&c[0], 0, 130U * sizeof(real_T));
  for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
    proc_control_B.ic_d[Jx_tmp] = static_cast<real_T>(Jx_tmp) + 1.0;
  }

  for (Jx_tmp = 0; Jx_tmp < 11; Jx_tmp++) {
    for (int32_T i{0}; i < 8; i++) {
      proc_control_B.b_U_c[i + (Jx_tmp << 3)] = U[11 * i + Jx_tmp];
    }

    for (int32_T i{0}; i < 13; i++) {
      proc_control_B.b_X_e[i + 13 * Jx_tmp] = X[11 * i + Jx_tmp];
    }
  }

  for (int32_T i{0}; i < 10; i++) {
    AUV7QuatJacobianMatrix_nTvSBp_d(&proc_control_B.b_X_e[13 * i],
      proc_control_B.Ak);
    Ak1_tmp = (i + 1) * 13;
    AUV7QuatJacobianMatrix_nTvSBp_d(&proc_control_B.b_X_e[Ak1_tmp],
      proc_control_B.Ak1);
    Jx_tmp = i << 3;
    proc_co_AUV7QuatSimFcn_AMXO4i32(&proc_control_B.b_X_e[13 * i],
      &proc_control_B.b_U_c[Jx_tmp], proc_control_B.dv13);
    proc_co_AUV7QuatSimFcn_AMXO4i32(&proc_control_B.b_X_e[Ak1_tmp],
      &proc_control_B.b_U_c[Jx_tmp], proc_control_B.dv14);
    for (k = 0; k < 13; k++) {
      int32_T c_tmp;
      c_tmp = static_cast<int32_T>(proc_control_B.ic_d[k]);
      c[c_tmp - 1] = (proc_control_B.b_X_e[13 * i + k] + (proc_control_B.dv13[k]
        + proc_control_B.dv14[k]) * 0.05) - proc_control_B.b_X_e[Ak1_tmp + k];
      if (i + 1 > 1) {
        for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
          proc_control_B.Jx_c[((static_cast<int32_T>(proc_control_B.ic_d[Jx_tmp])
                                + 130 * k) + 1690 * (i - 1)) - 1] =
            proc_control_B.Ak[13 * k + Jx_tmp] * 0.05;
        }

        proc_control_B.Jx_c[((static_cast<int32_T>(proc_control_B.ic_d[k]) + 130
                              * k) + 1690 * (i - 1)) - 1] = proc_control_B.Jx_c
          [((130 * k + c_tmp) + (i - 1) * 1690) - 1] + 1.0;
      }
    }

    for (k = 0; k < 13; k++) {
      for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
        proc_control_B.Jx_c[((static_cast<int32_T>(proc_control_B.ic_d[Jx_tmp])
                              + 130 * k) + 1690 * i) - 1] = proc_control_B.Ak1
          [13 * k + Jx_tmp] * 0.05;
      }

      Jx_tmp = ((130 * k + static_cast<int32_T>(proc_control_B.ic_d[k])) + 1690 *
                i) - 1;
      proc_control_B.Jx_c[Jx_tmp]--;
    }

    for (k = 0; k < 8; k++) {
      for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
        proc_control_B.Jmv[((static_cast<int32_T>(proc_control_B.ic_d[Jx_tmp]) +
                             130 * k) + 1040 * i) - 1] = val[13 * k + Jx_tmp];
      }
    }

    for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
      proc_control_B.ic_d[Jx_tmp] += 13.0;
    }
  }

  for (Jx_tmp = 0; Jx_tmp < 130; Jx_tmp++) {
    for (int32_T i{0}; i < 16; i++) {
      k = (Jx_tmp << 4) + i;
      proc_control_B.Jmv_f[k] = 0.0;
      for (Ak1_tmp = 0; Ak1_tmp < 80; Ak1_tmp++) {
        proc_control_B.Jmv_f[k] += proc_control_B.Jmv[130 * Ak1_tmp + Jx_tmp] *
          static_cast<real_T>(b[80 * i + Ak1_tmp]);
      }
    }

    for (int32_T i{0}; i < 130; i++) {
      J[i + 147 * Jx_tmp] = proc_control_B.Jx_c[130 * i + Jx_tmp];
    }

    std::memcpy(&J[Jx_tmp * 147 + 130], &proc_control_B.Jmv_f[Jx_tmp << 4],
                sizeof(real_T) << 4U);
    J[147 * Jx_tmp + 146] = 0.0;
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
boolean_T proc_control::proc_control_any(const boolean_T x[26])
{
  int32_T k;
  boolean_T exitg1;
  boolean_T y;
  y = false;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k <= 25)) {
    if (x[k]) {
      y = true;
      exitg1 = true;
    } else {
      k++;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_cont_znlmpc_reformJacobian(const real_T Jx_data[], const
  int32_T Jx_size[3], const real_T Jmv_data[], const real_T Je_data[], const
  int32_T *Je_size, real_T Jc_data[], int32_T Jc_size[2])
{
  if (Jx_size[0] == 0) {
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    int32_T varargin_1_size_idx_1_tmp;
    proc_control_B.Jx_o[0] = static_cast<int16_T>(Jx_size[0]);
    proc_control_B.Jx_o[1] = 130;
    varargin_1_size_idx_1_tmp = static_cast<int16_T>(Jx_size[0]);
    for (proc_control_B.i3 = 0; proc_control_B.i3 < varargin_1_size_idx_1_tmp;
         proc_control_B.i3++) {
      for (proc_control_B.i2 = 0; proc_control_B.i2 < 130; proc_control_B.i2++)
      {
        proc_control_B.varargin_1_data[proc_control_B.i2 + 130 *
          proc_control_B.i3] = Jx_data[proc_control_B.Jx_o[0] *
          proc_control_B.i2 + proc_control_B.i3];
      }
    }

    proc_control_B.Jx_e[0] = Jx_size[0];
    proc_control_B.Jx_e[1] = 80;
    proc_control_mtimes(Jmv_data, proc_control_B.Jx_e, proc_control_B.tmp_data_c,
                        proc_control_B.tmp_size);
    varargin_1_size_idx_1_tmp = proc_control_B.tmp_size[0];
    for (proc_control_B.i3 = 0; proc_control_B.i3 < varargin_1_size_idx_1_tmp;
         proc_control_B.i3++) {
      for (proc_control_B.i2 = 0; proc_control_B.i2 < 16; proc_control_B.i2++) {
        proc_control_B.varargin_2_data[proc_control_B.i2 + (proc_control_B.i3 <<
          4)] = proc_control_B.tmp_data_c[proc_control_B.tmp_size[0] *
          proc_control_B.i2 + proc_control_B.i3];
      }
    }

    proc_control_B.Jx_o[0] = 130;
    proc_control_B.Jx_o[1] = static_cast<int16_T>(Jx_size[0]);
    if (proc_control_B.tmp_size[0] != 0) {
      proc_control_B.varargin_2[0] = 16;
    } else {
      proc_control_B.varargin_2[0] = 0;
    }

    proc_control_B.varargin_2[1] = static_cast<int16_T>(Jx_size[0]);
    if (*Je_size - 1 >= 0) {
      std::memcpy(&proc_control_B.Je_data[0], &Je_data[0], *Je_size * sizeof
                  (real_T));
    }

    proc_control_B.Je_d[0] = (*Je_size != 0);
    proc_control_B.Je_d[1] = static_cast<int16_T>(Jx_size[0]);
    Jc_size[0] = (proc_control_B.varargin_2[0] + proc_control_B.Je_d[0]) + 130;
    Jc_size[1] = static_cast<int16_T>(Jx_size[0]);
    varargin_1_size_idx_1_tmp = static_cast<int16_T>(Jx_size[0]);
    for (proc_control_B.i3 = 0; proc_control_B.i3 < varargin_1_size_idx_1_tmp;
         proc_control_B.i3++) {
      for (proc_control_B.i2 = 0; proc_control_B.i2 < 130; proc_control_B.i2++)
      {
        Jc_data[proc_control_B.i2 + Jc_size[0] * proc_control_B.i3] =
          proc_control_B.varargin_1_data[proc_control_B.Jx_o[0] *
          proc_control_B.i3 + proc_control_B.i2];
      }
    }

    varargin_1_size_idx_1_tmp = static_cast<int16_T>(Jx_size[0]);
    proc_control_B.loop_ub_c = proc_control_B.varargin_2[0];
    for (proc_control_B.i3 = 0; proc_control_B.i3 < varargin_1_size_idx_1_tmp;
         proc_control_B.i3++) {
      for (proc_control_B.i2 = 0; proc_control_B.i2 < proc_control_B.loop_ub_c;
           proc_control_B.i2++) {
        Jc_data[(proc_control_B.i2 + Jc_size[0] * proc_control_B.i3) + 130] =
          proc_control_B.varargin_2_data[proc_control_B.varargin_2[0] *
          proc_control_B.i3 + proc_control_B.i2];
      }
    }

    varargin_1_size_idx_1_tmp = static_cast<int16_T>(Jx_size[0]);
    if (proc_control_B.Je_d[0] - 1 >= 0) {
      for (proc_control_B.i3 = 0; proc_control_B.i3 < varargin_1_size_idx_1_tmp;
           proc_control_B.i3++) {
        Jc_data[(proc_control_B.varargin_2[0] + Jc_size[0] * proc_control_B.i3)
          + 130] = proc_control_B.Je_data[proc_control_B.Je_d[0] *
          proc_control_B.i3];
      }
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_outputBounds(const real_T runtimedata_OutputMin
  [130], const real_T runtimedata_OutputMax[130], const real_T X[143], real_T e,
  real_T c_data[], int32_T c_size[2], real_T Jc_data[], int32_T Jc_size[2])
{
  boolean_T exitg1;
  boolean_T y;
  for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 < 130; proc_control_B.i_b0++)
  {
    proc_control_B.bv2[proc_control_B.i_b0] = std::isinf
      (runtimedata_OutputMin[proc_control_B.i_b0]);
  }

  all_H4RNf0h2(proc_control_B.bv2, proc_control_B.x_f);
  y = true;
  proc_control_B.d_k_m = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.d_k_m < 13)) {
    if (!proc_control_B.x_f[proc_control_B.d_k_m]) {
      y = false;
      exitg1 = true;
    } else {
      proc_control_B.d_k_m++;
    }
  }

  if (y) {
    for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 < 130; proc_control_B.i_b0
         ++) {
      proc_control_B.bv2[proc_control_B.i_b0] = std::isinf
        (runtimedata_OutputMax[proc_control_B.i_b0]);
    }

    all_H4RNf0h2(proc_control_B.bv2, proc_control_B.x_f);
    proc_control_B.d_k_m = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.d_k_m < 13)) {
      if (!proc_control_B.x_f[proc_control_B.d_k_m]) {
        y = false;
        exitg1 = true;
      } else {
        proc_control_B.d_k_m++;
      }
    }
  }

  if (y) {
    c_size[0] = 0;
    c_size[1] = 0;
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 < 260; proc_control_B.i_b0
         ++) {
      proc_control_B.b_c_c[proc_control_B.i_b0] = 0.0;
      proc_control_B.icf_n[proc_control_B.i_b0] = true;
    }

    std::memset(&proc_control_B.Jx[0], 0, 33800U * sizeof(real_T));
    std::memset(&proc_control_B.Je[0], 0, 260U * sizeof(int8_T));
    for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 < 13; proc_control_B.i_b0
         ++) {
      proc_control_B.ic_l[proc_control_B.i_b0] = static_cast<real_T>
        (proc_control_B.i_b0) + 1.0;
    }

    for (proc_control_B.d_k_m = 0; proc_control_B.d_k_m < 10;
         proc_control_B.d_k_m++) {
      for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 < 13;
           proc_control_B.i_b0++) {
        proc_control_B.runtimedata_OutputMin_d = runtimedata_OutputMin[10 *
          proc_control_B.i_b0 + proc_control_B.d_k_m];
        proc_control_B.icf_n[static_cast<int32_T>
          (proc_control_B.ic_l[proc_control_B.i_b0]) - 1] = ((!std::isinf
          (proc_control_B.runtimedata_OutputMin_d)) && (!std::isnan
          (proc_control_B.runtimedata_OutputMin_d)));
      }

      for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 < 13;
           proc_control_B.i_b0++) {
        proc_control_B.runtimedata_OutputMin_d =
          proc_control_B.ic_l[proc_control_B.i_b0];
        proc_control_B.runtimedata_OutputMax_m = runtimedata_OutputMax[10 *
          proc_control_B.i_b0 + proc_control_B.d_k_m];
        proc_control_B.icf_n[static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_d + 13.0) - 1] = ((!std::isinf
          (proc_control_B.runtimedata_OutputMax_m)) && (!std::isnan
          (proc_control_B.runtimedata_OutputMax_m)));
        proc_control_B.ic_c[proc_control_B.i_b0] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_d) - 1;
        proc_control_B.ic_c[proc_control_B.i_b0 + 13] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin_d + 13.0) - 1;
      }

      for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 < 26;
           proc_control_B.i_b0++) {
        proc_control_B.icf_f[proc_control_B.i_b0] =
          proc_control_B.icf_n[proc_control_B.ic_c[proc_control_B.i_b0]];
      }

      if (proc_control_any(proc_control_B.icf_f)) {
        std::memset(&proc_control_B.Ck[0], 0, 169U * sizeof(int8_T));
        for (proc_control_B.c_k_n = 0; proc_control_B.c_k_n < 13;
             proc_control_B.c_k_n++) {
          proc_control_B.Ck[proc_control_B.c_k_n + 13 * proc_control_B.c_k_n] =
            1;
          proc_control_B.b_c_c[static_cast<int32_T>
            (proc_control_B.ic_l[proc_control_B.c_k_n]) - 1] =
            (runtimedata_OutputMin[10 * proc_control_B.c_k_n +
             proc_control_B.d_k_m] - e) - X[(11 * proc_control_B.c_k_n +
            proc_control_B.d_k_m) + 1];
        }

        for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 < 13;
             proc_control_B.i_b0++) {
          proc_control_B.b_c_c[static_cast<int32_T>
            (proc_control_B.ic_l[proc_control_B.i_b0] + 13.0) - 1] = (X[(11 *
            proc_control_B.i_b0 + proc_control_B.d_k_m) + 1] -
            runtimedata_OutputMax[10 * proc_control_B.i_b0 +
            proc_control_B.d_k_m]) - e;
        }

        for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 < 169;
             proc_control_B.i_b0++) {
          proc_control_B.val[proc_control_B.i_b0] = static_cast<int8_T>
            (-proc_control_B.Ck[proc_control_B.i_b0]);
        }

        for (proc_control_B.c_k_n = 0; proc_control_B.c_k_n < 13;
             proc_control_B.c_k_n++) {
          for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 < 13;
               proc_control_B.i_b0++) {
            proc_control_B.Jx[((static_cast<int32_T>
                                (proc_control_B.ic_l[proc_control_B.i_b0]) + 260
                                * proc_control_B.c_k_n) + 3380 *
                               proc_control_B.d_k_m) - 1] = proc_control_B.val
              [13 * proc_control_B.c_k_n + proc_control_B.i_b0];
          }
        }

        for (proc_control_B.c_k_n = 0; proc_control_B.c_k_n < 13;
             proc_control_B.c_k_n++) {
          for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 < 13;
               proc_control_B.i_b0++) {
            proc_control_B.Jx[((static_cast<int32_T>
                                (proc_control_B.ic_l[proc_control_B.i_b0] + 13.0)
                                + 260 * proc_control_B.c_k_n) + 3380 *
                               proc_control_B.d_k_m) - 1] = proc_control_B.Ck[13
              * proc_control_B.c_k_n + proc_control_B.i_b0];
          }

          proc_control_B.Je[static_cast<int32_T>
            (proc_control_B.ic_l[proc_control_B.c_k_n]) - 1] = -1;
        }

        for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 < 13;
             proc_control_B.i_b0++) {
          proc_control_B.Je[static_cast<int32_T>
            (proc_control_B.ic_l[proc_control_B.i_b0] + 13.0) - 1] = -1;
        }
      }

      for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 < 13;
           proc_control_B.i_b0++) {
        proc_control_B.ic_l[proc_control_B.i_b0] += 26.0;
      }
    }

    proc_control_B.d_k_m = 0;
    for (proc_control_B.c_k_n = 0; proc_control_B.c_k_n < 260;
         proc_control_B.c_k_n++) {
      if (proc_control_B.icf_n[proc_control_B.c_k_n]) {
        proc_control_B.d_k_m++;
      }
    }

    proc_control_B.b_size_idx_0 = proc_control_B.d_k_m;
    proc_control_B.d_k_m = 0;
    for (proc_control_B.c_k_n = 0; proc_control_B.c_k_n < 260;
         proc_control_B.c_k_n++) {
      if (proc_control_B.icf_n[proc_control_B.c_k_n]) {
        proc_control_B.b_data_k[proc_control_B.d_k_m] = static_cast<int16_T>
          (proc_control_B.c_k_n + 1);
        proc_control_B.d_k_m++;
      }
    }

    for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 <
         proc_control_B.b_size_idx_0; proc_control_B.i_b0++) {
      proc_control_B.b_c_data_p[proc_control_B.i_b0] =
        proc_control_B.b_c_c[proc_control_B.b_data_k[proc_control_B.i_b0] - 1];
    }

    c_size[0] = proc_control_B.b_size_idx_0;
    c_size[1] = 1;
    if (proc_control_B.b_size_idx_0 - 1 >= 0) {
      std::memcpy(&c_data[0], &proc_control_B.b_c_data_p[0],
                  proc_control_B.b_size_idx_0 * sizeof(real_T));
    }

    proc_control_B.d_k_m = 0;
    for (proc_control_B.c_k_n = 0; proc_control_B.c_k_n < 260;
         proc_control_B.c_k_n++) {
      if (proc_control_B.icf_n[proc_control_B.c_k_n]) {
        proc_control_B.d_k_m++;
      }
    }

    proc_control_B.b_size_idx_0 = proc_control_B.d_k_m;
    proc_control_B.d_k_m = 0;
    for (proc_control_B.c_k_n = 0; proc_control_B.c_k_n < 260;
         proc_control_B.c_k_n++) {
      if (proc_control_B.icf_n[proc_control_B.c_k_n]) {
        proc_control_B.d_data[proc_control_B.d_k_m] = static_cast<int16_T>
          (proc_control_B.c_k_n + 1);
        proc_control_B.d_k_m++;
      }
    }

    proc_control_B.Jx_size[0] = proc_control_B.b_size_idx_0;
    proc_control_B.Jx_size[1] = 13;
    proc_control_B.Jx_size[2] = 10;
    for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 < 10; proc_control_B.i_b0
         ++) {
      for (proc_control_B.d_k_m = 0; proc_control_B.d_k_m < 13;
           proc_control_B.d_k_m++) {
        for (proc_control_B.c_k_n = 0; proc_control_B.c_k_n <
             proc_control_B.b_size_idx_0; proc_control_B.c_k_n++) {
          proc_control_B.Jx_data[(proc_control_B.c_k_n +
            proc_control_B.b_size_idx_0 * proc_control_B.d_k_m) +
            proc_control_B.b_size_idx_0 * 13 * proc_control_B.i_b0] =
            proc_control_B.Jx[((260 * proc_control_B.d_k_m +
                                proc_control_B.d_data[proc_control_B.c_k_n]) +
                               3380 * proc_control_B.i_b0) - 1];
        }
      }

      for (proc_control_B.d_k_m = 0; proc_control_B.d_k_m < 8;
           proc_control_B.d_k_m++) {
        for (proc_control_B.c_k_n = 0; proc_control_B.c_k_n <
             proc_control_B.b_size_idx_0; proc_control_B.c_k_n++) {
          proc_control_B.tmp_data[(proc_control_B.c_k_n +
            proc_control_B.b_size_idx_0 * proc_control_B.d_k_m) +
            (proc_control_B.b_size_idx_0 << 3) * proc_control_B.i_b0] = 0.0;
        }
      }
    }

    proc_control_B.b_c_size = proc_control_B.b_size_idx_0;
    for (proc_control_B.i_b0 = 0; proc_control_B.i_b0 <
         proc_control_B.b_size_idx_0; proc_control_B.i_b0++) {
      proc_control_B.b_c_data_p[proc_control_B.i_b0] =
        proc_control_B.Je[proc_control_B.d_data[proc_control_B.i_b0] - 1];
    }

    proc_cont_znlmpc_reformJacobian(proc_control_B.Jx_data,
      proc_control_B.Jx_size, proc_control_B.tmp_data, proc_control_B.b_c_data_p,
      &proc_control_B.b_c_size, Jc_data, Jc_size);
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_co_eML_blk_kernel_anonFcn2(const real_T runtimedata_x[13],
  const real_T runtimedata_OutputMin[130], const real_T runtimedata_OutputMax
  [130], const real_T z[147], real_T varargout_1_data[], int32_T
  varargout_1_size[2], real_T varargout_2[130], real_T varargout_3_data[],
  int32_T varargout_3_size[2], real_T varargout_4[19110])
{
  int16_T sizes;
  uint8_T sizes_idx_1;
  proc_control_znlmpc_getXUe(z, runtimedata_x, proc_control_B.X_b,
    proc_control_B.U_i, &proc_control_B.e_g);
  proc_co_stateEvolution_7mRMr5Nb(proc_control_B.X_b, proc_control_B.U_i,
    varargout_2, varargout_4);
  proc_control_outputBounds(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_B.X_b, proc_control_B.e_g, proc_control_B.varargin_1_data_c,
    proc_control_B.varargin_1_size_j, proc_control_B.b_varargin_1_data,
    proc_control_B.b_varargin_1_size);
  sizes_idx_1 = ((proc_control_B.varargin_1_size_j[0] != 0) &&
                 (proc_control_B.varargin_1_size_j[1] != 0));
  if (sizes_idx_1 == 0) {
    proc_control_B.sizes_idx_0 = proc_control_B.varargin_1_size_j[0];
  } else if ((proc_control_B.varargin_1_size_j[0] != 0) &&
             (proc_control_B.varargin_1_size_j[1] != 0)) {
    proc_control_B.sizes_idx_0 = proc_control_B.varargin_1_size_j[0];
  } else {
    proc_control_B.sizes_idx_0 = 0;
  }

  varargout_1_size[0] = proc_control_B.sizes_idx_0;
  varargout_1_size[1] = sizes_idx_1;
  if ((sizes_idx_1 - 1 >= 0) && (proc_control_B.sizes_idx_0 - 1 >= 0)) {
    std::memcpy(&varargout_1_data[0], &proc_control_B.varargin_1_data_c[0],
                proc_control_B.sizes_idx_0 * sizeof(real_T));
  }

  if ((proc_control_B.b_varargin_1_size[0] != 0) &&
      (proc_control_B.b_varargin_1_size[1] != 0)) {
    sizes_idx_1 = static_cast<uint8_T>(proc_control_B.b_varargin_1_size[0]);
  } else {
    sizes_idx_1 = 0U;
  }

  varargout_3_size[0] = sizes_idx_1;
  if (sizes_idx_1 == 0) {
    varargout_3_size[1] = proc_control_B.b_varargin_1_size[1];
    sizes = static_cast<int16_T>(proc_control_B.b_varargin_1_size[1]);
  } else if ((proc_control_B.b_varargin_1_size[0] != 0) &&
             (proc_control_B.b_varargin_1_size[1] != 0)) {
    varargout_3_size[1] = proc_control_B.b_varargin_1_size[1];
    sizes = static_cast<int16_T>(proc_control_B.b_varargin_1_size[1]);
  } else {
    varargout_3_size[1] = 0;
    sizes = 0;
  }

  proc_control_B.sizes_idx_0 = sizes_idx_1 * sizes;
  if (proc_control_B.sizes_idx_0 - 1 >= 0) {
    std::memcpy(&varargout_3_data[0], &proc_control_B.b_varargin_1_data[0],
                proc_control_B.sizes_idx_0 * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_factoryConstruct(int32_T nVarMax, int32_T
  mConstrMax, int32_T mIneq, int32_T mNonlinIneq,
  s_UjlJWoQEHmSUKFcPTad7eC_proc_T *obj)
{
  obj->nVarMax = nVarMax;
  obj->mNonlinIneq = mNonlinIneq;
  obj->mNonlinEq = 130;
  obj->mIneq = mIneq;
  obj->mEq = 130;
  obj->iNonIneq0 = (mIneq - mNonlinIneq) + 1;
  obj->iNonEq0 = 1;
  obj->sqpFval = 0.0;
  obj->sqpFval_old = 0.0;
  obj->cIneq.size = mIneq;
  obj->cIneq_old.size = mIneq;
  obj->grad.size = nVarMax;
  obj->grad_old.size = nVarMax;
  obj->FunctionEvaluations = 0;
  obj->sqpIterations = 0;
  obj->sqpExitFlag = 0;
  obj->lambdasqp.size = mConstrMax;
  if (mConstrMax - 1 >= 0) {
    std::memset(&obj->lambdasqp.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->lambdaStopTest.size = mConstrMax;
  obj->lambdaStopTestPrev.size = mConstrMax;
  obj->steplength = 1.0;
  obj->delta_x.size = nVarMax;
  if (nVarMax - 1 >= 0) {
    std::memset(&obj->delta_x.data[0], 0, nVarMax * sizeof(real_T));
  }

  obj->socDirection.size = nVarMax;
  obj->workingset_old.size = mConstrMax;
  if (mNonlinIneq > 0) {
    obj->JacCineqTrans_old.size[0] = nVarMax;
    obj->JacCineqTrans_old.size[1] = mNonlinIneq;
  } else {
    obj->JacCineqTrans_old.size[0] = 0;
    obj->JacCineqTrans_old.size[1] = 0;
  }

  obj->JacCeqTrans_old.size[0] = nVarMax;
  obj->JacCeqTrans_old.size[1] = 130;
  obj->gradLag.size = nVarMax;
  obj->delta_gradLag.size = nVarMax;
  obj->xstar.size = nVarMax;
  obj->fstar = 0.0;
  obj->firstorderopt = 0.0;
  obj->lambda.size = mConstrMax;
  if (mConstrMax - 1 >= 0) {
    std::memset(&obj->lambda.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->state = 0;
  obj->maxConstr = 0.0;
  obj->iterations = 0;
  obj->searchDir.size = nVarMax;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_cont_factoryConstruct_lnz4(int32_T MaxVars, int32_T
  *obj_grad_size, int32_T *obj_Hx_size, boolean_T *obj_hasLinear, int32_T
  *obj_nvar, int32_T *obj_maxVar, real_T *obj_beta, real_T *obj_rho, int32_T
  *obj_objtype, int32_T *obj_prev_objtype, int32_T *obj_prev_nvar, boolean_T
  *obj_prev_hasLinear, real_T *obj_gammaScalar)
{
  *obj_grad_size = MaxVars;
  *obj_Hx_size = MaxVars - 1;
  *obj_hasLinear = false;
  *obj_nvar = 0;
  *obj_maxVar = MaxVars;
  *obj_beta = 0.0;
  *obj_rho = 0.0;
  *obj_objtype = 3;
  *obj_prev_objtype = 3;
  *obj_prev_nvar = 0;
  *obj_prev_hasLinear = false;
  *obj_gammaScalar = 0.0;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_con_factoryConstruct_lnz42(int32_T mIneqMax, int32_T
  nVarMax, int32_T mConstrMax, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj)
{
  obj->mConstr = 0;
  obj->mConstrOrig = 0;
  obj->mConstrMax = mConstrMax;
  obj->nVar = 147;
  obj->nVarOrig = 147;
  obj->nVarMax = nVarMax;
  obj->ldA = nVarMax;
  obj->Aineq.size = mIneqMax * nVarMax;
  obj->bineq.size = mIneqMax;
  obj->Aeq.size = 130 * nVarMax;
  obj->lb.size = nVarMax;
  obj->ub.size = nVarMax;
  obj->indexLB.size = nVarMax;
  obj->indexUB.size = nVarMax;
  obj->indexFixed.size = nVarMax;
  obj->mEqRemoved = 0;
  obj->ATwset.size = nVarMax * mConstrMax;
  obj->bwset.size = mConstrMax;
  obj->nActiveConstr = 0;
  obj->maxConstrWorkspace.size = mConstrMax;
  for (int32_T i{0}; i < 5; i++) {
    obj->sizes[i] = 0;
    obj->sizesNormal[i] = 0;
    obj->sizesPhaseOne[i] = 0;
    obj->sizesRegularized[i] = 0;
    obj->sizesRegPhaseOne[i] = 0;
  }

  for (int32_T i{0}; i < 6; i++) {
    obj->isActiveIdx[i] = 0;
    obj->isActiveIdxNormal[i] = 0;
    obj->isActiveIdxPhaseOne[i] = 0;
    obj->isActiveIdxRegularized[i] = 0;
    obj->isActiveIdxRegPhaseOne[i] = 0;
  }

  obj->isActiveConstr.size = mConstrMax;
  obj->Wid.size = mConstrMax;
  obj->Wlocalidx.size = mConstrMax;
  for (int32_T i{0}; i < 5; i++) {
    obj->nWConstr[i] = 0;
  }

  obj->probType = 3;
  obj->SLACK0 = 1.0E-5;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_loadProblem(s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj,
  int32_T mIneq, int32_T mLinIneq, const real_T Aineq_data[], int32_T mLB,
  int32_T mUB, int32_T mFixed, int32_T mConstrMax)
{
  int32_T b_idx_col;
  int32_T k;
  b_idx_col = mIneq + mLB;
  k = ((b_idx_col + mUB) + mFixed) + 130;
  obj->mConstr = k;
  obj->mConstrOrig = k;
  obj->mConstrMax = mConstrMax;
  obj->sizes[0] = mFixed;
  obj->sizes[1] = 130;
  obj->sizes[2] = mIneq;
  obj->sizes[3] = mLB;
  obj->sizes[4] = mUB;
  for (k = 0; k < 5; k++) {
    obj->sizesNormal[k] = obj->sizes[k];
  }

  obj->sizesPhaseOne[0] = mFixed;
  obj->sizesPhaseOne[1] = 130;
  obj->sizesPhaseOne[2] = mIneq;
  obj->sizesPhaseOne[3] = mLB + 1;
  obj->sizesPhaseOne[4] = mUB;
  obj->sizesRegularized[0] = mFixed;
  obj->sizesRegularized[1] = 130;
  obj->sizesRegularized[2] = mIneq;
  obj->sizesRegularized[3] = b_idx_col + 260;
  obj->sizesRegularized[4] = mUB;
  obj->sizesRegPhaseOne[0] = mFixed;
  obj->sizesRegPhaseOne[1] = 130;
  obj->sizesRegPhaseOne[2] = mIneq;
  obj->sizesRegPhaseOne[3] = b_idx_col + 261;
  obj->sizesRegPhaseOne[4] = mUB;
  obj->isActiveIdxNormal[0] = 1;
  obj->isActiveIdxNormal[1] = mFixed;
  obj->isActiveIdxNormal[2] = 130;
  obj->isActiveIdxNormal[3] = mIneq;
  obj->isActiveIdxNormal[4] = mLB;
  obj->isActiveIdxNormal[5] = mUB;
  for (k = 0; k < 6; k++) {
    obj->isActiveIdxRegPhaseOne[k] = obj->isActiveIdxNormal[k];
  }

  for (k = 0; k < 5; k++) {
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  for (k = 0; k < 6; k++) {
    obj->isActiveIdx[k] = obj->isActiveIdxRegPhaseOne[k];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = mLB + 1;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (k = 0; k < 5; k++) {
    obj->isActiveIdxNormal[k + 1] += obj->isActiveIdxNormal[k];
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  for (k = 0; k < 6; k++) {
    obj->isActiveIdxPhaseOne[k] = obj->isActiveIdxRegPhaseOne[k];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = b_idx_col + 260;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (k = 0; k < 5; k++) {
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  for (k = 0; k < 6; k++) {
    obj->isActiveIdxRegularized[k] = obj->isActiveIdxRegPhaseOne[k];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = b_idx_col + 261;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (k = 0; k < 5; k++) {
    obj->isActiveIdxRegPhaseOne[k + 1] += obj->isActiveIdxRegPhaseOne[k];
  }

  if (mIneq > 0) {
    for (b_idx_col = 0; b_idx_col < mLinIneq; b_idx_col++) {
      for (k = 0; k < 147; k++) {
        obj->Aineq.data[k + obj->ldA * b_idx_col] = Aineq_data[mLinIneq * k +
          b_idx_col];
      }
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
int32_T proc_control::proc_contr_checkVectorNonFinite(int32_T N, const real_T
  vec_data[], int32_T iv0)
{
  int32_T idx_current;
  int32_T idx_end;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = iv0 - 2;
  idx_end = (iv0 + N) - 1;
  while (allFinite && (idx_current + 2 <= idx_end)) {
    real_T allFinite_tmp;
    allFinite_tmp = vec_data[idx_current + 1];
    allFinite = ((!std::isinf(allFinite_tmp)) && (!std::isnan(allFinite_tmp)));
    idx_current++;
  }

  if (!allFinite) {
    if (std::isnan(vec_data[idx_current])) {
      status = -3;
    } else if (vec_data[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::computeObjectiveAndUserGradient(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T x[147], real_T
  grad_workspace_data[], real_T *fval, int32_T *status)
{
  static const int8_T b[1280]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T c[169]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  int32_T obj_objfun_workspace_runtimed_7;
  proc_control_znlmpc_getXUe(x, obj_objfun_workspace_runtimedat,
    proc_control_B.X_a, proc_control_B.U_oc, &proc_control_B.e_h);
  std::memset(&proc_control_B.gfX[0], 0, 130U * sizeof(real_T));
  std::memset(&proc_control_B.gfU[0], 0, 80U * sizeof(real_T));
  proc_control_B.fs_o = 0.0;
  for (int32_T i_0{0}; i_0 < 13; i_0++) {
    proc_control_B.ix[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (int32_T i_0{0}; i_0 < 8; i_0++) {
    proc_control_B.iu[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (int32_T i_0{0}; i_0 < 11; i_0++) {
    for (obj_objfun_workspace_runtimed_7 = 0; obj_objfun_workspace_runtimed_7 <
         13; obj_objfun_workspace_runtimed_7++) {
      proc_control_B.b_X_g[obj_objfun_workspace_runtimed_7 + 13 * i_0] =
        proc_control_B.X_a[11 * obj_objfun_workspace_runtimed_7 + i_0];
    }

    for (obj_objfun_workspace_runtimed_7 = 0; obj_objfun_workspace_runtimed_7 <
         8; obj_objfun_workspace_runtimed_7++) {
      proc_control_B.b_U_m[obj_objfun_workspace_runtimed_7 + (i_0 << 3)] =
        proc_control_B.U_oc[11 * obj_objfun_workspace_runtimed_7 + i_0];
    }
  }

  for (int32_T i{0}; i < 10; i++) {
    proc_control_B.wtYerr_c = 0.0;
    for (int32_T i_0{0}; i_0 < 13; i_0++) {
      obj_objfun_workspace_runtimed_7 = 10 * i_0 + i;
      proc_control_B.obj_objfun_workspace_runtimed_a =
        obj_objfun_workspace_runtimed_2[obj_objfun_workspace_runtimed_7];
      proc_control_B.wtYerr_lu = (proc_control_B.b_X_g[(i + 1) * 13 + i_0] -
        obj_objfun_workspace_runtimed_1[obj_objfun_workspace_runtimed_7]) *
        proc_control_B.obj_objfun_workspace_runtimed_a;
      proc_control_B.wtYerr_c += proc_control_B.wtYerr_lu *
        proc_control_B.wtYerr_lu;
      proc_control_B.obj_objfun_workspace_runtimedat[i_0] =
        proc_control_B.obj_objfun_workspace_runtimed_a *
        proc_control_B.wtYerr_lu;
    }

    proc_control_B.fs_o += proc_control_B.wtYerr_c;
    for (int32_T i_0{0}; i_0 < 13; i_0++) {
      proc_control_B.wtYerr_c = 0.0;
      for (obj_objfun_workspace_runtimed_7 = 0; obj_objfun_workspace_runtimed_7 <
           13; obj_objfun_workspace_runtimed_7++) {
        proc_control_B.wtYerr_c += static_cast<real_T>(c[13 *
          obj_objfun_workspace_runtimed_7 + i_0]) *
          proc_control_B.obj_objfun_workspace_runtimedat[obj_objfun_workspace_runtimed_7];
      }

      proc_control_B.gfX_f[i_0] = proc_control_B.gfX[static_cast<int32_T>
        (proc_control_B.ix[i_0]) - 1] + proc_control_B.wtYerr_c;
    }

    for (int32_T i_0{0}; i_0 < 13; i_0++) {
      proc_control_B.gfX[static_cast<int32_T>(proc_control_B.ix[i_0]) - 1] =
        proc_control_B.gfX_f[i_0];
    }

    for (int32_T i_0{0}; i_0 < 13; i_0++) {
      proc_control_B.ix[i_0] += 13.0;
    }

    std::memcpy(&proc_control_B.umvk_p[0], &proc_control_B.b_U_m[i << 3], sizeof
                (real_T) << 3U);
    if (i + 1 == 1) {
      for (int32_T i_0{0}; i_0 < 8; i_0++) {
        proc_control_B.duk_o[i_0] = proc_control_B.umvk_p[i_0] -
          obj_objfun_workspace_runtimed_0[i_0];
      }
    } else {
      for (int32_T i_0{0}; i_0 < 8; i_0++) {
        proc_control_B.duk_o[i_0] = proc_control_B.umvk_p[i_0] -
          proc_control_B.b_U_m[((i - 1) << 3) + i_0];
      }
    }

    for (int32_T i_0{0}; i_0 < 8; i_0++) {
      obj_objfun_workspace_runtimed_7 = 10 * i_0 + i;
      proc_control_B.obj_objfun_workspace_runtimed_a =
        obj_objfun_workspace_runtimed_3[obj_objfun_workspace_runtimed_7];
      proc_control_B.wtYerr_c = (proc_control_B.umvk_p[i_0] -
        obj_objfun_workspace_runtimed_5[obj_objfun_workspace_runtimed_7]) *
        proc_control_B.obj_objfun_workspace_runtimed_a;
      proc_control_B.gfU_l[i_0] = proc_control_B.gfU[static_cast<int32_T>
        (proc_control_B.iu[i_0]) - 1] +
        proc_control_B.obj_objfun_workspace_runtimed_a * proc_control_B.wtYerr_c;
      proc_control_B.umvk_p[i_0] = proc_control_B.wtYerr_c;
    }

    proc_control_B.wtYerr_c = 0.0;
    proc_control_B.obj_objfun_workspace_runtimed_a = 0.0;
    for (int32_T i_0{0}; i_0 < 8; i_0++) {
      real_T duk;
      real_T obj_objfun_workspace_runtimed_6;
      proc_control_B.wtYerr_lu = proc_control_B.umvk_p[i_0];
      obj_objfun_workspace_runtimed_6 = obj_objfun_workspace_runtimed_4[10 * i_0
        + i];
      proc_control_B.gfU[static_cast<int32_T>(proc_control_B.iu[i_0]) - 1] =
        proc_control_B.gfU_l[i_0];
      duk = obj_objfun_workspace_runtimed_6 * proc_control_B.duk_o[i_0];
      proc_control_B.wtYerr_c += proc_control_B.wtYerr_lu *
        proc_control_B.wtYerr_lu;
      proc_control_B.obj_objfun_workspace_runtimed_a += duk * duk;
      proc_control_B.umvk_p[i_0] = obj_objfun_workspace_runtimed_6 * duk;
      proc_control_B.duk_o[i_0] = duk;
    }

    proc_control_B.fs_o = (proc_control_B.fs_o + proc_control_B.wtYerr_c) +
      proc_control_B.obj_objfun_workspace_runtimed_a;
    for (int32_T i_0{0}; i_0 < 8; i_0++) {
      proc_control_B.gfU_l[i_0] = proc_control_B.gfU[static_cast<int32_T>
        (proc_control_B.iu[i_0]) - 1] + proc_control_B.umvk_p[i_0];
    }

    for (int32_T i_0{0}; i_0 < 8; i_0++) {
      proc_control_B.gfU[static_cast<int32_T>(proc_control_B.iu[i_0]) - 1] =
        proc_control_B.gfU_l[i_0];
    }

    if (i + 1 > 1) {
      for (int32_T i_0{0}; i_0 < 8; i_0++) {
        proc_control_B.gfU_tmp[i_0] = static_cast<int32_T>(proc_control_B.iu[i_0]
          - 8.0);
      }

      for (int32_T i_0{0}; i_0 < 8; i_0++) {
        proc_control_B.gfU_l[i_0] =
          proc_control_B.gfU[proc_control_B.gfU_tmp[i_0] - 1] -
          proc_control_B.umvk_p[i_0];
      }

      for (int32_T i_0{0}; i_0 < 8; i_0++) {
        proc_control_B.gfU[proc_control_B.gfU_tmp[i_0] - 1] =
          proc_control_B.gfU_l[i_0];
      }
    }

    for (int32_T i_0{0}; i_0 < 8; i_0++) {
      proc_control_B.iu[i_0] += 8.0;
    }
  }

  *fval = 100000.0 * proc_control_B.e_h * proc_control_B.e_h +
    proc_control_B.fs_o;
  for (int32_T i_0{0}; i_0 < 16; i_0++) {
    proc_control_B.wtYerr_c = 0.0;
    obj_objfun_workspace_runtimed_7 = 0;
    for (int32_T i{0}; i < 80; i++) {
      proc_control_B.wtYerr_c += static_cast<real_T>
        (b[obj_objfun_workspace_runtimed_7 + i_0]) * (2.0 * proc_control_B.gfU[i]);
      obj_objfun_workspace_runtimed_7 += 16;
    }

    proc_control_B.b_g[i_0] = proc_control_B.wtYerr_c;
  }

  for (int32_T i_0{0}; i_0 < 130; i_0++) {
    proc_control_B.b_x[i_0] = 2.0 * proc_control_B.gfX[i_0];
  }

  std::memcpy(&proc_control_B.b_x[130], &proc_control_B.b_g[0], sizeof(real_T) <<
              4U);
  proc_control_B.b_x[146] = 200000.0 * proc_control_B.e_h;
  std::memcpy(&grad_workspace_data[0], &proc_control_B.b_x[0], 147U * sizeof
              (real_T));
  if (std::isinf(*fval) || std::isnan(*fval)) {
    if (std::isnan(*fval)) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    *status = proc_contr_checkVectorNonFinite(147, grad_workspace_data, 1);
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
int32_T proc_control::proc_contr_checkMatrixNonFinite(int32_T ncols, const
  real_T mat_data[], int32_T col0, int32_T ldm)
{
  int32_T col;
  int32_T col_end;
  int32_T idx_mat;
  int32_T row;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  row = -1;
  col = col0;
  col_end = (col0 + ncols) - 1;
  while (allFinite && (col <= col_end)) {
    row = -1;
    while (allFinite && (row + 2 <= 147)) {
      idx_mat = ((col - 1) * ldm + row) + 1;
      allFinite = ((!std::isinf(mat_data[idx_mat])) && (!std::isnan
        (mat_data[idx_mat])));
      row++;
    }

    col++;
  }

  if (!allFinite) {
    idx_mat = (col - 2) * ldm + row;
    if (std::isnan(mat_data[idx_mat])) {
      status = -3;
    } else if (mat_data[idx_mat] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S210>/NLMPC'
int32_T proc_control::computeConstraintsAndUserJacobi(const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[147],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130],
  real_T JacIneqTrans_workspace_data[], int32_T iJI_col, int32_T ldJI, real_T
  JacEqTrans_workspace_data[], int32_T ldJE)
{
  int32_T status;
  if (obj_mCineq > 0) {
    proc_co_eML_blk_kernel_anonFcn2(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_B.a__3_data, proc_control_B.a__3_size, proc_control_B.b_x_e,
      proc_control_B.a__4_data, proc_control_B.a__4_size,
      proc_control_B.JacEqTrans_tmp);
    proc_control_B.b_k = 0;
    while (proc_control_B.b_k <= obj_mCineq - 1) {
      Cineq_workspace_data[(ineq0 + proc_control_B.b_k) - 1] =
        proc_control_B.a__3_data[proc_control_B.b_k];
      proc_control_B.b_k++;
    }

    std::memcpy(&Ceq_workspace[0], &proc_control_B.b_x_e[0], 130U * sizeof
                (real_T));
    proc_control_B.b_k = 0;
    while (proc_control_B.b_k <= proc_control_B.a__4_size[0] - 1) {
      proc_control_B.c_idx_col = 0;
      while (proc_control_B.c_idx_col <= proc_control_B.a__4_size[1] - 1) {
        JacIneqTrans_workspace_data[proc_control_B.b_k + ldJI * ((iJI_col +
          proc_control_B.c_idx_col) - 1)] =
          proc_control_B.a__4_data[proc_control_B.a__4_size[0] *
          proc_control_B.c_idx_col + proc_control_B.b_k];
        proc_control_B.c_idx_col++;
      }

      proc_control_B.b_k++;
    }

    for (proc_control_B.b_k = 0; proc_control_B.b_k < 147; proc_control_B.b_k++)
    {
      for (proc_control_B.c_idx_col = 0; proc_control_B.c_idx_col < 130;
           proc_control_B.c_idx_col++) {
        JacEqTrans_workspace_data[proc_control_B.b_k + ldJE *
          proc_control_B.c_idx_col] = proc_control_B.JacEqTrans_tmp[147 *
          proc_control_B.c_idx_col + proc_control_B.b_k];
      }
    }
  } else {
    proc_co_eML_blk_kernel_anonFcn2(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_B.a__3_data, proc_control_B.a__3_size, proc_control_B.b_x_e,
      proc_control_B.a__4_data, proc_control_B.a__4_size,
      proc_control_B.JacEqTrans_tmp);
    std::memcpy(&Ceq_workspace[0], &proc_control_B.b_x_e[0], 130U * sizeof
                (real_T));
    for (proc_control_B.b_k = 0; proc_control_B.b_k < 147; proc_control_B.b_k++)
    {
      for (proc_control_B.c_idx_col = 0; proc_control_B.c_idx_col < 130;
           proc_control_B.c_idx_col++) {
        JacEqTrans_workspace_data[proc_control_B.b_k + ldJE *
          proc_control_B.c_idx_col] = proc_control_B.JacEqTrans_tmp[147 *
          proc_control_B.c_idx_col + proc_control_B.b_k];
      }
    }
  }

  status = proc_contr_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
    ineq0);
  if (status == 1) {
    status = checkVectorNonFinite_2JllBqp7(Ceq_workspace);
    if (status == 1) {
      status = proc_contr_checkMatrixNonFinite(obj_mCineq,
        JacIneqTrans_workspace_data, iJI_col, ldJI);
      if (status == 1) {
        status = proc_contr_checkMatrixNonFinite(130, JacEqTrans_workspace_data,
          1, ldJE);
      }
    }
  }

  return status;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::evalObjAndConstrAndDerivatives(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[147],
  real_T grad_workspace_data[], real_T Cineq_workspace_data[], int32_T ineq0,
  real_T Ceq_workspace[130], real_T JacIneqTrans_workspace_data[], int32_T
  iJI_col, int32_T ldJI, real_T JacEqTrans_workspace_data[], int32_T ldJE,
  real_T *fval, int32_T *status)
{
  computeObjectiveAndUserGradient(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x,
    grad_workspace_data, fval, status);
  if (*status == 1) {
    *status = computeConstraintsAndUserJacobi(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1,
      obj_mCineq, x, Cineq_workspace_data, ineq0, Ceq_workspace,
      JacIneqTrans_workspace_data, iJI_col, ldJI, JacEqTrans_workspace_data,
      ldJE);
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_c_updateWorkingSetForNewQP(const real_T xk[147],
  s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet, int32_T mIneq, const real_T
  cIneq_data[], const real_T cEq[130], int32_T mLB, const real_T lb[147],
  int32_T mUB, int32_T mFixed)
{
  int32_T iEq0;
  int32_T iw0;
  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (int32_T b_idx{0}; b_idx < 130; b_idx++) {
    WorkingSet->beq[b_idx] = -cEq[b_idx];
    WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
    std::memcpy(&WorkingSet->ATwset.data[iw0], &WorkingSet->Aeq.data[iEq0], 147U
                * sizeof(real_T));
    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (int32_T b_idx{0}; b_idx < mIneq; b_idx++) {
    WorkingSet->bineq.data[b_idx] = -cIneq_data[b_idx];
  }

  for (int32_T b_idx{0}; b_idx < mLB; b_idx++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[b_idx] - 1] = -lb
      [WorkingSet->indexLB.data[b_idx] - 1] + xk[WorkingSet->indexLB.data[b_idx]
      - 1];
  }

  for (int32_T b_idx{0}; b_idx < mUB; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[b_idx] - 1];
  }

  for (int32_T b_idx{0}; b_idx < mFixed; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[b_idx] - 1];
    WorkingSet->bwset.data[b_idx] = (rtInf) - xk[WorkingSet->
      indexFixed.data[b_idx] - 1];
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_co_modifyOverheadPhaseOne_
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj)
{
  for (int32_T idx{0}; idx < obj->sizes[0]; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * idx) - 1] = 0.0;
  }

  for (int32_T idx{0}; idx < 130; idx++) {
    int32_T idxEq;
    idxEq = (obj->ldA * idx + obj->nVar) - 1;
    obj->Aeq.data[idxEq] = 0.0;
    obj->ATwset.data[idxEq + obj->ldA * (obj->isActiveIdx[1] - 1)] = 0.0;
  }

  for (int32_T idx{0}; idx < obj->sizes[2]; idx++) {
    obj->Aineq.data[(obj->nVar + obj->ldA * idx) - 1] = -1.0;
  }

  obj->indexLB.data[obj->sizes[3] - 1] = obj->nVar;
  obj->lb.data[obj->nVar - 1] = 1.0E-5;
  for (int32_T idx{obj->isActiveIdx[2]}; idx <= obj->nActiveConstr; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * (idx - 1)) - 1] = -1.0;
  }

  if (obj->nWConstr[4] > 0) {
    for (int32_T idx{0}; idx <= obj->sizesNormal[4]; idx++) {
      obj->isActiveConstr.data[(obj->isActiveIdx[4] + idx) - 1] = false;
    }
  }

  obj->isActiveConstr.data[obj->isActiveIdx[4] - 2] = false;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_setProblemType(s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *obj, int32_T PROBLEM_TYPE)
{
  switch (PROBLEM_TYPE) {
   case 3:
    obj->nVar = 147;
    obj->mConstr = obj->mConstrOrig;
    if (obj->nWConstr[4] > 0) {
      for (int32_T mIneq{-1}; mIneq < obj->sizesNormal[4] - 1; mIneq++) {
        obj->isActiveConstr.data[obj->isActiveIdxNormal[4] + mIneq] =
          obj->isActiveConstr.data[obj->isActiveIdx[4] + mIneq];
      }
    }

    for (int32_T d_idx_row{0}; d_idx_row < 5; d_idx_row++) {
      obj->sizes[d_idx_row] = obj->sizesNormal[d_idx_row];
    }

    for (int32_T d_idx_row{0}; d_idx_row < 6; d_idx_row++) {
      obj->isActiveIdx[d_idx_row] = obj->isActiveIdxNormal[d_idx_row];
    }
    break;

   case 1:
    obj->nVar = 148;
    obj->mConstr = obj->mConstrOrig + 1;
    for (int32_T d_idx_row{0}; d_idx_row < 5; d_idx_row++) {
      obj->sizes[d_idx_row] = obj->sizesPhaseOne[d_idx_row];
    }

    for (int32_T d_idx_row{0}; d_idx_row < 6; d_idx_row++) {
      obj->isActiveIdx[d_idx_row] = obj->isActiveIdxPhaseOne[d_idx_row];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    break;

   case 2:
    {
      int32_T d_idx_row;
      obj->nVar = obj->nVarMax - 1;
      obj->mConstr = obj->mConstrMax - 1;
      for (d_idx_row = 0; d_idx_row < 5; d_idx_row++) {
        obj->sizes[d_idx_row] = obj->sizesRegularized[d_idx_row];
      }

      if (obj->probType != 4) {
        int32_T c_idx;
        int32_T colOffsetATw;
        int32_T colOffsetAeq;
        int32_T mIneq;
        mIneq = obj->sizes[2] + 148;
        for (c_idx = 0; c_idx < obj->sizes[0]; c_idx++) {
          colOffsetATw = obj->ldA * c_idx;
          for (colOffsetAeq = 148; colOffsetAeq <= obj->nVar; colOffsetAeq++) {
            obj->ATwset.data[(colOffsetAeq + colOffsetATw) - 1] = 0.0;
          }
        }

        for (colOffsetATw = 0; colOffsetATw <= mIneq - 149; colOffsetATw++) {
          c_idx = obj->ldA * colOffsetATw - 1;
          for (d_idx_row = 148; d_idx_row <= colOffsetATw + 147; d_idx_row++) {
            obj->Aineq.data[d_idx_row + c_idx] = 0.0;
          }

          obj->Aineq.data[(colOffsetATw + c_idx) + 148] = -1.0;
          for (colOffsetAeq = colOffsetATw + 149; colOffsetAeq <= obj->nVar;
               colOffsetAeq++) {
            obj->Aineq.data[colOffsetAeq + c_idx] = 0.0;
          }
        }

        for (c_idx = 0; c_idx < 130; c_idx++) {
          int32_T b_tmp;
          colOffsetAeq = obj->ldA * c_idx - 1;
          colOffsetATw = (obj->isActiveIdx[1] - 1) * obj->ldA + colOffsetAeq;
          for (d_idx_row = 148; d_idx_row < mIneq; d_idx_row++) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
          }

          d_idx_row = mIneq;
          b_tmp = mIneq + c_idx;
          while (d_idx_row <= b_tmp - 1) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
            d_idx_row++;
          }

          obj->Aeq.data[b_tmp + colOffsetAeq] = -1.0;
          obj->ATwset.data[b_tmp + colOffsetATw] = -1.0;
          for (d_idx_row = b_tmp + 1; d_idx_row <= mIneq + 129; d_idx_row++) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
          }

          d_idx_row = mIneq + 130;
          b_tmp = mIneq + c_idx;
          while (d_idx_row <= b_tmp + 129) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
            d_idx_row++;
          }

          obj->Aeq.data[((mIneq + c_idx) + colOffsetAeq) + 130] = 1.0;
          d_idx_row = mIneq + c_idx;
          obj->ATwset.data[(d_idx_row + colOffsetATw) + 130] = 1.0;
          for (d_idx_row += 131; d_idx_row <= obj->nVar; d_idx_row++) {
            obj->Aeq.data[d_idx_row + colOffsetAeq] = 0.0;
            obj->ATwset.data[d_idx_row + colOffsetATw] = 0.0;
          }
        }

        colOffsetATw = 147;
        for (c_idx = obj->sizesNormal[3]; c_idx < obj->sizesRegularized[3];
             c_idx++) {
          colOffsetATw++;
          obj->indexLB.data[c_idx] = colOffsetATw;
        }

        if (obj->nWConstr[4] > 0) {
          for (colOffsetATw = -1; colOffsetATw < obj->sizesRegularized[4] - 1;
               colOffsetATw++) {
            obj->isActiveConstr.data[(obj->isActiveIdxRegularized[4] +
              colOffsetATw) + 1] = obj->isActiveConstr.data[obj->isActiveIdx[4]
              + colOffsetATw];
          }
        }

        for (colOffsetATw = obj->isActiveIdx[4]; colOffsetATw <
             obj->isActiveIdxRegularized[4]; colOffsetATw++) {
          obj->isActiveConstr.data[colOffsetATw - 1] = false;
        }

        for (colOffsetATw = 148; colOffsetATw <= mIneq + 259; colOffsetATw++) {
          obj->lb.data[colOffsetATw - 1] = 0.0;
        }

        for (mIneq = obj->isActiveIdx[2] - 1; mIneq < obj->nActiveConstr; mIneq
             ++) {
          colOffsetATw = obj->ldA * mIneq - 1;
          if (obj->Wid.data[mIneq] == 3) {
            for (c_idx = 148; c_idx <= obj->Wlocalidx.data[mIneq] + 146; c_idx++)
            {
              obj->ATwset.data[c_idx + colOffsetATw] = 0.0;
            }

            obj->ATwset.data[(obj->Wlocalidx.data[mIneq] + colOffsetATw) + 147] =
              -1.0;
            for (c_idx = obj->Wlocalidx.data[mIneq] + 148; c_idx <= obj->nVar;
                 c_idx++) {
              obj->ATwset.data[c_idx + colOffsetATw] = 0.0;
            }
          } else {
            for (c_idx = 148; c_idx <= obj->nVar; c_idx++) {
              obj->ATwset.data[c_idx + colOffsetATw] = 0.0;
            }
          }
        }
      }

      for (d_idx_row = 0; d_idx_row < 6; d_idx_row++) {
        obj->isActiveIdx[d_idx_row] = obj->isActiveIdxRegularized[d_idx_row];
      }
    }
    break;

   default:
    obj->nVar = obj->nVarMax;
    obj->mConstr = obj->mConstrMax;
    for (int32_T d_idx_row{0}; d_idx_row < 5; d_idx_row++) {
      obj->sizes[d_idx_row] = obj->sizesRegPhaseOne[d_idx_row];
    }

    for (int32_T d_idx_row{0}; d_idx_row < 6; d_idx_row++) {
      obj->isActiveIdx[d_idx_row] = obj->isActiveIdxRegPhaseOne[d_idx_row];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    break;
  }

  obj->probType = PROBLEM_TYPE;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_initActiveSet(s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *obj)
{
  int32_T iATw0;
  proc_control_setProblemType(obj, 3);
  proc_control_B.nWFixed = obj->isActiveIdx[2];
  while (proc_control_B.nWFixed <= obj->mConstrMax) {
    obj->isActiveConstr.data[proc_control_B.nWFixed - 1] = false;
    proc_control_B.nWFixed++;
  }

  obj->nWConstr[0] = obj->sizes[0];
  obj->nWConstr[1] = 130;
  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + 130;
  proc_control_B.nWFixed = obj->sizes[0];
  for (int32_T b_idx_local{0}; b_idx_local < proc_control_B.nWFixed; b_idx_local
       ++) {
    obj->Wid.data[b_idx_local] = 1;
    obj->Wlocalidx.data[b_idx_local] = b_idx_local + 1;
    obj->isActiveConstr.data[b_idx_local] = true;
    proc_control_B.iAeq0 = obj->ldA * b_idx_local - 1;
    for (iATw0 = 0; iATw0 <= obj->indexFixed.data[b_idx_local] - 2; iATw0++) {
      obj->ATwset.data[(iATw0 + proc_control_B.iAeq0) + 1] = 0.0;
    }

    obj->ATwset.data[obj->indexFixed.data[b_idx_local] + proc_control_B.iAeq0] =
      1.0;
    for (iATw0 = obj->indexFixed.data[b_idx_local] + 1; iATw0 <= obj->nVar;
         iATw0++) {
      obj->ATwset.data[iATw0 + proc_control_B.iAeq0] = 0.0;
    }

    obj->bwset.data[b_idx_local] = obj->ub.data[obj->indexFixed.data[b_idx_local]
      - 1];
  }

  for (int32_T b_idx_local{0}; b_idx_local < 130; b_idx_local++) {
    proc_control_B.idx_global = proc_control_B.nWFixed + b_idx_local;
    obj->Wid.data[proc_control_B.idx_global] = 2;
    obj->Wlocalidx.data[proc_control_B.idx_global] = b_idx_local + 1;
    obj->isActiveConstr.data[proc_control_B.idx_global] = true;
    proc_control_B.iAeq0 = obj->ldA * b_idx_local;
    iATw0 = obj->ldA * proc_control_B.idx_global;
    for (int32_T c_i{0}; c_i < obj->nVar; c_i++) {
      obj->ATwset.data[iATw0 + c_i] = obj->Aeq.data[proc_control_B.iAeq0 + c_i];
    }

    obj->bwset.data[proc_control_B.idx_global] = obj->beq[b_idx_local];
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_contro_factoryConstruct_ln(int32_T maxRows, int32_T
  maxCols, int32_T *obj_ldq, int32_T obj_QR_size[2], real_T obj_Q_data[],
  int32_T obj_Q_size[2], int32_T obj_jpvt_data[], int32_T *obj_jpvt_size,
  int32_T *obj_mrows, int32_T *obj_ncols, int32_T *obj_tau_size, int32_T
  *obj_minRowCol, boolean_T *obj_usedPivoting)
{
  int32_T loop_ub;
  *obj_ldq = maxRows;
  obj_QR_size[0] = maxRows;
  obj_QR_size[1] = maxCols;
  obj_Q_size[0] = maxRows;
  obj_Q_size[1] = maxRows;
  loop_ub = maxRows * maxRows - 1;
  if (loop_ub >= 0) {
    std::memset(&obj_Q_data[0], 0, (loop_ub + 1) * sizeof(real_T));
  }

  *obj_jpvt_size = maxCols;
  if (maxCols - 1 >= 0) {
    std::memset(&obj_jpvt_data[0], 0, maxCols * sizeof(int32_T));
  }

  *obj_mrows = 0;
  *obj_ncols = 0;
  if (maxRows <= maxCols) {
    *obj_tau_size = maxRows;
  } else {
    *obj_tau_size = maxCols;
  }

  *obj_minRowCol = 0;
  *obj_usedPivoting = false;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_contr_factoryConstruct_lnz(int32_T MaxDims, int32_T
  obj_FMat_size[2], int32_T *obj_ldm, int32_T *obj_ndims, int32_T *obj_info,
  real_T *obj_scaleFactor, boolean_T *obj_ConvexCheck, real_T *obj_regTol_,
  real_T *obj_workspace_, real_T *obj_workspace2_)
{
  obj_FMat_size[0] = MaxDims;
  obj_FMat_size[1] = MaxDims;
  *obj_ldm = MaxDims;
  *obj_ndims = 0;
  *obj_info = 0;
  *obj_scaleFactor = 0.0;
  *obj_ConvexCheck = true;
  *obj_regTol_ = (rtInf);
  *obj_workspace_ = (rtInf);
  *obj_workspace2_ = (rtInf);
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemv(int32_T m, int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T iac;
    int32_T ix;
    ix = ix0;
    b = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      int32_T c;
      int32_T iy;
      iy = 0;
      c = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= c; ia++) {
        y_data[iy] += A_data[ia - 1] * x_data[ix - 1];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_computeGradLag(real_T workspace_data[], int32_T
  ldA, int32_T nVar, const real_T grad_data[], int32_T mIneq, const real_T
  AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
  int32_T iL0;
  for (iL0 = 0; iL0 < nVar; iL0++) {
    workspace_data[iL0] = grad_data[iL0];
  }

  for (iL0 = 0; iL0 < mFixed; iL0++) {
    workspace_data[finiteFixed_data[iL0] - 1] += lambda_data[iL0];
  }

  proc_control_xgemv(nVar, 130, AeqTrans_data, ldA, lambda_data, mFixed + 1,
                     workspace_data);
  proc_control_xgemv(nVar, mIneq, AineqTrans_data, ldA, lambda_data, mFixed +
                     131, workspace_data);
  iL0 = (mFixed + mIneq) + 130;
  for (int32_T c_idx{0}; c_idx < mLB; c_idx++) {
    workspace_data[finiteLB_data[c_idx] - 1] -= lambda_data[iL0];
    iL0++;
  }

  for (int32_T c_idx{0}; c_idx < mUB; c_idx++) {
    workspace_data[finiteUB_data[c_idx] - 1] += lambda_data[iL0];
    iL0++;
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
real_T proc_control::proc_con_computePrimalFeasError(const real_T x[147],
  int32_T mLinIneq, int32_T mNonlinIneq, const real_T cIneq_data[], const real_T
  cEq[130], const int32_T finiteLB_data[], int32_T mLB, const real_T lb[147],
  const int32_T finiteUB_data[], int32_T mUB)
{
  real_T feasError;
  int32_T mIneq;
  feasError = 0.0;
  mIneq = mNonlinIneq + mLinIneq;
  for (int32_T idx{0}; idx < 130; idx++) {
    feasError = std::fmax(feasError, std::abs(cEq[idx]));
  }

  for (int32_T idx{0}; idx < mIneq; idx++) {
    feasError = std::fmax(feasError, cIneq_data[idx]);
  }

  for (mIneq = 0; mIneq < mLB; mIneq++) {
    feasError = std::fmax(feasError, lb[finiteLB_data[mIneq] - 1] -
                          x[finiteLB_data[mIneq] - 1]);
  }

  for (mIneq = 0; mIneq < mUB; mIneq++) {
    feasError = std::fmax(feasError, x[finiteUB_data[mIneq] - 1] - (rtInf));
  }

  return feasError;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_contr_computeDualFeasError(int32_T nVar, const real_T
  gradLag_data[], boolean_T *gradOK, real_T *val)
{
  int32_T b_idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!std::isinf(gradLag_data[b_idx])) && (!std::isnan
                (gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      *val = std::fmax(*val, std::abs(gradLag_data[b_idx]));
      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_saveJacobian(s_UjlJWoQEHmSUKFcPTad7eC_proc_T
  *obj, int32_T nVar, int32_T mIneq, const real_T JacCineqTrans_data[], int32_T
  ineqCol0, const real_T JacCeqTrans_data[], int32_T ldJ)
{
  int32_T b;
  int32_T iCol;
  int32_T iCol_old;
  iCol = (ineqCol0 - 1) * ldJ;
  iCol_old = -1;
  b = mIneq - ineqCol0;
  for (int32_T idx_col{0}; idx_col <= b; idx_col++) {
    int32_T loop_ub_tmp;
    int32_T y_size_idx_0;
    int32_T y_size_idx_1;
    y_size_idx_0 = obj->JacCineqTrans_old.size[0];
    y_size_idx_1 = obj->JacCineqTrans_old.size[1];
    loop_ub_tmp = obj->JacCineqTrans_old.size[0] * obj->JacCineqTrans_old.size[1];
    if (loop_ub_tmp - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data[0], &obj->JacCineqTrans_old.data[0],
                  loop_ub_tmp * sizeof(real_T));
    }

    for (loop_ub_tmp = 1; loop_ub_tmp - 1 < nVar; loop_ub_tmp++) {
      proc_control_B.y_data[iCol_old + loop_ub_tmp] = JacCineqTrans_data[(iCol +
        loop_ub_tmp) - 1];
    }

    obj->JacCineqTrans_old.size[1] = y_size_idx_1;
    y_size_idx_0 *= y_size_idx_1;
    if (y_size_idx_0 - 1 >= 0) {
      std::memcpy(&obj->JacCineqTrans_old.data[0], &proc_control_B.y_data[0],
                  y_size_idx_0 * sizeof(real_T));
    }

    iCol += ldJ;
    iCol_old += ldJ;
  }

  iCol = -1;
  iCol_old = -1;
  for (b = 0; b < 130; b++) {
    for (int32_T idx_col{1}; idx_col - 1 < nVar; idx_col++) {
      obj->JacCeqTrans_old.data[iCol_old + idx_col] = JacCeqTrans_data[iCol +
        idx_col];
    }

    iCol += ldJ;
    iCol_old += ldJ;
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_saveState(s_UjlJWoQEHmSUKFcPTad7eC_proc_T *obj)
{
  int32_T y_size_idx_0;
  obj->sqpFval_old = obj->sqpFval;
  for (int32_T k{0}; k < 147; k++) {
    obj->xstarsqp_old[k] = obj->xstarsqp[k];
    obj->grad_old.data[k] = obj->grad.data[k];
  }

  y_size_idx_0 = obj->cIneq_old.size;
  if (obj->cIneq_old.size - 1 >= 0) {
    std::memcpy(&proc_control_B.y_data_p[0], &obj->cIneq_old.data[0],
                obj->cIneq_old.size * sizeof(real_T));
  }

  for (int32_T k{0}; k < obj->mIneq; k++) {
    proc_control_B.y_data_p[k] = obj->cIneq.data[k];
  }

  if (y_size_idx_0 - 1 >= 0) {
    std::memcpy(&obj->cIneq_old.data[0], &proc_control_B.y_data_p[0],
                y_size_idx_0 * sizeof(real_T));
  }

  std::memcpy(&obj->cEq_old[0], &obj->cEq[0], 130U * sizeof(real_T));
}

// Function for MATLAB Function: '<S210>/NLMPC'
real_T proc_control::proc_control_computeComplError(const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  const real_T xCurrent[147], int32_T mIneq, const real_T cIneq_data[], const
  int32_T finiteLB_data[], int32_T mLB, const real_T lb[147], const int32_T
  finiteUB_data[], int32_T mUB, const real_T lambda_data[], int32_T iL0)
{
  real_T nlpComplError;
  nlpComplError = 0.0;
  if ((mIneq + mLB) + mUB > 0) {
    real_T lbLambda;
    real_T ubLambda;
    int32_T iLineq0;
    int32_T lbOffset;
    int32_T mLinIneq;
    for (iLineq0 = 0; iLineq0 < *fscales_lineq_constraint_size; iLineq0++) {
      lbLambda = lambda_data[(iL0 + iLineq0) - 1];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(lbLambda *
        cIneq_data[iLineq0]), std::fmin(std::abs(cIneq_data[iLineq0]), lbLambda)));
    }

    iLineq0 = (iL0 + *fscales_lineq_constraint_size) - 2;
    for (lbOffset = 1; lbOffset - 1 < *fscales_cineq_constraint_size; lbOffset++)
    {
      lbLambda = lambda_data[iLineq0 + lbOffset];
      ubLambda = cIneq_data[(*fscales_lineq_constraint_size - 1) + lbOffset];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(ubLambda *
        lbLambda), std::fmin(std::abs(ubLambda), lbLambda)));
    }

    lbOffset = (iL0 + mIneq) - 1;
    mLinIneq = lbOffset + mLB;
    for (iLineq0 = 0; iLineq0 < mLB; iLineq0++) {
      ubLambda = xCurrent[finiteLB_data[iLineq0] - 1] - lb[finiteLB_data[iLineq0]
        - 1];
      lbLambda = lambda_data[lbOffset + iLineq0];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(ubLambda *
        lbLambda), std::fmin(std::abs(ubLambda), lbLambda)));
    }

    for (lbOffset = 0; lbOffset < mUB; lbOffset++) {
      ubLambda = lambda_data[mLinIneq + lbOffset];
      lbLambda = (rtInf) - xCurrent[finiteUB_data[lbOffset] - 1];
      nlpComplError = std::fmax(nlpComplError, std::fmin(std::abs(lbLambda *
        ubLambda), std::fmin(lbLambda, ubLambda)));
    }
  }

  return nlpComplError;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemv_m(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T iac;
    int32_T ix;
    ix = ix0;
    b = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      int32_T c;
      int32_T iy;
      iy = 0;
      c = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= c; ia++) {
        y_data[iy] += A_data[ia - 1] * x_data[ix - 1];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_computeGradLag_b(real_T workspace_data[],
  int32_T ldA, int32_T nVar, const real_T grad_data[], int32_T mIneq, const
  real_T AineqTrans_data[], const real_T AeqTrans_data[], const int32_T
  finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[], int32_T mLB,
  const int32_T finiteUB_data[], int32_T mUB, const real_T lambda_data[])
{
  int32_T iL0;
  for (iL0 = 0; iL0 < nVar; iL0++) {
    workspace_data[iL0] = grad_data[iL0];
  }

  for (iL0 = 0; iL0 < mFixed; iL0++) {
    workspace_data[finiteFixed_data[iL0] - 1] += lambda_data[iL0];
  }

  proc_control_xgemv_m(nVar, 130, AeqTrans_data, ldA, lambda_data, mFixed + 1,
                       workspace_data);
  proc_control_xgemv_m(nVar, mIneq, AineqTrans_data, ldA, lambda_data, mFixed +
                       131, workspace_data);
  iL0 = (mFixed + mIneq) + 130;
  for (int32_T c_idx{0}; c_idx < mLB; c_idx++) {
    workspace_data[finiteLB_data[c_idx] - 1] -= lambda_data[iL0];
    iL0++;
  }

  for (int32_T c_idx{0}; c_idx < mUB; c_idx++) {
    workspace_data[finiteUB_data[c_idx] - 1] += lambda_data[iL0];
    iL0++;
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_con_computeDualFeasError_b(int32_T nVar, const real_T
  gradLag_data[], boolean_T *gradOK, real_T *val)
{
  int32_T b_idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!std::isinf(gradLag_data[b_idx])) && (!std::isnan
                (gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      *val = std::fmax(*val, std::abs(gradLag_data[b_idx]));
      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_updateWorkingSetForNewQP_l(const real_T xk[147],
  s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet, int32_T mIneq, int32_T
  mNonlinIneq, const real_T cIneq_data[], const real_T cEq[130], int32_T mLB,
  const real_T lb[147], int32_T mUB, int32_T mFixed)
{
  int32_T iEq0;
  int32_T iw0;
  int32_T nVar;
  nVar = WorkingSet->nVar - 1;
  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (int32_T b_idx{0}; b_idx < 130; b_idx++) {
    WorkingSet->beq[b_idx] = -cEq[b_idx];
    WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
    for (int32_T i{0}; i <= nVar; i++) {
      WorkingSet->ATwset.data[iw0 + i] = WorkingSet->Aeq.data[iEq0 + i];
    }

    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (iw0 = 0; iw0 < mIneq; iw0++) {
    WorkingSet->bineq.data[iw0] = -cIneq_data[iw0];
  }

  for (iw0 = 0; iw0 < mLB; iw0++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[iw0] - 1] = -lb
      [WorkingSet->indexLB.data[iw0] - 1] + xk[WorkingSet->indexLB.data[iw0] - 1];
  }

  for (iw0 = 0; iw0 < mUB; iw0++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[iw0] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[iw0] - 1];
  }

  for (iw0 = 0; iw0 < mFixed; iw0++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[iw0] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[iw0] - 1];
    WorkingSet->bwset.data[iw0] = (rtInf) - xk[WorkingSet->indexFixed.data[iw0]
      - 1];
  }

  if (WorkingSet->nActiveConstr > mFixed + 130) {
    for (int32_T b_idx{mFixed + 130}; b_idx < WorkingSet->nActiveConstr; b_idx++)
    {
      switch (WorkingSet->Wid.data[b_idx]) {
       case 4:
        WorkingSet->bwset.data[b_idx] = WorkingSet->lb.data
          [WorkingSet->indexLB.data[WorkingSet->Wlocalidx.data[b_idx] - 1] - 1];
        break;

       case 5:
        WorkingSet->bwset.data[b_idx] = WorkingSet->ub.data
          [WorkingSet->indexUB.data[WorkingSet->Wlocalidx.data[b_idx] - 1] - 1];
        break;

       default:
        WorkingSet->bwset.data[b_idx] = WorkingSet->bineq.data
          [WorkingSet->Wlocalidx.data[b_idx] - 1];
        if ((mNonlinIneq > 0) && (WorkingSet->Wlocalidx.data[b_idx] >=
             mNonlinIneq)) {
          iw0 = WorkingSet->ldA * b_idx;
          iEq0 = (WorkingSet->Wlocalidx.data[b_idx] - 1) * WorkingSet->ldA;
          for (int32_T i{1}; i - 1 <= nVar; i++) {
            WorkingSet->ATwset.data[(iw0 + i) - 1] = WorkingSet->Aineq.data
              [(iEq0 + i) - 1];
          }
        }
        break;
      }
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
real_T proc_control::proc_control_xnrm2_m(int32_T n, const real_T x_data[],
  int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x_data[ix0 - 1]);
    } else {
      int32_T kend;
      proc_control_B.scale_fj = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (int32_T k{ix0}; k <= kend; k++) {
        proc_control_B.absxk_a = std::abs(x_data[k - 1]);
        if (proc_control_B.absxk_a > proc_control_B.scale_fj) {
          proc_control_B.t_mu = proc_control_B.scale_fj / proc_control_B.absxk_a;
          y = y * proc_control_B.t_mu * proc_control_B.t_mu + 1.0;
          proc_control_B.scale_fj = proc_control_B.absxk_a;
        } else {
          proc_control_B.t_mu = proc_control_B.absxk_a / proc_control_B.scale_fj;
          y += proc_control_B.t_mu * proc_control_B.t_mu;
        }
      }

      y = proc_control_B.scale_fj * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S210>/NLMPC'
real_T proc_control::proc_control_xzlarfg(int32_T n, real_T *alpha1, real_T
  x_data[], int32_T ix0)
{
  real_T tau;
  tau = 0.0;
  if (n > 0) {
    proc_control_B.xnorm_h = proc_control_xnrm2_m(n - 1, x_data, ix0);
    if (proc_control_B.xnorm_h != 0.0) {
      proc_control_B.xnorm_h = proc_control_rt_hypotd_snf(*alpha1,
        proc_control_B.xnorm_h);
      if (*alpha1 >= 0.0) {
        proc_control_B.xnorm_h = -proc_control_B.xnorm_h;
      }

      if (std::abs(proc_control_B.xnorm_h) < 1.0020841800044864E-292) {
        int32_T c_k;
        int32_T knt;
        knt = 0;
        c_k = (ix0 + n) - 2;
        do {
          knt++;
          for (int32_T b_k{ix0}; b_k <= c_k; b_k++) {
            x_data[b_k - 1] *= 9.9792015476736E+291;
          }

          proc_control_B.xnorm_h *= 9.9792015476736E+291;
          *alpha1 *= 9.9792015476736E+291;
        } while ((std::abs(proc_control_B.xnorm_h) < 1.0020841800044864E-292) &&
                 (knt < 20));

        proc_control_B.xnorm_h = proc_control_rt_hypotd_snf(*alpha1,
          proc_control_xnrm2_m(n - 1, x_data, ix0));
        if (*alpha1 >= 0.0) {
          proc_control_B.xnorm_h = -proc_control_B.xnorm_h;
        }

        tau = (proc_control_B.xnorm_h - *alpha1) / proc_control_B.xnorm_h;
        proc_control_B.a_nl = 1.0 / (*alpha1 - proc_control_B.xnorm_h);
        for (int32_T b_k{ix0}; b_k <= c_k; b_k++) {
          x_data[b_k - 1] *= proc_control_B.a_nl;
        }

        for (c_k = 0; c_k < knt; c_k++) {
          proc_control_B.xnorm_h *= 1.0020841800044864E-292;
        }

        *alpha1 = proc_control_B.xnorm_h;
      } else {
        int32_T knt;
        tau = (proc_control_B.xnorm_h - *alpha1) / proc_control_B.xnorm_h;
        proc_control_B.a_nl = 1.0 / (*alpha1 - proc_control_B.xnorm_h);
        knt = (ix0 + n) - 2;
        for (int32_T c_k{ix0}; c_k <= knt; c_k++) {
          x_data[c_k - 1] *= proc_control_B.a_nl;
        }

        *alpha1 = proc_control_B.xnorm_h;
      }
    }
  }

  return tau;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemv_mt(int32_T m, int32_T n, const real_T
  A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[])
{
  if (n != 0) {
    int32_T b;
    int32_T b_iy;
    int32_T iac;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_B.c_c = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_B.c_c += A_data[ia - 1] * x_data[ix - 1];
        ix++;
      }

      y_data[b_iy] += proc_control_B.c_c;
      b_iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgerc_e(int32_T m, int32_T n, real_T alpha1,
  int32_T ix0, const real_T y_data[], real_T A_data[], int32_T ia0, int32_T lda)
{
  if (!(alpha1 == 0.0)) {
    int32_T jA;
    int32_T jy;
    jA = ia0 - 1;
    jy = 0;
    for (int32_T j{0}; j < n; j++) {
      if (y_data[jy] != 0.0) {
        int32_T b;
        int32_T ijA;
        int32_T ix;
        proc_control_B.temp_k = y_data[jy] * alpha1;
        ix = ix0;
        ijA = jA;
        b = m + jA;
        while (ijA + 1 <= b) {
          A_data[ijA] += A_data[ix - 1] * proc_control_B.temp_k;
          ix++;
          ijA++;
        }
      }

      jy++;
      jA += lda;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xzlarf(int32_T m, int32_T n, int32_T iv0, real_T
  tau, real_T C_data[], int32_T ic0, int32_T ldc, real_T work_data[])
{
  int32_T lastc;
  int32_T lastv;
  if (tau != 0.0) {
    boolean_T exitg2;
    lastv = m;
    lastc = iv0 + m;
    while ((lastv > 0) && (C_data[lastc - 2] == 0.0)) {
      lastv--;
      lastc--;
    }

    lastc = n;
    exitg2 = false;
    while ((!exitg2) && (lastc > 0)) {
      int32_T coltop;
      int32_T exitg1;
      int32_T ia;
      coltop = (lastc - 1) * ldc + ic0;
      ia = coltop;
      do {
        exitg1 = 0;
        if (ia <= (coltop + lastv) - 1) {
          if (C_data[ia - 1] != 0.0) {
            exitg1 = 1;
          } else {
            ia++;
          }
        } else {
          lastc--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    lastv = 0;
    lastc = 0;
  }

  if (lastv > 0) {
    proc_control_xgemv_mt(lastv, lastc, C_data, ic0, ldc, C_data, iv0, work_data);
    proc_control_xgerc_e(lastv, lastc, -tau, iv0, work_data, C_data, ic0, ldc);
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_qrf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[])
{
  proc_control_B.lda = A_size[0];
  proc_control_B.ii_e = A_size[1];
  if (proc_control_B.ii_e - 1 >= 0) {
    std::memset(&proc_control_B.work_data[0], 0, proc_control_B.ii_e * sizeof
                (real_T));
  }

  proc_control_B.i_k4 = 0;
  while (proc_control_B.i_k4 <= nfxd - 1) {
    proc_control_B.ii_e = proc_control_B.i_k4 * proc_control_B.lda +
      proc_control_B.i_k4;
    proc_control_B.mmi_k = m - proc_control_B.i_k4;
    if (proc_control_B.i_k4 + 1 < m) {
      proc_control_B.b_atmp = A_data[proc_control_B.ii_e];
      tau_data[proc_control_B.i_k4] = proc_control_xzlarfg(proc_control_B.mmi_k,
        &proc_control_B.b_atmp, A_data, proc_control_B.ii_e + 2);
      A_data[proc_control_B.ii_e] = proc_control_B.b_atmp;
    } else {
      tau_data[proc_control_B.i_k4] = 0.0;
    }

    if (proc_control_B.i_k4 + 1 < n) {
      proc_control_B.b_atmp = A_data[proc_control_B.ii_e];
      A_data[proc_control_B.ii_e] = 1.0;
      proc_control_xzlarf(proc_control_B.mmi_k, (n - proc_control_B.i_k4) - 1,
                          proc_control_B.ii_e + 1, tau_data[proc_control_B.i_k4],
                          A_data, (proc_control_B.ii_e + proc_control_B.lda) + 1,
                          proc_control_B.lda, proc_control_B.work_data);
      A_data[proc_control_B.ii_e] = proc_control_B.b_atmp;
    }

    proc_control_B.i_k4++;
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xswap(int32_T n, real_T x_data[], int32_T ix0,
  int32_T iy0)
{
  int32_T ix;
  int32_T iy;
  ix = ix0 - 1;
  iy = iy0 - 1;
  for (int32_T k{0}; k < n; k++) {
    real_T temp;
    temp = x_data[ix];
    x_data[ix] = x_data[iy];
    x_data[iy] = temp;
    ix++;
    iy++;
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_qrpf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T nfxd, real_T tau_data[], int32_T jpvt_data[])
{
  proc_control_B.ma_g = A_size[0];
  if (m <= n) {
    proc_control_B.minmn_b = m;
  } else {
    proc_control_B.minmn_b = n;
  }

  proc_control_B.loop_ub_i = A_size[1];
  if (proc_control_B.loop_ub_i - 1 >= 0) {
    std::memset(&proc_control_B.work_data_m[0], 0, proc_control_B.loop_ub_i *
                sizeof(real_T));
  }

  proc_control_B.loop_ub_i = A_size[1];
  if (proc_control_B.loop_ub_i - 1 >= 0) {
    std::memset(&proc_control_B.vn1_data[0], 0, proc_control_B.loop_ub_i *
                sizeof(real_T));
  }

  proc_control_B.loop_ub_i = A_size[1];
  if (proc_control_B.loop_ub_i - 1 >= 0) {
    std::memset(&proc_control_B.vn2_data[0], 0, proc_control_B.loop_ub_i *
                sizeof(real_T));
  }

  proc_control_B.j_h = nfxd;
  while (proc_control_B.j_h + 1 <= n) {
    proc_control_B.vn1_data[proc_control_B.j_h] = proc_control_xnrm2_m(m - nfxd,
      A_data, (proc_control_B.j_h * proc_control_B.ma_g + nfxd) + 1);
    proc_control_B.vn2_data[proc_control_B.j_h] =
      proc_control_B.vn1_data[proc_control_B.j_h];
    proc_control_B.j_h++;
  }

  proc_control_B.j_h = nfxd;
  while (proc_control_B.j_h + 1 <= proc_control_B.minmn_b) {
    proc_control_B.loop_ub_i = proc_control_B.j_h + 1;
    proc_control_B.ii_j = proc_control_B.j_h * proc_control_B.ma_g +
      proc_control_B.j_h;
    proc_control_B.nmi = n - proc_control_B.j_h;
    proc_control_B.mmi = m - proc_control_B.j_h;
    if (proc_control_B.nmi < 1) {
      proc_control_B.pvt = -1;
    } else {
      proc_control_B.pvt = 0;
      if (proc_control_B.nmi > 1) {
        proc_control_B.ix_d4 = proc_control_B.j_h;
        proc_control_B.smax = std::abs
          (proc_control_B.vn1_data[proc_control_B.j_h]);
        proc_control_B.k_o = 2;
        while (proc_control_B.k_o <= proc_control_B.nmi) {
          proc_control_B.ix_d4++;
          proc_control_B.s_b = std::abs
            (proc_control_B.vn1_data[proc_control_B.ix_d4]);
          if (proc_control_B.s_b > proc_control_B.smax) {
            proc_control_B.pvt = proc_control_B.k_o - 1;
            proc_control_B.smax = proc_control_B.s_b;
          }

          proc_control_B.k_o++;
        }
      }
    }

    proc_control_B.pvt += proc_control_B.j_h;
    if (proc_control_B.pvt + 1 != proc_control_B.j_h + 1) {
      proc_control_xswap(m, A_data, proc_control_B.pvt * proc_control_B.ma_g + 1,
                         proc_control_B.j_h * proc_control_B.ma_g + 1);
      proc_control_B.ix_d4 = jpvt_data[proc_control_B.pvt];
      jpvt_data[proc_control_B.pvt] = jpvt_data[proc_control_B.j_h];
      jpvt_data[proc_control_B.j_h] = proc_control_B.ix_d4;
      proc_control_B.vn1_data[proc_control_B.pvt] =
        proc_control_B.vn1_data[proc_control_B.j_h];
      proc_control_B.vn2_data[proc_control_B.pvt] =
        proc_control_B.vn2_data[proc_control_B.j_h];
    }

    if (proc_control_B.j_h + 1 < m) {
      proc_control_B.smax = A_data[proc_control_B.ii_j];
      tau_data[proc_control_B.j_h] = proc_control_xzlarfg(proc_control_B.mmi,
        &proc_control_B.smax, A_data, proc_control_B.ii_j + 2);
      A_data[proc_control_B.ii_j] = proc_control_B.smax;
    } else {
      tau_data[proc_control_B.j_h] = 0.0;
    }

    if (proc_control_B.j_h + 1 < n) {
      proc_control_B.smax = A_data[proc_control_B.ii_j];
      A_data[proc_control_B.ii_j] = 1.0;
      proc_control_xzlarf(proc_control_B.mmi, proc_control_B.nmi - 1,
                          proc_control_B.ii_j + 1, tau_data[proc_control_B.j_h],
                          A_data, (proc_control_B.ii_j + proc_control_B.ma_g) +
                          1, proc_control_B.ma_g, proc_control_B.work_data_m);
      A_data[proc_control_B.ii_j] = proc_control_B.smax;
    }

    while (proc_control_B.loop_ub_i + 1 <= n) {
      proc_control_B.ii_j = proc_control_B.loop_ub_i * proc_control_B.ma_g +
        proc_control_B.j_h;
      if (proc_control_B.vn1_data[proc_control_B.loop_ub_i] != 0.0) {
        proc_control_B.smax = std::abs(A_data[proc_control_B.ii_j]) /
          proc_control_B.vn1_data[proc_control_B.loop_ub_i];
        proc_control_B.smax = 1.0 - proc_control_B.smax * proc_control_B.smax;
        if (proc_control_B.smax < 0.0) {
          proc_control_B.smax = 0.0;
        }

        proc_control_B.s_b = proc_control_B.vn1_data[proc_control_B.loop_ub_i] /
          proc_control_B.vn2_data[proc_control_B.loop_ub_i];
        proc_control_B.s_b = proc_control_B.s_b * proc_control_B.s_b *
          proc_control_B.smax;
        if (proc_control_B.s_b <= 1.4901161193847656E-8) {
          if (proc_control_B.j_h + 1 < m) {
            proc_control_B.vn1_data[proc_control_B.loop_ub_i] =
              proc_control_xnrm2_m(proc_control_B.mmi - 1, A_data,
              proc_control_B.ii_j + 2);
            proc_control_B.vn2_data[proc_control_B.loop_ub_i] =
              proc_control_B.vn1_data[proc_control_B.loop_ub_i];
          } else {
            proc_control_B.vn1_data[proc_control_B.loop_ub_i] = 0.0;
            proc_control_B.vn2_data[proc_control_B.loop_ub_i] = 0.0;
          }
        } else {
          proc_control_B.vn1_data[proc_control_B.loop_ub_i] *= std::sqrt
            (proc_control_B.smax);
        }
      }

      proc_control_B.loop_ub_i++;
    }

    proc_control_B.j_h++;
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgeqp3(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, int32_T jpvt_data[], real_T tau_data[], int32_T
  *tau_size)
{
  proc_control_B.ma = A_size[0];
  if (A_size[0] <= A_size[1]) {
    proc_control_B.minmana_g = A_size[0];
  } else {
    proc_control_B.minmana_g = A_size[1];
  }

  if (m <= n) {
    proc_control_B.minmn = m;
  } else {
    proc_control_B.minmn = n;
  }

  *tau_size = proc_control_B.minmana_g;
  if (proc_control_B.minmana_g - 1 >= 0) {
    std::memset(&tau_data[0], 0, proc_control_B.minmana_g * sizeof(real_T));
  }

  if (proc_control_B.minmn < 1) {
    proc_control_B.ma = 0;
    while (proc_control_B.ma <= n - 1) {
      jpvt_data[proc_control_B.ma] = proc_control_B.ma + 1;
      proc_control_B.ma++;
    }
  } else {
    proc_control_B.minmana_g = -1;
    proc_control_B.c_j_c = 0;
    while (proc_control_B.c_j_c <= n - 1) {
      if (jpvt_data[proc_control_B.c_j_c] != 0) {
        proc_control_B.minmana_g++;
        if (proc_control_B.c_j_c + 1 != proc_control_B.minmana_g + 1) {
          proc_control_xswap(m, A_data, proc_control_B.c_j_c * proc_control_B.ma
                             + 1, proc_control_B.minmana_g * proc_control_B.ma +
                             1);
          jpvt_data[proc_control_B.c_j_c] = jpvt_data[proc_control_B.minmana_g];
          jpvt_data[proc_control_B.minmana_g] = proc_control_B.c_j_c + 1;
        } else {
          jpvt_data[proc_control_B.c_j_c] = proc_control_B.c_j_c + 1;
        }
      } else {
        jpvt_data[proc_control_B.c_j_c] = proc_control_B.c_j_c + 1;
      }

      proc_control_B.c_j_c++;
    }

    if (proc_control_B.minmana_g + 1 <= proc_control_B.minmn) {
      proc_control_B.minmana_g++;
    } else {
      proc_control_B.minmana_g = proc_control_B.minmn;
    }

    proc_control_qrf(A_data, A_size, m, n, proc_control_B.minmana_g, tau_data);
    if (proc_control_B.minmana_g < proc_control_B.minmn) {
      proc_control_qrpf(A_data, A_size, m, n, proc_control_B.minmana_g, tau_data,
                        jpvt_data);
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_factorQRE(s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj,
  const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA)
{
  proc_control_B.b_idx_h = 0;
  while (proc_control_B.b_idx_h <= ncols - 1) {
    proc_control_B.ix0_h = ldA * proc_control_B.b_idx_h;
    proc_control_B.idx_b = obj->ldq * proc_control_B.b_idx_h;
    for (int32_T k{1}; k - 1 < mrows; k++) {
      obj->QR.data[(proc_control_B.idx_b + k) - 1] = A_data
        [(proc_control_B.ix0_h + k) - 1];
    }

    proc_control_B.b_idx_h++;
  }

  obj->usedPivoting = true;
  obj->mrows = mrows;
  obj->ncols = ncols;
  if (mrows <= ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_xgeqp3(obj->QR.data, obj->QR.size, mrows, ncols, obj->jpvt.data,
                      obj->tau.data, &obj->tau.size);
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xorgqr(int32_T m, int32_T n, int32_T k, real_T
  A_data[], const int32_T A_size[2], int32_T lda, const real_T tau_data[])
{
  if (n >= 1) {
    proc_control_B.itau_m = k;
    while (proc_control_B.itau_m <= n - 1) {
      proc_control_B.i_bc = proc_control_B.itau_m * lda;
      proc_control_B.iaii_i = 0;
      while (proc_control_B.iaii_i <= m - 1) {
        A_data[proc_control_B.i_bc + proc_control_B.iaii_i] = 0.0;
        proc_control_B.iaii_i++;
      }

      A_data[proc_control_B.i_bc + proc_control_B.itau_m] = 1.0;
      proc_control_B.itau_m++;
    }

    proc_control_B.itau_m = k - 1;
    proc_control_B.iaii_i = static_cast<int16_T>(A_size[1]);
    if (proc_control_B.iaii_i - 1 >= 0) {
      std::memset(&proc_control_B.work_data_n[0], 0, proc_control_B.iaii_i *
                  sizeof(real_T));
    }

    proc_control_B.i_bc = k;
    while (proc_control_B.i_bc >= 1) {
      proc_control_B.iaii_i = (proc_control_B.i_bc - 1) * lda +
        proc_control_B.i_bc;
      if (proc_control_B.i_bc < n) {
        A_data[proc_control_B.iaii_i - 1] = 1.0;
        proc_control_xzlarf((m - proc_control_B.i_bc) + 1, n -
                            proc_control_B.i_bc, proc_control_B.iaii_i,
                            tau_data[proc_control_B.itau_m], A_data,
                            proc_control_B.iaii_i + lda, lda,
                            proc_control_B.work_data_n);
      }

      if (proc_control_B.i_bc < m) {
        proc_control_B.c_ih = (proc_control_B.iaii_i + m) - proc_control_B.i_bc;
        proc_control_B.b_k_b = proc_control_B.iaii_i;
        while (proc_control_B.b_k_b + 1 <= proc_control_B.c_ih) {
          A_data[proc_control_B.b_k_b] *= -tau_data[proc_control_B.itau_m];
          proc_control_B.b_k_b++;
        }
      }

      A_data[proc_control_B.iaii_i - 1] = 1.0 - tau_data[proc_control_B.itau_m];
      proc_control_B.c_ih = 0;
      while (proc_control_B.c_ih <= proc_control_B.i_bc - 2) {
        A_data[(proc_control_B.iaii_i - proc_control_B.c_ih) - 2] = 0.0;
        proc_control_B.c_ih++;
      }

      proc_control_B.itau_m--;
      proc_control_B.i_bc--;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_computeQ_(s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj,
  int32_T nrows)
{
  proc_control_B.idx_c = 0;
  while (proc_control_B.idx_c <= obj->minRowCol - 1) {
    proc_control_B.iQR0 = obj->ldq * proc_control_B.idx_c + proc_control_B.idx_c;
    proc_control_B.n_m = obj->mrows - proc_control_B.idx_c;
    proc_control_B.k_oc = 1;
    while (proc_control_B.k_oc - 1 <= proc_control_B.n_m - 2) {
      proc_control_B.i9 = proc_control_B.iQR0 + proc_control_B.k_oc;
      obj->Q.data[proc_control_B.i9] = obj->QR.data[proc_control_B.i9];
      proc_control_B.k_oc++;
    }

    proc_control_B.idx_c++;
  }

  proc_control_xorgqr(obj->mrows, nrows, obj->minRowCol, obj->Q.data,
                      obj->Q.size, obj->ldq, obj->tau.data);
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemv_mtm(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (m != 0) {
    int32_T b;
    int32_T b_iy;
    int32_T iac;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      real_T c;
      int32_T d;
      int32_T ix;
      ix = 0;
      c = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        c += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[b_iy] += c;
      b_iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xtrsv(int32_T n, const real_T A_data[], int32_T
  lda, real_T x_data[])
{
  if (n != 0) {
    for (int32_T j{n - 1}; j + 1 > 0; j--) {
      int32_T jjA;
      jjA = j * lda + j;
      x_data[j] /= A_data[jjA];
      for (int32_T i{1}; i - 1 < j; i++) {
        int32_T ix;
        ix = j - i;
        x_data[ix] -= A_data[jjA - i] * x_data[j];
      }
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_sortLambdaQP(real_T lambda_data[], int32_T
  WorkingSet_nActiveConstr, const int32_T WorkingSet_sizes[5], const int32_T
  WorkingSet_isActiveIdx[6], const int32_T WorkingSet_Wid_data[], const int32_T
  WorkingSet_Wlocalidx_data[], real_T workspace_data[])
{
  if (WorkingSet_nActiveConstr != 0) {
    int32_T idx;
    int32_T idxOffset;
    int32_T mAll;
    mAll = (((WorkingSet_sizes[0] + WorkingSet_sizes[3]) + WorkingSet_sizes[4])
            + WorkingSet_sizes[2]) + 129;
    for (idx = 0; idx <= mAll; idx++) {
      workspace_data[idx] = lambda_data[idx];
    }

    for (idx = 0; idx <= mAll; idx++) {
      lambda_data[idx] = 0.0;
    }

    mAll = 0;
    idx = 0;
    while ((idx + 1 <= WorkingSet_nActiveConstr) && (WorkingSet_Wid_data[idx] <=
            2)) {
      if (WorkingSet_Wid_data[idx] == 1) {
        idxOffset = 1;
      } else {
        idxOffset = WorkingSet_isActiveIdx[1];
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
        workspace_data[mAll];
      mAll++;
      idx++;
    }

    while (idx + 1 <= WorkingSet_nActiveConstr) {
      switch (WorkingSet_Wid_data[idx]) {
       case 3:
        idxOffset = WorkingSet_isActiveIdx[2];
        break;

       case 4:
        idxOffset = WorkingSet_isActiveIdx[3];
        break;

       default:
        idxOffset = WorkingSet_isActiveIdx[4];
        break;
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
        workspace_data[mAll];
      mAll++;
      idx++;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
int32_T proc_control::proc_control_ixamax(int32_T n, const real_T x_data[])
{
  int32_T idxmax;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      real_T smax;
      int32_T ix;
      ix = 0;
      smax = std::abs(x_data[0]);
      for (int32_T k{2}; k <= n; k++) {
        real_T s;
        ix++;
        s = std::abs(x_data[ix]);
        if (s > smax) {
          idxmax = k;
          smax = s;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_test_exit(s7RdrPWkr8UPAUyTdDJkLaG_proc__T *Flags,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, sG8JZ69axY52WWR6RKyApQC_proc__T
  *MeritFunction, const int32_T *fscales_lineq_constraint_size, const int32_T
  *fscales_cineq_constraint_size, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet,
  s_UjlJWoQEHmSUKFcPTad7eC_proc_T *TrialState, s_2F24x1ekvOt8ZUO1knVMv_proc__T
  *QRManager, const real_T lb[147])
{
  boolean_T dxTooSmall;
  boolean_T isFeasible;
  proc_control_B.mLambda_d = (((WorkingSet->sizes[0] + WorkingSet->sizes[2]) +
    WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 129;
  proc_control_B.fullRank_R = 0;
  while (proc_control_B.fullRank_R <= proc_control_B.mLambda_d) {
    TrialState->lambdaStopTest.data[proc_control_B.fullRank_R] =
      TrialState->lambdasqp.data[proc_control_B.fullRank_R];
    proc_control_B.fullRank_R++;
  }

  proc_control_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  proc_control_B.optimRelativeFactor_h = std::fmax(1.0, std::abs
    (TrialState->grad.data[proc_control_ixamax(WorkingSet->nVar,
    TrialState->grad.data) - 1]));
  if (std::isinf(proc_control_B.optimRelativeFactor_h)) {
    proc_control_B.optimRelativeFactor_h = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if (TrialState->sqpIterations == 0) {
    MeritFunction->feasRelativeFactor = std::fmax(1.0,
      MeritFunction->nlpPrimalFeasError);
  }

  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &Flags->gradOK, &MeritFunction->nlpDualFeasError);
  if (!Flags->gradOK) {
    Flags->done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = proc_control_computeComplError
      (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
       TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
       WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
       WorkingSet->indexUB.data, WorkingSet->sizes[4],
       TrialState->lambdaStopTest.data, WorkingSet->sizes[0] + 131);
    MeritFunction->firstOrderOpt = std::fmax(MeritFunction->nlpDualFeasError,
      MeritFunction->nlpComplError);
    if (TrialState->sqpIterations > 1) {
      proc_control_computeGradLag_b(memspace->workspace_double.data,
        WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
        WorkingSet->sizes[2], WorkingSet->Aineq.data, WorkingSet->Aeq.data,
        WorkingSet->indexFixed.data, WorkingSet->sizes[0],
        WorkingSet->indexLB.data, WorkingSet->sizes[3], WorkingSet->indexUB.data,
        WorkingSet->sizes[4], TrialState->lambdaStopTestPrev.data);
      proc_con_computeDualFeasError_b(WorkingSet->nVar,
        memspace->workspace_double.data, &dxTooSmall, &proc_control_B.tol_l);
      proc_control_B.nlpComplErrorTmp = proc_control_computeComplError
        (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
         TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
         WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
         WorkingSet->indexUB.data, WorkingSet->sizes[4],
         TrialState->lambdaStopTestPrev.data, WorkingSet->sizes[0] + 131);
      proc_control_B.d34 = std::fmax(proc_control_B.tol_l,
        proc_control_B.nlpComplErrorTmp);
      if (proc_control_B.d34 < std::fmax(MeritFunction->nlpDualFeasError,
           MeritFunction->nlpComplError)) {
        MeritFunction->nlpDualFeasError = proc_control_B.tol_l;
        MeritFunction->nlpComplError = proc_control_B.nlpComplErrorTmp;
        MeritFunction->firstOrderOpt = proc_control_B.d34;
        proc_control_B.fullRank_R = 0;
        while (proc_control_B.fullRank_R <= proc_control_B.mLambda_d) {
          TrialState->lambdaStopTest.data[proc_control_B.fullRank_R] =
            TrialState->lambdaStopTestPrev.data[proc_control_B.fullRank_R];
          proc_control_B.fullRank_R++;
        }
      } else {
        proc_control_B.fullRank_R = 0;
        while (proc_control_B.fullRank_R <= proc_control_B.mLambda_d) {
          TrialState->lambdaStopTestPrev.data[proc_control_B.fullRank_R] =
            TrialState->lambdaStopTest.data[proc_control_B.fullRank_R];
          proc_control_B.fullRank_R++;
        }
      }
    } else {
      proc_control_B.fullRank_R = 0;
      while (proc_control_B.fullRank_R <= proc_control_B.mLambda_d) {
        TrialState->lambdaStopTestPrev.data[proc_control_B.fullRank_R] =
          TrialState->lambdaStopTest.data[proc_control_B.fullRank_R];
        proc_control_B.fullRank_R++;
      }
    }

    if (isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
                       proc_control_B.optimRelativeFactor_h) &&
        (MeritFunction->nlpComplError <= 0.02 *
         proc_control_B.optimRelativeFactor_h)) {
      Flags->done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      Flags->done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        Flags->done = true;
        TrialState->sqpExitFlag = -3;
      } else {
        boolean_T guard1{ false };

        guard1 = false;
        if (TrialState->sqpIterations > 0) {
          boolean_T exitg1;
          dxTooSmall = true;
          proc_control_B.fullRank_R = 0;
          exitg1 = false;
          while ((!exitg1) && (proc_control_B.fullRank_R <= WorkingSet->nVar - 1))
          {
            if (0.1 * std::fmax(1.0, std::abs(TrialState->
                  xstarsqp[proc_control_B.fullRank_R])) <= std::abs
                (TrialState->delta_x.data[proc_control_B.fullRank_R])) {
              dxTooSmall = false;
              exitg1 = true;
            } else {
              proc_control_B.fullRank_R++;
            }
          }

          if (dxTooSmall) {
            if (!isFeasible) {
              if (Flags->stepType != 2) {
                Flags->stepType = 2;
                Flags->failedLineSearch = false;
                Flags->stepAccepted = false;
                guard1 = true;
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = -2;
              }
            } else if (WorkingSet->nActiveConstr > 0) {
              proc_updateWorkingSetForNewQP_l(TrialState->xstarsqp, WorkingSet,
                WorkingSet->sizes[2], TrialState->mNonlinIneq,
                TrialState->cIneq.data, TrialState->cEq, WorkingSet->sizes[3],
                lb, WorkingSet->sizes[4], WorkingSet->sizes[0]);
              proc_control_B.fullRank_R = 0;
              while (proc_control_B.fullRank_R <= WorkingSet->nActiveConstr - 1)
              {
                TrialState->lambda.data[proc_control_B.fullRank_R] = 0.0;
                proc_control_B.fullRank_R++;
              }

              proc_control_factorQRE(QRManager, WorkingSet->ATwset.data,
                WorkingSet->nVar, WorkingSet->nActiveConstr, WorkingSet->ldA);
              proc_control_computeQ_(QRManager, QRManager->mrows);
              if (WorkingSet->nVar >= WorkingSet->nActiveConstr) {
                proc_control_B.fullRank_R = WorkingSet->nVar;
              } else {
                proc_control_B.fullRank_R = WorkingSet->nActiveConstr;
              }

              proc_control_B.tol_l = std::fmin(1.4901161193847656E-8,
                static_cast<real_T>(proc_control_B.fullRank_R) *
                2.2204460492503131E-16) * std::abs(QRManager->QR.data[0]);
              if (WorkingSet->nVar <= WorkingSet->nActiveConstr) {
                proc_control_B.fullRank_R = WorkingSet->nVar;
              } else {
                proc_control_B.fullRank_R = WorkingSet->nActiveConstr;
              }

              proc_control_B.rankR = 0;
              proc_control_B.iQR_diag = 0;
              while ((proc_control_B.rankR < proc_control_B.fullRank_R) && (std::
                      abs(QRManager->QR.data[proc_control_B.iQR_diag]) >
                      proc_control_B.tol_l)) {
                proc_control_B.rankR++;
                proc_control_B.iQR_diag = (proc_control_B.iQR_diag +
                  QRManager->ldq) + 1;
              }

              proc_control_xgemv_mtm(WorkingSet->nVar, WorkingSet->nVar,
                QRManager->Q.data, QRManager->ldq, TrialState->grad.data,
                memspace->workspace_double.data);
              proc_control_xtrsv(proc_control_B.rankR, QRManager->QR.data,
                                 QRManager->ldq, memspace->workspace_double.data);
              if (WorkingSet->nActiveConstr <= proc_control_B.fullRank_R) {
                proc_control_B.fullRank_R = WorkingSet->nActiveConstr;
              }

              proc_control_B.rankR = 0;
              while (proc_control_B.rankR <= proc_control_B.fullRank_R - 1) {
                TrialState->lambda.data[QRManager->
                  jpvt.data[proc_control_B.rankR] - 1] =
                  memspace->workspace_double.data[proc_control_B.rankR];
                proc_control_B.rankR++;
              }

              proc_control_B.fullRank_R = WorkingSet->sizes[0];
              while (proc_control_B.fullRank_R + 1 <= WorkingSet->sizes[0] + 130)
              {
                TrialState->lambda.data[proc_control_B.fullRank_R] =
                  -TrialState->lambda.data[proc_control_B.fullRank_R];
                proc_control_B.fullRank_R++;
              }

              proc_control_sortLambdaQP(TrialState->lambda.data,
                WorkingSet->nActiveConstr, WorkingSet->sizes,
                WorkingSet->isActiveIdx, WorkingSet->Wid.data,
                WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
              proc_control_computeGradLag_b(memspace->workspace_double.data,
                WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
                WorkingSet->sizes[2], WorkingSet->Aineq.data,
                WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
                WorkingSet->sizes[0], WorkingSet->indexLB.data,
                WorkingSet->sizes[3], WorkingSet->indexUB.data,
                WorkingSet->sizes[4], TrialState->lambda.data);
              proc_con_computeDualFeasError_b(WorkingSet->nVar,
                memspace->workspace_double.data, &isFeasible,
                &proc_control_B.tol_l);
              proc_control_B.nlpComplErrorTmp = proc_control_computeComplError
                (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
                 TrialState->xstarsqp, WorkingSet->sizes[2],
                 TrialState->cIneq.data, WorkingSet->indexLB.data,
                 WorkingSet->sizes[3], lb, WorkingSet->indexUB.data,
                 WorkingSet->sizes[4], TrialState->lambda.data,
                 WorkingSet->sizes[0] + 1);
              if ((proc_control_B.tol_l <= 0.02 *
                   proc_control_B.optimRelativeFactor_h) &&
                  (proc_control_B.nlpComplErrorTmp <= 0.02 *
                   proc_control_B.optimRelativeFactor_h)) {
                MeritFunction->nlpDualFeasError = proc_control_B.tol_l;
                MeritFunction->nlpComplError = proc_control_B.nlpComplErrorTmp;
                MeritFunction->firstOrderOpt = std::fmax(proc_control_B.tol_l,
                  proc_control_B.nlpComplErrorTmp);
                proc_control_B.fullRank_R = 0;
                while (proc_control_B.fullRank_R <= proc_control_B.mLambda_d) {
                  TrialState->lambdaStopTest.data[proc_control_B.fullRank_R] =
                    TrialState->lambda.data[proc_control_B.fullRank_R];
                  proc_control_B.fullRank_R++;
                }

                Flags->done = true;
                TrialState->sqpExitFlag = 1;
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = 2;
              }
            } else {
              Flags->done = true;
              TrialState->sqpExitFlag = 2;
            }
          } else {
            guard1 = true;
          }
        } else {
          guard1 = true;
        }

        if (guard1) {
          if (TrialState->sqpIterations >= 400) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          } else if (TrialState->FunctionEvaluations >= 14700) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbiadz2i(int32_T m, int32_T n, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T x_data[], int32_T ix0,
  real_T y_data[])
{
  int32_T b;
  int32_T iac;
  int32_T ix;
  ix = ix0;
  b = (n - 1) * lda + ia0;
  iac = ia0;
  while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
    int32_T c;
    int32_T iy;
    iy = 0;
    c = (iac + m) - 1;
    for (int32_T ia{iac}; ia <= c; ia++) {
      y_data[iy] += A_data[ia - 1] * x_data[ix - 1];
      iy++;
    }

    ix++;
    iac += lda;
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
boolean_T proc_control::proc_control_BFGSUpdate(int32_T nvar, real_T Bk[21609],
  const real_T sk_data[], real_T yk_data[], real_T workspace_data[])
{
  real_T curvatureS;
  int32_T b_ix;
  int32_T b_jA;
  int32_T c_ix;
  int32_T ijA;
  int32_T ix;
  int32_T jy;
  boolean_T success;
  proc_control_B.dotSY = 0.0;
  if (nvar >= 1) {
    for (b_jA = 0; b_jA < nvar; b_jA++) {
      proc_control_B.dotSY += sk_data[b_jA] * yk_data[b_jA];
    }
  }

  for (b_jA = 0; b_jA < nvar; b_jA++) {
    workspace_data[b_jA] = 0.0;
  }

  ix = 0;
  jy = (nvar - 1) * 147 + 1;
  for (c_ix = 1; c_ix <= jy; c_ix += 147) {
    b_ix = 0;
    ijA = (c_ix + nvar) - 1;
    for (b_jA = c_ix; b_jA <= ijA; b_jA++) {
      workspace_data[b_ix] += Bk[b_jA - 1] * sk_data[ix];
      b_ix++;
    }

    ix++;
  }

  curvatureS = 0.0;
  if (nvar >= 1) {
    for (ix = 0; ix < nvar; ix++) {
      curvatureS += workspace_data[ix] * sk_data[ix];
    }
  }

  if (proc_control_B.dotSY < 0.2 * curvatureS) {
    proc_control_B.dotSY = 0.8 * curvatureS / (curvatureS - proc_control_B.dotSY);
    for (b_jA = 0; b_jA < nvar; b_jA++) {
      yk_data[b_jA] *= proc_control_B.dotSY;
    }

    if (!(1.0 - proc_control_B.dotSY == 0.0)) {
      for (ix = 0; ix < nvar; ix++) {
        yk_data[ix] += (1.0 - proc_control_B.dotSY) * workspace_data[ix];
      }
    }

    proc_control_B.dotSY = 0.0;
    if (nvar >= 1) {
      for (b_jA = 0; b_jA < nvar; b_jA++) {
        proc_control_B.dotSY += sk_data[b_jA] * yk_data[b_jA];
      }
    }
  }

  success = ((curvatureS > 2.2204460492503131E-16) && (proc_control_B.dotSY >
              2.2204460492503131E-16));
  if (success) {
    curvatureS = -1.0 / curvatureS;
    if (!(curvatureS == 0.0)) {
      ix = 0;
      jy = 0;
      for (c_ix = 0; c_ix < nvar; c_ix++) {
        if (workspace_data[jy] != 0.0) {
          real_T temp;
          temp = workspace_data[jy] * curvatureS;
          b_ix = 0;
          ijA = ix;
          b_jA = nvar + ix;
          while (ijA + 1 <= b_jA) {
            Bk[ijA] += workspace_data[b_ix] * temp;
            b_ix++;
            ijA++;
          }
        }

        jy++;
        ix += 147;
      }
    }

    proc_control_B.dotSY = 1.0 / proc_control_B.dotSY;
    if (!(proc_control_B.dotSY == 0.0)) {
      b_jA = 0;
      ix = 0;
      for (jy = 0; jy < nvar; jy++) {
        if (yk_data[ix] != 0.0) {
          curvatureS = yk_data[ix] * proc_control_B.dotSY;
          c_ix = 0;
          b_ix = b_jA;
          ijA = nvar + b_jA;
          while (b_ix + 1 <= ijA) {
            Bk[b_ix] += yk_data[c_ix] * curvatureS;
            c_ix++;
            b_ix++;
          }
        }

        ix++;
        b_jA += 147;
      }
    }
  }

  return success;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_factorQRE_f(s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj,
  int32_T mrows, int32_T ncols)
{
  if (mrows * ncols == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    obj->usedPivoting = true;
    obj->mrows = mrows;
    obj->ncols = ncols;
    if (mrows <= ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_xgeqp3(obj->QR.data, obj->QR.size, mrows, ncols, obj->jpvt.data,
                        obj->tau.data, &obj->tau.size);
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_countsort(int32_T x_data[], int32_T xLen,
  int32_T workspace_data[], int32_T xMin, int32_T xMax)
{
  if ((xLen > 1) && (xMax > xMin)) {
    int32_T idxEnd;
    int32_T idxStart;
    int32_T maxOffset_tmp;
    maxOffset_tmp = xMax - xMin;
    for (idxStart = 0; idxStart <= maxOffset_tmp; idxStart++) {
      workspace_data[idxStart] = 0;
    }

    for (idxStart = 0; idxStart < xLen; idxStart++) {
      idxEnd = x_data[idxStart] - xMin;
      workspace_data[idxEnd]++;
    }

    for (idxStart = 1; idxStart < maxOffset_tmp + 1; idxStart++) {
      workspace_data[idxStart] += workspace_data[idxStart - 1];
    }

    idxStart = 0;
    idxEnd = workspace_data[0];
    for (int32_T b_idxW{0}; b_idxW < maxOffset_tmp; b_idxW++) {
      while (idxStart + 1 <= idxEnd) {
        x_data[idxStart] = b_idxW + xMin;
        idxStart++;
      }

      idxStart = workspace_data[b_idxW];
      idxEnd = workspace_data[b_idxW + 1];
    }

    while (idxStart + 1 <= idxEnd) {
      x_data[idxStart] = xMax;
      idxStart++;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_removeConstr(s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *obj, int32_T idx_global)
{
  int32_T TYPE_tmp;
  int32_T idx_global_start_tmp_tmp;
  TYPE_tmp = obj->Wid.data[idx_global - 1] - 1;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE_tmp] + obj->
    Wlocalidx.data[idx_global - 1]) - 2] = false;
  idx_global_start_tmp_tmp = obj->nActiveConstr - 1;
  obj->Wid.data[idx_global - 1] = obj->Wid.data[obj->nActiveConstr - 1];
  obj->Wlocalidx.data[idx_global - 1] = obj->
    Wlocalidx.data[idx_global_start_tmp_tmp];
  for (int32_T b_idx{0}; b_idx < obj->nVar; b_idx++) {
    obj->ATwset.data[b_idx + obj->ldA * (idx_global - 1)] = obj->ATwset.data
      [obj->ldA * idx_global_start_tmp_tmp + b_idx];
  }

  obj->bwset.data[idx_global - 1] = obj->bwset.data[idx_global_start_tmp_tmp];
  obj->nActiveConstr--;
  obj->nWConstr[TYPE_tmp]--;
}

// Function for MATLAB Function: '<S210>/NLMPC'
int32_T proc_control::proc_control_RemoveDependentEq_
  (s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
   *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager)
{
  int32_T nDepInd;
  proc_control_B.nVar_i = workingset->nVar - 1;
  proc_control_B.mTotalWorkingEq = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  nDepInd = 0;
  if (proc_control_B.mTotalWorkingEq > 0) {
    proc_control_B.totalRank = 0;
    while (proc_control_B.totalRank <= proc_control_B.mTotalWorkingEq - 1) {
      proc_control_B.ix_o = 0;
      while (proc_control_B.ix_o <= proc_control_B.nVar_i) {
        qrmanager->QR.data[proc_control_B.totalRank + qrmanager->ldq *
          proc_control_B.ix_o] = workingset->ATwset.data[workingset->ldA *
          proc_control_B.totalRank + proc_control_B.ix_o];
        proc_control_B.ix_o++;
      }

      proc_control_B.totalRank++;
    }

    proc_control_B.iy_hy = proc_control_B.mTotalWorkingEq - workingset->nVar;
    if (proc_control_B.iy_hy > 0) {
      nDepInd = proc_control_B.iy_hy;
    }

    proc_control_B.totalRank = 0;
    while (proc_control_B.totalRank <= proc_control_B.nVar_i) {
      qrmanager->jpvt.data[proc_control_B.totalRank] = 0;
      proc_control_B.totalRank++;
    }

    proc_control_factorQRE_f(qrmanager, proc_control_B.mTotalWorkingEq,
      workingset->nVar);
    proc_control_B.tol = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    if (workingset->nVar <= proc_control_B.mTotalWorkingEq) {
      proc_control_B.totalRank = workingset->nVar;
    } else {
      proc_control_B.totalRank = proc_control_B.mTotalWorkingEq;
    }

    proc_control_B.totalRank += (proc_control_B.totalRank - 1) * qrmanager->ldq;
    while ((proc_control_B.totalRank > 0) && (std::abs(qrmanager->
             QR.data[proc_control_B.totalRank - 1]) < proc_control_B.tol)) {
      proc_control_B.totalRank = (proc_control_B.totalRank - qrmanager->ldq) - 1;
      nDepInd++;
    }

    if (nDepInd > 0) {
      boolean_T exitg1;
      proc_control_computeQ_(qrmanager, qrmanager->mrows);
      proc_control_B.totalRank = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.totalRank <= nDepInd - 1)) {
        proc_control_B.ix_o = ((proc_control_B.mTotalWorkingEq -
          proc_control_B.totalRank) - 1) * qrmanager->ldq;
        proc_control_B.qtb = 0.0;
        proc_control_B.iy_hy = 0;
        proc_control_B.b_k_p = 0;
        while (proc_control_B.b_k_p <= proc_control_B.mTotalWorkingEq - 1) {
          proc_control_B.qtb += qrmanager->Q.data[proc_control_B.ix_o] *
            workingset->bwset.data[proc_control_B.iy_hy];
          proc_control_B.ix_o++;
          proc_control_B.iy_hy++;
          proc_control_B.b_k_p++;
        }

        if (std::abs(proc_control_B.qtb) >= proc_control_B.tol) {
          nDepInd = -1;
          exitg1 = true;
        } else {
          proc_control_B.totalRank++;
        }
      }
    }

    if (nDepInd > 0) {
      proc_control_B.totalRank = 0;
      while (proc_control_B.totalRank <= proc_control_B.mTotalWorkingEq - 1) {
        proc_control_B.ix_o = qrmanager->ldq * proc_control_B.totalRank;
        proc_control_B.iy_hy = workingset->ldA * proc_control_B.totalRank;
        proc_control_B.b_k_p = 1;
        while (proc_control_B.b_k_p - 1 <= proc_control_B.nVar_i) {
          qrmanager->QR.data[(proc_control_B.ix_o + proc_control_B.b_k_p) - 1] =
            workingset->ATwset.data[(proc_control_B.iy_hy + proc_control_B.b_k_p)
            - 1];
          proc_control_B.b_k_p++;
        }

        proc_control_B.totalRank++;
      }

      proc_control_B.nVar_i = 0;
      while (proc_control_B.nVar_i <= workingset->nWConstr[0] - 1) {
        qrmanager->jpvt.data[proc_control_B.nVar_i] = 1;
        proc_control_B.nVar_i++;
      }

      proc_control_B.nVar_i = workingset->nWConstr[0];
      while (proc_control_B.nVar_i + 1 <= proc_control_B.mTotalWorkingEq) {
        qrmanager->jpvt.data[proc_control_B.nVar_i] = 0;
        proc_control_B.nVar_i++;
      }

      proc_control_factorQRE_f(qrmanager, workingset->nVar,
        proc_control_B.mTotalWorkingEq);
      proc_control_B.nVar_i = 0;
      while (proc_control_B.nVar_i <= nDepInd - 1) {
        memspace->workspace_int.data[proc_control_B.nVar_i] =
          qrmanager->jpvt.data[(proc_control_B.mTotalWorkingEq - nDepInd) +
          proc_control_B.nVar_i];
        proc_control_B.nVar_i++;
      }

      proc_control_countsort(memspace->workspace_int.data, nDepInd,
        memspace->workspace_sort.data, 1, proc_control_B.mTotalWorkingEq);
      proc_control_B.mTotalWorkingEq = nDepInd - 1;
      while (proc_control_B.mTotalWorkingEq + 1 > 0) {
        proc_control_B.nVar_i = (workingset->nWConstr[0] + workingset->nWConstr
          [1]) - 1;
        if ((proc_control_B.nVar_i + 1 != 0) && (memspace->
             workspace_int.data[proc_control_B.mTotalWorkingEq] <=
             proc_control_B.nVar_i + 1)) {
          if ((proc_control_B.nVar_i + 1 == workingset->nActiveConstr) ||
              (proc_control_B.nVar_i + 1 == memspace->
               workspace_int.data[proc_control_B.mTotalWorkingEq])) {
            workingset->mEqRemoved++;
            workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq] - 1];
            proc_control_removeConstr(workingset, memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq]);
          } else {
            workingset->mEqRemoved++;
            proc_control_B.totalRank = workingset->Wid.data
              [memspace->workspace_int.data[proc_control_B.mTotalWorkingEq] - 1]
              - 1;
            workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq] - 1];
            workingset->isActiveConstr.data[(workingset->isActiveIdx
              [workingset->Wid.data[memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq] - 1] - 1] +
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq] - 1]) - 2] =
              false;
            workingset->Wid.data[memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq] - 1] =
              workingset->Wid.data[proc_control_B.nVar_i];
            workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq] - 1] =
              workingset->Wlocalidx.data[proc_control_B.nVar_i];
            proc_control_B.ix_o = 0;
            while (proc_control_B.ix_o <= workingset->nVar - 1) {
              workingset->ATwset.data[proc_control_B.ix_o + workingset->ldA *
                (memspace->workspace_int.data[proc_control_B.mTotalWorkingEq] -
                 1)] = workingset->ATwset.data[workingset->ldA *
                proc_control_B.nVar_i + proc_control_B.ix_o];
              proc_control_B.ix_o++;
            }

            workingset->bwset.data[memspace->
              workspace_int.data[proc_control_B.mTotalWorkingEq] - 1] =
              workingset->bwset.data[proc_control_B.nVar_i];
            proc_control_B.ix_o = workingset->nActiveConstr - 1;
            workingset->Wid.data[proc_control_B.nVar_i] = workingset->
              Wid.data[workingset->nActiveConstr - 1];
            workingset->Wlocalidx.data[proc_control_B.nVar_i] =
              workingset->Wlocalidx.data[proc_control_B.ix_o];
            proc_control_B.iy_hy = 0;
            while (proc_control_B.iy_hy <= workingset->nVar - 1) {
              workingset->ATwset.data[proc_control_B.iy_hy + workingset->ldA *
                proc_control_B.nVar_i] = workingset->ATwset.data[workingset->ldA
                * proc_control_B.ix_o + proc_control_B.iy_hy];
              proc_control_B.iy_hy++;
            }

            workingset->bwset.data[proc_control_B.nVar_i] =
              workingset->bwset.data[proc_control_B.ix_o];
            workingset->nActiveConstr--;
            workingset->nWConstr[proc_control_B.totalRank]--;
          }
        }

        proc_control_B.mTotalWorkingEq--;
      }
    }
  }

  return nDepInd;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_contro_removeAllIneqConstr
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj)
{
  for (int32_T idx_global{obj->nWConstr[0] + obj->nWConstr[1]}; idx_global <
       obj->nActiveConstr; idx_global++) {
    obj->isActiveConstr.data[(obj->isActiveIdx[obj->Wid.data[idx_global] - 1] +
      obj->Wlocalidx.data[idx_global]) - 2] = false;
  }

  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + obj->nWConstr[1];
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_contr_RemoveDependentIneq_
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *
   qrmanager, s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace)
{
  proc_control_B.nFixedConstr_i = workingset->nWConstr[0] + workingset->
    nWConstr[1];
  proc_control_B.nVar_e = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    proc_control_B.tol_n = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    proc_control_B.nDepIneq_l = 0;
    while (proc_control_B.nDepIneq_l <= proc_control_B.nFixedConstr_i - 1) {
      qrmanager->jpvt.data[proc_control_B.nDepIneq_l] = 1;
      proc_control_B.nDepIneq_l++;
    }

    proc_control_B.nDepIneq_l = proc_control_B.nFixedConstr_i + 1;
    while (proc_control_B.nDepIneq_l <= workingset->nActiveConstr) {
      qrmanager->jpvt.data[proc_control_B.nDepIneq_l - 1] = 0;
      proc_control_B.nDepIneq_l++;
    }

    proc_control_B.nDepIneq_l = 0;
    while (proc_control_B.nDepIneq_l <= workingset->nActiveConstr - 1) {
      proc_control_B.idx_l = qrmanager->ldq * proc_control_B.nDepIneq_l;
      proc_control_B.idx_col_l = workingset->ldA * proc_control_B.nDepIneq_l;
      proc_control_B.k_ob = 1;
      while (proc_control_B.k_ob - 1 <= proc_control_B.nVar_e - 1) {
        qrmanager->QR.data[(proc_control_B.idx_l + proc_control_B.k_ob) - 1] =
          workingset->ATwset.data[(proc_control_B.idx_col_l +
          proc_control_B.k_ob) - 1];
        proc_control_B.k_ob++;
      }

      proc_control_B.nDepIneq_l++;
    }

    proc_control_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    proc_control_B.nDepIneq_l = 0;
    proc_control_B.idx_l = workingset->nActiveConstr - 1;
    while (proc_control_B.idx_l + 1 > proc_control_B.nVar_e) {
      proc_control_B.nDepIneq_l++;
      memspace->workspace_int.data[proc_control_B.nDepIneq_l - 1] =
        qrmanager->jpvt.data[proc_control_B.idx_l];
      proc_control_B.idx_l--;
    }

    if (proc_control_B.idx_l + 1 <= workingset->nVar) {
      proc_control_B.nVar_e = qrmanager->ldq * proc_control_B.idx_l +
        proc_control_B.idx_l;
      while ((proc_control_B.idx_l + 1 > proc_control_B.nFixedConstr_i) && (std::
              abs(qrmanager->QR.data[proc_control_B.nVar_e]) <
              proc_control_B.tol_n)) {
        proc_control_B.nDepIneq_l++;
        memspace->workspace_int.data[proc_control_B.nDepIneq_l - 1] =
          qrmanager->jpvt.data[proc_control_B.idx_l];
        proc_control_B.idx_l--;
        proc_control_B.nVar_e = (proc_control_B.nVar_e - qrmanager->ldq) - 1;
      }
    }

    proc_control_countsort(memspace->workspace_int.data,
      proc_control_B.nDepIneq_l, memspace->workspace_sort.data,
      proc_control_B.nFixedConstr_i + 1, workingset->nActiveConstr);
    proc_control_B.nFixedConstr_i = proc_control_B.nDepIneq_l;
    while (proc_control_B.nFixedConstr_i > 0) {
      proc_control_removeConstr(workingset, memspace->
        workspace_int.data[proc_control_B.nFixedConstr_i - 1]);
      proc_control_B.nFixedConstr_i--;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgeqrf(real_T A_data[], const int32_T A_size[2],
  int32_T m, int32_T n, real_T tau_data[], int32_T *tau_size)
{
  if (A_size[0] <= A_size[1]) {
    proc_control_B.minmana = A_size[0];
  } else {
    proc_control_B.minmana = A_size[1];
  }

  if (m <= n) {
    proc_control_B.minmn_bp = m;
  } else {
    proc_control_B.minmn_bp = n;
  }

  *tau_size = proc_control_B.minmana;
  if (proc_control_B.minmana - 1 >= 0) {
    std::memset(&tau_data[0], 0, proc_control_B.minmana * sizeof(real_T));
  }

  if (proc_control_B.minmn_bp >= 1) {
    proc_control_qrf(A_data, A_size, m, n, proc_control_B.minmn_bp, tau_data);
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_factorQR_h(s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj,
  const real_T A_data[], int32_T mrows, int32_T ncols, int32_T ldA)
{
  boolean_T guard1{ false };

  proc_control_B.b_idx_l = mrows * ncols;
  guard1 = false;
  if (proc_control_B.b_idx_l > 0) {
    proc_control_B.b_idx_l = 0;
    while (proc_control_B.b_idx_l <= ncols - 1) {
      proc_control_B.ix0 = ldA * proc_control_B.b_idx_l;
      proc_control_B.idx_k = obj->ldq * proc_control_B.b_idx_l;
      proc_control_B.k_n = 1;
      while (proc_control_B.k_n - 1 <= mrows - 1) {
        obj->QR.data[(proc_control_B.idx_k + proc_control_B.k_n) - 1] = A_data
          [(proc_control_B.ix0 + proc_control_B.k_n) - 1];
        proc_control_B.k_n++;
      }

      proc_control_B.b_idx_l++;
    }

    guard1 = true;
  } else if (proc_control_B.b_idx_l == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    guard1 = true;
  }

  if (guard1) {
    obj->usedPivoting = false;
    obj->mrows = mrows;
    obj->ncols = ncols;
    proc_control_B.b_idx_l = 0;
    while (proc_control_B.b_idx_l <= ncols - 1) {
      obj->jpvt.data[proc_control_B.b_idx_l] = proc_control_B.b_idx_l + 1;
      proc_control_B.b_idx_l++;
    }

    if (mrows <= ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols, obj->tau.data,
                        &obj->tau.size);
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_factorQR(s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj,
  int32_T mrows, int32_T ncols)
{
  obj->usedPivoting = false;
  obj->mrows = mrows;
  obj->ncols = ncols;
  proc_control_B.idx_h = 0;
  while (proc_control_B.idx_h <= ncols - 1) {
    obj->jpvt.data[proc_control_B.idx_h] = proc_control_B.idx_h + 1;
    proc_control_B.idx_h++;
  }

  if (mrows <= ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols, obj->tau.data,
                      &obj->tau.size);
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemv_mtmcj(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      int32_T d;
      int32_T ix;
      ix = 0;
      proc_control_B.c_ci = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_B.c_ci += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += proc_control_B.c_ci;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemv_mtmc(int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      int32_T ix;
      ix = 0;
      proc_control_B.c_bv = 0.0;
      for (int32_T ia{iac}; ia <= iac + 146; ia++) {
        proc_control_B.c_bv += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += proc_control_B.c_bv;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
real_T proc_control::proc_con_maxConstraintViolation
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, const real_T x_data[])
{
  real_T v;
  int32_T mFixed;
  int32_T mIneq;
  int32_T mUB;
  proc_control_B.mLB_k = obj->sizes[3];
  mUB = obj->sizes[4];
  mFixed = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_xgemv_mtmc(obj->sizes[2], obj->Aineq.data, obj->ldA, x_data,
        obj->maxConstrWorkspace.data);
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] -= x_data[b_k + 147];
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmc(130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (int32_T b_k{0}; b_k < 130; b_k++) {
      obj->maxConstrWorkspace.data[b_k] = (obj->maxConstrWorkspace.data[b_k] -
        x_data[(mIneq + b_k) + 148]) + x_data[(obj->sizes[2] + b_k) + 277];
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[b_k]));
    }
  } else {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_xgemv_mtmcj(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcj(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (mIneq = 0; mIneq < 130; mIneq++) {
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[mIneq]));
    }
  }

  if (proc_control_B.mLB_k > 0) {
    for (mIneq = 0; mIneq < proc_control_B.mLB_k; mIneq++) {
      v = std::fmax(v, -x_data[obj->indexLB.data[mIneq] - 1] - obj->lb.data
                    [obj->indexLB.data[mIneq] - 1]);
    }
  }

  if (mUB > 0) {
    proc_control_B.mLB_k = 0;
    while (proc_control_B.mLB_k <= mUB - 1) {
      v = std::fmax(v, x_data[obj->indexUB.data[proc_control_B.mLB_k] - 1] -
                    obj->ub.data[obj->indexUB.data[proc_control_B.mLB_k] - 1]);
      proc_control_B.mLB_k++;
    }
  }

  if (mFixed > 0) {
    for (mUB = 0; mUB < mFixed; mUB++) {
      v = std::fmax(v, std::abs(x_data[obj->indexFixed.data[mUB] - 1] -
        obj->ub.data[obj->indexFixed.data[mUB] - 1]));
    }
  }

  return v;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjb(int32_T m, int32_T n, const real_T
  A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      int32_T d;
      int32_T ix;
      ix = ix0;
      proc_control_B.c_is = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_B.c_is += x_data[ix - 1] * A_data[ia - 1];
        ix++;
      }

      y_data[iy] += proc_control_B.c_is;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
real_T proc_control::proc_c_maxConstraintViolation_d
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, const real_T x_data[], int32_T ix0)
{
  real_T v;
  int32_T mFixed;
  int32_T mIneq;
  int32_T mUB;
  proc_control_B.mLB_m = obj->sizes[3];
  mUB = obj->sizes[4];
  mFixed = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_xgemv_mtmcjb(147, obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, ix0, obj->maxConstrWorkspace.data);
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] -= x_data[(ix0 + b_k) + 146];
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcjb(147, 130, obj->Aeq.data, obj->ldA, x_data, ix0,
      obj->maxConstrWorkspace.data);
    for (int32_T b_k{0}; b_k < 130; b_k++) {
      obj->maxConstrWorkspace.data[b_k] = (obj->maxConstrWorkspace.data[b_k] -
        x_data[((ix0 + mIneq) + b_k) + 147]) + x_data[((ix0 + obj->sizes[2]) +
        b_k) + 276];
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[b_k]));
    }
  } else {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_xgemv_mtmcjb(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, ix0, obj->maxConstrWorkspace.data);
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcjb(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data,
      ix0, obj->maxConstrWorkspace.data);
    for (mIneq = 0; mIneq < 130; mIneq++) {
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[mIneq]));
    }
  }

  if (proc_control_B.mLB_m > 0) {
    for (mIneq = 0; mIneq < proc_control_B.mLB_m; mIneq++) {
      v = std::fmax(v, -x_data[(ix0 + obj->indexLB.data[mIneq]) - 2] -
                    obj->lb.data[obj->indexLB.data[mIneq] - 1]);
    }
  }

  if (mUB > 0) {
    proc_control_B.mLB_m = 0;
    while (proc_control_B.mLB_m <= mUB - 1) {
      v = std::fmax(v, x_data[(ix0 + obj->indexUB.data[proc_control_B.mLB_m]) -
                    2] - obj->ub.data[obj->indexUB.data[proc_control_B.mLB_m] -
                    1]);
      proc_control_B.mLB_m++;
    }
  }

  if (mFixed > 0) {
    for (mUB = 0; mUB < mFixed; mUB++) {
      v = std::fmax(v, std::abs(x_data[(ix0 + obj->indexFixed.data[mUB]) - 2] -
        obj->ub.data[obj->indexFixed.data[mUB] - 1]));
    }
  }

  return v;
}

// Function for MATLAB Function: '<S210>/NLMPC'
boolean_T proc_control::proc_co_feasibleX0ForWorkingSet(real_T workspace_data[],
  const int32_T workspace_size[2], real_T xCurrent_data[],
  s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T
  *qrmanager)
{
  boolean_T nonDegenerateWset;
  proc_control_B.mWConstr_tmp_tmp = workingset->nActiveConstr - 1;
  proc_control_B.nVar_k = workingset->nVar;
  nonDegenerateWset = true;
  if (workingset->nActiveConstr != 0) {
    proc_control_B.iy_m = 0;
    while (proc_control_B.iy_m <= proc_control_B.mWConstr_tmp_tmp) {
      workspace_data[proc_control_B.iy_m] = workingset->
        bwset.data[proc_control_B.iy_m];
      workspace_data[proc_control_B.iy_m + workspace_size[0]] =
        workingset->bwset.data[proc_control_B.iy_m];
      proc_control_B.iy_m++;
    }

    proc_control_B.ldq = workingset->ldA;
    if (workingset->nActiveConstr != 0) {
      proc_control_B.iy_m = 0;
      proc_control_B.iAcol = (workingset->nActiveConstr - 1) * workingset->ldA +
        1;
      proc_control_B.b_br = 1;
      while (((proc_control_B.ldq > 0) && (proc_control_B.b_br <=
               proc_control_B.iAcol)) || ((proc_control_B.ldq < 0) &&
              (proc_control_B.b_br >= proc_control_B.iAcol))) {
        proc_control_B.ix_a = 0;
        proc_control_B.c_d = 0.0;
        proc_control_B.jBcol = (proc_control_B.b_br + proc_control_B.nVar_k) - 1;
        proc_control_B.b_ar = proc_control_B.b_br;
        while (proc_control_B.b_ar <= proc_control_B.jBcol) {
          proc_control_B.c_d += workingset->ATwset.data[proc_control_B.b_ar - 1]
            * xCurrent_data[proc_control_B.ix_a];
          proc_control_B.ix_a++;
          proc_control_B.b_ar++;
        }

        workspace_data[proc_control_B.iy_m] += -proc_control_B.c_d;
        proc_control_B.iy_m++;
        proc_control_B.b_br += proc_control_B.ldq;
      }
    }

    if (workingset->nActiveConstr >= workingset->nVar) {
      proc_control_B.ldq = 0;
      while (proc_control_B.ldq <= proc_control_B.nVar_k - 1) {
        proc_control_B.ix_a = qrmanager->ldq * proc_control_B.ldq;
        proc_control_B.iAcol = 0;
        while (proc_control_B.iAcol <= proc_control_B.mWConstr_tmp_tmp) {
          qrmanager->QR.data[proc_control_B.iAcol + proc_control_B.ix_a] =
            workingset->ATwset.data[workingset->ldA * proc_control_B.iAcol +
            proc_control_B.ldq];
          proc_control_B.iAcol++;
        }

        proc_control_B.ldq++;
      }

      proc_control_factorQR(qrmanager, workingset->nActiveConstr,
                            workingset->nVar);
      proc_control_computeQ_(qrmanager, qrmanager->mrows);
      proc_control_B.ldq = qrmanager->ldq;
      proc_control_B.iy_m = workspace_size[0];
      proc_control_B.iAcol = workspace_size[0] * workspace_size[1];
      if (proc_control_B.iAcol - 1 >= 0) {
        std::memcpy(&proc_control_B.B_data[0], &workspace_data[0],
                    proc_control_B.iAcol * sizeof(real_T));
      }

      proc_control_B.ix_a = 0;
      while ((proc_control_B.iy_m > 0) && (proc_control_B.ix_a <=
              proc_control_B.iy_m)) {
        proc_control_B.iAcol = proc_control_B.ix_a;
        proc_control_B.b_br = proc_control_B.ix_a + proc_control_B.nVar_k;
        while (proc_control_B.iAcol + 1 <= proc_control_B.b_br) {
          workspace_data[proc_control_B.iAcol] = 0.0;
          proc_control_B.iAcol++;
        }

        proc_control_B.ix_a += proc_control_B.iy_m;
      }

      proc_control_B.b_br = -1;
      proc_control_B.jBcol = 0;
      while ((proc_control_B.iy_m > 0) && (proc_control_B.jBcol <=
              proc_control_B.iy_m)) {
        proc_control_B.b_ar = -1;
        proc_control_B.iAcol = proc_control_B.jBcol;
        proc_control_B.ix_a = proc_control_B.jBcol + proc_control_B.nVar_k;
        while (proc_control_B.iAcol + 1 <= proc_control_B.ix_a) {
          proc_control_B.c_d = 0.0;
          proc_control_B.f_ce = 1;
          while (proc_control_B.f_ce - 1 <= proc_control_B.mWConstr_tmp_tmp) {
            proc_control_B.c_d += qrmanager->Q.data[proc_control_B.f_ce +
              proc_control_B.b_ar] * proc_control_B.B_data[proc_control_B.f_ce +
              proc_control_B.b_br];
            proc_control_B.f_ce++;
          }

          workspace_data[proc_control_B.iAcol] += proc_control_B.c_d;
          proc_control_B.b_ar += proc_control_B.ldq;
          proc_control_B.iAcol++;
        }

        proc_control_B.b_br += proc_control_B.iy_m;
        proc_control_B.jBcol += proc_control_B.iy_m;
      }

      proc_control_B.b_ar = workingset->nVar;
      while (proc_control_B.b_ar > 0) {
        proc_control_B.iAcol = (proc_control_B.b_ar - 1) * proc_control_B.ldq -
          1;
        proc_control_B.c_d = workspace_data[proc_control_B.b_ar + -1];
        if (proc_control_B.c_d != 0.0) {
          workspace_data[proc_control_B.b_ar + -1] = proc_control_B.c_d /
            qrmanager->QR.data[proc_control_B.b_ar + proc_control_B.iAcol];
          proc_control_B.ix_a = 1;
          while (proc_control_B.ix_a - 1 <= proc_control_B.b_ar - 2) {
            workspace_data[proc_control_B.ix_a + -1] -=
              workspace_data[proc_control_B.b_ar + -1] * qrmanager->
              QR.data[proc_control_B.ix_a + proc_control_B.iAcol];
            proc_control_B.ix_a++;
          }
        }

        proc_control_B.b_ar--;
      }

      proc_control_B.b_ar = workingset->nVar;
      while (proc_control_B.b_ar > 0) {
        proc_control_B.iAcol = (proc_control_B.b_ar - 1) * proc_control_B.ldq -
          1;
        proc_control_B.jBcol = (proc_control_B.iy_m + proc_control_B.b_ar) - 1;
        if (workspace_data[proc_control_B.jBcol] != 0.0) {
          workspace_data[proc_control_B.jBcol] /= qrmanager->
            QR.data[proc_control_B.b_ar + proc_control_B.iAcol];
          proc_control_B.ix_a = 1;
          while (proc_control_B.ix_a - 1 <= proc_control_B.b_ar - 2) {
            proc_control_B.mWConstr_tmp_tmp = (proc_control_B.iy_m +
              proc_control_B.ix_a) - 1;
            workspace_data[proc_control_B.mWConstr_tmp_tmp] -=
              qrmanager->QR.data[proc_control_B.ix_a + proc_control_B.iAcol] *
              workspace_data[proc_control_B.jBcol];
            proc_control_B.ix_a++;
          }
        }

        proc_control_B.b_ar--;
      }
    } else {
      proc_control_factorQR_h(qrmanager, workingset->ATwset.data,
        workingset->nVar, workingset->nActiveConstr, workingset->ldA);
      proc_control_computeQ_(qrmanager, qrmanager->minRowCol);
      proc_control_B.ldq = qrmanager->ldq;
      proc_control_B.iy_m = workspace_size[0];
      proc_control_B.b_ar = 1;
      while (proc_control_B.b_ar - 1 <= proc_control_B.mWConstr_tmp_tmp) {
        proc_control_B.iAcol = (proc_control_B.b_ar - 1) * proc_control_B.ldq -
          1;
        proc_control_B.c_d = workspace_data[proc_control_B.b_ar + -1];
        proc_control_B.ix_a = 1;
        while (proc_control_B.ix_a - 1 <= proc_control_B.b_ar - 2) {
          proc_control_B.c_d -= qrmanager->QR.data[proc_control_B.ix_a +
            proc_control_B.iAcol] * workspace_data[proc_control_B.ix_a + -1];
          proc_control_B.ix_a++;
        }

        workspace_data[proc_control_B.b_ar + -1] = proc_control_B.c_d /
          qrmanager->QR.data[proc_control_B.b_ar + proc_control_B.iAcol];
        proc_control_B.b_ar++;
      }

      proc_control_B.b_ar = 1;
      while (proc_control_B.b_ar - 1 <= proc_control_B.mWConstr_tmp_tmp) {
        proc_control_B.iAcol = (proc_control_B.b_ar - 1) * proc_control_B.ldq -
          1;
        proc_control_B.c_d = workspace_data[(proc_control_B.iy_m +
          proc_control_B.b_ar) - 1];
        proc_control_B.ix_a = 1;
        while (proc_control_B.ix_a - 1 <= proc_control_B.b_ar - 2) {
          proc_control_B.c_d -= workspace_data[(proc_control_B.iy_m +
            proc_control_B.ix_a) - 1] * qrmanager->QR.data[proc_control_B.ix_a +
            proc_control_B.iAcol];
          proc_control_B.ix_a++;
        }

        workspace_data[(proc_control_B.b_ar + proc_control_B.iy_m) - 1] =
          proc_control_B.c_d / qrmanager->QR.data[proc_control_B.b_ar +
          proc_control_B.iAcol];
        proc_control_B.b_ar++;
      }

      proc_control_B.iAcol = workspace_size[0] * workspace_size[1];
      if (proc_control_B.iAcol - 1 >= 0) {
        std::memcpy(&proc_control_B.B_data[0], &workspace_data[0],
                    proc_control_B.iAcol * sizeof(real_T));
      }

      proc_control_B.ix_a = 0;
      while ((proc_control_B.iy_m > 0) && (proc_control_B.ix_a <=
              proc_control_B.iy_m)) {
        proc_control_B.iAcol = proc_control_B.ix_a;
        proc_control_B.b_br = proc_control_B.ix_a + proc_control_B.nVar_k;
        while (proc_control_B.iAcol + 1 <= proc_control_B.b_br) {
          workspace_data[proc_control_B.iAcol] = 0.0;
          proc_control_B.iAcol++;
        }

        proc_control_B.ix_a += proc_control_B.iy_m;
      }

      proc_control_B.jBcol = 1;
      proc_control_B.b_ar = 0;
      while ((proc_control_B.iy_m > 0) && (proc_control_B.b_ar <=
              proc_control_B.iy_m)) {
        proc_control_B.iAcol = -1;
        proc_control_B.ix_a = proc_control_B.jBcol;
        proc_control_B.f_ce = proc_control_B.jBcol +
          proc_control_B.mWConstr_tmp_tmp;
        while (proc_control_B.ix_a <= proc_control_B.f_ce) {
          proc_control_B.b_br = proc_control_B.iAcol;
          proc_control_B.b_ic = proc_control_B.b_ar;
          proc_control_B.g_b = proc_control_B.b_ar + proc_control_B.nVar_k;
          while (proc_control_B.b_ic + 1 <= proc_control_B.g_b) {
            proc_control_B.b_br++;
            workspace_data[proc_control_B.b_ic] +=
              proc_control_B.B_data[proc_control_B.ix_a - 1] * qrmanager->
              Q.data[proc_control_B.b_br];
            proc_control_B.b_ic++;
          }

          proc_control_B.iAcol += proc_control_B.ldq;
          proc_control_B.ix_a++;
        }

        proc_control_B.jBcol += proc_control_B.iy_m;
        proc_control_B.b_ar += proc_control_B.iy_m;
      }
    }

    proc_control_B.iy_m = 0;
    int32_T exitg1;
    do {
      exitg1 = 0;
      if (proc_control_B.iy_m <= proc_control_B.nVar_k - 1) {
        proc_control_B.c_d = workspace_data[proc_control_B.iy_m];
        if (std::isinf(proc_control_B.c_d) || std::isnan(proc_control_B.c_d)) {
          nonDegenerateWset = false;
          exitg1 = 1;
        } else {
          proc_control_B.c_d = workspace_data[proc_control_B.iy_m +
            workspace_size[0]];
          if (std::isinf(proc_control_B.c_d) || std::isnan(proc_control_B.c_d))
          {
            nonDegenerateWset = false;
            exitg1 = 1;
          } else {
            proc_control_B.iy_m++;
          }
        }
      } else {
        proc_control_B.iy_m = 0;
        while (proc_control_B.iy_m <= proc_control_B.nVar_k - 1) {
          workspace_data[proc_control_B.iy_m] +=
            xCurrent_data[proc_control_B.iy_m];
          proc_control_B.iy_m++;
        }

        proc_control_B.c_d = proc_con_maxConstraintViolation(workingset,
          workspace_data);
        proc_control_B.constrViolation_basicX = proc_c_maxConstraintViolation_d
          (workingset, workspace_data, workspace_size[0] + 1);
        if ((proc_control_B.c_d <= 2.2204460492503131E-16) ||
            (proc_control_B.c_d < proc_control_B.constrViolation_basicX)) {
          proc_control_B.iy_m = 0;
          while (proc_control_B.iy_m <= proc_control_B.nVar_k - 1) {
            xCurrent_data[proc_control_B.iy_m] =
              workspace_data[proc_control_B.iy_m];
            proc_control_B.iy_m++;
          }
        } else {
          proc_control_B.iy_m = 0;
          while (proc_control_B.iy_m <= proc_control_B.nVar_k - 1) {
            xCurrent_data[proc_control_B.iy_m] = workspace_data[workspace_size[0]
              + proc_control_B.iy_m];
            proc_control_B.iy_m++;
          }
        }

        exitg1 = 1;
      }
    } while (exitg1 == 0);
  }

  return nonDegenerateWset;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_con_RemoveDependentIneq__f
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *
   qrmanager, s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace)
{
  proc_control_B.nFixedConstr = workingset->nWConstr[0] + workingset->nWConstr[1];
  proc_control_B.nVar_n = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    proc_control_B.tol_a = 1000.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    proc_control_B.nDepIneq = 0;
    while (proc_control_B.nDepIneq <= proc_control_B.nFixedConstr - 1) {
      qrmanager->jpvt.data[proc_control_B.nDepIneq] = 1;
      proc_control_B.nDepIneq++;
    }

    proc_control_B.nDepIneq = proc_control_B.nFixedConstr + 1;
    while (proc_control_B.nDepIneq <= workingset->nActiveConstr) {
      qrmanager->jpvt.data[proc_control_B.nDepIneq - 1] = 0;
      proc_control_B.nDepIneq++;
    }

    proc_control_B.nDepIneq = 0;
    while (proc_control_B.nDepIneq <= workingset->nActiveConstr - 1) {
      proc_control_B.idx_ca = qrmanager->ldq * proc_control_B.nDepIneq;
      proc_control_B.idx_col_j = workingset->ldA * proc_control_B.nDepIneq;
      proc_control_B.k_e = 1;
      while (proc_control_B.k_e - 1 <= proc_control_B.nVar_n - 1) {
        qrmanager->QR.data[(proc_control_B.idx_ca + proc_control_B.k_e) - 1] =
          workingset->ATwset.data[(proc_control_B.idx_col_j + proc_control_B.k_e)
          - 1];
        proc_control_B.k_e++;
      }

      proc_control_B.nDepIneq++;
    }

    proc_control_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    proc_control_B.nDepIneq = 0;
    proc_control_B.idx_ca = workingset->nActiveConstr - 1;
    while (proc_control_B.idx_ca + 1 > proc_control_B.nVar_n) {
      proc_control_B.nDepIneq++;
      memspace->workspace_int.data[proc_control_B.nDepIneq - 1] =
        qrmanager->jpvt.data[proc_control_B.idx_ca];
      proc_control_B.idx_ca--;
    }

    if (proc_control_B.idx_ca + 1 <= workingset->nVar) {
      proc_control_B.nVar_n = qrmanager->ldq * proc_control_B.idx_ca +
        proc_control_B.idx_ca;
      while ((proc_control_B.idx_ca + 1 > proc_control_B.nFixedConstr) && (std::
              abs(qrmanager->QR.data[proc_control_B.nVar_n]) <
              proc_control_B.tol_a)) {
        proc_control_B.nDepIneq++;
        memspace->workspace_int.data[proc_control_B.nDepIneq - 1] =
          qrmanager->jpvt.data[proc_control_B.idx_ca];
        proc_control_B.idx_ca--;
        proc_control_B.nVar_n = (proc_control_B.nVar_n - qrmanager->ldq) - 1;
      }
    }

    proc_control_countsort(memspace->workspace_int.data, proc_control_B.nDepIneq,
      memspace->workspace_sort.data, proc_control_B.nFixedConstr + 1,
      workingset->nActiveConstr);
    proc_control_B.nFixedConstr = proc_control_B.nDepIneq;
    while (proc_control_B.nFixedConstr > 0) {
      proc_control_removeConstr(workingset, memspace->
        workspace_int.data[proc_control_B.nFixedConstr - 1]);
      proc_control_B.nFixedConstr--;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbia(int32_T m, int32_T n, const
  real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      int32_T d;
      int32_T ix;
      ix = 0;
      proc_control_B.c_f = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_B.c_f += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += proc_control_B.c_f;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbi(int32_T n, const real_T A_data[],
  int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      int32_T ix;
      ix = 0;
      proc_control_B.c_cc = 0.0;
      for (int32_T ia{iac}; ia <= iac + 146; ia++) {
        proc_control_B.c_cc += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += proc_control_B.c_cc;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
real_T proc_control::proc__maxConstraintViolation_du
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, const real_T x_data[])
{
  real_T v;
  int32_T mFixed;
  int32_T mIneq;
  int32_T mUB;
  proc_control_B.mLB_f = obj->sizes[3];
  mUB = obj->sizes[4];
  mFixed = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_xgemv_mtmcjbi(obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, obj->maxConstrWorkspace.data);
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] -= x_data[b_k + 147];
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcjbi(130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (int32_T b_k{0}; b_k < 130; b_k++) {
      obj->maxConstrWorkspace.data[b_k] = (obj->maxConstrWorkspace.data[b_k] -
        x_data[(mIneq + b_k) + 148]) + x_data[(obj->sizes[2] + b_k) + 277];
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[b_k]));
    }
  } else {
    v = 0.0;
    mIneq = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        obj->maxConstrWorkspace.data[b_k] = obj->bineq.data[b_k];
      }

      proc_control_xgemv_mtmcjbia(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      for (int32_T b_k{0}; b_k <= mIneq; b_k++) {
        v = std::fmax(v, obj->maxConstrWorkspace.data[b_k]);
      }
    }

    std::memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof
                (real_T));
    proc_control_xgemv_mtmcjbia(obj->nVar, 130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (mIneq = 0; mIneq < 130; mIneq++) {
      v = std::fmax(v, std::abs(obj->maxConstrWorkspace.data[mIneq]));
    }
  }

  if (proc_control_B.mLB_f > 0) {
    for (mIneq = 0; mIneq < proc_control_B.mLB_f; mIneq++) {
      v = std::fmax(v, -x_data[obj->indexLB.data[mIneq] - 1] - obj->lb.data
                    [obj->indexLB.data[mIneq] - 1]);
    }
  }

  if (mUB > 0) {
    proc_control_B.mLB_f = 0;
    while (proc_control_B.mLB_f <= mUB - 1) {
      v = std::fmax(v, x_data[obj->indexUB.data[proc_control_B.mLB_f] - 1] -
                    obj->ub.data[obj->indexUB.data[proc_control_B.mLB_f] - 1]);
      proc_control_B.mLB_f++;
    }
  }

  if (mFixed > 0) {
    for (mUB = 0; mUB < mFixed; mUB++) {
      v = std::fmax(v, std::abs(x_data[obj->indexFixed.data[mUB] - 1] -
        obj->ub.data[obj->indexFixed.data[mUB] - 1]));
    }
  }

  return v;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_PresolveWorkingSet
  (s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution, s_OnOuVjEActeQRN4FyNqSwB_proc_T
   *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *workingset,
   s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager)
{
  solution->state = 82;
  proc_control_B.b_ni = proc_control_RemoveDependentEq_(memspace, workingset,
    qrmanager);
  if ((proc_control_B.b_ni != -1) && (workingset->nActiveConstr <=
       qrmanager->ldq)) {
    boolean_T guard1{ false };

    boolean_T okWorkingSet;
    proc_contr_RemoveDependentIneq_(workingset, qrmanager, memspace);
    okWorkingSet = proc_co_feasibleX0ForWorkingSet
      (memspace->workspace_double.data, memspace->workspace_double.size,
       solution->xstar.data, workingset, qrmanager);
    guard1 = false;
    if (!okWorkingSet) {
      proc_con_RemoveDependentIneq__f(workingset, qrmanager, memspace);
      okWorkingSet = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         solution->xstar.data, workingset, qrmanager);
      if (!okWorkingSet) {
        solution->state = -7;
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      if (workingset->nWConstr[0] + workingset->nWConstr[1] == workingset->nVar)
      {
        proc_control_B.constrViolation = proc__maxConstraintViolation_du
          (workingset, solution->xstar.data);
        if (proc_control_B.constrViolation > 0.02) {
          solution->state = -2;
        }
      }
    }
  } else {
    solution->state = -3;
    proc_contro_removeAllIneqConstr(workingset);
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbiad(int32_T m, int32_T n, const
  real_T A[21609], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if ((m != 0) && (n != 0)) {
    int32_T b;
    int32_T iac;
    int32_T ix;
    for (ix = 0; ix < m; ix++) {
      y_data[ix] = 0.0;
    }

    ix = 0;
    b = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      int32_T c;
      int32_T iy;
      iy = 0;
      c = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= c; ia++) {
        y_data[iy] += A[ia - 1] * x_data[ix];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_contro_computeGrad_StoreHx
  (s_oZGbvi5mjKKebHB9aR5DoG_proc_T *obj, const real_T H[21609], const real_T
   f_data[], const real_T x_data[])
{
  switch (obj->objtype) {
   case 5:
    for (int32_T maxRegVar{0}; maxRegVar <= obj->nvar - 2; maxRegVar++) {
      obj->grad.data[maxRegVar] = 0.0;
    }

    obj->grad.data[obj->nvar - 1] = obj->gammaScalar;
    break;

   case 3:
    {
      int32_T maxRegVar;
      proc_control_xgemv_mtmcjbiad(obj->nvar, obj->nvar, H, obj->nvar, x_data,
        obj->Hx.data);
      for (maxRegVar = 0; maxRegVar < obj->nvar; maxRegVar++) {
        obj->grad.data[maxRegVar] = obj->Hx.data[maxRegVar];
      }

      if (obj->hasLinear && (obj->nvar >= 1)) {
        maxRegVar = obj->nvar - 1;
        for (int32_T iy{0}; iy <= maxRegVar; iy++) {
          obj->grad.data[iy] += f_data[iy];
        }
      }
    }
    break;

   default:
    {
      int32_T iy;
      int32_T maxRegVar;
      maxRegVar = obj->maxVar - 1;
      proc_control_xgemv_mtmcjbiad(obj->nvar, obj->nvar, H, obj->nvar, x_data,
        obj->Hx.data);
      for (iy = obj->nvar; iy < maxRegVar; iy++) {
        obj->Hx.data[iy] = obj->beta * x_data[iy];
      }

      for (int32_T d_i{0}; d_i < maxRegVar; d_i++) {
        obj->grad.data[d_i] = obj->Hx.data[d_i];
      }

      if (obj->hasLinear && (obj->nvar >= 1)) {
        maxRegVar = obj->nvar - 1;
        for (iy = 0; iy <= maxRegVar; iy++) {
          obj->grad.data[iy] += f_data[iy];
        }
      }

      maxRegVar = (obj->maxVar - obj->nvar) - 1;
      if (maxRegVar >= 1) {
        iy = obj->nvar;
        for (int32_T d_i{0}; d_i < maxRegVar; d_i++) {
          obj->grad.data[iy] += obj->rho;
          iy++;
        }
      }
    }
    break;
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
real_T proc_control::proc_contro_computeFval_ReuseHx(const
  s_oZGbvi5mjKKebHB9aR5DoG_proc_T *obj, real_T workspace_data[], const real_T
  f_data[], const real_T x_data[])
{
  real_T val;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    if (obj->hasLinear) {
      for (int32_T maxRegVar{0}; maxRegVar < obj->nvar; maxRegVar++) {
        workspace_data[maxRegVar] = 0.5 * obj->Hx.data[maxRegVar] +
          f_data[maxRegVar];
      }

      val = 0.0;
      if (obj->nvar >= 1) {
        for (int32_T maxRegVar{0}; maxRegVar < obj->nvar; maxRegVar++) {
          val += workspace_data[maxRegVar] * x_data[maxRegVar];
        }
      }
    } else {
      val = 0.0;
      if (obj->nvar >= 1) {
        for (int32_T maxRegVar{0}; maxRegVar < obj->nvar; maxRegVar++) {
          val += x_data[maxRegVar] * obj->Hx.data[maxRegVar];
        }
      }

      val *= 0.5;
    }
    break;

   default:
    {
      int32_T maxRegVar;
      maxRegVar = obj->maxVar - 1;
      if (obj->hasLinear) {
        int32_T d_k;
        for (d_k = 0; d_k < obj->nvar; d_k++) {
          workspace_data[d_k] = f_data[d_k];
        }

        d_k = obj->maxVar - obj->nvar;
        for (int32_T c_k{0}; c_k <= d_k - 2; c_k++) {
          workspace_data[obj->nvar + c_k] = obj->rho;
        }

        for (d_k = 0; d_k < maxRegVar; d_k++) {
          workspace_data[d_k] += 0.5 * obj->Hx.data[d_k];
        }

        val = 0.0;
        if (obj->maxVar - 1 >= 1) {
          for (maxRegVar = 0; maxRegVar <= obj->maxVar - 2; maxRegVar++) {
            val += workspace_data[maxRegVar] * x_data[maxRegVar];
          }
        }
      } else {
        val = 0.0;
        if (obj->maxVar - 1 >= 1) {
          for (int32_T d_k{0}; d_k <= obj->maxVar - 2; d_k++) {
            val += x_data[d_k] * obj->Hx.data[d_k];
          }
        }

        val *= 0.5;
        for (int32_T d_k = obj->nvar; d_k < maxRegVar; d_k++) {
          val += x_data[d_k] * obj->rho;
        }
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xrotg_XzIjz1eG(real_T *a, real_T *b, real_T *c,
  real_T *s)
{
  proc_control_B.roe = *b;
  proc_control_B.absa = std::abs(*a);
  proc_control_B.absb = std::abs(*b);
  if (proc_control_B.absa > proc_control_B.absb) {
    proc_control_B.roe = *a;
  }

  proc_control_B.scale_iy = proc_control_B.absa + proc_control_B.absb;
  if (proc_control_B.scale_iy == 0.0) {
    *s = 0.0;
    *c = 1.0;
    *a = 0.0;
    *b = 0.0;
  } else {
    real_T bds;
    proc_control_B.ads = proc_control_B.absa / proc_control_B.scale_iy;
    bds = proc_control_B.absb / proc_control_B.scale_iy;
    proc_control_B.scale_iy *= std::sqrt(proc_control_B.ads * proc_control_B.ads
      + bds * bds);
    if (proc_control_B.roe < 0.0) {
      proc_control_B.scale_iy = -proc_control_B.scale_iy;
    }

    *c = *a / proc_control_B.scale_iy;
    *s = *b / proc_control_B.scale_iy;
    if (proc_control_B.absa > proc_control_B.absb) {
      *b = *s;
    } else if (*c != 0.0) {
      *b = 1.0 / *c;
    } else {
      *b = 1.0;
    }

    *a = proc_control_B.scale_iy;
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_deleteColMoveEnd(s_2F24x1ekvOt8ZUO1knVMv_proc__T
  *obj, int32_T idx)
{
  int32_T i;
  if (obj->usedPivoting) {
    i = 1;
    while ((i <= obj->ncols) && (obj->jpvt.data[i - 1] != idx)) {
      i++;
    }

    idx = i;
  }

  if (idx >= obj->ncols) {
    obj->ncols--;
  } else {
    obj->jpvt.data[idx - 1] = obj->jpvt.data[obj->ncols - 1];
    for (i = 0; i < obj->minRowCol; i++) {
      obj->QR.data[i + obj->ldq * (idx - 1)] = obj->QR.data[(obj->ncols - 1) *
        obj->ldq + i];
    }

    obj->ncols--;
    if (obj->mrows <= obj->ncols) {
      obj->minRowCol = obj->mrows;
    } else {
      obj->minRowCol = obj->ncols;
    }

    if (idx < obj->mrows) {
      int32_T QRk0;
      int32_T b_ix;
      int32_T idxRotGCol;
      int32_T ix;
      int32_T k;
      if (obj->mrows - 1 <= obj->ncols) {
        i = obj->mrows - 1;
      } else {
        i = obj->ncols;
      }

      k = i;
      idxRotGCol = (idx - 1) * obj->ldq;
      while (k >= idx) {
        QRk0 = k + idxRotGCol;
        proc_control_B.b_temp = obj->QR.data[QRk0];
        proc_control_xrotg_XzIjz1eG(&obj->QR.data[(k + idxRotGCol) - 1],
          &proc_control_B.b_temp, &proc_control_B.c_c_l, &proc_control_B.b_s);
        obj->QR.data[QRk0] = proc_control_B.b_temp;
        obj->QR.data[k + obj->ldq * (k - 1)] = 0.0;
        QRk0 = obj->ldq * idx + k;
        b_ix = obj->ncols - idx;
        if (b_ix >= 1) {
          ix = QRk0 - 1;
          for (int32_T d_k{0}; d_k < b_ix; d_k++) {
            proc_control_B.b_temp = obj->QR.data[ix] * proc_control_B.c_c_l +
              obj->QR.data[QRk0] * proc_control_B.b_s;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * proc_control_B.c_c_l -
              obj->QR.data[ix] * proc_control_B.b_s;
            obj->QR.data[ix] = proc_control_B.b_temp;
            QRk0 += obj->ldq;
            ix += obj->ldq;
          }
        }

        QRk0 = (k - 1) * obj->ldq;
        if (obj->mrows >= 1) {
          b_ix = obj->ldq + QRk0;
          for (ix = 0; ix < obj->mrows; ix++) {
            proc_control_B.b_temp = obj->Q.data[QRk0] * proc_control_B.c_c_l +
              obj->Q.data[b_ix] * proc_control_B.b_s;
            obj->Q.data[b_ix] = obj->Q.data[b_ix] * proc_control_B.c_c_l -
              obj->Q.data[QRk0] * proc_control_B.b_s;
            obj->Q.data[QRk0] = proc_control_B.b_temp;
            b_ix++;
            QRk0++;
          }
        }

        k--;
      }

      for (k = idx + 1; k <= i; k++) {
        idxRotGCol = (k - 1) * obj->ldq;
        QRk0 = k + idxRotGCol;
        proc_control_B.b_temp = obj->QR.data[QRk0];
        proc_control_xrotg_XzIjz1eG(&obj->QR.data[(k + idxRotGCol) - 1],
          &proc_control_B.b_temp, &proc_control_B.c_c_l, &proc_control_B.b_s);
        obj->QR.data[QRk0] = proc_control_B.b_temp;
        QRk0 = (obj->ldq + 1) * k;
        idxRotGCol = obj->ncols - k;
        if (idxRotGCol >= 1) {
          b_ix = QRk0 - 1;
          for (ix = 0; ix < idxRotGCol; ix++) {
            proc_control_B.b_temp = obj->QR.data[b_ix] * proc_control_B.c_c_l +
              obj->QR.data[QRk0] * proc_control_B.b_s;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * proc_control_B.c_c_l -
              obj->QR.data[b_ix] * proc_control_B.b_s;
            obj->QR.data[b_ix] = proc_control_B.b_temp;
            QRk0 += obj->ldq;
            b_ix += obj->ldq;
          }
        }

        idxRotGCol = (k - 1) * obj->ldq;
        if (obj->mrows >= 1) {
          QRk0 = obj->ldq + idxRotGCol;
          for (b_ix = 0; b_ix < obj->mrows; b_ix++) {
            proc_control_B.b_temp = obj->Q.data[idxRotGCol] *
              proc_control_B.c_c_l + obj->Q.data[QRk0] * proc_control_B.b_s;
            obj->Q.data[QRk0] = obj->Q.data[QRk0] * proc_control_B.c_c_l -
              obj->Q.data[idxRotGCol] * proc_control_B.b_s;
            obj->Q.data[idxRotGCol] = proc_control_B.b_temp;
            QRk0++;
            idxRotGCol++;
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
boolean_T proc_control::proc_control_strcmp(const char_T a[7])
{
  static const char_T b[7]{ 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  int32_T ret;
  ret = memcmp(&a[0], &b[0], 7);
  return ret == 0;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemm(int32_T m, int32_T n, int32_T k, const
  real_T A[21609], int32_T lda, const real_T B_data[], int32_T ib0, int32_T ldb,
  real_T C_data[], int32_T ldc)
{
  if ((m != 0) && (n != 0)) {
    int32_T ar;
    int32_T br;
    int32_T cr;
    int32_T ib;
    int32_T lastColC;
    br = ib0;
    lastColC = (n - 1) * ldc;
    cr = 0;
    while (((ldc > 0) && (cr <= lastColC)) || ((ldc < 0) && (cr >= lastColC))) {
      ar = cr;
      ib = cr + m;
      while (ar + 1 <= ib) {
        C_data[ar] = 0.0;
        ar++;
      }

      cr += ldc;
    }

    cr = 0;
    while (((ldc > 0) && (cr <= lastColC)) || ((ldc < 0) && (cr >= lastColC))) {
      int32_T c;
      ar = -1;
      ib = br;
      c = br + k;
      while (ib <= c - 1) {
        int32_T b_ic;
        int32_T d;
        int32_T ia;
        ia = ar;
        b_ic = cr;
        d = cr + m;
        while (b_ic + 1 <= d) {
          ia++;
          C_data[b_ic] += B_data[ib - 1] * A[ia];
          b_ic++;
        }

        ar += lda;
        ib++;
      }

      br += ldb;
      cr += ldc;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemm_m(int32_T m, int32_T n, int32_T k, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T B_data[], int32_T ldb,
  real_T C_data[], int32_T ldc)
{
  if ((m != 0) && (n != 0)) {
    int32_T ar;
    int32_T b_cr;
    int32_T br;
    int32_T lastColC;
    lastColC = (n - 1) * ldc;
    br = 0;
    while (((ldc > 0) && (br <= lastColC)) || ((ldc < 0) && (br >= lastColC))) {
      b_cr = br;
      ar = br + m;
      while (b_cr + 1 <= ar) {
        C_data[b_cr] = 0.0;
        b_cr++;
      }

      br += ldc;
    }

    br = -1;
    b_cr = 0;
    while (((ldc > 0) && (b_cr <= lastColC)) || ((ldc < 0) && (b_cr >= lastColC)))
    {
      int32_T b_ic;
      int32_T c;
      ar = ia0;
      b_ic = b_cr;
      c = b_cr + m;
      while (b_ic + 1 <= c) {
        real_T temp;
        temp = 0.0;
        for (int32_T w{1}; w - 1 < k; w++) {
          temp += A_data[(w + ar) - 2] * B_data[w + br];
        }

        C_data[b_ic] += temp;
        ar += lda;
        b_ic++;
      }

      br += ldb;
      b_cr += ldc;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
int32_T proc_control::proc_control_ixamax_k(int32_T n, const real_T x_data[],
  int32_T incx)
{
  int32_T idxmax;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      real_T smax;
      int32_T ix;
      ix = 0;
      smax = std::abs(x_data[0]);
      for (int32_T k{2}; k <= n; k++) {
        real_T s;
        ix += incx;
        s = std::abs(x_data[ix]);
        if (s > smax) {
          idxmax = k;
          smax = s;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_fullColLDL2_(s_TNXzMnREVvDmNpLFpsTLBC_proc_T
  *obj, int32_T LD_offset, int32_T NColsRemain)
{
  int32_T LDimSizeP1;
  LDimSizeP1 = obj->ldm;
  for (int32_T k{0}; k < NColsRemain; k++) {
    int32_T LD_diagOffset;
    int32_T j;
    int32_T jA;
    int32_T subMatrixDim;
    LD_diagOffset = ((LDimSizeP1 + 1) * k + LD_offset) - 1;
    proc_control_B.alpha1 = -1.0 / obj->FMat.data[LD_diagOffset];
    subMatrixDim = (NColsRemain - k) - 2;
    for (jA = 1; jA - 1 <= subMatrixDim; jA++) {
      obj->workspace_ = obj->FMat.data[LD_diagOffset + jA];
    }

    proc_control_B.y_p = obj->workspace_;
    if (!(proc_control_B.alpha1 == 0.0)) {
      jA = (LD_diagOffset + LDimSizeP1) + 1;
      for (j = 0; j <= subMatrixDim; j++) {
        if (proc_control_B.y_p != 0.0) {
          real_T temp;
          int32_T b;
          int32_T ijA;
          temp = proc_control_B.y_p * proc_control_B.alpha1;
          ijA = jA;
          b = subMatrixDim + jA;
          while (ijA + 1 <= b + 1) {
            obj->FMat.data[ijA] += obj->workspace_ * temp;
            ijA++;
          }
        }

        jA += obj->ldm;
      }
    }

    for (jA = 1; jA - 1 <= subMatrixDim; jA++) {
      j = LD_diagOffset + jA;
      obj->FMat.data[j] /= obj->FMat.data[LD_diagOffset];
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_partialColLDL3_(s_TNXzMnREVvDmNpLFpsTLBC_proc_T *
  obj, int32_T LD_offset, int32_T NColsRemain)
{
  int32_T br;
  int32_T d;
  int32_T ia;
  int32_T idx;
  int32_T ix;
  proc_control_B.LDimSizeP1_n = obj->ldm + 1;
  for (int32_T k{0}; k < 48; k++) {
    proc_control_B.subRows = (NColsRemain - k) - 1;
    proc_control_B.LD_diagOffset_o = (proc_control_B.LDimSizeP1_n * k +
      LD_offset) - 1;
    for (idx = 0; idx <= proc_control_B.subRows; idx++) {
      obj->workspace_ = obj->FMat.data[proc_control_B.LD_diagOffset_o + idx];
    }

    for (idx = 0; idx < NColsRemain; idx++) {
      obj->workspace2_ = obj->workspace_;
    }

    idx = obj->ldm;
    proc_control_B.y_n = obj->workspace2_;
    if ((NColsRemain != 0) && (k != 0)) {
      ix = LD_offset + k;
      proc_control_B.FMat_offset = (k - 1) * obj->ldm + 1;
      br = 1;
      while (((idx > 0) && (br <= proc_control_B.FMat_offset)) || ((idx < 0) &&
              (br >= proc_control_B.FMat_offset))) {
        d = (br + NColsRemain) - 1;
        for (ia = br; ia <= d; ia++) {
          proc_control_B.y_n += -obj->FMat.data[ix - 1] * obj->workspace_;
        }

        ix += obj->ldm;
        br += idx;
      }
    }

    obj->workspace2_ = proc_control_B.y_n;
    for (idx = 0; idx < NColsRemain; idx++) {
      obj->workspace_ = proc_control_B.y_n;
    }

    for (idx = 0; idx <= proc_control_B.subRows; idx++) {
      obj->FMat.data[proc_control_B.LD_diagOffset_o + idx] = obj->workspace_;
    }

    for (idx = 1; idx - 1 < proc_control_B.subRows; idx++) {
      ix = proc_control_B.LD_diagOffset_o + idx;
      obj->FMat.data[ix] /= obj->FMat.data[proc_control_B.LD_diagOffset_o];
    }
  }

  for (int32_T k{48}; k <= NColsRemain - 1; k += 48) {
    int32_T LD_diagOffset_tmp;
    int32_T h;
    int32_T iy;
    proc_control_B.LD_diagOffset_o = NColsRemain - k;
    if (proc_control_B.LD_diagOffset_o >= 48) {
      proc_control_B.subRows = 48;
    } else {
      proc_control_B.subRows = proc_control_B.LD_diagOffset_o;
    }

    LD_diagOffset_tmp = k + proc_control_B.subRows;
    for (idx = k; idx < LD_diagOffset_tmp; idx++) {
      ix = LD_diagOffset_tmp - idx;
      proc_control_B.FMat_offset = (proc_control_B.LDimSizeP1_n * idx +
        LD_offset) - 1;
      for (br = 0; br < 48; br++) {
        obj->workspace2_ = obj->FMat.data[((LD_offset + idx) + br * obj->ldm) -
          1];
      }

      br = obj->ldm;
      if (ix != 0) {
        d = (obj->ldm * 47 + idx) + 1;
        ia = idx + 1;
        while (((br > 0) && (ia <= d)) || ((br < 0) && (ia >= d))) {
          iy = proc_control_B.FMat_offset;
          h = (ia + ix) - 1;
          for (int32_T b_ia{ia}; b_ia <= h; b_ia++) {
            obj->FMat.data[iy] += obj->workspace_ * -obj->workspace2_;
            iy++;
          }

          ia += br;
        }
      }
    }

    if (LD_diagOffset_tmp < NColsRemain) {
      proc_control_B.LD_diagOffset_o -= proc_control_B.subRows;
      idx = ((LD_offset + proc_control_B.subRows) + proc_control_B.LDimSizeP1_n *
             k) - 1;
      for (ix = 0; ix < 48; ix++) {
        proc_control_B.FMat_offset = (LD_offset + k) + ix * obj->ldm;
        for (br = 0; br < proc_control_B.subRows; br++) {
          obj->workspace2_ = obj->FMat.data[(proc_control_B.FMat_offset + br) -
            1];
        }
      }

      ix = obj->ldm;
      proc_control_B.FMat_offset = obj->ldm;
      if ((proc_control_B.LD_diagOffset_o != 0) && (proc_control_B.subRows != 0))
      {
        proc_control_B.subRows = (proc_control_B.subRows - 1) * obj->ldm + idx;
        br = 0;
        while (((proc_control_B.FMat_offset > 0) && (idx <=
                 proc_control_B.subRows)) || ((proc_control_B.FMat_offset < 0) &&
                (idx >= proc_control_B.subRows))) {
          br++;
          d = ix * 47 + br;
          ia = br;
          while (((ix > 0) && (ia <= d)) || ((ix < 0) && (ia >= d))) {
            iy = idx;
            h = idx + proc_control_B.LD_diagOffset_o;
            while (iy + 1 <= h) {
              obj->FMat.data[iy] += -obj->workspace2_ * obj->workspace_;
              iy++;
            }

            ia += ix;
          }

          idx += proc_control_B.FMat_offset;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
int32_T proc_control::proc_control_xpotrf(int32_T n, real_T A_data[], int32_T
  lda)
{
  int32_T b_j;
  int32_T info;
  boolean_T exitg1;
  info = 0;
  b_j = 0;
  exitg1 = false;
  while ((!exitg1) && (b_j <= n - 1)) {
    int32_T b_ix;
    int32_T b_iy;
    int32_T idxA1j;
    int32_T idxAjj;
    int32_T iy;
    idxA1j = b_j * lda;
    idxAjj = idxA1j + b_j;
    proc_control_B.ssq_h = 0.0;
    if (b_j >= 1) {
      b_ix = idxA1j;
      b_iy = idxA1j;
      for (iy = 0; iy < b_j; iy++) {
        proc_control_B.ssq_h += A_data[b_ix] * A_data[b_iy];
        b_ix++;
        b_iy++;
      }
    }

    proc_control_B.ssq_h = A_data[idxAjj] - proc_control_B.ssq_h;
    if (proc_control_B.ssq_h > 0.0) {
      proc_control_B.ssq_h = std::sqrt(proc_control_B.ssq_h);
      A_data[idxAjj] = proc_control_B.ssq_h;
      if (b_j + 1 < n) {
        b_ix = (n - b_j) - 2;
        b_iy = (idxA1j + lda) + 1;
        idxAjj += lda;
        if ((b_j != 0) && (b_ix + 1 != 0)) {
          int32_T b;
          iy = idxAjj;
          b = lda * b_ix + b_iy;
          while (((lda > 0) && (b_iy <= b)) || ((lda < 0) && (b_iy >= b))) {
            int32_T d;
            int32_T ix;
            ix = idxA1j;
            proc_control_B.c_iu = 0.0;
            d = (b_iy + b_j) - 1;
            for (int32_T ia{b_iy}; ia <= d; ia++) {
              proc_control_B.c_iu += A_data[ia - 1] * A_data[ix];
              ix++;
            }

            A_data[iy] += -proc_control_B.c_iu;
            iy += lda;
            b_iy += lda;
          }
        }

        proc_control_B.ssq_h = 1.0 / proc_control_B.ssq_h;
        idxA1j = (lda * b_ix + idxAjj) + 1;
        while (((lda > 0) && (idxAjj + 1 <= idxA1j)) || ((lda < 0) && (idxAjj +
                 1 >= idxA1j))) {
          A_data[idxAjj] *= proc_control_B.ssq_h;
          idxAjj += lda;
        }
      }

      b_j++;
    } else {
      A_data[idxAjj] = proc_control_B.ssq_h;
      info = b_j + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbiadz(int32_T m, int32_T n, const
  real_T A_data[], int32_T ia0, int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  if (m != 0) {
    int32_T b;
    int32_T iac;
    int32_T ix;
    for (ix = 0; ix < m; ix++) {
      y_data[ix] = 0.0;
    }

    ix = 0;
    b = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      int32_T c;
      int32_T iy;
      iy = 0;
      c = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= c; ia++) {
        y_data[iy] += A_data[ia - 1] * x_data[ix];
        iy++;
      }

      ix++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_factor(s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj,
  const real_T A[21609], int32_T ndims, int32_T ldA)
{
  obj->ndims = ndims;
  proc_control_B.b_idx_lo = 0;
  while (proc_control_B.b_idx_lo <= ndims - 1) {
    proc_control_B.ix0_n = ldA * proc_control_B.b_idx_lo;
    proc_control_B.idx_e = obj->ldm * proc_control_B.b_idx_lo;
    proc_control_B.k_eu = 1;
    while (proc_control_B.k_eu - 1 <= ndims - 1) {
      obj->FMat.data[(proc_control_B.idx_e + proc_control_B.k_eu) - 1] = A
        [(proc_control_B.ix0_n + proc_control_B.k_eu) - 1];
      proc_control_B.k_eu++;
    }

    proc_control_B.b_idx_lo++;
  }

  obj->info = proc_control_xpotrf(ndims, obj->FMat.data, obj->ldm);
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_solve(const s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj,
  real_T rhs_data[])
{
  if (obj->ndims != 0) {
    int32_T ix;
    int32_T jA;
    for (int32_T b_j{0}; b_j < obj->ndims; b_j++) {
      real_T temp;
      jA = b_j * obj->ldm;
      temp = rhs_data[b_j];
      for (ix = 0; ix < b_j; ix++) {
        temp -= obj->FMat.data[jA + ix] * rhs_data[ix];
      }

      rhs_data[b_j] = temp / obj->FMat.data[jA + b_j];
    }

    for (int32_T b_j{obj->ndims - 1}; b_j + 1 > 0; b_j--) {
      int32_T jjA;
      jjA = b_j * obj->ldm + b_j;
      rhs_data[b_j] /= obj->FMat.data[jjA];
      for (jA = 1; jA - 1 < b_j; jA++) {
        ix = b_j - jA;
        rhs_data[ix] -= obj->FMat.data[jjA - jA] * rhs_data[b_j];
      }
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_factor_p(s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj,
  const real_T A[21609], int32_T ndims, int32_T ldA)
{
  proc_control_B.LDimSizeP1 = obj->ldm + 1;
  obj->ndims = ndims;
  proc_control_B.A_maxDiag_idx = 0;
  while (proc_control_B.A_maxDiag_idx <= ndims - 1) {
    proc_control_B.LD_diagOffset = ldA * proc_control_B.A_maxDiag_idx;
    proc_control_B.order_a = obj->ldm * proc_control_B.A_maxDiag_idx;
    proc_control_B.b_k_e = 1;
    while (proc_control_B.b_k_e - 1 <= ndims - 1) {
      obj->FMat.data[(proc_control_B.order_a + proc_control_B.b_k_e) - 1] = A
        [(proc_control_B.LD_diagOffset + proc_control_B.b_k_e) - 1];
      proc_control_B.b_k_e++;
    }

    proc_control_B.A_maxDiag_idx++;
  }

  proc_control_B.A_maxDiag_idx = proc_control_ixamax_k(ndims, obj->FMat.data,
    obj->ldm + 1) - 1;
  obj->regTol_ = std::fmax(std::abs(obj->FMat.data[obj->ldm *
    proc_control_B.A_maxDiag_idx + proc_control_B.A_maxDiag_idx]) *
    2.2204460492503131E-16, 0.0);
  if (ndims > 128) {
    boolean_T exitg1;
    proc_control_B.A_maxDiag_idx = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.A_maxDiag_idx < ndims)) {
      proc_control_B.LD_diagOffset = proc_control_B.LDimSizeP1 *
        proc_control_B.A_maxDiag_idx + 1;
      proc_control_B.order_a = ndims - proc_control_B.A_maxDiag_idx;
      if (proc_control_B.A_maxDiag_idx + 48 <= ndims) {
        proc_control_partialColLDL3_(obj, proc_control_B.LD_diagOffset,
          proc_control_B.order_a);
        proc_control_B.A_maxDiag_idx += 48;
      } else {
        proc_control_fullColLDL2_(obj, proc_control_B.LD_diagOffset,
          proc_control_B.order_a);
        exitg1 = true;
      }
    }
  } else {
    proc_control_fullColLDL2_(obj, 1, ndims);
  }

  if (obj->ConvexCheck) {
    proc_control_B.LDimSizeP1 = 0;
    int32_T exitg2;
    do {
      exitg2 = 0;
      if (proc_control_B.LDimSizeP1 <= ndims - 1) {
        if (obj->FMat.data[obj->ldm * proc_control_B.LDimSizeP1 +
            proc_control_B.LDimSizeP1] <= 0.0) {
          obj->info = -proc_control_B.LDimSizeP1 - 1;
          exitg2 = 1;
        } else {
          proc_control_B.LDimSizeP1++;
        }
      } else {
        obj->ConvexCheck = false;
        exitg2 = 1;
      }
    } while (exitg2 == 0);
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_solve_l(const s_TNXzMnREVvDmNpLFpsTLBC_proc_T
  *obj, real_T rhs_data[])
{
  int32_T b;
  int32_T jA;
  int32_T jjA;
  int32_T n_tmp;
  n_tmp = obj->ndims - 1;
  if (obj->ndims != 0) {
    for (jA = 0; jA <= n_tmp; jA++) {
      jjA = jA * obj->ldm + jA;
      b = n_tmp - jA;
      for (int32_T i{1}; i - 1 < b; i++) {
        int32_T ix;
        ix = jA + i;
        rhs_data[ix] -= obj->FMat.data[jjA + i] * rhs_data[jA];
      }
    }
  }

  for (b = 0; b <= n_tmp; b++) {
    rhs_data[b] /= obj->FMat.data[obj->ldm * b + b];
  }

  if (obj->ndims != 0) {
    for (b = obj->ndims - 1; b + 1 > 0; b--) {
      real_T temp;
      jA = b * obj->ldm;
      temp = rhs_data[b];
      for (jjA = obj->ndims; jjA >= b + 2; jjA--) {
        temp -= obj->FMat.data[(jA + jjA) - 1] * rhs_data[jjA - 1];
      }

      rhs_data[b] = temp;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_compute_deltax(const real_T H[21609],
  s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution, s_OnOuVjEActeQRN4FyNqSwB_proc_T
  *memspace, const s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *cholmanager, const
  s_oZGbvi5mjKKebHB9aR5DoG_proc_T *objective, boolean_T alwaysPositiveDef)
{
  proc_control_B.nVar_j = qrmanager->mrows - 1;
  proc_control_B.mNull = qrmanager->mrows - qrmanager->ncols;
  if (proc_control_B.mNull <= 0) {
    proc_control_B.mNull = 0;
    while (proc_control_B.mNull <= proc_control_B.nVar_j) {
      solution->searchDir.data[proc_control_B.mNull] = 0.0;
      proc_control_B.mNull++;
    }
  } else {
    proc_control_B.nullStartIdx = 0;
    while (proc_control_B.nullStartIdx <= proc_control_B.nVar_j) {
      solution->searchDir.data[proc_control_B.nullStartIdx] =
        -objective->grad.data[proc_control_B.nullStartIdx];
      proc_control_B.nullStartIdx++;
    }

    if (qrmanager->ncols <= 0) {
      switch (objective->objtype) {
       case 5:
        break;

       case 3:
        if (alwaysPositiveDef) {
          proc_control_factor(cholmanager, H, qrmanager->mrows, qrmanager->mrows);
        } else {
          proc_control_factor_p(cholmanager, H, qrmanager->mrows,
                                qrmanager->mrows);
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else if (alwaysPositiveDef) {
          proc_control_solve(cholmanager, solution->searchDir.data);
        } else {
          proc_control_solve_l(cholmanager, solution->searchDir.data);
        }
        break;

       default:
        if (alwaysPositiveDef) {
          proc_control_factor(cholmanager, H, objective->nvar, objective->nvar);
          if (cholmanager->info != 0) {
            solution->state = -6;
          } else {
            proc_control_solve(cholmanager, solution->searchDir.data);
            proc_control_B.c_dk = 1.0 / objective->beta;
            proc_control_B.mNull = objective->nvar;
            while (proc_control_B.mNull + 1 <= qrmanager->mrows) {
              solution->searchDir.data[proc_control_B.mNull] *=
                proc_control_B.c_dk;
              proc_control_B.mNull++;
            }
          }
        }
        break;
      }
    } else {
      proc_control_B.nullStartIdx = qrmanager->ldq * qrmanager->ncols + 1;
      if (objective->objtype == 5) {
        proc_control_B.b_ldw = 0;
        while (proc_control_B.b_ldw <= proc_control_B.mNull - 1) {
          memspace->workspace_double.data[proc_control_B.b_ldw] =
            -qrmanager->Q.data[(qrmanager->ncols + proc_control_B.b_ldw) *
            qrmanager->ldq + proc_control_B.nVar_j];
          proc_control_B.b_ldw++;
        }

        proc_control_xgemv_mtmcjbiadz(qrmanager->mrows, proc_control_B.mNull,
          qrmanager->Q.data, proc_control_B.nullStartIdx, qrmanager->ldq,
          memspace->workspace_double.data, solution->searchDir.data);
      } else {
        if (objective->objtype == 3) {
          proc_control_xgemm(qrmanager->mrows, proc_control_B.mNull,
                             qrmanager->mrows, H, qrmanager->mrows,
                             qrmanager->Q.data, proc_control_B.nullStartIdx,
                             qrmanager->ldq, memspace->workspace_double.data,
                             memspace->workspace_double.size[0]);
          proc_control_xgemm_m(proc_control_B.mNull, proc_control_B.mNull,
                               qrmanager->mrows, qrmanager->Q.data,
                               proc_control_B.nullStartIdx, qrmanager->ldq,
                               memspace->workspace_double.data,
                               memspace->workspace_double.size[0],
                               cholmanager->FMat.data, cholmanager->ldm);
        } else if (alwaysPositiveDef) {
          proc_control_B.b_ldw = memspace->workspace_double.size[0];
          proc_control_xgemm(objective->nvar, proc_control_B.mNull,
                             objective->nvar, H, objective->nvar,
                             qrmanager->Q.data, proc_control_B.nullStartIdx,
                             qrmanager->ldq, memspace->workspace_double.data,
                             memspace->workspace_double.size[0]);
          proc_control_B.order = 0;
          while (proc_control_B.order <= proc_control_B.mNull - 1) {
            proc_control_B.ix_de = objective->nvar;
            while (proc_control_B.ix_de + 1 <= qrmanager->mrows) {
              memspace->workspace_double.data[proc_control_B.ix_de +
                memspace->workspace_double.size[0] * proc_control_B.order] =
                qrmanager->Q.data[(proc_control_B.order + qrmanager->ncols) *
                qrmanager->Q.size[0] + proc_control_B.ix_de] * objective->beta;
              proc_control_B.ix_de++;
            }

            proc_control_B.order++;
          }

          proc_control_xgemm_m(proc_control_B.mNull, proc_control_B.mNull,
                               qrmanager->mrows, qrmanager->Q.data,
                               proc_control_B.nullStartIdx, qrmanager->ldq,
                               memspace->workspace_double.data,
                               proc_control_B.b_ldw, cholmanager->FMat.data,
                               cholmanager->ldm);
        }

        if (alwaysPositiveDef) {
          cholmanager->ndims = proc_control_B.mNull;
          cholmanager->info = proc_control_xpotrf(proc_control_B.mNull,
            cholmanager->FMat.data, cholmanager->ldm);
        } else {
          proc_control_B.b_ldw = cholmanager->ldm + 1;
          cholmanager->ndims = proc_control_B.mNull;
          proc_control_B.b_nullStart = proc_control_ixamax_k
            (proc_control_B.mNull, cholmanager->FMat.data, cholmanager->ldm + 1)
            - 1;
          cholmanager->regTol_ = std::fmax(std::abs(cholmanager->
            FMat.data[cholmanager->ldm * proc_control_B.b_nullStart +
            proc_control_B.b_nullStart]) * 2.2204460492503131E-16, 0.0);
          if (proc_control_B.mNull > 128) {
            boolean_T exitg1;
            proc_control_B.ix_de = 0;
            exitg1 = false;
            while ((!exitg1) && (proc_control_B.ix_de < proc_control_B.mNull)) {
              proc_control_B.b_nullStart = proc_control_B.b_ldw *
                proc_control_B.ix_de + 1;
              proc_control_B.order = proc_control_B.mNull - proc_control_B.ix_de;
              if (proc_control_B.ix_de + 48 <= proc_control_B.mNull) {
                proc_control_partialColLDL3_(cholmanager,
                  proc_control_B.b_nullStart, proc_control_B.order);
                proc_control_B.ix_de += 48;
              } else {
                proc_control_fullColLDL2_(cholmanager,
                  proc_control_B.b_nullStart, proc_control_B.order);
                exitg1 = true;
              }
            }
          } else {
            proc_control_fullColLDL2_(cholmanager, 1, proc_control_B.mNull);
          }

          if (cholmanager->ConvexCheck) {
            proc_control_B.ix_de = 0;
            int32_T exitg2;
            do {
              exitg2 = 0;
              if (proc_control_B.ix_de <= proc_control_B.mNull - 1) {
                if (cholmanager->FMat.data[cholmanager->ldm *
                    proc_control_B.ix_de + proc_control_B.ix_de] <= 0.0) {
                  cholmanager->info = -proc_control_B.ix_de - 1;
                  exitg2 = 1;
                } else {
                  proc_control_B.ix_de++;
                }
              } else {
                cholmanager->ConvexCheck = false;
                exitg2 = 1;
              }
            } while (exitg2 == 0);
          }
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else {
          proc_control_B.b_ldw = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            proc_control_B.ix_de = 0;
            while (proc_control_B.ix_de <= proc_control_B.mNull - 1) {
              memspace->workspace_double.data[proc_control_B.ix_de] = 0.0;
              proc_control_B.ix_de++;
            }

            proc_control_B.b_nullStart = 0;
            proc_control_B.order = (proc_control_B.mNull - 1) * qrmanager->ldq +
              proc_control_B.nullStartIdx;
            proc_control_B.idx_col = proc_control_B.nullStartIdx;
            while (((proc_control_B.b_ldw > 0) && (proc_control_B.idx_col <=
                     proc_control_B.order)) || ((proc_control_B.b_ldw < 0) &&
                    (proc_control_B.idx_col >= proc_control_B.order))) {
              proc_control_B.ix_de = 0;
              proc_control_B.c_dk = 0.0;
              proc_control_B.b_ix_f = proc_control_B.idx_col +
                proc_control_B.nVar_j;
              proc_control_B.b_ldw_tmp = proc_control_B.idx_col;
              while (proc_control_B.b_ldw_tmp <= proc_control_B.b_ix_f) {
                proc_control_B.c_dk += qrmanager->
                  Q.data[proc_control_B.b_ldw_tmp - 1] * objective->
                  grad.data[proc_control_B.ix_de];
                proc_control_B.ix_de++;
                proc_control_B.b_ldw_tmp++;
              }

              memspace->workspace_double.data[proc_control_B.b_nullStart] +=
                -proc_control_B.c_dk;
              proc_control_B.b_nullStart++;
              proc_control_B.idx_col += proc_control_B.b_ldw;
            }
          }

          if (alwaysPositiveDef) {
            if (cholmanager->ndims != 0) {
              proc_control_B.b_ldw = 0;
              while (proc_control_B.b_ldw <= cholmanager->ndims - 1) {
                proc_control_B.order = proc_control_B.b_ldw * cholmanager->ldm;
                proc_control_B.c_dk = memspace->
                  workspace_double.data[proc_control_B.b_ldw];
                proc_control_B.idx_col = 0;
                while (proc_control_B.idx_col <= proc_control_B.b_ldw - 1) {
                  proc_control_B.c_dk -= cholmanager->
                    FMat.data[proc_control_B.order + proc_control_B.idx_col] *
                    memspace->workspace_double.data[proc_control_B.idx_col];
                  proc_control_B.idx_col++;
                }

                memspace->workspace_double.data[proc_control_B.b_ldw] =
                  proc_control_B.c_dk / cholmanager->
                  FMat.data[proc_control_B.order + proc_control_B.b_ldw];
                proc_control_B.b_ldw++;
              }
            }

            proc_control_xtrsv(cholmanager->ndims, cholmanager->FMat.data,
                               cholmanager->ldm, memspace->workspace_double.data);
          } else {
            proc_control_B.b_ldw_tmp = cholmanager->ndims - 1;
            if (cholmanager->ndims != 0) {
              proc_control_B.b_nullStart = 0;
              while (proc_control_B.b_nullStart <= proc_control_B.b_ldw_tmp) {
                proc_control_B.order = proc_control_B.b_nullStart *
                  cholmanager->ldm + proc_control_B.b_nullStart;
                proc_control_B.idx_col = proc_control_B.b_ldw_tmp -
                  proc_control_B.b_nullStart;
                proc_control_B.ix_de = 1;
                while (proc_control_B.ix_de - 1 <= proc_control_B.idx_col - 1) {
                  proc_control_B.b_ix_f = proc_control_B.b_nullStart +
                    proc_control_B.ix_de;
                  memspace->workspace_double.data[proc_control_B.b_ix_f] -=
                    cholmanager->FMat.data[proc_control_B.order +
                    proc_control_B.ix_de] * memspace->
                    workspace_double.data[proc_control_B.b_nullStart];
                  proc_control_B.ix_de++;
                }

                proc_control_B.b_nullStart++;
              }
            }

            proc_control_B.b_ldw = 0;
            while (proc_control_B.b_ldw <= proc_control_B.b_ldw_tmp) {
              memspace->workspace_double.data[proc_control_B.b_ldw] /=
                cholmanager->FMat.data[cholmanager->ldm * proc_control_B.b_ldw +
                proc_control_B.b_ldw];
              proc_control_B.b_ldw++;
            }

            if (cholmanager->ndims != 0) {
              proc_control_B.b_ldw = cholmanager->ndims - 1;
              while (proc_control_B.b_ldw + 1 > 0) {
                proc_control_B.b_nullStart = proc_control_B.b_ldw *
                  cholmanager->ldm;
                proc_control_B.c_dk = memspace->
                  workspace_double.data[proc_control_B.b_ldw];
                proc_control_B.order = cholmanager->ndims;
                while (proc_control_B.order >= proc_control_B.b_ldw + 2) {
                  proc_control_B.c_dk -= cholmanager->FMat.data
                    [(proc_control_B.b_nullStart + proc_control_B.order) - 1] *
                    memspace->workspace_double.data[proc_control_B.order - 1];
                  proc_control_B.order--;
                }

                memspace->workspace_double.data[proc_control_B.b_ldw] =
                  proc_control_B.c_dk;
                proc_control_B.b_ldw--;
              }
            }
          }

          proc_control_xgemv_mtmcjbiadz(qrmanager->mrows, proc_control_B.mNull,
            qrmanager->Q.data, proc_control_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, solution->searchDir.data);
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
real_T proc_control::proc_control_xnrm2_md(int32_T n, const real_T x_data[])
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = std::abs(x_data[0]);
    } else {
      proc_control_B.scale_gh = 3.3121686421112381E-170;
      for (int32_T k{0}; k < n; k++) {
        real_T absxk;
        absxk = std::abs(x_data[k]);
        if (absxk > proc_control_B.scale_gh) {
          real_T t;
          t = proc_control_B.scale_gh / absxk;
          y = y * t * t + 1.0;
          proc_control_B.scale_gh = absxk;
        } else {
          real_T t;
          t = absxk / proc_control_B.scale_gh;
          y += t * t;
        }
      }

      y = proc_control_B.scale_gh * std::sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_xgemv_mtmcjbiadz2(int32_T m, int32_T n, const
  real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  if (n != 0) {
    int32_T b_iy;
    int32_T iac;
    int32_T iy;
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    iy = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      int32_T d;
      int32_T ix;
      ix = 0;
      proc_control_B.c_i = 0.0;
      d = (iac + m) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        proc_control_B.c_i += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[iy] += proc_control_B.c_i;
      iy++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_feasibleratiotest(const real_T
  solution_xstar_data[], const real_T solution_searchDir_data[], real_T
  workspace_data[], const int32_T workspace_size[2], int32_T workingset_nVar,
  int32_T workingset_ldA, const real_T workingset_Aineq_data[], const real_T
  workingset_bineq_data[], const real_T workingset_lb_data[], const int32_T
  workingset_indexLB_data[], const int32_T workingset_sizes[5], const int32_T
  workingset_isActiveIdx[6], const boolean_T workingset_isActiveConstr_data[],
  const int32_T workingset_nWConstr[5], boolean_T isPhaseOne, real_T *alpha,
  boolean_T *newBlocking, int32_T *constrType, int32_T *constrIdx)
{
  int32_T b_iy;
  proc_control_B.totalIneq = workingset_sizes[2] - 1;
  *alpha = 1.0E+30;
  *newBlocking = false;
  *constrType = 0;
  *constrIdx = 0;
  proc_control_B.denomTol = 2.2204460492503131E-13 * proc_control_xnrm2_md
    (workingset_nVar, solution_searchDir_data);
  if (workingset_nWConstr[2] < workingset_sizes[2]) {
    proc_control_B.ldw = 0;
    while (proc_control_B.ldw <= proc_control_B.totalIneq) {
      workspace_data[proc_control_B.ldw] =
        workingset_bineq_data[proc_control_B.ldw];
      proc_control_B.ldw++;
    }

    proc_control_xgemv_mtmcjbiadz2(workingset_nVar, workingset_sizes[2],
      workingset_Aineq_data, workingset_ldA, solution_xstar_data, workspace_data);
    proc_control_B.ldw = workspace_size[0];
    if (workingset_sizes[2] != 0) {
      int32_T iac;
      proc_control_B.iyend_g = workspace_size[0] + workingset_sizes[2];
      for (b_iy = workspace_size[0]; b_iy < proc_control_B.iyend_g; b_iy++) {
        workspace_data[b_iy] = 0.0;
      }

      proc_control_B.iyend_g = workspace_size[0];
      b_iy = (workingset_sizes[2] - 1) * workingset_ldA + 1;
      iac = 1;
      while (((workingset_ldA > 0) && (iac <= b_iy)) || ((workingset_ldA < 0) &&
              (iac >= b_iy))) {
        int32_T d;
        proc_control_B.ix_m = 0;
        proc_control_B.c_a = 0.0;
        d = (iac + workingset_nVar) - 1;
        for (int32_T ia{iac}; ia <= d; ia++) {
          proc_control_B.c_a += workingset_Aineq_data[ia - 1] *
            solution_searchDir_data[proc_control_B.ix_m];
          proc_control_B.ix_m++;
        }

        workspace_data[proc_control_B.iyend_g] += proc_control_B.c_a;
        proc_control_B.iyend_g++;
        iac += workingset_ldA;
      }
    }

    proc_control_B.iyend_g = 0;
    while (proc_control_B.iyend_g <= proc_control_B.totalIneq) {
      b_iy = proc_control_B.ldw + proc_control_B.iyend_g;
      if ((workspace_data[b_iy] > proc_control_B.denomTol) &&
          (!workingset_isActiveConstr_data[(workingset_isActiveIdx[2] +
            proc_control_B.iyend_g) - 1])) {
        proc_control_B.ratio = std::fmin(std::abs
          (workspace_data[proc_control_B.iyend_g]), 0.02 -
          workspace_data[proc_control_B.iyend_g]) / workspace_data[b_iy];
        if (proc_control_B.ratio < *alpha) {
          *alpha = proc_control_B.ratio;
          *constrType = 3;
          *constrIdx = proc_control_B.iyend_g + 1;
          *newBlocking = true;
        }
      }

      proc_control_B.iyend_g++;
    }
  }

  if (workingset_nWConstr[3] < workingset_sizes[3]) {
    proc_control_B.c_a = solution_xstar_data[workingset_nVar - 1] *
      static_cast<real_T>(isPhaseOne);
    proc_control_B.phaseOneCorrectionP = solution_searchDir_data[workingset_nVar
      - 1] * static_cast<real_T>(isPhaseOne);
    proc_control_B.totalIneq = 0;
    while (proc_control_B.totalIneq <= workingset_sizes[3] - 2) {
      proc_control_B.pk_corrected =
        -solution_searchDir_data[workingset_indexLB_data[proc_control_B.totalIneq]
        - 1] - proc_control_B.phaseOneCorrectionP;
      if ((proc_control_B.pk_corrected > proc_control_B.denomTol) &&
          (!workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
            proc_control_B.totalIneq) - 1])) {
        proc_control_B.ratio =
          (-solution_xstar_data[workingset_indexLB_data[proc_control_B.totalIneq]
           - 1] -
           workingset_lb_data[workingset_indexLB_data[proc_control_B.totalIneq]
           - 1]) - proc_control_B.c_a;
        proc_control_B.ratio = std::fmin(std::abs(proc_control_B.ratio), 0.02 -
          proc_control_B.ratio) / proc_control_B.pk_corrected;
        if (proc_control_B.ratio < *alpha) {
          *alpha = proc_control_B.ratio;
          *constrType = 4;
          *constrIdx = proc_control_B.totalIneq + 1;
          *newBlocking = true;
        }
      }

      proc_control_B.totalIneq++;
    }

    b_iy = workingset_indexLB_data[workingset_sizes[3] - 1] - 1;
    proc_control_B.c_a = -solution_searchDir_data[b_iy];
    if ((proc_control_B.c_a > proc_control_B.denomTol) &&
        (!workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
          workingset_sizes[3]) - 2])) {
      proc_control_B.ratio = -solution_xstar_data[b_iy] -
        workingset_lb_data[b_iy];
      proc_control_B.ratio = std::fmin(std::abs(proc_control_B.ratio), 0.02 -
        proc_control_B.ratio) / proc_control_B.c_a;
      if (proc_control_B.ratio < *alpha) {
        *alpha = proc_control_B.ratio;
        *constrType = 4;
        *constrIdx = workingset_sizes[3];
        *newBlocking = true;
      }
    }
  }

  if (!isPhaseOne) {
    *newBlocking = (((!*newBlocking) || (!(*alpha > 1.0))) && (*newBlocking));
    *alpha = std::fmin(*alpha, 1.0);
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_c_checkUnboundedOrIllPosed
  (s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution, const
   s_oZGbvi5mjKKebHB9aR5DoG_proc_T *objective)
{
  if (objective->objtype == 5) {
    if (proc_control_xnrm2_md(objective->nvar, solution->searchDir.data) > 100.0
        * static_cast<real_T>(objective->nvar) * 1.4901161193847656E-8) {
      solution->state = 3;
    } else {
      solution->state = 4;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_addBoundToActiveSetMatrix_
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, int32_T TYPE, int32_T idx_local)
{
  int32_T colOffset;
  int32_T idx_bnd_local;
  obj->nWConstr[TYPE - 1]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE - 1] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = TYPE;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  colOffset = (obj->nActiveConstr - 1) * obj->ldA - 1;
  if (TYPE == 5) {
    idx_bnd_local = obj->indexUB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->ub.data[idx_bnd_local - 1];
  } else {
    idx_bnd_local = obj->indexLB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->lb.data[idx_bnd_local - 1];
  }

  for (int32_T idx{0}; idx <= idx_bnd_local - 2; idx++) {
    obj->ATwset.data[(idx + colOffset) + 1] = 0.0;
  }

  obj->ATwset.data[idx_bnd_local + colOffset] = static_cast<real_T>(TYPE == 5) *
    2.0 - 1.0;
  for (idx_bnd_local++; idx_bnd_local <= obj->nVar; idx_bnd_local++) {
    obj->ATwset.data[idx_bnd_local + colOffset] = 0.0;
  }

  switch (obj->probType) {
   case 3:
   case 2:
    break;

   default:
    obj->ATwset.data[obj->nVar + colOffset] = -1.0;
    break;
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_addAineqConstr(s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *obj, int32_T idx_local)
{
  int32_T iAineq0;
  int32_T iAw0;
  obj->nWConstr[2]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[2] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = 3;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  iAineq0 = (idx_local - 1) * obj->ldA;
  iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
  for (int32_T idx{0}; idx < obj->nVar; idx++) {
    obj->ATwset.data[iAw0 + idx] = obj->Aineq.data[iAineq0 + idx];
  }

  obj->bwset.data[obj->nActiveConstr - 1] = obj->bineq.data[idx_local - 1];
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_checkStoppingAndUpdateFval(int32_T *activeSetChangeID,
  const real_T f_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, const
  s_oZGbvi5mjKKebHB9aR5DoG_proc_T *objective, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager, real_T
  options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations, boolean_T
  updateFval)
{
  solution->iterations++;
  proc_control_B.nVar_tmp_tmp_i = objective->nvar - 1;
  if ((solution->iterations >= runTimeOptions_MaxIterations) &&
      ((solution->state != 1) || (objective->objtype == 5))) {
    solution->state = 0;
  }

  if (solution->iterations - solution->iterations / 50 * 50 == 0) {
    solution->maxConstr = proc__maxConstraintViolation_du(workingset,
      solution->xstar.data);
    proc_control_B.tempMaxConstr = solution->maxConstr;
    if (objective->objtype == 5) {
      proc_control_B.tempMaxConstr = solution->maxConstr - solution->
        xstar.data[objective->nvar - 1];
    }

    if (proc_control_B.tempMaxConstr > 0.02) {
      boolean_T nonDegenerateWset;
      proc_control_B.y_size_idx_0_i = solution->searchDir.size;
      proc_control_B.loop_ub_mq = solution->searchDir.size;
      if (proc_control_B.loop_ub_mq - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_gu[0], &solution->searchDir.data[0],
                    proc_control_B.loop_ub_mq * sizeof(real_T));
      }

      proc_control_B.loop_ub_mq = 0;
      while (proc_control_B.loop_ub_mq <= proc_control_B.nVar_tmp_tmp_i) {
        proc_control_B.y_data_gu[proc_control_B.loop_ub_mq] =
          solution->xstar.data[proc_control_B.loop_ub_mq];
        proc_control_B.loop_ub_mq++;
      }

      if (proc_control_B.y_size_idx_0_i - 1 >= 0) {
        std::memcpy(&solution->searchDir.data[0], &proc_control_B.y_data_gu[0],
                    proc_control_B.y_size_idx_0_i * sizeof(real_T));
      }

      nonDegenerateWset = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         solution->searchDir.data, workingset, qrmanager);
      if ((!nonDegenerateWset) && (solution->state != 0)) {
        solution->state = -2;
      }

      *activeSetChangeID = 0;
      proc_control_B.tempMaxConstr = proc__maxConstraintViolation_du(workingset,
        solution->searchDir.data);
      if (proc_control_B.tempMaxConstr < solution->maxConstr) {
        proc_control_B.loop_ub_mq = 0;
        while (proc_control_B.loop_ub_mq <= proc_control_B.nVar_tmp_tmp_i) {
          solution->xstar.data[proc_control_B.loop_ub_mq] =
            solution->searchDir.data[proc_control_B.loop_ub_mq];
          proc_control_B.loop_ub_mq++;
        }

        solution->maxConstr = proc_control_B.tempMaxConstr;
      }
    }
  }

  if (updateFval && (options_ObjectiveLimit > (rtMinusInf))) {
    solution->fstar = proc_contro_computeFval_ReuseHx(objective,
      memspace->workspace_double.data, f_data, solution->xstar.data);
    if ((solution->fstar < options_ObjectiveLimit) && ((solution->state != 0) ||
         (objective->objtype != 5))) {
      solution->state = 2;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_iterate(const real_T H[21609], const real_T
  f_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *cholmanager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  objective, const char_T options_SolverName[7], real_T options_StepTolerance,
  real_T options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations)
{
  boolean_T subProblemChanged;
  boolean_T updateFval;
  subProblemChanged = true;
  updateFval = true;
  proc_control_B.activeSetChangeID = 0;
  proc_control_B.nVar_g = workingset->nVar;
  proc_control_B.globalActiveConstrIdx = 0;
  proc_contro_computeGrad_StoreHx(objective, H, f_data, solution->xstar.data);
  solution->fstar = proc_contro_computeFval_ReuseHx(objective,
    memspace->workspace_double.data, f_data, solution->xstar.data);
  if (solution->iterations < runTimeOptions_MaxIterations) {
    solution->state = -5;
  } else {
    solution->state = 0;
  }

  proc_control_B.iyend = 0;
  while (proc_control_B.iyend <= workingset->mConstrMax - 1) {
    solution->lambda.data[proc_control_B.iyend] = 0.0;
    proc_control_B.iyend++;
  }

  int32_T exitg1;
  do {
    exitg1 = 0;
    if (solution->state == -5) {
      boolean_T guard11{ false };

      guard11 = false;
      if (subProblemChanged) {
        switch (proc_control_B.activeSetChangeID) {
         case 1:
          proc_control_B.idx_a = (workingset->nActiveConstr - 1) *
            workingset->ldA;
          if (qrmanager->mrows <= qrmanager->ncols + 1) {
            qrmanager->minRowCol = qrmanager->mrows;
          } else {
            qrmanager->minRowCol = qrmanager->ncols + 1;
          }

          proc_control_B.b_iy_d = qrmanager->ldq * qrmanager->ncols;
          proc_control_B.ix_d = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            proc_control_B.iyend = proc_control_B.b_iy_d + qrmanager->mrows;
            proc_control_B.c_iy = proc_control_B.b_iy_d;
            while (proc_control_B.c_iy + 1 <= proc_control_B.iyend) {
              qrmanager->QR.data[proc_control_B.c_iy] = 0.0;
              proc_control_B.c_iy++;
            }

            proc_control_B.c_iy = (qrmanager->mrows - 1) * qrmanager->ldq + 1;
            proc_control_B.iyend = 1;
            while (((proc_control_B.ix_d > 0) && (proc_control_B.iyend <=
                     proc_control_B.c_iy)) || ((proc_control_B.ix_d < 0) &&
                    (proc_control_B.iyend >= proc_control_B.c_iy))) {
              proc_control_B.b_ix_b = proc_control_B.idx_a;
              proc_control_B.normDelta = 0.0;
              proc_control_B.g_f = (proc_control_B.iyend + qrmanager->mrows) - 1;
              proc_control_B.ia_a = proc_control_B.iyend;
              while (proc_control_B.ia_a <= proc_control_B.g_f) {
                proc_control_B.normDelta += qrmanager->
                  Q.data[proc_control_B.ia_a - 1] * workingset->
                  ATwset.data[proc_control_B.b_ix_b];
                proc_control_B.b_ix_b++;
                proc_control_B.ia_a++;
              }

              qrmanager->QR.data[proc_control_B.b_iy_d] +=
                proc_control_B.normDelta;
              proc_control_B.b_iy_d++;
              proc_control_B.iyend += proc_control_B.ix_d;
            }
          }

          qrmanager->ncols++;
          qrmanager->jpvt.data[qrmanager->ncols - 1] = qrmanager->ncols;
          proc_control_B.idx_a = qrmanager->mrows - 2;
          while (proc_control_B.idx_a + 2 > qrmanager->ncols) {
            proc_control_B.iyend = (qrmanager->ncols - 1) * qrmanager->ldq;
            proc_control_B.temp_b = qrmanager->QR.data[(proc_control_B.idx_a +
              proc_control_B.iyend) + 1];
            proc_control_xrotg_XzIjz1eG(&qrmanager->QR.data[proc_control_B.idx_a
              + proc_control_B.iyend], &proc_control_B.temp_b,
              &proc_control_B.normDelta, &proc_control_B.s_k);
            qrmanager->QR.data[(proc_control_B.idx_a + proc_control_B.iyend) + 1]
              = proc_control_B.temp_b;
            proc_control_B.iyend = qrmanager->ldq * proc_control_B.idx_a;
            if (qrmanager->mrows >= 1) {
              proc_control_B.ix_d = proc_control_B.iyend;
              proc_control_B.b_iy_d = qrmanager->ldq + proc_control_B.iyend;
              proc_control_B.c_iy = 0;
              while (proc_control_B.c_iy <= qrmanager->mrows - 1) {
                proc_control_B.temp_b = qrmanager->Q.data[proc_control_B.ix_d] *
                  proc_control_B.normDelta + qrmanager->
                  Q.data[proc_control_B.b_iy_d] * proc_control_B.s_k;
                qrmanager->Q.data[proc_control_B.b_iy_d] = qrmanager->
                  Q.data[proc_control_B.b_iy_d] * proc_control_B.normDelta -
                  qrmanager->Q.data[proc_control_B.ix_d] * proc_control_B.s_k;
                qrmanager->Q.data[proc_control_B.ix_d] = proc_control_B.temp_b;
                proc_control_B.b_iy_d++;
                proc_control_B.ix_d++;
                proc_control_B.c_iy++;
              }
            }

            proc_control_B.idx_a--;
          }
          break;

         case -1:
          proc_control_deleteColMoveEnd(qrmanager,
            proc_control_B.globalActiveConstrIdx);
          break;

         default:
          proc_control_factorQR_h(qrmanager, workingset->ATwset.data,
            proc_control_B.nVar_g, workingset->nActiveConstr, workingset->ldA);
          proc_control_computeQ_(qrmanager, qrmanager->mrows);
          break;
        }

        proc_control_compute_deltax(H, solution, memspace, qrmanager,
          cholmanager, objective, proc_control_strcmp(options_SolverName));
        if (solution->state != -5) {
          exitg1 = 1;
        } else {
          proc_control_B.normDelta = proc_control_xnrm2_md(proc_control_B.nVar_g,
            solution->searchDir.data);
          guard11 = true;
        }
      } else {
        proc_control_B.idx_a = solution->searchDir.size;
        proc_control_B.b_iy_d = solution->searchDir.size;
        if (proc_control_B.b_iy_d - 1 >= 0) {
          std::memcpy(&proc_control_B.y_data_d[0], &solution->searchDir.data[0],
                      proc_control_B.b_iy_d * sizeof(real_T));
        }

        proc_control_B.iyend = 0;
        while (proc_control_B.iyend <= proc_control_B.nVar_g - 1) {
          proc_control_B.y_data_d[proc_control_B.iyend] = 0.0;
          proc_control_B.iyend++;
        }

        if (proc_control_B.idx_a - 1 >= 0) {
          std::memcpy(&solution->searchDir.data[0], &proc_control_B.y_data_d[0],
                      proc_control_B.idx_a * sizeof(real_T));
        }

        proc_control_B.normDelta = 0.0;
        guard11 = true;
      }

      if (guard11) {
        if ((!subProblemChanged) || (proc_control_B.normDelta <
             options_StepTolerance) || (workingset->nActiveConstr >=
             proc_control_B.nVar_g)) {
          if (qrmanager->ncols > 0) {
            boolean_T guard1{ false };

            guard1 = false;
            if (objective->objtype != 4) {
              proc_control_B.normDelta = 100.0 * static_cast<real_T>
                (qrmanager->mrows) * 2.2204460492503131E-16;
              updateFval = ((qrmanager->mrows > 0) && (qrmanager->ncols > 0));
              if (updateFval) {
                boolean_T guard2{ false };

                proc_control_B.iyend = qrmanager->ncols;
                guard2 = false;
                if (qrmanager->mrows < qrmanager->ncols) {
                  proc_control_B.idx_a = (qrmanager->ncols - 1) * qrmanager->ldq
                    + qrmanager->mrows;
                  while ((proc_control_B.iyend > qrmanager->mrows) && (std::abs
                          (qrmanager->QR.data[proc_control_B.idx_a - 1]) >=
                          proc_control_B.normDelta)) {
                    proc_control_B.iyend--;
                    proc_control_B.idx_a -= qrmanager->ldq;
                  }

                  updateFval = (proc_control_B.iyend == qrmanager->mrows);
                  if (!updateFval) {
                  } else {
                    guard2 = true;
                  }
                } else {
                  guard2 = true;
                }

                if (guard2) {
                  proc_control_B.idx_a = (proc_control_B.iyend - 1) *
                    qrmanager->ldq + proc_control_B.iyend;
                  while ((proc_control_B.iyend >= 1) && (std::abs
                          (qrmanager->QR.data[proc_control_B.idx_a - 1]) >=
                          proc_control_B.normDelta)) {
                    proc_control_B.iyend--;
                    proc_control_B.idx_a = (proc_control_B.idx_a -
                      qrmanager->ldq) - 1;
                  }

                  updateFval = (proc_control_B.iyend == 0);
                }
              }

              if (!updateFval) {
                solution->state = -7;
              } else {
                guard1 = true;
              }
            } else {
              guard1 = true;
            }

            if (guard1) {
              proc_control_xgemv_mtm(qrmanager->mrows, qrmanager->ncols,
                qrmanager->Q.data, qrmanager->ldq, objective->grad.data,
                memspace->workspace_double.data);
              proc_control_xtrsv(qrmanager->ncols, qrmanager->QR.data,
                                 qrmanager->ldq, memspace->workspace_double.data);
              proc_control_B.iyend = 0;
              while (proc_control_B.iyend <= qrmanager->ncols - 1) {
                solution->lambda.data[proc_control_B.iyend] =
                  -memspace->workspace_double.data[proc_control_B.iyend];
                proc_control_B.iyend++;
              }
            }
          }

          if ((solution->state != -7) || (workingset->nActiveConstr >
               proc_control_B.nVar_g)) {
            proc_control_B.iyend = 0;
            proc_control_B.normDelta = 0.0;
            proc_control_B.idx_a = workingset->nWConstr[0] +
              workingset->nWConstr[1];
            while (proc_control_B.idx_a + 1 <= workingset->nActiveConstr) {
              if (solution->lambda.data[proc_control_B.idx_a] <
                  proc_control_B.normDelta) {
                proc_control_B.normDelta = solution->
                  lambda.data[proc_control_B.idx_a];
                proc_control_B.iyend = proc_control_B.idx_a + 1;
              }

              proc_control_B.idx_a++;
            }

            if (proc_control_B.iyend == 0) {
              solution->state = 1;
            } else {
              proc_control_B.activeSetChangeID = -1;
              proc_control_B.globalActiveConstrIdx = proc_control_B.iyend;
              subProblemChanged = true;
              proc_control_removeConstr(workingset, proc_control_B.iyend);
              solution->lambda.data[proc_control_B.iyend - 1] = 0.0;
            }
          } else {
            proc_control_B.iyend = workingset->nActiveConstr;
            proc_control_B.activeSetChangeID = 0;
            proc_control_B.globalActiveConstrIdx = workingset->nActiveConstr;
            subProblemChanged = true;
            proc_control_removeConstr(workingset, workingset->nActiveConstr);
            solution->lambda.data[proc_control_B.iyend - 1] = 0.0;
          }

          updateFval = false;
        } else {
          proc_control_feasibleratiotest(solution->xstar.data,
            solution->searchDir.data, memspace->workspace_double.data,
            memspace->workspace_double.size, workingset->nVar, workingset->ldA,
            workingset->Aineq.data, workingset->bineq.data, workingset->lb.data,
            workingset->indexLB.data, workingset->sizes, workingset->isActiveIdx,
            workingset->isActiveConstr.data, workingset->nWConstr,
            objective->objtype == 5, &proc_control_B.normDelta, &updateFval,
            &proc_control_B.iyend, &proc_control_B.idx_a);
          if (updateFval) {
            switch (proc_control_B.iyend) {
             case 3:
              proc_control_addAineqConstr(workingset, proc_control_B.idx_a);
              break;

             case 4:
              proc_addBoundToActiveSetMatrix_(workingset, 4,
                proc_control_B.idx_a);
              break;

             default:
              proc_addBoundToActiveSetMatrix_(workingset, 5,
                proc_control_B.idx_a);
              break;
            }

            proc_control_B.activeSetChangeID = 1;
          } else {
            proc_c_checkUnboundedOrIllPosed(solution, objective);
            subProblemChanged = false;
            if (workingset->nActiveConstr == 0) {
              solution->state = 1;
            }
          }

          if ((proc_control_B.nVar_g >= 1) && (!(proc_control_B.normDelta == 0.0)))
          {
            proc_control_B.iyend = 0;
            while (proc_control_B.iyend <= proc_control_B.nVar_g - 1) {
              solution->xstar.data[proc_control_B.iyend] +=
                proc_control_B.normDelta * solution->
                searchDir.data[proc_control_B.iyend];
              proc_control_B.iyend++;
            }
          }

          proc_contro_computeGrad_StoreHx(objective, H, f_data,
            solution->xstar.data);
          updateFval = true;
        }

        proc_checkStoppingAndUpdateFval(&proc_control_B.activeSetChangeID,
          f_data, solution, memspace, objective, workingset, qrmanager,
          options_ObjectiveLimit, runTimeOptions_MaxIterations, updateFval);
      }
    } else {
      if (!updateFval) {
        solution->fstar = proc_contro_computeFval_ReuseHx(objective,
          memspace->workspace_double.data, f_data, solution->xstar.data);
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_linearForm_(boolean_T obj_hasLinear, int32_T
  obj_nvar, real_T workspace_data[], const real_T H[21609], const real_T f_data[],
  const real_T x_data[])
{
  int32_T ix;
  ix = 0;
  if (obj_hasLinear) {
    while (ix <= obj_nvar - 1) {
      workspace_data[ix] = f_data[ix];
      ix++;
    }

    ix = 1;
  }

  if (obj_nvar != 0) {
    int32_T b;
    int32_T iac;
    if (ix != 1) {
      while (ix <= obj_nvar - 1) {
        workspace_data[ix] = 0.0;
        ix++;
      }
    }

    ix = 0;
    b = (obj_nvar - 1) * obj_nvar + 1;
    iac = 1;
    while (((obj_nvar > 0) && (iac <= b)) || ((obj_nvar < 0) && (iac >= b))) {
      real_T c;
      int32_T d;
      int32_T iy;
      c = 0.5 * x_data[ix];
      iy = 0;
      d = (iac + obj_nvar) - 1;
      for (int32_T ia{iac}; ia <= d; ia++) {
        workspace_data[iy] += H[ia - 1] * c;
        iy++;
      }

      ix++;
      iac += obj_nvar;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
real_T proc_control::proc_control_computeFval(const
  s_oZGbvi5mjKKebHB9aR5DoG_proc_T *obj, real_T workspace_data[], const real_T H
  [21609], const real_T f_data[], const real_T x_data[])
{
  real_T val;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    proc_control_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    val = 0.0;
    if (obj->nvar >= 1) {
      for (int32_T idx{0}; idx < obj->nvar; idx++) {
        val += workspace_data[idx] * x_data[idx];
      }
    }
    break;

   default:
    proc_control_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    for (int32_T idx = obj->nvar; idx < obj->maxVar - 1; idx++) {
      workspace_data[idx] = 0.5 * obj->beta * x_data[idx] + obj->rho;
    }

    val = 0.0;
    if (obj->maxVar - 1 >= 1) {
      for (int32_T idx{0}; idx <= obj->maxVar - 2; idx++) {
        val += workspace_data[idx] * x_data[idx];
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_phaseone(const real_T H[21609], const real_T
  f_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *cholmanager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  objective, somzaGboVhDG7PNQS6E98jD_proc__T *options, const
  somzaGboVhDG7PNQS6E98jD_proc__T *runTimeOptions)
{
  proc_control_B.PROBTYPE_ORIG = workingset->probType;
  proc_control_B.nVar_tmp = workingset->nVar;
  solution->xstar.data[workingset->nVar] = solution->maxConstr + 1.0;
  if (workingset->probType == 3) {
    proc_control_B.mConstr = 1;
  } else {
    proc_control_B.mConstr = 4;
  }

  proc_control_setProblemType(workingset, proc_control_B.mConstr);
  proc_contro_removeAllIneqConstr(workingset);
  objective->prev_objtype = objective->objtype;
  objective->prev_nvar = objective->nvar;
  objective->prev_hasLinear = objective->hasLinear;
  objective->objtype = 5;
  objective->nvar = proc_control_B.nVar_tmp + 1;
  objective->gammaScalar = 1.0;
  objective->hasLinear = true;
  options->ObjectiveLimit = 0.02;
  options->StepTolerance = 1.4901161193847657E-10;
  solution->fstar = proc_control_computeFval(objective,
    memspace->workspace_double.data, H, f_data, solution->xstar.data);
  solution->state = 5;
  proc_control_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                       cholmanager, objective, options->SolverName,
                       options->StepTolerance, options->ObjectiveLimit,
                       runTimeOptions->MaxIterations);
  if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
       workingset->sizes[3]) - 2]) {
    boolean_T exitg1;
    proc_control_B.mConstr = workingset->sizes[0] + 131;
    exitg1 = false;
    while ((!exitg1) && (proc_control_B.mConstr <= workingset->nActiveConstr)) {
      if ((workingset->Wid.data[proc_control_B.mConstr - 1] == 4) &&
          (workingset->Wlocalidx.data[proc_control_B.mConstr - 1] ==
           workingset->sizes[3])) {
        proc_control_removeConstr(workingset, proc_control_B.mConstr);
        exitg1 = true;
      } else {
        proc_control_B.mConstr++;
      }
    }
  }

  proc_control_B.mConstr = workingset->nActiveConstr;
  while ((proc_control_B.mConstr > workingset->sizes[0] + 130) &&
         (proc_control_B.mConstr > proc_control_B.nVar_tmp)) {
    proc_control_removeConstr(workingset, proc_control_B.mConstr);
    proc_control_B.mConstr--;
  }

  solution->maxConstr = solution->xstar.data[proc_control_B.nVar_tmp];
  proc_control_setProblemType(workingset, proc_control_B.PROBTYPE_ORIG);
  objective->objtype = objective->prev_objtype;
  objective->nvar = objective->prev_nvar;
  objective->hasLinear = objective->prev_hasLinear;
  options->ObjectiveLimit = (rtMinusInf);
  options->StepTolerance = 1.0E-6;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_driver_i(const real_T H[21609], const real_T
  f_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *cholmanager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  objective, somzaGboVhDG7PNQS6E98jD_proc__T *options,
  somzaGboVhDG7PNQS6E98jD_proc__T *runTimeOptions)
{
  boolean_T guard1{ false };

  solution->iterations = 0;
  runTimeOptions->RemainFeasible = true;
  proc_control_B.nVar_l = workingset->nVar - 1;
  guard1 = false;
  if (workingset->probType == 3) {
    proc_control_B.b_idx_f = 0;
    while (proc_control_B.b_idx_f <= workingset->sizes[0] - 1) {
      solution->xstar.data[workingset->indexFixed.data[proc_control_B.b_idx_f] -
        1] = workingset->ub.data[workingset->
        indexFixed.data[proc_control_B.b_idx_f] - 1];
      proc_control_B.b_idx_f++;
    }

    proc_control_B.b_idx_f = 0;
    while (proc_control_B.b_idx_f <= workingset->sizes[3] - 1) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
           proc_control_B.b_idx_f) - 1]) {
        solution->xstar.data[workingset->indexLB.data[proc_control_B.b_idx_f] -
          1] = -workingset->lb.data[workingset->
          indexLB.data[proc_control_B.b_idx_f] - 1];
      }

      proc_control_B.b_idx_f++;
    }

    proc_control_B.b_idx_f = 0;
    while (proc_control_B.b_idx_f <= workingset->sizes[4] - 1) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[4] +
           proc_control_B.b_idx_f) - 1]) {
        solution->xstar.data[workingset->indexUB.data[proc_control_B.b_idx_f] -
          1] = workingset->ub.data[workingset->
          indexUB.data[proc_control_B.b_idx_f] - 1];
      }

      proc_control_B.b_idx_f++;
    }

    proc_control_PresolveWorkingSet(solution, memspace, workingset, qrmanager);
    if (solution->state < 0) {
    } else {
      guard1 = true;
    }
  } else {
    solution->state = 82;
    guard1 = true;
  }

  if (guard1) {
    solution->iterations = 0;
    solution->maxConstr = proc__maxConstraintViolation_du(workingset,
      solution->xstar.data);
    if (solution->maxConstr > 0.02) {
      proc_control_phaseone(H, f_data, solution, memspace, workingset, qrmanager,
                            cholmanager, objective, options, runTimeOptions);
      if (solution->state != 0) {
        solution->maxConstr = proc__maxConstraintViolation_du(workingset,
          solution->xstar.data);
        if (solution->maxConstr > 0.02) {
          proc_control_B.nVar_l = 0;
          while (proc_control_B.nVar_l <= workingset->mConstrMax - 1) {
            solution->lambda.data[proc_control_B.nVar_l] = 0.0;
            proc_control_B.nVar_l++;
          }

          solution->fstar = proc_control_computeFval(objective,
            memspace->workspace_double.data, H, f_data, solution->xstar.data);
          solution->state = -2;
        } else {
          if (solution->maxConstr > 0.0) {
            proc_control_B.y_size_idx_0_g = solution->searchDir.size;
            proc_control_B.b_idx_f = solution->searchDir.size;
            if (proc_control_B.b_idx_f - 1 >= 0) {
              std::memcpy(&proc_control_B.y_data_j[0], &solution->
                          searchDir.data[0], proc_control_B.b_idx_f * sizeof
                          (real_T));
            }

            proc_control_B.b_idx_f = 0;
            while (proc_control_B.b_idx_f <= proc_control_B.nVar_l) {
              proc_control_B.y_data_j[proc_control_B.b_idx_f] =
                solution->xstar.data[proc_control_B.b_idx_f];
              proc_control_B.b_idx_f++;
            }

            if (proc_control_B.y_size_idx_0_g - 1 >= 0) {
              std::memcpy(&solution->searchDir.data[0],
                          &proc_control_B.y_data_j[0],
                          proc_control_B.y_size_idx_0_g * sizeof(real_T));
            }

            proc_control_PresolveWorkingSet(solution, memspace, workingset,
              qrmanager);
            proc_control_B.maxConstr_new = proc__maxConstraintViolation_du
              (workingset, solution->xstar.data);
            if (proc_control_B.maxConstr_new >= solution->maxConstr) {
              solution->maxConstr = proc_control_B.maxConstr_new;
              proc_control_B.y_size_idx_0_g = solution->xstar.size;
              proc_control_B.b_idx_f = solution->xstar.size;
              if (proc_control_B.b_idx_f - 1 >= 0) {
                std::memcpy(&proc_control_B.y_data_j[0], &solution->xstar.data[0],
                            proc_control_B.b_idx_f * sizeof(real_T));
              }

              proc_control_B.b_idx_f = 0;
              while (proc_control_B.b_idx_f <= proc_control_B.nVar_l) {
                proc_control_B.y_data_j[proc_control_B.b_idx_f] =
                  solution->searchDir.data[proc_control_B.b_idx_f];
                proc_control_B.b_idx_f++;
              }

              if (proc_control_B.y_size_idx_0_g - 1 >= 0) {
                std::memcpy(&solution->xstar.data[0], &proc_control_B.y_data_j[0],
                            proc_control_B.y_size_idx_0_g * sizeof(real_T));
              }
            }
          }

          proc_control_iterate(H, f_data, solution, memspace, workingset,
                               qrmanager, cholmanager, objective,
                               options->SolverName, options->StepTolerance,
                               options->ObjectiveLimit,
                               runTimeOptions->MaxIterations);
        }
      }
    } else {
      proc_control_iterate(H, f_data, solution, memspace, workingset, qrmanager,
                           cholmanager, objective, options->SolverName,
                           options->StepTolerance, options->ObjectiveLimit,
                           runTimeOptions->MaxIterations);
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_addAeqConstr(s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *obj, int32_T idx_local)
{
  int32_T totalEq;
  totalEq = obj->nWConstr[0] + obj->nWConstr[1];
  if ((obj->nActiveConstr == totalEq) && (idx_local > obj->nWConstr[1])) {
    int32_T iAeq0;
    int32_T iAw0;
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->nActiveConstr++;
    obj->Wid.data[obj->nActiveConstr - 1] = 2;
    obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
    for (totalEq = 1; totalEq - 1 < obj->nVar; totalEq++) {
      obj->ATwset.data[(iAw0 + totalEq) - 1] = obj->Aeq.data[(iAeq0 + totalEq) -
        1];
    }

    obj->bwset.data[obj->nActiveConstr - 1] = obj->beq[idx_local - 1];
  } else {
    int32_T iAeq0;
    int32_T iAw0;
    obj->nActiveConstr++;
    iAeq0 = obj->nActiveConstr - 1;
    obj->Wid.data[obj->nActiveConstr - 1] = obj->Wid.data[totalEq];
    obj->Wlocalidx.data[iAeq0] = obj->Wlocalidx.data[totalEq];
    for (iAw0 = 0; iAw0 < obj->nVar; iAw0++) {
      obj->ATwset.data[iAw0 + obj->ldA * iAeq0] = obj->ATwset.data[obj->ldA *
        totalEq + iAw0];
    }

    obj->bwset.data[iAeq0] = obj->bwset.data[totalEq];
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->Wid.data[totalEq] = 2;
    obj->Wlocalidx.data[totalEq] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = obj->ldA * totalEq;
    for (int32_T b_idx{1}; b_idx - 1 < obj->nVar; b_idx++) {
      obj->ATwset.data[(iAw0 + b_idx) - 1] = obj->Aeq.data[(iAeq0 + b_idx) - 1];
    }

    obj->bwset.data[totalEq] = obj->beq[idx_local - 1];
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
boolean_T proc_control::proc_control_soc(const real_T Hessian[21609], const
  real_T grad_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *TrialState,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *WorkingSet, s_2F24x1ekvOt8ZUO1knVMv_proc__T *QRManager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *CholManager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  QPObjective, const somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  boolean_T success;
  proc_control_B.nWIneq_old = WorkingSet->nWConstr[2];
  proc_control_B.nWLower_old = WorkingSet->nWConstr[3];
  proc_control_B.nWUpper_old = WorkingSet->nWConstr[4];
  proc_control_B.nVar_kw = WorkingSet->nVar - 1;
  proc_control_B.mConstrMax_m = WorkingSet->mConstrMax - 1;
  proc_control_B.idx_Aineq = 0;
  while (proc_control_B.idx_Aineq <= proc_control_B.nVar_kw) {
    TrialState->xstarsqp[proc_control_B.idx_Aineq] = TrialState->
      xstarsqp_old[proc_control_B.idx_Aineq];
    proc_control_B.idx_Aineq++;
  }

  proc_control_B.idx_Aineq = 0;
  while (proc_control_B.idx_Aineq <= proc_control_B.nVar_kw) {
    TrialState->socDirection.data[proc_control_B.idx_Aineq] =
      TrialState->xstar.data[proc_control_B.idx_Aineq];
    proc_control_B.idx_Aineq++;
  }

  proc_control_B.idx_Aineq = 0;
  while (proc_control_B.idx_Aineq <= proc_control_B.mConstrMax_m) {
    TrialState->lambdaStopTest.data[proc_control_B.idx_Aineq] =
      TrialState->lambda.data[proc_control_B.idx_Aineq];
    proc_control_B.idx_Aineq++;
  }

  for (proc_control_B.idx_Aineq = 0; proc_control_B.idx_Aineq < 130;
       proc_control_B.idx_Aineq++) {
    WorkingSet->beq[proc_control_B.idx_Aineq] = -TrialState->
      cEq[proc_control_B.idx_Aineq];
  }

  proc_control_B.idx_Aineq_tmp_tmp = WorkingSet->ldA;
  proc_control_B.iy_h = 0;
  proc_control_B.idx_upper = WorkingSet->ldA * 129 + 1;
  proc_control_B.iac_i = 1;
  while (((proc_control_B.idx_Aineq_tmp_tmp > 0) && (proc_control_B.iac_i <=
           proc_control_B.idx_upper)) || ((proc_control_B.idx_Aineq_tmp_tmp < 0)
          && (proc_control_B.iac_i >= proc_control_B.idx_upper))) {
    proc_control_B.idx_Partition = 0;
    proc_control_B.oldDirIdx = 0.0;
    proc_control_B.idx_Aineq = (proc_control_B.iac_i + WorkingSet->nVar) - 1;
    proc_control_B.b_ia_c = proc_control_B.iac_i;
    while (proc_control_B.b_ia_c <= proc_control_B.idx_Aineq) {
      proc_control_B.oldDirIdx += WorkingSet->Aeq.data[proc_control_B.b_ia_c - 1]
        * TrialState->searchDir.data[proc_control_B.idx_Partition];
      proc_control_B.idx_Partition++;
      proc_control_B.b_ia_c++;
    }

    WorkingSet->beq[proc_control_B.iy_h] += proc_control_B.oldDirIdx;
    proc_control_B.iy_h++;
    proc_control_B.iac_i += proc_control_B.idx_Aineq_tmp_tmp;
  }

  for (proc_control_B.idx_Aineq = 0; proc_control_B.idx_Aineq < 130;
       proc_control_B.idx_Aineq++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + proc_control_B.idx_Aineq] =
      WorkingSet->beq[proc_control_B.idx_Aineq];
  }

  if (WorkingSet->sizes[2] > 0) {
    proc_control_B.idx_Aineq = 0;
    while (proc_control_B.idx_Aineq <= WorkingSet->sizes[2] - 1) {
      WorkingSet->bineq.data[proc_control_B.idx_Aineq] = -TrialState->
        cIneq.data[proc_control_B.idx_Aineq];
      proc_control_B.idx_Aineq++;
    }

    proc_control_B.idx_Aineq_tmp_tmp = WorkingSet->ldA;
    proc_control_B.iy_h = 0;
    proc_control_B.idx_upper = (WorkingSet->sizes[2] - 1) * WorkingSet->ldA + 1;
    proc_control_B.iac_i = 1;
    while (((proc_control_B.idx_Aineq_tmp_tmp > 0) && (proc_control_B.iac_i <=
             proc_control_B.idx_upper)) || ((proc_control_B.idx_Aineq_tmp_tmp <
             0) && (proc_control_B.iac_i >= proc_control_B.idx_upper))) {
      proc_control_B.idx_Partition = 0;
      proc_control_B.oldDirIdx = 0.0;
      proc_control_B.idx_Aineq = (proc_control_B.iac_i + WorkingSet->nVar) - 1;
      proc_control_B.b_ia_c = proc_control_B.iac_i;
      while (proc_control_B.b_ia_c <= proc_control_B.idx_Aineq) {
        proc_control_B.oldDirIdx += WorkingSet->Aineq.data[proc_control_B.b_ia_c
          - 1] * TrialState->searchDir.data[proc_control_B.idx_Partition];
        proc_control_B.idx_Partition++;
        proc_control_B.b_ia_c++;
      }

      WorkingSet->bineq.data[proc_control_B.iy_h] += proc_control_B.oldDirIdx;
      proc_control_B.iy_h++;
      proc_control_B.iac_i += proc_control_B.idx_Aineq_tmp_tmp;
    }

    proc_control_B.idx_Aineq = 1;
    proc_control_B.iy_h = WorkingSet->sizes[2] + 1;
    proc_control_B.idx_upper = (WorkingSet->sizes[2] + WorkingSet->sizes[3]) + 1;
    proc_control_B.iac_i = WorkingSet->isActiveIdx[2] - 1;
    while (proc_control_B.iac_i + 1 <= WorkingSet->nActiveConstr) {
      switch (WorkingSet->Wid.data[proc_control_B.iac_i]) {
       case 3:
        proc_control_B.idx_Partition = proc_control_B.idx_Aineq;
        proc_control_B.idx_Aineq++;
        WorkingSet->bwset.data[proc_control_B.iac_i] = WorkingSet->
          bineq.data[WorkingSet->Wlocalidx.data[proc_control_B.iac_i] - 1];
        break;

       case 4:
        proc_control_B.idx_Partition = proc_control_B.iy_h;
        proc_control_B.iy_h++;
        break;

       default:
        proc_control_B.idx_Partition = proc_control_B.idx_upper;
        proc_control_B.idx_upper++;
        break;
      }

      TrialState->workingset_old.data[proc_control_B.idx_Partition - 1] =
        WorkingSet->Wlocalidx.data[proc_control_B.iac_i];
      proc_control_B.iac_i++;
    }
  }

  proc_control_B.idx_Aineq = 0;
  while (proc_control_B.idx_Aineq <= proc_control_B.nVar_kw) {
    TrialState->xstar.data[proc_control_B.idx_Aineq] = TrialState->
      xstarsqp[proc_control_B.idx_Aineq];
    proc_control_B.idx_Aineq++;
  }

  proc_control_B.qpoptions_c = *qpoptions;
  proc_control_B.qpoptions_h = *qpoptions;
  proc_control_driver_i(Hessian, grad_data, TrialState, memspace, WorkingSet,
                        QRManager, CholManager, QPObjective,
                        &proc_control_B.qpoptions_c, &proc_control_B.qpoptions_h);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_addAeqConstr(WorkingSet, WorkingSet->indexEqRemoved
      [WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  proc_control_B.idx_Aineq = 0;
  while (proc_control_B.idx_Aineq <= proc_control_B.nVar_kw) {
    proc_control_B.oldDirIdx = TrialState->
      socDirection.data[proc_control_B.idx_Aineq];
    TrialState->socDirection.data[proc_control_B.idx_Aineq] =
      TrialState->xstar.data[proc_control_B.idx_Aineq] -
      TrialState->socDirection.data[proc_control_B.idx_Aineq];
    TrialState->xstar.data[proc_control_B.idx_Aineq] = proc_control_B.oldDirIdx;
    proc_control_B.idx_Aineq++;
  }

  success = (proc_control_xnrm2_md(proc_control_B.nVar_kw + 1,
              TrialState->socDirection.data) <= proc_control_xnrm2_md
             (proc_control_B.nVar_kw + 1, TrialState->xstar.data) * 2.0);
  proc_control_B.idx_Aineq = WorkingSet->sizes[2];
  proc_control_B.iy_h = WorkingSet->sizes[3];
  for (proc_control_B.nVar_kw = 0; proc_control_B.nVar_kw < 130;
       proc_control_B.nVar_kw++) {
    WorkingSet->beq[proc_control_B.nVar_kw] = -TrialState->
      cEq[proc_control_B.nVar_kw];
  }

  for (proc_control_B.nVar_kw = 0; proc_control_B.nVar_kw < 130;
       proc_control_B.nVar_kw++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + proc_control_B.nVar_kw] =
      WorkingSet->beq[proc_control_B.nVar_kw];
  }

  if (WorkingSet->sizes[2] > 0) {
    proc_control_B.nVar_kw = 0;
    while (proc_control_B.nVar_kw <= proc_control_B.idx_Aineq - 1) {
      WorkingSet->bineq.data[proc_control_B.nVar_kw] = -TrialState->
        cIneq.data[proc_control_B.nVar_kw];
      proc_control_B.nVar_kw++;
    }

    if (!success) {
      proc_contro_removeAllIneqConstr(WorkingSet);
      proc_control_B.nVar_kw = 0;
      while (proc_control_B.nVar_kw <= proc_control_B.nWIneq_old - 1) {
        proc_control_addAineqConstr(WorkingSet, TrialState->
          workingset_old.data[proc_control_B.nVar_kw]);
        proc_control_B.nVar_kw++;
      }

      proc_control_B.nWIneq_old = 0;
      while (proc_control_B.nWIneq_old <= proc_control_B.nWLower_old - 1) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 4,
          TrialState->workingset_old.data[proc_control_B.nWIneq_old +
          proc_control_B.idx_Aineq]);
        proc_control_B.nWIneq_old++;
      }

      proc_control_B.nWLower_old = 0;
      while (proc_control_B.nWLower_old <= proc_control_B.nWUpper_old - 1) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 5,
          TrialState->workingset_old.data[(proc_control_B.nWLower_old +
          proc_control_B.idx_Aineq) + proc_control_B.iy_h]);
        proc_control_B.nWLower_old++;
      }
    }
  }

  if (!success) {
    proc_control_B.nWUpper_old = 0;
    while (proc_control_B.nWUpper_old <= proc_control_B.mConstrMax_m) {
      TrialState->lambda.data[proc_control_B.nWUpper_old] =
        TrialState->lambdaStopTest.data[proc_control_B.nWUpper_old];
      proc_control_B.nWUpper_old++;
    }
  } else {
    proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
      WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
      WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
  }

  return success;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_normal(const real_T Hessian[21609], const real_T
  grad_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *WorkingSet, s_2F24x1ekvOt8ZUO1knVMv_proc__T *QRManager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *CholManager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  QPObjective, const somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  boolean_T nonlinEqRemoved;
  proc_control_B.qpoptions_d = *qpoptions;
  proc_control_B.qpoptions_c5 = *qpoptions;
  proc_control_driver_i(Hessian, grad_data, TrialState, memspace, WorkingSet,
                        QRManager, CholManager, QPObjective,
                        &proc_control_B.qpoptions_d,
                        &proc_control_B.qpoptions_c5);
  if (TrialState->state > 0) {
    proc_control_B.penaltyParamTrial = MeritFunction->penaltyParam;
    proc_control_B.constrViolationEq = 0.0;
    for (proc_control_B.k_k = 0; proc_control_B.k_k < 130; proc_control_B.k_k++)
    {
      proc_control_B.constrViolationEq += std::abs(TrialState->
        cEq[proc_control_B.k_k]);
    }

    proc_control_B.constrViolationIneq = 0.0;
    proc_control_B.k_k = 0;
    while (proc_control_B.k_k <= WorkingSet->sizes[2] - 1) {
      if (TrialState->cIneq.data[proc_control_B.k_k] > 0.0) {
        proc_control_B.constrViolationIneq += TrialState->
          cIneq.data[proc_control_B.k_k];
      }

      proc_control_B.k_k++;
    }

    proc_control_B.constrViolationEq += proc_control_B.constrViolationIneq;
    proc_control_B.constrViolationIneq = MeritFunction->linearizedConstrViol;
    MeritFunction->linearizedConstrViol = 0.0;
    proc_control_B.constrViolationIneq += proc_control_B.constrViolationEq;
    if ((proc_control_B.constrViolationIneq > 2.2204460492503131E-16) &&
        (TrialState->fstar > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        proc_control_B.penaltyParamTrial = 1.0;
      } else {
        proc_control_B.penaltyParamTrial = 1.5;
      }

      proc_control_B.penaltyParamTrial = proc_control_B.penaltyParamTrial *
        TrialState->fstar / proc_control_B.constrViolationIneq;
    }

    if (proc_control_B.penaltyParamTrial < MeritFunction->penaltyParam) {
      MeritFunction->phi = proc_control_B.penaltyParamTrial *
        proc_control_B.constrViolationEq + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) *
           proc_control_B.penaltyParamTrial + MeritFunction->initFval) -
          MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        MeritFunction->penaltyParam = std::fmax(proc_control_B.penaltyParamTrial,
          1.0E-10);
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam *
          proc_control_B.constrViolationEq + TrialState->sqpFval;
      }
    } else {
      MeritFunction->penaltyParam = std::fmax(proc_control_B.penaltyParamTrial,
        1.0E-10);
      MeritFunction->phi = MeritFunction->penaltyParam *
        proc_control_B.constrViolationEq + TrialState->sqpFval;
    }

    MeritFunction->phiPrimePlus = std::fmin(TrialState->fstar -
      MeritFunction->penaltyParam * proc_control_B.constrViolationEq, 0.0);
  }

  proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
    WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
    WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
  nonlinEqRemoved = (WorkingSet->mEqRemoved > 0);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_addAeqConstr(WorkingSet, WorkingSet->indexEqRemoved
      [WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  if (nonlinEqRemoved) {
    for (proc_control_B.k_k = 0; proc_control_B.k_k < 130; proc_control_B.k_k++)
    {
      WorkingSet->Wlocalidx.data[WorkingSet->sizes[0] + proc_control_B.k_k] =
        proc_control_B.k_k + 1;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_relaxed(const real_T Hessian[21609], const
  real_T grad_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *WorkingSet, s_2F24x1ekvOt8ZUO1knVMv_proc__T *QRManager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *CholManager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  QPObjective, somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  boolean_T tf;
  proc_control_B.nVarOrig = WorkingSet->nVar - 1;
  proc_control_B.beta = 0.0;
  proc_control_B.temp_f = 0;
  while (proc_control_B.temp_f <= proc_control_B.nVarOrig) {
    proc_control_B.beta += Hessian[147 * proc_control_B.temp_f +
      proc_control_B.temp_f];
    proc_control_B.temp_f++;
  }

  proc_control_B.beta /= static_cast<real_T>(WorkingSet->nVar);
  if (TrialState->sqpIterations <= 1) {
    proc_control_B.rho = std::fmax(1.0, std::abs(grad_data[proc_control_ixamax
      (QPObjective->nvar, grad_data) - 1])) * 100.0;
  } else {
    proc_control_B.rho = std::abs(TrialState->lambdasqp.data[proc_control_ixamax
      (WorkingSet->mConstr, TrialState->lambdasqp.data) - 1]);
  }

  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->beta = proc_control_B.beta;
  QPObjective->rho = proc_control_B.rho;
  QPObjective->hasLinear = true;
  QPObjective->objtype = 4;
  proc_control_B.b_WorkingSet = *WorkingSet;
  proc_control_setProblemType(&proc_control_B.b_WorkingSet, 2);
  proc_control_B.mIneq_l = proc_control_B.b_WorkingSet.sizes[2] - 1;
  proc_control_B.mLBOrig = (proc_control_B.b_WorkingSet.sizes[3] -
    proc_control_B.b_WorkingSet.sizes[2]) - 260;
  proc_control_B.temp_f = 0;
  while (proc_control_B.temp_f <= proc_control_B.mIneq_l) {
    memspace->workspace_double.data[proc_control_B.temp_f] =
      proc_control_B.b_WorkingSet.bineq.data[proc_control_B.temp_f];
    proc_control_B.temp_f++;
  }

  proc_control_xgemv_mtmcjbiadz2(WorkingSet->nVar,
    proc_control_B.b_WorkingSet.sizes[2], proc_control_B.b_WorkingSet.Aineq.data,
    proc_control_B.b_WorkingSet.ldA, TrialState->xstar.data,
    memspace->workspace_double.data);
  proc_control_B.temp_f = 0;
  while (proc_control_B.temp_f <= proc_control_B.mIneq_l) {
    TrialState->xstar.data[(proc_control_B.nVarOrig + proc_control_B.temp_f) + 1]
      = static_cast<real_T>(memspace->
      workspace_double.data[proc_control_B.temp_f] > 0.0) *
      memspace->workspace_double.data[proc_control_B.temp_f];
    proc_control_B.temp_f++;
  }

  std::memcpy(&memspace->workspace_double.data[0],
              &proc_control_B.b_WorkingSet.beq[0], 130U * sizeof(real_T));
  proc_control_xgemv_mtmcjbiadz2(WorkingSet->nVar, 130,
    proc_control_B.b_WorkingSet.Aeq.data, proc_control_B.b_WorkingSet.ldA,
    TrialState->xstar.data, memspace->workspace_double.data);
  for (proc_control_B.temp_f = 0; proc_control_B.temp_f < 130;
       proc_control_B.temp_f++) {
    proc_control_B.idx_positive = proc_control_B.mIneq_l + proc_control_B.temp_f;
    if (memspace->workspace_double.data[proc_control_B.temp_f] <= 0.0) {
      TrialState->xstar.data[(proc_control_B.nVarOrig +
        proc_control_B.idx_positive) + 2] = 0.0;
      TrialState->xstar.data[(proc_control_B.nVarOrig +
        proc_control_B.idx_positive) + 132] = -memspace->
        workspace_double.data[proc_control_B.temp_f];
      proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4,
        (proc_control_B.mLBOrig + proc_control_B.idx_positive) + 2);
      if (memspace->workspace_double.data[proc_control_B.temp_f] >= -0.02) {
        proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4,
          (proc_control_B.mLBOrig + proc_control_B.idx_positive) + 132);
      }
    } else {
      proc_control_B.i7 = proc_control_B.nVarOrig + proc_control_B.idx_positive;
      TrialState->xstar.data[proc_control_B.i7 + 2] =
        memspace->workspace_double.data[proc_control_B.temp_f];
      TrialState->xstar.data[proc_control_B.i7 + 132] = 0.0;
      proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4,
        (proc_control_B.mLBOrig + proc_control_B.idx_positive) + 132);
      if (memspace->workspace_double.data[proc_control_B.temp_f] <= 0.02) {
        proc_addBoundToActiveSetMatrix_(&proc_control_B.b_WorkingSet, 4,
          (proc_control_B.mLBOrig + proc_control_B.idx_positive) + 2);
      }
    }
  }

  proc_control_B.temp_f = qpoptions->MaxIterations;
  qpoptions->MaxIterations = (qpoptions->MaxIterations +
    proc_control_B.b_WorkingSet.nVar) - WorkingSet->nVar;
  proc_control_B.qpoptions = *qpoptions;
  proc_control_B.qpoptions_j = *qpoptions;
  proc_control_driver_i(Hessian, grad_data, TrialState, memspace,
                        &proc_control_B.b_WorkingSet, QRManager, CholManager,
                        QPObjective, &proc_control_B.qpoptions,
                        &proc_control_B.qpoptions_j);
  qpoptions->MaxIterations = proc_control_B.temp_f;
  proc_control_B.mIneq_l = proc_control_B.b_WorkingSet.sizes[2] - 1;
  proc_control_B.mLBOrig = proc_control_B.b_WorkingSet.sizes[3] - 261;
  proc_control_B.temp_f = 0;
  for (proc_control_B.nVarOrig = 0; proc_control_B.nVarOrig < 130;
       proc_control_B.nVarOrig++) {
    boolean_T b_tf;
    proc_control_B.idx_positive = (proc_control_B.b_WorkingSet.isActiveIdx[3] +
      proc_control_B.mLBOrig) + proc_control_B.nVarOrig;
    tf =
      proc_control_B.b_WorkingSet.isActiveConstr.data[proc_control_B.idx_positive];
    b_tf =
      proc_control_B.b_WorkingSet.isActiveConstr.data[proc_control_B.idx_positive
      + 130];
    memspace->workspace_int.data[proc_control_B.nVarOrig] = tf;
    memspace->workspace_int.data[proc_control_B.nVarOrig + 130] = b_tf;
    proc_control_B.temp_f = (proc_control_B.temp_f + tf) + b_tf;
  }

  proc_control_B.nVarOrig = 0;
  while (proc_control_B.nVarOrig <= proc_control_B.mIneq_l) {
    tf = proc_control_B.b_WorkingSet.isActiveConstr.data
      [(((proc_control_B.b_WorkingSet.isActiveIdx[3] + proc_control_B.mLBOrig) -
         proc_control_B.mIneq_l) + proc_control_B.nVarOrig) - 1];
    memspace->workspace_int.data[proc_control_B.nVarOrig + 260] = tf;
    proc_control_B.temp_f += tf;
    proc_control_B.nVarOrig++;
  }

  if (TrialState->state != -6) {
    proc_control_B.nVarOrig = (proc_control_B.b_WorkingSet.nVarMax -
      WorkingSet->nVar) - 1;
    proc_control_B.qpfvalLinearExcess = 0.0;
    proc_control_B.qpfvalQuadExcess = 0.0;
    if (proc_control_B.nVarOrig >= 1) {
      proc_control_B.mIneq_l = WorkingSet->nVar + proc_control_B.nVarOrig;
      proc_control_B.mLBOrig = WorkingSet->nVar;
      while (proc_control_B.mLBOrig + 1 <= proc_control_B.mIneq_l) {
        proc_control_B.qpfvalLinearExcess += std::abs(TrialState->
          xstar.data[proc_control_B.mLBOrig]);
        proc_control_B.mLBOrig++;
      }

      proc_control_B.mIneq_l = WorkingSet->nVar;
      proc_control_B.mLBOrig = WorkingSet->nVar;
      proc_control_B.idx_positive = 0;
      while (proc_control_B.idx_positive <= proc_control_B.nVarOrig - 1) {
        proc_control_B.qpfvalQuadExcess += TrialState->
          xstar.data[proc_control_B.mIneq_l] * TrialState->
          xstar.data[proc_control_B.mLBOrig];
        proc_control_B.mIneq_l++;
        proc_control_B.mLBOrig++;
        proc_control_B.idx_positive++;
      }
    }

    proc_control_B.beta = (TrialState->fstar - proc_control_B.rho *
      proc_control_B.qpfvalLinearExcess) - proc_control_B.beta / 2.0 *
      proc_control_B.qpfvalQuadExcess;
    proc_control_B.mIneq_l = (WorkingSet->nVarMax - WorkingSet->nVar) - 1;
    proc_control_B.rho = MeritFunction->penaltyParam;
    proc_control_B.qpfvalLinearExcess = 0.0;
    for (proc_control_B.nVarOrig = 0; proc_control_B.nVarOrig < 130;
         proc_control_B.nVarOrig++) {
      proc_control_B.qpfvalLinearExcess += std::abs(TrialState->
        cEq[proc_control_B.nVarOrig]);
    }

    proc_control_B.qpfvalQuadExcess = 0.0;
    proc_control_B.nVarOrig = 0;
    while (proc_control_B.nVarOrig <= WorkingSet->sizes[2] - 1) {
      if (TrialState->cIneq.data[proc_control_B.nVarOrig] > 0.0) {
        proc_control_B.qpfvalQuadExcess += TrialState->
          cIneq.data[proc_control_B.nVarOrig];
      }

      proc_control_B.nVarOrig++;
    }

    proc_control_B.qpfvalLinearExcess += proc_control_B.qpfvalQuadExcess;
    proc_control_B.qpfvalQuadExcess = MeritFunction->linearizedConstrViol;
    proc_control_B.y_i4 = 0.0;
    if (proc_control_B.mIneq_l >= 1) {
      proc_control_B.nVarOrig = WorkingSet->nVar + proc_control_B.mIneq_l;
      proc_control_B.mIneq_l = WorkingSet->nVar;
      while (proc_control_B.mIneq_l + 1 <= proc_control_B.nVarOrig) {
        proc_control_B.y_i4 += std::abs(TrialState->
          xstar.data[proc_control_B.mIneq_l]);
        proc_control_B.mIneq_l++;
      }
    }

    MeritFunction->linearizedConstrViol = proc_control_B.y_i4;
    proc_control_B.qpfvalQuadExcess = (proc_control_B.qpfvalLinearExcess +
      proc_control_B.qpfvalQuadExcess) - proc_control_B.y_i4;
    if ((proc_control_B.qpfvalQuadExcess > 2.2204460492503131E-16) &&
        (proc_control_B.beta > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        proc_control_B.rho = 1.0;
      } else {
        proc_control_B.rho = 1.5;
      }

      proc_control_B.rho = proc_control_B.rho * proc_control_B.beta /
        proc_control_B.qpfvalQuadExcess;
    }

    if (proc_control_B.rho < MeritFunction->penaltyParam) {
      MeritFunction->phi = proc_control_B.rho *
        proc_control_B.qpfvalLinearExcess + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) * proc_control_B.rho +
           MeritFunction->initFval) - MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        MeritFunction->penaltyParam = std::fmax(proc_control_B.rho, 1.0E-10);
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam *
          proc_control_B.qpfvalLinearExcess + TrialState->sqpFval;
      }
    } else {
      MeritFunction->penaltyParam = std::fmax(proc_control_B.rho, 1.0E-10);
      MeritFunction->phi = MeritFunction->penaltyParam *
        proc_control_B.qpfvalLinearExcess + TrialState->sqpFval;
    }

    MeritFunction->phiPrimePlus = std::fmin(proc_control_B.beta -
      MeritFunction->penaltyParam * proc_control_B.qpfvalLinearExcess, 0.0);
    proc_control_B.mIneq_l = proc_control_B.b_WorkingSet.isActiveIdx[1] - 1;
    for (proc_control_B.nVarOrig = 0; proc_control_B.nVarOrig < 130;
         proc_control_B.nVarOrig++) {
      if (memspace->workspace_int.data[proc_control_B.nVarOrig] != 0) {
        tf = (memspace->workspace_int.data[proc_control_B.nVarOrig + 130] != 0);
      } else {
        tf = false;
      }

      proc_control_B.mLBOrig = proc_control_B.mIneq_l + proc_control_B.nVarOrig;
      TrialState->lambda.data[proc_control_B.mLBOrig] *= static_cast<real_T>(tf);
    }

    proc_control_B.nVarOrig = proc_control_B.b_WorkingSet.isActiveIdx[2] - 1;
    while (proc_control_B.nVarOrig + 1 <=
           proc_control_B.b_WorkingSet.nActiveConstr) {
      if (proc_control_B.b_WorkingSet.Wid.data[proc_control_B.nVarOrig] == 3) {
        TrialState->lambda.data[proc_control_B.nVarOrig] *= static_cast<real_T>
          (memspace->
           workspace_int.data[proc_control_B.b_WorkingSet.Wlocalidx.data[proc_control_B.nVarOrig]
           + 259]);
      }

      proc_control_B.nVarOrig++;
    }
  }

  proc_control_B.c_WorkingSet = proc_control_B.b_WorkingSet;
  proc_control_B.nVarOrig = (proc_control_B.b_WorkingSet.sizes[3] -
    proc_control_B.b_WorkingSet.sizes[2]) - 260;
  proc_control_B.mIneq_l = proc_control_B.b_WorkingSet.nActiveConstr;
  while ((proc_control_B.mIneq_l > proc_control_B.b_WorkingSet.sizes[0] + 130) &&
         (proc_control_B.temp_f > 0)) {
    if ((proc_control_B.c_WorkingSet.Wid.data[proc_control_B.mIneq_l - 1] == 4) &&
        (proc_control_B.c_WorkingSet.Wlocalidx.data[proc_control_B.mIneq_l - 1] >
         proc_control_B.nVarOrig)) {
      proc_control_B.beta = TrialState->
        lambda.data[proc_control_B.c_WorkingSet.nActiveConstr - 1];
      TrialState->lambda.data[proc_control_B.c_WorkingSet.nActiveConstr - 1] =
        0.0;
      TrialState->lambda.data[proc_control_B.mIneq_l - 1] = proc_control_B.beta;
      proc_control_removeConstr(&proc_control_B.c_WorkingSet,
        proc_control_B.mIneq_l);
      proc_control_B.temp_f--;
    }

    proc_control_B.mIneq_l--;
  }

  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->hasLinear = true;
  QPObjective->objtype = 3;
  *WorkingSet = proc_control_B.c_WorkingSet;
  proc_control_setProblemType(WorkingSet, 3);
  proc_control_sortLambdaQP(TrialState->lambda.data, WorkingSet->nActiveConstr,
    WorkingSet->sizes, WorkingSet->isActiveIdx, WorkingSet->Wid.data,
    WorkingSet->Wlocalidx.data, memspace->workspace_double.data);
}

// Function for MATLAB Function: '<S210>/NLMPC'
boolean_T proc_control::proc_control_step_k(int32_T *STEP_TYPE, real_T Hessian
  [21609], const real_T lb[147], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *WorkingSet, s_2F24x1ekvOt8ZUO1knVMv_proc__T *QRManager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *CholManager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  QPObjective, somzaGboVhDG7PNQS6E98jD_proc__T *qpoptions)
{
  boolean_T checkBoundViolation;
  boolean_T stepSuccess;
  stepSuccess = true;
  checkBoundViolation = true;
  proc_control_B.nVar = WorkingSet->nVar - 1;
  if (*STEP_TYPE != 3) {
    proc_control_B.b_k_d = 0;
    while (proc_control_B.b_k_d <= proc_control_B.nVar) {
      TrialState->xstar.data[proc_control_B.b_k_d] = TrialState->
        xstarsqp[proc_control_B.b_k_d];
      proc_control_B.b_k_d++;
    }
  } else {
    proc_control_B.y_size_idx_0_l = TrialState->searchDir.size;
    proc_control_B.iH0 = TrialState->searchDir.size;
    if (proc_control_B.iH0 - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data_l[0], &TrialState->searchDir.data[0],
                  proc_control_B.iH0 * sizeof(real_T));
    }

    proc_control_B.b_k_d = 0;
    while (proc_control_B.b_k_d <= proc_control_B.nVar) {
      proc_control_B.y_data_l[proc_control_B.b_k_d] = TrialState->
        xstar.data[proc_control_B.b_k_d];
      proc_control_B.b_k_d++;
    }

    if (proc_control_B.y_size_idx_0_l - 1 >= 0) {
      std::memcpy(&TrialState->searchDir.data[0], &proc_control_B.y_data_l[0],
                  proc_control_B.y_size_idx_0_l * sizeof(real_T));
    }
  }

  int32_T exitg1;
  boolean_T guard1{ false };

  do {
    exitg1 = 0;
    guard1 = false;
    switch (*STEP_TYPE) {
     case 1:
      proc_control_normal(Hessian, TrialState->grad.data, TrialState,
                          MeritFunction, memspace, WorkingSet, QRManager,
                          CholManager, QPObjective, qpoptions);
      if ((TrialState->state <= 0) && (TrialState->state != -6)) {
        *STEP_TYPE = 2;
      } else {
        proc_control_B.y_size_idx_0_l = TrialState->delta_x.size;
        proc_control_B.iH0 = TrialState->delta_x.size;
        if (proc_control_B.iH0 - 1 >= 0) {
          std::memcpy(&proc_control_B.y_data_l[0], &TrialState->delta_x.data[0],
                      proc_control_B.iH0 * sizeof(real_T));
        }

        proc_control_B.b_k_d = 0;
        while (proc_control_B.b_k_d <= proc_control_B.nVar) {
          proc_control_B.y_data_l[proc_control_B.b_k_d] = TrialState->
            xstar.data[proc_control_B.b_k_d];
          proc_control_B.b_k_d++;
        }

        if (proc_control_B.y_size_idx_0_l - 1 >= 0) {
          std::memcpy(&TrialState->delta_x.data[0], &proc_control_B.y_data_l[0],
                      proc_control_B.y_size_idx_0_l * sizeof(real_T));
        }

        guard1 = true;
      }
      break;

     case 2:
      proc_contro_removeAllIneqConstr(WorkingSet);
      proc_control_B.y_size_idx_0_l = TrialState->xstar.size;
      proc_control_B.iH0 = TrialState->xstar.size;
      if (proc_control_B.iH0 - 1 >= 0) {
        std::memcpy(&proc_control_B.c_data[0], &TrialState->xstar.data[0],
                    proc_control_B.iH0 * sizeof(real_T));
      }

      proc_control_B.b_k_d = 0;
      while (proc_control_B.b_k_d <= WorkingSet->sizes[3] - 1) {
        proc_control_B.nrmGradInf = WorkingSet->lb.data[WorkingSet->
          indexLB.data[proc_control_B.b_k_d] - 1];
        if (-proc_control_B.c_data[WorkingSet->indexLB.data[proc_control_B.b_k_d]
            - 1] > proc_control_B.nrmGradInf) {
          proc_control_B.c_data[WorkingSet->indexLB.data[proc_control_B.b_k_d] -
            1] = -proc_control_B.nrmGradInf + std::abs(proc_control_B.nrmGradInf);
        }

        proc_control_B.b_k_d++;
      }

      if (proc_control_B.y_size_idx_0_l - 1 >= 0) {
        std::memcpy(&TrialState->xstar.data[0], &proc_control_B.c_data[0],
                    proc_control_B.y_size_idx_0_l * sizeof(real_T));
      }

      proc_control_relaxed(Hessian, TrialState->grad.data, TrialState,
                           MeritFunction, memspace, WorkingSet, QRManager,
                           CholManager, QPObjective, qpoptions);
      proc_control_B.y_size_idx_0_l = TrialState->delta_x.size;
      proc_control_B.iH0 = TrialState->delta_x.size;
      if (proc_control_B.iH0 - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_l[0], &TrialState->delta_x.data[0],
                    proc_control_B.iH0 * sizeof(real_T));
      }

      proc_control_B.b_k_d = 0;
      while (proc_control_B.b_k_d <= proc_control_B.nVar) {
        proc_control_B.y_data_l[proc_control_B.b_k_d] = TrialState->
          xstar.data[proc_control_B.b_k_d];
        proc_control_B.b_k_d++;
      }

      if (proc_control_B.y_size_idx_0_l - 1 >= 0) {
        std::memcpy(&TrialState->delta_x.data[0], &proc_control_B.y_data_l[0],
                    proc_control_B.y_size_idx_0_l * sizeof(real_T));
      }

      guard1 = true;
      break;

     default:
      stepSuccess = proc_control_soc(Hessian, TrialState->grad.data, TrialState,
        memspace, WorkingSet, QRManager, CholManager, QPObjective, qpoptions);
      checkBoundViolation = stepSuccess;
      if (stepSuccess && (TrialState->state != -6)) {
        proc_control_B.b_k_d = 0;
        while (proc_control_B.b_k_d <= proc_control_B.nVar) {
          TrialState->delta_x.data[proc_control_B.b_k_d] =
            TrialState->xstar.data[proc_control_B.b_k_d] +
            TrialState->socDirection.data[proc_control_B.b_k_d];
          proc_control_B.b_k_d++;
        }
      }

      guard1 = true;
      break;
    }

    if (guard1) {
      if (TrialState->state != -6) {
        exitg1 = 1;
      } else {
        proc_control_B.nrmGradInf = 0.0;
        proc_control_B.nrmDirInf = 1.0;
        for (proc_control_B.b_k_d = 0; proc_control_B.b_k_d < 147;
             proc_control_B.b_k_d++) {
          proc_control_B.nrmGradInf = std::fmax(proc_control_B.nrmGradInf, std::
            abs(TrialState->grad.data[proc_control_B.b_k_d]));
          proc_control_B.nrmDirInf = std::fmax(proc_control_B.nrmDirInf, std::
            abs(TrialState->xstar.data[proc_control_B.b_k_d]));
        }

        proc_control_B.nrmGradInf = std::fmax(2.2204460492503131E-16,
          proc_control_B.nrmGradInf / proc_control_B.nrmDirInf);
        for (proc_control_B.b_k_d = 0; proc_control_B.b_k_d < 147;
             proc_control_B.b_k_d++) {
          proc_control_B.iH0 = 147 * proc_control_B.b_k_d;
          proc_control_B.y_size_idx_0_l = 0;
          while (proc_control_B.y_size_idx_0_l <= proc_control_B.b_k_d - 1) {
            Hessian[proc_control_B.iH0 + proc_control_B.y_size_idx_0_l] = 0.0;
            proc_control_B.y_size_idx_0_l++;
          }

          Hessian[proc_control_B.b_k_d + 147 * proc_control_B.b_k_d] =
            proc_control_B.nrmGradInf;
          proc_control_B.iH0 += proc_control_B.b_k_d;
          proc_control_B.y_size_idx_0_l = 0;
          while (proc_control_B.y_size_idx_0_l <= 145 - proc_control_B.b_k_d) {
            Hessian[(proc_control_B.iH0 + proc_control_B.y_size_idx_0_l) + 1] =
              0.0;
            proc_control_B.y_size_idx_0_l++;
          }
        }
      }
    }
  } while (exitg1 == 0);

  if (checkBoundViolation) {
    proc_control_B.y_size_idx_0_l = TrialState->delta_x.size;
    proc_control_B.iH0 = TrialState->delta_x.size;
    if (proc_control_B.iH0 - 1 >= 0) {
      std::memcpy(&proc_control_B.c_data[0], &TrialState->delta_x.data[0],
                  proc_control_B.iH0 * sizeof(real_T));
    }

    proc_control_B.nVar = 0;
    while (proc_control_B.nVar <= WorkingSet->sizes[3] - 1) {
      proc_control_B.nrmDirInf = proc_control_B.c_data[WorkingSet->
        indexLB.data[proc_control_B.nVar] - 1];
      proc_control_B.nrmGradInf = (TrialState->xstarsqp[WorkingSet->
        indexLB.data[proc_control_B.nVar] - 1] + proc_control_B.nrmDirInf) -
        lb[WorkingSet->indexLB.data[proc_control_B.nVar] - 1];
      if (proc_control_B.nrmGradInf < 0.0) {
        proc_control_B.c_data[WorkingSet->indexLB.data[proc_control_B.nVar] - 1]
          = proc_control_B.nrmDirInf - proc_control_B.nrmGradInf;
        TrialState->xstar.data[WorkingSet->indexLB.data[proc_control_B.nVar] - 1]
          -= proc_control_B.nrmGradInf;
      }

      proc_control_B.nVar++;
    }

    TrialState->delta_x.size = proc_control_B.y_size_idx_0_l;
    if (proc_control_B.y_size_idx_0_l - 1 >= 0) {
      std::memcpy(&TrialState->delta_x.data[0], &proc_control_B.c_data[0],
                  proc_control_B.y_size_idx_0_l * sizeof(real_T));
    }
  }

  return stepSuccess;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_outputBounds_p(const real_T
  runtimedata_OutputMin[130], const real_T runtimedata_OutputMax[130], const
  real_T X[143], real_T e, real_T c_data[], int32_T c_size[2])
{
  int32_T k;
  boolean_T exitg1;
  boolean_T y;
  for (int32_T i{0}; i < 130; i++) {
    proc_control_B.bv1[i] = std::isinf(runtimedata_OutputMin[i]);
  }

  all_H4RNf0h2(proc_control_B.bv1, proc_control_B.x_p);
  y = true;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k < 13)) {
    if (!proc_control_B.x_p[k]) {
      y = false;
      exitg1 = true;
    } else {
      k++;
    }
  }

  if (y) {
    for (int32_T i{0}; i < 130; i++) {
      proc_control_B.bv1[i] = std::isinf(runtimedata_OutputMax[i]);
    }

    all_H4RNf0h2(proc_control_B.bv1, proc_control_B.x_p);
    k = 0;
    exitg1 = false;
    while ((!exitg1) && (k < 13)) {
      if (!proc_control_B.x_p[k]) {
        y = false;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (y) {
    c_size[0] = 0;
    c_size[1] = 0;
  } else {
    int32_T b_size_idx_0;
    for (int32_T i{0}; i < 260; i++) {
      proc_control_B.b_c[i] = 0.0;
      proc_control_B.icf[i] = true;
    }

    for (int32_T i{0}; i < 13; i++) {
      proc_control_B.ic_g[i] = static_cast<real_T>(i) + 1.0;
    }

    for (k = 0; k < 10; k++) {
      for (int32_T i{0}; i < 13; i++) {
        proc_control_B.runtimedata_OutputMin = runtimedata_OutputMin[10 * i + k];
        proc_control_B.icf[static_cast<int32_T>(proc_control_B.ic_g[i]) - 1] =
          ((!std::isinf(proc_control_B.runtimedata_OutputMin)) && (!std::isnan
            (proc_control_B.runtimedata_OutputMin)));
      }

      for (int32_T i{0}; i < 13; i++) {
        proc_control_B.runtimedata_OutputMin = proc_control_B.ic_g[i];
        proc_control_B.runtimedata_OutputMax = runtimedata_OutputMax[10 * i + k];
        proc_control_B.icf[static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin + 13.0) - 1] = ((!std::isinf
          (proc_control_B.runtimedata_OutputMax)) && (!std::isnan
          (proc_control_B.runtimedata_OutputMax)));
        proc_control_B.ic[i] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin) - 1;
        proc_control_B.ic[i + 13] = static_cast<int32_T>
          (proc_control_B.runtimedata_OutputMin + 13.0) - 1;
      }

      for (int32_T i{0}; i < 26; i++) {
        proc_control_B.icf_j[i] = proc_control_B.icf[proc_control_B.ic[i]];
      }

      if (proc_control_any(proc_control_B.icf_j)) {
        for (int32_T i{0}; i < 13; i++) {
          proc_control_B.b_c[static_cast<int32_T>(proc_control_B.ic_g[i]) - 1] =
            (runtimedata_OutputMin[10 * i + k] - e) - X[(11 * i + k) + 1];
        }

        for (int32_T i{0}; i < 13; i++) {
          proc_control_B.b_c[static_cast<int32_T>(proc_control_B.ic_g[i] + 13.0)
            - 1] = (X[(11 * i + k) + 1] - runtimedata_OutputMax[10 * i + k]) - e;
        }
      }

      for (int32_T i{0}; i < 13; i++) {
        proc_control_B.ic_g[i] += 26.0;
      }
    }

    k = 0;
    for (int32_T i{0}; i < 260; i++) {
      if (proc_control_B.icf[i]) {
        k++;
      }
    }

    b_size_idx_0 = k;
    k = 0;
    for (int32_T i{0}; i < 260; i++) {
      if (proc_control_B.icf[i]) {
        proc_control_B.b_data_a[k] = static_cast<int16_T>(i + 1);
        k++;
      }
    }

    for (int32_T i{0}; i < b_size_idx_0; i++) {
      proc_control_B.b_c_data[i] = proc_control_B.b_c[proc_control_B.b_data_a[i]
        - 1];
    }

    c_size[0] = b_size_idx_0;
    c_size[1] = 1;
    if (b_size_idx_0 - 1 >= 0) {
      std::memcpy(&c_data[0], &proc_control_B.b_c_data[0], b_size_idx_0 * sizeof
                  (real_T));
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_co_stateEvolution_Hv4SATKs(const real_T X[143], const
  real_T U[88], real_T c[130])
{
  int32_T i_0;
  int32_T i_1;
  std::memset(&c[0], 0, 130U * sizeof(real_T));
  for (i_0 = 0; i_0 < 13; i_0++) {
    proc_control_B.ic_i[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i_0 = 0; i_0 < 11; i_0++) {
    for (i_1 = 0; i_1 < 8; i_1++) {
      proc_control_B.b_U_f[i_1 + (i_0 << 3)] = U[11 * i_1 + i_0];
    }

    for (i_1 = 0; i_1 < 13; i_1++) {
      proc_control_B.b_X_f[i_1 + 13 * i_0] = X[11 * i_1 + i_0];
    }
  }

  for (int32_T i{0}; i < 10; i++) {
    i_0 = i << 3;
    proc_co_AUV7QuatSimFcn_AMXO4i32(&proc_control_B.b_X_f[13 * i],
      &proc_control_B.b_U_f[i_0], proc_control_B.dv15);
    i_1 = (i + 1) * 13;
    proc_co_AUV7QuatSimFcn_AMXO4i32(&proc_control_B.b_X_f[i_1],
      &proc_control_B.b_U_f[i_0], proc_control_B.dv16);
    for (i_0 = 0; i_0 < 13; i_0++) {
      c[static_cast<int32_T>(proc_control_B.ic_i[i_0]) - 1] =
        (proc_control_B.b_X_f[13 * i + i_0] + (proc_control_B.dv15[i_0] +
          proc_control_B.dv16[i_0]) * 0.05) - proc_control_B.b_X_f[i_1 + i_0];
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_B.ic_i[i_0] += 13.0;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc__eML_blk_kernel_anonFcn2_g(const real_T runtimedata_x[13],
  const real_T runtimedata_OutputMin[130], const real_T runtimedata_OutputMax
  [130], const real_T z[147], real_T varargout_1_data[], int32_T
  varargout_1_size[2], real_T varargout_2[130])
{
  int32_T sizes_idx_0;
  int8_T sizes_idx_1;
  proc_control_znlmpc_getXUe(z, runtimedata_x, proc_control_B.X_o,
    proc_control_B.U_k, &proc_control_B.e);
  proc_control_outputBounds_p(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_B.X_o, proc_control_B.e, proc_control_B.varargin_1_data_h,
    proc_control_B.varargin_1_size);
  sizes_idx_1 = static_cast<int8_T>((proc_control_B.varargin_1_size[0] != 0) &&
    (proc_control_B.varargin_1_size[1] != 0));
  if (sizes_idx_1 == 0) {
    sizes_idx_0 = proc_control_B.varargin_1_size[0];
  } else if ((proc_control_B.varargin_1_size[0] != 0) &&
             (proc_control_B.varargin_1_size[1] != 0)) {
    sizes_idx_0 = proc_control_B.varargin_1_size[0];
  } else {
    sizes_idx_0 = 0;
  }

  varargout_1_size[0] = sizes_idx_0;
  varargout_1_size[1] = sizes_idx_1;
  if ((sizes_idx_1 - 1 >= 0) && (sizes_idx_0 - 1 >= 0)) {
    std::memcpy(&varargout_1_data[0], &proc_control_B.varargin_1_data_h[0],
                sizes_idx_0 * sizeof(real_T));
  }

  proc_co_stateEvolution_Hv4SATKs(proc_control_B.X_o, proc_control_B.U_k,
    varargout_2);
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_evalObjAndConstr(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[147],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130],
  real_T *fval, int32_T *status)
{
  int32_T i;
  int32_T wtYerr_tmp;
  proc_control_znlmpc_getXUe(x, obj_objfun_workspace_runtimedat,
    proc_control_B.X_e, proc_control_B.U_o, &proc_control_B.b_e);
  proc_control_B.fs = 0.0;
  for (i = 0; i < 11; i++) {
    for (proc_control_B.i_m = 0; proc_control_B.i_m < 13; proc_control_B.i_m++)
    {
      proc_control_B.b_X[proc_control_B.i_m + 13 * i] = proc_control_B.X_e[11 *
        proc_control_B.i_m + i];
    }

    for (proc_control_B.i_m = 0; proc_control_B.i_m < 8; proc_control_B.i_m++) {
      proc_control_B.b_U[proc_control_B.i_m + (i << 3)] = proc_control_B.U_o[11 *
        proc_control_B.i_m + i];
    }
  }

  for (proc_control_B.i_m = 0; proc_control_B.i_m < 10; proc_control_B.i_m++) {
    proc_control_B.wtYerr = 0.0;
    for (i = 0; i < 13; i++) {
      wtYerr_tmp = 10 * i + proc_control_B.i_m;
      proc_control_B.wtYerr_l = (proc_control_B.b_X[(proc_control_B.i_m + 1) *
        13 + i] - obj_objfun_workspace_runtimed_1[wtYerr_tmp]) *
        obj_objfun_workspace_runtimed_2[wtYerr_tmp];
      proc_control_B.wtYerr += proc_control_B.wtYerr_l * proc_control_B.wtYerr_l;
    }

    proc_control_B.fs += proc_control_B.wtYerr;
    std::memcpy(&proc_control_B.umvk[0], &proc_control_B.b_U[proc_control_B.i_m <<
                3], sizeof(real_T) << 3U);
    if (proc_control_B.i_m + 1 == 1) {
      for (i = 0; i < 8; i++) {
        proc_control_B.duk[i] = proc_control_B.umvk[i] -
          obj_objfun_workspace_runtimed_0[i];
      }
    } else {
      for (i = 0; i < 8; i++) {
        proc_control_B.duk[i] = proc_control_B.umvk[i] - proc_control_B.b_U
          [((proc_control_B.i_m - 1) << 3) + i];
      }
    }

    proc_control_B.wtYerr = 0.0;
    proc_control_B.wtYerr_l = 0.0;
    for (i = 0; i < 8; i++) {
      wtYerr_tmp = 10 * i + proc_control_B.i_m;
      proc_control_B.umvk_m = (proc_control_B.umvk[i] -
        obj_objfun_workspace_runtimed_5[wtYerr_tmp]) *
        obj_objfun_workspace_runtimed_3[wtYerr_tmp];
      proc_control_B.duk_n = obj_objfun_workspace_runtimed_4[wtYerr_tmp] *
        proc_control_B.duk[i];
      proc_control_B.wtYerr += proc_control_B.umvk_m * proc_control_B.umvk_m;
      proc_control_B.wtYerr_l += proc_control_B.duk_n * proc_control_B.duk_n;
      proc_control_B.umvk[i] = proc_control_B.umvk_m;
      proc_control_B.duk[i] = proc_control_B.duk_n;
    }

    proc_control_B.fs = (proc_control_B.fs + proc_control_B.wtYerr) +
      proc_control_B.wtYerr_l;
  }

  *fval = 100000.0 * proc_control_B.b_e * proc_control_B.b_e + proc_control_B.fs;
  if (std::isinf(*fval) || std::isnan(*fval)) {
    if (std::isnan(*fval)) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    i = (ineq0 + obj_mCineq) - 2;
    proc__eML_blk_kernel_anonFcn2_g(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_B.b_data, proc_control_B.b_size, proc_control_B.c);
    if (ineq0 > i + 1) {
      proc_control_B.i_m = -1;
      i = -1;
    } else {
      proc_control_B.i_m = ineq0 - 2;
    }

    wtYerr_tmp = i - proc_control_B.i_m;
    for (i = 0; i < wtYerr_tmp; i++) {
      Cineq_workspace_data[(proc_control_B.i_m + i) + 1] =
        proc_control_B.b_data[i];
    }

    std::memcpy(&Ceq_workspace[0], &proc_control_B.c[0], 130U * sizeof(real_T));
    *status = proc_contr_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
      ineq0);
    if (*status == 1) {
      *status = checkVectorNonFinite_2JllBqp7(Ceq_workspace);
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_con_computeLinearResiduals(const real_T x[147], int32_T
  nVar, real_T workspaceIneq_data[], const int32_T *workspaceIneq_size, int32_T
  mLinIneq, const real_T AineqT_data[], const real_T bineq_data[], int32_T ldAi)
{
  if (mLinIneq > 0) {
    int32_T k;
    int32_T loop_ub;
    int32_T y_size_idx_0;
    if (*workspaceIneq_size - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data_ld[0], &workspaceIneq_data[0],
                  *workspaceIneq_size * sizeof(real_T));
    }

    for (k = 0; k < mLinIneq; k++) {
      proc_control_B.y_data_ld[k] = bineq_data[k];
    }

    if (*workspaceIneq_size - 1 >= 0) {
      std::memcpy(&workspaceIneq_data[0], &proc_control_B.y_data_ld[0],
                  *workspaceIneq_size * sizeof(real_T));
    }

    for (k = 0; k < mLinIneq; k++) {
      workspaceIneq_data[k] = -workspaceIneq_data[k];
    }

    k = 0;
    loop_ub = (mLinIneq - 1) * ldAi + 1;
    y_size_idx_0 = 1;
    while (((ldAi > 0) && (y_size_idx_0 <= loop_ub)) || ((ldAi < 0) &&
            (y_size_idx_0 >= loop_ub))) {
      real_T c;
      int32_T d;
      int32_T ix;
      ix = 0;
      c = 0.0;
      d = (y_size_idx_0 + nVar) - 1;
      for (int32_T ia{y_size_idx_0}; ia <= d; ia++) {
        c += AineqT_data[ia - 1] * x[ix];
        ix++;
      }

      workspaceIneq_data[k] += c;
      k++;
      y_size_idx_0 += ldAi;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
real_T proc_control::proc_control_computeMeritFcn(real_T obj_penaltyParam,
  real_T fval, const real_T Cineq_workspace_data[], int32_T mIneq, const real_T
  Ceq_workspace[130], boolean_T evalWellDefined)
{
  real_T val;
  if (evalWellDefined) {
    real_T constrViolationEq;
    real_T constrViolationIneq;
    constrViolationEq = 0.0;
    for (int32_T k{0}; k < 130; k++) {
      constrViolationEq += std::abs(Ceq_workspace[k]);
    }

    constrViolationIneq = 0.0;
    for (int32_T k{0}; k < mIneq; k++) {
      if (Cineq_workspace_data[k] > 0.0) {
        constrViolationIneq += Cineq_workspace_data[k];
      }
    }

    val = (constrViolationEq + constrViolationIneq) * obj_penaltyParam + fval;
  } else {
    val = (rtInf);
  }

  return val;
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_linesearch(boolean_T *evalWellDefined, const
  real_T bineq_data[], int32_T WorkingSet_nVar, int32_T WorkingSet_ldA, const
  real_T WorkingSet_Aineq_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *TrialState,
  real_T MeritFunction_penaltyParam, real_T MeritFunction_phi, real_T
  MeritFunction_phiPrimePlus, real_T MeritFunction_phiFullStep, const
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *FcnEvaluator_objfun_workspace_r, const
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *FcnEvaluator_nonlcon_workspace_, int32_T
  FcnEvaluator_mCineq, boolean_T socTaken, real_T *alpha, int32_T *exitflag)
{
  proc_control_B.mLinIneq = TrialState->mIneq - TrialState->mNonlinIneq;
  *alpha = 1.0;
  *exitflag = 1;
  proc_control_B.phi_alpha = MeritFunction_phiFullStep;
  proc_control_B.y_size_idx_0_f = TrialState->searchDir.size;
  proc_control_B.loop_ub_m = TrialState->searchDir.size;
  if (proc_control_B.loop_ub_m - 1 >= 0) {
    std::memcpy(&proc_control_B.y_data_dh[0], &TrialState->searchDir.data[0],
                proc_control_B.loop_ub_m * sizeof(real_T));
  }

  proc_control_B.loop_ub_m = 0;
  while (proc_control_B.loop_ub_m <= WorkingSet_nVar - 1) {
    proc_control_B.y_data_dh[proc_control_B.loop_ub_m] =
      TrialState->delta_x.data[proc_control_B.loop_ub_m];
    proc_control_B.loop_ub_m++;
  }

  if (proc_control_B.y_size_idx_0_f - 1 >= 0) {
    std::memcpy(&TrialState->searchDir.data[0], &proc_control_B.y_data_dh[0],
                proc_control_B.y_size_idx_0_f * sizeof(real_T));
  }

  int32_T exitg1;
  do {
    exitg1 = 0;
    if (TrialState->FunctionEvaluations < 14700) {
      if ((*evalWellDefined) && (proc_control_B.phi_alpha <= *alpha * 0.0001 *
           MeritFunction_phiPrimePlus + MeritFunction_phi)) {
        exitg1 = 1;
      } else {
        boolean_T exitg2;
        boolean_T tooSmallX;
        *alpha *= 0.7;
        proc_control_B.loop_ub_m = 0;
        while (proc_control_B.loop_ub_m <= WorkingSet_nVar - 1) {
          TrialState->delta_x.data[proc_control_B.loop_ub_m] = *alpha *
            TrialState->xstar.data[proc_control_B.loop_ub_m];
          proc_control_B.loop_ub_m++;
        }

        if (socTaken) {
          proc_control_B.phi_alpha = *alpha * *alpha;
          if ((WorkingSet_nVar >= 1) && (!(proc_control_B.phi_alpha == 0.0))) {
            proc_control_B.loop_ub_m = 0;
            while (proc_control_B.loop_ub_m <= WorkingSet_nVar - 1) {
              TrialState->delta_x.data[proc_control_B.loop_ub_m] +=
                proc_control_B.phi_alpha * TrialState->
                socDirection.data[proc_control_B.loop_ub_m];
              proc_control_B.loop_ub_m++;
            }
          }
        }

        tooSmallX = true;
        proc_control_B.loop_ub_m = 0;
        exitg2 = false;
        while ((!exitg2) && (proc_control_B.loop_ub_m <= WorkingSet_nVar - 1)) {
          if (0.1 * std::fmax(1.0, std::abs(TrialState->
                xstarsqp[proc_control_B.loop_ub_m])) <= std::abs
              (TrialState->delta_x.data[proc_control_B.loop_ub_m])) {
            tooSmallX = false;
            exitg2 = true;
          } else {
            proc_control_B.loop_ub_m++;
          }
        }

        if (tooSmallX) {
          *exitflag = -2;
          exitg1 = 1;
        } else {
          proc_control_B.loop_ub_m = 0;
          while (proc_control_B.loop_ub_m <= WorkingSet_nVar - 1) {
            TrialState->xstarsqp[proc_control_B.loop_ub_m] =
              TrialState->xstarsqp_old[proc_control_B.loop_ub_m] +
              TrialState->delta_x.data[proc_control_B.loop_ub_m];
            proc_control_B.loop_ub_m++;
          }

          proc_control_evalObjAndConstr(FcnEvaluator_objfun_workspace_r->x,
            FcnEvaluator_objfun_workspace_r->lastMV,
            FcnEvaluator_objfun_workspace_r->ref,
            FcnEvaluator_objfun_workspace_r->OutputWeights,
            FcnEvaluator_objfun_workspace_r->MVWeights,
            FcnEvaluator_objfun_workspace_r->MVRateWeights,
            FcnEvaluator_objfun_workspace_r->MVScaledTarget,
            FcnEvaluator_nonlcon_workspace_->x,
            FcnEvaluator_nonlcon_workspace_->OutputMin,
            FcnEvaluator_nonlcon_workspace_->OutputMax, FcnEvaluator_mCineq,
            TrialState->xstarsqp, TrialState->cIneq.data, TrialState->iNonIneq0,
            TrialState->cEq, &TrialState->sqpFval, &proc_control_B.loop_ub_m);
          proc_con_computeLinearResiduals(TrialState->xstarsqp, WorkingSet_nVar,
            TrialState->cIneq.data, &TrialState->cIneq.size,
            proc_control_B.mLinIneq, WorkingSet_Aineq_data, bineq_data,
            WorkingSet_ldA);
          TrialState->FunctionEvaluations++;
          *evalWellDefined = (proc_control_B.loop_ub_m == 1);
          proc_control_B.phi_alpha = proc_control_computeMeritFcn
            (MeritFunction_penaltyParam, TrialState->sqpFval,
             TrialState->cIneq.data, TrialState->mIneq, TrialState->cEq,
             *evalWellDefined);
        }
      }
    } else {
      *exitflag = 0;
      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_driver(const real_T bineq_data[], const real_T
  lb[147], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction, const
  s_lkFpKxHZB0M4xOcTLHVN2_proc__T *FcnEvaluator, s_OnOuVjEActeQRN4FyNqSwB_proc_T
  *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet,
  s_2F24x1ekvOt8ZUO1knVMv_proc__T *QRManager, s_TNXzMnREVvDmNpLFpsTLBC_proc_T
  *CholManager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *QPObjective, const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  real_T Hessian[21609])
{
  static const char_T h[7]{ 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  static const int8_T j[21609]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  boolean_T isFeasible;
  for (proc_control_B.mLambda = 0; proc_control_B.mLambda < 21609;
       proc_control_B.mLambda++) {
    Hessian[proc_control_B.mLambda] = j[proc_control_B.mLambda];
  }

  proc_control_B.nVar_tmp_tmp = WorkingSet->nVar;
  proc_control_B.mFixed = WorkingSet->sizes[0];
  proc_control_B.mIneq_j = WorkingSet->sizes[2];
  proc_control_B.mLB = WorkingSet->sizes[3];
  proc_control_B.mUB = WorkingSet->sizes[4];
  proc_control_B.mConstr_tmp = (((WorkingSet->sizes[0] + WorkingSet->sizes[2]) +
    WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 129;
  proc_control_B.mLinIneq_tmp_tmp = WorkingSet->sizes[2] -
    TrialState->mNonlinIneq;
  proc_control_B.mLambda = ((WorkingSet->sizes[2] + WorkingSet->sizes[3]) +
    WorkingSet->sizes[4]) + (WorkingSet->sizes[0] << 1);
  if (WorkingSet->nVar >= proc_control_B.mLambda) {
    proc_control_B.mLambda = WorkingSet->nVar;
  }

  proc_control_B.qpoptions_MaxIterations = 10 * proc_control_B.mLambda;
  TrialState->steplength = 1.0;
  proc_control_B.Flags.fevalOK = true;
  proc_control_B.Flags.stepAccepted = false;
  proc_control_B.Flags.failedLineSearch = false;
  proc_control_B.Flags.stepType = 1;
  proc_control_B.ix_pk = 0;
  while (proc_control_B.ix_pk <= proc_control_B.mConstr_tmp) {
    TrialState->lambdaStopTest.data[proc_control_B.ix_pk] =
      TrialState->lambdasqp.data[proc_control_B.ix_pk];
    proc_control_B.ix_pk++;
  }

  proc_control_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  proc_control_B.optimRelativeFactor = std::fmax(1.0, std::abs
    (TrialState->grad.data[proc_control_ixamax(WorkingSet->nVar,
    TrialState->grad.data) - 1]));
  if (std::isinf(proc_control_B.optimRelativeFactor)) {
    proc_control_B.optimRelativeFactor = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  MeritFunction->feasRelativeFactor = std::fmax(1.0,
    MeritFunction->nlpPrimalFeasError);
  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &proc_control_B.Flags.gradOK, &MeritFunction->nlpDualFeasError);
  if (!proc_control_B.Flags.gradOK) {
    proc_control_B.Flags.done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = 0.0;
    MeritFunction->firstOrderOpt = std::fmax(MeritFunction->nlpDualFeasError,
      0.0);
    proc_control_B.ix_pk = 0;
    while (proc_control_B.ix_pk <= proc_control_B.mConstr_tmp) {
      TrialState->lambdaStopTestPrev.data[proc_control_B.ix_pk] =
        TrialState->lambdaStopTest.data[proc_control_B.ix_pk];
      proc_control_B.ix_pk++;
    }

    if (isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
                       proc_control_B.optimRelativeFactor)) {
      proc_control_B.Flags.done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      proc_control_B.Flags.done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        proc_control_B.Flags.done = true;
        TrialState->sqpExitFlag = -3;
      }
    }
  }

  proc_control_saveJacobian(TrialState, WorkingSet->nVar, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->Aeq.data,
    WorkingSet->ldA);
  proc_control_saveState(TrialState);
  if (!proc_control_B.Flags.done) {
    TrialState->sqpIterations = 1;
  }

  while (!proc_control_B.Flags.done) {
    if ((!proc_control_B.Flags.stepAccepted) &&
        (!proc_control_B.Flags.failedLineSearch)) {
      proc_control_B.expl_temp_d.IterDisplayQP = false;
      proc_control_B.expl_temp_d.RemainFeasible = false;
      proc_control_B.expl_temp_d.ProbRelTolFactor = 1.0;
      proc_control_B.expl_temp_d.ConstrRelTolFactor = 1.0;
      proc_control_B.expl_temp_d.PricingTolerance = 0.0;
      proc_control_B.expl_temp_d.ObjectiveLimit = (rtMinusInf);
      proc_control_B.expl_temp_d.ConstraintTolerance = 0.02;
      proc_control_B.expl_temp_d.OptimalityTolerance = 2.2204460492503131E-14;
      proc_control_B.expl_temp_d.StepTolerance = 1.0E-6;
      proc_control_B.expl_temp_d.MaxIterations =
        proc_control_B.qpoptions_MaxIterations;
      for (proc_control_B.mLambda = 0; proc_control_B.mLambda < 7;
           proc_control_B.mLambda++) {
        proc_control_B.expl_temp_d.SolverName[proc_control_B.mLambda] =
          h[proc_control_B.mLambda];
      }
    }

    while ((!proc_control_B.Flags.stepAccepted) &&
           (!proc_control_B.Flags.failedLineSearch)) {
      if (proc_control_B.Flags.stepType != 3) {
        proc_updateWorkingSetForNewQP_l(TrialState->xstarsqp, WorkingSet,
          proc_control_B.mIneq_j, TrialState->mNonlinIneq,
          TrialState->cIneq.data, TrialState->cEq, proc_control_B.mLB, lb,
          proc_control_B.mUB, proc_control_B.mFixed);
      }

      proc_control_B.expl_temp_o = proc_control_B.expl_temp_d;
      proc_control_B.Flags.stepAccepted = proc_control_step_k
        (&proc_control_B.Flags.stepType, Hessian, lb, TrialState, MeritFunction,
         memspace, WorkingSet, QRManager, CholManager, QPObjective,
         &proc_control_B.expl_temp_o);
      if (proc_control_B.Flags.stepAccepted) {
        proc_control_B.mLambda = 0;
        while (proc_control_B.mLambda <= proc_control_B.nVar_tmp_tmp - 1) {
          TrialState->xstarsqp[proc_control_B.mLambda] +=
            TrialState->delta_x.data[proc_control_B.mLambda];
          proc_control_B.mLambda++;
        }

        proc_control_evalObjAndConstr
          (FcnEvaluator->objfun.workspace.runtimedata.x,
           FcnEvaluator->objfun.workspace.runtimedata.lastMV,
           FcnEvaluator->objfun.workspace.runtimedata.ref,
           FcnEvaluator->objfun.workspace.runtimedata.OutputWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVRateWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVScaledTarget,
           FcnEvaluator->nonlcon.workspace.runtimedata.x,
           FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
           FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
           FcnEvaluator->mCineq, TrialState->xstarsqp, TrialState->cIneq.data,
           TrialState->iNonIneq0, TrialState->cEq, &TrialState->sqpFval,
           &proc_control_B.mLambda);
        proc_control_B.Flags.fevalOK = (proc_control_B.mLambda == 1);
        TrialState->FunctionEvaluations++;
        proc_con_computeLinearResiduals(TrialState->xstarsqp,
          proc_control_B.nVar_tmp_tmp, TrialState->cIneq.data,
          &TrialState->cIneq.size, proc_control_B.mLinIneq_tmp_tmp,
          WorkingSet->Aineq.data, bineq_data, WorkingSet->ldA);
        MeritFunction->phiFullStep = proc_control_computeMeritFcn
          (MeritFunction->penaltyParam, TrialState->sqpFval,
           TrialState->cIneq.data, proc_control_B.mIneq_j, TrialState->cEq,
           proc_control_B.Flags.fevalOK);
      }

      if ((proc_control_B.Flags.stepType == 1) &&
          proc_control_B.Flags.stepAccepted && proc_control_B.Flags.fevalOK &&
          (MeritFunction->phi < MeritFunction->phiFullStep) &&
          (TrialState->sqpFval < TrialState->sqpFval_old)) {
        proc_control_B.Flags.stepType = 3;
        proc_control_B.Flags.stepAccepted = false;
      } else {
        proc_control_linesearch(&proc_control_B.Flags.fevalOK, bineq_data,
          WorkingSet->nVar, WorkingSet->ldA, WorkingSet->Aineq.data, TrialState,
          MeritFunction->penaltyParam, MeritFunction->phi,
          MeritFunction->phiPrimePlus, MeritFunction->phiFullStep,
          &FcnEvaluator->objfun.workspace.runtimedata,
          &FcnEvaluator->nonlcon.workspace.runtimedata, FcnEvaluator->mCineq,
          (proc_control_B.Flags.stepType == 3) &&
          proc_control_B.Flags.stepAccepted, &proc_control_B.optimRelativeFactor,
          &proc_control_B.mLambda);
        TrialState->steplength = proc_control_B.optimRelativeFactor;
        if (proc_control_B.mLambda > 0) {
          proc_control_B.Flags.stepAccepted = true;
        } else {
          proc_control_B.Flags.failedLineSearch = true;
        }
      }
    }

    if (proc_control_B.Flags.stepAccepted &&
        (!proc_control_B.Flags.failedLineSearch)) {
      proc_control_B.ix_pk = 0;
      while (proc_control_B.ix_pk <= proc_control_B.nVar_tmp_tmp - 1) {
        TrialState->xstarsqp[proc_control_B.ix_pk] = TrialState->
          xstarsqp_old[proc_control_B.ix_pk] + TrialState->
          delta_x.data[proc_control_B.ix_pk];
        proc_control_B.ix_pk++;
      }

      proc_control_B.ix_pk = 0;
      while (proc_control_B.ix_pk <= proc_control_B.mConstr_tmp) {
        TrialState->lambdasqp.data[proc_control_B.ix_pk] +=
          (TrialState->lambda.data[proc_control_B.ix_pk] -
           TrialState->lambdasqp.data[proc_control_B.ix_pk]) *
          TrialState->steplength;
        proc_control_B.ix_pk++;
      }

      proc_control_saveState(TrialState);
      proc_control_B.Flags.gradOK = true;
      evalObjAndConstrAndDerivatives
        (FcnEvaluator->objfun.workspace.runtimedata.x,
         FcnEvaluator->objfun.workspace.runtimedata.lastMV,
         FcnEvaluator->objfun.workspace.runtimedata.ref,
         FcnEvaluator->objfun.workspace.runtimedata.OutputWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVRateWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVScaledTarget,
         FcnEvaluator->nonlcon.workspace.runtimedata.x,
         FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
         FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
         FcnEvaluator->mCineq, TrialState->xstarsqp, TrialState->grad.data,
         TrialState->cIneq.data, TrialState->iNonIneq0, TrialState->cEq,
         WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->ldA,
         WorkingSet->Aeq.data, WorkingSet->ldA, &TrialState->sqpFval,
         &proc_control_B.mLambda);
      TrialState->FunctionEvaluations++;
      proc_control_B.Flags.fevalOK = (proc_control_B.mLambda == 1);
    } else {
      TrialState->sqpFval = TrialState->sqpFval_old;
      std::memcpy(&TrialState->xstarsqp[0], &TrialState->xstarsqp_old[0], 147U *
                  sizeof(real_T));
      proc_control_B.ix_pk = TrialState->cIneq.size;
      proc_control_B.b_ix = TrialState->cIneq.size;
      if (proc_control_B.b_ix - 1 >= 0) {
        std::memcpy(&proc_control_B.y_data_g1[0], &TrialState->cIneq.data[0],
                    proc_control_B.b_ix * sizeof(real_T));
      }

      proc_control_B.mLambda = 0;
      while (proc_control_B.mLambda <= TrialState->mIneq - 1) {
        proc_control_B.y_data_g1[proc_control_B.mLambda] =
          TrialState->cIneq_old.data[proc_control_B.mLambda];
        proc_control_B.mLambda++;
      }

      if (proc_control_B.ix_pk - 1 >= 0) {
        std::memcpy(&TrialState->cIneq.data[0], &proc_control_B.y_data_g1[0],
                    proc_control_B.ix_pk * sizeof(real_T));
      }

      std::memcpy(&TrialState->cEq[0], &TrialState->cEq_old[0], 130U * sizeof
                  (real_T));
    }

    proc_control_test_exit(&proc_control_B.Flags, memspace, MeritFunction,
      fscales_lineq_constraint_size, fscales_cineq_constraint_size, WorkingSet,
      TrialState, QRManager, lb);
    if ((!proc_control_B.Flags.done) && proc_control_B.Flags.stepAccepted) {
      proc_control_B.Flags.stepAccepted = false;
      proc_control_B.Flags.stepType = 1;
      proc_control_B.Flags.failedLineSearch = false;
      proc_control_B.b_ix = proc_control_B.mFixed + TrialState->iNonIneq0;
      proc_control_B.mLambda = WorkingSet->ldA;
      proc_control_B.ix_pk = 0;
      while (proc_control_B.ix_pk <= proc_control_B.nVar_tmp_tmp - 1) {
        TrialState->delta_gradLag.data[proc_control_B.ix_pk] =
          TrialState->grad.data[proc_control_B.ix_pk];
        proc_control_B.ix_pk++;
      }

      if (proc_control_B.nVar_tmp_tmp >= 1) {
        proc_control_B.ix_pk = 0;
        while (proc_control_B.ix_pk <= proc_control_B.nVar_tmp_tmp - 1) {
          TrialState->delta_gradLag.data[proc_control_B.ix_pk] +=
            -TrialState->grad_old.data[proc_control_B.ix_pk];
          proc_control_B.ix_pk++;
        }
      }

      proc_control_xgemv_mtmcjbiadz2i(proc_control_B.nVar_tmp_tmp, 130,
        WorkingSet->Aeq.data, 1, WorkingSet->ldA, TrialState->lambdasqp.data,
        proc_control_B.mFixed + 1, TrialState->delta_gradLag.data);
      proc_control_B.ix_pk = proc_control_B.mFixed;
      proc_control_B.c_d0 = WorkingSet->ldA * 129 + 1;
      proc_control_B.b_iy = 1;
      while (((proc_control_B.mLambda > 0) && (proc_control_B.b_iy <=
               proc_control_B.c_d0)) || ((proc_control_B.mLambda < 0) &&
              (proc_control_B.b_iy >= proc_control_B.c_d0))) {
        proc_control_B.iy = 0;
        proc_control_B.b_ia = (proc_control_B.b_iy + proc_control_B.nVar_tmp_tmp)
          - 1;
        proc_control_B.ia_k = proc_control_B.b_iy;
        while (proc_control_B.ia_k <= proc_control_B.b_ia) {
          TrialState->delta_gradLag.data[proc_control_B.iy] +=
            TrialState->JacCeqTrans_old.data[proc_control_B.ia_k - 1] *
            -TrialState->lambdasqp.data[proc_control_B.ix_pk];
          proc_control_B.iy++;
          proc_control_B.ia_k++;
        }

        proc_control_B.ix_pk++;
        proc_control_B.b_iy += proc_control_B.mLambda;
      }

      if (TrialState->mNonlinIneq > 0) {
        proc_control_xgemv_mtmcjbiadz2i(proc_control_B.nVar_tmp_tmp,
          TrialState->mNonlinIneq, WorkingSet->Aineq.data, WorkingSet->ldA *
          (TrialState->iNonIneq0 - 1) + 1, WorkingSet->ldA,
          TrialState->lambdasqp.data, proc_control_B.b_ix + 130,
          TrialState->delta_gradLag.data);
        proc_control_B.ix_pk = (TrialState->mNonlinIneq - 1) * WorkingSet->ldA +
          1;
        proc_control_B.c_d0 = 1;
        while (((proc_control_B.mLambda > 0) && (proc_control_B.c_d0 <=
                 proc_control_B.ix_pk)) || ((proc_control_B.mLambda < 0) &&
                (proc_control_B.c_d0 >= proc_control_B.ix_pk))) {
          proc_control_B.b_iy = 0;
          proc_control_B.iy = (proc_control_B.c_d0 + proc_control_B.nVar_tmp_tmp)
            - 1;
          proc_control_B.b_ia = proc_control_B.c_d0;
          while (proc_control_B.b_ia <= proc_control_B.iy) {
            TrialState->delta_gradLag.data[proc_control_B.b_iy] +=
              TrialState->JacCineqTrans_old.data[proc_control_B.b_ia - 1] *
              -TrialState->lambdasqp.data[proc_control_B.b_ix + 129];
            proc_control_B.b_iy++;
            proc_control_B.b_ia++;
          }

          proc_control_B.b_ix++;
          proc_control_B.c_d0 += proc_control_B.mLambda;
        }
      }

      proc_control_saveJacobian(TrialState, proc_control_B.nVar_tmp_tmp,
        proc_control_B.mIneq_j, WorkingSet->Aineq.data, TrialState->iNonIneq0,
        WorkingSet->Aeq.data, WorkingSet->ldA);
      proc_control_BFGSUpdate(proc_control_B.nVar_tmp_tmp, Hessian,
        TrialState->delta_x.data, TrialState->delta_gradLag.data,
        memspace->workspace_double.data);
      TrialState->sqpIterations++;
    }
  }
}

// Function for MATLAB Function: '<S210>/NLMPC'
void proc_control::proc_control_fmincon(const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *fun_workspace_runtimedata, real_T fun_workspace_userdata_Ts, const real_T
  fun_workspace_userdata_CurrentS[13], const real_T
  fun_workspace_userdata_LastMV[8], const real_T
  fun_workspace_userdata_Referenc[130], const real_T
  fun_workspace_userdata_MVTarget[80], real_T fun_workspace_userdata_Predicti,
  real_T fun_workspace_userdata_NumOfSta, real_T fun_workspace_userdata_NumOfOut,
  real_T fun_workspace_userdata_NumOfInp, const real_T
  fun_workspace_userdata_MVIndex[8], const real_T x0[147], const real_T
  Aineq_data[], const real_T bineq_data[], const int32_T *bineq_size, const
  real_T lb[147], const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *nonlcon_workspace_runtimedata, const s6FZHgorTEIlMmVIrDGGTjF_proc__T
  *nonlcon_workspace_userdata, real_T x[147], real_T *fval, real_T *exitflag,
  real_T *output_iterations, real_T *output_funcCount, char_T output_algorithm[3],
  real_T *output_constrviolation, real_T *output_stepsize, real_T
  *output_lssteplength, real_T *output_firstorderopt)
{
  proc_co_eML_blk_kernel_anonFcn2(nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, x0, proc_control_B.Cineq_data,
    proc_control_B.Cineq_size, proc_control_B.Ceq,
    proc_control_B.JacCineqTrans_data, proc_control_B.JacCineqTrans_size,
    proc_control_B.JacCeqTrans);
  proc_control_B.mNonlinIneq = proc_control_B.Cineq_size[0] *
    proc_control_B.Cineq_size[1];
  proc_control_B.mIneq = *bineq_size + proc_control_B.mNonlinIneq;
  proc_control_B.mConstrMax = (proc_control_B.mIneq + proc_control_B.mIneq) +
    685;
  if (proc_control_B.mIneq + 408 >= proc_control_B.mConstrMax) {
    proc_control_B.maxDims = proc_control_B.mIneq + 408;
  } else {
    proc_control_B.maxDims = proc_control_B.mConstrMax;
  }

  proc_control_factoryConstruct(proc_control_B.mIneq + 408,
    proc_control_B.mConstrMax, proc_control_B.mIneq, proc_control_B.mNonlinIneq,
    &proc_control_B.TrialState);
  std::memcpy(&proc_control_B.TrialState.xstarsqp[0], &x0[0], 147U * sizeof
              (real_T));
  proc_control_B.FcnEvaluator.objfun.workspace.runtimedata =
    *fun_workspace_runtimedata;
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.Ts =
    fun_workspace_userdata_Ts;
  std::memcpy
    (&proc_control_B.FcnEvaluator.objfun.workspace.userdata.CurrentStates[0],
     &fun_workspace_userdata_CurrentS[0], 13U * sizeof(real_T));
  std::memcpy(&proc_control_B.FcnEvaluator.objfun.workspace.userdata.LastMV[0],
              &fun_workspace_userdata_LastMV[0], sizeof(real_T) << 3U);
  std::memcpy(&proc_control_B.FcnEvaluator.objfun.workspace.userdata.References
              [0], &fun_workspace_userdata_Referenc[0], 130U * sizeof(real_T));
  std::memcpy(&proc_control_B.FcnEvaluator.objfun.workspace.userdata.MVTarget[0],
              &fun_workspace_userdata_MVTarget[0], 80U * sizeof(real_T));
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.PredictionHorizon =
    fun_workspace_userdata_Predicti;
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.NumOfStates =
    fun_workspace_userdata_NumOfSta;
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.NumOfOutputs =
    fun_workspace_userdata_NumOfOut;
  proc_control_B.FcnEvaluator.objfun.workspace.userdata.NumOfInputs =
    fun_workspace_userdata_NumOfInp;
  std::memcpy(&proc_control_B.FcnEvaluator.objfun.workspace.userdata.MVIndex[0],
              &fun_workspace_userdata_MVIndex[0], sizeof(real_T) << 3U);
  proc_control_B.FcnEvaluator.nonlcon.workspace.runtimedata =
    *nonlcon_workspace_runtimedata;
  proc_control_B.FcnEvaluator.nonlcon.workspace.userdata =
    *nonlcon_workspace_userdata;
  proc_control_B.FcnEvaluator.mCineq = proc_control_B.mNonlinIneq;
  proc_control_B.FcnEvaluator.nVar = 147;
  proc_control_B.FcnEvaluator.mCeq = 130;
  proc_control_B.FcnEvaluator.NonFiniteSupport = true;
  proc_control_B.FcnEvaluator.SpecifyObjectiveGradient = true;
  proc_control_B.FcnEvaluator.SpecifyConstraintGradient = true;
  proc_control_B.FcnEvaluator.ScaleProblem = false;
  proc_cont_factoryConstruct_lnz4(proc_control_B.mIneq + 408,
    &proc_control_B.QPObjective.grad.size, &proc_control_B.QPObjective.Hx.size,
    &proc_control_B.QPObjective.hasLinear, &proc_control_B.QPObjective.nvar,
    &proc_control_B.QPObjective.maxVar, &proc_control_B.QPObjective.beta,
    &proc_control_B.QPObjective.rho, &proc_control_B.QPObjective.objtype,
    &proc_control_B.QPObjective.prev_objtype,
    &proc_control_B.QPObjective.prev_nvar,
    &proc_control_B.QPObjective.prev_hasLinear,
    &proc_control_B.QPObjective.gammaScalar);
  proc_control_B.QPObjective.nvar = 147;
  proc_control_B.QPObjective.hasLinear = true;
  proc_control_B.QPObjective.objtype = 3;
  proc_control_B.memspace.workspace_double.size[0] = proc_control_B.maxDims;
  proc_control_B.memspace.workspace_double.size[1] = proc_control_B.mIneq + 408;
  proc_control_B.memspace.workspace_int.size = proc_control_B.maxDims;
  proc_control_B.memspace.workspace_sort.size = proc_control_B.maxDims;
  proc_con_factoryConstruct_lnz42(proc_control_B.mIneq, proc_control_B.mIneq +
    408, proc_control_B.mConstrMax, &proc_control_B.WorkingSet);
  proc_control_B.i_jg = 0;
  for (proc_control_B.b_idx = 0; proc_control_B.b_idx < 147;
       proc_control_B.b_idx++) {
    proc_control_B.b_c_i = lb[proc_control_B.b_idx];
    if ((!std::isinf(proc_control_B.b_c_i)) && (!std::isnan(proc_control_B.b_c_i)))
    {
      proc_control_B.i_jg++;
      proc_control_B.WorkingSet.indexLB.data[proc_control_B.i_jg - 1] =
        proc_control_B.b_idx + 1;
    }
  }

  proc_control_loadProblem(&proc_control_B.WorkingSet, proc_control_B.mIneq,
    *bineq_size, Aineq_data, proc_control_B.i_jg, 0, 0,
    proc_control_B.mConstrMax);
  proc_control_B.mConstrMax = 0;
  while (proc_control_B.mConstrMax <= proc_control_B.i_jg - 1) {
    proc_control_B.TrialState.xstarsqp[proc_control_B.WorkingSet.indexLB.data[proc_control_B.mConstrMax]
      - 1] = std::fmax
      (proc_control_B.TrialState.xstarsqp[proc_control_B.WorkingSet.indexLB.data[
       proc_control_B.mConstrMax] - 1],
       lb[proc_control_B.WorkingSet.indexLB.data[proc_control_B.mConstrMax] - 1]);
    proc_control_B.mConstrMax++;
  }

  evalObjAndConstrAndDerivatives(fun_workspace_runtimedata->x,
    fun_workspace_runtimedata->lastMV, fun_workspace_runtimedata->ref,
    fun_workspace_runtimedata->OutputWeights,
    fun_workspace_runtimedata->MVWeights,
    fun_workspace_runtimedata->MVRateWeights,
    fun_workspace_runtimedata->MVScaledTarget, nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, proc_control_B.mNonlinIneq,
    proc_control_B.TrialState.xstarsqp, proc_control_B.TrialState.grad.data,
    proc_control_B.TrialState.cIneq.data, proc_control_B.TrialState.iNonIneq0,
    proc_control_B.TrialState.cEq, proc_control_B.WorkingSet.Aineq.data,
    proc_control_B.TrialState.iNonIneq0, proc_control_B.WorkingSet.ldA,
    proc_control_B.WorkingSet.Aeq.data, proc_control_B.WorkingSet.ldA,
    &proc_control_B.TrialState.sqpFval, &proc_control_B.mConstrMax);
  proc_control_B.TrialState.FunctionEvaluations = 1;
  proc_control_B.mConstrMax = proc_control_B.WorkingSet.ldA;
  if (*bineq_size > 0) {
    proc_control_B.y_size_idx_0 = proc_control_B.TrialState.cIneq.size;
    proc_control_B.loop_ub = proc_control_B.TrialState.cIneq.size;
    if (proc_control_B.loop_ub - 1 >= 0) {
      std::memcpy(&proc_control_B.y_data_g[0],
                  &proc_control_B.TrialState.cIneq.data[0],
                  proc_control_B.loop_ub * sizeof(real_T));
    }

    proc_control_B.b_idx = 0;
    while (proc_control_B.b_idx <= *bineq_size - 1) {
      proc_control_B.y_data_g[proc_control_B.b_idx] =
        bineq_data[proc_control_B.b_idx];
      proc_control_B.b_idx++;
    }

    if (proc_control_B.y_size_idx_0 - 1 >= 0) {
      std::memcpy(&proc_control_B.TrialState.cIneq.data[0],
                  &proc_control_B.y_data_g[0], proc_control_B.y_size_idx_0 *
                  sizeof(real_T));
    }

    proc_control_B.b_idx = 0;
    while (proc_control_B.b_idx <= *bineq_size - 1) {
      proc_control_B.TrialState.cIneq.data[proc_control_B.b_idx] =
        -proc_control_B.TrialState.cIneq.data[proc_control_B.b_idx];
      proc_control_B.b_idx++;
    }

    proc_control_B.b_idx = 0;
    proc_control_B.loop_ub = (*bineq_size - 1) * proc_control_B.WorkingSet.ldA +
      1;
    proc_control_B.y_size_idx_0 = 1;
    while (((proc_control_B.mConstrMax > 0) && (proc_control_B.y_size_idx_0 <=
             proc_control_B.loop_ub)) || ((proc_control_B.mConstrMax < 0) &&
            (proc_control_B.y_size_idx_0 >= proc_control_B.loop_ub))) {
      proc_control_B.ix_p = 0;
      proc_control_B.b_c_i = 0.0;
      proc_control_B.ia = proc_control_B.y_size_idx_0;
      while (proc_control_B.ia <= proc_control_B.y_size_idx_0 + 146) {
        proc_control_B.b_c_i +=
          proc_control_B.WorkingSet.Aineq.data[proc_control_B.ia - 1] *
          proc_control_B.TrialState.xstarsqp[proc_control_B.ix_p];
        proc_control_B.ix_p++;
        proc_control_B.ia++;
      }

      proc_control_B.TrialState.cIneq.data[proc_control_B.b_idx] +=
        proc_control_B.b_c_i;
      proc_control_B.b_idx++;
      proc_control_B.y_size_idx_0 += proc_control_B.mConstrMax;
    }
  }

  proc_c_updateWorkingSetForNewQP(x0, &proc_control_B.WorkingSet,
    proc_control_B.mIneq, proc_control_B.TrialState.cIneq.data,
    proc_control_B.TrialState.cEq, proc_control_B.i_jg, lb, 0, 0);
  proc_control_initActiveSet(&proc_control_B.WorkingSet);
  proc_control_B.MeritFunction.initFval = proc_control_B.TrialState.sqpFval;
  proc_control_B.MeritFunction.penaltyParam = 1.0;
  proc_control_B.MeritFunction.threshold = 0.0001;
  proc_control_B.MeritFunction.nPenaltyDecreases = 0;
  proc_control_B.MeritFunction.linearizedConstrViol = 0.0;
  proc_control_B.b_c_i = 0.0;
  for (proc_control_B.i_jg = 0; proc_control_B.i_jg < 130; proc_control_B.i_jg++)
  {
    proc_control_B.b_c_i += std::abs
      (proc_control_B.TrialState.cEq[proc_control_B.i_jg]);
  }

  proc_control_B.MeritFunction.initConstrViolationEq = proc_control_B.b_c_i;
  proc_control_B.b_c_i = 0.0;
  proc_control_B.i_jg = 0;
  while (proc_control_B.i_jg <= proc_control_B.mIneq - 1) {
    if (proc_control_B.TrialState.cIneq.data[proc_control_B.i_jg] > 0.0) {
      proc_control_B.b_c_i +=
        proc_control_B.TrialState.cIneq.data[proc_control_B.i_jg];
    }

    proc_control_B.i_jg++;
  }

  proc_control_B.MeritFunction.initConstrViolationIneq = proc_control_B.b_c_i;
  proc_control_B.MeritFunction.phi = 0.0;
  proc_control_B.MeritFunction.phiPrimePlus = 0.0;
  proc_control_B.MeritFunction.phiFullStep = 0.0;
  proc_control_B.MeritFunction.feasRelativeFactor = 0.0;
  proc_control_B.MeritFunction.nlpPrimalFeasError = 0.0;
  proc_control_B.MeritFunction.nlpDualFeasError = 0.0;
  proc_control_B.MeritFunction.nlpComplError = 0.0;
  proc_control_B.MeritFunction.firstOrderOpt = 0.0;
  proc_control_B.MeritFunction.hasObjective = true;
  proc_contro_factoryConstruct_ln(proc_control_B.maxDims, proc_control_B.maxDims,
    &proc_control_B.QRManager.ldq, proc_control_B.QRManager.QR.size,
    proc_control_B.QRManager.Q.data, proc_control_B.QRManager.Q.size,
    proc_control_B.QRManager.jpvt.data, &proc_control_B.QRManager.jpvt.size,
    &proc_control_B.QRManager.mrows, &proc_control_B.QRManager.ncols,
    &proc_control_B.QRManager.tau.size, &proc_control_B.QRManager.minRowCol,
    &proc_control_B.QRManager.usedPivoting);
  proc_contr_factoryConstruct_lnz(proc_control_B.maxDims,
    proc_control_B.CholManager.FMat.size, &proc_control_B.CholManager.ldm,
    &proc_control_B.CholManager.ndims, &proc_control_B.CholManager.info,
    &proc_control_B.CholManager.scaleFactor,
    &proc_control_B.CholManager.ConvexCheck, &proc_control_B.CholManager.regTol_,
    &proc_control_B.CholManager.workspace_,
    &proc_control_B.CholManager.workspace2_);
  proc_control_B.tmp_size_g = *bineq_size;
  proc_control_B.tmp_size_l = proc_control_B.mNonlinIneq;
  proc_control_driver(bineq_data, lb, &proc_control_B.TrialState,
                      &proc_control_B.MeritFunction,
                      &proc_control_B.FcnEvaluator, &proc_control_B.memspace,
                      &proc_control_B.WorkingSet, &proc_control_B.QRManager,
                      &proc_control_B.CholManager, &proc_control_B.QPObjective,
                      &proc_control_B.tmp_size_g, &proc_control_B.tmp_size_l,
                      proc_control_B.unusedExpr);
  *fval = proc_control_B.TrialState.sqpFval;
  *exitflag = proc_control_B.TrialState.sqpExitFlag;
  *output_iterations = proc_control_B.TrialState.sqpIterations;
  *output_funcCount = proc_control_B.TrialState.FunctionEvaluations;
  output_algorithm[0] = 's';
  output_algorithm[1] = 'q';
  output_algorithm[2] = 'p';
  *output_constrviolation = proc_control_B.MeritFunction.nlpPrimalFeasError;
  proc_control_B.b_c_i = 0.0;
  proc_control_B.scale_h = 3.3121686421112381E-170;
  for (proc_control_B.mNonlinIneq = 0; proc_control_B.mNonlinIneq < 147;
       proc_control_B.mNonlinIneq++) {
    x[proc_control_B.mNonlinIneq] =
      proc_control_B.TrialState.xstarsqp[proc_control_B.mNonlinIneq];
    proc_control_B.absxk_m = std::abs
      (proc_control_B.TrialState.delta_x.data[proc_control_B.mNonlinIneq]);
    if (proc_control_B.absxk_m > proc_control_B.scale_h) {
      proc_control_B.t_g = proc_control_B.scale_h / proc_control_B.absxk_m;
      proc_control_B.b_c_i = proc_control_B.b_c_i * proc_control_B.t_g *
        proc_control_B.t_g + 1.0;
      proc_control_B.scale_h = proc_control_B.absxk_m;
    } else {
      proc_control_B.t_g = proc_control_B.absxk_m / proc_control_B.scale_h;
      proc_control_B.b_c_i += proc_control_B.t_g * proc_control_B.t_g;
    }
  }

  *output_stepsize = proc_control_B.scale_h * std::sqrt(proc_control_B.b_c_i);
  *output_lssteplength = proc_control_B.TrialState.steplength;
  *output_firstorderopt = proc_control_B.MeritFunction.firstOrderOpt;
}

real_T proc_control::proc_control_erf(real_T x)
{
  real_T y;
  int32_T b_e;

  // ========================== COPYRIGHT NOTICE ============================
  //  The algorithms for calculating ERF(X) and ERFC(X) are derived
  //  from FDLIBM, which has the following notice:
  //
  //  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
  //
  //  Developed at SunSoft, a Sun Microsystems, Inc. business.
  //  Permission to use, copy, modify, and distribute this
  //  software is freely granted, provided that this notice
  //  is preserved.
  // =============================    END    ================================
  proc_control_B.absx = std::abs(x);
  if (std::isnan(x)) {
    y = x;
  } else if (std::isinf(x)) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else if (proc_control_B.absx < 0.84375) {
    if (proc_control_B.absx < 3.7252902984619141E-9) {
      if (proc_control_B.absx < 2.8480945388892178E-306) {
        y = (8.0 * x + 1.0270333367641007 * x) * 0.125;
      } else {
        y = 0.12837916709551259 * x + x;
      }
    } else {
      real_T z;
      z = x * x;
      y = ((((z * -2.3763016656650163E-5 + -0.0057702702964894416) * z +
             -0.02848174957559851) * z + -0.3250421072470015) * z +
           0.12837916709551256) / (((((z * -3.9602282787753681E-6 +
        0.00013249473800432164) * z + 0.0050813062818757656) * z +
        0.0650222499887673) * z + 0.39791722395915535) * z + 1.0) * x + x;
    }
  } else if (proc_control_B.absx < 1.25) {
    if (x >= 0.0) {
      y = (((((((proc_control_B.absx - 1.0) * -0.0021663755948687908 +
                0.035478304325618236) * (proc_control_B.absx - 1.0) +
               -0.11089469428239668) * (proc_control_B.absx - 1.0) +
              0.31834661990116175) * (proc_control_B.absx - 1.0) +
             -0.37220787603570132) * (proc_control_B.absx - 1.0) +
            0.41485611868374833) * (proc_control_B.absx - 1.0) +
           -0.0023621185607526594) / (((((((proc_control_B.absx - 1.0) *
        0.011984499846799107 + 0.013637083912029051) * (proc_control_B.absx -
        1.0) + 0.12617121980876164) * (proc_control_B.absx - 1.0) +
        0.071828654414196266) * (proc_control_B.absx - 1.0) + 0.540397917702171)
        * (proc_control_B.absx - 1.0) + 0.10642088040084423) *
        (proc_control_B.absx - 1.0) + 1.0) + 0.84506291151046753;
    } else {
      y = -0.84506291151046753 - (((((((proc_control_B.absx - 1.0) *
        -0.0021663755948687908 + 0.035478304325618236) * (proc_control_B.absx -
        1.0) + -0.11089469428239668) * (proc_control_B.absx - 1.0) +
        0.31834661990116175) * (proc_control_B.absx - 1.0) +
        -0.37220787603570132) * (proc_control_B.absx - 1.0) +
        0.41485611868374833) * (proc_control_B.absx - 1.0) +
        -0.0023621185607526594) / (((((((proc_control_B.absx - 1.0) *
        0.011984499846799107 + 0.013637083912029051) * (proc_control_B.absx -
        1.0) + 0.12617121980876164) * (proc_control_B.absx - 1.0) +
        0.071828654414196266) * (proc_control_B.absx - 1.0) + 0.540397917702171)
        * (proc_control_B.absx - 1.0) + 0.10642088040084423) *
        (proc_control_B.absx - 1.0) + 1.0);
    }
  } else if (proc_control_B.absx > 6.0) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else {
    real_T R;
    real_T s;
    real_T z;
    s = 1.0 / (proc_control_B.absx * proc_control_B.absx);
    if (proc_control_B.absx < 2.8571434020996094) {
      R = ((((((s * -9.8143293441691455 + -81.2874355063066) * s +
               -184.60509290671104) * s + -162.39666946257347) * s +
             -62.375332450326006) * s + -10.558626225323291) * s +
           -0.69385857270718176) * s + -0.0098649440348471482;
      s = (((((((s * -0.0604244152148581 + 6.5702497703192817) * s +
                108.63500554177944) * s + 429.00814002756783) * s +
              645.38727173326788) * s + 434.56587747522923) * s +
            137.65775414351904) * s + 19.651271667439257) * s + 1.0;
    } else {
      R = (((((s * -483.5191916086514 + -1025.0951316110772) * s +
              -637.56644336838963) * s + -160.63638485582192) * s +
            -17.757954917754752) * s + -0.799283237680523) * s +
        -0.0098649429247001;
      s = ((((((s * -22.440952446585818 + 474.52854120695537) * s +
               2553.0504064331644) * s + 3199.8582195085955) * s +
             1536.729586084437) * s + 325.79251299657392) * s +
           30.338060743482458) * s + 1.0;
    }

    if (!std::isnan(proc_control_B.absx)) {
      z = frexp(proc_control_B.absx, &b_e);
    } else {
      z = proc_control_B.absx;
      b_e = 0;
    }

    z = std::floor(z * 2.097152E+6) / 2.097152E+6 * rt_powd_snf(2.0,
      static_cast<real_T>(b_e));
    if (x < 0.0) {
      y = std::exp((z - proc_control_B.absx) * (z + proc_control_B.absx) + R / s)
        * std::exp(-z * z - 0.5625) / proc_control_B.absx - 1.0;
    } else {
      y = 1.0 - std::exp((z - proc_control_B.absx) * (z + proc_control_B.absx) +
                         R / s) * std::exp(-z * z - 0.5625) /
        proc_control_B.absx;
    }
  }

  return y;
}

void proc_control::proc_co_AUV7QuatPerturbedSimFcn(const real_T in1[13], const
  real_T in2[6], const real_T in3[8], real_T out1[13])
{
  // AUV7QuatPerturbedSimFcn
  //     OUT1 = AUV7QuatPerturbedSimFcn(IN1,IN2,IN3)
  //     This function was generated by the Symbolic Math Toolbox version 9.0.
  //     02-Apr-2022 21:17:19
  proc_control_B.t8_c = in1[4] * in1[6];
  proc_control_B.t9_j = in1[5] * in1[6];
  proc_control_B.t10_a = in1[3] * in1[4];
  proc_control_B.t11_dm = in1[3] * in1[5];
  proc_control_B.t12_c = in1[4] * in1[4];
  proc_control_B.t13_d = in1[5] * in1[5];
  proc_control_B.t15_a = in1[4] * in1[5] * 2.0;
  proc_control_B.t20_b = in1[3] * in1[6] * 2.0;
  proc_control_B.t33_g = in1[11] / 500.0;
  proc_control_B.t35_f = in1[10] / 1000.0;
  proc_control_B.t44_c = in1[12] * 0.009;
  proc_control_B.t58_p = in1[7] * 56.2448;
  proc_control_B.t67_a = in1[8] * 56.3956;
  proc_control_B.t68 = in1[9] * 59.5495;
  proc_control_B.t16_n = proc_control_B.t8_c * 2.0;
  proc_control_B.t17_h = proc_control_B.t9_j * 2.0;
  proc_control_B.t18_m = proc_control_B.t10_a * 2.0;
  proc_control_B.t19_f = proc_control_B.t11_dm * 2.0;
  proc_control_B.t21_b = proc_control_B.t12_c * 2.0;
  proc_control_B.t22_ec = proc_control_B.t13_d * 2.0;
  proc_control_B.t23_n = in1[6] * in1[6] * 2.0;
  proc_control_B.t73 = proc_control_B.t33_g + proc_control_B.t35_f;
  proc_control_B.t33_g += proc_control_B.t44_c;
  proc_control_B.t35_f += proc_control_B.t44_c;
  proc_control_B.t44_c = in1[11] * 0.39402 + proc_control_B.t58_p;
  proc_control_B.t80 = in1[10] * 0.08756 + proc_control_B.t68;
  proc_control_B.t81 = in1[12] * 0.04378 + proc_control_B.t67_a;
  proc_control_B.t83 = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] * 1.7294;
  proc_control_B.t41_p = proc_control_B.t17_h + proc_control_B.t18_m;
  proc_control_B.t48 = proc_control_erf(in1[2] * 13.333333333333334 - 2.0);
  proc_control_B.t61_i = (proc_control_B.t21_b + proc_control_B.t22_ec) - 1.0;
  proc_control_B.t58_p = in1[12] * 0.08756 + -proc_control_B.t58_p;
  proc_control_B.t68 = in1[11] * 0.04378 + -proc_control_B.t68;
  proc_control_B.t67_a = in1[10] * 0.39402 + -proc_control_B.t67_a;
  proc_control_B.t85 = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.9623;
  proc_control_B.t86 = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    3.2523;
  proc_control_B.t49 = proc_control_B.t16_n + -proc_control_B.t19_f;
  proc_control_B.t76 = proc_control_B.t48 * 0.022515;
  proc_control_B.t48 *= 22.46997;
  out1[0] = (((proc_control_B.t22_ec + proc_control_B.t23_n) - 1.0) * -in1[7] +
             (proc_control_B.t16_n + proc_control_B.t19_f) * in1[9]) +
    (proc_control_B.t15_a - proc_control_B.t20_b) * in1[8];
  out1[1] = ((proc_control_B.t15_a + proc_control_B.t20_b) * in1[7] -
             ((proc_control_B.t21_b + proc_control_B.t23_n) - 1.0) * in1[8]) +
    (proc_control_B.t17_h - proc_control_B.t18_m) * in1[9];
  out1[2] = (proc_control_B.t49 * in1[7] + proc_control_B.t41_p * in1[8]) -
    proc_control_B.t61_i * in1[9];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_B.t15_a = (std::abs(in1[10]) * 0.167 + 3.3333333333333335) * in1
    [10];
  proc_control_B.t20_b = in1[10] * proc_control_B.t33_g;
  proc_control_B.t16_n = in1[10] * proc_control_B.t80;
  proc_control_B.t17_h = in1[10] * proc_control_B.t67_a;
  proc_control_B.t18_m = in1[10] * proc_control_B.t85;
  proc_control_B.t19_f = (std::abs(in1[11]) / 10.0 + 2.3333333333333335) * in1
    [11];
  proc_control_B.t21_b = in1[10] * proc_control_B.t86;
  proc_control_B.t22_ec = in1[11] * proc_control_B.t35_f;
  proc_control_B.t23_n = in1[11] * proc_control_B.t44_c;
  proc_control_B.out1_tmp_js = in1[11] * proc_control_B.t68;
  proc_control_B.out1_tmp_lj = in1[11] * proc_control_B.t83;
  proc_control_B.out1_tmp_c = (std::abs(in1[12]) * 0.102 + 5.0) * in1[12];
  proc_control_B.t86 *= in1[11];
  proc_control_B.out1_tmp_g = in1[12] * proc_control_B.t73;
  proc_control_B.out1_tmp_c5 = in1[12] * proc_control_B.t58_p;
  proc_control_B.out1_tmp_lya = in1[12] * proc_control_B.t81;
  proc_control_B.t83 *= in1[12];
  proc_control_B.t85 *= in1[12];
  proc_control_B.out1_tmp_e = (proc_control_B.t48 - 21.31003) *
    (proc_control_B.t9_j + proc_control_B.t10_a);
  proc_control_B.out1_tmp_d = (proc_control_B.t48 - 21.31003) *
    (proc_control_B.t8_c + -proc_control_B.t11_dm);
  proc_control_B.t41_p *= proc_control_B.t76 + 0.022515;
  proc_control_B.t49 *= proc_control_B.t76 + 0.022515;
  proc_control_B.t48 = (proc_control_B.t48 - 21.31003) * proc_control_B.t61_i;
  proc_control_B.t61_i = (std::abs(in1[7]) * 1.17 + 20.0) * in1[7];
  proc_control_B.t33_g *= in1[7];
  proc_control_B.t81 *= in1[7];
  proc_control_B.t68 *= in1[7];
  proc_control_B.t76 = (std::abs(in1[8]) * 1.17 + 20.0) * in1[8];
  proc_control_B.t35_f *= in1[8];
  proc_control_B.t58_p *= in1[8];
  proc_control_B.t80 *= in1[8];
  proc_control_B.out1_tmp_m = (std::abs(in1[9]) * 0.756 + 23.333333333333332) *
    in1[9];
  proc_control_B.t73 *= in1[9];
  proc_control_B.t44_c *= in1[9];
  proc_control_B.t67_a *= in1[9];
  out1[7] = (((((((((((((((((((((((((((((((in2[0] * 0.017805210908939339 - in2[1]
    * 2.6292665351887938E-7) - in2[2] * 2.651147772206629E-6) + (in2[3] *
    1.5506047654670649E-5 - in2[4] * 0.0035750757133023231)) + (in2[5] *
    0.00047824575783651541 - in3[0] * 0.0001437270800342623)) + in3[1] *
    -0.00014420606190511319) + in3[2] * 0.00019106203022123869) + (in3[3] *
    2.2850322404196561E-5 - in3[4] * 0.00064004748139144052)) + (in3[5] *
    -0.00064697977539739777 + in3[6] * 0.00065256195255307707)) + (in3[7] *
    0.00063446530423575689 - proc_control_B.t8_c * 0.028459330540408539)) +
    (proc_control_B.t9_j * 0.00029092352319893432 + proc_control_B.t10_a *
    0.00029092352319893432)) + (proc_control_B.t11_dm * 0.028459330540408539 -
    proc_control_B.t12_c * 0.0030974981660011861)) + (in3[0] *
    1.4142135623730951 * 0.00890273691779643 + proc_control_B.t13_d *
    -0.0030974981660011861)) + (in3[1] * 1.4142135623730951 *
    0.0089024739911429118 + in3[2] * 1.4142135623730951 * 0.00890273691779643))
    + (in3[3] * 1.4142135623730951 * 0.0090210789390863678 -
       proc_control_B.t15_a * 1.5506047654670649E-5)) + (proc_control_B.t20_b *
    -0.77951213359336435 - proc_control_B.t16_n * 2.6292665351887938E-7)) +
    (proc_control_B.t17_h * -2.651147772206629E-6 - proc_control_B.t18_m *
     0.00047824575783651541)) + (proc_control_B.t19_f * 0.0035750757133023231 +
    proc_control_B.t21_b * -0.0035750757133023231)) + (proc_control_B.t22_ec *
    1.151092889105654E-5 - proc_control_B.t23_n * 2.651147772206629E-6)) +
    (proc_control_B.out1_tmp_js * 0.017805210908939339 +
     proc_control_B.out1_tmp_lj * 0.00047824575783651541)) + (proc_control_B.t86
    * -1.5506047654670649E-5 - proc_control_B.out1_tmp_c *
    0.00047824575783651541)) + (proc_control_B.out1_tmp_g *
    0.0001160672494672062 - proc_control_B.out1_tmp_c5 * 2.6292665351887938E-7))
                      + (proc_control_B.out1_tmp_lya * 0.017805210908939339 +
    proc_control_B.t83 * 0.0035750757133023231)) + (proc_control_B.out1_tmp_e *
    5.1586209420404128E-6 + proc_control_B.t85 * 1.5506047654670649E-5)) +
                    (proc_control_B.out1_tmp_d * -0.34933823803338993 -
                     proc_control_B.t41_p * 0.00060724039534933779)) +
                   (proc_control_B.t49 * -0.14000539904800319 -
                    proc_control_B.t48 * 2.600775964534703E-5)) +
                  (proc_control_B.t61_i * -0.017805210908939339 +
                   proc_control_B.t33_g * 0.0006788547663214811)) +
                 (proc_control_B.t81 * -0.00047824575783651541 +
                  proc_control_B.t68 * 0.0035750757133023231)) +
                (proc_control_B.t76 * 2.6292665351887938E-7 -
                 proc_control_B.t35_f * 0.1565168147283757)) +
               (proc_control_B.t58_p * -0.00047824575783651541 -
                proc_control_B.t80 * 1.5506047654670649E-5)) +
              (proc_control_B.out1_tmp_m * 2.651147772206629E-6 +
               proc_control_B.t73 * 0.020937599278082641)) +
             (proc_control_B.t44_c * 0.0035750757133023231 -
              proc_control_B.t67_a * 1.5506047654670649E-5)) +
    0.001548749083000593;
  out1[8] = (((((((((((((((((((((((((((((((in2[0] * -2.6292665351887938E-7 +
    in2[1] * 0.017760347254401471) - in2[2] * 5.9634626722397381E-6) + (in2[3] *
    0.0040473945262702333 - in2[4] * 1.670524623843438E-5)) + (in2[5] *
    -0.00024406644774676309 + in3[0] * 5.9258722303931477E-5)) + in3[1] *
    0.0001111188064663891) + in3[2] * -0.0001115965075552979) + (in3[3] *
    2.5863772577036511E-5 - in3[4] * 0.00071746300208054158)) + (in3[5] *
    0.00071144911343470516 + in3[6] * 0.00074561291602257885)) + (in3[7] *
    -0.00073959902737674255 + proc_control_B.t8_c * 0.00029014560316087461)) +
    (proc_control_B.t9_j * -0.03149872535074414 - proc_control_B.t10_a *
    0.03149872535074414)) + (proc_control_B.t11_dm * -0.00029014560316087461 -
    proc_control_B.t12_c * 0.0069674783442586008)) + (proc_control_B.t13_d *
    -0.0069674783442586008 - in3[0] * 1.4142135623730951 * 0.0088803050905274933))
    + (in3[1] * 1.4142135623730951 * 0.0088800421638739746 - in3[2] *
    1.4142135623730951 * 0.0088803050905274933)) + (in3[3] * 1.4142135623730951 *
    0.0088195136848327766 - proc_control_B.t15_a * 0.0040473945262702333)) +
    (proc_control_B.t20_b * 1.151092889105654E-5 + proc_control_B.t16_n *
     0.017760347254401471)) + (proc_control_B.t17_h * -5.9634626722397381E-6 +
    proc_control_B.t18_m * 0.00024406644774676309)) + (proc_control_B.t19_f *
    1.670524623843438E-5 + proc_control_B.t21_b * -1.670524623843438E-5)) +
    (proc_control_B.t22_ec * -0.7775480027976962 - proc_control_B.t23_n *
     5.9634626722397381E-6)) + (proc_control_B.out1_tmp_js *
    -2.6292665351887938E-7 - proc_control_B.out1_tmp_lj * 0.00024406644774676309))
                        + (proc_control_B.out1_tmp_c * 0.00024406644774676309 +
    proc_control_B.t86 * -0.0040473945262702333)) + (proc_control_B.out1_tmp_g *
    0.00026108039579065569 + proc_control_B.out1_tmp_c5 * 0.017760347254401471))
                      + (proc_control_B.out1_tmp_lya * -2.6292665351887938E-7 +
    proc_control_B.t83 * 1.670524623843438E-5)) + (proc_control_B.t85 *
    0.0040473945262702333 - proc_control_B.out1_tmp_e * 0.34845801313135683)) +
                    (proc_control_B.out1_tmp_d * 5.1586209420404128E-6 -
                     proc_control_B.t41_p * 0.15850212168842229)) +
                   (proc_control_B.t49 * -0.0006542028346713726 -
                    proc_control_B.t48 * 5.8501568814671831E-5)) +
                  (proc_control_B.t61_i * 2.6292665351887938E-7 +
                   proc_control_B.t33_g * 0.1771949323601108)) +
                 (proc_control_B.t81 * 0.00024406644774676309 +
                  proc_control_B.t68 * 1.670524623843438E-5)) +
                (proc_control_B.t76 * -0.017760347254401471 -
                 proc_control_B.t35_f * 0.000731355680318657)) +
               (proc_control_B.t58_p * 0.00024406644774676309 -
                proc_control_B.t80 * 0.0040473945262702333)) +
              (proc_control_B.out1_tmp_m * 5.9634626722397381E-6 -
               proc_control_B.t73 * 0.01068522908235329)) +
             (proc_control_B.t44_c * 1.670524623843438E-5 - proc_control_B.t67_a
              * 0.0040473945262702333)) + 0.0034837391721293;
  out1[9] = (((((((((((((((((((((((((((((((in2[0] * -2.651147772206629E-6 - in2
    [1] * 5.9634626722397381E-6) + (in2[2] * 0.01679428549990097 - in2[3] *
    0.00085341255788243134)) + (in2[4] * 0.0003787019822893839 + in2[5] *
    1.174952529187145E-6)) + in3[0] * 2.6122776886482448E-6) + in3[1] *
    -8.2515524680653645E-6) + in3[2] * 3.4347864205989959E-6) + (in3[3] *
    -7.84112891899092E-6 - in3[4] * 0.0165745904097681)) + (in3[5] *
    0.016710923123392282 - in3[6] * 0.017018151644229949)) + in3[7] *
    0.016881818930605769) + (proc_control_B.t8_c * 0.002925602479401229 +
    proc_control_B.t9_j * 0.0065984621484894137)) + (proc_control_B.t10_a *
    0.0065984621484894137 - proc_control_B.t11_dm * 0.002925602479401229)) +
    (proc_control_B.t12_c * 0.0017913918640422291 + proc_control_B.t13_d *
    0.0017913918640422291)) + ((in3[0] * 1.4142135623730951 *
    1.656157450016555E-6 - in3[1] * 1.4142135623730951 * 4.3073052222231838E-6)
    + in3[2] * 1.4142135623730951 * 1.656157450016555E-6)) + (in3[3] *
    1.4142135623730951 * -4.0159169949847719E-6 + proc_control_B.t15_a *
    0.00085341255788243134)) + (proc_control_B.t20_b * 0.0001160672494672062 -
    proc_control_B.t16_n * 5.9634626722397381E-6)) + (proc_control_B.t17_h *
    0.01679428549990097 - proc_control_B.t18_m * 1.174952529187145E-6)) +
    (proc_control_B.t21_b * 0.0003787019822893839 - proc_control_B.t19_f *
     0.0003787019822893839)) + (proc_control_B.t22_ec * 0.00026108039579065569 +
    proc_control_B.t23_n * 0.01679428549990097)) + (proc_control_B.out1_tmp_js *
    -2.651147772206629E-6 + proc_control_B.out1_tmp_lj * 1.174952529187145E-6))
                        + (proc_control_B.t86 * 0.00085341255788243134 -
    proc_control_B.out1_tmp_c * 1.174952529187145E-6)) +
                       (proc_control_B.out1_tmp_g * -0.73525381918566446 -
                        proc_control_B.out1_tmp_c5 * 5.9634626722397381E-6)) +
                      (proc_control_B.out1_tmp_lya * -2.651147772206629E-6 -
                       proc_control_B.t83 * 0.0003787019822893839)) +
                     (proc_control_B.out1_tmp_e * 0.0001170031376293437 +
                      proc_control_B.t85 * -0.00085341255788243134)) +
                    (proc_control_B.out1_tmp_d * 5.2015519290694059E-5 +
                     proc_control_B.t41_p * 0.033420932953763992)) +
                   (proc_control_B.t49 * 0.01483054525346535 +
                    proc_control_B.t48 * 0.16475194075402849)) +
                  (proc_control_B.t61_i * 2.651147772206629E-6 -
                   proc_control_B.t33_g * 0.037362401784092843)) +
                 (proc_control_B.t81 * -1.174952529187145E-6 -
                  proc_control_B.t68 * 0.0003787019822893839)) +
                (proc_control_B.t76 * 5.9634626722397381E-6 +
                 proc_control_B.t35_f * 0.01657957278462923)) +
               (proc_control_B.t58_p * -1.174952529187145E-6 +
                proc_control_B.t80 * 0.00085341255788243134)) +
              (proc_control_B.out1_tmp_m * -0.01679428549990097 +
               proc_control_B.t73 * 5.1439421727813221E-5)) +
             (proc_control_B.t44_c * -0.0003787019822893839 +
              proc_control_B.t67_a * 0.00085341255788243134)) +
    -0.00089569593202111432;
  out1[10] = (((((((((((((((((((((((((((((((in2[0] * 1.5506047654670649E-5 +
    in2[1] * 0.0040473945262702333) + (in2[2] * -0.00085341255788243134 + in2[3]
    * 0.57921337987918464)) + (in2[4] * -0.0023839098537787738 - in2[5] *
    0.00076717235562463032)) + in3[0] * -0.0034040236632883881) + in3[1] *
    0.0039692440382595364) + in3[2] * -0.00394107171053934) + (in3[3] *
    0.0037012624874090969 - in3[4] * 0.1026732889244388)) + (in3[5] *
    0.1018150813770785 + in3[6] * 0.106701735379428)) + in3[7] *
    -0.1058435278320676) + (proc_control_B.t8_c * -0.017111279853879981 -
    proc_control_B.t9_j * 4.4783678626711358)) + (proc_control_B.t10_a *
    -4.4783678626711358 + proc_control_B.t11_dm * 0.017111279853879981)) +
    (proc_control_B.t12_c * -0.99709411168846129 - proc_control_B.t13_d *
    0.99709411168846129)) + (in3[0] * 1.4142135623730951 * -0.002015944239307781
    + in3[1] * 1.4142135623730951 * 0.0020314502869624518)) + (in3[2] *
    1.4142135623730951 * -0.002015944239307781 + in3[3] * 1.4142135623730951 *
    0.0018411915427675441)) + (proc_control_B.t15_a * -0.57921337987918464 -
    proc_control_B.t20_b * 0.0006788547663214811)) + (proc_control_B.t16_n *
    0.0040473945262702333 - proc_control_B.t17_h * 0.00085341255788243134)) +
    (proc_control_B.t18_m * 0.00076717235562463032 - proc_control_B.t21_b *
     0.0023839098537787738)) + (proc_control_B.t19_f * 0.0023839098537787738 -
    proc_control_B.t22_ec * 0.1771949323601108)) + (proc_control_B.t23_n *
    -0.00085341255788243134 + proc_control_B.out1_tmp_js * 1.5506047654670649E-5))
    + (proc_control_B.out1_tmp_lj * -0.00076717235562463032 - proc_control_B.t86
       * 0.57921337987918464)) + (proc_control_B.out1_tmp_c *
    0.00076717235562463032 + proc_control_B.out1_tmp_g * 0.037362401784092843))
                       + (proc_control_B.out1_tmp_c5 * 0.0040473945262702333 +
    proc_control_B.out1_tmp_lya * 1.5506047654670649E-5)) + (proc_control_B.t83 *
    0.0023839098537787738 + proc_control_B.t85 * 0.57921337987918464)) +
                     (proc_control_B.out1_tmp_e * -0.079409880605421979 -
                      proc_control_B.out1_tmp_d * 0.00030422865498463822)) +
                    (proc_control_B.t41_p * -22.68287636040629 -
                     proc_control_B.t49 * 0.093357533416954533)) +
                   (proc_control_B.t48 * -0.0083719771928266514 -
                    proc_control_B.t61_i * 1.5506047654670649E-5)) +
                  (proc_control_B.t33_g * 25.3579617711107 + proc_control_B.t81 *
                   0.00076717235562463032)) + (proc_control_B.t68 *
    0.0023839098537787738 - proc_control_B.t76 * 0.0040473945262702333)) +
                (proc_control_B.t35_f * -0.10436757339843469 +
                 proc_control_B.t58_p * 0.00076717235562463032)) +
               (proc_control_B.out1_tmp_m * 0.00085341255788243134 +
                proc_control_B.t80 * -0.57921337987918464)) +
              (proc_control_B.t73 * -0.03358680572924632 + proc_control_B.t44_c *
               0.0023839098537787738)) + (proc_control_B.t67_a *
    -0.57921337987918464 + 0.49854705584423059);
  out1[11] = ((((((((((((((((((((((((((((((((in2[0] * -0.0035750757133023231 -
    in2[1] * 1.670524623843438E-5) + (in2[2] * 0.0003787019822893839 - in2[3] *
    0.0023839098537787738)) + (in2[4] * 0.51034213219608937 + in2[5] *
    6.3824216042422834E-5)) + in3[0] * -0.0032548305558953859) + in3[1] *
    -0.0032852630357875952) + in3[2] * -0.0032101513252876229) + (in3[3] *
    -0.0032629685510195692 + in3[4] * 0.091396875634783256)) + in3[5] *
    0.092326291955808951) + in3[6] * -0.093184499503169316) + in3[7] *
    -0.090538668087422891) + (proc_control_B.t8_c * 3.945178190568702 +
    proc_control_B.t9_j * 0.018484048789074579)) + (proc_control_B.t10_a *
    0.018484048789074579 - proc_control_B.t11_dm * 3.945178190568702)) +
    (proc_control_B.t12_c * 0.44246069868298349 + proc_control_B.t13_d *
    0.44246069868298349)) + (in3[0] * 1.4142135623730951 * -0.001779185233531944
    - in3[1] * 1.4142135623730951 * 0.0017958904797703791)) + (in3[2] *
    1.4142135623730951 * -0.001779185233531944 - in3[3] * 1.4142135623730951 *
    0.001780062074191858)) + (proc_control_B.t15_a * 0.0023839098537787738 +
    proc_control_B.t20_b * 0.1565168147283757)) + (proc_control_B.t16_n *
    -1.670524623843438E-5 + proc_control_B.t17_h * 0.0003787019822893839)) +
    (proc_control_B.t18_m * -6.3824216042422834E-5 + proc_control_B.t21_b *
     0.51034213219608937)) + (proc_control_B.t19_f * -0.51034213219608937 +
    proc_control_B.t22_ec * 0.000731355680318657)) + (proc_control_B.t23_n *
    0.0003787019822893839 - proc_control_B.out1_tmp_js * 0.0035750757133023231))
    + (proc_control_B.out1_tmp_lj * 6.3824216042422834E-5 + proc_control_B.t86 *
       0.0023839098537787738)) + (proc_control_B.out1_tmp_c *
    -6.3824216042422834E-5 - proc_control_B.out1_tmp_g * 0.01657957278462923)) +
                       (proc_control_B.out1_tmp_c5 * -1.670524623843438E-5 -
                        proc_control_B.out1_tmp_lya * 0.0035750757133023231)) +
                      (proc_control_B.t83 * -0.51034213219608937 -
                       proc_control_B.t85 * 0.0023839098537787738)) +
                     (proc_control_B.out1_tmp_e * 0.00032775693119808252 +
                      proc_control_B.out1_tmp_d * 0.070142985494991567)) +
                    (proc_control_B.t41_p * 0.093357533416954533 +
                     proc_control_B.t49 * 19.9857736168398)) +
                   (proc_control_B.t48 * 0.0037150664462588562 +
                    proc_control_B.t61_i * 0.0035750757133023231)) +
                  (proc_control_B.t33_g * -0.10436757339843469 -
                   proc_control_B.t81 * 6.3824216042422834E-5)) +
                 (proc_control_B.t76 * 1.670524623843438E-5 + proc_control_B.t68
                  * -0.51034213219608937)) + (proc_control_B.t35_f *
    22.3427785475448 - proc_control_B.t58_p * 6.3824216042422834E-5)) +
               (proc_control_B.t80 * 0.0023839098537787738 -
                proc_control_B.out1_tmp_m * 0.0003787019822893839)) +
              (proc_control_B.t73 * 0.0027942241783372721 - proc_control_B.t44_c
               * 0.51034213219608937)) + (proc_control_B.t67_a *
    0.0023839098537787738 - 0.22123034934149169);
  out1[12] = (((((((((((((((((((((((((((((((in2[0] * 0.00047824575783651541 -
    in2[1] * 0.00024406644774676309) + in2[2] * 1.174952529187145E-6) + (in2[3] *
    -0.00076717235562463032 + in2[4] * 6.3824216042422834E-5)) + (in2[5] *
    0.30749183437606531 - in3[0] * 0.1069708680532775)) + in3[1] *
    -0.10741549168572111) + in3[2] * 0.1082843975810609) + (in3[3] *
    -5.2884297987169583E-6 + in3[4] * 0.00014680626144359071)) + (in3[5] *
    -0.00012382954366831189 - in3[6] * 0.00015235250435654841)) + (in3[7] *
    0.00012937578658126929 - proc_control_B.t8_c * 0.52775518194712678)) +
    (proc_control_B.t9_j * 0.27005505118193912 + proc_control_B.t10_a *
    0.27005505118193912)) + (proc_control_B.t11_dm * 0.52775518194712678 +
    proc_control_B.t12_c * 0.0013727689351946031)) + (in3[0] *
    1.4142135623730951 * 0.0003611561027916392 + proc_control_B.t13_d *
    0.0013727689351946031)) + (in3[1] * 1.4142135623730951 *
    0.00011708965504487611 + in3[2] * 1.4142135623730951 * 0.0003611561027916392))
    + (in3[3] * 1.4142135623730951 * 0.076375064580309057 + proc_control_B.t15_a
       * 0.00076717235562463032)) + (proc_control_B.t20_b *
    -0.020937599278082641 - proc_control_B.t16_n * 0.00024406644774676309)) +
    (proc_control_B.t17_h * 1.174952529187145E-6 - proc_control_B.t18_m *
     0.30749183437606531)) + (proc_control_B.t21_b * 6.3824216042422834E-5 -
    proc_control_B.t19_f * 6.3824216042422834E-5)) + (proc_control_B.t22_ec *
    0.01068522908235329 + proc_control_B.t23_n * 1.174952529187145E-6)) +
    (proc_control_B.out1_tmp_js * 0.00047824575783651541 +
     proc_control_B.out1_tmp_lj * 0.30749183437606531)) + (proc_control_B.t86 *
    0.00076717235562463032 - proc_control_B.out1_tmp_c * 0.30749183437606531)) +
                        (proc_control_B.out1_tmp_g * -5.1439421727813221E-5 -
    proc_control_B.out1_tmp_c5 * 0.00024406644774676309)) +
                       (proc_control_B.out1_tmp_lya * 0.00047824575783651541 -
                        proc_control_B.t83 * 6.3824216042422834E-5)) +
                      (proc_control_B.out1_tmp_e * 0.0047885837047914924 +
                       proc_control_B.t85 * -0.00076717235562463032)) +
                     (proc_control_B.out1_tmp_d * -0.00938318176875243 +
                      proc_control_B.t41_p * 0.03004363554824107)) +
                    (proc_control_B.t49 * 0.002499453313029663 +
                     proc_control_B.t48 * 1.152628431132589E-5)) +
                   (proc_control_B.t61_i * -0.00047824575783651541 -
                    proc_control_B.t33_g * 0.03358680572924632)) +
                  (proc_control_B.t81 * -0.30749183437606531 -
                   proc_control_B.t68 * 6.3824216042422834E-5)) +
                 (proc_control_B.t76 * 0.00024406644774676309 +
                  proc_control_B.t35_f * 0.0027942241783372721)) +
                (proc_control_B.t58_p * -0.30749183437606531 +
                 proc_control_B.t80 * 0.00076717235562463032)) +
               (proc_control_B.out1_tmp_m * -1.174952529187145E-6 +
                proc_control_B.t73 * 13.461992508984141)) +
              (proc_control_B.t44_c * -6.3824216042422834E-5 +
               proc_control_B.t67_a * 0.00076717235562463032)) +
    -0.00068638446759730133;
}

void proc_control::proc_control_rand(real_T r[3])
{
  uint32_T b_u[2];
  if (proc_control_DW.method == 4U) {
    uint32_T r_0;
    uint32_T y;
    r_0 = proc_control_DW.state / 127773U;
    y = (proc_control_DW.state - r_0 * 127773U) * 16807U;
    r_0 *= 2836U;
    if (y < r_0) {
      y = ~(r_0 - y) & 2147483647U;
    } else {
      y -= r_0;
    }

    r[0] = static_cast<real_T>(y) * 4.6566128752457969E-10;
    r_0 = y / 127773U;
    y = (y - r_0 * 127773U) * 16807U;
    r_0 *= 2836U;
    if (y < r_0) {
      y = ~(r_0 - y) & 2147483647U;
    } else {
      y -= r_0;
    }

    r[1] = static_cast<real_T>(y) * 4.6566128752457969E-10;
    r_0 = y / 127773U;
    y = (y - r_0 * 127773U) * 16807U;
    r_0 *= 2836U;
    if (y < r_0) {
      y = ~(r_0 - y) & 2147483647U;
    } else {
      y -= r_0;
    }

    r[2] = static_cast<real_T>(y) * 4.6566128752457969E-10;
    proc_control_DW.state = y;
  } else if (proc_control_DW.method == 5U) {
    for (int32_T b_k{0}; b_k < 3; b_k++) {
      uint32_T r_0;
      uint32_T y;
      r_0 = 69069U * proc_control_DW.state_k[0] + 1234567U;
      y = proc_control_DW.state_k[1] << 13 ^ proc_control_DW.state_k[1];
      y ^= y >> 17;
      y ^= y << 5;
      proc_control_DW.state_k[0] = r_0;
      proc_control_DW.state_k[1] = y;
      r[b_k] = static_cast<real_T>(r_0 + y) * 2.328306436538696E-10;
    }
  } else {
    int32_T i;
    uint32_T r_0;
    if (!proc_control_DW.state_not_empty_e) {
      std::memset(&proc_control_DW.state_i[0], 0, 625U * sizeof(uint32_T));
      r_0 = 5489U;
      proc_control_DW.state_i[0] = 5489U;
      for (i = 0; i < 623; i++) {
        r_0 = ((r_0 >> 30U ^ r_0) * 1812433253U + i) + 1U;
        proc_control_DW.state_i[i + 1] = r_0;
      }

      proc_control_DW.state_i[624] = 624U;
      proc_control_DW.state_not_empty_e = true;
    }

    for (int32_T b_k{0}; b_k < 3; b_k++) {
      real_T b_r;
      std::memcpy(&proc_control_B.c_mt[0], &proc_control_DW.state_i[0], 625U *
                  sizeof(uint32_T));

      // ========================= COPYRIGHT NOTICE ============================ 
      //  This is a uniform (0,1) pseudorandom number generator based on:        
      //                                                                         
      //  A C-program for MT19937, with initialization improved 2002/1/26.       
      //  Coded by Takuji Nishimura and Makoto Matsumoto.                        
      //                                                                         
      //  Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,      
      //  All rights reserved.                                                   
      //                                                                         
      //  Redistribution and use in source and binary forms, with or without     
      //  modification, are permitted provided that the following conditions     
      //  are met:                                                               
      //                                                                         
      //    1. Redistributions of source code must retain the above copyright    
      //       notice, this list of conditions and the following disclaimer.     
      //                                                                         
      //    2. Redistributions in binary form must reproduce the above copyright 
      //       notice, this list of conditions and the following disclaimer      
      //       in the documentation and/or other materials provided with the     
      //       distribution.                                                     
      //                                                                         
      //    3. The names of its contributors may not be used to endorse or       
      //       promote products derived from this software without specific      
      //       prior written permission.                                         
      //                                                                         
      //  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS    
      //  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT      
      //  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR  
      //  A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT  
      //  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  
      //  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT       
      //  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,  
      //  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY  
      //  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT    
      //  (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
      //  OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
      //                                                                         
      // =============================   END   ================================= 
      int32_T exitg1;
      do {
        exitg1 = 0;
        for (i = 0; i < 2; i++) {
          uint32_T y;
          r_0 = proc_control_B.c_mt[624] + 1U;
          if (proc_control_B.c_mt[624] + 1U >= 625U) {
            for (int32_T b_kk{0}; b_kk < 227; b_kk++) {
              y = (proc_control_B.c_mt[b_kk + 1] & 2147483647U) |
                (proc_control_B.c_mt[b_kk] & 2147483648U);
              if ((y & 1U) == 0U) {
                y >>= 1U;
              } else {
                y = y >> 1U ^ 2567483615U;
              }

              proc_control_B.c_mt[b_kk] = proc_control_B.c_mt[b_kk + 397] ^ y;
            }

            for (int32_T b_kk{0}; b_kk < 396; b_kk++) {
              y = (proc_control_B.c_mt[b_kk + 227] & 2147483648U) |
                (proc_control_B.c_mt[b_kk + 228] & 2147483647U);
              if ((y & 1U) == 0U) {
                y >>= 1U;
              } else {
                y = y >> 1U ^ 2567483615U;
              }

              proc_control_B.c_mt[b_kk + 227] = proc_control_B.c_mt[b_kk] ^ y;
            }

            y = (proc_control_B.c_mt[623] & 2147483648U) | (proc_control_B.c_mt
              [0] & 2147483647U);
            if ((y & 1U) == 0U) {
              y >>= 1U;
            } else {
              y = y >> 1U ^ 2567483615U;
            }

            proc_control_B.c_mt[623] = proc_control_B.c_mt[396] ^ y;
            r_0 = 1U;
          }

          y = proc_control_B.c_mt[static_cast<int32_T>(r_0) - 1];
          proc_control_B.c_mt[624] = r_0;
          y ^= y >> 11U;
          y ^= y << 7U & 2636928640U;
          y ^= y << 15U & 4022730752U;
          b_u[i] = y >> 18U ^ y;
        }

        b_r = (static_cast<real_T>(b_u[0] >> 5U) * 6.7108864E+7 +
               static_cast<real_T>(b_u[1] >> 6U)) * 1.1102230246251565E-16;
        if (b_r == 0.0) {
          boolean_T b_isvalid;
          if ((proc_control_B.c_mt[624] >= 1U) && (proc_control_B.c_mt[624] <
               625U)) {
            boolean_T exitg2;
            b_isvalid = false;
            i = 0;
            exitg2 = false;
            while ((!exitg2) && (i + 1 < 625)) {
              if (proc_control_B.c_mt[i] == 0U) {
                i++;
              } else {
                b_isvalid = true;
                exitg2 = true;
              }
            }
          } else {
            b_isvalid = false;
          }

          if (!b_isvalid) {
            r_0 = 5489U;
            proc_control_B.c_mt[0] = 5489U;
            for (i = 0; i < 623; i++) {
              r_0 = ((r_0 >> 30U ^ r_0) * 1812433253U + i) + 1U;
              proc_control_B.c_mt[i + 1] = r_0;
            }

            proc_control_B.c_mt[624] = 624U;
          }
        } else {
          exitg1 = 1;
        }
      } while (exitg1 == 0);

      std::memcpy(&proc_control_DW.state_i[0], &proc_control_B.c_mt[0], 625U *
                  sizeof(uint32_T));
      r[b_k] = b_r;
    }
  }
}

void proc_control::proc_control_binary_expand_op(real_T in1[3], const real_T
  in3_data[], const int32_T *in3_size, const real_T in4_data[], const int32_T
  *in4_size)
{
  int32_T loop_ub;

  // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
  //   EnablePort: '<S1>/Enable'

  // MATLAB Function: '<S14>/MATLAB Function'
  loop_ub = *in4_size == 1 ? *in3_size : *in4_size;
  for (int32_T i{0}; i < loop_ub; i++) {
    in1[0] = -in3_data[0] * 2.0 * in4_data[0];
  }

  // End of MATLAB Function: '<S14>/MATLAB Function'
  // End of Outputs for SubSystem: '<Root>/Modèle Physique'
}

// Model step function
void proc_control::step()
{
  static const real_T b_B[7700]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012391951215142167, -0.0012446059948862914, 4.2404022064644467E-7,
    -0.00061228609723886591, -0.00060373405900552592, -0.0098620476003080347,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012695532666046046,
    -0.0012614649644668474, 4.9147034992385141E-7, -0.000661152060853889,
    -0.00059926867687426413, 0.010090525388853994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012696096671776815, 0.0012446526613791634, -1.2048980783339818E-6,
    0.00061687493878965572, -0.000604388916839538, 0.010013122212772408, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00030529986546997984, -0.0003338334845166563,
    -0.0016272457759424609, -0.010095879326581595, 0.00962841988646662,
    -1.9968289075211972E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003085978519427282,
    0.0003311639350801028, 0.0016397717327669317, 0.010016729807333194,
    0.00973321029283748, -0.00012133886391925418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031123210707097854, 0.00034685067214162421, -0.0016669966780750718,
    0.010488718210195844, -0.009815125609793791, 1.9369401290124933E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0003026656103417289, -0.00034418112270507054,
    0.0016544707212506008, -0.010409568690947432, -0.0095465045695103112,
    0.00012193775170434118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012391951215142167, -0.0012446059948862914, 4.2404022064644467E-7,
    -0.00061228609723886591, -0.00060373405900552592, -0.0098620476003080347,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012695532666046046,
    -0.0012614649644668474, 4.9147034992385141E-7, -0.000661152060853889,
    -0.00059926867687426413, 0.010090525388853994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012696096671776815, 0.0012446526613791634, -1.2048980783339818E-6,
    0.00061687493878965572, -0.000604388916839538, 0.010013122212772408, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00030529986546997984, -0.0003338334845166563,
    -0.0016272457759424609, -0.010095879326581595, 0.00962841988646662,
    -1.9968289075211972E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003085978519427282,
    0.0003311639350801028, 0.0016397717327669317, 0.010016729807333194,
    0.00973321029283748, -0.00012133886391925418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031123210707097854, 0.00034685067214162421, -0.0016669966780750718,
    0.010488718210195844, -0.009815125609793791, 1.9369401290124933E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0003026656103417289, -0.00034418112270507054,
    0.0016544707212506008, -0.010409568690947432, -0.0095465045695103112,
    0.00012193775170434118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012391951215142167, -0.0012446059948862914, 4.2404022064644467E-7,
    -0.00061228609723886591, -0.00060373405900552592, -0.0098620476003080347,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012695532666046046,
    -0.0012614649644668474, 4.9147034992385141E-7, -0.000661152060853889,
    -0.00059926867687426413, 0.010090525388853994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012696096671776815, 0.0012446526613791634, -1.2048980783339818E-6,
    0.00061687493878965572, -0.000604388916839538, 0.010013122212772408, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00030529986546997984, -0.0003338334845166563,
    -0.0016272457759424609, -0.010095879326581595, 0.00962841988646662,
    -1.9968289075211972E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003085978519427282,
    0.0003311639350801028, 0.0016397717327669317, 0.010016729807333194,
    0.00973321029283748, -0.00012133886391925418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031123210707097854, 0.00034685067214162421, -0.0016669966780750718,
    0.010488718210195844, -0.009815125609793791, 1.9369401290124933E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0003026656103417289, -0.00034418112270507054,
    0.0016544707212506008, -0.010409568690947432, -0.0095465045695103112,
    0.00012193775170434118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012391951215142167, -0.0012446059948862914, 4.2404022064644467E-7,
    -0.00061228609723886591, -0.00060373405900552592, -0.0098620476003080347,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012695532666046046,
    -0.0012614649644668474, 4.9147034992385141E-7, -0.000661152060853889,
    -0.00059926867687426413, 0.010090525388853994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012696096671776815, 0.0012446526613791634, -1.2048980783339818E-6,
    0.00061687493878965572, -0.000604388916839538, 0.010013122212772408, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00030529986546997984, -0.0003338334845166563,
    -0.0016272457759424609, -0.010095879326581595, 0.00962841988646662,
    -1.9968289075211972E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003085978519427282,
    0.0003311639350801028, 0.0016397717327669317, 0.010016729807333194,
    0.00973321029283748, -0.00012133886391925418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031123210707097854, 0.00034685067214162421, -0.0016669966780750718,
    0.010488718210195844, -0.009815125609793791, 1.9369401290124933E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0003026656103417289, -0.00034418112270507054,
    0.0016544707212506008, -0.010409568690947432, -0.0095465045695103112,
    0.00012193775170434118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012391951215142167, -0.0012446059948862914, 4.2404022064644467E-7,
    -0.00061228609723886591, -0.00060373405900552592, -0.0098620476003080347,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012695532666046046,
    -0.0012614649644668474, 4.9147034992385141E-7, -0.000661152060853889,
    -0.00059926867687426413, 0.010090525388853994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012696096671776815, 0.0012446526613791634, -1.2048980783339818E-6,
    0.00061687493878965572, -0.000604388916839538, 0.010013122212772408, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00030529986546997984, -0.0003338334845166563,
    -0.0016272457759424609, -0.010095879326581595, 0.00962841988646662,
    -1.9968289075211972E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003085978519427282,
    0.0003311639350801028, 0.0016397717327669317, 0.010016729807333194,
    0.00973321029283748, -0.00012133886391925418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031123210707097854, 0.00034685067214162421, -0.0016669966780750718,
    0.010488718210195844, -0.009815125609793791, 1.9369401290124933E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0003026656103417289, -0.00034418112270507054,
    0.0016544707212506008, -0.010409568690947432, -0.0095465045695103112,
    0.00012193775170434118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012391951215142167, -0.0012446059948862914, 4.2404022064644467E-7,
    -0.00061228609723886591, -0.00060373405900552592, -0.0098620476003080347,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012695532666046046,
    -0.0012614649644668474, 4.9147034992385141E-7, -0.000661152060853889,
    -0.00059926867687426413, 0.010090525388853994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012696096671776815, 0.0012446526613791634, -1.2048980783339818E-6,
    0.00061687493878965572, -0.000604388916839538, 0.010013122212772408, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00030529986546997984, -0.0003338334845166563,
    -0.0016272457759424609, -0.010095879326581595, 0.00962841988646662,
    -1.9968289075211972E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003085978519427282,
    0.0003311639350801028, 0.0016397717327669317, 0.010016729807333194,
    0.00973321029283748, -0.00012133886391925418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031123210707097854, 0.00034685067214162421, -0.0016669966780750718,
    0.010488718210195844, -0.009815125609793791, 1.9369401290124933E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0003026656103417289, -0.00034418112270507054,
    0.0016544707212506008, -0.010409568690947432, -0.0095465045695103112,
    0.00012193775170434118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012391951215142167, -0.0012446059948862914, 4.2404022064644467E-7,
    -0.00061228609723886591, -0.00060373405900552592, -0.0098620476003080347,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012695532666046046,
    -0.0012614649644668474, 4.9147034992385141E-7, -0.000661152060853889,
    -0.00059926867687426413, 0.010090525388853994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012696096671776815, 0.0012446526613791634, -1.2048980783339818E-6,
    0.00061687493878965572, -0.000604388916839538, 0.010013122212772408, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00030529986546997984, -0.0003338334845166563,
    -0.0016272457759424609, -0.010095879326581595, 0.00962841988646662,
    -1.9968289075211972E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003085978519427282,
    0.0003311639350801028, 0.0016397717327669317, 0.010016729807333194,
    0.00973321029283748, -0.00012133886391925418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031123210707097854, 0.00034685067214162421, -0.0016669966780750718,
    0.010488718210195844, -0.009815125609793791, 1.9369401290124933E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0003026656103417289, -0.00034418112270507054,
    0.0016544707212506008, -0.010409568690947432, -0.0095465045695103112,
    0.00012193775170434118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012391951215142167, -0.0012446059948862914, 4.2404022064644467E-7,
    -0.00061228609723886591, -0.00060373405900552592, -0.0098620476003080347,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012695532666046046,
    -0.0012614649644668474, 4.9147034992385141E-7, -0.000661152060853889,
    -0.00059926867687426413, 0.010090525388853994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012696096671776815, 0.0012446526613791634, -1.2048980783339818E-6,
    0.00061687493878965572, -0.000604388916839538, 0.010013122212772408, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00030529986546997984, -0.0003338334845166563,
    -0.0016272457759424609, -0.010095879326581595, 0.00962841988646662,
    -1.9968289075211972E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003085978519427282,
    0.0003311639350801028, 0.0016397717327669317, 0.010016729807333194,
    0.00973321029283748, -0.00012133886391925418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031123210707097854, 0.00034685067214162421, -0.0016669966780750718,
    0.010488718210195844, -0.009815125609793791, 1.9369401290124933E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0003026656103417289, -0.00034418112270507054,
    0.0016544707212506008, -0.010409568690947432, -0.0095465045695103112,
    0.00012193775170434118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012391951215142167, -0.0012446059948862914, 4.2404022064644467E-7,
    -0.00061228609723886591, -0.00060373405900552592, -0.0098620476003080347,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012695532666046046,
    -0.0012614649644668474, 4.9147034992385141E-7, -0.000661152060853889,
    -0.00059926867687426413, 0.010090525388853994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012696096671776815, 0.0012446526613791634, -1.2048980783339818E-6,
    0.00061687493878965572, -0.000604388916839538, 0.010013122212772408, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00030529986546997984, -0.0003338334845166563,
    -0.0016272457759424609, -0.010095879326581595, 0.00962841988646662,
    -1.9968289075211972E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003085978519427282,
    0.0003311639350801028, 0.0016397717327669317, 0.010016729807333194,
    0.00973321029283748, -0.00012133886391925418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031123210707097854, 0.00034685067214162421, -0.0016669966780750718,
    0.010488718210195844, -0.009815125609793791, 1.9369401290124933E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0003026656103417289, -0.00034418112270507054,
    0.0016544707212506008, -0.010409568690947432, -0.0095465045695103112,
    0.00012193775170434118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012391951215142167, -0.0012446059948862914, 4.2404022064644467E-7,
    -0.00061228609723886591, -0.00060373405900552592, -0.0098620476003080347,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012695532666046046,
    -0.0012614649644668474, 4.9147034992385141E-7, -0.000661152060853889,
    -0.00059926867687426413, 0.010090525388853994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012696096671776815, 0.0012446526613791634, -1.2048980783339818E-6,
    0.00061687493878965572, -0.000604388916839538, 0.010013122212772408, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00030529986546997984, -0.0003338334845166563,
    -0.0016272457759424609, -0.010095879326581595, 0.00962841988646662,
    -1.9968289075211972E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003085978519427282,
    0.0003311639350801028, 0.0016397717327669317, 0.010016729807333194,
    0.00973321029283748, -0.00012133886391925418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031123210707097854, 0.00034685067214162421, -0.0016669966780750718,
    0.010488718210195844, -0.009815125609793791, 1.9369401290124933E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0003026656103417289, -0.00034418112270507054,
    0.0016544707212506008, -0.010409568690947432, -0.0095465045695103112,
    0.00012193775170434118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012391951215142167, -0.0012446059948862914, 4.2404022064644467E-7,
    -0.00061228609723886591, -0.00060373405900552592, -0.0098620476003080347,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012695532666046046,
    -0.0012614649644668474, 4.9147034992385141E-7, -0.000661152060853889,
    -0.00059926867687426413, 0.010090525388853994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012696096671776815, 0.0012446526613791634, -1.2048980783339818E-6,
    0.00061687493878965572, -0.000604388916839538, 0.010013122212772408, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00030529986546997984, -0.0003338334845166563,
    -0.0016272457759424609, -0.010095879326581595, 0.00962841988646662,
    -1.9968289075211972E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003085978519427282,
    0.0003311639350801028, 0.0016397717327669317, 0.010016729807333194,
    0.00973321029283748, -0.00012133886391925418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031123210707097854, 0.00034685067214162421, -0.0016669966780750718,
    0.010488718210195844, -0.009815125609793791, 1.9369401290124933E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0003026656103417289, -0.00034418112270507054,
    0.0016544707212506008, -0.010409568690947432, -0.0095465045695103112,
    0.00012193775170434118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T e_0[6875]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.1999030381931561E-6, -0.0022034150089554586, 4.499397494389628E-5,
    0.0, 0.984526457444013, 6.1154352612401684E-5, 0.000658220631124813,
    2.406633112066715E-5, -0.04355854014359279, 0.00086324063755082434,
    -0.597925752444161, 0.002307649090444321, 0.025572756739094347, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021919103508552663,
    -1.1769104021443485E-6, -2.04388745128573E-5, 0.0, 5.8048391584439872E-5,
    0.9860314653427954, 0.0012762735695932266, 0.043398201774400937,
    -2.36184272990922E-5, -0.00039697725363734275, 0.0021911099166535882,
    -0.54647899618870288, 0.049647585035319089, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.09824058933936268, 2.515038870602036E-8, 2.478286826955546E-7, 0.0,
    -6.8769055098177272E-7, 0.00016941253621162433, -2.2424978015547662E-5,
    0.96502160066429243, 4.9401416636231716E-7, 4.7838722676953627E-6,
    -2.5790943202432863E-5, 0.0065875197780085951, -0.00086768568007417686, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.5164435105919461E-8,
    0.09824505158925019, 5.4423982654983043E-7, 0.0, -0.00018717266530852815,
    7.4031064802782007E-7, 1.142615450609401E-5, 4.9457201721440852E-7,
    0.96511061759937666, 1.0375873249332257E-5, -0.007187778861063086,
    2.7754140534262974E-5, 0.00044171651039709426, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8197760778704109E-7, 6.1908905483331962E-7,
    0.098066021672124887, 0.0, 4.598271195783E-5, -2.0898544599696179E-5,
    -5.9658590980901608E-8, 5.2978632346833573E-6, 1.1479599830850796E-5,
    0.96157151239694438, 0.0017645806891454807, -0.00081186577064666621,
    -2.2084979199813477E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -2.0451190958447188E-7, -9.7769028595142508E-5,
    1.3903187326404862E-5, 0.0, 0.045219535709451038, 1.8868952312019515E-5,
    1.6305396659915506E-5, -3.5131312199902236E-6, -0.0022383811075379761,
    0.0002745798143991763, 0.80992029310182234, 0.00073365065879608374,
    0.000832315230131649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 7.5262978685328809E-5, 1.4977003294311728E-7, -4.5252614965129612E-6,
    0.0, 1.3470948382708935E-5, 0.046909332489192504, 2.0587308747099204E-5,
    0.0018258400396038929, 2.5176585929125812E-6, -9.1406194452072E-5,
    0.00052891954512188164, 0.87431543133687928, 0.0012132471811926605, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.1231564155131734E-5,
    5.7205276185411775E-6, -2.5788680042587712E-8, 0.0, 8.5189138462148147E-6,
    -7.378467994987278E-7, 0.046345993253848423, -0.00021767242759973264,
    0.00011072138604332631, -4.8161920877121215E-7, 0.00032025413802335372,
    -2.83340935371592E-5, 0.85749010226935762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468,
    1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.1999030381931561E-6,
    -0.0022034150089554586, 4.499397494389628E-5, 0.0, 0.984526457444013,
    6.1154352612401684E-5, 0.000658220631124813, 2.406633112066715E-5,
    -0.04355854014359279, 0.00086324063755082434, -0.597925752444161,
    0.002307649090444321, 0.025572756739094347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021919103508552663, -1.1769104021443485E-6,
    -2.04388745128573E-5, 0.0, 5.8048391584439872E-5, 0.9860314653427954,
    0.0012762735695932266, 0.043398201774400937, -2.36184272990922E-5,
    -0.00039697725363734275, 0.0021911099166535882, -0.54647899618870288,
    0.049647585035319089, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09824058933936268,
    2.515038870602036E-8, 2.478286826955546E-7, 0.0, -6.8769055098177272E-7,
    0.00016941253621162433, -2.2424978015547662E-5, 0.96502160066429243,
    4.9401416636231716E-7, 4.7838722676953627E-6, -2.5790943202432863E-5,
    0.0065875197780085951, -0.00086768568007417686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.5164435105919461E-8, 0.09824505158925019,
    5.4423982654983043E-7, 0.0, -0.00018717266530852815, 7.4031064802782007E-7,
    1.142615450609401E-5, 4.9457201721440852E-7, 0.96511061759937666,
    1.0375873249332257E-5, -0.007187778861063086, 2.7754140534262974E-5,
    0.00044171651039709426, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.8197760778704109E-7, 6.1908905483331962E-7, 0.098066021672124887,
    0.0, 4.598271195783E-5, -2.0898544599696179E-5, -5.9658590980901608E-8,
    5.2978632346833573E-6, 1.1479599830850796E-5, 0.96157151239694438,
    0.0017645806891454807, -0.00081186577064666621, -2.2084979199813477E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.0451190958447188E-7, -9.7769028595142508E-5, 1.3903187326404862E-5, 0.0,
    0.045219535709451038, 1.8868952312019515E-5, 1.6305396659915506E-5,
    -3.5131312199902236E-6, -0.0022383811075379761, 0.0002745798143991763,
    0.80992029310182234, 0.00073365065879608374, 0.000832315230131649, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.5262978685328809E-5,
    1.4977003294311728E-7, -4.5252614965129612E-6, 0.0, 1.3470948382708935E-5,
    0.046909332489192504, 2.0587308747099204E-5, 0.0018258400396038929,
    2.5176585929125812E-6, -9.1406194452072E-5, 0.00052891954512188164,
    0.87431543133687928, 0.0012132471811926605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.1231564155131734E-5, 5.7205276185411775E-6,
    -2.5788680042587712E-8, 0.0, 8.5189138462148147E-6, -7.378467994987278E-7,
    0.046345993253848423, -0.00021767242759973264, 0.00011072138604332631,
    -4.8161920877121215E-7, 0.00032025413802335372, -2.83340935371592E-5,
    0.85749010226935762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468,
    1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0080982794176108468, 1.0524320995148992, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.1999030381931561E-6, -0.0022034150089554586,
    4.499397494389628E-5, 0.0, 0.984526457444013, 6.1154352612401684E-5,
    0.000658220631124813, 2.406633112066715E-5, -0.04355854014359279,
    0.00086324063755082434, -0.597925752444161, 0.002307649090444321,
    0.025572756739094347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0021919103508552663, -1.1769104021443485E-6, -2.04388745128573E-5,
    0.0, 5.8048391584439872E-5, 0.9860314653427954, 0.0012762735695932266,
    0.043398201774400937, -2.36184272990922E-5, -0.00039697725363734275,
    0.0021911099166535882, -0.54647899618870288, 0.049647585035319089, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.09824058933936268, 2.515038870602036E-8,
    2.478286826955546E-7, 0.0, -6.8769055098177272E-7, 0.00016941253621162433,
    -2.2424978015547662E-5, 0.96502160066429243, 4.9401416636231716E-7,
    4.7838722676953627E-6, -2.5790943202432863E-5, 0.0065875197780085951,
    -0.00086768568007417686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.5164435105919461E-8, 0.09824505158925019, 5.4423982654983043E-7,
    0.0, -0.00018717266530852815, 7.4031064802782007E-7, 1.142615450609401E-5,
    4.9457201721440852E-7, 0.96511061759937666, 1.0375873249332257E-5,
    -0.007187778861063086, 2.7754140534262974E-5, 0.00044171651039709426, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8197760778704109E-7,
    6.1908905483331962E-7, 0.098066021672124887, 0.0, 4.598271195783E-5,
    -2.0898544599696179E-5, -5.9658590980901608E-8, 5.2978632346833573E-6,
    1.1479599830850796E-5, 0.96157151239694438, 0.0017645806891454807,
    -0.00081186577064666621, -2.2084979199813477E-6, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0451190958447188E-7,
    -9.7769028595142508E-5, 1.3903187326404862E-5, 0.0, 0.045219535709451038,
    1.8868952312019515E-5, 1.6305396659915506E-5, -3.5131312199902236E-6,
    -0.0022383811075379761, 0.0002745798143991763, 0.80992029310182234,
    0.00073365065879608374, 0.000832315230131649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.5262978685328809E-5, 1.4977003294311728E-7,
    -4.5252614965129612E-6, 0.0, 1.3470948382708935E-5, 0.046909332489192504,
    2.0587308747099204E-5, 0.0018258400396038929, 2.5176585929125812E-6,
    -9.1406194452072E-5, 0.00052891954512188164, 0.87431543133687928,
    0.0012132471811926605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.1231564155131734E-5, 5.7205276185411775E-6, -2.5788680042587712E-8,
    0.0, 8.5189138462148147E-6, -7.378467994987278E-7, 0.046345993253848423,
    -0.00021767242759973264, 0.00011072138604332631, -4.8161920877121215E-7,
    0.00032025413802335372, -2.83340935371592E-5, 0.85749010226935762, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468,
    1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.1999030381931561E-6, -0.0022034150089554586,
    4.499397494389628E-5, 0.0, 0.984526457444013, 6.1154352612401684E-5,
    0.000658220631124813, 2.406633112066715E-5, -0.04355854014359279,
    0.00086324063755082434, -0.597925752444161, 0.002307649090444321,
    0.025572756739094347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0021919103508552663, -1.1769104021443485E-6, -2.04388745128573E-5,
    0.0, 5.8048391584439872E-5, 0.9860314653427954, 0.0012762735695932266,
    0.043398201774400937, -2.36184272990922E-5, -0.00039697725363734275,
    0.0021911099166535882, -0.54647899618870288, 0.049647585035319089, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.09824058933936268, 2.515038870602036E-8,
    2.478286826955546E-7, 0.0, -6.8769055098177272E-7, 0.00016941253621162433,
    -2.2424978015547662E-5, 0.96502160066429243, 4.9401416636231716E-7,
    4.7838722676953627E-6, -2.5790943202432863E-5, 0.0065875197780085951,
    -0.00086768568007417686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.5164435105919461E-8, 0.09824505158925019, 5.4423982654983043E-7,
    0.0, -0.00018717266530852815, 7.4031064802782007E-7, 1.142615450609401E-5,
    4.9457201721440852E-7, 0.96511061759937666, 1.0375873249332257E-5,
    -0.007187778861063086, 2.7754140534262974E-5, 0.00044171651039709426, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8197760778704109E-7,
    6.1908905483331962E-7, 0.098066021672124887, 0.0, 4.598271195783E-5,
    -2.0898544599696179E-5, -5.9658590980901608E-8, 5.2978632346833573E-6,
    1.1479599830850796E-5, 0.96157151239694438, 0.0017645806891454807,
    -0.00081186577064666621, -2.2084979199813477E-6, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0451190958447188E-7,
    -9.7769028595142508E-5, 1.3903187326404862E-5, 0.0, 0.045219535709451038,
    1.8868952312019515E-5, 1.6305396659915506E-5, -3.5131312199902236E-6,
    -0.0022383811075379761, 0.0002745798143991763, 0.80992029310182234,
    0.00073365065879608374, 0.000832315230131649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.5262978685328809E-5, 1.4977003294311728E-7,
    -4.5252614965129612E-6, 0.0, 1.3470948382708935E-5, 0.046909332489192504,
    2.0587308747099204E-5, 0.0018258400396038929, 2.5176585929125812E-6,
    -9.1406194452072E-5, 0.00052891954512188164, 0.87431543133687928,
    0.0012132471811926605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.1231564155131734E-5, 5.7205276185411775E-6, -2.5788680042587712E-8,
    0.0, 8.5189138462148147E-6, -7.378467994987278E-7, 0.046345993253848423,
    -0.00021767242759973264, 0.00011072138604332631, -4.8161920877121215E-7,
    0.00032025413802335372, -2.83340935371592E-5, 0.85749010226935762, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468,
    1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.1999030381931561E-6, -0.0022034150089554586,
    4.499397494389628E-5, 0.0, 0.984526457444013, 6.1154352612401684E-5,
    0.000658220631124813, 2.406633112066715E-5, -0.04355854014359279,
    0.00086324063755082434, -0.597925752444161, 0.002307649090444321,
    0.025572756739094347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0021919103508552663, -1.1769104021443485E-6, -2.04388745128573E-5,
    0.0, 5.8048391584439872E-5, 0.9860314653427954, 0.0012762735695932266,
    0.043398201774400937, -2.36184272990922E-5, -0.00039697725363734275,
    0.0021911099166535882, -0.54647899618870288, 0.049647585035319089, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.09824058933936268, 2.515038870602036E-8,
    2.478286826955546E-7, 0.0, -6.8769055098177272E-7, 0.00016941253621162433,
    -2.2424978015547662E-5, 0.96502160066429243, 4.9401416636231716E-7,
    4.7838722676953627E-6, -2.5790943202432863E-5, 0.0065875197780085951,
    -0.00086768568007417686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.5164435105919461E-8, 0.09824505158925019, 5.4423982654983043E-7,
    0.0, -0.00018717266530852815, 7.4031064802782007E-7, 1.142615450609401E-5,
    4.9457201721440852E-7, 0.96511061759937666, 1.0375873249332257E-5,
    -0.007187778861063086, 2.7754140534262974E-5, 0.00044171651039709426, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8197760778704109E-7,
    6.1908905483331962E-7, 0.098066021672124887, 0.0, 4.598271195783E-5,
    -2.0898544599696179E-5, -5.9658590980901608E-8, 5.2978632346833573E-6,
    1.1479599830850796E-5, 0.96157151239694438, 0.0017645806891454807,
    -0.00081186577064666621, -2.2084979199813477E-6, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0451190958447188E-7,
    -9.7769028595142508E-5, 1.3903187326404862E-5, 0.0, 0.045219535709451038,
    1.8868952312019515E-5, 1.6305396659915506E-5, -3.5131312199902236E-6,
    -0.0022383811075379761, 0.0002745798143991763, 0.80992029310182234,
    0.00073365065879608374, 0.000832315230131649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.5262978685328809E-5, 1.4977003294311728E-7,
    -4.5252614965129612E-6, 0.0, 1.3470948382708935E-5, 0.046909332489192504,
    2.0587308747099204E-5, 0.0018258400396038929, 2.5176585929125812E-6,
    -9.1406194452072E-5, 0.00052891954512188164, 0.87431543133687928,
    0.0012132471811926605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.1231564155131734E-5, 5.7205276185411775E-6, -2.5788680042587712E-8,
    0.0, 8.5189138462148147E-6, -7.378467994987278E-7, 0.046345993253848423,
    -0.00021767242759973264, 0.00011072138604332631, -4.8161920877121215E-7,
    0.00032025413802335372, -2.83340935371592E-5, 0.85749010226935762, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468,
    1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.1999030381931561E-6, -0.0022034150089554586,
    4.499397494389628E-5, 0.0, 0.984526457444013, 6.1154352612401684E-5,
    0.000658220631124813, 2.406633112066715E-5, -0.04355854014359279,
    0.00086324063755082434, -0.597925752444161, 0.002307649090444321,
    0.025572756739094347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0021919103508552663, -1.1769104021443485E-6, -2.04388745128573E-5,
    0.0, 5.8048391584439872E-5, 0.9860314653427954, 0.0012762735695932266,
    0.043398201774400937, -2.36184272990922E-5, -0.00039697725363734275,
    0.0021911099166535882, -0.54647899618870288, 0.049647585035319089, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.09824058933936268, 2.515038870602036E-8,
    2.478286826955546E-7, 0.0, -6.8769055098177272E-7, 0.00016941253621162433,
    -2.2424978015547662E-5, 0.96502160066429243, 4.9401416636231716E-7,
    4.7838722676953627E-6, -2.5790943202432863E-5, 0.0065875197780085951,
    -0.00086768568007417686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.5164435105919461E-8, 0.09824505158925019, 5.4423982654983043E-7,
    0.0, -0.00018717266530852815, 7.4031064802782007E-7, 1.142615450609401E-5,
    4.9457201721440852E-7, 0.96511061759937666, 1.0375873249332257E-5,
    -0.007187778861063086, 2.7754140534262974E-5, 0.00044171651039709426, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8197760778704109E-7,
    6.1908905483331962E-7, 0.098066021672124887, 0.0, 4.598271195783E-5,
    -2.0898544599696179E-5, -5.9658590980901608E-8, 5.2978632346833573E-6,
    1.1479599830850796E-5, 0.96157151239694438, 0.0017645806891454807,
    -0.00081186577064666621, -2.2084979199813477E-6, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0451190958447188E-7,
    -9.7769028595142508E-5, 1.3903187326404862E-5, 0.0, 0.045219535709451038,
    1.8868952312019515E-5, 1.6305396659915506E-5, -3.5131312199902236E-6,
    -0.0022383811075379761, 0.0002745798143991763, 0.80992029310182234,
    0.00073365065879608374, 0.000832315230131649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.5262978685328809E-5, 1.4977003294311728E-7,
    -4.5252614965129612E-6, 0.0, 1.3470948382708935E-5, 0.046909332489192504,
    2.0587308747099204E-5, 0.0018258400396038929, 2.5176585929125812E-6,
    -9.1406194452072E-5, 0.00052891954512188164, 0.87431543133687928,
    0.0012132471811926605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.1231564155131734E-5, 5.7205276185411775E-6, -2.5788680042587712E-8,
    0.0, 8.5189138462148147E-6, -7.378467994987278E-7, 0.046345993253848423,
    -0.00021767242759973264, 0.00011072138604332631, -4.8161920877121215E-7,
    0.00032025413802335372, -2.83340935371592E-5, 0.85749010226935762, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468,
    1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.1999030381931561E-6, -0.0022034150089554586,
    4.499397494389628E-5, 0.0, 0.984526457444013, 6.1154352612401684E-5,
    0.000658220631124813, 2.406633112066715E-5, -0.04355854014359279,
    0.00086324063755082434, -0.597925752444161, 0.002307649090444321,
    0.025572756739094347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0021919103508552663, -1.1769104021443485E-6, -2.04388745128573E-5,
    0.0, 5.8048391584439872E-5, 0.9860314653427954, 0.0012762735695932266,
    0.043398201774400937, -2.36184272990922E-5, -0.00039697725363734275,
    0.0021911099166535882, -0.54647899618870288, 0.049647585035319089, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.09824058933936268, 2.515038870602036E-8,
    2.478286826955546E-7, 0.0, -6.8769055098177272E-7, 0.00016941253621162433,
    -2.2424978015547662E-5, 0.96502160066429243, 4.9401416636231716E-7,
    4.7838722676953627E-6, -2.5790943202432863E-5, 0.0065875197780085951,
    -0.00086768568007417686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.5164435105919461E-8, 0.09824505158925019, 5.4423982654983043E-7,
    0.0, -0.00018717266530852815, 7.4031064802782007E-7, 1.142615450609401E-5,
    4.9457201721440852E-7, 0.96511061759937666, 1.0375873249332257E-5,
    -0.007187778861063086, 2.7754140534262974E-5, 0.00044171651039709426, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8197760778704109E-7,
    6.1908905483331962E-7, 0.098066021672124887, 0.0, 4.598271195783E-5,
    -2.0898544599696179E-5, -5.9658590980901608E-8, 5.2978632346833573E-6,
    1.1479599830850796E-5, 0.96157151239694438, 0.0017645806891454807,
    -0.00081186577064666621, -2.2084979199813477E-6, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0451190958447188E-7,
    -9.7769028595142508E-5, 1.3903187326404862E-5, 0.0, 0.045219535709451038,
    1.8868952312019515E-5, 1.6305396659915506E-5, -3.5131312199902236E-6,
    -0.0022383811075379761, 0.0002745798143991763, 0.80992029310182234,
    0.00073365065879608374, 0.000832315230131649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.5262978685328809E-5, 1.4977003294311728E-7,
    -4.5252614965129612E-6, 0.0, 1.3470948382708935E-5, 0.046909332489192504,
    2.0587308747099204E-5, 0.0018258400396038929, 2.5176585929125812E-6,
    -9.1406194452072E-5, 0.00052891954512188164, 0.87431543133687928,
    0.0012132471811926605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.1231564155131734E-5, 5.7205276185411775E-6, -2.5788680042587712E-8,
    0.0, 8.5189138462148147E-6, -7.378467994987278E-7, 0.046345993253848423,
    -0.00021767242759973264, 0.00011072138604332631, -4.8161920877121215E-7,
    0.00032025413802335372, -2.83340935371592E-5, 0.85749010226935762, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468,
    1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.1999030381931561E-6, -0.0022034150089554586,
    4.499397494389628E-5, 0.0, 0.984526457444013, 6.1154352612401684E-5,
    0.000658220631124813, 2.406633112066715E-5, -0.04355854014359279,
    0.00086324063755082434, -0.597925752444161, 0.002307649090444321,
    0.025572756739094347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0021919103508552663, -1.1769104021443485E-6, -2.04388745128573E-5,
    0.0, 5.8048391584439872E-5, 0.9860314653427954, 0.0012762735695932266,
    0.043398201774400937, -2.36184272990922E-5, -0.00039697725363734275,
    0.0021911099166535882, -0.54647899618870288, 0.049647585035319089, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.09824058933936268, 2.515038870602036E-8,
    2.478286826955546E-7, 0.0, -6.8769055098177272E-7, 0.00016941253621162433,
    -2.2424978015547662E-5, 0.96502160066429243, 4.9401416636231716E-7,
    4.7838722676953627E-6, -2.5790943202432863E-5, 0.0065875197780085951,
    -0.00086768568007417686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.5164435105919461E-8, 0.09824505158925019, 5.4423982654983043E-7,
    0.0, -0.00018717266530852815, 7.4031064802782007E-7, 1.142615450609401E-5,
    4.9457201721440852E-7, 0.96511061759937666, 1.0375873249332257E-5,
    -0.007187778861063086, 2.7754140534262974E-5, 0.00044171651039709426, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8197760778704109E-7,
    6.1908905483331962E-7, 0.098066021672124887, 0.0, 4.598271195783E-5,
    -2.0898544599696179E-5, -5.9658590980901608E-8, 5.2978632346833573E-6,
    1.1479599830850796E-5, 0.96157151239694438, 0.0017645806891454807,
    -0.00081186577064666621, -2.2084979199813477E-6, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0451190958447188E-7,
    -9.7769028595142508E-5, 1.3903187326404862E-5, 0.0, 0.045219535709451038,
    1.8868952312019515E-5, 1.6305396659915506E-5, -3.5131312199902236E-6,
    -0.0022383811075379761, 0.0002745798143991763, 0.80992029310182234,
    0.00073365065879608374, 0.000832315230131649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.5262978685328809E-5, 1.4977003294311728E-7,
    -4.5252614965129612E-6, 0.0, 1.3470948382708935E-5, 0.046909332489192504,
    2.0587308747099204E-5, 0.0018258400396038929, 2.5176585929125812E-6,
    -9.1406194452072E-5, 0.00052891954512188164, 0.87431543133687928,
    0.0012132471811926605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.1231564155131734E-5, 5.7205276185411775E-6, -2.5788680042587712E-8,
    0.0, 8.5189138462148147E-6, -7.378467994987278E-7, 0.046345993253848423,
    -0.00021767242759973264, 0.00011072138604332631, -4.8161920877121215E-7,
    0.00032025413802335372, -2.83340935371592E-5, 0.85749010226935762, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468,
    1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.1999030381931561E-6, -0.0022034150089554586,
    4.499397494389628E-5, 0.0, 0.984526457444013, 6.1154352612401684E-5,
    0.000658220631124813, 2.406633112066715E-5, -0.04355854014359279,
    0.00086324063755082434, -0.597925752444161, 0.002307649090444321,
    0.025572756739094347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0021919103508552663, -1.1769104021443485E-6, -2.04388745128573E-5,
    0.0, 5.8048391584439872E-5, 0.9860314653427954, 0.0012762735695932266,
    0.043398201774400937, -2.36184272990922E-5, -0.00039697725363734275,
    0.0021911099166535882, -0.54647899618870288, 0.049647585035319089, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.09824058933936268, 2.515038870602036E-8,
    2.478286826955546E-7, 0.0, -6.8769055098177272E-7, 0.00016941253621162433,
    -2.2424978015547662E-5, 0.96502160066429243, 4.9401416636231716E-7,
    4.7838722676953627E-6, -2.5790943202432863E-5, 0.0065875197780085951,
    -0.00086768568007417686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.5164435105919461E-8, 0.09824505158925019, 5.4423982654983043E-7,
    0.0, -0.00018717266530852815, 7.4031064802782007E-7, 1.142615450609401E-5,
    4.9457201721440852E-7, 0.96511061759937666, 1.0375873249332257E-5,
    -0.007187778861063086, 2.7754140534262974E-5, 0.00044171651039709426, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8197760778704109E-7,
    6.1908905483331962E-7, 0.098066021672124887, 0.0, 4.598271195783E-5,
    -2.0898544599696179E-5, -5.9658590980901608E-8, 5.2978632346833573E-6,
    1.1479599830850796E-5, 0.96157151239694438, 0.0017645806891454807,
    -0.00081186577064666621, -2.2084979199813477E-6, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0451190958447188E-7,
    -9.7769028595142508E-5, 1.3903187326404862E-5, 0.0, 0.045219535709451038,
    1.8868952312019515E-5, 1.6305396659915506E-5, -3.5131312199902236E-6,
    -0.0022383811075379761, 0.0002745798143991763, 0.80992029310182234,
    0.00073365065879608374, 0.000832315230131649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.5262978685328809E-5, 1.4977003294311728E-7,
    -4.5252614965129612E-6, 0.0, 1.3470948382708935E-5, 0.046909332489192504,
    2.0587308747099204E-5, 0.0018258400396038929, 2.5176585929125812E-6,
    -9.1406194452072E-5, 0.00052891954512188164, 0.87431543133687928,
    0.0012132471811926605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.1231564155131734E-5, 5.7205276185411775E-6, -2.5788680042587712E-8,
    0.0, 8.5189138462148147E-6, -7.378467994987278E-7, 0.046345993253848423,
    -0.00021767242759973264, 0.00011072138604332631, -4.8161920877121215E-7,
    0.00032025413802335372, -2.83340935371592E-5, 0.85749010226935762, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468,
    1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.1999030381931561E-6, -0.0022034150089554586,
    4.499397494389628E-5, 0.0, 0.984526457444013, 6.1154352612401684E-5,
    0.000658220631124813, 2.406633112066715E-5, -0.04355854014359279,
    0.00086324063755082434, -0.597925752444161, 0.002307649090444321,
    0.025572756739094347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0021919103508552663, -1.1769104021443485E-6, -2.04388745128573E-5,
    0.0, 5.8048391584439872E-5, 0.9860314653427954, 0.0012762735695932266,
    0.043398201774400937, -2.36184272990922E-5, -0.00039697725363734275,
    0.0021911099166535882, -0.54647899618870288, 0.049647585035319089, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.09824058933936268, 2.515038870602036E-8,
    2.478286826955546E-7, 0.0, -6.8769055098177272E-7, 0.00016941253621162433,
    -2.2424978015547662E-5, 0.96502160066429243, 4.9401416636231716E-7,
    4.7838722676953627E-6, -2.5790943202432863E-5, 0.0065875197780085951,
    -0.00086768568007417686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.5164435105919461E-8, 0.09824505158925019, 5.4423982654983043E-7,
    0.0, -0.00018717266530852815, 7.4031064802782007E-7, 1.142615450609401E-5,
    4.9457201721440852E-7, 0.96511061759937666, 1.0375873249332257E-5,
    -0.007187778861063086, 2.7754140534262974E-5, 0.00044171651039709426, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8197760778704109E-7,
    6.1908905483331962E-7, 0.098066021672124887, 0.0, 4.598271195783E-5,
    -2.0898544599696179E-5, -5.9658590980901608E-8, 5.2978632346833573E-6,
    1.1479599830850796E-5, 0.96157151239694438, 0.0017645806891454807,
    -0.00081186577064666621, -2.2084979199813477E-6, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0451190958447188E-7,
    -9.7769028595142508E-5, 1.3903187326404862E-5, 0.0, 0.045219535709451038,
    1.8868952312019515E-5, 1.6305396659915506E-5, -3.5131312199902236E-6,
    -0.0022383811075379761, 0.0002745798143991763, 0.80992029310182234,
    0.00073365065879608374, 0.000832315230131649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.5262978685328809E-5, 1.4977003294311728E-7,
    -4.5252614965129612E-6, 0.0, 1.3470948382708935E-5, 0.046909332489192504,
    2.0587308747099204E-5, 0.0018258400396038929, 2.5176585929125812E-6,
    -9.1406194452072E-5, 0.00052891954512188164, 0.87431543133687928,
    0.0012132471811926605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.1231564155131734E-5, 5.7205276185411775E-6, -2.5788680042587712E-8,
    0.0, 8.5189138462148147E-6, -7.378467994987278E-7, 0.046345993253848423,
    -0.00021767242759973264, 0.00011072138604332631, -4.8161920877121215E-7,
    0.00032025413802335372, -2.83340935371592E-5, 0.85749010226935762, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468,
    1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.1999030381931561E-6, -0.0022034150089554586,
    4.499397494389628E-5, 0.0, 0.984526457444013, 6.1154352612401684E-5,
    0.000658220631124813, 2.406633112066715E-5, -0.04355854014359279,
    0.00086324063755082434, -0.597925752444161, 0.002307649090444321,
    0.025572756739094347, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0021919103508552663, -1.1769104021443485E-6, -2.04388745128573E-5,
    0.0, 5.8048391584439872E-5, 0.9860314653427954, 0.0012762735695932266,
    0.043398201774400937, -2.36184272990922E-5, -0.00039697725363734275,
    0.0021911099166535882, -0.54647899618870288, 0.049647585035319089, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.09824058933936268, 2.515038870602036E-8,
    2.478286826955546E-7, 0.0, -6.8769055098177272E-7, 0.00016941253621162433,
    -2.2424978015547662E-5, 0.96502160066429243, 4.9401416636231716E-7,
    4.7838722676953627E-6, -2.5790943202432863E-5, 0.0065875197780085951,
    -0.00086768568007417686, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 2.5164435105919461E-8, 0.09824505158925019, 5.4423982654983043E-7,
    0.0, -0.00018717266530852815, 7.4031064802782007E-7, 1.142615450609401E-5,
    4.9457201721440852E-7, 0.96511061759937666, 1.0375873249332257E-5,
    -0.007187778861063086, 2.7754140534262974E-5, 0.00044171651039709426, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8197760778704109E-7,
    6.1908905483331962E-7, 0.098066021672124887, 0.0, 4.598271195783E-5,
    -2.0898544599696179E-5, -5.9658590980901608E-8, 5.2978632346833573E-6,
    1.1479599830850796E-5, 0.96157151239694438, 0.0017645806891454807,
    -0.00081186577064666621, -2.2084979199813477E-6, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.0451190958447188E-7,
    -9.7769028595142508E-5, 1.3903187326404862E-5, 0.0, 0.045219535709451038,
    1.8868952312019515E-5, 1.6305396659915506E-5, -3.5131312199902236E-6,
    -0.0022383811075379761, 0.0002745798143991763, 0.80992029310182234,
    0.00073365065879608374, 0.000832315230131649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.5262978685328809E-5, 1.4977003294311728E-7,
    -4.5252614965129612E-6, 0.0, 1.3470948382708935E-5, 0.046909332489192504,
    2.0587308747099204E-5, 0.0018258400396038929, 2.5176585929125812E-6,
    -9.1406194452072E-5, 0.00052891954512188164, 0.87431543133687928,
    0.0012132471811926605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -1.1231564155131734E-5, 5.7205276185411775E-6, -2.5788680042587712E-8,
    0.0, 8.5189138462148147E-6, -7.378467994987278E-7, 0.046345993253848423,
    -0.00021767242759973264, 0.00011072138604332631, -4.8161920877121215E-7,
    0.00032025413802335372, -2.83340935371592E-5, 0.85749010226935762, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468,
    1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992 };

  static const real_T g[6300]{ -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -4.499397494389628E-5, -0.0, -0.984526457444013,
    -6.1154352612401684E-5, -0.000658220631124813, -2.406633112066715E-5,
    0.04355854014359279, -0.00086324063755082434, 0.597925752444161,
    -0.002307649090444321, -0.025572756739094347, -0.00016559718257117828, -0.0,
    -0.942262865626905, -0.00021741116103373754, -0.0024813289122200834,
    -5.0302994226935014E-5, 0.083582113352612661, -0.0015150731406907625,
    1.0726217674121876, -0.0038149907936857533, -0.046594351280535795,
    -0.00034158928309933054, -0.0, -0.87919543762715469, -0.00043059774675293505,
    -0.0052429175129900573, -8.1213747248903891E-5, 0.119303462718144,
    -0.0019744060237521922, 1.4315205110323159, -0.0045996384443268458,
    -0.0631361505317583, -0.00055477107341229091, -0.0, -0.80088152262878065,
    -0.000666941821854774, -0.00872366732158188, -0.00011785497704701748,
    0.15022620524476457, -0.0022625639105951856, 1.6842265007145802,
    -0.0047586928058357516, -0.075404784404271522, -0.00078915160119051185, -0.0,
    -0.71235807529709283, -0.00089785635703528517, -0.012717301594200847,
    -0.00016008062142995925, 0.17609182371461785, -0.0024022216622435993,
    1.8418449989629129, -0.0044012820396199916, -0.083710218146255344,
    -0.0010310360047129377, -0.0, -0.61808189105726663, -0.0011003707222003961,
    -0.017035012303687522, -0.00020680136448762576, 0.19684532946818933,
    -0.0024164855079133129, 1.9163838319466104, -0.0036418959541772967,
    -0.088436637017764608, -0.0012690289112655625, -0.0, -0.52189780884912929,
    -0.0012572508609401307, -0.021508508324269329, -0.00025624411572832323,
    0.2126008621445204, -0.0023281229536737513, 1.9202334356980968,
    -0.002594627598588257, -0.090016477977055684, -0.0014939681571448067, -0.0,
    -0.42703091120130454, -0.0013568556344599172, -0.025991848059587219,
    -0.00030620018808847547, 0.22360827133972172, -0.0021589384540275274,
    1.8657269823111606, -0.0013683850386595809, -0.088907795682609536,
    -0.0016988030903916265, -0.0, -0.33609872933739232, -0.0013927784792825098,
    -0.030362225208243426, -0.0003542530250943828, 0.2302215115843807,
    -0.0019292879762751361, 1.7647797048536831, -6.30918687138943E-5,
    -0.085575022317945448, -0.0018784308747447488, -0.0, -0.25113956281194327,
    -0.0013633234772859415, -0.034519876559404847, -0.0003979787015713615,
    0.23286948110245795, -0.0016577226173151605, 1.6286043140314448,
    0.0012331428218377884, -0.080473073008801049, 4.499397494389628E-5, 0.0,
    0.984526457444013, 6.1154352612401684E-5, 0.000658220631124813,
    2.406633112066715E-5, -0.04355854014359279, 0.00086324063755082434,
    -0.597925752444161, 0.002307649090444321, 0.025572756739094347,
    0.00016559718257117828, 0.0, 0.942262865626905, 0.00021741116103373754,
    0.0024813289122200834, 5.0302994226935014E-5, -0.083582113352612661,
    0.0015150731406907625, -1.0726217674121876, 0.0038149907936857533,
    0.046594351280535795, 0.00034158928309933054, 0.0, 0.87919543762715469,
    0.00043059774675293505, 0.0052429175129900573, 8.1213747248903891E-5,
    -0.119303462718144, 0.0019744060237521922, -1.4315205110323159,
    0.0045996384443268458, 0.0631361505317583, 0.00055477107341229091, 0.0,
    0.80088152262878065, 0.000666941821854774, 0.00872366732158188,
    0.00011785497704701748, -0.15022620524476457, 0.0022625639105951856,
    -1.6842265007145802, 0.0047586928058357516, 0.075404784404271522,
    0.00078915160119051185, 0.0, 0.71235807529709283, 0.00089785635703528517,
    0.012717301594200847, 0.00016008062142995925, -0.17609182371461785,
    0.0024022216622435993, -1.8418449989629129, 0.0044012820396199916,
    0.083710218146255344, 0.0010310360047129377, 0.0, 0.61808189105726663,
    0.0011003707222003961, 0.017035012303687522, 0.00020680136448762576,
    -0.19684532946818933, 0.0024164855079133129, -1.9163838319466104,
    0.0036418959541772967, 0.088436637017764608, 0.0012690289112655625, 0.0,
    0.52189780884912929, 0.0012572508609401307, 0.021508508324269329,
    0.00025624411572832323, -0.2126008621445204, 0.0023281229536737513,
    -1.9202334356980968, 0.002594627598588257, 0.090016477977055684,
    0.0014939681571448067, 0.0, 0.42703091120130454, 0.0013568556344599172,
    0.025991848059587219, 0.00030620018808847547, -0.22360827133972172,
    0.0021589384540275274, -1.8657269823111606, 0.0013683850386595809,
    0.088907795682609536, 0.0016988030903916265, 0.0, 0.33609872933739232,
    0.0013927784792825098, 0.030362225208243426, 0.0003542530250943828,
    -0.2302215115843807, 0.0019292879762751361, -1.7647797048536831,
    6.30918687138943E-5, 0.085575022317945448, 0.0018784308747447488, 0.0,
    0.25113956281194327, 0.0013633234772859415, 0.034519876559404847,
    0.0003979787015713615, -0.23286948110245795, 0.0016577226173151605,
    -1.6286043140314448, -0.0012331428218377884, 0.080473073008801049, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    2.04388745128573E-5, -0.0, -5.8048391584439872E-5, -0.9860314653427954,
    -0.0012762735695932266, -0.043398201774400937, 2.36184272990922E-5,
    0.00039697725363734275, -0.0021911099166535882, 0.54647899618870288,
    -0.049647585035319089, 7.7006730138258557E-5, -0.0, -0.00020648636631088451,
    -0.9466304544552242, -0.004823536062555798, -0.083663596073279167,
    4.9377865598576132E-5, 0.00072236731644312563, -0.00362562548709041,
    1.01635396176579, -0.090829022288167319, 0.00016251714926893357, -0.0,
    -0.00040919177119518664, -0.88574513096868268, -0.010218651108604575,
    -0.11994375451727438, 7.9591879731235726E-5, 0.00097596779352357172,
    -0.00437561689120641, 1.4053753294132703, -0.12358549918528772,
    0.00026986462951149244, -0.0, -0.00063414818067035255, -0.80746770752277952,
    -0.017045514121730974, -0.15159515745139965, 0.00011515961687528328,
    0.0011595553504906257, -0.0045320042973381637, 1.7119908726138575,
    -0.14815338096223182, 0.00039220890598610884, -0.0, -0.0008542069435340734,
    -0.71590593905223088, -0.024904224665902235, -0.17817717074531969,
    0.00015582469001501555, 0.001276610651557612, -0.00419745235258546,
    1.9370840156832669, -0.16494021508398313, 0.0005231309225989957, -0.0,
    -0.0010475120569156593, -0.61506868572982276, -0.033418988617406095,
    -0.19944113938707778, 0.00020044128060064403, 0.0013320280868331657,
    -0.003480011296267863, 2.0836748506566214, -0.17449811140469351,
    0.000656759422890796, -0.0, -0.001197628148622212, -0.50876709759734839,
    -0.042244647124019194, -0.21531544792668136, 0.00024723472420950713,
    0.0013318199757249461, -0.0024876143004964059, 2.1565962693101794,
    -0.17749561205278261, 0.00078786805306681835, -0.0, -0.0012934161111873891,
    -0.400532369320559, -0.051071782724728107, -0.22588741255025513,
    0.00029404623154718687, 0.001282823974509119, -0.001323492786973236,
    2.162156901473177, -0.1746890686633033, 0.00091194368916381273, -0.0,
    -0.0013287029372697609, -0.29355045198146884, -0.059630401137255963,
    -0.23138285891037191, 0.00033855377544613331, 0.0011924213294182715,
    -8.2529206542033133E-5, 2.1078015938638051, -0.16689443290630376,
    0.0010252274064398615, -0.0, -0.0013017923500780186, -0.19061360002840419,
    -0.067692229492455555, -0.23214420695838922, 0.00037846345933905822,
    0.0010682724461085302, 0.0011514694016502875, 2.0017790202667518,
    -0.15496024380833598, -2.04388745128573E-5, 0.0, 5.8048391584439872E-5,
    0.9860314653427954, 0.0012762735695932266, 0.043398201774400937,
    -2.36184272990922E-5, -0.00039697725363734275, 0.0021911099166535882,
    -0.54647899618870288, 0.049647585035319089, -7.7006730138258557E-5, 0.0,
    0.00020648636631088451, 0.9466304544552242, 0.004823536062555798,
    0.083663596073279167, -4.9377865598576132E-5, -0.00072236731644312563,
    0.00362562548709041, -1.01635396176579, 0.090829022288167319,
    -0.00016251714926893357, 0.0, 0.00040919177119518664, 0.88574513096868268,
    0.010218651108604575, 0.11994375451727438, -7.9591879731235726E-5,
    -0.00097596779352357172, 0.00437561689120641, -1.4053753294132703,
    0.12358549918528772, -0.00026986462951149244, 0.0, 0.00063414818067035255,
    0.80746770752277952, 0.017045514121730974, 0.15159515745139965,
    -0.00011515961687528328, -0.0011595553504906257, 0.0045320042973381637,
    -1.7119908726138575, 0.14815338096223182, -0.00039220890598610884, 0.0,
    0.0008542069435340734, 0.71590593905223088, 0.024904224665902235,
    0.17817717074531969, -0.00015582469001501555, -0.001276610651557612,
    0.00419745235258546, -1.9370840156832669, 0.16494021508398313,
    -0.0005231309225989957, 0.0, 0.0010475120569156593, 0.61506868572982276,
    0.033418988617406095, 0.19944113938707778, -0.00020044128060064403,
    -0.0013320280868331657, 0.003480011296267863, -2.0836748506566214,
    0.17449811140469351, -0.000656759422890796, 0.0, 0.001197628148622212,
    0.50876709759734839, 0.042244647124019194, 0.21531544792668136,
    -0.00024723472420950713, -0.0013318199757249461, 0.0024876143004964059,
    -2.1565962693101794, 0.17749561205278261, -0.00078786805306681835, 0.0,
    0.0012934161111873891, 0.400532369320559, 0.051071782724728107,
    0.22588741255025513, -0.00029404623154718687, -0.001282823974509119,
    0.001323492786973236, -2.162156901473177, 0.1746890686633033,
    -0.00091194368916381273, 0.0, 0.0013287029372697609, 0.29355045198146884,
    0.059630401137255963, 0.23138285891037191, -0.00033855377544613331,
    -0.0011924213294182715, 8.2529206542033133E-5, -2.1078015938638051,
    0.16689443290630376, -0.0010252274064398615, 0.0, 0.0013017923500780186,
    0.19061360002840419, 0.067692229492455555, 0.23214420695838922,
    -0.00037846345933905822, -0.0010682724461085302, -0.0011514694016502875,
    -2.0017790202667518, 0.15496024380833598, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.478286826955546E-7, -0.0,
    6.8769055098177272E-7, -0.00016941253621162433, 2.2424978015547662E-5,
    -0.96502160066429243, -4.9401416636231716E-7, -4.7838722676953627E-6,
    2.5790943202432863E-5, -0.0065875197780085951, 0.00086768568007417686,
    -9.2248431214843523E-7, -0.0, 2.4156302213096643E-6, -0.00063954901564697341,
    8.39283526486641E-5, -0.93128625867636894, -9.5776483915232786E-7,
    -8.53993003265568E-6, 4.1783757492538038E-5, -0.012024088890445704,
    0.0015650029379927521, -1.9226281783478319E-6, -0.0, 4.7221487696031411E-6,
    -0.0013524290445471633, 0.00017628251988090844, -0.89876140615705369,
    -1.4251530688038312E-6, -1.1301150750979143E-5, 4.9147812256620473E-5,
    -0.01629821421575359, 0.0021037941713448892, -3.151389369593208E-6, -0.0,
    7.2092017778775748E-6, -0.0022503374924676294, 0.00029188194329595591,
    -0.86741307976319937, -1.911418484495708E-6, -1.3123239746973885E-5,
    4.9242506471983466E-5, -0.0194313181834074, 0.0024970675428962531,
    -4.5184334002269691E-6, -0.0, 9.5495248161453229E-6, -0.0032773645899514111,
    0.00042379618033310749, -0.83720604136226717, -2.4169342876524581E-6,
    -1.408052941621479E-5, 4.3525276631745757E-5, -0.021473447371424613,
    0.0027587783258518389, -5.941617614802549E-6, -0.0, 1.1489484596057009E-5,
    -0.0043807232281376811, 0.00056581090340386835, -0.80810395343984831,
    -2.9309525954318526E-6, -1.4261836487811805E-5, 3.3471675721450763E-5,
    -0.022498679679081129, 0.0029035703633923564, -7.3482352117815786E-6, -0.0,
    1.2848256227802613E-5, -0.0055118324421114025, 0.00071245535647723539,
    -0.78006959709773116, -3.4351503992121025E-6, -1.376639559764522E-5,
    2.0508437626240897E-5, -0.022600390074272669, 0.0029464947012035059,
    -8.6758607838232677E-6, -0.0, 1.3513985895401859E-5, -0.0066271637170720807,
    0.00085901548926932793, -0.75306512074250431, -3.9068598469276544E-6,
    -1.2699971783547483E-5, 5.9598347592064377E-6, -0.021886520744983744,
    0.0029027203799688534, -9.8728197065862839E-6, -0.0, 1.3437600305360475E-5,
    -0.007688853642056152, 0.001001532707219729, -0.72705230810458177,
    -4.3218988056358616E-6, -1.1171237870142415E-5, -8.9928823168420817E-6,
    -0.020474984912685911, 0.00278725023578264, -1.0898311452157673E-5, -0.0,
    1.2624902614667683E-5, -0.0086650924481569344, 0.0011367887639066978,
    -0.70199285501664688, -4.6569477427854232E-6, -9.2884856312992628E-6,
    -2.3339602817221753E-5, -0.018489315317665858, 0.0026146524005788356,
    2.478286826955546E-7, 0.0, -6.8769055098177272E-7, 0.00016941253621162433,
    -2.2424978015547662E-5, 0.96502160066429243, 4.9401416636231716E-7,
    4.7838722676953627E-6, -2.5790943202432863E-5, 0.0065875197780085951,
    -0.00086768568007417686, 9.2248431214843523E-7, 0.0, -2.4156302213096643E-6,
    0.00063954901564697341, -8.39283526486641E-5, 0.93128625867636894,
    9.5776483915232786E-7, 8.53993003265568E-6, -4.1783757492538038E-5,
    0.012024088890445704, -0.0015650029379927521, 1.9226281783478319E-6, 0.0,
    -4.7221487696031411E-6, 0.0013524290445471633, -0.00017628251988090844,
    0.89876140615705369, 1.4251530688038312E-6, 1.1301150750979143E-5,
    -4.9147812256620473E-5, 0.01629821421575359, -0.0021037941713448892,
    3.151389369593208E-6, 0.0, -7.2092017778775748E-6, 0.0022503374924676294,
    -0.00029188194329595591, 0.86741307976319937, 1.911418484495708E-6,
    1.3123239746973885E-5, -4.9242506471983466E-5, 0.0194313181834074,
    -0.0024970675428962531, 4.5184334002269691E-6, 0.0, -9.5495248161453229E-6,
    0.0032773645899514111, -0.00042379618033310749, 0.83720604136226717,
    2.4169342876524581E-6, 1.408052941621479E-5, -4.3525276631745757E-5,
    0.021473447371424613, -0.0027587783258518389, 5.941617614802549E-6, 0.0,
    -1.1489484596057009E-5, 0.0043807232281376811, -0.00056581090340386835,
    0.80810395343984831, 2.9309525954318526E-6, 1.4261836487811805E-5,
    -3.3471675721450763E-5, 0.022498679679081129, -0.0029035703633923564,
    7.3482352117815786E-6, 0.0, -1.2848256227802613E-5, 0.0055118324421114025,
    -0.00071245535647723539, 0.78006959709773116, 3.4351503992121025E-6,
    1.376639559764522E-5, -2.0508437626240897E-5, 0.022600390074272669,
    -0.0029464947012035059, 8.6758607838232677E-6, 0.0, -1.3513985895401859E-5,
    0.0066271637170720807, -0.00085901548926932793, 0.75306512074250431,
    3.9068598469276544E-6, 1.2699971783547483E-5, -5.9598347592064377E-6,
    0.021886520744983744, -0.0029027203799688534, 9.8728197065862839E-6, 0.0,
    -1.3437600305360475E-5, 0.007688853642056152, -0.001001532707219729,
    0.72705230810458177, 4.3218988056358616E-6, 1.1171237870142415E-5,
    8.9928823168420817E-6, 0.020474984912685911, -0.00278725023578264,
    1.0898311452157673E-5, 0.0, -1.2624902614667683E-5, 0.0086650924481569344,
    -0.0011367887639066978, 0.70199285501664688, 4.6569477427854232E-6,
    9.2884856312992628E-6, 2.3339602817221753E-5, 0.018489315317665858,
    -0.0026146524005788356, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.4423982654983043E-7, -0.0,
    0.00018717266530852815, -7.4031064802782007E-7, -1.142615450609401E-5,
    -4.9457201721440852E-7, -0.96511061759937666, -1.0375873249332257E-5,
    0.007187778861063086, -2.7754140534262974E-5, -0.00044171651039709426,
    -1.9785053998539566E-6, -0.0, 0.00068994213403566172, -2.5988482132947961E-6,
    -4.2686551966108383E-5, -9.6204467241581431E-7, -0.93146279523872355,
    -1.7852774376007976E-5, 0.012646438241270288, -4.4924195866894968E-5,
    -0.00079437378619309383, -4.0290494111702533E-6, -0.0, 0.0014254683812428238,
    -5.0778677328775714E-6, -8.9489511649034348E-5, -1.4388845902390896E-6,
    -0.899023082215573, -2.275790038754347E-5, 0.016524906051922781,
    -5.280877453099144E-5, -0.0010646232656389761, -6.4558541190490292E-6, -0.0,
    0.0023189213403051914, -7.7497194538178186E-6, -0.00014790272744693748,
    -1.9421068799999758E-6, -0.86775592062393425, -2.5436221666313368E-5,
    0.018993091475763314, -5.2896039548552031E-5, -0.0012601250396440809,
    -9.053718738978823E-6, -0.0, 0.0033043053133774772, -1.0263869870887411E-5,
    -0.00021439447017747472, -2.4730040565815671E-6, -0.83762411485019161,
    -2.6237055814920248E-5, 0.020233091737850706, -4.6767472069974407E-5,
    -0.0013891846051280129, -1.1652115901671884E-5, -0.0, 0.0043248730920508781,
    -1.2349427337950638E-5, -0.00028585756785405109, -3.0209020153965524E-6,
    -0.80858930087531788, -2.5502871300608578E-5, 0.020431580904870215,
    -3.6014501084912378E-5, -0.001460428056902732, -1.4114037906686473E-5, -0.0,
    0.005333189587236482, -1.3813841303110512E-5, -0.00035961819070778211,
    -3.5667761845836979E-6, -0.78061240016878886, -2.3560265416756141E-5,
    0.019773401341512394, -2.2168915676365361E-5, -0.0014825195409437361,
    -1.6334045053545086E-5, -0.0, 0.0062909047718956454, -1.4538473775851277E-5,
    -0.00043343160592496387, -4.0865953169659728E-6, -0.75365404614175069,
    -2.0713005416527256E-5, 0.018436338663644872, -6.6473407673746614E-6,
    -0.0014639227284713053, -1.8235714986377389E-5, -0.0, 0.0071682939461387325,
    -1.4471741728949776E-5, -0.00050546711031719852, -4.5542939554716669E-6,
    -0.72767497410904636, -1.7236979151672166E-5, 0.016587028823319503,
    9.2904848914954784E-6, -0.0014127063359572218, -1.9768675004612221E-5, -0.0,
    0.0079436201121770716, -1.3620504524320788E-5, -0.00057428431374495752,
    -4.9443063255571107E-6, -0.70263636843729138, -1.3376871134371667E-5,
    0.014377920972522327, 2.45703356975488E-5, -0.0013363923023420713,
    5.4423982654983043E-7, 0.0, -0.00018717266530852815, 7.4031064802782007E-7,
    1.142615450609401E-5, 4.9457201721440852E-7, 0.96511061759937666,
    1.0375873249332257E-5, -0.007187778861063086, 2.7754140534262974E-5,
    0.00044171651039709426, 1.9785053998539566E-6, 0.0, -0.00068994213403566172,
    2.5988482132947961E-6, 4.2686551966108383E-5, 9.6204467241581431E-7,
    0.93146279523872355, 1.7852774376007976E-5, -0.012646438241270288,
    4.4924195866894968E-5, 0.00079437378619309383, 4.0290494111702533E-6, 0.0,
    -0.0014254683812428238, 5.0778677328775714E-6, 8.9489511649034348E-5,
    1.4388845902390896E-6, 0.899023082215573, 2.275790038754347E-5,
    -0.016524906051922781, 5.280877453099144E-5, 0.0010646232656389761,
    6.4558541190490292E-6, 0.0, -0.0023189213403051914, 7.7497194538178186E-6,
    0.00014790272744693748, 1.9421068799999758E-6, 0.86775592062393425,
    2.5436221666313368E-5, -0.018993091475763314, 5.2896039548552031E-5,
    0.0012601250396440809, 9.053718738978823E-6, 0.0, -0.0033043053133774772,
    1.0263869870887411E-5, 0.00021439447017747472, 2.4730040565815671E-6,
    0.83762411485019161, 2.6237055814920248E-5, -0.020233091737850706,
    4.6767472069974407E-5, 0.0013891846051280129, 1.1652115901671884E-5, 0.0,
    -0.0043248730920508781, 1.2349427337950638E-5, 0.00028585756785405109,
    3.0209020153965524E-6, 0.80858930087531788, 2.5502871300608578E-5,
    -0.020431580904870215, 3.6014501084912378E-5, 0.001460428056902732,
    1.4114037906686473E-5, 0.0, -0.005333189587236482, 1.3813841303110512E-5,
    0.00035961819070778211, 3.5667761845836979E-6, 0.78061240016878886,
    2.3560265416756141E-5, -0.019773401341512394, 2.2168915676365361E-5,
    0.0014825195409437361, 1.6334045053545086E-5, 0.0, -0.0062909047718956454,
    1.4538473775851277E-5, 0.00043343160592496387, 4.0865953169659728E-6,
    0.75365404614175069, 2.0713005416527256E-5, -0.018436338663644872,
    6.6473407673746614E-6, 0.0014639227284713053, 1.8235714986377389E-5, 0.0,
    -0.0071682939461387325, 1.4471741728949776E-5, 0.00050546711031719852,
    4.5542939554716669E-6, 0.72767497410904636, 1.7236979151672166E-5,
    -0.016587028823319503, -9.2904848914954784E-6, 0.0014127063359572218,
    1.9768675004612221E-5, 0.0, -0.0079436201121770716, 1.3620504524320788E-5,
    0.00057428431374495752, 4.9443063255571107E-6, 0.70263636843729138,
    1.3376871134371667E-5, -0.014377920972522327, -2.45703356975488E-5,
    0.0013363923023420713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.098066021672124887, -0.0,
    -4.598271195783E-5, 2.0898544599696179E-5, 5.9658590980901608E-8,
    -5.2978632346833573E-6, -1.1479599830850796E-5, -0.96157151239694438,
    -0.0017645806891454807, 0.00081186577064666621, 2.2084979199813477E-6,
    -0.19236354515704759, -0.0, -0.00016926606102055471, 7.8749133580348457E-5,
    2.0371469266010799E-7, -7.8129243739768064E-6, -1.6163003650764269E-5,
    -0.92462038031705684, -0.0030978874238908652, 0.0014776371740103974,
    3.3948839819924106E-6, -0.28303744640522915, -0.0, -0.000349220963028306,
    0.00016621717400426333, 3.85205349316638E-7, -6.3165904936245233E-6,
    -1.1903890918503865E-5, -0.8890897807627286, -0.00403832905733924,
    0.0019968384869100669, 3.748166051923153E-6, -0.37022702841410521, -0.0,
    -0.00056727258959882859, 0.00027604776948656542, 5.6950242178783149E-7,
    5.8472739918750383E-8, 2.5574218429648786E-6, -0.85492506411343494,
    -0.0046292798119098484, 0.002373043419167688, 3.5610253244648E-6,
    -0.45406623454452244, -0.0, -0.000807092986884359, 0.00040125432731807735,
    7.3786749657180018E-7, 1.1841763106740401E-5, 2.7725504701352593E-5,
    -0.82207367415560728, -0.004916902274143195, 0.0026133135836749659,
    3.1671724329734385E-6, -0.53468385397445639, -0.0, -0.0010546922887759776,
    0.00053527822176736546, 8.8824233960961954E-7, 2.9254706392323943E-5,
    6.3480254540622462E-5, -0.79048507077618857, -0.0049482697309608378,
    0.0027276057197343434, 2.893237305829342E-6, -0.61220371955009423, -0.0,
    -0.0012984236316414769, 0.00067211845377345553, 1.0339726040389907E-6,
    5.2245228769293574E-5, 0.0001092025448065611, -0.76011065519781018,
    -0.0047697916540032038, 0.0027281674719944584, 3.0239847628315235E-6,
    -0.68674489828319663, -0.0, -0.0015289168151609153, 0.00080643118969793046,
    1.2010955562350131E-6, 8.0525646059160548E-5, 0.00016389217356341438,
    -0.73090369765373575, -0.0044259363475258624, 0.0026289395696738539,
    3.7794016029674961E-6, -0.7584218747343402, -0.0, -0.0017389552496423347,
    0.000933599899463833, 1.4247455985843228E-6, 0.00011361245850412573,
    0.00022627594203367135, -0.70281926741760059, -0.003958236887479147,
    0.0024449800318122748, 5.3020442620783015E-6, -0.82734472751385657, -0.0,
    -0.0019233098772573126, 0.0010497775364711305, 1.7451486109993724E-6,
    0.00015086674878883176, 0.00029490437357767, -0.675814165116723,
    -0.0034045603970885162, 0.0021919236339732226, 7.6529603869929245E-6,
    0.098066021672124887, 0.0, 4.598271195783E-5, -2.0898544599696179E-5,
    -5.9658590980901608E-8, 5.2978632346833573E-6, 1.1479599830850796E-5,
    0.96157151239694438, 0.0017645806891454807, -0.00081186577064666621,
    -2.2084979199813477E-6, 0.19236354515704759, 0.0, 0.00016926606102055471,
    -7.8749133580348457E-5, -2.0371469266010799E-7, 7.8129243739768064E-6,
    1.6163003650764269E-5, 0.92462038031705684, 0.0030978874238908652,
    -0.0014776371740103974, -3.3948839819924106E-6, 0.28303744640522915, 0.0,
    0.000349220963028306, -0.00016621717400426333, -3.85205349316638E-7,
    6.3165904936245233E-6, 1.1903890918503865E-5, 0.8890897807627286,
    0.00403832905733924, -0.0019968384869100669, -3.748166051923153E-6,
    0.37022702841410521, 0.0, 0.00056727258959882859, -0.00027604776948656542,
    -5.6950242178783149E-7, -5.8472739918750383E-8, -2.5574218429648786E-6,
    0.85492506411343494, 0.0046292798119098484, -0.002373043419167688,
    -3.5610253244648E-6, 0.45406623454452244, 0.0, 0.000807092986884359,
    -0.00040125432731807735, -7.3786749657180018E-7, -1.1841763106740401E-5,
    -2.7725504701352593E-5, 0.82207367415560728, 0.004916902274143195,
    -0.0026133135836749659, -3.1671724329734385E-6, 0.53468385397445639, 0.0,
    0.0010546922887759776, -0.00053527822176736546, -8.8824233960961954E-7,
    -2.9254706392323943E-5, -6.3480254540622462E-5, 0.79048507077618857,
    0.0049482697309608378, -0.0027276057197343434, -2.893237305829342E-6,
    0.61220371955009423, 0.0, 0.0012984236316414769, -0.00067211845377345553,
    -1.0339726040389907E-6, -5.2245228769293574E-5, -0.0001092025448065611,
    0.76011065519781018, 0.0047697916540032038, -0.0027281674719944584,
    -3.0239847628315235E-6, 0.68674489828319663, 0.0, 0.0015289168151609153,
    -0.00080643118969793046, -1.2010955562350131E-6, -8.0525646059160548E-5,
    -0.00016389217356341438, 0.73090369765373575, 0.0044259363475258624,
    -0.0026289395696738539, -3.7794016029674961E-6, 0.7584218747343402, 0.0,
    0.0017389552496423347, -0.000933599899463833, -1.4247455985843228E-6,
    -0.00011361245850412573, -0.00022627594203367135, 0.70281926741760059,
    0.003958236887479147, -0.0024449800318122748, -5.3020442620783015E-6,
    0.82734472751385657, 0.0, 0.0019233098772573126, -0.0010497775364711305,
    -1.7451486109993724E-6, -0.00015086674878883176, -0.00029490437357767,
    0.675814165116723, 0.0034045603970885162, -0.0021919236339732226,
    -7.6529603869929245E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.3903187326404862E-5, -0.0,
    -0.045219535709451038, -1.8868952312019515E-5, -1.6305396659915506E-5,
    3.5131312199902236E-6, 0.0022383811075379761, -0.0002745798143991763,
    -0.80992029310182234, -0.00073365065879608374, -0.000832315230131649,
    -5.4120271394801343E-5, -0.0, -0.081144498575818333, -7.1059557495440137E-5,
    -9.786404782667251E-5, 3.1697525445585364E-6, 0.0059427959104305771,
    -0.00052535303841541711, -0.62895022579966342, -0.0013293482111185508,
    -0.0025450398630009943, -0.00011802421143895338, -0.0, -0.10833092312067302,
    -0.00014923797445449199, -0.00027953290969667192, -1.6412793303012907E-6,
    0.010677532144893035, -0.00074769615835221671, -0.46092648234796829,
    -0.0017714354292448476, -0.004783437189556837, -0.00020261338462162018, -0.0,
    -0.12749964769734931, -0.00024554551761307388, -0.00058015214815294663,
    -1.124017811775899E-5, 0.016054926488428274, -0.00093870583999979874,
    -0.30862072588865219, -0.0020543585895278489, -0.0072605454968176115,
    -0.00030467282222098127, -0.0, -0.13948561438736476, -0.00035206974867902838,
    -0.0010057763455319072, -2.5655014651372622E-5, 0.0217384752915467,
    -0.0010969814090496552, -0.173843871204133, -0.0021812768233411229,
    -0.0097508127405324142, -0.00042091327819644182, -0.0, -0.14519266909915968,
    -0.00046124262724751369, -0.0015525795654353284, -4.4638247843967546E-5,
    0.02744386247954396, -0.00122240046614574, -0.057560872467213843,
    -0.0021625485737466329, -0.012083448915214031, -0.00054808785373508463, -0.0,
    -0.14555425184634585, -0.0005661615139041776, -0.0022094249115680161,
    -6.7697147200640646E-5, 0.032938240440254452, -0.0013158955976231969,
    0.039989276711038683, -0.0020141710597530536, -0.014135682893776065,
    -0.00068308662546479244, -0.0, -0.14150012142833834, -0.00066083236133814883,
    -0.0029600980353976366, -9.4134332225845376E-5, 0.03803809309360489,
    -0.0013792387088235949, 0.11917285635757453, -0.0017562383721621002,
    -0.01582608918963236, -0.00082301030818972146, -0.0, -0.13392905193129206,
    -0.00074033743892294474, -0.00378521173347767, -0.00012309486030389081,
    0.042605994987298584, -0.0014148381287185621, 0.18084379533956324,
    -0.0014114729089540049, -0.017108126341523127, -0.00096522443250971629, -0.0,
    -0.12368726996857371, -0.00080093239415831761, -0.0046637952408056,
    -0.0001536166018188948, 0.046546558179618447, -0.001425552344018655,
    0.22623210532121629, -0.001003873765186801, -0.017964003754169743,
    1.3903187326404862E-5, 0.0, 0.045219535709451038, 1.8868952312019515E-5,
    1.6305396659915506E-5, -3.5131312199902236E-6, -0.0022383811075379761,
    0.0002745798143991763, 0.80992029310182234, 0.00073365065879608374,
    0.000832315230131649, 5.4120271394801343E-5, 0.0, 0.081144498575818333,
    7.1059557495440137E-5, 9.786404782667251E-5, -3.1697525445585364E-6,
    -0.0059427959104305771, 0.00052535303841541711, 0.62895022579966342,
    0.0013293482111185508, 0.0025450398630009943, 0.00011802421143895338, 0.0,
    0.10833092312067302, 0.00014923797445449199, 0.00027953290969667192,
    1.6412793303012907E-6, -0.010677532144893035, 0.00074769615835221671,
    0.46092648234796829, 0.0017714354292448476, 0.004783437189556837,
    0.00020261338462162018, 0.0, 0.12749964769734931, 0.00024554551761307388,
    0.00058015214815294663, 1.124017811775899E-5, -0.016054926488428274,
    0.00093870583999979874, 0.30862072588865219, 0.0020543585895278489,
    0.0072605454968176115, 0.00030467282222098127, 0.0, 0.13948561438736476,
    0.00035206974867902838, 0.0010057763455319072, 2.5655014651372622E-5,
    -0.0217384752915467, 0.0010969814090496552, 0.173843871204133,
    0.0021812768233411229, 0.0097508127405324142, 0.00042091327819644182, 0.0,
    0.14519266909915968, 0.00046124262724751369, 0.0015525795654353284,
    4.4638247843967546E-5, -0.02744386247954396, 0.00122240046614574,
    0.057560872467213843, 0.0021625485737466329, 0.012083448915214031,
    0.00054808785373508463, 0.0, 0.14555425184634585, 0.0005661615139041776,
    0.0022094249115680161, 6.7697147200640646E-5, -0.032938240440254452,
    0.0013158955976231969, -0.039989276711038683, 0.0020141710597530536,
    0.014135682893776065, 0.00068308662546479244, 0.0, 0.14150012142833834,
    0.00066083236133814883, 0.0029600980353976366, 9.4134332225845376E-5,
    -0.03803809309360489, 0.0013792387088235949, -0.11917285635757453,
    0.0017562383721621002, 0.01582608918963236, 0.00082301030818972146, 0.0,
    0.13392905193129206, 0.00074033743892294474, 0.00378521173347767,
    0.00012309486030389081, -0.042605994987298584, 0.0014148381287185621,
    -0.18084379533956324, 0.0014114729089540049, 0.017108126341523127,
    0.00096522443250971629, 0.0, 0.12368726996857371, 0.00080093239415831761,
    0.0046637952408056, 0.0001536166018188948, -0.046546558179618447,
    0.001425552344018655, -0.22623210532121629, 0.001003873765186801,
    0.017964003754169743, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 4.5252614965129612E-6, -0.0,
    -1.3470948382708935E-5, -0.046909332489192504, -2.0587308747099204E-5,
    -0.0018258400396038929, -2.5176585929125812E-6, 9.1406194452072E-5,
    -0.00052891954512188164, -0.87431543133687928, -0.0012132471811926605,
    1.8396000903351756E-5, -0.0, -5.1685276288435527E-5, -0.087267952262670673,
    -0.00015466197826911117, -0.00539384976838334, -1.8866088698032875E-6,
    0.000186268341266583, -0.0009857161372155952, -0.738804995332161,
    -0.0044292450315131029, 4.17722869437299E-5, -0.0, -0.00011050242106740822,
    -0.12070673218974817, -0.0004864566946219373, -0.010340426150414273,
    2.3470918493561104E-6, 0.00028094611126974956, -0.0013503667482587451,
    -0.59829490552914333, -0.0090244931739712642, 7.447203003977396E-5, -0.0,
    -0.00018497923450709814, -0.14708803391431766, -0.0010709407476422225,
    -0.016307612550789455, 1.0444676133972834E-5, 0.00037224419444337024,
    -0.0016106933367036019, -0.45720411033869895, -0.01445206805942589,
    0.00011601743947126435, -0.0, -0.00026974569155873752, -0.16648337076882919,
    -0.0019376555938511728, -0.022952187111308954, 2.2462006975709489E-5,
    0.00045744841435303154, -0.0017616655761749985, -0.31946901552469636,
    -0.020241689948007093, 0.00016568421546948064, -0.0, -0.00035934093483336885,
    -0.17914785303688766, -0.0030945234979551143, -0.029953326391996469,
    3.8251815031842841E-5, 0.00053434453016012052, -0.0018045223489435173,
    -0.1884899349127957, -0.025998581179789735, 0.00022255181568151474, -0.0,
    -0.00044850217342835781, -0.18549247952010398, -0.0045315695774802581,
    -0.037018794408208169, 5.7478183087713556E-5, 0.00060122119065890282,
    -0.0017457743991054213, -0.067098287208954124, -0.0314011546654826,
    0.00028555329583513018, -0.0, -0.00053240194021310242, -0.18605527842491357,
    -0.0062245007142851137, -0.043889653309180821, 7.9640557801630829E-5,
    0.00065685877065429891, -0.0015961449576460639, 0.042456901478750454,
    -0.036197617516216724, 0.00035352340751577038, -0.0, -0.00060683188924712749,
    -0.18147221900604868, -0.00813808998090406, -0.050343532955506552,
    0.00010410461296168378, 0.00070050600832711476, -0.0013694984814663334,
    0.13850499690588419, -0.04020161061622176, 0.00042524383415223677, -0.0,
    -0.00066833364009500728, -0.17244871775113946, -0.010229321966057001,
    -0.056196532011796092, 0.00013013742781490265, 0.00073184647673016356,
    -0.0010818002827446742, 0.21993434133176287, -0.043287031244709458,
    -4.5252614965129612E-6, 0.0, 1.3470948382708935E-5, 0.046909332489192504,
    2.0587308747099204E-5, 0.0018258400396038929, 2.5176585929125812E-6,
    -9.1406194452072E-5, 0.00052891954512188164, 0.87431543133687928,
    0.0012132471811926605, -1.8396000903351756E-5, 0.0, 5.1685276288435527E-5,
    0.087267952262670673, 0.00015466197826911117, 0.00539384976838334,
    1.8866088698032875E-6, -0.000186268341266583, 0.0009857161372155952,
    0.738804995332161, 0.0044292450315131029, -4.17722869437299E-5, 0.0,
    0.00011050242106740822, 0.12070673218974817, 0.0004864566946219373,
    0.010340426150414273, -2.3470918493561104E-6, -0.00028094611126974956,
    0.0013503667482587451, 0.59829490552914333, 0.0090244931739712642,
    -7.447203003977396E-5, 0.0, 0.00018497923450709814, 0.14708803391431766,
    0.0010709407476422225, 0.016307612550789455, -1.0444676133972834E-5,
    -0.00037224419444337024, 0.0016106933367036019, 0.45720411033869895,
    0.01445206805942589, -0.00011601743947126435, 0.0, 0.00026974569155873752,
    0.16648337076882919, 0.0019376555938511728, 0.022952187111308954,
    -2.2462006975709489E-5, -0.00045744841435303154, 0.0017616655761749985,
    0.31946901552469636, 0.020241689948007093, -0.00016568421546948064, 0.0,
    0.00035934093483336885, 0.17914785303688766, 0.0030945234979551143,
    0.029953326391996469, -3.8251815031842841E-5, -0.00053434453016012052,
    0.0018045223489435173, 0.1884899349127957, 0.025998581179789735,
    -0.00022255181568151474, 0.0, 0.00044850217342835781, 0.18549247952010398,
    0.0045315695774802581, 0.037018794408208169, -5.7478183087713556E-5,
    -0.00060122119065890282, 0.0017457743991054213, 0.067098287208954124,
    0.0314011546654826, -0.00028555329583513018, 0.0, 0.00053240194021310242,
    0.18605527842491357, 0.0062245007142851137, 0.043889653309180821,
    -7.9640557801630829E-5, -0.00065685877065429891, 0.0015961449576460639,
    -0.042456901478750454, 0.036197617516216724, -0.00035352340751577038, 0.0,
    0.00060683188924712749, 0.18147221900604868, 0.00813808998090406,
    0.050343532955506552, -0.00010410461296168378, -0.00070050600832711476,
    0.0013694984814663334, -0.13850499690588419, 0.04020161061622176,
    -0.00042524383415223677, 0.0, 0.00066833364009500728, 0.17244871775113946,
    0.010229321966057001, 0.056196532011796092, -0.00013013742781490265,
    -0.00073184647673016356, 0.0010818002827446742, -0.21993434133176287,
    0.043287031244709458, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.5788680042587712E-8, -0.0,
    -8.5189138462148147E-6, 7.378467994987278E-7, -0.046345993253848423,
    0.00021767242759973264, -0.00011072138604332631, 4.8161920877121215E-7,
    -0.00032025413802335372, 2.83340935371592E-5, -0.85749010226935762,
    9.0147231168015163E-8, -0.0, -3.0152702816196197E-5, 2.7195904789261155E-6,
    -0.086087239199492169, 0.00039679516932090232, -0.00020071278867366633,
    7.778154871255098E-7, -0.000528093721053159, 4.9841766310788004E-5,
    -0.73528992666562687, 1.7639575129428358E-7, -0.0, -5.979199797523725E-5,
    5.6174257785889165E-6, -0.12016501633276411, 0.00054317831564121516,
    -0.00027262661433323076, 9.252022379131946E-7, -0.00064369824634044289,
    6.5075675664136466E-5, -0.63050528250419269, 2.713237586400668E-7, -0.0,
    -9.329385999944838E-5, 9.1328289832280846E-6, -0.14938646654108681,
    0.00066178571950547052, -0.00032887965465973497, 9.56541589371093E-7,
    -0.00068552109121076542, 7.4651309534966778E-5, -0.54065433787122574,
    3.6480269749472555E-7, -0.0, -0.0001273923247429397, 1.2999230860963119E-5,
    -0.17444370682792645, 0.000756855711753212, -0.00037166873232295506,
    9.0071171926603734E-7, -0.00067017340101050609, 7.9228242930483856E-5,
    -0.4636088753266846, 4.4939941548647843E-7, -0.0, -0.00015960457926458997,
    1.6983757775902689E-5, -0.19593021841354047, 0.00083200489061528542,
    -0.00040298345319631423, 7.8275731239433576E-7, -0.00061236461637246393,
    7.9491711425416463E-5, -0.39754391686852592, 5.1999840486532826E-7, -0.0,
    -0.00018813546900338184, 2.0888071368678681E-5, -0.21435490109256022,
    0.00089031735952394464, -0.00042461715601290449, 6.2401249748490613E-7,
    -0.00052489418885667946, 7.6135065240084482E-5, -0.34089452542087939,
    5.7343947586136435E-7, -0.0, -0.00021178273814060386, 2.4548362669951572E-5,
    -0.23015412545206143, 0.0009344214470711331, -0.000438176875085768,
    4.4228454635663887E-7, -0.00041868806521813109, 6.9843559605534155E-5,
    -0.29231876015068176, 6.0817633278473226E-7, -0.0, -0.00022984506884878521,
    2.7834576672341588E-5, -0.2437020681573869, 0.00096655565237234377,
    -0.00044509289972278647, 2.5208620253496967E-7, -0.00030287297090130118,
    6.1279832892843216E-5, -0.25066590871637812, 6.23960312027444E-7, -0.0,
    -0.00024203463042366549, 3.0648958465146892E-5, -0.25531957487353935,
    0.00098862531110749429, -0.00044662832213433127, 6.4904620884236139E-8,
    -0.00018488132765715517, 5.1071325239660988E-5, -0.21494924456330933,
    -2.5788680042587712E-8, 0.0, 8.5189138462148147E-6, -7.378467994987278E-7,
    0.046345993253848423, -0.00021767242759973264, 0.00011072138604332631,
    -4.8161920877121215E-7, 0.00032025413802335372, -2.83340935371592E-5,
    0.85749010226935762, -9.0147231168015163E-8, 0.0, 3.0152702816196197E-5,
    -2.7195904789261155E-6, 0.086087239199492169, -0.00039679516932090232,
    0.00020071278867366633, -7.778154871255098E-7, 0.000528093721053159,
    -4.9841766310788004E-5, 0.73528992666562687, -1.7639575129428358E-7, 0.0,
    5.979199797523725E-5, -5.6174257785889165E-6, 0.12016501633276411,
    -0.00054317831564121516, 0.00027262661433323076, -9.252022379131946E-7,
    0.00064369824634044289, -6.5075675664136466E-5, 0.63050528250419269,
    -2.713237586400668E-7, 0.0, 9.329385999944838E-5, -9.1328289832280846E-6,
    0.14938646654108681, -0.00066178571950547052, 0.00032887965465973497,
    -9.56541589371093E-7, 0.00068552109121076542, -7.4651309534966778E-5,
    0.54065433787122574, -3.6480269749472555E-7, 0.0, 0.0001273923247429397,
    -1.2999230860963119E-5, 0.17444370682792645, -0.000756855711753212,
    0.00037166873232295506, -9.0071171926603734E-7, 0.00067017340101050609,
    -7.9228242930483856E-5, 0.4636088753266846, -4.4939941548647843E-7, 0.0,
    0.00015960457926458997, -1.6983757775902689E-5, 0.19593021841354047,
    -0.00083200489061528542, 0.00040298345319631423, -7.8275731239433576E-7,
    0.00061236461637246393, -7.9491711425416463E-5, 0.39754391686852592,
    -5.1999840486532826E-7, 0.0, 0.00018813546900338184, -2.0888071368678681E-5,
    0.21435490109256022, -0.00089031735952394464, 0.00042461715601290449,
    -6.2401249748490613E-7, 0.00052489418885667946, -7.6135065240084482E-5,
    0.34089452542087939, -5.7343947586136435E-7, 0.0, 0.00021178273814060386,
    -2.4548362669951572E-5, 0.23015412545206143, -0.0009344214470711331,
    0.000438176875085768, -4.4228454635663887E-7, 0.00041868806521813109,
    -6.9843559605534155E-5, 0.29231876015068176, -6.0817633278473226E-7, 0.0,
    0.00022984506884878521, -2.7834576672341588E-5, 0.2437020681573869,
    -0.00096655565237234377, 0.00044509289972278647, -2.5208620253496967E-7,
    0.00030287297090130118, -6.1279832892843216E-5, 0.25066590871637812,
    -6.23960312027444E-7, 0.0, 0.00024203463042366549, -3.0648958465146892E-5,
    0.25531957487353935, -0.00098862531110749429, 0.00044662832213433127,
    -6.4904620884236139E-8, 0.00018488132765715517, -5.1071325239660988E-5,
    0.21494924456330933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.20245698544027138, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, 0.43434222668743683, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 0.69861494073608876, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.99847285455557933, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, 1.3373676042356115, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 1.7190208193719136, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 2.1474408920204411, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 2.6269404249888391, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 3.1621543490157835, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 3.75805869244628, -0.0,
    -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.20245698544027138, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.43434222668743683, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.69861494073608876, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.99847285455557933, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.3373676042356115, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -1.7190208193719136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -2.1474408920204411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -2.6269404249888391, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -3.1621543490157835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -3.75805869244628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0524320995148992, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.1059737708511963, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.1604448729507524, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.2156318550154623, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.271284073244024, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.3271097897409003, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.3827718313838282, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.4378828852769596,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.4920004062335945, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.5446211105295613, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.1059737708511963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.1604448729507524, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.2156318550154623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.271284073244024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.3271097897409003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.3827718313838282, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.4378828852769596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.4920004062335945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.5446211105295613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.20245698544027138, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, 0.43434222668743683, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 0.69861494073608876, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.99847285455557933, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.3373676042356115, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.7190208193719136, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 2.1474408920204411,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    2.6269404249888391, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, 3.1621543490157835, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 3.75805869244628, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.43434222668743683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.69861494073608876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.99847285455557933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.3373676042356115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.7190208193719136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.1474408920204411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.6269404249888391, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.1621543490157835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.75805869244628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0524320995148992, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.1059737708511963, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.1604448729507524, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.2156318550154623, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.271284073244024, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.3271097897409003, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.3827718313838282, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.4378828852769596,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.4920004062335945, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.5446211105295613, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.1059737708511963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.1604448729507524, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.2156318550154623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.271284073244024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.3271097897409003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.3827718313838282, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.4378828852769596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.4920004062335945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.5446211105295613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.20245698544027138, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, 0.43434222668743683, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 0.69861494073608876, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.99847285455557933, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.3373676042356115, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.7190208193719136, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 2.1474408920204411,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    2.6269404249888391, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, 3.1621543490157835, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 3.75805869244628, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.43434222668743683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.69861494073608876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.99847285455557933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.3373676042356115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.7190208193719136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.1474408920204411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.6269404249888391, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.1621543490157835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.75805869244628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0524320995148992, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.1059737708511963, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.1604448729507524, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.2156318550154623, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.271284073244024, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.3271097897409003, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.3827718313838282, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.4378828852769596,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.4920004062335945, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.5446211105295613, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.1059737708511963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.1604448729507524, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.2156318550154623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.271284073244024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.3271097897409003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.3827718313838282, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.4378828852769596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.4920004062335945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.5446211105295613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.20245698544027138, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, 0.43434222668743683, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 0.69861494073608876, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.99847285455557933, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.3373676042356115, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.7190208193719136, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 2.1474408920204411,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    2.6269404249888391, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, 3.1621543490157835, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 3.75805869244628, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.43434222668743683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.69861494073608876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.99847285455557933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.3373676042356115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.7190208193719136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.1474408920204411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.6269404249888391, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.1621543490157835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.75805869244628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0524320995148992, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.1059737708511963, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.1604448729507524, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.2156318550154623, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.271284073244024, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.3271097897409003, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.3827718313838282, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.4378828852769596,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.4920004062335945, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.5446211105295613, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.1059737708511963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.1604448729507524, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.2156318550154623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.271284073244024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.3271097897409003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.3827718313838282, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.4378828852769596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.4920004062335945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.5446211105295613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.20245698544027138, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, 0.43434222668743683, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 0.69861494073608876, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.99847285455557933, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.3373676042356115, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.7190208193719136, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 2.1474408920204411,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    2.6269404249888391, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, 3.1621543490157835, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 3.75805869244628, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.43434222668743683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.69861494073608876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.99847285455557933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.3373676042356115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.7190208193719136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.1474408920204411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.6269404249888391, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.1621543490157835, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.75805869244628, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0524320995148992, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.1059737708511963, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.1604448729507524, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.2156318550154623, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.271284073244024, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.3271097897409003, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.3827718313838282, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.4378828852769596,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.4920004062335945, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.5446211105295613, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.1059737708511963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.1604448729507524, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.2156318550154623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.271284073244024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.3271097897409003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.3827718313838282, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.4378828852769596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.4920004062335945, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.5446211105295613, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.20245698544027138, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, 0.43434222668743683, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 0.69861494073608876, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.99847285455557933, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.3373676042356115, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.7190208193719136, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 2.1474408920204411,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    2.6269404249888391, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, 3.1621543490157831, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 3.7580586924462795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.43434222668743683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.69861494073608876, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.99847285455557933, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.3373676042356115, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -1.7190208193719136, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.1474408920204411, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -2.6269404249888391, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.1621543490157831, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -3.7580586924462795, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0524320995148992, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.1059737708511963, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.1604448729507524, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.2156318550154623, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.271284073244024, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.3271097897409003, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.382771831383828, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.4378828852769592,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.4920004062335941, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.5446211105295609, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.1059737708511963, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.1604448729507524, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.2156318550154623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.271284073244024, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.3271097897409003, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.382771831383828, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.4378828852769592, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.4920004062335941, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.5446211105295609, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T l[4284]{ -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0012391951215142167, 0.0012446059948862914, -4.2404022064644467E-7,
    0.00061228609723886591, 0.00060373405900552592, 0.0098620476003080347,
    -3.56873367857697E-8, -0.0, 2.7547316305628068E-5, 2.8116033294348984E-5,
    0.00045713081438921826, -0.00243609109297792, 0.0024455107681744352,
    -7.1661287547623481E-7, 0.0011027519799713995, 0.001123629499998789,
    0.018321522895185779, -9.4796134122044776E-8, -0.0, 7.6703751748538636E-5,
    8.0030098298072608E-5, 0.001306437692283552, -0.0035907939902378285,
    0.0036031556402020496, -8.9551310871232046E-7, 0.0014779632866533097,
    0.0015551499854078413, 0.025580147558417393, -1.6687771959976964E-7, -0.0,
    0.00014192121256889791, 0.0001512713076419929, 0.0024923054756228317,
    -0.0047036459300071653, 0.0047182329219214812, -9.7913980905713911E-7,
    0.0017468378029659839, 0.0018966737483913807, 0.031810529942263861,
    -2.4331881229464419E-7, -0.0, 0.00021814177066851553, 0.00023735479426096364,
    0.0039671094815349021, -0.0057752117885488813, 0.0057916516880133443,
    -9.856800244895193E-7, 0.0019199551973666891, 0.0021492127284515397,
    0.037160322209045436, -3.1728651454929717E-7, -0.0, 0.00030086501023722577,
    0.00033390549424166144, 0.0056900592765109477, -0.0068062617695294888,
    0.0068245023869756526, -9.3245963721354037E-7, 0.0020089398663594303,
    0.0023160907906922667, 0.041755793543627011, -3.836163581852502E-7, -0.0,
    0.000386186464770553, 0.00043676509883602789, 0.0076262082394893977,
    -0.00779775057120359, 0.0078180215257652574, -8.3545204403112146E-7,
    0.0020259223205064169, 0.0024025944579429137, 0.045704901080689711,
    -4.3865862667314595E-7, -0.0, 0.00047081113773878394, 0.00054208112200342584,
    0.0097456055950709865, -0.0087507939441329521, 0.0087735574545612111,
    -7.0893270757104988E-7, 0.0019830812548007315, 0.0024156088358255222,
    0.049099928581599117, -4.8009681261472288E-7, -0.0, 0.00055204613582663037,
    0.00064637763947580017, 0.012022570845529568, -0.0096666434406986069,
    0.0096925380705102891, -5.6526464202263841E-7, 0.0018922656713862541,
    0.0023632503965544467, 0.052019752983142542, -5.0675047767049444E-7, -0.0,
    0.00062777635323315868, 0.00074660780883124942, 0.014435073319052159,
    -0.010546660140594175, 0.010576441063362649, -4.1479808097306436E-7,
    0.0017646941523624278, 0.0022545070655495664, 0.054531790468060191, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0012391951215142167, -0.0012446059948862914,
    4.2404022064644467E-7, -0.00061228609723886591, -0.00060373405900552592,
    -0.0098620476003080347, 3.56873367857697E-8, 0.0, -2.7547316305628068E-5,
    -2.8116033294348984E-5, -0.00045713081438921826, 0.00243609109297792,
    -0.0024455107681744352, 7.1661287547623481E-7, -0.0011027519799713995,
    -0.001123629499998789, -0.018321522895185779, 9.4796134122044776E-8, 0.0,
    -7.6703751748538636E-5, -8.0030098298072608E-5, -0.001306437692283552,
    0.0035907939902378285, -0.0036031556402020496, 8.9551310871232046E-7,
    -0.0014779632866533097, -0.0015551499854078413, -0.025580147558417393,
    1.6687771959976964E-7, 0.0, -0.00014192121256889791, -0.0001512713076419929,
    -0.0024923054756228317, 0.0047036459300071653, -0.0047182329219214812,
    9.7913980905713911E-7, -0.0017468378029659839, -0.0018966737483913807,
    -0.031810529942263861, 2.4331881229464419E-7, 0.0, -0.00021814177066851553,
    -0.00023735479426096364, -0.0039671094815349021, 0.0057752117885488813,
    -0.0057916516880133443, 9.856800244895193E-7, -0.0019199551973666891,
    -0.0021492127284515397, -0.037160322209045436, 3.1728651454929717E-7, 0.0,
    -0.00030086501023722577, -0.00033390549424166144, -0.0056900592765109477,
    0.0068062617695294888, -0.0068245023869756526, 9.3245963721354037E-7,
    -0.0020089398663594303, -0.0023160907906922667, -0.041755793543627011,
    3.836163581852502E-7, 0.0, -0.000386186464770553, -0.00043676509883602789,
    -0.0076262082394893977, 0.00779775057120359, -0.0078180215257652574,
    8.3545204403112146E-7, -0.0020259223205064169, -0.0024025944579429137,
    -0.045704901080689711, 4.3865862667314595E-7, 0.0, -0.00047081113773878394,
    -0.00054208112200342584, -0.0097456055950709865, 0.0087507939441329521,
    -0.0087735574545612111, 7.0893270757104988E-7, -0.0019830812548007315,
    -0.0024156088358255222, -0.049099928581599117, 4.8009681261472288E-7, 0.0,
    -0.00055204613582663037, -0.00064637763947580017, -0.012022570845529568,
    0.0096666434406986069, -0.0096925380705102891, 5.6526464202263841E-7,
    -0.0018922656713862541, -0.0023632503965544467, -0.052019752983142542,
    5.0675047767049444E-7, 0.0, -0.00062777635323315868, -0.00074660780883124942,
    -0.014435073319052159, 0.010546660140594175, -0.010576441063362649,
    4.1479808097306436E-7, -0.0017646941523624278, -0.0022545070655495664,
    -0.054531790468060191, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0012392515220872938, -0.0012615116309597195, 1.2723282076113984E-6,
    -0.00066574090240467871, 0.00060885429897081559, 0.00993945077638962,
    1.115110079292313E-7, -0.0, -2.9774588118905792E-5, 2.8330147878950711E-5,
    0.00046066877401688695, -0.0024362061617123764, -0.0024764182733138535,
    2.2335059624115065E-6, -0.00119233111080507, 0.0011322153223746652,
    0.01846313407108113, 3.0449489836944779E-7, -0.0, -8.2591050755680118E-5,
    8.0593336523746863E-5, 0.0013164078235241451, -0.003590963026166359,
    -0.0036455181037952922, 2.9059316048441165E-6, -0.0015891905315969265,
    0.0015657000957289779, 0.025773451847475804, 5.5138605425113653E-7, -0.0,
    -0.00015224525658132307, 0.00015224834435741656, 0.002510997738997117,
    -0.0047038604477557047, -0.0047698311298268146, 3.3164081227893921E-6,
    -0.0018679155544971287, 0.0019078816412251157, 0.032043902229581596,
    8.2745940428709995E-7, -0.0, -0.00023315206995101203, 0.00023875041938736682,
    0.0039962581191115062, -0.0057754621868178575, -0.0058505667434088854,
    3.494717463833115E-6, -0.0020415556947274453, 0.0021599926268600364,
    0.037423179797378685, 1.1110630208245628E-6, -0.0, -0.00032040162244531594,
    0.00033567600536470014, 0.0057308976478699526, -0.0068065394545576176,
    -0.0068890896379921462, 3.4723399129970735E-6, -0.0021239724419936687,
    0.0023255897348866952, 0.042038696461928649, 1.3837304160926059E-6, -0.0,
    -0.00040978569487760822, 0.00043882999060618232, 0.0076795274758591284,
    -0.00779804953460847, -0.0078868855124838121, 3.2813300633697461E-6,
    -0.0021292853574231816, 0.0024101924149203019, 0.045999605460161179,
    1.6301885120178117E-6, -0.0, -0.0004977986232042801, 0.00054433452313428117,
    0.0098118148725695065, -0.0087511118183606421, -0.0088455277311285125,
    2.9533547446344884E-6, -0.00207140691842922, 0.0024209088334801133,
    0.049399399069799392, 1.8382775243837413E-6, -0.0, -0.00058161714037264925,
    0.00064869904965210933, 0.012101757384877105, -0.0096669820741694321,
    -0.0097666458637556651, 2.518893005147593E-6, -0.001963664651726987,
    0.002366060725434248, 0.052318140437762582, 1.9987987850364537E-6, -0.0,
    -0.000659063431035412, 0.000748871789323304, 0.014527060532707213,
    -0.010547025748619683, -0.010651896802992212, 2.0065938551231715E-6,
    -0.001818506702682665, 0.0022548175525283361, 0.054824381194625425, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, -1.115110079292313E-7, 0.0, 2.9774588118905792E-5,
    -2.8330147878950711E-5, -0.00046066877401688695, 0.0024362061617123764,
    0.0024764182733138535, -2.2335059624115065E-6, 0.00119233111080507,
    -0.0011322153223746652, -0.01846313407108113, -3.0449489836944779E-7, 0.0,
    8.2591050755680118E-5, -8.0593336523746863E-5, -0.0013164078235241451,
    0.003590963026166359, 0.0036455181037952922, -2.9059316048441165E-6,
    0.0015891905315969265, -0.0015657000957289779, -0.025773451847475804,
    -5.5138605425113653E-7, 0.0, 0.00015224525658132307, -0.00015224834435741656,
    -0.002510997738997117, 0.0047038604477557047, 0.0047698311298268146,
    -3.3164081227893921E-6, 0.0018679155544971287, -0.0019078816412251157,
    -0.032043902229581596, -8.2745940428709995E-7, 0.0, 0.00023315206995101203,
    -0.00023875041938736682, -0.0039962581191115062, 0.0057754621868178575,
    0.0058505667434088854, -3.494717463833115E-6, 0.0020415556947274453,
    -0.0021599926268600364, -0.037423179797378685, -1.1110630208245628E-6, 0.0,
    0.00032040162244531594, -0.00033567600536470014, -0.0057308976478699526,
    0.0068065394545576176, 0.0068890896379921462, -3.4723399129970735E-6,
    0.0021239724419936687, -0.0023255897348866952, -0.042038696461928649,
    -1.3837304160926059E-6, 0.0, 0.00040978569487760822, -0.00043882999060618232,
    -0.0076795274758591284, 0.00779804953460847, 0.0078868855124838121,
    -3.2813300633697461E-6, 0.0021292853574231816, -0.0024101924149203019,
    -0.045999605460161179, -1.6301885120178117E-6, 0.0, 0.0004977986232042801,
    -0.00054433452313428117, -0.0098118148725695065, 0.0087511118183606421,
    0.0088455277311285125, -2.9533547446344884E-6, 0.00207140691842922,
    -0.0024209088334801133, -0.049399399069799392, -1.8382775243837413E-6, 0.0,
    0.00058161714037264925, -0.00064869904965210933, -0.012101757384877105,
    0.0096669820741694321, 0.0097666458637556651, -2.518893005147593E-6,
    0.001963664651726987, -0.002366060725434248, -0.052318140437762582,
    -1.9987987850364537E-6, 0.0, 0.000659063431035412, -0.000748871789323304,
    -0.014527060532707213, 0.010547025748619683, 0.010651896802992212,
    -2.0065938551231715E-6, 0.001818506702682665, -0.0022548175525283361,
    -0.054824381194625425, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0012695532666046046, 0.0012614649644668474, -4.9147034992385141E-7,
    0.000661152060853889, 0.00059926867687426413, -0.010090525388853994,
    -4.108413941257392E-8, -0.0, 2.9583840327175721E-5, 2.7917080030633092E-5,
    -0.00046758942049673376, -0.0024914106956025117, 0.00247632192409899,
    -8.2541688587772055E-7, 0.001184682708702449, 0.0011156616917483481,
    -0.01874011490435425, -1.0863323122110494E-7, -0.0, 8.2092055293751985E-5,
    7.9479829103131449E-5, -0.0013359371069954274, -0.0036664928564475114,
    0.0036453751234520864, -1.0245996058840363E-6, 0.0015798748977891,
    0.0015445783898720992, -0.026152250680421752, -1.9031706495576775E-7, -0.0,
    0.00015138580130198806, 0.00015026045109580116, -0.0025476522350122636,
    -0.0047958377903169263, 0.004769647604061223, -1.1118855621128E-6,
    0.001858146191513653, 0.0018843217689397281, -0.032501795700342631,
    -2.7606239387508953E-7, -0.0, 0.00023193555997525812, 0.00023581318888574605,
    -0.004053457684299786, -0.0058806046108294653, 0.005850349294839156,
    -1.1094246099937534E-6, 0.0020323405119140269, 0.0021358201848601993,
    -0.037939061261309553, -3.5794743021884567E-7, -0.0, 0.00031887641762686923,
    0.000331797754712711, -0.0058110517062647483, -0.0069220705895916747,
    0.0068888434830188952, -1.0380026339534872E-6, 0.0021161005597038597,
    0.0023023081639978373, -0.042593286582299723, -4.3004015816152706E-7, -0.0,
    0.00040803409001129783, 0.00043408605807850617, -0.0077841306806048661,
    -0.00792162280888058, 0.0078866130627975838, -9.1656271042831744E-7,
    0.0021233257008390362, 0.0023889796637635162, -0.0465756159186608,
    -4.8819660711098272E-7, -0.0, 0.0004959260127588678, 0.0005388511724380696,
    -0.0099415497124847318, -0.0088807454570414817, 0.008845227708386293,
    -7.6188061049177741E-7, 0.0020677166772267775, 0.0024026263887941277,
    -0.049981646338136829, -5.2983371442856193E-7, -0.0, 0.00057974181170554983,
    0.00064263808828658568, -0.012256601210188425, -0.0098010038114629636,
    0.0097663128788899062, -5.8837815475109482E-7, 0.0019624056305868648,
    0.0023512727699782606, -0.05289360881200713, -5.5368965812149222E-7, -0.0,
    0.00065730733167512789, 0.00074241635115996664, -0.014706394484422628,
    -0.01068402590213614, 0.010651521339345658, -4.0805610422789047E-7,
    0.0018196676147215572, 0.0022438180057086396, -0.055382236244244286, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012695532666046046, -0.0012614649644668474,
    4.9147034992385141E-7, -0.000661152060853889, -0.00059926867687426413,
    0.010090525388853994, 4.108413941257392E-8, 0.0, -2.9583840327175721E-5,
    -2.7917080030633092E-5, 0.00046758942049673376, 0.0024914106956025117,
    -0.00247632192409899, 8.2541688587772055E-7, -0.001184682708702449,
    -0.0011156616917483481, 0.01874011490435425, 1.0863323122110494E-7, 0.0,
    -8.2092055293751985E-5, -7.9479829103131449E-5, 0.0013359371069954274,
    0.0036664928564475114, -0.0036453751234520864, 1.0245996058840363E-6,
    -0.0015798748977891, -0.0015445783898720992, 0.026152250680421752,
    1.9031706495576775E-7, 0.0, -0.00015138580130198806, -0.00015026045109580116,
    0.0025476522350122636, 0.0047958377903169263, -0.004769647604061223,
    1.1118855621128E-6, -0.001858146191513653, -0.0018843217689397281,
    0.032501795700342631, 2.7606239387508953E-7, 0.0, -0.00023193555997525812,
    -0.00023581318888574605, 0.004053457684299786, 0.0058806046108294653,
    -0.005850349294839156, 1.1094246099937534E-6, -0.0020323405119140269,
    -0.0021358201848601993, 0.037939061261309553, 3.5794743021884567E-7, 0.0,
    -0.00031887641762686923, -0.000331797754712711, 0.0058110517062647483,
    0.0069220705895916747, -0.0068888434830188952, 1.0380026339534872E-6,
    -0.0021161005597038597, -0.0023023081639978373, 0.042593286582299723,
    4.3004015816152706E-7, 0.0, -0.00040803409001129783, -0.00043408605807850617,
    0.0077841306806048661, 0.00792162280888058, -0.0078866130627975838,
    9.1656271042831744E-7, -0.0021233257008390362, -0.0023889796637635162,
    0.0465756159186608, 4.8819660711098272E-7, 0.0, -0.0004959260127588678,
    -0.0005388511724380696, 0.0099415497124847318, 0.0088807454570414817,
    -0.008845227708386293, 7.6188061049177741E-7, -0.0020677166772267775,
    -0.0024026263887941277, 0.049981646338136829, 5.2983371442856193E-7, 0.0,
    -0.00057974181170554983, -0.00064263808828658568, 0.012256601210188425,
    0.0098010038114629636, -0.0097663128788899062, 5.8837815475109482E-7,
    -0.0019624056305868648, -0.0023512727699782606, 0.05289360881200713,
    5.5368965812149222E-7, 0.0, -0.00065730733167512789, -0.00074241635115996664,
    0.014706394484422628, 0.01068402590213614, -0.010651521339345658,
    4.0805610422789047E-7, -0.0018196676147215572, -0.0022438180057086396,
    0.055382236244244286, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0012696096671776815, -0.0012446526613791634, 1.2048980783339818E-6,
    -0.00061687493878965572, 0.000604388916839538, -0.010013122212772408,
    1.061142053024262E-7, -0.0, -2.7738064097358143E-5, 2.8131194615234076E-5,
    -0.00046405146086906513, -0.0024915257643369679, -0.0024456071173892982,
    2.1247019520100031E-6, -0.001110400382074021, 0.0011242475141241947,
    -0.0185985037284589, 2.9065780127038515E-7, -0.0, -7.7202747210466783E-5,
    8.0043067328803576E-5, -0.0013259669757548344, -0.0036666618923760419,
    -0.0036032986205452549, 2.7768451076723769E-6, -0.0014872789204611369,
    0.0015551285001931948, -0.025958946391363345, 5.2794670889513371E-7, -0.0,
    -0.00014278066784823295, 0.00015123748781122078, -0.0025289599716379783,
    -0.0047960523080654658, -0.0047184164476870728, 3.1836623697337032E-6,
    -0.0017566071659494602, 0.0018955296617734127, -0.032268423413024896,
    7.947158227066474E-7, -0.0, -0.00021935828064426944, 0.00023720881401214283,
    -0.004024309046723182, -0.0058808550090984416, -0.0057918691365830737,
    3.3709728783288505E-6, -0.0019291703801801081, 0.0021466000832686383,
    -0.037676203672976305, 1.0704021051550048E-6, -0.0, -0.00030239021505567247,
    0.00033356826583574059, -0.0057702133349057435, -0.0069223482746198026,
    -0.0068247485419489036, 3.3667969162570956E-6, -0.0020168117486492397,
    0.0023118071081922025, -0.042310383663998093, 1.3373066161163168E-6, -0.0,
    -0.00038793806963686344, 0.00043615094984864869, -0.0077308114442351354,
    -0.0079219217722854614, -0.0078182939754514839, 3.2002193969725195E-6,
    -0.0020318819770905627, 0.0023965776207408385, -0.04628091153918934,
    1.5806505315799603E-6, -0.0, -0.0004726837481841964, 0.00054110457356891018,
    -0.00987534043498621, -0.0088810633312691734, -0.0087738574773034289,
    2.9004068417137323E-6, -0.0019867714960031739, 0.0024079263864486521,
    -0.049682175849936561, 1.7885406225698851E-6, -0.0, -0.00055392146449373,
    0.00064495949846287716, -0.012177414670840884, -0.00980134244493379,
    -0.0096928710553760462, 2.4957794924191115E-6, -0.0018935246925263763,
    0.0023540830988579959, -0.0525952213573871, 1.9518596045854369E-6, -0.0,
    -0.000629532452593443, 0.00074468033165200063, -0.014614407270767573,
    -0.01068439151016165, -0.010576816527009201, 2.0133358318683243E-6,
    -0.0017635332403235359, 0.0022441284926873455, -0.055089645517679059, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012696096671776815, 0.0012446526613791634,
    -1.2048980783339818E-6, 0.00061687493878965572, -0.000604388916839538,
    0.010013122212772408, -1.061142053024262E-7, 0.0, 2.7738064097358143E-5,
    -2.8131194615234076E-5, 0.00046405146086906513, 0.0024915257643369679,
    0.0024456071173892982, -2.1247019520100031E-6, 0.001110400382074021,
    -0.0011242475141241947, 0.0185985037284589, -2.9065780127038515E-7, 0.0,
    7.7202747210466783E-5, -8.0043067328803576E-5, 0.0013259669757548344,
    0.0036666618923760419, 0.0036032986205452549, -2.7768451076723769E-6,
    0.0014872789204611369, -0.0015551285001931948, 0.025958946391363345,
    -5.2794670889513371E-7, 0.0, 0.00014278066784823295, -0.00015123748781122078,
    0.0025289599716379783, 0.0047960523080654658, 0.0047184164476870728,
    -3.1836623697337032E-6, 0.0017566071659494602, -0.0018955296617734127,
    0.032268423413024896, -7.947158227066474E-7, 0.0, 0.00021935828064426944,
    -0.00023720881401214283, 0.004024309046723182, 0.0058808550090984416,
    0.0057918691365830737, -3.3709728783288505E-6, 0.0019291703801801081,
    -0.0021466000832686383, 0.037676203672976305, -1.0704021051550048E-6, 0.0,
    0.00030239021505567247, -0.00033356826583574059, 0.0057702133349057435,
    0.0069223482746198026, 0.0068247485419489036, -3.3667969162570956E-6,
    0.0020168117486492397, -0.0023118071081922025, 0.042310383663998093,
    -1.3373066161163168E-6, 0.0, 0.00038793806963686344, -0.00043615094984864869,
    0.0077308114442351354, 0.0079219217722854614, 0.0078182939754514839,
    -3.2002193969725195E-6, 0.0020318819770905627, -0.0023965776207408385,
    0.04628091153918934, -1.5806505315799603E-6, 0.0, 0.0004726837481841964,
    -0.00054110457356891018, 0.00987534043498621, 0.0088810633312691734,
    0.0087738574773034289, -2.9004068417137323E-6, 0.0019867714960031739,
    -0.0024079263864486521, 0.049682175849936561, -1.7885406225698851E-6, 0.0,
    0.00055392146449373, -0.00064495949846287716, 0.012177414670840884,
    0.00980134244493379, 0.0096928710553760462, -2.4957794924191115E-6,
    0.0018935246925263763, -0.0023540830988579959, 0.0525952213573871,
    -1.9518596045854369E-6, 0.0, 0.000629532452593443, -0.00074468033165200063,
    0.014614407270767573, 0.01068439151016165, 0.010576816527009201,
    -2.0133358318683243E-6, 0.0017635332403235359, -0.0022441284926873455,
    0.055089645517679059, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.00030529986546997984, 0.0003338334845166563, 0.0016272457759424609,
    0.010095879326581595, -0.00962841988646662, 1.9968289075211972E-5,
    0.00015976171238131918, -0.0, 0.00045641357260640247,
    -0.00045145430417121844, 8.8871526588373336E-7, 0.0005823098471170404,
    0.00063341810018064781, 0.00319561609436146, 0.018268114616585909,
    -0.01803859036084203, 3.3691161826475776E-5, 0.00047350893515909706, -0.0,
    0.0012751859670041741, -0.0012909214591604154, 2.0948986856673945E-6,
    0.000814670276181542, 0.0008843862568521251, 0.0047073066248253916,
    0.024609246318060184, -0.025137413655179713, 3.1203297102974695E-5,
    0.00093567611205756871, -0.0, 0.0023679100819918647, -0.0024514858680225833,
    2.6081384223503403E-6, 0.00098951653059920169, 0.0010767590373366551,
    0.006164338961431883, 0.029250755199882041, -0.030878421197717981,
    4.9018235675699751E-6, 0.0015408922003214169, -0.0, 0.00365349870187017,
    -0.0038649919859937345, 1.0961461015921879E-6, 0.0010974219041171148,
    0.001204459974497518, 0.0075685858239313451, 0.032352235475444975,
    -0.035257746767706391, -5.049869976239119E-5, 0.0022839669617778016, -0.0,
    0.0050593412869733585, -0.0054640585237628759, -3.9818901276247412E-6,
    0.0011322529540262073, 0.00126479724508845, 0.0089217942746594447,
    0.034091626783814777, -0.038309389314708842, -0.00013807733707094791,
    0.0031598794663488727, -0.0, 0.0065220012033094894, -0.0071838424361534165,
    -1.4268973090405061E-5, 0.0010909512313288852, 0.0012579354533637762,
    0.010225606720339786, 0.034656613021452239, -0.040099975928457265,
    -0.00025887490703570455, 0.0041637685789327767, -0.0, 0.0079875132894543129,
    -0.0089635327622190931, -3.1413582267423173E-5, 0.0009732557371230151,
    0.0011863747625846881, 0.01148157956211133, 0.034237241880344847,
    -0.040723225205911692, -0.00041210875049080308, 0.0052909251911264048, -0.0,
    0.0094113431625520525, -0.010747564047527641, -5.6984629866741848E-5,
    0.00078138044572961069, 0.0010544517835316127, 0.012691199439518682,
    0.033019772709698705, -0.040294296715244246, -0.00059542286238290117,
    0.0065367859574520584, -0.0, 0.010758069055097354, -0.012486547927569579,
    -9.2399567410077549E-5, 0.00051966083909509291, 0.00086787343532694888,
    0.013855897084494804, 0.031181721980582281, -0.038944194286917144,
    -0.00080516186730605324, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00030529986546997984,
    -0.0003338334845166563, -0.0016272457759424609, -0.010095879326581595,
    0.00962841988646662, -1.9968289075211972E-5, -0.00015976171238131918, 0.0,
    -0.00045641357260640247, 0.00045145430417121844, -8.8871526588373336E-7,
    -0.0005823098471170404, -0.00063341810018064781, -0.00319561609436146,
    -0.018268114616585909, 0.01803859036084203, -3.3691161826475776E-5,
    -0.00047350893515909706, 0.0, -0.0012751859670041741, 0.0012909214591604154,
    -2.0948986856673945E-6, -0.000814670276181542, -0.0008843862568521251,
    -0.0047073066248253916, -0.024609246318060184, 0.025137413655179713,
    -3.1203297102974695E-5, -0.00093567611205756871, 0.0, -0.0023679100819918647,
    0.0024514858680225833, -2.6081384223503403E-6, -0.00098951653059920169,
    -0.0010767590373366551, -0.006164338961431883, -0.029250755199882041,
    0.030878421197717981, -4.9018235675699751E-6, -0.0015408922003214169, 0.0,
    -0.00365349870187017, 0.0038649919859937345, -1.0961461015921879E-6,
    -0.0010974219041171148, -0.001204459974497518, -0.0075685858239313451,
    -0.032352235475444975, 0.035257746767706391, 5.049869976239119E-5,
    -0.0022839669617778016, 0.0, -0.0050593412869733585, 0.0054640585237628759,
    3.9818901276247412E-6, -0.0011322529540262073, -0.00126479724508845,
    -0.0089217942746594447, -0.034091626783814777, 0.038309389314708842,
    0.00013807733707094791, -0.0031598794663488727, 0.0, -0.0065220012033094894,
    0.0071838424361534165, 1.4268973090405061E-5, -0.0010909512313288852,
    -0.0012579354533637762, -0.010225606720339786, -0.034656613021452239,
    0.040099975928457265, 0.00025887490703570455, -0.0041637685789327767, 0.0,
    -0.0079875132894543129, 0.0089635327622190931, 3.1413582267423173E-5,
    -0.0009732557371230151, -0.0011863747625846881, -0.01148157956211133,
    -0.034237241880344847, 0.040723225205911692, 0.00041210875049080308,
    -0.0052909251911264048, 0.0, -0.0094113431625520525, 0.010747564047527641,
    5.6984629866741848E-5, -0.00078138044572961069, -0.0010544517835316127,
    -0.012691199439518682, -0.033019772709698705, 0.040294296715244246,
    0.00059542286238290117, -0.0065367859574520584, 0.0, -0.010758069055097354,
    0.012486547927569579, 9.2399567410077549E-5, -0.00051966083909509291,
    -0.00086787343532694888, -0.013855897084494804, -0.031181721980582281,
    0.038944194286917144, 0.00080516186730605324, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, 0.0003085978519427282, -0.0003311639350801028,
    -0.0016397717327669317, -0.010016729807333194, -0.00973321029283748,
    0.00012133886391925418, -0.000160901216314366, -0.0, -0.00045309558164745913,
    -0.00045668118851722322, 5.2492564066251047E-6, 0.00058863008680985979,
    -0.0006283822477967854, -0.0032183922521895397, -0.018135112910129446,
    -0.01824710348893685, 0.00020482944694178134, -0.00047669695753936884, -0.0,
    -0.0012664473234098102, -0.0013064650006839142, 1.3169646615031344E-5,
    0.00082349402557022218, -0.00087734196808529489, -0.0047380113170466809,
    -0.024445572166740356, -0.025445250925098618, 0.00022470448364874526,
    -0.00094159016201326225, -0.0, -0.002352739234487753, -0.0024821363336122904,
    2.0132137786931123E-5, 0.0010001111395152393, -0.001068075190137597,
    -0.006200674731595592, -0.029076778151213969, -0.0312780464791799,
    0.00016446194554072178, -0.0015499838478689851, -0.0, -0.0036318223568057393,
    -0.0039150912323147515, 2.1885482762796503E-5, 0.0011088740929178741,
    -0.0011944804452286933, -0.0076083408069271318, -0.032185058943394559,
    -0.035738827049569308, 1.5490330208720829E-5, -0.0022964730754338556, -0.0,
    -0.0050318542305135792, -0.0055373711009734129, 1.3917512324261771E-5,
    0.0011435053985372932, -0.0012538129751428152, -0.0089628941576592978,
    -0.0339448469322367, -0.038859248623980422, -0.00022424998459234159,
    -0.0031758381601364309, -0.0, -0.0064899888997729136, -0.0072834515054639951,
    -8.2477727708233679E-6, 0.0011008414048028214, -0.0012461646264303172,
    -0.010266156938835216, -0.034540266290474478, -0.040704128340488352,
    -0.00055147369065479933, -0.0041830388879746608, -0.0, -0.007952675973915347,
    -0.0090917639519725278, -4.881338390846249E-5, 0.000980555851003107,
    -0.0011739507486908244, -0.011519897693125459, -0.034157912270742156,
    -0.04136595406342846, -0.00095873257450591973, -0.0053132095051605845, -0.0,
    -0.0093756286647182115, -0.010905938783917879, -0.00011152827817206869,
    0.00078483729483612278, -0.0010414182098122126, -0.012725838026734184,
    -0.032980828693682233, -0.040959249560220512, -0.0014354820052808373,
    -0.0065616542771546587, -0.0, -0.010723520080563657, -0.012675766329395708,
    -0.0001995570575128905, 0.00051803438378578842, -0.00085418552395767286,
    -0.013885657365089258, -0.0311836529289259, -0.03961496625493191,
    -0.0019690439806877261, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003085978519427282,
    0.0003311639350801028, 0.0016397717327669317, 0.010016729807333194,
    0.00973321029283748, -0.00012133886391925418, 0.000160901216314366, 0.0,
    0.00045309558164745913, 0.00045668118851722322, -5.2492564066251047E-6,
    -0.00058863008680985979, 0.0006283822477967854, 0.0032183922521895397,
    0.018135112910129446, 0.01824710348893685, -0.00020482944694178134,
    0.00047669695753936884, 0.0, 0.0012664473234098102, 0.0013064650006839142,
    -1.3169646615031344E-5, -0.00082349402557022218, 0.00087734196808529489,
    0.0047380113170466809, 0.024445572166740356, 0.025445250925098618,
    -0.00022470448364874526, 0.00094159016201326225, 0.0, 0.002352739234487753,
    0.0024821363336122904, -2.0132137786931123E-5, -0.0010001111395152393,
    0.001068075190137597, 0.006200674731595592, 0.029076778151213969,
    0.0312780464791799, -0.00016446194554072178, 0.0015499838478689851, 0.0,
    0.0036318223568057393, 0.0039150912323147515, -2.1885482762796503E-5,
    -0.0011088740929178741, 0.0011944804452286933, 0.0076083408069271318,
    0.032185058943394559, 0.035738827049569308, -1.5490330208720829E-5,
    0.0022964730754338556, 0.0, 0.0050318542305135792, 0.0055373711009734129,
    -1.3917512324261771E-5, -0.0011435053985372932, 0.0012538129751428152,
    0.0089628941576592978, 0.0339448469322367, 0.038859248623980422,
    0.00022424998459234159, 0.0031758381601364309, 0.0, 0.0064899888997729136,
    0.0072834515054639951, 8.2477727708233679E-6, -0.0011008414048028214,
    0.0012461646264303172, 0.010266156938835216, 0.034540266290474478,
    0.040704128340488352, 0.00055147369065479933, 0.0041830388879746608, 0.0,
    0.007952675973915347, 0.0090917639519725278, 4.881338390846249E-5,
    -0.000980555851003107, 0.0011739507486908244, 0.011519897693125459,
    0.034157912270742156, 0.04136595406342846, 0.00095873257450591973,
    0.0053132095051605845, 0.0, 0.0093756286647182115, 0.010905938783917879,
    0.00011152827817206869, -0.00078483729483612278, 0.0010414182098122126,
    0.012725838026734184, 0.032980828693682233, 0.040959249560220512,
    0.0014354820052808373, 0.0065616542771546587, 0.0, 0.010723520080563657,
    0.012675766329395708, 0.0001995570575128905, -0.00051803438378578842,
    0.00085418552395767286, 0.013885657365089258, 0.0311836529289259,
    0.03961496625493191, 0.0019690439806877261, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.00031123210707097854, -0.00034685067214162421,
    0.0016669966780750718, -0.010488718210195844, 0.009815125609793791,
    -1.9369401290124933E-5, 0.00016328522433269307, -0.0, -0.0004740211255838913,
    0.00046013527261865408, -8.6373307795876751E-7, -0.00059360723947685318,
    -0.00065808064063290611, 0.003266150962948319, -0.018973116065572389,
    0.01838553363299, -3.2687057199799978E-5, 0.00048320543214996567, -0.0,
    -0.0013240939673380958, 0.0013156046906443392, -2.0286572896842304E-6,
    -0.00083045848829467158, -0.00091878555034845255, 0.0048001427031885034,
    -0.025550769455285192, 0.025616834189164807, -2.994390164987917E-5,
    0.00095337799969377377, -0.0, -0.0024581850118577204, 0.0024980914587003789,
    -2.4903069241135171E-6, -0.001008685976182244, -0.0011186276022600574,
    0.0062716411255935743, -0.030359577040774126, 0.03146217544462989,
    -3.4727473552552878E-6, 0.0015676859043920102, -0.0, -0.003791926896395772,
    0.0039380404704328978, -9.1887427096666306E-7, -0.0011186973588787033,
    -0.0012513274708795446, 0.0076832860344932851, -0.033566496902699,
    0.03591812322189622, 5.2084305529902415E-5, 0.0023202739163798993, -0.0,
    -0.00524981258578292, 0.0055667106871260825, 4.2275900297739748E-6,
    -0.0011542591859876848, -0.0013141238534375523, 0.0090376708107083939,
    -0.035357390424583912, 0.039019818641710086, 0.00013987718253174883,
    0.0032055431905615652, -0.0, -0.0067659118636060429, 0.00731797184028401,
    1.4596574211682426E-5, -0.0011122733190472591, -0.0013072226412829322,
    0.010337327455780462, -0.035928084569207305, 0.040835628493351359,
    0.00026100875500465327, 0.00421814447188071, -0.0, -0.0082841726473576443,
    0.0091298252526599358, 3.184381896411362E-5, -0.00099249304752223018,
    -0.001233254144221502, 0.011584713828990128, -0.035476707458955849,
    0.041461492510087218, 0.00041474470477947608, 0.0053529701368354773, -0.0,
    -0.0097583711481279891, 0.010945638424909161, 5.7547508485361425E-5,
    -0.00079719353433612154, -0.001096753309927306, 0.01278220313907634,
    -0.034197304164265578, 0.041015156825371005, 0.00059876079517478891,
    0.0066051452967111641, -0.0, -0.011151774212327922, 0.01271509205191892,
    9.3135513961620667E-5, -0.00053081081348862352, -0.00090367455570401051,
    0.013932075679618374, -0.032274699830771719, 0.0396304645046293,
    0.00080941573334415815, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00031123210707097854,
    0.00034685067214162421, -0.0016669966780750718, 0.010488718210195844,
    -0.009815125609793791, 1.9369401290124933E-5, -0.00016328522433269307, 0.0,
    0.0004740211255838913, -0.00046013527261865408, 8.6373307795876751E-7,
    0.00059360723947685318, 0.00065808064063290611, -0.003266150962948319,
    0.018973116065572389, -0.01838553363299, 3.2687057199799978E-5,
    -0.00048320543214996567, 0.0, 0.0013240939673380958, -0.0013156046906443392,
    2.0286572896842304E-6, 0.00083045848829467158, 0.00091878555034845255,
    -0.0048001427031885034, 0.025550769455285192, -0.025616834189164807,
    2.994390164987917E-5, -0.00095337799969377377, 0.0, 0.0024581850118577204,
    -0.0024980914587003789, 2.4903069241135171E-6, 0.001008685976182244,
    0.0011186276022600574, -0.0062716411255935743, 0.030359577040774126,
    -0.03146217544462989, 3.4727473552552878E-6, -0.0015676859043920102, 0.0,
    0.003791926896395772, -0.0039380404704328978, 9.1887427096666306E-7,
    0.0011186973588787033, 0.0012513274708795446, -0.0076832860344932851,
    0.033566496902699, -0.03591812322189622, -5.2084305529902415E-5,
    -0.0023202739163798993, 0.0, 0.00524981258578292, -0.0055667106871260825,
    -4.2275900297739748E-6, 0.0011542591859876848, 0.0013141238534375523,
    -0.0090376708107083939, 0.035357390424583912, -0.039019818641710086,
    -0.00013987718253174883, -0.0032055431905615652, 0.0, 0.0067659118636060429,
    -0.00731797184028401, -1.4596574211682426E-5, 0.0011122733190472591,
    0.0013072226412829322, -0.010337327455780462, 0.035928084569207305,
    -0.040835628493351359, -0.00026100875500465327, -0.00421814447188071, 0.0,
    0.0082841726473576443, -0.0091298252526599358, -3.184381896411362E-5,
    0.00099249304752223018, 0.001233254144221502, -0.011584713828990128,
    0.035476707458955849, -0.041461492510087218, -0.00041474470477947608,
    -0.0053529701368354773, 0.0, 0.0097583711481279891, -0.010945638424909161,
    -5.7547508485361425E-5, 0.00079719353433612154, 0.001096753309927306,
    -0.01278220313907634, 0.034197304164265578, -0.041015156825371005,
    -0.00059876079517478891, -0.0066051452967111641, 0.0, 0.011151774212327922,
    -0.01271509205191892, -9.3135513961620667E-5, 0.00053081081348862352,
    0.00090367455570401051, -0.013932075679618374, 0.032274699830771719,
    -0.0396304645046293, -0.00080941573334415815, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0003026656103417289, 0.00034418112270507054,
    -0.0016544707212506008, 0.010409568690947432, 0.0095465045695103112,
    -0.00012193775170434118, -0.0001621457203996462, -0.0,
    0.00047070313462494752, 0.00044800022006978769, -5.2742385945500694E-6,
    -0.00057733269445004571, 0.00065304478824904349, -0.003243374805120239,
    0.018840114359115909, 0.017900160216788887, -0.00020583355156845708,
    -0.00048001740976969377, -0.0, 0.0013153553237437309, 0.0012817817691999909,
    -1.3235888011014505E-5, -0.00080770581345709089, 0.000911741261581622,
    -0.0047694380109672141, 0.025387095303965344, 0.024965830391113532,
    -0.00022596387910184073, -0.00094746394973808, -0.0, 0.0024430141643536065,
    0.0024355307429344956, -2.0249969285167939E-5, -0.00098094169393219462,
    0.0011099437550609991, -0.0062353053554298652, 0.030185599992106023,
    0.030694292232267995, -0.00016589102175303643, -0.0015585942568444417, -0.0,
    0.003770250551331338, 0.0038420427478755887, -2.2062754593422019E-5,
    -0.0010875986381562825, 0.0012413479416107196, -0.0076435310514974984,
    0.033399320370648543, 0.035078450595379479, -1.7075935976232034E-5,
    -0.0023077678027238454, -0.0, 0.0052223255293231356, 0.0054347189376102081,
    -1.4163212226411E-5, -0.0011214991665758119, 0.0013031395834919174,
    -0.00899657092770854, 0.035210610573005785, 0.038148819296979178,
    0.00022245013913154056, -0.003189584496774007, -0.0, 0.00673389956006946,
    0.0071493221013334031, 7.9201716495460042E-6, -0.0010795193170844435,
    0.001295451814349473, -0.010296777237285032, 0.0358117378382295,
    0.039968475775594259, 0.00054933984268585039, -0.0041988741628388258, -0.0,
    0.0082493353318186715, 0.0089254714615316852, 4.8383147211772036E-5,
    -0.00096131854060388735, 0.0012208301303276382, -0.011546395697976,
    0.035397377849353123, 0.040627686759252934, 0.00095609662021724651,
    -0.0053306858228012958, -0.0, 0.0097226566502941411, 0.010707864406536361,
    0.00011096539955344909, -0.00076902420622960662, 0.001083719736207906,
    -0.012747564551860838, 0.034158360148249071, 0.040238389450093753,
    0.0014321440724889493, -0.0065802769770085621, -0.0, 0.011117225237794216,
    0.012447222205046368, 0.00019882111096134733, -0.00050688440939225185,
    0.00088998664433473482, -0.013902315399023918, 0.032276630779115308,
    0.038928696037219754, 0.0019647901146496211, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0003026656103417289, -0.00034418112270507054, 0.0016544707212506008,
    -0.010409568690947432, -0.0095465045695103112, 0.00012193775170434118,
    0.0001621457203996462, 0.0, -0.00047070313462494752, -0.00044800022006978769,
    5.2742385945500694E-6, 0.00057733269445004571, -0.00065304478824904349,
    0.003243374805120239, -0.018840114359115909, -0.017900160216788887,
    0.00020583355156845708, 0.00048001740976969377, 0.0, -0.0013153553237437309,
    -0.0012817817691999909, 1.3235888011014505E-5, 0.00080770581345709089,
    -0.000911741261581622, 0.0047694380109672141, -0.025387095303965344,
    -0.024965830391113532, 0.00022596387910184073, 0.00094746394973808, 0.0,
    -0.0024430141643536065, -0.0024355307429344956, 2.0249969285167939E-5,
    0.00098094169393219462, -0.0011099437550609991, 0.0062353053554298652,
    -0.030185599992106023, -0.030694292232267995, 0.00016589102175303643,
    0.0015585942568444417, 0.0, -0.003770250551331338, -0.0038420427478755887,
    2.2062754593422019E-5, 0.0010875986381562825, -0.0012413479416107196,
    0.0076435310514974984, -0.033399320370648543, -0.035078450595379479,
    1.7075935976232034E-5, 0.0023077678027238454, 0.0, -0.0052223255293231356,
    -0.0054347189376102081, 1.4163212226411E-5, 0.0011214991665758119,
    -0.0013031395834919174, 0.00899657092770854, -0.035210610573005785,
    -0.038148819296979178, -0.00022245013913154056, 0.003189584496774007, 0.0,
    -0.00673389956006946, -0.0071493221013334031, -7.9201716495460042E-6,
    0.0010795193170844435, -0.001295451814349473, 0.010296777237285032,
    -0.0358117378382295, -0.039968475775594259, -0.00054933984268585039,
    0.0041988741628388258, 0.0, -0.0082493353318186715, -0.0089254714615316852,
    -4.8383147211772036E-5, 0.00096131854060388735, -0.0012208301303276382,
    0.011546395697976, -0.035397377849353123, -0.040627686759252934,
    -0.00095609662021724651, 0.0053306858228012958, 0.0, -0.0097226566502941411,
    -0.010707864406536361, -0.00011096539955344909, 0.00076902420622960662,
    -0.001083719736207906, 0.012747564551860838, -0.034158360148249071,
    -0.040238389450093753, -0.0014321440724889493, 0.0065802769770085621, 0.0,
    -0.011117225237794216, -0.012447222205046368, -0.00019882111096134733,
    0.00050688440939225185, -0.00088998664433473482, 0.013902315399023918,
    -0.032276630779115308, -0.038928696037219754, -0.0019647901146496211, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0012391951215142167,
    0.0012446059948862914, -4.2404022064644467E-7, 0.00061228609723886591,
    0.00060373405900552592, 0.0098620476003080347, -3.56873367857697E-8, -0.0,
    2.7547316305628068E-5, 2.8116033294348984E-5, 0.00045713081438921826,
    -0.00243609109297792, 0.0024455107681744352, -7.1661287547623481E-7,
    0.0011027519799713995, 0.001123629499998789, 0.018321522895185779,
    -9.4796134122044776E-8, -0.0, 7.6703751748538636E-5, 8.0030098298072608E-5,
    0.001306437692283552, -0.0035907939902378285, 0.0036031556402020496,
    -8.9551310871232046E-7, 0.0014779632866533097, 0.0015551499854078413,
    0.025580147558417393, -1.6687771959976964E-7, -0.0, 0.00014192121256889791,
    0.0001512713076419929, 0.0024923054756228317, -0.0047036459300071653,
    0.0047182329219214812, -9.7913980905713911E-7, 0.0017468378029659839,
    0.0018966737483913807, 0.031810529942263861, -2.4331881229464419E-7, -0.0,
    0.00021814177066851553, 0.00023735479426096364, 0.0039671094815349021,
    -0.0057752117885488813, 0.0057916516880133443, -9.856800244895193E-7,
    0.0019199551973666891, 0.0021492127284515397, 0.037160322209045436,
    -3.1728651454929717E-7, -0.0, 0.00030086501023722577, 0.00033390549424166144,
    0.0056900592765109477, -0.0068062617695294888, 0.0068245023869756526,
    -9.3245963721354037E-7, 0.0020089398663594303, 0.0023160907906922667,
    0.041755793543627011, -3.836163581852502E-7, -0.0, 0.000386186464770553,
    0.00043676509883602789, 0.0076262082394893977, -0.00779775057120359,
    0.0078180215257652574, -8.3545204403112146E-7, 0.0020259223205064169,
    0.0024025944579429137, 0.045704901080689711, -4.3865862667314595E-7, -0.0,
    0.00047081113773878394, 0.00054208112200342584, 0.0097456055950709865,
    -0.0087507939441329521, 0.0087735574545612111, -7.0893270757104988E-7,
    0.0019830812548007315, 0.0024156088358255222, 0.049099928581599117,
    -4.8009681261472288E-7, -0.0, 0.00055204613582663037, 0.00064637763947580017,
    0.012022570845529568, -0.0096666434406986069, 0.0096925380705102891,
    -5.6526464202263841E-7, 0.0018922656713862541, 0.0023632503965544467,
    0.052019752983142542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0012391951215142167, -0.0012446059948862914,
    4.2404022064644467E-7, -0.00061228609723886591, -0.00060373405900552592,
    -0.0098620476003080347, 3.56873367857697E-8, 0.0, -2.7547316305628068E-5,
    -2.8116033294348984E-5, -0.00045713081438921826, 0.00243609109297792,
    -0.0024455107681744352, 7.1661287547623481E-7, -0.0011027519799713995,
    -0.001123629499998789, -0.018321522895185779, 9.4796134122044776E-8, 0.0,
    -7.6703751748538636E-5, -8.0030098298072608E-5, -0.001306437692283552,
    0.0035907939902378285, -0.0036031556402020496, 8.9551310871232046E-7,
    -0.0014779632866533097, -0.0015551499854078413, -0.025580147558417393,
    1.6687771959976964E-7, 0.0, -0.00014192121256889791, -0.0001512713076419929,
    -0.0024923054756228317, 0.0047036459300071653, -0.0047182329219214812,
    9.7913980905713911E-7, -0.0017468378029659839, -0.0018966737483913807,
    -0.031810529942263861, 2.4331881229464419E-7, 0.0, -0.00021814177066851553,
    -0.00023735479426096364, -0.0039671094815349021, 0.0057752117885488813,
    -0.0057916516880133443, 9.856800244895193E-7, -0.0019199551973666891,
    -0.0021492127284515397, -0.037160322209045436, 3.1728651454929717E-7, 0.0,
    -0.00030086501023722577, -0.00033390549424166144, -0.0056900592765109477,
    0.0068062617695294888, -0.0068245023869756526, 9.3245963721354037E-7,
    -0.0020089398663594303, -0.0023160907906922667, -0.041755793543627011,
    3.836163581852502E-7, 0.0, -0.000386186464770553, -0.00043676509883602789,
    -0.0076262082394893977, 0.00779775057120359, -0.0078180215257652574,
    8.3545204403112146E-7, -0.0020259223205064169, -0.0024025944579429137,
    -0.045704901080689711, 4.3865862667314595E-7, 0.0, -0.00047081113773878394,
    -0.00054208112200342584, -0.0097456055950709865, 0.0087507939441329521,
    -0.0087735574545612111, 7.0893270757104988E-7, -0.0019830812548007315,
    -0.0024156088358255222, -0.049099928581599117, 4.8009681261472288E-7, 0.0,
    -0.00055204613582663037, -0.00064637763947580017, -0.012022570845529568,
    0.0096666434406986069, -0.0096925380705102891, 5.6526464202263841E-7,
    -0.0018922656713862541, -0.0023632503965544467, -0.052019752983142542, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0012392515220872938,
    -0.0012615116309597195, 1.2723282076113984E-6, -0.00066574090240467871,
    0.00060885429897081559, 0.00993945077638962, 1.115110079292313E-7, -0.0,
    -2.9774588118905792E-5, 2.8330147878950711E-5, 0.00046066877401688695,
    -0.0024362061617123764, -0.0024764182733138535, 2.2335059624115065E-6,
    -0.00119233111080507, 0.0011322153223746652, 0.01846313407108113,
    3.0449489836944779E-7, -0.0, -8.2591050755680118E-5, 8.0593336523746863E-5,
    0.0013164078235241451, -0.003590963026166359, -0.0036455181037952922,
    2.9059316048441165E-6, -0.0015891905315969265, 0.0015657000957289779,
    0.025773451847475804, 5.5138605425113653E-7, -0.0, -0.00015224525658132307,
    0.00015224834435741656, 0.002510997738997117, -0.0047038604477557047,
    -0.0047698311298268146, 3.3164081227893921E-6, -0.0018679155544971287,
    0.0019078816412251157, 0.032043902229581596, 8.2745940428709995E-7, -0.0,
    -0.00023315206995101203, 0.00023875041938736682, 0.0039962581191115062,
    -0.0057754621868178575, -0.0058505667434088854, 3.494717463833115E-6,
    -0.0020415556947274453, 0.0021599926268600364, 0.037423179797378685,
    1.1110630208245628E-6, -0.0, -0.00032040162244531594, 0.00033567600536470014,
    0.0057308976478699526, -0.0068065394545576176, -0.0068890896379921462,
    3.4723399129970735E-6, -0.0021239724419936687, 0.0023255897348866952,
    0.042038696461928649, 1.3837304160926059E-6, -0.0, -0.00040978569487760822,
    0.00043882999060618232, 0.0076795274758591284, -0.00779804953460847,
    -0.0078868855124838121, 3.2813300633697461E-6, -0.0021292853574231816,
    0.0024101924149203019, 0.045999605460161179, 1.6301885120178117E-6, -0.0,
    -0.0004977986232042801, 0.00054433452313428117, 0.0098118148725695065,
    -0.0087511118183606421, -0.0088455277311285125, 2.9533547446344884E-6,
    -0.00207140691842922, 0.0024209088334801133, 0.049399399069799392,
    1.8382775243837413E-6, -0.0, -0.00058161714037264925, 0.00064869904965210933,
    0.012101757384877105, -0.0096669820741694321, -0.0097666458637556651,
    2.518893005147593E-6, -0.001963664651726987, 0.002366060725434248,
    0.052318140437762582, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, -1.115110079292313E-7, 0.0, 2.9774588118905792E-5,
    -2.8330147878950711E-5, -0.00046066877401688695, 0.0024362061617123764,
    0.0024764182733138535, -2.2335059624115065E-6, 0.00119233111080507,
    -0.0011322153223746652, -0.01846313407108113, -3.0449489836944779E-7, 0.0,
    8.2591050755680118E-5, -8.0593336523746863E-5, -0.0013164078235241451,
    0.003590963026166359, 0.0036455181037952922, -2.9059316048441165E-6,
    0.0015891905315969265, -0.0015657000957289779, -0.025773451847475804,
    -5.5138605425113653E-7, 0.0, 0.00015224525658132307, -0.00015224834435741656,
    -0.002510997738997117, 0.0047038604477557047, 0.0047698311298268146,
    -3.3164081227893921E-6, 0.0018679155544971287, -0.0019078816412251157,
    -0.032043902229581596, -8.2745940428709995E-7, 0.0, 0.00023315206995101203,
    -0.00023875041938736682, -0.0039962581191115062, 0.0057754621868178575,
    0.0058505667434088854, -3.494717463833115E-6, 0.0020415556947274453,
    -0.0021599926268600364, -0.037423179797378685, -1.1110630208245628E-6, 0.0,
    0.00032040162244531594, -0.00033567600536470014, -0.0057308976478699526,
    0.0068065394545576176, 0.0068890896379921462, -3.4723399129970735E-6,
    0.0021239724419936687, -0.0023255897348866952, -0.042038696461928649,
    -1.3837304160926059E-6, 0.0, 0.00040978569487760822, -0.00043882999060618232,
    -0.0076795274758591284, 0.00779804953460847, 0.0078868855124838121,
    -3.2813300633697461E-6, 0.0021292853574231816, -0.0024101924149203019,
    -0.045999605460161179, -1.6301885120178117E-6, 0.0, 0.0004977986232042801,
    -0.00054433452313428117, -0.0098118148725695065, 0.0087511118183606421,
    0.0088455277311285125, -2.9533547446344884E-6, 0.00207140691842922,
    -0.0024209088334801133, -0.049399399069799392, -1.8382775243837413E-6, 0.0,
    0.00058161714037264925, -0.00064869904965210933, -0.012101757384877105,
    0.0096669820741694321, 0.0097666458637556651, -2.518893005147593E-6,
    0.001963664651726987, -0.002366060725434248, -0.052318140437762582, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0012695532666046046,
    0.0012614649644668474, -4.9147034992385141E-7, 0.000661152060853889,
    0.00059926867687426413, -0.010090525388853994, -4.108413941257392E-8, -0.0,
    2.9583840327175721E-5, 2.7917080030633092E-5, -0.00046758942049673376,
    -0.0024914106956025117, 0.00247632192409899, -8.2541688587772055E-7,
    0.001184682708702449, 0.0011156616917483481, -0.01874011490435425,
    -1.0863323122110494E-7, -0.0, 8.2092055293751985E-5, 7.9479829103131449E-5,
    -0.0013359371069954274, -0.0036664928564475114, 0.0036453751234520864,
    -1.0245996058840363E-6, 0.0015798748977891, 0.0015445783898720992,
    -0.026152250680421752, -1.9031706495576775E-7, -0.0, 0.00015138580130198806,
    0.00015026045109580116, -0.0025476522350122636, -0.0047958377903169263,
    0.004769647604061223, -1.1118855621128E-6, 0.001858146191513653,
    0.0018843217689397281, -0.032501795700342631, -2.7606239387508953E-7, -0.0,
    0.00023193555997525812, 0.00023581318888574605, -0.004053457684299786,
    -0.0058806046108294653, 0.005850349294839156, -1.1094246099937534E-6,
    0.0020323405119140269, 0.0021358201848601993, -0.037939061261309553,
    -3.5794743021884567E-7, -0.0, 0.00031887641762686923, 0.000331797754712711,
    -0.0058110517062647483, -0.0069220705895916747, 0.0068888434830188952,
    -1.0380026339534872E-6, 0.0021161005597038597, 0.0023023081639978373,
    -0.042593286582299723, -4.3004015816152706E-7, -0.0, 0.00040803409001129783,
    0.00043408605807850617, -0.0077841306806048661, -0.00792162280888058,
    0.0078866130627975838, -9.1656271042831744E-7, 0.0021233257008390362,
    0.0023889796637635162, -0.0465756159186608, -4.8819660711098272E-7, -0.0,
    0.0004959260127588678, 0.0005388511724380696, -0.0099415497124847318,
    -0.0088807454570414817, 0.008845227708386293, -7.6188061049177741E-7,
    0.0020677166772267775, 0.0024026263887941277, -0.049981646338136829,
    -5.2983371442856193E-7, -0.0, 0.00057974181170554983, 0.00064263808828658568,
    -0.012256601210188425, -0.0098010038114629636, 0.0097663128788899062,
    -5.8837815475109482E-7, 0.0019624056305868648, 0.0023512727699782606,
    -0.05289360881200713, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0012695532666046046, -0.0012614649644668474,
    4.9147034992385141E-7, -0.000661152060853889, -0.00059926867687426413,
    0.010090525388853994, 4.108413941257392E-8, 0.0, -2.9583840327175721E-5,
    -2.7917080030633092E-5, 0.00046758942049673376, 0.0024914106956025117,
    -0.00247632192409899, 8.2541688587772055E-7, -0.001184682708702449,
    -0.0011156616917483481, 0.01874011490435425, 1.0863323122110494E-7, 0.0,
    -8.2092055293751985E-5, -7.9479829103131449E-5, 0.0013359371069954274,
    0.0036664928564475114, -0.0036453751234520864, 1.0245996058840363E-6,
    -0.0015798748977891, -0.0015445783898720992, 0.026152250680421752,
    1.9031706495576775E-7, 0.0, -0.00015138580130198806, -0.00015026045109580116,
    0.0025476522350122636, 0.0047958377903169263, -0.004769647604061223,
    1.1118855621128E-6, -0.001858146191513653, -0.0018843217689397281,
    0.032501795700342631, 2.7606239387508953E-7, 0.0, -0.00023193555997525812,
    -0.00023581318888574605, 0.004053457684299786, 0.0058806046108294653,
    -0.005850349294839156, 1.1094246099937534E-6, -0.0020323405119140269,
    -0.0021358201848601993, 0.037939061261309553, 3.5794743021884567E-7, 0.0,
    -0.00031887641762686923, -0.000331797754712711, 0.0058110517062647483,
    0.0069220705895916747, -0.0068888434830188952, 1.0380026339534872E-6,
    -0.0021161005597038597, -0.0023023081639978373, 0.042593286582299723,
    4.3004015816152706E-7, 0.0, -0.00040803409001129783, -0.00043408605807850617,
    0.0077841306806048661, 0.00792162280888058, -0.0078866130627975838,
    9.1656271042831744E-7, -0.0021233257008390362, -0.0023889796637635162,
    0.0465756159186608, 4.8819660711098272E-7, 0.0, -0.0004959260127588678,
    -0.0005388511724380696, 0.0099415497124847318, 0.0088807454570414817,
    -0.008845227708386293, 7.6188061049177741E-7, -0.0020677166772267775,
    -0.0024026263887941277, 0.049981646338136829, 5.2983371442856193E-7, 0.0,
    -0.00057974181170554983, -0.00064263808828658568, 0.012256601210188425,
    0.0098010038114629636, -0.0097663128788899062, 5.8837815475109482E-7,
    -0.0019624056305868648, -0.0023512727699782606, 0.05289360881200713, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0012696096671776815,
    -0.0012446526613791634, 1.2048980783339818E-6, -0.00061687493878965572,
    0.000604388916839538, -0.010013122212772408, 1.061142053024262E-7, -0.0,
    -2.7738064097358143E-5, 2.8131194615234076E-5, -0.00046405146086906513,
    -0.0024915257643369679, -0.0024456071173892982, 2.1247019520100031E-6,
    -0.001110400382074021, 0.0011242475141241947, -0.0185985037284589,
    2.9065780127038515E-7, -0.0, -7.7202747210466783E-5, 8.0043067328803576E-5,
    -0.0013259669757548344, -0.0036666618923760419, -0.0036032986205452549,
    2.7768451076723769E-6, -0.0014872789204611369, 0.0015551285001931948,
    -0.025958946391363345, 5.2794670889513371E-7, -0.0, -0.00014278066784823295,
    0.00015123748781122078, -0.0025289599716379783, -0.0047960523080654658,
    -0.0047184164476870728, 3.1836623697337032E-6, -0.0017566071659494602,
    0.0018955296617734127, -0.032268423413024896, 7.947158227066474E-7, -0.0,
    -0.00021935828064426944, 0.00023720881401214283, -0.004024309046723182,
    -0.0058808550090984416, -0.0057918691365830737, 3.3709728783288505E-6,
    -0.0019291703801801081, 0.0021466000832686383, -0.037676203672976305,
    1.0704021051550048E-6, -0.0, -0.00030239021505567247, 0.00033356826583574059,
    -0.0057702133349057435, -0.0069223482746198026, -0.0068247485419489036,
    3.3667969162570956E-6, -0.0020168117486492397, 0.0023118071081922025,
    -0.042310383663998093, 1.3373066161163168E-6, -0.0, -0.00038793806963686344,
    0.00043615094984864869, -0.0077308114442351354, -0.0079219217722854614,
    -0.0078182939754514839, 3.2002193969725195E-6, -0.0020318819770905627,
    0.0023965776207408385, -0.04628091153918934, 1.5806505315799603E-6, -0.0,
    -0.0004726837481841964, 0.00054110457356891018, -0.00987534043498621,
    -0.0088810633312691734, -0.0087738574773034289, 2.9004068417137323E-6,
    -0.0019867714960031739, 0.0024079263864486521, -0.049682175849936561,
    1.7885406225698851E-6, -0.0, -0.00055392146449373, 0.00064495949846287716,
    -0.012177414670840884, -0.00980134244493379, -0.0096928710553760462,
    2.4957794924191115E-6, -0.0018935246925263763, 0.0023540830988579959,
    -0.0525952213573871, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0012696096671776815, 0.0012446526613791634,
    -1.2048980783339818E-6, 0.00061687493878965572, -0.000604388916839538,
    0.010013122212772408, -1.061142053024262E-7, 0.0, 2.7738064097358143E-5,
    -2.8131194615234076E-5, 0.00046405146086906513, 0.0024915257643369679,
    0.0024456071173892982, -2.1247019520100031E-6, 0.001110400382074021,
    -0.0011242475141241947, 0.0185985037284589, -2.9065780127038515E-7, 0.0,
    7.7202747210466783E-5, -8.0043067328803576E-5, 0.0013259669757548344,
    0.0036666618923760419, 0.0036032986205452549, -2.7768451076723769E-6,
    0.0014872789204611369, -0.0015551285001931948, 0.025958946391363345,
    -5.2794670889513371E-7, 0.0, 0.00014278066784823295, -0.00015123748781122078,
    0.0025289599716379783, 0.0047960523080654658, 0.0047184164476870728,
    -3.1836623697337032E-6, 0.0017566071659494602, -0.0018955296617734127,
    0.032268423413024896, -7.947158227066474E-7, 0.0, 0.00021935828064426944,
    -0.00023720881401214283, 0.004024309046723182, 0.0058808550090984416,
    0.0057918691365830737, -3.3709728783288505E-6, 0.0019291703801801081,
    -0.0021466000832686383, 0.037676203672976305, -1.0704021051550048E-6, 0.0,
    0.00030239021505567247, -0.00033356826583574059, 0.0057702133349057435,
    0.0069223482746198026, 0.0068247485419489036, -3.3667969162570956E-6,
    0.0020168117486492397, -0.0023118071081922025, 0.042310383663998093,
    -1.3373066161163168E-6, 0.0, 0.00038793806963686344, -0.00043615094984864869,
    0.0077308114442351354, 0.0079219217722854614, 0.0078182939754514839,
    -3.2002193969725195E-6, 0.0020318819770905627, -0.0023965776207408385,
    0.04628091153918934, -1.5806505315799603E-6, 0.0, 0.0004726837481841964,
    -0.00054110457356891018, 0.00987534043498621, 0.0088810633312691734,
    0.0087738574773034289, -2.9004068417137323E-6, 0.0019867714960031739,
    -0.0024079263864486521, 0.049682175849936561, -1.7885406225698851E-6, 0.0,
    0.00055392146449373, -0.00064495949846287716, 0.012177414670840884,
    0.00980134244493379, 0.0096928710553760462, -2.4957794924191115E-6,
    0.0018935246925263763, -0.0023540830988579959, 0.0525952213573871, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.00030529986546997984,
    0.0003338334845166563, 0.0016272457759424609, 0.010095879326581595,
    -0.00962841988646662, 1.9968289075211972E-5, 0.00015976171238131918, -0.0,
    0.00045641357260640247, -0.00045145430417121844, 8.8871526588373336E-7,
    0.0005823098471170404, 0.00063341810018064781, 0.00319561609436146,
    0.018268114616585909, -0.01803859036084203, 3.3691161826475776E-5,
    0.00047350893515909706, -0.0, 0.0012751859670041741, -0.0012909214591604154,
    2.0948986856673945E-6, 0.000814670276181542, 0.0008843862568521251,
    0.0047073066248253916, 0.024609246318060184, -0.025137413655179713,
    3.1203297102974695E-5, 0.00093567611205756871, -0.0, 0.0023679100819918647,
    -0.0024514858680225833, 2.6081384223503403E-6, 0.00098951653059920169,
    0.0010767590373366551, 0.006164338961431883, 0.029250755199882041,
    -0.030878421197717981, 4.9018235675699751E-6, 0.0015408922003214169, -0.0,
    0.00365349870187017, -0.0038649919859937345, 1.0961461015921879E-6,
    0.0010974219041171148, 0.001204459974497518, 0.0075685858239313451,
    0.032352235475444975, -0.035257746767706391, -5.049869976239119E-5,
    0.0022839669617778016, -0.0, 0.0050593412869733585, -0.0054640585237628759,
    -3.9818901276247412E-6, 0.0011322529540262073, 0.00126479724508845,
    0.0089217942746594447, 0.034091626783814777, -0.038309389314708842,
    -0.00013807733707094791, 0.0031598794663488727, -0.0, 0.0065220012033094894,
    -0.0071838424361534165, -1.4268973090405061E-5, 0.0010909512313288852,
    0.0012579354533637762, 0.010225606720339786, 0.034656613021452239,
    -0.040099975928457265, -0.00025887490703570455, 0.0041637685789327767, -0.0,
    0.0079875132894543129, -0.0089635327622190931, -3.1413582267423173E-5,
    0.0009732557371230151, 0.0011863747625846881, 0.01148157956211133,
    0.034237241880344847, -0.040723225205911692, -0.00041210875049080308,
    0.0052909251911264048, -0.0, 0.0094113431625520525, -0.010747564047527641,
    -5.6984629866741848E-5, 0.00078138044572961069, 0.0010544517835316127,
    0.012691199439518682, 0.033019772709698705, -0.040294296715244246,
    -0.00059542286238290117, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00030529986546997984,
    -0.0003338334845166563, -0.0016272457759424609, -0.010095879326581595,
    0.00962841988646662, -1.9968289075211972E-5, -0.00015976171238131918, 0.0,
    -0.00045641357260640247, 0.00045145430417121844, -8.8871526588373336E-7,
    -0.0005823098471170404, -0.00063341810018064781, -0.00319561609436146,
    -0.018268114616585909, 0.01803859036084203, -3.3691161826475776E-5,
    -0.00047350893515909706, 0.0, -0.0012751859670041741, 0.0012909214591604154,
    -2.0948986856673945E-6, -0.000814670276181542, -0.0008843862568521251,
    -0.0047073066248253916, -0.024609246318060184, 0.025137413655179713,
    -3.1203297102974695E-5, -0.00093567611205756871, 0.0, -0.0023679100819918647,
    0.0024514858680225833, -2.6081384223503403E-6, -0.00098951653059920169,
    -0.0010767590373366551, -0.006164338961431883, -0.029250755199882041,
    0.030878421197717981, -4.9018235675699751E-6, -0.0015408922003214169, 0.0,
    -0.00365349870187017, 0.0038649919859937345, -1.0961461015921879E-6,
    -0.0010974219041171148, -0.001204459974497518, -0.0075685858239313451,
    -0.032352235475444975, 0.035257746767706391, 5.049869976239119E-5,
    -0.0022839669617778016, 0.0, -0.0050593412869733585, 0.0054640585237628759,
    3.9818901276247412E-6, -0.0011322529540262073, -0.00126479724508845,
    -0.0089217942746594447, -0.034091626783814777, 0.038309389314708842,
    0.00013807733707094791, -0.0031598794663488727, 0.0, -0.0065220012033094894,
    0.0071838424361534165, 1.4268973090405061E-5, -0.0010909512313288852,
    -0.0012579354533637762, -0.010225606720339786, -0.034656613021452239,
    0.040099975928457265, 0.00025887490703570455, -0.0041637685789327767, 0.0,
    -0.0079875132894543129, 0.0089635327622190931, 3.1413582267423173E-5,
    -0.0009732557371230151, -0.0011863747625846881, -0.01148157956211133,
    -0.034237241880344847, 0.040723225205911692, 0.00041210875049080308,
    -0.0052909251911264048, 0.0, -0.0094113431625520525, 0.010747564047527641,
    5.6984629866741848E-5, -0.00078138044572961069, -0.0010544517835316127,
    -0.012691199439518682, -0.033019772709698705, 0.040294296715244246,
    0.00059542286238290117, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.0003085978519427282, -0.0003311639350801028, -0.0016397717327669317,
    -0.010016729807333194, -0.00973321029283748, 0.00012133886391925418,
    -0.000160901216314366, -0.0, -0.00045309558164745913,
    -0.00045668118851722322, 5.2492564066251047E-6, 0.00058863008680985979,
    -0.0006283822477967854, -0.0032183922521895397, -0.018135112910129446,
    -0.01824710348893685, 0.00020482944694178134, -0.00047669695753936884, -0.0,
    -0.0012664473234098102, -0.0013064650006839142, 1.3169646615031344E-5,
    0.00082349402557022218, -0.00087734196808529489, -0.0047380113170466809,
    -0.024445572166740356, -0.025445250925098618, 0.00022470448364874526,
    -0.00094159016201326225, -0.0, -0.002352739234487753, -0.0024821363336122904,
    2.0132137786931123E-5, 0.0010001111395152393, -0.001068075190137597,
    -0.006200674731595592, -0.029076778151213969, -0.0312780464791799,
    0.00016446194554072178, -0.0015499838478689851, -0.0, -0.0036318223568057393,
    -0.0039150912323147515, 2.1885482762796503E-5, 0.0011088740929178741,
    -0.0011944804452286933, -0.0076083408069271318, -0.032185058943394559,
    -0.035738827049569308, 1.5490330208720829E-5, -0.0022964730754338556, -0.0,
    -0.0050318542305135792, -0.0055373711009734129, 1.3917512324261771E-5,
    0.0011435053985372932, -0.0012538129751428152, -0.0089628941576592978,
    -0.0339448469322367, -0.038859248623980422, -0.00022424998459234159,
    -0.0031758381601364309, -0.0, -0.0064899888997729136, -0.0072834515054639951,
    -8.2477727708233679E-6, 0.0011008414048028214, -0.0012461646264303172,
    -0.010266156938835216, -0.034540266290474478, -0.040704128340488352,
    -0.00055147369065479933, -0.0041830388879746608, -0.0, -0.007952675973915347,
    -0.0090917639519725278, -4.881338390846249E-5, 0.000980555851003107,
    -0.0011739507486908244, -0.011519897693125459, -0.034157912270742156,
    -0.04136595406342846, -0.00095873257450591973, -0.0053132095051605845, -0.0,
    -0.0093756286647182115, -0.010905938783917879, -0.00011152827817206869,
    0.00078483729483612278, -0.0010414182098122126, -0.012725838026734184,
    -0.032980828693682233, -0.040959249560220512, -0.0014354820052808373, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0003085978519427282, 0.0003311639350801028, 0.0016397717327669317,
    0.010016729807333194, 0.00973321029283748, -0.00012133886391925418,
    0.000160901216314366, 0.0, 0.00045309558164745913, 0.00045668118851722322,
    -5.2492564066251047E-6, -0.00058863008680985979, 0.0006283822477967854,
    0.0032183922521895397, 0.018135112910129446, 0.01824710348893685,
    -0.00020482944694178134, 0.00047669695753936884, 0.0, 0.0012664473234098102,
    0.0013064650006839142, -1.3169646615031344E-5, -0.00082349402557022218,
    0.00087734196808529489, 0.0047380113170466809, 0.024445572166740356,
    0.025445250925098618, -0.00022470448364874526, 0.00094159016201326225, 0.0,
    0.002352739234487753, 0.0024821363336122904, -2.0132137786931123E-5,
    -0.0010001111395152393, 0.001068075190137597, 0.006200674731595592,
    0.029076778151213969, 0.0312780464791799, -0.00016446194554072178,
    0.0015499838478689851, 0.0, 0.0036318223568057393, 0.0039150912323147515,
    -2.1885482762796503E-5, -0.0011088740929178741, 0.0011944804452286933,
    0.0076083408069271318, 0.032185058943394559, 0.035738827049569308,
    -1.5490330208720829E-5, 0.0022964730754338556, 0.0, 0.0050318542305135792,
    0.0055373711009734129, -1.3917512324261771E-5, -0.0011435053985372932,
    0.0012538129751428152, 0.0089628941576592978, 0.0339448469322367,
    0.038859248623980422, 0.00022424998459234159, 0.0031758381601364309, 0.0,
    0.0064899888997729136, 0.0072834515054639951, 8.2477727708233679E-6,
    -0.0011008414048028214, 0.0012461646264303172, 0.010266156938835216,
    0.034540266290474478, 0.040704128340488352, 0.00055147369065479933,
    0.0041830388879746608, 0.0, 0.007952675973915347, 0.0090917639519725278,
    4.881338390846249E-5, -0.000980555851003107, 0.0011739507486908244,
    0.011519897693125459, 0.034157912270742156, 0.04136595406342846,
    0.00095873257450591973, 0.0053132095051605845, 0.0, 0.0093756286647182115,
    0.010905938783917879, 0.00011152827817206869, -0.00078483729483612278,
    0.0010414182098122126, 0.012725838026734184, 0.032980828693682233,
    0.040959249560220512, 0.0014354820052808373, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.00031123210707097854, -0.00034685067214162421,
    0.0016669966780750718, -0.010488718210195844, 0.009815125609793791,
    -1.9369401290124933E-5, 0.00016328522433269307, -0.0, -0.0004740211255838913,
    0.00046013527261865408, -8.6373307795876751E-7, -0.00059360723947685318,
    -0.00065808064063290611, 0.003266150962948319, -0.018973116065572389,
    0.01838553363299, -3.2687057199799978E-5, 0.00048320543214996567, -0.0,
    -0.0013240939673380958, 0.0013156046906443392, -2.0286572896842304E-6,
    -0.00083045848829467158, -0.00091878555034845255, 0.0048001427031885034,
    -0.025550769455285192, 0.025616834189164807, -2.994390164987917E-5,
    0.00095337799969377377, -0.0, -0.0024581850118577204, 0.0024980914587003789,
    -2.4903069241135171E-6, -0.001008685976182244, -0.0011186276022600574,
    0.0062716411255935743, -0.030359577040774126, 0.03146217544462989,
    -3.4727473552552878E-6, 0.0015676859043920102, -0.0, -0.003791926896395772,
    0.0039380404704328978, -9.1887427096666306E-7, -0.0011186973588787033,
    -0.0012513274708795446, 0.0076832860344932851, -0.033566496902699,
    0.03591812322189622, 5.2084305529902415E-5, 0.0023202739163798993, -0.0,
    -0.00524981258578292, 0.0055667106871260825, 4.2275900297739748E-6,
    -0.0011542591859876848, -0.0013141238534375523, 0.0090376708107083939,
    -0.035357390424583912, 0.039019818641710086, 0.00013987718253174883,
    0.0032055431905615652, -0.0, -0.0067659118636060429, 0.00731797184028401,
    1.4596574211682426E-5, -0.0011122733190472591, -0.0013072226412829322,
    0.010337327455780462, -0.035928084569207305, 0.040835628493351359,
    0.00026100875500465327, 0.00421814447188071, -0.0, -0.0082841726473576443,
    0.0091298252526599358, 3.184381896411362E-5, -0.00099249304752223018,
    -0.001233254144221502, 0.011584713828990128, -0.035476707458955849,
    0.041461492510087218, 0.00041474470477947608, 0.0053529701368354773, -0.0,
    -0.0097583711481279891, 0.010945638424909161, 5.7547508485361425E-5,
    -0.00079719353433612154, -0.001096753309927306, 0.01278220313907634,
    -0.034197304164265578, 0.041015156825371005, 0.00059876079517478891, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031123210707097854, 0.00034685067214162421, -0.0016669966780750718,
    0.010488718210195844, -0.009815125609793791, 1.9369401290124933E-5,
    -0.00016328522433269307, 0.0, 0.0004740211255838913, -0.00046013527261865408,
    8.6373307795876751E-7, 0.00059360723947685318, 0.00065808064063290611,
    -0.003266150962948319, 0.018973116065572389, -0.01838553363299,
    3.2687057199799978E-5, -0.00048320543214996567, 0.0, 0.0013240939673380958,
    -0.0013156046906443392, 2.0286572896842304E-6, 0.00083045848829467158,
    0.00091878555034845255, -0.0048001427031885034, 0.025550769455285192,
    -0.025616834189164807, 2.994390164987917E-5, -0.00095337799969377377, 0.0,
    0.0024581850118577204, -0.0024980914587003789, 2.4903069241135171E-6,
    0.001008685976182244, 0.0011186276022600574, -0.0062716411255935743,
    0.030359577040774126, -0.03146217544462989, 3.4727473552552878E-6,
    -0.0015676859043920102, 0.0, 0.003791926896395772, -0.0039380404704328978,
    9.1887427096666306E-7, 0.0011186973588787033, 0.0012513274708795446,
    -0.0076832860344932851, 0.033566496902699, -0.03591812322189622,
    -5.2084305529902415E-5, -0.0023202739163798993, 0.0, 0.00524981258578292,
    -0.0055667106871260825, -4.2275900297739748E-6, 0.0011542591859876848,
    0.0013141238534375523, -0.0090376708107083939, 0.035357390424583912,
    -0.039019818641710086, -0.00013987718253174883, -0.0032055431905615652, 0.0,
    0.0067659118636060429, -0.00731797184028401, -1.4596574211682426E-5,
    0.0011122733190472591, 0.0013072226412829322, -0.010337327455780462,
    0.035928084569207305, -0.040835628493351359, -0.00026100875500465327,
    -0.00421814447188071, 0.0, 0.0082841726473576443, -0.0091298252526599358,
    -3.184381896411362E-5, 0.00099249304752223018, 0.001233254144221502,
    -0.011584713828990128, 0.035476707458955849, -0.041461492510087218,
    -0.00041474470477947608, -0.0053529701368354773, 0.0, 0.0097583711481279891,
    -0.010945638424909161, -5.7547508485361425E-5, 0.00079719353433612154,
    0.001096753309927306, -0.01278220313907634, 0.034197304164265578,
    -0.041015156825371005, -0.00059876079517478891, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0003026656103417289, 0.00034418112270507054,
    -0.0016544707212506008, 0.010409568690947432, 0.0095465045695103112,
    -0.00012193775170434118, -0.0001621457203996462, -0.0,
    0.00047070313462494752, 0.00044800022006978769, -5.2742385945500694E-6,
    -0.00057733269445004571, 0.00065304478824904349, -0.003243374805120239,
    0.018840114359115909, 0.017900160216788887, -0.00020583355156845708,
    -0.00048001740976969377, -0.0, 0.0013153553237437309, 0.0012817817691999909,
    -1.3235888011014505E-5, -0.00080770581345709089, 0.000911741261581622,
    -0.0047694380109672141, 0.025387095303965344, 0.024965830391113532,
    -0.00022596387910184073, -0.00094746394973808, -0.0, 0.0024430141643536065,
    0.0024355307429344956, -2.0249969285167939E-5, -0.00098094169393219462,
    0.0011099437550609991, -0.0062353053554298652, 0.030185599992106023,
    0.030694292232267995, -0.00016589102175303643, -0.0015585942568444417, -0.0,
    0.003770250551331338, 0.0038420427478755887, -2.2062754593422019E-5,
    -0.0010875986381562825, 0.0012413479416107196, -0.0076435310514974984,
    0.033399320370648543, 0.035078450595379479, -1.7075935976232034E-5,
    -0.0023077678027238454, -0.0, 0.0052223255293231356, 0.0054347189376102081,
    -1.4163212226411E-5, -0.0011214991665758119, 0.0013031395834919174,
    -0.00899657092770854, 0.035210610573005785, 0.038148819296979178,
    0.00022245013913154056, -0.003189584496774007, -0.0, 0.00673389956006946,
    0.0071493221013334031, 7.9201716495460042E-6, -0.0010795193170844435,
    0.001295451814349473, -0.010296777237285032, 0.0358117378382295,
    0.039968475775594259, 0.00054933984268585039, -0.0041988741628388258, -0.0,
    0.0082493353318186715, 0.0089254714615316852, 4.8383147211772036E-5,
    -0.00096131854060388735, 0.0012208301303276382, -0.011546395697976,
    0.035397377849353123, 0.040627686759252934, 0.00095609662021724651,
    -0.0053306858228012958, -0.0, 0.0097226566502941411, 0.010707864406536361,
    0.00011096539955344909, -0.00076902420622960662, 0.001083719736207906,
    -0.012747564551860838, 0.034158360148249071, 0.040238389450093753,
    0.0014321440724889493, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0003026656103417289, -0.00034418112270507054,
    0.0016544707212506008, -0.010409568690947432, -0.0095465045695103112,
    0.00012193775170434118, 0.0001621457203996462, 0.0, -0.00047070313462494752,
    -0.00044800022006978769, 5.2742385945500694E-6, 0.00057733269445004571,
    -0.00065304478824904349, 0.003243374805120239, -0.018840114359115909,
    -0.017900160216788887, 0.00020583355156845708, 0.00048001740976969377, 0.0,
    -0.0013153553237437309, -0.0012817817691999909, 1.3235888011014505E-5,
    0.00080770581345709089, -0.000911741261581622, 0.0047694380109672141,
    -0.025387095303965344, -0.024965830391113532, 0.00022596387910184073,
    0.00094746394973808, 0.0, -0.0024430141643536065, -0.0024355307429344956,
    2.0249969285167939E-5, 0.00098094169393219462, -0.0011099437550609991,
    0.0062353053554298652, -0.030185599992106023, -0.030694292232267995,
    0.00016589102175303643, 0.0015585942568444417, 0.0, -0.003770250551331338,
    -0.0038420427478755887, 2.2062754593422019E-5, 0.0010875986381562825,
    -0.0012413479416107196, 0.0076435310514974984, -0.033399320370648543,
    -0.035078450595379479, 1.7075935976232034E-5, 0.0023077678027238454, 0.0,
    -0.0052223255293231356, -0.0054347189376102081, 1.4163212226411E-5,
    0.0011214991665758119, -0.0013031395834919174, 0.00899657092770854,
    -0.035210610573005785, -0.038148819296979178, -0.00022245013913154056,
    0.003189584496774007, 0.0, -0.00673389956006946, -0.0071493221013334031,
    -7.9201716495460042E-6, 0.0010795193170844435, -0.001295451814349473,
    0.010296777237285032, -0.0358117378382295, -0.039968475775594259,
    -0.00054933984268585039, 0.0041988741628388258, 0.0, -0.0082493353318186715,
    -0.0089254714615316852, -4.8383147211772036E-5, 0.00096131854060388735,
    -0.0012208301303276382, 0.011546395697976, -0.035397377849353123,
    -0.040627686759252934, -0.00095609662021724651, 0.0053306858228012958, 0.0,
    -0.0097226566502941411, -0.010707864406536361, -0.00011096539955344909,
    0.00076902420622960662, -0.001083719736207906, 0.012747564551860838,
    -0.034158360148249071, -0.040238389450093753, -0.0014321440724889493, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T h[2016]{ -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0012391951215142167, 0.0012446059948862914, -4.2404022064644467E-7,
    0.00061228609723886591, 0.00060373405900552592, 0.0098620476003080347,
    -3.56873367857697E-8, -0.0, 2.7547316305628068E-5, 2.8116033294348984E-5,
    0.00045713081438921826, -0.00243609109297792, 0.0024455107681744352,
    -7.1661287547623481E-7, 0.0011027519799713995, 0.001123629499998789,
    0.018321522895185779, -9.4796134122044776E-8, -0.0, 7.6703751748538636E-5,
    8.0030098298072608E-5, 0.001306437692283552, -0.0035907939902378285,
    0.0036031556402020496, -8.9551310871232046E-7, 0.0014779632866533097,
    0.0015551499854078413, 0.025580147558417393, -1.6687771959976964E-7, -0.0,
    0.00014192121256889791, 0.0001512713076419929, 0.0024923054756228317,
    -0.0047036459300071653, 0.0047182329219214812, -9.7913980905713911E-7,
    0.0017468378029659839, 0.0018966737483913807, 0.031810529942263861,
    -2.4331881229464419E-7, -0.0, 0.00021814177066851553, 0.00023735479426096364,
    0.0039671094815349021, -0.0057752117885488813, 0.0057916516880133443,
    -9.856800244895193E-7, 0.0019199551973666891, 0.0021492127284515397,
    0.037160322209045436, -3.1728651454929717E-7, -0.0, 0.00030086501023722577,
    0.00033390549424166144, 0.0056900592765109477, -0.0068062617695294888,
    0.0068245023869756526, -9.3245963721354037E-7, 0.0020089398663594303,
    0.0023160907906922667, 0.041755793543627011, -3.836163581852502E-7, -0.0,
    0.000386186464770553, 0.00043676509883602789, 0.0076262082394893977,
    -0.00779775057120359, 0.0078180215257652574, -8.3545204403112146E-7,
    0.0020259223205064169, 0.0024025944579429137, 0.045704901080689711,
    -4.3865862667314595E-7, -0.0, 0.00047081113773878394, 0.00054208112200342584,
    0.0097456055950709865, -0.0087507939441329521, 0.0087735574545612111,
    -7.0893270757104988E-7, 0.0019830812548007315, 0.0024156088358255222,
    0.049099928581599117, -4.8009681261472288E-7, -0.0, 0.00055204613582663037,
    0.00064637763947580017, 0.012022570845529568, -0.0096666434406986069,
    0.0096925380705102891, -5.6526464202263841E-7, 0.0018922656713862541,
    0.0023632503965544467, 0.052019752983142542, -5.0675047767049444E-7, -0.0,
    0.00062777635323315868, 0.00074660780883124942, 0.014435073319052159,
    -0.010546660140594175, 0.010576441063362649, -4.1479808097306436E-7,
    0.0017646941523624278, 0.0022545070655495664, 0.054531790468060191, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0012391951215142167, -0.0012446059948862914,
    4.2404022064644467E-7, -0.00061228609723886591, -0.00060373405900552592,
    -0.0098620476003080347, 3.56873367857697E-8, 0.0, -2.7547316305628068E-5,
    -2.8116033294348984E-5, -0.00045713081438921826, 0.00243609109297792,
    -0.0024455107681744352, 7.1661287547623481E-7, -0.0011027519799713995,
    -0.001123629499998789, -0.018321522895185779, 9.4796134122044776E-8, 0.0,
    -7.6703751748538636E-5, -8.0030098298072608E-5, -0.001306437692283552,
    0.0035907939902378285, -0.0036031556402020496, 8.9551310871232046E-7,
    -0.0014779632866533097, -0.0015551499854078413, -0.025580147558417393,
    1.6687771959976964E-7, 0.0, -0.00014192121256889791, -0.0001512713076419929,
    -0.0024923054756228317, 0.0047036459300071653, -0.0047182329219214812,
    9.7913980905713911E-7, -0.0017468378029659839, -0.0018966737483913807,
    -0.031810529942263861, 2.4331881229464419E-7, 0.0, -0.00021814177066851553,
    -0.00023735479426096364, -0.0039671094815349021, 0.0057752117885488813,
    -0.0057916516880133443, 9.856800244895193E-7, -0.0019199551973666891,
    -0.0021492127284515397, -0.037160322209045436, 3.1728651454929717E-7, 0.0,
    -0.00030086501023722577, -0.00033390549424166144, -0.0056900592765109477,
    0.0068062617695294888, -0.0068245023869756526, 9.3245963721354037E-7,
    -0.0020089398663594303, -0.0023160907906922667, -0.041755793543627011,
    3.836163581852502E-7, 0.0, -0.000386186464770553, -0.00043676509883602789,
    -0.0076262082394893977, 0.00779775057120359, -0.0078180215257652574,
    8.3545204403112146E-7, -0.0020259223205064169, -0.0024025944579429137,
    -0.045704901080689711, 4.3865862667314595E-7, 0.0, -0.00047081113773878394,
    -0.00054208112200342584, -0.0097456055950709865, 0.0087507939441329521,
    -0.0087735574545612111, 7.0893270757104988E-7, -0.0019830812548007315,
    -0.0024156088358255222, -0.049099928581599117, 4.8009681261472288E-7, 0.0,
    -0.00055204613582663037, -0.00064637763947580017, -0.012022570845529568,
    0.0096666434406986069, -0.0096925380705102891, 5.6526464202263841E-7,
    -0.0018922656713862541, -0.0023632503965544467, -0.052019752983142542,
    5.0675047767049444E-7, 0.0, -0.00062777635323315868, -0.00074660780883124942,
    -0.014435073319052159, 0.010546660140594175, -0.010576441063362649,
    4.1479808097306436E-7, -0.0017646941523624278, -0.0022545070655495664,
    -0.054531790468060191, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0012392515220872938, -0.0012615116309597195, 1.2723282076113984E-6,
    -0.00066574090240467871, 0.00060885429897081559, 0.00993945077638962,
    1.115110079292313E-7, -0.0, -2.9774588118905792E-5, 2.8330147878950711E-5,
    0.00046066877401688695, -0.0024362061617123764, -0.0024764182733138535,
    2.2335059624115065E-6, -0.00119233111080507, 0.0011322153223746652,
    0.01846313407108113, 3.0449489836944779E-7, -0.0, -8.2591050755680118E-5,
    8.0593336523746863E-5, 0.0013164078235241451, -0.003590963026166359,
    -0.0036455181037952922, 2.9059316048441165E-6, -0.0015891905315969265,
    0.0015657000957289779, 0.025773451847475804, 5.5138605425113653E-7, -0.0,
    -0.00015224525658132307, 0.00015224834435741656, 0.002510997738997117,
    -0.0047038604477557047, -0.0047698311298268146, 3.3164081227893921E-6,
    -0.0018679155544971287, 0.0019078816412251157, 0.032043902229581596,
    8.2745940428709995E-7, -0.0, -0.00023315206995101203, 0.00023875041938736682,
    0.0039962581191115062, -0.0057754621868178575, -0.0058505667434088854,
    3.494717463833115E-6, -0.0020415556947274453, 0.0021599926268600364,
    0.037423179797378685, 1.1110630208245628E-6, -0.0, -0.00032040162244531594,
    0.00033567600536470014, 0.0057308976478699526, -0.0068065394545576176,
    -0.0068890896379921462, 3.4723399129970735E-6, -0.0021239724419936687,
    0.0023255897348866952, 0.042038696461928649, 1.3837304160926059E-6, -0.0,
    -0.00040978569487760822, 0.00043882999060618232, 0.0076795274758591284,
    -0.00779804953460847, -0.0078868855124838121, 3.2813300633697461E-6,
    -0.0021292853574231816, 0.0024101924149203019, 0.045999605460161179,
    1.6301885120178117E-6, -0.0, -0.0004977986232042801, 0.00054433452313428117,
    0.0098118148725695065, -0.0087511118183606421, -0.0088455277311285125,
    2.9533547446344884E-6, -0.00207140691842922, 0.0024209088334801133,
    0.049399399069799392, 1.8382775243837413E-6, -0.0, -0.00058161714037264925,
    0.00064869904965210933, 0.012101757384877105, -0.0096669820741694321,
    -0.0097666458637556651, 2.518893005147593E-6, -0.001963664651726987,
    0.002366060725434248, 0.052318140437762582, 1.9987987850364537E-6, -0.0,
    -0.000659063431035412, 0.000748871789323304, 0.014527060532707213,
    -0.010547025748619683, -0.010651896802992212, 2.0065938551231715E-6,
    -0.001818506702682665, 0.0022548175525283361, 0.054824381194625425, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, -1.115110079292313E-7, 0.0, 2.9774588118905792E-5,
    -2.8330147878950711E-5, -0.00046066877401688695, 0.0024362061617123764,
    0.0024764182733138535, -2.2335059624115065E-6, 0.00119233111080507,
    -0.0011322153223746652, -0.01846313407108113, -3.0449489836944779E-7, 0.0,
    8.2591050755680118E-5, -8.0593336523746863E-5, -0.0013164078235241451,
    0.003590963026166359, 0.0036455181037952922, -2.9059316048441165E-6,
    0.0015891905315969265, -0.0015657000957289779, -0.025773451847475804,
    -5.5138605425113653E-7, 0.0, 0.00015224525658132307, -0.00015224834435741656,
    -0.002510997738997117, 0.0047038604477557047, 0.0047698311298268146,
    -3.3164081227893921E-6, 0.0018679155544971287, -0.0019078816412251157,
    -0.032043902229581596, -8.2745940428709995E-7, 0.0, 0.00023315206995101203,
    -0.00023875041938736682, -0.0039962581191115062, 0.0057754621868178575,
    0.0058505667434088854, -3.494717463833115E-6, 0.0020415556947274453,
    -0.0021599926268600364, -0.037423179797378685, -1.1110630208245628E-6, 0.0,
    0.00032040162244531594, -0.00033567600536470014, -0.0057308976478699526,
    0.0068065394545576176, 0.0068890896379921462, -3.4723399129970735E-6,
    0.0021239724419936687, -0.0023255897348866952, -0.042038696461928649,
    -1.3837304160926059E-6, 0.0, 0.00040978569487760822, -0.00043882999060618232,
    -0.0076795274758591284, 0.00779804953460847, 0.0078868855124838121,
    -3.2813300633697461E-6, 0.0021292853574231816, -0.0024101924149203019,
    -0.045999605460161179, -1.6301885120178117E-6, 0.0, 0.0004977986232042801,
    -0.00054433452313428117, -0.0098118148725695065, 0.0087511118183606421,
    0.0088455277311285125, -2.9533547446344884E-6, 0.00207140691842922,
    -0.0024209088334801133, -0.049399399069799392, -1.8382775243837413E-6, 0.0,
    0.00058161714037264925, -0.00064869904965210933, -0.012101757384877105,
    0.0096669820741694321, 0.0097666458637556651, -2.518893005147593E-6,
    0.001963664651726987, -0.002366060725434248, -0.052318140437762582,
    -1.9987987850364537E-6, 0.0, 0.000659063431035412, -0.000748871789323304,
    -0.014527060532707213, 0.010547025748619683, 0.010651896802992212,
    -2.0065938551231715E-6, 0.001818506702682665, -0.0022548175525283361,
    -0.054824381194625425, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0012695532666046046, 0.0012614649644668474, -4.9147034992385141E-7,
    0.000661152060853889, 0.00059926867687426413, -0.010090525388853994,
    -4.108413941257392E-8, -0.0, 2.9583840327175721E-5, 2.7917080030633092E-5,
    -0.00046758942049673376, -0.0024914106956025117, 0.00247632192409899,
    -8.2541688587772055E-7, 0.001184682708702449, 0.0011156616917483481,
    -0.01874011490435425, -1.0863323122110494E-7, -0.0, 8.2092055293751985E-5,
    7.9479829103131449E-5, -0.0013359371069954274, -0.0036664928564475114,
    0.0036453751234520864, -1.0245996058840363E-6, 0.0015798748977891,
    0.0015445783898720992, -0.026152250680421752, -1.9031706495576775E-7, -0.0,
    0.00015138580130198806, 0.00015026045109580116, -0.0025476522350122636,
    -0.0047958377903169263, 0.004769647604061223, -1.1118855621128E-6,
    0.001858146191513653, 0.0018843217689397281, -0.032501795700342631,
    -2.7606239387508953E-7, -0.0, 0.00023193555997525812, 0.00023581318888574605,
    -0.004053457684299786, -0.0058806046108294653, 0.005850349294839156,
    -1.1094246099937534E-6, 0.0020323405119140269, 0.0021358201848601993,
    -0.037939061261309553, -3.5794743021884567E-7, -0.0, 0.00031887641762686923,
    0.000331797754712711, -0.0058110517062647483, -0.0069220705895916747,
    0.0068888434830188952, -1.0380026339534872E-6, 0.0021161005597038597,
    0.0023023081639978373, -0.042593286582299723, -4.3004015816152706E-7, -0.0,
    0.00040803409001129783, 0.00043408605807850617, -0.0077841306806048661,
    -0.00792162280888058, 0.0078866130627975838, -9.1656271042831744E-7,
    0.0021233257008390362, 0.0023889796637635162, -0.0465756159186608,
    -4.8819660711098272E-7, -0.0, 0.0004959260127588678, 0.0005388511724380696,
    -0.0099415497124847318, -0.0088807454570414817, 0.008845227708386293,
    -7.6188061049177741E-7, 0.0020677166772267775, 0.0024026263887941277,
    -0.049981646338136829, -5.2983371442856193E-7, -0.0, 0.00057974181170554983,
    0.00064263808828658568, -0.012256601210188425, -0.0098010038114629636,
    0.0097663128788899062, -5.8837815475109482E-7, 0.0019624056305868648,
    0.0023512727699782606, -0.05289360881200713, -5.5368965812149222E-7, -0.0,
    0.00065730733167512789, 0.00074241635115996664, -0.014706394484422628,
    -0.01068402590213614, 0.010651521339345658, -4.0805610422789047E-7,
    0.0018196676147215572, 0.0022438180057086396, -0.055382236244244286, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012695532666046046, -0.0012614649644668474,
    4.9147034992385141E-7, -0.000661152060853889, -0.00059926867687426413,
    0.010090525388853994, 4.108413941257392E-8, 0.0, -2.9583840327175721E-5,
    -2.7917080030633092E-5, 0.00046758942049673376, 0.0024914106956025117,
    -0.00247632192409899, 8.2541688587772055E-7, -0.001184682708702449,
    -0.0011156616917483481, 0.01874011490435425, 1.0863323122110494E-7, 0.0,
    -8.2092055293751985E-5, -7.9479829103131449E-5, 0.0013359371069954274,
    0.0036664928564475114, -0.0036453751234520864, 1.0245996058840363E-6,
    -0.0015798748977891, -0.0015445783898720992, 0.026152250680421752,
    1.9031706495576775E-7, 0.0, -0.00015138580130198806, -0.00015026045109580116,
    0.0025476522350122636, 0.0047958377903169263, -0.004769647604061223,
    1.1118855621128E-6, -0.001858146191513653, -0.0018843217689397281,
    0.032501795700342631, 2.7606239387508953E-7, 0.0, -0.00023193555997525812,
    -0.00023581318888574605, 0.004053457684299786, 0.0058806046108294653,
    -0.005850349294839156, 1.1094246099937534E-6, -0.0020323405119140269,
    -0.0021358201848601993, 0.037939061261309553, 3.5794743021884567E-7, 0.0,
    -0.00031887641762686923, -0.000331797754712711, 0.0058110517062647483,
    0.0069220705895916747, -0.0068888434830188952, 1.0380026339534872E-6,
    -0.0021161005597038597, -0.0023023081639978373, 0.042593286582299723,
    4.3004015816152706E-7, 0.0, -0.00040803409001129783, -0.00043408605807850617,
    0.0077841306806048661, 0.00792162280888058, -0.0078866130627975838,
    9.1656271042831744E-7, -0.0021233257008390362, -0.0023889796637635162,
    0.0465756159186608, 4.8819660711098272E-7, 0.0, -0.0004959260127588678,
    -0.0005388511724380696, 0.0099415497124847318, 0.0088807454570414817,
    -0.008845227708386293, 7.6188061049177741E-7, -0.0020677166772267775,
    -0.0024026263887941277, 0.049981646338136829, 5.2983371442856193E-7, 0.0,
    -0.00057974181170554983, -0.00064263808828658568, 0.012256601210188425,
    0.0098010038114629636, -0.0097663128788899062, 5.8837815475109482E-7,
    -0.0019624056305868648, -0.0023512727699782606, 0.05289360881200713,
    5.5368965812149222E-7, 0.0, -0.00065730733167512789, -0.00074241635115996664,
    0.014706394484422628, 0.01068402590213614, -0.010651521339345658,
    4.0805610422789047E-7, -0.0018196676147215572, -0.0022438180057086396,
    0.055382236244244286, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0012696096671776815, -0.0012446526613791634, 1.2048980783339818E-6,
    -0.00061687493878965572, 0.000604388916839538, -0.010013122212772408,
    1.061142053024262E-7, -0.0, -2.7738064097358143E-5, 2.8131194615234076E-5,
    -0.00046405146086906513, -0.0024915257643369679, -0.0024456071173892982,
    2.1247019520100031E-6, -0.001110400382074021, 0.0011242475141241947,
    -0.0185985037284589, 2.9065780127038515E-7, -0.0, -7.7202747210466783E-5,
    8.0043067328803576E-5, -0.0013259669757548344, -0.0036666618923760419,
    -0.0036032986205452549, 2.7768451076723769E-6, -0.0014872789204611369,
    0.0015551285001931948, -0.025958946391363345, 5.2794670889513371E-7, -0.0,
    -0.00014278066784823295, 0.00015123748781122078, -0.0025289599716379783,
    -0.0047960523080654658, -0.0047184164476870728, 3.1836623697337032E-6,
    -0.0017566071659494602, 0.0018955296617734127, -0.032268423413024896,
    7.947158227066474E-7, -0.0, -0.00021935828064426944, 0.00023720881401214283,
    -0.004024309046723182, -0.0058808550090984416, -0.0057918691365830737,
    3.3709728783288505E-6, -0.0019291703801801081, 0.0021466000832686383,
    -0.037676203672976305, 1.0704021051550048E-6, -0.0, -0.00030239021505567247,
    0.00033356826583574059, -0.0057702133349057435, -0.0069223482746198026,
    -0.0068247485419489036, 3.3667969162570956E-6, -0.0020168117486492397,
    0.0023118071081922025, -0.042310383663998093, 1.3373066161163168E-6, -0.0,
    -0.00038793806963686344, 0.00043615094984864869, -0.0077308114442351354,
    -0.0079219217722854614, -0.0078182939754514839, 3.2002193969725195E-6,
    -0.0020318819770905627, 0.0023965776207408385, -0.04628091153918934,
    1.5806505315799603E-6, -0.0, -0.0004726837481841964, 0.00054110457356891018,
    -0.00987534043498621, -0.0088810633312691734, -0.0087738574773034289,
    2.9004068417137323E-6, -0.0019867714960031739, 0.0024079263864486521,
    -0.049682175849936561, 1.7885406225698851E-6, -0.0, -0.00055392146449373,
    0.00064495949846287716, -0.012177414670840884, -0.00980134244493379,
    -0.0096928710553760462, 2.4957794924191115E-6, -0.0018935246925263763,
    0.0023540830988579959, -0.0525952213573871, 1.9518596045854369E-6, -0.0,
    -0.000629532452593443, 0.00074468033165200063, -0.014614407270767573,
    -0.01068439151016165, -0.010576816527009201, 2.0133358318683243E-6,
    -0.0017635332403235359, 0.0022441284926873455, -0.055089645517679059, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012696096671776815, 0.0012446526613791634,
    -1.2048980783339818E-6, 0.00061687493878965572, -0.000604388916839538,
    0.010013122212772408, -1.061142053024262E-7, 0.0, 2.7738064097358143E-5,
    -2.8131194615234076E-5, 0.00046405146086906513, 0.0024915257643369679,
    0.0024456071173892982, -2.1247019520100031E-6, 0.001110400382074021,
    -0.0011242475141241947, 0.0185985037284589, -2.9065780127038515E-7, 0.0,
    7.7202747210466783E-5, -8.0043067328803576E-5, 0.0013259669757548344,
    0.0036666618923760419, 0.0036032986205452549, -2.7768451076723769E-6,
    0.0014872789204611369, -0.0015551285001931948, 0.025958946391363345,
    -5.2794670889513371E-7, 0.0, 0.00014278066784823295, -0.00015123748781122078,
    0.0025289599716379783, 0.0047960523080654658, 0.0047184164476870728,
    -3.1836623697337032E-6, 0.0017566071659494602, -0.0018955296617734127,
    0.032268423413024896, -7.947158227066474E-7, 0.0, 0.00021935828064426944,
    -0.00023720881401214283, 0.004024309046723182, 0.0058808550090984416,
    0.0057918691365830737, -3.3709728783288505E-6, 0.0019291703801801081,
    -0.0021466000832686383, 0.037676203672976305, -1.0704021051550048E-6, 0.0,
    0.00030239021505567247, -0.00033356826583574059, 0.0057702133349057435,
    0.0069223482746198026, 0.0068247485419489036, -3.3667969162570956E-6,
    0.0020168117486492397, -0.0023118071081922025, 0.042310383663998093,
    -1.3373066161163168E-6, 0.0, 0.00038793806963686344, -0.00043615094984864869,
    0.0077308114442351354, 0.0079219217722854614, 0.0078182939754514839,
    -3.2002193969725195E-6, 0.0020318819770905627, -0.0023965776207408385,
    0.04628091153918934, -1.5806505315799603E-6, 0.0, 0.0004726837481841964,
    -0.00054110457356891018, 0.00987534043498621, 0.0088810633312691734,
    0.0087738574773034289, -2.9004068417137323E-6, 0.0019867714960031739,
    -0.0024079263864486521, 0.049682175849936561, -1.7885406225698851E-6, 0.0,
    0.00055392146449373, -0.00064495949846287716, 0.012177414670840884,
    0.00980134244493379, 0.0096928710553760462, -2.4957794924191115E-6,
    0.0018935246925263763, -0.0023540830988579959, 0.0525952213573871,
    -1.9518596045854369E-6, 0.0, 0.000629532452593443, -0.00074468033165200063,
    0.014614407270767573, 0.01068439151016165, 0.010576816527009201,
    -2.0133358318683243E-6, 0.0017635332403235359, -0.0022441284926873455,
    0.055089645517679059, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    0.00030529986546997984, 0.0003338334845166563, 0.0016272457759424609,
    0.010095879326581595, -0.00962841988646662, 1.9968289075211972E-5,
    0.00015976171238131918, -0.0, 0.00045641357260640247,
    -0.00045145430417121844, 8.8871526588373336E-7, 0.0005823098471170404,
    0.00063341810018064781, 0.00319561609436146, 0.018268114616585909,
    -0.01803859036084203, 3.3691161826475776E-5, 0.00047350893515909706, -0.0,
    0.0012751859670041741, -0.0012909214591604154, 2.0948986856673945E-6,
    0.000814670276181542, 0.0008843862568521251, 0.0047073066248253916,
    0.024609246318060184, -0.025137413655179713, 3.1203297102974695E-5,
    0.00093567611205756871, -0.0, 0.0023679100819918647, -0.0024514858680225833,
    2.6081384223503403E-6, 0.00098951653059920169, 0.0010767590373366551,
    0.006164338961431883, 0.029250755199882041, -0.030878421197717981,
    4.9018235675699751E-6, 0.0015408922003214169, -0.0, 0.00365349870187017,
    -0.0038649919859937345, 1.0961461015921879E-6, 0.0010974219041171148,
    0.001204459974497518, 0.0075685858239313451, 0.032352235475444975,
    -0.035257746767706391, -5.049869976239119E-5, 0.0022839669617778016, -0.0,
    0.0050593412869733585, -0.0054640585237628759, -3.9818901276247412E-6,
    0.0011322529540262073, 0.00126479724508845, 0.0089217942746594447,
    0.034091626783814777, -0.038309389314708842, -0.00013807733707094791,
    0.0031598794663488727, -0.0, 0.0065220012033094894, -0.0071838424361534165,
    -1.4268973090405061E-5, 0.0010909512313288852, 0.0012579354533637762,
    0.010225606720339786, 0.034656613021452239, -0.040099975928457265,
    -0.00025887490703570455, 0.0041637685789327767, -0.0, 0.0079875132894543129,
    -0.0089635327622190931, -3.1413582267423173E-5, 0.0009732557371230151,
    0.0011863747625846881, 0.01148157956211133, 0.034237241880344847,
    -0.040723225205911692, -0.00041210875049080308, 0.0052909251911264048, -0.0,
    0.0094113431625520525, -0.010747564047527641, -5.6984629866741848E-5,
    0.00078138044572961069, 0.0010544517835316127, 0.012691199439518682,
    0.033019772709698705, -0.040294296715244246, -0.00059542286238290117,
    0.0065367859574520584, -0.0, 0.010758069055097354, -0.012486547927569579,
    -9.2399567410077549E-5, 0.00051966083909509291, 0.00086787343532694888,
    0.013855897084494804, 0.031181721980582281, -0.038944194286917144,
    -0.00080516186730605324, 0.0, 0.0, 0.0, 0.0, 0.0, -0.00030529986546997984,
    -0.0003338334845166563, -0.0016272457759424609, -0.010095879326581595,
    0.00962841988646662, -1.9968289075211972E-5, -0.00015976171238131918, 0.0,
    -0.00045641357260640247, 0.00045145430417121844, -8.8871526588373336E-7,
    -0.0005823098471170404, -0.00063341810018064781, -0.00319561609436146,
    -0.018268114616585909, 0.01803859036084203, -3.3691161826475776E-5,
    -0.00047350893515909706, 0.0, -0.0012751859670041741, 0.0012909214591604154,
    -2.0948986856673945E-6, -0.000814670276181542, -0.0008843862568521251,
    -0.0047073066248253916, -0.024609246318060184, 0.025137413655179713,
    -3.1203297102974695E-5, -0.00093567611205756871, 0.0, -0.0023679100819918647,
    0.0024514858680225833, -2.6081384223503403E-6, -0.00098951653059920169,
    -0.0010767590373366551, -0.006164338961431883, -0.029250755199882041,
    0.030878421197717981, -4.9018235675699751E-6, -0.0015408922003214169, 0.0,
    -0.00365349870187017, 0.0038649919859937345, -1.0961461015921879E-6,
    -0.0010974219041171148, -0.001204459974497518, -0.0075685858239313451,
    -0.032352235475444975, 0.035257746767706391, 5.049869976239119E-5,
    -0.0022839669617778016, 0.0, -0.0050593412869733585, 0.0054640585237628759,
    3.9818901276247412E-6, -0.0011322529540262073, -0.00126479724508845,
    -0.0089217942746594447, -0.034091626783814777, 0.038309389314708842,
    0.00013807733707094791, -0.0031598794663488727, 0.0, -0.0065220012033094894,
    0.0071838424361534165, 1.4268973090405061E-5, -0.0010909512313288852,
    -0.0012579354533637762, -0.010225606720339786, -0.034656613021452239,
    0.040099975928457265, 0.00025887490703570455, -0.0041637685789327767, 0.0,
    -0.0079875132894543129, 0.0089635327622190931, 3.1413582267423173E-5,
    -0.0009732557371230151, -0.0011863747625846881, -0.01148157956211133,
    -0.034237241880344847, 0.040723225205911692, 0.00041210875049080308,
    -0.0052909251911264048, 0.0, -0.0094113431625520525, 0.010747564047527641,
    5.6984629866741848E-5, -0.00078138044572961069, -0.0010544517835316127,
    -0.012691199439518682, -0.033019772709698705, 0.040294296715244246,
    0.00059542286238290117, -0.0065367859574520584, 0.0, -0.010758069055097354,
    0.012486547927569579, 9.2399567410077549E-5, -0.00051966083909509291,
    -0.00086787343532694888, -0.013855897084494804, -0.031181721980582281,
    0.038944194286917144, 0.00080516186730605324, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, 0.0003085978519427282, -0.0003311639350801028,
    -0.0016397717327669317, -0.010016729807333194, -0.00973321029283748,
    0.00012133886391925418, -0.000160901216314366, -0.0, -0.00045309558164745913,
    -0.00045668118851722322, 5.2492564066251047E-6, 0.00058863008680985979,
    -0.0006283822477967854, -0.0032183922521895397, -0.018135112910129446,
    -0.01824710348893685, 0.00020482944694178134, -0.00047669695753936884, -0.0,
    -0.0012664473234098102, -0.0013064650006839142, 1.3169646615031344E-5,
    0.00082349402557022218, -0.00087734196808529489, -0.0047380113170466809,
    -0.024445572166740356, -0.025445250925098618, 0.00022470448364874526,
    -0.00094159016201326225, -0.0, -0.002352739234487753, -0.0024821363336122904,
    2.0132137786931123E-5, 0.0010001111395152393, -0.001068075190137597,
    -0.006200674731595592, -0.029076778151213969, -0.0312780464791799,
    0.00016446194554072178, -0.0015499838478689851, -0.0, -0.0036318223568057393,
    -0.0039150912323147515, 2.1885482762796503E-5, 0.0011088740929178741,
    -0.0011944804452286933, -0.0076083408069271318, -0.032185058943394559,
    -0.035738827049569308, 1.5490330208720829E-5, -0.0022964730754338556, -0.0,
    -0.0050318542305135792, -0.0055373711009734129, 1.3917512324261771E-5,
    0.0011435053985372932, -0.0012538129751428152, -0.0089628941576592978,
    -0.0339448469322367, -0.038859248623980422, -0.00022424998459234159,
    -0.0031758381601364309, -0.0, -0.0064899888997729136, -0.0072834515054639951,
    -8.2477727708233679E-6, 0.0011008414048028214, -0.0012461646264303172,
    -0.010266156938835216, -0.034540266290474478, -0.040704128340488352,
    -0.00055147369065479933, -0.0041830388879746608, -0.0, -0.007952675973915347,
    -0.0090917639519725278, -4.881338390846249E-5, 0.000980555851003107,
    -0.0011739507486908244, -0.011519897693125459, -0.034157912270742156,
    -0.04136595406342846, -0.00095873257450591973, -0.0053132095051605845, -0.0,
    -0.0093756286647182115, -0.010905938783917879, -0.00011152827817206869,
    0.00078483729483612278, -0.0010414182098122126, -0.012725838026734184,
    -0.032980828693682233, -0.040959249560220512, -0.0014354820052808373,
    -0.0065616542771546587, -0.0, -0.010723520080563657, -0.012675766329395708,
    -0.0001995570575128905, 0.00051803438378578842, -0.00085418552395767286,
    -0.013885657365089258, -0.0311836529289259, -0.03961496625493191,
    -0.0019690439806877261, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003085978519427282,
    0.0003311639350801028, 0.0016397717327669317, 0.010016729807333194,
    0.00973321029283748, -0.00012133886391925418, 0.000160901216314366, 0.0,
    0.00045309558164745913, 0.00045668118851722322, -5.2492564066251047E-6,
    -0.00058863008680985979, 0.0006283822477967854, 0.0032183922521895397,
    0.018135112910129446, 0.01824710348893685, -0.00020482944694178134,
    0.00047669695753936884, 0.0, 0.0012664473234098102, 0.0013064650006839142,
    -1.3169646615031344E-5, -0.00082349402557022218, 0.00087734196808529489,
    0.0047380113170466809, 0.024445572166740356, 0.025445250925098618,
    -0.00022470448364874526, 0.00094159016201326225, 0.0, 0.002352739234487753,
    0.0024821363336122904, -2.0132137786931123E-5, -0.0010001111395152393,
    0.001068075190137597, 0.006200674731595592, 0.029076778151213969,
    0.0312780464791799, -0.00016446194554072178, 0.0015499838478689851, 0.0,
    0.0036318223568057393, 0.0039150912323147515, -2.1885482762796503E-5,
    -0.0011088740929178741, 0.0011944804452286933, 0.0076083408069271318,
    0.032185058943394559, 0.035738827049569308, -1.5490330208720829E-5,
    0.0022964730754338556, 0.0, 0.0050318542305135792, 0.0055373711009734129,
    -1.3917512324261771E-5, -0.0011435053985372932, 0.0012538129751428152,
    0.0089628941576592978, 0.0339448469322367, 0.038859248623980422,
    0.00022424998459234159, 0.0031758381601364309, 0.0, 0.0064899888997729136,
    0.0072834515054639951, 8.2477727708233679E-6, -0.0011008414048028214,
    0.0012461646264303172, 0.010266156938835216, 0.034540266290474478,
    0.040704128340488352, 0.00055147369065479933, 0.0041830388879746608, 0.0,
    0.007952675973915347, 0.0090917639519725278, 4.881338390846249E-5,
    -0.000980555851003107, 0.0011739507486908244, 0.011519897693125459,
    0.034157912270742156, 0.04136595406342846, 0.00095873257450591973,
    0.0053132095051605845, 0.0, 0.0093756286647182115, 0.010905938783917879,
    0.00011152827817206869, -0.00078483729483612278, 0.0010414182098122126,
    0.012725838026734184, 0.032980828693682233, 0.040959249560220512,
    0.0014354820052808373, 0.0065616542771546587, 0.0, 0.010723520080563657,
    0.012675766329395708, 0.0001995570575128905, -0.00051803438378578842,
    0.00085418552395767286, 0.013885657365089258, 0.0311836529289259,
    0.03961496625493191, 0.0019690439806877261, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.00031123210707097854, -0.00034685067214162421,
    0.0016669966780750718, -0.010488718210195844, 0.009815125609793791,
    -1.9369401290124933E-5, 0.00016328522433269307, -0.0, -0.0004740211255838913,
    0.00046013527261865408, -8.6373307795876751E-7, -0.00059360723947685318,
    -0.00065808064063290611, 0.003266150962948319, -0.018973116065572389,
    0.01838553363299, -3.2687057199799978E-5, 0.00048320543214996567, -0.0,
    -0.0013240939673380958, 0.0013156046906443392, -2.0286572896842304E-6,
    -0.00083045848829467158, -0.00091878555034845255, 0.0048001427031885034,
    -0.025550769455285192, 0.025616834189164807, -2.994390164987917E-5,
    0.00095337799969377377, -0.0, -0.0024581850118577204, 0.0024980914587003789,
    -2.4903069241135171E-6, -0.001008685976182244, -0.0011186276022600574,
    0.0062716411255935743, -0.030359577040774126, 0.03146217544462989,
    -3.4727473552552878E-6, 0.0015676859043920102, -0.0, -0.003791926896395772,
    0.0039380404704328978, -9.1887427096666306E-7, -0.0011186973588787033,
    -0.0012513274708795446, 0.0076832860344932851, -0.033566496902699,
    0.03591812322189622, 5.2084305529902415E-5, 0.0023202739163798993, -0.0,
    -0.00524981258578292, 0.0055667106871260825, 4.2275900297739748E-6,
    -0.0011542591859876848, -0.0013141238534375523, 0.0090376708107083939,
    -0.035357390424583912, 0.039019818641710086, 0.00013987718253174883,
    0.0032055431905615652, -0.0, -0.0067659118636060429, 0.00731797184028401,
    1.4596574211682426E-5, -0.0011122733190472591, -0.0013072226412829322,
    0.010337327455780462, -0.035928084569207305, 0.040835628493351359,
    0.00026100875500465327, 0.00421814447188071, -0.0, -0.0082841726473576443,
    0.0091298252526599358, 3.184381896411362E-5, -0.00099249304752223018,
    -0.001233254144221502, 0.011584713828990128, -0.035476707458955849,
    0.041461492510087218, 0.00041474470477947608, 0.0053529701368354773, -0.0,
    -0.0097583711481279891, 0.010945638424909161, 5.7547508485361425E-5,
    -0.00079719353433612154, -0.001096753309927306, 0.01278220313907634,
    -0.034197304164265578, 0.041015156825371005, 0.00059876079517478891,
    0.0066051452967111641, -0.0, -0.011151774212327922, 0.01271509205191892,
    9.3135513961620667E-5, -0.00053081081348862352, -0.00090367455570401051,
    0.013932075679618374, -0.032274699830771719, 0.0396304645046293,
    0.00080941573334415815, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00031123210707097854,
    0.00034685067214162421, -0.0016669966780750718, 0.010488718210195844,
    -0.009815125609793791, 1.9369401290124933E-5, -0.00016328522433269307, 0.0,
    0.0004740211255838913, -0.00046013527261865408, 8.6373307795876751E-7,
    0.00059360723947685318, 0.00065808064063290611, -0.003266150962948319,
    0.018973116065572389, -0.01838553363299, 3.2687057199799978E-5,
    -0.00048320543214996567, 0.0, 0.0013240939673380958, -0.0013156046906443392,
    2.0286572896842304E-6, 0.00083045848829467158, 0.00091878555034845255,
    -0.0048001427031885034, 0.025550769455285192, -0.025616834189164807,
    2.994390164987917E-5, -0.00095337799969377377, 0.0, 0.0024581850118577204,
    -0.0024980914587003789, 2.4903069241135171E-6, 0.001008685976182244,
    0.0011186276022600574, -0.0062716411255935743, 0.030359577040774126,
    -0.03146217544462989, 3.4727473552552878E-6, -0.0015676859043920102, 0.0,
    0.003791926896395772, -0.0039380404704328978, 9.1887427096666306E-7,
    0.0011186973588787033, 0.0012513274708795446, -0.0076832860344932851,
    0.033566496902699, -0.03591812322189622, -5.2084305529902415E-5,
    -0.0023202739163798993, 0.0, 0.00524981258578292, -0.0055667106871260825,
    -4.2275900297739748E-6, 0.0011542591859876848, 0.0013141238534375523,
    -0.0090376708107083939, 0.035357390424583912, -0.039019818641710086,
    -0.00013987718253174883, -0.0032055431905615652, 0.0, 0.0067659118636060429,
    -0.00731797184028401, -1.4596574211682426E-5, 0.0011122733190472591,
    0.0013072226412829322, -0.010337327455780462, 0.035928084569207305,
    -0.040835628493351359, -0.00026100875500465327, -0.00421814447188071, 0.0,
    0.0082841726473576443, -0.0091298252526599358, -3.184381896411362E-5,
    0.00099249304752223018, 0.001233254144221502, -0.011584713828990128,
    0.035476707458955849, -0.041461492510087218, -0.00041474470477947608,
    -0.0053529701368354773, 0.0, 0.0097583711481279891, -0.010945638424909161,
    -5.7547508485361425E-5, 0.00079719353433612154, 0.001096753309927306,
    -0.01278220313907634, 0.034197304164265578, -0.041015156825371005,
    -0.00059876079517478891, -0.0066051452967111641, 0.0, 0.011151774212327922,
    -0.01271509205191892, -9.3135513961620667E-5, 0.00053081081348862352,
    0.00090367455570401051, -0.013932075679618374, 0.032274699830771719,
    -0.0396304645046293, -0.00080941573334415815, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0003026656103417289, 0.00034418112270507054,
    -0.0016544707212506008, 0.010409568690947432, 0.0095465045695103112,
    -0.00012193775170434118, -0.0001621457203996462, -0.0,
    0.00047070313462494752, 0.00044800022006978769, -5.2742385945500694E-6,
    -0.00057733269445004571, 0.00065304478824904349, -0.003243374805120239,
    0.018840114359115909, 0.017900160216788887, -0.00020583355156845708,
    -0.00048001740976969377, -0.0, 0.0013153553237437309, 0.0012817817691999909,
    -1.3235888011014505E-5, -0.00080770581345709089, 0.000911741261581622,
    -0.0047694380109672141, 0.025387095303965344, 0.024965830391113532,
    -0.00022596387910184073, -0.00094746394973808, -0.0, 0.0024430141643536065,
    0.0024355307429344956, -2.0249969285167939E-5, -0.00098094169393219462,
    0.0011099437550609991, -0.0062353053554298652, 0.030185599992106023,
    0.030694292232267995, -0.00016589102175303643, -0.0015585942568444417, -0.0,
    0.003770250551331338, 0.0038420427478755887, -2.2062754593422019E-5,
    -0.0010875986381562825, 0.0012413479416107196, -0.0076435310514974984,
    0.033399320370648543, 0.035078450595379479, -1.7075935976232034E-5,
    -0.0023077678027238454, -0.0, 0.0052223255293231356, 0.0054347189376102081,
    -1.4163212226411E-5, -0.0011214991665758119, 0.0013031395834919174,
    -0.00899657092770854, 0.035210610573005785, 0.038148819296979178,
    0.00022245013913154056, -0.003189584496774007, -0.0, 0.00673389956006946,
    0.0071493221013334031, 7.9201716495460042E-6, -0.0010795193170844435,
    0.001295451814349473, -0.010296777237285032, 0.0358117378382295,
    0.039968475775594259, 0.00054933984268585039, -0.0041988741628388258, -0.0,
    0.0082493353318186715, 0.0089254714615316852, 4.8383147211772036E-5,
    -0.00096131854060388735, 0.0012208301303276382, -0.011546395697976,
    0.035397377849353123, 0.040627686759252934, 0.00095609662021724651,
    -0.0053306858228012958, -0.0, 0.0097226566502941411, 0.010707864406536361,
    0.00011096539955344909, -0.00076902420622960662, 0.001083719736207906,
    -0.012747564551860838, 0.034158360148249071, 0.040238389450093753,
    0.0014321440724889493, -0.0065802769770085621, -0.0, 0.011117225237794216,
    0.012447222205046368, 0.00019882111096134733, -0.00050688440939225185,
    0.00088998664433473482, -0.013902315399023918, 0.032276630779115308,
    0.038928696037219754, 0.0019647901146496211, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0003026656103417289, -0.00034418112270507054, 0.0016544707212506008,
    -0.010409568690947432, -0.0095465045695103112, 0.00012193775170434118,
    0.0001621457203996462, 0.0, -0.00047070313462494752, -0.00044800022006978769,
    5.2742385945500694E-6, 0.00057733269445004571, -0.00065304478824904349,
    0.003243374805120239, -0.018840114359115909, -0.017900160216788887,
    0.00020583355156845708, 0.00048001740976969377, 0.0, -0.0013153553237437309,
    -0.0012817817691999909, 1.3235888011014505E-5, 0.00080770581345709089,
    -0.000911741261581622, 0.0047694380109672141, -0.025387095303965344,
    -0.024965830391113532, 0.00022596387910184073, 0.00094746394973808, 0.0,
    -0.0024430141643536065, -0.0024355307429344956, 2.0249969285167939E-5,
    0.00098094169393219462, -0.0011099437550609991, 0.0062353053554298652,
    -0.030185599992106023, -0.030694292232267995, 0.00016589102175303643,
    0.0015585942568444417, 0.0, -0.003770250551331338, -0.0038420427478755887,
    2.2062754593422019E-5, 0.0010875986381562825, -0.0012413479416107196,
    0.0076435310514974984, -0.033399320370648543, -0.035078450595379479,
    1.7075935976232034E-5, 0.0023077678027238454, 0.0, -0.0052223255293231356,
    -0.0054347189376102081, 1.4163212226411E-5, 0.0011214991665758119,
    -0.0013031395834919174, 0.00899657092770854, -0.035210610573005785,
    -0.038148819296979178, -0.00022245013913154056, 0.003189584496774007, 0.0,
    -0.00673389956006946, -0.0071493221013334031, -7.9201716495460042E-6,
    0.0010795193170844435, -0.001295451814349473, 0.010296777237285032,
    -0.0358117378382295, -0.039968475775594259, -0.00054933984268585039,
    0.0041988741628388258, 0.0, -0.0082493353318186715, -0.0089254714615316852,
    -4.8383147211772036E-5, 0.00096131854060388735, -0.0012208301303276382,
    0.011546395697976, -0.035397377849353123, -0.040627686759252934,
    -0.00095609662021724651, 0.0053306858228012958, 0.0, -0.0097226566502941411,
    -0.010707864406536361, -0.00011096539955344909, 0.00076902420622960662,
    -0.001083719736207906, 0.012747564551860838, -0.034158360148249071,
    -0.040238389450093753, -0.0014321440724889493, 0.0065802769770085621, 0.0,
    -0.011117225237794216, -0.012447222205046368, -0.00019882111096134733,
    0.00050688440939225185, -0.00088998664433473482, 0.013902315399023918,
    -0.032276630779115308, -0.038928696037219754, -0.0019647901146496211, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0 };

  static const real_T n[1280]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T c[700]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012391951215142167, -0.0012446059948862914, 4.2404022064644467E-7,
    -0.00061228609723886591, -0.00060373405900552592, -0.0098620476003080347,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0012392515220872938, 0.0012615116309597195,
    -1.2723282076113984E-6, 0.00066574090240467871, -0.00060885429897081559,
    -0.00993945077638962, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0012695532666046046,
    -0.0012614649644668474, 4.9147034992385141E-7, -0.000661152060853889,
    -0.00059926867687426413, 0.010090525388853994, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0012696096671776815, 0.0012446526613791634, -1.2048980783339818E-6,
    0.00061687493878965572, -0.000604388916839538, 0.010013122212772408, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.00030529986546997984, -0.0003338334845166563,
    -0.0016272457759424609, -0.010095879326581595, 0.00962841988646662,
    -1.9968289075211972E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0003085978519427282,
    0.0003311639350801028, 0.0016397717327669317, 0.010016729807333194,
    0.00973321029283748, -0.00012133886391925418, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00031123210707097854, 0.00034685067214162421, -0.0016669966780750718,
    0.010488718210195844, -0.009815125609793791, 1.9369401290124933E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0003026656103417289, -0.00034418112270507054,
    0.0016544707212506008, -0.010409568690947432, -0.0095465045695103112,
    0.00012193775170434118, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.001399927381922534,
    0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.001399927381922534, 0.023108117167822184, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.001399927381922534, 0.023108117167822184, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T o[640]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T b_0[625]{ 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.1999030381931561E-6, -0.0022034150089554586, 4.499397494389628E-5, 0.0,
    0.984526457444013, 6.1154352612401684E-5, 0.000658220631124813,
    2.406633112066715E-5, -0.04355854014359279, 0.00086324063755082434,
    -0.597925752444161, 0.002307649090444321, 0.025572756739094347, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021919103508552663,
    -1.1769104021443485E-6, -2.04388745128573E-5, 0.0, 5.8048391584439872E-5,
    0.9860314653427954, 0.0012762735695932266, 0.043398201774400937,
    -2.36184272990922E-5, -0.00039697725363734275, 0.0021911099166535882,
    -0.54647899618870288, 0.049647585035319089, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.09824058933936268, 2.515038870602036E-8, 2.478286826955546E-7, 0.0,
    -6.8769055098177272E-7, 0.00016941253621162433, -2.2424978015547662E-5,
    0.96502160066429243, 4.9401416636231716E-7, 4.7838722676953627E-6,
    -2.5790943202432863E-5, 0.0065875197780085951, -0.00086768568007417686, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.5164435105919461E-8,
    0.09824505158925019, 5.4423982654983043E-7, 0.0, -0.00018717266530852815,
    7.4031064802782007E-7, 1.142615450609401E-5, 4.9457201721440852E-7,
    0.96511061759937666, 1.0375873249332257E-5, -0.007187778861063086,
    2.7754140534262974E-5, 0.00044171651039709426, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.8197760778704109E-7, 6.1908905483331962E-7,
    0.098066021672124887, 0.0, 4.598271195783E-5, -2.0898544599696179E-5,
    -5.9658590980901608E-8, 5.2978632346833573E-6, 1.1479599830850796E-5,
    0.96157151239694438, 0.0017645806891454807, -0.00081186577064666621,
    -2.2084979199813477E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -2.0451190958447188E-7, -9.7769028595142508E-5,
    1.3903187326404862E-5, 0.0, 0.045219535709451038, 1.8868952312019515E-5,
    1.6305396659915506E-5, -3.5131312199902236E-6, -0.0022383811075379761,
    0.0002745798143991763, 0.80992029310182234, 0.00073365065879608374,
    0.000832315230131649, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 7.5262978685328809E-5, 1.4977003294311728E-7, -4.5252614965129612E-6,
    0.0, 1.3470948382708935E-5, 0.046909332489192504, 2.0587308747099204E-5,
    0.0018258400396038929, 2.5176585929125812E-6, -9.1406194452072E-5,
    0.00052891954512188164, 0.87431543133687928, 0.0012132471811926605, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.1231564155131734E-5,
    5.7205276185411775E-6, -2.5788680042587712E-8, 0.0, 8.5189138462148147E-6,
    -7.378467994987278E-7, 0.046345993253848423, -0.00021767242759973264,
    0.00011072138604332631, -4.8161920877121215E-7, 0.00032025413802335372,
    -2.83340935371592E-5, 0.85749010226935762, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468,
    1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0929234966029535,
    -0.20245698544027138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0080982794176108468, 1.0524320995148992, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0929234966029535, -0.20245698544027138, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0080982794176108468, 1.0524320995148992 };

  static const real_T l_0[364]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T k[289]{ 1.816594636802815, 1.1461304629584592,
    -1.0415282710780964, -1.1519924449224517, -0.016902159675582597,
    -0.12625945473850445, 0.016177919037049144, 0.12698369537703785,
    1.3519931975706494, 0.90667243491604177, -0.82617727409895569,
    -0.91149803675356311, -0.012028757132305699, -0.099537124287925258,
    0.011418941932784648, 0.10014693948744627, 0.0, 1.1461304629584592,
    1.8331498226981122, -1.1685925127867378, -1.0415731530470849,
    -0.12410304061344213, -0.020122262169664496, 0.12747367838372731,
    0.016751624399379349, 0.90651491655800309, 1.3652453124849961,
    -0.92478499155332916, -0.82605459562633621, -0.10005069640015359,
    -0.012372797468613628, 0.10281348567614333, 0.00961000819262392, 0.0,
    -1.0415282710780964, -1.1685925127867378, 1.86493493632685,
    1.1778706946182078, -0.0044275239781952167, -0.10986638009965052,
    0.003503792576505006, 0.11079011150134069, -0.82567275461755307,
    -0.9244370656214147, 1.3906829248329464, 0.93191861382908436,
    -0.0045107235128381759, -0.093375294151079757, 0.0037450775048292989,
    0.094140940159088582, 0.0, -1.1519924449224517, -1.0415731530470849,
    1.1778706946182078, 1.8482899864935745, -0.11162840491605326,
    -0.0037291875308090262, 0.11479955192318164, 0.00055804052368066664,
    -0.911151035630199, -0.82586418805246042, 0.93207520737857252,
    1.3773620549563113, -0.092532662780684852, -0.0062109673317668548,
    0.095139621248186729, 0.0036040088642649987, 0.0, -0.016902159675582597,
    -0.12410304061344211, -0.0044275239781952167, -0.11162840491605326,
    2.3956591846505111, 0.1200768850409341, -1.5962516045965041,
    -0.269484465094942, -0.013369601075539568, -0.10052570242901313,
    -0.0030610805726046563, -0.090217181926076959, 1.7748425242159507,
    0.092891433060330417, -1.3014011025094869, -0.20633285476679478, 0.0,
    -0.12625945473850445, -0.020122262169664489, -0.10986638009965052,
    -0.0037291875308090245, 0.12007688504093406, 2.41767770375053,
    -0.30487168880721371, -1.5828828999842492, -0.10227811959781825,
    -0.016025403281283507, -0.088702929574405773, -0.0024502132578697569,
    0.092920912195057409, 1.7920613096868112, -0.23508469707529103,
    -1.2898975248065772, 0.0, 0.01617791903704914, 0.12747367838372731,
    0.0035037925765050047, 0.11479955192318164, -1.5962516045965041,
    -0.30487168880721377, 2.4871589961869995, 0.063964297216718827,
    0.012773702951587572, 0.10325863821853515, 0.0023005327716882963,
    0.0927854680386346, -1.3012536217039554, -0.23508688114241771,
    1.8495412346634623, 0.0467992681829115, 0.0, 0.12698369537703785,
    0.016751624399379345, 0.11079011150134069, 0.00055804052368066761,
    -0.269484465094942, -1.5828828999842492, 0.063964297216718854,
    2.4384030678624722, 0.1028740177217702, 0.013292467491761497,
    0.089463477375322079, -0.00011807285468786211, -0.20650981470705315,
    -1.2898658616047232, 0.046944564921316212, 1.80943111139046, 0.0,
    1.3519931975706494, 0.90651491655800309, -0.82567275461755307,
    -0.911151035630199, -0.013369601075539568, -0.10227811959781825,
    0.012773702951587574, 0.1028740177217702, 1.3078817312955953,
    0.72150745975870056, -0.658979866088351, -0.72535413762524525,
    -0.0095217113636364391, -0.0812529035383454, 0.0090152921507608771,
    0.081759322751220942, 0.0, 0.90667243491604166, 1.3652453124849961,
    -0.92443706562141481, -0.82586418805246042, -0.10052570242901313,
    -0.016025403281283511, 0.10325863821853515, 0.013292467491761497,
    0.72150745975870056, 1.31856134079109, -0.73606002509473134,
    -0.65900614406234181, -0.081684891762003442, -0.0098255261949831418,
    0.083943493807937059, 0.0075669241490495445, 0.0, -0.82617727409895569,
    -0.92478499155332916, 1.3906829248329464, 0.93207520737857263,
    -0.0030610805726046537, -0.088702929574405773, 0.0023005327716882958,
    0.089463477375322092, -0.658979866088351, -0.73606002509473134,
    1.33905482085583, 0.74197466184944927, -0.0032327980267922922,
    -0.076026967840739118, 0.0025966288649384079, 0.076663137002592974, 0.0,
    -0.911498036753563, -0.8260545956263361, 0.93191861382908425,
    1.3773620549563113, -0.090217181926076959, -0.00245021325786976,
    0.0927854680386346, -0.0001180728546878619, -0.72535413762524525,
    -0.65900614406234181, 0.74197466184944916, 1.3283226554123526,
    -0.075395978425158314, -0.0045995904973758451, 0.077524830522113591,
    0.0024707384004205883, 0.0, -0.012028757132305697, -0.10005069640015357,
    -0.0045107235128381768, -0.092532662780684852, 1.7748425242159507,
    0.092920912195057451, -1.3012536217039554, -0.20650981470705318,
    -0.00952171136363644, -0.081684891762003428, -0.0032327980267922913,
    -0.075395978425158314, 1.7661780773978222, 0.071884127489168892,
    -1.0697015899994942, -0.15836061488749745, 0.0, -0.099537124287925258,
    -0.012372797468613623, -0.093375294151079757, -0.0062109673317668531,
    0.092891433060330347, 1.7920613096868112, -0.23508688114241769,
    -1.2898658616047232, -0.0812529035383454, -0.0098255261949831384,
    -0.076026967840739118, -0.0045995904973758434, 0.071884127489168864,
    1.779705348439854, -0.18176518762881719, -1.0598242883002051, 0.0,
    0.011418941932784647, 0.10281348567614332, 0.0037450775048292985,
    0.095139621248186729, -1.3014011025094869, -0.23508469707529106,
    1.8495412346634623, 0.046944564921316184, 0.0090152921507608771,
    0.083943493807937059, 0.0025966288649384088, 0.077524830522113591,
    -1.0697015899994942, -0.18176518762881724, 1.8276801277700256,
    0.033786649858286583, 0.0, 0.10014693948744627, 0.0096100081926239166,
    0.094140940159088582, 0.0036040088642649969, -0.20633285476679475,
    -1.2898975248065772, 0.046799268182911476, 1.80943111139046,
    0.081759322751220942, 0.0075669241490495419, 0.076663137002592974,
    0.002470738400420587, -0.15836061488749745, -1.0598242883002051,
    0.033786649858286541, 1.794398253329416, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100000.0 };

  static const real_T e[252]{ 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 4.7, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 4.7,
    0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.3, 2.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.3, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 0.3, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.3, 2.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.3, 2.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 0.3, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 0.3, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.3, 2.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.3, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 0.3, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0,
    15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0,
    15.0, 15.0, 15.0, 15.0, 15.0, 15.0 };

  static const real_T c_b[48]{ 0.02112443491058583, -0.015284356933675683,
    -7.0837403672252146E-5, 0.062952228101239543, 0.019032522297668636,
    -0.17235611708486639, 0.021112545591001931, 0.015556523198782039,
    9.3712054745178266E-5, -0.060884483374622281, 0.019613805650913103,
    -0.17335012146094617, 0.021790267284400529, -0.015565687047941387,
    -6.7363334491227168E-5, 0.060331047065513795, 0.019031465986279986,
    0.17628138981294922, 0.021778377964816624, 0.015275193084516326,
    9.7186123926203244E-5, -0.063505664410348023, 0.019612749339524459,
    0.17528738543686956, -0.001819638864719295, -0.0034249251816346319,
    -0.02095639900015615, -0.26767193546582568, 0.10593667623599359,
    0.00062021813460420567, -0.0018124211550371481, 0.003387750973601051,
    0.021100316216985739, 0.26476621250220889, 0.10537885436940329,
    -0.0006207996116589, 0.0018538731733468781, 0.0035708122797193441,
    -0.021822949502860629, 0.2790736050389333, -0.10793139553633729,
    -0.00064672437426625525, 0.001778186846409557, -0.0035336380716857632,
    0.02167903228603104, -0.27616788207531651, -0.1033841350690595,
    0.00064730585132094889 };

  static const real_T tmp_2[48]{ 0.012446644211353098, -0.012499389174730886,
    4.9544380158868984E-6, -0.0062549993475053646, -0.0057709784431302039,
    -0.10646011619457575, 0.012445793395042929, 0.012669394869061891,
    -1.434300193061385E-5, 0.0068421485853685515, -0.0058250357088155905,
    -0.10724990190754305, 0.0127814333216086, -0.012670244404590116,
    5.7769467478376495E-6, -0.0067920473947563169, -0.00572629921252244,
    0.10879514943976265, 0.01278058250529843, 0.012498539639202661,
    -1.352049319866299E-5, 0.0063051005381176, -0.005780356478207677,
    0.10800536372679535, -0.00064004748139144052, -0.00071746300208054158,
    -0.0165745904097681, -0.1026732889244388, 0.091396875634783256,
    0.00014680626144359071, -0.00064697977539739777, 0.00071144911343470516,
    0.016710923123392282, 0.1018150813770785, 0.092326291955808951,
    -0.00012382954366831189, 0.00065256195255307707, 0.00074561291602257885,
    -0.017018151644229949, 0.106701735379428, -0.093184499503169316,
    -0.00015235250435654841, 0.00063446530423575689, -0.00073959902737674255,
    0.016881818930605769, -0.1058435278320676, -0.090538668087422891,
    0.00012937578658126929 };

  static const real_T f_0[25]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T old_yoff[13]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0 };

  static const real_T tmp_1[13]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0 };

  static real_T d[130]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0,
    -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0
  };

  static real_T f[130]{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0,
    5.0, 5.0, 5.0, 5.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
    1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 };

  static const int32_T b_Mrows[252]{ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17,
    18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,
    39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 57, 58, 59, 60, 61,
    62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 82, 83, 84,
    85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104,
    107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123,
    124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140,
    141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159,
    160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 173, 174, 175, 176,
    177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193,
    194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212,
    213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 227, 228, 229,
    230, 231, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246,
    247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263,
    264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 341, 342,
    343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356 };

  static const int8_T b_D[4004]{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T d_1[3575]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T a[1280]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

  static const int8_T d_0[325]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T c_0[169]{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const int8_T b[7]{ 3, 4, 5, 6, 10, 11, 12 };

  static const int8_T tmp_0[7]{ 0, 0, 0, 1, 0, 0, 0 };

  SL_Bus_proc_control_std_msgs_Bool BusAssignment;
  SL_Bus_proc_control_std_msgs_Bool b_varargout_2_0;
  SL_Bus_proc_control_std_msgs_UInt8 b_varargout_2;
  char_T expl_temp[3];
  boolean_T exitg1;
  boolean_T rtb_Merge;
  boolean_T rtb_NewDvlMsg;
  boolean_T rtb_Reset;
  boolean_T rtb_newPressureMsg;

  // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
  // Outputs for IfAction SubSystem: '<S133>/Quaternion Non linear MPC (Not for codegen)' incorporates:
  //   ActionPort: '<S141>/Action Port'

  // SwitchCase: '<S133>/Switch Case' incorporates:
  //   MATLAB Function: '<S210>/NLMPC'

  f[0U] = (rtInf);
  f[1U] = (rtInf);
  f[2U] = (rtInf);
  f[3U] = (rtInf);
  f[4U] = (rtInf);
  f[5U] = (rtInf);
  f[6U] = (rtInf);
  f[7U] = (rtInf);
  f[8U] = (rtInf);
  f[9U] = (rtInf);
  f[10U] = (rtInf);
  f[11U] = (rtInf);
  f[12U] = (rtInf);
  f[13U] = (rtInf);
  f[14U] = (rtInf);
  f[15U] = (rtInf);
  f[16U] = (rtInf);
  f[17U] = (rtInf);
  f[18U] = (rtInf);
  f[19U] = (rtInf);
  d[0U] = (rtMinusInf);
  d[1U] = (rtMinusInf);
  d[2U] = (rtMinusInf);
  d[3U] = (rtMinusInf);
  d[4U] = (rtMinusInf);
  d[5U] = (rtMinusInf);
  d[6U] = (rtMinusInf);
  d[7U] = (rtMinusInf);
  d[8U] = (rtMinusInf);
  d[9U] = (rtMinusInf);
  d[10U] = (rtMinusInf);
  d[11U] = (rtMinusInf);
  d[12U] = (rtMinusInf);
  d[13U] = (rtMinusInf);
  d[14U] = (rtMinusInf);
  d[15U] = (rtMinusInf);
  d[16U] = (rtMinusInf);
  d[17U] = (rtMinusInf);
  d[18U] = (rtMinusInf);
  d[19U] = (rtMinusInf);

  // End of Outputs for SubSystem: '<S133>/Quaternion Non linear MPC (Not for codegen)' 
  // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    boolean_T b_varargout_1;
    boolean_T b_varargout_1_0;

    // Outputs for Atomic SubSystem: '<Root>/Subsystem1'
    // Outputs for Atomic SubSystem: '<S10>/Subscribe2'
    // MATLABSystem: '<S321>/SourceBlock'
    rtb_Merge = Sub_proc_control_185_13.getLatestMessage(&b_varargout_2);

    // Outputs for Enabled SubSystem: '<S321>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S327>/Enable'

    if (rtb_Merge) {
      // SignalConversion generated from: '<S327>/In1'
      proc_control_B.In1_i2 = b_varargout_2;
    }

    // End of Outputs for SubSystem: '<S321>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe2'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe3'
    // MATLABSystem: '<S322>/SourceBlock'
    rtb_NewDvlMsg = Sub_proc_control_185_14.getLatestMessage(&b_varargout_2_0);

    // End of Outputs for SubSystem: '<S10>/Subscribe3'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe1'
    // MATLABSystem: '<S320>/SourceBlock'
    rtb_newPressureMsg = Sub_proc_control_185_12.getLatestMessage
      (&b_varargout_2_0);

    // Outputs for Enabled SubSystem: '<S320>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S326>/Enable'

    if (rtb_newPressureMsg) {
      // SignalConversion generated from: '<S326>/In1'
      proc_control_B.In1_cx = b_varargout_2_0;
    }

    // End of Outputs for SubSystem: '<S320>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe1'

    // Outputs for Atomic SubSystem: '<S10>/startSim'
    // MATLABSystem: '<S325>/SourceBlock'
    b_varargout_1 = Sub_proc_control_185_11.getLatestMessage
      (&proc_control_B.b_varargout_2_c);

    // Outputs for Enabled SubSystem: '<S325>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S331>/Enable'

    if (b_varargout_1) {
      // SignalConversion generated from: '<S331>/In1'
      proc_control_B.In1_n = proc_control_B.b_varargout_2_c;
    }

    // End of Outputs for SubSystem: '<S325>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/startSim'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe5'
    // MATLABSystem: '<S324>/SourceBlock'
    rtb_Reset = Sub_proc_control_185_270.getLatestMessage(&b_varargout_2_0);

    // Outputs for Enabled SubSystem: '<S324>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S330>/Enable'

    if (rtb_Reset) {
      // SignalConversion generated from: '<S330>/In1'
      proc_control_B.In1_f1 = b_varargout_2_0;
    }

    // End of Outputs for SubSystem: '<S324>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe5'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe4'
    // MATLABSystem: '<S323>/SourceBlock'
    b_varargout_1_0 = Sub_proc_control_185_268.getLatestMessage(&b_varargout_2_0);

    // End of Outputs for SubSystem: '<S10>/Subscribe4'

    // MATLABSystem: '<S10>/MATLAB System' incorporates:
    //   MATLABSystem: '<S320>/SourceBlock'
    //   MATLABSystem: '<S321>/SourceBlock'
    //   MATLABSystem: '<S322>/SourceBlock'
    //   MATLABSystem: '<S324>/SourceBlock'
    //   MATLABSystem: '<S325>/SourceBlock'
    //   SignalConversion generated from: '<S10>/MATLAB System'

    if (proc_control_DW.obj_mv.initial_mode != proc_control_P.mode.init) {
      proc_control_DW.obj_mv.initial_mode = proc_control_P.mode.init;
    }

    // Outputs for Atomic SubSystem: '<S10>/Subscribe5'
    //         %% Fonction qui détermine si on est mode dry_run
    if (rtb_Reset) {
      proc_control_DW.obj_mv.m_notDryRun = !proc_control_B.In1_f1.Data;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe5'

    // Outputs for Atomic SubSystem: '<S10>/startSim'
    //          %% Fonction qui détermine la condition initial
    if (b_varargout_1) {
      proc_control_DW.obj_mv.m_simulation = 1.0;

      //  activer la simulation
      proc_control_DW.obj_mv.m_initCond[0] = proc_control_B.In1_n.Position.X;
      proc_control_DW.obj_mv.m_initCond[1] = proc_control_B.In1_n.Position.Y;
      proc_control_DW.obj_mv.m_initCond[2] = proc_control_B.In1_n.Position.Z;

      //         %% Fonction qui vérifie si le quaternion est unitaire
      proc_control_B.scale = 3.3121686421112381E-170;
      proc_control_B.absxk = std::abs(proc_control_B.In1_n.Orientation.W);
      if (proc_control_B.absxk > 3.3121686421112381E-170) {
        proc_control_B.d = 1.0;
        proc_control_B.scale = proc_control_B.absxk;
      } else {
        proc_control_B.t = proc_control_B.absxk / 3.3121686421112381E-170;
        proc_control_B.d = proc_control_B.t * proc_control_B.t;
      }

      proc_control_B.absxk = std::abs(proc_control_B.In1_n.Orientation.X);
      if (proc_control_B.absxk > proc_control_B.scale) {
        proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
        proc_control_B.d = proc_control_B.d * proc_control_B.t *
          proc_control_B.t + 1.0;
        proc_control_B.scale = proc_control_B.absxk;
      } else {
        proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
        proc_control_B.d += proc_control_B.t * proc_control_B.t;
      }

      proc_control_B.absxk = std::abs(proc_control_B.In1_n.Orientation.Y);
      if (proc_control_B.absxk > proc_control_B.scale) {
        proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
        proc_control_B.d = proc_control_B.d * proc_control_B.t *
          proc_control_B.t + 1.0;
        proc_control_B.scale = proc_control_B.absxk;
      } else {
        proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
        proc_control_B.d += proc_control_B.t * proc_control_B.t;
      }

      proc_control_B.absxk = std::abs(proc_control_B.In1_n.Orientation.Z);
      if (proc_control_B.absxk > proc_control_B.scale) {
        proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
        proc_control_B.d = proc_control_B.d * proc_control_B.t *
          proc_control_B.t + 1.0;
        proc_control_B.scale = proc_control_B.absxk;
      } else {
        proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
        proc_control_B.d += proc_control_B.t * proc_control_B.t;
      }

      proc_control_B.d = proc_control_B.scale * std::sqrt(proc_control_B.d);
      proc_control_B.n_c = proc_control_B.In1_n.Orientation.W / proc_control_B.d;
      proc_control_B.b_n[0] = std::isnan(proc_control_B.n_c);
      proc_control_B.n[0] = proc_control_B.n_c;
      proc_control_B.n_c = proc_control_B.In1_n.Orientation.X / proc_control_B.d;
      proc_control_B.b_n[1] = std::isnan(proc_control_B.n_c);
      proc_control_B.n[1] = proc_control_B.n_c;
      proc_control_B.n_c = proc_control_B.In1_n.Orientation.Y / proc_control_B.d;
      proc_control_B.b_n[2] = std::isnan(proc_control_B.n_c);
      proc_control_B.n[2] = proc_control_B.n_c;
      proc_control_B.n_c = proc_control_B.In1_n.Orientation.Z / proc_control_B.d;
      proc_control_B.b_n[3] = std::isnan(proc_control_B.n_c);
      rtb_Reset = true;
      proc_control_B.ibmat = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.ibmat < 4)) {
        if (!proc_control_B.b_n[proc_control_B.ibmat]) {
          rtb_Reset = false;
          exitg1 = true;
        } else {
          proc_control_B.ibmat++;
        }
      }

      if (rtb_Reset) {
        proc_control_DW.obj_mv.m_initCond[3] = 1.0;
        proc_control_DW.obj_mv.m_initCond[4] = 0.0;
        proc_control_DW.obj_mv.m_initCond[5] = 0.0;
        proc_control_DW.obj_mv.m_initCond[6] = 0.0;
      } else {
        proc_control_DW.obj_mv.m_initCond[3] = proc_control_B.n[0];
        proc_control_DW.obj_mv.m_initCond[4] = proc_control_B.n[1];
        proc_control_DW.obj_mv.m_initCond[5] = proc_control_B.n[2];
        proc_control_DW.obj_mv.m_initCond[6] = proc_control_B.n_c;
      }
    }

    // End of Outputs for SubSystem: '<S10>/startSim'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe1'
    //         %% Fonction qui détermine le mode
    //          %% Fonction qui détermine l'arret d'urgence
    if (rtb_newPressureMsg) {
      proc_control_DW.obj_mv.m_killStatus = !proc_control_B.In1_cx.Data;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe1'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe2'
    //  regarder l'états de la kill
    if (rtb_Merge && (!(proc_control_DW.obj_mv.m_killStatus != 0.0)) &&
        (proc_control_DW.Delay_DSTATE_e != 0.0)) {
      proc_control_DW.obj_mv.m_mode = proc_control_B.In1_i2.Data;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe2'
    if ((proc_control_DW.obj_mv.m_killStatus != 0.0) ||
        (!(proc_control_DW.obj_mv.m_notDryRun != 0.0))) {
      proc_control_DW.obj_mv.m_mode = 0.0;
    }

    // Outputs for Atomic SubSystem: '<S10>/Subscribe3'
    //          %% Fonction qui détermine si on reset
    if (rtb_NewDvlMsg || b_varargout_1) {
      proc_control_DW.obj_mv.m_reset = 1.0;
    } else {
      proc_control_DW.obj_mv.m_reset = 0.0;
    }

    //          %% Fonction qui détermine si on clear la trajectoire
    if (rtb_NewDvlMsg || b_varargout_1 || rtb_Merge || b_varargout_1_0) {
      proc_control_DW.obj_mv.m_trajClear = 1.0;
    } else {
      proc_control_DW.obj_mv.m_trajClear = 0.0;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe3'

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_B.MATLABSystem_o1[0] = proc_control_DW.obj_mv.m_initCond[3];
    proc_control_B.MATLABSystem_o1[1] = proc_control_DW.obj_mv.m_initCond[4];
    proc_control_B.MATLABSystem_o1[2] = proc_control_DW.obj_mv.m_initCond[5];
    proc_control_B.MATLABSystem_o1[3] = proc_control_DW.obj_mv.m_initCond[6];

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_B.MATLABSystem_o2[0] = proc_control_DW.obj_mv.m_initCond[0];
    proc_control_B.MATLABSystem_o2[1] = proc_control_DW.obj_mv.m_initCond[1];
    proc_control_B.MATLABSystem_o2[2] = proc_control_DW.obj_mv.m_initCond[2];

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_B.MATLABSystem_o3 = proc_control_DW.obj_mv.m_simulation;

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_B.MATLABSystem_o4 = proc_control_DW.obj_mv.m_reset;

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_B.MATLABSystem_o6 = proc_control_DW.obj_mv.m_trajClear;
    proc_control_B.MATLABSystem_o7 = proc_control_DW.obj_mv.m_notDryRun;

    // DataTypeConversion: '<S10>/Data Type Conversion' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'

    proc_control_B.DataTypeConversion_j = static_cast<uint8_T>
      (proc_control_DW.obj_mv.m_mode);

    // End of Outputs for SubSystem: '<Root>/Subsystem1'

    // Delay: '<S243>/ '
    std::memcpy(&proc_control_B.u[0], &proc_control_DW._DSTATE[0], sizeof(real_T)
                << 3U);

    // Outputs for Atomic SubSystem: '<Root>/Subsystem1'
    // DataTypeConversion: '<S3>/Cast To Double' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'

    proc_control_B.CastToDouble = static_cast<uint8_T>
      (proc_control_DW.obj_mv.m_simulation);

    // End of Outputs for SubSystem: '<Root>/Subsystem1'
  }

  // SwitchCase: '<S3>/Switch Case' incorporates:
  //   MATLABSystem: '<S68>/SourceBlock'
  //   MATLABSystem: '<S69>/SourceBlock'
  //   MATLABSystem: '<S70>/SourceBlock'
  //   MATLABSystem: '<S76>/SourceBlock'
  //   MATLABSystem: '<S77>/SourceBlock'
  //   MATLABSystem: '<S78>/SourceBlock'
  //   ZeroOrderHold: '<S3>/Zero-Order Hold'

  if (proc_control_B.CastToDouble == 1) {
    // Outputs for IfAction SubSystem: '<S3>/Simulation' incorporates:
    //   ActionPort: '<S66>/Action Port'

    // Outputs for Atomic SubSystem: '<S66>/Subscribe'
    // MATLABSystem: '<S76>/SourceBlock'
    rtb_Merge = Sub_proc_control_31_1241.getLatestMessage(&proc_control_B.msg_c);

    // Outputs for Enabled SubSystem: '<S76>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S80>/Enable'

    if (rtb_Merge) {
      // SignalConversion generated from: '<S80>/In1'
      proc_control_B.In1_pd = proc_control_B.msg_c;
    }

    // End of Outputs for SubSystem: '<S76>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S66>/Subscribe'

    // SignalConversion generated from: '<S66>/imu Data' incorporates:
    //   MATLABSystem: '<S76>/SourceBlock'
    //   Merge: '<S3>/Merge1'

    proc_control_B.Product1_gp = proc_control_B.In1_pd.Orientation.X;
    proc_control_B.od = proc_control_B.In1_pd.Orientation.Y;
    proc_control_B.Product2_j = proc_control_B.In1_pd.Orientation.Z;
    proc_control_B.Product5 = proc_control_B.In1_pd.Orientation.W;

    // Outputs for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
    // SignalConversion generated from: '<S237>/qS2W' incorporates:
    //   SignalConversion generated from: '<S66>/imu Data'

    proc_control_B.TmpSignalConversionAtMATLAB[4] =
      proc_control_B.In1_pd.AngularVelocity.X;
    proc_control_B.TmpSignalConversionAtMATLAB[5] =
      proc_control_B.In1_pd.AngularVelocity.Y;
    proc_control_B.TmpSignalConversionAtMATLAB[6] =
      proc_control_B.In1_pd.AngularVelocity.Z;

    // End of Outputs for SubSystem: '<S8>/AHRS//Detph Mesurments'

    // Outputs for Atomic SubSystem: '<S66>/Subscribe1'
    // MATLABSystem: '<S78>/SourceBlock'
    rtb_NewDvlMsg = Sub_proc_control_31_1242.getLatestMessage
      (&proc_control_B.msg_b);

    // Outputs for Enabled SubSystem: '<S78>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S82>/Enable'

    if (rtb_NewDvlMsg) {
      // SignalConversion generated from: '<S82>/In1'
      proc_control_B.In1_c = proc_control_B.msg_b;
    }

    // End of Outputs for SubSystem: '<S78>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S66>/Subscribe1'

    // SignalConversion generated from: '<S66>/dvl data' incorporates:
    //   MATLABSystem: '<S78>/SourceBlock'
    //   Merge: '<S3>/Merge2'

    proc_control_B.t15 = proc_control_B.In1_c.XVelBtm;
    proc_control_B.t16 = proc_control_B.In1_c.YVelBtm;
    proc_control_B.t63 = proc_control_B.In1_c.ZVelBtm;
    proc_control_B.t6 = proc_control_B.In1_c.Velocity1;
    proc_control_B.oc = proc_control_B.In1_c.Velocity2;
    proc_control_B.ob = proc_control_B.In1_c.Velocity3;
    proc_control_B.oa = proc_control_B.In1_c.Velocity4;

    // Outputs for Atomic SubSystem: '<S66>/Subscribe depth'
    // MATLABSystem: '<S77>/SourceBlock'
    rtb_newPressureMsg = Sub_proc_control_31_1305.getLatestMessage
      (&proc_control_B.b_varargout_2_d);

    // Outputs for Enabled SubSystem: '<S77>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S81>/Enable'

    if (rtb_newPressureMsg) {
      // SignalConversion generated from: '<S81>/In1'
      proc_control_B.In1_om = proc_control_B.b_varargout_2_d;
    }

    // End of Outputs for SubSystem: '<S77>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S66>/Subscribe depth'

    // SignalConversion generated from: '<S66>/depth data' incorporates:
    //   MATLABSystem: '<S77>/SourceBlock'
    //   Merge: '<S3>/Merge4'

    proc_control_B.rtb_Merge4_Data = proc_control_B.In1_om.Data;

    // Outputs for Atomic SubSystem: '<S66>/Subscribe2'
    // MATLABSystem: '<S79>/SourceBlock'
    Sub_proc_control_31_1318.getLatestMessage(&proc_control_B.BusAssignment);

    // End of Outputs for SubSystem: '<S66>/Subscribe2'
    // End of Outputs for SubSystem: '<S3>/Simulation'
  } else {
    // Outputs for IfAction SubSystem: '<S3>/AUV8' incorporates:
    //   ActionPort: '<S65>/Action Port'

    // Outputs for Atomic SubSystem: '<S65>/Subscribe'
    // MATLABSystem: '<S68>/SourceBlock'
    rtb_Merge = Sub_proc_control_31_5.getLatestMessage(&proc_control_B.msg_c);

    // Outputs for Enabled SubSystem: '<S68>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S72>/Enable'

    if (rtb_Merge) {
      // SignalConversion generated from: '<S72>/In1'
      proc_control_B.In1_p = proc_control_B.msg_c;
    }

    // End of Outputs for SubSystem: '<S68>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S65>/Subscribe'

    // SignalConversion generated from: '<S65>/imu Data' incorporates:
    //   MATLABSystem: '<S68>/SourceBlock'
    //   Merge: '<S3>/Merge1'

    proc_control_B.Product1_gp = proc_control_B.In1_p.Orientation.X;
    proc_control_B.od = proc_control_B.In1_p.Orientation.Y;
    proc_control_B.Product2_j = proc_control_B.In1_p.Orientation.Z;
    proc_control_B.Product5 = proc_control_B.In1_p.Orientation.W;

    // Outputs for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
    // SignalConversion generated from: '<S237>/qS2W' incorporates:
    //   SignalConversion generated from: '<S65>/imu Data'

    proc_control_B.TmpSignalConversionAtMATLAB[4] =
      proc_control_B.In1_p.AngularVelocity.X;
    proc_control_B.TmpSignalConversionAtMATLAB[5] =
      proc_control_B.In1_p.AngularVelocity.Y;
    proc_control_B.TmpSignalConversionAtMATLAB[6] =
      proc_control_B.In1_p.AngularVelocity.Z;

    // End of Outputs for SubSystem: '<S8>/AHRS//Detph Mesurments'

    // Outputs for Atomic SubSystem: '<S65>/Subscribe1'
    // MATLABSystem: '<S69>/SourceBlock'
    rtb_NewDvlMsg = Sub_proc_control_31_1235.getLatestMessage
      (&proc_control_B.msg_b);

    // Outputs for Enabled SubSystem: '<S69>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S73>/Enable'

    if (rtb_NewDvlMsg) {
      // SignalConversion generated from: '<S73>/In1'
      proc_control_B.In1_i = proc_control_B.msg_b;
    }

    // End of Outputs for SubSystem: '<S69>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S65>/Subscribe1'

    // SignalConversion generated from: '<S65>/dvl data' incorporates:
    //   MATLABSystem: '<S69>/SourceBlock'
    //   Merge: '<S3>/Merge2'

    proc_control_B.t15 = proc_control_B.In1_i.XVelBtm;
    proc_control_B.t16 = proc_control_B.In1_i.YVelBtm;
    proc_control_B.t63 = proc_control_B.In1_i.ZVelBtm;
    proc_control_B.t6 = proc_control_B.In1_i.Velocity1;
    proc_control_B.oc = proc_control_B.In1_i.Velocity2;
    proc_control_B.ob = proc_control_B.In1_i.Velocity3;
    proc_control_B.oa = proc_control_B.In1_i.Velocity4;

    // Outputs for Atomic SubSystem: '<S65>/Subscribe2'
    // MATLABSystem: '<S70>/SourceBlock'
    rtb_newPressureMsg = Sub_proc_control_31_1302.getLatestMessage
      (&proc_control_B.b_varargout_2_d);

    // Outputs for Enabled SubSystem: '<S70>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S74>/Enable'

    if (rtb_newPressureMsg) {
      // SignalConversion generated from: '<S74>/In1'
      proc_control_B.In1_e = proc_control_B.b_varargout_2_d;
    }

    // End of Outputs for SubSystem: '<S70>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S65>/Subscribe2'

    // SignalConversion generated from: '<S65>/depth data' incorporates:
    //   MATLABSystem: '<S70>/SourceBlock'
    //   Merge: '<S3>/Merge4'

    proc_control_B.rtb_Merge4_Data = proc_control_B.In1_e.Data;

    // Outputs for Atomic SubSystem: '<S65>/Subscribe3'
    // MATLABSystem: '<S71>/SourceBlock'
    Sub_proc_control_31_1321.getLatestMessage(&proc_control_B.BusAssignment);

    // End of Outputs for SubSystem: '<S65>/Subscribe3'
    // End of Outputs for SubSystem: '<S3>/AUV8'
  }

  // End of SwitchCase: '<S3>/Switch Case'

  // Outputs for Atomic SubSystem: '<S8>/AHRS//Detph Mesurments'
  // MATLAB Function: '<S237>/ ' incorporates:
  //   Merge: '<S3>/Merge1'
  //   SignalConversion generated from: '<S244>/ SFunction '

  proc_control_B.scale = 3.3121686421112381E-170;
  proc_control_B.absxk = std::abs(proc_control_B.Product5);
  if (proc_control_B.absxk > 3.3121686421112381E-170) {
    proc_control_B.d = 1.0;
    proc_control_B.scale = proc_control_B.absxk;
  } else {
    proc_control_B.t = proc_control_B.absxk / 3.3121686421112381E-170;
    proc_control_B.d = proc_control_B.t * proc_control_B.t;
  }

  proc_control_B.absxk = std::abs(proc_control_B.Product1_gp);
  if (proc_control_B.absxk > proc_control_B.scale) {
    proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
    proc_control_B.d = proc_control_B.d * proc_control_B.t * proc_control_B.t +
      1.0;
    proc_control_B.scale = proc_control_B.absxk;
  } else {
    proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
    proc_control_B.d += proc_control_B.t * proc_control_B.t;
  }

  proc_control_B.absxk = std::abs(proc_control_B.od);
  if (proc_control_B.absxk > proc_control_B.scale) {
    proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
    proc_control_B.d = proc_control_B.d * proc_control_B.t * proc_control_B.t +
      1.0;
    proc_control_B.scale = proc_control_B.absxk;
  } else {
    proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
    proc_control_B.d += proc_control_B.t * proc_control_B.t;
  }

  proc_control_B.absxk = std::abs(proc_control_B.Product2_j);
  if (proc_control_B.absxk > proc_control_B.scale) {
    proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
    proc_control_B.d = proc_control_B.d * proc_control_B.t * proc_control_B.t +
      1.0;
    proc_control_B.scale = proc_control_B.absxk;
  } else {
    proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
    proc_control_B.d += proc_control_B.t * proc_control_B.t;
  }

  proc_control_B.d = proc_control_B.scale * std::sqrt(proc_control_B.d);
  proc_control_B.n_c = proc_control_B.Product5 / proc_control_B.d;
  proc_control_B.b_n[0] = std::isnan(proc_control_B.n_c);
  proc_control_B.n[0] = proc_control_B.n_c;
  proc_control_B.n_c = proc_control_B.Product1_gp / proc_control_B.d;
  proc_control_B.b_n[1] = std::isnan(proc_control_B.n_c);
  proc_control_B.n[1] = proc_control_B.n_c;
  proc_control_B.n_c = proc_control_B.od / proc_control_B.d;
  proc_control_B.b_n[2] = std::isnan(proc_control_B.n_c);
  proc_control_B.n[2] = proc_control_B.n_c;
  proc_control_B.n_c = proc_control_B.Product2_j / proc_control_B.d;
  proc_control_B.b_n[3] = std::isnan(proc_control_B.n_c);
  proc_control_B.n[3] = proc_control_B.n_c;
  rtb_Reset = true;
  proc_control_B.ibmat = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_B.ibmat < 4)) {
    if (!proc_control_B.b_n[proc_control_B.ibmat]) {
      rtb_Reset = false;
      exitg1 = true;
    } else {
      proc_control_B.ibmat++;
    }
  }

  if (rtb_Reset) {
    proc_control_B.n[0] = 1.0;
    proc_control_B.n[1] = 0.0;
    proc_control_B.n[2] = 0.0;
    proc_control_B.n[3] = 0.0;
  }

  // End of MATLAB Function: '<S237>/ '

  // Sum: '<S250>/Sum' incorporates:
  //   Product: '<S250>/Product'
  //   Product: '<S250>/Product1'
  //   Product: '<S250>/Product2'
  //   Product: '<S250>/Product3'
  //   UnaryMinus: '<S245>/Unary Minus'
  //   UnaryMinus: '<S245>/Unary Minus1'
  //   UnaryMinus: '<S245>/Unary Minus2'

  proc_control_B.Product8 = ((proc_control_B.n[0] * proc_control_B.n[0] +
    -proc_control_B.n[1] * -proc_control_B.n[1]) + -proc_control_B.n[2] *
    -proc_control_B.n[2]) + -proc_control_B.n[3] * -proc_control_B.n[3];

  // SignalConversion generated from: '<S237>/qS2W' incorporates:
  //   Product: '<S246>/Divide'
  //   Product: '<S246>/Divide1'
  //   Product: '<S246>/Divide2'
  //   Product: '<S246>/Divide3'
  //   UnaryMinus: '<S245>/Unary Minus'
  //   UnaryMinus: '<S245>/Unary Minus1'
  //   UnaryMinus: '<S245>/Unary Minus2'

  proc_control_B.TmpSignalConversionAtMATLAB[0] = proc_control_B.n[0] /
    proc_control_B.Product8;
  proc_control_B.TmpSignalConversionAtMATLAB[1] = proc_control_B.n[1] /
    proc_control_B.Product8;
  proc_control_B.TmpSignalConversionAtMATLAB[2] = proc_control_B.n[2] /
    proc_control_B.Product8;
  proc_control_B.TmpSignalConversionAtMATLAB[3] = proc_control_B.n[3] /
    proc_control_B.Product8;

  // End of Outputs for SubSystem: '<S8>/AHRS//Detph Mesurments'

  // Outputs for Enabled SubSystem: '<S8>/Detph Mesurments' incorporates:
  //   EnablePort: '<S239>/Enable'

  if (rtb_newPressureMsg) {
    // Sqrt: '<S280>/sqrt' incorporates:
    //   Merge: '<S3>/Merge1'
    //   Product: '<S281>/Product'
    //   Product: '<S281>/Product1'
    //   Product: '<S281>/Product2'
    //   Product: '<S281>/Product3'
    //   Sum: '<S281>/Sum'

    proc_control_B.Product8 = std::sqrt(((proc_control_B.Product5 *
      proc_control_B.Product5 + proc_control_B.Product1_gp *
      proc_control_B.Product1_gp) + proc_control_B.od * proc_control_B.od) +
      proc_control_B.Product2_j * proc_control_B.Product2_j);

    // Product: '<S276>/Product1' incorporates:
    //   Merge: '<S3>/Merge1'

    proc_control_B.Product1_gp /= proc_control_B.Product8;

    // Product: '<S276>/Product3' incorporates:
    //   Merge: '<S3>/Merge1'

    proc_control_B.Product2_j /= proc_control_B.Product8;

    // Product: '<S276>/Product' incorporates:
    //   Merge: '<S3>/Merge1'

    proc_control_B.Product5 /= proc_control_B.Product8;

    // Product: '<S276>/Product2' incorporates:
    //   Merge: '<S3>/Merge1'

    proc_control_B.Product8 = proc_control_B.od / proc_control_B.Product8;

    // Sum: '<S239>/Sum' incorporates:
    //   Constant: '<S239>/Constant'
    //   Constant: '<S279>/Constant'
    //   Gain: '<S279>/Gain'
    //   Gain: '<S279>/Gain1'
    //   Gain: '<S279>/Gain2'
    //   Merge: '<S3>/Merge4'
    //   Product: '<S279>/Product'
    //   Product: '<S279>/Product1'
    //   Product: '<S279>/Product2'
    //   Product: '<S279>/Product3'
    //   Product: '<S279>/Product4'
    //   Product: '<S279>/Product5'
    //   Product: '<S279>/Product6'
    //   Product: '<S279>/Product7'
    //   Product: '<S279>/Product8'
    //   Sum: '<S279>/Sum'
    //   Sum: '<S279>/Sum1'
    //   Sum: '<S279>/Sum2'
    //   Sum: '<S279>/Sum3'

    proc_control_B.zposition = proc_control_B.rtb_Merge4_Data -
      (((proc_control_B.Product1_gp * proc_control_B.Product2_j +
         proc_control_B.Product5 * proc_control_B.Product8) *
        proc_control_P.Gain_Gain_bk * proc_control_P.physics.DepthPose[0] +
        (proc_control_B.Product8 * proc_control_B.Product2_j -
         proc_control_B.Product5 * proc_control_B.Product1_gp) *
        proc_control_P.Gain1_Gain_p * proc_control_P.physics.DepthPose[1]) +
       ((proc_control_P.Constant_Value_ay - proc_control_B.Product1_gp *
         proc_control_B.Product1_gp) - proc_control_B.Product8 *
        proc_control_B.Product8) * proc_control_P.Gain2_Gain_dh *
       proc_control_P.physics.DepthPose[2]);

    // SampleTimeMath: '<S274>/TSamp'
    //
    //  About '<S274>/TSamp':
    //   y = u * K where K = 1 / ( w * Ts )

    proc_control_B.Product8 = proc_control_B.zposition *
      proc_control_P.TSamp_WtEt_n;

    // DiscreteTransferFcn: '<S239>/Discrete Transfer Fcn1' incorporates:
    //   Sum: '<S274>/Diff'
    //   UnitDelay: '<S274>/UD'
    //
    //  Block description for '<S274>/Diff':
    //
    //   Add in CPU
    //
    //  Block description for '<S274>/UD':
    //
    //   Store in Global RAM

    proc_control_B.Product2_j = ((proc_control_B.Product8 -
      proc_control_DW.UD_DSTATE) -
      proc_control_P.DiscreteTransferFcn1_DenCoef_k[1] *
      proc_control_DW.DiscreteTransferFcn1_states) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_k[0];

    // DiscreteTransferFcn: '<S239>/Discrete Transfer Fcn1'
    proc_control_B.zvelocity = proc_control_P.DiscreteTransferFcn1_NumCoef_kc[0]
      * proc_control_B.Product2_j +
      proc_control_P.DiscreteTransferFcn1_NumCoef_kc[1] *
      proc_control_DW.DiscreteTransferFcn1_states;

    // Update for UnitDelay: '<S274>/UD'
    //
    //  Block description for '<S274>/UD':
    //
    //   Store in Global RAM

    proc_control_DW.UD_DSTATE = proc_control_B.Product8;

    // Update for DiscreteTransferFcn: '<S239>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states = proc_control_B.Product2_j;
  }

  // End of Outputs for SubSystem: '<S8>/Detph Mesurments'

  // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
  //   EnablePort: '<S238>/Enable'

  if (rtb_NewDvlMsg) {
    // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
    //   EnablePort: '<S266>/Enable'

    // Delay: '<S263>/Delay'
    if (proc_control_DW.Delay_DSTATE_i > 0.0) {
      // Gain: '<S267>/1//2' incorporates:
      //   Constant: '<S266>/si y devant'

      proc_control_B.rtb_u2_n = proc_control_P.u2_Gain_b *
        proc_control_P.physics.dvlRotation[0];

      // Trigonometry: '<S267>/sincos'
      proc_control_B.sincos_o2[0] = std::sin(proc_control_B.rtb_u2_n);
      proc_control_B.rtb_Sum6_idx_0 = std::cos(proc_control_B.rtb_u2_n);

      // Gain: '<S267>/1//2' incorporates:
      //   Constant: '<S266>/si y devant'

      proc_control_B.rtb_u2_n = proc_control_P.u2_Gain_b *
        proc_control_P.physics.dvlRotation[1];

      // Trigonometry: '<S267>/sincos'
      proc_control_B.sincos_o2[1] = std::sin(proc_control_B.rtb_u2_n);
      proc_control_B.rtb_Sum6_idx_1 = std::cos(proc_control_B.rtb_u2_n);

      // Gain: '<S267>/1//2' incorporates:
      //   Constant: '<S266>/si y devant'

      proc_control_B.rtb_u2_n = proc_control_P.u2_Gain_b *
        proc_control_P.physics.dvlRotation[2];

      // Trigonometry: '<S267>/sincos'
      proc_control_B.sincos_o2[2] = std::sin(proc_control_B.rtb_u2_n);
      proc_control_B.rtb_Sum6_idx_2 = std::cos(proc_control_B.rtb_u2_n);

      // Fcn: '<S267>/q0' incorporates:
      //   Fcn: '<S267>/q3'

      proc_control_B.t65 = proc_control_B.rtb_Sum6_idx_0 *
        proc_control_B.rtb_Sum6_idx_1;
      proc_control_B.d = proc_control_B.sincos_o2[0] * proc_control_B.sincos_o2
        [1];

      // Fcn: '<S267>/q0'
      proc_control_B.q0 = proc_control_B.t65 * proc_control_B.rtb_Sum6_idx_2 -
        proc_control_B.d * proc_control_B.sincos_o2[2];

      // Fcn: '<S267>/q1' incorporates:
      //   Fcn: '<S267>/q2'

      proc_control_B.t4 = proc_control_B.rtb_Sum6_idx_0 *
        proc_control_B.sincos_o2[1];
      proc_control_B.t3 = proc_control_B.sincos_o2[0] *
        proc_control_B.rtb_Sum6_idx_1;

      // Fcn: '<S267>/q1'
      proc_control_B.q1 = proc_control_B.t4 * proc_control_B.sincos_o2[2] +
        proc_control_B.t3 * proc_control_B.rtb_Sum6_idx_2;

      // Fcn: '<S267>/q2'
      proc_control_B.q2 = proc_control_B.t4 * proc_control_B.rtb_Sum6_idx_2 -
        proc_control_B.t3 * proc_control_B.sincos_o2[2];

      // Fcn: '<S267>/q3'
      proc_control_B.q3 = proc_control_B.t65 * proc_control_B.sincos_o2[2] +
        proc_control_B.d * proc_control_B.rtb_Sum6_idx_2;
    }

    // End of Delay: '<S263>/Delay'
    // End of Outputs for SubSystem: '<S263>/Subsystem2'

    // MATLAB Function: '<S238>/MATLAB Function1' incorporates:
    //   Constant: '<S238>/Constant1'
    //   Merge: '<S3>/Merge2'
    //   SignalConversion generated from: '<S264>/ SFunction '

    proc_control_B.u2[0] = std::abs(proc_control_B.t15);
    proc_control_B.u2[1] = std::abs(proc_control_B.t16);
    proc_control_B.u2[2] = std::abs(proc_control_B.t63);
    if (!std::isnan(proc_control_B.u2[0])) {
      proc_control_B.i = 1;
    } else {
      proc_control_B.i = 0;
      proc_control_B.ibmat = 2;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.ibmat <= 3)) {
        if (!std::isnan(proc_control_B.u2[proc_control_B.ibmat - 1])) {
          proc_control_B.i = proc_control_B.ibmat;
          exitg1 = true;
        } else {
          proc_control_B.ibmat++;
        }
      }
    }

    if (proc_control_B.i == 0) {
      proc_control_B.Divide_i = proc_control_B.u2[0];
    } else {
      proc_control_B.Divide_i = proc_control_B.u2[proc_control_B.i - 1];
      while (proc_control_B.i + 1 <= 3) {
        if (proc_control_B.Divide_i < proc_control_B.u2[proc_control_B.i]) {
          proc_control_B.Divide_i = proc_control_B.u2[proc_control_B.i];
        }

        proc_control_B.i++;
      }
    }

    if (proc_control_B.Divide_i < proc_control_P.Constant1_Value_a) {
      proc_control_B.u2[0] = proc_control_B.t15;
      proc_control_B.u2[1] = proc_control_B.t16;
      proc_control_B.u2[2] = proc_control_B.t63;
    } else {
      proc_control_B.TmpSignalConversionAtSFunct[0] = std::abs(proc_control_B.t6);
      proc_control_B.TmpSignalConversionAtSFunct[1] = std::abs(proc_control_B.oc);
      proc_control_B.TmpSignalConversionAtSFunct[2] = std::abs(proc_control_B.ob);
      proc_control_B.TmpSignalConversionAtSFunct[3] = std::abs(proc_control_B.oa);
      if (!std::isnan(proc_control_B.TmpSignalConversionAtSFunct[0])) {
        proc_control_B.i = 1;
      } else {
        proc_control_B.i = 0;
        proc_control_B.ibmat = 2;
        exitg1 = false;
        while ((!exitg1) && (proc_control_B.ibmat <= 4)) {
          if (!std::isnan
              (proc_control_B.TmpSignalConversionAtSFunct[proc_control_B.ibmat -
               1])) {
            proc_control_B.i = proc_control_B.ibmat;
            exitg1 = true;
          } else {
            proc_control_B.ibmat++;
          }
        }
      }

      if (proc_control_B.i == 0) {
        proc_control_B.Divide_i = proc_control_B.TmpSignalConversionAtSFunct[0];
      } else {
        proc_control_B.Divide_i =
          proc_control_B.TmpSignalConversionAtSFunct[proc_control_B.i - 1];
        while (proc_control_B.i + 1 <= 4) {
          if (proc_control_B.Divide_i <
              proc_control_B.TmpSignalConversionAtSFunct[proc_control_B.i]) {
            proc_control_B.Divide_i =
              proc_control_B.TmpSignalConversionAtSFunct[proc_control_B.i];
          }

          proc_control_B.i++;
        }
      }

      if (proc_control_B.Divide_i < proc_control_P.Constant1_Value_a) {
        proc_control_B.u2[0] = proc_control_B.t6;
        proc_control_B.u2[1] = proc_control_B.oc;
        proc_control_B.u2[2] = proc_control_B.ob;
      } else {
        proc_control_B.u2[0] = 0.0;
        proc_control_B.u2[1] = 0.0;
        proc_control_B.u2[2] = proc_control_B.zvelocity;
      }
    }

    // End of MATLAB Function: '<S238>/MATLAB Function1'

    // Sqrt: '<S272>/sqrt' incorporates:
    //   Product: '<S273>/Product'
    //   Product: '<S273>/Product1'
    //   Product: '<S273>/Product2'
    //   Product: '<S273>/Product3'
    //   Sum: '<S273>/Sum'

    proc_control_B.Divide_i = std::sqrt(((proc_control_B.q0 * proc_control_B.q0
      + proc_control_B.q1 * proc_control_B.q1) + proc_control_B.q2 *
      proc_control_B.q2) + proc_control_B.q3 * proc_control_B.q3);

    // Product: '<S268>/Product'
    proc_control_B.Product8 = proc_control_B.q0 / proc_control_B.Divide_i;

    // Product: '<S268>/Product1'
    proc_control_B.Product1_gp = proc_control_B.q1 / proc_control_B.Divide_i;

    // Product: '<S268>/Product2'
    proc_control_B.Product2_j = proc_control_B.q2 / proc_control_B.Divide_i;

    // Product: '<S268>/Product3'
    proc_control_B.Divide_i = proc_control_B.q3 / proc_control_B.Divide_i;

    // Product: '<S269>/Product7' incorporates:
    //   Product: '<S270>/Product7'

    proc_control_B.t65 = proc_control_B.Divide_i * proc_control_B.Divide_i;

    // Product: '<S269>/Product' incorporates:
    //   Product: '<S270>/Product'

    proc_control_B.d = proc_control_B.Product1_gp * proc_control_B.Product2_j;

    // Product: '<S269>/Product1' incorporates:
    //   Product: '<S270>/Product1'

    proc_control_B.t4 = proc_control_B.Product8 * proc_control_B.Divide_i;

    // Product: '<S269>/Product2' incorporates:
    //   Product: '<S271>/Product1'

    proc_control_B.t15 = proc_control_B.Product8 * proc_control_B.Product2_j;

    // Product: '<S269>/Product6' incorporates:
    //   Product: '<S271>/Product7'

    proc_control_B.t3 = proc_control_B.Product2_j * proc_control_B.Product2_j;

    // Product: '<S269>/Product3' incorporates:
    //   Product: '<S271>/Product'

    proc_control_B.absxk = proc_control_B.Product1_gp * proc_control_B.Divide_i;

    // Sum: '<S269>/Sum' incorporates:
    //   Constant: '<S269>/Constant'
    //   Gain: '<S269>/Gain'
    //   Gain: '<S269>/Gain1'
    //   Gain: '<S269>/Gain2'
    //   Product: '<S269>/Product'
    //   Product: '<S269>/Product1'
    //   Product: '<S269>/Product2'
    //   Product: '<S269>/Product3'
    //   Product: '<S269>/Product4'
    //   Product: '<S269>/Product5'
    //   Product: '<S269>/Product6'
    //   Product: '<S269>/Product7'
    //   Product: '<S269>/Product8'
    //   Sum: '<S269>/Sum1'
    //   Sum: '<S269>/Sum2'
    //   Sum: '<S269>/Sum3'

    proc_control_B.Sum = (((proc_control_P.Constant_Value_fg - proc_control_B.t3)
      - proc_control_B.t65) * proc_control_P.Gain2_Gain_o * proc_control_B.u2[0]
                          + (proc_control_B.d + proc_control_B.t4) *
                          proc_control_P.Gain_Gain_o * proc_control_B.u2[1]) +
      (proc_control_B.absxk - proc_control_B.t15) * proc_control_P.Gain1_Gain_k *
      proc_control_B.u2[2];

    // Product: '<S270>/Product2' incorporates:
    //   Product: '<S271>/Product2'

    proc_control_B.t57 = proc_control_B.Product8 * proc_control_B.Product1_gp;

    // Product: '<S270>/Product6' incorporates:
    //   Product: '<S271>/Product6'

    proc_control_B.od_f = proc_control_B.Product1_gp *
      proc_control_B.Product1_gp;

    // Product: '<S270>/Product3' incorporates:
    //   Product: '<S271>/Product3'

    proc_control_B.scale = proc_control_B.Product2_j * proc_control_B.Divide_i;

    // Sum: '<S270>/Sum' incorporates:
    //   Constant: '<S270>/Constant'
    //   Gain: '<S270>/Gain'
    //   Gain: '<S270>/Gain1'
    //   Gain: '<S270>/Gain2'
    //   Product: '<S270>/Product2'
    //   Product: '<S270>/Product3'
    //   Product: '<S270>/Product4'
    //   Product: '<S270>/Product5'
    //   Product: '<S270>/Product6'
    //   Product: '<S270>/Product8'
    //   Sum: '<S270>/Sum1'
    //   Sum: '<S270>/Sum2'
    //   Sum: '<S270>/Sum3'

    proc_control_B.Sum_o = (((proc_control_P.Constant_Value_j -
      proc_control_B.od_f) - proc_control_B.t65) * proc_control_P.Gain2_Gain_k *
      proc_control_B.u2[1] + (proc_control_B.d - proc_control_B.t4) *
      proc_control_P.Gain_Gain_mq * proc_control_B.u2[0]) + (proc_control_B.t57
      + proc_control_B.scale) * proc_control_P.Gain1_Gain_bk *
      proc_control_B.u2[2];

    // Sum: '<S271>/Sum' incorporates:
    //   Constant: '<S271>/Constant'
    //   Gain: '<S271>/Gain'
    //   Gain: '<S271>/Gain1'
    //   Gain: '<S271>/Gain2'
    //   Product: '<S271>/Product4'
    //   Product: '<S271>/Product5'
    //   Product: '<S271>/Product8'
    //   Sum: '<S271>/Sum1'
    //   Sum: '<S271>/Sum2'
    //   Sum: '<S271>/Sum3'

    proc_control_B.Sum_c = ((proc_control_B.absxk + proc_control_B.t15) *
      proc_control_P.Gain_Gain_nh * proc_control_B.u2[0] + (proc_control_B.scale
      - proc_control_B.t57) * proc_control_P.Gain1_Gain_c * proc_control_B.u2[1])
      + ((proc_control_P.Constant_Value_ol - proc_control_B.od_f) -
         proc_control_B.t3) * proc_control_P.Gain2_Gain_br * proc_control_B.u2[2];

    // Update for Delay: '<S263>/Delay' incorporates:
    //   Constant: '<S263>/Constant6'

    proc_control_DW.Delay_DSTATE_i = proc_control_P.Constant6_Value;
  }

  // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // Logic: '<S241>/NOT'
    proc_control_B.NOT = !(proc_control_B.MATLABSystem_o4 != 0.0);
  }

  // Outputs for Enabled SubSystem: '<S3>/Subsystem' incorporates:
  //   EnablePort: '<S67>/Enable'

  // Logic: '<S3>/NOT' incorporates:
  //   Delay: '<S3>/Delay'

  if (!(proc_control_B.y != 0.0)) {
    // Switch: '<S87>/Reset' incorporates:
    //   Constant: '<S67>/Constant1'
    //   Constant: '<S87>/Initial Condition'
    //   Memory: '<S87>/Memory'
    //   MinMax: '<S85>/MinMax'

    if (proc_control_P.Constant1_Value_h != 0.0) {
      rtb_Reset = proc_control_P.MinMaxRunningResettable_vinit;
    } else {
      rtb_Reset = (rtb_NewDvlMsg || proc_control_DW.Memory_PreviousInput_i);
    }

    // End of Switch: '<S87>/Reset'

    // Switch: '<S88>/Reset' incorporates:
    //   Constant: '<S67>/Constant'
    //   Constant: '<S88>/Initial Condition'
    //   Memory: '<S88>/Memory'
    //   MinMax: '<S86>/MinMax'

    if (proc_control_P.Constant_Value_f2j != 0.0) {
      rtb_Merge = proc_control_P.MinMaxRunningResettable1_vinit;
    } else {
      rtb_Merge = (rtb_Merge || proc_control_DW.Memory_PreviousInput_f);
    }

    // End of Switch: '<S88>/Reset'

    // MATLAB Function: '<S67>/MATLAB Function'
    proc_control_B.y = (rtb_Reset + rtb_Merge >= 2);

    // Update for Memory: '<S87>/Memory'
    proc_control_DW.Memory_PreviousInput_i = rtb_Reset;

    // Update for Memory: '<S88>/Memory'
    proc_control_DW.Memory_PreviousInput_f = rtb_Merge;
  }

  // End of Logic: '<S3>/NOT'
  // End of Outputs for SubSystem: '<S3>/Subsystem'

  // Logic: '<S241>/AND'
  rtb_Merge = (proc_control_B.NOT && (proc_control_B.y != 0.0));

  // Outputs for Enabled SubSystem: '<S8>/Subsystem' incorporates:
  //   EnablePort: '<S242>/Enable'

  if (rtb_Merge) {
    // Outputs for Enabled SubSystem: '<S285>/Correct1' incorporates:
    //   EnablePort: '<S286>/Enable'

    // Constant: '<S285>/Enable1'
    if (proc_control_P.Enable1_Value) {
      // MATLAB Function: '<S286>/Correct' incorporates:
      //   Constant: '<S285>/BlockOrdering'
      //   Constant: '<S285>/R1'
      //   DataStoreRead: '<S286>/Data Store ReadX'
      //   DataStoreWrite: '<S286>/Data Store WriteP'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S239>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S135>/N to A'
      //   Lookup_n-D: '<S135>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   Trigonometry: '<S267>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //   UniformRandomNumber: '<S12>/ Drift'
      //
      proc_control_B.blockOrdering_o = proc_control_P.BlockOrdering_Value;
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 7; proc_control_B.jp1j
           ++) {
        proc_control_B.z_f[proc_control_B.jp1j] =
          proc_control_DW.x[b[proc_control_B.jp1j]];
      }

      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        std::memcpy(&proc_control_B.TmpSignalConversionAtMAT_lt[0],
                    &proc_control_DW.x[0], 13U * sizeof(real_T));
        proc_control_B.Product8 = std::fmax(1.4901161193847656E-8,
          1.4901161193847656E-8 * std::abs
          (proc_control_DW.x[proc_control_B.ibmat]));
        proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.ibmat] =
          proc_control_DW.x[proc_control_B.ibmat] + proc_control_B.Product8;
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 7;
             proc_control_B.jp1j++) {
          proc_control_B.dHdx[proc_control_B.jp1j + 7 * proc_control_B.ibmat] =
            (proc_control_B.TmpSignalConversionAtMAT_lt[b[proc_control_B.jp1j]]
             - proc_control_B.z_f[proc_control_B.jp1j]) /
            proc_control_B.Product8;
        }
      }

      proc_control_qrFactor_MMa7wW5h(proc_control_B.dHdx, proc_control_DW.P,
        proc_control_P.R1_Value, proc_control_B.Sy);
      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++) {
        std::memset(&proc_control_B.A_f[proc_control_B.jp1j], 0, 13U * sizeof
                    (real_T));
        proc_control_B.jp1j += 13;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++)
        {
          for (proc_control_B.jA = 0; proc_control_B.jA < 13; proc_control_B.jA
               ++) {
            proc_control_B.i = 13 * proc_control_B.jj + proc_control_B.jA;
            proc_control_B.A_f[proc_control_B.i] += proc_control_DW.P[13 *
              proc_control_B.jp1j + proc_control_B.jA] * proc_control_DW.P[13 *
              proc_control_B.jp1j + proc_control_B.jj];
          }
        }

        for (proc_control_B.jj = 0; proc_control_B.jj < 7; proc_control_B.jj++)
        {
          proc_control_B.K[proc_control_B.jj + 7 * proc_control_B.jp1j] = 0.0;
        }
      }

      proc_control_B.jp1j = 0;
      proc_control_B.jA = 0;
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        proc_control_B.ibmat = 0;
        for (proc_control_B.c_l = 0; proc_control_B.c_l < 13; proc_control_B.c_l
             ++) {
          for (proc_control_B.jj = 0; proc_control_B.jj < 7; proc_control_B.jj++)
          {
            proc_control_B.Ns_f = proc_control_B.jj + proc_control_B.ibmat;
            proc_control_B.K[proc_control_B.Ns_f] +=
              proc_control_B.A_f[proc_control_B.c_l + proc_control_B.jp1j] *
              proc_control_B.dHdx[proc_control_B.jj + proc_control_B.jA];
          }

          proc_control_B.ibmat += 7;
        }

        proc_control_B.jp1j += 13;
        proc_control_B.jA += 7;
      }

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S238>/Enable'

      // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
      //   EnablePort: '<S266>/Enable'

      proc_control_B.jp1j = 0;

      // End of Outputs for SubSystem: '<S263>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        for (proc_control_B.jj = 0; proc_control_B.jj < 7; proc_control_B.jj++)
        {
          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S238>/Enable'

          // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
          //   EnablePort: '<S266>/Enable'

          proc_control_B.C_tmp = proc_control_B.jj + proc_control_B.jp1j;
          proc_control_B.C_p[proc_control_B.C_tmp] =
            proc_control_B.K[proc_control_B.C_tmp];

          // End of Outputs for SubSystem: '<S263>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        }

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S238>/Enable'

        // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
        //   EnablePort: '<S266>/Enable'

        proc_control_B.jp1j += 7;

        // End of Outputs for SubSystem: '<S263>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      trisolve_Ewqm83ue(proc_control_B.Sy, proc_control_B.C_p);

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S238>/Enable'

      // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
      //   EnablePort: '<S266>/Enable'

      proc_control_B.jp1j = 0;

      // End of Outputs for SubSystem: '<S263>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        for (proc_control_B.jA = 0; proc_control_B.jA < 7; proc_control_B.jA++)
        {
          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S238>/Enable'

          // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
          //   EnablePort: '<S266>/Enable'

          proc_control_B.C_tmp = proc_control_B.jA + proc_control_B.jp1j;
          proc_control_B.b_C_f[proc_control_B.C_tmp] =
            proc_control_B.C_p[proc_control_B.C_tmp];

          // End of Outputs for SubSystem: '<S263>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        }

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S238>/Enable'

        // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
        //   EnablePort: '<S266>/Enable'

        proc_control_B.jp1j += 7;

        // End of Outputs for SubSystem: '<S263>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 7; proc_control_B.jj++) {
        proc_control_B.jA = 0;
        for (proc_control_B.i = 0; proc_control_B.i < 7; proc_control_B.i++) {
          proc_control_B.Sy_p[proc_control_B.i + proc_control_B.jp1j] =
            proc_control_B.Sy[proc_control_B.jA + proc_control_B.jj];
          proc_control_B.jA += 7;
        }

        proc_control_B.jp1j += 7;
      }

      trisolve_kmp7BqBh(proc_control_B.Sy_p, proc_control_B.b_C_f);
      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 7; proc_control_B.jj++) {
        proc_control_B.jA = 0;
        for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
          proc_control_B.K[proc_control_B.i + proc_control_B.jp1j] =
            proc_control_B.b_C_f[proc_control_B.jA + proc_control_B.jj];
          proc_control_B.jA += 7;
        }

        proc_control_B.jp1j += 13;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 91;
           proc_control_B.jp1j++) {
        proc_control_B.C_p[proc_control_B.jp1j] =
          -proc_control_B.K[proc_control_B.jp1j];
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        std::memset(&proc_control_B.A_f[proc_control_B.jp1j * 13], 0, 13U *
                    sizeof(real_T));
        for (proc_control_B.jA = 0; proc_control_B.jA < 7; proc_control_B.jA++)
        {
          for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj
               ++) {
            proc_control_B.C_tmp = 13 * proc_control_B.jp1j + proc_control_B.jj;
            proc_control_B.A_f[proc_control_B.C_tmp] += proc_control_B.C_p[13 *
              proc_control_B.jA + proc_control_B.jj] * proc_control_B.dHdx[7 *
              proc_control_B.jp1j + proc_control_B.jA];
          }
        }
      }

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for IfAction SubSystem: '<S133>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S136>/Action Port'

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S302>/Action Port'

      // SwitchCase: '<S133>/Switch Case' incorporates:
      //   MATLAB Function: '<S286>/Correct'
      //   MATLABSystem: '<S136>/MATLAB System'
      //   MATLABSystem: '<S302>/MATLAB System1'
      //   SwitchCase: '<S9>/Switch Case'

      proc_control_B.i = 0;

      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      // End of Outputs for SubSystem: '<S133>/Adaptive MPC quaternion '
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'

      // MATLAB Function: '<S286>/Correct' incorporates:
      //   Constant: '<S285>/R1'
      //   DataStoreRead: '<S286>/Data Store ReadX'
      //   DataStoreWrite: '<S286>/Data Store WriteP'
      //   MATLABSystem: '<S136>/MATLAB System'
      //   MATLABSystem: '<S302>/MATLAB System1'
      //   SwitchCase: '<S133>/Switch Case'
      //   SwitchCase: '<S9>/Switch Case'

      for (proc_control_B.C_tmp = 0; proc_control_B.C_tmp < 13;
           proc_control_B.C_tmp++) {
        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for IfAction SubSystem: '<S133>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S136>/Action Port'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S302>/Action Port'

        proc_control_B.A_f[proc_control_B.i]++;
        proc_control_B.i += 14;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<S133>/Adaptive MPC quaternion '
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 7; proc_control_B.jp1j
           ++) {
        std::memset(&proc_control_B.C_p[proc_control_B.jp1j * 13], 0, 13U *
                    sizeof(real_T));
        for (proc_control_B.jA = 0; proc_control_B.jA < 7; proc_control_B.jA++)
        {
          for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj
               ++) {
            proc_control_B.Ns_f = 13 * proc_control_B.jp1j + proc_control_B.jj;
            proc_control_B.C_p[proc_control_B.Ns_f] += proc_control_B.K[13 *
              proc_control_B.jA + proc_control_B.jj] * proc_control_P.R1_Value[7
              * proc_control_B.jp1j + proc_control_B.jA];
          }
        }
      }

      proc_control_qrFactor_1jDj6Vzn(proc_control_B.A_f, proc_control_DW.P,
        proc_control_B.C_p);
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 7; proc_control_B.jp1j
           ++) {
        proc_control_B.z_f[proc_control_B.jp1j] =
          proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.jp1j] -
          proc_control_DW.x[b[proc_control_B.jp1j]];
      }

      // DataStoreWrite: '<S286>/Data Store WriteX' incorporates:
      //   DataStoreRead: '<S286>/Data Store ReadX'
      //   MATLAB Function: '<S286>/Correct'

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        proc_control_B.rtb_u2_n = 0.0;
        proc_control_B.jj = 0;
        for (proc_control_B.jA = 0; proc_control_B.jA < 7; proc_control_B.jA++)
        {
          proc_control_B.rtb_u2_n += proc_control_B.K[proc_control_B.jj +
            proc_control_B.jp1j] * proc_control_B.z_f[proc_control_B.jA];
          proc_control_B.jj += 13;
        }

        proc_control_DW.x[proc_control_B.jp1j] += proc_control_B.rtb_u2_n;
      }

      // End of DataStoreWrite: '<S286>/Data Store WriteX'
    }

    // End of Constant: '<S285>/Enable1'
    // End of Outputs for SubSystem: '<S285>/Correct1'

    // Outputs for Enabled SubSystem: '<S285>/Correct2' incorporates:
    //   EnablePort: '<S287>/Enable'

    // DataTypeConversion: '<S285>/DataTypeConversion_Enable2' incorporates:
    //   Constant: '<S242>/Constant'

    if (proc_control_P.Constant_Value_lx != 0.0) {
      // MATLAB Function: '<S287>/Correct' incorporates:
      //   Constant: '<S285>/R2'
      //   DataStoreRead: '<S287>/Data Store ReadX'
      //   DataStoreWrite: '<S287>/Data Store WriteP'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S239>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S135>/N to A'
      //   Lookup_n-D: '<S135>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   Trigonometry: '<S267>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //   UniformRandomNumber: '<S12>/ Drift'
      //
      proc_control_B.C_tmp = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        std::memcpy(&proc_control_B.TmpSignalConversionAtMAT_lt[0],
                    &proc_control_DW.x[0], 13U * sizeof(real_T));
        proc_control_B.Product8 = std::fmax(1.4901161193847656E-8,
          1.4901161193847656E-8 * std::abs
          (proc_control_DW.x[proc_control_B.ibmat]));
        proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.ibmat] =
          proc_control_DW.x[proc_control_B.ibmat] + proc_control_B.Product8;
        proc_control_B.dHdx_c[proc_control_B.C_tmp] =
          (proc_control_B.TmpSignalConversionAtMAT_lt[7] - proc_control_DW.x[7])
          / proc_control_B.Product8;
        proc_control_B.dHdx_c[proc_control_B.C_tmp + 1] =
          (proc_control_B.TmpSignalConversionAtMAT_lt[8] - proc_control_DW.x[8])
          / proc_control_B.Product8;
        proc_control_B.dHdx_c[proc_control_B.C_tmp + 2] =
          (proc_control_B.TmpSignalConversionAtMAT_lt[9] - proc_control_DW.x[9])
          / proc_control_B.Product8;
        proc_control_B.C_tmp += 3;
      }

      proc_control_qrFactor_qGSgSIIm(proc_control_B.dHdx_c, proc_control_DW.P,
        proc_control_P.R2_Value, proc_control_B.TmpSignalConversionAtMATL_b);
      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++) {
        std::memset(&proc_control_B.A_f[proc_control_B.jp1j], 0, 13U * sizeof
                    (real_T));
        proc_control_B.jp1j += 13;
      }

      proc_control_B.jp1j = 0;
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        proc_control_B.ibmat = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++)
        {
          for (proc_control_B.jA = 0; proc_control_B.jA < 13; proc_control_B.jA
               ++) {
            proc_control_B.c_l = proc_control_B.jA + proc_control_B.ibmat;
            proc_control_B.A_f[proc_control_B.c_l] +=
              proc_control_DW.P[proc_control_B.jA + proc_control_B.jp1j] *
              proc_control_DW.P[proc_control_B.jj + proc_control_B.jp1j];
          }

          proc_control_B.ibmat += 13;
        }

        proc_control_B.jp1j += 13;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 3; proc_control_B.jp1j
           ++) {
        proc_control_B.jj = 0;
        for (proc_control_B.jA = 0; proc_control_B.jA < 13; proc_control_B.jA++)
        {
          proc_control_B.Ns_f = proc_control_B.jj + proc_control_B.jp1j;
          proc_control_B.K_n[proc_control_B.Ns_f] = 0.0;
          proc_control_B.i = 0;
          proc_control_B.ibmat = 0;
          for (proc_control_B.c_l = 0; proc_control_B.c_l < 13;
               proc_control_B.c_l++) {
            proc_control_B.K_n[proc_control_B.Ns_f] +=
              proc_control_B.A_f[proc_control_B.i + proc_control_B.jA] *
              proc_control_B.dHdx_c[proc_control_B.ibmat + proc_control_B.jp1j];
            proc_control_B.i += 13;
            proc_control_B.ibmat += 3;
          }

          proc_control_B.jj += 3;
        }
      }

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S238>/Enable'

      // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
      //   EnablePort: '<S266>/Enable'

      proc_control_B.jp1j = 0;

      // End of Outputs for SubSystem: '<S263>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S238>/Enable'

        // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
        //   EnablePort: '<S266>/Enable'

        proc_control_B.C_i[proc_control_B.jp1j] =
          proc_control_B.K_n[proc_control_B.jp1j];
        proc_control_B.C_i[proc_control_B.jp1j + 1] =
          proc_control_B.K_n[proc_control_B.jp1j + 1];
        proc_control_B.C_i[proc_control_B.jp1j + 2] =
          proc_control_B.K_n[proc_control_B.jp1j + 2];
        proc_control_B.jp1j += 3;

        // End of Outputs for SubSystem: '<S263>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      trisolve_nzh2XTxC(proc_control_B.TmpSignalConversionAtMATL_b,
                        proc_control_B.C_i);

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S238>/Enable'

      // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
      //   EnablePort: '<S266>/Enable'

      proc_control_B.jp1j = 0;

      // End of Outputs for SubSystem: '<S263>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S238>/Enable'

        // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
        //   EnablePort: '<S266>/Enable'

        proc_control_B.b_C_m[proc_control_B.jp1j] =
          proc_control_B.C_i[proc_control_B.jp1j];
        proc_control_B.b_C_m[proc_control_B.jp1j + 1] =
          proc_control_B.C_i[proc_control_B.jp1j + 1];
        proc_control_B.b_C_m[proc_control_B.jp1j + 2] =
          proc_control_B.C_i[proc_control_B.jp1j + 2];
        proc_control_B.jp1j += 3;

        // End of Outputs for SubSystem: '<S263>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 3; proc_control_B.jj++) {
        proc_control_B.twpt[proc_control_B.jp1j] =
          proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.jj];
        proc_control_B.twpt[proc_control_B.jp1j + 1] =
          proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.jj + 3];
        proc_control_B.twpt[proc_control_B.jp1j + 2] =
          proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.jj + 6];
        proc_control_B.jp1j += 3;
      }

      trisolve_QLyTZPzT(proc_control_B.twpt, proc_control_B.b_C_m);
      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 3; proc_control_B.jj++) {
        proc_control_B.jA = 0;
        for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
          proc_control_B.K_n[proc_control_B.i + proc_control_B.jp1j] =
            proc_control_B.b_C_m[proc_control_B.jA + proc_control_B.jj];
          proc_control_B.jA += 3;
        }

        proc_control_B.jp1j += 13;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 39;
           proc_control_B.jp1j++) {
        proc_control_B.C_i[proc_control_B.jp1j] =
          -proc_control_B.K_n[proc_control_B.jp1j];
      }

      proc_control_B.jp1j = 0;
      proc_control_B.jj = 0;
      for (proc_control_B.jA = 0; proc_control_B.jA < 13; proc_control_B.jA++) {
        for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
          proc_control_B.C_tmp = proc_control_B.i + proc_control_B.jp1j;
          proc_control_B.A_f[proc_control_B.C_tmp] = 0.0;
          proc_control_B.A_f[proc_control_B.C_tmp] +=
            proc_control_B.dHdx_c[proc_control_B.jj] *
            proc_control_B.C_i[proc_control_B.i];
          proc_control_B.A_f[proc_control_B.C_tmp] +=
            proc_control_B.dHdx_c[proc_control_B.jj + 1] *
            proc_control_B.C_i[proc_control_B.i + 13];
          proc_control_B.A_f[proc_control_B.C_tmp] +=
            proc_control_B.dHdx_c[proc_control_B.jj + 2] *
            proc_control_B.C_i[proc_control_B.i + 26];
        }

        proc_control_B.jp1j += 13;
        proc_control_B.jj += 3;
      }

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for IfAction SubSystem: '<S133>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S136>/Action Port'

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S302>/Action Port'

      // SwitchCase: '<S133>/Switch Case' incorporates:
      //   MATLAB Function: '<S287>/Correct'
      //   MATLABSystem: '<S136>/MATLAB System'
      //   MATLABSystem: '<S302>/MATLAB System1'
      //   SwitchCase: '<S9>/Switch Case'

      proc_control_B.i = 0;

      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      // End of Outputs for SubSystem: '<S133>/Adaptive MPC quaternion '
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'

      // MATLAB Function: '<S287>/Correct' incorporates:
      //   Constant: '<S285>/R2'
      //   DataStoreRead: '<S287>/Data Store ReadX'
      //   DataStoreWrite: '<S287>/Data Store WriteP'
      //   MATLABSystem: '<S136>/MATLAB System'
      //   MATLABSystem: '<S302>/MATLAB System1'
      //   SignalConversion generated from: '<S292>/ SFunction '
      //   SwitchCase: '<S133>/Switch Case'
      //   SwitchCase: '<S9>/Switch Case'

      for (proc_control_B.C_tmp = 0; proc_control_B.C_tmp < 13;
           proc_control_B.C_tmp++) {
        proc_control_B.jp1j = 0;
        proc_control_B.jj = 0;
        for (proc_control_B.jA = 0; proc_control_B.jA < 3; proc_control_B.jA++)
        {
          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for IfAction SubSystem: '<S133>/Adaptive MPC quaternion ' incorporates:
          //   ActionPort: '<S136>/Action Port'

          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S302>/Action Port'

          // SwitchCase: '<S133>/Switch Case' incorporates:
          //   MATLABSystem: '<S136>/MATLAB System'
          //   MATLABSystem: '<S302>/MATLAB System1'
          //   SwitchCase: '<S9>/Switch Case'

          proc_control_B.Ns_f = proc_control_B.jp1j + proc_control_B.C_tmp;
          proc_control_B.C_i[proc_control_B.Ns_f] = 0.0;
          proc_control_B.C_i[proc_control_B.Ns_f] +=
            proc_control_P.R2_Value[proc_control_B.jj] *
            proc_control_B.K_n[proc_control_B.C_tmp];
          proc_control_B.C_i[proc_control_B.Ns_f] +=
            proc_control_P.R2_Value[proc_control_B.jj + 1] *
            proc_control_B.K_n[proc_control_B.C_tmp + 13];
          proc_control_B.C_i[proc_control_B.Ns_f] +=
            proc_control_P.R2_Value[proc_control_B.jj + 2] *
            proc_control_B.K_n[proc_control_B.C_tmp + 26];

          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          // End of Outputs for SubSystem: '<S133>/Adaptive MPC quaternion '
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          proc_control_B.jp1j += 13;
          proc_control_B.jj += 3;
        }

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for IfAction SubSystem: '<S133>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S136>/Action Port'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S302>/Action Port'

        proc_control_B.A_f[proc_control_B.i]++;
        proc_control_B.i += 14;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<S133>/Adaptive MPC quaternion '
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      }

      proc_control_qrFactor_3bJrEoRT(proc_control_B.A_f, proc_control_DW.P,
        proc_control_B.C_i);
      proc_control_B.t65 = proc_control_B.Sum - proc_control_DW.x[7];
      proc_control_B.d = proc_control_B.Sum_o - proc_control_DW.x[8];
      proc_control_B.t4 = proc_control_B.Sum_c - proc_control_DW.x[9];

      // DataStoreWrite: '<S287>/Data Store WriteX' incorporates:
      //   DataStoreRead: '<S287>/Data Store ReadX'
      //   MATLAB Function: '<S287>/Correct'

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        proc_control_DW.x[proc_control_B.jp1j] +=
          (proc_control_B.K_n[proc_control_B.jp1j + 13] * proc_control_B.d +
           proc_control_B.K_n[proc_control_B.jp1j] * proc_control_B.t65) +
          proc_control_B.K_n[proc_control_B.jp1j + 26] * proc_control_B.t4;
      }

      // End of DataStoreWrite: '<S287>/Data Store WriteX'
    }

    // End of DataTypeConversion: '<S285>/DataTypeConversion_Enable2'
    // End of Outputs for SubSystem: '<S285>/Correct2'

    // Outputs for Enabled SubSystem: '<S285>/Correct3' incorporates:
    //   EnablePort: '<S288>/Enable'

    // Constant: '<S285>/Enable3'
    if (proc_control_P.Enable3_Value) {
      // MATLAB Function: '<S288>/Correct' incorporates:
      //   Constant: '<S285>/R3'
      //   DataStoreRead: '<S288>/Data Store ReadX'
      //   DataStoreWrite: '<S288>/Data Store WriteP'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S239>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S135>/N to A'
      //   Lookup_n-D: '<S135>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   Trigonometry: '<S267>/sincos'
      //   Trigonometry: '<S40>/sincos'
      //   UniformRandomNumber: '<S12>/ Drift'
      //
      proc_control_B.C_tmp = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        std::memcpy(&proc_control_B.TmpSignalConversionAtMAT_lt[0],
                    &proc_control_DW.x[0], 13U * sizeof(real_T));
        proc_control_B.Product8 = std::fmax(1.4901161193847656E-8,
          1.4901161193847656E-8 * std::abs
          (proc_control_DW.x[proc_control_B.ibmat]));
        proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.ibmat] =
          proc_control_DW.x[proc_control_B.ibmat] + proc_control_B.Product8;
        proc_control_B.dHdx_f[proc_control_B.C_tmp] =
          (proc_control_B.TmpSignalConversionAtMAT_lt[2] - proc_control_DW.x[2])
          / proc_control_B.Product8;
        proc_control_B.dHdx_f[proc_control_B.C_tmp + 1] =
          (proc_control_B.TmpSignalConversionAtMAT_lt[9] - proc_control_DW.x[9])
          / proc_control_B.Product8;
        proc_control_B.C_tmp += 2;
      }

      proc_control_qrFactor_wYNAcj6d(proc_control_B.dHdx_f, proc_control_DW.P,
        proc_control_P.R3_Value, proc_control_B.n);
      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++) {
        std::memset(&proc_control_B.A_f[proc_control_B.jp1j], 0, 13U * sizeof
                    (real_T));
        proc_control_B.jp1j += 13;
      }

      proc_control_B.jp1j = 0;
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        proc_control_B.ibmat = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++)
        {
          for (proc_control_B.jA = 0; proc_control_B.jA < 13; proc_control_B.jA
               ++) {
            proc_control_B.c_l = proc_control_B.jA + proc_control_B.ibmat;
            proc_control_B.A_f[proc_control_B.c_l] +=
              proc_control_DW.P[proc_control_B.jA + proc_control_B.jp1j] *
              proc_control_DW.P[proc_control_B.jj + proc_control_B.jp1j];
          }

          proc_control_B.ibmat += 13;
        }

        proc_control_B.jp1j += 13;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 2; proc_control_B.jp1j
           ++) {
        proc_control_B.jj = 0;
        for (proc_control_B.jA = 0; proc_control_B.jA < 13; proc_control_B.jA++)
        {
          proc_control_B.Ns_f = proc_control_B.jj + proc_control_B.jp1j;
          proc_control_B.K_p[proc_control_B.Ns_f] = 0.0;
          proc_control_B.i = 0;
          proc_control_B.ibmat = 0;
          for (proc_control_B.c_l = 0; proc_control_B.c_l < 13;
               proc_control_B.c_l++) {
            proc_control_B.K_p[proc_control_B.Ns_f] +=
              proc_control_B.A_f[proc_control_B.i + proc_control_B.jA] *
              proc_control_B.dHdx_f[proc_control_B.ibmat + proc_control_B.jp1j];
            proc_control_B.i += 13;
            proc_control_B.ibmat += 2;
          }

          proc_control_B.jj += 2;
        }
      }

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S238>/Enable'

      // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
      //   EnablePort: '<S266>/Enable'

      proc_control_B.jp1j = 0;

      // End of Outputs for SubSystem: '<S263>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S238>/Enable'

        // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
        //   EnablePort: '<S266>/Enable'

        proc_control_B.C_p2[proc_control_B.jp1j] =
          proc_control_B.K_p[proc_control_B.jp1j];
        proc_control_B.C_p2[proc_control_B.jp1j + 1] =
          proc_control_B.K_p[proc_control_B.jp1j + 1];
        proc_control_B.jp1j += 2;

        // End of Outputs for SubSystem: '<S263>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      trisolve_RerMU7v3(proc_control_B.n, proc_control_B.C_p2);

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S238>/Enable'

      // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
      //   EnablePort: '<S266>/Enable'

      proc_control_B.jp1j = 0;

      // End of Outputs for SubSystem: '<S263>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S238>/Enable'

        // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
        //   EnablePort: '<S266>/Enable'

        proc_control_B.b_C_n[proc_control_B.jp1j] =
          proc_control_B.C_p2[proc_control_B.jp1j];
        proc_control_B.b_C_n[proc_control_B.jp1j + 1] =
          proc_control_B.C_p2[proc_control_B.jp1j + 1];
        proc_control_B.jp1j += 2;

        // End of Outputs for SubSystem: '<S263>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      }

      proc_control_B.TmpSignalConversionAtSFunct[0] = proc_control_B.n[0];
      proc_control_B.TmpSignalConversionAtSFunct[1] = proc_control_B.n[2];
      proc_control_B.TmpSignalConversionAtSFunct[2] = proc_control_B.n[1];
      proc_control_B.TmpSignalConversionAtSFunct[3] = proc_control_B.n[3];
      trisolve_7ULo2Z2J(proc_control_B.TmpSignalConversionAtSFunct,
                        proc_control_B.b_C_n);
      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 2; proc_control_B.jj++) {
        proc_control_B.jA = 0;
        for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
          proc_control_B.K_p[proc_control_B.i + proc_control_B.jp1j] =
            proc_control_B.b_C_n[proc_control_B.jA + proc_control_B.jj];
          proc_control_B.jA += 2;
        }

        proc_control_B.jp1j += 13;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 26;
           proc_control_B.jp1j++) {
        proc_control_B.C_p2[proc_control_B.jp1j] =
          -proc_control_B.K_p[proc_control_B.jp1j];
      }

      proc_control_B.jp1j = 0;
      proc_control_B.jj = 0;
      for (proc_control_B.jA = 0; proc_control_B.jA < 13; proc_control_B.jA++) {
        for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
          proc_control_B.C_tmp = proc_control_B.i + proc_control_B.jp1j;
          proc_control_B.A_f[proc_control_B.C_tmp] = 0.0;
          proc_control_B.A_f[proc_control_B.C_tmp] +=
            proc_control_B.dHdx_f[proc_control_B.jj] *
            proc_control_B.C_p2[proc_control_B.i];
          proc_control_B.A_f[proc_control_B.C_tmp] +=
            proc_control_B.dHdx_f[proc_control_B.jj + 1] *
            proc_control_B.C_p2[proc_control_B.i + 13];
        }

        proc_control_B.jp1j += 13;
        proc_control_B.jj += 2;
      }

      // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
      // Outputs for IfAction SubSystem: '<S133>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S136>/Action Port'

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S302>/Action Port'

      // SwitchCase: '<S133>/Switch Case' incorporates:
      //   MATLAB Function: '<S288>/Correct'
      //   MATLABSystem: '<S136>/MATLAB System'
      //   MATLABSystem: '<S302>/MATLAB System1'
      //   SwitchCase: '<S9>/Switch Case'

      proc_control_B.i = 0;

      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      // End of Outputs for SubSystem: '<S133>/Adaptive MPC quaternion '
      // End of Outputs for SubSystem: '<Root>/Subsystem Controller'

      // MATLAB Function: '<S288>/Correct' incorporates:
      //   Constant: '<S285>/R3'
      //   DataStoreWrite: '<S288>/Data Store WriteP'
      //   MATLABSystem: '<S136>/MATLAB System'
      //   MATLABSystem: '<S302>/MATLAB System1'
      //   SwitchCase: '<S133>/Switch Case'
      //   SwitchCase: '<S9>/Switch Case'

      for (proc_control_B.C_tmp = 0; proc_control_B.C_tmp < 13;
           proc_control_B.C_tmp++) {
        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for IfAction SubSystem: '<S133>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S136>/Action Port'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S302>/Action Port'

        proc_control_B.C_p2[proc_control_B.C_tmp] = 0.0;
        proc_control_B.C_p2[proc_control_B.C_tmp] +=
          proc_control_B.K_p[proc_control_B.C_tmp] * proc_control_P.R3_Value[0];
        proc_control_B.t65 = proc_control_B.K_p[proc_control_B.C_tmp + 13];
        proc_control_B.C_p2[proc_control_B.C_tmp] += proc_control_B.t65 *
          proc_control_P.R3_Value[1];
        proc_control_B.C_p2[proc_control_B.C_tmp + 13] = 0.0;
        proc_control_B.C_p2[proc_control_B.C_tmp + 13] +=
          proc_control_B.K_p[proc_control_B.C_tmp] * proc_control_P.R3_Value[2];
        proc_control_B.C_p2[proc_control_B.C_tmp + 13] += proc_control_B.t65 *
          proc_control_P.R3_Value[3];
        proc_control_B.A_f[proc_control_B.i]++;
        proc_control_B.i += 14;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<S133>/Adaptive MPC quaternion '
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      }

      proc_control_qrFactor_CnAcI93P(proc_control_B.A_f, proc_control_DW.P,
        proc_control_B.C_p2);

      // SignalConversion generated from: '<S293>/ SFunction ' incorporates:
      //   DataStoreRead: '<S288>/Data Store ReadX'
      //   MATLAB Function: '<S288>/Correct'

      proc_control_B.t3 = proc_control_B.zposition - proc_control_DW.x[2];
      proc_control_B.t57 = proc_control_B.zvelocity - proc_control_DW.x[9];

      // DataStoreWrite: '<S288>/Data Store WriteX' incorporates:
      //   DataStoreRead: '<S288>/Data Store ReadX'
      //   MATLAB Function: '<S288>/Correct'

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        proc_control_DW.x[proc_control_B.jp1j] +=
          proc_control_B.K_p[proc_control_B.jp1j + 13] * proc_control_B.t57 +
          proc_control_B.K_p[proc_control_B.jp1j] * proc_control_B.t3;
      }

      // End of DataStoreWrite: '<S288>/Data Store WriteX'
    }

    // End of Constant: '<S285>/Enable3'
    // End of Outputs for SubSystem: '<S285>/Correct3'

    // Outputs for Atomic SubSystem: '<S285>/Output'
    // DataStoreRead: '<S289>/Data Store Read'
    std::memcpy(&proc_control_B.DataStoreRead[0], &proc_control_DW.x[0], 13U *
                sizeof(real_T));

    // End of Outputs for SubSystem: '<S285>/Output'

    // Outputs for Atomic SubSystem: '<S285>/Predict'
    // MATLAB Function: '<S290>/Predict' incorporates:
    //   Constant: '<S285>/Q'
    //   DataStoreRead: '<S290>/Data Store ReadX'
    //   DataStoreWrite: '<S290>/Data Store WriteP'
    //   Delay: '<S243>/ '
    //   ZeroOrderHold: '<S243>/Zero-Order Hold'

    for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6; proc_control_B.jp1j++)
    {
      proc_control_B.dv19[proc_control_B.jp1j] = 0.0;
    }

    for (proc_control_B.C_tmp = 0; proc_control_B.C_tmp < 2;
         proc_control_B.C_tmp++) {
      AUV8QuatPerturbedSimFc_Tstvmp_b(proc_control_DW.x, proc_control_B.dv19,
        proc_control_B.u, proc_control_B.TmpSignalConversionAtMAT_lt);
    }

    std::memcpy(&proc_control_B.z_cx[0], &proc_control_DW.x[0], 13U * sizeof
                (real_T));
    for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6; proc_control_B.jp1j++)
    {
      proc_control_B.dv19[proc_control_B.jp1j] = 0.0;
    }

    for (proc_control_B.jj = 0; proc_control_B.jj < 2; proc_control_B.jj++) {
      AUV8QuatPerturbedSimFc_Tstvmp_b(proc_control_DW.x, proc_control_B.dv19,
        proc_control_B.u, proc_control_B.TmpSignalConversionAtTransp);
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        proc_control_B.z_cx[proc_control_B.jp1j] +=
          proc_control_B.TmpSignalConversionAtTransp[proc_control_B.jp1j] * 0.01;
      }
    }

    for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6; proc_control_B.jp1j++)
    {
      proc_control_B.dv19[proc_control_B.jp1j] = 0.0;
    }

    for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
         proc_control_B.ibmat++) {
      std::memcpy(&proc_control_B.TmpSignalConversionAtMAT_lt[0],
                  &proc_control_DW.x[0], 13U * sizeof(real_T));
      proc_control_B.Product8 = std::fmax(1.4901161193847656E-8,
        1.4901161193847656E-8 * std::abs(proc_control_DW.x[proc_control_B.ibmat]));
      proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.ibmat] =
        proc_control_DW.x[proc_control_B.ibmat] + proc_control_B.Product8;
      std::memcpy(&proc_control_B.imz[0],
                  &proc_control_B.TmpSignalConversionAtMAT_lt[0], 13U * sizeof
                  (real_T));
      for (proc_control_B.jA = 0; proc_control_B.jA < 2; proc_control_B.jA++) {
        AUV8QuatPerturbedSimFc_Tstvmp_b
          (proc_control_B.TmpSignalConversionAtMAT_lt, proc_control_B.dv19,
           proc_control_B.u, proc_control_B.TmpSignalConversionAtTransp);
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
             proc_control_B.jp1j++) {
          proc_control_B.imz[proc_control_B.jp1j] +=
            proc_control_B.TmpSignalConversionAtTransp[proc_control_B.jp1j] *
            0.01;
        }
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        proc_control_B.A_f[proc_control_B.jp1j + 13 * proc_control_B.ibmat] =
          (proc_control_B.imz[proc_control_B.jp1j] -
           proc_control_B.z_cx[proc_control_B.jp1j]) / proc_control_B.Product8;
      }
    }

    std::memcpy(&proc_control_B.TmpSignalConversionAtMAT_lt[0],
                &proc_control_DW.x[0], 13U * sizeof(real_T));
    for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6; proc_control_B.jp1j++)
    {
      proc_control_B.dv19[proc_control_B.jp1j] = 0.0;
    }

    for (proc_control_B.jA = 0; proc_control_B.jA < 2; proc_control_B.jA++) {
      AUV8QuatPerturbedSimFc_Tstvmp_b(proc_control_DW.x, proc_control_B.dv19,
        proc_control_B.u, proc_control_B.TmpSignalConversionAtTransp);
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.jp1j] +=
          proc_control_B.TmpSignalConversionAtTransp[proc_control_B.jp1j] * 0.01;
      }
    }

    proc_control_qrFactor_O58Jhapw(proc_control_B.A_f, proc_control_DW.P,
      proc_control_P.Q_Value);

    // DataStoreWrite: '<S290>/Data Store WriteX' incorporates:
    //   MATLAB Function: '<S290>/Predict'

    std::memcpy(&proc_control_DW.x[0],
                &proc_control_B.TmpSignalConversionAtMAT_lt[0], 13U * sizeof
                (real_T));

    // End of Outputs for SubSystem: '<S285>/Predict'
  }

  // End of Outputs for SubSystem: '<S8>/Subsystem'

  // Sum: '<S284>/Sum' incorporates:
  //   Product: '<S284>/Product'
  //   Product: '<S284>/Product1'
  //   Product: '<S284>/Product2'
  //   Product: '<S284>/Product3'

  proc_control_B.Product5 = ((proc_control_B.DataStoreRead[3] *
    proc_control_B.DataStoreRead[3] + proc_control_B.DataStoreRead[4] *
    proc_control_B.DataStoreRead[4]) + proc_control_B.DataStoreRead[5] *
    proc_control_B.DataStoreRead[5]) + proc_control_B.DataStoreRead[6] *
    proc_control_B.DataStoreRead[6];

  // Product: '<S282>/Divide'
  proc_control_B.d = proc_control_B.DataStoreRead[3] / proc_control_B.Product5;

  // Product: '<S282>/Divide1' incorporates:
  //   UnaryMinus: '<S283>/Unary Minus'

  proc_control_B.scale = -proc_control_B.DataStoreRead[4] /
    proc_control_B.Product5;

  // Product: '<S282>/Divide2' incorporates:
  //   UnaryMinus: '<S283>/Unary Minus1'

  proc_control_B.absxk = -proc_control_B.DataStoreRead[5] /
    proc_control_B.Product5;

  // Product: '<S282>/Divide3' incorporates:
  //   UnaryMinus: '<S283>/Unary Minus2'

  proc_control_B.t = -proc_control_B.DataStoreRead[6] / proc_control_B.Product5;

  // Outputs for Enabled SubSystem: '<Root>/Sensor Manager' incorporates:
  //   EnablePort: '<S6>/Enable'

  if (rtb_Merge) {
    // Sqrt: '<S131>/sqrt' incorporates:
    //   Product: '<S132>/Product'
    //   Product: '<S132>/Product1'
    //   Product: '<S132>/Product2'
    //   Product: '<S132>/Product3'
    //   Sum: '<S132>/Sum'

    proc_control_B.t6 = std::sqrt(((proc_control_B.d * proc_control_B.d +
      proc_control_B.scale * proc_control_B.scale) + proc_control_B.absxk *
      proc_control_B.absxk) + proc_control_B.t * proc_control_B.t);

    // Product: '<S126>/Product'
    proc_control_B.od = proc_control_B.d / proc_control_B.t6;

    // Product: '<S126>/Product1'
    proc_control_B.Divide_i = proc_control_B.scale / proc_control_B.t6;

    // Product: '<S126>/Product2'
    proc_control_B.Product8 = proc_control_B.absxk / proc_control_B.t6;

    // Product: '<S126>/Product3'
    proc_control_B.t6 = proc_control_B.t / proc_control_B.t6;

    // Fcn: '<S122>/fcn3'
    proc_control_B.d = (proc_control_B.Divide_i * proc_control_B.t6 +
                        proc_control_B.od * proc_control_B.Product8) * 2.0;

    // If: '<S127>/If' incorporates:
    //   Constant: '<S128>/Constant'
    //   Constant: '<S129>/Constant'

    if (proc_control_B.d > 1.0) {
      proc_control_B.d = proc_control_P.Constant_Value_pz;
    } else if (proc_control_B.d < -1.0) {
      proc_control_B.d = proc_control_P.Constant_Value_pm;
    }

    // End of If: '<S127>/If'

    // Fcn: '<S122>/fcn2' incorporates:
    //   Fcn: '<S122>/fcn5'

    proc_control_B.t15 = proc_control_B.od * proc_control_B.od;
    proc_control_B.t65 = proc_control_B.Product8 * proc_control_B.Product8;
    proc_control_B.t4 = proc_control_B.t6 * proc_control_B.t6;

    // Trigonometry: '<S125>/trigFcn'
    if (proc_control_B.d > 1.0) {
      proc_control_B.d = 1.0;
    } else if (proc_control_B.d < -1.0) {
      proc_control_B.d = -1.0;
    }

    // MATLAB Function: '<S115>/MATLAB Function1' incorporates:
    //   Constant: '<S118>/Constant'
    //   SignalConversion generated from: '<S120>/ SFunction '

    proc_control_B.msg_po = proc_control_P.Constant_Value_fw;
    proc_control_B.msg_po.Pose.Pose.Position.X = proc_control_B.DataStoreRead[0];
    proc_control_B.msg_po.Pose.Pose.Position.Y = proc_control_B.DataStoreRead[1];
    proc_control_B.msg_po.Pose.Pose.Position.Z = proc_control_B.DataStoreRead[2];

    // Fcn: '<S122>/fcn2' incorporates:
    //   Fcn: '<S122>/fcn5'

    proc_control_B.d32 = proc_control_B.Divide_i * proc_control_B.Divide_i;

    // MATLAB Function: '<S115>/MATLAB Function1' incorporates:
    //   Fcn: '<S122>/fcn1'
    //   Fcn: '<S122>/fcn2'
    //   Fcn: '<S122>/fcn4'
    //   Fcn: '<S122>/fcn5'
    //   Gain: '<S123>/Gain'
    //   Gain: '<S124>/Gain'
    //   SignalConversion generated from: '<S120>/ SFunction '
    //   Trigonometry: '<S125>/Trigonometric Function1'
    //   Trigonometry: '<S125>/Trigonometric Function3'
    //   Trigonometry: '<S125>/trigFcn'

    proc_control_B.msg_po.Pose.Pose.Orientation.X = rt_atan2d_snf
      ((proc_control_B.Product8 * proc_control_B.t6 - proc_control_B.od *
        proc_control_B.Divide_i) * -2.0, ((proc_control_B.t15 -
         proc_control_B.d32) - proc_control_B.t65) + proc_control_B.t4) *
      proc_control_P.Gain_Gain_ei;
    proc_control_B.msg_po.Pose.Pose.Orientation.Y = proc_control_P.Gain_Gain_ei *
      std::asin(proc_control_B.d);
    proc_control_B.msg_po.Pose.Pose.Orientation.Z = rt_atan2d_snf
      ((proc_control_B.Divide_i * proc_control_B.Product8 - proc_control_B.od *
        proc_control_B.t6) * -2.0, ((proc_control_B.t15 + proc_control_B.d32) -
        proc_control_B.t65) - proc_control_B.t4) * proc_control_P.Gain_Gain_ei;
    proc_control_B.msg_po.Twist.Twist.Linear.X = proc_control_B.DataStoreRead[7];
    proc_control_B.msg_po.Twist.Twist.Linear.Y = proc_control_B.DataStoreRead[8];
    proc_control_B.msg_po.Twist.Twist.Linear.Z = proc_control_B.DataStoreRead[9];
    proc_control_B.msg_po.Twist.Twist.Angular.X = proc_control_P.Gain_Gain_i *
      proc_control_B.DataStoreRead[10];
    proc_control_B.msg_po.Twist.Twist.Angular.Y = proc_control_P.Gain_Gain_i *
      proc_control_B.DataStoreRead[11];
    proc_control_B.msg_po.Twist.Twist.Angular.Z = proc_control_P.Gain_Gain_i *
      proc_control_B.DataStoreRead[12];

    // Outputs for Atomic SubSystem: '<S115>/Publish'
    // MATLABSystem: '<S121>/SinkBlock'
    Pub_proc_control_163.publish(&proc_control_B.msg_po);

    // End of Outputs for SubSystem: '<S115>/Publish'

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.WorldPosition[0] = proc_control_B.DataStoreRead[0];
    proc_control_B.WorldPosition[1] = proc_control_B.DataStoreRead[1];
    proc_control_B.WorldPosition[2] = proc_control_B.DataStoreRead[2];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.qS2W[0] = proc_control_B.DataStoreRead[3];
    proc_control_B.qS2W[1] = proc_control_B.DataStoreRead[4];
    proc_control_B.qS2W[2] = proc_control_B.DataStoreRead[5];
    proc_control_B.qS2W[3] = proc_control_B.DataStoreRead[6];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.BodyVelocity[0] = proc_control_B.DataStoreRead[7];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.AngularRate[0] = proc_control_B.DataStoreRead[10];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.BodyVelocity[1] = proc_control_B.DataStoreRead[8];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.AngularRate[1] = proc_control_B.DataStoreRead[11];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.BodyVelocity[2] = proc_control_B.DataStoreRead[9];

    // SignalConversion generated from: '<S6>/Output'
    proc_control_B.AngularRate[2] = proc_control_B.DataStoreRead[12];

    // BusAssignment: '<S114>/Bus Assignment' incorporates:
    //   DataTypeConversion: '<S114>/Cast To Boolean'

    BusAssignment.Data = (proc_control_B.y != 0.0);

    // ZeroOrderHold: '<S114>/Zero-Order Hold'
    if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
      // Outputs for Atomic SubSystem: '<S114>/Publish'
      // MATLABSystem: '<S117>/SinkBlock'
      Pub_proc_control_116.publish(&BusAssignment);

      // End of Outputs for SubSystem: '<S114>/Publish'
    }

    // End of ZeroOrderHold: '<S114>/Zero-Order Hold'
  }

  // End of Outputs for SubSystem: '<Root>/Sensor Manager'
  if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
    // Outputs for Atomic SubSystem: '<S299>/Subscribe'
    // MATLABSystem: '<S307>/SourceBlock'
    proc_control_B.SourceBlock_o1 = Sub_proc_control_184_1581.getLatestMessage
      (&proc_control_B.b_varargout_2);

    // Outputs for Enabled SubSystem: '<S307>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S308>/Enable'

    if (proc_control_B.SourceBlock_o1) {
      // SignalConversion generated from: '<S308>/In1' incorporates:
      //   MATLABSystem: '<S307>/SourceBlock'

      proc_control_B.In1 = proc_control_B.b_varargout_2;
    }

    // End of Outputs for SubSystem: '<S307>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S299>/Subscribe'
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[1] == 0) {
    // Outputs for Atomic SubSystem: '<S298>/Subscribe2'
    // MATLABSystem: '<S305>/SourceBlock'
    rtb_Merge = Sub_proc_control_184_1122.getLatestMessage
      (&proc_control_B.b_varargout_2_fc);

    // Outputs for Enabled SubSystem: '<S305>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S306>/Enable'

    if (rtb_Merge) {
      // SignalConversion generated from: '<S306>/In1'
      proc_control_B.In1_od = proc_control_B.b_varargout_2_fc;
    }

    // End of MATLABSystem: '<S305>/SourceBlock'
    // End of Outputs for SubSystem: '<S305>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S298>/Subscribe2'

    // Gain: '<S298>/Gain'
    proc_control_B.Gain[0] = proc_control_P.Gain_Gain_g *
      proc_control_B.In1_od.Angular.X;
    proc_control_B.Gain[1] = proc_control_P.Gain_Gain_g *
      proc_control_B.In1_od.Angular.Y;
    proc_control_B.Gain[2] = proc_control_P.Gain_Gain_g *
      proc_control_B.In1_od.Angular.Z;
  }

  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    int8_T rtAction;
    int8_T rtPrevAction;

    // SwitchCase: '<S9>/Switch Case' incorporates:
    //   Concatenate: '<S314>/Matrix Concatenate'
    //   Constant: '<S314>/Constant1'
    //   Logic: '<S302>/OR'
    //   MATLABSystem: '<S315>/SourceBlock'

    rtPrevAction = proc_control_DW.SwitchCase_ActiveSubsystem;
    switch (proc_control_B.DataTypeConversion_j) {
     case 19:
     case 20:
     case 21:
      rtAction = 0;
      break;

     case 10:
      rtAction = 1;
      break;

     case 11:
     case 30:
     case 31:
     case 40:
     case 41:
      rtAction = 2;
      break;

     default:
      rtAction = 3;
      break;
    }

    proc_control_DW.SwitchCase_ActiveSubsystem = rtAction;
    switch (rtAction) {
     case 0:
      // Outputs for IfAction SubSystem: '<S9>/SpaceNav' incorporates:
      //   ActionPort: '<S297>/Action Port'

      // SignalConversion generated from: '<S297>/Transpose' incorporates:
      //   Constant: '<S297>/Constant7'

      for (proc_control_B.i = 0; proc_control_B.i < 7; proc_control_B.i++) {
        proc_control_B.TmpSignalConversionAtTransp[proc_control_B.i] =
          proc_control_P.Constant7_Value[proc_control_B.i];
      }

      proc_control_B.TmpSignalConversionAtTransp[7] =
        proc_control_B.In1_od.Linear.X;
      proc_control_B.TmpSignalConversionAtTransp[8] =
        proc_control_B.In1_od.Linear.Y;
      proc_control_B.TmpSignalConversionAtTransp[9] =
        proc_control_B.In1_od.Linear.Z;
      proc_control_B.TmpSignalConversionAtTransp[10] = proc_control_B.Gain[0];
      proc_control_B.TmpSignalConversionAtTransp[11] = proc_control_B.Gain[1];
      proc_control_B.TmpSignalConversionAtTransp[12] = proc_control_B.Gain[2];

      // MATLAB Function: '<S297>/MATLAB Function1' incorporates:
      //   Math: '<S297>/Transpose'

      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        proc_control_B.ibmat = proc_control_B.i * 10;
        for (proc_control_B.jA = 0; proc_control_B.jA < 10; proc_control_B.jA++)
        {
          proc_control_B.y_j[proc_control_B.ibmat + proc_control_B.jA] =
            proc_control_B.TmpSignalConversionAtTransp[proc_control_B.i];
        }
      }

      // End of MATLAB Function: '<S297>/MATLAB Function1'

      // Merge generated from: '<S9>/Merge' incorporates:
      //   SignalConversion generated from: '<S297>/Output'

      std::memcpy(&proc_control_B.Reference[0], &proc_control_B.y_j[0], 130U *
                  sizeof(real_T));

      // Merge generated from: '<S9>/Merge' incorporates:
      //   Constant: '<S297>/Constant1'
      //   SignalConversion generated from: '<S297>/Output'

      proc_control_B.isReached = proc_control_P.Constant1_Value_ds;

      // Merge generated from: '<S9>/Merge' incorporates:
      //   Constant: '<S297>/Constant2'
      //   SignalConversion generated from: '<S297>/Output'

      proc_control_B.isTrajDone = proc_control_P.Constant2_Value_l;

      // End of Outputs for SubSystem: '<S9>/SpaceNav'
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S9>/SubsystemAuto' incorporates:
      //   ActionPort: '<S301>/Action Port'

      // RelationalOperator: '<S313>/Compare' incorporates:
      //   Constant: '<S313>/Constant'

      rtb_Merge = (static_cast<int32_T>(proc_control_B.SourceBlock_o1) >
                   static_cast<int32_T>(proc_control_P.Constant_Value_hm));

      // SignalConversion generated from: '<S301>/MATLAB System'
      proc_control_B.z_cx[0] = proc_control_B.WorldPosition[0];
      proc_control_B.z_cx[1] = proc_control_B.WorldPosition[1];
      proc_control_B.z_cx[2] = proc_control_B.WorldPosition[2];
      proc_control_B.z_cx[3] = proc_control_B.qS2W[0];
      proc_control_B.z_cx[4] = proc_control_B.qS2W[1];
      proc_control_B.z_cx[5] = proc_control_B.qS2W[2];
      proc_control_B.z_cx[6] = proc_control_B.qS2W[3];
      proc_control_B.z_cx[7] = proc_control_B.BodyVelocity[0];
      proc_control_B.z_cx[10] = proc_control_B.AngularRate[0];
      proc_control_B.z_cx[8] = proc_control_B.BodyVelocity[1];
      proc_control_B.z_cx[11] = proc_control_B.AngularRate[1];
      proc_control_B.z_cx[9] = proc_control_B.BodyVelocity[2];
      proc_control_B.z_cx[12] = proc_control_B.AngularRate[2];

      // Merge generated from: '<S9>/Merge' incorporates:
      //   MATLABSystem: '<S301>/MATLAB System'
      //   RelationalOperator: '<S310>/FixPt Relational Operator'
      //   UnitDelay: '<S310>/Delay Input1'
      //
      //  Block description for '<S310>/Delay Input1':
      //
      //   Store in Global RAM

      MultiTrajectoryManager_stepImpl(&proc_control_DW.obj_o,
        static_cast<int32_T>(rtb_Merge) > static_cast<int32_T>
        (proc_control_DW.DelayInput1_DSTATE), proc_control_B.In1.Transforms,
        proc_control_B.In1.Transforms_SL_Info.ReceivedLength,
        proc_control_B.In1.Velocities, proc_control_B.MATLABSystem_o6,
        proc_control_B.z_cx, proc_control_B.y_j, &proc_control_B.isReached,
        &proc_control_B.isTrajDone, proc_control_B.TmpSignalConversionAtMATLAB);

      // MATLAB Function: '<S301>/MATLAB Function2' incorporates:
      //   MATLABSystem: '<S301>/MATLAB System'

      proc_control_B.msg_e.Position.X =
        proc_control_B.TmpSignalConversionAtMATLAB[0];
      proc_control_B.msg_e.Position.Y =
        proc_control_B.TmpSignalConversionAtMATLAB[1];
      proc_control_B.msg_e.Position.Z =
        proc_control_B.TmpSignalConversionAtMATLAB[2];
      proc_control_B.msg_e.Orientation.W =
        proc_control_B.TmpSignalConversionAtMATLAB[3];
      proc_control_B.msg_e.Orientation.X =
        proc_control_B.TmpSignalConversionAtMATLAB[4];
      proc_control_B.msg_e.Orientation.Y =
        proc_control_B.TmpSignalConversionAtMATLAB[5];
      proc_control_B.msg_e.Orientation.Z =
        proc_control_B.TmpSignalConversionAtMATLAB[6];

      // Outputs for Atomic SubSystem: '<S301>/Publish5'
      // MATLABSystem: '<S312>/SinkBlock'
      Pub_proc_control_184_1596.publish(&proc_control_B.msg_e);

      // End of Outputs for SubSystem: '<S301>/Publish5'

      // Merge generated from: '<S9>/Merge' incorporates:
      //   MATLABSystem: '<S301>/MATLAB System'
      //   SignalConversion generated from: '<S301>/MATLAB System'

      std::memcpy(&proc_control_B.Reference[0], &proc_control_B.y_j[0], 130U *
                  sizeof(real_T));

      // Update for UnitDelay: '<S310>/Delay Input1'
      //
      //  Block description for '<S310>/Delay Input1':
      //
      //   Store in Global RAM

      proc_control_DW.DelayInput1_DSTATE = rtb_Merge;

      // End of Outputs for SubSystem: '<S9>/SubsystemAuto'
      break;

     case 2:
      {
        if (rtAction != rtPrevAction) {
          // InitializeConditions for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S302>/Action Port'

          // InitializeConditions for SwitchCase: '<S9>/Switch Case' incorporates:
          //   Delay: '<S302>/Delay1'

          proc_control_DW.Delay1_DSTATE_c =
            proc_control_P.Delay1_InitialCondition_k;

          // End of InitializeConditions for SubSystem: '<S9>/singleWpts Trajectory' 

          // SystemReset for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S302>/Action Port'

          //  Fonction Reset
          //  Initialize / reset discrete-state properties
          for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 18;
               proc_control_B.jp1j++) {
            // SystemReset for SwitchCase: '<S9>/Switch Case' incorporates:
            //   MATLABSystem: '<S302>/MATLAB System1'

            proc_control_DW.obj_a.poseList[proc_control_B.jp1j] = 999.0;
          }

          // SystemReset for SwitchCase: '<S9>/Switch Case' incorporates:
          //   DiscreteIntegrator: '<S317>/Discrete-Time Integrator'
          //   MATLABSystem: '<S302>/MATLAB System1'

          proc_control_DW.obj_a.poseList[0] = 0.0;
          proc_control_DW.obj_a.poseList[2] = 0.0;
          proc_control_DW.obj_a.poseList[4] = 0.0;
          proc_control_DW.obj_a.poseList[6] = 1.0;
          proc_control_DW.obj_a.poseList[8] = 0.0;
          proc_control_DW.obj_a.poseList[10] = 0.0;
          proc_control_DW.obj_a.poseList[12] = 0.0;
          proc_control_DW.obj_a.poseList[14] = 0.0;
          proc_control_DW.obj_a.poseList[16] = 0.0;

          // initCond(1,1:7);
          for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 7;
               proc_control_B.jp1j++) {
            proc_control_DW.obj_a.initcond[proc_control_B.jp1j] =
              tmp_0[proc_control_B.jp1j];
          }

          proc_control_DW.obj_a.i = 2.0;

          // SystemReset for Resettable SubSystem: '<S302>/Trajectory generator' 
          proc_control_DW.DiscreteTimeIntegrator_DSTATE =
            proc_control_P.DiscreteTimeIntegrator_IC;

          // End of SystemReset for SubSystem: '<S302>/Trajectory generator'
          // End of SystemReset for SubSystem: '<S9>/singleWpts Trajectory'
          //  Fonction reset
          //  Initialize / reset discrete-state properties
        }

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S302>/Action Port'

        // Outputs for Atomic SubSystem: '<S302>/Subscribe'
        // MATLABSystem: '<S315>/SourceBlock'
        rtb_Merge = Sub_proc_control_184_1168.getLatestMessage
          (&proc_control_B.b_varargout_2_f);

        // Outputs for Enabled SubSystem: '<S302>/Subsystem1' incorporates:
        //   EnablePort: '<S316>/Enable'

        // Outputs for Enabled SubSystem: '<S315>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S318>/Enable'

        if (rtb_Merge) {
          // DataTypeConversion: '<S316>/Data Type Conversion'
          proc_control_B.DataTypeConversion[0] =
            proc_control_B.b_varargout_2_f.Position.X;
          proc_control_B.DataTypeConversion[1] =
            proc_control_B.b_varargout_2_f.Position.Y;
          proc_control_B.DataTypeConversion[2] =
            proc_control_B.b_varargout_2_f.Position.Z;
          proc_control_B.DataTypeConversion[3] =
            proc_control_B.b_varargout_2_f.Orientation.Z;
          proc_control_B.DataTypeConversion[4] =
            proc_control_B.b_varargout_2_f.Orientation.Y;
          proc_control_B.DataTypeConversion[5] =
            proc_control_B.b_varargout_2_f.Orientation.X;

          // DataTypeConversion: '<S316>/Data Type Conversion1'
          proc_control_B.DataTypeConversion1[0] =
            proc_control_B.b_varargout_2_f.Frame;
          proc_control_B.DataTypeConversion1[1] =
            proc_control_B.b_varargout_2_f.Speed;

          // DataTypeConversion: '<S316>/Data Type Conversion2'
          proc_control_B.DataTypeConversion2 =
            proc_control_B.b_varargout_2_f.Fine;
        }

        // End of Outputs for SubSystem: '<S315>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S302>/Subsystem1'
        // End of Outputs for SubSystem: '<S302>/Subscribe'

        // SignalConversion generated from: '<S302>/MATLAB System1' incorporates:
        //   MATLABSystem: '<S315>/SourceBlock'

        for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
          proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.i] =
            proc_control_B.DataTypeConversion[proc_control_B.i];
        }

        proc_control_B.TmpSignalConversionAtMATL_b[6] =
          proc_control_B.DataTypeConversion1[0];
        proc_control_B.TmpSignalConversionAtMATL_b[7] =
          proc_control_B.DataTypeConversion1[1];
        proc_control_B.TmpSignalConversionAtMATL_b[8] =
          proc_control_B.DataTypeConversion2;

        // SignalConversion generated from: '<S302>/MATLAB System1'
        proc_control_B.TmpSignalConversionAtMATLAB[0] =
          proc_control_B.WorldPosition[0];
        proc_control_B.TmpSignalConversionAtMATLAB[1] =
          proc_control_B.WorldPosition[1];
        proc_control_B.TmpSignalConversionAtMATLAB[2] =
          proc_control_B.WorldPosition[2];

        // MATLABSystem: '<S302>/MATLAB System1' incorporates:
        //   Constant: '<S302>/Constant'
        //   Delay: '<S302>/Delay1'
        //   MATLABSystem: '<S315>/SourceBlock'
        //   SignalConversion generated from: '<S302>/MATLAB System1'

        //  Main appeller à chaque exécution
        //  Suppression du buffer.
        //  ======================================================================== 
        //  Sous Routines
        // ==========================================================================         
        //  Fonction qui interprete les message ROS
        if (proc_control_P.Constant_Value_ha == 1.0) {
          //  supprimer le buffer de way points
          proc_control_B.jp1j = 0;
          for (proc_control_B.jj = 0; proc_control_B.jj < 9; proc_control_B.jj++)
          {
            proc_control_DW.obj_a.poseList[proc_control_B.jp1j + 1] = 999.0;
            proc_control_B.jp1j += 2;
          }

          proc_control_DW.obj_a.i = 2.0;
        }

        // Outputs for Atomic SubSystem: '<S302>/Subscribe'
        //  Ajout d'un waypoint provenant de ROS.
        if (rtb_Merge && (proc_control_DW.obj_a.i <= 2.0)) {
          uint8_T tmp;

          // ==========================================================================    
          //  Fonction qui interprete les waypoints reçu par ROS
          //  Determiner le quaternion en fonction des angles d'euler.
          //  Orde de rotation : ZYX.
          //  Reel
          //  Information sur le nouveau waypoints
          std::memset(&proc_control_B.twpt[0], 0, 9U * sizeof(real_T));
          proc_control_B.twpt[7] = proc_control_B.DataTypeConversion1[1];

          //  Information de la pose précédente
          //  LastPosition
          //  LastQuaternion
          //  transformer les angle d'euler quaternions
          proc_control_B.rtb_u2_n = 0.017453292519943295 *
            proc_control_B.TmpSignalConversionAtMATL_b[3] / 2.0;
          proc_control_B.c_k[0] = proc_control_B.rtb_u2_n;
          proc_control_B.u2[0] = proc_control_B.rtb_u2_n;
          proc_control_B.rtb_u2_n = 0.017453292519943295 *
            proc_control_B.TmpSignalConversionAtMATL_b[4] / 2.0;
          proc_control_B.c_k[1] = proc_control_B.rtb_u2_n;
          proc_control_B.u2[1] = proc_control_B.rtb_u2_n;
          proc_control_B.rtb_u2_n = 0.017453292519943295 *
            proc_control_B.TmpSignalConversionAtMATL_b[5] / 2.0;
          proc_control_B.c_k[0] = std::cos(proc_control_B.c_k[0]);
          proc_control_B.u2[0] = std::sin(proc_control_B.u2[0]);
          proc_control_B.c_k[1] = std::cos(proc_control_B.c_k[1]);
          proc_control_B.u2[1] = std::sin(proc_control_B.u2[1]);
          proc_control_B.c_k[2] = std::cos(proc_control_B.rtb_u2_n);
          proc_control_B.u2[2] = std::sin(proc_control_B.rtb_u2_n);
          proc_control_B.t65 = proc_control_B.c_k[0] * proc_control_B.c_k[1];
          proc_control_B.d = proc_control_B.u2[0] * proc_control_B.u2[1];
          proc_control_B.n[0] = proc_control_B.t65 * proc_control_B.c_k[2] +
            proc_control_B.d * proc_control_B.u2[2];
          proc_control_B.n[1] = proc_control_B.t65 * proc_control_B.u2[2] -
            proc_control_B.d * proc_control_B.c_k[2];
          proc_control_B.t65 = proc_control_B.u2[0] * proc_control_B.c_k[1];
          proc_control_B.d = proc_control_B.c_k[0] * proc_control_B.u2[1];
          proc_control_B.n[2] = proc_control_B.d * proc_control_B.c_k[2] +
            proc_control_B.t65 * proc_control_B.u2[2];
          proc_control_B.n[3] = proc_control_B.t65 * proc_control_B.c_k[2] -
            proc_control_B.d * proc_control_B.u2[2];

          //  calculer
          //  quaternion partie scalaire
          //  quaternion partie vectoriel
          proc_control_B.scale = 0.0;
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 3;
               proc_control_B.ibmat++) {
            proc_control_B.scale += proc_control_DW.obj_a.poseList
              [(((proc_control_B.ibmat + 4) << 1) + static_cast<int32_T>
                (proc_control_DW.obj_a.i - 1.0)) - 1] *
              proc_control_B.TmpSignalConversionAtMATL_b[proc_control_B.ibmat];
          }

          proc_control_B.d = 2.0 * proc_control_B.scale;
          proc_control_B.scale = 0.0;
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 3;
               proc_control_B.ibmat++) {
            proc_control_B.t4 = proc_control_DW.obj_a.poseList
              [(((proc_control_B.ibmat + 4) << 1) + static_cast<int32_T>
                (proc_control_DW.obj_a.i - 1.0)) - 1];
            proc_control_B.scale += proc_control_B.t4 * proc_control_B.t4;
          }

          proc_control_B.Product1_gp = proc_control_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 5];
          proc_control_B.scale = proc_control_B.Product1_gp *
            proc_control_B.Product1_gp - proc_control_B.scale;
          proc_control_B.absxk = proc_control_B.Product1_gp * 2.0;

          //  QuatRotate n'est pas compilable
          //  choisir sens du quaternion
          proc_control_B.TmpSignalConversionAtSFunct[0] = proc_control_B.n[0];
          proc_control_B.TmpSignalConversionAtSFunct[1] = proc_control_B.n[1];
          proc_control_B.TmpSignalConversionAtSFunct[2] = proc_control_B.n[2];
          proc_control_B.TmpSignalConversionAtSFunct[3] = proc_control_B.n[3];

          // ==========================================================================    
          //  Fonnction qui retoure le quaternion le plus court/long selon
          //  l'utilisateur
          proc_control_B.t = 0.0;
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 4;
               proc_control_B.ibmat++) {
            proc_control_B.t += proc_control_DW.obj_a.poseList
              [(((proc_control_B.ibmat + 3) << 1) + static_cast<int32_T>
                (proc_control_DW.obj_a.i - 1.0)) - 1] *
              proc_control_B.n[proc_control_B.ibmat];
          }

          //  conjuger le quaternion au besoin
          if (((proc_control_B.t > 1.0) && (proc_control_B.DataTypeConversion2 ==
                0.0)) || ((proc_control_B.t < 1.0) &&
                          (proc_control_B.DataTypeConversion2 == 1.0))) {
            proc_control_B.TmpSignalConversionAtSFunct[0] = proc_control_B.n[0];
            proc_control_B.TmpSignalConversionAtSFunct[1] = -proc_control_B.n[1];
            proc_control_B.TmpSignalConversionAtSFunct[2] = -proc_control_B.n[2];
            proc_control_B.TmpSignalConversionAtSFunct[3] = -proc_control_B.n[3];
          }

          //  transformer le point en fonction du frame
          proc_control_B.rtb_u2_n = std::round
            (proc_control_B.DataTypeConversion1[0]);
          if (proc_control_B.rtb_u2_n < 256.0) {
            if (proc_control_B.rtb_u2_n >= 0.0) {
              tmp = static_cast<uint8_T>(proc_control_B.rtb_u2_n);
            } else {
              tmp = 0U;
            }
          } else {
            tmp = MAX_uint8_T;
          }

          switch (tmp) {
           case 0U:
            //  position et angle absolue
            proc_control_B.twpt[0] = proc_control_B.TmpSignalConversionAtMATL_b
              [0];
            proc_control_B.twpt[1] = proc_control_B.TmpSignalConversionAtMATL_b
              [1];
            proc_control_B.twpt[2] = proc_control_B.TmpSignalConversionAtMATL_b
              [2];
            proc_control_B.twpt[3] = proc_control_B.n[0];
            proc_control_B.twpt[4] = proc_control_B.n[1];
            proc_control_B.twpt[5] = proc_control_B.n[2];
            proc_control_B.twpt[6] = proc_control_B.n[3];
            break;

           case 1U:
            //  position et angle relatif
            proc_control_B.t65 = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 11];
            proc_control_B.t15 = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 7];
            proc_control_B.t3 = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 9];
            proc_control_B.twpt[0] = ((proc_control_B.t3 *
              proc_control_B.TmpSignalConversionAtMATL_b[2] - proc_control_B.t65
              * proc_control_B.TmpSignalConversionAtMATL_b[1]) *
              proc_control_B.absxk + (proc_control_B.t15 * proc_control_B.d +
              proc_control_B.scale * proc_control_B.TmpSignalConversionAtMATL_b
              [0])) + proc_control_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) - 1];
            proc_control_B.twpt[1] = ((proc_control_B.t65 *
              proc_control_B.TmpSignalConversionAtMATL_b[0] - proc_control_B.t15
              * proc_control_B.TmpSignalConversionAtMATL_b[2]) *
              proc_control_B.absxk + (proc_control_B.t3 * proc_control_B.d +
              proc_control_B.scale * proc_control_B.TmpSignalConversionAtMATL_b
              [1])) + proc_control_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) + 1];
            proc_control_B.twpt[2] = ((proc_control_B.t15 *
              proc_control_B.TmpSignalConversionAtMATL_b[1] - proc_control_B.t3 *
              proc_control_B.TmpSignalConversionAtMATL_b[0]) *
              proc_control_B.absxk + (proc_control_B.t65 * proc_control_B.d +
              proc_control_B.scale * proc_control_B.TmpSignalConversionAtMATL_b
              [2])) + proc_control_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) + 3];
            proc_control_B.twpt[3] = ((proc_control_B.Product1_gp *
              proc_control_B.TmpSignalConversionAtSFunct[0] - proc_control_B.t15
              * proc_control_B.TmpSignalConversionAtSFunct[1]) -
              proc_control_B.t3 * proc_control_B.TmpSignalConversionAtSFunct[2])
              - proc_control_B.t65 * proc_control_B.TmpSignalConversionAtSFunct
              [3];
            proc_control_B.twpt[4] = (proc_control_B.Product1_gp *
              proc_control_B.TmpSignalConversionAtSFunct[1] + proc_control_B.t15
              * proc_control_B.TmpSignalConversionAtSFunct[0]) +
              (proc_control_B.t3 * proc_control_B.TmpSignalConversionAtSFunct[3]
               - proc_control_B.t65 *
               proc_control_B.TmpSignalConversionAtSFunct[2]);
            proc_control_B.twpt[5] = (proc_control_B.Product1_gp *
              proc_control_B.TmpSignalConversionAtSFunct[2] + proc_control_B.t3 *
              proc_control_B.TmpSignalConversionAtSFunct[0]) +
              (proc_control_B.t65 * proc_control_B.TmpSignalConversionAtSFunct[1]
               - proc_control_B.t15 *
               proc_control_B.TmpSignalConversionAtSFunct[3]);
            proc_control_B.twpt[6] = (proc_control_B.Product1_gp *
              proc_control_B.TmpSignalConversionAtSFunct[3] + proc_control_B.t65
              * proc_control_B.TmpSignalConversionAtSFunct[0]) +
              (proc_control_B.t15 * proc_control_B.TmpSignalConversionAtSFunct[2]
               - proc_control_B.t3 * proc_control_B.TmpSignalConversionAtSFunct
               [1]);
            break;

           case 2U:
            //  position relatif et angle absolue
            proc_control_B.t15 = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 11];
            proc_control_B.t65 = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 7];
            proc_control_B.t = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 9];
            proc_control_B.twpt[0] = ((proc_control_B.t *
              proc_control_B.TmpSignalConversionAtMATL_b[2] - proc_control_B.t15
              * proc_control_B.TmpSignalConversionAtMATL_b[1]) *
              proc_control_B.absxk + (proc_control_B.t65 * proc_control_B.d +
              proc_control_B.scale * proc_control_B.TmpSignalConversionAtMATL_b
              [0])) + proc_control_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) - 1];
            proc_control_B.twpt[1] = ((proc_control_B.t15 *
              proc_control_B.TmpSignalConversionAtMATL_b[0] - proc_control_B.t65
              * proc_control_B.TmpSignalConversionAtMATL_b[2]) *
              proc_control_B.absxk + (proc_control_B.t * proc_control_B.d +
              proc_control_B.scale * proc_control_B.TmpSignalConversionAtMATL_b
              [1])) + proc_control_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) + 1];
            proc_control_B.twpt[2] = ((proc_control_B.t65 *
              proc_control_B.TmpSignalConversionAtMATL_b[1] - proc_control_B.t *
              proc_control_B.TmpSignalConversionAtMATL_b[0]) *
              proc_control_B.absxk + (proc_control_B.t15 * proc_control_B.d +
              proc_control_B.scale * proc_control_B.TmpSignalConversionAtMATL_b
              [2])) + proc_control_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) + 3];
            proc_control_B.twpt[3] = proc_control_B.n[0];
            proc_control_B.twpt[4] = proc_control_B.n[1];
            proc_control_B.twpt[5] = proc_control_B.n[2];
            proc_control_B.twpt[6] = proc_control_B.n[3];
            break;

           case 3U:
            //  position absolue et angle relatif
            proc_control_B.twpt[0] = proc_control_B.TmpSignalConversionAtMATL_b
              [0];
            proc_control_B.twpt[1] = proc_control_B.TmpSignalConversionAtMATL_b
              [1];
            proc_control_B.twpt[2] = proc_control_B.TmpSignalConversionAtMATL_b
              [2];
            proc_control_B.t15 = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 9];
            proc_control_B.t65 = proc_control_DW.obj_a.poseList
              [static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 11];
            proc_control_B.twpt[3] = ((proc_control_B.Product1_gp *
              proc_control_B.TmpSignalConversionAtSFunct[0] -
              proc_control_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) + 7] *
              proc_control_B.TmpSignalConversionAtSFunct[1]) -
              proc_control_B.t15 * proc_control_B.TmpSignalConversionAtSFunct[2])
              - proc_control_B.t65 * proc_control_B.TmpSignalConversionAtSFunct
              [3];
            proc_control_B.twpt[4] = (proc_control_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 7] *
              proc_control_B.TmpSignalConversionAtSFunct[0] +
              proc_control_B.Product1_gp *
              proc_control_B.TmpSignalConversionAtSFunct[1]) +
              (proc_control_B.t15 * proc_control_B.TmpSignalConversionAtSFunct[3]
               - proc_control_B.t65 *
               proc_control_B.TmpSignalConversionAtSFunct[2]);
            proc_control_B.twpt[5] = (proc_control_B.t65 *
              proc_control_B.TmpSignalConversionAtSFunct[1] -
              proc_control_DW.obj_a.poseList[static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) + 7] *
              proc_control_B.TmpSignalConversionAtSFunct[3]) +
              (proc_control_B.Product1_gp *
               proc_control_B.TmpSignalConversionAtSFunct[2] +
               proc_control_B.t15 * proc_control_B.TmpSignalConversionAtSFunct[0]);
            proc_control_B.twpt[6] = (proc_control_DW.obj_a.poseList[
              static_cast<int32_T>(proc_control_DW.obj_a.i - 1.0) + 7] *
              proc_control_B.TmpSignalConversionAtSFunct[2] - proc_control_B.t15
              * proc_control_B.TmpSignalConversionAtSFunct[1]) +
              (proc_control_B.Product1_gp *
               proc_control_B.TmpSignalConversionAtSFunct[3] +
               proc_control_B.t65 * proc_control_B.TmpSignalConversionAtSFunct[0]);
            break;

           default:
            //  retourne le point précédent
            proc_control_B.twpt[0] = proc_control_DW.obj_a.poseList[static_cast<
              int32_T>(proc_control_DW.obj_a.i - 1.0) - 1];
            proc_control_B.twpt[1] = proc_control_DW.obj_a.poseList[static_cast<
              int32_T>(proc_control_DW.obj_a.i - 1.0) + 1];
            proc_control_B.twpt[2] = proc_control_DW.obj_a.poseList[static_cast<
              int32_T>(proc_control_DW.obj_a.i - 1.0) + 3];
            proc_control_B.twpt[3] = proc_control_B.Product1_gp;
            proc_control_B.twpt[4] = proc_control_DW.obj_a.poseList[static_cast<
              int32_T>(proc_control_DW.obj_a.i - 1.0) + 7];
            proc_control_B.twpt[5] = proc_control_DW.obj_a.poseList[static_cast<
              int32_T>(proc_control_DW.obj_a.i - 1.0) + 9];
            proc_control_B.twpt[6] = proc_control_DW.obj_a.poseList[static_cast<
              int32_T>(proc_control_DW.obj_a.i - 1.0) + 11];
            break;
          }

          for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 9;
               proc_control_B.jp1j++) {
            proc_control_DW.obj_a.poseList[(static_cast<int32_T>
              (proc_control_DW.obj_a.i) + (proc_control_B.jp1j << 1)) - 1] =
              proc_control_B.twpt[proc_control_B.jp1j];
          }

          proc_control_DW.obj_a.i++;
        }

        // End of Outputs for SubSystem: '<S302>/Subscribe'
        //  Générer la trajectoire
        if (proc_control_DW.Delay1_DSTATE_c) {
          for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 9;
               proc_control_B.jp1j++) {
            proc_control_B.jj = proc_control_B.jp1j << 1;
            proc_control_DW.obj_a.poseList[proc_control_B.jj] =
              proc_control_DW.obj_a.poseList[(static_cast<int32_T>
              (proc_control_DW.obj_a.i - 1.0) + proc_control_B.jj) - 1];
            proc_control_DW.obj_a.poseList[proc_control_B.jj + 1] = 999.0;
          }

          proc_control_DW.obj_a.i = 2.0;
        }

        //  Reset Trajectoire
        if (proc_control_B.MATLABSystem_o6 != 0.0) {
          // ========================================================================== 
          // ==========================================================================    
          //  Fonction qui reset la trajectoire
          //  remove roll and pitch from initial condition
          proc_control_B.d = 1.0 / std::sqrt(((proc_control_B.qS2W[0] *
            proc_control_B.qS2W[0] + proc_control_B.qS2W[1] *
            proc_control_B.qS2W[1]) + proc_control_B.qS2W[2] *
            proc_control_B.qS2W[2]) + proc_control_B.qS2W[3] *
            proc_control_B.qS2W[3]);
          proc_control_B.n[0] = proc_control_B.qS2W[0] * proc_control_B.d;
          proc_control_B.n[1] = proc_control_B.qS2W[1] * proc_control_B.d;
          proc_control_B.n[2] = proc_control_B.qS2W[2] * proc_control_B.d;
          proc_control_B.n[3] = proc_control_B.qS2W[3] * proc_control_B.d;
          proc_control_B.scale = (proc_control_B.n[1] * proc_control_B.n[3] +
            proc_control_B.n[0] * proc_control_B.n[2]) * 2.0;
          rtb_Reset = (proc_control_B.scale >= 0.99999999999999778);
          rtb_NewDvlMsg = (proc_control_B.scale <= -0.99999999999999778);
          if (proc_control_B.scale >= 0.99999999999999778) {
            proc_control_B.scale = 1.0;
          }

          if (rtb_NewDvlMsg) {
            proc_control_B.scale = -1.0;
          }

          proc_control_B.t65 = proc_control_B.n[0] * proc_control_B.n[0];
          proc_control_B.d = proc_control_B.n[1] * proc_control_B.n[1];
          proc_control_B.t4 = proc_control_B.n[2] * proc_control_B.n[2];
          proc_control_B.t15 = proc_control_B.n[3] * proc_control_B.n[3];
          proc_control_B.c_k[0] = rt_atan2d_snf((proc_control_B.n[2] *
            proc_control_B.n[3] - proc_control_B.n[0] * proc_control_B.n[1]) *
            -2.0, ((proc_control_B.t65 - proc_control_B.d) - proc_control_B.t4)
            + proc_control_B.t15);
          proc_control_B.c_k[1] = std::asin(proc_control_B.scale);
          proc_control_B.c_k[2] = rt_atan2d_snf((proc_control_B.n[1] *
            proc_control_B.n[2] - proc_control_B.n[0] * proc_control_B.n[3]) *
            -2.0, ((proc_control_B.t65 + proc_control_B.d) - proc_control_B.t4)
            - proc_control_B.t15);
          proc_control_B.ibmat = 0;
          if (rtb_Reset || rtb_NewDvlMsg) {
            for (proc_control_B.jA = 0; proc_control_B.jA < 1; proc_control_B.jA
                 ++) {
              proc_control_B.ibmat++;
            }
          }

          if (proc_control_B.ibmat - 1 >= 0) {
            proc_control_B.c_k[0] = 0.0;
          }

          proc_control_B.ibmat = 0;
          if (rtb_Reset || rtb_NewDvlMsg) {
            for (proc_control_B.jA = 0; proc_control_B.jA < 1; proc_control_B.jA
                 ++) {
              proc_control_B.ibmat++;
            }
          }

          proc_control_B.jp1j = proc_control_B.ibmat;
          proc_control_B.b_x_size = proc_control_B.ibmat;
          if (proc_control_B.ibmat - 1 >= 0) {
            proc_control_B.b_x_data = proc_control_B.scale;
          }

          proc_control_B.i = proc_control_B.ibmat - 1;
          for (proc_control_B.jA = 0; proc_control_B.jA <= proc_control_B.i;
               proc_control_B.jA++) {
            proc_control_B.t65 = proc_control_B.b_x_data;
            if (!std::isnan(proc_control_B.b_x_data)) {
              if (proc_control_B.b_x_data < 0.0) {
                proc_control_B.t65 = -1.0;
              } else {
                proc_control_B.t65 = (proc_control_B.b_x_data > 0.0);
              }
            }

            proc_control_B.b_x_data = proc_control_B.t65;
          }

          proc_control_B.ibmat = 0;
          if (rtb_Reset || rtb_NewDvlMsg) {
            for (proc_control_B.jA = 0; proc_control_B.jA < 1; proc_control_B.jA
                 ++) {
              proc_control_B.ibmat++;
            }
          }

          proc_control_B.i = proc_control_B.ibmat;
          proc_control_B.e_size = proc_control_B.ibmat;
          if (proc_control_B.ibmat - 1 >= 0) {
            proc_control_B.e_data = rt_atan2d_snf(proc_control_B.n[1],
              proc_control_B.n[0]);
          }

          proc_control_B.ibmat = 0;
          if (rtb_Reset || rtb_NewDvlMsg) {
            for (proc_control_B.jA = 0; proc_control_B.jA < 1; proc_control_B.jA
                 ++) {
              proc_control_B.k_data = 1;
              proc_control_B.ibmat++;
            }
          }

          if (proc_control_B.jp1j == proc_control_B.i) {
            if (proc_control_B.jp1j - 1 >= 0) {
              proc_control_B.c_k[2] = proc_control_B.b_x_data * 2.0 *
                proc_control_B.e_data;
            }
          } else {
            proc_control_binary_expand_op_p(proc_control_B.c_k,
              &proc_control_B.k_data, &proc_control_B.b_x_data,
              &proc_control_B.b_x_size, &proc_control_B.e_data,
              &proc_control_B.e_size);
          }

          //  Retransformer en quaternion
          proc_control_B.u2[0] = proc_control_B.c_k[0] * 0.0 / 2.0;
          proc_control_B.u2[1] = proc_control_B.c_k[1] * 0.0 / 2.0;
          proc_control_B.u2[2] = proc_control_B.c_k[2] / 2.0;
          proc_control_B.c_k[0] = std::cos(proc_control_B.u2[0]);
          proc_control_B.u2[0] = std::sin(proc_control_B.u2[0]);
          proc_control_B.c_k[1] = std::cos(proc_control_B.u2[1]);
          proc_control_B.u2[1] = std::sin(proc_control_B.u2[1]);
          proc_control_B.c_k[2] = std::cos(proc_control_B.u2[2]);
          proc_control_B.u2[2] = std::sin(proc_control_B.u2[2]);
          proc_control_B.t65 = proc_control_B.c_k[0] * proc_control_B.c_k[1];
          proc_control_B.d = proc_control_B.u2[0] * proc_control_B.u2[1];
          proc_control_B.TmpSignalConversionAtMATLAB[3] = proc_control_B.t65 *
            proc_control_B.c_k[2] - proc_control_B.d * proc_control_B.u2[2];
          proc_control_B.t4 = proc_control_B.c_k[0] * proc_control_B.u2[1];
          proc_control_B.TmpSignalConversionAtMATLAB[4] = proc_control_B.u2[0] *
            proc_control_B.c_k[1] * proc_control_B.c_k[2] + proc_control_B.t4 *
            proc_control_B.u2[2];
          proc_control_B.TmpSignalConversionAtMATLAB[5] = -proc_control_B.u2[0] *
            proc_control_B.c_k[1] * proc_control_B.u2[2] + proc_control_B.t4 *
            proc_control_B.c_k[2];
          proc_control_B.TmpSignalConversionAtMATLAB[6] = proc_control_B.t65 *
            proc_control_B.u2[2] + proc_control_B.d * proc_control_B.c_k[2];
          for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 7;
               proc_control_B.jp1j++) {
            proc_control_DW.obj_a.initcond[proc_control_B.jp1j] =
              proc_control_B.TmpSignalConversionAtMATLAB[proc_control_B.jp1j];
          }

          //  definir les conditions initiaux
          proc_control_B.jp1j = 0;
          for (proc_control_B.jj = 0; proc_control_B.jj < 9; proc_control_B.jj++)
          {
            proc_control_DW.obj_a.poseList[proc_control_B.jp1j + 1] = 999.0;
            proc_control_B.jp1j += 2;
          }

          proc_control_DW.obj_a.poseList[14] = 0.0;
          proc_control_DW.obj_a.poseList[16] = 0.0;
          proc_control_B.jp1j = 0;
          for (proc_control_B.jj = 0; proc_control_B.jj < 7; proc_control_B.jj++)
          {
            proc_control_DW.obj_a.poseList[proc_control_B.jp1j] =
              proc_control_DW.obj_a.initcond[proc_control_B.jj];
            proc_control_DW.obj_a.poseList[proc_control_B.jp1j + 1] =
              proc_control_DW.obj_a.initcond[proc_control_B.jj];
            proc_control_B.jp1j += 2;
          }

          proc_control_DW.obj_a.poseList[15] = 1.0;
          proc_control_DW.obj_a.poseList[17] = 0.0;
          proc_control_DW.obj_a.i = 2.0;
        }

        // Outputs for Enabled SubSystem: '<S302>/Pre-traitement' incorporates:
        //   EnablePort: '<S314>/Enable'

        // Outputs for Atomic SubSystem: '<S302>/Subscribe'
        if (rtb_Merge || (proc_control_B.MATLABSystem_o6 != 0.0)) {
          proc_control_B.MatrixConcatenate[0] = proc_control_P.Constant1_Value_o;

          // Math: '<S314>/Transpose' incorporates:
          //   Concatenate: '<S314>/Matrix Concatenate'
          //   Constant: '<S314>/Constant1'
          //   MATLABSystem: '<S302>/MATLAB System1'
          //   Selector: '<S314>/Selector'
          //   Selector: '<S314>/Selector1'

          proc_control_B.jp1j = 0;
          proc_control_B.jj = 0;
          proc_control_B.jA = 0;
          for (proc_control_B.i = 0; proc_control_B.i < 2; proc_control_B.i++) {
            proc_control_B.ibmat = 0;
            for (proc_control_B.c_l = 0; proc_control_B.c_l < 9;
                 proc_control_B.c_l++) {
              proc_control_B.Transpose_i[proc_control_B.c_l + proc_control_B.jj]
                = proc_control_DW.obj_a.poseList[proc_control_B.ibmat +
                proc_control_B.i];
              proc_control_B.ibmat += 2;
            }

            proc_control_B.Selector[proc_control_B.jp1j] =
              proc_control_B.Transpose_i[proc_control_B.jj];
            proc_control_B.Selector[proc_control_B.jp1j + 1] =
              proc_control_B.Transpose_i[proc_control_B.jj + 1];
            proc_control_B.Selector[proc_control_B.jp1j + 2] =
              proc_control_B.Transpose_i[proc_control_B.jj + 2];
            proc_control_B.Selector1[proc_control_B.jA] =
              proc_control_B.Transpose_i[proc_control_B.jj + 3];
            proc_control_B.Selector1[proc_control_B.jA + 1] =
              proc_control_B.Transpose_i[proc_control_B.jj + 4];
            proc_control_B.Selector1[proc_control_B.jA + 2] =
              proc_control_B.Transpose_i[proc_control_B.jj + 5];
            proc_control_B.Selector1[proc_control_B.jA + 3] =
              proc_control_B.Transpose_i[proc_control_B.jj + 6];
            proc_control_B.jp1j += 3;
            proc_control_B.jj += 9;
            proc_control_B.jA += 4;
          }

          // End of Math: '<S314>/Transpose'

          // Selector: '<S314>/Selector2' incorporates:
          //   Concatenate: '<S314>/Matrix Concatenate'
          //   Math: '<S314>/Transpose'

          proc_control_B.MatrixConcatenate[1] = proc_control_B.Transpose_i[16];
          for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 7;
               proc_control_B.jp1j++) {
            // Selector: '<S314>/Selector4' incorporates:
            //   Math: '<S314>/Transpose'

            proc_control_B.Selector4[proc_control_B.jp1j] =
              proc_control_B.Transpose_i[proc_control_B.jp1j + 9];
          }
        }

        // End of Outputs for SubSystem: '<S302>/Pre-traitement'

        // Outputs for Resettable SubSystem: '<S302>/Trajectory generator' incorporates:
        //   ResetPort: '<S317>/Reset'

        if (rtb_Merge && (proc_control_PrevZCX.Trajectorygenerator_Reset_ZCE !=
                          POS_ZCSIG)) {
          // InitializeConditions for DiscreteIntegrator: '<S317>/Discrete-Time Integrator' 
          proc_control_DW.DiscreteTimeIntegrator_DSTATE =
            proc_control_P.DiscreteTimeIntegrator_IC;
        }

        proc_control_PrevZCX.Trajectorygenerator_Reset_ZCE = rtb_Merge;

        // End of Outputs for SubSystem: '<S302>/Subscribe'

        // DiscreteIntegrator: '<S317>/Discrete-Time Integrator' incorporates:
        //   Concatenate: '<S314>/Matrix Concatenate'
        //   Constant: '<S314>/Constant1'
        //   Constant: '<S317>/Constant'
        //   Logic: '<S302>/OR'
        //   MATLABSystem: '<S315>/SourceBlock'

        proc_control_B.t65 = proc_control_P.DiscreteTimeIntegrator_gainva_e *
          proc_control_P.Constant_Value_ep;

        // DiscreteIntegrator: '<S317>/Discrete-Time Integrator'
        proc_control_B.d = proc_control_B.t65 +
          proc_control_DW.DiscreteTimeIntegrator_DSTATE;

        // MATLABSystem: '<S317>/Rotation Trajectory' incorporates:
        //   Concatenate: '<S314>/Matrix Concatenate'
        //   Selector: '<S314>/Selector1'
        //   Selector: '<S317>/Selector1'
        //   Selector: '<S317>/Selector2'

        if (proc_control_DW.obj_j.TunablePropsChanged) {
          proc_control_DW.obj_j.TunablePropsChanged = false;
        }

        proc_control_B.scale = 1.0 / (proc_control_B.MatrixConcatenate[1] -
          proc_control_B.MatrixConcatenate[0]);
        proc_control_B.t3 = (proc_control_B.d -
                             proc_control_B.MatrixConcatenate[0]) *
          proc_control_B.scale;
        if (proc_control_B.d < proc_control_B.MatrixConcatenate[0]) {
          proc_control_B.t3 = 0.0;
        }

        if (proc_control_B.d > proc_control_B.MatrixConcatenate[1]) {
          proc_control_B.t3 = 1.0;
        }

        if (proc_control_B.d < proc_control_B.MatrixConcatenate[0]) {
          proc_control_B.scale = 0.0;
        }

        proc_control_B.t4 = proc_control_B.scale;
        if (proc_control_B.d > proc_control_B.MatrixConcatenate[1]) {
          proc_control_B.t4 = 0.0;
        }

        proc_control_B.n_c = std::sqrt(((proc_control_B.Selector1[0] *
          proc_control_B.Selector1[0] + proc_control_B.Selector1[1] *
          proc_control_B.Selector1[1]) + proc_control_B.Selector1[2] *
          proc_control_B.Selector1[2]) + proc_control_B.Selector1[3] *
          proc_control_B.Selector1[3]);
        proc_control_B.scale = proc_control_B.Selector1[0] / proc_control_B.n_c;
        proc_control_B.absxk = proc_control_B.Selector1[1] / proc_control_B.n_c;
        proc_control_B.t = proc_control_B.Selector1[2] / proc_control_B.n_c;
        proc_control_B.t15 = proc_control_B.Selector1[3] / proc_control_B.n_c;
        proc_control_B.n_c = std::sqrt(((proc_control_B.Selector1[4] *
          proc_control_B.Selector1[4] + proc_control_B.Selector1[5] *
          proc_control_B.Selector1[5]) + proc_control_B.Selector1[6] *
          proc_control_B.Selector1[6]) + proc_control_B.Selector1[7] *
          proc_control_B.Selector1[7]);
        proc_control_B.t16 = proc_control_B.Selector1[4] / proc_control_B.n_c;
        proc_control_B.t63 = proc_control_B.Selector1[5] / proc_control_B.n_c;
        proc_control_B.t5 = proc_control_B.Selector1[6] / proc_control_B.n_c;
        proc_control_B.t6 = proc_control_B.Selector1[7] / proc_control_B.n_c;
        proc_control_B.n_c = std::sqrt(((proc_control_B.scale *
          proc_control_B.scale + proc_control_B.absxk * proc_control_B.absxk) +
          proc_control_B.t * proc_control_B.t) + proc_control_B.t15 *
          proc_control_B.t15);
        proc_control_B.Product1_gp = proc_control_B.scale / proc_control_B.n_c;
        proc_control_B.Product2_j = proc_control_B.absxk / proc_control_B.n_c;
        proc_control_B.t69 = proc_control_B.t / proc_control_B.n_c;
        proc_control_B.theta0 = proc_control_B.t15 / proc_control_B.n_c;
        proc_control_B.oa = ((proc_control_B.Product1_gp -
                              proc_control_B.Product2_j * 0.0) -
                             proc_control_B.t69 * 0.0) - proc_control_B.theta0 *
          0.0;
        proc_control_B.ob = ((proc_control_B.Product1_gp * 0.0 +
                              proc_control_B.Product2_j) + proc_control_B.t69 *
                             0.0) - proc_control_B.theta0 * 0.0;
        proc_control_B.oc = ((proc_control_B.Product1_gp * 0.0 -
                              proc_control_B.Product2_j * 0.0) +
                             proc_control_B.t69) + proc_control_B.theta0 * 0.0;
        proc_control_B.od = ((proc_control_B.Product1_gp * 0.0 +
                              proc_control_B.Product2_j * 0.0) -
                             proc_control_B.t69 * 0.0) + proc_control_B.theta0;
        proc_control_B.n_c = std::sqrt(((proc_control_B.t16 * proc_control_B.t16
          + proc_control_B.t63 * proc_control_B.t63) + proc_control_B.t5 *
          proc_control_B.t5) + proc_control_B.t6 * proc_control_B.t6);
        proc_control_B.Product1_gp = proc_control_B.t16 / proc_control_B.n_c;
        proc_control_B.Product2_j = proc_control_B.t63 / proc_control_B.n_c;
        proc_control_B.t69 = proc_control_B.t5 / proc_control_B.n_c;
        proc_control_B.theta0 = proc_control_B.t6 / proc_control_B.n_c;
        proc_control_B.Divide_i = ((proc_control_B.Product1_gp -
          proc_control_B.Product2_j * 0.0) - proc_control_B.t69 * 0.0) -
          proc_control_B.theta0 * 0.0;
        proc_control_B.Product8 = ((proc_control_B.Product1_gp * 0.0 +
          proc_control_B.Product2_j) + proc_control_B.t69 * 0.0) -
          proc_control_B.theta0 * 0.0;
        proc_control_B.n_c = ((proc_control_B.Product1_gp * 0.0 -
          proc_control_B.Product2_j * 0.0) + proc_control_B.t69) +
          proc_control_B.theta0 * 0.0;
        proc_control_B.Product1_gp = ((proc_control_B.Product1_gp * 0.0 +
          proc_control_B.Product2_j * 0.0) - proc_control_B.t69 * 0.0) +
          proc_control_B.theta0;
        proc_control_B.Product2_j = ((proc_control_B.oa *
          proc_control_B.Divide_i + proc_control_B.ob * proc_control_B.Product8)
          + proc_control_B.oc * proc_control_B.n_c) + proc_control_B.od *
          proc_control_B.Product1_gp;
        if (proc_control_B.Product2_j < 0.0) {
          proc_control_B.Divide_i = -proc_control_B.Divide_i;
          proc_control_B.Product8 = -proc_control_B.Product8;
          proc_control_B.n_c = -proc_control_B.n_c;
          proc_control_B.Product1_gp = -proc_control_B.Product1_gp;
          proc_control_B.Product2_j = -proc_control_B.Product2_j;
        }

        if (proc_control_B.Product2_j > 1.0) {
          proc_control_B.Product2_j = 1.0;
        }

        proc_control_B.theta0 = std::acos(proc_control_B.Product2_j);
        proc_control_B.t69 = std::sin(proc_control_B.theta0);
        proc_control_B.Product2_j = 1.0 / proc_control_B.t69;
        proc_control_B.theta0 = std::sin(0.0 * proc_control_B.theta0);
        proc_control_B.oa = (proc_control_B.t69 * proc_control_B.oa +
                             proc_control_B.theta0 * proc_control_B.Divide_i) *
          proc_control_B.Product2_j;
        proc_control_B.ob = (proc_control_B.t69 * proc_control_B.ob +
                             proc_control_B.theta0 * proc_control_B.Product8) *
          proc_control_B.Product2_j;
        proc_control_B.oc = (proc_control_B.t69 * proc_control_B.oc +
                             proc_control_B.theta0 * proc_control_B.n_c) *
          proc_control_B.Product2_j;
        proc_control_B.od = (proc_control_B.t69 * proc_control_B.od +
                             proc_control_B.theta0 * proc_control_B.Product1_gp)
          * proc_control_B.Product2_j;
        if (std::isinf(proc_control_B.Product2_j)) {
          proc__quaternion_parenReference(proc_control_B.scale,
            proc_control_B.absxk, proc_control_B.t, proc_control_B.t15, true,
            &proc_control_B.b_x_data, proc_control_B.k_size,
            &proc_control_B.e_data, proc_control_B.assign_temp_b_size,
            &proc_control_B.assign_temp_c_data,
            proc_control_B.assign_temp_c_size,
            &proc_control_B.assign_temp_d_data,
            proc_control_B.assign_temp_d_size);
          proc_con_quaternion_parenAssign(proc_control_B.oa, proc_control_B.ob,
            proc_control_B.oc, proc_control_B.od, &proc_control_B.b_x_data,
            proc_control_B.k_size, &proc_control_B.e_data,
            proc_control_B.assign_temp_b_size,
            &proc_control_B.assign_temp_c_data,
            proc_control_B.assign_temp_c_size,
            &proc_control_B.assign_temp_d_data,
            proc_control_B.assign_temp_d_size, &proc_control_B.oa,
            &proc_control_B.ob, &proc_control_B.oc, &proc_control_B.od);
        }

        proc_control_B.n_c = std::sqrt(((proc_control_B.oa * proc_control_B.oa +
          proc_control_B.ob * proc_control_B.ob) + proc_control_B.oc *
          proc_control_B.oc) + proc_control_B.od * proc_control_B.od);
        proc_contr_quaternionBase_slerp(proc_control_B.scale,
          proc_control_B.absxk, proc_control_B.t, proc_control_B.t15,
          proc_control_B.t16, proc_control_B.t63, proc_control_B.t5,
          proc_control_B.t6, &proc_control_B.t69, &proc_control_B.theta0,
          &proc_control_B.oa_f, &proc_control_B.ob_i);
        proc_con_quaternionBase_slerp_p(proc_control_B.scale,
          proc_control_B.absxk, proc_control_B.t, proc_control_B.t15,
          proc_control_B.t16, proc_control_B.t63, proc_control_B.t5,
          proc_control_B.t6, proc_control_B.t3, &proc_control_B.Product8,
          &proc_control_B.Divide_i, &proc_control_B.Product1_gp,
          &proc_control_B.Product2_j);
        proc_control_B.expl_temp_f = proc_computeFirstQuatDerivative
          (proc_control_B.oa / proc_control_B.n_c, proc_control_B.ob /
           proc_control_B.n_c, proc_control_B.oc / proc_control_B.n_c,
           proc_control_B.od / proc_control_B.n_c, proc_control_B.t69,
           proc_control_B.theta0, proc_control_B.oa_f, proc_control_B.ob_i,
           proc_control_B.t4, proc_control_B.Product8, proc_control_B.Divide_i,
           proc_control_B.Product1_gp, proc_control_B.Product2_j);
        proc_control_B.oa = 2.0 * proc_control_B.expl_temp_f.a;
        proc_control_B.ob = 2.0 * proc_control_B.expl_temp_f.b;
        proc_control_B.oc = 2.0 * proc_control_B.expl_temp_f.c;
        proc_control_B.od = 2.0 * proc_control_B.expl_temp_f.d;

        // MATLABSystem: '<S319>/Polynomial Trajectory1' incorporates:
        //   Concatenate: '<S314>/Matrix Concatenate'
        //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S239>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
        //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
        //   Lookup_n-D: '<S11>/ PWM to N'
        //   Lookup_n-D: '<S135>/N to A'
        //   Lookup_n-D: '<S135>/N to PWM'
        //   Lookup_n-D: '<S16>/N to RPM'
        //   Selector: '<S314>/Selector'
        //   Trigonometry: '<S267>/sincos'
        //   Trigonometry: '<S40>/sincos'
        //   UniformRandomNumber: '<S12>/ Drift'
        //
        rtb_Reset = false;
        rtb_NewDvlMsg = true;
        proc_control_B.ibmat = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_B.ibmat < 6)) {
          if (!(proc_control_DW.obj_jo.VelocityBoundaryCondition[proc_control_B.ibmat]
                ==
                proc_control_P.PolynomialTrajectory1_VelocityB[proc_control_B.ibmat]))
          {
            rtb_NewDvlMsg = false;
            exitg1 = true;
          } else {
            proc_control_B.ibmat++;
          }
        }

        if (rtb_NewDvlMsg) {
          rtb_Reset = true;
        }

        if (!rtb_Reset) {
          if (proc_control_DW.obj_jo.isInitialized == 1) {
            proc_control_DW.obj_jo.TunablePropsChanged = true;
          }

          for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6;
               proc_control_B.jp1j++) {
            proc_control_DW.obj_jo.VelocityBoundaryCondition[proc_control_B.jp1j]
              =
              proc_control_P.PolynomialTrajectory1_VelocityB[proc_control_B.jp1j];
          }
        }

        if (proc_control_DW.obj_jo.TunablePropsChanged) {
          proc_control_DW.obj_jo.TunablePropsChanged = false;
        }

        std::memset(&proc_control_B.TmpSignalConversionAtSFun_p[0], 0, 12U *
                    sizeof(real_T));
        proc_control_B.t4 = proc_control_B.MatrixConcatenate[1] -
          proc_control_B.MatrixConcatenate[0];
        for (proc_control_B.i = 0; proc_control_B.i < 3; proc_control_B.i++) {
          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S238>/Enable'

          // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
          //   EnablePort: '<S266>/Enable'

          proc_control_B.n[0] = proc_control_B.Selector[proc_control_B.i];
          proc_control_B.n[1] =
            proc_control_DW.obj_jo.VelocityBoundaryCondition[proc_control_B.i];
          proc_control_B.t3 = proc_control_B.Selector[proc_control_B.i + 3] -
            (proc_control_B.t4 * proc_control_B.n[1] + proc_control_B.n[0]);
          proc_control_B.t57 =
            proc_control_DW.obj_jo.VelocityBoundaryCondition[proc_control_B.i +
            3] - (0.0 * proc_control_B.n[0] + proc_control_B.n[1]);

          // End of Outputs for SubSystem: '<S263>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          proc_control_B.n[3] = proc_control_B.n[0];
          proc_control_B.t15 = proc_control_B.t4 * proc_control_B.t4;

          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S238>/Enable'

          // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
          //   EnablePort: '<S266>/Enable'

          proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.i] = 1.0 /
            proc_control_B.t15 * proc_control_B.t57 + -2.0 / rt_powd_snf
            (proc_control_B.t4, 3.0) * proc_control_B.t3;
          proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.i + 3] = 3.0
            / proc_control_B.t15 * proc_control_B.t3 + -1.0 / proc_control_B.t4 *
            proc_control_B.t57;
          proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.i + 6] =
            proc_control_B.n[1];
          proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.i + 9] =
            proc_control_B.n[3];

          // End of Outputs for SubSystem: '<S263>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        }

        std::memset(&proc_control_B.coeffMat[0], 0, 12U * sizeof(real_T));
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 3;
             proc_control_B.jp1j++) {
          proc_control_B.coeffMat[proc_control_B.jp1j + 9] = 0.0;
          proc_control_B.coeffMat[proc_control_B.jp1j + 9] +=
            proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.jp1j] *
            0.0;
          proc_control_B.coeffMat[proc_control_B.jp1j + 9] +=
            proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.jp1j + 3] *
            0.0;
          proc_control_B.coeffMat[proc_control_B.jp1j + 9] +=
            proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.jp1j + 6] *
            0.0;
          proc_control_B.coeffMat[proc_control_B.jp1j + 9] +=
            proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.jp1j + 9];
        }

        std::memset(&proc_control_B.coefsWithFlatStart[0], 0, 24U * sizeof
                    (real_T));
        proc_control_B.jp1j = 0;
        proc_control_B.jj = 0;
        for (proc_control_B.jA = 0; proc_control_B.jA < 4; proc_control_B.jA++)
        {
          proc_control_B.coefsWithFlatStart[proc_control_B.jp1j] =
            proc_control_B.coeffMat[proc_control_B.jj];
          proc_control_B.coefsWithFlatStart[proc_control_B.jp1j + 3] =
            proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.jj];
          proc_control_B.coefsWithFlatStart[proc_control_B.jp1j + 1] =
            proc_control_B.coeffMat[proc_control_B.jj + 1];
          proc_control_B.coefsWithFlatStart[proc_control_B.jp1j + 4] =
            proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.jj + 1];
          proc_control_B.coefsWithFlatStart[proc_control_B.jp1j + 2] =
            proc_control_B.coeffMat[proc_control_B.jj + 2];
          proc_control_B.coefsWithFlatStart[proc_control_B.jp1j + 5] =
            proc_control_B.TmpSignalConversionAtSFun_p[proc_control_B.jj + 2];
          proc_control_B.jp1j += 6;
          proc_control_B.jj += 3;
        }

        proc_control_B.n[0] = rt_powd_snf(proc_control_B.t4, 3.0);
        proc_control_B.n[1] = rt_powd_snf(proc_control_B.t4, 2.0);
        proc_control_B.n[2] = rt_powd_snf(proc_control_B.t4, 1.0);
        proc_control_B.n[3] = rt_powd_snf(proc_control_B.t4, 0.0);
        std::memset(&proc_control_B.coeffMat[0], 0, 12U * sizeof(real_T));
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 3;
             proc_control_B.jp1j++) {
          proc_control_B.coeffMat[proc_control_B.jp1j + 9] = 0.0;
          proc_control_B.coeffMat[proc_control_B.jp1j + 9] +=
            proc_control_B.coefsWithFlatStart[proc_control_B.jp1j + 3] *
            proc_control_B.n[0];
          proc_control_B.coeffMat[proc_control_B.jp1j + 9] +=
            proc_control_B.coefsWithFlatStart[proc_control_B.jp1j + 9] *
            proc_control_B.n[1];
          proc_control_B.coeffMat[proc_control_B.jp1j + 9] +=
            proc_control_B.coefsWithFlatStart[proc_control_B.jp1j + 15] *
            proc_control_B.n[2];
          proc_control_B.coeffMat[proc_control_B.jp1j + 9] +=
            proc_control_B.coefsWithFlatStart[proc_control_B.jp1j + 21] *
            proc_control_B.n[3];
        }

        std::memset(&proc_control_B.b_newCoefs_j[0], 0, 36U * sizeof(real_T));
        proc_control_B.jp1j = 0;
        proc_control_B.jj = 0;
        proc_control_B.jA = 0;
        for (proc_control_B.i = 0; proc_control_B.i < 4; proc_control_B.i++) {
          for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
               proc_control_B.ibmat++) {
            proc_control_B.b_newCoefs_j[proc_control_B.ibmat +
              proc_control_B.jp1j] =
              proc_control_B.coefsWithFlatStart[proc_control_B.ibmat +
              proc_control_B.jA];
          }

          proc_control_B.b_newCoefs_j[proc_control_B.jp1j + 6] =
            proc_control_B.coeffMat[proc_control_B.jj];
          proc_control_B.b_newCoefs_j[proc_control_B.jp1j + 7] =
            proc_control_B.coeffMat[proc_control_B.jj + 1];
          proc_control_B.b_newCoefs_j[proc_control_B.jp1j + 8] =
            proc_control_B.coeffMat[proc_control_B.jj + 2];
          proc_control_B.jp1j += 9;
          proc_control_B.jj += 3;
          proc_control_B.jA += 6;
        }

        proc_control_B.n[0] = proc_control_B.MatrixConcatenate[0] - 1.0;
        proc_control_B.n[1] = proc_control_B.MatrixConcatenate[0];
        proc_control_B.n[2] = proc_control_B.MatrixConcatenate[1];
        proc_control_B.n[3] = proc_control_B.MatrixConcatenate[1] + 1.0;
        proc_control_B.TmpSignalConversionAtSFunct[0] =
          proc_control_B.MatrixConcatenate[0] - 1.0;
        proc_control_B.TmpSignalConversionAtSFunct[1] =
          proc_control_B.MatrixConcatenate[0];
        proc_control_B.TmpSignalConversionAtSFunct[3] =
          proc_control_B.MatrixConcatenate[1] + 1.0;
        proc_control_B.scale = 0.01;
        if (proc_control_B.d > proc_control_B.MatrixConcatenate[1]) {
          proc_control_B.ibmat = 1;
          proc_control_B.jA = 1;
        } else {
          proc_control_B.ibmat = 0;
          proc_control_B.jA = 0;
        }

        if ((proc_control_B.ibmat != 0) && (proc_control_B.jA != 0)) {
          proc_control_B.scale = std::fmin((proc_control_B.d -
            proc_control_B.MatrixConcatenate[1]) / 2.0, 0.01);
        }

        proc_control_B.TmpSignalConversionAtSFunct[2] =
          proc_control_B.MatrixConcatenate[1] + proc_control_B.scale;
        std::memset(&proc_control_B.dCoefs[0], 0, 36U * sizeof(real_T));
        proc_control_B.jA = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 3; proc_control_B.jj++)
        {
          for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 9;
               proc_control_B.jp1j++) {
            proc_control_B.C_tmp = proc_control_B.jp1j + proc_control_B.jA;
            proc_control_B.dCoefs[proc_control_B.C_tmp + 9] = static_cast<real_T>
              (3 - proc_control_B.jj) *
              proc_control_B.b_newCoefs_j[proc_control_B.C_tmp];
          }

          proc_control_B.jA += 9;
        }

        // Update for DiscreteIntegrator: '<S317>/Discrete-Time Integrator'
        proc_control_DW.DiscreteTimeIntegrator_DSTATE = proc_control_B.t65 +
          proc_control_B.d;

        // End of Outputs for SubSystem: '<S302>/Trajectory generator'

        // MATLABSystem: '<S302>/MATLAB System'
        if (proc_control_DW.obj.linearConvergence !=
            proc_control_P.MATLABSystem_linearConvergence) {
          proc_control_DW.obj.linearConvergence =
            proc_control_P.MATLABSystem_linearConvergence;
        }

        if (proc_control_DW.obj.quaternionConvergence !=
            proc_control_P.MATLABSystem_quaternionConverge) {
          proc_control_DW.obj.quaternionConvergence =
            proc_control_P.MATLABSystem_quaternionConverge;
        }

        if (proc_control_DW.obj.TargetThreshold !=
            proc_control_P.MATLABSystem_TargetThreshold) {
          proc_control_DW.obj.TargetThreshold =
            proc_control_P.MATLABSystem_TargetThreshold;
        }

        // Outputs for Resettable SubSystem: '<S302>/Trajectory generator' incorporates:
        //   ResetPort: '<S317>/Reset'

        // MATLABSystem: '<S319>/Polynomial Trajectory1'
        proc_control_ppval_p(proc_control_B.n, proc_control_B.b_newCoefs_j,
                             proc_control_B.d, proc_control_B.c_k);
        proc_control_ppval_p(proc_control_B.TmpSignalConversionAtSFunct,
                             proc_control_B.dCoefs, proc_control_B.d,
                             proc_control_B.u2_j);

        // MATLABSystem: '<S302>/MATLAB System' incorporates:
        //   MATLABSystem: '<S317>/Rotation Trajectory'
        //   MATLABSystem: '<S319>/Polynomial Trajectory1'
        //   SignalConversion generated from: '<S302>/Transpose2'

        proc_control_B.z_cx[0] = proc_control_B.c_k[0];
        proc_control_B.z_cx[1] = proc_control_B.c_k[1];
        proc_control_B.z_cx[2] = proc_control_B.c_k[2];
        proc_control_B.z_cx[3] = proc_control_B.Product8;
        proc_control_B.z_cx[4] = proc_control_B.Divide_i;
        proc_control_B.z_cx[5] = proc_control_B.Product1_gp;
        proc_control_B.z_cx[6] = proc_control_B.Product2_j;
        proc_control_B.z_cx[7] = proc_control_B.u2_j[0];
        proc_control_B.z_cx[10] = ((proc_control_B.oa * -proc_control_B.Divide_i
          + proc_control_B.ob * proc_control_B.Product8) + proc_control_B.oc *
          -proc_control_B.Product2_j) - proc_control_B.od *
          -proc_control_B.Product1_gp;

        // End of Outputs for SubSystem: '<S302>/Trajectory generator'
        proc_control_B.TmpSignalConversionAtTransp[0] =
          proc_control_B.WorldPosition[0];

        // Outputs for Resettable SubSystem: '<S302>/Trajectory generator' incorporates:
        //   ResetPort: '<S317>/Reset'

        proc_control_B.z_cx[8] = proc_control_B.u2_j[1];
        proc_control_B.z_cx[11] = ((proc_control_B.oa *
          -proc_control_B.Product1_gp - proc_control_B.ob *
          -proc_control_B.Product2_j) + proc_control_B.oc *
          proc_control_B.Product8) + proc_control_B.od *
          -proc_control_B.Divide_i;

        // End of Outputs for SubSystem: '<S302>/Trajectory generator'
        proc_control_B.TmpSignalConversionAtTransp[1] =
          proc_control_B.WorldPosition[1];

        // Outputs for Resettable SubSystem: '<S302>/Trajectory generator' incorporates:
        //   ResetPort: '<S317>/Reset'

        proc_control_B.z_cx[9] = proc_control_B.u2_j[2];
        proc_control_B.z_cx[12] = ((proc_control_B.oa *
          -proc_control_B.Product2_j + proc_control_B.ob *
          -proc_control_B.Product1_gp) - proc_control_B.oc *
          -proc_control_B.Divide_i) + proc_control_B.od *
          proc_control_B.Product8;

        // End of Outputs for SubSystem: '<S302>/Trajectory generator'
        proc_control_B.TmpSignalConversionAtTransp[2] =
          proc_control_B.WorldPosition[2];
        proc_control_B.TmpSignalConversionAtTransp[3] = proc_control_B.qS2W[0];
        proc_control_B.TmpSignalConversionAtTransp[4] = proc_control_B.qS2W[1];
        proc_control_B.TmpSignalConversionAtTransp[5] = proc_control_B.qS2W[2];
        proc_control_B.TmpSignalConversionAtTransp[6] = proc_control_B.qS2W[3];
        proc_control_B.TmpSignalConversionAtTransp[7] =
          proc_control_B.BodyVelocity[0];
        proc_control_B.TmpSignalConversionAtTransp[10] =
          proc_control_B.AngularRate[0];
        proc_control_B.TmpSignalConversionAtTransp[8] =
          proc_control_B.BodyVelocity[1];
        proc_control_B.TmpSignalConversionAtTransp[11] =
          proc_control_B.AngularRate[1];
        proc_control_B.TmpSignalConversionAtTransp[9] =
          proc_control_B.BodyVelocity[2];
        proc_control_B.TmpSignalConversionAtTransp[12] =
          proc_control_B.AngularRate[2];

        // Merge generated from: '<S9>/Merge' incorporates:
        //   MATLABSystem: '<S302>/MATLAB System'
        //   MATLABSystem: '<S302>/MATLAB System1'
        //   Math: '<S302>/Transpose1'
        //   Selector: '<S314>/Selector4'

        proc_TrajectoryManager_stepImpl(&proc_control_DW.obj,
          proc_control_B.MATLABSystem_o6, proc_control_B.z_cx,
          proc_control_B.Selector4, proc_control_DW.obj_a.initcond,
          proc_control_B.TmpSignalConversionAtTransp, proc_control_B.y_j,
          &proc_control_B.isReached);

        // Merge generated from: '<S9>/Merge' incorporates:
        //   Constant: '<S302>/Constant2'
        //   SignalConversion generated from: '<S302>/Constant2'

        proc_control_B.isTrajDone = proc_control_P.Constant2_Value_i;

        // Merge generated from: '<S9>/Merge' incorporates:
        //   MATLABSystem: '<S302>/MATLAB System'
        //   SignalConversion generated from: '<S302>/MATLAB System'

        std::memcpy(&proc_control_B.Reference[0], &proc_control_B.y_j[0], 130U *
                    sizeof(real_T));

        // Outputs for Atomic SubSystem: '<S302>/Subscribe'
        // Update for Delay: '<S302>/Delay1' incorporates:
        //   MATLABSystem: '<S315>/SourceBlock'

        proc_control_DW.Delay1_DSTATE_c = rtb_Merge;

        // End of Outputs for SubSystem: '<S302>/Subscribe'
        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      }
      break;

     default:
      // Outputs for IfAction SubSystem: '<S9>/IDLE' incorporates:
      //   ActionPort: '<S296>/Action Port'

      // MATLAB Function: '<S296>/MATLAB Function1' incorporates:
      //   Constant: '<S296>/Constant'
      //   Math: '<S296>/Transpose'

      std::memcpy(&proc_control_B.TmpSignalConversionAtTransp[0],
                  &proc_control_P.Constant_Value_m5[0], 13U * sizeof(real_T));
      proc_control_B.TmpSignalConversionAtTransp[9] =
        -proc_control_P.Constant_Value_m5[9];
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        proc_control_B.ibmat = proc_control_B.i * 10;
        for (proc_control_B.jA = 0; proc_control_B.jA < 10; proc_control_B.jA++)
        {
          proc_control_B.y_j[proc_control_B.ibmat + proc_control_B.jA] =
            proc_control_B.TmpSignalConversionAtTransp[proc_control_B.i];
        }
      }

      // End of MATLAB Function: '<S296>/MATLAB Function1'

      // Merge generated from: '<S9>/Merge' incorporates:
      //   SignalConversion generated from: '<S296>/y'

      std::memcpy(&proc_control_B.Reference[0], &proc_control_B.y_j[0], 130U *
                  sizeof(real_T));

      // Merge generated from: '<S9>/Merge' incorporates:
      //   Constant: '<S296>/Constant5'
      //   SignalConversion generated from: '<S296>/y'

      proc_control_B.isReached = proc_control_P.Constant5_Value;

      // Merge generated from: '<S9>/Merge' incorporates:
      //   Constant: '<S296>/Constant4'
      //   SignalConversion generated from: '<S296>/y'

      proc_control_B.isTrajDone = proc_control_P.Constant4_Value;

      // End of Outputs for SubSystem: '<S9>/IDLE'
      break;
    }

    // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Switch: '<S7>/Switch' incorporates:
    //   Constant: '<S7>/Constant'
    //   Constant: '<S7>/Constant1'

    if (proc_control_B.DataTypeConversion_j > proc_control_P.Switch_Threshold_d)
    {
      proc_control_B.rtb_u2_n = proc_control_P.Constant_Value_hf;
    } else {
      proc_control_B.rtb_u2_n = proc_control_P.Constant1_Value_f;
    }

    // End of Switch: '<S7>/Switch'

    // Outputs for Enabled SubSystem: '<S7>/MPC manager' incorporates:
    //   EnablePort: '<S134>/Enable'

    if (proc_control_B.rtb_u2_n > 0.0) {
      if (!proc_control_DW.MPCmanager_MODE) {
        // InitializeConditions for MATLABSystem: '<S134>/MPC manager'
        proc_contr_mpcManager_resetImpl(&proc_control_DW.obj_f);
        proc_control_DW.MPCmanager_MODE = true;
      }

      // Outputs for Atomic SubSystem: '<S134>/Subscribe1'
      // MATLABSystem: '<S234>/SourceBlock'
      rtb_Merge = Sub_proc_control_182_1643.getLatestMessage
        (&proc_control_B.b_varargout_2_e);

      // Outputs for Enabled SubSystem: '<S234>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S236>/Enable'

      if (rtb_Merge) {
        // SignalConversion generated from: '<S236>/In1'
        proc_control_B.In1_o = proc_control_B.b_varargout_2_e;
      }

      // End of Outputs for SubSystem: '<S234>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S134>/Subscribe1'

      // Outputs for Atomic SubSystem: '<S134>/Subscribe'
      // MATLABSystem: '<S233>/SourceBlock'
      rtb_NewDvlMsg = Sub_proc_control_182_1620.getLatestMessage
        (&proc_control_B.b_varargout_2_b);

      // Outputs for Enabled SubSystem: '<S233>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S235>/Enable'

      if (rtb_NewDvlMsg) {
        // SignalConversion generated from: '<S235>/In1'
        proc_control_B.In1_f = proc_control_B.b_varargout_2_b;
      }

      // End of Outputs for SubSystem: '<S233>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S134>/Subscribe'

      // MATLABSystem: '<S134>/MPC manager' incorporates:
      //   Delay: '<S7>/Delay'
      //   MATLABSystem: '<S233>/SourceBlock'
      //   MATLABSystem: '<S234>/SourceBlock'
      //   Math: '<S134>/Transpose'

      //         %% Fonction D'initialisation
      //  Conditions initial
      if (proc_control_DW.obj_f.init == 0.0) {
        proc_control_DW.obj_f.init = 1.0;
      }

      // Outputs for Atomic SubSystem: '<S134>/Subscribe1'
      //  Init function
      //       %% Fonction qui traite les gains recu via ros.
      if (rtb_Merge) {
        if (proc_control_B.In1_o.OV_SL_Info.CurrentLength == 13U) {
          //  regarder la vaiditée des ov
          std::memcpy(&proc_control_DW.obj_f.rosOV[0], &proc_control_B.In1_o.OV
                      [0], 13U * sizeof(real_T));
        }

        if (proc_control_B.In1_o.MV_SL_Info.CurrentLength == 8U) {
          //  regarder la vaiditée des mv
          std::memcpy(&proc_control_DW.obj_f.rosMV[0], &proc_control_B.In1_o.MV
                      [0], sizeof(real_T) << 3U);
        }

        if (proc_control_B.In1_o.MVR_SL_Info.CurrentLength == 8U) {
          //  regarder la vaiditée des mvr
          std::memcpy(&proc_control_DW.obj_f.rosMVR[0],
                      &proc_control_B.In1_o.MVR[0], sizeof(real_T) << 3U);
        }
      }

      // End of Outputs for SubSystem: '<S134>/Subscribe1'
      //  traiter les gains recu via ros.
      proc_co_mpcManager_getMpcWeigth(&proc_control_DW.obj_f,
        proc_control_B.DataTypeConversion_j,
        proc_control_B.TmpSignalConversionAtTransp, proc_control_B.u_scale,
        proc_control_B.U_a);

      //  Avoir les gains selon le mode
      std::memcpy(&proc_control_B.readCurrent[0], &proc_control_B.In1_f.Data[0],
                  sizeof(real_T) << 7U);

      // Outputs for Atomic SubSystem: '<S134>/Subscribe'
      //         %% Fonction qui vérifie l'états des moteurs.
      if (rtb_NewDvlMsg) {
        proc_control_B.readCurrent[7] = 0.0;

        //  regarder si le courant est en dessou du seuil
        //  Rénitialiser le compteur si thruster est bon
        //  Aditionner les échantillion défectueux
        //  Condition qui vérifie si les thruster sont defectueux
        //  rajouter des moteur défecteux
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8;
             proc_control_B.jp1j++) {
          rtb_Merge = (proc_control_B.readCurrent[proc_control_B.jp1j] <
                       static_cast<uint16_T>(static_cast<int32_T>(std::round(
            static_cast<real_T>
            (proc_control_DW.Delay_DSTATE_g[proc_control_B.jp1j]) * 0.1))));
          proc_control_DW.obj_f.currentFaultCount[proc_control_B.jp1j] *=
            static_cast<real_T>(rtb_Merge);
          proc_control_DW.obj_f.currentFaultCount[proc_control_B.jp1j] +=
            static_cast<real_T>(rtb_Merge);
          proc_control_DW.obj_f.isThrusterFault[proc_control_B.jp1j] =
            ((proc_control_DW.obj_f.currentFaultCount[proc_control_B.jp1j] >=
              20.0) + proc_control_DW.obj_f.isThrusterFault[proc_control_B.jp1j]
             != 0);
        }
      }

      // End of Outputs for SubSystem: '<S134>/Subscribe'
      //  Vérifier l'etats des thrusters
      //         %% Fonction qui applique la saturation des moteurs
      //  Enlever les thrusters defectueux
      //       %% Fonction qui prend la decision de kill le sub
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        proc_control_B.C_tmp =
          !proc_control_DW.obj_f.isThrusterFault[proc_control_B.jp1j];

        // MATLABSystem: '<S134>/MPC manager'
        proc_control_B.mvmin[proc_control_B.jp1j] = -15.0 * static_cast<real_T>
          (proc_control_B.C_tmp);

        // MATLABSystem: '<S134>/MPC manager'
        proc_control_B.mvmax[proc_control_B.jp1j] = 15.0 * static_cast<real_T>
          (proc_control_B.C_tmp);
      }

      // MATLABSystem: '<S134>/MPC manager'
      std::memcpy(&proc_control_B.ywt[0],
                  &proc_control_B.TmpSignalConversionAtTransp[0], 13U * sizeof
                  (real_T));
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        // MATLABSystem: '<S134>/MPC manager'
        proc_control_B.mvwt[proc_control_B.jp1j] =
          proc_control_B.u_scale[proc_control_B.jp1j];

        // MATLABSystem: '<S134>/MPC manager'
        proc_control_B.dmwwt[proc_control_B.jp1j] =
          proc_control_B.U_a[proc_control_B.jp1j];

        // MATLABSystem: '<S134>/MPC manager'
        proc_control_B.thrustersStatus[proc_control_B.jp1j] =
          !proc_control_DW.obj_f.isThrusterFault[proc_control_B.jp1j];
      }
    } else {
      proc_control_DW.MPCmanager_MODE = false;
    }

    // End of Outputs for SubSystem: '<S7>/MPC manager'

    // SwitchCase: '<S133>/Switch Case' incorporates:
    //   Gain: '<S144>/u_scale'
    //   MATLAB Function: '<S172>/FixedHorizonOptimizer'
    //   MATLAB Function: '<S206>/FixedHorizonOptimizer'
    //   Memory: '<S144>/Memory'
    //   Memory: '<S178>/Memory'

    rtPrevAction = proc_control_DW.SwitchCase_ActiveSubsystem_l;
    switch (proc_control_B.DataTypeConversion_j) {
     case 10:
     case 11:
     case 19:
     case 31:
      rtAction = 0;
      break;

     case 20:
     case 21:
      rtAction = 1;
      break;

     case 30:
      rtAction = 2;
      break;

     case 40:
      rtAction = 3;
      break;

     default:
      rtAction = 4;
      break;
    }

    proc_control_DW.SwitchCase_ActiveSubsystem_l = rtAction;
    switch (rtAction) {
     case 0:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S133>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S136>/Action Port'

        // InitializeConditions for SwitchCase: '<S133>/Switch Case' incorporates:
        //   Delay: '<S136>/Delay1'
        //   DiscretePulseGenerator: '<S136>/Pulse Generator'
        //   Memory: '<S144>/Memory'
        //   UnitDelay: '<S144>/last_mv'

        std::memcpy(&proc_control_DW.Memory_PreviousInput_g[0],
                    &proc_control_P.Memory_InitialCondition[0], 252U * sizeof
                    (boolean_T));
        std::memcpy(&proc_control_DW.last_mv_DSTATE_f[0],
                    &proc_control_P.last_mv_InitialCondition[0], sizeof(real_T) <<
                    3U);
        std::memcpy(&proc_control_DW.Delay1_DSTATE_e[0],
                    &proc_control_P.Delay1_InitialCondition[0], sizeof(real_T) <<
                    3U);
        proc_control_DW.clockTickCounter_j = 0;

        // End of InitializeConditions for SubSystem: '<S133>/Adaptive MPC quaternion ' 

        // SystemReset for IfAction SubSystem: '<S133>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S136>/Action Port'

        // SystemReset for SwitchCase: '<S133>/Switch Case' incorporates:
        //   MATLABSystem: '<S136>/MATLAB System'

        //  Initialize / reset discrete-state properties
        proc_control_DW.obj_b.lastQuat[0] = 1.0;
        proc_control_DW.obj_b.lastQuat[1] = 0.0;
        proc_control_DW.obj_b.lastQuat[2] = 0.0;
        proc_control_DW.obj_b.lastQuat[3] = 0.0;
        std::memcpy(&proc_control_DW.obj_b.xl[0], &tmp_1[0], 13U * sizeof(real_T));

        // End of SystemReset for SubSystem: '<S133>/Adaptive MPC quaternion '
      }

      // Outputs for IfAction SubSystem: '<S133>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S136>/Action Port'

      // SignalConversion generated from: '<S136>/MATLAB System'
      proc_control_B.TmpSignalConversionAtMAT_lt[0] =
        proc_control_B.WorldPosition[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[1] =
        proc_control_B.WorldPosition[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[2] =
        proc_control_B.WorldPosition[2];
      proc_control_B.TmpSignalConversionAtMAT_lt[3] = proc_control_B.qS2W[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[4] = proc_control_B.qS2W[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[5] = proc_control_B.qS2W[2];
      proc_control_B.TmpSignalConversionAtMAT_lt[6] = proc_control_B.qS2W[3];
      proc_control_B.TmpSignalConversionAtMAT_lt[7] =
        proc_control_B.BodyVelocity[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[10] =
        proc_control_B.AngularRate[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[8] =
        proc_control_B.BodyVelocity[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[11] =
        proc_control_B.AngularRate[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[9] =
        proc_control_B.BodyVelocity[2];
      proc_control_B.TmpSignalConversionAtMAT_lt[12] =
        proc_control_B.AngularRate[2];

      // MATLABSystem: '<S136>/MATLAB System' incorporates:
      //   Delay: '<S136>/Delay1'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S239>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   SignalConversion generated from: '<S136>/MATLAB System'

      //  Regarder la discontinuité entre le qk et qk-1
      if (((proc_control_DW.obj_b.lastQuat[0] * proc_control_B.qS2W[0] +
            proc_control_DW.obj_b.lastQuat[1] * proc_control_B.qS2W[1]) +
           proc_control_DW.obj_b.lastQuat[2] * proc_control_B.qS2W[2]) +
          proc_control_DW.obj_b.lastQuat[3] * proc_control_B.qS2W[3] < 0.0) {
        proc_control_B.TmpSignalConversionAtMAT_lt[3] = -proc_control_B.qS2W[0];
        proc_control_B.TmpSignalConversionAtMAT_lt[4] = -proc_control_B.qS2W[1];
        proc_control_B.TmpSignalConversionAtMAT_lt[5] = -proc_control_B.qS2W[2];
        proc_control_B.TmpSignalConversionAtMAT_lt[6] = -proc_control_B.qS2W[3];
      }

      proc_control_DW.obj_b.lastQuat[0] =
        proc_control_B.TmpSignalConversionAtMAT_lt[3];
      proc_control_DW.obj_b.lastQuat[1] =
        proc_control_B.TmpSignalConversionAtMAT_lt[4];
      proc_control_DW.obj_b.lastQuat[2] =
        proc_control_B.TmpSignalConversionAtMAT_lt[5];
      proc_control_DW.obj_b.lastQuat[3] =
        proc_control_B.TmpSignalConversionAtMAT_lt[6];
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        proc_control_B.z_cx[proc_control_B.jp1j] =
          proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.jp1j] -
          proc_control_DW.obj_b.xl[proc_control_B.jp1j];
      }

      //  Linéariser le systeme.
      //  Lineariser le système
      proc_con_AUV7QuatJacobianMatrix(proc_control_B.TmpSignalConversionAtMAT_lt,
        proc_control_B.A_f);

      //  Discrétiser le système.
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 169;
           proc_control_B.jp1j++) {
        proc_control_B.A_c[proc_control_B.jp1j] =
          proc_control_B.A_f[proc_control_B.jp1j] * 0.1;
      }

      proc_control_expm(proc_control_B.A_c, proc_control_B.b_A_g);

      //  Fossen Eq B.10/B.9 page 662
      std::memset(&proc_control_B.b_newCoefs_j[0], 0, 36U * sizeof(real_T));
      proc_control_B.C_tmp = 0;
      proc_control_B.jj = 0;
      proc_control_B.jA = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
           proc_control_B.ibmat++) {
        proc_control_B.b_newCoefs_j[proc_control_B.C_tmp] = 1.0;
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6;
             proc_control_B.jp1j++) {
          proc_control_B.dCoefs[proc_control_B.jp1j + proc_control_B.jj] =
            proc_control_B.A_f[(proc_control_B.jp1j + proc_control_B.jA) + 98];
        }

        proc_control_B.b_ipiv_f[proc_control_B.ibmat] = static_cast<int8_T>
          (proc_control_B.ibmat + 1);
        proc_control_B.C_tmp += 7;
        proc_control_B.jj += 6;
        proc_control_B.jA += 13;
      }

      for (proc_control_B.i = 0; proc_control_B.i < 5; proc_control_B.i++) {
        proc_control_B.Ns_f = proc_control_B.i * 7 + 2;
        proc_control_B.jj = proc_control_B.i * 7;
        proc_control_B.C_tmp = 6 - proc_control_B.i;
        proc_control_B.ibmat = 1;
        proc_control_B.d = std::abs(proc_control_B.dCoefs[proc_control_B.jj]);
        for (proc_control_B.jA = 2; proc_control_B.jA <= proc_control_B.C_tmp;
             proc_control_B.jA++) {
          proc_control_B.scale = std::abs(proc_control_B.dCoefs
            [(proc_control_B.Ns_f + proc_control_B.jA) - 3]);
          if (proc_control_B.scale > proc_control_B.d) {
            proc_control_B.ibmat = proc_control_B.jA;
            proc_control_B.d = proc_control_B.scale;
          }
        }

        if (proc_control_B.dCoefs[(proc_control_B.Ns_f + proc_control_B.ibmat) -
            3] != 0.0) {
          if (proc_control_B.ibmat - 1 != 0) {
            proc_control_B.jp1j = proc_control_B.i + proc_control_B.ibmat;
            proc_control_B.b_ipiv_f[proc_control_B.i] = static_cast<int8_T>
              (proc_control_B.jp1j);
            for (proc_control_B.jA = 0; proc_control_B.jA < 6; proc_control_B.jA
                 ++) {
              proc_control_B.ibmat = proc_control_B.jA * 6 + proc_control_B.i;
              proc_control_B.MATLABSystem_o6 =
                proc_control_B.dCoefs[proc_control_B.ibmat];
              proc_control_B.C_tmp = (proc_control_B.jA * 6 +
                proc_control_B.jp1j) - 1;
              proc_control_B.dCoefs[proc_control_B.ibmat] =
                proc_control_B.dCoefs[proc_control_B.C_tmp];
              proc_control_B.dCoefs[proc_control_B.C_tmp] =
                proc_control_B.MATLABSystem_o6;
            }
          }

          proc_control_B.ibmat = proc_control_B.Ns_f - proc_control_B.i;
          for (proc_control_B.C_tmp = proc_control_B.Ns_f; proc_control_B.C_tmp <=
               proc_control_B.ibmat + 4; proc_control_B.C_tmp++) {
            proc_control_B.dCoefs[proc_control_B.C_tmp - 1] /=
              proc_control_B.dCoefs[proc_control_B.jj];
          }
        }

        proc_control_B.C_tmp = 4 - proc_control_B.i;
        proc_control_B.jA = proc_control_B.jj;
        proc_control_B.jj += 6;
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j <=
             proc_control_B.C_tmp; proc_control_B.jp1j++) {
          proc_control_B.t65 = proc_control_B.dCoefs[proc_control_B.jp1j * 6 +
            proc_control_B.jj];
          if (proc_control_B.t65 != 0.0) {
            proc_control_B.ibmat = proc_control_B.jA + 8;
            proc_control_B.c_l = proc_control_B.jA - proc_control_B.i;
            for (proc_control_B.Ns = proc_control_B.ibmat; proc_control_B.Ns <=
                 proc_control_B.c_l + 12; proc_control_B.Ns++) {
              proc_control_B.dCoefs[proc_control_B.Ns - 1] +=
                proc_control_B.dCoefs[((proc_control_B.Ns_f + proc_control_B.Ns)
                - proc_control_B.jA) - 9] * -proc_control_B.t65;
            }
          }

          proc_control_B.jA += 6;
        }
      }

      proc_control_B.jp1j = 0;
      proc_control_B.jj = 0;
      for (proc_control_B.jA = 0; proc_control_B.jA < 6; proc_control_B.jA++) {
        for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
          proc_control_B.c_l = proc_control_B.i + proc_control_B.jp1j;
          proc_control_B.b_newCoefs_j[proc_control_B.c_l] =
            proc_control_B.b_A_g[(proc_control_B.i + proc_control_B.jj) + 98] -
            proc_control_B.b_newCoefs_j[proc_control_B.c_l];
        }

        proc_control_B.jp1j += 6;
        proc_control_B.jj += 13;
      }

      for (proc_control_B.jj = 0; proc_control_B.jj < 5; proc_control_B.jj++) {
        rtPrevAction = proc_control_B.b_ipiv_f[proc_control_B.jj];
        if (proc_control_B.jj + 1 != rtPrevAction) {
          for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
            proc_control_B.MATLABSystem_o6 = proc_control_B.b_newCoefs_j[6 *
              proc_control_B.i + proc_control_B.jj];
            proc_control_B.c_l = (6 * proc_control_B.i + rtPrevAction) - 1;
            proc_control_B.b_newCoefs_j[proc_control_B.jj + 6 * proc_control_B.i]
              = proc_control_B.b_newCoefs_j[proc_control_B.c_l];
            proc_control_B.b_newCoefs_j[proc_control_B.c_l] =
              proc_control_B.MATLABSystem_o6;
          }
        }
      }

      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        proc_control_B.Ns_f = 6 * proc_control_B.i - 1;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 6;
             proc_control_B.ibmat++) {
          proc_control_B.Ns = 6 * proc_control_B.ibmat - 1;
          if (proc_control_B.b_newCoefs_j[(proc_control_B.ibmat +
               proc_control_B.Ns_f) + 1] != 0.0) {
            for (proc_control_B.C_tmp = proc_control_B.ibmat + 2;
                 proc_control_B.C_tmp < 7; proc_control_B.C_tmp++) {
              proc_control_B.c_l = proc_control_B.C_tmp + proc_control_B.Ns_f;
              proc_control_B.b_newCoefs_j[proc_control_B.c_l] -=
                proc_control_B.b_newCoefs_j[(proc_control_B.ibmat +
                proc_control_B.Ns_f) + 1] *
                proc_control_B.dCoefs[proc_control_B.C_tmp + proc_control_B.Ns];
            }
          }
        }
      }

      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        proc_control_B.Ns_f = 6 * proc_control_B.i;
        for (proc_control_B.jA = 5; proc_control_B.jA >= 0; proc_control_B.jA--)
        {
          proc_control_B.Ns = 6 * proc_control_B.jA;
          proc_control_B.jp1j = proc_control_B.jA + proc_control_B.Ns_f;
          proc_control_B.rtb_u2_n =
            proc_control_B.b_newCoefs_j[proc_control_B.jp1j];
          if (proc_control_B.rtb_u2_n != 0.0) {
            proc_control_B.b_newCoefs_j[proc_control_B.jp1j] =
              proc_control_B.rtb_u2_n / proc_control_B.dCoefs[proc_control_B.jA
              + proc_control_B.Ns];
            proc_control_B.ibmat = proc_control_B.jA - 1;
            for (proc_control_B.jj = 0; proc_control_B.jj <=
                 proc_control_B.ibmat; proc_control_B.jj++) {
              proc_control_B.c_l = proc_control_B.jj + proc_control_B.Ns_f;
              proc_control_B.b_newCoefs_j[proc_control_B.c_l] -=
                proc_control_B.b_newCoefs_j[proc_control_B.jA +
                proc_control_B.Ns_f] * proc_control_B.dCoefs[proc_control_B.jj +
                proc_control_B.Ns];
            }
          }
        }
      }

      //  Fossen Eq B.11 p 662
      //  Calculer F(x(k),u(k))
      //  Intégration trapezoidale
      for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
        proc_control_B.TmpSignalConversionAtTransp[proc_control_B.i] =
          proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.i];
        proc_control_B.imz[proc_control_B.i] = 0.0;
      }

      for (proc_control_B.C_tmp = 0; proc_control_B.C_tmp < 10;
           proc_control_B.C_tmp++) {
        proc_control_AUV7QuatSimFcn(proc_control_B.TmpSignalConversionAtTransp,
          proc_control_DW.Delay1_DSTATE_e, proc_control_B.x_dot_k);
        for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
          proc_control_B.t65 = proc_control_B.x_dot_k[proc_control_B.i];
          proc_control_B.TmpSignalConversionAtTransp[proc_control_B.i] +=
            (proc_control_B.t65 + proc_control_B.imz[proc_control_B.i]) * 0.01 /
            2.0;
          proc_control_B.imz[proc_control_B.i] = proc_control_B.t65;
        }

        //  correct Quaternion
        proc_control_B.scale = 3.3121686421112381E-170;
        proc_control_B.absxk = std::abs
          (proc_control_B.TmpSignalConversionAtTransp[3]);
        if (proc_control_B.absxk > 3.3121686421112381E-170) {
          proc_control_B.d = 1.0;
          proc_control_B.scale = proc_control_B.absxk;
        } else {
          proc_control_B.t = proc_control_B.absxk / 3.3121686421112381E-170;
          proc_control_B.d = proc_control_B.t * proc_control_B.t;
        }

        proc_control_B.absxk = std::abs
          (proc_control_B.TmpSignalConversionAtTransp[4]);
        if (proc_control_B.absxk > proc_control_B.scale) {
          proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
          proc_control_B.d = proc_control_B.d * proc_control_B.t *
            proc_control_B.t + 1.0;
          proc_control_B.scale = proc_control_B.absxk;
        } else {
          proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
          proc_control_B.d += proc_control_B.t * proc_control_B.t;
        }

        proc_control_B.absxk = std::abs
          (proc_control_B.TmpSignalConversionAtTransp[5]);
        if (proc_control_B.absxk > proc_control_B.scale) {
          proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
          proc_control_B.d = proc_control_B.d * proc_control_B.t *
            proc_control_B.t + 1.0;
          proc_control_B.scale = proc_control_B.absxk;
        } else {
          proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
          proc_control_B.d += proc_control_B.t * proc_control_B.t;
        }

        proc_control_B.absxk = std::abs
          (proc_control_B.TmpSignalConversionAtTransp[6]);
        if (proc_control_B.absxk > proc_control_B.scale) {
          proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
          proc_control_B.d = proc_control_B.d * proc_control_B.t *
            proc_control_B.t + 1.0;
          proc_control_B.scale = proc_control_B.absxk;
        } else {
          proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
          proc_control_B.d += proc_control_B.t * proc_control_B.t;
        }

        proc_control_B.d = proc_control_B.scale * std::sqrt(proc_control_B.d);
        proc_control_B.TmpSignalConversionAtTransp[3] /= proc_control_B.d;
        proc_control_B.TmpSignalConversionAtTransp[4] /= proc_control_B.d;
        proc_control_B.TmpSignalConversionAtTransp[5] /= proc_control_B.d;
        proc_control_B.TmpSignalConversionAtTransp[6] /= proc_control_B.d;
      }

      //  Nominal conditions for discrete-time plant
      // (Cc*x + Dc*u).';
      //  save prediction for next step
      std::memcpy(&proc_control_DW.obj_b.xl[0],
                  &proc_control_B.TmpSignalConversionAtTransp[0], 13U * sizeof
                  (real_T));

      // MATLAB Function: '<S172>/FixedHorizonOptimizer' incorporates:
      //   MATLABSystem: '<S136>/MATLAB System'

      std::memset(&proc_control_B.Bu[0], 0, 2200U * sizeof(real_T));
      std::memset(&proc_control_B.Bv[0], 0, 275U * sizeof(real_T));
      std::memset(&proc_control_B.Dv[0], 0, 143U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_A_l[0], &b_0[0], 625U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_B[0], &c[0], 700U * sizeof(real_T));
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 325;
           proc_control_B.jp1j++) {
        proc_control_B.b_C_j[proc_control_B.jp1j] = d_0[proc_control_B.jp1j];
      }

      proc_control_B.jp1j = 0;
      proc_control_B.jj = 0;
      for (proc_control_B.jA = 0; proc_control_B.jA < 13; proc_control_B.jA++) {
        for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
          proc_control_B.C_tmp = proc_control_B.i + proc_control_B.jp1j;
          proc_control_B.b_C_j[proc_control_B.C_tmp] = c_0[proc_control_B.C_tmp];
          proc_control_B.b_A_l[proc_control_B.i + proc_control_B.jj] =
            proc_control_B.b_A_g[proc_control_B.C_tmp];
        }

        proc_control_B.jp1j += 13;
        proc_control_B.jj += 25;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        // MATLABSystem: '<S136>/MATLAB System'
        for (proc_control_B.jj = 0; proc_control_B.jj < 6; proc_control_B.jj++)
        {
          proc_control_B.b_newCoefs[proc_control_B.jj + 6 * proc_control_B.jp1j]
            = 0.0;
        }

        for (proc_control_B.jA = 0; proc_control_B.jA < 6; proc_control_B.jA++)
        {
          for (proc_control_B.jj = 0; proc_control_B.jj < 6; proc_control_B.jj++)
          {
            proc_control_B.c_l = 6 * proc_control_B.jp1j + proc_control_B.jj;
            proc_control_B.b_newCoefs[proc_control_B.c_l] +=
              proc_control_B.b_newCoefs_j[6 * proc_control_B.jA +
              proc_control_B.jj] * tmp_2[6 * proc_control_B.jp1j +
              proc_control_B.jA];
          }
        }

        // MATLAB Function: '<S172>/FixedHorizonOptimizer' incorporates:
        //   MATLABSystem: '<S136>/MATLAB System'

        for (proc_control_B.jj = 0; proc_control_B.jj < 7; proc_control_B.jj++)
        {
          // MATLABSystem: '<S136>/MATLAB System'
          proc_control_B.b_B[proc_control_B.jj + 25 * proc_control_B.jp1j] = 0.0;
        }

        for (proc_control_B.jj = 0; proc_control_B.jj < 6; proc_control_B.jj++)
        {
          proc_control_B.b_B[(proc_control_B.jj + 25 * proc_control_B.jp1j) + 7]
            = proc_control_B.b_newCoefs[6 * proc_control_B.jp1j +
            proc_control_B.jj];
        }

        std::memcpy(&proc_control_B.Bu[proc_control_B.jp1j * 25],
                    &proc_control_B.b_B[proc_control_B.jp1j * 25], 25U * sizeof
                    (real_T));
      }

      // MATLAB Function: '<S172>/FixedHorizonOptimizer' incorporates:
      //   Delay: '<S136>/Delay1'
      //   DiscretePulseGenerator: '<S140>/Pulse Generator'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S239>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   MATLABSystem: '<S136>/MATLAB System'
      //   MATLABSystem: '<S302>/MATLAB System1'
      //   Merge generated from: '<S9>/Merge'
      //   SignalConversion generated from: '<S173>/ SFunction '
      //   SwitchCase: '<S9>/Switch Case'

      std::memcpy(&proc_control_B.Bv[0], &proc_control_B.b_B[200], 25U * sizeof
                  (real_T));
      std::memset(&proc_control_B.Dv[0], 0, 13U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_Mlim[0], &e[0], 252U * sizeof(real_T));
      std::memset(&proc_control_B.b_utarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_xoff[0], &f_0[0], 25U * sizeof(real_T));
      std::memcpy(&proc_control_B.U_a[0], &proc_control_DW.Delay1_DSTATE_e[0],
                  sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.imz[0],
                  &proc_control_B.TmpSignalConversionAtMAT_lt[0], 13U * sizeof
                  (real_T));
      std::memcpy(&proc_control_B.u_scale[0], &proc_control_DW.Delay1_DSTATE_e[0],
                  sizeof(real_T) << 3U);
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 252;
           proc_control_B.ibmat++) {
        proc_control_B.t65 = proc_control_B.b_Mlim[proc_control_B.ibmat];
        proc_control_B.jp1j = b_Mrows[proc_control_B.ibmat];
        if (proc_control_B.jp1j <= 130) {
          proc_control_B.Ns_f = (proc_control_B.jp1j - div_nde_s32_floor
            (proc_control_B.jp1j - 1, proc_control_ny) * proc_control_ny) - 1;
          proc_control_B.t65 += old_yoff[proc_control_B.Ns_f] -
            proc_control_B.imz[proc_control_B.Ns_f];
        } else if (proc_control_B.jp1j <= 260) {
          proc_control_B.Ns_f = (proc_control_B.jp1j - div_nde_s32_floor
            (proc_control_B.jp1j - 131, proc_control_ny) * proc_control_ny) -
            131;
          proc_control_B.t65 -= old_yoff[proc_control_B.Ns_f] -
            proc_control_B.imz[proc_control_B.Ns_f];
        } else if (proc_control_B.jp1j <= 340) {
          proc_control_B.t65 += 0.0 - proc_control_B.U_a[(proc_control_B.jp1j -
            (((proc_control_B.jp1j - 261) >> 3) << 3)) - 261];
        } else {
          proc_control_B.t65 -= 0.0 - proc_control_B.U_a[(proc_control_B.jp1j -
            (((proc_control_B.jp1j - 341) >> 3) << 3)) - 341];
        }

        proc_control_B.b_Mlim[proc_control_B.ibmat] = proc_control_B.t65;
      }

      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        proc_control_B.t65 = proc_control_B.U_a[proc_control_B.ibmat];
        proc_control_B.jp1j = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 10; proc_control_B.jj++)
        {
          proc_control_B.C_tmp = proc_control_B.jp1j + proc_control_B.ibmat;
          proc_control_B.b_utarget[proc_control_B.C_tmp] -= proc_control_B.t65;
          proc_control_B.jp1j += 8;
        }
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        proc_control_B.t65 =
          proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.jp1j];
        proc_control_B.b_xoff[proc_control_B.jp1j] = proc_control_B.t65;
        proc_control_B.Bv[proc_control_B.jp1j] =
          proc_control_B.TmpSignalConversionAtTransp[proc_control_B.jp1j] -
          proc_control_B.t65;
      }

      for (proc_control_B.C_tmp = 0; proc_control_B.C_tmp < 11;
           proc_control_B.C_tmp++) {
        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S302>/Action Port'

        proc_control_B.vseq[proc_control_B.C_tmp] = 1.0;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      }

      std::memset(&proc_control_B.y_j[0], 0, 130U * sizeof(real_T));
      proc_control_B.C_tmp = 0;
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
           proc_control_B.ibmat++) {
        proc_control_B.jA = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 10; proc_control_B.jj++)
        {
          proc_control_B.y_j[proc_control_B.jA + proc_control_B.ibmat] =
            proc_control_B.Reference[proc_control_B.jj + proc_control_B.C_tmp] -
            proc_control_B.imz[proc_control_B.ibmat];
          proc_control_B.jA += 13;
        }

        proc_control_B.rtb_TmpSignalConversionAtMAT__n[proc_control_B.ibmat] =
          proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.ibmat] -
          proc_control_B.b_xoff[proc_control_B.ibmat];
        proc_control_B.C_tmp += 10;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6; proc_control_B.jp1j
           ++) {
        // SignalConversion generated from: '<S173>/ SFunction ' incorporates:
        //   Constant: '<S136>/Constant'
        //   Gain: '<S136>/Gain'
        //   MATLAB Function: '<S172>/FixedHorizonOptimizer'
        //   MATLABSystem: '<S136>/MATLAB System'

        proc_control_B.rtb_TmpSignalConversionAtMAT__n[proc_control_B.jp1j + 13]
          = proc_control_P.Constant_Value_e3[proc_control_B.jp1j] -
          proc_control_B.b_xoff[proc_control_B.jp1j + 13];
        proc_control_B.rtb_TmpSignalConversionAtMAT__n[proc_control_B.jp1j + 19]
          = proc_control_B.z_cx[proc_control_B.jp1j + 7] *
          proc_control_P.Gain_Gain_p - proc_control_B.b_xoff[proc_control_B.jp1j
          + 19];
      }

      // MATLAB Function: '<S172>/FixedHorizonOptimizer' incorporates:
      //   UnitDelay: '<S144>/last_mv'

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        proc_control_B.dv17[proc_control_B.jp1j] =
          proc_control_DW.last_mv_DSTATE_f[proc_control_B.jp1j] -
          proc_control_B.u_scale[proc_control_B.jp1j];
      }

      std::memset(&proc_control_B.dv1[0], 0, 2772U * sizeof(real_T));
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        proc_control_B.dv18[proc_control_B.jp1j] = 1.0;
      }

      std::memcpy(&proc_control_B.g[0], &g[0], 6300U * sizeof(real_T));
      std::memcpy(&proc_control_B.h[0], &h[0], 2016U * sizeof(real_T));
      std::memcpy(&proc_control_B.k[0], &k[0], 289U * sizeof(real_T));
      std::memcpy(&proc_control_B.l[0], &l[0], 4284U * sizeof(real_T));
      std::memcpy(&proc_control_B.bv[0],
                  &proc_control_DW.Memory_PreviousInput_g[0], 252U * sizeof
                  (boolean_T));

      // Merge: '<S133>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S136>/Pulse Generator'
      //   MATLAB Function: '<S172>/FixedHorizonOptimizer'
      //   MATLABSystem: '<S134>/MPC manager'
      //   Math: '<S144>/Math Function'
      //   Math: '<S144>/Math Function1'
      //   Math: '<S144>/Math Function2'
      //   Memory: '<S144>/Memory'
      //
      proc_control_mpcblock_optimizer(proc_control_B.y_j, proc_control_B.vseq,
        proc_control_B.mvmin, proc_control_B.mvmax,
        proc_control_B.rtb_TmpSignalConversionAtMAT__n, proc_control_B.dv17,
        proc_control_B.bv, proc_control_B.b_Mlim, proc_control_B.g,
        proc_control_B.h, proc_control_B.dv1, proc_control_B.b_utarget,
        proc_control_B.u_scale, proc_control_B.k, proc_control_B.l,
        proc_control_B.ywt, proc_control_B.mvwt, proc_control_B.dmwwt, n, o,
        proc_control_B.b_A_l, proc_control_B.Bu, proc_control_B.Bv,
        proc_control_B.b_C_j, proc_control_B.Dv, b_Mrows, proc_control_B.dv18,
        proc_control_B.U_a, proc_control_B.useq_a, &proc_control_B.Merge[8],
        proc_control_DW.Memory_PreviousInput_g);
      proc_control_B.Merge[9] = (proc_control_DW.clockTickCounter_j <
        proc_control_P.PulseGenerator_Duty) &&
        (proc_control_DW.clockTickCounter_j >= 0) ?
        proc_control_P.PulseGenerator_Amp : 0.0;

      // DiscretePulseGenerator: '<S136>/Pulse Generator'
      if (proc_control_DW.clockTickCounter_j >=
          proc_control_P.PulseGenerator_Period - 1.0) {
        proc_control_DW.clockTickCounter_j = 0;
      } else {
        proc_control_DW.clockTickCounter_j++;
      }

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.t65 = proc_control_B.U_a[proc_control_B.i];

        // Gain: '<S144>/u_scale'
        proc_control_B.d = proc_control_P.u_scale_Gain[proc_control_B.i] *
          proc_control_B.t65;

        // Merge: '<S133>/Merge' incorporates:
        //   Gain: '<S144>/u_scale'
        //   SignalConversion generated from: '<S136>/out'

        proc_control_B.Merge[proc_control_B.i] = proc_control_B.d;

        // Update for UnitDelay: '<S144>/last_mv' incorporates:
        //   Gain: '<S144>/u_scale'

        proc_control_DW.last_mv_DSTATE_f[proc_control_B.i] = proc_control_B.t65;

        // Update for Delay: '<S136>/Delay1' incorporates:
        //   Gain: '<S144>/u_scale'

        proc_control_DW.Delay1_DSTATE_e[proc_control_B.i] = proc_control_B.d;
      }

      // End of Outputs for SubSystem: '<S133>/Adaptive MPC quaternion '
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S133>/JoyStick OpenLoop' incorporates:
      //   ActionPort: '<S139>/Action Port'

      // SampleTimeMath: '<S174>/TSamp' incorporates:
      //   Merge generated from: '<S9>/Merge'
      //   Selector: '<S139>/Selector'
      //
      //  About '<S174>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )

      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 6; proc_control_B.jj++) {
        proc_control_B.TSamp_j[proc_control_B.jj] =
          proc_control_B.Reference[proc_control_B.jp1j + 70] *
          proc_control_P.TSamp_WtEt;
        proc_control_B.jp1j += 10;
      }

      // End of SampleTimeMath: '<S174>/TSamp'

      // MATLABSystem: '<S139>/MATLAB System' incorporates:
      //   Merge generated from: '<S9>/Merge'
      //   Selector: '<S139>/Selector'

      if (proc_control_DW.obj_m.k != proc_control_P.MATLABSystem_k) {
        proc_control_DW.obj_m.k = proc_control_P.MATLABSystem_k;
      }

      rtb_Reset = false;
      rtb_NewDvlMsg = true;
      proc_control_B.ibmat = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.ibmat < 48)) {
        if (!(proc_control_DW.obj_m.binv[proc_control_B.ibmat] ==
              proc_control_P.binv[proc_control_B.ibmat])) {
          rtb_NewDvlMsg = false;
          exitg1 = true;
        } else {
          proc_control_B.ibmat++;
        }
      }

      if (rtb_NewDvlMsg) {
        rtb_Reset = true;
      }

      if (!rtb_Reset) {
        std::memcpy(&proc_control_DW.obj_m.binv[0], &proc_control_P.binv[0], 48U
                    * sizeof(real_T));
      }

      if (proc_control_DW.obj_m.mass != proc_control_P.physics.mass) {
        proc_control_DW.obj_m.mass = proc_control_P.physics.mass;
      }

      if (proc_control_DW.obj_m.volume != proc_control_P.physics.volume) {
        proc_control_DW.obj_m.volume = proc_control_P.physics.volume;
      }

      if (proc_control_DW.obj_m.height != proc_control_P.physics.height) {
        proc_control_DW.obj_m.height = proc_control_P.physics.height;
      }

      rtb_Reset = false;
      rtb_NewDvlMsg = true;
      proc_control_B.ibmat = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_B.ibmat < 9)) {
        if (!(proc_control_DW.obj_m.I[proc_control_B.ibmat] ==
              proc_control_P.physics.I[proc_control_B.ibmat])) {
          rtb_NewDvlMsg = false;
          exitg1 = true;
        } else {
          proc_control_B.ibmat++;
        }
      }

      if (rtb_NewDvlMsg) {
        rtb_Reset = true;
      }

      if (!rtb_Reset) {
        std::memcpy(&proc_control_DW.obj_m.I[0], &proc_control_P.physics.I[0],
                    9U * sizeof(real_T));
      }

      if (!proc_control_isequal(proc_control_DW.obj_m.RG,
           proc_control_P.physics.RG)) {
        proc_control_DW.obj_m.RG[0] = proc_control_P.physics.RG[0];
        proc_control_DW.obj_m.RG[1] = proc_control_P.physics.RG[1];
        proc_control_DW.obj_m.RG[2] = proc_control_P.physics.RG[2];
      }

      if (!proc_control_isequal(proc_control_DW.obj_m.RB,
           proc_control_P.physics.RB)) {
        proc_control_DW.obj_m.RB[0] = proc_control_P.physics.RB[0];
        proc_control_DW.obj_m.RB[1] = proc_control_P.physics.RB[1];
        proc_control_DW.obj_m.RB[2] = proc_control_P.physics.RB[2];
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_m.AddedMass,
           proc_control_P.physics.AddedMass)) {
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6;
             proc_control_B.jp1j++) {
          proc_control_DW.obj_m.AddedMass[proc_control_B.jp1j] =
            proc_control_P.physics.AddedMass[proc_control_B.jp1j];
        }
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_m.CDL,
           proc_control_P.physics.CDL)) {
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6;
             proc_control_B.jp1j++) {
          proc_control_DW.obj_m.CDL[proc_control_B.jp1j] =
            proc_control_P.physics.CDL[proc_control_B.jp1j];
        }
      }

      if (!proc_control_isequal_p(proc_control_DW.obj_m.CDQ,
           proc_control_P.physics.CDQ)) {
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6;
             proc_control_B.jp1j++) {
          proc_control_DW.obj_m.CDQ[proc_control_B.jp1j] =
            proc_control_P.physics.CDQ[proc_control_B.jp1j];
        }
      }

      if (!proc_control_isequal(proc_control_DW.obj_m.AF,
           proc_control_P.physics.AF)) {
        proc_control_DW.obj_m.AF[0] = proc_control_P.physics.AF[0];
        proc_control_DW.obj_m.AF[1] = proc_control_P.physics.AF[1];
        proc_control_DW.obj_m.AF[2] = proc_control_P.physics.AF[2];
      }

      if (proc_control_DW.obj_m.g != proc_control_P.physics.g) {
        proc_control_DW.obj_m.g = proc_control_P.physics.g;
      }

      if (proc_control_DW.obj_m.rho != proc_control_P.physics.rho) {
        proc_control_DW.obj_m.rho = proc_control_P.physics.rho;
      }

      //  Implement algorithm. Calculate y as a function of input u and
      //  discrete states.
      switch (proc_control_B.DataTypeConversion_j) {
       case 20U:
        //  Open loop avec modèle physique
        //  Construire le vecteur constantes
        proc_control_B.constValues[0] = proc_control_DW.obj_m.mass;
        proc_control_B.constValues[1] = proc_control_DW.obj_m.volume;
        proc_control_B.constValues[6] = proc_control_DW.obj_m.I[0];
        proc_control_B.constValues[9] = proc_control_DW.obj_m.I[1];
        proc_control_B.constValues[12] = proc_control_DW.obj_m.I[2];
        proc_control_B.constValues[15] = proc_control_DW.obj_m.RG[0];
        proc_control_B.constValues[18] = proc_control_DW.obj_m.RB[0];
        proc_control_B.constValues[7] = proc_control_DW.obj_m.I[3];
        proc_control_B.constValues[10] = proc_control_DW.obj_m.I[4];
        proc_control_B.constValues[13] = proc_control_DW.obj_m.I[5];
        proc_control_B.constValues[16] = proc_control_DW.obj_m.RG[1];
        proc_control_B.constValues[19] = proc_control_DW.obj_m.RB[1];
        proc_control_B.constValues[8] = proc_control_DW.obj_m.I[6];
        proc_control_B.constValues[11] = proc_control_DW.obj_m.I[7];
        proc_control_B.constValues[14] = proc_control_DW.obj_m.I[8];
        proc_control_B.constValues[17] = proc_control_DW.obj_m.RG[2];
        proc_control_B.constValues[20] = proc_control_DW.obj_m.RB[2];
        proc_control_B.constValues[39] = proc_control_DW.obj_m.rho;
        proc_control_B.constValues[40] = proc_control_DW.obj_m.g;

        // construire le vecteur state avec la imu et spaceNAV
        proc_control_B.TmpSignalConversionAtTransp[3] = 1.0;
        proc_control_B.TmpSignalConversionAtTransp[4] = 0.0;
        proc_control_B.TmpSignalConversionAtTransp[5] = 0.0;
        proc_control_B.TmpSignalConversionAtTransp[6] = 0.0;
        proc_control_B.jp1j = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 6; proc_control_B.jj++)
        {
          proc_control_B.constValues[proc_control_B.jj + 21] =
            proc_control_DW.obj_m.CDL[proc_control_B.jj];
          proc_control_B.constValues[proc_control_B.jj + 27] =
            proc_control_DW.obj_m.CDQ[proc_control_B.jj];
          proc_control_B.constValues[proc_control_B.jj + 33] =
            proc_control_DW.obj_m.AddedMass[proc_control_B.jj];
          proc_control_B.TmpSignalConversionAtTransp[proc_control_B.jj + 7] =
            proc_control_B.Reference[proc_control_B.jp1j + 70];
          proc_control_B.jp1j += 10;
        }

        // [0;0;0;mo(4:7);ref.'];;
        //  Déterminer les matrices du modèle physique
        // AUVMODELMATRICES
        //     [M,C,D,GQ] = AUVMODELMATRICES(IN1,IN2)
        //     This function was generated by the Symbolic Math Toolbox version 8.7. 
        //     19-Nov-2021 10:15:42
        proc_control_B.od_f = proc_control_B.constValues[6] *
          proc_control_B.TmpSignalConversionAtTransp[10];
        proc_control_B.t3 = proc_control_B.constValues[9] *
          proc_control_B.TmpSignalConversionAtTransp[10];
        proc_control_B.t4 = proc_control_B.TmpSignalConversionAtTransp[10] *
          proc_control_B.constValues[12];
        proc_control_B.t5 = proc_control_B.constValues[7] *
          proc_control_B.TmpSignalConversionAtTransp[11];
        proc_control_B.t6 = proc_control_B.constValues[10] *
          proc_control_B.TmpSignalConversionAtTransp[11];
        proc_control_B.oc = proc_control_B.TmpSignalConversionAtTransp[11] *
          proc_control_B.constValues[13];
        proc_control_B.ob = proc_control_B.constValues[8] *
          proc_control_B.TmpSignalConversionAtTransp[12];
        proc_control_B.oa = proc_control_B.constValues[11] *
          proc_control_B.TmpSignalConversionAtTransp[12];
        proc_control_B.od = proc_control_B.TmpSignalConversionAtTransp[12] *
          proc_control_B.constValues[14];
        proc_control_B.n_c = proc_control_B.TmpSignalConversionAtTransp[10] *
          proc_control_B.constValues[36];
        proc_control_B.Product8 = proc_control_B.TmpSignalConversionAtTransp[11]
          * proc_control_B.constValues[37];
        proc_control_B.Divide_i = proc_control_B.constValues[0] *
          proc_control_B.constValues[15];
        proc_control_B.t = proc_control_B.constValues[0] *
          proc_control_B.constValues[16];
        proc_control_B.t15 = proc_control_B.constValues[0] *
          proc_control_B.constValues[17];
        proc_control_B.t16 = proc_control_B.TmpSignalConversionAtTransp[12] *
          proc_control_B.constValues[38];
        proc_control_B.Product2_j = proc_control_B.TmpSignalConversionAtTransp
          [10] * proc_control_B.constValues[15];
        proc_control_B.Product1_gp = proc_control_B.TmpSignalConversionAtTransp
          [11] * proc_control_B.constValues[16];
        proc_control_B.t25 = proc_control_B.TmpSignalConversionAtTransp[12] *
          proc_control_B.constValues[17];
        proc_control_B.t26 = proc_control_B.TmpSignalConversionAtTransp[7] *
          proc_control_B.constValues[33];
        proc_control_B.t27 = proc_control_B.TmpSignalConversionAtTransp[8] *
          proc_control_B.constValues[34];
        proc_control_B.MATLABSystem_o6 =
          proc_control_B.TmpSignalConversionAtTransp[9] *
          proc_control_B.constValues[35];
        proc_control_B.t29 = proc_control_B.constValues[1] *
          proc_control_B.constValues[39];
        proc_control_B.absxk = proc_control_B.TmpSignalConversionAtTransp[5] *
          proc_control_B.TmpSignalConversionAtTransp[6];
        proc_control_B.t39 = proc_control_B.TmpSignalConversionAtTransp[3] *
          proc_control_B.TmpSignalConversionAtTransp[4];
        proc_control_B.t65 = proc_control_B.absxk * 2.0 + proc_control_B.t39 *
          2.0;
        proc_control_B.d = (proc_control_B.TmpSignalConversionAtTransp[11] *
                            proc_control_B.constValues[17] +
                            proc_control_B.TmpSignalConversionAtTransp[7]) *
          proc_control_B.constValues[0];
        proc_control_B.t57 = (proc_control_B.TmpSignalConversionAtTransp[10] *
                              proc_control_B.constValues[16] +
                              proc_control_B.TmpSignalConversionAtTransp[9]) *
          proc_control_B.constValues[0];
        proc_control_B.t58 = (proc_control_B.TmpSignalConversionAtTransp[12] *
                              proc_control_B.constValues[15] +
                              proc_control_B.TmpSignalConversionAtTransp[8]) *
          proc_control_B.constValues[0];
        proc_control_B.t62 = (proc_control_B.Product2_j +
                              proc_control_B.Product1_gp) *
          proc_control_B.constValues[0];
        proc_control_B.t63 = (proc_control_B.Product2_j + proc_control_B.t25) *
          proc_control_B.constValues[0];
        proc_control_B.Product2_j = (proc_control_B.Product1_gp +
          proc_control_B.t25) * proc_control_B.constValues[0];
        proc_control_B.t40 = proc_control_B.TmpSignalConversionAtTransp[4] *
          proc_control_B.TmpSignalConversionAtTransp[6];
        proc_control_B.t41 = proc_control_B.TmpSignalConversionAtTransp[3] *
          proc_control_B.TmpSignalConversionAtTransp[5];
        proc_control_B.t69 = proc_control_B.t40 * 2.0 + -(proc_control_B.t41 *
          2.0);
        proc_control_B.Product1_gp =
          (proc_control_B.TmpSignalConversionAtTransp[4] *
           proc_control_B.TmpSignalConversionAtTransp[4] * 2.0 +
           proc_control_B.TmpSignalConversionAtTransp[5] *
           proc_control_B.TmpSignalConversionAtTransp[5] * 2.0) - 1.0;

        //  CAlculer la comande
        proc_control_B.constValues_f[0] = -proc_control_B.constValues[33] +
          proc_control_B.constValues[0];
        proc_control_B.constValues_f[1] = 0.0;
        proc_control_B.constValues_f[2] = 0.0;
        proc_control_B.constValues_f[3] = 0.0;
        proc_control_B.constValues_f[4] = proc_control_B.t15;
        proc_control_B.constValues_f[5] = -proc_control_B.t;
        proc_control_B.constValues_f[6] = 0.0;
        proc_control_B.constValues_f[7] = -proc_control_B.constValues[34] +
          proc_control_B.constValues[0];
        proc_control_B.constValues_f[8] = 0.0;
        proc_control_B.constValues_f[9] = -proc_control_B.t15;
        proc_control_B.constValues_f[10] = 0.0;
        proc_control_B.constValues_f[11] = proc_control_B.Divide_i;
        proc_control_B.constValues_f[12] = 0.0;
        proc_control_B.constValues_f[13] = 0.0;
        proc_control_B.constValues_f[14] = -proc_control_B.constValues[35] +
          proc_control_B.constValues[0];
        proc_control_B.constValues_f[15] = proc_control_B.t;
        proc_control_B.constValues_f[16] = -proc_control_B.Divide_i;
        proc_control_B.constValues_f[17] = 0.0;
        proc_control_B.constValues_f[18] = 0.0;
        proc_control_B.constValues_f[19] = -proc_control_B.t15;
        proc_control_B.constValues_f[20] = proc_control_B.t;
        proc_control_B.constValues_f[21] = proc_control_B.constValues[6] -
          proc_control_B.constValues[36];
        proc_control_B.constValues_f[22] = proc_control_B.constValues[9];
        proc_control_B.constValues_f[23] = proc_control_B.constValues[12];
        proc_control_B.constValues_f[24] = proc_control_B.t15;
        proc_control_B.constValues_f[25] = 0.0;
        proc_control_B.constValues_f[26] = -proc_control_B.Divide_i;
        proc_control_B.constValues_f[27] = proc_control_B.constValues[7];
        proc_control_B.constValues_f[28] = proc_control_B.constValues[10] -
          proc_control_B.constValues[37];
        proc_control_B.constValues_f[29] = proc_control_B.constValues[13];
        proc_control_B.constValues_f[30] = -proc_control_B.t;
        proc_control_B.constValues_f[31] = proc_control_B.Divide_i;
        proc_control_B.constValues_f[32] = 0.0;
        proc_control_B.constValues_f[33] = proc_control_B.constValues[8];
        proc_control_B.constValues_f[34] = proc_control_B.constValues[11];
        proc_control_B.constValues_f[35] = proc_control_B.constValues[14] -
          proc_control_B.constValues[38];

        // Sum: '<S174>/Diff' incorporates:
        //   Merge generated from: '<S9>/Merge'
        //   SampleTimeMath: '<S174>/TSamp'
        //   Selector: '<S139>/Selector'
        //   UnitDelay: '<S174>/UD'
        //
        //  About '<S174>/TSamp':
        //   y = u * K where K = 1 / ( w * Ts )
        //
        //  Block description for '<S174>/Diff':
        //
        //   Add in CPU
        //
        //  Block description for '<S174>/UD':
        //
        //   Store in Global RAM

        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6;
             proc_control_B.jp1j++) {
          proc_control_B.rtb_TSamp_j_a[proc_control_B.jp1j] =
            proc_control_B.TSamp_j[proc_control_B.jp1j] -
            proc_control_DW.UD_DSTATE_i[proc_control_B.jp1j];
        }

        // End of Sum: '<S174>/Diff'
        proc_control_B.b_newCoefs_j[0] = 0.0;
        proc_control_B.b_newCoefs_j[1] = 0.0;
        proc_control_B.b_newCoefs_j[2] = 0.0;
        proc_control_B.b_newCoefs_j[3] = -proc_control_B.Product2_j;
        proc_control_B.rtb_u2_n = proc_control_B.TmpSignalConversionAtTransp[11]
          * proc_control_B.constValues[15] -
          proc_control_B.TmpSignalConversionAtTransp[9];
        proc_control_B.b_newCoefs_j[4] = proc_control_B.rtb_u2_n *
          proc_control_B.constValues[0] + proc_control_B.MATLABSystem_o6;
        proc_control_B.b_newCoefs_j[5] = -proc_control_B.t27 +
          proc_control_B.t58;
        proc_control_B.b_newCoefs_j[6] = 0.0;
        proc_control_B.b_newCoefs_j[7] = 0.0;
        proc_control_B.b_newCoefs_j[8] = 0.0;
        proc_control_B.b_newCoefs_j[9] = -proc_control_B.MATLABSystem_o6 +
          proc_control_B.t57;
        proc_control_B.b_newCoefs_j[10] = -proc_control_B.t63;
        proc_control_B.AngularRate_a_idx_1 =
          proc_control_B.TmpSignalConversionAtTransp[12] *
          proc_control_B.constValues[16] -
          proc_control_B.TmpSignalConversionAtTransp[7];
        proc_control_B.b_newCoefs_j[11] = proc_control_B.AngularRate_a_idx_1 *
          proc_control_B.constValues[0] + proc_control_B.t26;
        proc_control_B.b_newCoefs_j[12] = 0.0;
        proc_control_B.b_newCoefs_j[13] = 0.0;
        proc_control_B.b_newCoefs_j[14] = 0.0;
        proc_control_B.scale = proc_control_B.TmpSignalConversionAtTransp[10] *
          proc_control_B.constValues[17] -
          proc_control_B.TmpSignalConversionAtTransp[8];
        proc_control_B.b_newCoefs_j[15] = proc_control_B.scale *
          proc_control_B.constValues[0] + proc_control_B.t27;
        proc_control_B.b_newCoefs_j[16] = -proc_control_B.t26 + proc_control_B.d;
        proc_control_B.b_newCoefs_j[17] = -proc_control_B.t62;
        proc_control_B.b_newCoefs_j[18] = proc_control_B.Product2_j;
        proc_control_B.b_newCoefs_j[19] = proc_control_B.MATLABSystem_o6 -
          proc_control_B.t57;
        proc_control_B.b_newCoefs_j[20] = proc_control_B.scale *
          -proc_control_B.constValues[0] + -proc_control_B.t27;
        proc_control_B.b_newCoefs_j[21] = 0.0;
        proc_control_B.b_newCoefs_j[22] = ((-proc_control_B.t4 -
          proc_control_B.oc) - proc_control_B.od) + proc_control_B.t16;
        proc_control_B.b_newCoefs_j[23] = ((proc_control_B.t3 +
          proc_control_B.t6) + proc_control_B.oa) - proc_control_B.Product8;
        proc_control_B.b_newCoefs_j[24] = proc_control_B.rtb_u2_n *
          -proc_control_B.constValues[0] + -proc_control_B.MATLABSystem_o6;
        proc_control_B.b_newCoefs_j[25] = proc_control_B.t63;
        proc_control_B.b_newCoefs_j[26] = proc_control_B.t26 - proc_control_B.d;
        proc_control_B.b_newCoefs_j[27] = ((proc_control_B.t4 +
          proc_control_B.oc) + proc_control_B.od) - proc_control_B.t16;
        proc_control_B.b_newCoefs_j[28] = 0.0;
        proc_control_B.b_newCoefs_j[29] = ((-proc_control_B.od_f -
          proc_control_B.t5) - proc_control_B.ob) + proc_control_B.n_c;
        proc_control_B.b_newCoefs_j[30] = proc_control_B.t27 -
          proc_control_B.t58;
        proc_control_B.b_newCoefs_j[31] = proc_control_B.AngularRate_a_idx_1 *
          -proc_control_B.constValues[0] + -proc_control_B.t26;
        proc_control_B.b_newCoefs_j[32] = proc_control_B.t62;
        proc_control_B.b_newCoefs_j[33] = ((-proc_control_B.t3 -
          proc_control_B.t6) - proc_control_B.oa) + proc_control_B.Product8;
        proc_control_B.b_newCoefs_j[34] = ((proc_control_B.od_f +
          proc_control_B.t5) + proc_control_B.ob) - proc_control_B.n_c;
        proc_control_B.b_newCoefs_j[35] = 0.0;
        proc_control_B.constValues_a[0] = proc_control_B.constValues[27] * std::
          abs(proc_control_B.TmpSignalConversionAtTransp[7]) +
          proc_control_B.constValues[21];
        proc_control_B.constValues_a[1] = 0.0;
        proc_control_B.constValues_a[2] = 0.0;
        proc_control_B.constValues_a[3] = 0.0;
        proc_control_B.constValues_a[4] = 0.0;
        proc_control_B.constValues_a[5] = 0.0;
        proc_control_B.constValues_a[6] = 0.0;
        proc_control_B.constValues_a[7] = proc_control_B.constValues[28] * std::
          abs(proc_control_B.TmpSignalConversionAtTransp[8]) +
          proc_control_B.constValues[22];
        proc_control_B.constValues_a[8] = 0.0;
        proc_control_B.constValues_a[9] = 0.0;
        proc_control_B.constValues_a[10] = 0.0;
        proc_control_B.constValues_a[11] = 0.0;
        proc_control_B.constValues_a[12] = 0.0;
        proc_control_B.constValues_a[13] = 0.0;
        proc_control_B.constValues_a[14] = proc_control_B.constValues[29] * std::
          abs(proc_control_B.TmpSignalConversionAtTransp[9]) +
          proc_control_B.constValues[23];
        proc_control_B.constValues_a[15] = 0.0;
        proc_control_B.constValues_a[16] = 0.0;
        proc_control_B.constValues_a[17] = 0.0;
        proc_control_B.constValues_a[18] = 0.0;
        proc_control_B.constValues_a[19] = 0.0;
        proc_control_B.constValues_a[20] = 0.0;
        proc_control_B.constValues_a[21] = proc_control_B.constValues[30] * std::
          abs(proc_control_B.TmpSignalConversionAtTransp[10]) +
          proc_control_B.constValues[24];
        proc_control_B.constValues_a[22] = 0.0;
        proc_control_B.constValues_a[23] = 0.0;
        proc_control_B.constValues_a[24] = 0.0;
        proc_control_B.constValues_a[25] = 0.0;
        proc_control_B.constValues_a[26] = 0.0;
        proc_control_B.constValues_a[27] = 0.0;
        proc_control_B.constValues_a[28] = proc_control_B.constValues[31] * std::
          abs(proc_control_B.TmpSignalConversionAtTransp[11]) +
          proc_control_B.constValues[25];
        proc_control_B.constValues_a[29] = 0.0;
        proc_control_B.constValues_a[30] = 0.0;
        proc_control_B.constValues_a[31] = 0.0;
        proc_control_B.constValues_a[32] = 0.0;
        proc_control_B.constValues_a[33] = 0.0;
        proc_control_B.constValues_a[34] = 0.0;
        proc_control_B.constValues_a[35] = proc_control_B.constValues[32] * std::
          abs(proc_control_B.TmpSignalConversionAtTransp[12]) +
          proc_control_B.constValues[26];
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 36;
             proc_control_B.jp1j++) {
          proc_control_B.dCoefs[proc_control_B.jp1j] =
            proc_control_B.b_newCoefs_j[proc_control_B.jp1j] +
            proc_control_B.constValues_a[proc_control_B.jp1j];
        }

        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6;
             proc_control_B.jp1j++) {
          proc_control_B.constValues_d[proc_control_B.jp1j] = 0.0;
        }

        proc_control_B.jj = 0;
        for (proc_control_B.jA = 0; proc_control_B.jA < 6; proc_control_B.jA++)
        {
          for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6;
               proc_control_B.jp1j++) {
            proc_control_B.constValues_d[proc_control_B.jp1j] +=
              proc_control_B.constValues_f[proc_control_B.jp1j +
              proc_control_B.jj] *
              proc_control_B.rtb_TSamp_j_a[proc_control_B.jA];
          }

          proc_control_B.dv19[proc_control_B.jA] = 0.0;
          proc_control_B.jj += 6;
        }

        proc_control_B.jp1j = 0;
        proc_control_B.jj = 0;
        for (proc_control_B.jA = 0; proc_control_B.jA < 6; proc_control_B.jA++)
        {
          for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
            proc_control_B.dv19[proc_control_B.i] +=
              proc_control_B.dCoefs[proc_control_B.i + proc_control_B.jp1j] *
              proc_control_B.Reference[proc_control_B.jj + 70];
          }

          proc_control_B.jp1j += 6;
          proc_control_B.jj += 10;
        }

        proc_control_B.d = (proc_control_B.constValues[0] + -proc_control_B.t29)
          * proc_control_B.constValues[40];
        proc_control_B.rtb_TSamp_j_a[0] = (proc_control_B.t40 -
          proc_control_B.t41) * proc_control_B.d * -2.0;
        proc_control_B.rtb_TSamp_j_a[1] = (proc_control_B.absxk +
          proc_control_B.t39) * proc_control_B.d * -2.0;
        proc_control_B.rtb_TSamp_j_a[2] = proc_control_B.d *
          proc_control_B.Product1_gp;
        proc_control_B.d = proc_control_B.constValues[20] *
          proc_control_B.constValues[40];
        proc_control_B.t4 = proc_control_B.constValues[40] * proc_control_B.t;
        proc_control_B.t3 = proc_control_B.constValues[19] *
          proc_control_B.constValues[40] * -proc_control_B.t29;
        proc_control_B.rtb_TSamp_j_a[3] = ((proc_control_B.constValues[40] *
          proc_control_B.t15 * proc_control_B.t65 + proc_control_B.t4 *
          proc_control_B.Product1_gp) + proc_control_B.d * -proc_control_B.t29 *
          proc_control_B.t65) + proc_control_B.t3 * proc_control_B.Product1_gp;
        proc_control_B.t57 = proc_control_B.constValues[40] *
          -proc_control_B.Divide_i;
        proc_control_B.od_f = proc_control_B.constValues[18] *
          proc_control_B.constValues[40] * proc_control_B.t29;
        proc_control_B.rtb_TSamp_j_a[4] = ((proc_control_B.constValues[40] *
          -proc_control_B.t15 * proc_control_B.t69 + proc_control_B.t57 *
          proc_control_B.Product1_gp) + proc_control_B.od_f *
          proc_control_B.Product1_gp) + proc_control_B.d * proc_control_B.t29 *
          proc_control_B.t69;
        proc_control_B.rtb_TSamp_j_a[5] = ((proc_control_B.t4 *
          proc_control_B.t69 + proc_control_B.t57 * proc_control_B.t65) +
          proc_control_B.od_f * proc_control_B.t65) + proc_control_B.t3 *
          proc_control_B.t69;
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6;
             proc_control_B.jp1j++) {
          proc_control_B.constValues_e[proc_control_B.jp1j] =
            (proc_control_B.constValues_d[proc_control_B.jp1j] +
             proc_control_B.dv19[proc_control_B.jp1j]) +
            proc_control_B.rtb_TSamp_j_a[proc_control_B.jp1j];
        }

        std::memset(&proc_control_B.u_scale[0], 0, sizeof(real_T) << 3U);
        proc_control_B.jj = 0;
        for (proc_control_B.jA = 0; proc_control_B.jA < 6; proc_control_B.jA++)
        {
          for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8;
               proc_control_B.jp1j++) {
            proc_control_B.u_scale[proc_control_B.jp1j] +=
              proc_control_DW.obj_m.binv[proc_control_B.jp1j + proc_control_B.jj]
              * proc_control_B.constValues_e[proc_control_B.jA];
          }

          proc_control_B.jj += 8;
        }
        break;

       case 21U:
        //  Open loop matrice b invese directe
        std::memset(&proc_control_B.dv17[0], 0, sizeof(real_T) << 3U);
        proc_control_B.jj = 0;
        proc_control_B.jA = 0;
        for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
          for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8;
               proc_control_B.jp1j++) {
            proc_control_B.dv17[proc_control_B.jp1j] +=
              proc_control_DW.obj_m.binv[proc_control_B.jp1j + proc_control_B.jj]
              * proc_control_B.Reference[proc_control_B.jA + 70];
          }

          proc_control_B.jj += 8;
          proc_control_B.jA += 10;
        }

        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8;
             proc_control_B.jp1j++) {
          proc_control_B.u_scale[proc_control_B.jp1j] =
            proc_control_B.dv17[proc_control_B.jp1j] * proc_control_DW.obj_m.k;
        }
        break;

       default:
        std::memset(&proc_control_B.u_scale[0], 0, sizeof(real_T) << 3U);
        break;
      }

      // Merge: '<S133>/Merge' incorporates:
      //   Constant: '<S139>/Constant'
      //   Constant: '<S139>/Constant1'
      //   MATLABSystem: '<S139>/MATLAB System'
      //   SignalConversion generated from: '<S139>/out'

      std::memcpy(&proc_control_B.Merge[0], &proc_control_B.u_scale[0], sizeof
                  (real_T) << 3U);
      proc_control_B.Merge[8] = proc_control_P.Constant_Value_d1;
      proc_control_B.Merge[9] = proc_control_P.Constant1_Value_p;

      // Update for UnitDelay: '<S174>/UD' incorporates:
      //   SampleTimeMath: '<S174>/TSamp'
      //
      //  About '<S174>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )
      //
      //  Block description for '<S174>/UD':
      //
      //   Store in Global RAM

      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        proc_control_DW.UD_DSTATE_i[proc_control_B.i] =
          proc_control_B.TSamp_j[proc_control_B.i];
      }

      // End of Update for UnitDelay: '<S174>/UD'
      // End of Outputs for SubSystem: '<S133>/JoyStick OpenLoop'
      break;

     case 2:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S133>/LTV MPC quaternion ' incorporates:
        //   ActionPort: '<S140>/Action Port'

        // InitializeConditions for SwitchCase: '<S133>/Switch Case' incorporates:
        //   Delay: '<S140>/Delay1'
        //   DiscretePulseGenerator: '<S140>/Pulse Generator'
        //   Memory: '<S178>/Memory'
        //   UnitDelay: '<S178>/last_mv'

        std::memcpy(&proc_control_DW.last_mv_DSTATE[0],
                    &proc_control_P.last_mv_InitialCondition_o[0], sizeof(real_T)
                    << 3U);
        std::memcpy(&proc_control_DW.Delay1_DSTATE[0],
                    &proc_control_P.Delay1_InitialCondition_n[0], 88U * sizeof
                    (real_T));
        std::memcpy(&proc_control_DW.Memory_PreviousInput[0],
                    &proc_control_P.Memory_InitialCondition_p[0], 252U * sizeof
                    (boolean_T));
        proc_control_DW.clockTickCounter_g = 0;

        // End of InitializeConditions for SubSystem: '<S133>/LTV MPC quaternion ' 
      }

      // Outputs for IfAction SubSystem: '<S133>/LTV MPC quaternion ' incorporates:
      //   ActionPort: '<S140>/Action Port'

      // MATLAB Function: '<S140>/MATLAB Function2' incorporates:
      //   Constant: '<S140>/Constant1'
      //   Constant: '<S140>/Constant3'
      //   Delay: '<S140>/Delay1'
      //   SignalConversion generated from: '<S177>/ SFunction '

      proc_control_B.TmpSignalConversionAtMAT_lt[0] =
        proc_control_B.WorldPosition[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[1] =
        proc_control_B.WorldPosition[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[2] =
        proc_control_B.WorldPosition[2];
      proc_control_B.TmpSignalConversionAtMAT_lt[3] = proc_control_B.qS2W[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[4] = proc_control_B.qS2W[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[5] = proc_control_B.qS2W[2];
      proc_control_B.TmpSignalConversionAtMAT_lt[6] = proc_control_B.qS2W[3];
      proc_control_B.TmpSignalConversionAtMAT_lt[7] =
        proc_control_B.BodyVelocity[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[10] =
        proc_control_B.AngularRate[0];
      proc_control_B.TmpSignalConversionAtMAT_lt[8] =
        proc_control_B.BodyVelocity[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[11] =
        proc_control_B.AngularRate[1];
      proc_control_B.TmpSignalConversionAtMAT_lt[9] =
        proc_control_B.BodyVelocity[2];
      proc_control_B.TmpSignalConversionAtMAT_lt[12] =
        proc_control_B.AngularRate[2];
      std::memset(&proc_control_B.A[0], 0, 1859U * sizeof(real_T));
      std::memset(&proc_control_B.A_f[0], 0, 38U * sizeof(real_T));
      proc_control_B.A_f[38] = 0.0;
      proc_control_B.A_f[42] = 0.0;
      proc_control_B.A_f[56] = 0.0;
      proc_control_B.A_f[70] = 0.0;
      proc_control_B.A_f[84] = 0.0;
      proc_control_B.A_f[94] = 0.0;
      proc_control_B.A_f[95] = 0.0;
      proc_control_B.A_f[96] = 0.0;
      proc_control_B.A_f[97] = 0.0;
      proc_control_B.A_f[107] = 0.0;
      proc_control_B.A_f[108] = 0.0;
      proc_control_B.A_f[109] = 0.0;
      proc_control_B.A_f[110] = 0.0;
      proc_control_B.A_f[120] = 0.0;
      proc_control_B.A_f[121] = 0.0;
      proc_control_B.A_f[122] = 0.0;
      proc_control_B.A_f[123] = 0.0;
      proc_control_B.A_f[130] = 0.0;
      proc_control_B.A_f[131] = 0.0;
      proc_control_B.A_f[132] = 0.0;
      proc_control_B.A_f[143] = 0.0;
      proc_control_B.A_f[144] = 0.0;
      proc_control_B.A_f[145] = 0.0;
      proc_control_B.A_f[156] = 0.0;
      proc_control_B.A_f[157] = 0.0;
      proc_control_B.A_f[158] = 0.0;
      std::memset(&proc_control_B.A_c[0], 0, 38U * sizeof(real_T));
      proc_control_B.A_c[38] = 0.0;
      proc_control_B.A_c[42] = 0.0;
      proc_control_B.A_c[56] = 0.0;
      proc_control_B.A_c[70] = 0.0;
      proc_control_B.A_c[84] = 0.0;
      proc_control_B.A_c[94] = 0.0;
      proc_control_B.A_c[95] = 0.0;
      proc_control_B.A_c[96] = 0.0;
      proc_control_B.A_c[97] = 0.0;
      proc_control_B.A_c[107] = 0.0;
      proc_control_B.A_c[108] = 0.0;
      proc_control_B.A_c[109] = 0.0;
      proc_control_B.A_c[110] = 0.0;
      proc_control_B.A_c[120] = 0.0;
      proc_control_B.A_c[121] = 0.0;
      proc_control_B.A_c[122] = 0.0;
      proc_control_B.A_c[123] = 0.0;
      proc_control_B.A_c[130] = 0.0;
      proc_control_B.A_c[131] = 0.0;
      proc_control_B.A_c[132] = 0.0;
      proc_control_B.A_c[143] = 0.0;
      proc_control_B.A_c[144] = 0.0;
      proc_control_B.A_c[145] = 0.0;
      proc_control_B.A_c[156] = 0.0;
      proc_control_B.A_c[157] = 0.0;
      proc_control_B.A_c[158] = 0.0;
      eye_4CWHrAiR(proc_control_B.b_newCoefs_j);
      for (proc_control_B.C_tmp = 0; proc_control_B.C_tmp < 11;
           proc_control_B.C_tmp++) {
        proc_control_B.od_f = std::abs
          (proc_control_B.TmpSignalConversionAtMAT_lt[10]);
        proc_control_B.t3 = std::abs(proc_control_B.TmpSignalConversionAtMAT_lt
          [11]);
        proc_control_B.t4 = std::abs(proc_control_B.TmpSignalConversionAtMAT_lt
          [12]);
        proc_control_B.t5 = std::abs(proc_control_B.TmpSignalConversionAtMAT_lt
          [7]);
        proc_control_B.t6 = std::abs(proc_control_B.TmpSignalConversionAtMAT_lt
          [8]);
        proc_control_B.oc = std::abs(proc_control_B.TmpSignalConversionAtMAT_lt
          [9]);
        if (std::isnan(proc_control_B.TmpSignalConversionAtMAT_lt[10])) {
          proc_control_B.ob = proc_control_B.TmpSignalConversionAtMAT_lt[10];
        } else if (proc_control_B.TmpSignalConversionAtMAT_lt[10] < 0.0) {
          proc_control_B.ob = -1.0;
        } else {
          proc_control_B.ob = (proc_control_B.TmpSignalConversionAtMAT_lt[10] >
                               0.0);
        }

        if (std::isnan(proc_control_B.TmpSignalConversionAtMAT_lt[11])) {
          proc_control_B.oa = proc_control_B.TmpSignalConversionAtMAT_lt[11];
        } else if (proc_control_B.TmpSignalConversionAtMAT_lt[11] < 0.0) {
          proc_control_B.oa = -1.0;
        } else {
          proc_control_B.oa = (proc_control_B.TmpSignalConversionAtMAT_lt[11] >
                               0.0);
        }

        if (std::isnan(proc_control_B.TmpSignalConversionAtMAT_lt[12])) {
          proc_control_B.od = proc_control_B.TmpSignalConversionAtMAT_lt[12];
        } else if (proc_control_B.TmpSignalConversionAtMAT_lt[12] < 0.0) {
          proc_control_B.od = -1.0;
        } else {
          proc_control_B.od = (proc_control_B.TmpSignalConversionAtMAT_lt[12] >
                               0.0);
        }

        if (std::isnan(proc_control_B.TmpSignalConversionAtMAT_lt[7])) {
          proc_control_B.n_c = proc_control_B.TmpSignalConversionAtMAT_lt[7];
        } else if (proc_control_B.TmpSignalConversionAtMAT_lt[7] < 0.0) {
          proc_control_B.n_c = -1.0;
        } else {
          proc_control_B.n_c = (proc_control_B.TmpSignalConversionAtMAT_lt[7] >
                                0.0);
        }

        if (std::isnan(proc_control_B.TmpSignalConversionAtMAT_lt[8])) {
          proc_control_B.Product8 = proc_control_B.TmpSignalConversionAtMAT_lt[8];
        } else if (proc_control_B.TmpSignalConversionAtMAT_lt[8] < 0.0) {
          proc_control_B.Product8 = -1.0;
        } else {
          proc_control_B.Product8 = (proc_control_B.TmpSignalConversionAtMAT_lt
            [8] > 0.0);
        }

        if (std::isnan(proc_control_B.TmpSignalConversionAtMAT_lt[9])) {
          proc_control_B.Divide_i = proc_control_B.TmpSignalConversionAtMAT_lt[9];
        } else if (proc_control_B.TmpSignalConversionAtMAT_lt[9] < 0.0) {
          proc_control_B.Divide_i = -1.0;
        } else {
          proc_control_B.Divide_i = (proc_control_B.TmpSignalConversionAtMAT_lt
            [9] > 0.0);
        }

        proc_control_B.Product2_j = proc_control_B.TmpSignalConversionAtMAT_lt[4]
          * proc_control_B.TmpSignalConversionAtMAT_lt[5] * 2.0;
        proc_control_B.t69 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          proc_control_B.TmpSignalConversionAtMAT_lt[6] * 2.0;
        proc_control_B.scale = proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          proc_control_B.TmpSignalConversionAtMAT_lt[6] * 2.0;
        proc_control_B.absxk = proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          proc_control_B.TmpSignalConversionAtMAT_lt[4] * 2.0;
        proc_control_B.Product1_gp = proc_control_B.TmpSignalConversionAtMAT_lt
          [3] * proc_control_B.TmpSignalConversionAtMAT_lt[5] * 2.0;
        proc_control_B.theta0 = proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          proc_control_B.TmpSignalConversionAtMAT_lt[6] * 2.0;
        proc_control_B.t52 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          proc_control_B.TmpSignalConversionAtMAT_lt[7] * 2.0;
        proc_control_B.t24_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          proc_control_B.TmpSignalConversionAtMAT_lt[7];
        proc_control_B.t24 = proc_control_B.t24_tmp * 2.0;
        proc_control_B.t25_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          proc_control_B.TmpSignalConversionAtMAT_lt[7];
        proc_control_B.t25 = proc_control_B.t25_tmp * 2.0;
        proc_control_B.t26 = proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          proc_control_B.TmpSignalConversionAtMAT_lt[7] * 2.0;
        proc_control_B.t27_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          proc_control_B.TmpSignalConversionAtMAT_lt[8];
        proc_control_B.t27 = proc_control_B.t27_tmp * 2.0;
        proc_control_B.MATLABSystem_o6 =
          proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          proc_control_B.TmpSignalConversionAtMAT_lt[8] * 2.0;
        proc_control_B.t29_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          proc_control_B.TmpSignalConversionAtMAT_lt[8];
        proc_control_B.t29 = proc_control_B.t29_tmp * 2.0;
        proc_control_B.t30 = proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          proc_control_B.TmpSignalConversionAtMAT_lt[8] * 2.0;
        proc_control_B.t31_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          proc_control_B.TmpSignalConversionAtMAT_lt[9];
        proc_control_B.t31 = proc_control_B.t31_tmp * 2.0;
        proc_control_B.t_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          proc_control_B.TmpSignalConversionAtMAT_lt[9];
        proc_control_B.t = proc_control_B.t_tmp * 2.0;
        proc_control_B.t33 = proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          proc_control_B.TmpSignalConversionAtMAT_lt[9] * 2.0;
        proc_control_B.t34 = proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          proc_control_B.TmpSignalConversionAtMAT_lt[9] * 2.0;
        proc_control_B.t39 = proc_control_B.TmpSignalConversionAtMAT_lt[4] / 2.0;
        proc_control_B.t40 = proc_control_B.TmpSignalConversionAtMAT_lt[5] / 2.0;
        proc_control_B.t41 = proc_control_B.TmpSignalConversionAtMAT_lt[6] / 2.0;
        proc_control_B.t15 = proc_control_B.TmpSignalConversionAtMAT_lt[3] / 2.0;
        proc_control_B.t43 = proc_control_B.TmpSignalConversionAtMAT_lt[10] /
          2.0;
        proc_control_B.t44 = proc_control_B.TmpSignalConversionAtMAT_lt[11] /
          2.0;
        proc_control_B.t45 = proc_control_B.TmpSignalConversionAtMAT_lt[12] /
          2.0;
        proc_control_B.t16 = proc_control_B.TmpSignalConversionAtMAT_lt[12] *
          1.0571299073092789E-5;
        proc_control_B.d = proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          9.7602896722846373E-5;
        proc_control_B.t57 = proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          0.01129023503850542;
        proc_control_B.t58 = proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          0.00477039452928936;
        proc_control_B.t59 = proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          9.1703771260780813E-5;
        proc_control_B.t61 = proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.143523560675718;
        proc_control_B.t62 = proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          0.00568699616459184;
        proc_control_B.t65 = proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.069014505171846527;
        proc_control_B.t63 = proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          0.0071670223909459834;
        proc_control_B.oa_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          proc_control_B.TmpSignalConversionAtMAT_lt[4] * 2.0;
        proc_control_B.BodyVelocity_c_idx_2 =
          proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          proc_control_B.TmpSignalConversionAtMAT_lt[5] * 2.0;
        proc_control_B.Product5 = proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          proc_control_B.TmpSignalConversionAtMAT_lt[6] * 2.0;
        proc_control_B.t60 = -(proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          9.1703771260780813E-5);
        for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
          proc_control_B.TmpSignalConversionAtTransp[proc_control_B.i] =
            proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.i];
          for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
               proc_control_B.jp1j++) {
            proc_control_B.jj = 13 * proc_control_B.i + proc_control_B.jp1j;
            proc_control_B.C[proc_control_B.jj + 169 * proc_control_B.C_tmp] =
              c_0[proc_control_B.jj];
          }
        }

        proc_control_B.rtb_u2_n = -proc_control_B.t29 + proc_control_B.t;
        proc_control_B.A_f[39] = proc_control_B.rtb_u2_n;
        proc_control_B.AngularRate_a_idx_1 = proc_control_B.t25 -
          proc_control_B.t31;
        proc_control_B.A_f[40] = proc_control_B.AngularRate_a_idx_1;
        proc_control_B.t57_tmp = -proc_control_B.t24 + proc_control_B.t27;
        proc_control_B.A_f[41] = proc_control_B.t57_tmp;
        proc_control_B.A_f[43] = proc_control_B.t43;
        proc_control_B.A_f[44] = proc_control_B.t44;
        proc_control_B.A_f[45] = proc_control_B.t45;
        proc_control_B.t57_tmp_h = proc_control_B.TmpSignalConversionAtMAT_lt[4]
          * -0.0013017970932508 + proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          0.4138016519122657;
        proc_control_B.A_f[46] = proc_control_B.t57_tmp_h;
        proc_control_B.rtb_Sum6_idx_2 =
          proc_control_B.TmpSignalConversionAtMAT_lt[4] * -0.51979016069898065 +
          proc_control_B.TmpSignalConversionAtMAT_lt[5] * 0.00099202109956931486;
        proc_control_B.A_f[47] = proc_control_B.rtb_Sum6_idx_2;
        proc_control_B.rtb_Sum6_idx_1 =
          proc_control_B.TmpSignalConversionAtMAT_lt[4] * 0.033540735888224739 -
          proc_control_B.TmpSignalConversionAtMAT_lt[5] * 0.0058758415205803329;
        proc_control_B.A_f[48] = proc_control_B.rtb_Sum6_idx_1;
        proc_control_B.rtb_Sum6_idx_0 =
          proc_control_B.TmpSignalConversionAtMAT_lt[4] * -25.242114556122988 +
          proc_control_B.TmpSignalConversionAtMAT_lt[5] * 0.1138522338822895;
        proc_control_B.A_f[49] = proc_control_B.rtb_Sum6_idx_0;
        proc_control_B.oa_f = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          0.1184627304742461 - proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          8.6371397256799973;
        proc_control_B.A_f[50] = proc_control_B.oa_f;
        proc_control_B.ob_i = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          0.38451002147839958 + proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          0.65361132374006825;
        proc_control_B.A_f[51] = proc_control_B.ob_i;
        proc_control_B.d32 = proc_control_B.MATLABSystem_o6 + proc_control_B.t33;
        proc_control_B.A_f[52] = proc_control_B.d32;
        proc_control_B.t24 = (proc_control_B.t24 - proc_control_B.t34) -
          proc_control_B.t27_tmp * 4.0;
        proc_control_B.A_f[53] = proc_control_B.t24;
        proc_control_B.t25 = (proc_control_B.t25 + proc_control_B.t30) -
          proc_control_B.t31_tmp * 4.0;
        proc_control_B.A_f[54] = proc_control_B.t25;
        proc_control_B.A_f[55] = -proc_control_B.t43;
        proc_control_B.A_f[57] = -proc_control_B.t45;
        proc_control_B.A_f[58] = proc_control_B.t44;
        proc_control_B.t31_tmp = (proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          -0.01263905936484723 - proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          0.4138016519122657) - proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          0.0013017970932508;
        proc_control_B.A_f[59] = proc_control_B.t31_tmp;
        proc_control_B.t27_tmp = (proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          -0.05386046241846134 - proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          0.00099202109956931486) - proc_control_B.TmpSignalConversionAtMAT_lt[3]
          * 0.51979016069898065;
        proc_control_B.A_f[60] = proc_control_B.t27_tmp;
        proc_control_B.d_k = (proc_control_B.TmpSignalConversionAtMAT_lt[4] *
                              0.37271497842704371 +
                              proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                              0.0058758415205803329) +
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 0.033540735888224739;
        proc_control_B.A_f[61] = proc_control_B.d_k;
        proc_control_B.d1 = (proc_control_B.TmpSignalConversionAtMAT_lt[4] *
                             -4.2094140168137981 -
                             proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                             0.1138522338822895) -
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 25.242114556122988;
        proc_control_B.A_f[62] = proc_control_B.d1;
        proc_control_B.d2 = (proc_control_B.TmpSignalConversionAtMAT_lt[4] *
                             0.73643595165049924 +
                             proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                             8.6371397256799973) +
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 0.1184627304742461;
        proc_control_B.A_f[63] = proc_control_B.d2;
        proc_control_B.d3 = (proc_control_B.TmpSignalConversionAtMAT_lt[4] *
                             0.009785912146552939 -
                             proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                             0.65361132374006825) +
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 0.38451002147839958;
        proc_control_B.A_f[64] = proc_control_B.d3;
        proc_control_B.t27 = (proc_control_B.t27 + proc_control_B.t34) -
          proc_control_B.t24_tmp * 4.0;
        proc_control_B.A_f[65] = proc_control_B.t27;
        proc_control_B.t33 += proc_control_B.t52;
        proc_control_B.A_f[66] = proc_control_B.t33;
        proc_control_B.t29 = (-proc_control_B.t26 + proc_control_B.t29) -
          proc_control_B.t_tmp * 4.0;
        proc_control_B.A_f[67] = proc_control_B.t29;
        proc_control_B.A_f[68] = -proc_control_B.t44;
        proc_control_B.A_f[69] = proc_control_B.t45;
        proc_control_B.A_f[71] = -proc_control_B.t43;
        proc_control_B.t_tmp = (proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          -0.01263905936484723 - proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          0.0013017970932508) + proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          0.4138016519122657;
        proc_control_B.A_f[72] = proc_control_B.t_tmp;
        proc_control_B.t24_tmp = (proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          -0.05386046241846134 - proc_control_B.TmpSignalConversionAtMAT_lt[6] *
          0.51979016069898065) + proc_control_B.TmpSignalConversionAtMAT_lt[3] *
          0.00099202109956931486;
        proc_control_B.A_f[73] = proc_control_B.t24_tmp;
        proc_control_B.t34 = (proc_control_B.TmpSignalConversionAtMAT_lt[5] *
                              0.37271497842704371 +
                              proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                              0.033540735888224739) -
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 0.0058758415205803329;
        proc_control_B.A_f[74] = proc_control_B.t34;
        proc_control_B.d4 = (proc_control_B.TmpSignalConversionAtMAT_lt[5] *
                             -4.2094140168137981 -
                             proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                             25.242114556122988) +
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 0.1138522338822895;
        proc_control_B.A_f[75] = proc_control_B.d4;
        proc_control_B.d5 = (proc_control_B.TmpSignalConversionAtMAT_lt[5] *
                             0.73643595165049924 +
                             proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                             0.1184627304742461) -
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 8.6371397256799973;
        proc_control_B.A_f[76] = proc_control_B.d5;
        proc_control_B.d6 = (proc_control_B.TmpSignalConversionAtMAT_lt[5] *
                             0.009785912146552939 +
                             proc_control_B.TmpSignalConversionAtMAT_lt[6] *
                             0.38451002147839958) +
          proc_control_B.TmpSignalConversionAtMAT_lt[3] * 0.65361132374006825;
        proc_control_B.A_f[77] = proc_control_B.d6;
        proc_control_B.t25_tmp = (-proc_control_B.t30 + proc_control_B.t31) -
          proc_control_B.t25_tmp * 4.0;
        proc_control_B.A_f[78] = proc_control_B.t25_tmp;
        proc_control_B.t26 = (proc_control_B.t26 + proc_control_B.t) -
          proc_control_B.t29_tmp * 4.0;
        proc_control_B.A_f[79] = proc_control_B.t26;
        proc_control_B.MATLABSystem_o6 += proc_control_B.t52;
        proc_control_B.A_f[80] = proc_control_B.MATLABSystem_o6;
        proc_control_B.A_f[81] = -proc_control_B.t45;
        proc_control_B.A_f[82] = -proc_control_B.t44;
        proc_control_B.A_f[83] = proc_control_B.t43;
        proc_control_B.t = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          -0.4138016519122657 - proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          0.0013017970932508;
        proc_control_B.A_f[85] = proc_control_B.t;
        proc_control_B.t52 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          -0.00099202109956931486 - proc_control_B.TmpSignalConversionAtMAT_lt[5]
          * 0.51979016069898065;
        proc_control_B.A_f[86] = proc_control_B.t52;
        proc_control_B.t29_tmp = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          0.0058758415205803329 + proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          0.033540735888224739;
        proc_control_B.A_f[87] = proc_control_B.t29_tmp;
        proc_control_B.t30 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          -0.1138522338822895 - proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          25.242114556122988;
        proc_control_B.A_f[88] = proc_control_B.t30;
        proc_control_B.t31 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          8.6371397256799973 + proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          0.1184627304742461;
        proc_control_B.A_f[89] = proc_control_B.t31;
        proc_control_B.d7 = proc_control_B.TmpSignalConversionAtMAT_lt[4] *
          -0.65361132374006825 + proc_control_B.TmpSignalConversionAtMAT_lt[5] *
          0.38451002147839958;
        proc_control_B.A_f[90] = proc_control_B.d7;
        proc_control_B.A_tmp = (-proc_control_B.BodyVelocity_c_idx_2 +
          -proc_control_B.Product5) + 1.0;
        proc_control_B.A_f[91] = proc_control_B.A_tmp;
        proc_control_B.d8 = proc_control_B.Product2_j + proc_control_B.theta0;
        proc_control_B.A_f[92] = proc_control_B.d8;
        proc_control_B.d9 = proc_control_B.t69 - proc_control_B.Product1_gp;
        proc_control_B.A_f[93] = proc_control_B.d9;
        proc_control_B.n_c *= proc_control_B.TmpSignalConversionAtMAT_lt[7];
        proc_control_B.d10 = (((((proc_control_B.t5 * -0.036243063166504788 +
          proc_control_B.t16) + proc_control_B.d) - proc_control_B.t57) -
          proc_control_B.t61) - proc_control_B.n_c * 0.036243063166504788) -
          0.46465465598083061;
        proc_control_B.A_f[98] = proc_control_B.d10;
        proc_control_B.d11 = (((proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          0.00477039452928936 - proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.001468966557066211) - proc_control_B.n_c * 1.109195745194835E-6) -
                              1.422045827172866E-5) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[11] *
            0.00041592787873873338 - proc_control_B.TmpSignalConversionAtMAT_lt
            [12] * 0.74121409319149256) - proc_control_B.t5 *
           1.109195745194835E-6);
        proc_control_B.A_f[99] = proc_control_B.d11;
        proc_control_B.d12 = (((proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          -5.890830655932608E-5 + proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.00568699616459184) + proc_control_B.n_c * 7.9830677445685858E-6) +
                              0.0001023470223662639) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[11] * 0.69409782663856512
            - proc_control_B.TmpSignalConversionAtMAT_lt[12] *
            0.00032422410747795261) + proc_control_B.t5 * 7.9830677445685858E-6);
        proc_control_B.A_f[100] = proc_control_B.d12;
        proc_control_B.d13 = (((proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          0.032506453976272241 + proc_control_B.TmpSignalConversionAtMAT_lt[12] *
          0.24400486517334929) - proc_control_B.t5 * 0.0001525121428377004) +
                              ((proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          0.044446246736648841 - proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.1148218101592509) - proc_control_B.n_c * 0.0001525121428377004)) +
          -0.0019552838825346208;
        proc_control_B.A_f[101] = proc_control_B.d13;
        proc_control_B.d14 = (((proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          1.7911420833141059E-5 + proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          8.3502908029033716) + proc_control_B.n_c * 0.011738978516892359) +
                              0.150499724575543) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[11] *
            -0.00568699616459184 - proc_control_B.TmpSignalConversionAtMAT_lt[12]
            * 0.001145088836853196) + proc_control_B.t5 * 0.011738978516892359);
        proc_control_B.A_f[102] = proc_control_B.d14;
        proc_control_B.n_c = (((proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          -7.5569972812640509E-5 - proc_control_B.TmpSignalConversionAtMAT_lt[12]
          * 0.00477039452928936) - proc_control_B.t5 * 0.0011846302503005471) +
                              ((proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          -5.91169722427816 - proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          2.2977499514997389E-5) - proc_control_B.n_c * 0.0011846302503005471))
          + -0.015187567311545479;
        proc_control_B.A_f[103] = proc_control_B.n_c;
        proc_control_B.Product2_j -= proc_control_B.theta0;
        proc_control_B.A_f[104] = proc_control_B.Product2_j;
        proc_control_B.Product5 = (-proc_control_B.oa_tmp +
          -proc_control_B.Product5) + 1.0;
        proc_control_B.A_f[105] = proc_control_B.Product5;
        proc_control_B.t5 = proc_control_B.scale + proc_control_B.absxk;
        proc_control_B.A_f[106] = proc_control_B.t5;
        proc_control_B.theta0 = proc_control_B.Product8 *
          proc_control_B.TmpSignalConversionAtMAT_lt[8];
        proc_control_B.d15 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -2.1519484922730651E-5 + proc_control_B.TmpSignalConversionAtMAT_lt[12]
          * 1.3454180758607359) - proc_control_B.t6 * 7.7738505218783331E-7) -
                              proc_control_B.TmpSignalConversionAtMAT_lt[7] *
                              0.01129023503850542) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[9] *
            -0.00041111798914172931 - proc_control_B.theta0 *
            7.7738505218783331E-7) - 1.8960611028971542E-5);
        proc_control_B.A_f[111] = proc_control_B.d15;
        proc_control_B.A_f[112] = (((((proc_control_B.t6 * -0.01903042325061665
          + proc_control_B.t16) + proc_control_B.t58) + -proc_control_B.t59) -
          proc_control_B.t65) - proc_control_B.theta0 * 0.01903042325061665) -
          0.46415666464918648;
        proc_control_B.d16 = (((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          -5.890830655932608E-5 + proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.0071670223909459834) + proc_control_B.theta0 * 2.3842573459475649E-5)
                              + 0.00058152618193843065) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
            -0.93255469429176219 - proc_control_B.TmpSignalConversionAtMAT_lt[12]
            * 7.6083411800115719E-5) + proc_control_B.t6 * 2.3842573459475649E-5);
        proc_control_B.A_f[113] = proc_control_B.d16;
        proc_control_B.d17 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.0071670223909459834 + proc_control_B.TmpSignalConversionAtMAT_lt[12]
          * 0.00145353196782447) - proc_control_B.t6 * 0.017943464992838758) +
                              ((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          0.044446246736648841 - proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          5.3937622658585171) - proc_control_B.theta0 * 0.017943464992838758)) +
          -0.4376454876302136;
        proc_control_B.A_f[114] = proc_control_B.d17;
        proc_control_B.d18 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          0.0012538688125934979 - proc_control_B.TmpSignalConversionAtMAT_lt[12]
          * 0.1118794885864644) + proc_control_B.t6 * 8.4206769578830268E-5) +
                              proc_control_B.TmpSignalConversionAtMAT_lt[7] *
                              1.7911420833141059E-5) + ((proc_control_B.theta0 *
          8.4206769578830268E-5 + proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.025315910649035739) + 0.0020538236482641531);
        proc_control_B.A_f[115] = proc_control_B.d18;
        proc_control_B.theta0 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10]
          * 1.6661666253314429E-5 + proc_control_B.TmpSignalConversionAtMAT_lt
          [12] * 0.01129023503850542) + proc_control_B.t6 *
          0.00035080205133418912) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[7] * -5.91169722427816 +
            proc_control_B.TmpSignalConversionAtMAT_lt[9] * 0.01257120723021817)
           + proc_control_B.theta0 * 0.00035080205133418912)) +
          0.0085561475935168052;
        proc_control_B.A_f[116] = proc_control_B.theta0;
        proc_control_B.Product1_gp += proc_control_B.t69;
        proc_control_B.A_f[117] = proc_control_B.Product1_gp;
        proc_control_B.scale -= proc_control_B.absxk;
        proc_control_B.A_f[118] = proc_control_B.scale;
        proc_control_B.oa_tmp = (-proc_control_B.oa_tmp +
          -proc_control_B.BodyVelocity_c_idx_2) + 1.0;
        proc_control_B.A_f[119] = proc_control_B.oa_tmp;
        proc_control_B.absxk = proc_control_B.Divide_i *
          proc_control_B.TmpSignalConversionAtMAT_lt[9];
        proc_control_B.t69 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          2.989993556213668E-6 - proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          1.4431163638272659) + proc_control_B.oc * 5.1582899272597018E-6) -
                              proc_control_B.TmpSignalConversionAtMAT_lt[7] *
                              0.143523560675718) + ((proc_control_B.absxk *
          5.1582899272597018E-6 + proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          -0.00041111798914172931) + 0.0001592064792364106);
        proc_control_B.A_f[124] = proc_control_B.t69;
        proc_control_B.BodyVelocity_c_idx_2 =
          (((proc_control_B.TmpSignalConversionAtMAT_lt[10] * 1.0731951852318531
             - proc_control_B.TmpSignalConversionAtMAT_lt[11] *
             1.356129262930646E-5) + proc_control_B.oc * 2.1981689677272681E-5)
           + ((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
               -0.001468966557066211 -
               proc_control_B.TmpSignalConversionAtMAT_lt[8] *
               0.069014505171846527) + proc_control_B.absxk *
              2.1981689677272681E-5)) + 0.00067844721226150231;
        proc_control_B.A_f[125] = proc_control_B.BodyVelocity_c_idx_2;
        proc_control_B.A_f[126] = (((((proc_control_B.oc * -0.01616685726098728
          + proc_control_B.d) + -proc_control_B.t59) + proc_control_B.t62) +
          proc_control_B.t63) - proc_control_B.absxk * 0.01616685726098728) -
          0.49897707595639768;
        proc_control_B.t59 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          0.069014505171846527 - proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          0.0018646499569661989) + proc_control_B.oc * 0.00171795837774031) +
                              ((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          -0.1148218101592509 - proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          5.3937622658585171) + proc_control_B.absxk * 0.00171795837774031)) +
          0.053023406720379938;
        proc_control_B.A_f[127] = proc_control_B.t59;
        proc_control_B.d19 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.00032387772021301561 + proc_control_B.TmpSignalConversionAtMAT_lt
          [11] * 0.143523560675718) - proc_control_B.oc * 0.00030055639757781919)
                              + ((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          8.3502908029033716 + proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          0.025315910649035739) - proc_control_B.absxk * 0.00030055639757781919))
          + -0.0092764320240067664;
        proc_control_B.A_f[128] = proc_control_B.d19;
        proc_control_B.absxk = (((proc_control_B.TmpSignalConversionAtMAT_lt[10]
          * -0.0013492616947596331 - proc_control_B.TmpSignalConversionAtMAT_lt
          [11] * 0.01448357294143097) - proc_control_B.oc * 3.993855127780116E-6)
          - proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          2.2977499514997389E-5) + ((proc_control_B.TmpSignalConversionAtMAT_lt
          [8] * 0.01257120723021817 - proc_control_B.absxk *
          3.993855127780116E-6) - 0.00012326713357346041);
        proc_control_B.A_f[129] = proc_control_B.absxk;
        proc_control_B.A_f[133] = -proc_control_B.t39;
        proc_control_B.A_f[134] = proc_control_B.t15;
        proc_control_B.A_f[135] = proc_control_B.t41;
        proc_control_B.A_f[136] = -proc_control_B.t40;
        proc_control_B.ob *= proc_control_B.TmpSignalConversionAtMAT_lt[10];
        proc_control_B.d20 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.00010396365424827521 - proc_control_B.TmpSignalConversionAtMAT_lt
          [11] * 0.0030560301354578762) -
          proc_control_B.TmpSignalConversionAtMAT_lt[12] * 0.030270009262121408)
                              - proc_control_B.od_f * 2.1768827225552109E-5) +
          (((proc_control_B.TmpSignalConversionAtMAT_lt[8] *
             -2.1519484922730651E-5 +
             proc_control_B.TmpSignalConversionAtMAT_lt[9] *
             2.989993556213668E-6) - proc_control_B.ob * 2.1768827225552109E-5)
           - 0.00043450752945213789);
        proc_control_B.A_f[137] = proc_control_B.d20;
        proc_control_B.d21 = ((((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          0.0028513455484883 - proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          0.00032316342950661811) + proc_control_B.TmpSignalConversionAtMAT_lt
          [12] * 4.2079285691049859E-5) - proc_control_B.od_f *
          0.0036543398217122828) + ((proc_control_B.TmpSignalConversionAtMAT_lt
          [8] * -9.1703771260780813E-5 +
          proc_control_B.TmpSignalConversionAtMAT_lt[9] * 1.0731951852318531) -
          proc_control_B.ob * 0.0036543398217122828)) + -0.072940914605035587;
        proc_control_B.A_f[138] = proc_control_B.d21;
        proc_control_B.d22 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          0.023864851221217471 + proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          4.0426879502317728E-6) - proc_control_B.TmpSignalConversionAtMAT_lt[12]
          * 0.00016269010774240791) + ((proc_control_B.od_f *
          0.0003794960966701478 - proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          0.93255469429176219) - proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          9.1703771260780813E-5)) + (proc_control_B.ob * 0.0003794960966701478 +
          0.007574772388625705);
        proc_control_B.A_f[139] = proc_control_B.d22;
        proc_control_B.d23 = ((((proc_control_B.od_f * -0.28560141361437341 +
          proc_control_B.t65) - proc_control_B.t63) - proc_control_B.ob *
          0.28560141361437341) - 5.7006270182509668) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
            0.00017692814721597281 - proc_control_B.TmpSignalConversionAtMAT_lt
            [11] * 0.00301187450220627) +
           proc_control_B.TmpSignalConversionAtMAT_lt[12] *
           0.0032852614324183722);
        proc_control_B.A_f[140] = proc_control_B.d23;
        proc_control_B.d24 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          0.005100926963153893 + proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          7.54282242443926E-5) + proc_control_B.TmpSignalConversionAtMAT_lt[12] *
          0.76112100692746432) + ((proc_control_B.od_f * 0.0013404854555911631 +
          proc_control_B.TmpSignalConversionAtMAT_lt[8] * 0.0012538688125934979)
          - proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          0.00032387772021301561)) + (proc_control_B.ob * 0.0013404854555911631
          + 0.026756196718386482);
        proc_control_B.A_f[141] = proc_control_B.d24;
        proc_control_B.ob = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.0085297096290247246 - proc_control_B.TmpSignalConversionAtMAT_lt[11]
          * 0.59953739020136265) - proc_control_B.TmpSignalConversionAtMAT_lt[12]
                              * 6.8948828938803766E-5) + ((proc_control_B.od_f *
          0.00066564938883491385 + proc_control_B.TmpSignalConversionAtMAT_lt[8]
          * 1.6661666253314429E-5) - proc_control_B.TmpSignalConversionAtMAT_lt
          [9] * 0.0013492616947596331)) + (proc_control_B.ob *
          0.00066564938883491385 + 0.013286414946804669);
        proc_control_B.A_f[142] = proc_control_B.ob;
        proc_control_B.A_f[146] = -proc_control_B.t40;
        proc_control_B.A_f[147] = -proc_control_B.t41;
        proc_control_B.A_f[148] = proc_control_B.t15;
        proc_control_B.A_f[149] = proc_control_B.t39;
        proc_control_B.od_f = proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          proc_control_B.oa;
        proc_control_B.oa = ((((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.0030560301354578762 + proc_control_B.TmpSignalConversionAtMAT_lt[11]
          * 0.001929418735906703) + proc_control_B.TmpSignalConversionAtMAT_lt
          [12] * 6.2884941489263073E-5) + proc_control_B.t3 *
                              0.001003331497170287) +
                             ((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
          9.7602896722846373E-5 - proc_control_B.TmpSignalConversionAtMAT_lt[9] *
          1.4431163638272659) + proc_control_B.od_f * 0.001003331497170287)) +
          0.0234110682673067;
        proc_control_B.A_f[150] = proc_control_B.oa;
        proc_control_B.d25 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.00032316342950661811 + proc_control_B.TmpSignalConversionAtMAT_lt
          [11] * 4.5292476302332957E-6) -
          proc_control_B.TmpSignalConversionAtMAT_lt[12] * 0.016528998001422841)
                              + proc_control_B.t3 * 1.026911824132076E-5) +
          (((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
             0.00041592787873873338 -
             proc_control_B.TmpSignalConversionAtMAT_lt[9] *
             1.356129262930646E-5) + proc_control_B.od_f * 1.026911824132076E-5)
           + 0.00023961275896415121);
        proc_control_B.A_f[151] = proc_control_B.d25;
        proc_control_B.d26 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          4.0426879502317728E-6 + proc_control_B.TmpSignalConversionAtMAT_lt[11]
          * 0.023860477346842442) - proc_control_B.TmpSignalConversionAtMAT_lt
          [12] * 0.000941018323416786) + ((proc_control_B.t3 *
          -3.9756137245743291E-5 + proc_control_B.TmpSignalConversionAtMAT_lt[7]
          * 0.69409782663856512) + proc_control_B.TmpSignalConversionAtMAT_lt[9]
          * 9.7602896722846373E-5)) + (proc_control_B.od_f *
          -3.9756137245743291E-5 - 0.00092764320240067675);
        proc_control_B.A_f[152] = proc_control_B.d26;
        proc_control_B.d27 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.00301187450220627 + proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          0.00082864946354184129) - proc_control_B.TmpSignalConversionAtMAT_lt
          [12] * 0.291807921220024) + ((proc_control_B.t3 *
          0.00080268590155159437 + proc_control_B.TmpSignalConversionAtMAT_lt[7]
          * 0.032506453976272241) - proc_control_B.TmpSignalConversionAtMAT_lt[9]
          * 0.0018646499569661989)) + (proc_control_B.od_f *
          0.00080268590155159437 + 0.018729337702870542);
        proc_control_B.A_f[153] = proc_control_B.d27;
        proc_control_B.t61 = ((((proc_control_B.t3 * -0.058374455968341669 +
          proc_control_B.t61) - proc_control_B.t62) - proc_control_B.od_f *
          0.058374455968341669) - 1.362070639261306) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[10] * 7.54282242443926E-5
            - proc_control_B.TmpSignalConversionAtMAT_lt[11] *
            0.00019446645525741661) -
           proc_control_B.TmpSignalConversionAtMAT_lt[12] * 0.003324115892995542);
        proc_control_B.A_f[154] = proc_control_B.t61;
        proc_control_B.od_f = ((((proc_control_B.t3 * 1.6062902063655571E-7 -
          proc_control_B.TmpSignalConversionAtMAT_lt[7] * 7.5569972812640509E-5)
          - proc_control_B.TmpSignalConversionAtMAT_lt[9] * 0.01448357294143097)
          + proc_control_B.od_f * 1.6062902063655571E-7) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
            -0.59953739020136265 + proc_control_B.TmpSignalConversionAtMAT_lt[11]
            * 0.0085432434746820687) +
           proc_control_B.TmpSignalConversionAtMAT_lt[12] *
           0.0030111351640179931)) + 3.7480104815196341E-6;
        proc_control_B.A_f[155] = proc_control_B.od_f;
        proc_control_B.A_f[159] = -proc_control_B.t41;
        proc_control_B.A_f[160] = proc_control_B.t40;
        proc_control_B.A_f[161] = -proc_control_B.t39;
        proc_control_B.A_f[162] = proc_control_B.t15;
        proc_control_B.t3 = proc_control_B.TmpSignalConversionAtMAT_lt[12] *
          proc_control_B.od;
        proc_control_B.od = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.030270009262121408 + proc_control_B.TmpSignalConversionAtMAT_lt[11]
          * 6.2884941489263073E-5) + proc_control_B.TmpSignalConversionAtMAT_lt
                              [12] * 0.0020006959490984312) - proc_control_B.t4 *
                             0.0001032754577185093) +
          (((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
             1.0571299073092789E-5 + proc_control_B.TmpSignalConversionAtMAT_lt
             [8] * 1.3454180758607359) - proc_control_B.t3 *
            0.0001032754577185093) - 0.0050625224371818262);
        proc_control_B.A_f[163] = proc_control_B.od;
        proc_control_B.d28 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          4.2079285691049859E-5 - proc_control_B.TmpSignalConversionAtMAT_lt[11]
          * 0.016528998001422841) + proc_control_B.TmpSignalConversionAtMAT_lt
          [12] * 0.00283488707941543) + proc_control_B.t4 *
                              4.3636352726935713E-5) +
          (((proc_control_B.TmpSignalConversionAtMAT_lt[7] *
             -0.74121409319149256 + proc_control_B.TmpSignalConversionAtMAT_lt[8]
             * 1.0571299073092789E-5) + proc_control_B.t3 *
            4.3636352726935713E-5) + 0.0021390368983792022);
        proc_control_B.A_f[164] = proc_control_B.d28;
        proc_control_B.d29 = ((((proc_control_B.t4 * -5.3885346962112674E-7 -
          proc_control_B.TmpSignalConversionAtMAT_lt[7] * 0.00032422410747795261)
          - proc_control_B.TmpSignalConversionAtMAT_lt[8] *
          7.6083411800115719E-5) - proc_control_B.t3 * 5.3885346962112674E-7) +
                              ((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          -0.00016269010774240791 - proc_control_B.TmpSignalConversionAtMAT_lt
          [11] * 0.000941018323416786) -
          proc_control_B.TmpSignalConversionAtMAT_lt[12] * 2.6641242336162E-6))
          + -2.6414385765741509E-5;
        proc_control_B.A_f[165] = proc_control_B.d29;
        proc_control_B.d30 = (((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          0.0032852614324183722 - proc_control_B.TmpSignalConversionAtMAT_lt[11]
          * 0.291807921220024) - proc_control_B.TmpSignalConversionAtMAT_lt[12] *
          0.00063467747547131872) + ((proc_control_B.t4 * 0.00040656429737222281
          + proc_control_B.TmpSignalConversionAtMAT_lt[7] * 0.24400486517334929)
          + proc_control_B.TmpSignalConversionAtMAT_lt[8] * 0.00145353196782447))
          + (proc_control_B.t3 * 0.00040656429737222281 + 0.019929622420207);
        proc_control_B.A_f[166] = proc_control_B.d30;
        proc_control_B.d31 = ((((proc_control_B.t4 * 1.6384160104928689E-7 -
          proc_control_B.TmpSignalConversionAtMAT_lt[7] * 0.001145088836853196)
          - proc_control_B.TmpSignalConversionAtMAT_lt[8] * 0.1118794885864644)
          + proc_control_B.t3 * 1.6384160104928689E-7) +
                              ((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
          0.76112100692746432 - proc_control_B.TmpSignalConversionAtMAT_lt[11] *
          0.003324115892995542) - proc_control_B.TmpSignalConversionAtMAT_lt[12]
          * 0.005288701994301117)) + 8.0314510318277867E-6;
        proc_control_B.A_f[167] = proc_control_B.d31;
        proc_control_B.t3 = ((((proc_control_B.t4 * -0.054076220260104418 +
          proc_control_B.t57) - proc_control_B.t58) - proc_control_B.t3 *
                              0.054076220260104418) - 2.6507951107894319) +
          ((proc_control_B.TmpSignalConversionAtMAT_lt[10] *
            -6.8948828938803766E-5 + proc_control_B.TmpSignalConversionAtMAT_lt
            [11] * 0.0030111351640179931) +
           proc_control_B.TmpSignalConversionAtMAT_lt[12] *
           1.7711862430984169E-5);
        proc_control_B.A_f[168] = proc_control_B.t3;
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 169;
             proc_control_B.jp1j++) {
          proc_control_B.b_A_g[proc_control_B.jp1j] =
            proc_control_B.A_f[proc_control_B.jp1j] *
            proc_control_P.Constant3_Value;
        }

        proc_control_expm_m(proc_control_B.b_A_g, &proc_control_B.A[169 *
                            proc_control_B.C_tmp]);
        proc_control_B.A_c[39] = proc_control_B.rtb_u2_n;
        proc_control_B.A_c[40] = proc_control_B.AngularRate_a_idx_1;
        proc_control_B.A_c[41] = proc_control_B.t57_tmp;
        proc_control_B.A_c[43] = proc_control_B.t43;
        proc_control_B.A_c[44] = proc_control_B.t44;
        proc_control_B.A_c[45] = proc_control_B.t45;
        proc_control_B.A_c[46] = proc_control_B.t57_tmp_h;
        proc_control_B.A_c[47] = proc_control_B.rtb_Sum6_idx_2;
        proc_control_B.A_c[48] = proc_control_B.rtb_Sum6_idx_1;
        proc_control_B.A_c[49] = proc_control_B.rtb_Sum6_idx_0;
        proc_control_B.A_c[50] = proc_control_B.oa_f;
        proc_control_B.A_c[51] = proc_control_B.ob_i;
        proc_control_B.A_c[52] = proc_control_B.d32;
        proc_control_B.A_c[53] = proc_control_B.t24;
        proc_control_B.A_c[54] = proc_control_B.t25;
        proc_control_B.A_c[55] = -proc_control_B.t43;
        proc_control_B.A_c[57] = -proc_control_B.t45;
        proc_control_B.A_c[58] = proc_control_B.t44;
        proc_control_B.A_c[59] = proc_control_B.t31_tmp;
        proc_control_B.A_c[60] = proc_control_B.t27_tmp;
        proc_control_B.A_c[61] = proc_control_B.d_k;
        proc_control_B.A_c[62] = proc_control_B.d1;
        proc_control_B.A_c[63] = proc_control_B.d2;
        proc_control_B.A_c[64] = proc_control_B.d3;
        proc_control_B.A_c[65] = proc_control_B.t27;
        proc_control_B.A_c[66] = proc_control_B.t33;
        proc_control_B.A_c[67] = proc_control_B.t29;
        proc_control_B.A_c[68] = -proc_control_B.t44;
        proc_control_B.A_c[69] = proc_control_B.t45;
        proc_control_B.A_c[71] = -proc_control_B.t43;
        proc_control_B.A_c[72] = proc_control_B.t_tmp;
        proc_control_B.A_c[73] = proc_control_B.t24_tmp;
        proc_control_B.A_c[74] = proc_control_B.t34;
        proc_control_B.A_c[75] = proc_control_B.d4;
        proc_control_B.A_c[76] = proc_control_B.d5;
        proc_control_B.A_c[77] = proc_control_B.d6;
        proc_control_B.A_c[78] = proc_control_B.t25_tmp;
        proc_control_B.A_c[79] = proc_control_B.t26;
        proc_control_B.A_c[80] = proc_control_B.MATLABSystem_o6;
        proc_control_B.A_c[81] = -proc_control_B.t45;
        proc_control_B.A_c[82] = -proc_control_B.t44;
        proc_control_B.A_c[83] = proc_control_B.t43;
        proc_control_B.A_c[85] = proc_control_B.t;
        proc_control_B.A_c[86] = proc_control_B.t52;
        proc_control_B.A_c[87] = proc_control_B.t29_tmp;
        proc_control_B.A_c[88] = proc_control_B.t30;
        proc_control_B.A_c[89] = proc_control_B.t31;
        proc_control_B.A_c[90] = proc_control_B.d7;
        proc_control_B.A_c[91] = proc_control_B.A_tmp;
        proc_control_B.A_c[92] = proc_control_B.d8;
        proc_control_B.A_c[93] = proc_control_B.d9;
        proc_control_B.A_c[98] = proc_control_B.d10;
        proc_control_B.A_c[99] = proc_control_B.d11;
        proc_control_B.A_c[100] = proc_control_B.d12;
        proc_control_B.A_c[101] = proc_control_B.d13;
        proc_control_B.A_c[102] = proc_control_B.d14;
        proc_control_B.A_c[103] = proc_control_B.n_c;
        proc_control_B.A_c[104] = proc_control_B.Product2_j;
        proc_control_B.A_c[105] = proc_control_B.Product5;
        proc_control_B.A_c[106] = proc_control_B.t5;
        proc_control_B.A_c[111] = proc_control_B.d15;
        proc_control_B.A_c[112] = (((((proc_control_B.t6 * -0.01903042325061665
          + proc_control_B.t16) + proc_control_B.t58) + proc_control_B.t60) -
          proc_control_B.t65) - proc_control_B.Product8 *
          proc_control_B.TmpSignalConversionAtMAT_lt[8] * 0.01903042325061665) -
          0.46415666464918648;
        proc_control_B.A_c[113] = proc_control_B.d16;
        proc_control_B.A_c[114] = proc_control_B.d17;
        proc_control_B.A_c[115] = proc_control_B.d18;
        proc_control_B.A_c[116] = proc_control_B.theta0;
        proc_control_B.A_c[117] = proc_control_B.Product1_gp;
        proc_control_B.A_c[118] = proc_control_B.scale;
        proc_control_B.A_c[119] = proc_control_B.oa_tmp;
        proc_control_B.A_c[124] = proc_control_B.t69;
        proc_control_B.A_c[125] = proc_control_B.BodyVelocity_c_idx_2;
        proc_control_B.A_c[126] = (((((proc_control_B.oc * -0.01616685726098728
          + proc_control_B.d) + proc_control_B.t60) + proc_control_B.t62) +
          proc_control_B.t63) - proc_control_B.Divide_i *
          proc_control_B.TmpSignalConversionAtMAT_lt[9] * 0.01616685726098728) -
          0.49897707595639768;
        proc_control_B.A_c[127] = proc_control_B.t59;
        proc_control_B.A_c[128] = proc_control_B.d19;
        proc_control_B.A_c[129] = proc_control_B.absxk;
        proc_control_B.A_c[133] = -proc_control_B.t39;
        proc_control_B.A_c[134] = proc_control_B.t15;
        proc_control_B.A_c[135] = proc_control_B.t41;
        proc_control_B.A_c[136] = -proc_control_B.t40;
        proc_control_B.A_c[137] = proc_control_B.d20;
        proc_control_B.A_c[138] = proc_control_B.d21;
        proc_control_B.A_c[139] = proc_control_B.d22;
        proc_control_B.A_c[140] = proc_control_B.d23;
        proc_control_B.A_c[141] = proc_control_B.d24;
        proc_control_B.A_c[142] = proc_control_B.ob;
        proc_control_B.A_c[146] = -proc_control_B.t40;
        proc_control_B.A_c[147] = -proc_control_B.t41;
        proc_control_B.A_c[148] = proc_control_B.t15;
        proc_control_B.A_c[149] = proc_control_B.t39;
        proc_control_B.A_c[150] = proc_control_B.oa;
        proc_control_B.A_c[151] = proc_control_B.d25;
        proc_control_B.A_c[152] = proc_control_B.d26;
        proc_control_B.A_c[153] = proc_control_B.d27;
        proc_control_B.A_c[154] = proc_control_B.t61;
        proc_control_B.A_c[155] = proc_control_B.od_f;
        proc_control_B.A_c[159] = -proc_control_B.t41;
        proc_control_B.A_c[160] = proc_control_B.t40;
        proc_control_B.A_c[161] = -proc_control_B.t39;
        proc_control_B.A_c[162] = proc_control_B.t15;
        proc_control_B.A_c[163] = proc_control_B.od;
        proc_control_B.A_c[164] = proc_control_B.d28;
        proc_control_B.A_c[165] = proc_control_B.d29;
        proc_control_B.A_c[166] = proc_control_B.d30;
        proc_control_B.A_c[167] = proc_control_B.d31;
        proc_control_B.A_c[168] = proc_control_B.t3;
        proc_control_B.jp1j = 0;
        proc_control_B.jj = 0;
        for (proc_control_B.jA = 0; proc_control_B.jA < 6; proc_control_B.jA++)
        {
          for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
            proc_control_B.ibmat = (proc_control_B.i + proc_control_B.jj) + 98;
            proc_control_B.c_l = proc_control_B.i + proc_control_B.jp1j;
            proc_control_B.dCoefs[proc_control_B.c_l] =
              proc_control_B.A_c[proc_control_B.ibmat];
            proc_control_B.constValues_f[proc_control_B.c_l] =
              proc_control_B.A[proc_control_B.ibmat] -
              proc_control_B.b_newCoefs_j[proc_control_B.c_l];
          }

          proc_control_B.jp1j += 6;
          proc_control_B.jj += 13;
        }

        proc_control_mldivide_Z0xqFpTr(proc_control_B.dCoefs,
          proc_control_B.constValues_f, proc_control_B.constValues_a);
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 6;
             proc_control_B.jp1j++) {
          proc_control_B.jj = 0;
          for (proc_control_B.jA = 0; proc_control_B.jA < 8; proc_control_B.jA++)
          {
            proc_control_B.i = proc_control_B.jj + proc_control_B.jp1j;
            proc_control_B.b_newCoefs[proc_control_B.i] = 0.0;
            proc_control_B.ibmat = 0;
            for (proc_control_B.c_l = 0; proc_control_B.c_l < 6;
                 proc_control_B.c_l++) {
              proc_control_B.b_newCoefs[proc_control_B.i] +=
                proc_control_B.constValues_a[proc_control_B.ibmat +
                proc_control_B.jp1j] * c_b[proc_control_B.c_l +
                proc_control_B.jj];
              proc_control_B.ibmat += 6;
            }

            proc_control_B.jj += 6;
          }
        }

        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8;
             proc_control_B.jp1j++) {
          for (proc_control_B.jj = 0; proc_control_B.jj < 7; proc_control_B.jj++)
          {
            proc_control_B.B[(proc_control_B.jj + 13 * proc_control_B.jp1j) +
              104 * proc_control_B.C_tmp] = 0.0;
          }

          for (proc_control_B.jj = 0; proc_control_B.jj < 6; proc_control_B.jj++)
          {
            proc_control_B.B[((proc_control_B.jj + 13 * proc_control_B.jp1j) +
                              104 * proc_control_B.C_tmp) + 7] =
              proc_control_B.b_newCoefs[6 * proc_control_B.jp1j +
              proc_control_B.jj];
          }
        }

        if (static_cast<int32_T>(proc_control_P.Constant1_Value_k) - 1 >= 0) {
          for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8;
               proc_control_B.jp1j++) {
            proc_control_B.dv17[proc_control_B.jp1j] =
              proc_control_DW.Delay1_DSTATE[11 * proc_control_B.jp1j +
              proc_control_B.C_tmp];
          }
        }

        proc_control_B.ibmat = 0;
        while (proc_control_B.ibmat <= static_cast<int32_T>
               (proc_control_P.Constant1_Value_k) - 1) {
          proc_control_B.d = proc_control_P.Constant3_Value /
            proc_control_P.Constant1_Value_k;
          proc_co_AUV8QuatSimFcn_AbfqyrNU
            (proc_control_B.TmpSignalConversionAtMAT_lt, proc_control_B.dv17,
             proc_control_B.z_cx);
          for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
               proc_control_B.jp1j++) {
            proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.jp1j] +=
              proc_control_B.z_cx[proc_control_B.jp1j] * proc_control_B.d;
          }

          proc_control_B.d = norm_115oznfV
            (&proc_control_B.TmpSignalConversionAtMAT_lt[3]);
          proc_control_B.TmpSignalConversionAtMAT_lt[3] /= proc_control_B.d;
          proc_control_B.TmpSignalConversionAtMAT_lt[4] /= proc_control_B.d;
          proc_control_B.TmpSignalConversionAtMAT_lt[5] /= proc_control_B.d;
          proc_control_B.TmpSignalConversionAtMAT_lt[6] /= proc_control_B.d;
          proc_control_B.ibmat++;
        }

        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8;
             proc_control_B.jp1j++) {
          proc_control_B.useq_a[proc_control_B.jp1j + (proc_control_B.C_tmp << 3)]
            = proc_control_DW.Delay1_DSTATE[11 * proc_control_B.jp1j +
            proc_control_B.C_tmp];
        }

        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
             proc_control_B.jp1j++) {
          proc_control_B.t65 =
            proc_control_B.TmpSignalConversionAtTransp[proc_control_B.jp1j];
          proc_control_B.jj = 13 * proc_control_B.C_tmp + proc_control_B.jp1j;
          proc_control_B.Y[proc_control_B.jj] = proc_control_B.t65;
          proc_control_B.X[proc_control_B.jj] = proc_control_B.t65;
          proc_control_B.DX[proc_control_B.jj] =
            proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.jp1j] -
            proc_control_B.t65;
        }
      }

      // End of MATLAB Function: '<S140>/MATLAB Function2'

      // MATLAB Function: '<S206>/FixedHorizonOptimizer'
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 3575;
           proc_control_B.jp1j++) {
        proc_control_B.b_C[proc_control_B.jp1j] = d_1[proc_control_B.jp1j];
      }

      std::memcpy(&proc_control_B.b_A[0], &e_0[0], 6875U * sizeof(real_T));
      std::memset(&proc_control_B.Bu[0], 0, 2200U * sizeof(real_T));
      std::memset(&proc_control_B.Bv[0], 0, 275U * sizeof(real_T));
      std::memset(&proc_control_B.Dv[0], 0, 143U * sizeof(real_T));
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 25;
           proc_control_B.jp1j++) {
        std::memcpy(&proc_control_B.b_A[proc_control_B.jp1j * 25],
                    &b_0[proc_control_B.jp1j * 25], 25U * sizeof(real_T));
        for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++)
        {
          proc_control_B.C_tmp = 13 * proc_control_B.jp1j + proc_control_B.jj;
          proc_control_B.b_C[proc_control_B.C_tmp] = d_0[proc_control_B.C_tmp];
        }
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        proc_control_B.iv1[proc_control_B.jp1j] = proc_control_B.jp1j + 1;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        proc_control_B.iv[proc_control_B.jp1j] = proc_control_B.jp1j + 1;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        proc_control_B.dv17[proc_control_B.jp1j] = 1.0;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        proc_control_B.z_cx[proc_control_B.jp1j] = 1.0;
      }

      std::memcpy(&proc_control_B.rtb_B_nh[0], &(*(real_T (*)[104])&
        proc_control_B.B[0])[0], 104U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_B[0], &c[0], 700U * sizeof(real_T));

      // MATLAB Function: '<S206>/FixedHorizonOptimizer'
      proc_c_mpc_plantupdate_2nNGk7pQ(&proc_control_B.A[0],
        proc_control_B.rtb_B_nh, &proc_control_B.C[0], &proc_control_B.b_A[0],
        proc_control_B.b_B, &proc_control_B.b_C[0], l_0, proc_control_B.iv1,
        proc_control_B.iv, proc_control_B.dv17, proc_control_B.z_cx,
        &proc_control_B.Bu[0], &proc_control_B.Bv[0], proc_control_B.b_C_j,
        &proc_control_B.Dv[0], proc_control_B.imz, proc_control_B.b_A_l,
        proc_control_B.A_f, proc_control_B.Nk);
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        proc_control_B.iv1[proc_control_B.jp1j] = proc_control_B.jp1j + 1;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        proc_control_B.iv[proc_control_B.jp1j] = proc_control_B.jp1j + 1;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        proc_control_B.dv17[proc_control_B.jp1j] = 1.0;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        proc_control_B.z_cx[proc_control_B.jp1j] = 1.0;
      }

      // Outputs for IfAction SubSystem: '<S133>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S136>/Action Port'

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S302>/Action Port'

      // SwitchCase: '<S9>/Switch Case' incorporates:
      //   MATLAB Function: '<S206>/FixedHorizonOptimizer'
      //   MATLABSystem: '<S136>/MATLAB System'
      //   MATLABSystem: '<S302>/MATLAB System1'

      proc_control_B.i = 0;
      proc_control_B.Ns_f = 0;
      proc_control_B.ibmat = 0;
      proc_control_B.c_l = 0;
      proc_control_B.Ns = 0;
      proc_control_B.i_j = 0;
      proc_control_B.i_g = 0;
      proc_control_B.i_l = 0;
      proc_control_B.i_k = 0;

      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      // End of Outputs for SubSystem: '<S133>/Adaptive MPC quaternion '

      // MATLAB Function: '<S206>/FixedHorizonOptimizer' incorporates:
      //   DiscretePulseGenerator: '<S140>/Pulse Generator'
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S239>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   MATLABSystem: '<S136>/MATLAB System'
      //   MATLABSystem: '<S302>/MATLAB System1'
      //   Merge generated from: '<S9>/Merge'
      //   SwitchCase: '<S9>/Switch Case'
      //
      for (proc_control_B.C_tmp = 0; proc_control_B.C_tmp < 10;
           proc_control_B.C_tmp++) {
        proc_control_B.jp1j = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 28; proc_control_B.jj++)
        {
          for (proc_control_B.jA = 0; proc_control_B.jA < 13; proc_control_B.jA
               ++) {
            proc_control_B.b_D_tmp = proc_control_B.jA + proc_control_B.jp1j;

            // Outputs for IfAction SubSystem: '<S133>/Adaptive MPC quaternion ' incorporates:
            //   ActionPort: '<S136>/Action Port'

            // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
            //   ActionPort: '<S302>/Action Port'

            proc_control_B.b_D[proc_control_B.b_D_tmp] = b_D
              [(proc_control_B.b_D_tmp + proc_control_B.i_k) + 364];

            // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
            // End of Outputs for SubSystem: '<S133>/Adaptive MPC quaternion '
          }

          proc_control_B.jp1j += 13;
        }

        // Outputs for IfAction SubSystem: '<S133>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S136>/Action Port'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S302>/Action Port'

        std::memcpy(&proc_control_B.rtb_B_nh[0], &(*(real_T (*)[104])&
          proc_control_B.B[proc_control_B.Ns_f + 104])[0], 104U * sizeof(real_T));
        std::memcpy(&proc_control_B.b_B[0], &(*(real_T (*)[700])&
          b_B[proc_control_B.c_l + 700])[0], 700U * sizeof(real_T));
        proc_c_mpc_plantupdate_2nNGk7pQ(&proc_control_B.A[proc_control_B.i + 169],
          proc_control_B.rtb_B_nh, &proc_control_B.C[proc_control_B.i + 169],
          &proc_control_B.b_A[proc_control_B.ibmat + 625], proc_control_B.b_B,
          &proc_control_B.b_C[proc_control_B.Ns + 325], proc_control_B.b_D,
          proc_control_B.iv1, proc_control_B.iv, proc_control_B.dv17,
          proc_control_B.z_cx, &proc_control_B.Bu[proc_control_B.i_j + 200],
          &proc_control_B.Bv[proc_control_B.i_g + 25], proc_control_B.b_C_j,
          &proc_control_B.Dv[proc_control_B.i_l + 13],
          proc_control_B.TmpSignalConversionAtTransp, proc_control_B.b_A_l,
          proc_control_B.A_f, proc_control_B.Nk);
        proc_control_B.i += 169;
        proc_control_B.Ns_f += 104;
        proc_control_B.ibmat += 625;
        proc_control_B.c_l += 700;
        proc_control_B.Ns += 325;
        proc_control_B.i_j += 200;
        proc_control_B.i_g += 25;
        proc_control_B.i_l += 13;
        proc_control_B.i_k += 364;

        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<S133>/Adaptive MPC quaternion '
      }

      std::memcpy(&proc_control_B.b_Mlim[0], &e[0], 252U * sizeof(real_T));
      std::memset(&proc_control_B.b_utarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_B.b_xoff[0], &f_0[0], 25U * sizeof(real_T));
      std::memcpy(&proc_control_B.U_a[0], &proc_control_B.useq_a[0], sizeof
                  (real_T) << 3U);
      std::memcpy(&proc_control_B.imz[0], &proc_control_B.Y[0], 13U * sizeof
                  (real_T));
      std::memcpy(&proc_control_B.u_scale[0], &proc_control_B.useq_a[0], sizeof
                  (real_T) << 3U);
      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 252;
           proc_control_B.ibmat++) {
        proc_control_B.t65 = proc_control_B.b_Mlim[proc_control_B.ibmat];
        proc_control_B.jp1j = b_Mrows[proc_control_B.ibmat];
        if (proc_control_B.jp1j <= 130) {
          proc_control_B.Ns_f = (proc_control_B.jp1j - div_nde_s32_floor
            (proc_control_B.jp1j - 1, proc_control_ny) * proc_control_ny) - 1;
          proc_control_B.t65 += old_yoff[proc_control_B.Ns_f] -
            proc_control_B.imz[proc_control_B.Ns_f];
        } else if (proc_control_B.jp1j <= 260) {
          proc_control_B.Ns_f = (proc_control_B.jp1j - div_nde_s32_floor
            (proc_control_B.jp1j - 131, proc_control_ny) * proc_control_ny) -
            131;
          proc_control_B.t65 -= old_yoff[proc_control_B.Ns_f] -
            proc_control_B.imz[proc_control_B.Ns_f];
        } else if (proc_control_B.jp1j <= 340) {
          proc_control_B.t65 += 0.0 - proc_control_B.U_a[(proc_control_B.jp1j -
            (((proc_control_B.jp1j - 261) >> 3) << 3)) - 261];
        } else {
          proc_control_B.t65 -= 0.0 - proc_control_B.U_a[(proc_control_B.jp1j -
            (((proc_control_B.jp1j - 341) >> 3) << 3)) - 341];
        }

        proc_control_B.b_Mlim[proc_control_B.ibmat] = proc_control_B.t65;
      }

      for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 8;
           proc_control_B.ibmat++) {
        proc_control_B.t65 = proc_control_B.U_a[proc_control_B.ibmat];
        proc_control_B.jp1j = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 10; proc_control_B.jj++)
        {
          proc_control_B.C_tmp = proc_control_B.jp1j + proc_control_B.ibmat;
          proc_control_B.b_utarget[proc_control_B.C_tmp] -= proc_control_B.t65;
          proc_control_B.jp1j += 8;
        }
      }

      std::memcpy(&proc_control_B.b_xoff[0], &proc_control_B.X[0], 13U * sizeof
                  (real_T));
      std::memcpy(&proc_control_B.Bv[0], &proc_control_B.DX[0], 13U * sizeof
                  (real_T));
      for (proc_control_B.jA = 0; proc_control_B.jA < 10; proc_control_B.jA++) {
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
             proc_control_B.jp1j++) {
          proc_control_B.TmpSignalConversionAtTransp[proc_control_B.jp1j] =
            proc_control_B.b_xoff[proc_control_B.jp1j] - proc_control_B.X
            [(proc_control_B.jA + 1) * 13 + proc_control_B.jp1j];
        }

        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8;
             proc_control_B.jp1j++) {
          proc_control_B.U_a[proc_control_B.jp1j] =
            proc_control_B.u_scale[proc_control_B.jp1j] - proc_control_B.useq_a
            [((proc_control_B.jA + 1) << 3) + proc_control_B.jp1j];
        }

        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
             proc_control_B.jp1j++) {
          proc_control_B.rtb_u2_n = 0.0;
          for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj
               ++) {
            proc_control_B.rtb_u2_n += proc_control_B.b_A[(25 *
              proc_control_B.jj + proc_control_B.jp1j) + (proc_control_B.jA + 1)
              * 625] *
              proc_control_B.TmpSignalConversionAtTransp[proc_control_B.jj];
          }

          proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.jp1j] = 0.0;
          for (proc_control_B.jj = 0; proc_control_B.jj < 8; proc_control_B.jj++)
          {
            proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.jp1j] +=
              proc_control_B.Bu[(25 * proc_control_B.jj + proc_control_B.jp1j) +
              (proc_control_B.jA + 1) * 200] *
              proc_control_B.U_a[proc_control_B.jj];
          }

          proc_control_B.C_tmp = (proc_control_B.jA + 1) * 13 +
            proc_control_B.jp1j;
          proc_control_B.Bv[proc_control_B.jp1j + 25 * (proc_control_B.jA + 1)] =
            (((proc_control_B.DX[proc_control_B.C_tmp] +
               proc_control_B.X[proc_control_B.C_tmp]) -
              proc_control_B.b_xoff[proc_control_B.jp1j]) +
             proc_control_B.rtb_u2_n) +
            proc_control_B.TmpSignalConversionAtMAT_lt[proc_control_B.jp1j];
          proc_control_B.rtb_u2_n = 0.0;
          for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj
               ++) {
            proc_control_B.rtb_u2_n += proc_control_B.b_C[(13 *
              proc_control_B.jj + proc_control_B.jp1j) + (proc_control_B.jA + 1)
              * 325] *
              proc_control_B.TmpSignalConversionAtTransp[proc_control_B.jj];
          }

          proc_control_B.Dv[proc_control_B.C_tmp] =
            (proc_control_B.Y[proc_control_B.C_tmp] -
             proc_control_B.imz[proc_control_B.jp1j]) + proc_control_B.rtb_u2_n;
        }
      }

      for (proc_control_B.jj = 0; proc_control_B.jj < 11; proc_control_B.jj++) {
        proc_control_B.vseq[proc_control_B.jj] = 1.0;
      }

      proc_control_B.jp1j = 0;
      for (proc_control_B.jA = 0; proc_control_B.jA < 10; proc_control_B.jA++) {
        proc_control_B.C_tmp = 0;
        for (proc_control_B.ibmat = 0; proc_control_B.ibmat < 13;
             proc_control_B.ibmat++) {
          proc_control_B.y_j[proc_control_B.ibmat + proc_control_B.jp1j] =
            proc_control_B.Reference[proc_control_B.C_tmp + proc_control_B.jA] -
            proc_control_B.imz[proc_control_B.ibmat];
          proc_control_B.C_tmp += 10;
        }

        proc_control_B.jp1j += 13;
      }

      // SignalConversion generated from: '<S207>/ SFunction ' incorporates:
      //   Constant: '<S140>/Constant'
      //   MATLAB Function: '<S206>/FixedHorizonOptimizer'

      proc_control_B.rtb_TmpSignalConversionAtMAT__n[0] =
        proc_control_B.WorldPosition[0] - proc_control_B.b_xoff[0];
      proc_control_B.rtb_TmpSignalConversionAtMAT__n[1] =
        proc_control_B.WorldPosition[1] - proc_control_B.b_xoff[1];
      proc_control_B.rtb_TmpSignalConversionAtMAT__n[2] =
        proc_control_B.WorldPosition[2] - proc_control_B.b_xoff[2];
      proc_control_B.rtb_TmpSignalConversionAtMAT__n[3] = proc_control_B.qS2W[0]
        - proc_control_B.b_xoff[3];
      proc_control_B.rtb_TmpSignalConversionAtMAT__n[4] = proc_control_B.qS2W[1]
        - proc_control_B.b_xoff[4];
      proc_control_B.rtb_TmpSignalConversionAtMAT__n[5] = proc_control_B.qS2W[2]
        - proc_control_B.b_xoff[5];
      proc_control_B.rtb_TmpSignalConversionAtMAT__n[6] = proc_control_B.qS2W[3]
        - proc_control_B.b_xoff[6];
      proc_control_B.rtb_TmpSignalConversionAtMAT__n[7] =
        proc_control_B.BodyVelocity[0] - proc_control_B.b_xoff[7];
      proc_control_B.rtb_TmpSignalConversionAtMAT__n[10] =
        proc_control_B.AngularRate[0] - proc_control_B.b_xoff[10];
      proc_control_B.rtb_TmpSignalConversionAtMAT__n[8] =
        proc_control_B.BodyVelocity[1] - proc_control_B.b_xoff[8];
      proc_control_B.rtb_TmpSignalConversionAtMAT__n[11] =
        proc_control_B.AngularRate[1] - proc_control_B.b_xoff[11];
      proc_control_B.rtb_TmpSignalConversionAtMAT__n[9] =
        proc_control_B.BodyVelocity[2] - proc_control_B.b_xoff[9];
      proc_control_B.rtb_TmpSignalConversionAtMAT__n[12] =
        proc_control_B.AngularRate[2] - proc_control_B.b_xoff[12];
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 12;
           proc_control_B.jp1j++) {
        proc_control_B.rtb_TmpSignalConversionAtMAT__n[proc_control_B.jp1j + 13]
          = proc_control_P.Constant_Value_ct[proc_control_B.jp1j] -
          proc_control_B.b_xoff[proc_control_B.jp1j + 13];
      }

      // End of SignalConversion generated from: '<S207>/ SFunction '

      // MATLAB Function: '<S206>/FixedHorizonOptimizer' incorporates:
      //   UnitDelay: '<S178>/last_mv'

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        proc_control_B.dv17[proc_control_B.jp1j] =
          proc_control_DW.last_mv_DSTATE[proc_control_B.jp1j] -
          proc_control_B.u_scale[proc_control_B.jp1j];
      }

      std::memset(&proc_control_B.dv1[0], 0, 2772U * sizeof(real_T));
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        proc_control_B.dv18[proc_control_B.jp1j] = 1.0;
      }

      std::memcpy(&proc_control_B.g[0], &g[0], 6300U * sizeof(real_T));
      std::memcpy(&proc_control_B.h[0], &h[0], 2016U * sizeof(real_T));
      std::memcpy(&proc_control_B.k[0], &k[0], 289U * sizeof(real_T));
      std::memcpy(&proc_control_B.l[0], &l[0], 4284U * sizeof(real_T));
      std::memcpy(&proc_control_B.bv[0], &proc_control_DW.Memory_PreviousInput[0],
                  252U * sizeof(boolean_T));

      // Merge: '<S133>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S140>/Pulse Generator'
      //   MATLAB Function: '<S206>/FixedHorizonOptimizer'
      //   MATLABSystem: '<S134>/MPC manager'
      //   Math: '<S178>/Math Function'
      //   Math: '<S178>/Math Function1'
      //   Math: '<S178>/Math Function2'
      //   Memory: '<S178>/Memory'
      //   SignalConversion generated from: '<S140>/out'
      //
      proc_contr_mpcblock_optimizer_d(proc_control_B.y_j, proc_control_B.vseq,
        proc_control_B.mvmin, proc_control_B.mvmax,
        proc_control_B.rtb_TmpSignalConversionAtMAT__n, proc_control_B.dv17,
        proc_control_B.bv, proc_control_B.b_Mlim, proc_control_B.g,
        proc_control_B.h, proc_control_B.dv1, proc_control_B.b_utarget,
        proc_control_B.u_scale, proc_control_B.k, proc_control_B.l,
        proc_control_B.ywt, proc_control_B.mvwt, proc_control_B.dmwwt, n, o,
        proc_control_B.b_A, proc_control_B.Bu, proc_control_B.Bv,
        proc_control_B.b_C, proc_control_B.Dv, b_Mrows, proc_control_B.dv18,
        proc_control_B.U_a, proc_control_B.useq_a, &proc_control_B.Merge[8],
        proc_control_DW.Memory_PreviousInput);
      proc_control_B.Merge[9] = (proc_control_DW.clockTickCounter_g <
        proc_control_P.PulseGenerator_Duty_j) &&
        (proc_control_DW.clockTickCounter_g >= 0) ?
        proc_control_P.PulseGenerator_Amp_i : 0.0;

      // DiscretePulseGenerator: '<S140>/Pulse Generator'
      if (proc_control_DW.clockTickCounter_g >=
          proc_control_P.PulseGenerator_Period_e - 1.0) {
        proc_control_DW.clockTickCounter_g = 0;
      } else {
        proc_control_DW.clockTickCounter_g++;
      }

      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.t65 = proc_control_B.U_a[proc_control_B.i];

        // SignalConversion generated from: '<S140>/out' incorporates:
        //   Gain: '<S178>/u_scale'
        //   Merge: '<S133>/Merge'

        proc_control_B.Merge[proc_control_B.i] =
          proc_control_P.u_scale_Gain_i[proc_control_B.i] * proc_control_B.t65;

        // Update for UnitDelay: '<S178>/last_mv' incorporates:
        //   SignalConversion generated from: '<S140>/out'

        proc_control_DW.last_mv_DSTATE[proc_control_B.i] = proc_control_B.t65;
      }

      // Update for Delay: '<S140>/Delay1' incorporates:
      //   Gain: '<S178>/u_scale'
      //   Gain: '<S178>/useq_scale'
      //   SignalConversion generated from: '<S140>/out'

      for (proc_control_B.i = 0; proc_control_B.i < 88; proc_control_B.i++) {
        proc_control_DW.Delay1_DSTATE[proc_control_B.i] =
          proc_control_P.useq_scale_Gain[proc_control_B.i] *
          proc_control_B.useq_a[proc_control_B.i];
      }

      // End of Update for Delay: '<S140>/Delay1'
      // End of Outputs for SubSystem: '<S133>/LTV MPC quaternion '
      break;

     case 3:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S133>/Quaternion Non linear MPC (Not for codegen)' incorporates:
        //   ActionPort: '<S141>/Action Port'

        // InitializeConditions for SwitchCase: '<S133>/Switch Case' incorporates:
        //   Delay: '<S141>/Delay'
        //   Delay: '<S211>/mv_Delay'
        //   Delay: '<S211>/slack_delay'
        //   Delay: '<S211>/x_Delay'
        //   DiscretePulseGenerator: '<S141>/Pulse Generator'

        std::memcpy(&proc_control_DW.Delay_DSTATE_a[0],
                    &proc_control_P.Delay_InitialCondition[0], sizeof(real_T) <<
                    3U);
        proc_control_DW.icLoad = true;
        proc_control_DW.icLoad_a = true;
        proc_control_DW.icLoad_j = true;
        proc_control_DW.clockTickCounter = 0;

        // End of InitializeConditions for SubSystem: '<S133>/Quaternion Non linear MPC (Not for codegen)' 
      }

      // Outputs for IfAction SubSystem: '<S133>/Quaternion Non linear MPC (Not for codegen)' incorporates:
      //   ActionPort: '<S141>/Action Port'

      // Reshape: '<S210>/Reshape'
      proc_control_B.CostFcn_workspace_runtimedata.x[0] =
        proc_control_B.WorldPosition[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[1] =
        proc_control_B.WorldPosition[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[2] =
        proc_control_B.WorldPosition[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[3] = proc_control_B.qS2W[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[4] = proc_control_B.qS2W[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[5] = proc_control_B.qS2W[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[6] = proc_control_B.qS2W[3];
      proc_control_B.CostFcn_workspace_runtimedata.x[7] =
        proc_control_B.BodyVelocity[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[10] =
        proc_control_B.AngularRate[0];
      proc_control_B.CostFcn_workspace_runtimedata.x[8] =
        proc_control_B.BodyVelocity[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[11] =
        proc_control_B.AngularRate[1];
      proc_control_B.CostFcn_workspace_runtimedata.x[9] =
        proc_control_B.BodyVelocity[2];
      proc_control_B.CostFcn_workspace_runtimedata.x[12] =
        proc_control_B.AngularRate[2];

      // Delay: '<S211>/mv_Delay' incorporates:
      //   Constant: '<S211>/ones'
      //   Delay: '<S141>/Delay'
      //   Product: '<S211>/Product'

      if (proc_control_DW.icLoad) {
        proc_control_B.jp1j = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 8; proc_control_B.jj++)
        {
          for (proc_control_B.jA = 0; proc_control_B.jA < 11; proc_control_B.jA
               ++) {
            proc_control_DW.mv_Delay_DSTATE[proc_control_B.jA +
              proc_control_B.jp1j] = proc_control_P.ones_Value[proc_control_B.jA]
              * proc_control_DW.Delay_DSTATE_a[proc_control_B.jj];
          }

          proc_control_B.jp1j += 11;
        }
      }

      // Selector: '<S211>/Selector1' incorporates:
      //   Constant: '<S211>/Constant1'
      //   Delay: '<S211>/mv_Delay'

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        for (proc_control_B.jj = 0; proc_control_B.jj < 9; proc_control_B.jj++)
        {
          proc_control_B.Selector1_n[proc_control_B.jj + 9 * proc_control_B.jp1j]
            = proc_control_DW.mv_Delay_DSTATE[(11 * proc_control_B.jp1j +
            static_cast<int32_T>
            (proc_control_P.Constant1_Value_i[proc_control_B.jj])) - 1];
        }
      }

      // End of Selector: '<S211>/Selector1'

      // Delay: '<S211>/x_Delay' incorporates:
      //   Constant: '<S211>/ones'
      //   Product: '<S211>/Product1'

      if (proc_control_DW.icLoad_a) {
        // Product: '<S211>/Product1' incorporates:
        //   Reshape: '<S211>/reshape_x'

        proc_control_B.z_cx[0] = proc_control_B.WorldPosition[0];
        proc_control_B.z_cx[1] = proc_control_B.WorldPosition[1];
        proc_control_B.z_cx[2] = proc_control_B.WorldPosition[2];
        proc_control_B.z_cx[3] = proc_control_B.qS2W[0];
        proc_control_B.z_cx[4] = proc_control_B.qS2W[1];
        proc_control_B.z_cx[5] = proc_control_B.qS2W[2];
        proc_control_B.z_cx[6] = proc_control_B.qS2W[3];
        proc_control_B.z_cx[7] = proc_control_B.BodyVelocity[0];
        proc_control_B.z_cx[10] = proc_control_B.AngularRate[0];
        proc_control_B.z_cx[8] = proc_control_B.BodyVelocity[1];
        proc_control_B.z_cx[11] = proc_control_B.AngularRate[1];
        proc_control_B.z_cx[9] = proc_control_B.BodyVelocity[2];
        proc_control_B.z_cx[12] = proc_control_B.AngularRate[2];
        proc_control_B.jp1j = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++)
        {
          for (proc_control_B.jA = 0; proc_control_B.jA < 11; proc_control_B.jA
               ++) {
            proc_control_DW.x_Delay_DSTATE[proc_control_B.jA +
              proc_control_B.jp1j] = proc_control_P.ones_Value[proc_control_B.jA]
              * proc_control_B.z_cx[proc_control_B.jj];
          }

          proc_control_B.jp1j += 11;
        }
      }

      // Selector: '<S211>/Selector' incorporates:
      //   Constant: '<S211>/Constant'
      //   Delay: '<S211>/x_Delay'

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 13;
           proc_control_B.jp1j++) {
        for (proc_control_B.jj = 0; proc_control_B.jj < 9; proc_control_B.jj++)
        {
          proc_control_B.Selector_o[proc_control_B.jj + 9 * proc_control_B.jp1j]
            = proc_control_DW.x_Delay_DSTATE[(11 * proc_control_B.jp1j +
            static_cast<int32_T>
            (proc_control_P.Constant_Value_cr[proc_control_B.jj])) - 1];
        }
      }

      // End of Selector: '<S211>/Selector'

      // Delay: '<S211>/slack_delay' incorporates:
      //   Constant: '<S209>/e.init_zero'

      if (proc_control_DW.icLoad_j) {
        proc_control_DW.slack_delay_DSTATE = proc_control_P.einit_zero_Value;
      }

      // MATLAB Function: '<S210>/NLMPC' incorporates:
      //   Delay: '<S141>/Delay'
      //   Delay: '<S211>/slack_delay'
      //   MATLABSystem: '<S134>/MPC manager'
      //   Merge generated from: '<S9>/Merge'
      //   Reshape: '<S210>/Reshape'
      //   Selector: '<S211>/Selector'
      //   Selector: '<S211>/Selector1'

      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++) {
        proc_control_B.CostFcn_workspace_runtimedata.OutputWeights[proc_control_B.jp1j]
          = proc_control_B.ywt[proc_control_B.jj];
        proc_control_B.jp1j += 10;
      }

      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++) {
        for (proc_control_B.jA = 0; proc_control_B.jA < 9; proc_control_B.jA++)
        {
          proc_control_B.CostFcn_workspace_runtimedata.OutputWeights
            [(proc_control_B.jA + proc_control_B.jp1j) + 1] =
            proc_control_B.ywt[proc_control_B.jj];
        }

        proc_control_B.jp1j += 10;
      }

      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 8; proc_control_B.jj++) {
        proc_control_B.CostFcn_workspace_runtimedata.MVWeights[proc_control_B.jp1j]
          = proc_control_B.mvwt[proc_control_B.jj];
        proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[proc_control_B.jp1j]
          = proc_control_B.dmwwt[proc_control_B.jj];
        proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.jp1j] =
          proc_control_B.mvmin[proc_control_B.jj];
        proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.jp1j] =
          proc_control_B.mvmax[proc_control_B.jj];
        proc_control_B.jp1j += 10;
      }

      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 8; proc_control_B.jj++) {
        for (proc_control_B.jA = 0; proc_control_B.jA < 9; proc_control_B.jA++)
        {
          proc_control_B.i = (proc_control_B.jA + proc_control_B.jp1j) + 1;
          proc_control_B.CostFcn_workspace_runtimedata.MVWeights[proc_control_B.i]
            = proc_control_B.mvwt[proc_control_B.jj];
          proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[proc_control_B.i]
            = proc_control_B.dmwwt[proc_control_B.jj];
          proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.i] =
            proc_control_B.mvmin[proc_control_B.jj];
          proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.i] =
            proc_control_B.mvmax[proc_control_B.jj];
        }

        proc_control_B.jp1j += 10;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 80;
           proc_control_B.jp1j++) {
        proc_control_B.b_utarget[proc_control_B.jp1j] = (rtMinusInf);
        proc_control_B.dv10[proc_control_B.jp1j] = (rtInf);
      }

      proc_control_znlmpc_getUBounds(proc_control_DW.Delay_DSTATE_a,
        proc_control_B.CostFcn_workspace_runtimedata.MVMin,
        proc_control_B.CostFcn_workspace_runtimedata.MVMax,
        proc_control_B.b_utarget, proc_control_B.dv10, proc_control_B.A_data,
        proc_control_B.k_size, proc_control_B.B_data_j, &proc_control_B.e_size);
      std::memcpy(&proc_control_B.CostFcn_workspace_runtimedata.lastMV[0],
                  &proc_control_DW.Delay_DSTATE_a[0], sizeof(real_T) << 3U);
      proc_control_B.CostFcn_workspace_runtimedata.ECRWeight = 100000.0;
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 130;
           proc_control_B.jp1j++) {
        proc_control_B.CostFcn_workspace_runtimedata.ref[proc_control_B.jp1j] =
          proc_control_B.Reference[proc_control_B.jp1j];
        proc_control_B.CostFcn_workspace_runtimedata.OutputMin[proc_control_B.jp1j]
          = d[proc_control_B.jp1j];
        proc_control_B.CostFcn_workspace_runtimedata.OutputMax[proc_control_B.jp1j]
          = f[proc_control_B.jp1j];
        proc_control_B.CostFcn_workspace_runtimedata.StateMin[proc_control_B.jp1j]
          = (rtMinusInf);
        proc_control_B.CostFcn_workspace_runtimedata.StateMax[proc_control_B.jp1j]
          = (rtInf);
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 80;
           proc_control_B.jp1j++) {
        proc_control_B.CostFcn_workspace_runtimedata.MVRateMin[proc_control_B.jp1j]
          = (rtMinusInf);
        proc_control_B.CostFcn_workspace_runtimedata.MVRateMax[proc_control_B.jp1j]
          = (rtInf);
        proc_control_B.CostFcn_workspace_runtimedata.MVScaledTarget[proc_control_B.jp1j]
          = 0.0;
      }

      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.x[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.x[0], 13U *
                  sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.lastMV[0],
                  &proc_control_DW.Delay_DSTATE_a[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.ref[0],
                  &proc_control_B.Reference[0], 130U * sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.OutputWeights[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.OutputWeights[0],
                  130U * sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.MVWeights[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.MVWeights[0],
                  80U * sizeof(real_T));
      std::memcpy(&proc_control_B.ConFcn_workspace_runtimedata.MVRateWeights[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.MVRateWeights[0],
                  80U * sizeof(real_T));
      proc_control_B.ConFcn_workspace_runtimedata.ECRWeight = 100000.0;
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 130;
           proc_control_B.jp1j++) {
        proc_control_B.ConFcn_workspace_runtimedata.OutputMin[proc_control_B.jp1j]
          = d[proc_control_B.jp1j];
        proc_control_B.ConFcn_workspace_runtimedata.OutputMax[proc_control_B.jp1j]
          = f[proc_control_B.jp1j];
        proc_control_B.ConFcn_workspace_runtimedata.StateMin[proc_control_B.jp1j]
          = (rtMinusInf);
        proc_control_B.ConFcn_workspace_runtimedata.StateMax[proc_control_B.jp1j]
          = (rtInf);
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 80;
           proc_control_B.jp1j++) {
        proc_control_B.ConFcn_workspace_runtimedata.MVMin[proc_control_B.jp1j] =
          proc_control_B.CostFcn_workspace_runtimedata.MVMin[proc_control_B.jp1j];
        proc_control_B.ConFcn_workspace_runtimedata.MVMax[proc_control_B.jp1j] =
          proc_control_B.CostFcn_workspace_runtimedata.MVMax[proc_control_B.jp1j];
        proc_control_B.ConFcn_workspace_runtimedata.MVRateMin[proc_control_B.jp1j]
          = (rtMinusInf);
        proc_control_B.ConFcn_workspace_runtimedata.MVRateMax[proc_control_B.jp1j]
          = (rtInf);
        proc_control_B.ConFcn_workspace_runtimedata.MVScaledTarget[proc_control_B.jp1j]
          = 0.0;
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        proc_control_B.expl_temp.MVIndex[proc_control_B.jp1j] =
          static_cast<real_T>(proc_control_B.jp1j) + 1.0;
      }

      proc_control_B.expl_temp.NumOfInputs = 8.0;
      proc_control_B.expl_temp.NumOfOutputs = 13.0;
      proc_control_B.expl_temp.NumOfStates = 13.0;
      proc_control_B.expl_temp.PredictionHorizon = 10.0;
      std::memset(&proc_control_B.expl_temp.MVTarget[0], 0, 80U * sizeof(real_T));
      std::memcpy(&proc_control_B.expl_temp.References[0],
                  &proc_control_B.Reference[0], 130U * sizeof(real_T));
      std::memcpy(&proc_control_B.expl_temp.LastMV[0],
                  &proc_control_DW.Delay_DSTATE_a[0], sizeof(real_T) << 3U);
      std::memcpy(&proc_control_B.expl_temp.CurrentStates[0],
                  &proc_control_B.CostFcn_workspace_runtimedata.x[0], 13U *
                  sizeof(real_T));
      proc_control_B.expl_temp.Ts = 0.1;
      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 9; proc_control_B.jj++) {
        proc_control_B.jA = 0;
        for (proc_control_B.i = 0; proc_control_B.i < 13; proc_control_B.i++) {
          proc_control_B.y_j[proc_control_B.i + proc_control_B.jp1j] =
            proc_control_B.Selector_o[proc_control_B.jA + proc_control_B.jj];
          proc_control_B.jA += 9;
        }

        proc_control_B.jp1j += 13;
      }

      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 13; proc_control_B.jj++) {
        proc_control_B.y_j[proc_control_B.jj + 117] =
          proc_control_B.Selector_o[proc_control_B.jp1j + 8];
        proc_control_B.jp1j += 9;
      }

      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 8; proc_control_B.jj++) {
        proc_control_B.jA = 0;
        for (proc_control_B.i = 0; proc_control_B.i < 9; proc_control_B.i++) {
          proc_control_B.b_utarget[proc_control_B.jA + proc_control_B.jj] =
            proc_control_B.Selector1_n[proc_control_B.i + proc_control_B.jp1j];
          proc_control_B.jA += 8;
        }

        proc_control_B.jp1j += 9;
      }

      proc_control_B.jp1j = 0;
      for (proc_control_B.jj = 0; proc_control_B.jj < 8; proc_control_B.jj++) {
        proc_control_B.b_utarget[proc_control_B.jj + 72] =
          proc_control_B.Selector1_n[proc_control_B.jp1j + 8];
        proc_control_B.jp1j += 9;
      }

      std::memset(&proc_control_B.a_d[0], 0, sizeof(real_T) << 4U);
      proc_control_B.jj = 0;
      for (proc_control_B.jA = 0; proc_control_B.jA < 80; proc_control_B.jA++) {
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 16;
             proc_control_B.jp1j++) {
          proc_control_B.a_d[proc_control_B.jp1j] += static_cast<real_T>
            (a[proc_control_B.jp1j + proc_control_B.jj]) *
            proc_control_B.b_utarget[proc_control_B.jA];
        }

        proc_control_B.jj += 16;
      }

      std::memset(&proc_control_B.b_utarget[0], 0, 80U * sizeof(real_T));
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        proc_control_B.dv17[proc_control_B.jp1j] = static_cast<real_T>
          (proc_control_B.jp1j) + 1.0;
      }

      std::memcpy(&proc_control_B.rtb_Selector_a[0], &proc_control_B.y_j[0],
                  130U * sizeof(real_T));
      std::memcpy(&proc_control_B.rtb_Selector_a[130], &proc_control_B.a_d[0],
                  sizeof(real_T) << 4U);
      proc_control_B.rtb_Selector_a[146] = proc_control_DW.slack_delay_DSTATE;
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 130;
           proc_control_B.jp1j++) {
        proc_control_B.dv9[proc_control_B.jp1j] = (rtMinusInf);
      }

      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 16;
           proc_control_B.jp1j++) {
        proc_control_B.dv9[proc_control_B.jp1j + 130] = (rtMinusInf);
      }

      proc_control_B.dv9[146] = 0.0;
      proc_control_fmincon(&proc_control_B.CostFcn_workspace_runtimedata, 0.1,
                           proc_control_B.CostFcn_workspace_runtimedata.x,
                           proc_control_DW.Delay_DSTATE_a,
                           proc_control_B.Reference, proc_control_B.b_utarget,
                           10.0, 13.0, 13.0, 8.0, proc_control_B.dv17,
                           proc_control_B.rtb_Selector_a, proc_control_B.A_data,
                           proc_control_B.B_data_j, &proc_control_B.e_size,
                           proc_control_B.dv9,
                           &proc_control_B.ConFcn_workspace_runtimedata,
                           &proc_control_B.expl_temp, proc_control_B.z,
                           &proc_control_B.d, &proc_control_B.MATLABSystem_o6,
                           &proc_control_B.scale, &proc_control_B.absxk,
                           expl_temp, &proc_control_B.t, &proc_control_B.t15,
                           &proc_control_B.t16, &proc_control_B.t63);
      if ((proc_control_B.MATLABSystem_o6 == 0.0) && (proc_control_B.t > 0.02))
      {
        proc_control_B.MATLABSystem_o6 = -2.0;
      }

      // Update for Delay: '<S211>/slack_delay' incorporates:
      //   MATLAB Function: '<S210>/NLMPC'
      //   Reshape: '<S210>/Reshape'

      proc_control_znlmpc_getXUe(proc_control_B.z,
        proc_control_B.CostFcn_workspace_runtimedata.x, proc_control_B.Dv,
        proc_control_B.useq_a, &proc_control_DW.slack_delay_DSTATE);

      // MATLAB Function: '<S210>/NLMPC' incorporates:
      //   Delay: '<S141>/Delay'

      if (proc_control_B.MATLABSystem_o6 > 0.0) {
        proc_control_B.jp1j = 0;
        for (proc_control_B.jj = 0; proc_control_B.jj < 8; proc_control_B.jj++)
        {
          proc_control_B.u_scale[proc_control_B.jj] =
            proc_control_B.useq_a[proc_control_B.jp1j];
          proc_control_B.jp1j += 11;
        }
      } else {
        std::memcpy(&proc_control_B.u_scale[0], &proc_control_DW.Delay_DSTATE_a
                    [0], sizeof(real_T) << 3U);
      }

      // Merge: '<S133>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S141>/Pulse Generator'

      proc_control_B.Merge[9] = (proc_control_DW.clockTickCounter <
        proc_control_P.PulseGenerator_Duty_f) &&
        (proc_control_DW.clockTickCounter >= 0) ?
        proc_control_P.PulseGenerator_Amp_p : 0.0;

      // DiscretePulseGenerator: '<S141>/Pulse Generator'
      if (proc_control_DW.clockTickCounter >=
          proc_control_P.PulseGenerator_Period_e5 - 1.0) {
        proc_control_DW.clockTickCounter = 0;
      } else {
        proc_control_DW.clockTickCounter++;
      }

      // Merge: '<S133>/Merge' incorporates:
      //   MATLAB Function: '<S210>/NLMPC'
      //   SignalConversion generated from: '<S141>/out'

      proc_control_B.Merge[8] = proc_control_B.MATLABSystem_o6;
      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.d = proc_control_B.u_scale[proc_control_B.i];
        proc_control_B.Merge[proc_control_B.i] = proc_control_B.d;

        // Update for Delay: '<S141>/Delay'
        proc_control_DW.Delay_DSTATE_a[proc_control_B.i] = proc_control_B.d;
      }

      // Update for Delay: '<S211>/mv_Delay' incorporates:
      //   MATLAB Function: '<S210>/NLMPC'

      proc_control_DW.icLoad = false;
      std::memcpy(&proc_control_DW.mv_Delay_DSTATE[0], &proc_control_B.useq_a[0],
                  88U * sizeof(real_T));

      // Update for Delay: '<S211>/x_Delay' incorporates:
      //   MATLAB Function: '<S210>/NLMPC'

      proc_control_DW.icLoad_a = false;
      std::memcpy(&proc_control_DW.x_Delay_DSTATE[0], &proc_control_B.Dv[0],
                  143U * sizeof(real_T));

      // Update for Delay: '<S211>/slack_delay'
      proc_control_DW.icLoad_j = false;

      // End of Outputs for SubSystem: '<S133>/Quaternion Non linear MPC (Not for codegen)' 
      break;

     default:
      // Outputs for IfAction SubSystem: '<S133>/IDLE' incorporates:
      //   ActionPort: '<S138>/Action Port'

      // Merge: '<S133>/Merge' incorporates:
      //   Constant: '<S138>/Constant'
      //   Constant: '<S138>/Constant1'
      //   Constant: '<S138>/Constant2'
      //   SignalConversion generated from: '<S138>/out'

      std::memcpy(&proc_control_B.Merge[0], &proc_control_P.Constant1_Value_n[0],
                  sizeof(real_T) << 3U);
      proc_control_B.Merge[8] = proc_control_P.Constant_Value_mg;
      proc_control_B.Merge[9] = proc_control_P.Constant2_Value_p;

      // End of Outputs for SubSystem: '<S133>/IDLE'
      break;
    }

    // Sum: '<S135>/Sum' incorporates:
    //   Delay: '<S135>/Delay'

    proc_control_B.MATLABSystem_o6 = proc_control_DW.Delay_DSTATE_k -
      proc_control_B.Merge[9];

    // Saturate: '<S135>/PSU safe'
    for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
      proc_control_B.t65 = proc_control_B.Merge[proc_control_B.i];
      if (proc_control_B.t65 > proc_control_P.PSUsafe_UpperSat) {
        proc_control_B.u_scale[proc_control_B.i] =
          proc_control_P.PSUsafe_UpperSat;
      } else if (proc_control_B.t65 < proc_control_P.PSUsafe_LowerSat) {
        proc_control_B.u_scale[proc_control_B.i] =
          proc_control_P.PSUsafe_LowerSat;
      } else {
        proc_control_B.u_scale[proc_control_B.i] = proc_control_B.t65;
      }
    }

    // End of Saturate: '<S135>/PSU safe'

    // Lookup_n-D: '<S135>/N to A' incorporates:
    //   Saturate: '<S135>/PSU safe'

    for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
      proc_control_B.bpIdx = plook_u32d_binckpang
        (proc_control_B.u_scale[proc_control_B.i], proc_control_P.N, 200U,
         &proc_control_DW.m_bpIndex[proc_control_B.i]);
      proc_control_B.current[proc_control_B.i] =
        proc_control_P.A[proc_control_B.bpIdx];
    }

    // Lookup_n-D: '<S135>/N to PWM' incorporates:
    //   Saturate: '<S135>/PSU safe'

    for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
      proc_control_B.bpIdx = plook_u32d_binckpang
        (proc_control_B.u_scale[proc_control_B.i], proc_control_P.N, 200U,
         &proc_control_DW.m_bpIndex_c[proc_control_B.i]);
      proc_control_B.pwm[proc_control_B.i] =
        proc_control_P.PWM[proc_control_B.bpIdx];
    }

    // Update for Delay: '<S7>/Delay' incorporates:
    //   Lookup_n-D: '<S135>/N to A'

    for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
      proc_control_DW.Delay_DSTATE_g[proc_control_B.i] =
        proc_control_B.current[proc_control_B.i];
    }

    // End of Update for Delay: '<S7>/Delay'

    // Update for Delay: '<S135>/Delay'
    proc_control_DW.Delay_DSTATE_k = proc_control_B.Merge[9];

    // End of Outputs for SubSystem: '<Root>/Subsystem Controller'

    // Outputs for Enabled SubSystem: '<Root>/Send Data to ROS' incorporates:
    //   EnablePort: '<S5>/Enable'

    if (proc_control_B.MATLABSystem_o7 > 0.0) {
      if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
        // MATLAB Function: '<S5>/MATLAB Function3' incorporates:
        //   Constant: '<S107>/Constant'

        proc_control_B.msg_h = proc_control_P.Constant_Value_c;
        for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8;
             proc_control_B.jp1j++) {
          proc_control_B.msg_h.Data[proc_control_B.jp1j] =
            proc_control_B.pwm[proc_control_B.jp1j];
        }

        proc_control_B.msg_h.Data_SL_Info.CurrentLength = 8U;

        // End of MATLAB Function: '<S5>/MATLAB Function3'

        // Outputs for Atomic SubSystem: '<S5>/Publish2'
        // MATLABSystem: '<S109>/SinkBlock'
        Pub_proc_control_104.publish(&proc_control_B.msg_h);

        // End of Outputs for SubSystem: '<S5>/Publish2'
      }

      if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
        // Outputs for Atomic SubSystem: '<S5>/Subsystem'
        // MATLAB Function: '<S110>/MATLAB Function' incorporates:
        //   Constant: '<S110>/Constant'
        //   Constant: '<S110>/Constant1'
        //   Constant: '<S111>/Constant'
        //   DataTypeConversion: '<S135>/Data Type Conversion3'
        //   MATLABSystem: '<S134>/MPC manager'

        proc_control_B.msg = proc_control_P.Constant_Value_o;
        proc_control_B.msg.TargetReached = proc_control_B.isReached;
        proc_control_B.msg.IsTrajectoryDone = proc_control_B.isTrajDone;
        proc_control_B.msg.MpcMode = proc_control_B.DataTypeConversion_j;

        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        proc_control_B.msg.IsMpcAlive = (proc_control_B.MATLABSystem_o6 != 0.0);

        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
        if (proc_control_P.Constant1_Value_d < 1.0) {
          proc_control_B.jp1j = -1;
        } else {
          proc_control_B.jp1j = static_cast<int32_T>
            (proc_control_P.Constant1_Value_d) - 1;
        }

        proc_control_B.ibmat = proc_control_B.jp1j + 1;
        if (proc_control_B.ibmat - 1 >= 0) {
          std::memcpy(&proc_control_B.msg.ThrustersStatus[0],
                      &proc_control_B.thrustersStatus[0], proc_control_B.ibmat *
                      sizeof(boolean_T));
        }

        proc_control_B.rtb_u2_n = std::round(proc_control_P.Constant1_Value_d);
        if (proc_control_B.rtb_u2_n < 4.294967296E+9) {
          if (proc_control_B.rtb_u2_n >= 0.0) {
            proc_control_B.msg.ThrustersStatus_SL_Info.CurrentLength =
              static_cast<uint32_T>(proc_control_B.rtb_u2_n);
          } else {
            proc_control_B.msg.ThrustersStatus_SL_Info.CurrentLength = 0U;
          }
        } else {
          proc_control_B.msg.ThrustersStatus_SL_Info.CurrentLength =
            MAX_uint32_T;
        }

        proc_control_B.AngularRate_a_idx_1 = std::round(proc_control_B.Merge[8]);
        if (proc_control_B.AngularRate_a_idx_1 < 128.0) {
          if (proc_control_B.AngularRate_a_idx_1 >= -128.0) {
            proc_control_B.msg.MpcStatus = static_cast<int8_T>
              (proc_control_B.AngularRate_a_idx_1);
          } else {
            proc_control_B.msg.MpcStatus = MIN_int8_T;
          }
        } else {
          proc_control_B.msg.MpcStatus = MAX_int8_T;
        }

        if (proc_control_P.Constant_Value_lo < 1.0) {
          proc_control_B.jp1j = -1;
        } else {
          proc_control_B.jp1j = static_cast<int32_T>
            (proc_control_P.Constant_Value_lo) - 1;
        }

        proc_control_B.Ns_f = proc_control_B.jp1j + 1;
        if (proc_control_B.Ns_f - 1 >= 0) {
          std::memcpy(&proc_control_B.msg.CurrentGains.OV[0],
                      &proc_control_B.ywt[0], proc_control_B.Ns_f * sizeof
                      (real_T));
        }

        proc_control_B.AngularRate_a_idx_1 = std::round
          (proc_control_P.Constant_Value_lo);
        if (proc_control_B.AngularRate_a_idx_1 < 4.294967296E+9) {
          if (proc_control_B.AngularRate_a_idx_1 >= 0.0) {
            proc_control_B.msg.CurrentGains.OV_SL_Info.CurrentLength =
              static_cast<uint32_T>(proc_control_B.AngularRate_a_idx_1);
          } else {
            proc_control_B.msg.CurrentGains.OV_SL_Info.CurrentLength = 0U;
          }
        } else {
          proc_control_B.msg.CurrentGains.OV_SL_Info.CurrentLength =
            MAX_uint32_T;
        }

        if (proc_control_P.Constant1_Value_d < 1.0) {
          proc_control_B.jp1j = -1;
        } else {
          proc_control_B.jp1j = static_cast<int32_T>
            (proc_control_P.Constant1_Value_d) - 1;
        }

        proc_control_B.ibmat = proc_control_B.jp1j + 1;
        if (proc_control_B.ibmat - 1 >= 0) {
          std::memcpy(&proc_control_B.msg.CurrentGains.MV[0],
                      &proc_control_B.mvwt[0], proc_control_B.ibmat * sizeof
                      (real_T));
        }

        if (proc_control_B.rtb_u2_n < 4.294967296E+9) {
          if (proc_control_B.rtb_u2_n >= 0.0) {
            proc_control_B.msg.CurrentGains.MV_SL_Info.CurrentLength =
              static_cast<uint32_T>(proc_control_B.rtb_u2_n);
          } else {
            proc_control_B.msg.CurrentGains.MV_SL_Info.CurrentLength = 0U;
          }
        } else {
          proc_control_B.msg.CurrentGains.MV_SL_Info.CurrentLength =
            MAX_uint32_T;
        }

        if (proc_control_P.Constant1_Value_d < 1.0) {
          proc_control_B.jp1j = -1;
        } else {
          proc_control_B.jp1j = static_cast<int32_T>
            (proc_control_P.Constant1_Value_d) - 1;
        }

        proc_control_B.ibmat = proc_control_B.jp1j + 1;
        if (proc_control_B.ibmat - 1 >= 0) {
          std::memcpy(&proc_control_B.msg.CurrentGains.MVR[0],
                      &proc_control_B.dmwwt[0], proc_control_B.ibmat * sizeof
                      (real_T));
        }

        if (proc_control_B.rtb_u2_n < 4.294967296E+9) {
          if (proc_control_B.rtb_u2_n >= 0.0) {
            proc_control_B.msg.CurrentGains.MVR_SL_Info.CurrentLength =
              static_cast<uint32_T>(proc_control_B.rtb_u2_n);
          } else {
            proc_control_B.msg.CurrentGains.MVR_SL_Info.CurrentLength = 0U;
          }
        } else {
          proc_control_B.msg.CurrentGains.MVR_SL_Info.CurrentLength =
            MAX_uint32_T;
        }

        // End of MATLAB Function: '<S110>/MATLAB Function'

        // Outputs for Atomic SubSystem: '<S110>/Publish5'
        // MATLABSystem: '<S113>/SinkBlock'
        Pub_proc_control_287.publish(&proc_control_B.msg);

        // End of Outputs for SubSystem: '<S110>/Publish5'
        // End of Outputs for SubSystem: '<S5>/Subsystem'
      }

      if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
        // SignalConversion generated from: '<S5>/thrust' incorporates:
        //   Saturate: '<S135>/PSU safe'
        //   SignalConversion generated from: '<S5>/mv'

        std::memcpy(&proc_control_B.BufferToMakeInportVirtual_Inser[0],
                    &proc_control_B.u_scale[0], sizeof(real_T) << 3U);
        for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
          // SignalConversion generated from: '<S5>/mv' incorporates:
          //   Lookup_n-D: '<S135>/N to PWM'

          proc_control_B.BufferToMakeInportVirtual_Ins_e[proc_control_B.i] =
            proc_control_B.pwm[proc_control_B.i];
        }
      }
    }

    // End of Outputs for SubSystem: '<Root>/Send Data to ROS'

    // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
    //   EnablePort: '<S1>/Enable'

    proc_control_DW.ModlePhysique_MODE = (proc_control_B.MATLABSystem_o3 > 0.0);

    // End of Outputs for SubSystem: '<Root>/Modèle Physique'
  }

  // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
  //   EnablePort: '<S1>/Enable'

  if (proc_control_DW.ModlePhysique_MODE) {
    if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
      // MATLAB Function: '<S11>/MATLAB Function1'
      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        uint16_T rtb_current;
        rtb_current =
          proc_control_B.BufferToMakeInportVirtual_Ins_e[proc_control_B.i];
        if (rtb_current < 1100) {
          rtb_current = 1500U;
        } else if (rtb_current > 1900) {
          rtb_current = 1500U;
        }

        proc_control_B.current[proc_control_B.i] = rtb_current;
      }

      // End of MATLAB Function: '<S11>/MATLAB Function1'

      // Lookup_n-D: '<S11>/ PWM to N'
      for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
        proc_control_B.bpIdx = plook_u32u16_binckpan
          (proc_control_B.current[proc_control_B.i], proc_control_P.PWM, 200U,
           &proc_control_DW.m_bpIndex_m[proc_control_B.i]);
        proc_control_B.PWMtoN[proc_control_B.i] =
          proc_control_P.N[proc_control_B.bpIdx];
      }
    }

    // DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
    proc_control_B.MATLABSystem_o7 = (proc_control_B.PWMtoN[0] -
      proc_control_P.DiscreteTransferFcn1_DenCoef[1] *
      proc_control_DW.DiscreteTransferFcn1_states_e) /
      proc_control_P.DiscreteTransferFcn1_DenCoef[0];

    // DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
    proc_control_B.od_f = (proc_control_B.PWMtoN[1] -
      proc_control_P.DiscreteTransferFcn1_DenCoef_n[1] *
      proc_control_DW.DiscreteTransferFcn1_states_k) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_n[0];

    // DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
    proc_control_B.t3 = (proc_control_B.PWMtoN[2] -
                         proc_control_P.DiscreteTransferFcn1_DenCoef_m[1] *
                         proc_control_DW.DiscreteTransferFcn1_states_o) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_m[0];

    // DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
    proc_control_B.t4 = (proc_control_B.PWMtoN[3] -
                         proc_control_P.DiscreteTransferFcn1_DenCoef_b[1] *
                         proc_control_DW.DiscreteTransferFcn1_states_i) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_b[0];

    // DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
    proc_control_B.t24 = (proc_control_B.PWMtoN[4] -
                          proc_control_P.DiscreteTransferFcn1_DenCoef_l[1] *
                          proc_control_DW.DiscreteTransferFcn1_states_g) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_l[0];

    // DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
    proc_control_B.t26 = (proc_control_B.PWMtoN[5] -
                          proc_control_P.DiscreteTransferFcn1_DenCoef_l0[1] *
                          proc_control_DW.DiscreteTransferFcn1_states_h) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_l0[0];

    // DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
    proc_control_B.t27 = (proc_control_B.PWMtoN[6] -
                          proc_control_P.DiscreteTransferFcn1_DenCoef_a[1] *
                          proc_control_DW.DiscreteTransferFcn1_states_l) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_a[0];

    // DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
    proc_control_B.t29 = (proc_control_B.PWMtoN[7] -
                          proc_control_P.DiscreteTransferFcn1_DenCoef_g[1] *
                          proc_control_DW.DiscreteTransferFcn1_states_ge) /
      proc_control_P.DiscreteTransferFcn1_DenCoef_g[0];

    // SignalConversion generated from: '<S1>/MATLAB System' incorporates:
    //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
    //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'

    proc_control_B.u_scale[0] = proc_control_P.DiscreteTransferFcn1_NumCoef[0] *
      proc_control_B.MATLABSystem_o7 +
      proc_control_P.DiscreteTransferFcn1_NumCoef[1] *
      proc_control_DW.DiscreteTransferFcn1_states_e;
    proc_control_B.u_scale[1] = proc_control_P.DiscreteTransferFcn1_NumCoef_k[0]
      * proc_control_B.od_f + proc_control_P.DiscreteTransferFcn1_NumCoef_k[1] *
      proc_control_DW.DiscreteTransferFcn1_states_k;
    proc_control_B.u_scale[2] = proc_control_P.DiscreteTransferFcn1_NumCoef_n[0]
      * proc_control_B.t3 + proc_control_P.DiscreteTransferFcn1_NumCoef_n[1] *
      proc_control_DW.DiscreteTransferFcn1_states_o;
    proc_control_B.u_scale[3] = proc_control_P.DiscreteTransferFcn1_NumCoef_e[0]
      * proc_control_B.t4 + proc_control_P.DiscreteTransferFcn1_NumCoef_e[1] *
      proc_control_DW.DiscreteTransferFcn1_states_i;
    proc_control_B.u_scale[4] = proc_control_P.DiscreteTransferFcn1_NumCoef_b[0]
      * proc_control_B.t24 + proc_control_P.DiscreteTransferFcn1_NumCoef_b[1] *
      proc_control_DW.DiscreteTransferFcn1_states_g;
    proc_control_B.u_scale[5] = proc_control_P.DiscreteTransferFcn1_NumCoef_i[0]
      * proc_control_B.t26 + proc_control_P.DiscreteTransferFcn1_NumCoef_i[1] *
      proc_control_DW.DiscreteTransferFcn1_states_h;
    proc_control_B.u_scale[6] = proc_control_P.DiscreteTransferFcn1_NumCoef_c[0]
      * proc_control_B.t27 + proc_control_P.DiscreteTransferFcn1_NumCoef_c[1] *
      proc_control_DW.DiscreteTransferFcn1_states_l;
    proc_control_B.u_scale[7] = proc_control_P.DiscreteTransferFcn1_NumCoef_m[0]
      * proc_control_B.t29 + proc_control_P.DiscreteTransferFcn1_NumCoef_m[1] *
      proc_control_DW.DiscreteTransferFcn1_states_ge;
    if ((&proc_control_M)->Timing.TaskCounters.TID[5] == 0) {
      // UniformRandomNumber: '<S12>/ Drift' incorporates:
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S239>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S135>/N to A'
      //   Lookup_n-D: '<S135>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   Trigonometry: '<S267>/sincos'
      //   Trigonometry: '<S40>/sincos'

      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S238>/Enable'

        // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
        //   EnablePort: '<S266>/Enable'

        proc_control_B.Drift[proc_control_B.i] =
          proc_control_DW.Drift_NextOutput[proc_control_B.i];

        // End of Outputs for SubSystem: '<S263>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      }
    }

    // Switch: '<S12>/Switch' incorporates:
    //   Constant: '<Root>/Constant'
    //   Constant: '<S12>/Constant2'
    //   Product: '<S12>/Product1'
    //   Sin: '<S12>/Sine Wave'
    //   Sum: '<S12>/Sum2'

    if (proc_control_P.Constant_Value_de >= proc_control_P.Switch_Threshold) {
      // Sum: '<S12>/Add' incorporates:
      //   Constant: '<S12>/Constant'
      //   Constant: '<S12>/Constant1'
      //   Product: '<S12>/Product'
      //   UnitDelay: '<S1>/Unit Delay'

      proc_control_B.t60 = proc_control_DW.UnitDelay_DSTATE[2] *
        proc_control_P.Constant_Value_h0 + proc_control_P.Constant1_Value;

      // Saturate: '<S12>/Saturation'
      if (proc_control_B.t60 > proc_control_P.Saturation_UpperSat) {
        proc_control_B.t60 = proc_control_P.Saturation_UpperSat;
      } else if (proc_control_B.t60 < proc_control_P.Saturation_LowerSat) {
        proc_control_B.t60 = proc_control_P.Saturation_LowerSat;
      }

      // End of Saturate: '<S12>/Saturation'
      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        proc_control_B.TSamp_j[proc_control_B.i] = (std::sin((static_cast<real_T>
          (proc_control_DW.counter[proc_control_B.i]) +
          proc_control_P.SineWave_Offset[proc_control_B.i]) * 2.0 *
          3.1415926535897931 /
          proc_control_P.waveDiscreteFrequency[proc_control_B.i]) *
          proc_control_P.SineWave_Amp[proc_control_B.i] +
          proc_control_P.SineWave_Bias) * proc_control_B.t60 +
          proc_control_B.Drift[proc_control_B.i];
      }
    } else {
      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        proc_control_B.TSamp_j[proc_control_B.i] =
          proc_control_P.Constant2_Value[proc_control_B.i];
      }
    }

    // End of Switch: '<S12>/Switch'

    // MATLABSystem: '<S1>/MATLAB System' incorporates:
    //   UnitDelay: '<S1>/Unit Delay'

    //  Implement algorithm. Calculate y as a function of input u and
    //  discrete states.
    proc_co_AUV7QuatPerturbedSimFcn(proc_control_DW.UnitDelay_DSTATE,
      proc_control_B.TSamp_j, proc_control_B.u_scale,
      proc_control_B.TmpSignalConversionAtTransp);

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'
    //   MATLABSystem: '<S1>/MATLAB System'

    if (proc_control_DW.DiscreteTimeIntegrator_IC_LOADI != 0) {
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[0] =
        proc_control_B.MATLABSystem_o2[0];
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[1] =
        proc_control_B.MATLABSystem_o2[1];
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[2] =
        proc_control_B.MATLABSystem_o2[2];
    }

    if ((proc_control_B.MATLABSystem_o4 > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator_PrevRese <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[0] =
        proc_control_B.MATLABSystem_o2[0];
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[1] =
        proc_control_B.MATLABSystem_o2[1];
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[2] =
        proc_control_B.MATLABSystem_o2[2];
    }

    proc_control_B.rtb_u2_n = proc_control_P.DiscreteTimeIntegrator_gainval *
      proc_control_B.TmpSignalConversionAtTransp[0];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_B.WorldPosition_n[0] =
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[0] +
      proc_control_B.rtb_u2_n;
    proc_control_B.u2[0] = proc_control_B.rtb_u2_n;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.rtb_u2_n = proc_control_P.DiscreteTimeIntegrator_gainval *
      proc_control_B.TmpSignalConversionAtTransp[1];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_B.WorldPosition_n[1] =
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[1] +
      proc_control_B.rtb_u2_n;
    proc_control_B.u2[1] = proc_control_B.rtb_u2_n;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.rtb_u2_n = proc_control_P.DiscreteTimeIntegrator_gainval *
      proc_control_B.TmpSignalConversionAtTransp[2];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_B.WorldPosition_n[2] =
      proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[2] +
      proc_control_B.rtb_u2_n;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   Constant: '<S1>/Initial Angular Rates'
    //   MATLABSystem: '<S1>/MATLAB System'

    if ((proc_control_B.MATLABSystem_o4 > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator1_PrevRes <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] =
        proc_control_P.InitialAngularRates_Value[0];
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] =
        proc_control_P.InitialAngularRates_Value[1];
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] =
        proc_control_P.InitialAngularRates_Value[2];
    }

    proc_control_B.t58 = proc_control_P.DiscreteTimeIntegrator1_gainval *
      proc_control_B.TmpSignalConversionAtTransp[10];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'
    proc_control_B.t62 = proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] +
      proc_control_B.t58;
    proc_control_B.c_k[0] = proc_control_B.t58;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t58 = proc_control_P.DiscreteTimeIntegrator1_gainval *
      proc_control_B.TmpSignalConversionAtTransp[11];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'
    proc_control_B.AngularRate_a_idx_1 =
      proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] + proc_control_B.t58;
    proc_control_B.c_k[1] = proc_control_B.t58;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t58 = proc_control_P.DiscreteTimeIntegrator1_gainval *
      proc_control_B.TmpSignalConversionAtTransp[12];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'
    proc_control_B.t39 = proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] +
      proc_control_B.t58;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'
    //   MATLABSystem: '<S1>/MATLAB System'

    if (proc_control_DW.DiscreteTimeIntegrator2_IC_LOAD != 0) {
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] =
        proc_control_B.MATLABSystem_o1[0];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] =
        proc_control_B.MATLABSystem_o1[1];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] =
        proc_control_B.MATLABSystem_o1[2];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[3] =
        proc_control_B.MATLABSystem_o1[3];
    }

    if ((proc_control_B.MATLABSystem_o4 > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator2_PrevRes <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] =
        proc_control_B.MATLABSystem_o1[0];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] =
        proc_control_B.MATLABSystem_o1[1];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] =
        proc_control_B.MATLABSystem_o1[2];
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[3] =
        proc_control_B.MATLABSystem_o1[3];
    }

    proc_control_B.t40 = proc_control_P.DiscreteTimeIntegrator2_gainval *
      proc_control_B.TmpSignalConversionAtTransp[3];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_B.TmpSignalConversionAtSFunct[0] =
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] + proc_control_B.t40;
    proc_control_B.n[0] = proc_control_B.t40;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t40 = proc_control_P.DiscreteTimeIntegrator2_gainval *
      proc_control_B.TmpSignalConversionAtTransp[4];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_B.TmpSignalConversionAtSFunct[1] =
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] + proc_control_B.t40;
    proc_control_B.n[1] = proc_control_B.t40;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t40 = proc_control_P.DiscreteTimeIntegrator2_gainval *
      proc_control_B.TmpSignalConversionAtTransp[5];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_B.TmpSignalConversionAtSFunct[2] =
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] + proc_control_B.t40;
    proc_control_B.n[2] = proc_control_B.t40;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t40 = proc_control_P.DiscreteTimeIntegrator2_gainval *
      proc_control_B.TmpSignalConversionAtTransp[6];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_B.TmpSignalConversionAtSFunct[3] =
      proc_control_DW.DiscreteTimeIntegrator2_DSTATE[3] + proc_control_B.t40;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S1>/Initial Body velocity '
    //   MATLABSystem: '<S1>/MATLAB System'

    if ((proc_control_B.MATLABSystem_o4 > 0.0) &&
        (proc_control_DW.DiscreteTimeIntegrator3_PrevRes <= 0)) {
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] =
        proc_control_P.InitialBodyvelocity_Value[0];
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] =
        proc_control_P.InitialBodyvelocity_Value[1];
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] =
        proc_control_P.InitialBodyvelocity_Value[2];
    }

    proc_control_B.t41 = proc_control_P.DiscreteTimeIntegrator3_gainval *
      proc_control_B.TmpSignalConversionAtTransp[7];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3'
    proc_control_B.t43 = proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] +
      proc_control_B.t41;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.t44 = proc_control_B.t41;
    proc_control_B.t41 = proc_control_P.DiscreteTimeIntegrator3_gainval *
      proc_control_B.TmpSignalConversionAtTransp[8];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3'
    proc_control_B.t45 = proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] +
      proc_control_B.t41;

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   MATLABSystem: '<S1>/MATLAB System'

    proc_control_B.oa_tmp = proc_control_B.t41;
    proc_control_B.t41 = proc_control_P.DiscreteTimeIntegrator3_gainval *
      proc_control_B.TmpSignalConversionAtTransp[9];

    // DiscreteIntegrator: '<S1>/Discrete-Time Integrator3'
    proc_control_B.BodyVelocity_c_idx_2 =
      proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] + proc_control_B.t41;

    // Lookup_n-D: '<S16>/N to RPM'
    for (proc_control_B.i = 0; proc_control_B.i < 8; proc_control_B.i++) {
      proc_control_B.bpIdx = plook_u32d_binckpan
        (proc_control_B.u_scale[proc_control_B.i], proc_control_P.N, 200U,
         &proc_control_DW.m_bpIndex_cj[proc_control_B.i]);
      proc_control_B.NtoRPM[proc_control_B.i] = static_cast<int16_T>
        (proc_control_P.RPM[proc_control_B.bpIdx]);
    }

    for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j++)
    {
      // Signum: '<S16>/Sign' incorporates:
      //   Product: '<S16>/Product'

      proc_control_B.t65 = proc_control_B.u_scale[proc_control_B.jp1j];
      if (!std::isnan(proc_control_B.t65)) {
        if (proc_control_B.t65 < 0.0) {
          proc_control_B.t65 = -1.0;
        } else {
          proc_control_B.t65 = (proc_control_B.t65 > 0.0);
        }
      }

      // End of Signum: '<S16>/Sign'

      // Product: '<S16>/Product'
      proc_control_B.NtoRPM[proc_control_B.jp1j] = static_cast<int16_T>(std::
        floor(static_cast<real_T>(proc_control_B.NtoRPM[proc_control_B.jp1j]) *
              proc_control_B.t65));
    }

    if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
      // MATLAB Function: '<S16>/MATLAB Function3' incorporates:
      //   Constant: '<S25>/Constant'

      proc_control_B.msg_p = proc_control_P.Constant_Value_m;
      for (proc_control_B.jp1j = 0; proc_control_B.jp1j < 8; proc_control_B.jp1j
           ++) {
        proc_control_B.msg_p.Data[proc_control_B.jp1j] =
          proc_control_B.NtoRPM[proc_control_B.jp1j];
      }

      proc_control_B.msg_p.Data_SL_Info.CurrentLength = 8U;

      // End of MATLAB Function: '<S16>/MATLAB Function3'

      // Outputs for Atomic SubSystem: '<S16>/Publish2'
      // MATLABSystem: '<S27>/SinkBlock'
      Pub_proc_control_19_1361.publish(&proc_control_B.msg_p);

      // End of Outputs for SubSystem: '<S16>/Publish2'
    }

    // MATLAB Function: '<S1>/Quaternion Normalise'
    proc_control_B.scale = 3.3121686421112381E-170;
    proc_control_B.absxk = std::abs(proc_control_B.TmpSignalConversionAtSFunct[0]);
    if (proc_control_B.absxk > 3.3121686421112381E-170) {
      proc_control_B.d = 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / 3.3121686421112381E-170;
      proc_control_B.d = proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = std::abs(proc_control_B.TmpSignalConversionAtSFunct[1]);
    if (proc_control_B.absxk > proc_control_B.scale) {
      proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
      proc_control_B.d = proc_control_B.d * proc_control_B.t * proc_control_B.t
        + 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
      proc_control_B.d += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = std::abs(proc_control_B.TmpSignalConversionAtSFunct[2]);
    if (proc_control_B.absxk > proc_control_B.scale) {
      proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
      proc_control_B.d = proc_control_B.d * proc_control_B.t * proc_control_B.t
        + 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
      proc_control_B.d += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.absxk = std::abs(proc_control_B.TmpSignalConversionAtSFunct[3]);
    if (proc_control_B.absxk > proc_control_B.scale) {
      proc_control_B.t = proc_control_B.scale / proc_control_B.absxk;
      proc_control_B.d = proc_control_B.d * proc_control_B.t * proc_control_B.t
        + 1.0;
      proc_control_B.scale = proc_control_B.absxk;
    } else {
      proc_control_B.t = proc_control_B.absxk / proc_control_B.scale;
      proc_control_B.d += proc_control_B.t * proc_control_B.t;
    }

    proc_control_B.d = proc_control_B.scale * std::sqrt(proc_control_B.d);
    proc_control_B.y_d[0] = proc_control_B.TmpSignalConversionAtSFunct[0] /
      proc_control_B.d;
    proc_control_B.y_d[1] = proc_control_B.TmpSignalConversionAtSFunct[1] /
      proc_control_B.d;
    proc_control_B.y_d[2] = proc_control_B.TmpSignalConversionAtSFunct[2] /
      proc_control_B.d;
    proc_control_B.y_d[3] = proc_control_B.TmpSignalConversionAtSFunct[3] /
      proc_control_B.d;

    // End of MATLAB Function: '<S1>/Quaternion Normalise'

    // Gain: '<S28>/Output' incorporates:
    //   RandomNumber: '<S28>/White Noise'

    proc_control_B.t60 = std::sqrt(proc_control_P.BandLimitedWhiteNoise_Cov) /
      0.1414213562373095 * proc_control_DW.NextOutput;

    // Gain: '<S29>/Output' incorporates:
    //   RandomNumber: '<S29>/White Noise'

    proc_control_B.Product5 = std::sqrt
      (proc_control_P.BandLimitedWhiteNoise1_Cov) / 0.1414213562373095 *
      proc_control_DW.NextOutput_b;

    // Gain: '<S30>/Output' incorporates:
    //   RandomNumber: '<S30>/White Noise'

    proc_control_B.t6 = std::sqrt(proc_control_P.BandLimitedWhiteNoise2_Cov) /
      0.1414213562373095 * proc_control_DW.NextOutput_g;

    // Gain: '<S32>/Output' incorporates:
    //   RandomNumber: '<S32>/White Noise'

    proc_control_B.t65 = std::sqrt(proc_control_P.BandLimitedWhiteNoise4_Cov) /
      0.1414213562373095 * proc_control_DW.NextOutput_e;

    // Product: '<S52>/Product1' incorporates:
    //   MATLABSystem: '<S33>/MATLAB System'

    proc_control_B.t69 = proc_control_B.y_d[1] * proc_control_B.y_d[1];

    // Product: '<S52>/Product2' incorporates:
    //   MATLABSystem: '<S33>/MATLAB System'

    proc_control_B.t63 = proc_control_B.y_d[2] * proc_control_B.y_d[2];

    // Product: '<S52>/Product3' incorporates:
    //   MATLABSystem: '<S33>/MATLAB System'

    proc_control_B.t16 = proc_control_B.y_d[3] * proc_control_B.y_d[3];

    // Product: '<S52>/Product' incorporates:
    //   Product: '<S46>/Product'

    proc_control_B.t57_tmp = proc_control_B.y_d[0] * proc_control_B.y_d[0];

    // Sqrt: '<S51>/sqrt' incorporates:
    //   MATLAB Function: '<S14>/MATLAB Function'
    //   Product: '<S52>/Product'
    //   Product: '<S52>/Product1'
    //   Product: '<S52>/Product2'
    //   Product: '<S52>/Product3'
    //   Sum: '<S52>/Sum'

    proc_control_B.t57_tmp_h = std::sqrt(((proc_control_B.t57_tmp +
      proc_control_B.t69) + proc_control_B.t63) + proc_control_B.t16);

    // Product: '<S47>/Product1' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.Divide_i = proc_control_B.y_d[1] / proc_control_B.t57_tmp_h;

    // Product: '<S47>/Product3' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.Product8 = proc_control_B.y_d[3] / proc_control_B.t57_tmp_h;

    // Product: '<S50>/Product'
    proc_control_B.MATLABSystem_o6 = proc_control_B.Divide_i *
      proc_control_B.Product8;

    // Product: '<S47>/Product' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.Product1_gp = proc_control_B.y_d[0] /
      proc_control_B.t57_tmp_h;

    // Product: '<S47>/Product2' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.od = proc_control_B.y_d[2] / proc_control_B.t57_tmp_h;

    // Product: '<S50>/Product1'
    proc_control_B.d = proc_control_B.Product1_gp * proc_control_B.od;

    // Product: '<S50>/Product2'
    proc_control_B.scale = proc_control_B.Product1_gp * proc_control_B.Divide_i;

    // Product: '<S50>/Product3'
    proc_control_B.absxk = proc_control_B.od * proc_control_B.Product8;

    // Product: '<S50>/Product6'
    proc_control_B.t = proc_control_B.Divide_i * proc_control_B.Divide_i;

    // Product: '<S50>/Product7'
    proc_control_B.t15 = proc_control_B.od * proc_control_B.od;

    // Gain: '<S40>/1//2' incorporates:
    //   Constant: '<S14>/ y devant Z haut'

    proc_control_B.oc = proc_control_P.u2_Gain *
      proc_control_P.physics.dvlRotation[0];

    // Trigonometry: '<S40>/sincos'
    proc_control_B.rtb_Sum6_idx_0 = std::sin(proc_control_B.oc);
    proc_control_B.sincos_o2[0] = std::cos(proc_control_B.oc);

    // Gain: '<S40>/1//2' incorporates:
    //   Constant: '<S14>/ y devant Z haut'

    proc_control_B.oc = proc_control_P.u2_Gain *
      proc_control_P.physics.dvlRotation[1];

    // Trigonometry: '<S40>/sincos'
    proc_control_B.rtb_Sum6_idx_1 = std::sin(proc_control_B.oc);
    proc_control_B.sincos_o2[1] = std::cos(proc_control_B.oc);

    // Gain: '<S40>/1//2' incorporates:
    //   Constant: '<S14>/ y devant Z haut'

    proc_control_B.oc = proc_control_P.u2_Gain *
      proc_control_P.physics.dvlRotation[2];

    // Trigonometry: '<S40>/sincos'
    proc_control_B.rtb_Sum6_idx_2 = std::sin(proc_control_B.oc);
    proc_control_B.sincos_o2[2] = std::cos(proc_control_B.oc);

    // Fcn: '<S40>/q2' incorporates:
    //   Fcn: '<S40>/q1'

    proc_control_B.oc = proc_control_B.sincos_o2[0] *
      proc_control_B.rtb_Sum6_idx_1;
    proc_control_B.Product8 = proc_control_B.rtb_Sum6_idx_0 *
      proc_control_B.sincos_o2[1];
    proc_control_B.od = proc_control_B.oc * proc_control_B.sincos_o2[2] -
      proc_control_B.Product8 * proc_control_B.rtb_Sum6_idx_2;

    // Fcn: '<S40>/q0' incorporates:
    //   Fcn: '<S40>/q3'

    proc_control_B.oa = proc_control_B.sincos_o2[0] * proc_control_B.sincos_o2[1];
    proc_control_B.ob = proc_control_B.rtb_Sum6_idx_0 *
      proc_control_B.rtb_Sum6_idx_1;
    proc_control_B.Divide_i = proc_control_B.oa * proc_control_B.sincos_o2[2] -
      proc_control_B.ob * proc_control_B.rtb_Sum6_idx_2;

    // Fcn: '<S40>/q1'
    proc_control_B.Product8 = proc_control_B.oc * proc_control_B.rtb_Sum6_idx_2
      + proc_control_B.Product8 * proc_control_B.sincos_o2[2];

    // Fcn: '<S40>/q3'
    proc_control_B.Product1_gp = proc_control_B.oa *
      proc_control_B.rtb_Sum6_idx_2 + proc_control_B.ob *
      proc_control_B.sincos_o2[2];

    // Sqrt: '<S57>/sqrt' incorporates:
    //   Product: '<S58>/Product'
    //   Product: '<S58>/Product1'
    //   Product: '<S58>/Product2'
    //   Product: '<S58>/Product3'
    //   Sum: '<S58>/Sum'

    proc_control_B.Product2_j = std::sqrt(((proc_control_B.Divide_i *
      proc_control_B.Divide_i + proc_control_B.Product8 *
      proc_control_B.Product8) + proc_control_B.od * proc_control_B.od) +
      proc_control_B.Product1_gp * proc_control_B.Product1_gp);

    // Product: '<S53>/Product2'
    proc_control_B.od /= proc_control_B.Product2_j;

    // Product: '<S53>/Product3'
    proc_control_B.Product1_gp /= proc_control_B.Product2_j;

    // Product: '<S53>/Product1'
    proc_control_B.Product8 /= proc_control_B.Product2_j;

    // Product: '<S53>/Product'
    proc_control_B.Divide_i /= proc_control_B.Product2_j;

    // Product: '<S54>/Product7' incorporates:
    //   Product: '<S55>/Product7'

    proc_control_B.oc = proc_control_B.Product1_gp * proc_control_B.Product1_gp;

    // Product: '<S54>/Product' incorporates:
    //   Product: '<S55>/Product'

    proc_control_B.oa = proc_control_B.Product8 * proc_control_B.od;

    // Product: '<S54>/Product1' incorporates:
    //   Product: '<S55>/Product1'

    proc_control_B.ob = proc_control_B.Divide_i * proc_control_B.Product1_gp;

    // Product: '<S54>/Product3' incorporates:
    //   Product: '<S56>/Product'

    proc_control_B.Product2_j = proc_control_B.Product8 *
      proc_control_B.Product1_gp;

    // Product: '<S54>/Product2' incorporates:
    //   Product: '<S56>/Product1'

    proc_control_B.rtb_Sum6_idx_2 = proc_control_B.Divide_i * proc_control_B.od;

    // Product: '<S54>/Product6' incorporates:
    //   Product: '<S56>/Product7'

    proc_control_B.rtb_Sum6_idx_1 = proc_control_B.od * proc_control_B.od;

    // MATLABSystem: '<S14>/Divide by Constant and Round1' incorporates:
    //   Constant: '<S54>/Constant'
    //   Gain: '<S54>/Gain'
    //   Gain: '<S54>/Gain1'
    //   Gain: '<S54>/Gain2'
    //   Product: '<S54>/Product'
    //   Product: '<S54>/Product1'
    //   Product: '<S54>/Product2'
    //   Product: '<S54>/Product3'
    //   Product: '<S54>/Product4'
    //   Product: '<S54>/Product5'
    //   Product: '<S54>/Product6'
    //   Product: '<S54>/Product7'
    //   Product: '<S54>/Product8'
    //   Sum: '<S14>/Sum2'
    //   Sum: '<S54>/Sum'
    //   Sum: '<S54>/Sum1'
    //   Sum: '<S54>/Sum2'
    //   Sum: '<S54>/Sum3'

    proc_control_B.sincos_o2[0] = std::floor
      ((((((proc_control_P.Constant_Value_k2 - proc_control_B.rtb_Sum6_idx_1) -
           proc_control_B.oc) * proc_control_P.Gain2_Gain_d * proc_control_B.t43
          + (proc_control_B.oa + proc_control_B.ob) * proc_control_P.Gain_Gain_j
          * proc_control_B.t45) + (proc_control_B.Product2_j -
          proc_control_B.rtb_Sum6_idx_2) * proc_control_P.Gain1_Gain_e *
         proc_control_B.BodyVelocity_c_idx_2) + proc_control_B.t6) * 1000.0 +
       0.5);

    // Product: '<S55>/Product3' incorporates:
    //   Product: '<S56>/Product3'

    proc_control_B.od *= proc_control_B.Product1_gp;

    // Product: '<S55>/Product2' incorporates:
    //   Product: '<S56>/Product2'

    proc_control_B.Divide_i *= proc_control_B.Product8;

    // Product: '<S55>/Product6' incorporates:
    //   Product: '<S56>/Product6'

    proc_control_B.Product8 *= proc_control_B.Product8;

    // MATLABSystem: '<S14>/Divide by Constant and Round1' incorporates:
    //   Constant: '<S55>/Constant'
    //   Constant: '<S56>/Constant'
    //   Gain: '<S55>/Gain'
    //   Gain: '<S55>/Gain1'
    //   Gain: '<S55>/Gain2'
    //   Gain: '<S56>/Gain'
    //   Gain: '<S56>/Gain1'
    //   Gain: '<S56>/Gain2'
    //   Product: '<S55>/Product2'
    //   Product: '<S55>/Product3'
    //   Product: '<S55>/Product4'
    //   Product: '<S55>/Product5'
    //   Product: '<S55>/Product6'
    //   Product: '<S55>/Product8'
    //   Product: '<S56>/Product4'
    //   Product: '<S56>/Product5'
    //   Product: '<S56>/Product8'
    //   Sum: '<S14>/Sum2'
    //   Sum: '<S55>/Sum'
    //   Sum: '<S55>/Sum1'
    //   Sum: '<S55>/Sum2'
    //   Sum: '<S55>/Sum3'
    //   Sum: '<S56>/Sum'
    //   Sum: '<S56>/Sum1'
    //   Sum: '<S56>/Sum2'
    //   Sum: '<S56>/Sum3'

    proc_control_B.sincos_o2[1] = std::floor
      ((((((proc_control_P.Constant_Value_gp - proc_control_B.Product8) -
           proc_control_B.oc) * proc_control_P.Gain2_Gain_l * proc_control_B.t45
          + (proc_control_B.oa - proc_control_B.ob) * proc_control_P.Gain_Gain_e
          * proc_control_B.t43) + (proc_control_B.Divide_i + proc_control_B.od) *
         proc_control_P.Gain1_Gain_eg * proc_control_B.BodyVelocity_c_idx_2) +
        proc_control_B.t6) * 1000.0 + 0.5);
    proc_control_B.sincos_o2[2] = std::floor(((((proc_control_B.Product2_j +
      proc_control_B.rtb_Sum6_idx_2) * proc_control_P.Gain_Gain_m *
      proc_control_B.t43 + (proc_control_B.od - proc_control_B.Divide_i) *
      proc_control_P.Gain1_Gain_g * proc_control_B.t45) +
      ((proc_control_P.Constant_Value_iw - proc_control_B.Product8) -
       proc_control_B.rtb_Sum6_idx_1) * proc_control_P.Gain2_Gain_b *
      proc_control_B.BodyVelocity_c_idx_2) + proc_control_B.t6) * 1000.0 + 0.5);

    // Gain: '<S14>/Gain' incorporates:
    //   Constant: '<S14>/Constant'
    //   Constant: '<S50>/Constant'
    //   Gain: '<S31>/Output'
    //   Gain: '<S50>/Gain'
    //   Gain: '<S50>/Gain1'
    //   Gain: '<S50>/Gain2'
    //   MATLABSystem: '<S14>/Divide by Constant and Round'
    //   Product: '<S50>/Product4'
    //   Product: '<S50>/Product5'
    //   Product: '<S50>/Product8'
    //   RandomNumber: '<S31>/White Noise'
    //   Sum: '<S14>/Sum'
    //   Sum: '<S14>/Sum4'
    //   Sum: '<S50>/Sum'
    //   Sum: '<S50>/Sum1'
    //   Sum: '<S50>/Sum2'
    //   Sum: '<S50>/Sum3'

    proc_control_B.PressureDepth = std::floor
      ((((((proc_control_B.MATLABSystem_o6 + proc_control_B.d) *
           proc_control_P.Gain_Gain * proc_control_P.physics.DepthPose[0] +
           (proc_control_B.absxk - proc_control_B.scale) *
           proc_control_P.Gain1_Gain * proc_control_P.physics.DepthPose[1]) +
          ((proc_control_P.Constant_Value_mj - proc_control_B.t) -
           proc_control_B.t15) * proc_control_P.Gain2_Gain *
          proc_control_P.physics.DepthPose[2]) + proc_control_B.WorldPosition_n
         [2]) + std::sqrt(proc_control_P.BandLimitedWhiteNoise3_Cov) /
        0.1414213562373095 * proc_control_DW.NextOutput_l) * 1000.0 + 0.5) *
      proc_control_P.Gain_Gain_n;

    // Outputs for Atomic SubSystem: '<S33>/Subscribe'
    // MATLABSystem: '<S42>/SourceBlock'
    rtb_Merge = Sub_proc_control_19_1385.getLatestMessage
      (&proc_control_B.b_varargout_2_n);

    // Outputs for Enabled SubSystem: '<S42>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S44>/Enable'

    // MATLABSystem: '<S33>/MATLAB System' incorporates:
    //   DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    //   MATLABSystem: '<S42>/SourceBlock'

    if (rtb_Merge) {
      proc_control_DW.obj_fj.pingerPosition = proc_control_B.b_varargout_2_n;
    }

    // End of Outputs for SubSystem: '<S42>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S33>/Subscribe'
    //  Ajout du bruit sur la position du pinger.
    proc_control_rand(proc_control_B.u2_j);
    proc_control_B.rtb_Sum6_idx_0 = proc_control_B.u2_j[0] * 0.0 +
      proc_control_DW.obj_fj.pingerPosition.X;
    proc_control_B.rtb_Sum6_idx_1 = proc_control_B.u2_j[1] * 0.0 +
      proc_control_DW.obj_fj.pingerPosition.Y;
    proc_control_B.rtb_Sum6_idx_2 = proc_control_B.u2_j[2] * 0.0 +
      proc_control_DW.obj_fj.pingerPosition.Z;

    //  Calculer les angles des hydros.
    // pinger2hydroAngles
    //     T__H_N = pinger2hydroAngles(IN1,IN2,IN3,IN4)
    //     This function was generated by the Symbolic Math Toolbox version 9.0. 
    //     02-Mar-2022 21:23:59
    proc_control_B.t5 = proc_control_B.y_d[1] * proc_control_B.y_d[2] * 2.0;
    proc_control_B.t6 = proc_control_B.y_d[1] * proc_control_B.y_d[3] * 2.0;
    proc_control_B.oc = proc_control_B.y_d[2] * proc_control_B.y_d[3] * 2.0;
    proc_control_B.ob = proc_control_B.y_d[0] * proc_control_B.y_d[1] * 2.0;
    proc_control_B.oa = proc_control_B.y_d[0] * proc_control_B.y_d[2] * 2.0;
    proc_control_B.od = proc_control_B.y_d[0] * proc_control_B.y_d[3] * 2.0;
    proc_control_B.n_c = proc_control_B.t69 * 2.0;
    proc_control_B.Product8 = proc_control_B.t63 * 2.0;
    proc_control_B.Divide_i = proc_control_B.t16 * 2.0;
    proc_control_B.Product2_j = proc_control_B.t5 + proc_control_B.od;
    proc_control_B.t69 = proc_control_B.t6 + proc_control_B.oa;
    proc_control_B.scale = proc_control_B.oc + proc_control_B.ob;
    proc_control_B.absxk = proc_control_B.t5 + -proc_control_B.od;
    proc_control_B.Product1_gp = proc_control_B.t6 + -proc_control_B.oa;
    proc_control_B.theta0 = proc_control_B.oc + -proc_control_B.ob;
    proc_control_B.oa_f = (proc_control_B.n_c + proc_control_B.Product8) - 1.0;
    proc_control_B.oc = (proc_control_B.n_c + proc_control_B.Divide_i) - 1.0;
    proc_control_B.ob_i = (proc_control_B.Product8 + proc_control_B.Divide_i) -
      1.0;
    proc_control_B.t15 = proc_control_B.rtb_Sum6_idx_1 * proc_control_B.oc;
    proc_control_B.t6 = ((0.155 * proc_control_B.t69 +
                          proc_control_B.WorldPosition_n[0]) + 0.0 *
                         proc_control_B.absxk) + -(0.16 * proc_control_B.ob_i);
    proc_control_B.od = ((0.16 * proc_control_B.Product2_j +
                          proc_control_B.WorldPosition_n[1]) + 0.155 *
                         proc_control_B.theta0) + -(0.0 * proc_control_B.oc);
    proc_control_B.t52 = ((0.0 * proc_control_B.scale +
      proc_control_B.WorldPosition_n[2]) + 0.16 * proc_control_B.Product1_gp) +
      -(0.155 * proc_control_B.oa_f);
    proc_control_B.t16 = proc_control_B.scale * proc_control_B.t52;
    proc_control_B.d = proc_control_B.absxk * proc_control_B.t6;
    proc_control_B.Divide_i = proc_control_B.oc * proc_control_B.od;
    proc_control_B.t63 = ((((proc_control_B.rtb_Sum6_idx_0 * proc_control_B.t69
      + proc_control_B.rtb_Sum6_idx_1 * proc_control_B.theta0) +
      -(proc_control_B.rtb_Sum6_idx_2 * proc_control_B.oa_f)) +
      -(proc_control_B.t69 * proc_control_B.t6)) + -(proc_control_B.theta0 *
      proc_control_B.od)) + proc_control_B.oa_f * proc_control_B.t52;
    proc_control_B.Product1_gp = ((((proc_control_B.rtb_Sum6_idx_1 *
      proc_control_B.Product2_j + proc_control_B.rtb_Sum6_idx_2 *
      proc_control_B.Product1_gp) + -(proc_control_B.rtb_Sum6_idx_0 *
      proc_control_B.ob_i)) + -(proc_control_B.Product2_j * proc_control_B.od))
      + -(proc_control_B.Product1_gp * proc_control_B.t52)) +
      proc_control_B.ob_i * proc_control_B.t6;
    proc_control_B.t6 = std::abs(proc_control_B.t63);
    proc_control_B.oc = proc_control_B.rtb_Sum6_idx_2 * proc_control_B.scale +
      proc_control_B.rtb_Sum6_idx_0 * proc_control_B.absxk;
    proc_control_B.od = std::abs((((proc_control_B.oc + -proc_control_B.t15) +
      -proc_control_B.t16) + -proc_control_B.d) + proc_control_B.Divide_i);
    proc_control_B.Product8 = std::abs(proc_control_B.Product1_gp);
    proc_control_B.t6 = std::sqrt((proc_control_B.t6 * proc_control_B.t6 +
      proc_control_B.od * proc_control_B.od) + proc_control_B.Product8 *
      proc_control_B.Product8);

    // MATLABSystem: '<S33>/MATLAB System'
    proc_control_B.MATLABSystem_o2_k[0] = rt_atan2d_snf((((proc_control_B.oc -
      proc_control_B.t15) - proc_control_B.t16) - proc_control_B.d) +
      proc_control_B.Divide_i, proc_control_B.Product1_gp);
    proc_control_B.MATLABSystem_o2_k[1] = std::acos(proc_control_B.t63 /
      proc_control_B.t6);
    proc_control_B.MATLABSystem_o2_k[2] = proc_control_B.t6;

    // ZeroOrderHold: '<S33>/Zero-Order Hold'
    if ((&proc_control_M)->Timing.TaskCounters.TID[3] == 0) {
      // Outputs for Atomic SubSystem: '<S33>/Publish'
      // MATLABSystem: '<S41>/SinkBlock' incorporates:
      //   MATLABSystem: '<S33>/MATLAB System'

      Pub_proc_control_19_1384.publish(&proc_control_DW.obj_fj.pingerPosition);

      // End of Outputs for SubSystem: '<S33>/Publish'
    }

    // End of ZeroOrderHold: '<S33>/Zero-Order Hold'

    // Sum: '<S46>/Sum' incorporates:
    //   Product: '<S46>/Product1'
    //   Product: '<S46>/Product2'
    //   Product: '<S46>/Product3'
    //   UnaryMinus: '<S36>/Unary Minus'
    //   UnaryMinus: '<S36>/Unary Minus1'
    //   UnaryMinus: '<S36>/Unary Minus2'

    proc_control_B.MATLABSystem_o6 = ((-proc_control_B.y_d[1] *
      -proc_control_B.y_d[1] + proc_control_B.t57_tmp) + -proc_control_B.y_d[2] *
      -proc_control_B.y_d[2]) + -proc_control_B.y_d[3] * -proc_control_B.y_d[3];

    // Product: '<S34>/Divide'
    proc_control_B.Divide_i = proc_control_B.y_d[0] /
      proc_control_B.MATLABSystem_o6;

    // Product: '<S34>/Divide1' incorporates:
    //   UnaryMinus: '<S36>/Unary Minus'

    proc_control_B.d = proc_control_B.y_d[1] / proc_control_B.MATLABSystem_o6;

    // Product: '<S34>/Divide2' incorporates:
    //   UnaryMinus: '<S36>/Unary Minus1'

    proc_control_B.t6 = proc_control_B.y_d[2] / proc_control_B.MATLABSystem_o6;

    // Product: '<S34>/Divide3' incorporates:
    //   UnaryMinus: '<S36>/Unary Minus2'

    proc_control_B.MATLABSystem_o6 = proc_control_B.y_d[3] /
      proc_control_B.MATLABSystem_o6;

    // MATLAB Function: '<S14>/MATLAB Function' incorporates:
    //   Gain: '<S14>/Gain1'
    //   MATLABSystem: '<S14>/Divide by Constant and Round1'

    proc_control_B.y_e[0] = proc_control_P.Gain1_Gain_h *
      proc_control_B.sincos_o2[0];
    proc_control_B.y_e[1] = proc_control_P.Gain1_Gain_h *
      proc_control_B.sincos_o2[1];
    proc_control_B.y_e[2] = proc_control_P.Gain1_Gain_h *
      proc_control_B.sincos_o2[2];
    proc_control_B.od = 1.0 / proc_control_B.t57_tmp_h;
    proc_control_B.t15 = proc_control_B.y_d[0] * proc_control_B.od;
    proc_control_B.t16 = proc_control_B.y_d[1] * proc_control_B.od;
    proc_control_B.t63 = proc_control_B.y_d[2] * proc_control_B.od;
    proc_control_B.od *= proc_control_B.y_d[3];
    proc_control_B.scale = (proc_control_B.t16 * proc_control_B.od -
      proc_control_B.t15 * proc_control_B.t63) * -2.0;
    rtb_Reset = (proc_control_B.scale >= 0.99999999999999778);
    rtb_NewDvlMsg = (proc_control_B.scale <= -0.99999999999999778);
    if (proc_control_B.scale >= 0.99999999999999778) {
      proc_control_B.scale = 1.0;
    }

    if (rtb_NewDvlMsg) {
      proc_control_B.scale = -1.0;
    }

    proc_control_B.oc = proc_control_B.t15 * proc_control_B.t15;
    proc_control_B.oa = proc_control_B.t16 * proc_control_B.t16;
    proc_control_B.ob = proc_control_B.t63 * proc_control_B.t63;
    proc_control_B.Product2_j = proc_control_B.od * proc_control_B.od;
    proc_control_B.sincos_o2[0] = rt_atan2d_snf((proc_control_B.t16 *
      proc_control_B.t63 + proc_control_B.t15 * proc_control_B.od) * 2.0,
      ((proc_control_B.oc + proc_control_B.oa) - proc_control_B.ob) -
      proc_control_B.Product2_j);
    proc_control_B.sincos_o2[1] = std::asin(proc_control_B.scale);
    proc_control_B.sincos_o2[2] = rt_atan2d_snf((proc_control_B.t63 *
      proc_control_B.od + proc_control_B.t15 * proc_control_B.t16) * 2.0,
      ((proc_control_B.oc - proc_control_B.oa) - proc_control_B.ob) +
      proc_control_B.Product2_j);
    proc_control_B.ibmat = 0;
    if (rtb_Reset || rtb_NewDvlMsg) {
      proc_control_B.ibmat = 1;
    }

    proc_control_B.i = proc_control_B.ibmat;
    proc_control_B.b_x_size = proc_control_B.ibmat;
    if (proc_control_B.ibmat - 1 >= 0) {
      proc_control_B.b_x_data = proc_control_B.scale;
    }

    proc_control_B.jA = 0;
    while (proc_control_B.jA <= proc_control_B.ibmat - 1) {
      if (!std::isnan(proc_control_B.b_x_data)) {
        if (proc_control_B.b_x_data < 0.0) {
          proc_control_B.b_x_data = -1.0;
        } else {
          proc_control_B.b_x_data = (proc_control_B.b_x_data > 0.0);
        }
      }

      proc_control_B.jA = 1;
    }

    proc_control_B.ibmat = 0;
    if (rtb_Reset || rtb_NewDvlMsg) {
      proc_control_B.ibmat = 1;
    }

    proc_control_B.d_size = static_cast<int8_T>(proc_control_B.ibmat);
    if (static_cast<int8_T>(proc_control_B.ibmat) - 1 >= 0) {
      proc_control_B.d_data_h = rt_atan2d_snf(proc_control_B.t16,
        proc_control_B.t15);
    }

    if (proc_control_B.i != static_cast<int8_T>(proc_control_B.ibmat)) {
      proc_control_binary_expand_op(proc_control_B.sincos_o2,
        &proc_control_B.b_x_data, &proc_control_B.b_x_size,
        &proc_control_B.d_data_h, &proc_control_B.d_size);
    }

    proc_control_B.ibmat = 0;
    if (rtb_Reset || rtb_NewDvlMsg) {
      proc_control_B.ibmat = 1;
    }

    if (proc_control_B.ibmat - 1 >= 0) {
      proc_control_B.sincos_o2[2] = 0.0;
    }

    if (std::abs(proc_control_B.sincos_o2[1]) > 0.349066) {
      proc_control_B.y_e[0] = 32.7675;
      proc_control_B.y_e[1] = 32.7675;
      proc_control_B.y_e[2] = 32.7675;
    } else if (std::abs(proc_control_B.sincos_o2[2]) > 0.349066) {
      proc_control_B.y_e[0] = 32.7675;
      proc_control_B.y_e[1] = 32.7675;
      proc_control_B.y_e[2] = 32.7675;
    }

    // Product: '<S59>/Product' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.Product8 = proc_control_B.y_d[0] / proc_control_B.t57_tmp_h;

    // Product: '<S59>/Product1' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.Product1_gp = proc_control_B.y_d[1] /
      proc_control_B.t57_tmp_h;

    // Product: '<S59>/Product2' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.Product2_j = proc_control_B.y_d[2] / proc_control_B.t57_tmp_h;

    // Product: '<S59>/Product3' incorporates:
    //   Sqrt: '<S51>/sqrt'

    proc_control_B.od = proc_control_B.y_d[3] / proc_control_B.t57_tmp_h;

    // Sum: '<S14>/Sum1'
    proc_control_B.Quaternion[0] = proc_control_B.t60 + proc_control_B.Divide_i;
    proc_control_B.Quaternion[1] = proc_control_B.t60 + proc_control_B.d;
    proc_control_B.Quaternion[2] = proc_control_B.t60 + proc_control_B.t6;
    proc_control_B.Quaternion[3] = proc_control_B.t60 +
      proc_control_B.MATLABSystem_o6;

    // Sum: '<S14>/Sum3' incorporates:
    //   DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'

    proc_control_B.AngularRate_d[0] = proc_control_B.Product5 +
      proc_control_B.t62;
    proc_control_B.AngularRate_d[1] = proc_control_B.Product5 +
      proc_control_B.AngularRate_a_idx_1;
    proc_control_B.AngularRate_d[2] = proc_control_B.Product5 +
      proc_control_B.t39;

    // Product: '<S60>/Product7' incorporates:
    //   Product: '<S61>/Product7'

    proc_control_B.d = proc_control_B.od * proc_control_B.od;

    // Product: '<S60>/Product' incorporates:
    //   Product: '<S61>/Product'

    proc_control_B.t15 = proc_control_B.Product1_gp * proc_control_B.Product2_j;

    // Product: '<S60>/Product1' incorporates:
    //   Product: '<S61>/Product1'

    proc_control_B.t57 = proc_control_B.Product8 * proc_control_B.od;

    // Product: '<S60>/Product3' incorporates:
    //   Product: '<S62>/Product'

    proc_control_B.oc = proc_control_B.Product1_gp * proc_control_B.od;

    // Product: '<S60>/Product2' incorporates:
    //   Product: '<S62>/Product1'

    proc_control_B.MATLABSystem_o6 = proc_control_B.Product8 *
      proc_control_B.Product2_j;

    // Product: '<S60>/Product6' incorporates:
    //   Product: '<S62>/Product7'

    proc_control_B.t16 = proc_control_B.Product2_j * proc_control_B.Product2_j;

    // Sum: '<S14>/Sum5' incorporates:
    //   Constant: '<S14>/Constant1'
    //   Constant: '<S60>/Constant'
    //   Gain: '<S60>/Gain'
    //   Gain: '<S60>/Gain1'
    //   Gain: '<S60>/Gain2'
    //   MATLABSystem: '<S1>/MATLAB System'
    //   Product: '<S60>/Product'
    //   Product: '<S60>/Product1'
    //   Product: '<S60>/Product2'
    //   Product: '<S60>/Product3'
    //   Product: '<S60>/Product4'
    //   Product: '<S60>/Product5'
    //   Product: '<S60>/Product6'
    //   Product: '<S60>/Product7'
    //   Product: '<S60>/Product8'
    //   Sum: '<S14>/Sum6'
    //   Sum: '<S60>/Sum'
    //   Sum: '<S60>/Sum1'
    //   Sum: '<S60>/Sum2'
    //   Sum: '<S60>/Sum3'

    proc_control_B.LinearAcceleration[0] = (((((proc_control_P.Constant_Value_ah
      - proc_control_B.t16) - proc_control_B.d) * proc_control_P.Gain2_Gain_p *
      proc_control_P.Constant1_Value_m[0] + (proc_control_B.t15 +
      proc_control_B.t57) * proc_control_P.Gain_Gain_a *
      proc_control_P.Constant1_Value_m[1]) + (proc_control_B.oc -
      proc_control_B.MATLABSystem_o6) * proc_control_P.Gain1_Gain_b *
      proc_control_P.Constant1_Value_m[2]) +
      proc_control_B.TmpSignalConversionAtTransp[7]) + proc_control_B.t65;

    // Product: '<S61>/Product3' incorporates:
    //   Product: '<S62>/Product3'

    proc_control_B.t63 = proc_control_B.Product2_j * proc_control_B.od;

    // Product: '<S61>/Product2' incorporates:
    //   Product: '<S62>/Product2'

    proc_control_B.t6 = proc_control_B.Product8 * proc_control_B.Product1_gp;

    // Product: '<S61>/Product6' incorporates:
    //   Product: '<S62>/Product6'

    proc_control_B.od = proc_control_B.Product1_gp * proc_control_B.Product1_gp;

    // Sum: '<S14>/Sum5' incorporates:
    //   Constant: '<S14>/Constant1'
    //   Constant: '<S61>/Constant'
    //   Constant: '<S62>/Constant'
    //   Gain: '<S61>/Gain'
    //   Gain: '<S61>/Gain1'
    //   Gain: '<S61>/Gain2'
    //   Gain: '<S62>/Gain'
    //   Gain: '<S62>/Gain1'
    //   Gain: '<S62>/Gain2'
    //   MATLABSystem: '<S1>/MATLAB System'
    //   Product: '<S61>/Product2'
    //   Product: '<S61>/Product3'
    //   Product: '<S61>/Product4'
    //   Product: '<S61>/Product5'
    //   Product: '<S61>/Product6'
    //   Product: '<S61>/Product8'
    //   Product: '<S62>/Product4'
    //   Product: '<S62>/Product5'
    //   Product: '<S62>/Product8'
    //   Sum: '<S14>/Sum6'
    //   Sum: '<S61>/Sum'
    //   Sum: '<S61>/Sum1'
    //   Sum: '<S61>/Sum2'
    //   Sum: '<S61>/Sum3'
    //   Sum: '<S62>/Sum'
    //   Sum: '<S62>/Sum1'
    //   Sum: '<S62>/Sum2'
    //   Sum: '<S62>/Sum3'

    proc_control_B.LinearAcceleration[1] = (((((proc_control_P.Constant_Value_ar
      - proc_control_B.od) - proc_control_B.d) * proc_control_P.Gain2_Gain_a *
      proc_control_P.Constant1_Value_m[1] + (proc_control_B.t15 -
      proc_control_B.t57) * proc_control_P.Gain_Gain_c *
      proc_control_P.Constant1_Value_m[0]) + (proc_control_B.t6 +
      proc_control_B.t63) * proc_control_P.Gain1_Gain_a *
      proc_control_P.Constant1_Value_m[2]) +
      proc_control_B.TmpSignalConversionAtTransp[8]) + proc_control_B.t65;
    proc_control_B.LinearAcceleration[2] = ((((proc_control_B.oc +
      proc_control_B.MATLABSystem_o6) * proc_control_P.Gain_Gain_b *
      proc_control_P.Constant1_Value_m[0] + (proc_control_B.t63 -
      proc_control_B.t6) * proc_control_P.Gain1_Gain_f *
      proc_control_P.Constant1_Value_m[1]) + ((proc_control_P.Constant_Value_i2
      - proc_control_B.od) - proc_control_B.t16) * proc_control_P.Gain2_Gain_m *
      proc_control_P.Constant1_Value_m[2]) +
      proc_control_B.TmpSignalConversionAtTransp[9]) + proc_control_B.t65;

    // Update for DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_e =
      proc_control_B.MATLABSystem_o7;

    // Update for DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_k = proc_control_B.od_f;

    // Update for DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_o = proc_control_B.t3;

    // Update for DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_i = proc_control_B.t4;

    // Update for DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_g = proc_control_B.t24;

    // Update for DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_h = proc_control_B.t26;

    // Update for DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_l = proc_control_B.t27;

    // Update for DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
    proc_control_DW.DiscreteTransferFcn1_states_ge = proc_control_B.t29;
    if ((&proc_control_M)->Timing.TaskCounters.TID[5] == 0) {
      // Update for UniformRandomNumber: '<S12>/ Drift' incorporates:
      //   DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S239>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1'
      //   DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1'
      //   Lookup_n-D: '<S11>/ PWM to N'
      //   Lookup_n-D: '<S135>/N to A'
      //   Lookup_n-D: '<S135>/N to PWM'
      //   Lookup_n-D: '<S16>/N to RPM'
      //   Trigonometry: '<S267>/sincos'
      //   Trigonometry: '<S40>/sincos'

      for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
        // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S238>/Enable'

        // Outputs for Enabled SubSystem: '<S263>/Subsystem2' incorporates:
        //   EnablePort: '<S266>/Enable'

        proc_control_DW.Drift_NextOutput[proc_control_B.i] =
          (proc_control_P.dmax[proc_control_B.i] -
           proc_control_P.dmin[proc_control_B.i]) * rt_urand_Upu32_Yd_f_pw_snf
          (&proc_control_DW.RandSeed[proc_control_B.i]) +
          proc_control_P.dmin[proc_control_B.i];

        // End of Outputs for SubSystem: '<S263>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem Controller'
      }
    }

    // Update for Sin: '<S12>/Sine Wave'
    for (proc_control_B.i = 0; proc_control_B.i < 6; proc_control_B.i++) {
      proc_control_DW.counter[proc_control_B.i]++;
      if (proc_control_DW.counter[proc_control_B.i] ==
          proc_control_P.waveDiscreteFrequency[proc_control_B.i]) {
        proc_control_DW.counter[proc_control_B.i] = 0;
      }
    }

    // End of Update for Sin: '<S12>/Sine Wave'

    // Update for UnitDelay: '<S1>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE[0] = proc_control_B.WorldPosition_n[0];
    proc_control_DW.UnitDelay_DSTATE[1] = proc_control_B.WorldPosition_n[1];
    proc_control_DW.UnitDelay_DSTATE[2] = proc_control_B.WorldPosition_n[2];
    proc_control_DW.UnitDelay_DSTATE[3] = proc_control_B.y_d[0];
    proc_control_DW.UnitDelay_DSTATE[4] = proc_control_B.y_d[1];
    proc_control_DW.UnitDelay_DSTATE[5] = proc_control_B.y_d[2];
    proc_control_DW.UnitDelay_DSTATE[6] = proc_control_B.y_d[3];

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_DW.DiscreteTimeIntegrator_IC_LOADI = 0U;
    if (proc_control_B.MATLABSystem_o4 > 0.0) {
      proc_control_DW.DiscreteTimeIntegrator_PrevRese = 1;
    } else if (proc_control_B.MATLABSystem_o4 < 0.0) {
      proc_control_DW.DiscreteTimeIntegrator_PrevRese = -1;
    } else if (proc_control_B.MATLABSystem_o4 == 0.0) {
      proc_control_DW.DiscreteTimeIntegrator_PrevRese = 0;
    } else {
      proc_control_DW.DiscreteTimeIntegrator_PrevRese = 2;
    }

    // Update for UnitDelay: '<S1>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE[7] = proc_control_B.t43;
    proc_control_DW.UnitDelay_DSTATE[10] = proc_control_B.t62;

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[0] =
      proc_control_B.WorldPosition_n[0] + proc_control_B.u2[0];

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   UnitDelay: '<S1>/Unit Delay'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] = proc_control_B.t62 +
      proc_control_B.c_k[0];

    // Update for UnitDelay: '<S1>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE[8] = proc_control_B.t45;
    proc_control_DW.UnitDelay_DSTATE[11] = proc_control_B.AngularRate_a_idx_1;

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[1] =
      proc_control_B.WorldPosition_n[1] + proc_control_B.u2[1];

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   UnitDelay: '<S1>/Unit Delay'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] =
      proc_control_B.AngularRate_a_idx_1 + proc_control_B.c_k[1];

    // Update for UnitDelay: '<S1>/Unit Delay'
    proc_control_DW.UnitDelay_DSTATE[9] = proc_control_B.BodyVelocity_c_idx_2;
    proc_control_DW.UnitDelay_DSTATE[12] = proc_control_B.t39;

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator'
    proc_control_DW.DiscreteTimeIntegrator_DSTATE_f[2] =
      proc_control_B.WorldPosition_n[2] + proc_control_B.rtb_u2_n;

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   UnitDelay: '<S1>/Unit Delay'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] = proc_control_B.t39 +
      proc_control_B.t58;
    if (proc_control_B.MATLABSystem_o4 > 0.0) {
      proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 1;
    } else if (proc_control_B.MATLABSystem_o4 < 0.0) {
      proc_control_DW.DiscreteTimeIntegrator1_PrevRes = -1;
    } else if (proc_control_B.MATLABSystem_o4 == 0.0) {
      proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 0;
    } else {
      proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 2;
    }

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator2'
    proc_control_DW.DiscreteTimeIntegrator2_IC_LOAD = 0U;
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[0] =
      proc_control_B.TmpSignalConversionAtSFunct[0] + proc_control_B.n[0];
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[1] =
      proc_control_B.TmpSignalConversionAtSFunct[1] + proc_control_B.n[1];
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[2] =
      proc_control_B.TmpSignalConversionAtSFunct[2] + proc_control_B.n[2];
    proc_control_DW.DiscreteTimeIntegrator2_DSTATE[3] =
      proc_control_B.TmpSignalConversionAtSFunct[3] + proc_control_B.t40;
    if (proc_control_B.MATLABSystem_o4 > 0.0) {
      proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 1;
    } else if (proc_control_B.MATLABSystem_o4 < 0.0) {
      proc_control_DW.DiscreteTimeIntegrator2_PrevRes = -1;
    } else if (proc_control_B.MATLABSystem_o4 == 0.0) {
      proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 0;
    } else {
      proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 2;
    }

    // Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator3'
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] = proc_control_B.t43 +
      proc_control_B.t44;
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] = proc_control_B.t45 +
      proc_control_B.oa_tmp;
    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] =
      proc_control_B.BodyVelocity_c_idx_2 + proc_control_B.t41;
    if (proc_control_B.MATLABSystem_o4 > 0.0) {
      proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 1;
    } else if (proc_control_B.MATLABSystem_o4 < 0.0) {
      proc_control_DW.DiscreteTimeIntegrator3_PrevRes = -1;
    } else if (proc_control_B.MATLABSystem_o4 == 0.0) {
      proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 0;
    } else {
      proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 2;
    }

    // Update for RandomNumber: '<S28>/White Noise'
    proc_control_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_j) * proc_control_P.WhiteNoise_StdDev +
      proc_control_P.WhiteNoise_Mean;

    // Update for RandomNumber: '<S29>/White Noise'
    proc_control_DW.NextOutput_b = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_d) * proc_control_P.WhiteNoise_StdDev_d +
      proc_control_P.WhiteNoise_Mean_e;

    // Update for RandomNumber: '<S30>/White Noise'
    proc_control_DW.NextOutput_g = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_e) * proc_control_P.WhiteNoise_StdDev_e +
      proc_control_P.WhiteNoise_Mean_c;

    // Update for RandomNumber: '<S31>/White Noise'
    proc_control_DW.NextOutput_l = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_n) * proc_control_P.WhiteNoise_StdDev_j +
      proc_control_P.WhiteNoise_Mean_p;

    // Update for RandomNumber: '<S32>/White Noise'
    proc_control_DW.NextOutput_e = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_b) * proc_control_P.WhiteNoise_StdDev_p +
      proc_control_P.WhiteNoise_Mean_l;
  }

  // End of Outputs for SubSystem: '<Root>/Modèle Physique'

  // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
  //   EnablePort: '<S4>/Enable'

  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    proc_control_DW.ROSOutput_MODE = (proc_control_B.MATLABSystem_o3 > 0.0);
  }

  if (proc_control_DW.ROSOutput_MODE) {
    // MATLAB Function: '<S93>/MATLAB Function' incorporates:
    //   Sum: '<S93>/Sum'

    proc_control_B.msg_i.Position.X = proc_control_B.WorldPosition_n[0];
    proc_control_B.msg_i.Position.Y = proc_control_B.WorldPosition_n[1];
    proc_control_B.msg_i.Position.Z = proc_control_B.WorldPosition_n[2];
    proc_control_B.msg_i.Orientation.X = proc_control_B.y_d[1];
    proc_control_B.msg_i.Orientation.Y = proc_control_B.y_d[2];
    proc_control_B.msg_i.Orientation.Z = proc_control_B.y_d[3];
    proc_control_B.msg_i.Orientation.W = proc_control_B.y_d[0];

    // Outputs for Atomic SubSystem: '<S93>/Publish'
    // MATLABSystem: '<S106>/SinkBlock'
    Pub_proc_control_75.publish(&proc_control_B.msg_i);

    // End of Outputs for SubSystem: '<S93>/Publish'
    if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
      // MATLAB Function: '<S89>/MATLAB Function' incorporates:
      //   Constant: '<S94>/Constant'

      proc_control_B.msg_b = proc_control_P.Constant_Value_h;
      proc_control_B.msg_b.XVelBtm = proc_control_B.y_e[0];
      proc_control_B.msg_b.YVelBtm = proc_control_B.y_e[1];
      proc_control_B.msg_b.ZVelBtm = proc_control_B.y_e[2];

      // Outputs for Atomic SubSystem: '<S89>/Publish'
      // MATLABSystem: '<S96>/SinkBlock'
      Pub_proc_control_41.publish(&proc_control_B.msg_b);

      // End of Outputs for SubSystem: '<S89>/Publish'

      // BusAssignment: '<S90>/Bus Assignment' incorporates:
      //   DataTypeConversion: '<S90>/Cast To Double'
      //   ZeroOrderHold: '<S90>/Zero-Order Hold'

      proc_control_B.BusAssignment_h.Data = static_cast<real32_T>
        (proc_control_B.PressureDepth);

      // Outputs for Atomic SubSystem: '<S90>/Publish Depth'
      // MATLABSystem: '<S98>/SinkBlock'
      Pub_proc_control_243.publish(&proc_control_B.BusAssignment_h);

      // End of Outputs for SubSystem: '<S90>/Publish Depth'
    }

    // MATLAB Function: '<S91>/MATLAB Function' incorporates:
    //   Constant: '<S99>/Constant'
    //   Sum: '<S14>/Sum5'

    proc_control_B.msg_c = proc_control_P.Constant_Value_g;
    proc_control_B.msg_c.AngularVelocity.X = proc_control_B.AngularRate_d[0];
    proc_control_B.msg_c.AngularVelocity.Y = proc_control_B.AngularRate_d[1];
    proc_control_B.msg_c.AngularVelocity.Z = proc_control_B.AngularRate_d[2];
    proc_control_B.msg_c.Orientation.X = proc_control_B.Quaternion[1];
    proc_control_B.msg_c.Orientation.Y = proc_control_B.Quaternion[2];
    proc_control_B.msg_c.Orientation.Z = proc_control_B.Quaternion[3];
    proc_control_B.msg_c.Orientation.W = proc_control_B.Quaternion[0];
    proc_control_B.msg_c.LinearAcceleration.X =
      proc_control_B.LinearAcceleration[0];
    proc_control_B.msg_c.LinearAcceleration.Y =
      proc_control_B.LinearAcceleration[1];
    proc_control_B.msg_c.LinearAcceleration.Z =
      proc_control_B.LinearAcceleration[2];

    // Outputs for Atomic SubSystem: '<S91>/Publish imu_info'
    // MATLABSystem: '<S101>/SinkBlock'
    Pub_proc_control_47.publish(&proc_control_B.msg_c);

    // End of Outputs for SubSystem: '<S91>/Publish imu_info'

    // ZeroOrderHold: '<S92>/Zero-Order Hold'
    if ((&proc_control_M)->Timing.TaskCounters.TID[4] == 0) {
      // BusAssignment: '<S92>/Bus Assignment' incorporates:
      //   Constant: '<S102>/Constant'
      //   MATLABSystem: '<S33>/MATLAB System'

      proc_control_B.BusAssignment = proc_control_P.Constant_Value_k5;
      proc_control_B.BusAssignment.Heading = proc_control_B.MATLABSystem_o2_k[0];
      proc_control_B.BusAssignment.Elevation = proc_control_B.MATLABSystem_o2_k
        [1];

      // Outputs for Atomic SubSystem: '<S92>/Publish Ping'
      // MATLABSystem: '<S103>/SinkBlock'
      Pub_proc_control_350.publish(&proc_control_B.BusAssignment);

      // End of Outputs for SubSystem: '<S92>/Publish Ping'
    }

    // End of ZeroOrderHold: '<S92>/Zero-Order Hold'
  }

  // End of Outputs for SubSystem: '<Root>/ROS Output'
  if ((&proc_control_M)->Timing.TaskCounters.TID[2] == 0) {
    // Update for Atomic SubSystem: '<Root>/Subsystem1'
    // Update for Delay: '<S10>/Delay'
    proc_control_DW.Delay_DSTATE_e = proc_control_B.y;

    // End of Update for SubSystem: '<Root>/Subsystem1'

    // Update for Delay: '<S243>/ ' incorporates:
    //   SignalConversion generated from: '<S5>/thrust'

    std::memcpy(&proc_control_DW._DSTATE[0],
                &proc_control_B.BufferToMakeInportVirtual_Inser[0], sizeof
                (real_T) << 3U);
  }

  rate_scheduler((&proc_control_M));
}

// Model initialize function
void proc_control::initialize()
{
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));

  {
    static const real_T tmp_j[33]{ 0.0, 1.0, 0.0, 0.1, 1.0, 0.0, 0.2, 1.0, 0.0,
      0.30000000000000004, 1.0, 0.0, 0.4, 1.0, 0.0, 0.5, 1.0, 0.0, 0.6, 1.0, 0.0,
      0.7, 1.0, 0.0, 0.8, 1.0, 0.0, 0.9, 1.0, 0.0, 1.0, 1.0, 0.0 };

    static const real_T tmp_n[13]{ 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
      0.0, 0.0, 0.0, 0.0 };

    static const char_T tmp_1[38]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'k', 'i', 'l', 'l', '_', 'm', 'i', 's', 's', 'i', 'o', 'n', '/', 'k',
      'i', 'l', 'l', '_', 's', 'w', 'i', 't', 'c', 'h', '_', 'm', 's', 'g' };

    static const char_T tmp_r[36]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 's', 'e', 't', '_', 'p', 'i', 'n',
      'g', 'e', 'r', '_', 'l', 'o', 'c', 'a', 't', 'i', 'o', 'n' };

    static const char_T tmp_f[34]{ '/', 'p', 'r', 'o', 'c', '_', 'p', 'l', 'a',
      'n', 'n', 'e', 'r', '/', 's', 'e', 'n', 'd', '_', 't', 'r', 'a', 'j', 'e',
      'c', 't', 'o', 'r', 'y', '_', 'l', 'i', 's', 't' };

    static const char_T tmp_2[33]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 's', 't', 'a', 'r', 't', '_', 's',
      'i', 'm', 'u', 'l', 'a', 't', 'i', 'o', 'n' };

    static const char_T tmp_b[32]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'd', 'v', 'l', '/', 'd', 'v', 'l', '_', 'r', 'e', 'l', 'a', 't', 'i',
      'v', 'e', '_', 'd', 'e', 'p', 't', 'h' };

    static const char_T tmp_s[32]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'p', 'i', 'n', 'g', 'e', 'r', '_',
      'l', 'o', 'c', 'a', 't', 'i', 'o', 'n' };

    static const char_T tmp_o[31]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 't', 'h', 'r', 'u', 's', 't', 'e', 'r', '/', 't', 'h', 'r', 'u', 's',
      't', 'e', 'r', '_', 'p', 'w', 'm' };

    static const char_T tmp_4[30]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'r', 'e', 's', 'e', 't', '_', 't', 'r', 'a', 'j',
      'e', 'c', 't', 'o', 'r', 'y' };

    static const char_T tmp_6[29]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'd', 'v', 'l', '_', 'v', 'e', 'l',
      'o', 'c', 'i', 't', 'y' };

    static const char_T tmp_q[29]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 't', 'h', 'r', 'u', 's', 't', 'e',
      'r', '_', 'r', 'p', 'm' };

    static const char_T tmp_p[28]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 'c', 'o', 'n', 't', 'r', 'o', 'l', 'l', 'e', 'r', '_',
      'i', 'n', 'f', 'o' };

    static const char_T tmp_l[27]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 's', 'e', 't', '_', 'm', 'p', 'c', '_', 'g', 'a',
      'i', 'n', 's' };

    static const char_T tmp_a[26]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'd', 'v', 'l', '/', 'd', 'v', 'l', '_', 'v', 'e', 'l', 'o', 'c', 'i',
      't', 'y' };

    static const char_T tmp_h[26]{ '/', 'p', 'r', 'o', 'c', '_', 'p', 'l', 'a',
      'n', 'n', 'e', 'r', '/', 'i', 'n', 'i', 't', 'i', 'a', 'l', '_', 'p', 'o',
      's', 'e' };

    static const char_T tmp_5[25]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'i', 'm', 'u', '_', 'i', 'n', 'f',
      'o' };

    static const char_T tmp_m[23]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'p', 'o', 'w', 'e', 'r', '/', 'c', 'u', 'r', 'r', 'e', 'n', 't' };

    static const char_T tmp[22]{ '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 's', 'e', 't', '_', 'm', 'o', 'd', 'e' };

    static const char_T tmp_7[22]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'd', 'e', 'p', 't', 'h' };

    static const char_T tmp_9[22]{ '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e', 'r',
      '_', 'i', 'm', 'u', '/', 'i', 'm', 'u', '_', 'i', 'n', 'f', 'o' };

    static const char_T tmp_d[22]{ '/', 't', 'e', 'l', 'e', 'm', 'e', 't', 'r',
      'y', '/', 'a', 'u', 'v', '_', 's', 't', 'a', 't', 'e', 's', '/' };

    static const char_T tmp_e[22]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 's', 'e', 'n', 's', 'o', 'r', '_', 'o', 'n' };

    static const char_T tmp_8[21]{ '/', 'p', 'r', 'o', 'c', '_', 's', 'i', 'm',
      'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'p', 'i', 'n', 'g' };

    static const char_T tmp_i[21]{ 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n', 't',
      'r', 'o', 'l', '/', 'a', 'd', 'd', '_', 'p', 'o', 's', 'e' };

    static const char_T tmp_0[19]{ '/', 'p', 'r', 'o', 'c', '_', 'n', 'a', 'v',
      '/', 'r', 'e', 's', 'e', 't', '_', 'p', 'o', 's' };

    static const char_T tmp_3[18]{ '/', 't', 'e', 'l', 'e', 'm', 'e', 't', 'r',
      'y', '/', 'd', 'r', 'y', '_', 'r', 'u', 'n' };

    static const char_T tmp_c[16]{ '/', 'p', 'r', 'o', 'c', '_', 'h', 'y', 'd',
      'r', 'o', '/', 'p', 'i', 'n', 'g' };

    static const char_T tmp_g[15]{ '/', 's', 'p', 'a', 'c', 'e', 'n', 'a', 'v',
      '/', 't', 'w', 'i', 's', 't' };

    static const char_T tmp_t[8]{ '/', 'p', 'o', 's', '_', 'r', 'o', 't' };

    static const int8_T tmp_k[7]{ 0, 0, 0, 1, 0, 0, 0 };

    int32_T i;
    int32_T t;
    uint32_T tseed;
    char_T b_zeroDelimTopic[9];

    // Start for SwitchCase: '<S9>/Switch Case'
    proc_control_DW.SwitchCase_ActiveSubsystem = -1;
    proc_control_PrevZCX.Trajectorygenerator_Reset_ZCE = POS_ZCSIG;

    // InitializeConditions for Delay: '<S243>/ '
    std::memcpy(&proc_control_DW._DSTATE[0], &proc_control_P._InitialCondition[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for Atomic SubSystem: '<Root>/Subsystem1'
    // InitializeConditions for Delay: '<S10>/Delay'
    proc_control_DW.Delay_DSTATE_e = proc_control_P.Delay_InitialCondition_c;

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S321>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S327>/In1' incorporates:
    //   Outport: '<S327>/Out1'

    proc_control_B.In1_i2 = proc_control_P.Out1_Y0_kc;

    // End of SystemInitialize for SubSystem: '<S321>/Enabled Subsystem'

    // Start for MATLABSystem: '<S321>/SourceBlock'
    proc_control_DW.obj_mt.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_mt.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_B.b_zeroDelimTopic_bn[i] = tmp[i];
    }

    proc_control_B.b_zeroDelimTopic_bn[22] = '\x00';
    Sub_proc_control_185_13.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_bn[0], 1);
    proc_control_DW.obj_mt.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S321>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe2'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe3'
    // Start for MATLABSystem: '<S322>/SourceBlock'
    proc_control_DW.obj_oz.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_oz.isInitialized = 1;
    for (i = 0; i < 19; i++) {
      proc_control_B.b_zeroDelimTopic_k[i] = tmp_0[i];
    }

    proc_control_B.b_zeroDelimTopic_k[19] = '\x00';
    Sub_proc_control_185_14.createSubscriber(&proc_control_B.b_zeroDelimTopic_k
      [0], 1);
    proc_control_DW.obj_oz.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S322>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe3'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S320>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S326>/In1' incorporates:
    //   Outport: '<S326>/Out1'

    proc_control_B.In1_cx = proc_control_P.Out1_Y0_h;

    // End of SystemInitialize for SubSystem: '<S320>/Enabled Subsystem'

    // Start for MATLABSystem: '<S320>/SourceBlock'
    proc_control_DW.obj_hb.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hb.isInitialized = 1;
    for (i = 0; i < 38; i++) {
      proc_control_B.b_zeroDelimTopic[i] = tmp_1[i];
    }

    proc_control_B.b_zeroDelimTopic[38] = '\x00';
    Sub_proc_control_185_12.createSubscriber(&proc_control_B.b_zeroDelimTopic[0],
      1);
    proc_control_DW.obj_hb.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S320>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S10>/startSim'
    // SystemInitialize for Enabled SubSystem: '<S325>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S331>/In1' incorporates:
    //   Outport: '<S331>/Out1'

    proc_control_B.In1_n = proc_control_P.Out1_Y0_g;

    // End of SystemInitialize for SubSystem: '<S325>/Enabled Subsystem'

    // Start for MATLABSystem: '<S325>/SourceBlock'
    proc_control_DW.obj_bh.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_bh.isInitialized = 1;
    for (i = 0; i < 33; i++) {
      proc_control_B.b_zeroDelimTopic_a[i] = tmp_2[i];
    }

    proc_control_B.b_zeroDelimTopic_a[33] = '\x00';
    Sub_proc_control_185_11.createSubscriber(&proc_control_B.b_zeroDelimTopic_a
      [0], 1);
    proc_control_DW.obj_bh.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S325>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/startSim'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe5'
    // SystemInitialize for Enabled SubSystem: '<S324>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S330>/In1' incorporates:
    //   Outport: '<S330>/Out1'

    proc_control_B.In1_f1 = proc_control_P.Out1_Y0_a;

    // End of SystemInitialize for SubSystem: '<S324>/Enabled Subsystem'

    // Start for MATLABSystem: '<S324>/SourceBlock'
    proc_control_DW.obj_fx.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_fx.isInitialized = 1;
    for (i = 0; i < 18; i++) {
      proc_control_B.b_zeroDelimTopic_jw[i] = tmp_3[i];
    }

    proc_control_B.b_zeroDelimTopic_jw[18] = '\x00';
    Sub_proc_control_185_270.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_jw[0], 1);
    proc_control_DW.obj_fx.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S324>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe5'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe4'
    // Start for MATLABSystem: '<S323>/SourceBlock'
    proc_control_DW.obj_h.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_h.isInitialized = 1;
    for (i = 0; i < 30; i++) {
      proc_control_B.b_zeroDelimTopic_o[i] = tmp_4[i];
    }

    proc_control_B.b_zeroDelimTopic_o[30] = '\x00';
    Sub_proc_control_185_268.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_o[0], 1);
    proc_control_DW.obj_h.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S323>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe4'

    // Start for MATLABSystem: '<S10>/MATLAB System'
    proc_control_DW.obj_mv.initial_mode = proc_control_P.mode.init;
    proc_control_DW.obj_mv.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S10>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    for (i = 0; i < 7; i++) {
      proc_control_DW.obj_mv.m_initCond[i] = 0.0;
    }

    proc_control_DW.obj_mv.m_mode = proc_control_DW.obj_mv.initial_mode;
    proc_control_DW.obj_mv.m_killStatus = 0.0;
    proc_control_DW.obj_mv.m_simulation = 0.0;
    proc_control_DW.obj_mv.m_reset = 0.0;
    proc_control_DW.obj_mv.m_trajClear = 0.0;
    proc_control_DW.obj_mv.m_notDryRun = 1.0;

    // End of InitializeConditions for MATLABSystem: '<S10>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<Root>/Subsystem1'

    // SystemInitialize for IfAction SubSystem: '<S3>/Simulation'
    // SystemInitialize for Atomic SubSystem: '<S66>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S76>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S80>/In1' incorporates:
    //   Outport: '<S80>/Out1'

    proc_control_B.In1_pd = proc_control_P.Out1_Y0_f;

    // End of SystemInitialize for SubSystem: '<S76>/Enabled Subsystem'

    // Start for MATLABSystem: '<S76>/SourceBlock' incorporates:
    //   MATLABSystem: '<S101>/SinkBlock'

    proc_control_DW.obj_i4.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_i4.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S91>/Publish imu_info'
    for (i = 0; i < 25; i++) {
      proc_control_B.b_zeroDelimTopic_h[i] = tmp_5[i];
    }

    proc_control_B.b_zeroDelimTopic_h[25] = '\x00';

    // End of SystemInitialize for SubSystem: '<S91>/Publish imu_info'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 26; i++) {
      proc_control_B.b_zeroDelimTopic_js[i] =
        proc_control_B.b_zeroDelimTopic_h[i];
    }

    Sub_proc_control_31_1241.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_js[0], 1);
    proc_control_DW.obj_i4.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S76>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S66>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S66>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S78>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S82>/In1' incorporates:
    //   Outport: '<S82>/Out1'

    proc_control_B.In1_c = proc_control_P.Out1_Y0_ma;

    // End of SystemInitialize for SubSystem: '<S78>/Enabled Subsystem'

    // Start for MATLABSystem: '<S78>/SourceBlock' incorporates:
    //   MATLABSystem: '<S96>/SinkBlock'

    proc_control_DW.obj_bg.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_bg.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S89>/Publish'
    for (i = 0; i < 29; i++) {
      proc_control_B.b_zeroDelimTopic_lu[i] = tmp_6[i];
    }

    proc_control_B.b_zeroDelimTopic_lu[29] = '\x00';

    // End of SystemInitialize for SubSystem: '<S89>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 30; i++) {
      proc_control_B.b_zeroDelimTopic_l[i] =
        proc_control_B.b_zeroDelimTopic_lu[i];
    }

    Sub_proc_control_31_1242.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_l[0], 1);
    proc_control_DW.obj_bg.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S78>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S66>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S66>/Subscribe depth'
    // SystemInitialize for Enabled SubSystem: '<S77>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S81>/In1' incorporates:
    //   Outport: '<S81>/Out1'

    proc_control_B.In1_om = proc_control_P.Out1_Y0_n;

    // End of SystemInitialize for SubSystem: '<S77>/Enabled Subsystem'

    // Start for MATLABSystem: '<S77>/SourceBlock' incorporates:
    //   MATLABSystem: '<S98>/SinkBlock'

    proc_control_DW.obj_df1.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_df1.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S90>/Publish Depth'
    for (i = 0; i < 22; i++) {
      proc_control_B.b_zeroDelimTopic_bn[i] = tmp_7[i];
    }

    proc_control_B.b_zeroDelimTopic_bn[22] = '\x00';

    // End of SystemInitialize for SubSystem: '<S90>/Publish Depth'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 23; i++) {
      proc_control_B.b_zeroDelimTopic_hm[i] =
        proc_control_B.b_zeroDelimTopic_bn[i];
    }

    Sub_proc_control_31_1305.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_hm[0], 1);
    proc_control_DW.obj_df1.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S77>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S66>/Subscribe depth'

    // SystemInitialize for Atomic SubSystem: '<S66>/Subscribe2'
    // Start for MATLABSystem: '<S79>/SourceBlock' incorporates:
    //   MATLABSystem: '<S103>/SinkBlock'

    proc_control_DW.obj_hx.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hx.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S92>/Publish Ping'
    for (i = 0; i < 21; i++) {
      proc_control_B.b_zeroDelimTopic_hn[i] = tmp_8[i];
    }

    proc_control_B.b_zeroDelimTopic_hn[21] = '\x00';

    // End of SystemInitialize for SubSystem: '<S92>/Publish Ping'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 22; i++) {
      proc_control_B.b_zeroDelimTopic_eg[i] =
        proc_control_B.b_zeroDelimTopic_hn[i];
    }

    Sub_proc_control_31_1318.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_eg[0], 1);
    proc_control_DW.obj_hx.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S79>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S66>/Subscribe2'
    // End of SystemInitialize for SubSystem: '<S3>/Simulation'

    // SystemInitialize for IfAction SubSystem: '<S3>/AUV8'
    // SystemInitialize for Atomic SubSystem: '<S65>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S68>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S72>/In1' incorporates:
    //   Outport: '<S72>/Out1'

    proc_control_B.In1_p = proc_control_P.Out1_Y0_l;

    // End of SystemInitialize for SubSystem: '<S68>/Enabled Subsystem'

    // Start for MATLABSystem: '<S68>/SourceBlock'
    proc_control_DW.obj_l.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_l.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_B.b_zeroDelimTopic_hm[i] = tmp_9[i];
    }

    proc_control_B.b_zeroDelimTopic_hm[22] = '\x00';
    Sub_proc_control_31_5.createSubscriber(&proc_control_B.b_zeroDelimTopic_hm[0],
      1);
    proc_control_DW.obj_l.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S68>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S65>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S65>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S69>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S73>/In1' incorporates:
    //   Outport: '<S73>/Out1'

    proc_control_B.In1_i = proc_control_P.Out1_Y0_p;

    // End of SystemInitialize for SubSystem: '<S69>/Enabled Subsystem'

    // Start for MATLABSystem: '<S69>/SourceBlock'
    proc_control_DW.obj_dh.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_dh.isInitialized = 1;
    for (i = 0; i < 26; i++) {
      proc_control_B.b_zeroDelimTopic_dv[i] = tmp_a[i];
    }

    proc_control_B.b_zeroDelimTopic_dv[26] = '\x00';
    Sub_proc_control_31_1235.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_dv[0], 1);
    proc_control_DW.obj_dh.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S69>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S65>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S65>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S70>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S74>/In1' incorporates:
    //   Outport: '<S74>/Out1'

    proc_control_B.In1_e = proc_control_P.Out1_Y0_nb;

    // End of SystemInitialize for SubSystem: '<S70>/Enabled Subsystem'

    // Start for MATLABSystem: '<S70>/SourceBlock'
    proc_control_DW.obj_ow.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ow.isInitialized = 1;
    for (i = 0; i < 32; i++) {
      proc_control_B.b_zeroDelimTopic_i[i] = tmp_b[i];
    }

    proc_control_B.b_zeroDelimTopic_i[32] = '\x00';
    Sub_proc_control_31_1302.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_i[0], 1);
    proc_control_DW.obj_ow.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S70>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S65>/Subscribe2'

    // SystemInitialize for Atomic SubSystem: '<S65>/Subscribe3'
    // Start for MATLABSystem: '<S71>/SourceBlock'
    proc_control_DW.obj_p0.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_p0.isInitialized = 1;
    for (i = 0; i < 16; i++) {
      proc_control_B.b_zeroDelimTopic_oo[i] = tmp_c[i];
    }

    proc_control_B.b_zeroDelimTopic_oo[16] = '\x00';
    Sub_proc_control_31_1321.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_oo[0], 1);
    proc_control_DW.obj_p0.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S71>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S65>/Subscribe3'
    // End of SystemInitialize for SubSystem: '<S3>/AUV8'

    // SystemInitialize for Enabled SubSystem: '<S8>/Detph Mesurments'
    // InitializeConditions for UnitDelay: '<S274>/UD'
    //
    //  Block description for '<S274>/UD':
    //
    //   Store in Global RAM

    proc_control_DW.UD_DSTATE = proc_control_P.DiscreteDerivative_ICPrevScal_a;

    // InitializeConditions for DiscreteTransferFcn: '<S239>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states =
      proc_control_P.DiscreteTransferFcn1_InitialS_f;

    // SystemInitialize for Sum: '<S239>/Sum' incorporates:
    //   Outport: '<S239>/Depth Measurments'

    proc_control_B.zposition = proc_control_P.DepthMeasurments_Y0;

    // SystemInitialize for DiscreteTransferFcn: '<S239>/Discrete Transfer Fcn1' incorporates:
    //   Outport: '<S239>/Depth Measurments'

    proc_control_B.zvelocity = proc_control_P.DepthMeasurments_Y0;

    // End of SystemInitialize for SubSystem: '<S8>/Detph Mesurments'

    // SystemInitialize for Enabled SubSystem: '<S8>/DVL Mesurments'
    // InitializeConditions for Delay: '<S263>/Delay'
    proc_control_DW.Delay_DSTATE_i = proc_control_P.Delay_InitialCondition_l;

    // SystemInitialize for Enabled SubSystem: '<S263>/Subsystem2'
    // SystemInitialize for Fcn: '<S267>/q0' incorporates:
    //   Outport: '<S266>/Quat'

    proc_control_B.q0 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S267>/q1' incorporates:
    //   Outport: '<S266>/Quat'

    proc_control_B.q1 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S267>/q2' incorporates:
    //   Outport: '<S266>/Quat'

    proc_control_B.q2 = proc_control_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S267>/q3' incorporates:
    //   Outport: '<S266>/Quat'

    proc_control_B.q3 = proc_control_P.Quat_Y0;

    // End of SystemInitialize for SubSystem: '<S263>/Subsystem2'
    // End of SystemInitialize for SubSystem: '<S8>/DVL Mesurments'

    // SystemInitialize for Enabled SubSystem: '<S3>/Subsystem'
    // InitializeConditions for Memory: '<S87>/Memory'
    proc_control_DW.Memory_PreviousInput_i =
      proc_control_P.MinMaxRunningResettable_vinit;

    // InitializeConditions for Memory: '<S88>/Memory'
    proc_control_DW.Memory_PreviousInput_f =
      proc_control_P.MinMaxRunningResettable1_vinit;

    // SystemInitialize for Outport: '<S67>/y'
    proc_control_B.y = proc_control_P.y_Y0;

    // End of SystemInitialize for SubSystem: '<S3>/Subsystem'

    // SystemInitialize for Enabled SubSystem: '<S8>/Subsystem'
    // Start for DataStoreMemory: '<S285>/DataStoreMemory - P'
    std::memcpy(&proc_control_DW.P[0],
                &proc_control_P.DataStoreMemoryP_InitialValue[0], 169U * sizeof
                (real_T));

    // SystemInitialize for Enabled SubSystem: '<S285>/Correct1'
    // SystemInitialize for Outport: '<S286>/yBlockOrdering'
    proc_control_B.blockOrdering_o = proc_control_P.yBlockOrdering_Y0;

    // End of SystemInitialize for SubSystem: '<S285>/Correct1'
    for (i = 0; i < 13; i++) {
      // Start for DataStoreMemory: '<S285>/DataStoreMemory - x'
      proc_control_DW.x[i] = proc_control_P.DataStoreMemoryx_InitialValue[i];

      // SystemInitialize for DataStoreRead: '<S289>/Data Store Read' incorporates:
      //   DataStoreMemory: '<S285>/DataStoreMemory - x'
      //   Outport: '<S242>/xhat'

      proc_control_B.DataStoreRead[i] = proc_control_P.xhat_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S8>/Subsystem'

    // SystemInitialize for Enabled SubSystem: '<Root>/Sensor Manager'
    // SystemInitialize for Atomic SubSystem: '<S115>/Publish'
    // Start for MATLABSystem: '<S121>/SinkBlock'
    proc_control_DW.obj_ag.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ag.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_B.b_zeroDelimTopic_hm[i] = tmp_d[i];
    }

    proc_control_B.b_zeroDelimTopic_hm[22] = '\x00';
    Pub_proc_control_163.createPublisher(&proc_control_B.b_zeroDelimTopic_hm[0],
      1);
    proc_control_DW.obj_ag.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S121>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S115>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S114>/Publish'
    // Start for MATLABSystem: '<S117>/SinkBlock'
    proc_control_DW.obj_e.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_e.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_B.b_zeroDelimTopic_hm[i] = tmp_e[i];
    }

    proc_control_B.b_zeroDelimTopic_hm[22] = '\x00';
    Pub_proc_control_116.createPublisher(&proc_control_B.b_zeroDelimTopic_hm[0],
      1);
    proc_control_DW.obj_e.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S117>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S114>/Publish'

    // SystemInitialize for SignalConversion generated from: '<S6>/Output' incorporates:
    //   Outport: '<S6>/Output'

    proc_control_B.WorldPosition[0] = proc_control_P.Output_Y0.WorldPosition[0];
    proc_control_B.WorldPosition[1] = proc_control_P.Output_Y0.WorldPosition[1];
    proc_control_B.WorldPosition[2] = proc_control_P.Output_Y0.WorldPosition[2];

    // SystemInitialize for SignalConversion generated from: '<S6>/Output' incorporates:
    //   Outport: '<S6>/Output'

    proc_control_B.qS2W[0] = proc_control_P.Output_Y0.qS2W[0];
    proc_control_B.qS2W[1] = proc_control_P.Output_Y0.qS2W[1];
    proc_control_B.qS2W[2] = proc_control_P.Output_Y0.qS2W[2];
    proc_control_B.qS2W[3] = proc_control_P.Output_Y0.qS2W[3];

    // End of SystemInitialize for SubSystem: '<Root>/Sensor Manager'

    // SystemInitialize for Atomic SubSystem: '<S299>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S307>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S308>/In1' incorporates:
    //   Outport: '<S308>/Out1'

    proc_control_B.In1 = proc_control_P.Out1_Y0;

    // End of SystemInitialize for SubSystem: '<S307>/Enabled Subsystem'

    // Start for MATLABSystem: '<S307>/SourceBlock'
    proc_control_DW.obj_df.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_df.isInitialized = 1;
    for (i = 0; i < 34; i++) {
      proc_control_B.b_zeroDelimTopic_b[i] = tmp_f[i];
    }

    proc_control_B.b_zeroDelimTopic_b[34] = '\x00';
    Sub_proc_control_184_1581.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_b[0], 1);
    proc_control_DW.obj_df.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S307>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S299>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S298>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S305>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S306>/In1' incorporates:
    //   Outport: '<S306>/Out1'

    proc_control_B.In1_od = proc_control_P.Out1_Y0_pb;

    // End of SystemInitialize for SubSystem: '<S305>/Enabled Subsystem'

    // Start for MATLABSystem: '<S305>/SourceBlock'
    proc_control_DW.obj_cs.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_cs.isInitialized = 1;
    for (i = 0; i < 15; i++) {
      proc_control_B.b_zeroDelimTopic_cs[i] = tmp_g[i];
    }

    proc_control_B.b_zeroDelimTopic_cs[15] = '\x00';
    Sub_proc_control_184_1122.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_cs[0], 2);
    proc_control_DW.obj_cs.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S305>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S298>/Subscribe2'

    // SystemInitialize for IfAction SubSystem: '<S9>/SubsystemAuto'
    // InitializeConditions for UnitDelay: '<S310>/Delay Input1'
    //
    //  Block description for '<S310>/Delay Input1':
    //
    //   Store in Global RAM

    proc_control_DW.DelayInput1_DSTATE = proc_control_P.DetectRisePositive_vinit;

    // SystemInitialize for Atomic SubSystem: '<S301>/Publish5'
    // Start for MATLABSystem: '<S312>/SinkBlock'
    proc_control_DW.obj_i.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_i.isInitialized = 1;
    for (i = 0; i < 26; i++) {
      proc_control_B.b_zeroDelimTopic_dv[i] = tmp_h[i];
    }

    proc_control_B.b_zeroDelimTopic_dv[26] = '\x00';
    Pub_proc_control_184_1596.createPublisher
      (&proc_control_B.b_zeroDelimTopic_dv[0], 1);
    proc_control_DW.obj_i.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S312>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S301>/Publish5'

    // Start for MATLABSystem: '<S301>/MATLAB System'
    proc_control_DW.obj_o.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S301>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    proc_control_DW.obj_o.dummy = 999.0;

    //  Chiffre NULL
    for (i = 0; i < 13; i++) {
      proc_control_DW.obj_o.emptyArray[i] = proc_control_DW.obj_o.dummy;
    }

    //  Vecteur pose NULL
    proc_control_DW.obj_o.targetReachedCount = 0.0;
    for (i = 0; i < 7; i++) {
      proc_control_DW.obj_o.initialPose[i] = 0.0;
    }

    //  Buffer trajectoire
    for (i = 0; i < 78000; i++) {
      proc_control_DW.obj_o.poseBuffer[i] = proc_control_DW.obj_o.dummy;
    }

    proc_control_DW.obj_o.bufferCount = 0.0;
    proc_control_DW.obj_o.done = false;
    proc_control_DW.obj_o.init = false;

    // End of InitializeConditions for MATLABSystem: '<S301>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S9>/SubsystemAuto'

    // SystemInitialize for IfAction SubSystem: '<S9>/singleWpts Trajectory'
    // InitializeConditions for Delay: '<S302>/Delay1'
    proc_control_DW.Delay1_DSTATE_c = proc_control_P.Delay1_InitialCondition_k;

    // SystemInitialize for Atomic SubSystem: '<S302>/Subscribe'
    // Start for MATLABSystem: '<S315>/SourceBlock'
    proc_control_DW.obj_hd.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hd.isInitialized = 1;
    for (i = 0; i < 21; i++) {
      proc_control_B.b_zeroDelimTopic_eg[i] = tmp_i[i];
    }

    proc_control_B.b_zeroDelimTopic_eg[21] = '\x00';
    Sub_proc_control_184_1168.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_eg[0], 1);
    proc_control_DW.obj_hd.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S315>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S302>/Subscribe'

    // SystemInitialize for Enabled SubSystem: '<S302>/Subsystem1'
    // SystemInitialize for DataTypeConversion: '<S316>/Data Type Conversion1' incorporates:
    //   Outport: '<S316>/Out1'

    proc_control_B.DataTypeConversion1[0] = proc_control_P.Out1_Y0_i;
    proc_control_B.DataTypeConversion1[1] = proc_control_P.Out1_Y0_i;

    // SystemInitialize for DataTypeConversion: '<S316>/Data Type Conversion2' incorporates:
    //   Outport: '<S316>/Out1'

    proc_control_B.DataTypeConversion2 = proc_control_P.Out1_Y0_i;

    // SystemInitialize for Enabled SubSystem: '<S302>/Pre-traitement'
    for (i = 0; i < 6; i++) {
      // SystemInitialize for DataTypeConversion: '<S316>/Data Type Conversion' incorporates:
      //   Outport: '<S316>/Out1'

      proc_control_B.DataTypeConversion[i] = proc_control_P.Out1_Y0_i;

      // SystemInitialize for Selector: '<S314>/Selector' incorporates:
      //   DataTypeConversion: '<S316>/Data Type Conversion'
      //   Outport: '<S314>/linWpts'
      //   Outport: '<S316>/Out1'

      proc_control_B.Selector[i] = proc_control_P.linWpts_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S302>/Subsystem1'
    for (i = 0; i < 8; i++) {
      // SystemInitialize for Selector: '<S314>/Selector1' incorporates:
      //   Outport: '<S314>/RotWpts'

      proc_control_B.Selector1[i] = proc_control_P.RotWpts_Y0;
    }

    // SystemInitialize for Concatenate: '<S314>/Matrix Concatenate' incorporates:
    //   Outport: '<S314>/time'

    proc_control_B.MatrixConcatenate[0] = proc_control_P.time_Y0;
    proc_control_B.MatrixConcatenate[1] = proc_control_P.time_Y0;
    for (i = 0; i < 7; i++) {
      // SystemInitialize for Selector: '<S314>/Selector4' incorporates:
      //   Outport: '<S314>/target'

      proc_control_B.Selector4[i] = proc_control_P.target_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S302>/Pre-traitement'

    // SystemInitialize for Resettable SubSystem: '<S302>/Trajectory generator'
    // InitializeConditions for DiscreteIntegrator: '<S317>/Discrete-Time Integrator' 
    proc_control_DW.DiscreteTimeIntegrator_DSTATE =
      proc_control_P.DiscreteTimeIntegrator_IC;

    // Start for MATLABSystem: '<S317>/Rotation Trajectory'
    std::memcpy(&proc_control_DW.obj_j.TimeScaling[0], &tmp_j[0], 33U * sizeof
                (real_T));
    proc_control_DW.obj_j.isInitialized = 1;
    proc_control_DW.obj_j.TunablePropsChanged = false;

    // Start for MATLABSystem: '<S319>/Polynomial Trajectory1'
    std::memset(&proc_control_DW.obj_jo.AccelerationBoundaryCondition[0], 0, 10U
                * sizeof(real_T));
    proc_control_DW.obj_jo.isInitialized = 0;
    for (i = 0; i < 6; i++) {
      proc_control_DW.obj_jo.VelocityBoundaryCondition[i] =
        proc_control_P.PolynomialTrajectory1_VelocityB[i];
    }

    proc_control_DW.obj_jo.isInitialized = 1;
    proc_control_DW.obj_jo.TunablePropsChanged = false;

    // End of Start for MATLABSystem: '<S319>/Polynomial Trajectory1'
    // End of SystemInitialize for SubSystem: '<S302>/Trajectory generator'

    // InitializeConditions for MATLABSystem: '<S302>/MATLAB System1'
    // ========================================================================== 
    //  Fonctions Principales
    // ========================================================================== 
    //  Fonction appeler a l'initialisation
    //  Perform one-time calculations, such as computing constants
    //  Fonction Reset
    //  Initialize / reset discrete-state properties
    for (i = 0; i < 18; i++) {
      proc_control_DW.obj_a.poseList[i] = 999.0;
    }

    proc_control_DW.obj_a.poseList[0] = 0.0;
    proc_control_DW.obj_a.poseList[2] = 0.0;
    proc_control_DW.obj_a.poseList[4] = 0.0;
    proc_control_DW.obj_a.poseList[6] = 1.0;
    proc_control_DW.obj_a.poseList[8] = 0.0;
    proc_control_DW.obj_a.poseList[10] = 0.0;
    proc_control_DW.obj_a.poseList[12] = 0.0;
    proc_control_DW.obj_a.poseList[14] = 0.0;
    proc_control_DW.obj_a.poseList[16] = 0.0;

    // initCond(1,1:7);
    for (i = 0; i < 7; i++) {
      proc_control_DW.obj_a.initcond[i] = tmp_k[i];
    }

    proc_control_DW.obj_a.i = 2.0;

    // End of InitializeConditions for MATLABSystem: '<S302>/MATLAB System1'

    // Start for MATLABSystem: '<S302>/MATLAB System'
    proc_control_DW.obj.linearConvergence =
      proc_control_P.MATLABSystem_linearConvergence;
    proc_control_DW.obj.quaternionConvergence =
      proc_control_P.MATLABSystem_quaternionConverge;
    proc_control_DW.obj.TargetThreshold =
      proc_control_P.MATLABSystem_TargetThreshold;
    proc_control_DW.obj.isInitialized = 1;

    //  Perform one-time calculations, such as computing constants
    proc_control_DW.obj.generationNumber = 0.0;
    proc_control_DW.obj.dummy = 999.0;

    //  Chiffre NULL
    for (i = 0; i < 13; i++) {
      proc_control_DW.obj.emptyArray[i] = proc_control_DW.obj.dummy;
    }

    //  Vecteur pose NULL
    proc_control_DW.obj.targetReachedCount = 0.0;

    //  Buffer trajectoire
    for (i = 0; i < 78013; i++) {
      proc_control_DW.obj.poseBuffer[i] = proc_control_DW.obj.dummy;
    }

    proc_control_DW.obj.bufferCount = 0.0;
    proc_control_DW.obj.done = false;
    proc_control_DW.obj.init = 0.0;

    // End of Start for MATLABSystem: '<S302>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S9>/singleWpts Trajectory'
    //  Fonction reset
    //  Initialize / reset discrete-state properties
    for (i = 0; i < 130; i++) {
      // SystemInitialize for Merge generated from: '<S9>/Merge'
      proc_control_B.Reference[i] = proc_control_P.Merge_1_InitialOutput;
    }

    // SystemInitialize for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Start for SwitchCase: '<S133>/Switch Case'
    proc_control_DW.SwitchCase_ActiveSubsystem_l = -1;

    // InitializeConditions for Delay: '<S7>/Delay'
    for (i = 0; i < 8; i++) {
      proc_control_DW.Delay_DSTATE_g[i] =
        proc_control_P.Delay_InitialCondition_jd[i];
    }

    // End of InitializeConditions for Delay: '<S7>/Delay'

    // InitializeConditions for Delay: '<S135>/Delay'
    proc_control_DW.Delay_DSTATE_k = proc_control_P.Delay_InitialCondition_i;

    // SystemInitialize for Enabled SubSystem: '<S7>/MPC manager'
    // SystemInitialize for Atomic SubSystem: '<S134>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S234>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S236>/In1' incorporates:
    //   Outport: '<S236>/Out1'

    proc_control_B.In1_o = proc_control_P.Out1_Y0_c;

    // End of SystemInitialize for SubSystem: '<S234>/Enabled Subsystem'

    // Start for MATLABSystem: '<S234>/SourceBlock'
    proc_control_DW.obj_hh.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_hh.isInitialized = 1;
    for (i = 0; i < 27; i++) {
      proc_control_B.b_zeroDelimTopic_d[i] = tmp_l[i];
    }

    proc_control_B.b_zeroDelimTopic_d[27] = '\x00';
    Sub_proc_control_182_1643.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_d[0], 1);
    proc_control_DW.obj_hh.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S234>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S134>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S134>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S233>/Enabled Subsystem'
    // SystemInitialize for SignalConversion generated from: '<S235>/In1' incorporates:
    //   Outport: '<S235>/Out1'

    proc_control_B.In1_f = proc_control_P.Out1_Y0_m;

    // End of SystemInitialize for SubSystem: '<S233>/Enabled Subsystem'

    // Start for MATLABSystem: '<S233>/SourceBlock'
    proc_control_DW.obj_k4.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_k4.isInitialized = 1;
    for (i = 0; i < 23; i++) {
      proc_control_B.b_zeroDelimTopic_c[i] = tmp_m[i];
    }

    proc_control_B.b_zeroDelimTopic_c[23] = '\x00';
    Sub_proc_control_182_1620.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_c[0], 1);
    proc_control_DW.obj_k4.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S233>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S134>/Subscribe'

    // Start for MATLABSystem: '<S134>/MPC manager'
    proc_control_DW.obj_f.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S134>/MPC manager'
    //         %% Fonction execute a chaque iteration
    //  Perform one-time calculations, such as computing constants
    proc_contr_mpcManager_resetImpl(&proc_control_DW.obj_f);

    // SystemInitialize for MATLABSystem: '<S134>/MPC manager' incorporates:
    //   Outport: '<S134>/MPC param'

    std::memcpy(&proc_control_B.mvmin[0], &proc_control_P.MPCparam_Y0.mvmin[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S134>/MPC manager' incorporates:
    //   Outport: '<S134>/MPC param'

    std::memcpy(&proc_control_B.mvmax[0], &proc_control_P.MPCparam_Y0.mvmax[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S134>/MPC manager' incorporates:
    //   Outport: '<S134>/MPC param'

    std::memcpy(&proc_control_B.ywt[0], &proc_control_P.MPCparam_Y0.ywt[0], 13U *
                sizeof(real_T));

    // SystemInitialize for MATLABSystem: '<S134>/MPC manager' incorporates:
    //   Outport: '<S134>/MPC param'

    std::memcpy(&proc_control_B.mvwt[0], &proc_control_P.MPCparam_Y0.mvwt[0],
                sizeof(real_T) << 3U);

    // SystemInitialize for MATLABSystem: '<S134>/MPC manager' incorporates:
    //   Outport: '<S134>/MPC param'

    std::memcpy(&proc_control_B.dmwwt[0], &proc_control_P.MPCparam_Y0.dmwwt[0],
                sizeof(real_T) << 3U);
    for (i = 0; i < 8; i++) {
      // SystemInitialize for MATLABSystem: '<S134>/MPC manager' incorporates:
      //   Outport: '<S134>/MPC param'

      proc_control_B.thrustersStatus[i] =
        proc_control_P.MPCparam_Y0.thrustersStatus[i];
    }

    // End of SystemInitialize for SubSystem: '<S7>/MPC manager'

    // SystemInitialize for IfAction SubSystem: '<S133>/Adaptive MPC quaternion ' 
    // InitializeConditions for Memory: '<S144>/Memory'
    std::memcpy(&proc_control_DW.Memory_PreviousInput_g[0],
                &proc_control_P.Memory_InitialCondition[0], 252U * sizeof
                (boolean_T));

    // InitializeConditions for UnitDelay: '<S144>/last_mv'
    std::memcpy(&proc_control_DW.last_mv_DSTATE_f[0],
                &proc_control_P.last_mv_InitialCondition[0], sizeof(real_T) <<
                3U);

    // InitializeConditions for Delay: '<S136>/Delay1' incorporates:
    //   UnitDelay: '<S144>/last_mv'

    std::memcpy(&proc_control_DW.Delay1_DSTATE_e[0],
                &proc_control_P.Delay1_InitialCondition[0], sizeof(real_T) << 3U);

    // InitializeConditions for MATLABSystem: '<S136>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.obj_b.lastQuat[0] = 1.0;
    proc_control_DW.obj_b.lastQuat[1] = 0.0;
    proc_control_DW.obj_b.lastQuat[2] = 0.0;
    proc_control_DW.obj_b.lastQuat[3] = 0.0;
    std::memcpy(&proc_control_DW.obj_b.xl[0], &tmp_n[0], 13U * sizeof(real_T));

    // End of SystemInitialize for SubSystem: '<S133>/Adaptive MPC quaternion '

    // SystemInitialize for IfAction SubSystem: '<S133>/JoyStick OpenLoop'
    // InitializeConditions for UnitDelay: '<S174>/UD'
    //
    //  Block description for '<S174>/UD':
    //
    //   Store in Global RAM

    for (i = 0; i < 6; i++) {
      proc_control_DW.UD_DSTATE_i[i] =
        proc_control_P.DiscreteDerivative_ICPrevScaled;
    }

    // End of InitializeConditions for UnitDelay: '<S174>/UD'

    // Start for MATLABSystem: '<S139>/MATLAB System'
    proc_control_DW.obj_m.k = proc_control_P.MATLABSystem_k;
    std::memcpy(&proc_control_DW.obj_m.binv[0], &proc_control_P.binv[0], 48U *
                sizeof(real_T));
    proc_control_DW.obj_m.mass = proc_control_P.physics.mass;
    proc_control_DW.obj_m.volume = proc_control_P.physics.volume;
    proc_control_DW.obj_m.height = proc_control_P.physics.height;
    std::memcpy(&proc_control_DW.obj_m.I[0], &proc_control_P.physics.I[0], 9U *
                sizeof(real_T));
    proc_control_DW.obj_m.RG[0] = proc_control_P.physics.RG[0];
    proc_control_DW.obj_m.RB[0] = proc_control_P.physics.RB[0];
    proc_control_DW.obj_m.RG[1] = proc_control_P.physics.RG[1];
    proc_control_DW.obj_m.RB[1] = proc_control_P.physics.RB[1];
    proc_control_DW.obj_m.RG[2] = proc_control_P.physics.RG[2];
    proc_control_DW.obj_m.RB[2] = proc_control_P.physics.RB[2];
    for (i = 0; i < 6; i++) {
      proc_control_DW.obj_m.AddedMass[i] = proc_control_P.physics.AddedMass[i];
      proc_control_DW.obj_m.CDL[i] = proc_control_P.physics.CDL[i];
      proc_control_DW.obj_m.CDQ[i] = proc_control_P.physics.CDQ[i];
    }

    proc_control_DW.obj_m.AF[0] = proc_control_P.physics.AF[0];
    proc_control_DW.obj_m.AF[1] = proc_control_P.physics.AF[1];
    proc_control_DW.obj_m.AF[2] = proc_control_P.physics.AF[2];
    proc_control_DW.obj_m.g = proc_control_P.physics.g;
    proc_control_DW.obj_m.rho = proc_control_P.physics.rho;
    proc_control_DW.obj_m.isInitialized = 1;

    // End of Start for MATLABSystem: '<S139>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S133>/JoyStick OpenLoop'

    // SystemInitialize for IfAction SubSystem: '<S133>/LTV MPC quaternion '
    // InitializeConditions for UnitDelay: '<S178>/last_mv'
    //  Perform one-time calculations, such as computing constants
    // [M,C,D,Gq] = AUVModelMatrices(in1,in2)
    //  Initialize / reset discrete-state properties
    std::memcpy(&proc_control_DW.last_mv_DSTATE[0],
                &proc_control_P.last_mv_InitialCondition_o[0], sizeof(real_T) <<
                3U);

    // InitializeConditions for Delay: '<S140>/Delay1'
    std::memcpy(&proc_control_DW.Delay1_DSTATE[0],
                &proc_control_P.Delay1_InitialCondition_n[0], 88U * sizeof
                (real_T));

    // InitializeConditions for Memory: '<S178>/Memory'
    std::memcpy(&proc_control_DW.Memory_PreviousInput[0],
                &proc_control_P.Memory_InitialCondition_p[0], 252U * sizeof
                (boolean_T));

    // End of SystemInitialize for SubSystem: '<S133>/LTV MPC quaternion '

    // SystemInitialize for IfAction SubSystem: '<S133>/Quaternion Non linear MPC (Not for codegen)' 
    // InitializeConditions for Delay: '<S141>/Delay'
    std::memcpy(&proc_control_DW.Delay_DSTATE_a[0],
                &proc_control_P.Delay_InitialCondition[0], sizeof(real_T) << 3U);

    // InitializeConditions for Delay: '<S211>/mv_Delay'
    proc_control_DW.icLoad = true;

    // InitializeConditions for Delay: '<S211>/x_Delay'
    proc_control_DW.icLoad_a = true;

    // InitializeConditions for Delay: '<S211>/slack_delay'
    proc_control_DW.icLoad_j = true;

    // End of SystemInitialize for SubSystem: '<S133>/Quaternion Non linear MPC (Not for codegen)' 
    for (i = 0; i < 10; i++) {
      // SystemInitialize for Merge: '<S133>/Merge'
      proc_control_B.Merge[i] = proc_control_P.Merge_InitialOutput;
    }

    // End of SystemInitialize for SubSystem: '<Root>/Subsystem Controller'

    // SystemInitialize for Merge generated from: '<S9>/Merge'
    proc_control_B.isReached = proc_control_P.Merge_2_InitialOutput;

    // SystemInitialize for Merge generated from: '<S9>/Merge'
    proc_control_B.isTrajDone = proc_control_P.Merge_3_InitialOutput;

    // SystemInitialize for Enabled SubSystem: '<Root>/Send Data to ROS'
    // SystemInitialize for Atomic SubSystem: '<S5>/Publish2'
    // Start for MATLABSystem: '<S109>/SinkBlock'
    proc_control_DW.obj_p.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_p.isInitialized = 1;
    for (i = 0; i < 31; i++) {
      proc_control_B.b_zeroDelimTopic_j[i] = tmp_o[i];
    }

    proc_control_B.b_zeroDelimTopic_j[31] = '\x00';
    Pub_proc_control_104.createPublisher(&proc_control_B.b_zeroDelimTopic_j[0],
      1);
    proc_control_DW.obj_p.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S109>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish2'

    // SystemInitialize for Atomic SubSystem: '<S5>/Subsystem'
    // SystemInitialize for Atomic SubSystem: '<S110>/Publish5'
    // Start for MATLABSystem: '<S113>/SinkBlock'
    proc_control_DW.obj_i1.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_i1.isInitialized = 1;
    for (i = 0; i < 28; i++) {
      proc_control_B.b_zeroDelimTopic_g[i] = tmp_p[i];
    }

    proc_control_B.b_zeroDelimTopic_g[28] = '\x00';
    Pub_proc_control_287.createPublisher(&proc_control_B.b_zeroDelimTopic_g[0],
      1);
    proc_control_DW.obj_i1.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S113>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S110>/Publish5'
    // End of SystemInitialize for SubSystem: '<S5>/Subsystem'
    for (i = 0; i < 8; i++) {
      // SystemInitialize for SignalConversion generated from: '<S5>/mv' incorporates:
      //   Outport: '<S5>/mv'

      proc_control_B.BufferToMakeInportVirtual_Ins_e[i] = proc_control_P.mv_Y0;

      // SystemInitialize for SignalConversion generated from: '<S5>/thrust' incorporates:
      //   Outport: '<S5>/mv'
      //   Outport: '<S5>/thrust'
      //   SignalConversion generated from: '<S5>/mv'

      proc_control_B.BufferToMakeInportVirtual_Inser[i] =
        proc_control_P.thrust_Y0;
    }

    // End of SystemInitialize for SubSystem: '<Root>/Send Data to ROS'

    // SystemInitialize for Enabled SubSystem: '<Root>/Modèle Physique'
    // InitializeConditions for DiscreteTransferFcn: '<S17>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_e =
      proc_control_P.DiscreteTransferFcn1_InitialSta;

    // InitializeConditions for DiscreteTransferFcn: '<S18>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_k =
      proc_control_P.DiscreteTransferFcn1_InitialS_k;

    // InitializeConditions for DiscreteTransferFcn: '<S19>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_o =
      proc_control_P.DiscreteTransferFcn1_InitialS_g;

    // InitializeConditions for DiscreteTransferFcn: '<S20>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_i =
      proc_control_P.DiscreteTransferFcn1_InitialS_h;

    // InitializeConditions for DiscreteTransferFcn: '<S21>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_g =
      proc_control_P.DiscreteTransferFcn1_InitialS_m;

    // InitializeConditions for DiscreteTransferFcn: '<S22>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_h =
      proc_control_P.DiscreteTransferFcn1_InitialS_b;

    // InitializeConditions for DiscreteTransferFcn: '<S23>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_l =
      proc_control_P.DiscreteTransferFcn1_Initial_mm;

    // InitializeConditions for DiscreteTransferFcn: '<S24>/Discrete Transfer Fcn1' 
    proc_control_DW.DiscreteTransferFcn1_states_ge =
      proc_control_P.DiscreteTransferFcn1_Initial_gv;

    // InitializeConditions for UniformRandomNumber: '<S12>/ Drift'
    i = static_cast<int32_T>(static_cast<uint32_T>(proc_control_P.dSeedX) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>(proc_control_P.dSeedX) &
      32768U);
    for (int32_T Ns{0}; Ns < 6; Ns++) {
      tseed = ((((static_cast<uint32_T>(proc_control_P.dSeedX) -
                  (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
      if (tseed < 1U) {
        tseed = 1144108930U;
      } else if (tseed > 2147483646U) {
        tseed = 2147483646U;
      }

      proc_control_DW.RandSeed[Ns] = tseed;
      proc_control_DW.Drift_NextOutput[Ns] = (proc_control_P.dmax[Ns] -
        proc_control_P.dmin[Ns]) * rt_urand_Upu32_Yd_f_pw_snf
        (&proc_control_DW.RandSeed[Ns]) + proc_control_P.dmin[Ns];
    }

    // End of InitializeConditions for UniformRandomNumber: '<S12>/ Drift'

    // InitializeConditions for UnitDelay: '<S1>/Unit Delay'
    std::memcpy(&proc_control_DW.UnitDelay_DSTATE[0],
                &proc_control_P.UnitDelay_InitialCondition[0], 13U * sizeof
                (real_T));

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator' 
    proc_control_DW.DiscreteTimeIntegrator_PrevRese = 2;
    proc_control_DW.DiscreteTimeIntegrator_IC_LOADI = 1U;

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' 
    proc_control_DW.DiscreteTimeIntegrator1_PrevRes = 2;

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator2' 
    proc_control_DW.DiscreteTimeIntegrator2_PrevRes = 2;
    proc_control_DW.DiscreteTimeIntegrator2_IC_LOAD = 1U;

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   Constant: '<S1>/Initial Angular Rates'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[0] =
      proc_control_P.InitialAngularRates_Value[0];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S1>/Initial Body velocity '

    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[0] =
      proc_control_P.InitialBodyvelocity_Value[0];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   Constant: '<S1>/Initial Angular Rates'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[1] =
      proc_control_P.InitialAngularRates_Value[1];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S1>/Initial Body velocity '

    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[1] =
      proc_control_P.InitialBodyvelocity_Value[1];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' incorporates:
    //   Constant: '<S1>/Initial Angular Rates'

    proc_control_DW.DiscreteTimeIntegrator1_DSTATE[2] =
      proc_control_P.InitialAngularRates_Value[2];

    // InitializeConditions for DiscreteIntegrator: '<S1>/Discrete-Time Integrator3' incorporates:
    //   Constant: '<S1>/Initial Body velocity '

    proc_control_DW.DiscreteTimeIntegrator3_DSTATE[2] =
      proc_control_P.InitialBodyvelocity_Value[2];
    proc_control_DW.DiscreteTimeIntegrator3_PrevRes = 2;

    // InitializeConditions for RandomNumber: '<S28>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_P.BandLimitedWhiteNoise_seed)
                - (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_j = tseed;
    proc_control_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_j) * proc_control_P.WhiteNoise_StdDev +
      proc_control_P.WhiteNoise_Mean;

    // End of InitializeConditions for RandomNumber: '<S28>/White Noise'

    // InitializeConditions for RandomNumber: '<S29>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise1_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise1_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_P.BandLimitedWhiteNoise1_seed)
                - (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_d = tseed;
    proc_control_DW.NextOutput_b = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_d) * proc_control_P.WhiteNoise_StdDev_d +
      proc_control_P.WhiteNoise_Mean_e;

    // End of InitializeConditions for RandomNumber: '<S29>/White Noise'

    // InitializeConditions for RandomNumber: '<S30>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise2_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise2_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_P.BandLimitedWhiteNoise2_seed)
                - (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_e = tseed;
    proc_control_DW.NextOutput_g = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_e) * proc_control_P.WhiteNoise_StdDev_e +
      proc_control_P.WhiteNoise_Mean_c;

    // End of InitializeConditions for RandomNumber: '<S30>/White Noise'

    // InitializeConditions for RandomNumber: '<S31>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise3_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise3_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_P.BandLimitedWhiteNoise3_seed)
                - (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_n = tseed;
    proc_control_DW.NextOutput_l = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_n) * proc_control_P.WhiteNoise_StdDev_j +
      proc_control_P.WhiteNoise_Mean_p;

    // End of InitializeConditions for RandomNumber: '<S31>/White Noise'

    // InitializeConditions for RandomNumber: '<S32>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise4_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_P.BandLimitedWhiteNoise4_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_P.BandLimitedWhiteNoise4_seed)
                - (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_DW.RandSeed_b = tseed;
    proc_control_DW.NextOutput_e = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_DW.RandSeed_b) * proc_control_P.WhiteNoise_StdDev_p +
      proc_control_P.WhiteNoise_Mean_l;

    // End of InitializeConditions for RandomNumber: '<S32>/White Noise'

    // SystemInitialize for Atomic SubSystem: '<S16>/Publish2'
    // Start for MATLABSystem: '<S27>/SinkBlock'
    proc_control_DW.obj_jj.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_jj.isInitialized = 1;
    for (i = 0; i < 29; i++) {
      proc_control_B.b_zeroDelimTopic_l[i] = tmp_q[i];
    }

    proc_control_B.b_zeroDelimTopic_l[29] = '\x00';
    Pub_proc_control_19_1361.createPublisher(&proc_control_B.b_zeroDelimTopic_l
      [0], 1);
    proc_control_DW.obj_jj.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S27>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S16>/Publish2'

    // SystemInitialize for Atomic SubSystem: '<S33>/Subscribe'
    // Start for MATLABSystem: '<S42>/SourceBlock'
    proc_control_DW.obj_n.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_n.isInitialized = 1;
    for (i = 0; i < 36; i++) {
      proc_control_B.b_zeroDelimTopic_e[i] = tmp_r[i];
    }

    proc_control_B.b_zeroDelimTopic_e[36] = '\x00';
    Sub_proc_control_19_1385.createSubscriber
      (&proc_control_B.b_zeroDelimTopic_e[0], 1);
    proc_control_DW.obj_n.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S42>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S33>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S33>/Publish'
    // Start for MATLABSystem: '<S41>/SinkBlock'
    proc_control_DW.obj_d.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_d.isInitialized = 1;
    for (i = 0; i < 32; i++) {
      proc_control_B.b_zeroDelimTopic_i[i] = tmp_s[i];
    }

    proc_control_B.b_zeroDelimTopic_i[32] = '\x00';
    Pub_proc_control_19_1384.createPublisher(&proc_control_B.b_zeroDelimTopic_i
      [0], 1);
    proc_control_DW.obj_d.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S41>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S33>/Publish'

    // Start for MATLABSystem: '<S33>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    proc_control_DW.method = 7U;
    proc_control_DW.state = 1144108930U;
    proc_control_DW.state_k[0] = 362436069U;
    proc_control_DW.state_k[1] = 521288629U;
    proc_control_DW.obj_fj.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S33>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    // this.pingerPosition = this.pingerStartPosition;
    proc_control_DW.obj_fj.pingerPosition.X = 10.0;
    proc_control_DW.obj_fj.pingerPosition.Y = 0.0;
    proc_control_DW.obj_fj.pingerPosition.Z = 5.0;

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_B.y_d[0] = proc_control_P.CleanOutput_Y0.x.Quaternion[0];

    // SystemInitialize for Sum: '<S14>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_B.Quaternion[0] = proc_control_P.SensorsOutput_Y0.Quaternion[0];

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_B.y_d[1] = proc_control_P.CleanOutput_Y0.x.Quaternion[1];

    // SystemInitialize for Sum: '<S14>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_B.Quaternion[1] = proc_control_P.SensorsOutput_Y0.Quaternion[1];

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_B.y_d[2] = proc_control_P.CleanOutput_Y0.x.Quaternion[2];

    // SystemInitialize for Sum: '<S14>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_B.Quaternion[2] = proc_control_P.SensorsOutput_Y0.Quaternion[2];

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_B.y_d[3] = proc_control_P.CleanOutput_Y0.x.Quaternion[3];

    // SystemInitialize for Sum: '<S14>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_B.Quaternion[3] = proc_control_P.SensorsOutput_Y0.Quaternion[3];

    // End of SystemInitialize for SubSystem: '<Root>/Modèle Physique'

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S93>/Publish'
    // Start for MATLABSystem: '<S106>/SinkBlock'
    proc_control_DW.obj_ap.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ap.isInitialized = 1;
    for (i = 0; i < 8; i++) {
      b_zeroDelimTopic[i] = tmp_t[i];
    }

    b_zeroDelimTopic[8] = '\x00';
    Pub_proc_control_75.createPublisher(&b_zeroDelimTopic[0], 1);
    proc_control_DW.obj_ap.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S106>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S93>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S89>/Publish'
    // Start for MATLABSystem: '<S96>/SinkBlock'
    proc_control_DW.obj_kw.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_kw.isInitialized = 1;
    Pub_proc_control_41.createPublisher(&proc_control_B.b_zeroDelimTopic_lu[0],
      1);
    proc_control_DW.obj_kw.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S89>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S90>/Publish Depth'
    // Start for MATLABSystem: '<S98>/SinkBlock'
    proc_control_DW.obj_k.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_k.isInitialized = 1;
    Pub_proc_control_243.createPublisher(&proc_control_B.b_zeroDelimTopic_bn[0],
      1);
    proc_control_DW.obj_k.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S90>/Publish Depth'

    // SystemInitialize for Atomic SubSystem: '<S91>/Publish imu_info'
    // Start for MATLABSystem: '<S101>/SinkBlock'
    proc_control_DW.obj_ab.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_ab.isInitialized = 1;
    Pub_proc_control_47.createPublisher(&proc_control_B.b_zeroDelimTopic_h[0], 1);
    proc_control_DW.obj_ab.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S91>/Publish imu_info'

    // SystemInitialize for Atomic SubSystem: '<S92>/Publish Ping'
    // Start for MATLABSystem: '<S103>/SinkBlock'
    proc_control_DW.obj_c.matlabCodegenIsDeleted = false;
    proc_control_DW.obj_c.isInitialized = 1;
    Pub_proc_control_350.createPublisher(&proc_control_B.b_zeroDelimTopic_hn[0],
      1);
    proc_control_DW.obj_c.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S92>/Publish Ping'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
  }
}

// Model terminate function
void proc_control::terminate()
{
  // Terminate for Atomic SubSystem: '<Root>/Subsystem1'
  // Terminate for Atomic SubSystem: '<S10>/Subscribe2'
  // Terminate for MATLABSystem: '<S321>/SourceBlock'
  if (!proc_control_DW.obj_mt.matlabCodegenIsDeleted) {
    proc_control_DW.obj_mt.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S321>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe2'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe3'
  // Terminate for MATLABSystem: '<S322>/SourceBlock'
  if (!proc_control_DW.obj_oz.matlabCodegenIsDeleted) {
    proc_control_DW.obj_oz.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S322>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe3'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe1'
  // Terminate for MATLABSystem: '<S320>/SourceBlock'
  if (!proc_control_DW.obj_hb.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hb.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S320>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S10>/startSim'
  // Terminate for MATLABSystem: '<S325>/SourceBlock'
  if (!proc_control_DW.obj_bh.matlabCodegenIsDeleted) {
    proc_control_DW.obj_bh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S325>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/startSim'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe5'
  // Terminate for MATLABSystem: '<S324>/SourceBlock'
  if (!proc_control_DW.obj_fx.matlabCodegenIsDeleted) {
    proc_control_DW.obj_fx.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S324>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe5'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe4'
  // Terminate for MATLABSystem: '<S323>/SourceBlock'
  if (!proc_control_DW.obj_h.matlabCodegenIsDeleted) {
    proc_control_DW.obj_h.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S323>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe4'
  // End of Terminate for SubSystem: '<Root>/Subsystem1'

  // Terminate for IfAction SubSystem: '<S3>/Simulation'
  // Terminate for Atomic SubSystem: '<S66>/Subscribe'
  // Terminate for MATLABSystem: '<S76>/SourceBlock'
  if (!proc_control_DW.obj_i4.matlabCodegenIsDeleted) {
    proc_control_DW.obj_i4.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S76>/SourceBlock'
  // End of Terminate for SubSystem: '<S66>/Subscribe'

  // Terminate for Atomic SubSystem: '<S66>/Subscribe1'
  // Terminate for MATLABSystem: '<S78>/SourceBlock'
  if (!proc_control_DW.obj_bg.matlabCodegenIsDeleted) {
    proc_control_DW.obj_bg.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S78>/SourceBlock'
  // End of Terminate for SubSystem: '<S66>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S66>/Subscribe depth'
  // Terminate for MATLABSystem: '<S77>/SourceBlock'
  if (!proc_control_DW.obj_df1.matlabCodegenIsDeleted) {
    proc_control_DW.obj_df1.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S77>/SourceBlock'
  // End of Terminate for SubSystem: '<S66>/Subscribe depth'

  // Terminate for Atomic SubSystem: '<S66>/Subscribe2'
  // Terminate for MATLABSystem: '<S79>/SourceBlock'
  if (!proc_control_DW.obj_hx.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hx.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S79>/SourceBlock'
  // End of Terminate for SubSystem: '<S66>/Subscribe2'
  // End of Terminate for SubSystem: '<S3>/Simulation'

  // Terminate for IfAction SubSystem: '<S3>/AUV8'
  // Terminate for Atomic SubSystem: '<S65>/Subscribe'
  // Terminate for MATLABSystem: '<S68>/SourceBlock'
  if (!proc_control_DW.obj_l.matlabCodegenIsDeleted) {
    proc_control_DW.obj_l.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S68>/SourceBlock'
  // End of Terminate for SubSystem: '<S65>/Subscribe'

  // Terminate for Atomic SubSystem: '<S65>/Subscribe1'
  // Terminate for MATLABSystem: '<S69>/SourceBlock'
  if (!proc_control_DW.obj_dh.matlabCodegenIsDeleted) {
    proc_control_DW.obj_dh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S69>/SourceBlock'
  // End of Terminate for SubSystem: '<S65>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S65>/Subscribe2'
  // Terminate for MATLABSystem: '<S70>/SourceBlock'
  if (!proc_control_DW.obj_ow.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ow.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S70>/SourceBlock'
  // End of Terminate for SubSystem: '<S65>/Subscribe2'

  // Terminate for Atomic SubSystem: '<S65>/Subscribe3'
  // Terminate for MATLABSystem: '<S71>/SourceBlock'
  if (!proc_control_DW.obj_p0.matlabCodegenIsDeleted) {
    proc_control_DW.obj_p0.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S71>/SourceBlock'
  // End of Terminate for SubSystem: '<S65>/Subscribe3'
  // End of Terminate for SubSystem: '<S3>/AUV8'

  // Terminate for Enabled SubSystem: '<Root>/Sensor Manager'
  // Terminate for Atomic SubSystem: '<S115>/Publish'
  // Terminate for MATLABSystem: '<S121>/SinkBlock'
  if (!proc_control_DW.obj_ag.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ag.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S121>/SinkBlock'
  // End of Terminate for SubSystem: '<S115>/Publish'

  // Terminate for Atomic SubSystem: '<S114>/Publish'
  // Terminate for MATLABSystem: '<S117>/SinkBlock'
  if (!proc_control_DW.obj_e.matlabCodegenIsDeleted) {
    proc_control_DW.obj_e.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S117>/SinkBlock'
  // End of Terminate for SubSystem: '<S114>/Publish'
  // End of Terminate for SubSystem: '<Root>/Sensor Manager'

  // Terminate for Atomic SubSystem: '<S299>/Subscribe'
  // Terminate for MATLABSystem: '<S307>/SourceBlock'
  if (!proc_control_DW.obj_df.matlabCodegenIsDeleted) {
    proc_control_DW.obj_df.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S307>/SourceBlock'
  // End of Terminate for SubSystem: '<S299>/Subscribe'

  // Terminate for Atomic SubSystem: '<S298>/Subscribe2'
  // Terminate for MATLABSystem: '<S305>/SourceBlock'
  if (!proc_control_DW.obj_cs.matlabCodegenIsDeleted) {
    proc_control_DW.obj_cs.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S305>/SourceBlock'
  // End of Terminate for SubSystem: '<S298>/Subscribe2'

  // Terminate for IfAction SubSystem: '<S9>/SubsystemAuto'
  // Terminate for Atomic SubSystem: '<S301>/Publish5'
  // Terminate for MATLABSystem: '<S312>/SinkBlock'
  if (!proc_control_DW.obj_i.matlabCodegenIsDeleted) {
    proc_control_DW.obj_i.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S312>/SinkBlock'
  // End of Terminate for SubSystem: '<S301>/Publish5'
  // End of Terminate for SubSystem: '<S9>/SubsystemAuto'

  // Terminate for IfAction SubSystem: '<S9>/singleWpts Trajectory'
  // Terminate for Atomic SubSystem: '<S302>/Subscribe'
  // Terminate for MATLABSystem: '<S315>/SourceBlock'
  if (!proc_control_DW.obj_hd.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hd.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S315>/SourceBlock'
  // End of Terminate for SubSystem: '<S302>/Subscribe'
  // End of Terminate for SubSystem: '<S9>/singleWpts Trajectory'

  // Terminate for Atomic SubSystem: '<Root>/Subsystem Controller'
  // Terminate for Enabled SubSystem: '<S7>/MPC manager'
  // Terminate for Atomic SubSystem: '<S134>/Subscribe1'
  // Terminate for MATLABSystem: '<S234>/SourceBlock'
  if (!proc_control_DW.obj_hh.matlabCodegenIsDeleted) {
    proc_control_DW.obj_hh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S234>/SourceBlock'
  // End of Terminate for SubSystem: '<S134>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S134>/Subscribe'
  // Terminate for MATLABSystem: '<S233>/SourceBlock'
  if (!proc_control_DW.obj_k4.matlabCodegenIsDeleted) {
    proc_control_DW.obj_k4.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S233>/SourceBlock'
  // End of Terminate for SubSystem: '<S134>/Subscribe'
  // End of Terminate for SubSystem: '<S7>/MPC manager'
  // End of Terminate for SubSystem: '<Root>/Subsystem Controller'

  // Terminate for Enabled SubSystem: '<Root>/Send Data to ROS'
  // Terminate for Atomic SubSystem: '<S5>/Publish2'
  // Terminate for MATLABSystem: '<S109>/SinkBlock'
  if (!proc_control_DW.obj_p.matlabCodegenIsDeleted) {
    proc_control_DW.obj_p.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S109>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish2'

  // Terminate for Atomic SubSystem: '<S5>/Subsystem'
  // Terminate for Atomic SubSystem: '<S110>/Publish5'
  // Terminate for MATLABSystem: '<S113>/SinkBlock'
  if (!proc_control_DW.obj_i1.matlabCodegenIsDeleted) {
    proc_control_DW.obj_i1.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S113>/SinkBlock'
  // End of Terminate for SubSystem: '<S110>/Publish5'
  // End of Terminate for SubSystem: '<S5>/Subsystem'
  // End of Terminate for SubSystem: '<Root>/Send Data to ROS'

  // Terminate for Enabled SubSystem: '<Root>/Modèle Physique'
  // Terminate for Atomic SubSystem: '<S16>/Publish2'
  // Terminate for MATLABSystem: '<S27>/SinkBlock'
  if (!proc_control_DW.obj_jj.matlabCodegenIsDeleted) {
    proc_control_DW.obj_jj.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S27>/SinkBlock'
  // End of Terminate for SubSystem: '<S16>/Publish2'

  // Terminate for Atomic SubSystem: '<S33>/Subscribe'
  // Terminate for MATLABSystem: '<S42>/SourceBlock'
  if (!proc_control_DW.obj_n.matlabCodegenIsDeleted) {
    proc_control_DW.obj_n.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S42>/SourceBlock'
  // End of Terminate for SubSystem: '<S33>/Subscribe'

  // Terminate for Atomic SubSystem: '<S33>/Publish'
  // Terminate for MATLABSystem: '<S41>/SinkBlock'
  if (!proc_control_DW.obj_d.matlabCodegenIsDeleted) {
    proc_control_DW.obj_d.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S41>/SinkBlock'
  // End of Terminate for SubSystem: '<S33>/Publish'
  // End of Terminate for SubSystem: '<Root>/Modèle Physique'

  // Terminate for Enabled SubSystem: '<Root>/ROS Output'
  // Terminate for Atomic SubSystem: '<S93>/Publish'
  // Terminate for MATLABSystem: '<S106>/SinkBlock'
  if (!proc_control_DW.obj_ap.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ap.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S106>/SinkBlock'
  // End of Terminate for SubSystem: '<S93>/Publish'

  // Terminate for Atomic SubSystem: '<S89>/Publish'
  // Terminate for MATLABSystem: '<S96>/SinkBlock'
  if (!proc_control_DW.obj_kw.matlabCodegenIsDeleted) {
    proc_control_DW.obj_kw.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S96>/SinkBlock'
  // End of Terminate for SubSystem: '<S89>/Publish'

  // Terminate for Atomic SubSystem: '<S90>/Publish Depth'
  // Terminate for MATLABSystem: '<S98>/SinkBlock'
  if (!proc_control_DW.obj_k.matlabCodegenIsDeleted) {
    proc_control_DW.obj_k.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S98>/SinkBlock'
  // End of Terminate for SubSystem: '<S90>/Publish Depth'

  // Terminate for Atomic SubSystem: '<S91>/Publish imu_info'
  // Terminate for MATLABSystem: '<S101>/SinkBlock'
  if (!proc_control_DW.obj_ab.matlabCodegenIsDeleted) {
    proc_control_DW.obj_ab.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S101>/SinkBlock'
  // End of Terminate for SubSystem: '<S91>/Publish imu_info'

  // Terminate for Atomic SubSystem: '<S92>/Publish Ping'
  // Terminate for MATLABSystem: '<S103>/SinkBlock'
  if (!proc_control_DW.obj_c.matlabCodegenIsDeleted) {
    proc_control_DW.obj_c.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S103>/SinkBlock'
  // End of Terminate for SubSystem: '<S92>/Publish Ping'
  // End of Terminate for SubSystem: '<Root>/ROS Output'
}

// Constructor
proc_control::proc_control() :
  proc_control_B(),
  proc_control_DW(),
  proc_control_PrevZCX(),
  proc_control_M()
{
  // Currently there is no constructor body generated.
}

// Destructor
proc_control::~proc_control()
{
  // Currently there is no destructor body generated.
}

// Real-Time Model get method
proc_control::RT_MODEL_proc_control_T * proc_control::getRTM()
{
  return (&proc_control_M);
}

//
// File trailer for generated code.
//
// [EOF]
//
