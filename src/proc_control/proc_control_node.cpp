//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// File: proc_control_node.cpp
//
// Code generated for Simulink model 'proc_control_node'.
//
// Model version                  : 1.163
// Simulink Coder version         : 9.5 (R2021a) 14-Nov-2020
// C/C++ source code generated on : Sun Nov  7 21:54:48 2021
//
// Target selection: ert.tlc
// Embedded hardware selection: ARM Compatible->ARM 64-bit (LLP64)
// Code generation objectives: Unspecified
// Validation result: Not run
//
#include "proc_control_node.h"
#include "proc_control_node_private.h"

// Named constants for MATLAB Function: '<S168>/FixedHorizonOptimizer'
const real_T proc_control_node_nu = 8.0;
const real_T proc_control_node_ny = 12.0;

// Named constants for MATLAB Function: '<S217>/FixedHorizonOptimizer'
const real_T proc_control_node_ny_f = 13.0;
static void rate_scheduler(proc_control_nodeModelClass::
  RT_MODEL_proc_control_node_T *const proc_control_node_M);
uint32_T plook_u32d_binckpang(real_T u, const real_T bp[], uint32_T maxIndex,
  uint32_T *prevIndex)
{
  uint32_T bpIndex;

  // Prelookup - Index only
  // Index Search method: 'binary'
  // Interpolation method: 'Use nearest'
  // Use previous index: 'on'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'on'

  if (u < bp[maxIndex]) {
    bpIndex = binsearch_u32d_prevIdx(u, bp, *prevIndex, maxIndex);
    if ((bpIndex < maxIndex) && (bp[bpIndex + 1U] - u <= u - bp[bpIndex])) {
      bpIndex++;
    }
  } else {
    bpIndex = maxIndex;
  }

  *prevIndex = bpIndex;
  return bpIndex;
}

uint32_T plook_u32u16_binckpan(uint16_T u, const uint16_T bp[], uint32_T
  maxIndex, uint32_T *prevIndex)
{
  uint32_T bpIndex;

  // Prelookup - Index only
  // Index Search method: 'binary'
  // Interpolation method: 'Use nearest'
  // Extrapolation method: 'Clip'
  // Use previous index: 'on'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'off'

  if (u <= bp[0U]) {
    bpIndex = 0U;
  } else if (u < bp[maxIndex]) {
    bpIndex = binsearch_u32u16_prevIdx(u, bp, *prevIndex, maxIndex);
    if ((bpIndex < maxIndex) && (static_cast<uint16_T>(static_cast<uint32_T>
          (bp[bpIndex + 1U]) - u) <= static_cast<uint16_T>(static_cast<uint32_T>
          (u) - bp[bpIndex]))) {
      bpIndex++;
    }
  } else {
    bpIndex = maxIndex;
  }

  *prevIndex = bpIndex;
  return bpIndex;
}

uint32_T binsearch_u32d_prevIdx(real_T u, const real_T bp[], uint32_T startIndex,
  uint32_T maxIndex)
{
  uint32_T bpIndex;
  uint32_T found;
  uint32_T iLeft;
  uint32_T iRght;

  // Binary Search using Previous Index
  bpIndex = startIndex;
  iLeft = 0U;
  iRght = maxIndex;
  found = 0U;
  while (found == 0U) {
    if (u < bp[bpIndex]) {
      iRght = bpIndex - 1U;
      bpIndex = ((bpIndex + iLeft) - 1U) >> 1U;
    } else if (u < bp[bpIndex + 1U]) {
      found = 1U;
    } else {
      iLeft = bpIndex + 1U;
      bpIndex = ((bpIndex + iRght) + 1U) >> 1U;
    }
  }

  return bpIndex;
}

uint32_T binsearch_u32u16_prevIdx(uint16_T u, const uint16_T bp[], uint32_T
  startIndex, uint32_T maxIndex)
{
  uint32_T bpIndex;
  uint32_T found;
  uint32_T iLeft;
  uint32_T iRght;

  // Binary Search using Previous Index
  bpIndex = startIndex;
  iLeft = 0U;
  iRght = maxIndex;
  found = 0U;
  while (found == 0U) {
    if (u < bp[bpIndex]) {
      iRght = bpIndex - 1U;
      bpIndex = ((bpIndex + iLeft) - 1U) >> 1U;
    } else if (u < bp[bpIndex + 1U]) {
      found = 1U;
    } else {
      iLeft = bpIndex + 1U;
      bpIndex = ((bpIndex + iRght) + 1U) >> 1U;
    }
  }

  return bpIndex;
}

//
//   This function updates active task flag for each subrate.
// The function is called at model base rate, hence the
// generated code self-manages all its subrates.
//
static void rate_scheduler(proc_control_nodeModelClass::
  RT_MODEL_proc_control_node_T *const proc_control_node_M)
{
  // Compute which subrates run during the next base time step.  Subrates
  //  are an integer multiple of the base rate counter.  Therefore, the subtask
  //  counter is reset when it reaches its limit (zero means run).

  (proc_control_node_M->Timing.TaskCounters.TID[2])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[2]) > 2) {// Sample time: [0.05s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[2] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[3])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[3]) > 5) {// Sample time: [0.1s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[3] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[4])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[4]) > 59) {// Sample time: [1.0s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[4] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[5])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[5]) > 299) {// Sample time: [5.0s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[5] = 0;
  }
}

//
// This function updates continuous states using the ODE3 fixed-step
// solver algorithm
//
void proc_control_nodeModelClass::rt_ertODEUpdateContinuousStates(RTWSolverInfo *
  si )
{
  // Solver Matrices
  static const real_T rt_ODE3_A[3] = {
    1.0/2.0, 3.0/4.0, 1.0
  };

  static const real_T rt_ODE3_B[3][3] = {
    { 1.0/2.0, 0.0, 0.0 },

    { 0.0, 3.0/4.0, 0.0 },

    { 2.0/9.0, 1.0/3.0, 4.0/9.0 }
  };

  time_T t = rtsiGetT(si);
  time_T tnew = rtsiGetSolverStopTime(si);
  time_T h = rtsiGetStepSize(si);
  real_T *x = rtsiGetContStates(si);
  ODE3_IntgData *id = static_cast<ODE3_IntgData *>(rtsiGetSolverData(si));
  real_T *y = id->y;
  real_T *f0 = id->f[0];
  real_T *f1 = id->f[1];
  real_T *f2 = id->f[2];
  real_T hB[3];
  int_T i;
  int_T nXc = 21;
  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);

  // Save the state values at time t in y, we'll use x as ynew.
  (void) memcpy(y, x,
                static_cast<uint_T>(nXc)*sizeof(real_T));

  // Assumes that rtsiSetT and ModelOutputs are up-to-date
  // f0 = f(t,y)
  rtsiSetdX(si, f0);
  proc_control_node_derivatives();

  // f(:,2) = feval(odefile, t + hA(1), y + f*hB(:,1), args(:)(*));
  hB[0] = h * rt_ODE3_B[0][0];
  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0]);
  }

  rtsiSetT(si, t + h*rt_ODE3_A[0]);
  rtsiSetdX(si, f1);
  this->step();
  proc_control_node_derivatives();

  // f(:,3) = feval(odefile, t + hA(2), y + f*hB(:,2), args(:)(*));
  for (i = 0; i <= 1; i++) {
    hB[i] = h * rt_ODE3_B[1][i];
  }

  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1]);
  }

  rtsiSetT(si, t + h*rt_ODE3_A[1]);
  rtsiSetdX(si, f2);
  this->step();
  proc_control_node_derivatives();

  // tnew = t + hA(3);
  // ynew = y + f*hB(:,3);
  for (i = 0; i <= 2; i++) {
    hB[i] = h * rt_ODE3_B[2][i];
  }

  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2]);
  }

  rtsiSetT(si, tnew);
  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);
}

//
// Output and update for atomic system:
//    '<S292>/MATLAB Function1'
//    '<S290>/MATLAB Function1'
//
void proc_control_nodeModelClass::proc_control_no_MATLABFunction1(const real_T
  rtu_matrix[13], real_T rty_y[130], B_MATLABFunction1_proc_contro_T *localB)
{
  int32_T ibmat;
  int32_T itilerow;
  int32_T jcol;
  memcpy(&localB->matrix[0], &rtu_matrix[0], 13U * sizeof(real_T));
  localB->matrix[9] = -rtu_matrix[9];
  for (jcol = 0; jcol < 13; jcol++) {
    ibmat = jcol * 10;
    for (itilerow = 0; itilerow < 10; itilerow++) {
      rty_y[ibmat + itilerow] = localB->matrix[jcol];
    }
  }
}

// Function for MATLAB Function: '<S251>/MATLAB Function1'
real_T proc_control_nodeModelClass::proc_control_node_maximum_j(const real_T x[4])
{
  real_T ex;
  int32_T idx;
  int32_T k;
  boolean_T exitg1;
  if (!rtIsNaN(x[0])) {
    idx = 1;
  } else {
    idx = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 5)) {
      if (!rtIsNaN(x[k - 1])) {
        idx = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (idx == 0) {
    ex = x[0];
  } else {
    ex = x[idx - 1];
    while (idx + 1 < 5) {
      if (ex < x[idx]) {
        ex = x[idx];
      }

      idx++;
    }
  }

  return ex;
}

// Function for MATLAB Function: '<S282>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_e(int32_T n, const
  real_T x[168], int32_T ix0)
{
  real_T absxk;
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_l1 = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        absxk = fabs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_l1) {
          t = proc_control_node_B.scale_l1 / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_l1 = absxk;
        } else {
          t = absxk / proc_control_node_B.scale_l1;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_l1 * sqrt(y);
    }
  }

  return y;
}

real_T proc_control_nodeModelClass::proc_control_node_rt_hypotd_snf(real_T u0,
  real_T u1)
{
  real_T y;
  proc_control_node_B.a_bv = fabs(u0);
  y = fabs(u1);
  if (proc_control_node_B.a_bv < y) {
    proc_control_node_B.a_bv /= y;
    y *= sqrt(proc_control_node_B.a_bv * proc_control_node_B.a_bv + 1.0);
  } else if (proc_control_node_B.a_bv > y) {
    y /= proc_control_node_B.a_bv;
    y = sqrt(y * y + 1.0) * proc_control_node_B.a_bv;
  } else if (!rtIsNaN(y)) {
    y = proc_control_node_B.a_bv * 1.4142135623730951;
  }

  return y;
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_k(int32_T m, int32_T n,
  const real_T A[168], int32_T ia0, const real_T x[168], int32_T ix0, real_T y[8])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 21 + ia0;
    for (iac = ia0; iac <= b; iac += 21) {
      ix = ix0;
      proc_control_node_B.c_c = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_c += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_c;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_k(int32_T m, int32_T n,
  real_T alpha1, int32_T ix0, const real_T y[8], real_T A[168], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jA;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    jA = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_m = y[jy] * alpha1;
        ix = ix0;
        b = m + jA;
        for (ijA = jA; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_m;
          ix++;
        }
      }

      jy++;
      jA += 21;
    }
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_xzlarf_a3(int32_T m, int32_T
  n, int32_T iv0, real_T tau, real_T C[168], int32_T ic0, real_T work[8])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_a = m;
    proc_control_node_B.lastc_b = iv0 + m;
    while ((proc_control_node_B.lastv_a > 0) && (C[proc_control_node_B.lastc_b -
            2] == 0.0)) {
      proc_control_node_B.lastv_a--;
      proc_control_node_B.lastc_b--;
    }

    proc_control_node_B.lastc_b = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_b > 0)) {
      proc_control_node_B.coltop_n = (proc_control_node_B.lastc_b - 1) * 21 +
        ic0;
      proc_control_node_B.ia_bi = proc_control_node_B.coltop_n;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_bi <= (proc_control_node_B.coltop_n +
             proc_control_node_B.lastv_a) - 1) {
          if (C[proc_control_node_B.ia_bi - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_bi++;
          }
        } else {
          proc_control_node_B.lastc_b--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_a = 0;
    proc_control_node_B.lastc_b = 0;
  }

  if (proc_control_node_B.lastv_a > 0) {
    proc_control_node_xgemv_k(proc_control_node_B.lastv_a,
      proc_control_node_B.lastc_b, C, ic0, C, iv0, work);
    proc_control_node_xgerc_k(proc_control_node_B.lastv_a,
      proc_control_node_B.lastc_b, -tau, iv0, work, C, ic0);
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrf_if(real_T A[168],
  int32_T ia0, int32_T m, int32_T n, int32_T nfxd, real_T tau[8])
{
  memset(&proc_control_node_B.work_ft[0], 0, sizeof(real_T) << 3U);
  proc_control_node_B.i_d4 = 0;
  while (proc_control_node_B.i_d4 <= nfxd - 1) {
    proc_control_node_B.ii_i = ((proc_control_node_B.i_d4 * 21 + ia0) +
      proc_control_node_B.i_d4) - 1;
    proc_control_node_B.mmi_tmp_b4 = m - proc_control_node_B.i_d4;
    if (proc_control_node_B.i_d4 + 1 < m) {
      proc_control_node_B.b_atmp_fj = A[proc_control_node_B.ii_i];
      tau[proc_control_node_B.i_d4] = 0.0;
      if (proc_control_node_B.mmi_tmp_b4 > 0) {
        proc_control_node_B.beta1_a = proc_control_node_xnrm2_e
          (proc_control_node_B.mmi_tmp_b4 - 1, A, proc_control_node_B.ii_i + 2);
        if (proc_control_node_B.beta1_a != 0.0) {
          proc_control_node_B.beta1_a = proc_control_node_rt_hypotd_snf
            (A[proc_control_node_B.ii_i], proc_control_node_B.beta1_a);
          if (A[proc_control_node_B.ii_i] >= 0.0) {
            proc_control_node_B.beta1_a = -proc_control_node_B.beta1_a;
          }

          if (fabs(proc_control_node_B.beta1_a) < 1.0020841800044864E-292) {
            proc_control_node_B.knt_c = -1;
            proc_control_node_B.mmip1_n = proc_control_node_B.ii_i +
              proc_control_node_B.mmi_tmp_b4;
            do {
              proc_control_node_B.knt_c++;
              proc_control_node_B.b_k_i = proc_control_node_B.ii_i + 1;
              while (proc_control_node_B.b_k_i + 1 <=
                     proc_control_node_B.mmip1_n) {
                A[proc_control_node_B.b_k_i] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_i++;
              }

              proc_control_node_B.beta1_a *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp_fj *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1_a) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1_a = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp_fj, proc_control_node_xnrm2_e
               (proc_control_node_B.mmi_tmp_b4 - 1, A, proc_control_node_B.ii_i
                + 2));
            if (proc_control_node_B.b_atmp_fj >= 0.0) {
              proc_control_node_B.beta1_a = -proc_control_node_B.beta1_a;
            }

            tau[proc_control_node_B.i_d4] = (proc_control_node_B.beta1_a -
              proc_control_node_B.b_atmp_fj) / proc_control_node_B.beta1_a;
            proc_control_node_B.b_atmp_fj = 1.0 / (proc_control_node_B.b_atmp_fj
              - proc_control_node_B.beta1_a);
            proc_control_node_B.b_k_i = proc_control_node_B.ii_i + 1;
            while (proc_control_node_B.b_k_i + 1 <= proc_control_node_B.mmip1_n)
            {
              A[proc_control_node_B.b_k_i] *= proc_control_node_B.b_atmp_fj;
              proc_control_node_B.b_k_i++;
            }

            proc_control_node_B.mmip1_n = 0;
            while (proc_control_node_B.mmip1_n <= proc_control_node_B.knt_c) {
              proc_control_node_B.beta1_a *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1_n++;
            }

            proc_control_node_B.b_atmp_fj = proc_control_node_B.beta1_a;
          } else {
            tau[proc_control_node_B.i_d4] = (proc_control_node_B.beta1_a -
              A[proc_control_node_B.ii_i]) / proc_control_node_B.beta1_a;
            proc_control_node_B.b_atmp_fj = 1.0 / (A[proc_control_node_B.ii_i] -
              proc_control_node_B.beta1_a);
            proc_control_node_B.knt_c = proc_control_node_B.ii_i +
              proc_control_node_B.mmi_tmp_b4;
            proc_control_node_B.mmip1_n = proc_control_node_B.ii_i + 1;
            while (proc_control_node_B.mmip1_n + 1 <= proc_control_node_B.knt_c)
            {
              A[proc_control_node_B.mmip1_n] *= proc_control_node_B.b_atmp_fj;
              proc_control_node_B.mmip1_n++;
            }

            proc_control_node_B.b_atmp_fj = proc_control_node_B.beta1_a;
          }
        }
      }

      A[proc_control_node_B.ii_i] = proc_control_node_B.b_atmp_fj;
    } else {
      tau[proc_control_node_B.i_d4] = 0.0;
    }

    if (proc_control_node_B.i_d4 + 1 < n) {
      proc_control_node_B.b_atmp_fj = A[proc_control_node_B.ii_i];
      A[proc_control_node_B.ii_i] = 1.0;
      proc_control_node_xzlarf_a3(proc_control_node_B.mmi_tmp_b4, (n -
        proc_control_node_B.i_d4) - 1, proc_control_node_B.ii_i + 1,
        tau[proc_control_node_B.i_d4], A, proc_control_node_B.ii_i + 22,
        proc_control_node_B.work_ft);
      A[proc_control_node_B.ii_i] = proc_control_node_B.b_atmp_fj;
    }

    proc_control_node_B.i_d4++;
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_e(real_T A[168],
  real_T tau[8])
{
  memset(&tau[0], 0, sizeof(real_T) << 3U);
  proc_control_node_qrf_if(A, 1, 21, 8, 8, tau);
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_xorgqr_g(int32_T m, int32_T
  n, int32_T k, real_T A[168], int32_T ia0, const real_T tau[8], int32_T itau0)
{
  int32_T exitg1;
  boolean_T exitg2;
  if (n >= 1) {
    proc_control_node_B.itau_ii = k;
    while (proc_control_node_B.itau_ii <= n - 1) {
      proc_control_node_B.i_pp = (proc_control_node_B.itau_ii * 21 + ia0) - 1;
      proc_control_node_B.iaii_bl = 0;
      while (proc_control_node_B.iaii_bl <= m - 1) {
        A[proc_control_node_B.i_pp + proc_control_node_B.iaii_bl] = 0.0;
        proc_control_node_B.iaii_bl++;
      }

      A[proc_control_node_B.i_pp + proc_control_node_B.itau_ii] = 1.0;
      proc_control_node_B.itau_ii++;
    }

    proc_control_node_B.itau_ii = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_m[0], 0, sizeof(real_T) << 3U);
    proc_control_node_B.i_pp = k;
    while (proc_control_node_B.i_pp >= 1) {
      proc_control_node_B.iaii_bl = (((proc_control_node_B.i_pp - 1) * 21 + ia0)
        + proc_control_node_B.i_pp) - 1;
      if (proc_control_node_B.i_pp < n) {
        A[proc_control_node_B.iaii_bl - 1] = 1.0;
        proc_control_node_B.lastc_i = (m - proc_control_node_B.i_pp) - 1;
        if (tau[proc_control_node_B.itau_ii] != 0.0) {
          proc_control_node_B.lastv_nt = proc_control_node_B.lastc_i + 2;
          proc_control_node_B.lastc_i += proc_control_node_B.iaii_bl;
          while ((proc_control_node_B.lastv_nt > 0) &&
                 (A[proc_control_node_B.lastc_i] == 0.0)) {
            proc_control_node_B.lastv_nt--;
            proc_control_node_B.lastc_i--;
          }

          proc_control_node_B.lastc_i = n - proc_control_node_B.i_pp;
          exitg2 = false;
          while ((!exitg2) && (proc_control_node_B.lastc_i > 0)) {
            proc_control_node_B.coltop_nj = ((proc_control_node_B.lastc_i - 1) *
              21 + proc_control_node_B.iaii_bl) + 20;
            proc_control_node_B.b_ia_m0 = proc_control_node_B.coltop_nj;
            do {
              exitg1 = 0;
              if (proc_control_node_B.b_ia_m0 + 1 <=
                  proc_control_node_B.coltop_nj + proc_control_node_B.lastv_nt)
              {
                if (A[proc_control_node_B.b_ia_m0] != 0.0) {
                  exitg1 = 1;
                } else {
                  proc_control_node_B.b_ia_m0++;
                }
              } else {
                proc_control_node_B.lastc_i--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          proc_control_node_B.lastv_nt = 0;
          proc_control_node_B.lastc_i = 0;
        }

        if (proc_control_node_B.lastv_nt > 0) {
          proc_control_node_xgemv_k(proc_control_node_B.lastv_nt,
            proc_control_node_B.lastc_i, A, proc_control_node_B.iaii_bl + 21, A,
            proc_control_node_B.iaii_bl, proc_control_node_B.work_m);
          proc_control_node_xgerc_k(proc_control_node_B.lastv_nt,
            proc_control_node_B.lastc_i, -tau[proc_control_node_B.itau_ii],
            proc_control_node_B.iaii_bl, proc_control_node_B.work_m, A,
            proc_control_node_B.iaii_bl + 21);
        }
      }

      if (proc_control_node_B.i_pp < m) {
        proc_control_node_B.lastv_nt = (proc_control_node_B.iaii_bl + m) -
          proc_control_node_B.i_pp;
        proc_control_node_B.lastc_i = proc_control_node_B.iaii_bl;
        while (proc_control_node_B.lastc_i + 1 <= proc_control_node_B.lastv_nt)
        {
          A[proc_control_node_B.lastc_i] *= -tau[proc_control_node_B.itau_ii];
          proc_control_node_B.lastc_i++;
        }
      }

      A[proc_control_node_B.iaii_bl - 1] = 1.0 - tau[proc_control_node_B.itau_ii];
      proc_control_node_B.lastv_nt = 0;
      while (proc_control_node_B.lastv_nt <= proc_control_node_B.i_pp - 2) {
        A[(proc_control_node_B.iaii_bl - proc_control_node_B.lastv_nt) - 2] =
          0.0;
        proc_control_node_B.lastv_nt++;
      }

      proc_control_node_B.itau_ii--;
      proc_control_node_B.i_pp--;
    }
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_qr_hr(const real_T A[168],
  real_T Q[168], real_T R[64])
{
  memcpy(&proc_control_node_B.b_A_k[0], &A[0], 168U * sizeof(real_T));
  proc_control_node_xgeqrf_e(proc_control_node_B.b_A_k,
    proc_control_node_B.tau_m);
  for (proc_control_node_B.j_dz = 0; proc_control_node_B.j_dz < 8;
       proc_control_node_B.j_dz++) {
    proc_control_node_B.i_lv = 0;
    while (proc_control_node_B.i_lv <= proc_control_node_B.j_dz) {
      R[proc_control_node_B.i_lv + (proc_control_node_B.j_dz << 3)] =
        proc_control_node_B.b_A_k[21 * proc_control_node_B.j_dz +
        proc_control_node_B.i_lv];
      proc_control_node_B.i_lv++;
    }

    proc_control_node_B.i_lv = proc_control_node_B.j_dz + 1;
    while (proc_control_node_B.i_lv + 1 < 9) {
      R[proc_control_node_B.i_lv + (proc_control_node_B.j_dz << 3)] = 0.0;
      proc_control_node_B.i_lv++;
    }
  }

  proc_control_node_xorgqr_g(21, 8, 8, proc_control_node_B.b_A_k, 1,
    proc_control_node_B.tau_m, 1);
  proc_control_node_B.i_lv = 0;
  for (proc_control_node_B.j_dz = 0; proc_control_node_B.j_dz < 8;
       proc_control_node_B.j_dz++) {
    memcpy(&Q[proc_control_node_B.i_lv],
           &proc_control_node_B.b_A_k[proc_control_node_B.i_lv], 21U * sizeof
           (real_T));
    proc_control_node_B.i_lv += 21;
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::EKFCorrectorAdditive_getMeasu_a(const real_T
  Rs[64], const real_T x[13], const real_T S[169], real_T zEstimated[8], real_T
  Pxy[104], real_T Sy[64], real_T dHdx[104])
{
  static const int8_T b[8] = { 2, 3, 4, 5, 6, 10, 11, 12 };

  for (proc_control_node_B.i32 = 0; proc_control_node_B.i32 < 8;
       proc_control_node_B.i32++) {
    proc_control_node_B.z_d[proc_control_node_B.i32] =
      x[b[proc_control_node_B.i32]];
  }

  for (proc_control_node_B.j_aw = 0; proc_control_node_B.j_aw < 13;
       proc_control_node_B.j_aw++) {
    memcpy(&proc_control_node_B.imvec_h[0], &x[0], 13U * sizeof(real_T));
    proc_control_node_B.epsilon_n = 1.4901161193847656E-8 * fabs
      (x[proc_control_node_B.j_aw]);
    if ((1.4901161193847656E-8 > proc_control_node_B.epsilon_n) || rtIsNaN
        (proc_control_node_B.epsilon_n)) {
      proc_control_node_B.epsilon_n = 1.4901161193847656E-8;
    }

    proc_control_node_B.imvec_h[proc_control_node_B.j_aw] =
      x[proc_control_node_B.j_aw] + proc_control_node_B.epsilon_n;
    for (proc_control_node_B.i32 = 0; proc_control_node_B.i32 < 8;
         proc_control_node_B.i32++) {
      dHdx[proc_control_node_B.i32 + (proc_control_node_B.j_aw << 3)] =
        (proc_control_node_B.imvec_h[b[proc_control_node_B.i32]] -
         proc_control_node_B.z_d[proc_control_node_B.i32]) /
        proc_control_node_B.epsilon_n;
    }
  }

  for (proc_control_node_B.i32 = 0; proc_control_node_B.i32 < 8;
       proc_control_node_B.i32++) {
    zEstimated[proc_control_node_B.i32] = x[b[proc_control_node_B.i32]];
  }

  proc_control_node_B.i32 = 0;
  for (proc_control_node_B.i34 = 0; proc_control_node_B.i34 < 13;
       proc_control_node_B.i34++) {
    memset(&proc_control_node_B.S_h[proc_control_node_B.i32], 0, 13U * sizeof
           (real_T));
    proc_control_node_B.i32 += 13;
  }

  proc_control_node_B.i32 = 0;
  for (proc_control_node_B.j_aw = 0; proc_control_node_B.j_aw < 13;
       proc_control_node_B.j_aw++) {
    proc_control_node_B.i_es = 0;
    for (proc_control_node_B.i34 = 0; proc_control_node_B.i34 < 13;
         proc_control_node_B.i34++) {
      for (proc_control_node_B.i33 = 0; proc_control_node_B.i33 < 13;
           proc_control_node_B.i33++) {
        proc_control_node_B.S_tmp_a = proc_control_node_B.i33 +
          proc_control_node_B.i_es;
        proc_control_node_B.S_h[proc_control_node_B.S_tmp_a] +=
          S[proc_control_node_B.i33 + proc_control_node_B.i32] *
          S[proc_control_node_B.i34 + proc_control_node_B.i32];
      }

      proc_control_node_B.i_es += 13;
    }

    proc_control_node_B.i32 += 13;
  }

  proc_control_node_B.i32 = 0;
  for (proc_control_node_B.j_aw = 0; proc_control_node_B.j_aw < 8;
       proc_control_node_B.j_aw++) {
    memset(&Pxy[proc_control_node_B.i32], 0, 13U * sizeof(real_T));
    proc_control_node_B.i32 += 13;
  }

  proc_control_node_B.i32 = 0;
  for (proc_control_node_B.j_aw = 0; proc_control_node_B.j_aw < 8;
       proc_control_node_B.j_aw++) {
    proc_control_node_B.i34 = 0;
    proc_control_node_B.i33 = 0;
    proc_control_node_B.coffset_oq = proc_control_node_B.j_aw * 13;
    for (proc_control_node_B.i_es = 0; proc_control_node_B.i_es < 13;
         proc_control_node_B.i_es++) {
      proc_control_node_B.aoffset_i = proc_control_node_B.i_es * 13;
      proc_control_node_B.epsilon_n = 0.0;
      for (proc_control_node_B.S_tmp_a = 0; proc_control_node_B.S_tmp_a < 13;
           proc_control_node_B.S_tmp_a++) {
        proc_control_node_B.Pxy_tmp_e = proc_control_node_B.S_tmp_a +
          proc_control_node_B.i32;
        Pxy[proc_control_node_B.Pxy_tmp_e] +=
          proc_control_node_B.S_h[proc_control_node_B.S_tmp_a +
          proc_control_node_B.i34] * dHdx[proc_control_node_B.i33 +
          proc_control_node_B.j_aw];
        proc_control_node_B.epsilon_n += dHdx[(proc_control_node_B.S_tmp_a << 3)
          + proc_control_node_B.j_aw] * S[proc_control_node_B.aoffset_i +
          proc_control_node_B.S_tmp_a];
      }

      proc_control_node_B.i34 += 13;
      proc_control_node_B.i33 += 8;
      proc_control_node_B.y_d[proc_control_node_B.coffset_oq +
        proc_control_node_B.i_es] = proc_control_node_B.epsilon_n;
      proc_control_node_B.y_ad[proc_control_node_B.i_es + 21 *
        proc_control_node_B.j_aw] = proc_control_node_B.y_d[13 *
        proc_control_node_B.j_aw + proc_control_node_B.i_es];
    }

    proc_control_node_B.i32 += 13;
  }

  proc_control_node_B.i32 = 0;
  for (proc_control_node_B.i34 = 0; proc_control_node_B.i34 < 8;
       proc_control_node_B.i34++) {
    proc_control_node_B.i33 = 0;
    for (proc_control_node_B.j_aw = 0; proc_control_node_B.j_aw < 8;
         proc_control_node_B.j_aw++) {
      proc_control_node_B.y_ad[(proc_control_node_B.j_aw +
        proc_control_node_B.i32) + 13] = Rs[proc_control_node_B.i33 +
        proc_control_node_B.i34];
      proc_control_node_B.i33 += 8;
    }

    proc_control_node_B.i32 += 21;
  }

  proc_control_node_qr_hr(proc_control_node_B.y_ad, proc_control_node_B.a__1_m4,
    proc_control_node_B.R_n);
  proc_control_node_B.i32 = 0;
  for (proc_control_node_B.i34 = 0; proc_control_node_B.i34 < 8;
       proc_control_node_B.i34++) {
    proc_control_node_B.i33 = 0;
    for (proc_control_node_B.j_aw = 0; proc_control_node_B.j_aw < 8;
         proc_control_node_B.j_aw++) {
      Sy[proc_control_node_B.j_aw + proc_control_node_B.i32] =
        proc_control_node_B.R_n[proc_control_node_B.i33 +
        proc_control_node_B.i34];
      proc_control_node_B.i33 += 8;
    }

    proc_control_node_B.i32 += 8;
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_ga(const real_T A
  [64], real_T B[104])
{
  int32_T i;
  int32_T j;
  int32_T k;
  int32_T kAcol;
  int32_T tmp;
  int32_T tmp_0;
  for (j = 0; j < 13; j++) {
    proc_control_node_B.jBcol_c = j << 3;
    for (k = 0; k < 8; k++) {
      kAcol = k << 3;
      tmp = k + proc_control_node_B.jBcol_c;
      proc_control_node_B.d13 = B[tmp];
      if (proc_control_node_B.d13 != 0.0) {
        B[tmp] = proc_control_node_B.d13 / A[k + kAcol];
        for (i = k + 2; i < 9; i++) {
          tmp_0 = (i + proc_control_node_B.jBcol_c) - 1;
          B[tmp_0] -= A[(i + kAcol) - 1] * B[tmp];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_ga0(const real_T A
  [64], real_T B[104])
{
  int32_T i;
  int32_T j;
  int32_T k;
  int32_T kAcol;
  int32_T tmp;
  int32_T tmp_0;
  for (j = 0; j < 13; j++) {
    proc_control_node_B.jBcol_nh = j << 3;
    for (k = 7; k >= 0; k--) {
      kAcol = k << 3;
      tmp = k + proc_control_node_B.jBcol_nh;
      proc_control_node_B.d12 = B[tmp];
      if (proc_control_node_B.d12 != 0.0) {
        B[tmp] = proc_control_node_B.d12 / A[k + kAcol];
        for (i = 0; i < k; i++) {
          tmp_0 = i + proc_control_node_B.jBcol_nh;
          B[tmp_0] -= B[tmp] * A[i + kAcol];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S282>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_en(int32_T n, const
  real_T x[273], int32_T ix0)
{
  real_T absxk;
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_lr = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        absxk = fabs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_lr) {
          t = proc_control_node_B.scale_lr / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_lr = absxk;
        } else {
          t = absxk / proc_control_node_B.scale_lr;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_lr * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_kv(int32_T m, int32_T
  n, const real_T A[273], int32_T ia0, const real_T x[273], int32_T ix0, real_T
  y[13])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 21 + ia0;
    for (iac = ia0; iac <= b; iac += 21) {
      ix = ix0;
      proc_control_node_B.c_ob = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_ob += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_ob;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_kg(int32_T m, int32_T
  n, real_T alpha1, int32_T ix0, const real_T y[13], real_T A[273], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jA;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    jA = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_ph = y[jy] * alpha1;
        ix = ix0;
        b = m + jA;
        for (ijA = jA; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_ph;
          ix++;
        }
      }

      jy++;
      jA += 21;
    }
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_xzlarf_a33(int32_T m,
  int32_T n, int32_T iv0, real_T tau, real_T C[273], int32_T ic0, real_T work[13])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_c = m;
    proc_control_node_B.lastc_nw = iv0 + m;
    while ((proc_control_node_B.lastv_c > 0) && (C[proc_control_node_B.lastc_nw
            - 2] == 0.0)) {
      proc_control_node_B.lastv_c--;
      proc_control_node_B.lastc_nw--;
    }

    proc_control_node_B.lastc_nw = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_nw > 0)) {
      proc_control_node_B.coltop_jf = (proc_control_node_B.lastc_nw - 1) * 21 +
        ic0;
      proc_control_node_B.ia_ks = proc_control_node_B.coltop_jf;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_ks <= (proc_control_node_B.coltop_jf +
             proc_control_node_B.lastv_c) - 1) {
          if (C[proc_control_node_B.ia_ks - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_ks++;
          }
        } else {
          proc_control_node_B.lastc_nw--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_c = 0;
    proc_control_node_B.lastc_nw = 0;
  }

  if (proc_control_node_B.lastv_c > 0) {
    proc_control_node_xgemv_kv(proc_control_node_B.lastv_c,
      proc_control_node_B.lastc_nw, C, ic0, C, iv0, work);
    proc_control_node_xgerc_kg(proc_control_node_B.lastv_c,
      proc_control_node_B.lastc_nw, -tau, iv0, work, C, ic0);
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrf_ifl(real_T A[273],
  int32_T ia0, int32_T m, int32_T n, int32_T nfxd, real_T tau[13])
{
  memset(&proc_control_node_B.work_iy[0], 0, 13U * sizeof(real_T));
  proc_control_node_B.i_cu = 0;
  while (proc_control_node_B.i_cu <= nfxd - 1) {
    proc_control_node_B.ii_p = ((proc_control_node_B.i_cu * 21 + ia0) +
      proc_control_node_B.i_cu) - 1;
    proc_control_node_B.mmi_tmp_j = m - proc_control_node_B.i_cu;
    if (proc_control_node_B.i_cu + 1 < m) {
      proc_control_node_B.b_atmp_j = A[proc_control_node_B.ii_p];
      tau[proc_control_node_B.i_cu] = 0.0;
      if (proc_control_node_B.mmi_tmp_j > 0) {
        proc_control_node_B.beta1_l = proc_control_node_xnrm2_en
          (proc_control_node_B.mmi_tmp_j - 1, A, proc_control_node_B.ii_p + 2);
        if (proc_control_node_B.beta1_l != 0.0) {
          proc_control_node_B.beta1_l = proc_control_node_rt_hypotd_snf
            (A[proc_control_node_B.ii_p], proc_control_node_B.beta1_l);
          if (A[proc_control_node_B.ii_p] >= 0.0) {
            proc_control_node_B.beta1_l = -proc_control_node_B.beta1_l;
          }

          if (fabs(proc_control_node_B.beta1_l) < 1.0020841800044864E-292) {
            proc_control_node_B.knt_f = -1;
            proc_control_node_B.mmip1_a = proc_control_node_B.ii_p +
              proc_control_node_B.mmi_tmp_j;
            do {
              proc_control_node_B.knt_f++;
              proc_control_node_B.b_k_d = proc_control_node_B.ii_p + 1;
              while (proc_control_node_B.b_k_d + 1 <=
                     proc_control_node_B.mmip1_a) {
                A[proc_control_node_B.b_k_d] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_d++;
              }

              proc_control_node_B.beta1_l *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp_j *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1_l) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1_l = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp_j, proc_control_node_xnrm2_en
               (proc_control_node_B.mmi_tmp_j - 1, A, proc_control_node_B.ii_p +
                2));
            if (proc_control_node_B.b_atmp_j >= 0.0) {
              proc_control_node_B.beta1_l = -proc_control_node_B.beta1_l;
            }

            tau[proc_control_node_B.i_cu] = (proc_control_node_B.beta1_l -
              proc_control_node_B.b_atmp_j) / proc_control_node_B.beta1_l;
            proc_control_node_B.b_atmp_j = 1.0 / (proc_control_node_B.b_atmp_j -
              proc_control_node_B.beta1_l);
            proc_control_node_B.b_k_d = proc_control_node_B.ii_p + 1;
            while (proc_control_node_B.b_k_d + 1 <= proc_control_node_B.mmip1_a)
            {
              A[proc_control_node_B.b_k_d] *= proc_control_node_B.b_atmp_j;
              proc_control_node_B.b_k_d++;
            }

            proc_control_node_B.mmip1_a = 0;
            while (proc_control_node_B.mmip1_a <= proc_control_node_B.knt_f) {
              proc_control_node_B.beta1_l *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1_a++;
            }

            proc_control_node_B.b_atmp_j = proc_control_node_B.beta1_l;
          } else {
            tau[proc_control_node_B.i_cu] = (proc_control_node_B.beta1_l -
              A[proc_control_node_B.ii_p]) / proc_control_node_B.beta1_l;
            proc_control_node_B.b_atmp_j = 1.0 / (A[proc_control_node_B.ii_p] -
              proc_control_node_B.beta1_l);
            proc_control_node_B.knt_f = proc_control_node_B.ii_p +
              proc_control_node_B.mmi_tmp_j;
            proc_control_node_B.mmip1_a = proc_control_node_B.ii_p + 1;
            while (proc_control_node_B.mmip1_a + 1 <= proc_control_node_B.knt_f)
            {
              A[proc_control_node_B.mmip1_a] *= proc_control_node_B.b_atmp_j;
              proc_control_node_B.mmip1_a++;
            }

            proc_control_node_B.b_atmp_j = proc_control_node_B.beta1_l;
          }
        }
      }

      A[proc_control_node_B.ii_p] = proc_control_node_B.b_atmp_j;
    } else {
      tau[proc_control_node_B.i_cu] = 0.0;
    }

    if (proc_control_node_B.i_cu + 1 < n) {
      proc_control_node_B.b_atmp_j = A[proc_control_node_B.ii_p];
      A[proc_control_node_B.ii_p] = 1.0;
      proc_control_node_xzlarf_a33(proc_control_node_B.mmi_tmp_j, (n -
        proc_control_node_B.i_cu) - 1, proc_control_node_B.ii_p + 1,
        tau[proc_control_node_B.i_cu], A, proc_control_node_B.ii_p + 22,
        proc_control_node_B.work_iy);
      A[proc_control_node_B.ii_p] = proc_control_node_B.b_atmp_j;
    }

    proc_control_node_B.i_cu++;
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_eb(real_T A[273],
  real_T tau[13])
{
  memset(&tau[0], 0, 13U * sizeof(real_T));
  proc_control_node_qrf_ifl(A, 1, 21, 13, 13, tau);
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_xorgqr_gf(int32_T m, int32_T
  n, int32_T k, real_T A[273], int32_T ia0, const real_T tau[13], int32_T itau0)
{
  if (n >= 1) {
    proc_control_node_B.itau_m = k;
    while (proc_control_node_B.itau_m <= n - 1) {
      proc_control_node_B.i_ka = (proc_control_node_B.itau_m * 21 + ia0) - 1;
      proc_control_node_B.iaii_fj = 0;
      while (proc_control_node_B.iaii_fj <= m - 1) {
        A[proc_control_node_B.i_ka + proc_control_node_B.iaii_fj] = 0.0;
        proc_control_node_B.iaii_fj++;
      }

      A[proc_control_node_B.i_ka + proc_control_node_B.itau_m] = 1.0;
      proc_control_node_B.itau_m++;
    }

    proc_control_node_B.itau_m = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_he[0], 0, 13U * sizeof(real_T));
    proc_control_node_B.i_ka = k;
    while (proc_control_node_B.i_ka >= 1) {
      proc_control_node_B.iaii_fj = (((proc_control_node_B.i_ka - 1) * 21 + ia0)
        + proc_control_node_B.i_ka) - 1;
      if (proc_control_node_B.i_ka < n) {
        A[proc_control_node_B.iaii_fj - 1] = 1.0;
        proc_control_node_xzlarf_a33((m - proc_control_node_B.i_ka) + 1, n -
          proc_control_node_B.i_ka, proc_control_node_B.iaii_fj,
          tau[proc_control_node_B.itau_m], A, proc_control_node_B.iaii_fj + 21,
          proc_control_node_B.work_he);
      }

      if (proc_control_node_B.i_ka < m) {
        proc_control_node_B.b_ox = (proc_control_node_B.iaii_fj + m) -
          proc_control_node_B.i_ka;
        proc_control_node_B.b_k_it = proc_control_node_B.iaii_fj;
        while (proc_control_node_B.b_k_it + 1 <= proc_control_node_B.b_ox) {
          A[proc_control_node_B.b_k_it] *= -tau[proc_control_node_B.itau_m];
          proc_control_node_B.b_k_it++;
        }
      }

      A[proc_control_node_B.iaii_fj - 1] = 1.0 - tau[proc_control_node_B.itau_m];
      proc_control_node_B.b_ox = 0;
      while (proc_control_node_B.b_ox <= proc_control_node_B.i_ka - 2) {
        A[(proc_control_node_B.iaii_fj - proc_control_node_B.b_ox) - 2] = 0.0;
        proc_control_node_B.b_ox++;
      }

      proc_control_node_B.itau_m--;
      proc_control_node_B.i_ka--;
    }
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_qr_hrb(const real_T A[273],
  real_T Q[273], real_T R[169])
{
  memcpy(&proc_control_node_B.b_A_cs[0], &A[0], 273U * sizeof(real_T));
  proc_control_node_xgeqrf_eb(proc_control_node_B.b_A_cs,
    proc_control_node_B.tau_h);
  for (proc_control_node_B.j_h = 0; proc_control_node_B.j_h < 13;
       proc_control_node_B.j_h++) {
    proc_control_node_B.i_in = 0;
    while (proc_control_node_B.i_in <= proc_control_node_B.j_h) {
      R[proc_control_node_B.i_in + 13 * proc_control_node_B.j_h] =
        proc_control_node_B.b_A_cs[21 * proc_control_node_B.j_h +
        proc_control_node_B.i_in];
      proc_control_node_B.i_in++;
    }

    proc_control_node_B.i_in = proc_control_node_B.j_h + 1;
    while (proc_control_node_B.i_in + 1 < 14) {
      R[proc_control_node_B.i_in + 13 * proc_control_node_B.j_h] = 0.0;
      proc_control_node_B.i_in++;
    }
  }

  proc_control_node_xorgqr_gf(21, 13, 13, proc_control_node_B.b_A_cs, 1,
    proc_control_node_B.tau_h, 1);
  proc_control_node_B.i_in = 0;
  for (proc_control_node_B.j_h = 0; proc_control_node_B.j_h < 13;
       proc_control_node_B.j_h++) {
    memcpy(&Q[proc_control_node_B.i_in],
           &proc_control_node_B.b_A_cs[proc_control_node_B.i_in], 21U * sizeof
           (real_T));
    proc_control_node_B.i_in += 21;
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrFactor_a(const real_T A
  [169], real_T S[169], const real_T Ns[104])
{
  for (proc_control_node_B.j_ea = 0; proc_control_node_B.j_ea < 13;
       proc_control_node_B.j_ea++) {
    proc_control_node_B.coffset_ms = proc_control_node_B.j_ea * 13;
    for (proc_control_node_B.i_il = 0; proc_control_node_B.i_il < 13;
         proc_control_node_B.i_il++) {
      proc_control_node_B.aoffset_e = proc_control_node_B.i_il * 13;
      proc_control_node_B.s_n = 0.0;
      for (proc_control_node_B.k_f = 0; proc_control_node_B.k_f < 13;
           proc_control_node_B.k_f++) {
        proc_control_node_B.s_n += A[proc_control_node_B.k_f * 13 +
          proc_control_node_B.j_ea] * S[proc_control_node_B.aoffset_e +
          proc_control_node_B.k_f];
      }

      proc_control_node_B.y_ox[proc_control_node_B.coffset_ms +
        proc_control_node_B.i_il] = proc_control_node_B.s_n;
      proc_control_node_B.y_h3[proc_control_node_B.i_il + 21 *
        proc_control_node_B.j_ea] = proc_control_node_B.y_ox[13 *
        proc_control_node_B.j_ea + proc_control_node_B.i_il];
    }
  }

  proc_control_node_B.k_f = 0;
  for (proc_control_node_B.j_ea = 0; proc_control_node_B.j_ea < 13;
       proc_control_node_B.j_ea++) {
    proc_control_node_B.coffset_ms = 0;
    for (proc_control_node_B.i_il = 0; proc_control_node_B.i_il < 8;
         proc_control_node_B.i_il++) {
      proc_control_node_B.y_h3[(proc_control_node_B.i_il +
        proc_control_node_B.k_f) + 13] = Ns[proc_control_node_B.coffset_ms +
        proc_control_node_B.j_ea];
      proc_control_node_B.coffset_ms += 13;
    }

    proc_control_node_B.k_f += 21;
  }

  proc_control_node_qr_hrb(proc_control_node_B.y_h3, proc_control_node_B.a__1_m,
    proc_control_node_B.y_ox);
  proc_control_node_B.k_f = 0;
  for (proc_control_node_B.j_ea = 0; proc_control_node_B.j_ea < 13;
       proc_control_node_B.j_ea++) {
    proc_control_node_B.coffset_ms = 0;
    for (proc_control_node_B.i_il = 0; proc_control_node_B.i_il < 13;
         proc_control_node_B.i_il++) {
      S[proc_control_node_B.i_il + proc_control_node_B.k_f] =
        proc_control_node_B.y_ox[proc_control_node_B.coffset_ms +
        proc_control_node_B.j_ea];
      proc_control_node_B.coffset_ms += 13;
    }

    proc_control_node_B.k_f += 13;
  }
}

// Function for MATLAB Function: '<S282>/Correct'
void proc_control_nodeModelClass::EKFCorrector_correctStateAndS_i(real_T x[13],
  real_T S[169], const real_T residue[8], const real_T Pxy[104], const real_T
  Sy[64], const real_T H[104], const real_T Rsqrt[64])
{
  proc_control_node_B.b_i_g = 0;
  for (proc_control_node_B.b_i_h = 0; proc_control_node_B.b_i_h < 8;
       proc_control_node_B.b_i_h++) {
    proc_control_node_B.j_ox = 0;
    for (proc_control_node_B.j_m = 0; proc_control_node_B.j_m < 13;
         proc_control_node_B.j_m++) {
      proc_control_node_B.K_cx[proc_control_node_B.j_ox +
        proc_control_node_B.b_i_h] = Pxy[proc_control_node_B.j_m +
        proc_control_node_B.b_i_g];
      proc_control_node_B.j_ox += 8;
    }

    proc_control_node_B.b_i_g += 13;
  }

  proc_control_node_trisolve_ga(Sy, proc_control_node_B.K_cx);
  proc_control_node_B.j_ox = 0;
  for (proc_control_node_B.j_m = 0; proc_control_node_B.j_m < 13;
       proc_control_node_B.j_m++) {
    memcpy(&proc_control_node_B.b_C_i[proc_control_node_B.j_ox],
           &proc_control_node_B.K_cx[proc_control_node_B.j_ox], sizeof(real_T) <<
           3U);
    proc_control_node_B.j_ox += 8;
  }

  proc_control_node_B.b_i_g = 0;
  for (proc_control_node_B.j_m = 0; proc_control_node_B.j_m < 8;
       proc_control_node_B.j_m++) {
    proc_control_node_B.b_i_h = 0;
    for (proc_control_node_B.j_ox = 0; proc_control_node_B.j_ox < 8;
         proc_control_node_B.j_ox++) {
      proc_control_node_B.Sy_g[proc_control_node_B.j_ox +
        proc_control_node_B.b_i_g] = Sy[proc_control_node_B.b_i_h +
        proc_control_node_B.j_m];
      proc_control_node_B.b_i_h += 8;
    }

    proc_control_node_B.b_i_g += 8;
  }

  proc_control_node_trisolve_ga0(proc_control_node_B.Sy_g,
    proc_control_node_B.b_C_i);
  proc_control_node_B.b_i_g = 0;
  for (proc_control_node_B.j_m = 0; proc_control_node_B.j_m < 8;
       proc_control_node_B.j_m++) {
    proc_control_node_B.b_i_h = 0;
    for (proc_control_node_B.j_ox = 0; proc_control_node_B.j_ox < 13;
         proc_control_node_B.j_ox++) {
      proc_control_node_B.K_cx[proc_control_node_B.j_ox +
        proc_control_node_B.b_i_g] =
        proc_control_node_B.b_C_i[proc_control_node_B.b_i_h +
        proc_control_node_B.j_m];
      proc_control_node_B.b_i_h += 8;
    }

    proc_control_node_B.b_i_g += 13;
  }

  for (proc_control_node_B.b_i_g = 0; proc_control_node_B.b_i_g < 13;
       proc_control_node_B.b_i_g++) {
    proc_control_node_B.d4 = 0.0;
    proc_control_node_B.j_m = 0;
    for (proc_control_node_B.b_i_h = 0; proc_control_node_B.b_i_h < 8;
         proc_control_node_B.b_i_h++) {
      proc_control_node_B.d4 += proc_control_node_B.K_cx[proc_control_node_B.j_m
        + proc_control_node_B.b_i_g] * residue[proc_control_node_B.b_i_h];
      proc_control_node_B.j_m += 13;
    }

    x[proc_control_node_B.b_i_g] += proc_control_node_B.d4;
  }

  for (proc_control_node_B.b_i_g = 0; proc_control_node_B.b_i_g < 104;
       proc_control_node_B.b_i_g++) {
    proc_control_node_B.b_C_i[proc_control_node_B.b_i_g] =
      -proc_control_node_B.K_cx[proc_control_node_B.b_i_g];
  }

  for (proc_control_node_B.b_i_g = 0; proc_control_node_B.b_i_g < 13;
       proc_control_node_B.b_i_g++) {
    memset(&proc_control_node_B.A_i[proc_control_node_B.b_i_g * 13], 0, 13U *
           sizeof(real_T));
    for (proc_control_node_B.b_i_h = 0; proc_control_node_B.b_i_h < 8;
         proc_control_node_B.b_i_h++) {
      for (proc_control_node_B.j_m = 0; proc_control_node_B.j_m < 13;
           proc_control_node_B.j_m++) {
        proc_control_node_B.j_ox = 13 * proc_control_node_B.b_i_g +
          proc_control_node_B.j_m;
        proc_control_node_B.A_i[proc_control_node_B.j_ox] +=
          proc_control_node_B.b_C_i[13 * proc_control_node_B.b_i_h +
          proc_control_node_B.j_m] * H[(proc_control_node_B.b_i_g << 3) +
          proc_control_node_B.b_i_h];
      }
    }
  }

  proc_control_node_B.j_ox = 0;
  for (proc_control_node_B.j_m = 0; proc_control_node_B.j_m < 13;
       proc_control_node_B.j_m++) {
    proc_control_node_B.A_i[proc_control_node_B.j_ox]++;
    proc_control_node_B.j_ox += 14;
  }

  for (proc_control_node_B.b_i_g = 0; proc_control_node_B.b_i_g < 8;
       proc_control_node_B.b_i_g++) {
    memset(&proc_control_node_B.b_C_i[proc_control_node_B.b_i_g * 13], 0, 13U *
           sizeof(real_T));
    for (proc_control_node_B.b_i_h = 0; proc_control_node_B.b_i_h < 8;
         proc_control_node_B.b_i_h++) {
      for (proc_control_node_B.j_m = 0; proc_control_node_B.j_m < 13;
           proc_control_node_B.j_m++) {
        proc_control_node_B.j_ox = 13 * proc_control_node_B.b_i_g +
          proc_control_node_B.j_m;
        proc_control_node_B.b_C_i[proc_control_node_B.j_ox] +=
          proc_control_node_B.K_cx[13 * proc_control_node_B.b_i_h +
          proc_control_node_B.j_m] * Rsqrt[(proc_control_node_B.b_i_g << 3) +
          proc_control_node_B.b_i_h];
      }
    }
  }

  proc_control_node_qrFactor_a(proc_control_node_B.A_i, S,
    proc_control_node_B.b_C_i);
}

// Function for MATLAB Function: '<S283>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_k(int32_T n, const
  real_T x[48], int32_T ix0)
{
  real_T absxk;
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_p = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        absxk = fabs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_p) {
          t = proc_control_node_B.scale_p / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_p = absxk;
        } else {
          t = absxk / proc_control_node_B.scale_p;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_p * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S283>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_bs(int32_T m, int32_T
  n, const real_T A[48], int32_T ia0, const real_T x[48], int32_T ix0, real_T y
  [3])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = ((n - 1) << 4) + ia0;
    for (iac = ia0; iac <= b; iac += 16) {
      ix = ix0;
      proc_control_node_B.c_f2 = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_f2 += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_f2;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S283>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_og(int32_T m, int32_T
  n, real_T alpha1, int32_T ix0, const real_T y[3], real_T A[48], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jA;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    jA = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_f = y[jy] * alpha1;
        ix = ix0;
        b = m + jA;
        for (ijA = jA; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_f;
          ix++;
        }
      }

      jy++;
      jA += 16;
    }
  }
}

// Function for MATLAB Function: '<S283>/Correct'
void proc_control_nodeModelClass::proc_control_node_qr_f(const real_T A[48],
  real_T Q[48], real_T R[9])
{
  int32_T exitg1;
  boolean_T exitg2;
  memcpy(&proc_control_node_B.b_A_ph[0], &A[0], 48U * sizeof(real_T));
  proc_control_node_B.work_oc[0] = 0.0;
  proc_control_node_B.work_oc[1] = 0.0;
  proc_control_node_B.work_oc[2] = 0.0;
  proc_control_node_B.b_atmp_i = proc_control_node_B.b_A_ph[0];
  proc_control_node_B.tau_idx_0 = 0.0;
  proc_control_node_B.beta1_e = proc_control_node_xnrm2_k(15,
    proc_control_node_B.b_A_ph, 2);
  if (proc_control_node_B.beta1_e != 0.0) {
    proc_control_node_B.beta1_e = proc_control_node_rt_hypotd_snf
      (proc_control_node_B.b_A_ph[0], proc_control_node_B.beta1_e);
    if (proc_control_node_B.b_A_ph[0] >= 0.0) {
      proc_control_node_B.beta1_e = -proc_control_node_B.beta1_e;
    }

    if (fabs(proc_control_node_B.beta1_e) < 1.0020841800044864E-292) {
      proc_control_node_B.knt_hz = -1;
      proc_control_node_B.c_lastc = 0;
      do {
        proc_control_node_B.knt_hz++;
        proc_control_node_B.b_coltop = 1;
        while (proc_control_node_B.b_coltop + 1 <= 16) {
          proc_control_node_B.b_A_ph[proc_control_node_B.b_coltop] *=
            9.9792015476736E+291;
          proc_control_node_B.b_coltop++;
        }

        proc_control_node_B.beta1_e *= 9.9792015476736E+291;
        proc_control_node_B.b_atmp_i *= 9.9792015476736E+291;
      } while (!(fabs(proc_control_node_B.beta1_e) >= 1.0020841800044864E-292));

      proc_control_node_B.beta1_e = proc_control_node_rt_hypotd_snf
        (proc_control_node_B.b_atmp_i, proc_control_node_xnrm2_k(15,
          proc_control_node_B.b_A_ph, 2));
      if (proc_control_node_B.b_atmp_i >= 0.0) {
        proc_control_node_B.beta1_e = -proc_control_node_B.beta1_e;
      }

      proc_control_node_B.tau_idx_0 = (proc_control_node_B.beta1_e -
        proc_control_node_B.b_atmp_i) / proc_control_node_B.beta1_e;
      proc_control_node_B.b_atmp_i = 1.0 / (proc_control_node_B.b_atmp_i -
        proc_control_node_B.beta1_e);
      proc_control_node_B.b_coltop = 1;
      while (proc_control_node_B.b_coltop + 1 <= 16) {
        proc_control_node_B.b_A_ph[proc_control_node_B.b_coltop] *=
          proc_control_node_B.b_atmp_i;
        proc_control_node_B.b_coltop++;
      }

      while (proc_control_node_B.c_lastc <= proc_control_node_B.knt_hz) {
        proc_control_node_B.beta1_e *= 1.0020841800044864E-292;
        proc_control_node_B.c_lastc++;
      }

      proc_control_node_B.b_atmp_i = proc_control_node_B.beta1_e;
    } else {
      proc_control_node_B.tau_idx_0 = (proc_control_node_B.beta1_e -
        proc_control_node_B.b_A_ph[0]) / proc_control_node_B.beta1_e;
      proc_control_node_B.b_atmp_i = 1.0 / (proc_control_node_B.b_A_ph[0] -
        proc_control_node_B.beta1_e);
      proc_control_node_B.c_lastc = 1;
      while (proc_control_node_B.c_lastc + 1 <= 16) {
        proc_control_node_B.b_A_ph[proc_control_node_B.c_lastc] *=
          proc_control_node_B.b_atmp_i;
        proc_control_node_B.c_lastc++;
      }

      proc_control_node_B.b_atmp_i = proc_control_node_B.beta1_e;
    }
  }

  proc_control_node_B.b_A_ph[0] = 1.0;
  if (proc_control_node_B.tau_idx_0 != 0.0) {
    proc_control_node_B.knt_hz = 16;
    proc_control_node_B.c_lastc = 0;
    while ((proc_control_node_B.knt_hz > 0) &&
           (proc_control_node_B.b_A_ph[proc_control_node_B.c_lastc + 15] == 0.0))
    {
      proc_control_node_B.knt_hz--;
      proc_control_node_B.c_lastc--;
    }

    proc_control_node_B.c_lastc = 2;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.c_lastc > 0)) {
      proc_control_node_B.b_coltop = ((proc_control_node_B.c_lastc - 1) << 4) +
        16;
      proc_control_node_B.coltop_g = proc_control_node_B.b_coltop;
      do {
        exitg1 = 0;
        if (proc_control_node_B.coltop_g + 1 <= proc_control_node_B.b_coltop +
            proc_control_node_B.knt_hz) {
          if (proc_control_node_B.b_A_ph[proc_control_node_B.coltop_g] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.coltop_g++;
          }
        } else {
          proc_control_node_B.c_lastc--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.knt_hz = 0;
    proc_control_node_B.c_lastc = 0;
  }

  if (proc_control_node_B.knt_hz > 0) {
    proc_control_node_xgemv_bs(proc_control_node_B.knt_hz,
      proc_control_node_B.c_lastc, proc_control_node_B.b_A_ph, 17,
      proc_control_node_B.b_A_ph, 1, proc_control_node_B.work_oc);
    proc_control_node_xgerc_og(proc_control_node_B.knt_hz,
      proc_control_node_B.c_lastc, -proc_control_node_B.tau_idx_0, 1,
      proc_control_node_B.work_oc, proc_control_node_B.b_A_ph, 17);
  }

  proc_control_node_B.b_A_ph[0] = proc_control_node_B.b_atmp_i;
  proc_control_node_B.b_atmp_i = proc_control_node_B.b_A_ph[17];
  proc_control_node_B.tau_idx_1 = 0.0;
  proc_control_node_B.beta1_e = proc_control_node_xnrm2_k(14,
    proc_control_node_B.b_A_ph, 19);
  if (proc_control_node_B.beta1_e != 0.0) {
    proc_control_node_B.beta1_e = proc_control_node_rt_hypotd_snf
      (proc_control_node_B.b_A_ph[17], proc_control_node_B.beta1_e);
    if (proc_control_node_B.b_A_ph[17] >= 0.0) {
      proc_control_node_B.beta1_e = -proc_control_node_B.beta1_e;
    }

    if (fabs(proc_control_node_B.beta1_e) < 1.0020841800044864E-292) {
      proc_control_node_B.knt_hz = -1;
      do {
        proc_control_node_B.knt_hz++;
        proc_control_node_B.b_coltop = 18;
        while (proc_control_node_B.b_coltop + 1 <= 32) {
          proc_control_node_B.b_A_ph[proc_control_node_B.b_coltop] *=
            9.9792015476736E+291;
          proc_control_node_B.b_coltop++;
        }

        proc_control_node_B.beta1_e *= 9.9792015476736E+291;
        proc_control_node_B.b_atmp_i *= 9.9792015476736E+291;
      } while (!(fabs(proc_control_node_B.beta1_e) >= 1.0020841800044864E-292));

      proc_control_node_B.beta1_e = proc_control_node_rt_hypotd_snf
        (proc_control_node_B.b_atmp_i, proc_control_node_xnrm2_k(14,
          proc_control_node_B.b_A_ph, 19));
      if (proc_control_node_B.b_atmp_i >= 0.0) {
        proc_control_node_B.beta1_e = -proc_control_node_B.beta1_e;
      }

      proc_control_node_B.tau_idx_1 = (proc_control_node_B.beta1_e -
        proc_control_node_B.b_atmp_i) / proc_control_node_B.beta1_e;
      proc_control_node_B.b_atmp_i = 1.0 / (proc_control_node_B.b_atmp_i -
        proc_control_node_B.beta1_e);
      proc_control_node_B.b_coltop = 18;
      while (proc_control_node_B.b_coltop + 1 <= 32) {
        proc_control_node_B.b_A_ph[proc_control_node_B.b_coltop] *=
          proc_control_node_B.b_atmp_i;
        proc_control_node_B.b_coltop++;
      }

      proc_control_node_B.c_lastc = 0;
      while (proc_control_node_B.c_lastc <= proc_control_node_B.knt_hz) {
        proc_control_node_B.beta1_e *= 1.0020841800044864E-292;
        proc_control_node_B.c_lastc++;
      }

      proc_control_node_B.b_atmp_i = proc_control_node_B.beta1_e;
    } else {
      proc_control_node_B.tau_idx_1 = (proc_control_node_B.beta1_e -
        proc_control_node_B.b_A_ph[17]) / proc_control_node_B.beta1_e;
      proc_control_node_B.b_atmp_i = 1.0 / (proc_control_node_B.b_A_ph[17] -
        proc_control_node_B.beta1_e);
      proc_control_node_B.c_lastc = 18;
      while (proc_control_node_B.c_lastc + 1 <= 32) {
        proc_control_node_B.b_A_ph[proc_control_node_B.c_lastc] *=
          proc_control_node_B.b_atmp_i;
        proc_control_node_B.c_lastc++;
      }

      proc_control_node_B.b_atmp_i = proc_control_node_B.beta1_e;
    }
  }

  proc_control_node_B.b_A_ph[17] = 1.0;
  if (proc_control_node_B.tau_idx_1 != 0.0) {
    proc_control_node_B.knt_hz = 15;
    proc_control_node_B.c_lastc = 16;
    while ((proc_control_node_B.knt_hz > 0) &&
           (proc_control_node_B.b_A_ph[proc_control_node_B.c_lastc + 15] == 0.0))
    {
      proc_control_node_B.knt_hz--;
      proc_control_node_B.c_lastc--;
    }

    proc_control_node_B.c_lastc = 1;
    proc_control_node_B.coltop_g = 33;
    do {
      exitg1 = 0;
      if (proc_control_node_B.coltop_g + 1 <= 33 + proc_control_node_B.knt_hz) {
        if (proc_control_node_B.b_A_ph[proc_control_node_B.coltop_g] != 0.0) {
          exitg1 = 1;
        } else {
          proc_control_node_B.coltop_g++;
        }
      } else {
        proc_control_node_B.c_lastc = 0;
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  } else {
    proc_control_node_B.knt_hz = 0;
    proc_control_node_B.c_lastc = 0;
  }

  if (proc_control_node_B.knt_hz > 0) {
    proc_control_node_xgemv_bs(proc_control_node_B.knt_hz,
      proc_control_node_B.c_lastc, proc_control_node_B.b_A_ph, 34,
      proc_control_node_B.b_A_ph, 18, proc_control_node_B.work_oc);
    proc_control_node_xgerc_og(proc_control_node_B.knt_hz,
      proc_control_node_B.c_lastc, -proc_control_node_B.tau_idx_1, 18,
      proc_control_node_B.work_oc, proc_control_node_B.b_A_ph, 34);
  }

  proc_control_node_B.b_A_ph[17] = proc_control_node_B.b_atmp_i;
  proc_control_node_B.b_atmp_i = proc_control_node_B.b_A_ph[34];
  proc_control_node_B.tau_idx_2 = 0.0;
  proc_control_node_B.beta1_e = proc_control_node_xnrm2_k(13,
    proc_control_node_B.b_A_ph, 36);
  if (proc_control_node_B.beta1_e != 0.0) {
    proc_control_node_B.beta1_e = proc_control_node_rt_hypotd_snf
      (proc_control_node_B.b_A_ph[34], proc_control_node_B.beta1_e);
    if (proc_control_node_B.b_A_ph[34] >= 0.0) {
      proc_control_node_B.beta1_e = -proc_control_node_B.beta1_e;
    }

    if (fabs(proc_control_node_B.beta1_e) < 1.0020841800044864E-292) {
      proc_control_node_B.knt_hz = -1;
      do {
        proc_control_node_B.knt_hz++;
        proc_control_node_B.b_coltop = 35;
        while (proc_control_node_B.b_coltop + 1 <= 48) {
          proc_control_node_B.b_A_ph[proc_control_node_B.b_coltop] *=
            9.9792015476736E+291;
          proc_control_node_B.b_coltop++;
        }

        proc_control_node_B.beta1_e *= 9.9792015476736E+291;
        proc_control_node_B.b_atmp_i *= 9.9792015476736E+291;
      } while (!(fabs(proc_control_node_B.beta1_e) >= 1.0020841800044864E-292));

      proc_control_node_B.beta1_e = proc_control_node_rt_hypotd_snf
        (proc_control_node_B.b_atmp_i, proc_control_node_xnrm2_k(13,
          proc_control_node_B.b_A_ph, 36));
      if (proc_control_node_B.b_atmp_i >= 0.0) {
        proc_control_node_B.beta1_e = -proc_control_node_B.beta1_e;
      }

      proc_control_node_B.tau_idx_2 = (proc_control_node_B.beta1_e -
        proc_control_node_B.b_atmp_i) / proc_control_node_B.beta1_e;
      proc_control_node_B.b_atmp_i = 1.0 / (proc_control_node_B.b_atmp_i -
        proc_control_node_B.beta1_e);
      proc_control_node_B.b_coltop = 35;
      while (proc_control_node_B.b_coltop + 1 <= 48) {
        proc_control_node_B.b_A_ph[proc_control_node_B.b_coltop] *=
          proc_control_node_B.b_atmp_i;
        proc_control_node_B.b_coltop++;
      }

      proc_control_node_B.c_lastc = 0;
      while (proc_control_node_B.c_lastc <= proc_control_node_B.knt_hz) {
        proc_control_node_B.beta1_e *= 1.0020841800044864E-292;
        proc_control_node_B.c_lastc++;
      }

      proc_control_node_B.b_atmp_i = proc_control_node_B.beta1_e;
    } else {
      proc_control_node_B.tau_idx_2 = (proc_control_node_B.beta1_e -
        proc_control_node_B.b_A_ph[34]) / proc_control_node_B.beta1_e;
      proc_control_node_B.b_atmp_i = 1.0 / (proc_control_node_B.b_A_ph[34] -
        proc_control_node_B.beta1_e);
      proc_control_node_B.c_lastc = 35;
      while (proc_control_node_B.c_lastc + 1 <= 48) {
        proc_control_node_B.b_A_ph[proc_control_node_B.c_lastc] *=
          proc_control_node_B.b_atmp_i;
        proc_control_node_B.c_lastc++;
      }

      proc_control_node_B.b_atmp_i = proc_control_node_B.beta1_e;
    }
  }

  proc_control_node_B.b_A_ph[34] = proc_control_node_B.b_atmp_i;
  R[0] = proc_control_node_B.b_A_ph[0];
  proc_control_node_B.c_lastc = 1;
  while (proc_control_node_B.c_lastc + 1 < 4) {
    R[proc_control_node_B.c_lastc] = 0.0;
    proc_control_node_B.c_lastc++;
  }

  proc_control_node_B.work_oc[0] = 0.0;
  proc_control_node_B.c_lastc = 0;
  while (proc_control_node_B.c_lastc <= 1) {
    R[proc_control_node_B.c_lastc + 3] =
      proc_control_node_B.b_A_ph[proc_control_node_B.c_lastc + 16];
    proc_control_node_B.c_lastc++;
  }

  while (proc_control_node_B.c_lastc + 1 < 4) {
    R[proc_control_node_B.c_lastc + 3] = 0.0;
    proc_control_node_B.c_lastc++;
  }

  proc_control_node_B.work_oc[1] = 0.0;
  proc_control_node_B.c_lastc = 0;
  while (proc_control_node_B.c_lastc <= 2) {
    R[proc_control_node_B.c_lastc + 6] =
      proc_control_node_B.b_A_ph[proc_control_node_B.c_lastc + 32];
    proc_control_node_B.c_lastc++;
  }

  proc_control_node_B.work_oc[2] = 0.0;
  proc_control_node_B.b_coltop = 35;
  while (proc_control_node_B.b_coltop + 1 <= 48) {
    proc_control_node_B.b_A_ph[proc_control_node_B.b_coltop] *=
      -proc_control_node_B.tau_idx_2;
    proc_control_node_B.b_coltop++;
  }

  proc_control_node_B.b_A_ph[34] = 1.0 - proc_control_node_B.tau_idx_2;
  proc_control_node_B.c_lastc = 0;
  while (proc_control_node_B.c_lastc <= 1) {
    proc_control_node_B.b_A_ph[33 - proc_control_node_B.c_lastc] = 0.0;
    proc_control_node_B.c_lastc++;
  }

  proc_control_node_B.b_A_ph[17] = 1.0;
  if (proc_control_node_B.tau_idx_1 != 0.0) {
    proc_control_node_B.c_lastc = 15;
    proc_control_node_B.b_coltop = 33;
    while ((proc_control_node_B.c_lastc > 0) &&
           (proc_control_node_B.b_A_ph[proc_control_node_B.b_coltop - 2] == 0.0))
    {
      proc_control_node_B.c_lastc--;
      proc_control_node_B.b_coltop--;
    }

    proc_control_node_B.b_coltop = 1;
    proc_control_node_B.knt_hz = 34;
    do {
      exitg1 = 0;
      if (proc_control_node_B.knt_hz <= proc_control_node_B.c_lastc + 33) {
        if (proc_control_node_B.b_A_ph[proc_control_node_B.knt_hz - 1] != 0.0) {
          exitg1 = 1;
        } else {
          proc_control_node_B.knt_hz++;
        }
      } else {
        proc_control_node_B.b_coltop = 0;
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  } else {
    proc_control_node_B.c_lastc = 0;
    proc_control_node_B.b_coltop = 0;
  }

  if (proc_control_node_B.c_lastc > 0) {
    proc_control_node_xgemv_bs(proc_control_node_B.c_lastc,
      proc_control_node_B.b_coltop, proc_control_node_B.b_A_ph, 34,
      proc_control_node_B.b_A_ph, 18, proc_control_node_B.work_oc);
    proc_control_node_xgerc_og(proc_control_node_B.c_lastc,
      proc_control_node_B.b_coltop, -proc_control_node_B.tau_idx_1, 18,
      proc_control_node_B.work_oc, proc_control_node_B.b_A_ph, 34);
  }

  proc_control_node_B.b_coltop = 18;
  while (proc_control_node_B.b_coltop + 1 <= 32) {
    proc_control_node_B.b_A_ph[proc_control_node_B.b_coltop] *=
      -proc_control_node_B.tau_idx_1;
    proc_control_node_B.b_coltop++;
  }

  proc_control_node_B.b_A_ph[17] = 1.0 - proc_control_node_B.tau_idx_1;
  proc_control_node_B.b_A_ph[16] = 0.0;
  proc_control_node_B.b_A_ph[0] = 1.0;
  if (proc_control_node_B.tau_idx_0 != 0.0) {
    proc_control_node_B.c_lastc = 16;
    proc_control_node_B.b_coltop = 17;
    while ((proc_control_node_B.c_lastc > 0) &&
           (proc_control_node_B.b_A_ph[proc_control_node_B.b_coltop - 2] == 0.0))
    {
      proc_control_node_B.c_lastc--;
      proc_control_node_B.b_coltop--;
    }

    proc_control_node_B.b_coltop = 2;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.b_coltop > 0)) {
      proc_control_node_B.coltop_g = ((proc_control_node_B.b_coltop - 1) << 4) +
        17;
      proc_control_node_B.knt_hz = proc_control_node_B.coltop_g;
      do {
        exitg1 = 0;
        if (proc_control_node_B.knt_hz <= (proc_control_node_B.coltop_g +
             proc_control_node_B.c_lastc) - 1) {
          if (proc_control_node_B.b_A_ph[proc_control_node_B.knt_hz - 1] != 0.0)
          {
            exitg1 = 1;
          } else {
            proc_control_node_B.knt_hz++;
          }
        } else {
          proc_control_node_B.b_coltop--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.c_lastc = 0;
    proc_control_node_B.b_coltop = 0;
  }

  if (proc_control_node_B.c_lastc > 0) {
    proc_control_node_xgemv_bs(proc_control_node_B.c_lastc,
      proc_control_node_B.b_coltop, proc_control_node_B.b_A_ph, 17,
      proc_control_node_B.b_A_ph, 1, proc_control_node_B.work_oc);
    proc_control_node_xgerc_og(proc_control_node_B.c_lastc,
      proc_control_node_B.b_coltop, -proc_control_node_B.tau_idx_0, 1,
      proc_control_node_B.work_oc, proc_control_node_B.b_A_ph, 17);
  }

  proc_control_node_B.b_coltop = 1;
  while (proc_control_node_B.b_coltop + 1 <= 16) {
    proc_control_node_B.b_A_ph[proc_control_node_B.b_coltop] *=
      -proc_control_node_B.tau_idx_0;
    proc_control_node_B.b_coltop++;
  }

  proc_control_node_B.b_A_ph[0] = 1.0 - proc_control_node_B.tau_idx_0;
  proc_control_node_B.b_coltop = 0;
  for (proc_control_node_B.coltop_g = 0; proc_control_node_B.coltop_g < 3;
       proc_control_node_B.coltop_g++) {
    memcpy(&Q[proc_control_node_B.b_coltop],
           &proc_control_node_B.b_A_ph[proc_control_node_B.b_coltop], sizeof
           (real_T) << 4U);
    proc_control_node_B.b_coltop += 16;
  }
}

// Function for MATLAB Function: '<S283>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_i(const real_T A[9],
  real_T B[39])
{
  real_T tmp;
  int32_T i;
  int32_T j;
  int32_T jBcol;
  int32_T tmp_0;
  for (j = 0; j < 13; j++) {
    jBcol = 3 * j;
    if (B[jBcol] != 0.0) {
      B[jBcol] /= A[0];
      for (i = 2; i < 4; i++) {
        tmp_0 = (i + jBcol) - 1;
        B[tmp_0] -= A[i - 1] * B[jBcol];
      }
    }

    tmp = B[jBcol + 1];
    if (tmp != 0.0) {
      B[jBcol + 1] = tmp / A[4];
      B[jBcol + 2] -= B[jBcol + 1] * A[5];
    }

    if (B[jBcol + 2] != 0.0) {
      B[jBcol + 2] /= A[8];
    }
  }
}

// Function for MATLAB Function: '<S283>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_iq(const real_T A[9],
  real_T B[39])
{
  real_T tmp;
  int32_T i;
  int32_T j;
  int32_T jBcol;
  int32_T tmp_0;
  for (j = 0; j < 13; j++) {
    jBcol = 3 * j;
    tmp = B[jBcol + 2];
    if (tmp != 0.0) {
      B[jBcol + 2] = tmp / A[8];
      for (i = 0; i < 2; i++) {
        tmp_0 = i + jBcol;
        B[tmp_0] -= B[jBcol + 2] * A[i + 6];
      }
    }

    tmp = B[jBcol + 1];
    if (tmp != 0.0) {
      B[jBcol + 1] = tmp / A[4];
      B[jBcol] -= B[jBcol + 1] * A[3];
    }

    if (B[jBcol] != 0.0) {
      B[jBcol] /= A[0];
    }
  }
}

// Function for MATLAB Function: '<S283>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_kt(int32_T n, const
  real_T x[208], int32_T ix0)
{
  real_T absxk;
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_bi = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        absxk = fabs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_bi) {
          t = proc_control_node_B.scale_bi / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_bi = absxk;
        } else {
          t = absxk / proc_control_node_B.scale_bi;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_bi * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S283>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_bsn(int32_T m, int32_T
  n, const real_T A[208], int32_T ia0, const real_T x[208], int32_T ix0, real_T
  y[13])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = ((n - 1) << 4) + ia0;
    for (iac = ia0; iac <= b; iac += 16) {
      ix = ix0;
      proc_control_node_B.c_a = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_a += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_a;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S283>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_ogv(int32_T m, int32_T
  n, real_T alpha1, int32_T ix0, const real_T y[13], real_T A[208], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jA;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    jA = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_k = y[jy] * alpha1;
        ix = ix0;
        b = m + jA;
        for (ijA = jA; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_k;
          ix++;
        }
      }

      jy++;
      jA += 16;
    }
  }
}

// Function for MATLAB Function: '<S283>/Correct'
void proc_control_nodeModelClass::proc_control_node_xzlarf_nc(int32_T m, int32_T
  n, int32_T iv0, real_T tau, real_T C[208], int32_T ic0, real_T work[13])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_d = m;
    proc_control_node_B.lastc_p = iv0 + m;
    while ((proc_control_node_B.lastv_d > 0) && (C[proc_control_node_B.lastc_p -
            2] == 0.0)) {
      proc_control_node_B.lastv_d--;
      proc_control_node_B.lastc_p--;
    }

    proc_control_node_B.lastc_p = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_p > 0)) {
      proc_control_node_B.coltop_d = ((proc_control_node_B.lastc_p - 1) << 4) +
        ic0;
      proc_control_node_B.ia_by = proc_control_node_B.coltop_d;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_by <= (proc_control_node_B.coltop_d +
             proc_control_node_B.lastv_d) - 1) {
          if (C[proc_control_node_B.ia_by - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_by++;
          }
        } else {
          proc_control_node_B.lastc_p--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_d = 0;
    proc_control_node_B.lastc_p = 0;
  }

  if (proc_control_node_B.lastv_d > 0) {
    proc_control_node_xgemv_bsn(proc_control_node_B.lastv_d,
      proc_control_node_B.lastc_p, C, ic0, C, iv0, work);
    proc_control_node_xgerc_ogv(proc_control_node_B.lastv_d,
      proc_control_node_B.lastc_p, -tau, iv0, work, C, ic0);
  }
}

// Function for MATLAB Function: '<S283>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrf_m3(real_T A[208],
  int32_T ia0, int32_T m, int32_T n, int32_T nfxd, real_T tau[13])
{
  memset(&proc_control_node_B.work_n[0], 0, 13U * sizeof(real_T));
  proc_control_node_B.i_kg = 0;
  while (proc_control_node_B.i_kg <= nfxd - 1) {
    proc_control_node_B.ii_d = (((proc_control_node_B.i_kg << 4) + ia0) +
      proc_control_node_B.i_kg) - 1;
    proc_control_node_B.mmi_tmp_jr = m - proc_control_node_B.i_kg;
    if (proc_control_node_B.i_kg + 1 < m) {
      proc_control_node_B.b_atmp_f = A[proc_control_node_B.ii_d];
      tau[proc_control_node_B.i_kg] = 0.0;
      if (proc_control_node_B.mmi_tmp_jr > 0) {
        proc_control_node_B.beta1_i = proc_control_node_xnrm2_kt
          (proc_control_node_B.mmi_tmp_jr - 1, A, proc_control_node_B.ii_d + 2);
        if (proc_control_node_B.beta1_i != 0.0) {
          proc_control_node_B.beta1_i = proc_control_node_rt_hypotd_snf
            (A[proc_control_node_B.ii_d], proc_control_node_B.beta1_i);
          if (A[proc_control_node_B.ii_d] >= 0.0) {
            proc_control_node_B.beta1_i = -proc_control_node_B.beta1_i;
          }

          if (fabs(proc_control_node_B.beta1_i) < 1.0020841800044864E-292) {
            proc_control_node_B.knt_h4 = -1;
            proc_control_node_B.mmip1_hk = proc_control_node_B.ii_d +
              proc_control_node_B.mmi_tmp_jr;
            do {
              proc_control_node_B.knt_h4++;
              proc_control_node_B.b_k_a0 = proc_control_node_B.ii_d + 1;
              while (proc_control_node_B.b_k_a0 + 1 <=
                     proc_control_node_B.mmip1_hk) {
                A[proc_control_node_B.b_k_a0] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_a0++;
              }

              proc_control_node_B.beta1_i *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp_f *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1_i) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1_i = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp_f, proc_control_node_xnrm2_kt
               (proc_control_node_B.mmi_tmp_jr - 1, A, proc_control_node_B.ii_d
                + 2));
            if (proc_control_node_B.b_atmp_f >= 0.0) {
              proc_control_node_B.beta1_i = -proc_control_node_B.beta1_i;
            }

            tau[proc_control_node_B.i_kg] = (proc_control_node_B.beta1_i -
              proc_control_node_B.b_atmp_f) / proc_control_node_B.beta1_i;
            proc_control_node_B.b_atmp_f = 1.0 / (proc_control_node_B.b_atmp_f -
              proc_control_node_B.beta1_i);
            proc_control_node_B.b_k_a0 = proc_control_node_B.ii_d + 1;
            while (proc_control_node_B.b_k_a0 + 1 <=
                   proc_control_node_B.mmip1_hk) {
              A[proc_control_node_B.b_k_a0] *= proc_control_node_B.b_atmp_f;
              proc_control_node_B.b_k_a0++;
            }

            proc_control_node_B.mmip1_hk = 0;
            while (proc_control_node_B.mmip1_hk <= proc_control_node_B.knt_h4) {
              proc_control_node_B.beta1_i *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1_hk++;
            }

            proc_control_node_B.b_atmp_f = proc_control_node_B.beta1_i;
          } else {
            tau[proc_control_node_B.i_kg] = (proc_control_node_B.beta1_i -
              A[proc_control_node_B.ii_d]) / proc_control_node_B.beta1_i;
            proc_control_node_B.b_atmp_f = 1.0 / (A[proc_control_node_B.ii_d] -
              proc_control_node_B.beta1_i);
            proc_control_node_B.knt_h4 = proc_control_node_B.ii_d +
              proc_control_node_B.mmi_tmp_jr;
            proc_control_node_B.mmip1_hk = proc_control_node_B.ii_d + 1;
            while (proc_control_node_B.mmip1_hk + 1 <=
                   proc_control_node_B.knt_h4) {
              A[proc_control_node_B.mmip1_hk] *= proc_control_node_B.b_atmp_f;
              proc_control_node_B.mmip1_hk++;
            }

            proc_control_node_B.b_atmp_f = proc_control_node_B.beta1_i;
          }
        }
      }

      A[proc_control_node_B.ii_d] = proc_control_node_B.b_atmp_f;
    } else {
      tau[proc_control_node_B.i_kg] = 0.0;
    }

    if (proc_control_node_B.i_kg + 1 < n) {
      proc_control_node_B.b_atmp_f = A[proc_control_node_B.ii_d];
      A[proc_control_node_B.ii_d] = 1.0;
      proc_control_node_xzlarf_nc(proc_control_node_B.mmi_tmp_jr, (n -
        proc_control_node_B.i_kg) - 1, proc_control_node_B.ii_d + 1,
        tau[proc_control_node_B.i_kg], A, proc_control_node_B.ii_d + 17,
        proc_control_node_B.work_n);
      A[proc_control_node_B.ii_d] = proc_control_node_B.b_atmp_f;
    }

    proc_control_node_B.i_kg++;
  }
}

// Function for MATLAB Function: '<S283>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_mg(real_T A[208],
  real_T tau[13])
{
  memset(&tau[0], 0, 13U * sizeof(real_T));
  proc_control_node_qrf_m3(A, 1, 16, 13, 13, tau);
}

// Function for MATLAB Function: '<S283>/Correct'
void proc_control_nodeModelClass::proc_control_node_xorgqr_gf3(int32_T m,
  int32_T n, int32_T k, real_T A[208], int32_T ia0, const real_T tau[13],
  int32_T itau0)
{
  int32_T exitg1;
  boolean_T exitg2;
  if (n >= 1) {
    proc_control_node_B.itau_d = k;
    while (proc_control_node_B.itau_d <= n - 1) {
      proc_control_node_B.i_gh = ((proc_control_node_B.itau_d << 4) + ia0) - 1;
      proc_control_node_B.iaii_j = 0;
      while (proc_control_node_B.iaii_j <= m - 1) {
        A[proc_control_node_B.i_gh + proc_control_node_B.iaii_j] = 0.0;
        proc_control_node_B.iaii_j++;
      }

      A[proc_control_node_B.i_gh + proc_control_node_B.itau_d] = 1.0;
      proc_control_node_B.itau_d++;
    }

    proc_control_node_B.itau_d = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_f4[0], 0, 13U * sizeof(real_T));
    proc_control_node_B.i_gh = k;
    while (proc_control_node_B.i_gh >= 1) {
      proc_control_node_B.iaii_j = ((((proc_control_node_B.i_gh - 1) << 4) + ia0)
        + proc_control_node_B.i_gh) - 1;
      if (proc_control_node_B.i_gh < n) {
        A[proc_control_node_B.iaii_j - 1] = 1.0;
        proc_control_node_B.lastc_l = (m - proc_control_node_B.i_gh) - 1;
        if (tau[proc_control_node_B.itau_d] != 0.0) {
          proc_control_node_B.lastv_o = proc_control_node_B.lastc_l + 2;
          proc_control_node_B.lastc_l += proc_control_node_B.iaii_j;
          while ((proc_control_node_B.lastv_o > 0) &&
                 (A[proc_control_node_B.lastc_l] == 0.0)) {
            proc_control_node_B.lastv_o--;
            proc_control_node_B.lastc_l--;
          }

          proc_control_node_B.lastc_l = n - proc_control_node_B.i_gh;
          exitg2 = false;
          while ((!exitg2) && (proc_control_node_B.lastc_l > 0)) {
            proc_control_node_B.coltop_gj = (((proc_control_node_B.lastc_l - 1) <<
              4) + proc_control_node_B.iaii_j) + 15;
            proc_control_node_B.b_ia_m = proc_control_node_B.coltop_gj;
            do {
              exitg1 = 0;
              if (proc_control_node_B.b_ia_m + 1 <=
                  proc_control_node_B.coltop_gj + proc_control_node_B.lastv_o) {
                if (A[proc_control_node_B.b_ia_m] != 0.0) {
                  exitg1 = 1;
                } else {
                  proc_control_node_B.b_ia_m++;
                }
              } else {
                proc_control_node_B.lastc_l--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          proc_control_node_B.lastv_o = 0;
          proc_control_node_B.lastc_l = 0;
        }

        if (proc_control_node_B.lastv_o > 0) {
          proc_control_node_xgemv_bsn(proc_control_node_B.lastv_o,
            proc_control_node_B.lastc_l, A, proc_control_node_B.iaii_j + 16, A,
            proc_control_node_B.iaii_j, proc_control_node_B.work_f4);
          proc_control_node_xgerc_ogv(proc_control_node_B.lastv_o,
            proc_control_node_B.lastc_l, -tau[proc_control_node_B.itau_d],
            proc_control_node_B.iaii_j, proc_control_node_B.work_f4, A,
            proc_control_node_B.iaii_j + 16);
        }
      }

      if (proc_control_node_B.i_gh < m) {
        proc_control_node_B.lastv_o = (proc_control_node_B.iaii_j + m) -
          proc_control_node_B.i_gh;
        proc_control_node_B.lastc_l = proc_control_node_B.iaii_j;
        while (proc_control_node_B.lastc_l + 1 <= proc_control_node_B.lastv_o) {
          A[proc_control_node_B.lastc_l] *= -tau[proc_control_node_B.itau_d];
          proc_control_node_B.lastc_l++;
        }
      }

      A[proc_control_node_B.iaii_j - 1] = 1.0 - tau[proc_control_node_B.itau_d];
      proc_control_node_B.lastv_o = 0;
      while (proc_control_node_B.lastv_o <= proc_control_node_B.i_gh - 2) {
        A[(proc_control_node_B.iaii_j - proc_control_node_B.lastv_o) - 2] = 0.0;
        proc_control_node_B.lastv_o++;
      }

      proc_control_node_B.itau_d--;
      proc_control_node_B.i_gh--;
    }
  }
}

// Function for MATLAB Function: '<S283>/Correct'
void proc_control_nodeModelClass::proc_control_node_qr_fq(const real_T A[208],
  real_T Q[208], real_T R[169])
{
  memcpy(&proc_control_node_B.b_A_nh[0], &A[0], 208U * sizeof(real_T));
  proc_control_node_xgeqrf_mg(proc_control_node_B.b_A_nh,
    proc_control_node_B.tau_e);
  for (proc_control_node_B.j_n3 = 0; proc_control_node_B.j_n3 < 13;
       proc_control_node_B.j_n3++) {
    proc_control_node_B.i_ov = 0;
    while (proc_control_node_B.i_ov <= proc_control_node_B.j_n3) {
      R[proc_control_node_B.i_ov + 13 * proc_control_node_B.j_n3] =
        proc_control_node_B.b_A_nh[(proc_control_node_B.j_n3 << 4) +
        proc_control_node_B.i_ov];
      proc_control_node_B.i_ov++;
    }

    proc_control_node_B.i_ov = proc_control_node_B.j_n3 + 1;
    while (proc_control_node_B.i_ov + 1 < 14) {
      R[proc_control_node_B.i_ov + 13 * proc_control_node_B.j_n3] = 0.0;
      proc_control_node_B.i_ov++;
    }
  }

  proc_control_node_xorgqr_gf3(16, 13, 13, proc_control_node_B.b_A_nh, 1,
    proc_control_node_B.tau_e, 1);
  proc_control_node_B.i_ov = 0;
  for (proc_control_node_B.j_n3 = 0; proc_control_node_B.j_n3 < 13;
       proc_control_node_B.j_n3++) {
    memcpy(&Q[proc_control_node_B.i_ov],
           &proc_control_node_B.b_A_nh[proc_control_node_B.i_ov], sizeof(real_T)
           << 4U);
    proc_control_node_B.i_ov += 16;
  }
}

// Function for MATLAB Function: '<S283>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrFactor_l(const real_T A
  [169], real_T S[169], const real_T Ns[39])
{
  for (proc_control_node_B.j_l = 0; proc_control_node_B.j_l < 13;
       proc_control_node_B.j_l++) {
    proc_control_node_B.coffset_gk = proc_control_node_B.j_l * 13;
    for (proc_control_node_B.i_o0o = 0; proc_control_node_B.i_o0o < 13;
         proc_control_node_B.i_o0o++) {
      proc_control_node_B.aoffset_h = proc_control_node_B.i_o0o * 13;
      proc_control_node_B.s_nq = 0.0;
      for (proc_control_node_B.k_a = 0; proc_control_node_B.k_a < 13;
           proc_control_node_B.k_a++) {
        proc_control_node_B.s_nq += A[proc_control_node_B.k_a * 13 +
          proc_control_node_B.j_l] * S[proc_control_node_B.aoffset_h +
          proc_control_node_B.k_a];
      }

      proc_control_node_B.y_fb[proc_control_node_B.coffset_gk +
        proc_control_node_B.i_o0o] = proc_control_node_B.s_nq;
      proc_control_node_B.y_o3[proc_control_node_B.i_o0o +
        (proc_control_node_B.j_l << 4)] = proc_control_node_B.y_fb[13 *
        proc_control_node_B.j_l + proc_control_node_B.i_o0o];
    }

    proc_control_node_B.i_o0o = proc_control_node_B.j_l << 4;
    proc_control_node_B.y_o3[proc_control_node_B.i_o0o + 13] =
      Ns[proc_control_node_B.j_l];
    proc_control_node_B.y_o3[proc_control_node_B.i_o0o + 14] =
      Ns[proc_control_node_B.j_l + 13];
    proc_control_node_B.y_o3[proc_control_node_B.i_o0o + 15] =
      Ns[proc_control_node_B.j_l + 26];
  }

  proc_control_node_qr_fq(proc_control_node_B.y_o3, proc_control_node_B.a__1_ms,
    proc_control_node_B.y_fb);
  proc_control_node_B.k_a = 0;
  for (proc_control_node_B.j_l = 0; proc_control_node_B.j_l < 13;
       proc_control_node_B.j_l++) {
    proc_control_node_B.coffset_gk = 0;
    for (proc_control_node_B.i_o0o = 0; proc_control_node_B.i_o0o < 13;
         proc_control_node_B.i_o0o++) {
      S[proc_control_node_B.i_o0o + proc_control_node_B.k_a] =
        proc_control_node_B.y_fb[proc_control_node_B.coffset_gk +
        proc_control_node_B.j_l];
      proc_control_node_B.coffset_gk += 13;
    }

    proc_control_node_B.k_a += 13;
  }
}

// Function for MATLAB Function: '<S283>/Correct'
void proc_control_nodeModelClass::EKFCorrector_correctStateAndS_m(real_T x[13],
  real_T S[169], const real_T residue[3], const real_T Pxy[39], const real_T Sy
  [9], const real_T H[39], const real_T Rsqrt[9])
{
  proc_control_node_B.j_kx = 0;
  for (proc_control_node_B.j_p = 0; proc_control_node_B.j_p < 13;
       proc_control_node_B.j_p++) {
    proc_control_node_B.K_j[proc_control_node_B.j_kx] =
      Pxy[proc_control_node_B.j_p];
    proc_control_node_B.K_j[proc_control_node_B.j_kx + 1] =
      Pxy[proc_control_node_B.j_p + 13];
    proc_control_node_B.K_j[proc_control_node_B.j_kx + 2] =
      Pxy[proc_control_node_B.j_p + 26];
    proc_control_node_B.j_kx += 3;
  }

  proc_control_node_trisolve_i(Sy, proc_control_node_B.K_j);
  proc_control_node_B.j_kx = 0;
  for (proc_control_node_B.j_p = 0; proc_control_node_B.j_p < 13;
       proc_control_node_B.j_p++) {
    proc_control_node_B.b_C_c[proc_control_node_B.j_kx] =
      proc_control_node_B.K_j[proc_control_node_B.j_kx];
    proc_control_node_B.b_C_c[proc_control_node_B.j_kx + 1] =
      proc_control_node_B.K_j[proc_control_node_B.j_kx + 1];
    proc_control_node_B.b_C_c[proc_control_node_B.j_kx + 2] =
      proc_control_node_B.K_j[proc_control_node_B.j_kx + 2];
    proc_control_node_B.j_kx += 3;
  }

  proc_control_node_B.i28 = 0;
  for (proc_control_node_B.i27 = 0; proc_control_node_B.i27 < 3;
       proc_control_node_B.i27++) {
    proc_control_node_B.Sy_jk[proc_control_node_B.i28] =
      Sy[proc_control_node_B.i27];
    proc_control_node_B.Sy_jk[proc_control_node_B.i28 + 1] =
      Sy[proc_control_node_B.i27 + 3];
    proc_control_node_B.Sy_jk[proc_control_node_B.i28 + 2] =
      Sy[proc_control_node_B.i27 + 6];
    proc_control_node_B.i28 += 3;
  }

  proc_control_node_trisolve_iq(proc_control_node_B.Sy_jk,
    proc_control_node_B.b_C_c);
  proc_control_node_B.i28 = 0;
  for (proc_control_node_B.i27 = 0; proc_control_node_B.i27 < 3;
       proc_control_node_B.i27++) {
    proc_control_node_B.i29 = 0;
    for (proc_control_node_B.j_p = 0; proc_control_node_B.j_p < 13;
         proc_control_node_B.j_p++) {
      proc_control_node_B.K_j[proc_control_node_B.j_p + proc_control_node_B.i28]
        = proc_control_node_B.b_C_c[proc_control_node_B.i29 +
        proc_control_node_B.i27];
      proc_control_node_B.i29 += 3;
    }

    proc_control_node_B.i28 += 13;
  }

  for (proc_control_node_B.i28 = 0; proc_control_node_B.i28 < 13;
       proc_control_node_B.i28++) {
    x[proc_control_node_B.i28] +=
      (proc_control_node_B.K_j[proc_control_node_B.i28 + 13] * residue[1] +
       proc_control_node_B.K_j[proc_control_node_B.i28] * residue[0]) +
      proc_control_node_B.K_j[proc_control_node_B.i28 + 26] * residue[2];
  }

  for (proc_control_node_B.i28 = 0; proc_control_node_B.i28 < 39;
       proc_control_node_B.i28++) {
    proc_control_node_B.b_C_c[proc_control_node_B.i28] =
      -proc_control_node_B.K_j[proc_control_node_B.i28];
  }

  proc_control_node_B.i28 = 0;
  proc_control_node_B.i27 = 0;
  for (proc_control_node_B.i29 = 0; proc_control_node_B.i29 < 13;
       proc_control_node_B.i29++) {
    for (proc_control_node_B.j_p = 0; proc_control_node_B.j_p < 13;
         proc_control_node_B.j_p++) {
      proc_control_node_B.j_kx = proc_control_node_B.j_p +
        proc_control_node_B.i28;
      proc_control_node_B.A_c[proc_control_node_B.j_kx] = 0.0;
      proc_control_node_B.A_c[proc_control_node_B.j_kx] +=
        H[proc_control_node_B.i27] *
        proc_control_node_B.b_C_c[proc_control_node_B.j_p];
      proc_control_node_B.A_c[proc_control_node_B.j_kx] +=
        H[proc_control_node_B.i27 + 1] *
        proc_control_node_B.b_C_c[proc_control_node_B.j_p + 13];
      proc_control_node_B.A_c[proc_control_node_B.j_kx] +=
        H[proc_control_node_B.i27 + 2] *
        proc_control_node_B.b_C_c[proc_control_node_B.j_p + 26];
    }

    proc_control_node_B.i28 += 13;
    proc_control_node_B.i27 += 3;
  }

  proc_control_node_B.j_kx = 0;
  for (proc_control_node_B.j_p = 0; proc_control_node_B.j_p < 13;
       proc_control_node_B.j_p++) {
    proc_control_node_B.i28 = 0;
    proc_control_node_B.i27 = 0;
    for (proc_control_node_B.i29 = 0; proc_control_node_B.i29 < 3;
         proc_control_node_B.i29++) {
      proc_control_node_B.K_tmp = proc_control_node_B.i28 +
        proc_control_node_B.j_p;
      proc_control_node_B.b_C_c[proc_control_node_B.K_tmp] = 0.0;
      proc_control_node_B.b_C_c[proc_control_node_B.K_tmp] +=
        Rsqrt[proc_control_node_B.i27] *
        proc_control_node_B.K_j[proc_control_node_B.j_p];
      proc_control_node_B.b_C_c[proc_control_node_B.K_tmp] +=
        Rsqrt[proc_control_node_B.i27 + 1] *
        proc_control_node_B.K_j[proc_control_node_B.j_p + 13];
      proc_control_node_B.b_C_c[proc_control_node_B.K_tmp] +=
        Rsqrt[proc_control_node_B.i27 + 2] *
        proc_control_node_B.K_j[proc_control_node_B.j_p + 26];
      proc_control_node_B.i28 += 13;
      proc_control_node_B.i27 += 3;
    }

    proc_control_node_B.A_c[proc_control_node_B.j_kx]++;
    proc_control_node_B.j_kx += 14;
  }

  proc_control_node_qrFactor_l(proc_control_node_B.A_c, S,
    proc_control_node_B.b_C_c);
}

real_T rt_powd_snf(real_T u0, real_T u1)
{
  real_T tmp;
  real_T tmp_0;
  real_T y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = (rtNaN);
  } else {
    tmp = fabs(u0);
    tmp_0 = fabs(u1);
    if (rtIsInf(u1)) {
      if (tmp == 1.0) {
        y = 1.0;
      } else if (tmp > 1.0) {
        if (u1 > 0.0) {
          y = (rtInf);
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = (rtInf);
      }
    } else if (tmp_0 == 0.0) {
      y = 1.0;
    } else if (tmp_0 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
      y = (rtNaN);
    } else {
      y = pow(u0, u1);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S1>/AUV State Equation'
real_T proc_control_nodeModelClass::proc_control_node_erf(real_T x)
{
  real_T y;
  int32_T e;

  // ========================== COPYRIGHT NOTICE ============================
  //  The algorithms for calculating ERF(X) and ERFC(X) are derived
  //  from FDLIBM, which has the following notice:
  //
  //  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
  //
  //  Developed at SunSoft, a Sun Microsystems, Inc. business.
  //  Permission to use, copy, modify, and distribute this
  //  software is freely granted, provided that this notice
  //  is preserved.
  // =============================    END    ================================
  proc_control_node_B.absx = fabs(x);
  if (rtIsNaN(x)) {
    y = x;
  } else if (rtIsInf(x)) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else if (proc_control_node_B.absx < 0.84375) {
    if (proc_control_node_B.absx < 3.7252902984619141E-9) {
      if (proc_control_node_B.absx < 2.8480945388892178E-306) {
        y = (8.0 * x + 1.0270333367641007 * x) * 0.125;
      } else {
        y = 0.12837916709551259 * x + x;
      }
    } else {
      proc_control_node_B.z_ko = x * x;
      y = ((((proc_control_node_B.z_ko * -2.3763016656650163E-5 +
              -0.0057702702964894416) * proc_control_node_B.z_ko +
             -0.02848174957559851) * proc_control_node_B.z_ko +
            -0.3250421072470015) * proc_control_node_B.z_ko +
           0.12837916709551256) / (((((proc_control_node_B.z_ko *
        -3.9602282787753681E-6 + 0.00013249473800432164) *
        proc_control_node_B.z_ko + 0.0050813062818757656) *
        proc_control_node_B.z_ko + 0.0650222499887673) *
        proc_control_node_B.z_ko + 0.39791722395915535) *
        proc_control_node_B.z_ko + 1.0) * x + x;
    }
  } else if (proc_control_node_B.absx < 1.25) {
    if (x >= 0.0) {
      y = (((((((proc_control_node_B.absx - 1.0) * -0.0021663755948687908 +
                0.035478304325618236) * (proc_control_node_B.absx - 1.0) +
               -0.11089469428239668) * (proc_control_node_B.absx - 1.0) +
              0.31834661990116175) * (proc_control_node_B.absx - 1.0) +
             -0.37220787603570132) * (proc_control_node_B.absx - 1.0) +
            0.41485611868374833) * (proc_control_node_B.absx - 1.0) +
           -0.0023621185607526594) / (((((((proc_control_node_B.absx - 1.0) *
        0.011984499846799107 + 0.013637083912029051) * (proc_control_node_B.absx
        - 1.0) + 0.12617121980876164) * (proc_control_node_B.absx - 1.0) +
        0.071828654414196266) * (proc_control_node_B.absx - 1.0) +
        0.540397917702171) * (proc_control_node_B.absx - 1.0) +
        0.10642088040084423) * (proc_control_node_B.absx - 1.0) + 1.0) +
        0.84506291151046753;
    } else {
      y = -0.84506291151046753 - (((((((proc_control_node_B.absx - 1.0) *
        -0.0021663755948687908 + 0.035478304325618236) *
        (proc_control_node_B.absx - 1.0) + -0.11089469428239668) *
        (proc_control_node_B.absx - 1.0) + 0.31834661990116175) *
        (proc_control_node_B.absx - 1.0) + -0.37220787603570132) *
        (proc_control_node_B.absx - 1.0) + 0.41485611868374833) *
        (proc_control_node_B.absx - 1.0) + -0.0023621185607526594) /
        (((((((proc_control_node_B.absx - 1.0) * 0.011984499846799107 +
              0.013637083912029051) * (proc_control_node_B.absx - 1.0) +
             0.12617121980876164) * (proc_control_node_B.absx - 1.0) +
            0.071828654414196266) * (proc_control_node_B.absx - 1.0) +
           0.540397917702171) * (proc_control_node_B.absx - 1.0) +
          0.10642088040084423) * (proc_control_node_B.absx - 1.0) + 1.0);
    }
  } else if (proc_control_node_B.absx > 6.0) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else {
    proc_control_node_B.s_i = 1.0 / (proc_control_node_B.absx *
      proc_control_node_B.absx);
    if (proc_control_node_B.absx < 2.8571434020996094) {
      proc_control_node_B.R_nl = ((((((proc_control_node_B.s_i *
        -9.8143293441691455 + -81.2874355063066) * proc_control_node_B.s_i +
        -184.60509290671104) * proc_control_node_B.s_i + -162.39666946257347) *
        proc_control_node_B.s_i + -62.375332450326006) * proc_control_node_B.s_i
        + -10.558626225323291) * proc_control_node_B.s_i + -0.69385857270718176)
        * proc_control_node_B.s_i + -0.0098649440348471482;
      proc_control_node_B.s_i = (((((((proc_control_node_B.s_i *
        -0.0604244152148581 + 6.5702497703192817) * proc_control_node_B.s_i +
        108.63500554177944) * proc_control_node_B.s_i + 429.00814002756783) *
        proc_control_node_B.s_i + 645.38727173326788) * proc_control_node_B.s_i
        + 434.56587747522923) * proc_control_node_B.s_i + 137.65775414351904) *
        proc_control_node_B.s_i + 19.651271667439257) * proc_control_node_B.s_i
        + 1.0;
    } else {
      proc_control_node_B.R_nl = (((((proc_control_node_B.s_i *
        -483.5191916086514 + -1025.0951316110772) * proc_control_node_B.s_i +
        -637.56644336838963) * proc_control_node_B.s_i + -160.63638485582192) *
        proc_control_node_B.s_i + -17.757954917754752) * proc_control_node_B.s_i
        + -0.799283237680523) * proc_control_node_B.s_i + -0.0098649429247001;
      proc_control_node_B.s_i = ((((((proc_control_node_B.s_i *
        -22.440952446585818 + 474.52854120695537) * proc_control_node_B.s_i +
        2553.0504064331644) * proc_control_node_B.s_i + 3199.8582195085955) *
        proc_control_node_B.s_i + 1536.729586084437) * proc_control_node_B.s_i +
        325.79251299657392) * proc_control_node_B.s_i + 30.338060743482458) *
        proc_control_node_B.s_i + 1.0;
    }

    if (!rtIsNaN(proc_control_node_B.absx)) {
      proc_control_node_B.z_ko = frexp(proc_control_node_B.absx, &e);
    } else {
      proc_control_node_B.z_ko = proc_control_node_B.absx;
      e = 0;
    }

    proc_control_node_B.z_ko = floor(proc_control_node_B.z_ko * 2.097152E+6) /
      2.097152E+6 * rt_powd_snf(2.0, static_cast<real_T>(e));
    if (x < 0.0) {
      y = exp((proc_control_node_B.z_ko - proc_control_node_B.absx) *
              (proc_control_node_B.z_ko + proc_control_node_B.absx) +
              proc_control_node_B.R_nl / proc_control_node_B.s_i) * exp
        (-proc_control_node_B.z_ko * proc_control_node_B.z_ko - 0.5625) /
        proc_control_node_B.absx - 1.0;
    } else {
      y = 1.0 - exp((proc_control_node_B.z_ko - proc_control_node_B.absx) *
                    (proc_control_node_B.z_ko + proc_control_node_B.absx) +
                    proc_control_node_B.R_nl / proc_control_node_B.s_i) * exp
        (-proc_control_node_B.z_ko * proc_control_node_B.z_ko - 0.5625) /
        proc_control_node_B.absx;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S1>/AUV State Equation'
void proc_control_nodeModelClass::proc_con_AUVQuatPerturbedSimFcn(const real_T
  in1[13], const real_T in2[6], const real_T in3[8], real_T out1[13])
{
  proc_control_node_B.t8_l = in1[4] * in1[6];
  proc_control_node_B.t9_p = in1[5] * in1[6];
  proc_control_node_B.t10_i = in1[3] * in1[4];
  proc_control_node_B.t11_b3 = in1[3] * in1[5];
  proc_control_node_B.t12_gn = in1[4] * in1[4];
  proc_control_node_B.t13_oq = in1[5] * in1[5];
  proc_control_node_B.t15_b = in1[4] * in1[5] * 2.0;
  proc_control_node_B.t20_e = in1[3] * in1[6] * 2.0;
  proc_control_node_B.t33_e1 = in1[11] / 500.0;
  proc_control_node_B.t37_l = in1[10] / 1000.0;
  proc_control_node_B.t39_c = in1[12] * 0.018;
  proc_control_node_B.t63_e = in1[7] * 32.4648;
  proc_control_node_B.t67_d = in1[8] * 43.6156;
  proc_control_node_B.t68_o = in1[9] * 46.7695;
  proc_control_node_B.t16_l = proc_control_node_B.t8_l * 2.0;
  proc_control_node_B.t17_h = proc_control_node_B.t9_p * 2.0;
  proc_control_node_B.t18_l = proc_control_node_B.t10_i * 2.0;
  proc_control_node_B.t19_c = proc_control_node_B.t11_b3 * 2.0;
  proc_control_node_B.t21_c = proc_control_node_B.t12_gn * 2.0;
  proc_control_node_B.t22_a = proc_control_node_B.t13_oq * 2.0;
  proc_control_node_B.t23_i = in1[6] * in1[6] * 2.0;
  proc_control_node_B.t71 = proc_control_node_B.t33_e1 +
    proc_control_node_B.t39_c;
  proc_control_node_B.t33_e1 += proc_control_node_B.t37_l;
  proc_control_node_B.t37_l += proc_control_node_B.t39_c;
  proc_control_node_B.t39_c = in1[11] * 0.558 + proc_control_node_B.t63_e;
  proc_control_node_B.t80 = in1[10] * 0.062 + proc_control_node_B.t68_o;
  proc_control_node_B.t81 = in1[12] * 0.031 + proc_control_node_B.t67_d;
  proc_control_node_B.t84 = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] *
    0.592;
  proc_control_node_B.t45_l = proc_control_node_B.t17_h +
    proc_control_node_B.t18_l;
  proc_control_node_B.t55_i = proc_control_node_erf(in1[2] * 13.333333333333334
    - 2.0);
  proc_control_node_B.t65_az = (proc_control_node_B.t21_c +
    proc_control_node_B.t22_a) - 1.0;
  proc_control_node_B.t63_e = in1[12] * 0.062 + -proc_control_node_B.t63_e;
  proc_control_node_B.t67_d = in1[10] * 0.558 + -proc_control_node_B.t67_d;
  proc_control_node_B.t68_o = in1[11] * 0.031 + -proc_control_node_B.t68_o;
  proc_control_node_B.t86 = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_node_B.t87 = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  proc_control_node_B.t56_ix = proc_control_node_B.t16_l +
    -proc_control_node_B.t19_c;
  proc_control_node_B.t85 = proc_control_node_B.t55_i * 0.01575 + 0.01575;
  proc_control_node_B.t55_i = proc_control_node_B.t55_i * 15.7185 - 15.2815;
  out1[0] = (((proc_control_node_B.t22_a + proc_control_node_B.t23_i) - 1.0) *
             -in1[7] + (proc_control_node_B.t16_l + proc_control_node_B.t19_c) *
             in1[9]) + (proc_control_node_B.t15_b - proc_control_node_B.t20_e) *
    in1[8];
  out1[1] = ((proc_control_node_B.t15_b + proc_control_node_B.t20_e) * in1[7] -
             ((proc_control_node_B.t21_c + proc_control_node_B.t23_i) - 1.0) *
             in1[8]) + (proc_control_node_B.t17_h - proc_control_node_B.t18_l) *
    in1[9];
  out1[2] = (proc_control_node_B.t56_ix * in1[7] + proc_control_node_B.t45_l *
             in1[8]) - proc_control_node_B.t65_az * in1[9];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_node_B.t15_b = in1[10] * proc_control_node_B.t71;
  proc_control_node_B.t20_e = in1[10] * (fabs(in1[10]) * 0.167 +
    3.3333333333333335);
  proc_control_node_B.t16_l = in1[10] * proc_control_node_B.t80;
  proc_control_node_B.t17_h = in1[10] * proc_control_node_B.t67_d;
  proc_control_node_B.t18_l = in1[10] * proc_control_node_B.t86;
  proc_control_node_B.t19_c = in1[10] * proc_control_node_B.t87;
  proc_control_node_B.t21_c = in1[11] * (fabs(in1[11]) / 10.0 +
    2.3333333333333335);
  proc_control_node_B.t22_a = in1[11] * proc_control_node_B.t37_l;
  proc_control_node_B.t23_i = in1[11] * proc_control_node_B.t39_c;
  proc_control_node_B.out1_tmp_c3 = in1[11] * proc_control_node_B.t68_o;
  proc_control_node_B.out1_tmp_m = in1[11] * proc_control_node_B.t84;
  proc_control_node_B.t86 *= in1[11];
  proc_control_node_B.out1_tmp_nn = in1[12] * (fabs(in1[12]) * 0.102 + 5.0);
  proc_control_node_B.out1_tmp_ch = in1[12] * proc_control_node_B.t33_e1;
  proc_control_node_B.out1_tmp_na = in1[12] * proc_control_node_B.t63_e;
  proc_control_node_B.out1_tmp_h = in1[12] * proc_control_node_B.t81;
  proc_control_node_B.t84 *= in1[12];
  proc_control_node_B.t87 *= in1[12];
  proc_control_node_B.out1_tmp_iu = (proc_control_node_B.t9_p +
    proc_control_node_B.t10_i) * proc_control_node_B.t55_i;
  proc_control_node_B.t45_l *= proc_control_node_B.t85;
  proc_control_node_B.out1_tmp_ef = (proc_control_node_B.t8_l +
    -proc_control_node_B.t11_b3) * proc_control_node_B.t55_i;
  proc_control_node_B.t56_ix *= proc_control_node_B.t85;
  proc_control_node_B.t55_i *= proc_control_node_B.t65_az;
  proc_control_node_B.t65_az = (fabs(in1[7]) * 1.17 + 15.0) * in1[7];
  proc_control_node_B.t71 *= in1[7];
  proc_control_node_B.t81 *= in1[7];
  proc_control_node_B.t68_o *= in1[7];
  proc_control_node_B.t85 = (fabs(in1[8]) * 0.82 + 20.0) * in1[8];
  proc_control_node_B.t37_l *= in1[8];
  proc_control_node_B.t63_e *= in1[8];
  proc_control_node_B.t80 *= in1[8];
  proc_control_node_B.out1_tmp_pc = (fabs(in1[9]) * 0.756 + 23.333333333333332) *
    in1[9];
  proc_control_node_B.t33_e1 *= in1[9];
  proc_control_node_B.t39_c *= in1[9];
  proc_control_node_B.t67_d *= in1[9];
  out1[7] = (((((((((((((((((((((in2[0] * 0.030976977065388711 + in2[1] *
    9.4803055144857715E-7) - in2[2] * 6.8231348244175949E-6) + in2[3] *
    0.0001303522588356414) + (in2[4] * -0.010033314971702871 + in2[5] *
    0.0010125044874363649)) + (in3[0] * -0.00033076834054020519 + in3[1] *
    1.8595780444550231E-21)) + in3[2] * 0.00033506403327449372) + (in3[3] *
    0.00033363213569639753 - in3[4] * 0.001819638864719295)) + (in3[5] *
    -0.0018124211550371481 + in3[6] * 0.0018538731733468781)) + (in3[7] *
    0.001778186846409557 - proc_control_node_B.t8_l * 0.11107598193630119)) +
                        ((proc_control_node_B.t9_p * -0.00081126583629370218 -
    proc_control_node_B.t10_i * 0.00081126583629370218) +
    proc_control_node_B.t11_b3 * 0.11107598193630119)) +
                       ((proc_control_node_B.t12_gn * -0.0062610285338271466 -
    proc_control_node_B.t13_oq * 0.0062610285338271466) + in3[0] *
                        1.4142135623730951 * 0.015171119710606879)) + ((in3[1] *
    1.4142135623730951 * 0.014928824155507611 + in3[2] * 1.4142135623730951 *
    0.015171119710606879) + in3[3] * 1.4142135623730951 * 0.01516372519659284))
                     + (((proc_control_node_B.t15_b * -0.96028628902704993 -
    proc_control_node_B.t20_e * 0.0001303522588356414) +
    proc_control_node_B.t16_l * 9.4803055144857715E-7) -
                        proc_control_node_B.t17_h * 6.8231348244175949E-6)) +
                    (((proc_control_node_B.t18_l * -0.010033314971702871 -
                       proc_control_node_B.t19_c * 0.0010125044874363649) +
                      proc_control_node_B.t21_c * 0.010033314971702871) -
                     proc_control_node_B.t22_a * 2.9388947094905889E-5)) +
                   (((proc_control_node_B.t23_i * -6.8231348244175949E-6 +
                      proc_control_node_B.out1_tmp_c3 * 0.030976977065388711) +
                     proc_control_node_B.out1_tmp_m * 0.0010125044874363649) -
                    proc_control_node_B.t86 * 0.0001303522588356414)) +
                  (((proc_control_node_B.out1_tmp_nn * -0.0010125044874363649 +
                     proc_control_node_B.out1_tmp_ch * 0.0002115171795569455) +
                    proc_control_node_B.out1_tmp_na * 9.4803055144857715E-7) +
                   proc_control_node_B.out1_tmp_h * 0.030976977065388711)) +
                 ((proc_control_node_B.t84 * 0.010033314971702871 +
                   proc_control_node_B.t87 * 0.0001303522588356414) -
                  proc_control_node_B.out1_tmp_iu * 1.860035941942108E-5)) +
                ((proc_control_node_B.t45_l * -0.0076571888871557192 -
                  proc_control_node_B.out1_tmp_ef * 0.60776829002292643) -
                 proc_control_node_B.t56_ix * 0.589379797395962)) +
               ((proc_control_node_B.t55_i * -6.6934952627536608E-5 -
                 proc_control_node_B.t65_az * 0.030976977065388711) +
                proc_control_node_B.t71 * 0.0040409200239048832)) +
              (((proc_control_node_B.t81 * -0.0010125044874363649 +
                 proc_control_node_B.t68_o * 0.010033314971702871) -
                proc_control_node_B.t85 * 9.4803055144857715E-7) -
               proc_control_node_B.t37_l * 0.311032764122789)) +
             (((proc_control_node_B.t63_e * -0.0010125044874363649 -
                proc_control_node_B.t80 * 0.0001303522588356414) +
               proc_control_node_B.out1_tmp_pc * 6.8231348244175949E-6) +
              proc_control_node_B.t33_e1 * 0.031387639110527318)) +
    ((proc_control_node_B.t39_c * 0.010033314971702871 -
      proc_control_node_B.t67_d * 0.0001303522588356414) + 0.0031305142669135729);
  out1[8] = (((((((((((((((((((((in2[0] * 9.4803055144857715E-7 + in2[1] *
    0.02320783323245932) - in2[2] * 2.9076309096921531E-5) + in2[3] *
    0.021882274381510681) + (in2[4] * -0.0001026911824132076 - in2[5] *
    0.00042780737967584029)) + (in3[0] * 0.00013975754063522079 + in3[1] *
    7.9244610288113972E-21)) + in3[2] * -0.00014157257363048341) + (in3[3] *
    -0.0001409675626320625 - in3[4] * 0.0034249251816346319)) + (in3[5] *
    0.003387750973601051 + in3[6] * 0.0035708122797193441)) + (in3[7] *
    -0.0035336380716857632 - proc_control_node_B.t8_l * 0.00060385694847962161))
                        + ((proc_control_node_B.t9_p * -0.23982646564227009 -
    proc_control_node_B.t10_i * 0.23982646564227009) +
    proc_control_node_B.t11_b3 * 0.00060385694847962161)) +
                       ((proc_control_node_B.t12_gn * -0.026680932679612211 -
    proc_control_node_B.t13_oq * 0.026680932679612211) - in3[0] *
                        1.4142135623730951 * 0.01090649593858282)) + ((in3[1] *
    1.4142135623730951 * 0.011000123045544621 - in3[2] * 1.4142135623730951 *
    0.01090649593858282) + in3[3] * 1.4142135623730951 * 0.01090087173345982)) +
                     (((proc_control_node_B.t15_b * -2.9388947094905889E-5 -
                        proc_control_node_B.t20_e * 0.021882274381510681) +
                       proc_control_node_B.t16_l * 0.02320783323245932) -
                      proc_control_node_B.t17_h * 2.9076309096921531E-5)) +
                    (((proc_control_node_B.t18_l * -0.0001026911824132076 +
                       proc_control_node_B.t19_c * 0.00042780737967584029) +
                      proc_control_node_B.t21_c * 0.0001026911824132076) -
                     proc_control_node_B.t22_a * 0.71944283020623911)) +
                   (((proc_control_node_B.t23_i * -2.9076309096921531E-5 +
                      proc_control_node_B.out1_tmp_c3 * 9.4803055144857715E-7) -
                     proc_control_node_B.out1_tmp_m * 0.00042780737967584029) -
                    proc_control_node_B.t86 * 0.021882274381510681)) +
                  (((proc_control_node_B.out1_tmp_nn * 0.00042780737967584029 +
                     proc_control_node_B.out1_tmp_ch * 0.00090136558200456737) +
                    proc_control_node_B.out1_tmp_na * 0.02320783323245932) +
                   proc_control_node_B.out1_tmp_h * 9.4803055144857715E-7)) +
                 ((proc_control_node_B.t84 * 0.0001026911824132076 +
                   proc_control_node_B.t87 * 0.021882274381510681) -
                  proc_control_node_B.out1_tmp_iu * 0.45533768802085189)) +
                ((proc_control_node_B.t45_l * -1.2854146887555269 -
                  proc_control_node_B.out1_tmp_ef * 1.860035941942108E-5) -
                 proc_control_node_B.t56_ix * 0.0060323141908477191)) +
               (((proc_control_node_B.t55_i * -0.00028523859224080018 -
                  proc_control_node_B.t65_az * 9.4803055144857715E-7) +
                 proc_control_node_B.t71 * 0.678350505826831) +
                proc_control_node_B.t81 * 0.00042780737967584029)) +
              (((proc_control_node_B.t68_o * 0.0001026911824132076 -
                 proc_control_node_B.t85 * 0.02320783323245932) -
                proc_control_node_B.t37_l * 0.0031834266548094372) +
               proc_control_node_B.t63_e * 0.00042780737967584029)) +
             (((proc_control_node_B.t80 * -0.021882274381510681 +
                proc_control_node_B.out1_tmp_pc * 2.9076309096921531E-5) -
               proc_control_node_B.t33_e1 * 0.013262028769951049) +
              proc_control_node_B.t39_c * 0.0001026911824132076)) +
    (proc_control_node_B.t67_d * -0.021882274381510681 + 0.0133404663398061);
  out1[9] = ((((((((((((((((((((((in2[0] * -6.8231348244175949E-6 - in2[1] *
    2.9076309096921531E-5) + in2[2] * 0.021384731826702759) - in2[3] *
    0.002272431716587712) + (in2[4] * 0.00039756137245743289 + in2[5] *
    5.2828771531483014E-6)) + in3[0] * -1.725827915740819E-6) + in3[1] *
    -5.8281975682474322E-18) + in3[2] * 1.748241265284163E-6) + (in3[3] *
    1.740770148765829E-6 - in3[4] * 0.02095639900015615)) + (in3[5] *
    0.021100316216985739 - in3[6] * 0.021822949502860629)) + (in3[7] *
    0.02167903228603104 + proc_control_node_B.t8_l * 0.004346059700124901)) +
                        ((proc_control_node_B.t9_p * 0.024881704687475689 +
    proc_control_node_B.t10_i * 0.024881704687475689) -
    proc_control_node_B.t11_b3 * 0.004346059700124901)) +
                       ((proc_control_node_B.t12_gn * 0.0030060816152820162 +
    proc_control_node_B.t13_oq * 0.0030060816152820162) - in3[0] *
                        1.4142135623730951 * 4.8869263875916949E-5)) + ((in3[1] *
    1.4142135623730951 * 6.6264429389244648E-5 - in3[2] * 1.4142135623730951 *
    4.8869263875916949E-5) + in3[3] * 1.4142135623730951 * 6.7490056888775055E-5))
                     + (((proc_control_node_B.t15_b * 0.0002115171795569455 +
    proc_control_node_B.t20_e * 0.002272431716587712) -
    proc_control_node_B.t16_l * 2.9076309096921531E-5) +
                        proc_control_node_B.t17_h * 0.021384731826702759)) +
                    (((proc_control_node_B.t18_l * 0.00039756137245743289 -
                       proc_control_node_B.t19_c * 5.2828771531483014E-6) -
                      proc_control_node_B.t21_c * 0.00039756137245743289) +
                     proc_control_node_B.t22_a * 0.00090136558200456737)) +
                   (((proc_control_node_B.t23_i * 0.021384731826702759 -
                      proc_control_node_B.out1_tmp_c3 * 6.8231348244175949E-6) +
                     proc_control_node_B.out1_tmp_m * 5.2828771531483014E-6) +
                    proc_control_node_B.t86 * 0.002272431716587712)) +
                  (((proc_control_node_B.out1_tmp_nn * -5.2828771531483014E-6 -
                     proc_control_node_B.out1_tmp_ch * 0.66292668662778553) -
                    proc_control_node_B.out1_tmp_na * 2.9076309096921531E-5) -
                   proc_control_node_B.out1_tmp_h * 6.8231348244175949E-6)) +
                 ((proc_control_node_B.t84 * -0.00039756137245743289 -
                   proc_control_node_B.t87 * 0.002272431716587712) +
                  proc_control_node_B.out1_tmp_iu * 0.00057047718448160036)) +
                ((proc_control_node_B.t45_l * 0.133487820176676 +
                  proc_control_node_B.out1_tmp_ef * 0.00013386990525507319) +
                 proc_control_node_B.t56_ix * 0.023353661458078809)) +
               (((proc_control_node_B.t55_i * 0.2097842192199541 +
                  proc_control_node_B.t65_az * 6.8231348244175949E-6) -
                 proc_control_node_B.t71 * 0.070445383214219059) -
                proc_control_node_B.t81 * 5.2828771531483014E-6)) +
              (((proc_control_node_B.t68_o * -0.00039756137245743289 +
                 proc_control_node_B.t85 * 2.9076309096921531E-5) +
                proc_control_node_B.t37_l * 0.01232440254618042) -
               proc_control_node_B.t63_e * 5.2828771531483014E-6)) +
             (((proc_control_node_B.t80 * 0.002272431716587712 -
                proc_control_node_B.out1_tmp_pc * 0.021384731826702759) +
               proc_control_node_B.t33_e1 * 0.00016376919174759729) -
              proc_control_node_B.t39_c * 0.00039756137245743289)) +
    (proc_control_node_B.t67_d * 0.002272431716587712 - 0.0015030408076410081);
  out1[10] = ((((((((((((((((((((((((in2[0] * 0.0001303522588356414 + in2[1] *
    0.021882274381510681) - in2[2] * 0.002272431716587712) + in2[3] *
    1.71018810547529) + (in2[4] * -0.0080268590155159435 - in2[5] *
    0.0039859244840414)) + in3[0] * 0.0013021350951669831) + in3[1] *
    6.1932883292401409E-19) + in3[2] * -0.00131904594055876) + (in3[3] *
    -0.0013134089920948341 - in3[4] * 0.26767193546582568)) + (in3[5] *
    0.26476621250220889 + in3[6] * 0.2790736050389333)) + (in3[7] *
    -0.27616788207531651 - proc_control_node_B.t8_l * 0.0830290934481406)) +
    ((proc_control_node_B.t9_p * -18.72549529020894 - proc_control_node_B.t10_i *
      18.72549529020894) + proc_control_node_B.t11_b3 * 0.0830290934481406)) +
    ((proc_control_node_B.t12_gn * -2.0852233152147792 -
      proc_control_node_B.t13_oq * 2.0852233152147792) + in3[0] *
     1.4142135623730951 * 0.043593198825375247)) + ((in3[1] * 1.4142135623730951
    * -0.043051831063235027 + in3[2] * 1.4142135623730951 * 0.043593198825375247)
    - in3[3] * 1.4142135623730951 * 0.043976565543532631)) +
                        ((proc_control_node_B.t15_b * -0.0040409200239048832 -
    proc_control_node_B.t20_e * 1.71018810547529) + proc_control_node_B.t16_l *
    0.021882274381510681)) + ((proc_control_node_B.t17_h * -0.002272431716587712
    - proc_control_node_B.t18_l * 0.0080268590155159435) +
    proc_control_node_B.t19_c * 0.0039859244840414)) +
                      ((proc_control_node_B.t21_c * 0.0080268590155159435 -
                        proc_control_node_B.t22_a * 0.678350505826831) -
                       proc_control_node_B.t23_i * 0.002272431716587712)) +
                     ((proc_control_node_B.out1_tmp_c3 * 0.0001303522588356414 -
                       proc_control_node_B.out1_tmp_m * 0.0039859244840414) -
                      proc_control_node_B.t86 * 1.71018810547529)) +
                    (((proc_control_node_B.out1_tmp_nn * 0.0039859244840414 +
                       proc_control_node_B.out1_tmp_ch * 0.070445383214219059) +
                      proc_control_node_B.out1_tmp_na * 0.021882274381510681) +
                     proc_control_node_B.out1_tmp_h * 0.0001303522588356414)) +
                   ((proc_control_node_B.t84 * 0.0080268590155159435 +
                     proc_control_node_B.t87 * 1.71018810547529) -
                    proc_control_node_B.out1_tmp_iu * 0.42933022336523952)) +
                  ((proc_control_node_B.t45_l * -100.460348544499 -
                    proc_control_node_B.out1_tmp_ef * 0.0025575113183552841) -
                   proc_control_node_B.t56_ix * 0.47151599980996189)) +
                 ((proc_control_node_B.t55_i * -0.022292555139725449 -
                   proc_control_node_B.t65_az * 0.0001303522588356414) +
                  proc_control_node_B.t71 * 53.015831269733987)) +
                ((proc_control_node_B.t81 * 0.0039859244840414 +
                  proc_control_node_B.t68_o * 0.0080268590155159435) -
                 proc_control_node_B.t85 * 0.021882274381510681)) +
               ((proc_control_node_B.t37_l * -0.2488326294809943 +
                 proc_control_node_B.t63_e * 0.0039859244840414) -
                proc_control_node_B.t80 * 1.71018810547529)) +
              ((proc_control_node_B.out1_tmp_pc * 0.002272431716587712 -
                proc_control_node_B.t33_e1 * 0.1235636590052834) +
               proc_control_node_B.t39_c * 0.0080268590155159435)) +
    (proc_control_node_B.t67_d * -1.71018810547529 + 1.0426116576073889);
  out1[11] = ((((((((((((((((((((((in2[0] * -0.010033314971702871 - in2[1] *
    0.0001026911824132076) + in2[2] * 0.00039756137245743289) - in2[3] *
    0.0080268590155159435) + (in2[4] * 0.58374455968341665 - in2[5] *
    1.606290206365557E-6)) + (in3[0] * 5.24748238233168E-7 - in3[1] *
    1.083514276897426E-19)) + in3[2] * -5.3156315041823265E-7) + (in3[3] *
    -5.2929151302328333E-7 + in3[4] * 0.10593667623599359)) + (in3[5] *
    0.10537885436940329 - in3[6] * 0.10793139553633729)) + (in3[7] *
    -0.1033841350690595 + proc_control_node_B.t8_l * 6.3908140435873166)) +
    ((proc_control_node_B.t9_p * 0.087876754449678615 +
      proc_control_node_B.t10_i * 0.087876754449678615) -
     proc_control_node_B.t11_b3 * 6.3908140435873166)) +
    ((proc_control_node_B.t12_gn * 0.36480930847148191 +
      proc_control_node_B.t13_oq * 0.36480930847148191) + in3[0] *
     1.4142135623730951 * 0.013457654526727991)) + ((in3[1] * 1.4142135623730951
    * 0.013869054980635681 + in3[2] * 1.4142135623730951 * 0.013457654526727991)
    + in3[3] * 1.4142135623730951 * 0.01386868232130781)) +
                       (((proc_control_node_B.t15_b * 0.311032764122789 +
    proc_control_node_B.t20_e * 0.0080268590155159435) -
    proc_control_node_B.t16_l * 0.0001026911824132076) +
                        proc_control_node_B.t17_h * 0.00039756137245743289)) +
                      ((proc_control_node_B.t18_l * 0.58374455968341665 +
                        proc_control_node_B.t19_c * 1.606290206365557E-6) -
                       proc_control_node_B.t21_c * 0.58374455968341665)) +
                     (((proc_control_node_B.t22_a * 0.0031834266548094372 +
                        proc_control_node_B.t23_i * 0.00039756137245743289) -
                       proc_control_node_B.out1_tmp_c3 * 0.010033314971702871) -
                      proc_control_node_B.out1_tmp_m * 1.606290206365557E-6)) +
                    (((proc_control_node_B.t86 * 0.0080268590155159435 +
                       proc_control_node_B.out1_tmp_nn * 1.606290206365557E-6) -
                      proc_control_node_B.out1_tmp_ch * 0.01232440254618042) -
                     proc_control_node_B.out1_tmp_na * 0.0001026911824132076)) +
                   ((proc_control_node_B.out1_tmp_h * -0.010033314971702871 -
                     proc_control_node_B.t84 * 0.58374455968341665) -
                    proc_control_node_B.t87 * 0.0080268590155159435)) +
                  ((proc_control_node_B.out1_tmp_iu * 0.002014800998947134 +
                    proc_control_node_B.t45_l * 0.47151599980996189) +
                   proc_control_node_B.out1_tmp_ef * 0.19685363974481029)) +
                 ((proc_control_node_B.t56_ix * 34.290486373399979 +
                   proc_control_node_B.t55_i * 0.003900077063807416) +
                  proc_control_node_B.t65_az * 0.010033314971702871)) +
                ((proc_control_node_B.t71 * -0.2488326294809943 +
                  proc_control_node_B.t81 * 1.606290206365557E-6) -
                 proc_control_node_B.t68_o * 0.58374455968341665)) +
               (((proc_control_node_B.t85 * 0.0001026911824132076 +
                  proc_control_node_B.t37_l * 18.096081350185919) +
                 proc_control_node_B.t63_e * 1.606290206365557E-6) +
                proc_control_node_B.t80 * 0.0080268590155159435)) +
              ((proc_control_node_B.out1_tmp_pc * -0.00039756137245743289 -
                proc_control_node_B.t33_e1 * 4.9794996397332282E-5) -
               proc_control_node_B.t39_c * 0.58374455968341665)) +
    (proc_control_node_B.t67_d * 0.0080268590155159435 - 0.182404654235741);
  out1[12] = (((((((((((((((((((((((in2[0] * 0.0010125044874363649 - in2[1] *
    0.00042780737967584029) + in2[2] * 5.2828771531483014E-6) - in2[3] *
    0.0039859244840414) + (in2[4] * -1.606290206365557E-6 + in2[5] *
    0.53015902215788635)) + in3[0] * -0.1731941163298826) + in3[1] *
    -1.4397960202092559E-21) + in3[2] * 0.175443390567933) + (in3[3] *
    0.17469363248858291 + in3[4] * 0.00062021813460420567)) + (in3[5] *
    -0.0006207996116589 - in3[6] * 0.00064672437426625525)) + (in3[7] *
    0.00064730585132094889 - proc_control_node_B.t8_l * 0.64492422651466708)) +
    ((proc_control_node_B.t9_p * 0.3660910622711756 + proc_control_node_B.t10_i *
      0.3660910622711756) + proc_control_node_B.t11_b3 * 0.64492422651466708)) +
    ((proc_control_node_B.t12_gn * 0.0048476610015380046 +
      proc_control_node_B.t13_oq * 0.0048476610015380046) + in3[0] *
     1.4142135623730951 * 0.00059255494878017434)) + ((in3[1] *
    1.4142135623730951 * -0.1225770464045467 + in3[2] * 1.4142135623730951 *
    0.00059255494878017434) + in3[3] * 1.4142135623730951 *
    0.00041984673608298361)) + (((proc_control_node_B.t15_b *
    -0.031387639110527318 + proc_control_node_B.t20_e * 0.0039859244840414) -
    proc_control_node_B.t16_l * 0.00042780737967584029) +
    proc_control_node_B.t17_h * 5.2828771531483014E-6)) +
                      (((proc_control_node_B.t18_l * -1.606290206365557E-6 -
    proc_control_node_B.t19_c * 0.53015902215788635) + proc_control_node_B.t21_c
                        * 1.606290206365557E-6) + proc_control_node_B.t22_a *
                       0.013262028769951049)) + (((proc_control_node_B.t23_i *
    5.2828771531483014E-6 + proc_control_node_B.out1_tmp_c3 *
    0.0010125044874363649) + proc_control_node_B.out1_tmp_m *
    0.53015902215788635) + proc_control_node_B.t86 * 0.0039859244840414)) +
                    ((proc_control_node_B.out1_tmp_nn * -0.53015902215788635 -
                      proc_control_node_B.out1_tmp_ch * 0.00016376919174759729)
                     - proc_control_node_B.out1_tmp_na * 0.00042780737967584029))
                   + (((proc_control_node_B.out1_tmp_h * 0.0010125044874363649 +
                        proc_control_node_B.t84 * 1.606290206365557E-6) -
                       proc_control_node_B.t87 * 0.0039859244840414) +
                      proc_control_node_B.out1_tmp_iu * 0.008393580789239987)) +
                  ((proc_control_node_B.t45_l * 0.23414229210041551 -
                    proc_control_node_B.out1_tmp_ef * 0.01986533804350149) -
                   proc_control_node_B.t56_ix * 9.4357149063583354E-5)) +
                 ((proc_control_node_B.t55_i * 5.1825024872384838E-5 -
                   proc_control_node_B.t65_az * 0.0010125044874363649) -
                  proc_control_node_B.t71 * 0.1235636590052834)) +
                (((proc_control_node_B.t81 * -0.53015902215788635 +
                   proc_control_node_B.t68_o * 1.606290206365557E-6) +
                  proc_control_node_B.t85 * 0.00042780737967584029) -
                 proc_control_node_B.t37_l * 4.9794996397332282E-5)) +
               ((proc_control_node_B.t63_e * -0.53015902215788635 +
                 proc_control_node_B.t80 * 0.0039859244840414) -
                proc_control_node_B.out1_tmp_pc * 5.2828771531483014E-6)) +
              ((proc_control_node_B.t33_e1 * 16.434929686894481 +
                proc_control_node_B.t39_c * 1.606290206365557E-6) +
               proc_control_node_B.t67_d * 0.0039859244840414)) +
    -0.0024238305007690032;
}

// Function for MATLAB Function: '<S285>/Predict'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_cf(int32_T n, const
  real_T x[338], int32_T ix0)
{
  real_T absxk;
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_jk = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        absxk = fabs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_jk) {
          t = proc_control_node_B.scale_jk / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_jk = absxk;
        } else {
          t = absxk / proc_control_node_B.scale_jk;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_jk * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S285>/Predict'
void proc_control_nodeModelClass::proc_control_node_xgemv_l(int32_T m, int32_T n,
  const real_T A[338], int32_T ia0, const real_T x[338], int32_T ix0, real_T y
  [13])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 26 + ia0;
    for (iac = ia0; iac <= b; iac += 26) {
      ix = ix0;
      proc_control_node_B.c_n = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_n += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_n;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S285>/Predict'
void proc_control_nodeModelClass::proc_control_node_xgerc_e(int32_T m, int32_T n,
  real_T alpha1, int32_T ix0, const real_T y[13], real_T A[338], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jA;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    jA = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_av = y[jy] * alpha1;
        ix = ix0;
        b = m + jA;
        for (ijA = jA; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_av;
          ix++;
        }
      }

      jy++;
      jA += 26;
    }
  }
}

// Function for MATLAB Function: '<S285>/Predict'
void proc_control_nodeModelClass::proc_control_node_xzlarf_jt(int32_T m, int32_T
  n, int32_T iv0, real_T tau, real_T C[338], int32_T ic0, real_T work[13])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_pd = m;
    proc_control_node_B.lastc_a = iv0 + m;
    while ((proc_control_node_B.lastv_pd > 0) && (C[proc_control_node_B.lastc_a
            - 2] == 0.0)) {
      proc_control_node_B.lastv_pd--;
      proc_control_node_B.lastc_a--;
    }

    proc_control_node_B.lastc_a = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_a > 0)) {
      proc_control_node_B.coltop_m = (proc_control_node_B.lastc_a - 1) * 26 +
        ic0;
      proc_control_node_B.ia_n = proc_control_node_B.coltop_m;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_n <= (proc_control_node_B.coltop_m +
             proc_control_node_B.lastv_pd) - 1) {
          if (C[proc_control_node_B.ia_n - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_n++;
          }
        } else {
          proc_control_node_B.lastc_a--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_pd = 0;
    proc_control_node_B.lastc_a = 0;
  }

  if (proc_control_node_B.lastv_pd > 0) {
    proc_control_node_xgemv_l(proc_control_node_B.lastv_pd,
      proc_control_node_B.lastc_a, C, ic0, C, iv0, work);
    proc_control_node_xgerc_e(proc_control_node_B.lastv_pd,
      proc_control_node_B.lastc_a, -tau, iv0, work, C, ic0);
  }
}

// Function for MATLAB Function: '<S285>/Predict'
void proc_control_nodeModelClass::proc_control_node_qrf_j(real_T A[338], int32_T
  ia0, int32_T m, int32_T n, int32_T nfxd, real_T tau[13])
{
  memset(&proc_control_node_B.work_f0[0], 0, 13U * sizeof(real_T));
  proc_control_node_B.i_cf = 0;
  while (proc_control_node_B.i_cf <= nfxd - 1) {
    proc_control_node_B.ii_c = ((proc_control_node_B.i_cf * 26 + ia0) +
      proc_control_node_B.i_cf) - 1;
    proc_control_node_B.mmi_tmp_d = m - proc_control_node_B.i_cf;
    if (proc_control_node_B.i_cf + 1 < m) {
      proc_control_node_B.b_atmp_e = A[proc_control_node_B.ii_c];
      tau[proc_control_node_B.i_cf] = 0.0;
      if (proc_control_node_B.mmi_tmp_d > 0) {
        proc_control_node_B.beta1_b = proc_control_node_xnrm2_cf
          (proc_control_node_B.mmi_tmp_d - 1, A, proc_control_node_B.ii_c + 2);
        if (proc_control_node_B.beta1_b != 0.0) {
          proc_control_node_B.beta1_b = proc_control_node_rt_hypotd_snf
            (A[proc_control_node_B.ii_c], proc_control_node_B.beta1_b);
          if (A[proc_control_node_B.ii_c] >= 0.0) {
            proc_control_node_B.beta1_b = -proc_control_node_B.beta1_b;
          }

          if (fabs(proc_control_node_B.beta1_b) < 1.0020841800044864E-292) {
            proc_control_node_B.knt_m = -1;
            proc_control_node_B.mmip1_dt = proc_control_node_B.ii_c +
              proc_control_node_B.mmi_tmp_d;
            do {
              proc_control_node_B.knt_m++;
              proc_control_node_B.b_k_j = proc_control_node_B.ii_c + 1;
              while (proc_control_node_B.b_k_j + 1 <=
                     proc_control_node_B.mmip1_dt) {
                A[proc_control_node_B.b_k_j] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_j++;
              }

              proc_control_node_B.beta1_b *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp_e *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1_b) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1_b = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp_e, proc_control_node_xnrm2_cf
               (proc_control_node_B.mmi_tmp_d - 1, A, proc_control_node_B.ii_c +
                2));
            if (proc_control_node_B.b_atmp_e >= 0.0) {
              proc_control_node_B.beta1_b = -proc_control_node_B.beta1_b;
            }

            tau[proc_control_node_B.i_cf] = (proc_control_node_B.beta1_b -
              proc_control_node_B.b_atmp_e) / proc_control_node_B.beta1_b;
            proc_control_node_B.b_atmp_e = 1.0 / (proc_control_node_B.b_atmp_e -
              proc_control_node_B.beta1_b);
            proc_control_node_B.b_k_j = proc_control_node_B.ii_c + 1;
            while (proc_control_node_B.b_k_j + 1 <= proc_control_node_B.mmip1_dt)
            {
              A[proc_control_node_B.b_k_j] *= proc_control_node_B.b_atmp_e;
              proc_control_node_B.b_k_j++;
            }

            proc_control_node_B.mmip1_dt = 0;
            while (proc_control_node_B.mmip1_dt <= proc_control_node_B.knt_m) {
              proc_control_node_B.beta1_b *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1_dt++;
            }

            proc_control_node_B.b_atmp_e = proc_control_node_B.beta1_b;
          } else {
            tau[proc_control_node_B.i_cf] = (proc_control_node_B.beta1_b -
              A[proc_control_node_B.ii_c]) / proc_control_node_B.beta1_b;
            proc_control_node_B.b_atmp_e = 1.0 / (A[proc_control_node_B.ii_c] -
              proc_control_node_B.beta1_b);
            proc_control_node_B.knt_m = proc_control_node_B.ii_c +
              proc_control_node_B.mmi_tmp_d;
            proc_control_node_B.mmip1_dt = proc_control_node_B.ii_c + 1;
            while (proc_control_node_B.mmip1_dt + 1 <= proc_control_node_B.knt_m)
            {
              A[proc_control_node_B.mmip1_dt] *= proc_control_node_B.b_atmp_e;
              proc_control_node_B.mmip1_dt++;
            }

            proc_control_node_B.b_atmp_e = proc_control_node_B.beta1_b;
          }
        }
      }

      A[proc_control_node_B.ii_c] = proc_control_node_B.b_atmp_e;
    } else {
      tau[proc_control_node_B.i_cf] = 0.0;
    }

    if (proc_control_node_B.i_cf + 1 < n) {
      proc_control_node_B.b_atmp_e = A[proc_control_node_B.ii_c];
      A[proc_control_node_B.ii_c] = 1.0;
      proc_control_node_xzlarf_jt(proc_control_node_B.mmi_tmp_d, (n -
        proc_control_node_B.i_cf) - 1, proc_control_node_B.ii_c + 1,
        tau[proc_control_node_B.i_cf], A, proc_control_node_B.ii_c + 27,
        proc_control_node_B.work_f0);
      A[proc_control_node_B.ii_c] = proc_control_node_B.b_atmp_e;
    }

    proc_control_node_B.i_cf++;
  }
}

// Function for MATLAB Function: '<S285>/Predict'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_cx(real_T A[338],
  real_T tau[13])
{
  memset(&tau[0], 0, 13U * sizeof(real_T));
  proc_control_node_qrf_j(A, 1, 26, 13, 13, tau);
}

// Function for MATLAB Function: '<S285>/Predict'
void proc_control_nodeModelClass::proc_control_node_xorgqr_e(int32_T m, int32_T
  n, int32_T k, real_T A[338], int32_T ia0, const real_T tau[13], int32_T itau0)
{
  if (n >= 1) {
    proc_control_node_B.itau_h = k;
    while (proc_control_node_B.itau_h <= n - 1) {
      proc_control_node_B.i_kk = (proc_control_node_B.itau_h * 26 + ia0) - 1;
      proc_control_node_B.iaii_br = 0;
      while (proc_control_node_B.iaii_br <= m - 1) {
        A[proc_control_node_B.i_kk + proc_control_node_B.iaii_br] = 0.0;
        proc_control_node_B.iaii_br++;
      }

      A[proc_control_node_B.i_kk + proc_control_node_B.itau_h] = 1.0;
      proc_control_node_B.itau_h++;
    }

    proc_control_node_B.itau_h = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_nn[0], 0, 13U * sizeof(real_T));
    proc_control_node_B.i_kk = k;
    while (proc_control_node_B.i_kk >= 1) {
      proc_control_node_B.iaii_br = (((proc_control_node_B.i_kk - 1) * 26 + ia0)
        + proc_control_node_B.i_kk) - 1;
      if (proc_control_node_B.i_kk < n) {
        A[proc_control_node_B.iaii_br - 1] = 1.0;
        proc_control_node_xzlarf_jt((m - proc_control_node_B.i_kk) + 1, n -
          proc_control_node_B.i_kk, proc_control_node_B.iaii_br,
          tau[proc_control_node_B.itau_h], A, proc_control_node_B.iaii_br + 26,
          proc_control_node_B.work_nn);
      }

      if (proc_control_node_B.i_kk < m) {
        proc_control_node_B.b_dm = (proc_control_node_B.iaii_br + m) -
          proc_control_node_B.i_kk;
        proc_control_node_B.b_k_oh = proc_control_node_B.iaii_br;
        while (proc_control_node_B.b_k_oh + 1 <= proc_control_node_B.b_dm) {
          A[proc_control_node_B.b_k_oh] *= -tau[proc_control_node_B.itau_h];
          proc_control_node_B.b_k_oh++;
        }
      }

      A[proc_control_node_B.iaii_br - 1] = 1.0 - tau[proc_control_node_B.itau_h];
      proc_control_node_B.b_dm = 0;
      while (proc_control_node_B.b_dm <= proc_control_node_B.i_kk - 2) {
        A[(proc_control_node_B.iaii_br - proc_control_node_B.b_dm) - 2] = 0.0;
        proc_control_node_B.b_dm++;
      }

      proc_control_node_B.itau_h--;
      proc_control_node_B.i_kk--;
    }
  }
}

// Function for MATLAB Function: '<S285>/Predict'
void proc_control_nodeModelClass::proc_control_node_qr_i(const real_T A[338],
  real_T Q[338], real_T R[169])
{
  memcpy(&proc_control_node_B.b_A_c[0], &A[0], 338U * sizeof(real_T));
  proc_control_node_xgeqrf_cx(proc_control_node_B.b_A_c,
    proc_control_node_B.tau_p);
  for (proc_control_node_B.j_fb = 0; proc_control_node_B.j_fb < 13;
       proc_control_node_B.j_fb++) {
    proc_control_node_B.i_k4 = 0;
    while (proc_control_node_B.i_k4 <= proc_control_node_B.j_fb) {
      R[proc_control_node_B.i_k4 + 13 * proc_control_node_B.j_fb] =
        proc_control_node_B.b_A_c[26 * proc_control_node_B.j_fb +
        proc_control_node_B.i_k4];
      proc_control_node_B.i_k4++;
    }

    proc_control_node_B.i_k4 = proc_control_node_B.j_fb + 1;
    while (proc_control_node_B.i_k4 + 1 < 14) {
      R[proc_control_node_B.i_k4 + 13 * proc_control_node_B.j_fb] = 0.0;
      proc_control_node_B.i_k4++;
    }
  }

  proc_control_node_xorgqr_e(26, 13, 13, proc_control_node_B.b_A_c, 1,
    proc_control_node_B.tau_p, 1);
  proc_control_node_B.i_k4 = 0;
  for (proc_control_node_B.j_fb = 0; proc_control_node_B.j_fb < 13;
       proc_control_node_B.j_fb++) {
    memcpy(&Q[proc_control_node_B.i_k4],
           &proc_control_node_B.b_A_c[proc_control_node_B.i_k4], 26U * sizeof
           (real_T));
    proc_control_node_B.i_k4 += 26;
  }
}

// Function for MATLAB Function: '<S285>/Predict'
void proc_control_nodeModelClass::proc_control_node_qrFactor_d(const real_T A
  [169], real_T S[169], const real_T Ns[169])
{
  for (proc_control_node_B.j_n4 = 0; proc_control_node_B.j_n4 < 13;
       proc_control_node_B.j_n4++) {
    proc_control_node_B.coffset_g = proc_control_node_B.j_n4 * 13;
    for (proc_control_node_B.i_c3 = 0; proc_control_node_B.i_c3 < 13;
         proc_control_node_B.i_c3++) {
      proc_control_node_B.aoffset_g = proc_control_node_B.i_c3 * 13;
      proc_control_node_B.s_nl = 0.0;
      for (proc_control_node_B.k_eo = 0; proc_control_node_B.k_eo < 13;
           proc_control_node_B.k_eo++) {
        proc_control_node_B.s_nl += A[proc_control_node_B.k_eo * 13 +
          proc_control_node_B.j_n4] * S[proc_control_node_B.aoffset_g +
          proc_control_node_B.k_eo];
      }

      proc_control_node_B.y_m4[proc_control_node_B.coffset_g +
        proc_control_node_B.i_c3] = proc_control_node_B.s_nl;
      proc_control_node_B.k_eo = proc_control_node_B.i_c3 + 26 *
        proc_control_node_B.j_n4;
      proc_control_node_B.y_gx[proc_control_node_B.k_eo] =
        proc_control_node_B.y_m4[13 * proc_control_node_B.j_n4 +
        proc_control_node_B.i_c3];
      proc_control_node_B.y_gx[proc_control_node_B.k_eo + 13] = Ns[13 *
        proc_control_node_B.i_c3 + proc_control_node_B.j_n4];
    }
  }

  proc_control_node_qr_i(proc_control_node_B.y_gx, proc_control_node_B.a__1_f,
    proc_control_node_B.y_m4);
  proc_control_node_B.coffset_g = 0;
  for (proc_control_node_B.j_n4 = 0; proc_control_node_B.j_n4 < 13;
       proc_control_node_B.j_n4++) {
    proc_control_node_B.k_eo = 0;
    for (proc_control_node_B.i_c3 = 0; proc_control_node_B.i_c3 < 13;
         proc_control_node_B.i_c3++) {
      S[proc_control_node_B.i_c3 + proc_control_node_B.coffset_g] =
        proc_control_node_B.y_m4[proc_control_node_B.k_eo +
        proc_control_node_B.j_n4];
      proc_control_node_B.k_eo += 13;
    }

    proc_control_node_B.coffset_g += 13;
  }
}

real_T rt_atan2d_snf(real_T u0, real_T u1)
{
  real_T y;
  int32_T u0_0;
  int32_T u1_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = (rtNaN);
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
    if (u0 > 0.0) {
      u0_0 = 1;
    } else {
      u0_0 = -1;
    }

    if (u1 > 0.0) {
      u1_0 = 1;
    } else {
      u1_0 = -1;
    }

    y = atan2(static_cast<real_T>(u0_0), static_cast<real_T>(u1_0));
  } else if (u1 == 0.0) {
    if (u0 > 0.0) {
      y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
      y = -(RT_PI / 2.0);
    } else {
      y = 0.0;
    }
  } else {
    y = atan2(u0, u1);
  }

  return y;
}

real_T rt_roundd_snf(real_T u)
{
  real_T y;
  if (fabs(u) < 4.503599627370496E+15) {
    if (u >= 0.5) {
      y = floor(u + 0.5);
    } else if (u > -0.5) {
      y = u * 0.0;
    } else {
      y = ceil(u - 0.5);
    }
  } else {
    y = u;
  }

  return y;
}

void proc_control_nodeModelClass::proc_control_node_ppval(const real_T
  pp_breaks[4], const real_T pp_coefs[36], const real_T x[2], real_T v[6])
{
  int32_T b_ix;
  int32_T high_i;
  int32_T low_i;
  int32_T low_ip1;
  int32_T mid_i;
  for (b_ix = 0; b_ix < 2; b_ix++) {
    proc_control_node_B.iv0_n = b_ix * 3 - 1;
    if (rtIsNaN(x[b_ix])) {
      v[proc_control_node_B.iv0_n + 1] = x[b_ix];
      v[proc_control_node_B.iv0_n + 2] = x[b_ix];
      v[proc_control_node_B.iv0_n + 3] = x[b_ix];
    } else {
      low_i = 0;
      low_ip1 = 1;
      high_i = 4;
      while (high_i > low_ip1 + 1) {
        mid_i = ((low_i + high_i) + 1) >> 1;
        if (x[b_ix] >= pp_breaks[mid_i - 1]) {
          low_i = mid_i - 1;
          low_ip1 = mid_i;
        } else {
          high_i = mid_i;
        }
      }

      low_ip1 = low_i * 3;
      proc_control_node_B.xloc_o = x[b_ix] - pp_breaks[low_i];
      v[proc_control_node_B.iv0_n + 1] = pp_coefs[low_ip1];
      v[proc_control_node_B.iv0_n + 2] = pp_coefs[low_ip1 + 1];
      v[proc_control_node_B.iv0_n + 3] = pp_coefs[low_ip1 + 2];
      for (low_i = 0; low_i < 3; low_i++) {
        high_i = ((low_i + 1) * 9 + low_ip1) - 1;
        v[proc_control_node_B.iv0_n + 1] = v[proc_control_node_B.iv0_n + 1] *
          proc_control_node_B.xloc_o + pp_coefs[high_i + 1];
        v[proc_control_node_B.iv0_n + 2] = v[proc_control_node_B.iv0_n + 2] *
          proc_control_node_B.xloc_o + pp_coefs[high_i + 2];
        v[proc_control_node_B.iv0_n + 3] = v[proc_control_node_B.iv0_n + 3] *
          proc_control_node_B.xloc_o + pp_coefs[high_i + 3];
      }
    }
  }
}

void proc_control_nodeModelClass::proc_control_node_cubicpolytraj(const real_T
  wayPoints[6], const real_T timePoints[2], const real_T t[2], const real_T
  varargin_2[6], real_T q[6], real_T qd[6], real_T qdd[6], real_T pp_breaks[4],
  real_T pp_coefs[36])
{
  boolean_T x[2];
  boolean_T exitg1;
  memset(&proc_control_node_B.coefMat[0], 0, 12U * sizeof(real_T));
  proc_control_node_B.finalTime = timePoints[1] - timePoints[0];
  for (proc_control_node_B.idx_o = 0; proc_control_node_B.idx_o < 3;
       proc_control_node_B.idx_o++) {
    proc_control_node_B.b_coeffVec[0] = wayPoints[proc_control_node_B.idx_o];
    proc_control_node_B.b_coeffVec[1] = varargin_2[proc_control_node_B.idx_o];
    proc_control_node_B.wayPoints_idx_0 = wayPoints[proc_control_node_B.idx_o +
      3] - (proc_control_node_B.finalTime * proc_control_node_B.b_coeffVec[1] +
            proc_control_node_B.b_coeffVec[0]);
    proc_control_node_B.wayPoints_idx_1 = varargin_2[proc_control_node_B.idx_o +
      3] - (0.0 * proc_control_node_B.b_coeffVec[0] +
            proc_control_node_B.b_coeffVec[1]);
    proc_control_node_B.b_coeffVec[3] = proc_control_node_B.b_coeffVec[0];
    proc_control_node_B.coefMat_tmp = proc_control_node_B.finalTime *
      proc_control_node_B.finalTime;
    proc_control_node_B.coefMat[proc_control_node_B.idx_o] = 1.0 /
      proc_control_node_B.coefMat_tmp * proc_control_node_B.wayPoints_idx_1 +
      -2.0 / rt_powd_snf(proc_control_node_B.finalTime, 3.0) *
      proc_control_node_B.wayPoints_idx_0;
    proc_control_node_B.coefMat[proc_control_node_B.idx_o + 3] = 3.0 /
      proc_control_node_B.coefMat_tmp * proc_control_node_B.wayPoints_idx_0 +
      -1.0 / proc_control_node_B.finalTime * proc_control_node_B.wayPoints_idx_1;
    proc_control_node_B.coefMat[proc_control_node_B.idx_o + 6] =
      proc_control_node_B.b_coeffVec[1];
    proc_control_node_B.coefMat[proc_control_node_B.idx_o + 9] =
      proc_control_node_B.b_coeffVec[3];
  }

  memset(&proc_control_node_B.coeffMat_m[0], 0, 12U * sizeof(real_T));
  for (proc_control_node_B.c_j1 = 0; proc_control_node_B.c_j1 < 3;
       proc_control_node_B.c_j1++) {
    proc_control_node_B.coeffMat_m[proc_control_node_B.c_j1 + 9] = 0.0;
    proc_control_node_B.coeffMat_m[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefMat[proc_control_node_B.c_j1] * 0.0;
    proc_control_node_B.coeffMat_m[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefMat[proc_control_node_B.c_j1 + 3] * 0.0;
    proc_control_node_B.coeffMat_m[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefMat[proc_control_node_B.c_j1 + 6] * 0.0;
    proc_control_node_B.coeffMat_m[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefMat[proc_control_node_B.c_j1 + 9];
  }

  memset(&proc_control_node_B.coefsWithFlatStart[0], 0, 24U * sizeof(real_T));
  proc_control_node_B.c_j1 = 0;
  proc_control_node_B.idx_o = 0;
  for (proc_control_node_B.idx_os = 0; proc_control_node_B.idx_os < 4;
       proc_control_node_B.idx_os++) {
    proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1] =
      proc_control_node_B.coeffMat_m[proc_control_node_B.idx_o];
    proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 3] =
      proc_control_node_B.coefMat[proc_control_node_B.idx_o];
    proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 1] =
      proc_control_node_B.coeffMat_m[proc_control_node_B.idx_o + 1];
    proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 4] =
      proc_control_node_B.coefMat[proc_control_node_B.idx_o + 1];
    proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 2] =
      proc_control_node_B.coeffMat_m[proc_control_node_B.idx_o + 2];
    proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 5] =
      proc_control_node_B.coefMat[proc_control_node_B.idx_o + 2];
    proc_control_node_B.c_j1 += 6;
    proc_control_node_B.idx_o += 3;
  }

  proc_control_node_B.b_coeffVec[0] = rt_powd_snf(proc_control_node_B.finalTime,
    3.0);
  proc_control_node_B.b_coeffVec[1] = rt_powd_snf(proc_control_node_B.finalTime,
    2.0);
  proc_control_node_B.b_coeffVec[2] = rt_powd_snf(proc_control_node_B.finalTime,
    1.0);
  proc_control_node_B.b_coeffVec[3] = rt_powd_snf(proc_control_node_B.finalTime,
    0.0);
  memset(&proc_control_node_B.coeffMat_m[0], 0, 12U * sizeof(real_T));
  for (proc_control_node_B.c_j1 = 0; proc_control_node_B.c_j1 < 3;
       proc_control_node_B.c_j1++) {
    proc_control_node_B.coeffMat_m[proc_control_node_B.c_j1 + 9] = 0.0;
    proc_control_node_B.coeffMat_m[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 3] *
      proc_control_node_B.b_coeffVec[0];
    proc_control_node_B.coeffMat_m[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 9] *
      proc_control_node_B.b_coeffVec[1];
    proc_control_node_B.coeffMat_m[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 15] *
      proc_control_node_B.b_coeffVec[2];
    proc_control_node_B.coeffMat_m[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 21] *
      proc_control_node_B.b_coeffVec[3];
  }

  memset(&pp_coefs[0], 0, 36U * sizeof(real_T));
  proc_control_node_B.c_j1 = 0;
  proc_control_node_B.idx_o = 0;
  proc_control_node_B.idx_os = 0;
  for (proc_control_node_B.dCoeffs_tmp = 0; proc_control_node_B.dCoeffs_tmp < 4;
       proc_control_node_B.dCoeffs_tmp++) {
    for (proc_control_node_B.i43 = 0; proc_control_node_B.i43 < 6;
         proc_control_node_B.i43++) {
      pp_coefs[proc_control_node_B.i43 + proc_control_node_B.c_j1] =
        proc_control_node_B.coefsWithFlatStart[proc_control_node_B.i43 +
        proc_control_node_B.idx_os];
    }

    pp_coefs[proc_control_node_B.c_j1 + 6] =
      proc_control_node_B.coeffMat_m[proc_control_node_B.idx_o];
    pp_coefs[proc_control_node_B.c_j1 + 7] =
      proc_control_node_B.coeffMat_m[proc_control_node_B.idx_o + 1];
    pp_coefs[proc_control_node_B.c_j1 + 8] =
      proc_control_node_B.coeffMat_m[proc_control_node_B.idx_o + 2];
    proc_control_node_B.c_j1 += 9;
    proc_control_node_B.idx_o += 3;
    proc_control_node_B.idx_os += 6;
  }

  pp_breaks[0] = timePoints[0] - 1.0;
  pp_breaks[1] = timePoints[0];
  pp_breaks[2] = timePoints[1];
  pp_breaks[3] = timePoints[1] + 1.0;
  proc_control_node_ppval(pp_breaks, pp_coefs, t, q);
  proc_control_node_B.b_coeffVec[0] = timePoints[0] - 1.0;
  proc_control_node_B.b_coeffVec[1] = timePoints[0];
  proc_control_node_B.b_coeffVec[3] = timePoints[1] + 1.0;
  proc_control_node_B.finalTime = 0.01;
  x[0] = (t[0] > timePoints[1]);
  x[1] = (t[1] > timePoints[1]);
  proc_control_node_B.idx_o = 0;
  proc_control_node_B.idx_os = 1;
  proc_control_node_B.c_j1 = 1;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.c_j1 - 1 < 2)) {
    if (x[proc_control_node_B.c_j1 - 1]) {
      proc_control_node_B.idx_o = 1;
      proc_control_node_B.ii_data_idx_0 = proc_control_node_B.c_j1;
      exitg1 = true;
    } else {
      proc_control_node_B.c_j1++;
    }
  }

  if (proc_control_node_B.idx_o == 0) {
    proc_control_node_B.idx_os = 0;
  }

  if (0 <= proc_control_node_B.idx_os - 1) {
    proc_control_node_B.tGreaterThanTfIdx_data_idx_0 =
      proc_control_node_B.ii_data_idx_0;
  }

  if (proc_control_node_B.idx_os != 0) {
    proc_control_node_B.wayPoints_idx_0 =
      (t[proc_control_node_B.tGreaterThanTfIdx_data_idx_0 - 1] - timePoints[1]) /
      2.0;
    if (proc_control_node_B.wayPoints_idx_0 < 0.01) {
      proc_control_node_B.finalTime = proc_control_node_B.wayPoints_idx_0;
    }
  }

  proc_control_node_B.b_coeffVec[2] = timePoints[1] +
    proc_control_node_B.finalTime;
  memset(&proc_control_node_B.dCoeffs[0], 0, 36U * sizeof(real_T));
  proc_control_node_B.idx_os = 0;
  for (proc_control_node_B.idx_o = 0; proc_control_node_B.idx_o < 3;
       proc_control_node_B.idx_o++) {
    for (proc_control_node_B.c_j1 = 0; proc_control_node_B.c_j1 < 9;
         proc_control_node_B.c_j1++) {
      proc_control_node_B.dCoeffs_tmp = proc_control_node_B.c_j1 +
        proc_control_node_B.idx_os;
      proc_control_node_B.dCoeffs[proc_control_node_B.dCoeffs_tmp + 9] =
        pp_coefs[proc_control_node_B.dCoeffs_tmp] * static_cast<real_T>(3 -
        proc_control_node_B.idx_o);
    }

    proc_control_node_B.idx_os += 9;
  }

  proc_control_node_ppval(proc_control_node_B.b_coeffVec,
    proc_control_node_B.dCoeffs, t, qd);
  memset(&proc_control_node_B.ddCoeffs[0], 0, 36U * sizeof(real_T));
  proc_control_node_B.idx_os = 0;
  for (proc_control_node_B.idx_o = 0; proc_control_node_B.idx_o < 3;
       proc_control_node_B.idx_o++) {
    for (proc_control_node_B.c_j1 = 0; proc_control_node_B.c_j1 < 9;
         proc_control_node_B.c_j1++) {
      proc_control_node_B.dCoeffs_tmp = proc_control_node_B.c_j1 +
        proc_control_node_B.idx_os;
      proc_control_node_B.ddCoeffs[proc_control_node_B.dCoeffs_tmp + 9] =
        proc_control_node_B.dCoeffs[proc_control_node_B.dCoeffs_tmp] *
        static_cast<real_T>(3 - proc_control_node_B.idx_o);
    }

    proc_control_node_B.idx_os += 9;
  }

  proc_control_node_ppval(proc_control_node_B.b_coeffVec,
    proc_control_node_B.ddCoeffs, t, qdd);
}

void proc_control_nodeModelClass::proc_control_node_ppval_b(const real_T
  pp_breaks[4], const real_T pp_coefs[36], real_T x, real_T v[3])
{
  real_T xloc;
  int32_T high_i;
  int32_T ic0;
  int32_T low_i;
  int32_T low_ip1;
  if (rtIsNaN(x)) {
    v[0] = x;
    v[1] = x;
    v[2] = x;
  } else {
    low_i = 0;
    low_ip1 = 1;
    high_i = 4;
    while (high_i > low_ip1 + 1) {
      ic0 = ((low_i + high_i) + 1) >> 1;
      if (x >= pp_breaks[ic0 - 1]) {
        low_i = ic0 - 1;
        low_ip1 = ic0;
      } else {
        high_i = ic0;
      }
    }

    low_ip1 = low_i * 3;
    xloc = x - pp_breaks[low_i];
    v[0] = pp_coefs[low_ip1];
    v[1] = pp_coefs[low_ip1 + 1];
    v[2] = pp_coefs[low_ip1 + 2];
    for (high_i = 0; high_i < 3; high_i++) {
      ic0 = ((high_i + 1) * 9 + low_ip1) - 1;
      v[0] = xloc * v[0] + pp_coefs[ic0 + 1];
      v[1] = xloc * v[1] + pp_coefs[ic0 + 2];
      v[2] = xloc * v[2] + pp_coefs[ic0 + 3];
    }
  }
}

boolean_T proc_control_nodeModelClass::proc_checkPolyForMultipleBreaks(const
  real_T breakMat[12])
{
  int32_T b_i;
  int32_T b_k;
  boolean_T exitg1;
  boolean_T hasMultipleBreaks;
  boolean_T y;
  hasMultipleBreaks = false;
  for (b_i = 0; b_i < 2; b_i++) {
    proc_control_node_B.y_mi[0] = fabs(breakMat[b_i] - breakMat[b_i + 1]);
    proc_control_node_B.y_mi[1] = fabs(breakMat[b_i + 3] - breakMat[b_i + 4]);
    proc_control_node_B.y_mi[2] = fabs(breakMat[b_i + 6] - breakMat[b_i + 7]);
    proc_control_node_B.y_mi[3] = fabs(breakMat[b_i + 9] - breakMat[b_i + 10]);
    y = false;
    b_k = 0;
    exitg1 = false;
    while ((!exitg1) && (b_k < 4)) {
      if (!(proc_control_node_B.y_mi[b_k] > 2.2204460492503131E-16)) {
        b_k++;
      } else {
        y = true;
        exitg1 = true;
      }
    }

    if (y || hasMultipleBreaks) {
      hasMultipleBreaks = true;
    }
  }

  return hasMultipleBreaks;
}

real_T proc_control_nodeModelClass::proc_control_node_maximum_b4(const real_T x
  [3])
{
  real_T ex;
  int32_T b_idx;
  int32_T k;
  boolean_T exitg1;
  if (!rtIsNaN(x[0])) {
    b_idx = 1;
  } else {
    b_idx = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 4)) {
      if (!rtIsNaN(x[k - 1])) {
        b_idx = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (b_idx == 0) {
    ex = x[0];
  } else {
    ex = x[b_idx - 1];
    for (k = b_idx + 1; k < 4; k++) {
      proc_control_node_B.d14 = x[k - 1];
      if (ex < proc_control_node_B.d14) {
        ex = proc_control_node_B.d14;
      }
    }
  }

  return ex;
}

real_T proc_control_nodeModelClass::proc_control_node_maximum_b4n(const real_T
  x[4])
{
  real_T ex;
  int32_T b_idx;
  int32_T k;
  boolean_T exitg1;
  if (!rtIsNaN(x[0])) {
    b_idx = 1;
  } else {
    b_idx = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 5)) {
      if (!rtIsNaN(x[k - 1])) {
        b_idx = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (b_idx == 0) {
    ex = x[0];
  } else {
    ex = x[b_idx - 1];
    for (k = b_idx + 1; k < 5; k++) {
      proc_control_node_B.d5 = x[k - 1];
      if (ex < proc_control_node_B.d5) {
        ex = proc_control_node_B.d5;
      }
    }
  }

  return ex;
}

void proc_control_nodeModelClass::proc_c_processPolynomialResults(const real_T
  breakMat[12], const real_T coeffMat[27], boolean_T hasMultipleBreaks,
  f_cell_wrap_proc_control_node_T breaksCell[3], g_cell_wrap_proc_control_node_T
  coeffCell[3])
{
  int32_T coefs_data_tmp;
  int32_T i;
  proc_control_node_B.maxBreaksTime = proc_control_node_maximum_b4(&breakMat[9]);
  if (hasMultipleBreaks) {
    proc_control_node_B.breakMat_i[0] = breakMat[0];
    proc_control_node_B.breakMat_i[1] = breakMat[3];
    proc_control_node_B.breakMat_i[2] = breakMat[6];
    proc_control_node_B.breakMat_i[3] = breakMat[9];
    if (proc_control_node_maximum_b4n(proc_control_node_B.breakMat_i) <
        proc_control_node_B.maxBreaksTime) {
      breaksCell[0].f1.size[0] = 1;
      breaksCell[0].f1.size[1] = 5;
      breaksCell[0].f1.data[0] = breakMat[0];
      breaksCell[0].f1.data[1] = breakMat[3];
      breaksCell[0].f1.data[2] = breakMat[6];
      breaksCell[0].f1.data[3] = breakMat[9];
      breaksCell[0].f1.data[4] = proc_control_node_B.maxBreaksTime;
      proc_control_node_B.holdTime_h = breakMat[9] - breakMat[6];
      proc_control_node_B.coefs_size_idx_0 = 4;
      memset(&proc_control_node_B.coefs_data[0], 0, 12U * sizeof(real_T));
      proc_control_node_B.holdTime[0] = proc_control_node_B.holdTime_h *
        proc_control_node_B.holdTime_h;
      proc_control_node_B.holdTime[1] = proc_control_node_B.holdTime_h;
      proc_control_node_B.holdTime[2] = 1.0;
      proc_control_node_B.holdTime_h = 0.0;
      i = 0;
      for (proc_control_node_B.loop_ub_p = 0; proc_control_node_B.loop_ub_p < 3;
           proc_control_node_B.loop_ub_p++) {
        coefs_data_tmp = proc_control_node_B.loop_ub_p << 2;
        proc_control_node_B.coefs_data[coefs_data_tmp] = coeffMat[i];
        proc_control_node_B.coefs_data[1 + coefs_data_tmp] = coeffMat[i + 3];
        proc_control_node_B.coefs_tmp = coeffMat[i + 6];
        proc_control_node_B.coefs_data[2 + coefs_data_tmp] =
          proc_control_node_B.coefs_tmp;
        proc_control_node_B.holdTime_h += proc_control_node_B.coefs_tmp *
          proc_control_node_B.holdTime[proc_control_node_B.loop_ub_p];
        i += 9;
      }

      proc_control_node_B.coefs_data[11] = proc_control_node_B.holdTime_h;
    } else {
      proc_control_node_B.coefs_size_idx_0 = 3;
      i = 0;
      for (proc_control_node_B.loop_ub_p = 0; proc_control_node_B.loop_ub_p < 3;
           proc_control_node_B.loop_ub_p++) {
        coefs_data_tmp = 3 * proc_control_node_B.loop_ub_p;
        proc_control_node_B.coefs_data[coefs_data_tmp] = coeffMat[i];
        proc_control_node_B.coefs_data[1 + coefs_data_tmp] = coeffMat[i + 3];
        proc_control_node_B.coefs_data[2 + coefs_data_tmp] = coeffMat[i + 6];
        i += 9;
      }

      breaksCell[0].f1.size[0] = 1;
      breaksCell[0].f1.size[1] = 4;
      breaksCell[0].f1.data[0] = breakMat[0];
      breaksCell[0].f1.data[1] = breakMat[3];
      breaksCell[0].f1.data[2] = breakMat[6];
      breaksCell[0].f1.data[3] = breakMat[9];
    }

    coeffCell[0].f1.size[0] = proc_control_node_B.coefs_size_idx_0;
    coeffCell[0].f1.size[1] = 3;
    proc_control_node_B.loop_ub_p = proc_control_node_B.coefs_size_idx_0 * 3;
    for (i = 0; i < proc_control_node_B.loop_ub_p; i++) {
      coeffCell[0].f1.data[i] = proc_control_node_B.coefs_data[i];
    }

    proc_control_node_B.breakMat_i[0] = breakMat[1];
    proc_control_node_B.breakMat_i[1] = breakMat[4];
    proc_control_node_B.breakMat_i[2] = breakMat[7];
    proc_control_node_B.breakMat_i[3] = breakMat[10];
    if (proc_control_node_maximum_b4n(proc_control_node_B.breakMat_i) <
        proc_control_node_B.maxBreaksTime) {
      breaksCell[1].f1.size[0] = 1;
      breaksCell[1].f1.size[1] = 5;
      breaksCell[1].f1.data[0] = breakMat[1];
      breaksCell[1].f1.data[1] = breakMat[4];
      breaksCell[1].f1.data[2] = breakMat[7];
      breaksCell[1].f1.data[3] = breakMat[10];
      breaksCell[1].f1.data[4] = proc_control_node_B.maxBreaksTime;
      proc_control_node_B.holdTime_h = breakMat[10] - breakMat[7];
      proc_control_node_B.coefs_size_idx_0 = 4;
      memset(&proc_control_node_B.coefs_data[0], 0, 12U * sizeof(real_T));
      proc_control_node_B.holdTime[0] = proc_control_node_B.holdTime_h *
        proc_control_node_B.holdTime_h;
      proc_control_node_B.holdTime[1] = proc_control_node_B.holdTime_h;
      proc_control_node_B.holdTime[2] = 1.0;
      proc_control_node_B.holdTime_h = 0.0;
      i = 0;
      for (proc_control_node_B.loop_ub_p = 0; proc_control_node_B.loop_ub_p < 3;
           proc_control_node_B.loop_ub_p++) {
        coefs_data_tmp = proc_control_node_B.loop_ub_p << 2;
        proc_control_node_B.coefs_data[coefs_data_tmp] = coeffMat[i + 1];
        proc_control_node_B.coefs_data[1 + coefs_data_tmp] = coeffMat[i + 4];
        proc_control_node_B.coefs_tmp = coeffMat[i + 7];
        proc_control_node_B.coefs_data[2 + coefs_data_tmp] =
          proc_control_node_B.coefs_tmp;
        proc_control_node_B.holdTime_h += proc_control_node_B.coefs_tmp *
          proc_control_node_B.holdTime[proc_control_node_B.loop_ub_p];
        i += 9;
      }

      proc_control_node_B.coefs_data[11] = proc_control_node_B.holdTime_h;
    } else {
      proc_control_node_B.coefs_size_idx_0 = 3;
      i = 0;
      for (proc_control_node_B.loop_ub_p = 0; proc_control_node_B.loop_ub_p < 3;
           proc_control_node_B.loop_ub_p++) {
        coefs_data_tmp = 3 * proc_control_node_B.loop_ub_p;
        proc_control_node_B.coefs_data[coefs_data_tmp] = coeffMat[i + 1];
        proc_control_node_B.coefs_data[1 + coefs_data_tmp] = coeffMat[i + 4];
        proc_control_node_B.coefs_data[2 + coefs_data_tmp] = coeffMat[i + 7];
        i += 9;
      }

      breaksCell[1].f1.size[0] = 1;
      breaksCell[1].f1.size[1] = 4;
      breaksCell[1].f1.data[0] = breakMat[1];
      breaksCell[1].f1.data[1] = breakMat[4];
      breaksCell[1].f1.data[2] = breakMat[7];
      breaksCell[1].f1.data[3] = breakMat[10];
    }

    coeffCell[1].f1.size[0] = proc_control_node_B.coefs_size_idx_0;
    coeffCell[1].f1.size[1] = 3;
    proc_control_node_B.loop_ub_p = proc_control_node_B.coefs_size_idx_0 * 3;
    for (i = 0; i < proc_control_node_B.loop_ub_p; i++) {
      coeffCell[1].f1.data[i] = proc_control_node_B.coefs_data[i];
    }

    proc_control_node_B.breakMat_i[0] = breakMat[2];
    proc_control_node_B.breakMat_i[1] = breakMat[5];
    proc_control_node_B.breakMat_i[2] = breakMat[8];
    proc_control_node_B.breakMat_i[3] = breakMat[11];
    if (proc_control_node_maximum_b4n(proc_control_node_B.breakMat_i) <
        proc_control_node_B.maxBreaksTime) {
      breaksCell[2].f1.size[0] = 1;
      breaksCell[2].f1.size[1] = 5;
      breaksCell[2].f1.data[0] = breakMat[2];
      breaksCell[2].f1.data[1] = breakMat[5];
      breaksCell[2].f1.data[2] = breakMat[8];
      breaksCell[2].f1.data[3] = breakMat[11];
      breaksCell[2].f1.data[4] = proc_control_node_B.maxBreaksTime;
      proc_control_node_B.holdTime_h = breakMat[11] - breakMat[8];
      proc_control_node_B.coefs_size_idx_0 = 4;
      memset(&proc_control_node_B.coefs_data[0], 0, 12U * sizeof(real_T));
      proc_control_node_B.holdTime[0] = proc_control_node_B.holdTime_h *
        proc_control_node_B.holdTime_h;
      proc_control_node_B.holdTime[1] = proc_control_node_B.holdTime_h;
      proc_control_node_B.holdTime[2] = 1.0;
      proc_control_node_B.holdTime_h = 0.0;
      i = 0;
      for (proc_control_node_B.loop_ub_p = 0; proc_control_node_B.loop_ub_p < 3;
           proc_control_node_B.loop_ub_p++) {
        coefs_data_tmp = proc_control_node_B.loop_ub_p << 2;
        proc_control_node_B.coefs_data[coefs_data_tmp] = coeffMat[i + 2];
        proc_control_node_B.coefs_data[1 + coefs_data_tmp] = coeffMat[i + 5];
        proc_control_node_B.coefs_tmp = coeffMat[i + 8];
        proc_control_node_B.coefs_data[2 + coefs_data_tmp] =
          proc_control_node_B.coefs_tmp;
        proc_control_node_B.holdTime_h += proc_control_node_B.coefs_tmp *
          proc_control_node_B.holdTime[proc_control_node_B.loop_ub_p];
        i += 9;
      }

      proc_control_node_B.coefs_data[11] = proc_control_node_B.holdTime_h;
    } else {
      proc_control_node_B.coefs_size_idx_0 = 3;
      i = 0;
      for (proc_control_node_B.loop_ub_p = 0; proc_control_node_B.loop_ub_p < 3;
           proc_control_node_B.loop_ub_p++) {
        coefs_data_tmp = 3 * proc_control_node_B.loop_ub_p;
        proc_control_node_B.coefs_data[coefs_data_tmp] = coeffMat[i + 2];
        proc_control_node_B.coefs_data[1 + coefs_data_tmp] = coeffMat[i + 5];
        proc_control_node_B.coefs_data[2 + coefs_data_tmp] = coeffMat[i + 8];
        i += 9;
      }

      breaksCell[2].f1.size[0] = 1;
      breaksCell[2].f1.size[1] = 4;
      breaksCell[2].f1.data[0] = breakMat[2];
      breaksCell[2].f1.data[1] = breakMat[5];
      breaksCell[2].f1.data[2] = breakMat[8];
      breaksCell[2].f1.data[3] = breakMat[11];
    }

    coeffCell[2].f1.size[0] = proc_control_node_B.coefs_size_idx_0;
    coeffCell[2].f1.size[1] = 3;
    proc_control_node_B.loop_ub_p = proc_control_node_B.coefs_size_idx_0 * 3;
    for (i = 0; i < proc_control_node_B.loop_ub_p; i++) {
      coeffCell[2].f1.data[i] = proc_control_node_B.coefs_data[i];
    }
  } else {
    breaksCell[0].f1.size[0] = 1;
    breaksCell[0].f1.size[1] = 4;
    breaksCell[0].f1.data[0] = breakMat[0];
    proc_control_node_B.loop_ub_p = 1;
    breaksCell[0].f1.data[proc_control_node_B.loop_ub_p] = breakMat[3];
    proc_control_node_B.coefs_size_idx_0 = 2;
    breaksCell[0].f1.data[proc_control_node_B.coefs_size_idx_0] = breakMat[6];
    breaksCell[0].f1.data[3] = breakMat[9];
    coeffCell[0].f1.size[0] = 9;
    coeffCell[0].f1.size[1] = 3;
    breaksCell[1].f1.size[0] = 1;
    breaksCell[1].f1.size[1] = 4;
    breaksCell[1].f1.data[0] = breakMat[0];
    breaksCell[1].f1.data[proc_control_node_B.loop_ub_p] = breakMat[3];
    breaksCell[1].f1.data[proc_control_node_B.coefs_size_idx_0] = breakMat[6];
    breaksCell[1].f1.data[3] = breakMat[9];
    coeffCell[1].f1.size[0] = 9;
    coeffCell[1].f1.size[1] = 3;
    breaksCell[2].f1.size[0] = 1;
    breaksCell[2].f1.size[1] = 4;
    breaksCell[2].f1.data[0] = breakMat[0];
    breaksCell[2].f1.data[proc_control_node_B.loop_ub_p] = breakMat[3];
    breaksCell[2].f1.data[proc_control_node_B.coefs_size_idx_0] = breakMat[6];
    breaksCell[2].f1.data[3] = breakMat[9];
    coeffCell[2].f1.size[0] = 9;
    coeffCell[2].f1.size[1] = 3;
    memcpy(&coeffCell[0].f1.data[0], &coeffMat[0], 27U * sizeof(real_T));
    memcpy(&coeffCell[1].f1.data[0], &coeffMat[0], 27U * sizeof(real_T));
    memcpy(&coeffCell[2].f1.data[0], &coeffMat[0], 27U * sizeof(real_T));
  }
}

int32_T proc_control_nodeModelClass::proc_control_node_bsearch(const real_T
  x_data[], const int32_T x_size[2], real_T xi)
{
  int32_T high_i;
  int32_T low_ip1;
  int32_T mid_i;
  int32_T n;
  n = 1;
  low_ip1 = 1;
  high_i = x_size[1];
  while (high_i > low_ip1 + 1) {
    mid_i = (n >> 1) + (high_i >> 1);
    if (((n & 1) == 1) && ((high_i & 1) == 1)) {
      mid_i++;
    }

    if (xi >= x_data[mid_i - 1]) {
      n = mid_i;
      low_ip1 = mid_i;
    } else {
      high_i = mid_i;
    }
  }

  return n;
}

void proc_control_nodeModelClass::proc_control_node_ppval_b4(const real_T
  pp_breaks_data[], const int32_T pp_breaks_size[2], const real_T pp_coefs_data[],
  const int32_T pp_coefs_size[3], const real_T x[2], real_T v_data[], int32_T
  v_size[2])
{
  int32_T tmp;
  proc_control_node_B.elementsPerPage = pp_coefs_size[0] - 1;
  proc_control_node_B.coefStride = (pp_breaks_size[1] - 1) * pp_coefs_size[0];
  v_size[0] = pp_coefs_size[0];
  v_size[1] = 2;
  if (pp_coefs_size[0] == 1) {
    if (rtIsNaN(x[0])) {
      v_data[0] = x[0];
    } else {
      proc_control_node_B.ip = proc_control_node_bsearch(pp_breaks_data,
        pp_breaks_size, x[0]) - 1;
      proc_control_node_B.xloc = x[0] - pp_breaks_data[proc_control_node_B.ip];
      v_data[0] = (pp_coefs_data[proc_control_node_B.ip] *
                   proc_control_node_B.xloc +
                   pp_coefs_data[proc_control_node_B.ip +
                   proc_control_node_B.coefStride]) * proc_control_node_B.xloc +
        pp_coefs_data[(proc_control_node_B.coefStride << 1) +
        proc_control_node_B.ip];
    }

    if (rtIsNaN(x[1])) {
      v_data[1] = x[1];
    } else {
      proc_control_node_B.ip = proc_control_node_bsearch(pp_breaks_data,
        pp_breaks_size, x[1]) - 1;
      proc_control_node_B.xloc = x[1] - pp_breaks_data[proc_control_node_B.ip];
      v_data[1] = (pp_coefs_data[proc_control_node_B.ip] *
                   proc_control_node_B.xloc +
                   pp_coefs_data[proc_control_node_B.ip +
                   proc_control_node_B.coefStride]) * proc_control_node_B.xloc +
        pp_coefs_data[(proc_control_node_B.coefStride << 1) +
        proc_control_node_B.ip];
    }
  } else {
    for (proc_control_node_B.c_ix = 0; proc_control_node_B.c_ix < 2;
         proc_control_node_B.c_ix++) {
      proc_control_node_B.iv0 = (proc_control_node_B.elementsPerPage + 1) *
        proc_control_node_B.c_ix - 1;
      if (rtIsNaN(x[proc_control_node_B.c_ix])) {
        for (proc_control_node_B.ip = 0; proc_control_node_B.ip <=
             proc_control_node_B.elementsPerPage; proc_control_node_B.ip++) {
          v_data[(proc_control_node_B.iv0 + proc_control_node_B.ip) + 1] =
            x[proc_control_node_B.c_ix];
        }
      } else {
        proc_control_node_B.ip = proc_control_node_bsearch(pp_breaks_data,
          pp_breaks_size, x[proc_control_node_B.c_ix]) - 1;
        proc_control_node_B.icp = (proc_control_node_B.elementsPerPage + 1) *
          proc_control_node_B.ip;
        proc_control_node_B.xloc = x[proc_control_node_B.c_ix] -
          pp_breaks_data[proc_control_node_B.ip];
        for (proc_control_node_B.c_j_p = 0; proc_control_node_B.c_j_p <=
             proc_control_node_B.elementsPerPage; proc_control_node_B.c_j_p++) {
          v_data[(proc_control_node_B.iv0 + proc_control_node_B.c_j_p) + 1] =
            pp_coefs_data[proc_control_node_B.icp + proc_control_node_B.c_j_p];
        }

        for (proc_control_node_B.c_j_p = 0; proc_control_node_B.c_j_p < 2;
             proc_control_node_B.c_j_p++) {
          proc_control_node_B.ip = ((proc_control_node_B.c_j_p + 1) *
            proc_control_node_B.coefStride + proc_control_node_B.icp) - 1;
          for (proc_control_node_B.d_j_n = 0; proc_control_node_B.d_j_n <=
               proc_control_node_B.elementsPerPage; proc_control_node_B.d_j_n++)
          {
            tmp = (proc_control_node_B.d_j_n + proc_control_node_B.iv0) + 1;
            v_data[tmp] = v_data[tmp] * proc_control_node_B.xloc +
              pp_coefs_data[(proc_control_node_B.d_j_n + proc_control_node_B.ip)
              + 1];
          }
        }
      }
    }
  }
}

void proc_control_nodeModelClass::p_generateTrajectoriesFromCoefs(const real_T
  breaks_data[], const int32_T breaks_size[2], const real_T coeffs_data[], const
  int32_T coeffs_size[2], real_T dim, const real_T t[2], real_T q_data[],
  int32_T q_size[2], real_T qd_data[], int32_T qd_size[2], real_T qdd_data[],
  int32_T qdd_size[2], real_T pp_breaks_data[], int32_T pp_breaks_size[2],
  real_T pp_coefs_data[], int32_T pp_coefs_size[3])
{
  proc_control_node_B.m_l = static_cast<int32_T>(dim) - 1;
  proc_control_node_B.valueAtStart_size_idx_0 = static_cast<int32_T>(dim);
  for (proc_control_node_B.b_i_o = 0; proc_control_node_B.b_i_o <=
       proc_control_node_B.m_l; proc_control_node_B.b_i_o++) {
    proc_control_node_B.d_m = static_cast<int32_T>(dim) +
      proc_control_node_B.b_i_o;
    proc_control_node_B.s_c = coeffs_data[proc_control_node_B.b_i_o %
      static_cast<int32_T>(dim) + coeffs_size[0] * (proc_control_node_B.b_i_o /
      static_cast<int32_T>(dim))] * 0.0 + coeffs_data[proc_control_node_B.d_m %
      static_cast<int32_T>(dim) + coeffs_size[0] * (proc_control_node_B.d_m /
      static_cast<int32_T>(dim))] * 0.0;
    proc_control_node_B.d_m = (static_cast<int32_T>(dim) << 1) +
      proc_control_node_B.b_i_o;
    proc_control_node_B.valueAtStart_data[proc_control_node_B.b_i_o] =
      coeffs_data[proc_control_node_B.d_m % static_cast<int32_T>(dim) +
      coeffs_size[0] * (proc_control_node_B.d_m / static_cast<int32_T>(dim))] +
      proc_control_node_B.s_c;
  }

  proc_control_node_B.newSegmentCoeffs_size_idx_0 = static_cast<int32_T>(dim);
  proc_control_node_B.loop_ub_tmp = static_cast<int32_T>(dim) * 3 - 1;
  if (0 <= proc_control_node_B.loop_ub_tmp) {
    memset(&proc_control_node_B.newSegmentCoeffs_data[0], 0,
           (proc_control_node_B.loop_ub_tmp + 1) * sizeof(real_T));
  }

  for (proc_control_node_B.d_m = 0; proc_control_node_B.d_m <
       proc_control_node_B.valueAtStart_size_idx_0; proc_control_node_B.d_m++) {
    proc_control_node_B.newSegmentCoeffs_data[proc_control_node_B.d_m + (
      static_cast<int32_T>(dim) << 1)] =
      proc_control_node_B.valueAtStart_data[proc_control_node_B.d_m];
  }

  proc_control_node_B.coefsWithFlatStart_size_idx_0_t = static_cast<int32_T>(
    static_cast<real_T>(coeffs_size[0]) + dim);
  proc_control_node_B.valueAtStart_size_idx_0 =
    proc_control_node_B.coefsWithFlatStart_size_idx_0_t * 3 - 1;
  if (0 <= proc_control_node_B.valueAtStart_size_idx_0) {
    memset(&proc_control_node_B.coefsWithFlatStart_data[0], 0,
           (proc_control_node_B.valueAtStart_size_idx_0 + 1) * sizeof(real_T));
  }

  proc_control_node_B.m_l = coeffs_size[0];
  for (proc_control_node_B.d_m = 0; proc_control_node_B.d_m < 3;
       proc_control_node_B.d_m++) {
    for (proc_control_node_B.b_i_o = 0; proc_control_node_B.b_i_o <
         proc_control_node_B.newSegmentCoeffs_size_idx_0;
         proc_control_node_B.b_i_o++) {
      proc_control_node_B.coefsWithFlatStart_data[proc_control_node_B.b_i_o +
        proc_control_node_B.coefsWithFlatStart_size_idx_0_t *
        proc_control_node_B.d_m] =
        proc_control_node_B.newSegmentCoeffs_data[proc_control_node_B.b_i_o +
        static_cast<int32_T>(dim) * proc_control_node_B.d_m];
    }

    for (proc_control_node_B.b_i_o = 0; proc_control_node_B.b_i_o <
         proc_control_node_B.m_l; proc_control_node_B.b_i_o++) {
      proc_control_node_B.coefsWithFlatStart_data[((static_cast<int32_T>(dim +
        1.0) + proc_control_node_B.b_i_o) +
        proc_control_node_B.coefsWithFlatStart_size_idx_0_t *
        proc_control_node_B.d_m) - 1] = coeffs_data[proc_control_node_B.b_i_o +
        coeffs_size[0] * proc_control_node_B.d_m];
    }
  }

  proc_control_node_B.breaksWithFlatStart_size_idx_1 = breaks_size[1] + 1;
  proc_control_node_B.valueAtStart_size_idx_0 = breaks_size[1] - 1;
  proc_control_node_B.b_i_o = 0;
  proc_control_node_B.breaksWithFlatStart_data[proc_control_node_B.b_i_o] =
    breaks_data[proc_control_node_B.b_i_o] - 1.0;
  if (0 <= proc_control_node_B.valueAtStart_size_idx_0) {
    memcpy(&proc_control_node_B.breaksWithFlatStart_data[1], &breaks_data[0],
           (proc_control_node_B.valueAtStart_size_idx_0 + 1) * sizeof(real_T));
  }

  proc_control_node_B.s_tmp =
    proc_control_node_B.breaksWithFlatStart_data[breaks_size[1]];
  proc_control_node_B.s_c = proc_control_node_B.s_tmp -
    proc_control_node_B.breaksWithFlatStart_data[breaks_size[1] - 1];
  proc_control_node_B.B_idx_0 = rt_powd_snf(proc_control_node_B.s_c, 2.0);
  proc_control_node_B.B_idx_1 = rt_powd_snf(proc_control_node_B.s_c, 1.0);
  proc_control_node_B.B_idx_2 = rt_powd_snf(proc_control_node_B.s_c, 0.0);
  proc_control_node_B.s_c = (static_cast<real_T>
    (proc_control_node_B.coefsWithFlatStart_size_idx_0_t) - dim) + 1.0;
  if (proc_control_node_B.s_c >
      proc_control_node_B.coefsWithFlatStart_size_idx_0_t) {
    proc_control_node_B.valueAtStart_size_idx_0 = 0;
    proc_control_node_B.d_m = 0;
  } else {
    proc_control_node_B.valueAtStart_size_idx_0 = static_cast<int32_T>
      (proc_control_node_B.s_c) - 1;
    proc_control_node_B.d_m =
      proc_control_node_B.coefsWithFlatStart_size_idx_0_t;
  }

  proc_control_node_B.m_tmp = proc_control_node_B.d_m -
    proc_control_node_B.valueAtStart_size_idx_0;
  proc_control_node_B.m_l = proc_control_node_B.m_tmp - 1;
  for (proc_control_node_B.b_i_o = 0; proc_control_node_B.b_i_o <=
       proc_control_node_B.m_l; proc_control_node_B.b_i_o++) {
    proc_control_node_B.d_m = proc_control_node_B.m_tmp +
      proc_control_node_B.b_i_o;
    proc_control_node_B.s_c = proc_control_node_B.coefsWithFlatStart_data
      [(proc_control_node_B.b_i_o % proc_control_node_B.m_tmp +
        proc_control_node_B.valueAtStart_size_idx_0) +
      proc_control_node_B.coefsWithFlatStart_size_idx_0_t *
      (proc_control_node_B.b_i_o / proc_control_node_B.m_tmp)] *
      proc_control_node_B.B_idx_0 + proc_control_node_B.coefsWithFlatStart_data
      [(proc_control_node_B.d_m % proc_control_node_B.m_tmp +
        proc_control_node_B.valueAtStart_size_idx_0) +
      proc_control_node_B.coefsWithFlatStart_size_idx_0_t *
      (proc_control_node_B.d_m / proc_control_node_B.m_tmp)] *
      proc_control_node_B.B_idx_1;
    proc_control_node_B.d_m = (proc_control_node_B.m_tmp << 1) +
      proc_control_node_B.b_i_o;
    proc_control_node_B.valueAtEnd_data[proc_control_node_B.b_i_o] =
      proc_control_node_B.coefsWithFlatStart_data[(proc_control_node_B.d_m %
      proc_control_node_B.m_tmp + proc_control_node_B.valueAtStart_size_idx_0) +
      proc_control_node_B.coefsWithFlatStart_size_idx_0_t *
      (proc_control_node_B.d_m / proc_control_node_B.m_tmp)] *
      proc_control_node_B.B_idx_2 + proc_control_node_B.s_c;
  }

  proc_control_node_B.newSegmentCoeffs_size_idx_0 = static_cast<int32_T>(dim);
  if (0 <= proc_control_node_B.loop_ub_tmp) {
    memset(&proc_control_node_B.newSegmentCoeffs_data[0], 0,
           (proc_control_node_B.loop_ub_tmp + 1) * sizeof(real_T));
  }

  for (proc_control_node_B.d_m = 0; proc_control_node_B.d_m <
       proc_control_node_B.m_tmp; proc_control_node_B.d_m++) {
    proc_control_node_B.newSegmentCoeffs_data[proc_control_node_B.d_m + (
      static_cast<int32_T>(dim) << 1)] =
      proc_control_node_B.valueAtEnd_data[proc_control_node_B.d_m];
  }

  proc_control_node_B.m_l = static_cast<int32_T>(static_cast<real_T>
    (proc_control_node_B.coefsWithFlatStart_size_idx_0_t) + dim);
  proc_control_node_B.loop_ub_tmp = proc_control_node_B.m_l * 3 - 1;
  if (0 <= proc_control_node_B.loop_ub_tmp) {
    memset(&proc_control_node_B.b_newCoefs_data[0], 0,
           (proc_control_node_B.loop_ub_tmp + 1) * sizeof(real_T));
  }

  for (proc_control_node_B.d_m = 0; proc_control_node_B.d_m < 3;
       proc_control_node_B.d_m++) {
    for (proc_control_node_B.b_i_o = 0; proc_control_node_B.b_i_o <
         proc_control_node_B.coefsWithFlatStart_size_idx_0_t;
         proc_control_node_B.b_i_o++) {
      proc_control_node_B.b_newCoefs_data[proc_control_node_B.b_i_o +
        proc_control_node_B.m_l * proc_control_node_B.d_m] =
        proc_control_node_B.coefsWithFlatStart_data[proc_control_node_B.b_i_o +
        proc_control_node_B.coefsWithFlatStart_size_idx_0_t *
        proc_control_node_B.d_m];
    }
  }

  for (proc_control_node_B.d_m = 0; proc_control_node_B.d_m < 3;
       proc_control_node_B.d_m++) {
    for (proc_control_node_B.b_i_o = 0; proc_control_node_B.b_i_o <
         proc_control_node_B.newSegmentCoeffs_size_idx_0;
         proc_control_node_B.b_i_o++) {
      proc_control_node_B.b_newCoefs_data
        [((proc_control_node_B.coefsWithFlatStart_size_idx_0_t +
           (proc_control_node_B.b_i_o + 1)) + proc_control_node_B.m_l *
          proc_control_node_B.d_m) - 1] =
        proc_control_node_B.newSegmentCoeffs_data[proc_control_node_B.b_i_o +
        static_cast<int32_T>(dim) * proc_control_node_B.d_m];
    }
  }

  proc_control_node_B.newSegmentCoeffs_size_idx_0 = breaks_size[1] + 2;
  if (0 <= proc_control_node_B.breaksWithFlatStart_size_idx_1 - 1) {
    memcpy(&proc_control_node_B.b_newBreaks_data[0],
           &proc_control_node_B.breaksWithFlatStart_data[0],
           proc_control_node_B.breaksWithFlatStart_size_idx_1 * sizeof(real_T));
  }

  proc_control_node_B.b_newBreaks_data[breaks_size[1] + 1] =
    proc_control_node_B.s_tmp + 1.0;
  if (0 <= proc_control_node_B.loop_ub_tmp) {
    memset(&proc_control_node_B.dCoeffs_data[0], 0,
           (proc_control_node_B.loop_ub_tmp + 1) * sizeof(real_T));
  }

  for (proc_control_node_B.b_i_o = 0; proc_control_node_B.b_i_o < 2;
       proc_control_node_B.b_i_o++) {
    for (proc_control_node_B.d_m = 0; proc_control_node_B.d_m <
         proc_control_node_B.m_l; proc_control_node_B.d_m++) {
      proc_control_node_B.dCoeffs_data[proc_control_node_B.d_m +
        proc_control_node_B.m_l * (proc_control_node_B.b_i_o + 1)] =
        proc_control_node_B.b_newCoefs_data[proc_control_node_B.d_m +
        proc_control_node_B.m_l * proc_control_node_B.b_i_o] *
        static_cast<real_T>(2 - proc_control_node_B.b_i_o);
    }
  }

  proc_control_node_B.valueAtStart_size_idx_0 = proc_control_node_B.m_l * 3 - 1;
  if (0 <= proc_control_node_B.valueAtStart_size_idx_0) {
    memset(&proc_control_node_B.dCoeffs_data_l[0], 0,
           (proc_control_node_B.valueAtStart_size_idx_0 + 1) * sizeof(real_T));
  }

  for (proc_control_node_B.b_i_o = 0; proc_control_node_B.b_i_o < 2;
       proc_control_node_B.b_i_o++) {
    for (proc_control_node_B.d_m = 0; proc_control_node_B.d_m <
         proc_control_node_B.m_l; proc_control_node_B.d_m++) {
      proc_control_node_B.dCoeffs_data_l[proc_control_node_B.d_m +
        proc_control_node_B.m_l * (proc_control_node_B.b_i_o + 1)] =
        proc_control_node_B.dCoeffs_data[proc_control_node_B.d_m +
        proc_control_node_B.m_l * proc_control_node_B.b_i_o] *
        static_cast<real_T>(2 - proc_control_node_B.b_i_o);
    }
  }

  pp_breaks_size[0] = 1;
  pp_breaks_size[1] = breaks_size[1] + 2;
  if (0 <= proc_control_node_B.newSegmentCoeffs_size_idx_0 - 1) {
    memcpy(&pp_breaks_data[0], &proc_control_node_B.b_newBreaks_data[0],
           proc_control_node_B.newSegmentCoeffs_size_idx_0 * sizeof(real_T));
  }

  pp_coefs_size[0] = static_cast<int32_T>(dim);
  pp_coefs_size[1] = breaks_size[1] + 1;
  pp_coefs_size[2] = 3;
  proc_control_node_B.valueAtStart_size_idx_0 = (breaks_size[1] + 1) *
    static_cast<int32_T>(dim) * 3;
  if (0 <= proc_control_node_B.valueAtStart_size_idx_0 - 1) {
    memcpy(&pp_coefs_data[0], &proc_control_node_B.b_newCoefs_data[0],
           proc_control_node_B.valueAtStart_size_idx_0 * sizeof(real_T));
  }

  proc_control_node_B.num[0] = static_cast<int32_T>(dim);
  proc_control_node_B.num[1] = breaks_size[1] + 1;
  proc_control_node_B.num[2] = 3;
  proc_control_node_B.b_newBreaks_size[0] = 1;
  proc_control_node_B.b_newBreaks_size[1] = breaks_size[1] + 2;
  if (0 <= proc_control_node_B.newSegmentCoeffs_size_idx_0 - 1) {
    memcpy(&proc_control_node_B.b_newBreaks_data_g[0],
           &proc_control_node_B.b_newBreaks_data[0],
           proc_control_node_B.newSegmentCoeffs_size_idx_0 * sizeof(real_T));
  }

  proc_control_node_ppval_b4(proc_control_node_B.b_newBreaks_data_g,
    proc_control_node_B.b_newBreaks_size, proc_control_node_B.b_newCoefs_data,
    proc_control_node_B.num, t, q_data, q_size);
  proc_control_node_B.num[0] = static_cast<int32_T>(dim);
  proc_control_node_B.num[1] = breaks_size[1] + 1;
  proc_control_node_B.num[2] = 3;
  proc_control_node_B.b_newBreaks_size[0] = 1;
  proc_control_node_B.b_newBreaks_size[1] = breaks_size[1] + 2;
  if (0 <= proc_control_node_B.newSegmentCoeffs_size_idx_0 - 1) {
    memcpy(&proc_control_node_B.b_newBreaks_data_g[0],
           &proc_control_node_B.b_newBreaks_data[0],
           proc_control_node_B.newSegmentCoeffs_size_idx_0 * sizeof(real_T));
  }

  proc_control_node_ppval_b4(proc_control_node_B.b_newBreaks_data_g,
    proc_control_node_B.b_newBreaks_size, proc_control_node_B.dCoeffs_data,
    proc_control_node_B.num, t, qd_data, qd_size);
  proc_control_node_B.num[0] = static_cast<int32_T>(dim);
  proc_control_node_B.num[1] = breaks_size[1] + 1;
  proc_control_node_B.num[2] = 3;
  proc_control_node_B.b_newBreaks_size[0] = 1;
  proc_control_node_B.b_newBreaks_size[1] = breaks_size[1] + 2;
  if (0 <= proc_control_node_B.newSegmentCoeffs_size_idx_0 - 1) {
    memcpy(&proc_control_node_B.b_newBreaks_data_g[0],
           &proc_control_node_B.b_newBreaks_data[0],
           proc_control_node_B.newSegmentCoeffs_size_idx_0 * sizeof(real_T));
  }

  proc_control_node_ppval_b4(proc_control_node_B.b_newBreaks_data_g,
    proc_control_node_B.b_newBreaks_size, proc_control_node_B.dCoeffs_data_l,
    proc_control_node_B.num, t, qdd_data, qdd_size);
}

void proc_control_nodeModelClass::proc_control_node_trapveltraj(const real_T
  wayPoints[6], real_T varargin_2, real_T varargin_4, real_T q[6], real_T qd[6],
  real_T qdd[6], real_T t[2], s_AITQ9DUL6umkPt5yuMqsWH_proc_T ppCell_data[],
  int32_T *ppCell_size)
{
  int8_T rowSelection_data[3];
  int8_T s[2];
  boolean_T hasMultipleBreaks;
  for (proc_control_node_B.deltaSign = 0; proc_control_node_B.deltaSign < 6;
       proc_control_node_B.deltaSign++) {
    q[proc_control_node_B.deltaSign] = 0.0;
    qd[proc_control_node_B.deltaSign] = 0.0;
    qdd[proc_control_node_B.deltaSign] = 0.0;
  }

  memset(&proc_control_node_B.coeffMat[0], 0, 27U * sizeof(real_T));
  memset(&proc_control_node_B.breakMat[0], 0, 12U * sizeof(real_T));
  s[1] = 3;
  for (proc_control_node_B.b_i_b = 0; proc_control_node_B.b_i_b < 3;
       proc_control_node_B.b_i_b++) {
    proc_control_node_B.s0 = wayPoints[proc_control_node_B.b_i_b];
    proc_control_node_B.sF = wayPoints[proc_control_node_B.b_i_b + 3];
    proc_control_node_B.deltaSign = 1;
    if (proc_control_node_B.sF < wayPoints[proc_control_node_B.b_i_b]) {
      proc_control_node_B.s0 = proc_control_node_B.sF;
      proc_control_node_B.sF = wayPoints[proc_control_node_B.b_i_b];
      proc_control_node_B.deltaSign = -1;
    }

    proc_control_node_B.numComputedPolynomials = varargin_2;
    proc_control_node_B.indivPolyDim = varargin_4;
    proc_control_node_B.ndbl = (proc_control_node_B.sF - proc_control_node_B.s0)
      / (varargin_2 - varargin_4);
    proc_control_node_B.apnd = proc_control_node_B.ndbl / varargin_4;
    if (proc_control_node_B.s0 == proc_control_node_B.sF) {
      proc_control_node_B.apnd = 0.0;
      proc_control_node_B.ndbl = 0.0;
      if (rtIsNaN(varargin_2) || (varargin_2 == 0.0)) {
        proc_control_node_B.numComputedPolynomials = 1.0;
      }

      proc_control_node_B.indivPolyDim =
        proc_control_node_B.numComputedPolynomials / 3.0;
    }

    proc_control_node_B.ndbl *= static_cast<real_T>
      (proc_control_node_B.deltaSign);
    proc_control_node_B.apnd *= static_cast<real_T>
      (proc_control_node_B.deltaSign);
    proc_control_node_B.parameterMat[proc_control_node_B.b_i_b] =
      wayPoints[proc_control_node_B.b_i_b];
    proc_control_node_B.s0 = wayPoints[proc_control_node_B.b_i_b + 3];
    proc_control_node_B.parameterMat[proc_control_node_B.b_i_b + 3] =
      proc_control_node_B.s0;
    proc_control_node_B.parameterMat[proc_control_node_B.b_i_b + 6] =
      proc_control_node_B.ndbl;
    proc_control_node_B.parameterMat[proc_control_node_B.b_i_b + 9] =
      proc_control_node_B.apnd;
    proc_control_node_B.parameterMat[proc_control_node_B.b_i_b + 12] =
      proc_control_node_B.indivPolyDim;
    proc_control_node_B.parameterMat[proc_control_node_B.b_i_b + 15] =
      proc_control_node_B.numComputedPolynomials;
    memset(&proc_control_node_B.coefs[0], 0, 9U * sizeof(real_T));
    if (proc_control_node_B.ndbl == 0.0) {
      proc_control_node_B.coefs[6] = wayPoints[proc_control_node_B.b_i_b];
      proc_control_node_B.coefs[7] = wayPoints[proc_control_node_B.b_i_b];
      proc_control_node_B.coefs[8] = wayPoints[proc_control_node_B.b_i_b];
    } else {
      proc_control_node_B.coefs[0] = proc_control_node_B.apnd / 2.0;
      proc_control_node_B.coefs[3] = 0.0;
      proc_control_node_B.coefs[6] = wayPoints[proc_control_node_B.b_i_b];
      proc_control_node_B.coefs[1] = 0.0;
      proc_control_node_B.coefs[4] = proc_control_node_B.ndbl;
      proc_control_node_B.sF = proc_control_node_B.apnd / 2.0 *
        (proc_control_node_B.indivPolyDim * proc_control_node_B.indivPolyDim);
      proc_control_node_B.coefs[7] = proc_control_node_B.sF +
        wayPoints[proc_control_node_B.b_i_b];
      proc_control_node_B.coefs[2] = -proc_control_node_B.apnd / 2.0;
      proc_control_node_B.coefs[5] = proc_control_node_B.ndbl;
      proc_control_node_B.coefs[8] = (proc_control_node_B.sF +
        proc_control_node_B.s0) - proc_control_node_B.ndbl *
        proc_control_node_B.indivPolyDim;
    }

    for (proc_control_node_B.deltaSign = 0; proc_control_node_B.deltaSign < 9;
         proc_control_node_B.deltaSign++) {
      proc_control_node_B.coefIndex[proc_control_node_B.deltaSign] = false;
    }

    proc_control_node_B.loop_ub_n = static_cast<int32_T>(floor(2.0));
    proc_control_node_B.lspbSegIndices_size_idx_1 =
      proc_control_node_B.loop_ub_n + 1;
    for (proc_control_node_B.deltaSign = 0; proc_control_node_B.deltaSign <=
         proc_control_node_B.loop_ub_n; proc_control_node_B.deltaSign++) {
      proc_control_node_B.lspbSegIndices_data[proc_control_node_B.deltaSign] =
        (proc_control_node_B.b_i_b + 3 * proc_control_node_B.deltaSign) + 1;
    }

    for (proc_control_node_B.deltaSign = 0; proc_control_node_B.deltaSign <=
         proc_control_node_B.loop_ub_n; proc_control_node_B.deltaSign++) {
      proc_control_node_B.g_data_tmp = proc_control_node_B.deltaSign;
      proc_control_node_B.g_data[proc_control_node_B.g_data_tmp] =
        static_cast<int32_T>
        (proc_control_node_B.lspbSegIndices_data[proc_control_node_B.g_data_tmp]);
    }

    for (proc_control_node_B.deltaSign = 0; proc_control_node_B.deltaSign <
         proc_control_node_B.lspbSegIndices_size_idx_1;
         proc_control_node_B.deltaSign++) {
      proc_control_node_B.coefIndex[proc_control_node_B.g_data[proc_control_node_B.deltaSign]
        - 1] = true;
    }

    proc_control_node_B.deltaSign = 0;
    for (proc_control_node_B.loop_ub_n = 0; proc_control_node_B.loop_ub_n < 9;
         proc_control_node_B.loop_ub_n++) {
      if (proc_control_node_B.coefIndex[proc_control_node_B.loop_ub_n]) {
        proc_control_node_B.deltaSign++;
      }
    }

    proc_control_node_B.lspbSegIndices_size_idx_1 =
      proc_control_node_B.deltaSign;
    proc_control_node_B.deltaSign = 0;
    for (proc_control_node_B.loop_ub_n = 0; proc_control_node_B.loop_ub_n < 9;
         proc_control_node_B.loop_ub_n++) {
      if (proc_control_node_B.coefIndex[proc_control_node_B.loop_ub_n]) {
        proc_control_node_B.s_data[proc_control_node_B.deltaSign] = static_cast<
          int8_T>(proc_control_node_B.loop_ub_n + 1);
        proc_control_node_B.deltaSign++;
      }
    }

    s[0] = static_cast<int8_T>(proc_control_node_B.lspbSegIndices_size_idx_1);
    proc_control_node_B.loop_ub_n = static_cast<int8_T>
      (proc_control_node_B.lspbSegIndices_size_idx_1);
    for (proc_control_node_B.deltaSign = 0; proc_control_node_B.deltaSign < 3;
         proc_control_node_B.deltaSign++) {
      for (proc_control_node_B.lspbSegIndices_size_idx_1 = 0;
           proc_control_node_B.lspbSegIndices_size_idx_1 <
           proc_control_node_B.loop_ub_n;
           proc_control_node_B.lspbSegIndices_size_idx_1++) {
        proc_control_node_B.coeffMat
          [(proc_control_node_B.s_data[proc_control_node_B.lspbSegIndices_size_idx_1]
            + 9 * proc_control_node_B.deltaSign) - 1] =
          proc_control_node_B.coefs[proc_control_node_B.lspbSegIndices_size_idx_1
          + s[0] * proc_control_node_B.deltaSign];
      }
    }

    proc_control_node_B.ndbl =
      proc_control_node_B.breakMat[proc_control_node_B.b_i_b];
    proc_control_node_B.apnd =
      proc_control_node_B.breakMat[proc_control_node_B.b_i_b];
    proc_control_node_B.breakMat[proc_control_node_B.b_i_b + 3] =
      proc_control_node_B.indivPolyDim +
      proc_control_node_B.breakMat[proc_control_node_B.b_i_b];
    proc_control_node_B.breakMat[proc_control_node_B.b_i_b + 6] =
      (proc_control_node_B.numComputedPolynomials -
       proc_control_node_B.indivPolyDim) + proc_control_node_B.ndbl;
    proc_control_node_B.breakMat[proc_control_node_B.b_i_b + 9] =
      proc_control_node_B.numComputedPolynomials + proc_control_node_B.apnd;
  }

  hasMultipleBreaks = proc_checkPolyForMultipleBreaks
    (proc_control_node_B.breakMat);
  proc_c_processPolynomialResults(proc_control_node_B.breakMat,
    proc_control_node_B.coeffMat, hasMultipleBreaks,
    proc_control_node_B.breaksCell, proc_control_node_B.coeffsCell);
  proc_control_node_B.varargin_1_h[0] = proc_control_node_B.parameterMat[15];
  proc_control_node_B.varargin_1_h[1] = proc_control_node_B.parameterMat[16];
  proc_control_node_B.varargin_1_h[2] = proc_control_node_B.parameterMat[17];
  t[1] = proc_control_node_maximum_b4(proc_control_node_B.varargin_1_h);
  t[0] = 0.0;
  if (hasMultipleBreaks) {
    proc_control_node_B.numComputedPolynomials = 3.0;
    proc_control_node_B.indivPolyDim = 1.0;
  } else {
    proc_control_node_B.numComputedPolynomials = 1.0;
    proc_control_node_B.indivPolyDim = 3.0;
  }

  proc_control_node_B.deltaSign = static_cast<int32_T>
    (proc_control_node_B.numComputedPolynomials);
  proc_control_node_B.b_i_b = proc_control_node_B.deltaSign - 1;
  *ppCell_size = proc_control_node_B.deltaSign;
  for (proc_control_node_B.g_data_tmp = 0; proc_control_node_B.g_data_tmp <=
       proc_control_node_B.b_i_b; proc_control_node_B.g_data_tmp++) {
    if (hasMultipleBreaks) {
      rowSelection_data[0] = static_cast<int8_T>(proc_control_node_B.g_data_tmp
        + 1);
      proc_control_node_B.numComputedPolynomials = static_cast<real_T>
        (proc_control_node_B.g_data_tmp) + 1.0;
    } else {
      rowSelection_data[0] = 1;
      rowSelection_data[1] = 2;
      rowSelection_data[2] = 3;
      proc_control_node_B.numComputedPolynomials = 1.0;
    }

    p_generateTrajectoriesFromCoefs(proc_control_node_B.breaksCell
      [static_cast<int32_T>(proc_control_node_B.numComputedPolynomials) - 1].
      f1.data, proc_control_node_B.breaksCell[static_cast<int32_T>
      (proc_control_node_B.numComputedPolynomials) - 1].f1.size,
      proc_control_node_B.coeffsCell[static_cast<int32_T>
      (proc_control_node_B.numComputedPolynomials) - 1].f1.data,
      proc_control_node_B.coeffsCell[static_cast<int32_T>
      (proc_control_node_B.numComputedPolynomials) - 1].f1.size,
      proc_control_node_B.indivPolyDim, t, proc_control_node_B.b_data_c2,
      proc_control_node_B.b_size, proc_control_node_B.c_data_a0,
      proc_control_node_B.c_size_c, proc_control_node_B.d_data_l,
      proc_control_node_B.d_size, ppCell_data[proc_control_node_B.g_data_tmp].
      breaks.data, ppCell_data[proc_control_node_B.g_data_tmp].breaks.size,
      ppCell_data[proc_control_node_B.g_data_tmp].coefs.data,
      ppCell_data[proc_control_node_B.g_data_tmp].coefs.size);
    proc_control_node_B.loop_ub_n = proc_control_node_B.b_size[0];
    proc_control_node_B.loop_ub_ms = proc_control_node_B.c_size_c[0];
    proc_control_node_B.loop_ub_mr = proc_control_node_B.d_size[0];
    for (proc_control_node_B.deltaSign = 0; proc_control_node_B.deltaSign < 2;
         proc_control_node_B.deltaSign++) {
      for (proc_control_node_B.lspbSegIndices_size_idx_1 = 0;
           proc_control_node_B.lspbSegIndices_size_idx_1 <
           proc_control_node_B.loop_ub_n;
           proc_control_node_B.lspbSegIndices_size_idx_1++) {
        q[(rowSelection_data[proc_control_node_B.lspbSegIndices_size_idx_1] + 3 *
           proc_control_node_B.deltaSign) - 1] =
          proc_control_node_B.b_data_c2[proc_control_node_B.lspbSegIndices_size_idx_1
          + proc_control_node_B.b_size[0] * proc_control_node_B.deltaSign];
      }

      for (proc_control_node_B.lspbSegIndices_size_idx_1 = 0;
           proc_control_node_B.lspbSegIndices_size_idx_1 <
           proc_control_node_B.loop_ub_ms;
           proc_control_node_B.lspbSegIndices_size_idx_1++) {
        qd[(rowSelection_data[proc_control_node_B.lspbSegIndices_size_idx_1] + 3
            * proc_control_node_B.deltaSign) - 1] =
          proc_control_node_B.c_data_a0[proc_control_node_B.lspbSegIndices_size_idx_1
          + proc_control_node_B.c_size_c[0] * proc_control_node_B.deltaSign];
      }

      for (proc_control_node_B.lspbSegIndices_size_idx_1 = 0;
           proc_control_node_B.lspbSegIndices_size_idx_1 <
           proc_control_node_B.loop_ub_mr;
           proc_control_node_B.lspbSegIndices_size_idx_1++) {
        qdd[(rowSelection_data[proc_control_node_B.lspbSegIndices_size_idx_1] +
             3 * proc_control_node_B.deltaSign) - 1] =
          proc_control_node_B.d_data_l[proc_control_node_B.lspbSegIndices_size_idx_1
          + proc_control_node_B.d_size[0] * proc_control_node_B.deltaSign];
      }
    }
  }
}

void proc_control_nodeModelClass::TrapVelTrajSys_extract1DimFromP(const real_T
  pp_breaks_data[], const int32_T pp_breaks_size[2], const real_T pp_coefs_data[],
  const int32_T pp_coefs_size[3], real_T breaks_data[], int32_T breaks_size[2],
  real_T oneDimCoeffs_data[], int32_T oneDimCoeffs_size[2])
{
  int32_T b_itilerow;
  int32_T b_size_idx_0;
  int32_T ibcol;
  int32_T ntilerows;
  int8_T pp_coefs[2];
  breaks_size[0] = 1;
  breaks_size[1] = pp_breaks_size[1];
  ntilerows = pp_breaks_size[1];
  if (0 <= ntilerows - 1) {
    memcpy(&breaks_data[0], &pp_breaks_data[0], ntilerows * sizeof(real_T));
  }

  ntilerows = pp_breaks_size[1] - 2;
  for (b_itilerow = 0; b_itilerow <= ntilerows; b_itilerow++) {
    ibcol = b_itilerow * 3 - 1;
    proc_control_node_B.coeffIndex_data_j[ibcol + 1] = true;
    proc_control_node_B.coeffIndex_data_j[ibcol + 2] = false;
    proc_control_node_B.coeffIndex_data_j[ibcol + 3] = false;
  }

  ntilerows = (pp_breaks_size[1] - 1) * 3 - 1;
  b_itilerow = 0;
  for (ibcol = 0; ibcol <= ntilerows; ibcol++) {
    if (proc_control_node_B.coeffIndex_data_j[ibcol]) {
      b_itilerow++;
    }
  }

  b_size_idx_0 = b_itilerow;
  b_itilerow = 0;
  for (ibcol = 0; ibcol <= ntilerows; ibcol++) {
    if (proc_control_node_B.coeffIndex_data_j[ibcol]) {
      proc_control_node_B.b_data_a[b_itilerow] = static_cast<int8_T>(ibcol + 1);
      b_itilerow++;
    }
  }

  pp_coefs[0] = static_cast<int8_T>(pp_coefs_size[0] * pp_coefs_size[1] * 3 / 3);
  pp_coefs[1] = 3;
  oneDimCoeffs_size[0] = b_size_idx_0;
  oneDimCoeffs_size[1] = 3;
  for (b_itilerow = 0; b_itilerow < 3; b_itilerow++) {
    for (ibcol = 0; ibcol < b_size_idx_0; ibcol++) {
      oneDimCoeffs_data[ibcol + b_size_idx_0 * b_itilerow] = pp_coefs_data
        [(proc_control_node_B.b_data_a[ibcol] + pp_coefs[0] * b_itilerow) - 1];
    }
  }
}

void proc_control_nodeModelClass::TrapVelTrajSys_generate1DTrajec(const real_T
  breaks_data[], const int32_T breaks_size[2], const real_T coefs_data[], const
  int32_T coefs_size[2], real_T t, real_T q_data[], int32_T *q_size, real_T
  qd_data[], int32_T *qd_size, real_T qdd_data[], int32_T *qdd_size)
{
  int32_T dCoefs_size_idx_0;
  int32_T loop_ub;
  int32_T qd_data_tmp;
  dCoefs_size_idx_0 = coefs_size[0];
  loop_ub = coefs_size[0] * 3 - 1;
  if (0 <= loop_ub) {
    memset(&proc_control_node_B.dCoefs_data[0], 0, (loop_ub + 1) * sizeof(real_T));
  }

  loop_ub = coefs_size[0];
  for (proc_control_node_B.ip_k = 0; proc_control_node_B.ip_k < 2;
       proc_control_node_B.ip_k++) {
    for (qd_data_tmp = 0; qd_data_tmp < loop_ub; qd_data_tmp++) {
      proc_control_node_B.dCoefs_data[qd_data_tmp + dCoefs_size_idx_0 *
        (proc_control_node_B.ip_k + 1)] = coefs_data[qd_data_tmp + coefs_size[0]
        * proc_control_node_B.ip_k] * static_cast<real_T>(2 -
        proc_control_node_B.ip_k);
    }
  }

  loop_ub = coefs_size[0] * 3 - 1;
  if (0 <= loop_ub) {
    memset(&proc_control_node_B.ddCoefs_data[0], 0, (loop_ub + 1) * sizeof
           (real_T));
  }

  for (proc_control_node_B.ip_k = 0; proc_control_node_B.ip_k < 2;
       proc_control_node_B.ip_k++) {
    for (qd_data_tmp = 0; qd_data_tmp < dCoefs_size_idx_0; qd_data_tmp++) {
      proc_control_node_B.ddCoefs_data[qd_data_tmp + dCoefs_size_idx_0 *
        (proc_control_node_B.ip_k + 1)] =
        proc_control_node_B.dCoefs_data[qd_data_tmp + dCoefs_size_idx_0 *
        proc_control_node_B.ip_k] * static_cast<real_T>(2 -
        proc_control_node_B.ip_k);
    }
  }

  *q_size = 1;
  *qd_size = 1;
  if (rtIsNaN(t)) {
    q_data[0] = t;
  } else {
    proc_control_node_B.breaks_size_c[0] = 1;
    proc_control_node_B.breaks_size_c[1] = breaks_size[1];
    loop_ub = breaks_size[1];
    if (0 <= loop_ub - 1) {
      memcpy(&proc_control_node_B.breaks_data_j[0], &breaks_data[0], loop_ub *
             sizeof(real_T));
    }

    proc_control_node_B.ip_k = proc_control_node_bsearch
      (proc_control_node_B.breaks_data_j, proc_control_node_B.breaks_size_c, t)
      - 1;
    proc_control_node_B.xloc_h = t - breaks_data[proc_control_node_B.ip_k];
    q_data[0] = (coefs_data[proc_control_node_B.ip_k] *
                 proc_control_node_B.xloc_h + coefs_data
                 [(proc_control_node_B.ip_k + breaks_size[1]) - 1]) *
      proc_control_node_B.xloc_h + coefs_data[((breaks_size[1] - 1) << 1) +
      proc_control_node_B.ip_k];
  }

  *qdd_size = 1;
  if (rtIsNaN(t)) {
    qd_data[0] = t;
    qdd_data[0] = t;
  } else {
    proc_control_node_B.breaks_size_c[0] = 1;
    proc_control_node_B.breaks_size_c[1] = breaks_size[1];
    loop_ub = breaks_size[1];
    if (0 <= loop_ub - 1) {
      memcpy(&proc_control_node_B.breaks_data_j[0], &breaks_data[0], loop_ub *
             sizeof(real_T));
    }

    proc_control_node_B.ip_k = proc_control_node_bsearch
      (proc_control_node_B.breaks_data_j, proc_control_node_B.breaks_size_c, t)
      - 1;
    proc_control_node_B.xloc_h = t - breaks_data[proc_control_node_B.ip_k];
    qd_data_tmp = (breaks_size[1] - 1) << 1;
    qd_data[0] = (proc_control_node_B.dCoefs_data[proc_control_node_B.ip_k] *
                  proc_control_node_B.xloc_h + proc_control_node_B.dCoefs_data
                  [(proc_control_node_B.ip_k + breaks_size[1]) - 1]) *
      proc_control_node_B.xloc_h + proc_control_node_B.dCoefs_data[qd_data_tmp +
      proc_control_node_B.ip_k];
    proc_control_node_B.breaks_size_c[0] = 1;
    proc_control_node_B.breaks_size_c[1] = breaks_size[1];
    loop_ub = breaks_size[1];
    if (0 <= loop_ub - 1) {
      memcpy(&proc_control_node_B.breaks_data_j[0], &breaks_data[0], loop_ub *
             sizeof(real_T));
    }

    proc_control_node_B.ip_k = proc_control_node_bsearch
      (proc_control_node_B.breaks_data_j, proc_control_node_B.breaks_size_c, t)
      - 1;
    proc_control_node_B.xloc_h = t - breaks_data[proc_control_node_B.ip_k];
    qdd_data[0] = (proc_control_node_B.ddCoefs_data[proc_control_node_B.ip_k] *
                   proc_control_node_B.xloc_h +
                   proc_control_node_B.ddCoefs_data[(proc_control_node_B.ip_k +
      breaks_size[1]) - 1]) * proc_control_node_B.xloc_h +
      proc_control_node_B.ddCoefs_data[qd_data_tmp + proc_control_node_B.ip_k];
  }
}

void proc_control_nodeModelClass::TrapVelTrajSys_extract1DimFro_b(const real_T
  pp_breaks_data[], const int32_T pp_breaks_size[2], const real_T pp_coefs_data[],
  const int32_T pp_coefs_size[3], real_T breaks_data[], int32_T breaks_size[2],
  real_T oneDimCoeffs_data[], int32_T oneDimCoeffs_size[2])
{
  int32_T b_itilerow;
  int32_T b_size_idx_0;
  int32_T ibcol;
  int32_T ntilerows;
  int8_T pp_coefs[2];
  breaks_size[0] = 1;
  breaks_size[1] = pp_breaks_size[1];
  ntilerows = pp_breaks_size[1];
  if (0 <= ntilerows - 1) {
    memcpy(&breaks_data[0], &pp_breaks_data[0], ntilerows * sizeof(real_T));
  }

  ntilerows = pp_breaks_size[1] - 2;
  for (b_itilerow = 0; b_itilerow <= ntilerows; b_itilerow++) {
    ibcol = b_itilerow * 3 - 1;
    proc_control_node_B.coeffIndex_data_d[ibcol + 1] = false;
    proc_control_node_B.coeffIndex_data_d[ibcol + 2] = true;
    proc_control_node_B.coeffIndex_data_d[ibcol + 3] = false;
  }

  ntilerows = (pp_breaks_size[1] - 1) * 3 - 1;
  b_itilerow = 0;
  for (ibcol = 0; ibcol <= ntilerows; ibcol++) {
    if (proc_control_node_B.coeffIndex_data_d[ibcol]) {
      b_itilerow++;
    }
  }

  b_size_idx_0 = b_itilerow;
  b_itilerow = 0;
  for (ibcol = 0; ibcol <= ntilerows; ibcol++) {
    if (proc_control_node_B.coeffIndex_data_d[ibcol]) {
      proc_control_node_B.b_data_n[b_itilerow] = static_cast<int8_T>(ibcol + 1);
      b_itilerow++;
    }
  }

  pp_coefs[0] = static_cast<int8_T>(pp_coefs_size[0] * pp_coefs_size[1] * 3 / 3);
  pp_coefs[1] = 3;
  oneDimCoeffs_size[0] = b_size_idx_0;
  oneDimCoeffs_size[1] = 3;
  for (b_itilerow = 0; b_itilerow < 3; b_itilerow++) {
    for (ibcol = 0; ibcol < b_size_idx_0; ibcol++) {
      oneDimCoeffs_data[ibcol + b_size_idx_0 * b_itilerow] = pp_coefs_data
        [(proc_control_node_B.b_data_n[ibcol] + pp_coefs[0] * b_itilerow) - 1];
    }
  }
}

void proc_control_nodeModelClass::TrapVelTrajSys_extract1DimFr_b4(const real_T
  pp_breaks_data[], const int32_T pp_breaks_size[2], const real_T pp_coefs_data[],
  const int32_T pp_coefs_size[3], real_T breaks_data[], int32_T breaks_size[2],
  real_T oneDimCoeffs_data[], int32_T oneDimCoeffs_size[2])
{
  int32_T b_itilerow;
  int32_T b_size_idx_0;
  int32_T ibcol;
  int32_T ntilerows;
  int8_T pp_coefs[2];
  breaks_size[0] = 1;
  breaks_size[1] = pp_breaks_size[1];
  ntilerows = pp_breaks_size[1];
  if (0 <= ntilerows - 1) {
    memcpy(&breaks_data[0], &pp_breaks_data[0], ntilerows * sizeof(real_T));
  }

  ntilerows = pp_breaks_size[1] - 2;
  for (b_itilerow = 0; b_itilerow <= ntilerows; b_itilerow++) {
    ibcol = b_itilerow * 3 - 1;
    proc_control_node_B.coeffIndex_data[ibcol + 1] = false;
    proc_control_node_B.coeffIndex_data[ibcol + 2] = false;
    proc_control_node_B.coeffIndex_data[ibcol + 3] = true;
  }

  ntilerows = (pp_breaks_size[1] - 1) * 3 - 1;
  b_itilerow = 0;
  for (ibcol = 0; ibcol <= ntilerows; ibcol++) {
    if (proc_control_node_B.coeffIndex_data[ibcol]) {
      b_itilerow++;
    }
  }

  b_size_idx_0 = b_itilerow;
  b_itilerow = 0;
  for (ibcol = 0; ibcol <= ntilerows; ibcol++) {
    if (proc_control_node_B.coeffIndex_data[ibcol]) {
      proc_control_node_B.b_data_kb[b_itilerow] = static_cast<int8_T>(ibcol + 1);
      b_itilerow++;
    }
  }

  pp_coefs[0] = static_cast<int8_T>(pp_coefs_size[0] * pp_coefs_size[1] * 3 / 3);
  pp_coefs[1] = 3;
  oneDimCoeffs_size[0] = b_size_idx_0;
  oneDimCoeffs_size[1] = 3;
  for (b_itilerow = 0; b_itilerow < 3; b_itilerow++) {
    for (ibcol = 0; ibcol < b_size_idx_0; ibcol++) {
      oneDimCoeffs_data[ibcol + b_size_idx_0 * b_itilerow] = pp_coefs_data
        [(proc_control_node_B.b_data_kb[ibcol] + pp_coefs[0] * b_itilerow) - 1];
    }
  }
}

void proc_control_nodeModelClass::proc_co_TrapVelTrajSys_stepImpl(real_T b_time,
  const real_T varargin_1[6], real_T varargin_2, real_T varargin_3, real_T q[3],
  real_T qd[3], real_T qdd[3])
{
  proc_control_node_trapveltraj(varargin_1, varargin_2, varargin_3,
    proc_control_node_B.a__17, proc_control_node_B.a__18,
    proc_control_node_B.a__19, proc_control_node_B.a__20,
    proc_control_node_B.trajPP.data, &proc_control_node_B.trajPP.size);
  if (proc_control_node_B.trajPP.size > 1) {
    proc_control_node_B.breaks_size[0] = 1;
    proc_control_node_B.breaks_size[1] = proc_control_node_B.trajPP.data[0].
      breaks.size[1];
    proc_control_node_B.loop_ub_i = proc_control_node_B.trajPP.data[0].
      breaks.size[1];
    for (proc_control_node_B.i37 = 0; proc_control_node_B.i37 <
         proc_control_node_B.loop_ub_i; proc_control_node_B.i37++) {
      proc_control_node_B.breaks_data_tmp = proc_control_node_B.i37;
      proc_control_node_B.breaks_data[proc_control_node_B.breaks_data_tmp] =
        proc_control_node_B.trajPP.data[0]
        .breaks.data[proc_control_node_B.breaks_data_tmp];
    }

    proc_control_node_B.loop_ub_i = proc_control_node_B.trajPP.data[0].
      coefs.size[0] * proc_control_node_B.trajPP.data[0].coefs.size[1] * 3 / 3;
    proc_control_node_B.oneDimCoeffs_size[0] = proc_control_node_B.loop_ub_i;
    proc_control_node_B.loop_ub_i *= 3;
    for (proc_control_node_B.i37 = 0; proc_control_node_B.i37 <
         proc_control_node_B.loop_ub_i; proc_control_node_B.i37++) {
      proc_control_node_B.oneDimCoeffs_data[proc_control_node_B.i37] =
        proc_control_node_B.trajPP.data[0].coefs.data[proc_control_node_B.i37];
    }
  } else {
    TrapVelTrajSys_extract1DimFromP(proc_control_node_B.trajPP.data[0].
      breaks.data, proc_control_node_B.trajPP.data[0].breaks.size,
      proc_control_node_B.trajPP.data[0].coefs.data,
      proc_control_node_B.trajPP.data[0].coefs.size,
      proc_control_node_B.breaks_data, proc_control_node_B.breaks_size,
      proc_control_node_B.oneDimCoeffs_data,
      proc_control_node_B.oneDimCoeffs_size);
  }

  proc_control_node_B.evalCoeffs_size[0] =
    proc_control_node_B.oneDimCoeffs_size[0];
  proc_control_node_B.evalCoeffs_size[1] = 3;
  proc_control_node_B.loop_ub_i = proc_control_node_B.oneDimCoeffs_size[0] * 3 -
    1;
  if (0 <= proc_control_node_B.loop_ub_i) {
    memset(&proc_control_node_B.evalCoeffs_data[0], 0,
           (proc_control_node_B.loop_ub_i + 1) * sizeof(real_T));
  }

  proc_control_node_B.loop_ub_i = proc_control_node_B.oneDimCoeffs_size[0];
  for (proc_control_node_B.i37 = 0; proc_control_node_B.i37 < 3;
       proc_control_node_B.i37++) {
    for (proc_control_node_B.breaks_data_tmp = 0;
         proc_control_node_B.breaks_data_tmp < proc_control_node_B.loop_ub_i;
         proc_control_node_B.breaks_data_tmp++) {
      proc_control_node_B.evalCoeffs_data[proc_control_node_B.breaks_data_tmp +
        proc_control_node_B.evalCoeffs_size[0] * proc_control_node_B.i37] =
        proc_control_node_B.oneDimCoeffs_data[proc_control_node_B.breaks_data_tmp
        + proc_control_node_B.oneDimCoeffs_size[0] * proc_control_node_B.i37];
    }
  }

  TrapVelTrajSys_generate1DTrajec(proc_control_node_B.breaks_data,
    proc_control_node_B.breaks_size, proc_control_node_B.evalCoeffs_data,
    proc_control_node_B.evalCoeffs_size, b_time, &proc_control_node_B.d_data_k,
    &proc_control_node_B.d_size_n, &proc_control_node_B.c_data_d,
    &proc_control_node_B.c_size_cr, &proc_control_node_B.b_data_ch,
    &proc_control_node_B.b_size_k);
  if (proc_control_node_B.trajPP.size > 1) {
    proc_control_node_B.breaks_size[0] = 1;
    proc_control_node_B.breaks_size[1] = proc_control_node_B.trajPP.data[1].
      breaks.size[1];
    proc_control_node_B.loop_ub_i = proc_control_node_B.trajPP.data[1].
      breaks.size[1];
    for (proc_control_node_B.i37 = 0; proc_control_node_B.i37 <
         proc_control_node_B.loop_ub_i; proc_control_node_B.i37++) {
      proc_control_node_B.breaks_data_tmp = proc_control_node_B.i37;
      proc_control_node_B.breaks_data[proc_control_node_B.breaks_data_tmp] =
        proc_control_node_B.trajPP.data[1]
        .breaks.data[proc_control_node_B.breaks_data_tmp];
    }

    proc_control_node_B.loop_ub_i = proc_control_node_B.trajPP.data[1].
      coefs.size[0] * proc_control_node_B.trajPP.data[1].coefs.size[1] * 3 / 3;
    proc_control_node_B.oneDimCoeffs_size[0] = proc_control_node_B.loop_ub_i;
    proc_control_node_B.loop_ub_i *= 3;
    for (proc_control_node_B.i37 = 0; proc_control_node_B.i37 <
         proc_control_node_B.loop_ub_i; proc_control_node_B.i37++) {
      proc_control_node_B.oneDimCoeffs_data[proc_control_node_B.i37] =
        proc_control_node_B.trajPP.data[1].coefs.data[proc_control_node_B.i37];
    }
  } else {
    TrapVelTrajSys_extract1DimFro_b(proc_control_node_B.trajPP.data[0].
      breaks.data, proc_control_node_B.trajPP.data[0].breaks.size,
      proc_control_node_B.trajPP.data[0].coefs.data,
      proc_control_node_B.trajPP.data[0].coefs.size,
      proc_control_node_B.breaks_data, proc_control_node_B.breaks_size,
      proc_control_node_B.oneDimCoeffs_data,
      proc_control_node_B.oneDimCoeffs_size);
  }

  proc_control_node_B.evalCoeffs_size[0] =
    proc_control_node_B.oneDimCoeffs_size[0];
  proc_control_node_B.evalCoeffs_size[1] = 3;
  proc_control_node_B.loop_ub_i = proc_control_node_B.oneDimCoeffs_size[0] * 3 -
    1;
  if (0 <= proc_control_node_B.loop_ub_i) {
    memset(&proc_control_node_B.evalCoeffs_data[0], 0,
           (proc_control_node_B.loop_ub_i + 1) * sizeof(real_T));
  }

  proc_control_node_B.loop_ub_i = proc_control_node_B.oneDimCoeffs_size[0];
  for (proc_control_node_B.i37 = 0; proc_control_node_B.i37 < 3;
       proc_control_node_B.i37++) {
    for (proc_control_node_B.breaks_data_tmp = 0;
         proc_control_node_B.breaks_data_tmp < proc_control_node_B.loop_ub_i;
         proc_control_node_B.breaks_data_tmp++) {
      proc_control_node_B.evalCoeffs_data[proc_control_node_B.breaks_data_tmp +
        proc_control_node_B.evalCoeffs_size[0] * proc_control_node_B.i37] =
        proc_control_node_B.oneDimCoeffs_data[proc_control_node_B.breaks_data_tmp
        + proc_control_node_B.oneDimCoeffs_size[0] * proc_control_node_B.i37];
    }
  }

  TrapVelTrajSys_generate1DTrajec(proc_control_node_B.breaks_data,
    proc_control_node_B.breaks_size, proc_control_node_B.evalCoeffs_data,
    proc_control_node_B.evalCoeffs_size, b_time, &proc_control_node_B.j_data,
    &proc_control_node_B.d_size_n, &proc_control_node_B.i_data,
    &proc_control_node_B.c_size_cr, &proc_control_node_B.h_data,
    &proc_control_node_B.b_size_k);
  if (proc_control_node_B.trajPP.size > 1) {
    proc_control_node_B.breaks_size[0] = 1;
    proc_control_node_B.breaks_size[1] = proc_control_node_B.trajPP.data[2].
      breaks.size[1];
    proc_control_node_B.loop_ub_i = proc_control_node_B.trajPP.data[2].
      breaks.size[1];
    for (proc_control_node_B.i37 = 0; proc_control_node_B.i37 <
         proc_control_node_B.loop_ub_i; proc_control_node_B.i37++) {
      proc_control_node_B.breaks_data_tmp = proc_control_node_B.i37;
      proc_control_node_B.breaks_data[proc_control_node_B.breaks_data_tmp] =
        proc_control_node_B.trajPP.data[2]
        .breaks.data[proc_control_node_B.breaks_data_tmp];
    }

    proc_control_node_B.loop_ub_i = proc_control_node_B.trajPP.data[2].
      coefs.size[0] * proc_control_node_B.trajPP.data[2].coefs.size[1] * 3 / 3;
    proc_control_node_B.oneDimCoeffs_size[0] = proc_control_node_B.loop_ub_i;
    proc_control_node_B.loop_ub_i *= 3;
    for (proc_control_node_B.i37 = 0; proc_control_node_B.i37 <
         proc_control_node_B.loop_ub_i; proc_control_node_B.i37++) {
      proc_control_node_B.oneDimCoeffs_data[proc_control_node_B.i37] =
        proc_control_node_B.trajPP.data[2].coefs.data[proc_control_node_B.i37];
    }
  } else {
    TrapVelTrajSys_extract1DimFr_b4(proc_control_node_B.trajPP.data[0].
      breaks.data, proc_control_node_B.trajPP.data[0].breaks.size,
      proc_control_node_B.trajPP.data[0].coefs.data,
      proc_control_node_B.trajPP.data[0].coefs.size,
      proc_control_node_B.breaks_data, proc_control_node_B.breaks_size,
      proc_control_node_B.oneDimCoeffs_data,
      proc_control_node_B.oneDimCoeffs_size);
  }

  proc_control_node_B.evalCoeffs_size[0] =
    proc_control_node_B.oneDimCoeffs_size[0];
  proc_control_node_B.evalCoeffs_size[1] = 3;
  proc_control_node_B.loop_ub_i = proc_control_node_B.oneDimCoeffs_size[0] * 3 -
    1;
  if (0 <= proc_control_node_B.loop_ub_i) {
    memset(&proc_control_node_B.evalCoeffs_data[0], 0,
           (proc_control_node_B.loop_ub_i + 1) * sizeof(real_T));
  }

  proc_control_node_B.loop_ub_i = proc_control_node_B.oneDimCoeffs_size[0];
  for (proc_control_node_B.i37 = 0; proc_control_node_B.i37 < 3;
       proc_control_node_B.i37++) {
    for (proc_control_node_B.breaks_data_tmp = 0;
         proc_control_node_B.breaks_data_tmp < proc_control_node_B.loop_ub_i;
         proc_control_node_B.breaks_data_tmp++) {
      proc_control_node_B.evalCoeffs_data[proc_control_node_B.breaks_data_tmp +
        proc_control_node_B.evalCoeffs_size[0] * proc_control_node_B.i37] =
        proc_control_node_B.oneDimCoeffs_data[proc_control_node_B.breaks_data_tmp
        + proc_control_node_B.oneDimCoeffs_size[0] * proc_control_node_B.i37];
    }
  }

  TrapVelTrajSys_generate1DTrajec(proc_control_node_B.breaks_data,
    proc_control_node_B.breaks_size, proc_control_node_B.evalCoeffs_data,
    proc_control_node_B.evalCoeffs_size, b_time, &proc_control_node_B.p_data,
    &proc_control_node_B.d_size_n, &proc_control_node_B.o_data,
    &proc_control_node_B.c_size_cr, &proc_control_node_B.n_data,
    &proc_control_node_B.b_size_k);
  q[0] = proc_control_node_B.d_data_k;
  q[1] = proc_control_node_B.j_data;
  q[2] = proc_control_node_B.p_data;
  qd[0] = proc_control_node_B.c_data_d;
  qd[1] = proc_control_node_B.i_data;
  qd[2] = proc_control_node_B.o_data;
  qdd[0] = proc_control_node_B.b_data_ch;
  qdd[1] = proc_control_node_B.h_data;
  qdd[2] = proc_control_node_B.n_data;
}

void proc_control_nodeModelClass::proc_contr_quaternionBase_slerp(real_T q1_a,
  real_T q1_b, real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T q2_c,
  real_T q2_d, real_T t, real_T *qo_a, real_T *qo_b, real_T *qo_c, real_T *qo_d)
{
  real_T b_x;
  real_T n;
  real_T theta0;
  n = sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) + q1_d * q1_d);
  proc_control_node_B.q1n_a = q1_a / n;
  proc_control_node_B.q1n_b = q1_b / n;
  proc_control_node_B.q1n_c = q1_c / n;
  proc_control_node_B.q1n_d = q1_d / n;
  n = sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) + q2_d * q2_d);
  proc_control_node_B.q2n_a = q2_a / n;
  proc_control_node_B.q2n_b_g = q2_b / n;
  proc_control_node_B.q2n_c_i = q2_c / n;
  n = q2_d / n;
  proc_control_node_B.dp_b = ((proc_control_node_B.q1n_a *
    proc_control_node_B.q2n_a + proc_control_node_B.q1n_b *
    proc_control_node_B.q2n_b_g) + proc_control_node_B.q1n_c *
    proc_control_node_B.q2n_c_i) + proc_control_node_B.q1n_d * n;
  if (proc_control_node_B.dp_b < 0.0) {
    proc_control_node_B.q2n_a = -proc_control_node_B.q2n_a;
    proc_control_node_B.q2n_b_g = -proc_control_node_B.q2n_b_g;
    proc_control_node_B.q2n_c_i = -proc_control_node_B.q2n_c_i;
    n = -n;
    proc_control_node_B.dp_b = -proc_control_node_B.dp_b;
  }

  if (proc_control_node_B.dp_b > 1.0) {
    proc_control_node_B.dp_b = 1.0;
  }

  theta0 = acos(proc_control_node_B.dp_b);
  proc_control_node_B.dp_b = 1.0 / sin(theta0);
  b_x = sin((1.0 - t) * theta0);
  theta0 = sin(t * theta0);
  *qo_a = (b_x * proc_control_node_B.q1n_a + theta0 * proc_control_node_B.q2n_a)
    * proc_control_node_B.dp_b;
  *qo_b = (b_x * proc_control_node_B.q1n_b + theta0 *
           proc_control_node_B.q2n_b_g) * proc_control_node_B.dp_b;
  *qo_c = (b_x * proc_control_node_B.q1n_c + theta0 *
           proc_control_node_B.q2n_c_i) * proc_control_node_B.dp_b;
  *qo_d = (b_x * proc_control_node_B.q1n_d + theta0 * n) *
    proc_control_node_B.dp_b;
  if (rtIsInf(proc_control_node_B.dp_b)) {
    *qo_a = proc_control_node_B.q1n_a;
    *qo_b = proc_control_node_B.q1n_b;
    *qo_c = proc_control_node_B.q1n_c;
    *qo_d = proc_control_node_B.q1n_d;
  }

  n = sqrt(((*qo_a * *qo_a + *qo_b * *qo_b) + *qo_c * *qo_c) + *qo_d * *qo_d);
  *qo_a /= n;
  *qo_b /= n;
  *qo_c /= n;
  *qo_d /= n;
}

void proc_control_nodeModelClass::proc_control_quaternionBase_log(real_T q_a,
  real_T q_b, real_T q_c, real_T q_d, real_T *b_q_a, real_T *b_q_b, real_T
  *b_q_c, real_T *b_q_d)
{
  real_T x_data;
  int32_T b_i;
  int32_T nx;
  int32_T vscale_size_idx_1;
  proc_control_node_B.vnorm = sqrt((q_b * q_b + q_c * q_c) + q_d * q_d);
  proc_control_node_B.qnorm = sqrt(q_a * q_a + proc_control_node_B.vnorm *
    proc_control_node_B.vnorm);
  b_i = 0;
  if (proc_control_node_B.vnorm != 0.0) {
    for (nx = 0; nx < 1; nx++) {
      b_i++;
    }
  }

  vscale_size_idx_1 = b_i;
  b_i--;
  for (nx = 0; nx <= b_i; nx++) {
    proc_control_node_B.vscale_data = q_a / proc_control_node_B.qnorm;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    x_data = proc_control_node_B.vscale_data;
  }

  nx = vscale_size_idx_1 - 1;
  for (b_i = 0; b_i <= nx; b_i++) {
    x_data = acos(x_data);
  }

  if (0 <= vscale_size_idx_1 - 1) {
    proc_control_node_B.vscale_data = x_data / proc_control_node_B.vnorm;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    x_data = q_b * proc_control_node_B.vscale_data;
  }

  *b_q_d = q_b;
  if (proc_control_node_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = x_data;
    }
  }

  *b_q_b = *b_q_d;
  if (!(proc_control_node_B.vnorm != 0.0)) {
    *b_q_b = 0.0;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    x_data = q_c * proc_control_node_B.vscale_data;
  }

  *b_q_d = q_c;
  if (proc_control_node_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = x_data;
    }
  }

  *b_q_c = *b_q_d;
  if (!(proc_control_node_B.vnorm != 0.0)) {
    *b_q_c = 0.0;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    x_data = q_d * proc_control_node_B.vscale_data;
  }

  *b_q_d = q_d;
  if (proc_control_node_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = x_data;
    }
  }

  if (!(proc_control_node_B.vnorm != 0.0)) {
    *b_q_d = 0.0;
  }

  *b_q_a = log(proc_control_node_B.qnorm);
}

void proc_control_nodeModelClass::proc_control_no_SystemCore_step
  (robotics_slcore_internal_bloc_T *obj, real_T varargin_1, const real_T
   varargin_2[4], const real_T varargin_3[4], const real_T varargin_4[2], real_T
   varargout_1[4], real_T varargout_2[3], real_T varargout_3[3])
{
  if (obj->TunablePropsChanged) {
    obj->TunablePropsChanged = false;
  }

  proc_control_node_B.linearScaling = 1.0 / (varargin_4[1] - varargin_4[0]);
  proc_control_node_B.b_idx_0 = (varargin_1 - varargin_4[0]) *
    proc_control_node_B.linearScaling;
  if (varargin_1 < varargin_4[0]) {
    proc_control_node_B.b_idx_0 = 0.0;
  }

  if (varargin_1 > varargin_4[1]) {
    proc_control_node_B.b_idx_0 = 1.0;
  }

  if (varargin_1 < varargin_4[0]) {
    proc_control_node_B.linearScaling = 0.0;
  }

  proc_control_node_B.e_idx_0 = proc_control_node_B.linearScaling;
  if (varargin_1 > varargin_4[1]) {
    proc_control_node_B.e_idx_0 = 0.0;
  }

  proc_control_node_B.n_f = sqrt(((varargin_2[0] * varargin_2[0] + varargin_2[1]
    * varargin_2[1]) + varargin_2[2] * varargin_2[2]) + varargin_2[3] *
    varargin_2[3]);
  proc_control_node_B.pn_a = varargin_2[0] / proc_control_node_B.n_f;
  proc_control_node_B.pn_b = varargin_2[1] / proc_control_node_B.n_f;
  proc_control_node_B.pn_c = varargin_2[2] / proc_control_node_B.n_f;
  proc_control_node_B.pn_d = varargin_2[3] / proc_control_node_B.n_f;
  proc_control_node_B.n_f = sqrt(((varargin_3[0] * varargin_3[0] + varargin_3[1]
    * varargin_3[1]) + varargin_3[2] * varargin_3[2]) + varargin_3[3] *
    varargin_3[3]);
  proc_control_node_B.qn_a = varargin_3[0] / proc_control_node_B.n_f;
  proc_control_node_B.qn_b = varargin_3[1] / proc_control_node_B.n_f;
  proc_control_node_B.qn_c = varargin_3[2] / proc_control_node_B.n_f;
  proc_control_node_B.qn_d = varargin_3[3] / proc_control_node_B.n_f;
  proc_control_node_B.n_tmp = sqrt(((proc_control_node_B.pn_a *
    proc_control_node_B.pn_a + proc_control_node_B.pn_b *
    proc_control_node_B.pn_b) + proc_control_node_B.pn_c *
    proc_control_node_B.pn_c) + proc_control_node_B.pn_d *
    proc_control_node_B.pn_d);
  proc_control_node_B.n_tmp_c = proc_control_node_B.pn_a /
    proc_control_node_B.n_tmp;
  proc_control_node_B.q1n_b_tmp = proc_control_node_B.pn_b /
    proc_control_node_B.n_tmp;
  proc_control_node_B.q1n_c_tmp = proc_control_node_B.pn_c /
    proc_control_node_B.n_tmp;
  proc_control_node_B.q1n_d_tmp = proc_control_node_B.pn_d /
    proc_control_node_B.n_tmp;
  proc_control_node_B.n_tmp_i = sqrt(((proc_control_node_B.qn_a *
    proc_control_node_B.qn_a + proc_control_node_B.qn_b *
    proc_control_node_B.qn_b) + proc_control_node_B.qn_c *
    proc_control_node_B.qn_c) + proc_control_node_B.qn_d *
    proc_control_node_B.qn_d);
  proc_control_node_B.n_tmp = proc_control_node_B.qn_a /
    proc_control_node_B.n_tmp_i;
  proc_control_node_B.n_f = proc_control_node_B.n_tmp;
  proc_control_node_B.q2n_b_tmp = proc_control_node_B.qn_b /
    proc_control_node_B.n_tmp_i;
  proc_control_node_B.q2n_b = proc_control_node_B.q2n_b_tmp;
  proc_control_node_B.q2n_c_tmp = proc_control_node_B.qn_c /
    proc_control_node_B.n_tmp_i;
  proc_control_node_B.q2n_c = proc_control_node_B.q2n_c_tmp;
  proc_control_node_B.n_tmp_i = proc_control_node_B.qn_d /
    proc_control_node_B.n_tmp_i;
  proc_control_node_B.q2n_d = proc_control_node_B.n_tmp_i;
  proc_control_node_B.dp_tmp = ((proc_control_node_B.n_tmp_c *
    proc_control_node_B.n_tmp + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.q2n_b_tmp) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.q2n_c_tmp) + proc_control_node_B.q1n_d_tmp *
    proc_control_node_B.n_tmp_i;
  proc_control_node_B.dp = proc_control_node_B.dp_tmp;
  if (proc_control_node_B.dp_tmp < 0.0) {
    proc_control_node_B.n_f = -proc_control_node_B.n_tmp;
    proc_control_node_B.q2n_b = -proc_control_node_B.q2n_b_tmp;
    proc_control_node_B.q2n_c = -proc_control_node_B.q2n_c_tmp;
    proc_control_node_B.q2n_d = -proc_control_node_B.n_tmp_i;
    proc_control_node_B.dp = -proc_control_node_B.dp_tmp;
  }

  if (proc_control_node_B.dp > 1.0) {
    proc_control_node_B.dp = 1.0;
  }

  proc_control_node_B.theta0 = acos(proc_control_node_B.dp);
  proc_control_node_B.sinv_tmp = sin(proc_control_node_B.theta0);
  proc_control_node_B.dp = 1.0 / proc_control_node_B.sinv_tmp;
  proc_control_node_B.theta0 = sin(0.0 * proc_control_node_B.theta0);
  proc_control_node_B.linearScaling = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.n_tmp_c + proc_control_node_B.theta0 *
    proc_control_node_B.n_f) * proc_control_node_B.dp;
  proc_control_node_B.pnCorrected_b = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.q1n_b_tmp + proc_control_node_B.theta0 *
    proc_control_node_B.q2n_b) * proc_control_node_B.dp;
  proc_control_node_B.pnCorrected_c = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.q1n_c_tmp + proc_control_node_B.theta0 *
    proc_control_node_B.q2n_c) * proc_control_node_B.dp;
  proc_control_node_B.pnCorrected_d = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.q1n_d_tmp + proc_control_node_B.theta0 *
    proc_control_node_B.q2n_d) * proc_control_node_B.dp;
  if (rtIsInf(proc_control_node_B.dp)) {
    proc_control_node_B.linearScaling = proc_control_node_B.n_tmp_c;
    proc_control_node_B.pnCorrected_b = proc_control_node_B.q1n_b_tmp;
    proc_control_node_B.pnCorrected_c = proc_control_node_B.q1n_c_tmp;
    proc_control_node_B.pnCorrected_d = proc_control_node_B.q1n_d_tmp;
  }

  proc_control_node_B.n_f = sqrt(((proc_control_node_B.linearScaling *
    proc_control_node_B.linearScaling + proc_control_node_B.pnCorrected_b *
    proc_control_node_B.pnCorrected_b) + proc_control_node_B.pnCorrected_c *
    proc_control_node_B.pnCorrected_c) + proc_control_node_B.pnCorrected_d *
    proc_control_node_B.pnCorrected_d);
  proc_control_node_B.linearScaling /= proc_control_node_B.n_f;
  proc_control_node_B.pnCorrected_b /= proc_control_node_B.n_f;
  proc_control_node_B.pnCorrected_c /= proc_control_node_B.n_f;
  proc_control_node_B.pnCorrected_d /= proc_control_node_B.n_f;
  proc_control_node_B.n_f = proc_control_node_B.n_tmp;
  proc_control_node_B.q2n_b = proc_control_node_B.q2n_b_tmp;
  proc_control_node_B.q2n_c = proc_control_node_B.q2n_c_tmp;
  proc_control_node_B.q2n_d = proc_control_node_B.n_tmp_i;
  proc_control_node_B.dp = proc_control_node_B.dp_tmp;
  if (proc_control_node_B.dp_tmp < 0.0) {
    proc_control_node_B.n_f = -proc_control_node_B.n_tmp;
    proc_control_node_B.q2n_b = -proc_control_node_B.q2n_b_tmp;
    proc_control_node_B.q2n_c = -proc_control_node_B.q2n_c_tmp;
    proc_control_node_B.q2n_d = -proc_control_node_B.n_tmp_i;
    proc_control_node_B.dp = -proc_control_node_B.dp_tmp;
  }

  if (proc_control_node_B.dp > 1.0) {
    proc_control_node_B.dp = 1.0;
  }

  proc_control_node_B.theta0 = acos(proc_control_node_B.dp);
  proc_control_node_B.sinv_tmp = sin(proc_control_node_B.theta0);
  proc_control_node_B.dp = 1.0 / proc_control_node_B.sinv_tmp;
  proc_control_node_B.theta0 = sin(0.0 * proc_control_node_B.theta0);
  proc_control_node_B.n_tmp = (proc_control_node_B.theta0 *
    proc_control_node_B.n_tmp_c + proc_control_node_B.sinv_tmp *
    proc_control_node_B.n_f) * proc_control_node_B.dp;
  proc_control_node_B.n_tmp_i = (proc_control_node_B.theta0 *
    proc_control_node_B.q1n_b_tmp + proc_control_node_B.sinv_tmp *
    proc_control_node_B.q2n_b) * proc_control_node_B.dp;
  proc_control_node_B.q2n_c = (proc_control_node_B.theta0 *
    proc_control_node_B.q1n_c_tmp + proc_control_node_B.sinv_tmp *
    proc_control_node_B.q2n_c) * proc_control_node_B.dp;
  proc_control_node_B.q2n_d = (proc_control_node_B.theta0 *
    proc_control_node_B.q1n_d_tmp + proc_control_node_B.sinv_tmp *
    proc_control_node_B.q2n_d) * proc_control_node_B.dp;
  if (rtIsInf(proc_control_node_B.dp)) {
    proc_control_node_B.n_tmp = proc_control_node_B.n_tmp_c;
    proc_control_node_B.n_tmp_i = proc_control_node_B.q1n_b_tmp;
    proc_control_node_B.q2n_c = proc_control_node_B.q1n_c_tmp;
    proc_control_node_B.q2n_d = proc_control_node_B.q1n_d_tmp;
  }

  proc_control_node_B.n_f = sqrt(((proc_control_node_B.n_tmp *
    proc_control_node_B.n_tmp + proc_control_node_B.n_tmp_i *
    proc_control_node_B.n_tmp_i) + proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_c) + proc_control_node_B.q2n_d *
    proc_control_node_B.q2n_d);
  proc_control_node_B.n_tmp /= proc_control_node_B.n_f;
  proc_control_node_B.n_tmp_i /= proc_control_node_B.n_f;
  proc_control_node_B.q2n_c /= proc_control_node_B.n_f;
  proc_control_node_B.q2n_d /= proc_control_node_B.n_f;
  proc_contr_quaternionBase_slerp(proc_control_node_B.pn_a,
    proc_control_node_B.pn_b, proc_control_node_B.pn_c, proc_control_node_B.pn_d,
    proc_control_node_B.qn_a, proc_control_node_B.qn_b, proc_control_node_B.qn_c,
    proc_control_node_B.qn_d, proc_control_node_B.b_idx_0,
    &proc_control_node_B.n_f, &proc_control_node_B.n_tmp_c,
    &proc_control_node_B.q1n_b_tmp, &proc_control_node_B.q1n_c_tmp);
  proc_control_quaternionBase_log(((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp_i) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_d, ((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp_i + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_d) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_c, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_c - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_d) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp_i, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_d + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp_i) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp, &proc_control_node_B.pn_a,
    &proc_control_node_B.pn_b, &proc_control_node_B.pn_c,
    &proc_control_node_B.pn_d);
  proc_control_node_B.qn_a = (((proc_control_node_B.n_f *
    proc_control_node_B.pn_a - proc_control_node_B.n_tmp_c *
    proc_control_node_B.pn_b) - proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_c) - proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_d) * proc_control_node_B.e_idx_0 * 2.0;
  proc_control_node_B.qn_b = (((proc_control_node_B.n_f *
    proc_control_node_B.pn_b + proc_control_node_B.n_tmp_c *
    proc_control_node_B.pn_a) + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_d) - proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_c) * proc_control_node_B.e_idx_0 * 2.0;
  proc_control_node_B.qn_c = (((proc_control_node_B.n_f *
    proc_control_node_B.pn_c - proc_control_node_B.n_tmp_c *
    proc_control_node_B.pn_d) + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_a) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_b) * proc_control_node_B.e_idx_0 * 2.0;
  proc_control_node_B.pn_d = (((proc_control_node_B.n_f *
    proc_control_node_B.pn_d + proc_control_node_B.n_tmp_c *
    proc_control_node_B.pn_c) - proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_b) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_a) * proc_control_node_B.e_idx_0 * 2.0;
  proc_control_quaternionBase_log(((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp_i) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_d, ((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp_i + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_d) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_c, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_c - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_d) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp_i, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_d + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp_i) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp, &proc_control_node_B.pn_a,
    &proc_control_node_B.pn_b, &proc_control_node_B.pn_c,
    &proc_control_node_B.qn_d);
  proc_control_node_B.dp = ((proc_control_node_B.n_f * proc_control_node_B.pn_a
    - proc_control_node_B.n_tmp_c * proc_control_node_B.pn_b) -
    proc_control_node_B.q1n_b_tmp * proc_control_node_B.pn_c) -
    proc_control_node_B.q1n_c_tmp * proc_control_node_B.qn_d;
  proc_control_node_B.sinv_tmp = ((proc_control_node_B.n_f *
    proc_control_node_B.pn_b + proc_control_node_B.n_tmp_c *
    proc_control_node_B.pn_a) + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.qn_d) - proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_c;
  proc_control_node_B.q2n_b = ((proc_control_node_B.n_f *
    proc_control_node_B.pn_c - proc_control_node_B.n_tmp_c *
    proc_control_node_B.qn_d) + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_a) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_b;
  proc_control_node_B.theta0 = ((proc_control_node_B.n_f *
    proc_control_node_B.qn_d + proc_control_node_B.n_tmp_c *
    proc_control_node_B.pn_c) - proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_b) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_a;
  proc_control_quaternionBase_log(((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp_i) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_d, ((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp_i + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_d) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_c, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_c - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_d) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp_i, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_d + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp_i) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp, &proc_control_node_B.pn_a,
    &proc_control_node_B.pn_b, &proc_control_node_B.pn_c,
    &proc_control_node_B.qn_d);
  proc_control_node_B.linearScaling = (((proc_control_node_B.dp *
    proc_control_node_B.pn_a - proc_control_node_B.sinv_tmp *
    proc_control_node_B.pn_b) - proc_control_node_B.q2n_b *
    proc_control_node_B.pn_c) - proc_control_node_B.theta0 *
    proc_control_node_B.qn_d) * 0.0 * 2.0;
  proc_control_node_B.pnCorrected_b = (((proc_control_node_B.dp *
    proc_control_node_B.pn_b + proc_control_node_B.sinv_tmp *
    proc_control_node_B.pn_a) + proc_control_node_B.q2n_b *
    proc_control_node_B.qn_d) - proc_control_node_B.theta0 *
    proc_control_node_B.pn_c) * 0.0 * 2.0;
  proc_control_node_B.pnCorrected_c = (((proc_control_node_B.dp *
    proc_control_node_B.pn_c - proc_control_node_B.sinv_tmp *
    proc_control_node_B.qn_d) + proc_control_node_B.q2n_b *
    proc_control_node_B.pn_a) + proc_control_node_B.theta0 *
    proc_control_node_B.pn_b) * 0.0 * 2.0;
  proc_control_node_B.qn_d = (((proc_control_node_B.dp *
    proc_control_node_B.qn_d + proc_control_node_B.sinv_tmp *
    proc_control_node_B.pn_c) - proc_control_node_B.q2n_b *
    proc_control_node_B.pn_b) + proc_control_node_B.theta0 *
    proc_control_node_B.pn_a) * 0.0 * 2.0;
  varargout_1[0] = proc_control_node_B.n_f;
  varargout_1[1] = proc_control_node_B.n_tmp_c;
  varargout_1[2] = proc_control_node_B.q1n_b_tmp;
  varargout_1[3] = proc_control_node_B.q1n_c_tmp;
  varargout_2[0] = ((proc_control_node_B.qn_a * -proc_control_node_B.n_tmp_c +
                     proc_control_node_B.qn_b * proc_control_node_B.n_f) +
                    proc_control_node_B.qn_c * -proc_control_node_B.q1n_c_tmp) -
    proc_control_node_B.pn_d * -proc_control_node_B.q1n_b_tmp;
  varargout_2[1] = ((proc_control_node_B.qn_a * -proc_control_node_B.q1n_b_tmp -
                     proc_control_node_B.qn_b * -proc_control_node_B.q1n_c_tmp)
                    + proc_control_node_B.qn_c * proc_control_node_B.n_f) +
    proc_control_node_B.pn_d * -proc_control_node_B.n_tmp_c;
  varargout_2[2] = ((proc_control_node_B.qn_a * -proc_control_node_B.q1n_c_tmp +
                     proc_control_node_B.qn_b * -proc_control_node_B.q1n_b_tmp)
                    - proc_control_node_B.qn_c * -proc_control_node_B.n_tmp_c) +
    proc_control_node_B.pn_d * proc_control_node_B.n_f;
  varargout_3[0] = ((proc_control_node_B.linearScaling *
                     -proc_control_node_B.n_tmp_c +
                     proc_control_node_B.pnCorrected_b * proc_control_node_B.n_f)
                    + proc_control_node_B.pnCorrected_c *
                    -proc_control_node_B.q1n_c_tmp) - proc_control_node_B.qn_d *
    -proc_control_node_B.q1n_b_tmp;
  varargout_3[1] = ((proc_control_node_B.linearScaling *
                     -proc_control_node_B.q1n_b_tmp -
                     proc_control_node_B.pnCorrected_b *
                     -proc_control_node_B.q1n_c_tmp) +
                    proc_control_node_B.pnCorrected_c * proc_control_node_B.n_f)
    + proc_control_node_B.qn_d * -proc_control_node_B.n_tmp_c;
  varargout_3[2] = ((proc_control_node_B.linearScaling *
                     -proc_control_node_B.q1n_c_tmp +
                     proc_control_node_B.pnCorrected_b *
                     -proc_control_node_B.q1n_b_tmp) -
                    proc_control_node_B.pnCorrected_c *
                    -proc_control_node_B.n_tmp_c) + proc_control_node_B.qn_d *
    proc_control_node_B.n_f;
}

void proc_control_nodeModelClass::TrajectoryManager_SendCurrentPo
  (TrajectoryManager_proc_contro_T *b_this, real_T currPose[130])
{
  int32_T b_i;
  int32_T b_index;
  int32_T b_index_0;
  int32_T b_k;
  int32_T i;
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T isempty;
  boolean_T y;

  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  b_index = 2;
  isempty = false;
  b_i = 0;
  exitg1 = false;
  while ((!exitg1) && (b_i < 9)) {
    b_index = b_i + 2;
    for (i = 0; i < 13; i++) {
      proc_control_node_B.x_b[i] = (b_this->poseBuffer[(6001 * i + b_i) + 1] ==
        b_this->emptyArray[i]);
    }

    y = true;
    b_k = 0;
    exitg2 = false;
    while ((!exitg2) && (b_k < 13)) {
      if (!proc_control_node_B.x_b[b_k]) {
        y = false;
        exitg2 = true;
      } else {
        b_k++;
      }
    }

    if (y) {
      isempty = true;
      exitg1 = true;
    } else {
      b_i++;
    }
  }

  memset(&currPose[0], 0, 130U * sizeof(real_T));
  i = 0;
  b_i = 0;
  for (b_k = 0; b_k < 13; b_k++) {
    for (b_index_0 = 0; b_index_0 < b_index; b_index_0++) {
      currPose[b_index_0 + i] = b_this->poseBuffer[b_index_0 + b_i];
    }

    i += 10;
    b_i += 6001;
  }

  if (isempty) {
    b_k = 10 - b_index;
    for (b_i = 0; b_i <= b_k; b_i++) {
      b_index_0 = b_index + b_i;
      for (i = 0; i < 13; i++) {
        proc_control_node_B.currPose[i] = currPose[(b_index + 10 * i) - 2];
      }

      for (i = 0; i < 13; i++) {
        currPose[(b_index_0 + 10 * i) - 1] = proc_control_node_B.currPose[i];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  i = 0;
  for (b_i = 0; b_i < 13; b_i++) {
    proc_control_node_B.x_b[b_i] = !(b_this->poseBuffer[i + 10] ==
      b_this->emptyArray[b_i]);
    i += 6001;
  }

  y = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 13)) {
    if (!proc_control_node_B.x_b[b_k]) {
      y = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (y) {
    i = 0;
    for (b_i = 0; b_i < 13; b_i++) {
      memcpy(&proc_control_node_B.b_this[i], &b_this->poseBuffer[i + 1], 6000U *
             sizeof(real_T));
      i += 6001;
    }

    i = 0;
    for (b_i = 0; b_i < 13; b_i++) {
      proc_control_node_B.b_this[i + 6000] = b_this->emptyArray[b_i];
      i += 6001;
    }

    memcpy(&b_this->poseBuffer[0], &proc_control_node_B.b_this[0], 78013U *
           sizeof(real_T));
    b_this->bufferCount--;
    b_this->done = false;
  } else {
    b_this->done = true;
  }
}

real_T proc_control_nodeModelClass::proc_control_node_norm_b(const real_T x[3])
{
  real_T absxk;
  real_T scale;
  real_T t;
  real_T y;
  scale = 3.3121686421112381E-170;
  absxk = fabs(x[0]);
  if (absxk > 3.3121686421112381E-170) {
    y = 1.0;
    scale = absxk;
  } else {
    t = absxk / 3.3121686421112381E-170;
    y = t * t;
  }

  absxk = fabs(x[1]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  absxk = fabs(x[2]);
  if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
  } else {
    t = absxk / scale;
    y += t * t;
  }

  return scale * sqrt(y);
}

boolean_T proc_control_nodeModelClass::proc_control_node_isequal(const real_T
  varargin_1[29], const real_T varargin_2[29])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 29)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

boolean_T proc_control_nodeModelClass::proc_control_node_isequal_b(const real_T
  varargin_1[8], const real_T varargin_2[8])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 8)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_contro_znlmpc_setDecisions(const real_T
  X[130], const real_T Umv[80], real_T e, real_T z[147])
{
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  static const int8_T a[1280] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

  for (i_0 = 0; i_0 < 10; i_0++) {
    for (i = 0; i < 13; i++) {
      proc_control_node_B.X_g[i + 13 * i_0] = X[10 * i + i_0];
    }

    for (i = 0; i < 8; i++) {
      proc_control_node_B.Umv_c[i + (i_0 << 3)] = Umv[10 * i + i_0];
    }
  }

  memset(&proc_control_node_B.a_f[0], 0, sizeof(real_T) << 4U);
  i = 0;
  for (i_1 = 0; i_1 < 80; i_1++) {
    for (i_0 = 0; i_0 < 16; i_0++) {
      proc_control_node_B.a_f[i_0] += static_cast<real_T>(a[i_0 + i]) *
        proc_control_node_B.Umv_c[i_1];
    }

    i += 16;
  }

  memcpy(&z[0], &proc_control_node_B.X_g[0], 130U * sizeof(real_T));
  memcpy(&z[130], &proc_control_node_B.a_f[0], sizeof(real_T) << 4U);
  z[146] = e;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_co_structConstructorHelper(const real_T
  varargin_2[13], const real_T varargin_4[8], const real_T varargin_6[130],
  const real_T varargin_10[130], const real_T varargin_12[80], const real_T
  varargin_14[80], const real_T varargin_18[130], const real_T varargin_20[130],
  const real_T varargin_22[130], const real_T varargin_24[130], const real_T
  varargin_26[80], const real_T varargin_28[80], const real_T varargin_30[80],
  const real_T varargin_32[80], const real_T varargin_34[80],
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *s)
{
  memcpy(&s->x[0], &varargin_2[0], 13U * sizeof(real_T));
  memcpy(&s->lastMV[0], &varargin_4[0], sizeof(real_T) << 3U);
  memcpy(&s->ref[0], &varargin_6[0], 130U * sizeof(real_T));
  memcpy(&s->OutputWeights[0], &varargin_10[0], 130U * sizeof(real_T));
  memcpy(&s->MVWeights[0], &varargin_12[0], 80U * sizeof(real_T));
  memcpy(&s->MVRateWeights[0], &varargin_14[0], 80U * sizeof(real_T));
  s->ECRWeight = 100000.0;
  memcpy(&s->OutputMin[0], &varargin_18[0], 130U * sizeof(real_T));
  memcpy(&s->OutputMax[0], &varargin_20[0], 130U * sizeof(real_T));
  memcpy(&s->StateMin[0], &varargin_22[0], 130U * sizeof(real_T));
  memcpy(&s->StateMax[0], &varargin_24[0], 130U * sizeof(real_T));
  memcpy(&s->MVMin[0], &varargin_26[0], 80U * sizeof(real_T));
  memcpy(&s->MVMax[0], &varargin_28[0], 80U * sizeof(real_T));
  memcpy(&s->MVRateMin[0], &varargin_30[0], 80U * sizeof(real_T));
  memcpy(&s->MVRateMax[0], &varargin_32[0], 80U * sizeof(real_T));
  memcpy(&s->MVScaledTarget[0], &varargin_34[0], 80U * sizeof(real_T));
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_znlmpc_generateRuntimeData(const real_T
  x[13], const real_T lastMV[8], const real_T ref0[130], const real_T
  OutputWeights0[13], const real_T MVWeights0[8], const real_T MVRateWeights0[8],
  const real_T MVMin0[8], const real_T MVMax0[8], const real_T X0[13], const
  real_T MV0[8], real_T Slack0, s_qYIvDqP9yRqtt40IDZ89JG_proc_T *runtimedata,
  szeIbzRjxClbCFpzxneSihD_proc__T *userdata, real_T z0[147])
{
  int32_T MVWeights0_tmp;
  int32_T i;
  int32_T i_0;
  proc_control_node_B.i_os = 0;
  for (i = 0; i < 13; i++) {
    proc_control_node_B.X0[proc_control_node_B.i_os] = X0[i];
    proc_control_node_B.i_os += 10;
  }

  proc_control_node_B.i_os = 0;
  for (i = 0; i < 13; i++) {
    for (i_0 = 0; i_0 < 9; i_0++) {
      proc_control_node_B.X0[(i_0 + proc_control_node_B.i_os) + 1] = X0[i];
    }

    proc_control_node_B.i_os += 10;
  }

  proc_control_node_B.i_os = 0;
  for (i = 0; i < 8; i++) {
    proc_control_node_B.MV0[proc_control_node_B.i_os] = MV0[i];
    proc_control_node_B.i_os += 10;
  }

  proc_control_node_B.i_os = 0;
  for (i = 0; i < 8; i++) {
    for (i_0 = 0; i_0 < 9; i_0++) {
      proc_control_node_B.MV0[(i_0 + proc_control_node_B.i_os) + 1] = MV0[i];
    }

    proc_control_node_B.i_os += 10;
  }

  proc_contro_znlmpc_setDecisions(proc_control_node_B.X0,
    proc_control_node_B.MV0, Slack0, z0);
  userdata->Ts = 0.1;
  memcpy(&userdata->CurrentStates[0], &x[0], 13U * sizeof(real_T));
  memcpy(&userdata->LastMV[0], &lastMV[0], sizeof(real_T) << 3U);
  memcpy(&userdata->References[0], &ref0[0], 130U * sizeof(real_T));
  memset(&userdata->MVTarget[0], 0, 80U * sizeof(real_T));
  userdata->PredictionHorizon = 10.0;
  userdata->NumOfStates = 13.0;
  userdata->NumOfOutputs = 13.0;
  userdata->NumOfInputs = 8.0;
  for (proc_control_node_B.i_os = 0; proc_control_node_B.i_os < 8;
       proc_control_node_B.i_os++) {
    userdata->MVIndex[proc_control_node_B.i_os] = static_cast<real_T>
      (proc_control_node_B.i_os) + 1.0;
  }

  proc_control_node_B.i_os = 0;
  for (i = 0; i < 13; i++) {
    proc_control_node_B.X0[proc_control_node_B.i_os] = OutputWeights0[i];
    proc_control_node_B.i_os += 10;
  }

  proc_control_node_B.i_os = 0;
  for (i = 0; i < 13; i++) {
    for (i_0 = 0; i_0 < 9; i_0++) {
      proc_control_node_B.X0[(i_0 + proc_control_node_B.i_os) + 1] =
        OutputWeights0[i];
    }

    proc_control_node_B.i_os += 10;
  }

  proc_control_node_B.i_os = 0;
  for (i = 0; i < 8; i++) {
    proc_control_node_B.MV0[proc_control_node_B.i_os] = MVWeights0[i];
    proc_control_node_B.MVRateWeights0[proc_control_node_B.i_os] =
      MVRateWeights0[i];
    proc_control_node_B.i_os += 10;
  }

  proc_control_node_B.i_os = 0;
  for (i = 0; i < 8; i++) {
    for (i_0 = 0; i_0 < 9; i_0++) {
      MVWeights0_tmp = (i_0 + proc_control_node_B.i_os) + 1;
      proc_control_node_B.MV0[MVWeights0_tmp] = MVWeights0[i];
      proc_control_node_B.MVRateWeights0[MVWeights0_tmp] = MVRateWeights0[i];
    }

    proc_control_node_B.i_os += 10;
  }

  for (proc_control_node_B.i_os = 0; proc_control_node_B.i_os < 130;
       proc_control_node_B.i_os++) {
    proc_control_node_B.dv5[proc_control_node_B.i_os] = (rtMinusInf);
    proc_control_node_B.dv6[proc_control_node_B.i_os] = (rtInf);
    proc_control_node_B.dv7[proc_control_node_B.i_os] = (rtMinusInf);
    proc_control_node_B.dv8[proc_control_node_B.i_os] = (rtInf);
  }

  proc_control_node_B.i_os = 0;
  for (i = 0; i < 8; i++) {
    proc_control_node_B.MVMin0[proc_control_node_B.i_os] = MVMin0[i];
    proc_control_node_B.MVMax0[proc_control_node_B.i_os] = MVMax0[i];
    proc_control_node_B.i_os += 10;
  }

  proc_control_node_B.i_os = 0;
  for (i = 0; i < 8; i++) {
    for (i_0 = 0; i_0 < 9; i_0++) {
      MVWeights0_tmp = (i_0 + proc_control_node_B.i_os) + 1;
      proc_control_node_B.MVMin0[MVWeights0_tmp] = MVMin0[i];
      proc_control_node_B.MVMax0[MVWeights0_tmp] = MVMax0[i];
    }

    proc_control_node_B.i_os += 10;
  }

  for (proc_control_node_B.i_os = 0; proc_control_node_B.i_os < 80;
       proc_control_node_B.i_os++) {
    proc_control_node_B.dv10[proc_control_node_B.i_os] = (rtMinusInf);
    proc_control_node_B.dv11[proc_control_node_B.i_os] = (rtInf);
    proc_control_node_B.dv12[proc_control_node_B.i_os] = 0.0;
  }

  proc_co_structConstructorHelper(x, lastMV, ref0, proc_control_node_B.X0,
    proc_control_node_B.MV0, proc_control_node_B.MVRateWeights0,
    proc_control_node_B.dv5, proc_control_node_B.dv6, proc_control_node_B.dv7,
    proc_control_node_B.dv8, proc_control_node_B.MVMin0,
    proc_control_node_B.MVMax0, proc_control_node_B.dv10,
    proc_control_node_B.dv11, proc_control_node_B.dv12, runtimedata);
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control__znlmpc_getZBounds(const
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *runtimedata, real_T zLB[147], real_T zUB[147])
{
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  int32_T tmp;
  i_1 = 0;
  for (i_0 = 0; i_0 < 10; i_0++) {
    tmp = 0;
    for (i = 0; i < 13; i++) {
      proc_control_node_B.runtimedata_c[i + i_1] = runtimedata->StateMin[tmp +
        i_0];
      tmp += 10;
    }

    i_1 += 13;
  }

  memcpy(&zLB[0], &proc_control_node_B.runtimedata_c[0], 130U * sizeof(real_T));
  for (i_1 = 0; i_1 < 16; i_1++) {
    zLB[i_1 + 130] = (rtMinusInf);
  }

  zLB[146] = 0.0;
  i_1 = 0;
  for (i_0 = 0; i_0 < 10; i_0++) {
    tmp = 0;
    for (i = 0; i < 13; i++) {
      proc_control_node_B.runtimedata_c[i + i_1] = runtimedata->StateMax[tmp +
        i_0];
      tmp += 10;
    }

    i_1 += 13;
  }

  memcpy(&zUB[0], &proc_control_node_B.runtimedata_c[0], 130U * sizeof(real_T));
  for (i_1 = 0; i_1 < 16; i_1++) {
    zUB[i_1 + 130] = (rtInf);
  }

  zUB[146] = (rtInf);
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_isfinite(const real_T x[8],
  boolean_T b[8])
{
  real_T x_0;
  int32_T i;
  for (i = 0; i < 8; i++) {
    x_0 = x[i];
    b[i] = ((!rtIsInf(x_0)) && (!rtIsNaN(x_0)));
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_mtimes(const real_T A_data[],
  const int32_T A_size[2], real_T C_data[], int32_T C_size[2])
{
  int32_T b_i;
  int32_T bkj;
  int32_T i;
  int32_T j;
  int32_T tmp;
  static const int8_T b[1280] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };

  proc_control_node_B.m = A_size[0];
  C_size[0] = A_size[0];
  C_size[1] = 16;
  for (j = 0; j < 16; j++) {
    proc_control_node_B.coffset_d = j * proc_control_node_B.m;
    proc_control_node_B.boffset = j * 80;
    for (i = 0; i < proc_control_node_B.m; i++) {
      C_data[proc_control_node_B.coffset_d + i] = 0.0;
    }

    for (i = 0; i < 80; i++) {
      proc_control_node_B.aoffset_a = i * A_size[0];
      bkj = b[proc_control_node_B.boffset + i];
      for (b_i = 1; b_i - 1 < proc_control_node_B.m; b_i++) {
        tmp = (proc_control_node_B.coffset_d + b_i) - 1;
        C_data[tmp] += A_data[(proc_control_node_B.aoffset_a + b_i) - 1] *
          static_cast<real_T>(bkj);
      }
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control__znlmpc_getUBounds(const
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *runtimedata, real_T A_data[], int32_T A_size
  [2], real_T Bu_data[], int32_T *Bu_size)
{
  int32_T idx;
  boolean_T exitg1;
  memset(&proc_control_node_B.Au[0], 0, 25600U * sizeof(real_T));
  memset(&proc_control_node_B.b_Bu[0], 0, 320U * sizeof(real_T));
  memset(&proc_control_node_B.icf[0], 0, 320U * sizeof(boolean_T));
  for (idx = 0; idx < 8; idx++) {
    proc_control_node_B.ic_g[idx] = static_cast<real_T>(idx) + 1.0;
  }

  memset(&proc_control_node_B.As[0], 0, sizeof(int8_T) << 6U);
  idx = 0;
  for (proc_control_node_B.i_pa = 0; proc_control_node_B.i_pa < 8;
       proc_control_node_B.i_pa++) {
    proc_control_node_B.As[idx] = 1;
    idx += 9;
  }

  for (idx = 0; idx < 64; idx++) {
    proc_control_node_B.i_pa = proc_control_node_B.As[idx];
    proc_control_node_B.Au_tmp_n[idx] = static_cast<int8_T>
      (-proc_control_node_B.i_pa);
    proc_control_node_B.Au_tmp[idx] = static_cast<int8_T>
      (proc_control_node_B.i_pa);
  }

  for (proc_control_node_B.i_pa = 0; proc_control_node_B.i_pa < 10;
       proc_control_node_B.i_pa++) {
    for (idx = 0; idx < 8; idx++) {
      proc_control_node_B.runtimedata_j[idx] = runtimedata->MVRateMin[10 * idx +
        proc_control_node_B.i_pa];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_j,
      proc_control_node_B.bv3);
    for (idx = 0; idx < 8; idx++) {
      proc_control_node_B.icf[static_cast<int32_T>(proc_control_node_B.ic_g[idx])
        - 1] = proc_control_node_B.bv3[idx];
      proc_control_node_B.runtimedata_j[idx] = runtimedata->MVRateMax[10 * idx +
        proc_control_node_B.i_pa];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_j,
      proc_control_node_B.bv3);
    for (idx = 0; idx < 8; idx++) {
      proc_control_node_B.icf[static_cast<int32_T>(proc_control_node_B.ic_g[idx]
        + 8.0) - 1] = proc_control_node_B.bv3[idx];
      proc_control_node_B.runtimedata_j[idx] = runtimedata->MVMin[10 * idx +
        proc_control_node_B.i_pa];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_j,
      proc_control_node_B.bv3);
    for (idx = 0; idx < 8; idx++) {
      proc_control_node_B.icf[static_cast<int32_T>(proc_control_node_B.ic_g[idx]
        + 16.0) - 1] = proc_control_node_B.bv3[idx];
      proc_control_node_B.runtimedata_j[idx] = runtimedata->MVMax[10 * idx +
        proc_control_node_B.i_pa];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_j,
      proc_control_node_B.bv3);
    for (idx = 0; idx < 8; idx++) {
      proc_control_node_B.icf[static_cast<int32_T>(proc_control_node_B.ic_g[idx]
        + 24.0) - 1] = proc_control_node_B.bv3[idx];
      for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 8;
           proc_control_node_B.k_d++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_g[proc_control_node_B.k_d]) + 320 * idx) +
          2560 * proc_control_node_B.i_pa) - 1] = proc_control_node_B.Au_tmp_n
          [(idx << 3) + proc_control_node_B.k_d];
      }
    }

    for (idx = 0; idx < 8; idx++) {
      for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 8;
           proc_control_node_B.k_d++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_g[proc_control_node_B.k_d] + 8.0) + 320 * idx)
          + 2560 * proc_control_node_B.i_pa) - 1] = proc_control_node_B.Au_tmp
          [(idx << 3) + proc_control_node_B.k_d];
      }
    }

    for (idx = 0; idx < 8; idx++) {
      for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 8;
           proc_control_node_B.k_d++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_g[proc_control_node_B.k_d] + 16.0) + 320 * idx)
          + 2560 * proc_control_node_B.i_pa) - 1] =
          proc_control_node_B.Au_tmp_n[(idx << 3) + proc_control_node_B.k_d];
      }
    }

    for (idx = 0; idx < 8; idx++) {
      for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 8;
           proc_control_node_B.k_d++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_g[proc_control_node_B.k_d] + 24.0) + 320 * idx)
          + 2560 * proc_control_node_B.i_pa) - 1] = proc_control_node_B.Au_tmp
          [(idx << 3) + proc_control_node_B.k_d];
      }

      proc_control_node_B.b_Bu[static_cast<int32_T>(proc_control_node_B.ic_g[idx])
        - 1] = -runtimedata->MVRateMin[10 * idx + proc_control_node_B.i_pa];
    }

    for (idx = 0; idx < 8; idx++) {
      proc_control_node_B.b_Bu[static_cast<int32_T>(proc_control_node_B.ic_g[idx]
        + 8.0) - 1] = runtimedata->MVRateMax[10 * idx + proc_control_node_B.i_pa];
    }

    for (idx = 0; idx < 8; idx++) {
      proc_control_node_B.b_Bu[static_cast<int32_T>(proc_control_node_B.ic_g[idx]
        + 16.0) - 1] = -runtimedata->MVMin[10 * idx + proc_control_node_B.i_pa];
    }

    for (idx = 0; idx < 8; idx++) {
      proc_control_node_B.b_Bu[static_cast<int32_T>(proc_control_node_B.ic_g[idx]
        + 24.0) - 1] = runtimedata->MVMax[10 * idx + proc_control_node_B.i_pa];
    }

    if (proc_control_node_B.i_pa + 1 == 1) {
      for (idx = 0; idx < 8; idx++) {
        proc_control_node_B.runtimedata_j[idx] = proc_control_node_B.b_Bu[
          static_cast<int32_T>(proc_control_node_B.ic_g[idx]) - 1] -
          runtimedata->lastMV[idx];
      }

      for (idx = 0; idx < 8; idx++) {
        proc_control_node_B.b_Bu[static_cast<int32_T>
          (proc_control_node_B.ic_g[idx]) - 1] =
          proc_control_node_B.runtimedata_j[idx];
      }

      for (idx = 0; idx < 8; idx++) {
        proc_control_node_B.runtimedata_j[idx] = proc_control_node_B.b_Bu[
          static_cast<int32_T>(proc_control_node_B.ic_g[idx] + 8.0) - 1] +
          runtimedata->lastMV[idx];
      }

      for (idx = 0; idx < 8; idx++) {
        proc_control_node_B.b_Bu[static_cast<int32_T>
          (proc_control_node_B.ic_g[idx] + 8.0) - 1] =
          proc_control_node_B.runtimedata_j[idx];
      }
    } else {
      for (idx = 0; idx < 8; idx++) {
        for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 8;
             proc_control_node_B.k_d++) {
          proc_control_node_B.Au[((static_cast<int32_T>
            (proc_control_node_B.ic_g[proc_control_node_B.k_d]) + 320 * idx) +
            2560 * (proc_control_node_B.i_pa - 1)) - 1] =
            proc_control_node_B.Au_tmp[(idx << 3) + proc_control_node_B.k_d];
        }
      }

      for (idx = 0; idx < 8; idx++) {
        for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 8;
             proc_control_node_B.k_d++) {
          proc_control_node_B.Au[((static_cast<int32_T>
            (proc_control_node_B.ic_g[proc_control_node_B.k_d] + 8.0) + 320 *
            idx) + 2560 * (proc_control_node_B.i_pa - 1)) - 1] =
            proc_control_node_B.Au_tmp_n[(idx << 3) + proc_control_node_B.k_d];
        }
      }
    }

    for (idx = 0; idx < 8; idx++) {
      proc_control_node_B.ic_g[idx] += 32.0;
    }
  }

  proc_control_node_B.i_pa = 0;
  idx = 0;
  exitg1 = false;
  while ((!exitg1) && (idx < 320)) {
    if (proc_control_node_B.icf[idx]) {
      proc_control_node_B.i_pa++;
      proc_control_node_B.ii_data[proc_control_node_B.i_pa - 1] =
        static_cast<int16_T>(idx + 1);
      if (proc_control_node_B.i_pa >= 320) {
        exitg1 = true;
      } else {
        idx++;
      }
    } else {
      idx++;
    }
  }

  if (1 > proc_control_node_B.i_pa) {
    proc_control_node_B.i_pa = 0;
  }

  if (proc_control_node_B.i_pa > 0) {
    *Bu_size = proc_control_node_B.i_pa;
    for (idx = 0; idx < proc_control_node_B.i_pa; idx++) {
      Bu_data[idx] = proc_control_node_B.b_Bu[proc_control_node_B.ii_data[idx] -
        1];
    }

    for (idx = 0; idx < 8; idx++) {
      for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 10;
           proc_control_node_B.k_d++) {
        proc_control_node_B.b_i_d = 0;
        while (proc_control_node_B.b_i_d <= proc_control_node_B.i_pa - 1) {
          proc_control_node_B.Auf_data[(proc_control_node_B.b_i_d +
            proc_control_node_B.i_pa * idx) + (proc_control_node_B.i_pa << 3) *
            proc_control_node_B.k_d] = proc_control_node_B.Au[((320 * idx +
            proc_control_node_B.ii_data[proc_control_node_B.b_i_d]) + 2560 *
            proc_control_node_B.k_d) - 1];
          proc_control_node_B.b_i_d++;
        }
      }
    }

    proc_control_node_B.idx[0] = proc_control_node_B.i_pa;
    proc_control_node_B.idx[1] = 80;
    proc_control_node_mtimes(proc_control_node_B.Auf_data,
      proc_control_node_B.idx, proc_control_node_B.tmp_data_f,
      proc_control_node_B.tmp_size_d);
    A_size[0] = proc_control_node_B.i_pa;
    A_size[1] = 147;
    proc_control_node_B.k_d = proc_control_node_B.i_pa * 130;
    if (0 <= proc_control_node_B.k_d - 1) {
      memset(&A_data[0], 0, proc_control_node_B.k_d * sizeof(real_T));
    }

    proc_control_node_B.k_d = proc_control_node_B.i_pa << 4;
    for (idx = 0; idx < proc_control_node_B.k_d; idx++) {
      A_data[idx + proc_control_node_B.i_pa * 130] =
        proc_control_node_B.tmp_data_f[idx];
    }

    if (0 <= proc_control_node_B.i_pa - 1) {
      memset(&A_data[proc_control_node_B.i_pa * 130 + proc_control_node_B.k_d],
             0, ((((proc_control_node_B.i_pa + proc_control_node_B.i_pa * 130) +
                   proc_control_node_B.k_d) - proc_control_node_B.i_pa * 130) -
                 proc_control_node_B.k_d) * sizeof(real_T));
    }
  } else {
    *Bu_size = 0;
    A_size[0] = 0;
    A_size[1] = 211;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_contro_znlmpc_getDecisions(const real_T
  z[147], real_T X[130], real_T Umv[80], real_T *e)
{
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  int32_T i_2;
  static const int8_T a[1280] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };

  memset(&proc_control_node_B.a_bd[0], 0, 80U * sizeof(real_T));
  i_2 = 0;
  for (i_0 = 0; i_0 < 16; i_0++) {
    for (i = 0; i < 80; i++) {
      proc_control_node_B.a_bd[i] += static_cast<real_T>(a[i + i_2]) * z[i_0 +
        130];
    }

    i_2 += 80;
  }

  i = 0;
  for (i_2 = 0; i_2 < 8; i_2++) {
    i_0 = 0;
    for (i_1 = 0; i_1 < 10; i_1++) {
      Umv[i_1 + i] = proc_control_node_B.a_bd[i_0 + i_2];
      i_0 += 8;
    }

    i += 10;
  }

  *e = z[146];
  memcpy(&proc_control_node_B.z[0], &z[0], 130U * sizeof(real_T));
  i = 0;
  for (i_2 = 0; i_2 < 10; i_2++) {
    i_0 = 0;
    for (i_1 = 0; i_1 < 13; i_1++) {
      X[i_0 + i_2] = proc_control_node_B.z[i_1 + i];
      i_0 += 10;
    }

    i += 13;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_znlmpc_getXUe(const real_T
  z[147], const real_T x[13], real_T X[143], real_T U[88], real_T *e)
{
  int32_T i;
  memset(&X[0], 0, 143U * sizeof(real_T));
  memset(&proc_control_node_B.Umv[0], 0, 88U * sizeof(real_T));
  proc_contro_znlmpc_getDecisions(z, proc_control_node_B.b_cq,
    proc_control_node_B.c, e);
  proc_control_node_B.i26 = 0;
  i = 0;
  for (proc_control_node_B.i_k5 = 0; proc_control_node_B.i_k5 < 13;
       proc_control_node_B.i_k5++) {
    memcpy(&X[proc_control_node_B.i26 + 1], &proc_control_node_B.b_cq[i], 10U *
           sizeof(real_T));
    proc_control_node_B.i26 += 11;
    i += 10;
  }

  proc_control_node_B.i26 = 0;
  i = 0;
  for (proc_control_node_B.i_k5 = 0; proc_control_node_B.i_k5 < 8;
       proc_control_node_B.i_k5++) {
    memcpy(&proc_control_node_B.Umv[proc_control_node_B.i26],
           &proc_control_node_B.c[i], 10U * sizeof(real_T));
    proc_control_node_B.i26 += 11;
    i += 10;
  }

  proc_control_node_B.i26 = 0;
  for (i = 0; i < 13; i++) {
    X[proc_control_node_B.i26] = x[i];
    proc_control_node_B.i26 += 11;
  }

  i = 0;
  for (proc_control_node_B.i_k5 = 0; proc_control_node_B.i_k5 < 8;
       proc_control_node_B.i_k5++) {
    proc_control_node_B.Umv[i + 10] = proc_control_node_B.Umv[i + 9];
    memcpy(&U[i], &proc_control_node_B.Umv[i], 11U * sizeof(real_T));
    i += 11;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_cont_AUVQuatJacobianMatrix(const real_T
  in1[13], real_T Anqv[169])
{
  proc_control_node_B.t2 = fabs(in1[10]);
  proc_control_node_B.t3 = fabs(in1[11]);
  proc_control_node_B.t4 = fabs(in1[12]);
  proc_control_node_B.t5 = fabs(in1[7]);
  proc_control_node_B.t6 = fabs(in1[8]);
  proc_control_node_B.t7 = fabs(in1[9]);
  if (in1[10] < 0.0) {
    proc_control_node_B.t8 = -1.0;
  } else if (in1[10] > 0.0) {
    proc_control_node_B.t8 = 1.0;
  } else if (in1[10] == 0.0) {
    proc_control_node_B.t8 = 0.0;
  } else {
    proc_control_node_B.t8 = (rtNaN);
  }

  if (in1[11] < 0.0) {
    proc_control_node_B.t9 = -1.0;
  } else if (in1[11] > 0.0) {
    proc_control_node_B.t9 = 1.0;
  } else if (in1[11] == 0.0) {
    proc_control_node_B.t9 = 0.0;
  } else {
    proc_control_node_B.t9 = (rtNaN);
  }

  if (in1[12] < 0.0) {
    proc_control_node_B.t10 = -1.0;
  } else if (in1[12] > 0.0) {
    proc_control_node_B.t10 = 1.0;
  } else if (in1[12] == 0.0) {
    proc_control_node_B.t10 = 0.0;
  } else {
    proc_control_node_B.t10 = (rtNaN);
  }

  if (in1[7] < 0.0) {
    proc_control_node_B.t11_i = -1.0;
  } else if (in1[7] > 0.0) {
    proc_control_node_B.t11_i = 1.0;
  } else if (in1[7] == 0.0) {
    proc_control_node_B.t11_i = 0.0;
  } else {
    proc_control_node_B.t11_i = (rtNaN);
  }

  if (in1[8] < 0.0) {
    proc_control_node_B.t12_b = -1.0;
  } else if (in1[8] > 0.0) {
    proc_control_node_B.t12_b = 1.0;
  } else if (in1[8] == 0.0) {
    proc_control_node_B.t12_b = 0.0;
  } else {
    proc_control_node_B.t12_b = (rtNaN);
  }

  if (in1[9] < 0.0) {
    proc_control_node_B.t13_o = -1.0;
  } else if (in1[9] > 0.0) {
    proc_control_node_B.t13_o = 1.0;
  } else if (in1[9] == 0.0) {
    proc_control_node_B.t13_o = 0.0;
  } else {
    proc_control_node_B.t13_o = (rtNaN);
  }

  proc_control_node_B.t17_g = in1[4] * in1[5] * 2.0;
  proc_control_node_B.t18 = in1[4] * in1[6] * 2.0;
  proc_control_node_B.t19 = in1[5] * in1[6] * 2.0;
  proc_control_node_B.t20 = in1[3] * in1[4] * 2.0;
  proc_control_node_B.t21_e = in1[3] * in1[5] * 2.0;
  proc_control_node_B.t22 = in1[3] * in1[6] * 2.0;
  proc_control_node_B.t23 = in1[4] * in1[7] * 2.0;
  proc_control_node_B.t24_tmp = in1[5] * in1[7];
  proc_control_node_B.t24 = proc_control_node_B.t24_tmp * 2.0;
  proc_control_node_B.t25_tmp_d = in1[6] * in1[7];
  proc_control_node_B.t25 = proc_control_node_B.t25_tmp_d * 2.0;
  proc_control_node_B.t26 = in1[3] * in1[7] * 2.0;
  proc_control_node_B.t27_tmp = in1[4] * in1[8];
  proc_control_node_B.t27 = proc_control_node_B.t27_tmp * 2.0;
  proc_control_node_B.t28 = in1[5] * in1[8] * 2.0;
  proc_control_node_B.t29_tmp = in1[6] * in1[8];
  proc_control_node_B.t29 = proc_control_node_B.t29_tmp * 2.0;
  proc_control_node_B.t30 = in1[3] * in1[8] * 2.0;
  proc_control_node_B.t31_tmp = in1[4] * in1[9];
  proc_control_node_B.t31 = proc_control_node_B.t31_tmp * 2.0;
  proc_control_node_B.t32_tmp = in1[5] * in1[9];
  proc_control_node_B.t32 = proc_control_node_B.t32_tmp * 2.0;
  proc_control_node_B.t33 = in1[6] * in1[9] * 2.0;
  proc_control_node_B.t34 = in1[3] * in1[9] * 2.0;
  proc_control_node_B.t39 = in1[4] / 2.0;
  proc_control_node_B.t40 = in1[5] / 2.0;
  proc_control_node_B.t41 = in1[6] / 2.0;
  proc_control_node_B.t42 = in1[3] / 2.0;
  proc_control_node_B.t43 = in1[10] / 2.0;
  proc_control_node_B.t44 = in1[11] / 2.0;
  proc_control_node_B.t45 = in1[12] / 2.0;
  proc_control_node_B.t55 = in1[12] * 1.0571299073092789E-5;
  proc_control_node_B.t56_i = in1[11] * 9.7602896722846373E-5;
  proc_control_node_B.t57_e = in1[8] * 0.01129023503850542;
  proc_control_node_B.t58_i = in1[7] * 0.00477039452928936;
  proc_control_node_B.t59 = in1[10] * 9.1703771260780813E-5;
  proc_control_node_B.t61 = in1[9] * 0.143523560675718;
  proc_control_node_B.t62_m = in1[7] * 0.00568699616459184;
  proc_control_node_B.t65 = in1[9] * 0.069014505171846527;
  proc_control_node_B.t68 = in1[8] * 0.0071670223909459834;
  proc_control_node_B.t35 = in1[4] * in1[4] * 2.0;
  proc_control_node_B.t36 = in1[5] * in1[5] * 2.0;
  proc_control_node_B.t37 = in1[6] * in1[6] * 2.0;
  memset(&Anqv[0], 0, 39U * sizeof(real_T));
  Anqv[39] = -proc_control_node_B.t29 + proc_control_node_B.t32;
  Anqv[40] = proc_control_node_B.t25 - proc_control_node_B.t31;
  Anqv[41] = -proc_control_node_B.t24 + proc_control_node_B.t27;
  Anqv[42] = 0.0;
  Anqv[43] = proc_control_node_B.t43;
  Anqv[44] = proc_control_node_B.t44;
  Anqv[45] = proc_control_node_B.t45;
  Anqv[46] = in1[4] * -0.0013017970932508 + in1[5] * 0.4138016519122657;
  Anqv[47] = in1[4] * -0.51979016069898065 + in1[5] * 0.00099202109956931486;
  Anqv[48] = in1[4] * 0.033540735888224739 - in1[5] * 0.0058758415205803329;
  Anqv[49] = in1[4] * -25.242114556122988 + in1[5] * 0.1138522338822895;
  Anqv[50] = in1[4] * 0.1184627304742461 - in1[5] * 8.6371397256799973;
  Anqv[51] = in1[4] * 0.38451002147839958 + in1[5] * 0.65361132374006825;
  Anqv[52] = proc_control_node_B.t28 + proc_control_node_B.t33;
  Anqv[53] = (proc_control_node_B.t24 - proc_control_node_B.t34) -
    proc_control_node_B.t27_tmp * 4.0;
  Anqv[54] = (proc_control_node_B.t25 + proc_control_node_B.t30) -
    proc_control_node_B.t31_tmp * 4.0;
  Anqv[55] = -proc_control_node_B.t43;
  Anqv[56] = 0.0;
  Anqv[57] = -proc_control_node_B.t45;
  Anqv[58] = proc_control_node_B.t44;
  Anqv[59] = (in1[4] * -0.01263905936484723 - in1[6] * 0.4138016519122657) -
    in1[3] * 0.0013017970932508;
  Anqv[60] = (in1[4] * -0.05386046241846134 - in1[6] * 0.00099202109956931486) -
    in1[3] * 0.51979016069898065;
  Anqv[61] = (in1[4] * 0.37271497842704371 + in1[6] * 0.0058758415205803329) +
    in1[3] * 0.033540735888224739;
  Anqv[62] = (in1[4] * -4.2094140168137981 - in1[6] * 0.1138522338822895) - in1
    [3] * 25.242114556122988;
  Anqv[63] = (in1[4] * 0.73643595165049924 + in1[6] * 8.6371397256799973) + in1
    [3] * 0.1184627304742461;
  Anqv[64] = (in1[4] * 0.009785912146552939 - in1[6] * 0.65361132374006825) +
    in1[3] * 0.38451002147839958;
  Anqv[65] = (proc_control_node_B.t27 + proc_control_node_B.t34) -
    proc_control_node_B.t24_tmp * 4.0;
  Anqv[66] = proc_control_node_B.t23 + proc_control_node_B.t33;
  Anqv[67] = (-proc_control_node_B.t26 + proc_control_node_B.t29) -
    proc_control_node_B.t32_tmp * 4.0;
  Anqv[68] = -proc_control_node_B.t44;
  Anqv[69] = proc_control_node_B.t45;
  Anqv[70] = 0.0;
  Anqv[71] = -proc_control_node_B.t43;
  Anqv[72] = (in1[5] * -0.01263905936484723 - in1[6] * 0.0013017970932508) +
    in1[3] * 0.4138016519122657;
  Anqv[73] = (in1[5] * -0.05386046241846134 - in1[6] * 0.51979016069898065) +
    in1[3] * 0.00099202109956931486;
  Anqv[74] = (in1[5] * 0.37271497842704371 + in1[6] * 0.033540735888224739) -
    in1[3] * 0.0058758415205803329;
  Anqv[75] = (in1[5] * -4.2094140168137981 - in1[6] * 25.242114556122988) + in1
    [3] * 0.1138522338822895;
  Anqv[76] = (in1[5] * 0.73643595165049924 + in1[6] * 0.1184627304742461) - in1
    [3] * 8.6371397256799973;
  Anqv[77] = (in1[5] * 0.009785912146552939 + in1[6] * 0.38451002147839958) +
    in1[3] * 0.65361132374006825;
  Anqv[78] = (-proc_control_node_B.t30 + proc_control_node_B.t31) -
    proc_control_node_B.t25_tmp_d * 4.0;
  Anqv[79] = (proc_control_node_B.t26 + proc_control_node_B.t32) -
    proc_control_node_B.t29_tmp * 4.0;
  Anqv[80] = proc_control_node_B.t23 + proc_control_node_B.t28;
  Anqv[81] = -proc_control_node_B.t45;
  Anqv[82] = -proc_control_node_B.t44;
  Anqv[83] = proc_control_node_B.t43;
  Anqv[84] = 0.0;
  Anqv[85] = in1[4] * -0.4138016519122657 - in1[5] * 0.0013017970932508;
  Anqv[86] = in1[4] * -0.00099202109956931486 - in1[5] * 0.51979016069898065;
  Anqv[87] = in1[4] * 0.0058758415205803329 + in1[5] * 0.033540735888224739;
  Anqv[88] = in1[4] * -0.1138522338822895 - in1[5] * 25.242114556122988;
  Anqv[89] = in1[4] * 8.6371397256799973 + in1[5] * 0.1184627304742461;
  Anqv[90] = in1[4] * -0.65361132374006825 + in1[5] * 0.38451002147839958;
  Anqv[91] = (-proc_control_node_B.t36 + -proc_control_node_B.t37) + 1.0;
  Anqv[92] = proc_control_node_B.t17_g + proc_control_node_B.t22;
  Anqv[93] = proc_control_node_B.t18 - proc_control_node_B.t21_e;
  Anqv[94] = 0.0;
  Anqv[95] = 0.0;
  Anqv[96] = 0.0;
  Anqv[97] = 0.0;
  proc_control_node_B.t11_i *= in1[7];
  Anqv[98] = (((((proc_control_node_B.t5 * -0.036243063166504788 +
                  proc_control_node_B.t55) + proc_control_node_B.t56_i) -
                proc_control_node_B.t57_e) - proc_control_node_B.t61) -
              proc_control_node_B.t11_i * 0.036243063166504788) -
    0.46465465598083061;
  Anqv[99] = (((in1[8] * 0.00477039452928936 - in1[9] * 0.001468966557066211) -
               proc_control_node_B.t11_i * 1.109195745194835E-6) -
              1.422045827172866E-5) + ((in1[11] * 0.00041592787873873338 - in1
    [12] * 0.74121409319149256) - proc_control_node_B.t5 * 1.109195745194835E-6);
  Anqv[100] = (((in1[8] * -5.890830655932608E-5 + in1[9] * 0.00568699616459184)
                + proc_control_node_B.t11_i * 7.9830677445685858E-6) +
               0.0001023470223662639) + ((in1[11] * 0.69409782663856512 - in1[12]
    * 0.00032422410747795261) + proc_control_node_B.t5 * 7.9830677445685858E-6);
  Anqv[101] = (((in1[11] * 0.032506453976272241 + in1[12] * 0.24400486517334929)
                - proc_control_node_B.t5 * 0.0001525121428377004) + ((in1[8] *
    0.044446246736648841 - in1[9] * 0.1148218101592509) -
    proc_control_node_B.t11_i * 0.0001525121428377004)) + -0.0019552838825346208;
  Anqv[102] = (((in1[8] * 1.7911420833141059E-5 + in1[9] * 8.3502908029033716) +
                proc_control_node_B.t11_i * 0.011738978516892359) +
               0.150499724575543) + ((in1[11] * -0.00568699616459184 - in1[12] *
    0.001145088836853196) + proc_control_node_B.t5 * 0.011738978516892359);
  Anqv[103] = (((in1[11] * -7.5569972812640509E-5 - in1[12] *
                 0.00477039452928936) - proc_control_node_B.t5 *
                0.0011846302503005471) + ((in1[8] * -5.91169722427816 - in1[9] *
    2.2977499514997389E-5) - proc_control_node_B.t11_i * 0.0011846302503005471))
    + -0.015187567311545479;
  Anqv[104] = proc_control_node_B.t17_g - proc_control_node_B.t22;
  Anqv[105] = (-proc_control_node_B.t35 + -proc_control_node_B.t37) + 1.0;
  Anqv[106] = proc_control_node_B.t19 + proc_control_node_B.t20;
  Anqv[107] = 0.0;
  Anqv[108] = 0.0;
  Anqv[109] = 0.0;
  Anqv[110] = 0.0;
  proc_control_node_B.t11_i = proc_control_node_B.t12_b * in1[8];
  Anqv[111] = (((in1[10] * -2.1519484922730651E-5 + in1[12] * 1.3454180758607359)
                - proc_control_node_B.t6 * 7.7738505218783331E-7) - in1[7] *
               0.01129023503850542) + ((in1[9] * -0.00041111798914172931 -
    proc_control_node_B.t11_i * 7.7738505218783331E-7) - 1.8960611028971542E-5);
  Anqv[112] = (((((proc_control_node_B.t6 * -0.01903042325061665 +
                   proc_control_node_B.t55) + proc_control_node_B.t58_i) +
                 -proc_control_node_B.t59) - proc_control_node_B.t65) -
               proc_control_node_B.t11_i * 0.01903042325061665) -
    0.46415666464918648;
  Anqv[113] = (((in1[7] * -5.890830655932608E-5 + in1[9] * 0.0071670223909459834)
                + proc_control_node_B.t11_i * 2.3842573459475649E-5) +
               0.00058152618193843065) + ((in1[10] * -0.93255469429176219 - in1
    [12] * 7.6083411800115719E-5) + proc_control_node_B.t6 *
    2.3842573459475649E-5);
  Anqv[114] = (((in1[10] * -0.0071670223909459834 + in1[12] *
                 0.00145353196782447) - proc_control_node_B.t6 *
                0.017943464992838758) + ((in1[7] * 0.044446246736648841 - in1[9]
    * 5.3937622658585171) - proc_control_node_B.t11_i * 0.017943464992838758)) +
    -0.4376454876302136;
  Anqv[115] = (((in1[10] * 0.0012538688125934979 - in1[12] * 0.1118794885864644)
                + proc_control_node_B.t6 * 8.4206769578830268E-5) + in1[7] *
               1.7911420833141059E-5) + ((proc_control_node_B.t11_i *
    8.4206769578830268E-5 + in1[9] * 0.025315910649035739) +
    0.0020538236482641531);
  Anqv[116] = (((in1[10] * 1.6661666253314429E-5 + in1[12] * 0.01129023503850542)
                + proc_control_node_B.t6 * 0.00035080205133418912) + ((in1[7] *
    -5.91169722427816 + in1[9] * 0.01257120723021817) +
    proc_control_node_B.t11_i * 0.00035080205133418912)) + 0.0085561475935168052;
  Anqv[117] = proc_control_node_B.t18 + proc_control_node_B.t21_e;
  Anqv[118] = proc_control_node_B.t19 - proc_control_node_B.t20;
  Anqv[119] = (-proc_control_node_B.t35 + -proc_control_node_B.t36) + 1.0;
  Anqv[120] = 0.0;
  Anqv[121] = 0.0;
  Anqv[122] = 0.0;
  Anqv[123] = 0.0;
  proc_control_node_B.t11_i = proc_control_node_B.t13_o * in1[9];
  Anqv[124] = (((in1[10] * 2.989993556213668E-6 - in1[11] * 1.4431163638272659)
                + proc_control_node_B.t7 * 5.1582899272597018E-6) - in1[7] *
               0.143523560675718) + ((proc_control_node_B.t11_i *
    5.1582899272597018E-6 + in1[8] * -0.00041111798914172931) +
    0.0001592064792364106);
  Anqv[125] = (((in1[10] * 1.0731951852318531 - in1[11] * 1.356129262930646E-5)
                + proc_control_node_B.t7 * 2.1981689677272681E-5) + ((in1[7] *
    -0.001468966557066211 - in1[8] * 0.069014505171846527) +
    proc_control_node_B.t11_i * 2.1981689677272681E-5)) + 0.00067844721226150231;
  Anqv[126] = (((((proc_control_node_B.t7 * -0.01616685726098728 +
                   proc_control_node_B.t56_i) + -proc_control_node_B.t59) +
                 proc_control_node_B.t62_m) + proc_control_node_B.t68) -
               proc_control_node_B.t11_i * 0.01616685726098728) -
    0.49897707595639768;
  Anqv[127] = (((in1[10] * 0.069014505171846527 - in1[11] *
                 0.0018646499569661989) + proc_control_node_B.t7 *
                0.00171795837774031) + ((in1[7] * -0.1148218101592509 - in1[8] *
    5.3937622658585171) + proc_control_node_B.t11_i * 0.00171795837774031)) +
    0.053023406720379938;
  Anqv[128] = (((in1[10] * -0.00032387772021301561 + in1[11] * 0.143523560675718)
                - proc_control_node_B.t7 * 0.00030055639757781919) + ((in1[7] *
    8.3502908029033716 + in1[8] * 0.025315910649035739) -
    proc_control_node_B.t11_i * 0.00030055639757781919)) +
    -0.0092764320240067664;
  Anqv[129] = (((in1[10] * -0.0013492616947596331 - in1[11] *
                 0.01448357294143097) - proc_control_node_B.t7 *
                3.993855127780116E-6) - in1[7] * 2.2977499514997389E-5) + ((in1
    [8] * 0.01257120723021817 - proc_control_node_B.t11_i * 3.993855127780116E-6)
    - 0.00012326713357346041);
  Anqv[130] = 0.0;
  Anqv[131] = 0.0;
  Anqv[132] = 0.0;
  Anqv[133] = -proc_control_node_B.t39;
  Anqv[134] = proc_control_node_B.t42;
  Anqv[135] = proc_control_node_B.t41;
  Anqv[136] = -proc_control_node_B.t40;
  proc_control_node_B.t11_i = in1[10] * proc_control_node_B.t8;
  Anqv[137] = (((in1[10] * -0.00010396365424827521 - in1[11] *
                 0.0030560301354578762) - in1[12] * 0.030270009262121408) -
               proc_control_node_B.t2 * 2.1768827225552109E-5) + (((in1[8] *
    -2.1519484922730651E-5 + in1[9] * 2.989993556213668E-6) -
    proc_control_node_B.t11_i * 2.1768827225552109E-5) - 0.00043450752945213789);
  Anqv[138] = ((((in1[10] * 0.0028513455484883 - in1[11] *
                  0.00032316342950661811) + in1[12] * 4.2079285691049859E-5) -
                proc_control_node_B.t2 * 0.0036543398217122828) + ((in1[8] *
    -9.1703771260780813E-5 + in1[9] * 1.0731951852318531) -
    proc_control_node_B.t11_i * 0.0036543398217122828)) + -0.072940914605035587;
  Anqv[139] = (((in1[10] * 0.023864851221217471 + in1[11] *
                 4.0426879502317728E-6) - in1[12] * 0.00016269010774240791) +
               ((proc_control_node_B.t2 * 0.0003794960966701478 - in1[8] *
                 0.93255469429176219) - in1[9] * 9.1703771260780813E-5)) +
    (proc_control_node_B.t11_i * 0.0003794960966701478 + 0.007574772388625705);
  Anqv[140] = ((((proc_control_node_B.t2 * -0.28560141361437341 +
                  proc_control_node_B.t65) - proc_control_node_B.t68) -
                proc_control_node_B.t11_i * 0.28560141361437341) -
               5.7006270182509668) + ((in1[10] * 0.00017692814721597281 - in1[11]
    * 0.00301187450220627) + in1[12] * 0.0032852614324183722);
  Anqv[141] = (((in1[10] * 0.005100926963153893 + in1[11] * 7.54282242443926E-5)
                + in1[12] * 0.76112100692746432) + ((proc_control_node_B.t2 *
    0.0013404854555911631 + in1[8] * 0.0012538688125934979) - in1[9] *
    0.00032387772021301561)) + (proc_control_node_B.t11_i *
    0.0013404854555911631 + 0.026756196718386482);
  Anqv[142] = (((in1[10] * -0.0085297096290247246 - in1[11] *
                 0.59953739020136265) - in1[12] * 6.8948828938803766E-5) +
               ((proc_control_node_B.t2 * 0.00066564938883491385 + in1[8] *
                 1.6661666253314429E-5) - in1[9] * 0.0013492616947596331)) +
    (proc_control_node_B.t11_i * 0.00066564938883491385 + 0.013286414946804669);
  Anqv[143] = 0.0;
  Anqv[144] = 0.0;
  Anqv[145] = 0.0;
  Anqv[146] = -proc_control_node_B.t40;
  Anqv[147] = -proc_control_node_B.t41;
  Anqv[148] = proc_control_node_B.t42;
  Anqv[149] = proc_control_node_B.t39;
  proc_control_node_B.t11_i = in1[11] * proc_control_node_B.t9;
  Anqv[150] = ((((in1[10] * -0.0030560301354578762 + in1[11] *
                  0.001929418735906703) + in1[12] * 6.2884941489263073E-5) +
                proc_control_node_B.t3 * 0.001003331497170287) + ((in1[7] *
    9.7602896722846373E-5 - in1[9] * 1.4431163638272659) +
    proc_control_node_B.t11_i * 0.001003331497170287)) + 0.0234110682673067;
  Anqv[151] = (((in1[10] * -0.00032316342950661811 + in1[11] *
                 4.5292476302332957E-6) - in1[12] * 0.016528998001422841) +
               proc_control_node_B.t3 * 1.026911824132076E-5) + (((in1[7] *
    0.00041592787873873338 - in1[9] * 1.356129262930646E-5) +
    proc_control_node_B.t11_i * 1.026911824132076E-5) + 0.00023961275896415121);
  Anqv[152] = (((in1[10] * 4.0426879502317728E-6 + in1[11] *
                 0.023860477346842442) - in1[12] * 0.000941018323416786) +
               ((proc_control_node_B.t3 * -3.9756137245743291E-5 + in1[7] *
                 0.69409782663856512) + in1[9] * 9.7602896722846373E-5)) +
    (proc_control_node_B.t11_i * -3.9756137245743291E-5 - 0.00092764320240067675);
  Anqv[153] = (((in1[10] * -0.00301187450220627 + in1[11] *
                 0.00082864946354184129) - in1[12] * 0.291807921220024) +
               ((proc_control_node_B.t3 * 0.00080268590155159437 + in1[7] *
                 0.032506453976272241) - in1[9] * 0.0018646499569661989)) +
    (proc_control_node_B.t11_i * 0.00080268590155159437 + 0.018729337702870542);
  Anqv[154] = ((((proc_control_node_B.t3 * -0.058374455968341669 +
                  proc_control_node_B.t61) - proc_control_node_B.t62_m) -
                proc_control_node_B.t11_i * 0.058374455968341669) -
               1.362070639261306) + ((in1[10] * 7.54282242443926E-5 - in1[11] *
    0.00019446645525741661) - in1[12] * 0.003324115892995542);
  Anqv[155] = ((((proc_control_node_B.t3 * 1.6062902063655571E-7 - in1[7] *
                  7.5569972812640509E-5) - in1[9] * 0.01448357294143097) +
                proc_control_node_B.t11_i * 1.6062902063655571E-7) + ((in1[10] *
    -0.59953739020136265 + in1[11] * 0.0085432434746820687) + in1[12] *
    0.0030111351640179931)) + 3.7480104815196341E-6;
  Anqv[156] = 0.0;
  Anqv[157] = 0.0;
  Anqv[158] = 0.0;
  Anqv[159] = -proc_control_node_B.t41;
  Anqv[160] = proc_control_node_B.t40;
  Anqv[161] = -proc_control_node_B.t39;
  Anqv[162] = proc_control_node_B.t42;
  proc_control_node_B.t11_i = in1[12] * proc_control_node_B.t10;
  Anqv[163] = (((in1[10] * -0.030270009262121408 + in1[11] *
                 6.2884941489263073E-5) + in1[12] * 0.0020006959490984312) -
               proc_control_node_B.t4 * 0.0001032754577185093) + (((in1[7] *
    1.0571299073092789E-5 + in1[8] * 1.3454180758607359) -
    proc_control_node_B.t11_i * 0.0001032754577185093) - 0.0050625224371818262);
  Anqv[164] = (((in1[10] * 4.2079285691049859E-5 - in1[11] *
                 0.016528998001422841) + in1[12] * 0.00283488707941543) +
               proc_control_node_B.t4 * 4.3636352726935713E-5) + (((in1[7] *
    -0.74121409319149256 + in1[8] * 1.0571299073092789E-5) +
    proc_control_node_B.t11_i * 4.3636352726935713E-5) + 0.0021390368983792022);
  Anqv[165] = ((((proc_control_node_B.t4 * -5.3885346962112674E-7 - in1[7] *
                  0.00032422410747795261) - in1[8] * 7.6083411800115719E-5) -
                proc_control_node_B.t11_i * 5.3885346962112674E-7) + ((in1[10] *
    -0.00016269010774240791 - in1[11] * 0.000941018323416786) - in1[12] *
    2.6641242336162E-6)) + -2.6414385765741509E-5;
  Anqv[166] = (((in1[10] * 0.0032852614324183722 - in1[11] * 0.291807921220024)
                - in1[12] * 0.00063467747547131872) + ((proc_control_node_B.t4 *
    0.00040656429737222281 + in1[7] * 0.24400486517334929) + in1[8] *
    0.00145353196782447)) + (proc_control_node_B.t11_i * 0.00040656429737222281
    + 0.019929622420207);
  Anqv[167] = ((((proc_control_node_B.t4 * 1.6384160104928689E-7 - in1[7] *
                  0.001145088836853196) - in1[8] * 0.1118794885864644) +
                proc_control_node_B.t11_i * 1.6384160104928689E-7) + ((in1[10] *
    0.76112100692746432 - in1[11] * 0.003324115892995542) - in1[12] *
    0.005288701994301117)) + 8.0314510318277867E-6;
  Anqv[168] = ((((proc_control_node_B.t4 * -0.054076220260104418 +
                  proc_control_node_B.t57_e) - proc_control_node_B.t58_i) -
                proc_control_node_B.t11_i * 0.054076220260104418) -
               2.6507951107894319) + ((in1[10] * -6.8948828938803766E-5 + in1[11]
    * 0.0030111351640179931) + in1[12] * 1.7711862430984169E-5);
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_AUVQuatSimFcn(const real_T
  in1[13], const real_T in2[8], real_T out1[13])
{
  proc_control_node_B.t8_f = in1[4] * in1[4];
  proc_control_node_B.t9_e = in1[5] * in1[5];
  proc_control_node_B.t11_in = in1[4] * in1[5] * 2.0;
  proc_control_node_B.t12_tmp = in1[4] * in1[6];
  proc_control_node_B.t12_a = proc_control_node_B.t12_tmp * 2.0;
  proc_control_node_B.t13_tmp = in1[5] * in1[6];
  proc_control_node_B.t13_f = proc_control_node_B.t13_tmp * 2.0;
  proc_control_node_B.t14_tmp = in1[3] * in1[4];
  proc_control_node_B.t14_k = proc_control_node_B.t14_tmp * 2.0;
  proc_control_node_B.t15_tmp = in1[3] * in1[5];
  proc_control_node_B.t15 = proc_control_node_B.t15_tmp * 2.0;
  proc_control_node_B.t16 = in1[3] * in1[6] * 2.0;
  proc_control_node_B.t25_c = in1[11] / 500.0;
  proc_control_node_B.t29_j = in1[10] / 1000.0;
  proc_control_node_B.t31_l = in1[12] * 0.018;
  proc_control_node_B.t50 = in1[7] * 32.4648;
  proc_control_node_B.t53 = in1[8] * 43.6156;
  proc_control_node_B.t54 = in1[9] * 46.7695;
  proc_control_node_B.t17_a = proc_control_node_B.t8_f * 2.0;
  proc_control_node_B.t18_i = proc_control_node_B.t9_e * 2.0;
  proc_control_node_B.t19_o = in1[6] * in1[6] * 2.0;
  proc_control_node_B.t57_b = proc_control_node_B.t25_c +
    proc_control_node_B.t31_l;
  proc_control_node_B.t25_c += proc_control_node_B.t29_j;
  proc_control_node_B.t29_j += proc_control_node_B.t31_l;
  proc_control_node_B.t31_l = in1[11] * 0.558 + proc_control_node_B.t50;
  proc_control_node_B.t64 = in1[10] * 0.062 + proc_control_node_B.t54;
  proc_control_node_B.t65_a = in1[12] * 0.031 + proc_control_node_B.t53;
  proc_control_node_B.t68_a = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] *
    0.592;
  proc_control_node_B.t50 = in1[12] * 0.062 + -proc_control_node_B.t50;
  proc_control_node_B.t53 = in1[10] * 0.558 + -proc_control_node_B.t53;
  proc_control_node_B.t54 = in1[11] * 0.031 + -proc_control_node_B.t54;
  proc_control_node_B.t69 = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_node_B.t70 = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  out1[0] = (((proc_control_node_B.t18_i + proc_control_node_B.t19_o) - 1.0) *
             -in1[7] + (proc_control_node_B.t12_a + proc_control_node_B.t15) *
             in1[9]) + (proc_control_node_B.t11_in - proc_control_node_B.t16) *
    in1[8];
  out1[1] = ((proc_control_node_B.t11_in + proc_control_node_B.t16) * in1[7] -
             ((proc_control_node_B.t17_a + proc_control_node_B.t19_o) - 1.0) *
             in1[8]) + (proc_control_node_B.t13_f - proc_control_node_B.t14_k) *
    in1[9];
  out1[2] = ((proc_control_node_B.t13_f + proc_control_node_B.t14_k) * in1[8] -
             ((proc_control_node_B.t17_a + proc_control_node_B.t18_i) - 1.0) *
             in1[9]) + (proc_control_node_B.t12_a - proc_control_node_B.t15) *
    in1[7];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_node_B.t11_in = in1[10] * proc_control_node_B.t57_b;
  proc_control_node_B.t12_a = in1[10] * (fabs(in1[10]) * 0.167 +
    3.3333333333333335);
  proc_control_node_B.t13_f = in1[10] * proc_control_node_B.t64;
  proc_control_node_B.t14_k = in1[10] * proc_control_node_B.t53;
  proc_control_node_B.t15 = in1[10] * proc_control_node_B.t69;
  proc_control_node_B.t16 = in1[10] * proc_control_node_B.t70;
  proc_control_node_B.t17_a = in1[11] * (fabs(in1[11]) / 10.0 +
    2.3333333333333335);
  proc_control_node_B.t18_i = in1[11] * proc_control_node_B.t29_j;
  proc_control_node_B.t19_o = in1[11] * proc_control_node_B.t31_l;
  proc_control_node_B.out1_tmp = in1[11] * proc_control_node_B.t54;
  proc_control_node_B.out1_tmp_i = in1[11] * proc_control_node_B.t68_a;
  proc_control_node_B.t69 *= in1[11];
  proc_control_node_B.out1_tmp_iz = in1[12] * (fabs(in1[12]) * 0.102 + 5.0);
  proc_control_node_B.out1_tmp_l = in1[12] * proc_control_node_B.t25_c;
  proc_control_node_B.out1_tmp_o = in1[12] * proc_control_node_B.t50;
  proc_control_node_B.out1_tmp_p = in1[12] * proc_control_node_B.t65_a;
  proc_control_node_B.t68_a *= in1[12];
  proc_control_node_B.t70 *= in1[12];
  proc_control_node_B.out1_tmp_om = (fabs(in1[7]) * 1.17 + 15.0) * in1[7];
  proc_control_node_B.t57_b *= in1[7];
  proc_control_node_B.t65_a *= in1[7];
  proc_control_node_B.t54 *= in1[7];
  proc_control_node_B.out1_tmp_c = (fabs(in1[8]) * 0.82 + 20.0) * in1[8];
  proc_control_node_B.t29_j *= in1[8];
  proc_control_node_B.t50 *= in1[8];
  proc_control_node_B.t64 *= in1[8];
  proc_control_node_B.out1_tmp_oc = (fabs(in1[9]) * 0.756 + 23.333333333333332) *
    in1[9];
  proc_control_node_B.t25_c *= in1[9];
  proc_control_node_B.t31_l *= in1[9];
  proc_control_node_B.t53 *= in1[9];
  out1[7] = (((((((((((((((in2[0] * -0.00033076834054020519 + in2[1] *
    1.8595780444550231E-21) + in2[2] * 0.00033506403327449372) + (in2[3] *
    0.00033363213569639753 - in2[4] * 0.001819638864719295)) + (in2[5] *
    -0.0018124211550371481 + in2[6] * 0.0018538731733468781)) + (in2[7] *
    0.001778186846409557 - proc_control_node_B.t8_f * 0.0063195296824236141)) +
                      ((in2[0] * 1.4142135623730951 * 0.015171119710606879 +
                        proc_control_node_B.t9_e * -0.0063195296824236141) +
                       in2[1] * 1.4142135623730951 * 0.014928824155507611)) +
                     ((in2[2] * 1.4142135623730951 * 0.015171119710606879 + in2
                       [3] * 1.4142135623730951 * 0.01516372519659284) -
                      proc_control_node_B.t12_tmp * 0.4138016519122657)) +
                    ((proc_control_node_B.t13_tmp * -0.0013017970932508 -
                      proc_control_node_B.t14_tmp * 0.0013017970932508) +
                     proc_control_node_B.t15_tmp * 0.4138016519122657)) +
                   (((proc_control_node_B.t11_in * -0.96028628902704993 -
                      proc_control_node_B.t12_a * 0.0001303522588356414) +
                     proc_control_node_B.t13_f * 9.4803055144857715E-7) -
                    proc_control_node_B.t14_k * 6.8231348244175949E-6)) +
                  (((proc_control_node_B.t15 * -0.010033314971702871 -
                     proc_control_node_B.t16 * 0.0010125044874363649) +
                    proc_control_node_B.t17_a * 0.010033314971702871) -
                   proc_control_node_B.t18_i * 2.9388947094905889E-5)) +
                 (((proc_control_node_B.t19_o * -6.8231348244175949E-6 +
                    proc_control_node_B.out1_tmp * 0.030976977065388711) +
                   proc_control_node_B.out1_tmp_i * 0.0010125044874363649) -
                  proc_control_node_B.t69 * 0.0001303522588356414)) +
                (((proc_control_node_B.out1_tmp_iz * -0.0010125044874363649 +
                   proc_control_node_B.out1_tmp_l * 0.0002115171795569455) +
                  proc_control_node_B.out1_tmp_o * 9.4803055144857715E-7) +
                 proc_control_node_B.out1_tmp_p * 0.030976977065388711)) +
               (((proc_control_node_B.t68_a * 0.010033314971702871 +
                  proc_control_node_B.t70 * 0.0001303522588356414) -
                 proc_control_node_B.out1_tmp_om * 0.030976977065388711) +
                proc_control_node_B.t57_b * 0.0040409200239048832)) +
              (((proc_control_node_B.t65_a * -0.0010125044874363649 +
                 proc_control_node_B.t54 * 0.010033314971702871) -
                proc_control_node_B.out1_tmp_c * 9.4803055144857715E-7) -
               proc_control_node_B.t29_j * 0.311032764122789)) +
             (((proc_control_node_B.t50 * -0.0010125044874363649 -
                proc_control_node_B.t64 * 0.0001303522588356414) +
               proc_control_node_B.out1_tmp_oc * 6.8231348244175949E-6) +
              proc_control_node_B.t25_c * 0.031387639110527318)) +
    ((proc_control_node_B.t31_l * 0.010033314971702871 - proc_control_node_B.t53
      * 0.0001303522588356414) + 0.003159764841211807);
  out1[8] = (((((((((((((((in2[0] * 0.00013975754063522079 + in2[1] *
    7.9244610288113972E-21) + in2[2] * -0.00014157257363048341) + (in2[3] *
    -0.0001409675626320625 - in2[4] * 0.0034249251816346319)) + (in2[5] *
    0.003387750973601051 + in2[6] * 0.0035708122797193441)) + (in2[7] *
    -0.0035336380716857632 - proc_control_node_B.t8_f * 0.02693023120923067)) +
                      ((proc_control_node_B.t9_e * -0.02693023120923067 - in2[0]
                        * 1.4142135623730951 * 0.01090649593858282) + in2[1] *
                       1.4142135623730951 * 0.011000123045544621)) + ((in2[2] *
    1.4142135623730951 * -0.01090649593858282 + in2[3] * 1.4142135623730951 *
    0.01090087173345982) - proc_control_node_B.t12_tmp * 0.00099202109956931486))
                    + ((proc_control_node_B.t13_tmp * -0.51979016069898065 -
                        proc_control_node_B.t14_tmp * 0.51979016069898065) +
                       proc_control_node_B.t15_tmp * 0.00099202109956931486)) +
                   (((proc_control_node_B.t11_in * -2.9388947094905889E-5 -
                      proc_control_node_B.t12_a * 0.021882274381510681) +
                     proc_control_node_B.t13_f * 0.02320783323245932) -
                    proc_control_node_B.t14_k * 2.9076309096921531E-5)) +
                  (((proc_control_node_B.t15 * -0.0001026911824132076 +
                     proc_control_node_B.t16 * 0.00042780737967584029) +
                    proc_control_node_B.t17_a * 0.0001026911824132076) -
                   proc_control_node_B.t18_i * 0.71944283020623911)) +
                 (((proc_control_node_B.t19_o * -2.9076309096921531E-5 +
                    proc_control_node_B.out1_tmp * 9.4803055144857715E-7) -
                   proc_control_node_B.out1_tmp_i * 0.00042780737967584029) -
                  proc_control_node_B.t69 * 0.021882274381510681)) +
                (((proc_control_node_B.out1_tmp_iz * 0.00042780737967584029 +
                   proc_control_node_B.out1_tmp_l * 0.00090136558200456737) +
                  proc_control_node_B.out1_tmp_o * 0.02320783323245932) +
                 proc_control_node_B.out1_tmp_p * 9.4803055144857715E-7)) +
               (((proc_control_node_B.t68_a * 0.0001026911824132076 +
                  proc_control_node_B.t70 * 0.021882274381510681) -
                 proc_control_node_B.out1_tmp_om * 9.4803055144857715E-7) +
                proc_control_node_B.t57_b * 0.678350505826831)) +
              (((proc_control_node_B.t65_a * 0.00042780737967584029 +
                 proc_control_node_B.t54 * 0.0001026911824132076) -
                proc_control_node_B.out1_tmp_c * 0.02320783323245932) -
               proc_control_node_B.t29_j * 0.0031834266548094372)) +
             (((proc_control_node_B.t50 * 0.00042780737967584029 -
                proc_control_node_B.t64 * 0.021882274381510681) +
               proc_control_node_B.out1_tmp_oc * 2.9076309096921531E-5) -
              proc_control_node_B.t25_c * 0.013262028769951049)) +
    ((proc_control_node_B.t31_l * 0.0001026911824132076 -
      proc_control_node_B.t53 * 0.021882274381510681) + 0.01346511560461533);
  out1[9] = (((((((((((((((in2[0] * -1.725827915740819E-6 + in2[1] *
    -5.8281975682474322E-18) + in2[2] * 1.748241265284163E-6) + (in2[3] *
    1.740770148765829E-6 - in2[4] * 0.02095639900015615)) + (in2[5] *
    0.021100316216985739 - in2[6] * 0.021822949502860629)) + (in2[7] *
    0.02167903228603104 + proc_control_node_B.t8_f * 0.18635748921352191)) +
                      ((proc_control_node_B.t9_e * 0.18635748921352191 - in2[0] *
                        1.4142135623730951 * 4.8869263875916949E-5) + in2[1] *
                       1.4142135623730951 * 6.6264429389244648E-5)) + ((in2[2] *
    1.4142135623730951 * -4.8869263875916949E-5 + in2[3] * 1.4142135623730951 *
    6.7490056888775055E-5) + proc_control_node_B.t12_tmp * 0.0058758415205803329))
                    + ((proc_control_node_B.t13_tmp * 0.033540735888224739 +
                        proc_control_node_B.t14_tmp * 0.033540735888224739) -
                       proc_control_node_B.t15_tmp * 0.0058758415205803329)) +
                   (((proc_control_node_B.t11_in * 0.0002115171795569455 +
                      proc_control_node_B.t12_a * 0.002272431716587712) -
                     proc_control_node_B.t13_f * 2.9076309096921531E-5) +
                    proc_control_node_B.t14_k * 0.021384731826702759)) +
                  (((proc_control_node_B.t15 * 0.00039756137245743289 -
                     proc_control_node_B.t16 * 5.2828771531483014E-6) -
                    proc_control_node_B.t17_a * 0.00039756137245743289) +
                   proc_control_node_B.t18_i * 0.00090136558200456737)) +
                 (((proc_control_node_B.t19_o * 0.021384731826702759 -
                    proc_control_node_B.out1_tmp * 6.8231348244175949E-6) +
                   proc_control_node_B.out1_tmp_i * 5.2828771531483014E-6) +
                  proc_control_node_B.t69 * 0.002272431716587712)) +
                (((proc_control_node_B.out1_tmp_iz * -5.2828771531483014E-6 -
                   proc_control_node_B.out1_tmp_l * 0.66292668662778553) -
                  proc_control_node_B.out1_tmp_o * 2.9076309096921531E-5) -
                 proc_control_node_B.out1_tmp_p * 6.8231348244175949E-6)) +
               (((proc_control_node_B.t68_a * -0.00039756137245743289 -
                  proc_control_node_B.t70 * 0.002272431716587712) +
                 proc_control_node_B.out1_tmp_om * 6.8231348244175949E-6) -
                proc_control_node_B.t57_b * 0.070445383214219059)) +
              (((proc_control_node_B.t65_a * -5.2828771531483014E-6 -
                 proc_control_node_B.t54 * 0.00039756137245743289) +
                proc_control_node_B.out1_tmp_c * 2.9076309096921531E-5) +
               proc_control_node_B.t29_j * 0.01232440254618042)) +
             (((proc_control_node_B.t50 * -5.2828771531483014E-6 +
                proc_control_node_B.t64 * 0.002272431716587712) -
               proc_control_node_B.out1_tmp_oc * 0.021384731826702759) +
              proc_control_node_B.t25_c * 0.00016376919174759729)) +
    ((proc_control_node_B.t31_l * -0.00039756137245743289 +
      proc_control_node_B.t53 * 0.002272431716587712) - 0.093178744606760927);
  out1[10] = (((((((((((((((((in2[0] * 0.0013021350951669831 + in2[1] *
    6.1932883292401409E-19) + in2[2] * -0.00131904594055876) + (in2[3] *
    -0.0013134089920948341 - in2[4] * 0.26767193546582568)) + (in2[5] *
    0.26476621250220889 + in2[6] * 0.2790736050389333)) + (in2[7] *
    -0.27616788207531651 - proc_control_node_B.t8_f * 2.1047070084068991)) +
    ((in2[0] * 1.4142135623730951 * 0.043593198825375247 +
      proc_control_node_B.t9_e * -2.1047070084068991) - in2[1] *
     1.4142135623730951 * 0.043051831063235027)) + ((in2[2] * 1.4142135623730951
    * 0.043593198825375247 - in2[3] * 1.4142135623730951 * 0.043976565543532631)
    - proc_control_node_B.t12_tmp * 0.1138522338822895)) +
                       ((proc_control_node_B.t13_tmp * -25.242114556122988 -
    proc_control_node_B.t14_tmp * 25.242114556122988) +
                        proc_control_node_B.t15_tmp * 0.1138522338822895)) +
                      ((proc_control_node_B.t11_in * -0.0040409200239048832 -
                        proc_control_node_B.t12_a * 1.71018810547529) +
                       proc_control_node_B.t13_f * 0.021882274381510681)) +
                     ((proc_control_node_B.t14_k * -0.002272431716587712 -
                       proc_control_node_B.t15 * 0.0080268590155159435) +
                      proc_control_node_B.t16 * 0.0039859244840414)) +
                    ((proc_control_node_B.t17_a * 0.0080268590155159435 -
                      proc_control_node_B.t18_i * 0.678350505826831) -
                     proc_control_node_B.t19_o * 0.002272431716587712)) +
                   ((proc_control_node_B.out1_tmp * 0.0001303522588356414 -
                     proc_control_node_B.out1_tmp_i * 0.0039859244840414) -
                    proc_control_node_B.t69 * 1.71018810547529)) +
                  (((proc_control_node_B.out1_tmp_iz * 0.0039859244840414 +
                     proc_control_node_B.out1_tmp_l * 0.070445383214219059) +
                    proc_control_node_B.out1_tmp_o * 0.021882274381510681) +
                   proc_control_node_B.out1_tmp_p * 0.0001303522588356414)) +
                 ((proc_control_node_B.t68_a * 0.0080268590155159435 +
                   proc_control_node_B.t70 * 1.71018810547529) -
                  proc_control_node_B.out1_tmp_om * 0.0001303522588356414)) +
                ((proc_control_node_B.t57_b * 53.015831269733987 +
                  proc_control_node_B.t65_a * 0.0039859244840414) +
                 proc_control_node_B.t54 * 0.0080268590155159435)) +
               ((proc_control_node_B.out1_tmp_c * -0.021882274381510681 -
                 proc_control_node_B.t29_j * 0.2488326294809943) +
                proc_control_node_B.t50 * 0.0039859244840414)) +
              ((proc_control_node_B.t64 * -1.71018810547529 +
                proc_control_node_B.out1_tmp_oc * 0.002272431716587712) -
               proc_control_node_B.t25_c * 0.1235636590052834)) +
    ((proc_control_node_B.t31_l * 0.0080268590155159435 -
      proc_control_node_B.t53 * 1.71018810547529) + 1.0523535042034491);
  out1[11] = ((((((((((((((((in2[0] * 5.24748238233168E-7 - in2[1] *
    1.083514276897426E-19) + in2[2] * -5.3156315041823265E-7) + (in2[3] *
    -5.2929151302328333E-7 + in2[4] * 0.10593667623599359)) + (in2[5] *
    0.10537885436940329 - in2[6] * 0.10793139553633729)) + (in2[7] *
    -0.1033841350690595 + proc_control_node_B.t8_f * 0.36821797582524962)) +
                        ((in2[0] * 1.4142135623730951 * 0.013457654526727991 +
    proc_control_node_B.t9_e * 0.36821797582524962) + in2[1] *
    1.4142135623730951 * 0.013869054980635681)) + ((in2[2] * 1.4142135623730951 *
    0.013457654526727991 + in2[3] * 1.4142135623730951 * 0.01386868232130781) +
    proc_control_node_B.t12_tmp * 8.6371397256799973)) +
                      ((proc_control_node_B.t13_tmp * 0.1184627304742461 +
                        proc_control_node_B.t14_tmp * 0.1184627304742461) -
                       proc_control_node_B.t15_tmp * 8.6371397256799973)) +
                     (((proc_control_node_B.t11_in * 0.311032764122789 +
                        proc_control_node_B.t12_a * 0.0080268590155159435) -
                       proc_control_node_B.t13_f * 0.0001026911824132076) +
                      proc_control_node_B.t14_k * 0.00039756137245743289)) +
                    ((proc_control_node_B.t15 * 0.58374455968341665 +
                      proc_control_node_B.t16 * 1.606290206365557E-6) -
                     proc_control_node_B.t17_a * 0.58374455968341665)) +
                   (((proc_control_node_B.t18_i * 0.0031834266548094372 +
                      proc_control_node_B.t19_o * 0.00039756137245743289) -
                     proc_control_node_B.out1_tmp * 0.010033314971702871) -
                    proc_control_node_B.out1_tmp_i * 1.606290206365557E-6)) +
                  (((proc_control_node_B.t69 * 0.0080268590155159435 +
                     proc_control_node_B.out1_tmp_iz * 1.606290206365557E-6) -
                    proc_control_node_B.out1_tmp_l * 0.01232440254618042) -
                   proc_control_node_B.out1_tmp_o * 0.0001026911824132076)) +
                 ((proc_control_node_B.out1_tmp_p * -0.010033314971702871 -
                   proc_control_node_B.t68_a * 0.58374455968341665) -
                  proc_control_node_B.t70 * 0.0080268590155159435)) +
                ((proc_control_node_B.out1_tmp_om * 0.010033314971702871 -
                  proc_control_node_B.t57_b * 0.2488326294809943) +
                 proc_control_node_B.t65_a * 1.606290206365557E-6)) +
               ((proc_control_node_B.t54 * -0.58374455968341665 +
                 proc_control_node_B.out1_tmp_c * 0.0001026911824132076) +
                proc_control_node_B.t29_j * 18.096081350185919)) +
              (((proc_control_node_B.t50 * 1.606290206365557E-6 +
                 proc_control_node_B.t64 * 0.0080268590155159435) -
                proc_control_node_B.out1_tmp_oc * 0.00039756137245743289) -
               proc_control_node_B.t25_c * 4.9794996397332282E-5)) +
    ((proc_control_node_B.t31_l * -0.58374455968341665 + proc_control_node_B.t53
      * 0.0080268590155159435) - 0.18410898791262481);
  out1[12] = ((((((((((((((((in2[0] * -0.1731941163298826 + in2[1] *
    -1.4397960202092559E-21) + in2[2] * 0.175443390567933) + (in2[3] *
    0.17469363248858291 + in2[4] * 0.00062021813460420567)) + (in2[5] *
    -0.0006207996116589 - in2[6] * 0.00064672437426625525)) + (in2[7] *
    0.00064730585132094889 + proc_control_node_B.t8_f * 0.0048929560732764686))
                        + ((in2[0] * 1.4142135623730951 * 0.00059255494878017434
    + proc_control_node_B.t9_e * 0.0048929560732764686) - in2[1] *
    1.4142135623730951 * 0.1225770464045467)) + ((in2[2] * 1.4142135623730951 *
    0.00059255494878017434 + in2[3] * 1.4142135623730951 *
    0.00041984673608298361) - proc_control_node_B.t12_tmp * 0.65361132374006825))
                      + ((proc_control_node_B.t13_tmp * 0.38451002147839958 +
    proc_control_node_B.t14_tmp * 0.38451002147839958) +
    proc_control_node_B.t15_tmp * 0.65361132374006825)) +
                     (((proc_control_node_B.t11_in * -0.031387639110527318 +
                        proc_control_node_B.t12_a * 0.0039859244840414) -
                       proc_control_node_B.t13_f * 0.00042780737967584029) +
                      proc_control_node_B.t14_k * 5.2828771531483014E-6)) +
                    (((proc_control_node_B.t15 * -1.606290206365557E-6 -
                       proc_control_node_B.t16 * 0.53015902215788635) +
                      proc_control_node_B.t17_a * 1.606290206365557E-6) +
                     proc_control_node_B.t18_i * 0.013262028769951049)) +
                   (((proc_control_node_B.t19_o * 5.2828771531483014E-6 +
                      proc_control_node_B.out1_tmp * 0.0010125044874363649) +
                     proc_control_node_B.out1_tmp_i * 0.53015902215788635) +
                    proc_control_node_B.t69 * 0.0039859244840414)) +
                  ((proc_control_node_B.out1_tmp_iz * -0.53015902215788635 -
                    proc_control_node_B.out1_tmp_l * 0.00016376919174759729) -
                   proc_control_node_B.out1_tmp_o * 0.00042780737967584029)) +
                 (((proc_control_node_B.out1_tmp_p * 0.0010125044874363649 +
                    proc_control_node_B.t68_a * 1.606290206365557E-6) -
                   proc_control_node_B.t70 * 0.0039859244840414) -
                  proc_control_node_B.out1_tmp_om * 0.0010125044874363649)) +
                ((proc_control_node_B.t57_b * -0.1235636590052834 -
                  proc_control_node_B.t65_a * 0.53015902215788635) +
                 proc_control_node_B.t54 * 1.606290206365557E-6)) +
               ((proc_control_node_B.out1_tmp_c * 0.00042780737967584029 -
                 proc_control_node_B.t29_j * 4.9794996397332282E-5) -
                proc_control_node_B.t50 * 0.53015902215788635)) +
              (((proc_control_node_B.t64 * 0.0039859244840414 -
                 proc_control_node_B.out1_tmp_oc * 5.2828771531483014E-6) +
                proc_control_node_B.t25_c * 16.434929686894481) +
               proc_control_node_B.t31_l * 1.606290206365557E-6)) +
    (proc_control_node_B.t53 * 0.0039859244840414 - 0.0024464780366382352);
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_stateEvolution(const real_T
  X[143], const real_T U[88], real_T c[130], real_T J[19110])
{
  int32_T Ak1_tmp;
  int32_T Jx_tmp;
  int32_T c_tmp;
  int32_T i;
  int32_T k;
  static const int8_T Iz2u[1280] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const real_T val[104] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.002112443491058583, -0.0015284356933675683, -7.0837403672252151E-6,
    0.0062952228101239545, 0.0019032522297668638, -0.017235611708486639, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021112545591001931, 0.001555652319878204,
    9.371205474517828E-6, -0.0060884483374622281, 0.0019613805650913105,
    -0.017335012146094616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021790267284400532, -0.0015565687047941388, -6.7363334491227172E-6,
    0.00603310470655138, 0.0019031465986279986, 0.017628138981294922, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0021778377964816625, 0.0015275193084516327,
    9.7186123926203251E-6, -0.0063505664410348026, 0.001961274933952446,
    0.017528738543686955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00018196388647192952, -0.00034249251816346321, -0.0020956399000156153,
    -0.026767193546582569, 0.010593667623599361, 6.2021813460420573E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.00018124211550371483, 0.00033877509736010515,
    0.0021100316216985742, 0.026476621250220891, 0.01053788543694033,
    -6.207996116589E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00018538731733468782, 0.00035708122797193444, -0.0021822949502860629,
    0.027907360503893332, -0.010793139553633729, -6.4672437426625527E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00017781868464095571,
    -0.00035336380716857632, 0.002167903228603104, -0.027616788207531651,
    -0.010338413506905951, 6.4730585132094889E-5 };

  memset(&proc_control_node_B.Jx_p[0], 0, 16900U * sizeof(real_T));
  memset(&proc_control_node_B.Jmv[0], 0, 10400U * sizeof(real_T));
  memset(&c[0], 0, 130U * sizeof(real_T));
  for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
    proc_control_node_B.ic_f[Jx_tmp] = static_cast<real_T>(Jx_tmp) + 1.0;
  }

  for (Jx_tmp = 0; Jx_tmp < 11; Jx_tmp++) {
    for (i = 0; i < 8; i++) {
      proc_control_node_B.b_U[i + (Jx_tmp << 3)] = U[11 * i + Jx_tmp];
    }

    for (i = 0; i < 13; i++) {
      proc_control_node_B.b_X[i + 13 * Jx_tmp] = X[11 * i + Jx_tmp];
    }
  }

  for (i = 0; i < 10; i++) {
    proc_cont_AUVQuatJacobianMatrix(&proc_control_node_B.b_X[13 * i],
      proc_control_node_B.Ak);
    Ak1_tmp = (i + 1) * 13;
    proc_cont_AUVQuatJacobianMatrix(&proc_control_node_B.b_X[Ak1_tmp],
      proc_control_node_B.Ak1);
    Jx_tmp = i << 3;
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X[13 * i],
      &proc_control_node_B.b_U[Jx_tmp], proc_control_node_B.dv21);
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X[Ak1_tmp],
      &proc_control_node_B.b_U[Jx_tmp], proc_control_node_B.dv22);
    for (k = 0; k < 13; k++) {
      c_tmp = static_cast<int32_T>(proc_control_node_B.ic_f[k]);
      c[c_tmp - 1] = (proc_control_node_B.b_X[13 * i + k] +
                      (proc_control_node_B.dv21[k] + proc_control_node_B.dv22[k])
                      * 0.05) - proc_control_node_B.b_X[Ak1_tmp + k];
      if (i + 1 > 1) {
        for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
          proc_control_node_B.Jx_p[((static_cast<int32_T>
            (proc_control_node_B.ic_f[Jx_tmp]) + 130 * k) + 1690 * (i - 1)) - 1]
            = proc_control_node_B.Ak[13 * k + Jx_tmp] * 0.05;
        }

        proc_control_node_B.Jx_p[((static_cast<int32_T>
          (proc_control_node_B.ic_f[k]) + 130 * k) + 1690 * (i - 1)) - 1] =
          proc_control_node_B.Jx_p[((130 * k + c_tmp) + (i - 1) * 1690) - 1] +
          1.0;
      }
    }

    for (k = 0; k < 13; k++) {
      for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
        proc_control_node_B.Jx_p[((static_cast<int32_T>
          (proc_control_node_B.ic_f[Jx_tmp]) + 130 * k) + 1690 * i) - 1] =
          proc_control_node_B.Ak1[13 * k + Jx_tmp] * 0.05;
      }

      Jx_tmp = ((130 * k + static_cast<int32_T>(proc_control_node_B.ic_f[k])) +
                1690 * i) - 1;
      proc_control_node_B.Jx_p[Jx_tmp]--;
    }

    for (k = 0; k < 8; k++) {
      for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
        proc_control_node_B.Jmv[((static_cast<int32_T>
          (proc_control_node_B.ic_f[Jx_tmp]) + 130 * k) + 1040 * i) - 1] = val
          [13 * k + Jx_tmp];
      }
    }

    for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
      proc_control_node_B.ic_f[Jx_tmp] += 13.0;
    }
  }

  for (Jx_tmp = 0; Jx_tmp < 130; Jx_tmp++) {
    for (i = 0; i < 16; i++) {
      k = i + (Jx_tmp << 4);
      proc_control_node_B.Jmv_m[k] = 0.0;
      for (Ak1_tmp = 0; Ak1_tmp < 80; Ak1_tmp++) {
        proc_control_node_B.Jmv_m[k] += proc_control_node_B.Jmv[130 * Ak1_tmp +
          Jx_tmp] * static_cast<real_T>(Iz2u[80 * i + Ak1_tmp]);
      }
    }

    for (i = 0; i < 130; i++) {
      J[i + 147 * Jx_tmp] = proc_control_node_B.Jx_p[130 * i + Jx_tmp];
    }

    memcpy(&J[Jx_tmp * 147 + 130], &proc_control_node_B.Jmv_m[Jx_tmp << 4],
           sizeof(real_T) << 4U);
    J[147 * Jx_tmp + 146] = 0.0;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_all(const boolean_T x[130],
  boolean_T y[13])
{
  int32_T i;
  int32_T i2;
  int32_T ix;
  boolean_T exitg1;
  i2 = 1;
  for (i = 0; i < 13; i++) {
    y[i] = true;
    ix = i2;
    i2 += 10;
    exitg1 = false;
    while ((!exitg1) && (ix <= i2 - 1)) {
      if (!x[ix - 1]) {
        y[i] = false;
        exitg1 = true;
      } else {
        ix++;
      }
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_isfinite_k(const real_T x[13],
  boolean_T b[13])
{
  int32_T i;
  for (i = 0; i < 13; i++) {
    proc_control_node_B.x_j = x[i];
    b[i] = ((!rtIsInf(proc_control_node_B.x_j)) && (!rtIsNaN
             (proc_control_node_B.x_j)));
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_any(const boolean_T x
  [26])
{
  int32_T k;
  boolean_T exitg1;
  boolean_T y;
  y = false;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k <= 25)) {
    if (!x[k]) {
      k++;
    } else {
      y = true;
      exitg1 = true;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_cont_znlmpc_reformJacobian(const real_T
  Jx_data[], const int32_T Jx_size[3], const real_T Jmv_data[], const real_T
  Je_data[], const int32_T *Je_size, real_T Jc_data[], int32_T Jc_size[2])
{
  if (Jx_size[0] == 0) {
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    proc_control_node_B.Jx_n[0] = static_cast<int16_T>(Jx_size[0]);
    proc_control_node_B.Jx_n[1] = 130;
    proc_control_node_B.varargin_1_size_idx_1_tmp = static_cast<int16_T>
      (Jx_size[0]);
    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 <
         proc_control_node_B.varargin_1_size_idx_1_tmp; proc_control_node_B.i8++)
    {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 130;
           proc_control_node_B.i7++) {
        proc_control_node_B.varargin_1_data[proc_control_node_B.i7 + 130 *
          proc_control_node_B.i8] = Jx_data[proc_control_node_B.i8 +
          proc_control_node_B.Jx_n[0] * proc_control_node_B.i7];
      }
    }

    proc_control_node_B.Jx_d[0] = Jx_size[0];
    proc_control_node_B.Jx_d[1] = 80;
    proc_control_node_mtimes(Jmv_data, proc_control_node_B.Jx_d,
      proc_control_node_B.tmp_data_g, proc_control_node_B.tmp_size);
    proc_control_node_B.loop_ub_c = proc_control_node_B.tmp_size[0];
    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 <
         proc_control_node_B.loop_ub_c; proc_control_node_B.i8++) {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 16;
           proc_control_node_B.i7++) {
        proc_control_node_B.varargin_2_data[proc_control_node_B.i7 +
          (proc_control_node_B.i8 << 4)] =
          proc_control_node_B.tmp_data_g[proc_control_node_B.i8 +
          proc_control_node_B.tmp_size[0] * proc_control_node_B.i7];
      }
    }

    if (proc_control_node_B.tmp_size[0] != 0) {
      proc_control_node_B.empty_non_axis_sizes_idx_0 = 16;
    } else {
      proc_control_node_B.empty_non_axis_sizes_idx_0 = 0;
    }

    proc_control_node_B.loop_ub_c = *Je_size;
    if (0 <= proc_control_node_B.loop_ub_c - 1) {
      memcpy(&proc_control_node_B.Je_data[0], &Je_data[0],
             proc_control_node_B.loop_ub_c * sizeof(real_T));
    }

    proc_control_node_B.Jx_n[0] = (static_cast<int16_T>(*Je_size) != 0);
    proc_control_node_B.Jx_n[1] = static_cast<int16_T>(Jx_size[0]);
    Jc_size[0] = (proc_control_node_B.empty_non_axis_sizes_idx_0 +
                  proc_control_node_B.Jx_n[0]) + 130;
    Jc_size[1] = static_cast<int16_T>(Jx_size[0]);
    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 <
         proc_control_node_B.varargin_1_size_idx_1_tmp; proc_control_node_B.i8++)
    {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 130;
           proc_control_node_B.i7++) {
        Jc_data[proc_control_node_B.i7 + Jc_size[0] * proc_control_node_B.i8] =
          proc_control_node_B.varargin_1_data[proc_control_node_B.i7 + 130 *
          proc_control_node_B.i8];
      }
    }

    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 <
         proc_control_node_B.varargin_1_size_idx_1_tmp; proc_control_node_B.i8++)
    {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 <
           proc_control_node_B.empty_non_axis_sizes_idx_0;
           proc_control_node_B.i7++) {
        Jc_data[(proc_control_node_B.i7 + Jc_size[0] * proc_control_node_B.i8) +
          130] = proc_control_node_B.varargin_2_data[proc_control_node_B.i7 +
          (proc_control_node_B.i8 << 4)];
      }
    }

    proc_control_node_B.loop_ub_c = static_cast<int16_T>(Jx_size[0]);
    if (0 <= proc_control_node_B.Jx_n[0] - 1) {
      for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 <
           proc_control_node_B.loop_ub_c; proc_control_node_B.i8++) {
        Jc_data[(proc_control_node_B.empty_non_axis_sizes_idx_0 + Jc_size[0] *
                 proc_control_node_B.i8) + 130] =
          proc_control_node_B.Je_data[proc_control_node_B.Jx_n[0] *
          proc_control_node_B.i8];
      }
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_outputBounds(const real_T
  runtimedata_OutputMin[130], const real_T runtimedata_OutputMax[130], const
  real_T X[143], real_T e, real_T c_data[], int32_T c_size[2], real_T Jc_data[],
  int32_T Jc_size[2])
{
  boolean_T exitg1;
  boolean_T y;
  for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 130;
       proc_control_node_B.i_hc++) {
    proc_control_node_B.bv[proc_control_node_B.i_hc] = rtIsInf
      (runtimedata_OutputMin[proc_control_node_B.i_hc]);
  }

  proc_control_node_all(proc_control_node_B.bv, proc_control_node_B.x);
  y = true;
  proc_control_node_B.d_k = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.d_k < 13)) {
    if (!proc_control_node_B.x[proc_control_node_B.d_k]) {
      y = false;
      exitg1 = true;
    } else {
      proc_control_node_B.d_k++;
    }
  }

  if (y) {
    for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 130;
         proc_control_node_B.i_hc++) {
      proc_control_node_B.bv[proc_control_node_B.i_hc] = rtIsInf
        (runtimedata_OutputMax[proc_control_node_B.i_hc]);
    }

    proc_control_node_all(proc_control_node_B.bv, proc_control_node_B.x);
    proc_control_node_B.d_k = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.d_k < 13)) {
      if (!proc_control_node_B.x[proc_control_node_B.d_k]) {
        y = false;
        exitg1 = true;
      } else {
        proc_control_node_B.d_k++;
      }
    }
  }

  if (y) {
    c_size[0] = 0;
    c_size[1] = 0;
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 260;
         proc_control_node_B.i_hc++) {
      proc_control_node_B.b_c[proc_control_node_B.i_hc] = 0.0;
      proc_control_node_B.icf_p[proc_control_node_B.i_hc] = true;
    }

    memset(&proc_control_node_B.Jx[0], 0, 33800U * sizeof(real_T));
    memset(&proc_control_node_B.Je[0], 0, 260U * sizeof(int8_T));
    for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 13;
         proc_control_node_B.i_hc++) {
      proc_control_node_B.ic_h[proc_control_node_B.i_hc] = static_cast<real_T>
        (proc_control_node_B.i_hc) + 1.0;
    }

    for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 10;
         proc_control_node_B.d_k++) {
      for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 13;
           proc_control_node_B.i_hc++) {
        proc_control_node_B.runtimedata_OutputMin[proc_control_node_B.i_hc] =
          runtimedata_OutputMin[10 * proc_control_node_B.i_hc +
          proc_control_node_B.d_k];
      }

      proc_control_node_isfinite_k(proc_control_node_B.runtimedata_OutputMin,
        proc_control_node_B.x);
      for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 13;
           proc_control_node_B.i_hc++) {
        proc_control_node_B.icf_p[static_cast<int32_T>
          (proc_control_node_B.ic_h[proc_control_node_B.i_hc]) - 1] =
          proc_control_node_B.x[proc_control_node_B.i_hc];
        proc_control_node_B.runtimedata_OutputMin[proc_control_node_B.i_hc] =
          runtimedata_OutputMax[10 * proc_control_node_B.i_hc +
          proc_control_node_B.d_k];
      }

      proc_control_node_isfinite_k(proc_control_node_B.runtimedata_OutputMin,
        proc_control_node_B.x);
      for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 13;
           proc_control_node_B.i_hc++) {
        proc_control_node_B.ic_e =
          proc_control_node_B.ic_h[proc_control_node_B.i_hc];
        proc_control_node_B.icf_p[static_cast<int32_T>(proc_control_node_B.ic_e
          + 13.0) - 1] = proc_control_node_B.x[proc_control_node_B.i_hc];
        proc_control_node_B.ic[proc_control_node_B.i_hc] = static_cast<int32_T>
          (proc_control_node_B.ic_e) - 1;
        proc_control_node_B.ic[proc_control_node_B.i_hc + 13] =
          static_cast<int32_T>(proc_control_node_B.ic_e + 13.0) - 1;
      }

      for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 26;
           proc_control_node_B.i_hc++) {
        proc_control_node_B.icf_j[proc_control_node_B.i_hc] =
          proc_control_node_B.icf_p[proc_control_node_B.ic[proc_control_node_B.i_hc]];
      }

      if (proc_control_node_any(proc_control_node_B.icf_j)) {
        memset(&proc_control_node_B.Ck[0], 0, 169U * sizeof(int8_T));
        for (proc_control_node_B.c_k_j = 0; proc_control_node_B.c_k_j < 13;
             proc_control_node_B.c_k_j++) {
          proc_control_node_B.Ck[proc_control_node_B.c_k_j + 13 *
            proc_control_node_B.c_k_j] = 1;
          proc_control_node_B.b_c[static_cast<int32_T>
            (proc_control_node_B.ic_h[proc_control_node_B.c_k_j]) - 1] =
            (runtimedata_OutputMin[10 * proc_control_node_B.c_k_j +
             proc_control_node_B.d_k] - e) - X[(11 * proc_control_node_B.c_k_j +
            proc_control_node_B.d_k) + 1];
        }

        for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 13;
             proc_control_node_B.i_hc++) {
          proc_control_node_B.b_c[static_cast<int32_T>
            (proc_control_node_B.ic_h[proc_control_node_B.i_hc] + 13.0) - 1] =
            (X[(11 * proc_control_node_B.i_hc + proc_control_node_B.d_k) + 1] -
             runtimedata_OutputMax[10 * proc_control_node_B.i_hc +
             proc_control_node_B.d_k]) - e;
        }

        for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 169;
             proc_control_node_B.i_hc++) {
          proc_control_node_B.val[proc_control_node_B.i_hc] = static_cast<int8_T>
            (-proc_control_node_B.Ck[proc_control_node_B.i_hc]);
        }

        for (proc_control_node_B.c_k_j = 0; proc_control_node_B.c_k_j < 13;
             proc_control_node_B.c_k_j++) {
          for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 13;
               proc_control_node_B.i_hc++) {
            proc_control_node_B.Jx[((static_cast<int32_T>
              (proc_control_node_B.ic_h[proc_control_node_B.i_hc]) + 260 *
              proc_control_node_B.c_k_j) + 3380 * proc_control_node_B.d_k) - 1] =
              proc_control_node_B.val[13 * proc_control_node_B.c_k_j +
              proc_control_node_B.i_hc];
          }
        }

        for (proc_control_node_B.c_k_j = 0; proc_control_node_B.c_k_j < 13;
             proc_control_node_B.c_k_j++) {
          for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 13;
               proc_control_node_B.i_hc++) {
            proc_control_node_B.Jx[((static_cast<int32_T>
              (proc_control_node_B.ic_h[proc_control_node_B.i_hc] + 13.0) + 260 *
              proc_control_node_B.c_k_j) + 3380 * proc_control_node_B.d_k) - 1] =
              proc_control_node_B.Ck[13 * proc_control_node_B.c_k_j +
              proc_control_node_B.i_hc];
          }

          proc_control_node_B.Je[static_cast<int32_T>
            (proc_control_node_B.ic_h[proc_control_node_B.c_k_j]) - 1] = -1;
        }

        for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 13;
             proc_control_node_B.i_hc++) {
          proc_control_node_B.Je[static_cast<int32_T>
            (proc_control_node_B.ic_h[proc_control_node_B.i_hc] + 13.0) - 1] =
            -1;
        }
      }

      for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 13;
           proc_control_node_B.i_hc++) {
        proc_control_node_B.ic_h[proc_control_node_B.i_hc] += 26.0;
      }
    }

    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.c_k_j = 0; proc_control_node_B.c_k_j < 260;
         proc_control_node_B.c_k_j++) {
      if (proc_control_node_B.icf_p[proc_control_node_B.c_k_j]) {
        proc_control_node_B.d_k++;
      }
    }

    proc_control_node_B.b_size_idx_0 = proc_control_node_B.d_k;
    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.c_k_j = 0; proc_control_node_B.c_k_j < 260;
         proc_control_node_B.c_k_j++) {
      if (proc_control_node_B.icf_p[proc_control_node_B.c_k_j]) {
        proc_control_node_B.b_data_e[proc_control_node_B.d_k] =
          static_cast<int16_T>(proc_control_node_B.c_k_j + 1);
        proc_control_node_B.d_k++;
      }
    }

    for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc <
         proc_control_node_B.b_size_idx_0; proc_control_node_B.i_hc++) {
      proc_control_node_B.b_c_data[proc_control_node_B.i_hc] =
        proc_control_node_B.b_c[proc_control_node_B.b_data_e[proc_control_node_B.i_hc]
        - 1];
    }

    c_size[0] = proc_control_node_B.b_size_idx_0;
    c_size[1] = 1;
    if (0 <= proc_control_node_B.b_size_idx_0 - 1) {
      memcpy(&c_data[0], &proc_control_node_B.b_c_data[0],
             proc_control_node_B.b_size_idx_0 * sizeof(real_T));
    }

    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.c_k_j = 0; proc_control_node_B.c_k_j < 260;
         proc_control_node_B.c_k_j++) {
      if (proc_control_node_B.icf_p[proc_control_node_B.c_k_j]) {
        proc_control_node_B.d_k++;
      }
    }

    proc_control_node_B.b_size_idx_0 = proc_control_node_B.d_k;
    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.c_k_j = 0; proc_control_node_B.c_k_j < 260;
         proc_control_node_B.c_k_j++) {
      if (proc_control_node_B.icf_p[proc_control_node_B.c_k_j]) {
        proc_control_node_B.d_data[proc_control_node_B.d_k] =
          static_cast<int16_T>(proc_control_node_B.c_k_j + 1);
        proc_control_node_B.d_k++;
      }
    }

    proc_control_node_B.Jx_size[0] = proc_control_node_B.b_size_idx_0;
    proc_control_node_B.Jx_size[1] = 13;
    proc_control_node_B.Jx_size[2] = 10;
    for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc < 10;
         proc_control_node_B.i_hc++) {
      for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 13;
           proc_control_node_B.d_k++) {
        for (proc_control_node_B.c_k_j = 0; proc_control_node_B.c_k_j <
             proc_control_node_B.b_size_idx_0; proc_control_node_B.c_k_j++) {
          proc_control_node_B.Jx_data[(proc_control_node_B.c_k_j +
            proc_control_node_B.b_size_idx_0 * proc_control_node_B.d_k) +
            proc_control_node_B.b_size_idx_0 * 13 * proc_control_node_B.i_hc] =
            proc_control_node_B.Jx[((260 * proc_control_node_B.d_k +
            proc_control_node_B.d_data[proc_control_node_B.c_k_j]) + 3380 *
            proc_control_node_B.i_hc) - 1];
        }
      }

      for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 8;
           proc_control_node_B.d_k++) {
        for (proc_control_node_B.c_k_j = 0; proc_control_node_B.c_k_j <
             proc_control_node_B.b_size_idx_0; proc_control_node_B.c_k_j++) {
          proc_control_node_B.tmp_data[(proc_control_node_B.c_k_j +
            proc_control_node_B.b_size_idx_0 * proc_control_node_B.d_k) +
            (proc_control_node_B.b_size_idx_0 << 3) * proc_control_node_B.i_hc] =
            0.0;
        }
      }
    }

    proc_control_node_B.b_c_size = proc_control_node_B.b_size_idx_0;
    for (proc_control_node_B.i_hc = 0; proc_control_node_B.i_hc <
         proc_control_node_B.b_size_idx_0; proc_control_node_B.i_hc++) {
      proc_control_node_B.b_c_data[proc_control_node_B.i_hc] =
        proc_control_node_B.Je[proc_control_node_B.d_data[proc_control_node_B.i_hc]
        - 1];
    }

    proc_cont_znlmpc_reformJacobian(proc_control_node_B.Jx_data,
      proc_control_node_B.Jx_size, proc_control_node_B.tmp_data,
      proc_control_node_B.b_c_data, &proc_control_node_B.b_c_size, Jc_data,
      Jc_size);
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_anon(const real_T
  runtimedata_x[13], const real_T runtimedata_OutputMin[130], const real_T
  runtimedata_OutputMax[130], const real_T z[147], real_T varargout_1_data[],
  int32_T varargout_1_size[2], real_T varargout_2[130], real_T varargout_3_data[],
  int32_T varargout_3_size[2], real_T varargout_4[19110])
{
  proc_control_node_znlmpc_getXUe(z, runtimedata_x, proc_control_node_B.X,
    proc_control_node_B.U_f, &proc_control_node_B.e);
  proc_control_nod_stateEvolution(proc_control_node_B.X, proc_control_node_B.U_f,
    varargout_2, varargout_4);
  proc_control_node_outputBounds(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_node_B.X, proc_control_node_B.e, proc_control_node_B.c_data_p,
    proc_control_node_B.c_size, proc_control_node_B.Jc_data,
    proc_control_node_B.Jc_size);
  proc_control_node_B.result = ((proc_control_node_B.c_size[0] != 0) &&
    (proc_control_node_B.c_size[1] != 0));
  if ((proc_control_node_B.Jc_size[0] != 0) && (proc_control_node_B.Jc_size[1]
       != 0)) {
    proc_control_node_B.c_result = proc_control_node_B.Jc_size[0];
  } else {
    proc_control_node_B.c_result = 0;
  }

  if (proc_control_node_B.result == 0) {
    proc_control_node_B.result_idx_0 = proc_control_node_B.c_size[0];
  } else if ((proc_control_node_B.c_size[0] != 0) &&
             (proc_control_node_B.c_size[1] != 0)) {
    proc_control_node_B.result_idx_0 = proc_control_node_B.c_size[0];
  } else {
    proc_control_node_B.result_idx_0 = 0;
  }

  varargout_1_size[0] = proc_control_node_B.result_idx_0;
  varargout_1_size[1] = proc_control_node_B.result;
  if ((0 <= proc_control_node_B.result - 1) && (0 <=
       proc_control_node_B.result_idx_0 - 1)) {
    memcpy(&varargout_1_data[0], &proc_control_node_B.c_data_p[0],
           proc_control_node_B.result_idx_0 * sizeof(real_T));
  }

  varargout_3_size[0] = proc_control_node_B.c_result;
  if (proc_control_node_B.c_result == 0) {
    varargout_3_size[1] = proc_control_node_B.Jc_size[1];
    proc_control_node_B.result = proc_control_node_B.Jc_size[1];
  } else if ((proc_control_node_B.Jc_size[0] != 0) &&
             (proc_control_node_B.Jc_size[1] != 0)) {
    varargout_3_size[1] = proc_control_node_B.Jc_size[1];
    proc_control_node_B.result = proc_control_node_B.Jc_size[1];
  } else {
    varargout_3_size[1] = 0;
    proc_control_node_B.result = 0;
  }

  proc_control_node_B.result_idx_0 = proc_control_node_B.c_result *
    proc_control_node_B.result;
  if (0 <= proc_control_node_B.result_idx_0 - 1) {
    memcpy(&varargout_3_data[0], &proc_control_node_B.Jc_data[0],
           proc_control_node_B.result_idx_0 * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_factoryConstruct(int32_T
  nVarMax, int32_T mConstrMax, int32_T mIneq, int32_T mNonlinIneq,
  s_UjlJWoQEHmSUKFcPTad7eC_proc_T *obj)
{
  obj->nVarMax = nVarMax;
  obj->mNonlinIneq = mNonlinIneq;
  obj->mNonlinEq = 130;
  obj->mIneq = mIneq;
  obj->mEq = 130;
  obj->iNonIneq0 = (mIneq - mNonlinIneq) + 1;
  obj->iNonEq0 = 1;
  obj->sqpFval = 0.0;
  obj->sqpFval_old = 0.0;
  obj->cIneq.size = mIneq;
  obj->cIneq_old.size = mIneq;
  obj->grad.size = nVarMax;
  obj->grad_old.size = nVarMax;
  obj->FunctionEvaluations = 0;
  obj->sqpIterations = 0;
  obj->sqpExitFlag = 0;
  obj->lambdasqp.size = mConstrMax;
  if (0 <= mConstrMax - 1) {
    memset(&obj->lambdasqp.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->lambdaStopTest.size = mConstrMax;
  obj->lambdaStopTestPrev.size = mConstrMax;
  obj->steplength = 1.0;
  obj->delta_x.size = nVarMax;
  if (0 <= nVarMax - 1) {
    memset(&obj->delta_x.data[0], 0, nVarMax * sizeof(real_T));
  }

  obj->socDirection.size = nVarMax;
  obj->workingset_old.size = mConstrMax;
  if (mNonlinIneq > 0) {
    obj->JacCineqTrans_old.size[0] = nVarMax;
    obj->JacCineqTrans_old.size[1] = mNonlinIneq;
  } else {
    obj->JacCineqTrans_old.size[0] = 0;
    obj->JacCineqTrans_old.size[1] = 0;
  }

  obj->JacCeqTrans_old.size[0] = nVarMax;
  obj->JacCeqTrans_old.size[1] = 130;
  obj->gradLag.size = nVarMax;
  obj->delta_gradLag.size = nVarMax;
  obj->xstar.size = nVarMax;
  obj->fstar = 0.0;
  obj->firstorderopt = 0.0;
  obj->lambda.size = mConstrMax;
  if (0 <= mConstrMax - 1) {
    memset(&obj->lambda.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->state = 0;
  obj->maxConstr = 0.0;
  obj->iterations = 0;
  obj->searchDir.size = nVarMax;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_cont_factoryConstruct_lnz4(int32_T
  MaxVars, int32_T *obj_grad_size, int32_T *obj_Hx_size, boolean_T
  *obj_hasLinear, int32_T *obj_nvar, int32_T *obj_maxVar, real_T *obj_beta,
  real_T *obj_rho, int32_T *obj_objtype, int32_T *obj_prev_objtype, int32_T
  *obj_prev_nvar, boolean_T *obj_prev_hasLinear, real_T *obj_gammaScalar)
{
  *obj_grad_size = MaxVars;
  *obj_Hx_size = MaxVars - 1;
  *obj_hasLinear = false;
  *obj_nvar = 0;
  *obj_maxVar = MaxVars;
  *obj_beta = 0.0;
  *obj_rho = 0.0;
  *obj_objtype = 3;
  *obj_prev_objtype = 3;
  *obj_prev_nvar = 0;
  *obj_prev_hasLinear = false;
  *obj_gammaScalar = 0.0;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_con_factoryConstruct_lnz42(int32_T
  mIneqMax, int32_T nVarMax, int32_T mConstrMax, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *obj)
{
  int32_T i;
  obj->mConstr = 0;
  obj->mConstrOrig = 0;
  obj->mConstrMax = mConstrMax;
  obj->nVar = 147;
  obj->nVarOrig = 147;
  obj->nVarMax = nVarMax;
  obj->ldA = nVarMax;
  obj->Aineq.size = mIneqMax * nVarMax;
  obj->bineq.size = mIneqMax;
  obj->Aeq.size = 130 * nVarMax;
  obj->lb.size = nVarMax;
  obj->ub.size = nVarMax;
  obj->indexLB.size = nVarMax;
  obj->indexUB.size = nVarMax;
  obj->indexFixed.size = nVarMax;
  obj->mEqRemoved = 0;
  obj->ATwset.size = nVarMax * mConstrMax;
  obj->bwset.size = mConstrMax;
  obj->nActiveConstr = 0;
  obj->maxConstrWorkspace.size = mConstrMax;
  for (i = 0; i < 5; i++) {
    obj->sizes[i] = 0;
    obj->sizesNormal[i] = 0;
    obj->sizesPhaseOne[i] = 0;
    obj->sizesRegularized[i] = 0;
    obj->sizesRegPhaseOne[i] = 0;
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdx[i] = 0;
    obj->isActiveIdxNormal[i] = 0;
    obj->isActiveIdxPhaseOne[i] = 0;
    obj->isActiveIdxRegularized[i] = 0;
    obj->isActiveIdxRegPhaseOne[i] = 0;
  }

  obj->isActiveConstr.size = mConstrMax;
  obj->Wid.size = mConstrMax;
  obj->Wlocalidx.size = mConstrMax;
  for (i = 0; i < 5; i++) {
    obj->nWConstr[i] = 0;
  }

  obj->probType = 3;
  obj->SLACK0 = 1.0E-5;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_loadProblem
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, int32_T mIneq, int32_T mLinIneq, const
   real_T Aineq_data[], int32_T mLB, int32_T mUB, int32_T mFixed, int32_T
   mConstrMax)
{
  int32_T b_idx_col;
  int32_T i;
  b_idx_col = mIneq + mLB;
  i = ((b_idx_col + mUB) + mFixed) + 130;
  obj->mConstr = i;
  obj->mConstrOrig = i;
  obj->mConstrMax = mConstrMax;
  obj->sizes[0] = mFixed;
  obj->sizes[1] = 130;
  obj->sizes[2] = mIneq;
  obj->sizes[3] = mLB;
  obj->sizes[4] = mUB;
  for (i = 0; i < 5; i++) {
    obj->sizesNormal[i] = obj->sizes[i];
  }

  obj->sizesPhaseOne[0] = mFixed;
  obj->sizesPhaseOne[1] = 130;
  obj->sizesPhaseOne[2] = mIneq;
  obj->sizesPhaseOne[3] = mLB + 1;
  obj->sizesPhaseOne[4] = mUB;
  obj->sizesRegularized[0] = mFixed;
  obj->sizesRegularized[1] = 130;
  obj->sizesRegularized[2] = mIneq;
  obj->sizesRegularized[3] = b_idx_col + 260;
  obj->sizesRegularized[4] = mUB;
  obj->sizesRegPhaseOne[0] = mFixed;
  obj->sizesRegPhaseOne[1] = 130;
  obj->sizesRegPhaseOne[2] = mIneq;
  obj->sizesRegPhaseOne[3] = b_idx_col + 261;
  obj->sizesRegPhaseOne[4] = mUB;
  proc_control_node_B.x_tmp[0] = 1;
  proc_control_node_B.x_tmp[1] = mFixed;
  proc_control_node_B.x_tmp[2] = 130;
  proc_control_node_B.x_tmp[3] = mIneq;
  proc_control_node_B.x_tmp[4] = mLB;
  proc_control_node_B.x_tmp[5] = mUB;
  for (i = 0; i < 6; i++) {
    obj->isActiveIdxRegPhaseOne[i] = proc_control_node_B.x_tmp[i];
  }

  for (i = 0; i < 5; i++) {
    obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdx[i] = obj->isActiveIdxRegPhaseOne[i];
    obj->isActiveIdxRegPhaseOne[i] = proc_control_node_B.x_tmp[i];
  }

  for (i = 0; i < 5; i++) {
    obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdxNormal[i] = obj->isActiveIdxRegPhaseOne[i];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = mLB + 1;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (i = 0; i < 5; i++) {
    obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdxPhaseOne[i] = obj->isActiveIdxRegPhaseOne[i];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = b_idx_col + 260;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (i = 0; i < 5; i++) {
    obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdxRegularized[i] = obj->isActiveIdxRegPhaseOne[i];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = b_idx_col + 261;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (i = 0; i < 5; i++) {
    obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
  }

  if (mIneq > 0) {
    for (b_idx_col = 0; b_idx_col < mLinIneq; b_idx_col++) {
      for (i = 0; i < 147; i++) {
        obj->Aineq.data[i + obj->ldA * b_idx_col] = Aineq_data[mLinIneq * i +
          b_idx_col];
      }
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_quadraticObjective(const real_T
  runtimedata_lastMV[8], const real_T runtimedata_ref[130], const real_T
  runtimedata_OutputWeights[130], const real_T runtimedata_MVWeights[80], const
  real_T runtimedata_MVRateWeights[80], const real_T runtimedata_MVScaledTarget
  [80], const real_T X[143], const real_T U[88], real_T e, real_T *f, real_T
  gfx[130], real_T gfu[80], real_T *gfe)
{
  real_T wtYerr;
  int32_T i;
  int32_T i_0;
  int32_T runtimedata_OutputWeights_tmp;
  static const int8_T b[169] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  memset(&gfx[0], 0, 130U * sizeof(real_T));
  memset(&gfu[0], 0, 80U * sizeof(real_T));
  *f = 0.0;
  for (i_0 = 0; i_0 < 13; i_0++) {
    proc_control_node_B.ix[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i_0 = 0; i_0 < 8; i_0++) {
    proc_control_node_B.iu[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i_0 = 0; i_0 < 11; i_0++) {
    for (runtimedata_OutputWeights_tmp = 0; runtimedata_OutputWeights_tmp < 13;
         runtimedata_OutputWeights_tmp++) {
      proc_control_node_B.b_X_p[runtimedata_OutputWeights_tmp + 13 * i_0] = X[11
        * runtimedata_OutputWeights_tmp + i_0];
    }

    for (runtimedata_OutputWeights_tmp = 0; runtimedata_OutputWeights_tmp < 8;
         runtimedata_OutputWeights_tmp++) {
      proc_control_node_B.b_U_n[runtimedata_OutputWeights_tmp + (i_0 << 3)] = U
        [11 * runtimedata_OutputWeights_tmp + i_0];
    }
  }

  for (i = 0; i < 10; i++) {
    proc_control_node_B.wtYerr_j = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
      runtimedata_OutputWeights_tmp = 10 * i_0 + i;
      proc_control_node_B.runtimedata_OutputWeights_n =
        runtimedata_OutputWeights[runtimedata_OutputWeights_tmp];
      wtYerr = (proc_control_node_B.b_X_p[(i + 1) * 13 + i_0] -
                runtimedata_ref[runtimedata_OutputWeights_tmp]) *
        proc_control_node_B.runtimedata_OutputWeights_n;
      proc_control_node_B.wtYerr_j += wtYerr * wtYerr;
      proc_control_node_B.runtimedata_OutputWeights[i_0] =
        proc_control_node_B.runtimedata_OutputWeights_n * wtYerr;
    }

    *f += proc_control_node_B.wtYerr_j;
    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.wtYerr_j = 0.0;
      for (runtimedata_OutputWeights_tmp = 0; runtimedata_OutputWeights_tmp < 13;
           runtimedata_OutputWeights_tmp++) {
        proc_control_node_B.wtYerr_j += static_cast<real_T>(b[13 *
          runtimedata_OutputWeights_tmp + i_0]) *
          proc_control_node_B.runtimedata_OutputWeights[runtimedata_OutputWeights_tmp];
      }

      proc_control_node_B.gfx[i_0] = gfx[static_cast<int32_T>
        (proc_control_node_B.ix[i_0]) - 1] + proc_control_node_B.wtYerr_j;
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      gfx[static_cast<int32_T>(proc_control_node_B.ix[i_0]) - 1] =
        proc_control_node_B.gfx[i_0];
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.ix[i_0] += 13.0;
    }

    memcpy(&proc_control_node_B.umvk_c[0], &proc_control_node_B.b_U_n[i << 3],
           sizeof(real_T) << 3U);
    if (i + 1 == 1) {
      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.duk_e[i_0] = proc_control_node_B.umvk_c[i_0] -
          runtimedata_lastMV[i_0];
      }
    } else {
      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.duk_e[i_0] = proc_control_node_B.umvk_c[i_0] -
          proc_control_node_B.b_U_n[((i - 1) << 3) + i_0];
      }
    }

    proc_control_node_B.wtYerr_j = 0.0;
    for (i_0 = 0; i_0 < 8; i_0++) {
      runtimedata_OutputWeights_tmp = 10 * i_0 + i;
      proc_control_node_B.runtimedata_OutputWeights_n =
        runtimedata_MVWeights[runtimedata_OutputWeights_tmp];
      wtYerr = (proc_control_node_B.umvk_c[i_0] -
                runtimedata_MVScaledTarget[runtimedata_OutputWeights_tmp]) *
        proc_control_node_B.runtimedata_OutputWeights_n;
      proc_control_node_B.wtYerr_j += wtYerr * wtYerr;
      proc_control_node_B.gfu[i_0] = gfu[static_cast<int32_T>
        (proc_control_node_B.iu[i_0]) - 1] +
        proc_control_node_B.runtimedata_OutputWeights_n * wtYerr;
      proc_control_node_B.umvk_c[i_0] = wtYerr;
    }

    *f += proc_control_node_B.wtYerr_j;
    proc_control_node_B.wtYerr_j = 0.0;
    for (i_0 = 0; i_0 < 8; i_0++) {
      proc_control_node_B.runtimedata_OutputWeights_n =
        runtimedata_MVRateWeights[10 * i_0 + i];
      gfu[static_cast<int32_T>(proc_control_node_B.iu[i_0]) - 1] =
        proc_control_node_B.gfu[i_0];
      wtYerr = proc_control_node_B.runtimedata_OutputWeights_n *
        proc_control_node_B.duk_e[i_0];
      proc_control_node_B.wtYerr_j += wtYerr * wtYerr;
      proc_control_node_B.umvk_c[i_0] =
        proc_control_node_B.runtimedata_OutputWeights_n * wtYerr;
      proc_control_node_B.duk_e[i_0] = wtYerr;
    }

    *f += proc_control_node_B.wtYerr_j;
    for (i_0 = 0; i_0 < 8; i_0++) {
      proc_control_node_B.gfu[i_0] = gfu[static_cast<int32_T>
        (proc_control_node_B.iu[i_0]) - 1] + proc_control_node_B.umvk_c[i_0];
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      gfu[static_cast<int32_T>(proc_control_node_B.iu[i_0]) - 1] =
        proc_control_node_B.gfu[i_0];
    }

    if (i + 1 > 1) {
      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.gfu_tmp[i_0] = static_cast<int32_T>
          (proc_control_node_B.iu[i_0] - 8.0);
      }

      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.gfu[i_0] = gfu[proc_control_node_B.gfu_tmp[i_0] - 1]
          - proc_control_node_B.umvk_c[i_0];
      }

      for (i_0 = 0; i_0 < 8; i_0++) {
        gfu[proc_control_node_B.gfu_tmp[i_0] - 1] = proc_control_node_B.gfu[i_0];
      }
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      proc_control_node_B.iu[i_0] += 8.0;
    }
  }

  *f += 100000.0 * e * e;
  for (i_0 = 0; i_0 < 130; i_0++) {
    gfx[i_0] *= 2.0;
  }

  for (i_0 = 0; i_0 < 80; i_0++) {
    gfu[i_0] *= 2.0;
  }

  *gfe = 200000.0 * e;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_anon_d(const real_T
  runtimedata_x[13], const real_T runtimedata_lastMV[8], const real_T
  runtimedata_ref[130], const real_T runtimedata_OutputWeights[130], const
  real_T runtimedata_MVWeights[80], const real_T runtimedata_MVRateWeights[80],
  const real_T runtimedata_MVScaledTarget[80], const real_T z[147], real_T
  *varargout_1, real_T varargout_2[147])
{
  static const int8_T b[1280] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  proc_control_node_znlmpc_getXUe(z, runtimedata_x, proc_control_node_B.X_d,
    proc_control_node_B.U_j, &proc_control_node_B.e_i);
  proc_control_quadraticObjective(runtimedata_lastMV, runtimedata_ref,
    runtimedata_OutputWeights, runtimedata_MVWeights, runtimedata_MVRateWeights,
    runtimedata_MVScaledTarget, proc_control_node_B.X_d, proc_control_node_B.U_j,
    proc_control_node_B.e_i, varargout_1, proc_control_node_B.gfX,
    proc_control_node_B.gfU, &proc_control_node_B.gfE);
  for (proc_control_node_B.i23 = 0; proc_control_node_B.i23 < 16;
       proc_control_node_B.i23++) {
    proc_control_node_B.e_i = 0.0;
    proc_control_node_B.i25 = 0;
    for (proc_control_node_B.i24 = 0; proc_control_node_B.i24 < 80;
         proc_control_node_B.i24++) {
      proc_control_node_B.e_i += static_cast<real_T>(b[proc_control_node_B.i25 +
        proc_control_node_B.i23]) *
        proc_control_node_B.gfU[proc_control_node_B.i24];
      proc_control_node_B.i25 += 16;
    }

    proc_control_node_B.b_j[proc_control_node_B.i23] = proc_control_node_B.e_i;
  }

  memcpy(&varargout_2[0], &proc_control_node_B.gfX[0], 130U * sizeof(real_T));
  memcpy(&varargout_2[130], &proc_control_node_B.b_j[0], sizeof(real_T) << 4U);
  varargout_2[146] = proc_control_node_B.gfE;
}

// Function for MATLAB Function: '<S228>/NLMPC'
int32_T proc_control_nodeModelClass::proc_contr_checkVectorNonFinite(int32_T N,
  const real_T vec_data[], int32_T iv0)
{
  real_T allFinite_tmp;
  int32_T idx_current;
  int32_T idx_end;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = iv0;
  idx_end = (iv0 + N) - 1;
  while (allFinite && (idx_current <= idx_end)) {
    allFinite_tmp = vec_data[idx_current - 1];
    allFinite = ((!rtIsInf(allFinite_tmp)) && (!rtIsNaN(allFinite_tmp)));
    idx_current++;
  }

  if (!allFinite) {
    idx_current -= 2;
    if (rtIsNaN(vec_data[idx_current])) {
      status = -3;
    } else if (vec_data[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::computeObjectiveAndUserGradient(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T x[147], real_T
  grad_workspace_data[], real_T *fval, int32_T *status)
{
  proc_control_node_anon_d(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x, fval,
    proc_control_node_B.varargout_2);
  memcpy(&grad_workspace_data[0], &proc_control_node_B.varargout_2[0], 147U *
         sizeof(real_T));
  if (rtIsInf(*fval) || rtIsNaN(*fval)) {
    if (rtIsNaN(*fval)) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    *status = proc_contr_checkVectorNonFinite(147, grad_workspace_data, 1);
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
int32_T proc_control_nodeModelClass::proc_con_checkVectorNonFinite_g(const
  real_T vec[130])
{
  int32_T idx_current;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = 0;
  while (allFinite && (idx_current + 1 <= 130)) {
    allFinite = ((!rtIsInf(vec[idx_current])) && (!rtIsNaN(vec[idx_current])));
    idx_current++;
  }

  if (!allFinite) {
    idx_current--;
    if (rtIsNaN(vec[idx_current])) {
      status = -3;
    } else if (vec[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S228>/NLMPC'
int32_T proc_control_nodeModelClass::proc_contr_checkMatrixNonFinite(int32_T
  ncols, const real_T mat_data[], int32_T col0, int32_T ldm)
{
  int32_T col;
  int32_T col_end;
  int32_T idx_mat;
  int32_T row;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  row = -1;
  col = col0;
  col_end = (col0 + ncols) - 1;
  while (allFinite && (col <= col_end)) {
    row = -1;
    while (allFinite && (row + 2 <= 147)) {
      idx_mat = ((col - 1) * ldm + row) + 1;
      allFinite = ((!rtIsInf(mat_data[idx_mat])) && (!rtIsNaN(mat_data[idx_mat])));
      row++;
    }

    col++;
  }

  if (!allFinite) {
    idx_mat = (col - 2) * ldm + row;
    if (rtIsNaN(mat_data[idx_mat])) {
      status = -3;
    } else if (mat_data[idx_mat] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S228>/NLMPC'
int32_T proc_control_nodeModelClass::computeConstraintsAndUserJacobi(const
  real_T obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[147],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130],
  real_T JacIneqTrans_workspace_data[], int32_T iJI_col, int32_T ldJI, real_T
  JacEqTrans_workspace_data[], int32_T ldJE)
{
  int32_T status;
  if (obj_mCineq > 0) {
    proc_control_node_anon(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_node_B.varargout_1_data_p,
      proc_control_node_B.varargout_1_size_h, proc_control_node_B.varargout_2_n,
      proc_control_node_B.varargout_3_data_c,
      proc_control_node_B.varargout_3_size_p, proc_control_node_B.varargout_4_b);
    proc_control_node_B.b_k_k = 0;
    while (proc_control_node_B.b_k_k <= obj_mCineq - 1) {
      Cineq_workspace_data[(ineq0 + proc_control_node_B.b_k_k) - 1] =
        proc_control_node_B.varargout_1_data_p[proc_control_node_B.b_k_k];
      proc_control_node_B.b_k_k++;
    }

    memcpy(&Ceq_workspace[0], &proc_control_node_B.varargout_2_n[0], 130U *
           sizeof(real_T));
    proc_control_node_B.b_k_k = 0;
    while (proc_control_node_B.b_k_k <= proc_control_node_B.varargout_3_size_p[0]
           - 1) {
      proc_control_node_B.c_idx_col = 0;
      while (proc_control_node_B.c_idx_col <=
             proc_control_node_B.varargout_3_size_p[1] - 1) {
        JacIneqTrans_workspace_data[proc_control_node_B.b_k_k + ldJI * ((iJI_col
          + proc_control_node_B.c_idx_col) - 1)] =
          proc_control_node_B.varargout_3_data_c[proc_control_node_B.b_k_k +
          proc_control_node_B.varargout_3_size_p[0] *
          proc_control_node_B.c_idx_col];
        proc_control_node_B.c_idx_col++;
      }

      proc_control_node_B.b_k_k++;
    }

    for (proc_control_node_B.b_k_k = 0; proc_control_node_B.b_k_k < 147;
         proc_control_node_B.b_k_k++) {
      for (proc_control_node_B.c_idx_col = 0; proc_control_node_B.c_idx_col <
           130; proc_control_node_B.c_idx_col++) {
        JacEqTrans_workspace_data[proc_control_node_B.b_k_k + ldJE *
          proc_control_node_B.c_idx_col] = proc_control_node_B.varargout_4_b[147
          * proc_control_node_B.c_idx_col + proc_control_node_B.b_k_k];
      }
    }
  } else {
    proc_control_node_anon(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_node_B.varargout_1_data_p,
      proc_control_node_B.varargout_1_size_h, proc_control_node_B.varargout_2_n,
      proc_control_node_B.varargout_3_data_c,
      proc_control_node_B.varargout_3_size_p, proc_control_node_B.varargout_4_b);
    memcpy(&Ceq_workspace[0], &proc_control_node_B.varargout_2_n[0], 130U *
           sizeof(real_T));
    for (proc_control_node_B.b_k_k = 0; proc_control_node_B.b_k_k < 147;
         proc_control_node_B.b_k_k++) {
      for (proc_control_node_B.c_idx_col = 0; proc_control_node_B.c_idx_col <
           130; proc_control_node_B.c_idx_col++) {
        JacEqTrans_workspace_data[proc_control_node_B.b_k_k + ldJE *
          proc_control_node_B.c_idx_col] = proc_control_node_B.varargout_4_b[147
          * proc_control_node_B.c_idx_col + proc_control_node_B.b_k_k];
      }
    }
  }

  status = proc_contr_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
    ineq0);
  if (status == 1) {
    status = proc_con_checkVectorNonFinite_g(Ceq_workspace);
    if (status == 1) {
      status = proc_contr_checkMatrixNonFinite(obj_mCineq,
        JacIneqTrans_workspace_data, iJI_col, ldJI);
      if (status == 1) {
        status = proc_contr_checkMatrixNonFinite(130, JacEqTrans_workspace_data,
          1, ldJE);
      }
    }
  }

  return status;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::evalObjAndConstrAndDerivatives(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[147],
  real_T grad_workspace_data[], real_T Cineq_workspace_data[], int32_T ineq0,
  real_T Ceq_workspace[130], real_T JacIneqTrans_workspace_data[], int32_T
  iJI_col, int32_T ldJI, real_T JacEqTrans_workspace_data[], int32_T ldJE,
  real_T *fval, int32_T *status)
{
  computeObjectiveAndUserGradient(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x,
    grad_workspace_data, fval, status);
  if (*status == 1) {
    *status = computeConstraintsAndUserJacobi(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1,
      obj_mCineq, x, Cineq_workspace_data, ineq0, Ceq_workspace,
      JacIneqTrans_workspace_data, iJI_col, ldJI, JacEqTrans_workspace_data,
      ldJE);
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_c_updateWorkingSetForNewQP(const real_T
  xk[147], s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet, int32_T mIneq, const
  real_T cIneq_data[], const real_T cEq[130], int32_T mLB, const real_T lb[147],
  int32_T mUB, int32_T mFixed)
{
  int32_T b_idx;
  int32_T iEq0;
  int32_T iw0;
  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (b_idx = 0; b_idx < 130; b_idx++) {
    WorkingSet->beq[b_idx] = -cEq[b_idx];
    WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
    memcpy(&WorkingSet->ATwset.data[iw0], &WorkingSet->Aeq.data[iEq0], 147U *
           sizeof(real_T));
    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (b_idx = 0; b_idx < mIneq; b_idx++) {
    WorkingSet->bineq.data[b_idx] = -cIneq_data[b_idx];
  }

  for (b_idx = 0; b_idx < mLB; b_idx++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[b_idx] - 1] = -lb
      [WorkingSet->indexLB.data[b_idx] - 1] + xk[WorkingSet->indexLB.data[b_idx]
      - 1];
  }

  for (b_idx = 0; b_idx < mUB; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[b_idx] - 1];
  }

  for (b_idx = 0; b_idx < mFixed; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[b_idx] - 1];
    WorkingSet->bwset.data[b_idx] = (rtInf) - xk[WorkingSet->
      indexFixed.data[b_idx] - 1];
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_co_modifyOverheadPhaseOne_
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj)
{
  int32_T idx;
  int32_T idxEq;
  for (idx = 0; idx < obj->sizes[0]; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * idx) - 1] = 0.0;
  }

  for (idx = 0; idx < 130; idx++) {
    idxEq = (obj->ldA * idx + obj->nVar) - 1;
    obj->Aeq.data[idxEq] = 0.0;
    obj->ATwset.data[idxEq + obj->ldA * (obj->isActiveIdx[1] - 1)] = 0.0;
  }

  for (idx = 0; idx < obj->sizes[2]; idx++) {
    obj->Aineq.data[(obj->nVar + obj->ldA * idx) - 1] = -1.0;
  }

  obj->indexLB.data[obj->sizes[3] - 1] = obj->nVar;
  obj->lb.data[obj->nVar - 1] = 1.0E-5;
  for (idx = obj->isActiveIdx[2]; idx <= obj->nActiveConstr; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * (idx - 1)) - 1] = -1.0;
  }

  if (obj->nWConstr[4] > 0) {
    for (idx = 0; idx <= obj->sizesNormal[4]; idx++) {
      obj->isActiveConstr.data[(obj->isActiveIdx[4] + idx) - 1] = false;
    }
  }

  obj->isActiveConstr.data[obj->isActiveIdx[4] - 2] = false;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_setProblemType
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, int32_T PROBLEM_TYPE)
{
  int32_T d_idx_row;
  int32_T e_idx_row;
  switch (PROBLEM_TYPE) {
   case 3:
    obj->nVar = 147;
    obj->mConstr = obj->mConstrOrig;
    if (obj->nWConstr[4] > 0) {
      proc_control_node_B.mIneq_cc = -1;
      while (proc_control_node_B.mIneq_cc + 1 <= obj->sizesNormal[4] - 1) {
        obj->isActiveConstr.data[obj->isActiveIdxNormal[4] +
          proc_control_node_B.mIneq_cc] = obj->isActiveConstr.data
          [obj->isActiveIdx[4] + proc_control_node_B.mIneq_cc];
        proc_control_node_B.mIneq_cc++;
      }
    }

    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 5;
         proc_control_node_B.colOffsetAineq++) {
      obj->sizes[proc_control_node_B.colOffsetAineq] = obj->
        sizesNormal[proc_control_node_B.colOffsetAineq];
    }

    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 6;
         proc_control_node_B.colOffsetAineq++) {
      obj->isActiveIdx[proc_control_node_B.colOffsetAineq] =
        obj->isActiveIdxNormal[proc_control_node_B.colOffsetAineq];
    }
    break;

   case 1:
    obj->nVar = 148;
    obj->mConstr = obj->mConstrOrig + 1;
    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 5;
         proc_control_node_B.colOffsetAineq++) {
      obj->sizes[proc_control_node_B.colOffsetAineq] = obj->
        sizesPhaseOne[proc_control_node_B.colOffsetAineq];
    }

    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 6;
         proc_control_node_B.colOffsetAineq++) {
      obj->isActiveIdx[proc_control_node_B.colOffsetAineq] =
        obj->isActiveIdxPhaseOne[proc_control_node_B.colOffsetAineq];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    break;

   case 2:
    obj->nVar = obj->nVarMax - 1;
    obj->mConstr = obj->mConstrMax - 1;
    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 5;
         proc_control_node_B.colOffsetAineq++) {
      obj->sizes[proc_control_node_B.colOffsetAineq] = obj->
        sizesRegularized[proc_control_node_B.colOffsetAineq];
    }

    if (obj->probType != 4) {
      proc_control_node_B.mIneq_cc = obj->sizes[2] + 147;
      proc_control_node_B.offsetEq1 = obj->sizes[2];
      proc_control_node_B.offsetEq2 = obj->sizes[2];
      proc_control_node_B.colOffsetAineq = 0;
      while (proc_control_node_B.colOffsetAineq <= obj->sizes[0] - 1) {
        proc_control_node_B.colOffsetATw = obj->ldA *
          proc_control_node_B.colOffsetAineq;
        proc_control_node_B.colOffsetAeq = 148;
        while (proc_control_node_B.colOffsetAeq <= obj->nVar) {
          obj->ATwset.data[(proc_control_node_B.colOffsetAeq +
                            proc_control_node_B.colOffsetATw) - 1] = 0.0;
          proc_control_node_B.colOffsetAeq++;
        }

        proc_control_node_B.colOffsetAineq++;
      }

      proc_control_node_B.colOffsetATw = 0;
      while (proc_control_node_B.colOffsetATw <= proc_control_node_B.mIneq_cc -
             148) {
        proc_control_node_B.colOffsetAineq = obj->ldA *
          proc_control_node_B.colOffsetATw - 1;
        for (d_idx_row = 148; d_idx_row <= proc_control_node_B.colOffsetATw +
             147; d_idx_row++) {
          obj->Aineq.data[d_idx_row + proc_control_node_B.colOffsetAineq] = 0.0;
        }

        obj->Aineq.data[(proc_control_node_B.colOffsetATw +
                         proc_control_node_B.colOffsetAineq) + 148] = -1.0;
        proc_control_node_B.colOffsetAeq = proc_control_node_B.colOffsetATw +
          149;
        while (proc_control_node_B.colOffsetAeq <= obj->nVar) {
          obj->Aineq.data[proc_control_node_B.colOffsetAeq +
            proc_control_node_B.colOffsetAineq] = 0.0;
          proc_control_node_B.colOffsetAeq++;
        }

        proc_control_node_B.colOffsetATw++;
      }

      for (proc_control_node_B.colOffsetAineq = 0;
           proc_control_node_B.colOffsetAineq < 130;
           proc_control_node_B.colOffsetAineq++) {
        proc_control_node_B.colOffsetAeq = obj->ldA *
          proc_control_node_B.colOffsetAineq - 1;
        proc_control_node_B.colOffsetATw = (obj->isActiveIdx[1] - 1) * obj->ldA
          + proc_control_node_B.colOffsetAeq;
        for (d_idx_row = 148; d_idx_row <= proc_control_node_B.mIneq_cc;
             d_idx_row++) {
          obj->Aeq.data[d_idx_row + proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[d_idx_row + proc_control_node_B.colOffsetATw] = 0.0;
        }

        d_idx_row = proc_control_node_B.mIneq_cc +
          proc_control_node_B.colOffsetAineq;
        for (e_idx_row = proc_control_node_B.offsetEq1 + 148; e_idx_row <=
             d_idx_row; e_idx_row++) {
          obj->Aeq.data[e_idx_row + proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[e_idx_row + proc_control_node_B.colOffsetATw] = 0.0;
        }

        obj->Aeq.data[(d_idx_row + proc_control_node_B.colOffsetAeq) + 1] = -1.0;
        obj->ATwset.data[(d_idx_row + proc_control_node_B.colOffsetATw) + 1] =
          -1.0;
        for (d_idx_row = (proc_control_node_B.offsetEq1 +
                          proc_control_node_B.colOffsetAineq) + 149; d_idx_row <=
             proc_control_node_B.mIneq_cc + 130; d_idx_row++) {
          obj->Aeq.data[d_idx_row + proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[d_idx_row + proc_control_node_B.colOffsetATw] = 0.0;
        }

        d_idx_row = proc_control_node_B.mIneq_cc +
          proc_control_node_B.colOffsetAineq;
        for (e_idx_row = proc_control_node_B.offsetEq2 + 278; e_idx_row <=
             d_idx_row + 130; e_idx_row++) {
          obj->Aeq.data[e_idx_row + proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[e_idx_row + proc_control_node_B.colOffsetATw] = 0.0;
        }

        obj->Aeq.data[(d_idx_row + proc_control_node_B.colOffsetAeq) + 131] =
          1.0;
        obj->ATwset.data[(d_idx_row + proc_control_node_B.colOffsetATw) + 131] =
          1.0;
        for (d_idx_row = (proc_control_node_B.offsetEq2 +
                          proc_control_node_B.colOffsetAineq) + 279; d_idx_row <=
             obj->nVar; d_idx_row++) {
          obj->Aeq.data[d_idx_row + proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[d_idx_row + proc_control_node_B.colOffsetATw] = 0.0;
        }
      }

      proc_control_node_B.offsetEq1 = 147;
      proc_control_node_B.offsetEq2 = obj->sizesNormal[3];
      while (proc_control_node_B.offsetEq2 + 1 <= obj->sizesRegularized[3]) {
        proc_control_node_B.offsetEq1++;
        obj->indexLB.data[proc_control_node_B.offsetEq2] =
          proc_control_node_B.offsetEq1;
        proc_control_node_B.offsetEq2++;
      }

      if (obj->nWConstr[4] > 0) {
        proc_control_node_B.offsetEq1 = -1;
        while (proc_control_node_B.offsetEq1 + 1 <= obj->sizesRegularized[4] - 1)
        {
          obj->isActiveConstr.data[(obj->isActiveIdxRegularized[4] +
            proc_control_node_B.offsetEq1) + 1] = obj->isActiveConstr.data
            [obj->isActiveIdx[4] + proc_control_node_B.offsetEq1];
          proc_control_node_B.offsetEq1++;
        }
      }

      proc_control_node_B.offsetEq1 = obj->isActiveIdx[4];
      while (proc_control_node_B.offsetEq1 <= obj->isActiveIdxRegularized[4] - 1)
      {
        obj->isActiveConstr.data[proc_control_node_B.offsetEq1 - 1] = false;
        proc_control_node_B.offsetEq1++;
      }

      proc_control_node_B.offsetEq1 = 148;
      while (proc_control_node_B.offsetEq1 <= proc_control_node_B.mIneq_cc + 260)
      {
        obj->lb.data[proc_control_node_B.offsetEq1 - 1] = 0.0;
        proc_control_node_B.offsetEq1++;
      }

      proc_control_node_B.mIneq_cc = obj->isActiveIdx[2] - 1;
      while (proc_control_node_B.mIneq_cc + 1 <= obj->nActiveConstr) {
        proc_control_node_B.colOffsetATw = obj->ldA *
          proc_control_node_B.mIneq_cc - 1;
        if (obj->Wid.data[proc_control_node_B.mIneq_cc] == 3) {
          proc_control_node_B.offsetEq1 = 148;
          while (proc_control_node_B.offsetEq1 <= obj->
                 Wlocalidx.data[proc_control_node_B.mIneq_cc] + 146) {
            obj->ATwset.data[proc_control_node_B.offsetEq1 +
              proc_control_node_B.colOffsetATw] = 0.0;
            proc_control_node_B.offsetEq1++;
          }

          obj->ATwset.data[(obj->Wlocalidx.data[proc_control_node_B.mIneq_cc] +
                            proc_control_node_B.colOffsetATw) + 147] = -1.0;
          proc_control_node_B.offsetEq1 = obj->
            Wlocalidx.data[proc_control_node_B.mIneq_cc] + 148;
          while (proc_control_node_B.offsetEq1 <= obj->nVar) {
            obj->ATwset.data[proc_control_node_B.offsetEq1 +
              proc_control_node_B.colOffsetATw] = 0.0;
            proc_control_node_B.offsetEq1++;
          }
        } else {
          proc_control_node_B.offsetEq1 = 148;
          while (proc_control_node_B.offsetEq1 <= obj->nVar) {
            obj->ATwset.data[proc_control_node_B.offsetEq1 +
              proc_control_node_B.colOffsetATw] = 0.0;
            proc_control_node_B.offsetEq1++;
          }
        }

        proc_control_node_B.mIneq_cc++;
      }
    }

    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 6;
         proc_control_node_B.colOffsetAineq++) {
      obj->isActiveIdx[proc_control_node_B.colOffsetAineq] =
        obj->isActiveIdxRegularized[proc_control_node_B.colOffsetAineq];
    }
    break;

   default:
    obj->nVar = obj->nVarMax;
    obj->mConstr = obj->mConstrMax;
    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 5;
         proc_control_node_B.colOffsetAineq++) {
      obj->sizes[proc_control_node_B.colOffsetAineq] = obj->
        sizesRegPhaseOne[proc_control_node_B.colOffsetAineq];
    }

    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 6;
         proc_control_node_B.colOffsetAineq++) {
      obj->isActiveIdx[proc_control_node_B.colOffsetAineq] =
        obj->isActiveIdxRegPhaseOne[proc_control_node_B.colOffsetAineq];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    break;
  }

  obj->probType = PROBLEM_TYPE;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_initActiveSet
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj)
{
  proc_control_nod_setProblemType(obj, 3);
  proc_control_node_B.nWFixed = obj->isActiveIdx[2];
  while (proc_control_node_B.nWFixed <= obj->mConstrMax) {
    obj->isActiveConstr.data[proc_control_node_B.nWFixed - 1] = false;
    proc_control_node_B.nWFixed++;
  }

  obj->nWConstr[0] = obj->sizes[0];
  obj->nWConstr[1] = 130;
  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + 130;
  proc_control_node_B.nWFixed = obj->sizes[0];
  proc_control_node_B.b_idx_local = 0;
  while (proc_control_node_B.b_idx_local <= proc_control_node_B.nWFixed - 1) {
    obj->Wid.data[proc_control_node_B.b_idx_local] = 1;
    obj->Wlocalidx.data[proc_control_node_B.b_idx_local] =
      proc_control_node_B.b_idx_local + 1;
    obj->isActiveConstr.data[proc_control_node_B.b_idx_local] = true;
    proc_control_node_B.iAeq0 = obj->ldA * proc_control_node_B.b_idx_local - 1;
    proc_control_node_B.iATw0 = 0;
    while (proc_control_node_B.iATw0 <= obj->
           indexFixed.data[proc_control_node_B.b_idx_local] - 2) {
      obj->ATwset.data[(proc_control_node_B.iATw0 + proc_control_node_B.iAeq0) +
        1] = 0.0;
      proc_control_node_B.iATw0++;
    }

    obj->ATwset.data[obj->indexFixed.data[proc_control_node_B.b_idx_local] +
      proc_control_node_B.iAeq0] = 1.0;
    proc_control_node_B.iATw0 = obj->
      indexFixed.data[proc_control_node_B.b_idx_local] + 1;
    while (proc_control_node_B.iATw0 <= obj->nVar) {
      obj->ATwset.data[proc_control_node_B.iATw0 + proc_control_node_B.iAeq0] =
        0.0;
      proc_control_node_B.iATw0++;
    }

    obj->bwset.data[proc_control_node_B.b_idx_local] = obj->ub.data
      [obj->indexFixed.data[proc_control_node_B.b_idx_local] - 1];
    proc_control_node_B.b_idx_local++;
  }

  for (proc_control_node_B.b_idx_local = 0; proc_control_node_B.b_idx_local <
       130; proc_control_node_B.b_idx_local++) {
    proc_control_node_B.idx_global = proc_control_node_B.nWFixed +
      proc_control_node_B.b_idx_local;
    obj->Wid.data[proc_control_node_B.idx_global] = 2;
    obj->Wlocalidx.data[proc_control_node_B.idx_global] =
      proc_control_node_B.b_idx_local + 1;
    obj->isActiveConstr.data[proc_control_node_B.idx_global] = true;
    proc_control_node_B.iAeq0 = obj->ldA * proc_control_node_B.b_idx_local;
    proc_control_node_B.iATw0 = obj->ldA * proc_control_node_B.idx_global;
    proc_control_node_B.c_i_b = 0;
    while (proc_control_node_B.c_i_b <= obj->nVar - 1) {
      obj->ATwset.data[proc_control_node_B.iATw0 + proc_control_node_B.c_i_b] =
        obj->Aeq.data[proc_control_node_B.iAeq0 + proc_control_node_B.c_i_b];
      proc_control_node_B.c_i_b++;
    }

    obj->bwset.data[proc_control_node_B.idx_global] = obj->
      beq[proc_control_node_B.b_idx_local];
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_contro_factoryConstruct_ln(int32_T
  maxRows, int32_T maxCols, int32_T *obj_ldq, int32_T obj_QR_size[2], real_T
  obj_Q_data[], int32_T obj_Q_size[2], int32_T obj_jpvt_data[], int32_T
  *obj_jpvt_size, int32_T *obj_mrows, int32_T *obj_ncols, int32_T *obj_tau_size,
  int32_T *obj_minRowCol, boolean_T *obj_usedPivoting)
{
  int32_T loop_ub;
  *obj_ldq = maxRows;
  obj_QR_size[0] = maxRows;
  obj_QR_size[1] = maxCols;
  obj_Q_size[0] = maxRows;
  obj_Q_size[1] = maxRows;
  loop_ub = maxRows * maxRows - 1;
  if (0 <= loop_ub) {
    memset(&obj_Q_data[0], 0, (loop_ub + 1) * sizeof(real_T));
  }

  *obj_jpvt_size = maxCols;
  if (0 <= maxCols - 1) {
    memset(&obj_jpvt_data[0], 0, maxCols * sizeof(int32_T));
  }

  *obj_mrows = 0;
  *obj_ncols = 0;
  if (maxRows < maxCols) {
    *obj_tau_size = maxRows;
  } else {
    *obj_tau_size = maxCols;
  }

  *obj_minRowCol = 0;
  *obj_usedPivoting = false;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_contr_factoryConstruct_lnz(int32_T
  MaxDims, int32_T obj_FMat_size[2], int32_T *obj_ldm, int32_T *obj_ndims,
  int32_T *obj_info, real_T *obj_scaleFactor, boolean_T *obj_ConvexCheck, real_T
  *obj_regTol_, real_T *obj_workspace_, real_T *obj_workspace2_)
{
  obj_FMat_size[0] = MaxDims;
  obj_FMat_size[1] = MaxDims;
  *obj_ldm = MaxDims;
  *obj_ndims = 0;
  *obj_info = 0;
  *obj_scaleFactor = 0.0;
  *obj_ConvexCheck = true;
  *obj_regTol_ = (rtInf);
  *obj_workspace_ = (rtInf);
  *obj_workspace2_ = (rtInf);
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv(int32_T m, int32_T n,
  const real_T A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  int32_T iy;
  if (n != 0) {
    proc_control_node_B.ix_bw = ix0;
    c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= c)) || ((lda < 0) && (iac >= c))) {
      iy = 0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        y_data[iy] += A_data[ia - 1] * x_data[proc_control_node_B.ix_bw - 1];
        iy++;
      }

      proc_control_node_B.ix_bw++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_computeGradLag(real_T
  workspace_data[], int32_T ldA, int32_T nVar, const real_T grad_data[], int32_T
  mIneq, const real_T AineqTrans_data[], const real_T AeqTrans_data[], const
  int32_T finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[],
  int32_T mLB, const int32_T finiteUB_data[], int32_T mUB, const real_T
  lambda_data[])
{
  proc_control_node_B.iL0_n = 0;
  while (proc_control_node_B.iL0_n <= nVar - 1) {
    workspace_data[proc_control_node_B.iL0_n] =
      grad_data[proc_control_node_B.iL0_n];
    proc_control_node_B.iL0_n++;
  }

  proc_control_node_B.iL0_n = 0;
  while (proc_control_node_B.iL0_n <= mFixed - 1) {
    workspace_data[finiteFixed_data[proc_control_node_B.iL0_n] - 1] +=
      lambda_data[proc_control_node_B.iL0_n];
    proc_control_node_B.iL0_n++;
  }

  proc_control_node_xgemv(nVar, 130, AeqTrans_data, ldA, lambda_data, mFixed + 1,
    workspace_data);
  proc_control_node_xgemv(nVar, mIneq, AineqTrans_data, ldA, lambda_data, mFixed
    + 131, workspace_data);
  proc_control_node_B.iL0_n = (mFixed + mIneq) + 130;
  proc_control_node_B.c_idx_m = 0;
  while (proc_control_node_B.c_idx_m <= mLB - 1) {
    workspace_data[finiteLB_data[proc_control_node_B.c_idx_m] - 1] -=
      lambda_data[proc_control_node_B.iL0_n];
    proc_control_node_B.iL0_n++;
    proc_control_node_B.c_idx_m++;
  }

  proc_control_node_B.c_idx_m = 0;
  while (proc_control_node_B.c_idx_m <= mUB - 1) {
    workspace_data[finiteUB_data[proc_control_node_B.c_idx_m] - 1] +=
      lambda_data[proc_control_node_B.iL0_n];
    proc_control_node_B.iL0_n++;
    proc_control_node_B.c_idx_m++;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
real_T proc_control_nodeModelClass::proc_con_computePrimalFeasError(const real_T
  x[147], int32_T mLinIneq, int32_T mNonlinIneq, const real_T cIneq_data[],
  const real_T cEq[130], const int32_T finiteLB_data[], int32_T mLB, const
  real_T lb[147], const int32_T finiteUB_data[], int32_T mUB)
{
  real_T feasError;
  real_T u1;
  int32_T b_idx;
  int32_T mIneq;
  feasError = 0.0;
  mIneq = mNonlinIneq + mLinIneq;
  for (b_idx = 0; b_idx < 130; b_idx++) {
    u1 = fabs(cEq[b_idx]);
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  for (b_idx = 0; b_idx < mIneq; b_idx++) {
    u1 = cIneq_data[b_idx];
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  for (mIneq = 0; mIneq < mLB; mIneq++) {
    u1 = lb[finiteLB_data[mIneq] - 1] - x[finiteLB_data[mIneq] - 1];
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  for (mIneq = 0; mIneq < mUB; mIneq++) {
    u1 = x[finiteUB_data[mIneq] - 1] - (rtInf);
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  return feasError;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_contr_computeDualFeasError(int32_T nVar,
  const real_T gradLag_data[], boolean_T *gradOK, real_T *val)
{
  real_T u1;
  int32_T b_idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!rtIsInf(gradLag_data[b_idx])) && (!rtIsNaN(gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      u1 = fabs(gradLag_data[b_idx]);
      if ((!(*val > u1)) && (!rtIsNaN(u1))) {
        *val = u1;
      }

      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_saveJacobian
  (s_UjlJWoQEHmSUKFcPTad7eC_proc_T *obj, int32_T nVar, int32_T mIneq, const
   real_T JacCineqTrans_data[], int32_T ineqCol0, const real_T JacCeqTrans_data[],
   int32_T ldJ)
{
  int32_T b;
  int32_T idx_col;
  int32_T loop_ub_tmp;
  int32_T y_size_idx_0;
  int32_T y_size_idx_1;
  proc_control_node_B.iCol = (ineqCol0 - 1) * ldJ;
  proc_control_node_B.iCol_old = -1;
  b = mIneq - ineqCol0;
  for (idx_col = 0; idx_col <= b; idx_col++) {
    y_size_idx_0 = obj->JacCineqTrans_old.size[0];
    y_size_idx_1 = obj->JacCineqTrans_old.size[1];
    loop_ub_tmp = obj->JacCineqTrans_old.size[0] * obj->JacCineqTrans_old.size[1];
    if (0 <= loop_ub_tmp - 1) {
      memcpy(&proc_control_node_B.y_data[0], &obj->JacCineqTrans_old.data[0],
             loop_ub_tmp * sizeof(real_T));
    }

    for (loop_ub_tmp = 1; loop_ub_tmp - 1 < nVar; loop_ub_tmp++) {
      proc_control_node_B.y_data[proc_control_node_B.iCol_old + loop_ub_tmp] =
        JacCineqTrans_data[(proc_control_node_B.iCol + loop_ub_tmp) - 1];
    }

    obj->JacCineqTrans_old.size[1] = y_size_idx_1;
    y_size_idx_0 *= y_size_idx_1;
    if (0 <= y_size_idx_0 - 1) {
      memcpy(&obj->JacCineqTrans_old.data[0], &proc_control_node_B.y_data[0],
             y_size_idx_0 * sizeof(real_T));
    }

    proc_control_node_B.iCol += ldJ;
    proc_control_node_B.iCol_old += ldJ;
  }

  proc_control_node_B.iCol = -1;
  proc_control_node_B.iCol_old = -1;
  for (b = 0; b < 130; b++) {
    for (idx_col = 1; idx_col - 1 < nVar; idx_col++) {
      obj->JacCeqTrans_old.data[proc_control_node_B.iCol_old + idx_col] =
        JacCeqTrans_data[proc_control_node_B.iCol + idx_col];
    }

    proc_control_node_B.iCol += ldJ;
    proc_control_node_B.iCol_old += ldJ;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_saveState
  (s_UjlJWoQEHmSUKFcPTad7eC_proc_T *obj)
{
  int32_T k;
  int32_T y_size_idx_0;
  obj->sqpFval_old = obj->sqpFval;
  for (k = 0; k < 147; k++) {
    obj->xstarsqp_old[k] = obj->xstarsqp[k];
    obj->grad_old.data[k] = obj->grad.data[k];
  }

  y_size_idx_0 = obj->cIneq_old.size;
  if (0 <= obj->cIneq_old.size - 1) {
    memcpy(&proc_control_node_B.y_data_g[0], &obj->cIneq_old.data[0],
           obj->cIneq_old.size * sizeof(real_T));
  }

  for (k = 0; k < obj->mIneq; k++) {
    proc_control_node_B.y_data_g[k] = obj->cIneq.data[k];
  }

  if (0 <= y_size_idx_0 - 1) {
    memcpy(&obj->cIneq_old.data[0], &proc_control_node_B.y_data_g[0],
           y_size_idx_0 * sizeof(real_T));
  }

  memcpy(&obj->cEq_old[0], &obj->cEq[0], 130U * sizeof(real_T));
}

// Function for MATLAB Function: '<S228>/NLMPC'
real_T proc_control_nodeModelClass::proc_control__computeComplError(const
  int32_T *fscales_lineq_constraint_size, const int32_T
  *fscales_cineq_constraint_size, const real_T xCurrent[147], int32_T mIneq,
  const real_T cIneq_data[], const int32_T finiteLB_data[], int32_T mLB, const
  real_T lb[147], const int32_T finiteUB_data[], int32_T mUB, const real_T
  lambda_data[], int32_T iL0)
{
  real_T nlpComplError;
  real_T u0;
  int32_T iLineq0;
  int32_T lbOffset;
  int32_T mLinIneq;
  nlpComplError = 0.0;
  if ((mIneq + mLB) + mUB > 0) {
    for (iLineq0 = 0; iLineq0 < *fscales_lineq_constraint_size; iLineq0++) {
      u0 = fabs(cIneq_data[iLineq0]);
      proc_control_node_B.ubLambda = lambda_data[(iL0 + iLineq0) - 1];
      if ((!(u0 < proc_control_node_B.ubLambda)) && (!rtIsNaN
           (proc_control_node_B.ubLambda))) {
        u0 = proc_control_node_B.ubLambda;
      }

      proc_control_node_B.ubLambda = fabs(proc_control_node_B.ubLambda *
        cIneq_data[iLineq0]);
      if ((proc_control_node_B.ubLambda < u0) || rtIsNaN(u0)) {
        u0 = proc_control_node_B.ubLambda;
      }

      if ((!(nlpComplError > u0)) && (!rtIsNaN(u0))) {
        nlpComplError = u0;
      }
    }

    iLineq0 = (iL0 + *fscales_lineq_constraint_size) - 2;
    for (lbOffset = 1; lbOffset - 1 < *fscales_cineq_constraint_size; lbOffset++)
    {
      u0 = fabs(cIneq_data[(*fscales_lineq_constraint_size - 1) + lbOffset]);
      proc_control_node_B.ubLambda = lambda_data[iLineq0 + lbOffset];
      if ((!(u0 < proc_control_node_B.ubLambda)) && (!rtIsNaN
           (proc_control_node_B.ubLambda))) {
        u0 = proc_control_node_B.ubLambda;
      }

      proc_control_node_B.ubLambda = fabs(cIneq_data
        [(*fscales_lineq_constraint_size - 1) + lbOffset] *
        proc_control_node_B.ubLambda);
      if ((proc_control_node_B.ubLambda < u0) || rtIsNaN(u0)) {
        u0 = proc_control_node_B.ubLambda;
      }

      if ((!(nlpComplError > u0)) && (!rtIsNaN(u0))) {
        nlpComplError = u0;
      }
    }

    lbOffset = (iL0 + mIneq) - 1;
    mLinIneq = lbOffset + mLB;
    for (iLineq0 = 0; iLineq0 < mLB; iLineq0++) {
      proc_control_node_B.ubLambda = xCurrent[finiteLB_data[iLineq0] - 1] -
        lb[finiteLB_data[iLineq0] - 1];
      proc_control_node_B.lbLambda = lambda_data[lbOffset + iLineq0];
      u0 = fabs(proc_control_node_B.ubLambda);
      if ((!(u0 < proc_control_node_B.lbLambda)) && (!rtIsNaN
           (proc_control_node_B.lbLambda))) {
        u0 = proc_control_node_B.lbLambda;
      }

      proc_control_node_B.ubLambda = fabs(proc_control_node_B.ubLambda *
        proc_control_node_B.lbLambda);
      if ((proc_control_node_B.ubLambda < u0) || rtIsNaN(u0)) {
        u0 = proc_control_node_B.ubLambda;
      }

      if ((!(nlpComplError > u0)) && (!rtIsNaN(u0))) {
        nlpComplError = u0;
      }
    }

    for (lbOffset = 0; lbOffset < mUB; lbOffset++) {
      proc_control_node_B.ubLambda = lambda_data[mLinIneq + lbOffset];
      if (rtIsNaN(proc_control_node_B.ubLambda)) {
        proc_control_node_B.lbLambda = (rtInf) - xCurrent[finiteUB_data[lbOffset]
          - 1];
      } else {
        proc_control_node_B.lbLambda = proc_control_node_B.ubLambda;
      }

      u0 = fabs(((rtInf) - xCurrent[finiteUB_data[lbOffset] - 1]) *
                proc_control_node_B.ubLambda);
      if ((u0 < proc_control_node_B.lbLambda) || rtIsNaN
          (proc_control_node_B.lbLambda)) {
        proc_control_node_B.lbLambda = u0;
      }

      if ((!(nlpComplError > proc_control_node_B.lbLambda)) && (!rtIsNaN
           (proc_control_node_B.lbLambda))) {
        nlpComplError = proc_control_node_B.lbLambda;
      }
    }
  }

  return nlpComplError;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_m(int32_T m, int32_T n,
  const real_T A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  int32_T iy;
  if (n != 0) {
    proc_control_node_B.ix_ei = ix0;
    c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= c)) || ((lda < 0) && (iac >= c))) {
      iy = 0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        y_data[iy] += A_data[ia - 1] * x_data[proc_control_node_B.ix_ei - 1];
        iy++;
      }

      proc_control_node_B.ix_ei++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_computeGradLag_b(real_T
  workspace_data[], int32_T ldA, int32_T nVar, const real_T grad_data[], int32_T
  mIneq, const real_T AineqTrans_data[], const real_T AeqTrans_data[], const
  int32_T finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[],
  int32_T mLB, const int32_T finiteUB_data[], int32_T mUB, const real_T
  lambda_data[])
{
  proc_control_node_B.iL0 = 0;
  while (proc_control_node_B.iL0 <= nVar - 1) {
    workspace_data[proc_control_node_B.iL0] = grad_data[proc_control_node_B.iL0];
    proc_control_node_B.iL0++;
  }

  proc_control_node_B.iL0 = 0;
  while (proc_control_node_B.iL0 <= mFixed - 1) {
    workspace_data[finiteFixed_data[proc_control_node_B.iL0] - 1] +=
      lambda_data[proc_control_node_B.iL0];
    proc_control_node_B.iL0++;
  }

  proc_control_node_xgemv_m(nVar, 130, AeqTrans_data, ldA, lambda_data, mFixed +
    1, workspace_data);
  proc_control_node_xgemv_m(nVar, mIneq, AineqTrans_data, ldA, lambda_data,
    mFixed + 131, workspace_data);
  proc_control_node_B.iL0 = (mFixed + mIneq) + 130;
  proc_control_node_B.c_idx_f = 0;
  while (proc_control_node_B.c_idx_f <= mLB - 1) {
    workspace_data[finiteLB_data[proc_control_node_B.c_idx_f] - 1] -=
      lambda_data[proc_control_node_B.iL0];
    proc_control_node_B.iL0++;
    proc_control_node_B.c_idx_f++;
  }

  proc_control_node_B.c_idx_f = 0;
  while (proc_control_node_B.c_idx_f <= mUB - 1) {
    workspace_data[finiteUB_data[proc_control_node_B.c_idx_f] - 1] +=
      lambda_data[proc_control_node_B.iL0];
    proc_control_node_B.iL0++;
    proc_control_node_B.c_idx_f++;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_con_computeDualFeasError_b(int32_T nVar,
  const real_T gradLag_data[], boolean_T *gradOK, real_T *val)
{
  real_T u1;
  int32_T b_idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!rtIsInf(gradLag_data[b_idx])) && (!rtIsNaN(gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      u1 = fabs(gradLag_data[b_idx]);
      if ((!(*val > u1)) && (!rtIsNaN(u1))) {
        *val = u1;
      }

      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_updateWorkingSetForNewQP_l(const real_T
  xk[147], s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet, int32_T mIneq, int32_T
  mNonlinIneq, const real_T cIneq_data[], const real_T cEq[130], int32_T mLB,
  const real_T lb[147], int32_T mUB, int32_T mFixed)
{
  int32_T c_idx;
  int32_T i;
  int32_T iEq0;
  int32_T iw0;
  int32_T nVar;
  nVar = WorkingSet->nVar - 1;
  for (iw0 = 0; iw0 < 130; iw0++) {
    WorkingSet->beq[iw0] = -cEq[iw0];
    WorkingSet->bwset.data[mFixed + iw0] = WorkingSet->beq[iw0];
  }

  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (c_idx = 0; c_idx < 130; c_idx++) {
    for (i = 0; i <= nVar; i++) {
      WorkingSet->ATwset.data[iw0 + i] = WorkingSet->Aeq.data[iEq0 + i];
    }

    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (c_idx = 0; c_idx < mIneq; c_idx++) {
    WorkingSet->bineq.data[c_idx] = -cIneq_data[c_idx];
  }

  for (c_idx = 0; c_idx < mLB; c_idx++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[c_idx] - 1] = -lb
      [WorkingSet->indexLB.data[c_idx] - 1] + xk[WorkingSet->indexLB.data[c_idx]
      - 1];
  }

  for (c_idx = 0; c_idx < mUB; c_idx++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[c_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[c_idx] - 1];
  }

  for (c_idx = 0; c_idx < mFixed; c_idx++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[c_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[c_idx] - 1];
    WorkingSet->bwset.data[c_idx] = (rtInf) - xk[WorkingSet->
      indexFixed.data[c_idx] - 1];
  }

  if (WorkingSet->nActiveConstr > mFixed + 130) {
    for (c_idx = mFixed + 130; c_idx < WorkingSet->nActiveConstr; c_idx++) {
      switch (WorkingSet->Wid.data[c_idx]) {
       case 4:
        WorkingSet->bwset.data[c_idx] = WorkingSet->lb.data
          [WorkingSet->indexLB.data[WorkingSet->Wlocalidx.data[c_idx] - 1] - 1];
        break;

       case 5:
        WorkingSet->bwset.data[c_idx] = WorkingSet->ub.data
          [WorkingSet->indexUB.data[WorkingSet->Wlocalidx.data[c_idx] - 1] - 1];
        break;

       default:
        WorkingSet->bwset.data[c_idx] = WorkingSet->bineq.data
          [WorkingSet->Wlocalidx.data[c_idx] - 1];
        if ((mNonlinIneq > 0) && (WorkingSet->Wlocalidx.data[c_idx] >=
             mNonlinIneq)) {
          iw0 = WorkingSet->ldA * c_idx;
          iEq0 = (WorkingSet->Wlocalidx.data[c_idx] - 1) * WorkingSet->ldA;
          for (i = 1; i - 1 <= nVar; i++) {
            WorkingSet->ATwset.data[(iw0 + i) - 1] = WorkingSet->Aineq.data
              [(iEq0 + i) - 1];
          }
        }
        break;
      }
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2(int32_T n, const
  real_T x_data[], int32_T ix0)
{
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x_data[ix0 - 1]);
    } else {
      proc_control_node_B.scale_n = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        proc_control_node_B.absxk_oi = fabs(x_data[k - 1]);
        if (proc_control_node_B.absxk_oi > proc_control_node_B.scale_n) {
          proc_control_node_B.t_e = proc_control_node_B.scale_n /
            proc_control_node_B.absxk_oi;
          y = y * proc_control_node_B.t_e * proc_control_node_B.t_e + 1.0;
          proc_control_node_B.scale_n = proc_control_node_B.absxk_oi;
        } else {
          proc_control_node_B.t_e = proc_control_node_B.absxk_oi /
            proc_control_node_B.scale_n;
          y += proc_control_node_B.t_e * proc_control_node_B.t_e;
        }
      }

      y = proc_control_node_B.scale_n * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S228>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_node_xzlarfg(int32_T n, real_T *
  alpha1, real_T x_data[], int32_T ix0)
{
  real_T tau;
  int32_T b_k;
  int32_T c_k;
  tau = 0.0;
  if (n > 0) {
    proc_control_node_B.xnorm = proc_control_node_xnrm2(n - 1, x_data, ix0);
    if (proc_control_node_B.xnorm != 0.0) {
      proc_control_node_B.xnorm = proc_control_node_rt_hypotd_snf(*alpha1,
        proc_control_node_B.xnorm);
      if (*alpha1 >= 0.0) {
        proc_control_node_B.xnorm = -proc_control_node_B.xnorm;
      }

      if (fabs(proc_control_node_B.xnorm) < 1.0020841800044864E-292) {
        proc_control_node_B.knt_gr = -1;
        c_k = (ix0 + n) - 2;
        do {
          proc_control_node_B.knt_gr++;
          for (b_k = ix0; b_k <= c_k; b_k++) {
            x_data[b_k - 1] *= 9.9792015476736E+291;
          }

          proc_control_node_B.xnorm *= 9.9792015476736E+291;
          *alpha1 *= 9.9792015476736E+291;
        } while (!(fabs(proc_control_node_B.xnorm) >= 1.0020841800044864E-292));

        proc_control_node_B.xnorm = proc_control_node_rt_hypotd_snf(*alpha1,
          proc_control_node_xnrm2(n - 1, x_data, ix0));
        if (*alpha1 >= 0.0) {
          proc_control_node_B.xnorm = -proc_control_node_B.xnorm;
        }

        tau = (proc_control_node_B.xnorm - *alpha1) / proc_control_node_B.xnorm;
        *alpha1 = 1.0 / (*alpha1 - proc_control_node_B.xnorm);
        for (b_k = ix0; b_k <= c_k; b_k++) {
          x_data[b_k - 1] *= *alpha1;
        }

        for (c_k = 0; c_k <= proc_control_node_B.knt_gr; c_k++) {
          proc_control_node_B.xnorm *= 1.0020841800044864E-292;
        }

        *alpha1 = proc_control_node_B.xnorm;
      } else {
        tau = (proc_control_node_B.xnorm - *alpha1) / proc_control_node_B.xnorm;
        *alpha1 = 1.0 / (*alpha1 - proc_control_node_B.xnorm);
        proc_control_node_B.knt_gr = (ix0 + n) - 2;
        for (c_k = ix0; c_k <= proc_control_node_B.knt_gr; c_k++) {
          x_data[c_k - 1] *= *alpha1;
        }

        *alpha1 = proc_control_node_B.xnorm;
      }
    }
  }

  return tau;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mt(int32_T m, int32_T
  n, const real_T A_data[], int32_T ia0, int32_T lda, const real_T x_data[],
  int32_T ix0, real_T y_data[])
{
  int32_T b;
  int32_T d;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    proc_control_node_B.b_iy_g = 0;
    while (proc_control_node_B.b_iy_g <= n - 1) {
      y_data[proc_control_node_B.b_iy_g] = 0.0;
      proc_control_node_B.b_iy_g++;
    }

    proc_control_node_B.b_iy_g = 0;
    b = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      proc_control_node_B.ix_b = ix0;
      proc_control_node_B.c_f = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_f += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_b - 1];
        proc_control_node_B.ix_b++;
      }

      y_data[proc_control_node_B.b_iy_g] += proc_control_node_B.c_f;
      proc_control_node_B.b_iy_g++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgerc(int32_T m, int32_T n,
  real_T alpha1, int32_T ix0, const real_T y_data[], real_T A_data[], int32_T
  ia0, int32_T lda)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  if (!(alpha1 == 0.0)) {
    proc_control_node_B.jA_d = ia0 - 1;
    proc_control_node_B.jy_h = 0;
    for (j = 0; j < n; j++) {
      if (y_data[proc_control_node_B.jy_h] != 0.0) {
        proc_control_node_B.temp_i = y_data[proc_control_node_B.jy_h] * alpha1;
        ix = ix0;
        b = m + proc_control_node_B.jA_d;
        for (ijA = proc_control_node_B.jA_d; ijA < b; ijA++) {
          A_data[ijA] += A_data[ix - 1] * proc_control_node_B.temp_i;
          ix++;
        }
      }

      proc_control_node_B.jy_h++;
      proc_control_node_B.jA_d += lda;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xzlarf(int32_T m, int32_T n,
  int32_T iv0, real_T tau, real_T C_data[], int32_T ic0, int32_T ldc, real_T
  work_data[])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_b = m;
    proc_control_node_B.lastc_o = iv0 + m;
    while ((proc_control_node_B.lastv_b > 0) &&
           (C_data[proc_control_node_B.lastc_o - 2] == 0.0)) {
      proc_control_node_B.lastv_b--;
      proc_control_node_B.lastc_o--;
    }

    proc_control_node_B.lastc_o = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_o > 0)) {
      proc_control_node_B.coltop_p = (proc_control_node_B.lastc_o - 1) * ldc +
        ic0;
      proc_control_node_B.ia_l = proc_control_node_B.coltop_p;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_l <= (proc_control_node_B.coltop_p +
             proc_control_node_B.lastv_b) - 1) {
          if (C_data[proc_control_node_B.ia_l - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_l++;
          }
        } else {
          proc_control_node_B.lastc_o--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_b = 0;
    proc_control_node_B.lastc_o = 0;
  }

  if (proc_control_node_B.lastv_b > 0) {
    proc_control_node_xgemv_mt(proc_control_node_B.lastv_b,
      proc_control_node_B.lastc_o, C_data, ic0, ldc, C_data, iv0, work_data);
    proc_control_node_xgerc(proc_control_node_B.lastv_b,
      proc_control_node_B.lastc_o, -tau, iv0, work_data, C_data, ic0, ldc);
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_qrf(real_T A_data[], const
  int32_T A_size[2], int32_T m, int32_T n, int32_T nfxd, real_T tau_data[])
{
  proc_control_node_B.lda = A_size[0];
  proc_control_node_B.ii_h = A_size[1];
  if (0 <= proc_control_node_B.ii_h - 1) {
    memset(&proc_control_node_B.work_data[0], 0, proc_control_node_B.ii_h *
           sizeof(real_T));
  }

  proc_control_node_B.i_c2 = 0;
  while (proc_control_node_B.i_c2 <= nfxd - 1) {
    proc_control_node_B.ii_h = proc_control_node_B.i_c2 *
      proc_control_node_B.lda + proc_control_node_B.i_c2;
    proc_control_node_B.mmi = m - proc_control_node_B.i_c2;
    if (proc_control_node_B.i_c2 + 1 < m) {
      proc_control_node_B.b_atmp_fi = A_data[proc_control_node_B.ii_h];
      tau_data[proc_control_node_B.i_c2] = proc_control_node_xzlarfg
        (proc_control_node_B.mmi, &proc_control_node_B.b_atmp_fi, A_data,
         proc_control_node_B.ii_h + 2);
      A_data[proc_control_node_B.ii_h] = proc_control_node_B.b_atmp_fi;
    } else {
      tau_data[proc_control_node_B.i_c2] = 0.0;
    }

    if (proc_control_node_B.i_c2 + 1 < n) {
      proc_control_node_B.b_atmp_fi = A_data[proc_control_node_B.ii_h];
      A_data[proc_control_node_B.ii_h] = 1.0;
      proc_control_node_xzlarf(proc_control_node_B.mmi, (n -
        proc_control_node_B.i_c2) - 1, proc_control_node_B.ii_h + 1,
        tau_data[proc_control_node_B.i_c2], A_data, (proc_control_node_B.ii_h +
        proc_control_node_B.lda) + 1, proc_control_node_B.lda,
        proc_control_node_B.work_data);
      A_data[proc_control_node_B.ii_h] = proc_control_node_B.b_atmp_fi;
    }

    proc_control_node_B.i_c2++;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xswap(int32_T n, real_T
  x_data[], int32_T ix0, int32_T iy0)
{
  int32_T ix;
  int32_T iy;
  int32_T k;
  ix = ix0 - 1;
  iy = iy0 - 1;
  for (k = 0; k < n; k++) {
    proc_control_node_B.temp_lc = x_data[ix];
    x_data[ix] = x_data[iy];
    x_data[iy] = proc_control_node_B.temp_lc;
    ix++;
    iy++;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_qrpf(real_T A_data[], const
  int32_T A_size[2], int32_T m, int32_T n, int32_T nfxd, real_T tau_data[],
  int32_T jpvt_data[])
{
  proc_control_node_B.ma_g = A_size[0];
  if (m < n) {
    proc_control_node_B.minmn_k = m;
  } else {
    proc_control_node_B.minmn_k = n;
  }

  proc_control_node_B.ii_l3 = A_size[1];
  if (0 <= proc_control_node_B.ii_l3 - 1) {
    memset(&proc_control_node_B.work_data_j[0], 0, proc_control_node_B.ii_l3 *
           sizeof(real_T));
  }

  proc_control_node_B.ii_l3 = A_size[1];
  if (0 <= proc_control_node_B.ii_l3 - 1) {
    memset(&proc_control_node_B.vn1_data[0], 0, proc_control_node_B.ii_l3 *
           sizeof(real_T));
  }

  proc_control_node_B.ii_l3 = A_size[1];
  if (0 <= proc_control_node_B.ii_l3 - 1) {
    memset(&proc_control_node_B.vn2_data[0], 0, proc_control_node_B.ii_l3 *
           sizeof(real_T));
  }

  proc_control_node_B.j_eq = nfxd;
  while (proc_control_node_B.j_eq + 1 <= n) {
    proc_control_node_B.vn1_data[proc_control_node_B.j_eq] =
      proc_control_node_xnrm2(m - nfxd, A_data, (proc_control_node_B.j_eq *
      proc_control_node_B.ma_g + nfxd) + 1);
    proc_control_node_B.vn2_data[proc_control_node_B.j_eq] =
      proc_control_node_B.vn1_data[proc_control_node_B.j_eq];
    proc_control_node_B.j_eq++;
  }

  proc_control_node_B.j_eq = nfxd;
  while (proc_control_node_B.j_eq + 1 <= proc_control_node_B.minmn_k) {
    proc_control_node_B.ii_l3 = proc_control_node_B.j_eq *
      proc_control_node_B.ma_g + proc_control_node_B.j_eq;
    proc_control_node_B.nmi = n - proc_control_node_B.j_eq;
    proc_control_node_B.mmi_e = m - proc_control_node_B.j_eq;
    if (proc_control_node_B.nmi < 1) {
      proc_control_node_B.pvt = -1;
    } else {
      proc_control_node_B.pvt = 0;
      if (proc_control_node_B.nmi > 1) {
        proc_control_node_B.ix_f = proc_control_node_B.j_eq;
        proc_control_node_B.smax_dn = fabs
          (proc_control_node_B.vn1_data[proc_control_node_B.j_eq]);
        proc_control_node_B.k_dw = 2;
        while (proc_control_node_B.k_dw <= proc_control_node_B.nmi) {
          proc_control_node_B.ix_f++;
          proc_control_node_B.temp2 = fabs
            (proc_control_node_B.vn1_data[proc_control_node_B.ix_f]);
          if (proc_control_node_B.temp2 > proc_control_node_B.smax_dn) {
            proc_control_node_B.pvt = proc_control_node_B.k_dw - 1;
            proc_control_node_B.smax_dn = proc_control_node_B.temp2;
          }

          proc_control_node_B.k_dw++;
        }
      }
    }

    proc_control_node_B.pvt += proc_control_node_B.j_eq;
    if (proc_control_node_B.pvt + 1 != proc_control_node_B.j_eq + 1) {
      proc_control_node_xswap(m, A_data, proc_control_node_B.pvt *
        proc_control_node_B.ma_g + 1, proc_control_node_B.j_eq *
        proc_control_node_B.ma_g + 1);
      proc_control_node_B.ix_f = jpvt_data[proc_control_node_B.pvt];
      jpvt_data[proc_control_node_B.pvt] = jpvt_data[proc_control_node_B.j_eq];
      jpvt_data[proc_control_node_B.j_eq] = proc_control_node_B.ix_f;
      proc_control_node_B.vn1_data[proc_control_node_B.pvt] =
        proc_control_node_B.vn1_data[proc_control_node_B.j_eq];
      proc_control_node_B.vn2_data[proc_control_node_B.pvt] =
        proc_control_node_B.vn2_data[proc_control_node_B.j_eq];
    }

    if (proc_control_node_B.j_eq + 1 < m) {
      proc_control_node_B.smax_dn = A_data[proc_control_node_B.ii_l3];
      tau_data[proc_control_node_B.j_eq] = proc_control_node_xzlarfg
        (proc_control_node_B.mmi_e, &proc_control_node_B.smax_dn, A_data,
         proc_control_node_B.ii_l3 + 2);
      A_data[proc_control_node_B.ii_l3] = proc_control_node_B.smax_dn;
    } else {
      tau_data[proc_control_node_B.j_eq] = 0.0;
    }

    if (proc_control_node_B.j_eq + 1 < n) {
      proc_control_node_B.smax_dn = A_data[proc_control_node_B.ii_l3];
      A_data[proc_control_node_B.ii_l3] = 1.0;
      proc_control_node_xzlarf(proc_control_node_B.mmi_e,
        proc_control_node_B.nmi - 1, proc_control_node_B.ii_l3 + 1,
        tau_data[proc_control_node_B.j_eq], A_data, (proc_control_node_B.ii_l3 +
        proc_control_node_B.ma_g) + 1, proc_control_node_B.ma_g,
        proc_control_node_B.work_data_j);
      A_data[proc_control_node_B.ii_l3] = proc_control_node_B.smax_dn;
    }

    proc_control_node_B.ii_l3 = proc_control_node_B.j_eq + 1;
    while (proc_control_node_B.ii_l3 + 1 <= n) {
      proc_control_node_B.nmi = proc_control_node_B.ii_l3 *
        proc_control_node_B.ma_g + proc_control_node_B.j_eq;
      if (proc_control_node_B.vn1_data[proc_control_node_B.ii_l3] != 0.0) {
        proc_control_node_B.smax_dn = fabs(A_data[proc_control_node_B.nmi]) /
          proc_control_node_B.vn1_data[proc_control_node_B.ii_l3];
        proc_control_node_B.smax_dn = 1.0 - proc_control_node_B.smax_dn *
          proc_control_node_B.smax_dn;
        if (proc_control_node_B.smax_dn < 0.0) {
          proc_control_node_B.smax_dn = 0.0;
        }

        proc_control_node_B.temp2 =
          proc_control_node_B.vn1_data[proc_control_node_B.ii_l3] /
          proc_control_node_B.vn2_data[proc_control_node_B.ii_l3];
        proc_control_node_B.temp2 = proc_control_node_B.temp2 *
          proc_control_node_B.temp2 * proc_control_node_B.smax_dn;
        if (proc_control_node_B.temp2 <= 1.4901161193847656E-8) {
          if (proc_control_node_B.j_eq + 1 < m) {
            proc_control_node_B.vn1_data[proc_control_node_B.ii_l3] =
              proc_control_node_xnrm2(proc_control_node_B.mmi_e - 1, A_data,
              proc_control_node_B.nmi + 2);
            proc_control_node_B.vn2_data[proc_control_node_B.ii_l3] =
              proc_control_node_B.vn1_data[proc_control_node_B.ii_l3];
          } else {
            proc_control_node_B.vn1_data[proc_control_node_B.ii_l3] = 0.0;
            proc_control_node_B.vn2_data[proc_control_node_B.ii_l3] = 0.0;
          }
        } else {
          proc_control_node_B.vn1_data[proc_control_node_B.ii_l3] *= sqrt
            (proc_control_node_B.smax_dn);
        }
      }

      proc_control_node_B.ii_l3++;
    }

    proc_control_node_B.j_eq++;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgeqp3(real_T A_data[],
  const int32_T A_size[2], int32_T m, int32_T n, int32_T jpvt_data[], real_T
  tau_data[], int32_T *tau_size)
{
  proc_control_node_B.ma = A_size[0];
  if (A_size[0] < A_size[1]) {
    proc_control_node_B.minmana_i = A_size[0];
  } else {
    proc_control_node_B.minmana_i = A_size[1];
  }

  if (m < n) {
    proc_control_node_B.minmn_f = m;
  } else {
    proc_control_node_B.minmn_f = n;
  }

  *tau_size = proc_control_node_B.minmana_i;
  if (0 <= proc_control_node_B.minmana_i - 1) {
    memset(&tau_data[0], 0, proc_control_node_B.minmana_i * sizeof(real_T));
  }

  if (proc_control_node_B.minmn_f < 1) {
    proc_control_node_B.ma = 0;
    while (proc_control_node_B.ma <= n - 1) {
      jpvt_data[proc_control_node_B.ma] = proc_control_node_B.ma + 1;
      proc_control_node_B.ma++;
    }
  } else {
    proc_control_node_B.minmana_i = -1;
    proc_control_node_B.c_j_a = 0;
    while (proc_control_node_B.c_j_a <= n - 1) {
      if (jpvt_data[proc_control_node_B.c_j_a] != 0) {
        proc_control_node_B.minmana_i++;
        if (proc_control_node_B.c_j_a + 1 != proc_control_node_B.minmana_i + 1)
        {
          proc_control_node_xswap(m, A_data, proc_control_node_B.c_j_a *
            proc_control_node_B.ma + 1, proc_control_node_B.minmana_i *
            proc_control_node_B.ma + 1);
          jpvt_data[proc_control_node_B.c_j_a] =
            jpvt_data[proc_control_node_B.minmana_i];
          jpvt_data[proc_control_node_B.minmana_i] = proc_control_node_B.c_j_a +
            1;
        } else {
          jpvt_data[proc_control_node_B.c_j_a] = proc_control_node_B.c_j_a + 1;
        }
      } else {
        jpvt_data[proc_control_node_B.c_j_a] = proc_control_node_B.c_j_a + 1;
      }

      proc_control_node_B.c_j_a++;
    }

    if (proc_control_node_B.minmana_i + 1 < proc_control_node_B.minmn_f) {
      proc_control_node_B.minmana_i++;
    } else {
      proc_control_node_B.minmana_i = proc_control_node_B.minmn_f;
    }

    proc_control_node_qrf(A_data, A_size, m, n, proc_control_node_B.minmana_i,
                          tau_data);
    if (proc_control_node_B.minmana_i < proc_control_node_B.minmn_f) {
      proc_control_node_qrpf(A_data, A_size, m, n, proc_control_node_B.minmana_i,
        tau_data, jpvt_data);
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factorQRE
  (s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj, const real_T A_data[], int32_T mrows,
   int32_T ncols, int32_T ldA)
{
  proc_control_node_B.b_idx_n = 0;
  while (proc_control_node_B.b_idx_n <= ncols - 1) {
    proc_control_node_B.iA0_i = ldA * proc_control_node_B.b_idx_n;
    proc_control_node_B.iQR0_h = obj->ldq * proc_control_node_B.b_idx_n;
    proc_control_node_B.b_e = 1;
    while (proc_control_node_B.b_e - 1 <= mrows - 1) {
      obj->QR.data[(proc_control_node_B.iQR0_h + proc_control_node_B.b_e) - 1] =
        A_data[(proc_control_node_B.iA0_i + proc_control_node_B.b_e) - 1];
      proc_control_node_B.b_e++;
    }

    proc_control_node_B.b_idx_n++;
  }

  obj->usedPivoting = true;
  obj->mrows = mrows;
  obj->ncols = ncols;
  if (mrows < ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_node_B.b_size_l[0] = obj->QR.size[0];
  proc_control_node_B.b_size_l[1] = obj->QR.size[1];
  proc_control_node_B.iA0_i = obj->QR.size[0] * obj->QR.size[1];
  if (0 <= proc_control_node_B.iA0_i - 1) {
    memcpy(&proc_control_node_B.b_data[0], &obj->QR.data[0],
           proc_control_node_B.iA0_i * sizeof(real_T));
  }

  proc_control_node_xgeqp3(proc_control_node_B.b_data,
    proc_control_node_B.b_size_l, mrows, ncols, obj->jpvt.data, obj->tau.data,
    &obj->tau.size);
  obj->QR.size[0] = proc_control_node_B.b_size_l[0];
  obj->QR.size[1] = proc_control_node_B.b_size_l[1];
  proc_control_node_B.iA0_i = proc_control_node_B.b_size_l[0] *
    proc_control_node_B.b_size_l[1];
  if (0 <= proc_control_node_B.iA0_i - 1) {
    memcpy(&obj->QR.data[0], &proc_control_node_B.b_data[0],
           proc_control_node_B.iA0_i * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xorgqr(int32_T m, int32_T n,
  int32_T k, real_T A_data[], const int32_T A_size[2], int32_T lda, const real_T
  tau_data[])
{
  if (n >= 1) {
    proc_control_node_B.itau_j = k;
    while (proc_control_node_B.itau_j <= n - 1) {
      proc_control_node_B.i_ba = proc_control_node_B.itau_j * lda;
      proc_control_node_B.iaii_f = 0;
      while (proc_control_node_B.iaii_f <= m - 1) {
        A_data[proc_control_node_B.i_ba + proc_control_node_B.iaii_f] = 0.0;
        proc_control_node_B.iaii_f++;
      }

      A_data[proc_control_node_B.i_ba + proc_control_node_B.itau_j] = 1.0;
      proc_control_node_B.itau_j++;
    }

    proc_control_node_B.itau_j = k - 1;
    proc_control_node_B.iaii_f = static_cast<int16_T>(A_size[1]);
    if (0 <= proc_control_node_B.iaii_f - 1) {
      memset(&proc_control_node_B.work_data_d[0], 0, proc_control_node_B.iaii_f *
             sizeof(real_T));
    }

    proc_control_node_B.i_ba = k;
    while (proc_control_node_B.i_ba >= 1) {
      proc_control_node_B.iaii_f = (proc_control_node_B.i_ba - 1) * lda +
        proc_control_node_B.i_ba;
      if (proc_control_node_B.i_ba < n) {
        A_data[proc_control_node_B.iaii_f - 1] = 1.0;
        proc_control_node_xzlarf((m - proc_control_node_B.i_ba) + 1, n -
          proc_control_node_B.i_ba, proc_control_node_B.iaii_f,
          tau_data[proc_control_node_B.itau_j], A_data,
          proc_control_node_B.iaii_f + lda, lda, proc_control_node_B.work_data_d);
      }

      if (proc_control_node_B.i_ba < m) {
        proc_control_node_B.d_c = (proc_control_node_B.iaii_f + m) -
          proc_control_node_B.i_ba;
        proc_control_node_B.b_k_fo = proc_control_node_B.iaii_f;
        while (proc_control_node_B.b_k_fo + 1 <= proc_control_node_B.d_c) {
          A_data[proc_control_node_B.b_k_fo] *=
            -tau_data[proc_control_node_B.itau_j];
          proc_control_node_B.b_k_fo++;
        }
      }

      A_data[proc_control_node_B.iaii_f - 1] = 1.0 -
        tau_data[proc_control_node_B.itau_j];
      proc_control_node_B.d_c = 0;
      while (proc_control_node_B.d_c <= proc_control_node_B.i_ba - 2) {
        A_data[(proc_control_node_B.iaii_f - proc_control_node_B.d_c) - 2] = 0.0;
        proc_control_node_B.d_c++;
      }

      proc_control_node_B.itau_j--;
      proc_control_node_B.i_ba--;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_computeQ_
  (s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj, int32_T nrows)
{
  proc_control_node_B.idx_l = 0;
  while (proc_control_node_B.idx_l <= obj->minRowCol - 1) {
    proc_control_node_B.iQR0_o = obj->ldq * proc_control_node_B.idx_l +
      proc_control_node_B.idx_l;
    proc_control_node_B.n_e = obj->mrows - proc_control_node_B.idx_l;
    proc_control_node_B.k_g = 1;
    while (proc_control_node_B.k_g - 1 <= proc_control_node_B.n_e - 2) {
      proc_control_node_B.i47 = proc_control_node_B.iQR0_o +
        proc_control_node_B.k_g;
      obj->Q.data[proc_control_node_B.i47] = obj->
        QR.data[proc_control_node_B.i47];
      proc_control_node_B.k_g++;
    }

    proc_control_node_B.idx_l++;
  }

  proc_control_node_xorgqr(obj->mrows, nrows, obj->minRowCol, obj->Q.data,
    obj->Q.size, obj->ldq, obj->tau.data);
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtm(int32_T m, int32_T
  n, const real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T b;
  int32_T b_c;
  int32_T ia;
  int32_T iac;
  if (m != 0) {
    proc_control_node_B.b_iy_k = 0;
    while (proc_control_node_B.b_iy_k <= n - 1) {
      y_data[proc_control_node_B.b_iy_k] = 0.0;
      proc_control_node_B.b_iy_k++;
    }

    proc_control_node_B.b_iy_k = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
      proc_control_node_B.ix_k = 0;
      proc_control_node_B.c_fg = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        proc_control_node_B.c_fg += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_k];
        proc_control_node_B.ix_k++;
      }

      y_data[proc_control_node_B.b_iy_k] += proc_control_node_B.c_fg;
      proc_control_node_B.b_iy_k++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xtrsv(int32_T n, const
  real_T A_data[], int32_T lda, real_T x_data[])
{
  int32_T i;
  int32_T ix;
  int32_T j;
  int32_T jjA;
  if (n != 0) {
    for (j = n - 1; j + 1 > 0; j--) {
      jjA = j * lda + j;
      x_data[j] /= A_data[jjA];
      for (i = 1; i - 1 < j; i++) {
        ix = j - i;
        x_data[ix] -= x_data[j] * A_data[jjA - i];
      }
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_sortLambdaQP(real_T
  lambda_data[], int32_T WorkingSet_nActiveConstr, const int32_T
  WorkingSet_sizes[5], const int32_T WorkingSet_isActiveIdx[6], const int32_T
  WorkingSet_Wid_data[], const int32_T WorkingSet_Wlocalidx_data[], real_T
  workspace_data[])
{
  int32_T idx;
  int32_T idxOffset;
  int32_T mAll;
  if (WorkingSet_nActiveConstr != 0) {
    mAll = (((WorkingSet_sizes[0] + WorkingSet_sizes[3]) + WorkingSet_sizes[4])
            + WorkingSet_sizes[2]) + 129;
    for (idx = 0; idx <= mAll; idx++) {
      workspace_data[idx] = lambda_data[idx];
    }

    for (idx = 0; idx <= mAll; idx++) {
      lambda_data[idx] = 0.0;
    }

    mAll = 0;
    idx = 0;
    while ((idx + 1 <= WorkingSet_nActiveConstr) && (WorkingSet_Wid_data[idx] <=
            2)) {
      if (WorkingSet_Wid_data[idx] == 1) {
        idxOffset = 1;
      } else {
        idxOffset = WorkingSet_isActiveIdx[1];
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
        workspace_data[mAll];
      mAll++;
      idx++;
    }

    while (idx + 1 <= WorkingSet_nActiveConstr) {
      switch (WorkingSet_Wid_data[idx]) {
       case 3:
        idxOffset = WorkingSet_isActiveIdx[2];
        break;

       case 4:
        idxOffset = WorkingSet_isActiveIdx[3];
        break;

       default:
        idxOffset = WorkingSet_isActiveIdx[4];
        break;
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
        workspace_data[mAll];
      mAll++;
      idx++;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
int32_T proc_control_nodeModelClass::proc_control_node_ixamax(int32_T n, const
  real_T x_data[])
{
  real_T y;
  int32_T idxmax;
  int32_T ix;
  int32_T k;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      ix = 0;
      proc_control_node_B.smax_g = fabs(x_data[0]);
      for (k = 2; k <= n; k++) {
        ix++;
        y = fabs(x_data[ix]);
        if (y > proc_control_node_B.smax_g) {
          idxmax = k;
          proc_control_node_B.smax_g = y;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_test_exit
  (s7RdrPWkr8UPAUyTdDJkLaG_proc__T *Flags, s_OnOuVjEActeQRN4FyNqSwB_proc_T
   *memspace, sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction, const int32_T
   *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
   s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet, s_UjlJWoQEHmSUKFcPTad7eC_proc_T *
   TrialState, s_2F24x1ekvOt8ZUO1knVMv_proc__T *QRManager, const real_T lb[147])
{
  boolean_T dxTooSmall;
  boolean_T exitg1;
  boolean_T guard1 = false;
  boolean_T isFeasible;
  proc_control_node_B.nVar_dk = WorkingSet->nVar;
  proc_control_node_B.mFixed_p = WorkingSet->sizes[0];
  proc_control_node_B.mIneq_g = WorkingSet->sizes[2];
  proc_control_node_B.mLB_f = WorkingSet->sizes[3];
  proc_control_node_B.mUB_o = WorkingSet->sizes[4];
  proc_control_node_B.mLambda_f = (((WorkingSet->sizes[0] + WorkingSet->sizes[2])
    + WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 129;
  proc_control_node_B.nActiveConstr = 0;
  while (proc_control_node_B.nActiveConstr <= proc_control_node_B.mLambda_f) {
    TrialState->lambdaStopTest.data[proc_control_node_B.nActiveConstr] =
      TrialState->lambdasqp.data[proc_control_node_B.nActiveConstr];
    proc_control_node_B.nActiveConstr++;
  }

  proc_control_nod_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  proc_control_node_B.optimRelativeFactor_j = fabs(TrialState->
    grad.data[proc_control_node_ixamax(WorkingSet->nVar, TrialState->grad.data)
    - 1]);
  if ((1.0 > proc_control_node_B.optimRelativeFactor_j) || rtIsNaN
      (proc_control_node_B.optimRelativeFactor_j)) {
    proc_control_node_B.optimRelativeFactor_j = 1.0;
  }

  if (rtIsInf(proc_control_node_B.optimRelativeFactor_j)) {
    proc_control_node_B.optimRelativeFactor_j = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if (TrialState->sqpIterations == 0) {
    if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
        (MeritFunction->nlpPrimalFeasError)) {
      MeritFunction->feasRelativeFactor = 1.0;
    } else {
      MeritFunction->feasRelativeFactor = MeritFunction->nlpPrimalFeasError;
    }
  }

  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &dxTooSmall, &proc_control_node_B.tol_d);
  Flags->gradOK = dxTooSmall;
  MeritFunction->nlpDualFeasError = proc_control_node_B.tol_d;
  if (!dxTooSmall) {
    Flags->done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = proc_control__computeComplError
      (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
       TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
       WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
       WorkingSet->indexUB.data, WorkingSet->sizes[4],
       TrialState->lambdaStopTest.data, WorkingSet->sizes[0] + 131);
    if ((proc_control_node_B.tol_d > MeritFunction->nlpComplError) || rtIsNaN
        (MeritFunction->nlpComplError)) {
      MeritFunction->firstOrderOpt = proc_control_node_B.tol_d;
    } else {
      MeritFunction->firstOrderOpt = MeritFunction->nlpComplError;
    }

    if (TrialState->sqpIterations > 1) {
      proc_control_n_computeGradLag_b(memspace->workspace_double.data,
        WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
        WorkingSet->sizes[2], WorkingSet->Aineq.data, WorkingSet->Aeq.data,
        WorkingSet->indexFixed.data, WorkingSet->sizes[0],
        WorkingSet->indexLB.data, WorkingSet->sizes[3], WorkingSet->indexUB.data,
        WorkingSet->sizes[4], TrialState->lambdaStopTestPrev.data);
      proc_con_computeDualFeasError_b(WorkingSet->nVar,
        memspace->workspace_double.data, &dxTooSmall,
        &proc_control_node_B.nlpComplErrorLSQ);
      proc_control_node_B.nlpComplErrorTmp = proc_control__computeComplError
        (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
         TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
         WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
         WorkingSet->indexUB.data, WorkingSet->sizes[4],
         TrialState->lambdaStopTestPrev.data, WorkingSet->sizes[0] + 131);
      if ((proc_control_node_B.nlpComplErrorLSQ >
           proc_control_node_B.nlpComplErrorTmp) || rtIsNaN
          (proc_control_node_B.nlpComplErrorTmp)) {
        proc_control_node_B.d6 = proc_control_node_B.nlpComplErrorLSQ;
      } else {
        proc_control_node_B.d6 = proc_control_node_B.nlpComplErrorTmp;
      }

      if ((!(proc_control_node_B.tol_d > MeritFunction->nlpComplError)) &&
          (!rtIsNaN(MeritFunction->nlpComplError))) {
        proc_control_node_B.tol_d = MeritFunction->nlpComplError;
      }

      if (proc_control_node_B.d6 < proc_control_node_B.tol_d) {
        MeritFunction->nlpDualFeasError = proc_control_node_B.nlpComplErrorLSQ;
        MeritFunction->nlpComplError = proc_control_node_B.nlpComplErrorTmp;
        MeritFunction->firstOrderOpt = proc_control_node_B.d6;
        proc_control_node_B.nActiveConstr = 0;
        while (proc_control_node_B.nActiveConstr <=
               proc_control_node_B.mLambda_f) {
          TrialState->lambdaStopTest.data[proc_control_node_B.nActiveConstr] =
            TrialState->
            lambdaStopTestPrev.data[proc_control_node_B.nActiveConstr];
          proc_control_node_B.nActiveConstr++;
        }
      } else {
        proc_control_node_B.nActiveConstr = 0;
        while (proc_control_node_B.nActiveConstr <=
               proc_control_node_B.mLambda_f) {
          TrialState->lambdaStopTestPrev.data[proc_control_node_B.nActiveConstr]
            = TrialState->lambdaStopTest.data[proc_control_node_B.nActiveConstr];
          proc_control_node_B.nActiveConstr++;
        }
      }
    } else {
      proc_control_node_B.nActiveConstr = 0;
      while (proc_control_node_B.nActiveConstr <= proc_control_node_B.mLambda_f)
      {
        TrialState->lambdaStopTestPrev.data[proc_control_node_B.nActiveConstr] =
          TrialState->lambdaStopTest.data[proc_control_node_B.nActiveConstr];
        proc_control_node_B.nActiveConstr++;
      }
    }

    if (isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
                       proc_control_node_B.optimRelativeFactor_j) &&
        (MeritFunction->nlpComplError <= 0.02 *
         proc_control_node_B.optimRelativeFactor_j)) {
      Flags->done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      Flags->done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        Flags->done = true;
        TrialState->sqpExitFlag = -3;
      } else {
        guard1 = false;
        if (TrialState->sqpIterations > 0) {
          dxTooSmall = true;
          proc_control_node_B.nActiveConstr = 0;
          exitg1 = false;
          while ((!exitg1) && (proc_control_node_B.nActiveConstr <=
                               proc_control_node_B.nVar_dk - 1)) {
            proc_control_node_B.tol_d = fabs(TrialState->
              xstarsqp[proc_control_node_B.nActiveConstr]);
            if ((1.0 > proc_control_node_B.tol_d) || rtIsNaN
                (proc_control_node_B.tol_d)) {
              proc_control_node_B.tol_d = 1.0;
            }

            if (0.1 * proc_control_node_B.tol_d <= fabs(TrialState->
                 delta_x.data[proc_control_node_B.nActiveConstr])) {
              dxTooSmall = false;
              exitg1 = true;
            } else {
              proc_control_node_B.nActiveConstr++;
            }
          }

          if (dxTooSmall) {
            if (!isFeasible) {
              if (Flags->stepType != 2) {
                Flags->stepType = 2;
                Flags->failedLineSearch = false;
                Flags->stepAccepted = false;
                guard1 = true;
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = -2;
              }
            } else {
              proc_control_node_B.nActiveConstr = WorkingSet->nActiveConstr;
              if (WorkingSet->nActiveConstr > 0) {
                proc_updateWorkingSetForNewQP_l(TrialState->xstarsqp, WorkingSet,
                  WorkingSet->sizes[2], TrialState->mNonlinIneq,
                  TrialState->cIneq.data, TrialState->cEq, WorkingSet->sizes[3],
                  lb, WorkingSet->sizes[4], WorkingSet->sizes[0]);
                proc_control_node_B.fullRank_R = 0;
                while (proc_control_node_B.fullRank_R <=
                       proc_control_node_B.nActiveConstr - 1) {
                  TrialState->lambda.data[proc_control_node_B.fullRank_R] = 0.0;
                  proc_control_node_B.fullRank_R++;
                }

                proc_control_node_factorQRE(QRManager, WorkingSet->ATwset.data,
                  proc_control_node_B.nVar_dk, proc_control_node_B.nActiveConstr,
                  WorkingSet->ldA);
                proc_control_node_computeQ_(QRManager, QRManager->mrows);
                if (proc_control_node_B.nVar_dk >
                    proc_control_node_B.nActiveConstr) {
                  proc_control_node_B.iQR_diag = proc_control_node_B.nVar_dk;
                } else {
                  proc_control_node_B.iQR_diag =
                    proc_control_node_B.nActiveConstr;
                }

                proc_control_node_B.tol_d = static_cast<real_T>
                  (proc_control_node_B.iQR_diag) * 2.2204460492503131E-16;
                if (1.4901161193847656E-8 < proc_control_node_B.tol_d) {
                  proc_control_node_B.tol_d = 1.4901161193847656E-8;
                }

                proc_control_node_B.tol_d *= fabs(QRManager->QR.data[0]);
                if (proc_control_node_B.nVar_dk <
                    proc_control_node_B.nActiveConstr) {
                  proc_control_node_B.fullRank_R = proc_control_node_B.nVar_dk;
                } else {
                  proc_control_node_B.fullRank_R =
                    proc_control_node_B.nActiveConstr;
                }

                proc_control_node_B.rankR = 0;
                proc_control_node_B.iQR_diag = 0;
                while ((proc_control_node_B.rankR <
                        proc_control_node_B.fullRank_R) && (fabs
                        (QRManager->QR.data[proc_control_node_B.iQR_diag]) >
                        proc_control_node_B.tol_d)) {
                  proc_control_node_B.rankR++;
                  proc_control_node_B.iQR_diag = (proc_control_node_B.iQR_diag +
                    QRManager->ldq) + 1;
                }

                proc_control_node_B.e_size[0] = memspace->workspace_double.size
                  [0];
                proc_control_node_B.e_size[1] = memspace->workspace_double.size
                  [1];
                proc_control_node_B.iQR_diag = memspace->workspace_double.size[0]
                  * memspace->workspace_double.size[1];
                if (0 <= proc_control_node_B.iQR_diag - 1) {
                  memcpy(&proc_control_node_B.e_data[0],
                         &memspace->workspace_double.data[0],
                         proc_control_node_B.iQR_diag * sizeof(real_T));
                }

                proc_control_node_xgemv_mtm(proc_control_node_B.nVar_dk,
                  proc_control_node_B.nVar_dk, QRManager->Q.data, QRManager->ldq,
                  TrialState->grad.data, proc_control_node_B.e_data);
                proc_control_node_xtrsv(proc_control_node_B.rankR,
                  QRManager->QR.data, QRManager->ldq, proc_control_node_B.e_data);
                if (proc_control_node_B.nActiveConstr >=
                    proc_control_node_B.fullRank_R) {
                  proc_control_node_B.nActiveConstr =
                    proc_control_node_B.fullRank_R;
                }

                proc_control_node_B.fullRank_R = 0;
                while (proc_control_node_B.fullRank_R <=
                       proc_control_node_B.nActiveConstr - 1) {
                  TrialState->lambda.data[QRManager->
                    jpvt.data[proc_control_node_B.fullRank_R] - 1] =
                    proc_control_node_B.e_data[proc_control_node_B.fullRank_R];
                  proc_control_node_B.fullRank_R++;
                }

                proc_control_node_B.nActiveConstr = proc_control_node_B.mFixed_p;
                while (proc_control_node_B.nActiveConstr + 1 <=
                       proc_control_node_B.mFixed_p + 130) {
                  TrialState->lambda.data[proc_control_node_B.nActiveConstr] =
                    -TrialState->lambda.data[proc_control_node_B.nActiveConstr];
                  proc_control_node_B.nActiveConstr++;
                }

                proc_control_node_sortLambdaQP(TrialState->lambda.data,
                  WorkingSet->nActiveConstr, WorkingSet->sizes,
                  WorkingSet->isActiveIdx, WorkingSet->Wid.data,
                  WorkingSet->Wlocalidx.data, proc_control_node_B.e_data);
                memspace->workspace_double.size[0] = proc_control_node_B.e_size
                  [0];
                memspace->workspace_double.size[1] = proc_control_node_B.e_size
                  [1];
                proc_control_node_B.iQR_diag = proc_control_node_B.e_size[0] *
                  proc_control_node_B.e_size[1];
                if (0 <= proc_control_node_B.iQR_diag - 1) {
                  memcpy(&memspace->workspace_double.data[0],
                         &proc_control_node_B.e_data[0],
                         proc_control_node_B.iQR_diag * sizeof(real_T));
                }

                proc_control_n_computeGradLag_b(memspace->workspace_double.data,
                  WorkingSet->ldA, proc_control_node_B.nVar_dk,
                  TrialState->grad.data, proc_control_node_B.mIneq_g,
                  WorkingSet->Aineq.data, WorkingSet->Aeq.data,
                  WorkingSet->indexFixed.data, proc_control_node_B.mFixed_p,
                  WorkingSet->indexLB.data, proc_control_node_B.mLB_f,
                  WorkingSet->indexUB.data, proc_control_node_B.mUB_o,
                  TrialState->lambda.data);
                proc_con_computeDualFeasError_b(proc_control_node_B.nVar_dk,
                  memspace->workspace_double.data, &isFeasible,
                  &proc_control_node_B.tol_d);
                proc_control_node_B.nlpComplErrorLSQ =
                  proc_control__computeComplError(fscales_lineq_constraint_size,
                  fscales_cineq_constraint_size, TrialState->xstarsqp,
                  proc_control_node_B.mIneq_g, TrialState->cIneq.data,
                  WorkingSet->indexLB.data, proc_control_node_B.mLB_f, lb,
                  WorkingSet->indexUB.data, proc_control_node_B.mUB_o,
                  TrialState->lambda.data, proc_control_node_B.mFixed_p + 1);
                if ((proc_control_node_B.tol_d <= 0.02 *
                     proc_control_node_B.optimRelativeFactor_j) &&
                    (proc_control_node_B.nlpComplErrorLSQ <= 0.02 *
                     proc_control_node_B.optimRelativeFactor_j)) {
                  MeritFunction->nlpDualFeasError = proc_control_node_B.tol_d;
                  MeritFunction->nlpComplError =
                    proc_control_node_B.nlpComplErrorLSQ;
                  if (proc_control_node_B.tol_d >
                      proc_control_node_B.nlpComplErrorLSQ) {
                    MeritFunction->firstOrderOpt = proc_control_node_B.tol_d;
                  } else {
                    MeritFunction->firstOrderOpt =
                      proc_control_node_B.nlpComplErrorLSQ;
                  }

                  proc_control_node_B.nVar_dk = 0;
                  while (proc_control_node_B.nVar_dk <=
                         proc_control_node_B.mLambda_f) {
                    TrialState->lambdaStopTest.data[proc_control_node_B.nVar_dk]
                      = TrialState->lambda.data[proc_control_node_B.nVar_dk];
                    proc_control_node_B.nVar_dk++;
                  }

                  Flags->done = true;
                  TrialState->sqpExitFlag = 1;
                } else {
                  Flags->done = true;
                  TrialState->sqpExitFlag = 2;
                }
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = 2;
              }
            }
          } else {
            guard1 = true;
          }
        } else {
          guard1 = true;
        }

        if (guard1) {
          if (TrialState->sqpIterations >= 400) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          } else if (TrialState->FunctionEvaluations >= 14700) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_xgemv_mtmcjbiadz2i(int32_T m,
  int32_T n, const real_T A_data[], int32_T ia0, int32_T lda, const real_T
  x_data[], int32_T ix0, real_T y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  int32_T iy;
  proc_control_node_B.ix_c = ix0;
  b = (n - 1) * lda + ia0;
  iac = ia0;
  while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
    iy = 0;
    c = (iac + m) - 1;
    for (ia = iac; ia <= c; ia++) {
      y_data[iy] += A_data[ia - 1] * x_data[proc_control_node_B.ix_c - 1];
      iy++;
    }

    proc_control_node_B.ix_c++;
    iac += lda;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_BFGSUpdate(int32_T nvar,
  real_T Bk[21609], const real_T sk_data[], real_T yk_data[], real_T
  workspace_data[])
{
  int32_T b_ix;
  int32_T b_jA;
  int32_T c_ix;
  int32_T d;
  int32_T jy;
  boolean_T success;
  proc_control_node_B.dotSY = 0.0;
  if (nvar >= 1) {
    for (b_jA = 0; b_jA < nvar; b_jA++) {
      proc_control_node_B.dotSY += sk_data[b_jA] * yk_data[b_jA];
    }
  }

  for (b_jA = 0; b_jA < nvar; b_jA++) {
    workspace_data[b_jA] = 0.0;
  }

  proc_control_node_B.ix_m = 0;
  jy = (nvar - 1) * 147;
  for (c_ix = 1; c_ix <= jy + 1; c_ix += 147) {
    b_ix = 0;
    d = (c_ix + nvar) - 1;
    for (b_jA = c_ix; b_jA <= d; b_jA++) {
      workspace_data[b_ix] += Bk[b_jA - 1] * sk_data[proc_control_node_B.ix_m];
      b_ix++;
    }

    proc_control_node_B.ix_m++;
  }

  proc_control_node_B.curvatureS = 0.0;
  if (nvar >= 1) {
    proc_control_node_B.ix_m = 0;
    while (proc_control_node_B.ix_m <= nvar - 1) {
      proc_control_node_B.curvatureS += workspace_data[proc_control_node_B.ix_m]
        * sk_data[proc_control_node_B.ix_m];
      proc_control_node_B.ix_m++;
    }
  }

  if (proc_control_node_B.dotSY < 0.2 * proc_control_node_B.curvatureS) {
    proc_control_node_B.dotSY = 0.8 * proc_control_node_B.curvatureS /
      (proc_control_node_B.curvatureS - proc_control_node_B.dotSY);
    for (b_jA = 0; b_jA < nvar; b_jA++) {
      yk_data[b_jA] *= proc_control_node_B.dotSY;
    }

    proc_control_node_B.dotSY = 1.0 - proc_control_node_B.dotSY;
    if (!(proc_control_node_B.dotSY == 0.0)) {
      proc_control_node_B.ix_m = 0;
      while (proc_control_node_B.ix_m <= nvar - 1) {
        yk_data[proc_control_node_B.ix_m] +=
          workspace_data[proc_control_node_B.ix_m] * proc_control_node_B.dotSY;
        proc_control_node_B.ix_m++;
      }
    }

    proc_control_node_B.dotSY = 0.0;
    if (nvar >= 1) {
      for (b_jA = 0; b_jA < nvar; b_jA++) {
        proc_control_node_B.dotSY += sk_data[b_jA] * yk_data[b_jA];
      }
    }
  }

  success = ((proc_control_node_B.curvatureS > 2.2204460492503131E-16) &&
             (proc_control_node_B.dotSY > 2.2204460492503131E-16));
  if (success) {
    proc_control_node_B.curvatureS = -1.0 / proc_control_node_B.curvatureS;
    if (!(proc_control_node_B.curvatureS == 0.0)) {
      proc_control_node_B.ix_m = 0;
      jy = 0;
      for (c_ix = 0; c_ix < nvar; c_ix++) {
        if (workspace_data[jy] != 0.0) {
          proc_control_node_B.temp_n = workspace_data[jy] *
            proc_control_node_B.curvatureS;
          b_ix = 0;
          d = nvar + proc_control_node_B.ix_m;
          for (b_jA = proc_control_node_B.ix_m; b_jA < d; b_jA++) {
            Bk[b_jA] += workspace_data[b_ix] * proc_control_node_B.temp_n;
            b_ix++;
          }
        }

        jy++;
        proc_control_node_B.ix_m += 147;
      }
    }

    proc_control_node_B.curvatureS = 1.0 / proc_control_node_B.dotSY;
    if (!(proc_control_node_B.curvatureS == 0.0)) {
      b_jA = 0;
      proc_control_node_B.ix_m = 0;
      for (jy = 0; jy < nvar; jy++) {
        if (yk_data[proc_control_node_B.ix_m] != 0.0) {
          proc_control_node_B.dotSY = yk_data[proc_control_node_B.ix_m] *
            proc_control_node_B.curvatureS;
          c_ix = 0;
          b_ix = nvar + b_jA;
          for (d = b_jA; d < b_ix; d++) {
            Bk[d] += yk_data[c_ix] * proc_control_node_B.dotSY;
            c_ix++;
          }
        }

        proc_control_node_B.ix_m++;
        b_jA += 147;
      }
    }
  }

  return success;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factorQRE_f
  (s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj, int32_T mrows, int32_T ncols)
{
  if (mrows * ncols == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    obj->usedPivoting = true;
    obj->mrows = mrows;
    obj->ncols = ncols;
    if (mrows < ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_node_B.b_size_p[0] = obj->QR.size[0];
    proc_control_node_B.b_size_p[1] = obj->QR.size[1];
    proc_control_node_B.loop_ub_a = obj->QR.size[0] * obj->QR.size[1];
    if (0 <= proc_control_node_B.loop_ub_a - 1) {
      memcpy(&proc_control_node_B.b_data_m[0], &obj->QR.data[0],
             proc_control_node_B.loop_ub_a * sizeof(real_T));
    }

    proc_control_node_xgeqp3(proc_control_node_B.b_data_m,
      proc_control_node_B.b_size_p, mrows, ncols, obj->jpvt.data, obj->tau.data,
      &obj->tau.size);
    obj->QR.size[0] = proc_control_node_B.b_size_p[0];
    obj->QR.size[1] = proc_control_node_B.b_size_p[1];
    proc_control_node_B.loop_ub_a = proc_control_node_B.b_size_p[0] *
      proc_control_node_B.b_size_p[1];
    if (0 <= proc_control_node_B.loop_ub_a - 1) {
      memcpy(&obj->QR.data[0], &proc_control_node_B.b_data_m[0],
             proc_control_node_B.loop_ub_a * sizeof(real_T));
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_countsort(int32_T x_data[],
  int32_T xLen, int32_T workspace_data[], int32_T xMin, int32_T xMax)
{
  int32_T b_idxW;
  int32_T idxEnd;
  int32_T idxStart;
  int32_T maxOffset_tmp;
  if ((xLen > 1) && (xMax > xMin)) {
    maxOffset_tmp = xMax - xMin;
    for (idxStart = 0; idxStart <= maxOffset_tmp; idxStart++) {
      workspace_data[idxStart] = 0;
    }

    for (idxStart = 0; idxStart < xLen; idxStart++) {
      idxEnd = x_data[idxStart] - xMin;
      workspace_data[idxEnd]++;
    }

    for (idxStart = 1; idxStart < maxOffset_tmp + 1; idxStart++) {
      workspace_data[idxStart] += workspace_data[idxStart - 1];
    }

    idxStart = 0;
    idxEnd = workspace_data[0];
    for (b_idxW = 0; b_idxW < maxOffset_tmp; b_idxW++) {
      while (idxStart + 1 <= idxEnd) {
        x_data[idxStart] = b_idxW + xMin;
        idxStart++;
      }

      idxStart = workspace_data[b_idxW];
      idxEnd = workspace_data[b_idxW + 1];
    }

    while (idxStart + 1 <= idxEnd) {
      x_data[idxStart] = xMax;
      idxStart++;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_removeConstr
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, int32_T idx_global)
{
  int32_T TYPE_tmp;
  int32_T b_idx;
  int32_T idx_global_start_tmp_tmp;
  TYPE_tmp = obj->Wid.data[idx_global - 1] - 1;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE_tmp] + obj->
    Wlocalidx.data[idx_global - 1]) - 2] = false;
  idx_global_start_tmp_tmp = obj->nActiveConstr - 1;
  obj->Wid.data[idx_global - 1] = obj->Wid.data[obj->nActiveConstr - 1];
  obj->Wlocalidx.data[idx_global - 1] = obj->
    Wlocalidx.data[idx_global_start_tmp_tmp];
  for (b_idx = 0; b_idx < obj->nVar; b_idx++) {
    obj->ATwset.data[b_idx + obj->ldA * (idx_global - 1)] = obj->ATwset.data
      [obj->ldA * idx_global_start_tmp_tmp + b_idx];
  }

  obj->bwset.data[idx_global - 1] = obj->bwset.data[idx_global_start_tmp_tmp];
  obj->nActiveConstr--;
  obj->nWConstr[TYPE_tmp]--;
}

// Function for MATLAB Function: '<S228>/NLMPC'
int32_T proc_control_nodeModelClass::proc_control_RemoveDependentEq_
  (s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
   *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager)
{
  int32_T nDepInd;
  boolean_T exitg1;
  proc_control_node_B.nVar_do = workingset->nVar - 1;
  proc_control_node_B.mTotalWorkingEq = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  nDepInd = 0;
  if (proc_control_node_B.mTotalWorkingEq > 0) {
    proc_control_node_B.totalRank = 0;
    while (proc_control_node_B.totalRank <= proc_control_node_B.mTotalWorkingEq
           - 1) {
      proc_control_node_B.ix_lo = 0;
      while (proc_control_node_B.ix_lo <= proc_control_node_B.nVar_do) {
        qrmanager->QR.data[proc_control_node_B.totalRank + qrmanager->ldq *
          proc_control_node_B.ix_lo] = workingset->ATwset.data[workingset->ldA *
          proc_control_node_B.totalRank + proc_control_node_B.ix_lo];
        proc_control_node_B.ix_lo++;
      }

      proc_control_node_B.totalRank++;
    }

    proc_control_node_B.iy_m = proc_control_node_B.mTotalWorkingEq -
      workingset->nVar;
    if (0 <= proc_control_node_B.iy_m) {
      nDepInd = proc_control_node_B.iy_m;
    }

    proc_control_node_B.totalRank = 0;
    while (proc_control_node_B.totalRank <= proc_control_node_B.nVar_do) {
      qrmanager->jpvt.data[proc_control_node_B.totalRank] = 0;
      proc_control_node_B.totalRank++;
    }

    proc_control_node_factorQRE_f(qrmanager, proc_control_node_B.mTotalWorkingEq,
      workingset->nVar);
    proc_control_node_B.tol = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    if (workingset->nVar < proc_control_node_B.mTotalWorkingEq) {
      proc_control_node_B.totalRank = workingset->nVar;
    } else {
      proc_control_node_B.totalRank = proc_control_node_B.mTotalWorkingEq;
    }

    proc_control_node_B.totalRank += (proc_control_node_B.totalRank - 1) *
      qrmanager->ldq;
    while ((proc_control_node_B.totalRank > 0) && (fabs(qrmanager->
             QR.data[proc_control_node_B.totalRank - 1]) <
            proc_control_node_B.tol)) {
      proc_control_node_B.totalRank = (proc_control_node_B.totalRank -
        qrmanager->ldq) - 1;
      nDepInd++;
    }

    if (nDepInd > 0) {
      proc_control_node_computeQ_(qrmanager, qrmanager->mrows);
      proc_control_node_B.totalRank = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.totalRank <= nDepInd - 1)) {
        proc_control_node_B.qtb = 0.0;
        proc_control_node_B.ix_lo = ((proc_control_node_B.mTotalWorkingEq -
          proc_control_node_B.totalRank) - 1) * qrmanager->ldq;
        proc_control_node_B.iy_m = 0;
        proc_control_node_B.b_k_oi = 0;
        while (proc_control_node_B.b_k_oi <= proc_control_node_B.mTotalWorkingEq
               - 1) {
          proc_control_node_B.qtb += qrmanager->Q.data[proc_control_node_B.ix_lo]
            * workingset->bwset.data[proc_control_node_B.iy_m];
          proc_control_node_B.ix_lo++;
          proc_control_node_B.iy_m++;
          proc_control_node_B.b_k_oi++;
        }

        if (fabs(proc_control_node_B.qtb) >= proc_control_node_B.tol) {
          nDepInd = -1;
          exitg1 = true;
        } else {
          proc_control_node_B.totalRank++;
        }
      }
    }

    if (nDepInd > 0) {
      proc_control_node_B.totalRank = 0;
      while (proc_control_node_B.totalRank <=
             proc_control_node_B.mTotalWorkingEq - 1) {
        proc_control_node_B.ix_lo = qrmanager->ldq *
          proc_control_node_B.totalRank;
        proc_control_node_B.iy_m = workingset->ldA *
          proc_control_node_B.totalRank;
        proc_control_node_B.b_k_oi = 1;
        while (proc_control_node_B.b_k_oi - 1 <= proc_control_node_B.nVar_do) {
          qrmanager->QR.data[(proc_control_node_B.ix_lo +
                              proc_control_node_B.b_k_oi) - 1] =
            workingset->ATwset.data[(proc_control_node_B.iy_m +
            proc_control_node_B.b_k_oi) - 1];
          proc_control_node_B.b_k_oi++;
        }

        proc_control_node_B.totalRank++;
      }

      proc_control_node_B.nVar_do = 0;
      while (proc_control_node_B.nVar_do <= workingset->nWConstr[0] - 1) {
        qrmanager->jpvt.data[proc_control_node_B.nVar_do] = 1;
        proc_control_node_B.nVar_do++;
      }

      proc_control_node_B.nVar_do = workingset->nWConstr[0];
      while (proc_control_node_B.nVar_do + 1 <=
             proc_control_node_B.mTotalWorkingEq) {
        qrmanager->jpvt.data[proc_control_node_B.nVar_do] = 0;
        proc_control_node_B.nVar_do++;
      }

      proc_control_node_factorQRE_f(qrmanager, workingset->nVar,
        proc_control_node_B.mTotalWorkingEq);
      proc_control_node_B.nVar_do = 0;
      while (proc_control_node_B.nVar_do <= nDepInd - 1) {
        memspace->workspace_int.data[proc_control_node_B.nVar_do] =
          qrmanager->jpvt.data[(proc_control_node_B.mTotalWorkingEq - nDepInd) +
          proc_control_node_B.nVar_do];
        proc_control_node_B.nVar_do++;
      }

      proc_control_node_countsort(memspace->workspace_int.data, nDepInd,
        memspace->workspace_sort.data, 1, proc_control_node_B.mTotalWorkingEq);
      proc_control_node_B.mTotalWorkingEq = nDepInd - 1;
      while (proc_control_node_B.mTotalWorkingEq + 1 > 0) {
        proc_control_node_B.nVar_do = (workingset->nWConstr[0] +
          workingset->nWConstr[1]) - 1;
        if ((proc_control_node_B.nVar_do + 1 != 0) &&
            (memspace->workspace_int.data[proc_control_node_B.mTotalWorkingEq] <=
             proc_control_node_B.nVar_do + 1)) {
          if ((proc_control_node_B.nVar_do + 1 == workingset->nActiveConstr) ||
              (proc_control_node_B.nVar_do + 1 == memspace->
               workspace_int.data[proc_control_node_B.mTotalWorkingEq])) {
            workingset->mEqRemoved++;
            workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1];
            proc_control_node_removeConstr(workingset,
              memspace->workspace_int.data[proc_control_node_B.mTotalWorkingEq]);
          } else {
            workingset->mEqRemoved++;
            proc_control_node_B.totalRank = workingset->Wid.data
              [memspace->workspace_int.data[proc_control_node_B.mTotalWorkingEq]
              - 1] - 1;
            workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1];
            workingset->isActiveConstr.data[(workingset->isActiveIdx
              [workingset->Wid.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] - 1]
              + workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1]) - 2]
              = false;
            workingset->Wid.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] =
              workingset->Wid.data[proc_control_node_B.nVar_do];
            workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] =
              workingset->Wlocalidx.data[proc_control_node_B.nVar_do];
            proc_control_node_B.ix_lo = 0;
            while (proc_control_node_B.ix_lo <= workingset->nVar - 1) {
              workingset->ATwset.data[proc_control_node_B.ix_lo +
                workingset->ldA * (memspace->
                                   workspace_int.data[proc_control_node_B.mTotalWorkingEq]
                                   - 1)] = workingset->ATwset.data
                [workingset->ldA * proc_control_node_B.nVar_do +
                proc_control_node_B.ix_lo];
              proc_control_node_B.ix_lo++;
            }

            workingset->bwset.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] =
              workingset->bwset.data[proc_control_node_B.nVar_do];
            proc_control_node_B.ix_lo = workingset->nActiveConstr - 1;
            workingset->Wid.data[proc_control_node_B.nVar_do] =
              workingset->Wid.data[workingset->nActiveConstr - 1];
            workingset->Wlocalidx.data[proc_control_node_B.nVar_do] =
              workingset->Wlocalidx.data[proc_control_node_B.ix_lo];
            proc_control_node_B.iy_m = 0;
            while (proc_control_node_B.iy_m <= workingset->nVar - 1) {
              workingset->ATwset.data[proc_control_node_B.iy_m + workingset->ldA
                * proc_control_node_B.nVar_do] = workingset->
                ATwset.data[workingset->ldA * proc_control_node_B.ix_lo +
                proc_control_node_B.iy_m];
              proc_control_node_B.iy_m++;
            }

            workingset->bwset.data[proc_control_node_B.nVar_do] =
              workingset->bwset.data[proc_control_node_B.ix_lo];
            workingset->nActiveConstr--;
            workingset->nWConstr[proc_control_node_B.totalRank]--;
          }
        }

        proc_control_node_B.mTotalWorkingEq--;
      }
    }
  }

  return nDepInd;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_contro_removeAllIneqConstr
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj)
{
  int32_T idx_global;
  for (idx_global = obj->nWConstr[0] + obj->nWConstr[1]; idx_global <
       obj->nActiveConstr; idx_global++) {
    obj->isActiveConstr.data[(obj->isActiveIdx[obj->Wid.data[idx_global] - 1] +
      obj->Wlocalidx.data[idx_global]) - 2] = false;
  }

  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + obj->nWConstr[1];
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_contr_RemoveDependentIneq_
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *
   qrmanager, s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace)
{
  proc_control_node_B.nFixedConstr_d = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  proc_control_node_B.nVar_f = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    proc_control_node_B.tol_o = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    proc_control_node_B.nDepIneq_o = 0;
    while (proc_control_node_B.nDepIneq_o <= proc_control_node_B.nFixedConstr_d
           - 1) {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq_o] = 1;
      proc_control_node_B.nDepIneq_o++;
    }

    proc_control_node_B.nDepIneq_o = proc_control_node_B.nFixedConstr_d + 1;
    while (proc_control_node_B.nDepIneq_o <= workingset->nActiveConstr) {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq_o - 1] = 0;
      proc_control_node_B.nDepIneq_o++;
    }

    proc_control_node_B.nDepIneq_o = 0;
    while (proc_control_node_B.nDepIneq_o <= workingset->nActiveConstr - 1) {
      proc_control_node_B.idxPosQR_n = qrmanager->ldq *
        proc_control_node_B.nDepIneq_o;
      proc_control_node_B.idxPosATwset_g = workingset->ldA *
        proc_control_node_B.nDepIneq_o;
      proc_control_node_B.k_mi = 1;
      while (proc_control_node_B.k_mi - 1 <= proc_control_node_B.nVar_f - 1) {
        qrmanager->QR.data[(proc_control_node_B.idxPosQR_n +
                            proc_control_node_B.k_mi) - 1] =
          workingset->ATwset.data[(proc_control_node_B.idxPosATwset_g +
          proc_control_node_B.k_mi) - 1];
        proc_control_node_B.k_mi++;
      }

      proc_control_node_B.nDepIneq_o++;
    }

    proc_control_node_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    proc_control_node_B.nDepIneq_o = 0;
    proc_control_node_B.idxPosQR_n = workingset->nActiveConstr - 1;
    while (proc_control_node_B.idxPosQR_n + 1 > proc_control_node_B.nVar_f) {
      proc_control_node_B.nDepIneq_o++;
      memspace->workspace_int.data[proc_control_node_B.nDepIneq_o - 1] =
        qrmanager->jpvt.data[proc_control_node_B.idxPosQR_n];
      proc_control_node_B.idxPosQR_n--;
    }

    if (proc_control_node_B.idxPosQR_n + 1 <= workingset->nVar) {
      proc_control_node_B.nVar_f = qrmanager->ldq *
        proc_control_node_B.idxPosQR_n + proc_control_node_B.idxPosQR_n;
      while ((proc_control_node_B.idxPosQR_n + 1 >
              proc_control_node_B.nFixedConstr_d) && (fabs(qrmanager->
               QR.data[proc_control_node_B.nVar_f]) < proc_control_node_B.tol_o))
      {
        proc_control_node_B.nDepIneq_o++;
        memspace->workspace_int.data[proc_control_node_B.nDepIneq_o - 1] =
          qrmanager->jpvt.data[proc_control_node_B.idxPosQR_n];
        proc_control_node_B.idxPosQR_n--;
        proc_control_node_B.nVar_f = (proc_control_node_B.nVar_f -
          qrmanager->ldq) - 1;
      }
    }

    proc_control_node_countsort(memspace->workspace_int.data,
      proc_control_node_B.nDepIneq_o, memspace->workspace_sort.data,
      proc_control_node_B.nFixedConstr_d + 1, workingset->nActiveConstr);
    proc_control_node_B.nFixedConstr_d = proc_control_node_B.nDepIneq_o;
    while (proc_control_node_B.nFixedConstr_d > 0) {
      proc_control_node_removeConstr(workingset, memspace->
        workspace_int.data[proc_control_node_B.nFixedConstr_d - 1]);
      proc_control_node_B.nFixedConstr_d--;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgeqrf(real_T A_data[],
  const int32_T A_size[2], int32_T m, int32_T n, real_T tau_data[], int32_T
  *tau_size)
{
  if (A_size[0] < A_size[1]) {
    proc_control_node_B.minmana = A_size[0];
  } else {
    proc_control_node_B.minmana = A_size[1];
  }

  if (m < n) {
    proc_control_node_B.minmn = m;
  } else {
    proc_control_node_B.minmn = n;
  }

  *tau_size = proc_control_node_B.minmana;
  if (0 <= proc_control_node_B.minmana - 1) {
    memset(&tau_data[0], 0, proc_control_node_B.minmana * sizeof(real_T));
  }

  if (proc_control_node_B.minmn >= 1) {
    proc_control_node_qrf(A_data, A_size, m, n, proc_control_node_B.minmn,
                          tau_data);
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factorQR_h
  (s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj, const real_T A_data[], int32_T mrows,
   int32_T ncols, int32_T ldA)
{
  boolean_T guard1 = false;
  proc_control_node_B.iA0 = mrows * ncols;
  guard1 = false;
  if (proc_control_node_B.iA0 > 0) {
    proc_control_node_B.b_idx_h = 0;
    while (proc_control_node_B.b_idx_h <= ncols - 1) {
      proc_control_node_B.iA0 = ldA * proc_control_node_B.b_idx_h;
      proc_control_node_B.iQR0_j = obj->ldq * proc_control_node_B.b_idx_h;
      proc_control_node_B.obj = 1;
      while (proc_control_node_B.obj - 1 <= mrows - 1) {
        obj->QR.data[(proc_control_node_B.iQR0_j + proc_control_node_B.obj) - 1]
          = A_data[(proc_control_node_B.iA0 + proc_control_node_B.obj) - 1];
        proc_control_node_B.obj++;
      }

      proc_control_node_B.b_idx_h++;
    }

    guard1 = true;
  } else if (proc_control_node_B.iA0 == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    guard1 = true;
  }

  if (guard1) {
    obj->usedPivoting = false;
    obj->mrows = mrows;
    obj->ncols = ncols;
    proc_control_node_B.b_idx_h = 0;
    while (proc_control_node_B.b_idx_h <= ncols - 1) {
      obj->jpvt.data[proc_control_node_B.b_idx_h] = proc_control_node_B.b_idx_h
        + 1;
      proc_control_node_B.b_idx_h++;
    }

    if (mrows < ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_node_B.b_idx_h = obj->QR.size[0] * obj->QR.size[1];
    for (proc_control_node_B.iA0 = 0; proc_control_node_B.iA0 <
         proc_control_node_B.b_idx_h; proc_control_node_B.iA0++) {
    }

    proc_control_node_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols,
      obj->tau.data, &obj->tau.size);
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factorQR
  (s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj, int32_T mrows, int32_T ncols)
{
  obj->usedPivoting = false;
  obj->mrows = mrows;
  obj->ncols = ncols;
  proc_control_node_B.idx_e = 0;
  while (proc_control_node_B.idx_e <= ncols - 1) {
    obj->jpvt.data[proc_control_node_B.idx_e] = proc_control_node_B.idx_e + 1;
    proc_control_node_B.idx_e++;
  }

  if (mrows < ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_node_B.idx_e = obj->QR.size[0] * obj->QR.size[1];
  for (proc_control_node_B.i48 = 0; proc_control_node_B.i48 <
       proc_control_node_B.idx_e; proc_control_node_B.i48++) {
  }

  proc_control_node_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols,
    obj->tau.data, &obj->tau.size);
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtmcj(int32_T m,
  int32_T n, const real_T A_data[], int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  int32_T b;
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    proc_control_node_B.iy_p = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      proc_control_node_B.ix_py = 0;
      proc_control_node_B.c_i = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        proc_control_node_B.c_i += x_data[proc_control_node_B.ix_py] * A_data[ia
          - 1];
        proc_control_node_B.ix_py++;
      }

      y_data[proc_control_node_B.iy_p] += proc_control_node_B.c_i;
      proc_control_node_B.iy_p++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtmc(int32_T n, const
  real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  if (n != 0) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    proc_control_node_B.iy_a = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      ix = 0;
      proc_control_node_B.c_bu = 0.0;
      for (ia = iac; ia <= iac + 146; ia++) {
        proc_control_node_B.c_bu += x_data[ix] * A_data[ia - 1];
        ix++;
      }

      y_data[proc_control_node_B.iy_a] += proc_control_node_B.c_bu;
      proc_control_node_B.iy_a++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
real_T proc_control_nodeModelClass::proc_con_maxConstraintViolation
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, const real_T x_data[])
{
  real_T v;
  proc_control_node_B.mLB_e = obj->sizes[3];
  proc_control_node_B.mUB_k = obj->sizes[4];
  proc_control_node_B.mFixed_k = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    proc_control_node_B.mIneq_p = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_kn = 0;
      while (proc_control_node_B.b_k_kn <= proc_control_node_B.mIneq_p) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_kn] =
          obj->bineq.data[proc_control_node_B.b_k_kn];
        proc_control_node_B.b_k_kn++;
      }

      proc_control_node_xgemv_mtmc(obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_kn = 0;
      while (proc_control_node_B.b_k_kn <= proc_control_node_B.mIneq_p) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_kn] -=
          x_data[proc_control_node_B.b_k_kn + 147];
        proc_control_node_B.u1_k = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_kn];
        if ((!(v > proc_control_node_B.u1_k)) && (!rtIsNaN
             (proc_control_node_B.u1_k))) {
          v = proc_control_node_B.u1_k;
        }

        proc_control_node_B.b_k_kn++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_node_xgemv_mtmc(130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (proc_control_node_B.b_k_kn = 0; proc_control_node_B.b_k_kn < 130;
         proc_control_node_B.b_k_kn++) {
      obj->maxConstrWorkspace.data[proc_control_node_B.b_k_kn] =
        (obj->maxConstrWorkspace.data[proc_control_node_B.b_k_kn] - x_data
         [(proc_control_node_B.mIneq_p + proc_control_node_B.b_k_kn) + 148]) +
        x_data[(obj->sizes[2] + proc_control_node_B.b_k_kn) + 277];
      proc_control_node_B.u1_k = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.b_k_kn]);
      if ((!(v > proc_control_node_B.u1_k)) && (!rtIsNaN
           (proc_control_node_B.u1_k))) {
        v = proc_control_node_B.u1_k;
      }
    }
  } else {
    v = 0.0;
    proc_control_node_B.mIneq_p = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_kn = 0;
      while (proc_control_node_B.b_k_kn <= proc_control_node_B.mIneq_p) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_kn] =
          obj->bineq.data[proc_control_node_B.b_k_kn];
        proc_control_node_B.b_k_kn++;
      }

      proc_control_node_xgemv_mtmcj(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_kn = 0;
      while (proc_control_node_B.b_k_kn <= proc_control_node_B.mIneq_p) {
        proc_control_node_B.u1_k = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_kn];
        if ((!(v > proc_control_node_B.u1_k)) && (!rtIsNaN
             (proc_control_node_B.u1_k))) {
          v = proc_control_node_B.u1_k;
        }

        proc_control_node_B.b_k_kn++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_node_xgemv_mtmcj(obj->nVar, 130, obj->Aeq.data, obj->ldA,
      x_data, obj->maxConstrWorkspace.data);
    for (proc_control_node_B.mIneq_p = 0; proc_control_node_B.mIneq_p < 130;
         proc_control_node_B.mIneq_p++) {
      proc_control_node_B.u1_k = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.mIneq_p]);
      if ((!(v > proc_control_node_B.u1_k)) && (!rtIsNaN
           (proc_control_node_B.u1_k))) {
        v = proc_control_node_B.u1_k;
      }
    }
  }

  if (proc_control_node_B.mLB_e > 0) {
    proc_control_node_B.mIneq_p = 0;
    while (proc_control_node_B.mIneq_p <= proc_control_node_B.mLB_e - 1) {
      proc_control_node_B.u1_k = -x_data[obj->
        indexLB.data[proc_control_node_B.mIneq_p] - 1] - obj->lb.data
        [obj->indexLB.data[proc_control_node_B.mIneq_p] - 1];
      if ((!(v > proc_control_node_B.u1_k)) && (!rtIsNaN
           (proc_control_node_B.u1_k))) {
        v = proc_control_node_B.u1_k;
      }

      proc_control_node_B.mIneq_p++;
    }
  }

  if (proc_control_node_B.mUB_k > 0) {
    proc_control_node_B.mLB_e = 0;
    while (proc_control_node_B.mLB_e <= proc_control_node_B.mUB_k - 1) {
      proc_control_node_B.u1_k = x_data[obj->
        indexUB.data[proc_control_node_B.mLB_e] - 1] - obj->ub.data
        [obj->indexUB.data[proc_control_node_B.mLB_e] - 1];
      if ((!(v > proc_control_node_B.u1_k)) && (!rtIsNaN
           (proc_control_node_B.u1_k))) {
        v = proc_control_node_B.u1_k;
      }

      proc_control_node_B.mLB_e++;
    }
  }

  if (proc_control_node_B.mFixed_k > 0) {
    proc_control_node_B.mUB_k = 0;
    while (proc_control_node_B.mUB_k <= proc_control_node_B.mFixed_k - 1) {
      proc_control_node_B.u1_k = fabs(x_data[obj->
        indexFixed.data[proc_control_node_B.mUB_k] - 1] - obj->ub.data
        [obj->indexFixed.data[proc_control_node_B.mUB_k] - 1]);
      if ((!(v > proc_control_node_B.u1_k)) && (!rtIsNaN
           (proc_control_node_B.u1_k))) {
        v = proc_control_node_B.u1_k;
      }

      proc_control_node_B.mUB_k++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtmcjb(int32_T m,
  int32_T n, const real_T A_data[], int32_T lda, const real_T x_data[], int32_T
  ix0, real_T y_data[])
{
  int32_T b;
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    proc_control_node_B.iy_n = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      proc_control_node_B.ix_ic = ix0;
      proc_control_node_B.c_kr = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        proc_control_node_B.c_kr += x_data[proc_control_node_B.ix_ic - 1] *
          A_data[ia - 1];
        proc_control_node_B.ix_ic++;
      }

      y_data[proc_control_node_B.iy_n] += proc_control_node_B.c_kr;
      proc_control_node_B.iy_n++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
real_T proc_control_nodeModelClass::proc_c_maxConstraintViolation_d
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, const real_T x_data[], int32_T ix0)
{
  real_T v;
  proc_control_node_B.mLB_d = obj->sizes[3];
  proc_control_node_B.mUB_j = obj->sizes[4];
  proc_control_node_B.mFixed_f = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    proc_control_node_B.mIneq_k = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_n = 0;
      while (proc_control_node_B.b_k_n <= proc_control_node_B.mIneq_k) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_n] =
          obj->bineq.data[proc_control_node_B.b_k_n];
        proc_control_node_B.b_k_n++;
      }

      proc_control_node_xgemv_mtmcjb(147, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, ix0, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_n = 0;
      while (proc_control_node_B.b_k_n <= proc_control_node_B.mIneq_k) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_n] -= x_data[(ix0 +
          proc_control_node_B.b_k_n) + 146];
        proc_control_node_B.u1_e = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_n];
        if ((!(v > proc_control_node_B.u1_e)) && (!rtIsNaN
             (proc_control_node_B.u1_e))) {
          v = proc_control_node_B.u1_e;
        }

        proc_control_node_B.b_k_n++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_node_xgemv_mtmcjb(147, 130, obj->Aeq.data, obj->ldA, x_data,
      ix0, obj->maxConstrWorkspace.data);
    for (proc_control_node_B.b_k_n = 0; proc_control_node_B.b_k_n < 130;
         proc_control_node_B.b_k_n++) {
      obj->maxConstrWorkspace.data[proc_control_node_B.b_k_n] =
        (obj->maxConstrWorkspace.data[proc_control_node_B.b_k_n] - x_data[((ix0
           + proc_control_node_B.mIneq_k) + proc_control_node_B.b_k_n) + 147]) +
        x_data[((ix0 + obj->sizes[2]) + proc_control_node_B.b_k_n) + 276];
      proc_control_node_B.u1_e = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.b_k_n]);
      if ((!(v > proc_control_node_B.u1_e)) && (!rtIsNaN
           (proc_control_node_B.u1_e))) {
        v = proc_control_node_B.u1_e;
      }
    }
  } else {
    v = 0.0;
    proc_control_node_B.mIneq_k = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_n = 0;
      while (proc_control_node_B.b_k_n <= proc_control_node_B.mIneq_k) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_n] =
          obj->bineq.data[proc_control_node_B.b_k_n];
        proc_control_node_B.b_k_n++;
      }

      proc_control_node_xgemv_mtmcjb(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, ix0, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_n = 0;
      while (proc_control_node_B.b_k_n <= proc_control_node_B.mIneq_k) {
        proc_control_node_B.u1_e = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_n];
        if ((!(v > proc_control_node_B.u1_e)) && (!rtIsNaN
             (proc_control_node_B.u1_e))) {
          v = proc_control_node_B.u1_e;
        }

        proc_control_node_B.b_k_n++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_node_xgemv_mtmcjb(obj->nVar, 130, obj->Aeq.data, obj->ldA,
      x_data, ix0, obj->maxConstrWorkspace.data);
    for (proc_control_node_B.mIneq_k = 0; proc_control_node_B.mIneq_k < 130;
         proc_control_node_B.mIneq_k++) {
      proc_control_node_B.u1_e = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.mIneq_k]);
      if ((!(v > proc_control_node_B.u1_e)) && (!rtIsNaN
           (proc_control_node_B.u1_e))) {
        v = proc_control_node_B.u1_e;
      }
    }
  }

  if (proc_control_node_B.mLB_d > 0) {
    proc_control_node_B.mIneq_k = 0;
    while (proc_control_node_B.mIneq_k <= proc_control_node_B.mLB_d - 1) {
      proc_control_node_B.u1_e = -x_data[(ix0 + obj->
        indexLB.data[proc_control_node_B.mIneq_k]) - 2] - obj->lb.data
        [obj->indexLB.data[proc_control_node_B.mIneq_k] - 1];
      if ((!(v > proc_control_node_B.u1_e)) && (!rtIsNaN
           (proc_control_node_B.u1_e))) {
        v = proc_control_node_B.u1_e;
      }

      proc_control_node_B.mIneq_k++;
    }
  }

  if (proc_control_node_B.mUB_j > 0) {
    proc_control_node_B.mLB_d = 0;
    while (proc_control_node_B.mLB_d <= proc_control_node_B.mUB_j - 1) {
      proc_control_node_B.u1_e = x_data[(ix0 + obj->
        indexUB.data[proc_control_node_B.mLB_d]) - 2] - obj->ub.data
        [obj->indexUB.data[proc_control_node_B.mLB_d] - 1];
      if ((!(v > proc_control_node_B.u1_e)) && (!rtIsNaN
           (proc_control_node_B.u1_e))) {
        v = proc_control_node_B.u1_e;
      }

      proc_control_node_B.mLB_d++;
    }
  }

  if (proc_control_node_B.mFixed_f > 0) {
    proc_control_node_B.mUB_j = 0;
    while (proc_control_node_B.mUB_j <= proc_control_node_B.mFixed_f - 1) {
      proc_control_node_B.u1_e = fabs(x_data[(ix0 + obj->
        indexFixed.data[proc_control_node_B.mUB_j]) - 2] - obj->ub.data
        [obj->indexFixed.data[proc_control_node_B.mUB_j] - 1]);
      if ((!(v > proc_control_node_B.u1_e)) && (!rtIsNaN
           (proc_control_node_B.u1_e))) {
        v = proc_control_node_B.u1_e;
      }

      proc_control_node_B.mUB_j++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S228>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_co_feasibleX0ForWorkingSet(real_T
  workspace_data[], const int32_T workspace_size[2], real_T xCurrent_data[],
  s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T
  *qrmanager)
{
  int32_T exitg1;
  boolean_T nonDegenerateWset;
  proc_control_node_B.mWConstr_tmp_tmp = workingset->nActiveConstr - 1;
  proc_control_node_B.nVar_d = workingset->nVar;
  nonDegenerateWset = true;
  if (workingset->nActiveConstr != 0) {
    proc_control_node_B.iy_b = 0;
    while (proc_control_node_B.iy_b <= proc_control_node_B.mWConstr_tmp_tmp) {
      workspace_data[proc_control_node_B.iy_b] = workingset->
        bwset.data[proc_control_node_B.iy_b];
      workspace_data[proc_control_node_B.iy_b + workspace_size[0]] =
        workingset->bwset.data[proc_control_node_B.iy_b];
      proc_control_node_B.iy_b++;
    }

    proc_control_node_B.ldq = workingset->ldA;
    if (workingset->nActiveConstr != 0) {
      proc_control_node_B.iy_b = 0;
      proc_control_node_B.iAcol = (workingset->nActiveConstr - 1) *
        workingset->ldA + 1;
      proc_control_node_B.b_br = 1;
      while (((proc_control_node_B.ldq > 0) && (proc_control_node_B.b_br <=
               proc_control_node_B.iAcol)) || ((proc_control_node_B.ldq < 0) &&
              (proc_control_node_B.b_br >= proc_control_node_B.iAcol))) {
        proc_control_node_B.ix_n = 0;
        proc_control_node_B.c_my = 0.0;
        proc_control_node_B.jBcol = (proc_control_node_B.b_br +
          proc_control_node_B.nVar_d) - 1;
        proc_control_node_B.b_ar = proc_control_node_B.b_br;
        while (proc_control_node_B.b_ar <= proc_control_node_B.jBcol) {
          proc_control_node_B.c_my += workingset->
            ATwset.data[proc_control_node_B.b_ar - 1] *
            xCurrent_data[proc_control_node_B.ix_n];
          proc_control_node_B.ix_n++;
          proc_control_node_B.b_ar++;
        }

        workspace_data[proc_control_node_B.iy_b] += -proc_control_node_B.c_my;
        proc_control_node_B.iy_b++;
        proc_control_node_B.b_br += proc_control_node_B.ldq;
      }
    }

    if (workingset->nActiveConstr >= workingset->nVar) {
      proc_control_node_B.ldq = 0;
      while (proc_control_node_B.ldq <= proc_control_node_B.nVar_d - 1) {
        proc_control_node_B.ix_n = qrmanager->ldq * proc_control_node_B.ldq;
        proc_control_node_B.iAcol = 0;
        while (proc_control_node_B.iAcol <= proc_control_node_B.mWConstr_tmp_tmp)
        {
          qrmanager->QR.data[proc_control_node_B.iAcol +
            proc_control_node_B.ix_n] = workingset->ATwset.data[workingset->ldA *
            proc_control_node_B.iAcol + proc_control_node_B.ldq];
          proc_control_node_B.iAcol++;
        }

        proc_control_node_B.ldq++;
      }

      proc_control_node_factorQR(qrmanager, workingset->nActiveConstr,
        workingset->nVar);
      proc_control_node_computeQ_(qrmanager, qrmanager->mrows);
      proc_control_node_B.ldq = qrmanager->ldq;
      proc_control_node_B.iy_b = workspace_size[0];
      proc_control_node_B.b_ar = workspace_size[0] * workspace_size[1];
      if (0 <= proc_control_node_B.b_ar - 1) {
        memcpy(&proc_control_node_B.B_data[0], &workspace_data[0],
               proc_control_node_B.b_ar * sizeof(real_T));
      }

      proc_control_node_B.ix_n = 0;
      while ((proc_control_node_B.iy_b > 0) && (proc_control_node_B.ix_n <=
              proc_control_node_B.iy_b)) {
        proc_control_node_B.iAcol = proc_control_node_B.ix_n +
          proc_control_node_B.nVar_d;
        proc_control_node_B.b_br = proc_control_node_B.ix_n;
        while (proc_control_node_B.b_br + 1 <= proc_control_node_B.iAcol) {
          workspace_data[proc_control_node_B.b_br] = 0.0;
          proc_control_node_B.b_br++;
        }

        proc_control_node_B.ix_n += proc_control_node_B.iy_b;
      }

      proc_control_node_B.b_br = -1;
      proc_control_node_B.jBcol = 0;
      while ((proc_control_node_B.iy_b > 0) && (proc_control_node_B.jBcol <=
              proc_control_node_B.iy_b)) {
        proc_control_node_B.b_ar = -1;
        proc_control_node_B.iAcol = proc_control_node_B.jBcol +
          proc_control_node_B.nVar_d;
        proc_control_node_B.ix_n = proc_control_node_B.jBcol;
        while (proc_control_node_B.ix_n + 1 <= proc_control_node_B.iAcol) {
          proc_control_node_B.c_my = 0.0;
          proc_control_node_B.ib = 1;
          while (proc_control_node_B.ib - 1 <=
                 proc_control_node_B.mWConstr_tmp_tmp) {
            proc_control_node_B.c_my += qrmanager->Q.data[proc_control_node_B.ib
              + proc_control_node_B.b_ar] *
              proc_control_node_B.B_data[proc_control_node_B.ib +
              proc_control_node_B.b_br];
            proc_control_node_B.ib++;
          }

          workspace_data[proc_control_node_B.ix_n] += proc_control_node_B.c_my;
          proc_control_node_B.b_ar += proc_control_node_B.ldq;
          proc_control_node_B.ix_n++;
        }

        proc_control_node_B.b_br += proc_control_node_B.iy_b;
        proc_control_node_B.jBcol += proc_control_node_B.iy_b;
      }

      proc_control_node_B.b_ar = workingset->nVar;
      while (proc_control_node_B.b_ar > 0) {
        proc_control_node_B.iAcol = (proc_control_node_B.b_ar - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.c_my = workspace_data[proc_control_node_B.b_ar + -1];
        if (proc_control_node_B.c_my != 0.0) {
          workspace_data[proc_control_node_B.b_ar + -1] =
            proc_control_node_B.c_my / qrmanager->
            QR.data[proc_control_node_B.b_ar + proc_control_node_B.iAcol];
          proc_control_node_B.ix_n = 1;
          while (proc_control_node_B.ix_n - 1 <= proc_control_node_B.b_ar - 2) {
            workspace_data[proc_control_node_B.ix_n + -1] -=
              workspace_data[proc_control_node_B.b_ar + -1] * qrmanager->
              QR.data[proc_control_node_B.ix_n + proc_control_node_B.iAcol];
            proc_control_node_B.ix_n++;
          }
        }

        proc_control_node_B.b_ar--;
      }

      proc_control_node_B.b_ar = workingset->nVar;
      while (proc_control_node_B.b_ar > 0) {
        proc_control_node_B.iAcol = (proc_control_node_B.b_ar - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.jBcol = (proc_control_node_B.iy_b +
          proc_control_node_B.b_ar) - 1;
        if (workspace_data[proc_control_node_B.jBcol] != 0.0) {
          workspace_data[proc_control_node_B.jBcol] /= qrmanager->
            QR.data[proc_control_node_B.b_ar + proc_control_node_B.iAcol];
          proc_control_node_B.ix_n = 1;
          while (proc_control_node_B.ix_n - 1 <= proc_control_node_B.b_ar - 2) {
            proc_control_node_B.mWConstr_tmp_tmp = (proc_control_node_B.iy_b +
              proc_control_node_B.ix_n) - 1;
            workspace_data[proc_control_node_B.mWConstr_tmp_tmp] -=
              workspace_data[proc_control_node_B.jBcol] * qrmanager->
              QR.data[proc_control_node_B.ix_n + proc_control_node_B.iAcol];
            proc_control_node_B.ix_n++;
          }
        }

        proc_control_node_B.b_ar--;
      }
    } else {
      proc_control_node_factorQR_h(qrmanager, workingset->ATwset.data,
        workingset->nVar, workingset->nActiveConstr, workingset->ldA);
      proc_control_node_computeQ_(qrmanager, qrmanager->minRowCol);
      proc_control_node_B.ldq = qrmanager->ldq;
      proc_control_node_B.iy_b = workspace_size[0];
      proc_control_node_B.b_ar = 1;
      while (proc_control_node_B.b_ar - 1 <=
             proc_control_node_B.mWConstr_tmp_tmp) {
        proc_control_node_B.iAcol = (proc_control_node_B.b_ar - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.c_my = workspace_data[proc_control_node_B.b_ar + -1];
        proc_control_node_B.ix_n = 1;
        while (proc_control_node_B.ix_n - 1 <= proc_control_node_B.b_ar - 2) {
          proc_control_node_B.c_my -= qrmanager->
            QR.data[proc_control_node_B.ix_n + proc_control_node_B.iAcol] *
            workspace_data[proc_control_node_B.ix_n + -1];
          proc_control_node_B.ix_n++;
        }

        workspace_data[proc_control_node_B.b_ar + -1] = proc_control_node_B.c_my
          / qrmanager->QR.data[proc_control_node_B.b_ar +
          proc_control_node_B.iAcol];
        proc_control_node_B.b_ar++;
      }

      proc_control_node_B.b_ar = 1;
      while (proc_control_node_B.b_ar - 1 <=
             proc_control_node_B.mWConstr_tmp_tmp) {
        proc_control_node_B.iAcol = (proc_control_node_B.b_ar - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.jBcol = (proc_control_node_B.iy_b +
          proc_control_node_B.b_ar) - 1;
        proc_control_node_B.c_my = workspace_data[proc_control_node_B.jBcol];
        proc_control_node_B.ix_n = 1;
        while (proc_control_node_B.ix_n - 1 <= proc_control_node_B.b_ar - 2) {
          proc_control_node_B.c_my -= qrmanager->
            QR.data[proc_control_node_B.ix_n + proc_control_node_B.iAcol] *
            workspace_data[(proc_control_node_B.iy_b + proc_control_node_B.ix_n)
            - 1];
          proc_control_node_B.ix_n++;
        }

        workspace_data[proc_control_node_B.jBcol] = proc_control_node_B.c_my /
          qrmanager->QR.data[proc_control_node_B.b_ar +
          proc_control_node_B.iAcol];
        proc_control_node_B.b_ar++;
      }

      proc_control_node_B.b_ar = workspace_size[0] * workspace_size[1];
      if (0 <= proc_control_node_B.b_ar - 1) {
        memcpy(&proc_control_node_B.B_data[0], &workspace_data[0],
               proc_control_node_B.b_ar * sizeof(real_T));
      }

      proc_control_node_B.ix_n = 0;
      while ((proc_control_node_B.iy_b > 0) && (proc_control_node_B.ix_n <=
              proc_control_node_B.iy_b)) {
        proc_control_node_B.iAcol = proc_control_node_B.ix_n +
          proc_control_node_B.nVar_d;
        proc_control_node_B.b_br = proc_control_node_B.ix_n;
        while (proc_control_node_B.b_br + 1 <= proc_control_node_B.iAcol) {
          workspace_data[proc_control_node_B.b_br] = 0.0;
          proc_control_node_B.b_br++;
        }

        proc_control_node_B.ix_n += proc_control_node_B.iy_b;
      }

      proc_control_node_B.jBcol = 1;
      proc_control_node_B.b_ar = 0;
      while ((proc_control_node_B.iy_b > 0) && (proc_control_node_B.b_ar <=
              proc_control_node_B.iy_b)) {
        proc_control_node_B.iAcol = -1;
        proc_control_node_B.ix_n = proc_control_node_B.jBcol +
          proc_control_node_B.mWConstr_tmp_tmp;
        proc_control_node_B.ib = proc_control_node_B.jBcol;
        while (proc_control_node_B.ib <= proc_control_node_B.ix_n) {
          proc_control_node_B.b_br = proc_control_node_B.iAcol;
          proc_control_node_B.f_f0 = proc_control_node_B.b_ar +
            proc_control_node_B.nVar_d;
          proc_control_node_B.b_ic = proc_control_node_B.b_ar;
          while (proc_control_node_B.b_ic + 1 <= proc_control_node_B.f_f0) {
            proc_control_node_B.b_br++;
            workspace_data[proc_control_node_B.b_ic] +=
              proc_control_node_B.B_data[proc_control_node_B.ib - 1] *
              qrmanager->Q.data[proc_control_node_B.b_br];
            proc_control_node_B.b_ic++;
          }

          proc_control_node_B.iAcol += proc_control_node_B.ldq;
          proc_control_node_B.ib++;
        }

        proc_control_node_B.jBcol += proc_control_node_B.iy_b;
        proc_control_node_B.b_ar += proc_control_node_B.iy_b;
      }
    }

    proc_control_node_B.iy_b = 0;
    do {
      exitg1 = 0;
      if (proc_control_node_B.iy_b <= proc_control_node_B.nVar_d - 1) {
        proc_control_node_B.c_my = workspace_data[proc_control_node_B.iy_b];
        if (rtIsInf(proc_control_node_B.c_my) || rtIsNaN
            (proc_control_node_B.c_my)) {
          nonDegenerateWset = false;
          exitg1 = 1;
        } else {
          proc_control_node_B.c_my = workspace_data[proc_control_node_B.iy_b +
            workspace_size[0]];
          if (rtIsInf(proc_control_node_B.c_my) || rtIsNaN
              (proc_control_node_B.c_my)) {
            nonDegenerateWset = false;
            exitg1 = 1;
          } else {
            proc_control_node_B.iy_b++;
          }
        }
      } else {
        proc_control_node_B.iy_b = 0;
        while (proc_control_node_B.iy_b <= proc_control_node_B.nVar_d - 1) {
          workspace_data[proc_control_node_B.iy_b] +=
            xCurrent_data[proc_control_node_B.iy_b];
          proc_control_node_B.iy_b++;
        }

        proc_control_node_B.c_my = proc_con_maxConstraintViolation(workingset,
          workspace_data);
        proc_control_node_B.constrViolation_basicX =
          proc_c_maxConstraintViolation_d(workingset, workspace_data,
          workspace_size[0] + 1);
        if ((proc_control_node_B.c_my <= 2.2204460492503131E-16) ||
            (proc_control_node_B.c_my <
             proc_control_node_B.constrViolation_basicX)) {
          proc_control_node_B.iy_b = 0;
          while (proc_control_node_B.iy_b <= proc_control_node_B.nVar_d - 1) {
            xCurrent_data[proc_control_node_B.iy_b] =
              workspace_data[proc_control_node_B.iy_b];
            proc_control_node_B.iy_b++;
          }
        } else {
          proc_control_node_B.iy_b = 0;
          while (proc_control_node_B.iy_b <= proc_control_node_B.nVar_d - 1) {
            xCurrent_data[proc_control_node_B.iy_b] =
              workspace_data[workspace_size[0] + proc_control_node_B.iy_b];
            proc_control_node_B.iy_b++;
          }
        }

        exitg1 = 1;
      }
    } while (exitg1 == 0);
  }

  return nonDegenerateWset;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_con_RemoveDependentIneq__f
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *
   qrmanager, s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace)
{
  proc_control_node_B.nFixedConstr = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  proc_control_node_B.nVar_i = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    proc_control_node_B.tol_l = 1000.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    proc_control_node_B.nDepIneq = 0;
    while (proc_control_node_B.nDepIneq <= proc_control_node_B.nFixedConstr - 1)
    {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq] = 1;
      proc_control_node_B.nDepIneq++;
    }

    proc_control_node_B.nDepIneq = proc_control_node_B.nFixedConstr + 1;
    while (proc_control_node_B.nDepIneq <= workingset->nActiveConstr) {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq - 1] = 0;
      proc_control_node_B.nDepIneq++;
    }

    proc_control_node_B.nDepIneq = 0;
    while (proc_control_node_B.nDepIneq <= workingset->nActiveConstr - 1) {
      proc_control_node_B.idxPosQR = qrmanager->ldq *
        proc_control_node_B.nDepIneq;
      proc_control_node_B.idxPosATwset = workingset->ldA *
        proc_control_node_B.nDepIneq;
      proc_control_node_B.k_ef = 1;
      while (proc_control_node_B.k_ef - 1 <= proc_control_node_B.nVar_i - 1) {
        qrmanager->QR.data[(proc_control_node_B.idxPosQR +
                            proc_control_node_B.k_ef) - 1] =
          workingset->ATwset.data[(proc_control_node_B.idxPosATwset +
          proc_control_node_B.k_ef) - 1];
        proc_control_node_B.k_ef++;
      }

      proc_control_node_B.nDepIneq++;
    }

    proc_control_node_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    proc_control_node_B.nDepIneq = 0;
    proc_control_node_B.idxPosQR = workingset->nActiveConstr - 1;
    while (proc_control_node_B.idxPosQR + 1 > proc_control_node_B.nVar_i) {
      proc_control_node_B.nDepIneq++;
      memspace->workspace_int.data[proc_control_node_B.nDepIneq - 1] =
        qrmanager->jpvt.data[proc_control_node_B.idxPosQR];
      proc_control_node_B.idxPosQR--;
    }

    if (proc_control_node_B.idxPosQR + 1 <= workingset->nVar) {
      proc_control_node_B.nVar_i = qrmanager->ldq * proc_control_node_B.idxPosQR
        + proc_control_node_B.idxPosQR;
      while ((proc_control_node_B.idxPosQR + 1 >
              proc_control_node_B.nFixedConstr) && (fabs(qrmanager->
               QR.data[proc_control_node_B.nVar_i]) < proc_control_node_B.tol_l))
      {
        proc_control_node_B.nDepIneq++;
        memspace->workspace_int.data[proc_control_node_B.nDepIneq - 1] =
          qrmanager->jpvt.data[proc_control_node_B.idxPosQR];
        proc_control_node_B.idxPosQR--;
        proc_control_node_B.nVar_i = (proc_control_node_B.nVar_i -
          qrmanager->ldq) - 1;
      }
    }

    proc_control_node_countsort(memspace->workspace_int.data,
      proc_control_node_B.nDepIneq, memspace->workspace_sort.data,
      proc_control_node_B.nFixedConstr + 1, workingset->nActiveConstr);
    proc_control_node_B.nFixedConstr = proc_control_node_B.nDepIneq;
    while (proc_control_node_B.nFixedConstr > 0) {
      proc_control_node_removeConstr(workingset, memspace->
        workspace_int.data[proc_control_node_B.nFixedConstr - 1]);
      proc_control_node_B.nFixedConstr--;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_xgemv_mtmcjbia(int32_T m,
  int32_T n, const real_T A_data[], int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  int32_T b;
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    proc_control_node_B.iy_o4 = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      proc_control_node_B.ix_dz = 0;
      proc_control_node_B.c_ej = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        proc_control_node_B.c_ej += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_dz];
        proc_control_node_B.ix_dz++;
      }

      y_data[proc_control_node_B.iy_o4] += proc_control_node_B.c_ej;
      proc_control_node_B.iy_o4++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtmcjbi(int32_T n,
  const real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  if (n != 0) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    proc_control_node_B.iy_l = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      ix = 0;
      proc_control_node_B.c_k0 = 0.0;
      for (ia = iac; ia <= iac + 146; ia++) {
        proc_control_node_B.c_k0 += A_data[ia - 1] * x_data[ix];
        ix++;
      }

      y_data[proc_control_node_B.iy_l] += proc_control_node_B.c_k0;
      proc_control_node_B.iy_l++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
real_T proc_control_nodeModelClass::proc__maxConstraintViolation_du
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, const real_T x_data[])
{
  real_T v;
  proc_control_node_B.mLB_n = obj->sizes[3];
  proc_control_node_B.mUB_l = obj->sizes[4];
  proc_control_node_B.mFixed_e = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    proc_control_node_B.mIneq_c = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_hy = 0;
      while (proc_control_node_B.b_k_hy <= proc_control_node_B.mIneq_c) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_hy] =
          obj->bineq.data[proc_control_node_B.b_k_hy];
        proc_control_node_B.b_k_hy++;
      }

      proc_control_node_xgemv_mtmcjbi(obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_hy = 0;
      while (proc_control_node_B.b_k_hy <= proc_control_node_B.mIneq_c) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_hy] -=
          x_data[proc_control_node_B.b_k_hy + 147];
        proc_control_node_B.u1_j = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_hy];
        if ((!(v > proc_control_node_B.u1_j)) && (!rtIsNaN
             (proc_control_node_B.u1_j))) {
          v = proc_control_node_B.u1_j;
        }

        proc_control_node_B.b_k_hy++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_node_xgemv_mtmcjbi(130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (proc_control_node_B.b_k_hy = 0; proc_control_node_B.b_k_hy < 130;
         proc_control_node_B.b_k_hy++) {
      obj->maxConstrWorkspace.data[proc_control_node_B.b_k_hy] =
        (obj->maxConstrWorkspace.data[proc_control_node_B.b_k_hy] - x_data
         [(proc_control_node_B.mIneq_c + proc_control_node_B.b_k_hy) + 148]) +
        x_data[(obj->sizes[2] + proc_control_node_B.b_k_hy) + 277];
      proc_control_node_B.u1_j = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.b_k_hy]);
      if ((!(v > proc_control_node_B.u1_j)) && (!rtIsNaN
           (proc_control_node_B.u1_j))) {
        v = proc_control_node_B.u1_j;
      }
    }
  } else {
    v = 0.0;
    proc_control_node_B.mIneq_c = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_hy = 0;
      while (proc_control_node_B.b_k_hy <= proc_control_node_B.mIneq_c) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_hy] =
          obj->bineq.data[proc_control_node_B.b_k_hy];
        proc_control_node_B.b_k_hy++;
      }

      proc_control_nod_xgemv_mtmcjbia(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_hy = 0;
      while (proc_control_node_B.b_k_hy <= proc_control_node_B.mIneq_c) {
        proc_control_node_B.u1_j = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_hy];
        if ((!(v > proc_control_node_B.u1_j)) && (!rtIsNaN
             (proc_control_node_B.u1_j))) {
          v = proc_control_node_B.u1_j;
        }

        proc_control_node_B.b_k_hy++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_nod_xgemv_mtmcjbia(obj->nVar, 130, obj->Aeq.data, obj->ldA,
      x_data, obj->maxConstrWorkspace.data);
    for (proc_control_node_B.mIneq_c = 0; proc_control_node_B.mIneq_c < 130;
         proc_control_node_B.mIneq_c++) {
      proc_control_node_B.u1_j = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.mIneq_c]);
      if ((!(v > proc_control_node_B.u1_j)) && (!rtIsNaN
           (proc_control_node_B.u1_j))) {
        v = proc_control_node_B.u1_j;
      }
    }
  }

  if (proc_control_node_B.mLB_n > 0) {
    proc_control_node_B.mIneq_c = 0;
    while (proc_control_node_B.mIneq_c <= proc_control_node_B.mLB_n - 1) {
      proc_control_node_B.u1_j = -x_data[obj->
        indexLB.data[proc_control_node_B.mIneq_c] - 1] - obj->lb.data
        [obj->indexLB.data[proc_control_node_B.mIneq_c] - 1];
      if ((!(v > proc_control_node_B.u1_j)) && (!rtIsNaN
           (proc_control_node_B.u1_j))) {
        v = proc_control_node_B.u1_j;
      }

      proc_control_node_B.mIneq_c++;
    }
  }

  if (proc_control_node_B.mUB_l > 0) {
    proc_control_node_B.mLB_n = 0;
    while (proc_control_node_B.mLB_n <= proc_control_node_B.mUB_l - 1) {
      proc_control_node_B.u1_j = x_data[obj->
        indexUB.data[proc_control_node_B.mLB_n] - 1] - obj->ub.data
        [obj->indexUB.data[proc_control_node_B.mLB_n] - 1];
      if ((!(v > proc_control_node_B.u1_j)) && (!rtIsNaN
           (proc_control_node_B.u1_j))) {
        v = proc_control_node_B.u1_j;
      }

      proc_control_node_B.mLB_n++;
    }
  }

  if (proc_control_node_B.mFixed_e > 0) {
    proc_control_node_B.mUB_l = 0;
    while (proc_control_node_B.mUB_l <= proc_control_node_B.mFixed_e - 1) {
      proc_control_node_B.u1_j = fabs(x_data[obj->
        indexFixed.data[proc_control_node_B.mUB_l] - 1] - obj->ub.data
        [obj->indexFixed.data[proc_control_node_B.mUB_l] - 1]);
      if ((!(v > proc_control_node_B.u1_j)) && (!rtIsNaN
           (proc_control_node_B.u1_j))) {
        v = proc_control_node_B.u1_j;
      }

      proc_control_node_B.mUB_l++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_PresolveWorkingSet
  (s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution, s_OnOuVjEActeQRN4FyNqSwB_proc_T
   *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *workingset,
   s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager)
{
  boolean_T guard1 = false;
  boolean_T okWorkingSet;
  solution->state = 82;
  proc_control_node_B.b_on = proc_control_RemoveDependentEq_(memspace,
    workingset, qrmanager);
  if ((proc_control_node_B.b_on != -1) && (workingset->nActiveConstr <=
       qrmanager->ldq)) {
    proc_contr_RemoveDependentIneq_(workingset, qrmanager, memspace);
    proc_control_node_B.b_on = memspace->workspace_double.size[0] *
      memspace->workspace_double.size[1];
    for (proc_control_node_B.i45 = 0; proc_control_node_B.i45 <
         proc_control_node_B.b_on; proc_control_node_B.i45++) {
    }

    okWorkingSet = proc_co_feasibleX0ForWorkingSet
      (memspace->workspace_double.data, memspace->workspace_double.size,
       solution->xstar.data, workingset, qrmanager);
    guard1 = false;
    if (!okWorkingSet) {
      proc_con_RemoveDependentIneq__f(workingset, qrmanager, memspace);
      proc_control_node_B.b_on = memspace->workspace_double.size[0] *
        memspace->workspace_double.size[1];
      for (proc_control_node_B.i45 = 0; proc_control_node_B.i45 <
           proc_control_node_B.b_on; proc_control_node_B.i45++) {
      }

      okWorkingSet = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         solution->xstar.data, workingset, qrmanager);
      if (!okWorkingSet) {
        solution->state = -7;
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      if (workingset->nWConstr[0] + workingset->nWConstr[1] == workingset->nVar)
      {
        proc_control_node_B.constrViolation = proc__maxConstraintViolation_du
          (workingset, solution->xstar.data);
        if (proc_control_node_B.constrViolation > 0.02) {
          solution->state = -2;
        }
      }
    }
  } else {
    solution->state = -3;
    proc_contro_removeAllIneqConstr(workingset);
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_no_xgemv_mtmcjbiad(int32_T m,
  int32_T n, const real_T A[21609], int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
    proc_control_node_B.ix_oq = 0;
    while (proc_control_node_B.ix_oq <= m - 1) {
      y_data[proc_control_node_B.ix_oq] = 0.0;
      proc_control_node_B.ix_oq++;
    }

    proc_control_node_B.ix_oq = 0;
    c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= c)) || ((lda < 0) && (iac >= c))) {
      proc_control_node_B.iy_o1 = 0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        y_data[proc_control_node_B.iy_o1] += A[ia - 1] *
          x_data[proc_control_node_B.ix_oq];
        proc_control_node_B.iy_o1++;
      }

      proc_control_node_B.ix_oq++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_contro_computeGrad_StoreHx
  (s_oZGbvi5mjKKebHB9aR5DoG_proc_T *obj, const real_T H[21609], const real_T
   f_data[], const real_T x_data[])
{
  switch (obj->objtype) {
   case 5:
    proc_control_node_B.maxRegVar = 0;
    while (proc_control_node_B.maxRegVar <= obj->nvar - 2) {
      obj->grad.data[proc_control_node_B.maxRegVar] = 0.0;
      proc_control_node_B.maxRegVar++;
    }

    obj->grad.data[obj->nvar - 1] = obj->gammaScalar;
    break;

   case 3:
    proc_control_no_xgemv_mtmcjbiad(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    proc_control_node_B.maxRegVar = 0;
    while (proc_control_node_B.maxRegVar <= obj->nvar - 1) {
      obj->grad.data[proc_control_node_B.maxRegVar] = obj->
        Hx.data[proc_control_node_B.maxRegVar];
      proc_control_node_B.maxRegVar++;
    }

    if (obj->hasLinear && (obj->nvar >= 1)) {
      proc_control_node_B.maxRegVar = obj->nvar - 1;
      proc_control_node_B.iy_e = 0;
      while (proc_control_node_B.iy_e <= proc_control_node_B.maxRegVar) {
        obj->grad.data[proc_control_node_B.iy_e] +=
          f_data[proc_control_node_B.iy_e];
        proc_control_node_B.iy_e++;
      }
    }
    break;

   default:
    proc_control_node_B.maxRegVar = obj->maxVar - 1;
    proc_control_no_xgemv_mtmcjbiad(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    proc_control_node_B.iy_e = obj->nvar;
    while (proc_control_node_B.iy_e + 1 <= proc_control_node_B.maxRegVar) {
      obj->Hx.data[proc_control_node_B.iy_e] = obj->beta *
        x_data[proc_control_node_B.iy_e];
      proc_control_node_B.iy_e++;
    }

    proc_control_node_B.d_i = 0;
    while (proc_control_node_B.d_i <= proc_control_node_B.maxRegVar - 1) {
      obj->grad.data[proc_control_node_B.d_i] = obj->
        Hx.data[proc_control_node_B.d_i];
      proc_control_node_B.d_i++;
    }

    if (obj->hasLinear && (obj->nvar >= 1)) {
      proc_control_node_B.maxRegVar = obj->nvar - 1;
      proc_control_node_B.iy_e = 0;
      while (proc_control_node_B.iy_e <= proc_control_node_B.maxRegVar) {
        obj->grad.data[proc_control_node_B.iy_e] +=
          f_data[proc_control_node_B.iy_e];
        proc_control_node_B.iy_e++;
      }
    }

    proc_control_node_B.maxRegVar = (obj->maxVar - obj->nvar) - 1;
    if (proc_control_node_B.maxRegVar >= 1) {
      proc_control_node_B.iy_e = obj->nvar;
      proc_control_node_B.d_i = 0;
      while (proc_control_node_B.d_i <= proc_control_node_B.maxRegVar - 1) {
        obj->grad.data[proc_control_node_B.iy_e] += obj->rho;
        proc_control_node_B.iy_e++;
        proc_control_node_B.d_i++;
      }
    }
    break;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
real_T proc_control_nodeModelClass::proc_contro_computeFval_ReuseHx(const
  s_oZGbvi5mjKKebHB9aR5DoG_proc_T *obj, real_T workspace_data[], const real_T
  f_data[], const real_T x_data[])
{
  real_T val;
  int32_T c_k;
  int32_T d_k;
  int32_T maxRegVar;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    if (obj->hasLinear) {
      for (maxRegVar = 0; maxRegVar < obj->nvar; maxRegVar++) {
        workspace_data[maxRegVar] = 0.5 * obj->Hx.data[maxRegVar] +
          f_data[maxRegVar];
      }

      val = 0.0;
      if (obj->nvar >= 1) {
        for (maxRegVar = 0; maxRegVar < obj->nvar; maxRegVar++) {
          val += workspace_data[maxRegVar] * x_data[maxRegVar];
        }
      }
    } else {
      val = 0.0;
      if (obj->nvar >= 1) {
        for (maxRegVar = 0; maxRegVar < obj->nvar; maxRegVar++) {
          val += x_data[maxRegVar] * obj->Hx.data[maxRegVar];
        }
      }

      val *= 0.5;
    }
    break;

   default:
    maxRegVar = obj->maxVar - 1;
    if (obj->hasLinear) {
      for (d_k = 0; d_k < obj->nvar; d_k++) {
        workspace_data[d_k] = f_data[d_k];
      }

      d_k = obj->maxVar - obj->nvar;
      for (c_k = 0; c_k <= d_k - 2; c_k++) {
        workspace_data[obj->nvar + c_k] = obj->rho;
      }

      for (d_k = 0; d_k < maxRegVar; d_k++) {
        workspace_data[d_k] += 0.5 * obj->Hx.data[d_k];
      }

      val = 0.0;
      if (obj->maxVar - 1 >= 1) {
        for (maxRegVar = 0; maxRegVar <= obj->maxVar - 2; maxRegVar++) {
          val += workspace_data[maxRegVar] * x_data[maxRegVar];
        }
      }
    } else {
      val = 0.0;
      if (obj->maxVar - 1 >= 1) {
        for (d_k = 0; d_k <= obj->maxVar - 2; d_k++) {
          val += x_data[d_k] * obj->Hx.data[d_k];
        }
      }

      val *= 0.5;
      for (d_k = obj->nvar; d_k < maxRegVar; d_k++) {
        val += x_data[d_k] * obj->rho;
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xrotg(real_T *a, real_T *b,
  real_T *c, real_T *s)
{
  proc_control_node_B.roe = *b;
  proc_control_node_B.absa = fabs(*a);
  proc_control_node_B.absb = fabs(*b);
  if (proc_control_node_B.absa > proc_control_node_B.absb) {
    proc_control_node_B.roe = *a;
  }

  proc_control_node_B.scale_g = proc_control_node_B.absa +
    proc_control_node_B.absb;
  if (proc_control_node_B.scale_g == 0.0) {
    *s = 0.0;
    *c = 1.0;
    *b = 0.0;
  } else {
    proc_control_node_B.ads = proc_control_node_B.absa /
      proc_control_node_B.scale_g;
    proc_control_node_B.bds = proc_control_node_B.absb /
      proc_control_node_B.scale_g;
    proc_control_node_B.scale_g *= sqrt(proc_control_node_B.ads *
      proc_control_node_B.ads + proc_control_node_B.bds *
      proc_control_node_B.bds);
    if (proc_control_node_B.roe < 0.0) {
      proc_control_node_B.scale_g = -proc_control_node_B.scale_g;
    }

    *c = *a / proc_control_node_B.scale_g;
    *s = *b / proc_control_node_B.scale_g;
    if (proc_control_node_B.absa > proc_control_node_B.absb) {
      *b = *s;
    } else if (*c != 0.0) {
      *b = 1.0 / *c;
    } else {
      *b = 1.0;
    }
  }

  *a = proc_control_node_B.scale_g;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_deleteColMoveEnd
  (s_2F24x1ekvOt8ZUO1knVMv_proc__T *obj, int32_T idx)
{
  int32_T QRk0;
  int32_T b_ix;
  int32_T d_k;
  int32_T ix;
  if (obj->usedPivoting) {
    proc_control_node_B.i_kzq = 1;
    while ((proc_control_node_B.i_kzq <= obj->ncols) && (obj->
            jpvt.data[proc_control_node_B.i_kzq - 1] != idx)) {
      proc_control_node_B.i_kzq++;
    }

    idx = proc_control_node_B.i_kzq;
  }

  if (idx >= obj->ncols) {
    obj->ncols--;
  } else {
    obj->jpvt.data[idx - 1] = obj->jpvt.data[obj->ncols - 1];
    proc_control_node_B.i_kzq = 0;
    while (proc_control_node_B.i_kzq <= obj->minRowCol - 1) {
      obj->QR.data[proc_control_node_B.i_kzq + obj->ldq * (idx - 1)] =
        obj->QR.data[(obj->ncols - 1) * obj->ldq + proc_control_node_B.i_kzq];
      proc_control_node_B.i_kzq++;
    }

    obj->ncols--;
    if (obj->mrows < obj->ncols) {
      obj->minRowCol = obj->mrows;
    } else {
      obj->minRowCol = obj->ncols;
    }

    if (idx < obj->mrows) {
      if (obj->mrows - 1 < obj->ncols) {
        proc_control_node_B.i_kzq = obj->mrows - 1;
      } else {
        proc_control_node_B.i_kzq = obj->ncols;
      }

      proc_control_node_B.k_p = proc_control_node_B.i_kzq;
      proc_control_node_B.idxRotGCol = (idx - 1) * obj->ldq;
      while (proc_control_node_B.k_p >= idx) {
        QRk0 = proc_control_node_B.k_p + proc_control_node_B.idxRotGCol;
        proc_control_node_B.b_temp = obj->QR.data[QRk0 - 1];
        proc_control_node_B.e_m = obj->QR.data[QRk0];
        proc_control_node_xrotg(&proc_control_node_B.b_temp,
          &proc_control_node_B.e_m, &proc_control_node_B.c_c_i,
          &proc_control_node_B.b_s_i);
        obj->QR.data[QRk0 - 1] = proc_control_node_B.b_temp;
        obj->QR.data[QRk0] = proc_control_node_B.e_m;
        obj->QR.data[proc_control_node_B.k_p + obj->ldq *
          (proc_control_node_B.k_p - 1)] = 0.0;
        QRk0 = obj->ldq * idx + proc_control_node_B.k_p;
        b_ix = obj->ncols - idx;
        if (b_ix >= 1) {
          ix = QRk0 - 1;
          for (d_k = 0; d_k < b_ix; d_k++) {
            proc_control_node_B.b_temp = obj->QR.data[ix] *
              proc_control_node_B.c_c_i + obj->QR.data[QRk0] *
              proc_control_node_B.b_s_i;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * proc_control_node_B.c_c_i
              - obj->QR.data[ix] * proc_control_node_B.b_s_i;
            obj->QR.data[ix] = proc_control_node_B.b_temp;
            QRk0 += obj->ldq;
            ix += obj->ldq;
          }
        }

        QRk0 = (proc_control_node_B.k_p - 1) * obj->ldq;
        if (obj->mrows >= 1) {
          b_ix = obj->ldq + QRk0;
          for (ix = 0; ix < obj->mrows; ix++) {
            proc_control_node_B.b_temp = obj->Q.data[QRk0] *
              proc_control_node_B.c_c_i + obj->Q.data[b_ix] *
              proc_control_node_B.b_s_i;
            obj->Q.data[b_ix] = obj->Q.data[b_ix] * proc_control_node_B.c_c_i -
              obj->Q.data[QRk0] * proc_control_node_B.b_s_i;
            obj->Q.data[QRk0] = proc_control_node_B.b_temp;
            b_ix++;
            QRk0++;
          }
        }

        proc_control_node_B.k_p--;
      }

      proc_control_node_B.k_p = idx + 1;
      while (proc_control_node_B.k_p <= proc_control_node_B.i_kzq) {
        QRk0 = proc_control_node_B.k_p + (proc_control_node_B.k_p - 1) *
          obj->ldq;
        proc_control_node_B.b_temp = obj->QR.data[QRk0 - 1];
        proc_control_node_B.e_m = obj->QR.data[QRk0];
        proc_control_node_xrotg(&proc_control_node_B.b_temp,
          &proc_control_node_B.e_m, &proc_control_node_B.c_c_i,
          &proc_control_node_B.b_s_i);
        obj->QR.data[QRk0 - 1] = proc_control_node_B.b_temp;
        obj->QR.data[QRk0] = proc_control_node_B.e_m;
        QRk0 = (obj->ldq + 1) * proc_control_node_B.k_p;
        proc_control_node_B.idxRotGCol = obj->ncols - proc_control_node_B.k_p;
        if (proc_control_node_B.idxRotGCol >= 1) {
          b_ix = QRk0 - 1;
          for (ix = 0; ix < proc_control_node_B.idxRotGCol; ix++) {
            proc_control_node_B.b_temp = obj->QR.data[b_ix] *
              proc_control_node_B.c_c_i + obj->QR.data[QRk0] *
              proc_control_node_B.b_s_i;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * proc_control_node_B.c_c_i
              - obj->QR.data[b_ix] * proc_control_node_B.b_s_i;
            obj->QR.data[b_ix] = proc_control_node_B.b_temp;
            QRk0 += obj->ldq;
            b_ix += obj->ldq;
          }
        }

        proc_control_node_B.idxRotGCol = (proc_control_node_B.k_p - 1) *
          obj->ldq;
        if (obj->mrows >= 1) {
          QRk0 = obj->ldq + proc_control_node_B.idxRotGCol;
          for (b_ix = 0; b_ix < obj->mrows; b_ix++) {
            proc_control_node_B.b_temp = obj->
              Q.data[proc_control_node_B.idxRotGCol] * proc_control_node_B.c_c_i
              + obj->Q.data[QRk0] * proc_control_node_B.b_s_i;
            obj->Q.data[QRk0] = obj->Q.data[QRk0] * proc_control_node_B.c_c_i -
              obj->Q.data[proc_control_node_B.idxRotGCol] *
              proc_control_node_B.b_s_i;
            obj->Q.data[proc_control_node_B.idxRotGCol] =
              proc_control_node_B.b_temp;
            QRk0++;
            proc_control_node_B.idxRotGCol++;
          }
        }

        proc_control_node_B.k_p++;
      }
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_strcmp(const char_T a[7])
{
  int32_T ret;
  static const char_T b[7] = { 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  ret = memcmp(&a[0], &b[0], 7);
  return ret == 0;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemm(int32_T m, int32_T n,
  int32_T k, const real_T A[21609], int32_T lda, const real_T B_data[], int32_T
  ib0, int32_T ldb, real_T C_data[], int32_T ldc)
{
  int32_T b_c;
  int32_T b_ic;
  int32_T d;
  int32_T ib;
  if ((m != 0) && (n != 0)) {
    b_c = (n - 1) * ldc;
    proc_control_node_B.br_f = 0;
    while (((ldc > 0) && (proc_control_node_B.br_f <= b_c)) || ((ldc < 0) &&
            (proc_control_node_B.br_f >= b_c))) {
      proc_control_node_B.b_cr_c = proc_control_node_B.br_f + m;
      proc_control_node_B.ar_m = proc_control_node_B.br_f;
      while (proc_control_node_B.ar_m + 1 <= proc_control_node_B.b_cr_c) {
        C_data[proc_control_node_B.ar_m] = 0.0;
        proc_control_node_B.ar_m++;
      }

      proc_control_node_B.br_f += ldc;
    }

    proc_control_node_B.br_f = ib0;
    proc_control_node_B.b_cr_c = 0;
    while (((ldc > 0) && (proc_control_node_B.b_cr_c <= b_c)) || ((ldc < 0) &&
            (proc_control_node_B.b_cr_c >= b_c))) {
      proc_control_node_B.ar_m = -1;
      proc_control_node_B.c_kb = proc_control_node_B.br_f + k;
      for (ib = proc_control_node_B.br_f; ib < proc_control_node_B.c_kb; ib++) {
        proc_control_node_B.ia_gf = proc_control_node_B.ar_m;
        d = proc_control_node_B.b_cr_c + m;
        for (b_ic = proc_control_node_B.b_cr_c; b_ic < d; b_ic++) {
          proc_control_node_B.ia_gf++;
          C_data[b_ic] += B_data[ib - 1] * A[proc_control_node_B.ia_gf];
        }

        proc_control_node_B.ar_m += lda;
      }

      proc_control_node_B.br_f += ldb;
      proc_control_node_B.b_cr_c += ldc;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemm_m(int32_T m, int32_T n,
  int32_T k, const real_T A_data[], int32_T ia0, int32_T lda, const real_T
  B_data[], int32_T ldb, real_T C_data[], int32_T ldc)
{
  int32_T b_c;
  int32_T b_ic;
  int32_T c;
  int32_T w;
  if ((m != 0) && (n != 0)) {
    b_c = (n - 1) * ldc;
    proc_control_node_B.br = 0;
    while (((ldc > 0) && (proc_control_node_B.br <= b_c)) || ((ldc < 0) &&
            (proc_control_node_B.br >= b_c))) {
      proc_control_node_B.b_cr = proc_control_node_B.br + m;
      proc_control_node_B.ar = proc_control_node_B.br;
      while (proc_control_node_B.ar + 1 <= proc_control_node_B.b_cr) {
        C_data[proc_control_node_B.ar] = 0.0;
        proc_control_node_B.ar++;
      }

      proc_control_node_B.br += ldc;
    }

    proc_control_node_B.br = -1;
    proc_control_node_B.b_cr = 0;
    while (((ldc > 0) && (proc_control_node_B.b_cr <= b_c)) || ((ldc < 0) &&
            (proc_control_node_B.b_cr >= b_c))) {
      proc_control_node_B.ar = ia0;
      c = proc_control_node_B.b_cr + m;
      for (b_ic = proc_control_node_B.b_cr; b_ic < c; b_ic++) {
        proc_control_node_B.temp_ms = 0.0;
        for (w = 1; w - 1 < k; w++) {
          proc_control_node_B.temp_ms += A_data[(w + proc_control_node_B.ar) - 2]
            * B_data[w + proc_control_node_B.br];
        }

        C_data[b_ic] += proc_control_node_B.temp_ms;
        proc_control_node_B.ar += lda;
      }

      proc_control_node_B.br += ldb;
      proc_control_node_B.b_cr += ldc;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
int32_T proc_control_nodeModelClass::proc_control_node_ixamax_k(int32_T n, const
  real_T x_data[], int32_T incx)
{
  real_T y;
  int32_T idxmax;
  int32_T ix;
  int32_T k;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      ix = 0;
      proc_control_node_B.smax_o = fabs(x_data[0]);
      for (k = 2; k <= n; k++) {
        ix += incx;
        y = fabs(x_data[ix]);
        if (y > proc_control_node_B.smax_o) {
          idxmax = k;
          proc_control_node_B.smax_o = y;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_fullColLDL2_
  (s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj, int32_T LD_offset, int32_T NColsRemain)
{
  int32_T b;
  int32_T ijA;
  int32_T j;
  int32_T jA;
  proc_control_node_B.LDimSizeP1_d = obj->ldm;
  proc_control_node_B.k_ad = 0;
  while (proc_control_node_B.k_ad <= NColsRemain - 1) {
    proc_control_node_B.LD_diagOffset_c = ((proc_control_node_B.LDimSizeP1_d + 1)
      * proc_control_node_B.k_ad + LD_offset) - 1;
    proc_control_node_B.neg_D = -1.0 / obj->
      FMat.data[proc_control_node_B.LD_diagOffset_c];
    proc_control_node_B.subMatrixDim = (NColsRemain - proc_control_node_B.k_ad)
      - 2;
    for (jA = 1; jA - 1 <= proc_control_node_B.subMatrixDim; jA++) {
      obj->workspace_ = obj->FMat.data[proc_control_node_B.LD_diagOffset_c + jA];
    }

    proc_control_node_B.y_eh = obj->workspace_;
    if (!(proc_control_node_B.neg_D == 0.0)) {
      jA = (proc_control_node_B.LD_diagOffset_c +
            proc_control_node_B.LDimSizeP1_d) + 1;
      for (j = 0; j <= proc_control_node_B.subMatrixDim; j++) {
        if (proc_control_node_B.y_eh != 0.0) {
          proc_control_node_B.temp_l = proc_control_node_B.y_eh *
            proc_control_node_B.neg_D;
          b = proc_control_node_B.subMatrixDim + jA;
          for (ijA = jA; ijA < b + 1; ijA++) {
            obj->FMat.data[ijA] += obj->workspace_ * proc_control_node_B.temp_l;
          }
        }

        jA += obj->ldm;
      }
    }

    for (jA = 1; jA - 1 <= proc_control_node_B.subMatrixDim; jA++) {
      j = proc_control_node_B.LD_diagOffset_c + jA;
      obj->FMat.data[j] /= obj->FMat.data[proc_control_node_B.LD_diagOffset_c];
    }

    proc_control_node_B.k_ad++;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_no_partialColLDL3_
  (s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj, int32_T LD_offset, int32_T NColsRemain)
{
  int32_T b_ia;
  int32_T br;
  int32_T ic;
  int32_T ix_tmp;
  proc_control_node_B.LDimSizeP1_a = obj->ldm + 1;
  for (proc_control_node_B.k_k = 0; proc_control_node_B.k_k < 48;
       proc_control_node_B.k_k++) {
    proc_control_node_B.subRows = (NColsRemain - proc_control_node_B.k_k) - 1;
    proc_control_node_B.LD_diagOffset_b = (proc_control_node_B.LDimSizeP1_a *
      proc_control_node_B.k_k + LD_offset) - 1;
    proc_control_node_B.subBlockSize = 0;
    while (proc_control_node_B.subBlockSize <= proc_control_node_B.subRows) {
      obj->workspace_ = obj->FMat.data[proc_control_node_B.LD_diagOffset_b +
        proc_control_node_B.subBlockSize];
      proc_control_node_B.subBlockSize++;
    }

    proc_control_node_B.subBlockSize = 0;
    while (proc_control_node_B.subBlockSize <= NColsRemain - 1) {
      obj->workspace2_ = obj->workspace_;
      proc_control_node_B.subBlockSize++;
    }

    proc_control_node_B.subBlockSize = obj->ldm;
    proc_control_node_B.y_l = obj->workspace2_;
    if ((NColsRemain != 0) && (proc_control_node_B.k_k != 0)) {
      proc_control_node_B.ix_a = LD_offset + proc_control_node_B.k_k;
      proc_control_node_B.FMat_offset = (proc_control_node_B.k_k - 1) * obj->ldm
        + 1;
      br = 1;
      while (((proc_control_node_B.subBlockSize > 0) && (br <=
               proc_control_node_B.FMat_offset)) ||
             ((proc_control_node_B.subBlockSize < 0) && (br >=
               proc_control_node_B.FMat_offset))) {
        proc_control_node_B.c_km = (br + NColsRemain) - 1;
        proc_control_node_B.ia_p = br;
        while (proc_control_node_B.ia_p <= proc_control_node_B.c_km) {
          proc_control_node_B.y_l += -obj->FMat.data[proc_control_node_B.ix_a -
            1] * obj->workspace_;
          proc_control_node_B.ia_p++;
        }

        proc_control_node_B.ix_a += obj->ldm;
        br += proc_control_node_B.subBlockSize;
      }
    }

    obj->workspace2_ = proc_control_node_B.y_l;
    proc_control_node_B.subBlockSize = 0;
    while (proc_control_node_B.subBlockSize <= NColsRemain - 1) {
      obj->workspace_ = proc_control_node_B.y_l;
      proc_control_node_B.subBlockSize++;
    }

    proc_control_node_B.subBlockSize = 0;
    while (proc_control_node_B.subBlockSize <= proc_control_node_B.subRows) {
      obj->FMat.data[proc_control_node_B.LD_diagOffset_b +
        proc_control_node_B.subBlockSize] = obj->workspace_;
      proc_control_node_B.subBlockSize++;
    }

    proc_control_node_B.subBlockSize = 1;
    while (proc_control_node_B.subBlockSize - 1 <= proc_control_node_B.subRows -
           1) {
      br = proc_control_node_B.LD_diagOffset_b +
        proc_control_node_B.subBlockSize;
      obj->FMat.data[br] /= obj->FMat.data[proc_control_node_B.LD_diagOffset_b];
      proc_control_node_B.subBlockSize++;
    }
  }

  proc_control_node_B.k_k = 48;
  while (proc_control_node_B.k_k <= NColsRemain - 1) {
    proc_control_node_B.ix_a = NColsRemain - proc_control_node_B.k_k;
    if (48 < proc_control_node_B.ix_a) {
      proc_control_node_B.subBlockSize = 48;
    } else {
      proc_control_node_B.subBlockSize = proc_control_node_B.ix_a;
    }

    ix_tmp = proc_control_node_B.k_k + proc_control_node_B.subBlockSize;
    proc_control_node_B.FMat_offset = proc_control_node_B.k_k;
    while (proc_control_node_B.FMat_offset <= ix_tmp - 1) {
      proc_control_node_B.subRows = ix_tmp - proc_control_node_B.FMat_offset;
      proc_control_node_B.LD_diagOffset_b = (proc_control_node_B.LDimSizeP1_a *
        proc_control_node_B.FMat_offset + LD_offset) - 1;
      for (br = 0; br < 48; br++) {
        obj->workspace2_ = obj->FMat.data[((LD_offset +
          proc_control_node_B.FMat_offset) + br * obj->ldm) - 1];
      }

      br = obj->ldm;
      if (proc_control_node_B.subRows != 0) {
        proc_control_node_B.c_km = (obj->ldm * 47 +
          proc_control_node_B.FMat_offset) + 1;
        proc_control_node_B.ia_p = proc_control_node_B.FMat_offset + 1;
        while (((br > 0) && (proc_control_node_B.ia_p <=
                             proc_control_node_B.c_km)) || ((br < 0) &&
                (proc_control_node_B.ia_p >= proc_control_node_B.c_km))) {
          proc_control_node_B.iy_o3 = proc_control_node_B.LD_diagOffset_b;
          ic = (proc_control_node_B.ia_p + proc_control_node_B.subRows) - 1;
          for (b_ia = proc_control_node_B.ia_p; b_ia <= ic; b_ia++) {
            obj->FMat.data[proc_control_node_B.iy_o3] += obj->workspace_ *
              -obj->workspace2_;
            proc_control_node_B.iy_o3++;
          }

          proc_control_node_B.ia_p += br;
        }
      }

      proc_control_node_B.FMat_offset++;
    }

    if (ix_tmp < NColsRemain) {
      proc_control_node_B.subRows = proc_control_node_B.ix_a -
        proc_control_node_B.subBlockSize;
      proc_control_node_B.LD_diagOffset_b = ((LD_offset +
        proc_control_node_B.subBlockSize) + proc_control_node_B.LDimSizeP1_a *
        proc_control_node_B.k_k) - 1;
      for (proc_control_node_B.ix_a = 0; proc_control_node_B.ix_a < 48;
           proc_control_node_B.ix_a++) {
        proc_control_node_B.FMat_offset = (LD_offset + proc_control_node_B.k_k)
          + proc_control_node_B.ix_a * obj->ldm;
        for (br = 0; br < proc_control_node_B.subBlockSize; br++) {
          obj->workspace2_ = obj->FMat.data[(proc_control_node_B.FMat_offset +
            br) - 1];
        }
      }

      proc_control_node_B.ix_a = obj->ldm;
      proc_control_node_B.FMat_offset = obj->ldm;
      if ((proc_control_node_B.subRows != 0) &&
          (proc_control_node_B.subBlockSize != 0)) {
        proc_control_node_B.subBlockSize = (proc_control_node_B.subBlockSize - 1)
          * obj->ldm + proc_control_node_B.LD_diagOffset_b;
        br = 0;
        while (((proc_control_node_B.FMat_offset > 0) &&
                (proc_control_node_B.LD_diagOffset_b <=
                 proc_control_node_B.subBlockSize)) ||
               ((proc_control_node_B.FMat_offset < 0) &&
                (proc_control_node_B.LD_diagOffset_b >=
                 proc_control_node_B.subBlockSize))) {
          br++;
          proc_control_node_B.c_km = proc_control_node_B.ix_a * 47 + br;
          proc_control_node_B.ia_p = br;
          while (((proc_control_node_B.ix_a > 0) && (proc_control_node_B.ia_p <=
                   proc_control_node_B.c_km)) || ((proc_control_node_B.ix_a < 0)
                  && (proc_control_node_B.ia_p >= proc_control_node_B.c_km))) {
            proc_control_node_B.iy_o3 = proc_control_node_B.LD_diagOffset_b +
              proc_control_node_B.subRows;
            for (ic = proc_control_node_B.LD_diagOffset_b; ic <
                 proc_control_node_B.iy_o3; ic++) {
              obj->FMat.data[ic] += -obj->workspace2_ * obj->workspace_;
            }

            proc_control_node_B.ia_p += proc_control_node_B.ix_a;
          }

          proc_control_node_B.LD_diagOffset_b += proc_control_node_B.FMat_offset;
        }
      }
    }

    proc_control_node_B.k_k += 48;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
int32_T proc_control_nodeModelClass::proc_control_node_xpotrf(int32_T n, real_T
  A_data[], int32_T lda)
{
  int32_T b_ix;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T info;
  boolean_T exitg1;
  info = 0;
  proc_control_node_B.b_j_j = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.b_j_j <= n - 1)) {
    proc_control_node_B.idxA1j = proc_control_node_B.b_j_j * lda;
    proc_control_node_B.idxAjj_i = proc_control_node_B.idxA1j +
      proc_control_node_B.b_j_j;
    proc_control_node_B.ssq_n = 0.0;
    if (proc_control_node_B.b_j_j >= 1) {
      b_ix = proc_control_node_B.idxA1j;
      b_iy = proc_control_node_B.idxA1j;
      proc_control_node_B.iy_jh = 0;
      while (proc_control_node_B.iy_jh <= proc_control_node_B.b_j_j - 1) {
        proc_control_node_B.ssq_n += A_data[b_ix] * A_data[b_iy];
        b_ix++;
        b_iy++;
        proc_control_node_B.iy_jh++;
      }
    }

    proc_control_node_B.ssq_n = A_data[proc_control_node_B.idxAjj_i] -
      proc_control_node_B.ssq_n;
    if (proc_control_node_B.ssq_n > 0.0) {
      proc_control_node_B.ssq_n = sqrt(proc_control_node_B.ssq_n);
      A_data[proc_control_node_B.idxAjj_i] = proc_control_node_B.ssq_n;
      if (proc_control_node_B.b_j_j + 1 < n) {
        b_ix = (n - proc_control_node_B.b_j_j) - 2;
        b_iy = (proc_control_node_B.idxA1j + lda) + 1;
        proc_control_node_B.idxAjj_i += lda;
        if ((proc_control_node_B.b_j_j != 0) && (b_ix + 1 != 0)) {
          proc_control_node_B.iy_jh = proc_control_node_B.idxAjj_i;
          proc_control_node_B.b_gc = lda * b_ix + b_iy;
          while (((lda > 0) && (b_iy <= proc_control_node_B.b_gc)) || ((lda < 0)
                  && (b_iy >= proc_control_node_B.b_gc))) {
            proc_control_node_B.ix_a2 = proc_control_node_B.idxA1j;
            proc_control_node_B.c_ca = 0.0;
            d = (b_iy + proc_control_node_B.b_j_j) - 1;
            for (ia = b_iy; ia <= d; ia++) {
              proc_control_node_B.c_ca += A_data[ia - 1] *
                A_data[proc_control_node_B.ix_a2];
              proc_control_node_B.ix_a2++;
            }

            A_data[proc_control_node_B.iy_jh] += -proc_control_node_B.c_ca;
            proc_control_node_B.iy_jh += lda;
            b_iy += lda;
          }
        }

        proc_control_node_B.ssq_n = 1.0 / proc_control_node_B.ssq_n;
        proc_control_node_B.idxA1j = (lda * b_ix + proc_control_node_B.idxAjj_i)
          + 1;
        while (((lda > 0) && (proc_control_node_B.idxAjj_i + 1 <=
                              proc_control_node_B.idxA1j)) || ((lda < 0) &&
                (proc_control_node_B.idxAjj_i + 1 >= proc_control_node_B.idxA1j)))
        {
          A_data[proc_control_node_B.idxAjj_i] *= proc_control_node_B.ssq_n;
          proc_control_node_B.idxAjj_i += lda;
        }
      }

      proc_control_node_B.b_j_j++;
    } else {
      A_data[proc_control_node_B.idxAjj_i] = proc_control_node_B.ssq_n;
      info = proc_control_node_B.b_j_j + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_xgemv_mtmcjbiadz(int32_T m,
  int32_T n, const real_T A_data[], int32_T ia0, int32_T lda, const real_T
  x_data[], real_T y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  if (m != 0) {
    proc_control_node_B.ix_nb = 0;
    while (proc_control_node_B.ix_nb <= m - 1) {
      y_data[proc_control_node_B.ix_nb] = 0.0;
      proc_control_node_B.ix_nb++;
    }

    proc_control_node_B.ix_nb = 0;
    b = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      proc_control_node_B.iy_mq = 0;
      c = (iac + m) - 1;
      for (ia = iac; ia <= c; ia++) {
        y_data[proc_control_node_B.iy_mq] += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_nb];
        proc_control_node_B.iy_mq++;
      }

      proc_control_node_B.ix_nb++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factor
  (s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj, const real_T A[21609], int32_T ndims,
   int32_T ldA)
{
  obj->ndims = ndims;
  proc_control_node_B.b_idx_e = 0;
  while (proc_control_node_B.b_idx_e <= ndims - 1) {
    proc_control_node_B.iA0_p = ldA * proc_control_node_B.b_idx_e;
    proc_control_node_B.iUU0 = obj->ldm * proc_control_node_B.b_idx_e;
    proc_control_node_B.b_hl = 1;
    while (proc_control_node_B.b_hl - 1 <= ndims - 1) {
      obj->FMat.data[(proc_control_node_B.iUU0 + proc_control_node_B.b_hl) - 1] =
        A[(proc_control_node_B.iA0_p + proc_control_node_B.b_hl) - 1];
      proc_control_node_B.b_hl++;
    }

    proc_control_node_B.b_idx_e++;
  }

  proc_control_node_B.b_size_e[0] = obj->FMat.size[0];
  proc_control_node_B.b_size_e[1] = obj->FMat.size[1];
  proc_control_node_B.iUU0 = obj->FMat.size[0] * obj->FMat.size[1];
  if (0 <= proc_control_node_B.iUU0 - 1) {
    memcpy(&proc_control_node_B.b_data_k[0], &obj->FMat.data[0],
           proc_control_node_B.iUU0 * sizeof(real_T));
  }

  proc_control_node_B.b_idx_e = proc_control_node_xpotrf(ndims,
    proc_control_node_B.b_data_k, obj->ldm);
  obj->FMat.size[0] = proc_control_node_B.b_size_e[0];
  obj->FMat.size[1] = proc_control_node_B.b_size_e[1];
  proc_control_node_B.iUU0 = proc_control_node_B.b_size_e[0] *
    proc_control_node_B.b_size_e[1];
  if (0 <= proc_control_node_B.iUU0 - 1) {
    memcpy(&obj->FMat.data[0], &proc_control_node_B.b_data_k[0],
           proc_control_node_B.iUU0 * sizeof(real_T));
  }

  obj->info = proc_control_node_B.b_idx_e;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_solve(const
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj, real_T rhs_data[])
{
  int32_T b_j;
  int32_T c;
  int32_T ix;
  int32_T jjA;
  if (obj->ndims != 0) {
    for (b_j = 0; b_j < obj->ndims; b_j++) {
      c = b_j * obj->ldm;
      proc_control_node_B.temp_i5 = rhs_data[b_j];
      for (ix = 0; ix < b_j; ix++) {
        proc_control_node_B.temp_i5 -= obj->FMat.data[c + ix] * rhs_data[ix];
      }

      rhs_data[b_j] = proc_control_node_B.temp_i5 / obj->FMat.data[c + b_j];
    }

    for (b_j = obj->ndims - 1; b_j + 1 > 0; b_j--) {
      jjA = b_j * obj->ldm + b_j;
      rhs_data[b_j] /= obj->FMat.data[jjA];
      for (c = 1; c - 1 < b_j; c++) {
        ix = b_j - c;
        rhs_data[ix] -= obj->FMat.data[jjA - c] * rhs_data[b_j];
      }
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factor_p
  (s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj, const real_T A[21609], int32_T ndims,
   int32_T ldA)
{
  int32_T exitg2;
  boolean_T exitg1;
  proc_control_node_B.LDimSizeP1 = obj->ldm + 1;
  obj->ndims = ndims;
  proc_control_node_B.A_maxDiag_idx = 0;
  while (proc_control_node_B.A_maxDiag_idx <= ndims - 1) {
    proc_control_node_B.LD_diagOffset = ldA * proc_control_node_B.A_maxDiag_idx;
    proc_control_node_B.order_n = obj->ldm * proc_control_node_B.A_maxDiag_idx;
    proc_control_node_B.b_k_hh = 1;
    while (proc_control_node_B.b_k_hh - 1 <= ndims - 1) {
      obj->FMat.data[(proc_control_node_B.order_n + proc_control_node_B.b_k_hh)
        - 1] = A[(proc_control_node_B.LD_diagOffset + proc_control_node_B.b_k_hh)
        - 1];
      proc_control_node_B.b_k_hh++;
    }

    proc_control_node_B.A_maxDiag_idx++;
  }

  proc_control_node_B.A_maxDiag_idx = proc_control_node_ixamax_k(ndims,
    obj->FMat.data, obj->ldm + 1) - 1;
  proc_control_node_B.u0 = fabs(obj->FMat.data[obj->ldm *
    proc_control_node_B.A_maxDiag_idx + proc_control_node_B.A_maxDiag_idx]) *
    2.2204460492503131E-16;
  if (proc_control_node_B.u0 > 0.0) {
    obj->regTol_ = proc_control_node_B.u0;
  } else {
    obj->regTol_ = 0.0;
  }

  if (ndims > 128) {
    proc_control_node_B.A_maxDiag_idx = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.A_maxDiag_idx < ndims)) {
      proc_control_node_B.LD_diagOffset = proc_control_node_B.LDimSizeP1 *
        proc_control_node_B.A_maxDiag_idx + 1;
      proc_control_node_B.order_n = ndims - proc_control_node_B.A_maxDiag_idx;
      if (proc_control_node_B.A_maxDiag_idx + 48 <= ndims) {
        proc_control_no_partialColLDL3_(obj, proc_control_node_B.LD_diagOffset,
          proc_control_node_B.order_n);
        proc_control_node_B.A_maxDiag_idx += 48;
      } else {
        proc_control_node_fullColLDL2_(obj, proc_control_node_B.LD_diagOffset,
          proc_control_node_B.order_n);
        exitg1 = true;
      }
    }
  } else {
    proc_control_node_fullColLDL2_(obj, 1, ndims);
  }

  if (obj->ConvexCheck) {
    proc_control_node_B.LDimSizeP1 = 0;
    do {
      exitg2 = 0;
      if (proc_control_node_B.LDimSizeP1 <= ndims - 1) {
        if (obj->FMat.data[obj->ldm * proc_control_node_B.LDimSizeP1 +
            proc_control_node_B.LDimSizeP1] <= 0.0) {
          obj->info = -proc_control_node_B.LDimSizeP1 - 1;
          exitg2 = 1;
        } else {
          proc_control_node_B.LDimSizeP1++;
        }
      } else {
        obj->ConvexCheck = false;
        exitg2 = 1;
      }
    } while (exitg2 == 0);
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_solve_l(const
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *obj, real_T rhs_data[])
{
  int32_T b;
  int32_T i;
  int32_T j;
  int32_T n_tmp;
  n_tmp = obj->ndims - 1;
  if (obj->ndims != 0) {
    for (j = 0; j <= n_tmp; j++) {
      proc_control_node_B.jjA = j * obj->ldm + j;
      b = n_tmp - j;
      for (i = 1; i - 1 < b; i++) {
        proc_control_node_B.ix_fw = j + i;
        rhs_data[proc_control_node_B.ix_fw] -= obj->
          FMat.data[proc_control_node_B.jjA + i] * rhs_data[j];
      }
    }
  }

  for (b = 0; b <= n_tmp; b++) {
    rhs_data[b] /= obj->FMat.data[obj->ldm * b + b];
  }

  if (obj->ndims != 0) {
    for (b = obj->ndims - 1; b + 1 > 0; b--) {
      j = b * obj->ldm;
      proc_control_node_B.temp_mj = rhs_data[b];
      proc_control_node_B.jjA = obj->ndims;
      while (proc_control_node_B.jjA >= b + 2) {
        proc_control_node_B.temp_mj -= obj->FMat.data[(j +
          proc_control_node_B.jjA) - 1] * rhs_data[proc_control_node_B.jjA - 1];
        proc_control_node_B.jjA--;
      }

      rhs_data[b] = proc_control_node_B.temp_mj;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_compute_deltax(const real_T
  H[21609], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, const
  s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager, s_TNXzMnREVvDmNpLFpsTLBC_proc_T
  *cholmanager, const s_oZGbvi5mjKKebHB9aR5DoG_proc_T *objective, boolean_T
  alwaysPositiveDef)
{
  int32_T exitg2;
  boolean_T exitg1;
  proc_control_node_B.nVar_a = qrmanager->mrows - 1;
  proc_control_node_B.mNull = qrmanager->mrows - qrmanager->ncols;
  if (proc_control_node_B.mNull <= 0) {
    proc_control_node_B.mNull = 0;
    while (proc_control_node_B.mNull <= proc_control_node_B.nVar_a) {
      solution->searchDir.data[proc_control_node_B.mNull] = 0.0;
      proc_control_node_B.mNull++;
    }
  } else {
    proc_control_node_B.nullStartIdx = 0;
    while (proc_control_node_B.nullStartIdx <= proc_control_node_B.nVar_a) {
      solution->searchDir.data[proc_control_node_B.nullStartIdx] =
        -objective->grad.data[proc_control_node_B.nullStartIdx];
      proc_control_node_B.nullStartIdx++;
    }

    if (qrmanager->ncols <= 0) {
      switch (objective->objtype) {
       case 5:
        break;

       case 3:
        if (alwaysPositiveDef) {
          proc_control_node_factor(cholmanager, H, qrmanager->mrows,
            qrmanager->mrows);
        } else {
          proc_control_node_factor_p(cholmanager, H, qrmanager->mrows,
            qrmanager->mrows);
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else if (alwaysPositiveDef) {
          proc_control_node_solve(cholmanager, solution->searchDir.data);
        } else {
          proc_control_node_solve_l(cholmanager, solution->searchDir.data);
        }
        break;

       default:
        if (alwaysPositiveDef) {
          proc_control_node_factor(cholmanager, H, objective->nvar,
            objective->nvar);
          if (cholmanager->info != 0) {
            solution->state = -6;
          } else {
            proc_control_node_solve(cholmanager, solution->searchDir.data);
            proc_control_node_B.b_c_o = 1.0 / objective->beta;
            proc_control_node_B.mNull = objective->nvar;
            while (proc_control_node_B.mNull + 1 <= qrmanager->mrows) {
              solution->searchDir.data[proc_control_node_B.mNull] *=
                proc_control_node_B.b_c_o;
              proc_control_node_B.mNull++;
            }
          }
        }
        break;
      }
    } else {
      proc_control_node_B.nullStartIdx = qrmanager->ldq * qrmanager->ncols + 1;
      if (objective->objtype == 5) {
        proc_control_node_B.b_ldw = 0;
        while (proc_control_node_B.b_ldw <= proc_control_node_B.mNull - 1) {
          memspace->workspace_double.data[proc_control_node_B.b_ldw] =
            -qrmanager->Q.data[(qrmanager->ncols + proc_control_node_B.b_ldw) *
            qrmanager->ldq + proc_control_node_B.nVar_a];
          proc_control_node_B.b_ldw++;
        }

        proc_control_n_xgemv_mtmcjbiadz(qrmanager->mrows,
          proc_control_node_B.mNull, qrmanager->Q.data,
          proc_control_node_B.nullStartIdx, qrmanager->ldq,
          memspace->workspace_double.data, solution->searchDir.data);
      } else {
        if (objective->objtype == 3) {
          proc_control_node_B.b_ldw = memspace->workspace_double.size[0];
          proc_control_node_xgemm(qrmanager->mrows, proc_control_node_B.mNull,
            qrmanager->mrows, H, qrmanager->mrows, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, memspace->workspace_double.size[0]);
          proc_control_node_xgemm_m(proc_control_node_B.mNull,
            proc_control_node_B.mNull, qrmanager->mrows, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, proc_control_node_B.b_ldw,
            cholmanager->FMat.data, cholmanager->ldm);
        } else if (alwaysPositiveDef) {
          proc_control_node_B.b_ldw = memspace->workspace_double.size[0];
          proc_control_node_xgemm(objective->nvar, proc_control_node_B.mNull,
            objective->nvar, H, objective->nvar, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, memspace->workspace_double.size[0]);
          proc_control_node_B.order = 0;
          while (proc_control_node_B.order <= proc_control_node_B.mNull - 1) {
            proc_control_node_B.ix_nk = objective->nvar;
            while (proc_control_node_B.ix_nk + 1 <= qrmanager->mrows) {
              memspace->workspace_double.data[proc_control_node_B.ix_nk +
                memspace->workspace_double.size[0] * proc_control_node_B.order] =
                qrmanager->Q.data[proc_control_node_B.ix_nk + qrmanager->Q.size
                [0] * (proc_control_node_B.order + qrmanager->ncols)] *
                objective->beta;
              proc_control_node_B.ix_nk++;
            }

            proc_control_node_B.order++;
          }

          proc_control_node_xgemm_m(proc_control_node_B.mNull,
            proc_control_node_B.mNull, qrmanager->mrows, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, proc_control_node_B.b_ldw,
            cholmanager->FMat.data, cholmanager->ldm);
        }

        if (alwaysPositiveDef) {
          cholmanager->ndims = proc_control_node_B.mNull;
          proc_control_node_B.b_size_h[0] = cholmanager->FMat.size[0];
          proc_control_node_B.b_size_h[1] = cholmanager->FMat.size[1];
          proc_control_node_B.order = cholmanager->FMat.size[0] *
            cholmanager->FMat.size[1];
          if (0 <= proc_control_node_B.order - 1) {
            memcpy(&proc_control_node_B.b_data_c[0], &cholmanager->FMat.data[0],
                   proc_control_node_B.order * sizeof(real_T));
          }

          proc_control_node_B.ix_nk = proc_control_node_xpotrf
            (proc_control_node_B.mNull, proc_control_node_B.b_data_c,
             cholmanager->ldm);
          cholmanager->FMat.size[0] = proc_control_node_B.b_size_h[0];
          cholmanager->FMat.size[1] = proc_control_node_B.b_size_h[1];
          proc_control_node_B.order = proc_control_node_B.b_size_h[0] *
            proc_control_node_B.b_size_h[1];
          if (0 <= proc_control_node_B.order - 1) {
            memcpy(&cholmanager->FMat.data[0], &proc_control_node_B.b_data_c[0],
                   proc_control_node_B.order * sizeof(real_T));
          }

          cholmanager->info = proc_control_node_B.ix_nk;
        } else {
          proc_control_node_B.b_ldw = cholmanager->ldm + 1;
          cholmanager->ndims = proc_control_node_B.mNull;
          proc_control_node_B.b_nullStart = proc_control_node_ixamax_k
            (proc_control_node_B.mNull, cholmanager->FMat.data, cholmanager->ldm
             + 1) - 1;
          proc_control_node_B.b_c_o = fabs(cholmanager->FMat.data
            [cholmanager->ldm * proc_control_node_B.b_nullStart +
            proc_control_node_B.b_nullStart]) * 2.2204460492503131E-16;
          if (proc_control_node_B.b_c_o > 0.0) {
            cholmanager->regTol_ = proc_control_node_B.b_c_o;
          } else {
            cholmanager->regTol_ = 0.0;
          }

          if (proc_control_node_B.mNull > 128) {
            proc_control_node_B.ix_nk = 0;
            exitg1 = false;
            while ((!exitg1) && (proc_control_node_B.ix_nk <
                                 proc_control_node_B.mNull)) {
              proc_control_node_B.b_nullStart = proc_control_node_B.b_ldw *
                proc_control_node_B.ix_nk + 1;
              proc_control_node_B.order = proc_control_node_B.mNull -
                proc_control_node_B.ix_nk;
              if (proc_control_node_B.ix_nk + 48 <= proc_control_node_B.mNull) {
                proc_control_no_partialColLDL3_(cholmanager,
                  proc_control_node_B.b_nullStart, proc_control_node_B.order);
                proc_control_node_B.ix_nk += 48;
              } else {
                proc_control_node_fullColLDL2_(cholmanager,
                  proc_control_node_B.b_nullStart, proc_control_node_B.order);
                exitg1 = true;
              }
            }
          } else {
            proc_control_node_fullColLDL2_(cholmanager, 1,
              proc_control_node_B.mNull);
          }

          if (cholmanager->ConvexCheck) {
            proc_control_node_B.ix_nk = 0;
            do {
              exitg2 = 0;
              if (proc_control_node_B.ix_nk <= proc_control_node_B.mNull - 1) {
                if (cholmanager->FMat.data[cholmanager->ldm *
                    proc_control_node_B.ix_nk + proc_control_node_B.ix_nk] <=
                    0.0) {
                  cholmanager->info = -proc_control_node_B.ix_nk - 1;
                  exitg2 = 1;
                } else {
                  proc_control_node_B.ix_nk++;
                }
              } else {
                cholmanager->ConvexCheck = false;
                exitg2 = 1;
              }
            } while (exitg2 == 0);
          }
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else {
          proc_control_node_B.b_ldw = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            proc_control_node_B.ix_nk = 0;
            while (proc_control_node_B.ix_nk <= proc_control_node_B.mNull - 1) {
              memspace->workspace_double.data[proc_control_node_B.ix_nk] = 0.0;
              proc_control_node_B.ix_nk++;
            }

            proc_control_node_B.b_nullStart = 0;
            proc_control_node_B.order = (proc_control_node_B.mNull - 1) *
              qrmanager->ldq + proc_control_node_B.nullStartIdx;
            proc_control_node_B.idx_col = proc_control_node_B.nullStartIdx;
            while (((proc_control_node_B.b_ldw > 0) &&
                    (proc_control_node_B.idx_col <= proc_control_node_B.order)) ||
                   ((proc_control_node_B.b_ldw < 0) &&
                    (proc_control_node_B.idx_col >= proc_control_node_B.order)))
            {
              proc_control_node_B.ix_nk = 0;
              proc_control_node_B.b_c_o = 0.0;
              proc_control_node_B.b_ix_e = proc_control_node_B.idx_col +
                proc_control_node_B.nVar_a;
              proc_control_node_B.b_ldw_tmp = proc_control_node_B.idx_col;
              while (proc_control_node_B.b_ldw_tmp <= proc_control_node_B.b_ix_e)
              {
                proc_control_node_B.b_c_o += qrmanager->
                  Q.data[proc_control_node_B.b_ldw_tmp - 1] *
                  objective->grad.data[proc_control_node_B.ix_nk];
                proc_control_node_B.ix_nk++;
                proc_control_node_B.b_ldw_tmp++;
              }

              memspace->workspace_double.data[proc_control_node_B.b_nullStart] +=
                -proc_control_node_B.b_c_o;
              proc_control_node_B.b_nullStart++;
              proc_control_node_B.idx_col += proc_control_node_B.b_ldw;
            }
          }

          if (alwaysPositiveDef) {
            proc_control_node_B.b_rhs_size[0] = memspace->workspace_double.size
              [0];
            proc_control_node_B.b_rhs_size[1] = memspace->workspace_double.size
              [1];
            proc_control_node_B.order = memspace->workspace_double.size[0] *
              memspace->workspace_double.size[1];
            if (0 <= proc_control_node_B.order - 1) {
              memcpy(&proc_control_node_B.b_rhs_data[0],
                     &memspace->workspace_double.data[0],
                     proc_control_node_B.order * sizeof(real_T));
            }

            if (cholmanager->ndims != 0) {
              proc_control_node_B.b_ldw = 0;
              while (proc_control_node_B.b_ldw <= cholmanager->ndims - 1) {
                proc_control_node_B.order = proc_control_node_B.b_ldw *
                  cholmanager->ldm;
                proc_control_node_B.b_c_o =
                  proc_control_node_B.b_rhs_data[proc_control_node_B.b_ldw];
                proc_control_node_B.idx_col = 0;
                while (proc_control_node_B.idx_col <= proc_control_node_B.b_ldw
                       - 1) {
                  proc_control_node_B.b_c_o -= cholmanager->
                    FMat.data[proc_control_node_B.order +
                    proc_control_node_B.idx_col] *
                    proc_control_node_B.b_rhs_data[proc_control_node_B.idx_col];
                  proc_control_node_B.idx_col++;
                }

                proc_control_node_B.b_rhs_data[proc_control_node_B.b_ldw] =
                  proc_control_node_B.b_c_o / cholmanager->
                  FMat.data[proc_control_node_B.order +
                  proc_control_node_B.b_ldw];
                proc_control_node_B.b_ldw++;
              }
            }

            proc_control_node_xtrsv(cholmanager->ndims, cholmanager->FMat.data,
              cholmanager->ldm, proc_control_node_B.b_rhs_data);
          } else {
            proc_control_node_B.b_ldw_tmp = cholmanager->ndims - 1;
            proc_control_node_B.b_rhs_size[0] = memspace->workspace_double.size
              [0];
            proc_control_node_B.b_rhs_size[1] = memspace->workspace_double.size
              [1];
            proc_control_node_B.order = memspace->workspace_double.size[0] *
              memspace->workspace_double.size[1];
            if (0 <= proc_control_node_B.order - 1) {
              memcpy(&proc_control_node_B.b_rhs_data[0],
                     &memspace->workspace_double.data[0],
                     proc_control_node_B.order * sizeof(real_T));
            }

            if (cholmanager->ndims != 0) {
              proc_control_node_B.b_nullStart = 0;
              while (proc_control_node_B.b_nullStart <=
                     proc_control_node_B.b_ldw_tmp) {
                proc_control_node_B.order = proc_control_node_B.b_nullStart *
                  cholmanager->ldm + proc_control_node_B.b_nullStart;
                proc_control_node_B.idx_col = proc_control_node_B.b_ldw_tmp -
                  proc_control_node_B.b_nullStart;
                proc_control_node_B.ix_nk = 1;
                while (proc_control_node_B.ix_nk - 1 <=
                       proc_control_node_B.idx_col - 1) {
                  proc_control_node_B.b_ix_e = proc_control_node_B.b_nullStart +
                    proc_control_node_B.ix_nk;
                  proc_control_node_B.b_rhs_data[proc_control_node_B.b_ix_e] -=
                    proc_control_node_B.b_rhs_data[proc_control_node_B.b_nullStart]
                    * cholmanager->FMat.data[proc_control_node_B.order +
                    proc_control_node_B.ix_nk];
                  proc_control_node_B.ix_nk++;
                }

                proc_control_node_B.b_nullStart++;
              }
            }

            proc_control_node_B.b_ldw = 0;
            while (proc_control_node_B.b_ldw <= proc_control_node_B.b_ldw_tmp) {
              proc_control_node_B.b_rhs_data[proc_control_node_B.b_ldw] /=
                cholmanager->FMat.data[cholmanager->ldm *
                proc_control_node_B.b_ldw + proc_control_node_B.b_ldw];
              proc_control_node_B.b_ldw++;
            }

            if (cholmanager->ndims != 0) {
              proc_control_node_B.b_ldw = cholmanager->ndims - 1;
              while (proc_control_node_B.b_ldw + 1 > 0) {
                proc_control_node_B.b_nullStart = proc_control_node_B.b_ldw *
                  cholmanager->ldm;
                proc_control_node_B.b_c_o =
                  proc_control_node_B.b_rhs_data[proc_control_node_B.b_ldw];
                proc_control_node_B.order = cholmanager->ndims;
                while (proc_control_node_B.order >= proc_control_node_B.b_ldw +
                       2) {
                  proc_control_node_B.b_c_o -= cholmanager->FMat.data
                    [(proc_control_node_B.b_nullStart +
                      proc_control_node_B.order) - 1] *
                    proc_control_node_B.b_rhs_data[proc_control_node_B.order - 1];
                  proc_control_node_B.order--;
                }

                proc_control_node_B.b_rhs_data[proc_control_node_B.b_ldw] =
                  proc_control_node_B.b_c_o;
                proc_control_node_B.b_ldw--;
              }
            }
          }

          memspace->workspace_double.size[0] = proc_control_node_B.b_rhs_size[0];
          memspace->workspace_double.size[1] = proc_control_node_B.b_rhs_size[1];
          proc_control_node_B.order = proc_control_node_B.b_rhs_size[0] *
            proc_control_node_B.b_rhs_size[1];
          if (0 <= proc_control_node_B.order - 1) {
            memcpy(&memspace->workspace_double.data[0],
                   &proc_control_node_B.b_rhs_data[0], proc_control_node_B.order
                   * sizeof(real_T));
          }

          proc_control_n_xgemv_mtmcjbiadz(qrmanager->mrows,
            proc_control_node_B.mNull, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            proc_control_node_B.b_rhs_data, solution->searchDir.data);
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_m(int32_T n, const
  real_T x_data[])
{
  real_T t;
  real_T y;
  int32_T k;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x_data[0]);
    } else {
      proc_control_node_B.scale_h = 3.3121686421112381E-170;
      for (k = 0; k < n; k++) {
        proc_control_node_B.absxk_h = fabs(x_data[k]);
        if (proc_control_node_B.absxk_h > proc_control_node_B.scale_h) {
          t = proc_control_node_B.scale_h / proc_control_node_B.absxk_h;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_h = proc_control_node_B.absxk_h;
        } else {
          t = proc_control_node_B.absxk_h / proc_control_node_B.scale_h;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_h * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control__xgemv_mtmcjbiadz2(int32_T m,
  int32_T n, const real_T A_data[], int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  int32_T b;
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    proc_control_node_B.iy_j = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      proc_control_node_B.ix_j = 0;
      proc_control_node_B.c_bc = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        proc_control_node_B.c_bc += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_j];
        proc_control_node_B.ix_j++;
      }

      y_data[proc_control_node_B.iy_j] += proc_control_node_B.c_bc;
      proc_control_node_B.iy_j++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control__feasibleratiotest(const real_T
  solution_xstar_data[], const real_T solution_searchDir_data[], real_T
  workspace_data[], const int32_T workspace_size[2], int32_T workingset_nVar,
  int32_T workingset_ldA, const real_T workingset_Aineq_data[], const real_T
  workingset_bineq_data[], const real_T workingset_lb_data[], const int32_T
  workingset_indexLB_data[], const int32_T workingset_sizes[5], const int32_T
  workingset_isActiveIdx[6], const boolean_T workingset_isActiveConstr_data[],
  const int32_T workingset_nWConstr[5], boolean_T isPhaseOne, real_T *alpha,
  boolean_T *newBlocking, int32_T *constrType, int32_T *constrIdx)
{
  proc_control_node_B.totalIneq = workingset_sizes[2] - 1;
  *alpha = 1.0E+30;
  *newBlocking = false;
  *constrType = 0;
  *constrIdx = 0;
  proc_control_node_B.denomTol = 2.2204460492503131E-13 *
    proc_control_node_xnrm2_m(workingset_nVar, solution_searchDir_data);
  if (workingset_nWConstr[2] < workingset_sizes[2]) {
    proc_control_node_B.ldw = 0;
    while (proc_control_node_B.ldw <= proc_control_node_B.totalIneq) {
      workspace_data[proc_control_node_B.ldw] =
        workingset_bineq_data[proc_control_node_B.ldw];
      proc_control_node_B.ldw++;
    }

    proc_control__xgemv_mtmcjbiadz2(workingset_nVar, workingset_sizes[2],
      workingset_Aineq_data, workingset_ldA, solution_xstar_data, workspace_data);
    proc_control_node_B.ldw = workspace_size[0];
    if (workingset_sizes[2] != 0) {
      proc_control_node_B.iyend_k = workspace_size[0] + workingset_sizes[2];
      proc_control_node_B.b_iy_e = workspace_size[0];
      while (proc_control_node_B.b_iy_e + 1 <= proc_control_node_B.iyend_k) {
        workspace_data[proc_control_node_B.b_iy_e] = 0.0;
        proc_control_node_B.b_iy_e++;
      }

      proc_control_node_B.iyend_k = workspace_size[0];
      proc_control_node_B.b_iy_e = (workingset_sizes[2] - 1) * workingset_ldA +
        1;
      proc_control_node_B.iac_k2 = 1;
      while (((workingset_ldA > 0) && (proc_control_node_B.iac_k2 <=
               proc_control_node_B.b_iy_e)) || ((workingset_ldA < 0) &&
              (proc_control_node_B.iac_k2 >= proc_control_node_B.b_iy_e))) {
        proc_control_node_B.ix_p = 0;
        proc_control_node_B.c_mw = 0.0;
        proc_control_node_B.b_bro = (proc_control_node_B.iac_k2 +
          workingset_nVar) - 1;
        proc_control_node_B.ia_lm = proc_control_node_B.iac_k2;
        while (proc_control_node_B.ia_lm <= proc_control_node_B.b_bro) {
          proc_control_node_B.c_mw +=
            workingset_Aineq_data[proc_control_node_B.ia_lm - 1] *
            solution_searchDir_data[proc_control_node_B.ix_p];
          proc_control_node_B.ix_p++;
          proc_control_node_B.ia_lm++;
        }

        workspace_data[proc_control_node_B.iyend_k] += proc_control_node_B.c_mw;
        proc_control_node_B.iyend_k++;
        proc_control_node_B.iac_k2 += workingset_ldA;
      }
    }

    proc_control_node_B.iyend_k = 0;
    while (proc_control_node_B.iyend_k <= proc_control_node_B.totalIneq) {
      proc_control_node_B.b_iy_e = proc_control_node_B.ldw +
        proc_control_node_B.iyend_k;
      if ((workspace_data[proc_control_node_B.b_iy_e] >
           proc_control_node_B.denomTol) && (!workingset_isActiveConstr_data
           [(workingset_isActiveIdx[2] + proc_control_node_B.iyend_k) - 1])) {
        proc_control_node_B.u0_o = fabs
          (workspace_data[proc_control_node_B.iyend_k]);
        proc_control_node_B.ratio = 0.02 -
          workspace_data[proc_control_node_B.iyend_k];
        if ((proc_control_node_B.u0_o < proc_control_node_B.ratio) || rtIsNaN
            (proc_control_node_B.ratio)) {
          proc_control_node_B.ratio = proc_control_node_B.u0_o;
        }

        proc_control_node_B.ratio /= workspace_data[proc_control_node_B.b_iy_e];
        if (proc_control_node_B.ratio < *alpha) {
          *alpha = proc_control_node_B.ratio;
          *constrType = 3;
          *constrIdx = proc_control_node_B.iyend_k + 1;
          *newBlocking = true;
        }
      }

      proc_control_node_B.iyend_k++;
    }
  }

  if (workingset_nWConstr[3] < workingset_sizes[3]) {
    proc_control_node_B.c_mw = solution_xstar_data[workingset_nVar - 1] *
      static_cast<real_T>(isPhaseOne);
    proc_control_node_B.phaseOneCorrectionP =
      solution_searchDir_data[workingset_nVar - 1] * static_cast<real_T>
      (isPhaseOne);
    proc_control_node_B.totalIneq = 0;
    while (proc_control_node_B.totalIneq <= workingset_sizes[3] - 2) {
      proc_control_node_B.pk_corrected =
        -solution_searchDir_data[workingset_indexLB_data[proc_control_node_B.totalIneq]
        - 1] - proc_control_node_B.phaseOneCorrectionP;
      if ((proc_control_node_B.pk_corrected > proc_control_node_B.denomTol) && (
           !workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
            proc_control_node_B.totalIneq) - 1])) {
        proc_control_node_B.ratio =
          (-solution_xstar_data[workingset_indexLB_data[proc_control_node_B.totalIneq]
           - 1] -
           workingset_lb_data[workingset_indexLB_data[proc_control_node_B.totalIneq]
           - 1]) - proc_control_node_B.c_mw;
        proc_control_node_B.u0_o = fabs(proc_control_node_B.ratio);
        if ((!(proc_control_node_B.u0_o < 0.02 - proc_control_node_B.ratio)) &&
            (!rtIsNaN(0.02 - proc_control_node_B.ratio))) {
          proc_control_node_B.u0_o = 0.02 - proc_control_node_B.ratio;
        }

        proc_control_node_B.ratio = proc_control_node_B.u0_o /
          proc_control_node_B.pk_corrected;
        if (proc_control_node_B.ratio < *alpha) {
          *alpha = proc_control_node_B.ratio;
          *constrType = 4;
          *constrIdx = proc_control_node_B.totalIneq + 1;
          *newBlocking = true;
        }
      }

      proc_control_node_B.totalIneq++;
    }

    proc_control_node_B.b_iy_e = workingset_indexLB_data[workingset_sizes[3] - 1]
      - 1;
    proc_control_node_B.c_mw =
      -solution_searchDir_data[proc_control_node_B.b_iy_e];
    if ((proc_control_node_B.c_mw > proc_control_node_B.denomTol) &&
        (!workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
          workingset_sizes[3]) - 2])) {
      proc_control_node_B.ratio =
        -solution_xstar_data[proc_control_node_B.b_iy_e] -
        workingset_lb_data[proc_control_node_B.b_iy_e];
      proc_control_node_B.u0_o = fabs(proc_control_node_B.ratio);
      if ((!(proc_control_node_B.u0_o < 0.02 - proc_control_node_B.ratio)) &&
          (!rtIsNaN(0.02 - proc_control_node_B.ratio))) {
        proc_control_node_B.u0_o = 0.02 - proc_control_node_B.ratio;
      }

      proc_control_node_B.ratio = proc_control_node_B.u0_o /
        proc_control_node_B.c_mw;
      if (proc_control_node_B.ratio < *alpha) {
        *alpha = proc_control_node_B.ratio;
        *constrType = 4;
        *constrIdx = workingset_sizes[3];
        *newBlocking = true;
      }
    }
  }

  if (!isPhaseOne) {
    *newBlocking = (((!*newBlocking) || (!(*alpha > 1.0))) && (*newBlocking));
    if (!(*alpha < 1.0)) {
      *alpha = 1.0;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_c_checkUnboundedOrIllPosed
  (s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution, const
   s_oZGbvi5mjKKebHB9aR5DoG_proc_T *objective)
{
  if (objective->objtype == 5) {
    if (proc_control_node_xnrm2_m(objective->nvar, solution->searchDir.data) >
        100.0 * static_cast<real_T>(objective->nvar) * 1.4901161193847656E-8) {
      solution->state = 3;
    } else {
      solution->state = 4;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_addBoundToActiveSetMatrix_
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, int32_T TYPE, int32_T idx_local)
{
  int32_T colOffset;
  int32_T idx;
  int32_T idx_bnd_local;
  obj->nWConstr[TYPE - 1]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE - 1] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = TYPE;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  colOffset = (obj->nActiveConstr - 1) * obj->ldA - 1;
  if (TYPE == 5) {
    idx_bnd_local = obj->indexUB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->ub.data[idx_bnd_local - 1];
  } else {
    idx_bnd_local = obj->indexLB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->lb.data[idx_bnd_local - 1];
  }

  for (idx = 0; idx <= idx_bnd_local - 2; idx++) {
    obj->ATwset.data[(idx + colOffset) + 1] = 0.0;
  }

  obj->ATwset.data[idx_bnd_local + colOffset] = static_cast<real_T>(TYPE == 5) *
    2.0 - 1.0;
  for (idx_bnd_local++; idx_bnd_local <= obj->nVar; idx_bnd_local++) {
    obj->ATwset.data[idx_bnd_local + colOffset] = 0.0;
  }

  switch (obj->probType) {
   case 3:
   case 2:
    break;

   default:
    obj->ATwset.data[obj->nVar + colOffset] = -1.0;
    break;
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_addAineqConstr
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, int32_T idx_local)
{
  int32_T iAineq0;
  int32_T iAw0;
  int32_T idx;
  obj->nWConstr[2]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[2] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = 3;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  iAineq0 = (idx_local - 1) * obj->ldA;
  iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
  for (idx = 0; idx < obj->nVar; idx++) {
    obj->ATwset.data[iAw0 + idx] = obj->Aineq.data[iAineq0 + idx];
  }

  obj->bwset.data[obj->nActiveConstr - 1] = obj->bineq.data[idx_local - 1];
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_checkStoppingAndUpdateFval(int32_T
  *activeSetChangeID, const real_T f_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T
  *solution, s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, const
  s_oZGbvi5mjKKebHB9aR5DoG_proc_T *objective, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager, real_T
  options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations, boolean_T
  updateFval)
{
  boolean_T nonDegenerateWset;
  solution->iterations++;
  proc_control_node_B.nVar_tmp_tmp_f = objective->nvar - 1;
  if ((solution->iterations >= runTimeOptions_MaxIterations) &&
      ((solution->state != 1) || (objective->objtype == 5))) {
    solution->state = 0;
  }

  if (solution->iterations - solution->iterations / 50 * 50 == 0) {
    proc_control_node_B.b_dt = proc__maxConstraintViolation_du(workingset,
      solution->xstar.data);
    solution->maxConstr = proc_control_node_B.b_dt;
    proc_control_node_B.tempMaxConstr = proc_control_node_B.b_dt;
    if (objective->objtype == 5) {
      proc_control_node_B.tempMaxConstr = proc_control_node_B.b_dt -
        solution->xstar.data[objective->nvar - 1];
    }

    if (proc_control_node_B.tempMaxConstr > 0.02) {
      proc_control_node_B.y_size_idx_0_c = solution->searchDir.size;
      proc_control_node_B.loop_ub_ce = solution->searchDir.size;
      if (0 <= proc_control_node_B.loop_ub_ce - 1) {
        memcpy(&proc_control_node_B.y_data_lx[0], &solution->searchDir.data[0],
               proc_control_node_B.loop_ub_ce * sizeof(real_T));
      }

      proc_control_node_B.loop_ub_ce = 0;
      while (proc_control_node_B.loop_ub_ce <=
             proc_control_node_B.nVar_tmp_tmp_f) {
        proc_control_node_B.y_data_lx[proc_control_node_B.loop_ub_ce] =
          solution->xstar.data[proc_control_node_B.loop_ub_ce];
        proc_control_node_B.loop_ub_ce++;
      }

      if (0 <= proc_control_node_B.y_size_idx_0_c - 1) {
        memcpy(&solution->searchDir.data[0], &proc_control_node_B.y_data_lx[0],
               proc_control_node_B.y_size_idx_0_c * sizeof(real_T));
      }

      proc_control_node_B.loop_ub_ce = memspace->workspace_double.size[0] *
        memspace->workspace_double.size[1];
      for (proc_control_node_B.y_size_idx_0_c = 0;
           proc_control_node_B.y_size_idx_0_c < proc_control_node_B.loop_ub_ce;
           proc_control_node_B.y_size_idx_0_c++) {
      }

      nonDegenerateWset = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         solution->searchDir.data, workingset, qrmanager);
      if ((!nonDegenerateWset) && (solution->state != 0)) {
        solution->state = -2;
      }

      *activeSetChangeID = 0;
      proc_control_node_B.tempMaxConstr = proc__maxConstraintViolation_du
        (workingset, solution->searchDir.data);
      if (proc_control_node_B.tempMaxConstr < proc_control_node_B.b_dt) {
        proc_control_node_B.loop_ub_ce = 0;
        while (proc_control_node_B.loop_ub_ce <=
               proc_control_node_B.nVar_tmp_tmp_f) {
          solution->xstar.data[proc_control_node_B.loop_ub_ce] =
            solution->searchDir.data[proc_control_node_B.loop_ub_ce];
          proc_control_node_B.loop_ub_ce++;
        }

        solution->maxConstr = proc_control_node_B.tempMaxConstr;
      }
    }
  }

  if (updateFval && (options_ObjectiveLimit > (rtMinusInf))) {
    proc_control_node_B.loop_ub_ce = memspace->workspace_double.size[0] *
      memspace->workspace_double.size[1];
    for (proc_control_node_B.y_size_idx_0_c = 0;
         proc_control_node_B.y_size_idx_0_c < proc_control_node_B.loop_ub_ce;
         proc_control_node_B.y_size_idx_0_c++) {
    }

    proc_control_node_B.b_dt = proc_contro_computeFval_ReuseHx(objective,
      memspace->workspace_double.data, f_data, solution->xstar.data);
    solution->fstar = proc_control_node_B.b_dt;
    if ((proc_control_node_B.b_dt < options_ObjectiveLimit) && ((solution->state
          != 0) || (objective->objtype != 5))) {
      solution->state = 2;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_iterate(const real_T H[21609],
  const real_T f_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *cholmanager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  objective, const char_T options_SolverName[7], real_T options_StepTolerance,
  real_T options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations)
{
  int32_T exitg1;
  boolean_T guard1 = false;
  boolean_T guard11 = false;
  boolean_T guard2 = false;
  boolean_T subProblemChanged;
  boolean_T updateFval;
  subProblemChanged = true;
  updateFval = true;
  proc_control_node_B.activeSetChangeID = 0;
  proc_control_node_B.TYPE = objective->objtype;
  proc_control_node_B.nVar_ch = workingset->nVar;
  proc_control_node_B.globalActiveConstrIdx = 0;
  proc_contro_computeGrad_StoreHx(objective, H, f_data, solution->xstar.data);
  proc_control_node_B.iyend = memspace->workspace_double.size[0] *
    memspace->workspace_double.size[1];
  for (proc_control_node_B.workingIdx = 0; proc_control_node_B.workingIdx <
       proc_control_node_B.iyend; proc_control_node_B.workingIdx++) {
  }

  solution->fstar = proc_contro_computeFval_ReuseHx(objective,
    memspace->workspace_double.data, f_data, solution->xstar.data);
  if (solution->iterations < runTimeOptions_MaxIterations) {
    solution->state = -5;
  } else {
    solution->state = 0;
  }

  proc_control_node_B.iyend = 0;
  while (proc_control_node_B.iyend <= workingset->mConstrMax - 1) {
    solution->lambda.data[proc_control_node_B.iyend] = 0.0;
    proc_control_node_B.iyend++;
  }

  do {
    exitg1 = 0;
    if (solution->state == -5) {
      guard11 = false;
      if (subProblemChanged) {
        switch (proc_control_node_B.activeSetChangeID) {
         case 1:
          proc_control_node_B.workingIdx = (workingset->nActiveConstr - 1) *
            workingset->ldA;
          if (qrmanager->mrows < qrmanager->ncols + 1) {
            qrmanager->minRowCol = qrmanager->mrows;
          } else {
            qrmanager->minRowCol = qrmanager->ncols + 1;
          }

          proc_control_node_B.iQR0 = qrmanager->ldq * qrmanager->ncols;
          proc_control_node_B.iy_g = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            proc_control_node_B.iyend = proc_control_node_B.iQR0 +
              qrmanager->mrows;
            proc_control_node_B.memspace_j = proc_control_node_B.iQR0;
            while (proc_control_node_B.memspace_j + 1 <=
                   proc_control_node_B.iyend) {
              qrmanager->QR.data[proc_control_node_B.memspace_j] = 0.0;
              proc_control_node_B.memspace_j++;
            }

            proc_control_node_B.memspace_j = (qrmanager->mrows - 1) *
              qrmanager->ldq + 1;
            proc_control_node_B.iyend = 1;
            while (((proc_control_node_B.iy_g > 0) && (proc_control_node_B.iyend
                     <= proc_control_node_B.memspace_j)) ||
                   ((proc_control_node_B.iy_g < 0) && (proc_control_node_B.iyend
                     >= proc_control_node_B.memspace_j))) {
              proc_control_node_B.b_ix = proc_control_node_B.workingIdx;
              proc_control_node_B.normDelta = 0.0;
              proc_control_node_B.j_pj = (proc_control_node_B.iyend +
                qrmanager->mrows) - 1;
              proc_control_node_B.ia_ib = proc_control_node_B.iyend;
              while (proc_control_node_B.ia_ib <= proc_control_node_B.j_pj) {
                proc_control_node_B.normDelta += qrmanager->
                  Q.data[proc_control_node_B.ia_ib - 1] *
                  workingset->ATwset.data[proc_control_node_B.b_ix];
                proc_control_node_B.b_ix++;
                proc_control_node_B.ia_ib++;
              }

              qrmanager->QR.data[proc_control_node_B.iQR0] +=
                proc_control_node_B.normDelta;
              proc_control_node_B.iQR0++;
              proc_control_node_B.iyend += proc_control_node_B.iy_g;
            }
          }

          qrmanager->ncols++;
          qrmanager->jpvt.data[qrmanager->ncols - 1] = qrmanager->ncols;
          proc_control_node_B.workingIdx = qrmanager->mrows - 2;
          while (proc_control_node_B.workingIdx + 2 > qrmanager->ncols) {
            proc_control_node_B.iQR0 = proc_control_node_B.workingIdx +
              (qrmanager->ncols - 1) * qrmanager->ldq;
            proc_control_node_B.temp_e = qrmanager->
              QR.data[proc_control_node_B.iQR0];
            proc_control_node_B.i = qrmanager->QR.data[proc_control_node_B.iQR0
              + 1];
            proc_control_node_xrotg(&proc_control_node_B.temp_e,
              &proc_control_node_B.i, &proc_control_node_B.normDelta,
              &proc_control_node_B.s_l);
            qrmanager->QR.data[proc_control_node_B.iQR0] =
              proc_control_node_B.temp_e;
            qrmanager->QR.data[proc_control_node_B.iQR0 + 1] =
              proc_control_node_B.i;
            proc_control_node_B.iyend = qrmanager->ldq *
              proc_control_node_B.workingIdx;
            if (qrmanager->mrows >= 1) {
              proc_control_node_B.iQR0 = proc_control_node_B.iyend;
              proc_control_node_B.iy_g = qrmanager->ldq +
                proc_control_node_B.iyend;
              proc_control_node_B.memspace_j = 0;
              while (proc_control_node_B.memspace_j <= qrmanager->mrows - 1) {
                proc_control_node_B.temp_e = qrmanager->
                  Q.data[proc_control_node_B.iQR0] *
                  proc_control_node_B.normDelta + qrmanager->
                  Q.data[proc_control_node_B.iy_g] * proc_control_node_B.s_l;
                qrmanager->Q.data[proc_control_node_B.iy_g] = qrmanager->
                  Q.data[proc_control_node_B.iy_g] *
                  proc_control_node_B.normDelta - qrmanager->
                  Q.data[proc_control_node_B.iQR0] * proc_control_node_B.s_l;
                qrmanager->Q.data[proc_control_node_B.iQR0] =
                  proc_control_node_B.temp_e;
                proc_control_node_B.iy_g++;
                proc_control_node_B.iQR0++;
                proc_control_node_B.memspace_j++;
              }
            }

            proc_control_node_B.workingIdx--;
          }
          break;

         case -1:
          proc_control_n_deleteColMoveEnd(qrmanager,
            proc_control_node_B.globalActiveConstrIdx);
          break;

         default:
          proc_control_node_factorQR_h(qrmanager, workingset->ATwset.data,
            proc_control_node_B.nVar_ch, workingset->nActiveConstr,
            workingset->ldA);
          proc_control_node_computeQ_(qrmanager, qrmanager->mrows);
          break;
        }

        proc_control_nod_compute_deltax(H, solution, memspace, qrmanager,
          cholmanager, objective, proc_control_node_strcmp(options_SolverName));
        if (solution->state != -5) {
          exitg1 = 1;
        } else {
          proc_control_node_B.normDelta = proc_control_node_xnrm2_m
            (proc_control_node_B.nVar_ch, solution->searchDir.data);
          guard11 = true;
        }
      } else {
        proc_control_node_B.workingIdx = solution->searchDir.size;
        proc_control_node_B.iQR0 = solution->searchDir.size;
        if (0 <= proc_control_node_B.iQR0 - 1) {
          memcpy(&proc_control_node_B.y_data_dy[0], &solution->searchDir.data[0],
                 proc_control_node_B.iQR0 * sizeof(real_T));
        }

        proc_control_node_B.iyend = 0;
        while (proc_control_node_B.iyend <= proc_control_node_B.nVar_ch - 1) {
          proc_control_node_B.y_data_dy[proc_control_node_B.iyend] = 0.0;
          proc_control_node_B.iyend++;
        }

        if (0 <= proc_control_node_B.workingIdx - 1) {
          memcpy(&solution->searchDir.data[0], &proc_control_node_B.y_data_dy[0],
                 proc_control_node_B.workingIdx * sizeof(real_T));
        }

        proc_control_node_B.normDelta = 0.0;
        guard11 = true;
      }

      if (guard11) {
        if ((!subProblemChanged) || (proc_control_node_B.normDelta <
             options_StepTolerance) || (workingset->nActiveConstr >=
             proc_control_node_B.nVar_ch)) {
          proc_control_node_B.c_size_b[0] = memspace->workspace_double.size[0];
          proc_control_node_B.c_size_b[1] = memspace->workspace_double.size[1];
          proc_control_node_B.iyend = memspace->workspace_double.size[0] *
            memspace->workspace_double.size[1];
          if (0 <= proc_control_node_B.iyend - 1) {
            memcpy(&proc_control_node_B.c_data[0],
                   &memspace->workspace_double.data[0],
                   proc_control_node_B.iyend * sizeof(real_T));
          }

          if (qrmanager->ncols > 0) {
            guard1 = false;
            if (objective->objtype != 4) {
              proc_control_node_B.normDelta = 100.0 * static_cast<real_T>
                (qrmanager->mrows) * 2.2204460492503131E-16;
              updateFval = ((qrmanager->mrows > 0) && (qrmanager->ncols > 0));
              if (updateFval) {
                proc_control_node_B.iyend = qrmanager->ncols;
                guard2 = false;
                if (qrmanager->mrows < qrmanager->ncols) {
                  proc_control_node_B.workingIdx = (qrmanager->ncols - 1) *
                    qrmanager->ldq + qrmanager->mrows;
                  while ((proc_control_node_B.iyend > qrmanager->mrows) && (fabs
                          (qrmanager->QR.data[proc_control_node_B.workingIdx - 1])
                          >= proc_control_node_B.normDelta)) {
                    proc_control_node_B.iyend--;
                    proc_control_node_B.workingIdx -= qrmanager->ldq;
                  }

                  updateFval = (proc_control_node_B.iyend == qrmanager->mrows);
                  if (!updateFval) {
                  } else {
                    guard2 = true;
                  }
                } else {
                  guard2 = true;
                }

                if (guard2) {
                  proc_control_node_B.workingIdx = (proc_control_node_B.iyend -
                    1) * qrmanager->ldq + proc_control_node_B.iyend;
                  while ((proc_control_node_B.iyend >= 1) && (fabs
                          (qrmanager->QR.data[proc_control_node_B.workingIdx - 1])
                          >= proc_control_node_B.normDelta)) {
                    proc_control_node_B.iyend--;
                    proc_control_node_B.workingIdx =
                      (proc_control_node_B.workingIdx - qrmanager->ldq) - 1;
                  }

                  updateFval = (proc_control_node_B.iyend == 0);
                }
              }

              if (!updateFval) {
                solution->state = -7;
              } else {
                guard1 = true;
              }
            } else {
              guard1 = true;
            }

            if (guard1) {
              proc_control_node_B.c_size_b[0] = memspace->workspace_double.size
                [0];
              proc_control_node_B.c_size_b[1] = memspace->workspace_double.size
                [1];
              proc_control_node_B.iyend = memspace->workspace_double.size[0] *
                memspace->workspace_double.size[1];
              if (0 <= proc_control_node_B.iyend - 1) {
                memcpy(&proc_control_node_B.c_data[0],
                       &memspace->workspace_double.data[0],
                       proc_control_node_B.iyend * sizeof(real_T));
              }

              proc_control_node_xgemv_mtm(qrmanager->mrows, qrmanager->ncols,
                qrmanager->Q.data, qrmanager->ldq, objective->grad.data,
                proc_control_node_B.c_data);
              proc_control_node_xtrsv(qrmanager->ncols, qrmanager->QR.data,
                qrmanager->ldq, proc_control_node_B.c_data);
              proc_control_node_B.iyend = 0;
              while (proc_control_node_B.iyend <= qrmanager->ncols - 1) {
                solution->lambda.data[proc_control_node_B.iyend] =
                  -proc_control_node_B.c_data[proc_control_node_B.iyend];
                proc_control_node_B.iyend++;
              }
            }
          }

          memspace->workspace_double.size[0] = proc_control_node_B.c_size_b[0];
          memspace->workspace_double.size[1] = proc_control_node_B.c_size_b[1];
          proc_control_node_B.iQR0 = proc_control_node_B.c_size_b[0] *
            proc_control_node_B.c_size_b[1];
          if (0 <= proc_control_node_B.iQR0 - 1) {
            memcpy(&memspace->workspace_double.data[0],
                   &proc_control_node_B.c_data[0], proc_control_node_B.iQR0 *
                   sizeof(real_T));
          }

          if ((solution->state != -7) || (workingset->nActiveConstr >
               proc_control_node_B.nVar_ch)) {
            proc_control_node_B.iyend = 0;
            proc_control_node_B.normDelta = 0.0;
            proc_control_node_B.workingIdx = workingset->nWConstr[0] +
              workingset->nWConstr[1];
            while (proc_control_node_B.workingIdx + 1 <=
                   workingset->nActiveConstr) {
              if (solution->lambda.data[proc_control_node_B.workingIdx] <
                  proc_control_node_B.normDelta) {
                proc_control_node_B.normDelta = solution->
                  lambda.data[proc_control_node_B.workingIdx];
                proc_control_node_B.iyend = proc_control_node_B.workingIdx + 1;
              }

              proc_control_node_B.workingIdx++;
            }

            if (proc_control_node_B.iyend == 0) {
              solution->state = 1;
            } else {
              proc_control_node_B.activeSetChangeID = -1;
              proc_control_node_B.globalActiveConstrIdx =
                proc_control_node_B.iyend;
              subProblemChanged = true;
              proc_control_node_removeConstr(workingset,
                proc_control_node_B.iyend);
              solution->lambda.data[proc_control_node_B.iyend - 1] = 0.0;
            }
          } else {
            proc_control_node_B.iyend = workingset->nActiveConstr;
            proc_control_node_B.activeSetChangeID = 0;
            proc_control_node_B.globalActiveConstrIdx =
              workingset->nActiveConstr;
            subProblemChanged = true;
            proc_control_node_removeConstr(workingset, workingset->nActiveConstr);
            solution->lambda.data[proc_control_node_B.iyend - 1] = 0.0;
          }

          updateFval = false;
        } else {
          proc_control_node_B.iyend = memspace->workspace_double.size[0] *
            memspace->workspace_double.size[1];
          for (proc_control_node_B.workingIdx = 0;
               proc_control_node_B.workingIdx < proc_control_node_B.iyend;
               proc_control_node_B.workingIdx++) {
          }

          proc_control__feasibleratiotest(solution->xstar.data,
            solution->searchDir.data, memspace->workspace_double.data,
            memspace->workspace_double.size, workingset->nVar, workingset->ldA,
            workingset->Aineq.data, workingset->bineq.data, workingset->lb.data,
            workingset->indexLB.data, workingset->sizes, workingset->isActiveIdx,
            workingset->isActiveConstr.data, workingset->nWConstr,
            proc_control_node_B.TYPE == 5, &proc_control_node_B.normDelta,
            &updateFval, &proc_control_node_B.iyend,
            &proc_control_node_B.workingIdx);
          if (updateFval) {
            switch (proc_control_node_B.iyend) {
             case 3:
              proc_control_nod_addAineqConstr(workingset,
                proc_control_node_B.workingIdx);
              break;

             case 4:
              proc_addBoundToActiveSetMatrix_(workingset, 4,
                proc_control_node_B.workingIdx);
              break;

             default:
              proc_addBoundToActiveSetMatrix_(workingset, 5,
                proc_control_node_B.workingIdx);
              break;
            }

            proc_control_node_B.activeSetChangeID = 1;
          } else {
            proc_c_checkUnboundedOrIllPosed(solution, objective);
            subProblemChanged = false;
            if (workingset->nActiveConstr == 0) {
              solution->state = 1;
            }
          }

          if ((proc_control_node_B.nVar_ch >= 1) &&
              (!(proc_control_node_B.normDelta == 0.0))) {
            proc_control_node_B.iyend = 0;
            while (proc_control_node_B.iyend <= proc_control_node_B.nVar_ch - 1)
            {
              solution->xstar.data[proc_control_node_B.iyend] +=
                proc_control_node_B.normDelta * solution->
                searchDir.data[proc_control_node_B.iyend];
              proc_control_node_B.iyend++;
            }
          }

          proc_contro_computeGrad_StoreHx(objective, H, f_data,
            solution->xstar.data);
          updateFval = true;
        }

        proc_checkStoppingAndUpdateFval(&proc_control_node_B.activeSetChangeID,
          f_data, solution, memspace, objective, workingset, qrmanager,
          options_ObjectiveLimit, runTimeOptions_MaxIterations, updateFval);
      }
    } else {
      if (!updateFval) {
        proc_control_node_B.iyend = memspace->workspace_double.size[0] *
          memspace->workspace_double.size[1];
        for (proc_control_node_B.workingIdx = 0; proc_control_node_B.workingIdx <
             proc_control_node_B.iyend; proc_control_node_B.workingIdx++) {
        }

        solution->fstar = proc_contro_computeFval_ReuseHx(objective,
          memspace->workspace_double.data, f_data, solution->xstar.data);
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_linearForm_(boolean_T
  obj_hasLinear, int32_T obj_nvar, real_T workspace_data[], const real_T H[21609],
  const real_T f_data[], const real_T x_data[])
{
  int32_T b;
  int32_T b_c;
  int32_T ia;
  int32_T iac;
  proc_control_node_B.fMultiplier = 0;
  if (obj_hasLinear) {
    while (proc_control_node_B.fMultiplier <= obj_nvar - 1) {
      workspace_data[proc_control_node_B.fMultiplier] =
        f_data[proc_control_node_B.fMultiplier];
      proc_control_node_B.fMultiplier++;
    }

    proc_control_node_B.fMultiplier = 1;
  }

  if (obj_nvar != 0) {
    if (proc_control_node_B.fMultiplier != 1) {
      while (proc_control_node_B.fMultiplier <= obj_nvar - 1) {
        workspace_data[proc_control_node_B.fMultiplier] = 0.0;
        proc_control_node_B.fMultiplier++;
      }
    }

    proc_control_node_B.fMultiplier = 0;
    b_c = (obj_nvar - 1) * obj_nvar + 1;
    iac = 1;
    while (((obj_nvar > 0) && (iac <= b_c)) || ((obj_nvar < 0) && (iac >= b_c)))
    {
      proc_control_node_B.c_ck = 0.5 * x_data[proc_control_node_B.fMultiplier];
      proc_control_node_B.iy_c = 0;
      b = (iac + obj_nvar) - 1;
      for (ia = iac; ia <= b; ia++) {
        workspace_data[proc_control_node_B.iy_c] += H[ia - 1] *
          proc_control_node_B.c_ck;
        proc_control_node_B.iy_c++;
      }

      proc_control_node_B.fMultiplier++;
      iac += obj_nvar;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_node_computeFval(const
  s_oZGbvi5mjKKebHB9aR5DoG_proc_T *obj, real_T workspace_data[], const real_T H
  [21609], const real_T f_data[], const real_T x_data[])
{
  real_T val;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    proc_control_node_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    val = 0.0;
    if (obj->nvar >= 1) {
      proc_control_node_B.idx_d = 0;
      while (proc_control_node_B.idx_d <= obj->nvar - 1) {
        val += workspace_data[proc_control_node_B.idx_d] *
          x_data[proc_control_node_B.idx_d];
        proc_control_node_B.idx_d++;
      }
    }
    break;

   default:
    proc_control_node_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    proc_control_node_B.idx_d = obj->nvar;
    while (proc_control_node_B.idx_d + 1 <= obj->maxVar - 1) {
      workspace_data[proc_control_node_B.idx_d] = 0.5 * obj->beta *
        x_data[proc_control_node_B.idx_d] + obj->rho;
      proc_control_node_B.idx_d++;
    }

    val = 0.0;
    if (obj->maxVar - 1 >= 1) {
      proc_control_node_B.idx_d = 0;
      while (proc_control_node_B.idx_d <= obj->maxVar - 2) {
        val += workspace_data[proc_control_node_B.idx_d] *
          x_data[proc_control_node_B.idx_d];
        proc_control_node_B.idx_d++;
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_phaseone(const real_T H
  [21609], const real_T f_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *cholmanager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  objective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *options, const
  s1TgE9KstXgkd2qJxO1bF4F_proc__T *runTimeOptions)
{
  boolean_T exitg1;
  proc_control_node_B.PROBTYPE_ORIG = workingset->probType;
  proc_control_node_B.nVar_tmp = workingset->nVar;
  solution->xstar.data[workingset->nVar] = solution->maxConstr + 1.0;
  if (workingset->probType == 3) {
    proc_control_node_B.mEqFixed = 1;
  } else {
    proc_control_node_B.mEqFixed = 4;
  }

  proc_control_nod_setProblemType(workingset, proc_control_node_B.mEqFixed);
  proc_contro_removeAllIneqConstr(workingset);
  objective->prev_objtype = objective->objtype;
  objective->prev_nvar = objective->nvar;
  objective->prev_hasLinear = objective->hasLinear;
  objective->objtype = 5;
  objective->nvar = proc_control_node_B.nVar_tmp + 1;
  objective->gammaScalar = 1.0;
  objective->hasLinear = true;
  options->ObjectiveLimit = 0.02;
  options->StepTolerance = 1.4901161193847657E-10;
  proc_control_node_B.mConstr = memspace->workspace_double.size[0] *
    memspace->workspace_double.size[1];
  for (proc_control_node_B.mEqFixed = 0; proc_control_node_B.mEqFixed <
       proc_control_node_B.mConstr; proc_control_node_B.mEqFixed++) {
  }

  solution->fstar = proc_control_node_computeFval(objective,
    memspace->workspace_double.data, H, f_data, solution->xstar.data);
  solution->state = 5;
  proc_control_node_iterate(H, f_data, solution, memspace, workingset, qrmanager,
    cholmanager, objective, options->SolverName, options->StepTolerance,
    options->ObjectiveLimit, runTimeOptions->MaxIterations);
  if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
       workingset->sizes[3]) - 2]) {
    proc_control_node_B.mConstr = workingset->sizes[0] + 131;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.mConstr <=
                         workingset->nActiveConstr)) {
      if ((workingset->Wid.data[proc_control_node_B.mConstr - 1] == 4) &&
          (workingset->Wlocalidx.data[proc_control_node_B.mConstr - 1] ==
           workingset->sizes[3])) {
        proc_control_node_removeConstr(workingset, proc_control_node_B.mConstr);
        exitg1 = true;
      } else {
        proc_control_node_B.mConstr++;
      }
    }
  }

  proc_control_node_B.mConstr = workingset->nActiveConstr;
  proc_control_node_B.mEqFixed = workingset->sizes[0] + 130;
  while ((proc_control_node_B.mConstr > proc_control_node_B.mEqFixed) &&
         (proc_control_node_B.mConstr > proc_control_node_B.nVar_tmp)) {
    proc_control_node_removeConstr(workingset, proc_control_node_B.mConstr);
    proc_control_node_B.mConstr--;
  }

  solution->maxConstr = solution->xstar.data[proc_control_node_B.nVar_tmp];
  proc_control_nod_setProblemType(workingset, proc_control_node_B.PROBTYPE_ORIG);
  objective->objtype = objective->prev_objtype;
  objective->nvar = objective->prev_nvar;
  objective->hasLinear = objective->prev_hasLinear;
  options->ObjectiveLimit = (rtMinusInf);
  options->StepTolerance = 1.0E-6;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_driver_i(const real_T H
  [21609], const real_T f_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *solution,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *workingset, s_2F24x1ekvOt8ZUO1knVMv_proc__T *qrmanager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *cholmanager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  objective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *options,
  s1TgE9KstXgkd2qJxO1bF4F_proc__T *runTimeOptions)
{
  boolean_T guard1 = false;
  solution->iterations = 0;
  runTimeOptions->RemainFeasible = true;
  proc_control_node_B.nVar_c = workingset->nVar - 1;
  guard1 = false;
  if (workingset->probType == 3) {
    proc_control_node_B.b_idx = 0;
    while (proc_control_node_B.b_idx <= workingset->sizes[0] - 1) {
      solution->xstar.data[workingset->indexFixed.data[proc_control_node_B.b_idx]
        - 1] = workingset->ub.data[workingset->
        indexFixed.data[proc_control_node_B.b_idx] - 1];
      proc_control_node_B.b_idx++;
    }

    proc_control_node_B.b_idx = 0;
    while (proc_control_node_B.b_idx <= workingset->sizes[3] - 1) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
           proc_control_node_B.b_idx) - 1]) {
        solution->xstar.data[workingset->indexLB.data[proc_control_node_B.b_idx]
          - 1] = -workingset->lb.data[workingset->
          indexLB.data[proc_control_node_B.b_idx] - 1];
      }

      proc_control_node_B.b_idx++;
    }

    proc_control_node_B.b_idx = 0;
    while (proc_control_node_B.b_idx <= workingset->sizes[4] - 1) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[4] +
           proc_control_node_B.b_idx) - 1]) {
        solution->xstar.data[workingset->indexUB.data[proc_control_node_B.b_idx]
          - 1] = workingset->ub.data[workingset->
          indexUB.data[proc_control_node_B.b_idx] - 1];
      }

      proc_control_node_B.b_idx++;
    }

    proc_control_PresolveWorkingSet(solution, memspace, workingset, qrmanager);
    if (solution->state < 0) {
    } else {
      guard1 = true;
    }
  } else {
    solution->state = 82;
    guard1 = true;
  }

  if (guard1) {
    solution->iterations = 0;
    proc_control_node_B.b_c5n = proc__maxConstraintViolation_du(workingset,
      solution->xstar.data);
    solution->maxConstr = proc_control_node_B.b_c5n;
    if (proc_control_node_B.b_c5n > 0.02) {
      proc_control_node_phaseone(H, f_data, solution, memspace, workingset,
        qrmanager, cholmanager, objective, options, runTimeOptions);
      if (solution->state != 0) {
        proc_control_node_B.b_c5n = proc__maxConstraintViolation_du(workingset,
          solution->xstar.data);
        solution->maxConstr = proc_control_node_B.b_c5n;
        if (proc_control_node_B.b_c5n > 0.02) {
          proc_control_node_B.nVar_c = 0;
          while (proc_control_node_B.nVar_c <= workingset->mConstrMax - 1) {
            solution->lambda.data[proc_control_node_B.nVar_c] = 0.0;
            proc_control_node_B.nVar_c++;
          }

          proc_control_node_B.nVar_c = memspace->workspace_double.size[0] *
            memspace->workspace_double.size[1];
          for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <
               proc_control_node_B.nVar_c; proc_control_node_B.b_idx++) {
          }

          solution->fstar = proc_control_node_computeFval(objective,
            memspace->workspace_double.data, H, f_data, solution->xstar.data);
          solution->state = -2;
        } else {
          if (proc_control_node_B.b_c5n > 0.0) {
            proc_control_node_B.y_size_idx_0_b = solution->searchDir.size;
            proc_control_node_B.b_idx = solution->searchDir.size;
            if (0 <= proc_control_node_B.b_idx - 1) {
              memcpy(&proc_control_node_B.y_data_d[0], &solution->
                     searchDir.data[0], proc_control_node_B.b_idx * sizeof
                     (real_T));
            }

            proc_control_node_B.b_idx = 0;
            while (proc_control_node_B.b_idx <= proc_control_node_B.nVar_c) {
              proc_control_node_B.y_data_d[proc_control_node_B.b_idx] =
                solution->xstar.data[proc_control_node_B.b_idx];
              proc_control_node_B.b_idx++;
            }

            if (0 <= proc_control_node_B.y_size_idx_0_b - 1) {
              memcpy(&solution->searchDir.data[0],
                     &proc_control_node_B.y_data_d[0],
                     proc_control_node_B.y_size_idx_0_b * sizeof(real_T));
            }

            proc_control_PresolveWorkingSet(solution, memspace, workingset,
              qrmanager);
            proc_control_node_B.b_c5n = proc__maxConstraintViolation_du
              (workingset, solution->xstar.data);
            if (proc_control_node_B.b_c5n >= solution->maxConstr) {
              solution->maxConstr = proc_control_node_B.b_c5n;
              proc_control_node_B.y_size_idx_0_b = solution->xstar.size;
              proc_control_node_B.b_idx = solution->xstar.size;
              if (0 <= proc_control_node_B.b_idx - 1) {
                memcpy(&proc_control_node_B.y_data_d[0], &solution->xstar.data[0],
                       proc_control_node_B.b_idx * sizeof(real_T));
              }

              proc_control_node_B.b_idx = 0;
              while (proc_control_node_B.b_idx <= proc_control_node_B.nVar_c) {
                proc_control_node_B.y_data_d[proc_control_node_B.b_idx] =
                  solution->searchDir.data[proc_control_node_B.b_idx];
                proc_control_node_B.b_idx++;
              }

              if (0 <= proc_control_node_B.y_size_idx_0_b - 1) {
                memcpy(&solution->xstar.data[0], &proc_control_node_B.y_data_d[0],
                       proc_control_node_B.y_size_idx_0_b * sizeof(real_T));
              }
            }
          }

          proc_control_node_iterate(H, f_data, solution, memspace, workingset,
            qrmanager, cholmanager, objective, options->SolverName,
            options->StepTolerance, options->ObjectiveLimit,
            runTimeOptions->MaxIterations);
        }
      }
    } else {
      proc_control_node_iterate(H, f_data, solution, memspace, workingset,
        qrmanager, cholmanager, objective, options->SolverName,
        options->StepTolerance, options->ObjectiveLimit,
        runTimeOptions->MaxIterations);
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_addAeqConstr
  (s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *obj, int32_T idx_local)
{
  int32_T b_idx;
  int32_T iAeq0;
  int32_T iAw0;
  int32_T totalEq;
  totalEq = obj->nWConstr[0] + obj->nWConstr[1];
  if ((obj->nActiveConstr == totalEq) && (idx_local > obj->nWConstr[1])) {
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->nActiveConstr++;
    obj->Wid.data[obj->nActiveConstr - 1] = 2;
    obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
    for (totalEq = 1; totalEq - 1 < obj->nVar; totalEq++) {
      obj->ATwset.data[(iAw0 + totalEq) - 1] = obj->Aeq.data[(iAeq0 + totalEq) -
        1];
    }

    obj->bwset.data[obj->nActiveConstr - 1] = obj->beq[idx_local - 1];
  } else {
    obj->nActiveConstr++;
    iAeq0 = obj->nActiveConstr - 1;
    obj->Wid.data[obj->nActiveConstr - 1] = obj->Wid.data[totalEq];
    obj->Wlocalidx.data[iAeq0] = obj->Wlocalidx.data[totalEq];
    for (iAw0 = 0; iAw0 < obj->nVar; iAw0++) {
      obj->ATwset.data[iAw0 + obj->ldA * iAeq0] = obj->ATwset.data[obj->ldA *
        totalEq + iAw0];
    }

    obj->bwset.data[iAeq0] = obj->bwset.data[totalEq];
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->Wid.data[totalEq] = 2;
    obj->Wlocalidx.data[totalEq] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = obj->ldA * totalEq;
    for (b_idx = 1; b_idx - 1 < obj->nVar; b_idx++) {
      obj->ATwset.data[(iAw0 + b_idx) - 1] = obj->Aeq.data[(iAeq0 + b_idx) - 1];
    }

    obj->bwset.data[totalEq] = obj->beq[idx_local - 1];
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_soc(const real_T
  Hessian[21609], const real_T grad_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T
  *TrialState, s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace,
  s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet, s_2F24x1ekvOt8ZUO1knVMv_proc__T
  *QRManager, s_TNXzMnREVvDmNpLFpsTLBC_proc_T *CholManager,
  s_oZGbvi5mjKKebHB9aR5DoG_proc_T *QPObjective, const
  s1TgE9KstXgkd2qJxO1bF4F_proc__T *qpoptions)
{
  boolean_T success;
  proc_control_node_B.nWIneq_old = WorkingSet->nWConstr[2];
  proc_control_node_B.nWLower_old = WorkingSet->nWConstr[3];
  proc_control_node_B.nWUpper_old = WorkingSet->nWConstr[4];
  proc_control_node_B.nVar_h = WorkingSet->nVar - 1;
  proc_control_node_B.mConstrMax_d = WorkingSet->mConstrMax - 1;
  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_h) {
    TrialState->xstarsqp[proc_control_node_B.idx_Aineq] =
      TrialState->xstarsqp_old[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_h) {
    TrialState->socDirection.data[proc_control_node_B.idx_Aineq] =
      TrialState->xstar.data[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.mConstrMax_d) {
    TrialState->lambdaStopTest.data[proc_control_node_B.idx_Aineq] =
      TrialState->lambda.data[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  for (proc_control_node_B.idx_Aineq = 0; proc_control_node_B.idx_Aineq < 130;
       proc_control_node_B.idx_Aineq++) {
    WorkingSet->beq[proc_control_node_B.idx_Aineq] = -TrialState->
      cEq[proc_control_node_B.idx_Aineq];
  }

  proc_control_node_B.idx_Aineq_tmp = WorkingSet->ldA;
  proc_control_node_B.iy_o = 0;
  proc_control_node_B.idx_upper = WorkingSet->ldA * 129 + 1;
  proc_control_node_B.iac_k = 1;
  while (((proc_control_node_B.idx_Aineq_tmp > 0) && (proc_control_node_B.iac_k <=
           proc_control_node_B.idx_upper)) ||
         ((proc_control_node_B.idx_Aineq_tmp < 0) && (proc_control_node_B.iac_k >=
           proc_control_node_B.idx_upper))) {
    proc_control_node_B.idx_Partition = 0;
    proc_control_node_B.oldDirIdx = 0.0;
    proc_control_node_B.idx_Aineq = (proc_control_node_B.iac_k +
      WorkingSet->nVar) - 1;
    proc_control_node_B.b_ia_k = proc_control_node_B.iac_k;
    while (proc_control_node_B.b_ia_k <= proc_control_node_B.idx_Aineq) {
      proc_control_node_B.oldDirIdx += WorkingSet->
        Aeq.data[proc_control_node_B.b_ia_k - 1] * TrialState->
        searchDir.data[proc_control_node_B.idx_Partition];
      proc_control_node_B.idx_Partition++;
      proc_control_node_B.b_ia_k++;
    }

    WorkingSet->beq[proc_control_node_B.iy_o] += proc_control_node_B.oldDirIdx;
    proc_control_node_B.iy_o++;
    proc_control_node_B.iac_k += proc_control_node_B.idx_Aineq_tmp;
  }

  for (proc_control_node_B.idx_Aineq = 0; proc_control_node_B.idx_Aineq < 130;
       proc_control_node_B.idx_Aineq++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + proc_control_node_B.idx_Aineq]
      = WorkingSet->beq[proc_control_node_B.idx_Aineq];
  }

  if (WorkingSet->sizes[2] > 0) {
    proc_control_node_B.idx_Aineq = 0;
    while (proc_control_node_B.idx_Aineq <= WorkingSet->sizes[2] - 1) {
      WorkingSet->bineq.data[proc_control_node_B.idx_Aineq] =
        -TrialState->cIneq.data[proc_control_node_B.idx_Aineq];
      proc_control_node_B.idx_Aineq++;
    }

    proc_control_node_B.idx_Aineq_tmp = WorkingSet->ldA;
    proc_control_node_B.iy_o = 0;
    proc_control_node_B.idx_upper = (WorkingSet->sizes[2] - 1) * WorkingSet->ldA
      + 1;
    proc_control_node_B.iac_k = 1;
    while (((proc_control_node_B.idx_Aineq_tmp > 0) &&
            (proc_control_node_B.iac_k <= proc_control_node_B.idx_upper)) ||
           ((proc_control_node_B.idx_Aineq_tmp < 0) &&
            (proc_control_node_B.iac_k >= proc_control_node_B.idx_upper))) {
      proc_control_node_B.idx_Partition = 0;
      proc_control_node_B.oldDirIdx = 0.0;
      proc_control_node_B.idx_Aineq = (proc_control_node_B.iac_k +
        WorkingSet->nVar) - 1;
      proc_control_node_B.b_ia_k = proc_control_node_B.iac_k;
      while (proc_control_node_B.b_ia_k <= proc_control_node_B.idx_Aineq) {
        proc_control_node_B.oldDirIdx += WorkingSet->
          Aineq.data[proc_control_node_B.b_ia_k - 1] *
          TrialState->searchDir.data[proc_control_node_B.idx_Partition];
        proc_control_node_B.idx_Partition++;
        proc_control_node_B.b_ia_k++;
      }

      WorkingSet->bineq.data[proc_control_node_B.iy_o] +=
        proc_control_node_B.oldDirIdx;
      proc_control_node_B.iy_o++;
      proc_control_node_B.iac_k += proc_control_node_B.idx_Aineq_tmp;
    }

    proc_control_node_B.idx_Aineq = 1;
    proc_control_node_B.iy_o = WorkingSet->sizes[2] + 1;
    proc_control_node_B.idx_upper = (WorkingSet->sizes[2] + WorkingSet->sizes[3])
      + 1;
    proc_control_node_B.iac_k = WorkingSet->isActiveIdx[2] - 1;
    while (proc_control_node_B.iac_k + 1 <= WorkingSet->nActiveConstr) {
      switch (WorkingSet->Wid.data[proc_control_node_B.iac_k]) {
       case 3:
        proc_control_node_B.idx_Partition = proc_control_node_B.idx_Aineq;
        proc_control_node_B.idx_Aineq++;
        WorkingSet->bwset.data[proc_control_node_B.iac_k] =
          WorkingSet->bineq.data[WorkingSet->
          Wlocalidx.data[proc_control_node_B.iac_k] - 1];
        break;

       case 4:
        proc_control_node_B.idx_Partition = proc_control_node_B.iy_o;
        proc_control_node_B.iy_o++;
        break;

       default:
        proc_control_node_B.idx_Partition = proc_control_node_B.idx_upper;
        proc_control_node_B.idx_upper++;
        break;
      }

      TrialState->workingset_old.data[proc_control_node_B.idx_Partition - 1] =
        WorkingSet->Wlocalidx.data[proc_control_node_B.iac_k];
      proc_control_node_B.iac_k++;
    }
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_h) {
    TrialState->xstar.data[proc_control_node_B.idx_Aineq] = TrialState->
      xstarsqp[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  proc_control_node_B.qpoptions_l = *qpoptions;
  proc_control_node_B.qpoptions_k = *qpoptions;
  proc_control_node_driver_i(Hessian, grad_data, TrialState, memspace,
    WorkingSet, QRManager, CholManager, QPObjective,
    &proc_control_node_B.qpoptions_l, &proc_control_node_B.qpoptions_k);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_node_addAeqConstr(WorkingSet, WorkingSet->
      indexEqRemoved[WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_h) {
    proc_control_node_B.oldDirIdx = TrialState->
      socDirection.data[proc_control_node_B.idx_Aineq];
    TrialState->socDirection.data[proc_control_node_B.idx_Aineq] =
      TrialState->xstar.data[proc_control_node_B.idx_Aineq] -
      TrialState->socDirection.data[proc_control_node_B.idx_Aineq];
    TrialState->xstar.data[proc_control_node_B.idx_Aineq] =
      proc_control_node_B.oldDirIdx;
    proc_control_node_B.idx_Aineq++;
  }

  success = (proc_control_node_xnrm2_m(proc_control_node_B.nVar_h + 1,
              TrialState->socDirection.data) <= proc_control_node_xnrm2_m
             (proc_control_node_B.nVar_h + 1, TrialState->xstar.data) * 2.0);
  proc_control_node_B.idx_Aineq = WorkingSet->sizes[2];
  proc_control_node_B.iy_o = WorkingSet->sizes[3];
  for (proc_control_node_B.nVar_h = 0; proc_control_node_B.nVar_h < 130;
       proc_control_node_B.nVar_h++) {
    WorkingSet->beq[proc_control_node_B.nVar_h] = -TrialState->
      cEq[proc_control_node_B.nVar_h];
  }

  for (proc_control_node_B.nVar_h = 0; proc_control_node_B.nVar_h < 130;
       proc_control_node_B.nVar_h++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + proc_control_node_B.nVar_h] =
      WorkingSet->beq[proc_control_node_B.nVar_h];
  }

  if (WorkingSet->sizes[2] > 0) {
    proc_control_node_B.nVar_h = 0;
    while (proc_control_node_B.nVar_h <= proc_control_node_B.idx_Aineq - 1) {
      WorkingSet->bineq.data[proc_control_node_B.nVar_h] =
        -TrialState->cIneq.data[proc_control_node_B.nVar_h];
      proc_control_node_B.nVar_h++;
    }

    if (!success) {
      proc_contro_removeAllIneqConstr(WorkingSet);
      proc_control_node_B.nVar_h = 0;
      while (proc_control_node_B.nVar_h <= proc_control_node_B.nWIneq_old - 1) {
        proc_control_nod_addAineqConstr(WorkingSet,
          TrialState->workingset_old.data[proc_control_node_B.nVar_h]);
        proc_control_node_B.nVar_h++;
      }

      proc_control_node_B.nWIneq_old = 0;
      while (proc_control_node_B.nWIneq_old <= proc_control_node_B.nWLower_old -
             1) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 4,
          TrialState->workingset_old.data[proc_control_node_B.nWIneq_old +
          proc_control_node_B.idx_Aineq]);
        proc_control_node_B.nWIneq_old++;
      }

      proc_control_node_B.nWLower_old = 0;
      while (proc_control_node_B.nWLower_old <= proc_control_node_B.nWUpper_old
             - 1) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 5,
          TrialState->workingset_old.data[(proc_control_node_B.nWLower_old +
          proc_control_node_B.idx_Aineq) + proc_control_node_B.iy_o]);
        proc_control_node_B.nWLower_old++;
      }
    }
  }

  if (!success) {
    proc_control_node_B.nWUpper_old = 0;
    while (proc_control_node_B.nWUpper_old <= proc_control_node_B.mConstrMax_d)
    {
      TrialState->lambda.data[proc_control_node_B.nWUpper_old] =
        TrialState->lambdaStopTest.data[proc_control_node_B.nWUpper_old];
      proc_control_node_B.nWUpper_old++;
    }
  } else {
    proc_control_node_B.mConstrMax_d = memspace->workspace_double.size[0] *
      memspace->workspace_double.size[1];
    for (proc_control_node_B.idx_Aineq = 0; proc_control_node_B.idx_Aineq <
         proc_control_node_B.mConstrMax_d; proc_control_node_B.idx_Aineq++) {
    }

    proc_control_node_sortLambdaQP(TrialState->lambda.data,
      WorkingSet->nActiveConstr, WorkingSet->sizes, WorkingSet->isActiveIdx,
      WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
      memspace->workspace_double.data);
  }

  return success;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_normal(const real_T Hessian
  [21609], const real_T grad_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *WorkingSet, s_2F24x1ekvOt8ZUO1knVMv_proc__T *QRManager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *CholManager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  QPObjective, const s1TgE9KstXgkd2qJxO1bF4F_proc__T *qpoptions)
{
  boolean_T nonlinEqRemoved;
  proc_control_node_B.qpoptions_i = *qpoptions;
  proc_control_node_B.qpoptions_h = *qpoptions;
  proc_control_node_driver_i(Hessian, grad_data, TrialState, memspace,
    WorkingSet, QRManager, CholManager, QPObjective,
    &proc_control_node_B.qpoptions_i, &proc_control_node_B.qpoptions_h);
  if (TrialState->state > 0) {
    proc_control_node_B.penaltyParamTrial = MeritFunction->penaltyParam;
    proc_control_node_B.constrViolationEq = 0.0;
    for (proc_control_node_B.k_l = 0; proc_control_node_B.k_l < 130;
         proc_control_node_B.k_l++) {
      proc_control_node_B.constrViolationEq += fabs(TrialState->
        cEq[proc_control_node_B.k_l]);
    }

    proc_control_node_B.constrViolationIneq = 0.0;
    proc_control_node_B.k_l = 0;
    while (proc_control_node_B.k_l <= WorkingSet->sizes[2] - 1) {
      if (TrialState->cIneq.data[proc_control_node_B.k_l] > 0.0) {
        proc_control_node_B.constrViolationIneq += TrialState->
          cIneq.data[proc_control_node_B.k_l];
      }

      proc_control_node_B.k_l++;
    }

    proc_control_node_B.constrViolationEq +=
      proc_control_node_B.constrViolationIneq;
    proc_control_node_B.constrViolationIneq =
      MeritFunction->linearizedConstrViol;
    MeritFunction->linearizedConstrViol = 0.0;
    proc_control_node_B.constrViolationIneq +=
      proc_control_node_B.constrViolationEq;
    if ((proc_control_node_B.constrViolationIneq > 2.2204460492503131E-16) &&
        (TrialState->fstar > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        proc_control_node_B.penaltyParamTrial = 1.0;
      } else {
        proc_control_node_B.penaltyParamTrial = 1.5;
      }

      proc_control_node_B.penaltyParamTrial =
        proc_control_node_B.penaltyParamTrial * TrialState->fstar /
        proc_control_node_B.constrViolationIneq;
    }

    if (proc_control_node_B.penaltyParamTrial < MeritFunction->penaltyParam) {
      MeritFunction->phi = proc_control_node_B.penaltyParamTrial *
        proc_control_node_B.constrViolationEq + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) *
           proc_control_node_B.penaltyParamTrial + MeritFunction->initFval) -
          MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        if (proc_control_node_B.penaltyParamTrial > 1.0E-10) {
          MeritFunction->penaltyParam = proc_control_node_B.penaltyParamTrial;
        } else {
          MeritFunction->penaltyParam = 1.0E-10;
        }
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam *
          proc_control_node_B.constrViolationEq + TrialState->sqpFval;
      }
    } else {
      if (!(proc_control_node_B.penaltyParamTrial > 1.0E-10)) {
        proc_control_node_B.penaltyParamTrial = 1.0E-10;
      }

      MeritFunction->penaltyParam = proc_control_node_B.penaltyParamTrial;
      MeritFunction->phi = proc_control_node_B.penaltyParamTrial *
        proc_control_node_B.constrViolationEq + TrialState->sqpFval;
    }

    proc_control_node_B.constrViolationEq = TrialState->fstar -
      MeritFunction->penaltyParam * proc_control_node_B.constrViolationEq;
    if (proc_control_node_B.constrViolationEq < 0.0) {
      MeritFunction->phiPrimePlus = proc_control_node_B.constrViolationEq;
    } else {
      MeritFunction->phiPrimePlus = 0.0;
    }
  }

  proc_control_node_B.k_l = memspace->workspace_double.size[0] *
    memspace->workspace_double.size[1];
  for (proc_control_node_B.i46 = 0; proc_control_node_B.i46 <
       proc_control_node_B.k_l; proc_control_node_B.i46++) {
  }

  proc_control_node_sortLambdaQP(TrialState->lambda.data,
    WorkingSet->nActiveConstr, WorkingSet->sizes, WorkingSet->isActiveIdx,
    WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
    memspace->workspace_double.data);
  nonlinEqRemoved = (WorkingSet->mEqRemoved > 0);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_node_addAeqConstr(WorkingSet, WorkingSet->
      indexEqRemoved[WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  if (nonlinEqRemoved) {
    for (proc_control_node_B.k_l = 0; proc_control_node_B.k_l < 130;
         proc_control_node_B.k_l++) {
      WorkingSet->Wlocalidx.data[WorkingSet->sizes[0] + proc_control_node_B.k_l]
        = proc_control_node_B.k_l + 1;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_relaxed(const real_T
  Hessian[21609], const real_T grad_data[], s_UjlJWoQEHmSUKFcPTad7eC_proc_T
  *TrialState, sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T
  *WorkingSet, s_2F24x1ekvOt8ZUO1knVMv_proc__T *QRManager,
  s_TNXzMnREVvDmNpLFpsTLBC_proc_T *CholManager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *
  QPObjective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *qpoptions)
{
  boolean_T b_tf;
  boolean_T tf;
  proc_control_node_B.nVarOrig = WorkingSet->nVar;
  proc_control_node_B.nVarMax = WorkingSet->nVarMax;
  proc_control_node_B.mIneq_a = WorkingSet->sizes[2];
  proc_control_node_B.beta = 0.0;
  proc_control_node_B.temp_h = 0;
  while (proc_control_node_B.temp_h <= proc_control_node_B.nVarOrig - 1) {
    proc_control_node_B.beta += Hessian[147 * proc_control_node_B.temp_h +
      proc_control_node_B.temp_h];
    proc_control_node_B.temp_h++;
  }

  proc_control_node_B.beta /= static_cast<real_T>(WorkingSet->nVar);
  if (TrialState->sqpIterations <= 1) {
    proc_control_node_B.qpfvalLinearExcess = fabs
      (grad_data[proc_control_node_ixamax(QPObjective->nvar, grad_data) - 1]);
    if ((1.0 > proc_control_node_B.qpfvalLinearExcess) || rtIsNaN
        (proc_control_node_B.qpfvalLinearExcess)) {
      proc_control_node_B.qpfvalLinearExcess = 1.0;
    }

    proc_control_node_B.rho = 100.0 * proc_control_node_B.qpfvalLinearExcess;
  } else {
    proc_control_node_B.rho = fabs(TrialState->
      lambdasqp.data[proc_control_node_ixamax(WorkingSet->mConstr,
      TrialState->lambdasqp.data) - 1]);
  }

  QPObjective->hasLinear = true;
  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->objtype = 4;
  QPObjective->beta = proc_control_node_B.beta;
  QPObjective->rho = proc_control_node_B.rho;
  proc_control_nod_setProblemType(WorkingSet, 2);
  proc_control_node_B.b_WorkingSet = *WorkingSet;
  proc_control_node_B.b_mIneq = WorkingSet->sizes[2] - 1;
  proc_control_node_B.mLBOrig = (WorkingSet->sizes[3] - WorkingSet->sizes[2]) -
    259;
  proc_control_node_B.temp_h = 0;
  while (proc_control_node_B.temp_h <= proc_control_node_B.b_mIneq) {
    memspace->workspace_double.data[proc_control_node_B.temp_h] =
      WorkingSet->bineq.data[proc_control_node_B.temp_h];
    proc_control_node_B.temp_h++;
  }

  proc_control__xgemv_mtmcjbiadz2(proc_control_node_B.nVarOrig,
    WorkingSet->sizes[2], WorkingSet->Aineq.data, WorkingSet->ldA,
    TrialState->xstar.data, memspace->workspace_double.data);
  proc_control_node_B.temp_h = 0;
  while (proc_control_node_B.temp_h <= proc_control_node_B.b_mIneq) {
    TrialState->xstar.data[proc_control_node_B.nVarOrig +
      proc_control_node_B.temp_h] = static_cast<real_T>
      (memspace->workspace_double.data[proc_control_node_B.temp_h] > 0.0) *
      memspace->workspace_double.data[proc_control_node_B.temp_h];
    proc_control_node_B.temp_h++;
  }

  memcpy(&memspace->workspace_double.data[0], &WorkingSet->beq[0], 130U * sizeof
         (real_T));
  proc_control__xgemv_mtmcjbiadz2(proc_control_node_B.nVarOrig, 130,
    WorkingSet->Aeq.data, WorkingSet->ldA, TrialState->xstar.data,
    memspace->workspace_double.data);
  for (proc_control_node_B.temp_h = 0; proc_control_node_B.temp_h < 130;
       proc_control_node_B.temp_h++) {
    proc_control_node_B.idx_positive = proc_control_node_B.b_mIneq +
      proc_control_node_B.temp_h;
    if (memspace->workspace_double.data[proc_control_node_B.temp_h] <= 0.0) {
      TrialState->xstar.data[(proc_control_node_B.nVarOrig +
        proc_control_node_B.idx_positive) + 1] = 0.0;
      TrialState->xstar.data[(proc_control_node_B.nVarOrig +
        proc_control_node_B.idx_positive) + 131] =
        -memspace->workspace_double.data[proc_control_node_B.temp_h];
      proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
        (proc_control_node_B.mLBOrig + proc_control_node_B.idx_positive) + 1);
      if (memspace->workspace_double.data[proc_control_node_B.temp_h] >= -0.02)
      {
        proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
          (proc_control_node_B.mLBOrig + proc_control_node_B.idx_positive) + 131);
      }
    } else {
      proc_control_node_B.idx_negative = proc_control_node_B.nVarOrig +
        proc_control_node_B.idx_positive;
      TrialState->xstar.data[proc_control_node_B.idx_negative + 1] =
        memspace->workspace_double.data[proc_control_node_B.temp_h];
      TrialState->xstar.data[proc_control_node_B.idx_negative + 131] = 0.0;
      proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
        (proc_control_node_B.mLBOrig + proc_control_node_B.idx_positive) + 131);
      if (memspace->workspace_double.data[proc_control_node_B.temp_h] <= 0.02) {
        proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
          (proc_control_node_B.mLBOrig + proc_control_node_B.idx_positive) + 1);
      }
    }
  }

  proc_control_node_B.temp_h = qpoptions->MaxIterations;
  qpoptions->MaxIterations = (qpoptions->MaxIterations +
    proc_control_node_B.b_WorkingSet.nVar) - proc_control_node_B.nVarOrig;
  proc_control_node_B.qpoptions = *qpoptions;
  proc_control_node_B.qpoptions_d = *qpoptions;
  proc_control_node_driver_i(Hessian, grad_data, TrialState, memspace,
    &proc_control_node_B.b_WorkingSet, QRManager, CholManager, QPObjective,
    &proc_control_node_B.qpoptions, &proc_control_node_B.qpoptions_d);
  qpoptions->MaxIterations = proc_control_node_B.temp_h;
  proc_control_node_B.mLBOrig = proc_control_node_B.b_WorkingSet.sizes[2] - 1;
  proc_control_node_B.idx_positive = proc_control_node_B.b_WorkingSet.sizes[3] -
    261;
  proc_control_node_B.temp_h = 0;
  for (proc_control_node_B.b_mIneq = 0; proc_control_node_B.b_mIneq < 130;
       proc_control_node_B.b_mIneq++) {
    proc_control_node_B.idx_negative =
      (proc_control_node_B.b_WorkingSet.isActiveIdx[3] +
       proc_control_node_B.idx_positive) + proc_control_node_B.b_mIneq;
    tf =
      proc_control_node_B.b_WorkingSet.isActiveConstr.data[proc_control_node_B.idx_negative];
    b_tf =
      proc_control_node_B.b_WorkingSet.isActiveConstr.data[proc_control_node_B.idx_negative
      + 130];
    memspace->workspace_int.data[proc_control_node_B.b_mIneq] = tf;
    memspace->workspace_int.data[proc_control_node_B.b_mIneq + 130] = b_tf;
    proc_control_node_B.temp_h = (proc_control_node_B.temp_h + tf) + b_tf;
  }

  proc_control_node_B.b_mIneq = 0;
  while (proc_control_node_B.b_mIneq <= proc_control_node_B.mLBOrig) {
    tf = proc_control_node_B.b_WorkingSet.isActiveConstr.data
      [(((proc_control_node_B.b_WorkingSet.isActiveIdx[3] +
          proc_control_node_B.idx_positive) - proc_control_node_B.mLBOrig) +
        proc_control_node_B.b_mIneq) - 1];
    memspace->workspace_int.data[proc_control_node_B.b_mIneq + 260] = tf;
    proc_control_node_B.temp_h += tf;
    proc_control_node_B.b_mIneq++;
  }

  if (TrialState->state != -6) {
    proc_control_node_B.b_mIneq = (proc_control_node_B.b_WorkingSet.nVarMax -
      proc_control_node_B.nVarOrig) - 1;
    proc_control_node_B.qpfvalLinearExcess = 0.0;
    proc_control_node_B.qpfvalQuadExcess = 0.0;
    if (proc_control_node_B.b_mIneq >= 1) {
      proc_control_node_B.mLBOrig = proc_control_node_B.nVarOrig +
        proc_control_node_B.b_mIneq;
      proc_control_node_B.idx_positive = proc_control_node_B.nVarOrig;
      while (proc_control_node_B.idx_positive + 1 <= proc_control_node_B.mLBOrig)
      {
        proc_control_node_B.qpfvalLinearExcess += fabs(TrialState->
          xstar.data[proc_control_node_B.idx_positive]);
        proc_control_node_B.idx_positive++;
      }

      proc_control_node_B.mLBOrig = proc_control_node_B.nVarOrig;
      proc_control_node_B.idx_positive = proc_control_node_B.nVarOrig;
      proc_control_node_B.idx_negative = 0;
      while (proc_control_node_B.idx_negative <= proc_control_node_B.b_mIneq - 1)
      {
        proc_control_node_B.qpfvalQuadExcess += TrialState->
          xstar.data[proc_control_node_B.mLBOrig] * TrialState->
          xstar.data[proc_control_node_B.idx_positive];
        proc_control_node_B.mLBOrig++;
        proc_control_node_B.idx_positive++;
        proc_control_node_B.idx_negative++;
      }
    }

    proc_control_node_B.beta = (TrialState->fstar - proc_control_node_B.rho *
      proc_control_node_B.qpfvalLinearExcess) - proc_control_node_B.beta / 2.0 *
      proc_control_node_B.qpfvalQuadExcess;
    proc_control_node_B.b_mIneq = (proc_control_node_B.nVarMax -
      proc_control_node_B.nVarOrig) - 1;
    proc_control_node_B.rho = MeritFunction->penaltyParam;
    proc_control_node_B.qpfvalLinearExcess = 0.0;
    for (proc_control_node_B.nVarMax = 0; proc_control_node_B.nVarMax < 130;
         proc_control_node_B.nVarMax++) {
      proc_control_node_B.qpfvalLinearExcess += fabs(TrialState->
        cEq[proc_control_node_B.nVarMax]);
    }

    proc_control_node_B.qpfvalQuadExcess = 0.0;
    proc_control_node_B.nVarMax = 0;
    while (proc_control_node_B.nVarMax <= proc_control_node_B.mIneq_a - 1) {
      if (TrialState->cIneq.data[proc_control_node_B.nVarMax] > 0.0) {
        proc_control_node_B.qpfvalQuadExcess += TrialState->
          cIneq.data[proc_control_node_B.nVarMax];
      }

      proc_control_node_B.nVarMax++;
    }

    proc_control_node_B.qpfvalLinearExcess +=
      proc_control_node_B.qpfvalQuadExcess;
    proc_control_node_B.qpfvalQuadExcess = MeritFunction->linearizedConstrViol;
    proc_control_node_B.y_gr = 0.0;
    if (proc_control_node_B.b_mIneq >= 1) {
      proc_control_node_B.mIneq_a = proc_control_node_B.nVarOrig +
        proc_control_node_B.b_mIneq;
      proc_control_node_B.nVarMax = proc_control_node_B.nVarOrig;
      while (proc_control_node_B.nVarMax + 1 <= proc_control_node_B.mIneq_a) {
        proc_control_node_B.y_gr += fabs(TrialState->
          xstar.data[proc_control_node_B.nVarMax]);
        proc_control_node_B.nVarMax++;
      }
    }

    MeritFunction->linearizedConstrViol = proc_control_node_B.y_gr;
    proc_control_node_B.qpfvalQuadExcess =
      (proc_control_node_B.qpfvalLinearExcess +
       proc_control_node_B.qpfvalQuadExcess) - proc_control_node_B.y_gr;
    if ((proc_control_node_B.qpfvalQuadExcess > 2.2204460492503131E-16) &&
        (proc_control_node_B.beta > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        proc_control_node_B.rho = 1.0;
      } else {
        proc_control_node_B.rho = 1.5;
      }

      proc_control_node_B.rho = proc_control_node_B.rho *
        proc_control_node_B.beta / proc_control_node_B.qpfvalQuadExcess;
    }

    if (proc_control_node_B.rho < MeritFunction->penaltyParam) {
      MeritFunction->phi = proc_control_node_B.rho *
        proc_control_node_B.qpfvalLinearExcess + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) * proc_control_node_B.rho +
           MeritFunction->initFval) - MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        if (proc_control_node_B.rho > 1.0E-10) {
          MeritFunction->penaltyParam = proc_control_node_B.rho;
        } else {
          MeritFunction->penaltyParam = 1.0E-10;
        }
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam *
          proc_control_node_B.qpfvalLinearExcess + TrialState->sqpFval;
      }
    } else {
      if (!(proc_control_node_B.rho > 1.0E-10)) {
        proc_control_node_B.rho = 1.0E-10;
      }

      MeritFunction->penaltyParam = proc_control_node_B.rho;
      MeritFunction->phi = proc_control_node_B.rho *
        proc_control_node_B.qpfvalLinearExcess + TrialState->sqpFval;
    }

    proc_control_node_B.beta -= MeritFunction->penaltyParam *
      proc_control_node_B.qpfvalLinearExcess;
    if (proc_control_node_B.beta < 0.0) {
      MeritFunction->phiPrimePlus = proc_control_node_B.beta;
    } else {
      MeritFunction->phiPrimePlus = 0.0;
    }

    proc_control_node_B.nVarMax = proc_control_node_B.b_WorkingSet.isActiveIdx[1]
      - 1;
    for (proc_control_node_B.mIneq_a = 0; proc_control_node_B.mIneq_a < 130;
         proc_control_node_B.mIneq_a++) {
      if (memspace->workspace_int.data[proc_control_node_B.mIneq_a] != 0) {
        if (memspace->workspace_int.data[proc_control_node_B.mIneq_a + 130] != 0)
        {
          tf = true;
        } else {
          tf = false;
        }
      } else {
        tf = false;
      }

      proc_control_node_B.b_mIneq = proc_control_node_B.nVarMax +
        proc_control_node_B.mIneq_a;
      TrialState->lambda.data[proc_control_node_B.b_mIneq] *= static_cast<real_T>
        (tf);
    }

    proc_control_node_B.mIneq_a = proc_control_node_B.b_WorkingSet.isActiveIdx[2]
      - 1;
    while (proc_control_node_B.mIneq_a + 1 <=
           proc_control_node_B.b_WorkingSet.nActiveConstr) {
      if (proc_control_node_B.b_WorkingSet.Wid.data[proc_control_node_B.mIneq_a]
          == 3) {
        TrialState->lambda.data[proc_control_node_B.mIneq_a] *=
          static_cast<real_T>(memspace->
                              workspace_int.data[proc_control_node_B.b_WorkingSet.Wlocalidx.data
                              [proc_control_node_B.mIneq_a] + 259]);
      }

      proc_control_node_B.mIneq_a++;
    }
  }

  *WorkingSet = proc_control_node_B.b_WorkingSet;
  proc_control_node_B.mIneq_a = (proc_control_node_B.b_WorkingSet.sizes[3] -
    proc_control_node_B.b_WorkingSet.sizes[2]) - 260;
  proc_control_node_B.nVarMax = proc_control_node_B.b_WorkingSet.nActiveConstr;
  while ((proc_control_node_B.nVarMax > proc_control_node_B.b_WorkingSet.sizes[0]
          + 130) && (proc_control_node_B.temp_h > 0)) {
    if ((WorkingSet->Wid.data[proc_control_node_B.nVarMax - 1] == 4) &&
        (WorkingSet->Wlocalidx.data[proc_control_node_B.nVarMax - 1] >
         proc_control_node_B.mIneq_a)) {
      proc_control_node_B.beta = TrialState->lambda.data
        [WorkingSet->nActiveConstr - 1];
      TrialState->lambda.data[WorkingSet->nActiveConstr - 1] = 0.0;
      TrialState->lambda.data[proc_control_node_B.nVarMax - 1] =
        proc_control_node_B.beta;
      proc_control_node_removeConstr(WorkingSet, proc_control_node_B.nVarMax);
      proc_control_node_B.temp_h--;
    }

    proc_control_node_B.nVarMax--;
  }

  QPObjective->hasLinear = true;
  QPObjective->nvar = proc_control_node_B.nVarOrig;
  QPObjective->objtype = 3;
  proc_control_nod_setProblemType(WorkingSet, 3);
  proc_control_node_B.nVarOrig = memspace->workspace_double.size[0] *
    memspace->workspace_double.size[1];
  for (proc_control_node_B.b_mIneq = 0; proc_control_node_B.b_mIneq <
       proc_control_node_B.nVarOrig; proc_control_node_B.b_mIneq++) {
  }

  proc_control_node_sortLambdaQP(TrialState->lambda.data,
    WorkingSet->nActiveConstr, WorkingSet->sizes, WorkingSet->isActiveIdx,
    WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
    memspace->workspace_double.data);
}

// Function for MATLAB Function: '<S228>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_step_k(int32_T
  *STEP_TYPE, real_T Hessian[21609], const real_T lb[147],
  s_UjlJWoQEHmSUKFcPTad7eC_proc_T *TrialState, sG8JZ69axY52WWR6RKyApQC_proc__T
  *MeritFunction, s_OnOuVjEActeQRN4FyNqSwB_proc_T *memspace,
  s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet, s_2F24x1ekvOt8ZUO1knVMv_proc__T
  *QRManager, s_TNXzMnREVvDmNpLFpsTLBC_proc_T *CholManager,
  s_oZGbvi5mjKKebHB9aR5DoG_proc_T *QPObjective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *
  qpoptions)
{
  int32_T exitg1;
  boolean_T checkBoundViolation;
  boolean_T guard1 = false;
  boolean_T stepSuccess;
  stepSuccess = true;
  checkBoundViolation = true;
  proc_control_node_B.nVar = WorkingSet->nVar - 1;
  if (*STEP_TYPE != 3) {
    proc_control_node_B.b_k_h = 0;
    while (proc_control_node_B.b_k_h <= proc_control_node_B.nVar) {
      TrialState->xstar.data[proc_control_node_B.b_k_h] = TrialState->
        xstarsqp[proc_control_node_B.b_k_h];
      proc_control_node_B.b_k_h++;
    }
  } else {
    proc_control_node_B.y_size_idx_0_d = TrialState->searchDir.size;
    proc_control_node_B.iH0 = TrialState->searchDir.size;
    if (0 <= proc_control_node_B.iH0 - 1) {
      memcpy(&proc_control_node_B.y_data_ld[0], &TrialState->searchDir.data[0],
             proc_control_node_B.iH0 * sizeof(real_T));
    }

    proc_control_node_B.b_k_h = 0;
    while (proc_control_node_B.b_k_h <= proc_control_node_B.nVar) {
      proc_control_node_B.y_data_ld[proc_control_node_B.b_k_h] =
        TrialState->xstar.data[proc_control_node_B.b_k_h];
      proc_control_node_B.b_k_h++;
    }

    if (0 <= proc_control_node_B.y_size_idx_0_d - 1) {
      memcpy(&TrialState->searchDir.data[0], &proc_control_node_B.y_data_ld[0],
             proc_control_node_B.y_size_idx_0_d * sizeof(real_T));
    }
  }

  do {
    exitg1 = 0;
    guard1 = false;
    switch (*STEP_TYPE) {
     case 1:
      proc_control_node_normal(Hessian, TrialState->grad.data, TrialState,
        MeritFunction, memspace, WorkingSet, QRManager, CholManager, QPObjective,
        qpoptions);
      if ((TrialState->state <= 0) && (TrialState->state != -6)) {
        *STEP_TYPE = 2;
      } else {
        proc_control_node_B.y_size_idx_0_d = TrialState->delta_x.size;
        proc_control_node_B.iH0 = TrialState->delta_x.size;
        if (0 <= proc_control_node_B.iH0 - 1) {
          memcpy(&proc_control_node_B.y_data_ld[0], &TrialState->delta_x.data[0],
                 proc_control_node_B.iH0 * sizeof(real_T));
        }

        proc_control_node_B.b_k_h = 0;
        while (proc_control_node_B.b_k_h <= proc_control_node_B.nVar) {
          proc_control_node_B.y_data_ld[proc_control_node_B.b_k_h] =
            TrialState->xstar.data[proc_control_node_B.b_k_h];
          proc_control_node_B.b_k_h++;
        }

        if (0 <= proc_control_node_B.y_size_idx_0_d - 1) {
          memcpy(&TrialState->delta_x.data[0], &proc_control_node_B.y_data_ld[0],
                 proc_control_node_B.y_size_idx_0_d * sizeof(real_T));
        }

        guard1 = true;
      }
      break;

     case 2:
      proc_contro_removeAllIneqConstr(WorkingSet);
      proc_control_node_B.b_k_h = 0;
      while (proc_control_node_B.b_k_h <= WorkingSet->sizes[3] - 1) {
        proc_control_node_B.nrmGradInf = WorkingSet->lb.data
          [WorkingSet->indexLB.data[proc_control_node_B.b_k_h] - 1];
        if (-TrialState->xstar.data[WorkingSet->
            indexLB.data[proc_control_node_B.b_k_h] - 1] >
            proc_control_node_B.nrmGradInf) {
          TrialState->xstar.data[WorkingSet->
            indexLB.data[proc_control_node_B.b_k_h] - 1] =
            -proc_control_node_B.nrmGradInf + fabs
            (proc_control_node_B.nrmGradInf);
        }

        proc_control_node_B.b_k_h++;
      }

      proc_control_node_relaxed(Hessian, TrialState->grad.data, TrialState,
        MeritFunction, memspace, WorkingSet, QRManager, CholManager, QPObjective,
        qpoptions);
      proc_control_node_B.y_size_idx_0_d = TrialState->delta_x.size;
      proc_control_node_B.iH0 = TrialState->delta_x.size;
      if (0 <= proc_control_node_B.iH0 - 1) {
        memcpy(&proc_control_node_B.y_data_ld[0], &TrialState->delta_x.data[0],
               proc_control_node_B.iH0 * sizeof(real_T));
      }

      proc_control_node_B.b_k_h = 0;
      while (proc_control_node_B.b_k_h <= proc_control_node_B.nVar) {
        proc_control_node_B.y_data_ld[proc_control_node_B.b_k_h] =
          TrialState->xstar.data[proc_control_node_B.b_k_h];
        proc_control_node_B.b_k_h++;
      }

      if (0 <= proc_control_node_B.y_size_idx_0_d - 1) {
        memcpy(&TrialState->delta_x.data[0], &proc_control_node_B.y_data_ld[0],
               proc_control_node_B.y_size_idx_0_d * sizeof(real_T));
      }

      guard1 = true;
      break;

     default:
      stepSuccess = proc_control_node_soc(Hessian, TrialState->grad.data,
        TrialState, memspace, WorkingSet, QRManager, CholManager, QPObjective,
        qpoptions);
      checkBoundViolation = stepSuccess;
      if (stepSuccess && (TrialState->state != -6)) {
        proc_control_node_B.b_k_h = 0;
        while (proc_control_node_B.b_k_h <= proc_control_node_B.nVar) {
          TrialState->delta_x.data[proc_control_node_B.b_k_h] =
            TrialState->xstar.data[proc_control_node_B.b_k_h] +
            TrialState->socDirection.data[proc_control_node_B.b_k_h];
          proc_control_node_B.b_k_h++;
        }
      }

      guard1 = true;
      break;
    }

    if (guard1) {
      if (TrialState->state != -6) {
        exitg1 = 1;
      } else {
        proc_control_node_B.nrmGradInf = 0.0;
        proc_control_node_B.nrmDirInf = 1.0;
        for (proc_control_node_B.b_k_h = 0; proc_control_node_B.b_k_h < 147;
             proc_control_node_B.b_k_h++) {
          proc_control_node_B.u1 = fabs(TrialState->
            grad.data[proc_control_node_B.b_k_h]);
          if ((!(proc_control_node_B.nrmGradInf > proc_control_node_B.u1)) &&
              (!rtIsNaN(proc_control_node_B.u1))) {
            proc_control_node_B.nrmGradInf = proc_control_node_B.u1;
          }

          proc_control_node_B.u1 = fabs(TrialState->
            xstar.data[proc_control_node_B.b_k_h]);
          if ((!(proc_control_node_B.nrmDirInf > proc_control_node_B.u1)) &&
              (!rtIsNaN(proc_control_node_B.u1))) {
            proc_control_node_B.nrmDirInf = proc_control_node_B.u1;
          }
        }

        proc_control_node_B.nrmGradInf /= proc_control_node_B.nrmDirInf;
        if ((2.2204460492503131E-16 > proc_control_node_B.nrmGradInf) || rtIsNaN
            (proc_control_node_B.nrmGradInf)) {
          proc_control_node_B.nrmGradInf = 2.2204460492503131E-16;
        }

        for (proc_control_node_B.b_k_h = 0; proc_control_node_B.b_k_h < 147;
             proc_control_node_B.b_k_h++) {
          proc_control_node_B.iH0 = 147 * proc_control_node_B.b_k_h;
          proc_control_node_B.y_size_idx_0_d = 0;
          while (proc_control_node_B.y_size_idx_0_d <= proc_control_node_B.b_k_h
                 - 1) {
            Hessian[proc_control_node_B.iH0 + proc_control_node_B.y_size_idx_0_d]
              = 0.0;
            proc_control_node_B.y_size_idx_0_d++;
          }

          Hessian[proc_control_node_B.b_k_h + 147 * proc_control_node_B.b_k_h] =
            proc_control_node_B.nrmGradInf;
          proc_control_node_B.iH0 += proc_control_node_B.b_k_h;
          proc_control_node_B.y_size_idx_0_d = 0;
          while (proc_control_node_B.y_size_idx_0_d <= 145 -
                 proc_control_node_B.b_k_h) {
            Hessian[(proc_control_node_B.iH0 +
                     proc_control_node_B.y_size_idx_0_d) + 1] = 0.0;
            proc_control_node_B.y_size_idx_0_d++;
          }
        }
      }
    }
  } while (exitg1 == 0);

  if (checkBoundViolation) {
    proc_control_node_B.nVar = 0;
    while (proc_control_node_B.nVar <= WorkingSet->sizes[3] - 1) {
      proc_control_node_B.nrmDirInf = TrialState->delta_x.data
        [WorkingSet->indexLB.data[proc_control_node_B.nVar] - 1];
      proc_control_node_B.nrmGradInf = (TrialState->xstarsqp
        [WorkingSet->indexLB.data[proc_control_node_B.nVar] - 1] +
        proc_control_node_B.nrmDirInf) - lb[WorkingSet->
        indexLB.data[proc_control_node_B.nVar] - 1];
      if (proc_control_node_B.nrmGradInf < 0.0) {
        TrialState->delta_x.data[WorkingSet->
          indexLB.data[proc_control_node_B.nVar] - 1] =
          proc_control_node_B.nrmDirInf - proc_control_node_B.nrmGradInf;
        TrialState->xstar.data[WorkingSet->indexLB.data[proc_control_node_B.nVar]
          - 1] -= proc_control_node_B.nrmGradInf;
      }

      proc_control_node_B.nVar++;
    }
  }

  return stepSuccess;
}

// Function for MATLAB Function: '<S228>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_node_anon_d0(const real_T
  runtimedata_x[13], const real_T runtimedata_lastMV[8], const real_T
  runtimedata_ref[130], const real_T runtimedata_OutputWeights[130], const
  real_T runtimedata_MVWeights[80], const real_T runtimedata_MVRateWeights[80],
  const real_T runtimedata_MVScaledTarget[80], const real_T z[147])
{
  real_T varargout_1;
  proc_control_node_znlmpc_getXUe(z, runtimedata_x, proc_control_node_B.X_c,
    proc_control_node_B.U_i, &proc_control_node_B.e_n);
  proc_control_node_B.fs = 0.0;
  for (proc_control_node_B.i_ih = 0; proc_control_node_B.i_ih < 11;
       proc_control_node_B.i_ih++) {
    for (proc_control_node_B.i_bz = 0; proc_control_node_B.i_bz < 13;
         proc_control_node_B.i_bz++) {
      proc_control_node_B.b_X_f[proc_control_node_B.i_bz + 13 *
        proc_control_node_B.i_ih] = proc_control_node_B.X_c[11 *
        proc_control_node_B.i_bz + proc_control_node_B.i_ih];
    }

    for (proc_control_node_B.i_bz = 0; proc_control_node_B.i_bz < 8;
         proc_control_node_B.i_bz++) {
      proc_control_node_B.b_U_h[proc_control_node_B.i_bz +
        (proc_control_node_B.i_ih << 3)] = proc_control_node_B.U_i[11 *
        proc_control_node_B.i_bz + proc_control_node_B.i_ih];
    }
  }

  for (proc_control_node_B.i_bz = 0; proc_control_node_B.i_bz < 10;
       proc_control_node_B.i_bz++) {
    proc_control_node_B.wtYerr = 0.0;
    for (proc_control_node_B.i_ih = 0; proc_control_node_B.i_ih < 13;
         proc_control_node_B.i_ih++) {
      proc_control_node_B.wtYerr_tmp = 10 * proc_control_node_B.i_ih +
        proc_control_node_B.i_bz;
      proc_control_node_B.wtYerr_c = (proc_control_node_B.b_X_f
        [(proc_control_node_B.i_bz + 1) * 13 + proc_control_node_B.i_ih] -
        runtimedata_ref[proc_control_node_B.wtYerr_tmp]) *
        runtimedata_OutputWeights[proc_control_node_B.wtYerr_tmp];
      proc_control_node_B.wtYerr += proc_control_node_B.wtYerr_c *
        proc_control_node_B.wtYerr_c;
    }

    proc_control_node_B.fs += proc_control_node_B.wtYerr;
    memcpy(&proc_control_node_B.umvk[0],
           &proc_control_node_B.b_U_h[proc_control_node_B.i_bz << 3], sizeof
           (real_T) << 3U);
    if (proc_control_node_B.i_bz + 1 == 1) {
      for (proc_control_node_B.i_ih = 0; proc_control_node_B.i_ih < 8;
           proc_control_node_B.i_ih++) {
        proc_control_node_B.duk[proc_control_node_B.i_ih] =
          proc_control_node_B.umvk[proc_control_node_B.i_ih] -
          runtimedata_lastMV[proc_control_node_B.i_ih];
      }
    } else {
      for (proc_control_node_B.i_ih = 0; proc_control_node_B.i_ih < 8;
           proc_control_node_B.i_ih++) {
        proc_control_node_B.duk[proc_control_node_B.i_ih] =
          proc_control_node_B.umvk[proc_control_node_B.i_ih] -
          proc_control_node_B.b_U_h[((proc_control_node_B.i_bz - 1) << 3) +
          proc_control_node_B.i_ih];
      }
    }

    proc_control_node_B.wtYerr = 0.0;
    proc_control_node_B.wtYerr_c = 0.0;
    for (proc_control_node_B.i_ih = 0; proc_control_node_B.i_ih < 8;
         proc_control_node_B.i_ih++) {
      proc_control_node_B.wtYerr_tmp = 10 * proc_control_node_B.i_ih +
        proc_control_node_B.i_bz;
      proc_control_node_B.umvk_n =
        (proc_control_node_B.umvk[proc_control_node_B.i_ih] -
         runtimedata_MVScaledTarget[proc_control_node_B.wtYerr_tmp]) *
        runtimedata_MVWeights[proc_control_node_B.wtYerr_tmp];
      proc_control_node_B.duk_d =
        runtimedata_MVRateWeights[proc_control_node_B.wtYerr_tmp] *
        proc_control_node_B.duk[proc_control_node_B.i_ih];
      proc_control_node_B.wtYerr += proc_control_node_B.umvk_n *
        proc_control_node_B.umvk_n;
      proc_control_node_B.wtYerr_c += proc_control_node_B.duk_d *
        proc_control_node_B.duk_d;
      proc_control_node_B.umvk[proc_control_node_B.i_ih] =
        proc_control_node_B.umvk_n;
      proc_control_node_B.duk[proc_control_node_B.i_ih] =
        proc_control_node_B.duk_d;
    }

    proc_control_node_B.fs = (proc_control_node_B.fs +
      proc_control_node_B.wtYerr) + proc_control_node_B.wtYerr_c;
  }

  varargout_1 = 100000.0 * proc_control_node_B.e_n * proc_control_node_B.e_n +
    proc_control_node_B.fs;
  return varargout_1;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control__computeObjective_(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T x[147], real_T *fval,
  int32_T *status)
{
  *fval = proc_control_node_anon_d0(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x);
  *status = 1;
  if (rtIsInf(*fval) || rtIsNaN(*fval)) {
    if (rtIsNaN(*fval)) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_stateEvolution_g(const real_T
  X[143], const real_T U[88], real_T c[130])
{
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  memset(&c[0], 0, 130U * sizeof(real_T));
  for (i_0 = 0; i_0 < 13; i_0++) {
    proc_control_node_B.ic_i[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i_0 = 0; i_0 < 11; i_0++) {
    for (i_1 = 0; i_1 < 8; i_1++) {
      proc_control_node_B.b_U_o[i_1 + (i_0 << 3)] = U[11 * i_1 + i_0];
    }

    for (i_1 = 0; i_1 < 13; i_1++) {
      proc_control_node_B.b_X_p2[i_1 + 13 * i_0] = X[11 * i_1 + i_0];
    }
  }

  for (i = 0; i < 10; i++) {
    i_0 = i << 3;
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X_p2[13 * i],
      &proc_control_node_B.b_U_o[i_0], proc_control_node_B.dv23);
    i_1 = (i + 1) * 13;
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X_p2[i_1],
      &proc_control_node_B.b_U_o[i_0], proc_control_node_B.dv24);
    for (i_0 = 0; i_0 < 13; i_0++) {
      c[static_cast<int32_T>(proc_control_node_B.ic_i[i_0]) - 1] =
        (proc_control_node_B.b_X_p2[13 * i + i_0] +
         (proc_control_node_B.dv23[i_0] + proc_control_node_B.dv24[i_0]) * 0.05)
        - proc_control_node_B.b_X_p2[i_1 + i_0];
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.ic_i[i_0] += 13.0;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_outputBounds_p(const real_T
  runtimedata_OutputMin[130], const real_T runtimedata_OutputMax[130], const
  real_T X[143], real_T e, real_T c_data[], int32_T c_size[2])
{
  int32_T b_size_idx_0;
  int32_T i;
  boolean_T exitg1;
  boolean_T y;
  for (i = 0; i < 130; i++) {
    proc_control_node_B.bv1[i] = rtIsInf(runtimedata_OutputMin[i]);
  }

  proc_control_node_all(proc_control_node_B.bv1, proc_control_node_B.x_d);
  y = true;
  proc_control_node_B.k_c = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.k_c < 13)) {
    if (!proc_control_node_B.x_d[proc_control_node_B.k_c]) {
      y = false;
      exitg1 = true;
    } else {
      proc_control_node_B.k_c++;
    }
  }

  if (y) {
    for (i = 0; i < 130; i++) {
      proc_control_node_B.bv1[i] = rtIsInf(runtimedata_OutputMax[i]);
    }

    proc_control_node_all(proc_control_node_B.bv1, proc_control_node_B.x_d);
    proc_control_node_B.k_c = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.k_c < 13)) {
      if (!proc_control_node_B.x_d[proc_control_node_B.k_c]) {
        y = false;
        exitg1 = true;
      } else {
        proc_control_node_B.k_c++;
      }
    }
  }

  if (y) {
    c_size[0] = 0;
    c_size[1] = 0;
  } else {
    for (i = 0; i < 260; i++) {
      proc_control_node_B.b_c_j[i] = 0.0;
      proc_control_node_B.icf_o[i] = true;
    }

    for (i = 0; i < 13; i++) {
      proc_control_node_B.ic_o[i] = static_cast<real_T>(i) + 1.0;
    }

    for (proc_control_node_B.k_c = 0; proc_control_node_B.k_c < 10;
         proc_control_node_B.k_c++) {
      for (i = 0; i < 13; i++) {
        proc_control_node_B.runtimedata_OutputMin_c[i] = runtimedata_OutputMin
          [10 * i + proc_control_node_B.k_c];
      }

      proc_control_node_isfinite_k(proc_control_node_B.runtimedata_OutputMin_c,
        proc_control_node_B.x_d);
      for (i = 0; i < 13; i++) {
        proc_control_node_B.icf_o[static_cast<int32_T>
          (proc_control_node_B.ic_o[i]) - 1] = proc_control_node_B.x_d[i];
        proc_control_node_B.runtimedata_OutputMin_c[i] = runtimedata_OutputMax
          [10 * i + proc_control_node_B.k_c];
      }

      proc_control_node_isfinite_k(proc_control_node_B.runtimedata_OutputMin_c,
        proc_control_node_B.x_d);
      for (i = 0; i < 13; i++) {
        proc_control_node_B.ic_c = proc_control_node_B.ic_o[i];
        proc_control_node_B.icf_o[static_cast<int32_T>(proc_control_node_B.ic_c
          + 13.0) - 1] = proc_control_node_B.x_d[i];
        proc_control_node_B.ic_k[i] = static_cast<int32_T>
          (proc_control_node_B.ic_c) - 1;
        proc_control_node_B.ic_k[i + 13] = static_cast<int32_T>
          (proc_control_node_B.ic_c + 13.0) - 1;
      }

      for (i = 0; i < 26; i++) {
        proc_control_node_B.icf_o4[i] =
          proc_control_node_B.icf_o[proc_control_node_B.ic_k[i]];
      }

      if (proc_control_node_any(proc_control_node_B.icf_o4)) {
        for (i = 0; i < 13; i++) {
          proc_control_node_B.b_c_j[static_cast<int32_T>
            (proc_control_node_B.ic_o[i]) - 1] = (runtimedata_OutputMin[10 * i +
            proc_control_node_B.k_c] - e) - X[(11 * i + proc_control_node_B.k_c)
            + 1];
        }

        for (i = 0; i < 13; i++) {
          proc_control_node_B.b_c_j[static_cast<int32_T>
            (proc_control_node_B.ic_o[i] + 13.0) - 1] = (X[(11 * i +
            proc_control_node_B.k_c) + 1] - runtimedata_OutputMax[10 * i +
            proc_control_node_B.k_c]) - e;
        }
      }

      for (i = 0; i < 13; i++) {
        proc_control_node_B.ic_o[i] += 26.0;
      }
    }

    proc_control_node_B.k_c = 0;
    for (i = 0; i < 260; i++) {
      if (proc_control_node_B.icf_o[i]) {
        proc_control_node_B.k_c++;
      }
    }

    b_size_idx_0 = proc_control_node_B.k_c;
    proc_control_node_B.k_c = 0;
    for (i = 0; i < 260; i++) {
      if (proc_control_node_B.icf_o[i]) {
        proc_control_node_B.b_data_d[proc_control_node_B.k_c] =
          static_cast<int16_T>(i + 1);
        proc_control_node_B.k_c++;
      }
    }

    for (i = 0; i < b_size_idx_0; i++) {
      proc_control_node_B.b_c_data_e[i] =
        proc_control_node_B.b_c_j[proc_control_node_B.b_data_d[i] - 1];
    }

    c_size[0] = b_size_idx_0;
    c_size[1] = 1;
    if (0 <= b_size_idx_0 - 1) {
      memcpy(&c_data[0], &proc_control_node_B.b_c_data_e[0], b_size_idx_0 *
             sizeof(real_T));
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_anon_d0f(const real_T
  runtimedata_x[13], const real_T runtimedata_OutputMin[130], const real_T
  runtimedata_OutputMax[130], const real_T z[147], real_T varargout_1_data[],
  int32_T varargout_1_size[2], real_T varargout_2[130])
{
  proc_control_node_znlmpc_getXUe(z, runtimedata_x, proc_control_node_B.X_n,
    proc_control_node_B.U_d, &proc_control_node_B.e_f);
  proc_control_n_stateEvolution_g(proc_control_node_B.X_n,
    proc_control_node_B.U_d, varargout_2);
  proc_control_nod_outputBounds_p(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_node_B.X_n, proc_control_node_B.e_f,
    proc_control_node_B.c_data_a, proc_control_node_B.c_size_f);
  proc_control_node_B.result_j = ((proc_control_node_B.c_size_f[0] != 0) &&
    (proc_control_node_B.c_size_f[1] != 0));
  if (proc_control_node_B.result_j == 0) {
    proc_control_node_B.result_idx_0_h = proc_control_node_B.c_size_f[0];
  } else if ((proc_control_node_B.c_size_f[0] != 0) &&
             (proc_control_node_B.c_size_f[1] != 0)) {
    proc_control_node_B.result_idx_0_h = proc_control_node_B.c_size_f[0];
  } else {
    proc_control_node_B.result_idx_0_h = 0;
  }

  varargout_1_size[0] = proc_control_node_B.result_idx_0_h;
  varargout_1_size[1] = proc_control_node_B.result_j;
  if ((0 <= proc_control_node_B.result_j - 1) && (0 <=
       proc_control_node_B.result_idx_0_h - 1)) {
    memcpy(&varargout_1_data[0], &proc_control_node_B.c_data_a[0],
           proc_control_node_B.result_idx_0_h * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
int32_T proc_control_nodeModelClass::proc_contro_computeConstraints_(const
  real_T obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[147],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130])
{
  int32_T status;
  proc_control_node_B.ineqEnd = (ineq0 + obj_mCineq) - 2;
  proc_control_node_anon_d0f(obj_nonlcon_workspace_runtimeda,
    obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
    proc_control_node_B.varargout_1_data_p4,
    proc_control_node_B.varargout_1_size_f, proc_control_node_B.varargout_2_o);
  if (ineq0 > proc_control_node_B.ineqEnd + 1) {
    proc_control_node_B.c_iy = -1;
    proc_control_node_B.ineqEnd = -1;
  } else {
    proc_control_node_B.c_iy = ineq0 - 2;
  }

  proc_control_node_B.unnamed_idx_1 = proc_control_node_B.ineqEnd -
    proc_control_node_B.c_iy;
  for (proc_control_node_B.ineqEnd = 0; proc_control_node_B.ineqEnd <
       proc_control_node_B.unnamed_idx_1; proc_control_node_B.ineqEnd++) {
    Cineq_workspace_data[(proc_control_node_B.c_iy + proc_control_node_B.ineqEnd)
      + 1] = proc_control_node_B.varargout_1_data_p4[proc_control_node_B.ineqEnd];
  }

  memcpy(&Ceq_workspace[0], &proc_control_node_B.varargout_2_o[0], 130U * sizeof
         (real_T));
  status = proc_contr_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
    ineq0);
  if (status == 1) {
    status = proc_con_checkVectorNonFinite_g(Ceq_workspace);
  }

  return status;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_evalObjAndConstr(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[147],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130],
  real_T *fval, int32_T *status)
{
  proc_control__computeObjective_(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x, fval,
    status);
  if (*status == 1) {
    *status = proc_contro_computeConstraints_(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1,
      obj_mCineq, x, Cineq_workspace_data, ineq0, Ceq_workspace);
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_con_computeLinearResiduals(const real_T
  x[147], int32_T nVar, real_T workspaceIneq_data[], const int32_T
  *workspaceIneq_size, int32_T mLinIneq, const real_T AineqT_data[], const
  real_T bineq_data[], int32_T ldAi)
{
  int32_T b;
  int32_T ia;
  int32_T ix;
  int32_T loop_ub;
  int32_T y_size_idx_0;
  if (mLinIneq > 0) {
    if (0 <= *workspaceIneq_size - 1) {
      memcpy(&proc_control_node_B.y_data_o[0], &workspaceIneq_data[0],
             *workspaceIneq_size * sizeof(real_T));
    }

    proc_control_node_B.k_mk = 0;
    while (proc_control_node_B.k_mk <= mLinIneq - 1) {
      proc_control_node_B.y_data_o[proc_control_node_B.k_mk] =
        bineq_data[proc_control_node_B.k_mk];
      proc_control_node_B.k_mk++;
    }

    if (0 <= *workspaceIneq_size - 1) {
      memcpy(&workspaceIneq_data[0], &proc_control_node_B.y_data_o[0],
             *workspaceIneq_size * sizeof(real_T));
    }

    proc_control_node_B.k_mk = 0;
    while (proc_control_node_B.k_mk <= mLinIneq - 1) {
      workspaceIneq_data[proc_control_node_B.k_mk] =
        -workspaceIneq_data[proc_control_node_B.k_mk];
      proc_control_node_B.k_mk++;
    }

    proc_control_node_B.k_mk = 0;
    loop_ub = (mLinIneq - 1) * ldAi + 1;
    y_size_idx_0 = 1;
    while (((ldAi > 0) && (y_size_idx_0 <= loop_ub)) || ((ldAi < 0) &&
            (y_size_idx_0 >= loop_ub))) {
      ix = 0;
      proc_control_node_B.c_h = 0.0;
      b = (y_size_idx_0 + nVar) - 1;
      for (ia = y_size_idx_0; ia <= b; ia++) {
        proc_control_node_B.c_h += AineqT_data[ia - 1] * x[ix];
        ix++;
      }

      workspaceIneq_data[proc_control_node_B.k_mk] += proc_control_node_B.c_h;
      proc_control_node_B.k_mk++;
      y_size_idx_0 += ldAi;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_no_computeMeritFcn(real_T
  obj_penaltyParam, real_T fval, const real_T Cineq_workspace_data[], int32_T
  mIneq, const real_T Ceq_workspace[130], boolean_T evalWellDefined)
{
  real_T constrViolationEq;
  real_T constrViolationIneq;
  real_T val;
  int32_T k;
  if (evalWellDefined) {
    constrViolationEq = 0.0;
    for (k = 0; k < 130; k++) {
      constrViolationEq += fabs(Ceq_workspace[k]);
    }

    constrViolationIneq = 0.0;
    for (k = 0; k < mIneq; k++) {
      if (Cineq_workspace_data[k] > 0.0) {
        constrViolationIneq += Cineq_workspace_data[k];
      }
    }

    val = (constrViolationEq + constrViolationIneq) * obj_penaltyParam + fval;
  } else {
    val = (rtInf);
  }

  return val;
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_linesearch(boolean_T
  *evalWellDefined, const real_T bineq_data[], int32_T WorkingSet_nVar, int32_T
  WorkingSet_ldA, const real_T WorkingSet_Aineq_data[],
  s_UjlJWoQEHmSUKFcPTad7eC_proc_T *TrialState, real_T MeritFunction_penaltyParam,
  real_T MeritFunction_phi, real_T MeritFunction_phiPrimePlus, real_T
  MeritFunction_phiFullStep, const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *FcnEvaluator_objfun_workspace_r, const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *FcnEvaluator_nonlcon_workspace_, int32_T FcnEvaluator_mCineq, boolean_T
  socTaken, real_T *alpha, int32_T *exitflag)
{
  int32_T exitg1;
  boolean_T exitg2;
  boolean_T tooSmallX;
  proc_control_node_B.mLinIneq = TrialState->mIneq - TrialState->mNonlinIneq;
  *alpha = 1.0;
  *exitflag = 1;
  proc_control_node_B.phi_alpha = MeritFunction_phiFullStep;
  proc_control_node_B.y_size_idx_0 = TrialState->searchDir.size;
  proc_control_node_B.loop_ub_m = TrialState->searchDir.size;
  if (0 <= proc_control_node_B.loop_ub_m - 1) {
    memcpy(&proc_control_node_B.y_data_b[0], &TrialState->searchDir.data[0],
           proc_control_node_B.loop_ub_m * sizeof(real_T));
  }

  proc_control_node_B.loop_ub_m = 0;
  while (proc_control_node_B.loop_ub_m <= WorkingSet_nVar - 1) {
    proc_control_node_B.y_data_b[proc_control_node_B.loop_ub_m] =
      TrialState->delta_x.data[proc_control_node_B.loop_ub_m];
    proc_control_node_B.loop_ub_m++;
  }

  if (0 <= proc_control_node_B.y_size_idx_0 - 1) {
    memcpy(&TrialState->searchDir.data[0], &proc_control_node_B.y_data_b[0],
           proc_control_node_B.y_size_idx_0 * sizeof(real_T));
  }

  do {
    exitg1 = 0;
    if (TrialState->FunctionEvaluations < 14700) {
      if ((*evalWellDefined) && (proc_control_node_B.phi_alpha <= *alpha *
           0.0001 * MeritFunction_phiPrimePlus + MeritFunction_phi)) {
        exitg1 = 1;
      } else {
        *alpha *= 0.7;
        proc_control_node_B.loop_ub_m = 0;
        while (proc_control_node_B.loop_ub_m <= WorkingSet_nVar - 1) {
          TrialState->delta_x.data[proc_control_node_B.loop_ub_m] = *alpha *
            TrialState->xstar.data[proc_control_node_B.loop_ub_m];
          proc_control_node_B.loop_ub_m++;
        }

        if (socTaken) {
          proc_control_node_B.phi_alpha = *alpha * *alpha;
          if ((WorkingSet_nVar >= 1) && (!(proc_control_node_B.phi_alpha == 0.0)))
          {
            proc_control_node_B.loop_ub_m = 0;
            while (proc_control_node_B.loop_ub_m <= WorkingSet_nVar - 1) {
              TrialState->delta_x.data[proc_control_node_B.loop_ub_m] +=
                proc_control_node_B.phi_alpha * TrialState->
                socDirection.data[proc_control_node_B.loop_ub_m];
              proc_control_node_B.loop_ub_m++;
            }
          }
        }

        tooSmallX = true;
        proc_control_node_B.loop_ub_m = 0;
        exitg2 = false;
        while ((!exitg2) && (proc_control_node_B.loop_ub_m <= WorkingSet_nVar -
                             1)) {
          proc_control_node_B.phi_alpha = fabs(TrialState->
            xstarsqp[proc_control_node_B.loop_ub_m]);
          if ((1.0 > proc_control_node_B.phi_alpha) || rtIsNaN
              (proc_control_node_B.phi_alpha)) {
            proc_control_node_B.phi_alpha = 1.0;
          }

          if (0.1 * proc_control_node_B.phi_alpha <= fabs
              (TrialState->delta_x.data[proc_control_node_B.loop_ub_m])) {
            tooSmallX = false;
            exitg2 = true;
          } else {
            proc_control_node_B.loop_ub_m++;
          }
        }

        if (tooSmallX) {
          *exitflag = -2;
          exitg1 = 1;
        } else {
          proc_control_node_B.loop_ub_m = 0;
          while (proc_control_node_B.loop_ub_m <= WorkingSet_nVar - 1) {
            TrialState->xstarsqp[proc_control_node_B.loop_ub_m] =
              TrialState->xstarsqp_old[proc_control_node_B.loop_ub_m] +
              TrialState->delta_x.data[proc_control_node_B.loop_ub_m];
            proc_control_node_B.loop_ub_m++;
          }

          proc_control_n_evalObjAndConstr(FcnEvaluator_objfun_workspace_r->x,
            FcnEvaluator_objfun_workspace_r->lastMV,
            FcnEvaluator_objfun_workspace_r->ref,
            FcnEvaluator_objfun_workspace_r->OutputWeights,
            FcnEvaluator_objfun_workspace_r->MVWeights,
            FcnEvaluator_objfun_workspace_r->MVRateWeights,
            FcnEvaluator_objfun_workspace_r->MVScaledTarget,
            FcnEvaluator_nonlcon_workspace_->x,
            FcnEvaluator_nonlcon_workspace_->OutputMin,
            FcnEvaluator_nonlcon_workspace_->OutputMax, FcnEvaluator_mCineq,
            TrialState->xstarsqp, TrialState->cIneq.data, TrialState->iNonIneq0,
            TrialState->cEq, &proc_control_node_B.phi_alpha,
            &proc_control_node_B.loop_ub_m);
          TrialState->sqpFval = proc_control_node_B.phi_alpha;
          proc_con_computeLinearResiduals(TrialState->xstarsqp, WorkingSet_nVar,
            TrialState->cIneq.data, &TrialState->cIneq.size,
            proc_control_node_B.mLinIneq, WorkingSet_Aineq_data, bineq_data,
            WorkingSet_ldA);
          TrialState->FunctionEvaluations++;
          *evalWellDefined = (proc_control_node_B.loop_ub_m == 1);
          proc_control_node_B.phi_alpha = proc_control_no_computeMeritFcn
            (MeritFunction_penaltyParam, proc_control_node_B.phi_alpha,
             TrialState->cIneq.data, TrialState->mIneq, TrialState->cEq,
             *evalWellDefined);
        }
      }
    } else {
      *exitflag = 0;
      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_driver(const real_T
  bineq_data[], const real_T lb[147], s_UjlJWoQEHmSUKFcPTad7eC_proc_T
  *TrialState, sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction, const
  s_OFDCtz0SnDbKkoK04vkDPE_proc_T *FcnEvaluator, s_OnOuVjEActeQRN4FyNqSwB_proc_T
  *memspace, s_UO30ZLdjVaUTEWcJEu5YnC_proc_T *WorkingSet,
  s_2F24x1ekvOt8ZUO1knVMv_proc__T *QRManager, s_TNXzMnREVvDmNpLFpsTLBC_proc_T
  *CholManager, s_oZGbvi5mjKKebHB9aR5DoG_proc_T *QPObjective, const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  real_T Hessian[21609])
{
  boolean_T isFeasible;
  boolean_T o;
  static const int8_T u[21609] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const char_T t[7] = { 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  for (proc_control_node_B.mLambda = 0; proc_control_node_B.mLambda < 21609;
       proc_control_node_B.mLambda++) {
    Hessian[proc_control_node_B.mLambda] = u[proc_control_node_B.mLambda];
  }

  proc_control_node_B.nVar_tmp_tmp = WorkingSet->nVar;
  proc_control_node_B.mFixed = WorkingSet->sizes[0];
  proc_control_node_B.mIneq_j = WorkingSet->sizes[2];
  proc_control_node_B.mLB = WorkingSet->sizes[3];
  proc_control_node_B.mUB = WorkingSet->sizes[4];
  proc_control_node_B.mConstr_tmp = (((WorkingSet->sizes[0] + WorkingSet->sizes
    [2]) + WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 129;
  proc_control_node_B.mLinIneq_tmp_tmp = WorkingSet->sizes[2] -
    TrialState->mNonlinIneq;
  proc_control_node_B.mLambda = ((WorkingSet->sizes[2] + WorkingSet->sizes[3]) +
    WorkingSet->sizes[4]) + (WorkingSet->sizes[0] << 1);
  if (WorkingSet->nVar > proc_control_node_B.mLambda) {
    proc_control_node_B.mLambda = WorkingSet->nVar;
  }

  proc_control_node_B.qpoptions_MaxIterations = 10 * proc_control_node_B.mLambda;
  TrialState->steplength = 1.0;
  proc_control_node_B.Flags.fevalOK = true;
  proc_control_node_B.Flags.stepAccepted = false;
  proc_control_node_B.Flags.failedLineSearch = false;
  proc_control_node_B.Flags.stepType = 1;
  proc_control_node_B.ix_d = 0;
  while (proc_control_node_B.ix_d <= proc_control_node_B.mConstr_tmp) {
    TrialState->lambdaStopTest.data[proc_control_node_B.ix_d] =
      TrialState->lambdasqp.data[proc_control_node_B.ix_d];
    proc_control_node_B.ix_d++;
  }

  proc_control_nod_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  proc_control_node_B.optimRelativeFactor = fabs(TrialState->
    grad.data[proc_control_node_ixamax(WorkingSet->nVar, TrialState->grad.data)
    - 1]);
  if ((1.0 > proc_control_node_B.optimRelativeFactor) || rtIsNaN
      (proc_control_node_B.optimRelativeFactor)) {
    proc_control_node_B.optimRelativeFactor = 1.0;
  }

  if (rtIsInf(proc_control_node_B.optimRelativeFactor)) {
    proc_control_node_B.optimRelativeFactor = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
      (MeritFunction->nlpPrimalFeasError)) {
    MeritFunction->feasRelativeFactor = 1.0;
  } else {
    MeritFunction->feasRelativeFactor = MeritFunction->nlpPrimalFeasError;
  }

  if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
      (MeritFunction->nlpPrimalFeasError)) {
    proc_control_node_B.p = 1.0;
  } else {
    proc_control_node_B.p = MeritFunction->nlpPrimalFeasError;
  }

  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                proc_control_node_B.p);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data, &o,
    &proc_control_node_B.p);
  proc_control_node_B.Flags.gradOK = o;
  MeritFunction->nlpDualFeasError = proc_control_node_B.p;
  if (!o) {
    proc_control_node_B.Flags.done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = 0.0;
    if (proc_control_node_B.p > 0.0) {
      MeritFunction->firstOrderOpt = proc_control_node_B.p;
    } else {
      MeritFunction->firstOrderOpt = 0.0;
    }

    proc_control_node_B.ix_d = 0;
    while (proc_control_node_B.ix_d <= proc_control_node_B.mConstr_tmp) {
      TrialState->lambdaStopTestPrev.data[proc_control_node_B.ix_d] =
        TrialState->lambdaStopTest.data[proc_control_node_B.ix_d];
      proc_control_node_B.ix_d++;
    }

    if (isFeasible && (proc_control_node_B.p <= 0.02 *
                       proc_control_node_B.optimRelativeFactor)) {
      proc_control_node_B.Flags.done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      proc_control_node_B.Flags.done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        proc_control_node_B.Flags.done = true;
        TrialState->sqpExitFlag = -3;
      }
    }
  }

  proc_control_node_saveJacobian(TrialState, WorkingSet->nVar, WorkingSet->
    sizes[2], WorkingSet->Aineq.data, TrialState->iNonIneq0,
    WorkingSet->Aeq.data, WorkingSet->ldA);
  proc_control_node_saveState(TrialState);
  if (!proc_control_node_B.Flags.done) {
    TrialState->sqpIterations = 1;
  }

  while (!proc_control_node_B.Flags.done) {
    if ((!proc_control_node_B.Flags.stepAccepted) &&
        (!proc_control_node_B.Flags.failedLineSearch)) {
      proc_control_node_B.expl_temp_h.IterDisplayQP = false;
      proc_control_node_B.expl_temp_h.RemainFeasible = false;
      proc_control_node_B.expl_temp_h.ProbRelTolFactor = 1.0;
      proc_control_node_B.expl_temp_h.ConstrRelTolFactor = 1.0;
      proc_control_node_B.expl_temp_h.PricingTolerance = 0.0;
      proc_control_node_B.expl_temp_h.ObjectiveLimit = (rtMinusInf);
      proc_control_node_B.expl_temp_h.ConstraintTolerance = 0.02;
      proc_control_node_B.expl_temp_h.OptimalityTolerance =
        2.2204460492503131E-14;
      proc_control_node_B.expl_temp_h.StepTolerance = 1.0E-6;
      proc_control_node_B.expl_temp_h.MaxIterations =
        proc_control_node_B.qpoptions_MaxIterations;
      for (proc_control_node_B.mLambda = 0; proc_control_node_B.mLambda < 7;
           proc_control_node_B.mLambda++) {
        proc_control_node_B.expl_temp_h.SolverName[proc_control_node_B.mLambda] =
          t[proc_control_node_B.mLambda];
      }
    }

    while ((!proc_control_node_B.Flags.stepAccepted) &&
           (!proc_control_node_B.Flags.failedLineSearch)) {
      if (proc_control_node_B.Flags.stepType != 3) {
        proc_updateWorkingSetForNewQP_l(TrialState->xstarsqp, WorkingSet,
          proc_control_node_B.mIneq_j, TrialState->mNonlinIneq,
          TrialState->cIneq.data, TrialState->cEq, proc_control_node_B.mLB, lb,
          proc_control_node_B.mUB, proc_control_node_B.mFixed);
      }

      proc_control_node_B.mLambda = proc_control_node_B.Flags.stepType;
      proc_control_node_B.expl_temp_f = proc_control_node_B.expl_temp_h;
      isFeasible = proc_control_node_step_k(&proc_control_node_B.mLambda,
        Hessian, lb, TrialState, MeritFunction, memspace, WorkingSet, QRManager,
        CholManager, QPObjective, &proc_control_node_B.expl_temp_f);
      proc_control_node_B.Flags.stepAccepted = isFeasible;
      proc_control_node_B.Flags.stepType = proc_control_node_B.mLambda;
      if (isFeasible) {
        proc_control_node_B.ix_d = 0;
        while (proc_control_node_B.ix_d <= proc_control_node_B.nVar_tmp_tmp - 1)
        {
          TrialState->xstarsqp[proc_control_node_B.ix_d] +=
            TrialState->delta_x.data[proc_control_node_B.ix_d];
          proc_control_node_B.ix_d++;
        }

        proc_control_n_evalObjAndConstr
          (FcnEvaluator->objfun.workspace.runtimedata.x,
           FcnEvaluator->objfun.workspace.runtimedata.lastMV,
           FcnEvaluator->objfun.workspace.runtimedata.ref,
           FcnEvaluator->objfun.workspace.runtimedata.OutputWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVRateWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVScaledTarget,
           FcnEvaluator->nonlcon.workspace.runtimedata.x,
           FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
           FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
           FcnEvaluator->mCineq, TrialState->xstarsqp, TrialState->cIneq.data,
           TrialState->iNonIneq0, TrialState->cEq,
           &proc_control_node_B.optimRelativeFactor, &proc_control_node_B.ix_d);
        TrialState->sqpFval = proc_control_node_B.optimRelativeFactor;
        proc_control_node_B.Flags.fevalOK = (proc_control_node_B.ix_d == 1);
        TrialState->FunctionEvaluations++;
        proc_con_computeLinearResiduals(TrialState->xstarsqp,
          proc_control_node_B.nVar_tmp_tmp, TrialState->cIneq.data,
          &TrialState->cIneq.size, proc_control_node_B.mLinIneq_tmp_tmp,
          WorkingSet->Aineq.data, bineq_data, WorkingSet->ldA);
        MeritFunction->phiFullStep = proc_control_no_computeMeritFcn
          (MeritFunction->penaltyParam, proc_control_node_B.optimRelativeFactor,
           TrialState->cIneq.data, proc_control_node_B.mIneq_j, TrialState->cEq,
           proc_control_node_B.Flags.fevalOK);
      }

      if ((proc_control_node_B.mLambda == 1) && isFeasible &&
          proc_control_node_B.Flags.fevalOK && (MeritFunction->phi <
           MeritFunction->phiFullStep) && (TrialState->sqpFval <
           TrialState->sqpFval_old)) {
        proc_control_node_B.Flags.stepType = 3;
        proc_control_node_B.Flags.stepAccepted = false;
      } else {
        proc_control_node_linesearch(&proc_control_node_B.Flags.fevalOK,
          bineq_data, WorkingSet->nVar, WorkingSet->ldA, WorkingSet->Aineq.data,
          TrialState, MeritFunction->penaltyParam, MeritFunction->phi,
          MeritFunction->phiPrimePlus, MeritFunction->phiFullStep,
          &FcnEvaluator->objfun.workspace.runtimedata,
          &FcnEvaluator->nonlcon.workspace.runtimedata, FcnEvaluator->mCineq,
          (proc_control_node_B.mLambda == 3) && isFeasible,
          &proc_control_node_B.optimRelativeFactor, &proc_control_node_B.ix_d);
        TrialState->steplength = proc_control_node_B.optimRelativeFactor;
        if (proc_control_node_B.ix_d > 0) {
          proc_control_node_B.Flags.stepAccepted = true;
        } else {
          proc_control_node_B.Flags.failedLineSearch = true;
        }
      }
    }

    if (proc_control_node_B.Flags.stepAccepted &&
        (!proc_control_node_B.Flags.failedLineSearch)) {
      proc_control_node_B.ix_d = 0;
      while (proc_control_node_B.ix_d <= proc_control_node_B.nVar_tmp_tmp - 1) {
        TrialState->xstarsqp[proc_control_node_B.ix_d] =
          TrialState->xstarsqp_old[proc_control_node_B.ix_d] +
          TrialState->delta_x.data[proc_control_node_B.ix_d];
        proc_control_node_B.ix_d++;
      }

      proc_control_node_B.ix_d = 0;
      while (proc_control_node_B.ix_d <= proc_control_node_B.mConstr_tmp) {
        TrialState->lambdasqp.data[proc_control_node_B.ix_d] +=
          (TrialState->lambda.data[proc_control_node_B.ix_d] -
           TrialState->lambdasqp.data[proc_control_node_B.ix_d]) *
          TrialState->steplength;
        proc_control_node_B.ix_d++;
      }

      proc_control_node_saveState(TrialState);
      proc_control_node_B.Flags.gradOK = true;
      memcpy(&proc_control_node_B.TrialState_p[0], &TrialState->xstarsqp[0],
             147U * sizeof(real_T));
      evalObjAndConstrAndDerivatives
        (FcnEvaluator->objfun.workspace.runtimedata.x,
         FcnEvaluator->objfun.workspace.runtimedata.lastMV,
         FcnEvaluator->objfun.workspace.runtimedata.ref,
         FcnEvaluator->objfun.workspace.runtimedata.OutputWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVRateWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVScaledTarget,
         FcnEvaluator->nonlcon.workspace.runtimedata.x,
         FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
         FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
         FcnEvaluator->mCineq, proc_control_node_B.TrialState_p,
         TrialState->grad.data, TrialState->cIneq.data, TrialState->iNonIneq0,
         TrialState->cEq, WorkingSet->Aineq.data, TrialState->iNonIneq0,
         WorkingSet->ldA, WorkingSet->Aeq.data, WorkingSet->ldA,
         &TrialState->sqpFval, &proc_control_node_B.mLambda);
      TrialState->FunctionEvaluations++;
      proc_control_node_B.Flags.fevalOK = (proc_control_node_B.mLambda == 1);
    } else {
      TrialState->sqpFval = TrialState->sqpFval_old;
      memcpy(&TrialState->xstarsqp[0], &TrialState->xstarsqp_old[0], 147U *
             sizeof(real_T));
      proc_control_node_B.ix_d = TrialState->cIneq.size;
      proc_control_node_B.idxLambdaNonlinIneq = TrialState->cIneq.size;
      if (0 <= proc_control_node_B.idxLambdaNonlinIneq - 1) {
        memcpy(&proc_control_node_B.y_data_l[0], &TrialState->cIneq.data[0],
               proc_control_node_B.idxLambdaNonlinIneq * sizeof(real_T));
      }

      proc_control_node_B.mLambda = 0;
      while (proc_control_node_B.mLambda <= TrialState->mIneq - 1) {
        proc_control_node_B.y_data_l[proc_control_node_B.mLambda] =
          TrialState->cIneq_old.data[proc_control_node_B.mLambda];
        proc_control_node_B.mLambda++;
      }

      if (0 <= proc_control_node_B.ix_d - 1) {
        memcpy(&TrialState->cIneq.data[0], &proc_control_node_B.y_data_l[0],
               proc_control_node_B.ix_d * sizeof(real_T));
      }

      memcpy(&TrialState->cEq[0], &TrialState->cEq_old[0], 130U * sizeof(real_T));
    }

    proc_control_node_test_exit(&proc_control_node_B.Flags, memspace,
      MeritFunction, fscales_lineq_constraint_size,
      fscales_cineq_constraint_size, WorkingSet, TrialState, QRManager, lb);
    if ((!proc_control_node_B.Flags.done) &&
        proc_control_node_B.Flags.stepAccepted) {
      proc_control_node_B.Flags.stepAccepted = false;
      proc_control_node_B.Flags.stepType = 1;
      proc_control_node_B.Flags.failedLineSearch = false;
      proc_control_node_B.idxLambdaNonlinIneq = proc_control_node_B.mFixed +
        TrialState->iNonIneq0;
      proc_control_node_B.mLambda = WorkingSet->ldA;
      proc_control_node_B.ix_d = 0;
      while (proc_control_node_B.ix_d <= proc_control_node_B.nVar_tmp_tmp - 1) {
        TrialState->delta_gradLag.data[proc_control_node_B.ix_d] =
          TrialState->grad.data[proc_control_node_B.ix_d];
        proc_control_node_B.ix_d++;
      }

      if (proc_control_node_B.nVar_tmp_tmp >= 1) {
        proc_control_node_B.ix_d = 0;
        while (proc_control_node_B.ix_d <= proc_control_node_B.nVar_tmp_tmp - 1)
        {
          TrialState->delta_gradLag.data[proc_control_node_B.ix_d] +=
            -TrialState->grad_old.data[proc_control_node_B.ix_d];
          proc_control_node_B.ix_d++;
        }
      }

      proc_control_xgemv_mtmcjbiadz2i(proc_control_node_B.nVar_tmp_tmp, 130,
        WorkingSet->Aeq.data, 1, WorkingSet->ldA, TrialState->lambdasqp.data,
        proc_control_node_B.mFixed + 1, TrialState->delta_gradLag.data);
      proc_control_node_B.ix_d = proc_control_node_B.mFixed;
      proc_control_node_B.b_c_c = WorkingSet->ldA * 129 + 1;
      proc_control_node_B.b_iy = 1;
      while (((proc_control_node_B.mLambda > 0) && (proc_control_node_B.b_iy <=
               proc_control_node_B.b_c_c)) || ((proc_control_node_B.mLambda < 0)
              && (proc_control_node_B.b_iy >= proc_control_node_B.b_c_c))) {
        proc_control_node_B.iy = 0;
        proc_control_node_B.b_ia = (proc_control_node_B.b_iy +
          proc_control_node_B.nVar_tmp_tmp) - 1;
        proc_control_node_B.ia_g = proc_control_node_B.b_iy;
        while (proc_control_node_B.ia_g <= proc_control_node_B.b_ia) {
          TrialState->delta_gradLag.data[proc_control_node_B.iy] +=
            TrialState->JacCeqTrans_old.data[proc_control_node_B.ia_g - 1] *
            -TrialState->lambdasqp.data[proc_control_node_B.ix_d];
          proc_control_node_B.iy++;
          proc_control_node_B.ia_g++;
        }

        proc_control_node_B.ix_d++;
        proc_control_node_B.b_iy += proc_control_node_B.mLambda;
      }

      if (TrialState->mNonlinIneq > 0) {
        proc_control_xgemv_mtmcjbiadz2i(proc_control_node_B.nVar_tmp_tmp,
          TrialState->mNonlinIneq, WorkingSet->Aineq.data, WorkingSet->ldA *
          (TrialState->iNonIneq0 - 1) + 1, WorkingSet->ldA,
          TrialState->lambdasqp.data, proc_control_node_B.idxLambdaNonlinIneq +
          130, TrialState->delta_gradLag.data);
        proc_control_node_B.ix_d = (TrialState->mNonlinIneq - 1) *
          WorkingSet->ldA + 1;
        proc_control_node_B.b_c_c = 1;
        while (((proc_control_node_B.mLambda > 0) && (proc_control_node_B.b_c_c <=
                 proc_control_node_B.ix_d)) || ((proc_control_node_B.mLambda < 0)
                && (proc_control_node_B.b_c_c >= proc_control_node_B.ix_d))) {
          proc_control_node_B.b_iy = 0;
          proc_control_node_B.iy = (proc_control_node_B.b_c_c +
            proc_control_node_B.nVar_tmp_tmp) - 1;
          proc_control_node_B.b_ia = proc_control_node_B.b_c_c;
          while (proc_control_node_B.b_ia <= proc_control_node_B.iy) {
            TrialState->delta_gradLag.data[proc_control_node_B.b_iy] +=
              TrialState->JacCineqTrans_old.data[proc_control_node_B.b_ia - 1] *
              -TrialState->
              lambdasqp.data[proc_control_node_B.idxLambdaNonlinIneq + 129];
            proc_control_node_B.b_iy++;
            proc_control_node_B.b_ia++;
          }

          proc_control_node_B.idxLambdaNonlinIneq++;
          proc_control_node_B.b_c_c += proc_control_node_B.mLambda;
        }
      }

      proc_control_node_saveJacobian(TrialState,
        proc_control_node_B.nVar_tmp_tmp, proc_control_node_B.mIneq_j,
        WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->Aeq.data,
        WorkingSet->ldA);
      proc_control_node_B.ix_d = memspace->workspace_double.size[0] *
        memspace->workspace_double.size[1];
      for (proc_control_node_B.mLambda = 0; proc_control_node_B.mLambda <
           proc_control_node_B.ix_d; proc_control_node_B.mLambda++) {
      }

      proc_control_node_BFGSUpdate(proc_control_node_B.nVar_tmp_tmp, Hessian,
        TrialState->delta_x.data, TrialState->delta_gradLag.data,
        memspace->workspace_double.data);
      TrialState->sqpIterations++;
    }
  }
}

// Function for MATLAB Function: '<S228>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_fmincon(const
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *fun_workspace_runtimedata, const
  szeIbzRjxClbCFpzxneSihD_proc__T *fun_workspace_userdata, const real_T x0[147],
  const real_T Aineq_data[], const real_T bineq_data[], const int32_T
  *bineq_size, const real_T lb[147], const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *nonlcon_workspace_runtimedata, const szeIbzRjxClbCFpzxneSihD_proc__T
  *nonlcon_workspace_userdata, real_T x[147], real_T *fval, real_T *exitflag,
  real_T *output_iterations, real_T *output_funcCount, char_T output_algorithm[3],
  real_T *output_constrviolation, real_T *output_stepsize, real_T
  *output_lssteplength, real_T *output_firstorderopt)
{
  proc_control_node_anon(nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, x0,
    proc_control_node_B.varargout_1_data, proc_control_node_B.varargout_1_size,
    proc_control_node_B.TrialState.cEq, proc_control_node_B.varargout_3_data,
    proc_control_node_B.varargout_3_size, proc_control_node_B.varargout_4);
  proc_control_node_B.mNonlinIneq = proc_control_node_B.varargout_1_size[0] *
    proc_control_node_B.varargout_1_size[1];
  proc_control_node_B.mIneq = *bineq_size + proc_control_node_B.mNonlinIneq;
  proc_control_node_B.mConstrMax = (proc_control_node_B.mIneq +
    proc_control_node_B.mIneq) + 685;
  if (proc_control_node_B.mIneq + 408 > proc_control_node_B.mConstrMax) {
    proc_control_node_B.maxDims = proc_control_node_B.mIneq + 408;
  } else {
    proc_control_node_B.maxDims = proc_control_node_B.mConstrMax;
  }

  proc_control_n_factoryConstruct(proc_control_node_B.mIneq + 408,
    proc_control_node_B.mConstrMax, proc_control_node_B.mIneq,
    proc_control_node_B.mNonlinIneq, &proc_control_node_B.TrialState);
  memcpy(&proc_control_node_B.TrialState.xstarsqp[0], &x0[0], 147U * sizeof
         (real_T));
  proc_control_node_B.FcnEvaluator.objfun.workspace.runtimedata =
    *fun_workspace_runtimedata;
  proc_control_node_B.FcnEvaluator.objfun.workspace.userdata =
    *fun_workspace_userdata;
  proc_control_node_B.FcnEvaluator.nonlcon.workspace.runtimedata =
    *nonlcon_workspace_runtimedata;
  proc_control_node_B.FcnEvaluator.nonlcon.workspace.userdata =
    *nonlcon_workspace_userdata;
  proc_control_node_B.FcnEvaluator.nVar = 147;
  proc_control_node_B.FcnEvaluator.mCineq = proc_control_node_B.mNonlinIneq;
  proc_control_node_B.FcnEvaluator.mCeq = 130;
  proc_control_node_B.FcnEvaluator.NonFiniteSupport = true;
  proc_control_node_B.FcnEvaluator.SpecifyObjectiveGradient = true;
  proc_control_node_B.FcnEvaluator.SpecifyConstraintGradient = true;
  proc_control_node_B.FcnEvaluator.ScaleProblem = false;
  proc_cont_factoryConstruct_lnz4(proc_control_node_B.mIneq + 408,
    &proc_control_node_B.QPObjective.grad.size,
    &proc_control_node_B.QPObjective.Hx.size,
    &proc_control_node_B.QPObjective.hasLinear,
    &proc_control_node_B.QPObjective.nvar,
    &proc_control_node_B.QPObjective.maxVar,
    &proc_control_node_B.QPObjective.beta, &proc_control_node_B.QPObjective.rho,
    &proc_control_node_B.QPObjective.objtype,
    &proc_control_node_B.QPObjective.prev_objtype,
    &proc_control_node_B.QPObjective.prev_nvar,
    &proc_control_node_B.QPObjective.prev_hasLinear,
    &proc_control_node_B.QPObjective.gammaScalar);
  proc_control_node_B.QPObjective.hasLinear = true;
  proc_control_node_B.QPObjective.nvar = 147;
  proc_control_node_B.QPObjective.objtype = 3;
  proc_control_node_B.memspace.workspace_double.size[0] =
    proc_control_node_B.maxDims;
  proc_control_node_B.memspace.workspace_double.size[1] =
    proc_control_node_B.mIneq + 408;
  proc_control_node_B.memspace.workspace_int.size = proc_control_node_B.maxDims;
  proc_control_node_B.memspace.workspace_sort.size = proc_control_node_B.maxDims;
  proc_con_factoryConstruct_lnz42(proc_control_node_B.mIneq,
    proc_control_node_B.mIneq + 408, proc_control_node_B.mConstrMax,
    &proc_control_node_B.WorkingSet);
  proc_control_node_B.k_e = 0;
  for (proc_control_node_B.c_idx = 0; proc_control_node_B.c_idx < 147;
       proc_control_node_B.c_idx++) {
    proc_control_node_B.lb = lb[proc_control_node_B.c_idx];
    if ((!rtIsInf(proc_control_node_B.lb)) && (!rtIsNaN(proc_control_node_B.lb)))
    {
      proc_control_node_B.k_e++;
      proc_control_node_B.WorkingSet.indexLB.data[proc_control_node_B.k_e - 1] =
        proc_control_node_B.c_idx + 1;
    }
  }

  proc_control_node_loadProblem(&proc_control_node_B.WorkingSet,
    proc_control_node_B.mIneq, *bineq_size, Aineq_data, proc_control_node_B.k_e,
    0, 0, proc_control_node_B.mConstrMax);
  proc_control_node_B.mConstrMax = 0;
  while (proc_control_node_B.mConstrMax <= proc_control_node_B.k_e - 1) {
    proc_control_node_B.lb =
      proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.WorkingSet.indexLB.data
      [proc_control_node_B.mConstrMax] - 1];
    proc_control_node_B.scale_m =
      lb[proc_control_node_B.WorkingSet.indexLB.data[proc_control_node_B.mConstrMax]
      - 1];
    if ((proc_control_node_B.lb > proc_control_node_B.scale_m) || rtIsNaN
        (proc_control_node_B.scale_m)) {
      proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.WorkingSet.indexLB.data
        [proc_control_node_B.mConstrMax] - 1] = proc_control_node_B.lb;
    } else {
      proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.WorkingSet.indexLB.data
        [proc_control_node_B.mConstrMax] - 1] = proc_control_node_B.scale_m;
    }

    proc_control_node_B.mConstrMax++;
  }

  evalObjAndConstrAndDerivatives(fun_workspace_runtimedata->x,
    fun_workspace_runtimedata->lastMV, fun_workspace_runtimedata->ref,
    fun_workspace_runtimedata->OutputWeights,
    fun_workspace_runtimedata->MVWeights,
    fun_workspace_runtimedata->MVRateWeights,
    fun_workspace_runtimedata->MVScaledTarget, nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, proc_control_node_B.mNonlinIneq,
    proc_control_node_B.TrialState.xstarsqp,
    proc_control_node_B.TrialState.grad.data,
    proc_control_node_B.TrialState.cIneq.data,
    proc_control_node_B.TrialState.iNonIneq0, proc_control_node_B.TrialState.cEq,
    proc_control_node_B.WorkingSet.Aineq.data,
    proc_control_node_B.TrialState.iNonIneq0, proc_control_node_B.WorkingSet.ldA,
    proc_control_node_B.WorkingSet.Aeq.data, proc_control_node_B.WorkingSet.ldA,
    &proc_control_node_B.lb, &proc_control_node_B.mConstrMax);
  proc_control_node_B.TrialState.sqpFval = proc_control_node_B.lb;
  proc_control_node_B.TrialState.FunctionEvaluations = 1;
  proc_control_node_B.mConstrMax = proc_control_node_B.WorkingSet.ldA;
  if (*bineq_size > 0) {
    proc_control_node_B.b_y_size_idx_0 =
      proc_control_node_B.TrialState.cIneq.size;
    proc_control_node_B.loop_ub = proc_control_node_B.TrialState.cIneq.size;
    if (0 <= proc_control_node_B.loop_ub - 1) {
      memcpy(&proc_control_node_B.b_y_data[0],
             &proc_control_node_B.TrialState.cIneq.data[0],
             proc_control_node_B.loop_ub * sizeof(real_T));
    }

    proc_control_node_B.c_idx = 0;
    while (proc_control_node_B.c_idx <= *bineq_size - 1) {
      proc_control_node_B.b_y_data[proc_control_node_B.c_idx] =
        bineq_data[proc_control_node_B.c_idx];
      proc_control_node_B.c_idx++;
    }

    if (0 <= proc_control_node_B.b_y_size_idx_0 - 1) {
      memcpy(&proc_control_node_B.TrialState.cIneq.data[0],
             &proc_control_node_B.b_y_data[0],
             proc_control_node_B.b_y_size_idx_0 * sizeof(real_T));
    }

    proc_control_node_B.c_idx = 0;
    while (proc_control_node_B.c_idx <= *bineq_size - 1) {
      proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.c_idx] =
        -proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.c_idx];
      proc_control_node_B.c_idx++;
    }

    proc_control_node_B.c_idx = 0;
    proc_control_node_B.loop_ub = (*bineq_size - 1) *
      proc_control_node_B.WorkingSet.ldA + 1;
    proc_control_node_B.b_y_size_idx_0 = 1;
    while (((proc_control_node_B.mConstrMax > 0) &&
            (proc_control_node_B.b_y_size_idx_0 <= proc_control_node_B.loop_ub))
           || ((proc_control_node_B.mConstrMax < 0) &&
               (proc_control_node_B.b_y_size_idx_0 >=
                proc_control_node_B.loop_ub))) {
      proc_control_node_B.ix_i = 0;
      proc_control_node_B.scale_m = 0.0;
      proc_control_node_B.ia_o = proc_control_node_B.b_y_size_idx_0;
      while (proc_control_node_B.ia_o <= proc_control_node_B.b_y_size_idx_0 +
             146) {
        proc_control_node_B.scale_m +=
          proc_control_node_B.WorkingSet.Aineq.data[proc_control_node_B.ia_o - 1]
          * proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.ix_i];
        proc_control_node_B.ix_i++;
        proc_control_node_B.ia_o++;
      }

      proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.c_idx] +=
        proc_control_node_B.scale_m;
      proc_control_node_B.c_idx++;
      proc_control_node_B.b_y_size_idx_0 += proc_control_node_B.mConstrMax;
    }
  }

  proc_c_updateWorkingSetForNewQP(x0, &proc_control_node_B.WorkingSet,
    proc_control_node_B.mIneq, proc_control_node_B.TrialState.cIneq.data,
    proc_control_node_B.TrialState.cEq, proc_control_node_B.k_e, lb, 0, 0);
  proc_control_node_initActiveSet(&proc_control_node_B.WorkingSet);
  proc_control_node_B.MeritFunction.penaltyParam = 1.0;
  proc_control_node_B.MeritFunction.threshold = 0.0001;
  proc_control_node_B.MeritFunction.nPenaltyDecreases = 0;
  proc_control_node_B.MeritFunction.linearizedConstrViol = 0.0;
  proc_control_node_B.MeritFunction.initFval = proc_control_node_B.lb;
  proc_control_node_B.lb = 0.0;
  for (proc_control_node_B.k_e = 0; proc_control_node_B.k_e < 130;
       proc_control_node_B.k_e++) {
    proc_control_node_B.lb += fabs
      (proc_control_node_B.TrialState.cEq[proc_control_node_B.k_e]);
  }

  proc_control_node_B.MeritFunction.initConstrViolationEq =
    proc_control_node_B.lb;
  proc_control_node_B.lb = 0.0;
  proc_control_node_B.k_e = 0;
  while (proc_control_node_B.k_e <= proc_control_node_B.mIneq - 1) {
    if (proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.k_e] > 0.0)
    {
      proc_control_node_B.lb +=
        proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.k_e];
    }

    proc_control_node_B.k_e++;
  }

  proc_control_node_B.MeritFunction.initConstrViolationIneq =
    proc_control_node_B.lb;
  proc_control_node_B.MeritFunction.phi = 0.0;
  proc_control_node_B.MeritFunction.phiPrimePlus = 0.0;
  proc_control_node_B.MeritFunction.phiFullStep = 0.0;
  proc_control_node_B.MeritFunction.feasRelativeFactor = 0.0;
  proc_control_node_B.MeritFunction.nlpPrimalFeasError = 0.0;
  proc_control_node_B.MeritFunction.nlpDualFeasError = 0.0;
  proc_control_node_B.MeritFunction.nlpComplError = 0.0;
  proc_control_node_B.MeritFunction.firstOrderOpt = 0.0;
  proc_control_node_B.MeritFunction.hasObjective = true;
  proc_contro_factoryConstruct_ln(proc_control_node_B.maxDims,
    proc_control_node_B.maxDims, &proc_control_node_B.QRManager.ldq,
    proc_control_node_B.QRManager.QR.size, proc_control_node_B.QRManager.Q.data,
    proc_control_node_B.QRManager.Q.size,
    proc_control_node_B.QRManager.jpvt.data,
    &proc_control_node_B.QRManager.jpvt.size,
    &proc_control_node_B.QRManager.mrows, &proc_control_node_B.QRManager.ncols,
    &proc_control_node_B.QRManager.tau.size,
    &proc_control_node_B.QRManager.minRowCol,
    &proc_control_node_B.QRManager.usedPivoting);
  proc_contr_factoryConstruct_lnz(proc_control_node_B.maxDims,
    proc_control_node_B.CholManager.FMat.size,
    &proc_control_node_B.CholManager.ldm, &proc_control_node_B.CholManager.ndims,
    &proc_control_node_B.CholManager.info,
    &proc_control_node_B.CholManager.scaleFactor,
    &proc_control_node_B.CholManager.ConvexCheck,
    &proc_control_node_B.CholManager.regTol_,
    &proc_control_node_B.CholManager.workspace_,
    &proc_control_node_B.CholManager.workspace2_);
  proc_control_node_B.tmp_size_j = *bineq_size;
  proc_control_node_B.tmp_size_k = proc_control_node_B.mNonlinIneq;
  proc_control_node_driver(bineq_data, lb, &proc_control_node_B.TrialState,
    &proc_control_node_B.MeritFunction, &proc_control_node_B.FcnEvaluator,
    &proc_control_node_B.memspace, &proc_control_node_B.WorkingSet,
    &proc_control_node_B.QRManager, &proc_control_node_B.CholManager,
    &proc_control_node_B.QPObjective, &proc_control_node_B.tmp_size_j,
    &proc_control_node_B.tmp_size_k, proc_control_node_B.unusedExpr);
  *fval = proc_control_node_B.TrialState.sqpFval;
  *exitflag = proc_control_node_B.TrialState.sqpExitFlag;
  *output_iterations = proc_control_node_B.TrialState.sqpIterations;
  *output_funcCount = proc_control_node_B.TrialState.FunctionEvaluations;
  output_algorithm[0] = 's';
  output_algorithm[1] = 'q';
  output_algorithm[2] = 'p';
  *output_constrviolation = proc_control_node_B.MeritFunction.nlpPrimalFeasError;
  proc_control_node_B.lb = 0.0;
  proc_control_node_B.scale_m = 3.3121686421112381E-170;
  for (proc_control_node_B.mNonlinIneq = 0; proc_control_node_B.mNonlinIneq <
       147; proc_control_node_B.mNonlinIneq++) {
    x[proc_control_node_B.mNonlinIneq] =
      proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.mNonlinIneq];
    proc_control_node_B.absxk_o = fabs
      (proc_control_node_B.TrialState.delta_x.data[proc_control_node_B.mNonlinIneq]);
    if (proc_control_node_B.absxk_o > proc_control_node_B.scale_m) {
      proc_control_node_B.t_g = proc_control_node_B.scale_m /
        proc_control_node_B.absxk_o;
      proc_control_node_B.lb = proc_control_node_B.lb * proc_control_node_B.t_g *
        proc_control_node_B.t_g + 1.0;
      proc_control_node_B.scale_m = proc_control_node_B.absxk_o;
    } else {
      proc_control_node_B.t_g = proc_control_node_B.absxk_o /
        proc_control_node_B.scale_m;
      proc_control_node_B.lb += proc_control_node_B.t_g *
        proc_control_node_B.t_g;
    }
  }

  *output_stepsize = proc_control_node_B.scale_m * sqrt(proc_control_node_B.lb);
  *output_lssteplength = proc_control_node_B.TrialState.steplength;
  *output_firstorderopt = proc_control_node_B.MeritFunction.firstOrderOpt;
}

boolean_T proc_control_nodeModelClass::proc_control_node_isequal_b4(const real_T
  varargin_1[3], const real_T varargin_2[3])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 3)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

boolean_T proc_control_nodeModelClass::proc_control_node_isequal_b4n(const
  real_T varargin_1[6], const real_T varargin_2[6])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 6)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

// Function for MATLAB Function: '<S179>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_o(int32_T n, const
  real_T x[384], int32_T ix0)
{
  real_T absxk;
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_l = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        absxk = fabs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_l) {
          t = proc_control_node_B.scale_l / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_l = absxk;
        } else {
          t = absxk / proc_control_node_B.scale_l;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_l * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_bw(int32_T m, int32_T
  n, const real_T A[384], int32_T ia0, const real_T x[384], int32_T ix0, real_T
  y[12])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = ((n - 1) << 5) + ia0;
    for (iac = ia0; iac <= b; iac += 32) {
      ix = ix0;
      proc_control_node_B.c_dk = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_dk += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_dk;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_j(int32_T m, int32_T n,
  real_T alpha1, int32_T ix0, const real_T y[12], real_T A[384], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jA;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    jA = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_p = y[jy] * alpha1;
        ix = ix0;
        b = m + jA;
        for (ijA = jA; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_p;
          ix++;
        }
      }

      jy++;
      jA += 32;
    }
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_xzlarf_f(int32_T m, int32_T
  n, int32_T iv0, real_T tau, real_T C[384], int32_T ic0, real_T work[12])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_j = m;
    proc_control_node_B.lastc_j = iv0 + m;
    while ((proc_control_node_B.lastv_j > 0) && (C[proc_control_node_B.lastc_j -
            2] == 0.0)) {
      proc_control_node_B.lastv_j--;
      proc_control_node_B.lastc_j--;
    }

    proc_control_node_B.lastc_j = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_j > 0)) {
      proc_control_node_B.coltop_k = ((proc_control_node_B.lastc_j - 1) << 5) +
        ic0;
      proc_control_node_B.ia_k = proc_control_node_B.coltop_k;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_k <= (proc_control_node_B.coltop_k +
             proc_control_node_B.lastv_j) - 1) {
          if (C[proc_control_node_B.ia_k - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_k++;
          }
        } else {
          proc_control_node_B.lastc_j--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_j = 0;
    proc_control_node_B.lastc_j = 0;
  }

  if (proc_control_node_B.lastv_j > 0) {
    proc_control_node_xgemv_bw(proc_control_node_B.lastv_j,
      proc_control_node_B.lastc_j, C, ic0, C, iv0, work);
    proc_control_node_xgerc_j(proc_control_node_B.lastv_j,
      proc_control_node_B.lastc_j, -tau, iv0, work, C, ic0);
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrf_hd(real_T A[384],
  int32_T ia0, int32_T m, int32_T n, int32_T nfxd, real_T tau[12])
{
  memset(&proc_control_node_B.work_os[0], 0, 12U * sizeof(real_T));
  proc_control_node_B.i_k = 0;
  while (proc_control_node_B.i_k <= nfxd - 1) {
    proc_control_node_B.ii_e = (((proc_control_node_B.i_k << 5) + ia0) +
      proc_control_node_B.i_k) - 1;
    proc_control_node_B.mmi_tmp_m = m - proc_control_node_B.i_k;
    if (proc_control_node_B.i_k + 1 < m) {
      proc_control_node_B.b_atmp_d = A[proc_control_node_B.ii_e];
      tau[proc_control_node_B.i_k] = 0.0;
      if (proc_control_node_B.mmi_tmp_m > 0) {
        proc_control_node_B.beta1_k = proc_control_node_xnrm2_o
          (proc_control_node_B.mmi_tmp_m - 1, A, proc_control_node_B.ii_e + 2);
        if (proc_control_node_B.beta1_k != 0.0) {
          proc_control_node_B.beta1_k = proc_control_node_rt_hypotd_snf
            (A[proc_control_node_B.ii_e], proc_control_node_B.beta1_k);
          if (A[proc_control_node_B.ii_e] >= 0.0) {
            proc_control_node_B.beta1_k = -proc_control_node_B.beta1_k;
          }

          if (fabs(proc_control_node_B.beta1_k) < 1.0020841800044864E-292) {
            proc_control_node_B.knt_b = -1;
            proc_control_node_B.mmip1_i = proc_control_node_B.ii_e +
              proc_control_node_B.mmi_tmp_m;
            do {
              proc_control_node_B.knt_b++;
              proc_control_node_B.b_k_a = proc_control_node_B.ii_e + 1;
              while (proc_control_node_B.b_k_a + 1 <=
                     proc_control_node_B.mmip1_i) {
                A[proc_control_node_B.b_k_a] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_a++;
              }

              proc_control_node_B.beta1_k *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp_d *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1_k) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1_k = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp_d, proc_control_node_xnrm2_o
               (proc_control_node_B.mmi_tmp_m - 1, A, proc_control_node_B.ii_e +
                2));
            if (proc_control_node_B.b_atmp_d >= 0.0) {
              proc_control_node_B.beta1_k = -proc_control_node_B.beta1_k;
            }

            tau[proc_control_node_B.i_k] = (proc_control_node_B.beta1_k -
              proc_control_node_B.b_atmp_d) / proc_control_node_B.beta1_k;
            proc_control_node_B.b_atmp_d = 1.0 / (proc_control_node_B.b_atmp_d -
              proc_control_node_B.beta1_k);
            proc_control_node_B.b_k_a = proc_control_node_B.ii_e + 1;
            while (proc_control_node_B.b_k_a + 1 <= proc_control_node_B.mmip1_i)
            {
              A[proc_control_node_B.b_k_a] *= proc_control_node_B.b_atmp_d;
              proc_control_node_B.b_k_a++;
            }

            proc_control_node_B.mmip1_i = 0;
            while (proc_control_node_B.mmip1_i <= proc_control_node_B.knt_b) {
              proc_control_node_B.beta1_k *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1_i++;
            }

            proc_control_node_B.b_atmp_d = proc_control_node_B.beta1_k;
          } else {
            tau[proc_control_node_B.i_k] = (proc_control_node_B.beta1_k -
              A[proc_control_node_B.ii_e]) / proc_control_node_B.beta1_k;
            proc_control_node_B.b_atmp_d = 1.0 / (A[proc_control_node_B.ii_e] -
              proc_control_node_B.beta1_k);
            proc_control_node_B.knt_b = proc_control_node_B.ii_e +
              proc_control_node_B.mmi_tmp_m;
            proc_control_node_B.mmip1_i = proc_control_node_B.ii_e + 1;
            while (proc_control_node_B.mmip1_i + 1 <= proc_control_node_B.knt_b)
            {
              A[proc_control_node_B.mmip1_i] *= proc_control_node_B.b_atmp_d;
              proc_control_node_B.mmip1_i++;
            }

            proc_control_node_B.b_atmp_d = proc_control_node_B.beta1_k;
          }
        }
      }

      A[proc_control_node_B.ii_e] = proc_control_node_B.b_atmp_d;
    } else {
      tau[proc_control_node_B.i_k] = 0.0;
    }

    if (proc_control_node_B.i_k + 1 < n) {
      proc_control_node_B.b_atmp_d = A[proc_control_node_B.ii_e];
      A[proc_control_node_B.ii_e] = 1.0;
      proc_control_node_xzlarf_f(proc_control_node_B.mmi_tmp_m, (n -
        proc_control_node_B.i_k) - 1, proc_control_node_B.ii_e + 1,
        tau[proc_control_node_B.i_k], A, proc_control_node_B.ii_e + 33,
        proc_control_node_B.work_os);
      A[proc_control_node_B.ii_e] = proc_control_node_B.b_atmp_d;
    }

    proc_control_node_B.i_k++;
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_p(real_T A[384],
  real_T tau[12])
{
  memset(&tau[0], 0, 12U * sizeof(real_T));
  proc_control_node_qrf_hd(A, 1, 32, 12, 12, tau);
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_xorgqr_n(int32_T m, int32_T
  n, int32_T k, real_T A[384], int32_T ia0, const real_T tau[12], int32_T itau0)
{
  if (n >= 1) {
    proc_control_node_B.itau_k = k;
    while (proc_control_node_B.itau_k <= n - 1) {
      proc_control_node_B.i_ia = ((proc_control_node_B.itau_k << 5) + ia0) - 1;
      proc_control_node_B.iaii_n = 0;
      while (proc_control_node_B.iaii_n <= m - 1) {
        A[proc_control_node_B.i_ia + proc_control_node_B.iaii_n] = 0.0;
        proc_control_node_B.iaii_n++;
      }

      A[proc_control_node_B.i_ia + proc_control_node_B.itau_k] = 1.0;
      proc_control_node_B.itau_k++;
    }

    proc_control_node_B.itau_k = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_ku[0], 0, 12U * sizeof(real_T));
    proc_control_node_B.i_ia = k;
    while (proc_control_node_B.i_ia >= 1) {
      proc_control_node_B.iaii_n = ((((proc_control_node_B.i_ia - 1) << 5) + ia0)
        + proc_control_node_B.i_ia) - 1;
      if (proc_control_node_B.i_ia < n) {
        A[proc_control_node_B.iaii_n - 1] = 1.0;
        proc_control_node_xzlarf_f((m - proc_control_node_B.i_ia) + 1, n -
          proc_control_node_B.i_ia, proc_control_node_B.iaii_n,
          tau[proc_control_node_B.itau_k], A, proc_control_node_B.iaii_n + 32,
          proc_control_node_B.work_ku);
      }

      if (proc_control_node_B.i_ia < m) {
        proc_control_node_B.b_f = (proc_control_node_B.iaii_n + m) -
          proc_control_node_B.i_ia;
        proc_control_node_B.b_k_m = proc_control_node_B.iaii_n;
        while (proc_control_node_B.b_k_m + 1 <= proc_control_node_B.b_f) {
          A[proc_control_node_B.b_k_m] *= -tau[proc_control_node_B.itau_k];
          proc_control_node_B.b_k_m++;
        }
      }

      A[proc_control_node_B.iaii_n - 1] = 1.0 - tau[proc_control_node_B.itau_k];
      proc_control_node_B.b_f = 0;
      while (proc_control_node_B.b_f <= proc_control_node_B.i_ia - 2) {
        A[(proc_control_node_B.iaii_n - proc_control_node_B.b_f) - 2] = 0.0;
        proc_control_node_B.b_f++;
      }

      proc_control_node_B.itau_k--;
      proc_control_node_B.i_ia--;
    }
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_qr_b(const real_T A[384],
  real_T Q[384], real_T R[144])
{
  memcpy(&proc_control_node_B.b_A_i[0], &A[0], 384U * sizeof(real_T));
  proc_control_node_xgeqrf_p(proc_control_node_B.b_A_i,
    proc_control_node_B.tau_be);
  for (proc_control_node_B.j_a = 0; proc_control_node_B.j_a < 12;
       proc_control_node_B.j_a++) {
    proc_control_node_B.i_dq = 0;
    while (proc_control_node_B.i_dq <= proc_control_node_B.j_a) {
      R[proc_control_node_B.i_dq + 12 * proc_control_node_B.j_a] =
        proc_control_node_B.b_A_i[(proc_control_node_B.j_a << 5) +
        proc_control_node_B.i_dq];
      proc_control_node_B.i_dq++;
    }

    proc_control_node_B.i_dq = proc_control_node_B.j_a + 1;
    while (proc_control_node_B.i_dq + 1 < 13) {
      R[proc_control_node_B.i_dq + 12 * proc_control_node_B.j_a] = 0.0;
      proc_control_node_B.i_dq++;
    }
  }

  proc_control_node_xorgqr_n(32, 12, 12, proc_control_node_B.b_A_i, 1,
    proc_control_node_B.tau_be, 1);
  proc_control_node_B.i_dq = 0;
  for (proc_control_node_B.j_a = 0; proc_control_node_B.j_a < 12;
       proc_control_node_B.j_a++) {
    memcpy(&Q[proc_control_node_B.i_dq],
           &proc_control_node_B.b_A_i[proc_control_node_B.i_dq], sizeof(real_T) <<
           5U);
    proc_control_node_B.i_dq += 32;
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrFactor(const real_T A[240],
  const real_T S[400], const real_T Ns[144], real_T b_S[144])
{
  for (proc_control_node_B.j_d = 0; proc_control_node_B.j_d < 12;
       proc_control_node_B.j_d++) {
    proc_control_node_B.coffset_dq = proc_control_node_B.j_d * 20;
    memset(&proc_control_node_B.y_ei[proc_control_node_B.coffset_dq], 0, 20U *
           sizeof(real_T));
    for (proc_control_node_B.i_o0 = 0; proc_control_node_B.i_o0 < 20;
         proc_control_node_B.i_o0++) {
      proc_control_node_B.bkj_k = A[proc_control_node_B.i_o0 * 12 +
        proc_control_node_B.j_d];
      for (proc_control_node_B.b_i_c = 0; proc_control_node_B.b_i_c < 20;
           proc_control_node_B.b_i_c++) {
        proc_control_node_B.y_tmp_o = proc_control_node_B.coffset_dq +
          proc_control_node_B.b_i_c;
        proc_control_node_B.y_ei[proc_control_node_B.y_tmp_o] +=
          S[proc_control_node_B.b_i_c * 20 + proc_control_node_B.i_o0] *
          proc_control_node_B.bkj_k;
      }
    }
  }

  proc_control_node_B.j_d = 0;
  proc_control_node_B.coffset_dq = 0;
  for (proc_control_node_B.i_o0 = 0; proc_control_node_B.i_o0 < 12;
       proc_control_node_B.i_o0++) {
    memcpy(&proc_control_node_B.y_f[proc_control_node_B.j_d],
           &proc_control_node_B.y_ei[proc_control_node_B.coffset_dq], 20U *
           sizeof(real_T));
    proc_control_node_B.j_d += 32;
    proc_control_node_B.coffset_dq += 20;
  }

  proc_control_node_B.j_d = 0;
  for (proc_control_node_B.i_o0 = 0; proc_control_node_B.i_o0 < 12;
       proc_control_node_B.i_o0++) {
    proc_control_node_B.coffset_dq = 0;
    for (proc_control_node_B.b_i_c = 0; proc_control_node_B.b_i_c < 12;
         proc_control_node_B.b_i_c++) {
      proc_control_node_B.y_f[(proc_control_node_B.b_i_c +
        proc_control_node_B.j_d) + 20] = Ns[proc_control_node_B.coffset_dq +
        proc_control_node_B.i_o0];
      proc_control_node_B.coffset_dq += 12;
    }

    proc_control_node_B.j_d += 32;
  }

  proc_control_node_qr_b(proc_control_node_B.y_f, proc_control_node_B.a__1_ip,
    proc_control_node_B.R_m);
  proc_control_node_B.j_d = 0;
  for (proc_control_node_B.coffset_dq = 0; proc_control_node_B.coffset_dq < 12;
       proc_control_node_B.coffset_dq++) {
    proc_control_node_B.i_o0 = 0;
    for (proc_control_node_B.b_i_c = 0; proc_control_node_B.b_i_c < 12;
         proc_control_node_B.b_i_c++) {
      b_S[proc_control_node_B.b_i_c + proc_control_node_B.j_d] =
        proc_control_node_B.R_m[proc_control_node_B.i_o0 +
        proc_control_node_B.coffset_dq];
      proc_control_node_B.i_o0 += 12;
    }

    proc_control_node_B.j_d += 12;
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::EKFCorrectorAdditive_getMeasure(const real_T
  Rs[144], const real_T x[20], const real_T S[400], real_T zEstimated[12],
  real_T Pxy[240], real_T Sy[144], real_T dHdx[240])
{
  for (proc_control_node_B.j_n = 0; proc_control_node_B.j_n < 20;
       proc_control_node_B.j_n++) {
    memcpy(&proc_control_node_B.imvec_eh[0], &x[0], 20U * sizeof(real_T));
    proc_control_node_B.epsilon_c = 1.4901161193847656E-8 * fabs
      (x[proc_control_node_B.j_n]);
    if ((1.4901161193847656E-8 > proc_control_node_B.epsilon_c) || rtIsNaN
        (proc_control_node_B.epsilon_c)) {
      proc_control_node_B.epsilon_c = 1.4901161193847656E-8;
    }

    proc_control_node_B.imvec_eh[proc_control_node_B.j_n] =
      x[proc_control_node_B.j_n] + proc_control_node_B.epsilon_c;
    for (proc_control_node_B.i_bw = 0; proc_control_node_B.i_bw < 12;
         proc_control_node_B.i_bw++) {
      dHdx[proc_control_node_B.i_bw + 12 * proc_control_node_B.j_n] =
        (proc_control_node_B.imvec_eh[proc_control_node_B.i_bw] -
         x[proc_control_node_B.i_bw]) / proc_control_node_B.epsilon_c;
    }
  }

  memcpy(&zEstimated[0], &x[0], 12U * sizeof(real_T));
  proc_control_node_B.i_bw = 0;
  for (proc_control_node_B.j_n = 0; proc_control_node_B.j_n < 20;
       proc_control_node_B.j_n++) {
    memset(&proc_control_node_B.S_i[proc_control_node_B.i_bw], 0, 20U * sizeof
           (real_T));
    proc_control_node_B.i_bw += 20;
  }

  proc_control_node_B.i_bw = 0;
  for (proc_control_node_B.i15 = 0; proc_control_node_B.i15 < 20;
       proc_control_node_B.i15++) {
    proc_control_node_B.i16 = 0;
    for (proc_control_node_B.j_n = 0; proc_control_node_B.j_n < 20;
         proc_control_node_B.j_n++) {
      for (proc_control_node_B.i14 = 0; proc_control_node_B.i14 < 20;
           proc_control_node_B.i14++) {
        proc_control_node_B.S_tmp_j = proc_control_node_B.i14 +
          proc_control_node_B.i16;
        proc_control_node_B.S_i[proc_control_node_B.S_tmp_j] +=
          S[proc_control_node_B.i14 + proc_control_node_B.i_bw] *
          S[proc_control_node_B.j_n + proc_control_node_B.i_bw];
      }

      proc_control_node_B.i16 += 20;
    }

    proc_control_node_B.i_bw += 20;
  }

  proc_control_node_B.i_bw = 0;
  for (proc_control_node_B.j_n = 0; proc_control_node_B.j_n < 12;
       proc_control_node_B.j_n++) {
    memset(&Pxy[proc_control_node_B.i_bw], 0, 20U * sizeof(real_T));
    proc_control_node_B.i_bw += 20;
  }

  proc_control_node_B.i_bw = 0;
  for (proc_control_node_B.j_n = 0; proc_control_node_B.j_n < 12;
       proc_control_node_B.j_n++) {
    proc_control_node_B.i15 = 0;
    proc_control_node_B.i16 = 0;
    for (proc_control_node_B.S_tmp_j = 0; proc_control_node_B.S_tmp_j < 20;
         proc_control_node_B.S_tmp_j++) {
      for (proc_control_node_B.i14 = 0; proc_control_node_B.i14 < 20;
           proc_control_node_B.i14++) {
        proc_control_node_B.Pxy_tmp_k = proc_control_node_B.i14 +
          proc_control_node_B.i_bw;
        Pxy[proc_control_node_B.Pxy_tmp_k] +=
          proc_control_node_B.S_i[proc_control_node_B.i14 +
          proc_control_node_B.i15] * dHdx[proc_control_node_B.i16 +
          proc_control_node_B.j_n];
      }

      proc_control_node_B.i15 += 20;
      proc_control_node_B.i16 += 12;
    }

    proc_control_node_B.i_bw += 20;
  }

  proc_control_node_qrFactor(dHdx, S, Rs, Sy);
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_e(const real_T A
  [144], real_T B[240])
{
  int32_T i;
  int32_T j;
  int32_T k;
  int32_T kAcol;
  int32_T tmp;
  int32_T tmp_0;
  for (j = 0; j < 20; j++) {
    proc_control_node_B.jBcol_e = 12 * j;
    for (k = 0; k < 12; k++) {
      kAcol = 12 * k;
      tmp = k + proc_control_node_B.jBcol_e;
      proc_control_node_B.d11 = B[tmp];
      if (proc_control_node_B.d11 != 0.0) {
        B[tmp] = proc_control_node_B.d11 / A[k + kAcol];
        for (i = k + 2; i < 13; i++) {
          tmp_0 = (i + proc_control_node_B.jBcol_e) - 1;
          B[tmp_0] -= A[(i + kAcol) - 1] * B[tmp];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_e5(const real_T A
  [144], real_T B[240])
{
  int32_T i;
  int32_T j;
  int32_T k;
  int32_T kAcol;
  int32_T tmp;
  int32_T tmp_0;
  for (j = 0; j < 20; j++) {
    proc_control_node_B.jBcol_p = 12 * j;
    for (k = 11; k >= 0; k--) {
      kAcol = 12 * k;
      tmp = k + proc_control_node_B.jBcol_p;
      proc_control_node_B.d10 = B[tmp];
      if (proc_control_node_B.d10 != 0.0) {
        B[tmp] = proc_control_node_B.d10 / A[k + kAcol];
        for (i = 0; i < k; i++) {
          tmp_0 = i + proc_control_node_B.jBcol_p;
          B[tmp_0] -= B[tmp] * A[i + kAcol];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S179>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_oc(int32_T n, const
  real_T x[640], int32_T ix0)
{
  real_T absxk;
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_dl = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        absxk = fabs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_dl) {
          t = proc_control_node_B.scale_dl / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_dl = absxk;
        } else {
          t = absxk / proc_control_node_B.scale_dl;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_dl * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_bwv(int32_T m, int32_T
  n, const real_T A[640], int32_T ia0, const real_T x[640], int32_T ix0, real_T
  y[20])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = ((n - 1) << 5) + ia0;
    for (iac = ia0; iac <= b; iac += 32) {
      ix = ix0;
      proc_control_node_B.c_o = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_o += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_o;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_jn(int32_T m, int32_T
  n, real_T alpha1, int32_T ix0, const real_T y[20], real_T A[640], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jA;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    jA = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_j = y[jy] * alpha1;
        ix = ix0;
        b = m + jA;
        for (ijA = jA; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_j;
          ix++;
        }
      }

      jy++;
      jA += 32;
    }
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_xzlarf_f3v(int32_T m,
  int32_T n, int32_T iv0, real_T tau, real_T C[640], int32_T ic0, real_T work[20])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_n = m;
    proc_control_node_B.lastc_c = iv0 + m;
    while ((proc_control_node_B.lastv_n > 0) && (C[proc_control_node_B.lastc_c -
            2] == 0.0)) {
      proc_control_node_B.lastv_n--;
      proc_control_node_B.lastc_c--;
    }

    proc_control_node_B.lastc_c = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_c > 0)) {
      proc_control_node_B.coltop_c = ((proc_control_node_B.lastc_c - 1) << 5) +
        ic0;
      proc_control_node_B.ia_i = proc_control_node_B.coltop_c;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_i <= (proc_control_node_B.coltop_c +
             proc_control_node_B.lastv_n) - 1) {
          if (C[proc_control_node_B.ia_i - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_i++;
          }
        } else {
          proc_control_node_B.lastc_c--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_n = 0;
    proc_control_node_B.lastc_c = 0;
  }

  if (proc_control_node_B.lastv_n > 0) {
    proc_control_node_xgemv_bwv(proc_control_node_B.lastv_n,
      proc_control_node_B.lastc_c, C, ic0, C, iv0, work);
    proc_control_node_xgerc_jn(proc_control_node_B.lastv_n,
      proc_control_node_B.lastc_c, -tau, iv0, work, C, ic0);
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrf_hdq(real_T A[640],
  int32_T ia0, int32_T m, int32_T n, int32_T nfxd, real_T tau[20])
{
  memset(&proc_control_node_B.work_a0[0], 0, 20U * sizeof(real_T));
  proc_control_node_B.i_i = 0;
  while (proc_control_node_B.i_i <= nfxd - 1) {
    proc_control_node_B.ii_g = (((proc_control_node_B.i_i << 5) + ia0) +
      proc_control_node_B.i_i) - 1;
    proc_control_node_B.mmi_tmp_c = m - proc_control_node_B.i_i;
    if (proc_control_node_B.i_i + 1 < m) {
      proc_control_node_B.b_atmp_h = A[proc_control_node_B.ii_g];
      tau[proc_control_node_B.i_i] = 0.0;
      if (proc_control_node_B.mmi_tmp_c > 0) {
        proc_control_node_B.beta1_d = proc_control_node_xnrm2_oc
          (proc_control_node_B.mmi_tmp_c - 1, A, proc_control_node_B.ii_g + 2);
        if (proc_control_node_B.beta1_d != 0.0) {
          proc_control_node_B.beta1_d = proc_control_node_rt_hypotd_snf
            (A[proc_control_node_B.ii_g], proc_control_node_B.beta1_d);
          if (A[proc_control_node_B.ii_g] >= 0.0) {
            proc_control_node_B.beta1_d = -proc_control_node_B.beta1_d;
          }

          if (fabs(proc_control_node_B.beta1_d) < 1.0020841800044864E-292) {
            proc_control_node_B.knt_a = -1;
            proc_control_node_B.mmip1_c = proc_control_node_B.ii_g +
              proc_control_node_B.mmi_tmp_c;
            do {
              proc_control_node_B.knt_a++;
              proc_control_node_B.b_k_f = proc_control_node_B.ii_g + 1;
              while (proc_control_node_B.b_k_f + 1 <=
                     proc_control_node_B.mmip1_c) {
                A[proc_control_node_B.b_k_f] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_f++;
              }

              proc_control_node_B.beta1_d *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp_h *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1_d) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1_d = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp_h, proc_control_node_xnrm2_oc
               (proc_control_node_B.mmi_tmp_c - 1, A, proc_control_node_B.ii_g +
                2));
            if (proc_control_node_B.b_atmp_h >= 0.0) {
              proc_control_node_B.beta1_d = -proc_control_node_B.beta1_d;
            }

            tau[proc_control_node_B.i_i] = (proc_control_node_B.beta1_d -
              proc_control_node_B.b_atmp_h) / proc_control_node_B.beta1_d;
            proc_control_node_B.b_atmp_h = 1.0 / (proc_control_node_B.b_atmp_h -
              proc_control_node_B.beta1_d);
            proc_control_node_B.b_k_f = proc_control_node_B.ii_g + 1;
            while (proc_control_node_B.b_k_f + 1 <= proc_control_node_B.mmip1_c)
            {
              A[proc_control_node_B.b_k_f] *= proc_control_node_B.b_atmp_h;
              proc_control_node_B.b_k_f++;
            }

            proc_control_node_B.mmip1_c = 0;
            while (proc_control_node_B.mmip1_c <= proc_control_node_B.knt_a) {
              proc_control_node_B.beta1_d *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1_c++;
            }

            proc_control_node_B.b_atmp_h = proc_control_node_B.beta1_d;
          } else {
            tau[proc_control_node_B.i_i] = (proc_control_node_B.beta1_d -
              A[proc_control_node_B.ii_g]) / proc_control_node_B.beta1_d;
            proc_control_node_B.b_atmp_h = 1.0 / (A[proc_control_node_B.ii_g] -
              proc_control_node_B.beta1_d);
            proc_control_node_B.knt_a = proc_control_node_B.ii_g +
              proc_control_node_B.mmi_tmp_c;
            proc_control_node_B.mmip1_c = proc_control_node_B.ii_g + 1;
            while (proc_control_node_B.mmip1_c + 1 <= proc_control_node_B.knt_a)
            {
              A[proc_control_node_B.mmip1_c] *= proc_control_node_B.b_atmp_h;
              proc_control_node_B.mmip1_c++;
            }

            proc_control_node_B.b_atmp_h = proc_control_node_B.beta1_d;
          }
        }
      }

      A[proc_control_node_B.ii_g] = proc_control_node_B.b_atmp_h;
    } else {
      tau[proc_control_node_B.i_i] = 0.0;
    }

    if (proc_control_node_B.i_i + 1 < n) {
      proc_control_node_B.b_atmp_h = A[proc_control_node_B.ii_g];
      A[proc_control_node_B.ii_g] = 1.0;
      proc_control_node_xzlarf_f3v(proc_control_node_B.mmi_tmp_c, (n -
        proc_control_node_B.i_i) - 1, proc_control_node_B.ii_g + 1,
        tau[proc_control_node_B.i_i], A, proc_control_node_B.ii_g + 33,
        proc_control_node_B.work_a0);
      A[proc_control_node_B.ii_g] = proc_control_node_B.b_atmp_h;
    }

    proc_control_node_B.i_i++;
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_pe(real_T A[640],
  real_T tau[20])
{
  memset(&tau[0], 0, 20U * sizeof(real_T));
  proc_control_node_qrf_hdq(A, 1, 32, 20, 20, tau);
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_xorgqr_nm(int32_T m, int32_T
  n, int32_T k, real_T A[640], int32_T ia0, const real_T tau[20], int32_T itau0)
{
  if (n >= 1) {
    proc_control_node_B.itau_i = k;
    while (proc_control_node_B.itau_i <= n - 1) {
      proc_control_node_B.i_f5 = ((proc_control_node_B.itau_i << 5) + ia0) - 1;
      proc_control_node_B.iaii_b = 0;
      while (proc_control_node_B.iaii_b <= m - 1) {
        A[proc_control_node_B.i_f5 + proc_control_node_B.iaii_b] = 0.0;
        proc_control_node_B.iaii_b++;
      }

      A[proc_control_node_B.i_f5 + proc_control_node_B.itau_i] = 1.0;
      proc_control_node_B.itau_i++;
    }

    proc_control_node_B.itau_i = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_o[0], 0, 20U * sizeof(real_T));
    proc_control_node_B.i_f5 = k;
    while (proc_control_node_B.i_f5 >= 1) {
      proc_control_node_B.iaii_b = ((((proc_control_node_B.i_f5 - 1) << 5) + ia0)
        + proc_control_node_B.i_f5) - 1;
      if (proc_control_node_B.i_f5 < n) {
        A[proc_control_node_B.iaii_b - 1] = 1.0;
        proc_control_node_xzlarf_f3v((m - proc_control_node_B.i_f5) + 1, n -
          proc_control_node_B.i_f5, proc_control_node_B.iaii_b,
          tau[proc_control_node_B.itau_i], A, proc_control_node_B.iaii_b + 32,
          proc_control_node_B.work_o);
      }

      if (proc_control_node_B.i_f5 < m) {
        proc_control_node_B.b_h = (proc_control_node_B.iaii_b + m) -
          proc_control_node_B.i_f5;
        proc_control_node_B.b_k_df = proc_control_node_B.iaii_b;
        while (proc_control_node_B.b_k_df + 1 <= proc_control_node_B.b_h) {
          A[proc_control_node_B.b_k_df] *= -tau[proc_control_node_B.itau_i];
          proc_control_node_B.b_k_df++;
        }
      }

      A[proc_control_node_B.iaii_b - 1] = 1.0 - tau[proc_control_node_B.itau_i];
      proc_control_node_B.b_h = 0;
      while (proc_control_node_B.b_h <= proc_control_node_B.i_f5 - 2) {
        A[(proc_control_node_B.iaii_b - proc_control_node_B.b_h) - 2] = 0.0;
        proc_control_node_B.b_h++;
      }

      proc_control_node_B.itau_i--;
      proc_control_node_B.i_f5--;
    }
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_qr_bw(const real_T A[640],
  real_T Q[640], real_T R[400])
{
  memcpy(&proc_control_node_B.b_A_m3[0], &A[0], 640U * sizeof(real_T));
  proc_control_node_xgeqrf_pe(proc_control_node_B.b_A_m3,
    proc_control_node_B.tau_b);
  for (proc_control_node_B.j_ef = 0; proc_control_node_B.j_ef < 20;
       proc_control_node_B.j_ef++) {
    proc_control_node_B.i_ha = 0;
    while (proc_control_node_B.i_ha <= proc_control_node_B.j_ef) {
      R[proc_control_node_B.i_ha + 20 * proc_control_node_B.j_ef] =
        proc_control_node_B.b_A_m3[(proc_control_node_B.j_ef << 5) +
        proc_control_node_B.i_ha];
      proc_control_node_B.i_ha++;
    }

    proc_control_node_B.i_ha = proc_control_node_B.j_ef + 1;
    while (proc_control_node_B.i_ha + 1 < 21) {
      R[proc_control_node_B.i_ha + 20 * proc_control_node_B.j_ef] = 0.0;
      proc_control_node_B.i_ha++;
    }
  }

  proc_control_node_xorgqr_nm(32, 20, 20, proc_control_node_B.b_A_m3, 1,
    proc_control_node_B.tau_b, 1);
  proc_control_node_B.i_ha = 0;
  for (proc_control_node_B.j_ef = 0; proc_control_node_B.j_ef < 20;
       proc_control_node_B.j_ef++) {
    memcpy(&Q[proc_control_node_B.i_ha],
           &proc_control_node_B.b_A_m3[proc_control_node_B.i_ha], sizeof(real_T)
           << 5U);
    proc_control_node_B.i_ha += 32;
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrFactor_g(const real_T A
  [400], real_T S[400], const real_T Ns[240])
{
  for (proc_control_node_B.j_do = 0; proc_control_node_B.j_do < 20;
       proc_control_node_B.j_do++) {
    proc_control_node_B.coffset_m = proc_control_node_B.j_do * 20;
    memset(&proc_control_node_B.y_oj[proc_control_node_B.coffset_m], 0, 20U *
           sizeof(real_T));
    for (proc_control_node_B.i_pz = 0; proc_control_node_B.i_pz < 20;
         proc_control_node_B.i_pz++) {
      proc_control_node_B.bkj_kb = A[proc_control_node_B.i_pz * 20 +
        proc_control_node_B.j_do];
      for (proc_control_node_B.b_i_i = 0; proc_control_node_B.b_i_i < 20;
           proc_control_node_B.b_i_i++) {
        proc_control_node_B.y_tmp_g = proc_control_node_B.coffset_m +
          proc_control_node_B.b_i_i;
        proc_control_node_B.y_oj[proc_control_node_B.y_tmp_g] +=
          S[proc_control_node_B.b_i_i * 20 + proc_control_node_B.i_pz] *
          proc_control_node_B.bkj_kb;
      }
    }
  }

  proc_control_node_B.coffset_m = 0;
  proc_control_node_B.j_do = 0;
  for (proc_control_node_B.i_pz = 0; proc_control_node_B.i_pz < 20;
       proc_control_node_B.i_pz++) {
    memcpy(&proc_control_node_B.y_h[proc_control_node_B.coffset_m],
           &proc_control_node_B.y_oj[proc_control_node_B.j_do], 20U * sizeof
           (real_T));
    proc_control_node_B.coffset_m += 32;
    proc_control_node_B.j_do += 20;
  }

  proc_control_node_B.coffset_m = 0;
  for (proc_control_node_B.i_pz = 0; proc_control_node_B.i_pz < 20;
       proc_control_node_B.i_pz++) {
    proc_control_node_B.j_do = 0;
    for (proc_control_node_B.b_i_i = 0; proc_control_node_B.b_i_i < 12;
         proc_control_node_B.b_i_i++) {
      proc_control_node_B.y_h[(proc_control_node_B.b_i_i +
        proc_control_node_B.coffset_m) + 20] = Ns[proc_control_node_B.j_do +
        proc_control_node_B.i_pz];
      proc_control_node_B.j_do += 20;
    }

    proc_control_node_B.coffset_m += 32;
  }

  proc_control_node_qr_bw(proc_control_node_B.y_h, proc_control_node_B.a__1_j,
    proc_control_node_B.y_oj);
  proc_control_node_B.coffset_m = 0;
  for (proc_control_node_B.j_do = 0; proc_control_node_B.j_do < 20;
       proc_control_node_B.j_do++) {
    proc_control_node_B.i_pz = 0;
    for (proc_control_node_B.b_i_i = 0; proc_control_node_B.b_i_i < 20;
         proc_control_node_B.b_i_i++) {
      S[proc_control_node_B.b_i_i + proc_control_node_B.coffset_m] =
        proc_control_node_B.y_oj[proc_control_node_B.i_pz +
        proc_control_node_B.j_do];
      proc_control_node_B.i_pz += 20;
    }

    proc_control_node_B.coffset_m += 20;
  }
}

// Function for MATLAB Function: '<S179>/Correct'
void proc_control_nodeModelClass::EKFCorrector_correctStateAndSqr(real_T x[20],
  real_T S[400], const real_T residue[12], const real_T Pxy[240], const real_T
  Sy[144], const real_T H[240], const real_T Rsqrt[144])
{
  proc_control_node_B.b_i_j = 0;
  for (proc_control_node_B.b_i_p = 0; proc_control_node_B.b_i_p < 12;
       proc_control_node_B.b_i_p++) {
    proc_control_node_B.j_kk = 0;
    for (proc_control_node_B.j_db = 0; proc_control_node_B.j_db < 20;
         proc_control_node_B.j_db++) {
      proc_control_node_B.K_c[proc_control_node_B.j_kk +
        proc_control_node_B.b_i_p] = Pxy[proc_control_node_B.j_db +
        proc_control_node_B.b_i_j];
      proc_control_node_B.j_kk += 12;
    }

    proc_control_node_B.b_i_j += 20;
  }

  proc_control_node_trisolve_e(Sy, proc_control_node_B.K_c);
  proc_control_node_B.j_kk = 0;
  for (proc_control_node_B.j_db = 0; proc_control_node_B.j_db < 20;
       proc_control_node_B.j_db++) {
    memcpy(&proc_control_node_B.b_C_a[proc_control_node_B.j_kk],
           &proc_control_node_B.K_c[proc_control_node_B.j_kk], 12U * sizeof
           (real_T));
    proc_control_node_B.j_kk += 12;
  }

  proc_control_node_B.b_i_j = 0;
  for (proc_control_node_B.j_db = 0; proc_control_node_B.j_db < 12;
       proc_control_node_B.j_db++) {
    proc_control_node_B.b_i_p = 0;
    for (proc_control_node_B.j_kk = 0; proc_control_node_B.j_kk < 12;
         proc_control_node_B.j_kk++) {
      proc_control_node_B.Sy_j[proc_control_node_B.j_kk +
        proc_control_node_B.b_i_j] = Sy[proc_control_node_B.b_i_p +
        proc_control_node_B.j_db];
      proc_control_node_B.b_i_p += 12;
    }

    proc_control_node_B.b_i_j += 12;
  }

  proc_control_node_trisolve_e5(proc_control_node_B.Sy_j,
    proc_control_node_B.b_C_a);
  proc_control_node_B.b_i_j = 0;
  for (proc_control_node_B.j_db = 0; proc_control_node_B.j_db < 12;
       proc_control_node_B.j_db++) {
    proc_control_node_B.b_i_p = 0;
    for (proc_control_node_B.j_kk = 0; proc_control_node_B.j_kk < 20;
         proc_control_node_B.j_kk++) {
      proc_control_node_B.K_c[proc_control_node_B.j_kk +
        proc_control_node_B.b_i_j] =
        proc_control_node_B.b_C_a[proc_control_node_B.b_i_p +
        proc_control_node_B.j_db];
      proc_control_node_B.b_i_p += 12;
    }

    proc_control_node_B.b_i_j += 20;
  }

  for (proc_control_node_B.b_i_j = 0; proc_control_node_B.b_i_j < 20;
       proc_control_node_B.b_i_j++) {
    proc_control_node_B.d3 = 0.0;
    proc_control_node_B.j_db = 0;
    for (proc_control_node_B.b_i_p = 0; proc_control_node_B.b_i_p < 12;
         proc_control_node_B.b_i_p++) {
      proc_control_node_B.d3 += proc_control_node_B.K_c[proc_control_node_B.j_db
        + proc_control_node_B.b_i_j] * residue[proc_control_node_B.b_i_p];
      proc_control_node_B.j_db += 20;
    }

    x[proc_control_node_B.b_i_j] += proc_control_node_B.d3;
  }

  for (proc_control_node_B.b_i_j = 0; proc_control_node_B.b_i_j < 240;
       proc_control_node_B.b_i_j++) {
    proc_control_node_B.b_C_a[proc_control_node_B.b_i_j] =
      -proc_control_node_B.K_c[proc_control_node_B.b_i_j];
  }

  for (proc_control_node_B.b_i_j = 0; proc_control_node_B.b_i_j < 20;
       proc_control_node_B.b_i_j++) {
    memset(&proc_control_node_B.A_l[proc_control_node_B.b_i_j * 20], 0, 20U *
           sizeof(real_T));
    for (proc_control_node_B.b_i_p = 0; proc_control_node_B.b_i_p < 12;
         proc_control_node_B.b_i_p++) {
      for (proc_control_node_B.j_db = 0; proc_control_node_B.j_db < 20;
           proc_control_node_B.j_db++) {
        proc_control_node_B.j_kk = 20 * proc_control_node_B.b_i_j +
          proc_control_node_B.j_db;
        proc_control_node_B.A_l[proc_control_node_B.j_kk] +=
          proc_control_node_B.b_C_a[20 * proc_control_node_B.b_i_p +
          proc_control_node_B.j_db] * H[12 * proc_control_node_B.b_i_j +
          proc_control_node_B.b_i_p];
      }
    }
  }

  proc_control_node_B.j_kk = 0;
  for (proc_control_node_B.j_db = 0; proc_control_node_B.j_db < 20;
       proc_control_node_B.j_db++) {
    proc_control_node_B.A_l[proc_control_node_B.j_kk]++;
    proc_control_node_B.j_kk += 21;
  }

  for (proc_control_node_B.b_i_j = 0; proc_control_node_B.b_i_j < 12;
       proc_control_node_B.b_i_j++) {
    memset(&proc_control_node_B.b_C_a[proc_control_node_B.b_i_j * 20], 0, 20U *
           sizeof(real_T));
    for (proc_control_node_B.b_i_p = 0; proc_control_node_B.b_i_p < 12;
         proc_control_node_B.b_i_p++) {
      for (proc_control_node_B.j_db = 0; proc_control_node_B.j_db < 20;
           proc_control_node_B.j_db++) {
        proc_control_node_B.j_kk = 20 * proc_control_node_B.b_i_j +
          proc_control_node_B.j_db;
        proc_control_node_B.b_C_a[proc_control_node_B.j_kk] +=
          proc_control_node_B.K_c[20 * proc_control_node_B.b_i_p +
          proc_control_node_B.j_db] * Rsqrt[12 * proc_control_node_B.b_i_j +
          proc_control_node_B.b_i_p];
      }
    }
  }

  proc_control_node_qrFactor_g(proc_control_node_B.A_l, S,
    proc_control_node_B.b_C_a);
}

// Function for MATLAB Function: '<S130>/MATLAB Function2'
void proc_control_nodeModelClass::proc_contr_AUVEULJacobianMatrix(const real_T
  in1[12], real_T Ane[144])
{
  real_T Ane_tmp;
  real_T Ane_tmp_0;
  real_T Ane_tmp_1;
  proc_control_node_B.t2_m = fabs(in1[9]);
  proc_control_node_B.t3_j = fabs(in1[10]);
  proc_control_node_B.t4_i = fabs(in1[11]);
  proc_control_node_B.t5_am = cos(in1[3]);
  proc_control_node_B.t6_hv = cos(in1[5]);
  proc_control_node_B.t7_d = fabs(in1[6]);
  proc_control_node_B.t8_i = fabs(in1[7]);
  proc_control_node_B.t9_h = cos(in1[4]);
  proc_control_node_B.t10_d = fabs(in1[8]);
  if (in1[9] < 0.0) {
    proc_control_node_B.t11_l = -1.0;
  } else if (in1[9] > 0.0) {
    proc_control_node_B.t11_l = 1.0;
  } else if (in1[9] == 0.0) {
    proc_control_node_B.t11_l = 0.0;
  } else {
    proc_control_node_B.t11_l = (rtNaN);
  }

  proc_control_node_B.t12_f = sin(in1[3]);
  proc_control_node_B.t13_l = sin(in1[5]);
  if (in1[10] < 0.0) {
    proc_control_node_B.t14_l = -1.0;
  } else if (in1[10] > 0.0) {
    proc_control_node_B.t14_l = 1.0;
  } else if (in1[10] == 0.0) {
    proc_control_node_B.t14_l = 0.0;
  } else {
    proc_control_node_B.t14_l = (rtNaN);
  }

  if (in1[11] < 0.0) {
    proc_control_node_B.t15_f = -1.0;
  } else if (in1[11] > 0.0) {
    proc_control_node_B.t15_f = 1.0;
  } else if (in1[11] == 0.0) {
    proc_control_node_B.t15_f = 0.0;
  } else {
    proc_control_node_B.t15_f = (rtNaN);
  }

  proc_control_node_B.t16_gy = sin(in1[4]);
  if (in1[6] < 0.0) {
    proc_control_node_B.t17_gz = -1.0;
  } else if (in1[6] > 0.0) {
    proc_control_node_B.t17_gz = 1.0;
  } else if (in1[6] == 0.0) {
    proc_control_node_B.t17_gz = 0.0;
  } else {
    proc_control_node_B.t17_gz = (rtNaN);
  }

  if (in1[7] < 0.0) {
    proc_control_node_B.t18_a = -1.0;
  } else if (in1[7] > 0.0) {
    proc_control_node_B.t18_a = 1.0;
  } else if (in1[7] == 0.0) {
    proc_control_node_B.t18_a = 0.0;
  } else {
    proc_control_node_B.t18_a = (rtNaN);
  }

  if (in1[8] < 0.0) {
    proc_control_node_B.t19_d = -1.0;
  } else if (in1[8] > 0.0) {
    proc_control_node_B.t19_d = 1.0;
  } else if (in1[8] == 0.0) {
    proc_control_node_B.t19_d = 0.0;
  } else {
    proc_control_node_B.t19_d = (rtNaN);
  }

  proc_control_node_B.t28_b = in1[11] * 1.0571299073092789E-5;
  proc_control_node_B.t29_d = in1[10] * 9.7602896722846373E-5;
  proc_control_node_B.t30_f = in1[7] * 0.01129023503850542;
  proc_control_node_B.t31_a = in1[6] * 0.00477039452928936;
  proc_control_node_B.t32_m = in1[9] * 9.1703771260780813E-5;
  proc_control_node_B.t34_i = in1[8] * 0.143523560675718;
  proc_control_node_B.t35_i = in1[6] * 0.00568699616459184;
  proc_control_node_B.t36_k = in1[8] * 0.069014505171846527;
  proc_control_node_B.t37_a = in1[7] * 0.0071670223909459834;
  proc_control_node_B.t20_m = 1.0 / proc_control_node_B.t9_h;
  memset(&Ane[0], 0, 42U * sizeof(real_T));
  proc_control_node_B.Ane_tmp = proc_control_node_B.t5_am *
    proc_control_node_B.t9_h;
  proc_control_node_B.Ane_tmp_c = proc_control_node_B.t9_h *
    proc_control_node_B.t12_f;
  Ane_tmp = proc_control_node_B.t9_h * (proc_control_node_B.t12_f * 0.062 +
    proc_control_node_B.t5_am * 0.746622);
  Ane[42] = (proc_control_node_B.Ane_tmp * 0.0003038485611411295 -
             proc_control_node_B.Ane_tmp_c * 0.0030804819903427929) - Ane_tmp *
    0.0012787556591776421;
  Ane[43] = (proc_control_node_B.Ane_tmp * -0.09962138533478937 -
             proc_control_node_B.Ane_tmp_c * 0.0001558786802929103) - Ane_tmp *
    0.2146651116826197;
  Ane[44] = (proc_control_node_B.Ane_tmp * 0.0001262558405802736 +
             proc_control_node_B.Ane_tmp_c * 0.091796606188097957) + Ane_tmp *
    0.022292555139725449;
  Ane[45] = (proc_control_node_B.Ane_tmp * -0.095020813300146653 -
             proc_control_node_B.Ane_tmp_c * 0.01218289469126858) - Ane_tmp *
    16.7769453147126;
  Ane[46] = (proc_control_node_B.Ane_tmp * 0.000439745529355291 +
             proc_control_node_B.Ane_tmp_c * 0.17922689172220771) + Ane_tmp *
    0.078743486942211408;
  Ane[47] = (proc_control_node_B.Ane_tmp * 0.16306065763088379 +
             proc_control_node_B.Ane_tmp_c * 2.2159046954574339E-5) + Ane_tmp *
    0.03910191918844614;
  Ane[48] = 0.0;
  Ane[49] = 0.0;
  Ane[50] = 0.0;
  Ane[51] = 0.0;
  Ane[52] = 0.0;
  Ane[53] = 0.0;
  Ane_tmp = proc_control_node_B.t5_am * proc_control_node_B.t16_gy;
  Ane_tmp_0 = proc_control_node_B.t12_f * proc_control_node_B.t16_gy;
  Ane_tmp_1 = proc_control_node_B.t16_gy * (proc_control_node_B.t5_am * 0.062 +
    -(proc_control_node_B.t12_f * 0.746622));
  Ane[54] = ((proc_control_node_B.t9_h * 0.20690082595613279 - Ane_tmp *
              0.0030804819903427929) - Ane_tmp_0 * 0.0003038485611411295) +
    Ane_tmp_1 * -0.0012787556591776421;
  Ane[55] = ((proc_control_node_B.t9_h * 0.00049601054978465754 - Ane_tmp *
              0.0001558786802929103) + Ane_tmp_0 * 0.09962138533478937) +
    Ane_tmp_1 * -0.2146651116826197;
  Ane[56] = ((Ane_tmp * 0.091796606188097957 + proc_control_node_B.t9_h *
              -0.0029379207602901669) - Ane_tmp_0 * 0.0001262558405802736) +
    Ane_tmp_1 * 0.022292555139725449;
  Ane[57] = ((proc_control_node_B.t9_h * 0.056926116941144737 - Ane_tmp *
              0.01218289469126858) + Ane_tmp_0 * 0.095020813300146653) +
    Ane_tmp_1 * -16.7769453147126;
  Ane[58] = ((Ane_tmp * 0.17922689172220771 + proc_control_node_B.t9_h *
              -4.3185698628399987) - Ane_tmp_0 * 0.000439745529355291) +
    Ane_tmp_1 * 0.078743486942211408;
  Ane[59] = ((Ane_tmp * 2.2159046954574339E-5 + proc_control_node_B.t9_h *
              0.32680566187003413) - Ane_tmp_0 * 0.16306065763088379) +
    Ane_tmp_1 * 0.03910191918844614;
  memset(&Ane[60], 0, 12U * sizeof(real_T));
  Ane[72] = proc_control_node_B.t6_hv * proc_control_node_B.t9_h;
  Ane[73] = proc_control_node_B.t9_h * proc_control_node_B.t13_l;
  Ane[74] = -proc_control_node_B.t16_gy;
  Ane[75] = 0.0;
  Ane[76] = 0.0;
  Ane[77] = 0.0;
  Ane_tmp_1 = proc_control_node_B.t17_gz * in1[6];
  Ane[78] = (((((proc_control_node_B.t7_d * -0.036243063166504788 +
                 proc_control_node_B.t28_b) + proc_control_node_B.t29_d) -
               proc_control_node_B.t30_f) - proc_control_node_B.t34_i) -
             Ane_tmp_1 * 0.036243063166504788) - 0.46465465598083061;
  Ane[79] = (((in1[7] * 0.00477039452928936 - in1[8] * 0.001468966557066211) -
              Ane_tmp_1 * 1.109195745194835E-6) - 1.422045827172866E-5) + ((in1
    [10] * 0.00041592787873873338 - in1[11] * 0.74121409319149256) -
    proc_control_node_B.t7_d * 1.109195745194835E-6);
  Ane[80] = (((in1[7] * -5.890830655932608E-5 + in1[8] * 0.00568699616459184) +
              Ane_tmp_1 * 7.9830677445685858E-6) + 0.0001023470223662639) +
    ((in1[10] * 0.69409782663856512 - in1[11] * 0.00032422410747795261) +
     proc_control_node_B.t7_d * 7.9830677445685858E-6);
  Ane[81] = (((in1[10] * 0.032506453976272241 + in1[11] * 0.24400486517334929) -
              proc_control_node_B.t7_d * 0.0001525121428377004) + ((in1[7] *
    0.044446246736648841 - in1[8] * 0.1148218101592509) - Ane_tmp_1 *
              0.0001525121428377004)) + -0.0019552838825346208;
  Ane[82] = (((in1[7] * 1.7911420833141059E-5 + in1[8] * 8.3502908029033716) +
              Ane_tmp_1 * 0.011738978516892359) + 0.150499724575543) + ((in1[10]
    * -0.00568699616459184 - in1[11] * 0.001145088836853196) +
    proc_control_node_B.t7_d * 0.011738978516892359);
  Ane[83] = (((in1[10] * -7.5569972812640509E-5 - in1[11] * 0.00477039452928936)
              - proc_control_node_B.t7_d * 0.0011846302503005471) + ((in1[7] *
    -5.91169722427816 - in1[8] * 2.2977499514997389E-5) - Ane_tmp_1 *
              0.0011846302503005471)) + -0.015187567311545479;
  Ane[84] = proc_control_node_B.t6_hv * proc_control_node_B.t12_f *
    proc_control_node_B.t16_gy + -proc_control_node_B.t5_am *
    proc_control_node_B.t13_l;
  Ane_tmp_1 = proc_control_node_B.t5_am * proc_control_node_B.t6_hv;
  proc_control_node_B.t7_d = proc_control_node_B.t12_f *
    proc_control_node_B.t13_l;
  Ane[85] = proc_control_node_B.t7_d * proc_control_node_B.t16_gy + Ane_tmp_1;
  Ane[86] = proc_control_node_B.Ane_tmp_c;
  Ane[87] = 0.0;
  Ane[88] = 0.0;
  Ane[89] = 0.0;
  proc_control_node_B.Ane_tmp_c = proc_control_node_B.t18_a * in1[7];
  Ane[90] = (((in1[9] * -2.1519484922730651E-5 + in1[11] * 1.3454180758607359) -
              proc_control_node_B.t8_i * 7.7738505218783331E-7) - in1[6] *
             0.01129023503850542) + ((in1[8] * -0.00041111798914172931 -
    proc_control_node_B.Ane_tmp_c * 7.7738505218783331E-7) -
    1.8960611028971542E-5);
  Ane[91] = (((((proc_control_node_B.t8_i * -0.01903042325061665 +
                 proc_control_node_B.t28_b) + proc_control_node_B.t31_a) +
               -proc_control_node_B.t32_m) - proc_control_node_B.t36_k) -
             proc_control_node_B.Ane_tmp_c * 0.01903042325061665) -
    0.46415666464918648;
  Ane[92] = (((in1[6] * -5.890830655932608E-5 + in1[8] * 0.0071670223909459834)
              + proc_control_node_B.Ane_tmp_c * 2.3842573459475649E-5) +
             0.00058152618193843065) + ((in1[9] * -0.93255469429176219 - in1[11]
    * 7.6083411800115719E-5) + proc_control_node_B.t8_i * 2.3842573459475649E-5);
  Ane[93] = (((in1[9] * -0.0071670223909459834 + in1[11] * 0.00145353196782447)
              - proc_control_node_B.t8_i * 0.017943464992838758) + ((in1[6] *
    0.044446246736648841 - in1[8] * 5.3937622658585171) -
              proc_control_node_B.Ane_tmp_c * 0.017943464992838758)) +
    -0.4376454876302136;
  Ane[94] = (((in1[9] * 0.0012538688125934979 - in1[11] * 0.1118794885864644) +
              proc_control_node_B.t8_i * 8.4206769578830268E-5) + in1[6] *
             1.7911420833141059E-5) + ((proc_control_node_B.Ane_tmp_c *
    8.4206769578830268E-5 + in1[8] * 0.025315910649035739) +
    0.0020538236482641531);
  Ane[95] = (((in1[9] * 1.6661666253314429E-5 + in1[11] * 0.01129023503850542) +
              proc_control_node_B.t8_i * 0.00035080205133418912) + ((in1[6] *
    -5.91169722427816 + in1[8] * 0.01257120723021817) +
              proc_control_node_B.Ane_tmp_c * 0.00035080205133418912)) +
    0.0085561475935168052;
  Ane[96] = Ane_tmp_1 * proc_control_node_B.t16_gy + proc_control_node_B.t7_d;
  Ane[97] = proc_control_node_B.t5_am * proc_control_node_B.t13_l *
    proc_control_node_B.t16_gy + -proc_control_node_B.t6_hv *
    proc_control_node_B.t12_f;
  Ane[98] = proc_control_node_B.Ane_tmp;
  Ane[99] = 0.0;
  Ane[100] = 0.0;
  Ane[101] = 0.0;
  proc_control_node_B.Ane_tmp = proc_control_node_B.t19_d * in1[8];
  Ane[102] = (((in1[9] * 2.989993556213668E-6 - in1[10] * 1.4431163638272659) +
               proc_control_node_B.t10_d * 5.1582899272597018E-6) - in1[6] *
              0.143523560675718) + ((proc_control_node_B.Ane_tmp *
    5.1582899272597018E-6 + in1[7] * -0.00041111798914172931) +
    0.0001592064792364106);
  Ane[103] = (((in1[9] * 1.0731951852318531 - in1[10] * 1.356129262930646E-5) +
               proc_control_node_B.t10_d * 2.1981689677272681E-5) + ((in1[6] *
    -0.001468966557066211 - in1[7] * 0.069014505171846527) +
    proc_control_node_B.Ane_tmp * 2.1981689677272681E-5)) +
    0.00067844721226150231;
  Ane[104] = (((((proc_control_node_B.t10_d * -0.01616685726098728 +
                  proc_control_node_B.t29_d) + -proc_control_node_B.t32_m) +
                proc_control_node_B.t35_i) + proc_control_node_B.t37_a) -
              proc_control_node_B.Ane_tmp * 0.01616685726098728) -
    0.49897707595639768;
  Ane[105] = (((in1[9] * 0.069014505171846527 - in1[10] * 0.0018646499569661989)
               + proc_control_node_B.t10_d * 0.00171795837774031) + ((in1[6] *
    -0.1148218101592509 - in1[7] * 5.3937622658585171) +
    proc_control_node_B.Ane_tmp * 0.00171795837774031)) + 0.053023406720379938;
  Ane[106] = (((in1[9] * -0.00032387772021301561 + in1[10] * 0.143523560675718)
               - proc_control_node_B.t10_d * 0.00030055639757781919) + ((in1[6] *
    8.3502908029033716 + in1[7] * 0.025315910649035739) -
    proc_control_node_B.Ane_tmp * 0.00030055639757781919)) +
    -0.0092764320240067664;
  Ane[107] = (((in1[9] * -0.0013492616947596331 - in1[10] * 0.01448357294143097)
               - proc_control_node_B.t10_d * 3.993855127780116E-6) - in1[6] *
              2.2977499514997389E-5) + ((in1[7] * 0.01257120723021817 -
    proc_control_node_B.Ane_tmp * 3.993855127780116E-6) - 0.00012326713357346041);
  Ane[108] = 0.0;
  Ane[109] = 0.0;
  Ane[110] = 0.0;
  Ane[111] = 1.0;
  Ane[112] = 0.0;
  Ane[113] = 0.0;
  proc_control_node_B.Ane_tmp = in1[9] * proc_control_node_B.t11_l;
  Ane[114] = (((in1[9] * -0.00010396365424827521 - in1[10] *
                0.0030560301354578762) - in1[11] * 0.030270009262121408) -
              proc_control_node_B.t2_m * 2.1768827225552109E-5) + (((in1[7] *
    -2.1519484922730651E-5 + in1[8] * 2.989993556213668E-6) -
    proc_control_node_B.Ane_tmp * 2.1768827225552109E-5) -
    0.00043450752945213789);
  Ane[115] = ((((in1[9] * 0.0028513455484883 - in1[10] * 0.00032316342950661811)
                + in1[11] * 4.2079285691049859E-5) - proc_control_node_B.t2_m *
               0.0036543398217122828) + ((in1[7] * -9.1703771260780813E-5 + in1
    [8] * 1.0731951852318531) - proc_control_node_B.Ane_tmp *
    0.0036543398217122828)) + -0.072940914605035587;
  Ane[116] = (((in1[9] * 0.023864851221217471 + in1[10] * 4.0426879502317728E-6)
               - in1[11] * 0.00016269010774240791) + ((proc_control_node_B.t2_m *
    0.0003794960966701478 - in1[7] * 0.93255469429176219) - in1[8] *
    9.1703771260780813E-5)) + (proc_control_node_B.Ane_tmp *
    0.0003794960966701478 + 0.007574772388625705);
  Ane[117] = ((((proc_control_node_B.t2_m * -0.28560141361437341 +
                 proc_control_node_B.t36_k) - proc_control_node_B.t37_a) -
               proc_control_node_B.Ane_tmp * 0.28560141361437341) -
              5.7006270182509668) + ((in1[9] * 0.00017692814721597281 - in1[10] *
    0.00301187450220627) + in1[11] * 0.0032852614324183722);
  Ane[118] = (((in1[9] * 0.005100926963153893 + in1[10] * 7.54282242443926E-5) +
               in1[11] * 0.76112100692746432) + ((proc_control_node_B.t2_m *
    0.0013404854555911631 + in1[7] * 0.0012538688125934979) - in1[8] *
    0.00032387772021301561)) + (proc_control_node_B.Ane_tmp *
    0.0013404854555911631 + 0.026756196718386482);
  Ane[119] = (((in1[9] * -0.0085297096290247246 - in1[10] * 0.59953739020136265)
               - in1[11] * 6.8948828938803766E-5) + ((proc_control_node_B.t2_m *
    0.00066564938883491385 + in1[7] * 1.6661666253314429E-5) - in1[8] *
    0.0013492616947596331)) + (proc_control_node_B.Ane_tmp *
    0.00066564938883491385 + 0.013286414946804669);
  Ane[120] = 0.0;
  Ane[121] = 0.0;
  Ane[122] = 0.0;
  Ane[123] = Ane_tmp_0 * proc_control_node_B.t20_m;
  Ane[124] = proc_control_node_B.t5_am;
  Ane[125] = proc_control_node_B.t12_f * proc_control_node_B.t20_m;
  proc_control_node_B.Ane_tmp = in1[10] * proc_control_node_B.t14_l;
  Ane[126] = ((((in1[9] * -0.0030560301354578762 + in1[10] *
                 0.001929418735906703) + in1[11] * 6.2884941489263073E-5) +
               proc_control_node_B.t3_j * 0.001003331497170287) + ((in1[6] *
    9.7602896722846373E-5 - in1[8] * 1.4431163638272659) +
    proc_control_node_B.Ane_tmp * 0.001003331497170287)) + 0.0234110682673067;
  Ane[127] = (((in1[9] * -0.00032316342950661811 + in1[10] *
                4.5292476302332957E-6) - in1[11] * 0.016528998001422841) +
              proc_control_node_B.t3_j * 1.026911824132076E-5) + (((in1[6] *
    0.00041592787873873338 - in1[8] * 1.356129262930646E-5) +
    proc_control_node_B.Ane_tmp * 1.026911824132076E-5) + 0.00023961275896415121);
  Ane[128] = (((in1[9] * 4.0426879502317728E-6 + in1[10] * 0.023860477346842442)
               - in1[11] * 0.000941018323416786) + ((proc_control_node_B.t3_j *
    -3.9756137245743291E-5 + in1[6] * 0.69409782663856512) + in1[8] *
    9.7602896722846373E-5)) + (proc_control_node_B.Ane_tmp *
    -3.9756137245743291E-5 - 0.00092764320240067675);
  Ane[129] = (((in1[9] * -0.00301187450220627 + in1[10] * 0.00082864946354184129)
               - in1[11] * 0.291807921220024) + ((proc_control_node_B.t3_j *
    0.00080268590155159437 + in1[6] * 0.032506453976272241) - in1[8] *
    0.0018646499569661989)) + (proc_control_node_B.Ane_tmp *
    0.00080268590155159437 + 0.018729337702870542);
  Ane[130] = ((((proc_control_node_B.t3_j * -0.058374455968341669 +
                 proc_control_node_B.t34_i) - proc_control_node_B.t35_i) -
               proc_control_node_B.Ane_tmp * 0.058374455968341669) -
              1.362070639261306) + ((in1[9] * 7.54282242443926E-5 - in1[10] *
    0.00019446645525741661) - in1[11] * 0.003324115892995542);
  Ane[131] = ((((proc_control_node_B.t3_j * 1.6062902063655571E-7 - in1[6] *
                 7.5569972812640509E-5) - in1[8] * 0.01448357294143097) +
               proc_control_node_B.Ane_tmp * 1.6062902063655571E-7) + ((in1[9] *
    -0.59953739020136265 + in1[10] * 0.0085432434746820687) + in1[11] *
    0.0030111351640179931)) + 3.7480104815196341E-6;
  Ane[132] = 0.0;
  Ane[133] = 0.0;
  Ane[134] = 0.0;
  Ane[135] = Ane_tmp * proc_control_node_B.t20_m;
  Ane[136] = -proc_control_node_B.t12_f;
  Ane[137] = proc_control_node_B.t5_am * proc_control_node_B.t20_m;
  proc_control_node_B.Ane_tmp = in1[11] * proc_control_node_B.t15_f;
  Ane[138] = (((in1[9] * -0.030270009262121408 + in1[10] * 6.2884941489263073E-5)
               + in1[11] * 0.0020006959490984312) - proc_control_node_B.t4_i *
              0.0001032754577185093) + (((in1[6] * 1.0571299073092789E-5 + in1[7]
    * 1.3454180758607359) - proc_control_node_B.Ane_tmp * 0.0001032754577185093)
    - 0.0050625224371818262);
  Ane[139] = (((in1[9] * 4.2079285691049859E-5 - in1[10] * 0.016528998001422841)
               + in1[11] * 0.00283488707941543) + proc_control_node_B.t4_i *
              4.3636352726935713E-5) + (((in1[6] * -0.74121409319149256 + in1[7]
    * 1.0571299073092789E-5) + proc_control_node_B.Ane_tmp *
    4.3636352726935713E-5) + 0.0021390368983792022);
  Ane[140] = ((((proc_control_node_B.t4_i * -5.3885346962112674E-7 - in1[6] *
                 0.00032422410747795261) - in1[7] * 7.6083411800115719E-5) -
               proc_control_node_B.Ane_tmp * 5.3885346962112674E-7) + ((in1[9] *
    -0.00016269010774240791 - in1[10] * 0.000941018323416786) - in1[11] *
    2.6641242336162E-6)) + -2.6414385765741509E-5;
  Ane[141] = (((in1[9] * 0.0032852614324183722 - in1[10] * 0.291807921220024) -
               in1[11] * 0.00063467747547131872) + ((proc_control_node_B.t4_i *
    0.00040656429737222281 + in1[6] * 0.24400486517334929) + in1[7] *
    0.00145353196782447)) + (proc_control_node_B.Ane_tmp *
    0.00040656429737222281 + 0.019929622420207);
  Ane[142] = ((((proc_control_node_B.t4_i * 1.6384160104928689E-7 - in1[6] *
                 0.001145088836853196) - in1[7] * 0.1118794885864644) +
               proc_control_node_B.Ane_tmp * 1.6384160104928689E-7) + ((in1[9] *
    0.76112100692746432 - in1[10] * 0.003324115892995542) - in1[11] *
    0.005288701994301117)) + 8.0314510318277867E-6;
  Ane[143] = ((((proc_control_node_B.t4_i * -0.054076220260104418 +
                 proc_control_node_B.t30_f) - proc_control_node_B.t31_a) -
               proc_control_node_B.Ane_tmp * 0.054076220260104418) -
              2.6507951107894319) + ((in1[9] * -6.8948828938803766E-5 + in1[10] *
    0.0030111351640179931) + in1[11] * 1.7711862430984169E-5);
}

// Function for MATLAB Function: '<S130>/MATLAB Function2'
int32_T proc_control_nodeModelClass::proc_control_node_xgetrfs(real_T A[144],
  real_T B[144])
{
  int32_T c_ix;
  int32_T d;
  int32_T ijA;
  int32_T info;
  int32_T iy;
  int32_T jA;
  int8_T ipiv;
  for (c_ix = 0; c_ix < 12; c_ix++) {
    proc_control_node_B.ipiv_h[c_ix] = static_cast<int8_T>(c_ix + 1);
  }

  info = 0;
  for (proc_control_node_B.b_j_c = 0; proc_control_node_B.b_j_c < 11;
       proc_control_node_B.b_j_c++) {
    proc_control_node_B.c_mi = proc_control_node_B.b_j_c * 13;
    jA = 0;
    proc_control_node_B.ix_h = proc_control_node_B.c_mi;
    proc_control_node_B.smax_d = fabs(A[proc_control_node_B.c_mi]);
    for (iy = 2; iy <= 12 - proc_control_node_B.b_j_c; iy++) {
      proc_control_node_B.ix_h++;
      proc_control_node_B.y_hs = fabs(A[proc_control_node_B.ix_h]);
      if (proc_control_node_B.y_hs > proc_control_node_B.smax_d) {
        jA = iy - 1;
        proc_control_node_B.smax_d = proc_control_node_B.y_hs;
      }
    }

    if (A[proc_control_node_B.c_mi + jA] != 0.0) {
      if (jA != 0) {
        c_ix = proc_control_node_B.b_j_c + jA;
        proc_control_node_B.ipiv_h[proc_control_node_B.b_j_c] =
          static_cast<int8_T>(c_ix + 1);
        for (jA = 0; jA < 12; jA++) {
          proc_control_node_B.ix_h = jA * 12 + proc_control_node_B.b_j_c;
          proc_control_node_B.smax_d = A[proc_control_node_B.ix_h];
          iy = jA * 12 + c_ix;
          A[proc_control_node_B.ix_h] = A[iy];
          A[iy] = proc_control_node_B.smax_d;
        }
      }

      jA = (proc_control_node_B.c_mi - proc_control_node_B.b_j_c) + 12;
      proc_control_node_B.ix_h = proc_control_node_B.c_mi + 1;
      while (proc_control_node_B.ix_h + 1 <= jA) {
        A[proc_control_node_B.ix_h] /= A[proc_control_node_B.c_mi];
        proc_control_node_B.ix_h++;
      }
    } else {
      info = proc_control_node_B.b_j_c + 1;
    }

    jA = proc_control_node_B.c_mi;
    proc_control_node_B.ix_h = proc_control_node_B.c_mi + 12;
    for (iy = 0; iy <= 10 - proc_control_node_B.b_j_c; iy++) {
      if (A[proc_control_node_B.ix_h] != 0.0) {
        proc_control_node_B.smax_d = -A[proc_control_node_B.ix_h];
        c_ix = proc_control_node_B.c_mi + 1;
        d = (jA - proc_control_node_B.b_j_c) + 24;
        for (ijA = jA + 13; ijA < d; ijA++) {
          A[ijA] += A[c_ix] * proc_control_node_B.smax_d;
          c_ix++;
        }
      }

      proc_control_node_B.ix_h += 12;
      jA += 12;
    }
  }

  if ((info == 0) && (!(A[143] != 0.0))) {
    info = 12;
  }

  for (proc_control_node_B.b_j_c = 0; proc_control_node_B.b_j_c < 11;
       proc_control_node_B.b_j_c++) {
    ipiv = proc_control_node_B.ipiv_h[proc_control_node_B.b_j_c];
    if (proc_control_node_B.b_j_c + 1 != ipiv) {
      for (proc_control_node_B.c_mi = 0; proc_control_node_B.c_mi < 12;
           proc_control_node_B.c_mi++) {
        proc_control_node_B.ix_h = 12 * proc_control_node_B.c_mi +
          proc_control_node_B.b_j_c;
        proc_control_node_B.smax_d = B[proc_control_node_B.ix_h];
        c_ix = (ipiv + 12 * proc_control_node_B.c_mi) - 1;
        B[proc_control_node_B.ix_h] = B[c_ix];
        B[c_ix] = proc_control_node_B.smax_d;
      }
    }
  }

  for (proc_control_node_B.b_j_c = 0; proc_control_node_B.b_j_c < 12;
       proc_control_node_B.b_j_c++) {
    jA = 12 * proc_control_node_B.b_j_c;
    for (proc_control_node_B.c_mi = 0; proc_control_node_B.c_mi < 12;
         proc_control_node_B.c_mi++) {
      proc_control_node_B.ix_h = 12 * proc_control_node_B.c_mi;
      if (B[proc_control_node_B.c_mi + jA] != 0.0) {
        for (iy = proc_control_node_B.c_mi + 2; iy < 13; iy++) {
          c_ix = (iy + jA) - 1;
          B[c_ix] -= A[(iy + proc_control_node_B.ix_h) - 1] *
            B[proc_control_node_B.c_mi + jA];
        }
      }
    }
  }

  for (proc_control_node_B.b_j_c = 0; proc_control_node_B.b_j_c < 12;
       proc_control_node_B.b_j_c++) {
    jA = 12 * proc_control_node_B.b_j_c;
    for (proc_control_node_B.c_mi = 11; proc_control_node_B.c_mi >= 0;
         proc_control_node_B.c_mi--) {
      proc_control_node_B.ix_h = 12 * proc_control_node_B.c_mi;
      c_ix = proc_control_node_B.c_mi + jA;
      proc_control_node_B.smax_d = B[c_ix];
      if (proc_control_node_B.smax_d != 0.0) {
        B[c_ix] = proc_control_node_B.smax_d / A[proc_control_node_B.c_mi +
          proc_control_node_B.ix_h];
        for (iy = 0; iy < proc_control_node_B.c_mi; iy++) {
          d = iy + jA;
          B[d] -= B[c_ix] * A[iy + proc_control_node_B.ix_h];
        }
      }
    }
  }

  return info;
}

// Function for MATLAB Function: '<S130>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_node_lusolve(const real_T A[144],
  const real_T B[144], real_T X[144])
{
  memcpy(&X[0], &B[0], 144U * sizeof(real_T));
  memcpy(&proc_control_node_B.b_A_g[0], &A[0], 144U * sizeof(real_T));
  proc_control_node_xgetrfs(proc_control_node_B.b_A_g, X);
}

// Function for MATLAB Function: '<S130>/MATLAB Function2'
void proc_control_nodeModelClass::proc_co_PadeApproximantOfDegree(const real_T
  A[144], uint8_T m, real_T F[144])
{
  for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 12;
       proc_control_node_B.i30++) {
    memset(&proc_control_node_B.A2_e[proc_control_node_B.i30 * 12], 0, 12U *
           sizeof(real_T));
    for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
         proc_control_node_B.e_k_o++) {
      for (proc_control_node_B.e_k_j = 0; proc_control_node_B.e_k_j < 12;
           proc_control_node_B.e_k_j++) {
        proc_control_node_B.A2_tmp_p = 12 * proc_control_node_B.i30 +
          proc_control_node_B.e_k_j;
        proc_control_node_B.A2_e[proc_control_node_B.A2_tmp_p] += A[12 *
          proc_control_node_B.e_k_o + proc_control_node_B.e_k_j] * A[12 *
          proc_control_node_B.i30 + proc_control_node_B.e_k_o];
      }
    }
  }

  if (m == 3) {
    memcpy(&proc_control_node_B.U_m[0], &proc_control_node_B.A2_e[0], 144U *
           sizeof(real_T));
    proc_control_node_B.e_k_j = 0;
    proc_control_node_B.A2_tmp_p = 0;
    for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
         proc_control_node_B.e_k_o++) {
      memset(&proc_control_node_B.A4_a[proc_control_node_B.A2_tmp_p], 0, 12U *
             sizeof(real_T));
      proc_control_node_B.U_m[proc_control_node_B.e_k_j] += 60.0;
      proc_control_node_B.e_k_j += 13;
      proc_control_node_B.A2_tmp_p += 12;
    }

    proc_control_node_B.e_k_j = 0;
    for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
         proc_control_node_B.e_k_o++) {
      proc_control_node_B.A2_tmp_p = 0;
      for (proc_control_node_B.i31 = 0; proc_control_node_B.i31 < 12;
           proc_control_node_B.i31++) {
        for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 12;
             proc_control_node_B.i30++) {
          proc_control_node_B.A_tmp_l = proc_control_node_B.i30 +
            proc_control_node_B.e_k_j;
          proc_control_node_B.A4_a[proc_control_node_B.A_tmp_l] +=
            A[proc_control_node_B.i30 + proc_control_node_B.A2_tmp_p] *
            proc_control_node_B.U_m[proc_control_node_B.i31 +
            proc_control_node_B.e_k_j];
        }

        proc_control_node_B.A2_tmp_p += 12;
      }

      proc_control_node_B.e_k_j += 12;
    }

    for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 144;
         proc_control_node_B.i30++) {
      proc_control_node_B.U_m[proc_control_node_B.i30] =
        proc_control_node_B.A4_a[proc_control_node_B.i30];
      proc_control_node_B.V_m[proc_control_node_B.i30] = 12.0 *
        proc_control_node_B.A2_e[proc_control_node_B.i30];
    }

    proc_control_node_B.d_b = 120.0;
  } else {
    for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 12;
         proc_control_node_B.i30++) {
      memset(&proc_control_node_B.A3_j[proc_control_node_B.i30 * 12], 0, 12U *
             sizeof(real_T));
      for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
           proc_control_node_B.e_k_o++) {
        for (proc_control_node_B.e_k_j = 0; proc_control_node_B.e_k_j < 12;
             proc_control_node_B.e_k_j++) {
          proc_control_node_B.A2_tmp_p = 12 * proc_control_node_B.i30 +
            proc_control_node_B.e_k_j;
          proc_control_node_B.A3_j[proc_control_node_B.A2_tmp_p] +=
            proc_control_node_B.A2_e[12 * proc_control_node_B.e_k_o +
            proc_control_node_B.e_k_j] * proc_control_node_B.A2_e[12 *
            proc_control_node_B.i30 + proc_control_node_B.e_k_o];
        }
      }
    }

    if (m == 5) {
      for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 144;
           proc_control_node_B.i30++) {
        proc_control_node_B.U_m[proc_control_node_B.i30] = 420.0 *
          proc_control_node_B.A2_e[proc_control_node_B.i30] +
          proc_control_node_B.A3_j[proc_control_node_B.i30];
      }

      proc_control_node_B.e_k_j = 0;
      proc_control_node_B.A2_tmp_p = 0;
      for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
           proc_control_node_B.e_k_o++) {
        memset(&proc_control_node_B.A4_a[proc_control_node_B.A2_tmp_p], 0, 12U *
               sizeof(real_T));
        proc_control_node_B.U_m[proc_control_node_B.e_k_j] += 15120.0;
        proc_control_node_B.e_k_j += 13;
        proc_control_node_B.A2_tmp_p += 12;
      }

      proc_control_node_B.e_k_j = 0;
      for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
           proc_control_node_B.e_k_o++) {
        proc_control_node_B.A2_tmp_p = 0;
        for (proc_control_node_B.i31 = 0; proc_control_node_B.i31 < 12;
             proc_control_node_B.i31++) {
          for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 12;
               proc_control_node_B.i30++) {
            proc_control_node_B.A_tmp_l = proc_control_node_B.i30 +
              proc_control_node_B.e_k_j;
            proc_control_node_B.A4_a[proc_control_node_B.A_tmp_l] +=
              A[proc_control_node_B.i30 + proc_control_node_B.A2_tmp_p] *
              proc_control_node_B.U_m[proc_control_node_B.i31 +
              proc_control_node_B.e_k_j];
          }

          proc_control_node_B.A2_tmp_p += 12;
        }

        proc_control_node_B.e_k_j += 12;
      }

      for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 144;
           proc_control_node_B.i30++) {
        proc_control_node_B.U_m[proc_control_node_B.i30] =
          proc_control_node_B.A4_a[proc_control_node_B.i30];
        proc_control_node_B.V_m[proc_control_node_B.i30] = 30.0 *
          proc_control_node_B.A3_j[proc_control_node_B.i30] + 3360.0 *
          proc_control_node_B.A2_e[proc_control_node_B.i30];
      }

      proc_control_node_B.d_b = 30240.0;
    } else {
      for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 12;
           proc_control_node_B.i30++) {
        memset(&proc_control_node_B.A4_f[proc_control_node_B.i30 * 12], 0, 12U *
               sizeof(real_T));
        for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
             proc_control_node_B.e_k_o++) {
          for (proc_control_node_B.e_k_j = 0; proc_control_node_B.e_k_j < 12;
               proc_control_node_B.e_k_j++) {
            proc_control_node_B.A2_tmp_p = 12 * proc_control_node_B.i30 +
              proc_control_node_B.e_k_j;
            proc_control_node_B.A4_f[proc_control_node_B.A2_tmp_p] +=
              proc_control_node_B.A3_j[12 * proc_control_node_B.e_k_o +
              proc_control_node_B.e_k_j] * proc_control_node_B.A2_e[12 *
              proc_control_node_B.i30 + proc_control_node_B.e_k_o];
          }
        }
      }

      switch (m) {
       case 7:
        for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 144;
             proc_control_node_B.i30++) {
          proc_control_node_B.U_m[proc_control_node_B.i30] = (1512.0 *
            proc_control_node_B.A3_j[proc_control_node_B.i30] +
            proc_control_node_B.A4_f[proc_control_node_B.i30]) + 277200.0 *
            proc_control_node_B.A2_e[proc_control_node_B.i30];
        }

        proc_control_node_B.e_k_j = 0;
        proc_control_node_B.A2_tmp_p = 0;
        for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
             proc_control_node_B.e_k_o++) {
          memset(&proc_control_node_B.A4_a[proc_control_node_B.A2_tmp_p], 0, 12U
                 * sizeof(real_T));
          proc_control_node_B.U_m[proc_control_node_B.e_k_j] += 8.64864E+6;
          proc_control_node_B.e_k_j += 13;
          proc_control_node_B.A2_tmp_p += 12;
        }

        proc_control_node_B.e_k_j = 0;
        for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
             proc_control_node_B.e_k_o++) {
          proc_control_node_B.A2_tmp_p = 0;
          for (proc_control_node_B.i31 = 0; proc_control_node_B.i31 < 12;
               proc_control_node_B.i31++) {
            for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 12;
                 proc_control_node_B.i30++) {
              proc_control_node_B.A_tmp_l = proc_control_node_B.i30 +
                proc_control_node_B.e_k_j;
              proc_control_node_B.A4_a[proc_control_node_B.A_tmp_l] +=
                A[proc_control_node_B.i30 + proc_control_node_B.A2_tmp_p] *
                proc_control_node_B.U_m[proc_control_node_B.i31 +
                proc_control_node_B.e_k_j];
            }

            proc_control_node_B.A2_tmp_p += 12;
          }

          proc_control_node_B.e_k_j += 12;
        }

        for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 144;
             proc_control_node_B.i30++) {
          proc_control_node_B.U_m[proc_control_node_B.i30] =
            proc_control_node_B.A4_a[proc_control_node_B.i30];
          proc_control_node_B.V_m[proc_control_node_B.i30] = (56.0 *
            proc_control_node_B.A4_f[proc_control_node_B.i30] + 25200.0 *
            proc_control_node_B.A3_j[proc_control_node_B.i30]) + 1.99584E+6 *
            proc_control_node_B.A2_e[proc_control_node_B.i30];
        }

        proc_control_node_B.d_b = 1.729728E+7;
        break;

       case 9:
        for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 12;
             proc_control_node_B.i30++) {
          memset(&proc_control_node_B.V_m[proc_control_node_B.i30 * 12], 0, 12U *
                 sizeof(real_T));
          for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
               proc_control_node_B.e_k_o++) {
            for (proc_control_node_B.e_k_j = 0; proc_control_node_B.e_k_j < 12;
                 proc_control_node_B.e_k_j++) {
              proc_control_node_B.A2_tmp_p = 12 * proc_control_node_B.i30 +
                proc_control_node_B.e_k_j;
              proc_control_node_B.V_m[proc_control_node_B.A2_tmp_p] +=
                proc_control_node_B.A4_f[12 * proc_control_node_B.e_k_o +
                proc_control_node_B.e_k_j] * proc_control_node_B.A2_e[12 *
                proc_control_node_B.i30 + proc_control_node_B.e_k_o];
            }
          }
        }

        for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 144;
             proc_control_node_B.i30++) {
          proc_control_node_B.U_m[proc_control_node_B.i30] = ((3960.0 *
            proc_control_node_B.A4_f[proc_control_node_B.i30] +
            proc_control_node_B.V_m[proc_control_node_B.i30]) + 2.16216E+6 *
            proc_control_node_B.A3_j[proc_control_node_B.i30]) + 3.027024E+8 *
            proc_control_node_B.A2_e[proc_control_node_B.i30];
        }

        proc_control_node_B.e_k_j = 0;
        proc_control_node_B.A2_tmp_p = 0;
        for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
             proc_control_node_B.e_k_o++) {
          memset(&proc_control_node_B.A4_a[proc_control_node_B.A2_tmp_p], 0, 12U
                 * sizeof(real_T));
          proc_control_node_B.U_m[proc_control_node_B.e_k_j] += 8.8216128E+9;
          proc_control_node_B.e_k_j += 13;
          proc_control_node_B.A2_tmp_p += 12;
        }

        proc_control_node_B.e_k_j = 0;
        for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
             proc_control_node_B.e_k_o++) {
          proc_control_node_B.A2_tmp_p = 0;
          for (proc_control_node_B.i31 = 0; proc_control_node_B.i31 < 12;
               proc_control_node_B.i31++) {
            for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 12;
                 proc_control_node_B.i30++) {
              proc_control_node_B.A_tmp_l = proc_control_node_B.i30 +
                proc_control_node_B.e_k_j;
              proc_control_node_B.A4_a[proc_control_node_B.A_tmp_l] +=
                A[proc_control_node_B.i30 + proc_control_node_B.A2_tmp_p] *
                proc_control_node_B.U_m[proc_control_node_B.i31 +
                proc_control_node_B.e_k_j];
            }

            proc_control_node_B.A2_tmp_p += 12;
          }

          proc_control_node_B.e_k_j += 12;
        }

        for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 144;
             proc_control_node_B.i30++) {
          proc_control_node_B.U_m[proc_control_node_B.i30] =
            proc_control_node_B.A4_a[proc_control_node_B.i30];
          proc_control_node_B.V_m[proc_control_node_B.i30] = ((90.0 *
            proc_control_node_B.V_m[proc_control_node_B.i30] + 110880.0 *
            proc_control_node_B.A4_f[proc_control_node_B.i30]) + 3.027024E+7 *
            proc_control_node_B.A3_j[proc_control_node_B.i30]) + 2.0756736E+9 *
            proc_control_node_B.A2_e[proc_control_node_B.i30];
        }

        proc_control_node_B.d_b = 1.76432256E+10;
        break;

       default:
        for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 144;
             proc_control_node_B.i30++) {
          proc_control_node_B.U_m[proc_control_node_B.i30] = (3.352212864E+10 *
            proc_control_node_B.A4_f[proc_control_node_B.i30] +
            1.05594705216E+13 * proc_control_node_B.A3_j[proc_control_node_B.i30])
            + 1.1873537964288E+15 *
            proc_control_node_B.A2_e[proc_control_node_B.i30];
        }

        proc_control_node_B.e_k_j = 0;
        for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
             proc_control_node_B.e_k_o++) {
          proc_control_node_B.U_m[proc_control_node_B.e_k_j] +=
            3.238237626624E+16;
          proc_control_node_B.e_k_j += 13;
        }

        for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 144;
             proc_control_node_B.i30++) {
          proc_control_node_B.V_m[proc_control_node_B.i30] = (16380.0 *
            proc_control_node_B.A3_j[proc_control_node_B.i30] +
            proc_control_node_B.A4_f[proc_control_node_B.i30]) + 4.08408E+7 *
            proc_control_node_B.A2_e[proc_control_node_B.i30];
        }

        for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 12;
             proc_control_node_B.i30++) {
          proc_control_node_B.e_k_j = 0;
          for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
               proc_control_node_B.e_k_o++) {
            proc_control_node_B.d_b = 0.0;
            proc_control_node_B.A2_tmp_p = 0;
            for (proc_control_node_B.i31 = 0; proc_control_node_B.i31 < 12;
                 proc_control_node_B.i31++) {
              proc_control_node_B.d_b +=
                proc_control_node_B.A4_f[proc_control_node_B.A2_tmp_p +
                proc_control_node_B.i30] *
                proc_control_node_B.V_m[proc_control_node_B.i31 +
                proc_control_node_B.e_k_j];
              proc_control_node_B.A2_tmp_p += 12;
            }

            proc_control_node_B.A2_tmp_p = proc_control_node_B.e_k_j +
              proc_control_node_B.i30;
            proc_control_node_B.A4_a[proc_control_node_B.A2_tmp_p] =
              proc_control_node_B.U_m[proc_control_node_B.A2_tmp_p] +
              proc_control_node_B.d_b;
            proc_control_node_B.e_k_j += 12;
          }
        }

        for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 12;
             proc_control_node_B.i30++) {
          memset(&proc_control_node_B.U_m[proc_control_node_B.i30 * 12], 0, 12U *
                 sizeof(real_T));
          for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
               proc_control_node_B.e_k_o++) {
            for (proc_control_node_B.e_k_j = 0; proc_control_node_B.e_k_j < 12;
                 proc_control_node_B.e_k_j++) {
              proc_control_node_B.A2_tmp_p = 12 * proc_control_node_B.i30 +
                proc_control_node_B.e_k_j;
              proc_control_node_B.U_m[proc_control_node_B.A2_tmp_p] += A[12 *
                proc_control_node_B.e_k_o + proc_control_node_B.e_k_j] *
                proc_control_node_B.A4_a[12 * proc_control_node_B.i30 +
                proc_control_node_B.e_k_o];
            }
          }
        }

        for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 144;
             proc_control_node_B.i30++) {
          proc_control_node_B.A4_a[proc_control_node_B.i30] = (182.0 *
            proc_control_node_B.A4_f[proc_control_node_B.i30] + 960960.0 *
            proc_control_node_B.A3_j[proc_control_node_B.i30]) + 1.32324192E+9 *
            proc_control_node_B.A2_e[proc_control_node_B.i30];
        }

        for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 12;
             proc_control_node_B.i30++) {
          proc_control_node_B.e_k_j = 0;
          for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
               proc_control_node_B.e_k_o++) {
            proc_control_node_B.d_b = 0.0;
            proc_control_node_B.A2_tmp_p = 0;
            for (proc_control_node_B.i31 = 0; proc_control_node_B.i31 < 12;
                 proc_control_node_B.i31++) {
              proc_control_node_B.d_b +=
                proc_control_node_B.A4_f[proc_control_node_B.A2_tmp_p +
                proc_control_node_B.i30] *
                proc_control_node_B.A4_a[proc_control_node_B.i31 +
                proc_control_node_B.e_k_j];
              proc_control_node_B.A2_tmp_p += 12;
            }

            proc_control_node_B.A2_tmp_p = proc_control_node_B.e_k_j +
              proc_control_node_B.i30;
            proc_control_node_B.V_m[proc_control_node_B.A2_tmp_p] =
              ((proc_control_node_B.A4_f[proc_control_node_B.A2_tmp_p] *
                6.704425728E+11 + proc_control_node_B.d_b) +
               proc_control_node_B.A3_j[proc_control_node_B.A2_tmp_p] *
               1.29060195264E+14) +
              proc_control_node_B.A2_e[proc_control_node_B.A2_tmp_p] *
              7.7717703038976E+15;
            proc_control_node_B.e_k_j += 12;
          }
        }

        proc_control_node_B.d_b = 6.476475253248E+16;
        break;
      }
    }
  }

  proc_control_node_B.e_k_j = 0;
  for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
       proc_control_node_B.e_k_o++) {
    proc_control_node_B.V_m[proc_control_node_B.e_k_j] +=
      proc_control_node_B.d_b;
    proc_control_node_B.e_k_j += 13;
  }

  for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 144;
       proc_control_node_B.e_k_o++) {
    proc_control_node_B.V_m[proc_control_node_B.e_k_o] -=
      proc_control_node_B.U_m[proc_control_node_B.e_k_o];
    proc_control_node_B.U_m[proc_control_node_B.e_k_o] *= 2.0;
  }

  proc_control_node_lusolve(proc_control_node_B.V_m, proc_control_node_B.U_m, F);
  proc_control_node_B.e_k_j = 0;
  for (proc_control_node_B.e_k_o = 0; proc_control_node_B.e_k_o < 12;
       proc_control_node_B.e_k_o++) {
    F[proc_control_node_B.e_k_j]++;
    proc_control_node_B.e_k_j += 13;
  }
}

// Function for MATLAB Function: '<S130>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_node_mldivide(const real_T A[36],
  const real_T B[36], real_T Y[36])
{
  int32_T c_ix;
  int32_T c_k;
  int32_T d;
  int32_T ijA;
  int32_T iy;
  int8_T ipiv;
  memcpy(&proc_control_node_B.b_A_pi[0], &A[0], 36U * sizeof(real_T));
  for (c_ix = 0; c_ix < 6; c_ix++) {
    proc_control_node_B.ipiv_hg[c_ix] = static_cast<int8_T>(c_ix + 1);
  }

  for (proc_control_node_B.b_j_kh = 0; proc_control_node_B.b_j_kh < 5;
       proc_control_node_B.b_j_kh++) {
    proc_control_node_B.ip_c = proc_control_node_B.b_j_kh * 7;
    iy = 0;
    proc_control_node_B.ix_hs = proc_control_node_B.ip_c;
    proc_control_node_B.smax_p = fabs
      (proc_control_node_B.b_A_pi[proc_control_node_B.ip_c]);
    for (c_k = 2; c_k <= 6 - proc_control_node_B.b_j_kh; c_k++) {
      proc_control_node_B.ix_hs++;
      proc_control_node_B.y_br = fabs
        (proc_control_node_B.b_A_pi[proc_control_node_B.ix_hs]);
      if (proc_control_node_B.y_br > proc_control_node_B.smax_p) {
        iy = c_k - 1;
        proc_control_node_B.smax_p = proc_control_node_B.y_br;
      }
    }

    if (proc_control_node_B.b_A_pi[proc_control_node_B.ip_c + iy] != 0.0) {
      if (iy != 0) {
        iy += proc_control_node_B.b_j_kh;
        proc_control_node_B.ipiv_hg[proc_control_node_B.b_j_kh] =
          static_cast<int8_T>(iy + 1);
        for (c_k = 0; c_k < 6; c_k++) {
          proc_control_node_B.smax_p = proc_control_node_B.b_A_pi[c_k * 6 +
            proc_control_node_B.b_j_kh];
          proc_control_node_B.ix_hs = c_k * 6 + iy;
          proc_control_node_B.b_A_pi[proc_control_node_B.b_j_kh + c_k * 6] =
            proc_control_node_B.b_A_pi[proc_control_node_B.ix_hs];
          proc_control_node_B.b_A_pi[proc_control_node_B.ix_hs] =
            proc_control_node_B.smax_p;
        }
      }

      iy = (proc_control_node_B.ip_c - proc_control_node_B.b_j_kh) + 6;
      proc_control_node_B.ix_hs = proc_control_node_B.ip_c + 1;
      while (proc_control_node_B.ix_hs + 1 <= iy) {
        proc_control_node_B.b_A_pi[proc_control_node_B.ix_hs] /=
          proc_control_node_B.b_A_pi[proc_control_node_B.ip_c];
        proc_control_node_B.ix_hs++;
      }
    }

    iy = proc_control_node_B.ip_c;
    proc_control_node_B.ix_hs = proc_control_node_B.ip_c + 6;
    for (c_k = 0; c_k <= 4 - proc_control_node_B.b_j_kh; c_k++) {
      if (proc_control_node_B.b_A_pi[proc_control_node_B.ix_hs] != 0.0) {
        proc_control_node_B.smax_p =
          -proc_control_node_B.b_A_pi[proc_control_node_B.ix_hs];
        c_ix = proc_control_node_B.ip_c + 1;
        d = (iy - proc_control_node_B.b_j_kh) + 12;
        for (ijA = iy + 7; ijA < d; ijA++) {
          proc_control_node_B.b_A_pi[ijA] += proc_control_node_B.b_A_pi[c_ix] *
            proc_control_node_B.smax_p;
          c_ix++;
        }
      }

      proc_control_node_B.ix_hs += 6;
      iy += 6;
    }
  }

  memcpy(&Y[0], &B[0], 36U * sizeof(real_T));
  for (proc_control_node_B.b_j_kh = 0; proc_control_node_B.b_j_kh < 5;
       proc_control_node_B.b_j_kh++) {
    ipiv = proc_control_node_B.ipiv_hg[proc_control_node_B.b_j_kh];
    if (proc_control_node_B.b_j_kh + 1 != ipiv) {
      for (iy = 0; iy < 6; iy++) {
        proc_control_node_B.ip_c = 6 * iy + proc_control_node_B.b_j_kh;
        proc_control_node_B.smax_p = Y[proc_control_node_B.ip_c];
        c_ix = (ipiv + 6 * iy) - 1;
        Y[proc_control_node_B.ip_c] = Y[c_ix];
        Y[c_ix] = proc_control_node_B.smax_p;
      }
    }
  }

  for (proc_control_node_B.b_j_kh = 0; proc_control_node_B.b_j_kh < 6;
       proc_control_node_B.b_j_kh++) {
    proc_control_node_B.ip_c = 6 * proc_control_node_B.b_j_kh;
    for (iy = 0; iy < 6; iy++) {
      proc_control_node_B.ix_hs = 6 * iy;
      c_ix = iy + proc_control_node_B.ip_c;
      if (Y[c_ix] != 0.0) {
        for (c_k = iy + 2; c_k < 7; c_k++) {
          d = (c_k + proc_control_node_B.ip_c) - 1;
          Y[d] -= proc_control_node_B.b_A_pi[(c_k + proc_control_node_B.ix_hs) -
            1] * Y[c_ix];
        }
      }
    }
  }

  for (proc_control_node_B.b_j_kh = 0; proc_control_node_B.b_j_kh < 6;
       proc_control_node_B.b_j_kh++) {
    proc_control_node_B.ip_c = 6 * proc_control_node_B.b_j_kh;
    for (iy = 5; iy >= 0; iy--) {
      proc_control_node_B.ix_hs = 6 * iy;
      c_ix = iy + proc_control_node_B.ip_c;
      proc_control_node_B.smax_p = Y[c_ix];
      if (proc_control_node_B.smax_p != 0.0) {
        Y[c_ix] = proc_control_node_B.smax_p / proc_control_node_B.b_A_pi[iy +
          proc_control_node_B.ix_hs];
        for (c_k = 0; c_k < iy; c_k++) {
          d = c_k + proc_control_node_B.ip_c;
          Y[d] -= Y[iy + proc_control_node_B.ip_c] *
            proc_control_node_B.b_A_pi[c_k + proc_control_node_B.ix_hs];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_no_mpc_plantupdate(const real_T
  a[144], real_T b[96], const real_T c[144], real_T b_A[400], real_T b_B[580],
  real_T b_C[240], const real_T b_D[348], const real_T b_mvindex[8], const
  real_T b_myindex[12], const real_T b_Uscale[8], const real_T b_Yscale[12],
  real_T Bu[160], real_T Bv[20], real_T Cm[240], real_T Dv[12], real_T Dvm[12],
  real_T QQ[400], real_T RR[144], real_T NN[240])
{
  int32_T b_tmp;
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  int32_T tmp;
  i_1 = 0;
  for (i_0 = 0; i_0 < 8; i_0++) {
    for (i = 0; i < 12; i++) {
      b_tmp = i + i_1;
      b[b_tmp] *= b_Uscale[i_0];
    }

    i_1 += 12;
  }

  i_1 = 0;
  i_0 = 0;
  for (i = 0; i < 12; i++) {
    for (b_tmp = 0; b_tmp < 12; b_tmp++) {
      tmp = b_tmp + i_1;
      b_C[tmp] = c[tmp] / b_Yscale[b_tmp];
      b_A[b_tmp + i_0] = a[tmp];
    }

    i_1 += 12;
    i_0 += 20;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    for (i_0 = 0; i_0 < 12; i_0++) {
      b_B[i_0 + 20 * i_1] = b[(static_cast<int32_T>(b_mvindex[i_1]) - 1) * 12 +
        i_0];
    }

    memcpy(&Bu[i_1 * 20], &b_B[i_1 * 20], 20U * sizeof(real_T));
  }

  for (i_1 = 0; i_1 < 20; i_1++) {
    Bv[i_1] = b_B[i_1 + 160];
    for (i_0 = 0; i_0 < 12; i_0++) {
      Cm[i_0 + 12 * i_1] = b_C[(12 * i_1 + static_cast<int32_T>(b_myindex[i_0]))
        - 1];
    }
  }

  for (i_1 = 0; i_1 < 12; i_1++) {
    Dv[i_1] = b_D[i_1 + 96];
    Dvm[i_1] = b_D[static_cast<int32_T>(b_myindex[i_1]) + 95];
  }

  for (i_1 = 0; i_1 < 28; i_1++) {
    proc_control_node_B.UnknownIn_i[i_1] = 0;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    proc_control_node_B.UnknownIn_i[i_1] = static_cast<int8_T>(i_1 + 1);
  }

  for (i_1 = 0; i_1 < 20; i_1++) {
    proc_control_node_B.UnknownIn_i[i_1 + 8] = static_cast<int8_T>(i_1 + 10);
  }

  for (i_1 = 0; i_1 < 28; i_1++) {
    for (i_0 = 0; i_0 < 20; i_0++) {
      proc_control_node_B.b_B_a[i_0 + (i_1 << 5)] = b_B
        [(proc_control_node_B.UnknownIn_i[i_1] - 1) * 20 + i_0];
    }
  }

  for (i_1 = 0; i_1 < 28; i_1++) {
    for (i_0 = 0; i_0 < 12; i_0++) {
      proc_control_node_B.b_B_a[(i_0 + (i_1 << 5)) + 20] = b_D
        [((proc_control_node_B.UnknownIn_i[i_1] - 1) * 12 + static_cast<int32_T>
          (b_myindex[i_0])) - 1];
    }
  }

  for (i_1 = 0; i_1 < 20; i_1++) {
    for (i_0 = 0; i_0 < 28; i_0++) {
      proc_control_node_B.b_B_j[i_0 + 28 * i_1] = b_B
        [(proc_control_node_B.UnknownIn_i[i_0] - 1) * 20 + i_1];
    }
  }

  for (i_1 = 0; i_1 < 12; i_1++) {
    for (i_0 = 0; i_0 < 28; i_0++) {
      proc_control_node_B.b_B_j[i_0 + 28 * (i_1 + 20)] = b_D
        [((proc_control_node_B.UnknownIn_i[i_0] - 1) * 12 + static_cast<int32_T>
          (b_myindex[i_1])) - 1];
    }
  }

  for (i_1 = 0; i_1 < 32; i_1++) {
    memset(&proc_control_node_B.CovMat_e[i_1 << 5], 0, sizeof(real_T) << 5U);
    for (i = 0; i < 28; i++) {
      for (i_0 = 0; i_0 < 32; i_0++) {
        b_tmp = (i_1 << 5) + i_0;
        proc_control_node_B.CovMat_e[b_tmp] += proc_control_node_B.b_B_a[(i << 5)
          + i_0] * proc_control_node_B.b_B_j[28 * i_1 + i];
      }
    }
  }

  i_1 = 0;
  i_0 = 0;
  for (i = 0; i < 20; i++) {
    memcpy(&QQ[i_1], &proc_control_node_B.CovMat_e[i_0], 20U * sizeof(real_T));
    i_1 += 20;
    i_0 += 32;
  }

  for (i_1 = 0; i_1 < 12; i_1++) {
    memcpy(&RR[i_1 * 12], &proc_control_node_B.CovMat_e[(i_1 << 5) + 660], 12U *
           sizeof(real_T));
    memcpy(&NN[i_1 * 20], &proc_control_node_B.CovMat_e[(i_1 << 5) + 640], 20U *
           sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_mod_n(real_T x)
{
  real_T r;
  if (rtIsNaN(x)) {
    r = (rtNaN);
  } else if (rtIsInf(x)) {
    r = (rtNaN);
  } else if (x == 0.0) {
    r = 0.0;
  } else {
    r = fmod(x, proc_control_node_nu);
    if (r == 0.0) {
      r = 0.0;
    } else if (x < 0.0) {
      r += proc_control_node_nu;
    }
  }

  return r;
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_mod(real_T x)
{
  real_T r;
  if (rtIsNaN(x)) {
    r = (rtNaN);
  } else if (rtIsInf(x)) {
    r = (rtNaN);
  } else if (x == 0.0) {
    r = 0.0;
  } else {
    r = fmod(x, proc_control_node_ny);
    if (r == 0.0) {
      r = 0.0;
    } else if (x < 0.0) {
      r += proc_control_node_ny;
    }
  }

  return r;
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_cont_mpc_updateFromNominal(real_T b_Mlim
  [32], const real_T b_Mrows[32], const real_T U0[8], const real_T b_Uscale[8],
  const real_T old_mvoff[8], const real_T b_mvindex[8], real_T b_utarget[80],
  const real_T Y0[12], const real_T b_Yscale[12], const real_T old_yoff[12],
  const real_T b_myindex[12], const real_T X0[12], real_T b_xoff[20], const
  real_T DX0[12], real_T Bv[220], real_T new_mvoff[8], real_T new_yoff[12],
  real_T new_myoff[12])
{
  real_T U;
  int32_T b_ct;
  int32_T b_utarget_tmp;
  int32_T i;
  for (i = 0; i < 8; i++) {
    proc_control_node_B.U_a[i] = U0[i] / b_Uscale[i];
  }

  for (i = 0; i < 12; i++) {
    new_yoff[i] = Y0[i] / b_Yscale[i];
  }

  for (i = 0; i < 8; i++) {
    proc_control_node_B.k_m = b_mvindex[i];
    new_mvoff[i] = U0[static_cast<int32_T>(proc_control_node_B.k_m) - 1] /
      b_Uscale[static_cast<int32_T>(proc_control_node_B.k_m) - 1];
  }

  for (i = 0; i < 12; i++) {
    new_myoff[i] = new_yoff[static_cast<int32_T>(b_myindex[i]) - 1];
  }

  for (b_ct = 0; b_ct < 32; b_ct++) {
    proc_control_node_B.k_m = b_Mrows[b_ct];
    if (proc_control_node_B.k_m <= 120.0) {
      proc_control_node_B.k_m = proc_control_node_mod(proc_control_node_B.k_m -
        1.0) + 1.0;
      b_Mlim[b_ct] += old_yoff[static_cast<int32_T>(proc_control_node_B.k_m) - 1]
        - new_yoff[static_cast<int32_T>(proc_control_node_B.k_m) - 1];
    } else if (proc_control_node_B.k_m <= 240.0) {
      proc_control_node_B.k_m = proc_control_node_mod((proc_control_node_B.k_m -
        120.0) - 1.0) + 1.0;
      b_Mlim[b_ct] -= old_yoff[static_cast<int32_T>(proc_control_node_B.k_m) - 1]
        - new_yoff[static_cast<int32_T>(proc_control_node_B.k_m) - 1];
    } else if (proc_control_node_B.k_m <= 320.0) {
      proc_control_node_B.k_m = proc_control_node_mod_n((proc_control_node_B.k_m
        - 240.0) - 1.0) + 1.0;
      b_Mlim[b_ct] += old_mvoff[static_cast<int32_T>(proc_control_node_B.k_m) -
        1] - proc_control_node_B.U_a[static_cast<int32_T>(b_mvindex
        [static_cast<int32_T>(proc_control_node_B.k_m) - 1]) - 1];
    } else if (proc_control_node_B.k_m <= 400.0) {
      proc_control_node_B.k_m = proc_control_node_mod_n
        (((proc_control_node_B.k_m - 240.0) - 80.0) - 1.0) + 1.0;
      b_Mlim[b_ct] -= old_mvoff[static_cast<int32_T>(proc_control_node_B.k_m) -
        1] - proc_control_node_B.U_a[static_cast<int32_T>(b_mvindex
        [static_cast<int32_T>(proc_control_node_B.k_m) - 1]) - 1];
    }
  }

  for (b_ct = 0; b_ct < 8; b_ct++) {
    proc_control_node_B.k_m = old_mvoff[b_ct];
    U = proc_control_node_B.U_a[static_cast<int32_T>(b_mvindex[b_ct]) - 1];
    for (i = 0; i < 10; i++) {
      b_utarget_tmp = (i << 3) + b_ct;
      b_utarget[b_utarget_tmp] = (b_utarget[b_utarget_tmp] +
        proc_control_node_B.k_m) - U;
    }
  }

  memcpy(&b_xoff[0], &X0[0], 12U * sizeof(real_T));
  memcpy(&Bv[0], &DX0[0], 12U * sizeof(real_T));
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_mpc_constraintcoef(const real_T
  b_A[400], const real_T Bu[160], const real_T Bv[20], const real_T b_C[240],
  const real_T Dv[12], const real_T b_Jm[1280], real_T b_SuJm[1920], real_T
  b_Sx[2400], real_T b_Su1[960], real_T b_Hv[1320])
{
  int32_T CA_tmp;
  int32_T i_0;
  int32_T i_1;
  int32_T i_2;
  int32_T tmp;
  int8_T i;
  for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 20;
       proc_control_node_B.i40++) {
    memset(&proc_control_node_B.CA_d[proc_control_node_B.i40 * 12], 0, 12U *
           sizeof(real_T));
    for (i_0 = 0; i_0 < 20; i_0++) {
      for (proc_control_node_B.i39 = 0; proc_control_node_B.i39 < 12;
           proc_control_node_B.i39++) {
        CA_tmp = 12 * proc_control_node_B.i40 + proc_control_node_B.i39;
        proc_control_node_B.CA_d[CA_tmp] += b_C[12 * i_0 +
          proc_control_node_B.i39] * b_A[20 * proc_control_node_B.i40 + i_0];
      }
    }
  }

  for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 8;
       proc_control_node_B.i40++) {
    memset(&proc_control_node_B.Sum_l[proc_control_node_B.i40 * 12], 0, 12U *
           sizeof(real_T));
    for (i_0 = 0; i_0 < 20; i_0++) {
      for (proc_control_node_B.i39 = 0; proc_control_node_B.i39 < 12;
           proc_control_node_B.i39++) {
        CA_tmp = 12 * proc_control_node_B.i40 + proc_control_node_B.i39;
        proc_control_node_B.Sum_l[CA_tmp] += b_C[12 * i_0 +
          proc_control_node_B.i39] * Bu[20 * proc_control_node_B.i40 + i_0];
      }
    }
  }

  memset(&proc_control_node_B.b_C_n[0], 0, 12U * sizeof(real_T));
  proc_control_node_B.i39 = 0;
  for (i_0 = 0; i_0 < 20; i_0++) {
    for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 12;
         proc_control_node_B.i40++) {
      proc_control_node_B.b_C_n[proc_control_node_B.i40] +=
        b_C[proc_control_node_B.i40 + proc_control_node_B.i39] * Bv[i_0];
    }

    proc_control_node_B.i39 += 12;
  }

  for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 12;
       proc_control_node_B.i40++) {
    b_Hv[proc_control_node_B.i40] =
      proc_control_node_B.b_C_n[proc_control_node_B.i40];
    b_Hv[proc_control_node_B.i40 + 120] = Dv[proc_control_node_B.i40];
  }

  proc_control_node_B.i40 = 0;
  for (proc_control_node_B.i39 = 0; proc_control_node_B.i39 < 9;
       proc_control_node_B.i39++) {
    memset(&b_Hv[proc_control_node_B.i40 + 240], 0, 12U * sizeof(real_T));
    proc_control_node_B.i40 += 120;
  }

  proc_control_node_B.i40 = 0;
  for (proc_control_node_B.i39 = 0; proc_control_node_B.i39 < 11;
       proc_control_node_B.i39++) {
    memset(&b_Hv[proc_control_node_B.i40 + 12], 0, 108U * sizeof(real_T));
    proc_control_node_B.i40 += 120;
  }

  for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 20;
       proc_control_node_B.i40++) {
    memcpy(&b_Sx[proc_control_node_B.i40 * 120],
           &proc_control_node_B.CA_d[proc_control_node_B.i40 * 12], 12U * sizeof
           (real_T));
    memset(&b_Sx[proc_control_node_B.i40 * 120 + 12], 0, 108U * sizeof(real_T));
  }

  for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 8;
       proc_control_node_B.i40++) {
    memcpy(&b_Su1[proc_control_node_B.i40 * 120],
           &proc_control_node_B.Sum_l[proc_control_node_B.i40 * 12], 12U *
           sizeof(real_T));
    memset(&b_Su1[proc_control_node_B.i40 * 120 + 12], 0, 108U * sizeof(real_T));
    memcpy(&proc_control_node_B.Su_c[proc_control_node_B.i40 * 120],
           &proc_control_node_B.Sum_l[proc_control_node_B.i40 * 12], 12U *
           sizeof(real_T));
  }

  proc_control_node_B.i40 = 0;
  for (proc_control_node_B.i39 = 0; proc_control_node_B.i39 < 72;
       proc_control_node_B.i39++) {
    memset(&proc_control_node_B.Su_c[proc_control_node_B.i40 + 960], 0, 12U *
           sizeof(real_T));
    proc_control_node_B.i40 += 120;
  }

  proc_control_node_B.i40 = 0;
  for (proc_control_node_B.i39 = 0; proc_control_node_B.i39 < 80;
       proc_control_node_B.i39++) {
    memset(&proc_control_node_B.Su_c[proc_control_node_B.i40 + 12], 0, 108U *
           sizeof(real_T));
    proc_control_node_B.i40 += 120;
  }

  for (proc_control_node_B.i_et = 0; proc_control_node_B.i_et < 9;
       proc_control_node_B.i_et++) {
    i = static_cast<int8_T>((proc_control_node_B.i_et + 1) * 12 + 1);
    for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 12;
         proc_control_node_B.i40++) {
      proc_control_node_B.rows_p[proc_control_node_B.i40] = static_cast<int8_T>
        (proc_control_node_B.i40 + i);
      proc_control_node_B.i39 = 0;
      i_0 = 0;
      for (i_1 = 0; i_1 < 8; i_1++) {
        proc_control_node_B.Sum_m = 0.0;
        tmp = 0;
        for (i_2 = 0; i_2 < 20; i_2++) {
          proc_control_node_B.Sum_m += proc_control_node_B.CA_d[tmp +
            proc_control_node_B.i40] * Bu[i_2 + i_0];
          tmp += 12;
        }

        CA_tmp = proc_control_node_B.i39 + proc_control_node_B.i40;
        proc_control_node_B.Sum_l[CA_tmp] += proc_control_node_B.Sum_m;
        proc_control_node_B.i39 += 12;
        i_0 += 20;
      }
    }

    for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 8;
         proc_control_node_B.i40++) {
      for (proc_control_node_B.i39 = 0; proc_control_node_B.i39 < 12;
           proc_control_node_B.i39++) {
        CA_tmp = 12 * proc_control_node_B.i40 + proc_control_node_B.i39;
        proc_control_node_B.Sum_m = proc_control_node_B.Sum_l[CA_tmp];
        b_Su1[(proc_control_node_B.rows_p[proc_control_node_B.i39] + 120 *
               proc_control_node_B.i40) - 1] = proc_control_node_B.Sum_m;
        proc_control_node_B.Sum_f[CA_tmp] = proc_control_node_B.Sum_m;
      }
    }

    for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 72;
         proc_control_node_B.i40++) {
      for (proc_control_node_B.i39 = 0; proc_control_node_B.i39 < 12;
           proc_control_node_B.i39++) {
        proc_control_node_B.Sum_f[proc_control_node_B.i39 + 12 *
          (proc_control_node_B.i40 + 8)] = proc_control_node_B.Su_c[(120 *
          proc_control_node_B.i40 +
          proc_control_node_B.rows_p[proc_control_node_B.i39]) - 13];
      }
    }

    for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 80;
         proc_control_node_B.i40++) {
      for (proc_control_node_B.i39 = 0; proc_control_node_B.i39 < 12;
           proc_control_node_B.i39++) {
        proc_control_node_B.Su_c
          [(proc_control_node_B.rows_p[proc_control_node_B.i39] + 120 *
            proc_control_node_B.i40) - 1] = proc_control_node_B.Sum_f[12 *
          proc_control_node_B.i40 + proc_control_node_B.i39];
      }
    }

    for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 12;
         proc_control_node_B.i40++) {
      proc_control_node_B.b_C_n[proc_control_node_B.i40] = 0.0;
      proc_control_node_B.i39 = 0;
      for (i_0 = 0; i_0 < 20; i_0++) {
        proc_control_node_B.b_C_n[proc_control_node_B.i40] +=
          proc_control_node_B.CA_d[proc_control_node_B.i39 +
          proc_control_node_B.i40] * Bv[i_0];
        proc_control_node_B.i39 += 12;
      }

      proc_control_node_B.CA_kt[proc_control_node_B.i40] =
        proc_control_node_B.b_C_n[proc_control_node_B.i40];
    }

    for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 10;
         proc_control_node_B.i40++) {
      for (proc_control_node_B.i39 = 0; proc_control_node_B.i39 < 12;
           proc_control_node_B.i39++) {
        proc_control_node_B.CA_kt[proc_control_node_B.i39 + 12 *
          (proc_control_node_B.i40 + 1)] = b_Hv[(120 * proc_control_node_B.i40 +
          proc_control_node_B.rows_p[proc_control_node_B.i39]) - 13];
      }
    }

    for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 11;
         proc_control_node_B.i40++) {
      for (proc_control_node_B.i39 = 0; proc_control_node_B.i39 < 12;
           proc_control_node_B.i39++) {
        b_Hv[(proc_control_node_B.rows_p[proc_control_node_B.i39] + 120 *
              proc_control_node_B.i40) - 1] = proc_control_node_B.CA_kt[12 *
          proc_control_node_B.i40 + proc_control_node_B.i39];
      }
    }

    for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 12;
         proc_control_node_B.i40++) {
      proc_control_node_B.i39 = 0;
      i_0 = 0;
      for (i_1 = 0; i_1 < 20; i_1++) {
        CA_tmp = proc_control_node_B.i39 + proc_control_node_B.i40;
        proc_control_node_B.CA_a[CA_tmp] = 0.0;
        tmp = 0;
        for (i_2 = 0; i_2 < 20; i_2++) {
          proc_control_node_B.CA_a[CA_tmp] += proc_control_node_B.CA_d[tmp +
            proc_control_node_B.i40] * b_A[i_2 + i_0];
          tmp += 12;
        }

        proc_control_node_B.i39 += 12;
        i_0 += 20;
      }
    }

    memcpy(&proc_control_node_B.CA_d[0], &proc_control_node_B.CA_a[0], 240U *
           sizeof(real_T));
    for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 20;
         proc_control_node_B.i40++) {
      for (proc_control_node_B.i39 = 0; proc_control_node_B.i39 < 12;
           proc_control_node_B.i39++) {
        b_Sx[(proc_control_node_B.rows_p[proc_control_node_B.i39] + 120 *
              proc_control_node_B.i40) - 1] = proc_control_node_B.CA_d[12 *
          proc_control_node_B.i40 + proc_control_node_B.i39];
      }
    }
  }

  for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 < 16;
       proc_control_node_B.i40++) {
    memset(&b_SuJm[proc_control_node_B.i40 * 120], 0, 120U * sizeof(real_T));
    for (i_0 = 0; i_0 < 80; i_0++) {
      for (proc_control_node_B.i39 = 0; proc_control_node_B.i39 < 120;
           proc_control_node_B.i39++) {
        proc_control_node_B.i_et = 120 * proc_control_node_B.i40 +
          proc_control_node_B.i39;
        b_SuJm[proc_control_node_B.i_et] += proc_control_node_B.Su_c[120 * i_0 +
          proc_control_node_B.i39] * b_Jm[80 * proc_control_node_B.i40 + i_0];
      }
    }
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_WtMult(const real_T W[8],
  const real_T M[1280], real_T nwt, real_T WM[1280])
{
  int32_T WM_tmp;
  int32_T i;
  int32_T i_0;
  int16_T ixw;
  ixw = 1;
  for (i = 0; i < 80; i++) {
    proc_control_node_B.W = W[ixw - 1];
    for (i_0 = 0; i_0 < 16; i_0++) {
      WM_tmp = 80 * i_0 + i;
      WM[WM_tmp] = M[WM_tmp] * proc_control_node_B.W;
    }

    i_0 = ixw + 1;
    if (ixw + 1 > 32767) {
      i_0 = 32767;
    }

    ixw = static_cast<int16_T>(i_0);
    if (static_cast<int16_T>(i_0) > 8) {
      proc_control_node_B.W = rt_roundd_snf(8.0 - nwt);
      if (proc_control_node_B.W < 32768.0) {
        if (proc_control_node_B.W >= -32768.0) {
          ixw = static_cast<int16_T>(proc_control_node_B.W);
        } else {
          ixw = MIN_int16_T;
        }
      } else {
        ixw = MAX_int16_T;
      }

      i_0 = ixw + 1;
      if (proc_control_node_B.W < 32768.0) {
        if (proc_control_node_B.W >= -32768.0) {
          ixw = static_cast<int16_T>(proc_control_node_B.W);
        } else {
          ixw = MIN_int16_T;
        }
      } else {
        ixw = MAX_int16_T;
      }

      if (ixw + 1 > 32767) {
        i_0 = 32767;
      }

      ixw = static_cast<int16_T>(i_0);
    }
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_contr_mpc_calculatehessian(const real_T
  b_Wy[12], const real_T b_Wu[8], const real_T b_Wdu[8], const real_T b_SuJm
  [1920], const real_T I2Jm[1280], const real_T b_Jm[1280], const real_T b_I1
  [640], const real_T b_Su1[960], const real_T b_Sx[2400], const real_T b_Hv
  [1320], real_T nmv, real_T b_ny, real_T b_H[256], real_T b_Ku1[128], real_T
  b_Kut[1280], real_T b_Kx[320], real_T b_Kv[176], real_T b_Kr[1920])
{
  int32_T b_Kr_tmp;
  int32_T b_SuJm_tmp;
  int16_T ixw;
  ixw = 1;
  for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 120;
       proc_control_node_B.i_o++) {
    proc_control_node_B.b_Wy = b_Wy[ixw - 1];
    for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 16;
         proc_control_node_B.i10++) {
      b_Kr_tmp = 120 * proc_control_node_B.i10 + proc_control_node_B.i_o;
      b_Kr[b_Kr_tmp] = b_SuJm[b_Kr_tmp] * proc_control_node_B.b_Wy;
    }

    proc_control_node_B.i10 = ixw + 1;
    if (ixw + 1 > 32767) {
      proc_control_node_B.i10 = 32767;
    }

    ixw = static_cast<int16_T>(proc_control_node_B.i10);
    if (static_cast<int16_T>(proc_control_node_B.i10) > 12) {
      proc_control_node_B.b_Wy = rt_roundd_snf(12.0 - b_ny);
      if (proc_control_node_B.b_Wy < 32768.0) {
        if (proc_control_node_B.b_Wy >= -32768.0) {
          ixw = static_cast<int16_T>(proc_control_node_B.b_Wy);
        } else {
          ixw = MIN_int16_T;
        }
      } else {
        ixw = MAX_int16_T;
      }

      proc_control_node_B.i10 = ixw + 1;
      if (proc_control_node_B.b_Wy < 32768.0) {
        if (proc_control_node_B.b_Wy >= -32768.0) {
          ixw = static_cast<int16_T>(proc_control_node_B.b_Wy);
        } else {
          ixw = MIN_int16_T;
        }
      } else {
        ixw = MAX_int16_T;
      }

      if (ixw + 1 > 32767) {
        proc_control_node_B.i10 = 32767;
      }

      ixw = static_cast<int16_T>(proc_control_node_B.i10);
    }
  }

  proc_control_node_WtMult(b_Wu, I2Jm, nmv, b_Kut);
  proc_control_node_WtMult(b_Wdu, b_Jm, nmv, proc_control_node_B.dv);
  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 16;
       proc_control_node_B.i10++) {
    for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 16;
         proc_control_node_B.i_o++) {
      b_SuJm_tmp = proc_control_node_B.i_o + (proc_control_node_B.i10 << 4);
      proc_control_node_B.b_SuJm_b[b_SuJm_tmp] = 0.0;
      for (b_Kr_tmp = 0; b_Kr_tmp < 120; b_Kr_tmp++) {
        proc_control_node_B.b_SuJm_b[b_SuJm_tmp] += b_SuJm[120 *
          proc_control_node_B.i_o + b_Kr_tmp] * b_Kr[120 *
          proc_control_node_B.i10 + b_Kr_tmp];
      }

      proc_control_node_B.b_Jm[b_SuJm_tmp] = 0.0;
      for (b_Kr_tmp = 0; b_Kr_tmp < 80; b_Kr_tmp++) {
        proc_control_node_B.b_Jm[b_SuJm_tmp] += b_Jm[80 *
          proc_control_node_B.i_o + b_Kr_tmp] * proc_control_node_B.dv[80 *
          proc_control_node_B.i10 + b_Kr_tmp];
      }
    }
  }

  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 16;
       proc_control_node_B.i10++) {
    for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 16;
         proc_control_node_B.i_o++) {
      proc_control_node_B.b_Wy = 0.0;
      for (b_Kr_tmp = 0; b_Kr_tmp < 80; b_Kr_tmp++) {
        proc_control_node_B.b_Wy += I2Jm[80 * proc_control_node_B.i10 + b_Kr_tmp]
          * b_Kut[80 * proc_control_node_B.i_o + b_Kr_tmp];
      }

      b_Kr_tmp = (proc_control_node_B.i_o << 4) + proc_control_node_B.i10;
      b_H[b_Kr_tmp] = (proc_control_node_B.b_SuJm_b[b_Kr_tmp] +
                       proc_control_node_B.b_Jm[b_Kr_tmp]) +
        proc_control_node_B.b_Wy;
    }

    for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 8;
         proc_control_node_B.i_o++) {
      b_SuJm_tmp = proc_control_node_B.i_o + (proc_control_node_B.i10 << 3);
      proc_control_node_B.b_Su1_jp[b_SuJm_tmp] = 0.0;
      for (b_Kr_tmp = 0; b_Kr_tmp < 120; b_Kr_tmp++) {
        proc_control_node_B.b_Su1_jp[b_SuJm_tmp] += b_Su1[120 *
          proc_control_node_B.i_o + b_Kr_tmp] * b_Kr[120 *
          proc_control_node_B.i10 + b_Kr_tmp];
      }

      proc_control_node_B.b_I1[b_SuJm_tmp] = 0.0;
      for (b_Kr_tmp = 0; b_Kr_tmp < 80; b_Kr_tmp++) {
        proc_control_node_B.b_I1[b_SuJm_tmp] += b_I1[80 *
          proc_control_node_B.i_o + b_Kr_tmp] * b_Kut[80 *
          proc_control_node_B.i10 + b_Kr_tmp];
      }
    }
  }

  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 128;
       proc_control_node_B.i10++) {
    b_Ku1[proc_control_node_B.i10] =
      proc_control_node_B.b_Su1_jp[proc_control_node_B.i10] +
      proc_control_node_B.b_I1[proc_control_node_B.i10];
  }

  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 1280;
       proc_control_node_B.i10++) {
    b_Kut[proc_control_node_B.i10] = -b_Kut[proc_control_node_B.i10];
  }

  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 16;
       proc_control_node_B.i10++) {
    for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 20;
         proc_control_node_B.i_o++) {
      b_SuJm_tmp = proc_control_node_B.i_o + 20 * proc_control_node_B.i10;
      b_Kx[b_SuJm_tmp] = 0.0;
      for (b_Kr_tmp = 0; b_Kr_tmp < 120; b_Kr_tmp++) {
        b_Kx[b_SuJm_tmp] += b_Sx[120 * proc_control_node_B.i_o + b_Kr_tmp] *
          b_Kr[120 * proc_control_node_B.i10 + b_Kr_tmp];
      }
    }

    for (proc_control_node_B.i_o = 0; proc_control_node_B.i_o < 11;
         proc_control_node_B.i_o++) {
      b_SuJm_tmp = proc_control_node_B.i_o + 11 * proc_control_node_B.i10;
      b_Kv[b_SuJm_tmp] = 0.0;
      for (b_Kr_tmp = 0; b_Kr_tmp < 120; b_Kr_tmp++) {
        b_Kv[b_SuJm_tmp] += b_Hv[120 * proc_control_node_B.i_o + b_Kr_tmp] *
          b_Kr[120 * proc_control_node_B.i10 + b_Kr_tmp];
      }
    }
  }

  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 1920;
       proc_control_node_B.i10++) {
    b_Kr[proc_control_node_B.i10] = -b_Kr[proc_control_node_B.i10];
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
int32_T proc_control_nodeModelClass::proc_control_node_xpotrf_g(real_T b_A[289])
{
  int32_T b_ix;
  int32_T b_iy;
  int32_T b_k;
  int32_T d;
  int32_T ia;
  int32_T info;
  int32_T iy;
  boolean_T exitg1;
  info = 0;
  proc_control_node_B.j_av = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.j_av < 17)) {
    proc_control_node_B.idxAjj = proc_control_node_B.j_av * 17 +
      proc_control_node_B.j_av;
    proc_control_node_B.ssq = 0.0;
    if (proc_control_node_B.j_av >= 1) {
      b_ix = proc_control_node_B.j_av;
      b_iy = proc_control_node_B.j_av;
      for (b_k = 0; b_k < proc_control_node_B.j_av; b_k++) {
        proc_control_node_B.ssq += b_A[b_ix] * b_A[b_iy];
        b_ix += 17;
        b_iy += 17;
      }
    }

    proc_control_node_B.ssq = b_A[proc_control_node_B.idxAjj] -
      proc_control_node_B.ssq;
    if (proc_control_node_B.ssq > 0.0) {
      proc_control_node_B.ssq = sqrt(proc_control_node_B.ssq);
      b_A[proc_control_node_B.idxAjj] = proc_control_node_B.ssq;
      if (proc_control_node_B.j_av + 1 < 17) {
        if (proc_control_node_B.j_av != 0) {
          b_ix = proc_control_node_B.j_av;
          b_iy = ((proc_control_node_B.j_av - 1) * 17 + proc_control_node_B.j_av)
            + 2;
          for (b_k = proc_control_node_B.j_av + 2; b_k <= b_iy; b_k += 17) {
            proc_control_node_B.c_k = -b_A[b_ix];
            iy = proc_control_node_B.idxAjj + 1;
            d = (b_k - proc_control_node_B.j_av) + 15;
            for (ia = b_k; ia <= d; ia++) {
              b_A[iy] += b_A[ia - 1] * proc_control_node_B.c_k;
              iy++;
            }

            b_ix += 17;
          }
        }

        proc_control_node_B.ssq = 1.0 / proc_control_node_B.ssq;
        b_ix = (proc_control_node_B.idxAjj - proc_control_node_B.j_av) + 17;
        proc_control_node_B.idxAjj++;
        while (proc_control_node_B.idxAjj + 1 <= b_ix) {
          b_A[proc_control_node_B.idxAjj] *= proc_control_node_B.ssq;
          proc_control_node_B.idxAjj++;
        }
      }

      proc_control_node_B.j_av++;
    } else {
      b_A[proc_control_node_B.idxAjj] = proc_control_node_B.ssq;
      info = proc_control_node_B.j_av + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_minimum(const real_T x[17])
{
  real_T ex;
  int32_T idx;
  int32_T k;
  boolean_T exitg1;
  if (!rtIsNaN(x[0])) {
    idx = 1;
  } else {
    idx = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 18)) {
      if (!rtIsNaN(x[k - 1])) {
        idx = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (idx == 0) {
    ex = x[0];
  } else {
    ex = x[idx - 1];
    while (idx + 1 <= 17) {
      if (ex > x[idx]) {
        ex = x[idx];
      }

      idx++;
    }
  }

  return ex;
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_n_mpc_checkhessian(real_T b_H[289],
  real_T L[289], real_T *BadH)
{
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T guard1 = false;
  boolean_T guard2 = false;
  *BadH = 0.0;
  memcpy(&L[0], &b_H[0], 289U * sizeof(real_T));
  proc_control_node_B.Tries = proc_control_node_xpotrf_g(L);
  guard1 = false;
  if (proc_control_node_B.Tries == 0) {
    proc_control_node_B.Tries_e = 0;
    for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 17;
         proc_control_node_B.Tries++) {
      proc_control_node_B.varargin_1[proc_control_node_B.Tries] =
        L[proc_control_node_B.Tries_e];
      proc_control_node_B.Tries_e += 18;
    }

    if (proc_control_node_minimum(proc_control_node_B.varargin_1) >
        1.4901161193847656E-7) {
    } else {
      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    proc_control_node_B.normH = 0.0;
    proc_control_node_B.Tries = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.Tries < 17)) {
      proc_control_node_B.s_k = 0.0;
      for (proc_control_node_B.Tries_e = 0; proc_control_node_B.Tries_e < 17;
           proc_control_node_B.Tries_e++) {
        proc_control_node_B.s_k += fabs(b_H[17 * proc_control_node_B.Tries_e +
          proc_control_node_B.Tries]);
      }

      if (rtIsNaN(proc_control_node_B.s_k)) {
        proc_control_node_B.normH = (rtNaN);
        exitg2 = true;
      } else {
        if (proc_control_node_B.s_k > proc_control_node_B.normH) {
          proc_control_node_B.normH = proc_control_node_B.s_k;
        }

        proc_control_node_B.Tries++;
      }
    }

    if (proc_control_node_B.normH >= 1.0E+10) {
      *BadH = 2.0;
    } else {
      proc_control_node_B.Tries = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.Tries <= 4)) {
        proc_control_node_B.normH = rt_powd_snf(10.0, static_cast<real_T>
          (proc_control_node_B.Tries)) * 1.4901161193847656E-7;
        memset(&proc_control_node_B.b_d[0], 0, 289U * sizeof(int8_T));
        proc_control_node_B.j_ej = 0;
        for (proc_control_node_B.Tries_e = 0; proc_control_node_B.Tries_e < 17;
             proc_control_node_B.Tries_e++) {
          proc_control_node_B.b_d[proc_control_node_B.j_ej] = 1;
          proc_control_node_B.j_ej += 18;
        }

        for (proc_control_node_B.Tries_e = 0; proc_control_node_B.Tries_e < 289;
             proc_control_node_B.Tries_e++) {
          b_H[proc_control_node_B.Tries_e] += proc_control_node_B.normH *
            static_cast<real_T>
            (proc_control_node_B.b_d[proc_control_node_B.Tries_e]);
          L[proc_control_node_B.Tries_e] = b_H[proc_control_node_B.Tries_e];
        }

        proc_control_node_B.Tries_e = proc_control_node_xpotrf_g(L);
        guard2 = false;
        if (proc_control_node_B.Tries_e == 0) {
          proc_control_node_B.j_ej = 0;
          for (proc_control_node_B.Tries_e = 0; proc_control_node_B.Tries_e < 17;
               proc_control_node_B.Tries_e++) {
            proc_control_node_B.varargin_1[proc_control_node_B.Tries_e] =
              L[proc_control_node_B.j_ej];
            proc_control_node_B.j_ej += 18;
          }

          if (proc_control_node_minimum(proc_control_node_B.varargin_1) >
              1.4901161193847656E-7) {
            *BadH = 1.0;
            exitg1 = true;
          } else {
            guard2 = true;
          }
        } else {
          guard2 = true;
        }

        if (guard2) {
          *BadH = 3.0;
          proc_control_node_B.Tries++;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_trisolve(const real_T b_A
  [289], real_T b_B[289])
{
  int32_T i;
  int32_T j;
  int32_T k;
  int32_T kAcol;
  int32_T tmp;
  int32_T tmp_0;
  for (j = 0; j < 17; j++) {
    proc_control_node_B.jBcol_g = 17 * j;
    for (k = 0; k < 17; k++) {
      kAcol = 17 * k;
      tmp = k + proc_control_node_B.jBcol_g;
      proc_control_node_B.d7 = b_B[tmp];
      if (proc_control_node_B.d7 != 0.0) {
        b_B[tmp] = proc_control_node_B.d7 / b_A[k + kAcol];
        for (i = k + 2; i < 18; i++) {
          tmp_0 = (i + proc_control_node_B.jBcol_g) - 1;
          b_B[tmp_0] -= b_A[(i + kAcol) - 1] * b_B[tmp];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_Unconstrained(const real_T
  b_Hinv[289], const real_T f[17], real_T x[17], int16_T n)
{
  int32_T i;
  proc_control_node_B.i_js = 1;
  while (proc_control_node_B.i_js - 1 <= n - 1) {
    proc_control_node_B.b_Hinv = 0.0;
    for (i = 0; i < 17; i++) {
      proc_control_node_B.b_Hinv += -b_Hinv[(17 * i + static_cast<int16_T>
        (proc_control_node_B.i_js)) - 1] * f[i];
    }

    x[static_cast<int16_T>(proc_control_node_B.i_js) - 1] =
      proc_control_node_B.b_Hinv;
    proc_control_node_B.i_js++;
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_norm(const real_T x[17])
{
  real_T y;
  int32_T k;
  y = 0.0;
  proc_control_node_B.scale_e = 3.3121686421112381E-170;
  for (k = 0; k < 17; k++) {
    proc_control_node_B.absxk_c = fabs(x[k]);
    if (proc_control_node_B.absxk_c > proc_control_node_B.scale_e) {
      proc_control_node_B.t_a = proc_control_node_B.scale_e /
        proc_control_node_B.absxk_c;
      y = y * proc_control_node_B.t_a * proc_control_node_B.t_a + 1.0;
      proc_control_node_B.scale_e = proc_control_node_B.absxk_c;
    } else {
      proc_control_node_B.t_a = proc_control_node_B.absxk_c /
        proc_control_node_B.scale_e;
      y += proc_control_node_B.t_a * proc_control_node_B.t_a;
    }
  }

  return proc_control_node_B.scale_e * sqrt(y);
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_abs(const real_T x[17],
  real_T y[17])
{
  int32_T k;
  for (k = 0; k < 17; k++) {
    y[k] = fabs(x[k]);
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_maximum(const real_T x[17])
{
  real_T ex;
  int32_T k;
  boolean_T exitg1;
  if (!rtIsNaN(x[0])) {
    proc_control_node_B.idx_b = 1;
  } else {
    proc_control_node_B.idx_b = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 18)) {
      if (!rtIsNaN(x[k - 1])) {
        proc_control_node_B.idx_b = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (proc_control_node_B.idx_b == 0) {
    ex = x[0];
  } else {
    ex = x[proc_control_node_B.idx_b - 1];
    while (proc_control_node_B.idx_b + 1 <= 17) {
      if (ex < x[proc_control_node_B.idx_b]) {
        ex = x[proc_control_node_B.idx_b];
      }

      proc_control_node_B.idx_b++;
    }
  }

  return ex;
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_abs_b(const real_T x[32],
  real_T y[32])
{
  int32_T k;
  for (k = 0; k < 32; k++) {
    y[k] = fabs(x[k]);
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_maximum2(const real_T x[32],
  real_T y, real_T ex[32])
{
  int32_T k;
  for (k = 0; k < 32; k++) {
    proc_control_node_B.u0_i = x[k];
    if ((proc_control_node_B.u0_i > y) || rtIsNaN(y)) {
      ex[k] = proc_control_node_B.u0_i;
    } else {
      ex[k] = y;
    }
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_p(int32_T n, const
  real_T x[289], int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_i = 3.3121686421112381E-170;
      proc_control_node_B.kend = (ix0 + n) - 1;
      proc_control_node_B.k_eh = ix0;
      while (proc_control_node_B.k_eh <= proc_control_node_B.kend) {
        proc_control_node_B.absxk_e = fabs(x[proc_control_node_B.k_eh - 1]);
        if (proc_control_node_B.absxk_e > proc_control_node_B.scale_i) {
          proc_control_node_B.t_l = proc_control_node_B.scale_i /
            proc_control_node_B.absxk_e;
          y = y * proc_control_node_B.t_l * proc_control_node_B.t_l + 1.0;
          proc_control_node_B.scale_i = proc_control_node_B.absxk_e;
        } else {
          proc_control_node_B.t_l = proc_control_node_B.absxk_e /
            proc_control_node_B.scale_i;
          y += proc_control_node_B.t_l * proc_control_node_B.t_l;
        }

        proc_control_node_B.k_eh++;
      }

      y = proc_control_node_B.scale_i * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_xgemv_b(int32_T b_m, int32_T
  n, const real_T b_A[289], int32_T ia0, const real_T x[289], int32_T ix0,
  real_T y[17])
{
  if ((b_m != 0) && (n != 0)) {
    proc_control_node_B.b_iy_h = 0;
    while (proc_control_node_B.b_iy_h <= n - 1) {
      y[proc_control_node_B.b_iy_h] = 0.0;
      proc_control_node_B.b_iy_h++;
    }

    proc_control_node_B.b_iy_h = 0;
    proc_control_node_B.b_jx = (n - 1) * 17 + ia0;
    proc_control_node_B.iac = ia0;
    while (proc_control_node_B.iac <= proc_control_node_B.b_jx) {
      proc_control_node_B.ix_e = ix0;
      proc_control_node_B.c_e = 0.0;
      proc_control_node_B.d_bq = (proc_control_node_B.iac + b_m) - 1;
      proc_control_node_B.ia_kq = proc_control_node_B.iac;
      while (proc_control_node_B.ia_kq <= proc_control_node_B.d_bq) {
        proc_control_node_B.c_e += b_A[proc_control_node_B.ia_kq - 1] *
          x[proc_control_node_B.ix_e - 1];
        proc_control_node_B.ix_e++;
        proc_control_node_B.ia_kq++;
      }

      y[proc_control_node_B.b_iy_h] += proc_control_node_B.c_e;
      proc_control_node_B.b_iy_h++;
      proc_control_node_B.iac += 17;
    }
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_xgerc_g(int32_T b_m, int32_T
  n, real_T alpha1, int32_T ix0, const real_T y[17], real_T b_A[289], int32_T
  ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_node_B.jA = ia0 - 1;
    proc_control_node_B.jy = 0;
    proc_control_node_B.j_f = 0;
    while (proc_control_node_B.j_f <= n - 1) {
      if (y[proc_control_node_B.jy] != 0.0) {
        proc_control_node_B.temp = y[proc_control_node_B.jy] * alpha1;
        proc_control_node_B.ix_o = ix0;
        proc_control_node_B.b_k1 = b_m + proc_control_node_B.jA;
        proc_control_node_B.ijA = proc_control_node_B.jA;
        while (proc_control_node_B.ijA + 1 <= proc_control_node_B.b_k1) {
          b_A[proc_control_node_B.ijA] += b_A[proc_control_node_B.ix_o - 1] *
            proc_control_node_B.temp;
          proc_control_node_B.ix_o++;
          proc_control_node_B.ijA++;
        }
      }

      proc_control_node_B.jy++;
      proc_control_node_B.jA += 17;
      proc_control_node_B.j_f++;
    }
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_xzlarf_o(int32_T b_m,
  int32_T n, int32_T iv0, real_T tau, real_T b_C[289], int32_T ic0, real_T work
  [17])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv = b_m;
    proc_control_node_B.lastc = iv0 + b_m;
    while ((proc_control_node_B.lastv > 0) && (b_C[proc_control_node_B.lastc - 2]
            == 0.0)) {
      proc_control_node_B.lastv--;
      proc_control_node_B.lastc--;
    }

    proc_control_node_B.lastc = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc > 0)) {
      proc_control_node_B.coltop = (proc_control_node_B.lastc - 1) * 17 + ic0;
      proc_control_node_B.ia = proc_control_node_B.coltop;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia <= (proc_control_node_B.coltop +
             proc_control_node_B.lastv) - 1) {
          if (b_C[proc_control_node_B.ia - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia++;
          }
        } else {
          proc_control_node_B.lastc--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv = 0;
    proc_control_node_B.lastc = 0;
  }

  if (proc_control_node_B.lastv > 0) {
    proc_control_node_xgemv_b(proc_control_node_B.lastv,
      proc_control_node_B.lastc, b_C, ic0, b_C, iv0, work);
    proc_control_node_xgerc_g(proc_control_node_B.lastv,
      proc_control_node_B.lastc, -tau, iv0, work, b_C, ic0);
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_qrf_h(real_T b_A[289],
  int32_T ia0, int32_T b_m, int32_T n, int32_T nfxd, real_T tau[17])
{
  memset(&proc_control_node_B.work_g[0], 0, 17U * sizeof(real_T));
  proc_control_node_B.i_hg = 0;
  while (proc_control_node_B.i_hg <= nfxd - 1) {
    proc_control_node_B.ii = ((proc_control_node_B.i_hg * 17 + ia0) +
      proc_control_node_B.i_hg) - 1;
    proc_control_node_B.mmi_tmp = b_m - proc_control_node_B.i_hg;
    if (proc_control_node_B.i_hg + 1 < b_m) {
      proc_control_node_B.b_atmp = b_A[proc_control_node_B.ii];
      tau[proc_control_node_B.i_hg] = 0.0;
      if (proc_control_node_B.mmi_tmp > 0) {
        proc_control_node_B.beta1 = proc_control_node_xnrm2_p
          (proc_control_node_B.mmi_tmp - 1, b_A, proc_control_node_B.ii + 2);
        if (proc_control_node_B.beta1 != 0.0) {
          proc_control_node_B.beta1 = proc_control_node_rt_hypotd_snf
            (b_A[proc_control_node_B.ii], proc_control_node_B.beta1);
          if (b_A[proc_control_node_B.ii] >= 0.0) {
            proc_control_node_B.beta1 = -proc_control_node_B.beta1;
          }

          if (fabs(proc_control_node_B.beta1) < 1.0020841800044864E-292) {
            proc_control_node_B.knt = -1;
            proc_control_node_B.mmip1 = proc_control_node_B.ii +
              proc_control_node_B.mmi_tmp;
            do {
              proc_control_node_B.knt++;
              proc_control_node_B.b_k = proc_control_node_B.ii + 1;
              while (proc_control_node_B.b_k + 1 <= proc_control_node_B.mmip1) {
                b_A[proc_control_node_B.b_k] *= 9.9792015476736E+291;
                proc_control_node_B.b_k++;
              }

              proc_control_node_B.beta1 *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1 = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp, proc_control_node_xnrm2_p
               (proc_control_node_B.mmi_tmp - 1, b_A, proc_control_node_B.ii + 2));
            if (proc_control_node_B.b_atmp >= 0.0) {
              proc_control_node_B.beta1 = -proc_control_node_B.beta1;
            }

            tau[proc_control_node_B.i_hg] = (proc_control_node_B.beta1 -
              proc_control_node_B.b_atmp) / proc_control_node_B.beta1;
            proc_control_node_B.b_atmp = 1.0 / (proc_control_node_B.b_atmp -
              proc_control_node_B.beta1);
            proc_control_node_B.b_k = proc_control_node_B.ii + 1;
            while (proc_control_node_B.b_k + 1 <= proc_control_node_B.mmip1) {
              b_A[proc_control_node_B.b_k] *= proc_control_node_B.b_atmp;
              proc_control_node_B.b_k++;
            }

            proc_control_node_B.mmip1 = 0;
            while (proc_control_node_B.mmip1 <= proc_control_node_B.knt) {
              proc_control_node_B.beta1 *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1++;
            }

            proc_control_node_B.b_atmp = proc_control_node_B.beta1;
          } else {
            tau[proc_control_node_B.i_hg] = (proc_control_node_B.beta1 -
              b_A[proc_control_node_B.ii]) / proc_control_node_B.beta1;
            proc_control_node_B.b_atmp = 1.0 / (b_A[proc_control_node_B.ii] -
              proc_control_node_B.beta1);
            proc_control_node_B.knt = proc_control_node_B.ii +
              proc_control_node_B.mmi_tmp;
            proc_control_node_B.mmip1 = proc_control_node_B.ii + 1;
            while (proc_control_node_B.mmip1 + 1 <= proc_control_node_B.knt) {
              b_A[proc_control_node_B.mmip1] *= proc_control_node_B.b_atmp;
              proc_control_node_B.mmip1++;
            }

            proc_control_node_B.b_atmp = proc_control_node_B.beta1;
          }
        }
      }

      b_A[proc_control_node_B.ii] = proc_control_node_B.b_atmp;
    } else {
      tau[proc_control_node_B.i_hg] = 0.0;
    }

    if (proc_control_node_B.i_hg + 1 < n) {
      proc_control_node_B.b_atmp = b_A[proc_control_node_B.ii];
      b_A[proc_control_node_B.ii] = 1.0;
      proc_control_node_xzlarf_o(proc_control_node_B.mmi_tmp, (n -
        proc_control_node_B.i_hg) - 1, proc_control_node_B.ii + 1,
        tau[proc_control_node_B.i_hg], b_A, proc_control_node_B.ii + 18,
        proc_control_node_B.work_g);
      b_A[proc_control_node_B.ii] = proc_control_node_B.b_atmp;
    }

    proc_control_node_B.i_hg++;
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_m(real_T b_A[289],
  real_T tau[17])
{
  memset(&tau[0], 0, 17U * sizeof(real_T));
  proc_control_node_qrf_h(b_A, 1, 17, 17, 17, tau);
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_xorgqr_f(int32_T b_m,
  int32_T n, int32_T k, real_T b_A[289], int32_T ia0, const real_T tau[17],
  int32_T itau0)
{
  if (n >= 1) {
    proc_control_node_B.itau = k;
    while (proc_control_node_B.itau <= n - 1) {
      proc_control_node_B.i_ak = (proc_control_node_B.itau * 17 + ia0) - 1;
      proc_control_node_B.iaii = 0;
      while (proc_control_node_B.iaii <= b_m - 1) {
        b_A[proc_control_node_B.i_ak + proc_control_node_B.iaii] = 0.0;
        proc_control_node_B.iaii++;
      }

      b_A[proc_control_node_B.i_ak + proc_control_node_B.itau] = 1.0;
      proc_control_node_B.itau++;
    }

    proc_control_node_B.itau = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_h[0], 0, 17U * sizeof(real_T));
    proc_control_node_B.i_ak = k;
    while (proc_control_node_B.i_ak >= 1) {
      proc_control_node_B.iaii = (((proc_control_node_B.i_ak - 1) * 17 + ia0) +
        proc_control_node_B.i_ak) - 1;
      if (proc_control_node_B.i_ak < n) {
        b_A[proc_control_node_B.iaii - 1] = 1.0;
        proc_control_node_xzlarf_o((b_m - proc_control_node_B.i_ak) + 1, n -
          proc_control_node_B.i_ak, proc_control_node_B.iaii,
          tau[proc_control_node_B.itau], b_A, proc_control_node_B.iaii + 17,
          proc_control_node_B.work_h);
      }

      if (proc_control_node_B.i_ak < b_m) {
        proc_control_node_B.b_g = (proc_control_node_B.iaii + b_m) -
          proc_control_node_B.i_ak;
        proc_control_node_B.b_k_o = proc_control_node_B.iaii;
        while (proc_control_node_B.b_k_o + 1 <= proc_control_node_B.b_g) {
          b_A[proc_control_node_B.b_k_o] *= -tau[proc_control_node_B.itau];
          proc_control_node_B.b_k_o++;
        }
      }

      b_A[proc_control_node_B.iaii - 1] = 1.0 - tau[proc_control_node_B.itau];
      proc_control_node_B.b_g = 0;
      while (proc_control_node_B.b_g <= proc_control_node_B.i_ak - 2) {
        b_A[(proc_control_node_B.iaii - proc_control_node_B.b_g) - 2] = 0.0;
        proc_control_node_B.b_g++;
      }

      proc_control_node_B.itau--;
      proc_control_node_B.i_ak--;
    }
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_qr(const real_T b_A[289],
  real_T Q[289], real_T R[289])
{
  memcpy(&proc_control_node_B.c_A[0], &b_A[0], 289U * sizeof(real_T));
  proc_control_node_xgeqrf_m(proc_control_node_B.c_A, proc_control_node_B.tau_lu);
  for (proc_control_node_B.j = 0; proc_control_node_B.j < 17;
       proc_control_node_B.j++) {
    proc_control_node_B.i_ne = 0;
    while (proc_control_node_B.i_ne <= proc_control_node_B.j) {
      R[proc_control_node_B.i_ne + 17 * proc_control_node_B.j] =
        proc_control_node_B.c_A[17 * proc_control_node_B.j +
        proc_control_node_B.i_ne];
      proc_control_node_B.i_ne++;
    }

    proc_control_node_B.i_ne = proc_control_node_B.j + 1;
    while (proc_control_node_B.i_ne + 1 < 18) {
      R[proc_control_node_B.i_ne + 17 * proc_control_node_B.j] = 0.0;
      proc_control_node_B.i_ne++;
    }
  }

  proc_control_node_xorgqr_f(17, 17, 17, proc_control_node_B.c_A, 1,
    proc_control_node_B.tau_lu, 1);
  proc_control_node_B.i_ne = 0;
  for (proc_control_node_B.j = 0; proc_control_node_B.j < 17;
       proc_control_node_B.j++) {
    memcpy(&Q[proc_control_node_B.i_ne],
           &proc_control_node_B.c_A[proc_control_node_B.i_ne], 17U * sizeof
           (real_T));
    proc_control_node_B.i_ne += 17;
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_KWIKfactor(const real_T
  b_Ac[544], const int16_T iC[32], int16_T nA, const real_T b_Linv[289], real_T
  b_D[289], real_T b_H[289], int16_T n, real_T RLinv[289], real_T *Status)
{
  int32_T exitg1;
  int16_T b_j;
  int16_T c_k;
  *Status = 1.0;
  memset(&RLinv[0], 0, 289U * sizeof(real_T));
  proc_control_node_B.i_h = 1;
  while (proc_control_node_B.i_h - 1 <= nA - 1) {
    proc_control_node_B.iC_e = iC[static_cast<int16_T>(proc_control_node_B.i_h)
      - 1];
    for (proc_control_node_B.RLinv_tmp_tmp = 0;
         proc_control_node_B.RLinv_tmp_tmp < 17;
         proc_control_node_B.RLinv_tmp_tmp++) {
      proc_control_node_B.f_i = proc_control_node_B.RLinv_tmp_tmp + 17 * (
        static_cast<int16_T>(proc_control_node_B.i_h) - 1);
      RLinv[proc_control_node_B.f_i] = 0.0;
      for (proc_control_node_B.RLinv_tmp = 0; proc_control_node_B.RLinv_tmp < 17;
           proc_control_node_B.RLinv_tmp++) {
        RLinv[proc_control_node_B.f_i] += b_Ac[((proc_control_node_B.RLinv_tmp <<
          5) + proc_control_node_B.iC_e) - 1] * b_Linv[17 *
          proc_control_node_B.RLinv_tmp + proc_control_node_B.RLinv_tmp_tmp];
      }
    }

    proc_control_node_B.i_h++;
  }

  proc_control_node_qr(RLinv, proc_control_node_B.QQ, proc_control_node_B.RR);
  proc_control_node_B.i_h = 1;
  do {
    exitg1 = 0;
    if (proc_control_node_B.i_h - 1 <= nA - 1) {
      if (fabs(proc_control_node_B.RR[((static_cast<int16_T>
             (proc_control_node_B.i_h) - 1) * 17 + static_cast<int16_T>
            (proc_control_node_B.i_h)) - 1]) < 1.0E-12) {
        *Status = -2.0;
        exitg1 = 1;
      } else {
        proc_control_node_B.i_h++;
      }
    } else {
      proc_control_node_B.i_h = 1;
      while (proc_control_node_B.i_h - 1 <= n - 1) {
        proc_control_node_B.f_i = 1;
        while (proc_control_node_B.f_i - 1 <= n - 1) {
          proc_control_node_B.b_Linv_o = 0.0;
          for (proc_control_node_B.RLinv_tmp_tmp = 0;
               proc_control_node_B.RLinv_tmp_tmp < 17;
               proc_control_node_B.RLinv_tmp_tmp++) {
            proc_control_node_B.b_Linv_o += b_Linv[(static_cast<int16_T>
              (proc_control_node_B.i_h) - 1) * 17 +
              proc_control_node_B.RLinv_tmp_tmp] * proc_control_node_B.QQ[(
              static_cast<int16_T>(proc_control_node_B.f_i) - 1) * 17 +
              proc_control_node_B.RLinv_tmp_tmp];
          }

          proc_control_node_B.TL[(static_cast<int16_T>(proc_control_node_B.i_h)
            + 17 * (static_cast<int16_T>(proc_control_node_B.f_i) - 1)) - 1] =
            proc_control_node_B.b_Linv_o;
          proc_control_node_B.f_i++;
        }

        proc_control_node_B.i_h++;
      }

      memset(&RLinv[0], 0, 289U * sizeof(real_T));
      for (b_j = nA; b_j > 0; b_j = static_cast<int16_T>(b_j - 1)) {
        proc_control_node_B.RLinv_tmp_tmp = 17 * (b_j - 1);
        proc_control_node_B.f_i = (b_j + proc_control_node_B.RLinv_tmp_tmp) - 1;
        RLinv[proc_control_node_B.f_i] = 1.0;
        for (c_k = b_j; c_k <= nA; c_k = static_cast<int16_T>(c_k + 1)) {
          proc_control_node_B.RLinv_tmp = ((c_k - 1) * 17 + b_j) - 1;
          RLinv[proc_control_node_B.RLinv_tmp] /=
            proc_control_node_B.RR[proc_control_node_B.f_i];
        }

        if (b_j > 1) {
          proc_control_node_B.i_h = 1;
          while (proc_control_node_B.i_h - 1 <= b_j - 2) {
            for (c_k = b_j; c_k <= nA; c_k = static_cast<int16_T>(c_k + 1)) {
              proc_control_node_B.f_i = (c_k - 1) * 17;
              proc_control_node_B.RLinv_tmp = (proc_control_node_B.f_i +
                static_cast<int16_T>(proc_control_node_B.i_h)) - 1;
              RLinv[proc_control_node_B.RLinv_tmp] -= proc_control_node_B.RR
                [(proc_control_node_B.RLinv_tmp_tmp + static_cast<int16_T>
                  (proc_control_node_B.i_h)) - 1] * RLinv
                [(proc_control_node_B.f_i + b_j) - 1];
            }

            proc_control_node_B.i_h++;
          }
        }
      }

      proc_control_node_B.i_h = 1;
      while (proc_control_node_B.i_h - 1 <= n - 1) {
        for (b_j = static_cast<int16_T>(proc_control_node_B.i_h); b_j <= n; b_j =
             static_cast<int16_T>(b_j + 1)) {
          proc_control_node_B.RLinv_tmp_tmp = (static_cast<int16_T>
            (proc_control_node_B.i_h) + 17 * (b_j - 1)) - 1;
          b_H[proc_control_node_B.RLinv_tmp_tmp] = 0.0;
          proc_control_node_B.RLinv_tmp = nA + 1;
          if (nA + 1 > 32767) {
            proc_control_node_B.RLinv_tmp = 32767;
          }

          for (c_k = static_cast<int16_T>(proc_control_node_B.RLinv_tmp); c_k <=
               n; c_k = static_cast<int16_T>(c_k + 1)) {
            proc_control_node_B.RLinv_tmp = (c_k - 1) * 17;
            b_H[proc_control_node_B.RLinv_tmp_tmp] -= proc_control_node_B.TL
              [(proc_control_node_B.RLinv_tmp + static_cast<int16_T>
                (proc_control_node_B.i_h)) - 1] * proc_control_node_B.TL
              [(proc_control_node_B.RLinv_tmp + b_j) - 1];
          }

          b_H[(b_j + 17 * (static_cast<int16_T>(proc_control_node_B.i_h) - 1)) -
            1] = b_H[proc_control_node_B.RLinv_tmp_tmp];
        }

        proc_control_node_B.i_h++;
      }

      proc_control_node_B.i_h = 1;
      while (proc_control_node_B.i_h - 1 <= nA - 1) {
        proc_control_node_B.f_i = 1;
        while (proc_control_node_B.f_i - 1 <= n - 1) {
          proc_control_node_B.RLinv_tmp_tmp = (static_cast<int16_T>
            (proc_control_node_B.f_i) + 17 * (static_cast<int16_T>
            (proc_control_node_B.i_h) - 1)) - 1;
          b_D[proc_control_node_B.RLinv_tmp_tmp] = 0.0;
          for (b_j = static_cast<int16_T>(proc_control_node_B.i_h); b_j <= nA;
               b_j = static_cast<int16_T>(b_j + 1)) {
            proc_control_node_B.RLinv_tmp = (b_j - 1) * 17;
            b_D[proc_control_node_B.RLinv_tmp_tmp] += proc_control_node_B.TL
              [(proc_control_node_B.RLinv_tmp + static_cast<int16_T>
                (proc_control_node_B.f_i)) - 1] * RLinv
              [(proc_control_node_B.RLinv_tmp + static_cast<int16_T>
                (proc_control_node_B.i_h)) - 1];
          }

          proc_control_node_B.f_i++;
        }

        proc_control_node_B.i_h++;
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_mtimes_a(const real_T b_A
  [17], const real_T b_B[17])
{
  real_T b_C;
  int32_T k;
  b_C = 0.0;
  for (k = 0; k < 17; k++) {
    b_C += b_A[k] * b_B[k];
  }

  return b_C;
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_nod_DropConstraint(int16_T kDrop,
  int16_T iA[32], int16_T *nA, int16_T iC[32])
{
  int32_T tmp;
  int16_T i;
  iA[iC[kDrop - 1] - 1] = 0;
  if (kDrop < *nA) {
    tmp = *nA - 1;
    if (*nA - 1 < -32768) {
      tmp = -32768;
    }

    for (i = kDrop; i <= static_cast<int16_T>(tmp); i = static_cast<int16_T>(i +
          1)) {
      iC[i - 1] = iC[i];
    }
  }

  iC[*nA - 1] = 0;
  tmp = *nA - 1;
  if (*nA - 1 < -32768) {
    tmp = -32768;
  }

  *nA = static_cast<int16_T>(tmp);
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_qpkwik(const real_T b_Linv
  [289], const real_T b_Hinv[289], const real_T f[17], const real_T b_Ac[544],
  const real_T b[32], int16_T iA[32], int16_T maxiter, real_T FeasTol, real_T x
  [17], real_T lambda[32], real_T *status)
{
  int32_T exitg1;
  int32_T exitg3;
  int16_T kDrop;
  int16_T kNext;
  int16_T nA;
  int16_T tmp;
  int16_T tmp_0;
  uint16_T b_x;
  uint16_T q;
  boolean_T ColdReset;
  boolean_T DualFeasible;
  boolean_T cTolComputed;
  boolean_T exitg2;
  boolean_T exitg4;
  boolean_T guard1 = false;
  boolean_T guard2 = false;
  *status = 1.0;
  memset(&lambda[0], 0, sizeof(real_T) << 5U);
  memset(&x[0], 0, 17U * sizeof(real_T));
  memset(&proc_control_node_B.r_o[0], 0, 17U * sizeof(real_T));
  proc_control_node_B.rMin = 0.0;
  cTolComputed = false;
  for (proc_control_node_B.i_c = 0; proc_control_node_B.i_c < 32;
       proc_control_node_B.i_c++) {
    proc_control_node_B.cTol[proc_control_node_B.i_c] = 1.0;
    proc_control_node_B.iC[proc_control_node_B.i_c] = 0;
  }

  nA = 0;
  for (proc_control_node_B.i_c = 0; proc_control_node_B.i_c < 32;
       proc_control_node_B.i_c++) {
    if (iA[proc_control_node_B.i_c] == 1) {
      proc_control_node_B.U_tmp = nA + 1;
      if (nA + 1 > 32767) {
        proc_control_node_B.U_tmp = 32767;
      }

      nA = static_cast<int16_T>(proc_control_node_B.U_tmp);
      proc_control_node_B.iC[static_cast<int16_T>(proc_control_node_B.U_tmp) - 1]
        = static_cast<int16_T>(proc_control_node_B.i_c + 1);
    }
  }

  guard1 = false;
  if (nA > 0) {
    memset(&proc_control_node_B.Opt[0], 0, 34U * sizeof(real_T));
    for (proc_control_node_B.i_c = 0; proc_control_node_B.i_c < 17;
         proc_control_node_B.i_c++) {
      proc_control_node_B.Rhs[proc_control_node_B.i_c] =
        f[proc_control_node_B.i_c];
      proc_control_node_B.Rhs[proc_control_node_B.i_c + 17] = 0.0;
    }

    DualFeasible = false;
    proc_control_node_B.U_tmp = 3 * nA;
    if (proc_control_node_B.U_tmp > 32767) {
      proc_control_node_B.U_tmp = 32767;
    }

    if (static_cast<int16_T>(proc_control_node_B.U_tmp) > 50) {
      kNext = static_cast<int16_T>(proc_control_node_B.U_tmp);
    } else {
      kNext = 50;
    }

    q = static_cast<uint16_T>(kNext / 10U);
    b_x = static_cast<uint16_T>(static_cast<uint32_T>(kNext) - q * 10);
    if ((b_x > 0) && (b_x >= 5)) {
      q = static_cast<uint16_T>(q + 1);
    }

    ColdReset = false;
    do {
      exitg3 = 0;
      if ((!DualFeasible) && (nA > 0) && (static_cast<int32_T>(*status) <=
           maxiter)) {
        proc_control_node_KWIKfactor(b_Ac, proc_control_node_B.iC, nA, b_Linv,
          proc_control_node_B.b_D, proc_control_node_B.b_H, 17,
          proc_control_node_B.RLinv, &proc_control_node_B.Xnorm0);
        if (proc_control_node_B.Xnorm0 < 0.0) {
          if (ColdReset) {
            *status = -2.0;
            exitg3 = 2;
          } else {
            nA = 0;
            memset(&iA[0], 0, sizeof(int16_T) << 5U);
            memset(&proc_control_node_B.iC[0], 0, sizeof(int16_T) << 5U);
            ColdReset = true;
          }
        } else {
          proc_control_node_B.i_c = 1;
          while (proc_control_node_B.i_c - 1 <= nA - 1) {
            proc_control_node_B.U_tmp = static_cast<int16_T>
              (proc_control_node_B.i_c) + 17;
            if (static_cast<int16_T>(proc_control_node_B.i_c) + 17 > 32767) {
              proc_control_node_B.U_tmp = 32767;
            }

            proc_control_node_B.Rhs[proc_control_node_B.U_tmp - 1] =
              b[proc_control_node_B.iC[static_cast<int16_T>
              (proc_control_node_B.i_c) - 1] - 1];
            for (kNext = static_cast<int16_T>(proc_control_node_B.i_c); kNext <=
                 nA; kNext = static_cast<int16_T>(kNext + 1)) {
              proc_control_node_B.U_tmp = (kNext + 17 * (static_cast<int16_T>
                (proc_control_node_B.i_c) - 1)) - 1;
              proc_control_node_B.U[proc_control_node_B.U_tmp] = 0.0;
              proc_control_node_B.lambda_tmp_tmp = 1;
              while (proc_control_node_B.lambda_tmp_tmp - 1 <= nA - 1) {
                proc_control_node_B.U_tmp_a = (static_cast<int16_T>
                  (proc_control_node_B.lambda_tmp_tmp) - 1) * 17;
                proc_control_node_B.U[proc_control_node_B.U_tmp] +=
                  proc_control_node_B.RLinv[(proc_control_node_B.U_tmp_a + kNext)
                  - 1] * proc_control_node_B.RLinv[(proc_control_node_B.U_tmp_a
                  + static_cast<int16_T>(proc_control_node_B.i_c)) - 1];
                proc_control_node_B.lambda_tmp_tmp++;
              }

              proc_control_node_B.U[(static_cast<int16_T>
                (proc_control_node_B.i_c) + 17 * (kNext - 1)) - 1] =
                proc_control_node_B.U[proc_control_node_B.U_tmp];
            }

            proc_control_node_B.i_c++;
          }

          for (proc_control_node_B.i_c = 0; proc_control_node_B.i_c < 17;
               proc_control_node_B.i_c++) {
            proc_control_node_B.Xnorm0 = 0.0;
            for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 17;
                 proc_control_node_B.U_tmp++) {
              proc_control_node_B.Xnorm0 +=
                proc_control_node_B.b_H[proc_control_node_B.i_c + 17 *
                proc_control_node_B.U_tmp] *
                proc_control_node_B.Rhs[proc_control_node_B.U_tmp];
            }

            proc_control_node_B.Opt[proc_control_node_B.i_c] =
              proc_control_node_B.Xnorm0;
            proc_control_node_B.lambda_tmp_tmp = 1;
            while (proc_control_node_B.lambda_tmp_tmp - 1 <= nA - 1) {
              proc_control_node_B.U_tmp = static_cast<int16_T>
                (proc_control_node_B.lambda_tmp_tmp) + 17;
              if (static_cast<int16_T>(proc_control_node_B.lambda_tmp_tmp) + 17 >
                  32767) {
                proc_control_node_B.U_tmp = 32767;
              }

              proc_control_node_B.Opt[proc_control_node_B.i_c] +=
                proc_control_node_B.b_D[(static_cast<int16_T>
                (proc_control_node_B.lambda_tmp_tmp) - 1) * 17 +
                proc_control_node_B.i_c] *
                proc_control_node_B.Rhs[proc_control_node_B.U_tmp - 1];
              proc_control_node_B.lambda_tmp_tmp++;
            }
          }

          proc_control_node_B.i_c = 1;
          while (proc_control_node_B.i_c - 1 <= nA - 1) {
            proc_control_node_B.Xnorm0 = 0.0;
            for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 17;
                 proc_control_node_B.U_tmp++) {
              proc_control_node_B.Xnorm0 += proc_control_node_B.b_D[(
                static_cast<int16_T>(proc_control_node_B.i_c) - 1) * 17 +
                proc_control_node_B.U_tmp] *
                proc_control_node_B.Rhs[proc_control_node_B.U_tmp];
            }

            proc_control_node_B.U_tmp = static_cast<int16_T>
              (proc_control_node_B.i_c) + 17;
            if (static_cast<int16_T>(proc_control_node_B.i_c) + 17 > 32767) {
              proc_control_node_B.U_tmp = 32767;
            }

            proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1] =
              proc_control_node_B.Xnorm0;
            proc_control_node_B.lambda_tmp_tmp = 1;
            while (proc_control_node_B.lambda_tmp_tmp - 1 <= nA - 1) {
              proc_control_node_B.U_tmp = static_cast<int16_T>
                (proc_control_node_B.i_c) + 17;
              if (static_cast<int16_T>(proc_control_node_B.i_c) + 17 > 32767) {
                proc_control_node_B.U_tmp = 32767;
              }

              proc_control_node_B.U_tmp_a = static_cast<int16_T>
                (proc_control_node_B.i_c) + 17;
              if (static_cast<int16_T>(proc_control_node_B.i_c) + 17 > 32767) {
                proc_control_node_B.U_tmp_a = 32767;
              }

              proc_control_node_B.i6 = static_cast<int16_T>
                (proc_control_node_B.lambda_tmp_tmp) + 17;
              if (static_cast<int16_T>(proc_control_node_B.lambda_tmp_tmp) + 17 >
                  32767) {
                proc_control_node_B.i6 = 32767;
              }

              proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1] =
                proc_control_node_B.U[((static_cast<int16_T>
                (proc_control_node_B.lambda_tmp_tmp) - 1) * 17 +
                static_cast<int16_T>(proc_control_node_B.i_c)) - 1] *
                proc_control_node_B.Rhs[proc_control_node_B.i6 - 1] +
                proc_control_node_B.Opt[proc_control_node_B.U_tmp_a - 1];
              proc_control_node_B.lambda_tmp_tmp++;
            }

            proc_control_node_B.i_c++;
          }

          proc_control_node_B.Xnorm0 = -1.0E-12;
          kDrop = 0;
          proc_control_node_B.i_c = 1;
          while (proc_control_node_B.i_c - 1 <= nA - 1) {
            proc_control_node_B.U_tmp = static_cast<int16_T>
              (proc_control_node_B.i_c) + 17;
            if (static_cast<int16_T>(proc_control_node_B.i_c) + 17 > 32767) {
              proc_control_node_B.U_tmp = 32767;
            }

            lambda[proc_control_node_B.iC[static_cast<int16_T>
              (proc_control_node_B.i_c) - 1] - 1] =
              proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1];
            proc_control_node_B.U_tmp = static_cast<int16_T>
              (proc_control_node_B.i_c) + 17;
            if (static_cast<int16_T>(proc_control_node_B.i_c) + 17 > 32767) {
              proc_control_node_B.U_tmp = 32767;
            }

            if ((proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1] <
                 proc_control_node_B.Xnorm0) && (static_cast<int16_T>
                 (proc_control_node_B.i_c) <= nA)) {
              kDrop = static_cast<int16_T>(proc_control_node_B.i_c);
              proc_control_node_B.U_tmp = static_cast<int16_T>
                (proc_control_node_B.i_c) + 17;
              if (static_cast<int16_T>(proc_control_node_B.i_c) + 17 > 32767) {
                proc_control_node_B.U_tmp = 32767;
              }

              proc_control_node_B.Xnorm0 =
                proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1];
            }

            proc_control_node_B.i_c++;
          }

          if (kDrop <= 0) {
            DualFeasible = true;
            memcpy(&x[0], &proc_control_node_B.Opt[0], 17U * sizeof(real_T));
          } else {
            (*status)++;
            if (static_cast<int32_T>(*status) > q) {
              nA = 0;
              memset(&iA[0], 0, sizeof(int16_T) << 5U);
              memset(&proc_control_node_B.iC[0], 0, sizeof(int16_T) << 5U);
              ColdReset = true;
            } else {
              lambda[proc_control_node_B.iC[kDrop - 1] - 1] = 0.0;
              proc_control_nod_DropConstraint(kDrop, iA, &nA,
                proc_control_node_B.iC);
            }
          }
        }
      } else {
        if (nA <= 0) {
          memset(&lambda[0], 0, sizeof(real_T) << 5U);
          proc_control_node_Unconstrained(b_Hinv, f, x, 17);
        }

        exitg3 = 1;
      }
    } while (exitg3 == 0);

    if (exitg3 == 1) {
      guard1 = true;
    }
  } else {
    proc_control_node_Unconstrained(b_Hinv, f, x, 17);
    guard1 = true;
  }

  if (guard1) {
    proc_control_node_B.Xnorm0 = proc_control_node_norm(x);
    exitg2 = false;
    while ((!exitg2) && (static_cast<int32_T>(*status) <= maxiter)) {
      proc_control_node_B.cMin = -FeasTol;
      kNext = 0;
      for (proc_control_node_B.i_c = 0; proc_control_node_B.i_c < 32;
           proc_control_node_B.i_c++) {
        proc_control_node_B.t_i =
          proc_control_node_B.cTol[proc_control_node_B.i_c];
        if (!cTolComputed) {
          for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 17;
               proc_control_node_B.U_tmp++) {
            proc_control_node_B.b_Ac[proc_control_node_B.U_tmp] =
              b_Ac[proc_control_node_B.i_c + (proc_control_node_B.U_tmp << 5)] *
              x[proc_control_node_B.U_tmp];
          }

          proc_control_node_abs(proc_control_node_B.b_Ac,
                                proc_control_node_B.z_l);
          proc_control_node_B.cVal = proc_control_node_maximum
            (proc_control_node_B.z_l);
          if ((!(proc_control_node_B.t_i > proc_control_node_B.cVal)) &&
              (!rtIsNaN(proc_control_node_B.cVal))) {
            proc_control_node_B.t_i = proc_control_node_B.cVal;
          }
        }

        if (iA[proc_control_node_B.i_c] == 0) {
          proc_control_node_B.b_Ac_p = 0.0;
          for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 17;
               proc_control_node_B.U_tmp++) {
            proc_control_node_B.b_Ac_p += b_Ac[proc_control_node_B.i_c +
              (proc_control_node_B.U_tmp << 5)] * x[proc_control_node_B.U_tmp];
          }

          proc_control_node_B.cVal = (proc_control_node_B.b_Ac_p -
            b[proc_control_node_B.i_c]) / proc_control_node_B.t_i;
          if (proc_control_node_B.cVal < proc_control_node_B.cMin) {
            proc_control_node_B.cMin = proc_control_node_B.cVal;
            kNext = static_cast<int16_T>(proc_control_node_B.i_c + 1);
          }
        }

        proc_control_node_B.cTol[proc_control_node_B.i_c] =
          proc_control_node_B.t_i;
      }

      cTolComputed = true;
      if (kNext <= 0) {
        exitg2 = true;
      } else if (static_cast<int32_T>(*status) == maxiter) {
        *status = 0.0;
        exitg2 = true;
      } else {
        do {
          exitg1 = 0;
          if ((kNext > 0) && (static_cast<int32_T>(*status) <= maxiter)) {
            guard2 = false;
            if (nA == 0) {
              for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 17;
                   proc_control_node_B.U_tmp++) {
                proc_control_node_B.z_l[proc_control_node_B.U_tmp] = 0.0;
                for (proc_control_node_B.U_tmp_a = 0;
                     proc_control_node_B.U_tmp_a < 17;
                     proc_control_node_B.U_tmp_a++) {
                  proc_control_node_B.z_l[proc_control_node_B.U_tmp] += b_Ac
                    [((proc_control_node_B.U_tmp_a << 5) + kNext) - 1] * b_Hinv
                    [17 * proc_control_node_B.U_tmp_a +
                    proc_control_node_B.U_tmp];
                }
              }

              guard2 = true;
            } else {
              proc_control_node_KWIKfactor(b_Ac, proc_control_node_B.iC, nA,
                b_Linv, proc_control_node_B.b_D, proc_control_node_B.b_H, 17,
                proc_control_node_B.RLinv, &proc_control_node_B.cMin);
              if (proc_control_node_B.cMin <= 0.0) {
                *status = -2.0;
                exitg1 = 1;
              } else {
                for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                     289; proc_control_node_B.U_tmp++) {
                  proc_control_node_B.U[proc_control_node_B.U_tmp] =
                    -proc_control_node_B.b_H[proc_control_node_B.U_tmp];
                }

                for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                     17; proc_control_node_B.U_tmp++) {
                  proc_control_node_B.z_l[proc_control_node_B.U_tmp] = 0.0;
                  for (proc_control_node_B.U_tmp_a = 0;
                       proc_control_node_B.U_tmp_a < 17;
                       proc_control_node_B.U_tmp_a++) {
                    proc_control_node_B.z_l[proc_control_node_B.U_tmp] += b_Ac
                      [((proc_control_node_B.U_tmp_a << 5) + kNext) - 1] *
                      proc_control_node_B.U[17 * proc_control_node_B.U_tmp_a +
                      proc_control_node_B.U_tmp];
                  }
                }

                proc_control_node_B.i_c = 1;
                while (proc_control_node_B.i_c - 1 <= nA - 1) {
                  proc_control_node_B.b_Ac_p = 0.0;
                  for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                       17; proc_control_node_B.U_tmp++) {
                    proc_control_node_B.b_Ac_p += b_Ac
                      [((proc_control_node_B.U_tmp << 5) + kNext) - 1] *
                      proc_control_node_B.b_D[(static_cast<int16_T>
                      (proc_control_node_B.i_c) - 1) * 17 +
                      proc_control_node_B.U_tmp];
                  }

                  proc_control_node_B.r_o[static_cast<int16_T>
                    (proc_control_node_B.i_c) - 1] = proc_control_node_B.b_Ac_p;
                  proc_control_node_B.i_c++;
                }

                guard2 = true;
              }
            }

            if (guard2) {
              kDrop = 0;
              proc_control_node_B.cMin = 0.0;
              DualFeasible = true;
              ColdReset = true;
              if (nA > 0) {
                proc_control_node_B.i_c = 0;
                exitg4 = false;
                while ((!exitg4) && (proc_control_node_B.i_c <= nA - 1)) {
                  if (proc_control_node_B.r_o[proc_control_node_B.i_c] >=
                      1.0E-12) {
                    ColdReset = false;
                    exitg4 = true;
                  } else {
                    proc_control_node_B.i_c++;
                  }
                }
              }

              if ((nA != 0) && (!ColdReset)) {
                proc_control_node_B.i_c = 1;
                while (proc_control_node_B.i_c - 1 <= nA - 1) {
                  proc_control_node_B.t_i = proc_control_node_B.r_o
                    [static_cast<int16_T>(proc_control_node_B.i_c) - 1];
                  if (proc_control_node_B.t_i > 1.0E-12) {
                    proc_control_node_B.cVal = lambda[proc_control_node_B.iC[
                      static_cast<int16_T>(proc_control_node_B.i_c) - 1] - 1] /
                      proc_control_node_B.t_i;
                    if ((kDrop == 0) || (proc_control_node_B.cVal <
                                         proc_control_node_B.rMin)) {
                      proc_control_node_B.rMin = proc_control_node_B.cVal;
                      kDrop = static_cast<int16_T>(proc_control_node_B.i_c);
                    }
                  }

                  proc_control_node_B.i_c++;
                }

                if (kDrop > 0) {
                  proc_control_node_B.cMin = proc_control_node_B.rMin;
                  DualFeasible = false;
                }
              }

              for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 17;
                   proc_control_node_B.U_tmp++) {
                proc_control_node_B.b_Ac[proc_control_node_B.U_tmp] = b_Ac
                  [((proc_control_node_B.U_tmp << 5) + kNext) - 1];
              }

              proc_control_node_B.cVal = proc_control_node_mtimes_a
                (proc_control_node_B.z_l, proc_control_node_B.b_Ac);
              if (proc_control_node_B.cVal <= 0.0) {
                proc_control_node_B.cVal = 0.0;
                ColdReset = true;
              } else {
                proc_control_node_B.b_Ac_p = 0.0;
                for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                     17; proc_control_node_B.U_tmp++) {
                  proc_control_node_B.b_Ac_p += b_Ac[((proc_control_node_B.U_tmp
                    << 5) + kNext) - 1] * x[proc_control_node_B.U_tmp];
                }

                proc_control_node_B.cVal = (b[kNext - 1] -
                  proc_control_node_B.b_Ac_p) / proc_control_node_B.cVal;
                ColdReset = false;
              }

              if (DualFeasible && ColdReset) {
                *status = -1.0;
                exitg1 = 1;
              } else {
                if (ColdReset) {
                  proc_control_node_B.t_i = proc_control_node_B.cMin;
                } else if (DualFeasible) {
                  proc_control_node_B.t_i = proc_control_node_B.cVal;
                } else if ((proc_control_node_B.cMin < proc_control_node_B.cVal)
                           || rtIsNaN(proc_control_node_B.cVal)) {
                  proc_control_node_B.t_i = proc_control_node_B.cMin;
                } else {
                  proc_control_node_B.t_i = proc_control_node_B.cVal;
                }

                proc_control_node_B.i_c = 1;
                while (proc_control_node_B.i_c - 1 <= nA - 1) {
                  proc_control_node_B.lambda_tmp_tmp = proc_control_node_B.iC[
                    static_cast<int16_T>(proc_control_node_B.i_c) - 1];
                  lambda[proc_control_node_B.lambda_tmp_tmp - 1] -=
                    proc_control_node_B.r_o[static_cast<int16_T>
                    (proc_control_node_B.i_c) - 1] * proc_control_node_B.t_i;
                  if ((proc_control_node_B.lambda_tmp_tmp <= 32) &&
                      (lambda[proc_control_node_B.lambda_tmp_tmp - 1] < 0.0)) {
                    lambda[proc_control_node_B.lambda_tmp_tmp - 1] = 0.0;
                  }

                  proc_control_node_B.i_c++;
                }

                lambda[kNext - 1] += proc_control_node_B.t_i;
                if (proc_control_node_B.t_i == proc_control_node_B.cMin) {
                  proc_control_nod_DropConstraint(kDrop, iA, &nA,
                    proc_control_node_B.iC);
                }

                if (!ColdReset) {
                  for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                       17; proc_control_node_B.U_tmp++) {
                    x[proc_control_node_B.U_tmp] += proc_control_node_B.t_i *
                      proc_control_node_B.z_l[proc_control_node_B.U_tmp];
                  }

                  if (proc_control_node_B.t_i == proc_control_node_B.cVal) {
                    if (nA == 17) {
                      *status = -1.0;
                      exitg1 = 1;
                    } else {
                      proc_control_node_B.U_tmp = nA + 1;
                      if (nA + 1 > 32767) {
                        proc_control_node_B.U_tmp = 32767;
                      }

                      nA = static_cast<int16_T>(proc_control_node_B.U_tmp);
                      proc_control_node_B.iC[static_cast<int16_T>
                        (proc_control_node_B.U_tmp) - 1] = kNext;
                      kDrop = static_cast<int16_T>(proc_control_node_B.U_tmp);
                      exitg4 = false;
                      while ((!exitg4) && (kDrop > 1)) {
                        tmp = proc_control_node_B.iC[kDrop - 1];
                        tmp_0 = proc_control_node_B.iC[kDrop - 2];
                        if (tmp > tmp_0) {
                          exitg4 = true;
                        } else {
                          proc_control_node_B.iC[kDrop - 1] = tmp_0;
                          proc_control_node_B.iC[kDrop - 2] = tmp;
                          kDrop = static_cast<int16_T>(kDrop - 1);
                        }
                      }

                      iA[kNext - 1] = 1;
                      kNext = 0;
                      (*status)++;
                    }
                  } else {
                    (*status)++;
                  }
                } else {
                  (*status)++;
                }
              }
            }
          } else {
            proc_control_node_B.cMin = proc_control_node_norm(x);
            if (fabs(proc_control_node_B.cMin - proc_control_node_B.Xnorm0) >
                0.001) {
              proc_control_node_B.Xnorm0 = proc_control_node_B.cMin;
              proc_control_node_abs_b(b, proc_control_node_B.dv14);
              proc_control_node_maximum2(proc_control_node_B.dv14, 1.0,
                proc_control_node_B.cTol);
              cTolComputed = false;
            }

            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_mpc_solveQP(const real_T
  xQP[20], const real_T b_Kx[320], const real_T b_Kr[1920], const real_T rseq
  [120], const real_T b_Ku1[128], const real_T old_u[8], const real_T b_Kv[176],
  const real_T vseq[11], const real_T b_Kut[1280], const real_T b_utarget[80],
  const real_T b_Linv[289], const real_T b_Hinv[289], const real_T b_Ac[544],
  const real_T Bc[32], boolean_T iA[32], real_T zopt[17], real_T f[17], real_T
  *status)
{
  memset(&f[0], 0, 17U * sizeof(real_T));
  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 16;
       proc_control_node_B.i_a++) {
    proc_control_node_B.b_Kx_k = 0.0;
    for (proc_control_node_B.i44 = 0; proc_control_node_B.i44 < 20;
         proc_control_node_B.i44++) {
      proc_control_node_B.b_Kx_k += b_Kx[20 * proc_control_node_B.i_a +
        proc_control_node_B.i44] * xQP[proc_control_node_B.i44];
    }

    proc_control_node_B.b_Kr_n = 0.0;
    for (proc_control_node_B.i44 = 0; proc_control_node_B.i44 < 120;
         proc_control_node_B.i44++) {
      proc_control_node_B.b_Kr_n += b_Kr[120 * proc_control_node_B.i_a +
        proc_control_node_B.i44] * rseq[proc_control_node_B.i44];
    }

    proc_control_node_B.b_Ku1_i = 0.0;
    for (proc_control_node_B.i44 = 0; proc_control_node_B.i44 < 8;
         proc_control_node_B.i44++) {
      proc_control_node_B.b_Ku1_i += b_Ku1[(proc_control_node_B.i_a << 3) +
        proc_control_node_B.i44] * old_u[proc_control_node_B.i44];
    }

    proc_control_node_B.b_Kv_im = 0.0;
    for (proc_control_node_B.i44 = 0; proc_control_node_B.i44 < 11;
         proc_control_node_B.i44++) {
      proc_control_node_B.b_Kv_im += b_Kv[11 * proc_control_node_B.i_a +
        proc_control_node_B.i44] * vseq[proc_control_node_B.i44];
    }

    proc_control_node_B.b_Kut_o = 0.0;
    for (proc_control_node_B.i44 = 0; proc_control_node_B.i44 < 80;
         proc_control_node_B.i44++) {
      proc_control_node_B.b_Kut_o += b_Kut[80 * proc_control_node_B.i_a +
        proc_control_node_B.i44] * b_utarget[proc_control_node_B.i44];
    }

    f[proc_control_node_B.i_a] = (((proc_control_node_B.b_Kx_k +
      proc_control_node_B.b_Kr_n) + proc_control_node_B.b_Ku1_i) +
      proc_control_node_B.b_Kv_im) + proc_control_node_B.b_Kut_o;
  }

  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 32;
       proc_control_node_B.i_a++) {
    proc_control_node_B.iAnew_g[proc_control_node_B.i_a] =
      iA[proc_control_node_B.i_a];
  }

  proc_control_node_qpkwik(b_Linv, b_Hinv, f, b_Ac, Bc,
    proc_control_node_B.iAnew_g, 196, 0.01, zopt, proc_control_node_B.a__1_iu,
    status);
  for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 32;
       proc_control_node_B.i_a++) {
    iA[proc_control_node_B.i_a] =
      (proc_control_node_B.iAnew_g[proc_control_node_B.i_a] != 0);
  }

  if ((*status < 0.0) || (*status == 0.0)) {
    memset(&zopt[0], 0, 17U * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S168>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_mpcblock_optimizer(const real_T
  rseq[120], const real_T vseq[11], const real_T x[20], const real_T old_u[8],
  const boolean_T iA[32], const real_T b_Mlim[32], real_T b_Mx[640], real_T
  b_Mu1[256], real_T b_Mv[352], const real_T b_utarget[80], const real_T b_uoff
  [8], real_T b_H[289], real_T b_Ac[544], const real_T b_Wy[12], const real_T
  b_Wdu[8], const real_T b_Jm[1280], const real_T b_Wu[8], const real_T b_I1[640],
  const real_T b_A[400], const real_T Bu[1760], const real_T Bv[220], const
  real_T b_C[240], const real_T Dv[132], const real_T b_Mrows[32], real_T u[8],
  real_T useq[88], real_T *status, boolean_T iAout[32])
{
  static const int8_T c_A[100] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
    0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1 };

  boolean_T exitg1;
  memset(&useq[0], 0, 88U * sizeof(real_T));
  for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 32;
       proc_control_node_B.i_j++) {
    iAout[proc_control_node_B.i_j] = false;
  }

  proc_control_mpc_constraintcoef(b_A, &Bu[0], &Bv[0], b_C, &Dv[0], b_Jm,
    proc_control_node_B.b_SuJm_n, proc_control_node_B.b_Sx_g,
    proc_control_node_B.b_Su1_j, proc_control_node_B.b_Hv_l);
  if (b_Mrows[0] > 0.0) {
    proc_control_node_B.kidx_p = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.kidx_p < 32)) {
      if (b_Mrows[proc_control_node_B.kidx_p] <= 120.0) {
        proc_control_node_B.i_j = static_cast<int32_T>
          (b_Mrows[proc_control_node_B.kidx_p]);
        for (proc_control_node_B.b_j1_f = 0; proc_control_node_B.b_j1_f < 16;
             proc_control_node_B.b_j1_f++) {
          b_Ac[proc_control_node_B.kidx_p + (proc_control_node_B.b_j1_f << 5)] =
            -proc_control_node_B.b_SuJm_n[(120 * proc_control_node_B.b_j1_f +
            proc_control_node_B.i_j) - 1];
        }

        for (proc_control_node_B.b_j1_f = 0; proc_control_node_B.b_j1_f < 20;
             proc_control_node_B.b_j1_f++) {
          b_Mx[proc_control_node_B.kidx_p + (proc_control_node_B.b_j1_f << 5)] =
            -proc_control_node_B.b_Sx_g[(120 * proc_control_node_B.b_j1_f +
            proc_control_node_B.i_j) - 1];
        }

        for (proc_control_node_B.b_j1_f = 0; proc_control_node_B.b_j1_f < 8;
             proc_control_node_B.b_j1_f++) {
          b_Mu1[proc_control_node_B.kidx_p + (proc_control_node_B.b_j1_f << 5)] =
            -proc_control_node_B.b_Su1_j[(120 * proc_control_node_B.b_j1_f +
            proc_control_node_B.i_j) - 1];
        }

        for (proc_control_node_B.b_j1_f = 0; proc_control_node_B.b_j1_f < 11;
             proc_control_node_B.b_j1_f++) {
          b_Mv[proc_control_node_B.kidx_p + (proc_control_node_B.b_j1_f << 5)] =
            -proc_control_node_B.b_Hv_l[(120 * proc_control_node_B.b_j1_f +
            proc_control_node_B.i_j) - 1];
        }

        proc_control_node_B.kidx_p++;
      } else if (b_Mrows[proc_control_node_B.kidx_p] <= 240.0) {
        proc_control_node_B.i_j = static_cast<int32_T>
          (b_Mrows[proc_control_node_B.kidx_p] - 120.0);
        for (proc_control_node_B.b_j1_f = 0; proc_control_node_B.b_j1_f < 16;
             proc_control_node_B.b_j1_f++) {
          b_Ac[proc_control_node_B.kidx_p + (proc_control_node_B.b_j1_f << 5)] =
            proc_control_node_B.b_SuJm_n[(120 * proc_control_node_B.b_j1_f +
            proc_control_node_B.i_j) - 1];
        }

        for (proc_control_node_B.b_j1_f = 0; proc_control_node_B.b_j1_f < 20;
             proc_control_node_B.b_j1_f++) {
          b_Mx[proc_control_node_B.kidx_p + (proc_control_node_B.b_j1_f << 5)] =
            proc_control_node_B.b_Sx_g[(120 * proc_control_node_B.b_j1_f +
            proc_control_node_B.i_j) - 1];
        }

        for (proc_control_node_B.b_j1_f = 0; proc_control_node_B.b_j1_f < 8;
             proc_control_node_B.b_j1_f++) {
          b_Mu1[proc_control_node_B.kidx_p + (proc_control_node_B.b_j1_f << 5)] =
            proc_control_node_B.b_Su1_j[(120 * proc_control_node_B.b_j1_f +
            proc_control_node_B.i_j) - 1];
        }

        for (proc_control_node_B.b_j1_f = 0; proc_control_node_B.b_j1_f < 11;
             proc_control_node_B.b_j1_f++) {
          b_Mv[proc_control_node_B.kidx_p + (proc_control_node_B.b_j1_f << 5)] =
            proc_control_node_B.b_Hv_l[(120 * proc_control_node_B.b_j1_f +
            proc_control_node_B.i_j) - 1];
        }

        proc_control_node_B.kidx_p++;
      } else {
        exitg1 = true;
      }
    }
  }

  memset(&proc_control_node_B.b_I_l[0], 0, sizeof(int8_T) << 6U);
  proc_control_node_B.kidx_n = 0;
  for (proc_control_node_B.kidx_p = 0; proc_control_node_B.kidx_p < 8;
       proc_control_node_B.kidx_p++) {
    proc_control_node_B.b_I_l[proc_control_node_B.kidx_n] = 1;
    proc_control_node_B.kidx_n += 9;
  }

  proc_control_node_B.kidx_p = -1;
  for (proc_control_node_B.b_j1_f = 0; proc_control_node_B.b_j1_f < 10;
       proc_control_node_B.b_j1_f++) {
    for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
         proc_control_node_B.i_j++) {
      for (proc_control_node_B.kidx_n = 0; proc_control_node_B.kidx_n < 10;
           proc_control_node_B.kidx_n++) {
        for (proc_control_node_B.i2_h = 0; proc_control_node_B.i2_h < 8;
             proc_control_node_B.i2_h++) {
          proc_control_node_B.a_o[(proc_control_node_B.kidx_p +
            proc_control_node_B.i2_h) + 1] = static_cast<int8_T>(c_A[10 *
            proc_control_node_B.b_j1_f + proc_control_node_B.kidx_n] *
            proc_control_node_B.b_I_l[(proc_control_node_B.i_j << 3) +
            proc_control_node_B.i2_h]);
        }

        proc_control_node_B.kidx_p += 8;
      }
    }
  }

  for (proc_control_node_B.b_j1_f = 0; proc_control_node_B.b_j1_f < 16;
       proc_control_node_B.b_j1_f++) {
    memset(&proc_control_node_B.a[proc_control_node_B.b_j1_f * 80], 0, 80U *
           sizeof(real_T));
    for (proc_control_node_B.kidx_n = 0; proc_control_node_B.kidx_n < 80;
         proc_control_node_B.kidx_n++) {
      for (proc_control_node_B.kidx_p = 0; proc_control_node_B.kidx_p < 80;
           proc_control_node_B.kidx_p++) {
        proc_control_node_B.i_j = 80 * proc_control_node_B.b_j1_f +
          proc_control_node_B.kidx_p;
        proc_control_node_B.a[proc_control_node_B.i_j] += static_cast<real_T>
          (proc_control_node_B.a_o[80 * proc_control_node_B.kidx_n +
           proc_control_node_B.kidx_p]) * b_Jm[80 * proc_control_node_B.b_j1_f +
          proc_control_node_B.kidx_n];
      }
    }
  }

  proc_contr_mpc_calculatehessian(b_Wy, b_Wu, b_Wdu,
    proc_control_node_B.b_SuJm_n, proc_control_node_B.a, b_Jm, b_I1,
    proc_control_node_B.b_Su1_j, proc_control_node_B.b_Sx_g,
    proc_control_node_B.b_Hv_l, proc_control_node_nu, proc_control_node_ny,
    proc_control_node_B.b_o, proc_control_node_B.b_Ku1_m,
    proc_control_node_B.b_Kut, proc_control_node_B.b_Kx_l,
    proc_control_node_B.b_Kv_l, proc_control_node_B.b_Kr_p);
  proc_control_node_B.b_j1_f = 0;
  proc_control_node_B.kidx_p = 0;
  for (proc_control_node_B.kidx_n = 0; proc_control_node_B.kidx_n < 16;
       proc_control_node_B.kidx_n++) {
    memcpy(&b_H[proc_control_node_B.b_j1_f],
           &proc_control_node_B.b_o[proc_control_node_B.kidx_p], sizeof(real_T) <<
           4U);
    proc_control_node_B.b_j1_f += 17;
    proc_control_node_B.kidx_p += 16;
  }

  memcpy(&proc_control_node_B.b_Linv_m[0], &b_H[0], 289U * sizeof(real_T));
  proc_control_n_mpc_checkhessian(proc_control_node_B.b_Linv_m,
    proc_control_node_B.c_Linv_m, &proc_control_node_B.BadH_i);
  if (proc_control_node_B.BadH_i > 1.0) {
    proc_control_node_B.kidx_p = 0;
    for (proc_control_node_B.kidx_n = 0; proc_control_node_B.kidx_n < 8;
         proc_control_node_B.kidx_n++) {
      u[proc_control_node_B.kidx_n] = old_u[proc_control_node_B.kidx_n] +
        b_uoff[proc_control_node_B.kidx_n];
      for (proc_control_node_B.b_j1_f = 0; proc_control_node_B.b_j1_f < 11;
           proc_control_node_B.b_j1_f++) {
        useq[proc_control_node_B.b_j1_f + proc_control_node_B.kidx_p] =
          u[proc_control_node_B.kidx_n];
      }

      proc_control_node_B.kidx_p += 11;
    }

    *status = -2.0;
  } else {
    memset(&proc_control_node_B.c_I_h[0], 0, 289U * sizeof(int8_T));
    proc_control_node_B.kidx_n = 0;
    for (proc_control_node_B.kidx_p = 0; proc_control_node_B.kidx_p < 17;
         proc_control_node_B.kidx_p++) {
      proc_control_node_B.c_I_h[proc_control_node_B.kidx_n] = 1;
      proc_control_node_B.kidx_n += 18;
    }

    proc_control_node_B.kidx_n = 0;
    for (proc_control_node_B.kidx_p = 0; proc_control_node_B.kidx_p < 17;
         proc_control_node_B.kidx_p++) {
      for (proc_control_node_B.b_j1_f = 0; proc_control_node_B.b_j1_f < 17;
           proc_control_node_B.b_j1_f++) {
        proc_control_node_B.i_j = proc_control_node_B.b_j1_f +
          proc_control_node_B.kidx_n;
        proc_control_node_B.b_Linv_m[proc_control_node_B.i_j] =
          proc_control_node_B.c_I_h[proc_control_node_B.i_j];
      }

      proc_control_node_B.kidx_n += 17;
    }

    proc_control_node_trisolve(proc_control_node_B.c_Linv_m,
      proc_control_node_B.b_Linv_m);
    for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 32;
         proc_control_node_B.i_j++) {
      iAout[proc_control_node_B.i_j] = iA[proc_control_node_B.i_j];
      proc_control_node_B.BadH_i = 0.0;
      proc_control_node_B.b_j1_f = 0;
      for (proc_control_node_B.kidx_p = 0; proc_control_node_B.kidx_p < 20;
           proc_control_node_B.kidx_p++) {
        proc_control_node_B.BadH_i += b_Mx[proc_control_node_B.b_j1_f +
          proc_control_node_B.i_j] * x[proc_control_node_B.kidx_p];
        proc_control_node_B.b_j1_f += 32;
      }

      proc_control_node_B.b_Mlim_f[proc_control_node_B.i_j] =
        b_Mlim[proc_control_node_B.i_j] + proc_control_node_B.BadH_i;
      proc_control_node_B.b_Mu1_c[proc_control_node_B.i_j] = 0.0;
    }

    proc_control_node_B.b_j1_f = 0;
    for (proc_control_node_B.kidx_p = 0; proc_control_node_B.kidx_p < 8;
         proc_control_node_B.kidx_p++) {
      for (proc_control_node_B.kidx_n = 0; proc_control_node_B.kidx_n < 32;
           proc_control_node_B.kidx_n++) {
        proc_control_node_B.b_Mu1_c[proc_control_node_B.kidx_n] +=
          b_Mu1[proc_control_node_B.kidx_n + proc_control_node_B.b_j1_f] *
          old_u[proc_control_node_B.kidx_p];
      }

      proc_control_node_B.b_j1_f += 32;
    }

    proc_control_node_B.b_j1_f = 0;
    for (proc_control_node_B.kidx_p = 0; proc_control_node_B.kidx_p < 17;
         proc_control_node_B.kidx_p++) {
      proc_control_node_B.kidx_n = 0;
      for (proc_control_node_B.i2_h = 0; proc_control_node_B.i2_h < 17;
           proc_control_node_B.i2_h++) {
        proc_control_node_B.i_j = proc_control_node_B.i2_h +
          proc_control_node_B.b_j1_f;
        proc_control_node_B.c_Linv_m[proc_control_node_B.i_j] = 0.0;
        for (proc_control_node_B.i9 = 0; proc_control_node_B.i9 < 17;
             proc_control_node_B.i9++) {
          proc_control_node_B.c_Linv_m[proc_control_node_B.i_j] +=
            proc_control_node_B.b_Linv_m[proc_control_node_B.i9 +
            proc_control_node_B.kidx_n] *
            proc_control_node_B.b_Linv_m[proc_control_node_B.i9 +
            proc_control_node_B.b_j1_f];
        }

        proc_control_node_B.kidx_n += 17;
      }

      proc_control_node_B.b_j1_f += 17;
    }

    for (proc_control_node_B.b_j1_f = 0; proc_control_node_B.b_j1_f < 32;
         proc_control_node_B.b_j1_f++) {
      proc_control_node_B.BadH_i = 0.0;
      proc_control_node_B.kidx_p = 0;
      for (proc_control_node_B.kidx_n = 0; proc_control_node_B.kidx_n < 11;
           proc_control_node_B.kidx_n++) {
        proc_control_node_B.BadH_i += b_Mv[proc_control_node_B.kidx_p +
          proc_control_node_B.b_j1_f] * vseq[proc_control_node_B.kidx_n];
        proc_control_node_B.kidx_p += 32;
      }

      proc_control_node_B.b_Mlim_fq[proc_control_node_B.b_j1_f] =
        -((proc_control_node_B.b_Mlim_f[proc_control_node_B.b_j1_f] +
           proc_control_node_B.b_Mu1_c[proc_control_node_B.b_j1_f]) +
          proc_control_node_B.BadH_i);
    }

    proc_control_node_mpc_solveQP(x, proc_control_node_B.b_Kx_l,
      proc_control_node_B.b_Kr_p, rseq, proc_control_node_B.b_Ku1_m, old_u,
      proc_control_node_B.b_Kv_l, vseq, proc_control_node_B.b_Kut, b_utarget,
      proc_control_node_B.b_Linv_m, proc_control_node_B.c_Linv_m, b_Ac,
      proc_control_node_B.b_Mlim_fq, iAout, proc_control_node_B.zopt_d,
      proc_control_node_B.f_d, status);
    for (proc_control_node_B.kidx_p = 0; proc_control_node_B.kidx_p < 8;
         proc_control_node_B.kidx_p++) {
      u[proc_control_node_B.kidx_p] = (old_u[proc_control_node_B.kidx_p] +
        proc_control_node_B.zopt_d[proc_control_node_B.kidx_p]) +
        b_uoff[proc_control_node_B.kidx_p];
    }
  }
}

// Function for MATLAB Function: '<S181>/Predict'
void proc_control_nodeModelClass::proc_contr_EKalmanStateFonction(const real_T
  x[20], const real_T u[8], real_T xk[20])
{
  real_T xk_tmp;
  real_T xk_tmp_0;
  int32_T i;
  memcpy(&xk[0], &x[0], 20U * sizeof(real_T));
  proc_control_node_B.t5_m = cos(x[3]);
  proc_control_node_B.t6_c = cos(x[5]);
  proc_control_node_B.t9_g = cos(x[4]);
  proc_control_node_B.t11_b = sin(x[3]);
  proc_control_node_B.t12_p = sin(x[5]);
  proc_control_node_B.t13_p = sin(x[4]);
  proc_control_node_B.t14_kw = 1.0 / proc_control_node_B.t9_g;
  proc_control_node_B.t66 = (x[10] / 125.0 + x[11] / 250.0) + x[9] * 0.592;
  proc_control_node_B.t41_i = fabs(x[10]) / 10.0 + 2.3333333333333335;
  proc_control_node_B.t42_n = fabs(x[11]) * 0.102 + 5.0;
  proc_control_node_B.t43_h = fabs(x[7]) * 0.82 + 20.0;
  proc_control_node_B.t47 = fabs(x[6]) * 1.17 + 15.0;
  proc_control_node_B.t55_n = fabs(x[9]) * 0.167 + 3.3333333333333335;
  proc_control_node_B.t56_m = fabs(x[8]) * 0.756 + 23.333333333333332;
  proc_control_node_B.t68_g = (x[9] / 250.0 + -(x[10] / 1000.0)) + x[11] *
    1.8864;
  proc_control_node_B.t69_j = (x[9] / 125.0 + -(x[11] / 1000.0)) + x[10] *
    1.7228;
  proc_control_node_B.t67 = proc_control_node_B.t5_m * 0.062 +
    -(proc_control_node_B.t11_b * 0.746622);
  for (i = 0; i < 10; i++) {
    proc_control_node_B.t20_a = x[10] / 500.0;
    proc_control_node_B.t24_f = x[9] / 1000.0;
    proc_control_node_B.t26_g = x[11] * 0.018;
    proc_control_node_B.t46 = x[6] * 32.4648;
    proc_control_node_B.t49 = x[7] * 43.6156;
    proc_control_node_B.t50_b = x[8] * 46.7695;
    proc_control_node_B.t53_k = proc_control_node_B.t20_a +
      proc_control_node_B.t26_g;
    proc_control_node_B.t20_a += proc_control_node_B.t24_f;
    proc_control_node_B.t24_f += proc_control_node_B.t26_g;
    proc_control_node_B.t26_g = x[10] * 0.558 + proc_control_node_B.t46;
    proc_control_node_B.t62_b = x[9] * 0.062 + proc_control_node_B.t50_b;
    proc_control_node_B.t63 = x[11] * 0.031 + proc_control_node_B.t49;
    proc_control_node_B.t46 = x[11] * 0.062 + -proc_control_node_B.t46;
    proc_control_node_B.t49 = x[9] * 0.558 + -proc_control_node_B.t49;
    proc_control_node_B.t50_b = x[10] * 0.031 + -proc_control_node_B.t50_b;
    proc_control_node_B.xk = xk[0];
    proc_control_node_B.xk_f = xk[1];
    proc_control_node_B.xk_n = xk[2];
    proc_control_node_B.xk_g = xk[3];
    proc_control_node_B.xk_d = xk[4];
    proc_control_node_B.xk_c = xk[5];
    proc_control_node_B.xk_m = xk[6];
    proc_control_node_B.xk_dk = xk[7];
    proc_control_node_B.xk_n4 = xk[8];
    proc_control_node_B.xk_b = xk[9];
    proc_control_node_B.xk_p = xk[10];
    proc_control_node_B.xk_k = xk[11];
    proc_control_node_B.xk_cl = xk[12];
    proc_control_node_B.xk_n2 = xk[13];
    proc_control_node_B.xk_nm = xk[14];
    proc_control_node_B.xk_cd = xk[15];
    proc_control_node_B.xk_dkf = xk[16];
    proc_control_node_B.xk_nq = xk[17];
    proc_control_node_B.xk_gu = xk[18];
    proc_control_node_B.xk_l = xk[19];
    proc_control_node_B.xk_tmp = proc_control_node_B.t11_b *
      proc_control_node_B.t12_p;
    proc_control_node_B.xk_tmp_g = proc_control_node_B.t5_m *
      proc_control_node_B.t6_c;
    proc_control_node_B.xk_tmp_p = proc_control_node_B.t5_m *
      proc_control_node_B.t12_p;
    proc_control_node_B.xk_tmp_k = proc_control_node_B.t6_c *
      proc_control_node_B.t11_b;
    xk[0] = (((proc_control_node_B.xk_tmp_p - proc_control_node_B.xk_tmp_k *
               proc_control_node_B.t13_p) * -x[7] +
              (proc_control_node_B.xk_tmp_g * proc_control_node_B.t13_p +
               proc_control_node_B.xk_tmp) * x[8]) + proc_control_node_B.t6_c *
             proc_control_node_B.t9_g * x[6]) * 0.01 + proc_control_node_B.xk;
    xk[1] = (((proc_control_node_B.xk_tmp * proc_control_node_B.t13_p +
               proc_control_node_B.xk_tmp_g) * x[7] -
              (proc_control_node_B.xk_tmp_k - proc_control_node_B.xk_tmp_p *
               proc_control_node_B.t13_p) * x[8]) + proc_control_node_B.t9_g *
             proc_control_node_B.t12_p * x[6]) * 0.01 + proc_control_node_B.xk_f;
    proc_control_node_B.xk_tmp = proc_control_node_B.t5_m *
      proc_control_node_B.t9_g;
    proc_control_node_B.xk_tmp_g = proc_control_node_B.t9_g *
      proc_control_node_B.t11_b;
    xk[2] = ((proc_control_node_B.xk_tmp_g * x[7] + -proc_control_node_B.t13_p *
              x[6]) + proc_control_node_B.xk_tmp * x[8]) * 0.01 +
      proc_control_node_B.xk_n;
    proc_control_node_B.xk_tmp_p = x[10] * proc_control_node_B.t11_b;
    proc_control_node_B.xk_tmp_k = x[11] * proc_control_node_B.t5_m;
    xk[3] = ((proc_control_node_B.xk_tmp_p * proc_control_node_B.t13_p *
              proc_control_node_B.t14_kw + (x[9] + x[12])) +
             proc_control_node_B.xk_tmp_k * proc_control_node_B.t13_p *
             proc_control_node_B.t14_kw) * 0.01 + proc_control_node_B.xk_g;
    xk[4] = ((x[10] * proc_control_node_B.t5_m + x[13]) - x[11] *
             proc_control_node_B.t11_b) * 0.01 + proc_control_node_B.xk_d;
    xk[5] = (proc_control_node_B.xk_tmp_p * proc_control_node_B.t14_kw +
             proc_control_node_B.xk_tmp_k * proc_control_node_B.t14_kw) * 0.01 +
      proc_control_node_B.xk_c;
    proc_control_node_B.xk_tmp_p = x[9] * proc_control_node_B.t53_k;
    proc_control_node_B.xk_tmp_k = x[9] * proc_control_node_B.t55_n;
    proc_control_node_B.xk = x[9] * proc_control_node_B.t62_b;
    proc_control_node_B.xk_f = x[9] * proc_control_node_B.t49;
    proc_control_node_B.xk_n = x[9] * proc_control_node_B.t68_g;
    proc_control_node_B.xk_g = x[9] * proc_control_node_B.t69_j;
    proc_control_node_B.xk_d = x[10] * proc_control_node_B.t41_i;
    proc_control_node_B.xk_c = x[10] * proc_control_node_B.t24_f;
    proc_control_node_B.xk_tmp_l = x[10] * proc_control_node_B.t26_g;
    proc_control_node_B.xk_tmp_b = x[10] * proc_control_node_B.t50_b;
    proc_control_node_B.xk_tmp_c = x[10] * proc_control_node_B.t66;
    proc_control_node_B.xk_tmp_f = x[10] * proc_control_node_B.t68_g;
    proc_control_node_B.xk_tmp_o = x[11] * proc_control_node_B.t42_n;
    proc_control_node_B.xk_tmp_d = x[11] * proc_control_node_B.t20_a;
    proc_control_node_B.xk_tmp_ld = x[11] * proc_control_node_B.t46;
    proc_control_node_B.xk_tmp_ls = x[11] * proc_control_node_B.t63;
    proc_control_node_B.xk_tmp_dr = x[11] * proc_control_node_B.t66;
    proc_control_node_B.xk_tmp_ku = x[11] * proc_control_node_B.t69_j;
    proc_control_node_B.xk_tmp_fo = proc_control_node_B.t9_g *
      proc_control_node_B.t67;
    proc_control_node_B.xk_tmp_p3 = proc_control_node_B.t47 * x[6];
    proc_control_node_B.t53_k *= x[6];
    proc_control_node_B.t63 *= x[6];
    proc_control_node_B.t50_b *= x[6];
    xk_tmp = proc_control_node_B.t43_h * x[7];
    proc_control_node_B.t24_f *= x[7];
    proc_control_node_B.t46 *= x[7];
    proc_control_node_B.t62_b *= x[7];
    xk_tmp_0 = proc_control_node_B.t56_m * x[8];
    proc_control_node_B.t20_a *= x[8];
    proc_control_node_B.t26_g *= x[8];
    proc_control_node_B.t49 *= x[8];
    xk[6] = (((((((((((((((u[0] * -0.00033076834054020519 + u[1] *
      1.8595780444550231E-21) + u[2] * 0.00033506403327449372) + (u[3] *
      0.00033363213569639753 - u[4] * 0.001819638864719295)) + (u[5] *
      -0.0018124211550371481 + u[6] * 0.0018538731733468781)) + ((u[7] *
      0.001778186846409557 + x[14]) + proc_control_node_B.t13_p *
      0.20690082595613279)) + (((u[0] * 1.4142135623730951 *
      0.015171119710606879 + u[1] * 1.4142135623730951 * 0.014928824155507611) +
      u[2] * 1.4142135623730951 * 0.015171119710606879) + u[3] *
      1.4142135623730951 * 0.01516372519659284)) +
                     (((proc_control_node_B.xk_tmp_p * -0.96028628902704993 -
                        proc_control_node_B.xk_tmp_k * 0.0001303522588356414) +
                       proc_control_node_B.xk * 9.4803055144857715E-7) -
                      proc_control_node_B.xk_f * 6.8231348244175949E-6)) +
                    (((proc_control_node_B.xk_n * -0.010033314971702871 -
                       proc_control_node_B.xk_g * 0.0010125044874363649) +
                      proc_control_node_B.xk_d * 0.010033314971702871) -
                     proc_control_node_B.xk_c * 2.9388947094905889E-5)) +
                   (((proc_control_node_B.xk_tmp_l * -6.8231348244175949E-6 +
                      proc_control_node_B.xk_tmp_b * 0.030976977065388711) +
                     proc_control_node_B.xk_tmp_c * 0.0010125044874363649) -
                    proc_control_node_B.xk_tmp_f * 0.0001303522588356414)) +
                  (((proc_control_node_B.xk_tmp_o * -0.0010125044874363649 +
                     proc_control_node_B.xk_tmp_d * 0.0002115171795569455) +
                    proc_control_node_B.xk_tmp_ld * 9.4803055144857715E-7) +
                   proc_control_node_B.xk_tmp_ls * 0.030976977065388711)) +
                 ((proc_control_node_B.xk_tmp_dr * 0.010033314971702871 +
                   proc_control_node_B.xk_tmp_ku * 0.0001303522588356414) +
                  proc_control_node_B.xk_tmp * 0.0030804819903427929)) +
                ((proc_control_node_B.xk_tmp_g * 0.0003038485611411295 +
                  proc_control_node_B.xk_tmp_fo * 0.0012787556591776421) -
                 proc_control_node_B.xk_tmp_p3 * 0.030976977065388711)) +
               (((proc_control_node_B.t53_k * 0.0040409200239048832 -
                  proc_control_node_B.t63 * 0.0010125044874363649) +
                 proc_control_node_B.t50_b * 0.010033314971702871) - xk_tmp *
                9.4803055144857715E-7)) + (((proc_control_node_B.t24_f *
      -0.311032764122789 - proc_control_node_B.t46 * 0.0010125044874363649) -
                proc_control_node_B.t62_b * 0.0001303522588356414) + xk_tmp_0 *
               6.8231348244175949E-6)) + ((proc_control_node_B.t20_a *
               0.031387639110527318 + proc_control_node_B.t26_g *
               0.010033314971702871) - proc_control_node_B.t49 *
              0.0001303522588356414)) * 0.01 + proc_control_node_B.xk_m;
    xk[7] = ((((((((((((((((u[0] * 0.00013975754063522079 + u[1] *
      7.9244610288113972E-21) + u[2] * -0.00014157257363048341) + (u[3] *
      -0.0001409675626320625 - u[4] * 0.0034249251816346319)) + (u[5] *
      0.003387750973601051 + u[6] * 0.0035708122797193441)) + ((u[7] *
      -0.0035336380716857632 + x[15]) + proc_control_node_B.t13_p *
      0.00049601054978465754)) + ((u[0] * 1.4142135623730951 *
      -0.01090649593858282 + u[1] * 1.4142135623730951 * 0.011000123045544621) -
      u[2] * 1.4142135623730951 * 0.01090649593858282)) + ((u[3] *
      1.4142135623730951 * 0.01090087173345982 - proc_control_node_B.xk_tmp_p *
      2.9388947094905889E-5) - proc_control_node_B.xk_tmp_k *
      0.021882274381510681)) + (((proc_control_node_B.xk * 0.02320783323245932 -
      proc_control_node_B.xk_f * 2.9076309096921531E-5) -
      proc_control_node_B.xk_n * 0.0001026911824132076) +
      proc_control_node_B.xk_g * 0.00042780737967584029)) +
                    (((proc_control_node_B.xk_d * 0.0001026911824132076 -
                       proc_control_node_B.xk_c * 0.71944283020623911) -
                      proc_control_node_B.xk_tmp_l * 2.9076309096921531E-5) +
                     proc_control_node_B.xk_tmp_b * 9.4803055144857715E-7)) +
                   (((proc_control_node_B.xk_tmp_c * -0.00042780737967584029 -
                      proc_control_node_B.xk_tmp_f * 0.021882274381510681) +
                     proc_control_node_B.xk_tmp_o * 0.00042780737967584029) +
                    proc_control_node_B.xk_tmp_d * 0.00090136558200456737)) +
                  (((proc_control_node_B.xk_tmp_ld * 0.02320783323245932 +
                     proc_control_node_B.xk_tmp_ls * 9.4803055144857715E-7) +
                    proc_control_node_B.xk_tmp_dr * 0.0001026911824132076) +
                   proc_control_node_B.xk_tmp_ku * 0.021882274381510681)) +
                 ((proc_control_node_B.xk_tmp * 0.0001558786802929103 -
                   proc_control_node_B.xk_tmp_g * 0.09962138533478937) +
                  proc_control_node_B.xk_tmp_fo * 0.2146651116826197)) +
                (((proc_control_node_B.xk_tmp_p3 * -9.4803055144857715E-7 +
                   proc_control_node_B.t53_k * 0.678350505826831) +
                  proc_control_node_B.t63 * 0.00042780737967584029) +
                 proc_control_node_B.t50_b * 0.0001026911824132076)) + ((xk_tmp *
      -0.02320783323245932 - proc_control_node_B.t24_f * 0.0031834266548094372)
                + proc_control_node_B.t46 * 0.00042780737967584029)) +
              (((proc_control_node_B.t62_b * -0.021882274381510681 + xk_tmp_0 *
                 2.9076309096921531E-5) - proc_control_node_B.t20_a *
                0.013262028769951049) + proc_control_node_B.t26_g *
               0.0001026911824132076)) + proc_control_node_B.t49 *
             -0.021882274381510681) * 0.01 + proc_control_node_B.xk_dk;
    xk[8] = (((((((((((((((u[0] * -1.725827915740819E-6 + u[1] *
      -5.8281975682474322E-18) + u[2] * 1.748241265284163E-6) + (u[3] *
      1.740770148765829E-6 - u[4] * 0.02095639900015615)) + (u[5] *
      0.021100316216985739 - u[6] * 0.021822949502860629)) + ((u[7] *
      0.02167903228603104 + x[16]) - proc_control_node_B.t13_p *
      0.0029379207602901669)) + ((u[0] * 1.4142135623730951 *
      -4.8869263875916949E-5 + u[1] * 1.4142135623730951 * 6.6264429389244648E-5)
      - u[2] * 1.4142135623730951 * 4.8869263875916949E-5)) + (((u[3] *
      1.4142135623730951 * 6.7490056888775055E-5 + proc_control_node_B.xk_tmp_p *
      0.0002115171795569455) + proc_control_node_B.xk_tmp_k *
      0.002272431716587712) - proc_control_node_B.xk * 2.9076309096921531E-5)) +
                    (((proc_control_node_B.xk_f * 0.021384731826702759 +
                       proc_control_node_B.xk_n * 0.00039756137245743289) -
                      proc_control_node_B.xk_g * 5.2828771531483014E-6) -
                     proc_control_node_B.xk_d * 0.00039756137245743289)) +
                   (((proc_control_node_B.xk_c * 0.00090136558200456737 +
                      proc_control_node_B.xk_tmp_l * 0.021384731826702759) -
                     proc_control_node_B.xk_tmp_b * 6.8231348244175949E-6) +
                    proc_control_node_B.xk_tmp_c * 5.2828771531483014E-6)) +
                  (((proc_control_node_B.xk_tmp_f * 0.002272431716587712 -
                     proc_control_node_B.xk_tmp_o * 5.2828771531483014E-6) -
                    proc_control_node_B.xk_tmp_d * 0.66292668662778553) -
                   proc_control_node_B.xk_tmp_ld * 2.9076309096921531E-5)) +
                 ((proc_control_node_B.xk_tmp_ls * -6.8231348244175949E-6 -
                   proc_control_node_B.xk_tmp_dr * 0.00039756137245743289) -
                  proc_control_node_B.xk_tmp_ku * 0.002272431716587712)) +
                ((proc_control_node_B.xk_tmp * -0.091796606188097957 +
                  proc_control_node_B.xk_tmp_g * 0.0001262558405802736) -
                 proc_control_node_B.xk_tmp_fo * 0.022292555139725449)) +
               (((proc_control_node_B.xk_tmp_p3 * 6.8231348244175949E-6 -
                  proc_control_node_B.t53_k * 0.070445383214219059) -
                 proc_control_node_B.t63 * 5.2828771531483014E-6) -
                proc_control_node_B.t50_b * 0.00039756137245743289)) + (((xk_tmp
      * 2.9076309096921531E-5 + proc_control_node_B.t24_f * 0.01232440254618042)
                - proc_control_node_B.t46 * 5.2828771531483014E-6) +
               proc_control_node_B.t62_b * 0.002272431716587712)) + (((xk_tmp_0 *
                -0.021384731826702759 + proc_control_node_B.t20_a *
                0.00016376919174759729) - proc_control_node_B.t26_g *
               0.00039756137245743289) + proc_control_node_B.t49 *
              0.002272431716587712)) * 0.01 + proc_control_node_B.xk_n4;
    xk[9] = ((((((((((((((((((u[0] * 0.0013021350951669831 + u[1] *
      6.1932883292401409E-19) + u[2] * -0.00131904594055876) + (u[3] *
      -0.0013134089920948341 - u[4] * 0.26767193546582568)) + (u[5] *
      0.26476621250220889 + u[6] * 0.2790736050389333)) + ((u[7] *
      -0.27616788207531651 + x[17]) + proc_control_node_B.t13_p *
      0.056926116941144737)) + ((u[0] * 1.4142135623730951 *
      0.043593198825375247 - u[1] * 1.4142135623730951 * 0.043051831063235027) +
      u[2] * 1.4142135623730951 * 0.043593198825375247)) + ((u[3] *
      1.4142135623730951 * -0.043976565543532631 - proc_control_node_B.xk_tmp_p *
      0.0040409200239048832) - proc_control_node_B.xk_tmp_k * 1.71018810547529))
                       + ((proc_control_node_B.xk * 0.021882274381510681 -
      proc_control_node_B.xk_f * 0.002272431716587712) -
                          proc_control_node_B.xk_n * 0.0080268590155159435)) +
                      ((proc_control_node_B.xk_g * 0.0039859244840414 +
                        proc_control_node_B.xk_d * 0.0080268590155159435) -
                       proc_control_node_B.xk_c * 0.678350505826831)) +
                     ((proc_control_node_B.xk_tmp_l * -0.002272431716587712 +
                       proc_control_node_B.xk_tmp_b * 0.0001303522588356414) -
                      proc_control_node_B.xk_tmp_c * 0.0039859244840414)) +
                    ((proc_control_node_B.xk_tmp_f * -1.71018810547529 +
                      proc_control_node_B.xk_tmp_o * 0.0039859244840414) +
                     proc_control_node_B.xk_tmp_d * 0.070445383214219059)) +
                   ((proc_control_node_B.xk_tmp_ld * 0.021882274381510681 +
                     proc_control_node_B.xk_tmp_ls * 0.0001303522588356414) +
                    proc_control_node_B.xk_tmp_dr * 0.0080268590155159435)) +
                  ((proc_control_node_B.xk_tmp_ku * 1.71018810547529 +
                    proc_control_node_B.xk_tmp * 0.01218289469126858) -
                   proc_control_node_B.xk_tmp_g * 0.095020813300146653)) +
                 ((proc_control_node_B.xk_tmp_fo * 16.7769453147126 -
                   proc_control_node_B.xk_tmp_p3 * 0.0001303522588356414) +
                  proc_control_node_B.t53_k * 53.015831269733987)) +
                ((proc_control_node_B.t63 * 0.0039859244840414 +
                  proc_control_node_B.t50_b * 0.0080268590155159435) - xk_tmp *
                 0.021882274381510681)) + ((proc_control_node_B.t24_f *
      -0.2488326294809943 + proc_control_node_B.t46 * 0.0039859244840414) -
                proc_control_node_B.t62_b * 1.71018810547529)) + ((xk_tmp_0 *
                0.002272431716587712 - proc_control_node_B.t20_a *
                0.1235636590052834) + proc_control_node_B.t26_g *
               0.0080268590155159435)) + proc_control_node_B.t49 *
             -1.71018810547529) * 0.01 + proc_control_node_B.xk_b;
    xk[10] = (((((((((((((((((u[0] * 5.24748238233168E-7 - u[1] *
      1.083514276897426E-19) + u[2] * -5.3156315041823265E-7) + (u[3] *
      -5.2929151302328333E-7 + u[4] * 0.10593667623599359)) + (u[5] *
      0.10537885436940329 - u[6] * 0.10793139553633729)) + ((u[7] *
      -0.1033841350690595 + x[18]) - proc_control_node_B.t13_p *
      4.3185698628399987)) + ((u[0] * 1.4142135623730951 * 0.013457654526727991
      + u[1] * 1.4142135623730951 * 0.013869054980635681) + u[2] *
      1.4142135623730951 * 0.013457654526727991)) + ((u[3] * 1.4142135623730951 *
      0.01386868232130781 + proc_control_node_B.xk_tmp_p * 0.311032764122789) +
      proc_control_node_B.xk_tmp_k * 0.0080268590155159435)) +
                       (((proc_control_node_B.xk * -0.0001026911824132076 +
                          proc_control_node_B.xk_f * 0.00039756137245743289) +
                         proc_control_node_B.xk_n * 0.58374455968341665) +
                        proc_control_node_B.xk_g * 1.606290206365557E-6)) +
                      ((proc_control_node_B.xk_d * -0.58374455968341665 +
                        proc_control_node_B.xk_c * 0.0031834266548094372) +
                       proc_control_node_B.xk_tmp_l * 0.00039756137245743289)) +
                     (((proc_control_node_B.xk_tmp_b * -0.010033314971702871 -
                        proc_control_node_B.xk_tmp_c * 1.606290206365557E-6) +
                       proc_control_node_B.xk_tmp_f * 0.0080268590155159435) +
                      proc_control_node_B.xk_tmp_o * 1.606290206365557E-6)) +
                    ((proc_control_node_B.xk_tmp_d * -0.01232440254618042 -
                      proc_control_node_B.xk_tmp_ld * 0.0001026911824132076) -
                     proc_control_node_B.xk_tmp_ls * 0.010033314971702871)) +
                   ((proc_control_node_B.xk_tmp_dr * -0.58374455968341665 -
                     proc_control_node_B.xk_tmp_ku * 0.0080268590155159435) -
                    proc_control_node_B.xk_tmp * 0.17922689172220771)) +
                  ((proc_control_node_B.xk_tmp_g * 0.000439745529355291 -
                    proc_control_node_B.xk_tmp_fo * 0.078743486942211408) +
                   proc_control_node_B.xk_tmp_p3 * 0.010033314971702871)) +
                 ((proc_control_node_B.t53_k * -0.2488326294809943 +
                   proc_control_node_B.t63 * 1.606290206365557E-6) -
                  proc_control_node_B.t50_b * 0.58374455968341665)) + (((xk_tmp *
      0.0001026911824132076 + proc_control_node_B.t24_f * 18.096081350185919) +
      proc_control_node_B.t46 * 1.606290206365557E-6) +
      proc_control_node_B.t62_b * 0.0080268590155159435)) + ((xk_tmp_0 *
      -0.00039756137245743289 - proc_control_node_B.t20_a *
      4.9794996397332282E-5) - proc_control_node_B.t26_g * 0.58374455968341665))
              + proc_control_node_B.t49 * 0.0080268590155159435) * 0.01 +
      proc_control_node_B.xk_p;
    xk[11] = ((((((((((((((((u[0] * -0.1731941163298826 + u[1] *
      -1.4397960202092559E-21) + u[2] * 0.175443390567933) + (u[3] *
      0.17469363248858291 + u[4] * 0.00062021813460420567)) + (u[5] *
      -0.0006207996116589 - u[6] * 0.00064672437426625525)) + ((u[7] *
      0.00064730585132094889 + x[19]) + proc_control_node_B.t13_p *
      0.32680566187003413)) + ((u[0] * 1.4142135623730951 *
      0.00059255494878017434 - u[1] * 1.4142135623730951 * 0.1225770464045467) +
      u[2] * 1.4142135623730951 * 0.00059255494878017434)) + ((u[3] *
      1.4142135623730951 * 0.00041984673608298361 - proc_control_node_B.xk_tmp_p
      * 0.031387639110527318) + proc_control_node_B.xk_tmp_k *
      0.0039859244840414)) + (((proc_control_node_B.xk * -0.00042780737967584029
      + proc_control_node_B.xk_f * 5.2828771531483014E-6) -
      proc_control_node_B.xk_n * 1.606290206365557E-6) -
      proc_control_node_B.xk_g * 0.53015902215788635)) +
                     (((proc_control_node_B.xk_d * 1.606290206365557E-6 +
                        proc_control_node_B.xk_c * 0.013262028769951049) +
                       proc_control_node_B.xk_tmp_l * 5.2828771531483014E-6) +
                      proc_control_node_B.xk_tmp_b * 0.0010125044874363649)) +
                    ((proc_control_node_B.xk_tmp_c * 0.53015902215788635 +
                      proc_control_node_B.xk_tmp_f * 0.0039859244840414) -
                     proc_control_node_B.xk_tmp_o * 0.53015902215788635)) +
                   (((proc_control_node_B.xk_tmp_d * -0.00016376919174759729 -
                      proc_control_node_B.xk_tmp_ld * 0.00042780737967584029) +
                     proc_control_node_B.xk_tmp_ls * 0.0010125044874363649) +
                    proc_control_node_B.xk_tmp_dr * 1.606290206365557E-6)) +
                  ((proc_control_node_B.xk_tmp_ku * -0.0039859244840414 -
                    proc_control_node_B.xk_tmp * 2.2159046954574339E-5) +
                   proc_control_node_B.xk_tmp_g * 0.16306065763088379)) +
                 ((proc_control_node_B.xk_tmp_fo * -0.03910191918844614 -
                   proc_control_node_B.xk_tmp_p3 * 0.0010125044874363649) -
                  proc_control_node_B.t53_k * 0.1235636590052834)) +
                (((proc_control_node_B.t63 * -0.53015902215788635 +
                   proc_control_node_B.t50_b * 1.606290206365557E-6) + xk_tmp *
                  0.00042780737967584029) - proc_control_node_B.t24_f *
                 4.9794996397332282E-5)) + ((proc_control_node_B.t46 *
      -0.53015902215788635 + proc_control_node_B.t62_b * 0.0039859244840414) -
                xk_tmp_0 * 5.2828771531483014E-6)) + ((proc_control_node_B.t20_a
                * 16.434929686894481 + proc_control_node_B.t26_g *
                1.606290206365557E-6) + proc_control_node_B.t49 *
               0.0039859244840414)) * 0.01 + proc_control_node_B.xk_k;
    xk[12] = x[12] * 0.01 + proc_control_node_B.xk_cl;
    xk[13] = x[13] * 0.01 + proc_control_node_B.xk_n2;
    xk[14] = x[14] * 0.01 + proc_control_node_B.xk_nm;
    xk[15] = x[15] * 0.01 + proc_control_node_B.xk_cd;
    xk[16] = x[16] * 0.01 + proc_control_node_B.xk_dkf;
    xk[17] = x[17] * 0.01 + proc_control_node_B.xk_nq;
    xk[18] = x[18] * 0.01 + proc_control_node_B.xk_gu;
    xk[19] = x[19] * 0.01 + proc_control_node_B.xk_l;
  }
}

// Function for MATLAB Function: '<S181>/Predict'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_pa(int32_T n, const
  real_T x[800], int32_T ix0)
{
  real_T absxk;
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_j = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        absxk = fabs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_j) {
          t = proc_control_node_B.scale_j / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_j = absxk;
        } else {
          t = absxk / proc_control_node_B.scale_j;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_j * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S181>/Predict'
void proc_control_nodeModelClass::proc_control_node_xgemv_d(int32_T m, int32_T n,
  const real_T A[800], int32_T ia0, const real_T x[800], int32_T ix0, real_T y
  [20])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 40 + ia0;
    for (iac = ia0; iac <= b; iac += 40) {
      ix = ix0;
      proc_control_node_B.c_d = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_d += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_d;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S181>/Predict'
void proc_control_nodeModelClass::proc_control_node_xgerc_b(int32_T m, int32_T n,
  real_T alpha1, int32_T ix0, const real_T y[20], real_T A[800], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jA;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    jA = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_b = y[jy] * alpha1;
        ix = ix0;
        b = m + jA;
        for (ijA = jA; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_b;
          ix++;
        }
      }

      jy++;
      jA += 40;
    }
  }
}

// Function for MATLAB Function: '<S181>/Predict'
void proc_control_nodeModelClass::proc_control_node_xzlarf_j(int32_T m, int32_T
  n, int32_T iv0, real_T tau, real_T C[800], int32_T ic0, real_T work[20])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_i = m;
    proc_control_node_B.lastc_h = iv0 + m;
    while ((proc_control_node_B.lastv_i > 0) && (C[proc_control_node_B.lastc_h -
            2] == 0.0)) {
      proc_control_node_B.lastv_i--;
      proc_control_node_B.lastc_h--;
    }

    proc_control_node_B.lastc_h = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_h > 0)) {
      proc_control_node_B.coltop_mg = (proc_control_node_B.lastc_h - 1) * 40 +
        ic0;
      proc_control_node_B.ia_a = proc_control_node_B.coltop_mg;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_a <= (proc_control_node_B.coltop_mg +
             proc_control_node_B.lastv_i) - 1) {
          if (C[proc_control_node_B.ia_a - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_a++;
          }
        } else {
          proc_control_node_B.lastc_h--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_i = 0;
    proc_control_node_B.lastc_h = 0;
  }

  if (proc_control_node_B.lastv_i > 0) {
    proc_control_node_xgemv_d(proc_control_node_B.lastv_i,
      proc_control_node_B.lastc_h, C, ic0, C, iv0, work);
    proc_control_node_xgerc_b(proc_control_node_B.lastv_i,
      proc_control_node_B.lastc_h, -tau, iv0, work, C, ic0);
  }
}

// Function for MATLAB Function: '<S181>/Predict'
void proc_control_nodeModelClass::proc_control_node_qrf_p(real_T A[800], int32_T
  ia0, int32_T m, int32_T n, int32_T nfxd, real_T tau[20])
{
  memset(&proc_control_node_B.work_f[0], 0, 20U * sizeof(real_T));
  proc_control_node_B.i_iw = 0;
  while (proc_control_node_B.i_iw <= nfxd - 1) {
    proc_control_node_B.ii_im = ((proc_control_node_B.i_iw * 40 + ia0) +
      proc_control_node_B.i_iw) - 1;
    proc_control_node_B.mmi_tmp_e = m - proc_control_node_B.i_iw;
    if (proc_control_node_B.i_iw + 1 < m) {
      proc_control_node_B.b_atmp_n = A[proc_control_node_B.ii_im];
      tau[proc_control_node_B.i_iw] = 0.0;
      if (proc_control_node_B.mmi_tmp_e > 0) {
        proc_control_node_B.beta1_bi = proc_control_node_xnrm2_pa
          (proc_control_node_B.mmi_tmp_e - 1, A, proc_control_node_B.ii_im + 2);
        if (proc_control_node_B.beta1_bi != 0.0) {
          proc_control_node_B.beta1_bi = proc_control_node_rt_hypotd_snf
            (A[proc_control_node_B.ii_im], proc_control_node_B.beta1_bi);
          if (A[proc_control_node_B.ii_im] >= 0.0) {
            proc_control_node_B.beta1_bi = -proc_control_node_B.beta1_bi;
          }

          if (fabs(proc_control_node_B.beta1_bi) < 1.0020841800044864E-292) {
            proc_control_node_B.knt_j = -1;
            proc_control_node_B.mmip1_m = proc_control_node_B.ii_im +
              proc_control_node_B.mmi_tmp_e;
            do {
              proc_control_node_B.knt_j++;
              proc_control_node_B.b_k_ap = proc_control_node_B.ii_im + 1;
              while (proc_control_node_B.b_k_ap + 1 <=
                     proc_control_node_B.mmip1_m) {
                A[proc_control_node_B.b_k_ap] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_ap++;
              }

              proc_control_node_B.beta1_bi *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp_n *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1_bi) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1_bi = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp_n, proc_control_node_xnrm2_pa
               (proc_control_node_B.mmi_tmp_e - 1, A, proc_control_node_B.ii_im
                + 2));
            if (proc_control_node_B.b_atmp_n >= 0.0) {
              proc_control_node_B.beta1_bi = -proc_control_node_B.beta1_bi;
            }

            tau[proc_control_node_B.i_iw] = (proc_control_node_B.beta1_bi -
              proc_control_node_B.b_atmp_n) / proc_control_node_B.beta1_bi;
            proc_control_node_B.b_atmp_n = 1.0 / (proc_control_node_B.b_atmp_n -
              proc_control_node_B.beta1_bi);
            proc_control_node_B.b_k_ap = proc_control_node_B.ii_im + 1;
            while (proc_control_node_B.b_k_ap + 1 <= proc_control_node_B.mmip1_m)
            {
              A[proc_control_node_B.b_k_ap] *= proc_control_node_B.b_atmp_n;
              proc_control_node_B.b_k_ap++;
            }

            proc_control_node_B.mmip1_m = 0;
            while (proc_control_node_B.mmip1_m <= proc_control_node_B.knt_j) {
              proc_control_node_B.beta1_bi *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1_m++;
            }

            proc_control_node_B.b_atmp_n = proc_control_node_B.beta1_bi;
          } else {
            tau[proc_control_node_B.i_iw] = (proc_control_node_B.beta1_bi -
              A[proc_control_node_B.ii_im]) / proc_control_node_B.beta1_bi;
            proc_control_node_B.b_atmp_n = 1.0 / (A[proc_control_node_B.ii_im] -
              proc_control_node_B.beta1_bi);
            proc_control_node_B.knt_j = proc_control_node_B.ii_im +
              proc_control_node_B.mmi_tmp_e;
            proc_control_node_B.mmip1_m = proc_control_node_B.ii_im + 1;
            while (proc_control_node_B.mmip1_m + 1 <= proc_control_node_B.knt_j)
            {
              A[proc_control_node_B.mmip1_m] *= proc_control_node_B.b_atmp_n;
              proc_control_node_B.mmip1_m++;
            }

            proc_control_node_B.b_atmp_n = proc_control_node_B.beta1_bi;
          }
        }
      }

      A[proc_control_node_B.ii_im] = proc_control_node_B.b_atmp_n;
    } else {
      tau[proc_control_node_B.i_iw] = 0.0;
    }

    if (proc_control_node_B.i_iw + 1 < n) {
      proc_control_node_B.b_atmp_n = A[proc_control_node_B.ii_im];
      A[proc_control_node_B.ii_im] = 1.0;
      proc_control_node_xzlarf_j(proc_control_node_B.mmi_tmp_e, (n -
        proc_control_node_B.i_iw) - 1, proc_control_node_B.ii_im + 1,
        tau[proc_control_node_B.i_iw], A, proc_control_node_B.ii_im + 41,
        proc_control_node_B.work_f);
      A[proc_control_node_B.ii_im] = proc_control_node_B.b_atmp_n;
    }

    proc_control_node_B.i_iw++;
  }
}

// Function for MATLAB Function: '<S181>/Predict'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_c(real_T A[800],
  real_T tau[20])
{
  memset(&tau[0], 0, 20U * sizeof(real_T));
  proc_control_node_qrf_p(A, 1, 40, 20, 20, tau);
}

// Function for MATLAB Function: '<S181>/Predict'
void proc_control_nodeModelClass::proc_control_node_xorgqr_k(int32_T m, int32_T
  n, int32_T k, real_T A[800], int32_T ia0, const real_T tau[20], int32_T itau0)
{
  if (n >= 1) {
    proc_control_node_B.itau_br = k;
    while (proc_control_node_B.itau_br <= n - 1) {
      proc_control_node_B.i_b5 = (proc_control_node_B.itau_br * 40 + ia0) - 1;
      proc_control_node_B.iaii_k = 0;
      while (proc_control_node_B.iaii_k <= m - 1) {
        A[proc_control_node_B.i_b5 + proc_control_node_B.iaii_k] = 0.0;
        proc_control_node_B.iaii_k++;
      }

      A[proc_control_node_B.i_b5 + proc_control_node_B.itau_br] = 1.0;
      proc_control_node_B.itau_br++;
    }

    proc_control_node_B.itau_br = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_j[0], 0, 20U * sizeof(real_T));
    proc_control_node_B.i_b5 = k;
    while (proc_control_node_B.i_b5 >= 1) {
      proc_control_node_B.iaii_k = (((proc_control_node_B.i_b5 - 1) * 40 + ia0)
        + proc_control_node_B.i_b5) - 1;
      if (proc_control_node_B.i_b5 < n) {
        A[proc_control_node_B.iaii_k - 1] = 1.0;
        proc_control_node_xzlarf_j((m - proc_control_node_B.i_b5) + 1, n -
          proc_control_node_B.i_b5, proc_control_node_B.iaii_k,
          tau[proc_control_node_B.itau_br], A, proc_control_node_B.iaii_k + 40,
          proc_control_node_B.work_j);
      }

      if (proc_control_node_B.i_b5 < m) {
        proc_control_node_B.b_m = (proc_control_node_B.iaii_k + m) -
          proc_control_node_B.i_b5;
        proc_control_node_B.b_k_g = proc_control_node_B.iaii_k;
        while (proc_control_node_B.b_k_g + 1 <= proc_control_node_B.b_m) {
          A[proc_control_node_B.b_k_g] *= -tau[proc_control_node_B.itau_br];
          proc_control_node_B.b_k_g++;
        }
      }

      A[proc_control_node_B.iaii_k - 1] = 1.0 - tau[proc_control_node_B.itau_br];
      proc_control_node_B.b_m = 0;
      while (proc_control_node_B.b_m <= proc_control_node_B.i_b5 - 2) {
        A[(proc_control_node_B.iaii_k - proc_control_node_B.b_m) - 2] = 0.0;
        proc_control_node_B.b_m++;
      }

      proc_control_node_B.itau_br--;
      proc_control_node_B.i_b5--;
    }
  }
}

// Function for MATLAB Function: '<S181>/Predict'
void proc_control_nodeModelClass::proc_control_node_qr_o(const real_T A[800],
  real_T Q[800], real_T R[400])
{
  memcpy(&proc_control_node_B.b_A_n[0], &A[0], 800U * sizeof(real_T));
  proc_control_node_xgeqrf_c(proc_control_node_B.b_A_n,
    proc_control_node_B.tau_i);
  for (proc_control_node_B.j_ij = 0; proc_control_node_B.j_ij < 20;
       proc_control_node_B.j_ij++) {
    proc_control_node_B.i_km = 0;
    while (proc_control_node_B.i_km <= proc_control_node_B.j_ij) {
      R[proc_control_node_B.i_km + 20 * proc_control_node_B.j_ij] =
        proc_control_node_B.b_A_n[40 * proc_control_node_B.j_ij +
        proc_control_node_B.i_km];
      proc_control_node_B.i_km++;
    }

    proc_control_node_B.i_km = proc_control_node_B.j_ij + 1;
    while (proc_control_node_B.i_km + 1 < 21) {
      R[proc_control_node_B.i_km + 20 * proc_control_node_B.j_ij] = 0.0;
      proc_control_node_B.i_km++;
    }
  }

  proc_control_node_xorgqr_k(40, 20, 20, proc_control_node_B.b_A_n, 1,
    proc_control_node_B.tau_i, 1);
  proc_control_node_B.i_km = 0;
  for (proc_control_node_B.j_ij = 0; proc_control_node_B.j_ij < 20;
       proc_control_node_B.j_ij++) {
    memcpy(&Q[proc_control_node_B.i_km],
           &proc_control_node_B.b_A_n[proc_control_node_B.i_km], 40U * sizeof
           (real_T));
    proc_control_node_B.i_km += 40;
  }
}

// Function for MATLAB Function: '<S181>/Predict'
void proc_control_nodeModelClass::proc_control_node_qrFactor_f(const real_T A
  [400], real_T S[400], const real_T Ns[400])
{
  for (proc_control_node_B.j_ne = 0; proc_control_node_B.j_ne < 20;
       proc_control_node_B.j_ne++) {
    proc_control_node_B.coffset_e = proc_control_node_B.j_ne * 20;
    memset(&proc_control_node_B.y_o2[proc_control_node_B.coffset_e], 0, 20U *
           sizeof(real_T));
    for (proc_control_node_B.i_dz = 0; proc_control_node_B.i_dz < 20;
         proc_control_node_B.i_dz++) {
      proc_control_node_B.bkj_i = A[proc_control_node_B.i_dz * 20 +
        proc_control_node_B.j_ne];
      for (proc_control_node_B.b_i_m = 0; proc_control_node_B.b_i_m < 20;
           proc_control_node_B.b_i_m++) {
        proc_control_node_B.y_tmp_gm = proc_control_node_B.coffset_e +
          proc_control_node_B.b_i_m;
        proc_control_node_B.y_o2[proc_control_node_B.y_tmp_gm] +=
          S[proc_control_node_B.b_i_m * 20 + proc_control_node_B.i_dz] *
          proc_control_node_B.bkj_i;
      }
    }
  }

  proc_control_node_B.i42 = 0;
  proc_control_node_B.j_ne = 0;
  for (proc_control_node_B.i_dz = 0; proc_control_node_B.i_dz < 20;
       proc_control_node_B.i_dz++) {
    proc_control_node_B.b_i_m = 0;
    for (proc_control_node_B.coffset_e = 0; proc_control_node_B.coffset_e < 20;
         proc_control_node_B.coffset_e++) {
      proc_control_node_B.y_tmp_gm = proc_control_node_B.coffset_e +
        proc_control_node_B.i42;
      proc_control_node_B.y_o[proc_control_node_B.y_tmp_gm] =
        proc_control_node_B.y_o2[proc_control_node_B.coffset_e +
        proc_control_node_B.j_ne];
      proc_control_node_B.y_o[proc_control_node_B.y_tmp_gm + 20] =
        Ns[proc_control_node_B.b_i_m + proc_control_node_B.i_dz];
      proc_control_node_B.b_i_m += 20;
    }

    proc_control_node_B.i42 += 40;
    proc_control_node_B.j_ne += 20;
  }

  proc_control_node_qr_o(proc_control_node_B.y_o, proc_control_node_B.a__1_i,
    proc_control_node_B.y_o2);
  proc_control_node_B.i42 = 0;
  for (proc_control_node_B.j_ne = 0; proc_control_node_B.j_ne < 20;
       proc_control_node_B.j_ne++) {
    proc_control_node_B.i_dz = 0;
    for (proc_control_node_B.b_i_m = 0; proc_control_node_B.b_i_m < 20;
         proc_control_node_B.b_i_m++) {
      S[proc_control_node_B.b_i_m + proc_control_node_B.i42] =
        proc_control_node_B.y_o2[proc_control_node_B.i_dz +
        proc_control_node_B.j_ne];
      proc_control_node_B.i_dz += 20;
    }

    proc_control_node_B.i42 += 20;
  }
}

// Function for MATLAB Function: '<S130>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_nod_AUVEulerSimFcn(const real_T
  in1[12], const real_T in2[8], real_T out1[12])
{
  real_T out1_tmp;
  real_T out1_tmp_0;
  real_T out1_tmp_1;
  proc_control_node_B.t5_i = cos(in1[3]);
  proc_control_node_B.t6_p = cos(in1[5]);
  proc_control_node_B.t9_l = cos(in1[4]);
  proc_control_node_B.t11_ea = sin(in1[3]);
  proc_control_node_B.t12_e = sin(in1[5]);
  proc_control_node_B.t13_pn = sin(in1[4]);
  proc_control_node_B.t20_j = in1[10] / 500.0;
  proc_control_node_B.t24_gy = in1[9] / 1000.0;
  proc_control_node_B.t26_l = in1[11] * 0.018;
  proc_control_node_B.t46_j = in1[6] * 32.4648;
  proc_control_node_B.t49_p = in1[7] * 43.6156;
  proc_control_node_B.t50_d = in1[8] * 46.7695;
  proc_control_node_B.t14_kh = 1.0 / proc_control_node_B.t9_l;
  proc_control_node_B.t53_m = proc_control_node_B.t20_j +
    proc_control_node_B.t26_l;
  proc_control_node_B.t20_j += proc_control_node_B.t24_gy;
  proc_control_node_B.t24_gy += proc_control_node_B.t26_l;
  proc_control_node_B.t26_l = in1[10] * 0.558 + proc_control_node_B.t46_j;
  proc_control_node_B.t62_f = in1[9] * 0.062 + proc_control_node_B.t50_d;
  proc_control_node_B.t63_m = in1[11] * 0.031 + proc_control_node_B.t49_p;
  proc_control_node_B.t66_n = (in1[10] / 125.0 + in1[11] / 250.0) + in1[9] *
    0.592;
  proc_control_node_B.t46_j = in1[11] * 0.062 + -proc_control_node_B.t46_j;
  proc_control_node_B.t49_p = in1[9] * 0.558 + -proc_control_node_B.t49_p;
  proc_control_node_B.t50_d = in1[10] * 0.031 + -proc_control_node_B.t50_d;
  proc_control_node_B.t68_mi = (in1[9] / 250.0 + -(in1[10] / 1000.0)) + in1[11] *
    1.8864;
  proc_control_node_B.t69_b = (in1[9] / 125.0 + -(in1[11] / 1000.0)) + in1[10] *
    1.7228;
  proc_control_node_B.out1_tmp_cc = proc_control_node_B.t11_ea *
    proc_control_node_B.t12_e;
  proc_control_node_B.out1_tmp_g = proc_control_node_B.t5_i *
    proc_control_node_B.t6_p;
  proc_control_node_B.out1_tmp_ck = proc_control_node_B.t5_i *
    proc_control_node_B.t12_e;
  proc_control_node_B.out1_tmp_izb = proc_control_node_B.t6_p *
    proc_control_node_B.t11_ea;
  out1[0] = ((proc_control_node_B.out1_tmp_ck - proc_control_node_B.out1_tmp_izb
              * proc_control_node_B.t13_pn) * -in1[7] +
             (proc_control_node_B.out1_tmp_g * proc_control_node_B.t13_pn +
              proc_control_node_B.out1_tmp_cc) * in1[8]) +
    proc_control_node_B.t6_p * proc_control_node_B.t9_l * in1[6];
  out1[1] = ((proc_control_node_B.out1_tmp_cc * proc_control_node_B.t13_pn +
              proc_control_node_B.out1_tmp_g) * in1[7] -
             (proc_control_node_B.out1_tmp_izb - proc_control_node_B.out1_tmp_ck
              * proc_control_node_B.t13_pn) * in1[8]) + proc_control_node_B.t9_l
    * proc_control_node_B.t12_e * in1[6];
  proc_control_node_B.out1_tmp_cc = proc_control_node_B.t5_i *
    proc_control_node_B.t9_l;
  proc_control_node_B.out1_tmp_g = proc_control_node_B.t9_l *
    proc_control_node_B.t11_ea;
  out1[2] = (proc_control_node_B.out1_tmp_g * in1[7] +
             -proc_control_node_B.t13_pn * in1[6]) +
    proc_control_node_B.out1_tmp_cc * in1[8];
  proc_control_node_B.out1_tmp_ck = in1[10] * proc_control_node_B.t11_ea;
  proc_control_node_B.out1_tmp_izb = in1[11] * proc_control_node_B.t5_i;
  out1[3] = (proc_control_node_B.out1_tmp_ck * proc_control_node_B.t13_pn *
             proc_control_node_B.t14_kh + in1[9]) +
    proc_control_node_B.out1_tmp_izb * proc_control_node_B.t13_pn *
    proc_control_node_B.t14_kh;
  out1[4] = in1[10] * proc_control_node_B.t5_i - in1[11] *
    proc_control_node_B.t11_ea;
  out1[5] = proc_control_node_B.out1_tmp_ck * proc_control_node_B.t14_kh +
    proc_control_node_B.out1_tmp_izb * proc_control_node_B.t14_kh;
  proc_control_node_B.out1_tmp_ck = in1[9] * proc_control_node_B.t53_m;
  proc_control_node_B.out1_tmp_izb = in1[9] * (fabs(in1[9]) * 0.167 +
    3.3333333333333335);
  proc_control_node_B.t6_p = in1[9] * proc_control_node_B.t62_f;
  proc_control_node_B.t12_e = in1[9] * proc_control_node_B.t49_p;
  proc_control_node_B.t14_kh = in1[9] * proc_control_node_B.t68_mi;
  proc_control_node_B.out1_tmp_kv = in1[9] * proc_control_node_B.t69_b;
  proc_control_node_B.out1_tmp_go = in1[10] * (fabs(in1[10]) / 10.0 +
    2.3333333333333335);
  proc_control_node_B.out1_tmp_pd = in1[10] * proc_control_node_B.t24_gy;
  proc_control_node_B.out1_tmp_f = in1[10] * proc_control_node_B.t26_l;
  proc_control_node_B.out1_tmp_mo = in1[10] * proc_control_node_B.t50_d;
  proc_control_node_B.out1_tmp_my = in1[10] * proc_control_node_B.t66_n;
  proc_control_node_B.t68_mi *= in1[10];
  proc_control_node_B.out1_tmp_lb = in1[11] * (fabs(in1[11]) * 0.102 + 5.0);
  proc_control_node_B.out1_tmp_jo = in1[11] * proc_control_node_B.t20_j;
  out1_tmp = in1[11] * proc_control_node_B.t46_j;
  out1_tmp_0 = in1[11] * proc_control_node_B.t63_m;
  proc_control_node_B.t66_n *= in1[11];
  proc_control_node_B.t69_b *= in1[11];
  proc_control_node_B.t5_i = proc_control_node_B.t9_l *
    (proc_control_node_B.t5_i * 0.062 + -(proc_control_node_B.t11_ea * 0.746622));
  proc_control_node_B.t9_l = (fabs(in1[6]) * 1.17 + 15.0) * in1[6];
  proc_control_node_B.t53_m *= in1[6];
  proc_control_node_B.t63_m *= in1[6];
  proc_control_node_B.t50_d *= in1[6];
  proc_control_node_B.t11_ea = (fabs(in1[7]) * 0.82 + 20.0) * in1[7];
  proc_control_node_B.t24_gy *= in1[7];
  proc_control_node_B.t46_j *= in1[7];
  proc_control_node_B.t62_f *= in1[7];
  out1_tmp_1 = (fabs(in1[8]) * 0.756 + 23.333333333333332) * in1[8];
  proc_control_node_B.t20_j *= in1[8];
  proc_control_node_B.t26_l *= in1[8];
  proc_control_node_B.t49_p *= in1[8];
  out1[6] = ((((((((((((((in2[0] * -0.00033076834054020519 + in2[1] *
    1.8595780444550231E-21) + in2[2] * 0.00033506403327449372) + (in2[3] *
    0.00033363213569639753 - in2[4] * 0.001819638864719295)) + (in2[5] *
    -0.0018124211550371481 + in2[6] * 0.0018538731733468781)) + (in2[7] *
    0.001778186846409557 + proc_control_node_B.t13_pn * 0.20690082595613279)) +
                     (((in2[0] * 1.4142135623730951 * 0.015171119710606879 +
                        in2[1] * 1.4142135623730951 * 0.014928824155507611) +
                       in2[2] * 1.4142135623730951 * 0.015171119710606879) +
                      in2[3] * 1.4142135623730951 * 0.01516372519659284)) +
                    (((proc_control_node_B.out1_tmp_ck * -0.96028628902704993 -
                       proc_control_node_B.out1_tmp_izb * 0.0001303522588356414)
                      + proc_control_node_B.t6_p * 9.4803055144857715E-7) -
                     proc_control_node_B.t12_e * 6.8231348244175949E-6)) +
                   (((proc_control_node_B.t14_kh * -0.010033314971702871 -
                      proc_control_node_B.out1_tmp_kv * 0.0010125044874363649) +
                     proc_control_node_B.out1_tmp_go * 0.010033314971702871) -
                    proc_control_node_B.out1_tmp_pd * 2.9388947094905889E-5)) +
                  (((proc_control_node_B.out1_tmp_f * -6.8231348244175949E-6 +
                     proc_control_node_B.out1_tmp_mo * 0.030976977065388711) +
                    proc_control_node_B.out1_tmp_my * 0.0010125044874363649) -
                   proc_control_node_B.t68_mi * 0.0001303522588356414)) +
                 (((proc_control_node_B.out1_tmp_lb * -0.0010125044874363649 +
                    proc_control_node_B.out1_tmp_jo * 0.0002115171795569455) +
                   out1_tmp * 9.4803055144857715E-7) + out1_tmp_0 *
                  0.030976977065388711)) + ((proc_control_node_B.t66_n *
    0.010033314971702871 + proc_control_node_B.t69_b * 0.0001303522588356414) +
    proc_control_node_B.out1_tmp_cc * 0.0030804819903427929)) +
               ((proc_control_node_B.out1_tmp_g * 0.0003038485611411295 +
                 proc_control_node_B.t5_i * 0.0012787556591776421) -
                proc_control_node_B.t9_l * 0.030976977065388711)) +
              (((proc_control_node_B.t53_m * 0.0040409200239048832 -
                 proc_control_node_B.t63_m * 0.0010125044874363649) +
                proc_control_node_B.t50_d * 0.010033314971702871) -
               proc_control_node_B.t11_ea * 9.4803055144857715E-7)) +
             (((proc_control_node_B.t24_gy * -0.311032764122789 -
                proc_control_node_B.t46_j * 0.0010125044874363649) -
               proc_control_node_B.t62_f * 0.0001303522588356414) + out1_tmp_1 *
              6.8231348244175949E-6)) + ((proc_control_node_B.t20_j *
    0.031387639110527318 + proc_control_node_B.t26_l * 0.010033314971702871) -
    proc_control_node_B.t49_p * 0.0001303522588356414);
  out1[7] = (((((((((((((((in2[0] * 0.00013975754063522079 + in2[1] *
    7.9244610288113972E-21) + in2[2] * -0.00014157257363048341) + (in2[3] *
    -0.0001409675626320625 - in2[4] * 0.0034249251816346319)) + (in2[5] *
    0.003387750973601051 + in2[6] * 0.0035708122797193441)) + (in2[7] *
    -0.0035336380716857632 + proc_control_node_B.t13_pn * 0.00049601054978465754))
                      + ((in2[0] * 1.4142135623730951 * -0.01090649593858282 +
    in2[1] * 1.4142135623730951 * 0.011000123045544621) - in2[2] *
    1.4142135623730951 * 0.01090649593858282)) + ((in2[3] * 1.4142135623730951 *
    0.01090087173345982 - proc_control_node_B.out1_tmp_ck *
    2.9388947094905889E-5) - proc_control_node_B.out1_tmp_izb *
    0.021882274381510681)) + (((proc_control_node_B.t6_p * 0.02320783323245932 -
    proc_control_node_B.t12_e * 2.9076309096921531E-5) -
    proc_control_node_B.t14_kh * 0.0001026911824132076) +
    proc_control_node_B.out1_tmp_kv * 0.00042780737967584029)) +
                   (((proc_control_node_B.out1_tmp_go * 0.0001026911824132076 -
                      proc_control_node_B.out1_tmp_pd * 0.71944283020623911) -
                     proc_control_node_B.out1_tmp_f * 2.9076309096921531E-5) +
                    proc_control_node_B.out1_tmp_mo * 9.4803055144857715E-7)) +
                  (((proc_control_node_B.out1_tmp_my * -0.00042780737967584029 -
                     proc_control_node_B.t68_mi * 0.021882274381510681) +
                    proc_control_node_B.out1_tmp_lb * 0.00042780737967584029) +
                   proc_control_node_B.out1_tmp_jo * 0.00090136558200456737)) +
                 (((out1_tmp * 0.02320783323245932 + out1_tmp_0 *
                    9.4803055144857715E-7) + proc_control_node_B.t66_n *
                   0.0001026911824132076) + proc_control_node_B.t69_b *
                  0.021882274381510681)) + ((proc_control_node_B.out1_tmp_cc *
    0.0001558786802929103 - proc_control_node_B.out1_tmp_g * 0.09962138533478937)
    + proc_control_node_B.t5_i * 0.2146651116826197)) +
               (((proc_control_node_B.t9_l * -9.4803055144857715E-7 +
                  proc_control_node_B.t53_m * 0.678350505826831) +
                 proc_control_node_B.t63_m * 0.00042780737967584029) +
                proc_control_node_B.t50_d * 0.0001026911824132076)) +
              ((proc_control_node_B.t11_ea * -0.02320783323245932 -
                proc_control_node_B.t24_gy * 0.0031834266548094372) +
               proc_control_node_B.t46_j * 0.00042780737967584029)) +
             (((proc_control_node_B.t62_f * -0.021882274381510681 + out1_tmp_1 *
                2.9076309096921531E-5) - proc_control_node_B.t20_j *
               0.013262028769951049) + proc_control_node_B.t26_l *
              0.0001026911824132076)) + proc_control_node_B.t49_p *
    -0.021882274381510681;
  out1[8] = ((((((((((((((in2[0] * -1.725827915740819E-6 + in2[1] *
    -5.8281975682474322E-18) + in2[2] * 1.748241265284163E-6) + (in2[3] *
    1.740770148765829E-6 - in2[4] * 0.02095639900015615)) + (in2[5] *
    0.021100316216985739 - in2[6] * 0.021822949502860629)) + (in2[7] *
    0.02167903228603104 - proc_control_node_B.t13_pn * 0.0029379207602901669)) +
                     ((in2[0] * 1.4142135623730951 * -4.8869263875916949E-5 +
                       in2[1] * 1.4142135623730951 * 6.6264429389244648E-5) -
                      in2[2] * 1.4142135623730951 * 4.8869263875916949E-5)) +
                    (((in2[3] * 1.4142135623730951 * 6.7490056888775055E-5 +
                       proc_control_node_B.out1_tmp_ck * 0.0002115171795569455)
                      + proc_control_node_B.out1_tmp_izb * 0.002272431716587712)
                     - proc_control_node_B.t6_p * 2.9076309096921531E-5)) +
                   (((proc_control_node_B.t12_e * 0.021384731826702759 +
                      proc_control_node_B.t14_kh * 0.00039756137245743289) -
                     proc_control_node_B.out1_tmp_kv * 5.2828771531483014E-6) -
                    proc_control_node_B.out1_tmp_go * 0.00039756137245743289)) +
                  (((proc_control_node_B.out1_tmp_pd * 0.00090136558200456737 +
                     proc_control_node_B.out1_tmp_f * 0.021384731826702759) -
                    proc_control_node_B.out1_tmp_mo * 6.8231348244175949E-6) +
                   proc_control_node_B.out1_tmp_my * 5.2828771531483014E-6)) +
                 (((proc_control_node_B.t68_mi * 0.002272431716587712 -
                    proc_control_node_B.out1_tmp_lb * 5.2828771531483014E-6) -
                   proc_control_node_B.out1_tmp_jo * 0.66292668662778553) -
                  out1_tmp * 2.9076309096921531E-5)) + ((out1_tmp_0 *
    -6.8231348244175949E-6 - proc_control_node_B.t66_n * 0.00039756137245743289)
    - proc_control_node_B.t69_b * 0.002272431716587712)) +
               ((proc_control_node_B.out1_tmp_cc * -0.091796606188097957 +
                 proc_control_node_B.out1_tmp_g * 0.0001262558405802736) -
                proc_control_node_B.t5_i * 0.022292555139725449)) +
              (((proc_control_node_B.t9_l * 6.8231348244175949E-6 -
                 proc_control_node_B.t53_m * 0.070445383214219059) -
                proc_control_node_B.t63_m * 5.2828771531483014E-6) -
               proc_control_node_B.t50_d * 0.00039756137245743289)) +
             (((proc_control_node_B.t11_ea * 2.9076309096921531E-5 +
                proc_control_node_B.t24_gy * 0.01232440254618042) -
               proc_control_node_B.t46_j * 5.2828771531483014E-6) +
              proc_control_node_B.t62_f * 0.002272431716587712)) + (((out1_tmp_1
    * -0.021384731826702759 + proc_control_node_B.t20_j * 0.00016376919174759729)
    - proc_control_node_B.t26_l * 0.00039756137245743289) +
    proc_control_node_B.t49_p * 0.002272431716587712);
  out1[9] = (((((((((((((((((in2[0] * 0.0013021350951669831 + in2[1] *
    6.1932883292401409E-19) + in2[2] * -0.00131904594055876) + (in2[3] *
    -0.0013134089920948341 - in2[4] * 0.26767193546582568)) + (in2[5] *
    0.26476621250220889 + in2[6] * 0.2790736050389333)) + (in2[7] *
    -0.27616788207531651 + proc_control_node_B.t13_pn * 0.056926116941144737)) +
                        ((in2[0] * 1.4142135623730951 * 0.043593198825375247 -
    in2[1] * 1.4142135623730951 * 0.043051831063235027) + in2[2] *
    1.4142135623730951 * 0.043593198825375247)) + ((in2[3] * 1.4142135623730951 *
    -0.043976565543532631 - proc_control_node_B.out1_tmp_ck *
    0.0040409200239048832) - proc_control_node_B.out1_tmp_izb * 1.71018810547529))
                      + ((proc_control_node_B.t6_p * 0.021882274381510681 -
    proc_control_node_B.t12_e * 0.002272431716587712) -
    proc_control_node_B.t14_kh * 0.0080268590155159435)) +
                     ((proc_control_node_B.out1_tmp_kv * 0.0039859244840414 +
                       proc_control_node_B.out1_tmp_go * 0.0080268590155159435)
                      - proc_control_node_B.out1_tmp_pd * 0.678350505826831)) +
                    ((proc_control_node_B.out1_tmp_f * -0.002272431716587712 +
                      proc_control_node_B.out1_tmp_mo * 0.0001303522588356414) -
                     proc_control_node_B.out1_tmp_my * 0.0039859244840414)) +
                   ((proc_control_node_B.t68_mi * -1.71018810547529 +
                     proc_control_node_B.out1_tmp_lb * 0.0039859244840414) +
                    proc_control_node_B.out1_tmp_jo * 0.070445383214219059)) +
                  ((out1_tmp * 0.021882274381510681 + out1_tmp_0 *
                    0.0001303522588356414) + proc_control_node_B.t66_n *
                   0.0080268590155159435)) + ((proc_control_node_B.t69_b *
    1.71018810547529 + proc_control_node_B.out1_tmp_cc * 0.01218289469126858) -
    proc_control_node_B.out1_tmp_g * 0.095020813300146653)) +
                ((proc_control_node_B.t5_i * 16.7769453147126 -
                  proc_control_node_B.t9_l * 0.0001303522588356414) +
                 proc_control_node_B.t53_m * 53.015831269733987)) +
               ((proc_control_node_B.t63_m * 0.0039859244840414 +
                 proc_control_node_B.t50_d * 0.0080268590155159435) -
                proc_control_node_B.t11_ea * 0.021882274381510681)) +
              ((proc_control_node_B.t24_gy * -0.2488326294809943 +
                proc_control_node_B.t46_j * 0.0039859244840414) -
               proc_control_node_B.t62_f * 1.71018810547529)) + ((out1_tmp_1 *
    0.002272431716587712 - proc_control_node_B.t20_j * 0.1235636590052834) +
              proc_control_node_B.t26_l * 0.0080268590155159435)) +
    proc_control_node_B.t49_p * -1.71018810547529;
  out1[10] = ((((((((((((((((in2[0] * 5.24748238233168E-7 - in2[1] *
    1.083514276897426E-19) + in2[2] * -5.3156315041823265E-7) + (in2[3] *
    -5.2929151302328333E-7 + in2[4] * 0.10593667623599359)) + (in2[5] *
    0.10537885436940329 - in2[6] * 0.10793139553633729)) + (in2[7] *
    -0.1033841350690595 - proc_control_node_B.t13_pn * 4.3185698628399987)) +
                        ((in2[0] * 1.4142135623730951 * 0.013457654526727991 +
    in2[1] * 1.4142135623730951 * 0.013869054980635681) + in2[2] *
    1.4142135623730951 * 0.013457654526727991)) + ((in2[3] * 1.4142135623730951 *
    0.01386868232130781 + proc_control_node_B.out1_tmp_ck * 0.311032764122789) +
    proc_control_node_B.out1_tmp_izb * 0.0080268590155159435)) +
                      (((proc_control_node_B.t6_p * -0.0001026911824132076 +
    proc_control_node_B.t12_e * 0.00039756137245743289) +
                        proc_control_node_B.t14_kh * 0.58374455968341665) +
                       proc_control_node_B.out1_tmp_kv * 1.606290206365557E-6))
                     + ((proc_control_node_B.out1_tmp_go * -0.58374455968341665
    + proc_control_node_B.out1_tmp_pd * 0.0031834266548094372) +
                        proc_control_node_B.out1_tmp_f * 0.00039756137245743289))
                    + (((proc_control_node_B.out1_tmp_mo * -0.010033314971702871
    - proc_control_node_B.out1_tmp_my * 1.606290206365557E-6) +
                        proc_control_node_B.t68_mi * 0.0080268590155159435) +
                       proc_control_node_B.out1_tmp_lb * 1.606290206365557E-6))
                   + ((proc_control_node_B.out1_tmp_jo * -0.01232440254618042 -
                       out1_tmp * 0.0001026911824132076) - out1_tmp_0 *
                      0.010033314971702871)) + ((proc_control_node_B.t66_n *
    -0.58374455968341665 - proc_control_node_B.t69_b * 0.0080268590155159435) -
    proc_control_node_B.out1_tmp_cc * 0.17922689172220771)) +
                 ((proc_control_node_B.out1_tmp_g * 0.000439745529355291 -
                   proc_control_node_B.t5_i * 0.078743486942211408) +
                  proc_control_node_B.t9_l * 0.010033314971702871)) +
                ((proc_control_node_B.t53_m * -0.2488326294809943 +
                  proc_control_node_B.t63_m * 1.606290206365557E-6) -
                 proc_control_node_B.t50_d * 0.58374455968341665)) +
               (((proc_control_node_B.t11_ea * 0.0001026911824132076 +
                  proc_control_node_B.t24_gy * 18.096081350185919) +
                 proc_control_node_B.t46_j * 1.606290206365557E-6) +
                proc_control_node_B.t62_f * 0.0080268590155159435)) +
              ((out1_tmp_1 * -0.00039756137245743289 - proc_control_node_B.t20_j
                * 4.9794996397332282E-5) - proc_control_node_B.t26_l *
               0.58374455968341665)) + proc_control_node_B.t49_p *
    0.0080268590155159435;
  out1[11] = (((((((((((((((in2[0] * -0.1731941163298826 + in2[1] *
    -1.4397960202092559E-21) + in2[2] * 0.175443390567933) + (in2[3] *
    0.17469363248858291 + in2[4] * 0.00062021813460420567)) + (in2[5] *
    -0.0006207996116589 - in2[6] * 0.00064672437426625525)) + (in2[7] *
    0.00064730585132094889 + proc_control_node_B.t13_pn * 0.32680566187003413))
                       + ((in2[0] * 1.4142135623730951 * 0.00059255494878017434
    - in2[1] * 1.4142135623730951 * 0.1225770464045467) + in2[2] *
    1.4142135623730951 * 0.00059255494878017434)) + ((in2[3] *
    1.4142135623730951 * 0.00041984673608298361 -
    proc_control_node_B.out1_tmp_ck * 0.031387639110527318) +
    proc_control_node_B.out1_tmp_izb * 0.0039859244840414)) +
                     (((proc_control_node_B.t6_p * -0.00042780737967584029 +
                        proc_control_node_B.t12_e * 5.2828771531483014E-6) -
                       proc_control_node_B.t14_kh * 1.606290206365557E-6) -
                      proc_control_node_B.out1_tmp_kv * 0.53015902215788635)) +
                    (((proc_control_node_B.out1_tmp_go * 1.606290206365557E-6 +
                       proc_control_node_B.out1_tmp_pd * 0.013262028769951049) +
                      proc_control_node_B.out1_tmp_f * 5.2828771531483014E-6) +
                     proc_control_node_B.out1_tmp_mo * 0.0010125044874363649)) +
                   ((proc_control_node_B.out1_tmp_my * 0.53015902215788635 +
                     proc_control_node_B.t68_mi * 0.0039859244840414) -
                    proc_control_node_B.out1_tmp_lb * 0.53015902215788635)) +
                  (((proc_control_node_B.out1_tmp_jo * -0.00016376919174759729 -
                     out1_tmp * 0.00042780737967584029) + out1_tmp_0 *
                    0.0010125044874363649) + proc_control_node_B.t66_n *
                   1.606290206365557E-6)) + ((proc_control_node_B.t69_b *
    -0.0039859244840414 - proc_control_node_B.out1_tmp_cc *
    2.2159046954574339E-5) + proc_control_node_B.out1_tmp_g *
    0.16306065763088379)) + ((proc_control_node_B.t5_i * -0.03910191918844614 -
    proc_control_node_B.t9_l * 0.0010125044874363649) -
    proc_control_node_B.t53_m * 0.1235636590052834)) +
               (((proc_control_node_B.t63_m * -0.53015902215788635 +
                  proc_control_node_B.t50_d * 1.606290206365557E-6) +
                 proc_control_node_B.t11_ea * 0.00042780737967584029) -
                proc_control_node_B.t24_gy * 4.9794996397332282E-5)) +
              ((proc_control_node_B.t46_j * -0.53015902215788635 +
                proc_control_node_B.t62_f * 0.0039859244840414) - out1_tmp_1 *
               5.2828771531483014E-6)) + ((proc_control_node_B.t20_j *
    16.434929686894481 + proc_control_node_B.t26_l * 1.606290206365557E-6) +
    proc_control_node_B.t49_p * 0.0039859244840414);
}

// Function for MATLAB Function: '<S219>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_n(int32_T n, const
  real_T x[442], int32_T ix0)
{
  real_T absxk;
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_d = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        absxk = fabs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_d) {
          t = proc_control_node_B.scale_d / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_d = absxk;
        } else {
          t = absxk / proc_control_node_B.scale_d;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_d * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_a(int32_T m, int32_T n,
  const real_T A[442], int32_T ia0, const real_T x[442], int32_T ix0, real_T y
  [13])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 34 + ia0;
    for (iac = ia0; iac <= b; iac += 34) {
      ix = ix0;
      proc_control_node_B.c_eg = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_eg += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_eg;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_n(int32_T m, int32_T n,
  real_T alpha1, int32_T ix0, const real_T y[13], real_T A[442], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jA;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    jA = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_g = y[jy] * alpha1;
        ix = ix0;
        b = m + jA;
        for (ijA = jA; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_g;
          ix++;
        }
      }

      jy++;
      jA += 34;
    }
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_xzlarf_d(int32_T m, int32_T
  n, int32_T iv0, real_T tau, real_T C[442], int32_T ic0, real_T work[13])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_p = m;
    proc_control_node_B.lastc_n = iv0 + m;
    while ((proc_control_node_B.lastv_p > 0) && (C[proc_control_node_B.lastc_n -
            2] == 0.0)) {
      proc_control_node_B.lastv_p--;
      proc_control_node_B.lastc_n--;
    }

    proc_control_node_B.lastc_n = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_n > 0)) {
      proc_control_node_B.coltop_j = (proc_control_node_B.lastc_n - 1) * 34 +
        ic0;
      proc_control_node_B.ia_b = proc_control_node_B.coltop_j;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_b <= (proc_control_node_B.coltop_j +
             proc_control_node_B.lastv_p) - 1) {
          if (C[proc_control_node_B.ia_b - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_b++;
          }
        } else {
          proc_control_node_B.lastc_n--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_p = 0;
    proc_control_node_B.lastc_n = 0;
  }

  if (proc_control_node_B.lastv_p > 0) {
    proc_control_node_xgemv_a(proc_control_node_B.lastv_p,
      proc_control_node_B.lastc_n, C, ic0, C, iv0, work);
    proc_control_node_xgerc_n(proc_control_node_B.lastv_p,
      proc_control_node_B.lastc_n, -tau, iv0, work, C, ic0);
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrf_i(real_T A[442], int32_T
  ia0, int32_T m, int32_T n, int32_T nfxd, real_T tau[13])
{
  memset(&proc_control_node_B.work_jw[0], 0, 13U * sizeof(real_T));
  proc_control_node_B.i_p = 0;
  while (proc_control_node_B.i_p <= nfxd - 1) {
    proc_control_node_B.ii_n = ((proc_control_node_B.i_p * 34 + ia0) +
      proc_control_node_B.i_p) - 1;
    proc_control_node_B.mmi_tmp_b = m - proc_control_node_B.i_p;
    if (proc_control_node_B.i_p + 1 < m) {
      proc_control_node_B.b_atmp_g = A[proc_control_node_B.ii_n];
      tau[proc_control_node_B.i_p] = 0.0;
      if (proc_control_node_B.mmi_tmp_b > 0) {
        proc_control_node_B.beta1_g = proc_control_node_xnrm2_n
          (proc_control_node_B.mmi_tmp_b - 1, A, proc_control_node_B.ii_n + 2);
        if (proc_control_node_B.beta1_g != 0.0) {
          proc_control_node_B.beta1_g = proc_control_node_rt_hypotd_snf
            (A[proc_control_node_B.ii_n], proc_control_node_B.beta1_g);
          if (A[proc_control_node_B.ii_n] >= 0.0) {
            proc_control_node_B.beta1_g = -proc_control_node_B.beta1_g;
          }

          if (fabs(proc_control_node_B.beta1_g) < 1.0020841800044864E-292) {
            proc_control_node_B.knt_h = -1;
            proc_control_node_B.mmip1_d = proc_control_node_B.ii_n +
              proc_control_node_B.mmi_tmp_b;
            do {
              proc_control_node_B.knt_h++;
              proc_control_node_B.b_k_b = proc_control_node_B.ii_n + 1;
              while (proc_control_node_B.b_k_b + 1 <=
                     proc_control_node_B.mmip1_d) {
                A[proc_control_node_B.b_k_b] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_b++;
              }

              proc_control_node_B.beta1_g *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp_g *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1_g) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1_g = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp_g, proc_control_node_xnrm2_n
               (proc_control_node_B.mmi_tmp_b - 1, A, proc_control_node_B.ii_n +
                2));
            if (proc_control_node_B.b_atmp_g >= 0.0) {
              proc_control_node_B.beta1_g = -proc_control_node_B.beta1_g;
            }

            tau[proc_control_node_B.i_p] = (proc_control_node_B.beta1_g -
              proc_control_node_B.b_atmp_g) / proc_control_node_B.beta1_g;
            proc_control_node_B.b_atmp_g = 1.0 / (proc_control_node_B.b_atmp_g -
              proc_control_node_B.beta1_g);
            proc_control_node_B.b_k_b = proc_control_node_B.ii_n + 1;
            while (proc_control_node_B.b_k_b + 1 <= proc_control_node_B.mmip1_d)
            {
              A[proc_control_node_B.b_k_b] *= proc_control_node_B.b_atmp_g;
              proc_control_node_B.b_k_b++;
            }

            proc_control_node_B.mmip1_d = 0;
            while (proc_control_node_B.mmip1_d <= proc_control_node_B.knt_h) {
              proc_control_node_B.beta1_g *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1_d++;
            }

            proc_control_node_B.b_atmp_g = proc_control_node_B.beta1_g;
          } else {
            tau[proc_control_node_B.i_p] = (proc_control_node_B.beta1_g -
              A[proc_control_node_B.ii_n]) / proc_control_node_B.beta1_g;
            proc_control_node_B.b_atmp_g = 1.0 / (A[proc_control_node_B.ii_n] -
              proc_control_node_B.beta1_g);
            proc_control_node_B.knt_h = proc_control_node_B.ii_n +
              proc_control_node_B.mmi_tmp_b;
            proc_control_node_B.mmip1_d = proc_control_node_B.ii_n + 1;
            while (proc_control_node_B.mmip1_d + 1 <= proc_control_node_B.knt_h)
            {
              A[proc_control_node_B.mmip1_d] *= proc_control_node_B.b_atmp_g;
              proc_control_node_B.mmip1_d++;
            }

            proc_control_node_B.b_atmp_g = proc_control_node_B.beta1_g;
          }
        }
      }

      A[proc_control_node_B.ii_n] = proc_control_node_B.b_atmp_g;
    } else {
      tau[proc_control_node_B.i_p] = 0.0;
    }

    if (proc_control_node_B.i_p + 1 < n) {
      proc_control_node_B.b_atmp_g = A[proc_control_node_B.ii_n];
      A[proc_control_node_B.ii_n] = 1.0;
      proc_control_node_xzlarf_d(proc_control_node_B.mmi_tmp_b, (n -
        proc_control_node_B.i_p) - 1, proc_control_node_B.ii_n + 1,
        tau[proc_control_node_B.i_p], A, proc_control_node_B.ii_n + 35,
        proc_control_node_B.work_jw);
      A[proc_control_node_B.ii_n] = proc_control_node_B.b_atmp_g;
    }

    proc_control_node_B.i_p++;
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_o(real_T A[442],
  real_T tau[13])
{
  memset(&tau[0], 0, 13U * sizeof(real_T));
  proc_control_node_qrf_i(A, 1, 34, 13, 13, tau);
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_xorgqr_nc(int32_T m, int32_T
  n, int32_T k, real_T A[442], int32_T ia0, const real_T tau[13], int32_T itau0)
{
  if (n >= 1) {
    proc_control_node_B.itau_a = k;
    while (proc_control_node_B.itau_a <= n - 1) {
      proc_control_node_B.i_m = (proc_control_node_B.itau_a * 34 + ia0) - 1;
      proc_control_node_B.iaii_ey = 0;
      while (proc_control_node_B.iaii_ey <= m - 1) {
        A[proc_control_node_B.i_m + proc_control_node_B.iaii_ey] = 0.0;
        proc_control_node_B.iaii_ey++;
      }

      A[proc_control_node_B.i_m + proc_control_node_B.itau_a] = 1.0;
      proc_control_node_B.itau_a++;
    }

    proc_control_node_B.itau_a = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_c[0], 0, 13U * sizeof(real_T));
    proc_control_node_B.i_m = k;
    while (proc_control_node_B.i_m >= 1) {
      proc_control_node_B.iaii_ey = (((proc_control_node_B.i_m - 1) * 34 + ia0)
        + proc_control_node_B.i_m) - 1;
      if (proc_control_node_B.i_m < n) {
        A[proc_control_node_B.iaii_ey - 1] = 1.0;
        proc_control_node_xzlarf_d((m - proc_control_node_B.i_m) + 1, n -
          proc_control_node_B.i_m, proc_control_node_B.iaii_ey,
          tau[proc_control_node_B.itau_a], A, proc_control_node_B.iaii_ey + 34,
          proc_control_node_B.work_c);
      }

      if (proc_control_node_B.i_m < m) {
        proc_control_node_B.b_b = (proc_control_node_B.iaii_ey + m) -
          proc_control_node_B.i_m;
        proc_control_node_B.b_k_e = proc_control_node_B.iaii_ey;
        while (proc_control_node_B.b_k_e + 1 <= proc_control_node_B.b_b) {
          A[proc_control_node_B.b_k_e] *= -tau[proc_control_node_B.itau_a];
          proc_control_node_B.b_k_e++;
        }
      }

      A[proc_control_node_B.iaii_ey - 1] = 1.0 - tau[proc_control_node_B.itau_a];
      proc_control_node_B.b_b = 0;
      while (proc_control_node_B.b_b <= proc_control_node_B.i_m - 2) {
        A[(proc_control_node_B.iaii_ey - proc_control_node_B.b_b) - 2] = 0.0;
        proc_control_node_B.b_b++;
      }

      proc_control_node_B.itau_a--;
      proc_control_node_B.i_m--;
    }
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_qr_h(const real_T A[442],
  real_T Q[442], real_T R[169])
{
  memcpy(&proc_control_node_B.b_A_p[0], &A[0], 442U * sizeof(real_T));
  proc_control_node_xgeqrf_o(proc_control_node_B.b_A_p,
    proc_control_node_B.tau_k);
  for (proc_control_node_B.j_j = 0; proc_control_node_B.j_j < 13;
       proc_control_node_B.j_j++) {
    proc_control_node_B.i_b = 0;
    while (proc_control_node_B.i_b <= proc_control_node_B.j_j) {
      R[proc_control_node_B.i_b + 13 * proc_control_node_B.j_j] =
        proc_control_node_B.b_A_p[34 * proc_control_node_B.j_j +
        proc_control_node_B.i_b];
      proc_control_node_B.i_b++;
    }

    proc_control_node_B.i_b = proc_control_node_B.j_j + 1;
    while (proc_control_node_B.i_b + 1 < 14) {
      R[proc_control_node_B.i_b + 13 * proc_control_node_B.j_j] = 0.0;
      proc_control_node_B.i_b++;
    }
  }

  proc_control_node_xorgqr_nc(34, 13, 13, proc_control_node_B.b_A_p, 1,
    proc_control_node_B.tau_k, 1);
  proc_control_node_B.i_b = 0;
  for (proc_control_node_B.j_j = 0; proc_control_node_B.j_j < 13;
       proc_control_node_B.j_j++) {
    memcpy(&Q[proc_control_node_B.i_b],
           &proc_control_node_B.b_A_p[proc_control_node_B.i_b], 34U * sizeof
           (real_T));
    proc_control_node_B.i_b += 34;
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrFactor_o(const real_T A
  [273], const real_T S[441], const real_T Ns[169], real_T b_S[169])
{
  for (proc_control_node_B.j_k = 0; proc_control_node_B.j_k < 13;
       proc_control_node_B.j_k++) {
    proc_control_node_B.coffset_a = proc_control_node_B.j_k * 21;
    memset(&proc_control_node_B.y_me[proc_control_node_B.coffset_a], 0, 21U *
           sizeof(real_T));
    for (proc_control_node_B.i_ct = 0; proc_control_node_B.i_ct < 21;
         proc_control_node_B.i_ct++) {
      proc_control_node_B.bkj = A[proc_control_node_B.i_ct * 13 +
        proc_control_node_B.j_k];
      for (proc_control_node_B.b_i = 0; proc_control_node_B.b_i < 21;
           proc_control_node_B.b_i++) {
        proc_control_node_B.y_tmp = proc_control_node_B.coffset_a +
          proc_control_node_B.b_i;
        proc_control_node_B.y_me[proc_control_node_B.y_tmp] +=
          S[proc_control_node_B.b_i * 21 + proc_control_node_B.i_ct] *
          proc_control_node_B.bkj;
      }
    }
  }

  proc_control_node_B.j_k = 0;
  proc_control_node_B.coffset_a = 0;
  for (proc_control_node_B.i_ct = 0; proc_control_node_B.i_ct < 13;
       proc_control_node_B.i_ct++) {
    memcpy(&proc_control_node_B.y_p[proc_control_node_B.j_k],
           &proc_control_node_B.y_me[proc_control_node_B.coffset_a], 21U *
           sizeof(real_T));
    proc_control_node_B.j_k += 34;
    proc_control_node_B.coffset_a += 21;
  }

  proc_control_node_B.j_k = 0;
  for (proc_control_node_B.i_ct = 0; proc_control_node_B.i_ct < 13;
       proc_control_node_B.i_ct++) {
    proc_control_node_B.coffset_a = 0;
    for (proc_control_node_B.b_i = 0; proc_control_node_B.b_i < 13;
         proc_control_node_B.b_i++) {
      proc_control_node_B.y_p[(proc_control_node_B.b_i + proc_control_node_B.j_k)
        + 21] = Ns[proc_control_node_B.coffset_a + proc_control_node_B.i_ct];
      proc_control_node_B.coffset_a += 13;
    }

    proc_control_node_B.j_k += 34;
  }

  proc_control_node_qr_h(proc_control_node_B.y_p, proc_control_node_B.a__1_ct,
    proc_control_node_B.R);
  proc_control_node_B.j_k = 0;
  for (proc_control_node_B.coffset_a = 0; proc_control_node_B.coffset_a < 13;
       proc_control_node_B.coffset_a++) {
    proc_control_node_B.i_ct = 0;
    for (proc_control_node_B.b_i = 0; proc_control_node_B.b_i < 13;
         proc_control_node_B.b_i++) {
      b_S[proc_control_node_B.b_i + proc_control_node_B.j_k] =
        proc_control_node_B.R[proc_control_node_B.i_ct +
        proc_control_node_B.coffset_a];
      proc_control_node_B.i_ct += 13;
    }

    proc_control_node_B.j_k += 13;
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::EKFCorrectorAdditive_getMeasu_e(const real_T
  Rs[169], const real_T x[21], const real_T S[441], real_T zEstimated[13],
  real_T Pxy[273], real_T Sy[169], real_T dHdx[273])
{
  for (proc_control_node_B.j_o = 0; proc_control_node_B.j_o < 21;
       proc_control_node_B.j_o++) {
    memcpy(&proc_control_node_B.imvec[0], &x[0], 21U * sizeof(real_T));
    proc_control_node_B.epsilon_g = 1.4901161193847656E-8 * fabs
      (x[proc_control_node_B.j_o]);
    if ((1.4901161193847656E-8 > proc_control_node_B.epsilon_g) || rtIsNaN
        (proc_control_node_B.epsilon_g)) {
      proc_control_node_B.epsilon_g = 1.4901161193847656E-8;
    }

    proc_control_node_B.imvec[proc_control_node_B.j_o] =
      x[proc_control_node_B.j_o] + proc_control_node_B.epsilon_g;
    for (proc_control_node_B.i_dv = 0; proc_control_node_B.i_dv < 13;
         proc_control_node_B.i_dv++) {
      dHdx[proc_control_node_B.i_dv + 13 * proc_control_node_B.j_o] =
        (proc_control_node_B.imvec[proc_control_node_B.i_dv] -
         x[proc_control_node_B.i_dv]) / proc_control_node_B.epsilon_g;
    }
  }

  memcpy(&zEstimated[0], &x[0], 13U * sizeof(real_T));
  proc_control_node_B.i_dv = 0;
  for (proc_control_node_B.j_o = 0; proc_control_node_B.j_o < 21;
       proc_control_node_B.j_o++) {
    memset(&proc_control_node_B.S[proc_control_node_B.i_dv], 0, 21U * sizeof
           (real_T));
    proc_control_node_B.i_dv += 21;
  }

  proc_control_node_B.i_dv = 0;
  for (proc_control_node_B.i12 = 0; proc_control_node_B.i12 < 21;
       proc_control_node_B.i12++) {
    proc_control_node_B.i13 = 0;
    for (proc_control_node_B.j_o = 0; proc_control_node_B.j_o < 21;
         proc_control_node_B.j_o++) {
      for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 21;
           proc_control_node_B.i11++) {
        proc_control_node_B.S_tmp = proc_control_node_B.i11 +
          proc_control_node_B.i13;
        proc_control_node_B.S[proc_control_node_B.S_tmp] +=
          S[proc_control_node_B.i11 + proc_control_node_B.i_dv] *
          S[proc_control_node_B.j_o + proc_control_node_B.i_dv];
      }

      proc_control_node_B.i13 += 21;
    }

    proc_control_node_B.i_dv += 21;
  }

  proc_control_node_B.i_dv = 0;
  for (proc_control_node_B.j_o = 0; proc_control_node_B.j_o < 13;
       proc_control_node_B.j_o++) {
    memset(&Pxy[proc_control_node_B.i_dv], 0, 21U * sizeof(real_T));
    proc_control_node_B.i_dv += 21;
  }

  proc_control_node_B.i_dv = 0;
  for (proc_control_node_B.j_o = 0; proc_control_node_B.j_o < 13;
       proc_control_node_B.j_o++) {
    proc_control_node_B.i12 = 0;
    proc_control_node_B.i13 = 0;
    for (proc_control_node_B.S_tmp = 0; proc_control_node_B.S_tmp < 21;
         proc_control_node_B.S_tmp++) {
      for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 21;
           proc_control_node_B.i11++) {
        proc_control_node_B.Pxy_tmp = proc_control_node_B.i11 +
          proc_control_node_B.i_dv;
        Pxy[proc_control_node_B.Pxy_tmp] +=
          proc_control_node_B.S[proc_control_node_B.i11 +
          proc_control_node_B.i12] * dHdx[proc_control_node_B.i13 +
          proc_control_node_B.j_o];
      }

      proc_control_node_B.i12 += 21;
      proc_control_node_B.i13 += 13;
    }

    proc_control_node_B.i_dv += 21;
  }

  proc_control_node_qrFactor_o(dHdx, S, Rs, Sy);
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_p(const real_T A
  [169], real_T B[273])
{
  int32_T i;
  int32_T j;
  int32_T k;
  int32_T kAcol;
  int32_T tmp;
  int32_T tmp_0;
  for (j = 0; j < 21; j++) {
    proc_control_node_B.jBcol_n = 13 * j;
    for (k = 0; k < 13; k++) {
      kAcol = 13 * k;
      tmp = k + proc_control_node_B.jBcol_n;
      proc_control_node_B.d9 = B[tmp];
      if (proc_control_node_B.d9 != 0.0) {
        B[tmp] = proc_control_node_B.d9 / A[k + kAcol];
        for (i = k + 2; i < 14; i++) {
          tmp_0 = (i + proc_control_node_B.jBcol_n) - 1;
          B[tmp_0] -= A[(i + kAcol) - 1] * B[tmp];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_pj(const real_T A
  [169], real_T B[273])
{
  int32_T i;
  int32_T j;
  int32_T k;
  int32_T kAcol;
  int32_T tmp;
  int32_T tmp_0;
  for (j = 0; j < 21; j++) {
    proc_control_node_B.jBcol_k = 13 * j;
    for (k = 12; k >= 0; k--) {
      kAcol = 13 * k;
      tmp = k + proc_control_node_B.jBcol_k;
      proc_control_node_B.d8 = B[tmp];
      if (proc_control_node_B.d8 != 0.0) {
        B[tmp] = proc_control_node_B.d8 / A[k + kAcol];
        for (i = 0; i < k; i++) {
          tmp_0 = i + proc_control_node_B.jBcol_k;
          B[tmp_0] -= B[tmp] * A[i + kAcol];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S219>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_nk(int32_T n, const
  real_T x[714], int32_T ix0)
{
  real_T absxk;
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_bf = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        absxk = fabs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_bf) {
          t = proc_control_node_B.scale_bf / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_bf = absxk;
        } else {
          t = absxk / proc_control_node_B.scale_bf;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_bf * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_ay(int32_T m, int32_T
  n, const real_T A[714], int32_T ia0, const real_T x[714], int32_T ix0, real_T
  y[21])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 34 + ia0;
    for (iac = ia0; iac <= b; iac += 34) {
      ix = ix0;
      proc_control_node_B.c_j = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_j += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_j;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_nx(int32_T m, int32_T
  n, real_T alpha1, int32_T ix0, const real_T y[21], real_T A[714], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jA;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    jA = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_a = y[jy] * alpha1;
        ix = ix0;
        b = m + jA;
        for (ijA = jA; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_a;
          ix++;
        }
      }

      jy++;
      jA += 34;
    }
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_xzlarf_dq1(int32_T m,
  int32_T n, int32_T iv0, real_T tau, real_T C[714], int32_T ic0, real_T work[21])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_l = m;
    proc_control_node_B.lastc_f = iv0 + m;
    while ((proc_control_node_B.lastv_l > 0) && (C[proc_control_node_B.lastc_f -
            2] == 0.0)) {
      proc_control_node_B.lastv_l--;
      proc_control_node_B.lastc_f--;
    }

    proc_control_node_B.lastc_f = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_f > 0)) {
      proc_control_node_B.coltop_h = (proc_control_node_B.lastc_f - 1) * 34 +
        ic0;
      proc_control_node_B.ia_d = proc_control_node_B.coltop_h;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_d <= (proc_control_node_B.coltop_h +
             proc_control_node_B.lastv_l) - 1) {
          if (C[proc_control_node_B.ia_d - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_d++;
          }
        } else {
          proc_control_node_B.lastc_f--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_l = 0;
    proc_control_node_B.lastc_f = 0;
  }

  if (proc_control_node_B.lastv_l > 0) {
    proc_control_node_xgemv_ay(proc_control_node_B.lastv_l,
      proc_control_node_B.lastc_f, C, ic0, C, iv0, work);
    proc_control_node_xgerc_nx(proc_control_node_B.lastv_l,
      proc_control_node_B.lastc_f, -tau, iv0, work, C, ic0);
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrf_iq(real_T A[714],
  int32_T ia0, int32_T m, int32_T n, int32_T nfxd, real_T tau[21])
{
  memset(&proc_control_node_B.work[0], 0, 21U * sizeof(real_T));
  proc_control_node_B.i_nl = 0;
  while (proc_control_node_B.i_nl <= nfxd - 1) {
    proc_control_node_B.ii_ez = ((proc_control_node_B.i_nl * 34 + ia0) +
      proc_control_node_B.i_nl) - 1;
    proc_control_node_B.mmi_tmp_o = m - proc_control_node_B.i_nl;
    if (proc_control_node_B.i_nl + 1 < m) {
      proc_control_node_B.b_atmp_m = A[proc_control_node_B.ii_ez];
      tau[proc_control_node_B.i_nl] = 0.0;
      if (proc_control_node_B.mmi_tmp_o > 0) {
        proc_control_node_B.beta1_kt = proc_control_node_xnrm2_nk
          (proc_control_node_B.mmi_tmp_o - 1, A, proc_control_node_B.ii_ez + 2);
        if (proc_control_node_B.beta1_kt != 0.0) {
          proc_control_node_B.beta1_kt = proc_control_node_rt_hypotd_snf
            (A[proc_control_node_B.ii_ez], proc_control_node_B.beta1_kt);
          if (A[proc_control_node_B.ii_ez] >= 0.0) {
            proc_control_node_B.beta1_kt = -proc_control_node_B.beta1_kt;
          }

          if (fabs(proc_control_node_B.beta1_kt) < 1.0020841800044864E-292) {
            proc_control_node_B.knt_g = -1;
            proc_control_node_B.mmip1_h = proc_control_node_B.ii_ez +
              proc_control_node_B.mmi_tmp_o;
            do {
              proc_control_node_B.knt_g++;
              proc_control_node_B.b_k_p = proc_control_node_B.ii_ez + 1;
              while (proc_control_node_B.b_k_p + 1 <=
                     proc_control_node_B.mmip1_h) {
                A[proc_control_node_B.b_k_p] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_p++;
              }

              proc_control_node_B.beta1_kt *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp_m *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1_kt) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1_kt = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp_m, proc_control_node_xnrm2_nk
               (proc_control_node_B.mmi_tmp_o - 1, A, proc_control_node_B.ii_ez
                + 2));
            if (proc_control_node_B.b_atmp_m >= 0.0) {
              proc_control_node_B.beta1_kt = -proc_control_node_B.beta1_kt;
            }

            tau[proc_control_node_B.i_nl] = (proc_control_node_B.beta1_kt -
              proc_control_node_B.b_atmp_m) / proc_control_node_B.beta1_kt;
            proc_control_node_B.b_atmp_m = 1.0 / (proc_control_node_B.b_atmp_m -
              proc_control_node_B.beta1_kt);
            proc_control_node_B.b_k_p = proc_control_node_B.ii_ez + 1;
            while (proc_control_node_B.b_k_p + 1 <= proc_control_node_B.mmip1_h)
            {
              A[proc_control_node_B.b_k_p] *= proc_control_node_B.b_atmp_m;
              proc_control_node_B.b_k_p++;
            }

            proc_control_node_B.mmip1_h = 0;
            while (proc_control_node_B.mmip1_h <= proc_control_node_B.knt_g) {
              proc_control_node_B.beta1_kt *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1_h++;
            }

            proc_control_node_B.b_atmp_m = proc_control_node_B.beta1_kt;
          } else {
            tau[proc_control_node_B.i_nl] = (proc_control_node_B.beta1_kt -
              A[proc_control_node_B.ii_ez]) / proc_control_node_B.beta1_kt;
            proc_control_node_B.b_atmp_m = 1.0 / (A[proc_control_node_B.ii_ez] -
              proc_control_node_B.beta1_kt);
            proc_control_node_B.knt_g = proc_control_node_B.ii_ez +
              proc_control_node_B.mmi_tmp_o;
            proc_control_node_B.mmip1_h = proc_control_node_B.ii_ez + 1;
            while (proc_control_node_B.mmip1_h + 1 <= proc_control_node_B.knt_g)
            {
              A[proc_control_node_B.mmip1_h] *= proc_control_node_B.b_atmp_m;
              proc_control_node_B.mmip1_h++;
            }

            proc_control_node_B.b_atmp_m = proc_control_node_B.beta1_kt;
          }
        }
      }

      A[proc_control_node_B.ii_ez] = proc_control_node_B.b_atmp_m;
    } else {
      tau[proc_control_node_B.i_nl] = 0.0;
    }

    if (proc_control_node_B.i_nl + 1 < n) {
      proc_control_node_B.b_atmp_m = A[proc_control_node_B.ii_ez];
      A[proc_control_node_B.ii_ez] = 1.0;
      proc_control_node_xzlarf_dq1(proc_control_node_B.mmi_tmp_o, (n -
        proc_control_node_B.i_nl) - 1, proc_control_node_B.ii_ez + 1,
        tau[proc_control_node_B.i_nl], A, proc_control_node_B.ii_ez + 35,
        proc_control_node_B.work);
      A[proc_control_node_B.ii_ez] = proc_control_node_B.b_atmp_m;
    }

    proc_control_node_B.i_nl++;
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_ot(real_T A[714],
  real_T tau[21])
{
  memset(&tau[0], 0, 21U * sizeof(real_T));
  proc_control_node_qrf_iq(A, 1, 34, 21, 21, tau);
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_xorgqr_ncc(int32_T m,
  int32_T n, int32_T k, real_T A[714], int32_T ia0, const real_T tau[21],
  int32_T itau0)
{
  if (n >= 1) {
    proc_control_node_B.itau_p = k;
    while (proc_control_node_B.itau_p <= n - 1) {
      proc_control_node_B.i_pn = (proc_control_node_B.itau_p * 34 + ia0) - 1;
      proc_control_node_B.iaii_o = 0;
      while (proc_control_node_B.iaii_o <= m - 1) {
        A[proc_control_node_B.i_pn + proc_control_node_B.iaii_o] = 0.0;
        proc_control_node_B.iaii_o++;
      }

      A[proc_control_node_B.i_pn + proc_control_node_B.itau_p] = 1.0;
      proc_control_node_B.itau_p++;
    }

    proc_control_node_B.itau_p = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_d[0], 0, 21U * sizeof(real_T));
    proc_control_node_B.i_pn = k;
    while (proc_control_node_B.i_pn >= 1) {
      proc_control_node_B.iaii_o = (((proc_control_node_B.i_pn - 1) * 34 + ia0)
        + proc_control_node_B.i_pn) - 1;
      if (proc_control_node_B.i_pn < n) {
        A[proc_control_node_B.iaii_o - 1] = 1.0;
        proc_control_node_xzlarf_dq1((m - proc_control_node_B.i_pn) + 1, n -
          proc_control_node_B.i_pn, proc_control_node_B.iaii_o,
          tau[proc_control_node_B.itau_p], A, proc_control_node_B.iaii_o + 34,
          proc_control_node_B.work_d);
      }

      if (proc_control_node_B.i_pn < m) {
        proc_control_node_B.b_l = (proc_control_node_B.iaii_o + m) -
          proc_control_node_B.i_pn;
        proc_control_node_B.b_k_fr = proc_control_node_B.iaii_o;
        while (proc_control_node_B.b_k_fr + 1 <= proc_control_node_B.b_l) {
          A[proc_control_node_B.b_k_fr] *= -tau[proc_control_node_B.itau_p];
          proc_control_node_B.b_k_fr++;
        }
      }

      A[proc_control_node_B.iaii_o - 1] = 1.0 - tau[proc_control_node_B.itau_p];
      proc_control_node_B.b_l = 0;
      while (proc_control_node_B.b_l <= proc_control_node_B.i_pn - 2) {
        A[(proc_control_node_B.iaii_o - proc_control_node_B.b_l) - 2] = 0.0;
        proc_control_node_B.b_l++;
      }

      proc_control_node_B.itau_p--;
      proc_control_node_B.i_pn--;
    }
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_qr_hl(const real_T A[714],
  real_T Q[714], real_T R[441])
{
  memcpy(&proc_control_node_B.b_A_m[0], &A[0], 714U * sizeof(real_T));
  proc_control_node_xgeqrf_ot(proc_control_node_B.b_A_m, proc_control_node_B.tau);
  for (proc_control_node_B.j_e = 0; proc_control_node_B.j_e < 21;
       proc_control_node_B.j_e++) {
    proc_control_node_B.i_l = 0;
    while (proc_control_node_B.i_l <= proc_control_node_B.j_e) {
      R[proc_control_node_B.i_l + 21 * proc_control_node_B.j_e] =
        proc_control_node_B.b_A_m[34 * proc_control_node_B.j_e +
        proc_control_node_B.i_l];
      proc_control_node_B.i_l++;
    }

    proc_control_node_B.i_l = proc_control_node_B.j_e + 1;
    while (proc_control_node_B.i_l + 1 < 22) {
      R[proc_control_node_B.i_l + 21 * proc_control_node_B.j_e] = 0.0;
      proc_control_node_B.i_l++;
    }
  }

  proc_control_node_xorgqr_ncc(34, 21, 21, proc_control_node_B.b_A_m, 1,
    proc_control_node_B.tau, 1);
  proc_control_node_B.i_l = 0;
  for (proc_control_node_B.j_e = 0; proc_control_node_B.j_e < 21;
       proc_control_node_B.j_e++) {
    memcpy(&Q[proc_control_node_B.i_l],
           &proc_control_node_B.b_A_m[proc_control_node_B.i_l], 34U * sizeof
           (real_T));
    proc_control_node_B.i_l += 34;
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrFactor_oq(const real_T A
  [441], real_T S[441], const real_T Ns[273])
{
  for (proc_control_node_B.j_kv = 0; proc_control_node_B.j_kv < 21;
       proc_control_node_B.j_kv++) {
    proc_control_node_B.coffset_o = proc_control_node_B.j_kv * 21;
    memset(&proc_control_node_B.y_e[proc_control_node_B.coffset_o], 0, 21U *
           sizeof(real_T));
    for (proc_control_node_B.i_p2 = 0; proc_control_node_B.i_p2 < 21;
         proc_control_node_B.i_p2++) {
      proc_control_node_B.bkj_p = A[proc_control_node_B.i_p2 * 21 +
        proc_control_node_B.j_kv];
      for (proc_control_node_B.b_i_f4 = 0; proc_control_node_B.b_i_f4 < 21;
           proc_control_node_B.b_i_f4++) {
        proc_control_node_B.y_tmp_d = proc_control_node_B.coffset_o +
          proc_control_node_B.b_i_f4;
        proc_control_node_B.y_e[proc_control_node_B.y_tmp_d] +=
          S[proc_control_node_B.b_i_f4 * 21 + proc_control_node_B.i_p2] *
          proc_control_node_B.bkj_p;
      }
    }
  }

  proc_control_node_B.coffset_o = 0;
  proc_control_node_B.j_kv = 0;
  for (proc_control_node_B.i_p2 = 0; proc_control_node_B.i_p2 < 21;
       proc_control_node_B.i_p2++) {
    memcpy(&proc_control_node_B.y_m[proc_control_node_B.coffset_o],
           &proc_control_node_B.y_e[proc_control_node_B.j_kv], 21U * sizeof
           (real_T));
    proc_control_node_B.coffset_o += 34;
    proc_control_node_B.j_kv += 21;
  }

  proc_control_node_B.coffset_o = 0;
  for (proc_control_node_B.i_p2 = 0; proc_control_node_B.i_p2 < 21;
       proc_control_node_B.i_p2++) {
    proc_control_node_B.j_kv = 0;
    for (proc_control_node_B.b_i_f4 = 0; proc_control_node_B.b_i_f4 < 13;
         proc_control_node_B.b_i_f4++) {
      proc_control_node_B.y_m[(proc_control_node_B.b_i_f4 +
        proc_control_node_B.coffset_o) + 21] = Ns[proc_control_node_B.j_kv +
        proc_control_node_B.i_p2];
      proc_control_node_B.j_kv += 21;
    }

    proc_control_node_B.coffset_o += 34;
  }

  proc_control_node_qr_hl(proc_control_node_B.y_m, proc_control_node_B.a__1_c,
    proc_control_node_B.y_e);
  proc_control_node_B.coffset_o = 0;
  for (proc_control_node_B.j_kv = 0; proc_control_node_B.j_kv < 21;
       proc_control_node_B.j_kv++) {
    proc_control_node_B.i_p2 = 0;
    for (proc_control_node_B.b_i_f4 = 0; proc_control_node_B.b_i_f4 < 21;
         proc_control_node_B.b_i_f4++) {
      S[proc_control_node_B.b_i_f4 + proc_control_node_B.coffset_o] =
        proc_control_node_B.y_e[proc_control_node_B.i_p2 +
        proc_control_node_B.j_kv];
      proc_control_node_B.i_p2 += 21;
    }

    proc_control_node_B.coffset_o += 21;
  }
}

// Function for MATLAB Function: '<S219>/Correct'
void proc_control_nodeModelClass::EKFCorrector_correctStateAndS_l(real_T x[21],
  real_T S[441], const real_T residue[13], const real_T Pxy[273], const real_T
  Sy[169], const real_T H[273], const real_T Rsqrt[169])
{
  proc_control_node_B.b_i_f = 0;
  for (proc_control_node_B.b_i_a = 0; proc_control_node_B.b_i_a < 13;
       proc_control_node_B.b_i_a++) {
    proc_control_node_B.j_c = 0;
    for (proc_control_node_B.j_kc = 0; proc_control_node_B.j_kc < 21;
         proc_control_node_B.j_kc++) {
      proc_control_node_B.K[proc_control_node_B.j_c + proc_control_node_B.b_i_a]
        = Pxy[proc_control_node_B.j_kc + proc_control_node_B.b_i_f];
      proc_control_node_B.j_c += 13;
    }

    proc_control_node_B.b_i_f += 21;
  }

  proc_control_node_trisolve_p(Sy, proc_control_node_B.K);
  proc_control_node_B.j_c = 0;
  for (proc_control_node_B.j_kc = 0; proc_control_node_B.j_kc < 21;
       proc_control_node_B.j_kc++) {
    memcpy(&proc_control_node_B.b_C[proc_control_node_B.j_c],
           &proc_control_node_B.K[proc_control_node_B.j_c], 13U * sizeof(real_T));
    proc_control_node_B.j_c += 13;
  }

  proc_control_node_B.b_i_f = 0;
  for (proc_control_node_B.j_kc = 0; proc_control_node_B.j_kc < 13;
       proc_control_node_B.j_kc++) {
    proc_control_node_B.b_i_a = 0;
    for (proc_control_node_B.j_c = 0; proc_control_node_B.j_c < 13;
         proc_control_node_B.j_c++) {
      proc_control_node_B.Sy_f[proc_control_node_B.j_c +
        proc_control_node_B.b_i_f] = Sy[proc_control_node_B.b_i_a +
        proc_control_node_B.j_kc];
      proc_control_node_B.b_i_a += 13;
    }

    proc_control_node_B.b_i_f += 13;
  }

  proc_control_node_trisolve_pj(proc_control_node_B.Sy_f,
    proc_control_node_B.b_C);
  proc_control_node_B.b_i_f = 0;
  for (proc_control_node_B.j_kc = 0; proc_control_node_B.j_kc < 13;
       proc_control_node_B.j_kc++) {
    proc_control_node_B.b_i_a = 0;
    for (proc_control_node_B.j_c = 0; proc_control_node_B.j_c < 21;
         proc_control_node_B.j_c++) {
      proc_control_node_B.K[proc_control_node_B.j_c + proc_control_node_B.b_i_f]
        = proc_control_node_B.b_C[proc_control_node_B.b_i_a +
        proc_control_node_B.j_kc];
      proc_control_node_B.b_i_a += 13;
    }

    proc_control_node_B.b_i_f += 21;
  }

  for (proc_control_node_B.b_i_f = 0; proc_control_node_B.b_i_f < 21;
       proc_control_node_B.b_i_f++) {
    proc_control_node_B.d2 = 0.0;
    proc_control_node_B.j_kc = 0;
    for (proc_control_node_B.b_i_a = 0; proc_control_node_B.b_i_a < 13;
         proc_control_node_B.b_i_a++) {
      proc_control_node_B.d2 += proc_control_node_B.K[proc_control_node_B.j_kc +
        proc_control_node_B.b_i_f] * residue[proc_control_node_B.b_i_a];
      proc_control_node_B.j_kc += 21;
    }

    x[proc_control_node_B.b_i_f] += proc_control_node_B.d2;
  }

  for (proc_control_node_B.b_i_f = 0; proc_control_node_B.b_i_f < 273;
       proc_control_node_B.b_i_f++) {
    proc_control_node_B.b_C[proc_control_node_B.b_i_f] =
      -proc_control_node_B.K[proc_control_node_B.b_i_f];
  }

  for (proc_control_node_B.b_i_f = 0; proc_control_node_B.b_i_f < 21;
       proc_control_node_B.b_i_f++) {
    memset(&proc_control_node_B.A[proc_control_node_B.b_i_f * 21], 0, 21U *
           sizeof(real_T));
    for (proc_control_node_B.b_i_a = 0; proc_control_node_B.b_i_a < 13;
         proc_control_node_B.b_i_a++) {
      for (proc_control_node_B.j_kc = 0; proc_control_node_B.j_kc < 21;
           proc_control_node_B.j_kc++) {
        proc_control_node_B.j_c = 21 * proc_control_node_B.b_i_f +
          proc_control_node_B.j_kc;
        proc_control_node_B.A[proc_control_node_B.j_c] +=
          proc_control_node_B.b_C[21 * proc_control_node_B.b_i_a +
          proc_control_node_B.j_kc] * H[13 * proc_control_node_B.b_i_f +
          proc_control_node_B.b_i_a];
      }
    }
  }

  proc_control_node_B.j_c = 0;
  for (proc_control_node_B.j_kc = 0; proc_control_node_B.j_kc < 21;
       proc_control_node_B.j_kc++) {
    proc_control_node_B.A[proc_control_node_B.j_c]++;
    proc_control_node_B.j_c += 22;
  }

  for (proc_control_node_B.b_i_f = 0; proc_control_node_B.b_i_f < 13;
       proc_control_node_B.b_i_f++) {
    memset(&proc_control_node_B.b_C[proc_control_node_B.b_i_f * 21], 0, 21U *
           sizeof(real_T));
    for (proc_control_node_B.b_i_a = 0; proc_control_node_B.b_i_a < 13;
         proc_control_node_B.b_i_a++) {
      for (proc_control_node_B.j_kc = 0; proc_control_node_B.j_kc < 21;
           proc_control_node_B.j_kc++) {
        proc_control_node_B.j_c = 21 * proc_control_node_B.b_i_f +
          proc_control_node_B.j_kc;
        proc_control_node_B.b_C[proc_control_node_B.j_c] +=
          proc_control_node_B.K[21 * proc_control_node_B.b_i_a +
          proc_control_node_B.j_kc] * Rsqrt[13 * proc_control_node_B.b_i_f +
          proc_control_node_B.b_i_a];
      }
    }
  }

  proc_control_node_qrFactor_oq(proc_control_node_B.A, S,
    proc_control_node_B.b_C);
}

// Function for MATLAB Function: '<S131>/MATLAB Function2'
int32_T proc_control_nodeModelClass::proc_control_node_xgetrfs_c(real_T A[169],
  real_T B[169])
{
  int32_T c_ix;
  int32_T d;
  int32_T ijA;
  int32_T info;
  int32_T iy;
  int32_T jA;
  int8_T ipiv;
  for (c_ix = 0; c_ix < 13; c_ix++) {
    proc_control_node_B.ipiv[c_ix] = static_cast<int8_T>(c_ix + 1);
  }

  info = 0;
  for (proc_control_node_B.b_j_k = 0; proc_control_node_B.b_j_k < 12;
       proc_control_node_B.b_j_k++) {
    proc_control_node_B.c_b4 = proc_control_node_B.b_j_k * 14;
    jA = 0;
    proc_control_node_B.ix_l = proc_control_node_B.c_b4;
    proc_control_node_B.smax = fabs(A[proc_control_node_B.c_b4]);
    for (iy = 2; iy <= 13 - proc_control_node_B.b_j_k; iy++) {
      proc_control_node_B.ix_l++;
      proc_control_node_B.y_fn = fabs(A[proc_control_node_B.ix_l]);
      if (proc_control_node_B.y_fn > proc_control_node_B.smax) {
        jA = iy - 1;
        proc_control_node_B.smax = proc_control_node_B.y_fn;
      }
    }

    if (A[proc_control_node_B.c_b4 + jA] != 0.0) {
      if (jA != 0) {
        c_ix = proc_control_node_B.b_j_k + jA;
        proc_control_node_B.ipiv[proc_control_node_B.b_j_k] = static_cast<int8_T>
          (c_ix + 1);
        for (jA = 0; jA < 13; jA++) {
          proc_control_node_B.ix_l = jA * 13 + proc_control_node_B.b_j_k;
          proc_control_node_B.smax = A[proc_control_node_B.ix_l];
          iy = jA * 13 + c_ix;
          A[proc_control_node_B.ix_l] = A[iy];
          A[iy] = proc_control_node_B.smax;
        }
      }

      jA = (proc_control_node_B.c_b4 - proc_control_node_B.b_j_k) + 13;
      proc_control_node_B.ix_l = proc_control_node_B.c_b4 + 1;
      while (proc_control_node_B.ix_l + 1 <= jA) {
        A[proc_control_node_B.ix_l] /= A[proc_control_node_B.c_b4];
        proc_control_node_B.ix_l++;
      }
    } else {
      info = proc_control_node_B.b_j_k + 1;
    }

    jA = proc_control_node_B.c_b4;
    proc_control_node_B.ix_l = proc_control_node_B.c_b4 + 13;
    for (iy = 0; iy <= 11 - proc_control_node_B.b_j_k; iy++) {
      if (A[proc_control_node_B.ix_l] != 0.0) {
        proc_control_node_B.smax = -A[proc_control_node_B.ix_l];
        c_ix = proc_control_node_B.c_b4 + 1;
        d = (jA - proc_control_node_B.b_j_k) + 26;
        for (ijA = jA + 14; ijA < d; ijA++) {
          A[ijA] += A[c_ix] * proc_control_node_B.smax;
          c_ix++;
        }
      }

      proc_control_node_B.ix_l += 13;
      jA += 13;
    }
  }

  if ((info == 0) && (!(A[168] != 0.0))) {
    info = 13;
  }

  for (proc_control_node_B.b_j_k = 0; proc_control_node_B.b_j_k < 12;
       proc_control_node_B.b_j_k++) {
    ipiv = proc_control_node_B.ipiv[proc_control_node_B.b_j_k];
    if (proc_control_node_B.b_j_k + 1 != ipiv) {
      for (proc_control_node_B.c_b4 = 0; proc_control_node_B.c_b4 < 13;
           proc_control_node_B.c_b4++) {
        proc_control_node_B.ix_l = 13 * proc_control_node_B.c_b4 +
          proc_control_node_B.b_j_k;
        proc_control_node_B.smax = B[proc_control_node_B.ix_l];
        c_ix = (ipiv + 13 * proc_control_node_B.c_b4) - 1;
        B[proc_control_node_B.ix_l] = B[c_ix];
        B[c_ix] = proc_control_node_B.smax;
      }
    }
  }

  for (proc_control_node_B.b_j_k = 0; proc_control_node_B.b_j_k < 13;
       proc_control_node_B.b_j_k++) {
    jA = 13 * proc_control_node_B.b_j_k;
    for (proc_control_node_B.c_b4 = 0; proc_control_node_B.c_b4 < 13;
         proc_control_node_B.c_b4++) {
      proc_control_node_B.ix_l = 13 * proc_control_node_B.c_b4;
      if (B[proc_control_node_B.c_b4 + jA] != 0.0) {
        for (iy = proc_control_node_B.c_b4 + 2; iy < 14; iy++) {
          c_ix = (iy + jA) - 1;
          B[c_ix] -= A[(iy + proc_control_node_B.ix_l) - 1] *
            B[proc_control_node_B.c_b4 + jA];
        }
      }
    }
  }

  for (proc_control_node_B.b_j_k = 0; proc_control_node_B.b_j_k < 13;
       proc_control_node_B.b_j_k++) {
    jA = 13 * proc_control_node_B.b_j_k;
    for (proc_control_node_B.c_b4 = 12; proc_control_node_B.c_b4 >= 0;
         proc_control_node_B.c_b4--) {
      proc_control_node_B.ix_l = 13 * proc_control_node_B.c_b4;
      c_ix = proc_control_node_B.c_b4 + jA;
      proc_control_node_B.smax = B[c_ix];
      if (proc_control_node_B.smax != 0.0) {
        B[c_ix] = proc_control_node_B.smax / A[proc_control_node_B.c_b4 +
          proc_control_node_B.ix_l];
        for (iy = 0; iy < proc_control_node_B.c_b4; iy++) {
          d = iy + jA;
          B[d] -= B[c_ix] * A[iy + proc_control_node_B.ix_l];
        }
      }
    }
  }

  return info;
}

// Function for MATLAB Function: '<S131>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_node_lusolve_e(const real_T A[169],
  const real_T B[169], real_T X[169])
{
  memcpy(&X[0], &B[0], 169U * sizeof(real_T));
  memcpy(&proc_control_node_B.b_A_o[0], &A[0], 169U * sizeof(real_T));
  proc_control_node_xgetrfs_c(proc_control_node_B.b_A_o, X);
}

// Function for MATLAB Function: '<S131>/MATLAB Function2'
void proc_control_nodeModelClass::proc__PadeApproximantOfDegree_k(const real_T
  A[169], uint8_T m, real_T F[169])
{
  for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 13;
       proc_control_node_B.i21++) {
    memset(&proc_control_node_B.A2[proc_control_node_B.i21 * 13], 0, 13U *
           sizeof(real_T));
    for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
         proc_control_node_B.e_k++) {
      for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 13;
           proc_control_node_B.e_k_m++) {
        proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i21 +
          proc_control_node_B.e_k_m;
        proc_control_node_B.A2[proc_control_node_B.A2_tmp] += A[13 *
          proc_control_node_B.e_k + proc_control_node_B.e_k_m] * A[13 *
          proc_control_node_B.i21 + proc_control_node_B.e_k];
      }
    }
  }

  if (m == 3) {
    memcpy(&proc_control_node_B.U_k[0], &proc_control_node_B.A2[0], 169U *
           sizeof(real_T));
    proc_control_node_B.e_k_m = 0;
    proc_control_node_B.A2_tmp = 0;
    for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
         proc_control_node_B.e_k++) {
      memset(&proc_control_node_B.A4_i[proc_control_node_B.A2_tmp], 0, 13U *
             sizeof(real_T));
      proc_control_node_B.U_k[proc_control_node_B.e_k_m] += 60.0;
      proc_control_node_B.e_k_m += 14;
      proc_control_node_B.A2_tmp += 13;
    }

    proc_control_node_B.e_k_m = 0;
    for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
         proc_control_node_B.e_k++) {
      proc_control_node_B.A2_tmp = 0;
      for (proc_control_node_B.i22 = 0; proc_control_node_B.i22 < 13;
           proc_control_node_B.i22++) {
        for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 13;
             proc_control_node_B.i21++) {
          proc_control_node_B.A_tmp = proc_control_node_B.i21 +
            proc_control_node_B.e_k_m;
          proc_control_node_B.A4_i[proc_control_node_B.A_tmp] +=
            A[proc_control_node_B.i21 + proc_control_node_B.A2_tmp] *
            proc_control_node_B.U_k[proc_control_node_B.i22 +
            proc_control_node_B.e_k_m];
        }

        proc_control_node_B.A2_tmp += 13;
      }

      proc_control_node_B.e_k_m += 13;
    }

    for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 169;
         proc_control_node_B.i21++) {
      proc_control_node_B.U_k[proc_control_node_B.i21] =
        proc_control_node_B.A4_i[proc_control_node_B.i21];
      proc_control_node_B.V[proc_control_node_B.i21] = 12.0 *
        proc_control_node_B.A2[proc_control_node_B.i21];
    }

    proc_control_node_B.d_n = 120.0;
  } else {
    for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 13;
         proc_control_node_B.i21++) {
      memset(&proc_control_node_B.A3[proc_control_node_B.i21 * 13], 0, 13U *
             sizeof(real_T));
      for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
           proc_control_node_B.e_k++) {
        for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 13;
             proc_control_node_B.e_k_m++) {
          proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i21 +
            proc_control_node_B.e_k_m;
          proc_control_node_B.A3[proc_control_node_B.A2_tmp] +=
            proc_control_node_B.A2[13 * proc_control_node_B.e_k +
            proc_control_node_B.e_k_m] * proc_control_node_B.A2[13 *
            proc_control_node_B.i21 + proc_control_node_B.e_k];
        }
      }
    }

    if (m == 5) {
      for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 169;
           proc_control_node_B.i21++) {
        proc_control_node_B.U_k[proc_control_node_B.i21] = 420.0 *
          proc_control_node_B.A2[proc_control_node_B.i21] +
          proc_control_node_B.A3[proc_control_node_B.i21];
      }

      proc_control_node_B.e_k_m = 0;
      proc_control_node_B.A2_tmp = 0;
      for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
           proc_control_node_B.e_k++) {
        memset(&proc_control_node_B.A4_i[proc_control_node_B.A2_tmp], 0, 13U *
               sizeof(real_T));
        proc_control_node_B.U_k[proc_control_node_B.e_k_m] += 15120.0;
        proc_control_node_B.e_k_m += 14;
        proc_control_node_B.A2_tmp += 13;
      }

      proc_control_node_B.e_k_m = 0;
      for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
           proc_control_node_B.e_k++) {
        proc_control_node_B.A2_tmp = 0;
        for (proc_control_node_B.i22 = 0; proc_control_node_B.i22 < 13;
             proc_control_node_B.i22++) {
          for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 13;
               proc_control_node_B.i21++) {
            proc_control_node_B.A_tmp = proc_control_node_B.i21 +
              proc_control_node_B.e_k_m;
            proc_control_node_B.A4_i[proc_control_node_B.A_tmp] +=
              A[proc_control_node_B.i21 + proc_control_node_B.A2_tmp] *
              proc_control_node_B.U_k[proc_control_node_B.i22 +
              proc_control_node_B.e_k_m];
          }

          proc_control_node_B.A2_tmp += 13;
        }

        proc_control_node_B.e_k_m += 13;
      }

      for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 169;
           proc_control_node_B.i21++) {
        proc_control_node_B.U_k[proc_control_node_B.i21] =
          proc_control_node_B.A4_i[proc_control_node_B.i21];
        proc_control_node_B.V[proc_control_node_B.i21] = 30.0 *
          proc_control_node_B.A3[proc_control_node_B.i21] + 3360.0 *
          proc_control_node_B.A2[proc_control_node_B.i21];
      }

      proc_control_node_B.d_n = 30240.0;
    } else {
      for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 13;
           proc_control_node_B.i21++) {
        memset(&proc_control_node_B.A4[proc_control_node_B.i21 * 13], 0, 13U *
               sizeof(real_T));
        for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
             proc_control_node_B.e_k++) {
          for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 13;
               proc_control_node_B.e_k_m++) {
            proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i21 +
              proc_control_node_B.e_k_m;
            proc_control_node_B.A4[proc_control_node_B.A2_tmp] +=
              proc_control_node_B.A3[13 * proc_control_node_B.e_k +
              proc_control_node_B.e_k_m] * proc_control_node_B.A2[13 *
              proc_control_node_B.i21 + proc_control_node_B.e_k];
          }
        }
      }

      switch (m) {
       case 7:
        for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 169;
             proc_control_node_B.i21++) {
          proc_control_node_B.U_k[proc_control_node_B.i21] = (1512.0 *
            proc_control_node_B.A3[proc_control_node_B.i21] +
            proc_control_node_B.A4[proc_control_node_B.i21]) + 277200.0 *
            proc_control_node_B.A2[proc_control_node_B.i21];
        }

        proc_control_node_B.e_k_m = 0;
        proc_control_node_B.A2_tmp = 0;
        for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
             proc_control_node_B.e_k++) {
          memset(&proc_control_node_B.A4_i[proc_control_node_B.A2_tmp], 0, 13U *
                 sizeof(real_T));
          proc_control_node_B.U_k[proc_control_node_B.e_k_m] += 8.64864E+6;
          proc_control_node_B.e_k_m += 14;
          proc_control_node_B.A2_tmp += 13;
        }

        proc_control_node_B.e_k_m = 0;
        for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
             proc_control_node_B.e_k++) {
          proc_control_node_B.A2_tmp = 0;
          for (proc_control_node_B.i22 = 0; proc_control_node_B.i22 < 13;
               proc_control_node_B.i22++) {
            for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 13;
                 proc_control_node_B.i21++) {
              proc_control_node_B.A_tmp = proc_control_node_B.i21 +
                proc_control_node_B.e_k_m;
              proc_control_node_B.A4_i[proc_control_node_B.A_tmp] +=
                A[proc_control_node_B.i21 + proc_control_node_B.A2_tmp] *
                proc_control_node_B.U_k[proc_control_node_B.i22 +
                proc_control_node_B.e_k_m];
            }

            proc_control_node_B.A2_tmp += 13;
          }

          proc_control_node_B.e_k_m += 13;
        }

        for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 169;
             proc_control_node_B.i21++) {
          proc_control_node_B.U_k[proc_control_node_B.i21] =
            proc_control_node_B.A4_i[proc_control_node_B.i21];
          proc_control_node_B.V[proc_control_node_B.i21] = (56.0 *
            proc_control_node_B.A4[proc_control_node_B.i21] + 25200.0 *
            proc_control_node_B.A3[proc_control_node_B.i21]) + 1.99584E+6 *
            proc_control_node_B.A2[proc_control_node_B.i21];
        }

        proc_control_node_B.d_n = 1.729728E+7;
        break;

       case 9:
        for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 13;
             proc_control_node_B.i21++) {
          memset(&proc_control_node_B.V[proc_control_node_B.i21 * 13], 0, 13U *
                 sizeof(real_T));
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 13;
                 proc_control_node_B.e_k_m++) {
              proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i21 +
                proc_control_node_B.e_k_m;
              proc_control_node_B.V[proc_control_node_B.A2_tmp] +=
                proc_control_node_B.A4[13 * proc_control_node_B.e_k +
                proc_control_node_B.e_k_m] * proc_control_node_B.A2[13 *
                proc_control_node_B.i21 + proc_control_node_B.e_k];
            }
          }
        }

        for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 169;
             proc_control_node_B.i21++) {
          proc_control_node_B.U_k[proc_control_node_B.i21] = ((3960.0 *
            proc_control_node_B.A4[proc_control_node_B.i21] +
            proc_control_node_B.V[proc_control_node_B.i21]) + 2.16216E+6 *
            proc_control_node_B.A3[proc_control_node_B.i21]) + 3.027024E+8 *
            proc_control_node_B.A2[proc_control_node_B.i21];
        }

        proc_control_node_B.e_k_m = 0;
        proc_control_node_B.A2_tmp = 0;
        for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
             proc_control_node_B.e_k++) {
          memset(&proc_control_node_B.A4_i[proc_control_node_B.A2_tmp], 0, 13U *
                 sizeof(real_T));
          proc_control_node_B.U_k[proc_control_node_B.e_k_m] += 8.8216128E+9;
          proc_control_node_B.e_k_m += 14;
          proc_control_node_B.A2_tmp += 13;
        }

        proc_control_node_B.e_k_m = 0;
        for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
             proc_control_node_B.e_k++) {
          proc_control_node_B.A2_tmp = 0;
          for (proc_control_node_B.i22 = 0; proc_control_node_B.i22 < 13;
               proc_control_node_B.i22++) {
            for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 13;
                 proc_control_node_B.i21++) {
              proc_control_node_B.A_tmp = proc_control_node_B.i21 +
                proc_control_node_B.e_k_m;
              proc_control_node_B.A4_i[proc_control_node_B.A_tmp] +=
                A[proc_control_node_B.i21 + proc_control_node_B.A2_tmp] *
                proc_control_node_B.U_k[proc_control_node_B.i22 +
                proc_control_node_B.e_k_m];
            }

            proc_control_node_B.A2_tmp += 13;
          }

          proc_control_node_B.e_k_m += 13;
        }

        for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 169;
             proc_control_node_B.i21++) {
          proc_control_node_B.U_k[proc_control_node_B.i21] =
            proc_control_node_B.A4_i[proc_control_node_B.i21];
          proc_control_node_B.V[proc_control_node_B.i21] = ((90.0 *
            proc_control_node_B.V[proc_control_node_B.i21] + 110880.0 *
            proc_control_node_B.A4[proc_control_node_B.i21]) + 3.027024E+7 *
            proc_control_node_B.A3[proc_control_node_B.i21]) + 2.0756736E+9 *
            proc_control_node_B.A2[proc_control_node_B.i21];
        }

        proc_control_node_B.d_n = 1.76432256E+10;
        break;

       default:
        for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 169;
             proc_control_node_B.i21++) {
          proc_control_node_B.U_k[proc_control_node_B.i21] = (3.352212864E+10 *
            proc_control_node_B.A4[proc_control_node_B.i21] + 1.05594705216E+13 *
            proc_control_node_B.A3[proc_control_node_B.i21]) +
            1.1873537964288E+15 * proc_control_node_B.A2[proc_control_node_B.i21];
        }

        proc_control_node_B.e_k_m = 0;
        for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
             proc_control_node_B.e_k++) {
          proc_control_node_B.U_k[proc_control_node_B.e_k_m] +=
            3.238237626624E+16;
          proc_control_node_B.e_k_m += 14;
        }

        for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 169;
             proc_control_node_B.i21++) {
          proc_control_node_B.V[proc_control_node_B.i21] = (16380.0 *
            proc_control_node_B.A3[proc_control_node_B.i21] +
            proc_control_node_B.A4[proc_control_node_B.i21]) + 4.08408E+7 *
            proc_control_node_B.A2[proc_control_node_B.i21];
        }

        for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 13;
             proc_control_node_B.i21++) {
          proc_control_node_B.e_k_m = 0;
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            proc_control_node_B.d_n = 0.0;
            proc_control_node_B.A2_tmp = 0;
            for (proc_control_node_B.i22 = 0; proc_control_node_B.i22 < 13;
                 proc_control_node_B.i22++) {
              proc_control_node_B.d_n +=
                proc_control_node_B.A4[proc_control_node_B.A2_tmp +
                proc_control_node_B.i21] *
                proc_control_node_B.V[proc_control_node_B.i22 +
                proc_control_node_B.e_k_m];
              proc_control_node_B.A2_tmp += 13;
            }

            proc_control_node_B.A2_tmp = proc_control_node_B.e_k_m +
              proc_control_node_B.i21;
            proc_control_node_B.A4_i[proc_control_node_B.A2_tmp] =
              proc_control_node_B.U_k[proc_control_node_B.A2_tmp] +
              proc_control_node_B.d_n;
            proc_control_node_B.e_k_m += 13;
          }
        }

        for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 13;
             proc_control_node_B.i21++) {
          memset(&proc_control_node_B.U_k[proc_control_node_B.i21 * 13], 0, 13U *
                 sizeof(real_T));
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 13;
                 proc_control_node_B.e_k_m++) {
              proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i21 +
                proc_control_node_B.e_k_m;
              proc_control_node_B.U_k[proc_control_node_B.A2_tmp] += A[13 *
                proc_control_node_B.e_k + proc_control_node_B.e_k_m] *
                proc_control_node_B.A4_i[13 * proc_control_node_B.i21 +
                proc_control_node_B.e_k];
            }
          }
        }

        for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 169;
             proc_control_node_B.i21++) {
          proc_control_node_B.A4_i[proc_control_node_B.i21] = (182.0 *
            proc_control_node_B.A4[proc_control_node_B.i21] + 960960.0 *
            proc_control_node_B.A3[proc_control_node_B.i21]) + 1.32324192E+9 *
            proc_control_node_B.A2[proc_control_node_B.i21];
        }

        for (proc_control_node_B.i21 = 0; proc_control_node_B.i21 < 13;
             proc_control_node_B.i21++) {
          proc_control_node_B.e_k_m = 0;
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            proc_control_node_B.d_n = 0.0;
            proc_control_node_B.A2_tmp = 0;
            for (proc_control_node_B.i22 = 0; proc_control_node_B.i22 < 13;
                 proc_control_node_B.i22++) {
              proc_control_node_B.d_n +=
                proc_control_node_B.A4[proc_control_node_B.A2_tmp +
                proc_control_node_B.i21] *
                proc_control_node_B.A4_i[proc_control_node_B.i22 +
                proc_control_node_B.e_k_m];
              proc_control_node_B.A2_tmp += 13;
            }

            proc_control_node_B.A2_tmp = proc_control_node_B.e_k_m +
              proc_control_node_B.i21;
            proc_control_node_B.V[proc_control_node_B.A2_tmp] =
              ((proc_control_node_B.A4[proc_control_node_B.A2_tmp] *
                6.704425728E+11 + proc_control_node_B.d_n) +
               proc_control_node_B.A3[proc_control_node_B.A2_tmp] *
               1.29060195264E+14) +
              proc_control_node_B.A2[proc_control_node_B.A2_tmp] *
              7.7717703038976E+15;
            proc_control_node_B.e_k_m += 13;
          }
        }

        proc_control_node_B.d_n = 6.476475253248E+16;
        break;
      }
    }
  }

  proc_control_node_B.e_k_m = 0;
  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
       proc_control_node_B.e_k++) {
    proc_control_node_B.V[proc_control_node_B.e_k_m] += proc_control_node_B.d_n;
    proc_control_node_B.e_k_m += 14;
  }

  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 169;
       proc_control_node_B.e_k++) {
    proc_control_node_B.V[proc_control_node_B.e_k] -=
      proc_control_node_B.U_k[proc_control_node_B.e_k];
    proc_control_node_B.U_k[proc_control_node_B.e_k] *= 2.0;
  }

  proc_control_node_lusolve_e(proc_control_node_B.V, proc_control_node_B.U_k, F);
  proc_control_node_B.e_k_m = 0;
  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
       proc_control_node_B.e_k++) {
    F[proc_control_node_B.e_k_m]++;
    proc_control_node_B.e_k_m += 14;
  }
}

// Function for MATLAB Function: '<S131>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_node_expm(real_T A[169], real_T
  F[169])
{
  static const real_T theta[5] = { 0.01495585217958292, 0.253939833006323,
    0.95041789961629319, 2.097847961257068, 5.3719203511481517 };

  static const uint8_T b[5] = { 3U, 5U, 7U, 9U, 13U };

  boolean_T exitg1;
  proc_control_node_B.normA = 0.0;
  proc_control_node_B.b_j_h = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.b_j_h < 13)) {
    proc_control_node_B.b_s = 0.0;
    for (proc_control_node_B.b_i_n = 0; proc_control_node_B.b_i_n < 13;
         proc_control_node_B.b_i_n++) {
      proc_control_node_B.b_s += fabs(A[13 * proc_control_node_B.b_j_h +
        proc_control_node_B.b_i_n]);
    }

    if (rtIsNaN(proc_control_node_B.b_s)) {
      proc_control_node_B.normA = (rtNaN);
      exitg1 = true;
    } else {
      if (proc_control_node_B.b_s > proc_control_node_B.normA) {
        proc_control_node_B.normA = proc_control_node_B.b_s;
      }

      proc_control_node_B.b_j_h++;
    }
  }

  if (proc_control_node_B.normA <= 5.3719203511481517) {
    proc_control_node_B.b_j_h = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.b_j_h < 5)) {
      if (proc_control_node_B.normA <= theta[proc_control_node_B.b_j_h]) {
        proc__PadeApproximantOfDegree_k(A, b[proc_control_node_B.b_j_h], F);
        exitg1 = true;
      } else {
        proc_control_node_B.b_j_h++;
      }
    }
  } else {
    proc_control_node_B.b_s = proc_control_node_B.normA / 5.3719203511481517;
    if ((!rtIsInf(proc_control_node_B.b_s)) && (!rtIsNaN(proc_control_node_B.b_s)))
    {
      proc_control_node_B.b_s = frexp(proc_control_node_B.b_s,
        &proc_control_node_B.e_b);
    } else {
      proc_control_node_B.e_b = 0;
    }

    proc_control_node_B.normA = proc_control_node_B.e_b;
    if (proc_control_node_B.b_s == 0.5) {
      proc_control_node_B.normA = static_cast<real_T>(proc_control_node_B.e_b) -
        1.0;
    }

    proc_control_node_B.b_s = rt_powd_snf(2.0, proc_control_node_B.normA);
    for (proc_control_node_B.b_i_n = 0; proc_control_node_B.b_i_n < 169;
         proc_control_node_B.b_i_n++) {
      A[proc_control_node_B.b_i_n] /= proc_control_node_B.b_s;
    }

    proc__PadeApproximantOfDegree_k(A, 13, F);
    proc_control_node_B.b_j_h = 0;
    while (proc_control_node_B.b_j_h <= static_cast<int32_T>
           (proc_control_node_B.normA) - 1) {
      for (proc_control_node_B.b_i_n = 0; proc_control_node_B.b_i_n < 13;
           proc_control_node_B.b_i_n++) {
        proc_control_node_B.e_b = 0;
        for (proc_control_node_B.i18 = 0; proc_control_node_B.i18 < 13;
             proc_control_node_B.i18++) {
          proc_control_node_B.F_tmp = proc_control_node_B.e_b +
            proc_control_node_B.b_i_n;
          proc_control_node_B.F[proc_control_node_B.F_tmp] = 0.0;
          proc_control_node_B.i20 = 0;
          for (proc_control_node_B.i19 = 0; proc_control_node_B.i19 < 13;
               proc_control_node_B.i19++) {
            proc_control_node_B.F[proc_control_node_B.F_tmp] +=
              F[proc_control_node_B.i20 + proc_control_node_B.b_i_n] *
              F[proc_control_node_B.i19 + proc_control_node_B.e_b];
            proc_control_node_B.i20 += 13;
          }

          proc_control_node_B.e_b += 13;
        }
      }

      memcpy(&F[0], &proc_control_node_B.F[0], 169U * sizeof(real_T));
      proc_control_node_B.b_j_h++;
    }
  }
}

// Function for MATLAB Function: '<S217>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control__mpc_plantupdate_k(const real_T
  a[169], real_T b[104], const real_T c[169], real_T b_A[441], real_T b_B[630],
  real_T b_C[273], const real_T b_D[390], const real_T b_mvindex[8], const
  real_T b_myindex[13], const real_T b_Uscale[8], const real_T b_Yscale[13],
  real_T Bu[168], real_T Bv[21], real_T Cm[273], real_T Dv[13], real_T Dvm[13],
  real_T QQ[441], real_T RR[169], real_T NN[273])
{
  int32_T b_tmp;
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  int32_T tmp;
  i_1 = 0;
  for (i_0 = 0; i_0 < 8; i_0++) {
    for (i = 0; i < 13; i++) {
      b_tmp = i + i_1;
      b[b_tmp] *= b_Uscale[i_0];
    }

    i_1 += 13;
  }

  i_1 = 0;
  i_0 = 0;
  for (i = 0; i < 13; i++) {
    for (b_tmp = 0; b_tmp < 13; b_tmp++) {
      tmp = b_tmp + i_1;
      b_C[tmp] = c[tmp] / b_Yscale[b_tmp];
      b_A[b_tmp + i_0] = a[tmp];
    }

    i_1 += 13;
    i_0 += 21;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
      b_B[i_0 + 21 * i_1] = b[(static_cast<int32_T>(b_mvindex[i_1]) - 1) * 13 +
        i_0];
    }

    memcpy(&Bu[i_1 * 21], &b_B[i_1 * 21], 21U * sizeof(real_T));
  }

  for (i_1 = 0; i_1 < 21; i_1++) {
    Bv[i_1] = b_B[i_1 + 168];
    for (i_0 = 0; i_0 < 13; i_0++) {
      Cm[i_0 + 13 * i_1] = b_C[(13 * i_1 + static_cast<int32_T>(b_myindex[i_0]))
        - 1];
    }
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    Dv[i_1] = b_D[i_1 + 104];
    Dvm[i_1] = b_D[static_cast<int32_T>(b_myindex[i_1]) + 103];
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    proc_control_node_B.UnknownIn[i_1] = 0;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    proc_control_node_B.UnknownIn[i_1] = static_cast<int8_T>(i_1 + 1);
  }

  for (i_1 = 0; i_1 < 21; i_1++) {
    proc_control_node_B.UnknownIn[i_1 + 8] = static_cast<int8_T>(i_1 + 10);
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    for (i_0 = 0; i_0 < 21; i_0++) {
      proc_control_node_B.b_B[i_0 + 34 * i_1] = b_B
        [(proc_control_node_B.UnknownIn[i_1] - 1) * 21 + i_0];
    }
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.b_B[(i_0 + 34 * i_1) + 21] = b_D
        [((proc_control_node_B.UnknownIn[i_1] - 1) * 13 + static_cast<int32_T>
          (b_myindex[i_0])) - 1];
    }
  }

  for (i_1 = 0; i_1 < 21; i_1++) {
    for (i_0 = 0; i_0 < 29; i_0++) {
      proc_control_node_B.b_B_b[i_0 + 29 * i_1] = b_B
        [(proc_control_node_B.UnknownIn[i_0] - 1) * 21 + i_1];
    }
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    for (i_0 = 0; i_0 < 29; i_0++) {
      proc_control_node_B.b_B_b[i_0 + 29 * (i_1 + 21)] = b_D
        [((proc_control_node_B.UnknownIn[i_0] - 1) * 13 + static_cast<int32_T>
          (b_myindex[i_1])) - 1];
    }
  }

  for (i_1 = 0; i_1 < 34; i_1++) {
    memset(&proc_control_node_B.CovMat[i_1 * 34], 0, 34U * sizeof(real_T));
    for (i = 0; i < 29; i++) {
      for (i_0 = 0; i_0 < 34; i_0++) {
        b_tmp = 34 * i_1 + i_0;
        proc_control_node_B.CovMat[b_tmp] += proc_control_node_B.b_B[34 * i +
          i_0] * proc_control_node_B.b_B_b[29 * i_1 + i];
      }
    }
  }

  i_1 = 0;
  i_0 = 0;
  for (i = 0; i < 21; i++) {
    memcpy(&QQ[i_1], &proc_control_node_B.CovMat[i_0], 21U * sizeof(real_T));
    i_1 += 21;
    i_0 += 34;
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    memcpy(&RR[i_1 * 13], &proc_control_node_B.CovMat[i_1 * 34 + 735], 13U *
           sizeof(real_T));
    memcpy(&NN[i_1 * 21], &proc_control_node_B.CovMat[i_1 * 34 + 714], 21U *
           sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S217>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_mod_b(real_T x)
{
  real_T r;
  if (rtIsNaN(x)) {
    r = (rtNaN);
  } else if (rtIsInf(x)) {
    r = (rtNaN);
  } else if (x == 0.0) {
    r = 0.0;
  } else {
    r = fmod(x, proc_control_node_ny_f);
    if (r == 0.0) {
      r = 0.0;
    } else if (x < 0.0) {
      r += proc_control_node_ny_f;
    }
  }

  return r;
}

// Function for MATLAB Function: '<S217>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_co_mpc_updateFromNominal_h(real_T b_Mlim
  [32], const real_T b_Mrows[32], const real_T U0[8], const real_T b_Uscale[8],
  const real_T old_mvoff[8], const real_T b_mvindex[8], real_T b_utarget[80],
  const real_T Y0[13], const real_T b_Yscale[13], const real_T old_yoff[13],
  const real_T b_myindex[13], const real_T X0[13], real_T b_xoff[21], const
  real_T DX0[13], real_T Bv[231], real_T new_mvoff[8], real_T new_yoff[13],
  real_T new_myoff[13])
{
  real_T U;
  int32_T b_ct;
  int32_T b_utarget_tmp;
  int32_T i;
  for (i = 0; i < 8; i++) {
    proc_control_node_B.U_o[i] = U0[i] / b_Uscale[i];
  }

  for (i = 0; i < 13; i++) {
    new_yoff[i] = Y0[i] / b_Yscale[i];
  }

  for (i = 0; i < 8; i++) {
    proc_control_node_B.k = b_mvindex[i];
    new_mvoff[i] = U0[static_cast<int32_T>(proc_control_node_B.k) - 1] /
      b_Uscale[static_cast<int32_T>(proc_control_node_B.k) - 1];
  }

  for (i = 0; i < 13; i++) {
    new_myoff[i] = new_yoff[static_cast<int32_T>(b_myindex[i]) - 1];
  }

  for (b_ct = 0; b_ct < 32; b_ct++) {
    proc_control_node_B.k = b_Mrows[b_ct];
    if (proc_control_node_B.k <= 130.0) {
      proc_control_node_B.k = proc_control_node_mod_b(proc_control_node_B.k -
        1.0) + 1.0;
      b_Mlim[b_ct] += old_yoff[static_cast<int32_T>(proc_control_node_B.k) - 1]
        - new_yoff[static_cast<int32_T>(proc_control_node_B.k) - 1];
    } else if (proc_control_node_B.k <= 260.0) {
      proc_control_node_B.k = proc_control_node_mod_b((proc_control_node_B.k -
        130.0) - 1.0) + 1.0;
      b_Mlim[b_ct] -= old_yoff[static_cast<int32_T>(proc_control_node_B.k) - 1]
        - new_yoff[static_cast<int32_T>(proc_control_node_B.k) - 1];
    } else if (proc_control_node_B.k <= 340.0) {
      proc_control_node_B.k = proc_control_node_mod_n((proc_control_node_B.k -
        260.0) - 1.0) + 1.0;
      b_Mlim[b_ct] += old_mvoff[static_cast<int32_T>(proc_control_node_B.k) - 1]
        - proc_control_node_B.U_o[static_cast<int32_T>(b_mvindex
        [static_cast<int32_T>(proc_control_node_B.k) - 1]) - 1];
    } else if (proc_control_node_B.k <= 420.0) {
      proc_control_node_B.k = proc_control_node_mod_n(((proc_control_node_B.k -
        260.0) - 80.0) - 1.0) + 1.0;
      b_Mlim[b_ct] -= old_mvoff[static_cast<int32_T>(proc_control_node_B.k) - 1]
        - proc_control_node_B.U_o[static_cast<int32_T>(b_mvindex
        [static_cast<int32_T>(proc_control_node_B.k) - 1]) - 1];
    }
  }

  for (b_ct = 0; b_ct < 8; b_ct++) {
    proc_control_node_B.k = old_mvoff[b_ct];
    U = proc_control_node_B.U_o[static_cast<int32_T>(b_mvindex[b_ct]) - 1];
    for (i = 0; i < 10; i++) {
      b_utarget_tmp = (i << 3) + b_ct;
      b_utarget[b_utarget_tmp] = (b_utarget[b_utarget_tmp] +
        proc_control_node_B.k) - U;
    }
  }

  memcpy(&b_xoff[0], &X0[0], 13U * sizeof(real_T));
  memcpy(&Bv[0], &DX0[0], 13U * sizeof(real_T));
}

// Function for MATLAB Function: '<S217>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_contr_mpc_constraintcoef_m(const real_T
  b_A[441], const real_T Bu[168], const real_T Bv[21], const real_T b_C[273],
  const real_T Dv[13], const real_T b_Jm[1280], real_T b_SuJm[2080], real_T
  b_Sx[2730], real_T b_Su1[1040], real_T b_Hv[1430])
{
  int32_T CA_tmp;
  int32_T i_0;
  int32_T i_1;
  int32_T i_2;
  int32_T tmp;
  uint8_T i;
  for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 21;
       proc_control_node_B.i36++) {
    memset(&proc_control_node_B.CA[proc_control_node_B.i36 * 13], 0, 13U *
           sizeof(real_T));
    for (i_0 = 0; i_0 < 21; i_0++) {
      for (proc_control_node_B.i35 = 0; proc_control_node_B.i35 < 13;
           proc_control_node_B.i35++) {
        CA_tmp = 13 * proc_control_node_B.i36 + proc_control_node_B.i35;
        proc_control_node_B.CA[CA_tmp] += b_C[13 * i_0 + proc_control_node_B.i35]
          * b_A[21 * proc_control_node_B.i36 + i_0];
      }
    }
  }

  for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 8;
       proc_control_node_B.i36++) {
    memset(&proc_control_node_B.Sum_g[proc_control_node_B.i36 * 13], 0, 13U *
           sizeof(real_T));
    for (i_0 = 0; i_0 < 21; i_0++) {
      for (proc_control_node_B.i35 = 0; proc_control_node_B.i35 < 13;
           proc_control_node_B.i35++) {
        CA_tmp = 13 * proc_control_node_B.i36 + proc_control_node_B.i35;
        proc_control_node_B.Sum_g[CA_tmp] += b_C[13 * i_0 +
          proc_control_node_B.i35] * Bu[21 * proc_control_node_B.i36 + i_0];
      }
    }
  }

  memset(&proc_control_node_B.b_C_h[0], 0, 13U * sizeof(real_T));
  proc_control_node_B.i35 = 0;
  for (i_0 = 0; i_0 < 21; i_0++) {
    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 13;
         proc_control_node_B.i36++) {
      proc_control_node_B.b_C_h[proc_control_node_B.i36] +=
        b_C[proc_control_node_B.i36 + proc_control_node_B.i35] * Bv[i_0];
    }

    proc_control_node_B.i35 += 13;
  }

  for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 13;
       proc_control_node_B.i36++) {
    b_Hv[proc_control_node_B.i36] =
      proc_control_node_B.b_C_h[proc_control_node_B.i36];
    b_Hv[proc_control_node_B.i36 + 130] = Dv[proc_control_node_B.i36];
  }

  proc_control_node_B.i36 = 0;
  for (proc_control_node_B.i35 = 0; proc_control_node_B.i35 < 9;
       proc_control_node_B.i35++) {
    memset(&b_Hv[proc_control_node_B.i36 + 260], 0, 13U * sizeof(real_T));
    proc_control_node_B.i36 += 130;
  }

  proc_control_node_B.i36 = 0;
  for (proc_control_node_B.i35 = 0; proc_control_node_B.i35 < 11;
       proc_control_node_B.i35++) {
    memset(&b_Hv[proc_control_node_B.i36 + 13], 0, 117U * sizeof(real_T));
    proc_control_node_B.i36 += 130;
  }

  for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 21;
       proc_control_node_B.i36++) {
    memcpy(&b_Sx[proc_control_node_B.i36 * 130],
           &proc_control_node_B.CA[proc_control_node_B.i36 * 13], 13U * sizeof
           (real_T));
    memset(&b_Sx[proc_control_node_B.i36 * 130 + 13], 0, 117U * sizeof(real_T));
  }

  for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 8;
       proc_control_node_B.i36++) {
    memcpy(&b_Su1[proc_control_node_B.i36 * 130],
           &proc_control_node_B.Sum_g[proc_control_node_B.i36 * 13], 13U *
           sizeof(real_T));
    memset(&b_Su1[proc_control_node_B.i36 * 130 + 13], 0, 117U * sizeof(real_T));
    memcpy(&proc_control_node_B.Su[proc_control_node_B.i36 * 130],
           &proc_control_node_B.Sum_g[proc_control_node_B.i36 * 13], 13U *
           sizeof(real_T));
  }

  proc_control_node_B.i36 = 0;
  for (proc_control_node_B.i35 = 0; proc_control_node_B.i35 < 72;
       proc_control_node_B.i35++) {
    memset(&proc_control_node_B.Su[proc_control_node_B.i36 + 1040], 0, 13U *
           sizeof(real_T));
    proc_control_node_B.i36 += 130;
  }

  proc_control_node_B.i36 = 0;
  for (proc_control_node_B.i35 = 0; proc_control_node_B.i35 < 80;
       proc_control_node_B.i35++) {
    memset(&proc_control_node_B.Su[proc_control_node_B.i36 + 13], 0, 117U *
           sizeof(real_T));
    proc_control_node_B.i36 += 130;
  }

  for (proc_control_node_B.i_pi = 0; proc_control_node_B.i_pi < 9;
       proc_control_node_B.i_pi++) {
    i = static_cast<uint8_T>((proc_control_node_B.i_pi + 1) * 13U + 1U);
    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 13;
         proc_control_node_B.i36++) {
      proc_control_node_B.rows[proc_control_node_B.i36] = static_cast<uint8_T>(
        static_cast<uint32_T>(proc_control_node_B.i36) + i);
      proc_control_node_B.i35 = 0;
      i_0 = 0;
      for (i_1 = 0; i_1 < 8; i_1++) {
        proc_control_node_B.Sum_n = 0.0;
        tmp = 0;
        for (i_2 = 0; i_2 < 21; i_2++) {
          proc_control_node_B.Sum_n += proc_control_node_B.CA[tmp +
            proc_control_node_B.i36] * Bu[i_2 + i_0];
          tmp += 13;
        }

        CA_tmp = proc_control_node_B.i35 + proc_control_node_B.i36;
        proc_control_node_B.Sum_g[CA_tmp] += proc_control_node_B.Sum_n;
        proc_control_node_B.i35 += 13;
        i_0 += 21;
      }
    }

    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 8;
         proc_control_node_B.i36++) {
      for (proc_control_node_B.i35 = 0; proc_control_node_B.i35 < 13;
           proc_control_node_B.i35++) {
        CA_tmp = 13 * proc_control_node_B.i36 + proc_control_node_B.i35;
        proc_control_node_B.Sum_n = proc_control_node_B.Sum_g[CA_tmp];
        b_Su1[(proc_control_node_B.rows[proc_control_node_B.i35] + 130 *
               proc_control_node_B.i36) - 1] = proc_control_node_B.Sum_n;
        proc_control_node_B.Sum_da[CA_tmp] = proc_control_node_B.Sum_n;
      }
    }

    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 72;
         proc_control_node_B.i36++) {
      for (proc_control_node_B.i35 = 0; proc_control_node_B.i35 < 13;
           proc_control_node_B.i35++) {
        proc_control_node_B.Sum_da[proc_control_node_B.i35 + 13 *
          (proc_control_node_B.i36 + 8)] = proc_control_node_B.Su[(130 *
          proc_control_node_B.i36 +
          proc_control_node_B.rows[proc_control_node_B.i35]) - 14];
      }
    }

    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 80;
         proc_control_node_B.i36++) {
      for (proc_control_node_B.i35 = 0; proc_control_node_B.i35 < 13;
           proc_control_node_B.i35++) {
        proc_control_node_B.Su[(proc_control_node_B.rows[proc_control_node_B.i35]
          + 130 * proc_control_node_B.i36) - 1] = proc_control_node_B.Sum_da[13 *
          proc_control_node_B.i36 + proc_control_node_B.i35];
      }
    }

    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 13;
         proc_control_node_B.i36++) {
      proc_control_node_B.b_C_h[proc_control_node_B.i36] = 0.0;
      proc_control_node_B.i35 = 0;
      for (i_0 = 0; i_0 < 21; i_0++) {
        proc_control_node_B.b_C_h[proc_control_node_B.i36] +=
          proc_control_node_B.CA[proc_control_node_B.i35 +
          proc_control_node_B.i36] * Bv[i_0];
        proc_control_node_B.i35 += 13;
      }

      proc_control_node_B.CA_n[proc_control_node_B.i36] =
        proc_control_node_B.b_C_h[proc_control_node_B.i36];
    }

    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 10;
         proc_control_node_B.i36++) {
      for (proc_control_node_B.i35 = 0; proc_control_node_B.i35 < 13;
           proc_control_node_B.i35++) {
        proc_control_node_B.CA_n[proc_control_node_B.i35 + 13 *
          (proc_control_node_B.i36 + 1)] = b_Hv[(130 * proc_control_node_B.i36 +
          proc_control_node_B.rows[proc_control_node_B.i35]) - 14];
      }
    }

    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 11;
         proc_control_node_B.i36++) {
      for (proc_control_node_B.i35 = 0; proc_control_node_B.i35 < 13;
           proc_control_node_B.i35++) {
        b_Hv[(proc_control_node_B.rows[proc_control_node_B.i35] + 130 *
              proc_control_node_B.i36) - 1] = proc_control_node_B.CA_n[13 *
          proc_control_node_B.i36 + proc_control_node_B.i35];
      }
    }

    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 13;
         proc_control_node_B.i36++) {
      proc_control_node_B.i35 = 0;
      i_0 = 0;
      for (i_1 = 0; i_1 < 21; i_1++) {
        CA_tmp = proc_control_node_B.i35 + proc_control_node_B.i36;
        proc_control_node_B.CA_k[CA_tmp] = 0.0;
        tmp = 0;
        for (i_2 = 0; i_2 < 21; i_2++) {
          proc_control_node_B.CA_k[CA_tmp] += proc_control_node_B.CA[tmp +
            proc_control_node_B.i36] * b_A[i_2 + i_0];
          tmp += 13;
        }

        proc_control_node_B.i35 += 13;
        i_0 += 21;
      }
    }

    memcpy(&proc_control_node_B.CA[0], &proc_control_node_B.CA_k[0], 273U *
           sizeof(real_T));
    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 21;
         proc_control_node_B.i36++) {
      for (proc_control_node_B.i35 = 0; proc_control_node_B.i35 < 13;
           proc_control_node_B.i35++) {
        b_Sx[(proc_control_node_B.rows[proc_control_node_B.i35] + 130 *
              proc_control_node_B.i36) - 1] = proc_control_node_B.CA[13 *
          proc_control_node_B.i36 + proc_control_node_B.i35];
      }
    }
  }

  for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 16;
       proc_control_node_B.i36++) {
    memset(&b_SuJm[proc_control_node_B.i36 * 130], 0, 130U * sizeof(real_T));
    for (i_0 = 0; i_0 < 80; i_0++) {
      for (proc_control_node_B.i35 = 0; proc_control_node_B.i35 < 130;
           proc_control_node_B.i35++) {
        proc_control_node_B.i_pi = 130 * proc_control_node_B.i36 +
          proc_control_node_B.i35;
        b_SuJm[proc_control_node_B.i_pi] += proc_control_node_B.Su[130 * i_0 +
          proc_control_node_B.i35] * b_Jm[80 * proc_control_node_B.i36 + i_0];
      }
    }
  }
}

// Function for MATLAB Function: '<S217>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_con_mpc_calculatehessian_c(const real_T
  b_Wy[13], const real_T b_Wu[8], const real_T b_Wdu[8], const real_T b_SuJm
  [2080], const real_T I2Jm[1280], const real_T b_Jm[1280], const real_T b_I1
  [640], const real_T b_Su1[1040], const real_T b_Sx[2730], const real_T b_Hv
  [1430], real_T nmv, real_T b_ny, real_T b_H[256], real_T b_Ku1[128], real_T
  b_Kut[1280], real_T b_Kx[336], real_T b_Kv[176], real_T b_Kr[2080])
{
  int32_T b_Kr_tmp;
  int32_T b_SuJm_tmp;
  int16_T ixw;
  ixw = 1;
  for (proc_control_node_B.i_c0 = 0; proc_control_node_B.i_c0 < 130;
       proc_control_node_B.i_c0++) {
    proc_control_node_B.b_Wy_j = b_Wy[ixw - 1];
    for (proc_control_node_B.i38 = 0; proc_control_node_B.i38 < 16;
         proc_control_node_B.i38++) {
      b_Kr_tmp = 130 * proc_control_node_B.i38 + proc_control_node_B.i_c0;
      b_Kr[b_Kr_tmp] = b_SuJm[b_Kr_tmp] * proc_control_node_B.b_Wy_j;
    }

    proc_control_node_B.i38 = ixw + 1;
    if (ixw + 1 > 32767) {
      proc_control_node_B.i38 = 32767;
    }

    ixw = static_cast<int16_T>(proc_control_node_B.i38);
    if (static_cast<int16_T>(proc_control_node_B.i38) > 13) {
      proc_control_node_B.b_Wy_j = rt_roundd_snf(13.0 - b_ny);
      if (proc_control_node_B.b_Wy_j < 32768.0) {
        if (proc_control_node_B.b_Wy_j >= -32768.0) {
          ixw = static_cast<int16_T>(proc_control_node_B.b_Wy_j);
        } else {
          ixw = MIN_int16_T;
        }
      } else {
        ixw = MAX_int16_T;
      }

      proc_control_node_B.i38 = ixw + 1;
      if (proc_control_node_B.b_Wy_j < 32768.0) {
        if (proc_control_node_B.b_Wy_j >= -32768.0) {
          ixw = static_cast<int16_T>(proc_control_node_B.b_Wy_j);
        } else {
          ixw = MIN_int16_T;
        }
      } else {
        ixw = MAX_int16_T;
      }

      if (ixw + 1 > 32767) {
        proc_control_node_B.i38 = 32767;
      }

      ixw = static_cast<int16_T>(proc_control_node_B.i38);
    }
  }

  proc_control_node_WtMult(b_Wu, I2Jm, nmv, b_Kut);
  proc_control_node_WtMult(b_Wdu, b_Jm, nmv, proc_control_node_B.dv1);
  for (proc_control_node_B.i38 = 0; proc_control_node_B.i38 < 16;
       proc_control_node_B.i38++) {
    for (proc_control_node_B.i_c0 = 0; proc_control_node_B.i_c0 < 16;
         proc_control_node_B.i_c0++) {
      b_SuJm_tmp = proc_control_node_B.i_c0 + (proc_control_node_B.i38 << 4);
      proc_control_node_B.b_SuJm_a[b_SuJm_tmp] = 0.0;
      for (b_Kr_tmp = 0; b_Kr_tmp < 130; b_Kr_tmp++) {
        proc_control_node_B.b_SuJm_a[b_SuJm_tmp] += b_SuJm[130 *
          proc_control_node_B.i_c0 + b_Kr_tmp] * b_Kr[130 *
          proc_control_node_B.i38 + b_Kr_tmp];
      }

      proc_control_node_B.b_Jm_g[b_SuJm_tmp] = 0.0;
      for (b_Kr_tmp = 0; b_Kr_tmp < 80; b_Kr_tmp++) {
        proc_control_node_B.b_Jm_g[b_SuJm_tmp] += b_Jm[80 *
          proc_control_node_B.i_c0 + b_Kr_tmp] * proc_control_node_B.dv1[80 *
          proc_control_node_B.i38 + b_Kr_tmp];
      }
    }
  }

  for (proc_control_node_B.i38 = 0; proc_control_node_B.i38 < 16;
       proc_control_node_B.i38++) {
    for (proc_control_node_B.i_c0 = 0; proc_control_node_B.i_c0 < 16;
         proc_control_node_B.i_c0++) {
      proc_control_node_B.b_Wy_j = 0.0;
      for (b_Kr_tmp = 0; b_Kr_tmp < 80; b_Kr_tmp++) {
        proc_control_node_B.b_Wy_j += I2Jm[80 * proc_control_node_B.i38 +
          b_Kr_tmp] * b_Kut[80 * proc_control_node_B.i_c0 + b_Kr_tmp];
      }

      b_Kr_tmp = (proc_control_node_B.i_c0 << 4) + proc_control_node_B.i38;
      b_H[b_Kr_tmp] = (proc_control_node_B.b_SuJm_a[b_Kr_tmp] +
                       proc_control_node_B.b_Jm_g[b_Kr_tmp]) +
        proc_control_node_B.b_Wy_j;
    }

    for (proc_control_node_B.i_c0 = 0; proc_control_node_B.i_c0 < 8;
         proc_control_node_B.i_c0++) {
      b_SuJm_tmp = proc_control_node_B.i_c0 + (proc_control_node_B.i38 << 3);
      proc_control_node_B.b_Su1_k[b_SuJm_tmp] = 0.0;
      for (b_Kr_tmp = 0; b_Kr_tmp < 130; b_Kr_tmp++) {
        proc_control_node_B.b_Su1_k[b_SuJm_tmp] += b_Su1[130 *
          proc_control_node_B.i_c0 + b_Kr_tmp] * b_Kr[130 *
          proc_control_node_B.i38 + b_Kr_tmp];
      }

      proc_control_node_B.b_I1_m[b_SuJm_tmp] = 0.0;
      for (b_Kr_tmp = 0; b_Kr_tmp < 80; b_Kr_tmp++) {
        proc_control_node_B.b_I1_m[b_SuJm_tmp] += b_I1[80 *
          proc_control_node_B.i_c0 + b_Kr_tmp] * b_Kut[80 *
          proc_control_node_B.i38 + b_Kr_tmp];
      }
    }
  }

  for (proc_control_node_B.i38 = 0; proc_control_node_B.i38 < 128;
       proc_control_node_B.i38++) {
    b_Ku1[proc_control_node_B.i38] =
      proc_control_node_B.b_Su1_k[proc_control_node_B.i38] +
      proc_control_node_B.b_I1_m[proc_control_node_B.i38];
  }

  for (proc_control_node_B.i38 = 0; proc_control_node_B.i38 < 1280;
       proc_control_node_B.i38++) {
    b_Kut[proc_control_node_B.i38] = -b_Kut[proc_control_node_B.i38];
  }

  for (proc_control_node_B.i38 = 0; proc_control_node_B.i38 < 16;
       proc_control_node_B.i38++) {
    for (proc_control_node_B.i_c0 = 0; proc_control_node_B.i_c0 < 21;
         proc_control_node_B.i_c0++) {
      b_SuJm_tmp = proc_control_node_B.i_c0 + 21 * proc_control_node_B.i38;
      b_Kx[b_SuJm_tmp] = 0.0;
      for (b_Kr_tmp = 0; b_Kr_tmp < 130; b_Kr_tmp++) {
        b_Kx[b_SuJm_tmp] += b_Sx[130 * proc_control_node_B.i_c0 + b_Kr_tmp] *
          b_Kr[130 * proc_control_node_B.i38 + b_Kr_tmp];
      }
    }

    for (proc_control_node_B.i_c0 = 0; proc_control_node_B.i_c0 < 11;
         proc_control_node_B.i_c0++) {
      b_SuJm_tmp = proc_control_node_B.i_c0 + 11 * proc_control_node_B.i38;
      b_Kv[b_SuJm_tmp] = 0.0;
      for (b_Kr_tmp = 0; b_Kr_tmp < 130; b_Kr_tmp++) {
        b_Kv[b_SuJm_tmp] += b_Hv[130 * proc_control_node_B.i_c0 + b_Kr_tmp] *
          b_Kr[130 * proc_control_node_B.i38 + b_Kr_tmp];
      }
    }
  }

  for (proc_control_node_B.i38 = 0; proc_control_node_B.i38 < 2080;
       proc_control_node_B.i38++) {
    b_Kr[proc_control_node_B.i38] = -b_Kr[proc_control_node_B.i38];
  }
}

// Function for MATLAB Function: '<S217>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_mpc_solveQP_g(const real_T
  xQP[21], const real_T b_Kx[336], const real_T b_Kr[2080], const real_T rseq
  [130], const real_T b_Ku1[128], const real_T old_u[8], const real_T b_Kv[176],
  const real_T vseq[11], const real_T b_Kut[1280], const real_T b_utarget[80],
  const real_T b_Linv[289], const real_T b_Hinv[289], const real_T b_Ac[544],
  const real_T Bc[32], boolean_T iA[32], real_T zopt[17], real_T f[17], real_T
  *status)
{
  memset(&f[0], 0, 17U * sizeof(real_T));
  for (proc_control_node_B.i_e = 0; proc_control_node_B.i_e < 16;
       proc_control_node_B.i_e++) {
    proc_control_node_B.b_Kx_b = 0.0;
    for (proc_control_node_B.i5 = 0; proc_control_node_B.i5 < 21;
         proc_control_node_B.i5++) {
      proc_control_node_B.b_Kx_b += b_Kx[21 * proc_control_node_B.i_e +
        proc_control_node_B.i5] * xQP[proc_control_node_B.i5];
    }

    proc_control_node_B.b_Kr_j = 0.0;
    for (proc_control_node_B.i5 = 0; proc_control_node_B.i5 < 130;
         proc_control_node_B.i5++) {
      proc_control_node_B.b_Kr_j += b_Kr[130 * proc_control_node_B.i_e +
        proc_control_node_B.i5] * rseq[proc_control_node_B.i5];
    }

    proc_control_node_B.b_Ku1_e = 0.0;
    for (proc_control_node_B.i5 = 0; proc_control_node_B.i5 < 8;
         proc_control_node_B.i5++) {
      proc_control_node_B.b_Ku1_e += b_Ku1[(proc_control_node_B.i_e << 3) +
        proc_control_node_B.i5] * old_u[proc_control_node_B.i5];
    }

    proc_control_node_B.b_Kv_i = 0.0;
    for (proc_control_node_B.i5 = 0; proc_control_node_B.i5 < 11;
         proc_control_node_B.i5++) {
      proc_control_node_B.b_Kv_i += b_Kv[11 * proc_control_node_B.i_e +
        proc_control_node_B.i5] * vseq[proc_control_node_B.i5];
    }

    proc_control_node_B.b_Kut_n = 0.0;
    for (proc_control_node_B.i5 = 0; proc_control_node_B.i5 < 80;
         proc_control_node_B.i5++) {
      proc_control_node_B.b_Kut_n += b_Kut[80 * proc_control_node_B.i_e +
        proc_control_node_B.i5] * b_utarget[proc_control_node_B.i5];
    }

    f[proc_control_node_B.i_e] = (((proc_control_node_B.b_Kx_b +
      proc_control_node_B.b_Kr_j) + proc_control_node_B.b_Ku1_e) +
      proc_control_node_B.b_Kv_i) + proc_control_node_B.b_Kut_n;
  }

  for (proc_control_node_B.i_e = 0; proc_control_node_B.i_e < 32;
       proc_control_node_B.i_e++) {
    proc_control_node_B.iAnew[proc_control_node_B.i_e] =
      iA[proc_control_node_B.i_e];
  }

  proc_control_node_qpkwik(b_Linv, b_Hinv, f, b_Ac, Bc,
    proc_control_node_B.iAnew, 196, 0.01, zopt, proc_control_node_B.a__1_jk,
    status);
  for (proc_control_node_B.i_e = 0; proc_control_node_B.i_e < 32;
       proc_control_node_B.i_e++) {
    iA[proc_control_node_B.i_e] =
      (proc_control_node_B.iAnew[proc_control_node_B.i_e] != 0);
  }

  if ((*status < 0.0) || (*status == 0.0)) {
    memset(&zopt[0], 0, 17U * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S217>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_contr_mpcblock_optimizer_e(const real_T
  rseq[130], const real_T vseq[11], const real_T x[21], const real_T old_u[8],
  const boolean_T iA[32], const real_T b_Mlim[32], real_T b_Mx[672], real_T
  b_Mu1[256], real_T b_Mv[352], const real_T b_utarget[80], const real_T b_uoff
  [8], real_T b_H[289], real_T b_Ac[544], const real_T b_Wy[13], const real_T
  b_Wdu[8], const real_T b_Jm[1280], const real_T b_Wu[8], const real_T b_I1[640],
  const real_T b_A[441], const real_T Bu[1848], const real_T Bv[231], const
  real_T b_C[273], const real_T Dv[143], const real_T b_Mrows[32], real_T u[8],
  real_T useq[88], real_T *status, boolean_T iAout[32])
{
  static const int8_T c_A[100] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
    0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1 };

  boolean_T exitg1;
  memset(&useq[0], 0, 88U * sizeof(real_T));
  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 32;
       proc_control_node_B.i_d++) {
    iAout[proc_control_node_B.i_d] = false;
  }

  proc_contr_mpc_constraintcoef_m(b_A, &Bu[0], &Bv[0], b_C, &Dv[0], b_Jm,
    proc_control_node_B.b_SuJm, proc_control_node_B.b_Sx,
    proc_control_node_B.b_Su1, proc_control_node_B.b_Hv);
  if (b_Mrows[0] > 0.0) {
    proc_control_node_B.kidx = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.kidx < 32)) {
      if (b_Mrows[proc_control_node_B.kidx] <= 130.0) {
        proc_control_node_B.i_d = static_cast<int32_T>
          (b_Mrows[proc_control_node_B.kidx]);
        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 16;
             proc_control_node_B.b_j1++) {
          b_Ac[proc_control_node_B.kidx + (proc_control_node_B.b_j1 << 5)] =
            -proc_control_node_B.b_SuJm[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_d) - 1];
        }

        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 21;
             proc_control_node_B.b_j1++) {
          b_Mx[proc_control_node_B.kidx + (proc_control_node_B.b_j1 << 5)] =
            -proc_control_node_B.b_Sx[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_d) - 1];
        }

        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 8;
             proc_control_node_B.b_j1++) {
          b_Mu1[proc_control_node_B.kidx + (proc_control_node_B.b_j1 << 5)] =
            -proc_control_node_B.b_Su1[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_d) - 1];
        }

        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 11;
             proc_control_node_B.b_j1++) {
          b_Mv[proc_control_node_B.kidx + (proc_control_node_B.b_j1 << 5)] =
            -proc_control_node_B.b_Hv[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_d) - 1];
        }

        proc_control_node_B.kidx++;
      } else if (b_Mrows[proc_control_node_B.kidx] <= 260.0) {
        proc_control_node_B.i_d = static_cast<int32_T>
          (b_Mrows[proc_control_node_B.kidx] - 130.0);
        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 16;
             proc_control_node_B.b_j1++) {
          b_Ac[proc_control_node_B.kidx + (proc_control_node_B.b_j1 << 5)] =
            proc_control_node_B.b_SuJm[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_d) - 1];
        }

        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 21;
             proc_control_node_B.b_j1++) {
          b_Mx[proc_control_node_B.kidx + (proc_control_node_B.b_j1 << 5)] =
            proc_control_node_B.b_Sx[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_d) - 1];
        }

        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 8;
             proc_control_node_B.b_j1++) {
          b_Mu1[proc_control_node_B.kidx + (proc_control_node_B.b_j1 << 5)] =
            proc_control_node_B.b_Su1[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_d) - 1];
        }

        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 11;
             proc_control_node_B.b_j1++) {
          b_Mv[proc_control_node_B.kidx + (proc_control_node_B.b_j1 << 5)] =
            proc_control_node_B.b_Hv[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_d) - 1];
        }

        proc_control_node_B.kidx++;
      } else {
        exitg1 = true;
      }
    }
  }

  memset(&proc_control_node_B.b_I[0], 0, sizeof(int8_T) << 6U);
  proc_control_node_B.kidx_d = 0;
  for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 8;
       proc_control_node_B.kidx++) {
    proc_control_node_B.b_I[proc_control_node_B.kidx_d] = 1;
    proc_control_node_B.kidx_d += 9;
  }

  proc_control_node_B.kidx = -1;
  for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 10;
       proc_control_node_B.b_j1++) {
    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 8;
         proc_control_node_B.i_d++) {
      for (proc_control_node_B.kidx_d = 0; proc_control_node_B.kidx_d < 10;
           proc_control_node_B.kidx_d++) {
        for (proc_control_node_B.i2_g = 0; proc_control_node_B.i2_g < 8;
             proc_control_node_B.i2_g++) {
          proc_control_node_B.a_n[(proc_control_node_B.kidx +
            proc_control_node_B.i2_g) + 1] = static_cast<int8_T>(c_A[10 *
            proc_control_node_B.b_j1 + proc_control_node_B.kidx_d] *
            proc_control_node_B.b_I[(proc_control_node_B.i_d << 3) +
            proc_control_node_B.i2_g]);
        }

        proc_control_node_B.kidx += 8;
      }
    }
  }

  for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 16;
       proc_control_node_B.b_j1++) {
    memset(&proc_control_node_B.a_b[proc_control_node_B.b_j1 * 80], 0, 80U *
           sizeof(real_T));
    for (proc_control_node_B.kidx_d = 0; proc_control_node_B.kidx_d < 80;
         proc_control_node_B.kidx_d++) {
      for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 80;
           proc_control_node_B.kidx++) {
        proc_control_node_B.i_d = 80 * proc_control_node_B.b_j1 +
          proc_control_node_B.kidx;
        proc_control_node_B.a_b[proc_control_node_B.i_d] += static_cast<real_T>
          (proc_control_node_B.a_n[80 * proc_control_node_B.kidx_d +
           proc_control_node_B.kidx]) * b_Jm[80 * proc_control_node_B.b_j1 +
          proc_control_node_B.kidx_d];
      }
    }
  }

  proc_con_mpc_calculatehessian_c(b_Wy, b_Wu, b_Wdu, proc_control_node_B.b_SuJm,
    proc_control_node_B.a_b, b_Jm, b_I1, proc_control_node_B.b_Su1,
    proc_control_node_B.b_Sx, proc_control_node_B.b_Hv, proc_control_node_nu,
    proc_control_node_ny_f, proc_control_node_B.b, proc_control_node_B.b_Ku1,
    proc_control_node_B.b_Kut_h, proc_control_node_B.b_Kx,
    proc_control_node_B.b_Kv, proc_control_node_B.b_Kr);
  proc_control_node_B.b_j1 = 0;
  proc_control_node_B.kidx = 0;
  for (proc_control_node_B.kidx_d = 0; proc_control_node_B.kidx_d < 16;
       proc_control_node_B.kidx_d++) {
    memcpy(&b_H[proc_control_node_B.b_j1],
           &proc_control_node_B.b[proc_control_node_B.kidx], sizeof(real_T) <<
           4U);
    proc_control_node_B.b_j1 += 17;
    proc_control_node_B.kidx += 16;
  }

  memcpy(&proc_control_node_B.b_Linv[0], &b_H[0], 289U * sizeof(real_T));
  proc_control_n_mpc_checkhessian(proc_control_node_B.b_Linv,
    proc_control_node_B.c_Linv, &proc_control_node_B.BadH);
  if (proc_control_node_B.BadH > 1.0) {
    proc_control_node_B.kidx = 0;
    for (proc_control_node_B.kidx_d = 0; proc_control_node_B.kidx_d < 8;
         proc_control_node_B.kidx_d++) {
      u[proc_control_node_B.kidx_d] = old_u[proc_control_node_B.kidx_d] +
        b_uoff[proc_control_node_B.kidx_d];
      for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 11;
           proc_control_node_B.b_j1++) {
        useq[proc_control_node_B.b_j1 + proc_control_node_B.kidx] =
          u[proc_control_node_B.kidx_d];
      }

      proc_control_node_B.kidx += 11;
    }

    *status = -2.0;
  } else {
    memset(&proc_control_node_B.c_I[0], 0, 289U * sizeof(int8_T));
    proc_control_node_B.kidx_d = 0;
    for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 17;
         proc_control_node_B.kidx++) {
      proc_control_node_B.c_I[proc_control_node_B.kidx_d] = 1;
      proc_control_node_B.kidx_d += 18;
    }

    proc_control_node_B.kidx_d = 0;
    for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 17;
         proc_control_node_B.kidx++) {
      for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 17;
           proc_control_node_B.b_j1++) {
        proc_control_node_B.i_d = proc_control_node_B.b_j1 +
          proc_control_node_B.kidx_d;
        proc_control_node_B.b_Linv[proc_control_node_B.i_d] =
          proc_control_node_B.c_I[proc_control_node_B.i_d];
      }

      proc_control_node_B.kidx_d += 17;
    }

    proc_control_node_trisolve(proc_control_node_B.c_Linv,
      proc_control_node_B.b_Linv);
    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 32;
         proc_control_node_B.i_d++) {
      iAout[proc_control_node_B.i_d] = iA[proc_control_node_B.i_d];
      proc_control_node_B.BadH = 0.0;
      proc_control_node_B.b_j1 = 0;
      for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 21;
           proc_control_node_B.kidx++) {
        proc_control_node_B.BadH += b_Mx[proc_control_node_B.b_j1 +
          proc_control_node_B.i_d] * x[proc_control_node_B.kidx];
        proc_control_node_B.b_j1 += 32;
      }

      proc_control_node_B.b_Mlim_l[proc_control_node_B.i_d] =
        b_Mlim[proc_control_node_B.i_d] + proc_control_node_B.BadH;
      proc_control_node_B.b_Mu1[proc_control_node_B.i_d] = 0.0;
    }

    proc_control_node_B.b_j1 = 0;
    for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 8;
         proc_control_node_B.kidx++) {
      for (proc_control_node_B.kidx_d = 0; proc_control_node_B.kidx_d < 32;
           proc_control_node_B.kidx_d++) {
        proc_control_node_B.b_Mu1[proc_control_node_B.kidx_d] +=
          b_Mu1[proc_control_node_B.kidx_d + proc_control_node_B.b_j1] *
          old_u[proc_control_node_B.kidx];
      }

      proc_control_node_B.b_j1 += 32;
    }

    proc_control_node_B.b_j1 = 0;
    for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 17;
         proc_control_node_B.kidx++) {
      proc_control_node_B.kidx_d = 0;
      for (proc_control_node_B.i2_g = 0; proc_control_node_B.i2_g < 17;
           proc_control_node_B.i2_g++) {
        proc_control_node_B.i_d = proc_control_node_B.i2_g +
          proc_control_node_B.b_j1;
        proc_control_node_B.c_Linv[proc_control_node_B.i_d] = 0.0;
        for (proc_control_node_B.i4 = 0; proc_control_node_B.i4 < 17;
             proc_control_node_B.i4++) {
          proc_control_node_B.c_Linv[proc_control_node_B.i_d] +=
            proc_control_node_B.b_Linv[proc_control_node_B.i4 +
            proc_control_node_B.kidx_d] *
            proc_control_node_B.b_Linv[proc_control_node_B.i4 +
            proc_control_node_B.b_j1];
        }

        proc_control_node_B.kidx_d += 17;
      }

      proc_control_node_B.b_j1 += 17;
    }

    for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 32;
         proc_control_node_B.b_j1++) {
      proc_control_node_B.BadH = 0.0;
      proc_control_node_B.kidx = 0;
      for (proc_control_node_B.kidx_d = 0; proc_control_node_B.kidx_d < 11;
           proc_control_node_B.kidx_d++) {
        proc_control_node_B.BadH += b_Mv[proc_control_node_B.kidx +
          proc_control_node_B.b_j1] * vseq[proc_control_node_B.kidx_d];
        proc_control_node_B.kidx += 32;
      }

      proc_control_node_B.b_Mlim_k[proc_control_node_B.b_j1] =
        -((proc_control_node_B.b_Mlim_l[proc_control_node_B.b_j1] +
           proc_control_node_B.b_Mu1[proc_control_node_B.b_j1]) +
          proc_control_node_B.BadH);
    }

    proc_control_node_mpc_solveQP_g(x, proc_control_node_B.b_Kx,
      proc_control_node_B.b_Kr, rseq, proc_control_node_B.b_Ku1, old_u,
      proc_control_node_B.b_Kv, vseq, proc_control_node_B.b_Kut_h, b_utarget,
      proc_control_node_B.b_Linv, proc_control_node_B.c_Linv, b_Ac,
      proc_control_node_B.b_Mlim_k, iAout, proc_control_node_B.zopt,
      proc_control_node_B.f_f, status);
    for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 8;
         proc_control_node_B.kidx++) {
      u[proc_control_node_B.kidx] = (old_u[proc_control_node_B.kidx] +
        proc_control_node_B.zopt[proc_control_node_B.kidx]) +
        b_uoff[proc_control_node_B.kidx];
    }
  }
}

// Function for MATLAB Function: '<S221>/Predict'
void proc_control_nodeModelClass::proc_control_n_AUVQuatExtSimFcn(const real_T
  in1[21], const real_T in2[8], real_T out1[21])
{
  real_T out1_tmp;
  proc_control_node_B.t8_g = in1[4] * in1[4];
  proc_control_node_B.t9_c = in1[5] * in1[5];
  proc_control_node_B.t11_o = in1[4] * in1[5] * 2.0;
  proc_control_node_B.t12_tmp_n = in1[4] * in1[6];
  proc_control_node_B.t12_g = proc_control_node_B.t12_tmp_n * 2.0;
  proc_control_node_B.t13_tmp_h = in1[5] * in1[6];
  proc_control_node_B.t13_o2 = proc_control_node_B.t13_tmp_h * 2.0;
  proc_control_node_B.t14_tmp_m = in1[3] * in1[4];
  proc_control_node_B.t14_g = proc_control_node_B.t14_tmp_m * 2.0;
  proc_control_node_B.t15_tmp_f = in1[3] * in1[5];
  proc_control_node_B.t15_a = proc_control_node_B.t15_tmp_f * 2.0;
  proc_control_node_B.t16_g = in1[3] * in1[6] * 2.0;
  proc_control_node_B.t25_b = in1[11] / 500.0;
  proc_control_node_B.t29_k = in1[10] / 1000.0;
  proc_control_node_B.t31_c = in1[12] * 0.018;
  proc_control_node_B.t50_j = in1[7] * 32.4648;
  proc_control_node_B.t53_a = in1[8] * 43.6156;
  proc_control_node_B.t54_d = in1[9] * 46.7695;
  proc_control_node_B.t17_c = proc_control_node_B.t8_g * 2.0;
  proc_control_node_B.t18_d = proc_control_node_B.t9_c * 2.0;
  proc_control_node_B.t19_a = in1[6] * in1[6] * 2.0;
  proc_control_node_B.t57_bo = proc_control_node_B.t25_b +
    proc_control_node_B.t31_c;
  proc_control_node_B.t25_b += proc_control_node_B.t29_k;
  proc_control_node_B.t29_k += proc_control_node_B.t31_c;
  proc_control_node_B.t31_c = in1[11] * 0.558 + proc_control_node_B.t50_j;
  proc_control_node_B.t64_g = in1[10] * 0.062 + proc_control_node_B.t54_d;
  proc_control_node_B.t65_f = in1[12] * 0.031 + proc_control_node_B.t53_a;
  proc_control_node_B.t68_c = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] *
    0.592;
  proc_control_node_B.t50_j = in1[12] * 0.062 + -proc_control_node_B.t50_j;
  proc_control_node_B.t53_a = in1[10] * 0.558 + -proc_control_node_B.t53_a;
  proc_control_node_B.t54_d = in1[11] * 0.031 + -proc_control_node_B.t54_d;
  proc_control_node_B.t69_p = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_node_B.t70_a = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  out1[0] = (((proc_control_node_B.t18_d + proc_control_node_B.t19_a) - 1.0) *
             -in1[7] + (proc_control_node_B.t12_g + proc_control_node_B.t15_a) *
             in1[9]) + (proc_control_node_B.t11_o - proc_control_node_B.t16_g) *
    in1[8];
  out1[1] = ((proc_control_node_B.t11_o + proc_control_node_B.t16_g) * in1[7] -
             ((proc_control_node_B.t17_c + proc_control_node_B.t19_a) - 1.0) *
             in1[8]) + (proc_control_node_B.t13_o2 - proc_control_node_B.t14_g) *
    in1[9];
  out1[2] = ((proc_control_node_B.t13_o2 + proc_control_node_B.t14_g) * in1[8] -
             ((proc_control_node_B.t17_c + proc_control_node_B.t18_d) - 1.0) *
             in1[9]) + (proc_control_node_B.t12_g - proc_control_node_B.t15_a) *
    in1[7];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = ((in1[3] * in1[10] / 2.0 + in1[13]) - in1[6] * in1[11] / 2.0) + in1
    [5] * in1[12] / 2.0;
  out1[5] = ((in1[6] * in1[10] / 2.0 + in1[14]) + in1[3] * in1[11] / 2.0) - in1
    [4] * in1[12] / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_node_B.t11_o = in1[10] * proc_control_node_B.t57_bo;
  proc_control_node_B.t12_g = in1[10] * (fabs(in1[10]) * 0.167 +
    3.3333333333333335);
  proc_control_node_B.t13_o2 = in1[10] * proc_control_node_B.t64_g;
  proc_control_node_B.t14_g = in1[10] * proc_control_node_B.t53_a;
  proc_control_node_B.t15_a = in1[10] * proc_control_node_B.t69_p;
  proc_control_node_B.t16_g = in1[10] * proc_control_node_B.t70_a;
  proc_control_node_B.t17_c = in1[11] * (fabs(in1[11]) / 10.0 +
    2.3333333333333335);
  proc_control_node_B.t18_d = in1[11] * proc_control_node_B.t29_k;
  proc_control_node_B.t19_a = in1[11] * proc_control_node_B.t31_c;
  proc_control_node_B.out1_tmp_b = in1[11] * proc_control_node_B.t54_d;
  proc_control_node_B.out1_tmp_e = in1[11] * proc_control_node_B.t68_c;
  proc_control_node_B.t69_p *= in1[11];
  proc_control_node_B.out1_tmp_n = in1[12] * (fabs(in1[12]) * 0.102 + 5.0);
  proc_control_node_B.out1_tmp_p4 = in1[12] * proc_control_node_B.t25_b;
  proc_control_node_B.out1_tmp_ih = in1[12] * proc_control_node_B.t50_j;
  proc_control_node_B.out1_tmp_j = in1[12] * proc_control_node_B.t65_f;
  proc_control_node_B.t68_c *= in1[12];
  proc_control_node_B.t70_a *= in1[12];
  proc_control_node_B.out1_tmp_lj = (fabs(in1[7]) * 1.17 + 15.0) * in1[7];
  proc_control_node_B.t57_bo *= in1[7];
  proc_control_node_B.t65_f *= in1[7];
  proc_control_node_B.t54_d *= in1[7];
  proc_control_node_B.out1_tmp_ce = (fabs(in1[8]) * 0.82 + 20.0) * in1[8];
  proc_control_node_B.t29_k *= in1[8];
  proc_control_node_B.t50_j *= in1[8];
  proc_control_node_B.t64_g *= in1[8];
  out1_tmp = (fabs(in1[9]) * 0.756 + 23.333333333333332) * in1[9];
  proc_control_node_B.t25_b *= in1[9];
  proc_control_node_B.t31_c *= in1[9];
  proc_control_node_B.t53_a *= in1[9];
  out1[7] = (((((((((((((((in2[0] * -0.00033076834054020519 + in2[1] *
    1.8595780444550231E-21) + in2[2] * 0.00033506403327449372) + (in2[3] *
    0.00033363213569639753 - in2[4] * 0.001819638864719295)) + (in2[5] *
    -0.0018124211550371481 + in2[6] * 0.0018538731733468781)) + ((in2[7] *
    0.001778186846409557 + in1[15]) - proc_control_node_B.t8_g *
    0.0063195296824236141)) + ((in2[0] * 1.4142135623730951 *
    0.015171119710606879 + proc_control_node_B.t9_c * -0.0063195296824236141) +
    in2[1] * 1.4142135623730951 * 0.014928824155507611)) + ((in2[2] *
    1.4142135623730951 * 0.015171119710606879 + in2[3] * 1.4142135623730951 *
    0.01516372519659284) - proc_control_node_B.t12_tmp_n * 0.4138016519122657))
                    + ((proc_control_node_B.t13_tmp_h * -0.0013017970932508 -
                        proc_control_node_B.t14_tmp_m * 0.0013017970932508) +
                       proc_control_node_B.t15_tmp_f * 0.4138016519122657)) +
                   (((proc_control_node_B.t11_o * -0.96028628902704993 -
                      proc_control_node_B.t12_g * 0.0001303522588356414) +
                     proc_control_node_B.t13_o2 * 9.4803055144857715E-7) -
                    proc_control_node_B.t14_g * 6.8231348244175949E-6)) +
                  (((proc_control_node_B.t15_a * -0.010033314971702871 -
                     proc_control_node_B.t16_g * 0.0010125044874363649) +
                    proc_control_node_B.t17_c * 0.010033314971702871) -
                   proc_control_node_B.t18_d * 2.9388947094905889E-5)) +
                 (((proc_control_node_B.t19_a * -6.8231348244175949E-6 +
                    proc_control_node_B.out1_tmp_b * 0.030976977065388711) +
                   proc_control_node_B.out1_tmp_e * 0.0010125044874363649) -
                  proc_control_node_B.t69_p * 0.0001303522588356414)) +
                (((proc_control_node_B.out1_tmp_n * -0.0010125044874363649 +
                   proc_control_node_B.out1_tmp_p4 * 0.0002115171795569455) +
                  proc_control_node_B.out1_tmp_ih * 9.4803055144857715E-7) +
                 proc_control_node_B.out1_tmp_j * 0.030976977065388711)) +
               (((proc_control_node_B.t68_c * 0.010033314971702871 +
                  proc_control_node_B.t70_a * 0.0001303522588356414) -
                 proc_control_node_B.out1_tmp_lj * 0.030976977065388711) +
                proc_control_node_B.t57_bo * 0.0040409200239048832)) +
              (((proc_control_node_B.t65_f * -0.0010125044874363649 +
                 proc_control_node_B.t54_d * 0.010033314971702871) -
                proc_control_node_B.out1_tmp_ce * 9.4803055144857715E-7) -
               proc_control_node_B.t29_k * 0.311032764122789)) +
             (((proc_control_node_B.t50_j * -0.0010125044874363649 -
                proc_control_node_B.t64_g * 0.0001303522588356414) + out1_tmp *
               6.8231348244175949E-6) + proc_control_node_B.t25_b *
              0.031387639110527318)) + ((proc_control_node_B.t31_c *
    0.010033314971702871 - proc_control_node_B.t53_a * 0.0001303522588356414) +
    0.003159764841211807);
  out1[8] = (((((((((((((((in2[0] * 0.00013975754063522079 + in2[1] *
    7.9244610288113972E-21) + in2[2] * -0.00014157257363048341) + (in2[3] *
    -0.0001409675626320625 - in2[4] * 0.0034249251816346319)) + (in2[5] *
    0.003387750973601051 + in2[6] * 0.0035708122797193441)) + ((in2[7] *
    -0.0035336380716857632 + in1[16]) - proc_control_node_B.t8_g *
    0.02693023120923067)) + ((proc_control_node_B.t9_c * -0.02693023120923067 -
    in2[0] * 1.4142135623730951 * 0.01090649593858282) + in2[1] *
    1.4142135623730951 * 0.011000123045544621)) + ((in2[2] * 1.4142135623730951 *
    -0.01090649593858282 + in2[3] * 1.4142135623730951 * 0.01090087173345982) -
    proc_control_node_B.t12_tmp_n * 0.00099202109956931486)) +
                    ((proc_control_node_B.t13_tmp_h * -0.51979016069898065 -
                      proc_control_node_B.t14_tmp_m * 0.51979016069898065) +
                     proc_control_node_B.t15_tmp_f * 0.00099202109956931486)) +
                   (((proc_control_node_B.t11_o * -2.9388947094905889E-5 -
                      proc_control_node_B.t12_g * 0.021882274381510681) +
                     proc_control_node_B.t13_o2 * 0.02320783323245932) -
                    proc_control_node_B.t14_g * 2.9076309096921531E-5)) +
                  (((proc_control_node_B.t15_a * -0.0001026911824132076 +
                     proc_control_node_B.t16_g * 0.00042780737967584029) +
                    proc_control_node_B.t17_c * 0.0001026911824132076) -
                   proc_control_node_B.t18_d * 0.71944283020623911)) +
                 (((proc_control_node_B.t19_a * -2.9076309096921531E-5 +
                    proc_control_node_B.out1_tmp_b * 9.4803055144857715E-7) -
                   proc_control_node_B.out1_tmp_e * 0.00042780737967584029) -
                  proc_control_node_B.t69_p * 0.021882274381510681)) +
                (((proc_control_node_B.out1_tmp_n * 0.00042780737967584029 +
                   proc_control_node_B.out1_tmp_p4 * 0.00090136558200456737) +
                  proc_control_node_B.out1_tmp_ih * 0.02320783323245932) +
                 proc_control_node_B.out1_tmp_j * 9.4803055144857715E-7)) +
               (((proc_control_node_B.t68_c * 0.0001026911824132076 +
                  proc_control_node_B.t70_a * 0.021882274381510681) -
                 proc_control_node_B.out1_tmp_lj * 9.4803055144857715E-7) +
                proc_control_node_B.t57_bo * 0.678350505826831)) +
              (((proc_control_node_B.t65_f * 0.00042780737967584029 +
                 proc_control_node_B.t54_d * 0.0001026911824132076) -
                proc_control_node_B.out1_tmp_ce * 0.02320783323245932) -
               proc_control_node_B.t29_k * 0.0031834266548094372)) +
             (((proc_control_node_B.t50_j * 0.00042780737967584029 -
                proc_control_node_B.t64_g * 0.021882274381510681) + out1_tmp *
               2.9076309096921531E-5) - proc_control_node_B.t25_b *
              0.013262028769951049)) + ((proc_control_node_B.t31_c *
    0.0001026911824132076 - proc_control_node_B.t53_a * 0.021882274381510681) +
    0.01346511560461533);
  out1[9] = (((((((((((((((in2[0] * -1.725827915740819E-6 + in2[1] *
    -5.8281975682474322E-18) + in2[2] * 1.748241265284163E-6) + (in2[3] *
    1.740770148765829E-6 - in2[4] * 0.02095639900015615)) + (in2[5] *
    0.021100316216985739 - in2[6] * 0.021822949502860629)) + ((in2[7] *
    0.02167903228603104 + in1[17]) + proc_control_node_B.t8_g *
    0.18635748921352191)) + ((proc_control_node_B.t9_c * 0.18635748921352191 -
    in2[0] * 1.4142135623730951 * 4.8869263875916949E-5) + in2[1] *
    1.4142135623730951 * 6.6264429389244648E-5)) + ((in2[2] * 1.4142135623730951
    * -4.8869263875916949E-5 + in2[3] * 1.4142135623730951 *
    6.7490056888775055E-5) + proc_control_node_B.t12_tmp_n *
    0.0058758415205803329)) + ((proc_control_node_B.t13_tmp_h *
    0.033540735888224739 + proc_control_node_B.t14_tmp_m * 0.033540735888224739)
    - proc_control_node_B.t15_tmp_f * 0.0058758415205803329)) +
                   (((proc_control_node_B.t11_o * 0.0002115171795569455 +
                      proc_control_node_B.t12_g * 0.002272431716587712) -
                     proc_control_node_B.t13_o2 * 2.9076309096921531E-5) +
                    proc_control_node_B.t14_g * 0.021384731826702759)) +
                  (((proc_control_node_B.t15_a * 0.00039756137245743289 -
                     proc_control_node_B.t16_g * 5.2828771531483014E-6) -
                    proc_control_node_B.t17_c * 0.00039756137245743289) +
                   proc_control_node_B.t18_d * 0.00090136558200456737)) +
                 (((proc_control_node_B.t19_a * 0.021384731826702759 -
                    proc_control_node_B.out1_tmp_b * 6.8231348244175949E-6) +
                   proc_control_node_B.out1_tmp_e * 5.2828771531483014E-6) +
                  proc_control_node_B.t69_p * 0.002272431716587712)) +
                (((proc_control_node_B.out1_tmp_n * -5.2828771531483014E-6 -
                   proc_control_node_B.out1_tmp_p4 * 0.66292668662778553) -
                  proc_control_node_B.out1_tmp_ih * 2.9076309096921531E-5) -
                 proc_control_node_B.out1_tmp_j * 6.8231348244175949E-6)) +
               (((proc_control_node_B.t68_c * -0.00039756137245743289 -
                  proc_control_node_B.t70_a * 0.002272431716587712) +
                 proc_control_node_B.out1_tmp_lj * 6.8231348244175949E-6) -
                proc_control_node_B.t57_bo * 0.070445383214219059)) +
              (((proc_control_node_B.t65_f * -5.2828771531483014E-6 -
                 proc_control_node_B.t54_d * 0.00039756137245743289) +
                proc_control_node_B.out1_tmp_ce * 2.9076309096921531E-5) +
               proc_control_node_B.t29_k * 0.01232440254618042)) +
             (((proc_control_node_B.t50_j * -5.2828771531483014E-6 +
                proc_control_node_B.t64_g * 0.002272431716587712) - out1_tmp *
               0.021384731826702759) + proc_control_node_B.t25_b *
              0.00016376919174759729)) + ((proc_control_node_B.t31_c *
    -0.00039756137245743289 + proc_control_node_B.t53_a * 0.002272431716587712)
    - 0.093178744606760927);
  out1[10] = (((((((((((((((((in2[0] * 0.0013021350951669831 + in2[1] *
    6.1932883292401409E-19) + in2[2] * -0.00131904594055876) + (in2[3] *
    -0.0013134089920948341 - in2[4] * 0.26767193546582568)) + (in2[5] *
    0.26476621250220889 + in2[6] * 0.2790736050389333)) + ((in2[7] *
    -0.27616788207531651 + in1[18]) - proc_control_node_B.t8_g *
    2.1047070084068991)) + ((in2[0] * 1.4142135623730951 * 0.043593198825375247
    + proc_control_node_B.t9_c * -2.1047070084068991) - in2[1] *
    1.4142135623730951 * 0.043051831063235027)) + ((in2[2] * 1.4142135623730951 *
    0.043593198825375247 - in2[3] * 1.4142135623730951 * 0.043976565543532631) -
    proc_control_node_B.t12_tmp_n * 0.1138522338822895)) +
                       ((proc_control_node_B.t13_tmp_h * -25.242114556122988 -
    proc_control_node_B.t14_tmp_m * 25.242114556122988) +
                        proc_control_node_B.t15_tmp_f * 0.1138522338822895)) +
                      ((proc_control_node_B.t11_o * -0.0040409200239048832 -
                        proc_control_node_B.t12_g * 1.71018810547529) +
                       proc_control_node_B.t13_o2 * 0.021882274381510681)) +
                     ((proc_control_node_B.t14_g * -0.002272431716587712 -
                       proc_control_node_B.t15_a * 0.0080268590155159435) +
                      proc_control_node_B.t16_g * 0.0039859244840414)) +
                    ((proc_control_node_B.t17_c * 0.0080268590155159435 -
                      proc_control_node_B.t18_d * 0.678350505826831) -
                     proc_control_node_B.t19_a * 0.002272431716587712)) +
                   ((proc_control_node_B.out1_tmp_b * 0.0001303522588356414 -
                     proc_control_node_B.out1_tmp_e * 0.0039859244840414) -
                    proc_control_node_B.t69_p * 1.71018810547529)) +
                  (((proc_control_node_B.out1_tmp_n * 0.0039859244840414 +
                     proc_control_node_B.out1_tmp_p4 * 0.070445383214219059) +
                    proc_control_node_B.out1_tmp_ih * 0.021882274381510681) +
                   proc_control_node_B.out1_tmp_j * 0.0001303522588356414)) +
                 ((proc_control_node_B.t68_c * 0.0080268590155159435 +
                   proc_control_node_B.t70_a * 1.71018810547529) -
                  proc_control_node_B.out1_tmp_lj * 0.0001303522588356414)) +
                ((proc_control_node_B.t57_bo * 53.015831269733987 +
                  proc_control_node_B.t65_f * 0.0039859244840414) +
                 proc_control_node_B.t54_d * 0.0080268590155159435)) +
               ((proc_control_node_B.out1_tmp_ce * -0.021882274381510681 -
                 proc_control_node_B.t29_k * 0.2488326294809943) +
                proc_control_node_B.t50_j * 0.0039859244840414)) +
              ((proc_control_node_B.t64_g * -1.71018810547529 + out1_tmp *
                0.002272431716587712) - proc_control_node_B.t25_b *
               0.1235636590052834)) + ((proc_control_node_B.t31_c *
    0.0080268590155159435 - proc_control_node_B.t53_a * 1.71018810547529) +
    1.0523535042034491);
  out1[11] = ((((((((((((((((in2[0] * 5.24748238233168E-7 - in2[1] *
    1.083514276897426E-19) + in2[2] * -5.3156315041823265E-7) + (in2[3] *
    -5.2929151302328333E-7 + in2[4] * 0.10593667623599359)) + (in2[5] *
    0.10537885436940329 - in2[6] * 0.10793139553633729)) + ((in2[7] *
    -0.1033841350690595 + in1[19]) + proc_control_node_B.t8_g *
    0.36821797582524962)) + ((in2[0] * 1.4142135623730951 * 0.013457654526727991
    + proc_control_node_B.t9_c * 0.36821797582524962) + in2[1] *
    1.4142135623730951 * 0.013869054980635681)) + ((in2[2] * 1.4142135623730951 *
    0.013457654526727991 + in2[3] * 1.4142135623730951 * 0.01386868232130781) +
    proc_control_node_B.t12_tmp_n * 8.6371397256799973)) +
                      ((proc_control_node_B.t13_tmp_h * 0.1184627304742461 +
                        proc_control_node_B.t14_tmp_m * 0.1184627304742461) -
                       proc_control_node_B.t15_tmp_f * 8.6371397256799973)) +
                     (((proc_control_node_B.t11_o * 0.311032764122789 +
                        proc_control_node_B.t12_g * 0.0080268590155159435) -
                       proc_control_node_B.t13_o2 * 0.0001026911824132076) +
                      proc_control_node_B.t14_g * 0.00039756137245743289)) +
                    ((proc_control_node_B.t15_a * 0.58374455968341665 +
                      proc_control_node_B.t16_g * 1.606290206365557E-6) -
                     proc_control_node_B.t17_c * 0.58374455968341665)) +
                   (((proc_control_node_B.t18_d * 0.0031834266548094372 +
                      proc_control_node_B.t19_a * 0.00039756137245743289) -
                     proc_control_node_B.out1_tmp_b * 0.010033314971702871) -
                    proc_control_node_B.out1_tmp_e * 1.606290206365557E-6)) +
                  (((proc_control_node_B.t69_p * 0.0080268590155159435 +
                     proc_control_node_B.out1_tmp_n * 1.606290206365557E-6) -
                    proc_control_node_B.out1_tmp_p4 * 0.01232440254618042) -
                   proc_control_node_B.out1_tmp_ih * 0.0001026911824132076)) +
                 ((proc_control_node_B.out1_tmp_j * -0.010033314971702871 -
                   proc_control_node_B.t68_c * 0.58374455968341665) -
                  proc_control_node_B.t70_a * 0.0080268590155159435)) +
                ((proc_control_node_B.out1_tmp_lj * 0.010033314971702871 -
                  proc_control_node_B.t57_bo * 0.2488326294809943) +
                 proc_control_node_B.t65_f * 1.606290206365557E-6)) +
               ((proc_control_node_B.t54_d * -0.58374455968341665 +
                 proc_control_node_B.out1_tmp_ce * 0.0001026911824132076) +
                proc_control_node_B.t29_k * 18.096081350185919)) +
              (((proc_control_node_B.t50_j * 1.606290206365557E-6 +
                 proc_control_node_B.t64_g * 0.0080268590155159435) - out1_tmp *
                0.00039756137245743289) - proc_control_node_B.t25_b *
               4.9794996397332282E-5)) + ((proc_control_node_B.t31_c *
    -0.58374455968341665 + proc_control_node_B.t53_a * 0.0080268590155159435) -
    0.18410898791262481);
  out1[12] = ((((((((((((((((in2[0] * -0.1731941163298826 + in2[1] *
    -1.4397960202092559E-21) + in2[2] * 0.175443390567933) + (in2[3] *
    0.17469363248858291 + in2[4] * 0.00062021813460420567)) + (in2[5] *
    -0.0006207996116589 - in2[6] * 0.00064672437426625525)) + ((in2[7] *
    0.00064730585132094889 + in1[20]) + proc_control_node_B.t8_g *
    0.0048929560732764686)) + ((in2[0] * 1.4142135623730951 *
    0.00059255494878017434 + proc_control_node_B.t9_c * 0.0048929560732764686) -
    in2[1] * 1.4142135623730951 * 0.1225770464045467)) + ((in2[2] *
    1.4142135623730951 * 0.00059255494878017434 + in2[3] * 1.4142135623730951 *
    0.00041984673608298361) - proc_control_node_B.t12_tmp_n *
    0.65361132374006825)) + ((proc_control_node_B.t13_tmp_h *
    0.38451002147839958 + proc_control_node_B.t14_tmp_m * 0.38451002147839958) +
    proc_control_node_B.t15_tmp_f * 0.65361132374006825)) +
                     (((proc_control_node_B.t11_o * -0.031387639110527318 +
                        proc_control_node_B.t12_g * 0.0039859244840414) -
                       proc_control_node_B.t13_o2 * 0.00042780737967584029) +
                      proc_control_node_B.t14_g * 5.2828771531483014E-6)) +
                    (((proc_control_node_B.t15_a * -1.606290206365557E-6 -
                       proc_control_node_B.t16_g * 0.53015902215788635) +
                      proc_control_node_B.t17_c * 1.606290206365557E-6) +
                     proc_control_node_B.t18_d * 0.013262028769951049)) +
                   (((proc_control_node_B.t19_a * 5.2828771531483014E-6 +
                      proc_control_node_B.out1_tmp_b * 0.0010125044874363649) +
                     proc_control_node_B.out1_tmp_e * 0.53015902215788635) +
                    proc_control_node_B.t69_p * 0.0039859244840414)) +
                  ((proc_control_node_B.out1_tmp_n * -0.53015902215788635 -
                    proc_control_node_B.out1_tmp_p4 * 0.00016376919174759729) -
                   proc_control_node_B.out1_tmp_ih * 0.00042780737967584029)) +
                 (((proc_control_node_B.out1_tmp_j * 0.0010125044874363649 +
                    proc_control_node_B.t68_c * 1.606290206365557E-6) -
                   proc_control_node_B.t70_a * 0.0039859244840414) -
                  proc_control_node_B.out1_tmp_lj * 0.0010125044874363649)) +
                ((proc_control_node_B.t57_bo * -0.1235636590052834 -
                  proc_control_node_B.t65_f * 0.53015902215788635) +
                 proc_control_node_B.t54_d * 1.606290206365557E-6)) +
               ((proc_control_node_B.out1_tmp_ce * 0.00042780737967584029 -
                 proc_control_node_B.t29_k * 4.9794996397332282E-5) -
                proc_control_node_B.t50_j * 0.53015902215788635)) +
              (((proc_control_node_B.t64_g * 0.0039859244840414 - out1_tmp *
                 5.2828771531483014E-6) + proc_control_node_B.t25_b *
                16.434929686894481) + proc_control_node_B.t31_c *
               1.606290206365557E-6)) + (proc_control_node_B.t53_a *
    0.0039859244840414 - 0.0024464780366382352);
  memcpy(&out1[13], &in1[13], sizeof(real_T) << 3U);
}

// Function for MATLAB Function: '<S221>/Predict'
void proc_control_nodeModelClass::proc_co_numericJacobianAdditive(const real_T
  x[21], const cell_wrap_0_proc_control_node_T *vec, real_T jacobian[441])
{
  int32_T b_i;
  int32_T i;
  int32_T i_0;
  memcpy(&proc_control_node_B.z_k[0], &x[0], 21U * sizeof(real_T));
  proc_control_n_AUVQuatExtSimFcn(x, vec->f1, proc_control_node_B.dv17);
  for (i_0 = 0; i_0 < 10; i_0++) {
    for (i = 0; i < 21; i++) {
      proc_control_node_B.z_k[i] += proc_control_node_B.dv17[i] * 0.01;
    }
  }

  for (i_0 = 0; i_0 < 21; i_0++) {
    memcpy(&proc_control_node_B.imvec_f[0], &x[0], 21U * sizeof(real_T));
    proc_control_node_B.epsilon_i = 1.4901161193847656E-8 * fabs(x[i_0]);
    if ((1.4901161193847656E-8 > proc_control_node_B.epsilon_i) || rtIsNaN
        (proc_control_node_B.epsilon_i)) {
      proc_control_node_B.epsilon_i = 1.4901161193847656E-8;
    }

    proc_control_node_B.imvec_f[i_0] = x[i_0] + proc_control_node_B.epsilon_i;
    proc_control_n_AUVQuatExtSimFcn(proc_control_node_B.imvec_f, vec->f1,
      proc_control_node_B.dv17);
    for (b_i = 0; b_i < 10; b_i++) {
      for (i = 0; i < 21; i++) {
        proc_control_node_B.imvec_f[i] += proc_control_node_B.dv17[i] * 0.01;
      }
    }

    for (i = 0; i < 21; i++) {
      jacobian[i + 21 * i_0] = (proc_control_node_B.imvec_f[i] -
        proc_control_node_B.z_k[i]) / proc_control_node_B.epsilon_i;
    }
  }
}

// Function for MATLAB Function: '<S221>/Predict'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_pt(int32_T n, const
  real_T x[882], int32_T ix0)
{
  real_T absxk;
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_b = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        absxk = fabs(x[k - 1]);
        if (absxk > proc_control_node_B.scale_b) {
          t = proc_control_node_B.scale_b / absxk;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_b = absxk;
        } else {
          t = absxk / proc_control_node_B.scale_b;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_b * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S221>/Predict'
void proc_control_nodeModelClass::proc_control_node_xgemv_ai(int32_T m, int32_T
  n, const real_T A[882], int32_T ia0, const real_T x[882], int32_T ix0, real_T
  y[21])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  int32_T ix;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 42 + ia0;
    for (iac = ia0; iac <= b; iac += 42) {
      ix = ix0;
      proc_control_node_B.c_b = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_b += A[ia - 1] * x[ix - 1];
        ix++;
      }

      y[b_iy] += proc_control_node_B.c_b;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S221>/Predict'
void proc_control_nodeModelClass::proc_control_node_xgerc_m(int32_T m, int32_T n,
  real_T alpha1, int32_T ix0, const real_T y[21], real_T A[882], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jA;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    jA = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_pn = y[jy] * alpha1;
        ix = ix0;
        b = m + jA;
        for (ijA = jA; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_pn;
          ix++;
        }
      }

      jy++;
      jA += 42;
    }
  }
}

// Function for MATLAB Function: '<S221>/Predict'
void proc_control_nodeModelClass::proc_control_node_xzlarf_n(int32_T m, int32_T
  n, int32_T iv0, real_T tau, real_T C[882], int32_T ic0, real_T work[21])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_j4 = m;
    proc_control_node_B.lastc_k = iv0 + m;
    while ((proc_control_node_B.lastv_j4 > 0) && (C[proc_control_node_B.lastc_k
            - 2] == 0.0)) {
      proc_control_node_B.lastv_j4--;
      proc_control_node_B.lastc_k--;
    }

    proc_control_node_B.lastc_k = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_k > 0)) {
      proc_control_node_B.coltop_o = (proc_control_node_B.lastc_k - 1) * 42 +
        ic0;
      proc_control_node_B.ia_nc = proc_control_node_B.coltop_o;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_nc <= (proc_control_node_B.coltop_o +
             proc_control_node_B.lastv_j4) - 1) {
          if (C[proc_control_node_B.ia_nc - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_nc++;
          }
        } else {
          proc_control_node_B.lastc_k--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_j4 = 0;
    proc_control_node_B.lastc_k = 0;
  }

  if (proc_control_node_B.lastv_j4 > 0) {
    proc_control_node_xgemv_ai(proc_control_node_B.lastv_j4,
      proc_control_node_B.lastc_k, C, ic0, C, iv0, work);
    proc_control_node_xgerc_m(proc_control_node_B.lastv_j4,
      proc_control_node_B.lastc_k, -tau, iv0, work, C, ic0);
  }
}

// Function for MATLAB Function: '<S221>/Predict'
void proc_control_nodeModelClass::proc_control_node_qrf_c(real_T A[882], int32_T
  ia0, int32_T m, int32_T n, int32_T nfxd, real_T tau[21])
{
  memset(&proc_control_node_B.work_i[0], 0, 21U * sizeof(real_T));
  proc_control_node_B.i_eu = 0;
  while (proc_control_node_B.i_eu <= nfxd - 1) {
    proc_control_node_B.ii_l = ((proc_control_node_B.i_eu * 42 + ia0) +
      proc_control_node_B.i_eu) - 1;
    proc_control_node_B.mmi_tmp_dt = m - proc_control_node_B.i_eu;
    if (proc_control_node_B.i_eu + 1 < m) {
      proc_control_node_B.b_atmp_p = A[proc_control_node_B.ii_l];
      tau[proc_control_node_B.i_eu] = 0.0;
      if (proc_control_node_B.mmi_tmp_dt > 0) {
        proc_control_node_B.beta1_b4 = proc_control_node_xnrm2_pt
          (proc_control_node_B.mmi_tmp_dt - 1, A, proc_control_node_B.ii_l + 2);
        if (proc_control_node_B.beta1_b4 != 0.0) {
          proc_control_node_B.beta1_b4 = proc_control_node_rt_hypotd_snf
            (A[proc_control_node_B.ii_l], proc_control_node_B.beta1_b4);
          if (A[proc_control_node_B.ii_l] >= 0.0) {
            proc_control_node_B.beta1_b4 = -proc_control_node_B.beta1_b4;
          }

          if (fabs(proc_control_node_B.beta1_b4) < 1.0020841800044864E-292) {
            proc_control_node_B.knt_mq = -1;
            proc_control_node_B.mmip1_j = proc_control_node_B.ii_l +
              proc_control_node_B.mmi_tmp_dt;
            do {
              proc_control_node_B.knt_mq++;
              proc_control_node_B.b_k_jh = proc_control_node_B.ii_l + 1;
              while (proc_control_node_B.b_k_jh + 1 <=
                     proc_control_node_B.mmip1_j) {
                A[proc_control_node_B.b_k_jh] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_jh++;
              }

              proc_control_node_B.beta1_b4 *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp_p *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1_b4) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1_b4 = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp_p, proc_control_node_xnrm2_pt
               (proc_control_node_B.mmi_tmp_dt - 1, A, proc_control_node_B.ii_l
                + 2));
            if (proc_control_node_B.b_atmp_p >= 0.0) {
              proc_control_node_B.beta1_b4 = -proc_control_node_B.beta1_b4;
            }

            tau[proc_control_node_B.i_eu] = (proc_control_node_B.beta1_b4 -
              proc_control_node_B.b_atmp_p) / proc_control_node_B.beta1_b4;
            proc_control_node_B.b_atmp_p = 1.0 / (proc_control_node_B.b_atmp_p -
              proc_control_node_B.beta1_b4);
            proc_control_node_B.b_k_jh = proc_control_node_B.ii_l + 1;
            while (proc_control_node_B.b_k_jh + 1 <= proc_control_node_B.mmip1_j)
            {
              A[proc_control_node_B.b_k_jh] *= proc_control_node_B.b_atmp_p;
              proc_control_node_B.b_k_jh++;
            }

            proc_control_node_B.mmip1_j = 0;
            while (proc_control_node_B.mmip1_j <= proc_control_node_B.knt_mq) {
              proc_control_node_B.beta1_b4 *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1_j++;
            }

            proc_control_node_B.b_atmp_p = proc_control_node_B.beta1_b4;
          } else {
            tau[proc_control_node_B.i_eu] = (proc_control_node_B.beta1_b4 -
              A[proc_control_node_B.ii_l]) / proc_control_node_B.beta1_b4;
            proc_control_node_B.b_atmp_p = 1.0 / (A[proc_control_node_B.ii_l] -
              proc_control_node_B.beta1_b4);
            proc_control_node_B.knt_mq = proc_control_node_B.ii_l +
              proc_control_node_B.mmi_tmp_dt;
            proc_control_node_B.mmip1_j = proc_control_node_B.ii_l + 1;
            while (proc_control_node_B.mmip1_j + 1 <= proc_control_node_B.knt_mq)
            {
              A[proc_control_node_B.mmip1_j] *= proc_control_node_B.b_atmp_p;
              proc_control_node_B.mmip1_j++;
            }

            proc_control_node_B.b_atmp_p = proc_control_node_B.beta1_b4;
          }
        }
      }

      A[proc_control_node_B.ii_l] = proc_control_node_B.b_atmp_p;
    } else {
      tau[proc_control_node_B.i_eu] = 0.0;
    }

    if (proc_control_node_B.i_eu + 1 < n) {
      proc_control_node_B.b_atmp_p = A[proc_control_node_B.ii_l];
      A[proc_control_node_B.ii_l] = 1.0;
      proc_control_node_xzlarf_n(proc_control_node_B.mmi_tmp_dt, (n -
        proc_control_node_B.i_eu) - 1, proc_control_node_B.ii_l + 1,
        tau[proc_control_node_B.i_eu], A, proc_control_node_B.ii_l + 43,
        proc_control_node_B.work_i);
      A[proc_control_node_B.ii_l] = proc_control_node_B.b_atmp_p;
    }

    proc_control_node_B.i_eu++;
  }
}

// Function for MATLAB Function: '<S221>/Predict'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_a(real_T A[882],
  real_T tau[21])
{
  memset(&tau[0], 0, 21U * sizeof(real_T));
  proc_control_node_qrf_c(A, 1, 42, 21, 21, tau);
}

// Function for MATLAB Function: '<S221>/Predict'
void proc_control_nodeModelClass::proc_control_node_xorgqr_o(int32_T m, int32_T
  n, int32_T k, real_T A[882], int32_T ia0, const real_T tau[21], int32_T itau0)
{
  if (n >= 1) {
    proc_control_node_B.itau_b = k;
    while (proc_control_node_B.itau_b <= n - 1) {
      proc_control_node_B.i_ar = (proc_control_node_B.itau_b * 42 + ia0) - 1;
      proc_control_node_B.iaii_e = 0;
      while (proc_control_node_B.iaii_e <= m - 1) {
        A[proc_control_node_B.i_ar + proc_control_node_B.iaii_e] = 0.0;
        proc_control_node_B.iaii_e++;
      }

      A[proc_control_node_B.i_ar + proc_control_node_B.itau_b] = 1.0;
      proc_control_node_B.itau_b++;
    }

    proc_control_node_B.itau_b = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_a[0], 0, 21U * sizeof(real_T));
    proc_control_node_B.i_ar = k;
    while (proc_control_node_B.i_ar >= 1) {
      proc_control_node_B.iaii_e = (((proc_control_node_B.i_ar - 1) * 42 + ia0)
        + proc_control_node_B.i_ar) - 1;
      if (proc_control_node_B.i_ar < n) {
        A[proc_control_node_B.iaii_e - 1] = 1.0;
        proc_control_node_xzlarf_n((m - proc_control_node_B.i_ar) + 1, n -
          proc_control_node_B.i_ar, proc_control_node_B.iaii_e,
          tau[proc_control_node_B.itau_b], A, proc_control_node_B.iaii_e + 42,
          proc_control_node_B.work_a);
      }

      if (proc_control_node_B.i_ar < m) {
        proc_control_node_B.b_co = (proc_control_node_B.iaii_e + m) -
          proc_control_node_B.i_ar;
        proc_control_node_B.b_k_om = proc_control_node_B.iaii_e;
        while (proc_control_node_B.b_k_om + 1 <= proc_control_node_B.b_co) {
          A[proc_control_node_B.b_k_om] *= -tau[proc_control_node_B.itau_b];
          proc_control_node_B.b_k_om++;
        }
      }

      A[proc_control_node_B.iaii_e - 1] = 1.0 - tau[proc_control_node_B.itau_b];
      proc_control_node_B.b_co = 0;
      while (proc_control_node_B.b_co <= proc_control_node_B.i_ar - 2) {
        A[(proc_control_node_B.iaii_e - proc_control_node_B.b_co) - 2] = 0.0;
        proc_control_node_B.b_co++;
      }

      proc_control_node_B.itau_b--;
      proc_control_node_B.i_ar--;
    }
  }
}

// Function for MATLAB Function: '<S221>/Predict'
void proc_control_nodeModelClass::proc_control_node_qr_n(const real_T A[882],
  real_T Q[882], real_T R[441])
{
  memcpy(&proc_control_node_B.b_A[0], &A[0], 882U * sizeof(real_T));
  proc_control_node_xgeqrf_a(proc_control_node_B.b_A, proc_control_node_B.tau_l);
  for (proc_control_node_B.j_i = 0; proc_control_node_B.j_i < 21;
       proc_control_node_B.j_i++) {
    proc_control_node_B.i_kz = 0;
    while (proc_control_node_B.i_kz <= proc_control_node_B.j_i) {
      R[proc_control_node_B.i_kz + 21 * proc_control_node_B.j_i] =
        proc_control_node_B.b_A[42 * proc_control_node_B.j_i +
        proc_control_node_B.i_kz];
      proc_control_node_B.i_kz++;
    }

    proc_control_node_B.i_kz = proc_control_node_B.j_i + 1;
    while (proc_control_node_B.i_kz + 1 < 22) {
      R[proc_control_node_B.i_kz + 21 * proc_control_node_B.j_i] = 0.0;
      proc_control_node_B.i_kz++;
    }
  }

  proc_control_node_xorgqr_o(42, 21, 21, proc_control_node_B.b_A, 1,
    proc_control_node_B.tau_l, 1);
  proc_control_node_B.i_kz = 0;
  for (proc_control_node_B.j_i = 0; proc_control_node_B.j_i < 21;
       proc_control_node_B.j_i++) {
    memcpy(&Q[proc_control_node_B.i_kz],
           &proc_control_node_B.b_A[proc_control_node_B.i_kz], 42U * sizeof
           (real_T));
    proc_control_node_B.i_kz += 42;
  }
}

// Function for MATLAB Function: '<S221>/Predict'
void proc_control_nodeModelClass::proc_control_node_qrFactor_n(const real_T A
  [441], real_T S[441], const real_T Ns[441])
{
  for (proc_control_node_B.j_l2 = 0; proc_control_node_B.j_l2 < 21;
       proc_control_node_B.j_l2++) {
    proc_control_node_B.coffset_j = proc_control_node_B.j_l2 * 21;
    memset(&proc_control_node_B.y_a[proc_control_node_B.coffset_j], 0, 21U *
           sizeof(real_T));
    for (proc_control_node_B.i_jt = 0; proc_control_node_B.i_jt < 21;
         proc_control_node_B.i_jt++) {
      proc_control_node_B.bkj_j = A[proc_control_node_B.i_jt * 21 +
        proc_control_node_B.j_l2];
      for (proc_control_node_B.b_i_c3 = 0; proc_control_node_B.b_i_c3 < 21;
           proc_control_node_B.b_i_c3++) {
        proc_control_node_B.y_tmp_b = proc_control_node_B.coffset_j +
          proc_control_node_B.b_i_c3;
        proc_control_node_B.y_a[proc_control_node_B.y_tmp_b] +=
          S[proc_control_node_B.b_i_c3 * 21 + proc_control_node_B.i_jt] *
          proc_control_node_B.bkj_j;
      }
    }
  }

  proc_control_node_B.i41 = 0;
  proc_control_node_B.j_l2 = 0;
  for (proc_control_node_B.i_jt = 0; proc_control_node_B.i_jt < 21;
       proc_control_node_B.i_jt++) {
    proc_control_node_B.b_i_c3 = 0;
    for (proc_control_node_B.coffset_j = 0; proc_control_node_B.coffset_j < 21;
         proc_control_node_B.coffset_j++) {
      proc_control_node_B.y_tmp_b = proc_control_node_B.coffset_j +
        proc_control_node_B.i41;
      proc_control_node_B.y_j[proc_control_node_B.y_tmp_b] =
        proc_control_node_B.y_a[proc_control_node_B.coffset_j +
        proc_control_node_B.j_l2];
      proc_control_node_B.y_j[proc_control_node_B.y_tmp_b + 21] =
        Ns[proc_control_node_B.b_i_c3 + proc_control_node_B.i_jt];
      proc_control_node_B.b_i_c3 += 21;
    }

    proc_control_node_B.i41 += 42;
    proc_control_node_B.j_l2 += 21;
  }

  proc_control_node_qr_n(proc_control_node_B.y_j, proc_control_node_B.a__1,
    proc_control_node_B.y_a);
  proc_control_node_B.i41 = 0;
  for (proc_control_node_B.j_l2 = 0; proc_control_node_B.j_l2 < 21;
       proc_control_node_B.j_l2++) {
    proc_control_node_B.i_jt = 0;
    for (proc_control_node_B.b_i_c3 = 0; proc_control_node_B.b_i_c3 < 21;
         proc_control_node_B.b_i_c3++) {
      S[proc_control_node_B.b_i_c3 + proc_control_node_B.i41] =
        proc_control_node_B.y_a[proc_control_node_B.i_jt +
        proc_control_node_B.j_l2];
      proc_control_node_B.i_jt += 21;
    }

    proc_control_node_B.i41 += 21;
  }
}

real_T rt_urand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  uint32_T hi;
  uint32_T lo;

  // Uniform random number generator (random number between 0 and 1)

  // #define IA      16807                      magic multiplier = 7^5
  // #define IM      2147483647                 modulus = 2^31-1
  // #define IQ      127773                     IM div IA
  // #define IR      2836                       IM modulo IA
  // #define S       4.656612875245797e-10      reciprocal of 2^31-1
  // test = IA * (seed % IQ) - IR * (seed/IQ)
  // seed = test < 0 ? (test + IM) : test
  // return (seed*S)

  lo = *u % 127773U * 16807U;
  hi = *u / 127773U * 2836U;
  if (lo < hi) {
    *u = 2147483647U - (hi - lo);
  } else {
    *u = lo - hi;
  }

  return static_cast<real_T>(*u) * 4.6566128752457969E-10;
}

real_T rt_nrand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  real_T si;
  real_T sr;
  real_T y;

  // Normal (Gaussian) random number generator
  do {
    sr = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = sr * sr + si * si;
  } while (si > 1.0);

  y = sqrt(-2.0 * log(si) / si) * sr;
  return y;
}

void proc_control_nodeModelClass::pro_TrajectoryManager_setupImpl
  (TrajectoryManager_proc_contro_T *b_this)
{
  int32_T i;
  int32_T i_0;
  int32_T tmp;

  //  Perform one-time calculations, such as computing constants
  b_this->generationNumber = 0.0;
  b_this->dummy = 999.0;

  //  Chiffre NULL
  //  Vecteur pose NULL
  b_this->targetReachedCount = 0.0;

  //  Buffer trajectoire
  tmp = 0;
  for (i = 0; i < 13; i++) {
    b_this->emptyArray[i] = b_this->dummy;
    for (i_0 = 0; i_0 < 6001; i_0++) {
      b_this->poseBuffer[i_0 + tmp] = b_this->dummy;
    }

    tmp += 6001;
  }

  b_this->bufferCount = 0.0;
  b_this->done = false;
  b_this->init = 0.0;
}

// Model step function
void proc_control_nodeModelClass::step()
{
  SL_Bus_proc_control_node_sonia_common_KillSwitchMsg b_varargout_2_1;
  SL_Bus_proc_control_node_std_msgs_Bool BusAssignment;
  SL_Bus_proc_control_node_std_msgs_Bool b_varargout_2_0;
  SL_Bus_proc_control_node_std_msgs_Bool rtb_BusAssignment1;
  SL_Bus_proc_control_node_std_msgs_Bool rtb_BusAssignment2;
  SL_Bus_proc_control_node_std_msgs_Int8 rtb_BusAssignment;
  SL_Bus_proc_control_node_std_msgs_UInt8 b_varargout_2;
  uint16_T rtb_y_lp;
  char_T expl_temp[3];
  int8_T rtAction;
  int8_T rtPrevAction;
  uint8_T tmp;
  boolean_T b_varargout_1;
  boolean_T rtb_Merge;
  boolean_T rtb_NewDvlMsg;
  boolean_T rtb_Reset;
  boolean_T rtb_Reset_j;
  static const int8_T tmp_0[144] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const real_T e[441] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -4.6042543754832851E-6, -0.0022720436034725897, 0.00013605399495041681, 0.0,
    0.94789999991422, 0.0002323165737535551, 0.00085021850252945308,
    -7.4644574418929142E-5, -0.042372304854011958, 0.0024338870206531572,
    -1.8831321574108633, 0.0081315634991630855, 0.031843900678722045, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0019975139621085112, 3.50198667904036E-6,
    -2.7393041473633992E-5, 0.0, 0.00022368763943092531, 0.97943363183036425,
    0.0014929610497083712, 0.039186425137886907, 5.6614700144598253E-5,
    -0.00052789703364104388, 0.0078377521590508176, -0.80137776286231466,
    0.056970805070725557, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.097712985648965592, -4.6687337187153013E-8,
    4.698526643327685E-7, 0.0, -3.7822888752805087E-6, 0.00035289231485000289,
    -3.4189139533984093E-5, 0.95461902809957677, -7.1100422694502463E-7,
    8.9811567385581109E-6, -0.00013126902944982948, 0.013640927712662433,
    -0.0012950988615465717, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -6.2468820665019064E-8, 0.097719633191502883, 2.3215726369779438E-6, 0.0,
    -0.0008890798672821649, 3.9634420482915886E-6, 1.8779150781494828E-5,
    -9.5621691177178581E-7, 0.95478880828256985, 4.1141673422749054E-5,
    -0.0318401126387842, 0.00013737224957398742, 0.00070099650111093514, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.2606274736508919E-7,
    2.6894872029217156E-6, 0.097546159765407481, 0.0, 0.00010755525579326925,
    -2.1621574234746445E-5, -2.1868160728403164E-7, 1.3780352347645445E-5,
    4.7263455001554586E-5, 0.95132850476213759, 0.0038484242973110924,
    -0.0008333234816673673, -7.0205219328639629E-6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -1.7585041171691393E-6, -0.00033347288340573563,
    3.3122055023886013E-5, 0.0, 0.037320608448162429, 5.6600484105171559E-5,
    3.8015848024516326E-5, -3.1210978741585189E-5, -0.0063626044977050378,
    0.0006178014929020413, 0.5225327707856211, 0.0020692471467052189,
    0.001582519604983855, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00014266610121518416, 9.8370988499867457E-7, -4.7891849279322587E-6, 0.0,
    4.0707966674953438E-5, 0.0464090538358248, 2.4610229279834434E-5,
    0.0030919673412285178, 1.7576703166230974E-5, -9.7029434768206214E-5,
    0.0015099715156626865, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525911E-5, 9.4443848985596353E-6,
    -9.7712698035315807E-8, 0.0, 3.7516049822001157E-5, -2.1506383219102627E-9,
    0.04392176650032184, -0.00043412487299914745, 0.00017734495634069353,
    -1.6549466756155211E-6, 0.001284906265277134, -5.4203394113382193E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T theta[5] = { 0.01495585217958292, 0.253939833006323,
    0.95041789961629319, 2.097847961257068, 5.3719203511481517 };

  static const uint8_T c[5] = { 3U, 5U, 7U, 9U, 13U };

  static const int8_T g[273] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const real_T b_b[48] = { 0.02112443491058583, -0.015284356933675683,
    -7.0837403672252146E-5, 0.062952228101239543, 0.019032522297668636,
    -0.17235611708486639, 0.021112545591001931, 0.015556523198782039,
    9.3712054745178266E-5, -0.060884483374622281, 0.019613805650913103,
    -0.17335012146094617, 0.021790267284400529, -0.015565687047941387,
    -6.7363334491227168E-5, 0.060331047065513795, 0.019031465986279986,
    0.17628138981294922, 0.021778377964816624, 0.015275193084516326,
    9.7186123926203244E-5, -0.063505664410348023, 0.019612749339524459,
    0.17528738543686956, -0.001819638864719295, -0.0034249251816346319,
    -0.02095639900015615, -0.26767193546582568, 0.10593667623599359,
    0.00062021813460420567, -0.0018124211550371481, 0.003387750973601051,
    0.021100316216985739, 0.26476621250220889, 0.10537885436940329,
    -0.0006207996116589, 0.0018538731733468781, 0.0035708122797193441,
    -0.021822949502860629, 0.2790736050389333, -0.10793139553633729,
    -0.00064672437426625525, 0.001778186846409557, -0.0035336380716857632,
    0.02167903228603104, -0.27616788207531651, -0.1033841350690595,
    0.00064730585132094889 };

  static const real_T tmp_1[169] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T f[630] = { 0.00010422287096660737, -7.60262465294606E-5,
    -2.7978839506221557E-7, 0.0, 0.00013024602419296888, 4.5705305075394251E-5,
    -0.00039515692029936625, 0.00207067626528841, -0.0015161848659374837,
    -4.9246767934457295E-6, 0.0047144512137947516, 0.0017884809057889287,
    -0.015136665580870333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010417536353033212, 7.7231779270040308E-5, 3.9043431633268714E-7, 0.0,
    -0.00012640159694068945, 4.6849954954468127E-5, -0.00039756890175053893,
    0.00206983613181119, 0.0015388624403197394, 7.0936716057341977E-6,
    -0.0045837034086854992, 0.0018286450604411118, -0.015232210269176915, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0001072287753367836,
    -7.7268389610159381E-5, -2.6693703914389786E-7, 0.0, 0.00012531184349172991,
    4.570558793134934E-5, 0.00040426366299855908, 0.0021277731766221868,
    -0.0015395096046877032, -4.7070151263153741E-6, 0.0045454579501885747,
    0.001788552195101755, 0.015488629320465578, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0001071812679005083, 7.5989636189341476E-5, 4.032856722510048E-7,
    0.0, -0.00013133577764192826, 4.6850237810423216E-5, 0.00040185168154738689,
    0.0021269330431449652, 0.0015155377015695195, 7.3113332728645532E-6,
    -0.004752696672291677, 0.0018287163497539385, 0.015393084632159012, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6, -1.3816909168454246E-5,
    -0.00010338360438856695, 0.0, -0.00055248074134202211,
    0.00025178105258101226, 1.1579155540454203E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627935, -0.019969091635381544,
    0.00980213589487001, 3.9349807678455793E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.4592395341129119E-6, 1.3674246354540056E-5,
    0.00010405449326463774, 0.0, 0.00054678083512996211, 0.00025147137838153814,
    -1.025889017623742E-6, -0.00016249938771459153, 0.00024291206297072046,
    0.0020665268130396638, 0.019769533879726155, 0.0098088728766578433,
    -2.8973871535883628E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065845E-6, 1.44013773345665E-5, -0.00010698614121978928, 0.0,
    0.000575852427577522, -0.000256477703182633, -1.2054563576150274E-6,
    0.00016525729215282776, 0.00025570392622469734, -0.0021189752999033824,
    0.020810499779142153, -0.0099841160533174263, -4.0887653638265221E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.30151321617584E-6,
    -1.4258714520652321E-5, 0.00010631525234371853, 0.0, -0.00057015252136545643,
    -0.00024677472777991707, 1.0734298211933506E-6, 0.00015948934372563575,
    -0.00025324868038586779, 0.002106046793526513, -0.020610942023486768,
    -0.009626892718210418, 3.0511717495693104E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T h[390] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const int8_T k[32] = { 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
    40, 40, 40, 40, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
    30 };

  static const real_T o[21] = { 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T e_0[400] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.302127187741643E-6, -0.0011360218017362948,
    6.8026997475208417E-5, 0.94789999991421969, 0.00023231657375355513,
    0.00085021850252945308, -3.7322287209464571E-5, -0.021186152427005972,
    0.0012169435103265786, -0.94156607870543163, 0.0040657817495815428,
    0.015921950339361023, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00099875698105425514, 1.7509933395201809E-6, -1.3696520736817E-5,
    0.00022368763943092593, 0.97943363183036425, 0.0014929610497083706,
    0.019593212568943443, 2.830735007229914E-5, -0.000263948516820522,
    0.0039188760795254079, -0.40068888143115738, 0.028485402535362768, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.097712985648965592,
    -4.6687337187153066E-8, 4.6985266433276861E-7, -7.5645777505609488E-6,
    0.00070578462970000567, -6.8378279067968185E-5, 0.95461902809957677,
    -7.110042269450259E-7, 8.9811567385581143E-6, -0.00013126902944982953,
    0.013640927712662433, -0.0012950988615465715, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -6.2468820665019064E-8, 0.097719633191502883,
    2.3215726369779446E-6, -0.0017781597345643274, 7.9268840965831756E-6,
    3.7558301562989656E-5, -9.56216911771786E-7, 0.95478880828256985,
    4.1141673422749067E-5, -0.0318401126387842, 0.0001373722495739874,
    0.00070099650111093514, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    7.260627473650893E-7, 2.6894872029217169E-6, 0.097546159765407481,
    0.00021511051158653813, -4.3243148469492891E-5, -4.37363214568064E-7,
    1.3780352347645447E-5, 4.7263455001554613E-5, 0.95132850476213759,
    0.0038484242973110933, -0.0008333234816673673, -7.0205219328639765E-6, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.75850411716914E-6,
    -0.00033347288340573563, 3.3122055023886034E-5, 0.074641216896324913,
    0.0001132009682103431, 7.6031696049032638E-5, -3.12109787415852E-5,
    -0.0063626044977050378, 0.00061780149290204163, 0.522532770785621,
    0.0020692471467052185, 0.0015825196049838544, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00014266610121518413, 9.83709884998675E-7, -4.78918492793226E-6,
    8.141593334990632E-5, 0.0928181076716496, 4.9220458559668867E-5,
    0.0030919673412285174, 1.7576703166230984E-5, -9.7029434768206255E-5,
    0.001509971515662687, 0.85302749794390476, 0.0014260811666531243, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -2.2854788857525914E-5, 9.4443848985596387E-6,
    -9.7712698035315847E-8, 7.50320996440025E-5, -4.3012766438204923E-9,
    0.087843533000643667, -0.00043412487299914756, 0.00017734495634069358,
    -1.6549466756155219E-6, 0.0012849062652771337, -5.4203394113382162E-7,
    0.76714673440244707, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T l[32] = { 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0,
    268.0, 269.0, 270.0, 271.0, 272.0, 273.0, 274.0, 275.0, 276.0, 341.0, 342.0,
    343.0, 344.0, 345.0, 346.0, 347.0, 348.0, 349.0, 350.0, 351.0, 352.0, 353.0,
    354.0, 355.0, 356.0 };

  static const real_T n[13] = { 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0 };

  static const int8_T g_0[240] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const real_T c_b[48] = { 0.02112443491058583, -0.015284356933675681,
    -7.0837403672252132E-5, 0.062952228101239543, 0.019032522297668639,
    -0.17235611708486639, 0.021112545591001931, 0.01555652319878203,
    9.3712054745178266E-5, -0.060884483374622281, 0.01961380565091311,
    -0.17335012146094611, 0.021790267284400529, -0.01556568704794139,
    -6.7363334491227155E-5, 0.060331047065513788, 0.019031465986279989,
    0.17628138981294919, 0.02177837796481662, 0.015275193084516331,
    9.7186123926203244E-5, -0.063505664410348023, 0.019612749339524459,
    0.1752873854368695, -0.001819638864719295, -0.0034249251816346319,
    -0.02095639900015615, -0.26767193546582568, 0.10593667623599359,
    0.00062021813460420567, -0.0018124211550371481, 0.003387750973601051,
    0.021100316216985739, 0.26476621250220889, 0.10537885436940329,
    -0.0006207996116589, 0.0018538731733468781, 0.0035708122797193449,
    -0.021822949502860629, 0.2790736050389333, -0.10793139553633729,
    -0.00064672437426625525, 0.001778186846409557, -0.0035336380716857632,
    0.02167903228603104, -0.27616788207531651, -0.1033841350690595,
    0.000647305851320949 };

  static const real_T f_0[580] = { 0.00010422287096660738, -7.60262465294606E-5,
    -2.7978839506221573E-7, 0.000260492048385937, 9.1410610150788462E-5,
    -0.00079031384059873228, 0.0020706762652884106, -0.0015161848659374837,
    -4.9246767934457321E-6, 0.0047144512137947533, 0.0017884809057889283,
    -0.015136665580870332, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010417536353033206, 7.7231779270040281E-5, 3.9043431633268725E-7,
    -0.00025280319388137722, 9.36999099089363E-5, -0.00079513780350107764,
    0.0020698361318111885, 0.0015388624403197388, 7.0936716057342E-6,
    -0.0045837034086855, 0.0018286450604411127, -0.015232210269176909, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010722877533678366, -7.72683896101594E-5,
    -2.6693703914389791E-7, 0.0002506236869834583, 9.1411175862698708E-5,
    0.00080852732599711783, 0.0021277731766221881, -0.0015395096046877034,
    -4.7070151263153758E-6, 0.0045454579501885747, 0.0017885521951017554,
    0.015488629320465569, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0001071812679005083, 7.59896361893415E-5, 4.032856722510049E-7,
    -0.00026267155528385592, 9.370047562084646E-5, 0.00080370336309477344,
    0.0021269330431449652, 0.0015155377015695199, 7.3113332728645549E-6,
    -0.0047526966722916788, 0.0018287163497539387, 0.015393084632159004, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -8.4612352431695544E-6,
    -1.3816909168454246E-5, -0.000103383604388567, -0.0011049614826840457,
    0.00050356210516202453, 2.3158311080908376E-6, -0.00016224724816387283,
    -0.00024536730880955028, -0.0020535983066627943, -0.019969091635381547,
    0.00980213589487001, 3.9349807678455732E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -8.45923953411291E-6, 1.3674246354540061E-5,
    0.00010405449326463774, 0.0010935616702599184, 0.0005029427567630765,
    -2.0517780352474836E-6, -0.0001624993877145915, 0.00024291206297072056,
    0.0020665268130396638, 0.019769533879726159, 0.0098088728766578467,
    -2.8973871535883652E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    8.6189615611065862E-6, 1.4401377334566511E-5, -0.00010698614121978928,
    0.0011517048551550385, -0.000512955406365266, -2.4109127152300577E-6,
    0.00016525729215282779, 0.00025570392622469755, -0.0021189752999033824,
    0.02081049977914216, -0.0099841160533174263, -4.0887653638265275E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.3015132161758412E-6,
    -1.4258714520652324E-5, 0.00010631525234371853, -0.0011403050427309111,
    -0.00049354945555983435, 2.1468596423867036E-6, 0.00015948934372563578,
    -0.00025324868038586784, 0.002106046793526513, -0.020610942023486768,
    -0.00962689271821042, 3.0511717495693182E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0 };

  static const real_T h_0[348] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T q[256] = { -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T r[289] = { 3.0910850333915239, 2.2289763997812133,
    -1.7972741096502092, -2.0993827432605223, -0.043157858942708655,
    0.31582062552202467, 0.048051964271086559, -0.32071473085040186,
    2.4171882256933808, 1.8115221099991805, -1.4703558160087848,
    -1.7160219317029866, -0.044047078563894379, 0.276122336047006,
    0.0485338688296686, -0.28060912631277962, 0.0, 2.2289763997812133,
    3.1352328593431666, -2.1434129176347403, -1.7971564580727883,
    0.34007378781524461, -0.06494764664060132, -0.35100026717421784,
    0.0758741259995739, 1.8123640142898172, 2.45239851094449,
    -1.7510614040330632, -1.4710269073783915, 0.29246731091814715,
    -0.057970802395637788, -0.30192651147505106, 0.067430002952541174, 0.0,
    -1.7972741096502092, -2.1434129176347403, 3.22881553551401,
    2.3226767275294806, -0.020620745937338602, 0.3883715763264351,
    0.025684762561260475, -0.39343559295035635, -1.4725986209399857,
    -1.7524458991243206, 2.5275748547721335, 1.8877275765877997,
    -0.028640500830334665, 0.32471317092178509, 0.033233373856662266,
    -0.32930604394811208, 0.0, -2.0993827432605223, -1.7971564580727883,
    2.3226767275294806, 3.1849030127172169, 0.36261090082061465,
    0.0076033041638093324, -0.37336746888404387, 0.0031532638996194509,
    -1.7174228323435514, -1.4715694981790128, 1.8868692667478562,
    2.4927226009123959, 0.30787388865170678, -0.00937996752085847,
    -0.31722700644805735, 0.018733085317208582, 0.0, -0.043157858942708661,
    0.34007378781524461, -0.020620745937338567, 0.36261090082061465,
    2.5868975814039672, -0.13735988885434255, -1.4803614914962651,
    -0.20917620105336041, -0.045456336822240088, 0.29156182272603831,
    -0.026215178476726872, 0.31080298107155152, 1.9127530183337351,
    -0.14424607619915078, -1.284351339804199, -0.12415560233038711, 0.0,
    0.31582062552202456, -0.064947646640601334, 0.38837157632643504,
    0.0076033041638093142, -0.13735988885434258, 2.6062522865498323,
    -0.24013917183519973, -1.4687532258602876, 0.271532259873587,
    -0.063051511492295681, 0.33143910859999348, -0.0031446627658891051,
    -0.14414489403000094, 1.9274333294464652, -0.15019754229760365,
    -1.2730908931188574, 0.0, 0.048051964271086572, -0.35100026717421784,
    0.025684762561260469, -0.37336746888404382, -1.4803614914962653,
    -0.24013917183519967, 2.6845626184523805, -0.20406195512091413,
    0.049913162308434927, -0.30101297854641967, 0.030793331065072177,
    -0.32013280978978237, -1.2841781951383429, -0.15016251102223621,
    1.9976500045678445, -0.20330929840726433, 0.0, -0.32071473085040186,
    0.0758741259995739, -0.39343559295035635, 0.0031532638996194513,
    -0.20917620105336041, -1.4687532258602878, -0.20406195512091416,
    2.6419913820345586, -0.27598908535978128, 0.072502667312676572,
    -0.33601726118833808, 0.012474491484119617, -0.12442992916539283,
    -1.2730247422250756, -0.203101122466041, 1.9605557938565064, 0.0,
    2.4171882256933808, 1.8123640142898172, -1.4725986209399855,
    -1.7174228323435514, -0.045456336822240109, 0.271532259873587,
    0.049913162308434934, -0.27598908535978128, 2.2025709207667887,
    1.4813500378543054, -1.211401477638278, -1.4126223605507637,
    -0.046208410870819, 0.24039429096056547, 0.050350763567249289,
    -0.24453664365699523, 0.0, 1.8115221099991805, 2.45239851094449,
    -1.7524458991243206, -1.4715694981790128, 0.29156182272603831,
    -0.063051511492295681, -0.30101297854641967, 0.072502667312676544,
    1.4813500378543054, 2.2307566734081909, -1.4405812066655013,
    -1.2111745711116173, 0.25392581145704235, -0.057342765408266556,
    -0.262219124357847, 0.065636078309070714, 0.0, -1.4703558160087848,
    -1.7510614040330632, 2.5275748547721335, 1.8868692667478562,
    -0.026215178476726886, 0.33143910859999348, 0.030793331065072191,
    -0.33601726118833808, -1.2114014776382782, -1.4405812066655015,
    2.2914220696459093, 1.5422423406186869, -0.032888298541807685,
    0.28057224226952476, 0.037100889920920095, -0.28478483364863666, 0.0,
    -1.7160219317029866, -1.4710269073783915, 1.8877275765877997,
    2.4927226009123959, 0.31080298107155152, -0.0031446627658890977,
    -0.32013280978978237, 0.012474491484119617, -1.4126223605507637,
    -1.2111745711116173, 1.5422423406186869, 2.2636901300578351,
    0.26724592378605366, -0.017164814099307105, -0.27546899800417618,
    0.02538788831742923, 0.0, -0.044047078563894386, 0.29246731091814709,
    -0.028640500830334651, 0.30787388865170678, 1.9127530183337351,
    -0.14414489403000094, -1.2841781951383431, -0.12442992916539285,
    -0.046208410870819012, 0.25392581145704235, -0.032888298541807671,
    0.26724592378605366, 2.0556829786564119, -0.15144598386763677,
    -1.1273982131204878, -0.056838781668288083, 0.0, 0.276122336047006,
    -0.057970802395637809, 0.32471317092178514, -0.00937996752085849,
    -0.14424607619915089, 1.9274333294464652, -0.15016251102223621,
    -1.2730247422250751, 0.24039429096056542, -0.057342765408266563,
    0.28057224226952471, -0.017164814099307122, -0.15144598386763677,
    2.0666274869365804, -0.078669185964437088, -1.1165123171045037, 0.0,
    0.048533868829668605, -0.30192651147505106, 0.033233373856662293,
    -0.31722700644805735, -1.284351339804199, -0.15019754229760365,
    1.9976500045678447, -0.203101122466041, 0.050350763567249296,
    -0.262219124357847, 0.037100889920920095, -0.27546899800417612,
    -1.127398213120488, -0.078669185964437, 2.1304492978354732,
    -0.2043818987505468, 0.0, -0.28060912631277962, 0.067430002952541174,
    -0.32930604394811208, 0.018733085317208593, -0.12415560233038703,
    -1.2730908931188576, -0.20330929840726433, 1.9605557938565064,
    -0.24453664365699523, 0.065636078309070714, -0.28478483364863666,
    0.025387888317429223, -0.056838781668288138, -1.1165123171045039,
    -0.20438189875054677, 2.0977329975233365, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100000.0 };

  static const real_T s[544] = { -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T t[13] = { 900.0, 900.0, 900.0, 1600.0, 1600.0, 1600.0,
    1600.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T u[8] = { 0.16000000000000003, 0.16000000000000003,
    0.16000000000000003, 0.16000000000000003, 0.36, 0.36, 0.36, 0.36 };

  static const real_T v[1280] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T w[640] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0 };

  static const real_T o_0[20] = { 0.0, 0.0, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T l_0[32] = { 241.0, 242.0, 243.0, 244.0, 245.0, 246.0,
    247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 321.0,
    322.0, 323.0, 324.0, 325.0, 326.0, 327.0, 328.0, 329.0, 330.0, 331.0, 332.0,
    333.0, 334.0, 335.0, 336.0 };

  static const real_T n_0[12] = { 0.0, 0.0, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0 };

  static const real_T r_0[289] = { 12.07604159992832, 10.92472837399791,
    -10.413393510671645, -11.004706736602063, -0.20733205104216934,
    1.6099654279970672, 0.23120009752330284, -1.6338334744782002,
    9.7575259713243465, 8.8888714080880558, -8.4749600348729679,
    -8.9836145981092645, -0.21275798615404, 1.4172642959912238,
    0.23485546919131053, -1.4393617790284936, 0.0, 10.92472837399791,
    12.292238837443765, -11.220182318928332, -10.412671855482486,
    1.7330326616692411, -0.3180069500997818, -1.7867346110709783,
    0.37170889950151959, 8.892886981919256, 9.9298871752920217, -9.1550002905511,
    -8.4780000971783434, 1.5002354263129416, -0.28347114827744668,
    -1.5471811163304985, 0.33041683829500396, 0.0, -10.413393510671645,
    -11.220182318928334, 12.738819087350834, 11.372030279094156,
    -0.093036548739021452, 1.9774575370266481, 0.11777863235335419,
    -2.0021996206409791, -8.4853362962898515, -9.1612644457384462,
    10.2885414191608, 9.2526132697122137, -0.13454671530776388,
    1.6635453094583561, 0.15719113935084564, -1.6861897335014371, 0.0,
    -11.004706736602063, -10.412671855482486, 11.372030279094156,
    12.524065160213743, 1.8473281639723893, 0.049485158929797594,
    -1.9001560762409269, 0.0033427533387412191, -8.989975285694948,
    -8.4802486785344851, 9.2485011634826737, 10.118227770643145,
    1.5784466971592184, -0.037190134810314711, -1.6248454461709634,
    0.083588883822060991, 0.0, -0.20733205104216942, 1.7330326616692406,
    -0.093036548739021355, 1.8473281639723893, 9.21437077485256,
    0.10101066785794782, -8.2952765718664434, -0.2601048708440562,
    -0.22151658999878443, 1.4839115327925354, -0.12394476694835348,
    1.5814833558429662, 7.59666882172006, -0.1043441232566289,
    -7.1322956812862257, -2.9017177201880451E-5, 0.0, 1.6099654279970674,
    -0.31800695009978192, 1.9774575370266481, 0.049485158929797546,
    0.10101066785794795, 9.3067862814077476, -0.41126190538594914,
    -8.2365350438797442, 1.3822577290962381, -0.31091757077587528,
    1.6856854488098258, -0.0074898510622880892, -0.10406217030822178,
    7.6664259794223284, -0.12728133589801535, -7.0750824732160877, 0.0,
    0.23120009752330281, -1.7867346110709783, 0.11777863235335413,
    -1.9001560762409271, -8.2952765718664452, -0.41126190538594892,
    9.6930419438167377, -0.22650346656435083, 0.24321410836173954,
    -1.5302462926473566, 0.1462725512823087, -1.6271878497267867,
    -7.130331187589789, -0.12796503966614156, 8.013222607403895,
    -0.39492638014797166, 0.0, -1.6338334744782002, 0.37170889950151959,
    -2.0021996206409791, 0.0033427533387411505, -0.26010487084405653,
    -8.2365350438797442, -0.2265034665643503, 9.483143381288146,
    -1.403955247459193, 0.35725233063069689, -1.70801323314378,
    0.053194344946109993, -0.0022754638220461782, -7.0741168164995516,
    -0.39364559021966078, 7.8300378705412559, 0.0, 9.7575259713243465,
    8.892886981919256, -8.4853362962898515, -8.989975285694948,
    -0.22151658999878435, 1.3822577290962381, 0.24321410836173943,
    -1.403955247459193, 8.2373665919293639, 7.2769941648975722,
    -6.944550509663789, -7.3849229366955855, -0.22591795860220287,
    1.2315151841412917, 0.24628132234736971, -1.2518785478864582, 0.0,
    8.8888714080880558, 9.9298871752920217, -9.1612644457384445,
    -8.4802486785344868, 1.4839115327925354, -0.31091757077587517,
    -1.5302462926473566, 0.357252330630697, 7.2769941648975722,
    8.3752840199833773, -7.521584459326986, -6.9432946042411858,
    1.3002202451744982, -0.28249537599239233, -1.3412702244322505,
    0.32354535525014511, 0.0, -8.4749600348729679, -9.1550002905511,
    10.2885414191608, 9.2485011634826755, -0.12394476694835356,
    1.6856854488098258, 0.14627255128230868, -1.7080132331437798,
    -6.944550509663789, -7.5215844593269878, 8.6646401055397622,
    7.5676061558765726, -0.15830657425116942, 1.435146024223795,
    0.1790373518169989, -1.4558768017896235, 0.0, -8.9836145981092645,
    -8.4780000971783416, 9.2526132697122154, 10.118227770643145,
    1.5814833558429662, -0.0074898510622880407, -1.6271878497267867,
    0.053194344946110021, -7.3849229366955855, -6.9432946042411858,
    7.5676061558765726, 8.5292344883309781, 1.3678316295255317,
    -0.078864535909889816, -1.4085141949626212, 0.11954710134698021, 0.0,
    -0.21275798615404004, 1.5002354263129414, -0.13454671530776383,
    1.5784466971592184, 7.59666882172006, -0.10406217030822187,
    -7.130331187589789, -0.0022754638220461114, -0.22591795860220296,
    1.300220245174498, -0.15830657425116937, 1.3678316295255319,
    6.98911153158929, -0.27272014746783835, -6.2047180533709518,
    0.20832666924950416, 0.0, 1.4172642959912238, -0.28347114827744674,
    1.6635453094583561, -0.037190134810314704, -0.10434412325662884,
    7.6664259794223275, -0.12796503966614139, -7.0741168164995525,
    1.2315151841412919, -0.28249537599239238, 1.435146024223795,
    -0.078864535909889871, -0.27272014746783829, 7.040763959964579,
    0.10158415537014631, -6.1496279678668824, 0.0, 0.23485546919131059,
    -1.5471811163304985, 0.15719113935084564, -1.6248454461709634,
    -7.1322956812862257, -0.127281335898015, 8.0132226074038968,
    -0.39364559021966106, 0.24628132234736966, -1.3412702244322505,
    0.17903735181699884, -1.4085141949626214, -6.2047180533709527,
    0.1015841553701464, 7.3564772749658127, -0.53334337696501255, 0.0,
    -1.4393617790284936, 0.33041683829500396, -1.6861897335014373,
    0.08358888382206088, -2.9017177202173853E-5, -7.0750824732160886,
    -0.39492638014797138, 7.830037870541255, -1.2518785478864582,
    0.32354535525014511, -1.4558768017896235, 0.11954710134698016,
    0.20832666924950388, -6.1496279678668824, -0.53334337696501233,
    7.1946446755823885, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 100000.0 };

  static const real_T t_0[12] = { 900.0, 900.0, 900.0, 2025.0, 2025.0, 2025.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  const real_T *Rsqrt;
  boolean_T exitg1;
  if (rtmIsMajorTimeStep((&proc_control_node_M))) {
    // set solver stop time
    if (!((&proc_control_node_M)->Timing.clockTick0+1)) {
      rtsiSetSolverStopTime(&(&proc_control_node_M)->solverInfo,
                            (((&proc_control_node_M)->Timing.clockTickH0 + 1) *
        (&proc_control_node_M)->Timing.stepSize0 * 4294967296.0));
    } else {
      rtsiSetSolverStopTime(&(&proc_control_node_M)->solverInfo,
                            (((&proc_control_node_M)->Timing.clockTick0 + 1) * (
        &proc_control_node_M)->Timing.stepSize0 + (&proc_control_node_M)
        ->Timing.clockTickH0 * (&proc_control_node_M)->Timing.stepSize0 *
        4294967296.0));
    }
  }                                    // end MajorTimeStep

  // Update absolute time of base rate at minor time step
  if (rtmIsMinorTimeStep((&proc_control_node_M))) {
    (&proc_control_node_M)->Timing.t[0] = rtsiGetT(&(&proc_control_node_M)
      ->solverInfo);
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
    // Outputs for Atomic SubSystem: '<Root>/Subsystem1'
    // Outputs for Atomic SubSystem: '<S10>/Subscribe'
    // MATLABSystem: '<S326>/SourceBlock' incorporates:
    //   Inport: '<S330>/In1'

    rtb_Reset = Sub_proc_control_node_185_11.getLatestMessage
      (&proc_control_node_B.b_varargout_2_j);

    // Outputs for Enabled SubSystem: '<S326>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S330>/Enable'

    if (rtb_Reset) {
      proc_control_node_B.In1_n = proc_control_node_B.b_varargout_2_j;
    }

    // End of Outputs for SubSystem: '<S326>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe2'
    // MATLABSystem: '<S328>/SourceBlock' incorporates:
    //   Inport: '<S332>/In1'

    rtb_NewDvlMsg = Sub_proc_control_node_185_13.getLatestMessage(&b_varargout_2);

    // Outputs for Enabled SubSystem: '<S328>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S332>/Enable'

    if (rtb_NewDvlMsg) {
      proc_control_node_B.In1_i2 = b_varargout_2;
    }

    // End of Outputs for SubSystem: '<S328>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe2'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe3'
    // MATLABSystem: '<S329>/SourceBlock'
    rtb_Merge = Sub_proc_control_node_185_14.getLatestMessage(&b_varargout_2_0);

    // End of Outputs for SubSystem: '<S10>/Subscribe3'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe1'
    // MATLABSystem: '<S327>/SourceBlock' incorporates:
    //   Inport: '<S331>/In1'

    b_varargout_1 = Sub_proc_control_node_185_12.getLatestMessage
      (&b_varargout_2_1);

    // Outputs for Enabled SubSystem: '<S327>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S331>/Enable'

    if (b_varargout_1) {
      proc_control_node_B.In1_cx = b_varargout_2_1;
    }

    // End of Outputs for SubSystem: '<S327>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe1'

    // MATLABSystem: '<S10>/MATLAB System' incorporates:
    //   Logic: '<S10>/NOT'
    //   MATLABSystem: '<S326>/SourceBlock'
    //   MATLABSystem: '<S327>/SourceBlock'
    //   MATLABSystem: '<S328>/SourceBlock'
    //   MATLABSystem: '<S329>/SourceBlock'
    //   SignalConversion generated from: '<S10>/Bus Selector4'

    if (proc_control_node_DW.obj_mv.initial_mode !=
        proc_control_node_P.MATLABSystem_initial_mode) {
      proc_control_node_DW.obj_mv.initial_mode =
        proc_control_node_P.MATLABSystem_initial_mode;
    }

    // Outputs for Atomic SubSystem: '<S10>/Subscribe'
    //          %% Fonction qui détermine la condition initial
    if (rtb_Reset) {
      proc_control_node_DW.obj_mv.m_simulation = 1.0;

      //  activer la simulation
      proc_control_node_DW.obj_mv.m_initCond[0] =
        proc_control_node_B.In1_n.Position.X;
      proc_control_node_DW.obj_mv.m_initCond[1] =
        proc_control_node_B.In1_n.Position.Y;
      proc_control_node_DW.obj_mv.m_initCond[2] =
        proc_control_node_B.In1_n.Position.Z;

      //         %% Fonction qui vérifie si le quaternion est unitaire
      proc_control_node_B.scale = 3.3121686421112381E-170;
      proc_control_node_B.absxk = fabs(proc_control_node_B.In1_n.Orientation.W);
      if (proc_control_node_B.absxk > 3.3121686421112381E-170) {
        proc_control_node_B.d = 1.0;
        proc_control_node_B.scale = proc_control_node_B.absxk;
      } else {
        proc_control_node_B.t = proc_control_node_B.absxk /
          3.3121686421112381E-170;
        proc_control_node_B.d = proc_control_node_B.t * proc_control_node_B.t;
      }

      proc_control_node_B.absxk = fabs(proc_control_node_B.In1_n.Orientation.X);
      if (proc_control_node_B.absxk > proc_control_node_B.scale) {
        proc_control_node_B.t = proc_control_node_B.scale /
          proc_control_node_B.absxk;
        proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
          proc_control_node_B.t + 1.0;
        proc_control_node_B.scale = proc_control_node_B.absxk;
      } else {
        proc_control_node_B.t = proc_control_node_B.absxk /
          proc_control_node_B.scale;
        proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
      }

      proc_control_node_B.absxk = fabs(proc_control_node_B.In1_n.Orientation.Y);
      if (proc_control_node_B.absxk > proc_control_node_B.scale) {
        proc_control_node_B.t = proc_control_node_B.scale /
          proc_control_node_B.absxk;
        proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
          proc_control_node_B.t + 1.0;
        proc_control_node_B.scale = proc_control_node_B.absxk;
      } else {
        proc_control_node_B.t = proc_control_node_B.absxk /
          proc_control_node_B.scale;
        proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
      }

      proc_control_node_B.absxk = fabs(proc_control_node_B.In1_n.Orientation.Z);
      if (proc_control_node_B.absxk > proc_control_node_B.scale) {
        proc_control_node_B.t = proc_control_node_B.scale /
          proc_control_node_B.absxk;
        proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
          proc_control_node_B.t + 1.0;
        proc_control_node_B.scale = proc_control_node_B.absxk;
      } else {
        proc_control_node_B.t = proc_control_node_B.absxk /
          proc_control_node_B.scale;
        proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
      }

      proc_control_node_B.d = proc_control_node_B.scale * sqrt
        (proc_control_node_B.d);
      proc_control_node_B.Product8_a = proc_control_node_B.In1_n.Orientation.W /
        proc_control_node_B.d;
      proc_control_node_B.b_ik[0] = rtIsNaN(proc_control_node_B.Product8_a);
      proc_control_node_B.n[0] = proc_control_node_B.Product8_a;
      proc_control_node_B.Product8_a = proc_control_node_B.In1_n.Orientation.X /
        proc_control_node_B.d;
      proc_control_node_B.b_ik[1] = rtIsNaN(proc_control_node_B.Product8_a);
      proc_control_node_B.n[1] = proc_control_node_B.Product8_a;
      proc_control_node_B.Product8_a = proc_control_node_B.In1_n.Orientation.Y /
        proc_control_node_B.d;
      proc_control_node_B.b_ik[2] = rtIsNaN(proc_control_node_B.Product8_a);
      proc_control_node_B.n[2] = proc_control_node_B.Product8_a;
      proc_control_node_B.Product8_a = proc_control_node_B.In1_n.Orientation.Z /
        proc_control_node_B.d;
      proc_control_node_B.b_ik[3] = rtIsNaN(proc_control_node_B.Product8_a);
      rtb_Reset_j = true;
      proc_control_node_B.i_n = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.i_n < 4)) {
        if (!proc_control_node_B.b_ik[proc_control_node_B.i_n]) {
          rtb_Reset_j = false;
          exitg1 = true;
        } else {
          proc_control_node_B.i_n++;
        }
      }

      if (rtb_Reset_j) {
        proc_control_node_DW.obj_mv.m_initCond[3] = 1.0;
        proc_control_node_DW.obj_mv.m_initCond[4] = 0.0;
        proc_control_node_DW.obj_mv.m_initCond[5] = 0.0;
        proc_control_node_DW.obj_mv.m_initCond[6] = 0.0;
      } else {
        proc_control_node_DW.obj_mv.m_initCond[3] = proc_control_node_B.n[0];
        proc_control_node_DW.obj_mv.m_initCond[4] = proc_control_node_B.n[1];
        proc_control_node_DW.obj_mv.m_initCond[5] = proc_control_node_B.n[2];
        proc_control_node_DW.obj_mv.m_initCond[6] =
          proc_control_node_B.Product8_a;
      }
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe1'
    //         %% Fonction qui détermine le mode
    //          %% Fonction qui détermine l'arret d'urgence
    if (b_varargout_1) {
      proc_control_node_DW.obj_mv.m_killStatus =
        !proc_control_node_B.In1_cx.State;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe1'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe2'
    //  regarder l'états de la kill
    if (rtb_NewDvlMsg && (!(proc_control_node_DW.obj_mv.m_killStatus != 0.0)) &&
        (proc_control_node_DW.Delay_DSTATE_e != 0.0)) {
      proc_control_node_DW.obj_mv.m_mode = proc_control_node_B.In1_i2.Data;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe2'
    if (proc_control_node_DW.obj_mv.m_killStatus != 0.0) {
      proc_control_node_DW.obj_mv.m_mode = 0.0;
    }

    // Outputs for Atomic SubSystem: '<S10>/Subscribe3'
    //          %% Fonction qui détermine si on reset
    if (rtb_Merge || rtb_Reset) {
      proc_control_node_DW.obj_mv.m_reset = 1.0;
    } else {
      proc_control_node_DW.obj_mv.m_reset = 0.0;
    }

    //          %% Fonction qui détermine si on clear la trajectoire
    if (rtb_Merge || rtb_Reset || rtb_NewDvlMsg) {
      proc_control_node_DW.obj_mv.m_trajClear = 1.0;
    } else {
      proc_control_node_DW.obj_mv.m_trajClear = 0.0;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe3'

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o1[0] =
      proc_control_node_DW.obj_mv.m_initCond[3];
    proc_control_node_B.MATLABSystem_o1[1] =
      proc_control_node_DW.obj_mv.m_initCond[4];
    proc_control_node_B.MATLABSystem_o1[2] =
      proc_control_node_DW.obj_mv.m_initCond[5];
    proc_control_node_B.MATLABSystem_o1[3] =
      proc_control_node_DW.obj_mv.m_initCond[6];

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o2[0] =
      proc_control_node_DW.obj_mv.m_initCond[0];
    proc_control_node_B.MATLABSystem_o2[1] =
      proc_control_node_DW.obj_mv.m_initCond[1];
    proc_control_node_B.MATLABSystem_o2[2] =
      proc_control_node_DW.obj_mv.m_initCond[2];

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o3 =
      proc_control_node_DW.obj_mv.m_simulation;

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o4 = proc_control_node_DW.obj_mv.m_reset;

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o5 = proc_control_node_DW.obj_mv.m_mode;
    proc_control_node_B.MATLABSystem_o6 =
      proc_control_node_DW.obj_mv.m_trajClear;

    // End of Outputs for SubSystem: '<Root>/Subsystem1'
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
    // Outputs for Atomic SubSystem: '<Root>/ROS Input'
    // SwitchCase: '<S3>/Switch Case' incorporates:
    //   DataTypeConversion: '<S3>/Cast To Double'
    //   Inport: '<S53>/In1'
    //   Inport: '<S54>/In1'
    //   Inport: '<S55>/In1'
    //   Inport: '<S59>/In1'
    //   Inport: '<S60>/In1'
    //   Inport: '<S61>/In1'
    //   MATLABSystem: '<S50>/SourceBlock'
    //   MATLABSystem: '<S51>/SourceBlock'
    //   MATLABSystem: '<S52>/SourceBlock'
    //   MATLABSystem: '<S56>/SourceBlock'
    //   MATLABSystem: '<S57>/SourceBlock'
    //   MATLABSystem: '<S58>/SourceBlock'

    if (static_cast<uint8_T>(proc_control_node_B.MATLABSystem_o3) == 1) {
      // Outputs for IfAction SubSystem: '<S3>/Simulation' incorporates:
      //   ActionPort: '<S48>/Action Port'

      // Outputs for Atomic SubSystem: '<S48>/Subscribe'
      // MATLABSystem: '<S56>/SourceBlock'
      rtb_Merge = Sub_proc_control_node_31_1241.getLatestMessage
        (&proc_control_node_B.msg_m);

      // Outputs for Enabled SubSystem: '<S56>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S59>/Enable'

      if (rtb_Merge) {
        proc_control_node_B.In1_p = proc_control_node_B.msg_m;
      }

      // End of Outputs for SubSystem: '<S56>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S48>/Subscribe'

      // SignalConversion generated from: '<S46>/ SFunction ' incorporates:
      //   Inport: '<S59>/In1'
      //   MATLAB Function: '<S3>/Quaternion Normalise'
      //   MATLABSystem: '<S56>/SourceBlock'
      //   SignalConversion generated from: '<S48>/imu Data'

      proc_control_node_B.n[1] = proc_control_node_B.In1_p.Orientation.X;
      proc_control_node_B.n[2] = proc_control_node_B.In1_p.Orientation.Y;
      proc_control_node_B.n[3] = proc_control_node_B.In1_p.Orientation.Z;

      // SignalConversion generated from: '<S48>/imu Data' incorporates:
      //   Merge: '<S3>/Merge1'

      proc_control_node_B.t = proc_control_node_B.In1_p.Orientation.W;
      proc_control_node_B.epsilon = proc_control_node_B.In1_p.AngularVelocity.X;
      proc_control_node_B.Divide1_n =
        proc_control_node_B.In1_p.AngularVelocity.Y;
      proc_control_node_B.Divide2_h =
        proc_control_node_B.In1_p.AngularVelocity.Z;

      // Outputs for Atomic SubSystem: '<S48>/Subscribe1'
      // MATLABSystem: '<S57>/SourceBlock'
      rtb_NewDvlMsg = Sub_proc_control_node_31_1242.getLatestMessage
        (&proc_control_node_B.msg_fi);

      // Outputs for Enabled SubSystem: '<S57>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S60>/Enable'

      if (rtb_NewDvlMsg) {
        proc_control_node_B.In1_c = proc_control_node_B.msg_fi;
      }

      // End of Outputs for SubSystem: '<S57>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S48>/Subscribe1'

      // SignalConversion generated from: '<S48>/dvl data' incorporates:
      //   Inport: '<S60>/In1'
      //   MATLABSystem: '<S57>/SourceBlock'
      //   Merge: '<S3>/Merge2'

      proc_control_node_B.SensorOn = proc_control_node_B.In1_c.XVelBtm;
      proc_control_node_B.Product1_j5 = proc_control_node_B.In1_c.YVelBtm;
      proc_control_node_B.Divide_p = proc_control_node_B.In1_c.ZVelBtm;
      proc_control_node_B.WhiteNoise = proc_control_node_B.In1_c.EVelBtm;
      proc_control_node_B.t11 = proc_control_node_B.In1_c.Velocity1;
      proc_control_node_B.t12 = proc_control_node_B.In1_c.Velocity2;
      proc_control_node_B.t13 = proc_control_node_B.In1_c.Velocity3;
      proc_control_node_B.t14 = proc_control_node_B.In1_c.Velocity4;

      // Outputs for Atomic SubSystem: '<S48>/Subscribe2'
      // MATLABSystem: '<S58>/SourceBlock'
      rtb_Reset = Sub_proc_control_node_31_1305.getLatestMessage
        (&proc_control_node_B.b_varargout_2_p);

      // Outputs for Enabled SubSystem: '<S58>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S61>/Enable'

      if (rtb_Reset) {
        proc_control_node_B.In1_om = proc_control_node_B.b_varargout_2_p;
      }

      // End of Outputs for SubSystem: '<S58>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S48>/Subscribe2'

      // SignalConversion generated from: '<S48>/depth data' incorporates:
      //   Inport: '<S61>/In1'
      //   MATLABSystem: '<S58>/SourceBlock'
      //   Merge: '<S3>/Merge4'

      proc_control_node_B.rtb_PressureDepth_Data_k =
        proc_control_node_B.In1_om.Data;

      // End of Outputs for SubSystem: '<S3>/Simulation'
    } else {
      // Outputs for IfAction SubSystem: '<S3>/Real System' incorporates:
      //   ActionPort: '<S47>/Action Port'

      // Outputs for Atomic SubSystem: '<S47>/Subscribe'
      // MATLABSystem: '<S50>/SourceBlock'
      rtb_Merge = Sub_proc_control_node_31_5.getLatestMessage
        (&proc_control_node_B.msg_m);

      // Outputs for Enabled SubSystem: '<S50>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S53>/Enable'

      if (rtb_Merge) {
        proc_control_node_B.In1 = proc_control_node_B.msg_m;
      }

      // End of Outputs for SubSystem: '<S50>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S47>/Subscribe'

      // SignalConversion generated from: '<S46>/ SFunction ' incorporates:
      //   Inport: '<S53>/In1'
      //   MATLAB Function: '<S3>/Quaternion Normalise'
      //   MATLABSystem: '<S50>/SourceBlock'
      //   SignalConversion generated from: '<S47>/imu Data'

      proc_control_node_B.n[1] = proc_control_node_B.In1.Orientation.X;
      proc_control_node_B.n[2] = proc_control_node_B.In1.Orientation.Y;
      proc_control_node_B.n[3] = proc_control_node_B.In1.Orientation.Z;

      // SignalConversion generated from: '<S47>/imu Data' incorporates:
      //   Merge: '<S3>/Merge1'

      proc_control_node_B.t = proc_control_node_B.In1.Orientation.W;
      proc_control_node_B.epsilon = proc_control_node_B.In1.AngularVelocity.X;
      proc_control_node_B.Divide1_n = proc_control_node_B.In1.AngularVelocity.Y;
      proc_control_node_B.Divide2_h = proc_control_node_B.In1.AngularVelocity.Z;

      // Outputs for Atomic SubSystem: '<S47>/Subscribe1'
      // MATLABSystem: '<S51>/SourceBlock'
      rtb_NewDvlMsg = Sub_proc_control_node_31_1235.getLatestMessage
        (&proc_control_node_B.msg_fi);

      // Outputs for Enabled SubSystem: '<S51>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S54>/Enable'

      if (rtb_NewDvlMsg) {
        proc_control_node_B.In1_i = proc_control_node_B.msg_fi;
      }

      // End of Outputs for SubSystem: '<S51>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S47>/Subscribe1'

      // SignalConversion generated from: '<S47>/dvl data' incorporates:
      //   Inport: '<S54>/In1'
      //   MATLABSystem: '<S51>/SourceBlock'
      //   Merge: '<S3>/Merge2'

      proc_control_node_B.SensorOn = proc_control_node_B.In1_i.XVelBtm;
      proc_control_node_B.Product1_j5 = proc_control_node_B.In1_i.YVelBtm;
      proc_control_node_B.Divide_p = proc_control_node_B.In1_i.ZVelBtm;
      proc_control_node_B.WhiteNoise = proc_control_node_B.In1_i.EVelBtm;
      proc_control_node_B.t11 = proc_control_node_B.In1_i.Velocity1;
      proc_control_node_B.t12 = proc_control_node_B.In1_i.Velocity2;
      proc_control_node_B.t13 = proc_control_node_B.In1_i.Velocity3;
      proc_control_node_B.t14 = proc_control_node_B.In1_i.Velocity4;

      // Outputs for Atomic SubSystem: '<S47>/Subscribe2'
      // MATLABSystem: '<S52>/SourceBlock'
      rtb_Reset = Sub_proc_control_node_31_1302.getLatestMessage
        (&proc_control_node_B.b_varargout_2_p);

      // Outputs for Enabled SubSystem: '<S52>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S55>/Enable'

      if (rtb_Reset) {
        proc_control_node_B.In1_e = proc_control_node_B.b_varargout_2_p;
      }

      // End of Outputs for SubSystem: '<S52>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S47>/Subscribe2'

      // SignalConversion generated from: '<S47>/depth data' incorporates:
      //   Inport: '<S55>/In1'
      //   MATLABSystem: '<S52>/SourceBlock'
      //   Merge: '<S3>/Merge4'

      proc_control_node_B.rtb_PressureDepth_Data_k =
        proc_control_node_B.In1_e.Data;

      // End of Outputs for SubSystem: '<S3>/Real System'
    }

    // End of SwitchCase: '<S3>/Switch Case'

    // SignalConversion generated from: '<S46>/ SFunction ' incorporates:
    //   MATLAB Function: '<S3>/Quaternion Normalise'
    //   Merge: '<S3>/Merge1'

    proc_control_node_B.n[0] = proc_control_node_B.t;

    // MATLAB Function: '<S3>/Quaternion Normalise' incorporates:
    //   Merge: '<S3>/Merge1'
    //   SignalConversion generated from: '<S46>/ SFunction '

    proc_control_node_B.scale = 3.3121686421112381E-170;
    proc_control_node_B.absxk = fabs(proc_control_node_B.t);
    if (proc_control_node_B.absxk > 3.3121686421112381E-170) {
      proc_control_node_B.d = 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        3.3121686421112381E-170;
      proc_control_node_B.d = proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = fabs(proc_control_node_B.n[1]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = fabs(proc_control_node_B.n[2]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = fabs(proc_control_node_B.n[3]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.d = proc_control_node_B.scale * sqrt
      (proc_control_node_B.d);
    proc_control_node_B.Product8_a = proc_control_node_B.n[0] /
      proc_control_node_B.d;
    proc_control_node_B.b_ik[0] = rtIsNaN(proc_control_node_B.Product8_a);
    proc_control_node_B.n[0] = proc_control_node_B.Product8_a;
    proc_control_node_B.Product8_a = proc_control_node_B.n[1] /
      proc_control_node_B.d;
    proc_control_node_B.b_ik[1] = rtIsNaN(proc_control_node_B.Product8_a);
    proc_control_node_B.n[1] = proc_control_node_B.Product8_a;
    proc_control_node_B.Product8_a = proc_control_node_B.n[2] /
      proc_control_node_B.d;
    proc_control_node_B.b_ik[2] = rtIsNaN(proc_control_node_B.Product8_a);
    proc_control_node_B.n[2] = proc_control_node_B.Product8_a;
    proc_control_node_B.Product8_a = proc_control_node_B.n[3] /
      proc_control_node_B.d;
    proc_control_node_B.b_ik[3] = rtIsNaN(proc_control_node_B.Product8_a);
    proc_control_node_B.n[3] = proc_control_node_B.Product8_a;
    rtb_Reset_j = true;
    proc_control_node_B.i_n = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.i_n < 4)) {
      if (!proc_control_node_B.b_ik[proc_control_node_B.i_n]) {
        rtb_Reset_j = false;
        exitg1 = true;
      } else {
        proc_control_node_B.i_n++;
      }
    }

    if (rtb_Reset_j) {
      proc_control_node_B.n[0] = 1.0;
      proc_control_node_B.n[1] = 0.0;
      proc_control_node_B.n[2] = 0.0;
      proc_control_node_B.n[3] = 0.0;
    }

    // Outputs for Enabled SubSystem: '<S3>/Subsystem' incorporates:
    //   EnablePort: '<S49>/Enable'

    // Logic: '<S3>/NOT' incorporates:
    //   Delay: '<S3>/Delay'

    if (!(proc_control_node_B.y != 0.0)) {
      // Switch: '<S65>/Reset' incorporates:
      //   Constant: '<S49>/Constant1'
      //   Constant: '<S65>/Initial Condition'
      //   Memory: '<S65>/Memory'
      //   MinMax: '<S63>/MinMax'

      if (proc_control_node_P.Constant1_Value != 0.0) {
        rtb_Reset = proc_control_node_P.MinMaxRunningResettable_vinit;
      } else {
        rtb_Reset = (rtb_NewDvlMsg ||
                     proc_control_node_DW.Memory_PreviousInput_i);
      }

      // End of Switch: '<S65>/Reset'

      // Switch: '<S66>/Reset' incorporates:
      //   Constant: '<S49>/Constant'
      //   Constant: '<S66>/Initial Condition'
      //   Memory: '<S66>/Memory'
      //   MinMax: '<S64>/MinMax'

      if (proc_control_node_P.Constant_Value_f2j != 0.0) {
        rtb_Reset_j = proc_control_node_P.MinMaxRunningResettable1_vinit;
      } else {
        rtb_Reset_j = (rtb_Merge || proc_control_node_DW.Memory_PreviousInput_f);
      }

      // End of Switch: '<S66>/Reset'

      // MATLAB Function: '<S49>/MATLAB Function'
      proc_control_node_B.y = (rtb_Reset + rtb_Reset_j >= 2);

      // Update for Memory: '<S65>/Memory'
      proc_control_node_DW.Memory_PreviousInput_i = rtb_Reset;

      // Update for Memory: '<S66>/Memory'
      proc_control_node_DW.Memory_PreviousInput_f = rtb_Reset_j;
    }

    // End of Logic: '<S3>/NOT'
    // End of Outputs for SubSystem: '<S3>/Subsystem'
    // End of Outputs for SubSystem: '<Root>/ROS Input'

    // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
    // Sum: '<S260>/Sum' incorporates:
    //   Product: '<S260>/Product'
    //   Product: '<S260>/Product1'
    //   Product: '<S260>/Product2'
    //   Product: '<S260>/Product3'
    //   UnaryMinus: '<S256>/Unary Minus'
    //   UnaryMinus: '<S256>/Unary Minus1'
    //   UnaryMinus: '<S256>/Unary Minus2'

    proc_control_node_B.d = ((proc_control_node_B.n[0] * proc_control_node_B.n[0]
      + -proc_control_node_B.n[1] * -proc_control_node_B.n[1]) +
      -proc_control_node_B.n[2] * -proc_control_node_B.n[2]) +
      -proc_control_node_B.n[3] * -proc_control_node_B.n[3];

    // Product: '<S257>/Divide'
    proc_control_node_B.scale = proc_control_node_B.n[0] / proc_control_node_B.d;

    // Product: '<S257>/Divide1' incorporates:
    //   UnaryMinus: '<S256>/Unary Minus'

    proc_control_node_B.absxk = proc_control_node_B.n[1] / proc_control_node_B.d;

    // Product: '<S257>/Divide2' incorporates:
    //   UnaryMinus: '<S256>/Unary Minus1'

    proc_control_node_B.t = proc_control_node_B.n[2] / proc_control_node_B.d;

    // Product: '<S257>/Divide3' incorporates:
    //   UnaryMinus: '<S256>/Unary Minus2'

    proc_control_node_B.Divide3 = proc_control_node_B.n[3] /
      proc_control_node_B.d;

    // Sqrt: '<S265>/sqrt' incorporates:
    //   Product: '<S266>/Product'
    //   Product: '<S266>/Product1'
    //   Product: '<S266>/Product2'
    //   Product: '<S266>/Product3'
    //   Sum: '<S266>/Sum'

    proc_control_node_B.d = sqrt(((proc_control_node_B.scale *
      proc_control_node_B.scale + proc_control_node_B.absxk *
      proc_control_node_B.absxk) + proc_control_node_B.t * proc_control_node_B.t)
      + proc_control_node_B.Divide3 * proc_control_node_B.Divide3);

    // Product: '<S261>/Product'
    proc_control_node_B.fcn1_k = proc_control_node_B.scale /
      proc_control_node_B.d;

    // Product: '<S261>/Product1'
    proc_control_node_B.fcn2 = proc_control_node_B.absxk / proc_control_node_B.d;

    // Product: '<S261>/Product2'
    proc_control_node_B.Product8_a = proc_control_node_B.t /
      proc_control_node_B.d;

    // Product: '<S261>/Product3'
    proc_control_node_B.d = proc_control_node_B.Divide3 / proc_control_node_B.d;

    // Product: '<S264>/Product4' incorporates:
    //   Constant: '<S250>/Constant'
    //   Gain: '<S264>/Gain'
    //   Product: '<S264>/Product'
    //   Product: '<S264>/Product1'
    //   Sum: '<S264>/Sum1'

    proc_control_node_B.Product1_j5_n = (proc_control_node_B.fcn2 *
      proc_control_node_B.d + proc_control_node_B.fcn1_k *
      proc_control_node_B.Product8_a) * proc_control_node_P.Gain_Gain_jj *
      proc_control_node_P.physics.DepthPose[0];

    // Product: '<S264>/Product5' incorporates:
    //   Constant: '<S250>/Constant'
    //   Gain: '<S264>/Gain1'
    //   Product: '<S264>/Product2'
    //   Product: '<S264>/Product3'
    //   Sum: '<S264>/Sum2'

    proc_control_node_B.Product2_g = (proc_control_node_B.Product8_a *
      proc_control_node_B.d - proc_control_node_B.fcn1_k *
      proc_control_node_B.fcn2) * proc_control_node_P.Gain1_Gain_j *
      proc_control_node_P.physics.DepthPose[1];

    // Product: '<S264>/Product8' incorporates:
    //   Constant: '<S250>/Constant'
    //   Constant: '<S264>/Constant'
    //   Gain: '<S264>/Gain2'
    //   Product: '<S264>/Product6'
    //   Product: '<S264>/Product7'
    //   Sum: '<S264>/Sum3'

    proc_control_node_B.Product8_a = ((proc_control_node_P.Constant_Value_a1 -
      proc_control_node_B.fcn2 * proc_control_node_B.fcn2) -
      proc_control_node_B.Product8_a * proc_control_node_B.Product8_a) *
      proc_control_node_P.Gain2_Gain_ob * proc_control_node_P.physics.DepthPose
      [2];

    // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
    //   EnablePort: '<S251>/Enable'

    if (rtb_NewDvlMsg) {
      // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
      //   EnablePort: '<S270>/Enable'

      // Delay: '<S267>/Delay'
      if (proc_control_node_DW.Delay_DSTATE_i > 0.0) {
        // Gain: '<S271>/1//2' incorporates:
        //   Constant: '<S270>/si y devant'

        proc_control_node_B.fcn2 = proc_control_node_P.u2_Gain_b *
          proc_control_node_P.siydevant_Value[0];

        // Trigonometry: '<S271>/sincos'
        proc_control_node_B.fcn1_k = sin(proc_control_node_B.fcn2);
        proc_control_node_B.VectorConcatenate_p[0] = cos
          (proc_control_node_B.fcn2);

        // Gain: '<S271>/1//2' incorporates:
        //   Constant: '<S270>/si y devant'

        proc_control_node_B.fcn2 = proc_control_node_P.u2_Gain_b *
          proc_control_node_P.siydevant_Value[1];

        // Trigonometry: '<S271>/sincos'
        proc_control_node_B.rtb_Gain_f_idx_1 = sin(proc_control_node_B.fcn2);
        proc_control_node_B.VectorConcatenate_p[1] = cos
          (proc_control_node_B.fcn2);

        // Gain: '<S271>/1//2' incorporates:
        //   Constant: '<S270>/si y devant'

        proc_control_node_B.fcn2 = proc_control_node_P.u2_Gain_b *
          proc_control_node_P.siydevant_Value[2];

        // Trigonometry: '<S271>/sincos'
        proc_control_node_B.d = sin(proc_control_node_B.fcn2);
        proc_control_node_B.VectorConcatenate_p[2] = cos
          (proc_control_node_B.fcn2);

        // Fcn: '<S271>/q0' incorporates:
        //   Fcn: '<S271>/q3'

        proc_control_node_B.fcn2 = proc_control_node_B.VectorConcatenate_p[0] *
          proc_control_node_B.VectorConcatenate_p[1];
        proc_control_node_B.q0_tmp = proc_control_node_B.fcn1_k *
          proc_control_node_B.rtb_Gain_f_idx_1;

        // Fcn: '<S271>/q0'
        proc_control_node_B.q0 = proc_control_node_B.fcn2 *
          proc_control_node_B.VectorConcatenate_p[2] -
          proc_control_node_B.q0_tmp * proc_control_node_B.d;

        // Fcn: '<S271>/q1' incorporates:
        //   Fcn: '<S271>/q2'

        proc_control_node_B.rtb_Gain_f_idx_1 *=
          proc_control_node_B.VectorConcatenate_p[0];
        proc_control_node_B.fcn1_k *= proc_control_node_B.VectorConcatenate_p[1];

        // Fcn: '<S271>/q1'
        proc_control_node_B.q1 = proc_control_node_B.rtb_Gain_f_idx_1 *
          proc_control_node_B.d + proc_control_node_B.fcn1_k *
          proc_control_node_B.VectorConcatenate_p[2];

        // Fcn: '<S271>/q2'
        proc_control_node_B.q2 = proc_control_node_B.rtb_Gain_f_idx_1 *
          proc_control_node_B.VectorConcatenate_p[2] -
          proc_control_node_B.fcn1_k * proc_control_node_B.d;

        // Fcn: '<S271>/q3'
        proc_control_node_B.q3 = proc_control_node_B.fcn2 *
          proc_control_node_B.d + proc_control_node_B.q0_tmp *
          proc_control_node_B.VectorConcatenate_p[2];
      }

      // End of Delay: '<S267>/Delay'
      // End of Outputs for SubSystem: '<S267>/Subsystem2'

      // Outputs for Atomic SubSystem: '<Root>/ROS Input'
      // MATLAB Function: '<S251>/MATLAB Function1' incorporates:
      //   Constant: '<S251>/Constant1'
      //   Merge: '<S3>/Merge2'
      //   SignalConversion generated from: '<S3>/Bus Selector1'

      proc_control_node_B.n[0] = fabs(proc_control_node_B.SensorOn);
      proc_control_node_B.n[1] = fabs(proc_control_node_B.Product1_j5);
      proc_control_node_B.n[2] = fabs(proc_control_node_B.Divide_p);
      proc_control_node_B.n[3] = fabs(proc_control_node_B.WhiteNoise);

      // End of Outputs for SubSystem: '<Root>/ROS Input'
      if (proc_control_node_maximum_j(proc_control_node_B.n) <
          proc_control_node_P.Constant1_Value_a) {
        // Outputs for Atomic SubSystem: '<Root>/ROS Input'
        proc_control_node_B.t11 = proc_control_node_B.SensorOn;
        proc_control_node_B.t12 = proc_control_node_B.Product1_j5;
        proc_control_node_B.t13 = proc_control_node_B.Divide_p;

        // End of Outputs for SubSystem: '<Root>/ROS Input'
      } else {
        // Outputs for Atomic SubSystem: '<Root>/ROS Input'
        proc_control_node_B.n[0] = fabs(proc_control_node_B.t11);
        proc_control_node_B.n[1] = fabs(proc_control_node_B.t12);
        proc_control_node_B.n[2] = fabs(proc_control_node_B.t13);
        proc_control_node_B.n[3] = fabs(proc_control_node_B.t14);

        // End of Outputs for SubSystem: '<Root>/ROS Input'
        if (!(proc_control_node_maximum_j(proc_control_node_B.n) <
              proc_control_node_P.Constant1_Value_a)) {
          proc_control_node_B.t11 = 0.0;
          proc_control_node_B.t12 = 0.0;
          proc_control_node_B.t13 = 0.0;
        }
      }

      // End of MATLAB Function: '<S251>/MATLAB Function1'

      // Sqrt: '<S276>/sqrt' incorporates:
      //   Product: '<S277>/Product'
      //   Product: '<S277>/Product1'
      //   Product: '<S277>/Product2'
      //   Product: '<S277>/Product3'
      //   Sum: '<S277>/Sum'

      proc_control_node_B.Product1_j5 = sqrt(((proc_control_node_B.q0 *
        proc_control_node_B.q0 + proc_control_node_B.q1 * proc_control_node_B.q1)
        + proc_control_node_B.q2 * proc_control_node_B.q2) +
        proc_control_node_B.q3 * proc_control_node_B.q3);

      // Product: '<S272>/Product'
      proc_control_node_B.d = proc_control_node_B.q0 /
        proc_control_node_B.Product1_j5;

      // Product: '<S272>/Product1'
      proc_control_node_B.fcn1_k = proc_control_node_B.q1 /
        proc_control_node_B.Product1_j5;

      // Product: '<S272>/Product2'
      proc_control_node_B.fcn2 = proc_control_node_B.q2 /
        proc_control_node_B.Product1_j5;

      // Product: '<S272>/Product3'
      proc_control_node_B.Product1_j5 = proc_control_node_B.q3 /
        proc_control_node_B.Product1_j5;

      // Product: '<S273>/Product7' incorporates:
      //   Product: '<S274>/Product7'

      proc_control_node_B.SensorOn = proc_control_node_B.Product1_j5 *
        proc_control_node_B.Product1_j5;

      // Product: '<S273>/Product' incorporates:
      //   Product: '<S274>/Product'

      proc_control_node_B.t14 = proc_control_node_B.fcn1_k *
        proc_control_node_B.fcn2;

      // Product: '<S273>/Product1' incorporates:
      //   Product: '<S274>/Product1'

      proc_control_node_B.Divide_p = proc_control_node_B.d *
        proc_control_node_B.Product1_j5;

      // Product: '<S273>/Product3' incorporates:
      //   Product: '<S275>/Product'

      proc_control_node_B.WhiteNoise = proc_control_node_B.fcn1_k *
        proc_control_node_B.Product1_j5;

      // Product: '<S273>/Product2' incorporates:
      //   Product: '<S275>/Product1'

      proc_control_node_B.q0_tmp = proc_control_node_B.d *
        proc_control_node_B.fcn2;

      // Product: '<S273>/Product6' incorporates:
      //   Product: '<S275>/Product7'

      proc_control_node_B.rtb_Gain_f_idx_1 = proc_control_node_B.fcn2 *
        proc_control_node_B.fcn2;

      // Sum: '<S273>/Sum' incorporates:
      //   Constant: '<S273>/Constant'
      //   Gain: '<S273>/Gain'
      //   Gain: '<S273>/Gain1'
      //   Gain: '<S273>/Gain2'
      //   Product: '<S273>/Product'
      //   Product: '<S273>/Product1'
      //   Product: '<S273>/Product2'
      //   Product: '<S273>/Product3'
      //   Product: '<S273>/Product4'
      //   Product: '<S273>/Product5'
      //   Product: '<S273>/Product6'
      //   Product: '<S273>/Product7'
      //   Product: '<S273>/Product8'
      //   Sum: '<S273>/Sum1'
      //   Sum: '<S273>/Sum2'
      //   Sum: '<S273>/Sum3'

      proc_control_node_B.Sum = (((proc_control_node_P.Constant_Value_fg -
        proc_control_node_B.rtb_Gain_f_idx_1) - proc_control_node_B.SensorOn) *
        proc_control_node_P.Gain2_Gain_o * proc_control_node_B.t11 +
        (proc_control_node_B.t14 + proc_control_node_B.Divide_p) *
        proc_control_node_P.Gain_Gain_o * proc_control_node_B.t12) +
        (proc_control_node_B.WhiteNoise - proc_control_node_B.q0_tmp) *
        proc_control_node_P.Gain1_Gain_k * proc_control_node_B.t13;

      // Product: '<S274>/Product3' incorporates:
      //   Product: '<S275>/Product3'

      proc_control_node_B.Product1_j5 *= proc_control_node_B.fcn2;

      // Product: '<S274>/Product2' incorporates:
      //   Product: '<S275>/Product2'

      proc_control_node_B.d *= proc_control_node_B.fcn1_k;

      // Product: '<S274>/Product6' incorporates:
      //   Product: '<S275>/Product6'

      proc_control_node_B.fcn2 = proc_control_node_B.fcn1_k *
        proc_control_node_B.fcn1_k;

      // Sum: '<S274>/Sum' incorporates:
      //   Constant: '<S274>/Constant'
      //   Gain: '<S274>/Gain'
      //   Gain: '<S274>/Gain1'
      //   Gain: '<S274>/Gain2'
      //   Product: '<S274>/Product2'
      //   Product: '<S274>/Product3'
      //   Product: '<S274>/Product4'
      //   Product: '<S274>/Product5'
      //   Product: '<S274>/Product6'
      //   Product: '<S274>/Product8'
      //   Sum: '<S274>/Sum1'
      //   Sum: '<S274>/Sum2'
      //   Sum: '<S274>/Sum3'

      proc_control_node_B.Sum_o = (((proc_control_node_P.Constant_Value_j -
        proc_control_node_B.fcn2) - proc_control_node_B.SensorOn) *
        proc_control_node_P.Gain2_Gain_k * proc_control_node_B.t12 +
        (proc_control_node_B.t14 - proc_control_node_B.Divide_p) *
        proc_control_node_P.Gain_Gain_mq * proc_control_node_B.t11) +
        (proc_control_node_B.d + proc_control_node_B.Product1_j5) *
        proc_control_node_P.Gain1_Gain_b * proc_control_node_B.t13;

      // Sum: '<S275>/Sum' incorporates:
      //   Constant: '<S275>/Constant'
      //   Gain: '<S275>/Gain'
      //   Gain: '<S275>/Gain1'
      //   Gain: '<S275>/Gain2'
      //   Product: '<S275>/Product4'
      //   Product: '<S275>/Product5'
      //   Product: '<S275>/Product8'
      //   Sum: '<S275>/Sum1'
      //   Sum: '<S275>/Sum2'
      //   Sum: '<S275>/Sum3'

      proc_control_node_B.Sum_c = ((proc_control_node_B.WhiteNoise +
        proc_control_node_B.q0_tmp) * proc_control_node_P.Gain_Gain_n *
        proc_control_node_B.t11 + (proc_control_node_B.Product1_j5 -
        proc_control_node_B.d) * proc_control_node_P.Gain1_Gain_ch *
        proc_control_node_B.t12) + ((proc_control_node_P.Constant_Value_ol -
        proc_control_node_B.fcn2) - proc_control_node_B.rtb_Gain_f_idx_1) *
        proc_control_node_P.Gain2_Gain_br * proc_control_node_B.t13;

      // Update for Delay: '<S267>/Delay' incorporates:
      //   Constant: '<S267>/Constant6'

      proc_control_node_DW.Delay_DSTATE_i = proc_control_node_P.Constant6_Value;
    }

    // End of Outputs for SubSystem: '<S8>/DVL Mesurments'

    // Delay: '<S255>/ '
    memcpy(&proc_control_node_B.u[0], &proc_control_node_DW._DSTATE[0], sizeof
           (real_T) << 3U);

    // Inport: '<S8>/SensorOn'
    proc_control_node_B.SensorOn = proc_control_node_B.y;

    // Logic: '<S253>/AND' incorporates:
    //   Inport: '<S8>/SensorOn'
    //   Logic: '<S253>/NOT'

    rtb_Reset = ((!(proc_control_node_B.MATLABSystem_o4 != 0.0)) &&
                 (proc_control_node_B.y != 0.0));

    // Outputs for Enabled SubSystem: '<S8>/Subsystem' incorporates:
    //   EnablePort: '<S254>/Enable'

    if (rtb_Reset) {
      // Outputs for Enabled SubSystem: '<S281>/Correct1' incorporates:
      //   EnablePort: '<S282>/Enable'

      // Constant: '<S281>/Enable1'
      if (proc_control_node_P.Enable1_Value_i) {
        // MATLAB Function: '<S282>/Correct' incorporates:
        //   Constant: '<S281>/R1'
        //   DataStoreRead: '<S282>/Data Store ReadX'
        //   DataStoreWrite: '<S282>/Data Store WriteP'

        Rsqrt = &proc_control_node_P.R1_Value_c[0];
        EKFCorrectorAdditive_getMeasu_a(Rsqrt, proc_control_node_DW.x,
          proc_control_node_DW.P, proc_control_node_B.u_p,
          proc_control_node_B.Pxy_g, proc_control_node_B.Sy_i,
          proc_control_node_B.dHdx_c);

        // SignalConversion generated from: '<S286>/ SFunction ' incorporates:
        //   MATLAB Function: '<S282>/Correct'
        //   Merge: '<S3>/Merge1'
        //   Merge: '<S3>/Merge4'
        //   SignalConversion generated from: '<S250>/Bus Selector3'
        //   SignalConversion generated from: '<S3>/Bus Selector3'
        //   Sum: '<S250>/Sum'
        //   Sum: '<S264>/Sum'

        proc_control_node_B.rtb_PressureDepth_Data[0] =
          (proc_control_node_B.rtb_PressureDepth_Data_k -
           ((proc_control_node_B.Product1_j5_n + proc_control_node_B.Product2_g)
            + proc_control_node_B.Product8_a)) - proc_control_node_B.u_p[0];
        proc_control_node_B.rtb_PressureDepth_Data[1] =
          proc_control_node_B.scale - proc_control_node_B.u_p[1];
        proc_control_node_B.rtb_PressureDepth_Data[2] =
          proc_control_node_B.absxk - proc_control_node_B.u_p[2];
        proc_control_node_B.rtb_PressureDepth_Data[3] = proc_control_node_B.t -
          proc_control_node_B.u_p[3];
        proc_control_node_B.rtb_PressureDepth_Data[4] =
          proc_control_node_B.Divide3 - proc_control_node_B.u_p[4];

        // Outputs for Atomic SubSystem: '<Root>/ROS Input'
        proc_control_node_B.rtb_PressureDepth_Data[5] =
          proc_control_node_B.epsilon - proc_control_node_B.u_p[5];
        proc_control_node_B.rtb_PressureDepth_Data[6] =
          proc_control_node_B.Divide1_n - proc_control_node_B.u_p[6];
        proc_control_node_B.rtb_PressureDepth_Data[7] =
          proc_control_node_B.Divide2_h - proc_control_node_B.u_p[7];

        // End of Outputs for SubSystem: '<Root>/ROS Input'

        // DataStoreWrite: '<S282>/Data Store WriteX' incorporates:
        //   DataStoreWrite: '<S282>/Data Store WriteP'
        //   MATLAB Function: '<S282>/Correct'

        EKFCorrector_correctStateAndS_i(proc_control_node_DW.x,
          proc_control_node_DW.P, proc_control_node_B.rtb_PressureDepth_Data,
          proc_control_node_B.Pxy_g, proc_control_node_B.Sy_i,
          proc_control_node_B.dHdx_c, Rsqrt);
      }

      // End of Constant: '<S281>/Enable1'
      // End of Outputs for SubSystem: '<S281>/Correct1'

      // Outputs for Enabled SubSystem: '<S281>/Correct2' incorporates:
      //   EnablePort: '<S283>/Enable'

      // DataTypeConversion: '<S281>/DataTypeConversion_Enable2' incorporates:
      //   Constant: '<S254>/Constant'

      if (proc_control_node_P.Constant_Value_pg != 0.0) {
        // MATLAB Function: '<S283>/Correct' incorporates:
        //   Constant: '<S281>/R2'
        //   DataStoreRead: '<S283>/Data Store ReadX'
        //   DataStoreWrite: '<S283>/Data Store WriteP'

        for (proc_control_node_B.k_b = 0; proc_control_node_B.k_b < 13;
             proc_control_node_B.k_b++) {
          memcpy(&proc_control_node_B.imvec_b[0], &proc_control_node_DW.x[0],
                 13U * sizeof(real_T));
          proc_control_node_B.epsilon = 1.4901161193847656E-8 * fabs
            (proc_control_node_DW.x[proc_control_node_B.k_b]);
          if ((1.4901161193847656E-8 > proc_control_node_B.epsilon) || rtIsNaN
              (proc_control_node_B.epsilon)) {
            proc_control_node_B.epsilon = 1.4901161193847656E-8;
          }

          proc_control_node_B.imvec_b[proc_control_node_B.k_b] =
            proc_control_node_DW.x[proc_control_node_B.k_b] +
            proc_control_node_B.epsilon;
          proc_control_node_B.dHdx_d[3 * proc_control_node_B.k_b] =
            (proc_control_node_B.imvec_b[7] - proc_control_node_DW.x[7]) /
            proc_control_node_B.epsilon;
          proc_control_node_B.dHdx_d[3 * proc_control_node_B.k_b + 1] =
            (proc_control_node_B.imvec_b[8] - proc_control_node_DW.x[8]) /
            proc_control_node_B.epsilon;
          proc_control_node_B.dHdx_d[3 * proc_control_node_B.k_b + 2] =
            (proc_control_node_B.imvec_b[9] - proc_control_node_DW.x[9]) /
            proc_control_node_B.epsilon;
        }

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 3;
             proc_control_node_B.i_n++) {
          proc_control_node_B.coffset = proc_control_node_B.i_n * 13;
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 13;
               proc_control_node_B.ibmat++) {
            proc_control_node_B.aoffset = proc_control_node_B.ibmat * 13;
            proc_control_node_B.epsilon = 0.0;
            for (proc_control_node_B.k_b = 0; proc_control_node_B.k_b < 13;
                 proc_control_node_B.k_b++) {
              proc_control_node_B.epsilon +=
                proc_control_node_B.dHdx_d[proc_control_node_B.k_b * 3 +
                proc_control_node_B.i_n] *
                proc_control_node_DW.P[proc_control_node_B.aoffset +
                proc_control_node_B.k_b];
            }

            proc_control_node_B.y_oi[proc_control_node_B.coffset +
              proc_control_node_B.ibmat] = proc_control_node_B.epsilon;
            proc_control_node_B.y_nc[proc_control_node_B.ibmat +
              (proc_control_node_B.i_n << 4)] = proc_control_node_B.y_oi[13 *
              proc_control_node_B.i_n + proc_control_node_B.ibmat];
          }

          proc_control_node_B.k_b = proc_control_node_B.i_n << 4;
          proc_control_node_B.y_nc[proc_control_node_B.k_b + 13] =
            proc_control_node_P.R2_Value[proc_control_node_B.i_n];
          proc_control_node_B.y_nc[proc_control_node_B.k_b + 14] =
            proc_control_node_P.R2_Value[proc_control_node_B.i_n + 3];
          proc_control_node_B.y_nc[proc_control_node_B.k_b + 15] =
            proc_control_node_P.R2_Value[proc_control_node_B.i_n + 6];
        }

        proc_control_node_qr_f(proc_control_node_B.y_nc,
          proc_control_node_B.a__1_ce,
          proc_control_node_B.TmpSignalConversionAtMATL_a);
        memcpy(&proc_control_node_B.imvec_b[0], &proc_control_node_DW.x[0], 13U *
               sizeof(real_T));
        memcpy(&proc_control_node_B.Jacobian_p[0], &proc_control_node_DW.P[0],
               169U * sizeof(real_T));
        proc_control_node_B.i_n = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 13;
             proc_control_node_B.ibmat++) {
          memset(&proc_control_node_B.Sy[proc_control_node_B.i_n], 0, 13U *
                 sizeof(real_T));
          proc_control_node_B.i_n += 13;
        }

        proc_control_node_B.i_n = 0;
        for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 13;
             proc_control_node_B.aoffset++) {
          proc_control_node_B.i1 = 0;
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 13;
               proc_control_node_B.ibmat++) {
            for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset <
                 13; proc_control_node_B.coffset++) {
              proc_control_node_B.k_b = proc_control_node_B.coffset +
                proc_control_node_B.i1;
              proc_control_node_B.Sy[proc_control_node_B.k_b] +=
                proc_control_node_DW.P[proc_control_node_B.coffset +
                proc_control_node_B.i_n] *
                proc_control_node_DW.P[proc_control_node_B.ibmat +
                proc_control_node_B.i_n];
            }

            proc_control_node_B.i1 += 13;
          }

          proc_control_node_B.i_n += 13;
        }

        // SignalConversion generated from: '<S287>/ SFunction ' incorporates:
        //   DataStoreRead: '<S283>/Data Store ReadX'
        //   MATLAB Function: '<S283>/Correct'

        proc_control_node_B.VectorConcatenate_p[0] = proc_control_node_B.Sum -
          proc_control_node_DW.x[7];
        proc_control_node_B.VectorConcatenate_p[1] = proc_control_node_B.Sum_o -
          proc_control_node_DW.x[8];
        proc_control_node_B.VectorConcatenate_p[2] = proc_control_node_B.Sum_c -
          proc_control_node_DW.x[9];

        // MATLAB Function: '<S283>/Correct' incorporates:
        //   Constant: '<S281>/R2'
        //   DataStoreWrite: '<S283>/Data Store WriteP'

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 13;
             proc_control_node_B.i_n++) {
          proc_control_node_B.ibmat = 0;
          for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 3;
               proc_control_node_B.coffset++) {
            proc_control_node_B.aoffset = proc_control_node_B.ibmat +
              proc_control_node_B.i_n;
            proc_control_node_B.y_oi[proc_control_node_B.aoffset] = 0.0;
            proc_control_node_B.i1 = 0;
            proc_control_node_B.k_b = 0;
            for (proc_control_node_B.i_f = 0; proc_control_node_B.i_f < 13;
                 proc_control_node_B.i_f++) {
              proc_control_node_B.y_oi[proc_control_node_B.aoffset] +=
                proc_control_node_B.Sy[proc_control_node_B.i1 +
                proc_control_node_B.i_n] *
                proc_control_node_B.dHdx_d[proc_control_node_B.k_b +
                proc_control_node_B.coffset];
              proc_control_node_B.i1 += 13;
              proc_control_node_B.k_b += 3;
            }

            proc_control_node_B.ibmat += 13;
          }
        }

        proc_control_node_B.i_n = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 3;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.twpt[proc_control_node_B.i_n] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[proc_control_node_B.ibmat];
          proc_control_node_B.twpt[proc_control_node_B.i_n + 1] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[proc_control_node_B.ibmat
            + 3];
          proc_control_node_B.twpt[proc_control_node_B.i_n + 2] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[proc_control_node_B.ibmat
            + 6];
          proc_control_node_B.i_n += 3;
        }

        EKFCorrector_correctStateAndS_m(proc_control_node_B.imvec_b,
          proc_control_node_B.Jacobian_p,
          proc_control_node_B.VectorConcatenate_p, proc_control_node_B.y_oi,
          proc_control_node_B.twpt, proc_control_node_B.dHdx_d,
          proc_control_node_P.R2_Value);
        memcpy(&proc_control_node_DW.P[0], &proc_control_node_B.Jacobian_p[0],
               169U * sizeof(real_T));

        // DataStoreWrite: '<S283>/Data Store WriteX' incorporates:
        //   MATLAB Function: '<S283>/Correct'

        memcpy(&proc_control_node_DW.x[0], &proc_control_node_B.imvec_b[0], 13U *
               sizeof(real_T));
      }

      // End of DataTypeConversion: '<S281>/DataTypeConversion_Enable2'
      // End of Outputs for SubSystem: '<S281>/Correct2'

      // Outputs for Atomic SubSystem: '<S281>/Output'
      // DataStoreRead: '<S284>/Data Store Read'
      memcpy(&proc_control_node_B.DataStoreRead[0], &proc_control_node_DW.x[0],
             13U * sizeof(real_T));

      // End of Outputs for SubSystem: '<S281>/Output'

      // Outputs for Atomic SubSystem: '<S281>/Predict'
      // MATLAB Function: '<S285>/Predict' incorporates:
      //   Constant: '<S281>/Q'
      //   DataStoreRead: '<S285>/Data Store ReadX'
      //   DataStoreWrite: '<S285>/Data Store WriteP'

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
           proc_control_node_B.i_n++) {
        proc_control_node_B.Gain_jb[proc_control_node_B.i_n] = 0.0;
      }

      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 5;
           proc_control_node_B.ibmat++) {
        proc_con_AUVQuatPerturbedSimFcn(proc_control_node_DW.x,
          proc_control_node_B.Gain_jb, proc_control_node_B.u,
          proc_control_node_B.imvec_b);
      }

      memcpy(&proc_control_node_B.z_h[0], &proc_control_node_DW.x[0], 13U *
             sizeof(real_T));
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
           proc_control_node_B.i_n++) {
        proc_control_node_B.Gain_jb[proc_control_node_B.i_n] = 0.0;
      }

      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 5;
           proc_control_node_B.ibmat++) {
        proc_con_AUVQuatPerturbedSimFcn(proc_control_node_DW.x,
          proc_control_node_B.Gain_jb, proc_control_node_B.u,
          proc_control_node_B.TmpSignalConversionAtTran_a);
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 13;
             proc_control_node_B.i_n++) {
          proc_control_node_B.z_h[proc_control_node_B.i_n] +=
            proc_control_node_B.TmpSignalConversionAtTran_a[proc_control_node_B.i_n]
            * 0.01;
        }
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
           proc_control_node_B.i_n++) {
        proc_control_node_B.Gain_jb[proc_control_node_B.i_n] = 0.0;
      }

      for (proc_control_node_B.k_b = 0; proc_control_node_B.k_b < 13;
           proc_control_node_B.k_b++) {
        memcpy(&proc_control_node_B.imvec_b[0], &proc_control_node_DW.x[0], 13U *
               sizeof(real_T));
        proc_control_node_B.epsilon = 1.4901161193847656E-8 * fabs
          (proc_control_node_DW.x[proc_control_node_B.k_b]);
        if ((1.4901161193847656E-8 > proc_control_node_B.epsilon) || rtIsNaN
            (proc_control_node_B.epsilon)) {
          proc_control_node_B.epsilon = 1.4901161193847656E-8;
        }

        proc_control_node_B.imvec_b[proc_control_node_B.k_b] =
          proc_control_node_DW.x[proc_control_node_B.k_b] +
          proc_control_node_B.epsilon;
        memcpy(&proc_control_node_B.imz[0], &proc_control_node_B.imvec_b[0], 13U
               * sizeof(real_T));
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 5;
             proc_control_node_B.ibmat++) {
          proc_con_AUVQuatPerturbedSimFcn(proc_control_node_B.imvec_b,
            proc_control_node_B.Gain_jb, proc_control_node_B.u,
            proc_control_node_B.TmpSignalConversionAtTran_a);
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 13;
               proc_control_node_B.i_n++) {
            proc_control_node_B.imz[proc_control_node_B.i_n] +=
              proc_control_node_B.TmpSignalConversionAtTran_a[proc_control_node_B.i_n]
              * 0.01;
          }
        }

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 13;
             proc_control_node_B.i_n++) {
          proc_control_node_B.Jacobian_p[proc_control_node_B.i_n + 13 *
            proc_control_node_B.k_b] =
            (proc_control_node_B.imz[proc_control_node_B.i_n] -
             proc_control_node_B.z_h[proc_control_node_B.i_n]) /
            proc_control_node_B.epsilon;
        }
      }

      memcpy(&proc_control_node_B.imvec_b[0], &proc_control_node_DW.x[0], 13U *
             sizeof(real_T));
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
           proc_control_node_B.i_n++) {
        proc_control_node_B.Gain_jb[proc_control_node_B.i_n] = 0.0;
      }

      for (proc_control_node_B.k_b = 0; proc_control_node_B.k_b < 5;
           proc_control_node_B.k_b++) {
        proc_con_AUVQuatPerturbedSimFcn(proc_control_node_DW.x,
          proc_control_node_B.Gain_jb, proc_control_node_B.u,
          proc_control_node_B.TmpSignalConversionAtTran_a);
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 13;
             proc_control_node_B.i_n++) {
          proc_control_node_B.imvec_b[proc_control_node_B.i_n] +=
            proc_control_node_B.TmpSignalConversionAtTran_a[proc_control_node_B.i_n]
            * 0.01;
        }
      }

      proc_control_node_qrFactor_d(proc_control_node_B.Jacobian_p,
        proc_control_node_DW.P, proc_control_node_P.Q_Value_f);

      // DataStoreWrite: '<S285>/Data Store WriteX' incorporates:
      //   MATLAB Function: '<S285>/Predict'

      memcpy(&proc_control_node_DW.x[0], &proc_control_node_B.imvec_b[0], 13U *
             sizeof(real_T));

      // End of Outputs for SubSystem: '<S281>/Predict'
    }

    // End of Outputs for SubSystem: '<S8>/Subsystem'

    // Sum: '<S280>/Sum' incorporates:
    //   Product: '<S280>/Product'
    //   Product: '<S280>/Product1'
    //   Product: '<S280>/Product2'
    //   Product: '<S280>/Product3'

    proc_control_node_B.Product1_j5 = ((proc_control_node_B.DataStoreRead[3] *
      proc_control_node_B.DataStoreRead[3] + proc_control_node_B.DataStoreRead[4]
      * proc_control_node_B.DataStoreRead[4]) +
      proc_control_node_B.DataStoreRead[5] * proc_control_node_B.DataStoreRead[5])
      + proc_control_node_B.DataStoreRead[6] *
      proc_control_node_B.DataStoreRead[6];

    // Product: '<S278>/Divide'
    proc_control_node_B.Divide_p = proc_control_node_B.DataStoreRead[3] /
      proc_control_node_B.Product1_j5;

    // Product: '<S278>/Divide1' incorporates:
    //   UnaryMinus: '<S279>/Unary Minus'

    proc_control_node_B.Divide1_n = -proc_control_node_B.DataStoreRead[4] /
      proc_control_node_B.Product1_j5;

    // Product: '<S278>/Divide2' incorporates:
    //   UnaryMinus: '<S279>/Unary Minus1'

    proc_control_node_B.Divide2_h = -proc_control_node_B.DataStoreRead[5] /
      proc_control_node_B.Product1_j5;

    // Product: '<S278>/Divide3' incorporates:
    //   UnaryMinus: '<S279>/Unary Minus2'

    proc_control_node_B.epsilon = -proc_control_node_B.DataStoreRead[6] /
      proc_control_node_B.Product1_j5;

    // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'

    // Outputs for Enabled SubSystem: '<Root>/Sensor Manager' incorporates:
    //   EnablePort: '<S6>/Enable'

    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_DW.SensorManager_MODE = rtb_Reset;
    }

    // End of Outputs for SubSystem: '<Root>/Sensor Manager'
  }

  // Outputs for Enabled SubSystem: '<Root>/Sensor Manager' incorporates:
  //   EnablePort: '<S6>/Enable'

  if (proc_control_node_DW.SensorManager_MODE) {
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
      // Sqrt: '<S128>/sqrt' incorporates:
      //   Product: '<S129>/Product'
      //   Product: '<S129>/Product1'
      //   Product: '<S129>/Product2'
      //   Product: '<S129>/Product3'
      //   Sum: '<S129>/Sum'

      proc_control_node_B.WhiteNoise = sqrt(((proc_control_node_B.Divide_p *
        proc_control_node_B.Divide_p + proc_control_node_B.Divide1_n *
        proc_control_node_B.Divide1_n) + proc_control_node_B.Divide2_h *
        proc_control_node_B.Divide2_h) + proc_control_node_B.epsilon *
        proc_control_node_B.epsilon);

      // Product: '<S123>/Product'
      proc_control_node_B.Divide_p /= proc_control_node_B.WhiteNoise;

      // Product: '<S123>/Product1'
      proc_control_node_B.Product1_j5 = proc_control_node_B.Divide1_n /
        proc_control_node_B.WhiteNoise;

      // Product: '<S123>/Product2'
      proc_control_node_B.d = proc_control_node_B.Divide2_h /
        proc_control_node_B.WhiteNoise;

      // Product: '<S123>/Product3'
      proc_control_node_B.WhiteNoise = proc_control_node_B.epsilon /
        proc_control_node_B.WhiteNoise;

      // Fcn: '<S119>/fcn3'
      proc_control_node_B.epsilon = (proc_control_node_B.Product1_j5 *
        proc_control_node_B.WhiteNoise + proc_control_node_B.Divide_p *
        proc_control_node_B.d) * 2.0;

      // If: '<S124>/If' incorporates:
      //   Constant: '<S125>/Constant'
      //   Constant: '<S126>/Constant'

      if (proc_control_node_B.epsilon > 1.0) {
        proc_control_node_B.epsilon = proc_control_node_P.Constant_Value_pz;
      } else if (proc_control_node_B.epsilon < -1.0) {
        proc_control_node_B.epsilon = proc_control_node_P.Constant_Value_pm;
      }

      // End of If: '<S124>/If'

      // MATLAB Function: '<S112>/MATLAB Function1' incorporates:
      //   Constant: '<S115>/Constant'
      //   SignalConversion generated from: '<S117>/ SFunction '

      proc_control_node_B.msg_f = proc_control_node_P.Constant_Value_f;
      proc_control_node_B.msg_f.Pose.Pose.Position.X =
        proc_control_node_B.DataStoreRead[0];
      proc_control_node_B.msg_f.Pose.Pose.Position.Y =
        proc_control_node_B.DataStoreRead[1];
      proc_control_node_B.msg_f.Pose.Pose.Position.Z =
        proc_control_node_B.DataStoreRead[2];

      // Fcn: '<S119>/fcn2' incorporates:
      //   Fcn: '<S119>/fcn5'

      proc_control_node_B.absxk = proc_control_node_B.d * proc_control_node_B.d;

      // MATLAB Function: '<S112>/MATLAB Function1' incorporates:
      //   Fcn: '<S119>/fcn1'
      //   Fcn: '<S119>/fcn2'
      //   Gain: '<S121>/Gain'
      //   Trigonometry: '<S122>/Trigonometric Function1'

      proc_control_node_B.msg_f.Pose.Pose.Orientation.X = rt_atan2d_snf
        ((proc_control_node_B.d * proc_control_node_B.WhiteNoise -
          proc_control_node_B.Divide_p * proc_control_node_B.Product1_j5) * -2.0,
         ((proc_control_node_B.Divide_p * proc_control_node_B.Divide_p -
           proc_control_node_B.Product1_j5 * proc_control_node_B.Product1_j5) -
          proc_control_node_B.absxk) + proc_control_node_B.WhiteNoise *
         proc_control_node_B.WhiteNoise) * proc_control_node_P.Gain_Gain_ei;

      // Trigonometry: '<S122>/trigFcn'
      if (proc_control_node_B.epsilon > 1.0) {
        proc_control_node_B.epsilon = 1.0;
      } else if (proc_control_node_B.epsilon < -1.0) {
        proc_control_node_B.epsilon = -1.0;
      }

      // MATLAB Function: '<S112>/MATLAB Function1' incorporates:
      //   Fcn: '<S119>/fcn4'
      //   Fcn: '<S119>/fcn5'
      //   Gain: '<S120>/Gain'
      //   Gain: '<S121>/Gain'
      //   SignalConversion generated from: '<S117>/ SFunction '
      //   Trigonometry: '<S122>/Trigonometric Function3'
      //   Trigonometry: '<S122>/trigFcn'

      proc_control_node_B.msg_f.Pose.Pose.Orientation.Y =
        proc_control_node_P.Gain_Gain_ei * asin(proc_control_node_B.epsilon);
      proc_control_node_B.msg_f.Pose.Pose.Orientation.Z = rt_atan2d_snf
        ((proc_control_node_B.Product1_j5 * proc_control_node_B.d -
          proc_control_node_B.Divide_p * proc_control_node_B.WhiteNoise) * -2.0,
         ((proc_control_node_B.Divide_p * proc_control_node_B.Divide_p +
           proc_control_node_B.Product1_j5 * proc_control_node_B.Product1_j5) -
          proc_control_node_B.absxk) - proc_control_node_B.WhiteNoise *
         proc_control_node_B.WhiteNoise) * proc_control_node_P.Gain_Gain_ei;
      proc_control_node_B.msg_f.Twist.Twist.Linear.X =
        proc_control_node_B.DataStoreRead[7];
      proc_control_node_B.msg_f.Twist.Twist.Linear.Y =
        proc_control_node_B.DataStoreRead[8];
      proc_control_node_B.msg_f.Twist.Twist.Linear.Z =
        proc_control_node_B.DataStoreRead[9];
      proc_control_node_B.msg_f.Twist.Twist.Angular.X =
        proc_control_node_P.Gain_Gain_i * proc_control_node_B.DataStoreRead[10];
      proc_control_node_B.msg_f.Twist.Twist.Angular.Y =
        proc_control_node_P.Gain_Gain_i * proc_control_node_B.DataStoreRead[11];
      proc_control_node_B.msg_f.Twist.Twist.Angular.Z =
        proc_control_node_P.Gain_Gain_i * proc_control_node_B.DataStoreRead[12];

      // Outputs for Atomic SubSystem: '<S112>/Publish'
      // MATLABSystem: '<S118>/SinkBlock'
      Pub_proc_control_node_163.publish(&proc_control_node_B.msg_f);

      // End of Outputs for SubSystem: '<S112>/Publish'

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.WorldPosition[0] = proc_control_node_B.DataStoreRead[0];
      proc_control_node_B.WorldPosition[1] = proc_control_node_B.DataStoreRead[1];
      proc_control_node_B.WorldPosition[2] = proc_control_node_B.DataStoreRead[2];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.qS2W[0] = proc_control_node_B.DataStoreRead[3];
      proc_control_node_B.qS2W[1] = proc_control_node_B.DataStoreRead[4];
      proc_control_node_B.qS2W[2] = proc_control_node_B.DataStoreRead[5];
      proc_control_node_B.qS2W[3] = proc_control_node_B.DataStoreRead[6];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.BodyVelocity[0] = proc_control_node_B.DataStoreRead[7];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.AngularRate[0] = proc_control_node_B.DataStoreRead[10];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.BodyVelocity[1] = proc_control_node_B.DataStoreRead[8];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.AngularRate[1] = proc_control_node_B.DataStoreRead[11];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.BodyVelocity[2] = proc_control_node_B.DataStoreRead[9];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.AngularRate[2] = proc_control_node_B.DataStoreRead[12];

      // BusAssignment: '<S111>/Bus Assignment' incorporates:
      //   DataTypeConversion: '<S111>/Cast To Boolean'

      BusAssignment.Data = (proc_control_node_B.SensorOn != 0.0);

      // ZeroOrderHold: '<S111>/Zero-Order Hold'
      if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
          (&proc_control_node_M)->Timing.TaskCounters.TID[4] == 0) {
        // ZeroOrderHold: '<S111>/Zero-Order Hold'
        proc_control_node_B.ZeroOrderHold_h = BusAssignment;
      }

      // End of ZeroOrderHold: '<S111>/Zero-Order Hold'
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[4] == 0) {
      // Outputs for Atomic SubSystem: '<S111>/Publish'
      // MATLABSystem: '<S114>/SinkBlock'
      Pub_proc_control_node_116.publish(&proc_control_node_B.ZeroOrderHold_h);

      // End of Outputs for SubSystem: '<S111>/Publish'
    }
  }

  // End of Outputs for SubSystem: '<Root>/Sensor Manager'
  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
    for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
         proc_control_node_B.ibmat++) {
      // DiscreteIntegrator: '<S300>/Integrator' incorporates:
      //   Constant: '<S296>/Constant'
      //   Constant: '<S296>/Constant3'

      if ((proc_control_node_P.Constant_Value_as != 0.0) ||
          (proc_control_node_DW.Integrator_PrevResetState != 0)) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] =
          proc_control_node_P.Constant3_Value;
        if (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] >=
            proc_control_node_P.Integrator_UpperSat) {
          proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] =
            proc_control_node_P.Integrator_UpperSat;
        } else if
            (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] <=
             proc_control_node_P.Integrator_LowerSat) {
          proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] =
            proc_control_node_P.Integrator_LowerSat;
        }
      }

      if (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] >=
          proc_control_node_P.Integrator_UpperSat) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_UpperSat;
      } else if
          (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] <=
           proc_control_node_P.Integrator_LowerSat) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_LowerSat;
      }

      proc_control_node_B.Divide1_n =
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat];

      // End of DiscreteIntegrator: '<S300>/Integrator'

      // Saturate: '<S300>/Saturation'
      if (proc_control_node_B.Divide1_n >
          proc_control_node_P.Saturation_UpperSat) {
        proc_control_node_B.Divide1_n = proc_control_node_P.Saturation_UpperSat;
      } else if (proc_control_node_B.Divide1_n <
                 proc_control_node_P.Saturation_LowerSat) {
        proc_control_node_B.Divide1_n = proc_control_node_P.Saturation_LowerSat;
      }

      // End of Saturate: '<S300>/Saturation'

      // Gain: '<S296>/Gain3'
      proc_control_node_B.Gain3[proc_control_node_B.ibmat] =
        proc_control_node_P.Gain3_Gain * proc_control_node_B.Divide1_n;
    }

    // Outputs for Atomic SubSystem: '<S291>/Subscribe2'
    // MATLABSystem: '<S297>/SourceBlock' incorporates:
    //   Inport: '<S302>/In1'

    rtb_Reset = Sub_proc_control_node_184_1122.getLatestMessage
      (&proc_control_node_B.b_varargout_2_e);

    // Outputs for Enabled SubSystem: '<S297>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S302>/Enable'

    if (rtb_Reset) {
      proc_control_node_B.In1_o = proc_control_node_B.b_varargout_2_e;
    }

    // End of MATLABSystem: '<S297>/SourceBlock'
    // End of Outputs for SubSystem: '<S297>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S291>/Subscribe2'

    // Gain: '<S296>/Gain'
    proc_control_node_B.epsilon = 2.0 * proc_control_node_P.zeta_l *
      (6.2831853071795862 * proc_control_node_P.wn_l);
    for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
         proc_control_node_B.ibmat++) {
      // DiscreteIntegrator: '<S301>/Integrator' incorporates:
      //   Constant: '<S296>/Constant1'
      //   Constant: '<S296>/Constant2'

      if ((proc_control_node_P.Constant1_Value_d != 0.0) ||
          (proc_control_node_DW.Integrator_PrevResetState_h != 0)) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] =
          proc_control_node_P.Constant2_Value_m;
        if (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] >=
            proc_control_node_P.Integrator_UpperSat_f) {
          proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] =
            proc_control_node_P.Integrator_UpperSat_f;
        } else if
            (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat]
             <= proc_control_node_P.Integrator_LowerSat_p) {
          proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] =
            proc_control_node_P.Integrator_LowerSat_p;
        }
      }

      if (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] >=
          proc_control_node_P.Integrator_UpperSat_f) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_UpperSat_f;
      } else if
          (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] <=
           proc_control_node_P.Integrator_LowerSat_p) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_LowerSat_p;
      }

      proc_control_node_B.Divide1_n =
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat];

      // End of DiscreteIntegrator: '<S301>/Integrator'

      // Saturate: '<S301>/Saturation'
      if (proc_control_node_B.Divide1_n >
          proc_control_node_P.Saturation_UpperSat_m) {
        proc_control_node_B.Divide1_n =
          proc_control_node_P.Saturation_UpperSat_m;
      } else if (proc_control_node_B.Divide1_n <
                 proc_control_node_P.Saturation_LowerSat_c) {
        proc_control_node_B.Divide1_n =
          proc_control_node_P.Saturation_LowerSat_c;
      }

      // Gain: '<S296>/Gain'
      proc_control_node_B.Gain_jb[proc_control_node_B.ibmat] =
        proc_control_node_B.epsilon * proc_control_node_B.Divide1_n;

      // Saturate: '<S301>/Saturation'
      proc_control_node_B.Saturation_j[proc_control_node_B.ibmat] =
        proc_control_node_B.Divide1_n;
    }

    // Sum: '<S296>/Sum' incorporates:
    //   Gain: '<S291>/Gain'

    proc_control_node_B.Sum_gi[0] = (proc_control_node_B.In1_o.Linear.X -
      proc_control_node_B.Gain3[0]) - proc_control_node_B.Gain_jb[0];
    proc_control_node_B.Sum_gi[1] = (proc_control_node_B.In1_o.Linear.Y -
      proc_control_node_B.Gain3[1]) - proc_control_node_B.Gain_jb[1];
    proc_control_node_B.Sum_gi[2] = (proc_control_node_B.In1_o.Linear.Z -
      proc_control_node_B.Gain3[2]) - proc_control_node_B.Gain_jb[2];
    proc_control_node_B.Sum_gi[3] = (proc_control_node_P.Gain_Gain_ga *
      proc_control_node_B.In1_o.Angular.X - proc_control_node_B.Gain3[3]) -
      proc_control_node_B.Gain_jb[3];
    proc_control_node_B.Sum_gi[4] = (proc_control_node_P.Gain_Gain_ga *
      proc_control_node_B.In1_o.Angular.Y - proc_control_node_B.Gain3[4]) -
      proc_control_node_B.Gain_jb[4];
    proc_control_node_B.Sum_gi[5] = (proc_control_node_P.Gain_Gain_ga *
      proc_control_node_B.In1_o.Angular.Z - proc_control_node_B.Gain3[5]) -
      proc_control_node_B.Gain_jb[5];

    // MultiPortSwitch: '<S296>/Multiport Switch' incorporates:
    //   Constant: '<S296>/Constant4'

    switch (static_cast<int32_T>
            (proc_control_node_P.SecondOrderFilter_FilterType)) {
     case 1:
      // MultiPortSwitch: '<S296>/Multiport Switch'
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
           proc_control_node_B.i_n++) {
        proc_control_node_B.MultiportSwitch[proc_control_node_B.i_n] =
          proc_control_node_B.Gain3[proc_control_node_B.i_n];
      }
      break;

     case 2:
      // MultiPortSwitch: '<S296>/Multiport Switch'
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
           proc_control_node_B.i_n++) {
        proc_control_node_B.MultiportSwitch[proc_control_node_B.i_n] =
          proc_control_node_B.Sum_gi[proc_control_node_B.i_n];
      }
      break;

     case 3:
      // MultiPortSwitch: '<S296>/Multiport Switch'
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
           proc_control_node_B.i_n++) {
        proc_control_node_B.MultiportSwitch[proc_control_node_B.i_n] =
          proc_control_node_B.Gain_jb[proc_control_node_B.i_n];
      }
      break;

     default:
      // MultiPortSwitch: '<S296>/Multiport Switch' incorporates:
      //   Sum: '<S296>/Sum1'

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
           proc_control_node_B.i_n++) {
        proc_control_node_B.MultiportSwitch[proc_control_node_B.i_n] =
          proc_control_node_B.Sum_gi[proc_control_node_B.i_n] +
          proc_control_node_B.Gain3[proc_control_node_B.i_n];
      }
      break;
    }

    // End of MultiPortSwitch: '<S296>/Multiport Switch'
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
    // SwitchCase: '<S9>/Switch Case' incorporates:
    //   Constant: '<S307>/Constant1'
    //   Delay: '<S310>/Delay'
    //   Logic: '<S294>/OR'
    //   MATLABSystem: '<S308>/SourceBlock'
    //   Trigonometry: '<S315>/sincos'

    rtPrevAction = proc_control_node_DW.SwitchCase_ActiveSubsystem;
    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      switch (static_cast<int32_T>(proc_control_node_B.MATLABSystem_o5)) {
       case 19:
       case 20:
       case 21:
        rtAction = 0;
        break;

       case 10:
        rtAction = 1;
        break;

       case 11:
       case 31:
       case 32:
        rtAction = 2;
        break;

       default:
        rtAction = 3;
        break;
      }

      proc_control_node_DW.SwitchCase_ActiveSubsystem = rtAction;
    } else {
      rtAction = proc_control_node_DW.SwitchCase_ActiveSubsystem;
    }

    switch (rtAction) {
     case 0:
      // Outputs for IfAction SubSystem: '<S9>/SubsystemManual' incorporates:
      //   ActionPort: '<S293>/Action Port'

      // SignalConversion generated from: '<S293>/Transpose' incorporates:
      //   Constant: '<S293>/Constant7'

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 7;
           proc_control_node_B.i_n++) {
        proc_control_node_B.TmpSignalConversionAtTran_a[proc_control_node_B.i_n]
          = proc_control_node_P.Constant7_Value[proc_control_node_B.i_n];
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
           proc_control_node_B.i_n++) {
        proc_control_node_B.TmpSignalConversionAtTran_a[proc_control_node_B.i_n
          + 7] = proc_control_node_B.MultiportSwitch[proc_control_node_B.i_n];
      }

      // MATLAB Function: '<S293>/MATLAB Function1' incorporates:
      //   Math: '<S293>/Transpose'

      for (proc_control_node_B.k_b = 0; proc_control_node_B.k_b < 13;
           proc_control_node_B.k_b++) {
        proc_control_node_B.ibmat = proc_control_node_B.k_b * 10;
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 10;
             proc_control_node_B.i_n++) {
          proc_control_node_B.y_n[proc_control_node_B.ibmat +
            proc_control_node_B.i_n] =
            proc_control_node_B.TmpSignalConversionAtTran_a[proc_control_node_B.k_b];
        }
      }

      // End of MATLAB Function: '<S293>/MATLAB Function1'
      // End of Outputs for SubSystem: '<S9>/SubsystemManual'
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S9>/SubsystemAuto' incorporates:
      //   ActionPort: '<S292>/Action Port'

      // SignalConversion generated from: '<S292>/Reference' incorporates:
      //   Constant: '<S292>/Constant'
      //   MATLAB Function: '<S292>/MATLAB Function1'
      //   Merge: '<S9>/Merge'

      proc_control_no_MATLABFunction1(proc_control_node_P.Constant_Value_fi,
        proc_control_node_B.y_n, &proc_control_node_B.sf_MATLABFunction1_n);

      // Merge: '<S9>/Merge1' incorporates:
      //   SignalConversion generated from: '<S292>/isReached'

      proc_control_node_B.Merge1_f = false;

      // End of Outputs for SubSystem: '<S9>/SubsystemAuto'
      break;

     case 2:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S294>/Action Port'

        // InitializeConditions for SwitchCase: '<S9>/Switch Case' incorporates:
        //   Delay: '<S294>/Delay1'
        //   Delay: '<S310>/Delay'

        proc_control_node_DW.Delay1_DSTATE_cr =
          proc_control_node_P.Delay1_InitialCondition_k;
        proc_control_node_DW.Delay_DSTATE_n =
          proc_control_node_P.Delay_InitialCondition_o;

        // End of InitializeConditions for SubSystem: '<S9>/singleWpts Trajectory' 

        // SystemReset for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S294>/Action Port'

        // SystemReset for Resettable SubSystem: '<S294>/Trajectory generator'
        // SystemReset for SwitchCase: '<S9>/Switch Case' incorporates:
        //   DiscreteIntegrator: '<S311>/Discrete-Time Integrator'

        //  Fonction Reset
        //  Initialize / reset discrete-state properties
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE =
          proc_control_node_P.DiscreteTimeIntegrator_IC;

        // End of SystemReset for SubSystem: '<S294>/Trajectory generator'
        // End of SystemReset for SubSystem: '<S9>/singleWpts Trajectory'
        //  Fonction reset
        //  Initialize / reset discrete-state properties
      }

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S294>/Action Port'

      // Outputs for Enabled SubSystem: '<S310>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S313>/Enable'

      if (proc_control_node_DW.Delay_DSTATE_n > 0.0) {
        // Sqrt: '<S322>/sqrt' incorporates:
        //   Product: '<S323>/Product'
        //   Product: '<S323>/Product1'
        //   Product: '<S323>/Product2'
        //   Product: '<S323>/Product3'
        //   Sum: '<S323>/Sum'

        proc_control_node_B.Divide2_h = sqrt(((proc_control_node_B.qS2W[0] *
          proc_control_node_B.qS2W[0] + proc_control_node_B.qS2W[1] *
          proc_control_node_B.qS2W[1]) + proc_control_node_B.qS2W[2] *
          proc_control_node_B.qS2W[2]) + proc_control_node_B.qS2W[3] *
          proc_control_node_B.qS2W[3]);

        // Product: '<S317>/Product'
        proc_control_node_B.epsilon = proc_control_node_B.qS2W[0] /
          proc_control_node_B.Divide2_h;

        // Product: '<S317>/Product1'
        proc_control_node_B.Divide1_n = proc_control_node_B.qS2W[1] /
          proc_control_node_B.Divide2_h;

        // Product: '<S317>/Product2'
        proc_control_node_B.SensorOn = proc_control_node_B.qS2W[2] /
          proc_control_node_B.Divide2_h;

        // Product: '<S317>/Product3'
        proc_control_node_B.Divide2_h = proc_control_node_B.qS2W[3] /
          proc_control_node_B.Divide2_h;

        // Fcn: '<S314>/fcn3'
        proc_control_node_B.Product1_j5 = (proc_control_node_B.Divide1_n *
          proc_control_node_B.Divide2_h - proc_control_node_B.epsilon *
          proc_control_node_B.SensorOn) * -2.0;

        // If: '<S318>/If' incorporates:
        //   Constant: '<S319>/Constant'
        //   Constant: '<S320>/Constant'

        if (proc_control_node_B.Product1_j5 > 1.0) {
          proc_control_node_B.Product1_j5 =
            proc_control_node_P.Constant_Value_pb;
        } else if (proc_control_node_B.Product1_j5 < -1.0) {
          proc_control_node_B.Product1_j5 =
            proc_control_node_P.Constant_Value_hy;
        }

        // End of If: '<S318>/If'

        // Fcn: '<S314>/fcn2' incorporates:
        //   Fcn: '<S314>/fcn5'

        proc_control_node_B.Product8_a = proc_control_node_B.epsilon *
          proc_control_node_B.epsilon;
        proc_control_node_B.t13 = proc_control_node_B.Divide1_n *
          proc_control_node_B.Divide1_n;
        proc_control_node_B.scale = proc_control_node_B.SensorOn *
          proc_control_node_B.SensorOn;

        // Gain: '<S315>/1//2' incorporates:
        //   Constant: '<S313>/Constant'
        //   Fcn: '<S314>/fcn1'
        //   Fcn: '<S314>/fcn2'
        //   Product: '<S313>/Product'
        //   Trigonometry: '<S316>/Trigonometric Function1'

        proc_control_node_B.fcn2 = rt_atan2d_snf((proc_control_node_B.Divide1_n *
          proc_control_node_B.SensorOn + proc_control_node_B.epsilon *
          proc_control_node_B.Divide2_h) * 2.0, ((proc_control_node_B.Product8_a
          + proc_control_node_B.t13) - proc_control_node_B.scale) -
          proc_control_node_B.Divide2_h * proc_control_node_B.Divide2_h) *
          proc_control_node_P.Constant_Value_it[0] *
          proc_control_node_P.u2_Gain_bg;

        // Trigonometry: '<S315>/sincos'
        proc_control_node_B.sincos_o2[0] = cos(proc_control_node_B.fcn2);

        // Math: '<S313>/Transpose' incorporates:
        //   SignalConversion generated from: '<S313>/Transpose'

        proc_control_node_B.Transpose[0] = proc_control_node_B.WorldPosition[0];
        proc_control_node_B.VectorConcatenate_p[0] = sin
          (proc_control_node_B.fcn2);

        // Trigonometry: '<S316>/trigFcn' incorporates:
        //   Trigonometry: '<S315>/sincos'

        if (proc_control_node_B.Product1_j5 > 1.0) {
          proc_control_node_B.Product1_j5 = 1.0;
        } else if (proc_control_node_B.Product1_j5 < -1.0) {
          proc_control_node_B.Product1_j5 = -1.0;
        }

        // Gain: '<S315>/1//2' incorporates:
        //   Constant: '<S313>/Constant'
        //   Product: '<S313>/Product'
        //   Trigonometry: '<S316>/trigFcn'

        proc_control_node_B.fcn2 = asin(proc_control_node_B.Product1_j5) *
          proc_control_node_P.Constant_Value_it[1] *
          proc_control_node_P.u2_Gain_bg;

        // Trigonometry: '<S315>/sincos'
        proc_control_node_B.sincos_o2[1] = cos(proc_control_node_B.fcn2);

        // Math: '<S313>/Transpose' incorporates:
        //   SignalConversion generated from: '<S313>/Transpose'

        proc_control_node_B.Transpose[1] = proc_control_node_B.WorldPosition[1];
        proc_control_node_B.VectorConcatenate_p[1] = sin
          (proc_control_node_B.fcn2);

        // Gain: '<S315>/1//2' incorporates:
        //   Constant: '<S313>/Constant'
        //   Fcn: '<S314>/fcn4'
        //   Fcn: '<S314>/fcn5'
        //   Product: '<S313>/Product'
        //   Trigonometry: '<S315>/sincos'
        //   Trigonometry: '<S316>/Trigonometric Function3'

        proc_control_node_B.fcn2 = rt_atan2d_snf((proc_control_node_B.SensorOn *
          proc_control_node_B.Divide2_h + proc_control_node_B.epsilon *
          proc_control_node_B.Divide1_n) * 2.0, ((proc_control_node_B.Product8_a
          - proc_control_node_B.t13) - proc_control_node_B.scale) +
          proc_control_node_B.Divide2_h * proc_control_node_B.Divide2_h) *
          proc_control_node_P.Constant_Value_it[2] *
          proc_control_node_P.u2_Gain_bg;

        // Trigonometry: '<S315>/sincos'
        proc_control_node_B.sincos_o2[2] = cos(proc_control_node_B.fcn2);

        // Math: '<S313>/Transpose' incorporates:
        //   SignalConversion generated from: '<S313>/Transpose'

        proc_control_node_B.Transpose[2] = proc_control_node_B.WorldPosition[2];
        proc_control_node_B.VectorConcatenate_p[2] = sin
          (proc_control_node_B.fcn2);

        // Fcn: '<S315>/q0' incorporates:
        //   Fcn: '<S315>/q1'
        //   Trigonometry: '<S315>/sincos'

        proc_control_node_B.epsilon = proc_control_node_B.sincos_o2[0] *
          proc_control_node_B.sincos_o2[1];
        proc_control_node_B.Divide1_n = proc_control_node_B.VectorConcatenate_p
          [0] * proc_control_node_B.VectorConcatenate_p[1];

        // Math: '<S313>/Transpose' incorporates:
        //   Fcn: '<S315>/q0'
        //   Fcn: '<S315>/q1'

        proc_control_node_B.Transpose[3] = proc_control_node_B.epsilon *
          proc_control_node_B.sincos_o2[2] + proc_control_node_B.Divide1_n *
          proc_control_node_B.VectorConcatenate_p[2];
        proc_control_node_B.Transpose[4] = proc_control_node_B.epsilon *
          proc_control_node_B.VectorConcatenate_p[2] -
          proc_control_node_B.Divide1_n * proc_control_node_B.sincos_o2[2];

        // Fcn: '<S315>/q2' incorporates:
        //   Fcn: '<S315>/q3'

        proc_control_node_B.epsilon = proc_control_node_B.VectorConcatenate_p[0]
          * proc_control_node_B.sincos_o2[1];
        proc_control_node_B.Divide1_n = proc_control_node_B.sincos_o2[0] *
          proc_control_node_B.VectorConcatenate_p[1];

        // Math: '<S313>/Transpose' incorporates:
        //   Fcn: '<S315>/q2'
        //   Fcn: '<S315>/q3'

        proc_control_node_B.Transpose[5] = proc_control_node_B.Divide1_n *
          proc_control_node_B.sincos_o2[2] + proc_control_node_B.epsilon *
          proc_control_node_B.VectorConcatenate_p[2];
        proc_control_node_B.Transpose[6] = proc_control_node_B.epsilon *
          proc_control_node_B.sincos_o2[2] - proc_control_node_B.Divide1_n *
          proc_control_node_B.VectorConcatenate_p[2];
      }

      // End of Outputs for SubSystem: '<S310>/Enabled Subsystem'

      // Outputs for Atomic SubSystem: '<S294>/Subscribe'
      // MATLABSystem: '<S308>/SourceBlock' incorporates:
      //   Delay: '<S310>/Delay'
      //   Trigonometry: '<S315>/sincos'

      rtb_Reset = Sub_proc_control_node_184_1168.getLatestMessage
        (&proc_control_node_B.b_varargout_2);

      // Outputs for Enabled SubSystem: '<S294>/Subsystem1' incorporates:
      //   EnablePort: '<S309>/Enable'

      // Outputs for Enabled SubSystem: '<S308>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S312>/Enable'

      if (rtb_Reset) {
        // DataTypeConversion: '<S309>/Data Type Conversion'
        proc_control_node_B.DataTypeConversion[0] =
          proc_control_node_B.b_varargout_2.Position.X;
        proc_control_node_B.DataTypeConversion[1] =
          proc_control_node_B.b_varargout_2.Position.Y;
        proc_control_node_B.DataTypeConversion[2] =
          proc_control_node_B.b_varargout_2.Position.Z;
        proc_control_node_B.DataTypeConversion[3] =
          proc_control_node_B.b_varargout_2.Orientation.Z;
        proc_control_node_B.DataTypeConversion[4] =
          proc_control_node_B.b_varargout_2.Orientation.Y;
        proc_control_node_B.DataTypeConversion[5] =
          proc_control_node_B.b_varargout_2.Orientation.X;

        // DataTypeConversion: '<S309>/Data Type Conversion1'
        proc_control_node_B.DataTypeConversion1[0] =
          proc_control_node_B.b_varargout_2.Frame;
        proc_control_node_B.DataTypeConversion1[1] =
          proc_control_node_B.b_varargout_2.Speed;

        // DataTypeConversion: '<S309>/Data Type Conversion2'
        proc_control_node_B.DataTypeConversion2 =
          proc_control_node_B.b_varargout_2.Fine;
      }

      // End of Outputs for SubSystem: '<S308>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S294>/Subsystem1'
      // End of Outputs for SubSystem: '<S294>/Subscribe'

      // SignalConversion generated from: '<S294>/MATLAB System1' incorporates:
      //   MATLABSystem: '<S308>/SourceBlock'

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
           proc_control_node_B.i_n++) {
        proc_control_node_B.TmpSignalConversionAtMATL_a[proc_control_node_B.i_n]
          = proc_control_node_B.DataTypeConversion[proc_control_node_B.i_n];
      }

      proc_control_node_B.TmpSignalConversionAtMATL_a[6] =
        proc_control_node_B.DataTypeConversion1[0];
      proc_control_node_B.TmpSignalConversionAtMATL_a[7] =
        proc_control_node_B.DataTypeConversion1[1];
      proc_control_node_B.TmpSignalConversionAtMATL_a[8] =
        proc_control_node_B.DataTypeConversion2;

      // MATLABSystem: '<S294>/MATLAB System1' incorporates:
      //   Constant: '<S294>/Constant'
      //   Delay: '<S294>/Delay1'
      //   MATLABSystem: '<S308>/SourceBlock'
      //   Math: '<S313>/Transpose'
      //   SignalConversion generated from: '<S294>/MATLAB System1'

      //  Main appeller à chaque exécution
      //  Suppression du buffer.
      //  ======================================================================== 
      //  Sous Routines
      // ==========================================================================         
      //  Fonction qui interprete les message ROS
      if (proc_control_node_P.Constant_Value_ha == 1.0) {
        //  supprimer le buffer de way points
        proc_control_node_B.i_n = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 9;
             proc_control_node_B.ibmat++) {
          proc_control_node_DW.obj_a.poseList[proc_control_node_B.i_n + 1] =
            999.0;
          proc_control_node_B.i_n += 2;
        }

        proc_control_node_DW.obj_a.i = 2.0;
      }

      // Outputs for Atomic SubSystem: '<S294>/Subscribe'
      //  Ajout d'un waypoint provenant de ROS.
      if (rtb_Reset && (proc_control_node_DW.obj_a.i <= 2.0)) {
        // this.poseList(this.i-1,:) = this.processWpt(waypoint.').';
        // ==========================================================================    
        //  Fonction qui interprete les waypoints reçu par ROS
        //  Determiner le quaternion en fonction des angles d'euler.
        //  Orde de rotation : ZYX.
        //  Reel
        memset(&proc_control_node_B.twpt[0], 0, 9U * sizeof(real_T));
        proc_control_node_B.twpt[7] = proc_control_node_B.DataTypeConversion1[1];

        //  twpt(9)=wpt(9);
        //  Pre calculs
        proc_control_node_B.t12 = 0.017453292519943295 *
          proc_control_node_B.TmpSignalConversionAtMATL_a[3] / 2.0;
        proc_control_node_B.VectorConcatenate_p[0] = proc_control_node_B.t12;
        proc_control_node_B.sincos_o2[0] = proc_control_node_B.t12;
        proc_control_node_B.t12 = 0.017453292519943295 *
          proc_control_node_B.TmpSignalConversionAtMATL_a[4] / 2.0;
        proc_control_node_B.VectorConcatenate_p[1] = proc_control_node_B.t12;
        proc_control_node_B.sincos_o2[1] = proc_control_node_B.t12;
        proc_control_node_B.t12 = 0.017453292519943295 *
          proc_control_node_B.TmpSignalConversionAtMATL_a[5] / 2.0;
        proc_control_node_B.VectorConcatenate_p[0] = cos
          (proc_control_node_B.VectorConcatenate_p[0]);
        proc_control_node_B.VectorConcatenate_p[1] = cos
          (proc_control_node_B.VectorConcatenate_p[1]);
        proc_control_node_B.VectorConcatenate_p[2] = cos(proc_control_node_B.t12);
        proc_control_node_B.sincos_o2[0] = sin(proc_control_node_B.sincos_o2[0]);
        proc_control_node_B.sincos_o2[1] = sin(proc_control_node_B.sincos_o2[1]);
        proc_control_node_B.sincos_o2[2] = sin(proc_control_node_B.t12);
        proc_control_node_B.epsilon = proc_control_node_B.VectorConcatenate_p[0]
          * proc_control_node_B.VectorConcatenate_p[1];
        proc_control_node_B.Divide1_n = proc_control_node_B.sincos_o2[0] *
          proc_control_node_B.sincos_o2[1];
        proc_control_node_B.n[0] = proc_control_node_B.epsilon *
          proc_control_node_B.VectorConcatenate_p[2] +
          proc_control_node_B.Divide1_n * proc_control_node_B.sincos_o2[2];
        proc_control_node_B.n[1] = proc_control_node_B.epsilon *
          proc_control_node_B.sincos_o2[2] - proc_control_node_B.Divide1_n *
          proc_control_node_B.VectorConcatenate_p[2];
        proc_control_node_B.epsilon = proc_control_node_B.sincos_o2[0] *
          proc_control_node_B.VectorConcatenate_p[1];
        proc_control_node_B.Divide1_n = proc_control_node_B.VectorConcatenate_p
          [0] * proc_control_node_B.sincos_o2[1];
        proc_control_node_B.n[2] = proc_control_node_B.Divide1_n *
          proc_control_node_B.VectorConcatenate_p[2] +
          proc_control_node_B.epsilon * proc_control_node_B.sincos_o2[2];
        proc_control_node_B.n[3] = proc_control_node_B.epsilon *
          proc_control_node_B.VectorConcatenate_p[2] -
          proc_control_node_B.Divide1_n * proc_control_node_B.sincos_o2[2];

        //  rp = quatrotate(quatinv(lq),wpt(1:3)) + lp;
        // rp = rotatepoint(quatinv(lq),wpt(1:3)) + lp;
        //  quaternion partie scalaire
        //  quaternion partie vectoriel
        proc_control_node_B.Divide1_n = 0.0;
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 3;
             proc_control_node_B.i_n++) {
          proc_control_node_B.Divide1_n += proc_control_node_DW.obj_a.poseList
            [(((proc_control_node_B.i_n + 4) << 1) + static_cast<int32_T>
              (proc_control_node_DW.obj_a.i - 1.0)) - 1] *
            proc_control_node_B.TmpSignalConversionAtMATL_a[proc_control_node_B.i_n];
        }

        proc_control_node_B.epsilon = 2.0 * proc_control_node_B.Divide1_n;
        proc_control_node_B.Divide1_n = 0.0;
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 3;
             proc_control_node_B.i_n++) {
          proc_control_node_B.Product8_a = proc_control_node_DW.obj_a.poseList
            [(((proc_control_node_B.i_n + 4) << 1) + static_cast<int32_T>
              (proc_control_node_DW.obj_a.i - 1.0)) - 1];
          proc_control_node_B.Divide1_n += proc_control_node_B.Product8_a *
            proc_control_node_B.Product8_a;
        }

        proc_control_node_B.Product8_a = proc_control_node_DW.obj_a.poseList[
          static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 5];
        proc_control_node_B.Divide1_n = proc_control_node_B.Product8_a *
          proc_control_node_B.Product8_a - proc_control_node_B.Divide1_n;
        proc_control_node_B.Divide2_h = proc_control_node_B.Product8_a * 2.0;

        //  choisir sens du quaternion
        proc_control_node_B.t13 = proc_control_node_B.n[0];
        proc_control_node_B.scale = proc_control_node_B.n[1];
        proc_control_node_B.Product1_j5 = proc_control_node_B.n[2];
        proc_control_node_B.t11 = proc_control_node_B.n[3];

        // ==========================================================================    
        //  Fonnction qui retoure le quaternion le plus court/long selon
        //  l'utilisateur
        proc_control_node_B.SensorOn = 0.0;
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 4;
             proc_control_node_B.i_n++) {
          proc_control_node_B.SensorOn += proc_control_node_DW.obj_a.poseList
            [(((proc_control_node_B.i_n + 3) << 1) + static_cast<int32_T>
              (proc_control_node_DW.obj_a.i - 1.0)) - 1] *
            proc_control_node_B.n[proc_control_node_B.i_n];
        }

        //  conjuger le quaternion au besoin
        if (((proc_control_node_B.SensorOn > 1.0) &&
             (proc_control_node_B.DataTypeConversion2 == 0.0)) ||
            ((proc_control_node_B.SensorOn < 1.0) &&
             (proc_control_node_B.DataTypeConversion2 == 1.0))) {
          proc_control_node_B.t13 = proc_control_node_B.n[0];
          proc_control_node_B.scale = -proc_control_node_B.n[1];
          proc_control_node_B.Product1_j5 = -proc_control_node_B.n[2];
          proc_control_node_B.t11 = -proc_control_node_B.n[3];
        }

        //          if dot(lq,q)>1
        //              rq= quatmultiply(lq,quatconj(q));
        //             %rq= quatmultiply(lq,quatconj(q));
        //            % rq= quatmultiply(quatinv(lq),quatconj(q));
        //
        //          else
        //               rq = quatmultiply(lq,((q)));
        //              %rq = quatmultiply(lq,quatinv(quatinv(q)));
        //             % rq = quatmultiply(quatinv(lq),q);
        //
        //          end
        //  transformer le point en fonction du frame
        proc_control_node_B.absxk = rt_roundd_snf
          (proc_control_node_B.DataTypeConversion1[0]);
        if (proc_control_node_B.absxk < 256.0) {
          if (proc_control_node_B.absxk >= 0.0) {
            tmp = static_cast<uint8_T>(proc_control_node_B.absxk);
          } else {
            tmp = 0U;
          }
        } else {
          tmp = MAX_uint8_T;
        }

        switch (tmp) {
         case 0U:
          //  position et angle absolue
          proc_control_node_B.twpt[0] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[0];
          proc_control_node_B.twpt[1] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[1];
          proc_control_node_B.twpt[2] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[2];
          proc_control_node_B.twpt[3] = proc_control_node_B.n[0];
          proc_control_node_B.twpt[4] = proc_control_node_B.n[1];
          proc_control_node_B.twpt[5] = proc_control_node_B.n[2];
          proc_control_node_B.twpt[6] = proc_control_node_B.n[3];
          break;

         case 1U:
          //  position et angle relatif
          proc_control_node_B.t12 = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 11];
          proc_control_node_B.SensorOn = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 7];
          proc_control_node_B.Product1_j5_n =
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + 9];
          proc_control_node_B.twpt[0] = ((proc_control_node_B.Product1_j5_n *
            proc_control_node_B.TmpSignalConversionAtMATL_a[2] -
            proc_control_node_B.t12 *
            proc_control_node_B.TmpSignalConversionAtMATL_a[1]) *
            proc_control_node_B.Divide2_h + (proc_control_node_B.SensorOn *
            proc_control_node_B.epsilon + proc_control_node_B.Divide1_n *
            proc_control_node_B.TmpSignalConversionAtMATL_a[0])) +
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) - 1];
          proc_control_node_B.twpt[1] = ((proc_control_node_B.t12 *
            proc_control_node_B.TmpSignalConversionAtMATL_a[0] -
            proc_control_node_B.SensorOn *
            proc_control_node_B.TmpSignalConversionAtMATL_a[2]) *
            proc_control_node_B.Divide2_h + (proc_control_node_B.Product1_j5_n *
            proc_control_node_B.epsilon + proc_control_node_B.Divide1_n *
            proc_control_node_B.TmpSignalConversionAtMATL_a[1])) +
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + 1];
          proc_control_node_B.twpt[2] = ((proc_control_node_B.SensorOn *
            proc_control_node_B.TmpSignalConversionAtMATL_a[1] -
            proc_control_node_B.Product1_j5_n *
            proc_control_node_B.TmpSignalConversionAtMATL_a[0]) *
            proc_control_node_B.Divide2_h + (proc_control_node_B.t12 *
            proc_control_node_B.epsilon + proc_control_node_B.Divide1_n *
            proc_control_node_B.TmpSignalConversionAtMATL_a[2])) +
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + 3];
          proc_control_node_B.twpt[3] = ((proc_control_node_B.Product8_a *
            proc_control_node_B.t13 - proc_control_node_B.SensorOn *
            proc_control_node_B.scale) - proc_control_node_B.Product1_j5_n *
            proc_control_node_B.Product1_j5) - proc_control_node_B.t12 *
            proc_control_node_B.t11;
          proc_control_node_B.twpt[4] = (proc_control_node_B.Product8_a *
            proc_control_node_B.scale + proc_control_node_B.SensorOn *
            proc_control_node_B.t13) + (proc_control_node_B.Product1_j5_n *
            proc_control_node_B.t11 - proc_control_node_B.t12 *
            proc_control_node_B.Product1_j5);
          proc_control_node_B.twpt[5] = (proc_control_node_B.Product8_a *
            proc_control_node_B.Product1_j5 + proc_control_node_B.Product1_j5_n *
            proc_control_node_B.t13) + (proc_control_node_B.t12 *
            proc_control_node_B.scale - proc_control_node_B.SensorOn *
            proc_control_node_B.t11);
          proc_control_node_B.twpt[6] = (proc_control_node_B.Product8_a *
            proc_control_node_B.t11 + proc_control_node_B.t12 *
            proc_control_node_B.t13) + (proc_control_node_B.SensorOn *
            proc_control_node_B.Product1_j5 - proc_control_node_B.Product1_j5_n *
            proc_control_node_B.scale);
          break;

         case 2U:
          //  position relatif et angle absolue
          proc_control_node_B.absxk = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 11];
          proc_control_node_B.SensorOn = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 7];
          proc_control_node_B.scale = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 9];
          proc_control_node_B.twpt[0] = ((proc_control_node_B.scale *
            proc_control_node_B.TmpSignalConversionAtMATL_a[2] -
            proc_control_node_B.absxk *
            proc_control_node_B.TmpSignalConversionAtMATL_a[1]) *
            proc_control_node_B.Divide2_h + (proc_control_node_B.SensorOn *
            proc_control_node_B.epsilon + proc_control_node_B.Divide1_n *
            proc_control_node_B.TmpSignalConversionAtMATL_a[0])) +
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) - 1];
          proc_control_node_B.twpt[1] = ((proc_control_node_B.absxk *
            proc_control_node_B.TmpSignalConversionAtMATL_a[0] -
            proc_control_node_B.SensorOn *
            proc_control_node_B.TmpSignalConversionAtMATL_a[2]) *
            proc_control_node_B.Divide2_h + (proc_control_node_B.scale *
            proc_control_node_B.epsilon + proc_control_node_B.Divide1_n *
            proc_control_node_B.TmpSignalConversionAtMATL_a[1])) +
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + 1];
          proc_control_node_B.twpt[2] = ((proc_control_node_B.SensorOn *
            proc_control_node_B.TmpSignalConversionAtMATL_a[1] -
            proc_control_node_B.scale *
            proc_control_node_B.TmpSignalConversionAtMATL_a[0]) *
            proc_control_node_B.Divide2_h + (proc_control_node_B.absxk *
            proc_control_node_B.epsilon + proc_control_node_B.Divide1_n *
            proc_control_node_B.TmpSignalConversionAtMATL_a[2])) +
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + 3];
          proc_control_node_B.twpt[3] = proc_control_node_B.n[0];
          proc_control_node_B.twpt[4] = proc_control_node_B.n[1];
          proc_control_node_B.twpt[5] = proc_control_node_B.n[2];
          proc_control_node_B.twpt[6] = proc_control_node_B.n[3];
          break;

         case 3U:
          //  position absolue et angle relatif
          proc_control_node_B.twpt[0] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[0];
          proc_control_node_B.twpt[1] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[1];
          proc_control_node_B.twpt[2] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[2];
          proc_control_node_B.absxk = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 7];
          proc_control_node_B.SensorOn = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 9];
          proc_control_node_B.twpt[3] = ((proc_control_node_B.Product8_a *
            proc_control_node_B.t13 - proc_control_node_B.absxk *
            proc_control_node_B.scale) - proc_control_node_B.SensorOn *
            proc_control_node_B.Product1_j5) -
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + 11] * proc_control_node_B.t11;
          proc_control_node_B.twpt[4] = (proc_control_node_B.Product8_a *
            proc_control_node_B.scale + proc_control_node_B.absxk *
            proc_control_node_B.t13) + (proc_control_node_B.SensorOn *
            proc_control_node_B.t11 - proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 11] *
            proc_control_node_B.Product1_j5);
          proc_control_node_B.twpt[5] = (proc_control_node_B.Product8_a *
            proc_control_node_B.Product1_j5 + proc_control_node_B.SensorOn *
            proc_control_node_B.t13) + (proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 11] *
            proc_control_node_B.scale - proc_control_node_B.absxk *
            proc_control_node_B.t11);
          proc_control_node_B.twpt[6] = (proc_control_node_B.Product8_a *
            proc_control_node_B.t11 + proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 11] *
            proc_control_node_B.t13) + (proc_control_node_B.absxk *
            proc_control_node_B.Product1_j5 - proc_control_node_B.SensorOn *
            proc_control_node_B.scale);
          break;

         default:
          //  retourne le point précédent
          proc_control_node_B.twpt[0] = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) - 1];
          proc_control_node_B.twpt[1] = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 1];
          proc_control_node_B.twpt[2] = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 3];
          proc_control_node_B.twpt[3] = proc_control_node_B.Product8_a;
          proc_control_node_B.twpt[4] = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 7];
          proc_control_node_B.twpt[5] = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 9];
          proc_control_node_B.twpt[6] = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 11];
          break;
        }

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 9;
             proc_control_node_B.i_n++) {
          proc_control_node_DW.obj_a.poseList[(static_cast<int32_T>
            (proc_control_node_DW.obj_a.i) + (proc_control_node_B.i_n << 1)) - 1]
            = proc_control_node_B.twpt[proc_control_node_B.i_n];
        }

        proc_control_node_DW.obj_a.i++;
      }

      // End of Outputs for SubSystem: '<S294>/Subscribe'
      if (proc_control_node_DW.Delay1_DSTATE_cr) {
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 9;
             proc_control_node_B.i_n++) {
          proc_control_node_B.ibmat = proc_control_node_B.i_n << 1;
          proc_control_node_DW.obj_a.poseList[proc_control_node_B.ibmat] =
            proc_control_node_DW.obj_a.poseList[(static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + proc_control_node_B.ibmat) -
            1];
          proc_control_node_DW.obj_a.poseList[proc_control_node_B.ibmat + 1] =
            999.0;
        }

        proc_control_node_DW.obj_a.i = 2.0;
      }

      if (proc_control_node_B.MATLABSystem_o6 != 0.0) {
        proc_control_node_B.i_n = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 9;
             proc_control_node_B.ibmat++) {
          proc_control_node_DW.obj_a.poseList[proc_control_node_B.i_n + 1] =
            999.0;
          proc_control_node_B.i_n += 2;
        }

        proc_control_node_DW.obj_a.poseList[14] = 0.0;
        proc_control_node_DW.obj_a.poseList[16] = 0.0;
        proc_control_node_B.i_n = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 7;
             proc_control_node_B.ibmat++) {
          proc_control_node_DW.obj_a.poseList[proc_control_node_B.i_n] =
            proc_control_node_B.Transpose[proc_control_node_B.ibmat];
          proc_control_node_DW.obj_a.poseList[proc_control_node_B.i_n + 1] =
            proc_control_node_B.Transpose[proc_control_node_B.ibmat];
          proc_control_node_B.i_n += 2;
        }

        proc_control_node_DW.obj_a.poseList[15] = 1.0;
        proc_control_node_DW.obj_a.poseList[17] = 0.0;
        proc_control_node_DW.obj_a.i = 2.0;
      }

      // Outputs for Enabled SubSystem: '<S294>/Pre-traitement' incorporates:
      //   EnablePort: '<S307>/Enable'

      // Outputs for Atomic SubSystem: '<S294>/Subscribe'
      if (rtb_Reset || (proc_control_node_B.MATLABSystem_o6 != 0.0)) {
        proc_control_node_B.MatrixConcatenate[0] =
          proc_control_node_P.Constant1_Value_o;

        // Math: '<S307>/Transpose' incorporates:
        //   Constant: '<S307>/Constant1'
        //   MATLABSystem: '<S294>/MATLAB System1'
        //   Selector: '<S307>/Selector'
        //   Selector: '<S307>/Selector1'

        proc_control_node_B.i_n = 0;
        proc_control_node_B.ibmat = 0;
        proc_control_node_B.coffset = 0;
        for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 2;
             proc_control_node_B.aoffset++) {
          proc_control_node_B.i1 = 0;
          for (proc_control_node_B.k_b = 0; proc_control_node_B.k_b < 9;
               proc_control_node_B.k_b++) {
            proc_control_node_B.Transpose_i[proc_control_node_B.k_b +
              proc_control_node_B.ibmat] =
              proc_control_node_DW.obj_a.poseList[proc_control_node_B.i1 +
              proc_control_node_B.aoffset];
            proc_control_node_B.i1 += 2;
          }

          proc_control_node_B.Selector[proc_control_node_B.i_n] =
            proc_control_node_B.Transpose_i[proc_control_node_B.ibmat];
          proc_control_node_B.Selector[proc_control_node_B.i_n + 1] =
            proc_control_node_B.Transpose_i[proc_control_node_B.ibmat + 1];
          proc_control_node_B.Selector[proc_control_node_B.i_n + 2] =
            proc_control_node_B.Transpose_i[proc_control_node_B.ibmat + 2];
          proc_control_node_B.Selector1[proc_control_node_B.coffset] =
            proc_control_node_B.Transpose_i[proc_control_node_B.ibmat + 3];
          proc_control_node_B.Selector1[proc_control_node_B.coffset + 1] =
            proc_control_node_B.Transpose_i[proc_control_node_B.ibmat + 4];
          proc_control_node_B.Selector1[proc_control_node_B.coffset + 2] =
            proc_control_node_B.Transpose_i[proc_control_node_B.ibmat + 5];
          proc_control_node_B.Selector1[proc_control_node_B.coffset + 3] =
            proc_control_node_B.Transpose_i[proc_control_node_B.ibmat + 6];
          proc_control_node_B.i_n += 3;
          proc_control_node_B.ibmat += 9;
          proc_control_node_B.coffset += 4;
        }

        // End of Math: '<S307>/Transpose'

        // Selector: '<S307>/Selector2' incorporates:
        //   Math: '<S307>/Transpose'

        proc_control_node_B.MatrixConcatenate[1] =
          proc_control_node_B.Transpose_i[16];

        // Selector: '<S307>/Selector3' incorporates:
        //   Math: '<S307>/Transpose'

        proc_control_node_B.Selector3 = proc_control_node_B.Transpose_i[17];
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 7;
             proc_control_node_B.i_n++) {
          // Selector: '<S307>/Selector4' incorporates:
          //   Math: '<S307>/Transpose'

          proc_control_node_B.Selector4[proc_control_node_B.i_n] =
            proc_control_node_B.Transpose_i[proc_control_node_B.i_n + 9];
        }
      }

      // End of Outputs for SubSystem: '<S294>/Pre-traitement'

      // Outputs for Resettable SubSystem: '<S294>/Trajectory generator' incorporates:
      //   ResetPort: '<S311>/Reset'

      if (rtb_Reset && (proc_control_node_PrevZCX.Trajectorygenerator_Reset_ZCE
                        != 1)) {
        // InitializeConditions for DiscreteIntegrator: '<S311>/Discrete-Time Integrator' 
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE =
          proc_control_node_P.DiscreteTimeIntegrator_IC;
      }

      proc_control_node_PrevZCX.Trajectorygenerator_Reset_ZCE = rtb_Reset;

      // End of Outputs for SubSystem: '<S294>/Subscribe'

      // DiscreteIntegrator: '<S311>/Discrete-Time Integrator' incorporates:
      //   Constant: '<S307>/Constant1'
      //   Constant: '<S311>/Constant'
      //   Logic: '<S294>/OR'
      //   MATLABSystem: '<S308>/SourceBlock'

      proc_control_node_B.epsilon =
        proc_control_node_P.DiscreteTimeIntegrator_gainval *
        proc_control_node_P.Constant_Value_ep;

      // DiscreteIntegrator: '<S311>/Discrete-Time Integrator'
      proc_control_node_B.DiscreteTimeIntegrator = proc_control_node_B.epsilon +
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE;

      // DataTypeConversion: '<S311>/Data Type Conversion3'
      proc_control_node_B.MATLABSystem_o6 = fabs(proc_control_node_B.Selector3);
      if (proc_control_node_B.MATLABSystem_o6 < 4.503599627370496E+15) {
        if (proc_control_node_B.MATLABSystem_o6 >= 0.5) {
          proc_control_node_B.MATLABSystem_o6 = floor
            (proc_control_node_B.Selector3 + 0.5);
        } else {
          proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.Selector3 *
            0.0;
        }
      } else {
        proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.Selector3;
      }

      // SwitchCase: '<S311>/Switch Case' incorporates:
      //   DataTypeConversion: '<S311>/Data Type Conversion3'

      switch (static_cast<uint8_T>(proc_control_node_B.MATLABSystem_o6)) {
       case 0:
        // Outputs for IfAction SubSystem: '<S311>/Subsystem' incorporates:
        //   ActionPort: '<S324>/Action Port'

        // MATLABSystem: '<S324>/Polynomial Trajectory1' incorporates:
        //   Concatenate: '<S307>/Matrix Concatenate'
        //   Merge: '<S311>/Merge'
        //   Merge: '<S311>/Merge1'
        //   Selector: '<S307>/Selector'

        rtb_Reset_j = false;
        rtb_NewDvlMsg = true;
        proc_control_node_B.i_n = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_node_B.i_n < 6)) {
          if (!(proc_control_node_DW.obj_jo.VelocityBoundaryCondition[proc_control_node_B.i_n]
                ==
                proc_control_node_P.PolynomialTrajectory1_VelocityB[proc_control_node_B.i_n]))
          {
            rtb_NewDvlMsg = false;
            exitg1 = true;
          } else {
            proc_control_node_B.i_n++;
          }
        }

        if (rtb_NewDvlMsg) {
          rtb_Reset_j = true;
        }

        if (!rtb_Reset_j) {
          if (proc_control_node_DW.obj_jo.isInitialized == 1) {
            proc_control_node_DW.obj_jo.TunablePropsChanged = true;
          }

          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
               proc_control_node_B.i_n++) {
            proc_control_node_DW.obj_jo.VelocityBoundaryCondition[proc_control_node_B.i_n]
              =
              proc_control_node_P.PolynomialTrajectory1_VelocityB[proc_control_node_B.i_n];
          }
        }

        if (proc_control_node_DW.obj_jo.TunablePropsChanged) {
          proc_control_node_DW.obj_jo.TunablePropsChanged = false;
        }

        proc_control_node_cubicpolytraj(proc_control_node_B.Selector,
          proc_control_node_B.MatrixConcatenate,
          proc_control_node_B.MatrixConcatenate,
          proc_control_node_DW.obj_jo.VelocityBoundaryCondition,
          proc_control_node_B.Gain3, proc_control_node_B.Gain_jb,
          proc_control_node_B.a__4, proc_control_node_B.rq,
          proc_control_node_B.pp_coefs);
        proc_control_node_B.n[0] = proc_control_node_B.rq[0];
        proc_control_node_B.n[1] = proc_control_node_B.rq[1];
        proc_control_node_B.n[3] = proc_control_node_B.rq[3];
        proc_control_node_B.MATLABSystem_o6 = 0.01;
        if (proc_control_node_B.DiscreteTimeIntegrator > proc_control_node_B.rq
            [2]) {
          proc_control_node_B.i_n = 1;
          proc_control_node_B.k_b = 1;
        } else {
          proc_control_node_B.i_n = 0;
          proc_control_node_B.k_b = 0;
        }

        if ((proc_control_node_B.i_n != 0) && (proc_control_node_B.k_b != 0)) {
          proc_control_node_B.Divide1_n =
            (proc_control_node_B.DiscreteTimeIntegrator -
             proc_control_node_B.rq[2]) / 2.0;
          if (proc_control_node_B.Divide1_n < 0.01) {
            proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.Divide1_n;
          }
        }

        proc_control_node_B.n[2] = proc_control_node_B.rq[2] +
          proc_control_node_B.MATLABSystem_o6;
        memset(&proc_control_node_B.dCoefs[0], 0, 36U * sizeof(real_T));
        proc_control_node_B.coffset = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 3;
             proc_control_node_B.ibmat++) {
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 9;
               proc_control_node_B.i_n++) {
            proc_control_node_B.k_b = proc_control_node_B.i_n +
              proc_control_node_B.coffset;
            proc_control_node_B.dCoefs[proc_control_node_B.k_b + 9] =
              proc_control_node_B.pp_coefs[proc_control_node_B.k_b] *
              static_cast<real_T>(3 - proc_control_node_B.ibmat);
          }

          proc_control_node_B.coffset += 9;
        }

        proc_control_node_ppval_b(proc_control_node_B.rq,
          proc_control_node_B.pp_coefs,
          proc_control_node_B.DiscreteTimeIntegrator, proc_control_node_B.Merge);
        proc_control_node_ppval_b(proc_control_node_B.n,
          proc_control_node_B.dCoefs, proc_control_node_B.DiscreteTimeIntegrator,
          proc_control_node_B.Merge1);

        // End of MATLABSystem: '<S324>/Polynomial Trajectory1'
        // End of Outputs for SubSystem: '<S311>/Subsystem'
        break;

       case 1:
        // Outputs for IfAction SubSystem: '<S311>/Subsystem1' incorporates:
        //   ActionPort: '<S325>/Action Port'

        // MATLABSystem: '<S325>/Trapezoidal Velocity Profile Trajectory'
        if (proc_control_node_DW.obj_i.TunablePropsChanged) {
          proc_control_node_DW.obj_i.TunablePropsChanged = false;
        }

        // Merge: '<S311>/Merge1' incorporates:
        //   Gain: '<S325>/Gain'
        //   MATLABSystem: '<S325>/Trapezoidal Velocity Profile Trajectory'
        //   Merge: '<S311>/Merge'
        //   Selector: '<S307>/Selector'

        proc_co_TrapVelTrajSys_stepImpl
          (proc_control_node_B.DiscreteTimeIntegrator,
           proc_control_node_B.Selector, proc_control_node_B.MatrixConcatenate[1],
           proc_control_node_P.Gain_Gain_g *
           proc_control_node_B.MatrixConcatenate[1], proc_control_node_B.Merge,
           proc_control_node_B.Merge1, proc_control_node_B.sincos_o2);

        // End of Outputs for SubSystem: '<S311>/Subsystem1'
        break;
      }

      // End of SwitchCase: '<S311>/Switch Case'

      // MATLABSystem: '<S311>/Rotation Trajectory' incorporates:
      //   Concatenate: '<S307>/Matrix Concatenate'
      //   Selector: '<S307>/Selector1'
      //   Selector: '<S311>/Selector1'
      //   Selector: '<S311>/Selector2'

      proc_control_no_SystemCore_step(&proc_control_node_DW.obj_j,
        proc_control_node_B.DiscreteTimeIntegrator,
        &proc_control_node_B.Selector1[0], &proc_control_node_B.Selector1[4],
        proc_control_node_B.MatrixConcatenate, proc_control_node_B.rq,
        proc_control_node_B.VectorConcatenate_p, proc_control_node_B.sincos_o2);

      // Update for DiscreteIntegrator: '<S311>/Discrete-Time Integrator'
      proc_control_node_DW.DiscreteTimeIntegrator_DSTATE =
        proc_control_node_B.epsilon + proc_control_node_B.DiscreteTimeIntegrator;

      // End of Outputs for SubSystem: '<S294>/Trajectory generator'

      // MATLABSystem: '<S294>/MATLAB System' incorporates:
      //   MATLAB Function: '<S294>/MATLAB Function2'
      //   MATLABSystem: '<S311>/Rotation Trajectory'
      //   Math: '<S313>/Transpose'
      //   SignalConversion generated from: '<S294>/Transpose'

      if (proc_control_node_DW.obj.linearConvergence !=
          proc_control_node_P.MATLABSystem_linearConvergence) {
        proc_control_node_DW.obj.linearConvergence =
          proc_control_node_P.MATLABSystem_linearConvergence;
      }

      if (proc_control_node_DW.obj.quaternionConvergence !=
          proc_control_node_P.MATLABSystem_quaternionConverge) {
        proc_control_node_DW.obj.quaternionConvergence =
          proc_control_node_P.MATLABSystem_quaternionConverge;
      }

      if (proc_control_node_DW.obj.TargetThreshold !=
          proc_control_node_P.MATLABSystem_TargetThreshold) {
        proc_control_node_DW.obj.TargetThreshold =
          proc_control_node_P.MATLABSystem_TargetThreshold;
      }

      //  Main execute a chaque iteration.
      //  Implement algorithm. Calculate y as a function of input u and
      //
      if (proc_control_node_DW.obj.init == 0.0) {
        //  Conditions Initiales
        proc_control_node_B.i_n = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 7;
             proc_control_node_B.ibmat++) {
          proc_control_node_DW.obj.poseBuffer[proc_control_node_B.i_n] =
            proc_control_node_B.Transpose[proc_control_node_B.ibmat];
          proc_control_node_B.i_n += 6001;
        }

        proc_control_node_DW.obj.poseBuffer[42007] = 0.0;
        proc_control_node_DW.obj.poseBuffer[48008] = 0.0;
        proc_control_node_DW.obj.poseBuffer[54009] = 0.0;
        proc_control_node_DW.obj.poseBuffer[60010] = 0.0;
        proc_control_node_DW.obj.poseBuffer[66011] = 0.0;
        proc_control_node_DW.obj.poseBuffer[72012] = 0.0;

        // InitCond;
        proc_control_node_DW.obj.bufferCount = 1.0;
        proc_control_node_DW.obj.init = 1.0;
      }

      // this.BufferReset(reset,mp);
      //  Fonction qui traites les nouveau poses.
      //  Insertion des nouveaux points.
      // if new == this.generationNumber %new>
      if (proc_control_node_DW.obj.bufferCount + 1.0 < 6001.0) {
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) - 1] =
          proc_control_node_B.Merge[0];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 6000] =
          proc_control_node_B.Merge[1];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 12001] =
          proc_control_node_B.Merge[2];

        // Outputs for Resettable SubSystem: '<S294>/Trajectory generator' incorporates:
        //   ResetPort: '<S311>/Reset'

        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 18002] =
          proc_control_node_B.rq[0];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 24003] =
          proc_control_node_B.rq[1];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 30004] =
          proc_control_node_B.rq[2];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 36005] =
          proc_control_node_B.rq[3];

        // End of Outputs for SubSystem: '<S294>/Trajectory generator'
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 42006] =
          proc_control_node_B.Merge1[0];

        // Outputs for Resettable SubSystem: '<S294>/Trajectory generator' incorporates:
        //   ResetPort: '<S311>/Reset'

        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 60009] =
          proc_control_node_B.VectorConcatenate_p[0];

        // End of Outputs for SubSystem: '<S294>/Trajectory generator'
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 48007] =
          proc_control_node_B.Merge1[1];

        // Outputs for Resettable SubSystem: '<S294>/Trajectory generator' incorporates:
        //   ResetPort: '<S311>/Reset'

        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 66010] =
          proc_control_node_B.VectorConcatenate_p[1];

        // End of Outputs for SubSystem: '<S294>/Trajectory generator'
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 54008] =
          proc_control_node_B.Merge1[2];

        // Outputs for Resettable SubSystem: '<S294>/Trajectory generator' incorporates:
        //   ResetPort: '<S311>/Reset'

        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 72011] =
          proc_control_node_B.VectorConcatenate_p[2];

        // End of Outputs for SubSystem: '<S294>/Trajectory generator'
        // this.poseBuffer(this.bufferCount:count + this.bufferCount,:) = pose(1:count+1,:) 
        proc_control_node_DW.obj.bufferCount++;
        proc_control_node_DW.obj.generationNumber++;
      } else {
        printf("%s\n", "Problem");
        fflush(stdout);
      }

      TrajectoryManager_SendCurrentPo(&proc_control_node_DW.obj,
        proc_control_node_B.y_n);

      // Merge: '<S9>/Merge1' incorporates:
      //   MATLABSystem: '<S294>/MATLAB System'

      //  Fonction qui verifie le target reached
      proc_control_node_B.Merge1_f = false;

      // MATLABSystem: '<S294>/MATLAB System' incorporates:
      //   MATLAB Function: '<S294>/MATLAB Function'
      //   Math: '<S294>/Transpose1'
      //   Selector: '<S307>/Selector4'
      //   SignalConversion generated from: '<S305>/ SFunction '

      //  vérifier le traget reached si la trajectoire est terminé
      if (!proc_control_node_DW.obj.done) {
        //  calcule de l'erreur de langle en 3D avec le quaternion
        proc_control_node_B.qRel[0] = ((proc_control_node_B.qS2W[0] *
          proc_control_node_B.Selector4[3] - -proc_control_node_B.Selector4[4] *
          proc_control_node_B.qS2W[1]) - -proc_control_node_B.Selector4[5] *
          proc_control_node_B.qS2W[2]) - -proc_control_node_B.Selector4[6] *
          proc_control_node_B.qS2W[3];
        proc_control_node_B.qRel[1] = (proc_control_node_B.qS2W[1] *
          proc_control_node_B.Selector4[3] + -proc_control_node_B.Selector4[4] *
          proc_control_node_B.qS2W[0]) + (-proc_control_node_B.Selector4[5] *
          proc_control_node_B.qS2W[3] - -proc_control_node_B.Selector4[6] *
          proc_control_node_B.qS2W[2]);
        proc_control_node_B.qRel[2] = (proc_control_node_B.qS2W[2] *
          proc_control_node_B.Selector4[3] + -proc_control_node_B.Selector4[5] *
          proc_control_node_B.qS2W[0]) + (-proc_control_node_B.Selector4[6] *
          proc_control_node_B.qS2W[1] - -proc_control_node_B.Selector4[4] *
          proc_control_node_B.qS2W[3]);
        proc_control_node_B.qRel[3] = (proc_control_node_B.Selector4[3] *
          proc_control_node_B.qS2W[3] + proc_control_node_B.qS2W[0] *
          -proc_control_node_B.Selector4[6]) + (-proc_control_node_B.Selector4[4]
          * proc_control_node_B.qS2W[2] - -proc_control_node_B.Selector4[5] *
          proc_control_node_B.qS2W[1]);

        //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
        proc_control_node_B.VectorConcatenate_p[0] =
          proc_control_node_B.Selector4[0] - proc_control_node_B.WorldPosition[0];
        proc_control_node_B.VectorConcatenate_p[1] =
          proc_control_node_B.Selector4[1] - proc_control_node_B.WorldPosition[1];
        proc_control_node_B.VectorConcatenate_p[2] =
          proc_control_node_B.Selector4[2] - proc_control_node_B.WorldPosition[2];
        if ((proc_control_node_norm_b(proc_control_node_B.VectorConcatenate_p) <
             proc_control_node_DW.obj.linearConvergence) && (2.0 * rt_atan2d_snf
             (proc_control_node_norm_b(&proc_control_node_B.qRel[1]),
              proc_control_node_B.qRel[0]) <
             proc_control_node_DW.obj.quaternionConvergence)) {
          proc_control_node_DW.obj.targetReachedCount++;

          // Merge: '<S9>/Merge1'
          proc_control_node_B.Merge1_f =
            (proc_control_node_DW.obj.targetReachedCount * 0.1 >=
             proc_control_node_DW.obj.TargetThreshold);
        } else {
          proc_control_node_DW.obj.targetReachedCount = 0.0;
        }
      }

      // Outputs for Atomic SubSystem: '<S294>/Subscribe'
      // Update for Delay: '<S294>/Delay1' incorporates:
      //   MATLABSystem: '<S308>/SourceBlock'

      proc_control_node_DW.Delay1_DSTATE_cr = rtb_Reset;

      // End of Outputs for SubSystem: '<S294>/Subscribe'

      // Update for Delay: '<S310>/Delay' incorporates:
      //   Constant: '<S310>/Constant6'

      proc_control_node_DW.Delay_DSTATE_n =
        proc_control_node_P.Constant6_Value_p;

      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      break;

     case 3:
      // Outputs for IfAction SubSystem: '<S9>/If Action Subsystem' incorporates:
      //   ActionPort: '<S290>/Action Port'

      // SignalConversion generated from: '<S290>/y' incorporates:
      //   Constant: '<S290>/Constant'
      //   MATLAB Function: '<S290>/MATLAB Function1'
      //   Merge: '<S9>/Merge'

      proc_control_no_MATLABFunction1(proc_control_node_P.Constant_Value_m5,
        proc_control_node_B.y_n, &proc_control_node_B.sf_MATLABFunction1_p);

      // End of Outputs for SubSystem: '<S9>/If Action Subsystem'
      break;
    }

    // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
    // SwitchCase: '<S7>/Switch Case' incorporates:
    //   Constant: '<S137>/Enable1'
    //   Constant: '<S187>/Enable1'
    //   DataStoreRead: '<S181>/Data Store ReadX'
    //   DataTypeConversion: '<S7>/Data Type Conversion'
    //   MATLAB Function: '<S168>/FixedHorizonOptimizer'
    //   MATLAB Function: '<S181>/Predict'
    //   MATLAB Function: '<S217>/FixedHorizonOptimizer'
    //   Merge: '<S7>/Merge'
    //   SignalConversion generated from: '<S130>/out'

    rtPrevAction = proc_control_node_DW.SwitchCase_ActiveSubsystem_l;
    switch (static_cast<uint8_T>(proc_control_node_B.MATLABSystem_o5)) {
     case 10:
     case 11:
     case 19:
      rtAction = 0;
      break;

     case 20:
     case 21:
      rtAction = 1;
      break;

     case 31:
      rtAction = 2;
      break;

     case 32:
      rtAction = 3;
      break;

     default:
      rtAction = 4;
      break;
    }

    proc_control_node_DW.SwitchCase_ActiveSubsystem_l = rtAction;
    switch (rtAction) {
     case 0:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S7>/Quaternion Non linear MPC (Not for codegen)' incorporates:
        //   ActionPort: '<S134>/Action Port'

        // InitializeConditions for SwitchCase: '<S7>/Switch Case' incorporates:
        //   Delay: '<S134>/Delay'
        //   DiscretePulseGenerator: '<S134>/Pulse Generator'

        memcpy(&proc_control_node_DW.Delay_DSTATE_a[0],
               &proc_control_node_P.Delay_InitialCondition_g[0], sizeof(real_T) <<
               3U);
        proc_control_node_DW.clockTickCounter_p = 0;

        // End of InitializeConditions for SubSystem: '<S7>/Quaternion Non linear MPC (Not for codegen)' 
        //  Initialize / reset discrete-state properties
      }

      // Outputs for IfAction SubSystem: '<S7>/Quaternion Non linear MPC (Not for codegen)' incorporates:
      //   ActionPort: '<S134>/Action Port'

      // SignalConversion generated from: '<S134>/MPC manager'
      proc_control_node_B.TmpSignalConversionAtTran_a[0] =
        proc_control_node_B.WorldPosition[0];
      proc_control_node_B.TmpSignalConversionAtTran_a[1] =
        proc_control_node_B.WorldPosition[1];
      proc_control_node_B.TmpSignalConversionAtTran_a[2] =
        proc_control_node_B.WorldPosition[2];
      proc_control_node_B.TmpSignalConversionAtTran_a[3] =
        proc_control_node_B.qS2W[0];
      proc_control_node_B.TmpSignalConversionAtTran_a[4] =
        proc_control_node_B.qS2W[1];
      proc_control_node_B.TmpSignalConversionAtTran_a[5] =
        proc_control_node_B.qS2W[2];
      proc_control_node_B.TmpSignalConversionAtTran_a[6] =
        proc_control_node_B.qS2W[3];
      proc_control_node_B.TmpSignalConversionAtTran_a[7] =
        proc_control_node_B.BodyVelocity[0];
      proc_control_node_B.TmpSignalConversionAtTran_a[10] =
        proc_control_node_B.AngularRate[0];
      proc_control_node_B.TmpSignalConversionAtTran_a[8] =
        proc_control_node_B.BodyVelocity[1];
      proc_control_node_B.TmpSignalConversionAtTran_a[11] =
        proc_control_node_B.AngularRate[1];
      proc_control_node_B.TmpSignalConversionAtTran_a[9] =
        proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.TmpSignalConversionAtTran_a[12] =
        proc_control_node_B.AngularRate[2];

      // MATLABSystem: '<S134>/MPC manager'
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.u[proc_control_node_B.i_n] =
          proc_control_node_P.MPC.tmin;
        proc_control_node_B.u_p[proc_control_node_B.i_n] =
          proc_control_node_P.MPC.tmax;
      }

      if (!proc_control_node_isequal(proc_control_node_DW.obj_n.Config10,
           proc_control_node_P.Config10)) {
        memcpy(&proc_control_node_DW.obj_n.Config10[0],
               &proc_control_node_P.Config10[0], 29U * sizeof(real_T));
      }

      if (!proc_control_node_isequal(proc_control_node_DW.obj_n.Config19,
           proc_control_node_P.Config19)) {
        memcpy(&proc_control_node_DW.obj_n.Config19[0],
               &proc_control_node_P.Config19[0], 29U * sizeof(real_T));
      }

      if (!proc_control_node_isequal_b(proc_control_node_DW.obj_n.Tmin,
           proc_control_node_B.u)) {
        memcpy(&proc_control_node_DW.obj_n.Tmin[0], &proc_control_node_B.u[0],
               sizeof(real_T) << 3U);
      }

      if (!proc_control_node_isequal_b(proc_control_node_DW.obj_n.Tmax,
           proc_control_node_B.u_p)) {
        memcpy(&proc_control_node_DW.obj_n.Tmax[0], &proc_control_node_B.u_p[0],
               sizeof(real_T) << 3U);
      }

      rtb_Reset_j = false;
      rtb_NewDvlMsg = true;
      proc_control_node_B.i_n = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.i_n < 41)) {
        if (!(proc_control_node_DW.obj_n.MecConst[proc_control_node_B.i_n] ==
              proc_control_node_P.constValues[proc_control_node_B.i_n])) {
          rtb_NewDvlMsg = false;
          exitg1 = true;
        } else {
          proc_control_node_B.i_n++;
        }
      }

      if (rtb_NewDvlMsg) {
        rtb_Reset_j = true;
      }

      if (!rtb_Reset_j) {
        memcpy(&proc_control_node_DW.obj_n.MecConst[0],
               &proc_control_node_P.constValues[0], 41U * sizeof(real_T));
      }

      if (!proc_control_node_isequal_b(proc_control_node_DW.obj_n.mvInit,
           proc_control_node_P.Ui)) {
        memcpy(&proc_control_node_DW.obj_n.mvInit[0], &proc_control_node_P.Ui[0],
               sizeof(real_T) << 3U);
      }

      if (proc_control_node_DW.obj_n.eInit !=
          proc_control_node_P.MPCmanager_eInit) {
        proc_control_node_DW.obj_n.eInit = proc_control_node_P.MPCmanager_eInit;
      }

      //         %% Fonction qui détermine les gain
      switch (static_cast<int32_T>(proc_control_node_B.MATLABSystem_o5)) {
       case 10:
        memcpy(&proc_control_node_B.imvec_b[0],
               &proc_control_node_DW.obj_n.Config10[0], 13U * sizeof(real_T));
        memcpy(&proc_control_node_B.u[0], &proc_control_node_DW.obj_n.Config10
               [13], sizeof(real_T) << 3U);
        memcpy(&proc_control_node_B.u_p[0],
               &proc_control_node_DW.obj_n.Config10[21], sizeof(real_T) << 3U);
        break;

       case 19:
        memcpy(&proc_control_node_B.imvec_b[0],
               &proc_control_node_DW.obj_n.Config19[0], 13U * sizeof(real_T));
        memcpy(&proc_control_node_B.u[0], &proc_control_node_DW.obj_n.Config19
               [13], sizeof(real_T) << 3U);
        memcpy(&proc_control_node_B.u_p[0],
               &proc_control_node_DW.obj_n.Config19[21], sizeof(real_T) << 3U);
        break;

       default:
        memcpy(&proc_control_node_B.imvec_b[0],
               &proc_control_node_DW.obj_n.Config10[0], 13U * sizeof(real_T));
        memcpy(&proc_control_node_B.u[0], &proc_control_node_DW.obj_n.Config10
               [13], sizeof(real_T) << 3U);
        memcpy(&proc_control_node_B.u_p[0],
               &proc_control_node_DW.obj_n.Config10[21], sizeof(real_T) << 3U);
        break;
      }

      //         %% Fonction D'initialisation
      //  Conditions initial
      if (proc_control_node_DW.obj_n.init == 0.0) {
        memcpy(&proc_control_node_DW.obj_n.xInit[0],
               &proc_control_node_B.TmpSignalConversionAtTran_a[0], 13U * sizeof
               (real_T));
        proc_control_node_DW.obj_n.init = 1.0;
      }

      // MATLAB Function: '<S228>/NLMPC' incorporates:
      //   Delay: '<S134>/Delay'
      //   MATLABSystem: '<S134>/MPC manager'
      //   Merge: '<S9>/Merge'
      //   Reshape: '<S228>/Reshape'

      proc_znlmpc_generateRuntimeData
        (proc_control_node_B.TmpSignalConversionAtTran_a,
         proc_control_node_DW.Delay_DSTATE_a, proc_control_node_B.y_n,
         proc_control_node_B.imvec_b, proc_control_node_B.u,
         proc_control_node_B.u_p, proc_control_node_DW.obj_n.Tmin,
         proc_control_node_DW.obj_n.Tmax, proc_control_node_DW.obj_n.xInit,
         proc_control_node_DW.obj_n.mvInit, proc_control_node_DW.obj_n.eInit,
         &proc_control_node_B.runtimedata, &proc_control_node_B.userdata,
         proc_control_node_B.z0);
      proc_control__znlmpc_getZBounds(&proc_control_node_B.runtimedata,
        proc_control_node_B.zLB, proc_control_node_B.zUB);
      proc_control__znlmpc_getUBounds(&proc_control_node_B.runtimedata,
        proc_control_node_B.A_data, proc_control_node_B.A_size,
        proc_control_node_B.B_data_o, &proc_control_node_B.B_size);
      memcpy(&proc_control_node_B.expl_temp.MVScaledTarget[0],
             &proc_control_node_B.runtimedata.MVScaledTarget[0], 80U * sizeof
             (real_T));
      memcpy(&proc_control_node_B.expl_temp.MVRateMax[0],
             &proc_control_node_B.runtimedata.MVRateMax[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.MVRateMin[0],
             &proc_control_node_B.runtimedata.MVRateMin[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.MVMax[0],
             &proc_control_node_B.runtimedata.MVMax[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.MVMin[0],
             &proc_control_node_B.runtimedata.MVMin[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.StateMax[0],
             &proc_control_node_B.runtimedata.StateMax[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.StateMin[0],
             &proc_control_node_B.runtimedata.StateMin[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.OutputMax[0],
             &proc_control_node_B.runtimedata.OutputMax[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.OutputMin[0],
             &proc_control_node_B.runtimedata.OutputMin[0], 130U * sizeof(real_T));
      proc_control_node_B.expl_temp.ECRWeight =
        proc_control_node_B.runtimedata.ECRWeight;
      memcpy(&proc_control_node_B.expl_temp.MVRateWeights[0],
             &proc_control_node_B.runtimedata.MVRateWeights[0], 80U * sizeof
             (real_T));
      memcpy(&proc_control_node_B.expl_temp.MVWeights[0],
             &proc_control_node_B.runtimedata.MVWeights[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.OutputWeights[0],
             &proc_control_node_B.runtimedata.OutputWeights[0], 130U * sizeof
             (real_T));
      memcpy(&proc_control_node_B.expl_temp.ref[0],
             &proc_control_node_B.runtimedata.ref[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.lastMV[0],
             &proc_control_node_B.runtimedata.lastMV[0], sizeof(real_T) << 3U);
      memcpy(&proc_control_node_B.expl_temp.x[0],
             &proc_control_node_B.runtimedata.x[0], 13U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_b.MVScaledTarget[0],
             &proc_control_node_B.runtimedata.MVScaledTarget[0], 80U * sizeof
             (real_T));
      memcpy(&proc_control_node_B.expl_temp_b.MVRateMax[0],
             &proc_control_node_B.runtimedata.MVRateMax[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_b.MVRateMin[0],
             &proc_control_node_B.runtimedata.MVRateMin[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_b.MVMax[0],
             &proc_control_node_B.runtimedata.MVMax[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_b.MVMin[0],
             &proc_control_node_B.runtimedata.MVMin[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_b.StateMax[0],
             &proc_control_node_B.runtimedata.StateMax[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_b.StateMin[0],
             &proc_control_node_B.runtimedata.StateMin[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_b.OutputMax[0],
             &proc_control_node_B.runtimedata.OutputMax[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_b.OutputMin[0],
             &proc_control_node_B.runtimedata.OutputMin[0], 130U * sizeof(real_T));
      proc_control_node_B.expl_temp_b.ECRWeight =
        proc_control_node_B.runtimedata.ECRWeight;
      memcpy(&proc_control_node_B.expl_temp_b.MVRateWeights[0],
             &proc_control_node_B.runtimedata.MVRateWeights[0], 80U * sizeof
             (real_T));
      memcpy(&proc_control_node_B.expl_temp_b.MVWeights[0],
             &proc_control_node_B.runtimedata.MVWeights[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_b.OutputWeights[0],
             &proc_control_node_B.runtimedata.OutputWeights[0], 130U * sizeof
             (real_T));
      memcpy(&proc_control_node_B.expl_temp_b.ref[0],
             &proc_control_node_B.runtimedata.ref[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_b.lastMV[0],
             &proc_control_node_B.runtimedata.lastMV[0], sizeof(real_T) << 3U);
      memcpy(&proc_control_node_B.expl_temp_b.x[0],
             &proc_control_node_B.runtimedata.x[0], 13U * sizeof(real_T));
      proc_control_node_fmincon(&proc_control_node_B.expl_temp,
        &proc_control_node_B.userdata, proc_control_node_B.z0,
        proc_control_node_B.A_data, proc_control_node_B.B_data_o,
        &proc_control_node_B.B_size, proc_control_node_B.zLB,
        &proc_control_node_B.expl_temp_b, &proc_control_node_B.userdata,
        proc_control_node_B.zUB, &proc_control_node_B.MATLABSystem_o6,
        &proc_control_node_B.MATLABSystem_o5, &proc_control_node_B.epsilon,
        &proc_control_node_B.Divide1_n, expl_temp,
        &proc_control_node_B.Divide2_h, &proc_control_node_B.SensorOn,
        &proc_control_node_B.Product1_j5, &proc_control_node_B.Divide_p);
      if ((proc_control_node_B.MATLABSystem_o5 == 0.0) &&
          (proc_control_node_B.Divide2_h > 0.02)) {
        proc_control_node_B.MATLABSystem_o5 = -2.0;
      }

      proc_control_node_znlmpc_getXUe(proc_control_node_B.zUB,
        proc_control_node_B.TmpSignalConversionAtTran_a, proc_control_node_B.Dv,
        proc_control_node_B.useq_f, &proc_control_node_B.MATLABSystem_o6);
      if (proc_control_node_B.MATLABSystem_o5 > 0.0) {
        proc_control_node_B.i_n = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 8;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.u[proc_control_node_B.ibmat] =
            proc_control_node_B.useq_f[proc_control_node_B.i_n];
          proc_control_node_B.i_n += 11;
        }
      } else {
        memcpy(&proc_control_node_B.u[0], &proc_control_node_DW.Delay_DSTATE_a[0],
               sizeof(real_T) << 3U);
      }

      // Merge: '<S7>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S134>/Pulse Generator'

      proc_control_node_B.Merge_i[9] = (proc_control_node_DW.clockTickCounter_p <
        proc_control_node_P.PulseGenerator_Duty) &&
        (proc_control_node_DW.clockTickCounter_p >= 0) ?
        proc_control_node_P.PulseGenerator_Amp : 0.0;

      // DiscretePulseGenerator: '<S134>/Pulse Generator'
      if (proc_control_node_DW.clockTickCounter_p >=
          proc_control_node_P.PulseGenerator_Period - 1.0) {
        proc_control_node_DW.clockTickCounter_p = 0;
      } else {
        proc_control_node_DW.clockTickCounter_p++;
      }

      // Merge: '<S7>/Merge' incorporates:
      //   MATLAB Function: '<S228>/NLMPC'
      //   SignalConversion generated from: '<S134>/out'

      proc_control_node_B.Merge_i[8] = proc_control_node_B.MATLABSystem_o5;
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.MATLABSystem_o5 =
          proc_control_node_B.u[proc_control_node_B.i_n];
        proc_control_node_B.Merge_i[proc_control_node_B.i_n] =
          proc_control_node_B.MATLABSystem_o5;

        // Update for Delay: '<S134>/Delay'
        proc_control_node_DW.Delay_DSTATE_a[proc_control_node_B.i_n] =
          proc_control_node_B.MATLABSystem_o5;
      }

      // End of Outputs for SubSystem: '<S7>/Quaternion Non linear MPC (Not for codegen)' 
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S7>/JoyStick OpenLoop' incorporates:
      //   ActionPort: '<S133>/Action Port'

      // SampleTimeMath: '<S225>/TSamp' incorporates:
      //   Merge: '<S9>/Merge'
      //   Selector: '<S133>/Selector'
      //
      //  About '<S225>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )

      proc_control_node_B.i_n = 0;
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
           proc_control_node_B.ibmat++) {
        proc_control_node_B.Gain3[proc_control_node_B.ibmat] =
          proc_control_node_B.y_n[proc_control_node_B.i_n + 70] *
          proc_control_node_P.TSamp_WtEt;
        proc_control_node_B.i_n += 10;
      }

      // End of SampleTimeMath: '<S225>/TSamp'

      // MATLABSystem: '<S133>/MATLAB System' incorporates:
      //   Merge: '<S9>/Merge'
      //   Selector: '<S133>/Selector'

      if (proc_control_node_DW.obj_m.k != proc_control_node_P.MATLABSystem_k) {
        proc_control_node_DW.obj_m.k = proc_control_node_P.MATLABSystem_k;
      }

      rtb_Reset_j = false;
      rtb_NewDvlMsg = true;
      proc_control_node_B.i_n = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.i_n < 48)) {
        if (!(proc_control_node_DW.obj_m.binv[proc_control_node_B.i_n] ==
              proc_control_node_P.binv[proc_control_node_B.i_n])) {
          rtb_NewDvlMsg = false;
          exitg1 = true;
        } else {
          proc_control_node_B.i_n++;
        }
      }

      if (rtb_NewDvlMsg) {
        rtb_Reset_j = true;
      }

      if (!rtb_Reset_j) {
        memcpy(&proc_control_node_DW.obj_m.binv[0], &proc_control_node_P.binv[0],
               48U * sizeof(real_T));
      }

      if (proc_control_node_DW.obj_m.mass != proc_control_node_P.physics.mass) {
        proc_control_node_DW.obj_m.mass = proc_control_node_P.physics.mass;
      }

      if (proc_control_node_DW.obj_m.volume !=
          proc_control_node_P.physics.volume) {
        proc_control_node_DW.obj_m.volume = proc_control_node_P.physics.volume;
      }

      if (proc_control_node_DW.obj_m.height !=
          proc_control_node_P.physics.height) {
        proc_control_node_DW.obj_m.height = proc_control_node_P.physics.height;
      }

      rtb_Reset_j = false;
      rtb_NewDvlMsg = true;
      proc_control_node_B.i_n = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.i_n < 9)) {
        if (!(proc_control_node_DW.obj_m.I[proc_control_node_B.i_n] ==
              proc_control_node_P.physics.I[proc_control_node_B.i_n])) {
          rtb_NewDvlMsg = false;
          exitg1 = true;
        } else {
          proc_control_node_B.i_n++;
        }
      }

      if (rtb_NewDvlMsg) {
        rtb_Reset_j = true;
      }

      if (!rtb_Reset_j) {
        memcpy(&proc_control_node_DW.obj_m.I[0], &proc_control_node_P.physics.I
               [0], 9U * sizeof(real_T));
      }

      if (!proc_control_node_isequal_b4(proc_control_node_DW.obj_m.RG,
           proc_control_node_P.physics.RG)) {
        proc_control_node_DW.obj_m.RG[0] = proc_control_node_P.physics.RG[0];
        proc_control_node_DW.obj_m.RG[1] = proc_control_node_P.physics.RG[1];
        proc_control_node_DW.obj_m.RG[2] = proc_control_node_P.physics.RG[2];
      }

      if (!proc_control_node_isequal_b4(proc_control_node_DW.obj_m.RB,
           proc_control_node_P.physics.RB)) {
        proc_control_node_DW.obj_m.RB[0] = proc_control_node_P.physics.RB[0];
        proc_control_node_DW.obj_m.RB[1] = proc_control_node_P.physics.RB[1];
        proc_control_node_DW.obj_m.RB[2] = proc_control_node_P.physics.RB[2];
      }

      if (!proc_control_node_isequal_b4n(proc_control_node_DW.obj_m.AddedMass,
           proc_control_node_P.physics.AddedMass)) {
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_DW.obj_m.AddedMass[proc_control_node_B.i_n] =
            proc_control_node_P.physics.AddedMass[proc_control_node_B.i_n];
        }
      }

      if (!proc_control_node_isequal_b4n(proc_control_node_DW.obj_m.CDL,
           proc_control_node_P.physics.CDL)) {
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_DW.obj_m.CDL[proc_control_node_B.i_n] =
            proc_control_node_P.physics.CDL[proc_control_node_B.i_n];
        }
      }

      if (!proc_control_node_isequal_b4n(proc_control_node_DW.obj_m.CDQ,
           proc_control_node_P.physics.CDQ)) {
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_DW.obj_m.CDQ[proc_control_node_B.i_n] =
            proc_control_node_P.physics.CDQ[proc_control_node_B.i_n];
        }
      }

      if (!proc_control_node_isequal_b4(proc_control_node_DW.obj_m.AF,
           proc_control_node_P.physics.AF)) {
        proc_control_node_DW.obj_m.AF[0] = proc_control_node_P.physics.AF[0];
        proc_control_node_DW.obj_m.AF[1] = proc_control_node_P.physics.AF[1];
        proc_control_node_DW.obj_m.AF[2] = proc_control_node_P.physics.AF[2];
      }

      if (proc_control_node_DW.obj_m.g != proc_control_node_P.physics.g) {
        proc_control_node_DW.obj_m.g = proc_control_node_P.physics.g;
      }

      if (proc_control_node_DW.obj_m.rho != proc_control_node_P.physics.rho) {
        proc_control_node_DW.obj_m.rho = proc_control_node_P.physics.rho;
      }

      //  Implement algorithm. Calculate y as a function of input u and
      //  discrete states.
      switch (static_cast<int32_T>(proc_control_node_B.MATLABSystem_o5)) {
       case 20:
        //  Open loop avec modèle physique
        //  Construire le vecteur constantes
        proc_control_node_B.constValues[0] = proc_control_node_DW.obj_m.mass;
        proc_control_node_B.constValues[1] = proc_control_node_DW.obj_m.volume;
        proc_control_node_B.constValues[6] = proc_control_node_DW.obj_m.I[0];
        proc_control_node_B.constValues[9] = proc_control_node_DW.obj_m.I[1];
        proc_control_node_B.constValues[12] = proc_control_node_DW.obj_m.I[2];
        proc_control_node_B.constValues[15] = proc_control_node_DW.obj_m.RG[0];
        proc_control_node_B.constValues[18] = proc_control_node_DW.obj_m.RB[0];
        proc_control_node_B.constValues[7] = proc_control_node_DW.obj_m.I[3];
        proc_control_node_B.constValues[10] = proc_control_node_DW.obj_m.I[4];
        proc_control_node_B.constValues[13] = proc_control_node_DW.obj_m.I[5];
        proc_control_node_B.constValues[16] = proc_control_node_DW.obj_m.RG[1];
        proc_control_node_B.constValues[19] = proc_control_node_DW.obj_m.RB[1];
        proc_control_node_B.constValues[8] = proc_control_node_DW.obj_m.I[6];
        proc_control_node_B.constValues[11] = proc_control_node_DW.obj_m.I[7];
        proc_control_node_B.constValues[14] = proc_control_node_DW.obj_m.I[8];
        proc_control_node_B.constValues[17] = proc_control_node_DW.obj_m.RG[2];
        proc_control_node_B.constValues[20] = proc_control_node_DW.obj_m.RB[2];
        proc_control_node_B.constValues[39] = proc_control_node_DW.obj_m.rho;
        proc_control_node_B.constValues[40] = proc_control_node_DW.obj_m.g;

        // construire le vecteur state avec la imu et spaceNAV
        proc_control_node_B.TmpSignalConversionAtTran_a[3] = 1.0;
        proc_control_node_B.TmpSignalConversionAtTran_a[4] = 0.0;
        proc_control_node_B.TmpSignalConversionAtTran_a[5] = 0.0;
        proc_control_node_B.TmpSignalConversionAtTran_a[6] = 0.0;
        proc_control_node_B.i_n = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.constValues[proc_control_node_B.ibmat + 21] =
            proc_control_node_DW.obj_m.CDL[proc_control_node_B.ibmat];
          proc_control_node_B.constValues[proc_control_node_B.ibmat + 27] =
            proc_control_node_DW.obj_m.CDQ[proc_control_node_B.ibmat];
          proc_control_node_B.constValues[proc_control_node_B.ibmat + 33] =
            proc_control_node_DW.obj_m.AddedMass[proc_control_node_B.ibmat];
          proc_control_node_B.TmpSignalConversionAtTran_a[proc_control_node_B.ibmat
            + 7] = proc_control_node_B.y_n[proc_control_node_B.i_n + 70];
          proc_control_node_B.i_n += 10;
        }

        // [0;0;0;mo(4:7);ref.'];;
        //  Déterminer les matrices du modèle physique
        // AUVMODELMATRICES
        //     [M,C,D,GQ] = AUVMODELMATRICES(IN1,IN2)
        //     This function was generated by the Symbolic Math Toolbox version 8.7. 
        //     04-Sep-2021 14:55:24
        proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.constValues[6]
          * proc_control_node_B.TmpSignalConversionAtTran_a[10];
        proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.constValues[9]
          * proc_control_node_B.TmpSignalConversionAtTran_a[10];
        proc_control_node_B.epsilon =
          proc_control_node_B.TmpSignalConversionAtTran_a[10] *
          proc_control_node_B.constValues[12];
        proc_control_node_B.Divide1_n = proc_control_node_B.constValues[7] *
          proc_control_node_B.TmpSignalConversionAtTran_a[11];
        proc_control_node_B.Divide2_h = proc_control_node_B.constValues[10] *
          proc_control_node_B.TmpSignalConversionAtTran_a[11];
        proc_control_node_B.SensorOn =
          proc_control_node_B.TmpSignalConversionAtTran_a[11] *
          proc_control_node_B.constValues[13];
        proc_control_node_B.Product1_j5 = proc_control_node_B.constValues[8] *
          proc_control_node_B.TmpSignalConversionAtTran_a[12];
        proc_control_node_B.Divide_p = proc_control_node_B.constValues[11] *
          proc_control_node_B.TmpSignalConversionAtTran_a[12];
        proc_control_node_B.WhiteNoise =
          proc_control_node_B.TmpSignalConversionAtTran_a[12] *
          proc_control_node_B.constValues[14];
        proc_control_node_B.t11 =
          proc_control_node_B.TmpSignalConversionAtTran_a[10] *
          proc_control_node_B.constValues[36];
        proc_control_node_B.t12 =
          proc_control_node_B.TmpSignalConversionAtTran_a[11] *
          proc_control_node_B.constValues[37];
        proc_control_node_B.t13 = proc_control_node_B.constValues[0] *
          proc_control_node_B.constValues[15];
        proc_control_node_B.t14 = proc_control_node_B.constValues[0] *
          proc_control_node_B.constValues[16];
        proc_control_node_B.d = proc_control_node_B.constValues[0] *
          proc_control_node_B.constValues[17];
        proc_control_node_B.scale =
          proc_control_node_B.TmpSignalConversionAtTran_a[12] *
          proc_control_node_B.constValues[38];
        proc_control_node_B.t17 =
          proc_control_node_B.TmpSignalConversionAtTran_a[10] *
          proc_control_node_B.constValues[15];
        proc_control_node_B.t21 =
          proc_control_node_B.TmpSignalConversionAtTran_a[11] *
          proc_control_node_B.constValues[16];
        proc_control_node_B.t = proc_control_node_B.TmpSignalConversionAtTran_a
          [12] * proc_control_node_B.constValues[17];
        proc_control_node_B.Product1_j5_n =
          proc_control_node_B.TmpSignalConversionAtTran_a[7] *
          proc_control_node_B.constValues[33];
        proc_control_node_B.Product2_g =
          proc_control_node_B.TmpSignalConversionAtTran_a[8] *
          proc_control_node_B.constValues[34];
        proc_control_node_B.fcn1_k =
          proc_control_node_B.TmpSignalConversionAtTran_a[9] *
          proc_control_node_B.constValues[35];
        proc_control_node_B.fcn2 = proc_control_node_B.constValues[1] *
          proc_control_node_B.constValues[39];
        proc_control_node_B.q0_tmp =
          proc_control_node_B.TmpSignalConversionAtTran_a[5] *
          proc_control_node_B.TmpSignalConversionAtTran_a[6];
        proc_control_node_B.rtb_Gain_f_idx_1 =
          proc_control_node_B.TmpSignalConversionAtTran_a[3] *
          proc_control_node_B.TmpSignalConversionAtTran_a[4];
        proc_control_node_B.Product8_a = proc_control_node_B.q0_tmp * 2.0 +
          proc_control_node_B.rtb_Gain_f_idx_1 * 2.0;
        proc_control_node_B.t56 =
          (proc_control_node_B.TmpSignalConversionAtTran_a[11] *
           proc_control_node_B.constValues[17] +
           proc_control_node_B.TmpSignalConversionAtTran_a[7]) *
          proc_control_node_B.constValues[0];
        proc_control_node_B.t57 =
          (proc_control_node_B.TmpSignalConversionAtTran_a[10] *
           proc_control_node_B.constValues[16] +
           proc_control_node_B.TmpSignalConversionAtTran_a[9]) *
          proc_control_node_B.constValues[0];
        proc_control_node_B.t58 =
          (proc_control_node_B.TmpSignalConversionAtTran_a[12] *
           proc_control_node_B.constValues[15] +
           proc_control_node_B.TmpSignalConversionAtTran_a[8]) *
          proc_control_node_B.constValues[0];
        proc_control_node_B.t62 = (proc_control_node_B.t17 +
          proc_control_node_B.t21) * proc_control_node_B.constValues[0];
        proc_control_node_B.t17 = (proc_control_node_B.t17 +
          proc_control_node_B.t) * proc_control_node_B.constValues[0];
        proc_control_node_B.t21 = (proc_control_node_B.t21 +
          proc_control_node_B.t) * proc_control_node_B.constValues[0];
        proc_control_node_B.t25_tmp =
          proc_control_node_B.TmpSignalConversionAtTran_a[4] *
          proc_control_node_B.TmpSignalConversionAtTran_a[6];
        proc_control_node_B.t25_tmp_o =
          proc_control_node_B.TmpSignalConversionAtTran_a[3] *
          proc_control_node_B.TmpSignalConversionAtTran_a[5];
        proc_control_node_B.t = proc_control_node_B.t25_tmp * 2.0 +
          -(proc_control_node_B.t25_tmp_o * 2.0);
        proc_control_node_B.Divide3 =
          (proc_control_node_B.TmpSignalConversionAtTran_a[4] *
           proc_control_node_B.TmpSignalConversionAtTran_a[4] * 2.0 +
           proc_control_node_B.TmpSignalConversionAtTran_a[5] *
           proc_control_node_B.TmpSignalConversionAtTran_a[5] * 2.0) - 1.0;

        //  CAlculer la comande
        proc_control_node_B.pp_coefs[0] = -proc_control_node_B.constValues[33] +
          proc_control_node_B.constValues[0];
        proc_control_node_B.pp_coefs[1] = 0.0;
        proc_control_node_B.pp_coefs[2] = 0.0;
        proc_control_node_B.pp_coefs[3] = 0.0;
        proc_control_node_B.pp_coefs[4] = proc_control_node_B.d;
        proc_control_node_B.pp_coefs[5] = -proc_control_node_B.t14;
        proc_control_node_B.pp_coefs[6] = 0.0;
        proc_control_node_B.pp_coefs[7] = -proc_control_node_B.constValues[34] +
          proc_control_node_B.constValues[0];
        proc_control_node_B.pp_coefs[8] = 0.0;
        proc_control_node_B.pp_coefs[9] = -proc_control_node_B.d;
        proc_control_node_B.pp_coefs[10] = 0.0;
        proc_control_node_B.pp_coefs[11] = proc_control_node_B.t13;
        proc_control_node_B.pp_coefs[12] = 0.0;
        proc_control_node_B.pp_coefs[13] = 0.0;
        proc_control_node_B.pp_coefs[14] = -proc_control_node_B.constValues[35]
          + proc_control_node_B.constValues[0];
        proc_control_node_B.pp_coefs[15] = proc_control_node_B.t14;
        proc_control_node_B.pp_coefs[16] = -proc_control_node_B.t13;
        proc_control_node_B.pp_coefs[17] = 0.0;
        proc_control_node_B.pp_coefs[18] = 0.0;
        proc_control_node_B.pp_coefs[19] = -proc_control_node_B.d;
        proc_control_node_B.pp_coefs[20] = proc_control_node_B.t14;
        proc_control_node_B.pp_coefs[21] = proc_control_node_B.constValues[6] -
          proc_control_node_B.constValues[36];
        proc_control_node_B.pp_coefs[22] = proc_control_node_B.constValues[9];
        proc_control_node_B.pp_coefs[23] = proc_control_node_B.constValues[12];
        proc_control_node_B.pp_coefs[24] = proc_control_node_B.d;
        proc_control_node_B.pp_coefs[25] = 0.0;
        proc_control_node_B.pp_coefs[26] = -proc_control_node_B.t13;
        proc_control_node_B.pp_coefs[27] = proc_control_node_B.constValues[7];
        proc_control_node_B.pp_coefs[28] = proc_control_node_B.constValues[10] -
          proc_control_node_B.constValues[37];
        proc_control_node_B.pp_coefs[29] = proc_control_node_B.constValues[13];
        proc_control_node_B.pp_coefs[30] = -proc_control_node_B.t14;
        proc_control_node_B.pp_coefs[31] = proc_control_node_B.t13;
        proc_control_node_B.pp_coefs[32] = 0.0;
        proc_control_node_B.pp_coefs[33] = proc_control_node_B.constValues[8];
        proc_control_node_B.pp_coefs[34] = proc_control_node_B.constValues[11];
        proc_control_node_B.pp_coefs[35] = proc_control_node_B.constValues[14] -
          proc_control_node_B.constValues[38];

        // Sum: '<S225>/Diff' incorporates:
        //   Merge: '<S9>/Merge'
        //   SampleTimeMath: '<S225>/TSamp'
        //   Selector: '<S133>/Selector'
        //   UnitDelay: '<S225>/UD'
        //
        //  About '<S225>/TSamp':
        //   y = u * K where K = 1 / ( w * Ts )
        //
        //  Block description for '<S225>/Diff':
        //
        //   Add in CPU
        //
        //  Block description for '<S225>/UD':
        //
        //   Store in Global RAM

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_B.rtb_Gain3_o[proc_control_node_B.i_n] =
            proc_control_node_B.Gain3[proc_control_node_B.i_n] -
            proc_control_node_DW.UD_DSTATE[proc_control_node_B.i_n];
        }

        // End of Sum: '<S225>/Diff'
        proc_control_node_B.dCoefs[0] = 0.0;
        proc_control_node_B.dCoefs[1] = 0.0;
        proc_control_node_B.dCoefs[2] = 0.0;
        proc_control_node_B.dCoefs[3] = -proc_control_node_B.t21;
        proc_control_node_B.absxk =
          proc_control_node_B.TmpSignalConversionAtTran_a[11] *
          proc_control_node_B.constValues[15] -
          proc_control_node_B.TmpSignalConversionAtTran_a[9];
        proc_control_node_B.dCoefs[4] = proc_control_node_B.absxk *
          proc_control_node_B.constValues[0] + proc_control_node_B.fcn1_k;
        proc_control_node_B.dCoefs[5] = -proc_control_node_B.Product2_g +
          proc_control_node_B.t58;
        proc_control_node_B.dCoefs[6] = 0.0;
        proc_control_node_B.dCoefs[7] = 0.0;
        proc_control_node_B.dCoefs[8] = 0.0;
        proc_control_node_B.dCoefs[9] = -proc_control_node_B.fcn1_k +
          proc_control_node_B.t57;
        proc_control_node_B.dCoefs[10] = -proc_control_node_B.t17;
        proc_control_node_B.d1 =
          proc_control_node_B.TmpSignalConversionAtTran_a[12] *
          proc_control_node_B.constValues[16] -
          proc_control_node_B.TmpSignalConversionAtTran_a[7];
        proc_control_node_B.dCoefs[11] = proc_control_node_B.d1 *
          proc_control_node_B.constValues[0] + proc_control_node_B.Product1_j5_n;
        proc_control_node_B.dCoefs[12] = 0.0;
        proc_control_node_B.dCoefs[13] = 0.0;
        proc_control_node_B.dCoefs[14] = 0.0;
        proc_control_node_B.d_j =
          proc_control_node_B.TmpSignalConversionAtTran_a[10] *
          proc_control_node_B.constValues[17] -
          proc_control_node_B.TmpSignalConversionAtTran_a[8];
        proc_control_node_B.dCoefs[15] = proc_control_node_B.d_j *
          proc_control_node_B.constValues[0] + proc_control_node_B.Product2_g;
        proc_control_node_B.dCoefs[16] = -proc_control_node_B.Product1_j5_n +
          proc_control_node_B.t56;
        proc_control_node_B.dCoefs[17] = -proc_control_node_B.t62;
        proc_control_node_B.dCoefs[18] = proc_control_node_B.t21;
        proc_control_node_B.dCoefs[19] = proc_control_node_B.fcn1_k -
          proc_control_node_B.t57;
        proc_control_node_B.dCoefs[20] = proc_control_node_B.d_j *
          -proc_control_node_B.constValues[0] + -proc_control_node_B.Product2_g;
        proc_control_node_B.dCoefs[21] = 0.0;
        proc_control_node_B.dCoefs[22] = ((-proc_control_node_B.epsilon -
          proc_control_node_B.SensorOn) - proc_control_node_B.WhiteNoise) +
          proc_control_node_B.scale;
        proc_control_node_B.dCoefs[23] = ((proc_control_node_B.MATLABSystem_o6 +
          proc_control_node_B.Divide2_h) + proc_control_node_B.Divide_p) -
          proc_control_node_B.t12;
        proc_control_node_B.dCoefs[24] = proc_control_node_B.absxk *
          -proc_control_node_B.constValues[0] + -proc_control_node_B.fcn1_k;
        proc_control_node_B.dCoefs[25] = proc_control_node_B.t17;
        proc_control_node_B.dCoefs[26] = proc_control_node_B.Product1_j5_n -
          proc_control_node_B.t56;
        proc_control_node_B.dCoefs[27] = ((proc_control_node_B.epsilon +
          proc_control_node_B.SensorOn) + proc_control_node_B.WhiteNoise) -
          proc_control_node_B.scale;
        proc_control_node_B.dCoefs[28] = 0.0;
        proc_control_node_B.dCoefs[29] = ((-proc_control_node_B.MATLABSystem_o5
          - proc_control_node_B.Divide1_n) - proc_control_node_B.Product1_j5) +
          proc_control_node_B.t11;
        proc_control_node_B.dCoefs[30] = proc_control_node_B.Product2_g -
          proc_control_node_B.t58;
        proc_control_node_B.dCoefs[31] = proc_control_node_B.d1 *
          -proc_control_node_B.constValues[0] +
          -proc_control_node_B.Product1_j5_n;
        proc_control_node_B.dCoefs[32] = proc_control_node_B.t62;
        proc_control_node_B.dCoefs[33] = ((-proc_control_node_B.MATLABSystem_o6
          - proc_control_node_B.Divide2_h) - proc_control_node_B.Divide_p) +
          proc_control_node_B.t12;
        proc_control_node_B.dCoefs[34] = ((proc_control_node_B.MATLABSystem_o5 +
          proc_control_node_B.Divide1_n) + proc_control_node_B.Product1_j5) -
          proc_control_node_B.t11;
        proc_control_node_B.dCoefs[35] = 0.0;
        proc_control_node_B.constValues_p[0] = proc_control_node_B.constValues
          [27] * fabs(proc_control_node_B.TmpSignalConversionAtTran_a[7]) +
          proc_control_node_B.constValues[21];
        proc_control_node_B.constValues_p[1] = 0.0;
        proc_control_node_B.constValues_p[2] = 0.0;
        proc_control_node_B.constValues_p[3] = 0.0;
        proc_control_node_B.constValues_p[4] = 0.0;
        proc_control_node_B.constValues_p[5] = 0.0;
        proc_control_node_B.constValues_p[6] = 0.0;
        proc_control_node_B.constValues_p[7] = proc_control_node_B.constValues
          [28] * fabs(proc_control_node_B.TmpSignalConversionAtTran_a[8]) +
          proc_control_node_B.constValues[22];
        proc_control_node_B.constValues_p[8] = 0.0;
        proc_control_node_B.constValues_p[9] = 0.0;
        proc_control_node_B.constValues_p[10] = 0.0;
        proc_control_node_B.constValues_p[11] = 0.0;
        proc_control_node_B.constValues_p[12] = 0.0;
        proc_control_node_B.constValues_p[13] = 0.0;
        proc_control_node_B.constValues_p[14] = proc_control_node_B.constValues
          [29] * fabs(proc_control_node_B.TmpSignalConversionAtTran_a[9]) +
          proc_control_node_B.constValues[23];
        proc_control_node_B.constValues_p[15] = 0.0;
        proc_control_node_B.constValues_p[16] = 0.0;
        proc_control_node_B.constValues_p[17] = 0.0;
        proc_control_node_B.constValues_p[18] = 0.0;
        proc_control_node_B.constValues_p[19] = 0.0;
        proc_control_node_B.constValues_p[20] = 0.0;
        proc_control_node_B.constValues_p[21] = proc_control_node_B.constValues
          [30] * fabs(proc_control_node_B.TmpSignalConversionAtTran_a[10]) +
          proc_control_node_B.constValues[24];
        proc_control_node_B.constValues_p[22] = 0.0;
        proc_control_node_B.constValues_p[23] = 0.0;
        proc_control_node_B.constValues_p[24] = 0.0;
        proc_control_node_B.constValues_p[25] = 0.0;
        proc_control_node_B.constValues_p[26] = 0.0;
        proc_control_node_B.constValues_p[27] = 0.0;
        proc_control_node_B.constValues_p[28] = proc_control_node_B.constValues
          [31] * fabs(proc_control_node_B.TmpSignalConversionAtTran_a[11]) +
          proc_control_node_B.constValues[25];
        proc_control_node_B.constValues_p[29] = 0.0;
        proc_control_node_B.constValues_p[30] = 0.0;
        proc_control_node_B.constValues_p[31] = 0.0;
        proc_control_node_B.constValues_p[32] = 0.0;
        proc_control_node_B.constValues_p[33] = 0.0;
        proc_control_node_B.constValues_p[34] = 0.0;
        proc_control_node_B.constValues_p[35] = proc_control_node_B.constValues
          [32] * fabs(proc_control_node_B.TmpSignalConversionAtTran_a[12]) +
          proc_control_node_B.constValues[26];
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 36;
             proc_control_node_B.i_n++) {
          proc_control_node_B.dv13[proc_control_node_B.i_n] =
            proc_control_node_B.dCoefs[proc_control_node_B.i_n] +
            proc_control_node_B.constValues_p[proc_control_node_B.i_n];
        }

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_B.a__4[proc_control_node_B.i_n] = 0.0;
        }

        proc_control_node_B.ibmat = 0;
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 6;
             proc_control_node_B.coffset++) {
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
               proc_control_node_B.i_n++) {
            proc_control_node_B.a__4[proc_control_node_B.i_n] +=
              proc_control_node_B.pp_coefs[proc_control_node_B.i_n +
              proc_control_node_B.ibmat] *
              proc_control_node_B.rtb_Gain3_o[proc_control_node_B.coffset];
          }

          proc_control_node_B.Gain_jb[proc_control_node_B.coffset] = 0.0;
          proc_control_node_B.ibmat += 6;
        }

        proc_control_node_B.i_n = 0;
        proc_control_node_B.ibmat = 0;
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 6;
             proc_control_node_B.coffset++) {
          for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 6;
               proc_control_node_B.aoffset++) {
            proc_control_node_B.Gain_jb[proc_control_node_B.aoffset] +=
              proc_control_node_B.dv13[proc_control_node_B.aoffset +
              proc_control_node_B.i_n] *
              proc_control_node_B.y_n[proc_control_node_B.ibmat + 70];
          }

          proc_control_node_B.i_n += 6;
          proc_control_node_B.ibmat += 10;
        }

        proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.constValues[40]
          * (proc_control_node_B.constValues[0] + -proc_control_node_B.fcn2);
        proc_control_node_B.rtb_Gain3_o[0] = (proc_control_node_B.t25_tmp -
          proc_control_node_B.t25_tmp_o) * proc_control_node_B.MATLABSystem_o5 *
          -2.0;
        proc_control_node_B.rtb_Gain3_o[1] = (proc_control_node_B.q0_tmp +
          proc_control_node_B.rtb_Gain_f_idx_1) *
          proc_control_node_B.MATLABSystem_o5 * -2.0;
        proc_control_node_B.rtb_Gain3_o[2] = proc_control_node_B.MATLABSystem_o5
          * proc_control_node_B.Divide3;
        proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.constValues[20]
          * proc_control_node_B.constValues[40];
        proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.constValues[40]
          * proc_control_node_B.t14;
        proc_control_node_B.epsilon = proc_control_node_B.constValues[19] *
          proc_control_node_B.constValues[40] * -proc_control_node_B.fcn2;
        proc_control_node_B.rtb_Gain3_o[3] = ((proc_control_node_B.constValues
          [40] * proc_control_node_B.d * proc_control_node_B.Product8_a +
          proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.Divide3) +
          proc_control_node_B.MATLABSystem_o5 * -proc_control_node_B.fcn2 *
          proc_control_node_B.Product8_a) + proc_control_node_B.epsilon *
          proc_control_node_B.Divide3;
        proc_control_node_B.Divide1_n = proc_control_node_B.constValues[40] *
          -proc_control_node_B.t13;
        proc_control_node_B.Divide2_h = proc_control_node_B.constValues[18] *
          proc_control_node_B.constValues[40] * proc_control_node_B.fcn2;
        proc_control_node_B.rtb_Gain3_o[4] = ((proc_control_node_B.Divide1_n *
          proc_control_node_B.Divide3 + proc_control_node_B.constValues[40] *
          -proc_control_node_B.d * proc_control_node_B.t) +
          proc_control_node_B.Divide2_h * proc_control_node_B.Divide3) +
          proc_control_node_B.MATLABSystem_o5 * proc_control_node_B.fcn2 *
          proc_control_node_B.t;
        proc_control_node_B.rtb_Gain3_o[5] =
          ((proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.t +
            proc_control_node_B.Divide1_n * proc_control_node_B.Product8_a) +
           proc_control_node_B.Divide2_h * proc_control_node_B.Product8_a) +
          proc_control_node_B.epsilon * proc_control_node_B.t;
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_B.constValues_h[proc_control_node_B.i_n] =
            (proc_control_node_B.a__4[proc_control_node_B.i_n] +
             proc_control_node_B.Gain_jb[proc_control_node_B.i_n]) +
            proc_control_node_B.rtb_Gain3_o[proc_control_node_B.i_n];
        }

        memset(&proc_control_node_B.u[0], 0, sizeof(real_T) << 3U);
        proc_control_node_B.ibmat = 0;
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 6;
             proc_control_node_B.coffset++) {
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
               proc_control_node_B.i_n++) {
            proc_control_node_B.u[proc_control_node_B.i_n] +=
              proc_control_node_DW.obj_m.binv[proc_control_node_B.i_n +
              proc_control_node_B.ibmat] *
              proc_control_node_B.constValues_h[proc_control_node_B.coffset];
          }

          proc_control_node_B.ibmat += 8;
        }
        break;

       case 21:
        //  Open loop matrice b invese directe
        memset(&proc_control_node_B.rtb_PressureDepth_Data[0], 0, sizeof(real_T)
               << 3U);
        proc_control_node_B.ibmat = 0;
        proc_control_node_B.coffset = 0;
        for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 6;
             proc_control_node_B.aoffset++) {
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
               proc_control_node_B.i_n++) {
            proc_control_node_B.rtb_PressureDepth_Data[proc_control_node_B.i_n] +=
              proc_control_node_DW.obj_m.binv[proc_control_node_B.i_n +
              proc_control_node_B.ibmat] *
              proc_control_node_B.y_n[proc_control_node_B.coffset + 70];
          }

          proc_control_node_B.ibmat += 8;
          proc_control_node_B.coffset += 10;
        }

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
             proc_control_node_B.i_n++) {
          proc_control_node_B.u[proc_control_node_B.i_n] =
            proc_control_node_B.rtb_PressureDepth_Data[proc_control_node_B.i_n] *
            proc_control_node_DW.obj_m.k;
        }
        break;

       default:
        memset(&proc_control_node_B.u[0], 0, sizeof(real_T) << 3U);
        break;
      }

      // Merge: '<S7>/Merge' incorporates:
      //   Constant: '<S133>/Constant'
      //   Constant: '<S133>/Constant1'
      //   MATLABSystem: '<S133>/MATLAB System'
      //   SignalConversion generated from: '<S133>/out'

      memcpy(&proc_control_node_B.Merge_i[0], &proc_control_node_B.u[0], sizeof
             (real_T) << 3U);
      proc_control_node_B.Merge_i[8] = proc_control_node_P.Constant_Value_d1;
      proc_control_node_B.Merge_i[9] = proc_control_node_P.Constant1_Value_p;

      // Update for UnitDelay: '<S225>/UD' incorporates:
      //   SampleTimeMath: '<S225>/TSamp'
      //
      //  About '<S225>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )
      //
      //  Block description for '<S225>/UD':
      //
      //   Store in Global RAM

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
           proc_control_node_B.i_n++) {
        proc_control_node_DW.UD_DSTATE[proc_control_node_B.i_n] =
          proc_control_node_B.Gain3[proc_control_node_B.i_n];
      }

      // End of Update for UnitDelay: '<S225>/UD'
      // End of Outputs for SubSystem: '<S7>/JoyStick OpenLoop'
      break;

     case 2:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S7>/Adaptive Euler MPC' incorporates:
        //   ActionPort: '<S130>/Action Port'

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 32;
             proc_control_node_B.i_n++) {
          // InitializeConditions for SwitchCase: '<S7>/Switch Case' incorporates:
          //   Memory: '<S140>/Memory'

          proc_control_node_DW.Memory_PreviousInput_h[proc_control_node_B.i_n] =
            proc_control_node_P.Memory_InitialCondition[proc_control_node_B.i_n];
        }

        // InitializeConditions for SwitchCase: '<S7>/Switch Case' incorporates:
        //   Delay: '<S130>/Delay1'
        //   DiscretePulseGenerator: '<S130>/Pulse Generator'
        //   UnitDelay: '<S140>/last_mv'

        memcpy(&proc_control_node_DW.last_mv_DSTATE_j[0],
               &proc_control_node_P.last_mv_InitialCondition[0], sizeof(real_T) <<
               3U);
        memcpy(&proc_control_node_DW.Delay1_DSTATE_c[0],
               &proc_control_node_P.Delay1_InitialCondition[0], sizeof(real_T) <<
               3U);
        proc_control_node_DW.clockTickCounter_h = 0;

        // End of InitializeConditions for SubSystem: '<S7>/Adaptive Euler MPC'
      }

      // Outputs for IfAction SubSystem: '<S7>/Adaptive Euler MPC' incorporates:
      //   ActionPort: '<S130>/Action Port'

      // Sqrt: '<S177>/sqrt' incorporates:
      //   Product: '<S178>/Product'
      //   Product: '<S178>/Product1'
      //   Product: '<S178>/Product2'
      //   Product: '<S178>/Product3'
      //   Sum: '<S178>/Sum'

      proc_control_node_B.MATLABSystem_o5 = sqrt(((proc_control_node_B.qS2W[0] *
        proc_control_node_B.qS2W[0] + proc_control_node_B.qS2W[1] *
        proc_control_node_B.qS2W[1]) + proc_control_node_B.qS2W[2] *
        proc_control_node_B.qS2W[2]) + proc_control_node_B.qS2W[3] *
        proc_control_node_B.qS2W[3]);

      // Product: '<S172>/Product'
      proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.qS2W[0] /
        proc_control_node_B.MATLABSystem_o5;

      // Product: '<S172>/Product1'
      proc_control_node_B.epsilon = proc_control_node_B.qS2W[1] /
        proc_control_node_B.MATLABSystem_o5;

      // Product: '<S172>/Product2'
      proc_control_node_B.Divide1_n = proc_control_node_B.qS2W[2] /
        proc_control_node_B.MATLABSystem_o5;

      // Product: '<S172>/Product3'
      proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.qS2W[3] /
        proc_control_node_B.MATLABSystem_o5;

      // Fcn: '<S170>/fcn2' incorporates:
      //   Fcn: '<S170>/fcn5'

      proc_control_node_B.Product8_a = proc_control_node_B.MATLABSystem_o6 *
        proc_control_node_B.MATLABSystem_o6;
      proc_control_node_B.t13 = proc_control_node_B.epsilon *
        proc_control_node_B.epsilon;
      proc_control_node_B.scale = proc_control_node_B.Divide1_n *
        proc_control_node_B.Divide1_n;
      proc_control_node_B.Product1_j5 = proc_control_node_B.MATLABSystem_o5 *
        proc_control_node_B.MATLABSystem_o5;

      // Trigonometry: '<S171>/Trigonometric Function1' incorporates:
      //   Fcn: '<S170>/fcn1'
      //   Fcn: '<S170>/fcn2'

      proc_control_node_B.sincos_o2[0] = rt_atan2d_snf
        ((proc_control_node_B.epsilon * proc_control_node_B.Divide1_n +
          proc_control_node_B.MATLABSystem_o6 *
          proc_control_node_B.MATLABSystem_o5) * 2.0,
         ((proc_control_node_B.Product8_a + proc_control_node_B.t13) -
          proc_control_node_B.scale) - proc_control_node_B.Product1_j5);

      // Fcn: '<S170>/fcn3'
      proc_control_node_B.Divide2_h = (proc_control_node_B.epsilon *
        proc_control_node_B.MATLABSystem_o5 -
        proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.Divide1_n) *
        -2.0;

      // If: '<S173>/If' incorporates:
      //   Constant: '<S174>/Constant'
      //   Constant: '<S175>/Constant'

      if (proc_control_node_B.Divide2_h > 1.0) {
        proc_control_node_B.Divide2_h = proc_control_node_P.Constant_Value_lp;
      } else if (proc_control_node_B.Divide2_h < -1.0) {
        proc_control_node_B.Divide2_h = proc_control_node_P.Constant_Value_du;
      }

      // End of If: '<S173>/If'

      // Trigonometry: '<S171>/trigFcn'
      if (proc_control_node_B.Divide2_h > 1.0) {
        proc_control_node_B.Divide2_h = 1.0;
      } else if (proc_control_node_B.Divide2_h < -1.0) {
        proc_control_node_B.Divide2_h = -1.0;
      }

      proc_control_node_B.sincos_o2[1] = asin(proc_control_node_B.Divide2_h);

      // End of Trigonometry: '<S171>/trigFcn'

      // Trigonometry: '<S171>/Trigonometric Function3' incorporates:
      //   Fcn: '<S170>/fcn4'
      //   Fcn: '<S170>/fcn5'

      proc_control_node_B.sincos_o2[2] = rt_atan2d_snf
        ((proc_control_node_B.Divide1_n * proc_control_node_B.MATLABSystem_o5 +
          proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.epsilon) *
         2.0, ((proc_control_node_B.Product8_a - proc_control_node_B.t13) -
               proc_control_node_B.scale) + proc_control_node_B.Product1_j5);

      // Outputs for Enabled SubSystem: '<S137>/Correct1' incorporates:
      //   EnablePort: '<S179>/Enable'

      if (proc_control_node_P.Enable1_Value) {
        // MATLAB Function: '<S179>/Correct' incorporates:
        //   Constant: '<S137>/R1'
        //   DataStoreRead: '<S179>/Data Store ReadX'
        //   DataStoreWrite: '<S179>/Data Store WriteP'

        memcpy(&proc_control_node_B.C_j[0], &proc_control_node_P.R1_Value[0],
               144U * sizeof(real_T));
        EKFCorrectorAdditive_getMeasure(proc_control_node_B.C_j,
          proc_control_node_DW.x_h, proc_control_node_DW.P_e,
          proc_control_node_B.TmpSignalConversionAtSFun_p,
          proc_control_node_B.Pxy_f, proc_control_node_B.Sy_c,
          proc_control_node_B.dHdx_h);

        // DataTypeConversion: '<S137>/DataTypeConversion_y1' incorporates:
        //   MATLAB Function: '<S179>/Correct'

        proc_control_node_B.b_yoff[3] = proc_control_node_B.sincos_o2[2] -
          proc_control_node_B.TmpSignalConversionAtSFun_p[3];
        proc_control_node_B.b_yoff[4] = proc_control_node_B.sincos_o2[1] -
          proc_control_node_B.TmpSignalConversionAtSFun_p[4];
        proc_control_node_B.b_yoff[5] = proc_control_node_B.sincos_o2[0] -
          proc_control_node_B.TmpSignalConversionAtSFun_p[5];
        proc_control_node_B.b_yoff[0] = proc_control_node_B.WorldPosition[0] -
          proc_control_node_B.TmpSignalConversionAtSFun_p[0];
        proc_control_node_B.b_yoff[6] = proc_control_node_B.BodyVelocity[0] -
          proc_control_node_B.TmpSignalConversionAtSFun_p[6];
        proc_control_node_B.b_yoff[9] = proc_control_node_B.AngularRate[0] -
          proc_control_node_B.TmpSignalConversionAtSFun_p[9];
        proc_control_node_B.b_yoff[1] = proc_control_node_B.WorldPosition[1] -
          proc_control_node_B.TmpSignalConversionAtSFun_p[1];
        proc_control_node_B.b_yoff[7] = proc_control_node_B.BodyVelocity[1] -
          proc_control_node_B.TmpSignalConversionAtSFun_p[7];
        proc_control_node_B.b_yoff[10] = proc_control_node_B.AngularRate[1] -
          proc_control_node_B.TmpSignalConversionAtSFun_p[10];
        proc_control_node_B.b_yoff[2] = proc_control_node_B.WorldPosition[2] -
          proc_control_node_B.TmpSignalConversionAtSFun_p[2];
        proc_control_node_B.b_yoff[8] = proc_control_node_B.BodyVelocity[2] -
          proc_control_node_B.TmpSignalConversionAtSFun_p[8];
        proc_control_node_B.b_yoff[11] = proc_control_node_B.AngularRate[2] -
          proc_control_node_B.TmpSignalConversionAtSFun_p[11];

        // DataStoreWrite: '<S179>/Data Store WriteX' incorporates:
        //   DataStoreWrite: '<S179>/Data Store WriteP'
        //   MATLAB Function: '<S179>/Correct'

        EKFCorrector_correctStateAndSqr(proc_control_node_DW.x_h,
          proc_control_node_DW.P_e, proc_control_node_B.b_yoff,
          proc_control_node_B.Pxy_f, proc_control_node_B.Sy_c,
          proc_control_node_B.dHdx_h, proc_control_node_B.C_j);
      }

      // End of Outputs for SubSystem: '<S137>/Correct1'

      // MATLAB Function: '<S130>/MATLAB Function' incorporates:
      //   Constant: '<S137>/Enable1'
      //   Merge: '<S9>/Merge'

      memset(&proc_control_node_B.y_h_d[0], 0, 120U * sizeof(real_T));
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 10;
           proc_control_node_B.ibmat++) {
        proc_control_node_B.y_h_d[proc_control_node_B.ibmat] =
          proc_control_node_B.y_n[proc_control_node_B.ibmat];
        proc_control_node_B.y_h_d[proc_control_node_B.ibmat + 10] =
          proc_control_node_B.y_n[proc_control_node_B.ibmat + 10];
        proc_control_node_B.y_h_d[proc_control_node_B.ibmat + 20] =
          proc_control_node_B.y_n[proc_control_node_B.ibmat + 20];
        proc_control_node_B.MATLABSystem_o6 =
          proc_control_node_B.y_n[proc_control_node_B.ibmat + 30];
        proc_control_node_B.epsilon =
          proc_control_node_B.y_n[proc_control_node_B.ibmat + 40];
        proc_control_node_B.Divide1_n =
          proc_control_node_B.y_n[proc_control_node_B.ibmat + 50];
        proc_control_node_B.Divide2_h =
          proc_control_node_B.y_n[proc_control_node_B.ibmat + 60];
        proc_control_node_B.MATLABSystem_o5 = 1.0 / sqrt
          (((proc_control_node_B.MATLABSystem_o6 *
             proc_control_node_B.MATLABSystem_o6 + proc_control_node_B.epsilon *
             proc_control_node_B.epsilon) + proc_control_node_B.Divide1_n *
            proc_control_node_B.Divide1_n) + proc_control_node_B.Divide2_h *
           proc_control_node_B.Divide2_h);
        proc_control_node_B.qRel[0] = proc_control_node_B.MATLABSystem_o6 *
          proc_control_node_B.MATLABSystem_o5;
        proc_control_node_B.qRel[1] = proc_control_node_B.epsilon *
          proc_control_node_B.MATLABSystem_o5;
        proc_control_node_B.qRel[2] = proc_control_node_B.Divide1_n *
          proc_control_node_B.MATLABSystem_o5;
        proc_control_node_B.qRel[3] = proc_control_node_B.Divide2_h *
          proc_control_node_B.MATLABSystem_o5;
        proc_control_node_B.MATLABSystem_o5 = (proc_control_node_B.qRel[1] *
          proc_control_node_B.qRel[3] - proc_control_node_B.qRel[0] *
          proc_control_node_B.qRel[2]) * -2.0;
        if (proc_control_node_B.MATLABSystem_o5 > 1.0) {
          proc_control_node_B.MATLABSystem_o5 = 1.0;
        }

        if (proc_control_node_B.MATLABSystem_o5 < -1.0) {
          proc_control_node_B.MATLABSystem_o5 = -1.0;
        }

        proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.qRel[0] *
          proc_control_node_B.qRel[0];
        proc_control_node_B.epsilon = proc_control_node_B.qRel[1] *
          proc_control_node_B.qRel[1];
        proc_control_node_B.Divide1_n = proc_control_node_B.qRel[2] *
          proc_control_node_B.qRel[2];
        proc_control_node_B.Divide2_h = proc_control_node_B.qRel[3] *
          proc_control_node_B.qRel[3];
        proc_control_node_B.y_h_d[proc_control_node_B.ibmat + 30] =
          rt_atan2d_snf((proc_control_node_B.qRel[2] * proc_control_node_B.qRel
                         [3] + proc_control_node_B.qRel[0] *
                         proc_control_node_B.qRel[1]) * 2.0,
                        ((proc_control_node_B.MATLABSystem_o6 -
                          proc_control_node_B.epsilon) -
                         proc_control_node_B.Divide1_n) +
                        proc_control_node_B.Divide2_h);
        proc_control_node_B.y_h_d[proc_control_node_B.ibmat + 40] = asin
          (proc_control_node_B.MATLABSystem_o5);
        proc_control_node_B.y_h_d[proc_control_node_B.ibmat + 50] =
          rt_atan2d_snf((proc_control_node_B.qRel[1] * proc_control_node_B.qRel
                         [2] + proc_control_node_B.qRel[0] *
                         proc_control_node_B.qRel[3]) * 2.0,
                        ((proc_control_node_B.MATLABSystem_o6 +
                          proc_control_node_B.epsilon) -
                         proc_control_node_B.Divide1_n) -
                        proc_control_node_B.Divide2_h);
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          proc_control_node_B.y_h_d[proc_control_node_B.ibmat + 10 *
            (proc_control_node_B.i_n + 6)] = proc_control_node_B.y_n
            [(proc_control_node_B.i_n + 7) * 10 + proc_control_node_B.ibmat];
        }
      }

      // End of MATLAB Function: '<S130>/MATLAB Function'

      // SignalConversion generated from: '<S139>/ SFunction ' incorporates:
      //   MATLAB Function: '<S130>/MATLAB Function2'

      proc_control_node_B.TmpSignalConversionAtSFun_p[3] =
        proc_control_node_B.sincos_o2[2];
      proc_control_node_B.TmpSignalConversionAtSFun_p[4] =
        proc_control_node_B.sincos_o2[1];
      proc_control_node_B.TmpSignalConversionAtSFun_p[5] =
        proc_control_node_B.sincos_o2[0];
      proc_control_node_B.TmpSignalConversionAtSFun_p[0] =
        proc_control_node_B.WorldPosition[0];
      proc_control_node_B.TmpSignalConversionAtSFun_p[6] =
        proc_control_node_B.BodyVelocity[0];
      proc_control_node_B.TmpSignalConversionAtSFun_p[9] =
        proc_control_node_B.AngularRate[0];
      proc_control_node_B.TmpSignalConversionAtSFun_p[1] =
        proc_control_node_B.WorldPosition[1];
      proc_control_node_B.TmpSignalConversionAtSFun_p[7] =
        proc_control_node_B.BodyVelocity[1];
      proc_control_node_B.TmpSignalConversionAtSFun_p[10] =
        proc_control_node_B.AngularRate[1];
      proc_control_node_B.TmpSignalConversionAtSFun_p[2] =
        proc_control_node_B.WorldPosition[2];
      proc_control_node_B.TmpSignalConversionAtSFun_p[8] =
        proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.TmpSignalConversionAtSFun_p[11] =
        proc_control_node_B.AngularRate[2];

      // MATLAB Function: '<S130>/MATLAB Function2' incorporates:
      //   Constant: '<S130>/Constant1'
      //   Constant: '<S130>/Constant3'

      proc_control_node_B.MATLABSystem_o5 = proc_control_node_P.MPC.dts;
      proc_contr_AUVEULJacobianMatrix
        (proc_control_node_B.TmpSignalConversionAtSFun_p,
         proc_control_node_B.Sy_c);
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 144;
           proc_control_node_B.i_n++) {
        proc_control_node_B.C_j[proc_control_node_B.i_n] =
          tmp_0[proc_control_node_B.i_n];
        proc_control_node_B.y_b[proc_control_node_B.i_n] =
          proc_control_node_B.Sy_c[proc_control_node_B.i_n] *
          proc_control_node_P.MPC.Ts;
      }

      proc_control_node_B.MATLABSystem_o6 = 0.0;
      proc_control_node_B.i_n = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.i_n < 12)) {
        proc_control_node_B.epsilon = 0.0;
        for (proc_control_node_B.k_b = 0; proc_control_node_B.k_b < 12;
             proc_control_node_B.k_b++) {
          proc_control_node_B.epsilon += fabs(proc_control_node_B.y_b[12 *
            proc_control_node_B.i_n + proc_control_node_B.k_b]);
        }

        if (rtIsNaN(proc_control_node_B.epsilon)) {
          proc_control_node_B.MATLABSystem_o6 = (rtNaN);
          exitg1 = true;
        } else {
          if (proc_control_node_B.epsilon > proc_control_node_B.MATLABSystem_o6)
          {
            proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.epsilon;
          }

          proc_control_node_B.i_n++;
        }
      }

      if (proc_control_node_B.MATLABSystem_o6 <= 5.3719203511481517) {
        proc_control_node_B.ibmat = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_node_B.ibmat < 5)) {
          if (proc_control_node_B.MATLABSystem_o6 <=
              theta[proc_control_node_B.ibmat]) {
            proc_co_PadeApproximantOfDegree(proc_control_node_B.y_b,
              c[proc_control_node_B.ibmat], proc_control_node_B.A_l_n);
            exitg1 = true;
          } else {
            proc_control_node_B.ibmat++;
          }
        }
      } else {
        proc_control_node_B.MATLABSystem_o6 /= 5.3719203511481517;
        if ((!rtIsInf(proc_control_node_B.MATLABSystem_o6)) && (!rtIsNaN
             (proc_control_node_B.MATLABSystem_o6))) {
          proc_control_node_B.MATLABSystem_o6 = frexp
            (proc_control_node_B.MATLABSystem_o6, &proc_control_node_B.e_o);
        } else {
          proc_control_node_B.e_o = 0;
        }

        proc_control_node_B.epsilon = proc_control_node_B.e_o;
        if (proc_control_node_B.MATLABSystem_o6 == 0.5) {
          proc_control_node_B.epsilon = static_cast<real_T>
            (proc_control_node_B.e_o) - 1.0;
        }

        proc_control_node_B.MATLABSystem_o6 = rt_powd_snf(2.0,
          proc_control_node_B.epsilon);
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 144;
             proc_control_node_B.i_n++) {
          proc_control_node_B.y_i[proc_control_node_B.i_n] =
            proc_control_node_B.y_b[proc_control_node_B.i_n] /
            proc_control_node_B.MATLABSystem_o6;
        }

        proc_co_PadeApproximantOfDegree(proc_control_node_B.y_i, 13,
          proc_control_node_B.A_l_n);
        proc_control_node_B.k_b = 0;
        while (proc_control_node_B.k_b <= static_cast<int32_T>
               (proc_control_node_B.epsilon) - 1) {
          for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 12;
               proc_control_node_B.i_n++) {
            proc_control_node_B.ibmat = 0;
            for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset <
                 12; proc_control_node_B.coffset++) {
              proc_control_node_B.e_o = proc_control_node_B.ibmat +
                proc_control_node_B.i_n;
              proc_control_node_B.y_b[proc_control_node_B.e_o] = 0.0;
              proc_control_node_B.aoffset = 0;
              for (proc_control_node_B.i1 = 0; proc_control_node_B.i1 < 12;
                   proc_control_node_B.i1++) {
                proc_control_node_B.y_b[proc_control_node_B.e_o] +=
                  proc_control_node_B.A_l_n[proc_control_node_B.aoffset +
                  proc_control_node_B.i_n] *
                  proc_control_node_B.A_l_n[proc_control_node_B.i1 +
                  proc_control_node_B.ibmat];
                proc_control_node_B.aoffset += 12;
              }

              proc_control_node_B.ibmat += 12;
            }
          }

          memcpy(&proc_control_node_B.A_l_n[0], &proc_control_node_B.y_b[0],
                 144U * sizeof(real_T));
          proc_control_node_B.k_b++;
        }
      }

      memset(&proc_control_node_B.pp_coefs[0], 0, 36U * sizeof(real_T));

      // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
      //   EnablePort: '<S4>/Enable'

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S294>/Action Port'

      // Outputs for Enabled SubSystem: '<S310>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S313>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S251>/Enable'

      // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
      //   EnablePort: '<S270>/Enable'

      // SwitchCase: '<S9>/Switch Case' incorporates:
      //   Lookup_n-D: '<S13>/ PWM to N'
      //   Lookup_n-D: '<S7>/N to PWM'
      //   MATLAB Function: '<S130>/MATLAB Function2'
      //   Trigonometry: '<S271>/sincos'
      //   Trigonometry: '<S315>/sincos'
      //   Trigonometry: '<S31>/sincos'
      //   Trigonometry: '<S86>/sincos'

      proc_control_node_B.e_o = 0;
      proc_control_node_B.ibmat = 0;
      proc_control_node_B.coffset = 0;

      // End of Outputs for SubSystem: '<S267>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
      // End of Outputs for SubSystem: '<S310>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      // End of Outputs for SubSystem: '<Root>/ROS Output'

      // MATLAB Function: '<S130>/MATLAB Function2' incorporates:
      //   Constant: '<S130>/Constant3'
      //   Delay: '<S130>/Delay1'
      //   Lookup_n-D: '<S13>/ PWM to N'
      //   Lookup_n-D: '<S7>/N to PWM'
      //   SwitchCase: '<S9>/Switch Case'
      //   Trigonometry: '<S271>/sincos'
      //   Trigonometry: '<S315>/sincos'
      //   Trigonometry: '<S31>/sincos'
      //   Trigonometry: '<S86>/sincos'

      for (proc_control_node_B.k_b = 0; proc_control_node_B.k_b < 6;
           proc_control_node_B.k_b++) {
        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S294>/Action Port'

        // Outputs for Enabled SubSystem: '<S310>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S313>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S251>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_node_B.pp_coefs[proc_control_node_B.e_o] = 1.0;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
        // End of Outputs for SubSystem: '<S310>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
          //   EnablePort: '<S4>/Enable'

          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S294>/Action Port'

          // Outputs for Enabled SubSystem: '<S310>/Enabled Subsystem' incorporates:
          //   EnablePort: '<S313>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S251>/Enable'

          // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
          //   EnablePort: '<S270>/Enable'

          proc_control_node_B.dCoefs[proc_control_node_B.i_n +
            proc_control_node_B.ibmat] = proc_control_node_B.Sy_c
            [(proc_control_node_B.i_n + proc_control_node_B.coffset) + 78];

          // End of Outputs for SubSystem: '<S267>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
          // End of Outputs for SubSystem: '<S310>/Enabled Subsystem'
          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          // End of Outputs for SubSystem: '<Root>/ROS Output'
        }

        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S294>/Action Port'

        // Outputs for Enabled SubSystem: '<S310>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S313>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S251>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_node_B.e_o += 7;
        proc_control_node_B.ibmat += 6;
        proc_control_node_B.coffset += 12;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
        // End of Outputs for SubSystem: '<S310>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
      }

      proc_control_node_B.i_n = 0;
      proc_control_node_B.ibmat = 0;
      for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 6;
           proc_control_node_B.coffset++) {
        for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 6;
             proc_control_node_B.aoffset++) {
          proc_control_node_B.e_o = proc_control_node_B.aoffset +
            proc_control_node_B.i_n;
          proc_control_node_B.constValues_p[proc_control_node_B.e_o] =
            proc_control_node_B.A_l_n[(proc_control_node_B.aoffset +
            proc_control_node_B.ibmat) + 78] -
            proc_control_node_B.pp_coefs[proc_control_node_B.e_o];
        }

        proc_control_node_B.i_n += 6;
        proc_control_node_B.ibmat += 12;
      }

      proc_control_node_mldivide(proc_control_node_B.dCoefs,
        proc_control_node_B.constValues_p, proc_control_node_B.pp_coefs);
      memcpy(&proc_control_node_B.DX_l[0],
             &proc_control_node_B.TmpSignalConversionAtSFun_p[0], 12U * sizeof
             (real_T));
      proc_control_node_B.ibmat = 0;
      while (proc_control_node_B.ibmat <= static_cast<int32_T>
             (proc_control_node_B.MATLABSystem_o5) - 1) {
        proc_control_node_B.MATLABSystem_o6 = proc_control_node_P.MPC.Ts /
          proc_control_node_B.MATLABSystem_o5;
        proc_control_nod_AUVEulerSimFcn(proc_control_node_B.DX_l,
          proc_control_node_DW.Delay1_DSTATE_c, proc_control_node_B.b_yoff);
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 12;
             proc_control_node_B.i_n++) {
          proc_control_node_B.DX_l[proc_control_node_B.i_n] +=
            proc_control_node_B.b_yoff[proc_control_node_B.i_n] *
            proc_control_node_B.MATLABSystem_o6;
        }

        proc_control_node_B.ibmat++;
      }

      // MATLAB Function: '<S168>/FixedHorizonOptimizer'
      memset(&proc_control_node_B.Bu_n[0], 0, 1760U * sizeof(real_T));
      memset(&proc_control_node_B.Bv_p[0], 0, 220U * sizeof(real_T));
      memset(&proc_control_node_B.Dv_n[0], 0, 132U * sizeof(real_T));
      memcpy(&proc_control_node_B.Jacobian[0], &e_0[0], 400U * sizeof(real_T));
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 240;
           proc_control_node_B.i_n++) {
        proc_control_node_B.Pxy_f[proc_control_node_B.i_n] =
          g_0[proc_control_node_B.i_n];
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        // MATLAB Function: '<S130>/MATLAB Function2'
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.y_nc[proc_control_node_B.ibmat + 6 *
            proc_control_node_B.i_n] = 0.0;
        }

        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 6;
             proc_control_node_B.coffset++) {
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
               proc_control_node_B.ibmat++) {
            proc_control_node_B.k_b = 6 * proc_control_node_B.i_n +
              proc_control_node_B.ibmat;
            proc_control_node_B.y_nc[proc_control_node_B.k_b] +=
              proc_control_node_B.pp_coefs[6 * proc_control_node_B.coffset +
              proc_control_node_B.ibmat] * c_b[6 * proc_control_node_B.i_n +
              proc_control_node_B.coffset];
          }
        }

        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.coffset = proc_control_node_B.ibmat + 12 *
            proc_control_node_B.i_n;
          proc_control_node_B.dv9[proc_control_node_B.coffset] = 0.0;
          proc_control_node_B.dv9[proc_control_node_B.coffset + 6] =
            proc_control_node_B.y_nc[6 * proc_control_node_B.i_n +
            proc_control_node_B.ibmat];
        }

        // MATLAB Function: '<S168>/FixedHorizonOptimizer'
        proc_control_node_B.rtb_PressureDepth_Data[proc_control_node_B.i_n] =
          static_cast<real_T>(proc_control_node_B.i_n) + 1.0;
      }

      // MATLAB Function: '<S168>/FixedHorizonOptimizer'
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 12;
           proc_control_node_B.i_n++) {
        proc_control_node_B.b_yoff[proc_control_node_B.i_n] = static_cast<real_T>
          (proc_control_node_B.i_n) + 1.0;
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.dv27[proc_control_node_B.i_n] = 1.0;
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 12;
           proc_control_node_B.i_n++) {
        proc_control_node_B.dv25[proc_control_node_B.i_n] = 1.0;
      }

      memcpy(&proc_control_node_B.f_c[0], &f_0[0], 580U * sizeof(real_T));

      // MATLAB Function: '<S168>/FixedHorizonOptimizer' incorporates:
      //   MATLAB Function: '<S130>/MATLAB Function2'

      proc_control_no_mpc_plantupdate(proc_control_node_B.A_l_n,
        proc_control_node_B.dv9, proc_control_node_B.C_j,
        proc_control_node_B.Jacobian, proc_control_node_B.f_c,
        proc_control_node_B.Pxy_f, h_0,
        proc_control_node_B.rtb_PressureDepth_Data, proc_control_node_B.b_yoff,
        proc_control_node_B.dv27, proc_control_node_B.dv25,
        &proc_control_node_B.Bu_n[0], &proc_control_node_B.Bv_p[0],
        proc_control_node_B.dHdx_h, &proc_control_node_B.Dv_n[0],
        proc_control_node_B.b_myoff, proc_control_node_B.Qk_a,
        proc_control_node_B.Sy_c, proc_control_node_B.Nk_e);
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 32;
           proc_control_node_B.i_n++) {
        proc_control_node_B.b_Mlim[proc_control_node_B.i_n] =
          k[proc_control_node_B.i_n];
      }

      memset(&proc_control_node_B.b_utarget[0], 0, 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.xk1_a[0], &o_0[0], 20U * sizeof(real_T));

      // MATLAB Function: '<S130>/MATLAB Function2' incorporates:
      //   Delay: '<S130>/Delay1'

      memset(&proc_control_node_B.b_myoff[0], 0, 12U * sizeof(real_T));
      proc_control_node_B.ibmat = 0;
      for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 12;
           proc_control_node_B.coffset++) {
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 12;
             proc_control_node_B.i_n++) {
          proc_control_node_B.b_myoff[proc_control_node_B.i_n] +=
            proc_control_node_B.C_j[proc_control_node_B.i_n +
            proc_control_node_B.ibmat] *
            proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.coffset];
        }

        proc_control_node_B.b_yoff[proc_control_node_B.coffset] = 0.0;
        proc_control_node_B.ibmat += 12;
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 12;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.b_yoff[proc_control_node_B.ibmat] += 0.0 *
            proc_control_node_DW.Delay1_DSTATE_c[proc_control_node_B.i_n];
        }

        // MATLAB Function: '<S168>/FixedHorizonOptimizer' incorporates:
        //   Delay: '<S130>/Delay1'

        proc_control_node_B.rtb_PressureDepth_Data[proc_control_node_B.i_n] =
          1.0;
        proc_control_node_B.dv27[proc_control_node_B.i_n] = 0.0;
        proc_control_node_B.u_p[proc_control_node_B.i_n] = static_cast<real_T>
          (proc_control_node_B.i_n) + 1.0;
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 12;
           proc_control_node_B.i_n++) {
        proc_control_node_B.rtb_C_j_k[proc_control_node_B.i_n] =
          proc_control_node_B.b_myoff[proc_control_node_B.i_n] +
          proc_control_node_B.b_yoff[proc_control_node_B.i_n];

        // MATLAB Function: '<S168>/FixedHorizonOptimizer'
        proc_control_node_B.dv25[proc_control_node_B.i_n] = 1.0;
        proc_control_node_B.dv26[proc_control_node_B.i_n] = static_cast<real_T>
          (proc_control_node_B.i_n) + 1.0;
        proc_control_node_B.rtb_DX_l_h[proc_control_node_B.i_n] =
          proc_control_node_B.DX_l[proc_control_node_B.i_n] -
          proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.i_n];
      }

      // MATLAB Function: '<S168>/FixedHorizonOptimizer' incorporates:
      //   DataStoreRead: '<S180>/Data Store Read'
      //   Delay: '<S130>/Delay1'
      //   Lookup_n-D: '<S13>/ PWM to N'
      //   Lookup_n-D: '<S7>/N to PWM'
      //   MATLAB Function: '<S130>/MATLAB Function2'
      //   SwitchCase: '<S9>/Switch Case'
      //   Trigonometry: '<S271>/sincos'
      //   Trigonometry: '<S315>/sincos'
      //   Trigonometry: '<S31>/sincos'
      //   Trigonometry: '<S86>/sincos'
      //   UnitDelay: '<S140>/last_mv'

      proc_cont_mpc_updateFromNominal(proc_control_node_B.b_Mlim, l_0,
        proc_control_node_DW.Delay1_DSTATE_c,
        proc_control_node_B.rtb_PressureDepth_Data, proc_control_node_B.dv27,
        proc_control_node_B.u_p, proc_control_node_B.b_utarget,
        proc_control_node_B.rtb_C_j_k, proc_control_node_B.dv25, n_0,
        proc_control_node_B.dv26,
        proc_control_node_B.TmpSignalConversionAtSFun_p,
        proc_control_node_B.xk1_a, proc_control_node_B.rtb_DX_l_h,
        proc_control_node_B.Bv_p, proc_control_node_B.u,
        proc_control_node_B.b_yoff, proc_control_node_B.b_myoff);
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 11;
           proc_control_node_B.ibmat++) {
        proc_control_node_B.vseq[proc_control_node_B.ibmat] = 1.0;
      }

      proc_control_node_B.coffset = 0;
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 10;
           proc_control_node_B.ibmat++) {
        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S294>/Action Port'

        // Outputs for Enabled SubSystem: '<S310>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S313>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S251>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_node_B.e_o = 0;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
        // End of Outputs for SubSystem: '<S310>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
        for (proc_control_node_B.k_b = 0; proc_control_node_B.k_b < 12;
             proc_control_node_B.k_b++) {
          // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
          //   EnablePort: '<S4>/Enable'

          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S294>/Action Port'

          // Outputs for Enabled SubSystem: '<S310>/Enabled Subsystem' incorporates:
          //   EnablePort: '<S313>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S251>/Enable'

          // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
          //   EnablePort: '<S270>/Enable'

          proc_control_node_B.rseq_p[proc_control_node_B.k_b +
            proc_control_node_B.coffset] =
            proc_control_node_B.y_h_d[proc_control_node_B.e_o +
            proc_control_node_B.ibmat] -
            proc_control_node_B.b_yoff[proc_control_node_B.k_b];
          proc_control_node_B.e_o += 10;

          // End of Outputs for SubSystem: '<S267>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
          // End of Outputs for SubSystem: '<S310>/Enabled Subsystem'
          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          // End of Outputs for SubSystem: '<Root>/ROS Output'
        }

        proc_control_node_B.coffset += 12;
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 20;
           proc_control_node_B.i_n++) {
        proc_control_node_B.dv18[proc_control_node_B.i_n] =
          proc_control_node_DW.x_h[proc_control_node_B.i_n] -
          proc_control_node_B.xk1_a[proc_control_node_B.i_n];
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.rtb_PressureDepth_Data[proc_control_node_B.i_n] =
          proc_control_node_DW.last_mv_DSTATE_j[proc_control_node_B.i_n] -
          proc_control_node_B.u[proc_control_node_B.i_n];
      }

      memset(&proc_control_node_B.dv3[0], 0, 640U * sizeof(real_T));
      memset(&proc_control_node_B.dv4[0], 0, 352U * sizeof(real_T));
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.dv27[proc_control_node_B.i_n] = 0.040000000000000008;
      }

      // Memory: '<S140>/Memory'
      for (proc_control_node_B.i3 = 0; proc_control_node_B.i3 < 32;
           proc_control_node_B.i3++) {
        proc_control_node_B.bv2[proc_control_node_B.i3] =
          proc_control_node_DW.Memory_PreviousInput_h[proc_control_node_B.i3];
      }

      // End of Memory: '<S140>/Memory'
      memcpy(&proc_control_node_B.q[0], &q[0], sizeof(real_T) << 8);
      memcpy(&proc_control_node_B.r[0], &r_0[0], 289U * sizeof(real_T));
      memcpy(&proc_control_node_B.s[0], &s[0], 544U * sizeof(real_T));

      // Merge: '<S7>/Merge' incorporates:
      //   MATLAB Function: '<S168>/FixedHorizonOptimizer'
      //   Memory: '<S140>/Memory'

      proc_control_mpcblock_optimizer(proc_control_node_B.rseq_p,
        proc_control_node_B.vseq, proc_control_node_B.dv18,
        proc_control_node_B.rtb_PressureDepth_Data, proc_control_node_B.bv2,
        proc_control_node_B.b_Mlim, proc_control_node_B.dv3,
        proc_control_node_B.q, proc_control_node_B.dv4,
        proc_control_node_B.b_utarget, proc_control_node_B.u,
        proc_control_node_B.r, proc_control_node_B.s, t_0, u, v,
        proc_control_node_B.dv27, w, proc_control_node_B.Jacobian,
        proc_control_node_B.Bu_n, proc_control_node_B.Bv_p,
        proc_control_node_B.Pxy_f, proc_control_node_B.Dv_n, l_0,
        proc_control_node_B.u_p, proc_control_node_B.useq_f,
        &proc_control_node_B.Merge_i[8],
        proc_control_node_DW.Memory_PreviousInput_h);

      // Gain: '<S140>/u_scale'
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.u[proc_control_node_B.i_n] =
          proc_control_node_P.u_scale_Gain[proc_control_node_B.i_n] *
          proc_control_node_B.u_p[proc_control_node_B.i_n];
      }

      // End of Gain: '<S140>/u_scale'

      // Outputs for Atomic SubSystem: '<S137>/Predict'
      // MATLAB Function: '<S181>/Predict' incorporates:
      //   Constant: '<S137>/Q'
      //   DataStoreRead: '<S181>/Data Store ReadX'
      //   DataStoreWrite: '<S181>/Data Store WriteP'
      //   Delay: '<S130>/Delay1'

      proc_contr_EKalmanStateFonction(proc_control_node_DW.x_h,
        proc_control_node_DW.Delay1_DSTATE_c, proc_control_node_B.xk1_a);
      for (proc_control_node_B.k_b = 0; proc_control_node_B.k_b < 20;
           proc_control_node_B.k_b++) {
        memcpy(&proc_control_node_B.imvec_e[0], &proc_control_node_DW.x_h[0],
               20U * sizeof(real_T));
        proc_control_node_B.epsilon = 1.4901161193847656E-8 * fabs
          (proc_control_node_DW.x_h[proc_control_node_B.k_b]);
        if ((1.4901161193847656E-8 > proc_control_node_B.epsilon) || rtIsNaN
            (proc_control_node_B.epsilon)) {
          proc_control_node_B.epsilon = 1.4901161193847656E-8;
        }

        proc_control_node_B.imvec_e[proc_control_node_B.k_b] =
          proc_control_node_DW.x_h[proc_control_node_B.k_b] +
          proc_control_node_B.epsilon;
        proc_contr_EKalmanStateFonction(proc_control_node_B.imvec_e,
          proc_control_node_DW.Delay1_DSTATE_c, proc_control_node_B.dv18);
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 20;
             proc_control_node_B.i_n++) {
          proc_control_node_B.Jacobian[proc_control_node_B.i_n + 20 *
            proc_control_node_B.k_b] =
            (proc_control_node_B.dv18[proc_control_node_B.i_n] -
             proc_control_node_B.xk1_a[proc_control_node_B.i_n]) /
            proc_control_node_B.epsilon;
        }
      }

      proc_control_node_qrFactor_f(proc_control_node_B.Jacobian,
        proc_control_node_DW.P_e, proc_control_node_P.Q_Value);
      memcpy(&proc_control_node_B.dv18[0], &proc_control_node_DW.x_h[0], 20U *
             sizeof(real_T));

      // MATLAB Function: '<S181>/Predict' incorporates:
      //   DataStoreRead: '<S181>/Data Store ReadX'
      //   DataStoreWrite: '<S181>/Data Store WriteX'
      //   Delay: '<S130>/Delay1'

      proc_contr_EKalmanStateFonction(proc_control_node_B.dv18,
        proc_control_node_DW.Delay1_DSTATE_c, proc_control_node_DW.x_h);

      // End of Outputs for SubSystem: '<S137>/Predict'

      // Merge: '<S7>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S130>/Pulse Generator'

      proc_control_node_B.Merge_i[9] = (proc_control_node_DW.clockTickCounter_h <
        proc_control_node_P.PulseGenerator_Duty_c) &&
        (proc_control_node_DW.clockTickCounter_h >= 0) ?
        proc_control_node_P.PulseGenerator_Amp_a : 0.0;

      // DiscretePulseGenerator: '<S130>/Pulse Generator'
      if (proc_control_node_DW.clockTickCounter_h >=
          proc_control_node_P.PulseGenerator_Period_g - 1.0) {
        proc_control_node_DW.clockTickCounter_h = 0;
      } else {
        proc_control_node_DW.clockTickCounter_h++;
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.MATLABSystem_o5 =
          proc_control_node_B.u[proc_control_node_B.i_n];

        // Merge: '<S7>/Merge' incorporates:
        //   SignalConversion generated from: '<S130>/out'

        proc_control_node_B.Merge_i[proc_control_node_B.i_n] =
          proc_control_node_B.MATLABSystem_o5;

        // Update for UnitDelay: '<S140>/last_mv' incorporates:
        //   Merge: '<S7>/Merge'
        //   SignalConversion generated from: '<S130>/out'

        proc_control_node_DW.last_mv_DSTATE_j[proc_control_node_B.i_n] =
          proc_control_node_B.u_p[proc_control_node_B.i_n];

        // Update for Delay: '<S130>/Delay1' incorporates:
        //   Merge: '<S7>/Merge'
        //   SignalConversion generated from: '<S130>/out'

        proc_control_node_DW.Delay1_DSTATE_c[proc_control_node_B.i_n] =
          proc_control_node_B.MATLABSystem_o5;
      }

      // End of Outputs for SubSystem: '<S7>/Adaptive Euler MPC'
      break;

     case 3:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S7>/Adaptive quaternion MPC' incorporates:
        //   ActionPort: '<S131>/Action Port'

        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 32;
             proc_control_node_B.i_n++) {
          // InitializeConditions for SwitchCase: '<S7>/Switch Case' incorporates:
          //   Memory: '<S189>/Memory'

          proc_control_node_DW.Memory_PreviousInput[proc_control_node_B.i_n] =
            proc_control_node_P.Memory_InitialCondition_b[proc_control_node_B.i_n];
        }

        // InitializeConditions for SwitchCase: '<S7>/Switch Case' incorporates:
        //   Delay: '<S131>/Delay1'
        //   DiscretePulseGenerator: '<S131>/Pulse Generator'
        //   UnitDelay: '<S189>/last_mv'

        memcpy(&proc_control_node_DW.last_mv_DSTATE[0],
               &proc_control_node_P.last_mv_InitialCondition_k[0], sizeof(real_T)
               << 3U);
        memcpy(&proc_control_node_DW.Delay1_DSTATE[0],
               &proc_control_node_P.Delay1_InitialCondition_l[0], sizeof(real_T)
               << 3U);
        proc_control_node_DW.clockTickCounter = 0;

        // End of InitializeConditions for SubSystem: '<S7>/Adaptive quaternion MPC' 
      }

      // Outputs for IfAction SubSystem: '<S7>/Adaptive quaternion MPC' incorporates:
      //   ActionPort: '<S131>/Action Port'

      // Outputs for Enabled SubSystem: '<S187>/Correct1' incorporates:
      //   EnablePort: '<S219>/Enable'

      if (proc_control_node_P.Enable1_Value_f) {
        // MATLAB Function: '<S219>/Correct' incorporates:
        //   Constant: '<S187>/R1'
        //   DataStoreRead: '<S219>/Data Store ReadX'
        //   DataStoreWrite: '<S219>/Data Store WriteP'

        memcpy(&proc_control_node_B.Jacobian_p[0],
               &proc_control_node_P.R1_Value_a[0], 169U * sizeof(real_T));
        EKFCorrectorAdditive_getMeasu_e(proc_control_node_B.Jacobian_p,
          proc_control_node_DW.x_b, proc_control_node_DW.P_d,
          proc_control_node_B.TmpSignalConversionAtTran_a,
          proc_control_node_B.Pxy, proc_control_node_B.Sy,
          proc_control_node_B.dHdx);

        // DataTypeConversion: '<S187>/DataTypeConversion_y1' incorporates:
        //   MATLAB Function: '<S219>/Correct'

        proc_control_node_B.dv19[0] = proc_control_node_B.WorldPosition[0] -
          proc_control_node_B.TmpSignalConversionAtTran_a[0];
        proc_control_node_B.dv19[1] = proc_control_node_B.WorldPosition[1] -
          proc_control_node_B.TmpSignalConversionAtTran_a[1];
        proc_control_node_B.dv19[2] = proc_control_node_B.WorldPosition[2] -
          proc_control_node_B.TmpSignalConversionAtTran_a[2];
        proc_control_node_B.dv19[3] = proc_control_node_B.qS2W[0] -
          proc_control_node_B.TmpSignalConversionAtTran_a[3];
        proc_control_node_B.dv19[4] = proc_control_node_B.qS2W[1] -
          proc_control_node_B.TmpSignalConversionAtTran_a[4];
        proc_control_node_B.dv19[5] = proc_control_node_B.qS2W[2] -
          proc_control_node_B.TmpSignalConversionAtTran_a[5];
        proc_control_node_B.dv19[6] = proc_control_node_B.qS2W[3] -
          proc_control_node_B.TmpSignalConversionAtTran_a[6];
        proc_control_node_B.dv19[7] = proc_control_node_B.BodyVelocity[0] -
          proc_control_node_B.TmpSignalConversionAtTran_a[7];
        proc_control_node_B.dv19[10] = proc_control_node_B.AngularRate[0] -
          proc_control_node_B.TmpSignalConversionAtTran_a[10];
        proc_control_node_B.dv19[8] = proc_control_node_B.BodyVelocity[1] -
          proc_control_node_B.TmpSignalConversionAtTran_a[8];
        proc_control_node_B.dv19[11] = proc_control_node_B.AngularRate[1] -
          proc_control_node_B.TmpSignalConversionAtTran_a[11];
        proc_control_node_B.dv19[9] = proc_control_node_B.BodyVelocity[2] -
          proc_control_node_B.TmpSignalConversionAtTran_a[9];
        proc_control_node_B.dv19[12] = proc_control_node_B.AngularRate[2] -
          proc_control_node_B.TmpSignalConversionAtTran_a[12];

        // DataStoreWrite: '<S219>/Data Store WriteX' incorporates:
        //   DataStoreWrite: '<S219>/Data Store WriteP'
        //   MATLAB Function: '<S219>/Correct'

        EKFCorrector_correctStateAndS_l(proc_control_node_DW.x_b,
          proc_control_node_DW.P_d, proc_control_node_B.dv19,
          proc_control_node_B.Pxy, proc_control_node_B.Sy,
          proc_control_node_B.dHdx, proc_control_node_B.Jacobian_p);
      }

      // End of Outputs for SubSystem: '<S187>/Correct1'

      // SignalConversion generated from: '<S188>/ SFunction ' incorporates:
      //   Constant: '<S187>/Enable1'
      //   MATLAB Function: '<S131>/MATLAB Function2'

      proc_control_node_B.TmpSignalConversionAtTran_a[0] =
        proc_control_node_B.WorldPosition[0];
      proc_control_node_B.TmpSignalConversionAtTran_a[1] =
        proc_control_node_B.WorldPosition[1];
      proc_control_node_B.TmpSignalConversionAtTran_a[2] =
        proc_control_node_B.WorldPosition[2];
      proc_control_node_B.TmpSignalConversionAtTran_a[3] =
        proc_control_node_B.qS2W[0];
      proc_control_node_B.TmpSignalConversionAtTran_a[4] =
        proc_control_node_B.qS2W[1];
      proc_control_node_B.TmpSignalConversionAtTran_a[5] =
        proc_control_node_B.qS2W[2];
      proc_control_node_B.TmpSignalConversionAtTran_a[6] =
        proc_control_node_B.qS2W[3];
      proc_control_node_B.TmpSignalConversionAtTran_a[7] =
        proc_control_node_B.BodyVelocity[0];
      proc_control_node_B.TmpSignalConversionAtTran_a[10] =
        proc_control_node_B.AngularRate[0];
      proc_control_node_B.TmpSignalConversionAtTran_a[8] =
        proc_control_node_B.BodyVelocity[1];
      proc_control_node_B.TmpSignalConversionAtTran_a[11] =
        proc_control_node_B.AngularRate[1];
      proc_control_node_B.TmpSignalConversionAtTran_a[9] =
        proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.TmpSignalConversionAtTran_a[12] =
        proc_control_node_B.AngularRate[2];

      // MATLAB Function: '<S131>/MATLAB Function2' incorporates:
      //   Constant: '<S131>/Constant1'
      //   Constant: '<S131>/Constant3'

      proc_control_node_B.MATLABSystem_o5 = proc_control_node_P.MPC.dts;
      proc_cont_AUVQuatJacobianMatrix
        (proc_control_node_B.TmpSignalConversionAtTran_a, proc_control_node_B.Sy);
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 169;
           proc_control_node_B.i_n++) {
        proc_control_node_B.Sy_p[proc_control_node_B.i_n] =
          proc_control_node_B.Sy[proc_control_node_B.i_n] *
          proc_control_node_P.MPC.Ts;
      }

      proc_control_node_expm(proc_control_node_B.Sy_p,
        proc_control_node_B.Jacobian_p);
      memset(&proc_control_node_B.pp_coefs[0], 0, 36U * sizeof(real_T));

      // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
      //   EnablePort: '<S4>/Enable'

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S294>/Action Port'

      // Outputs for Enabled SubSystem: '<S310>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S313>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S251>/Enable'

      // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
      //   EnablePort: '<S270>/Enable'

      // SwitchCase: '<S9>/Switch Case' incorporates:
      //   Lookup_n-D: '<S13>/ PWM to N'
      //   Lookup_n-D: '<S7>/N to PWM'
      //   MATLAB Function: '<S131>/MATLAB Function2'
      //   Trigonometry: '<S271>/sincos'
      //   Trigonometry: '<S315>/sincos'
      //   Trigonometry: '<S31>/sincos'
      //   Trigonometry: '<S86>/sincos'

      proc_control_node_B.e_o = 0;
      proc_control_node_B.ibmat = 0;
      proc_control_node_B.coffset = 0;

      // End of Outputs for SubSystem: '<S267>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
      // End of Outputs for SubSystem: '<S310>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      // End of Outputs for SubSystem: '<Root>/ROS Output'

      // MATLAB Function: '<S131>/MATLAB Function2' incorporates:
      //   Constant: '<S131>/Constant3'
      //   Delay: '<S131>/Delay1'
      //   Lookup_n-D: '<S13>/ PWM to N'
      //   Lookup_n-D: '<S7>/N to PWM'
      //   SwitchCase: '<S9>/Switch Case'
      //   Trigonometry: '<S271>/sincos'
      //   Trigonometry: '<S315>/sincos'
      //   Trigonometry: '<S31>/sincos'
      //   Trigonometry: '<S86>/sincos'

      for (proc_control_node_B.k_b = 0; proc_control_node_B.k_b < 6;
           proc_control_node_B.k_b++) {
        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S294>/Action Port'

        // Outputs for Enabled SubSystem: '<S310>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S313>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S251>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_node_B.pp_coefs[proc_control_node_B.e_o] = 1.0;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
        // End of Outputs for SubSystem: '<S310>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 6;
             proc_control_node_B.i_n++) {
          // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
          //   EnablePort: '<S4>/Enable'

          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S294>/Action Port'

          // Outputs for Enabled SubSystem: '<S310>/Enabled Subsystem' incorporates:
          //   EnablePort: '<S313>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S251>/Enable'

          // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
          //   EnablePort: '<S270>/Enable'

          proc_control_node_B.dCoefs[proc_control_node_B.i_n +
            proc_control_node_B.ibmat] = proc_control_node_B.Sy
            [(proc_control_node_B.i_n + proc_control_node_B.coffset) + 98];

          // End of Outputs for SubSystem: '<S267>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
          // End of Outputs for SubSystem: '<S310>/Enabled Subsystem'
          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          // End of Outputs for SubSystem: '<Root>/ROS Output'
        }

        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S294>/Action Port'

        // Outputs for Enabled SubSystem: '<S310>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S313>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S251>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_node_B.e_o += 7;
        proc_control_node_B.ibmat += 6;
        proc_control_node_B.coffset += 13;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
        // End of Outputs for SubSystem: '<S310>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
      }

      proc_control_node_B.i_n = 0;
      proc_control_node_B.ibmat = 0;
      for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 6;
           proc_control_node_B.coffset++) {
        for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 6;
             proc_control_node_B.aoffset++) {
          proc_control_node_B.k_b = proc_control_node_B.aoffset +
            proc_control_node_B.i_n;
          proc_control_node_B.constValues_p[proc_control_node_B.k_b] =
            proc_control_node_B.Jacobian_p[(proc_control_node_B.aoffset +
            proc_control_node_B.ibmat) + 98] -
            proc_control_node_B.pp_coefs[proc_control_node_B.k_b];
        }

        proc_control_node_B.i_n += 6;
        proc_control_node_B.ibmat += 13;
      }

      proc_control_node_mldivide(proc_control_node_B.dCoefs,
        proc_control_node_B.constValues_p, proc_control_node_B.pp_coefs);
      memcpy(&proc_control_node_B.imvec_b[0],
             &proc_control_node_B.TmpSignalConversionAtTran_a[0], 13U * sizeof
             (real_T));
      proc_control_node_B.ibmat = 0;
      while (proc_control_node_B.ibmat <= static_cast<int32_T>
             (proc_control_node_B.MATLABSystem_o5) - 1) {
        proc_control_node_B.MATLABSystem_o6 = proc_control_node_P.MPC.Ts /
          proc_control_node_B.MATLABSystem_o5;
        proc_control_node_AUVQuatSimFcn(proc_control_node_B.imvec_b,
          proc_control_node_DW.Delay1_DSTATE, proc_control_node_B.dv19);
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 13;
             proc_control_node_B.i_n++) {
          proc_control_node_B.imvec_b[proc_control_node_B.i_n] +=
            proc_control_node_B.dv19[proc_control_node_B.i_n] *
            proc_control_node_B.MATLABSystem_o6;
        }

        proc_control_node_B.ibmat++;
      }

      // MATLAB Function: '<S217>/FixedHorizonOptimizer'
      memset(&proc_control_node_B.Bu[0], 0, 1848U * sizeof(real_T));
      memset(&proc_control_node_B.Bv[0], 0, 231U * sizeof(real_T));
      memset(&proc_control_node_B.Dv[0], 0, 143U * sizeof(real_T));
      memcpy(&proc_control_node_B.b_A_a[0], &e[0], 441U * sizeof(real_T));
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 273;
           proc_control_node_B.i_n++) {
        proc_control_node_B.Pxy[proc_control_node_B.i_n] =
          g[proc_control_node_B.i_n];
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        // MATLAB Function: '<S131>/MATLAB Function2'
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.y_nc[proc_control_node_B.ibmat + 6 *
            proc_control_node_B.i_n] = 0.0;
        }

        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 6;
             proc_control_node_B.coffset++) {
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
               proc_control_node_B.ibmat++) {
            proc_control_node_B.k_b = 6 * proc_control_node_B.i_n +
              proc_control_node_B.ibmat;
            proc_control_node_B.y_nc[proc_control_node_B.k_b] +=
              proc_control_node_B.pp_coefs[6 * proc_control_node_B.coffset +
              proc_control_node_B.ibmat] * b_b[6 * proc_control_node_B.i_n +
              proc_control_node_B.coffset];
          }
        }

        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 7;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.Pxy_g[proc_control_node_B.ibmat + 13 *
            proc_control_node_B.i_n] = 0.0;
        }

        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.Pxy_g[(proc_control_node_B.ibmat + 13 *
            proc_control_node_B.i_n) + 7] = proc_control_node_B.y_nc[6 *
            proc_control_node_B.i_n + proc_control_node_B.ibmat];
        }

        // MATLAB Function: '<S217>/FixedHorizonOptimizer'
        proc_control_node_B.rtb_PressureDepth_Data[proc_control_node_B.i_n] =
          static_cast<real_T>(proc_control_node_B.i_n) + 1.0;
      }

      // MATLAB Function: '<S217>/FixedHorizonOptimizer'
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 13;
           proc_control_node_B.i_n++) {
        proc_control_node_B.dv19[proc_control_node_B.i_n] = static_cast<real_T>
          (proc_control_node_B.i_n) + 1.0;
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.dv27[proc_control_node_B.i_n] = 1.0;
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 13;
           proc_control_node_B.i_n++) {
        proc_control_node_B.dv20[proc_control_node_B.i_n] = 1.0;
      }

      memcpy(&proc_control_node_B.f[0], &f[0], 630U * sizeof(real_T));

      // MATLAB Function: '<S217>/FixedHorizonOptimizer' incorporates:
      //   DataStoreRead: '<S220>/Data Store Read'
      //   Delay: '<S131>/Delay1'
      //   Lookup_n-D: '<S13>/ PWM to N'
      //   Lookup_n-D: '<S7>/N to PWM'
      //   MATLAB Function: '<S131>/MATLAB Function2'
      //   Merge: '<S9>/Merge'
      //   SwitchCase: '<S9>/Switch Case'
      //   Trigonometry: '<S271>/sincos'
      //   Trigonometry: '<S315>/sincos'
      //   Trigonometry: '<S31>/sincos'
      //   Trigonometry: '<S86>/sincos'
      //   UnitDelay: '<S189>/last_mv'

      proc_control__mpc_plantupdate_k(proc_control_node_B.Jacobian_p,
        proc_control_node_B.Pxy_g, tmp_1, proc_control_node_B.b_A_a,
        proc_control_node_B.f, proc_control_node_B.Pxy, h,
        proc_control_node_B.rtb_PressureDepth_Data, proc_control_node_B.dv19,
        proc_control_node_B.dv27, proc_control_node_B.dv20,
        &proc_control_node_B.Bu[0], &proc_control_node_B.Bv[0],
        proc_control_node_B.dHdx, &proc_control_node_B.Dv[0],
        proc_control_node_B.z_h, proc_control_node_B.Qk, proc_control_node_B.Sy,
        proc_control_node_B.Nk);
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 32;
           proc_control_node_B.i_n++) {
        proc_control_node_B.b_Mlim[proc_control_node_B.i_n] =
          k[proc_control_node_B.i_n];
      }

      memset(&proc_control_node_B.b_utarget[0], 0, 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.xk1[0], &o[0], 21U * sizeof(real_T));
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.rtb_PressureDepth_Data[proc_control_node_B.i_n] =
          1.0;
        proc_control_node_B.dv27[proc_control_node_B.i_n] = 0.0;
        proc_control_node_B.u_p[proc_control_node_B.i_n] = static_cast<real_T>
          (proc_control_node_B.i_n) + 1.0;
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 13;
           proc_control_node_B.i_n++) {
        proc_control_node_B.dv19[proc_control_node_B.i_n] = 1.0;
        proc_control_node_B.dv20[proc_control_node_B.i_n] = static_cast<real_T>
          (proc_control_node_B.i_n) + 1.0;
        proc_control_node_B.imvec_eg[proc_control_node_B.i_n] =
          proc_control_node_B.imvec_b[proc_control_node_B.i_n] -
          proc_control_node_B.TmpSignalConversionAtTran_a[proc_control_node_B.i_n];
      }

      proc_co_mpc_updateFromNominal_h(proc_control_node_B.b_Mlim, l,
        proc_control_node_DW.Delay1_DSTATE,
        proc_control_node_B.rtb_PressureDepth_Data, proc_control_node_B.dv27,
        proc_control_node_B.u_p, proc_control_node_B.b_utarget,
        proc_control_node_B.TmpSignalConversionAtTran_a,
        proc_control_node_B.dv19, n, proc_control_node_B.dv20,
        proc_control_node_B.TmpSignalConversionAtTran_a, proc_control_node_B.xk1,
        proc_control_node_B.imvec_eg, proc_control_node_B.Bv,
        proc_control_node_B.u, proc_control_node_B.imz, proc_control_node_B.z_h);
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 11;
           proc_control_node_B.ibmat++) {
        proc_control_node_B.vseq[proc_control_node_B.ibmat] = 1.0;
      }

      proc_control_node_B.coffset = 0;
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 10;
           proc_control_node_B.ibmat++) {
        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S294>/Action Port'

        // Outputs for Enabled SubSystem: '<S310>/Enabled Subsystem' incorporates:
        //   EnablePort: '<S313>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S251>/Enable'

        // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
        //   EnablePort: '<S270>/Enable'

        proc_control_node_B.e_o = 0;

        // End of Outputs for SubSystem: '<S267>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
        // End of Outputs for SubSystem: '<S310>/Enabled Subsystem'
        // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
        for (proc_control_node_B.k_b = 0; proc_control_node_B.k_b < 13;
             proc_control_node_B.k_b++) {
          // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
          //   EnablePort: '<S4>/Enable'

          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
          //   ActionPort: '<S294>/Action Port'

          // Outputs for Enabled SubSystem: '<S310>/Enabled Subsystem' incorporates:
          //   EnablePort: '<S313>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S251>/Enable'

          // Outputs for Enabled SubSystem: '<S267>/Subsystem2' incorporates:
          //   EnablePort: '<S270>/Enable'

          proc_control_node_B.rseq[proc_control_node_B.k_b +
            proc_control_node_B.coffset] =
            proc_control_node_B.y_n[proc_control_node_B.e_o +
            proc_control_node_B.ibmat] -
            proc_control_node_B.imz[proc_control_node_B.k_b];
          proc_control_node_B.e_o += 10;

          // End of Outputs for SubSystem: '<S267>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
          // End of Outputs for SubSystem: '<S310>/Enabled Subsystem'
          // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          // End of Outputs for SubSystem: '<Root>/ROS Output'
        }

        proc_control_node_B.coffset += 13;
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 21;
           proc_control_node_B.i_n++) {
        proc_control_node_B.dv16[proc_control_node_B.i_n] =
          proc_control_node_DW.x_b[proc_control_node_B.i_n] -
          proc_control_node_B.xk1[proc_control_node_B.i_n];
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.rtb_PressureDepth_Data[proc_control_node_B.i_n] =
          proc_control_node_DW.last_mv_DSTATE[proc_control_node_B.i_n] -
          proc_control_node_B.u[proc_control_node_B.i_n];
      }

      memset(&proc_control_node_B.dv2[0], 0, 672U * sizeof(real_T));
      memset(&proc_control_node_B.dv4[0], 0, 352U * sizeof(real_T));
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.dv27[proc_control_node_B.i_n] = 0.040000000000000008;
      }

      // Memory: '<S189>/Memory'
      for (proc_control_node_B.i2 = 0; proc_control_node_B.i2 < 32;
           proc_control_node_B.i2++) {
        proc_control_node_B.bv2[proc_control_node_B.i2] =
          proc_control_node_DW.Memory_PreviousInput[proc_control_node_B.i2];
      }

      // End of Memory: '<S189>/Memory'
      memcpy(&proc_control_node_B.q[0], &q[0], sizeof(real_T) << 8);
      memcpy(&proc_control_node_B.r[0], &r[0], 289U * sizeof(real_T));
      memcpy(&proc_control_node_B.s[0], &s[0], 544U * sizeof(real_T));

      // Merge: '<S7>/Merge' incorporates:
      //   MATLAB Function: '<S217>/FixedHorizonOptimizer'
      //   Memory: '<S189>/Memory'

      proc_contr_mpcblock_optimizer_e(proc_control_node_B.rseq,
        proc_control_node_B.vseq, proc_control_node_B.dv16,
        proc_control_node_B.rtb_PressureDepth_Data, proc_control_node_B.bv2,
        proc_control_node_B.b_Mlim, proc_control_node_B.dv2,
        proc_control_node_B.q, proc_control_node_B.dv4,
        proc_control_node_B.b_utarget, proc_control_node_B.u,
        proc_control_node_B.r, proc_control_node_B.s, t, u, v,
        proc_control_node_B.dv27, w, proc_control_node_B.b_A_a,
        proc_control_node_B.Bu, proc_control_node_B.Bv, proc_control_node_B.Pxy,
        proc_control_node_B.Dv, l, proc_control_node_B.u_p,
        proc_control_node_B.useq_f, &proc_control_node_B.Merge_i[8],
        proc_control_node_DW.Memory_PreviousInput);

      // Gain: '<S189>/u_scale'
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.u[proc_control_node_B.i_n] =
          proc_control_node_P.u_scale_Gain_c[proc_control_node_B.i_n] *
          proc_control_node_B.u_p[proc_control_node_B.i_n];
      }

      // End of Gain: '<S189>/u_scale'

      // Outputs for Atomic SubSystem: '<S187>/Predict'
      // MATLAB Function: '<S221>/Predict' incorporates:
      //   Constant: '<S187>/Q'
      //   DataStoreRead: '<S221>/Data Store ReadX'
      //   DataStoreWrite: '<S221>/Data Store WriteP'
      //   Delay: '<S131>/Delay1'

      memcpy(&proc_control_node_B.xk1[0], &proc_control_node_DW.x_b[0], 21U *
             sizeof(real_T));
      memcpy(&proc_control_node_B.c_m.f1[0],
             &proc_control_node_DW.Delay1_DSTATE[0], sizeof(real_T) << 3U);
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 10;
           proc_control_node_B.ibmat++) {
        proc_control_n_AUVQuatExtSimFcn(proc_control_node_DW.x_b,
          proc_control_node_DW.Delay1_DSTATE, proc_control_node_B.dv16);
        for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 21;
             proc_control_node_B.i_n++) {
          proc_control_node_B.xk1[proc_control_node_B.i_n] +=
            proc_control_node_B.dv16[proc_control_node_B.i_n] * 0.01;
        }
      }

      proc_control_node_B.c_g = proc_control_node_B.c_m;
      proc_co_numericJacobianAdditive(proc_control_node_DW.x_b,
        &proc_control_node_B.c_g, proc_control_node_B.b_A_a);
      proc_control_node_qrFactor_n(proc_control_node_B.b_A_a,
        proc_control_node_DW.P_d, proc_control_node_P.Q_Value_m);

      // DataStoreWrite: '<S221>/Data Store WriteX' incorporates:
      //   MATLAB Function: '<S221>/Predict'

      memcpy(&proc_control_node_DW.x_b[0], &proc_control_node_B.xk1[0], 21U *
             sizeof(real_T));

      // End of Outputs for SubSystem: '<S187>/Predict'

      // Merge: '<S7>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S131>/Pulse Generator'

      proc_control_node_B.Merge_i[9] = (proc_control_node_DW.clockTickCounter <
        proc_control_node_P.PulseGenerator_Duty_n) &&
        (proc_control_node_DW.clockTickCounter >= 0) ?
        proc_control_node_P.PulseGenerator_Amp_b : 0.0;

      // DiscretePulseGenerator: '<S131>/Pulse Generator'
      if (proc_control_node_DW.clockTickCounter >=
          proc_control_node_P.PulseGenerator_Period_h - 1.0) {
        proc_control_node_DW.clockTickCounter = 0;
      } else {
        proc_control_node_DW.clockTickCounter++;
      }

      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
           proc_control_node_B.i_n++) {
        proc_control_node_B.MATLABSystem_o5 =
          proc_control_node_B.u[proc_control_node_B.i_n];

        // Merge: '<S7>/Merge' incorporates:
        //   SignalConversion generated from: '<S131>/out'

        proc_control_node_B.Merge_i[proc_control_node_B.i_n] =
          proc_control_node_B.MATLABSystem_o5;

        // Update for UnitDelay: '<S189>/last_mv' incorporates:
        //   Merge: '<S7>/Merge'
        //   SignalConversion generated from: '<S131>/out'

        proc_control_node_DW.last_mv_DSTATE[proc_control_node_B.i_n] =
          proc_control_node_B.u_p[proc_control_node_B.i_n];

        // Update for Delay: '<S131>/Delay1' incorporates:
        //   Merge: '<S7>/Merge'
        //   SignalConversion generated from: '<S131>/out'

        proc_control_node_DW.Delay1_DSTATE[proc_control_node_B.i_n] =
          proc_control_node_B.MATLABSystem_o5;
      }

      // End of Outputs for SubSystem: '<S7>/Adaptive quaternion MPC'
      break;

     default:
      // Outputs for IfAction SubSystem: '<S7>/IDLE' incorporates:
      //   ActionPort: '<S132>/Action Port'

      // Merge: '<S7>/Merge' incorporates:
      //   Constant: '<S132>/Constant'
      //   Constant: '<S132>/Constant1'
      //   Constant: '<S132>/Constant2'
      //   SignalConversion generated from: '<S132>/out'

      memcpy(&proc_control_node_B.Merge_i[0],
             &proc_control_node_P.Constant1_Value_n[0], sizeof(real_T) << 3U);
      proc_control_node_B.Merge_i[8] = proc_control_node_P.Constant_Value_mg;
      proc_control_node_B.Merge_i[9] = proc_control_node_P.Constant2_Value;

      // End of Outputs for SubSystem: '<S7>/IDLE'
      break;
    }

    // End of SwitchCase: '<S7>/Switch Case'
    for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
         proc_control_node_B.i_n++) {
      // Saturate: '<S7>/Saturation'
      proc_control_node_B.Divide1_n =
        proc_control_node_B.Merge_i[proc_control_node_B.i_n];
      if (proc_control_node_B.Divide1_n > proc_control_node_P.MPC.tmax) {
        // Saturate: '<S7>/Saturation'
        proc_control_node_B.Saturation[proc_control_node_B.i_n] =
          proc_control_node_P.MPC.tmax;
      } else if (proc_control_node_B.Divide1_n < proc_control_node_P.MPC.tmin) {
        // Saturate: '<S7>/Saturation'
        proc_control_node_B.Saturation[proc_control_node_B.i_n] =
          proc_control_node_P.MPC.tmin;
      } else {
        // Saturate: '<S7>/Saturation'
        proc_control_node_B.Saturation[proc_control_node_B.i_n] =
          proc_control_node_B.Divide1_n;
      }

      // End of Saturate: '<S7>/Saturation'
    }

    // Lookup_n-D: '<S7>/N to PWM' incorporates:
    //   Saturate: '<S7>/Saturation'

    for (proc_control_node_B.k_b = 0; proc_control_node_B.k_b < 8;
         proc_control_node_B.k_b++) {
      proc_control_node_B.bpIdx = plook_u32d_binckpang
        (proc_control_node_B.Saturation[proc_control_node_B.k_b],
         proc_control_node_P.N, 200U,
         &proc_control_node_DW.m_bpIndex[proc_control_node_B.k_b]);
      proc_control_node_B.NtoPWM[proc_control_node_B.k_b] =
        proc_control_node_P.PWM[proc_control_node_B.bpIdx];
    }

    // End of Outputs for SubSystem: '<Root>/Subsystem Controller'

    // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
    //   EnablePort: '<S1>/Enable'

    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_DW.ModlePhysique_MODE =
        (proc_control_node_B.MATLABSystem_o3 > 0.0);
    }

    // End of Outputs for SubSystem: '<Root>/Modèle Physique'
  }

  // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
  //   EnablePort: '<S1>/Enable'

  if (proc_control_node_DW.ModlePhysique_MODE) {
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
      // UniformRandomNumber: '<S14>/X Drift'
      proc_control_node_B.XDrift = proc_control_node_DW.XDrift_NextOutput;

      // UniformRandomNumber: '<S14>/Y Drift'
      proc_control_node_B.YDrift = proc_control_node_DW.YDrift_NextOutput;
    }

    // Integrator: '<S1>/Integrator' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'

    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_B.zcEvent = rt_ZCFcn(RISING_ZERO_CROSSING,
        &proc_control_node_PrevZCX.Integrator_Reset_ZCE,
        (proc_control_node_B.MATLABSystem_o4));

      // evaluate zero-crossings
      if ((proc_control_node_B.zcEvent != NO_ZCEVENT) ||
          (proc_control_node_DW.Integrator_IWORK != 0)) {
        proc_control_node_X.Integrator_CSTATE[0] =
          proc_control_node_B.MATLABSystem_o2[0];
        proc_control_node_X.Integrator_CSTATE[1] =
          proc_control_node_B.MATLABSystem_o2[1];
        proc_control_node_X.Integrator_CSTATE[2] =
          proc_control_node_B.MATLABSystem_o2[2];
      }
    }

    // Integrator: '<S1>/Integrator'
    proc_control_node_B.WorldPosition_d[0] =
      proc_control_node_X.Integrator_CSTATE[0];
    proc_control_node_B.WorldPosition_d[1] =
      proc_control_node_X.Integrator_CSTATE[1];
    proc_control_node_B.WorldPosition_d[2] =
      proc_control_node_X.Integrator_CSTATE[2];

    // Sum: '<S14>/Add' incorporates:
    //   Constant: '<S14>/Constant'
    //   Constant: '<S14>/Constant1'
    //   Product: '<S14>/Product'

    proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.WorldPosition_d[2]
      * proc_control_node_P.dampA + proc_control_node_P.dampB;

    // Saturate: '<S14>/Saturation'
    if (proc_control_node_B.MATLABSystem_o5 > proc_control_node_P.ratioMax) {
      proc_control_node_B.MATLABSystem_o5 = proc_control_node_P.ratioMax;
    } else if (proc_control_node_B.MATLABSystem_o5 <
               proc_control_node_P.ratioMin) {
      proc_control_node_B.MATLABSystem_o5 = proc_control_node_P.ratioMin;
    }

    // End of Saturate: '<S14>/Saturation'

    // Sin: '<S14>/X Wave' incorporates:
    //   Sin: '<S14>/Pitch Wave'
    //   Sin: '<S14>/Roll Wave'
    //   Sin: '<S14>/Yaw Wave'

    proc_control_node_B.MATLABSystem_o6 = (&proc_control_node_M)->Timing.t[0];

    // Integrator: '<S1>/Integrator1' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'

    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_B.zcEvent = rt_ZCFcn(RISING_ZERO_CROSSING,
        &proc_control_node_PrevZCX.Integrator1_Reset_ZCE,
        (proc_control_node_B.MATLABSystem_o4));

      // evaluate zero-crossings
      if ((proc_control_node_B.zcEvent != NO_ZCEVENT) ||
          (proc_control_node_DW.Integrator1_IWORK != 0)) {
        proc_control_node_X.Integrator1_CSTATE[0] =
          proc_control_node_B.MATLABSystem_o1[0];
        proc_control_node_X.Integrator1_CSTATE[1] =
          proc_control_node_B.MATLABSystem_o1[1];
        proc_control_node_X.Integrator1_CSTATE[2] =
          proc_control_node_B.MATLABSystem_o1[2];
        proc_control_node_X.Integrator1_CSTATE[3] =
          proc_control_node_B.MATLABSystem_o1[3];
      }
    }

    // MATLAB Function: '<S1>/Quaternion Normalise' incorporates:
    //   Integrator: '<S1>/Integrator1'

    proc_control_node_B.scale = 3.3121686421112381E-170;
    proc_control_node_B.absxk = fabs(proc_control_node_X.Integrator1_CSTATE[0]);
    if (proc_control_node_B.absxk > 3.3121686421112381E-170) {
      proc_control_node_B.d = 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        3.3121686421112381E-170;
      proc_control_node_B.d = proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = fabs(proc_control_node_X.Integrator1_CSTATE[1]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = fabs(proc_control_node_X.Integrator1_CSTATE[2]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = fabs(proc_control_node_X.Integrator1_CSTATE[3]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d = proc_control_node_B.d * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.d = proc_control_node_B.scale * sqrt
      (proc_control_node_B.d);
    proc_control_node_B.y_g[0] = proc_control_node_X.Integrator1_CSTATE[0] /
      proc_control_node_B.d;
    proc_control_node_B.y_g[1] = proc_control_node_X.Integrator1_CSTATE[1] /
      proc_control_node_B.d;
    proc_control_node_B.y_g[2] = proc_control_node_X.Integrator1_CSTATE[2] /
      proc_control_node_B.d;
    proc_control_node_B.y_g[3] = proc_control_node_X.Integrator1_CSTATE[3] /
      proc_control_node_B.d;

    // End of MATLAB Function: '<S1>/Quaternion Normalise'
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Constant: '<S1>/Initial Body velocity '
      proc_control_node_B.InitialBodyvelocity[0] =
        proc_control_node_P.InitialBodyvelocity_Value[0];
      proc_control_node_B.InitialBodyvelocity[1] =
        proc_control_node_P.InitialBodyvelocity_Value[1];
      proc_control_node_B.InitialBodyvelocity[2] =
        proc_control_node_P.InitialBodyvelocity_Value[2];
    }

    // Integrator: '<S1>/Integrator2'
    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_B.zcEvent = rt_ZCFcn(RISING_ZERO_CROSSING,
        &proc_control_node_PrevZCX.Integrator2_Reset_ZCE,
        (proc_control_node_B.MATLABSystem_o4));

      // evaluate zero-crossings
      if ((proc_control_node_B.zcEvent != NO_ZCEVENT) ||
          (proc_control_node_DW.Integrator2_IWORK != 0)) {
        proc_control_node_X.Integrator2_CSTATE[0] =
          proc_control_node_B.InitialBodyvelocity[0];
        proc_control_node_X.Integrator2_CSTATE[1] =
          proc_control_node_B.InitialBodyvelocity[1];
        proc_control_node_X.Integrator2_CSTATE[2] =
          proc_control_node_B.InitialBodyvelocity[2];
      }
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Constant: '<S1>/Initial Angular Rates'
      proc_control_node_B.InitialAngularRates[0] =
        proc_control_node_P.InitialAngularRates_Value[0];
      proc_control_node_B.InitialAngularRates[1] =
        proc_control_node_P.InitialAngularRates_Value[1];
      proc_control_node_B.InitialAngularRates[2] =
        proc_control_node_P.InitialAngularRates_Value[2];
    }

    // Integrator: '<S1>/Integrator3'
    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_B.zcEvent = rt_ZCFcn(RISING_ZERO_CROSSING,
        &proc_control_node_PrevZCX.Integrator3_Reset_ZCE,
        (proc_control_node_B.MATLABSystem_o4));

      // evaluate zero-crossings
      if ((proc_control_node_B.zcEvent != NO_ZCEVENT) ||
          (proc_control_node_DW.Integrator3_IWORK != 0)) {
        proc_control_node_X.Integrator3_CSTATE[0] =
          proc_control_node_B.InitialAngularRates[0];
        proc_control_node_X.Integrator3_CSTATE[1] =
          proc_control_node_B.InitialAngularRates[1];
        proc_control_node_X.Integrator3_CSTATE[2] =
          proc_control_node_B.InitialAngularRates[2];
      }
    }

    // SignalConversion generated from: '<S11>/ SFunction ' incorporates:
    //   Integrator: '<S1>/Integrator2'
    //   Integrator: '<S1>/Integrator3'
    //   MATLAB Function: '<S1>/AUV State Equation'

    proc_control_node_B.dv19[0] = proc_control_node_B.WorldPosition_d[0];
    proc_control_node_B.dv19[1] = proc_control_node_B.WorldPosition_d[1];
    proc_control_node_B.dv19[2] = proc_control_node_B.WorldPosition_d[2];
    proc_control_node_B.dv19[3] = proc_control_node_B.y_g[0];
    proc_control_node_B.dv19[4] = proc_control_node_B.y_g[1];
    proc_control_node_B.dv19[5] = proc_control_node_B.y_g[2];
    proc_control_node_B.dv19[6] = proc_control_node_B.y_g[3];
    proc_control_node_B.dv19[7] = proc_control_node_X.Integrator2_CSTATE[0];
    proc_control_node_B.dv19[10] = proc_control_node_X.Integrator3_CSTATE[0];
    proc_control_node_B.dv19[8] = proc_control_node_X.Integrator2_CSTATE[1];
    proc_control_node_B.dv19[11] = proc_control_node_X.Integrator3_CSTATE[1];
    proc_control_node_B.dv19[9] = proc_control_node_X.Integrator2_CSTATE[2];
    proc_control_node_B.dv19[12] = proc_control_node_X.Integrator3_CSTATE[2];

    // SignalConversion generated from: '<S11>/ SFunction ' incorporates:
    //   Constant: '<S14>/Z Drift'
    //   MATLAB Function: '<S1>/AUV State Equation'
    //   Product: '<S14>/Product1'
    //   Product: '<S14>/Product2'
    //   Sin: '<S14>/Pitch Wave'
    //   Sin: '<S14>/Roll Wave'
    //   Sin: '<S14>/X Wave'
    //   Sin: '<S14>/Y Wave'
    //   Sin: '<S14>/Yaw Wave'
    //   Sin: '<S14>/Z Wave'
    //   Sum: '<S14>/Sum2'

    proc_control_node_B.Gain_jb[0] = (sin(proc_control_node_P.wfX *
      proc_control_node_B.MATLABSystem_o6 + proc_control_node_P.wpX) *
      proc_control_node_P.waX + proc_control_node_P.XWave_Bias) *
      proc_control_node_B.MATLABSystem_o5 + proc_control_node_B.XDrift;
    proc_control_node_B.Gain_jb[1] = (sin(proc_control_node_P.wfY *
      proc_control_node_B.MATLABSystem_o6 + proc_control_node_P.wpY) *
      proc_control_node_P.waY + proc_control_node_P.YWave_Bias) *
      proc_control_node_B.MATLABSystem_o5 + proc_control_node_B.YDrift;
    proc_control_node_B.Gain_jb[2] = (sin(proc_control_node_P.wfZ *
      proc_control_node_B.MATLABSystem_o6 + proc_control_node_P.wpZ) *
      proc_control_node_P.waZ + proc_control_node_P.ZWave_Bias) *
      proc_control_node_B.MATLABSystem_o5 + proc_control_node_P.ZDrift_Value;
    proc_control_node_B.Gain_jb[3] = (sin(proc_control_node_P.wfPhi *
      proc_control_node_B.MATLABSystem_o6 + proc_control_node_P.wpPhi) *
      proc_control_node_P.waPhi + proc_control_node_P.RollWave_Bias) *
      proc_control_node_B.MATLABSystem_o5;
    proc_control_node_B.Gain_jb[4] = (sin(proc_control_node_P.wfTheta *
      proc_control_node_B.MATLABSystem_o6 + proc_control_node_P.wpTheta) *
      proc_control_node_P.waTheta + proc_control_node_P.PitchWave_Bias) *
      proc_control_node_B.MATLABSystem_o5;
    proc_control_node_B.Gain_jb[5] = (sin(proc_control_node_P.wfPsi *
      proc_control_node_B.MATLABSystem_o6 + proc_control_node_P.wpPsi) *
      proc_control_node_P.waPsi + proc_control_node_P.YawWave_Bias) *
      proc_control_node_B.MATLABSystem_o5;

    // SignalConversion generated from: '<S11>/ SFunction ' incorporates:
    //   MATLAB Function: '<S1>/AUV State Equation'
    //   TransferFcn: '<S17>/Transfer Fcn'
    //   TransferFcn: '<S18>/Transfer Fcn'
    //   TransferFcn: '<S19>/Transfer Fcn'
    //   TransferFcn: '<S20>/Transfer Fcn'
    //   TransferFcn: '<S21>/Transfer Fcn'
    //   TransferFcn: '<S22>/Transfer Fcn'
    //   TransferFcn: '<S23>/Transfer Fcn'
    //   TransferFcn: '<S24>/Transfer Fcn'

    proc_control_node_B.u[0] = proc_control_node_P.TransferFcn_C *
      proc_control_node_X.TransferFcn_CSTATE;
    proc_control_node_B.u[1] = proc_control_node_P.TransferFcn_C_m *
      proc_control_node_X.TransferFcn_CSTATE_o;
    proc_control_node_B.u[2] = proc_control_node_P.TransferFcn_C_l *
      proc_control_node_X.TransferFcn_CSTATE_p;
    proc_control_node_B.u[3] = proc_control_node_P.TransferFcn_C_f *
      proc_control_node_X.TransferFcn_CSTATE_a;
    proc_control_node_B.u[4] = proc_control_node_P.TransferFcn_C_n *
      proc_control_node_X.TransferFcn_CSTATE_f;
    proc_control_node_B.u[5] = proc_control_node_P.TransferFcn_C_nr *
      proc_control_node_X.TransferFcn_CSTATE_e;
    proc_control_node_B.u[6] = proc_control_node_P.TransferFcn_C_h *
      proc_control_node_X.TransferFcn_CSTATE_ft;
    proc_control_node_B.u[7] = proc_control_node_P.TransferFcn_C_fa *
      proc_control_node_X.TransferFcn_CSTATE_fu;

    // MATLAB Function: '<S1>/AUV State Equation'
    proc_con_AUVQuatPerturbedSimFcn(proc_control_node_B.dv19,
      proc_control_node_B.Gain_jb, proc_control_node_B.u,
      proc_control_node_B.TmpSignalConversionAtTran_a);
    proc_control_node_B.Position_dot[0] =
      proc_control_node_B.TmpSignalConversionAtTran_a[0];
    proc_control_node_B.Position_dot[1] =
      proc_control_node_B.TmpSignalConversionAtTran_a[1];
    proc_control_node_B.Position_dot[2] =
      proc_control_node_B.TmpSignalConversionAtTran_a[2];
    proc_control_node_B.Quaternion_dot[0] =
      proc_control_node_B.TmpSignalConversionAtTran_a[3];
    proc_control_node_B.Quaternion_dot[1] =
      proc_control_node_B.TmpSignalConversionAtTran_a[4];
    proc_control_node_B.Quaternion_dot[2] =
      proc_control_node_B.TmpSignalConversionAtTran_a[5];
    proc_control_node_B.Quaternion_dot[3] =
      proc_control_node_B.TmpSignalConversionAtTran_a[6];
    proc_control_node_B.BodyVelocity_dot[0] =
      proc_control_node_B.TmpSignalConversionAtTran_a[7];
    proc_control_node_B.AngularRates_dot[0] =
      proc_control_node_B.TmpSignalConversionAtTran_a[10];
    proc_control_node_B.BodyVelocity_dot[1] =
      proc_control_node_B.TmpSignalConversionAtTran_a[8];
    proc_control_node_B.AngularRates_dot[1] =
      proc_control_node_B.TmpSignalConversionAtTran_a[11];
    proc_control_node_B.BodyVelocity_dot[2] =
      proc_control_node_B.TmpSignalConversionAtTran_a[9];
    proc_control_node_B.AngularRates_dot[2] =
      proc_control_node_B.TmpSignalConversionAtTran_a[12];
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
      // MATLAB Function: '<S1>/MATLAB Function'
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 8;
           proc_control_node_B.ibmat++) {
        rtb_y_lp = proc_control_node_B.NtoPWM[proc_control_node_B.ibmat];
        if (rtb_y_lp < 1100) {
          rtb_y_lp = 1500U;
        } else if (rtb_y_lp > 1900) {
          rtb_y_lp = 1500U;
        }

        proc_control_node_B.y_f_i[proc_control_node_B.ibmat] = rtb_y_lp;
      }

      // End of MATLAB Function: '<S1>/MATLAB Function'

      // Lookup_n-D: '<S13>/ PWM to N'
      for (proc_control_node_B.k_b = 0; proc_control_node_B.k_b < 8;
           proc_control_node_B.k_b++) {
        proc_control_node_B.bpIdx = plook_u32u16_binckpan
          (proc_control_node_B.y_f_i[proc_control_node_B.k_b],
           proc_control_node_P.PWM, 200U,
           &proc_control_node_DW.m_bpIndex_m[proc_control_node_B.k_b]);
        proc_control_node_B.PWMtoN[proc_control_node_B.k_b] =
          proc_control_node_P.N[proc_control_node_B.bpIdx];
      }
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
      // Gain: '<S25>/Output' incorporates:
      //   RandomNumber: '<S25>/White Noise'

      proc_control_node_B.Output = sqrt
        (proc_control_node_P.BandLimitedWhiteNoise_Cov) / 0.22360679774997896 *
        proc_control_node_DW.NextOutput;

      // Gain: '<S26>/Output' incorporates:
      //   RandomNumber: '<S26>/White Noise'

      proc_control_node_B.Output_i = sqrt
        (proc_control_node_P.BandLimitedWhiteNoise1_Cov) / 0.22360679774997896 *
        proc_control_node_DW.NextOutput_b;
    }

    // Product: '<S33>/Product' incorporates:
    //   Product: '<S39>/Product'

    proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.y_g[0] *
      proc_control_node_B.y_g[0];

    // Sum: '<S33>/Sum' incorporates:
    //   Product: '<S33>/Product'
    //   Product: '<S33>/Product1'
    //   Product: '<S33>/Product2'
    //   Product: '<S33>/Product3'
    //   UnaryMinus: '<S28>/Unary Minus'
    //   UnaryMinus: '<S28>/Unary Minus1'
    //   UnaryMinus: '<S28>/Unary Minus2'

    proc_control_node_B.epsilon = ((proc_control_node_B.MATLABSystem_o5 +
      -proc_control_node_B.y_g[1] * -proc_control_node_B.y_g[1]) +
      -proc_control_node_B.y_g[2] * -proc_control_node_B.y_g[2]) +
      -proc_control_node_B.y_g[3] * -proc_control_node_B.y_g[3];

    // Product: '<S27>/Divide'
    proc_control_node_B.Divide1_n = proc_control_node_B.y_g[0] /
      proc_control_node_B.epsilon;

    // Product: '<S27>/Divide1' incorporates:
    //   UnaryMinus: '<S28>/Unary Minus'

    proc_control_node_B.Divide2_h = proc_control_node_B.y_g[1] /
      proc_control_node_B.epsilon;

    // Product: '<S27>/Divide2' incorporates:
    //   UnaryMinus: '<S28>/Unary Minus1'

    proc_control_node_B.Product8_a = proc_control_node_B.y_g[2] /
      proc_control_node_B.epsilon;

    // Product: '<S27>/Divide3' incorporates:
    //   UnaryMinus: '<S28>/Unary Minus2'

    proc_control_node_B.epsilon = proc_control_node_B.y_g[3] /
      proc_control_node_B.epsilon;

    // Sqrt: '<S38>/sqrt' incorporates:
    //   Product: '<S39>/Product1'
    //   Product: '<S39>/Product2'
    //   Product: '<S39>/Product3'
    //   Sum: '<S39>/Sum'

    proc_control_node_B.MATLABSystem_o5 = sqrt
      (((proc_control_node_B.MATLABSystem_o5 + proc_control_node_B.y_g[1] *
         proc_control_node_B.y_g[1]) + proc_control_node_B.y_g[2] *
        proc_control_node_B.y_g[2]) + proc_control_node_B.y_g[3] *
       proc_control_node_B.y_g[3]);

    // Product: '<S34>/Product'
    proc_control_node_B.t13 = proc_control_node_B.y_g[0] /
      proc_control_node_B.MATLABSystem_o5;

    // Product: '<S34>/Product1'
    proc_control_node_B.scale = proc_control_node_B.y_g[1] /
      proc_control_node_B.MATLABSystem_o5;

    // Product: '<S34>/Product2'
    proc_control_node_B.Product1_j5 = proc_control_node_B.y_g[2] /
      proc_control_node_B.MATLABSystem_o5;

    // Product: '<S34>/Product3'
    proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.y_g[3] /
      proc_control_node_B.MATLABSystem_o5;
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Gain: '<S31>/1//2' incorporates:
      //   Constant: '<S16>/ y devant Z haut'

      proc_control_node_B.t12 = proc_control_node_P.u2_Gain *
        proc_control_node_P.ydevantZhaut_Value[0];

      // Trigonometry: '<S31>/sincos'
      proc_control_node_B.rtb_sincos_o2_p_idx_0 = sin(proc_control_node_B.t12);
      proc_control_node_B.t11 = cos(proc_control_node_B.t12);

      // Gain: '<S31>/1//2' incorporates:
      //   Constant: '<S16>/ y devant Z haut'

      proc_control_node_B.t12 = proc_control_node_P.u2_Gain *
        proc_control_node_P.ydevantZhaut_Value[1];

      // Trigonometry: '<S31>/sincos'
      proc_control_node_B.Product1_j5_n = sin(proc_control_node_B.t12);
      proc_control_node_B.rtb_sincos_o1_e_idx_1 = cos(proc_control_node_B.t12);

      // Gain: '<S31>/1//2' incorporates:
      //   Constant: '<S16>/ y devant Z haut'

      proc_control_node_B.t12 = proc_control_node_P.u2_Gain *
        proc_control_node_P.ydevantZhaut_Value[2];

      // Trigonometry: '<S31>/sincos'
      proc_control_node_B.rtb_sincos_o2_p_idx_2 = sin(proc_control_node_B.t12);
      proc_control_node_B.MATLABSystem_o6 = cos(proc_control_node_B.t12);

      // Fcn: '<S31>/q0' incorporates:
      //   Fcn: '<S31>/q3'

      proc_control_node_B.t12 = proc_control_node_B.t11 *
        proc_control_node_B.rtb_sincos_o1_e_idx_1;
      proc_control_node_B.SensorOn = proc_control_node_B.rtb_sincos_o2_p_idx_0 *
        proc_control_node_B.Product1_j5_n;
      proc_control_node_B.Product1_lr = proc_control_node_B.t12 *
        proc_control_node_B.MATLABSystem_o6 - proc_control_node_B.SensorOn *
        proc_control_node_B.rtb_sincos_o2_p_idx_2;

      // Fcn: '<S31>/q1' incorporates:
      //   Fcn: '<S31>/q2'

      proc_control_node_B.t11 *= proc_control_node_B.Product1_j5_n;
      proc_control_node_B.rtb_sincos_o2_p_idx_0 *=
        proc_control_node_B.rtb_sincos_o1_e_idx_1;
      proc_control_node_B.rtb_sincos_o1_e_idx_1 = proc_control_node_B.t11 *
        proc_control_node_B.rtb_sincos_o2_p_idx_2 +
        proc_control_node_B.rtb_sincos_o2_p_idx_0 *
        proc_control_node_B.MATLABSystem_o6;

      // Fcn: '<S31>/q2'
      proc_control_node_B.rtb_sincos_o2_p_idx_0 = proc_control_node_B.t11 *
        proc_control_node_B.MATLABSystem_o6 -
        proc_control_node_B.rtb_sincos_o2_p_idx_0 *
        proc_control_node_B.rtb_sincos_o2_p_idx_2;

      // Fcn: '<S31>/q3'
      proc_control_node_B.rtb_sincos_o2_p_idx_2 = proc_control_node_B.t12 *
        proc_control_node_B.rtb_sincos_o2_p_idx_2 + proc_control_node_B.SensorOn
        * proc_control_node_B.MATLABSystem_o6;

      // Sqrt: '<S44>/sqrt' incorporates:
      //   Product: '<S45>/Product'
      //   Product: '<S45>/Product1'
      //   Product: '<S45>/Product2'
      //   Product: '<S45>/Product3'
      //   Sum: '<S45>/Sum'

      proc_control_node_B.MATLABSystem_o6 = sqrt
        (((proc_control_node_B.Product1_lr * proc_control_node_B.Product1_lr +
           proc_control_node_B.rtb_sincos_o1_e_idx_1 *
           proc_control_node_B.rtb_sincos_o1_e_idx_1) +
          proc_control_node_B.rtb_sincos_o2_p_idx_0 *
          proc_control_node_B.rtb_sincos_o2_p_idx_0) +
         proc_control_node_B.rtb_sincos_o2_p_idx_2 *
         proc_control_node_B.rtb_sincos_o2_p_idx_2);

      // Product: '<S40>/Product'
      proc_control_node_B.Product1_lr /= proc_control_node_B.MATLABSystem_o6;

      // Product: '<S40>/Product1'
      proc_control_node_B.rtb_sincos_o1_e_idx_1 /=
        proc_control_node_B.MATLABSystem_o6;

      // Product: '<S40>/Product2'
      proc_control_node_B.rtb_sincos_o2_p_idx_0 /=
        proc_control_node_B.MATLABSystem_o6;

      // Product: '<S40>/Product3'
      proc_control_node_B.rtb_sincos_o2_p_idx_2 /=
        proc_control_node_B.MATLABSystem_o6;

      // Product: '<S41>/Product' incorporates:
      //   Product: '<S42>/Product'

      proc_control_node_B.MATLABSystem_o6 =
        proc_control_node_B.rtb_sincos_o1_e_idx_1 *
        proc_control_node_B.rtb_sincos_o2_p_idx_0;

      // Product: '<S41>/Product1' incorporates:
      //   Product: '<S42>/Product1'

      proc_control_node_B.t11 = proc_control_node_B.Product1_lr *
        proc_control_node_B.rtb_sincos_o2_p_idx_2;

      // Gain: '<S41>/Gain' incorporates:
      //   Product: '<S41>/Product'
      //   Product: '<S41>/Product1'
      //   Sum: '<S41>/Sum1'

      proc_control_node_B.Gain_c = (proc_control_node_B.MATLABSystem_o6 +
        proc_control_node_B.t11) * proc_control_node_P.Gain_Gain_j;

      // Gain: '<S41>/Gain1' incorporates:
      //   Product: '<S41>/Product2'
      //   Product: '<S41>/Product3'
      //   Sum: '<S41>/Sum2'

      proc_control_node_B.Gain1_cn = (proc_control_node_B.rtb_sincos_o1_e_idx_1 *
        proc_control_node_B.rtb_sincos_o2_p_idx_2 -
        proc_control_node_B.Product1_lr *
        proc_control_node_B.rtb_sincos_o2_p_idx_0) *
        proc_control_node_P.Gain1_Gain_e;

      // Product: '<S41>/Product7' incorporates:
      //   Product: '<S42>/Product7'

      proc_control_node_B.absxk = proc_control_node_B.rtb_sincos_o2_p_idx_2 *
        proc_control_node_B.rtb_sincos_o2_p_idx_2;

      // Gain: '<S41>/Gain2' incorporates:
      //   Constant: '<S41>/Constant'
      //   Product: '<S41>/Product6'
      //   Product: '<S41>/Product7'
      //   Sum: '<S41>/Sum3'

      proc_control_node_B.Gain2_k0 = ((proc_control_node_P.Constant_Value_k2 -
        proc_control_node_B.rtb_sincos_o2_p_idx_0 *
        proc_control_node_B.rtb_sincos_o2_p_idx_0) - proc_control_node_B.absxk) *
        proc_control_node_P.Gain2_Gain_d;

      // Gain: '<S42>/Gain' incorporates:
      //   Sum: '<S42>/Sum1'

      proc_control_node_B.Gain_cr = (proc_control_node_B.MATLABSystem_o6 -
        proc_control_node_B.t11) * proc_control_node_P.Gain_Gain_e;

      // Gain: '<S42>/Gain1' incorporates:
      //   Product: '<S42>/Product2'
      //   Product: '<S42>/Product3'
      //   Sum: '<S42>/Sum2'

      proc_control_node_B.Gain1_d2 = (proc_control_node_B.Product1_lr *
        proc_control_node_B.rtb_sincos_o1_e_idx_1 +
        proc_control_node_B.rtb_sincos_o2_p_idx_0 *
        proc_control_node_B.rtb_sincos_o2_p_idx_2) *
        proc_control_node_P.Gain1_Gain_eg;

      // Gain: '<S42>/Gain2' incorporates:
      //   Constant: '<S42>/Constant'
      //   Product: '<S42>/Product6'
      //   Sum: '<S42>/Sum3'

      proc_control_node_B.Gain2_n = ((proc_control_node_P.Constant_Value_gp -
        proc_control_node_B.rtb_sincos_o1_e_idx_1 *
        proc_control_node_B.rtb_sincos_o1_e_idx_1) - proc_control_node_B.absxk) *
        proc_control_node_P.Gain2_Gain_l;
    }

    // Sum: '<S41>/Sum' incorporates:
    //   Integrator: '<S1>/Integrator2'
    //   Product: '<S41>/Product4'
    //   Product: '<S41>/Product5'
    //   Product: '<S41>/Product8'

    proc_control_node_B.Sum_d = (proc_control_node_X.Integrator2_CSTATE[0] *
      proc_control_node_B.Gain2_k0 + proc_control_node_B.Gain_c *
      proc_control_node_X.Integrator2_CSTATE[1]) + proc_control_node_B.Gain1_cn *
      proc_control_node_X.Integrator2_CSTATE[2];

    // Sum: '<S42>/Sum' incorporates:
    //   Integrator: '<S1>/Integrator2'
    //   Product: '<S42>/Product4'
    //   Product: '<S42>/Product5'
    //   Product: '<S42>/Product8'

    proc_control_node_B.Sum_il = (proc_control_node_X.Integrator2_CSTATE[0] *
      proc_control_node_B.Gain_cr + proc_control_node_B.Gain2_n *
      proc_control_node_X.Integrator2_CSTATE[1]) + proc_control_node_B.Gain1_d2 *
      proc_control_node_X.Integrator2_CSTATE[2];
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Gain: '<S43>/Gain' incorporates:
      //   Product: '<S43>/Product'
      //   Product: '<S43>/Product1'
      //   Sum: '<S43>/Sum1'

      proc_control_node_B.Gain_l = (proc_control_node_B.rtb_sincos_o1_e_idx_1 *
        proc_control_node_B.rtb_sincos_o2_p_idx_2 +
        proc_control_node_B.Product1_lr *
        proc_control_node_B.rtb_sincos_o2_p_idx_0) *
        proc_control_node_P.Gain_Gain_m;

      // Gain: '<S43>/Gain1' incorporates:
      //   Product: '<S43>/Product2'
      //   Product: '<S43>/Product3'
      //   Sum: '<S43>/Sum2'

      proc_control_node_B.Gain1_o = (proc_control_node_B.rtb_sincos_o2_p_idx_0 *
        proc_control_node_B.rtb_sincos_o2_p_idx_2 -
        proc_control_node_B.Product1_lr *
        proc_control_node_B.rtb_sincos_o1_e_idx_1) *
        proc_control_node_P.Gain1_Gain_g;

      // Gain: '<S43>/Gain2' incorporates:
      //   Constant: '<S43>/Constant'
      //   Product: '<S43>/Product6'
      //   Product: '<S43>/Product7'
      //   Sum: '<S43>/Sum3'

      proc_control_node_B.Gain2_i = ((proc_control_node_P.Constant_Value_iw -
        proc_control_node_B.rtb_sincos_o1_e_idx_1 *
        proc_control_node_B.rtb_sincos_o1_e_idx_1) -
        proc_control_node_B.rtb_sincos_o2_p_idx_0 *
        proc_control_node_B.rtb_sincos_o2_p_idx_0) *
        proc_control_node_P.Gain2_Gain_b;
    }

    // Sum: '<S43>/Sum' incorporates:
    //   Integrator: '<S1>/Integrator2'
    //   Product: '<S43>/Product4'
    //   Product: '<S43>/Product5'
    //   Product: '<S43>/Product8'

    proc_control_node_B.Sum_pr = (proc_control_node_X.Integrator2_CSTATE[0] *
      proc_control_node_B.Gain_l + proc_control_node_B.Gain1_o *
      proc_control_node_X.Integrator2_CSTATE[1]) + proc_control_node_B.Gain2_i *
      proc_control_node_X.Integrator2_CSTATE[2];

    // Sum: '<S16>/Sum' incorporates:
    //   Constant: '<S16>/Constant'
    //   Constant: '<S37>/Constant'
    //   Gain: '<S37>/Gain'
    //   Gain: '<S37>/Gain1'
    //   Gain: '<S37>/Gain2'
    //   Product: '<S37>/Product'
    //   Product: '<S37>/Product1'
    //   Product: '<S37>/Product2'
    //   Product: '<S37>/Product3'
    //   Product: '<S37>/Product4'
    //   Product: '<S37>/Product5'
    //   Product: '<S37>/Product6'
    //   Product: '<S37>/Product7'
    //   Product: '<S37>/Product8'
    //   Sum: '<S37>/Sum'
    //   Sum: '<S37>/Sum1'
    //   Sum: '<S37>/Sum2'
    //   Sum: '<S37>/Sum3'

    proc_control_node_B.PressureDepth = (((proc_control_node_B.scale *
      proc_control_node_B.MATLABSystem_o5 + proc_control_node_B.t13 *
      proc_control_node_B.Product1_j5) * proc_control_node_P.Gain_Gain *
      proc_control_node_P.physics.DepthPose[0] +
      (proc_control_node_B.Product1_j5 * proc_control_node_B.MATLABSystem_o5 -
       proc_control_node_B.t13 * proc_control_node_B.scale) *
      proc_control_node_P.Gain1_Gain * proc_control_node_P.physics.DepthPose[1])
      + ((proc_control_node_P.Constant_Value_mj - proc_control_node_B.scale *
          proc_control_node_B.scale) - proc_control_node_B.Product1_j5 *
         proc_control_node_B.Product1_j5) * proc_control_node_P.Gain2_Gain *
      proc_control_node_P.physics.DepthPose[2]) +
      proc_control_node_B.WorldPosition_d[2];

    // Sum: '<S16>/Sum1'
    proc_control_node_B.Quaternion[0] = proc_control_node_B.Output +
      proc_control_node_B.Divide1_n;
    proc_control_node_B.Quaternion[1] = proc_control_node_B.Output +
      proc_control_node_B.Divide2_h;
    proc_control_node_B.Quaternion[2] = proc_control_node_B.Output +
      proc_control_node_B.Product8_a;
    proc_control_node_B.Quaternion[3] = proc_control_node_B.Output +
      proc_control_node_B.epsilon;

    // Sum: '<S16>/Sum3' incorporates:
    //   Integrator: '<S1>/Integrator3'

    proc_control_node_B.AngularRate_d[0] = proc_control_node_B.Output_i +
      proc_control_node_X.Integrator3_CSTATE[0];
    proc_control_node_B.AngularRate_d[1] = proc_control_node_B.Output_i +
      proc_control_node_X.Integrator3_CSTATE[1];
    proc_control_node_B.AngularRate_d[2] = proc_control_node_B.Output_i +
      proc_control_node_X.Integrator3_CSTATE[2];
  }

  // End of Outputs for SubSystem: '<Root>/Modèle Physique'

  // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
  //   EnablePort: '<S4>/Enable'

  if ((rtmIsMajorTimeStep((&proc_control_node_M)) &&
       (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) &&
      rtmIsMajorTimeStep((&proc_control_node_M))) {
    proc_control_node_DW.ROSOutput_MODE = (proc_control_node_B.MATLABSystem_o3 >
      0.0);
  }

  if (proc_control_node_DW.ROSOutput_MODE) {
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Gain: '<S86>/1//2' incorporates:
      //   Constant: '<S70>/ENU 2 NED'

      proc_control_node_B.t12 = proc_control_node_P.u2_Gain_g *
        proc_control_node_P.ENU2NED_Value[0];

      // Trigonometry: '<S86>/sincos'
      proc_control_node_B.t11 = sin(proc_control_node_B.t12);
      proc_control_node_B.rtb_sincos_o2_p_idx_0 = cos(proc_control_node_B.t12);

      // Gain: '<S86>/1//2' incorporates:
      //   Constant: '<S70>/ENU 2 NED'

      proc_control_node_B.t12 = proc_control_node_P.u2_Gain_g *
        proc_control_node_P.ENU2NED_Value[1];

      // Trigonometry: '<S86>/sincos'
      proc_control_node_B.rtb_sincos_o1_e_idx_1 = sin(proc_control_node_B.t12);
      proc_control_node_B.Product1_j5_n = cos(proc_control_node_B.t12);

      // Gain: '<S86>/1//2' incorporates:
      //   Constant: '<S70>/ENU 2 NED'

      proc_control_node_B.t12 = proc_control_node_P.u2_Gain_g *
        proc_control_node_P.ENU2NED_Value[2];

      // Trigonometry: '<S86>/sincos'
      proc_control_node_B.MATLABSystem_o6 = sin(proc_control_node_B.t12);
      proc_control_node_B.rtb_sincos_o2_p_idx_2 = cos(proc_control_node_B.t12);

      // Fcn: '<S86>/q2' incorporates:
      //   Fcn: '<S86>/q1'

      proc_control_node_B.Product1_lr =
        proc_control_node_B.rtb_sincos_o2_p_idx_0 *
        proc_control_node_B.rtb_sincos_o1_e_idx_1;
      proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.t11 *
        proc_control_node_B.Product1_j5_n;

      // Fcn: '<S86>/q2'
      proc_control_node_B.q2_l = proc_control_node_B.Product1_lr *
        proc_control_node_B.rtb_sincos_o2_p_idx_2 -
        proc_control_node_B.MATLABSystem_o5 *
        proc_control_node_B.MATLABSystem_o6;

      // Fcn: '<S86>/q0' incorporates:
      //   Fcn: '<S86>/q3'

      proc_control_node_B.rtb_sincos_o2_p_idx_0 *=
        proc_control_node_B.Product1_j5_n;
      proc_control_node_B.rtb_sincos_o1_e_idx_1 *= proc_control_node_B.t11;

      // Fcn: '<S86>/q0'
      proc_control_node_B.q0_j = proc_control_node_B.rtb_sincos_o2_p_idx_0 *
        proc_control_node_B.rtb_sincos_o2_p_idx_2 -
        proc_control_node_B.rtb_sincos_o1_e_idx_1 *
        proc_control_node_B.MATLABSystem_o6;

      // Fcn: '<S86>/q1'
      proc_control_node_B.q1_g = proc_control_node_B.Product1_lr *
        proc_control_node_B.MATLABSystem_o6 +
        proc_control_node_B.MATLABSystem_o5 *
        proc_control_node_B.rtb_sincos_o2_p_idx_2;

      // Fcn: '<S86>/q3'
      proc_control_node_B.q3_h = proc_control_node_B.rtb_sincos_o2_p_idx_0 *
        proc_control_node_B.MATLABSystem_o6 +
        proc_control_node_B.rtb_sincos_o1_e_idx_1 *
        proc_control_node_B.rtb_sincos_o2_p_idx_2;

      // Sqrt: '<S97>/sqrt' incorporates:
      //   Product: '<S98>/Product'
      //   Product: '<S98>/Product1'
      //   Product: '<S98>/Product2'
      //   Product: '<S98>/Product3'
      //   Sum: '<S98>/Sum'

      proc_control_node_B.rtb_sincos_o2_p_idx_2 = sqrt
        (((proc_control_node_B.q0_j * proc_control_node_B.q0_j +
           proc_control_node_B.q1_g * proc_control_node_B.q1_g) +
          proc_control_node_B.q2_l * proc_control_node_B.q2_l) +
         proc_control_node_B.q3_h * proc_control_node_B.q3_h);

      // Product: '<S93>/Product2'
      proc_control_node_B.rtb_sincos_o2_p_idx_0 = proc_control_node_B.q2_l /
        proc_control_node_B.rtb_sincos_o2_p_idx_2;

      // Product: '<S93>/Product3'
      proc_control_node_B.rtb_sincos_o1_e_idx_1 = proc_control_node_B.q3_h /
        proc_control_node_B.rtb_sincos_o2_p_idx_2;

      // Product: '<S94>/Product7' incorporates:
      //   Product: '<S95>/Product7'

      proc_control_node_B.Divide1_n = proc_control_node_B.rtb_sincos_o1_e_idx_1 *
        proc_control_node_B.rtb_sincos_o1_e_idx_1;

      // Product: '<S94>/Product6' incorporates:
      //   Product: '<S96>/Product7'

      proc_control_node_B.MATLABSystem_o5 =
        proc_control_node_B.rtb_sincos_o2_p_idx_0 *
        proc_control_node_B.rtb_sincos_o2_p_idx_0;

      // Gain: '<S94>/Gain2' incorporates:
      //   Constant: '<S94>/Constant'
      //   Product: '<S94>/Product6'
      //   Product: '<S94>/Product7'
      //   Sum: '<S94>/Sum3'

      proc_control_node_B.Gain2 = ((proc_control_node_P.Constant_Value_p -
        proc_control_node_B.MATLABSystem_o5) - proc_control_node_B.Divide1_n) *
        proc_control_node_P.Gain2_Gain_a;

      // Product: '<S93>/Product1'
      proc_control_node_B.Product1_lr = proc_control_node_B.q1_g /
        proc_control_node_B.rtb_sincos_o2_p_idx_2;

      // Product: '<S93>/Product'
      proc_control_node_B.rtb_sincos_o2_p_idx_2 = proc_control_node_B.q0_j /
        proc_control_node_B.rtb_sincos_o2_p_idx_2;

      // Product: '<S94>/Product' incorporates:
      //   Product: '<S95>/Product'

      proc_control_node_B.Divide2_h = proc_control_node_B.Product1_lr *
        proc_control_node_B.rtb_sincos_o2_p_idx_0;

      // Product: '<S94>/Product1' incorporates:
      //   Product: '<S95>/Product1'

      proc_control_node_B.Product8_a = proc_control_node_B.rtb_sincos_o2_p_idx_2
        * proc_control_node_B.rtb_sincos_o1_e_idx_1;

      // Gain: '<S94>/Gain' incorporates:
      //   Product: '<S94>/Product'
      //   Product: '<S94>/Product1'
      //   Sum: '<S94>/Sum1'

      proc_control_node_B.Gain = (proc_control_node_B.Divide2_h +
        proc_control_node_B.Product8_a) * proc_control_node_P.Gain_Gain_l;

      // Product: '<S94>/Product3' incorporates:
      //   Product: '<S96>/Product'

      proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.Product1_lr *
        proc_control_node_B.rtb_sincos_o1_e_idx_1;

      // Product: '<S94>/Product2' incorporates:
      //   Product: '<S96>/Product1'

      proc_control_node_B.epsilon = proc_control_node_B.rtb_sincos_o2_p_idx_2 *
        proc_control_node_B.rtb_sincos_o2_p_idx_0;

      // Gain: '<S94>/Gain1' incorporates:
      //   Product: '<S94>/Product2'
      //   Product: '<S94>/Product3'
      //   Sum: '<S94>/Sum2'

      proc_control_node_B.Gain1 = (proc_control_node_B.MATLABSystem_o6 -
        proc_control_node_B.epsilon) * proc_control_node_P.Gain1_Gain_c;

      // Gain: '<S95>/Gain' incorporates:
      //   Sum: '<S95>/Sum1'

      proc_control_node_B.Gain_j = (proc_control_node_B.Divide2_h -
        proc_control_node_B.Product8_a) * proc_control_node_P.Gain_Gain_d;

      // Product: '<S95>/Product6' incorporates:
      //   Product: '<S96>/Product6'

      proc_control_node_B.Divide2_h = proc_control_node_B.Product1_lr *
        proc_control_node_B.Product1_lr;

      // Gain: '<S95>/Gain2' incorporates:
      //   Constant: '<S95>/Constant'
      //   Product: '<S95>/Product6'
      //   Sum: '<S95>/Sum3'

      proc_control_node_B.Gain2_d = ((proc_control_node_P.Constant_Value_fk -
        proc_control_node_B.Divide2_h) - proc_control_node_B.Divide1_n) *
        proc_control_node_P.Gain2_Gain_i;

      // Product: '<S95>/Product3' incorporates:
      //   Product: '<S96>/Product3'

      proc_control_node_B.rtb_sincos_o1_e_idx_1 *=
        proc_control_node_B.rtb_sincos_o2_p_idx_0;

      // Product: '<S95>/Product2' incorporates:
      //   Product: '<S96>/Product2'

      proc_control_node_B.Product1_lr *=
        proc_control_node_B.rtb_sincos_o2_p_idx_2;

      // Gain: '<S95>/Gain1' incorporates:
      //   Product: '<S95>/Product2'
      //   Product: '<S95>/Product3'
      //   Sum: '<S95>/Sum2'

      proc_control_node_B.Gain1_d = (proc_control_node_B.Product1_lr +
        proc_control_node_B.rtb_sincos_o1_e_idx_1) *
        proc_control_node_P.Gain1_Gain_h;

      // Gain: '<S96>/Gain' incorporates:
      //   Sum: '<S96>/Sum1'

      proc_control_node_B.Gain_f = (proc_control_node_B.MATLABSystem_o6 +
        proc_control_node_B.epsilon) * proc_control_node_P.Gain_Gain_f;

      // Gain: '<S96>/Gain1' incorporates:
      //   Sum: '<S96>/Sum2'

      proc_control_node_B.Gain1_c = (proc_control_node_B.rtb_sincos_o1_e_idx_1 -
        proc_control_node_B.Product1_lr) * proc_control_node_P.Gain1_Gain_m;

      // Gain: '<S96>/Gain2' incorporates:
      //   Constant: '<S96>/Constant'
      //   Sum: '<S96>/Sum3'

      proc_control_node_B.Gain2_k = ((proc_control_node_P.Constant_Value_ek -
        proc_control_node_B.Divide2_h) - proc_control_node_B.MATLABSystem_o5) *
        proc_control_node_P.Gain2_Gain_db;
    }

    // Sum: '<S88>/Sum' incorporates:
    //   Product: '<S88>/Product'
    //   Product: '<S88>/Product1'
    //   Product: '<S88>/Product2'
    //   Product: '<S88>/Product3'

    proc_control_node_B.Product8_a = ((proc_control_node_B.y_g[0] *
      proc_control_node_B.y_g[0] + proc_control_node_B.y_g[1] *
      proc_control_node_B.y_g[1]) + proc_control_node_B.y_g[2] *
      proc_control_node_B.y_g[2]) + proc_control_node_B.y_g[3] *
      proc_control_node_B.y_g[3];

    // Product: '<S83>/Divide'
    proc_control_node_B.Divide2_h = proc_control_node_B.y_g[0] /
      proc_control_node_B.Product8_a;

    // Product: '<S83>/Divide1' incorporates:
    //   UnaryMinus: '<S87>/Unary Minus'

    proc_control_node_B.MATLABSystem_o5 = -proc_control_node_B.y_g[1] /
      proc_control_node_B.Product8_a;

    // Product: '<S83>/Divide2' incorporates:
    //   UnaryMinus: '<S87>/Unary Minus1'

    proc_control_node_B.Divide1_n = -proc_control_node_B.y_g[2] /
      proc_control_node_B.Product8_a;

    // Product: '<S83>/Divide3' incorporates:
    //   UnaryMinus: '<S87>/Unary Minus2'

    proc_control_node_B.epsilon = -proc_control_node_B.y_g[3] /
      proc_control_node_B.Product8_a;
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // MATLAB Function: '<S70>/MATLAB Function' incorporates:
      //   Constant: '<S70>/ '
      //   Constant: '<S70>/  '
      //   Constant: '<S70>/Constant'
      //   Constant: '<S80>/Constant'
      //   Product: '<S89>/Product'
      //   Product: '<S89>/Product1'
      //   Product: '<S89>/Product2'
      //   Product: '<S89>/Product3'
      //   Product: '<S90>/Product'
      //   Product: '<S90>/Product1'
      //   Product: '<S90>/Product2'
      //   Product: '<S90>/Product3'
      //   Product: '<S91>/Product'
      //   Product: '<S91>/Product1'
      //   Product: '<S91>/Product2'
      //   Product: '<S91>/Product3'
      //   Product: '<S92>/Product'
      //   Product: '<S92>/Product1'
      //   Product: '<S92>/Product2'
      //   Product: '<S92>/Product3'
      //   Product: '<S94>/Product4'
      //   Product: '<S94>/Product5'
      //   Product: '<S94>/Product8'
      //   Product: '<S95>/Product4'
      //   Product: '<S95>/Product5'
      //   Product: '<S95>/Product8'
      //   Product: '<S96>/Product4'
      //   Product: '<S96>/Product5'
      //   Product: '<S96>/Product8'
      //   Sum: '<S70>/Sum'
      //   Sum: '<S89>/Sum'
      //   Sum: '<S90>/Sum'
      //   Sum: '<S91>/Sum'
      //   Sum: '<S92>/Sum'
      //   Sum: '<S94>/Sum'
      //   Sum: '<S95>/Sum'
      //   Sum: '<S96>/Sum'

      proc_control_node_B.msg_c = proc_control_node_P.Constant_Value_o;
      proc_control_node_B.msg_c.ModelName[0] =
        proc_control_node_P.simulation.model_name[0];
      proc_control_node_B.msg_c.ModelName[1] =
        proc_control_node_P.simulation.model_name[1];
      proc_control_node_B.msg_c.ModelName[2] =
        proc_control_node_P.simulation.model_name[2];
      proc_control_node_B.msg_c.ModelName[3] =
        proc_control_node_P.simulation.model_name[3];
      proc_control_node_B.msg_c.ModelName_SL_Info.CurrentLength = 4U;
      for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 5;
           proc_control_node_B.i_n++) {
        proc_control_node_B.msg_c.ReferenceFrame[proc_control_node_B.i_n] =
          proc_control_node_P.simulation.reference_frame[proc_control_node_B.i_n];
      }

      proc_control_node_B.msg_c.ReferenceFrame_SL_Info.CurrentLength = 5U;
      proc_control_node_B.msg_c.Pose.Position.X =
        (proc_control_node_B.WorldPosition_d[0] * proc_control_node_B.Gain2 +
         proc_control_node_B.Gain * proc_control_node_B.WorldPosition_d[1]) +
        proc_control_node_B.Gain1 * proc_control_node_B.WorldPosition_d[2];
      proc_control_node_B.msg_c.Pose.Position.Y =
        (proc_control_node_B.WorldPosition_d[0] * proc_control_node_B.Gain_j +
         proc_control_node_B.Gain2_d * proc_control_node_B.WorldPosition_d[1]) +
        proc_control_node_B.Gain1_d * proc_control_node_B.WorldPosition_d[2];
      proc_control_node_B.msg_c.Pose.Position.Z =
        ((proc_control_node_B.WorldPosition_d[0] * proc_control_node_B.Gain_f +
          proc_control_node_B.Gain1_c * proc_control_node_B.WorldPosition_d[1])
         + proc_control_node_B.Gain2_k * proc_control_node_B.WorldPosition_d[2])
        + proc_control_node_P.physics.dvlCenterDist;
      proc_control_node_B.msg_c.Pose.Orientation.X =
        ((proc_control_node_B.Divide2_h * proc_control_node_B.q1_g +
          proc_control_node_B.MATLABSystem_o5 * proc_control_node_B.q0_j) +
         proc_control_node_B.Divide1_n * proc_control_node_B.q3_h) -
        proc_control_node_B.epsilon * proc_control_node_B.q2_l;
      proc_control_node_B.msg_c.Pose.Orientation.Y =
        ((proc_control_node_B.Divide2_h * proc_control_node_B.q2_l -
          proc_control_node_B.MATLABSystem_o5 * proc_control_node_B.q3_h) +
         proc_control_node_B.Divide1_n * proc_control_node_B.q0_j) +
        proc_control_node_B.epsilon * proc_control_node_B.q1_g;
      proc_control_node_B.msg_c.Pose.Orientation.Z =
        ((proc_control_node_B.Divide2_h * proc_control_node_B.q3_h +
          proc_control_node_B.MATLABSystem_o5 * proc_control_node_B.q2_l) -
         proc_control_node_B.Divide1_n * proc_control_node_B.q1_g) +
        proc_control_node_B.epsilon * proc_control_node_B.q0_j;
      proc_control_node_B.msg_c.Pose.Orientation.W =
        ((proc_control_node_B.Divide2_h * proc_control_node_B.q0_j -
          proc_control_node_B.MATLABSystem_o5 * proc_control_node_B.q1_g) -
         proc_control_node_B.Divide1_n * proc_control_node_B.q2_l) -
        proc_control_node_B.epsilon * proc_control_node_B.q3_h;

      // End of MATLAB Function: '<S70>/MATLAB Function'

      // Outputs for Atomic SubSystem: '<S70>/Publish'
      // MATLABSystem: '<S82>/SinkBlock'
      Pub_proc_control_node_63.publish(&proc_control_node_B.msg_c);

      // End of Outputs for SubSystem: '<S70>/Publish'

      // MATLAB Function: '<S71>/MATLAB Function' incorporates:
      //   Sum: '<S71>/Sum'

      proc_control_node_B.msg_n.Position.X =
        proc_control_node_B.WorldPosition_d[0];
      proc_control_node_B.msg_n.Position.Y =
        proc_control_node_B.WorldPosition_d[1];
      proc_control_node_B.msg_n.Position.Z =
        proc_control_node_B.WorldPosition_d[2];
      proc_control_node_B.msg_n.Orientation.X = proc_control_node_B.y_g[1];
      proc_control_node_B.msg_n.Orientation.Y = proc_control_node_B.y_g[2];
      proc_control_node_B.msg_n.Orientation.Z = proc_control_node_B.y_g[3];
      proc_control_node_B.msg_n.Orientation.W = proc_control_node_B.y_g[0];

      // Outputs for Atomic SubSystem: '<S71>/Publish'
      // MATLABSystem: '<S101>/SinkBlock'
      Pub_proc_control_node_75.publish(&proc_control_node_B.msg_n);

      // End of Outputs for SubSystem: '<S71>/Publish'
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
      // MATLAB Function: '<S67>/MATLAB Function' incorporates:
      //   Constant: '<S72>/Constant'
      //   SignalConversion generated from: '<S73>/ SFunction '

      proc_control_node_B.msg_fi = proc_control_node_P.Constant_Value_h;
      proc_control_node_B.msg_fi.XVelBtm = proc_control_node_B.Sum_d;
      proc_control_node_B.msg_fi.YVelBtm = proc_control_node_B.Sum_il;
      proc_control_node_B.msg_fi.ZVelBtm = proc_control_node_B.Sum_pr;

      // Outputs for Atomic SubSystem: '<S67>/Publish'
      // MATLABSystem: '<S74>/SinkBlock'
      Pub_proc_control_node_41.publish(&proc_control_node_B.msg_fi);

      // End of Outputs for SubSystem: '<S67>/Publish'
    }

    // ZeroOrderHold: '<S68>/Zero-Order Hold'
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
      // BusAssignment: '<S68>/Bus Assignment' incorporates:
      //   DataTypeConversion: '<S68>/Cast To Double'

      proc_control_node_B.BusAssignment_h.Data = static_cast<real32_T>
        (proc_control_node_B.PressureDepth);

      // Outputs for Atomic SubSystem: '<S68>/Publish'
      // MATLABSystem: '<S76>/SinkBlock'
      Pub_proc_control_node_243.publish(&proc_control_node_B.BusAssignment_h);

      // End of Outputs for SubSystem: '<S68>/Publish'

      // MATLAB Function: '<S69>/MATLAB Function' incorporates:
      //   Constant: '<S77>/Constant'

      proc_control_node_B.msg_m = proc_control_node_P.Constant_Value_g;
      proc_control_node_B.msg_m.AngularVelocity.X =
        proc_control_node_B.AngularRate_d[0];
      proc_control_node_B.msg_m.AngularVelocity.Y =
        proc_control_node_B.AngularRate_d[1];
      proc_control_node_B.msg_m.AngularVelocity.Z =
        proc_control_node_B.AngularRate_d[2];
      proc_control_node_B.msg_m.Orientation.X = proc_control_node_B.Quaternion[1];
      proc_control_node_B.msg_m.Orientation.Y = proc_control_node_B.Quaternion[2];
      proc_control_node_B.msg_m.Orientation.Z = proc_control_node_B.Quaternion[3];
      proc_control_node_B.msg_m.Orientation.W = proc_control_node_B.Quaternion[0];

      // Outputs for Atomic SubSystem: '<S69>/Publish'
      // MATLABSystem: '<S79>/SinkBlock'
      Pub_proc_control_node_47.publish(&proc_control_node_B.msg_m);

      // End of Outputs for SubSystem: '<S69>/Publish'
    }

    // End of ZeroOrderHold: '<S68>/Zero-Order Hold'
  }

  // End of Outputs for SubSystem: '<Root>/ROS Output'

  // ZeroOrderHold: '<S5>/Zero-Order Hold1'
  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
    // MATLAB Function: '<S5>/MATLAB Function3' incorporates:
    //   Constant: '<S103>/Constant'

    proc_control_node_B.msg = proc_control_node_P.Constant_Value;
    for (proc_control_node_B.i_n = 0; proc_control_node_B.i_n < 8;
         proc_control_node_B.i_n++) {
      proc_control_node_B.msg.Data[proc_control_node_B.i_n] =
        proc_control_node_B.NtoPWM[proc_control_node_B.i_n];
    }

    proc_control_node_B.msg.Data_SL_Info.CurrentLength = 8U;

    // End of MATLAB Function: '<S5>/MATLAB Function3'

    // Outputs for Atomic SubSystem: '<S5>/Publish2'
    // MATLABSystem: '<S108>/SinkBlock'
    Pub_proc_control_node_104.publish(&proc_control_node_B.msg);

    // End of Outputs for SubSystem: '<S5>/Publish2'
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[4] == 0) {
      // ZeroOrderHold: '<S5>/Zero-Order Hold1'
      proc_control_node_B.ZeroOrderHold1 = proc_control_node_B.Merge_i[9];
    }
  }

  // End of ZeroOrderHold: '<S5>/Zero-Order Hold1'
  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[4] == 0) {
    // BusAssignment: '<S5>/Bus Assignment1' incorporates:
    //   DataTypeConversion: '<S5>/Data Type Conversion3'
    //   Delay: '<S5>/Delay'
    //   Sum: '<S5>/Sum'

    rtb_BusAssignment1.Data = (proc_control_node_DW.Delay_DSTATE -
      proc_control_node_B.ZeroOrderHold1 != 0.0);

    // Outputs for Atomic SubSystem: '<S5>/Publish4'
    // MATLABSystem: '<S110>/SinkBlock'
    Pub_proc_control_node_106.publish(&rtb_BusAssignment1);

    // End of Outputs for SubSystem: '<S5>/Publish4'
  }

  // ZeroOrderHold: '<S5>/Zero-Order Hold'
  if ((rtmIsMajorTimeStep((&proc_control_node_M)) &&
       (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) &&
      (rtmIsMajorTimeStep((&proc_control_node_M)) &&
       (&proc_control_node_M)->Timing.TaskCounters.TID[4] == 0)) {
    // ZeroOrderHold: '<S5>/Zero-Order Hold'
    proc_control_node_B.ZeroOrderHold = proc_control_node_B.Merge_i[8];
  }

  // End of ZeroOrderHold: '<S5>/Zero-Order Hold'
  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[4] == 0) {
    // DataTypeConversion: '<S5>/Data Type Conversion2'
    proc_control_node_B.MATLABSystem_o6 = fabs(proc_control_node_B.ZeroOrderHold);
    if (proc_control_node_B.MATLABSystem_o6 < 4.503599627370496E+15) {
      if (proc_control_node_B.MATLABSystem_o6 >= 0.5) {
        // BusAssignment: '<S5>/Bus Assignment'
        rtb_BusAssignment.Data = static_cast<int8_T>(floor
          (proc_control_node_B.ZeroOrderHold + 0.5));
      } else {
        // BusAssignment: '<S5>/Bus Assignment'
        rtb_BusAssignment.Data = static_cast<int8_T>
          (proc_control_node_B.ZeroOrderHold * 0.0);
      }
    } else {
      // BusAssignment: '<S5>/Bus Assignment'
      rtb_BusAssignment.Data = static_cast<int8_T>
        (proc_control_node_B.ZeroOrderHold);
    }

    // End of DataTypeConversion: '<S5>/Data Type Conversion2'

    // Outputs for Atomic SubSystem: '<S5>/Publish3'
    // MATLABSystem: '<S109>/SinkBlock'
    Pub_proc_control_node_105.publish(&rtb_BusAssignment);

    // End of Outputs for SubSystem: '<S5>/Publish3'
  }

  // ZeroOrderHold: '<S5>/Zero-Order Hold2'
  if ((rtmIsMajorTimeStep((&proc_control_node_M)) &&
       (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) &&
      (rtmIsMajorTimeStep((&proc_control_node_M)) &&
       (&proc_control_node_M)->Timing.TaskCounters.TID[4] == 0)) {
    // ZeroOrderHold: '<S5>/Zero-Order Hold2'
    proc_control_node_B.ZeroOrderHold2 = proc_control_node_B.Merge1_f;
  }

  // End of ZeroOrderHold: '<S5>/Zero-Order Hold2'
  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[4] == 0) {
    // BusAssignment: '<S5>/Bus Assignment2'
    rtb_BusAssignment2.Data = proc_control_node_B.ZeroOrderHold2;

    // Outputs for Atomic SubSystem: '<S5>/Publish1'
    // MATLABSystem: '<S107>/SinkBlock'
    Pub_proc_control_node_122.publish(&rtb_BusAssignment2);

    // End of Outputs for SubSystem: '<S5>/Publish1'
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
    // Update for Atomic SubSystem: '<Root>/Subsystem1'
    // Update for Delay: '<S10>/Delay'
    proc_control_node_DW.Delay_DSTATE_e = proc_control_node_B.y;

    // End of Update for SubSystem: '<Root>/Subsystem1'
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
    // Update for Atomic SubSystem: '<Root>/Subsystem ProcNav'
    // Update for Delay: '<S255>/ ' incorporates:
    //   Saturate: '<S7>/Saturation'

    memcpy(&proc_control_node_DW._DSTATE[0], &proc_control_node_B.Saturation[0],
           sizeof(real_T) << 3U);

    // End of Update for SubSystem: '<Root>/Subsystem ProcNav'

    // Update for DiscreteIntegrator: '<S300>/Integrator' incorporates:
    //   Constant: '<S296>/Constant'

    if (proc_control_node_P.Constant_Value_as > 0.0) {
      proc_control_node_DW.Integrator_PrevResetState = 1;
    } else if (proc_control_node_P.Constant_Value_as < 0.0) {
      proc_control_node_DW.Integrator_PrevResetState = -1;
    } else if (proc_control_node_P.Constant_Value_as == 0.0) {
      proc_control_node_DW.Integrator_PrevResetState = 0;
    } else {
      proc_control_node_DW.Integrator_PrevResetState = 2;
    }

    for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
         proc_control_node_B.ibmat++) {
      proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] +=
        proc_control_node_P.Integrator_gainval *
        proc_control_node_B.Saturation_j[proc_control_node_B.ibmat];
      if (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] >=
          proc_control_node_P.Integrator_UpperSat) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_UpperSat;
      } else if
          (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] <=
           proc_control_node_P.Integrator_LowerSat) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_LowerSat;
      }

      // Update for DiscreteIntegrator: '<S301>/Integrator' incorporates:
      //   DiscreteIntegrator: '<S300>/Integrator'

      proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] +=
        proc_control_node_P.Integrator_gainval_e *
        proc_control_node_B.Sum_gi[proc_control_node_B.ibmat];
      if (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] >=
          proc_control_node_P.Integrator_UpperSat_f) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_UpperSat_f;
      } else if
          (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] <=
           proc_control_node_P.Integrator_LowerSat_p) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_LowerSat_p;
      }
    }

    // End of Update for DiscreteIntegrator: '<S300>/Integrator'

    // Update for DiscreteIntegrator: '<S301>/Integrator' incorporates:
    //   Constant: '<S296>/Constant1'

    if (proc_control_node_P.Constant1_Value_d > 0.0) {
      proc_control_node_DW.Integrator_PrevResetState_h = 1;
    } else if (proc_control_node_P.Constant1_Value_d < 0.0) {
      proc_control_node_DW.Integrator_PrevResetState_h = -1;
    } else if (proc_control_node_P.Constant1_Value_d == 0.0) {
      proc_control_node_DW.Integrator_PrevResetState_h = 0;
    } else {
      proc_control_node_DW.Integrator_PrevResetState_h = 2;
    }
  }

  // Update for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
  //   EnablePort: '<S1>/Enable'

  if (proc_control_node_DW.ModlePhysique_MODE) {
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
      // Update for UniformRandomNumber: '<S14>/X Drift'
      proc_control_node_DW.XDrift_NextOutput = (proc_control_node_P.dMaxX -
        proc_control_node_P.dMinX) * rt_urand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed) + proc_control_node_P.dMinX;

      // Update for UniformRandomNumber: '<S14>/Y Drift'
      proc_control_node_DW.YDrift_NextOutput = (proc_control_node_P.dMaxY -
        proc_control_node_P.dMinY) * rt_urand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed_a) + proc_control_node_P.dMinY;
    }

    // Update for Integrator: '<S1>/Integrator'
    proc_control_node_DW.Integrator_IWORK = 0;

    // Update for Integrator: '<S1>/Integrator1'
    proc_control_node_DW.Integrator1_IWORK = 0;

    // Update for Integrator: '<S1>/Integrator2'
    proc_control_node_DW.Integrator2_IWORK = 0;

    // Update for Integrator: '<S1>/Integrator3'
    proc_control_node_DW.Integrator3_IWORK = 0;
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
      // Update for RandomNumber: '<S25>/White Noise'
      proc_control_node_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed_j) *
        proc_control_node_P.WhiteNoise_StdDev +
        proc_control_node_P.WhiteNoise_Mean;

      // Update for RandomNumber: '<S26>/White Noise'
      proc_control_node_DW.NextOutput_b = rt_nrand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed_d) *
        proc_control_node_P.WhiteNoise_StdDev_d +
        proc_control_node_P.WhiteNoise_Mean_e;
    }
  }

  // End of Update for SubSystem: '<Root>/Modèle Physique'
  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[4] == 0) {
    // Update for Delay: '<S5>/Delay'
    proc_control_node_DW.Delay_DSTATE = proc_control_node_B.ZeroOrderHold1;
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M))) {
    rt_ertODEUpdateContinuousStates(&(&proc_control_node_M)->solverInfo);

    // Update absolute time for base rate
    // The "clockTick0" counts the number of times the code of this task has
    //  been executed. The absolute time is the multiplication of "clockTick0"
    //  and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
    //  overflow during the application lifespan selected.
    //  Timer of this task consists of two 32 bit unsigned integers.
    //  The two integers represent the low bits Timing.clockTick0 and the high bits
    //  Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.

    if (!(++(&proc_control_node_M)->Timing.clockTick0)) {
      ++(&proc_control_node_M)->Timing.clockTickH0;
    }

    (&proc_control_node_M)->Timing.t[0] = rtsiGetSolverStopTime
      (&(&proc_control_node_M)->solverInfo);

    {
      // Update absolute timer for sample time: [0.016666666666666666s, 0.0s]
      // The "clockTick1" counts the number of times the code of this task has
      //  been executed. The resolution of this integer timer is 0.016666666666666666, which is the step size
      //  of the task. Size of "clockTick1" ensures timer will not overflow during the
      //  application lifespan selected.
      //  Timer of this task consists of two 32 bit unsigned integers.
      //  The two integers represent the low bits Timing.clockTick1 and the high bits
      //  Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.

      (&proc_control_node_M)->Timing.clockTick1++;
      if (!(&proc_control_node_M)->Timing.clockTick1) {
        (&proc_control_node_M)->Timing.clockTickH1++;
      }
    }

    rate_scheduler((&proc_control_node_M));
  }                                    // end MajorTimeStep
}

// Derivatives for root system: '<Root>'
void proc_control_nodeModelClass::proc_control_node_derivatives()
{
  proc_control_nodeModelClass::XDot_proc_control_node_T *_rtXdot;
  _rtXdot = ((XDot_proc_control_node_T *) (&proc_control_node_M)->derivs);

  // Derivatives for Enabled SubSystem: '<Root>/Modèle Physique'
  if (proc_control_node_DW.ModlePhysique_MODE) {
    // Derivatives for TransferFcn: '<S17>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE = 0.0;
    _rtXdot->TransferFcn_CSTATE += proc_control_node_P.TransferFcn_A *
      proc_control_node_X.TransferFcn_CSTATE;
    _rtXdot->TransferFcn_CSTATE += proc_control_node_B.PWMtoN[0];

    // Derivatives for TransferFcn: '<S18>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_o = 0.0;
    _rtXdot->TransferFcn_CSTATE_o += proc_control_node_P.TransferFcn_A_j *
      proc_control_node_X.TransferFcn_CSTATE_o;
    _rtXdot->TransferFcn_CSTATE_o += proc_control_node_B.PWMtoN[1];

    // Derivatives for TransferFcn: '<S19>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_p = 0.0;
    _rtXdot->TransferFcn_CSTATE_p += proc_control_node_P.TransferFcn_A_h *
      proc_control_node_X.TransferFcn_CSTATE_p;
    _rtXdot->TransferFcn_CSTATE_p += proc_control_node_B.PWMtoN[2];

    // Derivatives for TransferFcn: '<S20>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_a = 0.0;
    _rtXdot->TransferFcn_CSTATE_a += proc_control_node_P.TransferFcn_A_i *
      proc_control_node_X.TransferFcn_CSTATE_a;
    _rtXdot->TransferFcn_CSTATE_a += proc_control_node_B.PWMtoN[3];

    // Derivatives for TransferFcn: '<S21>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_f = 0.0;
    _rtXdot->TransferFcn_CSTATE_f += proc_control_node_P.TransferFcn_A_jp *
      proc_control_node_X.TransferFcn_CSTATE_f;
    _rtXdot->TransferFcn_CSTATE_f += proc_control_node_B.PWMtoN[4];

    // Derivatives for TransferFcn: '<S22>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_e = 0.0;
    _rtXdot->TransferFcn_CSTATE_e += proc_control_node_P.TransferFcn_A_l *
      proc_control_node_X.TransferFcn_CSTATE_e;
    _rtXdot->TransferFcn_CSTATE_e += proc_control_node_B.PWMtoN[5];

    // Derivatives for TransferFcn: '<S23>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_ft = 0.0;
    _rtXdot->TransferFcn_CSTATE_ft += proc_control_node_P.TransferFcn_A_p *
      proc_control_node_X.TransferFcn_CSTATE_ft;
    _rtXdot->TransferFcn_CSTATE_ft += proc_control_node_B.PWMtoN[6];

    // Derivatives for TransferFcn: '<S24>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_fu = 0.0;
    _rtXdot->TransferFcn_CSTATE_fu += proc_control_node_P.TransferFcn_A_n *
      proc_control_node_X.TransferFcn_CSTATE_fu;
    _rtXdot->TransferFcn_CSTATE_fu += proc_control_node_B.PWMtoN[7];

    // Derivatives for Integrator: '<S1>/Integrator'
    _rtXdot->Integrator_CSTATE[0] = proc_control_node_B.Position_dot[0];
    _rtXdot->Integrator_CSTATE[1] = proc_control_node_B.Position_dot[1];
    _rtXdot->Integrator_CSTATE[2] = proc_control_node_B.Position_dot[2];

    // Derivatives for Integrator: '<S1>/Integrator1'
    _rtXdot->Integrator1_CSTATE[0] = proc_control_node_B.Quaternion_dot[0];
    _rtXdot->Integrator1_CSTATE[1] = proc_control_node_B.Quaternion_dot[1];
    _rtXdot->Integrator1_CSTATE[2] = proc_control_node_B.Quaternion_dot[2];
    _rtXdot->Integrator1_CSTATE[3] = proc_control_node_B.Quaternion_dot[3];

    // Derivatives for Integrator: '<S1>/Integrator2'
    _rtXdot->Integrator2_CSTATE[0] = proc_control_node_B.BodyVelocity_dot[0];

    // Derivatives for Integrator: '<S1>/Integrator3'
    _rtXdot->Integrator3_CSTATE[0] = proc_control_node_B.AngularRates_dot[0];

    // Derivatives for Integrator: '<S1>/Integrator2'
    _rtXdot->Integrator2_CSTATE[1] = proc_control_node_B.BodyVelocity_dot[1];

    // Derivatives for Integrator: '<S1>/Integrator3'
    _rtXdot->Integrator3_CSTATE[1] = proc_control_node_B.AngularRates_dot[1];

    // Derivatives for Integrator: '<S1>/Integrator2'
    _rtXdot->Integrator2_CSTATE[2] = proc_control_node_B.BodyVelocity_dot[2];

    // Derivatives for Integrator: '<S1>/Integrator3'
    _rtXdot->Integrator3_CSTATE[2] = proc_control_node_B.AngularRates_dot[2];
  } else {
    {
      real_T *dx;
      int_T i;
      dx = &(((XDot_proc_control_node_T *) (&proc_control_node_M)->derivs)
             ->TransferFcn_CSTATE);
      for (i=0; i < 21; i++) {
        dx[i] = 0.0;
      }
    }
  }

  // End of Derivatives for SubSystem: '<Root>/Modèle Physique'
}

// Model initialize function
void proc_control_nodeModelClass::initialize()
{
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));

  // non-finite (run-time) assignments
  proc_control_node_P.Integrator_UpperSat = rtInf;
  proc_control_node_P.Integrator_LowerSat = rtMinusInf;
  proc_control_node_P.Saturation_UpperSat = rtInf;
  proc_control_node_P.Saturation_LowerSat = rtMinusInf;
  proc_control_node_P.Integrator_UpperSat_f = rtInf;
  proc_control_node_P.Integrator_LowerSat_p = rtMinusInf;
  proc_control_node_P.Saturation_UpperSat_m = rtInf;
  proc_control_node_P.Saturation_LowerSat_c = rtMinusInf;

  {
    // Setup solver object
    rtsiSetSimTimeStepPtr(&(&proc_control_node_M)->solverInfo,
                          &(&proc_control_node_M)->Timing.simTimeStep);
    rtsiSetTPtr(&(&proc_control_node_M)->solverInfo, &rtmGetTPtr
                ((&proc_control_node_M)));
    rtsiSetStepSizePtr(&(&proc_control_node_M)->solverInfo,
                       &(&proc_control_node_M)->Timing.stepSize0);
    rtsiSetdXPtr(&(&proc_control_node_M)->solverInfo, &(&proc_control_node_M)
                 ->derivs);
    rtsiSetContStatesPtr(&(&proc_control_node_M)->solverInfo, (real_T **)
                         &(&proc_control_node_M)->contStates);
    rtsiSetNumContStatesPtr(&(&proc_control_node_M)->solverInfo,
      &(&proc_control_node_M)->Sizes.numContStates);
    rtsiSetNumPeriodicContStatesPtr(&(&proc_control_node_M)->solverInfo,
      &(&proc_control_node_M)->Sizes.numPeriodicContStates);
    rtsiSetPeriodicContStateIndicesPtr(&(&proc_control_node_M)->solverInfo,
      &(&proc_control_node_M)->periodicContStateIndices);
    rtsiSetPeriodicContStateRangesPtr(&(&proc_control_node_M)->solverInfo,
      &(&proc_control_node_M)->periodicContStateRanges);
    rtsiSetErrorStatusPtr(&(&proc_control_node_M)->solverInfo,
                          (&rtmGetErrorStatus((&proc_control_node_M))));
    rtsiSetRTModelPtr(&(&proc_control_node_M)->solverInfo, (&proc_control_node_M));
  }

  rtsiSetSimTimeStep(&(&proc_control_node_M)->solverInfo, MAJOR_TIME_STEP);
  (&proc_control_node_M)->intgData.y = (&proc_control_node_M)->odeY;
  (&proc_control_node_M)->intgData.f[0] = (&proc_control_node_M)->odeF[0];
  (&proc_control_node_M)->intgData.f[1] = (&proc_control_node_M)->odeF[1];
  (&proc_control_node_M)->intgData.f[2] = (&proc_control_node_M)->odeF[2];
  (&proc_control_node_M)->contStates = ((X_proc_control_node_T *)
    &proc_control_node_X);
  rtsiSetSolverData(&(&proc_control_node_M)->solverInfo, static_cast<void *>
                    (&(&proc_control_node_M)->intgData));
  rtsiSetSolverName(&(&proc_control_node_M)->solverInfo,"ode3");
  rtmSetTPtr((&proc_control_node_M), &(&proc_control_node_M)->Timing.tArray[0]);
  (&proc_control_node_M)->Timing.stepSize0 = 0.016666666666666666;
  rtmSetFirstInitCond((&proc_control_node_M), 1);

  {
    real_T Constant2;
    real_T Constant3;
    int32_T i;
    int32_T t;
    uint32_T tseed;
    char_T b_zeroDelimTopic[9];
    static const char_T tmp[18] = { '/', 'i', 'n', 'i', 't', 'i', 'a', 'l', '_',
      'c', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n' };

    static const char_T tmp_0[22] = { '/', 'p', 'r', 'o', 'c', '_', 'c', 'o',
      'n', 't', 'r', 'o', 'l', '/', 's', 'e', 't', '_', 'm', 'o', 'd', 'e' };

    static const char_T tmp_1[19] = { '/', 'p', 'r', 'o', 'c', '_', 'n', 'a',
      'v', '/', 'r', 'e', 's', 'e', 't', '_', 'p', 'o', 's' };

    static const char_T tmp_2[38] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 'k', 'i', 'l', 'l', '_', 'm', 'i', 's', 's', 'i', 'o', 'n', '/',
      'k', 'i', 'l', 'l', '_', 's', 'w', 'i', 't', 'c', 'h', '_', 'm', 's', 'g'
    };

    static const char_T tmp_3[25] = { '/', 'p', 'r', 'o', 'c', '_', 's', 'i',
      'm', 'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'i', 'm', 'u', '_', 'i', 'n',
      'f', 'o' };

    static const char_T tmp_4[29] = { '/', 'p', 'r', 'o', 'c', '_', 's', 'i',
      'm', 'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'd', 'v', 'l', '_', 'v', 'e',
      'l', 'o', 'c', 'i', 't', 'y' };

    static const char_T tmp_5[22] = { '/', 'p', 'r', 'o', 'c', '_', 's', 'i',
      'm', 'u', 'a', 'l', 't', 'i', 'o', 'n', '/', 'd', 'e', 'p', 't', 'h' };

    static const char_T tmp_6[22] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 'i', 'm', 'u', '/', 'i', 'm', 'u', '_', 'i', 'n', 'f', 'o' };

    static const char_T tmp_7[26] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 'd', 'v', 'l', '/', 'd', 'v', 'l', '_', 'v', 'e', 'l', 'o', 'c',
      'i', 't', 'y' };

    static const char_T tmp_8[21] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 'd', 'e', 'p', 't', 'h', '/', 'd', 'e', 'p', 't', 'h' };

    static const char_T tmp_9[22] = { '/', 't', 'e', 'l', 'e', 'm', 'e', 't',
      'r', 'y', '/', 'a', 'u', 'v', '_', 's', 't', 'a', 't', 'e', 's', '/' };

    static const char_T tmp_a[22] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 's', 'e', 'n', 's', 'o', 'r', '_', 'o', 'n' };

    static const char_T tmp_b[15] = { '/', 's', 'p', 'a', 'c', 'e', 'n', 'a',
      'v', '/', 't', 'w', 'i', 's', 't' };

    static const char_T tmp_c[21] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'a', 'd', 'd', '_', 'p', 'o', 's', 'e' };

    static const real_T tmp_d[33] = { 0.0, 1.0, 0.0, 0.1, 1.0, 0.0, 0.2, 1.0,
      0.0, 0.30000000000000004, 1.0, 0.0, 0.4, 1.0, 0.0, 0.5, 1.0, 0.0, 0.6, 1.0,
      0.0, 0.7, 1.0, 0.0, 0.8, 1.0, 0.0, 0.9, 1.0, 0.0, 1.0, 1.0, 0.0 };

    static const char_T tmp_e[23] = { '/', 'g', 'a', 'z', 'e', 'b', 'o', '/',
      's', 'e', 't', '_', 'm', 'o', 'd', 'e', 'l', '_', 's', 't', 'a', 't', 'e'
    };

    static const char_T tmp_f[8] = { '/', 'p', 'o', 's', '_', 'r', 'o', 't' };

    static const char_T tmp_g[31] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 't', 'h', 'r', 'u', 's', 't', 'e', 'r', '/', 't', 'h', 'r', 'u',
      's', 't', 'e', 'r', '_', 'p', 'w', 'm' };

    static const char_T tmp_h[26] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'i', 's', '_', 'm', 'p', 'c', '_', 'a', 'c', 't',
      'i', 'v', 'e' };

    static const char_T tmp_i[23] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '_', 's', 't', 'a', 't', 'u', 's'
    };

    static const char_T tmp_j[27] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 't', 'a', 'r', 'g', 'e', 't', '_', 'r', 'e', 'a',
      'c', 'h', 'e', 'd' };

    // Start for Constant: '<S296>/Constant3'
    Constant3 = proc_control_node_P.Constant3_Value;

    // Start for Constant: '<S296>/Constant2'
    Constant2 = proc_control_node_P.Constant2_Value_m;

    // Start for SwitchCase: '<S9>/Switch Case'
    proc_control_node_DW.SwitchCase_ActiveSubsystem = -1;
    proc_control_node_PrevZCX.Integrator_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Integrator1_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Integrator2_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Integrator3_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Trajectorygenerator_Reset_ZCE = POS_ZCSIG;
    for (i = 0; i < 6; i++) {
      // InitializeConditions for DiscreteIntegrator: '<S300>/Integrator'
      proc_control_node_DW.Integrator_DSTATE[i] = Constant3;
      if (proc_control_node_DW.Integrator_DSTATE[i] >=
          proc_control_node_P.Integrator_UpperSat) {
        proc_control_node_DW.Integrator_DSTATE[i] =
          proc_control_node_P.Integrator_UpperSat;
      } else if (proc_control_node_DW.Integrator_DSTATE[i] <=
                 proc_control_node_P.Integrator_LowerSat) {
        proc_control_node_DW.Integrator_DSTATE[i] =
          proc_control_node_P.Integrator_LowerSat;
      }

      // End of InitializeConditions for DiscreteIntegrator: '<S300>/Integrator' 

      // InitializeConditions for DiscreteIntegrator: '<S301>/Integrator'
      proc_control_node_DW.Integrator_DSTATE_l[i] = Constant2;
      if (proc_control_node_DW.Integrator_DSTATE_l[i] >=
          proc_control_node_P.Integrator_UpperSat_f) {
        proc_control_node_DW.Integrator_DSTATE_l[i] =
          proc_control_node_P.Integrator_UpperSat_f;
      } else if (proc_control_node_DW.Integrator_DSTATE_l[i] <=
                 proc_control_node_P.Integrator_LowerSat_p) {
        proc_control_node_DW.Integrator_DSTATE_l[i] =
          proc_control_node_P.Integrator_LowerSat_p;
      }

      // End of InitializeConditions for DiscreteIntegrator: '<S301>/Integrator' 
    }

    // InitializeConditions for Delay: '<S5>/Delay'
    proc_control_node_DW.Delay_DSTATE =
      proc_control_node_P.Delay_InitialCondition_f;

    // SystemInitialize for Atomic SubSystem: '<Root>/Subsystem1'
    // InitializeConditions for Delay: '<S10>/Delay'
    proc_control_node_DW.Delay_DSTATE_e =
      proc_control_node_P.Delay_InitialCondition_c;

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S326>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S330>/Out1' incorporates:
    //   Inport: '<S330>/In1'

    proc_control_node_B.In1_n = proc_control_node_P.Out1_Y0_g;

    // End of SystemInitialize for SubSystem: '<S326>/Enabled Subsystem'

    // Start for MATLABSystem: '<S326>/SourceBlock'
    proc_control_node_DW.obj_b.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_b.isInitialized = 1;
    for (i = 0; i < 18; i++) {
      proc_control_node_B.b_zeroDelimTopic_l[i] = tmp[i];
    }

    proc_control_node_B.b_zeroDelimTopic_l[18] = '\x00';
    Sub_proc_control_node_185_11.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_l[0], 1);
    proc_control_node_DW.obj_b.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S326>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S328>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S332>/Out1' incorporates:
    //   Inport: '<S332>/In1'

    proc_control_node_B.In1_i2 = proc_control_node_P.Out1_Y0_k;

    // End of SystemInitialize for SubSystem: '<S328>/Enabled Subsystem'

    // Start for MATLABSystem: '<S328>/SourceBlock'
    proc_control_node_DW.obj_mt.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_mt.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_h[i] = tmp_0[i];
    }

    proc_control_node_B.b_zeroDelimTopic_h[22] = '\x00';
    Sub_proc_control_node_185_13.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_h[0], 1);
    proc_control_node_DW.obj_mt.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S328>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe2'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe3'
    // Start for MATLABSystem: '<S329>/SourceBlock'
    proc_control_node_DW.obj_o.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_o.isInitialized = 1;
    for (i = 0; i < 19; i++) {
      proc_control_node_B.b_zeroDelimTopic_jz[i] = tmp_1[i];
    }

    proc_control_node_B.b_zeroDelimTopic_jz[19] = '\x00';
    Sub_proc_control_node_185_14.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_jz[0], 1);
    proc_control_node_DW.obj_o.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S329>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe3'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S327>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S331>/Out1' incorporates:
    //   Inport: '<S331>/In1'

    proc_control_node_B.In1_cx = proc_control_node_P.Out1_Y0_h;

    // End of SystemInitialize for SubSystem: '<S327>/Enabled Subsystem'

    // Start for MATLABSystem: '<S327>/SourceBlock'
    proc_control_node_DW.obj_h.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_h.isInitialized = 1;
    for (i = 0; i < 38; i++) {
      proc_control_node_B.b_zeroDelimTopic[i] = tmp_2[i];
    }

    proc_control_node_B.b_zeroDelimTopic[38] = '\x00';
    Sub_proc_control_node_185_12.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic[0], 1);
    proc_control_node_DW.obj_h.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S327>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe1'

    // Start for MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_DW.obj_mv.initial_mode =
      proc_control_node_P.MATLABSystem_initial_mode;
    proc_control_node_DW.obj_mv.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S10>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    for (i = 0; i < 7; i++) {
      proc_control_node_DW.obj_mv.m_initCond[i] = 0.0;
    }

    proc_control_node_DW.obj_mv.m_mode =
      proc_control_node_DW.obj_mv.initial_mode;
    proc_control_node_DW.obj_mv.m_killStatus = 0.0;
    proc_control_node_DW.obj_mv.m_simulation = 0.0;
    proc_control_node_DW.obj_mv.m_reset = 0.0;
    proc_control_node_DW.obj_mv.m_trajClear = 0.0;

    // End of InitializeConditions for MATLABSystem: '<S10>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<Root>/Subsystem1'

    // SystemInitialize for Atomic SubSystem: '<Root>/ROS Input'
    // SystemInitialize for IfAction SubSystem: '<S3>/Simulation'
    // SystemInitialize for Atomic SubSystem: '<S48>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S56>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S59>/Out1' incorporates:
    //   Inport: '<S59>/In1'

    proc_control_node_B.In1_p = proc_control_node_P.Out1_Y0;

    // End of SystemInitialize for SubSystem: '<S56>/Enabled Subsystem'

    // Start for MATLABSystem: '<S56>/SourceBlock' incorporates:
    //   MATLABSystem: '<S79>/SinkBlock'

    proc_control_node_DW.obj_i4.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_i4.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S69>/Publish'
    for (i = 0; i < 25; i++) {
      proc_control_node_B.b_zeroDelimTopic_tmp_m[i] = tmp_3[i];
    }

    proc_control_node_B.b_zeroDelimTopic_tmp_m[25] = '\x00';

    // End of SystemInitialize for SubSystem: '<S69>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 26; i++) {
      proc_control_node_B.b_zeroDelimTopic_fr[i] =
        proc_control_node_B.b_zeroDelimTopic_tmp_m[i];
    }

    Sub_proc_control_node_31_1241.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_fr[0], 1);
    proc_control_node_DW.obj_i4.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S56>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S48>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S48>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S57>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S60>/Out1' incorporates:
    //   Inport: '<S60>/In1'

    proc_control_node_B.In1_c = proc_control_node_P.Out1_Y0_m;

    // End of SystemInitialize for SubSystem: '<S57>/Enabled Subsystem'

    // Start for MATLABSystem: '<S57>/SourceBlock' incorporates:
    //   MATLABSystem: '<S74>/SinkBlock'

    proc_control_node_DW.obj_bg.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_bg.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S67>/Publish'
    for (i = 0; i < 29; i++) {
      proc_control_node_B.b_zeroDelimTopic_tmp[i] = tmp_4[i];
    }

    proc_control_node_B.b_zeroDelimTopic_tmp[29] = '\x00';

    // End of SystemInitialize for SubSystem: '<S67>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 30; i++) {
      proc_control_node_B.b_zeroDelimTopic_f[i] =
        proc_control_node_B.b_zeroDelimTopic_tmp[i];
    }

    Sub_proc_control_node_31_1242.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_f[0], 1);
    proc_control_node_DW.obj_bg.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S57>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S48>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S48>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S58>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S61>/Out1' incorporates:
    //   Inport: '<S61>/In1'

    proc_control_node_B.In1_om = proc_control_node_P.Out1_Y0_n;

    // End of SystemInitialize for SubSystem: '<S58>/Enabled Subsystem'

    // Start for MATLABSystem: '<S58>/SourceBlock' incorporates:
    //   MATLABSystem: '<S76>/SinkBlock'

    proc_control_node_DW.obj_df.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_df.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S68>/Publish'
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_tmp_j[i] = tmp_5[i];
    }

    proc_control_node_B.b_zeroDelimTopic_tmp_j[22] = '\x00';

    // End of SystemInitialize for SubSystem: '<S68>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 23; i++) {
      proc_control_node_B.b_zeroDelimTopic_h[i] =
        proc_control_node_B.b_zeroDelimTopic_tmp_j[i];
    }

    Sub_proc_control_node_31_1305.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_h[0], 1);
    proc_control_node_DW.obj_df.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S58>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S48>/Subscribe2'
    // End of SystemInitialize for SubSystem: '<S3>/Simulation'

    // SystemInitialize for IfAction SubSystem: '<S3>/Real System'
    // SystemInitialize for Atomic SubSystem: '<S47>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S50>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S53>/Out1' incorporates:
    //   Inport: '<S53>/In1'

    proc_control_node_B.In1 = proc_control_node_P.Out1_Y0_l;

    // End of SystemInitialize for SubSystem: '<S50>/Enabled Subsystem'

    // Start for MATLABSystem: '<S50>/SourceBlock'
    proc_control_node_DW.obj_l.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_l.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_h[i] = tmp_6[i];
    }

    proc_control_node_B.b_zeroDelimTopic_h[22] = '\x00';
    Sub_proc_control_node_31_5.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_h[0], 1);
    proc_control_node_DW.obj_l.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S50>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S47>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S47>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S51>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S54>/Out1' incorporates:
    //   Inport: '<S54>/In1'

    proc_control_node_B.In1_i = proc_control_node_P.Out1_Y0_p;

    // End of SystemInitialize for SubSystem: '<S51>/Enabled Subsystem'

    // Start for MATLABSystem: '<S51>/SourceBlock'
    proc_control_node_DW.obj_d.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_d.isInitialized = 1;
    for (i = 0; i < 26; i++) {
      proc_control_node_B.b_zeroDelimTopic_e[i] = tmp_7[i];
    }

    proc_control_node_B.b_zeroDelimTopic_e[26] = '\x00';
    Sub_proc_control_node_31_1235.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_e[0], 1);
    proc_control_node_DW.obj_d.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S51>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S47>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S47>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S52>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S55>/Out1' incorporates:
    //   Inport: '<S55>/In1'

    proc_control_node_B.In1_e = proc_control_node_P.Out1_Y0_nb;

    // End of SystemInitialize for SubSystem: '<S52>/Enabled Subsystem'

    // Start for MATLABSystem: '<S52>/SourceBlock'
    proc_control_node_DW.obj_ow.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_ow.isInitialized = 1;
    for (i = 0; i < 21; i++) {
      proc_control_node_B.b_zeroDelimTopic_g[i] = tmp_8[i];
    }

    proc_control_node_B.b_zeroDelimTopic_g[21] = '\x00';
    Sub_proc_control_node_31_1302.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_g[0], 1);
    proc_control_node_DW.obj_ow.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S52>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S47>/Subscribe2'
    // End of SystemInitialize for SubSystem: '<S3>/Real System'

    // SystemInitialize for Enabled SubSystem: '<S3>/Subsystem'
    // InitializeConditions for Memory: '<S65>/Memory'
    proc_control_node_DW.Memory_PreviousInput_i =
      proc_control_node_P.MinMaxRunningResettable_vinit;

    // InitializeConditions for Memory: '<S66>/Memory'
    proc_control_node_DW.Memory_PreviousInput_f =
      proc_control_node_P.MinMaxRunningResettable1_vinit;

    // SystemInitialize for Outport: '<S49>/y'
    proc_control_node_B.y = proc_control_node_P.y_Y0;

    // End of SystemInitialize for SubSystem: '<S3>/Subsystem'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Input'

    // SystemInitialize for Atomic SubSystem: '<Root>/Subsystem ProcNav'
    // InitializeConditions for Delay: '<S255>/ '
    memcpy(&proc_control_node_DW._DSTATE[0],
           &proc_control_node_P._InitialCondition[0], sizeof(real_T) << 3U);

    // SystemInitialize for Enabled SubSystem: '<S8>/DVL Mesurments'
    // InitializeConditions for Delay: '<S267>/Delay'
    proc_control_node_DW.Delay_DSTATE_i =
      proc_control_node_P.Delay_InitialCondition_l;

    // SystemInitialize for Enabled SubSystem: '<S267>/Subsystem2'
    // SystemInitialize for Fcn: '<S271>/q0' incorporates:
    //   Outport: '<S270>/Quat'

    proc_control_node_B.q0 = proc_control_node_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S271>/q1' incorporates:
    //   Outport: '<S270>/Quat'

    proc_control_node_B.q1 = proc_control_node_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S271>/q2' incorporates:
    //   Outport: '<S270>/Quat'

    proc_control_node_B.q2 = proc_control_node_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S271>/q3' incorporates:
    //   Outport: '<S270>/Quat'

    proc_control_node_B.q3 = proc_control_node_P.Quat_Y0;

    // End of SystemInitialize for SubSystem: '<S267>/Subsystem2'

    // SystemInitialize for Sum: '<S273>/Sum' incorporates:
    //   Outport: '<S251>/Body Velocity'

    proc_control_node_B.Sum = proc_control_node_P.BodyVelocity_Y0;

    // SystemInitialize for Sum: '<S274>/Sum' incorporates:
    //   Outport: '<S251>/Body Velocity'

    proc_control_node_B.Sum_o = proc_control_node_P.BodyVelocity_Y0;

    // SystemInitialize for Sum: '<S275>/Sum' incorporates:
    //   Outport: '<S251>/Body Velocity'

    proc_control_node_B.Sum_c = proc_control_node_P.BodyVelocity_Y0;

    // End of SystemInitialize for SubSystem: '<S8>/DVL Mesurments'

    // SystemInitialize for Enabled SubSystem: '<S8>/Subsystem'
    // Start for DataStoreMemory: '<S281>/DataStoreMemory - P'
    memcpy(&proc_control_node_DW.P[0],
           &proc_control_node_P.DataStoreMemoryP_InitialValue_j[0], 169U *
           sizeof(real_T));
    for (i = 0; i < 13; i++) {
      // Start for DataStoreMemory: '<S281>/DataStoreMemory - x'
      proc_control_node_DW.x[i] =
        proc_control_node_P.DataStoreMemoryx_InitialValue_h[i];

      // SystemInitialize for DataStoreRead: '<S284>/Data Store Read' incorporates:
      //   DataStoreMemory: '<S281>/DataStoreMemory - x'
      //   Outport: '<S254>/xhat'

      proc_control_node_B.DataStoreRead[i] = proc_control_node_P.xhat_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S8>/Subsystem'
    // End of SystemInitialize for SubSystem: '<Root>/Subsystem ProcNav'

    // SystemInitialize for Enabled SubSystem: '<Root>/Sensor Manager'
    // SystemInitialize for Atomic SubSystem: '<S112>/Publish'
    // Start for MATLABSystem: '<S118>/SinkBlock'
    proc_control_node_DW.obj_ag.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_ag.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_h[i] = tmp_9[i];
    }

    proc_control_node_B.b_zeroDelimTopic_h[22] = '\x00';
    Pub_proc_control_node_163.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_h[0], 1);
    proc_control_node_DW.obj_ag.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S118>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S112>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S111>/Publish'
    // Start for MATLABSystem: '<S114>/SinkBlock'
    proc_control_node_DW.obj_e.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_e.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_h[i] = tmp_a[i];
    }

    proc_control_node_B.b_zeroDelimTopic_h[22] = '\x00';
    Pub_proc_control_node_116.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_h[0], 1);
    proc_control_node_DW.obj_e.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S114>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S111>/Publish'

    // SystemInitialize for SignalConversion generated from: '<S6>/Output' incorporates:
    //   Outport: '<S6>/Output'

    proc_control_node_B.qS2W[0] = proc_control_node_P.Output_Y0.qS2W[0];
    proc_control_node_B.qS2W[1] = proc_control_node_P.Output_Y0.qS2W[1];
    proc_control_node_B.qS2W[2] = proc_control_node_P.Output_Y0.qS2W[2];
    proc_control_node_B.qS2W[3] = proc_control_node_P.Output_Y0.qS2W[3];

    // End of SystemInitialize for SubSystem: '<Root>/Sensor Manager'

    // SystemInitialize for Atomic SubSystem: '<S291>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S297>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S302>/Out1' incorporates:
    //   Inport: '<S302>/In1'

    proc_control_node_B.In1_o = proc_control_node_P.Out1_Y0_pb;

    // End of SystemInitialize for SubSystem: '<S297>/Enabled Subsystem'

    // Start for MATLABSystem: '<S297>/SourceBlock'
    proc_control_node_DW.obj_c.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_c.isInitialized = 1;
    for (i = 0; i < 15; i++) {
      proc_control_node_B.b_zeroDelimTopic_hz[i] = tmp_b[i];
    }

    proc_control_node_B.b_zeroDelimTopic_hz[15] = '\x00';
    Sub_proc_control_node_184_1122.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_hz[0], 2);
    proc_control_node_DW.obj_c.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S297>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S291>/Subscribe2'

    // SystemInitialize for IfAction SubSystem: '<S9>/singleWpts Trajectory'
    // InitializeConditions for Delay: '<S294>/Delay1'
    proc_control_node_DW.Delay1_DSTATE_cr =
      proc_control_node_P.Delay1_InitialCondition_k;

    // InitializeConditions for Delay: '<S310>/Delay'
    proc_control_node_DW.Delay_DSTATE_n =
      proc_control_node_P.Delay_InitialCondition_o;

    // SystemInitialize for Enabled SubSystem: '<S310>/Enabled Subsystem'
    for (i = 0; i < 7; i++) {
      // SystemInitialize for Math: '<S313>/Transpose' incorporates:
      //   Outport: '<S313>/y'

      proc_control_node_B.Transpose[i] = proc_control_node_P.y_Y0_m;
    }

    // End of SystemInitialize for SubSystem: '<S310>/Enabled Subsystem'

    // SystemInitialize for Atomic SubSystem: '<S294>/Subscribe'
    // Start for MATLABSystem: '<S308>/SourceBlock'
    proc_control_node_DW.obj_hd.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_hd.isInitialized = 1;
    for (i = 0; i < 21; i++) {
      proc_control_node_B.b_zeroDelimTopic_g[i] = tmp_c[i];
    }

    proc_control_node_B.b_zeroDelimTopic_g[21] = '\x00';
    Sub_proc_control_node_184_1168.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_g[0], 1);
    proc_control_node_DW.obj_hd.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S308>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S294>/Subscribe'

    // SystemInitialize for Enabled SubSystem: '<S294>/Subsystem1'
    // SystemInitialize for DataTypeConversion: '<S309>/Data Type Conversion1' incorporates:
    //   Outport: '<S309>/Out1'

    proc_control_node_B.DataTypeConversion1[0] = proc_control_node_P.Out1_Y0_i;
    proc_control_node_B.DataTypeConversion1[1] = proc_control_node_P.Out1_Y0_i;

    // SystemInitialize for DataTypeConversion: '<S309>/Data Type Conversion2' incorporates:
    //   Outport: '<S309>/Out1'

    proc_control_node_B.DataTypeConversion2 = proc_control_node_P.Out1_Y0_i;

    // SystemInitialize for Enabled SubSystem: '<S294>/Pre-traitement'
    for (i = 0; i < 6; i++) {
      // SystemInitialize for DataTypeConversion: '<S309>/Data Type Conversion' incorporates:
      //   Outport: '<S309>/Out1'

      proc_control_node_B.DataTypeConversion[i] = proc_control_node_P.Out1_Y0_i;

      // SystemInitialize for Selector: '<S307>/Selector' incorporates:
      //   DataTypeConversion: '<S309>/Data Type Conversion'
      //   Outport: '<S307>/linWpts'
      //   Outport: '<S309>/Out1'

      proc_control_node_B.Selector[i] = proc_control_node_P.linWpts_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S294>/Subsystem1'
    for (i = 0; i < 8; i++) {
      // SystemInitialize for Selector: '<S307>/Selector1' incorporates:
      //   Outport: '<S307>/RotWpts'

      proc_control_node_B.Selector1[i] = proc_control_node_P.RotWpts_Y0;
    }

    // SystemInitialize for Concatenate: '<S307>/Matrix Concatenate' incorporates:
    //   Outport: '<S307>/time'

    proc_control_node_B.MatrixConcatenate[0] = proc_control_node_P.time_Y0;
    proc_control_node_B.MatrixConcatenate[1] = proc_control_node_P.time_Y0;

    // SystemInitialize for Selector: '<S307>/Selector3' incorporates:
    //   Outport: '<S307>/Input'

    proc_control_node_B.Selector3 = proc_control_node_P.Input_Y0;
    for (i = 0; i < 7; i++) {
      // SystemInitialize for Selector: '<S307>/Selector4' incorporates:
      //   Outport: '<S307>/target'

      proc_control_node_B.Selector4[i] = proc_control_node_P.target_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S294>/Pre-traitement'

    // SystemInitialize for Resettable SubSystem: '<S294>/Trajectory generator'
    // InitializeConditions for DiscreteIntegrator: '<S311>/Discrete-Time Integrator' 
    proc_control_node_DW.DiscreteTimeIntegrator_DSTATE =
      proc_control_node_P.DiscreteTimeIntegrator_IC;

    // SystemInitialize for IfAction SubSystem: '<S311>/Subsystem'
    // Start for MATLABSystem: '<S324>/Polynomial Trajectory1'
    memset(&proc_control_node_DW.obj_jo.AccelerationBoundaryCondition[0], 0, 10U
           * sizeof(real_T));
    proc_control_node_DW.obj_jo.isInitialized = 0;
    for (i = 0; i < 6; i++) {
      proc_control_node_DW.obj_jo.VelocityBoundaryCondition[i] =
        proc_control_node_P.PolynomialTrajectory1_VelocityB[i];
    }

    proc_control_node_DW.obj_jo.isInitialized = 1;
    proc_control_node_DW.obj_jo.TunablePropsChanged = false;

    // End of Start for MATLABSystem: '<S324>/Polynomial Trajectory1'
    // End of SystemInitialize for SubSystem: '<S311>/Subsystem'

    // SystemInitialize for IfAction SubSystem: '<S311>/Subsystem1'
    // Start for MATLABSystem: '<S325>/Trapezoidal Velocity Profile Trajectory'
    proc_control_node_DW.obj_i.EndTime[0] = 1.0;
    proc_control_node_DW.obj_i.AccelTime[0] = 1.0;
    proc_control_node_DW.obj_i.EndTime[1] = 1.0;
    proc_control_node_DW.obj_i.AccelTime[1] = 2.0;
    proc_control_node_DW.obj_i.isInitialized = 1;
    proc_control_node_DW.obj_i.TunablePropsChanged = false;

    // End of SystemInitialize for SubSystem: '<S311>/Subsystem1'

    // SystemInitialize for Merge: '<S311>/Merge'
    proc_control_node_B.Merge[0] = proc_control_node_P.Merge_InitialOutput;

    // SystemInitialize for Merge: '<S311>/Merge1'
    proc_control_node_B.Merge1[0] = proc_control_node_P.Merge1_InitialOutput;

    // SystemInitialize for Merge: '<S311>/Merge'
    proc_control_node_B.Merge[1] = proc_control_node_P.Merge_InitialOutput;

    // SystemInitialize for Merge: '<S311>/Merge1'
    proc_control_node_B.Merge1[1] = proc_control_node_P.Merge1_InitialOutput;

    // SystemInitialize for Merge: '<S311>/Merge'
    proc_control_node_B.Merge[2] = proc_control_node_P.Merge_InitialOutput;

    // SystemInitialize for Merge: '<S311>/Merge1'
    proc_control_node_B.Merge1[2] = proc_control_node_P.Merge1_InitialOutput;

    // Start for MATLABSystem: '<S311>/Rotation Trajectory'
    memcpy(&proc_control_node_DW.obj_j.TimeScaling[0], &tmp_d[0], 33U * sizeof
           (real_T));
    proc_control_node_DW.obj_j.isInitialized = 1;
    proc_control_node_DW.obj_j.TunablePropsChanged = false;

    // End of SystemInitialize for SubSystem: '<S294>/Trajectory generator'

    // Start for MATLABSystem: '<S294>/MATLAB System1'
    // ========================================================================== 
    //  Fonctions Principales
    // ========================================================================== 
    //  Fonction appeler a l'initialisation
    //  Perform one-time calculations, such as computing constants
    for (i = 0; i < 18; i++) {
      proc_control_node_DW.obj_a.poseList[i] = 999.0;
    }

    proc_control_node_DW.obj_a.poseList[0] = 0.0;
    proc_control_node_DW.obj_a.poseList[2] = 0.0;
    proc_control_node_DW.obj_a.poseList[4] = 0.0;
    proc_control_node_DW.obj_a.poseList[6] = 1.0;
    proc_control_node_DW.obj_a.poseList[8] = 0.0;
    proc_control_node_DW.obj_a.poseList[10] = 0.0;
    proc_control_node_DW.obj_a.poseList[12] = 0.0;
    proc_control_node_DW.obj_a.poseList[14] = 0.0;
    proc_control_node_DW.obj_a.poseList[16] = 0.0;

    // initCond(1,1:7);
    proc_control_node_DW.obj_a.i = 2.0;

    // End of Start for MATLABSystem: '<S294>/MATLAB System1'

    // Start for MATLABSystem: '<S294>/MATLAB System'
    //  Fonction Reset
    //  Initialize / reset discrete-state properties
    proc_control_node_DW.obj.linearConvergence =
      proc_control_node_P.MATLABSystem_linearConvergence;
    proc_control_node_DW.obj.quaternionConvergence =
      proc_control_node_P.MATLABSystem_quaternionConverge;
    proc_control_node_DW.obj.TargetThreshold =
      proc_control_node_P.MATLABSystem_TargetThreshold;
    proc_control_node_DW.obj.isInitialized = 1;
    pro_TrajectoryManager_setupImpl(&proc_control_node_DW.obj);

    // End of SystemInitialize for SubSystem: '<S9>/singleWpts Trajectory'

    // SystemInitialize for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Start for SwitchCase: '<S7>/Switch Case'
    //  Fonction reset
    //  Initialize / reset discrete-state properties
    proc_control_node_DW.SwitchCase_ActiveSubsystem_l = -1;

    // SystemInitialize for IfAction SubSystem: '<S7>/Quaternion Non linear MPC (Not for codegen)' 
    // InitializeConditions for Delay: '<S134>/Delay'
    memcpy(&proc_control_node_DW.Delay_DSTATE_a[0],
           &proc_control_node_P.Delay_InitialCondition_g[0], sizeof(real_T) <<
           3U);

    // Start for MATLABSystem: '<S134>/MPC manager'
    memcpy(&proc_control_node_DW.obj_n.Config10[0],
           &proc_control_node_P.Config10[0], 29U * sizeof(real_T));
    memcpy(&proc_control_node_DW.obj_n.Config19[0],
           &proc_control_node_P.Config19[0], 29U * sizeof(real_T));
    for (i = 0; i < 8; i++) {
      proc_control_node_DW.obj_n.Tmin[i] = proc_control_node_P.MPC.tmin;
      proc_control_node_DW.obj_n.Tmax[i] = proc_control_node_P.MPC.tmax;
    }

    memcpy(&proc_control_node_DW.obj_n.MecConst[0],
           &proc_control_node_P.constValues[0], 41U * sizeof(real_T));
    memcpy(&proc_control_node_DW.obj_n.mvInit[0], &proc_control_node_P.Ui[0],
           sizeof(real_T) << 3U);
    proc_control_node_DW.obj_n.eInit = proc_control_node_P.MPCmanager_eInit;
    proc_control_node_DW.obj_n.isInitialized = 1;

    //  Perform one-time calculations, such as computing constants
    proc_control_node_DW.obj_n.init = 0.0;
    memset(&proc_control_node_DW.obj_n.xInit[0], 0, 13U * sizeof(real_T));

    // End of Start for MATLABSystem: '<S134>/MPC manager'
    // End of SystemInitialize for SubSystem: '<S7>/Quaternion Non linear MPC (Not for codegen)' 

    // SystemInitialize for IfAction SubSystem: '<S7>/JoyStick OpenLoop'
    // InitializeConditions for UnitDelay: '<S225>/UD'
    //
    //  Block description for '<S225>/UD':
    //
    //   Store in Global RAM

    //  Initialize / reset discrete-state properties
    for (i = 0; i < 6; i++) {
      proc_control_node_DW.UD_DSTATE[i] =
        proc_control_node_P.DiscreteDerivative_ICPrevScaled;
    }

    // End of InitializeConditions for UnitDelay: '<S225>/UD'

    // Start for MATLABSystem: '<S133>/MATLAB System'
    proc_control_node_DW.obj_m.k = proc_control_node_P.MATLABSystem_k;
    memcpy(&proc_control_node_DW.obj_m.binv[0], &proc_control_node_P.binv[0],
           48U * sizeof(real_T));
    proc_control_node_DW.obj_m.mass = proc_control_node_P.physics.mass;
    proc_control_node_DW.obj_m.volume = proc_control_node_P.physics.volume;
    proc_control_node_DW.obj_m.height = proc_control_node_P.physics.height;
    memcpy(&proc_control_node_DW.obj_m.I[0], &proc_control_node_P.physics.I[0],
           9U * sizeof(real_T));
    proc_control_node_DW.obj_m.RG[0] = proc_control_node_P.physics.RG[0];
    proc_control_node_DW.obj_m.RB[0] = proc_control_node_P.physics.RB[0];
    proc_control_node_DW.obj_m.RG[1] = proc_control_node_P.physics.RG[1];
    proc_control_node_DW.obj_m.RB[1] = proc_control_node_P.physics.RB[1];
    proc_control_node_DW.obj_m.RG[2] = proc_control_node_P.physics.RG[2];
    proc_control_node_DW.obj_m.RB[2] = proc_control_node_P.physics.RB[2];
    for (i = 0; i < 6; i++) {
      proc_control_node_DW.obj_m.AddedMass[i] =
        proc_control_node_P.physics.AddedMass[i];
      proc_control_node_DW.obj_m.CDL[i] = proc_control_node_P.physics.CDL[i];
      proc_control_node_DW.obj_m.CDQ[i] = proc_control_node_P.physics.CDQ[i];
    }

    proc_control_node_DW.obj_m.AF[0] = proc_control_node_P.physics.AF[0];
    proc_control_node_DW.obj_m.AF[1] = proc_control_node_P.physics.AF[1];
    proc_control_node_DW.obj_m.AF[2] = proc_control_node_P.physics.AF[2];
    proc_control_node_DW.obj_m.g = proc_control_node_P.physics.g;
    proc_control_node_DW.obj_m.rho = proc_control_node_P.physics.rho;
    proc_control_node_DW.obj_m.isInitialized = 1;

    // End of Start for MATLABSystem: '<S133>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S7>/JoyStick OpenLoop'

    // SystemInitialize for IfAction SubSystem: '<S7>/Adaptive Euler MPC'
    // Start for DataStoreMemory: '<S137>/DataStoreMemory - P'
    //  Perform one-time calculations, such as computing constants
    // [M,C,D,Gq] = AUVModelMatrices(in1,in2)
    //  Initialize / reset discrete-state properties
    memcpy(&proc_control_node_DW.P_e[0],
           &proc_control_node_P.DataStoreMemoryP_InitialValue[0], 400U * sizeof
           (real_T));

    // Start for DataStoreMemory: '<S137>/DataStoreMemory - x'
    memcpy(&proc_control_node_DW.x_h[0],
           &proc_control_node_P.DataStoreMemoryx_InitialValue[0], 20U * sizeof
           (real_T));

    // InitializeConditions for Memory: '<S140>/Memory'
    for (i = 0; i < 32; i++) {
      proc_control_node_DW.Memory_PreviousInput_h[i] =
        proc_control_node_P.Memory_InitialCondition[i];
    }

    // End of InitializeConditions for Memory: '<S140>/Memory'

    // InitializeConditions for UnitDelay: '<S140>/last_mv'
    memcpy(&proc_control_node_DW.last_mv_DSTATE_j[0],
           &proc_control_node_P.last_mv_InitialCondition[0], sizeof(real_T) <<
           3U);

    // InitializeConditions for Delay: '<S130>/Delay1' incorporates:
    //   UnitDelay: '<S140>/last_mv'

    memcpy(&proc_control_node_DW.Delay1_DSTATE_c[0],
           &proc_control_node_P.Delay1_InitialCondition[0], sizeof(real_T) << 3U);

    // End of SystemInitialize for SubSystem: '<S7>/Adaptive Euler MPC'

    // SystemInitialize for IfAction SubSystem: '<S7>/Adaptive quaternion MPC'
    // Start for DataStoreMemory: '<S187>/DataStoreMemory - P'
    memcpy(&proc_control_node_DW.P_d[0],
           &proc_control_node_P.DataStoreMemoryP_InitialValue_o[0], 441U *
           sizeof(real_T));

    // Start for DataStoreMemory: '<S187>/DataStoreMemory - x'
    memcpy(&proc_control_node_DW.x_b[0],
           &proc_control_node_P.DataStoreMemoryx_InitialValue_m[0], 21U * sizeof
           (real_T));

    // InitializeConditions for Memory: '<S189>/Memory'
    for (i = 0; i < 32; i++) {
      proc_control_node_DW.Memory_PreviousInput[i] =
        proc_control_node_P.Memory_InitialCondition_b[i];
    }

    // End of InitializeConditions for Memory: '<S189>/Memory'

    // InitializeConditions for UnitDelay: '<S189>/last_mv'
    memcpy(&proc_control_node_DW.last_mv_DSTATE[0],
           &proc_control_node_P.last_mv_InitialCondition_k[0], sizeof(real_T) <<
           3U);

    // InitializeConditions for Delay: '<S131>/Delay1' incorporates:
    //   UnitDelay: '<S189>/last_mv'

    memcpy(&proc_control_node_DW.Delay1_DSTATE[0],
           &proc_control_node_P.Delay1_InitialCondition_l[0], sizeof(real_T) <<
           3U);

    // End of SystemInitialize for SubSystem: '<S7>/Adaptive quaternion MPC'
    // End of SystemInitialize for SubSystem: '<Root>/Subsystem Controller'

    // SystemInitialize for Enabled SubSystem: '<Root>/Modèle Physique'
    // Start for Constant: '<S1>/Initial Body velocity '
    proc_control_node_B.InitialBodyvelocity[0] =
      proc_control_node_P.InitialBodyvelocity_Value[0];

    // Start for Constant: '<S1>/Initial Angular Rates'
    proc_control_node_B.InitialAngularRates[0] =
      proc_control_node_P.InitialAngularRates_Value[0];

    // Start for Constant: '<S1>/Initial Body velocity '
    proc_control_node_B.InitialBodyvelocity[1] =
      proc_control_node_P.InitialBodyvelocity_Value[1];

    // Start for Constant: '<S1>/Initial Angular Rates'
    proc_control_node_B.InitialAngularRates[1] =
      proc_control_node_P.InitialAngularRates_Value[1];

    // Start for Constant: '<S1>/Initial Body velocity '
    proc_control_node_B.InitialBodyvelocity[2] =
      proc_control_node_P.InitialBodyvelocity_Value[2];

    // Start for Constant: '<S1>/Initial Angular Rates'
    proc_control_node_B.InitialAngularRates[2] =
      proc_control_node_P.InitialAngularRates_Value[2];

    // InitializeConditions for TransferFcn: '<S17>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE = 0.0;

    // InitializeConditions for TransferFcn: '<S18>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_o = 0.0;

    // InitializeConditions for TransferFcn: '<S19>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_p = 0.0;

    // InitializeConditions for TransferFcn: '<S20>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_a = 0.0;

    // InitializeConditions for TransferFcn: '<S21>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_f = 0.0;

    // InitializeConditions for TransferFcn: '<S22>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_e = 0.0;

    // InitializeConditions for TransferFcn: '<S23>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_ft = 0.0;

    // InitializeConditions for TransferFcn: '<S24>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_fu = 0.0;

    // InitializeConditions for UniformRandomNumber: '<S14>/X Drift'
    i = static_cast<int32_T>(static_cast<uint32_T>(proc_control_node_P.dSeedX) >>
      16U);
    t = static_cast<int32_T>(static_cast<uint32_T>(proc_control_node_P.dSeedX) &
      32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_node_P.dSeedX) - (
      static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed = tseed;
    proc_control_node_DW.XDrift_NextOutput = (proc_control_node_P.dMaxX -
      proc_control_node_P.dMinX) * rt_urand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed) + proc_control_node_P.dMinX;

    // End of InitializeConditions for UniformRandomNumber: '<S14>/X Drift'

    // InitializeConditions for UniformRandomNumber: '<S14>/Y Drift'
    i = static_cast<int32_T>(static_cast<uint32_T>(proc_control_node_P.dSeedY) >>
      16U);
    t = static_cast<int32_T>(static_cast<uint32_T>(proc_control_node_P.dSeedY) &
      32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_node_P.dSeedY) - (
      static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed_a = tseed;
    proc_control_node_DW.YDrift_NextOutput = (proc_control_node_P.dMaxY -
      proc_control_node_P.dMinY) * rt_urand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_a) + proc_control_node_P.dMinY;

    // End of InitializeConditions for UniformRandomNumber: '<S14>/Y Drift'

    // InitializeConditions for Integrator: '<S1>/Integrator' incorporates:
    //   Integrator: '<S1>/Integrator1'

    if (rtmIsFirstInitCond((&proc_control_node_M))) {
      proc_control_node_X.Integrator_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator_CSTATE[2] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[2] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[3] = 0.0;
    }

    proc_control_node_DW.Integrator_IWORK = 1;

    // End of InitializeConditions for Integrator: '<S1>/Integrator'

    // InitializeConditions for Integrator: '<S1>/Integrator1'
    proc_control_node_DW.Integrator1_IWORK = 1;

    // InitializeConditions for Integrator: '<S1>/Integrator2' incorporates:
    //   Integrator: '<S1>/Integrator3'

    if (rtmIsFirstInitCond((&proc_control_node_M))) {
      proc_control_node_X.Integrator2_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator2_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator2_CSTATE[2] = 0.0;
      proc_control_node_X.Integrator3_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator3_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator3_CSTATE[2] = 0.0;
    }

    proc_control_node_DW.Integrator2_IWORK = 1;

    // End of InitializeConditions for Integrator: '<S1>/Integrator2'

    // InitializeConditions for Integrator: '<S1>/Integrator3'
    proc_control_node_DW.Integrator3_IWORK = 1;

    // InitializeConditions for RandomNumber: '<S25>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>
                (proc_control_node_P.BandLimitedWhiteNoise_seed) -
                (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed_j = tseed;
    proc_control_node_DW.NextOutput = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_j) * proc_control_node_P.WhiteNoise_StdDev
      + proc_control_node_P.WhiteNoise_Mean;

    // End of InitializeConditions for RandomNumber: '<S25>/White Noise'

    // InitializeConditions for RandomNumber: '<S26>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise1_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise1_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>
                (proc_control_node_P.BandLimitedWhiteNoise1_seed) - (
      static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed_d = tseed;
    proc_control_node_DW.NextOutput_b = rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_d) *
      proc_control_node_P.WhiteNoise_StdDev_d +
      proc_control_node_P.WhiteNoise_Mean_e;

    // End of InitializeConditions for RandomNumber: '<S26>/White Noise'

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_node_B.y_g[0] = proc_control_node_P.CleanOutput_Y0.Quaternion[0];
    proc_control_node_B.y_g[1] = proc_control_node_P.CleanOutput_Y0.Quaternion[1];
    proc_control_node_B.y_g[2] = proc_control_node_P.CleanOutput_Y0.Quaternion[2];
    proc_control_node_B.y_g[3] = proc_control_node_P.CleanOutput_Y0.Quaternion[3];

    // SystemInitialize for Sum: '<S16>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_node_B.Quaternion[0] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[0];
    proc_control_node_B.Quaternion[1] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[1];
    proc_control_node_B.Quaternion[2] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[2];
    proc_control_node_B.Quaternion[3] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[3];

    // End of SystemInitialize for SubSystem: '<Root>/Modèle Physique'

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S70>/Publish'
    // Start for MATLABSystem: '<S82>/SinkBlock'
    proc_control_node_DW.obj_f.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_f.isInitialized = 1;
    for (i = 0; i < 23; i++) {
      proc_control_node_B.b_zeroDelimTopic_a[i] = tmp_e[i];
    }

    proc_control_node_B.b_zeroDelimTopic_a[23] = '\x00';
    Pub_proc_control_node_63.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_a[0], 1);
    proc_control_node_DW.obj_f.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S82>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S70>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S71>/Publish'
    // Start for MATLABSystem: '<S101>/SinkBlock'
    proc_control_node_DW.obj_ap.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_ap.isInitialized = 1;
    for (i = 0; i < 8; i++) {
      b_zeroDelimTopic[i] = tmp_f[i];
    }

    b_zeroDelimTopic[8] = '\x00';
    Pub_proc_control_node_75.createPublisher(&b_zeroDelimTopic[0], 1);
    proc_control_node_DW.obj_ap.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S101>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S71>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S67>/Publish'
    // Start for MATLABSystem: '<S74>/SinkBlock'
    proc_control_node_DW.obj_kw.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_kw.isInitialized = 1;
    Pub_proc_control_node_41.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_tmp[0], 1);
    proc_control_node_DW.obj_kw.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S67>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S68>/Publish'
    // Start for MATLABSystem: '<S76>/SinkBlock'
    proc_control_node_DW.obj_k.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_k.isInitialized = 1;
    Pub_proc_control_node_243.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_tmp_j[0], 1);
    proc_control_node_DW.obj_k.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S68>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S69>/Publish'
    // Start for MATLABSystem: '<S79>/SinkBlock'
    proc_control_node_DW.obj_ab.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_ab.isInitialized = 1;
    Pub_proc_control_node_47.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_tmp_m[0], 1);
    proc_control_node_DW.obj_ab.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S69>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish2'
    // Start for MATLABSystem: '<S108>/SinkBlock'
    proc_control_node_DW.obj_p.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_p.isInitialized = 1;
    for (i = 0; i < 31; i++) {
      proc_control_node_B.b_zeroDelimTopic_j[i] = tmp_g[i];
    }

    proc_control_node_B.b_zeroDelimTopic_j[31] = '\x00';
    Pub_proc_control_node_104.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_j[0], 1);
    proc_control_node_DW.obj_p.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S108>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish2'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish4'
    // Start for MATLABSystem: '<S110>/SinkBlock'
    proc_control_node_DW.obj_lf.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_lf.isInitialized = 1;
    for (i = 0; i < 26; i++) {
      proc_control_node_B.b_zeroDelimTopic_e[i] = tmp_h[i];
    }

    proc_control_node_B.b_zeroDelimTopic_e[26] = '\x00';
    Pub_proc_control_node_106.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_e[0], 1);
    proc_control_node_DW.obj_lf.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S110>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish4'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish3'
    // Start for MATLABSystem: '<S109>/SinkBlock'
    proc_control_node_DW.obj_mj.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_mj.isInitialized = 1;
    for (i = 0; i < 23; i++) {
      proc_control_node_B.b_zeroDelimTopic_a[i] = tmp_i[i];
    }

    proc_control_node_B.b_zeroDelimTopic_a[23] = '\x00';
    Pub_proc_control_node_105.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_a[0], 1);
    proc_control_node_DW.obj_mj.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S109>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish3'

    // SystemInitialize for Merge: '<S9>/Merge1'
    proc_control_node_B.Merge1_f = proc_control_node_P.Merge1_InitialOutput_g;

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish1'
    // Start for MATLABSystem: '<S107>/SinkBlock'
    proc_control_node_DW.obj_lfs.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_lfs.isInitialized = 1;
    for (i = 0; i < 27; i++) {
      proc_control_node_B.b_zeroDelimTopic_o[i] = tmp_j[i];
    }

    proc_control_node_B.b_zeroDelimTopic_o[27] = '\x00';
    Pub_proc_control_node_122.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_o[0], 1);
    proc_control_node_DW.obj_lfs.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S107>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish1'
  }

  // set "at time zero" to false
  if (rtmIsFirstInitCond((&proc_control_node_M))) {
    rtmSetFirstInitCond((&proc_control_node_M), 0);
  }
}

// Model terminate function
void proc_control_nodeModelClass::terminate()
{
  // Terminate for Atomic SubSystem: '<Root>/Subsystem1'
  // Terminate for Atomic SubSystem: '<S10>/Subscribe'
  // Terminate for MATLABSystem: '<S326>/SourceBlock'
  if (!proc_control_node_DW.obj_b.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_b.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S326>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe2'
  // Terminate for MATLABSystem: '<S328>/SourceBlock'
  if (!proc_control_node_DW.obj_mt.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_mt.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S328>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe2'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe3'
  // Terminate for MATLABSystem: '<S329>/SourceBlock'
  if (!proc_control_node_DW.obj_o.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_o.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S329>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe3'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe1'
  // Terminate for MATLABSystem: '<S327>/SourceBlock'
  if (!proc_control_node_DW.obj_h.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_h.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S327>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe1'
  // End of Terminate for SubSystem: '<Root>/Subsystem1'

  // Terminate for Atomic SubSystem: '<Root>/ROS Input'
  // Terminate for IfAction SubSystem: '<S3>/Simulation'
  // Terminate for Atomic SubSystem: '<S48>/Subscribe'
  // Terminate for MATLABSystem: '<S56>/SourceBlock'
  if (!proc_control_node_DW.obj_i4.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_i4.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S56>/SourceBlock'
  // End of Terminate for SubSystem: '<S48>/Subscribe'

  // Terminate for Atomic SubSystem: '<S48>/Subscribe1'
  // Terminate for MATLABSystem: '<S57>/SourceBlock'
  if (!proc_control_node_DW.obj_bg.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_bg.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S57>/SourceBlock'
  // End of Terminate for SubSystem: '<S48>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S48>/Subscribe2'
  // Terminate for MATLABSystem: '<S58>/SourceBlock'
  if (!proc_control_node_DW.obj_df.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_df.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S58>/SourceBlock'
  // End of Terminate for SubSystem: '<S48>/Subscribe2'
  // End of Terminate for SubSystem: '<S3>/Simulation'

  // Terminate for IfAction SubSystem: '<S3>/Real System'
  // Terminate for Atomic SubSystem: '<S47>/Subscribe'
  // Terminate for MATLABSystem: '<S50>/SourceBlock'
  if (!proc_control_node_DW.obj_l.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_l.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S50>/SourceBlock'
  // End of Terminate for SubSystem: '<S47>/Subscribe'

  // Terminate for Atomic SubSystem: '<S47>/Subscribe1'
  // Terminate for MATLABSystem: '<S51>/SourceBlock'
  if (!proc_control_node_DW.obj_d.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_d.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S51>/SourceBlock'
  // End of Terminate for SubSystem: '<S47>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S47>/Subscribe2'
  // Terminate for MATLABSystem: '<S52>/SourceBlock'
  if (!proc_control_node_DW.obj_ow.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_ow.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S52>/SourceBlock'
  // End of Terminate for SubSystem: '<S47>/Subscribe2'
  // End of Terminate for SubSystem: '<S3>/Real System'
  // End of Terminate for SubSystem: '<Root>/ROS Input'

  // Terminate for Enabled SubSystem: '<Root>/Sensor Manager'
  // Terminate for Atomic SubSystem: '<S112>/Publish'
  // Terminate for MATLABSystem: '<S118>/SinkBlock'
  if (!proc_control_node_DW.obj_ag.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_ag.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S118>/SinkBlock'
  // End of Terminate for SubSystem: '<S112>/Publish'

  // Terminate for Atomic SubSystem: '<S111>/Publish'
  // Terminate for MATLABSystem: '<S114>/SinkBlock'
  if (!proc_control_node_DW.obj_e.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_e.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S114>/SinkBlock'
  // End of Terminate for SubSystem: '<S111>/Publish'
  // End of Terminate for SubSystem: '<Root>/Sensor Manager'

  // Terminate for Atomic SubSystem: '<S291>/Subscribe2'
  // Terminate for MATLABSystem: '<S297>/SourceBlock'
  if (!proc_control_node_DW.obj_c.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_c.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S297>/SourceBlock'
  // End of Terminate for SubSystem: '<S291>/Subscribe2'

  // Terminate for IfAction SubSystem: '<S9>/singleWpts Trajectory'
  // Terminate for Atomic SubSystem: '<S294>/Subscribe'
  // Terminate for MATLABSystem: '<S308>/SourceBlock'
  if (!proc_control_node_DW.obj_hd.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_hd.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S308>/SourceBlock'
  // End of Terminate for SubSystem: '<S294>/Subscribe'
  // End of Terminate for SubSystem: '<S9>/singleWpts Trajectory'

  // Terminate for Enabled SubSystem: '<Root>/ROS Output'
  // Terminate for Atomic SubSystem: '<S70>/Publish'
  // Terminate for MATLABSystem: '<S82>/SinkBlock'
  if (!proc_control_node_DW.obj_f.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_f.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S82>/SinkBlock'
  // End of Terminate for SubSystem: '<S70>/Publish'

  // Terminate for Atomic SubSystem: '<S71>/Publish'
  // Terminate for MATLABSystem: '<S101>/SinkBlock'
  if (!proc_control_node_DW.obj_ap.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_ap.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S101>/SinkBlock'
  // End of Terminate for SubSystem: '<S71>/Publish'

  // Terminate for Atomic SubSystem: '<S67>/Publish'
  // Terminate for MATLABSystem: '<S74>/SinkBlock'
  if (!proc_control_node_DW.obj_kw.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_kw.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S74>/SinkBlock'
  // End of Terminate for SubSystem: '<S67>/Publish'

  // Terminate for Atomic SubSystem: '<S68>/Publish'
  // Terminate for MATLABSystem: '<S76>/SinkBlock'
  if (!proc_control_node_DW.obj_k.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_k.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S76>/SinkBlock'
  // End of Terminate for SubSystem: '<S68>/Publish'

  // Terminate for Atomic SubSystem: '<S69>/Publish'
  // Terminate for MATLABSystem: '<S79>/SinkBlock'
  if (!proc_control_node_DW.obj_ab.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_ab.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S79>/SinkBlock'
  // End of Terminate for SubSystem: '<S69>/Publish'
  // End of Terminate for SubSystem: '<Root>/ROS Output'

  // Terminate for Atomic SubSystem: '<S5>/Publish2'
  // Terminate for MATLABSystem: '<S108>/SinkBlock'
  if (!proc_control_node_DW.obj_p.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_p.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S108>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish2'

  // Terminate for Atomic SubSystem: '<S5>/Publish4'
  // Terminate for MATLABSystem: '<S110>/SinkBlock'
  if (!proc_control_node_DW.obj_lf.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_lf.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S110>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish4'

  // Terminate for Atomic SubSystem: '<S5>/Publish3'
  // Terminate for MATLABSystem: '<S109>/SinkBlock'
  if (!proc_control_node_DW.obj_mj.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_mj.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S109>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish3'

  // Terminate for Atomic SubSystem: '<S5>/Publish1'
  // Terminate for MATLABSystem: '<S107>/SinkBlock'
  if (!proc_control_node_DW.obj_lfs.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_lfs.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S107>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish1'
}

// Constructor
proc_control_nodeModelClass::proc_control_nodeModelClass() :
  proc_control_node_B(),
  proc_control_node_DW(),
  proc_control_node_X(),
  proc_control_node_PrevZCX(),
  proc_control_node_M()
{
  // Currently there is no constructor body generated.
}

// Destructor
proc_control_nodeModelClass::~proc_control_nodeModelClass()
{
  // Currently there is no destructor body generated.
}

// Real-Time Model get method
proc_control_nodeModelClass::RT_MODEL_proc_control_node_T
  * proc_control_nodeModelClass::getRTM()
{
  return (&proc_control_node_M);
}

//
// File trailer for generated code.
//
// [EOF]
//
