//
// Academic License - for use in teaching, academic research, and meeting
// course requirements at degree granting institutions only.  Not for
// government, commercial, or other organizational use.
//
// File: proc_control_node.cpp
//
// Code generated for Simulink model 'proc_control_node'.
//
// Model version                  : 1.187
// Simulink Coder version         : 9.5 (R2021a) 14-Nov-2020
// C/C++ source code generated on : Thu Nov 18 23:37:19 2021
//
// Target selection: ert.tlc
// Embedded hardware selection: ARM Compatible->ARM 64-bit (LLP64)
// Code generation objectives: Unspecified
// Validation result: Not run
//
#include "proc_control_node.h"
#include "proc_control_node_private.h"

// Named constants for MATLAB Function: '<S169>/FixedHorizonOptimizer'
const real_T proc_control_node_nu = 8.0;
const real_T proc_control_node_ny = 12.0;

// Named constants for MATLAB Function: '<S211>/FixedHorizonOptimizer'
const real_T proc_control_node_ny_f = 13.0;
static void rate_scheduler(proc_control_nodeModelClass::
  RT_MODEL_proc_control_node_T *const proc_control_node_M);
uint32_T plook_u32d_binckpang(real_T u, const real_T bp[], uint32_T maxIndex,
  uint32_T *prevIndex)
{
  uint32_T bpIndex;

  // Prelookup - Index only
  // Index Search method: 'binary'
  // Interpolation method: 'Use nearest'
  // Use previous index: 'on'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'on'

  if (u < bp[maxIndex]) {
    bpIndex = binsearch_u32d_prevIdx(u, bp, *prevIndex, maxIndex);
    if ((bpIndex < maxIndex) && (bp[bpIndex + 1U] - u <= u - bp[bpIndex])) {
      bpIndex++;
    }
  } else {
    bpIndex = maxIndex;
  }

  *prevIndex = bpIndex;
  return bpIndex;
}

uint32_T plook_u32u16_binckpan(uint16_T u, const uint16_T bp[], uint32_T
  maxIndex, uint32_T *prevIndex)
{
  uint32_T bpIndex;

  // Prelookup - Index only
  // Index Search method: 'binary'
  // Interpolation method: 'Use nearest'
  // Extrapolation method: 'Clip'
  // Use previous index: 'on'
  // Use last breakpoint for index at or above upper limit: 'on'
  // Remove protection against out-of-range input in generated code: 'off'

  if (u <= bp[0U]) {
    bpIndex = 0U;
  } else if (u < bp[maxIndex]) {
    bpIndex = binsearch_u32u16_prevIdx(u, bp, *prevIndex, maxIndex);
    if ((bpIndex < maxIndex) && (static_cast<uint16_T>(static_cast<uint32_T>
          (bp[bpIndex + 1U]) - u) <= static_cast<uint16_T>(static_cast<uint32_T>
          (u) - bp[bpIndex]))) {
      bpIndex++;
    }
  } else {
    bpIndex = maxIndex;
  }

  *prevIndex = bpIndex;
  return bpIndex;
}

uint32_T binsearch_u32d_prevIdx(real_T u, const real_T bp[], uint32_T startIndex,
  uint32_T maxIndex)
{
  uint32_T bpIndex;
  uint32_T found;
  uint32_T iLeft;
  uint32_T iRght;

  // Binary Search using Previous Index
  bpIndex = startIndex;
  iLeft = 0U;
  iRght = maxIndex;
  found = 0U;
  while (found == 0U) {
    if (u < bp[bpIndex]) {
      iRght = bpIndex - 1U;
      bpIndex = ((bpIndex + iLeft) - 1U) >> 1U;
    } else if (u < bp[bpIndex + 1U]) {
      found = 1U;
    } else {
      iLeft = bpIndex + 1U;
      bpIndex = ((bpIndex + iRght) + 1U) >> 1U;
    }
  }

  return bpIndex;
}

uint32_T binsearch_u32u16_prevIdx(uint16_T u, const uint16_T bp[], uint32_T
  startIndex, uint32_T maxIndex)
{
  uint32_T bpIndex;
  uint32_T found;
  uint32_T iLeft;
  uint32_T iRght;

  // Binary Search using Previous Index
  bpIndex = startIndex;
  iLeft = 0U;
  iRght = maxIndex;
  found = 0U;
  while (found == 0U) {
    if (u < bp[bpIndex]) {
      iRght = bpIndex - 1U;
      bpIndex = ((bpIndex + iLeft) - 1U) >> 1U;
    } else if (u < bp[bpIndex + 1U]) {
      found = 1U;
    } else {
      iLeft = bpIndex + 1U;
      bpIndex = ((bpIndex + iRght) + 1U) >> 1U;
    }
  }

  return bpIndex;
}

//
//   This function updates active task flag for each subrate.
// The function is called at model base rate, hence the
// generated code self-manages all its subrates.
//
static void rate_scheduler(proc_control_nodeModelClass::
  RT_MODEL_proc_control_node_T *const proc_control_node_M)
{
  // Compute which subrates run during the next base time step.  Subrates
  //  are an integer multiple of the base rate counter.  Therefore, the subtask
  //  counter is reset when it reaches its limit (zero means run).

  (proc_control_node_M->Timing.TaskCounters.TID[2])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[2]) > 2) {// Sample time: [0.05s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[2] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[3])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[3]) > 5) {// Sample time: [0.1s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[3] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[4])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[4]) > 9) {
                                   // Sample time: [0.16666666666666666s, 0.0s]
    proc_control_node_M->Timing.TaskCounters.TID[4] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[5])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[5]) > 59) {// Sample time: [1.0s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[5] = 0;
  }

  (proc_control_node_M->Timing.TaskCounters.TID[6])++;
  if ((proc_control_node_M->Timing.TaskCounters.TID[6]) > 299) {// Sample time: [5.0s, 0.0s] 
    proc_control_node_M->Timing.TaskCounters.TID[6] = 0;
  }
}

//
// This function updates continuous states using the ODE3 fixed-step
// solver algorithm
//
void proc_control_nodeModelClass::rt_ertODEUpdateContinuousStates(RTWSolverInfo *
  si )
{
  // Solver Matrices
  static const real_T rt_ODE3_A[3] = {
    1.0/2.0, 3.0/4.0, 1.0
  };

  static const real_T rt_ODE3_B[3][3] = {
    { 1.0/2.0, 0.0, 0.0 },

    { 0.0, 3.0/4.0, 0.0 },

    { 2.0/9.0, 1.0/3.0, 4.0/9.0 }
  };

  time_T t = rtsiGetT(si);
  time_T tnew = rtsiGetSolverStopTime(si);
  time_T h = rtsiGetStepSize(si);
  real_T *x = rtsiGetContStates(si);
  ODE3_IntgData *id = static_cast<ODE3_IntgData *>(rtsiGetSolverData(si));
  real_T *y = id->y;
  real_T *f0 = id->f[0];
  real_T *f1 = id->f[1];
  real_T *f2 = id->f[2];
  real_T hB[3];
  int_T i;
  int_T nXc = 21;
  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);

  // Save the state values at time t in y, we'll use x as ynew.
  (void) memcpy(y, x,
                static_cast<uint_T>(nXc)*sizeof(real_T));

  // Assumes that rtsiSetT and ModelOutputs are up-to-date
  // f0 = f(t,y)
  rtsiSetdX(si, f0);
  proc_control_node_derivatives();

  // f(:,2) = feval(odefile, t + hA(1), y + f*hB(:,1), args(:)(*));
  hB[0] = h * rt_ODE3_B[0][0];
  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0]);
  }

  rtsiSetT(si, t + h*rt_ODE3_A[0]);
  rtsiSetdX(si, f1);
  this->step();
  proc_control_node_derivatives();

  // f(:,3) = feval(odefile, t + hA(2), y + f*hB(:,2), args(:)(*));
  for (i = 0; i <= 1; i++) {
    hB[i] = h * rt_ODE3_B[1][i];
  }

  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1]);
  }

  rtsiSetT(si, t + h*rt_ODE3_A[1]);
  rtsiSetdX(si, f2);
  this->step();
  proc_control_node_derivatives();

  // tnew = t + hA(3);
  // ynew = y + f*hB(:,3);
  for (i = 0; i <= 2; i++) {
    hB[i] = h * rt_ODE3_B[2][i];
  }

  for (i = 0; i < nXc; i++) {
    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2]);
  }

  rtsiSetT(si, tnew);
  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);
}

//
// Output and update for atomic system:
//    '<S280>/MATLAB Function1'
//    '<S278>/MATLAB Function1'
//
void proc_control_nodeModelClass::proc_control_no_MATLABFunction1(const real_T
  rtu_matrix[13], real_T rty_y[130], B_MATLABFunction1_proc_contro_T *localB)
{
  int32_T ibmat;
  int32_T itilerow;
  int32_T jcol;
  memcpy(&localB->matrix[0], &rtu_matrix[0], 13U * sizeof(real_T));
  localB->matrix[9] = -rtu_matrix[9];
  for (jcol = 0; jcol < 13; jcol++) {
    ibmat = jcol * 10;
    for (itilerow = 0; itilerow < 10; itilerow++) {
      rty_y[ibmat + itilerow] = localB->matrix[jcol];
    }
  }
}

// Function for MATLAB Function: '<S239>/MATLAB Function1'
real_T proc_control_nodeModelClass::proc_control_node_maximum_j(const real_T x[4])
{
  real_T ex;
  int32_T idx;
  int32_T k;
  boolean_T exitg1;
  if (!rtIsNaN(x[0])) {
    idx = 1;
  } else {
    idx = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 5)) {
      if (!rtIsNaN(x[k - 1])) {
        idx = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (idx == 0) {
    ex = x[0];
  } else {
    ex = x[idx - 1];
    while (idx + 1 < 5) {
      if (ex < x[idx]) {
        ex = x[idx];
      }

      idx++;
    }
  }

  return ex;
}

// Function for MATLAB Function: '<S270>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_e(int32_T n, const
  real_T x[168], int32_T ix0)
{
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_ci = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        proc_control_node_B.absxk_g = fabs(x[k - 1]);
        if (proc_control_node_B.absxk_g > proc_control_node_B.scale_ci) {
          t = proc_control_node_B.scale_ci / proc_control_node_B.absxk_g;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_ci = proc_control_node_B.absxk_g;
        } else {
          t = proc_control_node_B.absxk_g / proc_control_node_B.scale_ci;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_ci * sqrt(y);
    }
  }

  return y;
}

real_T proc_control_nodeModelClass::proc_control_node_rt_hypotd_snf(real_T u0,
  real_T u1)
{
  real_T y;
  proc_control_node_B.a_p = fabs(u0);
  y = fabs(u1);
  if (proc_control_node_B.a_p < y) {
    proc_control_node_B.a_p /= y;
    y *= sqrt(proc_control_node_B.a_p * proc_control_node_B.a_p + 1.0);
  } else if (proc_control_node_B.a_p > y) {
    y /= proc_control_node_B.a_p;
    y = sqrt(y * y + 1.0) * proc_control_node_B.a_p;
  } else if (!rtIsNaN(y)) {
    y = proc_control_node_B.a_p * 1.4142135623730951;
  }

  return y;
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_k(int32_T m, int32_T n,
  const real_T A[168], int32_T ia0, const real_T x[168], int32_T ix0, real_T y[8])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 21 + ia0;
    for (iac = ia0; iac <= b; iac += 21) {
      proc_control_node_B.ix_p5 = ix0;
      proc_control_node_B.c_g = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_g += A[ia - 1] * x[proc_control_node_B.ix_p5 - 1];
        proc_control_node_B.ix_p5++;
      }

      y[b_iy] += proc_control_node_B.c_g;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_k(int32_T m, int32_T n,
  real_T alpha1, int32_T ix0, const real_T y[8], real_T A[168], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    proc_control_node_B.jA_k = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_ga = y[jy] * alpha1;
        ix = ix0;
        b = m + proc_control_node_B.jA_k;
        for (ijA = proc_control_node_B.jA_k; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_ga;
          ix++;
        }
      }

      jy++;
      proc_control_node_B.jA_k += 21;
    }
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_xzlarf_a3(int32_T m, int32_T
  n, int32_T iv0, real_T tau, real_T C[168], int32_T ic0, real_T work[8])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_j = m;
    proc_control_node_B.lastc_h = iv0 + m;
    while ((proc_control_node_B.lastv_j > 0) && (C[proc_control_node_B.lastc_h -
            2] == 0.0)) {
      proc_control_node_B.lastv_j--;
      proc_control_node_B.lastc_h--;
    }

    proc_control_node_B.lastc_h = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_h > 0)) {
      proc_control_node_B.coltop_d = (proc_control_node_B.lastc_h - 1) * 21 +
        ic0;
      proc_control_node_B.ia_o = proc_control_node_B.coltop_d;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_o <= (proc_control_node_B.coltop_d +
             proc_control_node_B.lastv_j) - 1) {
          if (C[proc_control_node_B.ia_o - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_o++;
          }
        } else {
          proc_control_node_B.lastc_h--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_j = 0;
    proc_control_node_B.lastc_h = 0;
  }

  if (proc_control_node_B.lastv_j > 0) {
    proc_control_node_xgemv_k(proc_control_node_B.lastv_j,
      proc_control_node_B.lastc_h, C, ic0, C, iv0, work);
    proc_control_node_xgerc_k(proc_control_node_B.lastv_j,
      proc_control_node_B.lastc_h, -tau, iv0, work, C, ic0);
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrf_i(real_T A[168], int32_T
  ia0, int32_T m, int32_T n, int32_T nfxd, real_T tau[8])
{
  memset(&proc_control_node_B.work_lu[0], 0, sizeof(real_T) << 3U);
  proc_control_node_B.i_gn = 0;
  while (proc_control_node_B.i_gn <= nfxd - 1) {
    proc_control_node_B.ii_hy = ((proc_control_node_B.i_gn * 21 + ia0) +
      proc_control_node_B.i_gn) - 1;
    proc_control_node_B.mmi_tmp_b = m - proc_control_node_B.i_gn;
    if (proc_control_node_B.i_gn + 1 < m) {
      proc_control_node_B.b_atmp_a = A[proc_control_node_B.ii_hy];
      tau[proc_control_node_B.i_gn] = 0.0;
      if (proc_control_node_B.mmi_tmp_b > 0) {
        proc_control_node_B.beta1_j = proc_control_node_xnrm2_e
          (proc_control_node_B.mmi_tmp_b - 1, A, proc_control_node_B.ii_hy + 2);
        if (proc_control_node_B.beta1_j != 0.0) {
          proc_control_node_B.beta1_j = proc_control_node_rt_hypotd_snf
            (A[proc_control_node_B.ii_hy], proc_control_node_B.beta1_j);
          if (A[proc_control_node_B.ii_hy] >= 0.0) {
            proc_control_node_B.beta1_j = -proc_control_node_B.beta1_j;
          }

          if (fabs(proc_control_node_B.beta1_j) < 1.0020841800044864E-292) {
            proc_control_node_B.knt_g = -1;
            proc_control_node_B.mmip1_p = proc_control_node_B.ii_hy +
              proc_control_node_B.mmi_tmp_b;
            do {
              proc_control_node_B.knt_g++;
              proc_control_node_B.b_k_cy = proc_control_node_B.ii_hy + 1;
              while (proc_control_node_B.b_k_cy + 1 <=
                     proc_control_node_B.mmip1_p) {
                A[proc_control_node_B.b_k_cy] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_cy++;
              }

              proc_control_node_B.beta1_j *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp_a *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1_j) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1_j = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp_a, proc_control_node_xnrm2_e
               (proc_control_node_B.mmi_tmp_b - 1, A, proc_control_node_B.ii_hy
                + 2));
            if (proc_control_node_B.b_atmp_a >= 0.0) {
              proc_control_node_B.beta1_j = -proc_control_node_B.beta1_j;
            }

            tau[proc_control_node_B.i_gn] = (proc_control_node_B.beta1_j -
              proc_control_node_B.b_atmp_a) / proc_control_node_B.beta1_j;
            proc_control_node_B.b_atmp_a = 1.0 / (proc_control_node_B.b_atmp_a -
              proc_control_node_B.beta1_j);
            proc_control_node_B.b_k_cy = proc_control_node_B.ii_hy + 1;
            while (proc_control_node_B.b_k_cy + 1 <= proc_control_node_B.mmip1_p)
            {
              A[proc_control_node_B.b_k_cy] *= proc_control_node_B.b_atmp_a;
              proc_control_node_B.b_k_cy++;
            }

            proc_control_node_B.mmip1_p = 0;
            while (proc_control_node_B.mmip1_p <= proc_control_node_B.knt_g) {
              proc_control_node_B.beta1_j *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1_p++;
            }

            proc_control_node_B.b_atmp_a = proc_control_node_B.beta1_j;
          } else {
            tau[proc_control_node_B.i_gn] = (proc_control_node_B.beta1_j -
              A[proc_control_node_B.ii_hy]) / proc_control_node_B.beta1_j;
            proc_control_node_B.b_atmp_a = 1.0 / (A[proc_control_node_B.ii_hy] -
              proc_control_node_B.beta1_j);
            proc_control_node_B.knt_g = proc_control_node_B.ii_hy +
              proc_control_node_B.mmi_tmp_b;
            proc_control_node_B.mmip1_p = proc_control_node_B.ii_hy + 1;
            while (proc_control_node_B.mmip1_p + 1 <= proc_control_node_B.knt_g)
            {
              A[proc_control_node_B.mmip1_p] *= proc_control_node_B.b_atmp_a;
              proc_control_node_B.mmip1_p++;
            }

            proc_control_node_B.b_atmp_a = proc_control_node_B.beta1_j;
          }
        }
      }

      A[proc_control_node_B.ii_hy] = proc_control_node_B.b_atmp_a;
    } else {
      tau[proc_control_node_B.i_gn] = 0.0;
    }

    if (proc_control_node_B.i_gn + 1 < n) {
      proc_control_node_B.b_atmp_a = A[proc_control_node_B.ii_hy];
      A[proc_control_node_B.ii_hy] = 1.0;
      proc_control_node_xzlarf_a3(proc_control_node_B.mmi_tmp_b, (n -
        proc_control_node_B.i_gn) - 1, proc_control_node_B.ii_hy + 1,
        tau[proc_control_node_B.i_gn], A, proc_control_node_B.ii_hy + 22,
        proc_control_node_B.work_lu);
      A[proc_control_node_B.ii_hy] = proc_control_node_B.b_atmp_a;
    }

    proc_control_node_B.i_gn++;
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_e(real_T A[168],
  real_T tau[8])
{
  memset(&tau[0], 0, sizeof(real_T) << 3U);
  proc_control_node_qrf_i(A, 1, 21, 8, 8, tau);
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_xorgqr_g(int32_T m, int32_T
  n, int32_T k, real_T A[168], int32_T ia0, const real_T tau[8], int32_T itau0)
{
  int32_T exitg1;
  boolean_T exitg2;
  if (n >= 1) {
    proc_control_node_B.itau_f = k;
    while (proc_control_node_B.itau_f <= n - 1) {
      proc_control_node_B.i_gg = (proc_control_node_B.itau_f * 21 + ia0) - 1;
      proc_control_node_B.iaii_d = 0;
      while (proc_control_node_B.iaii_d <= m - 1) {
        A[proc_control_node_B.i_gg + proc_control_node_B.iaii_d] = 0.0;
        proc_control_node_B.iaii_d++;
      }

      A[proc_control_node_B.i_gg + proc_control_node_B.itau_f] = 1.0;
      proc_control_node_B.itau_f++;
    }

    proc_control_node_B.itau_f = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_f1[0], 0, sizeof(real_T) << 3U);
    proc_control_node_B.i_gg = k;
    while (proc_control_node_B.i_gg >= 1) {
      proc_control_node_B.iaii_d = (((proc_control_node_B.i_gg - 1) * 21 + ia0)
        + proc_control_node_B.i_gg) - 1;
      if (proc_control_node_B.i_gg < n) {
        A[proc_control_node_B.iaii_d - 1] = 1.0;
        proc_control_node_B.lastc_l = (m - proc_control_node_B.i_gg) - 1;
        if (tau[proc_control_node_B.itau_f] != 0.0) {
          proc_control_node_B.lastv_eb = proc_control_node_B.lastc_l + 2;
          proc_control_node_B.lastc_l += proc_control_node_B.iaii_d;
          while ((proc_control_node_B.lastv_eb > 0) &&
                 (A[proc_control_node_B.lastc_l] == 0.0)) {
            proc_control_node_B.lastv_eb--;
            proc_control_node_B.lastc_l--;
          }

          proc_control_node_B.lastc_l = n - proc_control_node_B.i_gg;
          exitg2 = false;
          while ((!exitg2) && (proc_control_node_B.lastc_l > 0)) {
            proc_control_node_B.coltop_ez = ((proc_control_node_B.lastc_l - 1) *
              21 + proc_control_node_B.iaii_d) + 20;
            proc_control_node_B.b_ia_h = proc_control_node_B.coltop_ez;
            do {
              exitg1 = 0;
              if (proc_control_node_B.b_ia_h + 1 <=
                  proc_control_node_B.coltop_ez + proc_control_node_B.lastv_eb)
              {
                if (A[proc_control_node_B.b_ia_h] != 0.0) {
                  exitg1 = 1;
                } else {
                  proc_control_node_B.b_ia_h++;
                }
              } else {
                proc_control_node_B.lastc_l--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          proc_control_node_B.lastv_eb = 0;
          proc_control_node_B.lastc_l = 0;
        }

        if (proc_control_node_B.lastv_eb > 0) {
          proc_control_node_xgemv_k(proc_control_node_B.lastv_eb,
            proc_control_node_B.lastc_l, A, proc_control_node_B.iaii_d + 21, A,
            proc_control_node_B.iaii_d, proc_control_node_B.work_f1);
          proc_control_node_xgerc_k(proc_control_node_B.lastv_eb,
            proc_control_node_B.lastc_l, -tau[proc_control_node_B.itau_f],
            proc_control_node_B.iaii_d, proc_control_node_B.work_f1, A,
            proc_control_node_B.iaii_d + 21);
        }
      }

      if (proc_control_node_B.i_gg < m) {
        proc_control_node_B.lastv_eb = (proc_control_node_B.iaii_d + m) -
          proc_control_node_B.i_gg;
        proc_control_node_B.lastc_l = proc_control_node_B.iaii_d;
        while (proc_control_node_B.lastc_l + 1 <= proc_control_node_B.lastv_eb)
        {
          A[proc_control_node_B.lastc_l] *= -tau[proc_control_node_B.itau_f];
          proc_control_node_B.lastc_l++;
        }
      }

      A[proc_control_node_B.iaii_d - 1] = 1.0 - tau[proc_control_node_B.itau_f];
      proc_control_node_B.lastv_eb = 0;
      while (proc_control_node_B.lastv_eb <= proc_control_node_B.i_gg - 2) {
        A[(proc_control_node_B.iaii_d - proc_control_node_B.lastv_eb) - 2] = 0.0;
        proc_control_node_B.lastv_eb++;
      }

      proc_control_node_B.itau_f--;
      proc_control_node_B.i_gg--;
    }
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_qr_h(const real_T A[168],
  real_T Q[168], real_T R[64])
{
  memcpy(&proc_control_node_B.b_A_ch[0], &A[0], 168U * sizeof(real_T));
  proc_control_node_xgeqrf_e(proc_control_node_B.b_A_ch,
    proc_control_node_B.tau_l);
  for (proc_control_node_B.j_il = 0; proc_control_node_B.j_il < 8;
       proc_control_node_B.j_il++) {
    proc_control_node_B.i_o = 0;
    while (proc_control_node_B.i_o <= proc_control_node_B.j_il) {
      R[proc_control_node_B.i_o + (proc_control_node_B.j_il << 3)] =
        proc_control_node_B.b_A_ch[21 * proc_control_node_B.j_il +
        proc_control_node_B.i_o];
      proc_control_node_B.i_o++;
    }

    proc_control_node_B.i_o = proc_control_node_B.j_il + 1;
    while (proc_control_node_B.i_o + 1 < 9) {
      R[proc_control_node_B.i_o + (proc_control_node_B.j_il << 3)] = 0.0;
      proc_control_node_B.i_o++;
    }
  }

  proc_control_node_xorgqr_g(21, 8, 8, proc_control_node_B.b_A_ch, 1,
    proc_control_node_B.tau_l, 1);
  proc_control_node_B.i_o = 0;
  for (proc_control_node_B.j_il = 0; proc_control_node_B.j_il < 8;
       proc_control_node_B.j_il++) {
    memcpy(&Q[proc_control_node_B.i_o],
           &proc_control_node_B.b_A_ch[proc_control_node_B.i_o], 21U * sizeof
           (real_T));
    proc_control_node_B.i_o += 21;
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::EKFCorrectorAdditive_getMeasure(const real_T
  Rs[64], const real_T x[13], const real_T S[169], real_T zEstimated[8], real_T
  Pxy[104], real_T Sy[64], real_T dHdx[104])
{
  static const int8_T b[8] = { 2, 3, 4, 5, 6, 10, 11, 12 };

  for (proc_control_node_B.i27 = 0; proc_control_node_B.i27 < 8;
       proc_control_node_B.i27++) {
    proc_control_node_B.z_oy[proc_control_node_B.i27] =
      x[b[proc_control_node_B.i27]];
  }

  for (proc_control_node_B.j_h = 0; proc_control_node_B.j_h < 13;
       proc_control_node_B.j_h++) {
    memcpy(&proc_control_node_B.imvec_l[0], &x[0], 13U * sizeof(real_T));
    proc_control_node_B.epsilon_o = 1.4901161193847656E-8 * fabs
      (x[proc_control_node_B.j_h]);
    if ((1.4901161193847656E-8 > proc_control_node_B.epsilon_o) || rtIsNaN
        (proc_control_node_B.epsilon_o)) {
      proc_control_node_B.epsilon_o = 1.4901161193847656E-8;
    }

    proc_control_node_B.imvec_l[proc_control_node_B.j_h] =
      x[proc_control_node_B.j_h] + proc_control_node_B.epsilon_o;
    for (proc_control_node_B.i27 = 0; proc_control_node_B.i27 < 8;
         proc_control_node_B.i27++) {
      dHdx[proc_control_node_B.i27 + (proc_control_node_B.j_h << 3)] =
        (proc_control_node_B.imvec_l[b[proc_control_node_B.i27]] -
         proc_control_node_B.z_oy[proc_control_node_B.i27]) /
        proc_control_node_B.epsilon_o;
    }
  }

  for (proc_control_node_B.i27 = 0; proc_control_node_B.i27 < 8;
       proc_control_node_B.i27++) {
    zEstimated[proc_control_node_B.i27] = x[b[proc_control_node_B.i27]];
  }

  proc_control_node_B.i27 = 0;
  for (proc_control_node_B.i29 = 0; proc_control_node_B.i29 < 13;
       proc_control_node_B.i29++) {
    memset(&proc_control_node_B.S[proc_control_node_B.i27], 0, 13U * sizeof
           (real_T));
    proc_control_node_B.i27 += 13;
  }

  proc_control_node_B.i27 = 0;
  for (proc_control_node_B.j_h = 0; proc_control_node_B.j_h < 13;
       proc_control_node_B.j_h++) {
    proc_control_node_B.i_ni = 0;
    for (proc_control_node_B.i29 = 0; proc_control_node_B.i29 < 13;
         proc_control_node_B.i29++) {
      for (proc_control_node_B.i28 = 0; proc_control_node_B.i28 < 13;
           proc_control_node_B.i28++) {
        proc_control_node_B.S_tmp = proc_control_node_B.i28 +
          proc_control_node_B.i_ni;
        proc_control_node_B.S[proc_control_node_B.S_tmp] +=
          S[proc_control_node_B.i28 + proc_control_node_B.i27] *
          S[proc_control_node_B.i29 + proc_control_node_B.i27];
      }

      proc_control_node_B.i_ni += 13;
    }

    proc_control_node_B.i27 += 13;
  }

  proc_control_node_B.i27 = 0;
  for (proc_control_node_B.j_h = 0; proc_control_node_B.j_h < 8;
       proc_control_node_B.j_h++) {
    memset(&Pxy[proc_control_node_B.i27], 0, 13U * sizeof(real_T));
    proc_control_node_B.i27 += 13;
  }

  proc_control_node_B.i27 = 0;
  for (proc_control_node_B.j_h = 0; proc_control_node_B.j_h < 8;
       proc_control_node_B.j_h++) {
    proc_control_node_B.i29 = 0;
    proc_control_node_B.i28 = 0;
    proc_control_node_B.coffset_i = proc_control_node_B.j_h * 13;
    for (proc_control_node_B.i_ni = 0; proc_control_node_B.i_ni < 13;
         proc_control_node_B.i_ni++) {
      proc_control_node_B.aoffset_c = proc_control_node_B.i_ni * 13;
      proc_control_node_B.epsilon_o = 0.0;
      for (proc_control_node_B.S_tmp = 0; proc_control_node_B.S_tmp < 13;
           proc_control_node_B.S_tmp++) {
        proc_control_node_B.Pxy_tmp = proc_control_node_B.S_tmp +
          proc_control_node_B.i27;
        Pxy[proc_control_node_B.Pxy_tmp] +=
          proc_control_node_B.S[proc_control_node_B.S_tmp +
          proc_control_node_B.i29] * dHdx[proc_control_node_B.i28 +
          proc_control_node_B.j_h];
        proc_control_node_B.epsilon_o += dHdx[(proc_control_node_B.S_tmp << 3) +
          proc_control_node_B.j_h] * S[proc_control_node_B.aoffset_c +
          proc_control_node_B.S_tmp];
      }

      proc_control_node_B.i29 += 13;
      proc_control_node_B.i28 += 8;
      proc_control_node_B.y_j[proc_control_node_B.coffset_i +
        proc_control_node_B.i_ni] = proc_control_node_B.epsilon_o;
      proc_control_node_B.y_ei[proc_control_node_B.i_ni + 21 *
        proc_control_node_B.j_h] = proc_control_node_B.y_j[13 *
        proc_control_node_B.j_h + proc_control_node_B.i_ni];
    }

    proc_control_node_B.i27 += 13;
  }

  proc_control_node_B.i27 = 0;
  for (proc_control_node_B.i29 = 0; proc_control_node_B.i29 < 8;
       proc_control_node_B.i29++) {
    proc_control_node_B.i28 = 0;
    for (proc_control_node_B.j_h = 0; proc_control_node_B.j_h < 8;
         proc_control_node_B.j_h++) {
      proc_control_node_B.y_ei[(proc_control_node_B.j_h +
        proc_control_node_B.i27) + 13] = Rs[proc_control_node_B.i28 +
        proc_control_node_B.i29];
      proc_control_node_B.i28 += 8;
    }

    proc_control_node_B.i27 += 21;
  }

  proc_control_node_qr_h(proc_control_node_B.y_ei, proc_control_node_B.a__1_h2,
    proc_control_node_B.R);
  proc_control_node_B.i27 = 0;
  for (proc_control_node_B.i29 = 0; proc_control_node_B.i29 < 8;
       proc_control_node_B.i29++) {
    proc_control_node_B.i28 = 0;
    for (proc_control_node_B.j_h = 0; proc_control_node_B.j_h < 8;
         proc_control_node_B.j_h++) {
      Sy[proc_control_node_B.j_h + proc_control_node_B.i27] =
        proc_control_node_B.R[proc_control_node_B.i28 + proc_control_node_B.i29];
      proc_control_node_B.i28 += 8;
    }

    proc_control_node_B.i27 += 8;
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_ga(const real_T A
  [64], real_T B[104])
{
  int32_T i;
  int32_T j;
  int32_T k;
  int32_T tmp;
  int32_T tmp_0;
  for (j = 0; j < 13; j++) {
    proc_control_node_B.jBcol_a = j << 3;
    for (k = 0; k < 8; k++) {
      proc_control_node_B.kAcol_n = k << 3;
      tmp = k + proc_control_node_B.jBcol_a;
      proc_control_node_B.d7 = B[tmp];
      if (proc_control_node_B.d7 != 0.0) {
        B[tmp] = proc_control_node_B.d7 / A[k + proc_control_node_B.kAcol_n];
        for (i = k + 2; i < 9; i++) {
          tmp_0 = (i + proc_control_node_B.jBcol_a) - 1;
          B[tmp_0] -= A[(i + proc_control_node_B.kAcol_n) - 1] * B[tmp];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_ga0(const real_T A
  [64], real_T B[104])
{
  int32_T i;
  int32_T j;
  int32_T k;
  int32_T tmp;
  int32_T tmp_0;
  for (j = 0; j < 13; j++) {
    proc_control_node_B.jBcol_l = j << 3;
    for (k = 7; k >= 0; k--) {
      proc_control_node_B.kAcol_o = k << 3;
      tmp = k + proc_control_node_B.jBcol_l;
      proc_control_node_B.d6 = B[tmp];
      if (proc_control_node_B.d6 != 0.0) {
        B[tmp] = proc_control_node_B.d6 / A[k + proc_control_node_B.kAcol_o];
        for (i = 0; i < k; i++) {
          tmp_0 = i + proc_control_node_B.jBcol_l;
          B[tmp_0] -= B[tmp] * A[i + proc_control_node_B.kAcol_o];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S270>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_en(int32_T n, const
  real_T x[273], int32_T ix0)
{
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_f = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        proc_control_node_B.absxk_is = fabs(x[k - 1]);
        if (proc_control_node_B.absxk_is > proc_control_node_B.scale_f) {
          t = proc_control_node_B.scale_f / proc_control_node_B.absxk_is;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_f = proc_control_node_B.absxk_is;
        } else {
          t = proc_control_node_B.absxk_is / proc_control_node_B.scale_f;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_f * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_kv(int32_T m, int32_T
  n, const real_T A[273], int32_T ia0, const real_T x[273], int32_T ix0, real_T
  y[13])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 21 + ia0;
    for (iac = ia0; iac <= b; iac += 21) {
      proc_control_node_B.ix_p = ix0;
      proc_control_node_B.c_f = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_f += A[ia - 1] * x[proc_control_node_B.ix_p - 1];
        proc_control_node_B.ix_p++;
      }

      y[b_iy] += proc_control_node_B.c_f;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_kg(int32_T m, int32_T
  n, real_T alpha1, int32_T ix0, const real_T y[13], real_T A[273], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    proc_control_node_B.jA = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp = y[jy] * alpha1;
        ix = ix0;
        b = m + proc_control_node_B.jA;
        for (ijA = proc_control_node_B.jA; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp;
          ix++;
        }
      }

      jy++;
      proc_control_node_B.jA += 21;
    }
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_xzlarf_a33(int32_T m,
  int32_T n, int32_T iv0, real_T tau, real_T C[273], int32_T ic0, real_T work[13])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv = m;
    proc_control_node_B.lastc = iv0 + m;
    while ((proc_control_node_B.lastv > 0) && (C[proc_control_node_B.lastc - 2] ==
            0.0)) {
      proc_control_node_B.lastv--;
      proc_control_node_B.lastc--;
    }

    proc_control_node_B.lastc = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc > 0)) {
      proc_control_node_B.coltop = (proc_control_node_B.lastc - 1) * 21 + ic0;
      proc_control_node_B.ia_k = proc_control_node_B.coltop;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_k <= (proc_control_node_B.coltop +
             proc_control_node_B.lastv) - 1) {
          if (C[proc_control_node_B.ia_k - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_k++;
          }
        } else {
          proc_control_node_B.lastc--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv = 0;
    proc_control_node_B.lastc = 0;
  }

  if (proc_control_node_B.lastv > 0) {
    proc_control_node_xgemv_kv(proc_control_node_B.lastv,
      proc_control_node_B.lastc, C, ic0, C, iv0, work);
    proc_control_node_xgerc_kg(proc_control_node_B.lastv,
      proc_control_node_B.lastc, -tau, iv0, work, C, ic0);
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrf_if(real_T A[273],
  int32_T ia0, int32_T m, int32_T n, int32_T nfxd, real_T tau[13])
{
  memset(&proc_control_node_B.work_a[0], 0, 13U * sizeof(real_T));
  proc_control_node_B.i_i = 0;
  while (proc_control_node_B.i_i <= nfxd - 1) {
    proc_control_node_B.ii = ((proc_control_node_B.i_i * 21 + ia0) +
      proc_control_node_B.i_i) - 1;
    proc_control_node_B.mmi_tmp = m - proc_control_node_B.i_i;
    if (proc_control_node_B.i_i + 1 < m) {
      proc_control_node_B.b_atmp = A[proc_control_node_B.ii];
      tau[proc_control_node_B.i_i] = 0.0;
      if (proc_control_node_B.mmi_tmp > 0) {
        proc_control_node_B.beta1 = proc_control_node_xnrm2_en
          (proc_control_node_B.mmi_tmp - 1, A, proc_control_node_B.ii + 2);
        if (proc_control_node_B.beta1 != 0.0) {
          proc_control_node_B.beta1 = proc_control_node_rt_hypotd_snf
            (A[proc_control_node_B.ii], proc_control_node_B.beta1);
          if (A[proc_control_node_B.ii] >= 0.0) {
            proc_control_node_B.beta1 = -proc_control_node_B.beta1;
          }

          if (fabs(proc_control_node_B.beta1) < 1.0020841800044864E-292) {
            proc_control_node_B.knt = -1;
            proc_control_node_B.mmip1 = proc_control_node_B.ii +
              proc_control_node_B.mmi_tmp;
            do {
              proc_control_node_B.knt++;
              proc_control_node_B.b_k_c = proc_control_node_B.ii + 1;
              while (proc_control_node_B.b_k_c + 1 <= proc_control_node_B.mmip1)
              {
                A[proc_control_node_B.b_k_c] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_c++;
              }

              proc_control_node_B.beta1 *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1 = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp, proc_control_node_xnrm2_en
               (proc_control_node_B.mmi_tmp - 1, A, proc_control_node_B.ii + 2));
            if (proc_control_node_B.b_atmp >= 0.0) {
              proc_control_node_B.beta1 = -proc_control_node_B.beta1;
            }

            tau[proc_control_node_B.i_i] = (proc_control_node_B.beta1 -
              proc_control_node_B.b_atmp) / proc_control_node_B.beta1;
            proc_control_node_B.b_atmp = 1.0 / (proc_control_node_B.b_atmp -
              proc_control_node_B.beta1);
            proc_control_node_B.b_k_c = proc_control_node_B.ii + 1;
            while (proc_control_node_B.b_k_c + 1 <= proc_control_node_B.mmip1) {
              A[proc_control_node_B.b_k_c] *= proc_control_node_B.b_atmp;
              proc_control_node_B.b_k_c++;
            }

            proc_control_node_B.mmip1 = 0;
            while (proc_control_node_B.mmip1 <= proc_control_node_B.knt) {
              proc_control_node_B.beta1 *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1++;
            }

            proc_control_node_B.b_atmp = proc_control_node_B.beta1;
          } else {
            tau[proc_control_node_B.i_i] = (proc_control_node_B.beta1 -
              A[proc_control_node_B.ii]) / proc_control_node_B.beta1;
            proc_control_node_B.b_atmp = 1.0 / (A[proc_control_node_B.ii] -
              proc_control_node_B.beta1);
            proc_control_node_B.knt = proc_control_node_B.ii +
              proc_control_node_B.mmi_tmp;
            proc_control_node_B.mmip1 = proc_control_node_B.ii + 1;
            while (proc_control_node_B.mmip1 + 1 <= proc_control_node_B.knt) {
              A[proc_control_node_B.mmip1] *= proc_control_node_B.b_atmp;
              proc_control_node_B.mmip1++;
            }

            proc_control_node_B.b_atmp = proc_control_node_B.beta1;
          }
        }
      }

      A[proc_control_node_B.ii] = proc_control_node_B.b_atmp;
    } else {
      tau[proc_control_node_B.i_i] = 0.0;
    }

    if (proc_control_node_B.i_i + 1 < n) {
      proc_control_node_B.b_atmp = A[proc_control_node_B.ii];
      A[proc_control_node_B.ii] = 1.0;
      proc_control_node_xzlarf_a33(proc_control_node_B.mmi_tmp, (n -
        proc_control_node_B.i_i) - 1, proc_control_node_B.ii + 1,
        tau[proc_control_node_B.i_i], A, proc_control_node_B.ii + 22,
        proc_control_node_B.work_a);
      A[proc_control_node_B.ii] = proc_control_node_B.b_atmp;
    }

    proc_control_node_B.i_i++;
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_eb(real_T A[273],
  real_T tau[13])
{
  memset(&tau[0], 0, 13U * sizeof(real_T));
  proc_control_node_qrf_if(A, 1, 21, 13, 13, tau);
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_xorgqr_gf(int32_T m, int32_T
  n, int32_T k, real_T A[273], int32_T ia0, const real_T tau[13], int32_T itau0)
{
  if (n >= 1) {
    proc_control_node_B.itau_k = k;
    while (proc_control_node_B.itau_k <= n - 1) {
      proc_control_node_B.i_kv = (proc_control_node_B.itau_k * 21 + ia0) - 1;
      proc_control_node_B.iaii_f = 0;
      while (proc_control_node_B.iaii_f <= m - 1) {
        A[proc_control_node_B.i_kv + proc_control_node_B.iaii_f] = 0.0;
        proc_control_node_B.iaii_f++;
      }

      A[proc_control_node_B.i_kv + proc_control_node_B.itau_k] = 1.0;
      proc_control_node_B.itau_k++;
    }

    proc_control_node_B.itau_k = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_fq[0], 0, 13U * sizeof(real_T));
    proc_control_node_B.i_kv = k;
    while (proc_control_node_B.i_kv >= 1) {
      proc_control_node_B.iaii_f = (((proc_control_node_B.i_kv - 1) * 21 + ia0)
        + proc_control_node_B.i_kv) - 1;
      if (proc_control_node_B.i_kv < n) {
        A[proc_control_node_B.iaii_f - 1] = 1.0;
        proc_control_node_xzlarf_a33((m - proc_control_node_B.i_kv) + 1, n -
          proc_control_node_B.i_kv, proc_control_node_B.iaii_f,
          tau[proc_control_node_B.itau_k], A, proc_control_node_B.iaii_f + 21,
          proc_control_node_B.work_fq);
      }

      if (proc_control_node_B.i_kv < m) {
        proc_control_node_B.b_cz = (proc_control_node_B.iaii_f + m) -
          proc_control_node_B.i_kv;
        proc_control_node_B.b_k_o = proc_control_node_B.iaii_f;
        while (proc_control_node_B.b_k_o + 1 <= proc_control_node_B.b_cz) {
          A[proc_control_node_B.b_k_o] *= -tau[proc_control_node_B.itau_k];
          proc_control_node_B.b_k_o++;
        }
      }

      A[proc_control_node_B.iaii_f - 1] = 1.0 - tau[proc_control_node_B.itau_k];
      proc_control_node_B.b_cz = 0;
      while (proc_control_node_B.b_cz <= proc_control_node_B.i_kv - 2) {
        A[(proc_control_node_B.iaii_f - proc_control_node_B.b_cz) - 2] = 0.0;
        proc_control_node_B.b_cz++;
      }

      proc_control_node_B.itau_k--;
      proc_control_node_B.i_kv--;
    }
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_qr_hr(const real_T A[273],
  real_T Q[273], real_T R[169])
{
  memcpy(&proc_control_node_B.b_A_c[0], &A[0], 273U * sizeof(real_T));
  proc_control_node_xgeqrf_eb(proc_control_node_B.b_A_c,
    proc_control_node_B.tau_p);
  for (proc_control_node_B.j_c = 0; proc_control_node_B.j_c < 13;
       proc_control_node_B.j_c++) {
    proc_control_node_B.i_gw = 0;
    while (proc_control_node_B.i_gw <= proc_control_node_B.j_c) {
      R[proc_control_node_B.i_gw + 13 * proc_control_node_B.j_c] =
        proc_control_node_B.b_A_c[21 * proc_control_node_B.j_c +
        proc_control_node_B.i_gw];
      proc_control_node_B.i_gw++;
    }

    proc_control_node_B.i_gw = proc_control_node_B.j_c + 1;
    while (proc_control_node_B.i_gw + 1 < 14) {
      R[proc_control_node_B.i_gw + 13 * proc_control_node_B.j_c] = 0.0;
      proc_control_node_B.i_gw++;
    }
  }

  proc_control_node_xorgqr_gf(21, 13, 13, proc_control_node_B.b_A_c, 1,
    proc_control_node_B.tau_p, 1);
  proc_control_node_B.i_gw = 0;
  for (proc_control_node_B.j_c = 0; proc_control_node_B.j_c < 13;
       proc_control_node_B.j_c++) {
    memcpy(&Q[proc_control_node_B.i_gw],
           &proc_control_node_B.b_A_c[proc_control_node_B.i_gw], 21U * sizeof
           (real_T));
    proc_control_node_B.i_gw += 21;
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrFactor(const real_T A[169],
  real_T S[169], const real_T Ns[104])
{
  for (proc_control_node_B.j_n = 0; proc_control_node_B.j_n < 13;
       proc_control_node_B.j_n++) {
    proc_control_node_B.coffset_f = proc_control_node_B.j_n * 13;
    for (proc_control_node_B.i_m = 0; proc_control_node_B.i_m < 13;
         proc_control_node_B.i_m++) {
      proc_control_node_B.aoffset_m = proc_control_node_B.i_m * 13;
      proc_control_node_B.s_h = 0.0;
      for (proc_control_node_B.k_b0 = 0; proc_control_node_B.k_b0 < 13;
           proc_control_node_B.k_b0++) {
        proc_control_node_B.s_h += A[proc_control_node_B.k_b0 * 13 +
          proc_control_node_B.j_n] * S[proc_control_node_B.aoffset_m +
          proc_control_node_B.k_b0];
      }

      proc_control_node_B.y_e[proc_control_node_B.coffset_f +
        proc_control_node_B.i_m] = proc_control_node_B.s_h;
      proc_control_node_B.y_gx[proc_control_node_B.i_m + 21 *
        proc_control_node_B.j_n] = proc_control_node_B.y_e[13 *
        proc_control_node_B.j_n + proc_control_node_B.i_m];
    }
  }

  proc_control_node_B.k_b0 = 0;
  for (proc_control_node_B.j_n = 0; proc_control_node_B.j_n < 13;
       proc_control_node_B.j_n++) {
    proc_control_node_B.coffset_f = 0;
    for (proc_control_node_B.i_m = 0; proc_control_node_B.i_m < 8;
         proc_control_node_B.i_m++) {
      proc_control_node_B.y_gx[(proc_control_node_B.i_m +
        proc_control_node_B.k_b0) + 13] = Ns[proc_control_node_B.coffset_f +
        proc_control_node_B.j_n];
      proc_control_node_B.coffset_f += 13;
    }

    proc_control_node_B.k_b0 += 21;
  }

  proc_control_node_qr_hr(proc_control_node_B.y_gx, proc_control_node_B.a__1_f,
    proc_control_node_B.y_e);
  proc_control_node_B.k_b0 = 0;
  for (proc_control_node_B.j_n = 0; proc_control_node_B.j_n < 13;
       proc_control_node_B.j_n++) {
    proc_control_node_B.coffset_f = 0;
    for (proc_control_node_B.i_m = 0; proc_control_node_B.i_m < 13;
         proc_control_node_B.i_m++) {
      S[proc_control_node_B.i_m + proc_control_node_B.k_b0] =
        proc_control_node_B.y_e[proc_control_node_B.coffset_f +
        proc_control_node_B.j_n];
      proc_control_node_B.coffset_f += 13;
    }

    proc_control_node_B.k_b0 += 13;
  }
}

// Function for MATLAB Function: '<S270>/Correct'
void proc_control_nodeModelClass::EKFCorrector_correctStateAndSqr(real_T x[13],
  real_T S[169], const real_T residue[8], const real_T Pxy[104], const real_T
  Sy[64], const real_T H[104], const real_T Rsqrt[64])
{
  proc_control_node_B.b_i_k = 0;
  for (proc_control_node_B.b_i = 0; proc_control_node_B.b_i < 8;
       proc_control_node_B.b_i++) {
    proc_control_node_B.j_m = 0;
    for (proc_control_node_B.j = 0; proc_control_node_B.j < 13;
         proc_control_node_B.j++) {
      proc_control_node_B.K[proc_control_node_B.j_m + proc_control_node_B.b_i] =
        Pxy[proc_control_node_B.j + proc_control_node_B.b_i_k];
      proc_control_node_B.j_m += 8;
    }

    proc_control_node_B.b_i_k += 13;
  }

  proc_control_node_trisolve_ga(Sy, proc_control_node_B.K);
  proc_control_node_B.j_m = 0;
  for (proc_control_node_B.j = 0; proc_control_node_B.j < 13;
       proc_control_node_B.j++) {
    memcpy(&proc_control_node_B.b_C_m[proc_control_node_B.j_m],
           &proc_control_node_B.K[proc_control_node_B.j_m], sizeof(real_T) << 3U);
    proc_control_node_B.j_m += 8;
  }

  proc_control_node_B.b_i_k = 0;
  for (proc_control_node_B.j = 0; proc_control_node_B.j < 8;
       proc_control_node_B.j++) {
    proc_control_node_B.b_i = 0;
    for (proc_control_node_B.j_m = 0; proc_control_node_B.j_m < 8;
         proc_control_node_B.j_m++) {
      proc_control_node_B.Sy_k[proc_control_node_B.j_m +
        proc_control_node_B.b_i_k] = Sy[proc_control_node_B.b_i +
        proc_control_node_B.j];
      proc_control_node_B.b_i += 8;
    }

    proc_control_node_B.b_i_k += 8;
  }

  proc_control_node_trisolve_ga0(proc_control_node_B.Sy_k,
    proc_control_node_B.b_C_m);
  proc_control_node_B.b_i_k = 0;
  for (proc_control_node_B.j = 0; proc_control_node_B.j < 8;
       proc_control_node_B.j++) {
    proc_control_node_B.b_i = 0;
    for (proc_control_node_B.j_m = 0; proc_control_node_B.j_m < 13;
         proc_control_node_B.j_m++) {
      proc_control_node_B.K[proc_control_node_B.j_m + proc_control_node_B.b_i_k]
        = proc_control_node_B.b_C_m[proc_control_node_B.b_i +
        proc_control_node_B.j];
      proc_control_node_B.b_i += 8;
    }

    proc_control_node_B.b_i_k += 13;
  }

  for (proc_control_node_B.b_i_k = 0; proc_control_node_B.b_i_k < 13;
       proc_control_node_B.b_i_k++) {
    proc_control_node_B.d3 = 0.0;
    proc_control_node_B.j = 0;
    for (proc_control_node_B.b_i = 0; proc_control_node_B.b_i < 8;
         proc_control_node_B.b_i++) {
      proc_control_node_B.d3 += proc_control_node_B.K[proc_control_node_B.j +
        proc_control_node_B.b_i_k] * residue[proc_control_node_B.b_i];
      proc_control_node_B.j += 13;
    }

    x[proc_control_node_B.b_i_k] += proc_control_node_B.d3;
  }

  for (proc_control_node_B.b_i_k = 0; proc_control_node_B.b_i_k < 104;
       proc_control_node_B.b_i_k++) {
    proc_control_node_B.b_C_m[proc_control_node_B.b_i_k] =
      -proc_control_node_B.K[proc_control_node_B.b_i_k];
  }

  for (proc_control_node_B.b_i_k = 0; proc_control_node_B.b_i_k < 13;
       proc_control_node_B.b_i_k++) {
    memset(&proc_control_node_B.A[proc_control_node_B.b_i_k * 13], 0, 13U *
           sizeof(real_T));
    for (proc_control_node_B.b_i = 0; proc_control_node_B.b_i < 8;
         proc_control_node_B.b_i++) {
      for (proc_control_node_B.j = 0; proc_control_node_B.j < 13;
           proc_control_node_B.j++) {
        proc_control_node_B.j_m = 13 * proc_control_node_B.b_i_k +
          proc_control_node_B.j;
        proc_control_node_B.A[proc_control_node_B.j_m] +=
          proc_control_node_B.b_C_m[13 * proc_control_node_B.b_i +
          proc_control_node_B.j] * H[(proc_control_node_B.b_i_k << 3) +
          proc_control_node_B.b_i];
      }
    }
  }

  proc_control_node_B.j_m = 0;
  for (proc_control_node_B.j = 0; proc_control_node_B.j < 13;
       proc_control_node_B.j++) {
    proc_control_node_B.A[proc_control_node_B.j_m]++;
    proc_control_node_B.j_m += 14;
  }

  for (proc_control_node_B.b_i_k = 0; proc_control_node_B.b_i_k < 8;
       proc_control_node_B.b_i_k++) {
    memset(&proc_control_node_B.b_C_m[proc_control_node_B.b_i_k * 13], 0, 13U *
           sizeof(real_T));
    for (proc_control_node_B.b_i = 0; proc_control_node_B.b_i < 8;
         proc_control_node_B.b_i++) {
      for (proc_control_node_B.j = 0; proc_control_node_B.j < 13;
           proc_control_node_B.j++) {
        proc_control_node_B.j_m = 13 * proc_control_node_B.b_i_k +
          proc_control_node_B.j;
        proc_control_node_B.b_C_m[proc_control_node_B.j_m] +=
          proc_control_node_B.K[13 * proc_control_node_B.b_i +
          proc_control_node_B.j] * Rsqrt[(proc_control_node_B.b_i_k << 3) +
          proc_control_node_B.b_i];
      }
    }
  }

  proc_control_node_qrFactor(proc_control_node_B.A, S, proc_control_node_B.b_C_m);
}

// Function for MATLAB Function: '<S271>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_k(int32_T n, const
  real_T x[48], int32_T ix0)
{
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_p = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        proc_control_node_B.absxk_b = fabs(x[k - 1]);
        if (proc_control_node_B.absxk_b > proc_control_node_B.scale_p) {
          t = proc_control_node_B.scale_p / proc_control_node_B.absxk_b;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_p = proc_control_node_B.absxk_b;
        } else {
          t = proc_control_node_B.absxk_b / proc_control_node_B.scale_p;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_p * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S271>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_bs(int32_T m, int32_T
  n, const real_T A[48], int32_T ia0, const real_T x[48], int32_T ix0, real_T y
  [3])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = ((n - 1) << 4) + ia0;
    for (iac = ia0; iac <= b; iac += 16) {
      proc_control_node_B.ix_a0 = ix0;
      proc_control_node_B.c_lc = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_lc += A[ia - 1] * x[proc_control_node_B.ix_a0 - 1];
        proc_control_node_B.ix_a0++;
      }

      y[b_iy] += proc_control_node_B.c_lc;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S271>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_og(int32_T m, int32_T
  n, real_T alpha1, int32_T ix0, const real_T y[3], real_T A[48], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    proc_control_node_B.jA_f = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_l = y[jy] * alpha1;
        ix = ix0;
        b = m + proc_control_node_B.jA_f;
        for (ijA = proc_control_node_B.jA_f; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_l;
          ix++;
        }
      }

      jy++;
      proc_control_node_B.jA_f += 16;
    }
  }
}

// Function for MATLAB Function: '<S271>/Correct'
void proc_control_nodeModelClass::proc_control_node_qr_f(const real_T A[48],
  real_T Q[48], real_T R[9])
{
  int32_T exitg1;
  boolean_T exitg2;
  memcpy(&proc_control_node_B.b_A_g[0], &A[0], 48U * sizeof(real_T));
  proc_control_node_B.work_f0[0] = 0.0;
  proc_control_node_B.work_f0[1] = 0.0;
  proc_control_node_B.work_f0[2] = 0.0;
  proc_control_node_B.b_atmp_n = proc_control_node_B.b_A_g[0];
  proc_control_node_B.tau_idx_0 = 0.0;
  proc_control_node_B.beta1_j0 = proc_control_node_xnrm2_k(15,
    proc_control_node_B.b_A_g, 2);
  if (proc_control_node_B.beta1_j0 != 0.0) {
    proc_control_node_B.beta1_j0 = proc_control_node_rt_hypotd_snf
      (proc_control_node_B.b_A_g[0], proc_control_node_B.beta1_j0);
    if (proc_control_node_B.b_A_g[0] >= 0.0) {
      proc_control_node_B.beta1_j0 = -proc_control_node_B.beta1_j0;
    }

    if (fabs(proc_control_node_B.beta1_j0) < 1.0020841800044864E-292) {
      proc_control_node_B.knt_o = -1;
      proc_control_node_B.c_lastc = 0;
      do {
        proc_control_node_B.knt_o++;
        proc_control_node_B.b_coltop = 1;
        while (proc_control_node_B.b_coltop + 1 <= 16) {
          proc_control_node_B.b_A_g[proc_control_node_B.b_coltop] *=
            9.9792015476736E+291;
          proc_control_node_B.b_coltop++;
        }

        proc_control_node_B.beta1_j0 *= 9.9792015476736E+291;
        proc_control_node_B.b_atmp_n *= 9.9792015476736E+291;
      } while (!(fabs(proc_control_node_B.beta1_j0) >= 1.0020841800044864E-292));

      proc_control_node_B.beta1_j0 = proc_control_node_rt_hypotd_snf
        (proc_control_node_B.b_atmp_n, proc_control_node_xnrm2_k(15,
          proc_control_node_B.b_A_g, 2));
      if (proc_control_node_B.b_atmp_n >= 0.0) {
        proc_control_node_B.beta1_j0 = -proc_control_node_B.beta1_j0;
      }

      proc_control_node_B.tau_idx_0 = (proc_control_node_B.beta1_j0 -
        proc_control_node_B.b_atmp_n) / proc_control_node_B.beta1_j0;
      proc_control_node_B.b_atmp_n = 1.0 / (proc_control_node_B.b_atmp_n -
        proc_control_node_B.beta1_j0);
      proc_control_node_B.b_coltop = 1;
      while (proc_control_node_B.b_coltop + 1 <= 16) {
        proc_control_node_B.b_A_g[proc_control_node_B.b_coltop] *=
          proc_control_node_B.b_atmp_n;
        proc_control_node_B.b_coltop++;
      }

      while (proc_control_node_B.c_lastc <= proc_control_node_B.knt_o) {
        proc_control_node_B.beta1_j0 *= 1.0020841800044864E-292;
        proc_control_node_B.c_lastc++;
      }

      proc_control_node_B.b_atmp_n = proc_control_node_B.beta1_j0;
    } else {
      proc_control_node_B.tau_idx_0 = (proc_control_node_B.beta1_j0 -
        proc_control_node_B.b_A_g[0]) / proc_control_node_B.beta1_j0;
      proc_control_node_B.b_atmp_n = 1.0 / (proc_control_node_B.b_A_g[0] -
        proc_control_node_B.beta1_j0);
      proc_control_node_B.c_lastc = 1;
      while (proc_control_node_B.c_lastc + 1 <= 16) {
        proc_control_node_B.b_A_g[proc_control_node_B.c_lastc] *=
          proc_control_node_B.b_atmp_n;
        proc_control_node_B.c_lastc++;
      }

      proc_control_node_B.b_atmp_n = proc_control_node_B.beta1_j0;
    }
  }

  proc_control_node_B.b_A_g[0] = 1.0;
  if (proc_control_node_B.tau_idx_0 != 0.0) {
    proc_control_node_B.knt_o = 16;
    proc_control_node_B.c_lastc = 0;
    while ((proc_control_node_B.knt_o > 0) &&
           (proc_control_node_B.b_A_g[proc_control_node_B.c_lastc + 15] == 0.0))
    {
      proc_control_node_B.knt_o--;
      proc_control_node_B.c_lastc--;
    }

    proc_control_node_B.c_lastc = 2;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.c_lastc > 0)) {
      proc_control_node_B.b_coltop = ((proc_control_node_B.c_lastc - 1) << 4) +
        16;
      proc_control_node_B.coltop_n = proc_control_node_B.b_coltop;
      do {
        exitg1 = 0;
        if (proc_control_node_B.coltop_n + 1 <= proc_control_node_B.b_coltop +
            proc_control_node_B.knt_o) {
          if (proc_control_node_B.b_A_g[proc_control_node_B.coltop_n] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.coltop_n++;
          }
        } else {
          proc_control_node_B.c_lastc--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.knt_o = 0;
    proc_control_node_B.c_lastc = 0;
  }

  if (proc_control_node_B.knt_o > 0) {
    proc_control_node_xgemv_bs(proc_control_node_B.knt_o,
      proc_control_node_B.c_lastc, proc_control_node_B.b_A_g, 17,
      proc_control_node_B.b_A_g, 1, proc_control_node_B.work_f0);
    proc_control_node_xgerc_og(proc_control_node_B.knt_o,
      proc_control_node_B.c_lastc, -proc_control_node_B.tau_idx_0, 1,
      proc_control_node_B.work_f0, proc_control_node_B.b_A_g, 17);
  }

  proc_control_node_B.b_A_g[0] = proc_control_node_B.b_atmp_n;
  proc_control_node_B.b_atmp_n = proc_control_node_B.b_A_g[17];
  proc_control_node_B.tau_idx_1 = 0.0;
  proc_control_node_B.beta1_j0 = proc_control_node_xnrm2_k(14,
    proc_control_node_B.b_A_g, 19);
  if (proc_control_node_B.beta1_j0 != 0.0) {
    proc_control_node_B.beta1_j0 = proc_control_node_rt_hypotd_snf
      (proc_control_node_B.b_A_g[17], proc_control_node_B.beta1_j0);
    if (proc_control_node_B.b_A_g[17] >= 0.0) {
      proc_control_node_B.beta1_j0 = -proc_control_node_B.beta1_j0;
    }

    if (fabs(proc_control_node_B.beta1_j0) < 1.0020841800044864E-292) {
      proc_control_node_B.knt_o = -1;
      do {
        proc_control_node_B.knt_o++;
        proc_control_node_B.b_coltop = 18;
        while (proc_control_node_B.b_coltop + 1 <= 32) {
          proc_control_node_B.b_A_g[proc_control_node_B.b_coltop] *=
            9.9792015476736E+291;
          proc_control_node_B.b_coltop++;
        }

        proc_control_node_B.beta1_j0 *= 9.9792015476736E+291;
        proc_control_node_B.b_atmp_n *= 9.9792015476736E+291;
      } while (!(fabs(proc_control_node_B.beta1_j0) >= 1.0020841800044864E-292));

      proc_control_node_B.beta1_j0 = proc_control_node_rt_hypotd_snf
        (proc_control_node_B.b_atmp_n, proc_control_node_xnrm2_k(14,
          proc_control_node_B.b_A_g, 19));
      if (proc_control_node_B.b_atmp_n >= 0.0) {
        proc_control_node_B.beta1_j0 = -proc_control_node_B.beta1_j0;
      }

      proc_control_node_B.tau_idx_1 = (proc_control_node_B.beta1_j0 -
        proc_control_node_B.b_atmp_n) / proc_control_node_B.beta1_j0;
      proc_control_node_B.b_atmp_n = 1.0 / (proc_control_node_B.b_atmp_n -
        proc_control_node_B.beta1_j0);
      proc_control_node_B.b_coltop = 18;
      while (proc_control_node_B.b_coltop + 1 <= 32) {
        proc_control_node_B.b_A_g[proc_control_node_B.b_coltop] *=
          proc_control_node_B.b_atmp_n;
        proc_control_node_B.b_coltop++;
      }

      proc_control_node_B.c_lastc = 0;
      while (proc_control_node_B.c_lastc <= proc_control_node_B.knt_o) {
        proc_control_node_B.beta1_j0 *= 1.0020841800044864E-292;
        proc_control_node_B.c_lastc++;
      }

      proc_control_node_B.b_atmp_n = proc_control_node_B.beta1_j0;
    } else {
      proc_control_node_B.tau_idx_1 = (proc_control_node_B.beta1_j0 -
        proc_control_node_B.b_A_g[17]) / proc_control_node_B.beta1_j0;
      proc_control_node_B.b_atmp_n = 1.0 / (proc_control_node_B.b_A_g[17] -
        proc_control_node_B.beta1_j0);
      proc_control_node_B.c_lastc = 18;
      while (proc_control_node_B.c_lastc + 1 <= 32) {
        proc_control_node_B.b_A_g[proc_control_node_B.c_lastc] *=
          proc_control_node_B.b_atmp_n;
        proc_control_node_B.c_lastc++;
      }

      proc_control_node_B.b_atmp_n = proc_control_node_B.beta1_j0;
    }
  }

  proc_control_node_B.b_A_g[17] = 1.0;
  if (proc_control_node_B.tau_idx_1 != 0.0) {
    proc_control_node_B.knt_o = 15;
    proc_control_node_B.c_lastc = 16;
    while ((proc_control_node_B.knt_o > 0) &&
           (proc_control_node_B.b_A_g[proc_control_node_B.c_lastc + 15] == 0.0))
    {
      proc_control_node_B.knt_o--;
      proc_control_node_B.c_lastc--;
    }

    proc_control_node_B.c_lastc = 1;
    proc_control_node_B.coltop_n = 33;
    do {
      exitg1 = 0;
      if (proc_control_node_B.coltop_n + 1 <= 33 + proc_control_node_B.knt_o) {
        if (proc_control_node_B.b_A_g[proc_control_node_B.coltop_n] != 0.0) {
          exitg1 = 1;
        } else {
          proc_control_node_B.coltop_n++;
        }
      } else {
        proc_control_node_B.c_lastc = 0;
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  } else {
    proc_control_node_B.knt_o = 0;
    proc_control_node_B.c_lastc = 0;
  }

  if (proc_control_node_B.knt_o > 0) {
    proc_control_node_xgemv_bs(proc_control_node_B.knt_o,
      proc_control_node_B.c_lastc, proc_control_node_B.b_A_g, 34,
      proc_control_node_B.b_A_g, 18, proc_control_node_B.work_f0);
    proc_control_node_xgerc_og(proc_control_node_B.knt_o,
      proc_control_node_B.c_lastc, -proc_control_node_B.tau_idx_1, 18,
      proc_control_node_B.work_f0, proc_control_node_B.b_A_g, 34);
  }

  proc_control_node_B.b_A_g[17] = proc_control_node_B.b_atmp_n;
  proc_control_node_B.b_atmp_n = proc_control_node_B.b_A_g[34];
  proc_control_node_B.tau_idx_2 = 0.0;
  proc_control_node_B.beta1_j0 = proc_control_node_xnrm2_k(13,
    proc_control_node_B.b_A_g, 36);
  if (proc_control_node_B.beta1_j0 != 0.0) {
    proc_control_node_B.beta1_j0 = proc_control_node_rt_hypotd_snf
      (proc_control_node_B.b_A_g[34], proc_control_node_B.beta1_j0);
    if (proc_control_node_B.b_A_g[34] >= 0.0) {
      proc_control_node_B.beta1_j0 = -proc_control_node_B.beta1_j0;
    }

    if (fabs(proc_control_node_B.beta1_j0) < 1.0020841800044864E-292) {
      proc_control_node_B.knt_o = -1;
      do {
        proc_control_node_B.knt_o++;
        proc_control_node_B.b_coltop = 35;
        while (proc_control_node_B.b_coltop + 1 <= 48) {
          proc_control_node_B.b_A_g[proc_control_node_B.b_coltop] *=
            9.9792015476736E+291;
          proc_control_node_B.b_coltop++;
        }

        proc_control_node_B.beta1_j0 *= 9.9792015476736E+291;
        proc_control_node_B.b_atmp_n *= 9.9792015476736E+291;
      } while (!(fabs(proc_control_node_B.beta1_j0) >= 1.0020841800044864E-292));

      proc_control_node_B.beta1_j0 = proc_control_node_rt_hypotd_snf
        (proc_control_node_B.b_atmp_n, proc_control_node_xnrm2_k(13,
          proc_control_node_B.b_A_g, 36));
      if (proc_control_node_B.b_atmp_n >= 0.0) {
        proc_control_node_B.beta1_j0 = -proc_control_node_B.beta1_j0;
      }

      proc_control_node_B.tau_idx_2 = (proc_control_node_B.beta1_j0 -
        proc_control_node_B.b_atmp_n) / proc_control_node_B.beta1_j0;
      proc_control_node_B.b_atmp_n = 1.0 / (proc_control_node_B.b_atmp_n -
        proc_control_node_B.beta1_j0);
      proc_control_node_B.b_coltop = 35;
      while (proc_control_node_B.b_coltop + 1 <= 48) {
        proc_control_node_B.b_A_g[proc_control_node_B.b_coltop] *=
          proc_control_node_B.b_atmp_n;
        proc_control_node_B.b_coltop++;
      }

      proc_control_node_B.c_lastc = 0;
      while (proc_control_node_B.c_lastc <= proc_control_node_B.knt_o) {
        proc_control_node_B.beta1_j0 *= 1.0020841800044864E-292;
        proc_control_node_B.c_lastc++;
      }

      proc_control_node_B.b_atmp_n = proc_control_node_B.beta1_j0;
    } else {
      proc_control_node_B.tau_idx_2 = (proc_control_node_B.beta1_j0 -
        proc_control_node_B.b_A_g[34]) / proc_control_node_B.beta1_j0;
      proc_control_node_B.b_atmp_n = 1.0 / (proc_control_node_B.b_A_g[34] -
        proc_control_node_B.beta1_j0);
      proc_control_node_B.c_lastc = 35;
      while (proc_control_node_B.c_lastc + 1 <= 48) {
        proc_control_node_B.b_A_g[proc_control_node_B.c_lastc] *=
          proc_control_node_B.b_atmp_n;
        proc_control_node_B.c_lastc++;
      }

      proc_control_node_B.b_atmp_n = proc_control_node_B.beta1_j0;
    }
  }

  proc_control_node_B.b_A_g[34] = proc_control_node_B.b_atmp_n;
  R[0] = proc_control_node_B.b_A_g[0];
  proc_control_node_B.c_lastc = 1;
  while (proc_control_node_B.c_lastc + 1 < 4) {
    R[proc_control_node_B.c_lastc] = 0.0;
    proc_control_node_B.c_lastc++;
  }

  proc_control_node_B.work_f0[0] = 0.0;
  proc_control_node_B.c_lastc = 0;
  while (proc_control_node_B.c_lastc <= 1) {
    R[proc_control_node_B.c_lastc + 3] =
      proc_control_node_B.b_A_g[proc_control_node_B.c_lastc + 16];
    proc_control_node_B.c_lastc++;
  }

  while (proc_control_node_B.c_lastc + 1 < 4) {
    R[proc_control_node_B.c_lastc + 3] = 0.0;
    proc_control_node_B.c_lastc++;
  }

  proc_control_node_B.work_f0[1] = 0.0;
  proc_control_node_B.c_lastc = 0;
  while (proc_control_node_B.c_lastc <= 2) {
    R[proc_control_node_B.c_lastc + 6] =
      proc_control_node_B.b_A_g[proc_control_node_B.c_lastc + 32];
    proc_control_node_B.c_lastc++;
  }

  proc_control_node_B.work_f0[2] = 0.0;
  proc_control_node_B.b_coltop = 35;
  while (proc_control_node_B.b_coltop + 1 <= 48) {
    proc_control_node_B.b_A_g[proc_control_node_B.b_coltop] *=
      -proc_control_node_B.tau_idx_2;
    proc_control_node_B.b_coltop++;
  }

  proc_control_node_B.b_A_g[34] = 1.0 - proc_control_node_B.tau_idx_2;
  proc_control_node_B.c_lastc = 0;
  while (proc_control_node_B.c_lastc <= 1) {
    proc_control_node_B.b_A_g[33 - proc_control_node_B.c_lastc] = 0.0;
    proc_control_node_B.c_lastc++;
  }

  proc_control_node_B.b_A_g[17] = 1.0;
  if (proc_control_node_B.tau_idx_1 != 0.0) {
    proc_control_node_B.c_lastc = 15;
    proc_control_node_B.b_coltop = 33;
    while ((proc_control_node_B.c_lastc > 0) &&
           (proc_control_node_B.b_A_g[proc_control_node_B.b_coltop - 2] == 0.0))
    {
      proc_control_node_B.c_lastc--;
      proc_control_node_B.b_coltop--;
    }

    proc_control_node_B.b_coltop = 1;
    proc_control_node_B.knt_o = 34;
    do {
      exitg1 = 0;
      if (proc_control_node_B.knt_o <= proc_control_node_B.c_lastc + 33) {
        if (proc_control_node_B.b_A_g[proc_control_node_B.knt_o - 1] != 0.0) {
          exitg1 = 1;
        } else {
          proc_control_node_B.knt_o++;
        }
      } else {
        proc_control_node_B.b_coltop = 0;
        exitg1 = 1;
      }
    } while (exitg1 == 0);
  } else {
    proc_control_node_B.c_lastc = 0;
    proc_control_node_B.b_coltop = 0;
  }

  if (proc_control_node_B.c_lastc > 0) {
    proc_control_node_xgemv_bs(proc_control_node_B.c_lastc,
      proc_control_node_B.b_coltop, proc_control_node_B.b_A_g, 34,
      proc_control_node_B.b_A_g, 18, proc_control_node_B.work_f0);
    proc_control_node_xgerc_og(proc_control_node_B.c_lastc,
      proc_control_node_B.b_coltop, -proc_control_node_B.tau_idx_1, 18,
      proc_control_node_B.work_f0, proc_control_node_B.b_A_g, 34);
  }

  proc_control_node_B.b_coltop = 18;
  while (proc_control_node_B.b_coltop + 1 <= 32) {
    proc_control_node_B.b_A_g[proc_control_node_B.b_coltop] *=
      -proc_control_node_B.tau_idx_1;
    proc_control_node_B.b_coltop++;
  }

  proc_control_node_B.b_A_g[17] = 1.0 - proc_control_node_B.tau_idx_1;
  proc_control_node_B.b_A_g[16] = 0.0;
  proc_control_node_B.b_A_g[0] = 1.0;
  if (proc_control_node_B.tau_idx_0 != 0.0) {
    proc_control_node_B.c_lastc = 16;
    proc_control_node_B.b_coltop = 17;
    while ((proc_control_node_B.c_lastc > 0) &&
           (proc_control_node_B.b_A_g[proc_control_node_B.b_coltop - 2] == 0.0))
    {
      proc_control_node_B.c_lastc--;
      proc_control_node_B.b_coltop--;
    }

    proc_control_node_B.b_coltop = 2;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.b_coltop > 0)) {
      proc_control_node_B.coltop_n = ((proc_control_node_B.b_coltop - 1) << 4) +
        17;
      proc_control_node_B.knt_o = proc_control_node_B.coltop_n;
      do {
        exitg1 = 0;
        if (proc_control_node_B.knt_o <= (proc_control_node_B.coltop_n +
             proc_control_node_B.c_lastc) - 1) {
          if (proc_control_node_B.b_A_g[proc_control_node_B.knt_o - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.knt_o++;
          }
        } else {
          proc_control_node_B.b_coltop--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.c_lastc = 0;
    proc_control_node_B.b_coltop = 0;
  }

  if (proc_control_node_B.c_lastc > 0) {
    proc_control_node_xgemv_bs(proc_control_node_B.c_lastc,
      proc_control_node_B.b_coltop, proc_control_node_B.b_A_g, 17,
      proc_control_node_B.b_A_g, 1, proc_control_node_B.work_f0);
    proc_control_node_xgerc_og(proc_control_node_B.c_lastc,
      proc_control_node_B.b_coltop, -proc_control_node_B.tau_idx_0, 1,
      proc_control_node_B.work_f0, proc_control_node_B.b_A_g, 17);
  }

  proc_control_node_B.b_coltop = 1;
  while (proc_control_node_B.b_coltop + 1 <= 16) {
    proc_control_node_B.b_A_g[proc_control_node_B.b_coltop] *=
      -proc_control_node_B.tau_idx_0;
    proc_control_node_B.b_coltop++;
  }

  proc_control_node_B.b_A_g[0] = 1.0 - proc_control_node_B.tau_idx_0;
  proc_control_node_B.b_coltop = 0;
  for (proc_control_node_B.coltop_n = 0; proc_control_node_B.coltop_n < 3;
       proc_control_node_B.coltop_n++) {
    memcpy(&Q[proc_control_node_B.b_coltop],
           &proc_control_node_B.b_A_g[proc_control_node_B.b_coltop], sizeof
           (real_T) << 4U);
    proc_control_node_B.b_coltop += 16;
  }
}

// Function for MATLAB Function: '<S271>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_i(const real_T A[9],
  real_T B[39])
{
  int32_T i;
  int32_T j;
  int32_T jBcol;
  int32_T tmp;
  for (j = 0; j < 13; j++) {
    jBcol = 3 * j;
    if (B[jBcol] != 0.0) {
      B[jBcol] /= A[0];
      for (i = 2; i < 4; i++) {
        tmp = (i + jBcol) - 1;
        B[tmp] -= A[i - 1] * B[jBcol];
      }
    }

    proc_control_node_B.d9 = B[jBcol + 1];
    if (proc_control_node_B.d9 != 0.0) {
      B[jBcol + 1] = proc_control_node_B.d9 / A[4];
      B[jBcol + 2] -= B[jBcol + 1] * A[5];
    }

    if (B[jBcol + 2] != 0.0) {
      B[jBcol + 2] /= A[8];
    }
  }
}

// Function for MATLAB Function: '<S271>/Correct'
void proc_control_nodeModelClass::proc_control_node_trisolve_iq(const real_T A[9],
  real_T B[39])
{
  int32_T i;
  int32_T j;
  int32_T jBcol;
  int32_T tmp;
  for (j = 0; j < 13; j++) {
    jBcol = 3 * j;
    proc_control_node_B.d8 = B[jBcol + 2];
    if (proc_control_node_B.d8 != 0.0) {
      B[jBcol + 2] = proc_control_node_B.d8 / A[8];
      for (i = 0; i < 2; i++) {
        tmp = i + jBcol;
        B[tmp] -= B[jBcol + 2] * A[i + 6];
      }
    }

    proc_control_node_B.d8 = B[jBcol + 1];
    if (proc_control_node_B.d8 != 0.0) {
      B[jBcol + 1] = proc_control_node_B.d8 / A[4];
      B[jBcol] -= B[jBcol + 1] * A[3];
    }

    if (B[jBcol] != 0.0) {
      B[jBcol] /= A[0];
    }
  }
}

// Function for MATLAB Function: '<S271>/Correct'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_kt(int32_T n, const
  real_T x[208], int32_T ix0)
{
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_nl = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        proc_control_node_B.absxk_o = fabs(x[k - 1]);
        if (proc_control_node_B.absxk_o > proc_control_node_B.scale_nl) {
          t = proc_control_node_B.scale_nl / proc_control_node_B.absxk_o;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_nl = proc_control_node_B.absxk_o;
        } else {
          t = proc_control_node_B.absxk_o / proc_control_node_B.scale_nl;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_nl * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S271>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgemv_bsn(int32_T m, int32_T
  n, const real_T A[208], int32_T ia0, const real_T x[208], int32_T ix0, real_T
  y[13])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = ((n - 1) << 4) + ia0;
    for (iac = ia0; iac <= b; iac += 16) {
      proc_control_node_B.ix_k = ix0;
      proc_control_node_B.c_d = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_d += A[ia - 1] * x[proc_control_node_B.ix_k - 1];
        proc_control_node_B.ix_k++;
      }

      y[b_iy] += proc_control_node_B.c_d;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S271>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgerc_ogv(int32_T m, int32_T
  n, real_T alpha1, int32_T ix0, const real_T y[13], real_T A[208], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    proc_control_node_B.jA_o = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_j = y[jy] * alpha1;
        ix = ix0;
        b = m + proc_control_node_B.jA_o;
        for (ijA = proc_control_node_B.jA_o; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_j;
          ix++;
        }
      }

      jy++;
      proc_control_node_B.jA_o += 16;
    }
  }
}

// Function for MATLAB Function: '<S271>/Correct'
void proc_control_nodeModelClass::proc_control_node_xzlarf_n(int32_T m, int32_T
  n, int32_T iv0, real_T tau, real_T C[208], int32_T ic0, real_T work[13])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_f0 = m;
    proc_control_node_B.lastc_k = iv0 + m;
    while ((proc_control_node_B.lastv_f0 > 0) && (C[proc_control_node_B.lastc_k
            - 2] == 0.0)) {
      proc_control_node_B.lastv_f0--;
      proc_control_node_B.lastc_k--;
    }

    proc_control_node_B.lastc_k = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_k > 0)) {
      proc_control_node_B.coltop_e = ((proc_control_node_B.lastc_k - 1) << 4) +
        ic0;
      proc_control_node_B.ia_n = proc_control_node_B.coltop_e;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_n <= (proc_control_node_B.coltop_e +
             proc_control_node_B.lastv_f0) - 1) {
          if (C[proc_control_node_B.ia_n - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_n++;
          }
        } else {
          proc_control_node_B.lastc_k--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_f0 = 0;
    proc_control_node_B.lastc_k = 0;
  }

  if (proc_control_node_B.lastv_f0 > 0) {
    proc_control_node_xgemv_bsn(proc_control_node_B.lastv_f0,
      proc_control_node_B.lastc_k, C, ic0, C, iv0, work);
    proc_control_node_xgerc_ogv(proc_control_node_B.lastv_f0,
      proc_control_node_B.lastc_k, -tau, iv0, work, C, ic0);
  }
}

// Function for MATLAB Function: '<S271>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrf_m3(real_T A[208],
  int32_T ia0, int32_T m, int32_T n, int32_T nfxd, real_T tau[13])
{
  memset(&proc_control_node_B.work_o[0], 0, 13U * sizeof(real_T));
  proc_control_node_B.i_n = 0;
  while (proc_control_node_B.i_n <= nfxd - 1) {
    proc_control_node_B.ii_c = (((proc_control_node_B.i_n << 4) + ia0) +
      proc_control_node_B.i_n) - 1;
    proc_control_node_B.mmi_tmp_p = m - proc_control_node_B.i_n;
    if (proc_control_node_B.i_n + 1 < m) {
      proc_control_node_B.b_atmp_f = A[proc_control_node_B.ii_c];
      tau[proc_control_node_B.i_n] = 0.0;
      if (proc_control_node_B.mmi_tmp_p > 0) {
        proc_control_node_B.beta1_g = proc_control_node_xnrm2_kt
          (proc_control_node_B.mmi_tmp_p - 1, A, proc_control_node_B.ii_c + 2);
        if (proc_control_node_B.beta1_g != 0.0) {
          proc_control_node_B.beta1_g = proc_control_node_rt_hypotd_snf
            (A[proc_control_node_B.ii_c], proc_control_node_B.beta1_g);
          if (A[proc_control_node_B.ii_c] >= 0.0) {
            proc_control_node_B.beta1_g = -proc_control_node_B.beta1_g;
          }

          if (fabs(proc_control_node_B.beta1_g) < 1.0020841800044864E-292) {
            proc_control_node_B.knt_k = -1;
            proc_control_node_B.mmip1_b = proc_control_node_B.ii_c +
              proc_control_node_B.mmi_tmp_p;
            do {
              proc_control_node_B.knt_k++;
              proc_control_node_B.b_k_l = proc_control_node_B.ii_c + 1;
              while (proc_control_node_B.b_k_l + 1 <=
                     proc_control_node_B.mmip1_b) {
                A[proc_control_node_B.b_k_l] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_l++;
              }

              proc_control_node_B.beta1_g *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp_f *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1_g) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1_g = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp_f, proc_control_node_xnrm2_kt
               (proc_control_node_B.mmi_tmp_p - 1, A, proc_control_node_B.ii_c +
                2));
            if (proc_control_node_B.b_atmp_f >= 0.0) {
              proc_control_node_B.beta1_g = -proc_control_node_B.beta1_g;
            }

            tau[proc_control_node_B.i_n] = (proc_control_node_B.beta1_g -
              proc_control_node_B.b_atmp_f) / proc_control_node_B.beta1_g;
            proc_control_node_B.b_atmp_f = 1.0 / (proc_control_node_B.b_atmp_f -
              proc_control_node_B.beta1_g);
            proc_control_node_B.b_k_l = proc_control_node_B.ii_c + 1;
            while (proc_control_node_B.b_k_l + 1 <= proc_control_node_B.mmip1_b)
            {
              A[proc_control_node_B.b_k_l] *= proc_control_node_B.b_atmp_f;
              proc_control_node_B.b_k_l++;
            }

            proc_control_node_B.mmip1_b = 0;
            while (proc_control_node_B.mmip1_b <= proc_control_node_B.knt_k) {
              proc_control_node_B.beta1_g *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1_b++;
            }

            proc_control_node_B.b_atmp_f = proc_control_node_B.beta1_g;
          } else {
            tau[proc_control_node_B.i_n] = (proc_control_node_B.beta1_g -
              A[proc_control_node_B.ii_c]) / proc_control_node_B.beta1_g;
            proc_control_node_B.b_atmp_f = 1.0 / (A[proc_control_node_B.ii_c] -
              proc_control_node_B.beta1_g);
            proc_control_node_B.knt_k = proc_control_node_B.ii_c +
              proc_control_node_B.mmi_tmp_p;
            proc_control_node_B.mmip1_b = proc_control_node_B.ii_c + 1;
            while (proc_control_node_B.mmip1_b + 1 <= proc_control_node_B.knt_k)
            {
              A[proc_control_node_B.mmip1_b] *= proc_control_node_B.b_atmp_f;
              proc_control_node_B.mmip1_b++;
            }

            proc_control_node_B.b_atmp_f = proc_control_node_B.beta1_g;
          }
        }
      }

      A[proc_control_node_B.ii_c] = proc_control_node_B.b_atmp_f;
    } else {
      tau[proc_control_node_B.i_n] = 0.0;
    }

    if (proc_control_node_B.i_n + 1 < n) {
      proc_control_node_B.b_atmp_f = A[proc_control_node_B.ii_c];
      A[proc_control_node_B.ii_c] = 1.0;
      proc_control_node_xzlarf_n(proc_control_node_B.mmi_tmp_p, (n -
        proc_control_node_B.i_n) - 1, proc_control_node_B.ii_c + 1,
        tau[proc_control_node_B.i_n], A, proc_control_node_B.ii_c + 17,
        proc_control_node_B.work_o);
      A[proc_control_node_B.ii_c] = proc_control_node_B.b_atmp_f;
    }

    proc_control_node_B.i_n++;
  }
}

// Function for MATLAB Function: '<S271>/Correct'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_mg(real_T A[208],
  real_T tau[13])
{
  memset(&tau[0], 0, 13U * sizeof(real_T));
  proc_control_node_qrf_m3(A, 1, 16, 13, 13, tau);
}

// Function for MATLAB Function: '<S271>/Correct'
void proc_control_nodeModelClass::proc_control_node_xorgqr_gf3(int32_T m,
  int32_T n, int32_T k, real_T A[208], int32_T ia0, const real_T tau[13],
  int32_T itau0)
{
  int32_T exitg1;
  boolean_T exitg2;
  if (n >= 1) {
    proc_control_node_B.itau_o = k;
    while (proc_control_node_B.itau_o <= n - 1) {
      proc_control_node_B.i_an = ((proc_control_node_B.itau_o << 4) + ia0) - 1;
      proc_control_node_B.iaii_a = 0;
      while (proc_control_node_B.iaii_a <= m - 1) {
        A[proc_control_node_B.i_an + proc_control_node_B.iaii_a] = 0.0;
        proc_control_node_B.iaii_a++;
      }

      A[proc_control_node_B.i_an + proc_control_node_B.itau_o] = 1.0;
      proc_control_node_B.itau_o++;
    }

    proc_control_node_B.itau_o = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_f[0], 0, 13U * sizeof(real_T));
    proc_control_node_B.i_an = k;
    while (proc_control_node_B.i_an >= 1) {
      proc_control_node_B.iaii_a = ((((proc_control_node_B.i_an - 1) << 4) + ia0)
        + proc_control_node_B.i_an) - 1;
      if (proc_control_node_B.i_an < n) {
        A[proc_control_node_B.iaii_a - 1] = 1.0;
        proc_control_node_B.lastc_el = (m - proc_control_node_B.i_an) - 1;
        if (tau[proc_control_node_B.itau_o] != 0.0) {
          proc_control_node_B.lastv_d = proc_control_node_B.lastc_el + 2;
          proc_control_node_B.lastc_el += proc_control_node_B.iaii_a;
          while ((proc_control_node_B.lastv_d > 0) &&
                 (A[proc_control_node_B.lastc_el] == 0.0)) {
            proc_control_node_B.lastv_d--;
            proc_control_node_B.lastc_el--;
          }

          proc_control_node_B.lastc_el = n - proc_control_node_B.i_an;
          exitg2 = false;
          while ((!exitg2) && (proc_control_node_B.lastc_el > 0)) {
            proc_control_node_B.coltop_i = (((proc_control_node_B.lastc_el - 1) <<
              4) + proc_control_node_B.iaii_a) + 15;
            proc_control_node_B.b_ia_b = proc_control_node_B.coltop_i;
            do {
              exitg1 = 0;
              if (proc_control_node_B.b_ia_b + 1 <= proc_control_node_B.coltop_i
                  + proc_control_node_B.lastv_d) {
                if (A[proc_control_node_B.b_ia_b] != 0.0) {
                  exitg1 = 1;
                } else {
                  proc_control_node_B.b_ia_b++;
                }
              } else {
                proc_control_node_B.lastc_el--;
                exitg1 = 2;
              }
            } while (exitg1 == 0);

            if (exitg1 == 1) {
              exitg2 = true;
            }
          }
        } else {
          proc_control_node_B.lastv_d = 0;
          proc_control_node_B.lastc_el = 0;
        }

        if (proc_control_node_B.lastv_d > 0) {
          proc_control_node_xgemv_bsn(proc_control_node_B.lastv_d,
            proc_control_node_B.lastc_el, A, proc_control_node_B.iaii_a + 16, A,
            proc_control_node_B.iaii_a, proc_control_node_B.work_f);
          proc_control_node_xgerc_ogv(proc_control_node_B.lastv_d,
            proc_control_node_B.lastc_el, -tau[proc_control_node_B.itau_o],
            proc_control_node_B.iaii_a, proc_control_node_B.work_f, A,
            proc_control_node_B.iaii_a + 16);
        }
      }

      if (proc_control_node_B.i_an < m) {
        proc_control_node_B.lastv_d = (proc_control_node_B.iaii_a + m) -
          proc_control_node_B.i_an;
        proc_control_node_B.lastc_el = proc_control_node_B.iaii_a;
        while (proc_control_node_B.lastc_el + 1 <= proc_control_node_B.lastv_d)
        {
          A[proc_control_node_B.lastc_el] *= -tau[proc_control_node_B.itau_o];
          proc_control_node_B.lastc_el++;
        }
      }

      A[proc_control_node_B.iaii_a - 1] = 1.0 - tau[proc_control_node_B.itau_o];
      proc_control_node_B.lastv_d = 0;
      while (proc_control_node_B.lastv_d <= proc_control_node_B.i_an - 2) {
        A[(proc_control_node_B.iaii_a - proc_control_node_B.lastv_d) - 2] = 0.0;
        proc_control_node_B.lastv_d++;
      }

      proc_control_node_B.itau_o--;
      proc_control_node_B.i_an--;
    }
  }
}

// Function for MATLAB Function: '<S271>/Correct'
void proc_control_nodeModelClass::proc_control_node_qr_fq(const real_T A[208],
  real_T Q[208], real_T R[169])
{
  memcpy(&proc_control_node_B.b_A_k[0], &A[0], 208U * sizeof(real_T));
  proc_control_node_xgeqrf_mg(proc_control_node_B.b_A_k,
    proc_control_node_B.tau_pi);
  for (proc_control_node_B.j_a = 0; proc_control_node_B.j_a < 13;
       proc_control_node_B.j_a++) {
    proc_control_node_B.i_m2 = 0;
    while (proc_control_node_B.i_m2 <= proc_control_node_B.j_a) {
      R[proc_control_node_B.i_m2 + 13 * proc_control_node_B.j_a] =
        proc_control_node_B.b_A_k[(proc_control_node_B.j_a << 4) +
        proc_control_node_B.i_m2];
      proc_control_node_B.i_m2++;
    }

    proc_control_node_B.i_m2 = proc_control_node_B.j_a + 1;
    while (proc_control_node_B.i_m2 + 1 < 14) {
      R[proc_control_node_B.i_m2 + 13 * proc_control_node_B.j_a] = 0.0;
      proc_control_node_B.i_m2++;
    }
  }

  proc_control_node_xorgqr_gf3(16, 13, 13, proc_control_node_B.b_A_k, 1,
    proc_control_node_B.tau_pi, 1);
  proc_control_node_B.i_m2 = 0;
  for (proc_control_node_B.j_a = 0; proc_control_node_B.j_a < 13;
       proc_control_node_B.j_a++) {
    memcpy(&Q[proc_control_node_B.i_m2],
           &proc_control_node_B.b_A_k[proc_control_node_B.i_m2], sizeof(real_T) <<
           4U);
    proc_control_node_B.i_m2 += 16;
  }
}

// Function for MATLAB Function: '<S271>/Correct'
void proc_control_nodeModelClass::proc_control_node_qrFactor_l(const real_T A
  [169], real_T S[169], const real_T Ns[39])
{
  for (proc_control_node_B.j_ie = 0; proc_control_node_B.j_ie < 13;
       proc_control_node_B.j_ie++) {
    proc_control_node_B.coffset_a = proc_control_node_B.j_ie * 13;
    for (proc_control_node_B.i_ir = 0; proc_control_node_B.i_ir < 13;
         proc_control_node_B.i_ir++) {
      proc_control_node_B.aoffset_mq = proc_control_node_B.i_ir * 13;
      proc_control_node_B.s_m = 0.0;
      for (proc_control_node_B.k_k = 0; proc_control_node_B.k_k < 13;
           proc_control_node_B.k_k++) {
        proc_control_node_B.s_m += A[proc_control_node_B.k_k * 13 +
          proc_control_node_B.j_ie] * S[proc_control_node_B.aoffset_mq +
          proc_control_node_B.k_k];
      }

      proc_control_node_B.y_f[proc_control_node_B.coffset_a +
        proc_control_node_B.i_ir] = proc_control_node_B.s_m;
      proc_control_node_B.y_c[proc_control_node_B.i_ir +
        (proc_control_node_B.j_ie << 4)] = proc_control_node_B.y_f[13 *
        proc_control_node_B.j_ie + proc_control_node_B.i_ir];
    }

    proc_control_node_B.i_ir = proc_control_node_B.j_ie << 4;
    proc_control_node_B.y_c[proc_control_node_B.i_ir + 13] =
      Ns[proc_control_node_B.j_ie];
    proc_control_node_B.y_c[proc_control_node_B.i_ir + 14] =
      Ns[proc_control_node_B.j_ie + 13];
    proc_control_node_B.y_c[proc_control_node_B.i_ir + 15] =
      Ns[proc_control_node_B.j_ie + 26];
  }

  proc_control_node_qr_fq(proc_control_node_B.y_c, proc_control_node_B.a__1_h,
    proc_control_node_B.y_f);
  proc_control_node_B.k_k = 0;
  for (proc_control_node_B.j_ie = 0; proc_control_node_B.j_ie < 13;
       proc_control_node_B.j_ie++) {
    proc_control_node_B.coffset_a = 0;
    for (proc_control_node_B.i_ir = 0; proc_control_node_B.i_ir < 13;
         proc_control_node_B.i_ir++) {
      S[proc_control_node_B.i_ir + proc_control_node_B.k_k] =
        proc_control_node_B.y_f[proc_control_node_B.coffset_a +
        proc_control_node_B.j_ie];
      proc_control_node_B.coffset_a += 13;
    }

    proc_control_node_B.k_k += 13;
  }
}

// Function for MATLAB Function: '<S271>/Correct'
void proc_control_nodeModelClass::EKFCorrector_correctStateAndS_m(real_T x[13],
  real_T S[169], const real_T residue[3], const real_T Pxy[39], const real_T Sy
  [9], const real_T H[39], const real_T Rsqrt[9])
{
  proc_control_node_B.j_f = 0;
  for (proc_control_node_B.j_dg = 0; proc_control_node_B.j_dg < 13;
       proc_control_node_B.j_dg++) {
    proc_control_node_B.K_i[proc_control_node_B.j_f] =
      Pxy[proc_control_node_B.j_dg];
    proc_control_node_B.K_i[proc_control_node_B.j_f + 1] =
      Pxy[proc_control_node_B.j_dg + 13];
    proc_control_node_B.K_i[proc_control_node_B.j_f + 2] =
      Pxy[proc_control_node_B.j_dg + 26];
    proc_control_node_B.j_f += 3;
  }

  proc_control_node_trisolve_i(Sy, proc_control_node_B.K_i);
  proc_control_node_B.j_f = 0;
  for (proc_control_node_B.j_dg = 0; proc_control_node_B.j_dg < 13;
       proc_control_node_B.j_dg++) {
    proc_control_node_B.b_C_d[proc_control_node_B.j_f] =
      proc_control_node_B.K_i[proc_control_node_B.j_f];
    proc_control_node_B.b_C_d[proc_control_node_B.j_f + 1] =
      proc_control_node_B.K_i[proc_control_node_B.j_f + 1];
    proc_control_node_B.b_C_d[proc_control_node_B.j_f + 2] =
      proc_control_node_B.K_i[proc_control_node_B.j_f + 2];
    proc_control_node_B.j_f += 3;
  }

  proc_control_node_B.i23 = 0;
  for (proc_control_node_B.i22 = 0; proc_control_node_B.i22 < 3;
       proc_control_node_B.i22++) {
    proc_control_node_B.Sy_a[proc_control_node_B.i23] =
      Sy[proc_control_node_B.i22];
    proc_control_node_B.Sy_a[proc_control_node_B.i23 + 1] =
      Sy[proc_control_node_B.i22 + 3];
    proc_control_node_B.Sy_a[proc_control_node_B.i23 + 2] =
      Sy[proc_control_node_B.i22 + 6];
    proc_control_node_B.i23 += 3;
  }

  proc_control_node_trisolve_iq(proc_control_node_B.Sy_a,
    proc_control_node_B.b_C_d);
  proc_control_node_B.i23 = 0;
  for (proc_control_node_B.i22 = 0; proc_control_node_B.i22 < 3;
       proc_control_node_B.i22++) {
    proc_control_node_B.i24 = 0;
    for (proc_control_node_B.j_dg = 0; proc_control_node_B.j_dg < 13;
         proc_control_node_B.j_dg++) {
      proc_control_node_B.K_i[proc_control_node_B.j_dg + proc_control_node_B.i23]
        = proc_control_node_B.b_C_d[proc_control_node_B.i24 +
        proc_control_node_B.i22];
      proc_control_node_B.i24 += 3;
    }

    proc_control_node_B.i23 += 13;
  }

  for (proc_control_node_B.i23 = 0; proc_control_node_B.i23 < 13;
       proc_control_node_B.i23++) {
    x[proc_control_node_B.i23] +=
      (proc_control_node_B.K_i[proc_control_node_B.i23 + 13] * residue[1] +
       proc_control_node_B.K_i[proc_control_node_B.i23] * residue[0]) +
      proc_control_node_B.K_i[proc_control_node_B.i23 + 26] * residue[2];
  }

  for (proc_control_node_B.i23 = 0; proc_control_node_B.i23 < 39;
       proc_control_node_B.i23++) {
    proc_control_node_B.b_C_d[proc_control_node_B.i23] =
      -proc_control_node_B.K_i[proc_control_node_B.i23];
  }

  proc_control_node_B.i23 = 0;
  proc_control_node_B.i22 = 0;
  for (proc_control_node_B.i24 = 0; proc_control_node_B.i24 < 13;
       proc_control_node_B.i24++) {
    for (proc_control_node_B.j_dg = 0; proc_control_node_B.j_dg < 13;
         proc_control_node_B.j_dg++) {
      proc_control_node_B.j_f = proc_control_node_B.j_dg +
        proc_control_node_B.i23;
      proc_control_node_B.A_e[proc_control_node_B.j_f] = 0.0;
      proc_control_node_B.A_e[proc_control_node_B.j_f] +=
        H[proc_control_node_B.i22] *
        proc_control_node_B.b_C_d[proc_control_node_B.j_dg];
      proc_control_node_B.A_e[proc_control_node_B.j_f] +=
        H[proc_control_node_B.i22 + 1] *
        proc_control_node_B.b_C_d[proc_control_node_B.j_dg + 13];
      proc_control_node_B.A_e[proc_control_node_B.j_f] +=
        H[proc_control_node_B.i22 + 2] *
        proc_control_node_B.b_C_d[proc_control_node_B.j_dg + 26];
    }

    proc_control_node_B.i23 += 13;
    proc_control_node_B.i22 += 3;
  }

  proc_control_node_B.j_f = 0;
  for (proc_control_node_B.j_dg = 0; proc_control_node_B.j_dg < 13;
       proc_control_node_B.j_dg++) {
    proc_control_node_B.i23 = 0;
    proc_control_node_B.i22 = 0;
    for (proc_control_node_B.i24 = 0; proc_control_node_B.i24 < 3;
         proc_control_node_B.i24++) {
      proc_control_node_B.K_tmp = proc_control_node_B.i23 +
        proc_control_node_B.j_dg;
      proc_control_node_B.b_C_d[proc_control_node_B.K_tmp] = 0.0;
      proc_control_node_B.b_C_d[proc_control_node_B.K_tmp] +=
        Rsqrt[proc_control_node_B.i22] *
        proc_control_node_B.K_i[proc_control_node_B.j_dg];
      proc_control_node_B.b_C_d[proc_control_node_B.K_tmp] +=
        Rsqrt[proc_control_node_B.i22 + 1] *
        proc_control_node_B.K_i[proc_control_node_B.j_dg + 13];
      proc_control_node_B.b_C_d[proc_control_node_B.K_tmp] +=
        Rsqrt[proc_control_node_B.i22 + 2] *
        proc_control_node_B.K_i[proc_control_node_B.j_dg + 26];
      proc_control_node_B.i23 += 13;
      proc_control_node_B.i22 += 3;
    }

    proc_control_node_B.A_e[proc_control_node_B.j_f]++;
    proc_control_node_B.j_f += 14;
  }

  proc_control_node_qrFactor_l(proc_control_node_B.A_e, S,
    proc_control_node_B.b_C_d);
}

real_T rt_powd_snf(real_T u0, real_T u1)
{
  real_T tmp;
  real_T tmp_0;
  real_T y;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = (rtNaN);
  } else {
    tmp = fabs(u0);
    tmp_0 = fabs(u1);
    if (rtIsInf(u1)) {
      if (tmp == 1.0) {
        y = 1.0;
      } else if (tmp > 1.0) {
        if (u1 > 0.0) {
          y = (rtInf);
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = (rtInf);
      }
    } else if (tmp_0 == 0.0) {
      y = 1.0;
    } else if (tmp_0 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > floor(u1))) {
      y = (rtNaN);
    } else {
      y = pow(u0, u1);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S1>/AUV State Equation'
real_T proc_control_nodeModelClass::proc_control_node_erf(real_T x)
{
  real_T y;
  int32_T e;

  // ========================== COPYRIGHT NOTICE ============================
  //  The algorithms for calculating ERF(X) and ERFC(X) are derived
  //  from FDLIBM, which has the following notice:
  //
  //  Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
  //
  //  Developed at SunSoft, a Sun Microsystems, Inc. business.
  //  Permission to use, copy, modify, and distribute this
  //  software is freely granted, provided that this notice
  //  is preserved.
  // =============================    END    ================================
  proc_control_node_B.absx = fabs(x);
  if (rtIsNaN(x)) {
    y = x;
  } else if (rtIsInf(x)) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else if (proc_control_node_B.absx < 0.84375) {
    if (proc_control_node_B.absx < 3.7252902984619141E-9) {
      if (proc_control_node_B.absx < 2.8480945388892178E-306) {
        y = (8.0 * x + 1.0270333367641007 * x) * 0.125;
      } else {
        y = 0.12837916709551259 * x + x;
      }
    } else {
      proc_control_node_B.z_ol = x * x;
      y = ((((proc_control_node_B.z_ol * -2.3763016656650163E-5 +
              -0.0057702702964894416) * proc_control_node_B.z_ol +
             -0.02848174957559851) * proc_control_node_B.z_ol +
            -0.3250421072470015) * proc_control_node_B.z_ol +
           0.12837916709551256) / (((((proc_control_node_B.z_ol *
        -3.9602282787753681E-6 + 0.00013249473800432164) *
        proc_control_node_B.z_ol + 0.0050813062818757656) *
        proc_control_node_B.z_ol + 0.0650222499887673) *
        proc_control_node_B.z_ol + 0.39791722395915535) *
        proc_control_node_B.z_ol + 1.0) * x + x;
    }
  } else if (proc_control_node_B.absx < 1.25) {
    if (x >= 0.0) {
      y = (((((((proc_control_node_B.absx - 1.0) * -0.0021663755948687908 +
                0.035478304325618236) * (proc_control_node_B.absx - 1.0) +
               -0.11089469428239668) * (proc_control_node_B.absx - 1.0) +
              0.31834661990116175) * (proc_control_node_B.absx - 1.0) +
             -0.37220787603570132) * (proc_control_node_B.absx - 1.0) +
            0.41485611868374833) * (proc_control_node_B.absx - 1.0) +
           -0.0023621185607526594) / (((((((proc_control_node_B.absx - 1.0) *
        0.011984499846799107 + 0.013637083912029051) * (proc_control_node_B.absx
        - 1.0) + 0.12617121980876164) * (proc_control_node_B.absx - 1.0) +
        0.071828654414196266) * (proc_control_node_B.absx - 1.0) +
        0.540397917702171) * (proc_control_node_B.absx - 1.0) +
        0.10642088040084423) * (proc_control_node_B.absx - 1.0) + 1.0) +
        0.84506291151046753;
    } else {
      y = -0.84506291151046753 - (((((((proc_control_node_B.absx - 1.0) *
        -0.0021663755948687908 + 0.035478304325618236) *
        (proc_control_node_B.absx - 1.0) + -0.11089469428239668) *
        (proc_control_node_B.absx - 1.0) + 0.31834661990116175) *
        (proc_control_node_B.absx - 1.0) + -0.37220787603570132) *
        (proc_control_node_B.absx - 1.0) + 0.41485611868374833) *
        (proc_control_node_B.absx - 1.0) + -0.0023621185607526594) /
        (((((((proc_control_node_B.absx - 1.0) * 0.011984499846799107 +
              0.013637083912029051) * (proc_control_node_B.absx - 1.0) +
             0.12617121980876164) * (proc_control_node_B.absx - 1.0) +
            0.071828654414196266) * (proc_control_node_B.absx - 1.0) +
           0.540397917702171) * (proc_control_node_B.absx - 1.0) +
          0.10642088040084423) * (proc_control_node_B.absx - 1.0) + 1.0);
    }
  } else if (proc_control_node_B.absx > 6.0) {
    if (x < 0.0) {
      y = -1.0;
    } else {
      y = 1.0;
    }
  } else {
    proc_control_node_B.s_he = 1.0 / (proc_control_node_B.absx *
      proc_control_node_B.absx);
    if (proc_control_node_B.absx < 2.8571434020996094) {
      proc_control_node_B.R_i = ((((((proc_control_node_B.s_he *
        -9.8143293441691455 + -81.2874355063066) * proc_control_node_B.s_he +
        -184.60509290671104) * proc_control_node_B.s_he + -162.39666946257347) *
        proc_control_node_B.s_he + -62.375332450326006) *
        proc_control_node_B.s_he + -10.558626225323291) *
        proc_control_node_B.s_he + -0.69385857270718176) *
        proc_control_node_B.s_he + -0.0098649440348471482;
      proc_control_node_B.s_he = (((((((proc_control_node_B.s_he *
        -0.0604244152148581 + 6.5702497703192817) * proc_control_node_B.s_he +
        108.63500554177944) * proc_control_node_B.s_he + 429.00814002756783) *
        proc_control_node_B.s_he + 645.38727173326788) *
        proc_control_node_B.s_he + 434.56587747522923) *
        proc_control_node_B.s_he + 137.65775414351904) *
        proc_control_node_B.s_he + 19.651271667439257) *
        proc_control_node_B.s_he + 1.0;
    } else {
      proc_control_node_B.R_i = (((((proc_control_node_B.s_he *
        -483.5191916086514 + -1025.0951316110772) * proc_control_node_B.s_he +
        -637.56644336838963) * proc_control_node_B.s_he + -160.63638485582192) *
        proc_control_node_B.s_he + -17.757954917754752) *
        proc_control_node_B.s_he + -0.799283237680523) *
        proc_control_node_B.s_he + -0.0098649429247001;
      proc_control_node_B.s_he = ((((((proc_control_node_B.s_he *
        -22.440952446585818 + 474.52854120695537) * proc_control_node_B.s_he +
        2553.0504064331644) * proc_control_node_B.s_he + 3199.8582195085955) *
        proc_control_node_B.s_he + 1536.729586084437) * proc_control_node_B.s_he
        + 325.79251299657392) * proc_control_node_B.s_he + 30.338060743482458) *
        proc_control_node_B.s_he + 1.0;
    }

    if (!rtIsNaN(proc_control_node_B.absx)) {
      proc_control_node_B.z_ol = frexp(proc_control_node_B.absx, &e);
    } else {
      proc_control_node_B.z_ol = proc_control_node_B.absx;
      e = 0;
    }

    proc_control_node_B.z_ol = floor(proc_control_node_B.z_ol * 2.097152E+6) /
      2.097152E+6 * rt_powd_snf(2.0, static_cast<real_T>(e));
    if (x < 0.0) {
      y = exp((proc_control_node_B.z_ol - proc_control_node_B.absx) *
              (proc_control_node_B.z_ol + proc_control_node_B.absx) +
              proc_control_node_B.R_i / proc_control_node_B.s_he) * exp
        (-proc_control_node_B.z_ol * proc_control_node_B.z_ol - 0.5625) /
        proc_control_node_B.absx - 1.0;
    } else {
      y = 1.0 - exp((proc_control_node_B.z_ol - proc_control_node_B.absx) *
                    (proc_control_node_B.z_ol + proc_control_node_B.absx) +
                    proc_control_node_B.R_i / proc_control_node_B.s_he) * exp
        (-proc_control_node_B.z_ol * proc_control_node_B.z_ol - 0.5625) /
        proc_control_node_B.absx;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S1>/AUV State Equation'
void proc_control_nodeModelClass::proc_con_AUVQuatPerturbedSimFcn(const real_T
  in1[13], const real_T in2[6], const real_T in3[8], real_T out1[13])
{
  proc_control_node_B.t8_c = in1[4] * in1[6];
  proc_control_node_B.t9_n = in1[5] * in1[6];
  proc_control_node_B.t10_d = in1[3] * in1[4];
  proc_control_node_B.t11_i = in1[3] * in1[5];
  proc_control_node_B.t12_n = in1[4] * in1[4];
  proc_control_node_B.t13_b = in1[5] * in1[5];
  proc_control_node_B.t15_b = in1[4] * in1[5] * 2.0;
  proc_control_node_B.t20_j = in1[3] * in1[6] * 2.0;
  proc_control_node_B.t33_n = in1[11] / 500.0;
  proc_control_node_B.t37_f = in1[10] / 1000.0;
  proc_control_node_B.t39_e = in1[12] * 0.018;
  proc_control_node_B.t63 = in1[7] * 32.4648;
  proc_control_node_B.t67 = in1[8] * 43.6156;
  proc_control_node_B.t68_i = in1[9] * 46.7695;
  proc_control_node_B.t16_a = proc_control_node_B.t8_c * 2.0;
  proc_control_node_B.t17_f = proc_control_node_B.t9_n * 2.0;
  proc_control_node_B.t18_k = proc_control_node_B.t10_d * 2.0;
  proc_control_node_B.t19_c = proc_control_node_B.t11_i * 2.0;
  proc_control_node_B.t21_j = proc_control_node_B.t12_n * 2.0;
  proc_control_node_B.t22_l = proc_control_node_B.t13_b * 2.0;
  proc_control_node_B.t23_a = in1[6] * in1[6] * 2.0;
  proc_control_node_B.t73 = proc_control_node_B.t33_n +
    proc_control_node_B.t39_e;
  proc_control_node_B.t33_n += proc_control_node_B.t37_f;
  proc_control_node_B.t37_f += proc_control_node_B.t39_e;
  proc_control_node_B.t39_e = in1[11] * 0.558 + proc_control_node_B.t63;
  proc_control_node_B.t80 = in1[10] * 0.062 + proc_control_node_B.t68_i;
  proc_control_node_B.t81 = in1[12] * 0.031 + proc_control_node_B.t67;
  proc_control_node_B.t84 = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] *
    0.592;
  proc_control_node_B.t46 = proc_control_node_B.t17_f +
    proc_control_node_B.t18_k;
  proc_control_node_B.t56_i = proc_control_node_erf(in1[2] * 13.333333333333334
    - 2.0);
  proc_control_node_B.t65_o = (proc_control_node_B.t21_j +
    proc_control_node_B.t22_l) - 1.0;
  proc_control_node_B.t63 = in1[12] * 0.062 + -proc_control_node_B.t63;
  proc_control_node_B.t67 = in1[10] * 0.558 + -proc_control_node_B.t67;
  proc_control_node_B.t68_i = in1[11] * 0.031 + -proc_control_node_B.t68_i;
  proc_control_node_B.t86 = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_node_B.t87 = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  proc_control_node_B.t57_b = proc_control_node_B.t16_a +
    -proc_control_node_B.t19_c;
  proc_control_node_B.t85 = proc_control_node_B.t56_i * 0.01575 + 0.01575;
  proc_control_node_B.t56_i = proc_control_node_B.t56_i * 15.7185 - 15.2815;
  out1[0] = (((proc_control_node_B.t22_l + proc_control_node_B.t23_a) - 1.0) *
             -in1[7] + (proc_control_node_B.t16_a + proc_control_node_B.t19_c) *
             in1[9]) + (proc_control_node_B.t15_b - proc_control_node_B.t20_j) *
    in1[8];
  out1[1] = ((proc_control_node_B.t15_b + proc_control_node_B.t20_j) * in1[7] -
             ((proc_control_node_B.t21_j + proc_control_node_B.t23_a) - 1.0) *
             in1[8]) + (proc_control_node_B.t17_f - proc_control_node_B.t18_k) *
    in1[9];
  out1[2] = (proc_control_node_B.t57_b * in1[7] + proc_control_node_B.t46 * in1
             [8]) - proc_control_node_B.t65_o * in1[9];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_node_B.t15_b = in1[10] * (fabs(in1[10]) * 0.167 + 10.0);
  proc_control_node_B.t20_j = in1[10] * proc_control_node_B.t73;
  proc_control_node_B.t16_a = in1[10] * proc_control_node_B.t80;
  proc_control_node_B.t17_f = in1[10] * proc_control_node_B.t67;
  proc_control_node_B.t18_k = in1[10] * proc_control_node_B.t86;
  proc_control_node_B.t19_c = in1[10] * proc_control_node_B.t87;
  proc_control_node_B.t21_j = in1[11] * (fabs(in1[11]) / 10.0 + 7.0);
  proc_control_node_B.t22_l = in1[11] * proc_control_node_B.t37_f;
  proc_control_node_B.t23_a = in1[11] * proc_control_node_B.t39_e;
  proc_control_node_B.out1_tmp_a = in1[11] * proc_control_node_B.t68_i;
  proc_control_node_B.out1_tmp_aq = in1[11] * proc_control_node_B.t84;
  proc_control_node_B.t86 *= in1[11];
  proc_control_node_B.out1_tmp_i0 = in1[12] * (fabs(in1[12]) * 0.102 + 15.0);
  proc_control_node_B.out1_tmp_iz = in1[12] * proc_control_node_B.t33_n;
  proc_control_node_B.out1_tmp_l = in1[12] * proc_control_node_B.t63;
  proc_control_node_B.out1_tmp_o5 = in1[12] * proc_control_node_B.t81;
  proc_control_node_B.t84 *= in1[12];
  proc_control_node_B.t87 *= in1[12];
  proc_control_node_B.out1_tmp_p = (proc_control_node_B.t9_n +
    proc_control_node_B.t10_d) * proc_control_node_B.t56_i;
  proc_control_node_B.t46 *= proc_control_node_B.t85;
  proc_control_node_B.out1_tmp_om = (proc_control_node_B.t8_c +
    -proc_control_node_B.t11_i) * proc_control_node_B.t56_i;
  proc_control_node_B.t57_b *= proc_control_node_B.t85;
  proc_control_node_B.t85 *= proc_control_node_B.t65_o;
  proc_control_node_B.t56_i *= proc_control_node_B.t65_o;
  proc_control_node_B.t65_o = (fabs(in1[7]) * 1.17 + 45.0) * in1[7];
  proc_control_node_B.t73 *= in1[7];
  proc_control_node_B.t81 *= in1[7];
  proc_control_node_B.t68_i *= in1[7];
  proc_control_node_B.out1_tmp_c = (fabs(in1[8]) * 0.82 + 60.0) * in1[8];
  proc_control_node_B.t37_f *= in1[8];
  proc_control_node_B.t63 *= in1[8];
  proc_control_node_B.t80 *= in1[8];
  proc_control_node_B.out1_tmp_oc = (fabs(in1[9]) * 0.756 + 70.0) * in1[9];
  proc_control_node_B.t33_n *= in1[9];
  proc_control_node_B.t39_e *= in1[9];
  proc_control_node_B.t67 *= in1[9];
  out1[7] = (((((((((((((((((((((in2[0] * 0.030976977065388711 + in2[1] *
    9.4803055144857715E-7) - in2[2] * 6.8231348244175949E-6) + in2[3] *
    0.0001303522588356414) + (in2[4] * -0.010033314971702871 + in2[5] *
    0.0010125044874363649)) + (in3[0] * -0.00033076834054020519 + in3[1] *
    1.8595780444550231E-21)) + in3[2] * 0.00033506403327449372) + (in3[3] *
    0.00033363213569639753 - in3[4] * 0.001819638864719295)) + (in3[5] *
    -0.0018124211550371481 + in3[6] * 0.0018538731733468781)) + (in3[7] *
    0.001778186846409557 - proc_control_node_B.t8_c * 0.11107598193630119)) +
                        ((proc_control_node_B.t9_n * -0.00081126583629370218 -
    proc_control_node_B.t10_d * 0.00081126583629370218) +
    proc_control_node_B.t11_i * 0.11107598193630119)) +
                       ((proc_control_node_B.t12_n * -0.0062610285338271466 -
    proc_control_node_B.t13_b * 0.0062610285338271466) + in3[0] *
                        1.4142135623730951 * 0.015171119710606879)) + (((in3[1] *
    1.4142135623730951 * 0.014928824155507611 + in3[2] * 1.4142135623730951 *
    0.015171119710606879) + in3[3] * 1.4142135623730951 * 0.01516372519659284) -
    proc_control_node_B.t15_b * 0.0001303522588356414)) +
                     (((proc_control_node_B.t20_j * -0.96028628902704993 +
                        proc_control_node_B.t16_a * 9.4803055144857715E-7) -
                       proc_control_node_B.t17_f * 6.8231348244175949E-6) -
                      proc_control_node_B.t18_k * 0.010033314971702871)) +
                    (((proc_control_node_B.t19_c * -0.0010125044874363649 +
                       proc_control_node_B.t21_j * 0.010033314971702871) -
                      proc_control_node_B.t22_l * 2.9388947094905889E-5) -
                     proc_control_node_B.t23_a * 6.8231348244175949E-6)) +
                   (((proc_control_node_B.out1_tmp_a * 0.030976977065388711 +
                      proc_control_node_B.out1_tmp_aq * 0.0010125044874363649) -
                     proc_control_node_B.t86 * 0.0001303522588356414) -
                    proc_control_node_B.out1_tmp_i0 * 0.0010125044874363649)) +
                  (((proc_control_node_B.out1_tmp_iz * 0.0002115171795569455 +
                     proc_control_node_B.out1_tmp_l * 9.4803055144857715E-7) +
                    proc_control_node_B.out1_tmp_o5 * 0.030976977065388711) +
                   proc_control_node_B.t84 * 0.010033314971702871)) +
                 ((proc_control_node_B.t87 * 0.0001303522588356414 -
                   proc_control_node_B.out1_tmp_p * 1.860035941942108E-5) -
                  proc_control_node_B.t46 * 0.0274827962545702)) +
                ((proc_control_node_B.out1_tmp_om * -0.60776829002292643 -
                  proc_control_node_B.t57_b * 0.57946699371225485) +
                 proc_control_node_B.t85 * 0.19773613061318)) +
               ((proc_control_node_B.t56_i * -6.6934952627536608E-5 -
                 proc_control_node_B.t65_o * 0.030976977065388711) +
                proc_control_node_B.t73 * 0.0040409200239048832)) +
              (((proc_control_node_B.t81 * -0.0010125044874363649 +
                 proc_control_node_B.t68_i * 0.010033314971702871) -
                proc_control_node_B.out1_tmp_c * 9.4803055144857715E-7) -
               proc_control_node_B.t37_f * 0.311032764122789)) +
             (((proc_control_node_B.t63 * -0.0010125044874363649 -
                proc_control_node_B.t80 * 0.0001303522588356414) +
               proc_control_node_B.out1_tmp_oc * 6.8231348244175949E-6) +
              proc_control_node_B.t33_n * 0.031387639110527318)) +
    ((proc_control_node_B.t39_e * 0.010033314971702871 - proc_control_node_B.t67
      * 0.0001303522588356414) + 0.0031305142669135729);
  out1[8] = ((((((((((((((((((((((in2[0] * 9.4803055144857715E-7 + in2[1] *
    0.02320783323245932) - in2[2] * 2.9076309096921531E-5) + in2[3] *
    0.021882274381510681) + (in2[4] * -0.0001026911824132076 - in2[5] *
    0.00042780737967584029)) + (in3[0] * 0.00013975754063522079 + in3[1] *
    7.9244610288113972E-21)) + in3[2] * -0.00014157257363048341) + (in3[3] *
    -0.0001409675626320625 - in3[4] * 0.0034249251816346319)) + (in3[5] *
    0.003387750973601051 + in3[6] * 0.0035708122797193441)) + (in3[7] *
    -0.0035336380716857632 - proc_control_node_B.t8_c * 0.00060385694847962161))
    + ((proc_control_node_B.t9_n * -0.23982646564227009 -
        proc_control_node_B.t10_d * 0.23982646564227009) +
       proc_control_node_B.t11_i * 0.00060385694847962161)) +
                        ((proc_control_node_B.t12_n * -0.026680932679612211 -
    proc_control_node_B.t13_b * 0.026680932679612211) - in3[0] *
    1.4142135623730951 * 0.01090649593858282)) + ((in3[1] * 1.4142135623730951 *
    0.011000123045544621 - in3[2] * 1.4142135623730951 * 0.01090649593858282) +
    in3[3] * 1.4142135623730951 * 0.01090087173345982)) +
                      (((proc_control_node_B.t15_b * -0.021882274381510681 -
    proc_control_node_B.t20_j * 2.9388947094905889E-5) +
                        proc_control_node_B.t16_a * 0.02320783323245932) -
                       proc_control_node_B.t17_f * 2.9076309096921531E-5)) +
                     (((proc_control_node_B.t18_k * -0.0001026911824132076 +
                        proc_control_node_B.t19_c * 0.00042780737967584029) +
                       proc_control_node_B.t21_j * 0.0001026911824132076) -
                      proc_control_node_B.t22_l * 0.71944283020623911)) +
                    (((proc_control_node_B.t23_a * -2.9076309096921531E-5 +
                       proc_control_node_B.out1_tmp_a * 9.4803055144857715E-7) -
                      proc_control_node_B.out1_tmp_aq * 0.00042780737967584029)
                     - proc_control_node_B.t86 * 0.021882274381510681)) +
                   (((proc_control_node_B.out1_tmp_i0 * 0.00042780737967584029 +
                      proc_control_node_B.out1_tmp_iz * 0.00090136558200456737)
                     + proc_control_node_B.out1_tmp_l * 0.02320783323245932) +
                    proc_control_node_B.out1_tmp_o5 * 9.4803055144857715E-7)) +
                  ((proc_control_node_B.t84 * 0.0001026911824132076 +
                    proc_control_node_B.t87 * 0.021882274381510681) -
                   proc_control_node_B.out1_tmp_p * 0.45533768802085189)) +
                 ((proc_control_node_B.t46 * -1.277037895127866 -
                   proc_control_node_B.out1_tmp_om * 1.860035941942108E-5) -
                  proc_control_node_B.t57_b * 0.01022071100467847)) +
                ((proc_control_node_B.t85 * 0.2162465528562037 -
                  proc_control_node_B.t56_i * 0.00028523859224080018) -
                 proc_control_node_B.t65_o * 9.4803055144857715E-7)) +
               (((proc_control_node_B.t73 * 0.678350505826831 +
                  proc_control_node_B.t81 * 0.00042780737967584029) +
                 proc_control_node_B.t68_i * 0.0001026911824132076) -
                proc_control_node_B.out1_tmp_c * 0.02320783323245932)) +
              (((proc_control_node_B.t37_f * -0.0031834266548094372 +
                 proc_control_node_B.t63 * 0.00042780737967584029) -
                proc_control_node_B.t80 * 0.021882274381510681) +
               proc_control_node_B.out1_tmp_oc * 2.9076309096921531E-5)) +
             ((proc_control_node_B.t33_n * -0.013262028769951049 +
               proc_control_node_B.t39_e * 0.0001026911824132076) -
              proc_control_node_B.t67 * 0.021882274381510681)) +
    0.0133404663398061;
  out1[9] = (((((((((((((((((((((((in2[0] * -6.8231348244175949E-6 - in2[1] *
    2.9076309096921531E-5) + in2[2] * 0.021384731826702759) - in2[3] *
    0.002272431716587712) + (in2[4] * 0.00039756137245743289 + in2[5] *
    5.2828771531483014E-6)) + in3[0] * -1.725827915740819E-6) + in3[1] *
    -5.8281975682474322E-18) + in3[2] * 1.748241265284163E-6) + (in3[3] *
    1.740770148765829E-6 - in3[4] * 0.02095639900015615)) + (in3[5] *
    0.021100316216985739 - in3[6] * 0.021822949502860629)) + (in3[7] *
    0.02167903228603104 + proc_control_node_B.t8_c * 0.004346059700124901)) +
    ((proc_control_node_B.t9_n * 0.024881704687475689 +
      proc_control_node_B.t10_d * 0.024881704687475689) -
     proc_control_node_B.t11_i * 0.004346059700124901)) +
                        ((proc_control_node_B.t12_n * 0.0030060816152820162 +
    proc_control_node_B.t13_b * 0.0030060816152820162) - in3[0] *
    1.4142135623730951 * 4.8869263875916949E-5)) + ((in3[1] * 1.4142135623730951
    * 6.6264429389244648E-5 - in3[2] * 1.4142135623730951 *
    4.8869263875916949E-5) + in3[3] * 1.4142135623730951 * 6.7490056888775055E-5))
                      + (((proc_control_node_B.t15_b * 0.002272431716587712 +
    proc_control_node_B.t20_j * 0.0002115171795569455) -
    proc_control_node_B.t16_a * 2.9076309096921531E-5) +
    proc_control_node_B.t17_f * 0.021384731826702759)) +
                     (((proc_control_node_B.t18_k * 0.00039756137245743289 -
                        proc_control_node_B.t19_c * 5.2828771531483014E-6) -
                       proc_control_node_B.t21_j * 0.00039756137245743289) +
                      proc_control_node_B.t22_l * 0.00090136558200456737)) +
                    (((proc_control_node_B.t23_a * 0.021384731826702759 -
                       proc_control_node_B.out1_tmp_a * 6.8231348244175949E-6) +
                      proc_control_node_B.out1_tmp_aq * 5.2828771531483014E-6) +
                     proc_control_node_B.t86 * 0.002272431716587712)) +
                   (((proc_control_node_B.out1_tmp_i0 * -5.2828771531483014E-6 -
                      proc_control_node_B.out1_tmp_iz * 0.66292668662778553) -
                     proc_control_node_B.out1_tmp_l * 2.9076309096921531E-5) -
                    proc_control_node_B.out1_tmp_o5 * 6.8231348244175949E-6)) +
                  ((proc_control_node_B.t84 * -0.00039756137245743289 -
                    proc_control_node_B.t87 * 0.002272431716587712) +
                   proc_control_node_B.out1_tmp_p * 0.00057047718448160036)) +
                 ((proc_control_node_B.t46 * 0.13338437742703069 +
                   proc_control_node_B.out1_tmp_om * 0.00013386990525507319) +
                  proc_control_node_B.t57_b * 0.023405382832901452)) +
                ((proc_control_node_B.t85 * -0.0300325238488056 +
                  proc_control_node_B.t56_i * 0.2097842192199541) +
                 proc_control_node_B.t65_o * 6.8231348244175949E-6)) +
               (((proc_control_node_B.t73 * -0.070445383214219059 -
                  proc_control_node_B.t81 * 5.2828771531483014E-6) -
                 proc_control_node_B.t68_i * 0.00039756137245743289) +
                proc_control_node_B.out1_tmp_c * 2.9076309096921531E-5)) +
              (((proc_control_node_B.t37_f * 0.01232440254618042 -
                 proc_control_node_B.t63 * 5.2828771531483014E-6) +
                proc_control_node_B.t80 * 0.002272431716587712) -
               proc_control_node_B.out1_tmp_oc * 0.021384731826702759)) +
             ((proc_control_node_B.t33_n * 0.00016376919174759729 -
               proc_control_node_B.t39_e * 0.00039756137245743289) +
              proc_control_node_B.t67 * 0.002272431716587712)) +
    -0.0015030408076410081;
  out1[10] = ((((((((((((((((((((((((in2[0] * 0.0001303522588356414 + in2[1] *
    0.021882274381510681) - in2[2] * 0.002272431716587712) + in2[3] *
    1.71018810547529) + (in2[4] * -0.0080268590155159435 - in2[5] *
    0.0039859244840414)) + in3[0] * 0.0013021350951669831) + in3[1] *
    6.1932883292401409E-19) + in3[2] * -0.00131904594055876) + (in3[3] *
    -0.0013134089920948341 - in3[4] * 0.26767193546582568)) + (in3[5] *
    0.26476621250220889 + in3[6] * 0.2790736050389333)) + (in3[7] *
    -0.27616788207531651 - proc_control_node_B.t8_c * 0.0830290934481406)) +
    ((proc_control_node_B.t9_n * -18.72549529020894 - proc_control_node_B.t10_d *
      18.72549529020894) + proc_control_node_B.t11_i * 0.0830290934481406)) +
    ((proc_control_node_B.t12_n * -2.0852233152147792 -
      proc_control_node_B.t13_b * 2.0852233152147792) + in3[0] *
     1.4142135623730951 * 0.043593198825375247)) + ((in3[1] * 1.4142135623730951
    * -0.043051831063235027 + in3[2] * 1.4142135623730951 * 0.043593198825375247)
    - in3[3] * 1.4142135623730951 * 0.043976565543532631)) +
                        ((proc_control_node_B.t15_b * -1.71018810547529 -
    proc_control_node_B.t20_j * 0.0040409200239048832) +
    proc_control_node_B.t16_a * 0.021882274381510681)) +
                       ((proc_control_node_B.t17_f * -0.002272431716587712 -
    proc_control_node_B.t18_k * 0.0080268590155159435) +
                        proc_control_node_B.t19_c * 0.0039859244840414)) +
                      ((proc_control_node_B.t21_j * 0.0080268590155159435 -
                        proc_control_node_B.t22_l * 0.678350505826831) -
                       proc_control_node_B.t23_a * 0.002272431716587712)) +
                     ((proc_control_node_B.out1_tmp_a * 0.0001303522588356414 -
                       proc_control_node_B.out1_tmp_aq * 0.0039859244840414) -
                      proc_control_node_B.t86 * 1.71018810547529)) +
                    (((proc_control_node_B.out1_tmp_i0 * 0.0039859244840414 +
                       proc_control_node_B.out1_tmp_iz * 0.070445383214219059) +
                      proc_control_node_B.out1_tmp_l * 0.021882274381510681) +
                     proc_control_node_B.out1_tmp_o5 * 0.0001303522588356414)) +
                   ((proc_control_node_B.t84 * 0.0080268590155159435 +
                     proc_control_node_B.t87 * 1.71018810547529) -
                    proc_control_node_B.out1_tmp_p * 0.42933022336523952)) +
                  ((proc_control_node_B.t46 * -100.3823011137989 -
                    proc_control_node_B.out1_tmp_om * 0.0025575113183552841) -
                   proc_control_node_B.t57_b * 0.51053971516003116)) +
                 ((proc_control_node_B.t85 * 16.900563424019818 -
                   proc_control_node_B.t56_i * 0.022292555139725449) -
                  proc_control_node_B.t65_o * 0.0001303522588356414)) +
                ((proc_control_node_B.t73 * 53.015831269733987 +
                  proc_control_node_B.t81 * 0.0039859244840414) +
                 proc_control_node_B.t68_i * 0.0080268590155159435)) +
               ((proc_control_node_B.out1_tmp_c * -0.021882274381510681 -
                 proc_control_node_B.t37_f * 0.2488326294809943) +
                proc_control_node_B.t63 * 0.0039859244840414)) +
              ((proc_control_node_B.t80 * -1.71018810547529 +
                proc_control_node_B.out1_tmp_oc * 0.002272431716587712) -
               proc_control_node_B.t33_n * 0.1235636590052834)) +
    ((proc_control_node_B.t39_e * 0.0080268590155159435 -
      proc_control_node_B.t67 * 1.71018810547529) + 1.0426116576073889);
  out1[11] = ((((((((((((((((((((((in2[0] * -0.010033314971702871 - in2[1] *
    0.0001026911824132076) + in2[2] * 0.00039756137245743289) - in2[3] *
    0.0080268590155159435) + (in2[4] * 0.58374455968341665 - in2[5] *
    1.606290206365557E-6)) + (in3[0] * 5.24748238233168E-7 - in3[1] *
    1.083514276897426E-19)) + in3[2] * -5.3156315041823265E-7) + (in3[3] *
    -5.2929151302328333E-7 + in3[4] * 0.10593667623599359)) + (in3[5] *
    0.10537885436940329 - in3[6] * 0.10793139553633729)) + (in3[7] *
    -0.1033841350690595 + proc_control_node_B.t8_c * 6.3908140435873166)) +
    ((proc_control_node_B.t9_n * 0.087876754449678615 +
      proc_control_node_B.t10_d * 0.087876754449678615) -
     proc_control_node_B.t11_i * 6.3908140435873166)) +
    ((proc_control_node_B.t12_n * 0.36480930847148191 +
      proc_control_node_B.t13_b * 0.36480930847148191) + in3[0] *
     1.4142135623730951 * 0.013457654526727991)) + ((in3[1] * 1.4142135623730951
    * 0.013869054980635681 + in3[2] * 1.4142135623730951 * 0.013457654526727991)
    + in3[3] * 1.4142135623730951 * 0.01386868232130781)) +
                       (((proc_control_node_B.t15_b * 0.0080268590155159435 +
    proc_control_node_B.t20_j * 0.311032764122789) - proc_control_node_B.t16_a *
    0.0001026911824132076) + proc_control_node_B.t17_f * 0.00039756137245743289))
                      + ((proc_control_node_B.t18_k * 0.58374455968341665 +
    proc_control_node_B.t19_c * 1.606290206365557E-6) -
    proc_control_node_B.t21_j * 0.58374455968341665)) +
                     (((proc_control_node_B.t22_l * 0.0031834266548094372 +
                        proc_control_node_B.t23_a * 0.00039756137245743289) -
                       proc_control_node_B.out1_tmp_a * 0.010033314971702871) -
                      proc_control_node_B.out1_tmp_aq * 1.606290206365557E-6)) +
                    (((proc_control_node_B.t86 * 0.0080268590155159435 +
                       proc_control_node_B.out1_tmp_i0 * 1.606290206365557E-6) -
                      proc_control_node_B.out1_tmp_iz * 0.01232440254618042) -
                     proc_control_node_B.out1_tmp_l * 0.0001026911824132076)) +
                   ((proc_control_node_B.out1_tmp_o5 * -0.010033314971702871 -
                     proc_control_node_B.t84 * 0.58374455968341665) -
                    proc_control_node_B.t87 * 0.0080268590155159435)) +
                  ((proc_control_node_B.out1_tmp_p * 0.002014800998947134 +
                    proc_control_node_B.t46 * 0.47154745219298311) +
                   proc_control_node_B.out1_tmp_om * 0.19685363974481029)) +
                 ((proc_control_node_B.t57_b * 34.290470647208458 -
                   proc_control_node_B.t85 * 11.508748124434989) +
                  proc_control_node_B.t56_i * 0.003900077063807416)) +
                ((proc_control_node_B.t65_o * 0.010033314971702871 -
                  proc_control_node_B.t73 * 0.2488326294809943) +
                 proc_control_node_B.t81 * 1.606290206365557E-6)) +
               ((proc_control_node_B.t68_i * -0.58374455968341665 +
                 proc_control_node_B.out1_tmp_c * 0.0001026911824132076) +
                proc_control_node_B.t37_f * 18.096081350185919)) +
              (((proc_control_node_B.t63 * 1.606290206365557E-6 +
                 proc_control_node_B.t80 * 0.0080268590155159435) -
                proc_control_node_B.out1_tmp_oc * 0.00039756137245743289) -
               proc_control_node_B.t33_n * 4.9794996397332282E-5)) +
    ((proc_control_node_B.t39_e * -0.58374455968341665 + proc_control_node_B.t67
      * 0.0080268590155159435) - 0.182404654235741);
  out1[12] = (((((((((((((((((((((((in2[0] * 0.0010125044874363649 - in2[1] *
    0.00042780737967584029) + in2[2] * 5.2828771531483014E-6) - in2[3] *
    0.0039859244840414) + (in2[4] * -1.606290206365557E-6 + in2[5] *
    0.53015902215788635)) + in3[0] * -0.1731941163298826) + in3[1] *
    -1.4397960202092559E-21) + in3[2] * 0.175443390567933) + (in3[3] *
    0.17469363248858291 + in3[4] * 0.00062021813460420567)) + (in3[5] *
    -0.0006207996116589 - in3[6] * 0.00064672437426625525)) + (in3[7] *
    0.00064730585132094889 - proc_control_node_B.t8_c * 0.64492422651466708)) +
    ((proc_control_node_B.t9_n * 0.3660910622711756 + proc_control_node_B.t10_d *
      0.3660910622711756) + proc_control_node_B.t11_i * 0.64492422651466708)) +
    ((proc_control_node_B.t12_n * 0.0048476610015380046 +
      proc_control_node_B.t13_b * 0.0048476610015380046) + in3[0] *
     1.4142135623730951 * 0.00059255494878017434)) + ((in3[1] *
    1.4142135623730951 * -0.1225770464045467 + in3[2] * 1.4142135623730951 *
    0.00059255494878017434) + in3[3] * 1.4142135623730951 *
    0.00041984673608298361)) + (((proc_control_node_B.t15_b * 0.0039859244840414
    - proc_control_node_B.t20_j * 0.031387639110527318) -
    proc_control_node_B.t16_a * 0.00042780737967584029) +
    proc_control_node_B.t17_f * 5.2828771531483014E-6)) +
                      (((proc_control_node_B.t18_k * -1.606290206365557E-6 -
    proc_control_node_B.t19_c * 0.53015902215788635) + proc_control_node_B.t21_j
                        * 1.606290206365557E-6) + proc_control_node_B.t22_l *
                       0.013262028769951049)) + (((proc_control_node_B.t23_a *
    5.2828771531483014E-6 + proc_control_node_B.out1_tmp_a *
    0.0010125044874363649) + proc_control_node_B.out1_tmp_aq *
    0.53015902215788635) + proc_control_node_B.t86 * 0.0039859244840414)) +
                    ((proc_control_node_B.out1_tmp_i0 * -0.53015902215788635 -
                      proc_control_node_B.out1_tmp_iz * 0.00016376919174759729)
                     - proc_control_node_B.out1_tmp_l * 0.00042780737967584029))
                   + (((proc_control_node_B.out1_tmp_o5 * 0.0010125044874363649
                        + proc_control_node_B.t84 * 1.606290206365557E-6) -
                       proc_control_node_B.t87 * 0.0039859244840414) +
                      proc_control_node_B.out1_tmp_p * 0.008393580789239987)) +
                  ((proc_control_node_B.t46 * -10.14677428260784 -
                    proc_control_node_B.out1_tmp_om * 0.01986533804350149) +
                   proc_control_node_B.t57_b * 5.1903639302050646)) +
                 ((proc_control_node_B.t85 * -0.038992262967048053 +
                   proc_control_node_B.t56_i * 5.1825024872384838E-5) -
                  proc_control_node_B.t65_o * 0.0010125044874363649)) +
                ((proc_control_node_B.t73 * -0.1235636590052834 -
                  proc_control_node_B.t81 * 0.53015902215788635) +
                 proc_control_node_B.t68_i * 1.606290206365557E-6)) +
               ((proc_control_node_B.out1_tmp_c * 0.00042780737967584029 -
                 proc_control_node_B.t37_f * 4.9794996397332282E-5) -
                proc_control_node_B.t63 * 0.53015902215788635)) +
              (((proc_control_node_B.t80 * 0.0039859244840414 -
                 proc_control_node_B.out1_tmp_oc * 5.2828771531483014E-6) +
                proc_control_node_B.t33_n * 16.434929686894481) +
               proc_control_node_B.t39_e * 1.606290206365557E-6)) +
    (proc_control_node_B.t67 * 0.0039859244840414 - 0.0024238305007690032);
}

// Function for MATLAB Function: '<S273>/Predict'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_cf(int32_T n, const
  real_T x[338], int32_T ix0)
{
  real_T t;
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_k = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        proc_control_node_B.absxk_i3 = fabs(x[k - 1]);
        if (proc_control_node_B.absxk_i3 > proc_control_node_B.scale_k) {
          t = proc_control_node_B.scale_k / proc_control_node_B.absxk_i3;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_k = proc_control_node_B.absxk_i3;
        } else {
          t = proc_control_node_B.absxk_i3 / proc_control_node_B.scale_k;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_k * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S273>/Predict'
void proc_control_nodeModelClass::proc_control_node_xgemv_l(int32_T m, int32_T n,
  const real_T A[338], int32_T ia0, const real_T x[338], int32_T ix0, real_T y
  [13])
{
  int32_T b;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y[b_iy] = 0.0;
    }

    b_iy = 0;
    b = (n - 1) * 26 + ia0;
    for (iac = ia0; iac <= b; iac += 26) {
      proc_control_node_B.ix_ar = ix0;
      proc_control_node_B.c_pq = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_pq += A[ia - 1] * x[proc_control_node_B.ix_ar - 1];
        proc_control_node_B.ix_ar++;
      }

      y[b_iy] += proc_control_node_B.c_pq;
      b_iy++;
    }
  }
}

// Function for MATLAB Function: '<S273>/Predict'
void proc_control_nodeModelClass::proc_control_node_xgerc_e(int32_T m, int32_T n,
  real_T alpha1, int32_T ix0, const real_T y[13], real_T A[338], int32_T ia0)
{
  int32_T b;
  int32_T ijA;
  int32_T ix;
  int32_T j;
  int32_T jy;
  if (!(alpha1 == 0.0)) {
    proc_control_node_B.jA_d = ia0 - 1;
    jy = 0;
    for (j = 0; j < n; j++) {
      if (y[jy] != 0.0) {
        proc_control_node_B.temp_g = y[jy] * alpha1;
        ix = ix0;
        b = m + proc_control_node_B.jA_d;
        for (ijA = proc_control_node_B.jA_d; ijA < b; ijA++) {
          A[ijA] += A[ix - 1] * proc_control_node_B.temp_g;
          ix++;
        }
      }

      jy++;
      proc_control_node_B.jA_d += 26;
    }
  }
}

// Function for MATLAB Function: '<S273>/Predict'
void proc_control_nodeModelClass::proc_control_node_xzlarf_j(int32_T m, int32_T
  n, int32_T iv0, real_T tau, real_T C[338], int32_T ic0, real_T work[13])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_f = m;
    proc_control_node_B.lastc_g = iv0 + m;
    while ((proc_control_node_B.lastv_f > 0) && (C[proc_control_node_B.lastc_g -
            2] == 0.0)) {
      proc_control_node_B.lastv_f--;
      proc_control_node_B.lastc_g--;
    }

    proc_control_node_B.lastc_g = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_g > 0)) {
      proc_control_node_B.coltop_g = (proc_control_node_B.lastc_g - 1) * 26 +
        ic0;
      proc_control_node_B.ia_a = proc_control_node_B.coltop_g;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_a <= (proc_control_node_B.coltop_g +
             proc_control_node_B.lastv_f) - 1) {
          if (C[proc_control_node_B.ia_a - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_a++;
          }
        } else {
          proc_control_node_B.lastc_g--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_f = 0;
    proc_control_node_B.lastc_g = 0;
  }

  if (proc_control_node_B.lastv_f > 0) {
    proc_control_node_xgemv_l(proc_control_node_B.lastv_f,
      proc_control_node_B.lastc_g, C, ic0, C, iv0, work);
    proc_control_node_xgerc_e(proc_control_node_B.lastv_f,
      proc_control_node_B.lastc_g, -tau, iv0, work, C, ic0);
  }
}

// Function for MATLAB Function: '<S273>/Predict'
void proc_control_nodeModelClass::proc_control_node_qrf_j(real_T A[338], int32_T
  ia0, int32_T m, int32_T n, int32_T nfxd, real_T tau[13])
{
  memset(&proc_control_node_B.work_j[0], 0, 13U * sizeof(real_T));
  proc_control_node_B.i_l = 0;
  while (proc_control_node_B.i_l <= nfxd - 1) {
    proc_control_node_B.ii_h = ((proc_control_node_B.i_l * 26 + ia0) +
      proc_control_node_B.i_l) - 1;
    proc_control_node_B.mmi_tmp_l = m - proc_control_node_B.i_l;
    if (proc_control_node_B.i_l + 1 < m) {
      proc_control_node_B.b_atmp_m = A[proc_control_node_B.ii_h];
      tau[proc_control_node_B.i_l] = 0.0;
      if (proc_control_node_B.mmi_tmp_l > 0) {
        proc_control_node_B.beta1_n = proc_control_node_xnrm2_cf
          (proc_control_node_B.mmi_tmp_l - 1, A, proc_control_node_B.ii_h + 2);
        if (proc_control_node_B.beta1_n != 0.0) {
          proc_control_node_B.beta1_n = proc_control_node_rt_hypotd_snf
            (A[proc_control_node_B.ii_h], proc_control_node_B.beta1_n);
          if (A[proc_control_node_B.ii_h] >= 0.0) {
            proc_control_node_B.beta1_n = -proc_control_node_B.beta1_n;
          }

          if (fabs(proc_control_node_B.beta1_n) < 1.0020841800044864E-292) {
            proc_control_node_B.knt_l = -1;
            proc_control_node_B.mmip1_d = proc_control_node_B.ii_h +
              proc_control_node_B.mmi_tmp_l;
            do {
              proc_control_node_B.knt_l++;
              proc_control_node_B.b_k_f = proc_control_node_B.ii_h + 1;
              while (proc_control_node_B.b_k_f + 1 <=
                     proc_control_node_B.mmip1_d) {
                A[proc_control_node_B.b_k_f] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_f++;
              }

              proc_control_node_B.beta1_n *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp_m *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1_n) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1_n = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp_m, proc_control_node_xnrm2_cf
               (proc_control_node_B.mmi_tmp_l - 1, A, proc_control_node_B.ii_h +
                2));
            if (proc_control_node_B.b_atmp_m >= 0.0) {
              proc_control_node_B.beta1_n = -proc_control_node_B.beta1_n;
            }

            tau[proc_control_node_B.i_l] = (proc_control_node_B.beta1_n -
              proc_control_node_B.b_atmp_m) / proc_control_node_B.beta1_n;
            proc_control_node_B.b_atmp_m = 1.0 / (proc_control_node_B.b_atmp_m -
              proc_control_node_B.beta1_n);
            proc_control_node_B.b_k_f = proc_control_node_B.ii_h + 1;
            while (proc_control_node_B.b_k_f + 1 <= proc_control_node_B.mmip1_d)
            {
              A[proc_control_node_B.b_k_f] *= proc_control_node_B.b_atmp_m;
              proc_control_node_B.b_k_f++;
            }

            proc_control_node_B.mmip1_d = 0;
            while (proc_control_node_B.mmip1_d <= proc_control_node_B.knt_l) {
              proc_control_node_B.beta1_n *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1_d++;
            }

            proc_control_node_B.b_atmp_m = proc_control_node_B.beta1_n;
          } else {
            tau[proc_control_node_B.i_l] = (proc_control_node_B.beta1_n -
              A[proc_control_node_B.ii_h]) / proc_control_node_B.beta1_n;
            proc_control_node_B.b_atmp_m = 1.0 / (A[proc_control_node_B.ii_h] -
              proc_control_node_B.beta1_n);
            proc_control_node_B.knt_l = proc_control_node_B.ii_h +
              proc_control_node_B.mmi_tmp_l;
            proc_control_node_B.mmip1_d = proc_control_node_B.ii_h + 1;
            while (proc_control_node_B.mmip1_d + 1 <= proc_control_node_B.knt_l)
            {
              A[proc_control_node_B.mmip1_d] *= proc_control_node_B.b_atmp_m;
              proc_control_node_B.mmip1_d++;
            }

            proc_control_node_B.b_atmp_m = proc_control_node_B.beta1_n;
          }
        }
      }

      A[proc_control_node_B.ii_h] = proc_control_node_B.b_atmp_m;
    } else {
      tau[proc_control_node_B.i_l] = 0.0;
    }

    if (proc_control_node_B.i_l + 1 < n) {
      proc_control_node_B.b_atmp_m = A[proc_control_node_B.ii_h];
      A[proc_control_node_B.ii_h] = 1.0;
      proc_control_node_xzlarf_j(proc_control_node_B.mmi_tmp_l, (n -
        proc_control_node_B.i_l) - 1, proc_control_node_B.ii_h + 1,
        tau[proc_control_node_B.i_l], A, proc_control_node_B.ii_h + 27,
        proc_control_node_B.work_j);
      A[proc_control_node_B.ii_h] = proc_control_node_B.b_atmp_m;
    }

    proc_control_node_B.i_l++;
  }
}

// Function for MATLAB Function: '<S273>/Predict'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_c(real_T A[338],
  real_T tau[13])
{
  memset(&tau[0], 0, 13U * sizeof(real_T));
  proc_control_node_qrf_j(A, 1, 26, 13, 13, tau);
}

// Function for MATLAB Function: '<S273>/Predict'
void proc_control_nodeModelClass::proc_control_node_xorgqr_e(int32_T m, int32_T
  n, int32_T k, real_T A[338], int32_T ia0, const real_T tau[13], int32_T itau0)
{
  if (n >= 1) {
    proc_control_node_B.itau_m = k;
    while (proc_control_node_B.itau_m <= n - 1) {
      proc_control_node_B.i_k = (proc_control_node_B.itau_m * 26 + ia0) - 1;
      proc_control_node_B.iaii_j = 0;
      while (proc_control_node_B.iaii_j <= m - 1) {
        A[proc_control_node_B.i_k + proc_control_node_B.iaii_j] = 0.0;
        proc_control_node_B.iaii_j++;
      }

      A[proc_control_node_B.i_k + proc_control_node_B.itau_m] = 1.0;
      proc_control_node_B.itau_m++;
    }

    proc_control_node_B.itau_m = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_c[0], 0, 13U * sizeof(real_T));
    proc_control_node_B.i_k = k;
    while (proc_control_node_B.i_k >= 1) {
      proc_control_node_B.iaii_j = (((proc_control_node_B.i_k - 1) * 26 + ia0) +
        proc_control_node_B.i_k) - 1;
      if (proc_control_node_B.i_k < n) {
        A[proc_control_node_B.iaii_j - 1] = 1.0;
        proc_control_node_xzlarf_j((m - proc_control_node_B.i_k) + 1, n -
          proc_control_node_B.i_k, proc_control_node_B.iaii_j,
          tau[proc_control_node_B.itau_m], A, proc_control_node_B.iaii_j + 26,
          proc_control_node_B.work_c);
      }

      if (proc_control_node_B.i_k < m) {
        proc_control_node_B.b_jm = (proc_control_node_B.iaii_j + m) -
          proc_control_node_B.i_k;
        proc_control_node_B.b_k_k = proc_control_node_B.iaii_j;
        while (proc_control_node_B.b_k_k + 1 <= proc_control_node_B.b_jm) {
          A[proc_control_node_B.b_k_k] *= -tau[proc_control_node_B.itau_m];
          proc_control_node_B.b_k_k++;
        }
      }

      A[proc_control_node_B.iaii_j - 1] = 1.0 - tau[proc_control_node_B.itau_m];
      proc_control_node_B.b_jm = 0;
      while (proc_control_node_B.b_jm <= proc_control_node_B.i_k - 2) {
        A[(proc_control_node_B.iaii_j - proc_control_node_B.b_jm) - 2] = 0.0;
        proc_control_node_B.b_jm++;
      }

      proc_control_node_B.itau_m--;
      proc_control_node_B.i_k--;
    }
  }
}

// Function for MATLAB Function: '<S273>/Predict'
void proc_control_nodeModelClass::proc_control_node_qr_i(const real_T A[338],
  real_T Q[338], real_T R[169])
{
  memcpy(&proc_control_node_B.b_A_o[0], &A[0], 338U * sizeof(real_T));
  proc_control_node_xgeqrf_c(proc_control_node_B.b_A_o,
    proc_control_node_B.tau_o);
  for (proc_control_node_B.j_d = 0; proc_control_node_B.j_d < 13;
       proc_control_node_B.j_d++) {
    proc_control_node_B.i_i2 = 0;
    while (proc_control_node_B.i_i2 <= proc_control_node_B.j_d) {
      R[proc_control_node_B.i_i2 + 13 * proc_control_node_B.j_d] =
        proc_control_node_B.b_A_o[26 * proc_control_node_B.j_d +
        proc_control_node_B.i_i2];
      proc_control_node_B.i_i2++;
    }

    proc_control_node_B.i_i2 = proc_control_node_B.j_d + 1;
    while (proc_control_node_B.i_i2 + 1 < 14) {
      R[proc_control_node_B.i_i2 + 13 * proc_control_node_B.j_d] = 0.0;
      proc_control_node_B.i_i2++;
    }
  }

  proc_control_node_xorgqr_e(26, 13, 13, proc_control_node_B.b_A_o, 1,
    proc_control_node_B.tau_o, 1);
  proc_control_node_B.i_i2 = 0;
  for (proc_control_node_B.j_d = 0; proc_control_node_B.j_d < 13;
       proc_control_node_B.j_d++) {
    memcpy(&Q[proc_control_node_B.i_i2],
           &proc_control_node_B.b_A_o[proc_control_node_B.i_i2], 26U * sizeof
           (real_T));
    proc_control_node_B.i_i2 += 26;
  }
}

// Function for MATLAB Function: '<S273>/Predict'
void proc_control_nodeModelClass::proc_control_node_qrFactor_d(const real_T A
  [169], real_T S[169], const real_T Ns[169])
{
  for (proc_control_node_B.j_i = 0; proc_control_node_B.j_i < 13;
       proc_control_node_B.j_i++) {
    proc_control_node_B.coffset_m = proc_control_node_B.j_i * 13;
    for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 13;
         proc_control_node_B.i_a++) {
      proc_control_node_B.aoffset_j = proc_control_node_B.i_a * 13;
      proc_control_node_B.s_l = 0.0;
      for (proc_control_node_B.k_h = 0; proc_control_node_B.k_h < 13;
           proc_control_node_B.k_h++) {
        proc_control_node_B.s_l += A[proc_control_node_B.k_h * 13 +
          proc_control_node_B.j_i] * S[proc_control_node_B.aoffset_j +
          proc_control_node_B.k_h];
      }

      proc_control_node_B.y_g2[proc_control_node_B.coffset_m +
        proc_control_node_B.i_a] = proc_control_node_B.s_l;
      proc_control_node_B.k_h = proc_control_node_B.i_a + 26 *
        proc_control_node_B.j_i;
      proc_control_node_B.y_o[proc_control_node_B.k_h] =
        proc_control_node_B.y_g2[13 * proc_control_node_B.j_i +
        proc_control_node_B.i_a];
      proc_control_node_B.y_o[proc_control_node_B.k_h + 13] = Ns[13 *
        proc_control_node_B.i_a + proc_control_node_B.j_i];
    }
  }

  proc_control_node_qr_i(proc_control_node_B.y_o, proc_control_node_B.a__1,
    proc_control_node_B.y_g2);
  proc_control_node_B.coffset_m = 0;
  for (proc_control_node_B.j_i = 0; proc_control_node_B.j_i < 13;
       proc_control_node_B.j_i++) {
    proc_control_node_B.k_h = 0;
    for (proc_control_node_B.i_a = 0; proc_control_node_B.i_a < 13;
         proc_control_node_B.i_a++) {
      S[proc_control_node_B.i_a + proc_control_node_B.coffset_m] =
        proc_control_node_B.y_g2[proc_control_node_B.k_h +
        proc_control_node_B.j_i];
      proc_control_node_B.k_h += 13;
    }

    proc_control_node_B.coffset_m += 13;
  }
}

real_T rt_atan2d_snf(real_T u0, real_T u1)
{
  real_T y;
  int32_T u0_0;
  int32_T u1_0;
  if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = (rtNaN);
  } else if (rtIsInf(u0) && rtIsInf(u1)) {
    if (u0 > 0.0) {
      u0_0 = 1;
    } else {
      u0_0 = -1;
    }

    if (u1 > 0.0) {
      u1_0 = 1;
    } else {
      u1_0 = -1;
    }

    y = atan2(static_cast<real_T>(u0_0), static_cast<real_T>(u1_0));
  } else if (u1 == 0.0) {
    if (u0 > 0.0) {
      y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
      y = -(RT_PI / 2.0);
    } else {
      y = 0.0;
    }
  } else {
    y = atan2(u0, u1);
  }

  return y;
}

real_T rt_roundd_snf(real_T u)
{
  real_T y;
  if (fabs(u) < 4.503599627370496E+15) {
    if (u >= 0.5) {
      y = floor(u + 0.5);
    } else if (u > -0.5) {
      y = u * 0.0;
    } else {
      y = ceil(u - 0.5);
    }
  } else {
    y = u;
  }

  return y;
}

void proc_control_nodeModelClass::proc_contr_quaternionBase_slerp(real_T q1_a,
  real_T q1_b, real_T q1_c, real_T q1_d, real_T q2_a, real_T q2_b, real_T q2_c,
  real_T q2_d, real_T t, real_T *qo_a, real_T *qo_b, real_T *qo_c, real_T *qo_d)
{
  real_T b_x;
  real_T n;
  n = sqrt(((q1_a * q1_a + q1_b * q1_b) + q1_c * q1_c) + q1_d * q1_d);
  proc_control_node_B.q1n_a = q1_a / n;
  proc_control_node_B.q1n_b = q1_b / n;
  proc_control_node_B.q1n_c = q1_c / n;
  proc_control_node_B.q1n_d = q1_d / n;
  n = sqrt(((q2_a * q2_a + q2_b * q2_b) + q2_c * q2_c) + q2_d * q2_d);
  proc_control_node_B.q2n_a = q2_a / n;
  proc_control_node_B.q2n_b_m = q2_b / n;
  proc_control_node_B.q2n_c_c = q2_c / n;
  n = q2_d / n;
  proc_control_node_B.dp_g = ((proc_control_node_B.q1n_a *
    proc_control_node_B.q2n_a + proc_control_node_B.q1n_b *
    proc_control_node_B.q2n_b_m) + proc_control_node_B.q1n_c *
    proc_control_node_B.q2n_c_c) + proc_control_node_B.q1n_d * n;
  if (proc_control_node_B.dp_g < 0.0) {
    proc_control_node_B.q2n_a = -proc_control_node_B.q2n_a;
    proc_control_node_B.q2n_b_m = -proc_control_node_B.q2n_b_m;
    proc_control_node_B.q2n_c_c = -proc_control_node_B.q2n_c_c;
    n = -n;
    proc_control_node_B.dp_g = -proc_control_node_B.dp_g;
  }

  if (proc_control_node_B.dp_g > 1.0) {
    proc_control_node_B.dp_g = 1.0;
  }

  proc_control_node_B.theta0_b = acos(proc_control_node_B.dp_g);
  proc_control_node_B.dp_g = 1.0 / sin(proc_control_node_B.theta0_b);
  b_x = sin((1.0 - t) * proc_control_node_B.theta0_b);
  proc_control_node_B.theta0_b = sin(t * proc_control_node_B.theta0_b);
  *qo_a = (b_x * proc_control_node_B.q1n_a + proc_control_node_B.theta0_b *
           proc_control_node_B.q2n_a) * proc_control_node_B.dp_g;
  *qo_b = (b_x * proc_control_node_B.q1n_b + proc_control_node_B.theta0_b *
           proc_control_node_B.q2n_b_m) * proc_control_node_B.dp_g;
  *qo_c = (b_x * proc_control_node_B.q1n_c + proc_control_node_B.theta0_b *
           proc_control_node_B.q2n_c_c) * proc_control_node_B.dp_g;
  *qo_d = (b_x * proc_control_node_B.q1n_d + proc_control_node_B.theta0_b * n) *
    proc_control_node_B.dp_g;
  if (rtIsInf(proc_control_node_B.dp_g)) {
    *qo_a = proc_control_node_B.q1n_a;
    *qo_b = proc_control_node_B.q1n_b;
    *qo_c = proc_control_node_B.q1n_c;
    *qo_d = proc_control_node_B.q1n_d;
  }

  n = sqrt(((*qo_a * *qo_a + *qo_b * *qo_b) + *qo_c * *qo_c) + *qo_d * *qo_d);
  *qo_a /= n;
  *qo_b /= n;
  *qo_c /= n;
  *qo_d /= n;
}

void proc_control_nodeModelClass::proc_control_quaternionBase_log(real_T q_a,
  real_T q_b, real_T q_c, real_T q_d, real_T *b_q_a, real_T *b_q_b, real_T
  *b_q_c, real_T *b_q_d)
{
  int32_T b_i;
  int32_T nx;
  int32_T vscale_size_idx_1;
  proc_control_node_B.vnorm = sqrt((q_b * q_b + q_c * q_c) + q_d * q_d);
  proc_control_node_B.qnorm = sqrt(q_a * q_a + proc_control_node_B.vnorm *
    proc_control_node_B.vnorm);
  b_i = 0;
  if (proc_control_node_B.vnorm != 0.0) {
    for (nx = 0; nx < 1; nx++) {
      b_i++;
    }
  }

  vscale_size_idx_1 = b_i;
  b_i--;
  for (nx = 0; nx <= b_i; nx++) {
    proc_control_node_B.vscale_data = q_a / proc_control_node_B.qnorm;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    proc_control_node_B.x_data = proc_control_node_B.vscale_data;
  }

  nx = vscale_size_idx_1 - 1;
  for (b_i = 0; b_i <= nx; b_i++) {
    proc_control_node_B.x_data = acos(proc_control_node_B.x_data);
  }

  if (0 <= vscale_size_idx_1 - 1) {
    proc_control_node_B.vscale_data = proc_control_node_B.x_data /
      proc_control_node_B.vnorm;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    proc_control_node_B.x_data = q_b * proc_control_node_B.vscale_data;
  }

  *b_q_d = q_b;
  if (proc_control_node_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = proc_control_node_B.x_data;
    }
  }

  *b_q_b = *b_q_d;
  if (!(proc_control_node_B.vnorm != 0.0)) {
    *b_q_b = 0.0;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    proc_control_node_B.x_data = q_c * proc_control_node_B.vscale_data;
  }

  *b_q_d = q_c;
  if (proc_control_node_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = proc_control_node_B.x_data;
    }
  }

  *b_q_c = *b_q_d;
  if (!(proc_control_node_B.vnorm != 0.0)) {
    *b_q_c = 0.0;
  }

  if (0 <= vscale_size_idx_1 - 1) {
    proc_control_node_B.x_data = q_d * proc_control_node_B.vscale_data;
  }

  *b_q_d = q_d;
  if (proc_control_node_B.vnorm != 0.0) {
    for (b_i = 0; b_i < 1; b_i++) {
      *b_q_d = proc_control_node_B.x_data;
    }
  }

  if (!(proc_control_node_B.vnorm != 0.0)) {
    *b_q_d = 0.0;
  }

  *b_q_a = log(proc_control_node_B.qnorm);
}

void proc_control_nodeModelClass::proc_control_no_SystemCore_step
  (robotics_slcore_internal_bloc_T *obj, real_T varargin_1, const real_T
   varargin_2[4], const real_T varargin_3[4], const real_T varargin_4[2], real_T
   varargout_1[4], real_T varargout_2[3], real_T varargout_3[3])
{
  if (obj->TunablePropsChanged) {
    obj->TunablePropsChanged = false;
  }

  proc_control_node_B.linearScaling = 1.0 / (varargin_4[1] - varargin_4[0]);
  proc_control_node_B.b_idx_0 = (varargin_1 - varargin_4[0]) *
    proc_control_node_B.linearScaling;
  if (varargin_1 < varargin_4[0]) {
    proc_control_node_B.b_idx_0 = 0.0;
  }

  if (varargin_1 > varargin_4[1]) {
    proc_control_node_B.b_idx_0 = 1.0;
  }

  if (varargin_1 < varargin_4[0]) {
    proc_control_node_B.linearScaling = 0.0;
  }

  proc_control_node_B.e_idx_0 = proc_control_node_B.linearScaling;
  if (varargin_1 > varargin_4[1]) {
    proc_control_node_B.e_idx_0 = 0.0;
  }

  proc_control_node_B.n_n = sqrt(((varargin_2[0] * varargin_2[0] + varargin_2[1]
    * varargin_2[1]) + varargin_2[2] * varargin_2[2]) + varargin_2[3] *
    varargin_2[3]);
  proc_control_node_B.pn_a = varargin_2[0] / proc_control_node_B.n_n;
  proc_control_node_B.pn_b = varargin_2[1] / proc_control_node_B.n_n;
  proc_control_node_B.pn_c = varargin_2[2] / proc_control_node_B.n_n;
  proc_control_node_B.pn_d = varargin_2[3] / proc_control_node_B.n_n;
  proc_control_node_B.n_n = sqrt(((varargin_3[0] * varargin_3[0] + varargin_3[1]
    * varargin_3[1]) + varargin_3[2] * varargin_3[2]) + varargin_3[3] *
    varargin_3[3]);
  proc_control_node_B.qn_a = varargin_3[0] / proc_control_node_B.n_n;
  proc_control_node_B.qn_b = varargin_3[1] / proc_control_node_B.n_n;
  proc_control_node_B.qn_c = varargin_3[2] / proc_control_node_B.n_n;
  proc_control_node_B.qn_d = varargin_3[3] / proc_control_node_B.n_n;
  proc_control_node_B.n_tmp = sqrt(((proc_control_node_B.pn_a *
    proc_control_node_B.pn_a + proc_control_node_B.pn_b *
    proc_control_node_B.pn_b) + proc_control_node_B.pn_c *
    proc_control_node_B.pn_c) + proc_control_node_B.pn_d *
    proc_control_node_B.pn_d);
  proc_control_node_B.n_tmp_e = proc_control_node_B.pn_a /
    proc_control_node_B.n_tmp;
  proc_control_node_B.q1n_b_tmp = proc_control_node_B.pn_b /
    proc_control_node_B.n_tmp;
  proc_control_node_B.q1n_c_tmp = proc_control_node_B.pn_c /
    proc_control_node_B.n_tmp;
  proc_control_node_B.q1n_d_tmp = proc_control_node_B.pn_d /
    proc_control_node_B.n_tmp;
  proc_control_node_B.n_tmp_o = sqrt(((proc_control_node_B.qn_a *
    proc_control_node_B.qn_a + proc_control_node_B.qn_b *
    proc_control_node_B.qn_b) + proc_control_node_B.qn_c *
    proc_control_node_B.qn_c) + proc_control_node_B.qn_d *
    proc_control_node_B.qn_d);
  proc_control_node_B.n_tmp = proc_control_node_B.qn_a /
    proc_control_node_B.n_tmp_o;
  proc_control_node_B.n_n = proc_control_node_B.n_tmp;
  proc_control_node_B.q2n_b_tmp = proc_control_node_B.qn_b /
    proc_control_node_B.n_tmp_o;
  proc_control_node_B.q2n_b = proc_control_node_B.q2n_b_tmp;
  proc_control_node_B.q2n_c_tmp = proc_control_node_B.qn_c /
    proc_control_node_B.n_tmp_o;
  proc_control_node_B.q2n_c = proc_control_node_B.q2n_c_tmp;
  proc_control_node_B.n_tmp_o = proc_control_node_B.qn_d /
    proc_control_node_B.n_tmp_o;
  proc_control_node_B.q2n_d = proc_control_node_B.n_tmp_o;
  proc_control_node_B.dp_tmp = ((proc_control_node_B.n_tmp_e *
    proc_control_node_B.n_tmp + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.q2n_b_tmp) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.q2n_c_tmp) + proc_control_node_B.q1n_d_tmp *
    proc_control_node_B.n_tmp_o;
  proc_control_node_B.dp = proc_control_node_B.dp_tmp;
  if (proc_control_node_B.dp_tmp < 0.0) {
    proc_control_node_B.n_n = -proc_control_node_B.n_tmp;
    proc_control_node_B.q2n_b = -proc_control_node_B.q2n_b_tmp;
    proc_control_node_B.q2n_c = -proc_control_node_B.q2n_c_tmp;
    proc_control_node_B.q2n_d = -proc_control_node_B.n_tmp_o;
    proc_control_node_B.dp = -proc_control_node_B.dp_tmp;
  }

  if (proc_control_node_B.dp > 1.0) {
    proc_control_node_B.dp = 1.0;
  }

  proc_control_node_B.theta0 = acos(proc_control_node_B.dp);
  proc_control_node_B.sinv_tmp = sin(proc_control_node_B.theta0);
  proc_control_node_B.dp = 1.0 / proc_control_node_B.sinv_tmp;
  proc_control_node_B.theta0 = sin(0.0 * proc_control_node_B.theta0);
  proc_control_node_B.linearScaling = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.n_tmp_e + proc_control_node_B.theta0 *
    proc_control_node_B.n_n) * proc_control_node_B.dp;
  proc_control_node_B.pnCorrected_b = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.q1n_b_tmp + proc_control_node_B.theta0 *
    proc_control_node_B.q2n_b) * proc_control_node_B.dp;
  proc_control_node_B.pnCorrected_c = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.q1n_c_tmp + proc_control_node_B.theta0 *
    proc_control_node_B.q2n_c) * proc_control_node_B.dp;
  proc_control_node_B.pnCorrected_d = (proc_control_node_B.sinv_tmp *
    proc_control_node_B.q1n_d_tmp + proc_control_node_B.theta0 *
    proc_control_node_B.q2n_d) * proc_control_node_B.dp;
  if (rtIsInf(proc_control_node_B.dp)) {
    proc_control_node_B.linearScaling = proc_control_node_B.n_tmp_e;
    proc_control_node_B.pnCorrected_b = proc_control_node_B.q1n_b_tmp;
    proc_control_node_B.pnCorrected_c = proc_control_node_B.q1n_c_tmp;
    proc_control_node_B.pnCorrected_d = proc_control_node_B.q1n_d_tmp;
  }

  proc_control_node_B.n_n = sqrt(((proc_control_node_B.linearScaling *
    proc_control_node_B.linearScaling + proc_control_node_B.pnCorrected_b *
    proc_control_node_B.pnCorrected_b) + proc_control_node_B.pnCorrected_c *
    proc_control_node_B.pnCorrected_c) + proc_control_node_B.pnCorrected_d *
    proc_control_node_B.pnCorrected_d);
  proc_control_node_B.linearScaling /= proc_control_node_B.n_n;
  proc_control_node_B.pnCorrected_b /= proc_control_node_B.n_n;
  proc_control_node_B.pnCorrected_c /= proc_control_node_B.n_n;
  proc_control_node_B.pnCorrected_d /= proc_control_node_B.n_n;
  proc_control_node_B.n_n = proc_control_node_B.n_tmp;
  proc_control_node_B.q2n_b = proc_control_node_B.q2n_b_tmp;
  proc_control_node_B.q2n_c = proc_control_node_B.q2n_c_tmp;
  proc_control_node_B.q2n_d = proc_control_node_B.n_tmp_o;
  proc_control_node_B.dp = proc_control_node_B.dp_tmp;
  if (proc_control_node_B.dp_tmp < 0.0) {
    proc_control_node_B.n_n = -proc_control_node_B.n_tmp;
    proc_control_node_B.q2n_b = -proc_control_node_B.q2n_b_tmp;
    proc_control_node_B.q2n_c = -proc_control_node_B.q2n_c_tmp;
    proc_control_node_B.q2n_d = -proc_control_node_B.n_tmp_o;
    proc_control_node_B.dp = -proc_control_node_B.dp_tmp;
  }

  if (proc_control_node_B.dp > 1.0) {
    proc_control_node_B.dp = 1.0;
  }

  proc_control_node_B.theta0 = acos(proc_control_node_B.dp);
  proc_control_node_B.sinv_tmp = sin(proc_control_node_B.theta0);
  proc_control_node_B.dp = 1.0 / proc_control_node_B.sinv_tmp;
  proc_control_node_B.theta0 = sin(0.0 * proc_control_node_B.theta0);
  proc_control_node_B.n_tmp = (proc_control_node_B.theta0 *
    proc_control_node_B.n_tmp_e + proc_control_node_B.sinv_tmp *
    proc_control_node_B.n_n) * proc_control_node_B.dp;
  proc_control_node_B.n_tmp_o = (proc_control_node_B.theta0 *
    proc_control_node_B.q1n_b_tmp + proc_control_node_B.sinv_tmp *
    proc_control_node_B.q2n_b) * proc_control_node_B.dp;
  proc_control_node_B.q2n_c = (proc_control_node_B.theta0 *
    proc_control_node_B.q1n_c_tmp + proc_control_node_B.sinv_tmp *
    proc_control_node_B.q2n_c) * proc_control_node_B.dp;
  proc_control_node_B.q2n_d = (proc_control_node_B.theta0 *
    proc_control_node_B.q1n_d_tmp + proc_control_node_B.sinv_tmp *
    proc_control_node_B.q2n_d) * proc_control_node_B.dp;
  if (rtIsInf(proc_control_node_B.dp)) {
    proc_control_node_B.n_tmp = proc_control_node_B.n_tmp_e;
    proc_control_node_B.n_tmp_o = proc_control_node_B.q1n_b_tmp;
    proc_control_node_B.q2n_c = proc_control_node_B.q1n_c_tmp;
    proc_control_node_B.q2n_d = proc_control_node_B.q1n_d_tmp;
  }

  proc_control_node_B.n_n = sqrt(((proc_control_node_B.n_tmp *
    proc_control_node_B.n_tmp + proc_control_node_B.n_tmp_o *
    proc_control_node_B.n_tmp_o) + proc_control_node_B.q2n_c *
    proc_control_node_B.q2n_c) + proc_control_node_B.q2n_d *
    proc_control_node_B.q2n_d);
  proc_control_node_B.n_tmp /= proc_control_node_B.n_n;
  proc_control_node_B.n_tmp_o /= proc_control_node_B.n_n;
  proc_control_node_B.q2n_c /= proc_control_node_B.n_n;
  proc_control_node_B.q2n_d /= proc_control_node_B.n_n;
  proc_contr_quaternionBase_slerp(proc_control_node_B.pn_a,
    proc_control_node_B.pn_b, proc_control_node_B.pn_c, proc_control_node_B.pn_d,
    proc_control_node_B.qn_a, proc_control_node_B.qn_b, proc_control_node_B.qn_c,
    proc_control_node_B.qn_d, proc_control_node_B.b_idx_0,
    &proc_control_node_B.n_n, &proc_control_node_B.n_tmp_e,
    &proc_control_node_B.q1n_b_tmp, &proc_control_node_B.q1n_c_tmp);
  proc_control_quaternionBase_log(((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp_o) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_d, ((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp_o + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_d) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_c, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_c - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_d) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp_o, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_d + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp_o) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp, &proc_control_node_B.pn_a,
    &proc_control_node_B.pn_b, &proc_control_node_B.pn_c,
    &proc_control_node_B.pn_d);
  proc_control_node_B.qn_a = (((proc_control_node_B.n_n *
    proc_control_node_B.pn_a - proc_control_node_B.n_tmp_e *
    proc_control_node_B.pn_b) - proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_c) - proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_d) * proc_control_node_B.e_idx_0 * 2.0;
  proc_control_node_B.qn_b = (((proc_control_node_B.n_n *
    proc_control_node_B.pn_b + proc_control_node_B.n_tmp_e *
    proc_control_node_B.pn_a) + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_d) - proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_c) * proc_control_node_B.e_idx_0 * 2.0;
  proc_control_node_B.qn_c = (((proc_control_node_B.n_n *
    proc_control_node_B.pn_c - proc_control_node_B.n_tmp_e *
    proc_control_node_B.pn_d) + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_a) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_b) * proc_control_node_B.e_idx_0 * 2.0;
  proc_control_node_B.pn_d = (((proc_control_node_B.n_n *
    proc_control_node_B.pn_d + proc_control_node_B.n_tmp_e *
    proc_control_node_B.pn_c) - proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_b) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_a) * proc_control_node_B.e_idx_0 * 2.0;
  proc_control_quaternionBase_log(((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp_o) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_d, ((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp_o + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_d) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_c, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_c - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_d) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp_o, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_d + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp_o) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp, &proc_control_node_B.pn_a,
    &proc_control_node_B.pn_b, &proc_control_node_B.pn_c,
    &proc_control_node_B.qn_d);
  proc_control_node_B.dp = ((proc_control_node_B.n_n * proc_control_node_B.pn_a
    - proc_control_node_B.n_tmp_e * proc_control_node_B.pn_b) -
    proc_control_node_B.q1n_b_tmp * proc_control_node_B.pn_c) -
    proc_control_node_B.q1n_c_tmp * proc_control_node_B.qn_d;
  proc_control_node_B.sinv_tmp = ((proc_control_node_B.n_n *
    proc_control_node_B.pn_b + proc_control_node_B.n_tmp_e *
    proc_control_node_B.pn_a) + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.qn_d) - proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_c;
  proc_control_node_B.q2n_b = ((proc_control_node_B.n_n *
    proc_control_node_B.pn_c - proc_control_node_B.n_tmp_e *
    proc_control_node_B.qn_d) + proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_a) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_b;
  proc_control_node_B.theta0 = ((proc_control_node_B.n_n *
    proc_control_node_B.qn_d + proc_control_node_B.n_tmp_e *
    proc_control_node_B.pn_c) - proc_control_node_B.q1n_b_tmp *
    proc_control_node_B.pn_b) + proc_control_node_B.q1n_c_tmp *
    proc_control_node_B.pn_a;
  proc_control_quaternionBase_log(((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp_o) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_d, ((proc_control_node_B.linearScaling *
    proc_control_node_B.n_tmp_o + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.q2n_d) - -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.q2n_c, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_c - -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_d) + -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp_o, ((proc_control_node_B.linearScaling *
    proc_control_node_B.q2n_d + -proc_control_node_B.pnCorrected_b *
    proc_control_node_B.q2n_c) - -proc_control_node_B.pnCorrected_c *
    proc_control_node_B.n_tmp_o) + -proc_control_node_B.pnCorrected_d *
    proc_control_node_B.n_tmp, &proc_control_node_B.pn_a,
    &proc_control_node_B.pn_b, &proc_control_node_B.pn_c,
    &proc_control_node_B.qn_d);
  proc_control_node_B.linearScaling = (((proc_control_node_B.dp *
    proc_control_node_B.pn_a - proc_control_node_B.sinv_tmp *
    proc_control_node_B.pn_b) - proc_control_node_B.q2n_b *
    proc_control_node_B.pn_c) - proc_control_node_B.theta0 *
    proc_control_node_B.qn_d) * 0.0 * 2.0;
  proc_control_node_B.pnCorrected_b = (((proc_control_node_B.dp *
    proc_control_node_B.pn_b + proc_control_node_B.sinv_tmp *
    proc_control_node_B.pn_a) + proc_control_node_B.q2n_b *
    proc_control_node_B.qn_d) - proc_control_node_B.theta0 *
    proc_control_node_B.pn_c) * 0.0 * 2.0;
  proc_control_node_B.pnCorrected_c = (((proc_control_node_B.dp *
    proc_control_node_B.pn_c - proc_control_node_B.sinv_tmp *
    proc_control_node_B.qn_d) + proc_control_node_B.q2n_b *
    proc_control_node_B.pn_a) + proc_control_node_B.theta0 *
    proc_control_node_B.pn_b) * 0.0 * 2.0;
  proc_control_node_B.qn_d = (((proc_control_node_B.dp *
    proc_control_node_B.qn_d + proc_control_node_B.sinv_tmp *
    proc_control_node_B.pn_c) - proc_control_node_B.q2n_b *
    proc_control_node_B.pn_b) + proc_control_node_B.theta0 *
    proc_control_node_B.pn_a) * 0.0 * 2.0;
  varargout_1[0] = proc_control_node_B.n_n;
  varargout_1[1] = proc_control_node_B.n_tmp_e;
  varargout_1[2] = proc_control_node_B.q1n_b_tmp;
  varargout_1[3] = proc_control_node_B.q1n_c_tmp;
  varargout_2[0] = ((proc_control_node_B.qn_a * -proc_control_node_B.n_tmp_e +
                     proc_control_node_B.qn_b * proc_control_node_B.n_n) +
                    proc_control_node_B.qn_c * -proc_control_node_B.q1n_c_tmp) -
    proc_control_node_B.pn_d * -proc_control_node_B.q1n_b_tmp;
  varargout_2[1] = ((proc_control_node_B.qn_a * -proc_control_node_B.q1n_b_tmp -
                     proc_control_node_B.qn_b * -proc_control_node_B.q1n_c_tmp)
                    + proc_control_node_B.qn_c * proc_control_node_B.n_n) +
    proc_control_node_B.pn_d * -proc_control_node_B.n_tmp_e;
  varargout_2[2] = ((proc_control_node_B.qn_a * -proc_control_node_B.q1n_c_tmp +
                     proc_control_node_B.qn_b * -proc_control_node_B.q1n_b_tmp)
                    - proc_control_node_B.qn_c * -proc_control_node_B.n_tmp_e) +
    proc_control_node_B.pn_d * proc_control_node_B.n_n;
  varargout_3[0] = ((proc_control_node_B.linearScaling *
                     -proc_control_node_B.n_tmp_e +
                     proc_control_node_B.pnCorrected_b * proc_control_node_B.n_n)
                    + proc_control_node_B.pnCorrected_c *
                    -proc_control_node_B.q1n_c_tmp) - proc_control_node_B.qn_d *
    -proc_control_node_B.q1n_b_tmp;
  varargout_3[1] = ((proc_control_node_B.linearScaling *
                     -proc_control_node_B.q1n_b_tmp -
                     proc_control_node_B.pnCorrected_b *
                     -proc_control_node_B.q1n_c_tmp) +
                    proc_control_node_B.pnCorrected_c * proc_control_node_B.n_n)
    + proc_control_node_B.qn_d * -proc_control_node_B.n_tmp_e;
  varargout_3[2] = ((proc_control_node_B.linearScaling *
                     -proc_control_node_B.q1n_c_tmp +
                     proc_control_node_B.pnCorrected_b *
                     -proc_control_node_B.q1n_b_tmp) -
                    proc_control_node_B.pnCorrected_c *
                    -proc_control_node_B.n_tmp_e) + proc_control_node_B.qn_d *
    proc_control_node_B.n_n;
}

void proc_control_nodeModelClass::proc_control_node_ppval(const real_T
  pp_breaks[4], const real_T pp_coefs[36], const real_T x[2], real_T v[6])
{
  int32_T b_ix;
  int32_T high_i;
  int32_T low_i;
  int32_T low_ip1;
  int32_T mid_i;
  for (b_ix = 0; b_ix < 2; b_ix++) {
    proc_control_node_B.iv0 = b_ix * 3 - 1;
    if (rtIsNaN(x[b_ix])) {
      v[proc_control_node_B.iv0 + 1] = x[b_ix];
      v[proc_control_node_B.iv0 + 2] = x[b_ix];
      v[proc_control_node_B.iv0 + 3] = x[b_ix];
    } else {
      low_i = 0;
      low_ip1 = 1;
      high_i = 4;
      while (high_i > low_ip1 + 1) {
        mid_i = ((low_i + high_i) + 1) >> 1;
        if (x[b_ix] >= pp_breaks[mid_i - 1]) {
          low_i = mid_i - 1;
          low_ip1 = mid_i;
        } else {
          high_i = mid_i;
        }
      }

      low_ip1 = low_i * 3;
      proc_control_node_B.xloc = x[b_ix] - pp_breaks[low_i];
      v[proc_control_node_B.iv0 + 1] = pp_coefs[low_ip1];
      v[proc_control_node_B.iv0 + 2] = pp_coefs[low_ip1 + 1];
      v[proc_control_node_B.iv0 + 3] = pp_coefs[low_ip1 + 2];
      for (low_i = 0; low_i < 3; low_i++) {
        high_i = ((low_i + 1) * 9 + low_ip1) - 1;
        v[proc_control_node_B.iv0 + 1] = v[proc_control_node_B.iv0 + 1] *
          proc_control_node_B.xloc + pp_coefs[high_i + 1];
        v[proc_control_node_B.iv0 + 2] = v[proc_control_node_B.iv0 + 2] *
          proc_control_node_B.xloc + pp_coefs[high_i + 2];
        v[proc_control_node_B.iv0 + 3] = v[proc_control_node_B.iv0 + 3] *
          proc_control_node_B.xloc + pp_coefs[high_i + 3];
      }
    }
  }
}

void proc_control_nodeModelClass::proc_control_node_cubicpolytraj(const real_T
  wayPoints[6], const real_T timePoints[2], const real_T t[2], const real_T
  varargin_2[6], real_T q[6], real_T qd[6], real_T qdd[6], real_T pp_breaks[4],
  real_T pp_coefs[36])
{
  boolean_T x[2];
  boolean_T exitg1;
  memset(&proc_control_node_B.coefMat[0], 0, 12U * sizeof(real_T));
  proc_control_node_B.finalTime = timePoints[1] - timePoints[0];
  for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 3;
       proc_control_node_B.idx_m++) {
    proc_control_node_B.b_coeffVec[0] = wayPoints[proc_control_node_B.idx_m];
    proc_control_node_B.b_coeffVec[1] = varargin_2[proc_control_node_B.idx_m];
    proc_control_node_B.wayPoints_idx_0 = wayPoints[proc_control_node_B.idx_m +
      3] - (proc_control_node_B.finalTime * proc_control_node_B.b_coeffVec[1] +
            proc_control_node_B.b_coeffVec[0]);
    proc_control_node_B.wayPoints_idx_1 = varargin_2[proc_control_node_B.idx_m +
      3] - (0.0 * proc_control_node_B.b_coeffVec[0] +
            proc_control_node_B.b_coeffVec[1]);
    proc_control_node_B.b_coeffVec[3] = proc_control_node_B.b_coeffVec[0];
    proc_control_node_B.coefMat_tmp = proc_control_node_B.finalTime *
      proc_control_node_B.finalTime;
    proc_control_node_B.coefMat[proc_control_node_B.idx_m] = 1.0 /
      proc_control_node_B.coefMat_tmp * proc_control_node_B.wayPoints_idx_1 +
      -2.0 / rt_powd_snf(proc_control_node_B.finalTime, 3.0) *
      proc_control_node_B.wayPoints_idx_0;
    proc_control_node_B.coefMat[proc_control_node_B.idx_m + 3] = 3.0 /
      proc_control_node_B.coefMat_tmp * proc_control_node_B.wayPoints_idx_0 +
      -1.0 / proc_control_node_B.finalTime * proc_control_node_B.wayPoints_idx_1;
    proc_control_node_B.coefMat[proc_control_node_B.idx_m + 6] =
      proc_control_node_B.b_coeffVec[1];
    proc_control_node_B.coefMat[proc_control_node_B.idx_m + 9] =
      proc_control_node_B.b_coeffVec[3];
  }

  memset(&proc_control_node_B.coeffMat[0], 0, 12U * sizeof(real_T));
  for (proc_control_node_B.c_j1 = 0; proc_control_node_B.c_j1 < 3;
       proc_control_node_B.c_j1++) {
    proc_control_node_B.coeffMat[proc_control_node_B.c_j1 + 9] = 0.0;
    proc_control_node_B.coeffMat[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefMat[proc_control_node_B.c_j1] * 0.0;
    proc_control_node_B.coeffMat[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefMat[proc_control_node_B.c_j1 + 3] * 0.0;
    proc_control_node_B.coeffMat[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefMat[proc_control_node_B.c_j1 + 6] * 0.0;
    proc_control_node_B.coeffMat[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefMat[proc_control_node_B.c_j1 + 9];
  }

  memset(&proc_control_node_B.coefsWithFlatStart[0], 0, 24U * sizeof(real_T));
  proc_control_node_B.c_j1 = 0;
  proc_control_node_B.idx_m = 0;
  for (proc_control_node_B.idx_k = 0; proc_control_node_B.idx_k < 4;
       proc_control_node_B.idx_k++) {
    proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1] =
      proc_control_node_B.coeffMat[proc_control_node_B.idx_m];
    proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 3] =
      proc_control_node_B.coefMat[proc_control_node_B.idx_m];
    proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 1] =
      proc_control_node_B.coeffMat[proc_control_node_B.idx_m + 1];
    proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 4] =
      proc_control_node_B.coefMat[proc_control_node_B.idx_m + 1];
    proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 2] =
      proc_control_node_B.coeffMat[proc_control_node_B.idx_m + 2];
    proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 5] =
      proc_control_node_B.coefMat[proc_control_node_B.idx_m + 2];
    proc_control_node_B.c_j1 += 6;
    proc_control_node_B.idx_m += 3;
  }

  proc_control_node_B.b_coeffVec[0] = rt_powd_snf(proc_control_node_B.finalTime,
    3.0);
  proc_control_node_B.b_coeffVec[1] = rt_powd_snf(proc_control_node_B.finalTime,
    2.0);
  proc_control_node_B.b_coeffVec[2] = rt_powd_snf(proc_control_node_B.finalTime,
    1.0);
  proc_control_node_B.b_coeffVec[3] = rt_powd_snf(proc_control_node_B.finalTime,
    0.0);
  memset(&proc_control_node_B.coeffMat[0], 0, 12U * sizeof(real_T));
  for (proc_control_node_B.c_j1 = 0; proc_control_node_B.c_j1 < 3;
       proc_control_node_B.c_j1++) {
    proc_control_node_B.coeffMat[proc_control_node_B.c_j1 + 9] = 0.0;
    proc_control_node_B.coeffMat[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 3] *
      proc_control_node_B.b_coeffVec[0];
    proc_control_node_B.coeffMat[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 9] *
      proc_control_node_B.b_coeffVec[1];
    proc_control_node_B.coeffMat[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 15] *
      proc_control_node_B.b_coeffVec[2];
    proc_control_node_B.coeffMat[proc_control_node_B.c_j1 + 9] +=
      proc_control_node_B.coefsWithFlatStart[proc_control_node_B.c_j1 + 21] *
      proc_control_node_B.b_coeffVec[3];
  }

  memset(&pp_coefs[0], 0, 36U * sizeof(real_T));
  proc_control_node_B.c_j1 = 0;
  proc_control_node_B.idx_m = 0;
  proc_control_node_B.idx_k = 0;
  for (proc_control_node_B.dCoeffs_tmp = 0; proc_control_node_B.dCoeffs_tmp < 4;
       proc_control_node_B.dCoeffs_tmp++) {
    for (proc_control_node_B.i35 = 0; proc_control_node_B.i35 < 6;
         proc_control_node_B.i35++) {
      pp_coefs[proc_control_node_B.i35 + proc_control_node_B.c_j1] =
        proc_control_node_B.coefsWithFlatStart[proc_control_node_B.i35 +
        proc_control_node_B.idx_k];
    }

    pp_coefs[proc_control_node_B.c_j1 + 6] =
      proc_control_node_B.coeffMat[proc_control_node_B.idx_m];
    pp_coefs[proc_control_node_B.c_j1 + 7] =
      proc_control_node_B.coeffMat[proc_control_node_B.idx_m + 1];
    pp_coefs[proc_control_node_B.c_j1 + 8] =
      proc_control_node_B.coeffMat[proc_control_node_B.idx_m + 2];
    proc_control_node_B.c_j1 += 9;
    proc_control_node_B.idx_m += 3;
    proc_control_node_B.idx_k += 6;
  }

  pp_breaks[0] = timePoints[0] - 1.0;
  pp_breaks[1] = timePoints[0];
  pp_breaks[2] = timePoints[1];
  pp_breaks[3] = timePoints[1] + 1.0;
  proc_control_node_ppval(pp_breaks, pp_coefs, t, q);
  proc_control_node_B.b_coeffVec[0] = timePoints[0] - 1.0;
  proc_control_node_B.b_coeffVec[1] = timePoints[0];
  proc_control_node_B.b_coeffVec[3] = timePoints[1] + 1.0;
  proc_control_node_B.finalTime = 0.01;
  x[0] = (t[0] > timePoints[1]);
  x[1] = (t[1] > timePoints[1]);
  proc_control_node_B.idx_m = 0;
  proc_control_node_B.idx_k = 1;
  proc_control_node_B.c_j1 = 1;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.c_j1 - 1 < 2)) {
    if (x[proc_control_node_B.c_j1 - 1]) {
      proc_control_node_B.idx_m = 1;
      proc_control_node_B.ii_data_idx_0 = proc_control_node_B.c_j1;
      exitg1 = true;
    } else {
      proc_control_node_B.c_j1++;
    }
  }

  if (proc_control_node_B.idx_m == 0) {
    proc_control_node_B.idx_k = 0;
  }

  if (0 <= proc_control_node_B.idx_k - 1) {
    proc_control_node_B.tGreaterThanTfIdx_data_idx_0 =
      proc_control_node_B.ii_data_idx_0;
  }

  if (proc_control_node_B.idx_k != 0) {
    proc_control_node_B.wayPoints_idx_0 =
      (t[proc_control_node_B.tGreaterThanTfIdx_data_idx_0 - 1] - timePoints[1]) /
      2.0;
    if (proc_control_node_B.wayPoints_idx_0 < 0.01) {
      proc_control_node_B.finalTime = proc_control_node_B.wayPoints_idx_0;
    }
  }

  proc_control_node_B.b_coeffVec[2] = timePoints[1] +
    proc_control_node_B.finalTime;
  memset(&proc_control_node_B.dCoeffs[0], 0, 36U * sizeof(real_T));
  proc_control_node_B.idx_k = 0;
  for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 3;
       proc_control_node_B.idx_m++) {
    for (proc_control_node_B.c_j1 = 0; proc_control_node_B.c_j1 < 9;
         proc_control_node_B.c_j1++) {
      proc_control_node_B.dCoeffs_tmp = proc_control_node_B.c_j1 +
        proc_control_node_B.idx_k;
      proc_control_node_B.dCoeffs[proc_control_node_B.dCoeffs_tmp + 9] =
        pp_coefs[proc_control_node_B.dCoeffs_tmp] * static_cast<real_T>(3 -
        proc_control_node_B.idx_m);
    }

    proc_control_node_B.idx_k += 9;
  }

  proc_control_node_ppval(proc_control_node_B.b_coeffVec,
    proc_control_node_B.dCoeffs, t, qd);
  memset(&proc_control_node_B.ddCoeffs[0], 0, 36U * sizeof(real_T));
  proc_control_node_B.idx_k = 0;
  for (proc_control_node_B.idx_m = 0; proc_control_node_B.idx_m < 3;
       proc_control_node_B.idx_m++) {
    for (proc_control_node_B.c_j1 = 0; proc_control_node_B.c_j1 < 9;
         proc_control_node_B.c_j1++) {
      proc_control_node_B.dCoeffs_tmp = proc_control_node_B.c_j1 +
        proc_control_node_B.idx_k;
      proc_control_node_B.ddCoeffs[proc_control_node_B.dCoeffs_tmp + 9] =
        proc_control_node_B.dCoeffs[proc_control_node_B.dCoeffs_tmp] *
        static_cast<real_T>(3 - proc_control_node_B.idx_m);
    }

    proc_control_node_B.idx_k += 9;
  }

  proc_control_node_ppval(proc_control_node_B.b_coeffVec,
    proc_control_node_B.ddCoeffs, t, qdd);
}

void proc_control_nodeModelClass::proc_control_node_ppval_b(const real_T
  pp_breaks[4], const real_T pp_coefs[36], real_T x, real_T v[3])
{
  int32_T high_i;
  int32_T ic0;
  int32_T low_i;
  int32_T low_ip1;
  if (rtIsNaN(x)) {
    v[0] = x;
    v[1] = x;
    v[2] = x;
  } else {
    low_i = 0;
    low_ip1 = 1;
    high_i = 4;
    while (high_i > low_ip1 + 1) {
      ic0 = ((low_i + high_i) + 1) >> 1;
      if (x >= pp_breaks[ic0 - 1]) {
        low_i = ic0 - 1;
        low_ip1 = ic0;
      } else {
        high_i = ic0;
      }
    }

    low_ip1 = low_i * 3;
    proc_control_node_B.xloc_c = x - pp_breaks[low_i];
    v[0] = pp_coefs[low_ip1];
    v[1] = pp_coefs[low_ip1 + 1];
    v[2] = pp_coefs[low_ip1 + 2];
    for (high_i = 0; high_i < 3; high_i++) {
      ic0 = ((high_i + 1) * 9 + low_ip1) - 1;
      v[0] = proc_control_node_B.xloc_c * v[0] + pp_coefs[ic0 + 1];
      v[1] = proc_control_node_B.xloc_c * v[1] + pp_coefs[ic0 + 2];
      v[2] = proc_control_node_B.xloc_c * v[2] + pp_coefs[ic0 + 3];
    }
  }
}

void proc_control_nodeModelClass::TrajectoryManager_SendCurrentPo
  (TrajectoryManager_proc_contro_T *b_this, real_T currPose[130])
{
  int32_T b_i;
  int32_T b_index;
  int32_T b_index_0;
  int32_T b_k;
  int32_T i;
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T isempty;
  boolean_T y;

  //  Fonction qui retourne la pose actuelle
  //  Vérification des prédictions.
  b_index = 2;
  isempty = false;
  b_i = 0;
  exitg1 = false;
  while ((!exitg1) && (b_i < 9)) {
    b_index = b_i + 2;
    for (i = 0; i < 13; i++) {
      proc_control_node_B.x_n[i] = (b_this->poseBuffer[(6001 * i + b_i) + 1] ==
        b_this->emptyArray[i]);
    }

    y = true;
    b_k = 0;
    exitg2 = false;
    while ((!exitg2) && (b_k < 13)) {
      if (!proc_control_node_B.x_n[b_k]) {
        y = false;
        exitg2 = true;
      } else {
        b_k++;
      }
    }

    if (y) {
      isempty = true;
      exitg1 = true;
    } else {
      b_i++;
    }
  }

  memset(&currPose[0], 0, 130U * sizeof(real_T));
  i = 0;
  b_i = 0;
  for (b_k = 0; b_k < 13; b_k++) {
    for (b_index_0 = 0; b_index_0 < b_index; b_index_0++) {
      currPose[b_index_0 + i] = b_this->poseBuffer[b_index_0 + b_i];
    }

    i += 10;
    b_i += 6001;
  }

  if (isempty) {
    b_k = 10 - b_index;
    for (b_i = 0; b_i <= b_k; b_i++) {
      b_index_0 = b_index + b_i;
      for (i = 0; i < 13; i++) {
        proc_control_node_B.currPose[i] = currPose[(b_index + 10 * i) - 2];
      }

      for (i = 0; i < 13; i++) {
        currPose[(b_index_0 + 10 * i) - 1] = proc_control_node_B.currPose[i];
      }
    }
  }

  //  Ne pas supprimer le point si c'est le dernier.
  i = 0;
  for (b_i = 0; b_i < 13; b_i++) {
    proc_control_node_B.x_n[b_i] = !(b_this->poseBuffer[i + 10] ==
      b_this->emptyArray[b_i]);
    i += 6001;
  }

  y = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 13)) {
    if (!proc_control_node_B.x_n[b_k]) {
      y = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (y) {
    i = 0;
    for (b_i = 0; b_i < 13; b_i++) {
      memcpy(&proc_control_node_B.b_this[i], &b_this->poseBuffer[i + 1], 6000U *
             sizeof(real_T));
      i += 6001;
    }

    i = 0;
    for (b_i = 0; b_i < 13; b_i++) {
      proc_control_node_B.b_this[i + 6000] = b_this->emptyArray[b_i];
      i += 6001;
    }

    memcpy(&b_this->poseBuffer[0], &proc_control_node_B.b_this[0], 78013U *
           sizeof(real_T));
    b_this->bufferCount--;
    b_this->done = false;
  } else {
    b_this->done = true;
  }
}

real_T proc_control_nodeModelClass::proc_control_node_norm_b(const real_T x[3])
{
  real_T absxk;
  real_T t;
  real_T y;
  proc_control_node_B.scale_o = 3.3121686421112381E-170;
  absxk = fabs(x[0]);
  if (absxk > 3.3121686421112381E-170) {
    y = 1.0;
    proc_control_node_B.scale_o = absxk;
  } else {
    t = absxk / 3.3121686421112381E-170;
    y = t * t;
  }

  absxk = fabs(x[1]);
  if (absxk > proc_control_node_B.scale_o) {
    t = proc_control_node_B.scale_o / absxk;
    y = y * t * t + 1.0;
    proc_control_node_B.scale_o = absxk;
  } else {
    t = absxk / proc_control_node_B.scale_o;
    y += t * t;
  }

  absxk = fabs(x[2]);
  if (absxk > proc_control_node_B.scale_o) {
    t = proc_control_node_B.scale_o / absxk;
    y = y * t * t + 1.0;
    proc_control_node_B.scale_o = absxk;
  } else {
    t = absxk / proc_control_node_B.scale_o;
    y += t * t;
  }

  return proc_control_node_B.scale_o * sqrt(y);
}

boolean_T proc_control_nodeModelClass::proc_control_node_isequal(const real_T
  varargin_1[29], const real_T varargin_2[29])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 29)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

boolean_T proc_control_nodeModelClass::proc_control_node_isequal_b(const real_T
  varargin_1[8], const real_T varargin_2[8])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 8)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_contro_znlmpc_setDecisions(const real_T
  X[130], const real_T Umv[80], real_T e, real_T z[155])
{
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  static const int8_T a[1920] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0 };

  for (i_0 = 0; i_0 < 10; i_0++) {
    for (i = 0; i < 13; i++) {
      proc_control_node_B.X_kb[i + 13 * i_0] = X[10 * i + i_0];
    }

    for (i = 0; i < 8; i++) {
      proc_control_node_B.Umv_d[i + (i_0 << 3)] = Umv[10 * i + i_0];
    }
  }

  memset(&proc_control_node_B.a_c[0], 0, 24U * sizeof(real_T));
  i = 0;
  for (i_1 = 0; i_1 < 80; i_1++) {
    for (i_0 = 0; i_0 < 24; i_0++) {
      proc_control_node_B.a_c[i_0] += static_cast<real_T>(a[i_0 + i]) *
        proc_control_node_B.Umv_d[i_1];
    }

    i += 24;
  }

  memcpy(&z[0], &proc_control_node_B.X_kb[0], 130U * sizeof(real_T));
  memcpy(&z[130], &proc_control_node_B.a_c[0], 24U * sizeof(real_T));
  z[154] = e;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_co_structConstructorHelper(const real_T
  varargin_2[13], const real_T varargin_4[8], const real_T varargin_6[130],
  const real_T varargin_10[130], const real_T varargin_12[80], const real_T
  varargin_14[80], const real_T varargin_18[130], const real_T varargin_20[130],
  const real_T varargin_22[130], const real_T varargin_24[130], const real_T
  varargin_26[80], const real_T varargin_28[80], const real_T varargin_30[80],
  const real_T varargin_32[80], const real_T varargin_34[80],
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *s)
{
  memcpy(&s->x[0], &varargin_2[0], 13U * sizeof(real_T));
  memcpy(&s->lastMV[0], &varargin_4[0], sizeof(real_T) << 3U);
  memcpy(&s->ref[0], &varargin_6[0], 130U * sizeof(real_T));
  memcpy(&s->OutputWeights[0], &varargin_10[0], 130U * sizeof(real_T));
  memcpy(&s->MVWeights[0], &varargin_12[0], 80U * sizeof(real_T));
  memcpy(&s->MVRateWeights[0], &varargin_14[0], 80U * sizeof(real_T));
  s->ECRWeight = 100000.0;
  memcpy(&s->OutputMin[0], &varargin_18[0], 130U * sizeof(real_T));
  memcpy(&s->OutputMax[0], &varargin_20[0], 130U * sizeof(real_T));
  memcpy(&s->StateMin[0], &varargin_22[0], 130U * sizeof(real_T));
  memcpy(&s->StateMax[0], &varargin_24[0], 130U * sizeof(real_T));
  memcpy(&s->MVMin[0], &varargin_26[0], 80U * sizeof(real_T));
  memcpy(&s->MVMax[0], &varargin_28[0], 80U * sizeof(real_T));
  memcpy(&s->MVRateMin[0], &varargin_30[0], 80U * sizeof(real_T));
  memcpy(&s->MVRateMax[0], &varargin_32[0], 80U * sizeof(real_T));
  memcpy(&s->MVScaledTarget[0], &varargin_34[0], 80U * sizeof(real_T));
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_znlmpc_generateRuntimeData(const real_T
  x[13], const real_T lastMV[8], const real_T ref0[130], const real_T
  OutputWeights0[13], const real_T MVWeights0[8], const real_T MVRateWeights0[8],
  const real_T MVMin0[8], const real_T MVMax0[8], const real_T X0[13], const
  real_T MV0[8], real_T Slack0, s_qYIvDqP9yRqtt40IDZ89JG_proc_T *runtimedata,
  szeIbzRjxClbCFpzxneSihD_proc__T *userdata, real_T z0[155])
{
  int32_T MVWeights0_tmp;
  int32_T i;
  proc_control_node_B.i_go = 0;
  for (proc_control_node_B.i12 = 0; proc_control_node_B.i12 < 13;
       proc_control_node_B.i12++) {
    proc_control_node_B.X0[proc_control_node_B.i_go] =
      X0[proc_control_node_B.i12];
    proc_control_node_B.i_go += 10;
  }

  proc_control_node_B.i_go = 0;
  for (proc_control_node_B.i12 = 0; proc_control_node_B.i12 < 13;
       proc_control_node_B.i12++) {
    for (i = 0; i < 9; i++) {
      proc_control_node_B.X0[(i + proc_control_node_B.i_go) + 1] =
        X0[proc_control_node_B.i12];
    }

    proc_control_node_B.i_go += 10;
  }

  proc_control_node_B.i_go = 0;
  for (proc_control_node_B.i12 = 0; proc_control_node_B.i12 < 8;
       proc_control_node_B.i12++) {
    proc_control_node_B.MV0[proc_control_node_B.i_go] =
      MV0[proc_control_node_B.i12];
    proc_control_node_B.i_go += 10;
  }

  proc_control_node_B.i_go = 0;
  for (proc_control_node_B.i12 = 0; proc_control_node_B.i12 < 8;
       proc_control_node_B.i12++) {
    for (i = 0; i < 9; i++) {
      proc_control_node_B.MV0[(i + proc_control_node_B.i_go) + 1] =
        MV0[proc_control_node_B.i12];
    }

    proc_control_node_B.i_go += 10;
  }

  proc_contro_znlmpc_setDecisions(proc_control_node_B.X0,
    proc_control_node_B.MV0, Slack0, z0);
  userdata->Ts = 0.1;
  memcpy(&userdata->CurrentStates[0], &x[0], 13U * sizeof(real_T));
  memcpy(&userdata->LastMV[0], &lastMV[0], sizeof(real_T) << 3U);
  memcpy(&userdata->References[0], &ref0[0], 130U * sizeof(real_T));
  memset(&userdata->MVTarget[0], 0, 80U * sizeof(real_T));
  userdata->PredictionHorizon = 10.0;
  userdata->NumOfStates = 13.0;
  userdata->NumOfOutputs = 13.0;
  userdata->NumOfInputs = 8.0;
  for (proc_control_node_B.i_go = 0; proc_control_node_B.i_go < 8;
       proc_control_node_B.i_go++) {
    userdata->MVIndex[proc_control_node_B.i_go] = static_cast<real_T>
      (proc_control_node_B.i_go) + 1.0;
  }

  proc_control_node_B.i_go = 0;
  for (proc_control_node_B.i12 = 0; proc_control_node_B.i12 < 13;
       proc_control_node_B.i12++) {
    proc_control_node_B.X0[proc_control_node_B.i_go] =
      OutputWeights0[proc_control_node_B.i12];
    proc_control_node_B.i_go += 10;
  }

  proc_control_node_B.i_go = 0;
  for (proc_control_node_B.i12 = 0; proc_control_node_B.i12 < 13;
       proc_control_node_B.i12++) {
    for (i = 0; i < 9; i++) {
      proc_control_node_B.X0[(i + proc_control_node_B.i_go) + 1] =
        OutputWeights0[proc_control_node_B.i12];
    }

    proc_control_node_B.i_go += 10;
  }

  proc_control_node_B.i_go = 0;
  for (proc_control_node_B.i12 = 0; proc_control_node_B.i12 < 8;
       proc_control_node_B.i12++) {
    proc_control_node_B.MV0[proc_control_node_B.i_go] =
      MVWeights0[proc_control_node_B.i12];
    proc_control_node_B.MVRateWeights0[proc_control_node_B.i_go] =
      MVRateWeights0[proc_control_node_B.i12];
    proc_control_node_B.i_go += 10;
  }

  proc_control_node_B.i_go = 0;
  for (proc_control_node_B.i12 = 0; proc_control_node_B.i12 < 8;
       proc_control_node_B.i12++) {
    for (i = 0; i < 9; i++) {
      MVWeights0_tmp = (i + proc_control_node_B.i_go) + 1;
      proc_control_node_B.MV0[MVWeights0_tmp] =
        MVWeights0[proc_control_node_B.i12];
      proc_control_node_B.MVRateWeights0[MVWeights0_tmp] =
        MVRateWeights0[proc_control_node_B.i12];
    }

    proc_control_node_B.i_go += 10;
  }

  for (proc_control_node_B.i_go = 0; proc_control_node_B.i_go < 130;
       proc_control_node_B.i_go++) {
    proc_control_node_B.dv6[proc_control_node_B.i_go] = (rtMinusInf);
    proc_control_node_B.dv7[proc_control_node_B.i_go] = (rtInf);
    proc_control_node_B.dv8[proc_control_node_B.i_go] = (rtMinusInf);
    proc_control_node_B.dv9[proc_control_node_B.i_go] = (rtInf);
  }

  proc_control_node_B.i_go = 0;
  for (proc_control_node_B.i12 = 0; proc_control_node_B.i12 < 8;
       proc_control_node_B.i12++) {
    proc_control_node_B.MVMin0[proc_control_node_B.i_go] =
      MVMin0[proc_control_node_B.i12];
    proc_control_node_B.MVMax0[proc_control_node_B.i_go] =
      MVMax0[proc_control_node_B.i12];
    proc_control_node_B.i_go += 10;
  }

  proc_control_node_B.i_go = 0;
  for (proc_control_node_B.i12 = 0; proc_control_node_B.i12 < 8;
       proc_control_node_B.i12++) {
    for (i = 0; i < 9; i++) {
      MVWeights0_tmp = (i + proc_control_node_B.i_go) + 1;
      proc_control_node_B.MVMin0[MVWeights0_tmp] =
        MVMin0[proc_control_node_B.i12];
      proc_control_node_B.MVMax0[MVWeights0_tmp] =
        MVMax0[proc_control_node_B.i12];
    }

    proc_control_node_B.i_go += 10;
  }

  for (proc_control_node_B.i_go = 0; proc_control_node_B.i_go < 80;
       proc_control_node_B.i_go++) {
    proc_control_node_B.dv11[proc_control_node_B.i_go] = (rtMinusInf);
    proc_control_node_B.dv12[proc_control_node_B.i_go] = (rtInf);
    proc_control_node_B.dv13[proc_control_node_B.i_go] = 0.0;
  }

  proc_co_structConstructorHelper(x, lastMV, ref0, proc_control_node_B.X0,
    proc_control_node_B.MV0, proc_control_node_B.MVRateWeights0,
    proc_control_node_B.dv6, proc_control_node_B.dv7, proc_control_node_B.dv8,
    proc_control_node_B.dv9, proc_control_node_B.MVMin0,
    proc_control_node_B.MVMax0, proc_control_node_B.dv11,
    proc_control_node_B.dv12, proc_control_node_B.dv13, runtimedata);
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control__znlmpc_getZBounds(const
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *runtimedata, real_T zLB[155], real_T zUB[155])
{
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  int32_T tmp;
  i_1 = 0;
  for (i_0 = 0; i_0 < 10; i_0++) {
    tmp = 0;
    for (i = 0; i < 13; i++) {
      proc_control_node_B.runtimedata_b[i + i_1] = runtimedata->StateMin[tmp +
        i_0];
      tmp += 10;
    }

    i_1 += 13;
  }

  memcpy(&zLB[0], &proc_control_node_B.runtimedata_b[0], 130U * sizeof(real_T));
  for (i_1 = 0; i_1 < 24; i_1++) {
    zLB[i_1 + 130] = (rtMinusInf);
  }

  zLB[154] = 0.0;
  i_1 = 0;
  for (i_0 = 0; i_0 < 10; i_0++) {
    tmp = 0;
    for (i = 0; i < 13; i++) {
      proc_control_node_B.runtimedata_b[i + i_1] = runtimedata->StateMax[tmp +
        i_0];
      tmp += 10;
    }

    i_1 += 13;
  }

  memcpy(&zUB[0], &proc_control_node_B.runtimedata_b[0], 130U * sizeof(real_T));
  for (i_1 = 0; i_1 < 24; i_1++) {
    zUB[i_1 + 130] = (rtInf);
  }

  zUB[154] = (rtInf);
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_isfinite(const real_T x[8],
  boolean_T b[8])
{
  real_T x_0;
  int32_T i;
  for (i = 0; i < 8; i++) {
    x_0 = x[i];
    b[i] = ((!rtIsInf(x_0)) && (!rtIsNaN(x_0)));
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_mtimes(const real_T A_data[],
  const int32_T A_size[2], real_T C_data[], int32_T C_size[2])
{
  int32_T b_i;
  int32_T bkj;
  int32_T i;
  int32_T j;
  int32_T tmp;
  static const int8_T b[1920] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1 };

  proc_control_node_B.m = A_size[0];
  C_size[0] = A_size[0];
  C_size[1] = 24;
  for (j = 0; j < 24; j++) {
    proc_control_node_B.coffset_l = j * proc_control_node_B.m;
    proc_control_node_B.boffset = j * 80;
    for (i = 0; i < proc_control_node_B.m; i++) {
      C_data[proc_control_node_B.coffset_l + i] = 0.0;
    }

    for (i = 0; i < 80; i++) {
      proc_control_node_B.aoffset_k = i * A_size[0];
      bkj = b[proc_control_node_B.boffset + i];
      for (b_i = 1; b_i - 1 < proc_control_node_B.m; b_i++) {
        tmp = (proc_control_node_B.coffset_l + b_i) - 1;
        C_data[tmp] += A_data[(proc_control_node_B.aoffset_k + b_i) - 1] *
          static_cast<real_T>(bkj);
      }
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control__znlmpc_getUBounds(const
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *runtimedata, real_T A_data[], int32_T A_size
  [2], real_T Bu_data[], int32_T *Bu_size)
{
  boolean_T exitg1;
  memset(&proc_control_node_B.Au[0], 0, 25600U * sizeof(real_T));
  memset(&proc_control_node_B.b_Bu[0], 0, 320U * sizeof(real_T));
  memset(&proc_control_node_B.icf[0], 0, 320U * sizeof(boolean_T));
  for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
       proc_control_node_B.idx_n++) {
    proc_control_node_B.ic_g[proc_control_node_B.idx_n] = static_cast<real_T>
      (proc_control_node_B.idx_n) + 1.0;
  }

  memset(&proc_control_node_B.As[0], 0, sizeof(int8_T) << 6U);
  proc_control_node_B.idx_n = 0;
  for (proc_control_node_B.i_eg = 0; proc_control_node_B.i_eg < 8;
       proc_control_node_B.i_eg++) {
    proc_control_node_B.As[proc_control_node_B.idx_n] = 1;
    proc_control_node_B.idx_n += 9;
  }

  for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 64;
       proc_control_node_B.idx_n++) {
    proc_control_node_B.i_eg = proc_control_node_B.As[proc_control_node_B.idx_n];
    proc_control_node_B.Au_tmp_o[proc_control_node_B.idx_n] = static_cast<int8_T>
      (-proc_control_node_B.i_eg);
    proc_control_node_B.Au_tmp[proc_control_node_B.idx_n] = static_cast<int8_T>
      (proc_control_node_B.i_eg);
  }

  for (proc_control_node_B.i_eg = 0; proc_control_node_B.i_eg < 10;
       proc_control_node_B.i_eg++) {
    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
         proc_control_node_B.idx_n++) {
      proc_control_node_B.runtimedata_d[proc_control_node_B.idx_n] =
        runtimedata->MVRateMin[10 * proc_control_node_B.idx_n +
        proc_control_node_B.i_eg];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_d,
      proc_control_node_B.bv3);
    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
         proc_control_node_B.idx_n++) {
      proc_control_node_B.icf[static_cast<int32_T>
        (proc_control_node_B.ic_g[proc_control_node_B.idx_n]) - 1] =
        proc_control_node_B.bv3[proc_control_node_B.idx_n];
      proc_control_node_B.runtimedata_d[proc_control_node_B.idx_n] =
        runtimedata->MVRateMax[10 * proc_control_node_B.idx_n +
        proc_control_node_B.i_eg];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_d,
      proc_control_node_B.bv3);
    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
         proc_control_node_B.idx_n++) {
      proc_control_node_B.icf[static_cast<int32_T>
        (proc_control_node_B.ic_g[proc_control_node_B.idx_n] + 8.0) - 1] =
        proc_control_node_B.bv3[proc_control_node_B.idx_n];
      proc_control_node_B.runtimedata_d[proc_control_node_B.idx_n] =
        runtimedata->MVMin[10 * proc_control_node_B.idx_n +
        proc_control_node_B.i_eg];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_d,
      proc_control_node_B.bv3);
    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
         proc_control_node_B.idx_n++) {
      proc_control_node_B.icf[static_cast<int32_T>
        (proc_control_node_B.ic_g[proc_control_node_B.idx_n] + 16.0) - 1] =
        proc_control_node_B.bv3[proc_control_node_B.idx_n];
      proc_control_node_B.runtimedata_d[proc_control_node_B.idx_n] =
        runtimedata->MVMax[10 * proc_control_node_B.idx_n +
        proc_control_node_B.i_eg];
    }

    proc_control_node_isfinite(proc_control_node_B.runtimedata_d,
      proc_control_node_B.bv3);
    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
         proc_control_node_B.idx_n++) {
      proc_control_node_B.icf[static_cast<int32_T>
        (proc_control_node_B.ic_g[proc_control_node_B.idx_n] + 24.0) - 1] =
        proc_control_node_B.bv3[proc_control_node_B.idx_n];
      for (proc_control_node_B.k_f = 0; proc_control_node_B.k_f < 8;
           proc_control_node_B.k_f++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_g[proc_control_node_B.k_f]) + 320 *
          proc_control_node_B.idx_n) + 2560 * proc_control_node_B.i_eg) - 1] =
          proc_control_node_B.Au_tmp_o[(proc_control_node_B.idx_n << 3) +
          proc_control_node_B.k_f];
      }
    }

    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
         proc_control_node_B.idx_n++) {
      for (proc_control_node_B.k_f = 0; proc_control_node_B.k_f < 8;
           proc_control_node_B.k_f++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_g[proc_control_node_B.k_f] + 8.0) + 320 *
          proc_control_node_B.idx_n) + 2560 * proc_control_node_B.i_eg) - 1] =
          proc_control_node_B.Au_tmp[(proc_control_node_B.idx_n << 3) +
          proc_control_node_B.k_f];
      }
    }

    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
         proc_control_node_B.idx_n++) {
      for (proc_control_node_B.k_f = 0; proc_control_node_B.k_f < 8;
           proc_control_node_B.k_f++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_g[proc_control_node_B.k_f] + 16.0) + 320 *
          proc_control_node_B.idx_n) + 2560 * proc_control_node_B.i_eg) - 1] =
          proc_control_node_B.Au_tmp_o[(proc_control_node_B.idx_n << 3) +
          proc_control_node_B.k_f];
      }
    }

    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
         proc_control_node_B.idx_n++) {
      for (proc_control_node_B.k_f = 0; proc_control_node_B.k_f < 8;
           proc_control_node_B.k_f++) {
        proc_control_node_B.Au[((static_cast<int32_T>
          (proc_control_node_B.ic_g[proc_control_node_B.k_f] + 24.0) + 320 *
          proc_control_node_B.idx_n) + 2560 * proc_control_node_B.i_eg) - 1] =
          proc_control_node_B.Au_tmp[(proc_control_node_B.idx_n << 3) +
          proc_control_node_B.k_f];
      }

      proc_control_node_B.b_Bu[static_cast<int32_T>
        (proc_control_node_B.ic_g[proc_control_node_B.idx_n]) - 1] =
        -runtimedata->MVRateMin[10 * proc_control_node_B.idx_n +
        proc_control_node_B.i_eg];
    }

    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
         proc_control_node_B.idx_n++) {
      proc_control_node_B.b_Bu[static_cast<int32_T>
        (proc_control_node_B.ic_g[proc_control_node_B.idx_n] + 8.0) - 1] =
        runtimedata->MVRateMax[10 * proc_control_node_B.idx_n +
        proc_control_node_B.i_eg];
    }

    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
         proc_control_node_B.idx_n++) {
      proc_control_node_B.b_Bu[static_cast<int32_T>
        (proc_control_node_B.ic_g[proc_control_node_B.idx_n] + 16.0) - 1] =
        -runtimedata->MVMin[10 * proc_control_node_B.idx_n +
        proc_control_node_B.i_eg];
    }

    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
         proc_control_node_B.idx_n++) {
      proc_control_node_B.b_Bu[static_cast<int32_T>
        (proc_control_node_B.ic_g[proc_control_node_B.idx_n] + 24.0) - 1] =
        runtimedata->MVMax[10 * proc_control_node_B.idx_n +
        proc_control_node_B.i_eg];
    }

    if (proc_control_node_B.i_eg + 1 == 1) {
      for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
           proc_control_node_B.idx_n++) {
        proc_control_node_B.runtimedata_d[proc_control_node_B.idx_n] =
          proc_control_node_B.b_Bu[static_cast<int32_T>
          (proc_control_node_B.ic_g[proc_control_node_B.idx_n]) - 1] -
          runtimedata->lastMV[proc_control_node_B.idx_n];
      }

      for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
           proc_control_node_B.idx_n++) {
        proc_control_node_B.b_Bu[static_cast<int32_T>
          (proc_control_node_B.ic_g[proc_control_node_B.idx_n]) - 1] =
          proc_control_node_B.runtimedata_d[proc_control_node_B.idx_n];
      }

      for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
           proc_control_node_B.idx_n++) {
        proc_control_node_B.runtimedata_d[proc_control_node_B.idx_n] =
          proc_control_node_B.b_Bu[static_cast<int32_T>
          (proc_control_node_B.ic_g[proc_control_node_B.idx_n] + 8.0) - 1] +
          runtimedata->lastMV[proc_control_node_B.idx_n];
      }

      for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
           proc_control_node_B.idx_n++) {
        proc_control_node_B.b_Bu[static_cast<int32_T>
          (proc_control_node_B.ic_g[proc_control_node_B.idx_n] + 8.0) - 1] =
          proc_control_node_B.runtimedata_d[proc_control_node_B.idx_n];
      }
    } else {
      for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
           proc_control_node_B.idx_n++) {
        for (proc_control_node_B.k_f = 0; proc_control_node_B.k_f < 8;
             proc_control_node_B.k_f++) {
          proc_control_node_B.Au[((static_cast<int32_T>
            (proc_control_node_B.ic_g[proc_control_node_B.k_f]) + 320 *
            proc_control_node_B.idx_n) + 2560 * (proc_control_node_B.i_eg - 1))
            - 1] = proc_control_node_B.Au_tmp[(proc_control_node_B.idx_n << 3) +
            proc_control_node_B.k_f];
        }
      }

      for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
           proc_control_node_B.idx_n++) {
        for (proc_control_node_B.k_f = 0; proc_control_node_B.k_f < 8;
             proc_control_node_B.k_f++) {
          proc_control_node_B.Au[((static_cast<int32_T>
            (proc_control_node_B.ic_g[proc_control_node_B.k_f] + 8.0) + 320 *
            proc_control_node_B.idx_n) + 2560 * (proc_control_node_B.i_eg - 1))
            - 1] = proc_control_node_B.Au_tmp_o[(proc_control_node_B.idx_n << 3)
            + proc_control_node_B.k_f];
        }
      }
    }

    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
         proc_control_node_B.idx_n++) {
      proc_control_node_B.ic_g[proc_control_node_B.idx_n] += 32.0;
    }
  }

  proc_control_node_B.i_eg = 0;
  proc_control_node_B.idx_n = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.idx_n < 320)) {
    if (proc_control_node_B.icf[proc_control_node_B.idx_n]) {
      proc_control_node_B.i_eg++;
      proc_control_node_B.ii_data[proc_control_node_B.i_eg - 1] =
        static_cast<int16_T>(proc_control_node_B.idx_n + 1);
      if (proc_control_node_B.i_eg >= 320) {
        exitg1 = true;
      } else {
        proc_control_node_B.idx_n++;
      }
    } else {
      proc_control_node_B.idx_n++;
    }
  }

  if (1 > proc_control_node_B.i_eg) {
    proc_control_node_B.i_eg = 0;
  }

  if (proc_control_node_B.i_eg > 0) {
    *Bu_size = proc_control_node_B.i_eg;
    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n <
         proc_control_node_B.i_eg; proc_control_node_B.idx_n++) {
      Bu_data[proc_control_node_B.idx_n] =
        proc_control_node_B.b_Bu[proc_control_node_B.ii_data[proc_control_node_B.idx_n]
        - 1];
    }

    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n < 8;
         proc_control_node_B.idx_n++) {
      for (proc_control_node_B.k_f = 0; proc_control_node_B.k_f < 10;
           proc_control_node_B.k_f++) {
        proc_control_node_B.b_i_a = 0;
        while (proc_control_node_B.b_i_a <= proc_control_node_B.i_eg - 1) {
          proc_control_node_B.Auf_data[(proc_control_node_B.b_i_a +
            proc_control_node_B.i_eg * proc_control_node_B.idx_n) +
            (proc_control_node_B.i_eg << 3) * proc_control_node_B.k_f] =
            proc_control_node_B.Au[((320 * proc_control_node_B.idx_n +
            proc_control_node_B.ii_data[proc_control_node_B.b_i_a]) + 2560 *
            proc_control_node_B.k_f) - 1];
          proc_control_node_B.b_i_a++;
        }
      }
    }

    proc_control_node_B.idx[0] = proc_control_node_B.i_eg;
    proc_control_node_B.idx[1] = 80;
    proc_control_node_mtimes(proc_control_node_B.Auf_data,
      proc_control_node_B.idx, proc_control_node_B.tmp_data_f,
      proc_control_node_B.tmp_size_d);
    A_size[0] = proc_control_node_B.i_eg;
    A_size[1] = 155;
    proc_control_node_B.k_f = proc_control_node_B.i_eg * 130;
    if (0 <= proc_control_node_B.k_f - 1) {
      memset(&A_data[0], 0, proc_control_node_B.k_f * sizeof(real_T));
    }

    proc_control_node_B.k_f = proc_control_node_B.i_eg * 24;
    for (proc_control_node_B.idx_n = 0; proc_control_node_B.idx_n <
         proc_control_node_B.k_f; proc_control_node_B.idx_n++) {
      A_data[proc_control_node_B.idx_n + proc_control_node_B.i_eg * 130] =
        proc_control_node_B.tmp_data_f[proc_control_node_B.idx_n];
    }

    if (0 <= proc_control_node_B.i_eg - 1) {
      memset(&A_data[proc_control_node_B.i_eg * 130 + proc_control_node_B.i_eg *
             24], 0, ((((proc_control_node_B.i_eg + proc_control_node_B.i_eg *
                         130) + proc_control_node_B.i_eg * 24) -
                       proc_control_node_B.i_eg * 130) -
                      proc_control_node_B.i_eg * 24) * sizeof(real_T));
    }
  } else {
    *Bu_size = 0;
    A_size[0] = 0;
    A_size[1] = 211;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_contro_znlmpc_getDecisions(const real_T
  z[155], real_T X[130], real_T Umv[80], real_T *e)
{
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  int32_T i_2;
  static const int8_T a[1920] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1 };

  memset(&proc_control_node_B.a_n[0], 0, 80U * sizeof(real_T));
  i_2 = 0;
  for (i_0 = 0; i_0 < 24; i_0++) {
    for (i = 0; i < 80; i++) {
      proc_control_node_B.a_n[i] += static_cast<real_T>(a[i + i_2]) * z[i_0 +
        130];
    }

    i_2 += 80;
  }

  i = 0;
  for (i_2 = 0; i_2 < 8; i_2++) {
    i_0 = 0;
    for (i_1 = 0; i_1 < 10; i_1++) {
      Umv[i_1 + i] = proc_control_node_B.a_n[i_0 + i_2];
      i_0 += 8;
    }

    i += 10;
  }

  *e = z[154];
  memcpy(&proc_control_node_B.z[0], &z[0], 130U * sizeof(real_T));
  i = 0;
  for (i_2 = 0; i_2 < 10; i_2++) {
    i_0 = 0;
    for (i_1 = 0; i_1 < 13; i_1++) {
      X[i_0 + i_2] = proc_control_node_B.z[i_1 + i];
      i_0 += 10;
    }

    i += 13;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_znlmpc_getXUe(const real_T
  z[155], const real_T x[13], real_T X[143], real_T U[88], real_T *e)
{
  int32_T i;
  memset(&X[0], 0, 143U * sizeof(real_T));
  memset(&proc_control_node_B.Umv[0], 0, 88U * sizeof(real_T));
  proc_contro_znlmpc_getDecisions(z, proc_control_node_B.b_p,
    proc_control_node_B.c, e);
  proc_control_node_B.i21 = 0;
  i = 0;
  for (proc_control_node_B.i_bc = 0; proc_control_node_B.i_bc < 13;
       proc_control_node_B.i_bc++) {
    memcpy(&X[proc_control_node_B.i21 + 1], &proc_control_node_B.b_p[i], 10U *
           sizeof(real_T));
    proc_control_node_B.i21 += 11;
    i += 10;
  }

  proc_control_node_B.i21 = 0;
  i = 0;
  for (proc_control_node_B.i_bc = 0; proc_control_node_B.i_bc < 8;
       proc_control_node_B.i_bc++) {
    memcpy(&proc_control_node_B.Umv[proc_control_node_B.i21],
           &proc_control_node_B.c[i], 10U * sizeof(real_T));
    proc_control_node_B.i21 += 11;
    i += 10;
  }

  proc_control_node_B.i21 = 0;
  for (i = 0; i < 13; i++) {
    X[proc_control_node_B.i21] = x[i];
    proc_control_node_B.i21 += 11;
  }

  i = 0;
  for (proc_control_node_B.i_bc = 0; proc_control_node_B.i_bc < 8;
       proc_control_node_B.i_bc++) {
    proc_control_node_B.Umv[i + 10] = proc_control_node_B.Umv[i + 9];
    memcpy(&U[i], &proc_control_node_B.Umv[i], 11U * sizeof(real_T));
    i += 11;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_cont_AUVQuatJacobianMatrix(const real_T
  in1[13], real_T Anqv[169])
{
  proc_control_node_B.t2 = fabs(in1[10]);
  proc_control_node_B.t3 = fabs(in1[11]);
  proc_control_node_B.t4 = fabs(in1[12]);
  proc_control_node_B.t5 = fabs(in1[7]);
  proc_control_node_B.t6 = fabs(in1[8]);
  proc_control_node_B.t7 = fabs(in1[9]);
  if (in1[10] < 0.0) {
    proc_control_node_B.t8 = -1.0;
  } else if (in1[10] > 0.0) {
    proc_control_node_B.t8 = 1.0;
  } else if (in1[10] == 0.0) {
    proc_control_node_B.t8 = 0.0;
  } else {
    proc_control_node_B.t8 = (rtNaN);
  }

  if (in1[11] < 0.0) {
    proc_control_node_B.t9 = -1.0;
  } else if (in1[11] > 0.0) {
    proc_control_node_B.t9 = 1.0;
  } else if (in1[11] == 0.0) {
    proc_control_node_B.t9 = 0.0;
  } else {
    proc_control_node_B.t9 = (rtNaN);
  }

  if (in1[12] < 0.0) {
    proc_control_node_B.t10 = -1.0;
  } else if (in1[12] > 0.0) {
    proc_control_node_B.t10 = 1.0;
  } else if (in1[12] == 0.0) {
    proc_control_node_B.t10 = 0.0;
  } else {
    proc_control_node_B.t10 = (rtNaN);
  }

  if (in1[7] < 0.0) {
    proc_control_node_B.t11_j = -1.0;
  } else if (in1[7] > 0.0) {
    proc_control_node_B.t11_j = 1.0;
  } else if (in1[7] == 0.0) {
    proc_control_node_B.t11_j = 0.0;
  } else {
    proc_control_node_B.t11_j = (rtNaN);
  }

  if (in1[8] < 0.0) {
    proc_control_node_B.t12_e = -1.0;
  } else if (in1[8] > 0.0) {
    proc_control_node_B.t12_e = 1.0;
  } else if (in1[8] == 0.0) {
    proc_control_node_B.t12_e = 0.0;
  } else {
    proc_control_node_B.t12_e = (rtNaN);
  }

  if (in1[9] < 0.0) {
    proc_control_node_B.t13_j = -1.0;
  } else if (in1[9] > 0.0) {
    proc_control_node_B.t13_j = 1.0;
  } else if (in1[9] == 0.0) {
    proc_control_node_B.t13_j = 0.0;
  } else {
    proc_control_node_B.t13_j = (rtNaN);
  }

  proc_control_node_B.t17_j = in1[4] * in1[5] * 2.0;
  proc_control_node_B.t18 = in1[4] * in1[6] * 2.0;
  proc_control_node_B.t19 = in1[5] * in1[6] * 2.0;
  proc_control_node_B.t20 = in1[3] * in1[4] * 2.0;
  proc_control_node_B.t21_g = in1[3] * in1[5] * 2.0;
  proc_control_node_B.t22 = in1[3] * in1[6] * 2.0;
  proc_control_node_B.t23 = in1[4] * in1[7] * 2.0;
  proc_control_node_B.t24_tmp = in1[5] * in1[7];
  proc_control_node_B.t24 = proc_control_node_B.t24_tmp * 2.0;
  proc_control_node_B.t25_tmp_l = in1[6] * in1[7];
  proc_control_node_B.t25 = proc_control_node_B.t25_tmp_l * 2.0;
  proc_control_node_B.t26 = in1[3] * in1[7] * 2.0;
  proc_control_node_B.t27_tmp = in1[4] * in1[8];
  proc_control_node_B.t27 = proc_control_node_B.t27_tmp * 2.0;
  proc_control_node_B.t28 = in1[5] * in1[8] * 2.0;
  proc_control_node_B.t29_tmp = in1[6] * in1[8];
  proc_control_node_B.t29 = proc_control_node_B.t29_tmp * 2.0;
  proc_control_node_B.t30 = in1[3] * in1[8] * 2.0;
  proc_control_node_B.t31_tmp = in1[4] * in1[9];
  proc_control_node_B.t31 = proc_control_node_B.t31_tmp * 2.0;
  proc_control_node_B.t32_tmp = in1[5] * in1[9];
  proc_control_node_B.t32 = proc_control_node_B.t32_tmp * 2.0;
  proc_control_node_B.t33 = in1[6] * in1[9] * 2.0;
  proc_control_node_B.t34 = in1[3] * in1[9] * 2.0;
  proc_control_node_B.t39 = in1[4] / 2.0;
  proc_control_node_B.t40 = in1[5] / 2.0;
  proc_control_node_B.t41 = in1[6] / 2.0;
  proc_control_node_B.t42 = in1[3] / 2.0;
  proc_control_node_B.t43 = in1[10] / 2.0;
  proc_control_node_B.t44 = in1[11] / 2.0;
  proc_control_node_B.t45 = in1[12] / 2.0;
  proc_control_node_B.t55 = in1[12] * 1.0571299073092789E-5;
  proc_control_node_B.t56_o = in1[11] * 9.7602896722846373E-5;
  proc_control_node_B.t57_h = in1[8] * 0.01129023503850542;
  proc_control_node_B.t58_c = in1[7] * 0.00477039452928936;
  proc_control_node_B.t59 = in1[10] * 9.1703771260780813E-5;
  proc_control_node_B.t61 = in1[9] * 0.143523560675718;
  proc_control_node_B.t62_a = in1[7] * 0.00568699616459184;
  proc_control_node_B.t65 = in1[9] * 0.069014505171846527;
  proc_control_node_B.t68 = in1[8] * 0.0071670223909459834;
  proc_control_node_B.t35 = in1[4] * in1[4] * 2.0;
  proc_control_node_B.t36 = in1[5] * in1[5] * 2.0;
  proc_control_node_B.t37 = in1[6] * in1[6] * 2.0;
  memset(&Anqv[0], 0, 39U * sizeof(real_T));
  Anqv[39] = -proc_control_node_B.t29 + proc_control_node_B.t32;
  Anqv[40] = proc_control_node_B.t25 - proc_control_node_B.t31;
  Anqv[41] = -proc_control_node_B.t24 + proc_control_node_B.t27;
  Anqv[42] = 0.0;
  Anqv[43] = proc_control_node_B.t43;
  Anqv[44] = proc_control_node_B.t44;
  Anqv[45] = proc_control_node_B.t45;
  Anqv[46] = in1[4] * -0.0025508103573979122 + in1[5] * 0.41317714528019212;
  Anqv[47] = in1[4] * -0.51926242270043788 + in1[5] * 0.001255890098840652;
  Anqv[48] = in1[4] * 0.033534218994997082 - in1[5] * 0.0058790999671941586;
  Anqv[49] = in1[4] * -25.237197567988879 + in1[5] * 0.1163107279493438;
  Anqv[50] = in1[4] * 0.1184647119743765 - in1[5] * 8.6371387349299322;
  Anqv[51] = in1[4] * -0.26948772272822052 + in1[5] * 0.32661245163675812;
  Anqv[52] = proc_control_node_B.t28 + proc_control_node_B.t33;
  Anqv[53] = (proc_control_node_B.t24 - proc_control_node_B.t34) -
    proc_control_node_B.t27_tmp * 4.0;
  Anqv[54] = (proc_control_node_B.t25 + proc_control_node_B.t30) -
    proc_control_node_B.t31_tmp * 4.0;
  Anqv[55] = -proc_control_node_B.t43;
  Anqv[56] = 0.0;
  Anqv[57] = -proc_control_node_B.t45;
  Anqv[58] = proc_control_node_B.t44;
  Anqv[59] = (in1[4] * 0.012275693092413449 - in1[6] * 0.41317714528019212) -
    in1[3] * 0.0025508103573979122;
  Anqv[60] = (in1[4] * -0.026613396758579669 - in1[6] * 0.001255890098840652) -
    in1[3] * 0.51926242270043788;
  Anqv[61] = (in1[4] * 0.36893088042209421 + in1[6] * 0.0058790999671941586) +
    in1[3] * 0.033534218994997082;
  Anqv[62] = (in1[4] * -2.0799430253873 - in1[6] * 0.1163107279493438) - in1[3] *
    25.237197567988879;
  Anqv[63] = (in1[4] * -0.713666312028309 + in1[6] * 8.6371387349299322) + in1[3]
    * 0.1184647119743765;
  Anqv[64] = (in1[4] * 0.0048728870127048851 - in1[6] * 0.32661245163675812) -
    in1[3] * 0.26948772272822052;
  Anqv[65] = (proc_control_node_B.t27 + proc_control_node_B.t34) -
    proc_control_node_B.t24_tmp * 4.0;
  Anqv[66] = proc_control_node_B.t23 + proc_control_node_B.t33;
  Anqv[67] = (-proc_control_node_B.t26 + proc_control_node_B.t29) -
    proc_control_node_B.t32_tmp * 4.0;
  Anqv[68] = -proc_control_node_B.t44;
  Anqv[69] = proc_control_node_B.t45;
  Anqv[70] = 0.0;
  Anqv[71] = -proc_control_node_B.t43;
  Anqv[72] = (in1[5] * 0.012275693092413449 - in1[6] * 0.0025508103573979122) +
    in1[3] * 0.41317714528019212;
  Anqv[73] = (in1[5] * -0.026613396758579669 - in1[6] * 0.51926242270043788) +
    in1[3] * 0.001255890098840652;
  Anqv[74] = (in1[5] * 0.36893088042209421 + in1[6] * 0.033534218994997082) -
    in1[3] * 0.0058790999671941586;
  Anqv[75] = (in1[5] * -2.0799430253873 - in1[6] * 25.237197567988879) + in1[3] *
    0.1163107279493438;
  Anqv[76] = (in1[5] * -0.713666312028309 + in1[6] * 0.1184647119743765) - in1[3]
    * 8.6371387349299322;
  Anqv[77] = (in1[5] * 0.0048728870127048851 - in1[6] * 0.26948772272822052) +
    in1[3] * 0.32661245163675812;
  Anqv[78] = (-proc_control_node_B.t30 + proc_control_node_B.t31) -
    proc_control_node_B.t25_tmp_l * 4.0;
  Anqv[79] = (proc_control_node_B.t26 + proc_control_node_B.t32) -
    proc_control_node_B.t29_tmp * 4.0;
  Anqv[80] = proc_control_node_B.t23 + proc_control_node_B.t28;
  Anqv[81] = -proc_control_node_B.t45;
  Anqv[82] = -proc_control_node_B.t44;
  Anqv[83] = proc_control_node_B.t43;
  Anqv[84] = 0.0;
  Anqv[85] = in1[4] * -0.41317714528019212 - in1[5] * 0.0025508103573979122;
  Anqv[86] = in1[4] * -0.001255890098840652 - in1[5] * 0.51926242270043788;
  Anqv[87] = in1[4] * 0.0058790999671941586 + in1[5] * 0.033534218994997082;
  Anqv[88] = in1[4] * -0.1163107279493438 - in1[5] * 25.237197567988879;
  Anqv[89] = in1[4] * 8.6371387349299322 + in1[5] * 0.1184647119743765;
  Anqv[90] = in1[4] * -0.32661245163675812 - in1[5] * 0.26948772272822052;
  Anqv[91] = (-proc_control_node_B.t36 + -proc_control_node_B.t37) + 1.0;
  Anqv[92] = proc_control_node_B.t17_j + proc_control_node_B.t22;
  Anqv[93] = proc_control_node_B.t18 - proc_control_node_B.t21_g;
  Anqv[94] = 0.0;
  Anqv[95] = 0.0;
  Anqv[96] = 0.0;
  Anqv[97] = 0.0;
  proc_control_node_B.t11_j *= in1[7];
  Anqv[98] = (((((proc_control_node_B.t5 * -0.036243063166504788 +
                  proc_control_node_B.t55) + proc_control_node_B.t56_o) -
                proc_control_node_B.t57_h) - proc_control_node_B.t61) -
              proc_control_node_B.t11_j * 0.036243063166504788) -
    1.393963967942492;
  Anqv[99] = (((in1[8] * 0.00477039452928936 - in1[9] * 0.001468966557066211) -
               proc_control_node_B.t11_j * 1.109195745194835E-6) -
              4.2661374815185972E-5) + ((in1[11] * 0.00041592787873873338 - in1
    [12] * 0.74121409319149256) - proc_control_node_B.t5 * 1.109195745194835E-6);
  Anqv[100] = (((in1[8] * -5.890830655932608E-5 + in1[9] * 0.00568699616459184)
                + proc_control_node_B.t11_j * 7.9830677445685858E-6) +
               0.00030704106709879178) + ((in1[11] * 0.69409782663856512 - in1
    [12] * 0.00032422410747795261) + proc_control_node_B.t5 *
    7.9830677445685858E-6);
  Anqv[101] = (((in1[11] * 0.032506453976272241 + in1[12] * 0.24400486517334929)
                - proc_control_node_B.t5 * 0.0001525121428377004) + ((in1[8] *
    0.044446246736648841 - in1[9] * 0.1148218101592509) -
    proc_control_node_B.t11_j * 0.0001525121428377004)) + -0.0058658516476038621;
  Anqv[102] = (((in1[11] * -0.00568699616459184 - in1[12] * 0.001145088836853196)
                + proc_control_node_B.t5 * 0.011738978516892359) + ((in1[8] *
    1.7911420833141059E-5 + in1[9] * 8.3502908029033716) +
    proc_control_node_B.t11_j * 0.011738978516892359)) + 0.45149917372662912;
  Anqv[103] = (((in1[11] * -7.5569972812640509E-5 - in1[12] *
                 0.00477039452928936) - proc_control_node_B.t5 *
                0.0011846302503005471) + ((in1[8] * -5.91169722427816 - in1[9] *
    2.2977499514997389E-5) - proc_control_node_B.t11_j * 0.0011846302503005471))
    + -0.045562701934636442;
  Anqv[104] = proc_control_node_B.t17_j - proc_control_node_B.t22;
  Anqv[105] = (-proc_control_node_B.t35 + -proc_control_node_B.t37) + 1.0;
  Anqv[106] = proc_control_node_B.t19 + proc_control_node_B.t20;
  Anqv[107] = 0.0;
  Anqv[108] = 0.0;
  Anqv[109] = 0.0;
  Anqv[110] = 0.0;
  proc_control_node_B.t11_j = proc_control_node_B.t12_e * in1[8];
  Anqv[111] = (((in1[10] * -2.1519484922730651E-5 + in1[12] * 1.3454180758607359)
                - proc_control_node_B.t6 * 7.7738505218783331E-7) - in1[7] *
               0.01129023503850542) + ((in1[9] * -0.00041111798914172931 -
    proc_control_node_B.t11_j * 7.7738505218783331E-7) - 5.6881833086914632E-5);
  Anqv[112] = (((((proc_control_node_B.t6 * -0.01903042325061665 +
                   proc_control_node_B.t55) + proc_control_node_B.t58_c) +
                 -proc_control_node_B.t59) - proc_control_node_B.t65) -
               proc_control_node_B.t11_j * 0.01903042325061665) -
    1.3924699939475591;
  Anqv[113] = (((in1[10] * -0.93255469429176219 - in1[12] *
                 7.6083411800115719E-5) + proc_control_node_B.t6 *
                2.3842573459475649E-5) + ((in1[7] * -5.890830655932608E-5 + in1
    [9] * 0.0071670223909459834) + proc_control_node_B.t11_j *
    2.3842573459475649E-5)) + 0.0017445785458152919;
  Anqv[114] = (((in1[10] * -0.0071670223909459834 + in1[12] *
                 0.00145353196782447) - proc_control_node_B.t6 *
                0.017943464992838758) + ((in1[7] * 0.044446246736648841 - in1[9]
    * 5.3937622658585171) - proc_control_node_B.t11_j * 0.017943464992838758)) +
    -1.312936462890641;
  Anqv[115] = (((in1[10] * 0.0012538688125934979 - in1[12] * 0.1118794885864644)
                + proc_control_node_B.t6 * 8.4206769578830268E-5) + in1[7] *
               1.7911420833141059E-5) + ((proc_control_node_B.t11_j *
    8.4206769578830268E-5 + in1[9] * 0.025315910649035739) +
    0.0061614709447924592);
  Anqv[116] = (((in1[10] * 1.6661666253314429E-5 + in1[12] * 0.01129023503850542)
                + proc_control_node_B.t6 * 0.00035080205133418912) + ((in1[7] *
    -5.91169722427816 + in1[9] * 0.01257120723021817) +
    proc_control_node_B.t11_j * 0.00035080205133418912)) + 0.025668442780550419;
  Anqv[117] = proc_control_node_B.t18 + proc_control_node_B.t21_g;
  Anqv[118] = proc_control_node_B.t19 - proc_control_node_B.t20;
  Anqv[119] = (-proc_control_node_B.t35 + -proc_control_node_B.t36) + 1.0;
  Anqv[120] = 0.0;
  Anqv[121] = 0.0;
  Anqv[122] = 0.0;
  Anqv[123] = 0.0;
  proc_control_node_B.t11_j = proc_control_node_B.t13_j * in1[9];
  Anqv[124] = (((in1[10] * 2.989993556213668E-6 - in1[11] * 1.4431163638272659)
                + proc_control_node_B.t7 * 5.1582899272597018E-6) - in1[7] *
               0.143523560675718) + ((proc_control_node_B.t11_j *
    5.1582899272597018E-6 + in1[8] * -0.00041111798914172931) +
    0.00047761943770923169);
  Anqv[125] = (((in1[10] * 1.0731951852318531 - in1[11] * 1.356129262930646E-5)
                + proc_control_node_B.t7 * 2.1981689677272681E-5) + ((in1[7] *
    -0.001468966557066211 - in1[8] * 0.069014505171846527) +
    proc_control_node_B.t11_j * 2.1981689677272681E-5)) + 0.002035341636784507;
  Anqv[126] = (((((proc_control_node_B.t7 * -0.01616685726098728 +
                   proc_control_node_B.t56_o) + -proc_control_node_B.t59) +
                 proc_control_node_B.t62_a) + proc_control_node_B.t68) -
               proc_control_node_B.t11_j * 0.01616685726098728) -
    1.4969312278691931;
  Anqv[127] = (((in1[10] * 0.069014505171846527 - in1[11] *
                 0.0018646499569661989) + proc_control_node_B.t7 *
                0.00171795837774031) + ((in1[7] * -0.1148218101592509 - in1[8] *
    5.3937622658585171) + proc_control_node_B.t11_j * 0.00171795837774031)) +
    0.15907022016113981;
  Anqv[128] = (((in1[10] * -0.00032387772021301561 + in1[11] * 0.143523560675718)
                - proc_control_node_B.t7 * 0.00030055639757781919) + ((in1[7] *
    8.3502908029033716 + in1[8] * 0.025315910649035739) -
    proc_control_node_B.t11_j * 0.00030055639757781919)) + -0.0278292960720203;
  Anqv[129] = (((in1[10] * -0.0013492616947596331 - in1[11] *
                 0.01448357294143097) - proc_control_node_B.t7 *
                3.993855127780116E-6) - in1[7] * 2.2977499514997389E-5) + ((in1
    [8] * 0.01257120723021817 - proc_control_node_B.t11_j * 3.993855127780116E-6)
    - 0.00036980140072038109);
  Anqv[130] = 0.0;
  Anqv[131] = 0.0;
  Anqv[132] = 0.0;
  Anqv[133] = -proc_control_node_B.t39;
  Anqv[134] = proc_control_node_B.t42;
  Anqv[135] = proc_control_node_B.t41;
  Anqv[136] = -proc_control_node_B.t40;
  proc_control_node_B.t11_j = in1[10] * proc_control_node_B.t8;
  Anqv[137] = (((in1[10] * -0.00010396365424827521 - in1[11] *
                 0.0030560301354578762) - in1[12] * 0.030270009262121408) -
               proc_control_node_B.t2 * 2.1768827225552109E-5) + (((in1[8] *
    -2.1519484922730651E-5 + in1[9] * 2.989993556213668E-6) -
    proc_control_node_B.t11_j * 2.1768827225552109E-5) - 0.001303522588356414);
  Anqv[138] = ((((in1[10] * 0.0028513455484883 - in1[11] *
                  0.00032316342950661811) + in1[12] * 4.2079285691049859E-5) -
                proc_control_node_B.t2 * 0.0036543398217122828) + ((in1[8] *
    -9.1703771260780813E-5 + in1[9] * 1.0731951852318531) -
    proc_control_node_B.t11_j * 0.0036543398217122828)) + -0.2188227438151068;
  Anqv[139] = (((in1[10] * 0.023864851221217471 + in1[11] *
                 4.0426879502317728E-6) - in1[12] * 0.00016269010774240791) +
               ((proc_control_node_B.t2 * 0.0003794960966701478 - in1[8] *
                 0.93255469429176219) - in1[9] * 9.1703771260780813E-5)) +
    (proc_control_node_B.t11_j * 0.0003794960966701478 + 0.022724317165877118);
  Anqv[140] = ((((proc_control_node_B.t2 * -0.28560141361437341 +
                  proc_control_node_B.t65) - proc_control_node_B.t68) -
                proc_control_node_B.t11_j * 0.28560141361437341) -
               17.1018810547529) + ((in1[10] * 0.00017692814721597281 - in1[11] *
    0.00301187450220627) + in1[12] * 0.0032852614324183722);
  Anqv[141] = (((in1[10] * 0.005100926963153893 + in1[11] * 7.54282242443926E-5)
                + in1[12] * 0.76112100692746432) + ((proc_control_node_B.t2 *
    0.0013404854555911631 + in1[8] * 0.0012538688125934979) - in1[9] *
    0.00032387772021301561)) + (proc_control_node_B.t11_j *
    0.0013404854555911631 + 0.080268590155159442);
  Anqv[142] = (((in1[10] * -0.0085297096290247246 - in1[11] *
                 0.59953739020136265) - in1[12] * 6.8948828938803766E-5) +
               ((proc_control_node_B.t2 * 0.00066564938883491385 + in1[8] *
                 1.6661666253314429E-5) - in1[9] * 0.0013492616947596331)) +
    (proc_control_node_B.t11_j * 0.00066564938883491385 + 0.039859244840414);
  Anqv[143] = 0.0;
  Anqv[144] = 0.0;
  Anqv[145] = 0.0;
  Anqv[146] = -proc_control_node_B.t40;
  Anqv[147] = -proc_control_node_B.t41;
  Anqv[148] = proc_control_node_B.t42;
  Anqv[149] = proc_control_node_B.t39;
  proc_control_node_B.t11_j = in1[11] * proc_control_node_B.t9;
  Anqv[150] = (((in1[10] * -0.0030560301354578762 + in1[11] *
                 0.001929418735906703) + in1[12] * 6.2884941489263073E-5) +
               proc_control_node_B.t3 * 0.001003331497170287) + (((in1[7] *
    9.7602896722846373E-5 - in1[9] * 1.4431163638272659) +
    proc_control_node_B.t11_j * 0.001003331497170287) + 0.0702332048019201);
  Anqv[151] = (((in1[10] * -0.00032316342950661811 + in1[11] *
                 4.5292476302332957E-6) - in1[12] * 0.016528998001422841) +
               proc_control_node_B.t3 * 1.026911824132076E-5) + (((in1[7] *
    0.00041592787873873338 - in1[9] * 1.356129262930646E-5) +
    proc_control_node_B.t11_j * 1.026911824132076E-5) + 0.00071883827689245348);
  Anqv[152] = (((in1[10] * 4.0426879502317728E-6 + in1[11] *
                 0.023860477346842442) - in1[12] * 0.000941018323416786) +
               ((proc_control_node_B.t3 * -3.9756137245743291E-5 + in1[7] *
                 0.69409782663856512) + in1[9] * 9.7602896722846373E-5)) +
    (proc_control_node_B.t11_j * -3.9756137245743291E-5 - 0.00278292960720203);
  Anqv[153] = (((in1[10] * -0.00301187450220627 + in1[11] *
                 0.00082864946354184129) - in1[12] * 0.291807921220024) +
               ((proc_control_node_B.t3 * 0.00080268590155159437 + in1[7] *
                 0.032506453976272241) - in1[9] * 0.0018646499569661989)) +
    (proc_control_node_B.t11_j * 0.00080268590155159437 + 0.056188013108611608);
  Anqv[154] = ((((proc_control_node_B.t3 * -0.058374455968341669 +
                  proc_control_node_B.t61) - proc_control_node_B.t62_a) -
                proc_control_node_B.t11_j * 0.058374455968341669) -
               4.0862119177839169) + ((in1[10] * 7.54282242443926E-5 - in1[11] *
    0.00019446645525741661) - in1[12] * 0.003324115892995542);
  Anqv[155] = ((((proc_control_node_B.t3 * 1.6062902063655571E-7 - in1[7] *
                  7.5569972812640509E-5) - in1[9] * 0.01448357294143097) +
                proc_control_node_B.t11_j * 1.6062902063655571E-7) + ((in1[10] *
    -0.59953739020136265 + in1[11] * 0.0085432434746820687) + in1[12] *
    0.0030111351640179931)) + 1.12440314445589E-5;
  Anqv[156] = 0.0;
  Anqv[157] = 0.0;
  Anqv[158] = 0.0;
  Anqv[159] = -proc_control_node_B.t41;
  Anqv[160] = proc_control_node_B.t40;
  Anqv[161] = -proc_control_node_B.t39;
  Anqv[162] = proc_control_node_B.t42;
  proc_control_node_B.t11_j = in1[12] * proc_control_node_B.t10;
  Anqv[163] = (((in1[10] * -0.030270009262121408 + in1[11] *
                 6.2884941489263073E-5) + in1[12] * 0.0020006959490984312) -
               proc_control_node_B.t4 * 0.0001032754577185093) + (((in1[7] *
    1.0571299073092789E-5 + in1[8] * 1.3454180758607359) -
    proc_control_node_B.t11_j * 0.0001032754577185093) - 0.015187567311545479);
  Anqv[164] = (((in1[10] * 4.2079285691049859E-5 - in1[11] *
                 0.016528998001422841) + in1[12] * 0.00283488707941543) +
               proc_control_node_B.t4 * 4.3636352726935713E-5) + (((in1[7] *
    -0.74121409319149256 + in1[8] * 1.0571299073092789E-5) +
    proc_control_node_B.t11_j * 4.3636352726935713E-5) + 0.0064171106951376048);
  Anqv[165] = ((((proc_control_node_B.t4 * -5.3885346962112674E-7 - in1[7] *
                  0.00032422410747795261) - in1[8] * 7.6083411800115719E-5) -
                proc_control_node_B.t11_j * 5.3885346962112674E-7) + ((in1[10] *
    -0.00016269010774240791 - in1[11] * 0.000941018323416786) - in1[12] *
    2.6641242336162E-6)) + -7.9243157297224521E-5;
  Anqv[166] = (((in1[10] * 0.0032852614324183722 - in1[11] * 0.291807921220024)
                - in1[12] * 0.00063467747547131872) + ((proc_control_node_B.t4 *
    0.00040656429737222281 + in1[7] * 0.24400486517334929) + in1[8] *
    0.00145353196782447)) + (proc_control_node_B.t11_j * 0.00040656429737222281
    + 0.059788867260621);
  Anqv[167] = ((((proc_control_node_B.t4 * 1.6384160104928689E-7 - in1[7] *
                  0.001145088836853196) - in1[8] * 0.1118794885864644) +
                proc_control_node_B.t11_j * 1.6384160104928689E-7) + ((in1[10] *
    0.76112100692746432 - in1[11] * 0.003324115892995542) - in1[12] *
    0.005288701994301117)) + 2.409435309548336E-5;
  Anqv[168] = ((((proc_control_node_B.t4 * -0.054076220260104418 +
                  proc_control_node_B.t57_h) - proc_control_node_B.t58_c) -
                proc_control_node_B.t11_j * 0.054076220260104418) -
               7.952385332368296) + ((in1[10] * -6.8948828938803766E-5 + in1[11]
    * 0.0030111351640179931) + in1[12] * 1.7711862430984169E-5);
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_AUVQuatSimFcn(const real_T
  in1[13], const real_T in2[8], real_T out1[13])
{
  proc_control_node_B.t8_i = in1[4] * in1[4];
  proc_control_node_B.t9_d = in1[5] * in1[5];
  proc_control_node_B.t11_b = in1[4] * in1[5] * 2.0;
  proc_control_node_B.t12_tmp = in1[4] * in1[6];
  proc_control_node_B.t12_h = proc_control_node_B.t12_tmp * 2.0;
  proc_control_node_B.t13_tmp = in1[5] * in1[6];
  proc_control_node_B.t13_p = proc_control_node_B.t13_tmp * 2.0;
  proc_control_node_B.t14_tmp = in1[3] * in1[4];
  proc_control_node_B.t14_n = proc_control_node_B.t14_tmp * 2.0;
  proc_control_node_B.t15_tmp = in1[3] * in1[5];
  proc_control_node_B.t15 = proc_control_node_B.t15_tmp * 2.0;
  proc_control_node_B.t16 = in1[3] * in1[6] * 2.0;
  proc_control_node_B.t25_j = in1[11] / 500.0;
  proc_control_node_B.t29_o = in1[10] / 1000.0;
  proc_control_node_B.t31_b = in1[12] * 0.018;
  proc_control_node_B.t50 = in1[7] * 32.4648;
  proc_control_node_B.t53 = in1[8] * 43.6156;
  proc_control_node_B.t54 = in1[9] * 46.7695;
  proc_control_node_B.t17_jk = proc_control_node_B.t8_i * 2.0;
  proc_control_node_B.t18_e = proc_control_node_B.t9_d * 2.0;
  proc_control_node_B.t19_i = in1[6] * in1[6] * 2.0;
  proc_control_node_B.t59_n = proc_control_node_B.t25_j +
    proc_control_node_B.t31_b;
  proc_control_node_B.t25_j += proc_control_node_B.t29_o;
  proc_control_node_B.t29_o += proc_control_node_B.t31_b;
  proc_control_node_B.t31_b = in1[11] * 0.558 + proc_control_node_B.t50;
  proc_control_node_B.t64 = in1[10] * 0.062 + proc_control_node_B.t54;
  proc_control_node_B.t65_i = in1[12] * 0.031 + proc_control_node_B.t53;
  proc_control_node_B.t68_p = (in1[11] / 125.0 + in1[12] / 250.0) + in1[10] *
    0.592;
  proc_control_node_B.t50 = in1[12] * 0.062 + -proc_control_node_B.t50;
  proc_control_node_B.t53 = in1[10] * 0.558 + -proc_control_node_B.t53;
  proc_control_node_B.t54 = in1[11] * 0.031 + -proc_control_node_B.t54;
  proc_control_node_B.t69 = (in1[10] / 250.0 + -(in1[11] / 1000.0)) + in1[12] *
    1.8864;
  proc_control_node_B.t70 = (in1[10] / 125.0 + -(in1[12] / 1000.0)) + in1[11] *
    1.7228;
  out1[0] = (((proc_control_node_B.t18_e + proc_control_node_B.t19_i) - 1.0) *
             -in1[7] + (proc_control_node_B.t12_h + proc_control_node_B.t15) *
             in1[9]) + (proc_control_node_B.t11_b - proc_control_node_B.t16) *
    in1[8];
  out1[1] = ((proc_control_node_B.t11_b + proc_control_node_B.t16) * in1[7] -
             ((proc_control_node_B.t17_jk + proc_control_node_B.t19_i) - 1.0) *
             in1[8]) + (proc_control_node_B.t13_p - proc_control_node_B.t14_n) *
    in1[9];
  out1[2] = ((proc_control_node_B.t13_p + proc_control_node_B.t14_n) * in1[8] -
             ((proc_control_node_B.t17_jk + proc_control_node_B.t18_e) - 1.0) *
             in1[9]) + (proc_control_node_B.t12_h - proc_control_node_B.t15) *
    in1[7];
  out1[3] = (in1[4] * in1[10] * -0.5 - in1[5] * in1[11] / 2.0) - in1[6] * in1[12]
    / 2.0;
  out1[4] = (in1[3] * in1[10] / 2.0 - in1[6] * in1[11] / 2.0) + in1[5] * in1[12]
    / 2.0;
  out1[5] = (in1[6] * in1[10] / 2.0 + in1[3] * in1[11] / 2.0) - in1[4] * in1[12]
    / 2.0;
  out1[6] = (in1[5] * in1[10] * -0.5 + in1[4] * in1[11] / 2.0) + in1[3] * in1[12]
    / 2.0;
  proc_control_node_B.t11_b = in1[10] * (fabs(in1[10]) * 0.167 + 10.0);
  proc_control_node_B.t12_h = in1[10] * proc_control_node_B.t59_n;
  proc_control_node_B.t13_p = in1[10] * proc_control_node_B.t64;
  proc_control_node_B.t14_n = in1[10] * proc_control_node_B.t53;
  proc_control_node_B.t15 = in1[10] * proc_control_node_B.t69;
  proc_control_node_B.t16 = in1[10] * proc_control_node_B.t70;
  proc_control_node_B.t17_jk = in1[11] * (fabs(in1[11]) / 10.0 + 7.0);
  proc_control_node_B.t18_e = in1[11] * proc_control_node_B.t29_o;
  proc_control_node_B.t19_i = in1[11] * proc_control_node_B.t31_b;
  proc_control_node_B.out1_tmp = in1[11] * proc_control_node_B.t54;
  proc_control_node_B.out1_tmp_o = in1[11] * proc_control_node_B.t68_p;
  proc_control_node_B.t69 *= in1[11];
  proc_control_node_B.out1_tmp_m = in1[12] * (fabs(in1[12]) * 0.102 + 15.0);
  proc_control_node_B.out1_tmp_ot = in1[12] * proc_control_node_B.t25_j;
  proc_control_node_B.out1_tmp_g = in1[12] * proc_control_node_B.t50;
  proc_control_node_B.out1_tmp_e = in1[12] * proc_control_node_B.t65_i;
  proc_control_node_B.t68_p *= in1[12];
  proc_control_node_B.t70 *= in1[12];
  proc_control_node_B.out1_tmp_i = (fabs(in1[7]) * 1.17 + 45.0) * in1[7];
  proc_control_node_B.t59_n *= in1[7];
  proc_control_node_B.t65_i *= in1[7];
  proc_control_node_B.t54 *= in1[7];
  proc_control_node_B.out1_tmp_gb = (fabs(in1[8]) * 0.82 + 60.0) * in1[8];
  proc_control_node_B.t29_o *= in1[8];
  proc_control_node_B.t50 *= in1[8];
  proc_control_node_B.t64 *= in1[8];
  proc_control_node_B.out1_tmp_na = (fabs(in1[9]) * 0.756 + 70.0) * in1[9];
  proc_control_node_B.t25_j *= in1[9];
  proc_control_node_B.t31_b *= in1[9];
  proc_control_node_B.t53 *= in1[9];
  out1[7] = (((((((((((((((in2[0] * -0.00033076834054020519 + in2[1] *
    1.8595780444550231E-21) + in2[2] * 0.00033506403327449372) + (in2[3] *
    0.00033363213569639753 - in2[4] * 0.001819638864719295)) + (in2[5] *
    -0.0018124211550371481 + in2[6] * 0.0018538731733468781)) + (in2[7] *
    0.001778186846409557 + proc_control_node_B.t8_i * 0.0061378465462067237)) +
                      ((in2[0] * 1.4142135623730951 * 0.015171119710606879 +
                        proc_control_node_B.t9_d * 0.0061378465462067237) + in2
                       [1] * 1.4142135623730951 * 0.014928824155507611)) +
                     ((in2[2] * 1.4142135623730951 * 0.015171119710606879 + in2
                       [3] * 1.4142135623730951 * 0.01516372519659284) -
                      proc_control_node_B.t12_tmp * 0.41317714528019212)) +
                    ((proc_control_node_B.t13_tmp * -0.0025508103573979122 -
                      proc_control_node_B.t14_tmp * 0.0025508103573979122) +
                     proc_control_node_B.t15_tmp * 0.41317714528019212)) +
                   (((proc_control_node_B.t11_b * -0.0001303522588356414 -
                      proc_control_node_B.t12_h * 0.96028628902704993) +
                     proc_control_node_B.t13_p * 9.4803055144857715E-7) -
                    proc_control_node_B.t14_n * 6.8231348244175949E-6)) +
                  (((proc_control_node_B.t15 * -0.010033314971702871 -
                     proc_control_node_B.t16 * 0.0010125044874363649) +
                    proc_control_node_B.t17_jk * 0.010033314971702871) -
                   proc_control_node_B.t18_e * 2.9388947094905889E-5)) +
                 (((proc_control_node_B.t19_i * -6.8231348244175949E-6 +
                    proc_control_node_B.out1_tmp * 0.030976977065388711) +
                   proc_control_node_B.out1_tmp_o * 0.0010125044874363649) -
                  proc_control_node_B.t69 * 0.0001303522588356414)) +
                (((proc_control_node_B.out1_tmp_m * -0.0010125044874363649 +
                   proc_control_node_B.out1_tmp_ot * 0.0002115171795569455) +
                  proc_control_node_B.out1_tmp_g * 9.4803055144857715E-7) +
                 proc_control_node_B.out1_tmp_e * 0.030976977065388711)) +
               (((proc_control_node_B.t68_p * 0.010033314971702871 +
                  proc_control_node_B.t70 * 0.0001303522588356414) -
                 proc_control_node_B.out1_tmp_i * 0.030976977065388711) +
                proc_control_node_B.t59_n * 0.0040409200239048832)) +
              (((proc_control_node_B.t65_i * -0.0010125044874363649 +
                 proc_control_node_B.t54 * 0.010033314971702871) -
                proc_control_node_B.out1_tmp_gb * 9.4803055144857715E-7) -
               proc_control_node_B.t29_o * 0.311032764122789)) +
             (((proc_control_node_B.t50 * -0.0010125044874363649 -
                proc_control_node_B.t64 * 0.0001303522588356414) +
               proc_control_node_B.out1_tmp_na * 6.8231348244175949E-6) +
              proc_control_node_B.t25_j * 0.031387639110527318)) +
    ((proc_control_node_B.t31_b * 0.010033314971702871 - proc_control_node_B.t53
      * 0.0001303522588356414) - 0.0030689232731033619);
  out1[8] = (((((((((((((((in2[0] * 0.00013975754063522079 + in2[1] *
    7.9244610288113972E-21) + in2[2] * -0.00014157257363048341) + (in2[3] *
    -0.0001409675626320625 - in2[4] * 0.0034249251816346319)) + (in2[5] *
    0.003387750973601051 + in2[6] * 0.0035708122797193441)) + (in2[7] *
    -0.0035336380716857632 - proc_control_node_B.t8_i * 0.013306698379289829)) +
                      ((proc_control_node_B.t9_d * -0.013306698379289829 - in2[0]
                        * 1.4142135623730951 * 0.01090649593858282) + in2[1] *
                       1.4142135623730951 * 0.011000123045544621)) + ((in2[2] *
    1.4142135623730951 * -0.01090649593858282 + in2[3] * 1.4142135623730951 *
    0.01090087173345982) - proc_control_node_B.t12_tmp * 0.001255890098840652))
                    + ((proc_control_node_B.t13_tmp * -0.51926242270043788 -
                        proc_control_node_B.t14_tmp * 0.51926242270043788) +
                       proc_control_node_B.t15_tmp * 0.001255890098840652)) +
                   (((proc_control_node_B.t11_b * -0.021882274381510681 -
                      proc_control_node_B.t12_h * 2.9388947094905889E-5) +
                     proc_control_node_B.t13_p * 0.02320783323245932) -
                    proc_control_node_B.t14_n * 2.9076309096921531E-5)) +
                  (((proc_control_node_B.t15 * -0.0001026911824132076 +
                     proc_control_node_B.t16 * 0.00042780737967584029) +
                    proc_control_node_B.t17_jk * 0.0001026911824132076) -
                   proc_control_node_B.t18_e * 0.71944283020623911)) +
                 (((proc_control_node_B.t19_i * -2.9076309096921531E-5 +
                    proc_control_node_B.out1_tmp * 9.4803055144857715E-7) -
                   proc_control_node_B.out1_tmp_o * 0.00042780737967584029) -
                  proc_control_node_B.t69 * 0.021882274381510681)) +
                (((proc_control_node_B.out1_tmp_m * 0.00042780737967584029 +
                   proc_control_node_B.out1_tmp_ot * 0.00090136558200456737) +
                  proc_control_node_B.out1_tmp_g * 0.02320783323245932) +
                 proc_control_node_B.out1_tmp_e * 9.4803055144857715E-7)) +
               (((proc_control_node_B.t68_p * 0.0001026911824132076 +
                  proc_control_node_B.t70 * 0.021882274381510681) -
                 proc_control_node_B.out1_tmp_i * 9.4803055144857715E-7) +
                proc_control_node_B.t59_n * 0.678350505826831)) +
              (((proc_control_node_B.t65_i * 0.00042780737967584029 +
                 proc_control_node_B.t54 * 0.0001026911824132076) -
                proc_control_node_B.out1_tmp_gb * 0.02320783323245932) -
               proc_control_node_B.t29_o * 0.0031834266548094372)) +
             (((proc_control_node_B.t50 * 0.00042780737967584029 -
                proc_control_node_B.t64 * 0.021882274381510681) +
               proc_control_node_B.out1_tmp_na * 2.9076309096921531E-5) -
              proc_control_node_B.t25_j * 0.013262028769951049)) +
    ((proc_control_node_B.t31_b * 0.0001026911824132076 -
      proc_control_node_B.t53 * 0.021882274381510681) + 0.0066533491896449172);
  out1[9] = (((((((((((((((in2[0] * -1.725827915740819E-6 + in2[1] *
    -5.8281975682474322E-18) + in2[2] * 1.748241265284163E-6) + (in2[3] *
    1.740770148765829E-6 - in2[4] * 0.02095639900015615)) + (in2[5] *
    0.021100316216985739 - in2[6] * 0.021822949502860629)) + (in2[7] *
    0.02167903228603104 + proc_control_node_B.t8_i * 0.1844654402110471)) +
                      ((proc_control_node_B.t9_d * 0.1844654402110471 - in2[0] *
                        1.4142135623730951 * 4.8869263875916949E-5) + in2[1] *
                       1.4142135623730951 * 6.6264429389244648E-5)) + ((in2[2] *
    1.4142135623730951 * -4.8869263875916949E-5 + in2[3] * 1.4142135623730951 *
    6.7490056888775055E-5) + proc_control_node_B.t12_tmp * 0.0058790999671941586))
                    + ((proc_control_node_B.t13_tmp * 0.033534218994997082 +
                        proc_control_node_B.t14_tmp * 0.033534218994997082) -
                       proc_control_node_B.t15_tmp * 0.0058790999671941586)) +
                   (((proc_control_node_B.t11_b * 0.002272431716587712 +
                      proc_control_node_B.t12_h * 0.0002115171795569455) -
                     proc_control_node_B.t13_p * 2.9076309096921531E-5) +
                    proc_control_node_B.t14_n * 0.021384731826702759)) +
                  (((proc_control_node_B.t15 * 0.00039756137245743289 -
                     proc_control_node_B.t16 * 5.2828771531483014E-6) -
                    proc_control_node_B.t17_jk * 0.00039756137245743289) +
                   proc_control_node_B.t18_e * 0.00090136558200456737)) +
                 (((proc_control_node_B.t19_i * 0.021384731826702759 -
                    proc_control_node_B.out1_tmp * 6.8231348244175949E-6) +
                   proc_control_node_B.out1_tmp_o * 5.2828771531483014E-6) +
                  proc_control_node_B.t69 * 0.002272431716587712)) +
                (((proc_control_node_B.out1_tmp_m * -5.2828771531483014E-6 -
                   proc_control_node_B.out1_tmp_ot * 0.66292668662778553) -
                  proc_control_node_B.out1_tmp_g * 2.9076309096921531E-5) -
                 proc_control_node_B.out1_tmp_e * 6.8231348244175949E-6)) +
               (((proc_control_node_B.t68_p * -0.00039756137245743289 -
                  proc_control_node_B.t70 * 0.002272431716587712) +
                 proc_control_node_B.out1_tmp_i * 6.8231348244175949E-6) -
                proc_control_node_B.t59_n * 0.070445383214219059)) +
              (((proc_control_node_B.t65_i * -5.2828771531483014E-6 -
                 proc_control_node_B.t54 * 0.00039756137245743289) +
                proc_control_node_B.out1_tmp_gb * 2.9076309096921531E-5) +
               proc_control_node_B.t29_o * 0.01232440254618042)) +
             (((proc_control_node_B.t50 * -5.2828771531483014E-6 +
                proc_control_node_B.t64 * 0.002272431716587712) -
               proc_control_node_B.out1_tmp_na * 0.021384731826702759) +
              proc_control_node_B.t25_j * 0.00016376919174759729)) +
    ((proc_control_node_B.t31_b * -0.00039756137245743289 +
      proc_control_node_B.t53 * 0.002272431716587712) - 0.092232720105523552);
  out1[10] = (((((((((((((((((in2[0] * 0.0013021350951669831 + in2[1] *
    6.1932883292401409E-19) + in2[2] * -0.00131904594055876) + (in2[3] *
    -0.0013134089920948341 - in2[4] * 0.26767193546582568)) + (in2[5] *
    0.26476621250220889 + in2[6] * 0.2790736050389333)) + (in2[7] *
    -0.27616788207531651 - proc_control_node_B.t8_i * 1.03997151269365)) +
    ((in2[0] * 1.4142135623730951 * 0.043593198825375247 +
      proc_control_node_B.t9_d * -1.03997151269365) - in2[1] *
     1.4142135623730951 * 0.043051831063235027)) + ((in2[2] * 1.4142135623730951
    * 0.043593198825375247 - in2[3] * 1.4142135623730951 * 0.043976565543532631)
    - proc_control_node_B.t12_tmp * 0.1163107279493438)) +
                       ((proc_control_node_B.t13_tmp * -25.237197567988879 -
    proc_control_node_B.t14_tmp * 25.237197567988879) +
                        proc_control_node_B.t15_tmp * 0.1163107279493438)) +
                      ((proc_control_node_B.t11_b * -1.71018810547529 -
                        proc_control_node_B.t12_h * 0.0040409200239048832) +
                       proc_control_node_B.t13_p * 0.021882274381510681)) +
                     ((proc_control_node_B.t14_n * -0.002272431716587712 -
                       proc_control_node_B.t15 * 0.0080268590155159435) +
                      proc_control_node_B.t16 * 0.0039859244840414)) +
                    ((proc_control_node_B.t17_jk * 0.0080268590155159435 -
                      proc_control_node_B.t18_e * 0.678350505826831) -
                     proc_control_node_B.t19_i * 0.002272431716587712)) +
                   ((proc_control_node_B.out1_tmp * 0.0001303522588356414 -
                     proc_control_node_B.out1_tmp_o * 0.0039859244840414) -
                    proc_control_node_B.t69 * 1.71018810547529)) +
                  (((proc_control_node_B.out1_tmp_m * 0.0039859244840414 +
                     proc_control_node_B.out1_tmp_ot * 0.070445383214219059) +
                    proc_control_node_B.out1_tmp_g * 0.021882274381510681) +
                   proc_control_node_B.out1_tmp_e * 0.0001303522588356414)) +
                 ((proc_control_node_B.t68_p * 0.0080268590155159435 +
                   proc_control_node_B.t70 * 1.71018810547529) -
                  proc_control_node_B.out1_tmp_i * 0.0001303522588356414)) +
                ((proc_control_node_B.t59_n * 53.015831269733987 +
                  proc_control_node_B.t65_i * 0.0039859244840414) +
                 proc_control_node_B.t54 * 0.0080268590155159435)) +
               ((proc_control_node_B.out1_tmp_gb * -0.021882274381510681 -
                 proc_control_node_B.t29_o * 0.2488326294809943) +
                proc_control_node_B.t50 * 0.0039859244840414)) +
              ((proc_control_node_B.t64 * -1.71018810547529 +
                proc_control_node_B.out1_tmp_na * 0.002272431716587712) -
               proc_control_node_B.t25_j * 0.1235636590052834)) +
    ((proc_control_node_B.t31_b * 0.0080268590155159435 -
      proc_control_node_B.t53 * 1.71018810547529) + 0.519985756346825);
  out1[11] = ((((((((((((((((in2[0] * 5.24748238233168E-7 - in2[1] *
    1.083514276897426E-19) + in2[2] * -5.3156315041823265E-7) + (in2[3] *
    -5.2929151302328333E-7 + in2[4] * 0.10593667623599359)) + (in2[5] *
    0.10537885436940329 - in2[6] * 0.10793139553633729)) + (in2[7] *
    -0.1033841350690595 - proc_control_node_B.t8_i * 0.3568331560141545)) +
                        ((in2[0] * 1.4142135623730951 * 0.013457654526727991 +
    proc_control_node_B.t9_d * -0.3568331560141545) + in2[1] *
    1.4142135623730951 * 0.013869054980635681)) + ((in2[2] * 1.4142135623730951 *
    0.013457654526727991 + in2[3] * 1.4142135623730951 * 0.01386868232130781) +
    proc_control_node_B.t12_tmp * 8.6371387349299322)) +
                      ((proc_control_node_B.t13_tmp * 0.1184647119743765 +
                        proc_control_node_B.t14_tmp * 0.1184647119743765) -
                       proc_control_node_B.t15_tmp * 8.6371387349299322)) +
                     (((proc_control_node_B.t11_b * 0.0080268590155159435 +
                        proc_control_node_B.t12_h * 0.311032764122789) -
                       proc_control_node_B.t13_p * 0.0001026911824132076) +
                      proc_control_node_B.t14_n * 0.00039756137245743289)) +
                    ((proc_control_node_B.t15 * 0.58374455968341665 +
                      proc_control_node_B.t16 * 1.606290206365557E-6) -
                     proc_control_node_B.t17_jk * 0.58374455968341665)) +
                   (((proc_control_node_B.t18_e * 0.0031834266548094372 +
                      proc_control_node_B.t19_i * 0.00039756137245743289) -
                     proc_control_node_B.out1_tmp * 0.010033314971702871) -
                    proc_control_node_B.out1_tmp_o * 1.606290206365557E-6)) +
                  (((proc_control_node_B.t69 * 0.0080268590155159435 +
                     proc_control_node_B.out1_tmp_m * 1.606290206365557E-6) -
                    proc_control_node_B.out1_tmp_ot * 0.01232440254618042) -
                   proc_control_node_B.out1_tmp_g * 0.0001026911824132076)) +
                 ((proc_control_node_B.out1_tmp_e * -0.010033314971702871 -
                   proc_control_node_B.t68_p * 0.58374455968341665) -
                  proc_control_node_B.t70 * 0.0080268590155159435)) +
                ((proc_control_node_B.out1_tmp_i * 0.010033314971702871 -
                  proc_control_node_B.t59_n * 0.2488326294809943) +
                 proc_control_node_B.t65_i * 1.606290206365557E-6)) +
               ((proc_control_node_B.t54 * -0.58374455968341665 +
                 proc_control_node_B.out1_tmp_gb * 0.0001026911824132076) +
                proc_control_node_B.t29_o * 18.096081350185919)) +
              (((proc_control_node_B.t50 * 1.606290206365557E-6 +
                 proc_control_node_B.t64 * 0.0080268590155159435) -
                proc_control_node_B.out1_tmp_na * 0.00039756137245743289) -
               proc_control_node_B.t25_j * 4.9794996397332282E-5)) +
    ((proc_control_node_B.t31_b * -0.58374455968341665 + proc_control_node_B.t53
      * 0.0080268590155159435) + 0.17841657800707719);
  out1[12] = ((((((((((((((((in2[0] * -0.1731941163298826 + in2[1] *
    -1.4397960202092559E-21) + in2[2] * 0.175443390567933) + (in2[3] *
    0.17469363248858291 + in2[4] * 0.00062021813460420567)) + (in2[5] *
    -0.0006207996116589 - in2[6] * 0.00064672437426625525)) + (in2[7] *
    0.00064730585132094889 + proc_control_node_B.t8_i * 0.0024364435063524421))
                        + ((in2[0] * 1.4142135623730951 * 0.00059255494878017434
    + proc_control_node_B.t9_d * 0.0024364435063524421) - in2[1] *
    1.4142135623730951 * 0.1225770464045467)) + ((in2[2] * 1.4142135623730951 *
    0.00059255494878017434 + in2[3] * 1.4142135623730951 *
    0.00041984673608298361) - proc_control_node_B.t12_tmp * 0.32661245163675812))
                      + ((proc_control_node_B.t13_tmp * -0.26948772272822052 -
    proc_control_node_B.t14_tmp * 0.26948772272822052) +
    proc_control_node_B.t15_tmp * 0.32661245163675812)) +
                     (((proc_control_node_B.t11_b * 0.0039859244840414 -
                        proc_control_node_B.t12_h * 0.031387639110527318) -
                       proc_control_node_B.t13_p * 0.00042780737967584029) +
                      proc_control_node_B.t14_n * 5.2828771531483014E-6)) +
                    (((proc_control_node_B.t15 * -1.606290206365557E-6 -
                       proc_control_node_B.t16 * 0.53015902215788635) +
                      proc_control_node_B.t17_jk * 1.606290206365557E-6) +
                     proc_control_node_B.t18_e * 0.013262028769951049)) +
                   (((proc_control_node_B.t19_i * 5.2828771531483014E-6 +
                      proc_control_node_B.out1_tmp * 0.0010125044874363649) +
                     proc_control_node_B.out1_tmp_o * 0.53015902215788635) +
                    proc_control_node_B.t69 * 0.0039859244840414)) +
                  ((proc_control_node_B.out1_tmp_m * -0.53015902215788635 -
                    proc_control_node_B.out1_tmp_ot * 0.00016376919174759729) -
                   proc_control_node_B.out1_tmp_g * 0.00042780737967584029)) +
                 (((proc_control_node_B.out1_tmp_e * 0.0010125044874363649 +
                    proc_control_node_B.t68_p * 1.606290206365557E-6) -
                   proc_control_node_B.t70 * 0.0039859244840414) -
                  proc_control_node_B.out1_tmp_i * 0.0010125044874363649)) +
                ((proc_control_node_B.t59_n * -0.1235636590052834 -
                  proc_control_node_B.t65_i * 0.53015902215788635) +
                 proc_control_node_B.t54 * 1.606290206365557E-6)) +
               ((proc_control_node_B.out1_tmp_gb * 0.00042780737967584029 -
                 proc_control_node_B.t29_o * 4.9794996397332282E-5) -
                proc_control_node_B.t50 * 0.53015902215788635)) +
              (((proc_control_node_B.t64 * 0.0039859244840414 -
                 proc_control_node_B.out1_tmp_na * 5.2828771531483014E-6) +
                proc_control_node_B.t25_j * 16.434929686894481) +
               proc_control_node_B.t31_b * 1.606290206365557E-6)) +
    (proc_control_node_B.t53 * 0.0039859244840414 - 0.0012182217531762211);
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_stateEvolution(const real_T
  X[143], const real_T U[88], real_T c[130], real_T J[20150])
{
  int32_T Ak1_tmp;
  int32_T Jx_tmp;
  int32_T c_tmp;
  int32_T i;
  int32_T k;
  static const int8_T Iz2u[1920] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 1 };

  static const real_T val[104] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.002112443491058583, -0.0015284356933675683, -7.0837403672252151E-6,
    0.0062952228101239545, 0.0019032522297668638, -0.017235611708486639, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0021112545591001931, 0.001555652319878204,
    9.371205474517828E-6, -0.0060884483374622281, 0.0019613805650913105,
    -0.017335012146094616, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0021790267284400532, -0.0015565687047941388, -6.7363334491227172E-6,
    0.00603310470655138, 0.0019031465986279986, 0.017628138981294922, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0021778377964816625, 0.0015275193084516327,
    9.7186123926203251E-6, -0.0063505664410348026, 0.001961274933952446,
    0.017528738543686955, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.00018196388647192952, -0.00034249251816346321, -0.0020956399000156153,
    -0.026767193546582569, 0.010593667623599361, 6.2021813460420573E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, -0.00018124211550371483, 0.00033877509736010515,
    0.0021100316216985742, 0.026476621250220891, 0.01053788543694033,
    -6.207996116589E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00018538731733468782, 0.00035708122797193444, -0.0021822949502860629,
    0.027907360503893332, -0.010793139553633729, -6.4672437426625527E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00017781868464095571,
    -0.00035336380716857632, 0.002167903228603104, -0.027616788207531651,
    -0.010338413506905951, 6.4730585132094889E-5 };

  memset(&proc_control_node_B.Jx_p[0], 0, 16900U * sizeof(real_T));
  memset(&proc_control_node_B.Jmv[0], 0, 10400U * sizeof(real_T));
  memset(&c[0], 0, 130U * sizeof(real_T));
  for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
    proc_control_node_B.ic_k[Jx_tmp] = static_cast<real_T>(Jx_tmp) + 1.0;
  }

  for (Jx_tmp = 0; Jx_tmp < 11; Jx_tmp++) {
    for (i = 0; i < 8; i++) {
      proc_control_node_B.b_U[i + (Jx_tmp << 3)] = U[11 * i + Jx_tmp];
    }

    for (i = 0; i < 13; i++) {
      proc_control_node_B.b_X[i + 13 * Jx_tmp] = X[11 * i + Jx_tmp];
    }
  }

  for (i = 0; i < 10; i++) {
    proc_cont_AUVQuatJacobianMatrix(&proc_control_node_B.b_X[13 * i],
      proc_control_node_B.Ak);
    Ak1_tmp = (i + 1) * 13;
    proc_cont_AUVQuatJacobianMatrix(&proc_control_node_B.b_X[Ak1_tmp],
      proc_control_node_B.Ak1);
    Jx_tmp = i << 3;
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X[13 * i],
      &proc_control_node_B.b_U[Jx_tmp], proc_control_node_B.dv20);
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X[Ak1_tmp],
      &proc_control_node_B.b_U[Jx_tmp], proc_control_node_B.dv21);
    for (k = 0; k < 13; k++) {
      c_tmp = static_cast<int32_T>(proc_control_node_B.ic_k[k]);
      c[c_tmp - 1] = (proc_control_node_B.b_X[13 * i + k] +
                      (proc_control_node_B.dv20[k] + proc_control_node_B.dv21[k])
                      * 0.05) - proc_control_node_B.b_X[Ak1_tmp + k];
      if (i + 1 > 1) {
        for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
          proc_control_node_B.Jx_p[((static_cast<int32_T>
            (proc_control_node_B.ic_k[Jx_tmp]) + 130 * k) + 1690 * (i - 1)) - 1]
            = proc_control_node_B.Ak[13 * k + Jx_tmp] * 0.05;
        }

        proc_control_node_B.Jx_p[((static_cast<int32_T>
          (proc_control_node_B.ic_k[k]) + 130 * k) + 1690 * (i - 1)) - 1] =
          proc_control_node_B.Jx_p[((130 * k + c_tmp) + (i - 1) * 1690) - 1] +
          1.0;
      }
    }

    for (k = 0; k < 13; k++) {
      for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
        proc_control_node_B.Jx_p[((static_cast<int32_T>
          (proc_control_node_B.ic_k[Jx_tmp]) + 130 * k) + 1690 * i) - 1] =
          proc_control_node_B.Ak1[13 * k + Jx_tmp] * 0.05;
      }

      Jx_tmp = ((130 * k + static_cast<int32_T>(proc_control_node_B.ic_k[k])) +
                1690 * i) - 1;
      proc_control_node_B.Jx_p[Jx_tmp]--;
    }

    for (k = 0; k < 8; k++) {
      for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
        proc_control_node_B.Jmv[((static_cast<int32_T>
          (proc_control_node_B.ic_k[Jx_tmp]) + 130 * k) + 1040 * i) - 1] = val
          [13 * k + Jx_tmp];
      }
    }

    for (Jx_tmp = 0; Jx_tmp < 13; Jx_tmp++) {
      proc_control_node_B.ic_k[Jx_tmp] += 13.0;
    }
  }

  for (Jx_tmp = 0; Jx_tmp < 130; Jx_tmp++) {
    for (i = 0; i < 24; i++) {
      k = i + 24 * Jx_tmp;
      proc_control_node_B.Jmv_g[k] = 0.0;
      for (Ak1_tmp = 0; Ak1_tmp < 80; Ak1_tmp++) {
        proc_control_node_B.Jmv_g[k] += proc_control_node_B.Jmv[130 * Ak1_tmp +
          Jx_tmp] * static_cast<real_T>(Iz2u[80 * i + Ak1_tmp]);
      }
    }

    for (i = 0; i < 130; i++) {
      J[i + 155 * Jx_tmp] = proc_control_node_B.Jx_p[130 * i + Jx_tmp];
    }

    memcpy(&J[Jx_tmp * 155 + 130], &proc_control_node_B.Jmv_g[Jx_tmp * 24], 24U *
           sizeof(real_T));
    J[155 * Jx_tmp + 154] = 0.0;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_all(const boolean_T x[130],
  boolean_T y[13])
{
  int32_T i;
  int32_T i2;
  int32_T ix;
  boolean_T exitg1;
  i2 = 1;
  for (i = 0; i < 13; i++) {
    y[i] = true;
    ix = i2;
    i2 += 10;
    exitg1 = false;
    while ((!exitg1) && (ix <= i2 - 1)) {
      if (!x[ix - 1]) {
        y[i] = false;
        exitg1 = true;
      } else {
        ix++;
      }
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_isfinite_k(const real_T x[13],
  boolean_T b[13])
{
  int32_T i;
  for (i = 0; i < 13; i++) {
    proc_control_node_B.x_i = x[i];
    b[i] = ((!rtIsInf(proc_control_node_B.x_i)) && (!rtIsNaN
             (proc_control_node_B.x_i)));
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_any(const boolean_T x
  [26])
{
  int32_T k;
  boolean_T exitg1;
  boolean_T y;
  y = false;
  k = 0;
  exitg1 = false;
  while ((!exitg1) && (k <= 25)) {
    if (!x[k]) {
      k++;
    } else {
      y = true;
      exitg1 = true;
    }
  }

  return y;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_cont_znlmpc_reformJacobian(const real_T
  Jx_data[], const int32_T Jx_size[3], const real_T Jmv_data[], const real_T
  Je_data[], const int32_T *Je_size, real_T Jc_data[], int32_T Jc_size[2])
{
  if (Jx_size[0] == 0) {
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    proc_control_node_B.Jx_g[0] = static_cast<int16_T>(Jx_size[0]);
    proc_control_node_B.Jx_g[1] = 130;
    proc_control_node_B.varargin_1_size_idx_1_tmp = static_cast<int16_T>
      (Jx_size[0]);
    for (proc_control_node_B.i5 = 0; proc_control_node_B.i5 <
         proc_control_node_B.varargin_1_size_idx_1_tmp; proc_control_node_B.i5++)
    {
      for (proc_control_node_B.i4 = 0; proc_control_node_B.i4 < 130;
           proc_control_node_B.i4++) {
        proc_control_node_B.varargin_1_data[proc_control_node_B.i4 + 130 *
          proc_control_node_B.i5] = Jx_data[proc_control_node_B.i5 +
          proc_control_node_B.Jx_g[0] * proc_control_node_B.i4];
      }
    }

    proc_control_node_B.Jx_pw[0] = Jx_size[0];
    proc_control_node_B.Jx_pw[1] = 80;
    proc_control_node_mtimes(Jmv_data, proc_control_node_B.Jx_pw,
      proc_control_node_B.tmp_data_g, proc_control_node_B.tmp_size);
    proc_control_node_B.loop_ub_g = proc_control_node_B.tmp_size[0];
    for (proc_control_node_B.i5 = 0; proc_control_node_B.i5 <
         proc_control_node_B.loop_ub_g; proc_control_node_B.i5++) {
      for (proc_control_node_B.i4 = 0; proc_control_node_B.i4 < 24;
           proc_control_node_B.i4++) {
        proc_control_node_B.varargin_2_data[proc_control_node_B.i4 + 24 *
          proc_control_node_B.i5] =
          proc_control_node_B.tmp_data_g[proc_control_node_B.i5 +
          proc_control_node_B.tmp_size[0] * proc_control_node_B.i4];
      }
    }

    if (proc_control_node_B.tmp_size[0] != 0) {
      proc_control_node_B.empty_non_axis_sizes_idx_0 = 24;
    } else {
      proc_control_node_B.empty_non_axis_sizes_idx_0 = 0;
    }

    proc_control_node_B.loop_ub_g = *Je_size;
    if (0 <= proc_control_node_B.loop_ub_g - 1) {
      memcpy(&proc_control_node_B.Je_data[0], &Je_data[0],
             proc_control_node_B.loop_ub_g * sizeof(real_T));
    }

    proc_control_node_B.Jx_g[0] = (static_cast<int16_T>(*Je_size) != 0);
    proc_control_node_B.Jx_g[1] = static_cast<int16_T>(Jx_size[0]);
    Jc_size[0] = (proc_control_node_B.empty_non_axis_sizes_idx_0 +
                  proc_control_node_B.Jx_g[0]) + 130;
    Jc_size[1] = static_cast<int16_T>(Jx_size[0]);
    for (proc_control_node_B.i5 = 0; proc_control_node_B.i5 <
         proc_control_node_B.varargin_1_size_idx_1_tmp; proc_control_node_B.i5++)
    {
      for (proc_control_node_B.i4 = 0; proc_control_node_B.i4 < 130;
           proc_control_node_B.i4++) {
        Jc_data[proc_control_node_B.i4 + Jc_size[0] * proc_control_node_B.i5] =
          proc_control_node_B.varargin_1_data[proc_control_node_B.i4 + 130 *
          proc_control_node_B.i5];
      }
    }

    for (proc_control_node_B.i5 = 0; proc_control_node_B.i5 <
         proc_control_node_B.varargin_1_size_idx_1_tmp; proc_control_node_B.i5++)
    {
      for (proc_control_node_B.i4 = 0; proc_control_node_B.i4 <
           proc_control_node_B.empty_non_axis_sizes_idx_0;
           proc_control_node_B.i4++) {
        Jc_data[(proc_control_node_B.i4 + Jc_size[0] * proc_control_node_B.i5) +
          130] = proc_control_node_B.varargin_2_data[proc_control_node_B.i4 + 24
          * proc_control_node_B.i5];
      }
    }

    proc_control_node_B.loop_ub_g = static_cast<int16_T>(Jx_size[0]);
    if (0 <= proc_control_node_B.Jx_g[0] - 1) {
      for (proc_control_node_B.i5 = 0; proc_control_node_B.i5 <
           proc_control_node_B.loop_ub_g; proc_control_node_B.i5++) {
        Jc_data[(proc_control_node_B.empty_non_axis_sizes_idx_0 + Jc_size[0] *
                 proc_control_node_B.i5) + 130] =
          proc_control_node_B.Je_data[proc_control_node_B.Jx_g[0] *
          proc_control_node_B.i5];
      }
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_outputBounds(const real_T
  runtimedata_OutputMin[130], const real_T runtimedata_OutputMax[130], const
  real_T X[143], real_T e, real_T c_data[], int32_T c_size[2], real_T Jc_data[],
  int32_T Jc_size[2])
{
  boolean_T exitg1;
  boolean_T y;
  for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 130;
       proc_control_node_B.i_jf++) {
    proc_control_node_B.bv[proc_control_node_B.i_jf] = rtIsInf
      (runtimedata_OutputMin[proc_control_node_B.i_jf]);
  }

  proc_control_node_all(proc_control_node_B.bv, proc_control_node_B.x);
  y = true;
  proc_control_node_B.d_k = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.d_k < 13)) {
    if (!proc_control_node_B.x[proc_control_node_B.d_k]) {
      y = false;
      exitg1 = true;
    } else {
      proc_control_node_B.d_k++;
    }
  }

  if (y) {
    for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 130;
         proc_control_node_B.i_jf++) {
      proc_control_node_B.bv[proc_control_node_B.i_jf] = rtIsInf
        (runtimedata_OutputMax[proc_control_node_B.i_jf]);
    }

    proc_control_node_all(proc_control_node_B.bv, proc_control_node_B.x);
    proc_control_node_B.d_k = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.d_k < 13)) {
      if (!proc_control_node_B.x[proc_control_node_B.d_k]) {
        y = false;
        exitg1 = true;
      } else {
        proc_control_node_B.d_k++;
      }
    }
  }

  if (y) {
    c_size[0] = 0;
    c_size[1] = 0;
    Jc_size[0] = 0;
    Jc_size[1] = 0;
  } else {
    for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 260;
         proc_control_node_B.i_jf++) {
      proc_control_node_B.b_c_m[proc_control_node_B.i_jf] = 0.0;
      proc_control_node_B.icf_d[proc_control_node_B.i_jf] = true;
    }

    memset(&proc_control_node_B.Jx[0], 0, 33800U * sizeof(real_T));
    memset(&proc_control_node_B.Je[0], 0, 260U * sizeof(int8_T));
    for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 13;
         proc_control_node_B.i_jf++) {
      proc_control_node_B.ic_h[proc_control_node_B.i_jf] = static_cast<real_T>
        (proc_control_node_B.i_jf) + 1.0;
    }

    for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 10;
         proc_control_node_B.d_k++) {
      for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 13;
           proc_control_node_B.i_jf++) {
        proc_control_node_B.runtimedata_OutputMin[proc_control_node_B.i_jf] =
          runtimedata_OutputMin[10 * proc_control_node_B.i_jf +
          proc_control_node_B.d_k];
      }

      proc_control_node_isfinite_k(proc_control_node_B.runtimedata_OutputMin,
        proc_control_node_B.x);
      for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 13;
           proc_control_node_B.i_jf++) {
        proc_control_node_B.icf_d[static_cast<int32_T>
          (proc_control_node_B.ic_h[proc_control_node_B.i_jf]) - 1] =
          proc_control_node_B.x[proc_control_node_B.i_jf];
        proc_control_node_B.runtimedata_OutputMin[proc_control_node_B.i_jf] =
          runtimedata_OutputMax[10 * proc_control_node_B.i_jf +
          proc_control_node_B.d_k];
      }

      proc_control_node_isfinite_k(proc_control_node_B.runtimedata_OutputMin,
        proc_control_node_B.x);
      for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 13;
           proc_control_node_B.i_jf++) {
        proc_control_node_B.ic_jk =
          proc_control_node_B.ic_h[proc_control_node_B.i_jf];
        proc_control_node_B.icf_d[static_cast<int32_T>(proc_control_node_B.ic_jk
          + 13.0) - 1] = proc_control_node_B.x[proc_control_node_B.i_jf];
        proc_control_node_B.ic[proc_control_node_B.i_jf] = static_cast<int32_T>
          (proc_control_node_B.ic_jk) - 1;
        proc_control_node_B.ic[proc_control_node_B.i_jf + 13] =
          static_cast<int32_T>(proc_control_node_B.ic_jk + 13.0) - 1;
      }

      for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 26;
           proc_control_node_B.i_jf++) {
        proc_control_node_B.icf_o[proc_control_node_B.i_jf] =
          proc_control_node_B.icf_d[proc_control_node_B.ic[proc_control_node_B.i_jf]];
      }

      if (proc_control_node_any(proc_control_node_B.icf_o)) {
        memset(&proc_control_node_B.Ck[0], 0, 169U * sizeof(int8_T));
        for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k < 13;
             proc_control_node_B.c_k++) {
          proc_control_node_B.Ck[proc_control_node_B.c_k + 13 *
            proc_control_node_B.c_k] = 1;
          proc_control_node_B.b_c_m[static_cast<int32_T>
            (proc_control_node_B.ic_h[proc_control_node_B.c_k]) - 1] =
            (runtimedata_OutputMin[10 * proc_control_node_B.c_k +
             proc_control_node_B.d_k] - e) - X[(11 * proc_control_node_B.c_k +
            proc_control_node_B.d_k) + 1];
        }

        for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 13;
             proc_control_node_B.i_jf++) {
          proc_control_node_B.b_c_m[static_cast<int32_T>
            (proc_control_node_B.ic_h[proc_control_node_B.i_jf] + 13.0) - 1] =
            (X[(11 * proc_control_node_B.i_jf + proc_control_node_B.d_k) + 1] -
             runtimedata_OutputMax[10 * proc_control_node_B.i_jf +
             proc_control_node_B.d_k]) - e;
        }

        for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 169;
             proc_control_node_B.i_jf++) {
          proc_control_node_B.val[proc_control_node_B.i_jf] = static_cast<int8_T>
            (-proc_control_node_B.Ck[proc_control_node_B.i_jf]);
        }

        for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k < 13;
             proc_control_node_B.c_k++) {
          for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 13;
               proc_control_node_B.i_jf++) {
            proc_control_node_B.Jx[((static_cast<int32_T>
              (proc_control_node_B.ic_h[proc_control_node_B.i_jf]) + 260 *
              proc_control_node_B.c_k) + 3380 * proc_control_node_B.d_k) - 1] =
              proc_control_node_B.val[13 * proc_control_node_B.c_k +
              proc_control_node_B.i_jf];
          }
        }

        for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k < 13;
             proc_control_node_B.c_k++) {
          for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 13;
               proc_control_node_B.i_jf++) {
            proc_control_node_B.Jx[((static_cast<int32_T>
              (proc_control_node_B.ic_h[proc_control_node_B.i_jf] + 13.0) + 260 *
              proc_control_node_B.c_k) + 3380 * proc_control_node_B.d_k) - 1] =
              proc_control_node_B.Ck[13 * proc_control_node_B.c_k +
              proc_control_node_B.i_jf];
          }

          proc_control_node_B.Je[static_cast<int32_T>
            (proc_control_node_B.ic_h[proc_control_node_B.c_k]) - 1] = -1;
        }

        for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 13;
             proc_control_node_B.i_jf++) {
          proc_control_node_B.Je[static_cast<int32_T>
            (proc_control_node_B.ic_h[proc_control_node_B.i_jf] + 13.0) - 1] =
            -1;
        }
      }

      for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 13;
           proc_control_node_B.i_jf++) {
        proc_control_node_B.ic_h[proc_control_node_B.i_jf] += 26.0;
      }
    }

    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k < 260;
         proc_control_node_B.c_k++) {
      if (proc_control_node_B.icf_d[proc_control_node_B.c_k]) {
        proc_control_node_B.d_k++;
      }
    }

    proc_control_node_B.b_size_idx_0 = proc_control_node_B.d_k;
    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k < 260;
         proc_control_node_B.c_k++) {
      if (proc_control_node_B.icf_d[proc_control_node_B.c_k]) {
        proc_control_node_B.b_data_p[proc_control_node_B.d_k] =
          static_cast<int16_T>(proc_control_node_B.c_k + 1);
        proc_control_node_B.d_k++;
      }
    }

    for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf <
         proc_control_node_B.b_size_idx_0; proc_control_node_B.i_jf++) {
      proc_control_node_B.b_c_data[proc_control_node_B.i_jf] =
        proc_control_node_B.b_c_m[proc_control_node_B.b_data_p[proc_control_node_B.i_jf]
        - 1];
    }

    c_size[0] = proc_control_node_B.b_size_idx_0;
    c_size[1] = 1;
    if (0 <= proc_control_node_B.b_size_idx_0 - 1) {
      memcpy(&c_data[0], &proc_control_node_B.b_c_data[0],
             proc_control_node_B.b_size_idx_0 * sizeof(real_T));
    }

    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k < 260;
         proc_control_node_B.c_k++) {
      if (proc_control_node_B.icf_d[proc_control_node_B.c_k]) {
        proc_control_node_B.d_k++;
      }
    }

    proc_control_node_B.b_size_idx_0 = proc_control_node_B.d_k;
    proc_control_node_B.d_k = 0;
    for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k < 260;
         proc_control_node_B.c_k++) {
      if (proc_control_node_B.icf_d[proc_control_node_B.c_k]) {
        proc_control_node_B.d_data[proc_control_node_B.d_k] =
          static_cast<int16_T>(proc_control_node_B.c_k + 1);
        proc_control_node_B.d_k++;
      }
    }

    proc_control_node_B.Jx_size[0] = proc_control_node_B.b_size_idx_0;
    proc_control_node_B.Jx_size[1] = 13;
    proc_control_node_B.Jx_size[2] = 10;
    for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf < 10;
         proc_control_node_B.i_jf++) {
      for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 13;
           proc_control_node_B.d_k++) {
        for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k <
             proc_control_node_B.b_size_idx_0; proc_control_node_B.c_k++) {
          proc_control_node_B.Jx_data[(proc_control_node_B.c_k +
            proc_control_node_B.b_size_idx_0 * proc_control_node_B.d_k) +
            proc_control_node_B.b_size_idx_0 * 13 * proc_control_node_B.i_jf] =
            proc_control_node_B.Jx[((260 * proc_control_node_B.d_k +
            proc_control_node_B.d_data[proc_control_node_B.c_k]) + 3380 *
            proc_control_node_B.i_jf) - 1];
        }
      }

      for (proc_control_node_B.d_k = 0; proc_control_node_B.d_k < 8;
           proc_control_node_B.d_k++) {
        for (proc_control_node_B.c_k = 0; proc_control_node_B.c_k <
             proc_control_node_B.b_size_idx_0; proc_control_node_B.c_k++) {
          proc_control_node_B.tmp_data[(proc_control_node_B.c_k +
            proc_control_node_B.b_size_idx_0 * proc_control_node_B.d_k) +
            (proc_control_node_B.b_size_idx_0 << 3) * proc_control_node_B.i_jf] =
            0.0;
        }
      }
    }

    proc_control_node_B.b_c_size = proc_control_node_B.b_size_idx_0;
    for (proc_control_node_B.i_jf = 0; proc_control_node_B.i_jf <
         proc_control_node_B.b_size_idx_0; proc_control_node_B.i_jf++) {
      proc_control_node_B.b_c_data[proc_control_node_B.i_jf] =
        proc_control_node_B.Je[proc_control_node_B.d_data[proc_control_node_B.i_jf]
        - 1];
    }

    proc_cont_znlmpc_reformJacobian(proc_control_node_B.Jx_data,
      proc_control_node_B.Jx_size, proc_control_node_B.tmp_data,
      proc_control_node_B.b_c_data, &proc_control_node_B.b_c_size, Jc_data,
      Jc_size);
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_anon(const real_T
  runtimedata_x[13], const real_T runtimedata_OutputMin[130], const real_T
  runtimedata_OutputMax[130], const real_T z[155], real_T varargout_1_data[],
  int32_T varargout_1_size[2], real_T varargout_2[130], real_T varargout_3_data[],
  int32_T varargout_3_size[2], real_T varargout_4[20150])
{
  proc_control_node_znlmpc_getXUe(z, runtimedata_x, proc_control_node_B.X,
    proc_control_node_B.U_mv, &proc_control_node_B.e);
  proc_control_nod_stateEvolution(proc_control_node_B.X,
    proc_control_node_B.U_mv, varargout_2, varargout_4);
  proc_control_node_outputBounds(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_node_B.X, proc_control_node_B.e, proc_control_node_B.c_data_m,
    proc_control_node_B.c_size, proc_control_node_B.Jc_data,
    proc_control_node_B.Jc_size);
  proc_control_node_B.result = ((proc_control_node_B.c_size[0] != 0) &&
    (proc_control_node_B.c_size[1] != 0));
  if ((proc_control_node_B.Jc_size[0] != 0) && (proc_control_node_B.Jc_size[1]
       != 0)) {
    proc_control_node_B.c_result = proc_control_node_B.Jc_size[0];
  } else {
    proc_control_node_B.c_result = 0;
  }

  if (proc_control_node_B.result == 0) {
    proc_control_node_B.result_idx_0 = proc_control_node_B.c_size[0];
  } else if ((proc_control_node_B.c_size[0] != 0) &&
             (proc_control_node_B.c_size[1] != 0)) {
    proc_control_node_B.result_idx_0 = proc_control_node_B.c_size[0];
  } else {
    proc_control_node_B.result_idx_0 = 0;
  }

  varargout_1_size[0] = proc_control_node_B.result_idx_0;
  varargout_1_size[1] = proc_control_node_B.result;
  if ((0 <= proc_control_node_B.result - 1) && (0 <=
       proc_control_node_B.result_idx_0 - 1)) {
    memcpy(&varargout_1_data[0], &proc_control_node_B.c_data_m[0],
           proc_control_node_B.result_idx_0 * sizeof(real_T));
  }

  varargout_3_size[0] = proc_control_node_B.c_result;
  if (proc_control_node_B.c_result == 0) {
    varargout_3_size[1] = proc_control_node_B.Jc_size[1];
    proc_control_node_B.result = proc_control_node_B.Jc_size[1];
  } else if ((proc_control_node_B.Jc_size[0] != 0) &&
             (proc_control_node_B.Jc_size[1] != 0)) {
    varargout_3_size[1] = proc_control_node_B.Jc_size[1];
    proc_control_node_B.result = proc_control_node_B.Jc_size[1];
  } else {
    varargout_3_size[1] = 0;
    proc_control_node_B.result = 0;
  }

  proc_control_node_B.result_idx_0 = proc_control_node_B.c_result *
    proc_control_node_B.result;
  if (0 <= proc_control_node_B.result_idx_0 - 1) {
    memcpy(&varargout_3_data[0], &proc_control_node_B.Jc_data[0],
           proc_control_node_B.result_idx_0 * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_factoryConstruct(int32_T
  nVarMax, int32_T mConstrMax, int32_T mIneq, int32_T mNonlinIneq,
  s_SfTiiT1KRClFcMCE02xJjB_proc_T *obj)
{
  obj->nVarMax = nVarMax;
  obj->mNonlinIneq = mNonlinIneq;
  obj->mNonlinEq = 130;
  obj->mIneq = mIneq;
  obj->mEq = 130;
  obj->iNonIneq0 = (mIneq - mNonlinIneq) + 1;
  obj->iNonEq0 = 1;
  obj->sqpFval = 0.0;
  obj->sqpFval_old = 0.0;
  obj->cIneq.size = mIneq;
  obj->cIneq_old.size = mIneq;
  obj->grad.size = nVarMax;
  obj->grad_old.size = nVarMax;
  obj->FunctionEvaluations = 0;
  obj->sqpIterations = 0;
  obj->sqpExitFlag = 0;
  obj->lambdasqp.size = mConstrMax;
  if (0 <= mConstrMax - 1) {
    memset(&obj->lambdasqp.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->lambdaStopTest.size = mConstrMax;
  obj->lambdaStopTestPrev.size = mConstrMax;
  obj->steplength = 1.0;
  obj->delta_x.size = nVarMax;
  if (0 <= nVarMax - 1) {
    memset(&obj->delta_x.data[0], 0, nVarMax * sizeof(real_T));
  }

  obj->socDirection.size = nVarMax;
  obj->workingset_old.size = mConstrMax;
  if (mNonlinIneq > 0) {
    obj->JacCineqTrans_old.size[0] = nVarMax;
    obj->JacCineqTrans_old.size[1] = mNonlinIneq;
  } else {
    obj->JacCineqTrans_old.size[0] = 0;
    obj->JacCineqTrans_old.size[1] = 0;
  }

  obj->JacCeqTrans_old.size[0] = nVarMax;
  obj->JacCeqTrans_old.size[1] = 130;
  obj->gradLag.size = nVarMax;
  obj->delta_gradLag.size = nVarMax;
  obj->xstar.size = nVarMax;
  obj->fstar = 0.0;
  obj->firstorderopt = 0.0;
  obj->lambda.size = mConstrMax;
  if (0 <= mConstrMax - 1) {
    memset(&obj->lambda.data[0], 0, mConstrMax * sizeof(real_T));
  }

  obj->state = 0;
  obj->maxConstr = 0.0;
  obj->iterations = 0;
  obj->searchDir.size = nVarMax;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_cont_factoryConstruct_lnz4(int32_T
  MaxVars, int32_T *obj_grad_size, int32_T *obj_Hx_size, boolean_T
  *obj_hasLinear, int32_T *obj_nvar, int32_T *obj_maxVar, real_T *obj_beta,
  real_T *obj_rho, int32_T *obj_objtype, int32_T *obj_prev_objtype, int32_T
  *obj_prev_nvar, boolean_T *obj_prev_hasLinear, real_T *obj_gammaScalar)
{
  *obj_grad_size = MaxVars;
  *obj_Hx_size = MaxVars - 1;
  *obj_hasLinear = false;
  *obj_nvar = 0;
  *obj_maxVar = MaxVars;
  *obj_beta = 0.0;
  *obj_rho = 0.0;
  *obj_objtype = 3;
  *obj_prev_objtype = 3;
  *obj_prev_nvar = 0;
  *obj_prev_hasLinear = false;
  *obj_gammaScalar = 0.0;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_con_factoryConstruct_lnz42(int32_T
  mIneqMax, int32_T nVarMax, int32_T mConstrMax, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *obj)
{
  int32_T i;
  obj->mConstr = 0;
  obj->mConstrOrig = 0;
  obj->mConstrMax = mConstrMax;
  obj->nVar = 155;
  obj->nVarOrig = 155;
  obj->nVarMax = nVarMax;
  obj->ldA = nVarMax;
  obj->Aineq.size = mIneqMax * nVarMax;
  obj->bineq.size = mIneqMax;
  obj->Aeq.size = 130 * nVarMax;
  obj->lb.size = nVarMax;
  obj->ub.size = nVarMax;
  obj->indexLB.size = nVarMax;
  obj->indexUB.size = nVarMax;
  obj->indexFixed.size = nVarMax;
  obj->mEqRemoved = 0;
  obj->ATwset.size = nVarMax * mConstrMax;
  obj->bwset.size = mConstrMax;
  obj->nActiveConstr = 0;
  obj->maxConstrWorkspace.size = mConstrMax;
  for (i = 0; i < 5; i++) {
    obj->sizes[i] = 0;
    obj->sizesNormal[i] = 0;
    obj->sizesPhaseOne[i] = 0;
    obj->sizesRegularized[i] = 0;
    obj->sizesRegPhaseOne[i] = 0;
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdx[i] = 0;
    obj->isActiveIdxNormal[i] = 0;
    obj->isActiveIdxPhaseOne[i] = 0;
    obj->isActiveIdxRegularized[i] = 0;
    obj->isActiveIdxRegPhaseOne[i] = 0;
  }

  obj->isActiveConstr.size = mConstrMax;
  obj->Wid.size = mConstrMax;
  obj->Wlocalidx.size = mConstrMax;
  for (i = 0; i < 5; i++) {
    obj->nWConstr[i] = 0;
  }

  obj->probType = 3;
  obj->SLACK0 = 1.0E-5;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_loadProblem
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj, int32_T mIneq, int32_T mLinIneq, const
   real_T Aineq_data[], int32_T mLB, int32_T mUB, int32_T mFixed, int32_T
   mConstrMax)
{
  int32_T b_idx_col;
  int32_T i;
  b_idx_col = mIneq + mLB;
  i = ((b_idx_col + mUB) + mFixed) + 130;
  obj->mConstr = i;
  obj->mConstrOrig = i;
  obj->mConstrMax = mConstrMax;
  obj->sizes[0] = mFixed;
  obj->sizes[1] = 130;
  obj->sizes[2] = mIneq;
  obj->sizes[3] = mLB;
  obj->sizes[4] = mUB;
  for (i = 0; i < 5; i++) {
    obj->sizesNormal[i] = obj->sizes[i];
  }

  obj->sizesPhaseOne[0] = mFixed;
  obj->sizesPhaseOne[1] = 130;
  obj->sizesPhaseOne[2] = mIneq;
  obj->sizesPhaseOne[3] = mLB + 1;
  obj->sizesPhaseOne[4] = mUB;
  obj->sizesRegularized[0] = mFixed;
  obj->sizesRegularized[1] = 130;
  obj->sizesRegularized[2] = mIneq;
  obj->sizesRegularized[3] = b_idx_col + 260;
  obj->sizesRegularized[4] = mUB;
  obj->sizesRegPhaseOne[0] = mFixed;
  obj->sizesRegPhaseOne[1] = 130;
  obj->sizesRegPhaseOne[2] = mIneq;
  obj->sizesRegPhaseOne[3] = b_idx_col + 261;
  obj->sizesRegPhaseOne[4] = mUB;
  proc_control_node_B.x_tmp[0] = 1;
  proc_control_node_B.x_tmp[1] = mFixed;
  proc_control_node_B.x_tmp[2] = 130;
  proc_control_node_B.x_tmp[3] = mIneq;
  proc_control_node_B.x_tmp[4] = mLB;
  proc_control_node_B.x_tmp[5] = mUB;
  for (i = 0; i < 6; i++) {
    obj->isActiveIdxRegPhaseOne[i] = proc_control_node_B.x_tmp[i];
  }

  for (i = 0; i < 5; i++) {
    obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdx[i] = obj->isActiveIdxRegPhaseOne[i];
    obj->isActiveIdxRegPhaseOne[i] = proc_control_node_B.x_tmp[i];
  }

  for (i = 0; i < 5; i++) {
    obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdxNormal[i] = obj->isActiveIdxRegPhaseOne[i];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = mLB + 1;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (i = 0; i < 5; i++) {
    obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdxPhaseOne[i] = obj->isActiveIdxRegPhaseOne[i];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = b_idx_col + 260;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (i = 0; i < 5; i++) {
    obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
  }

  for (i = 0; i < 6; i++) {
    obj->isActiveIdxRegularized[i] = obj->isActiveIdxRegPhaseOne[i];
  }

  obj->isActiveIdxRegPhaseOne[0] = 1;
  obj->isActiveIdxRegPhaseOne[1] = mFixed;
  obj->isActiveIdxRegPhaseOne[2] = 130;
  obj->isActiveIdxRegPhaseOne[3] = mIneq;
  obj->isActiveIdxRegPhaseOne[4] = b_idx_col + 261;
  obj->isActiveIdxRegPhaseOne[5] = mUB;
  for (i = 0; i < 5; i++) {
    obj->isActiveIdxRegPhaseOne[i + 1] += obj->isActiveIdxRegPhaseOne[i];
  }

  if (mIneq > 0) {
    for (b_idx_col = 0; b_idx_col < mLinIneq; b_idx_col++) {
      for (i = 0; i < 155; i++) {
        obj->Aineq.data[i + obj->ldA * b_idx_col] = Aineq_data[mLinIneq * i +
          b_idx_col];
      }
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_quadraticObjective(const real_T
  runtimedata_lastMV[8], const real_T runtimedata_ref[130], const real_T
  runtimedata_OutputWeights[130], const real_T runtimedata_MVWeights[80], const
  real_T runtimedata_MVRateWeights[80], const real_T runtimedata_MVScaledTarget
  [80], const real_T X[143], const real_T U[88], real_T e, real_T *f, real_T
  gfx[130], real_T gfu[80], real_T *gfe)
{
  real_T wtYerr;
  int32_T i;
  int32_T i_0;
  int32_T runtimedata_OutputWeights_tmp;
  static const int8_T b[169] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  memset(&gfx[0], 0, 130U * sizeof(real_T));
  memset(&gfu[0], 0, 80U * sizeof(real_T));
  *f = 0.0;
  for (i_0 = 0; i_0 < 13; i_0++) {
    proc_control_node_B.ix[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i_0 = 0; i_0 < 8; i_0++) {
    proc_control_node_B.iu[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i_0 = 0; i_0 < 11; i_0++) {
    for (runtimedata_OutputWeights_tmp = 0; runtimedata_OutputWeights_tmp < 13;
         runtimedata_OutputWeights_tmp++) {
      proc_control_node_B.b_X_m[runtimedata_OutputWeights_tmp + 13 * i_0] = X[11
        * runtimedata_OutputWeights_tmp + i_0];
    }

    for (runtimedata_OutputWeights_tmp = 0; runtimedata_OutputWeights_tmp < 8;
         runtimedata_OutputWeights_tmp++) {
      proc_control_node_B.b_U_g[runtimedata_OutputWeights_tmp + (i_0 << 3)] = U
        [11 * runtimedata_OutputWeights_tmp + i_0];
    }
  }

  for (i = 0; i < 10; i++) {
    proc_control_node_B.wtYerr_a = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
      runtimedata_OutputWeights_tmp = 10 * i_0 + i;
      proc_control_node_B.runtimedata_OutputWeights_h =
        runtimedata_OutputWeights[runtimedata_OutputWeights_tmp];
      wtYerr = (proc_control_node_B.b_X_m[(i + 1) * 13 + i_0] -
                runtimedata_ref[runtimedata_OutputWeights_tmp]) *
        proc_control_node_B.runtimedata_OutputWeights_h;
      proc_control_node_B.wtYerr_a += wtYerr * wtYerr;
      proc_control_node_B.runtimedata_OutputWeights[i_0] =
        proc_control_node_B.runtimedata_OutputWeights_h * wtYerr;
    }

    *f += proc_control_node_B.wtYerr_a;
    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.wtYerr_a = 0.0;
      for (runtimedata_OutputWeights_tmp = 0; runtimedata_OutputWeights_tmp < 13;
           runtimedata_OutputWeights_tmp++) {
        proc_control_node_B.wtYerr_a += static_cast<real_T>(b[13 *
          runtimedata_OutputWeights_tmp + i_0]) *
          proc_control_node_B.runtimedata_OutputWeights[runtimedata_OutputWeights_tmp];
      }

      proc_control_node_B.gfx[i_0] = gfx[static_cast<int32_T>
        (proc_control_node_B.ix[i_0]) - 1] + proc_control_node_B.wtYerr_a;
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      gfx[static_cast<int32_T>(proc_control_node_B.ix[i_0]) - 1] =
        proc_control_node_B.gfx[i_0];
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.ix[i_0] += 13.0;
    }

    memcpy(&proc_control_node_B.umvk_d[0], &proc_control_node_B.b_U_g[i << 3],
           sizeof(real_T) << 3U);
    if (i + 1 == 1) {
      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.duk_j[i_0] = proc_control_node_B.umvk_d[i_0] -
          runtimedata_lastMV[i_0];
      }
    } else {
      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.duk_j[i_0] = proc_control_node_B.umvk_d[i_0] -
          proc_control_node_B.b_U_g[((i - 1) << 3) + i_0];
      }
    }

    proc_control_node_B.wtYerr_a = 0.0;
    for (i_0 = 0; i_0 < 8; i_0++) {
      runtimedata_OutputWeights_tmp = 10 * i_0 + i;
      proc_control_node_B.runtimedata_OutputWeights_h =
        runtimedata_MVWeights[runtimedata_OutputWeights_tmp];
      wtYerr = (proc_control_node_B.umvk_d[i_0] -
                runtimedata_MVScaledTarget[runtimedata_OutputWeights_tmp]) *
        proc_control_node_B.runtimedata_OutputWeights_h;
      proc_control_node_B.wtYerr_a += wtYerr * wtYerr;
      proc_control_node_B.gfu[i_0] = gfu[static_cast<int32_T>
        (proc_control_node_B.iu[i_0]) - 1] +
        proc_control_node_B.runtimedata_OutputWeights_h * wtYerr;
      proc_control_node_B.umvk_d[i_0] = wtYerr;
    }

    *f += proc_control_node_B.wtYerr_a;
    proc_control_node_B.wtYerr_a = 0.0;
    for (i_0 = 0; i_0 < 8; i_0++) {
      proc_control_node_B.runtimedata_OutputWeights_h =
        runtimedata_MVRateWeights[10 * i_0 + i];
      gfu[static_cast<int32_T>(proc_control_node_B.iu[i_0]) - 1] =
        proc_control_node_B.gfu[i_0];
      wtYerr = proc_control_node_B.runtimedata_OutputWeights_h *
        proc_control_node_B.duk_j[i_0];
      proc_control_node_B.wtYerr_a += wtYerr * wtYerr;
      proc_control_node_B.umvk_d[i_0] =
        proc_control_node_B.runtimedata_OutputWeights_h * wtYerr;
      proc_control_node_B.duk_j[i_0] = wtYerr;
    }

    *f += proc_control_node_B.wtYerr_a;
    for (i_0 = 0; i_0 < 8; i_0++) {
      proc_control_node_B.gfu[i_0] = gfu[static_cast<int32_T>
        (proc_control_node_B.iu[i_0]) - 1] + proc_control_node_B.umvk_d[i_0];
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      gfu[static_cast<int32_T>(proc_control_node_B.iu[i_0]) - 1] =
        proc_control_node_B.gfu[i_0];
    }

    if (i + 1 > 1) {
      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.gfu_tmp[i_0] = static_cast<int32_T>
          (proc_control_node_B.iu[i_0] - 8.0);
      }

      for (i_0 = 0; i_0 < 8; i_0++) {
        proc_control_node_B.gfu[i_0] = gfu[proc_control_node_B.gfu_tmp[i_0] - 1]
          - proc_control_node_B.umvk_d[i_0];
      }

      for (i_0 = 0; i_0 < 8; i_0++) {
        gfu[proc_control_node_B.gfu_tmp[i_0] - 1] = proc_control_node_B.gfu[i_0];
      }
    }

    for (i_0 = 0; i_0 < 8; i_0++) {
      proc_control_node_B.iu[i_0] += 8.0;
    }
  }

  *f += 100000.0 * e * e;
  for (i_0 = 0; i_0 < 130; i_0++) {
    gfx[i_0] *= 2.0;
  }

  for (i_0 = 0; i_0 < 80; i_0++) {
    gfu[i_0] *= 2.0;
  }

  *gfe = 200000.0 * e;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_anon_d(const real_T
  runtimedata_x[13], const real_T runtimedata_lastMV[8], const real_T
  runtimedata_ref[130], const real_T runtimedata_OutputWeights[130], const
  real_T runtimedata_MVWeights[80], const real_T runtimedata_MVRateWeights[80],
  const real_T runtimedata_MVScaledTarget[80], const real_T z[155], real_T
  *varargout_1, real_T varargout_2[155])
{
  static const int8_T b[1920] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 1 };

  proc_control_node_znlmpc_getXUe(z, runtimedata_x, proc_control_node_B.X_k,
    proc_control_node_B.U_j, &proc_control_node_B.e_d);
  proc_control_quadraticObjective(runtimedata_lastMV, runtimedata_ref,
    runtimedata_OutputWeights, runtimedata_MVWeights, runtimedata_MVRateWeights,
    runtimedata_MVScaledTarget, proc_control_node_B.X_k, proc_control_node_B.U_j,
    proc_control_node_B.e_d, varargout_1, proc_control_node_B.gfX,
    proc_control_node_B.gfU, &proc_control_node_B.gfE);
  for (proc_control_node_B.i18 = 0; proc_control_node_B.i18 < 24;
       proc_control_node_B.i18++) {
    proc_control_node_B.e_d = 0.0;
    proc_control_node_B.i20 = 0;
    for (proc_control_node_B.i19 = 0; proc_control_node_B.i19 < 80;
         proc_control_node_B.i19++) {
      proc_control_node_B.e_d += static_cast<real_T>(b[proc_control_node_B.i20 +
        proc_control_node_B.i18]) *
        proc_control_node_B.gfU[proc_control_node_B.i19];
      proc_control_node_B.i20 += 24;
    }

    proc_control_node_B.b_n[proc_control_node_B.i18] = proc_control_node_B.e_d;
  }

  memcpy(&varargout_2[0], &proc_control_node_B.gfX[0], 130U * sizeof(real_T));
  memcpy(&varargout_2[130], &proc_control_node_B.b_n[0], 24U * sizeof(real_T));
  varargout_2[154] = proc_control_node_B.gfE;
}

// Function for MATLAB Function: '<S216>/NLMPC'
int32_T proc_control_nodeModelClass::proc_contr_checkVectorNonFinite(int32_T N,
  const real_T vec_data[], int32_T iv0)
{
  real_T allFinite_tmp;
  int32_T idx_current;
  int32_T idx_end;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = iv0;
  idx_end = (iv0 + N) - 1;
  while (allFinite && (idx_current <= idx_end)) {
    allFinite_tmp = vec_data[idx_current - 1];
    allFinite = ((!rtIsInf(allFinite_tmp)) && (!rtIsNaN(allFinite_tmp)));
    idx_current++;
  }

  if (!allFinite) {
    idx_current -= 2;
    if (rtIsNaN(vec_data[idx_current])) {
      status = -3;
    } else if (vec_data[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::computeObjectiveAndUserGradient(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T x[155], real_T
  grad_workspace_data[], real_T *fval, int32_T *status)
{
  proc_control_node_anon_d(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x, fval,
    proc_control_node_B.varargout_2);
  memcpy(&grad_workspace_data[0], &proc_control_node_B.varargout_2[0], 155U *
         sizeof(real_T));
  if (rtIsInf(*fval) || rtIsNaN(*fval)) {
    if (rtIsNaN(*fval)) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  } else {
    *status = proc_contr_checkVectorNonFinite(155, grad_workspace_data, 1);
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
int32_T proc_control_nodeModelClass::proc_con_checkVectorNonFinite_g(const
  real_T vec[130])
{
  int32_T idx_current;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  idx_current = 0;
  while (allFinite && (idx_current + 1 <= 130)) {
    allFinite = ((!rtIsInf(vec[idx_current])) && (!rtIsNaN(vec[idx_current])));
    idx_current++;
  }

  if (!allFinite) {
    idx_current--;
    if (rtIsNaN(vec[idx_current])) {
      status = -3;
    } else if (vec[idx_current] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S216>/NLMPC'
int32_T proc_control_nodeModelClass::proc_contr_checkMatrixNonFinite(int32_T
  ncols, const real_T mat_data[], int32_T col0, int32_T ldm)
{
  int32_T col;
  int32_T col_end;
  int32_T idx_mat;
  int32_T row;
  int32_T status;
  boolean_T allFinite;
  status = 1;
  allFinite = true;
  row = -1;
  col = col0;
  col_end = (col0 + ncols) - 1;
  while (allFinite && (col <= col_end)) {
    row = -1;
    while (allFinite && (row + 2 <= 155)) {
      idx_mat = ((col - 1) * ldm + row) + 1;
      allFinite = ((!rtIsInf(mat_data[idx_mat])) && (!rtIsNaN(mat_data[idx_mat])));
      row++;
    }

    col++;
  }

  if (!allFinite) {
    idx_mat = (col - 2) * ldm + row;
    if (rtIsNaN(mat_data[idx_mat])) {
      status = -3;
    } else if (mat_data[idx_mat] < 0.0) {
      status = -1;
    } else {
      status = -2;
    }
  }

  return status;
}

// Function for MATLAB Function: '<S216>/NLMPC'
int32_T proc_control_nodeModelClass::computeConstraintsAndUserJacobi(const
  real_T obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[155],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130],
  real_T JacIneqTrans_workspace_data[], int32_T iJI_col, int32_T ldJI, real_T
  JacEqTrans_workspace_data[], int32_T ldJE)
{
  int32_T status;
  if (obj_mCineq > 0) {
    proc_control_node_anon(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_node_B.varargout_1_data_l,
      proc_control_node_B.varargout_1_size_e, proc_control_node_B.varargout_2_m,
      proc_control_node_B.varargout_3_data_c,
      proc_control_node_B.varargout_3_size_j, proc_control_node_B.varargout_4_b);
    proc_control_node_B.b_k = 0;
    while (proc_control_node_B.b_k <= obj_mCineq - 1) {
      Cineq_workspace_data[(ineq0 + proc_control_node_B.b_k) - 1] =
        proc_control_node_B.varargout_1_data_l[proc_control_node_B.b_k];
      proc_control_node_B.b_k++;
    }

    memcpy(&Ceq_workspace[0], &proc_control_node_B.varargout_2_m[0], 130U *
           sizeof(real_T));
    proc_control_node_B.b_k = 0;
    while (proc_control_node_B.b_k <= proc_control_node_B.varargout_3_size_j[0]
           - 1) {
      proc_control_node_B.c_idx_col = 0;
      while (proc_control_node_B.c_idx_col <=
             proc_control_node_B.varargout_3_size_j[1] - 1) {
        JacIneqTrans_workspace_data[proc_control_node_B.b_k + ldJI * ((iJI_col +
          proc_control_node_B.c_idx_col) - 1)] =
          proc_control_node_B.varargout_3_data_c[proc_control_node_B.b_k +
          proc_control_node_B.varargout_3_size_j[0] *
          proc_control_node_B.c_idx_col];
        proc_control_node_B.c_idx_col++;
      }

      proc_control_node_B.b_k++;
    }

    for (proc_control_node_B.b_k = 0; proc_control_node_B.b_k < 155;
         proc_control_node_B.b_k++) {
      for (proc_control_node_B.c_idx_col = 0; proc_control_node_B.c_idx_col <
           130; proc_control_node_B.c_idx_col++) {
        JacEqTrans_workspace_data[proc_control_node_B.b_k + ldJE *
          proc_control_node_B.c_idx_col] = proc_control_node_B.varargout_4_b[155
          * proc_control_node_B.c_idx_col + proc_control_node_B.b_k];
      }
    }
  } else {
    proc_control_node_anon(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
      proc_control_node_B.varargout_1_data_l,
      proc_control_node_B.varargout_1_size_e, proc_control_node_B.varargout_2_m,
      proc_control_node_B.varargout_3_data_c,
      proc_control_node_B.varargout_3_size_j, proc_control_node_B.varargout_4_b);
    memcpy(&Ceq_workspace[0], &proc_control_node_B.varargout_2_m[0], 130U *
           sizeof(real_T));
    for (proc_control_node_B.b_k = 0; proc_control_node_B.b_k < 155;
         proc_control_node_B.b_k++) {
      for (proc_control_node_B.c_idx_col = 0; proc_control_node_B.c_idx_col <
           130; proc_control_node_B.c_idx_col++) {
        JacEqTrans_workspace_data[proc_control_node_B.b_k + ldJE *
          proc_control_node_B.c_idx_col] = proc_control_node_B.varargout_4_b[155
          * proc_control_node_B.c_idx_col + proc_control_node_B.b_k];
      }
    }
  }

  status = proc_contr_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
    ineq0);
  if (status == 1) {
    status = proc_con_checkVectorNonFinite_g(Ceq_workspace);
    if (status == 1) {
      status = proc_contr_checkMatrixNonFinite(obj_mCineq,
        JacIneqTrans_workspace_data, iJI_col, ldJI);
      if (status == 1) {
        status = proc_contr_checkMatrixNonFinite(130, JacEqTrans_workspace_data,
          1, ldJE);
      }
    }
  }

  return status;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::evalObjAndConstrAndDerivatives(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[155],
  real_T grad_workspace_data[], real_T Cineq_workspace_data[], int32_T ineq0,
  real_T Ceq_workspace[130], real_T JacIneqTrans_workspace_data[], int32_T
  iJI_col, int32_T ldJI, real_T JacEqTrans_workspace_data[], int32_T ldJE,
  real_T *fval, int32_T *status)
{
  computeObjectiveAndUserGradient(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x,
    grad_workspace_data, fval, status);
  if (*status == 1) {
    *status = computeConstraintsAndUserJacobi(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1,
      obj_mCineq, x, Cineq_workspace_data, ineq0, Ceq_workspace,
      JacIneqTrans_workspace_data, iJI_col, ldJI, JacEqTrans_workspace_data,
      ldJE);
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_c_updateWorkingSetForNewQP(const real_T
  xk[155], s_YaC65yvYSxJoOs4cRNYgnE_proc_T *WorkingSet, int32_T mIneq, const
  real_T cIneq_data[], const real_T cEq[130], int32_T mLB, const real_T lb[155],
  int32_T mUB, int32_T mFixed)
{
  int32_T b_idx;
  int32_T iEq0;
  int32_T iw0;
  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (b_idx = 0; b_idx < 130; b_idx++) {
    WorkingSet->beq[b_idx] = -cEq[b_idx];
    WorkingSet->bwset.data[mFixed + b_idx] = WorkingSet->beq[b_idx];
    memcpy(&WorkingSet->ATwset.data[iw0], &WorkingSet->Aeq.data[iEq0], 155U *
           sizeof(real_T));
    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (b_idx = 0; b_idx < mIneq; b_idx++) {
    WorkingSet->bineq.data[b_idx] = -cIneq_data[b_idx];
  }

  for (b_idx = 0; b_idx < mLB; b_idx++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[b_idx] - 1] = -lb
      [WorkingSet->indexLB.data[b_idx] - 1] + xk[WorkingSet->indexLB.data[b_idx]
      - 1];
  }

  for (b_idx = 0; b_idx < mUB; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[b_idx] - 1];
  }

  for (b_idx = 0; b_idx < mFixed; b_idx++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[b_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[b_idx] - 1];
    WorkingSet->bwset.data[b_idx] = (rtInf) - xk[WorkingSet->
      indexFixed.data[b_idx] - 1];
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_co_modifyOverheadPhaseOne_
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj)
{
  int32_T idx;
  int32_T idxEq;
  for (idx = 0; idx < obj->sizes[0]; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * idx) - 1] = 0.0;
  }

  for (idx = 0; idx < 130; idx++) {
    idxEq = (obj->ldA * idx + obj->nVar) - 1;
    obj->Aeq.data[idxEq] = 0.0;
    obj->ATwset.data[idxEq + obj->ldA * (obj->isActiveIdx[1] - 1)] = 0.0;
  }

  for (idx = 0; idx < obj->sizes[2]; idx++) {
    obj->Aineq.data[(obj->nVar + obj->ldA * idx) - 1] = -1.0;
  }

  obj->indexLB.data[obj->sizes[3] - 1] = obj->nVar;
  obj->lb.data[obj->nVar - 1] = 1.0E-5;
  for (idx = obj->isActiveIdx[2]; idx <= obj->nActiveConstr; idx++) {
    obj->ATwset.data[(obj->nVar + obj->ldA * (idx - 1)) - 1] = -1.0;
  }

  if (obj->nWConstr[4] > 0) {
    for (idx = 0; idx <= obj->sizesNormal[4]; idx++) {
      obj->isActiveConstr.data[(obj->isActiveIdx[4] + idx) - 1] = false;
    }
  }

  obj->isActiveConstr.data[obj->isActiveIdx[4] - 2] = false;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_setProblemType
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj, int32_T PROBLEM_TYPE)
{
  int32_T d_idx_row;
  int32_T e_idx_row;
  switch (PROBLEM_TYPE) {
   case 3:
    obj->nVar = 155;
    obj->mConstr = obj->mConstrOrig;
    if (obj->nWConstr[4] > 0) {
      proc_control_node_B.mIneq_f = -1;
      while (proc_control_node_B.mIneq_f + 1 <= obj->sizesNormal[4] - 1) {
        obj->isActiveConstr.data[obj->isActiveIdxNormal[4] +
          proc_control_node_B.mIneq_f] = obj->isActiveConstr.data
          [obj->isActiveIdx[4] + proc_control_node_B.mIneq_f];
        proc_control_node_B.mIneq_f++;
      }
    }

    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 5;
         proc_control_node_B.colOffsetAineq++) {
      obj->sizes[proc_control_node_B.colOffsetAineq] = obj->
        sizesNormal[proc_control_node_B.colOffsetAineq];
    }

    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 6;
         proc_control_node_B.colOffsetAineq++) {
      obj->isActiveIdx[proc_control_node_B.colOffsetAineq] =
        obj->isActiveIdxNormal[proc_control_node_B.colOffsetAineq];
    }
    break;

   case 1:
    obj->nVar = 156;
    obj->mConstr = obj->mConstrOrig + 1;
    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 5;
         proc_control_node_B.colOffsetAineq++) {
      obj->sizes[proc_control_node_B.colOffsetAineq] = obj->
        sizesPhaseOne[proc_control_node_B.colOffsetAineq];
    }

    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 6;
         proc_control_node_B.colOffsetAineq++) {
      obj->isActiveIdx[proc_control_node_B.colOffsetAineq] =
        obj->isActiveIdxPhaseOne[proc_control_node_B.colOffsetAineq];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    break;

   case 2:
    obj->nVar = obj->nVarMax - 1;
    obj->mConstr = obj->mConstrMax - 1;
    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 5;
         proc_control_node_B.colOffsetAineq++) {
      obj->sizes[proc_control_node_B.colOffsetAineq] = obj->
        sizesRegularized[proc_control_node_B.colOffsetAineq];
    }

    if (obj->probType != 4) {
      proc_control_node_B.mIneq_f = obj->sizes[2] + 155;
      proc_control_node_B.offsetEq1 = obj->sizes[2];
      proc_control_node_B.offsetEq2 = obj->sizes[2];
      proc_control_node_B.colOffsetAineq = 0;
      while (proc_control_node_B.colOffsetAineq <= obj->sizes[0] - 1) {
        proc_control_node_B.colOffsetATw = obj->ldA *
          proc_control_node_B.colOffsetAineq;
        proc_control_node_B.colOffsetAeq = 156;
        while (proc_control_node_B.colOffsetAeq <= obj->nVar) {
          obj->ATwset.data[(proc_control_node_B.colOffsetAeq +
                            proc_control_node_B.colOffsetATw) - 1] = 0.0;
          proc_control_node_B.colOffsetAeq++;
        }

        proc_control_node_B.colOffsetAineq++;
      }

      proc_control_node_B.colOffsetATw = 0;
      while (proc_control_node_B.colOffsetATw <= proc_control_node_B.mIneq_f -
             156) {
        proc_control_node_B.colOffsetAineq = obj->ldA *
          proc_control_node_B.colOffsetATw - 1;
        for (d_idx_row = 156; d_idx_row <= proc_control_node_B.colOffsetATw +
             155; d_idx_row++) {
          obj->Aineq.data[d_idx_row + proc_control_node_B.colOffsetAineq] = 0.0;
        }

        obj->Aineq.data[(proc_control_node_B.colOffsetATw +
                         proc_control_node_B.colOffsetAineq) + 156] = -1.0;
        proc_control_node_B.colOffsetAeq = proc_control_node_B.colOffsetATw +
          157;
        while (proc_control_node_B.colOffsetAeq <= obj->nVar) {
          obj->Aineq.data[proc_control_node_B.colOffsetAeq +
            proc_control_node_B.colOffsetAineq] = 0.0;
          proc_control_node_B.colOffsetAeq++;
        }

        proc_control_node_B.colOffsetATw++;
      }

      for (proc_control_node_B.colOffsetAineq = 0;
           proc_control_node_B.colOffsetAineq < 130;
           proc_control_node_B.colOffsetAineq++) {
        proc_control_node_B.colOffsetAeq = obj->ldA *
          proc_control_node_B.colOffsetAineq - 1;
        proc_control_node_B.colOffsetATw = (obj->isActiveIdx[1] - 1) * obj->ldA
          + proc_control_node_B.colOffsetAeq;
        for (d_idx_row = 156; d_idx_row <= proc_control_node_B.mIneq_f;
             d_idx_row++) {
          obj->Aeq.data[d_idx_row + proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[d_idx_row + proc_control_node_B.colOffsetATw] = 0.0;
        }

        d_idx_row = proc_control_node_B.mIneq_f +
          proc_control_node_B.colOffsetAineq;
        for (e_idx_row = proc_control_node_B.offsetEq1 + 156; e_idx_row <=
             d_idx_row; e_idx_row++) {
          obj->Aeq.data[e_idx_row + proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[e_idx_row + proc_control_node_B.colOffsetATw] = 0.0;
        }

        obj->Aeq.data[(d_idx_row + proc_control_node_B.colOffsetAeq) + 1] = -1.0;
        obj->ATwset.data[(d_idx_row + proc_control_node_B.colOffsetATw) + 1] =
          -1.0;
        for (d_idx_row = (proc_control_node_B.offsetEq1 +
                          proc_control_node_B.colOffsetAineq) + 157; d_idx_row <=
             proc_control_node_B.mIneq_f + 130; d_idx_row++) {
          obj->Aeq.data[d_idx_row + proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[d_idx_row + proc_control_node_B.colOffsetATw] = 0.0;
        }

        d_idx_row = proc_control_node_B.mIneq_f +
          proc_control_node_B.colOffsetAineq;
        for (e_idx_row = proc_control_node_B.offsetEq2 + 286; e_idx_row <=
             d_idx_row + 130; e_idx_row++) {
          obj->Aeq.data[e_idx_row + proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[e_idx_row + proc_control_node_B.colOffsetATw] = 0.0;
        }

        obj->Aeq.data[(d_idx_row + proc_control_node_B.colOffsetAeq) + 131] =
          1.0;
        obj->ATwset.data[(d_idx_row + proc_control_node_B.colOffsetATw) + 131] =
          1.0;
        for (d_idx_row = (proc_control_node_B.offsetEq2 +
                          proc_control_node_B.colOffsetAineq) + 287; d_idx_row <=
             obj->nVar; d_idx_row++) {
          obj->Aeq.data[d_idx_row + proc_control_node_B.colOffsetAeq] = 0.0;
          obj->ATwset.data[d_idx_row + proc_control_node_B.colOffsetATw] = 0.0;
        }
      }

      proc_control_node_B.offsetEq1 = 155;
      proc_control_node_B.offsetEq2 = obj->sizesNormal[3];
      while (proc_control_node_B.offsetEq2 + 1 <= obj->sizesRegularized[3]) {
        proc_control_node_B.offsetEq1++;
        obj->indexLB.data[proc_control_node_B.offsetEq2] =
          proc_control_node_B.offsetEq1;
        proc_control_node_B.offsetEq2++;
      }

      if (obj->nWConstr[4] > 0) {
        proc_control_node_B.offsetEq1 = -1;
        while (proc_control_node_B.offsetEq1 + 1 <= obj->sizesRegularized[4] - 1)
        {
          obj->isActiveConstr.data[(obj->isActiveIdxRegularized[4] +
            proc_control_node_B.offsetEq1) + 1] = obj->isActiveConstr.data
            [obj->isActiveIdx[4] + proc_control_node_B.offsetEq1];
          proc_control_node_B.offsetEq1++;
        }
      }

      proc_control_node_B.offsetEq1 = obj->isActiveIdx[4];
      while (proc_control_node_B.offsetEq1 <= obj->isActiveIdxRegularized[4] - 1)
      {
        obj->isActiveConstr.data[proc_control_node_B.offsetEq1 - 1] = false;
        proc_control_node_B.offsetEq1++;
      }

      proc_control_node_B.offsetEq1 = 156;
      while (proc_control_node_B.offsetEq1 <= proc_control_node_B.mIneq_f + 260)
      {
        obj->lb.data[proc_control_node_B.offsetEq1 - 1] = 0.0;
        proc_control_node_B.offsetEq1++;
      }

      proc_control_node_B.mIneq_f = obj->isActiveIdx[2] - 1;
      while (proc_control_node_B.mIneq_f + 1 <= obj->nActiveConstr) {
        proc_control_node_B.colOffsetATw = obj->ldA *
          proc_control_node_B.mIneq_f - 1;
        if (obj->Wid.data[proc_control_node_B.mIneq_f] == 3) {
          proc_control_node_B.offsetEq1 = 156;
          while (proc_control_node_B.offsetEq1 <= obj->
                 Wlocalidx.data[proc_control_node_B.mIneq_f] + 154) {
            obj->ATwset.data[proc_control_node_B.offsetEq1 +
              proc_control_node_B.colOffsetATw] = 0.0;
            proc_control_node_B.offsetEq1++;
          }

          obj->ATwset.data[(obj->Wlocalidx.data[proc_control_node_B.mIneq_f] +
                            proc_control_node_B.colOffsetATw) + 155] = -1.0;
          proc_control_node_B.offsetEq1 = obj->
            Wlocalidx.data[proc_control_node_B.mIneq_f] + 156;
          while (proc_control_node_B.offsetEq1 <= obj->nVar) {
            obj->ATwset.data[proc_control_node_B.offsetEq1 +
              proc_control_node_B.colOffsetATw] = 0.0;
            proc_control_node_B.offsetEq1++;
          }
        } else {
          proc_control_node_B.offsetEq1 = 156;
          while (proc_control_node_B.offsetEq1 <= obj->nVar) {
            obj->ATwset.data[proc_control_node_B.offsetEq1 +
              proc_control_node_B.colOffsetATw] = 0.0;
            proc_control_node_B.offsetEq1++;
          }
        }

        proc_control_node_B.mIneq_f++;
      }
    }

    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 6;
         proc_control_node_B.colOffsetAineq++) {
      obj->isActiveIdx[proc_control_node_B.colOffsetAineq] =
        obj->isActiveIdxRegularized[proc_control_node_B.colOffsetAineq];
    }
    break;

   default:
    obj->nVar = obj->nVarMax;
    obj->mConstr = obj->mConstrMax;
    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 5;
         proc_control_node_B.colOffsetAineq++) {
      obj->sizes[proc_control_node_B.colOffsetAineq] = obj->
        sizesRegPhaseOne[proc_control_node_B.colOffsetAineq];
    }

    for (proc_control_node_B.colOffsetAineq = 0;
         proc_control_node_B.colOffsetAineq < 6;
         proc_control_node_B.colOffsetAineq++) {
      obj->isActiveIdx[proc_control_node_B.colOffsetAineq] =
        obj->isActiveIdxRegPhaseOne[proc_control_node_B.colOffsetAineq];
    }

    proc_co_modifyOverheadPhaseOne_(obj);
    break;
  }

  obj->probType = PROBLEM_TYPE;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_initActiveSet
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj)
{
  proc_control_nod_setProblemType(obj, 3);
  proc_control_node_B.nWFixed = obj->isActiveIdx[2];
  while (proc_control_node_B.nWFixed <= obj->mConstrMax) {
    obj->isActiveConstr.data[proc_control_node_B.nWFixed - 1] = false;
    proc_control_node_B.nWFixed++;
  }

  obj->nWConstr[0] = obj->sizes[0];
  obj->nWConstr[1] = 130;
  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + 130;
  proc_control_node_B.nWFixed = obj->sizes[0];
  proc_control_node_B.b_idx_local = 0;
  while (proc_control_node_B.b_idx_local <= proc_control_node_B.nWFixed - 1) {
    obj->Wid.data[proc_control_node_B.b_idx_local] = 1;
    obj->Wlocalidx.data[proc_control_node_B.b_idx_local] =
      proc_control_node_B.b_idx_local + 1;
    obj->isActiveConstr.data[proc_control_node_B.b_idx_local] = true;
    proc_control_node_B.iAeq0 = obj->ldA * proc_control_node_B.b_idx_local - 1;
    proc_control_node_B.iATw0 = 0;
    while (proc_control_node_B.iATw0 <= obj->
           indexFixed.data[proc_control_node_B.b_idx_local] - 2) {
      obj->ATwset.data[(proc_control_node_B.iATw0 + proc_control_node_B.iAeq0) +
        1] = 0.0;
      proc_control_node_B.iATw0++;
    }

    obj->ATwset.data[obj->indexFixed.data[proc_control_node_B.b_idx_local] +
      proc_control_node_B.iAeq0] = 1.0;
    proc_control_node_B.iATw0 = obj->
      indexFixed.data[proc_control_node_B.b_idx_local] + 1;
    while (proc_control_node_B.iATw0 <= obj->nVar) {
      obj->ATwset.data[proc_control_node_B.iATw0 + proc_control_node_B.iAeq0] =
        0.0;
      proc_control_node_B.iATw0++;
    }

    obj->bwset.data[proc_control_node_B.b_idx_local] = obj->ub.data
      [obj->indexFixed.data[proc_control_node_B.b_idx_local] - 1];
    proc_control_node_B.b_idx_local++;
  }

  for (proc_control_node_B.b_idx_local = 0; proc_control_node_B.b_idx_local <
       130; proc_control_node_B.b_idx_local++) {
    proc_control_node_B.idx_global = proc_control_node_B.nWFixed +
      proc_control_node_B.b_idx_local;
    obj->Wid.data[proc_control_node_B.idx_global] = 2;
    obj->Wlocalidx.data[proc_control_node_B.idx_global] =
      proc_control_node_B.b_idx_local + 1;
    obj->isActiveConstr.data[proc_control_node_B.idx_global] = true;
    proc_control_node_B.iAeq0 = obj->ldA * proc_control_node_B.b_idx_local;
    proc_control_node_B.iATw0 = obj->ldA * proc_control_node_B.idx_global;
    proc_control_node_B.c_i_a = 0;
    while (proc_control_node_B.c_i_a <= obj->nVar - 1) {
      obj->ATwset.data[proc_control_node_B.iATw0 + proc_control_node_B.c_i_a] =
        obj->Aeq.data[proc_control_node_B.iAeq0 + proc_control_node_B.c_i_a];
      proc_control_node_B.c_i_a++;
    }

    obj->bwset.data[proc_control_node_B.idx_global] = obj->
      beq[proc_control_node_B.b_idx_local];
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_contro_factoryConstruct_ln(int32_T
  maxRows, int32_T maxCols, int32_T *obj_ldq, int32_T obj_QR_size[2], real_T
  obj_Q_data[], int32_T obj_Q_size[2], int32_T obj_jpvt_data[], int32_T
  *obj_jpvt_size, int32_T *obj_mrows, int32_T *obj_ncols, int32_T *obj_tau_size,
  int32_T *obj_minRowCol, boolean_T *obj_usedPivoting)
{
  int32_T loop_ub;
  *obj_ldq = maxRows;
  obj_QR_size[0] = maxRows;
  obj_QR_size[1] = maxCols;
  obj_Q_size[0] = maxRows;
  obj_Q_size[1] = maxRows;
  loop_ub = maxRows * maxRows - 1;
  if (0 <= loop_ub) {
    memset(&obj_Q_data[0], 0, (loop_ub + 1) * sizeof(real_T));
  }

  *obj_jpvt_size = maxCols;
  if (0 <= maxCols - 1) {
    memset(&obj_jpvt_data[0], 0, maxCols * sizeof(int32_T));
  }

  *obj_mrows = 0;
  *obj_ncols = 0;
  if (maxRows < maxCols) {
    *obj_tau_size = maxRows;
  } else {
    *obj_tau_size = maxCols;
  }

  *obj_minRowCol = 0;
  *obj_usedPivoting = false;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_contr_factoryConstruct_lnz(int32_T
  MaxDims, int32_T obj_FMat_size[2], int32_T *obj_ldm, int32_T *obj_ndims,
  int32_T *obj_info, real_T *obj_scaleFactor, boolean_T *obj_ConvexCheck, real_T
  *obj_regTol_, real_T *obj_workspace_, real_T *obj_workspace2_)
{
  obj_FMat_size[0] = MaxDims;
  obj_FMat_size[1] = MaxDims;
  *obj_ldm = MaxDims;
  *obj_ndims = 0;
  *obj_info = 0;
  *obj_scaleFactor = 0.0;
  *obj_ConvexCheck = true;
  *obj_regTol_ = (rtInf);
  *obj_workspace_ = (rtInf);
  *obj_workspace2_ = (rtInf);
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv(int32_T m, int32_T n,
  const real_T A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    proc_control_node_B.ix_gk = ix0;
    c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= c)) || ((lda < 0) && (iac >= c))) {
      proc_control_node_B.iy_hq = 0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        y_data[proc_control_node_B.iy_hq] += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_gk - 1];
        proc_control_node_B.iy_hq++;
      }

      proc_control_node_B.ix_gk++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_computeGradLag(real_T
  workspace_data[], int32_T ldA, int32_T nVar, const real_T grad_data[], int32_T
  mIneq, const real_T AineqTrans_data[], const real_T AeqTrans_data[], const
  int32_T finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[],
  int32_T mLB, const int32_T finiteUB_data[], int32_T mUB, const real_T
  lambda_data[])
{
  proc_control_node_B.iL0_p = 0;
  while (proc_control_node_B.iL0_p <= nVar - 1) {
    workspace_data[proc_control_node_B.iL0_p] =
      grad_data[proc_control_node_B.iL0_p];
    proc_control_node_B.iL0_p++;
  }

  proc_control_node_B.iL0_p = 0;
  while (proc_control_node_B.iL0_p <= mFixed - 1) {
    workspace_data[finiteFixed_data[proc_control_node_B.iL0_p] - 1] +=
      lambda_data[proc_control_node_B.iL0_p];
    proc_control_node_B.iL0_p++;
  }

  proc_control_node_xgemv(nVar, 130, AeqTrans_data, ldA, lambda_data, mFixed + 1,
    workspace_data);
  proc_control_node_xgemv(nVar, mIneq, AineqTrans_data, ldA, lambda_data, mFixed
    + 131, workspace_data);
  proc_control_node_B.iL0_p = (mFixed + mIneq) + 130;
  proc_control_node_B.c_idx_k = 0;
  while (proc_control_node_B.c_idx_k <= mLB - 1) {
    workspace_data[finiteLB_data[proc_control_node_B.c_idx_k] - 1] -=
      lambda_data[proc_control_node_B.iL0_p];
    proc_control_node_B.iL0_p++;
    proc_control_node_B.c_idx_k++;
  }

  proc_control_node_B.c_idx_k = 0;
  while (proc_control_node_B.c_idx_k <= mUB - 1) {
    workspace_data[finiteUB_data[proc_control_node_B.c_idx_k] - 1] +=
      lambda_data[proc_control_node_B.iL0_p];
    proc_control_node_B.iL0_p++;
    proc_control_node_B.c_idx_k++;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
real_T proc_control_nodeModelClass::proc_con_computePrimalFeasError(const real_T
  x[155], int32_T mLinIneq, int32_T mNonlinIneq, const real_T cIneq_data[],
  const real_T cEq[130], const int32_T finiteLB_data[], int32_T mLB, const
  real_T lb[155], const int32_T finiteUB_data[], int32_T mUB)
{
  real_T feasError;
  real_T u1;
  int32_T b_idx;
  int32_T mIneq;
  feasError = 0.0;
  mIneq = mNonlinIneq + mLinIneq;
  for (b_idx = 0; b_idx < 130; b_idx++) {
    u1 = fabs(cEq[b_idx]);
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  for (b_idx = 0; b_idx < mIneq; b_idx++) {
    u1 = cIneq_data[b_idx];
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  for (mIneq = 0; mIneq < mLB; mIneq++) {
    u1 = lb[finiteLB_data[mIneq] - 1] - x[finiteLB_data[mIneq] - 1];
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  for (mIneq = 0; mIneq < mUB; mIneq++) {
    u1 = x[finiteUB_data[mIneq] - 1] - (rtInf);
    if ((!(feasError > u1)) && (!rtIsNaN(u1))) {
      feasError = u1;
    }
  }

  return feasError;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_contr_computeDualFeasError(int32_T nVar,
  const real_T gradLag_data[], boolean_T *gradOK, real_T *val)
{
  real_T u1;
  int32_T b_idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!rtIsInf(gradLag_data[b_idx])) && (!rtIsNaN(gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      u1 = fabs(gradLag_data[b_idx]);
      if ((!(*val > u1)) && (!rtIsNaN(u1))) {
        *val = u1;
      }

      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_saveJacobian
  (s_SfTiiT1KRClFcMCE02xJjB_proc_T *obj, int32_T nVar, int32_T mIneq, const
   real_T JacCineqTrans_data[], int32_T ineqCol0, const real_T JacCeqTrans_data[],
   int32_T ldJ)
{
  int32_T b;
  int32_T idx_col;
  int32_T loop_ub_tmp;
  int32_T y_size_idx_0;
  int32_T y_size_idx_1;
  proc_control_node_B.iCol = (ineqCol0 - 1) * ldJ;
  proc_control_node_B.iCol_old = -1;
  b = mIneq - ineqCol0;
  for (idx_col = 0; idx_col <= b; idx_col++) {
    y_size_idx_0 = obj->JacCineqTrans_old.size[0];
    y_size_idx_1 = obj->JacCineqTrans_old.size[1];
    loop_ub_tmp = obj->JacCineqTrans_old.size[0] * obj->JacCineqTrans_old.size[1];
    if (0 <= loop_ub_tmp - 1) {
      memcpy(&proc_control_node_B.y_data[0], &obj->JacCineqTrans_old.data[0],
             loop_ub_tmp * sizeof(real_T));
    }

    for (loop_ub_tmp = 1; loop_ub_tmp - 1 < nVar; loop_ub_tmp++) {
      proc_control_node_B.y_data[proc_control_node_B.iCol_old + loop_ub_tmp] =
        JacCineqTrans_data[(proc_control_node_B.iCol + loop_ub_tmp) - 1];
    }

    obj->JacCineqTrans_old.size[1] = y_size_idx_1;
    y_size_idx_0 *= y_size_idx_1;
    if (0 <= y_size_idx_0 - 1) {
      memcpy(&obj->JacCineqTrans_old.data[0], &proc_control_node_B.y_data[0],
             y_size_idx_0 * sizeof(real_T));
    }

    proc_control_node_B.iCol += ldJ;
    proc_control_node_B.iCol_old += ldJ;
  }

  proc_control_node_B.iCol = -1;
  proc_control_node_B.iCol_old = -1;
  for (b = 0; b < 130; b++) {
    for (idx_col = 1; idx_col - 1 < nVar; idx_col++) {
      obj->JacCeqTrans_old.data[proc_control_node_B.iCol_old + idx_col] =
        JacCeqTrans_data[proc_control_node_B.iCol + idx_col];
    }

    proc_control_node_B.iCol += ldJ;
    proc_control_node_B.iCol_old += ldJ;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_saveState
  (s_SfTiiT1KRClFcMCE02xJjB_proc_T *obj)
{
  int32_T k;
  int32_T y_size_idx_0;
  obj->sqpFval_old = obj->sqpFval;
  for (k = 0; k < 155; k++) {
    obj->xstarsqp_old[k] = obj->xstarsqp[k];
    obj->grad_old.data[k] = obj->grad.data[k];
  }

  y_size_idx_0 = obj->cIneq_old.size;
  if (0 <= obj->cIneq_old.size - 1) {
    memcpy(&proc_control_node_B.y_data_dh[0], &obj->cIneq_old.data[0],
           obj->cIneq_old.size * sizeof(real_T));
  }

  for (k = 0; k < obj->mIneq; k++) {
    proc_control_node_B.y_data_dh[k] = obj->cIneq.data[k];
  }

  if (0 <= y_size_idx_0 - 1) {
    memcpy(&obj->cIneq_old.data[0], &proc_control_node_B.y_data_dh[0],
           y_size_idx_0 * sizeof(real_T));
  }

  memcpy(&obj->cEq_old[0], &obj->cEq[0], 130U * sizeof(real_T));
}

// Function for MATLAB Function: '<S216>/NLMPC'
real_T proc_control_nodeModelClass::proc_control__computeComplError(const
  int32_T *fscales_lineq_constraint_size, const int32_T
  *fscales_cineq_constraint_size, const real_T xCurrent[155], int32_T mIneq,
  const real_T cIneq_data[], const int32_T finiteLB_data[], int32_T mLB, const
  real_T lb[155], const int32_T finiteUB_data[], int32_T mUB, const real_T
  lambda_data[], int32_T iL0)
{
  real_T nlpComplError;
  int32_T iLineq0;
  int32_T lbOffset;
  int32_T mLinIneq;
  nlpComplError = 0.0;
  if ((mIneq + mLB) + mUB > 0) {
    for (iLineq0 = 0; iLineq0 < *fscales_lineq_constraint_size; iLineq0++) {
      proc_control_node_B.u0_m = fabs(cIneq_data[iLineq0]);
      proc_control_node_B.ubLambda = lambda_data[(iL0 + iLineq0) - 1];
      if ((!(proc_control_node_B.u0_m < proc_control_node_B.ubLambda)) &&
          (!rtIsNaN(proc_control_node_B.ubLambda))) {
        proc_control_node_B.u0_m = proc_control_node_B.ubLambda;
      }

      proc_control_node_B.ubLambda = fabs(proc_control_node_B.ubLambda *
        cIneq_data[iLineq0]);
      if ((proc_control_node_B.ubLambda < proc_control_node_B.u0_m) || rtIsNaN
          (proc_control_node_B.u0_m)) {
        proc_control_node_B.u0_m = proc_control_node_B.ubLambda;
      }

      if ((!(nlpComplError > proc_control_node_B.u0_m)) && (!rtIsNaN
           (proc_control_node_B.u0_m))) {
        nlpComplError = proc_control_node_B.u0_m;
      }
    }

    iLineq0 = (iL0 + *fscales_lineq_constraint_size) - 2;
    for (lbOffset = 1; lbOffset - 1 < *fscales_cineq_constraint_size; lbOffset++)
    {
      proc_control_node_B.u0_m = fabs(cIneq_data[(*fscales_lineq_constraint_size
        - 1) + lbOffset]);
      proc_control_node_B.ubLambda = lambda_data[iLineq0 + lbOffset];
      if ((!(proc_control_node_B.u0_m < proc_control_node_B.ubLambda)) &&
          (!rtIsNaN(proc_control_node_B.ubLambda))) {
        proc_control_node_B.u0_m = proc_control_node_B.ubLambda;
      }

      proc_control_node_B.ubLambda = fabs(cIneq_data
        [(*fscales_lineq_constraint_size - 1) + lbOffset] *
        proc_control_node_B.ubLambda);
      if ((proc_control_node_B.ubLambda < proc_control_node_B.u0_m) || rtIsNaN
          (proc_control_node_B.u0_m)) {
        proc_control_node_B.u0_m = proc_control_node_B.ubLambda;
      }

      if ((!(nlpComplError > proc_control_node_B.u0_m)) && (!rtIsNaN
           (proc_control_node_B.u0_m))) {
        nlpComplError = proc_control_node_B.u0_m;
      }
    }

    lbOffset = (iL0 + mIneq) - 1;
    mLinIneq = lbOffset + mLB;
    for (iLineq0 = 0; iLineq0 < mLB; iLineq0++) {
      proc_control_node_B.ubLambda = xCurrent[finiteLB_data[iLineq0] - 1] -
        lb[finiteLB_data[iLineq0] - 1];
      proc_control_node_B.lbLambda = lambda_data[lbOffset + iLineq0];
      proc_control_node_B.u0_m = fabs(proc_control_node_B.ubLambda);
      if ((!(proc_control_node_B.u0_m < proc_control_node_B.lbLambda)) &&
          (!rtIsNaN(proc_control_node_B.lbLambda))) {
        proc_control_node_B.u0_m = proc_control_node_B.lbLambda;
      }

      proc_control_node_B.ubLambda = fabs(proc_control_node_B.ubLambda *
        proc_control_node_B.lbLambda);
      if ((proc_control_node_B.ubLambda < proc_control_node_B.u0_m) || rtIsNaN
          (proc_control_node_B.u0_m)) {
        proc_control_node_B.u0_m = proc_control_node_B.ubLambda;
      }

      if ((!(nlpComplError > proc_control_node_B.u0_m)) && (!rtIsNaN
           (proc_control_node_B.u0_m))) {
        nlpComplError = proc_control_node_B.u0_m;
      }
    }

    for (lbOffset = 0; lbOffset < mUB; lbOffset++) {
      proc_control_node_B.ubLambda = lambda_data[mLinIneq + lbOffset];
      if (rtIsNaN(proc_control_node_B.ubLambda)) {
        proc_control_node_B.lbLambda = (rtInf) - xCurrent[finiteUB_data[lbOffset]
          - 1];
      } else {
        proc_control_node_B.lbLambda = proc_control_node_B.ubLambda;
      }

      proc_control_node_B.u0_m = fabs(((rtInf) - xCurrent[finiteUB_data[lbOffset]
        - 1]) * proc_control_node_B.ubLambda);
      if ((proc_control_node_B.u0_m < proc_control_node_B.lbLambda) || rtIsNaN
          (proc_control_node_B.lbLambda)) {
        proc_control_node_B.lbLambda = proc_control_node_B.u0_m;
      }

      if ((!(nlpComplError > proc_control_node_B.lbLambda)) && (!rtIsNaN
           (proc_control_node_B.lbLambda))) {
        nlpComplError = proc_control_node_B.lbLambda;
      }
    }
  }

  return nlpComplError;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_m(int32_T m, int32_T n,
  const real_T A_data[], int32_T lda, const real_T x_data[], int32_T ix0, real_T
  y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    proc_control_node_B.ix_nk = ix0;
    c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= c)) || ((lda < 0) && (iac >= c))) {
      proc_control_node_B.iy_k5 = 0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        y_data[proc_control_node_B.iy_k5] += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_nk - 1];
        proc_control_node_B.iy_k5++;
      }

      proc_control_node_B.ix_nk++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_computeGradLag_b(real_T
  workspace_data[], int32_T ldA, int32_T nVar, const real_T grad_data[], int32_T
  mIneq, const real_T AineqTrans_data[], const real_T AeqTrans_data[], const
  int32_T finiteFixed_data[], int32_T mFixed, const int32_T finiteLB_data[],
  int32_T mLB, const int32_T finiteUB_data[], int32_T mUB, const real_T
  lambda_data[])
{
  proc_control_node_B.iL0 = 0;
  while (proc_control_node_B.iL0 <= nVar - 1) {
    workspace_data[proc_control_node_B.iL0] = grad_data[proc_control_node_B.iL0];
    proc_control_node_B.iL0++;
  }

  proc_control_node_B.iL0 = 0;
  while (proc_control_node_B.iL0 <= mFixed - 1) {
    workspace_data[finiteFixed_data[proc_control_node_B.iL0] - 1] +=
      lambda_data[proc_control_node_B.iL0];
    proc_control_node_B.iL0++;
  }

  proc_control_node_xgemv_m(nVar, 130, AeqTrans_data, ldA, lambda_data, mFixed +
    1, workspace_data);
  proc_control_node_xgemv_m(nVar, mIneq, AineqTrans_data, ldA, lambda_data,
    mFixed + 131, workspace_data);
  proc_control_node_B.iL0 = (mFixed + mIneq) + 130;
  proc_control_node_B.c_idx_m = 0;
  while (proc_control_node_B.c_idx_m <= mLB - 1) {
    workspace_data[finiteLB_data[proc_control_node_B.c_idx_m] - 1] -=
      lambda_data[proc_control_node_B.iL0];
    proc_control_node_B.iL0++;
    proc_control_node_B.c_idx_m++;
  }

  proc_control_node_B.c_idx_m = 0;
  while (proc_control_node_B.c_idx_m <= mUB - 1) {
    workspace_data[finiteUB_data[proc_control_node_B.c_idx_m] - 1] +=
      lambda_data[proc_control_node_B.iL0];
    proc_control_node_B.iL0++;
    proc_control_node_B.c_idx_m++;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_con_computeDualFeasError_b(int32_T nVar,
  const real_T gradLag_data[], boolean_T *gradOK, real_T *val)
{
  real_T u1;
  int32_T b_idx;
  boolean_T exitg1;
  *gradOK = true;
  *val = 0.0;
  b_idx = 0;
  exitg1 = false;
  while ((!exitg1) && (b_idx <= nVar - 1)) {
    *gradOK = ((!rtIsInf(gradLag_data[b_idx])) && (!rtIsNaN(gradLag_data[b_idx])));
    if (!*gradOK) {
      exitg1 = true;
    } else {
      u1 = fabs(gradLag_data[b_idx]);
      if ((!(*val > u1)) && (!rtIsNaN(u1))) {
        *val = u1;
      }

      b_idx++;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_updateWorkingSetForNewQP_l(const real_T
  xk[155], s_YaC65yvYSxJoOs4cRNYgnE_proc_T *WorkingSet, int32_T mIneq, int32_T
  mNonlinIneq, const real_T cIneq_data[], const real_T cEq[130], int32_T mLB,
  const real_T lb[155], int32_T mUB, int32_T mFixed)
{
  int32_T c_idx;
  int32_T i;
  int32_T iEq0;
  int32_T iw0;
  proc_control_node_B.nVar_pc = WorkingSet->nVar - 1;
  for (iw0 = 0; iw0 < 130; iw0++) {
    WorkingSet->beq[iw0] = -cEq[iw0];
    WorkingSet->bwset.data[mFixed + iw0] = WorkingSet->beq[iw0];
  }

  iw0 = WorkingSet->ldA * mFixed;
  iEq0 = 0;
  for (c_idx = 0; c_idx < 130; c_idx++) {
    for (i = 0; i <= proc_control_node_B.nVar_pc; i++) {
      WorkingSet->ATwset.data[iw0 + i] = WorkingSet->Aeq.data[iEq0 + i];
    }

    iw0 += WorkingSet->ldA;
    iEq0 += WorkingSet->ldA;
  }

  for (c_idx = 0; c_idx < mIneq; c_idx++) {
    WorkingSet->bineq.data[c_idx] = -cIneq_data[c_idx];
  }

  for (c_idx = 0; c_idx < mLB; c_idx++) {
    WorkingSet->lb.data[WorkingSet->indexLB.data[c_idx] - 1] = -lb
      [WorkingSet->indexLB.data[c_idx] - 1] + xk[WorkingSet->indexLB.data[c_idx]
      - 1];
  }

  for (c_idx = 0; c_idx < mUB; c_idx++) {
    WorkingSet->ub.data[WorkingSet->indexUB.data[c_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexUB.data[c_idx] - 1];
  }

  for (c_idx = 0; c_idx < mFixed; c_idx++) {
    WorkingSet->ub.data[WorkingSet->indexFixed.data[c_idx] - 1] = (rtInf) -
      xk[WorkingSet->indexFixed.data[c_idx] - 1];
    WorkingSet->bwset.data[c_idx] = (rtInf) - xk[WorkingSet->
      indexFixed.data[c_idx] - 1];
  }

  if (WorkingSet->nActiveConstr > mFixed + 130) {
    for (c_idx = mFixed + 130; c_idx < WorkingSet->nActiveConstr; c_idx++) {
      switch (WorkingSet->Wid.data[c_idx]) {
       case 4:
        WorkingSet->bwset.data[c_idx] = WorkingSet->lb.data
          [WorkingSet->indexLB.data[WorkingSet->Wlocalidx.data[c_idx] - 1] - 1];
        break;

       case 5:
        WorkingSet->bwset.data[c_idx] = WorkingSet->ub.data
          [WorkingSet->indexUB.data[WorkingSet->Wlocalidx.data[c_idx] - 1] - 1];
        break;

       default:
        WorkingSet->bwset.data[c_idx] = WorkingSet->bineq.data
          [WorkingSet->Wlocalidx.data[c_idx] - 1];
        if ((mNonlinIneq > 0) && (WorkingSet->Wlocalidx.data[c_idx] >=
             mNonlinIneq)) {
          iw0 = WorkingSet->ldA * c_idx;
          iEq0 = (WorkingSet->Wlocalidx.data[c_idx] - 1) * WorkingSet->ldA;
          for (i = 1; i - 1 <= proc_control_node_B.nVar_pc; i++) {
            WorkingSet->ATwset.data[(iw0 + i) - 1] = WorkingSet->Aineq.data
              [(iEq0 + i) - 1];
          }
        }
        break;
      }
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2(int32_T n, const
  real_T x_data[], int32_T ix0)
{
  real_T y;
  int32_T k;
  int32_T kend;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x_data[ix0 - 1]);
    } else {
      proc_control_node_B.scale_a = 3.3121686421112381E-170;
      kend = (ix0 + n) - 1;
      for (k = ix0; k <= kend; k++) {
        proc_control_node_B.absxk_f = fabs(x_data[k - 1]);
        if (proc_control_node_B.absxk_f > proc_control_node_B.scale_a) {
          proc_control_node_B.t_c = proc_control_node_B.scale_a /
            proc_control_node_B.absxk_f;
          y = y * proc_control_node_B.t_c * proc_control_node_B.t_c + 1.0;
          proc_control_node_B.scale_a = proc_control_node_B.absxk_f;
        } else {
          proc_control_node_B.t_c = proc_control_node_B.absxk_f /
            proc_control_node_B.scale_a;
          y += proc_control_node_B.t_c * proc_control_node_B.t_c;
        }
      }

      y = proc_control_node_B.scale_a * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S216>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_node_xzlarfg(int32_T n, real_T *
  alpha1, real_T x_data[], int32_T ix0)
{
  real_T tau;
  int32_T c_k;
  tau = 0.0;
  if (n > 0) {
    proc_control_node_B.xnorm = proc_control_node_xnrm2(n - 1, x_data, ix0);
    if (proc_control_node_B.xnorm != 0.0) {
      proc_control_node_B.xnorm = proc_control_node_rt_hypotd_snf(*alpha1,
        proc_control_node_B.xnorm);
      if (*alpha1 >= 0.0) {
        proc_control_node_B.xnorm = -proc_control_node_B.xnorm;
      }

      if (fabs(proc_control_node_B.xnorm) < 1.0020841800044864E-292) {
        proc_control_node_B.knt_d = -1;
        c_k = (ix0 + n) - 2;
        do {
          proc_control_node_B.knt_d++;
          proc_control_node_B.b_k_ca = ix0;
          while (proc_control_node_B.b_k_ca <= c_k) {
            x_data[proc_control_node_B.b_k_ca - 1] *= 9.9792015476736E+291;
            proc_control_node_B.b_k_ca++;
          }

          proc_control_node_B.xnorm *= 9.9792015476736E+291;
          *alpha1 *= 9.9792015476736E+291;
        } while (!(fabs(proc_control_node_B.xnorm) >= 1.0020841800044864E-292));

        proc_control_node_B.xnorm = proc_control_node_rt_hypotd_snf(*alpha1,
          proc_control_node_xnrm2(n - 1, x_data, ix0));
        if (*alpha1 >= 0.0) {
          proc_control_node_B.xnorm = -proc_control_node_B.xnorm;
        }

        tau = (proc_control_node_B.xnorm - *alpha1) / proc_control_node_B.xnorm;
        *alpha1 = 1.0 / (*alpha1 - proc_control_node_B.xnorm);
        proc_control_node_B.b_k_ca = ix0;
        while (proc_control_node_B.b_k_ca <= c_k) {
          x_data[proc_control_node_B.b_k_ca - 1] *= *alpha1;
          proc_control_node_B.b_k_ca++;
        }

        for (c_k = 0; c_k <= proc_control_node_B.knt_d; c_k++) {
          proc_control_node_B.xnorm *= 1.0020841800044864E-292;
        }

        *alpha1 = proc_control_node_B.xnorm;
      } else {
        tau = (proc_control_node_B.xnorm - *alpha1) / proc_control_node_B.xnorm;
        *alpha1 = 1.0 / (*alpha1 - proc_control_node_B.xnorm);
        proc_control_node_B.knt_d = (ix0 + n) - 2;
        for (c_k = ix0; c_k <= proc_control_node_B.knt_d; c_k++) {
          x_data[c_k - 1] *= *alpha1;
        }

        *alpha1 = proc_control_node_B.xnorm;
      }
    }
  }

  return tau;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mt(int32_T m, int32_T
  n, const real_T A_data[], int32_T ia0, int32_T lda, const real_T x_data[],
  int32_T ix0, real_T y_data[])
{
  int32_T d;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    proc_control_node_B.b_iy_c = 0;
    while (proc_control_node_B.b_iy_c <= n - 1) {
      y_data[proc_control_node_B.b_iy_c] = 0.0;
      proc_control_node_B.b_iy_c++;
    }

    proc_control_node_B.b_iy_c = 0;
    proc_control_node_B.b_j4 = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= proc_control_node_B.b_j4)) || ((lda < 0) &&
            (iac >= proc_control_node_B.b_j4))) {
      proc_control_node_B.ix_o = ix0;
      proc_control_node_B.c_p = 0.0;
      d = (iac + m) - 1;
      for (ia = iac; ia <= d; ia++) {
        proc_control_node_B.c_p += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_o - 1];
        proc_control_node_B.ix_o++;
      }

      y_data[proc_control_node_B.b_iy_c] += proc_control_node_B.c_p;
      proc_control_node_B.b_iy_c++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgerc(int32_T m, int32_T n,
  real_T alpha1, int32_T ix0, const real_T y_data[], real_T A_data[], int32_T
  ia0, int32_T lda)
{
  int32_T b;
  int32_T ijA;
  int32_T j;
  if (!(alpha1 == 0.0)) {
    proc_control_node_B.jA_c = ia0 - 1;
    proc_control_node_B.jy_d = 0;
    for (j = 0; j < n; j++) {
      if (y_data[proc_control_node_B.jy_d] != 0.0) {
        proc_control_node_B.temp_po = y_data[proc_control_node_B.jy_d] * alpha1;
        proc_control_node_B.ix_h = ix0;
        b = m + proc_control_node_B.jA_c;
        for (ijA = proc_control_node_B.jA_c; ijA < b; ijA++) {
          A_data[ijA] += A_data[proc_control_node_B.ix_h - 1] *
            proc_control_node_B.temp_po;
          proc_control_node_B.ix_h++;
        }
      }

      proc_control_node_B.jy_d++;
      proc_control_node_B.jA_c += lda;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xzlarf(int32_T m, int32_T n,
  int32_T iv0, real_T tau, real_T C_data[], int32_T ic0, int32_T ldc, real_T
  work_data[])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_c = m;
    proc_control_node_B.lastc_kh = iv0 + m;
    while ((proc_control_node_B.lastv_c > 0) &&
           (C_data[proc_control_node_B.lastc_kh - 2] == 0.0)) {
      proc_control_node_B.lastv_c--;
      proc_control_node_B.lastc_kh--;
    }

    proc_control_node_B.lastc_kh = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_kh > 0)) {
      proc_control_node_B.coltop_j = (proc_control_node_B.lastc_kh - 1) * ldc +
        ic0;
      proc_control_node_B.ia_h = proc_control_node_B.coltop_j;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_h <= (proc_control_node_B.coltop_j +
             proc_control_node_B.lastv_c) - 1) {
          if (C_data[proc_control_node_B.ia_h - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_h++;
          }
        } else {
          proc_control_node_B.lastc_kh--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_c = 0;
    proc_control_node_B.lastc_kh = 0;
  }

  if (proc_control_node_B.lastv_c > 0) {
    proc_control_node_xgemv_mt(proc_control_node_B.lastv_c,
      proc_control_node_B.lastc_kh, C_data, ic0, ldc, C_data, iv0, work_data);
    proc_control_node_xgerc(proc_control_node_B.lastv_c,
      proc_control_node_B.lastc_kh, -tau, iv0, work_data, C_data, ic0, ldc);
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_qrf(real_T A_data[], const
  int32_T A_size[2], int32_T m, int32_T n, int32_T nfxd, real_T tau_data[])
{
  proc_control_node_B.lda = A_size[0];
  proc_control_node_B.ii_f = A_size[1];
  if (0 <= proc_control_node_B.ii_f - 1) {
    memset(&proc_control_node_B.work_data[0], 0, proc_control_node_B.ii_f *
           sizeof(real_T));
  }

  proc_control_node_B.i_c1 = 0;
  while (proc_control_node_B.i_c1 <= nfxd - 1) {
    proc_control_node_B.ii_f = proc_control_node_B.i_c1 *
      proc_control_node_B.lda + proc_control_node_B.i_c1;
    proc_control_node_B.mmi = m - proc_control_node_B.i_c1;
    if (proc_control_node_B.i_c1 + 1 < m) {
      proc_control_node_B.b_atmp_k = A_data[proc_control_node_B.ii_f];
      tau_data[proc_control_node_B.i_c1] = proc_control_node_xzlarfg
        (proc_control_node_B.mmi, &proc_control_node_B.b_atmp_k, A_data,
         proc_control_node_B.ii_f + 2);
      A_data[proc_control_node_B.ii_f] = proc_control_node_B.b_atmp_k;
    } else {
      tau_data[proc_control_node_B.i_c1] = 0.0;
    }

    if (proc_control_node_B.i_c1 + 1 < n) {
      proc_control_node_B.b_atmp_k = A_data[proc_control_node_B.ii_f];
      A_data[proc_control_node_B.ii_f] = 1.0;
      proc_control_node_xzlarf(proc_control_node_B.mmi, (n -
        proc_control_node_B.i_c1) - 1, proc_control_node_B.ii_f + 1,
        tau_data[proc_control_node_B.i_c1], A_data, (proc_control_node_B.ii_f +
        proc_control_node_B.lda) + 1, proc_control_node_B.lda,
        proc_control_node_B.work_data);
      A_data[proc_control_node_B.ii_f] = proc_control_node_B.b_atmp_k;
    }

    proc_control_node_B.i_c1++;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xswap(int32_T n, real_T
  x_data[], int32_T ix0, int32_T iy0)
{
  int32_T ix;
  int32_T iy;
  int32_T k;
  ix = ix0 - 1;
  iy = iy0 - 1;
  for (k = 0; k < n; k++) {
    proc_control_node_B.temp_hg = x_data[ix];
    x_data[ix] = x_data[iy];
    x_data[iy] = proc_control_node_B.temp_hg;
    ix++;
    iy++;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_qrpf(real_T A_data[], const
  int32_T A_size[2], int32_T m, int32_T n, int32_T nfxd, real_T tau_data[],
  int32_T jpvt_data[])
{
  proc_control_node_B.ma_i = A_size[0];
  if (m < n) {
    proc_control_node_B.minmn_o = m;
  } else {
    proc_control_node_B.minmn_o = n;
  }

  proc_control_node_B.ii_j = A_size[1];
  if (0 <= proc_control_node_B.ii_j - 1) {
    memset(&proc_control_node_B.work_data_g[0], 0, proc_control_node_B.ii_j *
           sizeof(real_T));
  }

  proc_control_node_B.ii_j = A_size[1];
  if (0 <= proc_control_node_B.ii_j - 1) {
    memset(&proc_control_node_B.vn1_data[0], 0, proc_control_node_B.ii_j *
           sizeof(real_T));
  }

  proc_control_node_B.ii_j = A_size[1];
  if (0 <= proc_control_node_B.ii_j - 1) {
    memset(&proc_control_node_B.vn2_data[0], 0, proc_control_node_B.ii_j *
           sizeof(real_T));
  }

  proc_control_node_B.j_j = nfxd;
  while (proc_control_node_B.j_j + 1 <= n) {
    proc_control_node_B.vn1_data[proc_control_node_B.j_j] =
      proc_control_node_xnrm2(m - nfxd, A_data, (proc_control_node_B.j_j *
      proc_control_node_B.ma_i + nfxd) + 1);
    proc_control_node_B.vn2_data[proc_control_node_B.j_j] =
      proc_control_node_B.vn1_data[proc_control_node_B.j_j];
    proc_control_node_B.j_j++;
  }

  proc_control_node_B.j_j = nfxd;
  while (proc_control_node_B.j_j + 1 <= proc_control_node_B.minmn_o) {
    proc_control_node_B.ii_j = proc_control_node_B.j_j *
      proc_control_node_B.ma_i + proc_control_node_B.j_j;
    proc_control_node_B.nmi = n - proc_control_node_B.j_j;
    proc_control_node_B.mmi_k = m - proc_control_node_B.j_j;
    if (proc_control_node_B.nmi < 1) {
      proc_control_node_B.pvt = -1;
    } else {
      proc_control_node_B.pvt = 0;
      if (proc_control_node_B.nmi > 1) {
        proc_control_node_B.ix_d0 = proc_control_node_B.j_j;
        proc_control_node_B.smax_p = fabs
          (proc_control_node_B.vn1_data[proc_control_node_B.j_j]);
        proc_control_node_B.k_g = 2;
        while (proc_control_node_B.k_g <= proc_control_node_B.nmi) {
          proc_control_node_B.ix_d0++;
          proc_control_node_B.temp2 = fabs
            (proc_control_node_B.vn1_data[proc_control_node_B.ix_d0]);
          if (proc_control_node_B.temp2 > proc_control_node_B.smax_p) {
            proc_control_node_B.pvt = proc_control_node_B.k_g - 1;
            proc_control_node_B.smax_p = proc_control_node_B.temp2;
          }

          proc_control_node_B.k_g++;
        }
      }
    }

    proc_control_node_B.pvt += proc_control_node_B.j_j;
    if (proc_control_node_B.pvt + 1 != proc_control_node_B.j_j + 1) {
      proc_control_node_xswap(m, A_data, proc_control_node_B.pvt *
        proc_control_node_B.ma_i + 1, proc_control_node_B.j_j *
        proc_control_node_B.ma_i + 1);
      proc_control_node_B.ix_d0 = jpvt_data[proc_control_node_B.pvt];
      jpvt_data[proc_control_node_B.pvt] = jpvt_data[proc_control_node_B.j_j];
      jpvt_data[proc_control_node_B.j_j] = proc_control_node_B.ix_d0;
      proc_control_node_B.vn1_data[proc_control_node_B.pvt] =
        proc_control_node_B.vn1_data[proc_control_node_B.j_j];
      proc_control_node_B.vn2_data[proc_control_node_B.pvt] =
        proc_control_node_B.vn2_data[proc_control_node_B.j_j];
    }

    if (proc_control_node_B.j_j + 1 < m) {
      proc_control_node_B.smax_p = A_data[proc_control_node_B.ii_j];
      tau_data[proc_control_node_B.j_j] = proc_control_node_xzlarfg
        (proc_control_node_B.mmi_k, &proc_control_node_B.smax_p, A_data,
         proc_control_node_B.ii_j + 2);
      A_data[proc_control_node_B.ii_j] = proc_control_node_B.smax_p;
    } else {
      tau_data[proc_control_node_B.j_j] = 0.0;
    }

    if (proc_control_node_B.j_j + 1 < n) {
      proc_control_node_B.smax_p = A_data[proc_control_node_B.ii_j];
      A_data[proc_control_node_B.ii_j] = 1.0;
      proc_control_node_xzlarf(proc_control_node_B.mmi_k,
        proc_control_node_B.nmi - 1, proc_control_node_B.ii_j + 1,
        tau_data[proc_control_node_B.j_j], A_data, (proc_control_node_B.ii_j +
        proc_control_node_B.ma_i) + 1, proc_control_node_B.ma_i,
        proc_control_node_B.work_data_g);
      A_data[proc_control_node_B.ii_j] = proc_control_node_B.smax_p;
    }

    proc_control_node_B.ii_j = proc_control_node_B.j_j + 1;
    while (proc_control_node_B.ii_j + 1 <= n) {
      proc_control_node_B.nmi = proc_control_node_B.ii_j *
        proc_control_node_B.ma_i + proc_control_node_B.j_j;
      if (proc_control_node_B.vn1_data[proc_control_node_B.ii_j] != 0.0) {
        proc_control_node_B.smax_p = fabs(A_data[proc_control_node_B.nmi]) /
          proc_control_node_B.vn1_data[proc_control_node_B.ii_j];
        proc_control_node_B.smax_p = 1.0 - proc_control_node_B.smax_p *
          proc_control_node_B.smax_p;
        if (proc_control_node_B.smax_p < 0.0) {
          proc_control_node_B.smax_p = 0.0;
        }

        proc_control_node_B.temp2 =
          proc_control_node_B.vn1_data[proc_control_node_B.ii_j] /
          proc_control_node_B.vn2_data[proc_control_node_B.ii_j];
        proc_control_node_B.temp2 = proc_control_node_B.temp2 *
          proc_control_node_B.temp2 * proc_control_node_B.smax_p;
        if (proc_control_node_B.temp2 <= 1.4901161193847656E-8) {
          if (proc_control_node_B.j_j + 1 < m) {
            proc_control_node_B.vn1_data[proc_control_node_B.ii_j] =
              proc_control_node_xnrm2(proc_control_node_B.mmi_k - 1, A_data,
              proc_control_node_B.nmi + 2);
            proc_control_node_B.vn2_data[proc_control_node_B.ii_j] =
              proc_control_node_B.vn1_data[proc_control_node_B.ii_j];
          } else {
            proc_control_node_B.vn1_data[proc_control_node_B.ii_j] = 0.0;
            proc_control_node_B.vn2_data[proc_control_node_B.ii_j] = 0.0;
          }
        } else {
          proc_control_node_B.vn1_data[proc_control_node_B.ii_j] *= sqrt
            (proc_control_node_B.smax_p);
        }
      }

      proc_control_node_B.ii_j++;
    }

    proc_control_node_B.j_j++;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgeqp3(real_T A_data[],
  const int32_T A_size[2], int32_T m, int32_T n, int32_T jpvt_data[], real_T
  tau_data[], int32_T *tau_size)
{
  proc_control_node_B.ma = A_size[0];
  if (A_size[0] < A_size[1]) {
    proc_control_node_B.minmana_f = A_size[0];
  } else {
    proc_control_node_B.minmana_f = A_size[1];
  }

  if (m < n) {
    proc_control_node_B.minmn_k = m;
  } else {
    proc_control_node_B.minmn_k = n;
  }

  *tau_size = proc_control_node_B.minmana_f;
  if (0 <= proc_control_node_B.minmana_f - 1) {
    memset(&tau_data[0], 0, proc_control_node_B.minmana_f * sizeof(real_T));
  }

  if (proc_control_node_B.minmn_k < 1) {
    proc_control_node_B.ma = 0;
    while (proc_control_node_B.ma <= n - 1) {
      jpvt_data[proc_control_node_B.ma] = proc_control_node_B.ma + 1;
      proc_control_node_B.ma++;
    }
  } else {
    proc_control_node_B.minmana_f = -1;
    proc_control_node_B.c_j_e = 0;
    while (proc_control_node_B.c_j_e <= n - 1) {
      if (jpvt_data[proc_control_node_B.c_j_e] != 0) {
        proc_control_node_B.minmana_f++;
        if (proc_control_node_B.c_j_e + 1 != proc_control_node_B.minmana_f + 1)
        {
          proc_control_node_xswap(m, A_data, proc_control_node_B.c_j_e *
            proc_control_node_B.ma + 1, proc_control_node_B.minmana_f *
            proc_control_node_B.ma + 1);
          jpvt_data[proc_control_node_B.c_j_e] =
            jpvt_data[proc_control_node_B.minmana_f];
          jpvt_data[proc_control_node_B.minmana_f] = proc_control_node_B.c_j_e +
            1;
        } else {
          jpvt_data[proc_control_node_B.c_j_e] = proc_control_node_B.c_j_e + 1;
        }
      } else {
        jpvt_data[proc_control_node_B.c_j_e] = proc_control_node_B.c_j_e + 1;
      }

      proc_control_node_B.c_j_e++;
    }

    if (proc_control_node_B.minmana_f + 1 < proc_control_node_B.minmn_k) {
      proc_control_node_B.minmana_f++;
    } else {
      proc_control_node_B.minmana_f = proc_control_node_B.minmn_k;
    }

    proc_control_node_qrf(A_data, A_size, m, n, proc_control_node_B.minmana_f,
                          tau_data);
    if (proc_control_node_B.minmana_f < proc_control_node_B.minmn_k) {
      proc_control_node_qrpf(A_data, A_size, m, n, proc_control_node_B.minmana_f,
        tau_data, jpvt_data);
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factorQRE
  (s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *obj, const real_T A_data[], int32_T mrows,
   int32_T ncols, int32_T ldA)
{
  proc_control_node_B.b_idx_b = 0;
  while (proc_control_node_B.b_idx_b <= ncols - 1) {
    proc_control_node_B.iA0_h = ldA * proc_control_node_B.b_idx_b;
    proc_control_node_B.iQR0_nw = obj->ldq * proc_control_node_B.b_idx_b;
    proc_control_node_B.b_m = 1;
    while (proc_control_node_B.b_m - 1 <= mrows - 1) {
      obj->QR.data[(proc_control_node_B.iQR0_nw + proc_control_node_B.b_m) - 1] =
        A_data[(proc_control_node_B.iA0_h + proc_control_node_B.b_m) - 1];
      proc_control_node_B.b_m++;
    }

    proc_control_node_B.b_idx_b++;
  }

  obj->usedPivoting = true;
  obj->mrows = mrows;
  obj->ncols = ncols;
  if (mrows < ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_node_B.b_size_c[0] = obj->QR.size[0];
  proc_control_node_B.b_size_c[1] = obj->QR.size[1];
  proc_control_node_B.iA0_h = obj->QR.size[0] * obj->QR.size[1];
  if (0 <= proc_control_node_B.iA0_h - 1) {
    memcpy(&proc_control_node_B.b_data[0], &obj->QR.data[0],
           proc_control_node_B.iA0_h * sizeof(real_T));
  }

  proc_control_node_xgeqp3(proc_control_node_B.b_data,
    proc_control_node_B.b_size_c, mrows, ncols, obj->jpvt.data, obj->tau.data,
    &obj->tau.size);
  obj->QR.size[0] = proc_control_node_B.b_size_c[0];
  obj->QR.size[1] = proc_control_node_B.b_size_c[1];
  proc_control_node_B.iA0_h = proc_control_node_B.b_size_c[0] *
    proc_control_node_B.b_size_c[1];
  if (0 <= proc_control_node_B.iA0_h - 1) {
    memcpy(&obj->QR.data[0], &proc_control_node_B.b_data[0],
           proc_control_node_B.iA0_h * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xorgqr(int32_T m, int32_T n,
  int32_T k, real_T A_data[], const int32_T A_size[2], int32_T lda, const real_T
  tau_data[])
{
  if (n >= 1) {
    proc_control_node_B.itau_j = k;
    while (proc_control_node_B.itau_j <= n - 1) {
      proc_control_node_B.i_bw = proc_control_node_B.itau_j * lda;
      proc_control_node_B.iaii_k = 0;
      while (proc_control_node_B.iaii_k <= m - 1) {
        A_data[proc_control_node_B.i_bw + proc_control_node_B.iaii_k] = 0.0;
        proc_control_node_B.iaii_k++;
      }

      A_data[proc_control_node_B.i_bw + proc_control_node_B.itau_j] = 1.0;
      proc_control_node_B.itau_j++;
    }

    proc_control_node_B.itau_j = k - 1;
    proc_control_node_B.iaii_k = static_cast<int16_T>(A_size[1]);
    if (0 <= proc_control_node_B.iaii_k - 1) {
      memset(&proc_control_node_B.work_data_l[0], 0, proc_control_node_B.iaii_k *
             sizeof(real_T));
    }

    proc_control_node_B.i_bw = k;
    while (proc_control_node_B.i_bw >= 1) {
      proc_control_node_B.iaii_k = (proc_control_node_B.i_bw - 1) * lda +
        proc_control_node_B.i_bw;
      if (proc_control_node_B.i_bw < n) {
        A_data[proc_control_node_B.iaii_k - 1] = 1.0;
        proc_control_node_xzlarf((m - proc_control_node_B.i_bw) + 1, n -
          proc_control_node_B.i_bw, proc_control_node_B.iaii_k,
          tau_data[proc_control_node_B.itau_j], A_data,
          proc_control_node_B.iaii_k + lda, lda, proc_control_node_B.work_data_l);
      }

      if (proc_control_node_B.i_bw < m) {
        proc_control_node_B.d_d = (proc_control_node_B.iaii_k + m) -
          proc_control_node_B.i_bw;
        proc_control_node_B.b_k_d = proc_control_node_B.iaii_k;
        while (proc_control_node_B.b_k_d + 1 <= proc_control_node_B.d_d) {
          A_data[proc_control_node_B.b_k_d] *=
            -tau_data[proc_control_node_B.itau_j];
          proc_control_node_B.b_k_d++;
        }
      }

      A_data[proc_control_node_B.iaii_k - 1] = 1.0 -
        tau_data[proc_control_node_B.itau_j];
      proc_control_node_B.d_d = 0;
      while (proc_control_node_B.d_d <= proc_control_node_B.i_bw - 2) {
        A_data[(proc_control_node_B.iaii_k - proc_control_node_B.d_d) - 2] = 0.0;
        proc_control_node_B.d_d++;
      }

      proc_control_node_B.itau_j--;
      proc_control_node_B.i_bw--;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_computeQ_
  (s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *obj, int32_T nrows)
{
  proc_control_node_B.idx_j = 0;
  while (proc_control_node_B.idx_j <= obj->minRowCol - 1) {
    proc_control_node_B.iQR0_n = obj->ldq * proc_control_node_B.idx_j +
      proc_control_node_B.idx_j;
    proc_control_node_B.n_b = obj->mrows - proc_control_node_B.idx_j;
    proc_control_node_B.k_n = 1;
    while (proc_control_node_B.k_n - 1 <= proc_control_node_B.n_b - 2) {
      proc_control_node_B.i39 = proc_control_node_B.iQR0_n +
        proc_control_node_B.k_n;
      obj->Q.data[proc_control_node_B.i39] = obj->
        QR.data[proc_control_node_B.i39];
      proc_control_node_B.k_n++;
    }

    proc_control_node_B.idx_j++;
  }

  proc_control_node_xorgqr(obj->mrows, nrows, obj->minRowCol, obj->Q.data,
    obj->Q.size, obj->ldq, obj->tau.data);
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtm(int32_T m, int32_T
  n, const real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T b;
  int32_T b_c;
  int32_T ia;
  int32_T iac;
  if (m != 0) {
    proc_control_node_B.b_iy_d = 0;
    while (proc_control_node_B.b_iy_d <= n - 1) {
      y_data[proc_control_node_B.b_iy_d] = 0.0;
      proc_control_node_B.b_iy_d++;
    }

    proc_control_node_B.b_iy_d = 0;
    b_c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_c)) || ((lda < 0) && (iac >= b_c))) {
      proc_control_node_B.ix_c = 0;
      proc_control_node_B.c_n = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        proc_control_node_B.c_n += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_c];
        proc_control_node_B.ix_c++;
      }

      y_data[proc_control_node_B.b_iy_d] += proc_control_node_B.c_n;
      proc_control_node_B.b_iy_d++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xtrsv(int32_T n, const
  real_T A_data[], int32_T lda, real_T x_data[])
{
  int32_T i;
  int32_T ix;
  int32_T j;
  int32_T jjA;
  if (n != 0) {
    for (j = n - 1; j + 1 > 0; j--) {
      jjA = j * lda + j;
      x_data[j] /= A_data[jjA];
      for (i = 1; i - 1 < j; i++) {
        ix = j - i;
        x_data[ix] -= x_data[j] * A_data[jjA - i];
      }
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_sortLambdaQP(real_T
  lambda_data[], int32_T WorkingSet_nActiveConstr, const int32_T
  WorkingSet_sizes[5], const int32_T WorkingSet_isActiveIdx[6], const int32_T
  WorkingSet_Wid_data[], const int32_T WorkingSet_Wlocalidx_data[], real_T
  workspace_data[])
{
  int32_T idx;
  int32_T idxOffset;
  int32_T mAll;
  if (WorkingSet_nActiveConstr != 0) {
    mAll = (((WorkingSet_sizes[0] + WorkingSet_sizes[3]) + WorkingSet_sizes[4])
            + WorkingSet_sizes[2]) + 129;
    for (idx = 0; idx <= mAll; idx++) {
      workspace_data[idx] = lambda_data[idx];
    }

    for (idx = 0; idx <= mAll; idx++) {
      lambda_data[idx] = 0.0;
    }

    mAll = 0;
    idx = 0;
    while ((idx + 1 <= WorkingSet_nActiveConstr) && (WorkingSet_Wid_data[idx] <=
            2)) {
      if (WorkingSet_Wid_data[idx] == 1) {
        idxOffset = 1;
      } else {
        idxOffset = WorkingSet_isActiveIdx[1];
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
        workspace_data[mAll];
      mAll++;
      idx++;
    }

    while (idx + 1 <= WorkingSet_nActiveConstr) {
      switch (WorkingSet_Wid_data[idx]) {
       case 3:
        idxOffset = WorkingSet_isActiveIdx[2];
        break;

       case 4:
        idxOffset = WorkingSet_isActiveIdx[3];
        break;

       default:
        idxOffset = WorkingSet_isActiveIdx[4];
        break;
      }

      lambda_data[(idxOffset + WorkingSet_Wlocalidx_data[idx]) - 2] =
        workspace_data[mAll];
      mAll++;
      idx++;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
int32_T proc_control_nodeModelClass::proc_control_node_ixamax(int32_T n, const
  real_T x_data[])
{
  real_T y;
  int32_T idxmax;
  int32_T ix;
  int32_T k;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      ix = 0;
      proc_control_node_B.smax_by = fabs(x_data[0]);
      for (k = 2; k <= n; k++) {
        ix++;
        y = fabs(x_data[ix]);
        if (y > proc_control_node_B.smax_by) {
          idxmax = k;
          proc_control_node_B.smax_by = y;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_test_exit
  (s7RdrPWkr8UPAUyTdDJkLaG_proc__T *Flags, s_rz4qJMGW78cxvfZBKnU9SC_proc_T
   *memspace, sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction, const int32_T
   *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
   s_YaC65yvYSxJoOs4cRNYgnE_proc_T *WorkingSet, s_SfTiiT1KRClFcMCE02xJjB_proc_T *
   TrialState, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *QRManager, const real_T lb[155])
{
  boolean_T dxTooSmall;
  boolean_T exitg1;
  boolean_T guard1 = false;
  boolean_T isFeasible;
  proc_control_node_B.nVar_dm = WorkingSet->nVar;
  proc_control_node_B.mFixed_h = WorkingSet->sizes[0];
  proc_control_node_B.mIneq_b = WorkingSet->sizes[2];
  proc_control_node_B.mLB_p = WorkingSet->sizes[3];
  proc_control_node_B.mUB_b = WorkingSet->sizes[4];
  proc_control_node_B.mLambda_p = (((WorkingSet->sizes[0] + WorkingSet->sizes[2])
    + WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 129;
  proc_control_node_B.nActiveConstr = 0;
  while (proc_control_node_B.nActiveConstr <= proc_control_node_B.mLambda_p) {
    TrialState->lambdaStopTest.data[proc_control_node_B.nActiveConstr] =
      TrialState->lambdasqp.data[proc_control_node_B.nActiveConstr];
    proc_control_node_B.nActiveConstr++;
  }

  proc_control_nod_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  proc_control_node_B.optimRelativeFactor_a = fabs(TrialState->
    grad.data[proc_control_node_ixamax(WorkingSet->nVar, TrialState->grad.data)
    - 1]);
  if ((1.0 > proc_control_node_B.optimRelativeFactor_a) || rtIsNaN
      (proc_control_node_B.optimRelativeFactor_a)) {
    proc_control_node_B.optimRelativeFactor_a = 1.0;
  }

  if (rtIsInf(proc_control_node_B.optimRelativeFactor_a)) {
    proc_control_node_B.optimRelativeFactor_a = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if (TrialState->sqpIterations == 0) {
    if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
        (MeritFunction->nlpPrimalFeasError)) {
      MeritFunction->feasRelativeFactor = 1.0;
    } else {
      MeritFunction->feasRelativeFactor = MeritFunction->nlpPrimalFeasError;
    }
  }

  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                MeritFunction->feasRelativeFactor);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data,
    &dxTooSmall, &proc_control_node_B.tol_d);
  Flags->gradOK = dxTooSmall;
  MeritFunction->nlpDualFeasError = proc_control_node_B.tol_d;
  if (!dxTooSmall) {
    Flags->done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = proc_control__computeComplError
      (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
       TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
       WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
       WorkingSet->indexUB.data, WorkingSet->sizes[4],
       TrialState->lambdaStopTest.data, WorkingSet->sizes[0] + 131);
    if ((proc_control_node_B.tol_d > MeritFunction->nlpComplError) || rtIsNaN
        (MeritFunction->nlpComplError)) {
      MeritFunction->firstOrderOpt = proc_control_node_B.tol_d;
    } else {
      MeritFunction->firstOrderOpt = MeritFunction->nlpComplError;
    }

    if (TrialState->sqpIterations > 1) {
      proc_control_n_computeGradLag_b(memspace->workspace_double.data,
        WorkingSet->ldA, WorkingSet->nVar, TrialState->grad.data,
        WorkingSet->sizes[2], WorkingSet->Aineq.data, WorkingSet->Aeq.data,
        WorkingSet->indexFixed.data, WorkingSet->sizes[0],
        WorkingSet->indexLB.data, WorkingSet->sizes[3], WorkingSet->indexUB.data,
        WorkingSet->sizes[4], TrialState->lambdaStopTestPrev.data);
      proc_con_computeDualFeasError_b(WorkingSet->nVar,
        memspace->workspace_double.data, &dxTooSmall,
        &proc_control_node_B.nlpComplErrorLSQ);
      proc_control_node_B.nlpComplErrorTmp = proc_control__computeComplError
        (fscales_lineq_constraint_size, fscales_cineq_constraint_size,
         TrialState->xstarsqp, WorkingSet->sizes[2], TrialState->cIneq.data,
         WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
         WorkingSet->indexUB.data, WorkingSet->sizes[4],
         TrialState->lambdaStopTestPrev.data, WorkingSet->sizes[0] + 131);
      if ((proc_control_node_B.nlpComplErrorLSQ >
           proc_control_node_B.nlpComplErrorTmp) || rtIsNaN
          (proc_control_node_B.nlpComplErrorTmp)) {
        proc_control_node_B.d4 = proc_control_node_B.nlpComplErrorLSQ;
      } else {
        proc_control_node_B.d4 = proc_control_node_B.nlpComplErrorTmp;
      }

      if ((!(proc_control_node_B.tol_d > MeritFunction->nlpComplError)) &&
          (!rtIsNaN(MeritFunction->nlpComplError))) {
        proc_control_node_B.tol_d = MeritFunction->nlpComplError;
      }

      if (proc_control_node_B.d4 < proc_control_node_B.tol_d) {
        MeritFunction->nlpDualFeasError = proc_control_node_B.nlpComplErrorLSQ;
        MeritFunction->nlpComplError = proc_control_node_B.nlpComplErrorTmp;
        MeritFunction->firstOrderOpt = proc_control_node_B.d4;
        proc_control_node_B.nActiveConstr = 0;
        while (proc_control_node_B.nActiveConstr <=
               proc_control_node_B.mLambda_p) {
          TrialState->lambdaStopTest.data[proc_control_node_B.nActiveConstr] =
            TrialState->
            lambdaStopTestPrev.data[proc_control_node_B.nActiveConstr];
          proc_control_node_B.nActiveConstr++;
        }
      } else {
        proc_control_node_B.nActiveConstr = 0;
        while (proc_control_node_B.nActiveConstr <=
               proc_control_node_B.mLambda_p) {
          TrialState->lambdaStopTestPrev.data[proc_control_node_B.nActiveConstr]
            = TrialState->lambdaStopTest.data[proc_control_node_B.nActiveConstr];
          proc_control_node_B.nActiveConstr++;
        }
      }
    } else {
      proc_control_node_B.nActiveConstr = 0;
      while (proc_control_node_B.nActiveConstr <= proc_control_node_B.mLambda_p)
      {
        TrialState->lambdaStopTestPrev.data[proc_control_node_B.nActiveConstr] =
          TrialState->lambdaStopTest.data[proc_control_node_B.nActiveConstr];
        proc_control_node_B.nActiveConstr++;
      }
    }

    if (isFeasible && (MeritFunction->nlpDualFeasError <= 0.02 *
                       proc_control_node_B.optimRelativeFactor_a) &&
        (MeritFunction->nlpComplError <= 0.02 *
         proc_control_node_B.optimRelativeFactor_a)) {
      Flags->done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      Flags->done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        Flags->done = true;
        TrialState->sqpExitFlag = -3;
      } else {
        guard1 = false;
        if (TrialState->sqpIterations > 0) {
          dxTooSmall = true;
          proc_control_node_B.nActiveConstr = 0;
          exitg1 = false;
          while ((!exitg1) && (proc_control_node_B.nActiveConstr <=
                               proc_control_node_B.nVar_dm - 1)) {
            proc_control_node_B.tol_d = fabs(TrialState->
              xstarsqp[proc_control_node_B.nActiveConstr]);
            if ((1.0 > proc_control_node_B.tol_d) || rtIsNaN
                (proc_control_node_B.tol_d)) {
              proc_control_node_B.tol_d = 1.0;
            }

            if (0.1 * proc_control_node_B.tol_d <= fabs(TrialState->
                 delta_x.data[proc_control_node_B.nActiveConstr])) {
              dxTooSmall = false;
              exitg1 = true;
            } else {
              proc_control_node_B.nActiveConstr++;
            }
          }

          if (dxTooSmall) {
            if (!isFeasible) {
              if (Flags->stepType != 2) {
                Flags->stepType = 2;
                Flags->failedLineSearch = false;
                Flags->stepAccepted = false;
                guard1 = true;
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = -2;
              }
            } else {
              proc_control_node_B.nActiveConstr = WorkingSet->nActiveConstr;
              if (WorkingSet->nActiveConstr > 0) {
                proc_updateWorkingSetForNewQP_l(TrialState->xstarsqp, WorkingSet,
                  WorkingSet->sizes[2], TrialState->mNonlinIneq,
                  TrialState->cIneq.data, TrialState->cEq, WorkingSet->sizes[3],
                  lb, WorkingSet->sizes[4], WorkingSet->sizes[0]);
                proc_control_node_B.fullRank_R = 0;
                while (proc_control_node_B.fullRank_R <=
                       proc_control_node_B.nActiveConstr - 1) {
                  TrialState->lambda.data[proc_control_node_B.fullRank_R] = 0.0;
                  proc_control_node_B.fullRank_R++;
                }

                proc_control_node_factorQRE(QRManager, WorkingSet->ATwset.data,
                  proc_control_node_B.nVar_dm, proc_control_node_B.nActiveConstr,
                  WorkingSet->ldA);
                proc_control_node_computeQ_(QRManager, QRManager->mrows);
                if (proc_control_node_B.nVar_dm >
                    proc_control_node_B.nActiveConstr) {
                  proc_control_node_B.iQR_diag = proc_control_node_B.nVar_dm;
                } else {
                  proc_control_node_B.iQR_diag =
                    proc_control_node_B.nActiveConstr;
                }

                proc_control_node_B.tol_d = static_cast<real_T>
                  (proc_control_node_B.iQR_diag) * 2.2204460492503131E-16;
                if (1.4901161193847656E-8 < proc_control_node_B.tol_d) {
                  proc_control_node_B.tol_d = 1.4901161193847656E-8;
                }

                proc_control_node_B.tol_d *= fabs(QRManager->QR.data[0]);
                if (proc_control_node_B.nVar_dm <
                    proc_control_node_B.nActiveConstr) {
                  proc_control_node_B.fullRank_R = proc_control_node_B.nVar_dm;
                } else {
                  proc_control_node_B.fullRank_R =
                    proc_control_node_B.nActiveConstr;
                }

                proc_control_node_B.rankR = 0;
                proc_control_node_B.iQR_diag = 0;
                while ((proc_control_node_B.rankR <
                        proc_control_node_B.fullRank_R) && (fabs
                        (QRManager->QR.data[proc_control_node_B.iQR_diag]) >
                        proc_control_node_B.tol_d)) {
                  proc_control_node_B.rankR++;
                  proc_control_node_B.iQR_diag = (proc_control_node_B.iQR_diag +
                    QRManager->ldq) + 1;
                }

                proc_control_node_B.e_size[0] = memspace->workspace_double.size
                  [0];
                proc_control_node_B.e_size[1] = memspace->workspace_double.size
                  [1];
                proc_control_node_B.iQR_diag = memspace->workspace_double.size[0]
                  * memspace->workspace_double.size[1];
                if (0 <= proc_control_node_B.iQR_diag - 1) {
                  memcpy(&proc_control_node_B.e_data[0],
                         &memspace->workspace_double.data[0],
                         proc_control_node_B.iQR_diag * sizeof(real_T));
                }

                proc_control_node_xgemv_mtm(proc_control_node_B.nVar_dm,
                  proc_control_node_B.nVar_dm, QRManager->Q.data, QRManager->ldq,
                  TrialState->grad.data, proc_control_node_B.e_data);
                proc_control_node_xtrsv(proc_control_node_B.rankR,
                  QRManager->QR.data, QRManager->ldq, proc_control_node_B.e_data);
                if (proc_control_node_B.nActiveConstr >=
                    proc_control_node_B.fullRank_R) {
                  proc_control_node_B.nActiveConstr =
                    proc_control_node_B.fullRank_R;
                }

                proc_control_node_B.fullRank_R = 0;
                while (proc_control_node_B.fullRank_R <=
                       proc_control_node_B.nActiveConstr - 1) {
                  TrialState->lambda.data[QRManager->
                    jpvt.data[proc_control_node_B.fullRank_R] - 1] =
                    proc_control_node_B.e_data[proc_control_node_B.fullRank_R];
                  proc_control_node_B.fullRank_R++;
                }

                proc_control_node_B.nActiveConstr = proc_control_node_B.mFixed_h;
                while (proc_control_node_B.nActiveConstr + 1 <=
                       proc_control_node_B.mFixed_h + 130) {
                  TrialState->lambda.data[proc_control_node_B.nActiveConstr] =
                    -TrialState->lambda.data[proc_control_node_B.nActiveConstr];
                  proc_control_node_B.nActiveConstr++;
                }

                proc_control_node_sortLambdaQP(TrialState->lambda.data,
                  WorkingSet->nActiveConstr, WorkingSet->sizes,
                  WorkingSet->isActiveIdx, WorkingSet->Wid.data,
                  WorkingSet->Wlocalidx.data, proc_control_node_B.e_data);
                memspace->workspace_double.size[0] = proc_control_node_B.e_size
                  [0];
                memspace->workspace_double.size[1] = proc_control_node_B.e_size
                  [1];
                proc_control_node_B.iQR_diag = proc_control_node_B.e_size[0] *
                  proc_control_node_B.e_size[1];
                if (0 <= proc_control_node_B.iQR_diag - 1) {
                  memcpy(&memspace->workspace_double.data[0],
                         &proc_control_node_B.e_data[0],
                         proc_control_node_B.iQR_diag * sizeof(real_T));
                }

                proc_control_n_computeGradLag_b(memspace->workspace_double.data,
                  WorkingSet->ldA, proc_control_node_B.nVar_dm,
                  TrialState->grad.data, proc_control_node_B.mIneq_b,
                  WorkingSet->Aineq.data, WorkingSet->Aeq.data,
                  WorkingSet->indexFixed.data, proc_control_node_B.mFixed_h,
                  WorkingSet->indexLB.data, proc_control_node_B.mLB_p,
                  WorkingSet->indexUB.data, proc_control_node_B.mUB_b,
                  TrialState->lambda.data);
                proc_con_computeDualFeasError_b(proc_control_node_B.nVar_dm,
                  memspace->workspace_double.data, &isFeasible,
                  &proc_control_node_B.tol_d);
                proc_control_node_B.nlpComplErrorLSQ =
                  proc_control__computeComplError(fscales_lineq_constraint_size,
                  fscales_cineq_constraint_size, TrialState->xstarsqp,
                  proc_control_node_B.mIneq_b, TrialState->cIneq.data,
                  WorkingSet->indexLB.data, proc_control_node_B.mLB_p, lb,
                  WorkingSet->indexUB.data, proc_control_node_B.mUB_b,
                  TrialState->lambda.data, proc_control_node_B.mFixed_h + 1);
                if ((proc_control_node_B.tol_d <= 0.02 *
                     proc_control_node_B.optimRelativeFactor_a) &&
                    (proc_control_node_B.nlpComplErrorLSQ <= 0.02 *
                     proc_control_node_B.optimRelativeFactor_a)) {
                  MeritFunction->nlpDualFeasError = proc_control_node_B.tol_d;
                  MeritFunction->nlpComplError =
                    proc_control_node_B.nlpComplErrorLSQ;
                  if (proc_control_node_B.tol_d >
                      proc_control_node_B.nlpComplErrorLSQ) {
                    MeritFunction->firstOrderOpt = proc_control_node_B.tol_d;
                  } else {
                    MeritFunction->firstOrderOpt =
                      proc_control_node_B.nlpComplErrorLSQ;
                  }

                  proc_control_node_B.nVar_dm = 0;
                  while (proc_control_node_B.nVar_dm <=
                         proc_control_node_B.mLambda_p) {
                    TrialState->lambdaStopTest.data[proc_control_node_B.nVar_dm]
                      = TrialState->lambda.data[proc_control_node_B.nVar_dm];
                    proc_control_node_B.nVar_dm++;
                  }

                  Flags->done = true;
                  TrialState->sqpExitFlag = 1;
                } else {
                  Flags->done = true;
                  TrialState->sqpExitFlag = 2;
                }
              } else {
                Flags->done = true;
                TrialState->sqpExitFlag = 2;
              }
            }
          } else {
            guard1 = true;
          }
        } else {
          guard1 = true;
        }

        if (guard1) {
          if (TrialState->sqpIterations >= 400) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          } else if (TrialState->FunctionEvaluations >= 15500) {
            Flags->done = true;
            TrialState->sqpExitFlag = 0;
          }
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_xgemv_mtmcjbiadz2i(int32_T m,
  int32_T n, const real_T A_data[], int32_T ia0, int32_T lda, const real_T
  x_data[], int32_T ix0, real_T y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  int32_T iy;
  proc_control_node_B.ix_b = ix0;
  b = (n - 1) * lda + ia0;
  iac = ia0;
  while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
    iy = 0;
    c = (iac + m) - 1;
    for (ia = iac; ia <= c; ia++) {
      y_data[iy] += A_data[ia - 1] * x_data[proc_control_node_B.ix_b - 1];
      iy++;
    }

    proc_control_node_B.ix_b++;
    iac += lda;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_BFGSUpdate(int32_T nvar,
  real_T Bk[24025], const real_T sk_data[], real_T yk_data[], real_T
  workspace_data[])
{
  int32_T b_ix;
  int32_T b_jA;
  int32_T c_ix;
  int32_T d;
  int32_T jy;
  boolean_T success;
  proc_control_node_B.dotSY = 0.0;
  if (nvar >= 1) {
    for (b_jA = 0; b_jA < nvar; b_jA++) {
      proc_control_node_B.dotSY += sk_data[b_jA] * yk_data[b_jA];
    }
  }

  for (b_jA = 0; b_jA < nvar; b_jA++) {
    workspace_data[b_jA] = 0.0;
  }

  proc_control_node_B.ix_px = 0;
  jy = (nvar - 1) * 155;
  for (c_ix = 1; c_ix <= jy + 1; c_ix += 155) {
    b_ix = 0;
    d = (c_ix + nvar) - 1;
    for (b_jA = c_ix; b_jA <= d; b_jA++) {
      workspace_data[b_ix] += Bk[b_jA - 1] * sk_data[proc_control_node_B.ix_px];
      b_ix++;
    }

    proc_control_node_B.ix_px++;
  }

  proc_control_node_B.curvatureS = 0.0;
  if (nvar >= 1) {
    proc_control_node_B.ix_px = 0;
    while (proc_control_node_B.ix_px <= nvar - 1) {
      proc_control_node_B.curvatureS += workspace_data[proc_control_node_B.ix_px]
        * sk_data[proc_control_node_B.ix_px];
      proc_control_node_B.ix_px++;
    }
  }

  if (proc_control_node_B.dotSY < 0.2 * proc_control_node_B.curvatureS) {
    proc_control_node_B.dotSY = 0.8 * proc_control_node_B.curvatureS /
      (proc_control_node_B.curvatureS - proc_control_node_B.dotSY);
    for (b_jA = 0; b_jA < nvar; b_jA++) {
      yk_data[b_jA] *= proc_control_node_B.dotSY;
    }

    proc_control_node_B.dotSY = 1.0 - proc_control_node_B.dotSY;
    if (!(proc_control_node_B.dotSY == 0.0)) {
      proc_control_node_B.ix_px = 0;
      while (proc_control_node_B.ix_px <= nvar - 1) {
        yk_data[proc_control_node_B.ix_px] +=
          workspace_data[proc_control_node_B.ix_px] * proc_control_node_B.dotSY;
        proc_control_node_B.ix_px++;
      }
    }

    proc_control_node_B.dotSY = 0.0;
    if (nvar >= 1) {
      for (b_jA = 0; b_jA < nvar; b_jA++) {
        proc_control_node_B.dotSY += sk_data[b_jA] * yk_data[b_jA];
      }
    }
  }

  success = ((proc_control_node_B.curvatureS > 2.2204460492503131E-16) &&
             (proc_control_node_B.dotSY > 2.2204460492503131E-16));
  if (success) {
    proc_control_node_B.curvatureS = -1.0 / proc_control_node_B.curvatureS;
    if (!(proc_control_node_B.curvatureS == 0.0)) {
      proc_control_node_B.ix_px = 0;
      jy = 0;
      for (c_ix = 0; c_ix < nvar; c_ix++) {
        if (workspace_data[jy] != 0.0) {
          proc_control_node_B.temp_i = workspace_data[jy] *
            proc_control_node_B.curvatureS;
          b_ix = 0;
          d = nvar + proc_control_node_B.ix_px;
          for (b_jA = proc_control_node_B.ix_px; b_jA < d; b_jA++) {
            Bk[b_jA] += workspace_data[b_ix] * proc_control_node_B.temp_i;
            b_ix++;
          }
        }

        jy++;
        proc_control_node_B.ix_px += 155;
      }
    }

    proc_control_node_B.curvatureS = 1.0 / proc_control_node_B.dotSY;
    if (!(proc_control_node_B.curvatureS == 0.0)) {
      b_jA = 0;
      proc_control_node_B.ix_px = 0;
      for (jy = 0; jy < nvar; jy++) {
        if (yk_data[proc_control_node_B.ix_px] != 0.0) {
          proc_control_node_B.dotSY = yk_data[proc_control_node_B.ix_px] *
            proc_control_node_B.curvatureS;
          c_ix = 0;
          b_ix = nvar + b_jA;
          for (d = b_jA; d < b_ix; d++) {
            Bk[d] += yk_data[c_ix] * proc_control_node_B.dotSY;
            c_ix++;
          }
        }

        proc_control_node_B.ix_px++;
        b_jA += 155;
      }
    }
  }

  return success;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factorQRE_f
  (s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *obj, int32_T mrows, int32_T ncols)
{
  if (mrows * ncols == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    obj->usedPivoting = true;
    obj->mrows = mrows;
    obj->ncols = ncols;
    if (mrows < ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_node_B.b_size[0] = obj->QR.size[0];
    proc_control_node_B.b_size[1] = obj->QR.size[1];
    proc_control_node_B.loop_ub_o = obj->QR.size[0] * obj->QR.size[1];
    if (0 <= proc_control_node_B.loop_ub_o - 1) {
      memcpy(&proc_control_node_B.b_data_m[0], &obj->QR.data[0],
             proc_control_node_B.loop_ub_o * sizeof(real_T));
    }

    proc_control_node_xgeqp3(proc_control_node_B.b_data_m,
      proc_control_node_B.b_size, mrows, ncols, obj->jpvt.data, obj->tau.data,
      &obj->tau.size);
    obj->QR.size[0] = proc_control_node_B.b_size[0];
    obj->QR.size[1] = proc_control_node_B.b_size[1];
    proc_control_node_B.loop_ub_o = proc_control_node_B.b_size[0] *
      proc_control_node_B.b_size[1];
    if (0 <= proc_control_node_B.loop_ub_o - 1) {
      memcpy(&obj->QR.data[0], &proc_control_node_B.b_data_m[0],
             proc_control_node_B.loop_ub_o * sizeof(real_T));
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_countsort(int32_T x_data[],
  int32_T xLen, int32_T workspace_data[], int32_T xMin, int32_T xMax)
{
  int32_T b_idxW;
  int32_T idxEnd;
  int32_T idxStart;
  int32_T maxOffset_tmp;
  if ((xLen > 1) && (xMax > xMin)) {
    maxOffset_tmp = xMax - xMin;
    for (idxStart = 0; idxStart <= maxOffset_tmp; idxStart++) {
      workspace_data[idxStart] = 0;
    }

    for (idxStart = 0; idxStart < xLen; idxStart++) {
      idxEnd = x_data[idxStart] - xMin;
      workspace_data[idxEnd]++;
    }

    for (idxStart = 1; idxStart < maxOffset_tmp + 1; idxStart++) {
      workspace_data[idxStart] += workspace_data[idxStart - 1];
    }

    idxStart = 0;
    idxEnd = workspace_data[0];
    for (b_idxW = 0; b_idxW < maxOffset_tmp; b_idxW++) {
      while (idxStart + 1 <= idxEnd) {
        x_data[idxStart] = b_idxW + xMin;
        idxStart++;
      }

      idxStart = workspace_data[b_idxW];
      idxEnd = workspace_data[b_idxW + 1];
    }

    while (idxStart + 1 <= idxEnd) {
      x_data[idxStart] = xMax;
      idxStart++;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_removeConstr
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj, int32_T idx_global)
{
  int32_T TYPE_tmp;
  int32_T b_idx;
  int32_T idx_global_start_tmp_tmp;
  TYPE_tmp = obj->Wid.data[idx_global - 1] - 1;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE_tmp] + obj->
    Wlocalidx.data[idx_global - 1]) - 2] = false;
  idx_global_start_tmp_tmp = obj->nActiveConstr - 1;
  obj->Wid.data[idx_global - 1] = obj->Wid.data[obj->nActiveConstr - 1];
  obj->Wlocalidx.data[idx_global - 1] = obj->
    Wlocalidx.data[idx_global_start_tmp_tmp];
  for (b_idx = 0; b_idx < obj->nVar; b_idx++) {
    obj->ATwset.data[b_idx + obj->ldA * (idx_global - 1)] = obj->ATwset.data
      [obj->ldA * idx_global_start_tmp_tmp + b_idx];
  }

  obj->bwset.data[idx_global - 1] = obj->bwset.data[idx_global_start_tmp_tmp];
  obj->nActiveConstr--;
  obj->nWConstr[TYPE_tmp]--;
}

// Function for MATLAB Function: '<S216>/NLMPC'
int32_T proc_control_nodeModelClass::proc_control_RemoveDependentEq_
  (s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
   *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *qrmanager)
{
  int32_T nDepInd;
  boolean_T exitg1;
  proc_control_node_B.nVar_h = workingset->nVar - 1;
  proc_control_node_B.mTotalWorkingEq = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  nDepInd = 0;
  if (proc_control_node_B.mTotalWorkingEq > 0) {
    proc_control_node_B.totalRank = 0;
    while (proc_control_node_B.totalRank <= proc_control_node_B.mTotalWorkingEq
           - 1) {
      proc_control_node_B.ix_er = 0;
      while (proc_control_node_B.ix_er <= proc_control_node_B.nVar_h) {
        qrmanager->QR.data[proc_control_node_B.totalRank + qrmanager->ldq *
          proc_control_node_B.ix_er] = workingset->ATwset.data[workingset->ldA *
          proc_control_node_B.totalRank + proc_control_node_B.ix_er];
        proc_control_node_B.ix_er++;
      }

      proc_control_node_B.totalRank++;
    }

    proc_control_node_B.iy_n = proc_control_node_B.mTotalWorkingEq -
      workingset->nVar;
    if (0 <= proc_control_node_B.iy_n) {
      nDepInd = proc_control_node_B.iy_n;
    }

    proc_control_node_B.totalRank = 0;
    while (proc_control_node_B.totalRank <= proc_control_node_B.nVar_h) {
      qrmanager->jpvt.data[proc_control_node_B.totalRank] = 0;
      proc_control_node_B.totalRank++;
    }

    proc_control_node_factorQRE_f(qrmanager, proc_control_node_B.mTotalWorkingEq,
      workingset->nVar);
    proc_control_node_B.tol = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    if (workingset->nVar < proc_control_node_B.mTotalWorkingEq) {
      proc_control_node_B.totalRank = workingset->nVar;
    } else {
      proc_control_node_B.totalRank = proc_control_node_B.mTotalWorkingEq;
    }

    proc_control_node_B.totalRank += (proc_control_node_B.totalRank - 1) *
      qrmanager->ldq;
    while ((proc_control_node_B.totalRank > 0) && (fabs(qrmanager->
             QR.data[proc_control_node_B.totalRank - 1]) <
            proc_control_node_B.tol)) {
      proc_control_node_B.totalRank = (proc_control_node_B.totalRank -
        qrmanager->ldq) - 1;
      nDepInd++;
    }

    if (nDepInd > 0) {
      proc_control_node_computeQ_(qrmanager, qrmanager->mrows);
      proc_control_node_B.totalRank = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.totalRank <= nDepInd - 1)) {
        proc_control_node_B.qtb = 0.0;
        proc_control_node_B.ix_er = ((proc_control_node_B.mTotalWorkingEq -
          proc_control_node_B.totalRank) - 1) * qrmanager->ldq;
        proc_control_node_B.iy_n = 0;
        proc_control_node_B.b_k_hg = 0;
        while (proc_control_node_B.b_k_hg <= proc_control_node_B.mTotalWorkingEq
               - 1) {
          proc_control_node_B.qtb += qrmanager->Q.data[proc_control_node_B.ix_er]
            * workingset->bwset.data[proc_control_node_B.iy_n];
          proc_control_node_B.ix_er++;
          proc_control_node_B.iy_n++;
          proc_control_node_B.b_k_hg++;
        }

        if (fabs(proc_control_node_B.qtb) >= proc_control_node_B.tol) {
          nDepInd = -1;
          exitg1 = true;
        } else {
          proc_control_node_B.totalRank++;
        }
      }
    }

    if (nDepInd > 0) {
      proc_control_node_B.totalRank = 0;
      while (proc_control_node_B.totalRank <=
             proc_control_node_B.mTotalWorkingEq - 1) {
        proc_control_node_B.ix_er = qrmanager->ldq *
          proc_control_node_B.totalRank;
        proc_control_node_B.iy_n = workingset->ldA *
          proc_control_node_B.totalRank;
        proc_control_node_B.b_k_hg = 1;
        while (proc_control_node_B.b_k_hg - 1 <= proc_control_node_B.nVar_h) {
          qrmanager->QR.data[(proc_control_node_B.ix_er +
                              proc_control_node_B.b_k_hg) - 1] =
            workingset->ATwset.data[(proc_control_node_B.iy_n +
            proc_control_node_B.b_k_hg) - 1];
          proc_control_node_B.b_k_hg++;
        }

        proc_control_node_B.totalRank++;
      }

      proc_control_node_B.nVar_h = 0;
      while (proc_control_node_B.nVar_h <= workingset->nWConstr[0] - 1) {
        qrmanager->jpvt.data[proc_control_node_B.nVar_h] = 1;
        proc_control_node_B.nVar_h++;
      }

      proc_control_node_B.nVar_h = workingset->nWConstr[0];
      while (proc_control_node_B.nVar_h + 1 <=
             proc_control_node_B.mTotalWorkingEq) {
        qrmanager->jpvt.data[proc_control_node_B.nVar_h] = 0;
        proc_control_node_B.nVar_h++;
      }

      proc_control_node_factorQRE_f(qrmanager, workingset->nVar,
        proc_control_node_B.mTotalWorkingEq);
      proc_control_node_B.nVar_h = 0;
      while (proc_control_node_B.nVar_h <= nDepInd - 1) {
        memspace->workspace_int.data[proc_control_node_B.nVar_h] =
          qrmanager->jpvt.data[(proc_control_node_B.mTotalWorkingEq - nDepInd) +
          proc_control_node_B.nVar_h];
        proc_control_node_B.nVar_h++;
      }

      proc_control_node_countsort(memspace->workspace_int.data, nDepInd,
        memspace->workspace_sort.data, 1, proc_control_node_B.mTotalWorkingEq);
      proc_control_node_B.mTotalWorkingEq = nDepInd - 1;
      while (proc_control_node_B.mTotalWorkingEq + 1 > 0) {
        proc_control_node_B.nVar_h = (workingset->nWConstr[0] +
          workingset->nWConstr[1]) - 1;
        if ((proc_control_node_B.nVar_h + 1 != 0) &&
            (memspace->workspace_int.data[proc_control_node_B.mTotalWorkingEq] <=
             proc_control_node_B.nVar_h + 1)) {
          if ((proc_control_node_B.nVar_h + 1 == workingset->nActiveConstr) ||
              (proc_control_node_B.nVar_h + 1 == memspace->
               workspace_int.data[proc_control_node_B.mTotalWorkingEq])) {
            workingset->mEqRemoved++;
            workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1];
            proc_control_node_removeConstr(workingset,
              memspace->workspace_int.data[proc_control_node_B.mTotalWorkingEq]);
          } else {
            workingset->mEqRemoved++;
            proc_control_node_B.totalRank = workingset->Wid.data
              [memspace->workspace_int.data[proc_control_node_B.mTotalWorkingEq]
              - 1] - 1;
            workingset->indexEqRemoved[workingset->mEqRemoved - 1] =
              workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1];
            workingset->isActiveConstr.data[(workingset->isActiveIdx
              [workingset->Wid.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] - 1]
              + workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1]) - 2]
              = false;
            workingset->Wid.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] =
              workingset->Wid.data[proc_control_node_B.nVar_h];
            workingset->Wlocalidx.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] =
              workingset->Wlocalidx.data[proc_control_node_B.nVar_h];
            proc_control_node_B.ix_er = 0;
            while (proc_control_node_B.ix_er <= workingset->nVar - 1) {
              workingset->ATwset.data[proc_control_node_B.ix_er +
                workingset->ldA * (memspace->
                                   workspace_int.data[proc_control_node_B.mTotalWorkingEq]
                                   - 1)] = workingset->ATwset.data
                [workingset->ldA * proc_control_node_B.nVar_h +
                proc_control_node_B.ix_er];
              proc_control_node_B.ix_er++;
            }

            workingset->bwset.data[memspace->
              workspace_int.data[proc_control_node_B.mTotalWorkingEq] - 1] =
              workingset->bwset.data[proc_control_node_B.nVar_h];
            proc_control_node_B.ix_er = workingset->nActiveConstr - 1;
            workingset->Wid.data[proc_control_node_B.nVar_h] =
              workingset->Wid.data[workingset->nActiveConstr - 1];
            workingset->Wlocalidx.data[proc_control_node_B.nVar_h] =
              workingset->Wlocalidx.data[proc_control_node_B.ix_er];
            proc_control_node_B.iy_n = 0;
            while (proc_control_node_B.iy_n <= workingset->nVar - 1) {
              workingset->ATwset.data[proc_control_node_B.iy_n + workingset->ldA
                * proc_control_node_B.nVar_h] = workingset->
                ATwset.data[workingset->ldA * proc_control_node_B.ix_er +
                proc_control_node_B.iy_n];
              proc_control_node_B.iy_n++;
            }

            workingset->bwset.data[proc_control_node_B.nVar_h] =
              workingset->bwset.data[proc_control_node_B.ix_er];
            workingset->nActiveConstr--;
            workingset->nWConstr[proc_control_node_B.totalRank]--;
          }
        }

        proc_control_node_B.mTotalWorkingEq--;
      }
    }
  }

  return nDepInd;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_contro_removeAllIneqConstr
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj)
{
  int32_T idx_global;
  for (idx_global = obj->nWConstr[0] + obj->nWConstr[1]; idx_global <
       obj->nActiveConstr; idx_global++) {
    obj->isActiveConstr.data[(obj->isActiveIdx[obj->Wid.data[idx_global] - 1] +
      obj->Wlocalidx.data[idx_global]) - 2] = false;
  }

  obj->nWConstr[2] = 0;
  obj->nWConstr[3] = 0;
  obj->nWConstr[4] = 0;
  obj->nActiveConstr = obj->nWConstr[0] + obj->nWConstr[1];
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_contr_RemoveDependentIneq_
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *
   qrmanager, s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace)
{
  proc_control_node_B.nFixedConstr_n = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  proc_control_node_B.nVar_jf = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    proc_control_node_B.tol_ln = 100.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    proc_control_node_B.nDepIneq_g = 0;
    while (proc_control_node_B.nDepIneq_g <= proc_control_node_B.nFixedConstr_n
           - 1) {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq_g] = 1;
      proc_control_node_B.nDepIneq_g++;
    }

    proc_control_node_B.nDepIneq_g = proc_control_node_B.nFixedConstr_n + 1;
    while (proc_control_node_B.nDepIneq_g <= workingset->nActiveConstr) {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq_g - 1] = 0;
      proc_control_node_B.nDepIneq_g++;
    }

    proc_control_node_B.nDepIneq_g = 0;
    while (proc_control_node_B.nDepIneq_g <= workingset->nActiveConstr - 1) {
      proc_control_node_B.idxPosQR_k = qrmanager->ldq *
        proc_control_node_B.nDepIneq_g;
      proc_control_node_B.idxPosATwset_o = workingset->ldA *
        proc_control_node_B.nDepIneq_g;
      proc_control_node_B.k_ks = 1;
      while (proc_control_node_B.k_ks - 1 <= proc_control_node_B.nVar_jf - 1) {
        qrmanager->QR.data[(proc_control_node_B.idxPosQR_k +
                            proc_control_node_B.k_ks) - 1] =
          workingset->ATwset.data[(proc_control_node_B.idxPosATwset_o +
          proc_control_node_B.k_ks) - 1];
        proc_control_node_B.k_ks++;
      }

      proc_control_node_B.nDepIneq_g++;
    }

    proc_control_node_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    proc_control_node_B.nDepIneq_g = 0;
    proc_control_node_B.idxPosQR_k = workingset->nActiveConstr - 1;
    while (proc_control_node_B.idxPosQR_k + 1 > proc_control_node_B.nVar_jf) {
      proc_control_node_B.nDepIneq_g++;
      memspace->workspace_int.data[proc_control_node_B.nDepIneq_g - 1] =
        qrmanager->jpvt.data[proc_control_node_B.idxPosQR_k];
      proc_control_node_B.idxPosQR_k--;
    }

    if (proc_control_node_B.idxPosQR_k + 1 <= workingset->nVar) {
      proc_control_node_B.nVar_jf = qrmanager->ldq *
        proc_control_node_B.idxPosQR_k + proc_control_node_B.idxPosQR_k;
      while ((proc_control_node_B.idxPosQR_k + 1 >
              proc_control_node_B.nFixedConstr_n) && (fabs(qrmanager->
               QR.data[proc_control_node_B.nVar_jf]) <
              proc_control_node_B.tol_ln)) {
        proc_control_node_B.nDepIneq_g++;
        memspace->workspace_int.data[proc_control_node_B.nDepIneq_g - 1] =
          qrmanager->jpvt.data[proc_control_node_B.idxPosQR_k];
        proc_control_node_B.idxPosQR_k--;
        proc_control_node_B.nVar_jf = (proc_control_node_B.nVar_jf -
          qrmanager->ldq) - 1;
      }
    }

    proc_control_node_countsort(memspace->workspace_int.data,
      proc_control_node_B.nDepIneq_g, memspace->workspace_sort.data,
      proc_control_node_B.nFixedConstr_n + 1, workingset->nActiveConstr);
    proc_control_node_B.nFixedConstr_n = proc_control_node_B.nDepIneq_g;
    while (proc_control_node_B.nFixedConstr_n > 0) {
      proc_control_node_removeConstr(workingset, memspace->
        workspace_int.data[proc_control_node_B.nFixedConstr_n - 1]);
      proc_control_node_B.nFixedConstr_n--;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgeqrf(real_T A_data[],
  const int32_T A_size[2], int32_T m, int32_T n, real_T tau_data[], int32_T
  *tau_size)
{
  if (A_size[0] < A_size[1]) {
    proc_control_node_B.minmana = A_size[0];
  } else {
    proc_control_node_B.minmana = A_size[1];
  }

  if (m < n) {
    proc_control_node_B.minmn = m;
  } else {
    proc_control_node_B.minmn = n;
  }

  *tau_size = proc_control_node_B.minmana;
  if (0 <= proc_control_node_B.minmana - 1) {
    memset(&tau_data[0], 0, proc_control_node_B.minmana * sizeof(real_T));
  }

  if (proc_control_node_B.minmn >= 1) {
    proc_control_node_qrf(A_data, A_size, m, n, proc_control_node_B.minmn,
                          tau_data);
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factorQR_h
  (s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *obj, const real_T A_data[], int32_T mrows,
   int32_T ncols, int32_T ldA)
{
  boolean_T guard1 = false;
  proc_control_node_B.iA0 = mrows * ncols;
  guard1 = false;
  if (proc_control_node_B.iA0 > 0) {
    proc_control_node_B.b_idx_f = 0;
    while (proc_control_node_B.b_idx_f <= ncols - 1) {
      proc_control_node_B.iA0 = ldA * proc_control_node_B.b_idx_f;
      proc_control_node_B.iQR0_d = obj->ldq * proc_control_node_B.b_idx_f;
      proc_control_node_B.obj = 1;
      while (proc_control_node_B.obj - 1 <= mrows - 1) {
        obj->QR.data[(proc_control_node_B.iQR0_d + proc_control_node_B.obj) - 1]
          = A_data[(proc_control_node_B.iA0 + proc_control_node_B.obj) - 1];
        proc_control_node_B.obj++;
      }

      proc_control_node_B.b_idx_f++;
    }

    guard1 = true;
  } else if (proc_control_node_B.iA0 == 0) {
    obj->mrows = mrows;
    obj->ncols = ncols;
    obj->minRowCol = 0;
  } else {
    guard1 = true;
  }

  if (guard1) {
    obj->usedPivoting = false;
    obj->mrows = mrows;
    obj->ncols = ncols;
    proc_control_node_B.b_idx_f = 0;
    while (proc_control_node_B.b_idx_f <= ncols - 1) {
      obj->jpvt.data[proc_control_node_B.b_idx_f] = proc_control_node_B.b_idx_f
        + 1;
      proc_control_node_B.b_idx_f++;
    }

    if (mrows < ncols) {
      obj->minRowCol = mrows;
    } else {
      obj->minRowCol = ncols;
    }

    proc_control_node_B.b_idx_f = obj->QR.size[0] * obj->QR.size[1];
    for (proc_control_node_B.iA0 = 0; proc_control_node_B.iA0 <
         proc_control_node_B.b_idx_f; proc_control_node_B.iA0++) {
    }

    proc_control_node_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols,
      obj->tau.data, &obj->tau.size);
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factorQR
  (s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *obj, int32_T mrows, int32_T ncols)
{
  obj->usedPivoting = false;
  obj->mrows = mrows;
  obj->ncols = ncols;
  proc_control_node_B.idx_h = 0;
  while (proc_control_node_B.idx_h <= ncols - 1) {
    obj->jpvt.data[proc_control_node_B.idx_h] = proc_control_node_B.idx_h + 1;
    proc_control_node_B.idx_h++;
  }

  if (mrows < ncols) {
    obj->minRowCol = mrows;
  } else {
    obj->minRowCol = ncols;
  }

  proc_control_node_B.idx_h = obj->QR.size[0] * obj->QR.size[1];
  for (proc_control_node_B.i40 = 0; proc_control_node_B.i40 <
       proc_control_node_B.idx_h; proc_control_node_B.i40++) {
  }

  proc_control_node_xgeqrf(obj->QR.data, obj->QR.size, mrows, ncols,
    obj->tau.data, &obj->tau.size);
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtmcj(int32_T m,
  int32_T n, const real_T A_data[], int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  int32_T b;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    proc_control_node_B.b_iy_p = 0;
    while (proc_control_node_B.b_iy_p <= n - 1) {
      y_data[proc_control_node_B.b_iy_p] = -y_data[proc_control_node_B.b_iy_p];
      proc_control_node_B.b_iy_p++;
    }

    proc_control_node_B.iy_hv = 0;
    proc_control_node_B.b_iy_p = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= proc_control_node_B.b_iy_p)) || ((lda < 0) &&
            (iac >= proc_control_node_B.b_iy_p))) {
      proc_control_node_B.ix_in = 0;
      proc_control_node_B.c_e5 = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        proc_control_node_B.c_e5 += x_data[proc_control_node_B.ix_in] *
          A_data[ia - 1];
        proc_control_node_B.ix_in++;
      }

      y_data[proc_control_node_B.iy_hv] += proc_control_node_B.c_e5;
      proc_control_node_B.iy_hv++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtmc(int32_T n, const
  real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    proc_control_node_B.iy_p = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      proc_control_node_B.ix_ay = 0;
      proc_control_node_B.c_h = 0.0;
      for (ia = iac; ia <= iac + 154; ia++) {
        proc_control_node_B.c_h += x_data[proc_control_node_B.ix_ay] * A_data[ia
          - 1];
        proc_control_node_B.ix_ay++;
      }

      y_data[proc_control_node_B.iy_p] += proc_control_node_B.c_h;
      proc_control_node_B.iy_p++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
real_T proc_control_nodeModelClass::proc_con_maxConstraintViolation
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj, const real_T x_data[])
{
  real_T v;
  proc_control_node_B.mLB_m = obj->sizes[3];
  proc_control_node_B.mUB_e = obj->sizes[4];
  proc_control_node_B.mFixed_e = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    proc_control_node_B.mIneq_il = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_fw = 0;
      while (proc_control_node_B.b_k_fw <= proc_control_node_B.mIneq_il) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_fw] =
          obj->bineq.data[proc_control_node_B.b_k_fw];
        proc_control_node_B.b_k_fw++;
      }

      proc_control_node_xgemv_mtmc(obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_fw = 0;
      while (proc_control_node_B.b_k_fw <= proc_control_node_B.mIneq_il) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_fw] -=
          x_data[proc_control_node_B.b_k_fw + 155];
        proc_control_node_B.u1_c = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_fw];
        if ((!(v > proc_control_node_B.u1_c)) && (!rtIsNaN
             (proc_control_node_B.u1_c))) {
          v = proc_control_node_B.u1_c;
        }

        proc_control_node_B.b_k_fw++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_node_xgemv_mtmc(130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (proc_control_node_B.b_k_fw = 0; proc_control_node_B.b_k_fw < 130;
         proc_control_node_B.b_k_fw++) {
      obj->maxConstrWorkspace.data[proc_control_node_B.b_k_fw] =
        (obj->maxConstrWorkspace.data[proc_control_node_B.b_k_fw] - x_data
         [(proc_control_node_B.mIneq_il + proc_control_node_B.b_k_fw) + 156]) +
        x_data[(obj->sizes[2] + proc_control_node_B.b_k_fw) + 285];
      proc_control_node_B.u1_c = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.b_k_fw]);
      if ((!(v > proc_control_node_B.u1_c)) && (!rtIsNaN
           (proc_control_node_B.u1_c))) {
        v = proc_control_node_B.u1_c;
      }
    }
  } else {
    v = 0.0;
    proc_control_node_B.mIneq_il = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_fw = 0;
      while (proc_control_node_B.b_k_fw <= proc_control_node_B.mIneq_il) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_fw] =
          obj->bineq.data[proc_control_node_B.b_k_fw];
        proc_control_node_B.b_k_fw++;
      }

      proc_control_node_xgemv_mtmcj(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_fw = 0;
      while (proc_control_node_B.b_k_fw <= proc_control_node_B.mIneq_il) {
        proc_control_node_B.u1_c = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_fw];
        if ((!(v > proc_control_node_B.u1_c)) && (!rtIsNaN
             (proc_control_node_B.u1_c))) {
          v = proc_control_node_B.u1_c;
        }

        proc_control_node_B.b_k_fw++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_node_xgemv_mtmcj(obj->nVar, 130, obj->Aeq.data, obj->ldA,
      x_data, obj->maxConstrWorkspace.data);
    for (proc_control_node_B.mIneq_il = 0; proc_control_node_B.mIneq_il < 130;
         proc_control_node_B.mIneq_il++) {
      proc_control_node_B.u1_c = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.mIneq_il]);
      if ((!(v > proc_control_node_B.u1_c)) && (!rtIsNaN
           (proc_control_node_B.u1_c))) {
        v = proc_control_node_B.u1_c;
      }
    }
  }

  if (proc_control_node_B.mLB_m > 0) {
    proc_control_node_B.mIneq_il = 0;
    while (proc_control_node_B.mIneq_il <= proc_control_node_B.mLB_m - 1) {
      proc_control_node_B.u1_c = -x_data[obj->
        indexLB.data[proc_control_node_B.mIneq_il] - 1] - obj->lb.data
        [obj->indexLB.data[proc_control_node_B.mIneq_il] - 1];
      if ((!(v > proc_control_node_B.u1_c)) && (!rtIsNaN
           (proc_control_node_B.u1_c))) {
        v = proc_control_node_B.u1_c;
      }

      proc_control_node_B.mIneq_il++;
    }
  }

  if (proc_control_node_B.mUB_e > 0) {
    proc_control_node_B.mLB_m = 0;
    while (proc_control_node_B.mLB_m <= proc_control_node_B.mUB_e - 1) {
      proc_control_node_B.u1_c = x_data[obj->
        indexUB.data[proc_control_node_B.mLB_m] - 1] - obj->ub.data
        [obj->indexUB.data[proc_control_node_B.mLB_m] - 1];
      if ((!(v > proc_control_node_B.u1_c)) && (!rtIsNaN
           (proc_control_node_B.u1_c))) {
        v = proc_control_node_B.u1_c;
      }

      proc_control_node_B.mLB_m++;
    }
  }

  if (proc_control_node_B.mFixed_e > 0) {
    proc_control_node_B.mUB_e = 0;
    while (proc_control_node_B.mUB_e <= proc_control_node_B.mFixed_e - 1) {
      proc_control_node_B.u1_c = fabs(x_data[obj->
        indexFixed.data[proc_control_node_B.mUB_e] - 1] - obj->ub.data
        [obj->indexFixed.data[proc_control_node_B.mUB_e] - 1]);
      if ((!(v > proc_control_node_B.u1_c)) && (!rtIsNaN
           (proc_control_node_B.u1_c))) {
        v = proc_control_node_B.u1_c;
      }

      proc_control_node_B.mUB_e++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtmcjb(int32_T m,
  int32_T n, const real_T A_data[], int32_T lda, const real_T x_data[], int32_T
  ix0, real_T y_data[])
{
  int32_T b;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    proc_control_node_B.b_iy_o = 0;
    while (proc_control_node_B.b_iy_o <= n - 1) {
      y_data[proc_control_node_B.b_iy_o] = -y_data[proc_control_node_B.b_iy_o];
      proc_control_node_B.b_iy_o++;
    }

    proc_control_node_B.iy_ml = 0;
    proc_control_node_B.b_iy_o = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= proc_control_node_B.b_iy_o)) || ((lda < 0) &&
            (iac >= proc_control_node_B.b_iy_o))) {
      proc_control_node_B.ix_g = ix0;
      proc_control_node_B.c_l = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        proc_control_node_B.c_l += x_data[proc_control_node_B.ix_g - 1] *
          A_data[ia - 1];
        proc_control_node_B.ix_g++;
      }

      y_data[proc_control_node_B.iy_ml] += proc_control_node_B.c_l;
      proc_control_node_B.iy_ml++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
real_T proc_control_nodeModelClass::proc_c_maxConstraintViolation_d
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj, const real_T x_data[], int32_T ix0)
{
  real_T v;
  proc_control_node_B.mLB_n = obj->sizes[3];
  proc_control_node_B.mUB_c = obj->sizes[4];
  proc_control_node_B.mFixed_c = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    proc_control_node_B.mIneq_i = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_hu = 0;
      while (proc_control_node_B.b_k_hu <= proc_control_node_B.mIneq_i) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_hu] =
          obj->bineq.data[proc_control_node_B.b_k_hu];
        proc_control_node_B.b_k_hu++;
      }

      proc_control_node_xgemv_mtmcjb(155, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, ix0, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_hu = 0;
      while (proc_control_node_B.b_k_hu <= proc_control_node_B.mIneq_i) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_hu] -= x_data[(ix0
          + proc_control_node_B.b_k_hu) + 154];
        proc_control_node_B.u1_e = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_hu];
        if ((!(v > proc_control_node_B.u1_e)) && (!rtIsNaN
             (proc_control_node_B.u1_e))) {
          v = proc_control_node_B.u1_e;
        }

        proc_control_node_B.b_k_hu++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_node_xgemv_mtmcjb(155, 130, obj->Aeq.data, obj->ldA, x_data,
      ix0, obj->maxConstrWorkspace.data);
    for (proc_control_node_B.b_k_hu = 0; proc_control_node_B.b_k_hu < 130;
         proc_control_node_B.b_k_hu++) {
      obj->maxConstrWorkspace.data[proc_control_node_B.b_k_hu] =
        (obj->maxConstrWorkspace.data[proc_control_node_B.b_k_hu] - x_data[((ix0
           + proc_control_node_B.mIneq_i) + proc_control_node_B.b_k_hu) + 155])
        + x_data[((ix0 + obj->sizes[2]) + proc_control_node_B.b_k_hu) + 284];
      proc_control_node_B.u1_e = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.b_k_hu]);
      if ((!(v > proc_control_node_B.u1_e)) && (!rtIsNaN
           (proc_control_node_B.u1_e))) {
        v = proc_control_node_B.u1_e;
      }
    }
  } else {
    v = 0.0;
    proc_control_node_B.mIneq_i = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_hu = 0;
      while (proc_control_node_B.b_k_hu <= proc_control_node_B.mIneq_i) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_hu] =
          obj->bineq.data[proc_control_node_B.b_k_hu];
        proc_control_node_B.b_k_hu++;
      }

      proc_control_node_xgemv_mtmcjb(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, ix0, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_hu = 0;
      while (proc_control_node_B.b_k_hu <= proc_control_node_B.mIneq_i) {
        proc_control_node_B.u1_e = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_hu];
        if ((!(v > proc_control_node_B.u1_e)) && (!rtIsNaN
             (proc_control_node_B.u1_e))) {
          v = proc_control_node_B.u1_e;
        }

        proc_control_node_B.b_k_hu++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_node_xgemv_mtmcjb(obj->nVar, 130, obj->Aeq.data, obj->ldA,
      x_data, ix0, obj->maxConstrWorkspace.data);
    for (proc_control_node_B.mIneq_i = 0; proc_control_node_B.mIneq_i < 130;
         proc_control_node_B.mIneq_i++) {
      proc_control_node_B.u1_e = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.mIneq_i]);
      if ((!(v > proc_control_node_B.u1_e)) && (!rtIsNaN
           (proc_control_node_B.u1_e))) {
        v = proc_control_node_B.u1_e;
      }
    }
  }

  if (proc_control_node_B.mLB_n > 0) {
    proc_control_node_B.mIneq_i = 0;
    while (proc_control_node_B.mIneq_i <= proc_control_node_B.mLB_n - 1) {
      proc_control_node_B.u1_e = -x_data[(ix0 + obj->
        indexLB.data[proc_control_node_B.mIneq_i]) - 2] - obj->lb.data
        [obj->indexLB.data[proc_control_node_B.mIneq_i] - 1];
      if ((!(v > proc_control_node_B.u1_e)) && (!rtIsNaN
           (proc_control_node_B.u1_e))) {
        v = proc_control_node_B.u1_e;
      }

      proc_control_node_B.mIneq_i++;
    }
  }

  if (proc_control_node_B.mUB_c > 0) {
    proc_control_node_B.mLB_n = 0;
    while (proc_control_node_B.mLB_n <= proc_control_node_B.mUB_c - 1) {
      proc_control_node_B.u1_e = x_data[(ix0 + obj->
        indexUB.data[proc_control_node_B.mLB_n]) - 2] - obj->ub.data
        [obj->indexUB.data[proc_control_node_B.mLB_n] - 1];
      if ((!(v > proc_control_node_B.u1_e)) && (!rtIsNaN
           (proc_control_node_B.u1_e))) {
        v = proc_control_node_B.u1_e;
      }

      proc_control_node_B.mLB_n++;
    }
  }

  if (proc_control_node_B.mFixed_c > 0) {
    proc_control_node_B.mUB_c = 0;
    while (proc_control_node_B.mUB_c <= proc_control_node_B.mFixed_c - 1) {
      proc_control_node_B.u1_e = fabs(x_data[(ix0 + obj->
        indexFixed.data[proc_control_node_B.mUB_c]) - 2] - obj->ub.data
        [obj->indexFixed.data[proc_control_node_B.mUB_c] - 1]);
      if ((!(v > proc_control_node_B.u1_e)) && (!rtIsNaN
           (proc_control_node_B.u1_e))) {
        v = proc_control_node_B.u1_e;
      }

      proc_control_node_B.mUB_c++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S216>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_co_feasibleX0ForWorkingSet(real_T
  workspace_data[], const int32_T workspace_size[2], real_T xCurrent_data[],
  s_YaC65yvYSxJoOs4cRNYgnE_proc_T *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T
  *qrmanager)
{
  int32_T exitg1;
  boolean_T nonDegenerateWset;
  proc_control_node_B.mWConstr_tmp_tmp = workingset->nActiveConstr - 1;
  proc_control_node_B.nVar_b = workingset->nVar;
  nonDegenerateWset = true;
  if (workingset->nActiveConstr != 0) {
    proc_control_node_B.iy_g = 0;
    while (proc_control_node_B.iy_g <= proc_control_node_B.mWConstr_tmp_tmp) {
      workspace_data[proc_control_node_B.iy_g] = workingset->
        bwset.data[proc_control_node_B.iy_g];
      workspace_data[proc_control_node_B.iy_g + workspace_size[0]] =
        workingset->bwset.data[proc_control_node_B.iy_g];
      proc_control_node_B.iy_g++;
    }

    proc_control_node_B.ldq = workingset->ldA;
    if (workingset->nActiveConstr != 0) {
      proc_control_node_B.iy_g = 0;
      proc_control_node_B.iAcol = (workingset->nActiveConstr - 1) *
        workingset->ldA + 1;
      proc_control_node_B.b_br = 1;
      while (((proc_control_node_B.ldq > 0) && (proc_control_node_B.b_br <=
               proc_control_node_B.iAcol)) || ((proc_control_node_B.ldq < 0) &&
              (proc_control_node_B.b_br >= proc_control_node_B.iAcol))) {
        proc_control_node_B.ix_i = 0;
        proc_control_node_B.c_m = 0.0;
        proc_control_node_B.jBcol_p = (proc_control_node_B.b_br +
          proc_control_node_B.nVar_b) - 1;
        proc_control_node_B.b_ar = proc_control_node_B.b_br;
        while (proc_control_node_B.b_ar <= proc_control_node_B.jBcol_p) {
          proc_control_node_B.c_m += workingset->
            ATwset.data[proc_control_node_B.b_ar - 1] *
            xCurrent_data[proc_control_node_B.ix_i];
          proc_control_node_B.ix_i++;
          proc_control_node_B.b_ar++;
        }

        workspace_data[proc_control_node_B.iy_g] += -proc_control_node_B.c_m;
        proc_control_node_B.iy_g++;
        proc_control_node_B.b_br += proc_control_node_B.ldq;
      }
    }

    if (workingset->nActiveConstr >= workingset->nVar) {
      proc_control_node_B.ldq = 0;
      while (proc_control_node_B.ldq <= proc_control_node_B.nVar_b - 1) {
        proc_control_node_B.ix_i = qrmanager->ldq * proc_control_node_B.ldq;
        proc_control_node_B.iAcol = 0;
        while (proc_control_node_B.iAcol <= proc_control_node_B.mWConstr_tmp_tmp)
        {
          qrmanager->QR.data[proc_control_node_B.iAcol +
            proc_control_node_B.ix_i] = workingset->ATwset.data[workingset->ldA *
            proc_control_node_B.iAcol + proc_control_node_B.ldq];
          proc_control_node_B.iAcol++;
        }

        proc_control_node_B.ldq++;
      }

      proc_control_node_factorQR(qrmanager, workingset->nActiveConstr,
        workingset->nVar);
      proc_control_node_computeQ_(qrmanager, qrmanager->mrows);
      proc_control_node_B.ldq = qrmanager->ldq;
      proc_control_node_B.iy_g = workspace_size[0];
      proc_control_node_B.b_ar = workspace_size[0] * workspace_size[1];
      if (0 <= proc_control_node_B.b_ar - 1) {
        memcpy(&proc_control_node_B.B_data[0], &workspace_data[0],
               proc_control_node_B.b_ar * sizeof(real_T));
      }

      proc_control_node_B.ix_i = 0;
      while ((proc_control_node_B.iy_g > 0) && (proc_control_node_B.ix_i <=
              proc_control_node_B.iy_g)) {
        proc_control_node_B.iAcol = proc_control_node_B.ix_i +
          proc_control_node_B.nVar_b;
        proc_control_node_B.b_br = proc_control_node_B.ix_i;
        while (proc_control_node_B.b_br + 1 <= proc_control_node_B.iAcol) {
          workspace_data[proc_control_node_B.b_br] = 0.0;
          proc_control_node_B.b_br++;
        }

        proc_control_node_B.ix_i += proc_control_node_B.iy_g;
      }

      proc_control_node_B.b_br = -1;
      proc_control_node_B.jBcol_p = 0;
      while ((proc_control_node_B.iy_g > 0) && (proc_control_node_B.jBcol_p <=
              proc_control_node_B.iy_g)) {
        proc_control_node_B.b_ar = -1;
        proc_control_node_B.iAcol = proc_control_node_B.jBcol_p +
          proc_control_node_B.nVar_b;
        proc_control_node_B.ix_i = proc_control_node_B.jBcol_p;
        while (proc_control_node_B.ix_i + 1 <= proc_control_node_B.iAcol) {
          proc_control_node_B.c_m = 0.0;
          proc_control_node_B.ib = 1;
          while (proc_control_node_B.ib - 1 <=
                 proc_control_node_B.mWConstr_tmp_tmp) {
            proc_control_node_B.c_m += qrmanager->Q.data[proc_control_node_B.ib
              + proc_control_node_B.b_ar] *
              proc_control_node_B.B_data[proc_control_node_B.ib +
              proc_control_node_B.b_br];
            proc_control_node_B.ib++;
          }

          workspace_data[proc_control_node_B.ix_i] += proc_control_node_B.c_m;
          proc_control_node_B.b_ar += proc_control_node_B.ldq;
          proc_control_node_B.ix_i++;
        }

        proc_control_node_B.b_br += proc_control_node_B.iy_g;
        proc_control_node_B.jBcol_p += proc_control_node_B.iy_g;
      }

      proc_control_node_B.b_ar = workingset->nVar;
      while (proc_control_node_B.b_ar > 0) {
        proc_control_node_B.iAcol = (proc_control_node_B.b_ar - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.c_m = workspace_data[proc_control_node_B.b_ar + -1];
        if (proc_control_node_B.c_m != 0.0) {
          workspace_data[proc_control_node_B.b_ar + -1] =
            proc_control_node_B.c_m / qrmanager->
            QR.data[proc_control_node_B.b_ar + proc_control_node_B.iAcol];
          proc_control_node_B.ix_i = 1;
          while (proc_control_node_B.ix_i - 1 <= proc_control_node_B.b_ar - 2) {
            workspace_data[proc_control_node_B.ix_i + -1] -=
              workspace_data[proc_control_node_B.b_ar + -1] * qrmanager->
              QR.data[proc_control_node_B.ix_i + proc_control_node_B.iAcol];
            proc_control_node_B.ix_i++;
          }
        }

        proc_control_node_B.b_ar--;
      }

      proc_control_node_B.b_ar = workingset->nVar;
      while (proc_control_node_B.b_ar > 0) {
        proc_control_node_B.iAcol = (proc_control_node_B.b_ar - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.jBcol_p = (proc_control_node_B.iy_g +
          proc_control_node_B.b_ar) - 1;
        if (workspace_data[proc_control_node_B.jBcol_p] != 0.0) {
          workspace_data[proc_control_node_B.jBcol_p] /= qrmanager->
            QR.data[proc_control_node_B.b_ar + proc_control_node_B.iAcol];
          proc_control_node_B.ix_i = 1;
          while (proc_control_node_B.ix_i - 1 <= proc_control_node_B.b_ar - 2) {
            proc_control_node_B.mWConstr_tmp_tmp = (proc_control_node_B.iy_g +
              proc_control_node_B.ix_i) - 1;
            workspace_data[proc_control_node_B.mWConstr_tmp_tmp] -=
              workspace_data[proc_control_node_B.jBcol_p] * qrmanager->
              QR.data[proc_control_node_B.ix_i + proc_control_node_B.iAcol];
            proc_control_node_B.ix_i++;
          }
        }

        proc_control_node_B.b_ar--;
      }
    } else {
      proc_control_node_factorQR_h(qrmanager, workingset->ATwset.data,
        workingset->nVar, workingset->nActiveConstr, workingset->ldA);
      proc_control_node_computeQ_(qrmanager, qrmanager->minRowCol);
      proc_control_node_B.ldq = qrmanager->ldq;
      proc_control_node_B.iy_g = workspace_size[0];
      proc_control_node_B.b_ar = 1;
      while (proc_control_node_B.b_ar - 1 <=
             proc_control_node_B.mWConstr_tmp_tmp) {
        proc_control_node_B.iAcol = (proc_control_node_B.b_ar - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.c_m = workspace_data[proc_control_node_B.b_ar + -1];
        proc_control_node_B.ix_i = 1;
        while (proc_control_node_B.ix_i - 1 <= proc_control_node_B.b_ar - 2) {
          proc_control_node_B.c_m -= qrmanager->QR.data[proc_control_node_B.ix_i
            + proc_control_node_B.iAcol] *
            workspace_data[proc_control_node_B.ix_i + -1];
          proc_control_node_B.ix_i++;
        }

        workspace_data[proc_control_node_B.b_ar + -1] = proc_control_node_B.c_m /
          qrmanager->QR.data[proc_control_node_B.b_ar +
          proc_control_node_B.iAcol];
        proc_control_node_B.b_ar++;
      }

      proc_control_node_B.b_ar = 1;
      while (proc_control_node_B.b_ar - 1 <=
             proc_control_node_B.mWConstr_tmp_tmp) {
        proc_control_node_B.iAcol = (proc_control_node_B.b_ar - 1) *
          proc_control_node_B.ldq - 1;
        proc_control_node_B.jBcol_p = (proc_control_node_B.iy_g +
          proc_control_node_B.b_ar) - 1;
        proc_control_node_B.c_m = workspace_data[proc_control_node_B.jBcol_p];
        proc_control_node_B.ix_i = 1;
        while (proc_control_node_B.ix_i - 1 <= proc_control_node_B.b_ar - 2) {
          proc_control_node_B.c_m -= qrmanager->QR.data[proc_control_node_B.ix_i
            + proc_control_node_B.iAcol] * workspace_data
            [(proc_control_node_B.iy_g + proc_control_node_B.ix_i) - 1];
          proc_control_node_B.ix_i++;
        }

        workspace_data[proc_control_node_B.jBcol_p] = proc_control_node_B.c_m /
          qrmanager->QR.data[proc_control_node_B.b_ar +
          proc_control_node_B.iAcol];
        proc_control_node_B.b_ar++;
      }

      proc_control_node_B.b_ar = workspace_size[0] * workspace_size[1];
      if (0 <= proc_control_node_B.b_ar - 1) {
        memcpy(&proc_control_node_B.B_data[0], &workspace_data[0],
               proc_control_node_B.b_ar * sizeof(real_T));
      }

      proc_control_node_B.ix_i = 0;
      while ((proc_control_node_B.iy_g > 0) && (proc_control_node_B.ix_i <=
              proc_control_node_B.iy_g)) {
        proc_control_node_B.iAcol = proc_control_node_B.ix_i +
          proc_control_node_B.nVar_b;
        proc_control_node_B.b_br = proc_control_node_B.ix_i;
        while (proc_control_node_B.b_br + 1 <= proc_control_node_B.iAcol) {
          workspace_data[proc_control_node_B.b_br] = 0.0;
          proc_control_node_B.b_br++;
        }

        proc_control_node_B.ix_i += proc_control_node_B.iy_g;
      }

      proc_control_node_B.jBcol_p = 1;
      proc_control_node_B.b_ar = 0;
      while ((proc_control_node_B.iy_g > 0) && (proc_control_node_B.b_ar <=
              proc_control_node_B.iy_g)) {
        proc_control_node_B.iAcol = -1;
        proc_control_node_B.ix_i = proc_control_node_B.jBcol_p +
          proc_control_node_B.mWConstr_tmp_tmp;
        proc_control_node_B.ib = proc_control_node_B.jBcol_p;
        while (proc_control_node_B.ib <= proc_control_node_B.ix_i) {
          proc_control_node_B.b_br = proc_control_node_B.iAcol;
          proc_control_node_B.f_h = proc_control_node_B.b_ar +
            proc_control_node_B.nVar_b;
          proc_control_node_B.b_ic = proc_control_node_B.b_ar;
          while (proc_control_node_B.b_ic + 1 <= proc_control_node_B.f_h) {
            proc_control_node_B.b_br++;
            workspace_data[proc_control_node_B.b_ic] +=
              proc_control_node_B.B_data[proc_control_node_B.ib - 1] *
              qrmanager->Q.data[proc_control_node_B.b_br];
            proc_control_node_B.b_ic++;
          }

          proc_control_node_B.iAcol += proc_control_node_B.ldq;
          proc_control_node_B.ib++;
        }

        proc_control_node_B.jBcol_p += proc_control_node_B.iy_g;
        proc_control_node_B.b_ar += proc_control_node_B.iy_g;
      }
    }

    proc_control_node_B.iy_g = 0;
    do {
      exitg1 = 0;
      if (proc_control_node_B.iy_g <= proc_control_node_B.nVar_b - 1) {
        proc_control_node_B.c_m = workspace_data[proc_control_node_B.iy_g];
        if (rtIsInf(proc_control_node_B.c_m) || rtIsNaN(proc_control_node_B.c_m))
        {
          nonDegenerateWset = false;
          exitg1 = 1;
        } else {
          proc_control_node_B.c_m = workspace_data[proc_control_node_B.iy_g +
            workspace_size[0]];
          if (rtIsInf(proc_control_node_B.c_m) || rtIsNaN
              (proc_control_node_B.c_m)) {
            nonDegenerateWset = false;
            exitg1 = 1;
          } else {
            proc_control_node_B.iy_g++;
          }
        }
      } else {
        proc_control_node_B.iy_g = 0;
        while (proc_control_node_B.iy_g <= proc_control_node_B.nVar_b - 1) {
          workspace_data[proc_control_node_B.iy_g] +=
            xCurrent_data[proc_control_node_B.iy_g];
          proc_control_node_B.iy_g++;
        }

        proc_control_node_B.c_m = proc_con_maxConstraintViolation(workingset,
          workspace_data);
        proc_control_node_B.constrViolation_basicX =
          proc_c_maxConstraintViolation_d(workingset, workspace_data,
          workspace_size[0] + 1);
        if ((proc_control_node_B.c_m <= 2.2204460492503131E-16) ||
            (proc_control_node_B.c_m <
             proc_control_node_B.constrViolation_basicX)) {
          proc_control_node_B.iy_g = 0;
          while (proc_control_node_B.iy_g <= proc_control_node_B.nVar_b - 1) {
            xCurrent_data[proc_control_node_B.iy_g] =
              workspace_data[proc_control_node_B.iy_g];
            proc_control_node_B.iy_g++;
          }
        } else {
          proc_control_node_B.iy_g = 0;
          while (proc_control_node_B.iy_g <= proc_control_node_B.nVar_b - 1) {
            xCurrent_data[proc_control_node_B.iy_g] =
              workspace_data[workspace_size[0] + proc_control_node_B.iy_g];
            proc_control_node_B.iy_g++;
          }
        }

        exitg1 = 1;
      }
    } while (exitg1 == 0);
  }

  return nonDegenerateWset;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_con_RemoveDependentIneq__f
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *
   qrmanager, s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace)
{
  proc_control_node_B.nFixedConstr = workingset->nWConstr[0] +
    workingset->nWConstr[1];
  proc_control_node_B.nVar_c = workingset->nVar;
  if ((workingset->nWConstr[2] + workingset->nWConstr[3]) + workingset->
      nWConstr[4] > 0) {
    proc_control_node_B.tol_l = 1000.0 * static_cast<real_T>(workingset->nVar) *
      2.2204460492503131E-16;
    proc_control_node_B.nDepIneq = 0;
    while (proc_control_node_B.nDepIneq <= proc_control_node_B.nFixedConstr - 1)
    {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq] = 1;
      proc_control_node_B.nDepIneq++;
    }

    proc_control_node_B.nDepIneq = proc_control_node_B.nFixedConstr + 1;
    while (proc_control_node_B.nDepIneq <= workingset->nActiveConstr) {
      qrmanager->jpvt.data[proc_control_node_B.nDepIneq - 1] = 0;
      proc_control_node_B.nDepIneq++;
    }

    proc_control_node_B.nDepIneq = 0;
    while (proc_control_node_B.nDepIneq <= workingset->nActiveConstr - 1) {
      proc_control_node_B.idxPosQR = qrmanager->ldq *
        proc_control_node_B.nDepIneq;
      proc_control_node_B.idxPosATwset = workingset->ldA *
        proc_control_node_B.nDepIneq;
      proc_control_node_B.k_dh = 1;
      while (proc_control_node_B.k_dh - 1 <= proc_control_node_B.nVar_c - 1) {
        qrmanager->QR.data[(proc_control_node_B.idxPosQR +
                            proc_control_node_B.k_dh) - 1] =
          workingset->ATwset.data[(proc_control_node_B.idxPosATwset +
          proc_control_node_B.k_dh) - 1];
        proc_control_node_B.k_dh++;
      }

      proc_control_node_B.nDepIneq++;
    }

    proc_control_node_factorQRE_f(qrmanager, workingset->nVar,
      workingset->nActiveConstr);
    proc_control_node_B.nDepIneq = 0;
    proc_control_node_B.idxPosQR = workingset->nActiveConstr - 1;
    while (proc_control_node_B.idxPosQR + 1 > proc_control_node_B.nVar_c) {
      proc_control_node_B.nDepIneq++;
      memspace->workspace_int.data[proc_control_node_B.nDepIneq - 1] =
        qrmanager->jpvt.data[proc_control_node_B.idxPosQR];
      proc_control_node_B.idxPosQR--;
    }

    if (proc_control_node_B.idxPosQR + 1 <= workingset->nVar) {
      proc_control_node_B.nVar_c = qrmanager->ldq * proc_control_node_B.idxPosQR
        + proc_control_node_B.idxPosQR;
      while ((proc_control_node_B.idxPosQR + 1 >
              proc_control_node_B.nFixedConstr) && (fabs(qrmanager->
               QR.data[proc_control_node_B.nVar_c]) < proc_control_node_B.tol_l))
      {
        proc_control_node_B.nDepIneq++;
        memspace->workspace_int.data[proc_control_node_B.nDepIneq - 1] =
          qrmanager->jpvt.data[proc_control_node_B.idxPosQR];
        proc_control_node_B.idxPosQR--;
        proc_control_node_B.nVar_c = (proc_control_node_B.nVar_c -
          qrmanager->ldq) - 1;
      }
    }

    proc_control_node_countsort(memspace->workspace_int.data,
      proc_control_node_B.nDepIneq, memspace->workspace_sort.data,
      proc_control_node_B.nFixedConstr + 1, workingset->nActiveConstr);
    proc_control_node_B.nFixedConstr = proc_control_node_B.nDepIneq;
    while (proc_control_node_B.nFixedConstr > 0) {
      proc_control_node_removeConstr(workingset, memspace->
        workspace_int.data[proc_control_node_B.nFixedConstr - 1]);
      proc_control_node_B.nFixedConstr--;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_xgemv_mtmcjbia(int32_T m,
  int32_T n, const real_T A_data[], int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  int32_T b;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    proc_control_node_B.b_iy_c1 = 0;
    while (proc_control_node_B.b_iy_c1 <= n - 1) {
      y_data[proc_control_node_B.b_iy_c1] = -y_data[proc_control_node_B.b_iy_c1];
      proc_control_node_B.b_iy_c1++;
    }

    proc_control_node_B.iy_f = 0;
    proc_control_node_B.b_iy_c1 = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= proc_control_node_B.b_iy_c1)) || ((lda < 0) &&
            (iac >= proc_control_node_B.b_iy_c1))) {
      proc_control_node_B.ix_ik = 0;
      proc_control_node_B.c_e = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        proc_control_node_B.c_e += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_ik];
        proc_control_node_B.ix_ik++;
      }

      y_data[proc_control_node_B.iy_f] += proc_control_node_B.c_e;
      proc_control_node_B.iy_f++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemv_mtmcjbi(int32_T n,
  const real_T A_data[], int32_T lda, const real_T x_data[], real_T y_data[])
{
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    proc_control_node_B.iy_c = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      proc_control_node_B.ix_d4 = 0;
      proc_control_node_B.c_na = 0.0;
      for (ia = iac; ia <= iac + 154; ia++) {
        proc_control_node_B.c_na += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_d4];
        proc_control_node_B.ix_d4++;
      }

      y_data[proc_control_node_B.iy_c] += proc_control_node_B.c_na;
      proc_control_node_B.iy_c++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
real_T proc_control_nodeModelClass::proc__maxConstraintViolation_du
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj, const real_T x_data[])
{
  real_T v;
  proc_control_node_B.mLB_e = obj->sizes[3];
  proc_control_node_B.mUB_h = obj->sizes[4];
  proc_control_node_B.mFixed_g = obj->sizes[0];
  if (obj->probType == 2) {
    v = 0.0;
    proc_control_node_B.mIneq_c = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_a = 0;
      while (proc_control_node_B.b_k_a <= proc_control_node_B.mIneq_c) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_a] =
          obj->bineq.data[proc_control_node_B.b_k_a];
        proc_control_node_B.b_k_a++;
      }

      proc_control_node_xgemv_mtmcjbi(obj->sizes[2], obj->Aineq.data, obj->ldA,
        x_data, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_a = 0;
      while (proc_control_node_B.b_k_a <= proc_control_node_B.mIneq_c) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_a] -=
          x_data[proc_control_node_B.b_k_a + 155];
        proc_control_node_B.u1_b = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_a];
        if ((!(v > proc_control_node_B.u1_b)) && (!rtIsNaN
             (proc_control_node_B.u1_b))) {
          v = proc_control_node_B.u1_b;
        }

        proc_control_node_B.b_k_a++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_node_xgemv_mtmcjbi(130, obj->Aeq.data, obj->ldA, x_data,
      obj->maxConstrWorkspace.data);
    for (proc_control_node_B.b_k_a = 0; proc_control_node_B.b_k_a < 130;
         proc_control_node_B.b_k_a++) {
      obj->maxConstrWorkspace.data[proc_control_node_B.b_k_a] =
        (obj->maxConstrWorkspace.data[proc_control_node_B.b_k_a] - x_data
         [(proc_control_node_B.mIneq_c + proc_control_node_B.b_k_a) + 156]) +
        x_data[(obj->sizes[2] + proc_control_node_B.b_k_a) + 285];
      proc_control_node_B.u1_b = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.b_k_a]);
      if ((!(v > proc_control_node_B.u1_b)) && (!rtIsNaN
           (proc_control_node_B.u1_b))) {
        v = proc_control_node_B.u1_b;
      }
    }
  } else {
    v = 0.0;
    proc_control_node_B.mIneq_c = obj->sizes[2] - 1;
    if (obj->Aineq.size != 0) {
      proc_control_node_B.b_k_a = 0;
      while (proc_control_node_B.b_k_a <= proc_control_node_B.mIneq_c) {
        obj->maxConstrWorkspace.data[proc_control_node_B.b_k_a] =
          obj->bineq.data[proc_control_node_B.b_k_a];
        proc_control_node_B.b_k_a++;
      }

      proc_control_nod_xgemv_mtmcjbia(obj->nVar, obj->sizes[2], obj->Aineq.data,
        obj->ldA, x_data, obj->maxConstrWorkspace.data);
      proc_control_node_B.b_k_a = 0;
      while (proc_control_node_B.b_k_a <= proc_control_node_B.mIneq_c) {
        proc_control_node_B.u1_b = obj->
          maxConstrWorkspace.data[proc_control_node_B.b_k_a];
        if ((!(v > proc_control_node_B.u1_b)) && (!rtIsNaN
             (proc_control_node_B.u1_b))) {
          v = proc_control_node_B.u1_b;
        }

        proc_control_node_B.b_k_a++;
      }
    }

    memcpy(&obj->maxConstrWorkspace.data[0], &obj->beq[0], 130U * sizeof(real_T));
    proc_control_nod_xgemv_mtmcjbia(obj->nVar, 130, obj->Aeq.data, obj->ldA,
      x_data, obj->maxConstrWorkspace.data);
    for (proc_control_node_B.mIneq_c = 0; proc_control_node_B.mIneq_c < 130;
         proc_control_node_B.mIneq_c++) {
      proc_control_node_B.u1_b = fabs(obj->
        maxConstrWorkspace.data[proc_control_node_B.mIneq_c]);
      if ((!(v > proc_control_node_B.u1_b)) && (!rtIsNaN
           (proc_control_node_B.u1_b))) {
        v = proc_control_node_B.u1_b;
      }
    }
  }

  if (proc_control_node_B.mLB_e > 0) {
    proc_control_node_B.mIneq_c = 0;
    while (proc_control_node_B.mIneq_c <= proc_control_node_B.mLB_e - 1) {
      proc_control_node_B.u1_b = -x_data[obj->
        indexLB.data[proc_control_node_B.mIneq_c] - 1] - obj->lb.data
        [obj->indexLB.data[proc_control_node_B.mIneq_c] - 1];
      if ((!(v > proc_control_node_B.u1_b)) && (!rtIsNaN
           (proc_control_node_B.u1_b))) {
        v = proc_control_node_B.u1_b;
      }

      proc_control_node_B.mIneq_c++;
    }
  }

  if (proc_control_node_B.mUB_h > 0) {
    proc_control_node_B.mLB_e = 0;
    while (proc_control_node_B.mLB_e <= proc_control_node_B.mUB_h - 1) {
      proc_control_node_B.u1_b = x_data[obj->
        indexUB.data[proc_control_node_B.mLB_e] - 1] - obj->ub.data
        [obj->indexUB.data[proc_control_node_B.mLB_e] - 1];
      if ((!(v > proc_control_node_B.u1_b)) && (!rtIsNaN
           (proc_control_node_B.u1_b))) {
        v = proc_control_node_B.u1_b;
      }

      proc_control_node_B.mLB_e++;
    }
  }

  if (proc_control_node_B.mFixed_g > 0) {
    proc_control_node_B.mUB_h = 0;
    while (proc_control_node_B.mUB_h <= proc_control_node_B.mFixed_g - 1) {
      proc_control_node_B.u1_b = fabs(x_data[obj->
        indexFixed.data[proc_control_node_B.mUB_h] - 1] - obj->ub.data
        [obj->indexFixed.data[proc_control_node_B.mUB_h] - 1]);
      if ((!(v > proc_control_node_B.u1_b)) && (!rtIsNaN
           (proc_control_node_B.u1_b))) {
        v = proc_control_node_B.u1_b;
      }

      proc_control_node_B.mUB_h++;
    }
  }

  return v;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_PresolveWorkingSet
  (s_SfTiiT1KRClFcMCE02xJjB_proc_T *solution, s_rz4qJMGW78cxvfZBKnU9SC_proc_T
   *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T *workingset,
   s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *qrmanager)
{
  boolean_T guard1 = false;
  boolean_T okWorkingSet;
  solution->state = 82;
  proc_control_node_B.b_a = proc_control_RemoveDependentEq_(memspace, workingset,
    qrmanager);
  if ((proc_control_node_B.b_a != -1) && (workingset->nActiveConstr <=
       qrmanager->ldq)) {
    proc_contr_RemoveDependentIneq_(workingset, qrmanager, memspace);
    proc_control_node_B.b_a = memspace->workspace_double.size[0] *
      memspace->workspace_double.size[1];
    for (proc_control_node_B.i37 = 0; proc_control_node_B.i37 <
         proc_control_node_B.b_a; proc_control_node_B.i37++) {
    }

    okWorkingSet = proc_co_feasibleX0ForWorkingSet
      (memspace->workspace_double.data, memspace->workspace_double.size,
       solution->xstar.data, workingset, qrmanager);
    guard1 = false;
    if (!okWorkingSet) {
      proc_con_RemoveDependentIneq__f(workingset, qrmanager, memspace);
      proc_control_node_B.b_a = memspace->workspace_double.size[0] *
        memspace->workspace_double.size[1];
      for (proc_control_node_B.i37 = 0; proc_control_node_B.i37 <
           proc_control_node_B.b_a; proc_control_node_B.i37++) {
      }

      okWorkingSet = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         solution->xstar.data, workingset, qrmanager);
      if (!okWorkingSet) {
        solution->state = -7;
      } else {
        guard1 = true;
      }
    } else {
      guard1 = true;
    }

    if (guard1) {
      if (workingset->nWConstr[0] + workingset->nWConstr[1] == workingset->nVar)
      {
        proc_control_node_B.constrViolation = proc__maxConstraintViolation_du
          (workingset, solution->xstar.data);
        if (proc_control_node_B.constrViolation > 0.02) {
          solution->state = -2;
        }
      }
    }
  } else {
    solution->state = -3;
    proc_contro_removeAllIneqConstr(workingset);
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_no_xgemv_mtmcjbiad(int32_T m,
  int32_T n, const real_T A[24025], int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  if ((m != 0) && (n != 0)) {
    proc_control_node_B.ix_l1 = 0;
    while (proc_control_node_B.ix_l1 <= m - 1) {
      y_data[proc_control_node_B.ix_l1] = 0.0;
      proc_control_node_B.ix_l1++;
    }

    proc_control_node_B.ix_l1 = 0;
    c = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= c)) || ((lda < 0) && (iac >= c))) {
      proc_control_node_B.iy_b4 = 0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        y_data[proc_control_node_B.iy_b4] += A[ia - 1] *
          x_data[proc_control_node_B.ix_l1];
        proc_control_node_B.iy_b4++;
      }

      proc_control_node_B.ix_l1++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_contro_computeGrad_StoreHx
  (s_syceGAKWionoNWyVws9jI_proc__T *obj, const real_T H[24025], const real_T
   f_data[], const real_T x_data[])
{
  switch (obj->objtype) {
   case 5:
    proc_control_node_B.maxRegVar = 0;
    while (proc_control_node_B.maxRegVar <= obj->nvar - 2) {
      obj->grad.data[proc_control_node_B.maxRegVar] = 0.0;
      proc_control_node_B.maxRegVar++;
    }

    obj->grad.data[obj->nvar - 1] = obj->gammaScalar;
    break;

   case 3:
    proc_control_no_xgemv_mtmcjbiad(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    proc_control_node_B.maxRegVar = 0;
    while (proc_control_node_B.maxRegVar <= obj->nvar - 1) {
      obj->grad.data[proc_control_node_B.maxRegVar] = obj->
        Hx.data[proc_control_node_B.maxRegVar];
      proc_control_node_B.maxRegVar++;
    }

    if (obj->hasLinear && (obj->nvar >= 1)) {
      proc_control_node_B.maxRegVar = obj->nvar - 1;
      proc_control_node_B.iy_k = 0;
      while (proc_control_node_B.iy_k <= proc_control_node_B.maxRegVar) {
        obj->grad.data[proc_control_node_B.iy_k] +=
          f_data[proc_control_node_B.iy_k];
        proc_control_node_B.iy_k++;
      }
    }
    break;

   default:
    proc_control_node_B.maxRegVar = obj->maxVar - 1;
    proc_control_no_xgemv_mtmcjbiad(obj->nvar, obj->nvar, H, obj->nvar, x_data,
      obj->Hx.data);
    proc_control_node_B.iy_k = obj->nvar;
    while (proc_control_node_B.iy_k + 1 <= proc_control_node_B.maxRegVar) {
      obj->Hx.data[proc_control_node_B.iy_k] = obj->beta *
        x_data[proc_control_node_B.iy_k];
      proc_control_node_B.iy_k++;
    }

    proc_control_node_B.d_i = 0;
    while (proc_control_node_B.d_i <= proc_control_node_B.maxRegVar - 1) {
      obj->grad.data[proc_control_node_B.d_i] = obj->
        Hx.data[proc_control_node_B.d_i];
      proc_control_node_B.d_i++;
    }

    if (obj->hasLinear && (obj->nvar >= 1)) {
      proc_control_node_B.maxRegVar = obj->nvar - 1;
      proc_control_node_B.iy_k = 0;
      while (proc_control_node_B.iy_k <= proc_control_node_B.maxRegVar) {
        obj->grad.data[proc_control_node_B.iy_k] +=
          f_data[proc_control_node_B.iy_k];
        proc_control_node_B.iy_k++;
      }
    }

    proc_control_node_B.maxRegVar = (obj->maxVar - obj->nvar) - 1;
    if (proc_control_node_B.maxRegVar >= 1) {
      proc_control_node_B.iy_k = obj->nvar;
      proc_control_node_B.d_i = 0;
      while (proc_control_node_B.d_i <= proc_control_node_B.maxRegVar - 1) {
        obj->grad.data[proc_control_node_B.iy_k] += obj->rho;
        proc_control_node_B.iy_k++;
        proc_control_node_B.d_i++;
      }
    }
    break;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
real_T proc_control_nodeModelClass::proc_contro_computeFval_ReuseHx(const
  s_syceGAKWionoNWyVws9jI_proc__T *obj, real_T workspace_data[], const real_T
  f_data[], const real_T x_data[])
{
  real_T val;
  int32_T c_k;
  int32_T d_k;
  int32_T maxRegVar;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    if (obj->hasLinear) {
      for (maxRegVar = 0; maxRegVar < obj->nvar; maxRegVar++) {
        workspace_data[maxRegVar] = 0.5 * obj->Hx.data[maxRegVar] +
          f_data[maxRegVar];
      }

      val = 0.0;
      if (obj->nvar >= 1) {
        for (maxRegVar = 0; maxRegVar < obj->nvar; maxRegVar++) {
          val += workspace_data[maxRegVar] * x_data[maxRegVar];
        }
      }
    } else {
      val = 0.0;
      if (obj->nvar >= 1) {
        for (maxRegVar = 0; maxRegVar < obj->nvar; maxRegVar++) {
          val += x_data[maxRegVar] * obj->Hx.data[maxRegVar];
        }
      }

      val *= 0.5;
    }
    break;

   default:
    maxRegVar = obj->maxVar - 1;
    if (obj->hasLinear) {
      for (d_k = 0; d_k < obj->nvar; d_k++) {
        workspace_data[d_k] = f_data[d_k];
      }

      d_k = obj->maxVar - obj->nvar;
      for (c_k = 0; c_k <= d_k - 2; c_k++) {
        workspace_data[obj->nvar + c_k] = obj->rho;
      }

      for (d_k = 0; d_k < maxRegVar; d_k++) {
        workspace_data[d_k] += 0.5 * obj->Hx.data[d_k];
      }

      val = 0.0;
      if (obj->maxVar - 1 >= 1) {
        for (maxRegVar = 0; maxRegVar <= obj->maxVar - 2; maxRegVar++) {
          val += workspace_data[maxRegVar] * x_data[maxRegVar];
        }
      }
    } else {
      val = 0.0;
      if (obj->maxVar - 1 >= 1) {
        for (d_k = 0; d_k <= obj->maxVar - 2; d_k++) {
          val += x_data[d_k] * obj->Hx.data[d_k];
        }
      }

      val *= 0.5;
      for (d_k = obj->nvar; d_k < maxRegVar; d_k++) {
        val += x_data[d_k] * obj->rho;
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xrotg(real_T *a, real_T *b,
  real_T *c, real_T *s)
{
  proc_control_node_B.roe = *b;
  proc_control_node_B.absa = fabs(*a);
  proc_control_node_B.absb = fabs(*b);
  if (proc_control_node_B.absa > proc_control_node_B.absb) {
    proc_control_node_B.roe = *a;
  }

  proc_control_node_B.scale_i = proc_control_node_B.absa +
    proc_control_node_B.absb;
  if (proc_control_node_B.scale_i == 0.0) {
    *s = 0.0;
    *c = 1.0;
    *b = 0.0;
  } else {
    proc_control_node_B.ads = proc_control_node_B.absa /
      proc_control_node_B.scale_i;
    proc_control_node_B.bds = proc_control_node_B.absb /
      proc_control_node_B.scale_i;
    proc_control_node_B.scale_i *= sqrt(proc_control_node_B.ads *
      proc_control_node_B.ads + proc_control_node_B.bds *
      proc_control_node_B.bds);
    if (proc_control_node_B.roe < 0.0) {
      proc_control_node_B.scale_i = -proc_control_node_B.scale_i;
    }

    *c = *a / proc_control_node_B.scale_i;
    *s = *b / proc_control_node_B.scale_i;
    if (proc_control_node_B.absa > proc_control_node_B.absb) {
      *b = *s;
    } else if (*c != 0.0) {
      *b = 1.0 / *c;
    } else {
      *b = 1.0;
    }
  }

  *a = proc_control_node_B.scale_i;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_deleteColMoveEnd
  (s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *obj, int32_T idx)
{
  int32_T QRk0;
  int32_T b_ix;
  int32_T d_k;
  int32_T ix;
  if (obj->usedPivoting) {
    proc_control_node_B.i_j4 = 1;
    while ((proc_control_node_B.i_j4 <= obj->ncols) && (obj->
            jpvt.data[proc_control_node_B.i_j4 - 1] != idx)) {
      proc_control_node_B.i_j4++;
    }

    idx = proc_control_node_B.i_j4;
  }

  if (idx >= obj->ncols) {
    obj->ncols--;
  } else {
    obj->jpvt.data[idx - 1] = obj->jpvt.data[obj->ncols - 1];
    proc_control_node_B.i_j4 = 0;
    while (proc_control_node_B.i_j4 <= obj->minRowCol - 1) {
      obj->QR.data[proc_control_node_B.i_j4 + obj->ldq * (idx - 1)] =
        obj->QR.data[(obj->ncols - 1) * obj->ldq + proc_control_node_B.i_j4];
      proc_control_node_B.i_j4++;
    }

    obj->ncols--;
    if (obj->mrows < obj->ncols) {
      obj->minRowCol = obj->mrows;
    } else {
      obj->minRowCol = obj->ncols;
    }

    if (idx < obj->mrows) {
      if (obj->mrows - 1 < obj->ncols) {
        proc_control_node_B.i_j4 = obj->mrows - 1;
      } else {
        proc_control_node_B.i_j4 = obj->ncols;
      }

      proc_control_node_B.k_pa = proc_control_node_B.i_j4;
      proc_control_node_B.idxRotGCol = (idx - 1) * obj->ldq;
      while (proc_control_node_B.k_pa >= idx) {
        QRk0 = proc_control_node_B.k_pa + proc_control_node_B.idxRotGCol;
        proc_control_node_B.b_temp_p = obj->QR.data[QRk0 - 1];
        proc_control_node_B.e_m = obj->QR.data[QRk0];
        proc_control_node_xrotg(&proc_control_node_B.b_temp_p,
          &proc_control_node_B.e_m, &proc_control_node_B.c_c_c,
          &proc_control_node_B.b_s_l);
        obj->QR.data[QRk0 - 1] = proc_control_node_B.b_temp_p;
        obj->QR.data[QRk0] = proc_control_node_B.e_m;
        obj->QR.data[proc_control_node_B.k_pa + obj->ldq *
          (proc_control_node_B.k_pa - 1)] = 0.0;
        QRk0 = obj->ldq * idx + proc_control_node_B.k_pa;
        b_ix = obj->ncols - idx;
        if (b_ix >= 1) {
          ix = QRk0 - 1;
          for (d_k = 0; d_k < b_ix; d_k++) {
            proc_control_node_B.b_temp_p = obj->QR.data[ix] *
              proc_control_node_B.c_c_c + obj->QR.data[QRk0] *
              proc_control_node_B.b_s_l;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * proc_control_node_B.c_c_c
              - obj->QR.data[ix] * proc_control_node_B.b_s_l;
            obj->QR.data[ix] = proc_control_node_B.b_temp_p;
            QRk0 += obj->ldq;
            ix += obj->ldq;
          }
        }

        QRk0 = (proc_control_node_B.k_pa - 1) * obj->ldq;
        if (obj->mrows >= 1) {
          b_ix = obj->ldq + QRk0;
          for (ix = 0; ix < obj->mrows; ix++) {
            proc_control_node_B.b_temp_p = obj->Q.data[QRk0] *
              proc_control_node_B.c_c_c + obj->Q.data[b_ix] *
              proc_control_node_B.b_s_l;
            obj->Q.data[b_ix] = obj->Q.data[b_ix] * proc_control_node_B.c_c_c -
              obj->Q.data[QRk0] * proc_control_node_B.b_s_l;
            obj->Q.data[QRk0] = proc_control_node_B.b_temp_p;
            b_ix++;
            QRk0++;
          }
        }

        proc_control_node_B.k_pa--;
      }

      proc_control_node_B.k_pa = idx + 1;
      while (proc_control_node_B.k_pa <= proc_control_node_B.i_j4) {
        QRk0 = proc_control_node_B.k_pa + (proc_control_node_B.k_pa - 1) *
          obj->ldq;
        proc_control_node_B.b_temp_p = obj->QR.data[QRk0 - 1];
        proc_control_node_B.e_m = obj->QR.data[QRk0];
        proc_control_node_xrotg(&proc_control_node_B.b_temp_p,
          &proc_control_node_B.e_m, &proc_control_node_B.c_c_c,
          &proc_control_node_B.b_s_l);
        obj->QR.data[QRk0 - 1] = proc_control_node_B.b_temp_p;
        obj->QR.data[QRk0] = proc_control_node_B.e_m;
        QRk0 = (obj->ldq + 1) * proc_control_node_B.k_pa;
        proc_control_node_B.idxRotGCol = obj->ncols - proc_control_node_B.k_pa;
        if (proc_control_node_B.idxRotGCol >= 1) {
          b_ix = QRk0 - 1;
          for (ix = 0; ix < proc_control_node_B.idxRotGCol; ix++) {
            proc_control_node_B.b_temp_p = obj->QR.data[b_ix] *
              proc_control_node_B.c_c_c + obj->QR.data[QRk0] *
              proc_control_node_B.b_s_l;
            obj->QR.data[QRk0] = obj->QR.data[QRk0] * proc_control_node_B.c_c_c
              - obj->QR.data[b_ix] * proc_control_node_B.b_s_l;
            obj->QR.data[b_ix] = proc_control_node_B.b_temp_p;
            QRk0 += obj->ldq;
            b_ix += obj->ldq;
          }
        }

        proc_control_node_B.idxRotGCol = (proc_control_node_B.k_pa - 1) *
          obj->ldq;
        if (obj->mrows >= 1) {
          QRk0 = obj->ldq + proc_control_node_B.idxRotGCol;
          for (b_ix = 0; b_ix < obj->mrows; b_ix++) {
            proc_control_node_B.b_temp_p = obj->
              Q.data[proc_control_node_B.idxRotGCol] * proc_control_node_B.c_c_c
              + obj->Q.data[QRk0] * proc_control_node_B.b_s_l;
            obj->Q.data[QRk0] = obj->Q.data[QRk0] * proc_control_node_B.c_c_c -
              obj->Q.data[proc_control_node_B.idxRotGCol] *
              proc_control_node_B.b_s_l;
            obj->Q.data[proc_control_node_B.idxRotGCol] =
              proc_control_node_B.b_temp_p;
            QRk0++;
            proc_control_node_B.idxRotGCol++;
          }
        }

        proc_control_node_B.k_pa++;
      }
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_strcmp(const char_T a[7])
{
  int32_T ret;
  static const char_T b[7] = { 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  ret = memcmp(&a[0], &b[0], 7);
  return ret == 0;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemm(int32_T m, int32_T n,
  int32_T k, const real_T A[24025], int32_T lda, const real_T B_data[], int32_T
  ib0, int32_T ldb, real_T C_data[], int32_T ldc)
{
  int32_T b_c;
  int32_T b_ic;
  int32_T d;
  int32_T ib;
  if ((m != 0) && (n != 0)) {
    b_c = (n - 1) * ldc;
    proc_control_node_B.br_g = 0;
    while (((ldc > 0) && (proc_control_node_B.br_g <= b_c)) || ((ldc < 0) &&
            (proc_control_node_B.br_g >= b_c))) {
      proc_control_node_B.b_cr_c = proc_control_node_B.br_g + m;
      proc_control_node_B.ar_g = proc_control_node_B.br_g;
      while (proc_control_node_B.ar_g + 1 <= proc_control_node_B.b_cr_c) {
        C_data[proc_control_node_B.ar_g] = 0.0;
        proc_control_node_B.ar_g++;
      }

      proc_control_node_B.br_g += ldc;
    }

    proc_control_node_B.br_g = ib0;
    proc_control_node_B.b_cr_c = 0;
    while (((ldc > 0) && (proc_control_node_B.b_cr_c <= b_c)) || ((ldc < 0) &&
            (proc_control_node_B.b_cr_c >= b_c))) {
      proc_control_node_B.ar_g = -1;
      proc_control_node_B.c_eo = proc_control_node_B.br_g + k;
      for (ib = proc_control_node_B.br_g; ib < proc_control_node_B.c_eo; ib++) {
        proc_control_node_B.ia_n4 = proc_control_node_B.ar_g;
        d = proc_control_node_B.b_cr_c + m;
        for (b_ic = proc_control_node_B.b_cr_c; b_ic < d; b_ic++) {
          proc_control_node_B.ia_n4++;
          C_data[b_ic] += B_data[ib - 1] * A[proc_control_node_B.ia_n4];
        }

        proc_control_node_B.ar_g += lda;
      }

      proc_control_node_B.br_g += ldb;
      proc_control_node_B.b_cr_c += ldc;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_xgemm_m(int32_T m, int32_T n,
  int32_T k, const real_T A_data[], int32_T ia0, int32_T lda, const real_T
  B_data[], int32_T ldb, real_T C_data[], int32_T ldc)
{
  int32_T b_c;
  int32_T b_ic;
  int32_T c;
  int32_T w;
  if ((m != 0) && (n != 0)) {
    b_c = (n - 1) * ldc;
    proc_control_node_B.br = 0;
    while (((ldc > 0) && (proc_control_node_B.br <= b_c)) || ((ldc < 0) &&
            (proc_control_node_B.br >= b_c))) {
      proc_control_node_B.b_cr = proc_control_node_B.br + m;
      proc_control_node_B.ar = proc_control_node_B.br;
      while (proc_control_node_B.ar + 1 <= proc_control_node_B.b_cr) {
        C_data[proc_control_node_B.ar] = 0.0;
        proc_control_node_B.ar++;
      }

      proc_control_node_B.br += ldc;
    }

    proc_control_node_B.br = -1;
    proc_control_node_B.b_cr = 0;
    while (((ldc > 0) && (proc_control_node_B.b_cr <= b_c)) || ((ldc < 0) &&
            (proc_control_node_B.b_cr >= b_c))) {
      proc_control_node_B.ar = ia0;
      c = proc_control_node_B.b_cr + m;
      for (b_ic = proc_control_node_B.b_cr; b_ic < c; b_ic++) {
        proc_control_node_B.temp_ix = 0.0;
        for (w = 1; w - 1 < k; w++) {
          proc_control_node_B.temp_ix += A_data[(w + proc_control_node_B.ar) - 2]
            * B_data[w + proc_control_node_B.br];
        }

        C_data[b_ic] += proc_control_node_B.temp_ix;
        proc_control_node_B.ar += lda;
      }

      proc_control_node_B.br += ldb;
      proc_control_node_B.b_cr += ldc;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
int32_T proc_control_nodeModelClass::proc_control_node_ixamax_k(int32_T n, const
  real_T x_data[], int32_T incx)
{
  real_T y;
  int32_T idxmax;
  int32_T ix;
  int32_T k;
  if (n < 1) {
    idxmax = 0;
  } else {
    idxmax = 1;
    if (n > 1) {
      ix = 0;
      proc_control_node_B.smax_b = fabs(x_data[0]);
      for (k = 2; k <= n; k++) {
        ix += incx;
        y = fabs(x_data[ix]);
        if (y > proc_control_node_B.smax_b) {
          idxmax = k;
          proc_control_node_B.smax_b = y;
        }
      }
    }
  }

  return idxmax;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_fullColLDL2_
  (s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *obj, int32_T LD_offset, int32_T NColsRemain)
{
  int32_T b;
  int32_T ijA;
  int32_T j;
  int32_T jA;
  proc_control_node_B.LDimSizeP1_d = obj->ldm;
  proc_control_node_B.k_j = 0;
  while (proc_control_node_B.k_j <= NColsRemain - 1) {
    proc_control_node_B.LD_diagOffset_c = ((proc_control_node_B.LDimSizeP1_d + 1)
      * proc_control_node_B.k_j + LD_offset) - 1;
    proc_control_node_B.neg_D = -1.0 / obj->
      FMat.data[proc_control_node_B.LD_diagOffset_c];
    proc_control_node_B.subMatrixDim = (NColsRemain - proc_control_node_B.k_j) -
      2;
    for (jA = 1; jA - 1 <= proc_control_node_B.subMatrixDim; jA++) {
      obj->workspace_ = obj->FMat.data[proc_control_node_B.LD_diagOffset_c + jA];
    }

    proc_control_node_B.y_dw = obj->workspace_;
    if (!(proc_control_node_B.neg_D == 0.0)) {
      jA = (proc_control_node_B.LD_diagOffset_c +
            proc_control_node_B.LDimSizeP1_d) + 1;
      for (j = 0; j <= proc_control_node_B.subMatrixDim; j++) {
        if (proc_control_node_B.y_dw != 0.0) {
          proc_control_node_B.temp_o = proc_control_node_B.y_dw *
            proc_control_node_B.neg_D;
          b = proc_control_node_B.subMatrixDim + jA;
          for (ijA = jA; ijA < b + 1; ijA++) {
            obj->FMat.data[ijA] += obj->workspace_ * proc_control_node_B.temp_o;
          }
        }

        jA += obj->ldm;
      }
    }

    for (jA = 1; jA - 1 <= proc_control_node_B.subMatrixDim; jA++) {
      j = proc_control_node_B.LD_diagOffset_c + jA;
      obj->FMat.data[j] /= obj->FMat.data[proc_control_node_B.LD_diagOffset_c];
    }

    proc_control_node_B.k_j++;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_no_partialColLDL3_
  (s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *obj, int32_T LD_offset, int32_T NColsRemain)
{
  int32_T b_ia;
  int32_T br;
  int32_T ic;
  int32_T ix_tmp;
  proc_control_node_B.LDimSizeP1_o = obj->ldm + 1;
  for (proc_control_node_B.k_dv = 0; proc_control_node_B.k_dv < 48;
       proc_control_node_B.k_dv++) {
    proc_control_node_B.subRows = (NColsRemain - proc_control_node_B.k_dv) - 1;
    proc_control_node_B.LD_diagOffset_o = (proc_control_node_B.LDimSizeP1_o *
      proc_control_node_B.k_dv + LD_offset) - 1;
    proc_control_node_B.subBlockSize = 0;
    while (proc_control_node_B.subBlockSize <= proc_control_node_B.subRows) {
      obj->workspace_ = obj->FMat.data[proc_control_node_B.LD_diagOffset_o +
        proc_control_node_B.subBlockSize];
      proc_control_node_B.subBlockSize++;
    }

    proc_control_node_B.subBlockSize = 0;
    while (proc_control_node_B.subBlockSize <= NColsRemain - 1) {
      obj->workspace2_ = obj->workspace_;
      proc_control_node_B.subBlockSize++;
    }

    proc_control_node_B.subBlockSize = obj->ldm;
    proc_control_node_B.y_dt = obj->workspace2_;
    if ((NColsRemain != 0) && (proc_control_node_B.k_dv != 0)) {
      proc_control_node_B.ix_a = LD_offset + proc_control_node_B.k_dv;
      proc_control_node_B.FMat_offset = (proc_control_node_B.k_dv - 1) *
        obj->ldm + 1;
      br = 1;
      while (((proc_control_node_B.subBlockSize > 0) && (br <=
               proc_control_node_B.FMat_offset)) ||
             ((proc_control_node_B.subBlockSize < 0) && (br >=
               proc_control_node_B.FMat_offset))) {
        proc_control_node_B.c_kwn = (br + NColsRemain) - 1;
        proc_control_node_B.ia_c = br;
        while (proc_control_node_B.ia_c <= proc_control_node_B.c_kwn) {
          proc_control_node_B.y_dt += -obj->FMat.data[proc_control_node_B.ix_a -
            1] * obj->workspace_;
          proc_control_node_B.ia_c++;
        }

        proc_control_node_B.ix_a += obj->ldm;
        br += proc_control_node_B.subBlockSize;
      }
    }

    obj->workspace2_ = proc_control_node_B.y_dt;
    proc_control_node_B.subBlockSize = 0;
    while (proc_control_node_B.subBlockSize <= NColsRemain - 1) {
      obj->workspace_ = proc_control_node_B.y_dt;
      proc_control_node_B.subBlockSize++;
    }

    proc_control_node_B.subBlockSize = 0;
    while (proc_control_node_B.subBlockSize <= proc_control_node_B.subRows) {
      obj->FMat.data[proc_control_node_B.LD_diagOffset_o +
        proc_control_node_B.subBlockSize] = obj->workspace_;
      proc_control_node_B.subBlockSize++;
    }

    proc_control_node_B.subBlockSize = 1;
    while (proc_control_node_B.subBlockSize - 1 <= proc_control_node_B.subRows -
           1) {
      br = proc_control_node_B.LD_diagOffset_o +
        proc_control_node_B.subBlockSize;
      obj->FMat.data[br] /= obj->FMat.data[proc_control_node_B.LD_diagOffset_o];
      proc_control_node_B.subBlockSize++;
    }
  }

  proc_control_node_B.k_dv = 48;
  while (proc_control_node_B.k_dv <= NColsRemain - 1) {
    proc_control_node_B.ix_a = NColsRemain - proc_control_node_B.k_dv;
    if (48 < proc_control_node_B.ix_a) {
      proc_control_node_B.subBlockSize = 48;
    } else {
      proc_control_node_B.subBlockSize = proc_control_node_B.ix_a;
    }

    ix_tmp = proc_control_node_B.k_dv + proc_control_node_B.subBlockSize;
    proc_control_node_B.FMat_offset = proc_control_node_B.k_dv;
    while (proc_control_node_B.FMat_offset <= ix_tmp - 1) {
      proc_control_node_B.subRows = ix_tmp - proc_control_node_B.FMat_offset;
      proc_control_node_B.LD_diagOffset_o = (proc_control_node_B.LDimSizeP1_o *
        proc_control_node_B.FMat_offset + LD_offset) - 1;
      for (br = 0; br < 48; br++) {
        obj->workspace2_ = obj->FMat.data[((LD_offset +
          proc_control_node_B.FMat_offset) + br * obj->ldm) - 1];
      }

      br = obj->ldm;
      if (proc_control_node_B.subRows != 0) {
        proc_control_node_B.c_kwn = (obj->ldm * 47 +
          proc_control_node_B.FMat_offset) + 1;
        proc_control_node_B.ia_c = proc_control_node_B.FMat_offset + 1;
        while (((br > 0) && (proc_control_node_B.ia_c <=
                             proc_control_node_B.c_kwn)) || ((br < 0) &&
                (proc_control_node_B.ia_c >= proc_control_node_B.c_kwn))) {
          proc_control_node_B.iy_j = proc_control_node_B.LD_diagOffset_o;
          ic = (proc_control_node_B.ia_c + proc_control_node_B.subRows) - 1;
          for (b_ia = proc_control_node_B.ia_c; b_ia <= ic; b_ia++) {
            obj->FMat.data[proc_control_node_B.iy_j] += obj->workspace_ *
              -obj->workspace2_;
            proc_control_node_B.iy_j++;
          }

          proc_control_node_B.ia_c += br;
        }
      }

      proc_control_node_B.FMat_offset++;
    }

    if (ix_tmp < NColsRemain) {
      proc_control_node_B.subRows = proc_control_node_B.ix_a -
        proc_control_node_B.subBlockSize;
      proc_control_node_B.LD_diagOffset_o = ((LD_offset +
        proc_control_node_B.subBlockSize) + proc_control_node_B.LDimSizeP1_o *
        proc_control_node_B.k_dv) - 1;
      for (proc_control_node_B.ix_a = 0; proc_control_node_B.ix_a < 48;
           proc_control_node_B.ix_a++) {
        proc_control_node_B.FMat_offset = (LD_offset + proc_control_node_B.k_dv)
          + proc_control_node_B.ix_a * obj->ldm;
        for (br = 0; br < proc_control_node_B.subBlockSize; br++) {
          obj->workspace2_ = obj->FMat.data[(proc_control_node_B.FMat_offset +
            br) - 1];
        }
      }

      proc_control_node_B.ix_a = obj->ldm;
      proc_control_node_B.FMat_offset = obj->ldm;
      if ((proc_control_node_B.subRows != 0) &&
          (proc_control_node_B.subBlockSize != 0)) {
        proc_control_node_B.subBlockSize = (proc_control_node_B.subBlockSize - 1)
          * obj->ldm + proc_control_node_B.LD_diagOffset_o;
        br = 0;
        while (((proc_control_node_B.FMat_offset > 0) &&
                (proc_control_node_B.LD_diagOffset_o <=
                 proc_control_node_B.subBlockSize)) ||
               ((proc_control_node_B.FMat_offset < 0) &&
                (proc_control_node_B.LD_diagOffset_o >=
                 proc_control_node_B.subBlockSize))) {
          br++;
          proc_control_node_B.c_kwn = proc_control_node_B.ix_a * 47 + br;
          proc_control_node_B.ia_c = br;
          while (((proc_control_node_B.ix_a > 0) && (proc_control_node_B.ia_c <=
                   proc_control_node_B.c_kwn)) || ((proc_control_node_B.ix_a < 0)
                  && (proc_control_node_B.ia_c >= proc_control_node_B.c_kwn))) {
            proc_control_node_B.iy_j = proc_control_node_B.LD_diagOffset_o +
              proc_control_node_B.subRows;
            for (ic = proc_control_node_B.LD_diagOffset_o; ic <
                 proc_control_node_B.iy_j; ic++) {
              obj->FMat.data[ic] += -obj->workspace2_ * obj->workspace_;
            }

            proc_control_node_B.ia_c += proc_control_node_B.ix_a;
          }

          proc_control_node_B.LD_diagOffset_o += proc_control_node_B.FMat_offset;
        }
      }
    }

    proc_control_node_B.k_dv += 48;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
int32_T proc_control_nodeModelClass::proc_control_node_xpotrf(int32_T n, real_T
  A_data[], int32_T lda)
{
  int32_T b_ix;
  int32_T b_iy;
  int32_T d;
  int32_T ia;
  int32_T info;
  boolean_T exitg1;
  info = 0;
  proc_control_node_B.b_j_d = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.b_j_d <= n - 1)) {
    proc_control_node_B.idxA1j = proc_control_node_B.b_j_d * lda;
    proc_control_node_B.idxAjj_m = proc_control_node_B.idxA1j +
      proc_control_node_B.b_j_d;
    proc_control_node_B.ssq_g = 0.0;
    if (proc_control_node_B.b_j_d >= 1) {
      b_ix = proc_control_node_B.idxA1j;
      b_iy = proc_control_node_B.idxA1j;
      proc_control_node_B.iy_i = 0;
      while (proc_control_node_B.iy_i <= proc_control_node_B.b_j_d - 1) {
        proc_control_node_B.ssq_g += A_data[b_ix] * A_data[b_iy];
        b_ix++;
        b_iy++;
        proc_control_node_B.iy_i++;
      }
    }

    proc_control_node_B.ssq_g = A_data[proc_control_node_B.idxAjj_m] -
      proc_control_node_B.ssq_g;
    if (proc_control_node_B.ssq_g > 0.0) {
      proc_control_node_B.ssq_g = sqrt(proc_control_node_B.ssq_g);
      A_data[proc_control_node_B.idxAjj_m] = proc_control_node_B.ssq_g;
      if (proc_control_node_B.b_j_d + 1 < n) {
        b_ix = (n - proc_control_node_B.b_j_d) - 2;
        b_iy = (proc_control_node_B.idxA1j + lda) + 1;
        proc_control_node_B.idxAjj_m += lda;
        if ((proc_control_node_B.b_j_d != 0) && (b_ix + 1 != 0)) {
          proc_control_node_B.iy_i = proc_control_node_B.idxAjj_m;
          proc_control_node_B.b_g = lda * b_ix + b_iy;
          while (((lda > 0) && (b_iy <= proc_control_node_B.b_g)) || ((lda < 0) &&
                  (b_iy >= proc_control_node_B.b_g))) {
            proc_control_node_B.ix_pz = proc_control_node_B.idxA1j;
            proc_control_node_B.c_o = 0.0;
            d = (b_iy + proc_control_node_B.b_j_d) - 1;
            for (ia = b_iy; ia <= d; ia++) {
              proc_control_node_B.c_o += A_data[ia - 1] *
                A_data[proc_control_node_B.ix_pz];
              proc_control_node_B.ix_pz++;
            }

            A_data[proc_control_node_B.iy_i] += -proc_control_node_B.c_o;
            proc_control_node_B.iy_i += lda;
            b_iy += lda;
          }
        }

        proc_control_node_B.ssq_g = 1.0 / proc_control_node_B.ssq_g;
        proc_control_node_B.idxA1j = (lda * b_ix + proc_control_node_B.idxAjj_m)
          + 1;
        while (((lda > 0) && (proc_control_node_B.idxAjj_m + 1 <=
                              proc_control_node_B.idxA1j)) || ((lda < 0) &&
                (proc_control_node_B.idxAjj_m + 1 >= proc_control_node_B.idxA1j)))
        {
          A_data[proc_control_node_B.idxAjj_m] *= proc_control_node_B.ssq_g;
          proc_control_node_B.idxAjj_m += lda;
        }
      }

      proc_control_node_B.b_j_d++;
    } else {
      A_data[proc_control_node_B.idxAjj_m] = proc_control_node_B.ssq_g;
      info = proc_control_node_B.b_j_d + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_xgemv_mtmcjbiadz(int32_T m,
  int32_T n, const real_T A_data[], int32_T ia0, int32_T lda, const real_T
  x_data[], real_T y_data[])
{
  int32_T b;
  int32_T c;
  int32_T ia;
  int32_T iac;
  if (m != 0) {
    proc_control_node_B.ix_jr = 0;
    while (proc_control_node_B.ix_jr <= m - 1) {
      y_data[proc_control_node_B.ix_jr] = 0.0;
      proc_control_node_B.ix_jr++;
    }

    proc_control_node_B.ix_jr = 0;
    b = (n - 1) * lda + ia0;
    iac = ia0;
    while (((lda > 0) && (iac <= b)) || ((lda < 0) && (iac >= b))) {
      proc_control_node_B.iy_kg = 0;
      c = (iac + m) - 1;
      for (ia = iac; ia <= c; ia++) {
        y_data[proc_control_node_B.iy_kg] += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_jr];
        proc_control_node_B.iy_kg++;
      }

      proc_control_node_B.ix_jr++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factor
  (s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *obj, const real_T A[24025], int32_T ndims,
   int32_T ldA)
{
  obj->ndims = ndims;
  proc_control_node_B.b_idx_j = 0;
  while (proc_control_node_B.b_idx_j <= ndims - 1) {
    proc_control_node_B.iA0_d = ldA * proc_control_node_B.b_idx_j;
    proc_control_node_B.iUU0 = obj->ldm * proc_control_node_B.b_idx_j;
    proc_control_node_B.b_kk = 1;
    while (proc_control_node_B.b_kk - 1 <= ndims - 1) {
      obj->FMat.data[(proc_control_node_B.iUU0 + proc_control_node_B.b_kk) - 1] =
        A[(proc_control_node_B.iA0_d + proc_control_node_B.b_kk) - 1];
      proc_control_node_B.b_kk++;
    }

    proc_control_node_B.b_idx_j++;
  }

  proc_control_node_B.b_size_ih[0] = obj->FMat.size[0];
  proc_control_node_B.b_size_ih[1] = obj->FMat.size[1];
  proc_control_node_B.iUU0 = obj->FMat.size[0] * obj->FMat.size[1];
  if (0 <= proc_control_node_B.iUU0 - 1) {
    memcpy(&proc_control_node_B.b_data_k[0], &obj->FMat.data[0],
           proc_control_node_B.iUU0 * sizeof(real_T));
  }

  proc_control_node_B.b_idx_j = proc_control_node_xpotrf(ndims,
    proc_control_node_B.b_data_k, obj->ldm);
  obj->FMat.size[0] = proc_control_node_B.b_size_ih[0];
  obj->FMat.size[1] = proc_control_node_B.b_size_ih[1];
  proc_control_node_B.iUU0 = proc_control_node_B.b_size_ih[0] *
    proc_control_node_B.b_size_ih[1];
  if (0 <= proc_control_node_B.iUU0 - 1) {
    memcpy(&obj->FMat.data[0], &proc_control_node_B.b_data_k[0],
           proc_control_node_B.iUU0 * sizeof(real_T));
  }

  obj->info = proc_control_node_B.b_idx_j;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_solve(const
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *obj, real_T rhs_data[])
{
  int32_T b_j;
  int32_T c;
  int32_T ix;
  int32_T jjA;
  if (obj->ndims != 0) {
    for (b_j = 0; b_j < obj->ndims; b_j++) {
      c = b_j * obj->ldm;
      proc_control_node_B.temp_iu = rhs_data[b_j];
      for (ix = 0; ix < b_j; ix++) {
        proc_control_node_B.temp_iu -= obj->FMat.data[c + ix] * rhs_data[ix];
      }

      rhs_data[b_j] = proc_control_node_B.temp_iu / obj->FMat.data[c + b_j];
    }

    for (b_j = obj->ndims - 1; b_j + 1 > 0; b_j--) {
      jjA = b_j * obj->ldm + b_j;
      rhs_data[b_j] /= obj->FMat.data[jjA];
      for (c = 1; c - 1 < b_j; c++) {
        ix = b_j - c;
        rhs_data[ix] -= obj->FMat.data[jjA - c] * rhs_data[b_j];
      }
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_factor_p
  (s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *obj, const real_T A[24025], int32_T ndims,
   int32_T ldA)
{
  int32_T exitg2;
  boolean_T exitg1;
  proc_control_node_B.LDimSizeP1 = obj->ldm + 1;
  obj->ndims = ndims;
  proc_control_node_B.A_maxDiag_idx = 0;
  while (proc_control_node_B.A_maxDiag_idx <= ndims - 1) {
    proc_control_node_B.LD_diagOffset = ldA * proc_control_node_B.A_maxDiag_idx;
    proc_control_node_B.order_j = obj->ldm * proc_control_node_B.A_maxDiag_idx;
    proc_control_node_B.b_k_nr = 1;
    while (proc_control_node_B.b_k_nr - 1 <= ndims - 1) {
      obj->FMat.data[(proc_control_node_B.order_j + proc_control_node_B.b_k_nr)
        - 1] = A[(proc_control_node_B.LD_diagOffset + proc_control_node_B.b_k_nr)
        - 1];
      proc_control_node_B.b_k_nr++;
    }

    proc_control_node_B.A_maxDiag_idx++;
  }

  proc_control_node_B.A_maxDiag_idx = proc_control_node_ixamax_k(ndims,
    obj->FMat.data, obj->ldm + 1) - 1;
  proc_control_node_B.u0 = fabs(obj->FMat.data[obj->ldm *
    proc_control_node_B.A_maxDiag_idx + proc_control_node_B.A_maxDiag_idx]) *
    2.2204460492503131E-16;
  if (proc_control_node_B.u0 > 0.0) {
    obj->regTol_ = proc_control_node_B.u0;
  } else {
    obj->regTol_ = 0.0;
  }

  if (ndims > 128) {
    proc_control_node_B.A_maxDiag_idx = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.A_maxDiag_idx < ndims)) {
      proc_control_node_B.LD_diagOffset = proc_control_node_B.LDimSizeP1 *
        proc_control_node_B.A_maxDiag_idx + 1;
      proc_control_node_B.order_j = ndims - proc_control_node_B.A_maxDiag_idx;
      if (proc_control_node_B.A_maxDiag_idx + 48 <= ndims) {
        proc_control_no_partialColLDL3_(obj, proc_control_node_B.LD_diagOffset,
          proc_control_node_B.order_j);
        proc_control_node_B.A_maxDiag_idx += 48;
      } else {
        proc_control_node_fullColLDL2_(obj, proc_control_node_B.LD_diagOffset,
          proc_control_node_B.order_j);
        exitg1 = true;
      }
    }
  } else {
    proc_control_node_fullColLDL2_(obj, 1, ndims);
  }

  if (obj->ConvexCheck) {
    proc_control_node_B.LDimSizeP1 = 0;
    do {
      exitg2 = 0;
      if (proc_control_node_B.LDimSizeP1 <= ndims - 1) {
        if (obj->FMat.data[obj->ldm * proc_control_node_B.LDimSizeP1 +
            proc_control_node_B.LDimSizeP1] <= 0.0) {
          obj->info = -proc_control_node_B.LDimSizeP1 - 1;
          exitg2 = 1;
        } else {
          proc_control_node_B.LDimSizeP1++;
        }
      } else {
        obj->ConvexCheck = false;
        exitg2 = 1;
      }
    } while (exitg2 == 0);
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_solve_l(const
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *obj, real_T rhs_data[])
{
  int32_T b;
  int32_T i;
  int32_T j;
  int32_T n_tmp;
  n_tmp = obj->ndims - 1;
  if (obj->ndims != 0) {
    for (j = 0; j <= n_tmp; j++) {
      proc_control_node_B.jjA = j * obj->ldm + j;
      b = n_tmp - j;
      for (i = 1; i - 1 < b; i++) {
        proc_control_node_B.ix_mz = j + i;
        rhs_data[proc_control_node_B.ix_mz] -= obj->
          FMat.data[proc_control_node_B.jjA + i] * rhs_data[j];
      }
    }
  }

  for (b = 0; b <= n_tmp; b++) {
    rhs_data[b] /= obj->FMat.data[obj->ldm * b + b];
  }

  if (obj->ndims != 0) {
    for (b = obj->ndims - 1; b + 1 > 0; b--) {
      j = b * obj->ldm;
      proc_control_node_B.temp_c = rhs_data[b];
      proc_control_node_B.jjA = obj->ndims;
      while (proc_control_node_B.jjA >= b + 2) {
        proc_control_node_B.temp_c -= obj->FMat.data[(j +
          proc_control_node_B.jjA) - 1] * rhs_data[proc_control_node_B.jjA - 1];
        proc_control_node_B.jjA--;
      }

      rhs_data[b] = proc_control_node_B.temp_c;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_compute_deltax(const real_T
  H[24025], s_SfTiiT1KRClFcMCE02xJjB_proc_T *solution,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, const
  s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *qrmanager, s_NgV9GZ7yjGpklMLIU8C2cB_proc_T
  *cholmanager, const s_syceGAKWionoNWyVws9jI_proc__T *objective, boolean_T
  alwaysPositiveDef)
{
  int32_T exitg2;
  boolean_T exitg1;
  proc_control_node_B.nVar_p = qrmanager->mrows - 1;
  proc_control_node_B.mNull = qrmanager->mrows - qrmanager->ncols;
  if (proc_control_node_B.mNull <= 0) {
    proc_control_node_B.mNull = 0;
    while (proc_control_node_B.mNull <= proc_control_node_B.nVar_p) {
      solution->searchDir.data[proc_control_node_B.mNull] = 0.0;
      proc_control_node_B.mNull++;
    }
  } else {
    proc_control_node_B.nullStartIdx = 0;
    while (proc_control_node_B.nullStartIdx <= proc_control_node_B.nVar_p) {
      solution->searchDir.data[proc_control_node_B.nullStartIdx] =
        -objective->grad.data[proc_control_node_B.nullStartIdx];
      proc_control_node_B.nullStartIdx++;
    }

    if (qrmanager->ncols <= 0) {
      switch (objective->objtype) {
       case 5:
        break;

       case 3:
        if (alwaysPositiveDef) {
          proc_control_node_factor(cholmanager, H, qrmanager->mrows,
            qrmanager->mrows);
        } else {
          proc_control_node_factor_p(cholmanager, H, qrmanager->mrows,
            qrmanager->mrows);
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else if (alwaysPositiveDef) {
          proc_control_node_solve(cholmanager, solution->searchDir.data);
        } else {
          proc_control_node_solve_l(cholmanager, solution->searchDir.data);
        }
        break;

       default:
        if (alwaysPositiveDef) {
          proc_control_node_factor(cholmanager, H, objective->nvar,
            objective->nvar);
          if (cholmanager->info != 0) {
            solution->state = -6;
          } else {
            proc_control_node_solve(cholmanager, solution->searchDir.data);
            proc_control_node_B.b_c_e = 1.0 / objective->beta;
            proc_control_node_B.mNull = objective->nvar;
            while (proc_control_node_B.mNull + 1 <= qrmanager->mrows) {
              solution->searchDir.data[proc_control_node_B.mNull] *=
                proc_control_node_B.b_c_e;
              proc_control_node_B.mNull++;
            }
          }
        }
        break;
      }
    } else {
      proc_control_node_B.nullStartIdx = qrmanager->ldq * qrmanager->ncols + 1;
      if (objective->objtype == 5) {
        proc_control_node_B.b_ldw = 0;
        while (proc_control_node_B.b_ldw <= proc_control_node_B.mNull - 1) {
          memspace->workspace_double.data[proc_control_node_B.b_ldw] =
            -qrmanager->Q.data[(qrmanager->ncols + proc_control_node_B.b_ldw) *
            qrmanager->ldq + proc_control_node_B.nVar_p];
          proc_control_node_B.b_ldw++;
        }

        proc_control_n_xgemv_mtmcjbiadz(qrmanager->mrows,
          proc_control_node_B.mNull, qrmanager->Q.data,
          proc_control_node_B.nullStartIdx, qrmanager->ldq,
          memspace->workspace_double.data, solution->searchDir.data);
      } else {
        if (objective->objtype == 3) {
          proc_control_node_B.b_ldw = memspace->workspace_double.size[0];
          proc_control_node_xgemm(qrmanager->mrows, proc_control_node_B.mNull,
            qrmanager->mrows, H, qrmanager->mrows, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, memspace->workspace_double.size[0]);
          proc_control_node_xgemm_m(proc_control_node_B.mNull,
            proc_control_node_B.mNull, qrmanager->mrows, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, proc_control_node_B.b_ldw,
            cholmanager->FMat.data, cholmanager->ldm);
        } else if (alwaysPositiveDef) {
          proc_control_node_B.b_ldw = memspace->workspace_double.size[0];
          proc_control_node_xgemm(objective->nvar, proc_control_node_B.mNull,
            objective->nvar, H, objective->nvar, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, memspace->workspace_double.size[0]);
          proc_control_node_B.order = 0;
          while (proc_control_node_B.order <= proc_control_node_B.mNull - 1) {
            proc_control_node_B.ix_fk = objective->nvar;
            while (proc_control_node_B.ix_fk + 1 <= qrmanager->mrows) {
              memspace->workspace_double.data[proc_control_node_B.ix_fk +
                memspace->workspace_double.size[0] * proc_control_node_B.order] =
                qrmanager->Q.data[proc_control_node_B.ix_fk + qrmanager->Q.size
                [0] * (proc_control_node_B.order + qrmanager->ncols)] *
                objective->beta;
              proc_control_node_B.ix_fk++;
            }

            proc_control_node_B.order++;
          }

          proc_control_node_xgemm_m(proc_control_node_B.mNull,
            proc_control_node_B.mNull, qrmanager->mrows, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            memspace->workspace_double.data, proc_control_node_B.b_ldw,
            cholmanager->FMat.data, cholmanager->ldm);
        }

        if (alwaysPositiveDef) {
          cholmanager->ndims = proc_control_node_B.mNull;
          proc_control_node_B.b_size_i[0] = cholmanager->FMat.size[0];
          proc_control_node_B.b_size_i[1] = cholmanager->FMat.size[1];
          proc_control_node_B.order = cholmanager->FMat.size[0] *
            cholmanager->FMat.size[1];
          if (0 <= proc_control_node_B.order - 1) {
            memcpy(&proc_control_node_B.b_data_c[0], &cholmanager->FMat.data[0],
                   proc_control_node_B.order * sizeof(real_T));
          }

          proc_control_node_B.ix_fk = proc_control_node_xpotrf
            (proc_control_node_B.mNull, proc_control_node_B.b_data_c,
             cholmanager->ldm);
          cholmanager->FMat.size[0] = proc_control_node_B.b_size_i[0];
          cholmanager->FMat.size[1] = proc_control_node_B.b_size_i[1];
          proc_control_node_B.order = proc_control_node_B.b_size_i[0] *
            proc_control_node_B.b_size_i[1];
          if (0 <= proc_control_node_B.order - 1) {
            memcpy(&cholmanager->FMat.data[0], &proc_control_node_B.b_data_c[0],
                   proc_control_node_B.order * sizeof(real_T));
          }

          cholmanager->info = proc_control_node_B.ix_fk;
        } else {
          proc_control_node_B.b_ldw = cholmanager->ldm + 1;
          cholmanager->ndims = proc_control_node_B.mNull;
          proc_control_node_B.b_nullStart = proc_control_node_ixamax_k
            (proc_control_node_B.mNull, cholmanager->FMat.data, cholmanager->ldm
             + 1) - 1;
          proc_control_node_B.b_c_e = fabs(cholmanager->FMat.data
            [cholmanager->ldm * proc_control_node_B.b_nullStart +
            proc_control_node_B.b_nullStart]) * 2.2204460492503131E-16;
          if (proc_control_node_B.b_c_e > 0.0) {
            cholmanager->regTol_ = proc_control_node_B.b_c_e;
          } else {
            cholmanager->regTol_ = 0.0;
          }

          if (proc_control_node_B.mNull > 128) {
            proc_control_node_B.ix_fk = 0;
            exitg1 = false;
            while ((!exitg1) && (proc_control_node_B.ix_fk <
                                 proc_control_node_B.mNull)) {
              proc_control_node_B.b_nullStart = proc_control_node_B.b_ldw *
                proc_control_node_B.ix_fk + 1;
              proc_control_node_B.order = proc_control_node_B.mNull -
                proc_control_node_B.ix_fk;
              if (proc_control_node_B.ix_fk + 48 <= proc_control_node_B.mNull) {
                proc_control_no_partialColLDL3_(cholmanager,
                  proc_control_node_B.b_nullStart, proc_control_node_B.order);
                proc_control_node_B.ix_fk += 48;
              } else {
                proc_control_node_fullColLDL2_(cholmanager,
                  proc_control_node_B.b_nullStart, proc_control_node_B.order);
                exitg1 = true;
              }
            }
          } else {
            proc_control_node_fullColLDL2_(cholmanager, 1,
              proc_control_node_B.mNull);
          }

          if (cholmanager->ConvexCheck) {
            proc_control_node_B.ix_fk = 0;
            do {
              exitg2 = 0;
              if (proc_control_node_B.ix_fk <= proc_control_node_B.mNull - 1) {
                if (cholmanager->FMat.data[cholmanager->ldm *
                    proc_control_node_B.ix_fk + proc_control_node_B.ix_fk] <=
                    0.0) {
                  cholmanager->info = -proc_control_node_B.ix_fk - 1;
                  exitg2 = 1;
                } else {
                  proc_control_node_B.ix_fk++;
                }
              } else {
                cholmanager->ConvexCheck = false;
                exitg2 = 1;
              }
            } while (exitg2 == 0);
          }
        }

        if (cholmanager->info != 0) {
          solution->state = -6;
        } else {
          proc_control_node_B.b_ldw = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            proc_control_node_B.ix_fk = 0;
            while (proc_control_node_B.ix_fk <= proc_control_node_B.mNull - 1) {
              memspace->workspace_double.data[proc_control_node_B.ix_fk] = 0.0;
              proc_control_node_B.ix_fk++;
            }

            proc_control_node_B.b_nullStart = 0;
            proc_control_node_B.order = (proc_control_node_B.mNull - 1) *
              qrmanager->ldq + proc_control_node_B.nullStartIdx;
            proc_control_node_B.idx_col = proc_control_node_B.nullStartIdx;
            while (((proc_control_node_B.b_ldw > 0) &&
                    (proc_control_node_B.idx_col <= proc_control_node_B.order)) ||
                   ((proc_control_node_B.b_ldw < 0) &&
                    (proc_control_node_B.idx_col >= proc_control_node_B.order)))
            {
              proc_control_node_B.ix_fk = 0;
              proc_control_node_B.b_c_e = 0.0;
              proc_control_node_B.b_ix_h = proc_control_node_B.idx_col +
                proc_control_node_B.nVar_p;
              proc_control_node_B.b_ldw_tmp = proc_control_node_B.idx_col;
              while (proc_control_node_B.b_ldw_tmp <= proc_control_node_B.b_ix_h)
              {
                proc_control_node_B.b_c_e += qrmanager->
                  Q.data[proc_control_node_B.b_ldw_tmp - 1] *
                  objective->grad.data[proc_control_node_B.ix_fk];
                proc_control_node_B.ix_fk++;
                proc_control_node_B.b_ldw_tmp++;
              }

              memspace->workspace_double.data[proc_control_node_B.b_nullStart] +=
                -proc_control_node_B.b_c_e;
              proc_control_node_B.b_nullStart++;
              proc_control_node_B.idx_col += proc_control_node_B.b_ldw;
            }
          }

          if (alwaysPositiveDef) {
            proc_control_node_B.b_rhs_size[0] = memspace->workspace_double.size
              [0];
            proc_control_node_B.b_rhs_size[1] = memspace->workspace_double.size
              [1];
            proc_control_node_B.order = memspace->workspace_double.size[0] *
              memspace->workspace_double.size[1];
            if (0 <= proc_control_node_B.order - 1) {
              memcpy(&proc_control_node_B.b_rhs_data[0],
                     &memspace->workspace_double.data[0],
                     proc_control_node_B.order * sizeof(real_T));
            }

            if (cholmanager->ndims != 0) {
              proc_control_node_B.b_ldw = 0;
              while (proc_control_node_B.b_ldw <= cholmanager->ndims - 1) {
                proc_control_node_B.order = proc_control_node_B.b_ldw *
                  cholmanager->ldm;
                proc_control_node_B.b_c_e =
                  proc_control_node_B.b_rhs_data[proc_control_node_B.b_ldw];
                proc_control_node_B.idx_col = 0;
                while (proc_control_node_B.idx_col <= proc_control_node_B.b_ldw
                       - 1) {
                  proc_control_node_B.b_c_e -= cholmanager->
                    FMat.data[proc_control_node_B.order +
                    proc_control_node_B.idx_col] *
                    proc_control_node_B.b_rhs_data[proc_control_node_B.idx_col];
                  proc_control_node_B.idx_col++;
                }

                proc_control_node_B.b_rhs_data[proc_control_node_B.b_ldw] =
                  proc_control_node_B.b_c_e / cholmanager->
                  FMat.data[proc_control_node_B.order +
                  proc_control_node_B.b_ldw];
                proc_control_node_B.b_ldw++;
              }
            }

            proc_control_node_xtrsv(cholmanager->ndims, cholmanager->FMat.data,
              cholmanager->ldm, proc_control_node_B.b_rhs_data);
          } else {
            proc_control_node_B.b_ldw_tmp = cholmanager->ndims - 1;
            proc_control_node_B.b_rhs_size[0] = memspace->workspace_double.size
              [0];
            proc_control_node_B.b_rhs_size[1] = memspace->workspace_double.size
              [1];
            proc_control_node_B.order = memspace->workspace_double.size[0] *
              memspace->workspace_double.size[1];
            if (0 <= proc_control_node_B.order - 1) {
              memcpy(&proc_control_node_B.b_rhs_data[0],
                     &memspace->workspace_double.data[0],
                     proc_control_node_B.order * sizeof(real_T));
            }

            if (cholmanager->ndims != 0) {
              proc_control_node_B.b_nullStart = 0;
              while (proc_control_node_B.b_nullStart <=
                     proc_control_node_B.b_ldw_tmp) {
                proc_control_node_B.order = proc_control_node_B.b_nullStart *
                  cholmanager->ldm + proc_control_node_B.b_nullStart;
                proc_control_node_B.idx_col = proc_control_node_B.b_ldw_tmp -
                  proc_control_node_B.b_nullStart;
                proc_control_node_B.ix_fk = 1;
                while (proc_control_node_B.ix_fk - 1 <=
                       proc_control_node_B.idx_col - 1) {
                  proc_control_node_B.b_ix_h = proc_control_node_B.b_nullStart +
                    proc_control_node_B.ix_fk;
                  proc_control_node_B.b_rhs_data[proc_control_node_B.b_ix_h] -=
                    proc_control_node_B.b_rhs_data[proc_control_node_B.b_nullStart]
                    * cholmanager->FMat.data[proc_control_node_B.order +
                    proc_control_node_B.ix_fk];
                  proc_control_node_B.ix_fk++;
                }

                proc_control_node_B.b_nullStart++;
              }
            }

            proc_control_node_B.b_ldw = 0;
            while (proc_control_node_B.b_ldw <= proc_control_node_B.b_ldw_tmp) {
              proc_control_node_B.b_rhs_data[proc_control_node_B.b_ldw] /=
                cholmanager->FMat.data[cholmanager->ldm *
                proc_control_node_B.b_ldw + proc_control_node_B.b_ldw];
              proc_control_node_B.b_ldw++;
            }

            if (cholmanager->ndims != 0) {
              proc_control_node_B.b_ldw = cholmanager->ndims - 1;
              while (proc_control_node_B.b_ldw + 1 > 0) {
                proc_control_node_B.b_nullStart = proc_control_node_B.b_ldw *
                  cholmanager->ldm;
                proc_control_node_B.b_c_e =
                  proc_control_node_B.b_rhs_data[proc_control_node_B.b_ldw];
                proc_control_node_B.order = cholmanager->ndims;
                while (proc_control_node_B.order >= proc_control_node_B.b_ldw +
                       2) {
                  proc_control_node_B.b_c_e -= cholmanager->FMat.data
                    [(proc_control_node_B.b_nullStart +
                      proc_control_node_B.order) - 1] *
                    proc_control_node_B.b_rhs_data[proc_control_node_B.order - 1];
                  proc_control_node_B.order--;
                }

                proc_control_node_B.b_rhs_data[proc_control_node_B.b_ldw] =
                  proc_control_node_B.b_c_e;
                proc_control_node_B.b_ldw--;
              }
            }
          }

          memspace->workspace_double.size[0] = proc_control_node_B.b_rhs_size[0];
          memspace->workspace_double.size[1] = proc_control_node_B.b_rhs_size[1];
          proc_control_node_B.order = proc_control_node_B.b_rhs_size[0] *
            proc_control_node_B.b_rhs_size[1];
          if (0 <= proc_control_node_B.order - 1) {
            memcpy(&memspace->workspace_double.data[0],
                   &proc_control_node_B.b_rhs_data[0], proc_control_node_B.order
                   * sizeof(real_T));
          }

          proc_control_n_xgemv_mtmcjbiadz(qrmanager->mrows,
            proc_control_node_B.mNull, qrmanager->Q.data,
            proc_control_node_B.nullStartIdx, qrmanager->ldq,
            proc_control_node_B.b_rhs_data, solution->searchDir.data);
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_m(int32_T n, const
  real_T x_data[])
{
  real_T t;
  real_T y;
  int32_T k;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x_data[0]);
    } else {
      proc_control_node_B.scale_e = 3.3121686421112381E-170;
      for (k = 0; k < n; k++) {
        proc_control_node_B.absxk_p = fabs(x_data[k]);
        if (proc_control_node_B.absxk_p > proc_control_node_B.scale_e) {
          t = proc_control_node_B.scale_e / proc_control_node_B.absxk_p;
          y = y * t * t + 1.0;
          proc_control_node_B.scale_e = proc_control_node_B.absxk_p;
        } else {
          t = proc_control_node_B.absxk_p / proc_control_node_B.scale_e;
          y += t * t;
        }
      }

      y = proc_control_node_B.scale_e * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control__xgemv_mtmcjbiadz2(int32_T m,
  int32_T n, const real_T A_data[], int32_T lda, const real_T x_data[], real_T
  y_data[])
{
  int32_T b;
  int32_T b_iy;
  int32_T ia;
  int32_T iac;
  if (n != 0) {
    for (b_iy = 0; b_iy < n; b_iy++) {
      y_data[b_iy] = -y_data[b_iy];
    }

    proc_control_node_B.iy_m = 0;
    b_iy = (n - 1) * lda + 1;
    iac = 1;
    while (((lda > 0) && (iac <= b_iy)) || ((lda < 0) && (iac >= b_iy))) {
      proc_control_node_B.ix_iy = 0;
      proc_control_node_B.c_i = 0.0;
      b = (iac + m) - 1;
      for (ia = iac; ia <= b; ia++) {
        proc_control_node_B.c_i += A_data[ia - 1] *
          x_data[proc_control_node_B.ix_iy];
        proc_control_node_B.ix_iy++;
      }

      y_data[proc_control_node_B.iy_m] += proc_control_node_B.c_i;
      proc_control_node_B.iy_m++;
      iac += lda;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control__feasibleratiotest(const real_T
  solution_xstar_data[], const real_T solution_searchDir_data[], real_T
  workspace_data[], const int32_T workspace_size[2], int32_T workingset_nVar,
  int32_T workingset_ldA, const real_T workingset_Aineq_data[], const real_T
  workingset_bineq_data[], const real_T workingset_lb_data[], const int32_T
  workingset_indexLB_data[], const int32_T workingset_sizes[5], const int32_T
  workingset_isActiveIdx[6], const boolean_T workingset_isActiveConstr_data[],
  const int32_T workingset_nWConstr[5], boolean_T isPhaseOne, real_T *alpha,
  boolean_T *newBlocking, int32_T *constrType, int32_T *constrIdx)
{
  proc_control_node_B.totalIneq = workingset_sizes[2] - 1;
  *alpha = 1.0E+30;
  *newBlocking = false;
  *constrType = 0;
  *constrIdx = 0;
  proc_control_node_B.denomTol = 2.2204460492503131E-13 *
    proc_control_node_xnrm2_m(workingset_nVar, solution_searchDir_data);
  if (workingset_nWConstr[2] < workingset_sizes[2]) {
    proc_control_node_B.ldw = 0;
    while (proc_control_node_B.ldw <= proc_control_node_B.totalIneq) {
      workspace_data[proc_control_node_B.ldw] =
        workingset_bineq_data[proc_control_node_B.ldw];
      proc_control_node_B.ldw++;
    }

    proc_control__xgemv_mtmcjbiadz2(workingset_nVar, workingset_sizes[2],
      workingset_Aineq_data, workingset_ldA, solution_xstar_data, workspace_data);
    proc_control_node_B.ldw = workspace_size[0];
    if (workingset_sizes[2] != 0) {
      proc_control_node_B.iyend_n = workspace_size[0] + workingset_sizes[2];
      proc_control_node_B.b_iy_l = workspace_size[0];
      while (proc_control_node_B.b_iy_l + 1 <= proc_control_node_B.iyend_n) {
        workspace_data[proc_control_node_B.b_iy_l] = 0.0;
        proc_control_node_B.b_iy_l++;
      }

      proc_control_node_B.iyend_n = workspace_size[0];
      proc_control_node_B.b_iy_l = (workingset_sizes[2] - 1) * workingset_ldA +
        1;
      proc_control_node_B.iac_f = 1;
      while (((workingset_ldA > 0) && (proc_control_node_B.iac_f <=
               proc_control_node_B.b_iy_l)) || ((workingset_ldA < 0) &&
              (proc_control_node_B.iac_f >= proc_control_node_B.b_iy_l))) {
        proc_control_node_B.ix_o2 = 0;
        proc_control_node_B.c_dp = 0.0;
        proc_control_node_B.b_h = (proc_control_node_B.iac_f + workingset_nVar)
          - 1;
        proc_control_node_B.ia_d = proc_control_node_B.iac_f;
        while (proc_control_node_B.ia_d <= proc_control_node_B.b_h) {
          proc_control_node_B.c_dp +=
            workingset_Aineq_data[proc_control_node_B.ia_d - 1] *
            solution_searchDir_data[proc_control_node_B.ix_o2];
          proc_control_node_B.ix_o2++;
          proc_control_node_B.ia_d++;
        }

        workspace_data[proc_control_node_B.iyend_n] += proc_control_node_B.c_dp;
        proc_control_node_B.iyend_n++;
        proc_control_node_B.iac_f += workingset_ldA;
      }
    }

    proc_control_node_B.iyend_n = 0;
    while (proc_control_node_B.iyend_n <= proc_control_node_B.totalIneq) {
      proc_control_node_B.b_iy_l = proc_control_node_B.ldw +
        proc_control_node_B.iyend_n;
      if ((workspace_data[proc_control_node_B.b_iy_l] >
           proc_control_node_B.denomTol) && (!workingset_isActiveConstr_data
           [(workingset_isActiveIdx[2] + proc_control_node_B.iyend_n) - 1])) {
        proc_control_node_B.u0_h = fabs
          (workspace_data[proc_control_node_B.iyend_n]);
        proc_control_node_B.ratio = 0.02 -
          workspace_data[proc_control_node_B.iyend_n];
        if ((proc_control_node_B.u0_h < proc_control_node_B.ratio) || rtIsNaN
            (proc_control_node_B.ratio)) {
          proc_control_node_B.ratio = proc_control_node_B.u0_h;
        }

        proc_control_node_B.ratio /= workspace_data[proc_control_node_B.b_iy_l];
        if (proc_control_node_B.ratio < *alpha) {
          *alpha = proc_control_node_B.ratio;
          *constrType = 3;
          *constrIdx = proc_control_node_B.iyend_n + 1;
          *newBlocking = true;
        }
      }

      proc_control_node_B.iyend_n++;
    }
  }

  if (workingset_nWConstr[3] < workingset_sizes[3]) {
    proc_control_node_B.c_dp = solution_xstar_data[workingset_nVar - 1] *
      static_cast<real_T>(isPhaseOne);
    proc_control_node_B.phaseOneCorrectionP =
      solution_searchDir_data[workingset_nVar - 1] * static_cast<real_T>
      (isPhaseOne);
    proc_control_node_B.totalIneq = 0;
    while (proc_control_node_B.totalIneq <= workingset_sizes[3] - 2) {
      proc_control_node_B.pk_corrected =
        -solution_searchDir_data[workingset_indexLB_data[proc_control_node_B.totalIneq]
        - 1] - proc_control_node_B.phaseOneCorrectionP;
      if ((proc_control_node_B.pk_corrected > proc_control_node_B.denomTol) && (
           !workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
            proc_control_node_B.totalIneq) - 1])) {
        proc_control_node_B.ratio =
          (-solution_xstar_data[workingset_indexLB_data[proc_control_node_B.totalIneq]
           - 1] -
           workingset_lb_data[workingset_indexLB_data[proc_control_node_B.totalIneq]
           - 1]) - proc_control_node_B.c_dp;
        proc_control_node_B.u0_h = fabs(proc_control_node_B.ratio);
        if ((!(proc_control_node_B.u0_h < 0.02 - proc_control_node_B.ratio)) &&
            (!rtIsNaN(0.02 - proc_control_node_B.ratio))) {
          proc_control_node_B.u0_h = 0.02 - proc_control_node_B.ratio;
        }

        proc_control_node_B.ratio = proc_control_node_B.u0_h /
          proc_control_node_B.pk_corrected;
        if (proc_control_node_B.ratio < *alpha) {
          *alpha = proc_control_node_B.ratio;
          *constrType = 4;
          *constrIdx = proc_control_node_B.totalIneq + 1;
          *newBlocking = true;
        }
      }

      proc_control_node_B.totalIneq++;
    }

    proc_control_node_B.b_iy_l = workingset_indexLB_data[workingset_sizes[3] - 1]
      - 1;
    proc_control_node_B.c_dp =
      -solution_searchDir_data[proc_control_node_B.b_iy_l];
    if ((proc_control_node_B.c_dp > proc_control_node_B.denomTol) &&
        (!workingset_isActiveConstr_data[(workingset_isActiveIdx[3] +
          workingset_sizes[3]) - 2])) {
      proc_control_node_B.ratio =
        -solution_xstar_data[proc_control_node_B.b_iy_l] -
        workingset_lb_data[proc_control_node_B.b_iy_l];
      proc_control_node_B.u0_h = fabs(proc_control_node_B.ratio);
      if ((!(proc_control_node_B.u0_h < 0.02 - proc_control_node_B.ratio)) &&
          (!rtIsNaN(0.02 - proc_control_node_B.ratio))) {
        proc_control_node_B.u0_h = 0.02 - proc_control_node_B.ratio;
      }

      proc_control_node_B.ratio = proc_control_node_B.u0_h /
        proc_control_node_B.c_dp;
      if (proc_control_node_B.ratio < *alpha) {
        *alpha = proc_control_node_B.ratio;
        *constrType = 4;
        *constrIdx = workingset_sizes[3];
        *newBlocking = true;
      }
    }
  }

  if (!isPhaseOne) {
    *newBlocking = (((!*newBlocking) || (!(*alpha > 1.0))) && (*newBlocking));
    if (!(*alpha < 1.0)) {
      *alpha = 1.0;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_c_checkUnboundedOrIllPosed
  (s_SfTiiT1KRClFcMCE02xJjB_proc_T *solution, const
   s_syceGAKWionoNWyVws9jI_proc__T *objective)
{
  if (objective->objtype == 5) {
    if (proc_control_node_xnrm2_m(objective->nvar, solution->searchDir.data) >
        100.0 * static_cast<real_T>(objective->nvar) * 1.4901161193847656E-8) {
      solution->state = 3;
    } else {
      solution->state = 4;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_addBoundToActiveSetMatrix_
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj, int32_T TYPE, int32_T idx_local)
{
  int32_T colOffset;
  int32_T idx;
  int32_T idx_bnd_local;
  obj->nWConstr[TYPE - 1]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[TYPE - 1] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = TYPE;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  colOffset = (obj->nActiveConstr - 1) * obj->ldA - 1;
  if (TYPE == 5) {
    idx_bnd_local = obj->indexUB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->ub.data[idx_bnd_local - 1];
  } else {
    idx_bnd_local = obj->indexLB.data[idx_local - 1];
    obj->bwset.data[obj->nActiveConstr - 1] = obj->lb.data[idx_bnd_local - 1];
  }

  for (idx = 0; idx <= idx_bnd_local - 2; idx++) {
    obj->ATwset.data[(idx + colOffset) + 1] = 0.0;
  }

  obj->ATwset.data[idx_bnd_local + colOffset] = static_cast<real_T>(TYPE == 5) *
    2.0 - 1.0;
  for (idx_bnd_local++; idx_bnd_local <= obj->nVar; idx_bnd_local++) {
    obj->ATwset.data[idx_bnd_local + colOffset] = 0.0;
  }

  switch (obj->probType) {
   case 3:
   case 2:
    break;

   default:
    obj->ATwset.data[obj->nVar + colOffset] = -1.0;
    break;
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_addAineqConstr
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj, int32_T idx_local)
{
  int32_T iAineq0;
  int32_T iAw0;
  int32_T idx;
  obj->nWConstr[2]++;
  obj->isActiveConstr.data[(obj->isActiveIdx[2] + idx_local) - 2] = true;
  obj->nActiveConstr++;
  obj->Wid.data[obj->nActiveConstr - 1] = 3;
  obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
  iAineq0 = (idx_local - 1) * obj->ldA;
  iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
  for (idx = 0; idx < obj->nVar; idx++) {
    obj->ATwset.data[iAw0 + idx] = obj->Aineq.data[iAineq0 + idx];
  }

  obj->bwset.data[obj->nActiveConstr - 1] = obj->bineq.data[idx_local - 1];
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_checkStoppingAndUpdateFval(int32_T
  *activeSetChangeID, const real_T f_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T
  *solution, s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, const
  s_syceGAKWionoNWyVws9jI_proc__T *objective, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *qrmanager, real_T
  options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations, boolean_T
  updateFval)
{
  boolean_T nonDegenerateWset;
  solution->iterations++;
  proc_control_node_B.nVar_tmp_tmp_o = objective->nvar - 1;
  if ((solution->iterations >= runTimeOptions_MaxIterations) &&
      ((solution->state != 1) || (objective->objtype == 5))) {
    solution->state = 0;
  }

  if (solution->iterations - solution->iterations / 50 * 50 == 0) {
    proc_control_node_B.b_p5 = proc__maxConstraintViolation_du(workingset,
      solution->xstar.data);
    solution->maxConstr = proc_control_node_B.b_p5;
    proc_control_node_B.tempMaxConstr = proc_control_node_B.b_p5;
    if (objective->objtype == 5) {
      proc_control_node_B.tempMaxConstr = proc_control_node_B.b_p5 -
        solution->xstar.data[objective->nvar - 1];
    }

    if (proc_control_node_B.tempMaxConstr > 0.02) {
      proc_control_node_B.y_size_idx_0_i = solution->searchDir.size;
      proc_control_node_B.loop_ub_l1 = solution->searchDir.size;
      if (0 <= proc_control_node_B.loop_ub_l1 - 1) {
        memcpy(&proc_control_node_B.y_data_b[0], &solution->searchDir.data[0],
               proc_control_node_B.loop_ub_l1 * sizeof(real_T));
      }

      proc_control_node_B.loop_ub_l1 = 0;
      while (proc_control_node_B.loop_ub_l1 <=
             proc_control_node_B.nVar_tmp_tmp_o) {
        proc_control_node_B.y_data_b[proc_control_node_B.loop_ub_l1] =
          solution->xstar.data[proc_control_node_B.loop_ub_l1];
        proc_control_node_B.loop_ub_l1++;
      }

      if (0 <= proc_control_node_B.y_size_idx_0_i - 1) {
        memcpy(&solution->searchDir.data[0], &proc_control_node_B.y_data_b[0],
               proc_control_node_B.y_size_idx_0_i * sizeof(real_T));
      }

      proc_control_node_B.loop_ub_l1 = memspace->workspace_double.size[0] *
        memspace->workspace_double.size[1];
      for (proc_control_node_B.y_size_idx_0_i = 0;
           proc_control_node_B.y_size_idx_0_i < proc_control_node_B.loop_ub_l1;
           proc_control_node_B.y_size_idx_0_i++) {
      }

      nonDegenerateWset = proc_co_feasibleX0ForWorkingSet
        (memspace->workspace_double.data, memspace->workspace_double.size,
         solution->searchDir.data, workingset, qrmanager);
      if ((!nonDegenerateWset) && (solution->state != 0)) {
        solution->state = -2;
      }

      *activeSetChangeID = 0;
      proc_control_node_B.tempMaxConstr = proc__maxConstraintViolation_du
        (workingset, solution->searchDir.data);
      if (proc_control_node_B.tempMaxConstr < proc_control_node_B.b_p5) {
        proc_control_node_B.loop_ub_l1 = 0;
        while (proc_control_node_B.loop_ub_l1 <=
               proc_control_node_B.nVar_tmp_tmp_o) {
          solution->xstar.data[proc_control_node_B.loop_ub_l1] =
            solution->searchDir.data[proc_control_node_B.loop_ub_l1];
          proc_control_node_B.loop_ub_l1++;
        }

        solution->maxConstr = proc_control_node_B.tempMaxConstr;
      }
    }
  }

  if (updateFval && (options_ObjectiveLimit > (rtMinusInf))) {
    proc_control_node_B.loop_ub_l1 = memspace->workspace_double.size[0] *
      memspace->workspace_double.size[1];
    for (proc_control_node_B.y_size_idx_0_i = 0;
         proc_control_node_B.y_size_idx_0_i < proc_control_node_B.loop_ub_l1;
         proc_control_node_B.y_size_idx_0_i++) {
    }

    proc_control_node_B.b_p5 = proc_contro_computeFval_ReuseHx(objective,
      memspace->workspace_double.data, f_data, solution->xstar.data);
    solution->fstar = proc_control_node_B.b_p5;
    if ((proc_control_node_B.b_p5 < options_ObjectiveLimit) && ((solution->state
          != 0) || (objective->objtype != 5))) {
      solution->state = 2;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_iterate(const real_T H[24025],
  const real_T f_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T *solution,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *qrmanager,
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *cholmanager, s_syceGAKWionoNWyVws9jI_proc__T *
  objective, const char_T options_SolverName[7], real_T options_StepTolerance,
  real_T options_ObjectiveLimit, int32_T runTimeOptions_MaxIterations)
{
  int32_T exitg1;
  boolean_T guard1 = false;
  boolean_T guard11 = false;
  boolean_T guard2 = false;
  boolean_T subProblemChanged;
  boolean_T updateFval;
  subProblemChanged = true;
  updateFval = true;
  proc_control_node_B.activeSetChangeID = 0;
  proc_control_node_B.TYPE = objective->objtype;
  proc_control_node_B.nVar_j = workingset->nVar;
  proc_control_node_B.globalActiveConstrIdx = 0;
  proc_contro_computeGrad_StoreHx(objective, H, f_data, solution->xstar.data);
  proc_control_node_B.iyend = memspace->workspace_double.size[0] *
    memspace->workspace_double.size[1];
  for (proc_control_node_B.workingIdx = 0; proc_control_node_B.workingIdx <
       proc_control_node_B.iyend; proc_control_node_B.workingIdx++) {
  }

  solution->fstar = proc_contro_computeFval_ReuseHx(objective,
    memspace->workspace_double.data, f_data, solution->xstar.data);
  if (solution->iterations < runTimeOptions_MaxIterations) {
    solution->state = -5;
  } else {
    solution->state = 0;
  }

  proc_control_node_B.iyend = 0;
  while (proc_control_node_B.iyend <= workingset->mConstrMax - 1) {
    solution->lambda.data[proc_control_node_B.iyend] = 0.0;
    proc_control_node_B.iyend++;
  }

  do {
    exitg1 = 0;
    if (solution->state == -5) {
      guard11 = false;
      if (subProblemChanged) {
        switch (proc_control_node_B.activeSetChangeID) {
         case 1:
          proc_control_node_B.workingIdx = (workingset->nActiveConstr - 1) *
            workingset->ldA;
          if (qrmanager->mrows < qrmanager->ncols + 1) {
            qrmanager->minRowCol = qrmanager->mrows;
          } else {
            qrmanager->minRowCol = qrmanager->ncols + 1;
          }

          proc_control_node_B.iQR0 = qrmanager->ldq * qrmanager->ncols;
          proc_control_node_B.iy_b = qrmanager->ldq;
          if (qrmanager->mrows != 0) {
            proc_control_node_B.iyend = proc_control_node_B.iQR0 +
              qrmanager->mrows;
            proc_control_node_B.memspace_l = proc_control_node_B.iQR0;
            while (proc_control_node_B.memspace_l + 1 <=
                   proc_control_node_B.iyend) {
              qrmanager->QR.data[proc_control_node_B.memspace_l] = 0.0;
              proc_control_node_B.memspace_l++;
            }

            proc_control_node_B.memspace_l = (qrmanager->mrows - 1) *
              qrmanager->ldq + 1;
            proc_control_node_B.iyend = 1;
            while (((proc_control_node_B.iy_b > 0) && (proc_control_node_B.iyend
                     <= proc_control_node_B.memspace_l)) ||
                   ((proc_control_node_B.iy_b < 0) && (proc_control_node_B.iyend
                     >= proc_control_node_B.memspace_l))) {
              proc_control_node_B.b_ix = proc_control_node_B.workingIdx;
              proc_control_node_B.normDelta = 0.0;
              proc_control_node_B.j_f2 = (proc_control_node_B.iyend +
                qrmanager->mrows) - 1;
              proc_control_node_B.ia_p = proc_control_node_B.iyend;
              while (proc_control_node_B.ia_p <= proc_control_node_B.j_f2) {
                proc_control_node_B.normDelta += qrmanager->
                  Q.data[proc_control_node_B.ia_p - 1] * workingset->
                  ATwset.data[proc_control_node_B.b_ix];
                proc_control_node_B.b_ix++;
                proc_control_node_B.ia_p++;
              }

              qrmanager->QR.data[proc_control_node_B.iQR0] +=
                proc_control_node_B.normDelta;
              proc_control_node_B.iQR0++;
              proc_control_node_B.iyend += proc_control_node_B.iy_b;
            }
          }

          qrmanager->ncols++;
          qrmanager->jpvt.data[qrmanager->ncols - 1] = qrmanager->ncols;
          proc_control_node_B.workingIdx = qrmanager->mrows - 2;
          while (proc_control_node_B.workingIdx + 2 > qrmanager->ncols) {
            proc_control_node_B.iQR0 = proc_control_node_B.workingIdx +
              (qrmanager->ncols - 1) * qrmanager->ldq;
            proc_control_node_B.temp_p = qrmanager->
              QR.data[proc_control_node_B.iQR0];
            proc_control_node_B.i = qrmanager->QR.data[proc_control_node_B.iQR0
              + 1];
            proc_control_node_xrotg(&proc_control_node_B.temp_p,
              &proc_control_node_B.i, &proc_control_node_B.normDelta,
              &proc_control_node_B.s_k);
            qrmanager->QR.data[proc_control_node_B.iQR0] =
              proc_control_node_B.temp_p;
            qrmanager->QR.data[proc_control_node_B.iQR0 + 1] =
              proc_control_node_B.i;
            proc_control_node_B.iyend = qrmanager->ldq *
              proc_control_node_B.workingIdx;
            if (qrmanager->mrows >= 1) {
              proc_control_node_B.iQR0 = proc_control_node_B.iyend;
              proc_control_node_B.iy_b = qrmanager->ldq +
                proc_control_node_B.iyend;
              proc_control_node_B.memspace_l = 0;
              while (proc_control_node_B.memspace_l <= qrmanager->mrows - 1) {
                proc_control_node_B.temp_p = qrmanager->
                  Q.data[proc_control_node_B.iQR0] *
                  proc_control_node_B.normDelta + qrmanager->
                  Q.data[proc_control_node_B.iy_b] * proc_control_node_B.s_k;
                qrmanager->Q.data[proc_control_node_B.iy_b] = qrmanager->
                  Q.data[proc_control_node_B.iy_b] *
                  proc_control_node_B.normDelta - qrmanager->
                  Q.data[proc_control_node_B.iQR0] * proc_control_node_B.s_k;
                qrmanager->Q.data[proc_control_node_B.iQR0] =
                  proc_control_node_B.temp_p;
                proc_control_node_B.iy_b++;
                proc_control_node_B.iQR0++;
                proc_control_node_B.memspace_l++;
              }
            }

            proc_control_node_B.workingIdx--;
          }
          break;

         case -1:
          proc_control_n_deleteColMoveEnd(qrmanager,
            proc_control_node_B.globalActiveConstrIdx);
          break;

         default:
          proc_control_node_factorQR_h(qrmanager, workingset->ATwset.data,
            proc_control_node_B.nVar_j, workingset->nActiveConstr,
            workingset->ldA);
          proc_control_node_computeQ_(qrmanager, qrmanager->mrows);
          break;
        }

        proc_control_nod_compute_deltax(H, solution, memspace, qrmanager,
          cholmanager, objective, proc_control_node_strcmp(options_SolverName));
        if (solution->state != -5) {
          exitg1 = 1;
        } else {
          proc_control_node_B.normDelta = proc_control_node_xnrm2_m
            (proc_control_node_B.nVar_j, solution->searchDir.data);
          guard11 = true;
        }
      } else {
        proc_control_node_B.workingIdx = solution->searchDir.size;
        proc_control_node_B.iQR0 = solution->searchDir.size;
        if (0 <= proc_control_node_B.iQR0 - 1) {
          memcpy(&proc_control_node_B.y_data_o[0], &solution->searchDir.data[0],
                 proc_control_node_B.iQR0 * sizeof(real_T));
        }

        proc_control_node_B.iyend = 0;
        while (proc_control_node_B.iyend <= proc_control_node_B.nVar_j - 1) {
          proc_control_node_B.y_data_o[proc_control_node_B.iyend] = 0.0;
          proc_control_node_B.iyend++;
        }

        if (0 <= proc_control_node_B.workingIdx - 1) {
          memcpy(&solution->searchDir.data[0], &proc_control_node_B.y_data_o[0],
                 proc_control_node_B.workingIdx * sizeof(real_T));
        }

        proc_control_node_B.normDelta = 0.0;
        guard11 = true;
      }

      if (guard11) {
        if ((!subProblemChanged) || (proc_control_node_B.normDelta <
             options_StepTolerance) || (workingset->nActiveConstr >=
             proc_control_node_B.nVar_j)) {
          proc_control_node_B.c_size_g[0] = memspace->workspace_double.size[0];
          proc_control_node_B.c_size_g[1] = memspace->workspace_double.size[1];
          proc_control_node_B.iyend = memspace->workspace_double.size[0] *
            memspace->workspace_double.size[1];
          if (0 <= proc_control_node_B.iyend - 1) {
            memcpy(&proc_control_node_B.c_data[0],
                   &memspace->workspace_double.data[0],
                   proc_control_node_B.iyend * sizeof(real_T));
          }

          if (qrmanager->ncols > 0) {
            guard1 = false;
            if (objective->objtype != 4) {
              proc_control_node_B.normDelta = 100.0 * static_cast<real_T>
                (qrmanager->mrows) * 2.2204460492503131E-16;
              updateFval = ((qrmanager->mrows > 0) && (qrmanager->ncols > 0));
              if (updateFval) {
                proc_control_node_B.iyend = qrmanager->ncols;
                guard2 = false;
                if (qrmanager->mrows < qrmanager->ncols) {
                  proc_control_node_B.workingIdx = (qrmanager->ncols - 1) *
                    qrmanager->ldq + qrmanager->mrows;
                  while ((proc_control_node_B.iyend > qrmanager->mrows) && (fabs
                          (qrmanager->QR.data[proc_control_node_B.workingIdx - 1])
                          >= proc_control_node_B.normDelta)) {
                    proc_control_node_B.iyend--;
                    proc_control_node_B.workingIdx -= qrmanager->ldq;
                  }

                  updateFval = (proc_control_node_B.iyend == qrmanager->mrows);
                  if (!updateFval) {
                  } else {
                    guard2 = true;
                  }
                } else {
                  guard2 = true;
                }

                if (guard2) {
                  proc_control_node_B.workingIdx = (proc_control_node_B.iyend -
                    1) * qrmanager->ldq + proc_control_node_B.iyend;
                  while ((proc_control_node_B.iyend >= 1) && (fabs
                          (qrmanager->QR.data[proc_control_node_B.workingIdx - 1])
                          >= proc_control_node_B.normDelta)) {
                    proc_control_node_B.iyend--;
                    proc_control_node_B.workingIdx =
                      (proc_control_node_B.workingIdx - qrmanager->ldq) - 1;
                  }

                  updateFval = (proc_control_node_B.iyend == 0);
                }
              }

              if (!updateFval) {
                solution->state = -7;
              } else {
                guard1 = true;
              }
            } else {
              guard1 = true;
            }

            if (guard1) {
              proc_control_node_B.c_size_g[0] = memspace->workspace_double.size
                [0];
              proc_control_node_B.c_size_g[1] = memspace->workspace_double.size
                [1];
              proc_control_node_B.iyend = memspace->workspace_double.size[0] *
                memspace->workspace_double.size[1];
              if (0 <= proc_control_node_B.iyend - 1) {
                memcpy(&proc_control_node_B.c_data[0],
                       &memspace->workspace_double.data[0],
                       proc_control_node_B.iyend * sizeof(real_T));
              }

              proc_control_node_xgemv_mtm(qrmanager->mrows, qrmanager->ncols,
                qrmanager->Q.data, qrmanager->ldq, objective->grad.data,
                proc_control_node_B.c_data);
              proc_control_node_xtrsv(qrmanager->ncols, qrmanager->QR.data,
                qrmanager->ldq, proc_control_node_B.c_data);
              proc_control_node_B.iyend = 0;
              while (proc_control_node_B.iyend <= qrmanager->ncols - 1) {
                solution->lambda.data[proc_control_node_B.iyend] =
                  -proc_control_node_B.c_data[proc_control_node_B.iyend];
                proc_control_node_B.iyend++;
              }
            }
          }

          memspace->workspace_double.size[0] = proc_control_node_B.c_size_g[0];
          memspace->workspace_double.size[1] = proc_control_node_B.c_size_g[1];
          proc_control_node_B.iQR0 = proc_control_node_B.c_size_g[0] *
            proc_control_node_B.c_size_g[1];
          if (0 <= proc_control_node_B.iQR0 - 1) {
            memcpy(&memspace->workspace_double.data[0],
                   &proc_control_node_B.c_data[0], proc_control_node_B.iQR0 *
                   sizeof(real_T));
          }

          if ((solution->state != -7) || (workingset->nActiveConstr >
               proc_control_node_B.nVar_j)) {
            proc_control_node_B.iyend = 0;
            proc_control_node_B.normDelta = 0.0;
            proc_control_node_B.workingIdx = workingset->nWConstr[0] +
              workingset->nWConstr[1];
            while (proc_control_node_B.workingIdx + 1 <=
                   workingset->nActiveConstr) {
              if (solution->lambda.data[proc_control_node_B.workingIdx] <
                  proc_control_node_B.normDelta) {
                proc_control_node_B.normDelta = solution->
                  lambda.data[proc_control_node_B.workingIdx];
                proc_control_node_B.iyend = proc_control_node_B.workingIdx + 1;
              }

              proc_control_node_B.workingIdx++;
            }

            if (proc_control_node_B.iyend == 0) {
              solution->state = 1;
            } else {
              proc_control_node_B.activeSetChangeID = -1;
              proc_control_node_B.globalActiveConstrIdx =
                proc_control_node_B.iyend;
              subProblemChanged = true;
              proc_control_node_removeConstr(workingset,
                proc_control_node_B.iyend);
              solution->lambda.data[proc_control_node_B.iyend - 1] = 0.0;
            }
          } else {
            proc_control_node_B.iyend = workingset->nActiveConstr;
            proc_control_node_B.activeSetChangeID = 0;
            proc_control_node_B.globalActiveConstrIdx =
              workingset->nActiveConstr;
            subProblemChanged = true;
            proc_control_node_removeConstr(workingset, workingset->nActiveConstr);
            solution->lambda.data[proc_control_node_B.iyend - 1] = 0.0;
          }

          updateFval = false;
        } else {
          proc_control_node_B.iyend = memspace->workspace_double.size[0] *
            memspace->workspace_double.size[1];
          for (proc_control_node_B.workingIdx = 0;
               proc_control_node_B.workingIdx < proc_control_node_B.iyend;
               proc_control_node_B.workingIdx++) {
          }

          proc_control__feasibleratiotest(solution->xstar.data,
            solution->searchDir.data, memspace->workspace_double.data,
            memspace->workspace_double.size, workingset->nVar, workingset->ldA,
            workingset->Aineq.data, workingset->bineq.data, workingset->lb.data,
            workingset->indexLB.data, workingset->sizes, workingset->isActiveIdx,
            workingset->isActiveConstr.data, workingset->nWConstr,
            proc_control_node_B.TYPE == 5, &proc_control_node_B.normDelta,
            &updateFval, &proc_control_node_B.iyend,
            &proc_control_node_B.workingIdx);
          if (updateFval) {
            switch (proc_control_node_B.iyend) {
             case 3:
              proc_control_nod_addAineqConstr(workingset,
                proc_control_node_B.workingIdx);
              break;

             case 4:
              proc_addBoundToActiveSetMatrix_(workingset, 4,
                proc_control_node_B.workingIdx);
              break;

             default:
              proc_addBoundToActiveSetMatrix_(workingset, 5,
                proc_control_node_B.workingIdx);
              break;
            }

            proc_control_node_B.activeSetChangeID = 1;
          } else {
            proc_c_checkUnboundedOrIllPosed(solution, objective);
            subProblemChanged = false;
            if (workingset->nActiveConstr == 0) {
              solution->state = 1;
            }
          }

          if ((proc_control_node_B.nVar_j >= 1) &&
              (!(proc_control_node_B.normDelta == 0.0))) {
            proc_control_node_B.iyend = 0;
            while (proc_control_node_B.iyend <= proc_control_node_B.nVar_j - 1)
            {
              solution->xstar.data[proc_control_node_B.iyend] +=
                proc_control_node_B.normDelta * solution->
                searchDir.data[proc_control_node_B.iyend];
              proc_control_node_B.iyend++;
            }
          }

          proc_contro_computeGrad_StoreHx(objective, H, f_data,
            solution->xstar.data);
          updateFval = true;
        }

        proc_checkStoppingAndUpdateFval(&proc_control_node_B.activeSetChangeID,
          f_data, solution, memspace, objective, workingset, qrmanager,
          options_ObjectiveLimit, runTimeOptions_MaxIterations, updateFval);
      }
    } else {
      if (!updateFval) {
        proc_control_node_B.iyend = memspace->workspace_double.size[0] *
          memspace->workspace_double.size[1];
        for (proc_control_node_B.workingIdx = 0; proc_control_node_B.workingIdx <
             proc_control_node_B.iyend; proc_control_node_B.workingIdx++) {
        }

        solution->fstar = proc_contro_computeFval_ReuseHx(objective,
          memspace->workspace_double.data, f_data, solution->xstar.data);
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_linearForm_(boolean_T
  obj_hasLinear, int32_T obj_nvar, real_T workspace_data[], const real_T H[24025],
  const real_T f_data[], const real_T x_data[])
{
  int32_T b;
  int32_T b_c;
  int32_T ia;
  int32_T iac;
  proc_control_node_B.fMultiplier = 0;
  if (obj_hasLinear) {
    while (proc_control_node_B.fMultiplier <= obj_nvar - 1) {
      workspace_data[proc_control_node_B.fMultiplier] =
        f_data[proc_control_node_B.fMultiplier];
      proc_control_node_B.fMultiplier++;
    }

    proc_control_node_B.fMultiplier = 1;
  }

  if (obj_nvar != 0) {
    if (proc_control_node_B.fMultiplier != 1) {
      while (proc_control_node_B.fMultiplier <= obj_nvar - 1) {
        workspace_data[proc_control_node_B.fMultiplier] = 0.0;
        proc_control_node_B.fMultiplier++;
      }
    }

    proc_control_node_B.fMultiplier = 0;
    b_c = (obj_nvar - 1) * obj_nvar + 1;
    iac = 1;
    while (((obj_nvar > 0) && (iac <= b_c)) || ((obj_nvar < 0) && (iac >= b_c)))
    {
      proc_control_node_B.c_c3 = 0.5 * x_data[proc_control_node_B.fMultiplier];
      proc_control_node_B.iy_k4 = 0;
      b = (iac + obj_nvar) - 1;
      for (ia = iac; ia <= b; ia++) {
        workspace_data[proc_control_node_B.iy_k4] += H[ia - 1] *
          proc_control_node_B.c_c3;
        proc_control_node_B.iy_k4++;
      }

      proc_control_node_B.fMultiplier++;
      iac += obj_nvar;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_node_computeFval(const
  s_syceGAKWionoNWyVws9jI_proc__T *obj, real_T workspace_data[], const real_T H
  [24025], const real_T f_data[], const real_T x_data[])
{
  real_T val;
  switch (obj->objtype) {
   case 5:
    val = x_data[obj->nvar - 1] * obj->gammaScalar;
    break;

   case 3:
    proc_control_node_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    val = 0.0;
    if (obj->nvar >= 1) {
      proc_control_node_B.idx_f = 0;
      while (proc_control_node_B.idx_f <= obj->nvar - 1) {
        val += workspace_data[proc_control_node_B.idx_f] *
          x_data[proc_control_node_B.idx_f];
        proc_control_node_B.idx_f++;
      }
    }
    break;

   default:
    proc_control_node_linearForm_(obj->hasLinear, obj->nvar, workspace_data, H,
      f_data, x_data);
    proc_control_node_B.idx_f = obj->nvar;
    while (proc_control_node_B.idx_f + 1 <= obj->maxVar - 1) {
      workspace_data[proc_control_node_B.idx_f] = 0.5 * obj->beta *
        x_data[proc_control_node_B.idx_f] + obj->rho;
      proc_control_node_B.idx_f++;
    }

    val = 0.0;
    if (obj->maxVar - 1 >= 1) {
      proc_control_node_B.idx_f = 0;
      while (proc_control_node_B.idx_f <= obj->maxVar - 2) {
        val += workspace_data[proc_control_node_B.idx_f] *
          x_data[proc_control_node_B.idx_f];
        proc_control_node_B.idx_f++;
      }
    }
    break;
  }

  return val;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_phaseone(const real_T H
  [24025], const real_T f_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T *solution,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *qrmanager,
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *cholmanager, s_syceGAKWionoNWyVws9jI_proc__T *
  objective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *options, const
  s1TgE9KstXgkd2qJxO1bF4F_proc__T *runTimeOptions)
{
  boolean_T exitg1;
  proc_control_node_B.PROBTYPE_ORIG = workingset->probType;
  proc_control_node_B.nVar_tmp = workingset->nVar;
  solution->xstar.data[workingset->nVar] = solution->maxConstr + 1.0;
  if (workingset->probType == 3) {
    proc_control_node_B.mEqFixed = 1;
  } else {
    proc_control_node_B.mEqFixed = 4;
  }

  proc_control_nod_setProblemType(workingset, proc_control_node_B.mEqFixed);
  proc_contro_removeAllIneqConstr(workingset);
  objective->prev_objtype = objective->objtype;
  objective->prev_nvar = objective->nvar;
  objective->prev_hasLinear = objective->hasLinear;
  objective->objtype = 5;
  objective->nvar = proc_control_node_B.nVar_tmp + 1;
  objective->gammaScalar = 1.0;
  objective->hasLinear = true;
  options->ObjectiveLimit = 0.02;
  options->StepTolerance = 1.4901161193847657E-10;
  proc_control_node_B.mConstr = memspace->workspace_double.size[0] *
    memspace->workspace_double.size[1];
  for (proc_control_node_B.mEqFixed = 0; proc_control_node_B.mEqFixed <
       proc_control_node_B.mConstr; proc_control_node_B.mEqFixed++) {
  }

  solution->fstar = proc_control_node_computeFval(objective,
    memspace->workspace_double.data, H, f_data, solution->xstar.data);
  solution->state = 5;
  proc_control_node_iterate(H, f_data, solution, memspace, workingset, qrmanager,
    cholmanager, objective, options->SolverName, options->StepTolerance,
    options->ObjectiveLimit, runTimeOptions->MaxIterations);
  if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
       workingset->sizes[3]) - 2]) {
    proc_control_node_B.mConstr = workingset->sizes[0] + 131;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.mConstr <=
                         workingset->nActiveConstr)) {
      if ((workingset->Wid.data[proc_control_node_B.mConstr - 1] == 4) &&
          (workingset->Wlocalidx.data[proc_control_node_B.mConstr - 1] ==
           workingset->sizes[3])) {
        proc_control_node_removeConstr(workingset, proc_control_node_B.mConstr);
        exitg1 = true;
      } else {
        proc_control_node_B.mConstr++;
      }
    }
  }

  proc_control_node_B.mConstr = workingset->nActiveConstr;
  proc_control_node_B.mEqFixed = workingset->sizes[0] + 130;
  while ((proc_control_node_B.mConstr > proc_control_node_B.mEqFixed) &&
         (proc_control_node_B.mConstr > proc_control_node_B.nVar_tmp)) {
    proc_control_node_removeConstr(workingset, proc_control_node_B.mConstr);
    proc_control_node_B.mConstr--;
  }

  solution->maxConstr = solution->xstar.data[proc_control_node_B.nVar_tmp];
  proc_control_nod_setProblemType(workingset, proc_control_node_B.PROBTYPE_ORIG);
  objective->objtype = objective->prev_objtype;
  objective->nvar = objective->prev_nvar;
  objective->hasLinear = objective->prev_hasLinear;
  options->ObjectiveLimit = (rtMinusInf);
  options->StepTolerance = 1.0E-6;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_driver_i(const real_T H
  [24025], const real_T f_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T *solution,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *workingset, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *qrmanager,
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *cholmanager, s_syceGAKWionoNWyVws9jI_proc__T *
  objective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *options,
  s1TgE9KstXgkd2qJxO1bF4F_proc__T *runTimeOptions)
{
  boolean_T guard1 = false;
  solution->iterations = 0;
  runTimeOptions->RemainFeasible = true;
  proc_control_node_B.nVar_d = workingset->nVar - 1;
  guard1 = false;
  if (workingset->probType == 3) {
    proc_control_node_B.b_idx = 0;
    while (proc_control_node_B.b_idx <= workingset->sizes[0] - 1) {
      solution->xstar.data[workingset->indexFixed.data[proc_control_node_B.b_idx]
        - 1] = workingset->ub.data[workingset->
        indexFixed.data[proc_control_node_B.b_idx] - 1];
      proc_control_node_B.b_idx++;
    }

    proc_control_node_B.b_idx = 0;
    while (proc_control_node_B.b_idx <= workingset->sizes[3] - 1) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[3] +
           proc_control_node_B.b_idx) - 1]) {
        solution->xstar.data[workingset->indexLB.data[proc_control_node_B.b_idx]
          - 1] = -workingset->lb.data[workingset->
          indexLB.data[proc_control_node_B.b_idx] - 1];
      }

      proc_control_node_B.b_idx++;
    }

    proc_control_node_B.b_idx = 0;
    while (proc_control_node_B.b_idx <= workingset->sizes[4] - 1) {
      if (workingset->isActiveConstr.data[(workingset->isActiveIdx[4] +
           proc_control_node_B.b_idx) - 1]) {
        solution->xstar.data[workingset->indexUB.data[proc_control_node_B.b_idx]
          - 1] = workingset->ub.data[workingset->
          indexUB.data[proc_control_node_B.b_idx] - 1];
      }

      proc_control_node_B.b_idx++;
    }

    proc_control_PresolveWorkingSet(solution, memspace, workingset, qrmanager);
    if (solution->state < 0) {
    } else {
      guard1 = true;
    }
  } else {
    solution->state = 82;
    guard1 = true;
  }

  if (guard1) {
    solution->iterations = 0;
    proc_control_node_B.b_d = proc__maxConstraintViolation_du(workingset,
      solution->xstar.data);
    solution->maxConstr = proc_control_node_B.b_d;
    if (proc_control_node_B.b_d > 0.02) {
      proc_control_node_phaseone(H, f_data, solution, memspace, workingset,
        qrmanager, cholmanager, objective, options, runTimeOptions);
      if (solution->state != 0) {
        proc_control_node_B.b_d = proc__maxConstraintViolation_du(workingset,
          solution->xstar.data);
        solution->maxConstr = proc_control_node_B.b_d;
        if (proc_control_node_B.b_d > 0.02) {
          proc_control_node_B.nVar_d = 0;
          while (proc_control_node_B.nVar_d <= workingset->mConstrMax - 1) {
            solution->lambda.data[proc_control_node_B.nVar_d] = 0.0;
            proc_control_node_B.nVar_d++;
          }

          proc_control_node_B.nVar_d = memspace->workspace_double.size[0] *
            memspace->workspace_double.size[1];
          for (proc_control_node_B.b_idx = 0; proc_control_node_B.b_idx <
               proc_control_node_B.nVar_d; proc_control_node_B.b_idx++) {
          }

          solution->fstar = proc_control_node_computeFval(objective,
            memspace->workspace_double.data, H, f_data, solution->xstar.data);
          solution->state = -2;
        } else {
          if (proc_control_node_B.b_d > 0.0) {
            proc_control_node_B.y_size_idx_0_l = solution->searchDir.size;
            proc_control_node_B.b_idx = solution->searchDir.size;
            if (0 <= proc_control_node_B.b_idx - 1) {
              memcpy(&proc_control_node_B.y_data_l[0], &solution->
                     searchDir.data[0], proc_control_node_B.b_idx * sizeof
                     (real_T));
            }

            proc_control_node_B.b_idx = 0;
            while (proc_control_node_B.b_idx <= proc_control_node_B.nVar_d) {
              proc_control_node_B.y_data_l[proc_control_node_B.b_idx] =
                solution->xstar.data[proc_control_node_B.b_idx];
              proc_control_node_B.b_idx++;
            }

            if (0 <= proc_control_node_B.y_size_idx_0_l - 1) {
              memcpy(&solution->searchDir.data[0],
                     &proc_control_node_B.y_data_l[0],
                     proc_control_node_B.y_size_idx_0_l * sizeof(real_T));
            }

            proc_control_PresolveWorkingSet(solution, memspace, workingset,
              qrmanager);
            proc_control_node_B.b_d = proc__maxConstraintViolation_du(workingset,
              solution->xstar.data);
            if (proc_control_node_B.b_d >= solution->maxConstr) {
              solution->maxConstr = proc_control_node_B.b_d;
              proc_control_node_B.y_size_idx_0_l = solution->xstar.size;
              proc_control_node_B.b_idx = solution->xstar.size;
              if (0 <= proc_control_node_B.b_idx - 1) {
                memcpy(&proc_control_node_B.y_data_l[0], &solution->xstar.data[0],
                       proc_control_node_B.b_idx * sizeof(real_T));
              }

              proc_control_node_B.b_idx = 0;
              while (proc_control_node_B.b_idx <= proc_control_node_B.nVar_d) {
                proc_control_node_B.y_data_l[proc_control_node_B.b_idx] =
                  solution->searchDir.data[proc_control_node_B.b_idx];
                proc_control_node_B.b_idx++;
              }

              if (0 <= proc_control_node_B.y_size_idx_0_l - 1) {
                memcpy(&solution->xstar.data[0], &proc_control_node_B.y_data_l[0],
                       proc_control_node_B.y_size_idx_0_l * sizeof(real_T));
              }
            }
          }

          proc_control_node_iterate(H, f_data, solution, memspace, workingset,
            qrmanager, cholmanager, objective, options->SolverName,
            options->StepTolerance, options->ObjectiveLimit,
            runTimeOptions->MaxIterations);
        }
      }
    } else {
      proc_control_node_iterate(H, f_data, solution, memspace, workingset,
        qrmanager, cholmanager, objective, options->SolverName,
        options->StepTolerance, options->ObjectiveLimit,
        runTimeOptions->MaxIterations);
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_addAeqConstr
  (s_YaC65yvYSxJoOs4cRNYgnE_proc_T *obj, int32_T idx_local)
{
  int32_T b_idx;
  int32_T iAeq0;
  int32_T iAw0;
  int32_T totalEq;
  totalEq = obj->nWConstr[0] + obj->nWConstr[1];
  if ((obj->nActiveConstr == totalEq) && (idx_local > obj->nWConstr[1])) {
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->nActiveConstr++;
    obj->Wid.data[obj->nActiveConstr - 1] = 2;
    obj->Wlocalidx.data[obj->nActiveConstr - 1] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = (obj->nActiveConstr - 1) * obj->ldA;
    for (totalEq = 1; totalEq - 1 < obj->nVar; totalEq++) {
      obj->ATwset.data[(iAw0 + totalEq) - 1] = obj->Aeq.data[(iAeq0 + totalEq) -
        1];
    }

    obj->bwset.data[obj->nActiveConstr - 1] = obj->beq[idx_local - 1];
  } else {
    obj->nActiveConstr++;
    iAeq0 = obj->nActiveConstr - 1;
    obj->Wid.data[obj->nActiveConstr - 1] = obj->Wid.data[totalEq];
    obj->Wlocalidx.data[iAeq0] = obj->Wlocalidx.data[totalEq];
    for (iAw0 = 0; iAw0 < obj->nVar; iAw0++) {
      obj->ATwset.data[iAw0 + obj->ldA * iAeq0] = obj->ATwset.data[obj->ldA *
        totalEq + iAw0];
    }

    obj->bwset.data[iAeq0] = obj->bwset.data[totalEq];
    obj->nWConstr[1]++;
    obj->isActiveConstr.data[(obj->isActiveIdx[1] + idx_local) - 2] = true;
    obj->Wid.data[totalEq] = 2;
    obj->Wlocalidx.data[totalEq] = idx_local;
    iAeq0 = (idx_local - 1) * obj->ldA;
    iAw0 = obj->ldA * totalEq;
    for (b_idx = 1; b_idx - 1 < obj->nVar; b_idx++) {
      obj->ATwset.data[(iAw0 + b_idx) - 1] = obj->Aeq.data[(iAeq0 + b_idx) - 1];
    }

    obj->bwset.data[totalEq] = obj->beq[idx_local - 1];
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_soc(const real_T
  Hessian[24025], const real_T grad_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T
  *TrialState, s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace,
  s_YaC65yvYSxJoOs4cRNYgnE_proc_T *WorkingSet, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T
  *QRManager, s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *CholManager,
  s_syceGAKWionoNWyVws9jI_proc__T *QPObjective, const
  s1TgE9KstXgkd2qJxO1bF4F_proc__T *qpoptions)
{
  boolean_T success;
  proc_control_node_B.nWIneq_old = WorkingSet->nWConstr[2];
  proc_control_node_B.nWLower_old = WorkingSet->nWConstr[3];
  proc_control_node_B.nWUpper_old = WorkingSet->nWConstr[4];
  proc_control_node_B.nVar_g = WorkingSet->nVar - 1;
  proc_control_node_B.mConstrMax_d = WorkingSet->mConstrMax - 1;
  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_g) {
    TrialState->xstarsqp[proc_control_node_B.idx_Aineq] =
      TrialState->xstarsqp_old[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_g) {
    TrialState->socDirection.data[proc_control_node_B.idx_Aineq] =
      TrialState->xstar.data[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.mConstrMax_d) {
    TrialState->lambdaStopTest.data[proc_control_node_B.idx_Aineq] =
      TrialState->lambda.data[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  for (proc_control_node_B.idx_Aineq = 0; proc_control_node_B.idx_Aineq < 130;
       proc_control_node_B.idx_Aineq++) {
    WorkingSet->beq[proc_control_node_B.idx_Aineq] = -TrialState->
      cEq[proc_control_node_B.idx_Aineq];
  }

  proc_control_node_B.idx_Aineq_tmp = WorkingSet->ldA;
  proc_control_node_B.iy_d = 0;
  proc_control_node_B.idx_upper = WorkingSet->ldA * 129 + 1;
  proc_control_node_B.iac_e = 1;
  while (((proc_control_node_B.idx_Aineq_tmp > 0) && (proc_control_node_B.iac_e <=
           proc_control_node_B.idx_upper)) ||
         ((proc_control_node_B.idx_Aineq_tmp < 0) && (proc_control_node_B.iac_e >=
           proc_control_node_B.idx_upper))) {
    proc_control_node_B.idx_Partition = 0;
    proc_control_node_B.oldDirIdx = 0.0;
    proc_control_node_B.idx_Aineq = (proc_control_node_B.iac_e +
      WorkingSet->nVar) - 1;
    proc_control_node_B.b_ia_c = proc_control_node_B.iac_e;
    while (proc_control_node_B.b_ia_c <= proc_control_node_B.idx_Aineq) {
      proc_control_node_B.oldDirIdx += WorkingSet->
        Aeq.data[proc_control_node_B.b_ia_c - 1] * TrialState->
        searchDir.data[proc_control_node_B.idx_Partition];
      proc_control_node_B.idx_Partition++;
      proc_control_node_B.b_ia_c++;
    }

    WorkingSet->beq[proc_control_node_B.iy_d] += proc_control_node_B.oldDirIdx;
    proc_control_node_B.iy_d++;
    proc_control_node_B.iac_e += proc_control_node_B.idx_Aineq_tmp;
  }

  for (proc_control_node_B.idx_Aineq = 0; proc_control_node_B.idx_Aineq < 130;
       proc_control_node_B.idx_Aineq++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + proc_control_node_B.idx_Aineq]
      = WorkingSet->beq[proc_control_node_B.idx_Aineq];
  }

  if (WorkingSet->sizes[2] > 0) {
    proc_control_node_B.idx_Aineq = 0;
    while (proc_control_node_B.idx_Aineq <= WorkingSet->sizes[2] - 1) {
      WorkingSet->bineq.data[proc_control_node_B.idx_Aineq] =
        -TrialState->cIneq.data[proc_control_node_B.idx_Aineq];
      proc_control_node_B.idx_Aineq++;
    }

    proc_control_node_B.idx_Aineq_tmp = WorkingSet->ldA;
    proc_control_node_B.iy_d = 0;
    proc_control_node_B.idx_upper = (WorkingSet->sizes[2] - 1) * WorkingSet->ldA
      + 1;
    proc_control_node_B.iac_e = 1;
    while (((proc_control_node_B.idx_Aineq_tmp > 0) &&
            (proc_control_node_B.iac_e <= proc_control_node_B.idx_upper)) ||
           ((proc_control_node_B.idx_Aineq_tmp < 0) &&
            (proc_control_node_B.iac_e >= proc_control_node_B.idx_upper))) {
      proc_control_node_B.idx_Partition = 0;
      proc_control_node_B.oldDirIdx = 0.0;
      proc_control_node_B.idx_Aineq = (proc_control_node_B.iac_e +
        WorkingSet->nVar) - 1;
      proc_control_node_B.b_ia_c = proc_control_node_B.iac_e;
      while (proc_control_node_B.b_ia_c <= proc_control_node_B.idx_Aineq) {
        proc_control_node_B.oldDirIdx += WorkingSet->
          Aineq.data[proc_control_node_B.b_ia_c - 1] *
          TrialState->searchDir.data[proc_control_node_B.idx_Partition];
        proc_control_node_B.idx_Partition++;
        proc_control_node_B.b_ia_c++;
      }

      WorkingSet->bineq.data[proc_control_node_B.iy_d] +=
        proc_control_node_B.oldDirIdx;
      proc_control_node_B.iy_d++;
      proc_control_node_B.iac_e += proc_control_node_B.idx_Aineq_tmp;
    }

    proc_control_node_B.idx_Aineq = 1;
    proc_control_node_B.iy_d = WorkingSet->sizes[2] + 1;
    proc_control_node_B.idx_upper = (WorkingSet->sizes[2] + WorkingSet->sizes[3])
      + 1;
    proc_control_node_B.iac_e = WorkingSet->isActiveIdx[2] - 1;
    while (proc_control_node_B.iac_e + 1 <= WorkingSet->nActiveConstr) {
      switch (WorkingSet->Wid.data[proc_control_node_B.iac_e]) {
       case 3:
        proc_control_node_B.idx_Partition = proc_control_node_B.idx_Aineq;
        proc_control_node_B.idx_Aineq++;
        WorkingSet->bwset.data[proc_control_node_B.iac_e] =
          WorkingSet->bineq.data[WorkingSet->
          Wlocalidx.data[proc_control_node_B.iac_e] - 1];
        break;

       case 4:
        proc_control_node_B.idx_Partition = proc_control_node_B.iy_d;
        proc_control_node_B.iy_d++;
        break;

       default:
        proc_control_node_B.idx_Partition = proc_control_node_B.idx_upper;
        proc_control_node_B.idx_upper++;
        break;
      }

      TrialState->workingset_old.data[proc_control_node_B.idx_Partition - 1] =
        WorkingSet->Wlocalidx.data[proc_control_node_B.iac_e];
      proc_control_node_B.iac_e++;
    }
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_g) {
    TrialState->xstar.data[proc_control_node_B.idx_Aineq] = TrialState->
      xstarsqp[proc_control_node_B.idx_Aineq];
    proc_control_node_B.idx_Aineq++;
  }

  proc_control_node_B.qpoptions_b = *qpoptions;
  proc_control_node_B.qpoptions_a = *qpoptions;
  proc_control_node_driver_i(Hessian, grad_data, TrialState, memspace,
    WorkingSet, QRManager, CholManager, QPObjective,
    &proc_control_node_B.qpoptions_b, &proc_control_node_B.qpoptions_a);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_node_addAeqConstr(WorkingSet, WorkingSet->
      indexEqRemoved[WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  proc_control_node_B.idx_Aineq = 0;
  while (proc_control_node_B.idx_Aineq <= proc_control_node_B.nVar_g) {
    proc_control_node_B.oldDirIdx = TrialState->
      socDirection.data[proc_control_node_B.idx_Aineq];
    TrialState->socDirection.data[proc_control_node_B.idx_Aineq] =
      TrialState->xstar.data[proc_control_node_B.idx_Aineq] -
      TrialState->socDirection.data[proc_control_node_B.idx_Aineq];
    TrialState->xstar.data[proc_control_node_B.idx_Aineq] =
      proc_control_node_B.oldDirIdx;
    proc_control_node_B.idx_Aineq++;
  }

  success = (proc_control_node_xnrm2_m(proc_control_node_B.nVar_g + 1,
              TrialState->socDirection.data) <= proc_control_node_xnrm2_m
             (proc_control_node_B.nVar_g + 1, TrialState->xstar.data) * 2.0);
  proc_control_node_B.idx_Aineq = WorkingSet->sizes[2];
  proc_control_node_B.iy_d = WorkingSet->sizes[3];
  for (proc_control_node_B.nVar_g = 0; proc_control_node_B.nVar_g < 130;
       proc_control_node_B.nVar_g++) {
    WorkingSet->beq[proc_control_node_B.nVar_g] = -TrialState->
      cEq[proc_control_node_B.nVar_g];
  }

  for (proc_control_node_B.nVar_g = 0; proc_control_node_B.nVar_g < 130;
       proc_control_node_B.nVar_g++) {
    WorkingSet->bwset.data[WorkingSet->sizes[0] + proc_control_node_B.nVar_g] =
      WorkingSet->beq[proc_control_node_B.nVar_g];
  }

  if (WorkingSet->sizes[2] > 0) {
    proc_control_node_B.nVar_g = 0;
    while (proc_control_node_B.nVar_g <= proc_control_node_B.idx_Aineq - 1) {
      WorkingSet->bineq.data[proc_control_node_B.nVar_g] =
        -TrialState->cIneq.data[proc_control_node_B.nVar_g];
      proc_control_node_B.nVar_g++;
    }

    if (!success) {
      proc_contro_removeAllIneqConstr(WorkingSet);
      proc_control_node_B.nVar_g = 0;
      while (proc_control_node_B.nVar_g <= proc_control_node_B.nWIneq_old - 1) {
        proc_control_nod_addAineqConstr(WorkingSet,
          TrialState->workingset_old.data[proc_control_node_B.nVar_g]);
        proc_control_node_B.nVar_g++;
      }

      proc_control_node_B.nWIneq_old = 0;
      while (proc_control_node_B.nWIneq_old <= proc_control_node_B.nWLower_old -
             1) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 4,
          TrialState->workingset_old.data[proc_control_node_B.nWIneq_old +
          proc_control_node_B.idx_Aineq]);
        proc_control_node_B.nWIneq_old++;
      }

      proc_control_node_B.nWLower_old = 0;
      while (proc_control_node_B.nWLower_old <= proc_control_node_B.nWUpper_old
             - 1) {
        proc_addBoundToActiveSetMatrix_(WorkingSet, 5,
          TrialState->workingset_old.data[(proc_control_node_B.nWLower_old +
          proc_control_node_B.idx_Aineq) + proc_control_node_B.iy_d]);
        proc_control_node_B.nWLower_old++;
      }
    }
  }

  if (!success) {
    proc_control_node_B.nWUpper_old = 0;
    while (proc_control_node_B.nWUpper_old <= proc_control_node_B.mConstrMax_d)
    {
      TrialState->lambda.data[proc_control_node_B.nWUpper_old] =
        TrialState->lambdaStopTest.data[proc_control_node_B.nWUpper_old];
      proc_control_node_B.nWUpper_old++;
    }
  } else {
    proc_control_node_B.mConstrMax_d = memspace->workspace_double.size[0] *
      memspace->workspace_double.size[1];
    for (proc_control_node_B.idx_Aineq = 0; proc_control_node_B.idx_Aineq <
         proc_control_node_B.mConstrMax_d; proc_control_node_B.idx_Aineq++) {
    }

    proc_control_node_sortLambdaQP(TrialState->lambda.data,
      WorkingSet->nActiveConstr, WorkingSet->sizes, WorkingSet->isActiveIdx,
      WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
      memspace->workspace_double.data);
  }

  return success;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_normal(const real_T Hessian
  [24025], const real_T grad_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T *TrialState,
  sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *WorkingSet, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *QRManager,
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *CholManager, s_syceGAKWionoNWyVws9jI_proc__T *
  QPObjective, const s1TgE9KstXgkd2qJxO1bF4F_proc__T *qpoptions)
{
  boolean_T nonlinEqRemoved;
  proc_control_node_B.qpoptions_i = *qpoptions;
  proc_control_node_B.qpoptions_f = *qpoptions;
  proc_control_node_driver_i(Hessian, grad_data, TrialState, memspace,
    WorkingSet, QRManager, CholManager, QPObjective,
    &proc_control_node_B.qpoptions_i, &proc_control_node_B.qpoptions_f);
  if (TrialState->state > 0) {
    proc_control_node_B.penaltyParamTrial = MeritFunction->penaltyParam;
    proc_control_node_B.constrViolationEq = 0.0;
    for (proc_control_node_B.k_a = 0; proc_control_node_B.k_a < 130;
         proc_control_node_B.k_a++) {
      proc_control_node_B.constrViolationEq += fabs(TrialState->
        cEq[proc_control_node_B.k_a]);
    }

    proc_control_node_B.constrViolationIneq = 0.0;
    proc_control_node_B.k_a = 0;
    while (proc_control_node_B.k_a <= WorkingSet->sizes[2] - 1) {
      if (TrialState->cIneq.data[proc_control_node_B.k_a] > 0.0) {
        proc_control_node_B.constrViolationIneq += TrialState->
          cIneq.data[proc_control_node_B.k_a];
      }

      proc_control_node_B.k_a++;
    }

    proc_control_node_B.constrViolationEq +=
      proc_control_node_B.constrViolationIneq;
    proc_control_node_B.constrViolationIneq =
      MeritFunction->linearizedConstrViol;
    MeritFunction->linearizedConstrViol = 0.0;
    proc_control_node_B.constrViolationIneq +=
      proc_control_node_B.constrViolationEq;
    if ((proc_control_node_B.constrViolationIneq > 2.2204460492503131E-16) &&
        (TrialState->fstar > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        proc_control_node_B.penaltyParamTrial = 1.0;
      } else {
        proc_control_node_B.penaltyParamTrial = 1.5;
      }

      proc_control_node_B.penaltyParamTrial =
        proc_control_node_B.penaltyParamTrial * TrialState->fstar /
        proc_control_node_B.constrViolationIneq;
    }

    if (proc_control_node_B.penaltyParamTrial < MeritFunction->penaltyParam) {
      MeritFunction->phi = proc_control_node_B.penaltyParamTrial *
        proc_control_node_B.constrViolationEq + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) *
           proc_control_node_B.penaltyParamTrial + MeritFunction->initFval) -
          MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        if (proc_control_node_B.penaltyParamTrial > 1.0E-10) {
          MeritFunction->penaltyParam = proc_control_node_B.penaltyParamTrial;
        } else {
          MeritFunction->penaltyParam = 1.0E-10;
        }
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam *
          proc_control_node_B.constrViolationEq + TrialState->sqpFval;
      }
    } else {
      if (!(proc_control_node_B.penaltyParamTrial > 1.0E-10)) {
        proc_control_node_B.penaltyParamTrial = 1.0E-10;
      }

      MeritFunction->penaltyParam = proc_control_node_B.penaltyParamTrial;
      MeritFunction->phi = proc_control_node_B.penaltyParamTrial *
        proc_control_node_B.constrViolationEq + TrialState->sqpFval;
    }

    proc_control_node_B.constrViolationEq = TrialState->fstar -
      MeritFunction->penaltyParam * proc_control_node_B.constrViolationEq;
    if (proc_control_node_B.constrViolationEq < 0.0) {
      MeritFunction->phiPrimePlus = proc_control_node_B.constrViolationEq;
    } else {
      MeritFunction->phiPrimePlus = 0.0;
    }
  }

  proc_control_node_B.k_a = memspace->workspace_double.size[0] *
    memspace->workspace_double.size[1];
  for (proc_control_node_B.i38 = 0; proc_control_node_B.i38 <
       proc_control_node_B.k_a; proc_control_node_B.i38++) {
  }

  proc_control_node_sortLambdaQP(TrialState->lambda.data,
    WorkingSet->nActiveConstr, WorkingSet->sizes, WorkingSet->isActiveIdx,
    WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
    memspace->workspace_double.data);
  nonlinEqRemoved = (WorkingSet->mEqRemoved > 0);
  while ((WorkingSet->mEqRemoved > 0) && (WorkingSet->indexEqRemoved
          [WorkingSet->mEqRemoved - 1] >= 1)) {
    proc_control_node_addAeqConstr(WorkingSet, WorkingSet->
      indexEqRemoved[WorkingSet->mEqRemoved - 1]);
    WorkingSet->mEqRemoved--;
  }

  if (nonlinEqRemoved) {
    for (proc_control_node_B.k_a = 0; proc_control_node_B.k_a < 130;
         proc_control_node_B.k_a++) {
      WorkingSet->Wlocalidx.data[WorkingSet->sizes[0] + proc_control_node_B.k_a]
        = proc_control_node_B.k_a + 1;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_relaxed(const real_T
  Hessian[24025], const real_T grad_data[], s_SfTiiT1KRClFcMCE02xJjB_proc_T
  *TrialState, sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction,
  s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T
  *WorkingSet, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *QRManager,
  s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *CholManager, s_syceGAKWionoNWyVws9jI_proc__T *
  QPObjective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *qpoptions)
{
  boolean_T b_tf;
  boolean_T tf;
  proc_control_node_B.nVarOrig = WorkingSet->nVar;
  proc_control_node_B.nVarMax = WorkingSet->nVarMax;
  proc_control_node_B.mIneq_d = WorkingSet->sizes[2];
  proc_control_node_B.beta = 0.0;
  proc_control_node_B.temp_jd = 0;
  while (proc_control_node_B.temp_jd <= proc_control_node_B.nVarOrig - 1) {
    proc_control_node_B.beta += Hessian[155 * proc_control_node_B.temp_jd +
      proc_control_node_B.temp_jd];
    proc_control_node_B.temp_jd++;
  }

  proc_control_node_B.beta /= static_cast<real_T>(WorkingSet->nVar);
  if (TrialState->sqpIterations <= 1) {
    proc_control_node_B.qpfvalLinearExcess = fabs
      (grad_data[proc_control_node_ixamax(QPObjective->nvar, grad_data) - 1]);
    if ((1.0 > proc_control_node_B.qpfvalLinearExcess) || rtIsNaN
        (proc_control_node_B.qpfvalLinearExcess)) {
      proc_control_node_B.qpfvalLinearExcess = 1.0;
    }

    proc_control_node_B.rho = 100.0 * proc_control_node_B.qpfvalLinearExcess;
  } else {
    proc_control_node_B.rho = fabs(TrialState->
      lambdasqp.data[proc_control_node_ixamax(WorkingSet->mConstr,
      TrialState->lambdasqp.data) - 1]);
  }

  QPObjective->hasLinear = true;
  QPObjective->nvar = WorkingSet->nVar;
  QPObjective->objtype = 4;
  QPObjective->beta = proc_control_node_B.beta;
  QPObjective->rho = proc_control_node_B.rho;
  proc_control_nod_setProblemType(WorkingSet, 2);
  proc_control_node_B.b_WorkingSet = *WorkingSet;
  proc_control_node_B.b_mIneq = WorkingSet->sizes[2] - 1;
  proc_control_node_B.mLBOrig = (WorkingSet->sizes[3] - WorkingSet->sizes[2]) -
    259;
  proc_control_node_B.temp_jd = 0;
  while (proc_control_node_B.temp_jd <= proc_control_node_B.b_mIneq) {
    memspace->workspace_double.data[proc_control_node_B.temp_jd] =
      WorkingSet->bineq.data[proc_control_node_B.temp_jd];
    proc_control_node_B.temp_jd++;
  }

  proc_control__xgemv_mtmcjbiadz2(proc_control_node_B.nVarOrig,
    WorkingSet->sizes[2], WorkingSet->Aineq.data, WorkingSet->ldA,
    TrialState->xstar.data, memspace->workspace_double.data);
  proc_control_node_B.temp_jd = 0;
  while (proc_control_node_B.temp_jd <= proc_control_node_B.b_mIneq) {
    TrialState->xstar.data[proc_control_node_B.nVarOrig +
      proc_control_node_B.temp_jd] = static_cast<real_T>
      (memspace->workspace_double.data[proc_control_node_B.temp_jd] > 0.0) *
      memspace->workspace_double.data[proc_control_node_B.temp_jd];
    proc_control_node_B.temp_jd++;
  }

  memcpy(&memspace->workspace_double.data[0], &WorkingSet->beq[0], 130U * sizeof
         (real_T));
  proc_control__xgemv_mtmcjbiadz2(proc_control_node_B.nVarOrig, 130,
    WorkingSet->Aeq.data, WorkingSet->ldA, TrialState->xstar.data,
    memspace->workspace_double.data);
  for (proc_control_node_B.temp_jd = 0; proc_control_node_B.temp_jd < 130;
       proc_control_node_B.temp_jd++) {
    proc_control_node_B.idx_positive = proc_control_node_B.b_mIneq +
      proc_control_node_B.temp_jd;
    if (memspace->workspace_double.data[proc_control_node_B.temp_jd] <= 0.0) {
      TrialState->xstar.data[(proc_control_node_B.nVarOrig +
        proc_control_node_B.idx_positive) + 1] = 0.0;
      TrialState->xstar.data[(proc_control_node_B.nVarOrig +
        proc_control_node_B.idx_positive) + 131] =
        -memspace->workspace_double.data[proc_control_node_B.temp_jd];
      proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
        (proc_control_node_B.mLBOrig + proc_control_node_B.idx_positive) + 1);
      if (memspace->workspace_double.data[proc_control_node_B.temp_jd] >= -0.02)
      {
        proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
          (proc_control_node_B.mLBOrig + proc_control_node_B.idx_positive) + 131);
      }
    } else {
      proc_control_node_B.idx_negative = proc_control_node_B.nVarOrig +
        proc_control_node_B.idx_positive;
      TrialState->xstar.data[proc_control_node_B.idx_negative + 1] =
        memspace->workspace_double.data[proc_control_node_B.temp_jd];
      TrialState->xstar.data[proc_control_node_B.idx_negative + 131] = 0.0;
      proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
        (proc_control_node_B.mLBOrig + proc_control_node_B.idx_positive) + 131);
      if (memspace->workspace_double.data[proc_control_node_B.temp_jd] <= 0.02)
      {
        proc_addBoundToActiveSetMatrix_(&proc_control_node_B.b_WorkingSet, 4,
          (proc_control_node_B.mLBOrig + proc_control_node_B.idx_positive) + 1);
      }
    }
  }

  proc_control_node_B.temp_jd = qpoptions->MaxIterations;
  qpoptions->MaxIterations = (qpoptions->MaxIterations +
    proc_control_node_B.b_WorkingSet.nVar) - proc_control_node_B.nVarOrig;
  proc_control_node_B.qpoptions = *qpoptions;
  proc_control_node_B.qpoptions_e = *qpoptions;
  proc_control_node_driver_i(Hessian, grad_data, TrialState, memspace,
    &proc_control_node_B.b_WorkingSet, QRManager, CholManager, QPObjective,
    &proc_control_node_B.qpoptions, &proc_control_node_B.qpoptions_e);
  qpoptions->MaxIterations = proc_control_node_B.temp_jd;
  proc_control_node_B.mLBOrig = proc_control_node_B.b_WorkingSet.sizes[2] - 1;
  proc_control_node_B.idx_positive = proc_control_node_B.b_WorkingSet.sizes[3] -
    261;
  proc_control_node_B.temp_jd = 0;
  for (proc_control_node_B.b_mIneq = 0; proc_control_node_B.b_mIneq < 130;
       proc_control_node_B.b_mIneq++) {
    proc_control_node_B.idx_negative =
      (proc_control_node_B.b_WorkingSet.isActiveIdx[3] +
       proc_control_node_B.idx_positive) + proc_control_node_B.b_mIneq;
    tf =
      proc_control_node_B.b_WorkingSet.isActiveConstr.data[proc_control_node_B.idx_negative];
    b_tf =
      proc_control_node_B.b_WorkingSet.isActiveConstr.data[proc_control_node_B.idx_negative
      + 130];
    memspace->workspace_int.data[proc_control_node_B.b_mIneq] = tf;
    memspace->workspace_int.data[proc_control_node_B.b_mIneq + 130] = b_tf;
    proc_control_node_B.temp_jd = (proc_control_node_B.temp_jd + tf) + b_tf;
  }

  proc_control_node_B.b_mIneq = 0;
  while (proc_control_node_B.b_mIneq <= proc_control_node_B.mLBOrig) {
    tf = proc_control_node_B.b_WorkingSet.isActiveConstr.data
      [(((proc_control_node_B.b_WorkingSet.isActiveIdx[3] +
          proc_control_node_B.idx_positive) - proc_control_node_B.mLBOrig) +
        proc_control_node_B.b_mIneq) - 1];
    memspace->workspace_int.data[proc_control_node_B.b_mIneq + 260] = tf;
    proc_control_node_B.temp_jd += tf;
    proc_control_node_B.b_mIneq++;
  }

  if (TrialState->state != -6) {
    proc_control_node_B.b_mIneq = (proc_control_node_B.b_WorkingSet.nVarMax -
      proc_control_node_B.nVarOrig) - 1;
    proc_control_node_B.qpfvalLinearExcess = 0.0;
    proc_control_node_B.qpfvalQuadExcess = 0.0;
    if (proc_control_node_B.b_mIneq >= 1) {
      proc_control_node_B.mLBOrig = proc_control_node_B.nVarOrig +
        proc_control_node_B.b_mIneq;
      proc_control_node_B.idx_positive = proc_control_node_B.nVarOrig;
      while (proc_control_node_B.idx_positive + 1 <= proc_control_node_B.mLBOrig)
      {
        proc_control_node_B.qpfvalLinearExcess += fabs(TrialState->
          xstar.data[proc_control_node_B.idx_positive]);
        proc_control_node_B.idx_positive++;
      }

      proc_control_node_B.mLBOrig = proc_control_node_B.nVarOrig;
      proc_control_node_B.idx_positive = proc_control_node_B.nVarOrig;
      proc_control_node_B.idx_negative = 0;
      while (proc_control_node_B.idx_negative <= proc_control_node_B.b_mIneq - 1)
      {
        proc_control_node_B.qpfvalQuadExcess += TrialState->
          xstar.data[proc_control_node_B.mLBOrig] * TrialState->
          xstar.data[proc_control_node_B.idx_positive];
        proc_control_node_B.mLBOrig++;
        proc_control_node_B.idx_positive++;
        proc_control_node_B.idx_negative++;
      }
    }

    proc_control_node_B.beta = (TrialState->fstar - proc_control_node_B.rho *
      proc_control_node_B.qpfvalLinearExcess) - proc_control_node_B.beta / 2.0 *
      proc_control_node_B.qpfvalQuadExcess;
    proc_control_node_B.b_mIneq = (proc_control_node_B.nVarMax -
      proc_control_node_B.nVarOrig) - 1;
    proc_control_node_B.rho = MeritFunction->penaltyParam;
    proc_control_node_B.qpfvalLinearExcess = 0.0;
    for (proc_control_node_B.nVarMax = 0; proc_control_node_B.nVarMax < 130;
         proc_control_node_B.nVarMax++) {
      proc_control_node_B.qpfvalLinearExcess += fabs(TrialState->
        cEq[proc_control_node_B.nVarMax]);
    }

    proc_control_node_B.qpfvalQuadExcess = 0.0;
    proc_control_node_B.nVarMax = 0;
    while (proc_control_node_B.nVarMax <= proc_control_node_B.mIneq_d - 1) {
      if (TrialState->cIneq.data[proc_control_node_B.nVarMax] > 0.0) {
        proc_control_node_B.qpfvalQuadExcess += TrialState->
          cIneq.data[proc_control_node_B.nVarMax];
      }

      proc_control_node_B.nVarMax++;
    }

    proc_control_node_B.qpfvalLinearExcess +=
      proc_control_node_B.qpfvalQuadExcess;
    proc_control_node_B.qpfvalQuadExcess = MeritFunction->linearizedConstrViol;
    proc_control_node_B.y_k = 0.0;
    if (proc_control_node_B.b_mIneq >= 1) {
      proc_control_node_B.mIneq_d = proc_control_node_B.nVarOrig +
        proc_control_node_B.b_mIneq;
      proc_control_node_B.nVarMax = proc_control_node_B.nVarOrig;
      while (proc_control_node_B.nVarMax + 1 <= proc_control_node_B.mIneq_d) {
        proc_control_node_B.y_k += fabs(TrialState->
          xstar.data[proc_control_node_B.nVarMax]);
        proc_control_node_B.nVarMax++;
      }
    }

    MeritFunction->linearizedConstrViol = proc_control_node_B.y_k;
    proc_control_node_B.qpfvalQuadExcess =
      (proc_control_node_B.qpfvalLinearExcess +
       proc_control_node_B.qpfvalQuadExcess) - proc_control_node_B.y_k;
    if ((proc_control_node_B.qpfvalQuadExcess > 2.2204460492503131E-16) &&
        (proc_control_node_B.beta > 0.0)) {
      if (TrialState->sqpFval == 0.0) {
        proc_control_node_B.rho = 1.0;
      } else {
        proc_control_node_B.rho = 1.5;
      }

      proc_control_node_B.rho = proc_control_node_B.rho *
        proc_control_node_B.beta / proc_control_node_B.qpfvalQuadExcess;
    }

    if (proc_control_node_B.rho < MeritFunction->penaltyParam) {
      MeritFunction->phi = proc_control_node_B.rho *
        proc_control_node_B.qpfvalLinearExcess + TrialState->sqpFval;
      if (((MeritFunction->initConstrViolationEq +
            MeritFunction->initConstrViolationIneq) * proc_control_node_B.rho +
           MeritFunction->initFval) - MeritFunction->phi > static_cast<real_T>
          (MeritFunction->nPenaltyDecreases) * MeritFunction->threshold) {
        MeritFunction->nPenaltyDecreases++;
        if ((MeritFunction->nPenaltyDecreases << 1) > TrialState->sqpIterations)
        {
          MeritFunction->threshold *= 10.0;
        }

        if (proc_control_node_B.rho > 1.0E-10) {
          MeritFunction->penaltyParam = proc_control_node_B.rho;
        } else {
          MeritFunction->penaltyParam = 1.0E-10;
        }
      } else {
        MeritFunction->phi = MeritFunction->penaltyParam *
          proc_control_node_B.qpfvalLinearExcess + TrialState->sqpFval;
      }
    } else {
      if (!(proc_control_node_B.rho > 1.0E-10)) {
        proc_control_node_B.rho = 1.0E-10;
      }

      MeritFunction->penaltyParam = proc_control_node_B.rho;
      MeritFunction->phi = proc_control_node_B.rho *
        proc_control_node_B.qpfvalLinearExcess + TrialState->sqpFval;
    }

    proc_control_node_B.beta -= MeritFunction->penaltyParam *
      proc_control_node_B.qpfvalLinearExcess;
    if (proc_control_node_B.beta < 0.0) {
      MeritFunction->phiPrimePlus = proc_control_node_B.beta;
    } else {
      MeritFunction->phiPrimePlus = 0.0;
    }

    proc_control_node_B.nVarMax = proc_control_node_B.b_WorkingSet.isActiveIdx[1]
      - 1;
    for (proc_control_node_B.mIneq_d = 0; proc_control_node_B.mIneq_d < 130;
         proc_control_node_B.mIneq_d++) {
      if (memspace->workspace_int.data[proc_control_node_B.mIneq_d] != 0) {
        if (memspace->workspace_int.data[proc_control_node_B.mIneq_d + 130] != 0)
        {
          tf = true;
        } else {
          tf = false;
        }
      } else {
        tf = false;
      }

      proc_control_node_B.b_mIneq = proc_control_node_B.nVarMax +
        proc_control_node_B.mIneq_d;
      TrialState->lambda.data[proc_control_node_B.b_mIneq] *= static_cast<real_T>
        (tf);
    }

    proc_control_node_B.mIneq_d = proc_control_node_B.b_WorkingSet.isActiveIdx[2]
      - 1;
    while (proc_control_node_B.mIneq_d + 1 <=
           proc_control_node_B.b_WorkingSet.nActiveConstr) {
      if (proc_control_node_B.b_WorkingSet.Wid.data[proc_control_node_B.mIneq_d]
          == 3) {
        TrialState->lambda.data[proc_control_node_B.mIneq_d] *=
          static_cast<real_T>(memspace->
                              workspace_int.data[proc_control_node_B.b_WorkingSet.Wlocalidx.data
                              [proc_control_node_B.mIneq_d] + 259]);
      }

      proc_control_node_B.mIneq_d++;
    }
  }

  *WorkingSet = proc_control_node_B.b_WorkingSet;
  proc_control_node_B.mIneq_d = (proc_control_node_B.b_WorkingSet.sizes[3] -
    proc_control_node_B.b_WorkingSet.sizes[2]) - 260;
  proc_control_node_B.nVarMax = proc_control_node_B.b_WorkingSet.nActiveConstr;
  while ((proc_control_node_B.nVarMax > proc_control_node_B.b_WorkingSet.sizes[0]
          + 130) && (proc_control_node_B.temp_jd > 0)) {
    if ((WorkingSet->Wid.data[proc_control_node_B.nVarMax - 1] == 4) &&
        (WorkingSet->Wlocalidx.data[proc_control_node_B.nVarMax - 1] >
         proc_control_node_B.mIneq_d)) {
      proc_control_node_B.beta = TrialState->lambda.data
        [WorkingSet->nActiveConstr - 1];
      TrialState->lambda.data[WorkingSet->nActiveConstr - 1] = 0.0;
      TrialState->lambda.data[proc_control_node_B.nVarMax - 1] =
        proc_control_node_B.beta;
      proc_control_node_removeConstr(WorkingSet, proc_control_node_B.nVarMax);
      proc_control_node_B.temp_jd--;
    }

    proc_control_node_B.nVarMax--;
  }

  QPObjective->hasLinear = true;
  QPObjective->nvar = proc_control_node_B.nVarOrig;
  QPObjective->objtype = 3;
  proc_control_nod_setProblemType(WorkingSet, 3);
  proc_control_node_B.nVarOrig = memspace->workspace_double.size[0] *
    memspace->workspace_double.size[1];
  for (proc_control_node_B.b_mIneq = 0; proc_control_node_B.b_mIneq <
       proc_control_node_B.nVarOrig; proc_control_node_B.b_mIneq++) {
  }

  proc_control_node_sortLambdaQP(TrialState->lambda.data,
    WorkingSet->nActiveConstr, WorkingSet->sizes, WorkingSet->isActiveIdx,
    WorkingSet->Wid.data, WorkingSet->Wlocalidx.data,
    memspace->workspace_double.data);
}

// Function for MATLAB Function: '<S216>/NLMPC'
boolean_T proc_control_nodeModelClass::proc_control_node_step_k(int32_T
  *STEP_TYPE, real_T Hessian[24025], const real_T lb[155],
  s_SfTiiT1KRClFcMCE02xJjB_proc_T *TrialState, sG8JZ69axY52WWR6RKyApQC_proc__T
  *MeritFunction, s_rz4qJMGW78cxvfZBKnU9SC_proc_T *memspace,
  s_YaC65yvYSxJoOs4cRNYgnE_proc_T *WorkingSet, s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T
  *QRManager, s_NgV9GZ7yjGpklMLIU8C2cB_proc_T *CholManager,
  s_syceGAKWionoNWyVws9jI_proc__T *QPObjective, s1TgE9KstXgkd2qJxO1bF4F_proc__T *
  qpoptions)
{
  int32_T exitg1;
  boolean_T checkBoundViolation;
  boolean_T guard1 = false;
  boolean_T stepSuccess;
  stepSuccess = true;
  checkBoundViolation = true;
  proc_control_node_B.nVar = WorkingSet->nVar - 1;
  if (*STEP_TYPE != 3) {
    proc_control_node_B.b_k_b = 0;
    while (proc_control_node_B.b_k_b <= proc_control_node_B.nVar) {
      TrialState->xstar.data[proc_control_node_B.b_k_b] = TrialState->
        xstarsqp[proc_control_node_B.b_k_b];
      proc_control_node_B.b_k_b++;
    }
  } else {
    proc_control_node_B.y_size_idx_0_b = TrialState->searchDir.size;
    proc_control_node_B.iH0 = TrialState->searchDir.size;
    if (0 <= proc_control_node_B.iH0 - 1) {
      memcpy(&proc_control_node_B.y_data_dy[0], &TrialState->searchDir.data[0],
             proc_control_node_B.iH0 * sizeof(real_T));
    }

    proc_control_node_B.b_k_b = 0;
    while (proc_control_node_B.b_k_b <= proc_control_node_B.nVar) {
      proc_control_node_B.y_data_dy[proc_control_node_B.b_k_b] =
        TrialState->xstar.data[proc_control_node_B.b_k_b];
      proc_control_node_B.b_k_b++;
    }

    if (0 <= proc_control_node_B.y_size_idx_0_b - 1) {
      memcpy(&TrialState->searchDir.data[0], &proc_control_node_B.y_data_dy[0],
             proc_control_node_B.y_size_idx_0_b * sizeof(real_T));
    }
  }

  do {
    exitg1 = 0;
    guard1 = false;
    switch (*STEP_TYPE) {
     case 1:
      proc_control_node_normal(Hessian, TrialState->grad.data, TrialState,
        MeritFunction, memspace, WorkingSet, QRManager, CholManager, QPObjective,
        qpoptions);
      if ((TrialState->state <= 0) && (TrialState->state != -6)) {
        *STEP_TYPE = 2;
      } else {
        proc_control_node_B.y_size_idx_0_b = TrialState->delta_x.size;
        proc_control_node_B.iH0 = TrialState->delta_x.size;
        if (0 <= proc_control_node_B.iH0 - 1) {
          memcpy(&proc_control_node_B.y_data_dy[0], &TrialState->delta_x.data[0],
                 proc_control_node_B.iH0 * sizeof(real_T));
        }

        proc_control_node_B.b_k_b = 0;
        while (proc_control_node_B.b_k_b <= proc_control_node_B.nVar) {
          proc_control_node_B.y_data_dy[proc_control_node_B.b_k_b] =
            TrialState->xstar.data[proc_control_node_B.b_k_b];
          proc_control_node_B.b_k_b++;
        }

        if (0 <= proc_control_node_B.y_size_idx_0_b - 1) {
          memcpy(&TrialState->delta_x.data[0], &proc_control_node_B.y_data_dy[0],
                 proc_control_node_B.y_size_idx_0_b * sizeof(real_T));
        }

        guard1 = true;
      }
      break;

     case 2:
      proc_contro_removeAllIneqConstr(WorkingSet);
      proc_control_node_B.b_k_b = 0;
      while (proc_control_node_B.b_k_b <= WorkingSet->sizes[3] - 1) {
        proc_control_node_B.nrmGradInf = WorkingSet->lb.data
          [WorkingSet->indexLB.data[proc_control_node_B.b_k_b] - 1];
        if (-TrialState->xstar.data[WorkingSet->
            indexLB.data[proc_control_node_B.b_k_b] - 1] >
            proc_control_node_B.nrmGradInf) {
          TrialState->xstar.data[WorkingSet->
            indexLB.data[proc_control_node_B.b_k_b] - 1] =
            -proc_control_node_B.nrmGradInf + fabs
            (proc_control_node_B.nrmGradInf);
        }

        proc_control_node_B.b_k_b++;
      }

      proc_control_node_relaxed(Hessian, TrialState->grad.data, TrialState,
        MeritFunction, memspace, WorkingSet, QRManager, CholManager, QPObjective,
        qpoptions);
      proc_control_node_B.y_size_idx_0_b = TrialState->delta_x.size;
      proc_control_node_B.iH0 = TrialState->delta_x.size;
      if (0 <= proc_control_node_B.iH0 - 1) {
        memcpy(&proc_control_node_B.y_data_dy[0], &TrialState->delta_x.data[0],
               proc_control_node_B.iH0 * sizeof(real_T));
      }

      proc_control_node_B.b_k_b = 0;
      while (proc_control_node_B.b_k_b <= proc_control_node_B.nVar) {
        proc_control_node_B.y_data_dy[proc_control_node_B.b_k_b] =
          TrialState->xstar.data[proc_control_node_B.b_k_b];
        proc_control_node_B.b_k_b++;
      }

      if (0 <= proc_control_node_B.y_size_idx_0_b - 1) {
        memcpy(&TrialState->delta_x.data[0], &proc_control_node_B.y_data_dy[0],
               proc_control_node_B.y_size_idx_0_b * sizeof(real_T));
      }

      guard1 = true;
      break;

     default:
      stepSuccess = proc_control_node_soc(Hessian, TrialState->grad.data,
        TrialState, memspace, WorkingSet, QRManager, CholManager, QPObjective,
        qpoptions);
      checkBoundViolation = stepSuccess;
      if (stepSuccess && (TrialState->state != -6)) {
        proc_control_node_B.b_k_b = 0;
        while (proc_control_node_B.b_k_b <= proc_control_node_B.nVar) {
          TrialState->delta_x.data[proc_control_node_B.b_k_b] =
            TrialState->xstar.data[proc_control_node_B.b_k_b] +
            TrialState->socDirection.data[proc_control_node_B.b_k_b];
          proc_control_node_B.b_k_b++;
        }
      }

      guard1 = true;
      break;
    }

    if (guard1) {
      if (TrialState->state != -6) {
        exitg1 = 1;
      } else {
        proc_control_node_B.nrmGradInf = 0.0;
        proc_control_node_B.nrmDirInf = 1.0;
        for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b < 155;
             proc_control_node_B.b_k_b++) {
          proc_control_node_B.u1 = fabs(TrialState->
            grad.data[proc_control_node_B.b_k_b]);
          if ((!(proc_control_node_B.nrmGradInf > proc_control_node_B.u1)) &&
              (!rtIsNaN(proc_control_node_B.u1))) {
            proc_control_node_B.nrmGradInf = proc_control_node_B.u1;
          }

          proc_control_node_B.u1 = fabs(TrialState->
            xstar.data[proc_control_node_B.b_k_b]);
          if ((!(proc_control_node_B.nrmDirInf > proc_control_node_B.u1)) &&
              (!rtIsNaN(proc_control_node_B.u1))) {
            proc_control_node_B.nrmDirInf = proc_control_node_B.u1;
          }
        }

        proc_control_node_B.nrmGradInf /= proc_control_node_B.nrmDirInf;
        if ((2.2204460492503131E-16 > proc_control_node_B.nrmGradInf) || rtIsNaN
            (proc_control_node_B.nrmGradInf)) {
          proc_control_node_B.nrmGradInf = 2.2204460492503131E-16;
        }

        for (proc_control_node_B.b_k_b = 0; proc_control_node_B.b_k_b < 155;
             proc_control_node_B.b_k_b++) {
          proc_control_node_B.iH0 = 155 * proc_control_node_B.b_k_b;
          proc_control_node_B.y_size_idx_0_b = 0;
          while (proc_control_node_B.y_size_idx_0_b <= proc_control_node_B.b_k_b
                 - 1) {
            Hessian[proc_control_node_B.iH0 + proc_control_node_B.y_size_idx_0_b]
              = 0.0;
            proc_control_node_B.y_size_idx_0_b++;
          }

          Hessian[proc_control_node_B.b_k_b + 155 * proc_control_node_B.b_k_b] =
            proc_control_node_B.nrmGradInf;
          proc_control_node_B.iH0 += proc_control_node_B.b_k_b;
          proc_control_node_B.y_size_idx_0_b = 0;
          while (proc_control_node_B.y_size_idx_0_b <= 153 -
                 proc_control_node_B.b_k_b) {
            Hessian[(proc_control_node_B.iH0 +
                     proc_control_node_B.y_size_idx_0_b) + 1] = 0.0;
            proc_control_node_B.y_size_idx_0_b++;
          }
        }
      }
    }
  } while (exitg1 == 0);

  if (checkBoundViolation) {
    proc_control_node_B.nVar = 0;
    while (proc_control_node_B.nVar <= WorkingSet->sizes[3] - 1) {
      proc_control_node_B.nrmDirInf = TrialState->delta_x.data
        [WorkingSet->indexLB.data[proc_control_node_B.nVar] - 1];
      proc_control_node_B.nrmGradInf = (TrialState->xstarsqp
        [WorkingSet->indexLB.data[proc_control_node_B.nVar] - 1] +
        proc_control_node_B.nrmDirInf) - lb[WorkingSet->
        indexLB.data[proc_control_node_B.nVar] - 1];
      if (proc_control_node_B.nrmGradInf < 0.0) {
        TrialState->delta_x.data[WorkingSet->
          indexLB.data[proc_control_node_B.nVar] - 1] =
          proc_control_node_B.nrmDirInf - proc_control_node_B.nrmGradInf;
        TrialState->xstar.data[WorkingSet->indexLB.data[proc_control_node_B.nVar]
          - 1] -= proc_control_node_B.nrmGradInf;
      }

      proc_control_node_B.nVar++;
    }
  }

  return stepSuccess;
}

// Function for MATLAB Function: '<S216>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_node_anon_d0(const real_T
  runtimedata_x[13], const real_T runtimedata_lastMV[8], const real_T
  runtimedata_ref[130], const real_T runtimedata_OutputWeights[130], const
  real_T runtimedata_MVWeights[80], const real_T runtimedata_MVRateWeights[80],
  const real_T runtimedata_MVScaledTarget[80], const real_T z[155])
{
  real_T varargout_1;
  proc_control_node_znlmpc_getXUe(z, runtimedata_x, proc_control_node_B.X_i,
    proc_control_node_B.U_f, &proc_control_node_B.e_j);
  proc_control_node_B.fs = 0.0;
  for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 11;
       proc_control_node_B.i_d++) {
    for (proc_control_node_B.i_jw = 0; proc_control_node_B.i_jw < 13;
         proc_control_node_B.i_jw++) {
      proc_control_node_B.b_X_o[proc_control_node_B.i_jw + 13 *
        proc_control_node_B.i_d] = proc_control_node_B.X_i[11 *
        proc_control_node_B.i_jw + proc_control_node_B.i_d];
    }

    for (proc_control_node_B.i_jw = 0; proc_control_node_B.i_jw < 8;
         proc_control_node_B.i_jw++) {
      proc_control_node_B.b_U_a[proc_control_node_B.i_jw +
        (proc_control_node_B.i_d << 3)] = proc_control_node_B.U_f[11 *
        proc_control_node_B.i_jw + proc_control_node_B.i_d];
    }
  }

  for (proc_control_node_B.i_jw = 0; proc_control_node_B.i_jw < 10;
       proc_control_node_B.i_jw++) {
    proc_control_node_B.wtYerr = 0.0;
    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 13;
         proc_control_node_B.i_d++) {
      proc_control_node_B.wtYerr_tmp = 10 * proc_control_node_B.i_d +
        proc_control_node_B.i_jw;
      proc_control_node_B.wtYerr_i = (proc_control_node_B.b_X_o
        [(proc_control_node_B.i_jw + 1) * 13 + proc_control_node_B.i_d] -
        runtimedata_ref[proc_control_node_B.wtYerr_tmp]) *
        runtimedata_OutputWeights[proc_control_node_B.wtYerr_tmp];
      proc_control_node_B.wtYerr += proc_control_node_B.wtYerr_i *
        proc_control_node_B.wtYerr_i;
    }

    proc_control_node_B.fs += proc_control_node_B.wtYerr;
    memcpy(&proc_control_node_B.umvk[0],
           &proc_control_node_B.b_U_a[proc_control_node_B.i_jw << 3], sizeof
           (real_T) << 3U);
    if (proc_control_node_B.i_jw + 1 == 1) {
      for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 8;
           proc_control_node_B.i_d++) {
        proc_control_node_B.duk[proc_control_node_B.i_d] =
          proc_control_node_B.umvk[proc_control_node_B.i_d] -
          runtimedata_lastMV[proc_control_node_B.i_d];
      }
    } else {
      for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 8;
           proc_control_node_B.i_d++) {
        proc_control_node_B.duk[proc_control_node_B.i_d] =
          proc_control_node_B.umvk[proc_control_node_B.i_d] -
          proc_control_node_B.b_U_a[((proc_control_node_B.i_jw - 1) << 3) +
          proc_control_node_B.i_d];
      }
    }

    proc_control_node_B.wtYerr = 0.0;
    proc_control_node_B.wtYerr_i = 0.0;
    for (proc_control_node_B.i_d = 0; proc_control_node_B.i_d < 8;
         proc_control_node_B.i_d++) {
      proc_control_node_B.wtYerr_tmp = 10 * proc_control_node_B.i_d +
        proc_control_node_B.i_jw;
      proc_control_node_B.umvk_m =
        (proc_control_node_B.umvk[proc_control_node_B.i_d] -
         runtimedata_MVScaledTarget[proc_control_node_B.wtYerr_tmp]) *
        runtimedata_MVWeights[proc_control_node_B.wtYerr_tmp];
      proc_control_node_B.duk_f =
        runtimedata_MVRateWeights[proc_control_node_B.wtYerr_tmp] *
        proc_control_node_B.duk[proc_control_node_B.i_d];
      proc_control_node_B.wtYerr += proc_control_node_B.umvk_m *
        proc_control_node_B.umvk_m;
      proc_control_node_B.wtYerr_i += proc_control_node_B.duk_f *
        proc_control_node_B.duk_f;
      proc_control_node_B.umvk[proc_control_node_B.i_d] =
        proc_control_node_B.umvk_m;
      proc_control_node_B.duk[proc_control_node_B.i_d] =
        proc_control_node_B.duk_f;
    }

    proc_control_node_B.fs = (proc_control_node_B.fs +
      proc_control_node_B.wtYerr) + proc_control_node_B.wtYerr_i;
  }

  varargout_1 = 100000.0 * proc_control_node_B.e_j * proc_control_node_B.e_j +
    proc_control_node_B.fs;
  return varargout_1;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control__computeObjective_(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T x[155], real_T *fval,
  int32_T *status)
{
  *fval = proc_control_node_anon_d0(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x);
  *status = 1;
  if (rtIsInf(*fval) || rtIsNaN(*fval)) {
    if (rtIsNaN(*fval)) {
      *status = -3;
    } else if (*fval < 0.0) {
      *status = -1;
    } else {
      *status = -2;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_stateEvolution_g(const real_T
  X[143], const real_T U[88], real_T c[130])
{
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  memset(&c[0], 0, 130U * sizeof(real_T));
  for (i_0 = 0; i_0 < 13; i_0++) {
    proc_control_node_B.ic_j[i_0] = static_cast<real_T>(i_0) + 1.0;
  }

  for (i_0 = 0; i_0 < 11; i_0++) {
    for (i_1 = 0; i_1 < 8; i_1++) {
      proc_control_node_B.b_U_n[i_1 + (i_0 << 3)] = U[11 * i_1 + i_0];
    }

    for (i_1 = 0; i_1 < 13; i_1++) {
      proc_control_node_B.b_X_c[i_1 + 13 * i_0] = X[11 * i_1 + i_0];
    }
  }

  for (i = 0; i < 10; i++) {
    i_0 = i << 3;
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X_c[13 * i],
      &proc_control_node_B.b_U_n[i_0], proc_control_node_B.dv22);
    i_1 = (i + 1) * 13;
    proc_control_node_AUVQuatSimFcn(&proc_control_node_B.b_X_c[i_1],
      &proc_control_node_B.b_U_n[i_0], proc_control_node_B.dv23);
    for (i_0 = 0; i_0 < 13; i_0++) {
      c[static_cast<int32_T>(proc_control_node_B.ic_j[i_0]) - 1] =
        (proc_control_node_B.b_X_c[13 * i + i_0] + (proc_control_node_B.dv22[i_0]
          + proc_control_node_B.dv23[i_0]) * 0.05) -
        proc_control_node_B.b_X_c[i_1 + i_0];
    }

    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.ic_j[i_0] += 13.0;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_nod_outputBounds_p(const real_T
  runtimedata_OutputMin[130], const real_T runtimedata_OutputMax[130], const
  real_T X[143], real_T e, real_T c_data[], int32_T c_size[2])
{
  int32_T b_size_idx_0;
  boolean_T exitg1;
  boolean_T y;
  for (proc_control_node_B.i_pe = 0; proc_control_node_B.i_pe < 130;
       proc_control_node_B.i_pe++) {
    proc_control_node_B.bv1[proc_control_node_B.i_pe] = rtIsInf
      (runtimedata_OutputMin[proc_control_node_B.i_pe]);
  }

  proc_control_node_all(proc_control_node_B.bv1, proc_control_node_B.x_f);
  y = true;
  proc_control_node_B.k_dg = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.k_dg < 13)) {
    if (!proc_control_node_B.x_f[proc_control_node_B.k_dg]) {
      y = false;
      exitg1 = true;
    } else {
      proc_control_node_B.k_dg++;
    }
  }

  if (y) {
    for (proc_control_node_B.i_pe = 0; proc_control_node_B.i_pe < 130;
         proc_control_node_B.i_pe++) {
      proc_control_node_B.bv1[proc_control_node_B.i_pe] = rtIsInf
        (runtimedata_OutputMax[proc_control_node_B.i_pe]);
    }

    proc_control_node_all(proc_control_node_B.bv1, proc_control_node_B.x_f);
    proc_control_node_B.k_dg = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.k_dg < 13)) {
      if (!proc_control_node_B.x_f[proc_control_node_B.k_dg]) {
        y = false;
        exitg1 = true;
      } else {
        proc_control_node_B.k_dg++;
      }
    }
  }

  if (y) {
    c_size[0] = 0;
    c_size[1] = 0;
  } else {
    for (proc_control_node_B.i_pe = 0; proc_control_node_B.i_pe < 260;
         proc_control_node_B.i_pe++) {
      proc_control_node_B.b_c_p[proc_control_node_B.i_pe] = 0.0;
      proc_control_node_B.icf_j[proc_control_node_B.i_pe] = true;
    }

    for (proc_control_node_B.i_pe = 0; proc_control_node_B.i_pe < 13;
         proc_control_node_B.i_pe++) {
      proc_control_node_B.ic_c[proc_control_node_B.i_pe] = static_cast<real_T>
        (proc_control_node_B.i_pe) + 1.0;
    }

    for (proc_control_node_B.k_dg = 0; proc_control_node_B.k_dg < 10;
         proc_control_node_B.k_dg++) {
      for (proc_control_node_B.i_pe = 0; proc_control_node_B.i_pe < 13;
           proc_control_node_B.i_pe++) {
        proc_control_node_B.runtimedata_OutputMin_p[proc_control_node_B.i_pe] =
          runtimedata_OutputMin[10 * proc_control_node_B.i_pe +
          proc_control_node_B.k_dg];
      }

      proc_control_node_isfinite_k(proc_control_node_B.runtimedata_OutputMin_p,
        proc_control_node_B.x_f);
      for (proc_control_node_B.i_pe = 0; proc_control_node_B.i_pe < 13;
           proc_control_node_B.i_pe++) {
        proc_control_node_B.icf_j[static_cast<int32_T>
          (proc_control_node_B.ic_c[proc_control_node_B.i_pe]) - 1] =
          proc_control_node_B.x_f[proc_control_node_B.i_pe];
        proc_control_node_B.runtimedata_OutputMin_p[proc_control_node_B.i_pe] =
          runtimedata_OutputMax[10 * proc_control_node_B.i_pe +
          proc_control_node_B.k_dg];
      }

      proc_control_node_isfinite_k(proc_control_node_B.runtimedata_OutputMin_p,
        proc_control_node_B.x_f);
      for (proc_control_node_B.i_pe = 0; proc_control_node_B.i_pe < 13;
           proc_control_node_B.i_pe++) {
        proc_control_node_B.ic_kg =
          proc_control_node_B.ic_c[proc_control_node_B.i_pe];
        proc_control_node_B.icf_j[static_cast<int32_T>(proc_control_node_B.ic_kg
          + 13.0) - 1] = proc_control_node_B.x_f[proc_control_node_B.i_pe];
        proc_control_node_B.ic_o[proc_control_node_B.i_pe] = static_cast<int32_T>
          (proc_control_node_B.ic_kg) - 1;
        proc_control_node_B.ic_o[proc_control_node_B.i_pe + 13] =
          static_cast<int32_T>(proc_control_node_B.ic_kg + 13.0) - 1;
      }

      for (proc_control_node_B.i_pe = 0; proc_control_node_B.i_pe < 26;
           proc_control_node_B.i_pe++) {
        proc_control_node_B.icf_c[proc_control_node_B.i_pe] =
          proc_control_node_B.icf_j[proc_control_node_B.ic_o[proc_control_node_B.i_pe]];
      }

      if (proc_control_node_any(proc_control_node_B.icf_c)) {
        for (proc_control_node_B.i_pe = 0; proc_control_node_B.i_pe < 13;
             proc_control_node_B.i_pe++) {
          proc_control_node_B.b_c_p[static_cast<int32_T>
            (proc_control_node_B.ic_c[proc_control_node_B.i_pe]) - 1] =
            (runtimedata_OutputMin[10 * proc_control_node_B.i_pe +
             proc_control_node_B.k_dg] - e) - X[(11 * proc_control_node_B.i_pe +
            proc_control_node_B.k_dg) + 1];
        }

        for (proc_control_node_B.i_pe = 0; proc_control_node_B.i_pe < 13;
             proc_control_node_B.i_pe++) {
          proc_control_node_B.b_c_p[static_cast<int32_T>
            (proc_control_node_B.ic_c[proc_control_node_B.i_pe] + 13.0) - 1] =
            (X[(11 * proc_control_node_B.i_pe + proc_control_node_B.k_dg) + 1] -
             runtimedata_OutputMax[10 * proc_control_node_B.i_pe +
             proc_control_node_B.k_dg]) - e;
        }
      }

      for (proc_control_node_B.i_pe = 0; proc_control_node_B.i_pe < 13;
           proc_control_node_B.i_pe++) {
        proc_control_node_B.ic_c[proc_control_node_B.i_pe] += 26.0;
      }
    }

    proc_control_node_B.k_dg = 0;
    for (proc_control_node_B.i_pe = 0; proc_control_node_B.i_pe < 260;
         proc_control_node_B.i_pe++) {
      if (proc_control_node_B.icf_j[proc_control_node_B.i_pe]) {
        proc_control_node_B.k_dg++;
      }
    }

    b_size_idx_0 = proc_control_node_B.k_dg;
    proc_control_node_B.k_dg = 0;
    for (proc_control_node_B.i_pe = 0; proc_control_node_B.i_pe < 260;
         proc_control_node_B.i_pe++) {
      if (proc_control_node_B.icf_j[proc_control_node_B.i_pe]) {
        proc_control_node_B.b_data_n[proc_control_node_B.k_dg] =
          static_cast<int16_T>(proc_control_node_B.i_pe + 1);
        proc_control_node_B.k_dg++;
      }
    }

    for (proc_control_node_B.i_pe = 0; proc_control_node_B.i_pe < b_size_idx_0;
         proc_control_node_B.i_pe++) {
      proc_control_node_B.b_c_data_e[proc_control_node_B.i_pe] =
        proc_control_node_B.b_c_p[proc_control_node_B.b_data_n[proc_control_node_B.i_pe]
        - 1];
    }

    c_size[0] = b_size_idx_0;
    c_size[1] = 1;
    if (0 <= b_size_idx_0 - 1) {
      memcpy(&c_data[0], &proc_control_node_B.b_c_data_e[0], b_size_idx_0 *
             sizeof(real_T));
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_anon_d0f(const real_T
  runtimedata_x[13], const real_T runtimedata_OutputMin[130], const real_T
  runtimedata_OutputMax[130], const real_T z[155], real_T varargout_1_data[],
  int32_T varargout_1_size[2], real_T varargout_2[130])
{
  proc_control_node_znlmpc_getXUe(z, runtimedata_x, proc_control_node_B.X_o,
    proc_control_node_B.U_m0, &proc_control_node_B.e_l);
  proc_control_n_stateEvolution_g(proc_control_node_B.X_o,
    proc_control_node_B.U_m0, varargout_2);
  proc_control_nod_outputBounds_p(runtimedata_OutputMin, runtimedata_OutputMax,
    proc_control_node_B.X_o, proc_control_node_B.e_l,
    proc_control_node_B.c_data_f, proc_control_node_B.c_size_o);
  proc_control_node_B.result_p = ((proc_control_node_B.c_size_o[0] != 0) &&
    (proc_control_node_B.c_size_o[1] != 0));
  if (proc_control_node_B.result_p == 0) {
    proc_control_node_B.result_idx_0_d = proc_control_node_B.c_size_o[0];
  } else if ((proc_control_node_B.c_size_o[0] != 0) &&
             (proc_control_node_B.c_size_o[1] != 0)) {
    proc_control_node_B.result_idx_0_d = proc_control_node_B.c_size_o[0];
  } else {
    proc_control_node_B.result_idx_0_d = 0;
  }

  varargout_1_size[0] = proc_control_node_B.result_idx_0_d;
  varargout_1_size[1] = proc_control_node_B.result_p;
  if ((0 <= proc_control_node_B.result_p - 1) && (0 <=
       proc_control_node_B.result_idx_0_d - 1)) {
    memcpy(&varargout_1_data[0], &proc_control_node_B.c_data_f[0],
           proc_control_node_B.result_idx_0_d * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
int32_T proc_control_nodeModelClass::proc_contro_computeConstraints_(const
  real_T obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[155],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130])
{
  int32_T status;
  proc_control_node_B.ineqEnd = (ineq0 + obj_mCineq) - 2;
  proc_control_node_anon_d0f(obj_nonlcon_workspace_runtimeda,
    obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1, x,
    proc_control_node_B.varargout_1_data_c,
    proc_control_node_B.varargout_1_size_n, proc_control_node_B.varargout_2_a);
  if (ineq0 > proc_control_node_B.ineqEnd + 1) {
    proc_control_node_B.c_jo = -1;
    proc_control_node_B.ineqEnd = -1;
  } else {
    proc_control_node_B.c_jo = ineq0 - 2;
  }

  proc_control_node_B.unnamed_idx_1 = proc_control_node_B.ineqEnd -
    proc_control_node_B.c_jo;
  for (proc_control_node_B.ineqEnd = 0; proc_control_node_B.ineqEnd <
       proc_control_node_B.unnamed_idx_1; proc_control_node_B.ineqEnd++) {
    Cineq_workspace_data[(proc_control_node_B.c_jo + proc_control_node_B.ineqEnd)
      + 1] = proc_control_node_B.varargout_1_data_c[proc_control_node_B.ineqEnd];
  }

  memcpy(&Ceq_workspace[0], &proc_control_node_B.varargout_2_a[0], 130U * sizeof
         (real_T));
  status = proc_contr_checkVectorNonFinite(obj_mCineq, Cineq_workspace_data,
    ineq0);
  if (status == 1) {
    status = proc_con_checkVectorNonFinite_g(Ceq_workspace);
  }

  return status;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_n_evalObjAndConstr(const real_T
  obj_objfun_workspace_runtimedat[13], const real_T
  obj_objfun_workspace_runtimed_0[8], const real_T
  obj_objfun_workspace_runtimed_1[130], const real_T
  obj_objfun_workspace_runtimed_2[130], const real_T
  obj_objfun_workspace_runtimed_3[80], const real_T
  obj_objfun_workspace_runtimed_4[80], const real_T
  obj_objfun_workspace_runtimed_5[80], const real_T
  obj_nonlcon_workspace_runtimeda[13], const real_T
  obj_nonlcon_workspace_runtime_0[130], const real_T
  obj_nonlcon_workspace_runtime_1[130], int32_T obj_mCineq, const real_T x[155],
  real_T Cineq_workspace_data[], int32_T ineq0, real_T Ceq_workspace[130],
  real_T *fval, int32_T *status)
{
  proc_control__computeObjective_(obj_objfun_workspace_runtimedat,
    obj_objfun_workspace_runtimed_0, obj_objfun_workspace_runtimed_1,
    obj_objfun_workspace_runtimed_2, obj_objfun_workspace_runtimed_3,
    obj_objfun_workspace_runtimed_4, obj_objfun_workspace_runtimed_5, x, fval,
    status);
  if (*status == 1) {
    *status = proc_contro_computeConstraints_(obj_nonlcon_workspace_runtimeda,
      obj_nonlcon_workspace_runtime_0, obj_nonlcon_workspace_runtime_1,
      obj_mCineq, x, Cineq_workspace_data, ineq0, Ceq_workspace);
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_con_computeLinearResiduals(const real_T
  x[155], int32_T nVar, real_T workspaceIneq_data[], const int32_T
  *workspaceIneq_size, int32_T mLinIneq, const real_T AineqT_data[], const
  real_T bineq_data[], int32_T ldAi)
{
  int32_T b;
  int32_T ia;
  int32_T ix;
  int32_T loop_ub;
  int32_T y_size_idx_0;
  if (mLinIneq > 0) {
    if (0 <= *workspaceIneq_size - 1) {
      memcpy(&proc_control_node_B.y_data_n[0], &workspaceIneq_data[0],
             *workspaceIneq_size * sizeof(real_T));
    }

    proc_control_node_B.k_o = 0;
    while (proc_control_node_B.k_o <= mLinIneq - 1) {
      proc_control_node_B.y_data_n[proc_control_node_B.k_o] =
        bineq_data[proc_control_node_B.k_o];
      proc_control_node_B.k_o++;
    }

    if (0 <= *workspaceIneq_size - 1) {
      memcpy(&workspaceIneq_data[0], &proc_control_node_B.y_data_n[0],
             *workspaceIneq_size * sizeof(real_T));
    }

    proc_control_node_B.k_o = 0;
    while (proc_control_node_B.k_o <= mLinIneq - 1) {
      workspaceIneq_data[proc_control_node_B.k_o] =
        -workspaceIneq_data[proc_control_node_B.k_o];
      proc_control_node_B.k_o++;
    }

    proc_control_node_B.k_o = 0;
    loop_ub = (mLinIneq - 1) * ldAi + 1;
    y_size_idx_0 = 1;
    while (((ldAi > 0) && (y_size_idx_0 <= loop_ub)) || ((ldAi < 0) &&
            (y_size_idx_0 >= loop_ub))) {
      ix = 0;
      proc_control_node_B.c_iu = 0.0;
      b = (y_size_idx_0 + nVar) - 1;
      for (ia = y_size_idx_0; ia <= b; ia++) {
        proc_control_node_B.c_iu += AineqT_data[ia - 1] * x[ix];
        ix++;
      }

      workspaceIneq_data[proc_control_node_B.k_o] += proc_control_node_B.c_iu;
      proc_control_node_B.k_o++;
      y_size_idx_0 += ldAi;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
real_T proc_control_nodeModelClass::proc_control_no_computeMeritFcn(real_T
  obj_penaltyParam, real_T fval, const real_T Cineq_workspace_data[], int32_T
  mIneq, const real_T Ceq_workspace[130], boolean_T evalWellDefined)
{
  real_T constrViolationEq;
  real_T constrViolationIneq;
  real_T val;
  int32_T k;
  if (evalWellDefined) {
    constrViolationEq = 0.0;
    for (k = 0; k < 130; k++) {
      constrViolationEq += fabs(Ceq_workspace[k]);
    }

    constrViolationIneq = 0.0;
    for (k = 0; k < mIneq; k++) {
      if (Cineq_workspace_data[k] > 0.0) {
        constrViolationIneq += Cineq_workspace_data[k];
      }
    }

    val = (constrViolationEq + constrViolationIneq) * obj_penaltyParam + fval;
  } else {
    val = (rtInf);
  }

  return val;
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_linesearch(boolean_T
  *evalWellDefined, const real_T bineq_data[], int32_T WorkingSet_nVar, int32_T
  WorkingSet_ldA, const real_T WorkingSet_Aineq_data[],
  s_SfTiiT1KRClFcMCE02xJjB_proc_T *TrialState, real_T MeritFunction_penaltyParam,
  real_T MeritFunction_phi, real_T MeritFunction_phiPrimePlus, real_T
  MeritFunction_phiFullStep, const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *FcnEvaluator_objfun_workspace_r, const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *FcnEvaluator_nonlcon_workspace_, int32_T FcnEvaluator_mCineq, boolean_T
  socTaken, real_T *alpha, int32_T *exitflag)
{
  int32_T exitg1;
  boolean_T exitg2;
  boolean_T tooSmallX;
  proc_control_node_B.mLinIneq = TrialState->mIneq - TrialState->mNonlinIneq;
  *alpha = 1.0;
  *exitflag = 1;
  proc_control_node_B.phi_alpha = MeritFunction_phiFullStep;
  proc_control_node_B.y_size_idx_0 = TrialState->searchDir.size;
  proc_control_node_B.loop_ub_l = TrialState->searchDir.size;
  if (0 <= proc_control_node_B.loop_ub_l - 1) {
    memcpy(&proc_control_node_B.y_data_bs[0], &TrialState->searchDir.data[0],
           proc_control_node_B.loop_ub_l * sizeof(real_T));
  }

  proc_control_node_B.loop_ub_l = 0;
  while (proc_control_node_B.loop_ub_l <= WorkingSet_nVar - 1) {
    proc_control_node_B.y_data_bs[proc_control_node_B.loop_ub_l] =
      TrialState->delta_x.data[proc_control_node_B.loop_ub_l];
    proc_control_node_B.loop_ub_l++;
  }

  if (0 <= proc_control_node_B.y_size_idx_0 - 1) {
    memcpy(&TrialState->searchDir.data[0], &proc_control_node_B.y_data_bs[0],
           proc_control_node_B.y_size_idx_0 * sizeof(real_T));
  }

  do {
    exitg1 = 0;
    if (TrialState->FunctionEvaluations < 15500) {
      if ((*evalWellDefined) && (proc_control_node_B.phi_alpha <= *alpha *
           0.0001 * MeritFunction_phiPrimePlus + MeritFunction_phi)) {
        exitg1 = 1;
      } else {
        *alpha *= 0.7;
        proc_control_node_B.loop_ub_l = 0;
        while (proc_control_node_B.loop_ub_l <= WorkingSet_nVar - 1) {
          TrialState->delta_x.data[proc_control_node_B.loop_ub_l] = *alpha *
            TrialState->xstar.data[proc_control_node_B.loop_ub_l];
          proc_control_node_B.loop_ub_l++;
        }

        if (socTaken) {
          proc_control_node_B.phi_alpha = *alpha * *alpha;
          if ((WorkingSet_nVar >= 1) && (!(proc_control_node_B.phi_alpha == 0.0)))
          {
            proc_control_node_B.loop_ub_l = 0;
            while (proc_control_node_B.loop_ub_l <= WorkingSet_nVar - 1) {
              TrialState->delta_x.data[proc_control_node_B.loop_ub_l] +=
                proc_control_node_B.phi_alpha * TrialState->
                socDirection.data[proc_control_node_B.loop_ub_l];
              proc_control_node_B.loop_ub_l++;
            }
          }
        }

        tooSmallX = true;
        proc_control_node_B.loop_ub_l = 0;
        exitg2 = false;
        while ((!exitg2) && (proc_control_node_B.loop_ub_l <= WorkingSet_nVar -
                             1)) {
          proc_control_node_B.phi_alpha = fabs(TrialState->
            xstarsqp[proc_control_node_B.loop_ub_l]);
          if ((1.0 > proc_control_node_B.phi_alpha) || rtIsNaN
              (proc_control_node_B.phi_alpha)) {
            proc_control_node_B.phi_alpha = 1.0;
          }

          if (0.1 * proc_control_node_B.phi_alpha <= fabs
              (TrialState->delta_x.data[proc_control_node_B.loop_ub_l])) {
            tooSmallX = false;
            exitg2 = true;
          } else {
            proc_control_node_B.loop_ub_l++;
          }
        }

        if (tooSmallX) {
          *exitflag = -2;
          exitg1 = 1;
        } else {
          proc_control_node_B.loop_ub_l = 0;
          while (proc_control_node_B.loop_ub_l <= WorkingSet_nVar - 1) {
            TrialState->xstarsqp[proc_control_node_B.loop_ub_l] =
              TrialState->xstarsqp_old[proc_control_node_B.loop_ub_l] +
              TrialState->delta_x.data[proc_control_node_B.loop_ub_l];
            proc_control_node_B.loop_ub_l++;
          }

          proc_control_n_evalObjAndConstr(FcnEvaluator_objfun_workspace_r->x,
            FcnEvaluator_objfun_workspace_r->lastMV,
            FcnEvaluator_objfun_workspace_r->ref,
            FcnEvaluator_objfun_workspace_r->OutputWeights,
            FcnEvaluator_objfun_workspace_r->MVWeights,
            FcnEvaluator_objfun_workspace_r->MVRateWeights,
            FcnEvaluator_objfun_workspace_r->MVScaledTarget,
            FcnEvaluator_nonlcon_workspace_->x,
            FcnEvaluator_nonlcon_workspace_->OutputMin,
            FcnEvaluator_nonlcon_workspace_->OutputMax, FcnEvaluator_mCineq,
            TrialState->xstarsqp, TrialState->cIneq.data, TrialState->iNonIneq0,
            TrialState->cEq, &proc_control_node_B.phi_alpha,
            &proc_control_node_B.loop_ub_l);
          TrialState->sqpFval = proc_control_node_B.phi_alpha;
          proc_con_computeLinearResiduals(TrialState->xstarsqp, WorkingSet_nVar,
            TrialState->cIneq.data, &TrialState->cIneq.size,
            proc_control_node_B.mLinIneq, WorkingSet_Aineq_data, bineq_data,
            WorkingSet_ldA);
          TrialState->FunctionEvaluations++;
          *evalWellDefined = (proc_control_node_B.loop_ub_l == 1);
          proc_control_node_B.phi_alpha = proc_control_no_computeMeritFcn
            (MeritFunction_penaltyParam, proc_control_node_B.phi_alpha,
             TrialState->cIneq.data, TrialState->mIneq, TrialState->cEq,
             *evalWellDefined);
        }
      }
    } else {
      *exitflag = 0;
      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_driver(const real_T
  bineq_data[], const real_T lb[155], s_SfTiiT1KRClFcMCE02xJjB_proc_T
  *TrialState, sG8JZ69axY52WWR6RKyApQC_proc__T *MeritFunction, const
  s_OFDCtz0SnDbKkoK04vkDPE_proc_T *FcnEvaluator, s_rz4qJMGW78cxvfZBKnU9SC_proc_T
  *memspace, s_YaC65yvYSxJoOs4cRNYgnE_proc_T *WorkingSet,
  s_bAoxcFEJ6lUEm9rRY9fnKH_proc_T *QRManager, s_NgV9GZ7yjGpklMLIU8C2cB_proc_T
  *CholManager, s_syceGAKWionoNWyVws9jI_proc__T *QPObjective, const int32_T
  *fscales_lineq_constraint_size, const int32_T *fscales_cineq_constraint_size,
  real_T Hessian[24025])
{
  boolean_T isFeasible;
  boolean_T o;
  static const int8_T u[24025] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const char_T t[7] = { 'f', 'm', 'i', 'n', 'c', 'o', 'n' };

  for (proc_control_node_B.mLambda = 0; proc_control_node_B.mLambda < 24025;
       proc_control_node_B.mLambda++) {
    Hessian[proc_control_node_B.mLambda] = u[proc_control_node_B.mLambda];
  }

  proc_control_node_B.nVar_tmp_tmp = WorkingSet->nVar;
  proc_control_node_B.mFixed = WorkingSet->sizes[0];
  proc_control_node_B.mIneq_o = WorkingSet->sizes[2];
  proc_control_node_B.mLB = WorkingSet->sizes[3];
  proc_control_node_B.mUB = WorkingSet->sizes[4];
  proc_control_node_B.mConstr_tmp = (((WorkingSet->sizes[0] + WorkingSet->sizes
    [2]) + WorkingSet->sizes[3]) + WorkingSet->sizes[4]) + 129;
  proc_control_node_B.mLinIneq_tmp_tmp = WorkingSet->sizes[2] -
    TrialState->mNonlinIneq;
  proc_control_node_B.mLambda = ((WorkingSet->sizes[2] + WorkingSet->sizes[3]) +
    WorkingSet->sizes[4]) + (WorkingSet->sizes[0] << 1);
  if (WorkingSet->nVar > proc_control_node_B.mLambda) {
    proc_control_node_B.mLambda = WorkingSet->nVar;
  }

  proc_control_node_B.qpoptions_MaxIterations = 10 * proc_control_node_B.mLambda;
  TrialState->steplength = 1.0;
  proc_control_node_B.Flags.fevalOK = true;
  proc_control_node_B.Flags.stepAccepted = false;
  proc_control_node_B.Flags.failedLineSearch = false;
  proc_control_node_B.Flags.stepType = 1;
  proc_control_node_B.ix_du = 0;
  while (proc_control_node_B.ix_du <= proc_control_node_B.mConstr_tmp) {
    TrialState->lambdaStopTest.data[proc_control_node_B.ix_du] =
      TrialState->lambdasqp.data[proc_control_node_B.ix_du];
    proc_control_node_B.ix_du++;
  }

  proc_control_nod_computeGradLag(TrialState->gradLag.data, WorkingSet->ldA,
    WorkingSet->nVar, TrialState->grad.data, WorkingSet->sizes[2],
    WorkingSet->Aineq.data, WorkingSet->Aeq.data, WorkingSet->indexFixed.data,
    WorkingSet->sizes[0], WorkingSet->indexLB.data, WorkingSet->sizes[3],
    WorkingSet->indexUB.data, WorkingSet->sizes[4],
    TrialState->lambdaStopTest.data);
  proc_control_node_B.optimRelativeFactor = fabs(TrialState->
    grad.data[proc_control_node_ixamax(WorkingSet->nVar, TrialState->grad.data)
    - 1]);
  if ((1.0 > proc_control_node_B.optimRelativeFactor) || rtIsNaN
      (proc_control_node_B.optimRelativeFactor)) {
    proc_control_node_B.optimRelativeFactor = 1.0;
  }

  if (rtIsInf(proc_control_node_B.optimRelativeFactor)) {
    proc_control_node_B.optimRelativeFactor = 1.0;
  }

  MeritFunction->nlpPrimalFeasError = proc_con_computePrimalFeasError
    (TrialState->xstarsqp, WorkingSet->sizes[2] - TrialState->mNonlinIneq,
     TrialState->mNonlinIneq, TrialState->cIneq.data, TrialState->cEq,
     WorkingSet->indexLB.data, WorkingSet->sizes[3], lb,
     WorkingSet->indexUB.data, WorkingSet->sizes[4]);
  if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
      (MeritFunction->nlpPrimalFeasError)) {
    MeritFunction->feasRelativeFactor = 1.0;
  } else {
    MeritFunction->feasRelativeFactor = MeritFunction->nlpPrimalFeasError;
  }

  if ((1.0 > MeritFunction->nlpPrimalFeasError) || rtIsNaN
      (MeritFunction->nlpPrimalFeasError)) {
    proc_control_node_B.p = 1.0;
  } else {
    proc_control_node_B.p = MeritFunction->nlpPrimalFeasError;
  }

  isFeasible = (MeritFunction->nlpPrimalFeasError <= 0.02 *
                proc_control_node_B.p);
  proc_contr_computeDualFeasError(WorkingSet->nVar, TrialState->gradLag.data, &o,
    &proc_control_node_B.p);
  proc_control_node_B.Flags.gradOK = o;
  MeritFunction->nlpDualFeasError = proc_control_node_B.p;
  if (!o) {
    proc_control_node_B.Flags.done = true;
    if (isFeasible) {
      TrialState->sqpExitFlag = 2;
    } else {
      TrialState->sqpExitFlag = -2;
    }
  } else {
    MeritFunction->nlpComplError = 0.0;
    if (proc_control_node_B.p > 0.0) {
      MeritFunction->firstOrderOpt = proc_control_node_B.p;
    } else {
      MeritFunction->firstOrderOpt = 0.0;
    }

    proc_control_node_B.ix_du = 0;
    while (proc_control_node_B.ix_du <= proc_control_node_B.mConstr_tmp) {
      TrialState->lambdaStopTestPrev.data[proc_control_node_B.ix_du] =
        TrialState->lambdaStopTest.data[proc_control_node_B.ix_du];
      proc_control_node_B.ix_du++;
    }

    if (isFeasible && (proc_control_node_B.p <= 0.02 *
                       proc_control_node_B.optimRelativeFactor)) {
      proc_control_node_B.Flags.done = true;
      TrialState->sqpExitFlag = 1;
    } else {
      proc_control_node_B.Flags.done = false;
      if (isFeasible && (TrialState->sqpFval < -1.0E+20)) {
        proc_control_node_B.Flags.done = true;
        TrialState->sqpExitFlag = -3;
      }
    }
  }

  proc_control_node_saveJacobian(TrialState, WorkingSet->nVar, WorkingSet->
    sizes[2], WorkingSet->Aineq.data, TrialState->iNonIneq0,
    WorkingSet->Aeq.data, WorkingSet->ldA);
  proc_control_node_saveState(TrialState);
  if (!proc_control_node_B.Flags.done) {
    TrialState->sqpIterations = 1;
  }

  while (!proc_control_node_B.Flags.done) {
    if ((!proc_control_node_B.Flags.stepAccepted) &&
        (!proc_control_node_B.Flags.failedLineSearch)) {
      proc_control_node_B.expl_temp_d.IterDisplayQP = false;
      proc_control_node_B.expl_temp_d.RemainFeasible = false;
      proc_control_node_B.expl_temp_d.ProbRelTolFactor = 1.0;
      proc_control_node_B.expl_temp_d.ConstrRelTolFactor = 1.0;
      proc_control_node_B.expl_temp_d.PricingTolerance = 0.0;
      proc_control_node_B.expl_temp_d.ObjectiveLimit = (rtMinusInf);
      proc_control_node_B.expl_temp_d.ConstraintTolerance = 0.02;
      proc_control_node_B.expl_temp_d.OptimalityTolerance =
        2.2204460492503131E-14;
      proc_control_node_B.expl_temp_d.StepTolerance = 1.0E-6;
      proc_control_node_B.expl_temp_d.MaxIterations =
        proc_control_node_B.qpoptions_MaxIterations;
      for (proc_control_node_B.mLambda = 0; proc_control_node_B.mLambda < 7;
           proc_control_node_B.mLambda++) {
        proc_control_node_B.expl_temp_d.SolverName[proc_control_node_B.mLambda] =
          t[proc_control_node_B.mLambda];
      }
    }

    while ((!proc_control_node_B.Flags.stepAccepted) &&
           (!proc_control_node_B.Flags.failedLineSearch)) {
      if (proc_control_node_B.Flags.stepType != 3) {
        proc_updateWorkingSetForNewQP_l(TrialState->xstarsqp, WorkingSet,
          proc_control_node_B.mIneq_o, TrialState->mNonlinIneq,
          TrialState->cIneq.data, TrialState->cEq, proc_control_node_B.mLB, lb,
          proc_control_node_B.mUB, proc_control_node_B.mFixed);
      }

      proc_control_node_B.mLambda = proc_control_node_B.Flags.stepType;
      proc_control_node_B.expl_temp_e = proc_control_node_B.expl_temp_d;
      isFeasible = proc_control_node_step_k(&proc_control_node_B.mLambda,
        Hessian, lb, TrialState, MeritFunction, memspace, WorkingSet, QRManager,
        CholManager, QPObjective, &proc_control_node_B.expl_temp_e);
      proc_control_node_B.Flags.stepAccepted = isFeasible;
      proc_control_node_B.Flags.stepType = proc_control_node_B.mLambda;
      if (isFeasible) {
        proc_control_node_B.ix_du = 0;
        while (proc_control_node_B.ix_du <= proc_control_node_B.nVar_tmp_tmp - 1)
        {
          TrialState->xstarsqp[proc_control_node_B.ix_du] +=
            TrialState->delta_x.data[proc_control_node_B.ix_du];
          proc_control_node_B.ix_du++;
        }

        proc_control_n_evalObjAndConstr
          (FcnEvaluator->objfun.workspace.runtimedata.x,
           FcnEvaluator->objfun.workspace.runtimedata.lastMV,
           FcnEvaluator->objfun.workspace.runtimedata.ref,
           FcnEvaluator->objfun.workspace.runtimedata.OutputWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVRateWeights,
           FcnEvaluator->objfun.workspace.runtimedata.MVScaledTarget,
           FcnEvaluator->nonlcon.workspace.runtimedata.x,
           FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
           FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
           FcnEvaluator->mCineq, TrialState->xstarsqp, TrialState->cIneq.data,
           TrialState->iNonIneq0, TrialState->cEq,
           &proc_control_node_B.optimRelativeFactor, &proc_control_node_B.ix_du);
        TrialState->sqpFval = proc_control_node_B.optimRelativeFactor;
        proc_control_node_B.Flags.fevalOK = (proc_control_node_B.ix_du == 1);
        TrialState->FunctionEvaluations++;
        proc_con_computeLinearResiduals(TrialState->xstarsqp,
          proc_control_node_B.nVar_tmp_tmp, TrialState->cIneq.data,
          &TrialState->cIneq.size, proc_control_node_B.mLinIneq_tmp_tmp,
          WorkingSet->Aineq.data, bineq_data, WorkingSet->ldA);
        MeritFunction->phiFullStep = proc_control_no_computeMeritFcn
          (MeritFunction->penaltyParam, proc_control_node_B.optimRelativeFactor,
           TrialState->cIneq.data, proc_control_node_B.mIneq_o, TrialState->cEq,
           proc_control_node_B.Flags.fevalOK);
      }

      if ((proc_control_node_B.mLambda == 1) && isFeasible &&
          proc_control_node_B.Flags.fevalOK && (MeritFunction->phi <
           MeritFunction->phiFullStep) && (TrialState->sqpFval <
           TrialState->sqpFval_old)) {
        proc_control_node_B.Flags.stepType = 3;
        proc_control_node_B.Flags.stepAccepted = false;
      } else {
        proc_control_node_linesearch(&proc_control_node_B.Flags.fevalOK,
          bineq_data, WorkingSet->nVar, WorkingSet->ldA, WorkingSet->Aineq.data,
          TrialState, MeritFunction->penaltyParam, MeritFunction->phi,
          MeritFunction->phiPrimePlus, MeritFunction->phiFullStep,
          &FcnEvaluator->objfun.workspace.runtimedata,
          &FcnEvaluator->nonlcon.workspace.runtimedata, FcnEvaluator->mCineq,
          (proc_control_node_B.mLambda == 3) && isFeasible,
          &proc_control_node_B.optimRelativeFactor, &proc_control_node_B.ix_du);
        TrialState->steplength = proc_control_node_B.optimRelativeFactor;
        if (proc_control_node_B.ix_du > 0) {
          proc_control_node_B.Flags.stepAccepted = true;
        } else {
          proc_control_node_B.Flags.failedLineSearch = true;
        }
      }
    }

    if (proc_control_node_B.Flags.stepAccepted &&
        (!proc_control_node_B.Flags.failedLineSearch)) {
      proc_control_node_B.ix_du = 0;
      while (proc_control_node_B.ix_du <= proc_control_node_B.nVar_tmp_tmp - 1)
      {
        TrialState->xstarsqp[proc_control_node_B.ix_du] =
          TrialState->xstarsqp_old[proc_control_node_B.ix_du] +
          TrialState->delta_x.data[proc_control_node_B.ix_du];
        proc_control_node_B.ix_du++;
      }

      proc_control_node_B.ix_du = 0;
      while (proc_control_node_B.ix_du <= proc_control_node_B.mConstr_tmp) {
        TrialState->lambdasqp.data[proc_control_node_B.ix_du] +=
          (TrialState->lambda.data[proc_control_node_B.ix_du] -
           TrialState->lambdasqp.data[proc_control_node_B.ix_du]) *
          TrialState->steplength;
        proc_control_node_B.ix_du++;
      }

      proc_control_node_saveState(TrialState);
      proc_control_node_B.Flags.gradOK = true;
      memcpy(&proc_control_node_B.TrialState_a[0], &TrialState->xstarsqp[0],
             155U * sizeof(real_T));
      evalObjAndConstrAndDerivatives
        (FcnEvaluator->objfun.workspace.runtimedata.x,
         FcnEvaluator->objfun.workspace.runtimedata.lastMV,
         FcnEvaluator->objfun.workspace.runtimedata.ref,
         FcnEvaluator->objfun.workspace.runtimedata.OutputWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVRateWeights,
         FcnEvaluator->objfun.workspace.runtimedata.MVScaledTarget,
         FcnEvaluator->nonlcon.workspace.runtimedata.x,
         FcnEvaluator->nonlcon.workspace.runtimedata.OutputMin,
         FcnEvaluator->nonlcon.workspace.runtimedata.OutputMax,
         FcnEvaluator->mCineq, proc_control_node_B.TrialState_a,
         TrialState->grad.data, TrialState->cIneq.data, TrialState->iNonIneq0,
         TrialState->cEq, WorkingSet->Aineq.data, TrialState->iNonIneq0,
         WorkingSet->ldA, WorkingSet->Aeq.data, WorkingSet->ldA,
         &TrialState->sqpFval, &proc_control_node_B.mLambda);
      TrialState->FunctionEvaluations++;
      proc_control_node_B.Flags.fevalOK = (proc_control_node_B.mLambda == 1);
    } else {
      TrialState->sqpFval = TrialState->sqpFval_old;
      memcpy(&TrialState->xstarsqp[0], &TrialState->xstarsqp_old[0], 155U *
             sizeof(real_T));
      proc_control_node_B.ix_du = TrialState->cIneq.size;
      proc_control_node_B.idxLambdaNonlinIneq = TrialState->cIneq.size;
      if (0 <= proc_control_node_B.idxLambdaNonlinIneq - 1) {
        memcpy(&proc_control_node_B.y_data_d[0], &TrialState->cIneq.data[0],
               proc_control_node_B.idxLambdaNonlinIneq * sizeof(real_T));
      }

      proc_control_node_B.mLambda = 0;
      while (proc_control_node_B.mLambda <= TrialState->mIneq - 1) {
        proc_control_node_B.y_data_d[proc_control_node_B.mLambda] =
          TrialState->cIneq_old.data[proc_control_node_B.mLambda];
        proc_control_node_B.mLambda++;
      }

      if (0 <= proc_control_node_B.ix_du - 1) {
        memcpy(&TrialState->cIneq.data[0], &proc_control_node_B.y_data_d[0],
               proc_control_node_B.ix_du * sizeof(real_T));
      }

      memcpy(&TrialState->cEq[0], &TrialState->cEq_old[0], 130U * sizeof(real_T));
    }

    proc_control_node_test_exit(&proc_control_node_B.Flags, memspace,
      MeritFunction, fscales_lineq_constraint_size,
      fscales_cineq_constraint_size, WorkingSet, TrialState, QRManager, lb);
    if ((!proc_control_node_B.Flags.done) &&
        proc_control_node_B.Flags.stepAccepted) {
      proc_control_node_B.Flags.stepAccepted = false;
      proc_control_node_B.Flags.stepType = 1;
      proc_control_node_B.Flags.failedLineSearch = false;
      proc_control_node_B.idxLambdaNonlinIneq = proc_control_node_B.mFixed +
        TrialState->iNonIneq0;
      proc_control_node_B.mLambda = WorkingSet->ldA;
      proc_control_node_B.ix_du = 0;
      while (proc_control_node_B.ix_du <= proc_control_node_B.nVar_tmp_tmp - 1)
      {
        TrialState->delta_gradLag.data[proc_control_node_B.ix_du] =
          TrialState->grad.data[proc_control_node_B.ix_du];
        proc_control_node_B.ix_du++;
      }

      if (proc_control_node_B.nVar_tmp_tmp >= 1) {
        proc_control_node_B.ix_du = 0;
        while (proc_control_node_B.ix_du <= proc_control_node_B.nVar_tmp_tmp - 1)
        {
          TrialState->delta_gradLag.data[proc_control_node_B.ix_du] +=
            -TrialState->grad_old.data[proc_control_node_B.ix_du];
          proc_control_node_B.ix_du++;
        }
      }

      proc_control_xgemv_mtmcjbiadz2i(proc_control_node_B.nVar_tmp_tmp, 130,
        WorkingSet->Aeq.data, 1, WorkingSet->ldA, TrialState->lambdasqp.data,
        proc_control_node_B.mFixed + 1, TrialState->delta_gradLag.data);
      proc_control_node_B.ix_du = proc_control_node_B.mFixed;
      proc_control_node_B.b_c_f = WorkingSet->ldA * 129 + 1;
      proc_control_node_B.b_iy = 1;
      while (((proc_control_node_B.mLambda > 0) && (proc_control_node_B.b_iy <=
               proc_control_node_B.b_c_f)) || ((proc_control_node_B.mLambda < 0)
              && (proc_control_node_B.b_iy >= proc_control_node_B.b_c_f))) {
        proc_control_node_B.iy = 0;
        proc_control_node_B.b_ia = (proc_control_node_B.b_iy +
          proc_control_node_B.nVar_tmp_tmp) - 1;
        proc_control_node_B.ia_l = proc_control_node_B.b_iy;
        while (proc_control_node_B.ia_l <= proc_control_node_B.b_ia) {
          TrialState->delta_gradLag.data[proc_control_node_B.iy] +=
            TrialState->JacCeqTrans_old.data[proc_control_node_B.ia_l - 1] *
            -TrialState->lambdasqp.data[proc_control_node_B.ix_du];
          proc_control_node_B.iy++;
          proc_control_node_B.ia_l++;
        }

        proc_control_node_B.ix_du++;
        proc_control_node_B.b_iy += proc_control_node_B.mLambda;
      }

      if (TrialState->mNonlinIneq > 0) {
        proc_control_xgemv_mtmcjbiadz2i(proc_control_node_B.nVar_tmp_tmp,
          TrialState->mNonlinIneq, WorkingSet->Aineq.data, WorkingSet->ldA *
          (TrialState->iNonIneq0 - 1) + 1, WorkingSet->ldA,
          TrialState->lambdasqp.data, proc_control_node_B.idxLambdaNonlinIneq +
          130, TrialState->delta_gradLag.data);
        proc_control_node_B.ix_du = (TrialState->mNonlinIneq - 1) *
          WorkingSet->ldA + 1;
        proc_control_node_B.b_c_f = 1;
        while (((proc_control_node_B.mLambda > 0) && (proc_control_node_B.b_c_f <=
                 proc_control_node_B.ix_du)) || ((proc_control_node_B.mLambda <
                 0) && (proc_control_node_B.b_c_f >= proc_control_node_B.ix_du)))
        {
          proc_control_node_B.b_iy = 0;
          proc_control_node_B.iy = (proc_control_node_B.b_c_f +
            proc_control_node_B.nVar_tmp_tmp) - 1;
          proc_control_node_B.b_ia = proc_control_node_B.b_c_f;
          while (proc_control_node_B.b_ia <= proc_control_node_B.iy) {
            TrialState->delta_gradLag.data[proc_control_node_B.b_iy] +=
              TrialState->JacCineqTrans_old.data[proc_control_node_B.b_ia - 1] *
              -TrialState->
              lambdasqp.data[proc_control_node_B.idxLambdaNonlinIneq + 129];
            proc_control_node_B.b_iy++;
            proc_control_node_B.b_ia++;
          }

          proc_control_node_B.idxLambdaNonlinIneq++;
          proc_control_node_B.b_c_f += proc_control_node_B.mLambda;
        }
      }

      proc_control_node_saveJacobian(TrialState,
        proc_control_node_B.nVar_tmp_tmp, proc_control_node_B.mIneq_o,
        WorkingSet->Aineq.data, TrialState->iNonIneq0, WorkingSet->Aeq.data,
        WorkingSet->ldA);
      proc_control_node_B.ix_du = memspace->workspace_double.size[0] *
        memspace->workspace_double.size[1];
      for (proc_control_node_B.mLambda = 0; proc_control_node_B.mLambda <
           proc_control_node_B.ix_du; proc_control_node_B.mLambda++) {
      }

      proc_control_node_BFGSUpdate(proc_control_node_B.nVar_tmp_tmp, Hessian,
        TrialState->delta_x.data, TrialState->delta_gradLag.data,
        memspace->workspace_double.data);
      TrialState->sqpIterations++;
    }
  }
}

// Function for MATLAB Function: '<S216>/NLMPC'
void proc_control_nodeModelClass::proc_control_node_fmincon(const
  s_qYIvDqP9yRqtt40IDZ89JG_proc_T *fun_workspace_runtimedata, const
  szeIbzRjxClbCFpzxneSihD_proc__T *fun_workspace_userdata, const real_T x0[155],
  const real_T Aineq_data[], const real_T bineq_data[], const int32_T
  *bineq_size, const real_T lb[155], const s_qYIvDqP9yRqtt40IDZ89JG_proc_T
  *nonlcon_workspace_runtimedata, const szeIbzRjxClbCFpzxneSihD_proc__T
  *nonlcon_workspace_userdata, real_T x[155], real_T *fval, real_T *exitflag,
  real_T *output_iterations, real_T *output_funcCount, char_T output_algorithm[3],
  real_T *output_constrviolation, real_T *output_stepsize, real_T
  *output_lssteplength, real_T *output_firstorderopt)
{
  proc_control_node_anon(nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, x0,
    proc_control_node_B.varargout_1_data, proc_control_node_B.varargout_1_size,
    proc_control_node_B.TrialState.cEq, proc_control_node_B.varargout_3_data,
    proc_control_node_B.varargout_3_size, proc_control_node_B.varargout_4);
  proc_control_node_B.mNonlinIneq = proc_control_node_B.varargout_1_size[0] *
    proc_control_node_B.varargout_1_size[1];
  proc_control_node_B.mIneq = *bineq_size + proc_control_node_B.mNonlinIneq;
  proc_control_node_B.mConstrMax = (proc_control_node_B.mIneq +
    proc_control_node_B.mIneq) + 701;
  if (proc_control_node_B.mIneq + 416 > proc_control_node_B.mConstrMax) {
    proc_control_node_B.maxDims = proc_control_node_B.mIneq + 416;
  } else {
    proc_control_node_B.maxDims = proc_control_node_B.mConstrMax;
  }

  proc_control_n_factoryConstruct(proc_control_node_B.mIneq + 416,
    proc_control_node_B.mConstrMax, proc_control_node_B.mIneq,
    proc_control_node_B.mNonlinIneq, &proc_control_node_B.TrialState);
  memcpy(&proc_control_node_B.TrialState.xstarsqp[0], &x0[0], 155U * sizeof
         (real_T));
  proc_control_node_B.FcnEvaluator.objfun.workspace.runtimedata =
    *fun_workspace_runtimedata;
  proc_control_node_B.FcnEvaluator.objfun.workspace.userdata =
    *fun_workspace_userdata;
  proc_control_node_B.FcnEvaluator.nonlcon.workspace.runtimedata =
    *nonlcon_workspace_runtimedata;
  proc_control_node_B.FcnEvaluator.nonlcon.workspace.userdata =
    *nonlcon_workspace_userdata;
  proc_control_node_B.FcnEvaluator.nVar = 155;
  proc_control_node_B.FcnEvaluator.mCineq = proc_control_node_B.mNonlinIneq;
  proc_control_node_B.FcnEvaluator.mCeq = 130;
  proc_control_node_B.FcnEvaluator.NonFiniteSupport = true;
  proc_control_node_B.FcnEvaluator.SpecifyObjectiveGradient = true;
  proc_control_node_B.FcnEvaluator.SpecifyConstraintGradient = true;
  proc_control_node_B.FcnEvaluator.ScaleProblem = false;
  proc_cont_factoryConstruct_lnz4(proc_control_node_B.mIneq + 416,
    &proc_control_node_B.QPObjective.grad.size,
    &proc_control_node_B.QPObjective.Hx.size,
    &proc_control_node_B.QPObjective.hasLinear,
    &proc_control_node_B.QPObjective.nvar,
    &proc_control_node_B.QPObjective.maxVar,
    &proc_control_node_B.QPObjective.beta, &proc_control_node_B.QPObjective.rho,
    &proc_control_node_B.QPObjective.objtype,
    &proc_control_node_B.QPObjective.prev_objtype,
    &proc_control_node_B.QPObjective.prev_nvar,
    &proc_control_node_B.QPObjective.prev_hasLinear,
    &proc_control_node_B.QPObjective.gammaScalar);
  proc_control_node_B.QPObjective.hasLinear = true;
  proc_control_node_B.QPObjective.nvar = 155;
  proc_control_node_B.QPObjective.objtype = 3;
  proc_control_node_B.memspace.workspace_double.size[0] =
    proc_control_node_B.maxDims;
  proc_control_node_B.memspace.workspace_double.size[1] =
    proc_control_node_B.mIneq + 416;
  proc_control_node_B.memspace.workspace_int.size = proc_control_node_B.maxDims;
  proc_control_node_B.memspace.workspace_sort.size = proc_control_node_B.maxDims;
  proc_con_factoryConstruct_lnz42(proc_control_node_B.mIneq,
    proc_control_node_B.mIneq + 416, proc_control_node_B.mConstrMax,
    &proc_control_node_B.WorkingSet);
  proc_control_node_B.k_p = 0;
  for (proc_control_node_B.c_idx = 0; proc_control_node_B.c_idx < 155;
       proc_control_node_B.c_idx++) {
    proc_control_node_B.lb = lb[proc_control_node_B.c_idx];
    if ((!rtIsInf(proc_control_node_B.lb)) && (!rtIsNaN(proc_control_node_B.lb)))
    {
      proc_control_node_B.k_p++;
      proc_control_node_B.WorkingSet.indexLB.data[proc_control_node_B.k_p - 1] =
        proc_control_node_B.c_idx + 1;
    }
  }

  proc_control_node_loadProblem(&proc_control_node_B.WorkingSet,
    proc_control_node_B.mIneq, *bineq_size, Aineq_data, proc_control_node_B.k_p,
    0, 0, proc_control_node_B.mConstrMax);
  proc_control_node_B.mConstrMax = 0;
  while (proc_control_node_B.mConstrMax <= proc_control_node_B.k_p - 1) {
    proc_control_node_B.lb =
      proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.WorkingSet.indexLB.data
      [proc_control_node_B.mConstrMax] - 1];
    proc_control_node_B.scale_n =
      lb[proc_control_node_B.WorkingSet.indexLB.data[proc_control_node_B.mConstrMax]
      - 1];
    if ((proc_control_node_B.lb > proc_control_node_B.scale_n) || rtIsNaN
        (proc_control_node_B.scale_n)) {
      proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.WorkingSet.indexLB.data
        [proc_control_node_B.mConstrMax] - 1] = proc_control_node_B.lb;
    } else {
      proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.WorkingSet.indexLB.data
        [proc_control_node_B.mConstrMax] - 1] = proc_control_node_B.scale_n;
    }

    proc_control_node_B.mConstrMax++;
  }

  evalObjAndConstrAndDerivatives(fun_workspace_runtimedata->x,
    fun_workspace_runtimedata->lastMV, fun_workspace_runtimedata->ref,
    fun_workspace_runtimedata->OutputWeights,
    fun_workspace_runtimedata->MVWeights,
    fun_workspace_runtimedata->MVRateWeights,
    fun_workspace_runtimedata->MVScaledTarget, nonlcon_workspace_runtimedata->x,
    nonlcon_workspace_runtimedata->OutputMin,
    nonlcon_workspace_runtimedata->OutputMax, proc_control_node_B.mNonlinIneq,
    proc_control_node_B.TrialState.xstarsqp,
    proc_control_node_B.TrialState.grad.data,
    proc_control_node_B.TrialState.cIneq.data,
    proc_control_node_B.TrialState.iNonIneq0, proc_control_node_B.TrialState.cEq,
    proc_control_node_B.WorkingSet.Aineq.data,
    proc_control_node_B.TrialState.iNonIneq0, proc_control_node_B.WorkingSet.ldA,
    proc_control_node_B.WorkingSet.Aeq.data, proc_control_node_B.WorkingSet.ldA,
    &proc_control_node_B.lb, &proc_control_node_B.mConstrMax);
  proc_control_node_B.TrialState.sqpFval = proc_control_node_B.lb;
  proc_control_node_B.TrialState.FunctionEvaluations = 1;
  proc_control_node_B.mConstrMax = proc_control_node_B.WorkingSet.ldA;
  if (*bineq_size > 0) {
    proc_control_node_B.b_y_size_idx_0 =
      proc_control_node_B.TrialState.cIneq.size;
    proc_control_node_B.loop_ub = proc_control_node_B.TrialState.cIneq.size;
    if (0 <= proc_control_node_B.loop_ub - 1) {
      memcpy(&proc_control_node_B.b_y_data[0],
             &proc_control_node_B.TrialState.cIneq.data[0],
             proc_control_node_B.loop_ub * sizeof(real_T));
    }

    proc_control_node_B.c_idx = 0;
    while (proc_control_node_B.c_idx <= *bineq_size - 1) {
      proc_control_node_B.b_y_data[proc_control_node_B.c_idx] =
        bineq_data[proc_control_node_B.c_idx];
      proc_control_node_B.c_idx++;
    }

    if (0 <= proc_control_node_B.b_y_size_idx_0 - 1) {
      memcpy(&proc_control_node_B.TrialState.cIneq.data[0],
             &proc_control_node_B.b_y_data[0],
             proc_control_node_B.b_y_size_idx_0 * sizeof(real_T));
    }

    proc_control_node_B.c_idx = 0;
    while (proc_control_node_B.c_idx <= *bineq_size - 1) {
      proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.c_idx] =
        -proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.c_idx];
      proc_control_node_B.c_idx++;
    }

    proc_control_node_B.c_idx = 0;
    proc_control_node_B.loop_ub = (*bineq_size - 1) *
      proc_control_node_B.WorkingSet.ldA + 1;
    proc_control_node_B.b_y_size_idx_0 = 1;
    while (((proc_control_node_B.mConstrMax > 0) &&
            (proc_control_node_B.b_y_size_idx_0 <= proc_control_node_B.loop_ub))
           || ((proc_control_node_B.mConstrMax < 0) &&
               (proc_control_node_B.b_y_size_idx_0 >=
                proc_control_node_B.loop_ub))) {
      proc_control_node_B.ix_d = 0;
      proc_control_node_B.scale_n = 0.0;
      proc_control_node_B.ia = proc_control_node_B.b_y_size_idx_0;
      while (proc_control_node_B.ia <= proc_control_node_B.b_y_size_idx_0 + 154)
      {
        proc_control_node_B.scale_n +=
          proc_control_node_B.WorkingSet.Aineq.data[proc_control_node_B.ia - 1] *
          proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.ix_d];
        proc_control_node_B.ix_d++;
        proc_control_node_B.ia++;
      }

      proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.c_idx] +=
        proc_control_node_B.scale_n;
      proc_control_node_B.c_idx++;
      proc_control_node_B.b_y_size_idx_0 += proc_control_node_B.mConstrMax;
    }
  }

  proc_c_updateWorkingSetForNewQP(x0, &proc_control_node_B.WorkingSet,
    proc_control_node_B.mIneq, proc_control_node_B.TrialState.cIneq.data,
    proc_control_node_B.TrialState.cEq, proc_control_node_B.k_p, lb, 0, 0);
  proc_control_node_initActiveSet(&proc_control_node_B.WorkingSet);
  proc_control_node_B.MeritFunction.penaltyParam = 1.0;
  proc_control_node_B.MeritFunction.threshold = 0.0001;
  proc_control_node_B.MeritFunction.nPenaltyDecreases = 0;
  proc_control_node_B.MeritFunction.linearizedConstrViol = 0.0;
  proc_control_node_B.MeritFunction.initFval = proc_control_node_B.lb;
  proc_control_node_B.lb = 0.0;
  for (proc_control_node_B.k_p = 0; proc_control_node_B.k_p < 130;
       proc_control_node_B.k_p++) {
    proc_control_node_B.lb += fabs
      (proc_control_node_B.TrialState.cEq[proc_control_node_B.k_p]);
  }

  proc_control_node_B.MeritFunction.initConstrViolationEq =
    proc_control_node_B.lb;
  proc_control_node_B.lb = 0.0;
  proc_control_node_B.k_p = 0;
  while (proc_control_node_B.k_p <= proc_control_node_B.mIneq - 1) {
    if (proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.k_p] > 0.0)
    {
      proc_control_node_B.lb +=
        proc_control_node_B.TrialState.cIneq.data[proc_control_node_B.k_p];
    }

    proc_control_node_B.k_p++;
  }

  proc_control_node_B.MeritFunction.initConstrViolationIneq =
    proc_control_node_B.lb;
  proc_control_node_B.MeritFunction.phi = 0.0;
  proc_control_node_B.MeritFunction.phiPrimePlus = 0.0;
  proc_control_node_B.MeritFunction.phiFullStep = 0.0;
  proc_control_node_B.MeritFunction.feasRelativeFactor = 0.0;
  proc_control_node_B.MeritFunction.nlpPrimalFeasError = 0.0;
  proc_control_node_B.MeritFunction.nlpDualFeasError = 0.0;
  proc_control_node_B.MeritFunction.nlpComplError = 0.0;
  proc_control_node_B.MeritFunction.firstOrderOpt = 0.0;
  proc_control_node_B.MeritFunction.hasObjective = true;
  proc_contro_factoryConstruct_ln(proc_control_node_B.maxDims,
    proc_control_node_B.maxDims, &proc_control_node_B.QRManager.ldq,
    proc_control_node_B.QRManager.QR.size, proc_control_node_B.QRManager.Q.data,
    proc_control_node_B.QRManager.Q.size,
    proc_control_node_B.QRManager.jpvt.data,
    &proc_control_node_B.QRManager.jpvt.size,
    &proc_control_node_B.QRManager.mrows, &proc_control_node_B.QRManager.ncols,
    &proc_control_node_B.QRManager.tau.size,
    &proc_control_node_B.QRManager.minRowCol,
    &proc_control_node_B.QRManager.usedPivoting);
  proc_contr_factoryConstruct_lnz(proc_control_node_B.maxDims,
    proc_control_node_B.CholManager.FMat.size,
    &proc_control_node_B.CholManager.ldm, &proc_control_node_B.CholManager.ndims,
    &proc_control_node_B.CholManager.info,
    &proc_control_node_B.CholManager.scaleFactor,
    &proc_control_node_B.CholManager.ConvexCheck,
    &proc_control_node_B.CholManager.regTol_,
    &proc_control_node_B.CholManager.workspace_,
    &proc_control_node_B.CholManager.workspace2_);
  proc_control_node_B.tmp_size_f = *bineq_size;
  proc_control_node_B.tmp_size_n = proc_control_node_B.mNonlinIneq;
  proc_control_node_driver(bineq_data, lb, &proc_control_node_B.TrialState,
    &proc_control_node_B.MeritFunction, &proc_control_node_B.FcnEvaluator,
    &proc_control_node_B.memspace, &proc_control_node_B.WorkingSet,
    &proc_control_node_B.QRManager, &proc_control_node_B.CholManager,
    &proc_control_node_B.QPObjective, &proc_control_node_B.tmp_size_f,
    &proc_control_node_B.tmp_size_n, proc_control_node_B.unusedExpr);
  *fval = proc_control_node_B.TrialState.sqpFval;
  *exitflag = proc_control_node_B.TrialState.sqpExitFlag;
  *output_iterations = proc_control_node_B.TrialState.sqpIterations;
  *output_funcCount = proc_control_node_B.TrialState.FunctionEvaluations;
  output_algorithm[0] = 's';
  output_algorithm[1] = 'q';
  output_algorithm[2] = 'p';
  *output_constrviolation = proc_control_node_B.MeritFunction.nlpPrimalFeasError;
  proc_control_node_B.lb = 0.0;
  proc_control_node_B.scale_n = 3.3121686421112381E-170;
  for (proc_control_node_B.mNonlinIneq = 0; proc_control_node_B.mNonlinIneq <
       155; proc_control_node_B.mNonlinIneq++) {
    x[proc_control_node_B.mNonlinIneq] =
      proc_control_node_B.TrialState.xstarsqp[proc_control_node_B.mNonlinIneq];
    proc_control_node_B.absxk_m = fabs
      (proc_control_node_B.TrialState.delta_x.data[proc_control_node_B.mNonlinIneq]);
    if (proc_control_node_B.absxk_m > proc_control_node_B.scale_n) {
      proc_control_node_B.t_k = proc_control_node_B.scale_n /
        proc_control_node_B.absxk_m;
      proc_control_node_B.lb = proc_control_node_B.lb * proc_control_node_B.t_k *
        proc_control_node_B.t_k + 1.0;
      proc_control_node_B.scale_n = proc_control_node_B.absxk_m;
    } else {
      proc_control_node_B.t_k = proc_control_node_B.absxk_m /
        proc_control_node_B.scale_n;
      proc_control_node_B.lb += proc_control_node_B.t_k *
        proc_control_node_B.t_k;
    }
  }

  *output_stepsize = proc_control_node_B.scale_n * sqrt(proc_control_node_B.lb);
  *output_lssteplength = proc_control_node_B.TrialState.steplength;
  *output_firstorderopt = proc_control_node_B.MeritFunction.firstOrderOpt;
}

boolean_T proc_control_nodeModelClass::proc_control_node_isequal_b4(const real_T
  varargin_1[3], const real_T varargin_2[3])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 3)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

boolean_T proc_control_nodeModelClass::proc_control_node_isequal_b4n(const
  real_T varargin_1[6], const real_T varargin_2[6])
{
  int32_T b_k;
  boolean_T exitg1;
  boolean_T p;
  boolean_T p_0;
  p = false;
  p_0 = true;
  b_k = 0;
  exitg1 = false;
  while ((!exitg1) && (b_k < 6)) {
    if (!(varargin_1[b_k] == varargin_2[b_k])) {
      p_0 = false;
      exitg1 = true;
    } else {
      b_k++;
    }
  }

  if (p_0) {
    p = true;
  }

  return p;
}

// Function for MATLAB Function: '<S132>/MATLAB Function2'
void proc_control_nodeModelClass::proc_contr_AUVEULJacobianMatrix(const real_T
  in1[12], real_T Ane[144])
{
  real_T Ane_tmp;
  real_T Ane_tmp_0;
  proc_control_node_B.t2_g = fabs(in1[9]);
  proc_control_node_B.t3_c = fabs(in1[10]);
  proc_control_node_B.t4_o = fabs(in1[11]);
  proc_control_node_B.t5_g = cos(in1[3]);
  proc_control_node_B.t6_o = cos(in1[5]);
  proc_control_node_B.t7_g = fabs(in1[6]);
  proc_control_node_B.t8_a = fabs(in1[7]);
  proc_control_node_B.t9_g = cos(in1[4]);
  proc_control_node_B.t10_b = fabs(in1[8]);
  if (in1[9] < 0.0) {
    proc_control_node_B.t11_k = -1.0;
  } else if (in1[9] > 0.0) {
    proc_control_node_B.t11_k = 1.0;
  } else if (in1[9] == 0.0) {
    proc_control_node_B.t11_k = 0.0;
  } else {
    proc_control_node_B.t11_k = (rtNaN);
  }

  proc_control_node_B.t12_c = sin(in1[3]);
  proc_control_node_B.t13_ji = sin(in1[5]);
  if (in1[10] < 0.0) {
    proc_control_node_B.t14_a = -1.0;
  } else if (in1[10] > 0.0) {
    proc_control_node_B.t14_a = 1.0;
  } else if (in1[10] == 0.0) {
    proc_control_node_B.t14_a = 0.0;
  } else {
    proc_control_node_B.t14_a = (rtNaN);
  }

  if (in1[11] < 0.0) {
    proc_control_node_B.t15_d = -1.0;
  } else if (in1[11] > 0.0) {
    proc_control_node_B.t15_d = 1.0;
  } else if (in1[11] == 0.0) {
    proc_control_node_B.t15_d = 0.0;
  } else {
    proc_control_node_B.t15_d = (rtNaN);
  }

  proc_control_node_B.t16_c = sin(in1[4]);
  if (in1[6] < 0.0) {
    proc_control_node_B.t17_d = -1.0;
  } else if (in1[6] > 0.0) {
    proc_control_node_B.t17_d = 1.0;
  } else if (in1[6] == 0.0) {
    proc_control_node_B.t17_d = 0.0;
  } else {
    proc_control_node_B.t17_d = (rtNaN);
  }

  if (in1[7] < 0.0) {
    proc_control_node_B.t18_a = -1.0;
  } else if (in1[7] > 0.0) {
    proc_control_node_B.t18_a = 1.0;
  } else if (in1[7] == 0.0) {
    proc_control_node_B.t18_a = 0.0;
  } else {
    proc_control_node_B.t18_a = (rtNaN);
  }

  if (in1[8] < 0.0) {
    proc_control_node_B.t19_b = -1.0;
  } else if (in1[8] > 0.0) {
    proc_control_node_B.t19_b = 1.0;
  } else if (in1[8] == 0.0) {
    proc_control_node_B.t19_b = 0.0;
  } else {
    proc_control_node_B.t19_b = (rtNaN);
  }

  proc_control_node_B.t46_g = in1[11] * 1.0571299073092789E-5;
  proc_control_node_B.t47 = in1[10] * 9.7602896722846373E-5;
  proc_control_node_B.t48 = in1[7] * 0.01129023503850542;
  proc_control_node_B.t49 = in1[6] * 0.00477039452928936;
  proc_control_node_B.t50_f = in1[9] * 9.1703771260780813E-5;
  proc_control_node_B.t52 = in1[8] * 0.143523560675718;
  proc_control_node_B.t53_c = in1[6] * 0.00568699616459184;
  proc_control_node_B.t54_p = in1[8] * 0.069014505171846527;
  proc_control_node_B.t55_a = in1[7] * 0.0071670223909459834;
  proc_control_node_B.t20_n = proc_control_node_B.t16_c *
    proc_control_node_B.t16_c;
  proc_control_node_B.t21_h = in1[11] * proc_control_node_B.t5_g;
  proc_control_node_B.t22_m = in1[10] * proc_control_node_B.t12_c;
  proc_control_node_B.t23_f = proc_control_node_B.t5_g *
    proc_control_node_B.t6_o;
  proc_control_node_B.t24_b = proc_control_node_B.t5_g *
    proc_control_node_B.t13_ji;
  proc_control_node_B.t25_e = proc_control_node_B.t6_o *
    proc_control_node_B.t12_c;
  proc_control_node_B.t26_n = proc_control_node_B.t12_c *
    proc_control_node_B.t13_ji;
  proc_control_node_B.t27_p = 1.0 / proc_control_node_B.t9_g;
  proc_control_node_B.t28_i = proc_control_node_B.t27_p *
    proc_control_node_B.t27_p;
  proc_control_node_B.t31_j = proc_control_node_B.t16_c *
    proc_control_node_B.t24_b;
  proc_control_node_B.t32_l = proc_control_node_B.t16_c *
    proc_control_node_B.t25_e;
  proc_control_node_B.t35_c = proc_control_node_B.t16_c *
    proc_control_node_B.t26_n + proc_control_node_B.t23_f;
  proc_control_node_B.t36_g = proc_control_node_B.t16_c *
    proc_control_node_B.t23_f + proc_control_node_B.t26_n;
  proc_control_node_B.t37_c = proc_control_node_B.t24_b +
    -proc_control_node_B.t32_l;
  proc_control_node_B.t38 = proc_control_node_B.t25_e +
    -proc_control_node_B.t31_j;
  memset(&Ane[0], 0, 36U * sizeof(real_T));
  Ane[36] = proc_control_node_B.t36_g * in1[7] + proc_control_node_B.t37_c *
    in1[8];
  Ane[37] = -proc_control_node_B.t38 * in1[7] - proc_control_node_B.t35_c * in1
    [8];
  Ane_tmp = proc_control_node_B.t5_g * proc_control_node_B.t9_g;
  Ane_tmp_0 = proc_control_node_B.t9_g * proc_control_node_B.t12_c;
  Ane[38] = Ane_tmp * in1[7] - Ane_tmp_0 * in1[8];
  proc_control_node_B.Ane_tmp = in1[10] * proc_control_node_B.t5_g;
  proc_control_node_B.Ane_tmp_l = in1[11] * proc_control_node_B.t12_c;
  Ane[39] = proc_control_node_B.Ane_tmp * proc_control_node_B.t16_c *
    proc_control_node_B.t27_p - proc_control_node_B.Ane_tmp_l *
    proc_control_node_B.t16_c * proc_control_node_B.t27_p;
  Ane[40] = -proc_control_node_B.t21_h - proc_control_node_B.t22_m;
  Ane[41] = proc_control_node_B.Ane_tmp * proc_control_node_B.t27_p -
    proc_control_node_B.Ane_tmp_l * proc_control_node_B.t27_p;
  proc_control_node_B.Ane_tmp = proc_control_node_B.t9_g *
    (proc_control_node_B.t5_g * 0.746622 + proc_control_node_B.t12_c * 0.030563);
  Ane[42] = (Ane_tmp * -0.00032065807093242669 + Ane_tmp_0 *
             0.0031080058823148081) - proc_control_node_B.Ane_tmp *
    0.0012787556591776421;
  Ane[43] = (Ane_tmp * -0.099357516335518037 - Ane_tmp_0 * 9.2539381289009212E-5)
    - proc_control_node_B.Ane_tmp * 0.2146651116826197;
  Ane[44] = (Ane_tmp * 0.00012299739396644729 + Ane_tmp_0 * 0.091551392742788118)
    + proc_control_node_B.Ane_tmp * 0.022292555139725449;
  Ane[45] = (Ane_tmp * -0.0925623192330923 - Ane_tmp_0 * 0.0072319766932639751)
    - proc_control_node_B.Ane_tmp * 16.7769453147126;
  Ane[46] = (Ane_tmp * 0.00044073627942045862 - Ane_tmp_0 * 0.180823215198492) +
    proc_control_node_B.Ane_tmp * 0.078743486942211408;
  Ane[47] = (Ane_tmp * -0.16393821447242629 + Ane_tmp_0 * 2.3149797019741971E-5)
    + proc_control_node_B.Ane_tmp * 0.03910191918844614;
  Ane[48] = (-proc_control_node_B.t6_o * proc_control_node_B.t16_c * in1[6] +
             proc_control_node_B.t9_g * proc_control_node_B.t25_e * in1[7]) +
    proc_control_node_B.t9_g * proc_control_node_B.t23_f * in1[8];
  Ane[49] = (-proc_control_node_B.t13_ji * proc_control_node_B.t16_c * in1[6] +
             proc_control_node_B.t9_g * proc_control_node_B.t26_n * in1[7]) +
    proc_control_node_B.t9_g * proc_control_node_B.t24_b * in1[8];
  proc_control_node_B.Ane_tmp = proc_control_node_B.t5_g *
    proc_control_node_B.t16_c;
  proc_control_node_B.Ane_tmp_l = proc_control_node_B.t12_c *
    proc_control_node_B.t16_c;
  Ane[50] = (-proc_control_node_B.t9_g * in1[6] - proc_control_node_B.Ane_tmp_l *
             in1[7]) - proc_control_node_B.Ane_tmp * in1[8];
  Ane[51] = (proc_control_node_B.t20_n * proc_control_node_B.t21_h *
             proc_control_node_B.t28_i + (proc_control_node_B.t21_h +
              proc_control_node_B.t22_m)) + proc_control_node_B.t20_n *
    proc_control_node_B.t22_m * proc_control_node_B.t28_i;
  Ane[52] = 0.0;
  Ane[53] = proc_control_node_B.t16_c * proc_control_node_B.t21_h *
    proc_control_node_B.t28_i + proc_control_node_B.t16_c *
    proc_control_node_B.t22_m * proc_control_node_B.t28_i;
  proc_control_node_B.t20_n = proc_control_node_B.t16_c *
    (proc_control_node_B.t5_g * 0.030563 + -(proc_control_node_B.t12_c *
      0.746622));
  Ane[54] = ((proc_control_node_B.Ane_tmp * 0.0031080058823148081 +
              proc_control_node_B.t9_g * 0.20658857264009611) +
             proc_control_node_B.Ane_tmp_l * 0.00032065807093242669) +
    proc_control_node_B.t20_n * -0.0012787556591776421;
  Ane[55] = ((proc_control_node_B.t9_g * 0.00062794504942032621 -
              proc_control_node_B.Ane_tmp * 9.2539381289009212E-5) +
             proc_control_node_B.Ane_tmp_l * 0.099357516335518037) +
    proc_control_node_B.t20_n * -0.2146651116826197;
  Ane[56] = ((proc_control_node_B.Ane_tmp * 0.091551392742788118 +
              proc_control_node_B.t9_g * -0.00293954998359708) -
             proc_control_node_B.Ane_tmp_l * 0.00012299739396644729) +
    proc_control_node_B.t20_n * 0.022292555139725449;
  Ane[57] = ((proc_control_node_B.t9_g * 0.058155363974671921 -
              proc_control_node_B.Ane_tmp * 0.0072319766932639751) +
             proc_control_node_B.Ane_tmp_l * 0.0925623192330923) +
    proc_control_node_B.t20_n * -16.7769453147126;
  Ane[58] = ((proc_control_node_B.t9_g * -4.3185693674649661 -
              proc_control_node_B.Ane_tmp * 0.180823215198492) -
             proc_control_node_B.Ane_tmp_l * 0.00044073627942045862) +
    proc_control_node_B.t20_n * 0.078743486942211408;
  Ane[59] = ((proc_control_node_B.Ane_tmp * 2.3149797019741971E-5 +
              proc_control_node_B.t9_g * 0.16330622581837911) +
             proc_control_node_B.Ane_tmp_l * 0.16393821447242629) +
    proc_control_node_B.t20_n * 0.03910191918844614;
  proc_control_node_B.t20_n = proc_control_node_B.t9_g *
    proc_control_node_B.t13_ji;
  Ane[60] = (-proc_control_node_B.t35_c * in1[7] + proc_control_node_B.t38 *
             in1[8]) - proc_control_node_B.t20_n * in1[6];
  proc_control_node_B.t6_o *= proc_control_node_B.t9_g;
  Ane[61] = (-proc_control_node_B.t37_c * in1[7] + proc_control_node_B.t36_g *
             in1[8]) + proc_control_node_B.t6_o * in1[6];
  memset(&Ane[62], 0, 10U * sizeof(real_T));
  Ane[72] = proc_control_node_B.t6_o;
  Ane[73] = proc_control_node_B.t20_n;
  Ane[74] = -proc_control_node_B.t16_c;
  Ane[75] = 0.0;
  Ane[76] = 0.0;
  Ane[77] = 0.0;
  proc_control_node_B.t20_n = proc_control_node_B.t17_d * in1[6];
  Ane[78] = (((((proc_control_node_B.t7_g * -0.036243063166504788 +
                 proc_control_node_B.t46_g) + proc_control_node_B.t47) -
               proc_control_node_B.t48) - proc_control_node_B.t52) -
             proc_control_node_B.t20_n * 0.036243063166504788) -
    1.393963967942492;
  Ane[79] = (((in1[7] * 0.00477039452928936 - in1[8] * 0.001468966557066211) -
              proc_control_node_B.t20_n * 1.109195745194835E-6) -
             4.2661374815185972E-5) + ((in1[10] * 0.00041592787873873338 - in1
    [11] * 0.74121409319149256) - proc_control_node_B.t7_g *
    1.109195745194835E-6);
  Ane[80] = (((in1[7] * -5.890830655932608E-5 + in1[8] * 0.00568699616459184) +
              proc_control_node_B.t20_n * 7.9830677445685858E-6) +
             0.00030704106709879178) + ((in1[10] * 0.69409782663856512 - in1[11]
    * 0.00032422410747795261) + proc_control_node_B.t7_g * 7.9830677445685858E-6);
  Ane[81] = (((in1[10] * 0.032506453976272241 + in1[11] * 0.24400486517334929) -
              proc_control_node_B.t7_g * 0.0001525121428377004) + ((in1[7] *
    0.044446246736648841 - in1[8] * 0.1148218101592509) -
              proc_control_node_B.t20_n * 0.0001525121428377004)) +
    -0.0058658516476038621;
  Ane[82] = (((in1[10] * -0.00568699616459184 - in1[11] * 0.001145088836853196)
              + proc_control_node_B.t7_g * 0.011738978516892359) + ((in1[7] *
    1.7911420833141059E-5 + in1[8] * 8.3502908029033716) +
              proc_control_node_B.t20_n * 0.011738978516892359)) +
    0.45149917372662912;
  Ane[83] = (((in1[10] * -7.5569972812640509E-5 - in1[11] * 0.00477039452928936)
              - proc_control_node_B.t7_g * 0.0011846302503005471) + ((in1[7] *
    -5.91169722427816 - in1[8] * 2.2977499514997389E-5) -
              proc_control_node_B.t20_n * 0.0011846302503005471)) +
    -0.045562701934636442;
  Ane[84] = -proc_control_node_B.t24_b + proc_control_node_B.t32_l;
  Ane[85] = proc_control_node_B.t35_c;
  Ane[86] = Ane_tmp_0;
  Ane[87] = 0.0;
  Ane[88] = 0.0;
  Ane[89] = 0.0;
  Ane_tmp_0 = proc_control_node_B.t18_a * in1[7];
  Ane[90] = (((in1[9] * -2.1519484922730651E-5 + in1[11] * 1.3454180758607359) -
              proc_control_node_B.t8_a * 7.7738505218783331E-7) - in1[6] *
             0.01129023503850542) + ((in1[8] * -0.00041111798914172931 -
    Ane_tmp_0 * 7.7738505218783331E-7) - 5.6881833086914632E-5);
  Ane[91] = (((((proc_control_node_B.t8_a * -0.01903042325061665 +
                 proc_control_node_B.t46_g) + proc_control_node_B.t49) +
               -proc_control_node_B.t50_f) - proc_control_node_B.t54_p) -
             Ane_tmp_0 * 0.01903042325061665) - 1.3924699939475591;
  Ane[92] = (((in1[9] * -0.93255469429176219 - in1[11] * 7.6083411800115719E-5)
              + proc_control_node_B.t8_a * 2.3842573459475649E-5) + ((in1[6] *
    -5.890830655932608E-5 + in1[8] * 0.0071670223909459834) + Ane_tmp_0 *
              2.3842573459475649E-5)) + 0.0017445785458152919;
  Ane[93] = (((in1[9] * -0.0071670223909459834 + in1[11] * 0.00145353196782447)
              - proc_control_node_B.t8_a * 0.017943464992838758) + ((in1[6] *
    0.044446246736648841 - in1[8] * 5.3937622658585171) - Ane_tmp_0 *
              0.017943464992838758)) + -1.312936462890641;
  Ane[94] = (((in1[9] * 0.0012538688125934979 - in1[11] * 0.1118794885864644) +
              proc_control_node_B.t8_a * 8.4206769578830268E-5) + in1[6] *
             1.7911420833141059E-5) + ((Ane_tmp_0 * 8.4206769578830268E-5 + in1
    [8] * 0.025315910649035739) + 0.0061614709447924592);
  Ane[95] = (((in1[9] * 1.6661666253314429E-5 + in1[11] * 0.01129023503850542) +
              proc_control_node_B.t8_a * 0.00035080205133418912) + ((in1[6] *
    -5.91169722427816 + in1[8] * 0.01257120723021817) + Ane_tmp_0 *
              0.00035080205133418912)) + 0.025668442780550419;
  Ane[96] = proc_control_node_B.t36_g;
  Ane[97] = -proc_control_node_B.t25_e + proc_control_node_B.t31_j;
  Ane[98] = Ane_tmp;
  Ane[99] = 0.0;
  Ane[100] = 0.0;
  Ane[101] = 0.0;
  Ane_tmp = proc_control_node_B.t19_b * in1[8];
  Ane[102] = (((in1[9] * 2.989993556213668E-6 - in1[10] * 1.4431163638272659) +
               proc_control_node_B.t10_b * 5.1582899272597018E-6) - in1[6] *
              0.143523560675718) + ((Ane_tmp * 5.1582899272597018E-6 + in1[7] *
    -0.00041111798914172931) + 0.00047761943770923169);
  Ane[103] = (((in1[9] * 1.0731951852318531 - in1[10] * 1.356129262930646E-5) +
               proc_control_node_B.t10_b * 2.1981689677272681E-5) + ((in1[6] *
    -0.001468966557066211 - in1[7] * 0.069014505171846527) + Ane_tmp *
    2.1981689677272681E-5)) + 0.002035341636784507;
  Ane[104] = (((((proc_control_node_B.t10_b * -0.01616685726098728 +
                  proc_control_node_B.t47) + -proc_control_node_B.t50_f) +
                proc_control_node_B.t53_c) + proc_control_node_B.t55_a) -
              Ane_tmp * 0.01616685726098728) - 1.4969312278691931;
  Ane[105] = (((in1[9] * 0.069014505171846527 - in1[10] * 0.0018646499569661989)
               + proc_control_node_B.t10_b * 0.00171795837774031) + ((in1[6] *
    -0.1148218101592509 - in1[7] * 5.3937622658585171) + Ane_tmp *
    0.00171795837774031)) + 0.15907022016113981;
  Ane[106] = (((in1[9] * -0.00032387772021301561 + in1[10] * 0.143523560675718)
               - proc_control_node_B.t10_b * 0.00030055639757781919) + ((in1[6] *
    8.3502908029033716 + in1[7] * 0.025315910649035739) - Ane_tmp *
    0.00030055639757781919)) + -0.0278292960720203;
  Ane[107] = (((in1[9] * -0.0013492616947596331 - in1[10] * 0.01448357294143097)
               - proc_control_node_B.t10_b * 3.993855127780116E-6) - in1[6] *
              2.2977499514997389E-5) + ((in1[7] * 0.01257120723021817 - Ane_tmp *
    3.993855127780116E-6) - 0.00036980140072038109);
  Ane[108] = 0.0;
  Ane[109] = 0.0;
  Ane[110] = 0.0;
  Ane[111] = 1.0;
  Ane[112] = 0.0;
  Ane[113] = 0.0;
  Ane_tmp = in1[9] * proc_control_node_B.t11_k;
  Ane[114] = (((in1[9] * -0.00010396365424827521 - in1[10] *
                0.0030560301354578762) - in1[11] * 0.030270009262121408) -
              proc_control_node_B.t2_g * 2.1768827225552109E-5) + (((in1[7] *
    -2.1519484922730651E-5 + in1[8] * 2.989993556213668E-6) - Ane_tmp *
    2.1768827225552109E-5) - 0.001303522588356414);
  Ane[115] = ((((in1[9] * 0.0028513455484883 - in1[10] * 0.00032316342950661811)
                + in1[11] * 4.2079285691049859E-5) - proc_control_node_B.t2_g *
               0.0036543398217122828) + ((in1[7] * -9.1703771260780813E-5 + in1
    [8] * 1.0731951852318531) - Ane_tmp * 0.0036543398217122828)) +
    -0.2188227438151068;
  Ane[116] = (((in1[9] * 0.023864851221217471 + in1[10] * 4.0426879502317728E-6)
               - in1[11] * 0.00016269010774240791) + ((proc_control_node_B.t2_g *
    0.0003794960966701478 - in1[7] * 0.93255469429176219) - in1[8] *
    9.1703771260780813E-5)) + (Ane_tmp * 0.0003794960966701478 +
    0.022724317165877118);
  Ane[117] = ((((proc_control_node_B.t2_g * -0.28560141361437341 +
                 proc_control_node_B.t54_p) - proc_control_node_B.t55_a) -
               Ane_tmp * 0.28560141361437341) - 17.1018810547529) + ((in1[9] *
    0.00017692814721597281 - in1[10] * 0.00301187450220627) + in1[11] *
    0.0032852614324183722);
  Ane[118] = (((in1[9] * 0.005100926963153893 + in1[10] * 7.54282242443926E-5) +
               in1[11] * 0.76112100692746432) + ((proc_control_node_B.t2_g *
    0.0013404854555911631 + in1[7] * 0.0012538688125934979) - in1[8] *
    0.00032387772021301561)) + (Ane_tmp * 0.0013404854555911631 +
    0.080268590155159442);
  Ane[119] = (((in1[9] * -0.0085297096290247246 - in1[10] * 0.59953739020136265)
               - in1[11] * 6.8948828938803766E-5) + ((proc_control_node_B.t2_g *
    0.00066564938883491385 + in1[7] * 1.6661666253314429E-5) - in1[8] *
    0.0013492616947596331)) + (Ane_tmp * 0.00066564938883491385 +
    0.039859244840414);
  Ane[120] = 0.0;
  Ane[121] = 0.0;
  Ane[122] = 0.0;
  Ane[123] = proc_control_node_B.Ane_tmp_l * proc_control_node_B.t27_p;
  Ane[124] = proc_control_node_B.t5_g;
  Ane[125] = proc_control_node_B.t12_c * proc_control_node_B.t27_p;
  Ane_tmp = in1[10] * proc_control_node_B.t14_a;
  Ane[126] = (((in1[9] * -0.0030560301354578762 + in1[10] * 0.001929418735906703)
               + in1[11] * 6.2884941489263073E-5) + proc_control_node_B.t3_c *
              0.001003331497170287) + (((in1[6] * 9.7602896722846373E-5 - in1[8]
    * 1.4431163638272659) + Ane_tmp * 0.001003331497170287) + 0.0702332048019201);
  Ane[127] = (((in1[9] * -0.00032316342950661811 + in1[10] *
                4.5292476302332957E-6) - in1[11] * 0.016528998001422841) +
              proc_control_node_B.t3_c * 1.026911824132076E-5) + (((in1[6] *
    0.00041592787873873338 - in1[8] * 1.356129262930646E-5) + Ane_tmp *
    1.026911824132076E-5) + 0.00071883827689245348);
  Ane[128] = (((in1[9] * 4.0426879502317728E-6 + in1[10] * 0.023860477346842442)
               - in1[11] * 0.000941018323416786) + ((proc_control_node_B.t3_c *
    -3.9756137245743291E-5 + in1[6] * 0.69409782663856512) + in1[8] *
    9.7602896722846373E-5)) + (Ane_tmp * -3.9756137245743291E-5 -
    0.00278292960720203);
  Ane[129] = (((in1[9] * -0.00301187450220627 + in1[10] * 0.00082864946354184129)
               - in1[11] * 0.291807921220024) + ((proc_control_node_B.t3_c *
    0.00080268590155159437 + in1[6] * 0.032506453976272241) - in1[8] *
    0.0018646499569661989)) + (Ane_tmp * 0.00080268590155159437 +
    0.056188013108611608);
  Ane[130] = ((((proc_control_node_B.t3_c * -0.058374455968341669 +
                 proc_control_node_B.t52) - proc_control_node_B.t53_c) - Ane_tmp
               * 0.058374455968341669) - 4.0862119177839169) + ((in1[9] *
    7.54282242443926E-5 - in1[10] * 0.00019446645525741661) - in1[11] *
    0.003324115892995542);
  Ane[131] = ((((proc_control_node_B.t3_c * 1.6062902063655571E-7 - in1[6] *
                 7.5569972812640509E-5) - in1[8] * 0.01448357294143097) +
               Ane_tmp * 1.6062902063655571E-7) + ((in1[9] *
    -0.59953739020136265 + in1[10] * 0.0085432434746820687) + in1[11] *
    0.0030111351640179931)) + 1.12440314445589E-5;
  Ane[132] = 0.0;
  Ane[133] = 0.0;
  Ane[134] = 0.0;
  Ane[135] = proc_control_node_B.Ane_tmp * proc_control_node_B.t27_p;
  Ane[136] = -proc_control_node_B.t12_c;
  Ane[137] = proc_control_node_B.t5_g * proc_control_node_B.t27_p;
  Ane_tmp = in1[11] * proc_control_node_B.t15_d;
  Ane[138] = (((in1[9] * -0.030270009262121408 + in1[10] * 6.2884941489263073E-5)
               + in1[11] * 0.0020006959490984312) - proc_control_node_B.t4_o *
              0.0001032754577185093) + (((in1[6] * 1.0571299073092789E-5 + in1[7]
    * 1.3454180758607359) - Ane_tmp * 0.0001032754577185093) -
    0.015187567311545479);
  Ane[139] = (((in1[9] * 4.2079285691049859E-5 - in1[10] * 0.016528998001422841)
               + in1[11] * 0.00283488707941543) + proc_control_node_B.t4_o *
              4.3636352726935713E-5) + (((in1[6] * -0.74121409319149256 + in1[7]
    * 1.0571299073092789E-5) + Ane_tmp * 4.3636352726935713E-5) +
    0.0064171106951376048);
  Ane[140] = ((((proc_control_node_B.t4_o * -5.3885346962112674E-7 - in1[6] *
                 0.00032422410747795261) - in1[7] * 7.6083411800115719E-5) -
               Ane_tmp * 5.3885346962112674E-7) + ((in1[9] *
    -0.00016269010774240791 - in1[10] * 0.000941018323416786) - in1[11] *
    2.6641242336162E-6)) + -7.9243157297224521E-5;
  Ane[141] = (((in1[9] * 0.0032852614324183722 - in1[10] * 0.291807921220024) -
               in1[11] * 0.00063467747547131872) + ((proc_control_node_B.t4_o *
    0.00040656429737222281 + in1[6] * 0.24400486517334929) + in1[7] *
    0.00145353196782447)) + (Ane_tmp * 0.00040656429737222281 +
    0.059788867260621);
  Ane[142] = ((((proc_control_node_B.t4_o * 1.6384160104928689E-7 - in1[6] *
                 0.001145088836853196) - in1[7] * 0.1118794885864644) + Ane_tmp *
               1.6384160104928689E-7) + ((in1[9] * 0.76112100692746432 - in1[10]
    * 0.003324115892995542) - in1[11] * 0.005288701994301117)) +
    2.409435309548336E-5;
  Ane[143] = ((((proc_control_node_B.t4_o * -0.054076220260104418 +
                 proc_control_node_B.t48) - proc_control_node_B.t49) - Ane_tmp *
               0.054076220260104418) - 7.952385332368296) + ((in1[9] *
    -6.8948828938803766E-5 + in1[10] * 0.0030111351640179931) + in1[11] *
    1.7711862430984169E-5);
}

// Function for MATLAB Function: '<S132>/MATLAB Function2'
int32_T proc_control_nodeModelClass::proc_control_node_xgetrfs(real_T A[144],
  real_T B[144])
{
  int32_T c_ix;
  int32_T d;
  int32_T ijA;
  int32_T info;
  int32_T iy;
  int32_T jA;
  int8_T ipiv;
  for (c_ix = 0; c_ix < 12; c_ix++) {
    proc_control_node_B.ipiv_k[c_ix] = static_cast<int8_T>(c_ix + 1);
  }

  info = 0;
  for (proc_control_node_B.b_j_mc = 0; proc_control_node_B.b_j_mc < 11;
       proc_control_node_B.b_j_mc++) {
    proc_control_node_B.c_kw = proc_control_node_B.b_j_mc * 13;
    jA = 0;
    proc_control_node_B.ix_m = proc_control_node_B.c_kw;
    proc_control_node_B.smax_e = fabs(A[proc_control_node_B.c_kw]);
    for (iy = 2; iy <= 12 - proc_control_node_B.b_j_mc; iy++) {
      proc_control_node_B.ix_m++;
      proc_control_node_B.y_m = fabs(A[proc_control_node_B.ix_m]);
      if (proc_control_node_B.y_m > proc_control_node_B.smax_e) {
        jA = iy - 1;
        proc_control_node_B.smax_e = proc_control_node_B.y_m;
      }
    }

    if (A[proc_control_node_B.c_kw + jA] != 0.0) {
      if (jA != 0) {
        c_ix = proc_control_node_B.b_j_mc + jA;
        proc_control_node_B.ipiv_k[proc_control_node_B.b_j_mc] =
          static_cast<int8_T>(c_ix + 1);
        for (jA = 0; jA < 12; jA++) {
          proc_control_node_B.ix_m = jA * 12 + proc_control_node_B.b_j_mc;
          proc_control_node_B.smax_e = A[proc_control_node_B.ix_m];
          iy = jA * 12 + c_ix;
          A[proc_control_node_B.ix_m] = A[iy];
          A[iy] = proc_control_node_B.smax_e;
        }
      }

      jA = (proc_control_node_B.c_kw - proc_control_node_B.b_j_mc) + 12;
      proc_control_node_B.ix_m = proc_control_node_B.c_kw + 1;
      while (proc_control_node_B.ix_m + 1 <= jA) {
        A[proc_control_node_B.ix_m] /= A[proc_control_node_B.c_kw];
        proc_control_node_B.ix_m++;
      }
    } else {
      info = proc_control_node_B.b_j_mc + 1;
    }

    jA = proc_control_node_B.c_kw;
    proc_control_node_B.ix_m = proc_control_node_B.c_kw + 12;
    for (iy = 0; iy <= 10 - proc_control_node_B.b_j_mc; iy++) {
      if (A[proc_control_node_B.ix_m] != 0.0) {
        proc_control_node_B.smax_e = -A[proc_control_node_B.ix_m];
        c_ix = proc_control_node_B.c_kw + 1;
        d = (jA - proc_control_node_B.b_j_mc) + 24;
        for (ijA = jA + 13; ijA < d; ijA++) {
          A[ijA] += A[c_ix] * proc_control_node_B.smax_e;
          c_ix++;
        }
      }

      proc_control_node_B.ix_m += 12;
      jA += 12;
    }
  }

  if ((info == 0) && (!(A[143] != 0.0))) {
    info = 12;
  }

  for (proc_control_node_B.b_j_mc = 0; proc_control_node_B.b_j_mc < 11;
       proc_control_node_B.b_j_mc++) {
    ipiv = proc_control_node_B.ipiv_k[proc_control_node_B.b_j_mc];
    if (proc_control_node_B.b_j_mc + 1 != ipiv) {
      for (proc_control_node_B.c_kw = 0; proc_control_node_B.c_kw < 12;
           proc_control_node_B.c_kw++) {
        proc_control_node_B.ix_m = 12 * proc_control_node_B.c_kw +
          proc_control_node_B.b_j_mc;
        proc_control_node_B.smax_e = B[proc_control_node_B.ix_m];
        c_ix = (ipiv + 12 * proc_control_node_B.c_kw) - 1;
        B[proc_control_node_B.ix_m] = B[c_ix];
        B[c_ix] = proc_control_node_B.smax_e;
      }
    }
  }

  for (proc_control_node_B.b_j_mc = 0; proc_control_node_B.b_j_mc < 12;
       proc_control_node_B.b_j_mc++) {
    jA = 12 * proc_control_node_B.b_j_mc;
    for (proc_control_node_B.c_kw = 0; proc_control_node_B.c_kw < 12;
         proc_control_node_B.c_kw++) {
      proc_control_node_B.ix_m = 12 * proc_control_node_B.c_kw;
      if (B[proc_control_node_B.c_kw + jA] != 0.0) {
        for (iy = proc_control_node_B.c_kw + 2; iy < 13; iy++) {
          c_ix = (iy + jA) - 1;
          B[c_ix] -= A[(iy + proc_control_node_B.ix_m) - 1] *
            B[proc_control_node_B.c_kw + jA];
        }
      }
    }
  }

  for (proc_control_node_B.b_j_mc = 0; proc_control_node_B.b_j_mc < 12;
       proc_control_node_B.b_j_mc++) {
    jA = 12 * proc_control_node_B.b_j_mc;
    for (proc_control_node_B.c_kw = 11; proc_control_node_B.c_kw >= 0;
         proc_control_node_B.c_kw--) {
      proc_control_node_B.ix_m = 12 * proc_control_node_B.c_kw;
      c_ix = proc_control_node_B.c_kw + jA;
      proc_control_node_B.smax_e = B[c_ix];
      if (proc_control_node_B.smax_e != 0.0) {
        B[c_ix] = proc_control_node_B.smax_e / A[proc_control_node_B.c_kw +
          proc_control_node_B.ix_m];
        for (iy = 0; iy < proc_control_node_B.c_kw; iy++) {
          d = iy + jA;
          B[d] -= B[c_ix] * A[iy + proc_control_node_B.ix_m];
        }
      }
    }
  }

  return info;
}

// Function for MATLAB Function: '<S132>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_node_lusolve(const real_T A[144],
  const real_T B[144], real_T X[144])
{
  memcpy(&X[0], &B[0], 144U * sizeof(real_T));
  memcpy(&proc_control_node_B.b_A_p[0], &A[0], 144U * sizeof(real_T));
  proc_control_node_xgetrfs(proc_control_node_B.b_A_p, X);
}

// Function for MATLAB Function: '<S132>/MATLAB Function2'
void proc_control_nodeModelClass::proc_co_PadeApproximantOfDegree(const real_T
  A[144], uint8_T m, real_T F[144])
{
  for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 12;
       proc_control_node_B.i25++) {
    memset(&proc_control_node_B.A2_p[proc_control_node_B.i25 * 12], 0, 12U *
           sizeof(real_T));
    for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
         proc_control_node_B.e_k_a++) {
      for (proc_control_node_B.e_k_b = 0; proc_control_node_B.e_k_b < 12;
           proc_control_node_B.e_k_b++) {
        proc_control_node_B.A2_tmp_b = 12 * proc_control_node_B.i25 +
          proc_control_node_B.e_k_b;
        proc_control_node_B.A2_p[proc_control_node_B.A2_tmp_b] += A[12 *
          proc_control_node_B.e_k_a + proc_control_node_B.e_k_b] * A[12 *
          proc_control_node_B.i25 + proc_control_node_B.e_k_a];
      }
    }
  }

  if (m == 3) {
    memcpy(&proc_control_node_B.U_m[0], &proc_control_node_B.A2_p[0], 144U *
           sizeof(real_T));
    proc_control_node_B.e_k_b = 0;
    proc_control_node_B.A2_tmp_b = 0;
    for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
         proc_control_node_B.e_k_a++) {
      memset(&proc_control_node_B.A4_p[proc_control_node_B.A2_tmp_b], 0, 12U *
             sizeof(real_T));
      proc_control_node_B.U_m[proc_control_node_B.e_k_b] += 60.0;
      proc_control_node_B.e_k_b += 13;
      proc_control_node_B.A2_tmp_b += 12;
    }

    proc_control_node_B.e_k_b = 0;
    for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
         proc_control_node_B.e_k_a++) {
      proc_control_node_B.A2_tmp_b = 0;
      for (proc_control_node_B.i26 = 0; proc_control_node_B.i26 < 12;
           proc_control_node_B.i26++) {
        for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 12;
             proc_control_node_B.i25++) {
          proc_control_node_B.A_tmp_m = proc_control_node_B.i25 +
            proc_control_node_B.e_k_b;
          proc_control_node_B.A4_p[proc_control_node_B.A_tmp_m] +=
            A[proc_control_node_B.i25 + proc_control_node_B.A2_tmp_b] *
            proc_control_node_B.U_m[proc_control_node_B.i26 +
            proc_control_node_B.e_k_b];
        }

        proc_control_node_B.A2_tmp_b += 12;
      }

      proc_control_node_B.e_k_b += 12;
    }

    for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 144;
         proc_control_node_B.i25++) {
      proc_control_node_B.U_m[proc_control_node_B.i25] =
        proc_control_node_B.A4_p[proc_control_node_B.i25];
      proc_control_node_B.V_o[proc_control_node_B.i25] = 12.0 *
        proc_control_node_B.A2_p[proc_control_node_B.i25];
    }

    proc_control_node_B.d_c = 120.0;
  } else {
    for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 12;
         proc_control_node_B.i25++) {
      memset(&proc_control_node_B.A3_n[proc_control_node_B.i25 * 12], 0, 12U *
             sizeof(real_T));
      for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
           proc_control_node_B.e_k_a++) {
        for (proc_control_node_B.e_k_b = 0; proc_control_node_B.e_k_b < 12;
             proc_control_node_B.e_k_b++) {
          proc_control_node_B.A2_tmp_b = 12 * proc_control_node_B.i25 +
            proc_control_node_B.e_k_b;
          proc_control_node_B.A3_n[proc_control_node_B.A2_tmp_b] +=
            proc_control_node_B.A2_p[12 * proc_control_node_B.e_k_a +
            proc_control_node_B.e_k_b] * proc_control_node_B.A2_p[12 *
            proc_control_node_B.i25 + proc_control_node_B.e_k_a];
        }
      }
    }

    if (m == 5) {
      for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 144;
           proc_control_node_B.i25++) {
        proc_control_node_B.U_m[proc_control_node_B.i25] = 420.0 *
          proc_control_node_B.A2_p[proc_control_node_B.i25] +
          proc_control_node_B.A3_n[proc_control_node_B.i25];
      }

      proc_control_node_B.e_k_b = 0;
      proc_control_node_B.A2_tmp_b = 0;
      for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
           proc_control_node_B.e_k_a++) {
        memset(&proc_control_node_B.A4_p[proc_control_node_B.A2_tmp_b], 0, 12U *
               sizeof(real_T));
        proc_control_node_B.U_m[proc_control_node_B.e_k_b] += 15120.0;
        proc_control_node_B.e_k_b += 13;
        proc_control_node_B.A2_tmp_b += 12;
      }

      proc_control_node_B.e_k_b = 0;
      for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
           proc_control_node_B.e_k_a++) {
        proc_control_node_B.A2_tmp_b = 0;
        for (proc_control_node_B.i26 = 0; proc_control_node_B.i26 < 12;
             proc_control_node_B.i26++) {
          for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 12;
               proc_control_node_B.i25++) {
            proc_control_node_B.A_tmp_m = proc_control_node_B.i25 +
              proc_control_node_B.e_k_b;
            proc_control_node_B.A4_p[proc_control_node_B.A_tmp_m] +=
              A[proc_control_node_B.i25 + proc_control_node_B.A2_tmp_b] *
              proc_control_node_B.U_m[proc_control_node_B.i26 +
              proc_control_node_B.e_k_b];
          }

          proc_control_node_B.A2_tmp_b += 12;
        }

        proc_control_node_B.e_k_b += 12;
      }

      for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 144;
           proc_control_node_B.i25++) {
        proc_control_node_B.U_m[proc_control_node_B.i25] =
          proc_control_node_B.A4_p[proc_control_node_B.i25];
        proc_control_node_B.V_o[proc_control_node_B.i25] = 30.0 *
          proc_control_node_B.A3_n[proc_control_node_B.i25] + 3360.0 *
          proc_control_node_B.A2_p[proc_control_node_B.i25];
      }

      proc_control_node_B.d_c = 30240.0;
    } else {
      for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 12;
           proc_control_node_B.i25++) {
        memset(&proc_control_node_B.A4_l[proc_control_node_B.i25 * 12], 0, 12U *
               sizeof(real_T));
        for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
             proc_control_node_B.e_k_a++) {
          for (proc_control_node_B.e_k_b = 0; proc_control_node_B.e_k_b < 12;
               proc_control_node_B.e_k_b++) {
            proc_control_node_B.A2_tmp_b = 12 * proc_control_node_B.i25 +
              proc_control_node_B.e_k_b;
            proc_control_node_B.A4_l[proc_control_node_B.A2_tmp_b] +=
              proc_control_node_B.A3_n[12 * proc_control_node_B.e_k_a +
              proc_control_node_B.e_k_b] * proc_control_node_B.A2_p[12 *
              proc_control_node_B.i25 + proc_control_node_B.e_k_a];
          }
        }
      }

      switch (m) {
       case 7:
        for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 144;
             proc_control_node_B.i25++) {
          proc_control_node_B.U_m[proc_control_node_B.i25] = (1512.0 *
            proc_control_node_B.A3_n[proc_control_node_B.i25] +
            proc_control_node_B.A4_l[proc_control_node_B.i25]) + 277200.0 *
            proc_control_node_B.A2_p[proc_control_node_B.i25];
        }

        proc_control_node_B.e_k_b = 0;
        proc_control_node_B.A2_tmp_b = 0;
        for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
             proc_control_node_B.e_k_a++) {
          memset(&proc_control_node_B.A4_p[proc_control_node_B.A2_tmp_b], 0, 12U
                 * sizeof(real_T));
          proc_control_node_B.U_m[proc_control_node_B.e_k_b] += 8.64864E+6;
          proc_control_node_B.e_k_b += 13;
          proc_control_node_B.A2_tmp_b += 12;
        }

        proc_control_node_B.e_k_b = 0;
        for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
             proc_control_node_B.e_k_a++) {
          proc_control_node_B.A2_tmp_b = 0;
          for (proc_control_node_B.i26 = 0; proc_control_node_B.i26 < 12;
               proc_control_node_B.i26++) {
            for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 12;
                 proc_control_node_B.i25++) {
              proc_control_node_B.A_tmp_m = proc_control_node_B.i25 +
                proc_control_node_B.e_k_b;
              proc_control_node_B.A4_p[proc_control_node_B.A_tmp_m] +=
                A[proc_control_node_B.i25 + proc_control_node_B.A2_tmp_b] *
                proc_control_node_B.U_m[proc_control_node_B.i26 +
                proc_control_node_B.e_k_b];
            }

            proc_control_node_B.A2_tmp_b += 12;
          }

          proc_control_node_B.e_k_b += 12;
        }

        for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 144;
             proc_control_node_B.i25++) {
          proc_control_node_B.U_m[proc_control_node_B.i25] =
            proc_control_node_B.A4_p[proc_control_node_B.i25];
          proc_control_node_B.V_o[proc_control_node_B.i25] = (56.0 *
            proc_control_node_B.A4_l[proc_control_node_B.i25] + 25200.0 *
            proc_control_node_B.A3_n[proc_control_node_B.i25]) + 1.99584E+6 *
            proc_control_node_B.A2_p[proc_control_node_B.i25];
        }

        proc_control_node_B.d_c = 1.729728E+7;
        break;

       case 9:
        for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 12;
             proc_control_node_B.i25++) {
          memset(&proc_control_node_B.V_o[proc_control_node_B.i25 * 12], 0, 12U *
                 sizeof(real_T));
          for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
               proc_control_node_B.e_k_a++) {
            for (proc_control_node_B.e_k_b = 0; proc_control_node_B.e_k_b < 12;
                 proc_control_node_B.e_k_b++) {
              proc_control_node_B.A2_tmp_b = 12 * proc_control_node_B.i25 +
                proc_control_node_B.e_k_b;
              proc_control_node_B.V_o[proc_control_node_B.A2_tmp_b] +=
                proc_control_node_B.A4_l[12 * proc_control_node_B.e_k_a +
                proc_control_node_B.e_k_b] * proc_control_node_B.A2_p[12 *
                proc_control_node_B.i25 + proc_control_node_B.e_k_a];
            }
          }
        }

        for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 144;
             proc_control_node_B.i25++) {
          proc_control_node_B.U_m[proc_control_node_B.i25] = ((3960.0 *
            proc_control_node_B.A4_l[proc_control_node_B.i25] +
            proc_control_node_B.V_o[proc_control_node_B.i25]) + 2.16216E+6 *
            proc_control_node_B.A3_n[proc_control_node_B.i25]) + 3.027024E+8 *
            proc_control_node_B.A2_p[proc_control_node_B.i25];
        }

        proc_control_node_B.e_k_b = 0;
        proc_control_node_B.A2_tmp_b = 0;
        for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
             proc_control_node_B.e_k_a++) {
          memset(&proc_control_node_B.A4_p[proc_control_node_B.A2_tmp_b], 0, 12U
                 * sizeof(real_T));
          proc_control_node_B.U_m[proc_control_node_B.e_k_b] += 8.8216128E+9;
          proc_control_node_B.e_k_b += 13;
          proc_control_node_B.A2_tmp_b += 12;
        }

        proc_control_node_B.e_k_b = 0;
        for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
             proc_control_node_B.e_k_a++) {
          proc_control_node_B.A2_tmp_b = 0;
          for (proc_control_node_B.i26 = 0; proc_control_node_B.i26 < 12;
               proc_control_node_B.i26++) {
            for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 12;
                 proc_control_node_B.i25++) {
              proc_control_node_B.A_tmp_m = proc_control_node_B.i25 +
                proc_control_node_B.e_k_b;
              proc_control_node_B.A4_p[proc_control_node_B.A_tmp_m] +=
                A[proc_control_node_B.i25 + proc_control_node_B.A2_tmp_b] *
                proc_control_node_B.U_m[proc_control_node_B.i26 +
                proc_control_node_B.e_k_b];
            }

            proc_control_node_B.A2_tmp_b += 12;
          }

          proc_control_node_B.e_k_b += 12;
        }

        for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 144;
             proc_control_node_B.i25++) {
          proc_control_node_B.U_m[proc_control_node_B.i25] =
            proc_control_node_B.A4_p[proc_control_node_B.i25];
          proc_control_node_B.V_o[proc_control_node_B.i25] = ((90.0 *
            proc_control_node_B.V_o[proc_control_node_B.i25] + 110880.0 *
            proc_control_node_B.A4_l[proc_control_node_B.i25]) + 3.027024E+7 *
            proc_control_node_B.A3_n[proc_control_node_B.i25]) + 2.0756736E+9 *
            proc_control_node_B.A2_p[proc_control_node_B.i25];
        }

        proc_control_node_B.d_c = 1.76432256E+10;
        break;

       default:
        for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 144;
             proc_control_node_B.i25++) {
          proc_control_node_B.U_m[proc_control_node_B.i25] = (3.352212864E+10 *
            proc_control_node_B.A4_l[proc_control_node_B.i25] +
            1.05594705216E+13 * proc_control_node_B.A3_n[proc_control_node_B.i25])
            + 1.1873537964288E+15 *
            proc_control_node_B.A2_p[proc_control_node_B.i25];
        }

        proc_control_node_B.e_k_b = 0;
        for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
             proc_control_node_B.e_k_a++) {
          proc_control_node_B.U_m[proc_control_node_B.e_k_b] +=
            3.238237626624E+16;
          proc_control_node_B.e_k_b += 13;
        }

        for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 144;
             proc_control_node_B.i25++) {
          proc_control_node_B.V_o[proc_control_node_B.i25] = (16380.0 *
            proc_control_node_B.A3_n[proc_control_node_B.i25] +
            proc_control_node_B.A4_l[proc_control_node_B.i25]) + 4.08408E+7 *
            proc_control_node_B.A2_p[proc_control_node_B.i25];
        }

        for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 12;
             proc_control_node_B.i25++) {
          proc_control_node_B.e_k_b = 0;
          for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
               proc_control_node_B.e_k_a++) {
            proc_control_node_B.d_c = 0.0;
            proc_control_node_B.A2_tmp_b = 0;
            for (proc_control_node_B.i26 = 0; proc_control_node_B.i26 < 12;
                 proc_control_node_B.i26++) {
              proc_control_node_B.d_c +=
                proc_control_node_B.A4_l[proc_control_node_B.A2_tmp_b +
                proc_control_node_B.i25] *
                proc_control_node_B.V_o[proc_control_node_B.i26 +
                proc_control_node_B.e_k_b];
              proc_control_node_B.A2_tmp_b += 12;
            }

            proc_control_node_B.A2_tmp_b = proc_control_node_B.e_k_b +
              proc_control_node_B.i25;
            proc_control_node_B.A4_p[proc_control_node_B.A2_tmp_b] =
              proc_control_node_B.U_m[proc_control_node_B.A2_tmp_b] +
              proc_control_node_B.d_c;
            proc_control_node_B.e_k_b += 12;
          }
        }

        for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 12;
             proc_control_node_B.i25++) {
          memset(&proc_control_node_B.U_m[proc_control_node_B.i25 * 12], 0, 12U *
                 sizeof(real_T));
          for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
               proc_control_node_B.e_k_a++) {
            for (proc_control_node_B.e_k_b = 0; proc_control_node_B.e_k_b < 12;
                 proc_control_node_B.e_k_b++) {
              proc_control_node_B.A2_tmp_b = 12 * proc_control_node_B.i25 +
                proc_control_node_B.e_k_b;
              proc_control_node_B.U_m[proc_control_node_B.A2_tmp_b] += A[12 *
                proc_control_node_B.e_k_a + proc_control_node_B.e_k_b] *
                proc_control_node_B.A4_p[12 * proc_control_node_B.i25 +
                proc_control_node_B.e_k_a];
            }
          }
        }

        for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 144;
             proc_control_node_B.i25++) {
          proc_control_node_B.A4_p[proc_control_node_B.i25] = (182.0 *
            proc_control_node_B.A4_l[proc_control_node_B.i25] + 960960.0 *
            proc_control_node_B.A3_n[proc_control_node_B.i25]) + 1.32324192E+9 *
            proc_control_node_B.A2_p[proc_control_node_B.i25];
        }

        for (proc_control_node_B.i25 = 0; proc_control_node_B.i25 < 12;
             proc_control_node_B.i25++) {
          proc_control_node_B.e_k_b = 0;
          for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
               proc_control_node_B.e_k_a++) {
            proc_control_node_B.d_c = 0.0;
            proc_control_node_B.A2_tmp_b = 0;
            for (proc_control_node_B.i26 = 0; proc_control_node_B.i26 < 12;
                 proc_control_node_B.i26++) {
              proc_control_node_B.d_c +=
                proc_control_node_B.A4_l[proc_control_node_B.A2_tmp_b +
                proc_control_node_B.i25] *
                proc_control_node_B.A4_p[proc_control_node_B.i26 +
                proc_control_node_B.e_k_b];
              proc_control_node_B.A2_tmp_b += 12;
            }

            proc_control_node_B.A2_tmp_b = proc_control_node_B.e_k_b +
              proc_control_node_B.i25;
            proc_control_node_B.V_o[proc_control_node_B.A2_tmp_b] =
              ((proc_control_node_B.A4_l[proc_control_node_B.A2_tmp_b] *
                6.704425728E+11 + proc_control_node_B.d_c) +
               proc_control_node_B.A3_n[proc_control_node_B.A2_tmp_b] *
               1.29060195264E+14) +
              proc_control_node_B.A2_p[proc_control_node_B.A2_tmp_b] *
              7.7717703038976E+15;
            proc_control_node_B.e_k_b += 12;
          }
        }

        proc_control_node_B.d_c = 6.476475253248E+16;
        break;
      }
    }
  }

  proc_control_node_B.e_k_b = 0;
  for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
       proc_control_node_B.e_k_a++) {
    proc_control_node_B.V_o[proc_control_node_B.e_k_b] +=
      proc_control_node_B.d_c;
    proc_control_node_B.e_k_b += 13;
  }

  for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 144;
       proc_control_node_B.e_k_a++) {
    proc_control_node_B.V_o[proc_control_node_B.e_k_a] -=
      proc_control_node_B.U_m[proc_control_node_B.e_k_a];
    proc_control_node_B.U_m[proc_control_node_B.e_k_a] *= 2.0;
  }

  proc_control_node_lusolve(proc_control_node_B.V_o, proc_control_node_B.U_m, F);
  proc_control_node_B.e_k_b = 0;
  for (proc_control_node_B.e_k_a = 0; proc_control_node_B.e_k_a < 12;
       proc_control_node_B.e_k_a++) {
    F[proc_control_node_B.e_k_b]++;
    proc_control_node_B.e_k_b += 13;
  }
}

// Function for MATLAB Function: '<S132>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_node_mldivide(const real_T A[36],
  const real_T B[36], real_T Y[36])
{
  int32_T c_ix;
  int32_T c_k;
  int32_T d;
  int32_T ijA;
  int32_T iy;
  int8_T ipiv;
  memcpy(&proc_control_node_B.b_A_l[0], &A[0], 36U * sizeof(real_T));
  for (c_ix = 0; c_ix < 6; c_ix++) {
    proc_control_node_B.ipiv_b[c_ix] = static_cast<int8_T>(c_ix + 1);
  }

  for (proc_control_node_B.b_j_b = 0; proc_control_node_B.b_j_b < 5;
       proc_control_node_B.b_j_b++) {
    proc_control_node_B.ip = proc_control_node_B.b_j_b * 7;
    iy = 0;
    proc_control_node_B.ix_n = proc_control_node_B.ip;
    proc_control_node_B.smax_m = fabs
      (proc_control_node_B.b_A_l[proc_control_node_B.ip]);
    for (c_k = 2; c_k <= 6 - proc_control_node_B.b_j_b; c_k++) {
      proc_control_node_B.ix_n++;
      proc_control_node_B.y_fi = fabs
        (proc_control_node_B.b_A_l[proc_control_node_B.ix_n]);
      if (proc_control_node_B.y_fi > proc_control_node_B.smax_m) {
        iy = c_k - 1;
        proc_control_node_B.smax_m = proc_control_node_B.y_fi;
      }
    }

    if (proc_control_node_B.b_A_l[proc_control_node_B.ip + iy] != 0.0) {
      if (iy != 0) {
        iy += proc_control_node_B.b_j_b;
        proc_control_node_B.ipiv_b[proc_control_node_B.b_j_b] =
          static_cast<int8_T>(iy + 1);
        for (c_k = 0; c_k < 6; c_k++) {
          proc_control_node_B.smax_m = proc_control_node_B.b_A_l[c_k * 6 +
            proc_control_node_B.b_j_b];
          proc_control_node_B.ix_n = c_k * 6 + iy;
          proc_control_node_B.b_A_l[proc_control_node_B.b_j_b + c_k * 6] =
            proc_control_node_B.b_A_l[proc_control_node_B.ix_n];
          proc_control_node_B.b_A_l[proc_control_node_B.ix_n] =
            proc_control_node_B.smax_m;
        }
      }

      iy = (proc_control_node_B.ip - proc_control_node_B.b_j_b) + 6;
      proc_control_node_B.ix_n = proc_control_node_B.ip + 1;
      while (proc_control_node_B.ix_n + 1 <= iy) {
        proc_control_node_B.b_A_l[proc_control_node_B.ix_n] /=
          proc_control_node_B.b_A_l[proc_control_node_B.ip];
        proc_control_node_B.ix_n++;
      }
    }

    iy = proc_control_node_B.ip;
    proc_control_node_B.ix_n = proc_control_node_B.ip + 6;
    for (c_k = 0; c_k <= 4 - proc_control_node_B.b_j_b; c_k++) {
      if (proc_control_node_B.b_A_l[proc_control_node_B.ix_n] != 0.0) {
        proc_control_node_B.smax_m =
          -proc_control_node_B.b_A_l[proc_control_node_B.ix_n];
        c_ix = proc_control_node_B.ip + 1;
        d = (iy - proc_control_node_B.b_j_b) + 12;
        for (ijA = iy + 7; ijA < d; ijA++) {
          proc_control_node_B.b_A_l[ijA] += proc_control_node_B.b_A_l[c_ix] *
            proc_control_node_B.smax_m;
          c_ix++;
        }
      }

      proc_control_node_B.ix_n += 6;
      iy += 6;
    }
  }

  memcpy(&Y[0], &B[0], 36U * sizeof(real_T));
  for (proc_control_node_B.b_j_b = 0; proc_control_node_B.b_j_b < 5;
       proc_control_node_B.b_j_b++) {
    ipiv = proc_control_node_B.ipiv_b[proc_control_node_B.b_j_b];
    if (proc_control_node_B.b_j_b + 1 != ipiv) {
      for (iy = 0; iy < 6; iy++) {
        proc_control_node_B.ip = 6 * iy + proc_control_node_B.b_j_b;
        proc_control_node_B.smax_m = Y[proc_control_node_B.ip];
        c_ix = (ipiv + 6 * iy) - 1;
        Y[proc_control_node_B.ip] = Y[c_ix];
        Y[c_ix] = proc_control_node_B.smax_m;
      }
    }
  }

  for (proc_control_node_B.b_j_b = 0; proc_control_node_B.b_j_b < 6;
       proc_control_node_B.b_j_b++) {
    proc_control_node_B.ip = 6 * proc_control_node_B.b_j_b;
    for (iy = 0; iy < 6; iy++) {
      proc_control_node_B.ix_n = 6 * iy;
      c_ix = iy + proc_control_node_B.ip;
      if (Y[c_ix] != 0.0) {
        for (c_k = iy + 2; c_k < 7; c_k++) {
          d = (c_k + proc_control_node_B.ip) - 1;
          Y[d] -= proc_control_node_B.b_A_l[(c_k + proc_control_node_B.ix_n) - 1]
            * Y[c_ix];
        }
      }
    }
  }

  for (proc_control_node_B.b_j_b = 0; proc_control_node_B.b_j_b < 6;
       proc_control_node_B.b_j_b++) {
    proc_control_node_B.ip = 6 * proc_control_node_B.b_j_b;
    for (iy = 5; iy >= 0; iy--) {
      proc_control_node_B.ix_n = 6 * iy;
      c_ix = iy + proc_control_node_B.ip;
      proc_control_node_B.smax_m = Y[c_ix];
      if (proc_control_node_B.smax_m != 0.0) {
        Y[c_ix] = proc_control_node_B.smax_m / proc_control_node_B.b_A_l[iy +
          proc_control_node_B.ix_n];
        for (c_k = 0; c_k < iy; c_k++) {
          d = c_k + proc_control_node_B.ip;
          Y[d] -= Y[iy + proc_control_node_B.ip] * proc_control_node_B.b_A_l[c_k
            + proc_control_node_B.ix_n];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_no_mpc_plantupdate(const real_T
  a[144], real_T b[96], const real_T c[144], real_T b_A[400], real_T b_B[580],
  real_T b_C[240], const real_T b_D[348], const real_T b_mvindex[8], const
  real_T b_myindex[12], const real_T b_Uscale[8], const real_T b_Yscale[12],
  real_T Bu[160], real_T Bv[20], real_T Cm[240], real_T Dv[12], real_T Dvm[12],
  real_T QQ[400], real_T RR[144], real_T NN[240])
{
  int32_T b_tmp;
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  int32_T tmp;
  i_1 = 0;
  for (i_0 = 0; i_0 < 8; i_0++) {
    for (i = 0; i < 12; i++) {
      b_tmp = i + i_1;
      b[b_tmp] *= b_Uscale[i_0];
    }

    i_1 += 12;
  }

  i_1 = 0;
  i_0 = 0;
  for (i = 0; i < 12; i++) {
    for (b_tmp = 0; b_tmp < 12; b_tmp++) {
      tmp = b_tmp + i_1;
      b_C[tmp] = c[tmp] / b_Yscale[b_tmp];
      b_A[b_tmp + i_0] = a[tmp];
    }

    i_1 += 12;
    i_0 += 20;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    for (i_0 = 0; i_0 < 12; i_0++) {
      b_B[i_0 + 20 * i_1] = b[(static_cast<int32_T>(b_mvindex[i_1]) - 1) * 12 +
        i_0];
    }

    memcpy(&Bu[i_1 * 20], &b_B[i_1 * 20], 20U * sizeof(real_T));
  }

  for (i_1 = 0; i_1 < 20; i_1++) {
    Bv[i_1] = b_B[i_1 + 160];
    for (i_0 = 0; i_0 < 12; i_0++) {
      Cm[i_0 + 12 * i_1] = b_C[(12 * i_1 + static_cast<int32_T>(b_myindex[i_0]))
        - 1];
    }
  }

  for (i_1 = 0; i_1 < 12; i_1++) {
    Dv[i_1] = b_D[i_1 + 96];
    Dvm[i_1] = b_D[static_cast<int32_T>(b_myindex[i_1]) + 95];
  }

  for (i_1 = 0; i_1 < 28; i_1++) {
    proc_control_node_B.UnknownIn_k[i_1] = 0;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    proc_control_node_B.UnknownIn_k[i_1] = static_cast<int8_T>(i_1 + 1);
  }

  for (i_1 = 0; i_1 < 20; i_1++) {
    proc_control_node_B.UnknownIn_k[i_1 + 8] = static_cast<int8_T>(i_1 + 10);
  }

  for (i_1 = 0; i_1 < 28; i_1++) {
    for (i_0 = 0; i_0 < 20; i_0++) {
      proc_control_node_B.b_B_a[i_0 + (i_1 << 5)] = b_B
        [(proc_control_node_B.UnknownIn_k[i_1] - 1) * 20 + i_0];
    }
  }

  for (i_1 = 0; i_1 < 28; i_1++) {
    for (i_0 = 0; i_0 < 12; i_0++) {
      proc_control_node_B.b_B_a[(i_0 + (i_1 << 5)) + 20] = b_D
        [((proc_control_node_B.UnknownIn_k[i_1] - 1) * 12 + static_cast<int32_T>
          (b_myindex[i_0])) - 1];
    }
  }

  for (i_1 = 0; i_1 < 20; i_1++) {
    for (i_0 = 0; i_0 < 28; i_0++) {
      proc_control_node_B.b_B_j[i_0 + 28 * i_1] = b_B
        [(proc_control_node_B.UnknownIn_k[i_0] - 1) * 20 + i_1];
    }
  }

  for (i_1 = 0; i_1 < 12; i_1++) {
    for (i_0 = 0; i_0 < 28; i_0++) {
      proc_control_node_B.b_B_j[i_0 + 28 * (i_1 + 20)] = b_D
        [((proc_control_node_B.UnknownIn_k[i_0] - 1) * 12 + static_cast<int32_T>
          (b_myindex[i_1])) - 1];
    }
  }

  for (i_1 = 0; i_1 < 32; i_1++) {
    memset(&proc_control_node_B.CovMat_e[i_1 << 5], 0, sizeof(real_T) << 5U);
    for (i = 0; i < 28; i++) {
      for (i_0 = 0; i_0 < 32; i_0++) {
        b_tmp = (i_1 << 5) + i_0;
        proc_control_node_B.CovMat_e[b_tmp] += proc_control_node_B.b_B_a[(i << 5)
          + i_0] * proc_control_node_B.b_B_j[28 * i_1 + i];
      }
    }
  }

  i_1 = 0;
  i_0 = 0;
  for (i = 0; i < 20; i++) {
    memcpy(&QQ[i_1], &proc_control_node_B.CovMat_e[i_0], 20U * sizeof(real_T));
    i_1 += 20;
    i_0 += 32;
  }

  for (i_1 = 0; i_1 < 12; i_1++) {
    memcpy(&RR[i_1 * 12], &proc_control_node_B.CovMat_e[(i_1 << 5) + 660], 12U *
           sizeof(real_T));
    memcpy(&NN[i_1 * 20], &proc_control_node_B.CovMat_e[(i_1 << 5) + 640], 20U *
           sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_mod_n(real_T x)
{
  real_T r;
  if (rtIsNaN(x)) {
    r = (rtNaN);
  } else if (rtIsInf(x)) {
    r = (rtNaN);
  } else if (x == 0.0) {
    r = 0.0;
  } else {
    r = fmod(x, proc_control_node_nu);
    if (r == 0.0) {
      r = 0.0;
    } else if (x < 0.0) {
      r += proc_control_node_nu;
    }
  }

  return r;
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_mod(real_T x)
{
  real_T r;
  if (rtIsNaN(x)) {
    r = (rtNaN);
  } else if (rtIsInf(x)) {
    r = (rtNaN);
  } else if (x == 0.0) {
    r = 0.0;
  } else {
    r = fmod(x, proc_control_node_ny);
    if (r == 0.0) {
      r = 0.0;
    } else if (x < 0.0) {
      r += proc_control_node_ny;
    }
  }

  return r;
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_cont_mpc_updateFromNominal(real_T b_Mlim
  [48], const real_T b_Mrows[48], const real_T U0[8], const real_T b_Uscale[8],
  const real_T old_mvoff[8], const real_T b_mvindex[8], real_T b_utarget[80],
  const real_T Y0[12], const real_T b_Yscale[12], const real_T old_yoff[12],
  const real_T b_myindex[12], const real_T X0[12], real_T b_xoff[20], const
  real_T DX0[12], real_T Bv[220], real_T new_mvoff[8], real_T new_yoff[12],
  real_T new_myoff[12])
{
  real_T U;
  int32_T b_ct;
  int32_T b_utarget_tmp;
  int32_T i;
  for (i = 0; i < 8; i++) {
    proc_control_node_B.U_h[i] = U0[i] / b_Uscale[i];
  }

  for (i = 0; i < 12; i++) {
    new_yoff[i] = Y0[i] / b_Yscale[i];
  }

  for (i = 0; i < 8; i++) {
    proc_control_node_B.k_b = b_mvindex[i];
    new_mvoff[i] = U0[static_cast<int32_T>(proc_control_node_B.k_b) - 1] /
      b_Uscale[static_cast<int32_T>(proc_control_node_B.k_b) - 1];
  }

  for (i = 0; i < 12; i++) {
    new_myoff[i] = new_yoff[static_cast<int32_T>(b_myindex[i]) - 1];
  }

  for (b_ct = 0; b_ct < 48; b_ct++) {
    proc_control_node_B.k_b = b_Mrows[b_ct];
    if (proc_control_node_B.k_b <= 120.0) {
      proc_control_node_B.k_b = proc_control_node_mod(proc_control_node_B.k_b -
        1.0) + 1.0;
      b_Mlim[b_ct] += old_yoff[static_cast<int32_T>(proc_control_node_B.k_b) - 1]
        - new_yoff[static_cast<int32_T>(proc_control_node_B.k_b) - 1];
    } else if (proc_control_node_B.k_b <= 240.0) {
      proc_control_node_B.k_b = proc_control_node_mod((proc_control_node_B.k_b -
        120.0) - 1.0) + 1.0;
      b_Mlim[b_ct] -= old_yoff[static_cast<int32_T>(proc_control_node_B.k_b) - 1]
        - new_yoff[static_cast<int32_T>(proc_control_node_B.k_b) - 1];
    } else if (proc_control_node_B.k_b <= 320.0) {
      proc_control_node_B.k_b = proc_control_node_mod_n((proc_control_node_B.k_b
        - 240.0) - 1.0) + 1.0;
      b_Mlim[b_ct] += old_mvoff[static_cast<int32_T>(proc_control_node_B.k_b) -
        1] - proc_control_node_B.U_h[static_cast<int32_T>(b_mvindex
        [static_cast<int32_T>(proc_control_node_B.k_b) - 1]) - 1];
    } else if (proc_control_node_B.k_b <= 400.0) {
      proc_control_node_B.k_b = proc_control_node_mod_n
        (((proc_control_node_B.k_b - 240.0) - 80.0) - 1.0) + 1.0;
      b_Mlim[b_ct] -= old_mvoff[static_cast<int32_T>(proc_control_node_B.k_b) -
        1] - proc_control_node_B.U_h[static_cast<int32_T>(b_mvindex
        [static_cast<int32_T>(proc_control_node_B.k_b) - 1]) - 1];
    }
  }

  for (b_ct = 0; b_ct < 8; b_ct++) {
    proc_control_node_B.k_b = old_mvoff[b_ct];
    U = proc_control_node_B.U_h[static_cast<int32_T>(b_mvindex[b_ct]) - 1];
    for (i = 0; i < 10; i++) {
      b_utarget_tmp = (i << 3) + b_ct;
      b_utarget[b_utarget_tmp] = (b_utarget[b_utarget_tmp] +
        proc_control_node_B.k_b) - U;
    }
  }

  memcpy(&b_xoff[0], &X0[0], 12U * sizeof(real_T));
  memcpy(&Bv[0], &DX0[0], 12U * sizeof(real_T));
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_xgetrf(real_T b_A[144],
  int32_T ipiv[12], int32_T *info)
{
  int32_T c_ix;
  int32_T d;
  int32_T ijA;
  int32_T iy;
  int32_T jA;
  for (proc_control_node_B.ix_f = 0; proc_control_node_B.ix_f < 12;
       proc_control_node_B.ix_f++) {
    ipiv[proc_control_node_B.ix_f] = proc_control_node_B.ix_f + 1;
  }

  *info = 0;
  for (proc_control_node_B.j_ms = 0; proc_control_node_B.j_ms < 11;
       proc_control_node_B.j_ms++) {
    proc_control_node_B.c_ck = proc_control_node_B.j_ms * 13;
    jA = 0;
    proc_control_node_B.ix_f = proc_control_node_B.c_ck;
    proc_control_node_B.smax_g = fabs(b_A[proc_control_node_B.c_ck]);
    for (iy = 2; iy <= 12 - proc_control_node_B.j_ms; iy++) {
      proc_control_node_B.ix_f++;
      proc_control_node_B.y_gb = fabs(b_A[proc_control_node_B.ix_f]);
      if (proc_control_node_B.y_gb > proc_control_node_B.smax_g) {
        jA = iy - 1;
        proc_control_node_B.smax_g = proc_control_node_B.y_gb;
      }
    }

    if (b_A[proc_control_node_B.c_ck + jA] != 0.0) {
      if (jA != 0) {
        iy = proc_control_node_B.j_ms + jA;
        ipiv[proc_control_node_B.j_ms] = iy + 1;
        for (jA = 0; jA < 12; jA++) {
          c_ix = jA * 12 + proc_control_node_B.j_ms;
          proc_control_node_B.smax_g = b_A[c_ix];
          proc_control_node_B.ix_f = jA * 12 + iy;
          b_A[c_ix] = b_A[proc_control_node_B.ix_f];
          b_A[proc_control_node_B.ix_f] = proc_control_node_B.smax_g;
        }
      }

      jA = (proc_control_node_B.c_ck - proc_control_node_B.j_ms) + 12;
      proc_control_node_B.ix_f = proc_control_node_B.c_ck + 1;
      while (proc_control_node_B.ix_f + 1 <= jA) {
        b_A[proc_control_node_B.ix_f] /= b_A[proc_control_node_B.c_ck];
        proc_control_node_B.ix_f++;
      }
    } else {
      *info = proc_control_node_B.j_ms + 1;
    }

    jA = proc_control_node_B.c_ck;
    proc_control_node_B.ix_f = proc_control_node_B.c_ck + 12;
    for (iy = 0; iy <= 10 - proc_control_node_B.j_ms; iy++) {
      if (b_A[proc_control_node_B.ix_f] != 0.0) {
        proc_control_node_B.smax_g = -b_A[proc_control_node_B.ix_f];
        c_ix = proc_control_node_B.c_ck + 1;
        d = (jA - proc_control_node_B.j_ms) + 24;
        for (ijA = jA + 13; ijA < d; ijA++) {
          b_A[ijA] += b_A[c_ix] * proc_control_node_B.smax_g;
          c_ix++;
        }
      }

      proc_control_node_B.ix_f += 12;
      jA += 12;
    }
  }

  if ((*info == 0) && (!(b_A[143] != 0.0))) {
    *info = 12;
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_mrdiv(const real_T b_A[144],
  const real_T b_B[144], real_T Y[144])
{
  memcpy(&proc_control_node_B.c_A_f[0], &b_B[0], 144U * sizeof(real_T));
  proc_control_node_xgetrf(proc_control_node_B.c_A_f, proc_control_node_B.ipiv,
    &proc_control_node_B.info);
  memcpy(&Y[0], &b_A[0], 144U * sizeof(real_T));
  for (proc_control_node_B.info = 0; proc_control_node_B.info < 12;
       proc_control_node_B.info++) {
    proc_control_node_B.jBcol = 12 * proc_control_node_B.info;
    proc_control_node_B.k_c = 0;
    while (proc_control_node_B.k_c <= proc_control_node_B.info - 1) {
      proc_control_node_B.kBcol = 12 * proc_control_node_B.k_c;
      proc_control_node_B.b_temp =
        proc_control_node_B.c_A_f[proc_control_node_B.k_c +
        proc_control_node_B.jBcol];
      if (proc_control_node_B.b_temp != 0.0) {
        for (proc_control_node_B.b_i_ap = 0; proc_control_node_B.b_i_ap < 12;
             proc_control_node_B.b_i_ap++) {
          proc_control_node_B.Y_tmp = proc_control_node_B.b_i_ap +
            proc_control_node_B.jBcol;
          Y[proc_control_node_B.Y_tmp] -= proc_control_node_B.b_temp *
            Y[proc_control_node_B.b_i_ap + proc_control_node_B.kBcol];
        }
      }

      proc_control_node_B.k_c++;
    }

    proc_control_node_B.b_temp = 1.0 /
      proc_control_node_B.c_A_f[proc_control_node_B.info +
      proc_control_node_B.jBcol];
    for (proc_control_node_B.jAcol = 0; proc_control_node_B.jAcol < 12;
         proc_control_node_B.jAcol++) {
      proc_control_node_B.Y_tmp = proc_control_node_B.jAcol +
        proc_control_node_B.jBcol;
      Y[proc_control_node_B.Y_tmp] *= proc_control_node_B.b_temp;
    }
  }

  for (proc_control_node_B.info = 11; proc_control_node_B.info >= 0;
       proc_control_node_B.info--) {
    proc_control_node_B.jBcol = 12 * proc_control_node_B.info;
    proc_control_node_B.jAcol = 12 * proc_control_node_B.info - 1;
    proc_control_node_B.k_c = proc_control_node_B.info + 2;
    while (proc_control_node_B.k_c < 13) {
      proc_control_node_B.kBcol = (proc_control_node_B.k_c - 1) * 12;
      proc_control_node_B.b_temp =
        proc_control_node_B.c_A_f[proc_control_node_B.k_c +
        proc_control_node_B.jAcol];
      if (proc_control_node_B.b_temp != 0.0) {
        for (proc_control_node_B.b_i_ap = 0; proc_control_node_B.b_i_ap < 12;
             proc_control_node_B.b_i_ap++) {
          proc_control_node_B.Y_tmp = proc_control_node_B.b_i_ap +
            proc_control_node_B.jBcol;
          Y[proc_control_node_B.Y_tmp] -= proc_control_node_B.b_temp *
            Y[proc_control_node_B.b_i_ap + proc_control_node_B.kBcol];
        }
      }

      proc_control_node_B.k_c++;
    }
  }

  for (proc_control_node_B.info = 10; proc_control_node_B.info >= 0;
       proc_control_node_B.info--) {
    proc_control_node_B.k_c = proc_control_node_B.ipiv[proc_control_node_B.info];
    if (proc_control_node_B.info + 1 != proc_control_node_B.k_c) {
      for (proc_control_node_B.jAcol = 0; proc_control_node_B.jAcol < 12;
           proc_control_node_B.jAcol++) {
        proc_control_node_B.kBcol = 12 * proc_control_node_B.info +
          proc_control_node_B.jAcol;
        proc_control_node_B.b_temp = Y[proc_control_node_B.kBcol];
        proc_control_node_B.Y_tmp = (proc_control_node_B.k_c - 1) * 12 +
          proc_control_node_B.jAcol;
        Y[proc_control_node_B.kBcol] = Y[proc_control_node_B.Y_tmp];
        Y[proc_control_node_B.Y_tmp] = proc_control_node_B.b_temp;
      }
    }
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_mpc_constraintcoef(const real_T
  b_A[400], const real_T Bu[160], const real_T Bv[20], const real_T b_C[240],
  const real_T Dv[12], const real_T b_Jm[1920], real_T b_SuJm[2880], real_T
  b_Sx[2400], real_T b_Su1[960], real_T b_Hv[1320])
{
  int32_T CA_tmp;
  int32_T i_0;
  int32_T i_1;
  int32_T i_2;
  int32_T tmp;
  int8_T i;
  for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 20;
       proc_control_node_B.i11++) {
    memset(&proc_control_node_B.CA_h[proc_control_node_B.i11 * 12], 0, 12U *
           sizeof(real_T));
    for (i_0 = 0; i_0 < 20; i_0++) {
      for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 12;
           proc_control_node_B.i10++) {
        CA_tmp = 12 * proc_control_node_B.i11 + proc_control_node_B.i10;
        proc_control_node_B.CA_h[CA_tmp] += b_C[12 * i_0 +
          proc_control_node_B.i10] * b_A[20 * proc_control_node_B.i11 + i_0];
      }
    }
  }

  for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 8;
       proc_control_node_B.i11++) {
    memset(&proc_control_node_B.Sum_e[proc_control_node_B.i11 * 12], 0, 12U *
           sizeof(real_T));
    for (i_0 = 0; i_0 < 20; i_0++) {
      for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 12;
           proc_control_node_B.i10++) {
        CA_tmp = 12 * proc_control_node_B.i11 + proc_control_node_B.i10;
        proc_control_node_B.Sum_e[CA_tmp] += b_C[12 * i_0 +
          proc_control_node_B.i10] * Bu[20 * proc_control_node_B.i11 + i_0];
      }
    }
  }

  memset(&proc_control_node_B.b_C_f[0], 0, 12U * sizeof(real_T));
  proc_control_node_B.i10 = 0;
  for (i_0 = 0; i_0 < 20; i_0++) {
    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 12;
         proc_control_node_B.i11++) {
      proc_control_node_B.b_C_f[proc_control_node_B.i11] +=
        b_C[proc_control_node_B.i11 + proc_control_node_B.i10] * Bv[i_0];
    }

    proc_control_node_B.i10 += 12;
  }

  for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 12;
       proc_control_node_B.i11++) {
    b_Hv[proc_control_node_B.i11] =
      proc_control_node_B.b_C_f[proc_control_node_B.i11];
    b_Hv[proc_control_node_B.i11 + 120] = Dv[proc_control_node_B.i11];
  }

  proc_control_node_B.i11 = 0;
  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 9;
       proc_control_node_B.i10++) {
    memset(&b_Hv[proc_control_node_B.i11 + 240], 0, 12U * sizeof(real_T));
    proc_control_node_B.i11 += 120;
  }

  proc_control_node_B.i11 = 0;
  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 11;
       proc_control_node_B.i10++) {
    memset(&b_Hv[proc_control_node_B.i11 + 12], 0, 108U * sizeof(real_T));
    proc_control_node_B.i11 += 120;
  }

  for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 20;
       proc_control_node_B.i11++) {
    memcpy(&b_Sx[proc_control_node_B.i11 * 120],
           &proc_control_node_B.CA_h[proc_control_node_B.i11 * 12], 12U * sizeof
           (real_T));
    memset(&b_Sx[proc_control_node_B.i11 * 120 + 12], 0, 108U * sizeof(real_T));
  }

  for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 8;
       proc_control_node_B.i11++) {
    memcpy(&b_Su1[proc_control_node_B.i11 * 120],
           &proc_control_node_B.Sum_e[proc_control_node_B.i11 * 12], 12U *
           sizeof(real_T));
    memset(&b_Su1[proc_control_node_B.i11 * 120 + 12], 0, 108U * sizeof(real_T));
    memcpy(&proc_control_node_B.Su_c[proc_control_node_B.i11 * 120],
           &proc_control_node_B.Sum_e[proc_control_node_B.i11 * 12], 12U *
           sizeof(real_T));
  }

  proc_control_node_B.i11 = 0;
  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 72;
       proc_control_node_B.i10++) {
    memset(&proc_control_node_B.Su_c[proc_control_node_B.i11 + 960], 0, 12U *
           sizeof(real_T));
    proc_control_node_B.i11 += 120;
  }

  proc_control_node_B.i11 = 0;
  for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 80;
       proc_control_node_B.i10++) {
    memset(&proc_control_node_B.Su_c[proc_control_node_B.i11 + 12], 0, 108U *
           sizeof(real_T));
    proc_control_node_B.i11 += 120;
  }

  for (proc_control_node_B.i_g = 0; proc_control_node_B.i_g < 9;
       proc_control_node_B.i_g++) {
    i = static_cast<int8_T>((proc_control_node_B.i_g + 1) * 12 + 1);
    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 12;
         proc_control_node_B.i11++) {
      proc_control_node_B.rows_h[proc_control_node_B.i11] = static_cast<int8_T>
        (proc_control_node_B.i11 + i);
      proc_control_node_B.i10 = 0;
      i_0 = 0;
      for (i_1 = 0; i_1 < 8; i_1++) {
        proc_control_node_B.Sum_dy = 0.0;
        tmp = 0;
        for (i_2 = 0; i_2 < 20; i_2++) {
          proc_control_node_B.Sum_dy += proc_control_node_B.CA_h[tmp +
            proc_control_node_B.i11] * Bu[i_2 + i_0];
          tmp += 12;
        }

        CA_tmp = proc_control_node_B.i10 + proc_control_node_B.i11;
        proc_control_node_B.Sum_e[CA_tmp] += proc_control_node_B.Sum_dy;
        proc_control_node_B.i10 += 12;
        i_0 += 20;
      }
    }

    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 8;
         proc_control_node_B.i11++) {
      for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 12;
           proc_control_node_B.i10++) {
        CA_tmp = 12 * proc_control_node_B.i11 + proc_control_node_B.i10;
        proc_control_node_B.Sum_dy = proc_control_node_B.Sum_e[CA_tmp];
        b_Su1[(proc_control_node_B.rows_h[proc_control_node_B.i10] + 120 *
               proc_control_node_B.i11) - 1] = proc_control_node_B.Sum_dy;
        proc_control_node_B.Sum_f[CA_tmp] = proc_control_node_B.Sum_dy;
      }
    }

    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 72;
         proc_control_node_B.i11++) {
      for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 12;
           proc_control_node_B.i10++) {
        proc_control_node_B.Sum_f[proc_control_node_B.i10 + 12 *
          (proc_control_node_B.i11 + 8)] = proc_control_node_B.Su_c[(120 *
          proc_control_node_B.i11 +
          proc_control_node_B.rows_h[proc_control_node_B.i10]) - 13];
      }
    }

    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 80;
         proc_control_node_B.i11++) {
      for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 12;
           proc_control_node_B.i10++) {
        proc_control_node_B.Su_c
          [(proc_control_node_B.rows_h[proc_control_node_B.i10] + 120 *
            proc_control_node_B.i11) - 1] = proc_control_node_B.Sum_f[12 *
          proc_control_node_B.i11 + proc_control_node_B.i10];
      }
    }

    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 12;
         proc_control_node_B.i11++) {
      proc_control_node_B.b_C_f[proc_control_node_B.i11] = 0.0;
      proc_control_node_B.i10 = 0;
      for (i_0 = 0; i_0 < 20; i_0++) {
        proc_control_node_B.b_C_f[proc_control_node_B.i11] +=
          proc_control_node_B.CA_h[proc_control_node_B.i10 +
          proc_control_node_B.i11] * Bv[i_0];
        proc_control_node_B.i10 += 12;
      }

      proc_control_node_B.CA_hc[proc_control_node_B.i11] =
        proc_control_node_B.b_C_f[proc_control_node_B.i11];
    }

    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 10;
         proc_control_node_B.i11++) {
      for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 12;
           proc_control_node_B.i10++) {
        proc_control_node_B.CA_hc[proc_control_node_B.i10 + 12 *
          (proc_control_node_B.i11 + 1)] = b_Hv[(120 * proc_control_node_B.i11 +
          proc_control_node_B.rows_h[proc_control_node_B.i10]) - 13];
      }
    }

    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 11;
         proc_control_node_B.i11++) {
      for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 12;
           proc_control_node_B.i10++) {
        b_Hv[(proc_control_node_B.rows_h[proc_control_node_B.i10] + 120 *
              proc_control_node_B.i11) - 1] = proc_control_node_B.CA_hc[12 *
          proc_control_node_B.i11 + proc_control_node_B.i10];
      }
    }

    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 12;
         proc_control_node_B.i11++) {
      proc_control_node_B.i10 = 0;
      i_0 = 0;
      for (i_1 = 0; i_1 < 20; i_1++) {
        CA_tmp = proc_control_node_B.i10 + proc_control_node_B.i11;
        proc_control_node_B.CA_m[CA_tmp] = 0.0;
        tmp = 0;
        for (i_2 = 0; i_2 < 20; i_2++) {
          proc_control_node_B.CA_m[CA_tmp] += proc_control_node_B.CA_h[tmp +
            proc_control_node_B.i11] * b_A[i_2 + i_0];
          tmp += 12;
        }

        proc_control_node_B.i10 += 12;
        i_0 += 20;
      }
    }

    memcpy(&proc_control_node_B.CA_h[0], &proc_control_node_B.CA_m[0], 240U *
           sizeof(real_T));
    for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 20;
         proc_control_node_B.i11++) {
      for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 12;
           proc_control_node_B.i10++) {
        b_Sx[(proc_control_node_B.rows_h[proc_control_node_B.i10] + 120 *
              proc_control_node_B.i11) - 1] = proc_control_node_B.CA_h[12 *
          proc_control_node_B.i11 + proc_control_node_B.i10];
      }
    }
  }

  for (proc_control_node_B.i11 = 0; proc_control_node_B.i11 < 24;
       proc_control_node_B.i11++) {
    memset(&b_SuJm[proc_control_node_B.i11 * 120], 0, 120U * sizeof(real_T));
    for (i_0 = 0; i_0 < 80; i_0++) {
      for (proc_control_node_B.i10 = 0; proc_control_node_B.i10 < 120;
           proc_control_node_B.i10++) {
        proc_control_node_B.i_g = 120 * proc_control_node_B.i11 +
          proc_control_node_B.i10;
        b_SuJm[proc_control_node_B.i_g] += proc_control_node_B.Su_c[120 * i_0 +
          proc_control_node_B.i10] * b_Jm[80 * proc_control_node_B.i11 + i_0];
      }
    }
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_WtMult(const real_T W[8],
  const real_T M[1920], real_T nwt, real_T WM[1920])
{
  int32_T WM_tmp;
  int32_T i;
  int32_T i_0;
  int16_T ixw;
  ixw = 1;
  for (i = 0; i < 80; i++) {
    proc_control_node_B.W = W[ixw - 1];
    for (i_0 = 0; i_0 < 24; i_0++) {
      WM_tmp = 80 * i_0 + i;
      WM[WM_tmp] = M[WM_tmp] * proc_control_node_B.W;
    }

    i_0 = ixw + 1;
    if (ixw + 1 > 32767) {
      i_0 = 32767;
    }

    ixw = static_cast<int16_T>(i_0);
    if (static_cast<int16_T>(i_0) > 8) {
      proc_control_node_B.W = rt_roundd_snf(8.0 - nwt);
      if (proc_control_node_B.W < 32768.0) {
        if (proc_control_node_B.W >= -32768.0) {
          ixw = static_cast<int16_T>(proc_control_node_B.W);
        } else {
          ixw = MIN_int16_T;
        }
      } else {
        ixw = MAX_int16_T;
      }

      i_0 = ixw + 1;
      if (proc_control_node_B.W < 32768.0) {
        if (proc_control_node_B.W >= -32768.0) {
          ixw = static_cast<int16_T>(proc_control_node_B.W);
        } else {
          ixw = MIN_int16_T;
        }
      } else {
        ixw = MAX_int16_T;
      }

      if (ixw + 1 > 32767) {
        i_0 = 32767;
      }

      ixw = static_cast<int16_T>(i_0);
    }
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_contr_mpc_calculatehessian(const real_T
  b_Wy[12], const real_T b_Wu[8], const real_T b_Wdu[8], const real_T b_SuJm
  [2880], const real_T I2Jm[1920], const real_T b_Jm[1920], const real_T b_I1
  [640], const real_T b_Su1[960], const real_T b_Sx[2400], const real_T b_Hv
  [1320], real_T nmv, real_T b_ny, real_T b_H[576], real_T b_Ku1[192], real_T
  b_Kut[1920], real_T b_Kx[480], real_T b_Kv[264], real_T b_Kr[2880])
{
  int32_T b_SuJm_tmp;
  int16_T ixw;
  ixw = 1;
  for (proc_control_node_B.i_obs = 0; proc_control_node_B.i_obs < 120;
       proc_control_node_B.i_obs++) {
    proc_control_node_B.b_Wy_j = b_Wy[ixw - 1];
    for (proc_control_node_B.i33 = 0; proc_control_node_B.i33 < 24;
         proc_control_node_B.i33++) {
      proc_control_node_B.b_Kr_tmp_i = 120 * proc_control_node_B.i33 +
        proc_control_node_B.i_obs;
      b_Kr[proc_control_node_B.b_Kr_tmp_i] =
        b_SuJm[proc_control_node_B.b_Kr_tmp_i] * proc_control_node_B.b_Wy_j;
    }

    proc_control_node_B.i33 = ixw + 1;
    if (ixw + 1 > 32767) {
      proc_control_node_B.i33 = 32767;
    }

    ixw = static_cast<int16_T>(proc_control_node_B.i33);
    if (static_cast<int16_T>(proc_control_node_B.i33) > 12) {
      proc_control_node_B.b_Wy_j = rt_roundd_snf(12.0 - b_ny);
      if (proc_control_node_B.b_Wy_j < 32768.0) {
        if (proc_control_node_B.b_Wy_j >= -32768.0) {
          ixw = static_cast<int16_T>(proc_control_node_B.b_Wy_j);
        } else {
          ixw = MIN_int16_T;
        }
      } else {
        ixw = MAX_int16_T;
      }

      proc_control_node_B.i33 = ixw + 1;
      if (proc_control_node_B.b_Wy_j < 32768.0) {
        if (proc_control_node_B.b_Wy_j >= -32768.0) {
          ixw = static_cast<int16_T>(proc_control_node_B.b_Wy_j);
        } else {
          ixw = MIN_int16_T;
        }
      } else {
        ixw = MAX_int16_T;
      }

      if (ixw + 1 > 32767) {
        proc_control_node_B.i33 = 32767;
      }

      ixw = static_cast<int16_T>(proc_control_node_B.i33);
    }
  }

  proc_control_node_WtMult(b_Wu, I2Jm, nmv, b_Kut);
  proc_control_node_WtMult(b_Wdu, b_Jm, nmv, proc_control_node_B.dv);
  for (proc_control_node_B.i33 = 0; proc_control_node_B.i33 < 24;
       proc_control_node_B.i33++) {
    for (proc_control_node_B.i_obs = 0; proc_control_node_B.i_obs < 24;
         proc_control_node_B.i_obs++) {
      b_SuJm_tmp = proc_control_node_B.i_obs + 24 * proc_control_node_B.i33;
      proc_control_node_B.b_SuJm_c[b_SuJm_tmp] = 0.0;
      for (proc_control_node_B.b_Kr_tmp_i = 0; proc_control_node_B.b_Kr_tmp_i <
           120; proc_control_node_B.b_Kr_tmp_i++) {
        proc_control_node_B.b_SuJm_c[b_SuJm_tmp] += b_SuJm[120 *
          proc_control_node_B.i_obs + proc_control_node_B.b_Kr_tmp_i] * b_Kr[120
          * proc_control_node_B.i33 + proc_control_node_B.b_Kr_tmp_i];
      }

      proc_control_node_B.b_Jm[b_SuJm_tmp] = 0.0;
      for (proc_control_node_B.b_Kr_tmp_i = 0; proc_control_node_B.b_Kr_tmp_i <
           80; proc_control_node_B.b_Kr_tmp_i++) {
        proc_control_node_B.b_Jm[b_SuJm_tmp] += b_Jm[80 *
          proc_control_node_B.i_obs + proc_control_node_B.b_Kr_tmp_i] *
          proc_control_node_B.dv[80 * proc_control_node_B.i33 +
          proc_control_node_B.b_Kr_tmp_i];
      }
    }
  }

  for (proc_control_node_B.i33 = 0; proc_control_node_B.i33 < 24;
       proc_control_node_B.i33++) {
    for (proc_control_node_B.i_obs = 0; proc_control_node_B.i_obs < 24;
         proc_control_node_B.i_obs++) {
      proc_control_node_B.b_Wy_j = 0.0;
      for (proc_control_node_B.b_Kr_tmp_i = 0; proc_control_node_B.b_Kr_tmp_i <
           80; proc_control_node_B.b_Kr_tmp_i++) {
        proc_control_node_B.b_Wy_j += I2Jm[80 * proc_control_node_B.i33 +
          proc_control_node_B.b_Kr_tmp_i] * b_Kut[80 * proc_control_node_B.i_obs
          + proc_control_node_B.b_Kr_tmp_i];
      }

      proc_control_node_B.b_Kr_tmp_i = 24 * proc_control_node_B.i_obs +
        proc_control_node_B.i33;
      b_H[proc_control_node_B.b_Kr_tmp_i] =
        (proc_control_node_B.b_SuJm_c[proc_control_node_B.b_Kr_tmp_i] +
         proc_control_node_B.b_Jm[proc_control_node_B.b_Kr_tmp_i]) +
        proc_control_node_B.b_Wy_j;
    }

    for (proc_control_node_B.i_obs = 0; proc_control_node_B.i_obs < 8;
         proc_control_node_B.i_obs++) {
      b_SuJm_tmp = proc_control_node_B.i_obs + (proc_control_node_B.i33 << 3);
      proc_control_node_B.b_Su1_p4[b_SuJm_tmp] = 0.0;
      for (proc_control_node_B.b_Kr_tmp_i = 0; proc_control_node_B.b_Kr_tmp_i <
           120; proc_control_node_B.b_Kr_tmp_i++) {
        proc_control_node_B.b_Su1_p4[b_SuJm_tmp] += b_Su1[120 *
          proc_control_node_B.i_obs + proc_control_node_B.b_Kr_tmp_i] * b_Kr[120
          * proc_control_node_B.i33 + proc_control_node_B.b_Kr_tmp_i];
      }

      proc_control_node_B.b_I1_a[b_SuJm_tmp] = 0.0;
      for (proc_control_node_B.b_Kr_tmp_i = 0; proc_control_node_B.b_Kr_tmp_i <
           80; proc_control_node_B.b_Kr_tmp_i++) {
        proc_control_node_B.b_I1_a[b_SuJm_tmp] += b_I1[80 *
          proc_control_node_B.i_obs + proc_control_node_B.b_Kr_tmp_i] * b_Kut[80
          * proc_control_node_B.i33 + proc_control_node_B.b_Kr_tmp_i];
      }
    }
  }

  for (proc_control_node_B.i33 = 0; proc_control_node_B.i33 < 192;
       proc_control_node_B.i33++) {
    b_Ku1[proc_control_node_B.i33] =
      proc_control_node_B.b_Su1_p4[proc_control_node_B.i33] +
      proc_control_node_B.b_I1_a[proc_control_node_B.i33];
  }

  for (proc_control_node_B.i33 = 0; proc_control_node_B.i33 < 1920;
       proc_control_node_B.i33++) {
    b_Kut[proc_control_node_B.i33] = -b_Kut[proc_control_node_B.i33];
  }

  for (proc_control_node_B.i33 = 0; proc_control_node_B.i33 < 24;
       proc_control_node_B.i33++) {
    for (proc_control_node_B.i_obs = 0; proc_control_node_B.i_obs < 20;
         proc_control_node_B.i_obs++) {
      b_SuJm_tmp = proc_control_node_B.i_obs + 20 * proc_control_node_B.i33;
      b_Kx[b_SuJm_tmp] = 0.0;
      for (proc_control_node_B.b_Kr_tmp_i = 0; proc_control_node_B.b_Kr_tmp_i <
           120; proc_control_node_B.b_Kr_tmp_i++) {
        b_Kx[b_SuJm_tmp] += b_Sx[120 * proc_control_node_B.i_obs +
          proc_control_node_B.b_Kr_tmp_i] * b_Kr[120 * proc_control_node_B.i33 +
          proc_control_node_B.b_Kr_tmp_i];
      }
    }

    for (proc_control_node_B.i_obs = 0; proc_control_node_B.i_obs < 11;
         proc_control_node_B.i_obs++) {
      b_SuJm_tmp = proc_control_node_B.i_obs + 11 * proc_control_node_B.i33;
      b_Kv[b_SuJm_tmp] = 0.0;
      for (proc_control_node_B.b_Kr_tmp_i = 0; proc_control_node_B.b_Kr_tmp_i <
           120; proc_control_node_B.b_Kr_tmp_i++) {
        b_Kv[b_SuJm_tmp] += b_Hv[120 * proc_control_node_B.i_obs +
          proc_control_node_B.b_Kr_tmp_i] * b_Kr[120 * proc_control_node_B.i33 +
          proc_control_node_B.b_Kr_tmp_i];
      }
    }
  }

  for (proc_control_node_B.i33 = 0; proc_control_node_B.i33 < 2880;
       proc_control_node_B.i33++) {
    b_Kr[proc_control_node_B.i33] = -b_Kr[proc_control_node_B.i33];
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
int32_T proc_control_nodeModelClass::proc_control_node_xpotrf_g(real_T b_A[625])
{
  int32_T b_ix;
  int32_T b_iy;
  int32_T b_k;
  int32_T d;
  int32_T ia;
  int32_T info;
  boolean_T exitg1;
  info = 0;
  proc_control_node_B.j_hc = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.j_hc < 25)) {
    proc_control_node_B.idxAjj = proc_control_node_B.j_hc * 25 +
      proc_control_node_B.j_hc;
    proc_control_node_B.ssq = 0.0;
    if (proc_control_node_B.j_hc >= 1) {
      b_ix = proc_control_node_B.j_hc;
      b_iy = proc_control_node_B.j_hc;
      for (b_k = 0; b_k < proc_control_node_B.j_hc; b_k++) {
        proc_control_node_B.ssq += b_A[b_ix] * b_A[b_iy];
        b_ix += 25;
        b_iy += 25;
      }
    }

    proc_control_node_B.ssq = b_A[proc_control_node_B.idxAjj] -
      proc_control_node_B.ssq;
    if (proc_control_node_B.ssq > 0.0) {
      proc_control_node_B.ssq = sqrt(proc_control_node_B.ssq);
      b_A[proc_control_node_B.idxAjj] = proc_control_node_B.ssq;
      if (proc_control_node_B.j_hc + 1 < 25) {
        if (proc_control_node_B.j_hc != 0) {
          b_ix = proc_control_node_B.j_hc;
          b_iy = ((proc_control_node_B.j_hc - 1) * 25 + proc_control_node_B.j_hc)
            + 2;
          for (b_k = proc_control_node_B.j_hc + 2; b_k <= b_iy; b_k += 25) {
            proc_control_node_B.c_c = -b_A[b_ix];
            proc_control_node_B.iy_h = proc_control_node_B.idxAjj + 1;
            d = (b_k - proc_control_node_B.j_hc) + 23;
            for (ia = b_k; ia <= d; ia++) {
              b_A[proc_control_node_B.iy_h] += b_A[ia - 1] *
                proc_control_node_B.c_c;
              proc_control_node_B.iy_h++;
            }

            b_ix += 25;
          }
        }

        proc_control_node_B.ssq = 1.0 / proc_control_node_B.ssq;
        b_ix = (proc_control_node_B.idxAjj - proc_control_node_B.j_hc) + 25;
        proc_control_node_B.idxAjj++;
        while (proc_control_node_B.idxAjj + 1 <= b_ix) {
          b_A[proc_control_node_B.idxAjj] *= proc_control_node_B.ssq;
          proc_control_node_B.idxAjj++;
        }
      }

      proc_control_node_B.j_hc++;
    } else {
      b_A[proc_control_node_B.idxAjj] = proc_control_node_B.ssq;
      info = proc_control_node_B.j_hc + 1;
      exitg1 = true;
    }
  }

  return info;
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_minimum(const real_T x[25])
{
  real_T ex;
  int32_T idx;
  int32_T k;
  boolean_T exitg1;
  if (!rtIsNaN(x[0])) {
    idx = 1;
  } else {
    idx = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 26)) {
      if (!rtIsNaN(x[k - 1])) {
        idx = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (idx == 0) {
    ex = x[0];
  } else {
    ex = x[idx - 1];
    while (idx + 1 <= 25) {
      if (ex > x[idx]) {
        ex = x[idx];
      }

      idx++;
    }
  }

  return ex;
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_n_mpc_checkhessian(real_T b_H[625],
  real_T L[625], real_T *BadH)
{
  boolean_T exitg1;
  boolean_T exitg2;
  boolean_T guard1 = false;
  boolean_T guard2 = false;
  *BadH = 0.0;
  memcpy(&L[0], &b_H[0], 625U * sizeof(real_T));
  proc_control_node_B.Tries = proc_control_node_xpotrf_g(L);
  guard1 = false;
  if (proc_control_node_B.Tries == 0) {
    proc_control_node_B.Tries_h = 0;
    for (proc_control_node_B.Tries = 0; proc_control_node_B.Tries < 25;
         proc_control_node_B.Tries++) {
      proc_control_node_B.varargin_1[proc_control_node_B.Tries] =
        L[proc_control_node_B.Tries_h];
      proc_control_node_B.Tries_h += 26;
    }

    if (proc_control_node_minimum(proc_control_node_B.varargin_1) >
        1.4901161193847656E-7) {
    } else {
      guard1 = true;
    }
  } else {
    guard1 = true;
  }

  if (guard1) {
    proc_control_node_B.normH = 0.0;
    proc_control_node_B.Tries = 0;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.Tries < 25)) {
      proc_control_node_B.s_g = 0.0;
      for (proc_control_node_B.Tries_h = 0; proc_control_node_B.Tries_h < 25;
           proc_control_node_B.Tries_h++) {
        proc_control_node_B.s_g += fabs(b_H[25 * proc_control_node_B.Tries_h +
          proc_control_node_B.Tries]);
      }

      if (rtIsNaN(proc_control_node_B.s_g)) {
        proc_control_node_B.normH = (rtNaN);
        exitg2 = true;
      } else {
        if (proc_control_node_B.s_g > proc_control_node_B.normH) {
          proc_control_node_B.normH = proc_control_node_B.s_g;
        }

        proc_control_node_B.Tries++;
      }
    }

    if (proc_control_node_B.normH >= 1.0E+10) {
      *BadH = 2.0;
    } else {
      proc_control_node_B.Tries = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.Tries <= 4)) {
        proc_control_node_B.normH = rt_powd_snf(10.0, static_cast<real_T>
          (proc_control_node_B.Tries)) * 1.4901161193847656E-7;
        memset(&proc_control_node_B.b_f[0], 0, 625U * sizeof(int8_T));
        proc_control_node_B.j_b = 0;
        for (proc_control_node_B.Tries_h = 0; proc_control_node_B.Tries_h < 25;
             proc_control_node_B.Tries_h++) {
          proc_control_node_B.b_f[proc_control_node_B.j_b] = 1;
          proc_control_node_B.j_b += 26;
        }

        for (proc_control_node_B.Tries_h = 0; proc_control_node_B.Tries_h < 625;
             proc_control_node_B.Tries_h++) {
          b_H[proc_control_node_B.Tries_h] += proc_control_node_B.normH *
            static_cast<real_T>
            (proc_control_node_B.b_f[proc_control_node_B.Tries_h]);
          L[proc_control_node_B.Tries_h] = b_H[proc_control_node_B.Tries_h];
        }

        proc_control_node_B.Tries_h = proc_control_node_xpotrf_g(L);
        guard2 = false;
        if (proc_control_node_B.Tries_h == 0) {
          proc_control_node_B.j_b = 0;
          for (proc_control_node_B.Tries_h = 0; proc_control_node_B.Tries_h < 25;
               proc_control_node_B.Tries_h++) {
            proc_control_node_B.varargin_1[proc_control_node_B.Tries_h] =
              L[proc_control_node_B.j_b];
            proc_control_node_B.j_b += 26;
          }

          if (proc_control_node_minimum(proc_control_node_B.varargin_1) >
              1.4901161193847656E-7) {
            *BadH = 1.0;
            exitg1 = true;
          } else {
            guard2 = true;
          }
        } else {
          guard2 = true;
        }

        if (guard2) {
          *BadH = 3.0;
          proc_control_node_B.Tries++;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_trisolve(const real_T b_A
  [625], real_T b_B[625])
{
  int32_T i;
  int32_T j;
  int32_T k;
  int32_T tmp;
  int32_T tmp_0;
  for (j = 0; j < 25; j++) {
    proc_control_node_B.jBcol_j = 25 * j;
    for (k = 0; k < 25; k++) {
      proc_control_node_B.kAcol = 25 * k;
      tmp = k + proc_control_node_B.jBcol_j;
      proc_control_node_B.d5 = b_B[tmp];
      if (proc_control_node_B.d5 != 0.0) {
        b_B[tmp] = proc_control_node_B.d5 / b_A[k + proc_control_node_B.kAcol];
        for (i = k + 2; i < 26; i++) {
          tmp_0 = (i + proc_control_node_B.jBcol_j) - 1;
          b_B[tmp_0] -= b_A[(i + proc_control_node_B.kAcol) - 1] * b_B[tmp];
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_Unconstrained(const real_T
  b_Hinv[625], const real_T f[25], real_T x[25], int16_T n)
{
  int32_T i;
  proc_control_node_B.i_da = 1;
  while (proc_control_node_B.i_da - 1 <= n - 1) {
    proc_control_node_B.b_Hinv = 0.0;
    for (i = 0; i < 25; i++) {
      proc_control_node_B.b_Hinv += -b_Hinv[(25 * i + static_cast<int16_T>
        (proc_control_node_B.i_da)) - 1] * f[i];
    }

    x[static_cast<int16_T>(proc_control_node_B.i_da) - 1] =
      proc_control_node_B.b_Hinv;
    proc_control_node_B.i_da++;
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_norm(const real_T x[25])
{
  real_T y;
  int32_T k;
  y = 0.0;
  proc_control_node_B.scale_l = 3.3121686421112381E-170;
  for (k = 0; k < 25; k++) {
    proc_control_node_B.absxk_i = fabs(x[k]);
    if (proc_control_node_B.absxk_i > proc_control_node_B.scale_l) {
      proc_control_node_B.t_az = proc_control_node_B.scale_l /
        proc_control_node_B.absxk_i;
      y = y * proc_control_node_B.t_az * proc_control_node_B.t_az + 1.0;
      proc_control_node_B.scale_l = proc_control_node_B.absxk_i;
    } else {
      proc_control_node_B.t_az = proc_control_node_B.absxk_i /
        proc_control_node_B.scale_l;
      y += proc_control_node_B.t_az * proc_control_node_B.t_az;
    }
  }

  return proc_control_node_B.scale_l * sqrt(y);
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_abs(const real_T x[25],
  real_T y[25])
{
  int32_T k;
  for (k = 0; k < 25; k++) {
    y[k] = fabs(x[k]);
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_maximum(const real_T x[25])
{
  real_T ex;
  int32_T k;
  boolean_T exitg1;
  if (!rtIsNaN(x[0])) {
    proc_control_node_B.idx_o = 1;
  } else {
    proc_control_node_B.idx_o = 0;
    k = 2;
    exitg1 = false;
    while ((!exitg1) && (k < 26)) {
      if (!rtIsNaN(x[k - 1])) {
        proc_control_node_B.idx_o = k;
        exitg1 = true;
      } else {
        k++;
      }
    }
  }

  if (proc_control_node_B.idx_o == 0) {
    ex = x[0];
  } else {
    ex = x[proc_control_node_B.idx_o - 1];
    while (proc_control_node_B.idx_o + 1 <= 25) {
      if (ex < x[proc_control_node_B.idx_o]) {
        ex = x[proc_control_node_B.idx_o];
      }

      proc_control_node_B.idx_o++;
    }
  }

  return ex;
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_abs_b(const real_T x[48],
  real_T y[48])
{
  int32_T k;
  for (k = 0; k < 48; k++) {
    y[k] = fabs(x[k]);
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_maximum2(const real_T x[48],
  real_T y, real_T ex[48])
{
  int32_T k;
  for (k = 0; k < 48; k++) {
    proc_control_node_B.u0_o = x[k];
    if ((proc_control_node_B.u0_o > y) || rtIsNaN(y)) {
      ex[k] = proc_control_node_B.u0_o;
    } else {
      ex[k] = y;
    }
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_xnrm2_p(int32_T n, const
  real_T x[625], int32_T ix0)
{
  real_T y;
  y = 0.0;
  if (n >= 1) {
    if (n == 1) {
      y = fabs(x[ix0 - 1]);
    } else {
      proc_control_node_B.scale_c = 3.3121686421112381E-170;
      proc_control_node_B.kend = (ix0 + n) - 1;
      proc_control_node_B.k_j5 = ix0;
      while (proc_control_node_B.k_j5 <= proc_control_node_B.kend) {
        proc_control_node_B.absxk_c = fabs(x[proc_control_node_B.k_j5 - 1]);
        if (proc_control_node_B.absxk_c > proc_control_node_B.scale_c) {
          proc_control_node_B.t_a = proc_control_node_B.scale_c /
            proc_control_node_B.absxk_c;
          y = y * proc_control_node_B.t_a * proc_control_node_B.t_a + 1.0;
          proc_control_node_B.scale_c = proc_control_node_B.absxk_c;
        } else {
          proc_control_node_B.t_a = proc_control_node_B.absxk_c /
            proc_control_node_B.scale_c;
          y += proc_control_node_B.t_a * proc_control_node_B.t_a;
        }

        proc_control_node_B.k_j5++;
      }

      y = proc_control_node_B.scale_c * sqrt(y);
    }
  }

  return y;
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_xgemv_b(int32_T b_m, int32_T
  n, const real_T b_A[625], int32_T ia0, const real_T x[625], int32_T ix0,
  real_T y[25])
{
  if ((b_m != 0) && (n != 0)) {
    proc_control_node_B.b_iy_h = 0;
    while (proc_control_node_B.b_iy_h <= n - 1) {
      y[proc_control_node_B.b_iy_h] = 0.0;
      proc_control_node_B.b_iy_h++;
    }

    proc_control_node_B.b_iy_h = 0;
    proc_control_node_B.b_nt = (n - 1) * 25 + ia0;
    proc_control_node_B.iac = ia0;
    while (proc_control_node_B.iac <= proc_control_node_B.b_nt) {
      proc_control_node_B.ix_l = ix0;
      proc_control_node_B.c_j = 0.0;
      proc_control_node_B.d_kr = (proc_control_node_B.iac + b_m) - 1;
      proc_control_node_B.ia_b = proc_control_node_B.iac;
      while (proc_control_node_B.ia_b <= proc_control_node_B.d_kr) {
        proc_control_node_B.c_j += b_A[proc_control_node_B.ia_b - 1] *
          x[proc_control_node_B.ix_l - 1];
        proc_control_node_B.ix_l++;
        proc_control_node_B.ia_b++;
      }

      y[proc_control_node_B.b_iy_h] += proc_control_node_B.c_j;
      proc_control_node_B.b_iy_h++;
      proc_control_node_B.iac += 25;
    }
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_xgerc_g(int32_T b_m, int32_T
  n, real_T alpha1, int32_T ix0, const real_T y[25], real_T b_A[625], int32_T
  ia0)
{
  if (!(alpha1 == 0.0)) {
    proc_control_node_B.jA_i = ia0 - 1;
    proc_control_node_B.jy = 0;
    proc_control_node_B.j_l = 0;
    while (proc_control_node_B.j_l <= n - 1) {
      if (y[proc_control_node_B.jy] != 0.0) {
        proc_control_node_B.temp_h = y[proc_control_node_B.jy] * alpha1;
        proc_control_node_B.ix_e = ix0;
        proc_control_node_B.b_l = b_m + proc_control_node_B.jA_i;
        proc_control_node_B.ijA = proc_control_node_B.jA_i;
        while (proc_control_node_B.ijA + 1 <= proc_control_node_B.b_l) {
          b_A[proc_control_node_B.ijA] += b_A[proc_control_node_B.ix_e - 1] *
            proc_control_node_B.temp_h;
          proc_control_node_B.ix_e++;
          proc_control_node_B.ijA++;
        }
      }

      proc_control_node_B.jy++;
      proc_control_node_B.jA_i += 25;
      proc_control_node_B.j_l++;
    }
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_xzlarf_o(int32_T b_m,
  int32_T n, int32_T iv0, real_T tau, real_T b_C[625], int32_T ic0, real_T work
  [25])
{
  int32_T exitg1;
  boolean_T exitg2;
  if (tau != 0.0) {
    proc_control_node_B.lastv_e = b_m;
    proc_control_node_B.lastc_e = iv0 + b_m;
    while ((proc_control_node_B.lastv_e > 0) && (b_C[proc_control_node_B.lastc_e
            - 2] == 0.0)) {
      proc_control_node_B.lastv_e--;
      proc_control_node_B.lastc_e--;
    }

    proc_control_node_B.lastc_e = n;
    exitg2 = false;
    while ((!exitg2) && (proc_control_node_B.lastc_e > 0)) {
      proc_control_node_B.coltop_k = (proc_control_node_B.lastc_e - 1) * 25 +
        ic0;
      proc_control_node_B.ia_k4 = proc_control_node_B.coltop_k;
      do {
        exitg1 = 0;
        if (proc_control_node_B.ia_k4 <= (proc_control_node_B.coltop_k +
             proc_control_node_B.lastv_e) - 1) {
          if (b_C[proc_control_node_B.ia_k4 - 1] != 0.0) {
            exitg1 = 1;
          } else {
            proc_control_node_B.ia_k4++;
          }
        } else {
          proc_control_node_B.lastc_e--;
          exitg1 = 2;
        }
      } while (exitg1 == 0);

      if (exitg1 == 1) {
        exitg2 = true;
      }
    }
  } else {
    proc_control_node_B.lastv_e = 0;
    proc_control_node_B.lastc_e = 0;
  }

  if (proc_control_node_B.lastv_e > 0) {
    proc_control_node_xgemv_b(proc_control_node_B.lastv_e,
      proc_control_node_B.lastc_e, b_C, ic0, b_C, iv0, work);
    proc_control_node_xgerc_g(proc_control_node_B.lastv_e,
      proc_control_node_B.lastc_e, -tau, iv0, work, b_C, ic0);
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_qrf_h(real_T b_A[625],
  int32_T ia0, int32_T b_m, int32_T n, int32_T nfxd, real_T tau[25])
{
  memset(&proc_control_node_B.work[0], 0, 25U * sizeof(real_T));
  proc_control_node_B.i_c = 0;
  while (proc_control_node_B.i_c <= nfxd - 1) {
    proc_control_node_B.ii_i = ((proc_control_node_B.i_c * 25 + ia0) +
      proc_control_node_B.i_c) - 1;
    proc_control_node_B.mmi_tmp_j = b_m - proc_control_node_B.i_c;
    if (proc_control_node_B.i_c + 1 < b_m) {
      proc_control_node_B.b_atmp_h = b_A[proc_control_node_B.ii_i];
      tau[proc_control_node_B.i_c] = 0.0;
      if (proc_control_node_B.mmi_tmp_j > 0) {
        proc_control_node_B.beta1_o = proc_control_node_xnrm2_p
          (proc_control_node_B.mmi_tmp_j - 1, b_A, proc_control_node_B.ii_i + 2);
        if (proc_control_node_B.beta1_o != 0.0) {
          proc_control_node_B.beta1_o = proc_control_node_rt_hypotd_snf
            (b_A[proc_control_node_B.ii_i], proc_control_node_B.beta1_o);
          if (b_A[proc_control_node_B.ii_i] >= 0.0) {
            proc_control_node_B.beta1_o = -proc_control_node_B.beta1_o;
          }

          if (fabs(proc_control_node_B.beta1_o) < 1.0020841800044864E-292) {
            proc_control_node_B.knt_m = -1;
            proc_control_node_B.mmip1_g = proc_control_node_B.ii_i +
              proc_control_node_B.mmi_tmp_j;
            do {
              proc_control_node_B.knt_m++;
              proc_control_node_B.b_k_n = proc_control_node_B.ii_i + 1;
              while (proc_control_node_B.b_k_n + 1 <=
                     proc_control_node_B.mmip1_g) {
                b_A[proc_control_node_B.b_k_n] *= 9.9792015476736E+291;
                proc_control_node_B.b_k_n++;
              }

              proc_control_node_B.beta1_o *= 9.9792015476736E+291;
              proc_control_node_B.b_atmp_h *= 9.9792015476736E+291;
            } while (!(fabs(proc_control_node_B.beta1_o) >=
                       1.0020841800044864E-292));

            proc_control_node_B.beta1_o = proc_control_node_rt_hypotd_snf
              (proc_control_node_B.b_atmp_h, proc_control_node_xnrm2_p
               (proc_control_node_B.mmi_tmp_j - 1, b_A, proc_control_node_B.ii_i
                + 2));
            if (proc_control_node_B.b_atmp_h >= 0.0) {
              proc_control_node_B.beta1_o = -proc_control_node_B.beta1_o;
            }

            tau[proc_control_node_B.i_c] = (proc_control_node_B.beta1_o -
              proc_control_node_B.b_atmp_h) / proc_control_node_B.beta1_o;
            proc_control_node_B.b_atmp_h = 1.0 / (proc_control_node_B.b_atmp_h -
              proc_control_node_B.beta1_o);
            proc_control_node_B.b_k_n = proc_control_node_B.ii_i + 1;
            while (proc_control_node_B.b_k_n + 1 <= proc_control_node_B.mmip1_g)
            {
              b_A[proc_control_node_B.b_k_n] *= proc_control_node_B.b_atmp_h;
              proc_control_node_B.b_k_n++;
            }

            proc_control_node_B.mmip1_g = 0;
            while (proc_control_node_B.mmip1_g <= proc_control_node_B.knt_m) {
              proc_control_node_B.beta1_o *= 1.0020841800044864E-292;
              proc_control_node_B.mmip1_g++;
            }

            proc_control_node_B.b_atmp_h = proc_control_node_B.beta1_o;
          } else {
            tau[proc_control_node_B.i_c] = (proc_control_node_B.beta1_o -
              b_A[proc_control_node_B.ii_i]) / proc_control_node_B.beta1_o;
            proc_control_node_B.b_atmp_h = 1.0 / (b_A[proc_control_node_B.ii_i]
              - proc_control_node_B.beta1_o);
            proc_control_node_B.knt_m = proc_control_node_B.ii_i +
              proc_control_node_B.mmi_tmp_j;
            proc_control_node_B.mmip1_g = proc_control_node_B.ii_i + 1;
            while (proc_control_node_B.mmip1_g + 1 <= proc_control_node_B.knt_m)
            {
              b_A[proc_control_node_B.mmip1_g] *= proc_control_node_B.b_atmp_h;
              proc_control_node_B.mmip1_g++;
            }

            proc_control_node_B.b_atmp_h = proc_control_node_B.beta1_o;
          }
        }
      }

      b_A[proc_control_node_B.ii_i] = proc_control_node_B.b_atmp_h;
    } else {
      tau[proc_control_node_B.i_c] = 0.0;
    }

    if (proc_control_node_B.i_c + 1 < n) {
      proc_control_node_B.b_atmp_h = b_A[proc_control_node_B.ii_i];
      b_A[proc_control_node_B.ii_i] = 1.0;
      proc_control_node_xzlarf_o(proc_control_node_B.mmi_tmp_j, (n -
        proc_control_node_B.i_c) - 1, proc_control_node_B.ii_i + 1,
        tau[proc_control_node_B.i_c], b_A, proc_control_node_B.ii_i + 26,
        proc_control_node_B.work);
      b_A[proc_control_node_B.ii_i] = proc_control_node_B.b_atmp_h;
    }

    proc_control_node_B.i_c++;
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_xgeqrf_m(real_T b_A[625],
  real_T tau[25])
{
  memset(&tau[0], 0, 25U * sizeof(real_T));
  proc_control_node_qrf_h(b_A, 1, 25, 25, 25, tau);
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_xorgqr_f(int32_T b_m,
  int32_T n, int32_T k, real_T b_A[625], int32_T ia0, const real_T tau[25],
  int32_T itau0)
{
  if (n >= 1) {
    proc_control_node_B.itau = k;
    while (proc_control_node_B.itau <= n - 1) {
      proc_control_node_B.i_ei = (proc_control_node_B.itau * 25 + ia0) - 1;
      proc_control_node_B.iaii = 0;
      while (proc_control_node_B.iaii <= b_m - 1) {
        b_A[proc_control_node_B.i_ei + proc_control_node_B.iaii] = 0.0;
        proc_control_node_B.iaii++;
      }

      b_A[proc_control_node_B.i_ei + proc_control_node_B.itau] = 1.0;
      proc_control_node_B.itau++;
    }

    proc_control_node_B.itau = (itau0 + k) - 2;
    memset(&proc_control_node_B.work_d[0], 0, 25U * sizeof(real_T));
    proc_control_node_B.i_ei = k;
    while (proc_control_node_B.i_ei >= 1) {
      proc_control_node_B.iaii = (((proc_control_node_B.i_ei - 1) * 25 + ia0) +
        proc_control_node_B.i_ei) - 1;
      if (proc_control_node_B.i_ei < n) {
        b_A[proc_control_node_B.iaii - 1] = 1.0;
        proc_control_node_xzlarf_o((b_m - proc_control_node_B.i_ei) + 1, n -
          proc_control_node_B.i_ei, proc_control_node_B.iaii,
          tau[proc_control_node_B.itau], b_A, proc_control_node_B.iaii + 25,
          proc_control_node_B.work_d);
      }

      if (proc_control_node_B.i_ei < b_m) {
        proc_control_node_B.b_pw = (proc_control_node_B.iaii + b_m) -
          proc_control_node_B.i_ei;
        proc_control_node_B.b_k_h = proc_control_node_B.iaii;
        while (proc_control_node_B.b_k_h + 1 <= proc_control_node_B.b_pw) {
          b_A[proc_control_node_B.b_k_h] *= -tau[proc_control_node_B.itau];
          proc_control_node_B.b_k_h++;
        }
      }

      b_A[proc_control_node_B.iaii - 1] = 1.0 - tau[proc_control_node_B.itau];
      proc_control_node_B.b_pw = 0;
      while (proc_control_node_B.b_pw <= proc_control_node_B.i_ei - 2) {
        b_A[(proc_control_node_B.iaii - proc_control_node_B.b_pw) - 2] = 0.0;
        proc_control_node_B.b_pw++;
      }

      proc_control_node_B.itau--;
      proc_control_node_B.i_ei--;
    }
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_qr(const real_T b_A[625],
  real_T Q[625], real_T R[625])
{
  memcpy(&proc_control_node_B.c_A[0], &b_A[0], 625U * sizeof(real_T));
  proc_control_node_xgeqrf_m(proc_control_node_B.c_A, proc_control_node_B.tau);
  for (proc_control_node_B.j_ml = 0; proc_control_node_B.j_ml < 25;
       proc_control_node_B.j_ml++) {
    proc_control_node_B.i_ii = 0;
    while (proc_control_node_B.i_ii <= proc_control_node_B.j_ml) {
      R[proc_control_node_B.i_ii + 25 * proc_control_node_B.j_ml] =
        proc_control_node_B.c_A[25 * proc_control_node_B.j_ml +
        proc_control_node_B.i_ii];
      proc_control_node_B.i_ii++;
    }

    proc_control_node_B.i_ii = proc_control_node_B.j_ml + 1;
    while (proc_control_node_B.i_ii + 1 < 26) {
      R[proc_control_node_B.i_ii + 25 * proc_control_node_B.j_ml] = 0.0;
      proc_control_node_B.i_ii++;
    }
  }

  proc_control_node_xorgqr_f(25, 25, 25, proc_control_node_B.c_A, 1,
    proc_control_node_B.tau, 1);
  proc_control_node_B.i_ii = 0;
  for (proc_control_node_B.j_ml = 0; proc_control_node_B.j_ml < 25;
       proc_control_node_B.j_ml++) {
    memcpy(&Q[proc_control_node_B.i_ii],
           &proc_control_node_B.c_A[proc_control_node_B.i_ii], 25U * sizeof
           (real_T));
    proc_control_node_B.i_ii += 25;
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_KWIKfactor(const real_T
  b_Ac[1200], const int16_T iC[48], int16_T nA, const real_T b_Linv[625], real_T
  b_D[625], real_T b_H[625], int16_T n, real_T RLinv[625], real_T *Status)
{
  int32_T exitg1;
  int16_T b_j;
  int16_T c_k;
  *Status = 1.0;
  memset(&RLinv[0], 0, 625U * sizeof(real_T));
  proc_control_node_B.i_mw = 1;
  while (proc_control_node_B.i_mw - 1 <= nA - 1) {
    proc_control_node_B.iC_b = iC[static_cast<int16_T>(proc_control_node_B.i_mw)
      - 1];
    for (proc_control_node_B.RLinv_tmp_tmp = 0;
         proc_control_node_B.RLinv_tmp_tmp < 25;
         proc_control_node_B.RLinv_tmp_tmp++) {
      proc_control_node_B.f_i_o = proc_control_node_B.RLinv_tmp_tmp + 25 * (
        static_cast<int16_T>(proc_control_node_B.i_mw) - 1);
      RLinv[proc_control_node_B.f_i_o] = 0.0;
      for (proc_control_node_B.RLinv_tmp = 0; proc_control_node_B.RLinv_tmp < 25;
           proc_control_node_B.RLinv_tmp++) {
        RLinv[proc_control_node_B.f_i_o] += b_Ac[(48 *
          proc_control_node_B.RLinv_tmp + proc_control_node_B.iC_b) - 1] *
          b_Linv[25 * proc_control_node_B.RLinv_tmp +
          proc_control_node_B.RLinv_tmp_tmp];
      }
    }

    proc_control_node_B.i_mw++;
  }

  proc_control_node_qr(RLinv, proc_control_node_B.QQ, proc_control_node_B.RR);
  proc_control_node_B.i_mw = 1;
  do {
    exitg1 = 0;
    if (proc_control_node_B.i_mw - 1 <= nA - 1) {
      if (fabs(proc_control_node_B.RR[((static_cast<int16_T>
             (proc_control_node_B.i_mw) - 1) * 25 + static_cast<int16_T>
            (proc_control_node_B.i_mw)) - 1]) < 1.0E-12) {
        *Status = -2.0;
        exitg1 = 1;
      } else {
        proc_control_node_B.i_mw++;
      }
    } else {
      proc_control_node_B.i_mw = 1;
      while (proc_control_node_B.i_mw - 1 <= n - 1) {
        proc_control_node_B.f_i_o = 1;
        while (proc_control_node_B.f_i_o - 1 <= n - 1) {
          proc_control_node_B.b_Linv_a = 0.0;
          for (proc_control_node_B.RLinv_tmp_tmp = 0;
               proc_control_node_B.RLinv_tmp_tmp < 25;
               proc_control_node_B.RLinv_tmp_tmp++) {
            proc_control_node_B.b_Linv_a += b_Linv[(static_cast<int16_T>
              (proc_control_node_B.i_mw) - 1) * 25 +
              proc_control_node_B.RLinv_tmp_tmp] * proc_control_node_B.QQ[(
              static_cast<int16_T>(proc_control_node_B.f_i_o) - 1) * 25 +
              proc_control_node_B.RLinv_tmp_tmp];
          }

          proc_control_node_B.TL[(static_cast<int16_T>(proc_control_node_B.i_mw)
            + 25 * (static_cast<int16_T>(proc_control_node_B.f_i_o) - 1)) - 1] =
            proc_control_node_B.b_Linv_a;
          proc_control_node_B.f_i_o++;
        }

        proc_control_node_B.i_mw++;
      }

      memset(&RLinv[0], 0, 625U * sizeof(real_T));
      for (b_j = nA; b_j > 0; b_j = static_cast<int16_T>(b_j - 1)) {
        proc_control_node_B.RLinv_tmp_tmp = 25 * (b_j - 1);
        proc_control_node_B.f_i_o = (b_j + proc_control_node_B.RLinv_tmp_tmp) -
          1;
        RLinv[proc_control_node_B.f_i_o] = 1.0;
        for (c_k = b_j; c_k <= nA; c_k = static_cast<int16_T>(c_k + 1)) {
          proc_control_node_B.RLinv_tmp = ((c_k - 1) * 25 + b_j) - 1;
          RLinv[proc_control_node_B.RLinv_tmp] /=
            proc_control_node_B.RR[proc_control_node_B.f_i_o];
        }

        if (b_j > 1) {
          proc_control_node_B.i_mw = 1;
          while (proc_control_node_B.i_mw - 1 <= b_j - 2) {
            for (c_k = b_j; c_k <= nA; c_k = static_cast<int16_T>(c_k + 1)) {
              proc_control_node_B.f_i_o = (c_k - 1) * 25;
              proc_control_node_B.RLinv_tmp = (proc_control_node_B.f_i_o +
                static_cast<int16_T>(proc_control_node_B.i_mw)) - 1;
              RLinv[proc_control_node_B.RLinv_tmp] -= proc_control_node_B.RR
                [(proc_control_node_B.RLinv_tmp_tmp + static_cast<int16_T>
                  (proc_control_node_B.i_mw)) - 1] * RLinv
                [(proc_control_node_B.f_i_o + b_j) - 1];
            }

            proc_control_node_B.i_mw++;
          }
        }
      }

      proc_control_node_B.i_mw = 1;
      while (proc_control_node_B.i_mw - 1 <= n - 1) {
        for (b_j = static_cast<int16_T>(proc_control_node_B.i_mw); b_j <= n; b_j
             = static_cast<int16_T>(b_j + 1)) {
          proc_control_node_B.RLinv_tmp_tmp = (static_cast<int16_T>
            (proc_control_node_B.i_mw) + 25 * (b_j - 1)) - 1;
          b_H[proc_control_node_B.RLinv_tmp_tmp] = 0.0;
          proc_control_node_B.RLinv_tmp = nA + 1;
          if (nA + 1 > 32767) {
            proc_control_node_B.RLinv_tmp = 32767;
          }

          for (c_k = static_cast<int16_T>(proc_control_node_B.RLinv_tmp); c_k <=
               n; c_k = static_cast<int16_T>(c_k + 1)) {
            proc_control_node_B.RLinv_tmp = (c_k - 1) * 25;
            b_H[proc_control_node_B.RLinv_tmp_tmp] -= proc_control_node_B.TL
              [(proc_control_node_B.RLinv_tmp + static_cast<int16_T>
                (proc_control_node_B.i_mw)) - 1] * proc_control_node_B.TL
              [(proc_control_node_B.RLinv_tmp + b_j) - 1];
          }

          b_H[(b_j + 25 * (static_cast<int16_T>(proc_control_node_B.i_mw) - 1))
            - 1] = b_H[proc_control_node_B.RLinv_tmp_tmp];
        }

        proc_control_node_B.i_mw++;
      }

      proc_control_node_B.i_mw = 1;
      while (proc_control_node_B.i_mw - 1 <= nA - 1) {
        proc_control_node_B.f_i_o = 1;
        while (proc_control_node_B.f_i_o - 1 <= n - 1) {
          proc_control_node_B.RLinv_tmp_tmp = (static_cast<int16_T>
            (proc_control_node_B.f_i_o) + 25 * (static_cast<int16_T>
            (proc_control_node_B.i_mw) - 1)) - 1;
          b_D[proc_control_node_B.RLinv_tmp_tmp] = 0.0;
          for (b_j = static_cast<int16_T>(proc_control_node_B.i_mw); b_j <= nA;
               b_j = static_cast<int16_T>(b_j + 1)) {
            proc_control_node_B.RLinv_tmp = (b_j - 1) * 25;
            b_D[proc_control_node_B.RLinv_tmp_tmp] += proc_control_node_B.TL
              [(proc_control_node_B.RLinv_tmp + static_cast<int16_T>
                (proc_control_node_B.f_i_o)) - 1] * RLinv
              [(proc_control_node_B.RLinv_tmp + static_cast<int16_T>
                (proc_control_node_B.i_mw)) - 1];
          }

          proc_control_node_B.f_i_o++;
        }

        proc_control_node_B.i_mw++;
      }

      exitg1 = 1;
    }
  } while (exitg1 == 0);
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_mtimes_a(const real_T b_A
  [25], const real_T b_B[25])
{
  real_T b_C;
  int32_T k;
  b_C = 0.0;
  for (k = 0; k < 25; k++) {
    b_C += b_A[k] * b_B[k];
  }

  return b_C;
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_nod_DropConstraint(int16_T kDrop,
  int16_T iA[48], int16_T *nA, int16_T iC[48])
{
  int32_T tmp;
  int16_T i;
  iA[iC[kDrop - 1] - 1] = 0;
  if (kDrop < *nA) {
    tmp = *nA - 1;
    if (*nA - 1 < -32768) {
      tmp = -32768;
    }

    for (i = kDrop; i <= static_cast<int16_T>(tmp); i = static_cast<int16_T>(i +
          1)) {
      iC[i - 1] = iC[i];
    }
  }

  iC[*nA - 1] = 0;
  tmp = *nA - 1;
  if (*nA - 1 < -32768) {
    tmp = -32768;
  }

  *nA = static_cast<int16_T>(tmp);
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_qpkwik(const real_T b_Linv
  [625], const real_T b_Hinv[625], const real_T f[25], const real_T b_Ac[1200],
  const real_T b[48], int16_T iA[48], int16_T maxiter, real_T FeasTol, real_T x
  [25], real_T lambda[48], real_T *status)
{
  int32_T exitg1;
  int32_T exitg3;
  int16_T kDrop;
  int16_T kNext;
  int16_T nA;
  int16_T tmp;
  int16_T tmp_0;
  uint16_T b_x;
  uint16_T q;
  boolean_T ColdReset;
  boolean_T DualFeasible;
  boolean_T cTolComputed;
  boolean_T exitg2;
  boolean_T exitg4;
  boolean_T guard1 = false;
  boolean_T guard2 = false;
  *status = 1.0;
  memset(&lambda[0], 0, 48U * sizeof(real_T));
  memset(&x[0], 0, 25U * sizeof(real_T));
  memset(&proc_control_node_B.r[0], 0, 25U * sizeof(real_T));
  proc_control_node_B.rMin = 0.0;
  cTolComputed = false;
  for (proc_control_node_B.i_dk = 0; proc_control_node_B.i_dk < 48;
       proc_control_node_B.i_dk++) {
    proc_control_node_B.cTol[proc_control_node_B.i_dk] = 1.0;
    proc_control_node_B.iC[proc_control_node_B.i_dk] = 0;
  }

  nA = 0;
  for (proc_control_node_B.i_dk = 0; proc_control_node_B.i_dk < 48;
       proc_control_node_B.i_dk++) {
    if (iA[proc_control_node_B.i_dk] == 1) {
      proc_control_node_B.U_tmp = nA + 1;
      if (nA + 1 > 32767) {
        proc_control_node_B.U_tmp = 32767;
      }

      nA = static_cast<int16_T>(proc_control_node_B.U_tmp);
      proc_control_node_B.iC[static_cast<int16_T>(proc_control_node_B.U_tmp) - 1]
        = static_cast<int16_T>(proc_control_node_B.i_dk + 1);
    }
  }

  guard1 = false;
  if (nA > 0) {
    memset(&proc_control_node_B.Opt[0], 0, 50U * sizeof(real_T));
    for (proc_control_node_B.i_dk = 0; proc_control_node_B.i_dk < 25;
         proc_control_node_B.i_dk++) {
      proc_control_node_B.Rhs[proc_control_node_B.i_dk] =
        f[proc_control_node_B.i_dk];
      proc_control_node_B.Rhs[proc_control_node_B.i_dk + 25] = 0.0;
    }

    DualFeasible = false;
    proc_control_node_B.U_tmp = 3 * nA;
    if (proc_control_node_B.U_tmp > 32767) {
      proc_control_node_B.U_tmp = 32767;
    }

    if (static_cast<int16_T>(proc_control_node_B.U_tmp) > 50) {
      kNext = static_cast<int16_T>(proc_control_node_B.U_tmp);
    } else {
      kNext = 50;
    }

    q = static_cast<uint16_T>(kNext / 10U);
    b_x = static_cast<uint16_T>(static_cast<uint32_T>(kNext) - q * 10);
    if ((b_x > 0) && (b_x >= 5)) {
      q = static_cast<uint16_T>(q + 1);
    }

    ColdReset = false;
    do {
      exitg3 = 0;
      if ((!DualFeasible) && (nA > 0) && (static_cast<int32_T>(*status) <=
           maxiter)) {
        proc_control_node_KWIKfactor(b_Ac, proc_control_node_B.iC, nA, b_Linv,
          proc_control_node_B.b_D, proc_control_node_B.b_H, 25,
          proc_control_node_B.RLinv, &proc_control_node_B.Xnorm0);
        if (proc_control_node_B.Xnorm0 < 0.0) {
          if (ColdReset) {
            *status = -2.0;
            exitg3 = 2;
          } else {
            nA = 0;
            memset(&iA[0], 0, 48U * sizeof(int16_T));
            memset(&proc_control_node_B.iC[0], 0, 48U * sizeof(int16_T));
            ColdReset = true;
          }
        } else {
          proc_control_node_B.i_dk = 1;
          while (proc_control_node_B.i_dk - 1 <= nA - 1) {
            proc_control_node_B.U_tmp = static_cast<int16_T>
              (proc_control_node_B.i_dk) + 25;
            if (static_cast<int16_T>(proc_control_node_B.i_dk) + 25 > 32767) {
              proc_control_node_B.U_tmp = 32767;
            }

            proc_control_node_B.Rhs[proc_control_node_B.U_tmp - 1] =
              b[proc_control_node_B.iC[static_cast<int16_T>
              (proc_control_node_B.i_dk) - 1] - 1];
            for (kNext = static_cast<int16_T>(proc_control_node_B.i_dk); kNext <=
                 nA; kNext = static_cast<int16_T>(kNext + 1)) {
              proc_control_node_B.U_tmp = (kNext + 25 * (static_cast<int16_T>
                (proc_control_node_B.i_dk) - 1)) - 1;
              proc_control_node_B.U[proc_control_node_B.U_tmp] = 0.0;
              proc_control_node_B.lambda_tmp_tmp = 1;
              while (proc_control_node_B.lambda_tmp_tmp - 1 <= nA - 1) {
                proc_control_node_B.U_tmp_c = (static_cast<int16_T>
                  (proc_control_node_B.lambda_tmp_tmp) - 1) * 25;
                proc_control_node_B.U[proc_control_node_B.U_tmp] +=
                  proc_control_node_B.RLinv[(proc_control_node_B.U_tmp_c + kNext)
                  - 1] * proc_control_node_B.RLinv[(proc_control_node_B.U_tmp_c
                  + static_cast<int16_T>(proc_control_node_B.i_dk)) - 1];
                proc_control_node_B.lambda_tmp_tmp++;
              }

              proc_control_node_B.U[(static_cast<int16_T>
                (proc_control_node_B.i_dk) + 25 * (kNext - 1)) - 1] =
                proc_control_node_B.U[proc_control_node_B.U_tmp];
            }

            proc_control_node_B.i_dk++;
          }

          for (proc_control_node_B.i_dk = 0; proc_control_node_B.i_dk < 25;
               proc_control_node_B.i_dk++) {
            proc_control_node_B.Xnorm0 = 0.0;
            for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 25;
                 proc_control_node_B.U_tmp++) {
              proc_control_node_B.Xnorm0 +=
                proc_control_node_B.b_H[proc_control_node_B.i_dk + 25 *
                proc_control_node_B.U_tmp] *
                proc_control_node_B.Rhs[proc_control_node_B.U_tmp];
            }

            proc_control_node_B.Opt[proc_control_node_B.i_dk] =
              proc_control_node_B.Xnorm0;
            proc_control_node_B.lambda_tmp_tmp = 1;
            while (proc_control_node_B.lambda_tmp_tmp - 1 <= nA - 1) {
              proc_control_node_B.U_tmp = static_cast<int16_T>
                (proc_control_node_B.lambda_tmp_tmp) + 25;
              if (static_cast<int16_T>(proc_control_node_B.lambda_tmp_tmp) + 25 >
                  32767) {
                proc_control_node_B.U_tmp = 32767;
              }

              proc_control_node_B.Opt[proc_control_node_B.i_dk] +=
                proc_control_node_B.b_D[(static_cast<int16_T>
                (proc_control_node_B.lambda_tmp_tmp) - 1) * 25 +
                proc_control_node_B.i_dk] *
                proc_control_node_B.Rhs[proc_control_node_B.U_tmp - 1];
              proc_control_node_B.lambda_tmp_tmp++;
            }
          }

          proc_control_node_B.i_dk = 1;
          while (proc_control_node_B.i_dk - 1 <= nA - 1) {
            proc_control_node_B.Xnorm0 = 0.0;
            for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 25;
                 proc_control_node_B.U_tmp++) {
              proc_control_node_B.Xnorm0 += proc_control_node_B.b_D[(
                static_cast<int16_T>(proc_control_node_B.i_dk) - 1) * 25 +
                proc_control_node_B.U_tmp] *
                proc_control_node_B.Rhs[proc_control_node_B.U_tmp];
            }

            proc_control_node_B.U_tmp = static_cast<int16_T>
              (proc_control_node_B.i_dk) + 25;
            if (static_cast<int16_T>(proc_control_node_B.i_dk) + 25 > 32767) {
              proc_control_node_B.U_tmp = 32767;
            }

            proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1] =
              proc_control_node_B.Xnorm0;
            proc_control_node_B.lambda_tmp_tmp = 1;
            while (proc_control_node_B.lambda_tmp_tmp - 1 <= nA - 1) {
              proc_control_node_B.U_tmp = static_cast<int16_T>
                (proc_control_node_B.i_dk) + 25;
              if (static_cast<int16_T>(proc_control_node_B.i_dk) + 25 > 32767) {
                proc_control_node_B.U_tmp = 32767;
              }

              proc_control_node_B.U_tmp_c = static_cast<int16_T>
                (proc_control_node_B.i_dk) + 25;
              if (static_cast<int16_T>(proc_control_node_B.i_dk) + 25 > 32767) {
                proc_control_node_B.U_tmp_c = 32767;
              }

              proc_control_node_B.i31 = static_cast<int16_T>
                (proc_control_node_B.lambda_tmp_tmp) + 25;
              if (static_cast<int16_T>(proc_control_node_B.lambda_tmp_tmp) + 25 >
                  32767) {
                proc_control_node_B.i31 = 32767;
              }

              proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1] =
                proc_control_node_B.U[((static_cast<int16_T>
                (proc_control_node_B.lambda_tmp_tmp) - 1) * 25 +
                static_cast<int16_T>(proc_control_node_B.i_dk)) - 1] *
                proc_control_node_B.Rhs[proc_control_node_B.i31 - 1] +
                proc_control_node_B.Opt[proc_control_node_B.U_tmp_c - 1];
              proc_control_node_B.lambda_tmp_tmp++;
            }

            proc_control_node_B.i_dk++;
          }

          proc_control_node_B.Xnorm0 = -1.0E-12;
          kDrop = 0;
          proc_control_node_B.i_dk = 1;
          while (proc_control_node_B.i_dk - 1 <= nA - 1) {
            proc_control_node_B.U_tmp = static_cast<int16_T>
              (proc_control_node_B.i_dk) + 25;
            if (static_cast<int16_T>(proc_control_node_B.i_dk) + 25 > 32767) {
              proc_control_node_B.U_tmp = 32767;
            }

            lambda[proc_control_node_B.iC[static_cast<int16_T>
              (proc_control_node_B.i_dk) - 1] - 1] =
              proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1];
            proc_control_node_B.U_tmp = static_cast<int16_T>
              (proc_control_node_B.i_dk) + 25;
            if (static_cast<int16_T>(proc_control_node_B.i_dk) + 25 > 32767) {
              proc_control_node_B.U_tmp = 32767;
            }

            if ((proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1] <
                 proc_control_node_B.Xnorm0) && (static_cast<int16_T>
                 (proc_control_node_B.i_dk) <= nA)) {
              kDrop = static_cast<int16_T>(proc_control_node_B.i_dk);
              proc_control_node_B.U_tmp = static_cast<int16_T>
                (proc_control_node_B.i_dk) + 25;
              if (static_cast<int16_T>(proc_control_node_B.i_dk) + 25 > 32767) {
                proc_control_node_B.U_tmp = 32767;
              }

              proc_control_node_B.Xnorm0 =
                proc_control_node_B.Opt[proc_control_node_B.U_tmp - 1];
            }

            proc_control_node_B.i_dk++;
          }

          if (kDrop <= 0) {
            DualFeasible = true;
            memcpy(&x[0], &proc_control_node_B.Opt[0], 25U * sizeof(real_T));
          } else {
            (*status)++;
            if (static_cast<int32_T>(*status) > q) {
              nA = 0;
              memset(&iA[0], 0, 48U * sizeof(int16_T));
              memset(&proc_control_node_B.iC[0], 0, 48U * sizeof(int16_T));
              ColdReset = true;
            } else {
              lambda[proc_control_node_B.iC[kDrop - 1] - 1] = 0.0;
              proc_control_nod_DropConstraint(kDrop, iA, &nA,
                proc_control_node_B.iC);
            }
          }
        }
      } else {
        if (nA <= 0) {
          memset(&lambda[0], 0, 48U * sizeof(real_T));
          proc_control_node_Unconstrained(b_Hinv, f, x, 25);
        }

        exitg3 = 1;
      }
    } while (exitg3 == 0);

    if (exitg3 == 1) {
      guard1 = true;
    }
  } else {
    proc_control_node_Unconstrained(b_Hinv, f, x, 25);
    guard1 = true;
  }

  if (guard1) {
    proc_control_node_B.Xnorm0 = proc_control_node_norm(x);
    exitg2 = false;
    while ((!exitg2) && (static_cast<int32_T>(*status) <= maxiter)) {
      proc_control_node_B.cMin = -FeasTol;
      kNext = 0;
      for (proc_control_node_B.i_dk = 0; proc_control_node_B.i_dk < 48;
           proc_control_node_B.i_dk++) {
        proc_control_node_B.t_f =
          proc_control_node_B.cTol[proc_control_node_B.i_dk];
        if (!cTolComputed) {
          for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 25;
               proc_control_node_B.U_tmp++) {
            proc_control_node_B.b_Ac[proc_control_node_B.U_tmp] =
              b_Ac[proc_control_node_B.i_dk + 48 * proc_control_node_B.U_tmp] *
              x[proc_control_node_B.U_tmp];
          }

          proc_control_node_abs(proc_control_node_B.b_Ac,
                                proc_control_node_B.z_o);
          proc_control_node_B.cVal = proc_control_node_maximum
            (proc_control_node_B.z_o);
          if ((!(proc_control_node_B.t_f > proc_control_node_B.cVal)) &&
              (!rtIsNaN(proc_control_node_B.cVal))) {
            proc_control_node_B.t_f = proc_control_node_B.cVal;
          }
        }

        if (iA[proc_control_node_B.i_dk] == 0) {
          proc_control_node_B.b_Ac_m = 0.0;
          for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 25;
               proc_control_node_B.U_tmp++) {
            proc_control_node_B.b_Ac_m += b_Ac[proc_control_node_B.i_dk + 48 *
              proc_control_node_B.U_tmp] * x[proc_control_node_B.U_tmp];
          }

          proc_control_node_B.cVal = (proc_control_node_B.b_Ac_m -
            b[proc_control_node_B.i_dk]) / proc_control_node_B.t_f;
          if (proc_control_node_B.cVal < proc_control_node_B.cMin) {
            proc_control_node_B.cMin = proc_control_node_B.cVal;
            kNext = static_cast<int16_T>(proc_control_node_B.i_dk + 1);
          }
        }

        proc_control_node_B.cTol[proc_control_node_B.i_dk] =
          proc_control_node_B.t_f;
      }

      cTolComputed = true;
      if (kNext <= 0) {
        exitg2 = true;
      } else if (static_cast<int32_T>(*status) == maxiter) {
        *status = 0.0;
        exitg2 = true;
      } else {
        do {
          exitg1 = 0;
          if ((kNext > 0) && (static_cast<int32_T>(*status) <= maxiter)) {
            guard2 = false;
            if (nA == 0) {
              for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 25;
                   proc_control_node_B.U_tmp++) {
                proc_control_node_B.z_o[proc_control_node_B.U_tmp] = 0.0;
                for (proc_control_node_B.U_tmp_c = 0;
                     proc_control_node_B.U_tmp_c < 25;
                     proc_control_node_B.U_tmp_c++) {
                  proc_control_node_B.z_o[proc_control_node_B.U_tmp] += b_Ac[(48
                    * proc_control_node_B.U_tmp_c + kNext) - 1] * b_Hinv[25 *
                    proc_control_node_B.U_tmp_c + proc_control_node_B.U_tmp];
                }
              }

              guard2 = true;
            } else {
              proc_control_node_KWIKfactor(b_Ac, proc_control_node_B.iC, nA,
                b_Linv, proc_control_node_B.b_D, proc_control_node_B.b_H, 25,
                proc_control_node_B.RLinv, &proc_control_node_B.cMin);
              if (proc_control_node_B.cMin <= 0.0) {
                *status = -2.0;
                exitg1 = 1;
              } else {
                for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                     625; proc_control_node_B.U_tmp++) {
                  proc_control_node_B.U[proc_control_node_B.U_tmp] =
                    -proc_control_node_B.b_H[proc_control_node_B.U_tmp];
                }

                for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                     25; proc_control_node_B.U_tmp++) {
                  proc_control_node_B.z_o[proc_control_node_B.U_tmp] = 0.0;
                  for (proc_control_node_B.U_tmp_c = 0;
                       proc_control_node_B.U_tmp_c < 25;
                       proc_control_node_B.U_tmp_c++) {
                    proc_control_node_B.z_o[proc_control_node_B.U_tmp] += b_Ac
                      [(48 * proc_control_node_B.U_tmp_c + kNext) - 1] *
                      proc_control_node_B.U[25 * proc_control_node_B.U_tmp_c +
                      proc_control_node_B.U_tmp];
                  }
                }

                proc_control_node_B.i_dk = 1;
                while (proc_control_node_B.i_dk - 1 <= nA - 1) {
                  proc_control_node_B.b_Ac_m = 0.0;
                  for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                       25; proc_control_node_B.U_tmp++) {
                    proc_control_node_B.b_Ac_m += b_Ac[(48 *
                      proc_control_node_B.U_tmp + kNext) - 1] *
                      proc_control_node_B.b_D[(static_cast<int16_T>
                      (proc_control_node_B.i_dk) - 1) * 25 +
                      proc_control_node_B.U_tmp];
                  }

                  proc_control_node_B.r[static_cast<int16_T>
                    (proc_control_node_B.i_dk) - 1] = proc_control_node_B.b_Ac_m;
                  proc_control_node_B.i_dk++;
                }

                guard2 = true;
              }
            }

            if (guard2) {
              kDrop = 0;
              proc_control_node_B.cMin = 0.0;
              DualFeasible = true;
              ColdReset = true;
              if (nA > 0) {
                proc_control_node_B.i_dk = 0;
                exitg4 = false;
                while ((!exitg4) && (proc_control_node_B.i_dk <= nA - 1)) {
                  if (proc_control_node_B.r[proc_control_node_B.i_dk] >= 1.0E-12)
                  {
                    ColdReset = false;
                    exitg4 = true;
                  } else {
                    proc_control_node_B.i_dk++;
                  }
                }
              }

              if ((nA != 0) && (!ColdReset)) {
                proc_control_node_B.i_dk = 1;
                while (proc_control_node_B.i_dk - 1 <= nA - 1) {
                  proc_control_node_B.t_f = proc_control_node_B.r
                    [static_cast<int16_T>(proc_control_node_B.i_dk) - 1];
                  if (proc_control_node_B.t_f > 1.0E-12) {
                    proc_control_node_B.cVal = lambda[proc_control_node_B.iC[
                      static_cast<int16_T>(proc_control_node_B.i_dk) - 1] - 1] /
                      proc_control_node_B.t_f;
                    if ((kDrop == 0) || (proc_control_node_B.cVal <
                                         proc_control_node_B.rMin)) {
                      proc_control_node_B.rMin = proc_control_node_B.cVal;
                      kDrop = static_cast<int16_T>(proc_control_node_B.i_dk);
                    }
                  }

                  proc_control_node_B.i_dk++;
                }

                if (kDrop > 0) {
                  proc_control_node_B.cMin = proc_control_node_B.rMin;
                  DualFeasible = false;
                }
              }

              for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp < 25;
                   proc_control_node_B.U_tmp++) {
                proc_control_node_B.b_Ac[proc_control_node_B.U_tmp] = b_Ac[(48 *
                  proc_control_node_B.U_tmp + kNext) - 1];
              }

              proc_control_node_B.cVal = proc_control_node_mtimes_a
                (proc_control_node_B.z_o, proc_control_node_B.b_Ac);
              if (proc_control_node_B.cVal <= 0.0) {
                proc_control_node_B.cVal = 0.0;
                ColdReset = true;
              } else {
                proc_control_node_B.b_Ac_m = 0.0;
                for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                     25; proc_control_node_B.U_tmp++) {
                  proc_control_node_B.b_Ac_m += b_Ac[(48 *
                    proc_control_node_B.U_tmp + kNext) - 1] *
                    x[proc_control_node_B.U_tmp];
                }

                proc_control_node_B.cVal = (b[kNext - 1] -
                  proc_control_node_B.b_Ac_m) / proc_control_node_B.cVal;
                ColdReset = false;
              }

              if (DualFeasible && ColdReset) {
                *status = -1.0;
                exitg1 = 1;
              } else {
                if (ColdReset) {
                  proc_control_node_B.t_f = proc_control_node_B.cMin;
                } else if (DualFeasible) {
                  proc_control_node_B.t_f = proc_control_node_B.cVal;
                } else if ((proc_control_node_B.cMin < proc_control_node_B.cVal)
                           || rtIsNaN(proc_control_node_B.cVal)) {
                  proc_control_node_B.t_f = proc_control_node_B.cMin;
                } else {
                  proc_control_node_B.t_f = proc_control_node_B.cVal;
                }

                proc_control_node_B.i_dk = 1;
                while (proc_control_node_B.i_dk - 1 <= nA - 1) {
                  proc_control_node_B.lambda_tmp_tmp = proc_control_node_B.iC[
                    static_cast<int16_T>(proc_control_node_B.i_dk) - 1];
                  lambda[proc_control_node_B.lambda_tmp_tmp - 1] -=
                    proc_control_node_B.r[static_cast<int16_T>
                    (proc_control_node_B.i_dk) - 1] * proc_control_node_B.t_f;
                  if ((proc_control_node_B.lambda_tmp_tmp <= 48) &&
                      (lambda[proc_control_node_B.lambda_tmp_tmp - 1] < 0.0)) {
                    lambda[proc_control_node_B.lambda_tmp_tmp - 1] = 0.0;
                  }

                  proc_control_node_B.i_dk++;
                }

                lambda[kNext - 1] += proc_control_node_B.t_f;
                if (proc_control_node_B.t_f == proc_control_node_B.cMin) {
                  proc_control_nod_DropConstraint(kDrop, iA, &nA,
                    proc_control_node_B.iC);
                }

                if (!ColdReset) {
                  for (proc_control_node_B.U_tmp = 0; proc_control_node_B.U_tmp <
                       25; proc_control_node_B.U_tmp++) {
                    x[proc_control_node_B.U_tmp] += proc_control_node_B.t_f *
                      proc_control_node_B.z_o[proc_control_node_B.U_tmp];
                  }

                  if (proc_control_node_B.t_f == proc_control_node_B.cVal) {
                    if (nA == 25) {
                      *status = -1.0;
                      exitg1 = 1;
                    } else {
                      proc_control_node_B.U_tmp = nA + 1;
                      if (nA + 1 > 32767) {
                        proc_control_node_B.U_tmp = 32767;
                      }

                      nA = static_cast<int16_T>(proc_control_node_B.U_tmp);
                      proc_control_node_B.iC[static_cast<int16_T>
                        (proc_control_node_B.U_tmp) - 1] = kNext;
                      kDrop = static_cast<int16_T>(proc_control_node_B.U_tmp);
                      exitg4 = false;
                      while ((!exitg4) && (kDrop > 1)) {
                        tmp = proc_control_node_B.iC[kDrop - 1];
                        tmp_0 = proc_control_node_B.iC[kDrop - 2];
                        if (tmp > tmp_0) {
                          exitg4 = true;
                        } else {
                          proc_control_node_B.iC[kDrop - 1] = tmp_0;
                          proc_control_node_B.iC[kDrop - 2] = tmp;
                          kDrop = static_cast<int16_T>(kDrop - 1);
                        }
                      }

                      iA[kNext - 1] = 1;
                      kNext = 0;
                      (*status)++;
                    }
                  } else {
                    (*status)++;
                  }
                } else {
                  (*status)++;
                }
              }
            }
          } else {
            proc_control_node_B.cMin = proc_control_node_norm(x);
            if (fabs(proc_control_node_B.cMin - proc_control_node_B.Xnorm0) >
                0.001) {
              proc_control_node_B.Xnorm0 = proc_control_node_B.cMin;
              proc_control_node_abs_b(b, proc_control_node_B.dv14);
              proc_control_node_maximum2(proc_control_node_B.dv14, 1.0,
                proc_control_node_B.cTol);
              cTolComputed = false;
            }

            exitg1 = 2;
          }
        } while (exitg1 == 0);

        if (exitg1 == 1) {
          exitg2 = true;
        }
      }
    }
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_mpc_solveQP(const real_T
  xQP[20], const real_T b_Kx[480], const real_T b_Kr[2880], const real_T rseq
  [120], const real_T b_Ku1[192], const real_T old_u[8], const real_T b_Kv[264],
  const real_T vseq[11], const real_T b_Kut[1920], const real_T b_utarget[80],
  const real_T b_Linv[625], const real_T b_Hinv[625], const real_T b_Ac[1200],
  const real_T Bc[48], boolean_T iA[48], real_T zopt[25], real_T f[25], real_T
  *status)
{
  memset(&f[0], 0, 25U * sizeof(real_T));
  for (proc_control_node_B.i_bci = 0; proc_control_node_B.i_bci < 24;
       proc_control_node_B.i_bci++) {
    proc_control_node_B.b_Kx_j = 0.0;
    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 20;
         proc_control_node_B.i36++) {
      proc_control_node_B.b_Kx_j += b_Kx[20 * proc_control_node_B.i_bci +
        proc_control_node_B.i36] * xQP[proc_control_node_B.i36];
    }

    proc_control_node_B.b_Kr_k = 0.0;
    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 120;
         proc_control_node_B.i36++) {
      proc_control_node_B.b_Kr_k += b_Kr[120 * proc_control_node_B.i_bci +
        proc_control_node_B.i36] * rseq[proc_control_node_B.i36];
    }

    proc_control_node_B.b_Ku1_h = 0.0;
    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 8;
         proc_control_node_B.i36++) {
      proc_control_node_B.b_Ku1_h += b_Ku1[(proc_control_node_B.i_bci << 3) +
        proc_control_node_B.i36] * old_u[proc_control_node_B.i36];
    }

    proc_control_node_B.b_Kv_d = 0.0;
    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 11;
         proc_control_node_B.i36++) {
      proc_control_node_B.b_Kv_d += b_Kv[11 * proc_control_node_B.i_bci +
        proc_control_node_B.i36] * vseq[proc_control_node_B.i36];
    }

    proc_control_node_B.b_Kut_j = 0.0;
    for (proc_control_node_B.i36 = 0; proc_control_node_B.i36 < 80;
         proc_control_node_B.i36++) {
      proc_control_node_B.b_Kut_j += b_Kut[80 * proc_control_node_B.i_bci +
        proc_control_node_B.i36] * b_utarget[proc_control_node_B.i36];
    }

    f[proc_control_node_B.i_bci] = (((proc_control_node_B.b_Kx_j +
      proc_control_node_B.b_Kr_k) + proc_control_node_B.b_Ku1_h) +
      proc_control_node_B.b_Kv_d) + proc_control_node_B.b_Kut_j;
  }

  for (proc_control_node_B.i_bci = 0; proc_control_node_B.i_bci < 48;
       proc_control_node_B.i_bci++) {
    proc_control_node_B.iAnew_i[proc_control_node_B.i_bci] =
      iA[proc_control_node_B.i_bci];
  }

  proc_control_node_qpkwik(b_Linv, b_Hinv, f, b_Ac, Bc,
    proc_control_node_B.iAnew_i, 292, 0.01, zopt, proc_control_node_B.a__1_d,
    status);
  for (proc_control_node_B.i_bci = 0; proc_control_node_B.i_bci < 48;
       proc_control_node_B.i_bci++) {
    iA[proc_control_node_B.i_bci] =
      (proc_control_node_B.iAnew_i[proc_control_node_B.i_bci] != 0);
  }

  if ((*status < 0.0) || (*status == 0.0)) {
    memset(&zopt[0], 0, 25U * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S169>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_mpcblock_optimizer(const real_T
  rseq[120], const real_T vseq[11], const real_T x[20], const real_T old_u[8],
  const boolean_T iA[48], const real_T b_Mlim[48], real_T b_Mx[960], real_T
  b_Mu1[384], real_T b_Mv[528], const real_T b_utarget[80], const real_T b_uoff
  [8], real_T b_H[625], real_T b_Ac[1200], const real_T b_Wy[12], const real_T
  b_Wdu[8], const real_T b_Jm[1920], const real_T b_Wu[8], const real_T b_I1[640],
  const real_T b_A[400], const real_T Bu[1760], const real_T Bv[220], const
  real_T b_C[240], const real_T Dv[132], const real_T b_Mrows[48], real_T u[8],
  real_T useq[88], real_T *status, boolean_T iAout[48])
{
  static const int8_T c_A[100] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
    0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1 };

  boolean_T exitg1;
  memset(&useq[0], 0, 88U * sizeof(real_T));
  for (proc_control_node_B.i_pn = 0; proc_control_node_B.i_pn < 48;
       proc_control_node_B.i_pn++) {
    iAout[proc_control_node_B.i_pn] = false;
  }

  proc_control_mpc_constraintcoef(b_A, &Bu[0], &Bv[0], b_C, &Dv[0], b_Jm,
    proc_control_node_B.b_SuJm_m, proc_control_node_B.b_Sx_p,
    proc_control_node_B.b_Su1_j, proc_control_node_B.b_Hv_b);
  if (b_Mrows[0] > 0.0) {
    proc_control_node_B.kidx_l = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.kidx_l < 48)) {
      if (b_Mrows[proc_control_node_B.kidx_l] <= 120.0) {
        proc_control_node_B.i_pn = static_cast<int32_T>
          (b_Mrows[proc_control_node_B.kidx_l]);
        for (proc_control_node_B.b_j1_e = 0; proc_control_node_B.b_j1_e < 24;
             proc_control_node_B.b_j1_e++) {
          b_Ac[proc_control_node_B.kidx_l + 48 * proc_control_node_B.b_j1_e] =
            -proc_control_node_B.b_SuJm_m[(120 * proc_control_node_B.b_j1_e +
            proc_control_node_B.i_pn) - 1];
        }

        for (proc_control_node_B.b_j1_e = 0; proc_control_node_B.b_j1_e < 20;
             proc_control_node_B.b_j1_e++) {
          b_Mx[proc_control_node_B.kidx_l + 48 * proc_control_node_B.b_j1_e] =
            -proc_control_node_B.b_Sx_p[(120 * proc_control_node_B.b_j1_e +
            proc_control_node_B.i_pn) - 1];
        }

        for (proc_control_node_B.b_j1_e = 0; proc_control_node_B.b_j1_e < 8;
             proc_control_node_B.b_j1_e++) {
          b_Mu1[proc_control_node_B.kidx_l + 48 * proc_control_node_B.b_j1_e] =
            -proc_control_node_B.b_Su1_j[(120 * proc_control_node_B.b_j1_e +
            proc_control_node_B.i_pn) - 1];
        }

        for (proc_control_node_B.b_j1_e = 0; proc_control_node_B.b_j1_e < 11;
             proc_control_node_B.b_j1_e++) {
          b_Mv[proc_control_node_B.kidx_l + 48 * proc_control_node_B.b_j1_e] =
            -proc_control_node_B.b_Hv_b[(120 * proc_control_node_B.b_j1_e +
            proc_control_node_B.i_pn) - 1];
        }

        proc_control_node_B.kidx_l++;
      } else if (b_Mrows[proc_control_node_B.kidx_l] <= 240.0) {
        proc_control_node_B.i_pn = static_cast<int32_T>
          (b_Mrows[proc_control_node_B.kidx_l] - 120.0);
        for (proc_control_node_B.b_j1_e = 0; proc_control_node_B.b_j1_e < 24;
             proc_control_node_B.b_j1_e++) {
          b_Ac[proc_control_node_B.kidx_l + 48 * proc_control_node_B.b_j1_e] =
            proc_control_node_B.b_SuJm_m[(120 * proc_control_node_B.b_j1_e +
            proc_control_node_B.i_pn) - 1];
        }

        for (proc_control_node_B.b_j1_e = 0; proc_control_node_B.b_j1_e < 20;
             proc_control_node_B.b_j1_e++) {
          b_Mx[proc_control_node_B.kidx_l + 48 * proc_control_node_B.b_j1_e] =
            proc_control_node_B.b_Sx_p[(120 * proc_control_node_B.b_j1_e +
            proc_control_node_B.i_pn) - 1];
        }

        for (proc_control_node_B.b_j1_e = 0; proc_control_node_B.b_j1_e < 8;
             proc_control_node_B.b_j1_e++) {
          b_Mu1[proc_control_node_B.kidx_l + 48 * proc_control_node_B.b_j1_e] =
            proc_control_node_B.b_Su1_j[(120 * proc_control_node_B.b_j1_e +
            proc_control_node_B.i_pn) - 1];
        }

        for (proc_control_node_B.b_j1_e = 0; proc_control_node_B.b_j1_e < 11;
             proc_control_node_B.b_j1_e++) {
          b_Mv[proc_control_node_B.kidx_l + 48 * proc_control_node_B.b_j1_e] =
            proc_control_node_B.b_Hv_b[(120 * proc_control_node_B.b_j1_e +
            proc_control_node_B.i_pn) - 1];
        }

        proc_control_node_B.kidx_l++;
      } else {
        exitg1 = true;
      }
    }
  }

  memset(&proc_control_node_B.b_I_j[0], 0, sizeof(int8_T) << 6U);
  proc_control_node_B.kidx_j = 0;
  for (proc_control_node_B.kidx_l = 0; proc_control_node_B.kidx_l < 8;
       proc_control_node_B.kidx_l++) {
    proc_control_node_B.b_I_j[proc_control_node_B.kidx_j] = 1;
    proc_control_node_B.kidx_j += 9;
  }

  proc_control_node_B.kidx_l = -1;
  for (proc_control_node_B.b_j1_e = 0; proc_control_node_B.b_j1_e < 10;
       proc_control_node_B.b_j1_e++) {
    for (proc_control_node_B.i_pn = 0; proc_control_node_B.i_pn < 8;
         proc_control_node_B.i_pn++) {
      for (proc_control_node_B.kidx_j = 0; proc_control_node_B.kidx_j < 10;
           proc_control_node_B.kidx_j++) {
        for (proc_control_node_B.i2_e = 0; proc_control_node_B.i2_e < 8;
             proc_control_node_B.i2_e++) {
          proc_control_node_B.a_jz[(proc_control_node_B.kidx_l +
            proc_control_node_B.i2_e) + 1] = static_cast<int8_T>(c_A[10 *
            proc_control_node_B.b_j1_e + proc_control_node_B.kidx_j] *
            proc_control_node_B.b_I_j[(proc_control_node_B.i_pn << 3) +
            proc_control_node_B.i2_e]);
        }

        proc_control_node_B.kidx_l += 8;
      }
    }
  }

  for (proc_control_node_B.b_j1_e = 0; proc_control_node_B.b_j1_e < 24;
       proc_control_node_B.b_j1_e++) {
    memset(&proc_control_node_B.a[proc_control_node_B.b_j1_e * 80], 0, 80U *
           sizeof(real_T));
    for (proc_control_node_B.kidx_j = 0; proc_control_node_B.kidx_j < 80;
         proc_control_node_B.kidx_j++) {
      for (proc_control_node_B.kidx_l = 0; proc_control_node_B.kidx_l < 80;
           proc_control_node_B.kidx_l++) {
        proc_control_node_B.i_pn = 80 * proc_control_node_B.b_j1_e +
          proc_control_node_B.kidx_l;
        proc_control_node_B.a[proc_control_node_B.i_pn] += static_cast<real_T>
          (proc_control_node_B.a_jz[80 * proc_control_node_B.kidx_j +
           proc_control_node_B.kidx_l]) * b_Jm[80 * proc_control_node_B.b_j1_e +
          proc_control_node_B.kidx_j];
      }
    }
  }

  proc_contr_mpc_calculatehessian(b_Wy, b_Wu, b_Wdu,
    proc_control_node_B.b_SuJm_m, proc_control_node_B.a, b_Jm, b_I1,
    proc_control_node_B.b_Su1_j, proc_control_node_B.b_Sx_p,
    proc_control_node_B.b_Hv_b, proc_control_node_nu, proc_control_node_ny,
    proc_control_node_B.b, proc_control_node_B.b_Ku1_p,
    proc_control_node_B.b_Kut, proc_control_node_B.b_Kx_a,
    proc_control_node_B.b_Kv_o, proc_control_node_B.b_Kr_n);
  proc_control_node_B.b_j1_e = 0;
  proc_control_node_B.kidx_l = 0;
  for (proc_control_node_B.kidx_j = 0; proc_control_node_B.kidx_j < 24;
       proc_control_node_B.kidx_j++) {
    memcpy(&b_H[proc_control_node_B.b_j1_e],
           &proc_control_node_B.b[proc_control_node_B.kidx_l], 24U * sizeof
           (real_T));
    proc_control_node_B.b_j1_e += 25;
    proc_control_node_B.kidx_l += 24;
  }

  memcpy(&proc_control_node_B.b_Linv[0], &b_H[0], 625U * sizeof(real_T));
  proc_control_n_mpc_checkhessian(proc_control_node_B.b_Linv,
    proc_control_node_B.c_Linv, &proc_control_node_B.BadH_f);
  if (proc_control_node_B.BadH_f > 1.0) {
    proc_control_node_B.kidx_l = 0;
    for (proc_control_node_B.kidx_j = 0; proc_control_node_B.kidx_j < 8;
         proc_control_node_B.kidx_j++) {
      u[proc_control_node_B.kidx_j] = old_u[proc_control_node_B.kidx_j] +
        b_uoff[proc_control_node_B.kidx_j];
      for (proc_control_node_B.b_j1_e = 0; proc_control_node_B.b_j1_e < 11;
           proc_control_node_B.b_j1_e++) {
        useq[proc_control_node_B.b_j1_e + proc_control_node_B.kidx_l] =
          u[proc_control_node_B.kidx_j];
      }

      proc_control_node_B.kidx_l += 11;
    }

    *status = -2.0;
  } else {
    memset(&proc_control_node_B.c_I_c[0], 0, 625U * sizeof(int8_T));
    proc_control_node_B.kidx_j = 0;
    for (proc_control_node_B.kidx_l = 0; proc_control_node_B.kidx_l < 25;
         proc_control_node_B.kidx_l++) {
      proc_control_node_B.c_I_c[proc_control_node_B.kidx_j] = 1;
      proc_control_node_B.kidx_j += 26;
    }

    proc_control_node_B.kidx_j = 0;
    for (proc_control_node_B.kidx_l = 0; proc_control_node_B.kidx_l < 25;
         proc_control_node_B.kidx_l++) {
      for (proc_control_node_B.b_j1_e = 0; proc_control_node_B.b_j1_e < 25;
           proc_control_node_B.b_j1_e++) {
        proc_control_node_B.i_pn = proc_control_node_B.b_j1_e +
          proc_control_node_B.kidx_j;
        proc_control_node_B.b_Linv[proc_control_node_B.i_pn] =
          proc_control_node_B.c_I_c[proc_control_node_B.i_pn];
      }

      proc_control_node_B.kidx_j += 25;
    }

    proc_control_node_trisolve(proc_control_node_B.c_Linv,
      proc_control_node_B.b_Linv);
    for (proc_control_node_B.i_pn = 0; proc_control_node_B.i_pn < 48;
         proc_control_node_B.i_pn++) {
      iAout[proc_control_node_B.i_pn] = iA[proc_control_node_B.i_pn];
      proc_control_node_B.BadH_f = 0.0;
      proc_control_node_B.b_j1_e = 0;
      for (proc_control_node_B.kidx_l = 0; proc_control_node_B.kidx_l < 20;
           proc_control_node_B.kidx_l++) {
        proc_control_node_B.BadH_f += b_Mx[proc_control_node_B.b_j1_e +
          proc_control_node_B.i_pn] * x[proc_control_node_B.kidx_l];
        proc_control_node_B.b_j1_e += 48;
      }

      proc_control_node_B.b_Mlim_m[proc_control_node_B.i_pn] =
        b_Mlim[proc_control_node_B.i_pn] + proc_control_node_B.BadH_f;
      proc_control_node_B.b_Mu1_j[proc_control_node_B.i_pn] = 0.0;
    }

    proc_control_node_B.b_j1_e = 0;
    for (proc_control_node_B.kidx_l = 0; proc_control_node_B.kidx_l < 8;
         proc_control_node_B.kidx_l++) {
      for (proc_control_node_B.kidx_j = 0; proc_control_node_B.kidx_j < 48;
           proc_control_node_B.kidx_j++) {
        proc_control_node_B.b_Mu1_j[proc_control_node_B.kidx_j] +=
          b_Mu1[proc_control_node_B.kidx_j + proc_control_node_B.b_j1_e] *
          old_u[proc_control_node_B.kidx_l];
      }

      proc_control_node_B.b_j1_e += 48;
    }

    proc_control_node_B.b_j1_e = 0;
    for (proc_control_node_B.kidx_l = 0; proc_control_node_B.kidx_l < 25;
         proc_control_node_B.kidx_l++) {
      proc_control_node_B.kidx_j = 0;
      for (proc_control_node_B.i2_e = 0; proc_control_node_B.i2_e < 25;
           proc_control_node_B.i2_e++) {
        proc_control_node_B.i_pn = proc_control_node_B.i2_e +
          proc_control_node_B.b_j1_e;
        proc_control_node_B.c_Linv[proc_control_node_B.i_pn] = 0.0;
        for (proc_control_node_B.i9 = 0; proc_control_node_B.i9 < 25;
             proc_control_node_B.i9++) {
          proc_control_node_B.c_Linv[proc_control_node_B.i_pn] +=
            proc_control_node_B.b_Linv[proc_control_node_B.i9 +
            proc_control_node_B.kidx_j] *
            proc_control_node_B.b_Linv[proc_control_node_B.i9 +
            proc_control_node_B.b_j1_e];
        }

        proc_control_node_B.kidx_j += 25;
      }

      proc_control_node_B.b_j1_e += 25;
    }

    for (proc_control_node_B.b_j1_e = 0; proc_control_node_B.b_j1_e < 48;
         proc_control_node_B.b_j1_e++) {
      proc_control_node_B.BadH_f = 0.0;
      proc_control_node_B.kidx_l = 0;
      for (proc_control_node_B.kidx_j = 0; proc_control_node_B.kidx_j < 11;
           proc_control_node_B.kidx_j++) {
        proc_control_node_B.BadH_f += b_Mv[proc_control_node_B.kidx_l +
          proc_control_node_B.b_j1_e] * vseq[proc_control_node_B.kidx_j];
        proc_control_node_B.kidx_l += 48;
      }

      proc_control_node_B.b_Mlim_k[proc_control_node_B.b_j1_e] =
        -((proc_control_node_B.b_Mlim_m[proc_control_node_B.b_j1_e] +
           proc_control_node_B.b_Mu1_j[proc_control_node_B.b_j1_e]) +
          proc_control_node_B.BadH_f);
    }

    proc_control_node_mpc_solveQP(x, proc_control_node_B.b_Kx_a,
      proc_control_node_B.b_Kr_n, rseq, proc_control_node_B.b_Ku1_p, old_u,
      proc_control_node_B.b_Kv_o, vseq, proc_control_node_B.b_Kut, b_utarget,
      proc_control_node_B.b_Linv, proc_control_node_B.c_Linv, b_Ac,
      proc_control_node_B.b_Mlim_k, iAout, proc_control_node_B.zopt_h,
      proc_control_node_B.f_n, status);
    for (proc_control_node_B.kidx_l = 0; proc_control_node_B.kidx_l < 8;
         proc_control_node_B.kidx_l++) {
      u[proc_control_node_B.kidx_l] = (old_u[proc_control_node_B.kidx_l] +
        proc_control_node_B.zopt_h[proc_control_node_B.kidx_l]) +
        b_uoff[proc_control_node_B.kidx_l];
    }
  }
}

// Function for MATLAB Function: '<S132>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_nod_AUVEulerSimFcn(const real_T
  in1[12], const real_T in2[8], real_T out1[12])
{
  real_T out1_tmp;
  real_T out1_tmp_0;
  proc_control_node_B.t5_k = cos(in1[3]);
  proc_control_node_B.t6_l = cos(in1[5]);
  proc_control_node_B.t9_b = cos(in1[4]);
  proc_control_node_B.t11_c = sin(in1[3]);
  proc_control_node_B.t12_f = sin(in1[5]);
  proc_control_node_B.t13_o = sin(in1[4]);
  proc_control_node_B.t20_d = in1[10] / 500.0;
  proc_control_node_B.t24_l = in1[9] / 1000.0;
  proc_control_node_B.t26_l = in1[11] * 0.018;
  proc_control_node_B.t45_d = in1[6] * 32.4648;
  proc_control_node_B.t48_k = in1[7] * 43.6156;
  proc_control_node_B.t49_f = in1[8] * 46.7695;
  proc_control_node_B.t14_p = 1.0 / proc_control_node_B.t9_b;
  proc_control_node_B.t54_k = proc_control_node_B.t20_d +
    proc_control_node_B.t26_l;
  proc_control_node_B.t20_d += proc_control_node_B.t24_l;
  proc_control_node_B.t24_l += proc_control_node_B.t26_l;
  proc_control_node_B.t26_l = in1[10] * 0.558 + proc_control_node_B.t45_d;
  proc_control_node_B.t62_k = in1[9] * 0.062 + proc_control_node_B.t49_f;
  proc_control_node_B.t63_i = in1[11] * 0.031 + proc_control_node_B.t48_k;
  proc_control_node_B.t66 = (in1[10] / 125.0 + in1[11] / 250.0) + in1[9] * 0.592;
  proc_control_node_B.t45_d = in1[11] * 0.062 + -proc_control_node_B.t45_d;
  proc_control_node_B.t48_k = in1[9] * 0.558 + -proc_control_node_B.t48_k;
  proc_control_node_B.t49_f = in1[10] * 0.031 + -proc_control_node_B.t49_f;
  proc_control_node_B.t67_e = (in1[9] / 250.0 + -(in1[10] / 1000.0)) + in1[11] *
    1.8864;
  proc_control_node_B.t68_f = (in1[9] / 125.0 + -(in1[11] / 1000.0)) + in1[10] *
    1.7228;
  proc_control_node_B.out1_tmp_k = proc_control_node_B.t11_c *
    proc_control_node_B.t12_f;
  proc_control_node_B.out1_tmp_ne = proc_control_node_B.t5_k *
    proc_control_node_B.t6_l;
  proc_control_node_B.out1_tmp_it = proc_control_node_B.t5_k *
    proc_control_node_B.t12_f;
  proc_control_node_B.out1_tmp_im = proc_control_node_B.t6_l *
    proc_control_node_B.t11_c;
  out1[0] = ((proc_control_node_B.out1_tmp_it - proc_control_node_B.out1_tmp_im *
              proc_control_node_B.t13_o) * -in1[7] +
             (proc_control_node_B.out1_tmp_ne * proc_control_node_B.t13_o +
              proc_control_node_B.out1_tmp_k) * in1[8]) +
    proc_control_node_B.t6_l * proc_control_node_B.t9_b * in1[6];
  out1[1] = ((proc_control_node_B.out1_tmp_k * proc_control_node_B.t13_o +
              proc_control_node_B.out1_tmp_ne) * in1[7] -
             (proc_control_node_B.out1_tmp_im - proc_control_node_B.out1_tmp_it *
              proc_control_node_B.t13_o) * in1[8]) + proc_control_node_B.t9_b *
    proc_control_node_B.t12_f * in1[6];
  proc_control_node_B.out1_tmp_k = proc_control_node_B.t5_k *
    proc_control_node_B.t9_b;
  proc_control_node_B.out1_tmp_ne = proc_control_node_B.t9_b *
    proc_control_node_B.t11_c;
  out1[2] = (proc_control_node_B.out1_tmp_ne * in1[7] +
             -proc_control_node_B.t13_o * in1[6]) +
    proc_control_node_B.out1_tmp_k * in1[8];
  proc_control_node_B.out1_tmp_it = in1[10] * proc_control_node_B.t11_c;
  proc_control_node_B.out1_tmp_im = in1[11] * proc_control_node_B.t5_k;
  out1[3] = (proc_control_node_B.out1_tmp_it * proc_control_node_B.t13_o *
             proc_control_node_B.t14_p + in1[9]) +
    proc_control_node_B.out1_tmp_im * proc_control_node_B.t13_o *
    proc_control_node_B.t14_p;
  out1[4] = in1[10] * proc_control_node_B.t5_k - in1[11] *
    proc_control_node_B.t11_c;
  out1[5] = proc_control_node_B.out1_tmp_it * proc_control_node_B.t14_p +
    proc_control_node_B.out1_tmp_im * proc_control_node_B.t14_p;
  proc_control_node_B.out1_tmp_it = in1[9] * (fabs(in1[9]) * 0.167 + 10.0);
  proc_control_node_B.out1_tmp_im = in1[9] * proc_control_node_B.t54_k;
  proc_control_node_B.t6_l = in1[9] * proc_control_node_B.t62_k;
  proc_control_node_B.t12_f = in1[9] * proc_control_node_B.t48_k;
  proc_control_node_B.t14_p = in1[9] * proc_control_node_B.t67_e;
  proc_control_node_B.out1_tmp_o2 = in1[9] * proc_control_node_B.t68_f;
  proc_control_node_B.out1_tmp_d = in1[10] * (fabs(in1[10]) / 10.0 + 7.0);
  proc_control_node_B.out1_tmp_iu = in1[10] * proc_control_node_B.t24_l;
  proc_control_node_B.out1_tmp_gy = in1[10] * proc_control_node_B.t26_l;
  proc_control_node_B.out1_tmp_cv = in1[10] * proc_control_node_B.t49_f;
  proc_control_node_B.out1_tmp_ee = in1[10] * proc_control_node_B.t66;
  proc_control_node_B.t67_e *= in1[10];
  proc_control_node_B.out1_tmp_a5 = in1[11] * (fabs(in1[11]) * 0.102 + 15.0);
  proc_control_node_B.out1_tmp_h = in1[11] * proc_control_node_B.t20_d;
  proc_control_node_B.out1_tmp_ef = in1[11] * proc_control_node_B.t45_d;
  out1_tmp = in1[11] * proc_control_node_B.t63_i;
  proc_control_node_B.t66 *= in1[11];
  proc_control_node_B.t68_f *= in1[11];
  proc_control_node_B.t5_k = proc_control_node_B.t9_b *
    (proc_control_node_B.t5_k * 0.030563 + -(proc_control_node_B.t11_c *
      0.746622));
  proc_control_node_B.t9_b = (fabs(in1[6]) * 1.17 + 45.0) * in1[6];
  proc_control_node_B.t54_k *= in1[6];
  proc_control_node_B.t63_i *= in1[6];
  proc_control_node_B.t49_f *= in1[6];
  proc_control_node_B.t11_c = (fabs(in1[7]) * 0.82 + 60.0) * in1[7];
  proc_control_node_B.t24_l *= in1[7];
  proc_control_node_B.t45_d *= in1[7];
  proc_control_node_B.t62_k *= in1[7];
  out1_tmp_0 = (fabs(in1[8]) * 0.756 + 70.0) * in1[8];
  proc_control_node_B.t20_d *= in1[8];
  proc_control_node_B.t26_l *= in1[8];
  proc_control_node_B.t48_k *= in1[8];
  out1[6] = ((((((((((((((in2[0] * -0.00033076834054020519 + in2[1] *
    1.8595780444550231E-21) + in2[2] * 0.00033506403327449372) + (in2[3] *
    0.00033363213569639753 - in2[4] * 0.001819638864719295)) + (in2[5] *
    -0.0018124211550371481 + in2[6] * 0.0018538731733468781)) + (in2[7] *
    0.001778186846409557 + proc_control_node_B.t13_o * 0.20658857264009611)) +
                     (((in2[0] * 1.4142135623730951 * 0.015171119710606879 +
                        in2[1] * 1.4142135623730951 * 0.014928824155507611) +
                       in2[2] * 1.4142135623730951 * 0.015171119710606879) +
                      in2[3] * 1.4142135623730951 * 0.01516372519659284)) +
                    (((proc_control_node_B.out1_tmp_it * -0.0001303522588356414
                       - proc_control_node_B.out1_tmp_im * 0.96028628902704993)
                      + proc_control_node_B.t6_l * 9.4803055144857715E-7) -
                     proc_control_node_B.t12_f * 6.8231348244175949E-6)) +
                   (((proc_control_node_B.t14_p * -0.010033314971702871 -
                      proc_control_node_B.out1_tmp_o2 * 0.0010125044874363649) +
                     proc_control_node_B.out1_tmp_d * 0.010033314971702871) -
                    proc_control_node_B.out1_tmp_iu * 2.9388947094905889E-5)) +
                  (((proc_control_node_B.out1_tmp_gy * -6.8231348244175949E-6 +
                     proc_control_node_B.out1_tmp_cv * 0.030976977065388711) +
                    proc_control_node_B.out1_tmp_ee * 0.0010125044874363649) -
                   proc_control_node_B.t67_e * 0.0001303522588356414)) +
                 (((proc_control_node_B.out1_tmp_a5 * -0.0010125044874363649 +
                    proc_control_node_B.out1_tmp_h * 0.0002115171795569455) +
                   proc_control_node_B.out1_tmp_ef * 9.4803055144857715E-7) +
                  out1_tmp * 0.030976977065388711)) + ((proc_control_node_B.t66 *
    0.010033314971702871 + proc_control_node_B.t68_f * 0.0001303522588356414) -
    proc_control_node_B.out1_tmp_k * 0.0031080058823148081)) +
               ((proc_control_node_B.out1_tmp_ne * -0.00032065807093242669 +
                 proc_control_node_B.t5_k * 0.0012787556591776421) -
                proc_control_node_B.t9_b * 0.030976977065388711)) +
              (((proc_control_node_B.t54_k * 0.0040409200239048832 -
                 proc_control_node_B.t63_i * 0.0010125044874363649) +
                proc_control_node_B.t49_f * 0.010033314971702871) -
               proc_control_node_B.t11_c * 9.4803055144857715E-7)) +
             (((proc_control_node_B.t24_l * -0.311032764122789 -
                proc_control_node_B.t45_d * 0.0010125044874363649) -
               proc_control_node_B.t62_k * 0.0001303522588356414) + out1_tmp_0 *
              6.8231348244175949E-6)) + ((proc_control_node_B.t20_d *
    0.031387639110527318 + proc_control_node_B.t26_l * 0.010033314971702871) -
    proc_control_node_B.t48_k * 0.0001303522588356414);
  out1[7] = (((((((((((((((in2[0] * 0.00013975754063522079 + in2[1] *
    7.9244610288113972E-21) + in2[2] * -0.00014157257363048341) + (in2[3] *
    -0.0001409675626320625 - in2[4] * 0.0034249251816346319)) + (in2[5] *
    0.003387750973601051 + in2[6] * 0.0035708122797193441)) + (in2[7] *
    -0.0035336380716857632 + proc_control_node_B.t13_o * 0.00062794504942032621))
                      + ((in2[0] * 1.4142135623730951 * -0.01090649593858282 +
    in2[1] * 1.4142135623730951 * 0.011000123045544621) - in2[2] *
    1.4142135623730951 * 0.01090649593858282)) + ((in2[3] * 1.4142135623730951 *
    0.01090087173345982 - proc_control_node_B.out1_tmp_it * 0.021882274381510681)
    - proc_control_node_B.out1_tmp_im * 2.9388947094905889E-5)) +
                    (((proc_control_node_B.t6_l * 0.02320783323245932 -
                       proc_control_node_B.t12_f * 2.9076309096921531E-5) -
                      proc_control_node_B.t14_p * 0.0001026911824132076) +
                     proc_control_node_B.out1_tmp_o2 * 0.00042780737967584029))
                   + (((proc_control_node_B.out1_tmp_d * 0.0001026911824132076 -
                        proc_control_node_B.out1_tmp_iu * 0.71944283020623911) -
                       proc_control_node_B.out1_tmp_gy * 2.9076309096921531E-5)
                      + proc_control_node_B.out1_tmp_cv * 9.4803055144857715E-7))
                  + (((proc_control_node_B.out1_tmp_ee * -0.00042780737967584029
                       - proc_control_node_B.t67_e * 0.021882274381510681) +
                      proc_control_node_B.out1_tmp_a5 * 0.00042780737967584029)
                     + proc_control_node_B.out1_tmp_h * 0.00090136558200456737))
                 + (((proc_control_node_B.out1_tmp_ef * 0.02320783323245932 +
                      out1_tmp * 9.4803055144857715E-7) +
                     proc_control_node_B.t66 * 0.0001026911824132076) +
                    proc_control_node_B.t68_f * 0.021882274381510681)) +
                ((proc_control_node_B.out1_tmp_k * 9.2539381289009212E-5 -
                  proc_control_node_B.out1_tmp_ne * 0.099357516335518037) +
                 proc_control_node_B.t5_k * 0.2146651116826197)) +
               (((proc_control_node_B.t9_b * -9.4803055144857715E-7 +
                  proc_control_node_B.t54_k * 0.678350505826831) +
                 proc_control_node_B.t63_i * 0.00042780737967584029) +
                proc_control_node_B.t49_f * 0.0001026911824132076)) +
              ((proc_control_node_B.t11_c * -0.02320783323245932 -
                proc_control_node_B.t24_l * 0.0031834266548094372) +
               proc_control_node_B.t45_d * 0.00042780737967584029)) +
             (((proc_control_node_B.t62_k * -0.021882274381510681 + out1_tmp_0 *
                2.9076309096921531E-5) - proc_control_node_B.t20_d *
               0.013262028769951049) + proc_control_node_B.t26_l *
              0.0001026911824132076)) + proc_control_node_B.t48_k *
    -0.021882274381510681;
  out1[8] = ((((((((((((((in2[0] * -1.725827915740819E-6 + in2[1] *
    -5.8281975682474322E-18) + in2[2] * 1.748241265284163E-6) + (in2[3] *
    1.740770148765829E-6 - in2[4] * 0.02095639900015615)) + (in2[5] *
    0.021100316216985739 - in2[6] * 0.021822949502860629)) + (in2[7] *
    0.02167903228603104 - proc_control_node_B.t13_o * 0.00293954998359708)) +
                     ((in2[0] * 1.4142135623730951 * -4.8869263875916949E-5 +
                       in2[1] * 1.4142135623730951 * 6.6264429389244648E-5) -
                      in2[2] * 1.4142135623730951 * 4.8869263875916949E-5)) +
                    (((in2[3] * 1.4142135623730951 * 6.7490056888775055E-5 +
                       proc_control_node_B.out1_tmp_it * 0.002272431716587712) +
                      proc_control_node_B.out1_tmp_im * 0.0002115171795569455) -
                     proc_control_node_B.t6_l * 2.9076309096921531E-5)) +
                   (((proc_control_node_B.t12_f * 0.021384731826702759 +
                      proc_control_node_B.t14_p * 0.00039756137245743289) -
                     proc_control_node_B.out1_tmp_o2 * 5.2828771531483014E-6) -
                    proc_control_node_B.out1_tmp_d * 0.00039756137245743289)) +
                  (((proc_control_node_B.out1_tmp_iu * 0.00090136558200456737 +
                     proc_control_node_B.out1_tmp_gy * 0.021384731826702759) -
                    proc_control_node_B.out1_tmp_cv * 6.8231348244175949E-6) +
                   proc_control_node_B.out1_tmp_ee * 5.2828771531483014E-6)) +
                 (((proc_control_node_B.t67_e * 0.002272431716587712 -
                    proc_control_node_B.out1_tmp_a5 * 5.2828771531483014E-6) -
                   proc_control_node_B.out1_tmp_h * 0.66292668662778553) -
                  proc_control_node_B.out1_tmp_ef * 2.9076309096921531E-5)) +
                ((out1_tmp * -6.8231348244175949E-6 - proc_control_node_B.t66 *
                  0.00039756137245743289) - proc_control_node_B.t68_f *
                 0.002272431716587712)) + ((proc_control_node_B.out1_tmp_k *
    -0.091551392742788118 + proc_control_node_B.out1_tmp_ne *
    0.00012299739396644729) - proc_control_node_B.t5_k * 0.022292555139725449))
              + (((proc_control_node_B.t9_b * 6.8231348244175949E-6 -
                   proc_control_node_B.t54_k * 0.070445383214219059) -
                  proc_control_node_B.t63_i * 5.2828771531483014E-6) -
                 proc_control_node_B.t49_f * 0.00039756137245743289)) +
             (((proc_control_node_B.t11_c * 2.9076309096921531E-5 +
                proc_control_node_B.t24_l * 0.01232440254618042) -
               proc_control_node_B.t45_d * 5.2828771531483014E-6) +
              proc_control_node_B.t62_k * 0.002272431716587712)) + (((out1_tmp_0
    * -0.021384731826702759 + proc_control_node_B.t20_d * 0.00016376919174759729)
    - proc_control_node_B.t26_l * 0.00039756137245743289) +
    proc_control_node_B.t48_k * 0.002272431716587712);
  out1[9] = (((((((((((((((((in2[0] * 0.0013021350951669831 + in2[1] *
    6.1932883292401409E-19) + in2[2] * -0.00131904594055876) + (in2[3] *
    -0.0013134089920948341 - in2[4] * 0.26767193546582568)) + (in2[5] *
    0.26476621250220889 + in2[6] * 0.2790736050389333)) + (in2[7] *
    -0.27616788207531651 + proc_control_node_B.t13_o * 0.058155363974671921)) +
                        ((in2[0] * 1.4142135623730951 * 0.043593198825375247 -
    in2[1] * 1.4142135623730951 * 0.043051831063235027) + in2[2] *
    1.4142135623730951 * 0.043593198825375247)) + ((in2[3] * 1.4142135623730951 *
    -0.043976565543532631 - proc_control_node_B.out1_tmp_it * 1.71018810547529)
    - proc_control_node_B.out1_tmp_im * 0.0040409200239048832)) +
                      ((proc_control_node_B.t6_l * 0.021882274381510681 -
                        proc_control_node_B.t12_f * 0.002272431716587712) -
                       proc_control_node_B.t14_p * 0.0080268590155159435)) +
                     ((proc_control_node_B.out1_tmp_o2 * 0.0039859244840414 +
                       proc_control_node_B.out1_tmp_d * 0.0080268590155159435) -
                      proc_control_node_B.out1_tmp_iu * 0.678350505826831)) +
                    ((proc_control_node_B.out1_tmp_gy * -0.002272431716587712 +
                      proc_control_node_B.out1_tmp_cv * 0.0001303522588356414) -
                     proc_control_node_B.out1_tmp_ee * 0.0039859244840414)) +
                   ((proc_control_node_B.t67_e * -1.71018810547529 +
                     proc_control_node_B.out1_tmp_a5 * 0.0039859244840414) +
                    proc_control_node_B.out1_tmp_h * 0.070445383214219059)) +
                  ((proc_control_node_B.out1_tmp_ef * 0.021882274381510681 +
                    out1_tmp * 0.0001303522588356414) + proc_control_node_B.t66 *
                   0.0080268590155159435)) + ((proc_control_node_B.t68_f *
    1.71018810547529 + proc_control_node_B.out1_tmp_k * 0.0072319766932639751) -
    proc_control_node_B.out1_tmp_ne * 0.0925623192330923)) +
                ((proc_control_node_B.t5_k * 16.7769453147126 -
                  proc_control_node_B.t9_b * 0.0001303522588356414) +
                 proc_control_node_B.t54_k * 53.015831269733987)) +
               ((proc_control_node_B.t63_i * 0.0039859244840414 +
                 proc_control_node_B.t49_f * 0.0080268590155159435) -
                proc_control_node_B.t11_c * 0.021882274381510681)) +
              ((proc_control_node_B.t24_l * -0.2488326294809943 +
                proc_control_node_B.t45_d * 0.0039859244840414) -
               proc_control_node_B.t62_k * 1.71018810547529)) + ((out1_tmp_0 *
    0.002272431716587712 - proc_control_node_B.t20_d * 0.1235636590052834) +
              proc_control_node_B.t26_l * 0.0080268590155159435)) +
    proc_control_node_B.t48_k * -1.71018810547529;
  out1[10] = ((((((((((((((((in2[0] * 5.24748238233168E-7 - in2[1] *
    1.083514276897426E-19) + in2[2] * -5.3156315041823265E-7) + (in2[3] *
    -5.2929151302328333E-7 + in2[4] * 0.10593667623599359)) + (in2[5] *
    0.10537885436940329 - in2[6] * 0.10793139553633729)) + (in2[7] *
    -0.1033841350690595 - proc_control_node_B.t13_o * 4.3185693674649661)) +
                        ((in2[0] * 1.4142135623730951 * 0.013457654526727991 +
    in2[1] * 1.4142135623730951 * 0.013869054980635681) + in2[2] *
    1.4142135623730951 * 0.013457654526727991)) + ((in2[3] * 1.4142135623730951 *
    0.01386868232130781 + proc_control_node_B.out1_tmp_it *
    0.0080268590155159435) + proc_control_node_B.out1_tmp_im * 0.311032764122789))
                      + (((proc_control_node_B.t6_l * -0.0001026911824132076 +
    proc_control_node_B.t12_f * 0.00039756137245743289) +
    proc_control_node_B.t14_p * 0.58374455968341665) +
    proc_control_node_B.out1_tmp_o2 * 1.606290206365557E-6)) +
                     ((proc_control_node_B.out1_tmp_d * -0.58374455968341665 +
                       proc_control_node_B.out1_tmp_iu * 0.0031834266548094372)
                      + proc_control_node_B.out1_tmp_gy * 0.00039756137245743289))
                    + (((proc_control_node_B.out1_tmp_cv * -0.010033314971702871
    - proc_control_node_B.out1_tmp_ee * 1.606290206365557E-6) +
                        proc_control_node_B.t67_e * 0.0080268590155159435) +
                       proc_control_node_B.out1_tmp_a5 * 1.606290206365557E-6))
                   + ((proc_control_node_B.out1_tmp_h * -0.01232440254618042 -
                       proc_control_node_B.out1_tmp_ef * 0.0001026911824132076)
                      - out1_tmp * 0.010033314971702871)) +
                  ((proc_control_node_B.t66 * -0.58374455968341665 -
                    proc_control_node_B.t68_f * 0.0080268590155159435) +
                   proc_control_node_B.out1_tmp_k * 0.180823215198492)) +
                 ((proc_control_node_B.out1_tmp_ne * 0.00044073627942045862 -
                   proc_control_node_B.t5_k * 0.078743486942211408) +
                  proc_control_node_B.t9_b * 0.010033314971702871)) +
                ((proc_control_node_B.t54_k * -0.2488326294809943 +
                  proc_control_node_B.t63_i * 1.606290206365557E-6) -
                 proc_control_node_B.t49_f * 0.58374455968341665)) +
               (((proc_control_node_B.t11_c * 0.0001026911824132076 +
                  proc_control_node_B.t24_l * 18.096081350185919) +
                 proc_control_node_B.t45_d * 1.606290206365557E-6) +
                proc_control_node_B.t62_k * 0.0080268590155159435)) +
              ((out1_tmp_0 * -0.00039756137245743289 - proc_control_node_B.t20_d
                * 4.9794996397332282E-5) - proc_control_node_B.t26_l *
               0.58374455968341665)) + proc_control_node_B.t48_k *
    0.0080268590155159435;
  out1[11] = (((((((((((((((in2[0] * -0.1731941163298826 + in2[1] *
    -1.4397960202092559E-21) + in2[2] * 0.175443390567933) + (in2[3] *
    0.17469363248858291 + in2[4] * 0.00062021813460420567)) + (in2[5] *
    -0.0006207996116589 - in2[6] * 0.00064672437426625525)) + (in2[7] *
    0.00064730585132094889 + proc_control_node_B.t13_o * 0.16330622581837911)) +
                       ((in2[0] * 1.4142135623730951 * 0.00059255494878017434 -
    in2[1] * 1.4142135623730951 * 0.1225770464045467) + in2[2] *
                        1.4142135623730951 * 0.00059255494878017434)) + ((in2[3]
    * 1.4142135623730951 * 0.00041984673608298361 +
    proc_control_node_B.out1_tmp_it * 0.0039859244840414) -
    proc_control_node_B.out1_tmp_im * 0.031387639110527318)) +
                     (((proc_control_node_B.t6_l * -0.00042780737967584029 +
                        proc_control_node_B.t12_f * 5.2828771531483014E-6) -
                       proc_control_node_B.t14_p * 1.606290206365557E-6) -
                      proc_control_node_B.out1_tmp_o2 * 0.53015902215788635)) +
                    (((proc_control_node_B.out1_tmp_d * 1.606290206365557E-6 +
                       proc_control_node_B.out1_tmp_iu * 0.013262028769951049) +
                      proc_control_node_B.out1_tmp_gy * 5.2828771531483014E-6) +
                     proc_control_node_B.out1_tmp_cv * 0.0010125044874363649)) +
                   ((proc_control_node_B.out1_tmp_ee * 0.53015902215788635 +
                     proc_control_node_B.t67_e * 0.0039859244840414) -
                    proc_control_node_B.out1_tmp_a5 * 0.53015902215788635)) +
                  (((proc_control_node_B.out1_tmp_h * -0.00016376919174759729 -
                     proc_control_node_B.out1_tmp_ef * 0.00042780737967584029) +
                    out1_tmp * 0.0010125044874363649) + proc_control_node_B.t66 *
                   1.606290206365557E-6)) + ((proc_control_node_B.t68_f *
    -0.0039859244840414 - proc_control_node_B.out1_tmp_k * 2.3149797019741971E-5)
    - proc_control_node_B.out1_tmp_ne * 0.16393821447242629)) +
                ((proc_control_node_B.t5_k * -0.03910191918844614 -
                  proc_control_node_B.t9_b * 0.0010125044874363649) -
                 proc_control_node_B.t54_k * 0.1235636590052834)) +
               (((proc_control_node_B.t63_i * -0.53015902215788635 +
                  proc_control_node_B.t49_f * 1.606290206365557E-6) +
                 proc_control_node_B.t11_c * 0.00042780737967584029) -
                proc_control_node_B.t24_l * 4.9794996397332282E-5)) +
              ((proc_control_node_B.t45_d * -0.53015902215788635 +
                proc_control_node_B.t62_k * 0.0039859244840414) - out1_tmp_0 *
               5.2828771531483014E-6)) + ((proc_control_node_B.t20_d *
    16.434929686894481 + proc_control_node_B.t26_l * 1.606290206365557E-6) +
    proc_control_node_B.t48_k * 0.0039859244840414);
}

// Function for MATLAB Function: '<S133>/MATLAB Function2'
int32_T proc_control_nodeModelClass::proc_control_node_xgetrfs_c(real_T A[169],
  real_T B[169])
{
  int32_T c_ix;
  int32_T d;
  int32_T ijA;
  int32_T info;
  int32_T iy;
  int32_T jA;
  int8_T ipiv;
  for (c_ix = 0; c_ix < 13; c_ix++) {
    proc_control_node_B.ipiv_c[c_ix] = static_cast<int8_T>(c_ix + 1);
  }

  info = 0;
  for (proc_control_node_B.b_j_m = 0; proc_control_node_B.b_j_m < 12;
       proc_control_node_B.b_j_m++) {
    proc_control_node_B.c_lb = proc_control_node_B.b_j_m * 14;
    jA = 0;
    proc_control_node_B.ix_j = proc_control_node_B.c_lb;
    proc_control_node_B.smax = fabs(A[proc_control_node_B.c_lb]);
    for (iy = 2; iy <= 13 - proc_control_node_B.b_j_m; iy++) {
      proc_control_node_B.ix_j++;
      proc_control_node_B.y_gm = fabs(A[proc_control_node_B.ix_j]);
      if (proc_control_node_B.y_gm > proc_control_node_B.smax) {
        jA = iy - 1;
        proc_control_node_B.smax = proc_control_node_B.y_gm;
      }
    }

    if (A[proc_control_node_B.c_lb + jA] != 0.0) {
      if (jA != 0) {
        c_ix = proc_control_node_B.b_j_m + jA;
        proc_control_node_B.ipiv_c[proc_control_node_B.b_j_m] =
          static_cast<int8_T>(c_ix + 1);
        for (jA = 0; jA < 13; jA++) {
          proc_control_node_B.ix_j = jA * 13 + proc_control_node_B.b_j_m;
          proc_control_node_B.smax = A[proc_control_node_B.ix_j];
          iy = jA * 13 + c_ix;
          A[proc_control_node_B.ix_j] = A[iy];
          A[iy] = proc_control_node_B.smax;
        }
      }

      jA = (proc_control_node_B.c_lb - proc_control_node_B.b_j_m) + 13;
      proc_control_node_B.ix_j = proc_control_node_B.c_lb + 1;
      while (proc_control_node_B.ix_j + 1 <= jA) {
        A[proc_control_node_B.ix_j] /= A[proc_control_node_B.c_lb];
        proc_control_node_B.ix_j++;
      }
    } else {
      info = proc_control_node_B.b_j_m + 1;
    }

    jA = proc_control_node_B.c_lb;
    proc_control_node_B.ix_j = proc_control_node_B.c_lb + 13;
    for (iy = 0; iy <= 11 - proc_control_node_B.b_j_m; iy++) {
      if (A[proc_control_node_B.ix_j] != 0.0) {
        proc_control_node_B.smax = -A[proc_control_node_B.ix_j];
        c_ix = proc_control_node_B.c_lb + 1;
        d = (jA - proc_control_node_B.b_j_m) + 26;
        for (ijA = jA + 14; ijA < d; ijA++) {
          A[ijA] += A[c_ix] * proc_control_node_B.smax;
          c_ix++;
        }
      }

      proc_control_node_B.ix_j += 13;
      jA += 13;
    }
  }

  if ((info == 0) && (!(A[168] != 0.0))) {
    info = 13;
  }

  for (proc_control_node_B.b_j_m = 0; proc_control_node_B.b_j_m < 12;
       proc_control_node_B.b_j_m++) {
    ipiv = proc_control_node_B.ipiv_c[proc_control_node_B.b_j_m];
    if (proc_control_node_B.b_j_m + 1 != ipiv) {
      for (proc_control_node_B.c_lb = 0; proc_control_node_B.c_lb < 13;
           proc_control_node_B.c_lb++) {
        proc_control_node_B.ix_j = 13 * proc_control_node_B.c_lb +
          proc_control_node_B.b_j_m;
        proc_control_node_B.smax = B[proc_control_node_B.ix_j];
        c_ix = (ipiv + 13 * proc_control_node_B.c_lb) - 1;
        B[proc_control_node_B.ix_j] = B[c_ix];
        B[c_ix] = proc_control_node_B.smax;
      }
    }
  }

  for (proc_control_node_B.b_j_m = 0; proc_control_node_B.b_j_m < 13;
       proc_control_node_B.b_j_m++) {
    jA = 13 * proc_control_node_B.b_j_m;
    for (proc_control_node_B.c_lb = 0; proc_control_node_B.c_lb < 13;
         proc_control_node_B.c_lb++) {
      proc_control_node_B.ix_j = 13 * proc_control_node_B.c_lb;
      if (B[proc_control_node_B.c_lb + jA] != 0.0) {
        for (iy = proc_control_node_B.c_lb + 2; iy < 14; iy++) {
          c_ix = (iy + jA) - 1;
          B[c_ix] -= A[(iy + proc_control_node_B.ix_j) - 1] *
            B[proc_control_node_B.c_lb + jA];
        }
      }
    }
  }

  for (proc_control_node_B.b_j_m = 0; proc_control_node_B.b_j_m < 13;
       proc_control_node_B.b_j_m++) {
    jA = 13 * proc_control_node_B.b_j_m;
    for (proc_control_node_B.c_lb = 12; proc_control_node_B.c_lb >= 0;
         proc_control_node_B.c_lb--) {
      proc_control_node_B.ix_j = 13 * proc_control_node_B.c_lb;
      c_ix = proc_control_node_B.c_lb + jA;
      proc_control_node_B.smax = B[c_ix];
      if (proc_control_node_B.smax != 0.0) {
        B[c_ix] = proc_control_node_B.smax / A[proc_control_node_B.c_lb +
          proc_control_node_B.ix_j];
        for (iy = 0; iy < proc_control_node_B.c_lb; iy++) {
          d = iy + jA;
          B[d] -= B[c_ix] * A[iy + proc_control_node_B.ix_j];
        }
      }
    }
  }

  return info;
}

// Function for MATLAB Function: '<S133>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_node_lusolve_e(const real_T A[169],
  const real_T B[169], real_T X[169])
{
  memcpy(&X[0], &B[0], 169U * sizeof(real_T));
  memcpy(&proc_control_node_B.b_A_a[0], &A[0], 169U * sizeof(real_T));
  proc_control_node_xgetrfs_c(proc_control_node_B.b_A_a, X);
}

// Function for MATLAB Function: '<S133>/MATLAB Function2'
void proc_control_nodeModelClass::proc__PadeApproximantOfDegree_k(const real_T
  A[169], uint8_T m, real_T F[169])
{
  for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 13;
       proc_control_node_B.i16++) {
    memset(&proc_control_node_B.A2[proc_control_node_B.i16 * 13], 0, 13U *
           sizeof(real_T));
    for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
         proc_control_node_B.e_k++) {
      for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 13;
           proc_control_node_B.e_k_m++) {
        proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i16 +
          proc_control_node_B.e_k_m;
        proc_control_node_B.A2[proc_control_node_B.A2_tmp] += A[13 *
          proc_control_node_B.e_k + proc_control_node_B.e_k_m] * A[13 *
          proc_control_node_B.i16 + proc_control_node_B.e_k];
      }
    }
  }

  if (m == 3) {
    memcpy(&proc_control_node_B.U_o[0], &proc_control_node_B.A2[0], 169U *
           sizeof(real_T));
    proc_control_node_B.e_k_m = 0;
    proc_control_node_B.A2_tmp = 0;
    for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
         proc_control_node_B.e_k++) {
      memset(&proc_control_node_B.A4_b[proc_control_node_B.A2_tmp], 0, 13U *
             sizeof(real_T));
      proc_control_node_B.U_o[proc_control_node_B.e_k_m] += 60.0;
      proc_control_node_B.e_k_m += 14;
      proc_control_node_B.A2_tmp += 13;
    }

    proc_control_node_B.e_k_m = 0;
    for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
         proc_control_node_B.e_k++) {
      proc_control_node_B.A2_tmp = 0;
      for (proc_control_node_B.i17 = 0; proc_control_node_B.i17 < 13;
           proc_control_node_B.i17++) {
        for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 13;
             proc_control_node_B.i16++) {
          proc_control_node_B.A_tmp = proc_control_node_B.i16 +
            proc_control_node_B.e_k_m;
          proc_control_node_B.A4_b[proc_control_node_B.A_tmp] +=
            A[proc_control_node_B.i16 + proc_control_node_B.A2_tmp] *
            proc_control_node_B.U_o[proc_control_node_B.i17 +
            proc_control_node_B.e_k_m];
        }

        proc_control_node_B.A2_tmp += 13;
      }

      proc_control_node_B.e_k_m += 13;
    }

    for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 169;
         proc_control_node_B.i16++) {
      proc_control_node_B.U_o[proc_control_node_B.i16] =
        proc_control_node_B.A4_b[proc_control_node_B.i16];
      proc_control_node_B.V[proc_control_node_B.i16] = 12.0 *
        proc_control_node_B.A2[proc_control_node_B.i16];
    }

    proc_control_node_B.d_m = 120.0;
  } else {
    for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 13;
         proc_control_node_B.i16++) {
      memset(&proc_control_node_B.A3[proc_control_node_B.i16 * 13], 0, 13U *
             sizeof(real_T));
      for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
           proc_control_node_B.e_k++) {
        for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 13;
             proc_control_node_B.e_k_m++) {
          proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i16 +
            proc_control_node_B.e_k_m;
          proc_control_node_B.A3[proc_control_node_B.A2_tmp] +=
            proc_control_node_B.A2[13 * proc_control_node_B.e_k +
            proc_control_node_B.e_k_m] * proc_control_node_B.A2[13 *
            proc_control_node_B.i16 + proc_control_node_B.e_k];
        }
      }
    }

    if (m == 5) {
      for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 169;
           proc_control_node_B.i16++) {
        proc_control_node_B.U_o[proc_control_node_B.i16] = 420.0 *
          proc_control_node_B.A2[proc_control_node_B.i16] +
          proc_control_node_B.A3[proc_control_node_B.i16];
      }

      proc_control_node_B.e_k_m = 0;
      proc_control_node_B.A2_tmp = 0;
      for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
           proc_control_node_B.e_k++) {
        memset(&proc_control_node_B.A4_b[proc_control_node_B.A2_tmp], 0, 13U *
               sizeof(real_T));
        proc_control_node_B.U_o[proc_control_node_B.e_k_m] += 15120.0;
        proc_control_node_B.e_k_m += 14;
        proc_control_node_B.A2_tmp += 13;
      }

      proc_control_node_B.e_k_m = 0;
      for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
           proc_control_node_B.e_k++) {
        proc_control_node_B.A2_tmp = 0;
        for (proc_control_node_B.i17 = 0; proc_control_node_B.i17 < 13;
             proc_control_node_B.i17++) {
          for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 13;
               proc_control_node_B.i16++) {
            proc_control_node_B.A_tmp = proc_control_node_B.i16 +
              proc_control_node_B.e_k_m;
            proc_control_node_B.A4_b[proc_control_node_B.A_tmp] +=
              A[proc_control_node_B.i16 + proc_control_node_B.A2_tmp] *
              proc_control_node_B.U_o[proc_control_node_B.i17 +
              proc_control_node_B.e_k_m];
          }

          proc_control_node_B.A2_tmp += 13;
        }

        proc_control_node_B.e_k_m += 13;
      }

      for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 169;
           proc_control_node_B.i16++) {
        proc_control_node_B.U_o[proc_control_node_B.i16] =
          proc_control_node_B.A4_b[proc_control_node_B.i16];
        proc_control_node_B.V[proc_control_node_B.i16] = 30.0 *
          proc_control_node_B.A3[proc_control_node_B.i16] + 3360.0 *
          proc_control_node_B.A2[proc_control_node_B.i16];
      }

      proc_control_node_B.d_m = 30240.0;
    } else {
      for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 13;
           proc_control_node_B.i16++) {
        memset(&proc_control_node_B.A4[proc_control_node_B.i16 * 13], 0, 13U *
               sizeof(real_T));
        for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
             proc_control_node_B.e_k++) {
          for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 13;
               proc_control_node_B.e_k_m++) {
            proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i16 +
              proc_control_node_B.e_k_m;
            proc_control_node_B.A4[proc_control_node_B.A2_tmp] +=
              proc_control_node_B.A3[13 * proc_control_node_B.e_k +
              proc_control_node_B.e_k_m] * proc_control_node_B.A2[13 *
              proc_control_node_B.i16 + proc_control_node_B.e_k];
          }
        }
      }

      switch (m) {
       case 7:
        for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 169;
             proc_control_node_B.i16++) {
          proc_control_node_B.U_o[proc_control_node_B.i16] = (1512.0 *
            proc_control_node_B.A3[proc_control_node_B.i16] +
            proc_control_node_B.A4[proc_control_node_B.i16]) + 277200.0 *
            proc_control_node_B.A2[proc_control_node_B.i16];
        }

        proc_control_node_B.e_k_m = 0;
        proc_control_node_B.A2_tmp = 0;
        for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
             proc_control_node_B.e_k++) {
          memset(&proc_control_node_B.A4_b[proc_control_node_B.A2_tmp], 0, 13U *
                 sizeof(real_T));
          proc_control_node_B.U_o[proc_control_node_B.e_k_m] += 8.64864E+6;
          proc_control_node_B.e_k_m += 14;
          proc_control_node_B.A2_tmp += 13;
        }

        proc_control_node_B.e_k_m = 0;
        for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
             proc_control_node_B.e_k++) {
          proc_control_node_B.A2_tmp = 0;
          for (proc_control_node_B.i17 = 0; proc_control_node_B.i17 < 13;
               proc_control_node_B.i17++) {
            for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 13;
                 proc_control_node_B.i16++) {
              proc_control_node_B.A_tmp = proc_control_node_B.i16 +
                proc_control_node_B.e_k_m;
              proc_control_node_B.A4_b[proc_control_node_B.A_tmp] +=
                A[proc_control_node_B.i16 + proc_control_node_B.A2_tmp] *
                proc_control_node_B.U_o[proc_control_node_B.i17 +
                proc_control_node_B.e_k_m];
            }

            proc_control_node_B.A2_tmp += 13;
          }

          proc_control_node_B.e_k_m += 13;
        }

        for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 169;
             proc_control_node_B.i16++) {
          proc_control_node_B.U_o[proc_control_node_B.i16] =
            proc_control_node_B.A4_b[proc_control_node_B.i16];
          proc_control_node_B.V[proc_control_node_B.i16] = (56.0 *
            proc_control_node_B.A4[proc_control_node_B.i16] + 25200.0 *
            proc_control_node_B.A3[proc_control_node_B.i16]) + 1.99584E+6 *
            proc_control_node_B.A2[proc_control_node_B.i16];
        }

        proc_control_node_B.d_m = 1.729728E+7;
        break;

       case 9:
        for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 13;
             proc_control_node_B.i16++) {
          memset(&proc_control_node_B.V[proc_control_node_B.i16 * 13], 0, 13U *
                 sizeof(real_T));
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 13;
                 proc_control_node_B.e_k_m++) {
              proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i16 +
                proc_control_node_B.e_k_m;
              proc_control_node_B.V[proc_control_node_B.A2_tmp] +=
                proc_control_node_B.A4[13 * proc_control_node_B.e_k +
                proc_control_node_B.e_k_m] * proc_control_node_B.A2[13 *
                proc_control_node_B.i16 + proc_control_node_B.e_k];
            }
          }
        }

        for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 169;
             proc_control_node_B.i16++) {
          proc_control_node_B.U_o[proc_control_node_B.i16] = ((3960.0 *
            proc_control_node_B.A4[proc_control_node_B.i16] +
            proc_control_node_B.V[proc_control_node_B.i16]) + 2.16216E+6 *
            proc_control_node_B.A3[proc_control_node_B.i16]) + 3.027024E+8 *
            proc_control_node_B.A2[proc_control_node_B.i16];
        }

        proc_control_node_B.e_k_m = 0;
        proc_control_node_B.A2_tmp = 0;
        for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
             proc_control_node_B.e_k++) {
          memset(&proc_control_node_B.A4_b[proc_control_node_B.A2_tmp], 0, 13U *
                 sizeof(real_T));
          proc_control_node_B.U_o[proc_control_node_B.e_k_m] += 8.8216128E+9;
          proc_control_node_B.e_k_m += 14;
          proc_control_node_B.A2_tmp += 13;
        }

        proc_control_node_B.e_k_m = 0;
        for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
             proc_control_node_B.e_k++) {
          proc_control_node_B.A2_tmp = 0;
          for (proc_control_node_B.i17 = 0; proc_control_node_B.i17 < 13;
               proc_control_node_B.i17++) {
            for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 13;
                 proc_control_node_B.i16++) {
              proc_control_node_B.A_tmp = proc_control_node_B.i16 +
                proc_control_node_B.e_k_m;
              proc_control_node_B.A4_b[proc_control_node_B.A_tmp] +=
                A[proc_control_node_B.i16 + proc_control_node_B.A2_tmp] *
                proc_control_node_B.U_o[proc_control_node_B.i17 +
                proc_control_node_B.e_k_m];
            }

            proc_control_node_B.A2_tmp += 13;
          }

          proc_control_node_B.e_k_m += 13;
        }

        for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 169;
             proc_control_node_B.i16++) {
          proc_control_node_B.U_o[proc_control_node_B.i16] =
            proc_control_node_B.A4_b[proc_control_node_B.i16];
          proc_control_node_B.V[proc_control_node_B.i16] = ((90.0 *
            proc_control_node_B.V[proc_control_node_B.i16] + 110880.0 *
            proc_control_node_B.A4[proc_control_node_B.i16]) + 3.027024E+7 *
            proc_control_node_B.A3[proc_control_node_B.i16]) + 2.0756736E+9 *
            proc_control_node_B.A2[proc_control_node_B.i16];
        }

        proc_control_node_B.d_m = 1.76432256E+10;
        break;

       default:
        for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 169;
             proc_control_node_B.i16++) {
          proc_control_node_B.U_o[proc_control_node_B.i16] = (3.352212864E+10 *
            proc_control_node_B.A4[proc_control_node_B.i16] + 1.05594705216E+13 *
            proc_control_node_B.A3[proc_control_node_B.i16]) +
            1.1873537964288E+15 * proc_control_node_B.A2[proc_control_node_B.i16];
        }

        proc_control_node_B.e_k_m = 0;
        for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
             proc_control_node_B.e_k++) {
          proc_control_node_B.U_o[proc_control_node_B.e_k_m] +=
            3.238237626624E+16;
          proc_control_node_B.e_k_m += 14;
        }

        for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 169;
             proc_control_node_B.i16++) {
          proc_control_node_B.V[proc_control_node_B.i16] = (16380.0 *
            proc_control_node_B.A3[proc_control_node_B.i16] +
            proc_control_node_B.A4[proc_control_node_B.i16]) + 4.08408E+7 *
            proc_control_node_B.A2[proc_control_node_B.i16];
        }

        for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 13;
             proc_control_node_B.i16++) {
          proc_control_node_B.e_k_m = 0;
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            proc_control_node_B.d_m = 0.0;
            proc_control_node_B.A2_tmp = 0;
            for (proc_control_node_B.i17 = 0; proc_control_node_B.i17 < 13;
                 proc_control_node_B.i17++) {
              proc_control_node_B.d_m +=
                proc_control_node_B.A4[proc_control_node_B.A2_tmp +
                proc_control_node_B.i16] *
                proc_control_node_B.V[proc_control_node_B.i17 +
                proc_control_node_B.e_k_m];
              proc_control_node_B.A2_tmp += 13;
            }

            proc_control_node_B.A2_tmp = proc_control_node_B.e_k_m +
              proc_control_node_B.i16;
            proc_control_node_B.A4_b[proc_control_node_B.A2_tmp] =
              proc_control_node_B.U_o[proc_control_node_B.A2_tmp] +
              proc_control_node_B.d_m;
            proc_control_node_B.e_k_m += 13;
          }
        }

        for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 13;
             proc_control_node_B.i16++) {
          memset(&proc_control_node_B.U_o[proc_control_node_B.i16 * 13], 0, 13U *
                 sizeof(real_T));
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            for (proc_control_node_B.e_k_m = 0; proc_control_node_B.e_k_m < 13;
                 proc_control_node_B.e_k_m++) {
              proc_control_node_B.A2_tmp = 13 * proc_control_node_B.i16 +
                proc_control_node_B.e_k_m;
              proc_control_node_B.U_o[proc_control_node_B.A2_tmp] += A[13 *
                proc_control_node_B.e_k + proc_control_node_B.e_k_m] *
                proc_control_node_B.A4_b[13 * proc_control_node_B.i16 +
                proc_control_node_B.e_k];
            }
          }
        }

        for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 169;
             proc_control_node_B.i16++) {
          proc_control_node_B.A4_b[proc_control_node_B.i16] = (182.0 *
            proc_control_node_B.A4[proc_control_node_B.i16] + 960960.0 *
            proc_control_node_B.A3[proc_control_node_B.i16]) + 1.32324192E+9 *
            proc_control_node_B.A2[proc_control_node_B.i16];
        }

        for (proc_control_node_B.i16 = 0; proc_control_node_B.i16 < 13;
             proc_control_node_B.i16++) {
          proc_control_node_B.e_k_m = 0;
          for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
               proc_control_node_B.e_k++) {
            proc_control_node_B.d_m = 0.0;
            proc_control_node_B.A2_tmp = 0;
            for (proc_control_node_B.i17 = 0; proc_control_node_B.i17 < 13;
                 proc_control_node_B.i17++) {
              proc_control_node_B.d_m +=
                proc_control_node_B.A4[proc_control_node_B.A2_tmp +
                proc_control_node_B.i16] *
                proc_control_node_B.A4_b[proc_control_node_B.i17 +
                proc_control_node_B.e_k_m];
              proc_control_node_B.A2_tmp += 13;
            }

            proc_control_node_B.A2_tmp = proc_control_node_B.e_k_m +
              proc_control_node_B.i16;
            proc_control_node_B.V[proc_control_node_B.A2_tmp] =
              ((proc_control_node_B.A4[proc_control_node_B.A2_tmp] *
                6.704425728E+11 + proc_control_node_B.d_m) +
               proc_control_node_B.A3[proc_control_node_B.A2_tmp] *
               1.29060195264E+14) +
              proc_control_node_B.A2[proc_control_node_B.A2_tmp] *
              7.7717703038976E+15;
            proc_control_node_B.e_k_m += 13;
          }
        }

        proc_control_node_B.d_m = 6.476475253248E+16;
        break;
      }
    }
  }

  proc_control_node_B.e_k_m = 0;
  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
       proc_control_node_B.e_k++) {
    proc_control_node_B.V[proc_control_node_B.e_k_m] += proc_control_node_B.d_m;
    proc_control_node_B.e_k_m += 14;
  }

  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 169;
       proc_control_node_B.e_k++) {
    proc_control_node_B.V[proc_control_node_B.e_k] -=
      proc_control_node_B.U_o[proc_control_node_B.e_k];
    proc_control_node_B.U_o[proc_control_node_B.e_k] *= 2.0;
  }

  proc_control_node_lusolve_e(proc_control_node_B.V, proc_control_node_B.U_o, F);
  proc_control_node_B.e_k_m = 0;
  for (proc_control_node_B.e_k = 0; proc_control_node_B.e_k < 13;
       proc_control_node_B.e_k++) {
    F[proc_control_node_B.e_k_m]++;
    proc_control_node_B.e_k_m += 14;
  }
}

// Function for MATLAB Function: '<S133>/MATLAB Function2'
void proc_control_nodeModelClass::proc_control_node_expm(real_T A[169], real_T
  F[169])
{
  static const real_T theta[5] = { 0.01495585217958292, 0.253939833006323,
    0.95041789961629319, 2.097847961257068, 5.3719203511481517 };

  static const uint8_T b[5] = { 3U, 5U, 7U, 9U, 13U };

  boolean_T exitg1;
  proc_control_node_B.normA = 0.0;
  proc_control_node_B.b_j = 0;
  exitg1 = false;
  while ((!exitg1) && (proc_control_node_B.b_j < 13)) {
    proc_control_node_B.b_s = 0.0;
    for (proc_control_node_B.b_i_p = 0; proc_control_node_B.b_i_p < 13;
         proc_control_node_B.b_i_p++) {
      proc_control_node_B.b_s += fabs(A[13 * proc_control_node_B.b_j +
        proc_control_node_B.b_i_p]);
    }

    if (rtIsNaN(proc_control_node_B.b_s)) {
      proc_control_node_B.normA = (rtNaN);
      exitg1 = true;
    } else {
      if (proc_control_node_B.b_s > proc_control_node_B.normA) {
        proc_control_node_B.normA = proc_control_node_B.b_s;
      }

      proc_control_node_B.b_j++;
    }
  }

  if (proc_control_node_B.normA <= 5.3719203511481517) {
    proc_control_node_B.b_j = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.b_j < 5)) {
      if (proc_control_node_B.normA <= theta[proc_control_node_B.b_j]) {
        proc__PadeApproximantOfDegree_k(A, b[proc_control_node_B.b_j], F);
        exitg1 = true;
      } else {
        proc_control_node_B.b_j++;
      }
    }
  } else {
    proc_control_node_B.b_s = proc_control_node_B.normA / 5.3719203511481517;
    if ((!rtIsInf(proc_control_node_B.b_s)) && (!rtIsNaN(proc_control_node_B.b_s)))
    {
      proc_control_node_B.b_s = frexp(proc_control_node_B.b_s,
        &proc_control_node_B.e_fd);
    } else {
      proc_control_node_B.e_fd = 0;
    }

    proc_control_node_B.normA = proc_control_node_B.e_fd;
    if (proc_control_node_B.b_s == 0.5) {
      proc_control_node_B.normA = static_cast<real_T>(proc_control_node_B.e_fd)
        - 1.0;
    }

    proc_control_node_B.b_s = rt_powd_snf(2.0, proc_control_node_B.normA);
    for (proc_control_node_B.b_i_p = 0; proc_control_node_B.b_i_p < 169;
         proc_control_node_B.b_i_p++) {
      A[proc_control_node_B.b_i_p] /= proc_control_node_B.b_s;
    }

    proc__PadeApproximantOfDegree_k(A, 13, F);
    proc_control_node_B.b_j = 0;
    while (proc_control_node_B.b_j <= static_cast<int32_T>
           (proc_control_node_B.normA) - 1) {
      for (proc_control_node_B.b_i_p = 0; proc_control_node_B.b_i_p < 13;
           proc_control_node_B.b_i_p++) {
        proc_control_node_B.e_fd = 0;
        for (proc_control_node_B.i13 = 0; proc_control_node_B.i13 < 13;
             proc_control_node_B.i13++) {
          proc_control_node_B.F_tmp = proc_control_node_B.e_fd +
            proc_control_node_B.b_i_p;
          proc_control_node_B.F[proc_control_node_B.F_tmp] = 0.0;
          proc_control_node_B.i15 = 0;
          for (proc_control_node_B.i14 = 0; proc_control_node_B.i14 < 13;
               proc_control_node_B.i14++) {
            proc_control_node_B.F[proc_control_node_B.F_tmp] +=
              F[proc_control_node_B.i15 + proc_control_node_B.b_i_p] *
              F[proc_control_node_B.i14 + proc_control_node_B.e_fd];
            proc_control_node_B.i15 += 13;
          }

          proc_control_node_B.e_fd += 13;
        }
      }

      memcpy(&F[0], &proc_control_node_B.F[0], 169U * sizeof(real_T));
      proc_control_node_B.b_j++;
    }
  }
}

// Function for MATLAB Function: '<S211>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control__mpc_plantupdate_k(const real_T
  a[169], real_T b[104], const real_T c[169], real_T b_A[441], real_T b_B[630],
  real_T b_C[273], const real_T b_D[390], const real_T b_mvindex[8], const
  real_T b_myindex[13], const real_T b_Uscale[8], const real_T b_Yscale[13],
  real_T Bu[168], real_T Bv[21], real_T Cm[273], real_T Dv[13], real_T Dvm[13],
  real_T QQ[441], real_T RR[169], real_T NN[273])
{
  int32_T b_tmp;
  int32_T i;
  int32_T i_0;
  int32_T i_1;
  int32_T tmp;
  i_1 = 0;
  for (i_0 = 0; i_0 < 8; i_0++) {
    for (i = 0; i < 13; i++) {
      b_tmp = i + i_1;
      b[b_tmp] *= b_Uscale[i_0];
    }

    i_1 += 13;
  }

  i_1 = 0;
  i_0 = 0;
  for (i = 0; i < 13; i++) {
    for (b_tmp = 0; b_tmp < 13; b_tmp++) {
      tmp = b_tmp + i_1;
      b_C[tmp] = c[tmp] / b_Yscale[b_tmp];
      b_A[b_tmp + i_0] = a[tmp];
    }

    i_1 += 13;
    i_0 += 21;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
      b_B[i_0 + 21 * i_1] = b[(static_cast<int32_T>(b_mvindex[i_1]) - 1) * 13 +
        i_0];
    }

    memcpy(&Bu[i_1 * 21], &b_B[i_1 * 21], 21U * sizeof(real_T));
  }

  for (i_1 = 0; i_1 < 21; i_1++) {
    Bv[i_1] = b_B[i_1 + 168];
    for (i_0 = 0; i_0 < 13; i_0++) {
      Cm[i_0 + 13 * i_1] = b_C[(13 * i_1 + static_cast<int32_T>(b_myindex[i_0]))
        - 1];
    }
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    Dv[i_1] = b_D[i_1 + 104];
    Dvm[i_1] = b_D[static_cast<int32_T>(b_myindex[i_1]) + 103];
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    proc_control_node_B.UnknownIn[i_1] = 0;
  }

  for (i_1 = 0; i_1 < 8; i_1++) {
    proc_control_node_B.UnknownIn[i_1] = static_cast<int8_T>(i_1 + 1);
  }

  for (i_1 = 0; i_1 < 21; i_1++) {
    proc_control_node_B.UnknownIn[i_1 + 8] = static_cast<int8_T>(i_1 + 10);
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    for (i_0 = 0; i_0 < 21; i_0++) {
      proc_control_node_B.b_B[i_0 + 34 * i_1] = b_B
        [(proc_control_node_B.UnknownIn[i_1] - 1) * 21 + i_0];
    }
  }

  for (i_1 = 0; i_1 < 29; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
      proc_control_node_B.b_B[(i_0 + 34 * i_1) + 21] = b_D
        [((proc_control_node_B.UnknownIn[i_1] - 1) * 13 + static_cast<int32_T>
          (b_myindex[i_0])) - 1];
    }
  }

  for (i_1 = 0; i_1 < 21; i_1++) {
    for (i_0 = 0; i_0 < 29; i_0++) {
      proc_control_node_B.b_B_b[i_0 + 29 * i_1] = b_B
        [(proc_control_node_B.UnknownIn[i_0] - 1) * 21 + i_1];
    }
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    for (i_0 = 0; i_0 < 29; i_0++) {
      proc_control_node_B.b_B_b[i_0 + 29 * (i_1 + 21)] = b_D
        [((proc_control_node_B.UnknownIn[i_0] - 1) * 13 + static_cast<int32_T>
          (b_myindex[i_1])) - 1];
    }
  }

  for (i_1 = 0; i_1 < 34; i_1++) {
    memset(&proc_control_node_B.CovMat[i_1 * 34], 0, 34U * sizeof(real_T));
    for (i = 0; i < 29; i++) {
      for (i_0 = 0; i_0 < 34; i_0++) {
        b_tmp = 34 * i_1 + i_0;
        proc_control_node_B.CovMat[b_tmp] += proc_control_node_B.b_B[34 * i +
          i_0] * proc_control_node_B.b_B_b[29 * i_1 + i];
      }
    }
  }

  i_1 = 0;
  i_0 = 0;
  for (i = 0; i < 21; i++) {
    memcpy(&QQ[i_1], &proc_control_node_B.CovMat[i_0], 21U * sizeof(real_T));
    i_1 += 21;
    i_0 += 34;
  }

  for (i_1 = 0; i_1 < 13; i_1++) {
    memcpy(&RR[i_1 * 13], &proc_control_node_B.CovMat[i_1 * 34 + 735], 13U *
           sizeof(real_T));
    memcpy(&NN[i_1 * 21], &proc_control_node_B.CovMat[i_1 * 34 + 714], 21U *
           sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S211>/FixedHorizonOptimizer'
real_T proc_control_nodeModelClass::proc_control_node_mod_b(real_T x)
{
  real_T r;
  if (rtIsNaN(x)) {
    r = (rtNaN);
  } else if (rtIsInf(x)) {
    r = (rtNaN);
  } else if (x == 0.0) {
    r = 0.0;
  } else {
    r = fmod(x, proc_control_node_ny_f);
    if (r == 0.0) {
      r = 0.0;
    } else if (x < 0.0) {
      r += proc_control_node_ny_f;
    }
  }

  return r;
}

// Function for MATLAB Function: '<S211>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_co_mpc_updateFromNominal_h(real_T b_Mlim
  [48], const real_T b_Mrows[48], const real_T U0[8], const real_T b_Uscale[8],
  const real_T old_mvoff[8], const real_T b_mvindex[8], real_T b_utarget[80],
  const real_T Y0[13], const real_T b_Yscale[13], const real_T old_yoff[13],
  const real_T b_myindex[13], const real_T X0[13], real_T b_xoff[21], const
  real_T DX0[13], real_T Bv[231], real_T new_mvoff[8], real_T new_yoff[13],
  real_T new_myoff[13])
{
  real_T U;
  int32_T b_ct;
  int32_T b_utarget_tmp;
  int32_T i;
  for (i = 0; i < 8; i++) {
    proc_control_node_B.U_js[i] = U0[i] / b_Uscale[i];
  }

  for (i = 0; i < 13; i++) {
    new_yoff[i] = Y0[i] / b_Yscale[i];
  }

  for (i = 0; i < 8; i++) {
    proc_control_node_B.k = b_mvindex[i];
    new_mvoff[i] = U0[static_cast<int32_T>(proc_control_node_B.k) - 1] /
      b_Uscale[static_cast<int32_T>(proc_control_node_B.k) - 1];
  }

  for (i = 0; i < 13; i++) {
    new_myoff[i] = new_yoff[static_cast<int32_T>(b_myindex[i]) - 1];
  }

  for (b_ct = 0; b_ct < 48; b_ct++) {
    proc_control_node_B.k = b_Mrows[b_ct];
    if (proc_control_node_B.k <= 130.0) {
      proc_control_node_B.k = proc_control_node_mod_b(proc_control_node_B.k -
        1.0) + 1.0;
      b_Mlim[b_ct] += old_yoff[static_cast<int32_T>(proc_control_node_B.k) - 1]
        - new_yoff[static_cast<int32_T>(proc_control_node_B.k) - 1];
    } else if (proc_control_node_B.k <= 260.0) {
      proc_control_node_B.k = proc_control_node_mod_b((proc_control_node_B.k -
        130.0) - 1.0) + 1.0;
      b_Mlim[b_ct] -= old_yoff[static_cast<int32_T>(proc_control_node_B.k) - 1]
        - new_yoff[static_cast<int32_T>(proc_control_node_B.k) - 1];
    } else if (proc_control_node_B.k <= 340.0) {
      proc_control_node_B.k = proc_control_node_mod_n((proc_control_node_B.k -
        260.0) - 1.0) + 1.0;
      b_Mlim[b_ct] += old_mvoff[static_cast<int32_T>(proc_control_node_B.k) - 1]
        - proc_control_node_B.U_js[static_cast<int32_T>(b_mvindex
        [static_cast<int32_T>(proc_control_node_B.k) - 1]) - 1];
    } else if (proc_control_node_B.k <= 420.0) {
      proc_control_node_B.k = proc_control_node_mod_n(((proc_control_node_B.k -
        260.0) - 80.0) - 1.0) + 1.0;
      b_Mlim[b_ct] -= old_mvoff[static_cast<int32_T>(proc_control_node_B.k) - 1]
        - proc_control_node_B.U_js[static_cast<int32_T>(b_mvindex
        [static_cast<int32_T>(proc_control_node_B.k) - 1]) - 1];
    }
  }

  for (b_ct = 0; b_ct < 8; b_ct++) {
    proc_control_node_B.k = old_mvoff[b_ct];
    U = proc_control_node_B.U_js[static_cast<int32_T>(b_mvindex[b_ct]) - 1];
    for (i = 0; i < 10; i++) {
      b_utarget_tmp = (i << 3) + b_ct;
      b_utarget[b_utarget_tmp] = (b_utarget[b_utarget_tmp] +
        proc_control_node_B.k) - U;
    }
  }

  memcpy(&b_xoff[0], &X0[0], 13U * sizeof(real_T));
  memcpy(&Bv[0], &DX0[0], 13U * sizeof(real_T));
}

// Function for MATLAB Function: '<S211>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_contr_mpc_constraintcoef_m(const real_T
  b_A[441], const real_T Bu[168], const real_T Bv[21], const real_T b_C[273],
  const real_T Dv[13], const real_T b_Jm[1920], real_T b_SuJm[3120], real_T
  b_Sx[2730], real_T b_Su1[1040], real_T b_Hv[1430])
{
  int32_T CA_tmp;
  int32_T i_0;
  int32_T i_1;
  int32_T i_2;
  int32_T tmp;
  uint8_T i;
  for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 21;
       proc_control_node_B.i8++) {
    memset(&proc_control_node_B.CA[proc_control_node_B.i8 * 13], 0, 13U * sizeof
           (real_T));
    for (i_0 = 0; i_0 < 21; i_0++) {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 13;
           proc_control_node_B.i7++) {
        CA_tmp = 13 * proc_control_node_B.i8 + proc_control_node_B.i7;
        proc_control_node_B.CA[CA_tmp] += b_C[13 * i_0 + proc_control_node_B.i7]
          * b_A[21 * proc_control_node_B.i8 + i_0];
      }
    }
  }

  for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 8;
       proc_control_node_B.i8++) {
    memset(&proc_control_node_B.Sum_i[proc_control_node_B.i8 * 13], 0, 13U *
           sizeof(real_T));
    for (i_0 = 0; i_0 < 21; i_0++) {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 13;
           proc_control_node_B.i7++) {
        CA_tmp = 13 * proc_control_node_B.i8 + proc_control_node_B.i7;
        proc_control_node_B.Sum_i[CA_tmp] += b_C[13 * i_0 +
          proc_control_node_B.i7] * Bu[21 * proc_control_node_B.i8 + i_0];
      }
    }
  }

  memset(&proc_control_node_B.b_C_da[0], 0, 13U * sizeof(real_T));
  proc_control_node_B.i7 = 0;
  for (i_0 = 0; i_0 < 21; i_0++) {
    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 13;
         proc_control_node_B.i8++) {
      proc_control_node_B.b_C_da[proc_control_node_B.i8] +=
        b_C[proc_control_node_B.i8 + proc_control_node_B.i7] * Bv[i_0];
    }

    proc_control_node_B.i7 += 13;
  }

  for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 13;
       proc_control_node_B.i8++) {
    b_Hv[proc_control_node_B.i8] =
      proc_control_node_B.b_C_da[proc_control_node_B.i8];
    b_Hv[proc_control_node_B.i8 + 130] = Dv[proc_control_node_B.i8];
  }

  proc_control_node_B.i8 = 0;
  for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 9;
       proc_control_node_B.i7++) {
    memset(&b_Hv[proc_control_node_B.i8 + 260], 0, 13U * sizeof(real_T));
    proc_control_node_B.i8 += 130;
  }

  proc_control_node_B.i8 = 0;
  for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 11;
       proc_control_node_B.i7++) {
    memset(&b_Hv[proc_control_node_B.i8 + 13], 0, 117U * sizeof(real_T));
    proc_control_node_B.i8 += 130;
  }

  for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 21;
       proc_control_node_B.i8++) {
    memcpy(&b_Sx[proc_control_node_B.i8 * 130],
           &proc_control_node_B.CA[proc_control_node_B.i8 * 13], 13U * sizeof
           (real_T));
    memset(&b_Sx[proc_control_node_B.i8 * 130 + 13], 0, 117U * sizeof(real_T));
  }

  for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 8;
       proc_control_node_B.i8++) {
    memcpy(&b_Su1[proc_control_node_B.i8 * 130],
           &proc_control_node_B.Sum_i[proc_control_node_B.i8 * 13], 13U * sizeof
           (real_T));
    memset(&b_Su1[proc_control_node_B.i8 * 130 + 13], 0, 117U * sizeof(real_T));
    memcpy(&proc_control_node_B.Su[proc_control_node_B.i8 * 130],
           &proc_control_node_B.Sum_i[proc_control_node_B.i8 * 13], 13U * sizeof
           (real_T));
  }

  proc_control_node_B.i8 = 0;
  for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 72;
       proc_control_node_B.i7++) {
    memset(&proc_control_node_B.Su[proc_control_node_B.i8 + 1040], 0, 13U *
           sizeof(real_T));
    proc_control_node_B.i8 += 130;
  }

  proc_control_node_B.i8 = 0;
  for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 80;
       proc_control_node_B.i7++) {
    memset(&proc_control_node_B.Su[proc_control_node_B.i8 + 13], 0, 117U *
           sizeof(real_T));
    proc_control_node_B.i8 += 130;
  }

  for (proc_control_node_B.i_p = 0; proc_control_node_B.i_p < 9;
       proc_control_node_B.i_p++) {
    i = static_cast<uint8_T>((proc_control_node_B.i_p + 1) * 13U + 1U);
    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 13;
         proc_control_node_B.i8++) {
      proc_control_node_B.rows[proc_control_node_B.i8] = static_cast<uint8_T>(
        static_cast<uint32_T>(proc_control_node_B.i8) + i);
      proc_control_node_B.i7 = 0;
      i_0 = 0;
      for (i_1 = 0; i_1 < 8; i_1++) {
        proc_control_node_B.Sum_h = 0.0;
        tmp = 0;
        for (i_2 = 0; i_2 < 21; i_2++) {
          proc_control_node_B.Sum_h += proc_control_node_B.CA[tmp +
            proc_control_node_B.i8] * Bu[i_2 + i_0];
          tmp += 13;
        }

        CA_tmp = proc_control_node_B.i7 + proc_control_node_B.i8;
        proc_control_node_B.Sum_i[CA_tmp] += proc_control_node_B.Sum_h;
        proc_control_node_B.i7 += 13;
        i_0 += 21;
      }
    }

    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 8;
         proc_control_node_B.i8++) {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 13;
           proc_control_node_B.i7++) {
        CA_tmp = 13 * proc_control_node_B.i8 + proc_control_node_B.i7;
        proc_control_node_B.Sum_h = proc_control_node_B.Sum_i[CA_tmp];
        b_Su1[(proc_control_node_B.rows[proc_control_node_B.i7] + 130 *
               proc_control_node_B.i8) - 1] = proc_control_node_B.Sum_h;
        proc_control_node_B.Sum_d[CA_tmp] = proc_control_node_B.Sum_h;
      }
    }

    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 72;
         proc_control_node_B.i8++) {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 13;
           proc_control_node_B.i7++) {
        proc_control_node_B.Sum_d[proc_control_node_B.i7 + 13 *
          (proc_control_node_B.i8 + 8)] = proc_control_node_B.Su[(130 *
          proc_control_node_B.i8 +
          proc_control_node_B.rows[proc_control_node_B.i7]) - 14];
      }
    }

    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 80;
         proc_control_node_B.i8++) {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 13;
           proc_control_node_B.i7++) {
        proc_control_node_B.Su[(proc_control_node_B.rows[proc_control_node_B.i7]
          + 130 * proc_control_node_B.i8) - 1] = proc_control_node_B.Sum_d[13 *
          proc_control_node_B.i8 + proc_control_node_B.i7];
      }
    }

    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 13;
         proc_control_node_B.i8++) {
      proc_control_node_B.b_C_da[proc_control_node_B.i8] = 0.0;
      proc_control_node_B.i7 = 0;
      for (i_0 = 0; i_0 < 21; i_0++) {
        proc_control_node_B.b_C_da[proc_control_node_B.i8] +=
          proc_control_node_B.CA[proc_control_node_B.i7 + proc_control_node_B.i8]
          * Bv[i_0];
        proc_control_node_B.i7 += 13;
      }

      proc_control_node_B.CA_ie[proc_control_node_B.i8] =
        proc_control_node_B.b_C_da[proc_control_node_B.i8];
    }

    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 10;
         proc_control_node_B.i8++) {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 13;
           proc_control_node_B.i7++) {
        proc_control_node_B.CA_ie[proc_control_node_B.i7 + 13 *
          (proc_control_node_B.i8 + 1)] = b_Hv[(130 * proc_control_node_B.i8 +
          proc_control_node_B.rows[proc_control_node_B.i7]) - 14];
      }
    }

    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 11;
         proc_control_node_B.i8++) {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 13;
           proc_control_node_B.i7++) {
        b_Hv[(proc_control_node_B.rows[proc_control_node_B.i7] + 130 *
              proc_control_node_B.i8) - 1] = proc_control_node_B.CA_ie[13 *
          proc_control_node_B.i8 + proc_control_node_B.i7];
      }
    }

    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 13;
         proc_control_node_B.i8++) {
      proc_control_node_B.i7 = 0;
      i_0 = 0;
      for (i_1 = 0; i_1 < 21; i_1++) {
        CA_tmp = proc_control_node_B.i7 + proc_control_node_B.i8;
        proc_control_node_B.CA_i[CA_tmp] = 0.0;
        tmp = 0;
        for (i_2 = 0; i_2 < 21; i_2++) {
          proc_control_node_B.CA_i[CA_tmp] += proc_control_node_B.CA[tmp +
            proc_control_node_B.i8] * b_A[i_2 + i_0];
          tmp += 13;
        }

        proc_control_node_B.i7 += 13;
        i_0 += 21;
      }
    }

    memcpy(&proc_control_node_B.CA[0], &proc_control_node_B.CA_i[0], 273U *
           sizeof(real_T));
    for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 21;
         proc_control_node_B.i8++) {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 13;
           proc_control_node_B.i7++) {
        b_Sx[(proc_control_node_B.rows[proc_control_node_B.i7] + 130 *
              proc_control_node_B.i8) - 1] = proc_control_node_B.CA[13 *
          proc_control_node_B.i8 + proc_control_node_B.i7];
      }
    }
  }

  for (proc_control_node_B.i8 = 0; proc_control_node_B.i8 < 24;
       proc_control_node_B.i8++) {
    memset(&b_SuJm[proc_control_node_B.i8 * 130], 0, 130U * sizeof(real_T));
    for (i_0 = 0; i_0 < 80; i_0++) {
      for (proc_control_node_B.i7 = 0; proc_control_node_B.i7 < 130;
           proc_control_node_B.i7++) {
        proc_control_node_B.i_p = 130 * proc_control_node_B.i8 +
          proc_control_node_B.i7;
        b_SuJm[proc_control_node_B.i_p] += proc_control_node_B.Su[130 * i_0 +
          proc_control_node_B.i7] * b_Jm[80 * proc_control_node_B.i8 + i_0];
      }
    }
  }
}

// Function for MATLAB Function: '<S211>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_con_mpc_calculatehessian_c(const real_T
  b_Wy[13], const real_T b_Wu[8], const real_T b_Wdu[8], const real_T b_SuJm
  [3120], const real_T I2Jm[1920], const real_T b_Jm[1920], const real_T b_I1
  [640], const real_T b_Su1[1040], const real_T b_Sx[2730], const real_T b_Hv
  [1430], real_T nmv, real_T b_ny, real_T b_H[576], real_T b_Ku1[192], real_T
  b_Kut[1920], real_T b_Kx[504], real_T b_Kv[264], real_T b_Kr[3120])
{
  int32_T b_SuJm_tmp;
  int16_T ixw;
  ixw = 1;
  for (proc_control_node_B.i_lc = 0; proc_control_node_B.i_lc < 130;
       proc_control_node_B.i_lc++) {
    proc_control_node_B.b_Wy = b_Wy[ixw - 1];
    for (proc_control_node_B.i32 = 0; proc_control_node_B.i32 < 24;
         proc_control_node_B.i32++) {
      proc_control_node_B.b_Kr_tmp = 130 * proc_control_node_B.i32 +
        proc_control_node_B.i_lc;
      b_Kr[proc_control_node_B.b_Kr_tmp] = b_SuJm[proc_control_node_B.b_Kr_tmp] *
        proc_control_node_B.b_Wy;
    }

    proc_control_node_B.i32 = ixw + 1;
    if (ixw + 1 > 32767) {
      proc_control_node_B.i32 = 32767;
    }

    ixw = static_cast<int16_T>(proc_control_node_B.i32);
    if (static_cast<int16_T>(proc_control_node_B.i32) > 13) {
      proc_control_node_B.b_Wy = rt_roundd_snf(13.0 - b_ny);
      if (proc_control_node_B.b_Wy < 32768.0) {
        if (proc_control_node_B.b_Wy >= -32768.0) {
          ixw = static_cast<int16_T>(proc_control_node_B.b_Wy);
        } else {
          ixw = MIN_int16_T;
        }
      } else {
        ixw = MAX_int16_T;
      }

      proc_control_node_B.i32 = ixw + 1;
      if (proc_control_node_B.b_Wy < 32768.0) {
        if (proc_control_node_B.b_Wy >= -32768.0) {
          ixw = static_cast<int16_T>(proc_control_node_B.b_Wy);
        } else {
          ixw = MIN_int16_T;
        }
      } else {
        ixw = MAX_int16_T;
      }

      if (ixw + 1 > 32767) {
        proc_control_node_B.i32 = 32767;
      }

      ixw = static_cast<int16_T>(proc_control_node_B.i32);
    }
  }

  proc_control_node_WtMult(b_Wu, I2Jm, nmv, b_Kut);
  proc_control_node_WtMult(b_Wdu, b_Jm, nmv, proc_control_node_B.dv1);
  for (proc_control_node_B.i32 = 0; proc_control_node_B.i32 < 24;
       proc_control_node_B.i32++) {
    for (proc_control_node_B.i_lc = 0; proc_control_node_B.i_lc < 24;
         proc_control_node_B.i_lc++) {
      b_SuJm_tmp = proc_control_node_B.i_lc + 24 * proc_control_node_B.i32;
      proc_control_node_B.b_SuJm_p[b_SuJm_tmp] = 0.0;
      for (proc_control_node_B.b_Kr_tmp = 0; proc_control_node_B.b_Kr_tmp < 130;
           proc_control_node_B.b_Kr_tmp++) {
        proc_control_node_B.b_SuJm_p[b_SuJm_tmp] += b_SuJm[130 *
          proc_control_node_B.i_lc + proc_control_node_B.b_Kr_tmp] * b_Kr[130 *
          proc_control_node_B.i32 + proc_control_node_B.b_Kr_tmp];
      }

      proc_control_node_B.b_Jm_p[b_SuJm_tmp] = 0.0;
      for (proc_control_node_B.b_Kr_tmp = 0; proc_control_node_B.b_Kr_tmp < 80;
           proc_control_node_B.b_Kr_tmp++) {
        proc_control_node_B.b_Jm_p[b_SuJm_tmp] += b_Jm[80 *
          proc_control_node_B.i_lc + proc_control_node_B.b_Kr_tmp] *
          proc_control_node_B.dv1[80 * proc_control_node_B.i32 +
          proc_control_node_B.b_Kr_tmp];
      }
    }
  }

  for (proc_control_node_B.i32 = 0; proc_control_node_B.i32 < 24;
       proc_control_node_B.i32++) {
    for (proc_control_node_B.i_lc = 0; proc_control_node_B.i_lc < 24;
         proc_control_node_B.i_lc++) {
      proc_control_node_B.b_Wy = 0.0;
      for (proc_control_node_B.b_Kr_tmp = 0; proc_control_node_B.b_Kr_tmp < 80;
           proc_control_node_B.b_Kr_tmp++) {
        proc_control_node_B.b_Wy += I2Jm[80 * proc_control_node_B.i32 +
          proc_control_node_B.b_Kr_tmp] * b_Kut[80 * proc_control_node_B.i_lc +
          proc_control_node_B.b_Kr_tmp];
      }

      proc_control_node_B.b_Kr_tmp = 24 * proc_control_node_B.i_lc +
        proc_control_node_B.i32;
      b_H[proc_control_node_B.b_Kr_tmp] =
        (proc_control_node_B.b_SuJm_p[proc_control_node_B.b_Kr_tmp] +
         proc_control_node_B.b_Jm_p[proc_control_node_B.b_Kr_tmp]) +
        proc_control_node_B.b_Wy;
    }

    for (proc_control_node_B.i_lc = 0; proc_control_node_B.i_lc < 8;
         proc_control_node_B.i_lc++) {
      b_SuJm_tmp = proc_control_node_B.i_lc + (proc_control_node_B.i32 << 3);
      proc_control_node_B.b_Su1_p[b_SuJm_tmp] = 0.0;
      for (proc_control_node_B.b_Kr_tmp = 0; proc_control_node_B.b_Kr_tmp < 130;
           proc_control_node_B.b_Kr_tmp++) {
        proc_control_node_B.b_Su1_p[b_SuJm_tmp] += b_Su1[130 *
          proc_control_node_B.i_lc + proc_control_node_B.b_Kr_tmp] * b_Kr[130 *
          proc_control_node_B.i32 + proc_control_node_B.b_Kr_tmp];
      }

      proc_control_node_B.b_I1[b_SuJm_tmp] = 0.0;
      for (proc_control_node_B.b_Kr_tmp = 0; proc_control_node_B.b_Kr_tmp < 80;
           proc_control_node_B.b_Kr_tmp++) {
        proc_control_node_B.b_I1[b_SuJm_tmp] += b_I1[80 *
          proc_control_node_B.i_lc + proc_control_node_B.b_Kr_tmp] * b_Kut[80 *
          proc_control_node_B.i32 + proc_control_node_B.b_Kr_tmp];
      }
    }
  }

  for (proc_control_node_B.i32 = 0; proc_control_node_B.i32 < 192;
       proc_control_node_B.i32++) {
    b_Ku1[proc_control_node_B.i32] =
      proc_control_node_B.b_Su1_p[proc_control_node_B.i32] +
      proc_control_node_B.b_I1[proc_control_node_B.i32];
  }

  for (proc_control_node_B.i32 = 0; proc_control_node_B.i32 < 1920;
       proc_control_node_B.i32++) {
    b_Kut[proc_control_node_B.i32] = -b_Kut[proc_control_node_B.i32];
  }

  for (proc_control_node_B.i32 = 0; proc_control_node_B.i32 < 24;
       proc_control_node_B.i32++) {
    for (proc_control_node_B.i_lc = 0; proc_control_node_B.i_lc < 21;
         proc_control_node_B.i_lc++) {
      b_SuJm_tmp = proc_control_node_B.i_lc + 21 * proc_control_node_B.i32;
      b_Kx[b_SuJm_tmp] = 0.0;
      for (proc_control_node_B.b_Kr_tmp = 0; proc_control_node_B.b_Kr_tmp < 130;
           proc_control_node_B.b_Kr_tmp++) {
        b_Kx[b_SuJm_tmp] += b_Sx[130 * proc_control_node_B.i_lc +
          proc_control_node_B.b_Kr_tmp] * b_Kr[130 * proc_control_node_B.i32 +
          proc_control_node_B.b_Kr_tmp];
      }
    }

    for (proc_control_node_B.i_lc = 0; proc_control_node_B.i_lc < 11;
         proc_control_node_B.i_lc++) {
      b_SuJm_tmp = proc_control_node_B.i_lc + 11 * proc_control_node_B.i32;
      b_Kv[b_SuJm_tmp] = 0.0;
      for (proc_control_node_B.b_Kr_tmp = 0; proc_control_node_B.b_Kr_tmp < 130;
           proc_control_node_B.b_Kr_tmp++) {
        b_Kv[b_SuJm_tmp] += b_Hv[130 * proc_control_node_B.i_lc +
          proc_control_node_B.b_Kr_tmp] * b_Kr[130 * proc_control_node_B.i32 +
          proc_control_node_B.b_Kr_tmp];
      }
    }
  }

  for (proc_control_node_B.i32 = 0; proc_control_node_B.i32 < 3120;
       proc_control_node_B.i32++) {
    b_Kr[proc_control_node_B.i32] = -b_Kr[proc_control_node_B.i32];
  }
}

// Function for MATLAB Function: '<S211>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_control_node_mpc_solveQP_g(const real_T
  xQP[21], const real_T b_Kx[504], const real_T b_Kr[3120], const real_T rseq
  [130], const real_T b_Ku1[192], const real_T old_u[8], const real_T b_Kv[264],
  const real_T vseq[11], const real_T b_Kut[1920], const real_T b_utarget[80],
  const real_T b_Linv[625], const real_T b_Hinv[625], const real_T b_Ac[1200],
  const real_T Bc[48], boolean_T iA[48], real_T zopt[25], real_T f[25], real_T
  *status)
{
  memset(&f[0], 0, 25U * sizeof(real_T));
  for (proc_control_node_B.i_ob = 0; proc_control_node_B.i_ob < 24;
       proc_control_node_B.i_ob++) {
    proc_control_node_B.b_Kx_o = 0.0;
    for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 21;
         proc_control_node_B.i30++) {
      proc_control_node_B.b_Kx_o += b_Kx[21 * proc_control_node_B.i_ob +
        proc_control_node_B.i30] * xQP[proc_control_node_B.i30];
    }

    proc_control_node_B.b_Kr_i = 0.0;
    for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 130;
         proc_control_node_B.i30++) {
      proc_control_node_B.b_Kr_i += b_Kr[130 * proc_control_node_B.i_ob +
        proc_control_node_B.i30] * rseq[proc_control_node_B.i30];
    }

    proc_control_node_B.b_Ku1_e = 0.0;
    for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 8;
         proc_control_node_B.i30++) {
      proc_control_node_B.b_Ku1_e += b_Ku1[(proc_control_node_B.i_ob << 3) +
        proc_control_node_B.i30] * old_u[proc_control_node_B.i30];
    }

    proc_control_node_B.b_Kv_j = 0.0;
    for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 11;
         proc_control_node_B.i30++) {
      proc_control_node_B.b_Kv_j += b_Kv[11 * proc_control_node_B.i_ob +
        proc_control_node_B.i30] * vseq[proc_control_node_B.i30];
    }

    proc_control_node_B.b_Kut_o = 0.0;
    for (proc_control_node_B.i30 = 0; proc_control_node_B.i30 < 80;
         proc_control_node_B.i30++) {
      proc_control_node_B.b_Kut_o += b_Kut[80 * proc_control_node_B.i_ob +
        proc_control_node_B.i30] * b_utarget[proc_control_node_B.i30];
    }

    f[proc_control_node_B.i_ob] = (((proc_control_node_B.b_Kx_o +
      proc_control_node_B.b_Kr_i) + proc_control_node_B.b_Ku1_e) +
      proc_control_node_B.b_Kv_j) + proc_control_node_B.b_Kut_o;
  }

  for (proc_control_node_B.i_ob = 0; proc_control_node_B.i_ob < 48;
       proc_control_node_B.i_ob++) {
    proc_control_node_B.iAnew[proc_control_node_B.i_ob] =
      iA[proc_control_node_B.i_ob];
  }

  proc_control_node_qpkwik(b_Linv, b_Hinv, f, b_Ac, Bc,
    proc_control_node_B.iAnew, 292, 0.01, zopt, proc_control_node_B.a__1_m,
    status);
  for (proc_control_node_B.i_ob = 0; proc_control_node_B.i_ob < 48;
       proc_control_node_B.i_ob++) {
    iA[proc_control_node_B.i_ob] =
      (proc_control_node_B.iAnew[proc_control_node_B.i_ob] != 0);
  }

  if ((*status < 0.0) || (*status == 0.0)) {
    memset(&zopt[0], 0, 25U * sizeof(real_T));
  }
}

// Function for MATLAB Function: '<S211>/FixedHorizonOptimizer'
void proc_control_nodeModelClass::proc_contr_mpcblock_optimizer_e(const real_T
  rseq[130], const real_T vseq[11], const real_T x[21], const real_T old_u[8],
  const boolean_T iA[48], const real_T b_Mlim[48], real_T b_Mx[1008], real_T
  b_Mu1[384], real_T b_Mv[528], const real_T b_utarget[80], const real_T b_uoff
  [8], real_T b_H[625], real_T b_Ac[1200], const real_T b_Wy[13], const real_T
  b_Wdu[8], const real_T b_Jm[1920], const real_T b_Wu[8], const real_T b_I1[640],
  const real_T b_A[441], const real_T Bu[1848], const real_T Bv[231], const
  real_T b_C[273], const real_T Dv[143], const real_T b_Mrows[48], real_T u[8],
  real_T useq[88], real_T *status, boolean_T iAout[48])
{
  static const int8_T c_A[100] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0,
    0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1,
    1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1 };

  boolean_T exitg1;
  memset(&useq[0], 0, 88U * sizeof(real_T));
  for (proc_control_node_B.i_b = 0; proc_control_node_B.i_b < 48;
       proc_control_node_B.i_b++) {
    iAout[proc_control_node_B.i_b] = false;
  }

  proc_contr_mpc_constraintcoef_m(b_A, &Bu[0], &Bv[0], b_C, &Dv[0], b_Jm,
    proc_control_node_B.b_SuJm, proc_control_node_B.b_Sx,
    proc_control_node_B.b_Su1, proc_control_node_B.b_Hv);
  if (b_Mrows[0] > 0.0) {
    proc_control_node_B.kidx = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.kidx < 48)) {
      if (b_Mrows[proc_control_node_B.kidx] <= 130.0) {
        proc_control_node_B.i_b = static_cast<int32_T>
          (b_Mrows[proc_control_node_B.kidx]);
        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 24;
             proc_control_node_B.b_j1++) {
          b_Ac[proc_control_node_B.kidx + 48 * proc_control_node_B.b_j1] =
            -proc_control_node_B.b_SuJm[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_b) - 1];
        }

        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 21;
             proc_control_node_B.b_j1++) {
          b_Mx[proc_control_node_B.kidx + 48 * proc_control_node_B.b_j1] =
            -proc_control_node_B.b_Sx[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_b) - 1];
        }

        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 8;
             proc_control_node_B.b_j1++) {
          b_Mu1[proc_control_node_B.kidx + 48 * proc_control_node_B.b_j1] =
            -proc_control_node_B.b_Su1[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_b) - 1];
        }

        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 11;
             proc_control_node_B.b_j1++) {
          b_Mv[proc_control_node_B.kidx + 48 * proc_control_node_B.b_j1] =
            -proc_control_node_B.b_Hv[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_b) - 1];
        }

        proc_control_node_B.kidx++;
      } else if (b_Mrows[proc_control_node_B.kidx] <= 260.0) {
        proc_control_node_B.i_b = static_cast<int32_T>
          (b_Mrows[proc_control_node_B.kidx] - 130.0);
        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 24;
             proc_control_node_B.b_j1++) {
          b_Ac[proc_control_node_B.kidx + 48 * proc_control_node_B.b_j1] =
            proc_control_node_B.b_SuJm[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_b) - 1];
        }

        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 21;
             proc_control_node_B.b_j1++) {
          b_Mx[proc_control_node_B.kidx + 48 * proc_control_node_B.b_j1] =
            proc_control_node_B.b_Sx[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_b) - 1];
        }

        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 8;
             proc_control_node_B.b_j1++) {
          b_Mu1[proc_control_node_B.kidx + 48 * proc_control_node_B.b_j1] =
            proc_control_node_B.b_Su1[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_b) - 1];
        }

        for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 11;
             proc_control_node_B.b_j1++) {
          b_Mv[proc_control_node_B.kidx + 48 * proc_control_node_B.b_j1] =
            proc_control_node_B.b_Hv[(130 * proc_control_node_B.b_j1 +
            proc_control_node_B.i_b) - 1];
        }

        proc_control_node_B.kidx++;
      } else {
        exitg1 = true;
      }
    }
  }

  memset(&proc_control_node_B.b_I[0], 0, sizeof(int8_T) << 6U);
  proc_control_node_B.kidx_i = 0;
  for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 8;
       proc_control_node_B.kidx++) {
    proc_control_node_B.b_I[proc_control_node_B.kidx_i] = 1;
    proc_control_node_B.kidx_i += 9;
  }

  proc_control_node_B.kidx = -1;
  for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 10;
       proc_control_node_B.b_j1++) {
    for (proc_control_node_B.i_b = 0; proc_control_node_B.i_b < 8;
         proc_control_node_B.i_b++) {
      for (proc_control_node_B.kidx_i = 0; proc_control_node_B.kidx_i < 10;
           proc_control_node_B.kidx_i++) {
        for (proc_control_node_B.i2_p = 0; proc_control_node_B.i2_p < 8;
             proc_control_node_B.i2_p++) {
          proc_control_node_B.a_o[(proc_control_node_B.kidx +
            proc_control_node_B.i2_p) + 1] = static_cast<int8_T>(c_A[10 *
            proc_control_node_B.b_j1 + proc_control_node_B.kidx_i] *
            proc_control_node_B.b_I[(proc_control_node_B.i_b << 3) +
            proc_control_node_B.i2_p]);
        }

        proc_control_node_B.kidx += 8;
      }
    }
  }

  for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 24;
       proc_control_node_B.b_j1++) {
    memset(&proc_control_node_B.a_j[proc_control_node_B.b_j1 * 80], 0, 80U *
           sizeof(real_T));
    for (proc_control_node_B.kidx_i = 0; proc_control_node_B.kidx_i < 80;
         proc_control_node_B.kidx_i++) {
      for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 80;
           proc_control_node_B.kidx++) {
        proc_control_node_B.i_b = 80 * proc_control_node_B.b_j1 +
          proc_control_node_B.kidx;
        proc_control_node_B.a_j[proc_control_node_B.i_b] += static_cast<real_T>
          (proc_control_node_B.a_o[80 * proc_control_node_B.kidx_i +
           proc_control_node_B.kidx]) * b_Jm[80 * proc_control_node_B.b_j1 +
          proc_control_node_B.kidx_i];
      }
    }
  }

  proc_con_mpc_calculatehessian_c(b_Wy, b_Wu, b_Wdu, proc_control_node_B.b_SuJm,
    proc_control_node_B.a_j, b_Jm, b_I1, proc_control_node_B.b_Su1,
    proc_control_node_B.b_Sx, proc_control_node_B.b_Hv, proc_control_node_nu,
    proc_control_node_ny_f, proc_control_node_B.b_c, proc_control_node_B.b_Ku1,
    proc_control_node_B.b_Kut_l, proc_control_node_B.b_Kx,
    proc_control_node_B.b_Kv, proc_control_node_B.b_Kr);
  proc_control_node_B.b_j1 = 0;
  proc_control_node_B.kidx = 0;
  for (proc_control_node_B.kidx_i = 0; proc_control_node_B.kidx_i < 24;
       proc_control_node_B.kidx_i++) {
    memcpy(&b_H[proc_control_node_B.b_j1],
           &proc_control_node_B.b_c[proc_control_node_B.kidx], 24U * sizeof
           (real_T));
    proc_control_node_B.b_j1 += 25;
    proc_control_node_B.kidx += 24;
  }

  memcpy(&proc_control_node_B.b_Linv_n[0], &b_H[0], 625U * sizeof(real_T));
  proc_control_n_mpc_checkhessian(proc_control_node_B.b_Linv_n,
    proc_control_node_B.c_Linv_i, &proc_control_node_B.BadH);
  if (proc_control_node_B.BadH > 1.0) {
    proc_control_node_B.kidx = 0;
    for (proc_control_node_B.kidx_i = 0; proc_control_node_B.kidx_i < 8;
         proc_control_node_B.kidx_i++) {
      u[proc_control_node_B.kidx_i] = old_u[proc_control_node_B.kidx_i] +
        b_uoff[proc_control_node_B.kidx_i];
      for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 11;
           proc_control_node_B.b_j1++) {
        useq[proc_control_node_B.b_j1 + proc_control_node_B.kidx] =
          u[proc_control_node_B.kidx_i];
      }

      proc_control_node_B.kidx += 11;
    }

    *status = -2.0;
  } else {
    memset(&proc_control_node_B.c_I[0], 0, 625U * sizeof(int8_T));
    proc_control_node_B.kidx_i = 0;
    for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 25;
         proc_control_node_B.kidx++) {
      proc_control_node_B.c_I[proc_control_node_B.kidx_i] = 1;
      proc_control_node_B.kidx_i += 26;
    }

    proc_control_node_B.kidx_i = 0;
    for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 25;
         proc_control_node_B.kidx++) {
      for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 25;
           proc_control_node_B.b_j1++) {
        proc_control_node_B.i_b = proc_control_node_B.b_j1 +
          proc_control_node_B.kidx_i;
        proc_control_node_B.b_Linv_n[proc_control_node_B.i_b] =
          proc_control_node_B.c_I[proc_control_node_B.i_b];
      }

      proc_control_node_B.kidx_i += 25;
    }

    proc_control_node_trisolve(proc_control_node_B.c_Linv_i,
      proc_control_node_B.b_Linv_n);
    for (proc_control_node_B.i_b = 0; proc_control_node_B.i_b < 48;
         proc_control_node_B.i_b++) {
      iAout[proc_control_node_B.i_b] = iA[proc_control_node_B.i_b];
      proc_control_node_B.BadH = 0.0;
      proc_control_node_B.b_j1 = 0;
      for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 21;
           proc_control_node_B.kidx++) {
        proc_control_node_B.BadH += b_Mx[proc_control_node_B.b_j1 +
          proc_control_node_B.i_b] * x[proc_control_node_B.kidx];
        proc_control_node_B.b_j1 += 48;
      }

      proc_control_node_B.b_Mlim[proc_control_node_B.i_b] =
        b_Mlim[proc_control_node_B.i_b] + proc_control_node_B.BadH;
      proc_control_node_B.b_Mu1[proc_control_node_B.i_b] = 0.0;
    }

    proc_control_node_B.b_j1 = 0;
    for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 8;
         proc_control_node_B.kidx++) {
      for (proc_control_node_B.kidx_i = 0; proc_control_node_B.kidx_i < 48;
           proc_control_node_B.kidx_i++) {
        proc_control_node_B.b_Mu1[proc_control_node_B.kidx_i] +=
          b_Mu1[proc_control_node_B.kidx_i + proc_control_node_B.b_j1] *
          old_u[proc_control_node_B.kidx];
      }

      proc_control_node_B.b_j1 += 48;
    }

    proc_control_node_B.b_j1 = 0;
    for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 25;
         proc_control_node_B.kidx++) {
      proc_control_node_B.kidx_i = 0;
      for (proc_control_node_B.i2_p = 0; proc_control_node_B.i2_p < 25;
           proc_control_node_B.i2_p++) {
        proc_control_node_B.i_b = proc_control_node_B.i2_p +
          proc_control_node_B.b_j1;
        proc_control_node_B.c_Linv_i[proc_control_node_B.i_b] = 0.0;
        for (proc_control_node_B.i6 = 0; proc_control_node_B.i6 < 25;
             proc_control_node_B.i6++) {
          proc_control_node_B.c_Linv_i[proc_control_node_B.i_b] +=
            proc_control_node_B.b_Linv_n[proc_control_node_B.i6 +
            proc_control_node_B.kidx_i] *
            proc_control_node_B.b_Linv_n[proc_control_node_B.i6 +
            proc_control_node_B.b_j1];
        }

        proc_control_node_B.kidx_i += 25;
      }

      proc_control_node_B.b_j1 += 25;
    }

    for (proc_control_node_B.b_j1 = 0; proc_control_node_B.b_j1 < 48;
         proc_control_node_B.b_j1++) {
      proc_control_node_B.BadH = 0.0;
      proc_control_node_B.kidx = 0;
      for (proc_control_node_B.kidx_i = 0; proc_control_node_B.kidx_i < 11;
           proc_control_node_B.kidx_i++) {
        proc_control_node_B.BadH += b_Mv[proc_control_node_B.kidx +
          proc_control_node_B.b_j1] * vseq[proc_control_node_B.kidx_i];
        proc_control_node_B.kidx += 48;
      }

      proc_control_node_B.b_Mlim_c[proc_control_node_B.b_j1] =
        -((proc_control_node_B.b_Mlim[proc_control_node_B.b_j1] +
           proc_control_node_B.b_Mu1[proc_control_node_B.b_j1]) +
          proc_control_node_B.BadH);
    }

    proc_control_node_mpc_solveQP_g(x, proc_control_node_B.b_Kx,
      proc_control_node_B.b_Kr, rseq, proc_control_node_B.b_Ku1, old_u,
      proc_control_node_B.b_Kv, vseq, proc_control_node_B.b_Kut_l, b_utarget,
      proc_control_node_B.b_Linv_n, proc_control_node_B.c_Linv_i, b_Ac,
      proc_control_node_B.b_Mlim_c, iAout, proc_control_node_B.zopt,
      proc_control_node_B.f_i, status);
    for (proc_control_node_B.kidx = 0; proc_control_node_B.kidx < 8;
         proc_control_node_B.kidx++) {
      u[proc_control_node_B.kidx] = (old_u[proc_control_node_B.kidx] +
        proc_control_node_B.zopt[proc_control_node_B.kidx]) +
        b_uoff[proc_control_node_B.kidx];
    }
  }
}

real_T rt_urand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  uint32_T hi;
  uint32_T lo;

  // Uniform random number generator (random number between 0 and 1)

  // #define IA      16807                      magic multiplier = 7^5
  // #define IM      2147483647                 modulus = 2^31-1
  // #define IQ      127773                     IM div IA
  // #define IR      2836                       IM modulo IA
  // #define S       4.656612875245797e-10      reciprocal of 2^31-1
  // test = IA * (seed % IQ) - IR * (seed/IQ)
  // seed = test < 0 ? (test + IM) : test
  // return (seed*S)

  lo = *u % 127773U * 16807U;
  hi = *u / 127773U * 2836U;
  if (lo < hi) {
    *u = 2147483647U - (hi - lo);
  } else {
    *u = lo - hi;
  }

  return static_cast<real_T>(*u) * 4.6566128752457969E-10;
}

real_T proc_control_nodeModelClass::proc_rt_nrand_Upu32_Yd_f_pw_snf(uint32_T *u)
{
  real_T si;
  real_T y;

  // Normal (Gaussian) random number generator
  do {
    proc_control_node_B.sr = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = 2.0 * rt_urand_Upu32_Yd_f_pw_snf(u) - 1.0;
    si = proc_control_node_B.sr * proc_control_node_B.sr + si * si;
  } while (si > 1.0);

  y = sqrt(-2.0 * log(si) / si) * proc_control_node_B.sr;
  return y;
}

void proc_control_nodeModelClass::pro_TrajectoryManager_setupImpl
  (TrajectoryManager_proc_contro_T *b_this)
{
  int32_T i;
  int32_T i_0;
  int32_T tmp;

  //  Perform one-time calculations, such as computing constants
  b_this->generationNumber = 0.0;
  b_this->dummy = 999.0;

  //  Chiffre NULL
  //  Vecteur pose NULL
  b_this->targetReachedCount = 0.0;

  //  Buffer trajectoire
  tmp = 0;
  for (i = 0; i < 13; i++) {
    b_this->emptyArray[i] = b_this->dummy;
    for (i_0 = 0; i_0 < 6001; i_0++) {
      b_this->poseBuffer[i_0 + tmp] = b_this->dummy;
    }

    tmp += 6001;
  }

  b_this->bufferCount = 0.0;
  b_this->done = false;
  b_this->init = 0.0;
}

// Model step function
void proc_control_nodeModelClass::step()
{
  SL_Bus_proc_control_node_sonia_common_KillSwitchMsg b_varargout_2_1;
  SL_Bus_proc_control_node_std_msgs_Bool BusAssignment;
  SL_Bus_proc_control_node_std_msgs_Bool b_varargout_2_0;
  SL_Bus_proc_control_node_std_msgs_Bool rtb_BusAssignment1;
  SL_Bus_proc_control_node_std_msgs_Bool rtb_BusAssignment2;
  SL_Bus_proc_control_node_std_msgs_Int8 rtb_BusAssignment;
  SL_Bus_proc_control_node_std_msgs_UInt8 b_varargout_2;
  uint16_T rtb_NtoPWM;
  char_T expl_temp[3];
  int8_T rtAction;
  int8_T rtPrevAction;
  uint8_T tmp;
  boolean_T b_varargout_1;
  boolean_T b_varargout_1_0;
  boolean_T rtb_Merge;
  boolean_T rtb_NewDvlMsg;
  boolean_T rtb_Reset;
  boolean_T rtb_Reset_j;
  static const int8_T tmp_0[144] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const real_T theta[5] = { 0.01495585217958292, 0.253939833006323,
    0.95041789961629319, 2.097847961257068, 5.3719203511481517 };

  static const real_T e[441] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -7.0175753029197041E-6, -0.0018564516799022086, 9.5638402096472988E-5, 0.0,
    0.96193928589114663, 0.000153204259321413, -0.00056858930803376612,
    -0.00010098489878009329, -0.031946990715338949, 0.0014283652424641254,
    -1.1833389717431388, 0.0042451647130473677, -0.02059891926064825, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0018776426629274821, 2.7682559251232305E-6,
    -2.4123078632087606E-5, 0.0, 0.0001508136595290169, 0.981150399664804,
    0.00063372306485691735, 0.035764317189495007, 3.2739930359692253E-5,
    -0.00043552885046983851, 0.0041864420325437033, -0.70317815065411426,
    0.022294209001254693, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.09334793671731445, -5.9587873795364367E-8,
    1.2019040184314094E-6, 0.0, -7.2440371399720166E-6, 0.00094029561346356788,
    -8.4532762192781081E-5, 0.87002457147825241, -2.6834005626356936E-7,
    2.1110295983107374E-5, -0.00019284987943020936, 0.0341772444112086,
    -0.0028984682973462973, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -7.8083873066624027E-8, 0.093381174242928466, 4.7247067653614033E-6, 0.0,
    -0.0018818153202267208, 7.5567670955585157E-6, 4.5582111915973171E-5,
    -3.0953714819492127E-7, 0.87083101198197732, 6.7850986597013419E-5,
    -0.056417409980487353, 0.00020021846561623917, 0.0015414305249194535, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.8562507998505662E-6,
    5.467245933051938E-6, 0.0928756408251712, 0.0, 0.0002269113350229011,
    -5.710590800441002E-5, -4.3554382780699169E-7, 3.2322949935920208E-5,
    7.7517356615050786E-5, 0.86098249655153714, 0.0067796198292429857,
    -0.0020623658544282534, -1.2266826155336939E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, -3.3127090250297631E-6, -0.00065570067464619628,
    6.6660848740312381E-5, 0.0, 0.023482994112547704, 0.00010686728791229153,
    3.8950830418285641E-5, -4.4834251932472515E-5, -0.010147263901854471,
    0.0010163359420908575, 0.15958399395491174, 0.0030319638917673643,
    0.00083036723547938755, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00032257074107937522, 1.8071994536395256E-6, -1.1843709815711276E-5, 0.0,
    7.56682954294744E-5, 0.040753114619815387, 1.0057341464325144E-5,
    0.0061766616912043845, 2.4263826850277589E-5, -0.00021829865314779623,
    0.0021663614229478515, 0.648243092346036, 0.00054487686524304542, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -5.6434663742717529E-5, 2.263923556359362E-5,
    -1.6944602724205093E-7, 0.0, 6.78017638242101E-5, -1.6584291963775192E-7,
    0.034488299196515082, -0.000969128819258245, 0.00037999832182404749,
    -2.0149026748997439E-6, 0.0017057078196493851, -1.1075088464686445E-5,
    0.45147932157329285, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const uint8_T c[5] = { 3U, 5U, 7U, 9U, 13U };

  static const int8_T g[273] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
    0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const real_T b_b[48] = { 0.02112443491058583, -0.015284356933675683,
    -7.0837403672252146E-5, 0.062952228101239543, 0.019032522297668636,
    -0.17235611708486639, 0.021112545591001931, 0.015556523198782039,
    9.3712054745178266E-5, -0.060884483374622281, 0.019613805650913103,
    -0.17335012146094617, 0.021790267284400529, -0.015565687047941387,
    -6.7363334491227168E-5, 0.060331047065513795, 0.019031465986279986,
    0.17628138981294922, 0.021778377964816624, 0.015275193084516326,
    9.7186123926203244E-5, -0.063505664410348023, 0.019612749339524459,
    0.17528738543686956, -0.001819638864719295, -0.0034249251816346319,
    -0.02095639900015615, -0.26767193546582568, 0.10593667623599359,
    0.00062021813460420567, -0.0018124211550371481, 0.003387750973601051,
    0.021100316216985739, 0.26476621250220889, 0.10537885436940329,
    -0.0006207996116589, 0.0018538731733468781, 0.0035708122797193441,
    -0.021822949502860629, 0.2790736050389333, -0.10793139553633729,
    -0.00064672437426625525, 0.001778186846409557, -0.0035336380716857632,
    0.02167903228603104, -0.27616788207531651, -0.1033841350690595,
    0.00064730585132094889 };

  static const real_T tmp_1[169] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T f[630] = { 0.00010143328255473, -7.4704776485318868E-5,
    -1.8645270459872343E-7, 0.0, 9.5703373469536318E-5, 4.2519441614344327E-5,
    -0.00033617562720947763, 0.00198758112711187, -0.001472418277668427,
    -2.6256554783757351E-6, 0.002993308297371244, 0.0016042848780399941,
    -0.011888216490967661, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010140104929637707, 7.5672272474951947E-5, 2.8895937352788609E-7, 0.0,
    -9.3456076186716774E-5, 4.3281280888925042E-5, -0.00033827008229990105,
    0.0019871230172259272, 0.0014887185863831224, 4.5409043313144353E-6,
    -0.0029388508896146513, 0.0016256201972348835, -0.011963601473146981, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010390741322717046,
    -7.5697294618568464E-5, -1.7902408563442905E-7, 0.0, 9.2730902076991624E-5,
    4.2526712270835756E-5, 0.00034386695999514481, 0.0020300683358282015,
    -0.001489077639860907, -2.5373208949948805E-6, 0.0029185290082794305,
    0.0016047704167896422, 0.012159270371899683, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00010387517996881743, 7.4679754341702324E-5,
    2.9638799249218045E-7, 0.0, -9.6428547579260464E-5, 4.3288551545416485E-5,
    0.00034177250490472166, 0.0020296102259422569, 0.0014720592241906417,
    4.6292389146952912E-6, -0.0030136301787064652, 0.0016261057359845321,
    0.012083885389720373, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -7.4937712529938852E-6, -9.7368093232105857E-6, -0.00010046501247254949, 0.0,
    -0.00040369782395442304, 0.00023023270774247682, 7.9168144648442472E-7,
    -0.00013487437689774389, -0.00014421984187735202, -0.001965455382073713,
    -0.012551954742611898, 0.0085762077736487481, 2.40729939210084E-5, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -7.5300604452406265E-6, 9.6463153320570312E-6,
    0.00010105565151951922, 0.0, 0.00039993803596625565, 0.00023115241148320123,
    -7.3026830783162228E-7, -0.00013599679599170117, 0.0001430366345920159,
    0.0019761207871032971, 0.012447722129703666, 0.0086398558334075445,
    -1.9478376169547496E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    7.6310823003084261E-6, 1.0142431369521209E-5, -0.00010311730272701935, 0.0,
    0.00042052202966225079, -0.00023445493535125691, -8.240155958861863E-7,
    0.00013731094575583706, 0.0001501287757765113, -0.0020069196194684516,
    0.013067176153868596, -0.0087314003897193179, -2.5008441914170132E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 7.3927493979260517E-6,
    -1.0051937378367653E-5, 0.00010252666368004958, 0.0, -0.000416762241674076,
    -0.00022693018387442079, 7.626024572333827E-7, 0.0001335602271336074,
    -0.00014894556849117521, 0.0019962542144388667, -0.012962943540960366,
    -0.0084846632173369626, 2.0413824162709161E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T h[390] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const int8_T k[48] = { 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,
    40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 30, 30,
    30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30 };

  static const real_T o[21] = { 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T l[48] = { 261.0, 262.0, 263.0, 264.0, 265.0, 266.0, 267.0,
    268.0, 269.0, 270.0, 271.0, 272.0, 273.0, 274.0, 275.0, 276.0, 277.0, 278.0,
    279.0, 280.0, 281.0, 282.0, 283.0, 284.0, 341.0, 342.0, 343.0, 344.0, 345.0,
    346.0, 347.0, 348.0, 349.0, 350.0, 351.0, 352.0, 353.0, 354.0, 355.0, 356.0,
    357.0, 358.0, 359.0, 360.0, 361.0, 362.0, 363.0, 364.0 };

  static const real_T n[13] = { 0.0, 0.0, 0.3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0 };

  static const real_T c_0[400] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.5087876514598508E-6,
    -0.00092822583995110387, 4.7819201048236508E-5, 0.96193928589114663,
    0.00015320425932141291, -0.00056858930803376612, -5.0492449390046616E-5,
    -0.015973495357669464, 0.00071418262123206281, -0.59166948587156964,
    0.0021225823565236817, -0.010299459630324127, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00093882133146374128, 1.3841279625616153E-6,
    -1.206153931604381E-5, 0.00015081365952901749, 0.981150399664804,
    0.00063372306485691757, 0.017882158594747507, 1.6369965179846123E-5,
    -0.00021776442523491939, 0.0020932210162718521, -0.35158907532705713,
    0.01114710450062735, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.09334793671731445, -5.9587873795364242E-8, 1.20190401843141E-6,
    -1.4488074279944177E-5, 0.0018805912269271355, -0.00016906552438556208,
    0.87002457147825241, -2.683400562635656E-7, 2.1110295983107384E-5,
    -0.00019284987943020938, 0.0341772444112086, -0.002898468297346296, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -7.8083873066623987E-8, 0.093381174242928466,
    4.7247067653614041E-6, -0.003763630640453442, 1.5113534191117035E-5,
    9.1164223831946328E-5, -3.0953714819491979E-7, 0.87083101198197732,
    6.7850986597013432E-5, -0.056417409980487353, 0.00020021846561623925,
    0.0015414305249194533, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.8562507998505658E-6, 5.4672459330519354E-6, 0.0928756408251712,
    0.00045382267004579851, -0.00011421181600882008, -8.7108765561398318E-7,
    3.2322949935920194E-5, 7.7517356615050759E-5, 0.86098249655153714,
    0.0067796198292429874, -0.0020623658544282539, -1.2266826155336925E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -3.312709025029761E-6,
    -0.00065570067464619606, 6.66608487403124E-5, 0.046965988225095304,
    0.00021373457582458318, 7.79016608365713E-5, -4.4834251932472461E-5,
    -0.010147263901854463, 0.0010163359420908575, 0.15958399395491152,
    0.0030319638917673656, 0.00083036723547938679, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00032257074107937511, 1.8071994536395229E-6,
    -1.1843709815711279E-5, 0.00015133659085894932, 0.081506229239630787,
    2.0114682928650291E-5, 0.0061766616912043827, 2.4263826850277538E-5,
    -0.00021829865314779628, 0.0021663614229478515, 0.648243092346036,
    0.00054487686524304552, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -5.6434663742717515E-5, 2.2639235563593626E-5, -1.6944602724205093E-7,
    0.00013560352764842035, -3.3168583927550358E-7, 0.068976598393030164,
    -0.00096912881925824478, 0.0003799983218240476, -2.0149026748997439E-6,
    0.0017057078196493856, -1.1075088464686436E-5, 0.45147932157329296, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0 };

  static const int8_T e_0[240] = { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };

  static const real_T c_b[48] = { 0.02112443491058583, -0.015284356933675681,
    -7.0837403672252132E-5, 0.062952228101239543, 0.019032522297668639,
    -0.17235611708486639, 0.021112545591001931, 0.01555652319878203,
    9.3712054745178266E-5, -0.060884483374622281, 0.01961380565091311,
    -0.17335012146094611, 0.021790267284400529, -0.01556568704794139,
    -6.7363334491227155E-5, 0.060331047065513788, 0.019031465986279989,
    0.17628138981294919, 0.02177837796481662, 0.015275193084516331,
    9.7186123926203244E-5, -0.063505664410348023, 0.019612749339524459,
    0.1752873854368695, -0.001819638864719295, -0.0034249251816346319,
    -0.02095639900015615, -0.26767193546582568, 0.10593667623599359,
    0.00062021813460420567, -0.0018124211550371481, 0.003387750973601051,
    0.021100316216985739, 0.26476621250220889, 0.10537885436940329,
    -0.0006207996116589, 0.0018538731733468781, 0.0035708122797193449,
    -0.021822949502860629, 0.2790736050389333, -0.10793139553633729,
    -0.00064672437426625525, 0.001778186846409557, -0.0035336380716857632,
    0.02167903228603104, -0.27616788207531651, -0.1033841350690595,
    0.000647305851320949 };

  static const real_T d[580] = { 0.00010143328255472997, -7.4704776485318855E-5,
    -1.8645270459872354E-7, 0.00019140674693907217, 8.5038883228688721E-5,
    -0.00067235125441895516, 0.0019875811271118696, -0.0014724182776684265,
    -2.6256554783757377E-6, 0.0029933082973712436, 0.001604284878039995,
    -0.011888216490967659, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.00010140104929637703, 7.5672272474951879E-5, 2.889593735278862E-7,
    -0.00018691215237343404, 8.65625617778501E-5, -0.00067654016459980178,
    0.0019871230172259263, 0.0014887185863831211, 4.540904331314437E-6,
    -0.0029388508896146513, 0.0016256201972348837, -0.011963601473146976, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.00010390741322717041,
    -7.5697294618568478E-5, -1.7902408563442913E-7, 0.00018546180415398523,
    8.5053424541671566E-5, 0.00068773391999028908, 0.0020300683358282006,
    -0.0014890776398609072, -2.5373208949948813E-6, 0.0029185290082794297,
    0.0016047704167896431, 0.012159270371899676, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.00010387517996881737, 7.4679754341702324E-5,
    2.9638799249218066E-7, -0.00019285709515852104, 8.657710309083297E-5,
    0.00068354500980944322, 0.0020296102259422561, 0.0014720592241906417,
    4.6292389146952946E-6, -0.0030136301787064656, 0.0016261057359845325,
    0.012083885389720368, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -7.4937712529938835E-6, -9.7368093232105823E-6, -0.00010046501247254948,
    -0.00080739564790885214, 0.00046046541548495359, 1.5833628929688503E-6,
    -0.00013487437689774386, -0.00014421984187735194, -0.0019654553820737126,
    -0.012551954742611898, 0.0085762077736487481, 2.4072993921008426E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -7.5300604452406248E-6,
    9.64631533205703E-6, 0.00010105565151951922, 0.0007998760719325125,
    0.00046230482296640246, -1.4605366156632431E-6, -0.00013599679599170114,
    0.00014303663459201585, 0.0019761207871032971, 0.012447722129703666,
    0.0086398558334075445, -1.9478376169547482E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 7.6310823003084244E-6, 1.0142431369521208E-5,
    -0.00010311730272701939, 0.0008410440593245, -0.00046890987070251377,
    -1.648031191772373E-6, 0.00013731094575583703, 0.0001501287757765113,
    -0.0020069196194684525, 0.013067176153868593, -0.0087314003897193179,
    -2.5008441914170139E-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    7.3927493979260475E-6, -1.0051937378367648E-5, 0.00010252666368004961,
    -0.00083352448334816074, -0.00045386036774884174, 1.5252049144667631E-6,
    0.00013356022713360732, -0.00014894556849117505, 0.0019962542144388671,
    -0.012962943540960366, -0.0084846632173369661, 2.0413824162709147E-5, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T f_0[348] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T n_0[20] = { 0.0, 0.0, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T q[384] = { -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };

  static const real_T r[625] = { 1.0587849294501461, 0.33893472825348869,
    -0.065367973749686448, -0.225218174946344, 0.0071329065632601517,
    0.0680995246529675, -0.0066005270810335541, -0.068631904135193753,
    0.770827677938505, 0.28222367148761057, -0.062993379830536919,
    -0.19159738628143147, 0.0053891999660764193, 0.057469828525251176,
    -0.004919433246430154, -0.057939595244897106, 0.64812343487648572,
    0.2280016624282418, -0.058141224945612538, -0.15826299739385649,
    0.003756389210660818, 0.047002665826608676, -0.0033511074521612922,
    -0.047407947585107926, 0.0, 0.33893472825348869, 1.0616585711507724,
    -0.22805281776650774, -0.065328974869224621, 0.065214981820532633,
    0.010288872679465098, -0.066941244665115585, -0.0085626098348824346,
    0.282156890308346, 0.77330110811442043, -0.1940341733816846,
    -0.0628899555756105, 0.0552640556477518, 0.0078445941409951685,
    -0.056749082566632365, -0.0063595672221148543, 0.22789192231615571,
    0.65018516157222161, -0.16029130768991587, -0.057998068433850324,
    0.045379874500688235, 0.0056024701164497544, -0.046619371183118048,
    -0.00436297343402016, 0.0, -0.065367973749686462, -0.22805281776650774,
    1.0723920355638361, 0.34970719154701485, 0.012111567977196844,
    0.068072203827549152, -0.01171438302132136, -0.06846938878342429,
    -0.063026158834006391, -0.19413393849840221, 0.78230644742530786,
    0.29119866776091213, 0.0090581260079693141, 0.057328421847115833,
    -0.0086903459535767943, -0.057696201901508065, -0.058193471160253848,
    -0.16045343311387988, 0.65752467074046062, 0.23526470878683459,
    0.0063466839354834673, 0.046796735300208794, -0.0060153063855472111,
    -0.047128112850144788, 0.0, -0.225218174946344, -0.065328974869224607,
    0.34970719154701485, 1.0695963916241342, 0.07019364323446918,
    0.010261551854046902, -0.072055100605403211, -0.0084000944831131522,
    -0.19169694646416552, -0.063056501871592674, 0.29126565387416026,
    0.7799060984667332, 0.058932981689644573, 0.0077031874628599581,
    -0.060519995273778875, -0.00611617387872592, -0.15842498372058395,
    -0.0582699339699004, 0.23537458799615724, 0.65552963774684092,
    0.047970169225510777, 0.0053965395900499834, -0.04928357011650384,
    -0.0040831386990571351, 0.0, 0.0071329065632601534, 0.065214981820532619,
    0.012111567977196844, 0.07019364323446918, 1.1804128309940536,
    -0.043752093685048274, -0.18699731082395329, -0.18966342648505272,
    0.0053055975120716234, 0.055468148389306839, 0.0095951910946728575,
    0.059757741971907939, 0.71344590176589584, -0.033899784175674241,
    -0.16674215798965289, -0.15280395960056953, 0.0035865177478132987,
    0.045643980050712137, 0.0071901868877603647, 0.049247649190659062,
    0.60767815870862807, -0.026073220097797448, -0.1433206222900047,
    -0.11828431632082659, 0.0, 0.0680995246529675, 0.010288872679465098,
    0.068072203827549152, 0.0102615518540469, -0.043752093685048253,
    1.1857473144953072, -0.1960830091942731, -0.18591221161598434,
    0.057930931613254369, 0.008024953466463319, 0.057895234981185345,
    0.0079892568343944443, -0.033901466342080182, 0.717910868540085,
    -0.15830612090731011, -0.16570328129069334, 0.047689388999219248,
    0.0058678637810890694, 0.047647743603054876, 0.0058262183849248344,
    -0.026074286383796687, 0.61126712739417166, -0.12283777212278602,
    -0.14235506888758775, 0.0, -0.0066005270810335567, -0.066941244665115585,
    -0.011714383021321358, -0.072055100605403211, -0.18699731082395329,
    -0.19608300919427313, 1.1957581057380622, -0.05267778571983471,
    -0.0048296757013477788, -0.056948359607130225, -0.00923582861229059,
    -0.061354512518072904, -0.16670315746880912, -0.15830372791051259,
    0.7267320144676237, -0.041725129088301151, -0.0031712795252670308,
    -0.046873372519118439, -0.0068729370314991557, -0.050575030025350437,
    -0.14325331186328705, -0.12283354226413667, 0.61882231817327527,
    -0.03273546404585069, 0.0, -0.068631904135193753, -0.0085626098348824346,
    -0.06846938878342429, -0.0084000944831131522, -0.18966342648505272,
    -0.18591221161598437, -0.05267778571983471, 1.1882534238208704,
    -0.058406853423977889, -0.0065447422486401832, -0.058254597463567322,
    -0.0063924862882297553, -0.15284127795500732, -0.16570735645389678,
    -0.041683735570659873, 0.72023236997956264, -0.048104627221765249,
    -0.0046384713126829567, -0.047964993459315854, -0.0044988375502336836,
    -0.11835056046154493, -0.14236036503223637, -0.032663923760483743,
    0.61337484925426389, 0.0, 0.770827677938505, 0.28215689030834595,
    -0.063026158834006391, -0.19169694646416555, 0.0053055975120716234,
    0.057930931613254369, -0.004829675701347777, -0.058406853423977889,
    0.86076081888563161, 0.23660893069450251, -0.060040870290205224,
    -0.16419275848133441, 0.0039586286701126907, 0.049373863096529587,
    -0.003534620333902653, -0.049797871432739366, 0.594193363026968,
    0.19257480238620209, -0.054966577240537391, -0.13658513788130333,
    0.0026939952283032646, 0.040793655840535549, -0.0023249071191937584,
    -0.041162743949644816, 0.0, 0.28222367148761063, 0.77330110811442054,
    -0.19413393849840221, -0.063056501871592674, 0.055468148389306846,
    0.00802495346646332, -0.056948359607130225, -0.0065447422486401832,
    0.23660893069450248, 0.862906243724831, -0.166303637639834,
    -0.060006324609505821, 0.047479512412415957, 0.0060907154246162137,
    -0.048766005079828853, -0.0048042227572035329, 0.19252747198818909,
    0.5959960146862795, -0.13835608563313131, -0.0548875429350412,
    0.0393920563394223, 0.0043094252149881024, -0.040477129438311991,
    -0.0032243521160985941, 0.0, -0.0629933798305369, -0.19403417338168458,
    0.78230644742530786, 0.29126565387416026, 0.0095951910946728575,
    0.057895234981185338, -0.00923582861229059, -0.058254597463567322,
    -0.060040870290205238, -0.166303637639834, 0.870508928813631,
    0.24424616146400208, 0.0071393098709903718, 0.049237999397473003,
    -0.0068038439417347114, -0.049573465326728391, -0.054988003712717268,
    -0.1384247484238082, 0.60223293531180366, 0.19879619060071277,
    0.0049533829172505517, 0.0406014469628784, -0.0046488991601609294,
    -0.0409059307199678, 0.0, -0.19159738628143147, -0.0628899555756105,
    0.29119866776091219, 0.7799060984667332, 0.059757741971907939,
    0.007989256834394446, -0.0613545125180729, -0.0063924862882297553,
    -0.16419275848133441, -0.060006324609505834, 0.2442461614640021,
    0.86843259533583084, 0.050660193613293519, 0.0059548517255597405,
    -0.052035228687660785, -0.0045798166511927009, -0.13665389475149622,
    -0.055003536123731094, 0.19884342691920975, 0.600493785546975,
    0.041651444028369483, 0.00411721633733105, -0.042801121479279058,
    -0.0029675388864216718, 0.0, 0.005389199966076421, 0.0552640556477518,
    0.0090581260079693124, 0.058932981689644573, 0.71344590176589584,
    -0.033901466342080168, -0.16670315746880912, -0.15284127795500732,
    0.0039586286701126915, 0.047479512412415957, 0.0071393098709903709,
    0.050660193613293519, 1.01989352195942, -0.026375803636227716,
    -0.14978243473888131, -0.12373528358431167, 0.0026066853711918993,
    0.039472300662668124, 0.0052984615327590148, 0.04216407682423514,
    0.56642878137146335, -0.020433772721664755, -0.12975011160977815,
    -0.09624489704002108, 0.0, 0.057469828525251176, 0.00784459414099517,
    0.057328421847115833, 0.0077031874628599572, -0.033899784175674248,
    0.717910868540085, -0.15830372791051259, -0.16570735645389675,
    0.049373863096529587, 0.0060907154246162137, 0.049237999397473003,
    0.00595485172555974, -0.026375803636227702, 1.0236580305632779,
    -0.12845970181169644, -0.14882252511535271, 0.041056267279950362,
    0.0044107883149599779, 0.040928846438911849, 0.0042833674739215736,
    -0.020433039320141688, 0.56947768756559536, -0.10019203693425202,
    -0.12885261131120063, 0.0, -0.0049194332464301575, -0.056749082566632365,
    -0.0086903459535767943, -0.060519995273778882, -0.16674215798965289,
    -0.15830612090731011, 0.72673201446762381, -0.041683735570659873,
    -0.0035346203339026538, -0.048766005079828853, -0.0068038439417347114,
    -0.052035228687660785, -0.14978243473888131, -0.12845970181169644,
    1.031508170218862, -0.033266033668283367, -0.0022334618000305149,
    -0.040551795864752785, -0.00500028396287898, -0.043318618027601147,
    -0.12971889878467383, -0.10018984777296761, 0.57626580323606569,
    -0.026357056678423644, 0.0, -0.057939595244897106, -0.0063595672221148543,
    -0.057696201901508058, -0.0061161738787259209, -0.15280395960056953,
    -0.16570328129069331, -0.041725129088301137, 0.72023236997956264,
    -0.049797871432739366, -0.0048042227572035329, -0.049573465326728391,
    -0.0045798166511927026, -0.12373528358431167, -0.14882252511535274,
    -0.033266033668283367, 1.0258238423679467, -0.041429490851111514,
    -0.0033312931128755027, -0.041227024008791663, -0.0031288262705557661,
    -0.09627684326664844, -0.128854067070962, -0.026323654692034917,
    0.57145456502964431, 0.0, 0.64812343487648572, 0.22789192231615571,
    -0.058193471160253855, -0.15842498372058395, 0.0035865177478132978,
    0.047689388999219248, -0.0031712795252670308, -0.048104627221765249,
    0.594193363026968, 0.19252747198818906, -0.054988003712717268,
    -0.13665389475149625, 0.0026066853711918998, 0.041056267279950362,
    -0.002233461800030514, -0.041429490851111514, 0.70253089348363529,
    0.15804958923779436, -0.050150408200452683, -0.11463171244629368,
    0.0016692490991521596, 0.034316800095244071, -0.0013406414109346123,
    -0.034645407783461424, 0.0, 0.22800166242824182, 0.65018516157222161,
    -0.16045343311387988, -0.058269933969900406, 0.045643980050712137,
    0.0058678637810890694, -0.046873372519118439, -0.0046384713126829567,
    0.19257480238620214, 0.5959960146862795, -0.1384247484238082,
    -0.055003536123731094, 0.039472300662668124, 0.00441078831495998,
    -0.040551795864752785, -0.0033312931128755027, 0.15804958923779436,
    0.704059727230521, -0.11613107412267347, -0.050120936129947072,
    0.03313642656755731, 0.0030494305370973541, -0.034057967761859889,
    -0.00212788934279493, 0.0, -0.058141224945612538, -0.16029130768991584,
    0.6575246707404605, 0.23537458799615726, 0.0071901868877603638,
    0.047647743603054883, -0.0068729370314991548, -0.047964993459315861,
    -0.054966577240537384, -0.13835608563313131, 0.60223293531180366,
    0.19884342691920975, 0.0052984615327590148, 0.040928846438911842,
    -0.00500028396287898, -0.041227024008791663, -0.05015040820045269,
    -0.11613107412267346, 0.70921576104526474, 0.16323509512304396,
    0.003596632651596419, 0.034140137017856446, -0.0033232782732567035,
    -0.034413491396195962, 0.0, -0.15826299739385649, -0.05799806843385031,
    0.23526470878683459, 0.65552963774684092, 0.049247649190659062,
    0.0058262183849248353, -0.050575030025350437, -0.0044988375502336845,
    -0.13658513788130333, -0.054887542935041209, 0.1987961906007128,
    0.600493785546975, 0.04216407682423514, 0.0042833674739215753,
    -0.04331861802760114, -0.0031288262705557665, -0.11463171244629368,
    -0.050120936129947079, 0.16323509512304396, 0.70774587143939072,
    0.035063810120001475, 0.0028727674597098162, -0.036040604624181891,
    -0.0018959729555295705, 0.0, 0.0037563892106608197, 0.045379874500688235,
    0.0063466839354834673, 0.047970169225510777, 0.60767815870862818,
    -0.026074286383796677, -0.14325331186328705, -0.11835056046154493,
    0.002693995228303265, 0.0393920563394223, 0.00495338291725055,
    0.041651444028369483, 0.56642878137146346, -0.020433039320141681,
    -0.12971889878467383, -0.09627684326664844, 0.0016692490991521603,
    0.03313642656755731, 0.003596632651596419, 0.035063810120001475,
    0.88472056288285117, -0.01605662621723928, -0.11346667849540586,
    -0.075197258170206532, 0.0, 0.047002665826608676, 0.0056024701164497535,
    0.046796735300208794, 0.0053965395900499834, -0.026073220097797448,
    0.61126712739417166, -0.12283354226413667, -0.14236036503223637,
    0.040793655840535549, 0.0043094252149881032, 0.0406014469628784,
    0.0041172163373310493, -0.020433772721664755, 0.56947768756559536,
    -0.10018984777296761, -0.12885406707096198, 0.034316800095244071,
    0.0030494305370973545, 0.034140137017856446, 0.0028727674597098154,
    -0.01605662621723928, 0.8872089160234129, -0.078500964164088111,
    -0.1126513256420847, 0.0, -0.0033511074521612948, -0.046619371183118048,
    -0.006015306385547212, -0.049283570116503847, -0.1433206222900047,
    -0.12283777212278603, 0.61882231817327527, -0.03266392376048375,
    -0.0023249071191937605, -0.040477129438311991, -0.0046488991601609294,
    -0.042801121479279065, -0.12975011160977815, -0.10019203693425202,
    0.5762658032360658, -0.026323654692034921, -0.0013406414109346123,
    -0.034057967761859889, -0.0033232782732567035, -0.036040604624181891,
    -0.11346667849540586, -0.078500964164088111, 0.89314792447612057,
    -0.021180281816626036, 0.0, -0.047407947585107926, -0.00436297343402016,
    -0.047128112850144795, -0.0040831386990571351, -0.11828431632082659,
    -0.14235506888758775, -0.03273546404585069, 0.61337484925426389,
    -0.041162743949644816, -0.0032243521160985936, -0.0409059307199678,
    -0.0029675388864216726, -0.0962448970400211, -0.12885261131120063,
    -0.02635705667842363, 0.57145456502964431, -0.034645407783461424,
    -0.0021278893427949296, -0.034413491396195962, -0.0018959729555295714,
    -0.075197258170206532, -0.11265132564208473, -0.02118028181662604,
    0.88902886562891648, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    100000.0 };

  static const real_T s[1200] = { -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, -0.0, -0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -1.0, -0.0, -0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, -0.0, -0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -1.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0,
    -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T t[13] = { 900.0, 900.0, 900.0, 900.0, 900.0, 900.0, 900.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T u[8] = { 0.16000000000000003, 0.16000000000000003,
    0.16000000000000003, 0.16000000000000003, 0.36, 0.36, 0.36, 0.36 };

  static const real_T v[1920] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  static const real_T w[640] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    1.0 };

  static const real_T h_0[48] = { 241.0, 242.0, 243.0, 244.0, 245.0, 246.0,
    247.0, 248.0, 249.0, 250.0, 251.0, 252.0, 253.0, 254.0, 255.0, 256.0, 257.0,
    258.0, 259.0, 260.0, 261.0, 262.0, 263.0, 264.0, 321.0, 322.0, 323.0, 324.0,
    325.0, 326.0, 327.0, 328.0, 329.0, 330.0, 331.0, 332.0, 333.0, 334.0, 335.0,
    336.0, 337.0, 338.0, 339.0, 340.0, 341.0, 342.0, 343.0, 344.0 };

  static const real_T l_0[12] = { 0.0, 0.0, 0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0 };

  static const real_T q_0[625] = { 3.4212276812754183, 2.5937320696057888,
    -2.2255980567584674, -2.4930936684280991, 0.068653985611946883,
    0.61394348838862911, -0.064289818211447941, -0.61830765578912772,
    2.7563723949601551, 2.17517073101817, -1.8764447727234119,
    -2.0976464366653986, 0.055146904229768409, 0.52663013575960949,
    -0.051247343659666315, -0.53052969632971125, 2.2676967513213881,
    1.7701826846768121, -1.5359873448931114, -1.7135014115376892,
    0.041203781726587306, 0.43730545846543706, -0.037791645197541489,
    -0.44071759499448271, 0.0, 2.5937320696057884, 3.443006698815215,
    -2.5145159473556555, -2.2252413181462325, 0.5882322569303744,
    0.0967301593040375, -0.60253591600181688, -0.082426500232594416,
    2.1743420849684196, 2.7752110921698652, -2.1161458429163855,
    -1.8752768357149421, 0.50690936149214871, 0.077070459335175229,
    -0.51950803827768921, -0.064471782549634413, 1.7688139604371744,
    2.2834640445967831, -1.7289552223169087, -1.5343051381573012,
    0.42275311861352272, 0.057752651830151422, -0.43350309140821541,
    -0.04700267903545844, 0.0, -2.2255980567584679, -2.5145159473556555,
    3.5247293479848567, 2.6758114573876703, 0.11350450594869978,
    0.61373693419680808, -0.11035519832074202, -0.61688624182476548,
    -1.8757362052104734, -2.1162607690915181, 2.8437745494265636,
    2.2432499855455212, 0.088230082879741364, 0.52543716098203219,
    -0.085247435612467073, -0.52841980824930612, -1.5347826123151498,
    -1.7291081364463659, 2.3393320018761594, 1.8250064777449444,
    0.064586258939598379, 0.43555087443788276, -0.061838908299375606,
    -0.43829822507810529, 0.0, -2.4930936684280987, -2.2252413181462325,
    2.6758114573876703, 3.5036638076695397, 0.63308277726712725,
    0.096523605112216262, -0.64860129611111117, -0.08100508626823201,
    -2.0977665152022107, -1.8762204079398246, 2.2440734792335917,
    2.8256195864959794, 0.539992540142122, 0.075877484557597741,
    -0.55350813023049006, -0.062361894469229122, -1.7136654031993654,
    -1.535826776526396, 1.8263641244523627, 2.324202751125334,
    0.44613559582653395, 0.055998067802596939, -0.45755035451004972,
    -0.044583309119080913, 0.0, 0.068653985611946869, 0.5882322569303744,
    0.11350450594869976, 0.63308277726712725, 3.5842313927226419,
    0.567309177257565, -2.64668128397, -0.74485928601020512,
    0.050948444427709287, 0.49921208400210165, 0.089588381870970124,
    0.5378520214453627, 2.7717531616546838, 0.46565573149351197,
    -2.2739646429888687, -0.60344425015932524, 0.034409649775757806,
    0.409886584442907, 0.066867124040622811, 0.44234405870777221,
    2.3128043469427082, 0.36300585600530044, -1.8899240858651682,
    -0.46588611708283906, 0.0, 0.61394348838862911, 0.096730159304037514,
    0.61373693419680808, 0.096523605112216276, 0.56730917725756513,
    3.6283589244699161, -0.798744894582745, -2.6369232071447355,
    0.521132693794129, 0.075111985489370731, 0.52083725325293373,
    0.07481654494817537, 0.46539997909216163, 2.8086421299935971,
    -0.64966087714196652, -2.2643812319437906, 0.42806835484317579,
    0.054660551606041413, 0.4277062521189971, 0.054298448881862665,
    0.36260323956808366, 2.3423948490408062, -0.50415091106129528,
    -1.8808471775475939, 0.0, -0.064289818211447955, -0.60253591600181677,
    -0.11035519832074202, -0.64860129611111117, -2.64668128397,
    -0.798744894582745, 3.7128320173357992, 0.49259416121694261,
    -0.047066661511494454, -0.51138453412922369, -0.086752963185975182,
    -0.55107083580370464, -2.2729046031600912, -0.65010953455135223,
    2.8831840318096429, 0.39983010590179813, -0.03104232744195538,
    -0.41991469635090267, -0.064378309534073974, -0.45325067844302142,
    -1.8881259412667077, -0.50491505723777319, 2.4063052194471322,
    0.30673577905734717, 0.0, -0.61830765578912783, -0.0824265002325944,
    -0.61688624182476548, -0.08100508626823201, -0.74485928601020512,
    -2.6369232071447346, 0.49259416121694249, 3.6491883319379959,
    -0.52501447671034362, -0.062939535362248292, -0.52367267193792855,
    -0.061597730589833019, -0.60424853758675245, -2.2641883269357548,
    0.40044148832118981, 2.8279953762013168, -0.43143567717697789,
    -0.04463243969804534, -0.43019506662554574, -0.043391829146612992,
    -0.4672816452440825, -1.8804856478083323, 0.30776977747932954,
    2.3599975155730846, 0.0, 2.7563723949601551, 2.1743420849684196,
    -1.8757362052104734, -2.0977665152022102, 0.050948444427709287,
    0.52113269379412908, -0.047066661511494454, -0.52501447671034362,
    2.541516512223744, 1.8363176294767876, -1.5923676624454064,
    -1.7775665451923648, 0.040739398923166088, 0.45113479459487532,
    -0.037235726602553865, -0.45463846691548732, 1.9754332343722554,
    1.505455405181328, -1.3128310094270974, -1.4628088386180254,
    0.030097406279833865, 0.37815418140898321, -0.027003205908982628,
    -0.38124838177983439, 0.0, 2.17517073101817, 2.7752110921698652,
    -2.1162607690915176, -1.8762204079398246, 0.49921208400210165,
    0.075111985489370731, -0.51138453412922369, -0.062939535362248292,
    1.8363176294767873, 2.5579481559350645, -1.7936703411328581,
    -1.5920398146745831, 0.4342268381938082, 0.059747933749729761,
    -0.44505833910074322, -0.048916432842794372, 1.5048619478873846,
    1.9893047503451076, -1.476377767772008, -1.3119349653142862,
    0.36561010655913706, 0.044552068155831431, -0.37494815572084977,
    -0.035214018994118433, 0.0, -1.8764447727234119, -2.1161458429163855,
    2.8437745494265636, 2.2440734792335917, 0.089588381870970152,
    0.52083725325293373, -0.086752963185975182, -0.52367267193792855,
    -1.5923676624454066, -1.7936703411328578, 2.6158629651297209,
    1.8945602864422701, 0.069419323350323914, 0.44997748591311987,
    -0.066710909310831179, -0.45268589995261227, -1.3122899851804406,
    -1.4764236743592849, 2.0368321778579519, 1.5526984886791089,
    0.050493589000511076, 0.37650996134340603, -0.0479799639835136,
    -0.37902358636040334, 0.0, -2.0976464366653986, -1.8752768357149423,
    2.2432499855455212, 2.8256195864959794, 0.5378520214453627,
    0.074816544948175356, -0.55107083580370453, -0.061597730589833019,
    -1.7775665451923646, -1.5920398146745831, 1.8945602864422704,
    2.6000870169600541, 0.46290676262096608, 0.058590625067974127,
    -0.4745335218090207, -0.046963865879919242, -1.4628612716653122,
    -1.3125743291955068, 1.5532854195130426, 2.0235723619828496,
    0.3860062892798144, 0.042907848090254122, -0.39592491379538081,
    -0.032989223574687372, 0.0, 0.055146904229768409, 0.50690936149214871,
    0.088230082879741351, 0.539992540142122, 2.7717531616546838,
    0.46539997909216158, -2.2729046031600912, -0.60424853758675245,
    0.040739398923166074, 0.4342268381938082, 0.0694193233503239,
    0.46290676262096608, 2.7989534096546516, 0.38381794562788013,
    -1.9712157027568997, -0.49155565252563022, 0.027213351889928378,
    0.35994009538698146, 0.051483331110835438, 0.38421007460788875,
    2.0544022917028331, 0.30052983687705781, -1.654031923362614,
    -0.3809002052172758, 0.0, 0.5266301357596096, 0.077070459335175243,
    0.52543716098203219, 0.075877484557597741, 0.465655731493512,
    2.8086421299935971, -0.65010953455135223, -2.2641883269357548,
    0.45113479459487532, 0.059747933749729767, 0.44997748591311981,
    0.058590625067974134, 0.38381794562788019, 2.830025671074857,
    -0.531261758180535, -1.9625818585222019, 0.37405554340445579,
    0.043276402500144355, 0.37295912771670919, 0.042179986812397756,
    0.3003678384796824, 2.0795233497035657, -0.41410031747940451,
    -1.6457908707038427, 0.0, -0.051247343659666329, -0.51950803827768921,
    -0.085247435612467073, -0.55350813023049017, -2.2739646429888687,
    -0.64966087714196652, 2.8831840318096429, 0.40044148832118986,
    -0.037235726602553865, -0.44505833910074316, -0.066710909310831179,
    -0.4745335218090207, -1.9712157027568997, -0.531261758180535,
    2.8964979914488831, 0.32597946948854961, -0.024146181433346108,
    -0.36895490284229615, -0.049089306596503221, -0.39389802800545343,
    -1.6532243950026673, -0.41443994913730164, 2.1370949353525761,
    0.25056940878739142, 0.0, -0.53052969632971125, -0.064471782549634413,
    -0.52841980824930612, -0.062361894469229115, -0.60344425015932524,
    -2.2643812319437906, 0.399830105901798, 2.8279953762013168,
    -0.45463846691548732, -0.048916432842794351, -0.45268589995261221,
    -0.046963865879919242, -0.49155565252563027, -1.9625818585222017,
    0.32597946948854956, 2.8481580415592811, -0.37712271386103785,
    -0.034261595044829334, -0.37535315223104132, -0.032492033414832693,
    -0.38154573517984713, -1.6456132374433206, 0.251037305489441,
    2.0961216671337262, 0.0, 2.2676967513213881, 1.7688139604371744,
    -1.5347826123151498, -1.7136654031993654, 0.034409649775757813,
    0.42806835484317579, -0.031042327441955373, -0.43143567717697789,
    1.9754332343722554, 1.5048619478873848, -1.3122899851804406,
    -1.462861271665312, 0.027213351889928378, 0.37405554340445579,
    -0.024146181433346112, -0.37712271386103785, 1.8475646170830922,
    1.2443253312847946, -1.091052081916583, -1.2142913677148814,
    0.019475399797295349, 0.3169662600875276, -0.016734590018542075,
    -0.31970706986628072, 0.0, 1.7701826846768121, 2.2834640445967831,
    -1.7291081364463659, -1.535826776526396, 0.409886584442907,
    0.054660551606041406, -0.41991469635090267, -0.044632439698045347,
    1.505455405181328, 1.9893047503451076, -1.4764236743592849,
    -1.3125743291955068, 0.35994009538698146, 0.043276402500144355,
    -0.36895490284229615, -0.03426159504482934, 1.2443253312847944,
    1.8593928050643977, -1.2258333493752815, -1.0907658755956793,
    0.30642167824006511, 0.031804359117204466, -0.31428772587432574,
    -0.023938311482943578, 0.0, -1.5359873448931112, -1.7289552223169087,
    2.3393320018761594, 1.8263641244523627, 0.066867124040622811,
    0.4277062521189971, -0.06437830953407396, -0.43019506662554574,
    -1.3128310094270974, -1.476377767772008, 2.0368321778579519,
    1.5532854195130426, 0.051483331110835459, 0.37295912771670919,
    -0.049089306596503221, -0.37535315223104132, -1.0910520819165832,
    -1.2258333493752813, 1.8987225417106048, 1.2839412742519072,
    0.03687449267255126, 0.3154474214771909, -0.03462956337234855,
    -0.31769235077739338, 0.0, -1.7135014115376894, -1.5343051381573014,
    1.8250064777449442, 2.324202751125334, 0.44234405870777221,
    0.054298448881862665, -0.45325067844302142, -0.043391829146613006,
    -1.4628088386180254, -1.3119349653142862, 1.5526984886791089,
    2.0235723619828496, 0.38421007460788875, 0.042179986812397742,
    -0.39389802800545343, -0.032492033414832693, -1.2142913677148812,
    -1.0907658755956793, 1.2839412742519074, 1.8874667663711107,
    0.32382077111532109, 0.030285520506867683, -0.33218269922813232,
    -0.021923592394056234, 0.0, 0.041203781726587292, 0.42275311861352272,
    0.064586258939598365, 0.44613559582653395, 2.3128043469427082,
    0.36260323956808355, -1.888125941266708, -0.4672816452440825,
    0.030097406279833858, 0.36561010655913706, 0.050493589000511069,
    0.3860062892798144, 2.0544022917028331, 0.30036783847968235,
    -1.6532243950026675, -0.38154573517984713, 0.019475399797295335,
    0.30642167824006511, 0.036874492672551246, 0.32382077111532109,
    2.1430876839143611, 0.23555930878194953, -1.4026549740531193,
    -0.2959920186431903, 0.0, 0.43730545846543706, 0.057752651830151443,
    0.43555087443788271, 0.055998067802596946, 0.3630058560053005,
    2.3423948490408062, -0.50491505723777319, -1.8804856478083323,
    0.37815418140898327, 0.044552068155831445, 0.37650996134340603,
    0.042907848090254129, 0.30052983687705787, 2.0795233497035657,
    -0.41443994913730164, -1.6456132374433206, 0.3169662600875276,
    0.031804359117204473, 0.3154474214771909, 0.030285520506867687,
    0.23555930878194958, 2.1635578652770171, -0.32379640673149829,
    -1.3953207673274679, 0.0, -0.037791645197541482, -0.43350309140821536,
    -0.0618389082993756, -0.45755035451004972, -1.8899240858651682,
    -0.50415091106129517, 2.4063052194471322, 0.30776977747932954,
    -0.027003205908982631, -0.37494815572084977, -0.0479799639835136,
    -0.39592491379538086, -1.654031923362614, -0.41410031747940446,
    2.1370949353525761, 0.251037305489441, -0.016734590018542068,
    -0.31428772587432569, -0.03462956337234855, -0.33218269922813232,
    -1.4026549740531193, -0.32379640673149823, 2.2140405432635246,
    0.19241083752109142, 0.0, -0.44071759499448271, -0.047002679035458433,
    -0.43829822507810529, -0.044583309119080906, -0.46588611708283906,
    -1.8808471775475939, 0.30673577905734706, 2.3599975155730846,
    -0.38124838177983433, -0.035214018994118419, -0.37902358636040334,
    -0.032989223574687365, -0.3809002052172758, -1.6457908707038427,
    0.25056940878739137, 2.0961216671337262, -0.31970706986628072,
    -0.02393831148294356, -0.31769235077739338, -0.021923592394056224,
    -0.2959920186431903, -1.3953207673274677, 0.19241083752109137,
    2.1789019484495658, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
    100000.0 };

  static const real_T s_0[12] = { 900.0, 900.0, 900.0, 2025.0, 2025.0, 2025.0,
    0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

  const real_T *Rsqrt;
  boolean_T exitg1;
  if (rtmIsMajorTimeStep((&proc_control_node_M))) {
    // set solver stop time
    if (!((&proc_control_node_M)->Timing.clockTick0+1)) {
      rtsiSetSolverStopTime(&(&proc_control_node_M)->solverInfo,
                            (((&proc_control_node_M)->Timing.clockTickH0 + 1) *
        (&proc_control_node_M)->Timing.stepSize0 * 4294967296.0));
    } else {
      rtsiSetSolverStopTime(&(&proc_control_node_M)->solverInfo,
                            (((&proc_control_node_M)->Timing.clockTick0 + 1) * (
        &proc_control_node_M)->Timing.stepSize0 + (&proc_control_node_M)
        ->Timing.clockTickH0 * (&proc_control_node_M)->Timing.stepSize0 *
        4294967296.0));
    }
  }                                    // end MajorTimeStep

  // Update absolute time of base rate at minor time step
  if (rtmIsMinorTimeStep((&proc_control_node_M))) {
    (&proc_control_node_M)->Timing.t[0] = rtsiGetT(&(&proc_control_node_M)
      ->solverInfo);
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
    // Outputs for Atomic SubSystem: '<Root>/Subsystem1'
    // Outputs for Atomic SubSystem: '<S10>/Subscribe2'
    // MATLABSystem: '<S301>/SourceBlock' incorporates:
    //   Inport: '<S307>/In1'

    rtb_Reset = Sub_proc_control_node_185_13.getLatestMessage(&b_varargout_2);

    // Outputs for Enabled SubSystem: '<S301>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S307>/Enable'

    if (rtb_Reset) {
      proc_control_node_B.In1_i2 = b_varargout_2;
    }

    // End of Outputs for SubSystem: '<S301>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe2'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe3'
    // MATLABSystem: '<S302>/SourceBlock'
    rtb_NewDvlMsg = Sub_proc_control_node_185_14.getLatestMessage
      (&b_varargout_2_0);

    // End of Outputs for SubSystem: '<S10>/Subscribe3'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe1'
    // MATLABSystem: '<S300>/SourceBlock' incorporates:
    //   Inport: '<S306>/In1'

    rtb_Merge = Sub_proc_control_node_185_12.getLatestMessage(&b_varargout_2_1);

    // Outputs for Enabled SubSystem: '<S300>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S306>/Enable'

    if (rtb_Merge) {
      proc_control_node_B.In1_cx = b_varargout_2_1;
    }

    // End of Outputs for SubSystem: '<S300>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe1'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe'
    // MATLABSystem: '<S299>/SourceBlock' incorporates:
    //   Inport: '<S305>/In1'

    b_varargout_1 = Sub_proc_control_node_185_11.getLatestMessage
      (&proc_control_node_B.b_varargout_2_c);

    // Outputs for Enabled SubSystem: '<S299>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S305>/Enable'

    if (b_varargout_1) {
      proc_control_node_B.In1_n = proc_control_node_B.b_varargout_2_c;
    }

    // End of Outputs for SubSystem: '<S299>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe5'
    // MATLABSystem: '<S304>/SourceBlock' incorporates:
    //   Inport: '<S310>/In1'

    rtb_Reset_j = Sub_proc_control_node_185_270.getLatestMessage
      (&b_varargout_2_0);

    // Outputs for Enabled SubSystem: '<S304>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S310>/Enable'

    if (rtb_Reset_j) {
      proc_control_node_B.In1_f = b_varargout_2_0;
    }

    // End of Outputs for SubSystem: '<S304>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S10>/Subscribe5'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe4'
    // MATLABSystem: '<S303>/SourceBlock'
    b_varargout_1_0 = Sub_proc_control_node_185_268.getLatestMessage
      (&b_varargout_2_0);

    // End of Outputs for SubSystem: '<S10>/Subscribe4'

    // MATLABSystem: '<S10>/MATLAB System' incorporates:
    //   Logic: '<S10>/NOT'
    //   MATLABSystem: '<S299>/SourceBlock'
    //   MATLABSystem: '<S300>/SourceBlock'
    //   MATLABSystem: '<S301>/SourceBlock'
    //   MATLABSystem: '<S302>/SourceBlock'
    //   MATLABSystem: '<S304>/SourceBlock'
    //   SignalConversion generated from: '<S10>/MATLAB System'

    if (proc_control_node_DW.obj_mv.initial_mode !=
        proc_control_node_P.MATLABSystem_initial_mode) {
      proc_control_node_DW.obj_mv.initial_mode =
        proc_control_node_P.MATLABSystem_initial_mode;
    }

    // Outputs for Atomic SubSystem: '<S10>/Subscribe5'
    //         %% Fonction qui détermine si on est mode dry_run
    if (rtb_Reset_j) {
      proc_control_node_DW.obj_mv.m_notDryRun = !proc_control_node_B.In1_f.Data;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe5'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe'
    //          %% Fonction qui détermine la condition initial
    if (b_varargout_1) {
      proc_control_node_DW.obj_mv.m_simulation = 1.0;

      //  activer la simulation
      proc_control_node_DW.obj_mv.m_initCond[0] =
        proc_control_node_B.In1_n.Position.X;
      proc_control_node_DW.obj_mv.m_initCond[1] =
        proc_control_node_B.In1_n.Position.Y;
      proc_control_node_DW.obj_mv.m_initCond[2] =
        proc_control_node_B.In1_n.Position.Z;

      //         %% Fonction qui vérifie si le quaternion est unitaire
      proc_control_node_B.scale = 3.3121686421112381E-170;
      proc_control_node_B.absxk = fabs(proc_control_node_B.In1_n.Orientation.W);
      if (proc_control_node_B.absxk > 3.3121686421112381E-170) {
        proc_control_node_B.d_h = 1.0;
        proc_control_node_B.scale = proc_control_node_B.absxk;
      } else {
        proc_control_node_B.t = proc_control_node_B.absxk /
          3.3121686421112381E-170;
        proc_control_node_B.d_h = proc_control_node_B.t * proc_control_node_B.t;
      }

      proc_control_node_B.absxk = fabs(proc_control_node_B.In1_n.Orientation.X);
      if (proc_control_node_B.absxk > proc_control_node_B.scale) {
        proc_control_node_B.t = proc_control_node_B.scale /
          proc_control_node_B.absxk;
        proc_control_node_B.d_h = proc_control_node_B.d_h *
          proc_control_node_B.t * proc_control_node_B.t + 1.0;
        proc_control_node_B.scale = proc_control_node_B.absxk;
      } else {
        proc_control_node_B.t = proc_control_node_B.absxk /
          proc_control_node_B.scale;
        proc_control_node_B.d_h += proc_control_node_B.t * proc_control_node_B.t;
      }

      proc_control_node_B.absxk = fabs(proc_control_node_B.In1_n.Orientation.Y);
      if (proc_control_node_B.absxk > proc_control_node_B.scale) {
        proc_control_node_B.t = proc_control_node_B.scale /
          proc_control_node_B.absxk;
        proc_control_node_B.d_h = proc_control_node_B.d_h *
          proc_control_node_B.t * proc_control_node_B.t + 1.0;
        proc_control_node_B.scale = proc_control_node_B.absxk;
      } else {
        proc_control_node_B.t = proc_control_node_B.absxk /
          proc_control_node_B.scale;
        proc_control_node_B.d_h += proc_control_node_B.t * proc_control_node_B.t;
      }

      proc_control_node_B.absxk = fabs(proc_control_node_B.In1_n.Orientation.Z);
      if (proc_control_node_B.absxk > proc_control_node_B.scale) {
        proc_control_node_B.t = proc_control_node_B.scale /
          proc_control_node_B.absxk;
        proc_control_node_B.d_h = proc_control_node_B.d_h *
          proc_control_node_B.t * proc_control_node_B.t + 1.0;
        proc_control_node_B.scale = proc_control_node_B.absxk;
      } else {
        proc_control_node_B.t = proc_control_node_B.absxk /
          proc_control_node_B.scale;
        proc_control_node_B.d_h += proc_control_node_B.t * proc_control_node_B.t;
      }

      proc_control_node_B.d_h = proc_control_node_B.scale * sqrt
        (proc_control_node_B.d_h);
      proc_control_node_B.Product8 = proc_control_node_B.In1_n.Orientation.W /
        proc_control_node_B.d_h;
      proc_control_node_B.b_cy[0] = rtIsNaN(proc_control_node_B.Product8);
      proc_control_node_B.n[0] = proc_control_node_B.Product8;
      proc_control_node_B.Product8 = proc_control_node_B.In1_n.Orientation.X /
        proc_control_node_B.d_h;
      proc_control_node_B.b_cy[1] = rtIsNaN(proc_control_node_B.Product8);
      proc_control_node_B.n[1] = proc_control_node_B.Product8;
      proc_control_node_B.Product8 = proc_control_node_B.In1_n.Orientation.Y /
        proc_control_node_B.d_h;
      proc_control_node_B.b_cy[2] = rtIsNaN(proc_control_node_B.Product8);
      proc_control_node_B.n[2] = proc_control_node_B.Product8;
      proc_control_node_B.Product8 = proc_control_node_B.In1_n.Orientation.Z /
        proc_control_node_B.d_h;
      proc_control_node_B.b_cy[3] = rtIsNaN(proc_control_node_B.Product8);
      rtb_Reset_j = true;
      proc_control_node_B.i_j = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.i_j < 4)) {
        if (!proc_control_node_B.b_cy[proc_control_node_B.i_j]) {
          rtb_Reset_j = false;
          exitg1 = true;
        } else {
          proc_control_node_B.i_j++;
        }
      }

      if (rtb_Reset_j) {
        proc_control_node_DW.obj_mv.m_initCond[3] = 1.0;
        proc_control_node_DW.obj_mv.m_initCond[4] = 0.0;
        proc_control_node_DW.obj_mv.m_initCond[5] = 0.0;
        proc_control_node_DW.obj_mv.m_initCond[6] = 0.0;
      } else {
        proc_control_node_DW.obj_mv.m_initCond[3] = proc_control_node_B.n[0];
        proc_control_node_DW.obj_mv.m_initCond[4] = proc_control_node_B.n[1];
        proc_control_node_DW.obj_mv.m_initCond[5] = proc_control_node_B.n[2];
        proc_control_node_DW.obj_mv.m_initCond[6] = proc_control_node_B.Product8;
      }
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe1'
    //         %% Fonction qui détermine le mode
    //          %% Fonction qui détermine l'arret d'urgence
    if (rtb_Merge) {
      proc_control_node_DW.obj_mv.m_killStatus =
        !proc_control_node_B.In1_cx.State;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe1'

    // Outputs for Atomic SubSystem: '<S10>/Subscribe2'
    //  regarder l'états de la kill
    if (rtb_Reset && (!(proc_control_node_DW.obj_mv.m_killStatus != 0.0)) &&
        (proc_control_node_DW.Delay_DSTATE != 0.0)) {
      proc_control_node_DW.obj_mv.m_mode = proc_control_node_B.In1_i2.Data;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe2'
    if ((proc_control_node_DW.obj_mv.m_killStatus != 0.0) ||
        (!(proc_control_node_DW.obj_mv.m_notDryRun != 0.0))) {
      proc_control_node_DW.obj_mv.m_mode = 0.0;
    }

    // Outputs for Atomic SubSystem: '<S10>/Subscribe3'
    //          %% Fonction qui détermine si on reset
    if (rtb_NewDvlMsg || b_varargout_1) {
      proc_control_node_DW.obj_mv.m_reset = 1.0;
    } else {
      proc_control_node_DW.obj_mv.m_reset = 0.0;
    }

    //          %% Fonction qui détermine si on clear la trajectoire
    if (rtb_NewDvlMsg || b_varargout_1 || rtb_Reset || b_varargout_1_0) {
      proc_control_node_DW.obj_mv.m_trajClear = 1.0;
    } else {
      proc_control_node_DW.obj_mv.m_trajClear = 0.0;
    }

    // End of Outputs for SubSystem: '<S10>/Subscribe3'

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o1[0] =
      proc_control_node_DW.obj_mv.m_initCond[3];
    proc_control_node_B.MATLABSystem_o1[1] =
      proc_control_node_DW.obj_mv.m_initCond[4];
    proc_control_node_B.MATLABSystem_o1[2] =
      proc_control_node_DW.obj_mv.m_initCond[5];
    proc_control_node_B.MATLABSystem_o1[3] =
      proc_control_node_DW.obj_mv.m_initCond[6];

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o2[0] =
      proc_control_node_DW.obj_mv.m_initCond[0];
    proc_control_node_B.MATLABSystem_o2[1] =
      proc_control_node_DW.obj_mv.m_initCond[1];
    proc_control_node_B.MATLABSystem_o2[2] =
      proc_control_node_DW.obj_mv.m_initCond[2];

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o3 =
      proc_control_node_DW.obj_mv.m_simulation;

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o4 = proc_control_node_DW.obj_mv.m_reset;

    // MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_B.MATLABSystem_o5 = proc_control_node_DW.obj_mv.m_mode;
    proc_control_node_B.MATLABSystem_o6 =
      proc_control_node_DW.obj_mv.m_trajClear;
    proc_control_node_B.MATLABSystem_o7 =
      proc_control_node_DW.obj_mv.m_notDryRun;

    // End of Outputs for SubSystem: '<Root>/Subsystem1'
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
    // Outputs for Atomic SubSystem: '<Root>/ROS Input'
    // SwitchCase: '<S3>/Switch Case' incorporates:
    //   DataTypeConversion: '<S3>/Cast To Double'
    //   Inport: '<S55>/In1'
    //   Inport: '<S56>/In1'
    //   Inport: '<S57>/In1'
    //   Inport: '<S61>/In1'
    //   Inport: '<S62>/In1'
    //   Inport: '<S63>/In1'
    //   MATLABSystem: '<S52>/SourceBlock'
    //   MATLABSystem: '<S53>/SourceBlock'
    //   MATLABSystem: '<S54>/SourceBlock'
    //   MATLABSystem: '<S58>/SourceBlock'
    //   MATLABSystem: '<S59>/SourceBlock'
    //   MATLABSystem: '<S60>/SourceBlock'

    if (static_cast<uint8_T>(proc_control_node_B.MATLABSystem_o3) == 1) {
      // Outputs for IfAction SubSystem: '<S3>/Simulation' incorporates:
      //   ActionPort: '<S50>/Action Port'

      // Outputs for Atomic SubSystem: '<S50>/Subscribe'
      // MATLABSystem: '<S58>/SourceBlock'
      rtb_Merge = Sub_proc_control_node_31_1241.getLatestMessage
        (&proc_control_node_B.msg_m);

      // Outputs for Enabled SubSystem: '<S58>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S61>/Enable'

      if (rtb_Merge) {
        proc_control_node_B.In1_p = proc_control_node_B.msg_m;
      }

      // End of Outputs for SubSystem: '<S58>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S50>/Subscribe'

      // SignalConversion generated from: '<S48>/ SFunction ' incorporates:
      //   Inport: '<S61>/In1'
      //   MATLAB Function: '<S3>/Quaternion Normalise'
      //   MATLABSystem: '<S58>/SourceBlock'
      //   SignalConversion generated from: '<S50>/imu Data'

      proc_control_node_B.n[1] = proc_control_node_B.In1_p.Orientation.X;
      proc_control_node_B.n[2] = proc_control_node_B.In1_p.Orientation.Y;
      proc_control_node_B.n[3] = proc_control_node_B.In1_p.Orientation.Z;

      // SignalConversion generated from: '<S50>/imu Data' incorporates:
      //   Merge: '<S3>/Merge1'

      proc_control_node_B.t = proc_control_node_B.In1_p.Orientation.W;
      proc_control_node_B.epsilon = proc_control_node_B.In1_p.AngularVelocity.X;
      proc_control_node_B.Divide1_n =
        proc_control_node_B.In1_p.AngularVelocity.Y;
      proc_control_node_B.Divide2_h =
        proc_control_node_B.In1_p.AngularVelocity.Z;

      // Outputs for Atomic SubSystem: '<S50>/Subscribe1'
      // MATLABSystem: '<S59>/SourceBlock'
      rtb_NewDvlMsg = Sub_proc_control_node_31_1242.getLatestMessage
        (&proc_control_node_B.msg_fi);

      // Outputs for Enabled SubSystem: '<S59>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S62>/Enable'

      if (rtb_NewDvlMsg) {
        proc_control_node_B.In1_c = proc_control_node_B.msg_fi;
      }

      // End of Outputs for SubSystem: '<S59>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S50>/Subscribe1'

      // SignalConversion generated from: '<S50>/dvl data' incorporates:
      //   Inport: '<S62>/In1'
      //   MATLABSystem: '<S59>/SourceBlock'
      //   Merge: '<S3>/Merge2'

      proc_control_node_B.SensorOn = proc_control_node_B.In1_c.XVelBtm;
      proc_control_node_B.Product1_j5 = proc_control_node_B.In1_c.YVelBtm;
      proc_control_node_B.Divide_p = proc_control_node_B.In1_c.ZVelBtm;
      proc_control_node_B.WhiteNoise = proc_control_node_B.In1_c.EVelBtm;
      proc_control_node_B.t11 = proc_control_node_B.In1_c.Velocity1;
      proc_control_node_B.t12 = proc_control_node_B.In1_c.Velocity2;
      proc_control_node_B.t13 = proc_control_node_B.In1_c.Velocity3;
      proc_control_node_B.t14 = proc_control_node_B.In1_c.Velocity4;

      // Outputs for Atomic SubSystem: '<S50>/Subscribe2'
      // MATLABSystem: '<S60>/SourceBlock'
      rtb_Reset = Sub_proc_control_node_31_1305.getLatestMessage
        (&proc_control_node_B.b_varargout_2_l);

      // Outputs for Enabled SubSystem: '<S60>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S63>/Enable'

      if (rtb_Reset) {
        proc_control_node_B.In1_om = proc_control_node_B.b_varargout_2_l;
      }

      // End of Outputs for SubSystem: '<S60>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S50>/Subscribe2'

      // SignalConversion generated from: '<S50>/depth data' incorporates:
      //   Inport: '<S63>/In1'
      //   MATLABSystem: '<S60>/SourceBlock'
      //   Merge: '<S3>/Merge4'

      proc_control_node_B.rtb_PressureDepth_Data =
        proc_control_node_B.In1_om.Data;

      // End of Outputs for SubSystem: '<S3>/Simulation'
    } else {
      // Outputs for IfAction SubSystem: '<S3>/Real System' incorporates:
      //   ActionPort: '<S49>/Action Port'

      // Outputs for Atomic SubSystem: '<S49>/Subscribe'
      // MATLABSystem: '<S52>/SourceBlock'
      rtb_Merge = Sub_proc_control_node_31_5.getLatestMessage
        (&proc_control_node_B.msg_m);

      // Outputs for Enabled SubSystem: '<S52>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S55>/Enable'

      if (rtb_Merge) {
        proc_control_node_B.In1 = proc_control_node_B.msg_m;
      }

      // End of Outputs for SubSystem: '<S52>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S49>/Subscribe'

      // SignalConversion generated from: '<S48>/ SFunction ' incorporates:
      //   Inport: '<S55>/In1'
      //   MATLAB Function: '<S3>/Quaternion Normalise'
      //   MATLABSystem: '<S52>/SourceBlock'
      //   SignalConversion generated from: '<S49>/imu Data'

      proc_control_node_B.n[1] = proc_control_node_B.In1.Orientation.X;
      proc_control_node_B.n[2] = proc_control_node_B.In1.Orientation.Y;
      proc_control_node_B.n[3] = proc_control_node_B.In1.Orientation.Z;

      // SignalConversion generated from: '<S49>/imu Data' incorporates:
      //   Merge: '<S3>/Merge1'

      proc_control_node_B.t = proc_control_node_B.In1.Orientation.W;
      proc_control_node_B.epsilon = proc_control_node_B.In1.AngularVelocity.X;
      proc_control_node_B.Divide1_n = proc_control_node_B.In1.AngularVelocity.Y;
      proc_control_node_B.Divide2_h = proc_control_node_B.In1.AngularVelocity.Z;

      // Outputs for Atomic SubSystem: '<S49>/Subscribe1'
      // MATLABSystem: '<S53>/SourceBlock'
      rtb_NewDvlMsg = Sub_proc_control_node_31_1235.getLatestMessage
        (&proc_control_node_B.msg_fi);

      // Outputs for Enabled SubSystem: '<S53>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S56>/Enable'

      if (rtb_NewDvlMsg) {
        proc_control_node_B.In1_i = proc_control_node_B.msg_fi;
      }

      // End of Outputs for SubSystem: '<S53>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S49>/Subscribe1'

      // SignalConversion generated from: '<S49>/dvl data' incorporates:
      //   Inport: '<S56>/In1'
      //   MATLABSystem: '<S53>/SourceBlock'
      //   Merge: '<S3>/Merge2'

      proc_control_node_B.SensorOn = proc_control_node_B.In1_i.XVelBtm;
      proc_control_node_B.Product1_j5 = proc_control_node_B.In1_i.YVelBtm;
      proc_control_node_B.Divide_p = proc_control_node_B.In1_i.ZVelBtm;
      proc_control_node_B.WhiteNoise = proc_control_node_B.In1_i.EVelBtm;
      proc_control_node_B.t11 = proc_control_node_B.In1_i.Velocity1;
      proc_control_node_B.t12 = proc_control_node_B.In1_i.Velocity2;
      proc_control_node_B.t13 = proc_control_node_B.In1_i.Velocity3;
      proc_control_node_B.t14 = proc_control_node_B.In1_i.Velocity4;

      // Outputs for Atomic SubSystem: '<S49>/Subscribe2'
      // MATLABSystem: '<S54>/SourceBlock'
      rtb_Reset = Sub_proc_control_node_31_1302.getLatestMessage
        (&proc_control_node_B.b_varargout_2_l);

      // Outputs for Enabled SubSystem: '<S54>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S57>/Enable'

      if (rtb_Reset) {
        proc_control_node_B.In1_e = proc_control_node_B.b_varargout_2_l;
      }

      // End of Outputs for SubSystem: '<S54>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S49>/Subscribe2'

      // SignalConversion generated from: '<S49>/depth data' incorporates:
      //   Inport: '<S57>/In1'
      //   MATLABSystem: '<S54>/SourceBlock'
      //   Merge: '<S3>/Merge4'

      proc_control_node_B.rtb_PressureDepth_Data =
        proc_control_node_B.In1_e.Data;

      // End of Outputs for SubSystem: '<S3>/Real System'
    }

    // End of SwitchCase: '<S3>/Switch Case'

    // SignalConversion generated from: '<S48>/ SFunction ' incorporates:
    //   MATLAB Function: '<S3>/Quaternion Normalise'
    //   Merge: '<S3>/Merge1'

    proc_control_node_B.n[0] = proc_control_node_B.t;

    // MATLAB Function: '<S3>/Quaternion Normalise' incorporates:
    //   Merge: '<S3>/Merge1'
    //   SignalConversion generated from: '<S48>/ SFunction '

    proc_control_node_B.scale = 3.3121686421112381E-170;
    proc_control_node_B.absxk = fabs(proc_control_node_B.t);
    if (proc_control_node_B.absxk > 3.3121686421112381E-170) {
      proc_control_node_B.d_h = 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        3.3121686421112381E-170;
      proc_control_node_B.d_h = proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = fabs(proc_control_node_B.n[1]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d_h = proc_control_node_B.d_h * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d_h += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = fabs(proc_control_node_B.n[2]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d_h = proc_control_node_B.d_h * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d_h += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = fabs(proc_control_node_B.n[3]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d_h = proc_control_node_B.d_h * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d_h += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.d_h = proc_control_node_B.scale * sqrt
      (proc_control_node_B.d_h);
    proc_control_node_B.Product8 = proc_control_node_B.n[0] /
      proc_control_node_B.d_h;
    proc_control_node_B.b_cy[0] = rtIsNaN(proc_control_node_B.Product8);
    proc_control_node_B.n[0] = proc_control_node_B.Product8;
    proc_control_node_B.Product8 = proc_control_node_B.n[1] /
      proc_control_node_B.d_h;
    proc_control_node_B.b_cy[1] = rtIsNaN(proc_control_node_B.Product8);
    proc_control_node_B.n[1] = proc_control_node_B.Product8;
    proc_control_node_B.Product8 = proc_control_node_B.n[2] /
      proc_control_node_B.d_h;
    proc_control_node_B.b_cy[2] = rtIsNaN(proc_control_node_B.Product8);
    proc_control_node_B.n[2] = proc_control_node_B.Product8;
    proc_control_node_B.Product8 = proc_control_node_B.n[3] /
      proc_control_node_B.d_h;
    proc_control_node_B.b_cy[3] = rtIsNaN(proc_control_node_B.Product8);
    proc_control_node_B.n[3] = proc_control_node_B.Product8;
    rtb_Reset_j = true;
    proc_control_node_B.i_j = 0;
    exitg1 = false;
    while ((!exitg1) && (proc_control_node_B.i_j < 4)) {
      if (!proc_control_node_B.b_cy[proc_control_node_B.i_j]) {
        rtb_Reset_j = false;
        exitg1 = true;
      } else {
        proc_control_node_B.i_j++;
      }
    }

    if (rtb_Reset_j) {
      proc_control_node_B.n[0] = 1.0;
      proc_control_node_B.n[1] = 0.0;
      proc_control_node_B.n[2] = 0.0;
      proc_control_node_B.n[3] = 0.0;
    }

    // Outputs for Enabled SubSystem: '<S3>/Subsystem' incorporates:
    //   EnablePort: '<S51>/Enable'

    // Logic: '<S3>/NOT' incorporates:
    //   Delay: '<S3>/Delay'

    if (!(proc_control_node_B.y != 0.0)) {
      // Switch: '<S67>/Reset' incorporates:
      //   Constant: '<S51>/Constant1'
      //   Constant: '<S67>/Initial Condition'
      //   Memory: '<S67>/Memory'
      //   MinMax: '<S65>/MinMax'

      if (proc_control_node_P.Constant1_Value != 0.0) {
        rtb_Reset = proc_control_node_P.MinMaxRunningResettable_vinit;
      } else {
        rtb_Reset = (rtb_NewDvlMsg ||
                     proc_control_node_DW.Memory_PreviousInput_i);
      }

      // End of Switch: '<S67>/Reset'

      // Switch: '<S68>/Reset' incorporates:
      //   Constant: '<S51>/Constant'
      //   Constant: '<S68>/Initial Condition'
      //   Memory: '<S68>/Memory'
      //   MinMax: '<S66>/MinMax'

      if (proc_control_node_P.Constant_Value_f2j != 0.0) {
        rtb_Reset_j = proc_control_node_P.MinMaxRunningResettable1_vinit;
      } else {
        rtb_Reset_j = (rtb_Merge || proc_control_node_DW.Memory_PreviousInput_f);
      }

      // End of Switch: '<S68>/Reset'

      // MATLAB Function: '<S51>/MATLAB Function'
      proc_control_node_B.y = (rtb_Reset + rtb_Reset_j >= 2);

      // Update for Memory: '<S67>/Memory'
      proc_control_node_DW.Memory_PreviousInput_i = rtb_Reset;

      // Update for Memory: '<S68>/Memory'
      proc_control_node_DW.Memory_PreviousInput_f = rtb_Reset_j;
    }

    // End of Logic: '<S3>/NOT'
    // End of Outputs for SubSystem: '<S3>/Subsystem'
    // End of Outputs for SubSystem: '<Root>/ROS Input'

    // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
    // Sum: '<S248>/Sum' incorporates:
    //   Product: '<S248>/Product'
    //   Product: '<S248>/Product1'
    //   Product: '<S248>/Product2'
    //   Product: '<S248>/Product3'
    //   UnaryMinus: '<S244>/Unary Minus'
    //   UnaryMinus: '<S244>/Unary Minus1'
    //   UnaryMinus: '<S244>/Unary Minus2'

    proc_control_node_B.d_h = ((proc_control_node_B.n[0] *
      proc_control_node_B.n[0] + -proc_control_node_B.n[1] *
      -proc_control_node_B.n[1]) + -proc_control_node_B.n[2] *
      -proc_control_node_B.n[2]) + -proc_control_node_B.n[3] *
      -proc_control_node_B.n[3];

    // Product: '<S245>/Divide'
    proc_control_node_B.scale = proc_control_node_B.n[0] /
      proc_control_node_B.d_h;

    // Product: '<S245>/Divide1' incorporates:
    //   UnaryMinus: '<S244>/Unary Minus'

    proc_control_node_B.absxk = proc_control_node_B.n[1] /
      proc_control_node_B.d_h;

    // Product: '<S245>/Divide2' incorporates:
    //   UnaryMinus: '<S244>/Unary Minus1'

    proc_control_node_B.t = proc_control_node_B.n[2] / proc_control_node_B.d_h;

    // Product: '<S245>/Divide3' incorporates:
    //   UnaryMinus: '<S244>/Unary Minus2'

    proc_control_node_B.Divide3 = proc_control_node_B.n[3] /
      proc_control_node_B.d_h;

    // Sqrt: '<S253>/sqrt' incorporates:
    //   Product: '<S254>/Product'
    //   Product: '<S254>/Product1'
    //   Product: '<S254>/Product2'
    //   Product: '<S254>/Product3'
    //   Sum: '<S254>/Sum'

    proc_control_node_B.d_h = sqrt(((proc_control_node_B.scale *
      proc_control_node_B.scale + proc_control_node_B.absxk *
      proc_control_node_B.absxk) + proc_control_node_B.t * proc_control_node_B.t)
      + proc_control_node_B.Divide3 * proc_control_node_B.Divide3);

    // Product: '<S249>/Product'
    proc_control_node_B.fcn1_k = proc_control_node_B.scale /
      proc_control_node_B.d_h;

    // Product: '<S249>/Product1'
    proc_control_node_B.fcn2 = proc_control_node_B.absxk /
      proc_control_node_B.d_h;

    // Product: '<S249>/Product2'
    proc_control_node_B.Product8 = proc_control_node_B.t /
      proc_control_node_B.d_h;

    // Product: '<S249>/Product3'
    proc_control_node_B.d_h = proc_control_node_B.Divide3 /
      proc_control_node_B.d_h;

    // Product: '<S252>/Product4' incorporates:
    //   Constant: '<S238>/Constant'
    //   Gain: '<S252>/Gain'
    //   Product: '<S252>/Product'
    //   Product: '<S252>/Product1'
    //   Sum: '<S252>/Sum1'

    proc_control_node_B.Product1_j5_b = (proc_control_node_B.fcn2 *
      proc_control_node_B.d_h + proc_control_node_B.fcn1_k *
      proc_control_node_B.Product8) * proc_control_node_P.Gain_Gain_j *
      proc_control_node_P.physics.DepthPose[0];

    // Product: '<S252>/Product5' incorporates:
    //   Constant: '<S238>/Constant'
    //   Gain: '<S252>/Gain1'
    //   Product: '<S252>/Product2'
    //   Product: '<S252>/Product3'
    //   Sum: '<S252>/Sum2'

    proc_control_node_B.Product2_gc = (proc_control_node_B.Product8 *
      proc_control_node_B.d_h - proc_control_node_B.fcn1_k *
      proc_control_node_B.fcn2) * proc_control_node_P.Gain1_Gain_j *
      proc_control_node_P.physics.DepthPose[1];

    // Product: '<S252>/Product8' incorporates:
    //   Constant: '<S238>/Constant'
    //   Constant: '<S252>/Constant'
    //   Gain: '<S252>/Gain2'
    //   Product: '<S252>/Product6'
    //   Product: '<S252>/Product7'
    //   Sum: '<S252>/Sum3'

    proc_control_node_B.Product8 = ((proc_control_node_P.Constant_Value_a1 -
      proc_control_node_B.fcn2 * proc_control_node_B.fcn2) -
      proc_control_node_B.Product8 * proc_control_node_B.Product8) *
      proc_control_node_P.Gain2_Gain_ob * proc_control_node_P.physics.DepthPose
      [2];

    // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
    //   EnablePort: '<S239>/Enable'

    if (rtb_NewDvlMsg) {
      // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
      //   EnablePort: '<S258>/Enable'

      // Delay: '<S255>/Delay'
      if (proc_control_node_DW.Delay_DSTATE_i > 0.0) {
        // Gain: '<S259>/1//2' incorporates:
        //   Constant: '<S258>/si y devant'

        proc_control_node_B.fcn1_k = proc_control_node_P.u2_Gain_b *
          proc_control_node_P.siydevant_Value[0];

        // Trigonometry: '<S259>/sincos'
        proc_control_node_B.fcn2 = sin(proc_control_node_B.fcn1_k);
        proc_control_node_B.VectorConcatenate_p[0] = cos
          (proc_control_node_B.fcn1_k);

        // Gain: '<S259>/1//2' incorporates:
        //   Constant: '<S258>/si y devant'

        proc_control_node_B.fcn1_k = proc_control_node_P.u2_Gain_b *
          proc_control_node_P.siydevant_Value[1];

        // Trigonometry: '<S259>/sincos'
        proc_control_node_B.rtb_Gain_f_idx_1 = sin(proc_control_node_B.fcn1_k);
        proc_control_node_B.VectorConcatenate_p[1] = cos
          (proc_control_node_B.fcn1_k);

        // Gain: '<S259>/1//2' incorporates:
        //   Constant: '<S258>/si y devant'

        proc_control_node_B.fcn1_k = proc_control_node_P.u2_Gain_b *
          proc_control_node_P.siydevant_Value[2];

        // Trigonometry: '<S259>/sincos'
        proc_control_node_B.d_h = sin(proc_control_node_B.fcn1_k);
        proc_control_node_B.VectorConcatenate_p[2] = cos
          (proc_control_node_B.fcn1_k);

        // Fcn: '<S259>/q0' incorporates:
        //   Fcn: '<S259>/q3'

        proc_control_node_B.fcn1_k = proc_control_node_B.VectorConcatenate_p[0] *
          proc_control_node_B.VectorConcatenate_p[1];
        proc_control_node_B.q0_tmp = proc_control_node_B.fcn2 *
          proc_control_node_B.rtb_Gain_f_idx_1;

        // Fcn: '<S259>/q0'
        proc_control_node_B.q0 = proc_control_node_B.fcn1_k *
          proc_control_node_B.VectorConcatenate_p[2] -
          proc_control_node_B.q0_tmp * proc_control_node_B.d_h;

        // Fcn: '<S259>/q1' incorporates:
        //   Fcn: '<S259>/q2'

        proc_control_node_B.rtb_Gain_f_idx_1 *=
          proc_control_node_B.VectorConcatenate_p[0];
        proc_control_node_B.fcn2 *= proc_control_node_B.VectorConcatenate_p[1];

        // Fcn: '<S259>/q1'
        proc_control_node_B.q1 = proc_control_node_B.rtb_Gain_f_idx_1 *
          proc_control_node_B.d_h + proc_control_node_B.fcn2 *
          proc_control_node_B.VectorConcatenate_p[2];

        // Fcn: '<S259>/q2'
        proc_control_node_B.q2 = proc_control_node_B.rtb_Gain_f_idx_1 *
          proc_control_node_B.VectorConcatenate_p[2] - proc_control_node_B.fcn2 *
          proc_control_node_B.d_h;

        // Fcn: '<S259>/q3'
        proc_control_node_B.q3 = proc_control_node_B.fcn1_k *
          proc_control_node_B.d_h + proc_control_node_B.q0_tmp *
          proc_control_node_B.VectorConcatenate_p[2];
      }

      // End of Delay: '<S255>/Delay'
      // End of Outputs for SubSystem: '<S255>/Subsystem2'

      // Outputs for Atomic SubSystem: '<Root>/ROS Input'
      // MATLAB Function: '<S239>/MATLAB Function1' incorporates:
      //   Constant: '<S239>/Constant1'
      //   Merge: '<S3>/Merge2'
      //   SignalConversion generated from: '<S3>/Bus Selector1'

      proc_control_node_B.n[0] = fabs(proc_control_node_B.SensorOn);
      proc_control_node_B.n[1] = fabs(proc_control_node_B.Product1_j5);
      proc_control_node_B.n[2] = fabs(proc_control_node_B.Divide_p);
      proc_control_node_B.n[3] = fabs(proc_control_node_B.WhiteNoise);

      // End of Outputs for SubSystem: '<Root>/ROS Input'
      if (proc_control_node_maximum_j(proc_control_node_B.n) <
          proc_control_node_P.Constant1_Value_a) {
        // Outputs for Atomic SubSystem: '<Root>/ROS Input'
        proc_control_node_B.u2[0] = proc_control_node_B.SensorOn;
        proc_control_node_B.u2[1] = proc_control_node_B.Product1_j5;
        proc_control_node_B.u2[2] = proc_control_node_B.Divide_p;

        // End of Outputs for SubSystem: '<Root>/ROS Input'
        proc_control_node_B.enable = 1.0;
      } else {
        // Outputs for Atomic SubSystem: '<Root>/ROS Input'
        proc_control_node_B.n[0] = fabs(proc_control_node_B.t11);
        proc_control_node_B.n[1] = fabs(proc_control_node_B.t12);
        proc_control_node_B.n[2] = fabs(proc_control_node_B.t13);
        proc_control_node_B.n[3] = fabs(proc_control_node_B.t14);

        // End of Outputs for SubSystem: '<Root>/ROS Input'
        if (proc_control_node_maximum_j(proc_control_node_B.n) <
            proc_control_node_P.Constant1_Value_a) {
          // Outputs for Atomic SubSystem: '<Root>/ROS Input'
          proc_control_node_B.u2[0] = proc_control_node_B.t11;
          proc_control_node_B.u2[1] = proc_control_node_B.t12;
          proc_control_node_B.u2[2] = proc_control_node_B.t13;

          // End of Outputs for SubSystem: '<Root>/ROS Input'
          proc_control_node_B.enable = 0.0;
        } else {
          proc_control_node_B.u2[0] = 0.0;
          proc_control_node_B.u2[1] = 0.0;
          proc_control_node_B.u2[2] = 0.0;
          proc_control_node_B.enable = 0.0;
        }
      }

      // End of MATLAB Function: '<S239>/MATLAB Function1'

      // Sqrt: '<S264>/sqrt' incorporates:
      //   Product: '<S265>/Product'
      //   Product: '<S265>/Product1'
      //   Product: '<S265>/Product2'
      //   Product: '<S265>/Product3'
      //   Sum: '<S265>/Sum'

      proc_control_node_B.Product1_j5 = sqrt(((proc_control_node_B.q0 *
        proc_control_node_B.q0 + proc_control_node_B.q1 * proc_control_node_B.q1)
        + proc_control_node_B.q2 * proc_control_node_B.q2) +
        proc_control_node_B.q3 * proc_control_node_B.q3);

      // Product: '<S260>/Product'
      proc_control_node_B.d_h = proc_control_node_B.q0 /
        proc_control_node_B.Product1_j5;

      // Product: '<S260>/Product1'
      proc_control_node_B.fcn1_k = proc_control_node_B.q1 /
        proc_control_node_B.Product1_j5;

      // Product: '<S260>/Product2'
      proc_control_node_B.fcn2 = proc_control_node_B.q2 /
        proc_control_node_B.Product1_j5;

      // Product: '<S260>/Product3'
      proc_control_node_B.Product1_j5 = proc_control_node_B.q3 /
        proc_control_node_B.Product1_j5;

      // Product: '<S261>/Product7' incorporates:
      //   Product: '<S262>/Product7'

      proc_control_node_B.t13 = proc_control_node_B.Product1_j5 *
        proc_control_node_B.Product1_j5;

      // Product: '<S261>/Product' incorporates:
      //   Product: '<S262>/Product'

      proc_control_node_B.t14 = proc_control_node_B.fcn1_k *
        proc_control_node_B.fcn2;

      // Product: '<S261>/Product1' incorporates:
      //   Product: '<S262>/Product1'

      proc_control_node_B.SensorOn = proc_control_node_B.d_h *
        proc_control_node_B.Product1_j5;

      // Product: '<S261>/Product3' incorporates:
      //   Product: '<S263>/Product'

      proc_control_node_B.Divide_p = proc_control_node_B.fcn1_k *
        proc_control_node_B.Product1_j5;

      // Product: '<S261>/Product2' incorporates:
      //   Product: '<S263>/Product1'

      proc_control_node_B.WhiteNoise = proc_control_node_B.d_h *
        proc_control_node_B.fcn2;

      // Product: '<S261>/Product6' incorporates:
      //   Product: '<S263>/Product7'

      proc_control_node_B.t11 = proc_control_node_B.fcn2 *
        proc_control_node_B.fcn2;

      // Sum: '<S261>/Sum' incorporates:
      //   Constant: '<S261>/Constant'
      //   Gain: '<S261>/Gain'
      //   Gain: '<S261>/Gain1'
      //   Gain: '<S261>/Gain2'
      //   Product: '<S261>/Product'
      //   Product: '<S261>/Product1'
      //   Product: '<S261>/Product2'
      //   Product: '<S261>/Product3'
      //   Product: '<S261>/Product4'
      //   Product: '<S261>/Product5'
      //   Product: '<S261>/Product6'
      //   Product: '<S261>/Product7'
      //   Product: '<S261>/Product8'
      //   Sum: '<S261>/Sum1'
      //   Sum: '<S261>/Sum2'
      //   Sum: '<S261>/Sum3'

      proc_control_node_B.Sum = (((proc_control_node_P.Constant_Value_fg -
        proc_control_node_B.t11) - proc_control_node_B.t13) *
        proc_control_node_P.Gain2_Gain_o * proc_control_node_B.u2[0] +
        (proc_control_node_B.t14 + proc_control_node_B.SensorOn) *
        proc_control_node_P.Gain_Gain_o * proc_control_node_B.u2[1]) +
        (proc_control_node_B.Divide_p - proc_control_node_B.WhiteNoise) *
        proc_control_node_P.Gain1_Gain_k * proc_control_node_B.u2[2];

      // Product: '<S262>/Product3' incorporates:
      //   Product: '<S263>/Product3'

      proc_control_node_B.Product1_j5 *= proc_control_node_B.fcn2;

      // Product: '<S262>/Product2' incorporates:
      //   Product: '<S263>/Product2'

      proc_control_node_B.d_h *= proc_control_node_B.fcn1_k;

      // Product: '<S262>/Product6' incorporates:
      //   Product: '<S263>/Product6'

      proc_control_node_B.fcn2 = proc_control_node_B.fcn1_k *
        proc_control_node_B.fcn1_k;

      // Sum: '<S262>/Sum' incorporates:
      //   Constant: '<S262>/Constant'
      //   Gain: '<S262>/Gain'
      //   Gain: '<S262>/Gain1'
      //   Gain: '<S262>/Gain2'
      //   Product: '<S262>/Product2'
      //   Product: '<S262>/Product3'
      //   Product: '<S262>/Product4'
      //   Product: '<S262>/Product5'
      //   Product: '<S262>/Product6'
      //   Product: '<S262>/Product8'
      //   Sum: '<S262>/Sum1'
      //   Sum: '<S262>/Sum2'
      //   Sum: '<S262>/Sum3'

      proc_control_node_B.Sum_o = (((proc_control_node_P.Constant_Value_j -
        proc_control_node_B.fcn2) - proc_control_node_B.t13) *
        proc_control_node_P.Gain2_Gain_k * proc_control_node_B.u2[1] +
        (proc_control_node_B.t14 - proc_control_node_B.SensorOn) *
        proc_control_node_P.Gain_Gain_mq * proc_control_node_B.u2[0]) +
        (proc_control_node_B.d_h + proc_control_node_B.Product1_j5) *
        proc_control_node_P.Gain1_Gain_b * proc_control_node_B.u2[2];

      // Sum: '<S263>/Sum' incorporates:
      //   Constant: '<S263>/Constant'
      //   Gain: '<S263>/Gain'
      //   Gain: '<S263>/Gain1'
      //   Gain: '<S263>/Gain2'
      //   Product: '<S263>/Product4'
      //   Product: '<S263>/Product5'
      //   Product: '<S263>/Product8'
      //   Sum: '<S263>/Sum1'
      //   Sum: '<S263>/Sum2'
      //   Sum: '<S263>/Sum3'

      proc_control_node_B.Sum_c = ((proc_control_node_B.Divide_p +
        proc_control_node_B.WhiteNoise) * proc_control_node_P.Gain_Gain_n *
        proc_control_node_B.u2[0] + (proc_control_node_B.Product1_j5 -
        proc_control_node_B.d_h) * proc_control_node_P.Gain1_Gain_ch *
        proc_control_node_B.u2[1]) + ((proc_control_node_P.Constant_Value_ol -
        proc_control_node_B.fcn2) - proc_control_node_B.t11) *
        proc_control_node_P.Gain2_Gain_br * proc_control_node_B.u2[2];

      // Update for Delay: '<S255>/Delay' incorporates:
      //   Constant: '<S255>/Constant6'

      proc_control_node_DW.Delay_DSTATE_i = proc_control_node_P.Constant6_Value;
    }

    // End of Outputs for SubSystem: '<S8>/DVL Mesurments'

    // Delay: '<S243>/ '
    memcpy(&proc_control_node_B.u[0], &proc_control_node_DW._DSTATE[0], sizeof
           (real_T) << 3U);

    // Inport: '<S8>/SensorOn'
    proc_control_node_B.SensorOn = proc_control_node_B.y;

    // Logic: '<S241>/AND' incorporates:
    //   Inport: '<S8>/SensorOn'
    //   Logic: '<S241>/NOT'

    rtb_Reset = ((!(proc_control_node_B.MATLABSystem_o4 != 0.0)) &&
                 (proc_control_node_B.y != 0.0));

    // Outputs for Enabled SubSystem: '<S8>/Subsystem' incorporates:
    //   EnablePort: '<S242>/Enable'

    if (rtb_Reset) {
      // Outputs for Enabled SubSystem: '<S269>/Correct1' incorporates:
      //   EnablePort: '<S270>/Enable'

      // Constant: '<S269>/Enable1'
      if (proc_control_node_P.Enable1_Value) {
        // MATLAB Function: '<S270>/Correct' incorporates:
        //   Constant: '<S269>/R1'
        //   DataStoreRead: '<S270>/Data Store ReadX'
        //   DataStoreWrite: '<S270>/Data Store WriteP'

        Rsqrt = &proc_control_node_P.R1_Value[0];
        EKFCorrectorAdditive_getMeasure(Rsqrt, proc_control_node_DW.x,
          proc_control_node_DW.P, proc_control_node_B.u_p,
          proc_control_node_B.Pxy, proc_control_node_B.Sy,
          proc_control_node_B.dHdx);

        // SignalConversion generated from: '<S274>/ SFunction ' incorporates:
        //   MATLAB Function: '<S270>/Correct'
        //   Merge: '<S3>/Merge1'
        //   Merge: '<S3>/Merge4'
        //   SignalConversion generated from: '<S238>/Bus Selector3'
        //   SignalConversion generated from: '<S3>/Bus Selector3'
        //   Sum: '<S238>/Sum'
        //   Sum: '<S252>/Sum'

        proc_control_node_B.u_scale_e[0] =
          (proc_control_node_B.rtb_PressureDepth_Data -
           ((proc_control_node_B.Product1_j5_b + proc_control_node_B.Product2_gc)
            + proc_control_node_B.Product8)) - proc_control_node_B.u_p[0];
        proc_control_node_B.u_scale_e[1] = proc_control_node_B.scale -
          proc_control_node_B.u_p[1];
        proc_control_node_B.u_scale_e[2] = proc_control_node_B.absxk -
          proc_control_node_B.u_p[2];
        proc_control_node_B.u_scale_e[3] = proc_control_node_B.t -
          proc_control_node_B.u_p[3];
        proc_control_node_B.u_scale_e[4] = proc_control_node_B.Divide3 -
          proc_control_node_B.u_p[4];

        // Outputs for Atomic SubSystem: '<Root>/ROS Input'
        proc_control_node_B.u_scale_e[5] = proc_control_node_B.epsilon -
          proc_control_node_B.u_p[5];
        proc_control_node_B.u_scale_e[6] = proc_control_node_B.Divide1_n -
          proc_control_node_B.u_p[6];
        proc_control_node_B.u_scale_e[7] = proc_control_node_B.Divide2_h -
          proc_control_node_B.u_p[7];

        // End of Outputs for SubSystem: '<Root>/ROS Input'

        // DataStoreWrite: '<S270>/Data Store WriteX' incorporates:
        //   DataStoreWrite: '<S270>/Data Store WriteP'
        //   MATLAB Function: '<S270>/Correct'

        EKFCorrector_correctStateAndSqr(proc_control_node_DW.x,
          proc_control_node_DW.P, proc_control_node_B.u_scale_e,
          proc_control_node_B.Pxy, proc_control_node_B.Sy,
          proc_control_node_B.dHdx, Rsqrt);
      }

      // End of Constant: '<S269>/Enable1'
      // End of Outputs for SubSystem: '<S269>/Correct1'

      // Outputs for Enabled SubSystem: '<S269>/Correct2' incorporates:
      //   EnablePort: '<S271>/Enable'

      // DataTypeConversion: '<S269>/DataTypeConversion_Enable2'
      if (proc_control_node_B.enable != 0.0) {
        // MATLAB Function: '<S271>/Correct' incorporates:
        //   Constant: '<S269>/R2'
        //   DataStoreRead: '<S271>/Data Store ReadX'
        //   DataStoreWrite: '<S271>/Data Store WriteP'

        for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 13;
             proc_control_node_B.k_d++) {
          memcpy(&proc_control_node_B.imvec[0], &proc_control_node_DW.x[0], 13U *
                 sizeof(real_T));
          proc_control_node_B.epsilon = 1.4901161193847656E-8 * fabs
            (proc_control_node_DW.x[proc_control_node_B.k_d]);
          if ((1.4901161193847656E-8 > proc_control_node_B.epsilon) || rtIsNaN
              (proc_control_node_B.epsilon)) {
            proc_control_node_B.epsilon = 1.4901161193847656E-8;
          }

          proc_control_node_B.imvec[proc_control_node_B.k_d] =
            proc_control_node_DW.x[proc_control_node_B.k_d] +
            proc_control_node_B.epsilon;
          proc_control_node_B.dHdx_c[3 * proc_control_node_B.k_d] =
            (proc_control_node_B.imvec[7] - proc_control_node_DW.x[7]) /
            proc_control_node_B.epsilon;
          proc_control_node_B.dHdx_c[3 * proc_control_node_B.k_d + 1] =
            (proc_control_node_B.imvec[8] - proc_control_node_DW.x[8]) /
            proc_control_node_B.epsilon;
          proc_control_node_B.dHdx_c[3 * proc_control_node_B.k_d + 2] =
            (proc_control_node_B.imvec[9] - proc_control_node_DW.x[9]) /
            proc_control_node_B.epsilon;
        }

        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 3;
             proc_control_node_B.i_j++) {
          proc_control_node_B.coffset = proc_control_node_B.i_j * 13;
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 13;
               proc_control_node_B.ibmat++) {
            proc_control_node_B.aoffset = proc_control_node_B.ibmat * 13;
            proc_control_node_B.epsilon = 0.0;
            for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 13;
                 proc_control_node_B.k_d++) {
              proc_control_node_B.epsilon +=
                proc_control_node_B.dHdx_c[proc_control_node_B.k_d * 3 +
                proc_control_node_B.i_j] *
                proc_control_node_DW.P[proc_control_node_B.aoffset +
                proc_control_node_B.k_d];
            }

            proc_control_node_B.y_cx[proc_control_node_B.coffset +
              proc_control_node_B.ibmat] = proc_control_node_B.epsilon;
            proc_control_node_B.y_cq[proc_control_node_B.ibmat +
              (proc_control_node_B.i_j << 4)] = proc_control_node_B.y_cx[13 *
              proc_control_node_B.i_j + proc_control_node_B.ibmat];
          }

          proc_control_node_B.k_d = proc_control_node_B.i_j << 4;
          proc_control_node_B.y_cq[proc_control_node_B.k_d + 13] =
            proc_control_node_P.R2_Value[proc_control_node_B.i_j];
          proc_control_node_B.y_cq[proc_control_node_B.k_d + 14] =
            proc_control_node_P.R2_Value[proc_control_node_B.i_j + 3];
          proc_control_node_B.y_cq[proc_control_node_B.k_d + 15] =
            proc_control_node_P.R2_Value[proc_control_node_B.i_j + 6];
        }

        proc_control_node_qr_f(proc_control_node_B.y_cq,
          proc_control_node_B.a__1_g,
          proc_control_node_B.TmpSignalConversionAtMATL_a);
        memcpy(&proc_control_node_B.imvec[0], &proc_control_node_DW.x[0], 13U *
               sizeof(real_T));
        memcpy(&proc_control_node_B.Jacobian[0], &proc_control_node_DW.P[0],
               169U * sizeof(real_T));
        proc_control_node_B.i_j = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 13;
             proc_control_node_B.ibmat++) {
          memset(&proc_control_node_B.Ac[proc_control_node_B.i_j], 0, 13U *
                 sizeof(real_T));
          proc_control_node_B.i_j += 13;
        }

        proc_control_node_B.i_j = 0;
        for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 13;
             proc_control_node_B.aoffset++) {
          proc_control_node_B.i1 = 0;
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 13;
               proc_control_node_B.ibmat++) {
            for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset <
                 13; proc_control_node_B.coffset++) {
              proc_control_node_B.k_d = proc_control_node_B.coffset +
                proc_control_node_B.i1;
              proc_control_node_B.Ac[proc_control_node_B.k_d] +=
                proc_control_node_DW.P[proc_control_node_B.coffset +
                proc_control_node_B.i_j] *
                proc_control_node_DW.P[proc_control_node_B.ibmat +
                proc_control_node_B.i_j];
            }

            proc_control_node_B.i1 += 13;
          }

          proc_control_node_B.i_j += 13;
        }

        // SignalConversion generated from: '<S275>/ SFunction ' incorporates:
        //   DataStoreRead: '<S271>/Data Store ReadX'
        //   MATLAB Function: '<S271>/Correct'

        proc_control_node_B.u2[0] = proc_control_node_B.Sum -
          proc_control_node_DW.x[7];
        proc_control_node_B.u2[1] = proc_control_node_B.Sum_o -
          proc_control_node_DW.x[8];
        proc_control_node_B.u2[2] = proc_control_node_B.Sum_c -
          proc_control_node_DW.x[9];

        // MATLAB Function: '<S271>/Correct' incorporates:
        //   Constant: '<S269>/R2'
        //   DataStoreWrite: '<S271>/Data Store WriteP'

        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 13;
             proc_control_node_B.i_j++) {
          proc_control_node_B.ibmat = 0;
          for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 3;
               proc_control_node_B.coffset++) {
            proc_control_node_B.aoffset = proc_control_node_B.ibmat +
              proc_control_node_B.i_j;
            proc_control_node_B.y_cx[proc_control_node_B.aoffset] = 0.0;
            proc_control_node_B.i1 = 0;
            proc_control_node_B.k_d = 0;
            for (proc_control_node_B.i_e = 0; proc_control_node_B.i_e < 13;
                 proc_control_node_B.i_e++) {
              proc_control_node_B.y_cx[proc_control_node_B.aoffset] +=
                proc_control_node_B.Ac[proc_control_node_B.i1 +
                proc_control_node_B.i_j] *
                proc_control_node_B.dHdx_c[proc_control_node_B.k_d +
                proc_control_node_B.coffset];
              proc_control_node_B.i1 += 13;
              proc_control_node_B.k_d += 3;
            }

            proc_control_node_B.ibmat += 13;
          }
        }

        proc_control_node_B.i_j = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 3;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.twpt[proc_control_node_B.i_j] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[proc_control_node_B.ibmat];
          proc_control_node_B.twpt[proc_control_node_B.i_j + 1] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[proc_control_node_B.ibmat
            + 3];
          proc_control_node_B.twpt[proc_control_node_B.i_j + 2] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[proc_control_node_B.ibmat
            + 6];
          proc_control_node_B.i_j += 3;
        }

        EKFCorrector_correctStateAndS_m(proc_control_node_B.imvec,
          proc_control_node_B.Jacobian, proc_control_node_B.u2,
          proc_control_node_B.y_cx, proc_control_node_B.twpt,
          proc_control_node_B.dHdx_c, proc_control_node_P.R2_Value);
        memcpy(&proc_control_node_DW.P[0], &proc_control_node_B.Jacobian[0],
               169U * sizeof(real_T));

        // DataStoreWrite: '<S271>/Data Store WriteX' incorporates:
        //   MATLAB Function: '<S271>/Correct'

        memcpy(&proc_control_node_DW.x[0], &proc_control_node_B.imvec[0], 13U *
               sizeof(real_T));
      }

      // End of DataTypeConversion: '<S269>/DataTypeConversion_Enable2'
      // End of Outputs for SubSystem: '<S269>/Correct2'

      // Outputs for Atomic SubSystem: '<S269>/Output'
      // DataStoreRead: '<S272>/Data Store Read'
      memcpy(&proc_control_node_B.DataStoreRead[0], &proc_control_node_DW.x[0],
             13U * sizeof(real_T));

      // End of Outputs for SubSystem: '<S269>/Output'

      // Outputs for Atomic SubSystem: '<S269>/Predict'
      // MATLAB Function: '<S273>/Predict' incorporates:
      //   Constant: '<S269>/Q'
      //   DataStoreRead: '<S273>/Data Store ReadX'
      //   DataStoreWrite: '<S273>/Data Store WriteP'

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
           proc_control_node_B.i_j++) {
        proc_control_node_B.Gain_fn[proc_control_node_B.i_j] = 0.0;
      }

      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 5;
           proc_control_node_B.ibmat++) {
        proc_con_AUVQuatPerturbedSimFcn(proc_control_node_DW.x,
          proc_control_node_B.Gain_fn, proc_control_node_B.u,
          proc_control_node_B.imvec);
      }

      memcpy(&proc_control_node_B.z_j[0], &proc_control_node_DW.x[0], 13U *
             sizeof(real_T));
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
           proc_control_node_B.i_j++) {
        proc_control_node_B.Gain_fn[proc_control_node_B.i_j] = 0.0;
      }

      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 5;
           proc_control_node_B.ibmat++) {
        proc_con_AUVQuatPerturbedSimFcn(proc_control_node_DW.x,
          proc_control_node_B.Gain_fn, proc_control_node_B.u,
          proc_control_node_B.TmpSignalConversionAtTransp);
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 13;
             proc_control_node_B.i_j++) {
          proc_control_node_B.z_j[proc_control_node_B.i_j] +=
            proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.i_j]
            * 0.01;
        }
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
           proc_control_node_B.i_j++) {
        proc_control_node_B.Gain_fn[proc_control_node_B.i_j] = 0.0;
      }

      for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 13;
           proc_control_node_B.k_d++) {
        memcpy(&proc_control_node_B.imvec[0], &proc_control_node_DW.x[0], 13U *
               sizeof(real_T));
        proc_control_node_B.epsilon = 1.4901161193847656E-8 * fabs
          (proc_control_node_DW.x[proc_control_node_B.k_d]);
        if ((1.4901161193847656E-8 > proc_control_node_B.epsilon) || rtIsNaN
            (proc_control_node_B.epsilon)) {
          proc_control_node_B.epsilon = 1.4901161193847656E-8;
        }

        proc_control_node_B.imvec[proc_control_node_B.k_d] =
          proc_control_node_DW.x[proc_control_node_B.k_d] +
          proc_control_node_B.epsilon;
        memcpy(&proc_control_node_B.imz[0], &proc_control_node_B.imvec[0], 13U *
               sizeof(real_T));
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 5;
             proc_control_node_B.ibmat++) {
          proc_con_AUVQuatPerturbedSimFcn(proc_control_node_B.imvec,
            proc_control_node_B.Gain_fn, proc_control_node_B.u,
            proc_control_node_B.TmpSignalConversionAtTransp);
          for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 13;
               proc_control_node_B.i_j++) {
            proc_control_node_B.imz[proc_control_node_B.i_j] +=
              proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.i_j]
              * 0.01;
          }
        }

        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 13;
             proc_control_node_B.i_j++) {
          proc_control_node_B.Jacobian[proc_control_node_B.i_j + 13 *
            proc_control_node_B.k_d] =
            (proc_control_node_B.imz[proc_control_node_B.i_j] -
             proc_control_node_B.z_j[proc_control_node_B.i_j]) /
            proc_control_node_B.epsilon;
        }
      }

      memcpy(&proc_control_node_B.imvec[0], &proc_control_node_DW.x[0], 13U *
             sizeof(real_T));
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
           proc_control_node_B.i_j++) {
        proc_control_node_B.Gain_fn[proc_control_node_B.i_j] = 0.0;
      }

      for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 5;
           proc_control_node_B.k_d++) {
        proc_con_AUVQuatPerturbedSimFcn(proc_control_node_DW.x,
          proc_control_node_B.Gain_fn, proc_control_node_B.u,
          proc_control_node_B.TmpSignalConversionAtTransp);
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 13;
             proc_control_node_B.i_j++) {
          proc_control_node_B.imvec[proc_control_node_B.i_j] +=
            proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.i_j]
            * 0.01;
        }
      }

      proc_control_node_qrFactor_d(proc_control_node_B.Jacobian,
        proc_control_node_DW.P, proc_control_node_P.Q_Value);

      // DataStoreWrite: '<S273>/Data Store WriteX' incorporates:
      //   MATLAB Function: '<S273>/Predict'

      memcpy(&proc_control_node_DW.x[0], &proc_control_node_B.imvec[0], 13U *
             sizeof(real_T));

      // End of Outputs for SubSystem: '<S269>/Predict'
    }

    // End of Outputs for SubSystem: '<S8>/Subsystem'

    // Sum: '<S268>/Sum' incorporates:
    //   Product: '<S268>/Product'
    //   Product: '<S268>/Product1'
    //   Product: '<S268>/Product2'
    //   Product: '<S268>/Product3'

    proc_control_node_B.Product1_j5 = ((proc_control_node_B.DataStoreRead[3] *
      proc_control_node_B.DataStoreRead[3] + proc_control_node_B.DataStoreRead[4]
      * proc_control_node_B.DataStoreRead[4]) +
      proc_control_node_B.DataStoreRead[5] * proc_control_node_B.DataStoreRead[5])
      + proc_control_node_B.DataStoreRead[6] *
      proc_control_node_B.DataStoreRead[6];

    // Product: '<S266>/Divide'
    proc_control_node_B.Divide_p = proc_control_node_B.DataStoreRead[3] /
      proc_control_node_B.Product1_j5;

    // Product: '<S266>/Divide1' incorporates:
    //   UnaryMinus: '<S267>/Unary Minus'

    proc_control_node_B.Divide1_n = -proc_control_node_B.DataStoreRead[4] /
      proc_control_node_B.Product1_j5;

    // Product: '<S266>/Divide2' incorporates:
    //   UnaryMinus: '<S267>/Unary Minus1'

    proc_control_node_B.Divide2_h = -proc_control_node_B.DataStoreRead[5] /
      proc_control_node_B.Product1_j5;

    // Product: '<S266>/Divide3' incorporates:
    //   UnaryMinus: '<S267>/Unary Minus2'

    proc_control_node_B.epsilon = -proc_control_node_B.DataStoreRead[6] /
      proc_control_node_B.Product1_j5;

    // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'

    // Outputs for Enabled SubSystem: '<Root>/Sensor Manager' incorporates:
    //   EnablePort: '<S6>/Enable'

    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_DW.SensorManager_MODE = rtb_Reset;
    }

    // End of Outputs for SubSystem: '<Root>/Sensor Manager'
  }

  // Outputs for Enabled SubSystem: '<Root>/Sensor Manager' incorporates:
  //   EnablePort: '<S6>/Enable'

  if (proc_control_node_DW.SensorManager_MODE) {
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
      // Sqrt: '<S130>/sqrt' incorporates:
      //   Product: '<S131>/Product'
      //   Product: '<S131>/Product1'
      //   Product: '<S131>/Product2'
      //   Product: '<S131>/Product3'
      //   Sum: '<S131>/Sum'

      proc_control_node_B.WhiteNoise = sqrt(((proc_control_node_B.Divide_p *
        proc_control_node_B.Divide_p + proc_control_node_B.Divide1_n *
        proc_control_node_B.Divide1_n) + proc_control_node_B.Divide2_h *
        proc_control_node_B.Divide2_h) + proc_control_node_B.epsilon *
        proc_control_node_B.epsilon);

      // Product: '<S125>/Product'
      proc_control_node_B.Divide_p /= proc_control_node_B.WhiteNoise;

      // Product: '<S125>/Product1'
      proc_control_node_B.Product1_j5 = proc_control_node_B.Divide1_n /
        proc_control_node_B.WhiteNoise;

      // Product: '<S125>/Product2'
      proc_control_node_B.d_h = proc_control_node_B.Divide2_h /
        proc_control_node_B.WhiteNoise;

      // Product: '<S125>/Product3'
      proc_control_node_B.WhiteNoise = proc_control_node_B.epsilon /
        proc_control_node_B.WhiteNoise;

      // Fcn: '<S121>/fcn3'
      proc_control_node_B.epsilon = (proc_control_node_B.Product1_j5 *
        proc_control_node_B.WhiteNoise + proc_control_node_B.Divide_p *
        proc_control_node_B.d_h) * 2.0;

      // If: '<S126>/If' incorporates:
      //   Constant: '<S127>/Constant'
      //   Constant: '<S128>/Constant'

      if (proc_control_node_B.epsilon > 1.0) {
        proc_control_node_B.epsilon = proc_control_node_P.Constant_Value_pz;
      } else if (proc_control_node_B.epsilon < -1.0) {
        proc_control_node_B.epsilon = proc_control_node_P.Constant_Value_pmj;
      }

      // End of If: '<S126>/If'

      // MATLAB Function: '<S114>/MATLAB Function1' incorporates:
      //   Constant: '<S117>/Constant'
      //   SignalConversion generated from: '<S119>/ SFunction '

      proc_control_node_B.msg_f = proc_control_node_P.Constant_Value_f;
      proc_control_node_B.msg_f.Pose.Pose.Position.X =
        proc_control_node_B.DataStoreRead[0];
      proc_control_node_B.msg_f.Pose.Pose.Position.Y =
        proc_control_node_B.DataStoreRead[1];
      proc_control_node_B.msg_f.Pose.Pose.Position.Z =
        proc_control_node_B.DataStoreRead[2];

      // Fcn: '<S121>/fcn2' incorporates:
      //   Fcn: '<S121>/fcn5'

      proc_control_node_B.d_o = proc_control_node_B.d_h *
        proc_control_node_B.d_h;

      // MATLAB Function: '<S114>/MATLAB Function1' incorporates:
      //   Fcn: '<S121>/fcn1'
      //   Fcn: '<S121>/fcn2'
      //   Gain: '<S123>/Gain'
      //   Trigonometry: '<S124>/Trigonometric Function1'

      proc_control_node_B.msg_f.Pose.Pose.Orientation.X = rt_atan2d_snf
        ((proc_control_node_B.d_h * proc_control_node_B.WhiteNoise -
          proc_control_node_B.Divide_p * proc_control_node_B.Product1_j5) * -2.0,
         ((proc_control_node_B.Divide_p * proc_control_node_B.Divide_p -
           proc_control_node_B.Product1_j5 * proc_control_node_B.Product1_j5) -
          proc_control_node_B.d_o) + proc_control_node_B.WhiteNoise *
         proc_control_node_B.WhiteNoise) * proc_control_node_P.Gain_Gain_ei;

      // Trigonometry: '<S124>/trigFcn'
      if (proc_control_node_B.epsilon > 1.0) {
        proc_control_node_B.epsilon = 1.0;
      } else if (proc_control_node_B.epsilon < -1.0) {
        proc_control_node_B.epsilon = -1.0;
      }

      // MATLAB Function: '<S114>/MATLAB Function1' incorporates:
      //   Fcn: '<S121>/fcn4'
      //   Fcn: '<S121>/fcn5'
      //   Gain: '<S122>/Gain'
      //   Gain: '<S123>/Gain'
      //   SignalConversion generated from: '<S119>/ SFunction '
      //   Trigonometry: '<S124>/Trigonometric Function3'
      //   Trigonometry: '<S124>/trigFcn'

      proc_control_node_B.msg_f.Pose.Pose.Orientation.Y =
        proc_control_node_P.Gain_Gain_ei * asin(proc_control_node_B.epsilon);
      proc_control_node_B.msg_f.Pose.Pose.Orientation.Z = rt_atan2d_snf
        ((proc_control_node_B.Product1_j5 * proc_control_node_B.d_h -
          proc_control_node_B.Divide_p * proc_control_node_B.WhiteNoise) * -2.0,
         ((proc_control_node_B.Divide_p * proc_control_node_B.Divide_p +
           proc_control_node_B.Product1_j5 * proc_control_node_B.Product1_j5) -
          proc_control_node_B.d_o) - proc_control_node_B.WhiteNoise *
         proc_control_node_B.WhiteNoise) * proc_control_node_P.Gain_Gain_ei;
      proc_control_node_B.msg_f.Twist.Twist.Linear.X =
        proc_control_node_B.DataStoreRead[7];
      proc_control_node_B.msg_f.Twist.Twist.Linear.Y =
        proc_control_node_B.DataStoreRead[8];
      proc_control_node_B.msg_f.Twist.Twist.Linear.Z =
        proc_control_node_B.DataStoreRead[9];
      proc_control_node_B.msg_f.Twist.Twist.Angular.X =
        proc_control_node_P.Gain_Gain_i * proc_control_node_B.DataStoreRead[10];
      proc_control_node_B.msg_f.Twist.Twist.Angular.Y =
        proc_control_node_P.Gain_Gain_i * proc_control_node_B.DataStoreRead[11];
      proc_control_node_B.msg_f.Twist.Twist.Angular.Z =
        proc_control_node_P.Gain_Gain_i * proc_control_node_B.DataStoreRead[12];

      // Outputs for Atomic SubSystem: '<S114>/Publish'
      // MATLABSystem: '<S120>/SinkBlock'
      Pub_proc_control_node_163.publish(&proc_control_node_B.msg_f);

      // End of Outputs for SubSystem: '<S114>/Publish'

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.WorldPosition[0] = proc_control_node_B.DataStoreRead[0];
      proc_control_node_B.WorldPosition[1] = proc_control_node_B.DataStoreRead[1];
      proc_control_node_B.WorldPosition[2] = proc_control_node_B.DataStoreRead[2];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.qS2W[0] = proc_control_node_B.DataStoreRead[3];
      proc_control_node_B.qS2W[1] = proc_control_node_B.DataStoreRead[4];
      proc_control_node_B.qS2W[2] = proc_control_node_B.DataStoreRead[5];
      proc_control_node_B.qS2W[3] = proc_control_node_B.DataStoreRead[6];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.BodyVelocity[0] = proc_control_node_B.DataStoreRead[7];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.AngularRate[0] = proc_control_node_B.DataStoreRead[10];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.BodyVelocity[1] = proc_control_node_B.DataStoreRead[8];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.AngularRate[1] = proc_control_node_B.DataStoreRead[11];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.BodyVelocity[2] = proc_control_node_B.DataStoreRead[9];

      // SignalConversion generated from: '<S6>/Output'
      proc_control_node_B.AngularRate[2] = proc_control_node_B.DataStoreRead[12];

      // BusAssignment: '<S113>/Bus Assignment' incorporates:
      //   DataTypeConversion: '<S113>/Cast To Boolean'

      BusAssignment.Data = (proc_control_node_B.SensorOn != 0.0);

      // ZeroOrderHold: '<S113>/Zero-Order Hold'
      if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
          (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
        // ZeroOrderHold: '<S113>/Zero-Order Hold'
        proc_control_node_B.ZeroOrderHold_h = BusAssignment;
      }

      // End of ZeroOrderHold: '<S113>/Zero-Order Hold'
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
      // Outputs for Atomic SubSystem: '<S113>/Publish'
      // MATLABSystem: '<S116>/SinkBlock'
      Pub_proc_control_node_116.publish(&proc_control_node_B.ZeroOrderHold_h);

      // End of Outputs for SubSystem: '<S113>/Publish'
    }
  }

  // End of Outputs for SubSystem: '<Root>/Sensor Manager'
  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
    for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
         proc_control_node_B.ibmat++) {
      // DiscreteIntegrator: '<S288>/Integrator' incorporates:
      //   Constant: '<S284>/Constant'
      //   Constant: '<S284>/Constant3'

      if ((proc_control_node_P.Constant_Value_as != 0.0) ||
          (proc_control_node_DW.Integrator_PrevResetState != 0)) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] =
          proc_control_node_P.Constant3_Value;
        if (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] >=
            proc_control_node_P.Integrator_UpperSat) {
          proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] =
            proc_control_node_P.Integrator_UpperSat;
        } else if
            (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] <=
             proc_control_node_P.Integrator_LowerSat) {
          proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] =
            proc_control_node_P.Integrator_LowerSat;
        }
      }

      if (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] >=
          proc_control_node_P.Integrator_UpperSat) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_UpperSat;
      } else if
          (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] <=
           proc_control_node_P.Integrator_LowerSat) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_LowerSat;
      }

      proc_control_node_B.Divide2_h =
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat];

      // End of DiscreteIntegrator: '<S288>/Integrator'

      // Saturate: '<S288>/Saturation'
      if (proc_control_node_B.Divide2_h >
          proc_control_node_P.Saturation_UpperSat) {
        proc_control_node_B.Divide2_h = proc_control_node_P.Saturation_UpperSat;
      } else if (proc_control_node_B.Divide2_h <
                 proc_control_node_P.Saturation_LowerSat) {
        proc_control_node_B.Divide2_h = proc_control_node_P.Saturation_LowerSat;
      }

      // End of Saturate: '<S288>/Saturation'

      // Gain: '<S284>/Gain3'
      proc_control_node_B.Gain3[proc_control_node_B.ibmat] =
        proc_control_node_P.Gain3_Gain * proc_control_node_B.Divide2_h;
    }

    // Outputs for Atomic SubSystem: '<S279>/Subscribe2'
    // MATLABSystem: '<S285>/SourceBlock' incorporates:
    //   Inport: '<S290>/In1'

    rtb_Reset = Sub_proc_control_node_184_1122.getLatestMessage
      (&proc_control_node_B.b_varargout_2_n);

    // Outputs for Enabled SubSystem: '<S285>/Enabled Subsystem' incorporates:
    //   EnablePort: '<S290>/Enable'

    if (rtb_Reset) {
      proc_control_node_B.In1_o = proc_control_node_B.b_varargout_2_n;
    }

    // End of MATLABSystem: '<S285>/SourceBlock'
    // End of Outputs for SubSystem: '<S285>/Enabled Subsystem'
    // End of Outputs for SubSystem: '<S279>/Subscribe2'

    // Gain: '<S284>/Gain'
    proc_control_node_B.epsilon = 2.0 * proc_control_node_P.zeta_l *
      (6.2831853071795862 * proc_control_node_P.wn_l);
    for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
         proc_control_node_B.ibmat++) {
      // DiscreteIntegrator: '<S289>/Integrator' incorporates:
      //   Constant: '<S284>/Constant1'
      //   Constant: '<S284>/Constant2'

      if ((proc_control_node_P.Constant1_Value_d != 0.0) ||
          (proc_control_node_DW.Integrator_PrevResetState_h != 0)) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] =
          proc_control_node_P.Constant2_Value_m;
        if (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] >=
            proc_control_node_P.Integrator_UpperSat_f) {
          proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] =
            proc_control_node_P.Integrator_UpperSat_f;
        } else if
            (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat]
             <= proc_control_node_P.Integrator_LowerSat_p) {
          proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] =
            proc_control_node_P.Integrator_LowerSat_p;
        }
      }

      if (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] >=
          proc_control_node_P.Integrator_UpperSat_f) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_UpperSat_f;
      } else if
          (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] <=
           proc_control_node_P.Integrator_LowerSat_p) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_LowerSat_p;
      }

      proc_control_node_B.Divide2_h =
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat];

      // End of DiscreteIntegrator: '<S289>/Integrator'

      // Saturate: '<S289>/Saturation'
      if (proc_control_node_B.Divide2_h >
          proc_control_node_P.Saturation_UpperSat_m) {
        proc_control_node_B.Divide2_h =
          proc_control_node_P.Saturation_UpperSat_m;
      } else if (proc_control_node_B.Divide2_h <
                 proc_control_node_P.Saturation_LowerSat_c) {
        proc_control_node_B.Divide2_h =
          proc_control_node_P.Saturation_LowerSat_c;
      }

      // Gain: '<S284>/Gain'
      proc_control_node_B.Gain_fn[proc_control_node_B.ibmat] =
        proc_control_node_B.epsilon * proc_control_node_B.Divide2_h;

      // Saturate: '<S289>/Saturation'
      proc_control_node_B.Saturation_k[proc_control_node_B.ibmat] =
        proc_control_node_B.Divide2_h;
    }

    // Sum: '<S284>/Sum' incorporates:
    //   Gain: '<S279>/Gain'

    proc_control_node_B.Sum_a[0] = (proc_control_node_B.In1_o.Linear.X -
      proc_control_node_B.Gain3[0]) - proc_control_node_B.Gain_fn[0];
    proc_control_node_B.Sum_a[1] = (proc_control_node_B.In1_o.Linear.Y -
      proc_control_node_B.Gain3[1]) - proc_control_node_B.Gain_fn[1];
    proc_control_node_B.Sum_a[2] = (proc_control_node_B.In1_o.Linear.Z -
      proc_control_node_B.Gain3[2]) - proc_control_node_B.Gain_fn[2];
    proc_control_node_B.Sum_a[3] = (proc_control_node_P.Gain_Gain_g *
      proc_control_node_B.In1_o.Angular.X - proc_control_node_B.Gain3[3]) -
      proc_control_node_B.Gain_fn[3];
    proc_control_node_B.Sum_a[4] = (proc_control_node_P.Gain_Gain_g *
      proc_control_node_B.In1_o.Angular.Y - proc_control_node_B.Gain3[4]) -
      proc_control_node_B.Gain_fn[4];
    proc_control_node_B.Sum_a[5] = (proc_control_node_P.Gain_Gain_g *
      proc_control_node_B.In1_o.Angular.Z - proc_control_node_B.Gain3[5]) -
      proc_control_node_B.Gain_fn[5];

    // MultiPortSwitch: '<S284>/Multiport Switch' incorporates:
    //   Constant: '<S284>/Constant4'

    switch (static_cast<int32_T>
            (proc_control_node_P.SecondOrderFilter_FilterType)) {
     case 1:
      // MultiPortSwitch: '<S284>/Multiport Switch'
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
           proc_control_node_B.i_j++) {
        proc_control_node_B.MultiportSwitch[proc_control_node_B.i_j] =
          proc_control_node_B.Gain3[proc_control_node_B.i_j];
      }
      break;

     case 2:
      // MultiPortSwitch: '<S284>/Multiport Switch'
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
           proc_control_node_B.i_j++) {
        proc_control_node_B.MultiportSwitch[proc_control_node_B.i_j] =
          proc_control_node_B.Sum_a[proc_control_node_B.i_j];
      }
      break;

     case 3:
      // MultiPortSwitch: '<S284>/Multiport Switch'
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
           proc_control_node_B.i_j++) {
        proc_control_node_B.MultiportSwitch[proc_control_node_B.i_j] =
          proc_control_node_B.Gain_fn[proc_control_node_B.i_j];
      }
      break;

     default:
      // MultiPortSwitch: '<S284>/Multiport Switch' incorporates:
      //   Sum: '<S284>/Sum1'

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
           proc_control_node_B.i_j++) {
        proc_control_node_B.MultiportSwitch[proc_control_node_B.i_j] =
          proc_control_node_B.Sum_a[proc_control_node_B.i_j] +
          proc_control_node_B.Gain3[proc_control_node_B.i_j];
      }
      break;
    }

    // End of MultiPortSwitch: '<S284>/Multiport Switch'
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
    // SwitchCase: '<S9>/Switch Case' incorporates:
    //   Constant: '<S293>/Constant1'
    //   Logic: '<S282>/OR'
    //   MATLABSystem: '<S294>/SourceBlock'

    rtPrevAction = proc_control_node_DW.SwitchCase_ActiveSubsystem;
    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      switch (static_cast<int32_T>(proc_control_node_B.MATLABSystem_o5)) {
       case 19:
       case 20:
       case 21:
        rtAction = 0;
        break;

       case 10:
        rtAction = 1;
        break;

       case 11:
       case 31:
       case 32:
        rtAction = 2;
        break;

       default:
        rtAction = 3;
        break;
      }

      proc_control_node_DW.SwitchCase_ActiveSubsystem = rtAction;
    } else {
      rtAction = proc_control_node_DW.SwitchCase_ActiveSubsystem;
    }

    switch (rtAction) {
     case 0:
      // Outputs for IfAction SubSystem: '<S9>/SubsystemManual' incorporates:
      //   ActionPort: '<S281>/Action Port'

      // SignalConversion generated from: '<S281>/Transpose' incorporates:
      //   Constant: '<S281>/Constant7'

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 7;
           proc_control_node_B.i_j++) {
        proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.i_j]
          = proc_control_node_P.Constant7_Value[proc_control_node_B.i_j];
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
           proc_control_node_B.i_j++) {
        proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.i_j
          + 7] = proc_control_node_B.MultiportSwitch[proc_control_node_B.i_j];
      }

      // MATLAB Function: '<S281>/MATLAB Function1' incorporates:
      //   Math: '<S281>/Transpose'

      for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 13;
           proc_control_node_B.k_d++) {
        proc_control_node_B.ibmat = proc_control_node_B.k_d * 10;
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 10;
             proc_control_node_B.i_j++) {
          proc_control_node_B.y_n[proc_control_node_B.ibmat +
            proc_control_node_B.i_j] =
            proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.k_d];
        }
      }

      // End of MATLAB Function: '<S281>/MATLAB Function1'
      // End of Outputs for SubSystem: '<S9>/SubsystemManual'
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S9>/SubsystemAuto' incorporates:
      //   ActionPort: '<S280>/Action Port'

      // SignalConversion generated from: '<S280>/Reference' incorporates:
      //   Constant: '<S280>/Constant'
      //   MATLAB Function: '<S280>/MATLAB Function1'
      //   Merge: '<S9>/Merge'

      proc_control_no_MATLABFunction1(proc_control_node_P.Constant_Value_fi,
        proc_control_node_B.y_n, &proc_control_node_B.sf_MATLABFunction1_n);

      // Merge: '<S9>/Merge1' incorporates:
      //   SignalConversion generated from: '<S280>/isReached'

      proc_control_node_B.Merge1 = false;

      // End of Outputs for SubSystem: '<S9>/SubsystemAuto'
      break;

     case 2:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S282>/Action Port'

        // InitializeConditions for SwitchCase: '<S9>/Switch Case' incorporates:
        //   Delay: '<S282>/Delay1'

        proc_control_node_DW.Delay1_DSTATE_cr =
          proc_control_node_P.Delay1_InitialCondition_k;

        // End of InitializeConditions for SubSystem: '<S9>/singleWpts Trajectory' 

        // SystemReset for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
        //   ActionPort: '<S282>/Action Port'

        // SystemReset for Resettable SubSystem: '<S282>/Trajectory generator'
        // SystemReset for SwitchCase: '<S9>/Switch Case' incorporates:
        //   DiscreteIntegrator: '<S296>/Discrete-Time Integrator'

        //  Fonction Reset
        //  Initialize / reset discrete-state properties
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE =
          proc_control_node_P.DiscreteTimeIntegrator_IC;

        // End of SystemReset for SubSystem: '<S282>/Trajectory generator'
        // End of SystemReset for SubSystem: '<S9>/singleWpts Trajectory'
        //  Fonction reset
        //  Initialize / reset discrete-state properties
      }

      // Outputs for IfAction SubSystem: '<S9>/singleWpts Trajectory' incorporates:
      //   ActionPort: '<S282>/Action Port'

      // Outputs for Atomic SubSystem: '<S282>/Subscribe'
      // MATLABSystem: '<S294>/SourceBlock'
      rtb_Reset = Sub_proc_control_node_184_1168.getLatestMessage
        (&proc_control_node_B.b_varargout_2);

      // Outputs for Enabled SubSystem: '<S282>/Subsystem1' incorporates:
      //   EnablePort: '<S295>/Enable'

      // Outputs for Enabled SubSystem: '<S294>/Enabled Subsystem' incorporates:
      //   EnablePort: '<S297>/Enable'

      if (rtb_Reset) {
        // DataTypeConversion: '<S295>/Data Type Conversion'
        proc_control_node_B.DataTypeConversion[0] =
          proc_control_node_B.b_varargout_2.Position.X;
        proc_control_node_B.DataTypeConversion[1] =
          proc_control_node_B.b_varargout_2.Position.Y;
        proc_control_node_B.DataTypeConversion[2] =
          proc_control_node_B.b_varargout_2.Position.Z;
        proc_control_node_B.DataTypeConversion[3] =
          proc_control_node_B.b_varargout_2.Orientation.Z;
        proc_control_node_B.DataTypeConversion[4] =
          proc_control_node_B.b_varargout_2.Orientation.Y;
        proc_control_node_B.DataTypeConversion[5] =
          proc_control_node_B.b_varargout_2.Orientation.X;

        // DataTypeConversion: '<S295>/Data Type Conversion1'
        proc_control_node_B.DataTypeConversion1[0] =
          proc_control_node_B.b_varargout_2.Frame;
        proc_control_node_B.DataTypeConversion1[1] =
          proc_control_node_B.b_varargout_2.Speed;

        // DataTypeConversion: '<S295>/Data Type Conversion2'
        proc_control_node_B.DataTypeConversion2 =
          proc_control_node_B.b_varargout_2.Fine;
      }

      // End of Outputs for SubSystem: '<S294>/Enabled Subsystem'
      // End of Outputs for SubSystem: '<S282>/Subsystem1'
      // End of Outputs for SubSystem: '<S282>/Subscribe'

      // SignalConversion generated from: '<S282>/MATLAB System1' incorporates:
      //   MATLABSystem: '<S294>/SourceBlock'

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
           proc_control_node_B.i_j++) {
        proc_control_node_B.TmpSignalConversionAtMATL_a[proc_control_node_B.i_j]
          = proc_control_node_B.DataTypeConversion[proc_control_node_B.i_j];
      }

      proc_control_node_B.TmpSignalConversionAtMATL_a[6] =
        proc_control_node_B.DataTypeConversion1[0];
      proc_control_node_B.TmpSignalConversionAtMATL_a[7] =
        proc_control_node_B.DataTypeConversion1[1];
      proc_control_node_B.TmpSignalConversionAtMATL_a[8] =
        proc_control_node_B.DataTypeConversion2;

      // SignalConversion generated from: '<S282>/MATLAB System1'
      proc_control_node_B.TmpSignalConversionAtMATLAB[0] =
        proc_control_node_B.WorldPosition[0];
      proc_control_node_B.TmpSignalConversionAtMATLAB[1] =
        proc_control_node_B.WorldPosition[1];
      proc_control_node_B.TmpSignalConversionAtMATLAB[2] =
        proc_control_node_B.WorldPosition[2];

      // MATLABSystem: '<S282>/MATLAB System1' incorporates:
      //   Constant: '<S282>/Constant'
      //   Delay: '<S282>/Delay1'
      //   MATLABSystem: '<S294>/SourceBlock'
      //   SignalConversion generated from: '<S282>/MATLAB System1'

      //  Main appeller à chaque exécution
      //  Suppression du buffer.
      //  ======================================================================== 
      //  Sous Routines
      // ==========================================================================         
      //  Fonction qui interprete les message ROS
      if (proc_control_node_P.Constant_Value_ha == 1.0) {
        //  supprimer le buffer de way points
        proc_control_node_B.i_j = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 9;
             proc_control_node_B.ibmat++) {
          proc_control_node_DW.obj_a.poseList[proc_control_node_B.i_j + 1] =
            999.0;
          proc_control_node_B.i_j += 2;
        }

        proc_control_node_DW.obj_a.i = 2.0;
      }

      // Outputs for Atomic SubSystem: '<S282>/Subscribe'
      //  Ajout d'un waypoint provenant de ROS.
      if (rtb_Reset && (proc_control_node_DW.obj_a.i <= 2.0)) {
        // this.poseList(this.i-1,:) = this.processWpt(waypoint.').';
        // ==========================================================================    
        //  Fonction qui interprete les waypoints reçu par ROS
        //  Determiner le quaternion en fonction des angles d'euler.
        //  Orde de rotation : ZYX.
        //  Reel
        memset(&proc_control_node_B.twpt[0], 0, 9U * sizeof(real_T));
        proc_control_node_B.twpt[7] = proc_control_node_B.DataTypeConversion1[1];

        //  twpt(9)=wpt(9);
        //  Pre calculs
        proc_control_node_B.t13 = 0.017453292519943295 *
          proc_control_node_B.TmpSignalConversionAtMATL_a[3] / 2.0;
        proc_control_node_B.u2[0] = proc_control_node_B.t13;
        proc_control_node_B.VectorConcatenate_p[0] = proc_control_node_B.t13;
        proc_control_node_B.t13 = 0.017453292519943295 *
          proc_control_node_B.TmpSignalConversionAtMATL_a[4] / 2.0;
        proc_control_node_B.u2[1] = proc_control_node_B.t13;
        proc_control_node_B.VectorConcatenate_p[1] = proc_control_node_B.t13;
        proc_control_node_B.t13 = 0.017453292519943295 *
          proc_control_node_B.TmpSignalConversionAtMATL_a[5] / 2.0;
        proc_control_node_B.u2[0] = cos(proc_control_node_B.u2[0]);
        proc_control_node_B.u2[1] = cos(proc_control_node_B.u2[1]);
        proc_control_node_B.u2[2] = cos(proc_control_node_B.t13);
        proc_control_node_B.VectorConcatenate_p[0] = sin
          (proc_control_node_B.VectorConcatenate_p[0]);
        proc_control_node_B.VectorConcatenate_p[1] = sin
          (proc_control_node_B.VectorConcatenate_p[1]);
        proc_control_node_B.VectorConcatenate_p[2] = sin(proc_control_node_B.t13);
        proc_control_node_B.epsilon = proc_control_node_B.u2[0] *
          proc_control_node_B.u2[1];
        proc_control_node_B.Divide1_n = proc_control_node_B.VectorConcatenate_p
          [0] * proc_control_node_B.VectorConcatenate_p[1];
        proc_control_node_B.n[0] = proc_control_node_B.epsilon *
          proc_control_node_B.u2[2] + proc_control_node_B.Divide1_n *
          proc_control_node_B.VectorConcatenate_p[2];
        proc_control_node_B.n[1] = proc_control_node_B.epsilon *
          proc_control_node_B.VectorConcatenate_p[2] -
          proc_control_node_B.Divide1_n * proc_control_node_B.u2[2];
        proc_control_node_B.epsilon = proc_control_node_B.VectorConcatenate_p[0]
          * proc_control_node_B.u2[1];
        proc_control_node_B.Divide1_n = proc_control_node_B.u2[0] *
          proc_control_node_B.VectorConcatenate_p[1];
        proc_control_node_B.n[2] = proc_control_node_B.Divide1_n *
          proc_control_node_B.u2[2] + proc_control_node_B.epsilon *
          proc_control_node_B.VectorConcatenate_p[2];
        proc_control_node_B.n[3] = proc_control_node_B.epsilon *
          proc_control_node_B.u2[2] - proc_control_node_B.Divide1_n *
          proc_control_node_B.VectorConcatenate_p[2];

        //  rp = quatrotate(quatinv(lq),wpt(1:3)) + lp;
        // rp = rotatepoint(quatinv(lq),wpt(1:3)) + lp;
        //  quaternion partie scalaire
        //  quaternion partie vectoriel
        proc_control_node_B.Divide1_n = 0.0;
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 3;
             proc_control_node_B.i_j++) {
          proc_control_node_B.Divide1_n += proc_control_node_DW.obj_a.poseList
            [(((proc_control_node_B.i_j + 4) << 1) + static_cast<int32_T>
              (proc_control_node_DW.obj_a.i - 1.0)) - 1] *
            proc_control_node_B.TmpSignalConversionAtMATL_a[proc_control_node_B.i_j];
        }

        proc_control_node_B.epsilon = 2.0 * proc_control_node_B.Divide1_n;
        proc_control_node_B.Divide1_n = 0.0;
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 3;
             proc_control_node_B.i_j++) {
          proc_control_node_B.Divide2_h = proc_control_node_DW.obj_a.poseList
            [(((proc_control_node_B.i_j + 4) << 1) + static_cast<int32_T>
              (proc_control_node_DW.obj_a.i - 1.0)) - 1];
          proc_control_node_B.Divide1_n += proc_control_node_B.Divide2_h *
            proc_control_node_B.Divide2_h;
        }

        proc_control_node_B.Divide2_h = proc_control_node_DW.obj_a.poseList[
          static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 5];
        proc_control_node_B.Divide1_n = proc_control_node_B.Divide2_h *
          proc_control_node_B.Divide2_h - proc_control_node_B.Divide1_n;
        proc_control_node_B.Divide2_h *= 2.0;

        //  choisir sens du quaternion
        proc_control_node_B.TmpSignalConversionAtSFun_f[0] =
          proc_control_node_B.n[0];
        proc_control_node_B.TmpSignalConversionAtSFun_f[1] =
          proc_control_node_B.n[1];
        proc_control_node_B.TmpSignalConversionAtSFun_f[2] =
          proc_control_node_B.n[2];
        proc_control_node_B.TmpSignalConversionAtSFun_f[3] =
          proc_control_node_B.n[3];

        // ==========================================================================    
        //  Fonnction qui retoure le quaternion le plus court/long selon
        //  l'utilisateur
        proc_control_node_B.SensorOn = 0.0;
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 4;
             proc_control_node_B.i_j++) {
          proc_control_node_B.SensorOn += proc_control_node_DW.obj_a.poseList
            [(((proc_control_node_B.i_j + 3) << 1) + static_cast<int32_T>
              (proc_control_node_DW.obj_a.i - 1.0)) - 1] *
            proc_control_node_B.n[proc_control_node_B.i_j];
        }

        //  conjuger le quaternion au besoin
        if (((proc_control_node_B.SensorOn > 1.0) &&
             (proc_control_node_B.DataTypeConversion2 == 0.0)) ||
            ((proc_control_node_B.SensorOn < 1.0) &&
             (proc_control_node_B.DataTypeConversion2 == 1.0))) {
          proc_control_node_B.TmpSignalConversionAtSFun_f[0] =
            proc_control_node_B.n[0];
          proc_control_node_B.TmpSignalConversionAtSFun_f[1] =
            -proc_control_node_B.n[1];
          proc_control_node_B.TmpSignalConversionAtSFun_f[2] =
            -proc_control_node_B.n[2];
          proc_control_node_B.TmpSignalConversionAtSFun_f[3] =
            -proc_control_node_B.n[3];
        }

        //          if dot(lq,q)>1
        //              rq= quatmultiply(lq,quatconj(q));
        //             %rq= quatmultiply(lq,quatconj(q));
        //            % rq= quatmultiply(quatinv(lq),quatconj(q));
        //
        //          else
        //               rq = quatmultiply(lq,((q)));
        //              %rq = quatmultiply(lq,quatinv(quatinv(q)));
        //             % rq = quatmultiply(quatinv(lq),q);
        //
        //          end
        //  transformer le point en fonction du frame
        proc_control_node_B.d_o = rt_roundd_snf
          (proc_control_node_B.DataTypeConversion1[0]);
        if (proc_control_node_B.d_o < 256.0) {
          if (proc_control_node_B.d_o >= 0.0) {
            tmp = static_cast<uint8_T>(proc_control_node_B.d_o);
          } else {
            tmp = 0U;
          }
        } else {
          tmp = MAX_uint8_T;
        }

        switch (tmp) {
         case 0U:
          //  position et angle absolue
          proc_control_node_B.twpt[0] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[0];
          proc_control_node_B.twpt[1] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[1];
          proc_control_node_B.twpt[2] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[2];
          proc_control_node_B.twpt[3] = proc_control_node_B.n[0];
          proc_control_node_B.twpt[4] = proc_control_node_B.n[1];
          proc_control_node_B.twpt[5] = proc_control_node_B.n[2];
          proc_control_node_B.twpt[6] = proc_control_node_B.n[3];
          break;

         case 1U:
          //  position et angle relatif
          proc_control_node_B.Product8 = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 11];
          proc_control_node_B.scale = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 7];
          proc_control_node_B.Product1_j5_b =
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + 9];
          proc_control_node_B.twpt[0] = ((proc_control_node_B.Product1_j5_b *
            proc_control_node_B.TmpSignalConversionAtMATL_a[2] -
            proc_control_node_B.Product8 *
            proc_control_node_B.TmpSignalConversionAtMATL_a[1]) *
            proc_control_node_B.Divide2_h + (proc_control_node_B.scale *
            proc_control_node_B.epsilon + proc_control_node_B.Divide1_n *
            proc_control_node_B.TmpSignalConversionAtMATL_a[0])) +
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) - 1];
          proc_control_node_B.twpt[1] = ((proc_control_node_B.Product8 *
            proc_control_node_B.TmpSignalConversionAtMATL_a[0] -
            proc_control_node_B.scale *
            proc_control_node_B.TmpSignalConversionAtMATL_a[2]) *
            proc_control_node_B.Divide2_h + (proc_control_node_B.Product1_j5_b *
            proc_control_node_B.epsilon + proc_control_node_B.Divide1_n *
            proc_control_node_B.TmpSignalConversionAtMATL_a[1])) +
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + 1];
          proc_control_node_B.twpt[2] = ((proc_control_node_B.scale *
            proc_control_node_B.TmpSignalConversionAtMATL_a[1] -
            proc_control_node_B.Product1_j5_b *
            proc_control_node_B.TmpSignalConversionAtMATL_a[0]) *
            proc_control_node_B.Divide2_h + (proc_control_node_B.Product8 *
            proc_control_node_B.epsilon + proc_control_node_B.Divide1_n *
            proc_control_node_B.TmpSignalConversionAtMATL_a[2])) +
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + 3];
          proc_control_node_B.epsilon = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 5];
          proc_control_node_B.twpt[3] = ((proc_control_node_B.epsilon *
            proc_control_node_B.TmpSignalConversionAtSFun_f[0] -
            proc_control_node_B.scale *
            proc_control_node_B.TmpSignalConversionAtSFun_f[1]) -
            proc_control_node_B.Product1_j5_b *
            proc_control_node_B.TmpSignalConversionAtSFun_f[2]) -
            proc_control_node_B.Product8 *
            proc_control_node_B.TmpSignalConversionAtSFun_f[3];
          proc_control_node_B.twpt[4] = (proc_control_node_B.epsilon *
            proc_control_node_B.TmpSignalConversionAtSFun_f[1] +
            proc_control_node_B.scale *
            proc_control_node_B.TmpSignalConversionAtSFun_f[0]) +
            (proc_control_node_B.Product1_j5_b *
             proc_control_node_B.TmpSignalConversionAtSFun_f[3] -
             proc_control_node_B.Product8 *
             proc_control_node_B.TmpSignalConversionAtSFun_f[2]);
          proc_control_node_B.twpt[5] = (proc_control_node_B.epsilon *
            proc_control_node_B.TmpSignalConversionAtSFun_f[2] +
            proc_control_node_B.Product1_j5_b *
            proc_control_node_B.TmpSignalConversionAtSFun_f[0]) +
            (proc_control_node_B.Product8 *
             proc_control_node_B.TmpSignalConversionAtSFun_f[1] -
             proc_control_node_B.scale *
             proc_control_node_B.TmpSignalConversionAtSFun_f[3]);
          proc_control_node_B.twpt[6] = (proc_control_node_B.epsilon *
            proc_control_node_B.TmpSignalConversionAtSFun_f[3] +
            proc_control_node_B.Product8 *
            proc_control_node_B.TmpSignalConversionAtSFun_f[0]) +
            (proc_control_node_B.scale *
             proc_control_node_B.TmpSignalConversionAtSFun_f[2] -
             proc_control_node_B.Product1_j5_b *
             proc_control_node_B.TmpSignalConversionAtSFun_f[1]);
          break;

         case 2U:
          //  position relatif et angle absolue
          proc_control_node_B.Product8 = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 11];
          proc_control_node_B.scale = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 7];
          proc_control_node_B.Product1_j5 = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 9];
          proc_control_node_B.twpt[0] = ((proc_control_node_B.Product1_j5 *
            proc_control_node_B.TmpSignalConversionAtMATL_a[2] -
            proc_control_node_B.Product8 *
            proc_control_node_B.TmpSignalConversionAtMATL_a[1]) *
            proc_control_node_B.Divide2_h + (proc_control_node_B.scale *
            proc_control_node_B.epsilon + proc_control_node_B.Divide1_n *
            proc_control_node_B.TmpSignalConversionAtMATL_a[0])) +
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) - 1];
          proc_control_node_B.twpt[1] = ((proc_control_node_B.Product8 *
            proc_control_node_B.TmpSignalConversionAtMATL_a[0] -
            proc_control_node_B.scale *
            proc_control_node_B.TmpSignalConversionAtMATL_a[2]) *
            proc_control_node_B.Divide2_h + (proc_control_node_B.Product1_j5 *
            proc_control_node_B.epsilon + proc_control_node_B.Divide1_n *
            proc_control_node_B.TmpSignalConversionAtMATL_a[1])) +
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + 1];
          proc_control_node_B.twpt[2] = ((proc_control_node_B.scale *
            proc_control_node_B.TmpSignalConversionAtMATL_a[1] -
            proc_control_node_B.Product1_j5 *
            proc_control_node_B.TmpSignalConversionAtMATL_a[0]) *
            proc_control_node_B.Divide2_h + (proc_control_node_B.Product8 *
            proc_control_node_B.epsilon + proc_control_node_B.Divide1_n *
            proc_control_node_B.TmpSignalConversionAtMATL_a[2])) +
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + 3];
          proc_control_node_B.twpt[3] = proc_control_node_B.n[0];
          proc_control_node_B.twpt[4] = proc_control_node_B.n[1];
          proc_control_node_B.twpt[5] = proc_control_node_B.n[2];
          proc_control_node_B.twpt[6] = proc_control_node_B.n[3];
          break;

         case 3U:
          //  position absolue et angle relatif
          proc_control_node_B.twpt[0] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[0];
          proc_control_node_B.twpt[1] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[1];
          proc_control_node_B.twpt[2] =
            proc_control_node_B.TmpSignalConversionAtMATL_a[2];
          proc_control_node_B.Product8 = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 5];
          proc_control_node_B.scale = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 7];
          proc_control_node_B.Product1_j5 = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 11];
          proc_control_node_B.twpt[3] = ((proc_control_node_B.Product8 *
            proc_control_node_B.TmpSignalConversionAtSFun_f[0] -
            proc_control_node_B.scale *
            proc_control_node_B.TmpSignalConversionAtSFun_f[1]) -
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + 9] *
            proc_control_node_B.TmpSignalConversionAtSFun_f[2]) -
            proc_control_node_B.Product1_j5 *
            proc_control_node_B.TmpSignalConversionAtSFun_f[3];
          proc_control_node_B.twpt[4] = (proc_control_node_B.Product8 *
            proc_control_node_B.TmpSignalConversionAtSFun_f[1] +
            proc_control_node_B.scale *
            proc_control_node_B.TmpSignalConversionAtSFun_f[0]) +
            (proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
             (proc_control_node_DW.obj_a.i - 1.0) + 9] *
             proc_control_node_B.TmpSignalConversionAtSFun_f[3] -
             proc_control_node_B.Product1_j5 *
             proc_control_node_B.TmpSignalConversionAtSFun_f[2]);
          proc_control_node_B.twpt[5] = (proc_control_node_B.Product8 *
            proc_control_node_B.TmpSignalConversionAtSFun_f[2] +
            proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + 9] *
            proc_control_node_B.TmpSignalConversionAtSFun_f[0]) +
            (proc_control_node_B.Product1_j5 *
             proc_control_node_B.TmpSignalConversionAtSFun_f[1] -
             proc_control_node_B.scale *
             proc_control_node_B.TmpSignalConversionAtSFun_f[3]);
          proc_control_node_B.twpt[6] = (proc_control_node_B.Product8 *
            proc_control_node_B.TmpSignalConversionAtSFun_f[3] +
            proc_control_node_B.Product1_j5 *
            proc_control_node_B.TmpSignalConversionAtSFun_f[0]) +
            (proc_control_node_B.scale *
             proc_control_node_B.TmpSignalConversionAtSFun_f[2] -
             proc_control_node_DW.obj_a.poseList[static_cast<int32_T>
             (proc_control_node_DW.obj_a.i - 1.0) + 9] *
             proc_control_node_B.TmpSignalConversionAtSFun_f[1]);
          break;

         default:
          //  retourne le point précédent
          proc_control_node_B.twpt[0] = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) - 1];
          proc_control_node_B.twpt[1] = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 1];
          proc_control_node_B.twpt[2] = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 3];
          proc_control_node_B.twpt[3] = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 5];
          proc_control_node_B.twpt[4] = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 7];
          proc_control_node_B.twpt[5] = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 9];
          proc_control_node_B.twpt[6] = proc_control_node_DW.obj_a.poseList[
            static_cast<int32_T>(proc_control_node_DW.obj_a.i - 1.0) + 11];
          break;
        }

        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 9;
             proc_control_node_B.i_j++) {
          proc_control_node_DW.obj_a.poseList[(static_cast<int32_T>
            (proc_control_node_DW.obj_a.i) + (proc_control_node_B.i_j << 1)) - 1]
            = proc_control_node_B.twpt[proc_control_node_B.i_j];
        }

        proc_control_node_DW.obj_a.i++;
      }

      // End of Outputs for SubSystem: '<S282>/Subscribe'
      if (proc_control_node_DW.Delay1_DSTATE_cr) {
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 9;
             proc_control_node_B.i_j++) {
          proc_control_node_B.ibmat = proc_control_node_B.i_j << 1;
          proc_control_node_DW.obj_a.poseList[proc_control_node_B.ibmat] =
            proc_control_node_DW.obj_a.poseList[(static_cast<int32_T>
            (proc_control_node_DW.obj_a.i - 1.0) + proc_control_node_B.ibmat) -
            1];
          proc_control_node_DW.obj_a.poseList[proc_control_node_B.ibmat + 1] =
            999.0;
        }

        proc_control_node_DW.obj_a.i = 2.0;
      }

      if (proc_control_node_B.MATLABSystem_o6 != 0.0) {
        // ==========================================================================    
        //  Fonction qui reset la trajectoire
        //  remove roll and pitch from initial condition
        proc_control_node_B.epsilon = 1.0 / sqrt(((proc_control_node_B.qS2W[0] *
          proc_control_node_B.qS2W[0] + proc_control_node_B.qS2W[1] *
          proc_control_node_B.qS2W[1]) + proc_control_node_B.qS2W[2] *
          proc_control_node_B.qS2W[2]) + proc_control_node_B.qS2W[3] *
          proc_control_node_B.qS2W[3]);
        proc_control_node_B.n[0] = proc_control_node_B.qS2W[0] *
          proc_control_node_B.epsilon;
        proc_control_node_B.n[1] = proc_control_node_B.qS2W[1] *
          proc_control_node_B.epsilon;
        proc_control_node_B.n[2] = proc_control_node_B.qS2W[2] *
          proc_control_node_B.epsilon;
        proc_control_node_B.n[3] = proc_control_node_B.qS2W[3] *
          proc_control_node_B.epsilon;
        proc_control_node_B.epsilon = (proc_control_node_B.n[1] *
          proc_control_node_B.n[3] + proc_control_node_B.n[0] *
          proc_control_node_B.n[2]) * 2.0;
        if (proc_control_node_B.epsilon > 1.0) {
          proc_control_node_B.epsilon = 1.0;
        }

        proc_control_node_B.scale = proc_control_node_B.epsilon;
        if (proc_control_node_B.epsilon < -1.0) {
          proc_control_node_B.scale = -1.0;
        }

        //  Retransformer en quaternion
        proc_control_node_B.epsilon = proc_control_node_B.n[0] *
          proc_control_node_B.n[0];
        proc_control_node_B.Divide1_n = proc_control_node_B.n[1] *
          proc_control_node_B.n[1];
        proc_control_node_B.Divide2_h = proc_control_node_B.n[2] *
          proc_control_node_B.n[2];
        proc_control_node_B.Product8 = proc_control_node_B.n[3] *
          proc_control_node_B.n[3];
        proc_control_node_B.VectorConcatenate_p[0] = rt_atan2d_snf
          ((proc_control_node_B.n[2] * proc_control_node_B.n[3] -
            proc_control_node_B.n[0] * proc_control_node_B.n[1]) * -2.0,
           ((proc_control_node_B.epsilon - proc_control_node_B.Divide1_n) -
            proc_control_node_B.Divide2_h) + proc_control_node_B.Product8) * 0.0
          / 2.0;
        proc_control_node_B.VectorConcatenate_p[1] = asin
          (proc_control_node_B.scale) * 0.0 / 2.0;
        proc_control_node_B.VectorConcatenate_p[2] = rt_atan2d_snf
          ((proc_control_node_B.n[1] * proc_control_node_B.n[2] -
            proc_control_node_B.n[0] * proc_control_node_B.n[3]) * -2.0,
           ((proc_control_node_B.epsilon + proc_control_node_B.Divide1_n) -
            proc_control_node_B.Divide2_h) - proc_control_node_B.Product8) / 2.0;
        proc_control_node_B.u2[0] = cos(proc_control_node_B.VectorConcatenate_p
          [0]);
        proc_control_node_B.u2[1] = cos(proc_control_node_B.VectorConcatenate_p
          [1]);
        proc_control_node_B.u2[2] = cos(proc_control_node_B.VectorConcatenate_p
          [2]);
        proc_control_node_B.VectorConcatenate_p[0] = sin
          (proc_control_node_B.VectorConcatenate_p[0]);
        proc_control_node_B.VectorConcatenate_p[1] = sin
          (proc_control_node_B.VectorConcatenate_p[1]);
        proc_control_node_B.VectorConcatenate_p[2] = sin
          (proc_control_node_B.VectorConcatenate_p[2]);
        proc_control_node_B.epsilon = proc_control_node_B.u2[0] *
          proc_control_node_B.u2[1];
        proc_control_node_B.Divide1_n = proc_control_node_B.VectorConcatenate_p
          [0] * proc_control_node_B.VectorConcatenate_p[1];
        proc_control_node_B.TmpSignalConversionAtMATLAB[3] =
          proc_control_node_B.epsilon * proc_control_node_B.u2[2] -
          proc_control_node_B.Divide1_n *
          proc_control_node_B.VectorConcatenate_p[2];
        proc_control_node_B.Divide2_h = proc_control_node_B.u2[0] *
          proc_control_node_B.VectorConcatenate_p[1];
        proc_control_node_B.TmpSignalConversionAtMATLAB[4] =
          proc_control_node_B.VectorConcatenate_p[0] * proc_control_node_B.u2[1]
          * proc_control_node_B.u2[2] + proc_control_node_B.Divide2_h *
          proc_control_node_B.VectorConcatenate_p[2];
        proc_control_node_B.TmpSignalConversionAtMATLAB[5] =
          -proc_control_node_B.VectorConcatenate_p[0] * proc_control_node_B.u2[1]
          * proc_control_node_B.VectorConcatenate_p[2] +
          proc_control_node_B.Divide2_h * proc_control_node_B.u2[2];
        proc_control_node_B.TmpSignalConversionAtMATLAB[6] =
          proc_control_node_B.epsilon * proc_control_node_B.VectorConcatenate_p
          [2] + proc_control_node_B.Divide1_n * proc_control_node_B.u2[2];
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 7;
             proc_control_node_B.i_j++) {
          proc_control_node_DW.obj_a.initcond[proc_control_node_B.i_j] =
            proc_control_node_B.TmpSignalConversionAtMATLAB[proc_control_node_B.i_j];
        }

        //  definir les conditions initiaux
        proc_control_node_B.i_j = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 9;
             proc_control_node_B.ibmat++) {
          proc_control_node_DW.obj_a.poseList[proc_control_node_B.i_j + 1] =
            999.0;
          proc_control_node_B.i_j += 2;
        }

        proc_control_node_DW.obj_a.poseList[14] = 0.0;
        proc_control_node_DW.obj_a.poseList[16] = 0.0;
        proc_control_node_B.i_j = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 7;
             proc_control_node_B.ibmat++) {
          proc_control_node_DW.obj_a.poseList[proc_control_node_B.i_j] =
            proc_control_node_DW.obj_a.initcond[proc_control_node_B.ibmat];
          proc_control_node_DW.obj_a.poseList[proc_control_node_B.i_j + 1] =
            proc_control_node_DW.obj_a.initcond[proc_control_node_B.ibmat];
          proc_control_node_B.i_j += 2;
        }

        proc_control_node_DW.obj_a.poseList[15] = 1.0;
        proc_control_node_DW.obj_a.poseList[17] = 0.0;
        proc_control_node_DW.obj_a.i = 2.0;
      }

      // Outputs for Enabled SubSystem: '<S282>/Pre-traitement' incorporates:
      //   EnablePort: '<S293>/Enable'

      // Outputs for Atomic SubSystem: '<S282>/Subscribe'
      if (rtb_Reset || (proc_control_node_B.MATLABSystem_o6 != 0.0)) {
        proc_control_node_B.MatrixConcatenate[0] =
          proc_control_node_P.Constant1_Value_o;

        // Math: '<S293>/Transpose' incorporates:
        //   Constant: '<S293>/Constant1'
        //   MATLABSystem: '<S282>/MATLAB System1'
        //   Selector: '<S293>/Selector'
        //   Selector: '<S293>/Selector1'

        proc_control_node_B.i_j = 0;
        proc_control_node_B.ibmat = 0;
        proc_control_node_B.coffset = 0;
        for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 2;
             proc_control_node_B.aoffset++) {
          proc_control_node_B.i1 = 0;
          for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 9;
               proc_control_node_B.k_d++) {
            proc_control_node_B.Transpose_i[proc_control_node_B.k_d +
              proc_control_node_B.ibmat] =
              proc_control_node_DW.obj_a.poseList[proc_control_node_B.i1 +
              proc_control_node_B.aoffset];
            proc_control_node_B.i1 += 2;
          }

          proc_control_node_B.Selector[proc_control_node_B.i_j] =
            proc_control_node_B.Transpose_i[proc_control_node_B.ibmat];
          proc_control_node_B.Selector[proc_control_node_B.i_j + 1] =
            proc_control_node_B.Transpose_i[proc_control_node_B.ibmat + 1];
          proc_control_node_B.Selector[proc_control_node_B.i_j + 2] =
            proc_control_node_B.Transpose_i[proc_control_node_B.ibmat + 2];
          proc_control_node_B.Selector1[proc_control_node_B.coffset] =
            proc_control_node_B.Transpose_i[proc_control_node_B.ibmat + 3];
          proc_control_node_B.Selector1[proc_control_node_B.coffset + 1] =
            proc_control_node_B.Transpose_i[proc_control_node_B.ibmat + 4];
          proc_control_node_B.Selector1[proc_control_node_B.coffset + 2] =
            proc_control_node_B.Transpose_i[proc_control_node_B.ibmat + 5];
          proc_control_node_B.Selector1[proc_control_node_B.coffset + 3] =
            proc_control_node_B.Transpose_i[proc_control_node_B.ibmat + 6];
          proc_control_node_B.i_j += 3;
          proc_control_node_B.ibmat += 9;
          proc_control_node_B.coffset += 4;
        }

        // End of Math: '<S293>/Transpose'

        // Selector: '<S293>/Selector2' incorporates:
        //   Math: '<S293>/Transpose'

        proc_control_node_B.MatrixConcatenate[1] =
          proc_control_node_B.Transpose_i[16];
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 7;
             proc_control_node_B.i_j++) {
          // Selector: '<S293>/Selector4' incorporates:
          //   Math: '<S293>/Transpose'

          proc_control_node_B.Selector4[proc_control_node_B.i_j] =
            proc_control_node_B.Transpose_i[proc_control_node_B.i_j + 9];
        }
      }

      // End of Outputs for SubSystem: '<S282>/Pre-traitement'

      // Outputs for Resettable SubSystem: '<S282>/Trajectory generator' incorporates:
      //   ResetPort: '<S296>/Reset'

      if (rtb_Reset && (proc_control_node_PrevZCX.Trajectorygenerator_Reset_ZCE
                        != 1)) {
        // InitializeConditions for DiscreteIntegrator: '<S296>/Discrete-Time Integrator' 
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE =
          proc_control_node_P.DiscreteTimeIntegrator_IC;
      }

      proc_control_node_PrevZCX.Trajectorygenerator_Reset_ZCE = rtb_Reset;

      // End of Outputs for SubSystem: '<S282>/Subscribe'

      // DiscreteIntegrator: '<S296>/Discrete-Time Integrator' incorporates:
      //   Constant: '<S293>/Constant1'
      //   Constant: '<S296>/Constant'
      //   Logic: '<S282>/OR'
      //   MATLABSystem: '<S294>/SourceBlock'

      proc_control_node_B.Product8 =
        proc_control_node_P.DiscreteTimeIntegrator_gainval *
        proc_control_node_P.Constant_Value_ep;

      // DiscreteIntegrator: '<S296>/Discrete-Time Integrator'
      proc_control_node_B.epsilon = proc_control_node_B.Product8 +
        proc_control_node_DW.DiscreteTimeIntegrator_DSTATE;

      // MATLABSystem: '<S296>/Rotation Trajectory' incorporates:
      //   Concatenate: '<S293>/Matrix Concatenate'
      //   Selector: '<S293>/Selector1'
      //   Selector: '<S296>/Selector1'
      //   Selector: '<S296>/Selector2'

      proc_control_no_SystemCore_step(&proc_control_node_DW.obj_j,
        proc_control_node_B.epsilon, &proc_control_node_B.Selector1[0],
        &proc_control_node_B.Selector1[4], proc_control_node_B.MatrixConcatenate,
        proc_control_node_B.rq, proc_control_node_B.VectorConcatenate_p,
        proc_control_node_B.u2);

      // MATLABSystem: '<S298>/Polynomial Trajectory1' incorporates:
      //   Concatenate: '<S293>/Matrix Concatenate'
      //   Selector: '<S293>/Selector'

      rtb_Reset_j = false;
      rtb_NewDvlMsg = true;
      proc_control_node_B.i_j = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.i_j < 6)) {
        if (!(proc_control_node_DW.obj_jo.VelocityBoundaryCondition[proc_control_node_B.i_j]
              ==
              proc_control_node_P.PolynomialTrajectory1_VelocityB[proc_control_node_B.i_j]))
        {
          rtb_NewDvlMsg = false;
          exitg1 = true;
        } else {
          proc_control_node_B.i_j++;
        }
      }

      if (rtb_NewDvlMsg) {
        rtb_Reset_j = true;
      }

      if (!rtb_Reset_j) {
        if (proc_control_node_DW.obj_jo.isInitialized == 1) {
          proc_control_node_DW.obj_jo.TunablePropsChanged = true;
        }

        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
             proc_control_node_B.i_j++) {
          proc_control_node_DW.obj_jo.VelocityBoundaryCondition[proc_control_node_B.i_j]
            =
            proc_control_node_P.PolynomialTrajectory1_VelocityB[proc_control_node_B.i_j];
        }
      }

      if (proc_control_node_DW.obj_jo.TunablePropsChanged) {
        proc_control_node_DW.obj_jo.TunablePropsChanged = false;
      }

      proc_control_node_cubicpolytraj(proc_control_node_B.Selector,
        proc_control_node_B.MatrixConcatenate,
        proc_control_node_B.MatrixConcatenate,
        proc_control_node_DW.obj_jo.VelocityBoundaryCondition,
        proc_control_node_B.Gain3, proc_control_node_B.Gain_fn,
        proc_control_node_B.a__4, proc_control_node_B.n,
        proc_control_node_B.pp_coefs);
      proc_control_node_B.TmpSignalConversionAtSFun_f[0] =
        proc_control_node_B.n[0];
      proc_control_node_B.TmpSignalConversionAtSFun_f[1] =
        proc_control_node_B.n[1];
      proc_control_node_B.TmpSignalConversionAtSFun_f[3] =
        proc_control_node_B.n[3];
      proc_control_node_B.Divide1_n = 0.01;
      if (proc_control_node_B.epsilon > proc_control_node_B.n[2]) {
        proc_control_node_B.i_j = 1;
        proc_control_node_B.k_d = 1;
      } else {
        proc_control_node_B.i_j = 0;
        proc_control_node_B.k_d = 0;
      }

      if ((proc_control_node_B.i_j != 0) && (proc_control_node_B.k_d != 0)) {
        proc_control_node_B.Divide2_h = (proc_control_node_B.epsilon -
          proc_control_node_B.n[2]) / 2.0;
        if (proc_control_node_B.Divide2_h < 0.01) {
          proc_control_node_B.Divide1_n = proc_control_node_B.Divide2_h;
        }
      }

      proc_control_node_B.TmpSignalConversionAtSFun_f[2] =
        proc_control_node_B.n[2] + proc_control_node_B.Divide1_n;
      memset(&proc_control_node_B.dCoefs[0], 0, 36U * sizeof(real_T));

      // Update for DiscreteIntegrator: '<S296>/Discrete-Time Integrator'
      proc_control_node_DW.DiscreteTimeIntegrator_DSTATE =
        proc_control_node_B.Product8 + proc_control_node_B.epsilon;

      // MATLABSystem: '<S298>/Polynomial Trajectory1' incorporates:
      //   SignalConversion generated from: '<S282>/Transpose2'

      proc_control_node_B.coffset = 0;
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 3;
           proc_control_node_B.ibmat++) {
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 9;
             proc_control_node_B.i_j++) {
          proc_control_node_B.k_d = proc_control_node_B.i_j +
            proc_control_node_B.coffset;
          proc_control_node_B.dCoefs[proc_control_node_B.k_d + 9] =
            proc_control_node_B.pp_coefs[proc_control_node_B.k_d] * static_cast<
            real_T>(3 - proc_control_node_B.ibmat);
        }

        proc_control_node_B.imvec[proc_control_node_B.ibmat] =
          proc_control_node_B.WorldPosition[proc_control_node_B.ibmat];
        proc_control_node_B.coffset += 9;
      }

      // End of Outputs for SubSystem: '<S282>/Trajectory generator'

      // MATLABSystem: '<S282>/MATLAB System' incorporates:
      //   MATLABSystem: '<S282>/MATLAB System1'
      //   MATLABSystem: '<S296>/Rotation Trajectory'
      //   MATLABSystem: '<S298>/Polynomial Trajectory1'

      if (proc_control_node_DW.obj.linearConvergence !=
          proc_control_node_P.MATLABSystem_linearConvergence) {
        proc_control_node_DW.obj.linearConvergence =
          proc_control_node_P.MATLABSystem_linearConvergence;
      }

      if (proc_control_node_DW.obj.quaternionConvergence !=
          proc_control_node_P.MATLABSystem_quaternionConverge) {
        proc_control_node_DW.obj.quaternionConvergence =
          proc_control_node_P.MATLABSystem_quaternionConverge;
      }

      if (proc_control_node_DW.obj.TargetThreshold !=
          proc_control_node_P.MATLABSystem_TargetThreshold) {
        proc_control_node_DW.obj.TargetThreshold =
          proc_control_node_P.MATLABSystem_TargetThreshold;
      }

      //  Main execute a chaque iteration.
      //  Implement algorithm. Calculate y as a function of input u and
      if (proc_control_node_B.MATLABSystem_o6 == 1.0) {
        proc_control_node_DW.obj.init = 0.0;
      }

      if (proc_control_node_DW.obj.init == 0.0) {
        //  Conditions Initiales
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 7;
             proc_control_node_B.i_j++) {
          proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.i_j]
            = proc_control_node_DW.obj_a.initcond[proc_control_node_B.i_j];
        }

        proc_control_node_B.TmpSignalConversionAtTransp[7] = 0.0;
        proc_control_node_B.TmpSignalConversionAtTransp[8] = 0.0;
        proc_control_node_B.TmpSignalConversionAtTransp[9] = 0.0;
        proc_control_node_B.TmpSignalConversionAtTransp[10] = 0.0;
        proc_control_node_B.TmpSignalConversionAtTransp[11] = 0.0;
        proc_control_node_B.TmpSignalConversionAtTransp[12] = 0.0;
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 13;
             proc_control_node_B.i_j++) {
          proc_control_node_B.ibmat = proc_control_node_B.i_j * 10;
          for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 10;
               proc_control_node_B.coffset++) {
            proc_control_node_B.y_n[proc_control_node_B.ibmat +
              proc_control_node_B.coffset] =
              proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.i_j];
            proc_control_node_DW.obj.poseBuffer[((proc_control_node_B.coffset +
              1) + 6001 * proc_control_node_B.i_j) - 1] =
              proc_control_node_B.y_n[10 * proc_control_node_B.i_j +
              proc_control_node_B.coffset];
          }
        }

        // InitCond;
        proc_control_node_DW.obj.bufferCount = 1.0;
        proc_control_node_DW.obj.init = 1.0;
      }

      // this.BufferReset(reset,mp);
      //  Fonction qui traites les nouveau poses.
      //  Insertion des nouveaux points.
      // if new == this.generationNumber %new>
      if (proc_control_node_DW.obj.bufferCount + 1.0 < 6001.0) {
        // Outputs for Resettable SubSystem: '<S282>/Trajectory generator' incorporates:
        //   ResetPort: '<S296>/Reset'

        // MATLABSystem: '<S298>/Polynomial Trajectory1'
        proc_control_node_ppval_b(proc_control_node_B.n,
          proc_control_node_B.pp_coefs, proc_control_node_B.epsilon,
          proc_control_node_B.u2);
        proc_control_node_ppval_b
          (proc_control_node_B.TmpSignalConversionAtSFun_f,
           proc_control_node_B.dCoefs, proc_control_node_B.epsilon,
           proc_control_node_B.dv27);
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) - 1] =
          proc_control_node_B.u2[0];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 6000] =
          proc_control_node_B.u2[1];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 12001] =
          proc_control_node_B.u2[2];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 18002] =
          proc_control_node_B.rq[0];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 24003] =
          proc_control_node_B.rq[1];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 30004] =
          proc_control_node_B.rq[2];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 36005] =
          proc_control_node_B.rq[3];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 42006] =
          proc_control_node_B.dv27[0];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 60009] =
          proc_control_node_B.VectorConcatenate_p[0];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 48007] =
          proc_control_node_B.dv27[1];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 66010] =
          proc_control_node_B.VectorConcatenate_p[1];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 54008] =
          proc_control_node_B.dv27[2];
        proc_control_node_DW.obj.poseBuffer[static_cast<int32_T>
          (proc_control_node_DW.obj.bufferCount + 1.0) + 72011] =
          proc_control_node_B.VectorConcatenate_p[2];

        // End of Outputs for SubSystem: '<S282>/Trajectory generator'
        // this.poseBuffer(this.bufferCount:count + this.bufferCount,:) = pose(1:count+1,:) 
        proc_control_node_DW.obj.bufferCount++;
        proc_control_node_DW.obj.generationNumber++;
      } else {
        printf("%s\n", "Problem");
        fflush(stdout);
      }

      TrajectoryManager_SendCurrentPo(&proc_control_node_DW.obj,
        proc_control_node_B.y_n);

      // Merge: '<S9>/Merge1' incorporates:
      //   MATLABSystem: '<S282>/MATLAB System'

      //  Fonction qui verifie le target reached
      proc_control_node_B.Merge1 = false;

      // MATLABSystem: '<S282>/MATLAB System' incorporates:
      //   Math: '<S282>/Transpose1'
      //   Math: '<S282>/Transpose2'
      //   Selector: '<S293>/Selector4'
      //   SignalConversion generated from: '<S282>/Transpose2'

      //  vérifier le traget reached si la trajectoire est terminé
      if (!proc_control_node_DW.obj.done) {
        //  calcule de l'erreur de langle en 3D avec le quaternion
        proc_control_node_B.qRel[0] = ((proc_control_node_B.qS2W[0] *
          proc_control_node_B.Selector4[3] - -proc_control_node_B.Selector4[4] *
          proc_control_node_B.qS2W[1]) - -proc_control_node_B.Selector4[5] *
          proc_control_node_B.qS2W[2]) - -proc_control_node_B.Selector4[6] *
          proc_control_node_B.qS2W[3];
        proc_control_node_B.qRel[1] = (proc_control_node_B.qS2W[1] *
          proc_control_node_B.Selector4[3] + -proc_control_node_B.Selector4[4] *
          proc_control_node_B.qS2W[0]) + (-proc_control_node_B.Selector4[5] *
          proc_control_node_B.qS2W[3] - -proc_control_node_B.Selector4[6] *
          proc_control_node_B.qS2W[2]);
        proc_control_node_B.qRel[2] = (proc_control_node_B.qS2W[2] *
          proc_control_node_B.Selector4[3] + -proc_control_node_B.Selector4[5] *
          proc_control_node_B.qS2W[0]) + (-proc_control_node_B.Selector4[6] *
          proc_control_node_B.qS2W[1] - -proc_control_node_B.Selector4[4] *
          proc_control_node_B.qS2W[3]);
        proc_control_node_B.qRel[3] = (proc_control_node_B.Selector4[3] *
          proc_control_node_B.qS2W[3] + proc_control_node_B.qS2W[0] *
          -proc_control_node_B.Selector4[6]) + (-proc_control_node_B.Selector4[4]
          * proc_control_node_B.qS2W[2] - -proc_control_node_B.Selector4[5] *
          proc_control_node_B.qS2W[1]);

        //  vérifier si le sub est dans la zone de convergence (sphérique / conique) 
        proc_control_node_B.u2[0] = proc_control_node_B.Selector4[0] -
          proc_control_node_B.imvec[0];
        proc_control_node_B.u2[1] = proc_control_node_B.Selector4[1] -
          proc_control_node_B.imvec[1];
        proc_control_node_B.u2[2] = proc_control_node_B.Selector4[2] -
          proc_control_node_B.imvec[2];
        if ((proc_control_node_norm_b(proc_control_node_B.u2) <
             proc_control_node_DW.obj.linearConvergence) && (2.0 * rt_atan2d_snf
             (proc_control_node_norm_b(&proc_control_node_B.qRel[1]),
              proc_control_node_B.qRel[0]) <
             proc_control_node_DW.obj.quaternionConvergence)) {
          proc_control_node_DW.obj.targetReachedCount++;

          // Merge: '<S9>/Merge1'
          proc_control_node_B.Merge1 =
            (proc_control_node_DW.obj.targetReachedCount * 0.1 >=
             proc_control_node_DW.obj.TargetThreshold);
        } else {
          proc_control_node_DW.obj.targetReachedCount = 0.0;
        }
      }

      // Outputs for Atomic SubSystem: '<S282>/Subscribe'
      // Update for Delay: '<S282>/Delay1' incorporates:
      //   MATLABSystem: '<S294>/SourceBlock'

      proc_control_node_DW.Delay1_DSTATE_cr = rtb_Reset;

      // End of Outputs for SubSystem: '<S282>/Subscribe'
      // End of Outputs for SubSystem: '<S9>/singleWpts Trajectory'
      break;

     case 3:
      // Outputs for IfAction SubSystem: '<S9>/If Action Subsystem' incorporates:
      //   ActionPort: '<S278>/Action Port'

      // SignalConversion generated from: '<S278>/y' incorporates:
      //   Constant: '<S278>/Constant'
      //   MATLAB Function: '<S278>/MATLAB Function1'
      //   Merge: '<S9>/Merge'

      proc_control_no_MATLABFunction1(proc_control_node_P.Constant_Value_m5,
        proc_control_node_B.y_n, &proc_control_node_B.sf_MATLABFunction1_p);

      // End of Outputs for SubSystem: '<S9>/If Action Subsystem'
      break;
    }

    // End of SwitchCase: '<S9>/Switch Case'

    // Outputs for Atomic SubSystem: '<Root>/Subsystem Controller'
    // SwitchCase: '<S7>/Switch Case' incorporates:
    //   DataTypeConversion: '<S7>/Data Type Conversion'
    //   Gain: '<S183>/u_scale'
    //   MATLAB Function: '<S169>/FixedHorizonOptimizer'
    //   MATLAB Function: '<S211>/FixedHorizonOptimizer'

    rtPrevAction = proc_control_node_DW.SwitchCase_ActiveSubsystem_l;
    switch (static_cast<uint8_T>(proc_control_node_B.MATLABSystem_o5)) {
     case 10:
     case 11:
     case 19:
      rtAction = 0;
      break;

     case 20:
     case 21:
      rtAction = 1;
      break;

     case 31:
      rtAction = 2;
      break;

     case 32:
      rtAction = 3;
      break;

     default:
      rtAction = 4;
      break;
    }

    proc_control_node_DW.SwitchCase_ActiveSubsystem_l = rtAction;
    switch (rtAction) {
     case 0:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S7>/Quaternion Non linear MPC (Not for codegen)' incorporates:
        //   ActionPort: '<S136>/Action Port'

        // InitializeConditions for SwitchCase: '<S7>/Switch Case' incorporates:
        //   Delay: '<S136>/Delay'
        //   DiscretePulseGenerator: '<S136>/Pulse Generator'

        memcpy(&proc_control_node_DW.Delay_DSTATE_a[0],
               &proc_control_node_P.Delay_InitialCondition_g[0], sizeof(real_T) <<
               3U);
        proc_control_node_DW.clockTickCounter_p = 0;

        // End of InitializeConditions for SubSystem: '<S7>/Quaternion Non linear MPC (Not for codegen)' 
        //  Initialize / reset discrete-state properties
      }

      // Outputs for IfAction SubSystem: '<S7>/Quaternion Non linear MPC (Not for codegen)' incorporates:
      //   ActionPort: '<S136>/Action Port'

      // SignalConversion generated from: '<S136>/MPC manager'
      proc_control_node_B.TmpSignalConversionAtTransp[0] =
        proc_control_node_B.WorldPosition[0];
      proc_control_node_B.TmpSignalConversionAtTransp[1] =
        proc_control_node_B.WorldPosition[1];
      proc_control_node_B.TmpSignalConversionAtTransp[2] =
        proc_control_node_B.WorldPosition[2];
      proc_control_node_B.TmpSignalConversionAtTransp[3] =
        proc_control_node_B.qS2W[0];
      proc_control_node_B.TmpSignalConversionAtTransp[4] =
        proc_control_node_B.qS2W[1];
      proc_control_node_B.TmpSignalConversionAtTransp[5] =
        proc_control_node_B.qS2W[2];
      proc_control_node_B.TmpSignalConversionAtTransp[6] =
        proc_control_node_B.qS2W[3];
      proc_control_node_B.TmpSignalConversionAtTransp[7] =
        proc_control_node_B.BodyVelocity[0];
      proc_control_node_B.TmpSignalConversionAtTransp[10] =
        proc_control_node_B.AngularRate[0];
      proc_control_node_B.TmpSignalConversionAtTransp[8] =
        proc_control_node_B.BodyVelocity[1];
      proc_control_node_B.TmpSignalConversionAtTransp[11] =
        proc_control_node_B.AngularRate[1];
      proc_control_node_B.TmpSignalConversionAtTransp[9] =
        proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.TmpSignalConversionAtTransp[12] =
        proc_control_node_B.AngularRate[2];

      // MATLABSystem: '<S136>/MPC manager'
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        proc_control_node_B.u[proc_control_node_B.i_j] =
          proc_control_node_P.MPC.tmin;
        proc_control_node_B.u_p[proc_control_node_B.i_j] =
          proc_control_node_P.MPC.tmax;
      }

      if (!proc_control_node_isequal(proc_control_node_DW.obj_n.Config10,
           proc_control_node_P.Config10)) {
        memcpy(&proc_control_node_DW.obj_n.Config10[0],
               &proc_control_node_P.Config10[0], 29U * sizeof(real_T));
      }

      if (!proc_control_node_isequal(proc_control_node_DW.obj_n.Config19,
           proc_control_node_P.Config19)) {
        memcpy(&proc_control_node_DW.obj_n.Config19[0],
               &proc_control_node_P.Config19[0], 29U * sizeof(real_T));
      }

      if (!proc_control_node_isequal_b(proc_control_node_DW.obj_n.Tmin,
           proc_control_node_B.u)) {
        memcpy(&proc_control_node_DW.obj_n.Tmin[0], &proc_control_node_B.u[0],
               sizeof(real_T) << 3U);
      }

      if (!proc_control_node_isequal_b(proc_control_node_DW.obj_n.Tmax,
           proc_control_node_B.u_p)) {
        memcpy(&proc_control_node_DW.obj_n.Tmax[0], &proc_control_node_B.u_p[0],
               sizeof(real_T) << 3U);
      }

      rtb_Reset_j = false;
      rtb_NewDvlMsg = true;
      proc_control_node_B.i_j = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.i_j < 41)) {
        if (!(proc_control_node_DW.obj_n.MecConst[proc_control_node_B.i_j] ==
              proc_control_node_P.constValues[proc_control_node_B.i_j])) {
          rtb_NewDvlMsg = false;
          exitg1 = true;
        } else {
          proc_control_node_B.i_j++;
        }
      }

      if (rtb_NewDvlMsg) {
        rtb_Reset_j = true;
      }

      if (!rtb_Reset_j) {
        memcpy(&proc_control_node_DW.obj_n.MecConst[0],
               &proc_control_node_P.constValues[0], 41U * sizeof(real_T));
      }

      if (!proc_control_node_isequal_b(proc_control_node_DW.obj_n.mvInit,
           proc_control_node_P.Ui)) {
        memcpy(&proc_control_node_DW.obj_n.mvInit[0], &proc_control_node_P.Ui[0],
               sizeof(real_T) << 3U);
      }

      if (proc_control_node_DW.obj_n.eInit !=
          proc_control_node_P.MPCmanager_eInit) {
        proc_control_node_DW.obj_n.eInit = proc_control_node_P.MPCmanager_eInit;
      }

      //         %% Fonction qui détermine les gain
      switch (static_cast<int32_T>(proc_control_node_B.MATLABSystem_o5)) {
       case 10:
        memcpy(&proc_control_node_B.imvec[0],
               &proc_control_node_DW.obj_n.Config10[0], 13U * sizeof(real_T));
        memcpy(&proc_control_node_B.u[0], &proc_control_node_DW.obj_n.Config10
               [13], sizeof(real_T) << 3U);
        memcpy(&proc_control_node_B.u_p[0],
               &proc_control_node_DW.obj_n.Config10[21], sizeof(real_T) << 3U);
        break;

       case 19:
        memcpy(&proc_control_node_B.imvec[0],
               &proc_control_node_DW.obj_n.Config19[0], 13U * sizeof(real_T));
        memcpy(&proc_control_node_B.u[0], &proc_control_node_DW.obj_n.Config19
               [13], sizeof(real_T) << 3U);
        memcpy(&proc_control_node_B.u_p[0],
               &proc_control_node_DW.obj_n.Config19[21], sizeof(real_T) << 3U);
        break;

       default:
        memcpy(&proc_control_node_B.imvec[0],
               &proc_control_node_DW.obj_n.Config10[0], 13U * sizeof(real_T));
        memcpy(&proc_control_node_B.u[0], &proc_control_node_DW.obj_n.Config10
               [13], sizeof(real_T) << 3U);
        memcpy(&proc_control_node_B.u_p[0],
               &proc_control_node_DW.obj_n.Config10[21], sizeof(real_T) << 3U);
        break;
      }

      //         %% Fonction D'initialisation
      //  Conditions initial
      if (proc_control_node_DW.obj_n.init == 0.0) {
        memcpy(&proc_control_node_DW.obj_n.xInit[0],
               &proc_control_node_B.TmpSignalConversionAtTransp[0], 13U * sizeof
               (real_T));
        proc_control_node_DW.obj_n.init = 1.0;
      }

      // MATLAB Function: '<S216>/NLMPC' incorporates:
      //   Delay: '<S136>/Delay'
      //   MATLABSystem: '<S136>/MPC manager'
      //   Merge: '<S9>/Merge'
      //   Reshape: '<S216>/Reshape'

      proc_znlmpc_generateRuntimeData
        (proc_control_node_B.TmpSignalConversionAtTransp,
         proc_control_node_DW.Delay_DSTATE_a, proc_control_node_B.y_n,
         proc_control_node_B.imvec, proc_control_node_B.u,
         proc_control_node_B.u_p, proc_control_node_DW.obj_n.Tmin,
         proc_control_node_DW.obj_n.Tmax, proc_control_node_DW.obj_n.xInit,
         proc_control_node_DW.obj_n.mvInit, proc_control_node_DW.obj_n.eInit,
         &proc_control_node_B.runtimedata, &proc_control_node_B.userdata,
         proc_control_node_B.z0);
      proc_control__znlmpc_getZBounds(&proc_control_node_B.runtimedata,
        proc_control_node_B.zLB, proc_control_node_B.zUB);
      proc_control__znlmpc_getUBounds(&proc_control_node_B.runtimedata,
        proc_control_node_B.A_data, proc_control_node_B.A_size,
        proc_control_node_B.B_data_i, &proc_control_node_B.B_size);
      memcpy(&proc_control_node_B.expl_temp.MVScaledTarget[0],
             &proc_control_node_B.runtimedata.MVScaledTarget[0], 80U * sizeof
             (real_T));
      memcpy(&proc_control_node_B.expl_temp.MVRateMax[0],
             &proc_control_node_B.runtimedata.MVRateMax[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.MVRateMin[0],
             &proc_control_node_B.runtimedata.MVRateMin[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.MVMax[0],
             &proc_control_node_B.runtimedata.MVMax[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.MVMin[0],
             &proc_control_node_B.runtimedata.MVMin[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.StateMax[0],
             &proc_control_node_B.runtimedata.StateMax[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.StateMin[0],
             &proc_control_node_B.runtimedata.StateMin[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.OutputMax[0],
             &proc_control_node_B.runtimedata.OutputMax[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.OutputMin[0],
             &proc_control_node_B.runtimedata.OutputMin[0], 130U * sizeof(real_T));
      proc_control_node_B.expl_temp.ECRWeight =
        proc_control_node_B.runtimedata.ECRWeight;
      memcpy(&proc_control_node_B.expl_temp.MVRateWeights[0],
             &proc_control_node_B.runtimedata.MVRateWeights[0], 80U * sizeof
             (real_T));
      memcpy(&proc_control_node_B.expl_temp.MVWeights[0],
             &proc_control_node_B.runtimedata.MVWeights[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.OutputWeights[0],
             &proc_control_node_B.runtimedata.OutputWeights[0], 130U * sizeof
             (real_T));
      memcpy(&proc_control_node_B.expl_temp.ref[0],
             &proc_control_node_B.runtimedata.ref[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp.lastMV[0],
             &proc_control_node_B.runtimedata.lastMV[0], sizeof(real_T) << 3U);
      memcpy(&proc_control_node_B.expl_temp.x[0],
             &proc_control_node_B.runtimedata.x[0], 13U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_h.MVScaledTarget[0],
             &proc_control_node_B.runtimedata.MVScaledTarget[0], 80U * sizeof
             (real_T));
      memcpy(&proc_control_node_B.expl_temp_h.MVRateMax[0],
             &proc_control_node_B.runtimedata.MVRateMax[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_h.MVRateMin[0],
             &proc_control_node_B.runtimedata.MVRateMin[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_h.MVMax[0],
             &proc_control_node_B.runtimedata.MVMax[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_h.MVMin[0],
             &proc_control_node_B.runtimedata.MVMin[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_h.StateMax[0],
             &proc_control_node_B.runtimedata.StateMax[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_h.StateMin[0],
             &proc_control_node_B.runtimedata.StateMin[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_h.OutputMax[0],
             &proc_control_node_B.runtimedata.OutputMax[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_h.OutputMin[0],
             &proc_control_node_B.runtimedata.OutputMin[0], 130U * sizeof(real_T));
      proc_control_node_B.expl_temp_h.ECRWeight =
        proc_control_node_B.runtimedata.ECRWeight;
      memcpy(&proc_control_node_B.expl_temp_h.MVRateWeights[0],
             &proc_control_node_B.runtimedata.MVRateWeights[0], 80U * sizeof
             (real_T));
      memcpy(&proc_control_node_B.expl_temp_h.MVWeights[0],
             &proc_control_node_B.runtimedata.MVWeights[0], 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_h.OutputWeights[0],
             &proc_control_node_B.runtimedata.OutputWeights[0], 130U * sizeof
             (real_T));
      memcpy(&proc_control_node_B.expl_temp_h.ref[0],
             &proc_control_node_B.runtimedata.ref[0], 130U * sizeof(real_T));
      memcpy(&proc_control_node_B.expl_temp_h.lastMV[0],
             &proc_control_node_B.runtimedata.lastMV[0], sizeof(real_T) << 3U);
      memcpy(&proc_control_node_B.expl_temp_h.x[0],
             &proc_control_node_B.runtimedata.x[0], 13U * sizeof(real_T));
      proc_control_node_fmincon(&proc_control_node_B.expl_temp,
        &proc_control_node_B.userdata, proc_control_node_B.z0,
        proc_control_node_B.A_data, proc_control_node_B.B_data_i,
        &proc_control_node_B.B_size, proc_control_node_B.zLB,
        &proc_control_node_B.expl_temp_h, &proc_control_node_B.userdata,
        proc_control_node_B.zUB, &proc_control_node_B.MATLABSystem_o6,
        &proc_control_node_B.MATLABSystem_o5, &proc_control_node_B.epsilon,
        &proc_control_node_B.Divide1_n, expl_temp,
        &proc_control_node_B.Divide2_h, &proc_control_node_B.SensorOn,
        &proc_control_node_B.Product1_j5, &proc_control_node_B.Divide_p);
      if ((proc_control_node_B.MATLABSystem_o5 == 0.0) &&
          (proc_control_node_B.Divide2_h > 0.02)) {
        proc_control_node_B.MATLABSystem_o5 = -2.0;
      }

      proc_control_node_znlmpc_getXUe(proc_control_node_B.zUB,
        proc_control_node_B.TmpSignalConversionAtTransp, proc_control_node_B.Dv,
        proc_control_node_B.useq_f, &proc_control_node_B.MATLABSystem_o6);
      if (proc_control_node_B.MATLABSystem_o5 > 0.0) {
        proc_control_node_B.i_j = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 8;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.u[proc_control_node_B.ibmat] =
            proc_control_node_B.useq_f[proc_control_node_B.i_j];
          proc_control_node_B.i_j += 11;
        }
      } else {
        memcpy(&proc_control_node_B.u[0], &proc_control_node_DW.Delay_DSTATE_a[0],
               sizeof(real_T) << 3U);
      }

      // Merge: '<S7>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S136>/Pulse Generator'

      proc_control_node_B.Merge[9] = (proc_control_node_DW.clockTickCounter_p <
        proc_control_node_P.PulseGenerator_Duty) &&
        (proc_control_node_DW.clockTickCounter_p >= 0) ?
        proc_control_node_P.PulseGenerator_Amp : 0.0;

      // DiscretePulseGenerator: '<S136>/Pulse Generator'
      if (proc_control_node_DW.clockTickCounter_p >=
          proc_control_node_P.PulseGenerator_Period - 1.0) {
        proc_control_node_DW.clockTickCounter_p = 0;
      } else {
        proc_control_node_DW.clockTickCounter_p++;
      }

      // Merge: '<S7>/Merge' incorporates:
      //   MATLAB Function: '<S216>/NLMPC'
      //   SignalConversion generated from: '<S136>/out'

      proc_control_node_B.Merge[8] = proc_control_node_B.MATLABSystem_o5;
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        proc_control_node_B.MATLABSystem_o5 =
          proc_control_node_B.u[proc_control_node_B.i_j];
        proc_control_node_B.Merge[proc_control_node_B.i_j] =
          proc_control_node_B.MATLABSystem_o5;

        // Update for Delay: '<S136>/Delay'
        proc_control_node_DW.Delay_DSTATE_a[proc_control_node_B.i_j] =
          proc_control_node_B.MATLABSystem_o5;
      }

      // End of Outputs for SubSystem: '<S7>/Quaternion Non linear MPC (Not for codegen)' 
      break;

     case 1:
      // Outputs for IfAction SubSystem: '<S7>/JoyStick OpenLoop' incorporates:
      //   ActionPort: '<S135>/Action Port'

      // SampleTimeMath: '<S213>/TSamp' incorporates:
      //   Merge: '<S9>/Merge'
      //   Selector: '<S135>/Selector'
      //
      //  About '<S213>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )

      proc_control_node_B.i_j = 0;
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
           proc_control_node_B.ibmat++) {
        proc_control_node_B.Gain3[proc_control_node_B.ibmat] =
          proc_control_node_B.y_n[proc_control_node_B.i_j + 70] *
          proc_control_node_P.TSamp_WtEt;
        proc_control_node_B.i_j += 10;
      }

      // End of SampleTimeMath: '<S213>/TSamp'

      // MATLABSystem: '<S135>/MATLAB System' incorporates:
      //   Merge: '<S9>/Merge'
      //   Selector: '<S135>/Selector'

      if (proc_control_node_DW.obj_m.k != proc_control_node_P.MATLABSystem_k) {
        proc_control_node_DW.obj_m.k = proc_control_node_P.MATLABSystem_k;
      }

      rtb_Reset_j = false;
      rtb_NewDvlMsg = true;
      proc_control_node_B.i_j = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.i_j < 48)) {
        if (!(proc_control_node_DW.obj_m.binv[proc_control_node_B.i_j] ==
              proc_control_node_P.binv[proc_control_node_B.i_j])) {
          rtb_NewDvlMsg = false;
          exitg1 = true;
        } else {
          proc_control_node_B.i_j++;
        }
      }

      if (rtb_NewDvlMsg) {
        rtb_Reset_j = true;
      }

      if (!rtb_Reset_j) {
        memcpy(&proc_control_node_DW.obj_m.binv[0], &proc_control_node_P.binv[0],
               48U * sizeof(real_T));
      }

      if (proc_control_node_DW.obj_m.mass != proc_control_node_P.physics.mass) {
        proc_control_node_DW.obj_m.mass = proc_control_node_P.physics.mass;
      }

      if (proc_control_node_DW.obj_m.volume !=
          proc_control_node_P.physics.volume) {
        proc_control_node_DW.obj_m.volume = proc_control_node_P.physics.volume;
      }

      if (proc_control_node_DW.obj_m.height !=
          proc_control_node_P.physics.height) {
        proc_control_node_DW.obj_m.height = proc_control_node_P.physics.height;
      }

      rtb_Reset_j = false;
      rtb_NewDvlMsg = true;
      proc_control_node_B.i_j = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.i_j < 9)) {
        if (!(proc_control_node_DW.obj_m.I[proc_control_node_B.i_j] ==
              proc_control_node_P.physics.I[proc_control_node_B.i_j])) {
          rtb_NewDvlMsg = false;
          exitg1 = true;
        } else {
          proc_control_node_B.i_j++;
        }
      }

      if (rtb_NewDvlMsg) {
        rtb_Reset_j = true;
      }

      if (!rtb_Reset_j) {
        memcpy(&proc_control_node_DW.obj_m.I[0], &proc_control_node_P.physics.I
               [0], 9U * sizeof(real_T));
      }

      if (!proc_control_node_isequal_b4(proc_control_node_DW.obj_m.RG,
           proc_control_node_P.physics.RG)) {
        proc_control_node_DW.obj_m.RG[0] = proc_control_node_P.physics.RG[0];
        proc_control_node_DW.obj_m.RG[1] = proc_control_node_P.physics.RG[1];
        proc_control_node_DW.obj_m.RG[2] = proc_control_node_P.physics.RG[2];
      }

      if (!proc_control_node_isequal_b4(proc_control_node_DW.obj_m.RB,
           proc_control_node_P.physics.RB)) {
        proc_control_node_DW.obj_m.RB[0] = proc_control_node_P.physics.RB[0];
        proc_control_node_DW.obj_m.RB[1] = proc_control_node_P.physics.RB[1];
        proc_control_node_DW.obj_m.RB[2] = proc_control_node_P.physics.RB[2];
      }

      if (!proc_control_node_isequal_b4n(proc_control_node_DW.obj_m.AddedMass,
           proc_control_node_P.physics.AddedMass)) {
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
             proc_control_node_B.i_j++) {
          proc_control_node_DW.obj_m.AddedMass[proc_control_node_B.i_j] =
            proc_control_node_P.physics.AddedMass[proc_control_node_B.i_j];
        }
      }

      if (!proc_control_node_isequal_b4n(proc_control_node_DW.obj_m.CDL,
           proc_control_node_P.physics.CDL)) {
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
             proc_control_node_B.i_j++) {
          proc_control_node_DW.obj_m.CDL[proc_control_node_B.i_j] =
            proc_control_node_P.physics.CDL[proc_control_node_B.i_j];
        }
      }

      if (!proc_control_node_isequal_b4n(proc_control_node_DW.obj_m.CDQ,
           proc_control_node_P.physics.CDQ)) {
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
             proc_control_node_B.i_j++) {
          proc_control_node_DW.obj_m.CDQ[proc_control_node_B.i_j] =
            proc_control_node_P.physics.CDQ[proc_control_node_B.i_j];
        }
      }

      if (!proc_control_node_isequal_b4(proc_control_node_DW.obj_m.AF,
           proc_control_node_P.physics.AF)) {
        proc_control_node_DW.obj_m.AF[0] = proc_control_node_P.physics.AF[0];
        proc_control_node_DW.obj_m.AF[1] = proc_control_node_P.physics.AF[1];
        proc_control_node_DW.obj_m.AF[2] = proc_control_node_P.physics.AF[2];
      }

      if (proc_control_node_DW.obj_m.g != proc_control_node_P.physics.g) {
        proc_control_node_DW.obj_m.g = proc_control_node_P.physics.g;
      }

      if (proc_control_node_DW.obj_m.rho != proc_control_node_P.physics.rho) {
        proc_control_node_DW.obj_m.rho = proc_control_node_P.physics.rho;
      }

      //  Implement algorithm. Calculate y as a function of input u and
      //  discrete states.
      switch (static_cast<int32_T>(proc_control_node_B.MATLABSystem_o5)) {
       case 20:
        //  Open loop avec modèle physique
        //  Construire le vecteur constantes
        proc_control_node_B.constValues[0] = proc_control_node_DW.obj_m.mass;
        proc_control_node_B.constValues[1] = proc_control_node_DW.obj_m.volume;
        proc_control_node_B.constValues[6] = proc_control_node_DW.obj_m.I[0];
        proc_control_node_B.constValues[9] = proc_control_node_DW.obj_m.I[1];
        proc_control_node_B.constValues[12] = proc_control_node_DW.obj_m.I[2];
        proc_control_node_B.constValues[15] = proc_control_node_DW.obj_m.RG[0];
        proc_control_node_B.constValues[18] = proc_control_node_DW.obj_m.RB[0];
        proc_control_node_B.constValues[7] = proc_control_node_DW.obj_m.I[3];
        proc_control_node_B.constValues[10] = proc_control_node_DW.obj_m.I[4];
        proc_control_node_B.constValues[13] = proc_control_node_DW.obj_m.I[5];
        proc_control_node_B.constValues[16] = proc_control_node_DW.obj_m.RG[1];
        proc_control_node_B.constValues[19] = proc_control_node_DW.obj_m.RB[1];
        proc_control_node_B.constValues[8] = proc_control_node_DW.obj_m.I[6];
        proc_control_node_B.constValues[11] = proc_control_node_DW.obj_m.I[7];
        proc_control_node_B.constValues[14] = proc_control_node_DW.obj_m.I[8];
        proc_control_node_B.constValues[17] = proc_control_node_DW.obj_m.RG[2];
        proc_control_node_B.constValues[20] = proc_control_node_DW.obj_m.RB[2];
        proc_control_node_B.constValues[39] = proc_control_node_DW.obj_m.rho;
        proc_control_node_B.constValues[40] = proc_control_node_DW.obj_m.g;

        // construire le vecteur state avec la imu et spaceNAV
        proc_control_node_B.TmpSignalConversionAtTransp[3] = 1.0;
        proc_control_node_B.TmpSignalConversionAtTransp[4] = 0.0;
        proc_control_node_B.TmpSignalConversionAtTransp[5] = 0.0;
        proc_control_node_B.TmpSignalConversionAtTransp[6] = 0.0;
        proc_control_node_B.i_j = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.constValues[proc_control_node_B.ibmat + 21] =
            proc_control_node_DW.obj_m.CDL[proc_control_node_B.ibmat];
          proc_control_node_B.constValues[proc_control_node_B.ibmat + 27] =
            proc_control_node_DW.obj_m.CDQ[proc_control_node_B.ibmat];
          proc_control_node_B.constValues[proc_control_node_B.ibmat + 33] =
            proc_control_node_DW.obj_m.AddedMass[proc_control_node_B.ibmat];
          proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.ibmat
            + 7] = proc_control_node_B.y_n[proc_control_node_B.i_j + 70];
          proc_control_node_B.i_j += 10;
        }

        // [0;0;0;mo(4:7);ref.'];;
        //  Déterminer les matrices du modèle physique
        // AUVMODELMATRICES
        //     [M,C,D,GQ] = AUVMODELMATRICES(IN1,IN2)
        //     This function was generated by the Symbolic Math Toolbox version 8.7. 
        //     18-Nov-2021 21:30:11
        proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.constValues[6]
          * proc_control_node_B.TmpSignalConversionAtTransp[10];
        proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.constValues[9]
          * proc_control_node_B.TmpSignalConversionAtTransp[10];
        proc_control_node_B.epsilon =
          proc_control_node_B.TmpSignalConversionAtTransp[10] *
          proc_control_node_B.constValues[12];
        proc_control_node_B.Divide1_n = proc_control_node_B.constValues[7] *
          proc_control_node_B.TmpSignalConversionAtTransp[11];
        proc_control_node_B.Divide2_h = proc_control_node_B.constValues[10] *
          proc_control_node_B.TmpSignalConversionAtTransp[11];
        proc_control_node_B.SensorOn =
          proc_control_node_B.TmpSignalConversionAtTransp[11] *
          proc_control_node_B.constValues[13];
        proc_control_node_B.Product1_j5 = proc_control_node_B.constValues[8] *
          proc_control_node_B.TmpSignalConversionAtTransp[12];
        proc_control_node_B.Divide_p = proc_control_node_B.constValues[11] *
          proc_control_node_B.TmpSignalConversionAtTransp[12];
        proc_control_node_B.WhiteNoise =
          proc_control_node_B.TmpSignalConversionAtTransp[12] *
          proc_control_node_B.constValues[14];
        proc_control_node_B.t11 =
          proc_control_node_B.TmpSignalConversionAtTransp[10] *
          proc_control_node_B.constValues[36];
        proc_control_node_B.t12 =
          proc_control_node_B.TmpSignalConversionAtTransp[11] *
          proc_control_node_B.constValues[37];
        proc_control_node_B.t13 = proc_control_node_B.constValues[0] *
          proc_control_node_B.constValues[15];
        proc_control_node_B.t14 = proc_control_node_B.constValues[0] *
          proc_control_node_B.constValues[16];
        proc_control_node_B.d_h = proc_control_node_B.constValues[0] *
          proc_control_node_B.constValues[17];
        proc_control_node_B.scale =
          proc_control_node_B.TmpSignalConversionAtTransp[12] *
          proc_control_node_B.constValues[38];
        proc_control_node_B.t17 =
          proc_control_node_B.TmpSignalConversionAtTransp[10] *
          proc_control_node_B.constValues[15];
        proc_control_node_B.t21 =
          proc_control_node_B.TmpSignalConversionAtTransp[11] *
          proc_control_node_B.constValues[16];
        proc_control_node_B.absxk =
          proc_control_node_B.TmpSignalConversionAtTransp[12] *
          proc_control_node_B.constValues[17];
        proc_control_node_B.Product1_j5_b =
          proc_control_node_B.TmpSignalConversionAtTransp[7] *
          proc_control_node_B.constValues[33];
        proc_control_node_B.Product2_gc =
          proc_control_node_B.TmpSignalConversionAtTransp[8] *
          proc_control_node_B.constValues[34];
        proc_control_node_B.fcn1_k =
          proc_control_node_B.TmpSignalConversionAtTransp[9] *
          proc_control_node_B.constValues[35];
        proc_control_node_B.fcn2 = proc_control_node_B.constValues[1] *
          proc_control_node_B.constValues[39];
        proc_control_node_B.Divide3 =
          proc_control_node_B.TmpSignalConversionAtTransp[5] *
          proc_control_node_B.TmpSignalConversionAtTransp[6];
        proc_control_node_B.q0_tmp =
          proc_control_node_B.TmpSignalConversionAtTransp[3] *
          proc_control_node_B.TmpSignalConversionAtTransp[4];
        proc_control_node_B.Product8 = proc_control_node_B.Divide3 * 2.0 +
          proc_control_node_B.q0_tmp * 2.0;
        proc_control_node_B.t56 =
          (proc_control_node_B.TmpSignalConversionAtTransp[11] *
           proc_control_node_B.constValues[17] +
           proc_control_node_B.TmpSignalConversionAtTransp[7]) *
          proc_control_node_B.constValues[0];
        proc_control_node_B.t57 =
          (proc_control_node_B.TmpSignalConversionAtTransp[10] *
           proc_control_node_B.constValues[16] +
           proc_control_node_B.TmpSignalConversionAtTransp[9]) *
          proc_control_node_B.constValues[0];
        proc_control_node_B.t58 =
          (proc_control_node_B.TmpSignalConversionAtTransp[12] *
           proc_control_node_B.constValues[15] +
           proc_control_node_B.TmpSignalConversionAtTransp[8]) *
          proc_control_node_B.constValues[0];
        proc_control_node_B.t62 = (proc_control_node_B.t17 +
          proc_control_node_B.t21) * proc_control_node_B.constValues[0];
        proc_control_node_B.t17 = (proc_control_node_B.t17 +
          proc_control_node_B.absxk) * proc_control_node_B.constValues[0];
        proc_control_node_B.t21 = (proc_control_node_B.t21 +
          proc_control_node_B.absxk) * proc_control_node_B.constValues[0];
        proc_control_node_B.rtb_Gain_f_idx_1 =
          proc_control_node_B.TmpSignalConversionAtTransp[4] *
          proc_control_node_B.TmpSignalConversionAtTransp[6];
        proc_control_node_B.t25_tmp =
          proc_control_node_B.TmpSignalConversionAtTransp[3] *
          proc_control_node_B.TmpSignalConversionAtTransp[5];
        proc_control_node_B.absxk = proc_control_node_B.rtb_Gain_f_idx_1 * 2.0 +
          -(proc_control_node_B.t25_tmp * 2.0);
        proc_control_node_B.t =
          (proc_control_node_B.TmpSignalConversionAtTransp[4] *
           proc_control_node_B.TmpSignalConversionAtTransp[4] * 2.0 +
           proc_control_node_B.TmpSignalConversionAtTransp[5] *
           proc_control_node_B.TmpSignalConversionAtTransp[5] * 2.0) - 1.0;

        //  CAlculer la comande
        proc_control_node_B.pp_coefs[0] = -proc_control_node_B.constValues[33] +
          proc_control_node_B.constValues[0];
        proc_control_node_B.pp_coefs[1] = 0.0;
        proc_control_node_B.pp_coefs[2] = 0.0;
        proc_control_node_B.pp_coefs[3] = 0.0;
        proc_control_node_B.pp_coefs[4] = proc_control_node_B.d_h;
        proc_control_node_B.pp_coefs[5] = -proc_control_node_B.t14;
        proc_control_node_B.pp_coefs[6] = 0.0;
        proc_control_node_B.pp_coefs[7] = -proc_control_node_B.constValues[34] +
          proc_control_node_B.constValues[0];
        proc_control_node_B.pp_coefs[8] = 0.0;
        proc_control_node_B.pp_coefs[9] = -proc_control_node_B.d_h;
        proc_control_node_B.pp_coefs[10] = 0.0;
        proc_control_node_B.pp_coefs[11] = proc_control_node_B.t13;
        proc_control_node_B.pp_coefs[12] = 0.0;
        proc_control_node_B.pp_coefs[13] = 0.0;
        proc_control_node_B.pp_coefs[14] = -proc_control_node_B.constValues[35]
          + proc_control_node_B.constValues[0];
        proc_control_node_B.pp_coefs[15] = proc_control_node_B.t14;
        proc_control_node_B.pp_coefs[16] = -proc_control_node_B.t13;
        proc_control_node_B.pp_coefs[17] = 0.0;
        proc_control_node_B.pp_coefs[18] = 0.0;
        proc_control_node_B.pp_coefs[19] = -proc_control_node_B.d_h;
        proc_control_node_B.pp_coefs[20] = proc_control_node_B.t14;
        proc_control_node_B.pp_coefs[21] = proc_control_node_B.constValues[6] -
          proc_control_node_B.constValues[36];
        proc_control_node_B.pp_coefs[22] = proc_control_node_B.constValues[9];
        proc_control_node_B.pp_coefs[23] = proc_control_node_B.constValues[12];
        proc_control_node_B.pp_coefs[24] = proc_control_node_B.d_h;
        proc_control_node_B.pp_coefs[25] = 0.0;
        proc_control_node_B.pp_coefs[26] = -proc_control_node_B.t13;
        proc_control_node_B.pp_coefs[27] = proc_control_node_B.constValues[7];
        proc_control_node_B.pp_coefs[28] = proc_control_node_B.constValues[10] -
          proc_control_node_B.constValues[37];
        proc_control_node_B.pp_coefs[29] = proc_control_node_B.constValues[13];
        proc_control_node_B.pp_coefs[30] = -proc_control_node_B.t14;
        proc_control_node_B.pp_coefs[31] = proc_control_node_B.t13;
        proc_control_node_B.pp_coefs[32] = 0.0;
        proc_control_node_B.pp_coefs[33] = proc_control_node_B.constValues[8];
        proc_control_node_B.pp_coefs[34] = proc_control_node_B.constValues[11];
        proc_control_node_B.pp_coefs[35] = proc_control_node_B.constValues[14] -
          proc_control_node_B.constValues[38];

        // Sum: '<S213>/Diff' incorporates:
        //   Merge: '<S9>/Merge'
        //   SampleTimeMath: '<S213>/TSamp'
        //   Selector: '<S135>/Selector'
        //   UnitDelay: '<S213>/UD'
        //
        //  About '<S213>/TSamp':
        //   y = u * K where K = 1 / ( w * Ts )
        //
        //  Block description for '<S213>/Diff':
        //
        //   Add in CPU
        //
        //  Block description for '<S213>/UD':
        //
        //   Store in Global RAM

        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
             proc_control_node_B.i_j++) {
          proc_control_node_B.rtb_Gain3_j[proc_control_node_B.i_j] =
            proc_control_node_B.Gain3[proc_control_node_B.i_j] -
            proc_control_node_DW.UD_DSTATE[proc_control_node_B.i_j];
        }

        // End of Sum: '<S213>/Diff'
        proc_control_node_B.dCoefs[0] = 0.0;
        proc_control_node_B.dCoefs[1] = 0.0;
        proc_control_node_B.dCoefs[2] = 0.0;
        proc_control_node_B.dCoefs[3] = -proc_control_node_B.t21;
        proc_control_node_B.d_o =
          proc_control_node_B.TmpSignalConversionAtTransp[11] *
          proc_control_node_B.constValues[15] -
          proc_control_node_B.TmpSignalConversionAtTransp[9];
        proc_control_node_B.dCoefs[4] = proc_control_node_B.d_o *
          proc_control_node_B.constValues[0] + proc_control_node_B.fcn1_k;
        proc_control_node_B.dCoefs[5] = -proc_control_node_B.Product2_gc +
          proc_control_node_B.t58;
        proc_control_node_B.dCoefs[6] = 0.0;
        proc_control_node_B.dCoefs[7] = 0.0;
        proc_control_node_B.dCoefs[8] = 0.0;
        proc_control_node_B.dCoefs[9] = -proc_control_node_B.fcn1_k +
          proc_control_node_B.t57;
        proc_control_node_B.dCoefs[10] = -proc_control_node_B.t17;
        proc_control_node_B.d2 =
          proc_control_node_B.TmpSignalConversionAtTransp[12] *
          proc_control_node_B.constValues[16] -
          proc_control_node_B.TmpSignalConversionAtTransp[7];
        proc_control_node_B.dCoefs[11] = proc_control_node_B.d2 *
          proc_control_node_B.constValues[0] + proc_control_node_B.Product1_j5_b;
        proc_control_node_B.dCoefs[12] = 0.0;
        proc_control_node_B.dCoefs[13] = 0.0;
        proc_control_node_B.dCoefs[14] = 0.0;
        proc_control_node_B.d1 =
          proc_control_node_B.TmpSignalConversionAtTransp[10] *
          proc_control_node_B.constValues[17] -
          proc_control_node_B.TmpSignalConversionAtTransp[8];
        proc_control_node_B.dCoefs[15] = proc_control_node_B.d1 *
          proc_control_node_B.constValues[0] + proc_control_node_B.Product2_gc;
        proc_control_node_B.dCoefs[16] = -proc_control_node_B.Product1_j5_b +
          proc_control_node_B.t56;
        proc_control_node_B.dCoefs[17] = -proc_control_node_B.t62;
        proc_control_node_B.dCoefs[18] = proc_control_node_B.t21;
        proc_control_node_B.dCoefs[19] = proc_control_node_B.fcn1_k -
          proc_control_node_B.t57;
        proc_control_node_B.dCoefs[20] = proc_control_node_B.d1 *
          -proc_control_node_B.constValues[0] + -proc_control_node_B.Product2_gc;
        proc_control_node_B.dCoefs[21] = 0.0;
        proc_control_node_B.dCoefs[22] = ((-proc_control_node_B.epsilon -
          proc_control_node_B.SensorOn) - proc_control_node_B.WhiteNoise) +
          proc_control_node_B.scale;
        proc_control_node_B.dCoefs[23] = ((proc_control_node_B.MATLABSystem_o6 +
          proc_control_node_B.Divide2_h) + proc_control_node_B.Divide_p) -
          proc_control_node_B.t12;
        proc_control_node_B.dCoefs[24] = proc_control_node_B.d_o *
          -proc_control_node_B.constValues[0] + -proc_control_node_B.fcn1_k;
        proc_control_node_B.dCoefs[25] = proc_control_node_B.t17;
        proc_control_node_B.dCoefs[26] = proc_control_node_B.Product1_j5_b -
          proc_control_node_B.t56;
        proc_control_node_B.dCoefs[27] = ((proc_control_node_B.epsilon +
          proc_control_node_B.SensorOn) + proc_control_node_B.WhiteNoise) -
          proc_control_node_B.scale;
        proc_control_node_B.dCoefs[28] = 0.0;
        proc_control_node_B.dCoefs[29] = ((-proc_control_node_B.MATLABSystem_o5
          - proc_control_node_B.Divide1_n) - proc_control_node_B.Product1_j5) +
          proc_control_node_B.t11;
        proc_control_node_B.dCoefs[30] = proc_control_node_B.Product2_gc -
          proc_control_node_B.t58;
        proc_control_node_B.dCoefs[31] = proc_control_node_B.d2 *
          -proc_control_node_B.constValues[0] +
          -proc_control_node_B.Product1_j5_b;
        proc_control_node_B.dCoefs[32] = proc_control_node_B.t62;
        proc_control_node_B.dCoefs[33] = ((-proc_control_node_B.MATLABSystem_o6
          - proc_control_node_B.Divide2_h) - proc_control_node_B.Divide_p) +
          proc_control_node_B.t12;
        proc_control_node_B.dCoefs[34] = ((proc_control_node_B.MATLABSystem_o5 +
          proc_control_node_B.Divide1_n) + proc_control_node_B.Product1_j5) -
          proc_control_node_B.t11;
        proc_control_node_B.dCoefs[35] = 0.0;
        proc_control_node_B.constValues_g[0] = proc_control_node_B.constValues
          [27] * fabs(proc_control_node_B.TmpSignalConversionAtTransp[7]) +
          proc_control_node_B.constValues[21];
        proc_control_node_B.constValues_g[1] = 0.0;
        proc_control_node_B.constValues_g[2] = 0.0;
        proc_control_node_B.constValues_g[3] = 0.0;
        proc_control_node_B.constValues_g[4] = 0.0;
        proc_control_node_B.constValues_g[5] = 0.0;
        proc_control_node_B.constValues_g[6] = 0.0;
        proc_control_node_B.constValues_g[7] = proc_control_node_B.constValues
          [28] * fabs(proc_control_node_B.TmpSignalConversionAtTransp[8]) +
          proc_control_node_B.constValues[22];
        proc_control_node_B.constValues_g[8] = 0.0;
        proc_control_node_B.constValues_g[9] = 0.0;
        proc_control_node_B.constValues_g[10] = 0.0;
        proc_control_node_B.constValues_g[11] = 0.0;
        proc_control_node_B.constValues_g[12] = 0.0;
        proc_control_node_B.constValues_g[13] = 0.0;
        proc_control_node_B.constValues_g[14] = proc_control_node_B.constValues
          [29] * fabs(proc_control_node_B.TmpSignalConversionAtTransp[9]) +
          proc_control_node_B.constValues[23];
        proc_control_node_B.constValues_g[15] = 0.0;
        proc_control_node_B.constValues_g[16] = 0.0;
        proc_control_node_B.constValues_g[17] = 0.0;
        proc_control_node_B.constValues_g[18] = 0.0;
        proc_control_node_B.constValues_g[19] = 0.0;
        proc_control_node_B.constValues_g[20] = 0.0;
        proc_control_node_B.constValues_g[21] = proc_control_node_B.constValues
          [30] * fabs(proc_control_node_B.TmpSignalConversionAtTransp[10]) +
          proc_control_node_B.constValues[24];
        proc_control_node_B.constValues_g[22] = 0.0;
        proc_control_node_B.constValues_g[23] = 0.0;
        proc_control_node_B.constValues_g[24] = 0.0;
        proc_control_node_B.constValues_g[25] = 0.0;
        proc_control_node_B.constValues_g[26] = 0.0;
        proc_control_node_B.constValues_g[27] = 0.0;
        proc_control_node_B.constValues_g[28] = proc_control_node_B.constValues
          [31] * fabs(proc_control_node_B.TmpSignalConversionAtTransp[11]) +
          proc_control_node_B.constValues[25];
        proc_control_node_B.constValues_g[29] = 0.0;
        proc_control_node_B.constValues_g[30] = 0.0;
        proc_control_node_B.constValues_g[31] = 0.0;
        proc_control_node_B.constValues_g[32] = 0.0;
        proc_control_node_B.constValues_g[33] = 0.0;
        proc_control_node_B.constValues_g[34] = 0.0;
        proc_control_node_B.constValues_g[35] = proc_control_node_B.constValues
          [32] * fabs(proc_control_node_B.TmpSignalConversionAtTransp[12]) +
          proc_control_node_B.constValues[26];
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 36;
             proc_control_node_B.i_j++) {
          proc_control_node_B.dv16[proc_control_node_B.i_j] =
            proc_control_node_B.dCoefs[proc_control_node_B.i_j] +
            proc_control_node_B.constValues_g[proc_control_node_B.i_j];
        }

        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
             proc_control_node_B.i_j++) {
          proc_control_node_B.a__4[proc_control_node_B.i_j] = 0.0;
        }

        proc_control_node_B.ibmat = 0;
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 6;
             proc_control_node_B.coffset++) {
          for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
               proc_control_node_B.i_j++) {
            proc_control_node_B.a__4[proc_control_node_B.i_j] +=
              proc_control_node_B.pp_coefs[proc_control_node_B.i_j +
              proc_control_node_B.ibmat] *
              proc_control_node_B.rtb_Gain3_j[proc_control_node_B.coffset];
          }

          proc_control_node_B.Gain_fn[proc_control_node_B.coffset] = 0.0;
          proc_control_node_B.ibmat += 6;
        }

        proc_control_node_B.i_j = 0;
        proc_control_node_B.ibmat = 0;
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 6;
             proc_control_node_B.coffset++) {
          for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 6;
               proc_control_node_B.aoffset++) {
            proc_control_node_B.Gain_fn[proc_control_node_B.aoffset] +=
              proc_control_node_B.dv16[proc_control_node_B.aoffset +
              proc_control_node_B.i_j] *
              proc_control_node_B.y_n[proc_control_node_B.ibmat + 70];
          }

          proc_control_node_B.i_j += 6;
          proc_control_node_B.ibmat += 10;
        }

        proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.constValues[40]
          * (proc_control_node_B.constValues[0] + -proc_control_node_B.fcn2);
        proc_control_node_B.rtb_Gain3_j[0] =
          (proc_control_node_B.rtb_Gain_f_idx_1 - proc_control_node_B.t25_tmp) *
          proc_control_node_B.MATLABSystem_o5 * -2.0;
        proc_control_node_B.rtb_Gain3_j[1] = (proc_control_node_B.Divide3 +
          proc_control_node_B.q0_tmp) * proc_control_node_B.MATLABSystem_o5 *
          -2.0;
        proc_control_node_B.rtb_Gain3_j[2] = proc_control_node_B.MATLABSystem_o5
          * proc_control_node_B.t;
        proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.constValues[20]
          * proc_control_node_B.constValues[40];
        proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.constValues[40]
          * proc_control_node_B.t14;
        proc_control_node_B.epsilon = proc_control_node_B.constValues[19] *
          proc_control_node_B.constValues[40] * -proc_control_node_B.fcn2;
        proc_control_node_B.rtb_Gain3_j[3] = ((proc_control_node_B.constValues
          [40] * proc_control_node_B.d_h * proc_control_node_B.Product8 +
          proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.t) +
          proc_control_node_B.MATLABSystem_o5 * -proc_control_node_B.fcn2 *
          proc_control_node_B.Product8) + proc_control_node_B.epsilon *
          proc_control_node_B.t;
        proc_control_node_B.Divide1_n = proc_control_node_B.constValues[40] *
          -proc_control_node_B.t13;
        proc_control_node_B.Divide2_h = proc_control_node_B.constValues[18] *
          proc_control_node_B.constValues[40] * proc_control_node_B.fcn2;
        proc_control_node_B.rtb_Gain3_j[4] = ((proc_control_node_B.Divide1_n *
          proc_control_node_B.t + proc_control_node_B.constValues[40] *
          -proc_control_node_B.d_h * proc_control_node_B.absxk) +
          proc_control_node_B.Divide2_h * proc_control_node_B.t) +
          proc_control_node_B.MATLABSystem_o5 * proc_control_node_B.fcn2 *
          proc_control_node_B.absxk;
        proc_control_node_B.rtb_Gain3_j[5] =
          ((proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.absxk +
            proc_control_node_B.Divide1_n * proc_control_node_B.Product8) +
           proc_control_node_B.Divide2_h * proc_control_node_B.Product8) +
          proc_control_node_B.epsilon * proc_control_node_B.absxk;
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
             proc_control_node_B.i_j++) {
          proc_control_node_B.constValues_k[proc_control_node_B.i_j] =
            (proc_control_node_B.a__4[proc_control_node_B.i_j] +
             proc_control_node_B.Gain_fn[proc_control_node_B.i_j]) +
            proc_control_node_B.rtb_Gain3_j[proc_control_node_B.i_j];
        }

        memset(&proc_control_node_B.u[0], 0, sizeof(real_T) << 3U);
        proc_control_node_B.ibmat = 0;
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 6;
             proc_control_node_B.coffset++) {
          for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
               proc_control_node_B.i_j++) {
            proc_control_node_B.u[proc_control_node_B.i_j] +=
              proc_control_node_DW.obj_m.binv[proc_control_node_B.i_j +
              proc_control_node_B.ibmat] *
              proc_control_node_B.constValues_k[proc_control_node_B.coffset];
          }

          proc_control_node_B.ibmat += 8;
        }
        break;

       case 21:
        //  Open loop matrice b invese directe
        memset(&proc_control_node_B.u_scale_e[0], 0, sizeof(real_T) << 3U);
        proc_control_node_B.ibmat = 0;
        proc_control_node_B.coffset = 0;
        for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 6;
             proc_control_node_B.aoffset++) {
          for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
               proc_control_node_B.i_j++) {
            proc_control_node_B.u_scale_e[proc_control_node_B.i_j] +=
              proc_control_node_DW.obj_m.binv[proc_control_node_B.i_j +
              proc_control_node_B.ibmat] *
              proc_control_node_B.y_n[proc_control_node_B.coffset + 70];
          }

          proc_control_node_B.ibmat += 8;
          proc_control_node_B.coffset += 10;
        }

        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
             proc_control_node_B.i_j++) {
          proc_control_node_B.u[proc_control_node_B.i_j] =
            proc_control_node_B.u_scale_e[proc_control_node_B.i_j] *
            proc_control_node_DW.obj_m.k;
        }
        break;

       default:
        memset(&proc_control_node_B.u[0], 0, sizeof(real_T) << 3U);
        break;
      }

      // Merge: '<S7>/Merge' incorporates:
      //   Constant: '<S135>/Constant'
      //   Constant: '<S135>/Constant1'
      //   MATLABSystem: '<S135>/MATLAB System'
      //   SignalConversion generated from: '<S135>/out'

      memcpy(&proc_control_node_B.Merge[0], &proc_control_node_B.u[0], sizeof
             (real_T) << 3U);
      proc_control_node_B.Merge[8] = proc_control_node_P.Constant_Value_d1;
      proc_control_node_B.Merge[9] = proc_control_node_P.Constant1_Value_p;

      // Update for UnitDelay: '<S213>/UD' incorporates:
      //   SampleTimeMath: '<S213>/TSamp'
      //
      //  About '<S213>/TSamp':
      //   y = u * K where K = 1 / ( w * Ts )
      //
      //  Block description for '<S213>/UD':
      //
      //   Store in Global RAM

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
           proc_control_node_B.i_j++) {
        proc_control_node_DW.UD_DSTATE[proc_control_node_B.i_j] =
          proc_control_node_B.Gain3[proc_control_node_B.i_j];
      }

      // End of Update for UnitDelay: '<S213>/UD'
      // End of Outputs for SubSystem: '<S7>/JoyStick OpenLoop'
      break;

     case 2:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S7>/Adaptive MPC Euler ' incorporates:
        //   ActionPort: '<S132>/Action Port'

        // InitializeConditions for SwitchCase: '<S7>/Switch Case' incorporates:
        //   Delay: '<S132>/Delay1'
        //   DiscretePulseGenerator: '<S132>/Pulse Generator'
        //   Memory: '<S141>/LastPcov'
        //   Memory: '<S141>/last_x'
        //   UnitDelay: '<S141>/last_mv'

        memcpy(&proc_control_node_DW.LastPcov_PreviousInput_n[0],
               &proc_control_node_P.LastPcov_InitialCondition[0], 400U * sizeof
               (real_T));
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 48;
             proc_control_node_B.i_j++) {
          // InitializeConditions for Memory: '<S141>/Memory'
          proc_control_node_DW.Memory_PreviousInput_h[proc_control_node_B.i_j] =
            proc_control_node_P.Memory_InitialCondition[proc_control_node_B.i_j];
        }

        memcpy(&proc_control_node_DW.last_mv_DSTATE_j[0],
               &proc_control_node_P.last_mv_InitialCondition[0], sizeof(real_T) <<
               3U);
        memcpy(&proc_control_node_DW.last_x_PreviousInput[0],
               &proc_control_node_P.last_x_InitialCondition[0], 20U * sizeof
               (real_T));
        memcpy(&proc_control_node_DW.Delay1_DSTATE_c[0],
               &proc_control_node_P.Delay1_InitialCondition[0], sizeof(real_T) <<
               3U);
        proc_control_node_DW.clockTickCounter_h = 0;

        // End of InitializeConditions for SubSystem: '<S7>/Adaptive MPC Euler ' 
      }

      // Outputs for IfAction SubSystem: '<S7>/Adaptive MPC Euler ' incorporates:
      //   ActionPort: '<S132>/Action Port'

      // Sqrt: '<S178>/sqrt' incorporates:
      //   Product: '<S179>/Product'
      //   Product: '<S179>/Product1'
      //   Product: '<S179>/Product2'
      //   Product: '<S179>/Product3'
      //   Sum: '<S179>/Sum'

      proc_control_node_B.MATLABSystem_o5 = sqrt(((proc_control_node_B.qS2W[0] *
        proc_control_node_B.qS2W[0] + proc_control_node_B.qS2W[1] *
        proc_control_node_B.qS2W[1]) + proc_control_node_B.qS2W[2] *
        proc_control_node_B.qS2W[2]) + proc_control_node_B.qS2W[3] *
        proc_control_node_B.qS2W[3]);

      // Product: '<S173>/Product'
      proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.qS2W[0] /
        proc_control_node_B.MATLABSystem_o5;

      // Product: '<S173>/Product1'
      proc_control_node_B.epsilon = proc_control_node_B.qS2W[1] /
        proc_control_node_B.MATLABSystem_o5;

      // Product: '<S173>/Product2'
      proc_control_node_B.Divide1_n = proc_control_node_B.qS2W[2] /
        proc_control_node_B.MATLABSystem_o5;

      // Product: '<S173>/Product3'
      proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.qS2W[3] /
        proc_control_node_B.MATLABSystem_o5;

      // Fcn: '<S171>/fcn2' incorporates:
      //   Fcn: '<S171>/fcn5'

      proc_control_node_B.Product8 = proc_control_node_B.epsilon *
        proc_control_node_B.epsilon;
      proc_control_node_B.scale = proc_control_node_B.Divide1_n *
        proc_control_node_B.Divide1_n;
      proc_control_node_B.Product1_j5_b = proc_control_node_B.MATLABSystem_o5 *
        proc_control_node_B.MATLABSystem_o5;

      // Trigonometry: '<S172>/Trigonometric Function1' incorporates:
      //   Fcn: '<S171>/fcn1'
      //   Fcn: '<S171>/fcn2'

      proc_control_node_B.u2[0] = rt_atan2d_snf((proc_control_node_B.epsilon *
        proc_control_node_B.Divide1_n + proc_control_node_B.MATLABSystem_o6 *
        proc_control_node_B.MATLABSystem_o5) * 2.0,
        ((proc_control_node_B.MATLABSystem_o6 *
          proc_control_node_B.MATLABSystem_o6 + proc_control_node_B.Product8) -
         proc_control_node_B.scale) - proc_control_node_B.Product1_j5_b);

      // Fcn: '<S171>/fcn3'
      proc_control_node_B.Divide2_h = (proc_control_node_B.epsilon *
        proc_control_node_B.MATLABSystem_o5 -
        proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.Divide1_n) *
        -2.0;

      // If: '<S174>/If' incorporates:
      //   Constant: '<S175>/Constant'
      //   Constant: '<S176>/Constant'

      if (proc_control_node_B.Divide2_h > 1.0) {
        proc_control_node_B.Divide2_h = proc_control_node_P.Constant_Value_lp;
      } else if (proc_control_node_B.Divide2_h < -1.0) {
        proc_control_node_B.Divide2_h = proc_control_node_P.Constant_Value_du;
      }

      // End of If: '<S174>/If'

      // Trigonometry: '<S172>/trigFcn'
      if (proc_control_node_B.Divide2_h > 1.0) {
        proc_control_node_B.Divide2_h = 1.0;
      } else if (proc_control_node_B.Divide2_h < -1.0) {
        proc_control_node_B.Divide2_h = -1.0;
      }

      proc_control_node_B.u2[1] = asin(proc_control_node_B.Divide2_h);

      // End of Trigonometry: '<S172>/trigFcn'

      // Trigonometry: '<S172>/Trigonometric Function3' incorporates:
      //   Fcn: '<S171>/fcn4'
      //   Fcn: '<S171>/fcn5'

      proc_control_node_B.u2[2] = rt_atan2d_snf((proc_control_node_B.Divide1_n *
        proc_control_node_B.MATLABSystem_o5 +
        proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.epsilon) * 2.0,
        ((proc_control_node_B.MATLABSystem_o6 *
          proc_control_node_B.MATLABSystem_o6 - proc_control_node_B.Product8) -
         proc_control_node_B.scale) + proc_control_node_B.Product1_j5_b);

      // MATLAB Function: '<S132>/MATLAB Function' incorporates:
      //   Merge: '<S9>/Merge'

      memset(&proc_control_node_B.y_h_n[0], 0, 120U * sizeof(real_T));
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 10;
           proc_control_node_B.ibmat++) {
        proc_control_node_B.y_h_n[proc_control_node_B.ibmat] =
          proc_control_node_B.y_n[proc_control_node_B.ibmat];
        proc_control_node_B.y_h_n[proc_control_node_B.ibmat + 10] =
          proc_control_node_B.y_n[proc_control_node_B.ibmat + 10];
        proc_control_node_B.y_h_n[proc_control_node_B.ibmat + 20] =
          proc_control_node_B.y_n[proc_control_node_B.ibmat + 20];
        proc_control_node_B.Product1_j5_b =
          proc_control_node_B.y_n[proc_control_node_B.ibmat + 30];
        proc_control_node_B.MATLABSystem_o6 =
          proc_control_node_B.y_n[proc_control_node_B.ibmat + 40];
        proc_control_node_B.epsilon =
          proc_control_node_B.y_n[proc_control_node_B.ibmat + 50];
        proc_control_node_B.Divide1_n =
          proc_control_node_B.y_n[proc_control_node_B.ibmat + 60];
        proc_control_node_B.MATLABSystem_o5 = 1.0 / sqrt
          (((proc_control_node_B.Product1_j5_b *
             proc_control_node_B.Product1_j5_b +
             proc_control_node_B.MATLABSystem_o6 *
             proc_control_node_B.MATLABSystem_o6) + proc_control_node_B.epsilon *
            proc_control_node_B.epsilon) + proc_control_node_B.Divide1_n *
           proc_control_node_B.Divide1_n);
        proc_control_node_B.rq[0] = proc_control_node_B.Product1_j5_b *
          proc_control_node_B.MATLABSystem_o5;
        proc_control_node_B.rq[1] = proc_control_node_B.MATLABSystem_o6 *
          proc_control_node_B.MATLABSystem_o5;
        proc_control_node_B.rq[2] = proc_control_node_B.epsilon *
          proc_control_node_B.MATLABSystem_o5;
        proc_control_node_B.rq[3] = proc_control_node_B.Divide1_n *
          proc_control_node_B.MATLABSystem_o5;
        proc_control_node_B.epsilon = (proc_control_node_B.rq[1] *
          proc_control_node_B.rq[3] - proc_control_node_B.rq[0] *
          proc_control_node_B.rq[2]) * -2.0;
        if (proc_control_node_B.epsilon > 1.0) {
          proc_control_node_B.epsilon = 1.0;
        }

        proc_control_node_B.scale = proc_control_node_B.epsilon;
        if (proc_control_node_B.epsilon < -1.0) {
          proc_control_node_B.scale = -1.0;
        }

        proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.rq[0] *
          proc_control_node_B.rq[0];
        proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.rq[1] *
          proc_control_node_B.rq[1];
        proc_control_node_B.epsilon = proc_control_node_B.rq[2] *
          proc_control_node_B.rq[2];
        proc_control_node_B.Divide1_n = proc_control_node_B.rq[3] *
          proc_control_node_B.rq[3];
        proc_control_node_B.y_h_n[proc_control_node_B.ibmat + 30] =
          rt_atan2d_snf((proc_control_node_B.rq[2] * proc_control_node_B.rq[3] +
                         proc_control_node_B.rq[0] * proc_control_node_B.rq[1]) *
                        2.0, ((proc_control_node_B.MATLABSystem_o5 -
          proc_control_node_B.MATLABSystem_o6) - proc_control_node_B.epsilon) +
                        proc_control_node_B.Divide1_n);
        proc_control_node_B.y_h_n[proc_control_node_B.ibmat + 40] = asin
          (proc_control_node_B.scale);
        proc_control_node_B.y_h_n[proc_control_node_B.ibmat + 50] =
          rt_atan2d_snf((proc_control_node_B.rq[1] * proc_control_node_B.rq[2] +
                         proc_control_node_B.rq[0] * proc_control_node_B.rq[3]) *
                        2.0, ((proc_control_node_B.MATLABSystem_o5 +
          proc_control_node_B.MATLABSystem_o6) - proc_control_node_B.epsilon) -
                        proc_control_node_B.Divide1_n);
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
             proc_control_node_B.i_j++) {
          proc_control_node_B.y_h_n[proc_control_node_B.ibmat + 10 *
            (proc_control_node_B.i_j + 6)] = proc_control_node_B.y_n
            [(proc_control_node_B.i_j + 7) * 10 + proc_control_node_B.ibmat];
        }
      }

      // End of MATLAB Function: '<S132>/MATLAB Function'

      // SignalConversion generated from: '<S140>/ SFunction ' incorporates:
      //   MATLAB Function: '<S132>/MATLAB Function2'

      proc_control_node_B.TmpSignalConversionAtSFun_p[3] =
        proc_control_node_B.u2[2];
      proc_control_node_B.TmpSignalConversionAtSFun_p[4] =
        proc_control_node_B.u2[1];
      proc_control_node_B.TmpSignalConversionAtSFun_p[5] =
        proc_control_node_B.u2[0];
      proc_control_node_B.TmpSignalConversionAtSFun_p[0] =
        proc_control_node_B.WorldPosition[0];
      proc_control_node_B.TmpSignalConversionAtSFun_p[6] =
        proc_control_node_B.BodyVelocity[0];
      proc_control_node_B.TmpSignalConversionAtSFun_p[9] =
        proc_control_node_B.AngularRate[0];
      proc_control_node_B.TmpSignalConversionAtSFun_p[1] =
        proc_control_node_B.WorldPosition[1];
      proc_control_node_B.TmpSignalConversionAtSFun_p[7] =
        proc_control_node_B.BodyVelocity[1];
      proc_control_node_B.TmpSignalConversionAtSFun_p[10] =
        proc_control_node_B.AngularRate[1];
      proc_control_node_B.TmpSignalConversionAtSFun_p[2] =
        proc_control_node_B.WorldPosition[2];
      proc_control_node_B.TmpSignalConversionAtSFun_p[8] =
        proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.TmpSignalConversionAtSFun_p[11] =
        proc_control_node_B.AngularRate[2];

      // MATLAB Function: '<S132>/MATLAB Function2' incorporates:
      //   Constant: '<S132>/Constant1'
      //   Constant: '<S132>/Constant3'
      //   Delay: '<S132>/Delay1'
      //   Lookup_n-D: '<S13>/ PWM to N'
      //   Lookup_n-D: '<S7>/N to PWM'
      //   Trigonometry: '<S259>/sincos'
      //   Trigonometry: '<S33>/sincos'
      //   Trigonometry: '<S88>/sincos'

      proc_control_node_B.MATLABSystem_o6 = proc_control_node_P.MPC.dts;
      proc_contr_AUVEULJacobianMatrix
        (proc_control_node_B.TmpSignalConversionAtSFun_p,
         proc_control_node_B.Kinv);
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 144;
           proc_control_node_B.i_j++) {
        proc_control_node_B.C_j[proc_control_node_B.i_j] =
          tmp_0[proc_control_node_B.i_j];
        proc_control_node_B.y_d[proc_control_node_B.i_j] =
          proc_control_node_B.Kinv[proc_control_node_B.i_j] *
          proc_control_node_P.MPC.Ts;
      }

      proc_control_node_B.MATLABSystem_o5 = 0.0;
      proc_control_node_B.i_j = 0;
      exitg1 = false;
      while ((!exitg1) && (proc_control_node_B.i_j < 12)) {
        proc_control_node_B.epsilon = 0.0;
        for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 12;
             proc_control_node_B.k_d++) {
          proc_control_node_B.epsilon += fabs(proc_control_node_B.y_d[12 *
            proc_control_node_B.i_j + proc_control_node_B.k_d]);
        }

        if (rtIsNaN(proc_control_node_B.epsilon)) {
          proc_control_node_B.MATLABSystem_o5 = (rtNaN);
          exitg1 = true;
        } else {
          if (proc_control_node_B.epsilon > proc_control_node_B.MATLABSystem_o5)
          {
            proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.epsilon;
          }

          proc_control_node_B.i_j++;
        }
      }

      if (proc_control_node_B.MATLABSystem_o5 <= 5.3719203511481517) {
        proc_control_node_B.ibmat = 0;
        exitg1 = false;
        while ((!exitg1) && (proc_control_node_B.ibmat < 5)) {
          if (proc_control_node_B.MATLABSystem_o5 <=
              theta[proc_control_node_B.ibmat]) {
            proc_co_PadeApproximantOfDegree(proc_control_node_B.y_d,
              c[proc_control_node_B.ibmat], proc_control_node_B.A_l);
            exitg1 = true;
          } else {
            proc_control_node_B.ibmat++;
          }
        }
      } else {
        proc_control_node_B.MATLABSystem_o5 /= 5.3719203511481517;
        if ((!rtIsInf(proc_control_node_B.MATLABSystem_o5)) && (!rtIsNaN
             (proc_control_node_B.MATLABSystem_o5))) {
          proc_control_node_B.MATLABSystem_o5 = frexp
            (proc_control_node_B.MATLABSystem_o5, &proc_control_node_B.e_f);
        } else {
          proc_control_node_B.e_f = 0;
        }

        proc_control_node_B.epsilon = proc_control_node_B.e_f;
        if (proc_control_node_B.MATLABSystem_o5 == 0.5) {
          proc_control_node_B.epsilon = static_cast<real_T>
            (proc_control_node_B.e_f) - 1.0;
        }

        proc_control_node_B.MATLABSystem_o5 = rt_powd_snf(2.0,
          proc_control_node_B.epsilon);
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 144;
             proc_control_node_B.i_j++) {
          proc_control_node_B.y_a[proc_control_node_B.i_j] =
            proc_control_node_B.y_d[proc_control_node_B.i_j] /
            proc_control_node_B.MATLABSystem_o5;
        }

        proc_co_PadeApproximantOfDegree(proc_control_node_B.y_a, 13,
          proc_control_node_B.A_l);
        proc_control_node_B.k_d = 0;
        while (proc_control_node_B.k_d <= static_cast<int32_T>
               (proc_control_node_B.epsilon) - 1) {
          for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 12;
               proc_control_node_B.i_j++) {
            proc_control_node_B.ibmat = 0;
            for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset <
                 12; proc_control_node_B.coffset++) {
              proc_control_node_B.e_f = proc_control_node_B.ibmat +
                proc_control_node_B.i_j;
              proc_control_node_B.y_d[proc_control_node_B.e_f] = 0.0;
              proc_control_node_B.aoffset = 0;
              for (proc_control_node_B.i1 = 0; proc_control_node_B.i1 < 12;
                   proc_control_node_B.i1++) {
                proc_control_node_B.y_d[proc_control_node_B.e_f] +=
                  proc_control_node_B.A_l[proc_control_node_B.aoffset +
                  proc_control_node_B.i_j] *
                  proc_control_node_B.A_l[proc_control_node_B.i1 +
                  proc_control_node_B.ibmat];
                proc_control_node_B.aoffset += 12;
              }

              proc_control_node_B.ibmat += 12;
            }
          }

          memcpy(&proc_control_node_B.A_l[0], &proc_control_node_B.y_d[0], 144U *
                 sizeof(real_T));
          proc_control_node_B.k_d++;
        }
      }

      memset(&proc_control_node_B.pp_coefs[0], 0, 36U * sizeof(real_T));

      // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
      //   EnablePort: '<S4>/Enable'

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S239>/Enable'

      // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
      //   EnablePort: '<S258>/Enable'

      proc_control_node_B.e_f = 0;
      proc_control_node_B.ibmat = 0;
      proc_control_node_B.coffset = 0;

      // End of Outputs for SubSystem: '<S255>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      // End of Outputs for SubSystem: '<Root>/ROS Output'
      for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 6;
           proc_control_node_B.k_d++) {
        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S239>/Enable'

        // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
        //   EnablePort: '<S258>/Enable'

        proc_control_node_B.pp_coefs[proc_control_node_B.e_f] = 1.0;

        // End of Outputs for SubSystem: '<S255>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
             proc_control_node_B.i_j++) {
          // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
          //   EnablePort: '<S4>/Enable'

          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S239>/Enable'

          // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
          //   EnablePort: '<S258>/Enable'

          proc_control_node_B.dCoefs[proc_control_node_B.i_j +
            proc_control_node_B.ibmat] = proc_control_node_B.Kinv
            [(proc_control_node_B.i_j + proc_control_node_B.coffset) + 78];

          // End of Outputs for SubSystem: '<S255>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          // End of Outputs for SubSystem: '<Root>/ROS Output'
        }

        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S239>/Enable'

        // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
        //   EnablePort: '<S258>/Enable'

        proc_control_node_B.e_f += 7;
        proc_control_node_B.ibmat += 6;
        proc_control_node_B.coffset += 12;

        // End of Outputs for SubSystem: '<S255>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
      }

      proc_control_node_B.i_j = 0;
      proc_control_node_B.ibmat = 0;
      for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 6;
           proc_control_node_B.coffset++) {
        for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 6;
             proc_control_node_B.aoffset++) {
          proc_control_node_B.e_f = proc_control_node_B.aoffset +
            proc_control_node_B.i_j;
          proc_control_node_B.constValues_g[proc_control_node_B.e_f] =
            proc_control_node_B.A_l[(proc_control_node_B.aoffset +
            proc_control_node_B.ibmat) + 78] -
            proc_control_node_B.pp_coefs[proc_control_node_B.e_f];
        }

        proc_control_node_B.i_j += 6;
        proc_control_node_B.ibmat += 12;
      }

      proc_control_node_mldivide(proc_control_node_B.dCoefs,
        proc_control_node_B.constValues_g, proc_control_node_B.pp_coefs);
      memcpy(&proc_control_node_B.DX_l[0],
             &proc_control_node_B.TmpSignalConversionAtSFun_p[0], 12U * sizeof
             (real_T));
      proc_control_node_B.ibmat = 0;
      while (proc_control_node_B.ibmat <= static_cast<int32_T>
             (proc_control_node_B.MATLABSystem_o6) - 1) {
        proc_control_node_B.epsilon = proc_control_node_P.MPC.Ts /
          proc_control_node_B.MATLABSystem_o6;
        proc_control_nod_AUVEulerSimFcn(proc_control_node_B.DX_l,
          proc_control_node_DW.Delay1_DSTATE_c, proc_control_node_B.dv24);
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 12;
             proc_control_node_B.i_j++) {
          proc_control_node_B.DX_l[proc_control_node_B.i_j] +=
            proc_control_node_B.dv24[proc_control_node_B.i_j] *
            proc_control_node_B.epsilon;
        }

        proc_control_node_B.ibmat++;
      }

      // MATLAB Function: '<S169>/FixedHorizonOptimizer'
      memset(&proc_control_node_B.Bu_l[0], 0, 1760U * sizeof(real_T));
      memset(&proc_control_node_B.Bv_m[0], 0, 220U * sizeof(real_T));
      memset(&proc_control_node_B.Dv_f[0], 0, 132U * sizeof(real_T));
      memset(&proc_control_node_B.Dvm[0], 0, 132U * sizeof(real_T));
      memset(&proc_control_node_B.Cm[0], 0, 2640U * sizeof(real_T));
      memcpy(&proc_control_node_B.b_A_e[0], &c_0[0], 400U * sizeof(real_T));
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 240;
           proc_control_node_B.i_j++) {
        proc_control_node_B.b_C_o[proc_control_node_B.i_j] =
          e_0[proc_control_node_B.i_j];
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        // MATLAB Function: '<S132>/MATLAB Function2'
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.y_cq[proc_control_node_B.ibmat + 6 *
            proc_control_node_B.i_j] = 0.0;
        }

        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 6;
             proc_control_node_B.coffset++) {
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
               proc_control_node_B.ibmat++) {
            proc_control_node_B.k_d = 6 * proc_control_node_B.i_j +
              proc_control_node_B.ibmat;
            proc_control_node_B.y_cq[proc_control_node_B.k_d] +=
              proc_control_node_B.pp_coefs[6 * proc_control_node_B.coffset +
              proc_control_node_B.ibmat] * c_b[6 * proc_control_node_B.i_j +
              proc_control_node_B.coffset];
          }
        }

        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.coffset = proc_control_node_B.ibmat + 12 *
            proc_control_node_B.i_j;
          proc_control_node_B.dv10[proc_control_node_B.coffset] = 0.0;
          proc_control_node_B.dv10[proc_control_node_B.coffset + 6] =
            proc_control_node_B.y_cq[6 * proc_control_node_B.i_j +
            proc_control_node_B.ibmat];
        }

        // MATLAB Function: '<S169>/FixedHorizonOptimizer'
        proc_control_node_B.u_scale_e[proc_control_node_B.i_j] =
          static_cast<real_T>(proc_control_node_B.i_j) + 1.0;
      }

      // MATLAB Function: '<S169>/FixedHorizonOptimizer'
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 12;
           proc_control_node_B.i_j++) {
        proc_control_node_B.dv24[proc_control_node_B.i_j] = static_cast<real_T>
          (proc_control_node_B.i_j) + 1.0;
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        proc_control_node_B.rtb_u_p_f[proc_control_node_B.i_j] = 1.0;
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 12;
           proc_control_node_B.i_j++) {
        proc_control_node_B.dv25[proc_control_node_B.i_j] = 1.0;
      }

      memcpy(&proc_control_node_B.d[0], &d[0], 580U * sizeof(real_T));

      // MATLAB Function: '<S169>/FixedHorizonOptimizer' incorporates:
      //   MATLAB Function: '<S132>/MATLAB Function2'

      proc_control_no_mpc_plantupdate(proc_control_node_B.A_l,
        proc_control_node_B.dv10, proc_control_node_B.C_j,
        proc_control_node_B.b_A_e, proc_control_node_B.d,
        proc_control_node_B.b_C_o, f_0, proc_control_node_B.u_scale_e,
        proc_control_node_B.dv24, proc_control_node_B.rtb_u_p_f,
        proc_control_node_B.dv25, &proc_control_node_B.Bu_l[0],
        &proc_control_node_B.Bv_m[0], proc_control_node_B.L,
        &proc_control_node_B.Dv_f[0], &proc_control_node_B.Dvm[0],
        proc_control_node_B.Qk_a, proc_control_node_B.Kinv,
        proc_control_node_B.Nk_h);
      proc_control_node_B.i_j = 0;
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 20;
           proc_control_node_B.ibmat++) {
        memcpy(&proc_control_node_B.Cm[proc_control_node_B.i_j],
               &proc_control_node_B.L[proc_control_node_B.i_j], 12U * sizeof
               (real_T));
        proc_control_node_B.i_j += 12;
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 48;
           proc_control_node_B.i_j++) {
        proc_control_node_B.a__1_g[proc_control_node_B.i_j] =
          k[proc_control_node_B.i_j];
      }

      memset(&proc_control_node_B.b_utarget[0], 0, 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.b_xoff[0], &n_0[0], 20U * sizeof(real_T));

      // MATLAB Function: '<S132>/MATLAB Function2' incorporates:
      //   Delay: '<S132>/Delay1'

      memset(&proc_control_node_B.rtb_C_j_l[0], 0, 12U * sizeof(real_T));
      proc_control_node_B.ibmat = 0;
      for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 12;
           proc_control_node_B.coffset++) {
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 12;
             proc_control_node_B.i_j++) {
          proc_control_node_B.rtb_C_j_l[proc_control_node_B.i_j] +=
            proc_control_node_B.C_j[proc_control_node_B.i_j +
            proc_control_node_B.ibmat] *
            proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.coffset];
        }

        proc_control_node_B.dv24[proc_control_node_B.coffset] = 0.0;
        proc_control_node_B.ibmat += 12;
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 12;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.dv24[proc_control_node_B.ibmat] += 0.0 *
            proc_control_node_DW.Delay1_DSTATE_c[proc_control_node_B.i_j];
        }

        // MATLAB Function: '<S169>/FixedHorizonOptimizer' incorporates:
        //   Delay: '<S132>/Delay1'

        proc_control_node_B.u_scale_e[proc_control_node_B.i_j] = 1.0;
        proc_control_node_B.rtb_u_p_f[proc_control_node_B.i_j] = 0.0;
        proc_control_node_B.u_p[proc_control_node_B.i_j] = static_cast<real_T>
          (proc_control_node_B.i_j) + 1.0;
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 12;
           proc_control_node_B.i_j++) {
        proc_control_node_B.rtb_C_j_i[proc_control_node_B.i_j] =
          proc_control_node_B.rtb_C_j_l[proc_control_node_B.i_j] +
          proc_control_node_B.dv24[proc_control_node_B.i_j];

        // MATLAB Function: '<S169>/FixedHorizonOptimizer'
        proc_control_node_B.dv25[proc_control_node_B.i_j] = 1.0;
        proc_control_node_B.dv26[proc_control_node_B.i_j] = static_cast<real_T>
          (proc_control_node_B.i_j) + 1.0;
        proc_control_node_B.rtb_DX_l_k[proc_control_node_B.i_j] =
          proc_control_node_B.DX_l[proc_control_node_B.i_j] -
          proc_control_node_B.TmpSignalConversionAtSFun_p[proc_control_node_B.i_j];
      }

      // MATLAB Function: '<S169>/FixedHorizonOptimizer' incorporates:
      //   Delay: '<S132>/Delay1'
      //   Lookup_n-D: '<S13>/ PWM to N'
      //   Lookup_n-D: '<S7>/N to PWM'
      //   MATLAB Function: '<S132>/MATLAB Function2'
      //   Memory: '<S141>/LastPcov'
      //   Memory: '<S141>/last_x'
      //   Trigonometry: '<S259>/sincos'
      //   Trigonometry: '<S33>/sincos'
      //   Trigonometry: '<S88>/sincos'

      proc_cont_mpc_updateFromNominal(proc_control_node_B.a__1_g, h_0,
        proc_control_node_DW.Delay1_DSTATE_c, proc_control_node_B.u_scale_e,
        proc_control_node_B.rtb_u_p_f, proc_control_node_B.u_p,
        proc_control_node_B.b_utarget, proc_control_node_B.rtb_C_j_i,
        proc_control_node_B.dv25, l_0, proc_control_node_B.dv26,
        proc_control_node_B.TmpSignalConversionAtSFun_p,
        proc_control_node_B.b_xoff, proc_control_node_B.rtb_DX_l_k,
        proc_control_node_B.Bv_m, proc_control_node_B.u,
        proc_control_node_B.DX_l, proc_control_node_B.rtb_C_j_l);
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 11;
           proc_control_node_B.ibmat++) {
        proc_control_node_B.vseq[proc_control_node_B.ibmat] = 1.0;
      }

      proc_control_node_B.coffset = 0;
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 10;
           proc_control_node_B.ibmat++) {
        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S239>/Enable'

        // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
        //   EnablePort: '<S258>/Enable'

        proc_control_node_B.e_f = 0;

        // End of Outputs for SubSystem: '<S255>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
        for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 12;
             proc_control_node_B.k_d++) {
          // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
          //   EnablePort: '<S4>/Enable'

          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S239>/Enable'

          // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
          //   EnablePort: '<S258>/Enable'

          proc_control_node_B.rseq_c[proc_control_node_B.k_d +
            proc_control_node_B.coffset] =
            proc_control_node_B.y_h_n[proc_control_node_B.e_f +
            proc_control_node_B.ibmat] -
            proc_control_node_B.DX_l[proc_control_node_B.k_d];
          proc_control_node_B.e_f += 10;

          // End of Outputs for SubSystem: '<S255>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          // End of Outputs for SubSystem: '<Root>/ROS Output'
        }

        proc_control_node_B.coffset += 12;
      }

      memset(&proc_control_node_B.C_j[0], 0, 144U * sizeof(real_T));

      // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
      //   EnablePort: '<S4>/Enable'

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S239>/Enable'

      // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
      //   EnablePort: '<S258>/Enable'

      proc_control_node_B.e_f = 0;

      // End of Outputs for SubSystem: '<S255>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      // End of Outputs for SubSystem: '<Root>/ROS Output'
      for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 12;
           proc_control_node_B.k_d++) {
        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S239>/Enable'

        // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
        //   EnablePort: '<S258>/Enable'

        proc_control_node_B.C_j[proc_control_node_B.e_f] = 1.0;
        proc_control_node_B.e_f += 13;

        // End of Outputs for SubSystem: '<S255>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 20;
           proc_control_node_B.i_j++) {
        memset(&proc_control_node_B.L[proc_control_node_B.i_j * 12], 0, 12U *
               sizeof(real_T));
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 20;
             proc_control_node_B.coffset++) {
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 12;
               proc_control_node_B.ibmat++) {
            proc_control_node_B.k_d = 12 * proc_control_node_B.i_j +
              proc_control_node_B.ibmat;
            proc_control_node_B.L[proc_control_node_B.k_d] +=
              proc_control_node_B.Cm[12 * proc_control_node_B.coffset +
              proc_control_node_B.ibmat] *
              proc_control_node_DW.LastPcov_PreviousInput_n[20 *
              proc_control_node_B.i_j + proc_control_node_B.coffset];
          }
        }
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 12;
           proc_control_node_B.i_j++) {
        proc_control_node_B.ibmat = 0;
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 12;
             proc_control_node_B.coffset++) {
          proc_control_node_B.d_o = 0.0;
          proc_control_node_B.aoffset = 0;
          for (proc_control_node_B.i1 = 0; proc_control_node_B.i1 < 20;
               proc_control_node_B.i1++) {
            proc_control_node_B.d_o +=
              proc_control_node_B.L[proc_control_node_B.aoffset +
              proc_control_node_B.i_j] *
              proc_control_node_B.Cm[proc_control_node_B.aoffset +
              proc_control_node_B.coffset];
            proc_control_node_B.aoffset += 12;
          }

          proc_control_node_B.k_d = proc_control_node_B.ibmat +
            proc_control_node_B.i_j;
          proc_control_node_B.A_l[proc_control_node_B.k_d] =
            proc_control_node_B.Kinv[proc_control_node_B.k_d] +
            proc_control_node_B.d_o;
          proc_control_node_B.ibmat += 12;
        }
      }

      proc_control_node_mrdiv(proc_control_node_B.C_j, proc_control_node_B.A_l,
        proc_control_node_B.Kinv);
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 20;
           proc_control_node_B.i_j++) {
        memset(&proc_control_node_B.L_tmp[proc_control_node_B.i_j * 20], 0, 20U *
               sizeof(real_T));
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 20;
             proc_control_node_B.coffset++) {
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 20;
               proc_control_node_B.ibmat++) {
            proc_control_node_B.k_d = 20 * proc_control_node_B.i_j +
              proc_control_node_B.ibmat;
            proc_control_node_B.L_tmp[proc_control_node_B.k_d] +=
              proc_control_node_B.b_A_e[20 * proc_control_node_B.coffset +
              proc_control_node_B.ibmat] *
              proc_control_node_DW.LastPcov_PreviousInput_n[20 *
              proc_control_node_B.i_j + proc_control_node_B.coffset];
          }
        }
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 20;
           proc_control_node_B.i_j++) {
        proc_control_node_B.ibmat = 0;
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 12;
             proc_control_node_B.coffset++) {
          proc_control_node_B.d_o = 0.0;
          proc_control_node_B.aoffset = 0;
          proc_control_node_B.i1 = 0;
          for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 20;
               proc_control_node_B.k_d++) {
            proc_control_node_B.d_o +=
              proc_control_node_B.L_tmp[proc_control_node_B.aoffset +
              proc_control_node_B.i_j] *
              proc_control_node_B.Cm[proc_control_node_B.i1 +
              proc_control_node_B.coffset];
            proc_control_node_B.aoffset += 20;
            proc_control_node_B.i1 += 12;
          }

          proc_control_node_B.k_d = proc_control_node_B.ibmat +
            proc_control_node_B.i_j;
          proc_control_node_B.L_tmp_l[proc_control_node_B.k_d] =
            proc_control_node_B.Nk_h[proc_control_node_B.k_d] +
            proc_control_node_B.d_o;
          proc_control_node_B.ibmat += 20;
        }
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 12;
           proc_control_node_B.i_j++) {
        memset(&proc_control_node_B.L[proc_control_node_B.i_j * 20], 0, 20U *
               sizeof(real_T));
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 12;
             proc_control_node_B.coffset++) {
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 20;
               proc_control_node_B.ibmat++) {
            proc_control_node_B.k_d = 20 * proc_control_node_B.i_j +
              proc_control_node_B.ibmat;
            proc_control_node_B.L[proc_control_node_B.k_d] +=
              proc_control_node_B.L_tmp_l[20 * proc_control_node_B.coffset +
              proc_control_node_B.ibmat] * proc_control_node_B.Kinv[12 *
              proc_control_node_B.i_j + proc_control_node_B.coffset];
          }
        }
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 20;
           proc_control_node_B.i_j++) {
        proc_control_node_B.d_o = 0.0;
        proc_control_node_B.ibmat = 0;
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 8;
             proc_control_node_B.coffset++) {
          proc_control_node_B.d_o +=
            proc_control_node_B.Bu_l[proc_control_node_B.ibmat +
            proc_control_node_B.i_j] * 0.0;
          proc_control_node_B.ibmat += 20;
        }

        proc_control_node_B.xk[proc_control_node_B.i_j] =
          (proc_control_node_DW.last_x_PreviousInput[proc_control_node_B.i_j] -
           proc_control_node_B.b_xoff[proc_control_node_B.i_j]) +
          proc_control_node_B.d_o;
      }

      // DataTypeConversion: '<S141>/mo or x Conversion' incorporates:
      //   MATLAB Function: '<S169>/FixedHorizonOptimizer'

      proc_control_node_B.dv24[3] = proc_control_node_B.u2[2] -
        proc_control_node_B.rtb_C_j_l[3];
      proc_control_node_B.dv24[4] = proc_control_node_B.u2[1] -
        proc_control_node_B.rtb_C_j_l[4];
      proc_control_node_B.dv24[5] = proc_control_node_B.u2[0] -
        proc_control_node_B.rtb_C_j_l[5];
      proc_control_node_B.dv24[0] = proc_control_node_B.WorldPosition[0] -
        proc_control_node_B.rtb_C_j_l[0];
      proc_control_node_B.dv24[6] = proc_control_node_B.BodyVelocity[0] -
        proc_control_node_B.rtb_C_j_l[6];
      proc_control_node_B.dv24[9] = proc_control_node_B.AngularRate[0] -
        proc_control_node_B.rtb_C_j_l[9];
      proc_control_node_B.dv24[1] = proc_control_node_B.WorldPosition[1] -
        proc_control_node_B.rtb_C_j_l[1];
      proc_control_node_B.dv24[7] = proc_control_node_B.BodyVelocity[1] -
        proc_control_node_B.rtb_C_j_l[7];
      proc_control_node_B.dv24[10] = proc_control_node_B.AngularRate[1] -
        proc_control_node_B.rtb_C_j_l[10];
      proc_control_node_B.dv24[2] = proc_control_node_B.WorldPosition[2] -
        proc_control_node_B.rtb_C_j_l[2];
      proc_control_node_B.dv24[8] = proc_control_node_B.BodyVelocity[2] -
        proc_control_node_B.rtb_C_j_l[8];
      proc_control_node_B.dv24[11] = proc_control_node_B.AngularRate[2] -
        proc_control_node_B.rtb_C_j_l[11];

      // MATLAB Function: '<S169>/FixedHorizonOptimizer' incorporates:
      //   Memory: '<S141>/LastPcov'
      //   UnitDelay: '<S141>/last_mv'

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 12;
           proc_control_node_B.i_j++) {
        proc_control_node_B.d_o = 0.0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 20;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.d_o += proc_control_node_B.Cm[12 *
            proc_control_node_B.ibmat + proc_control_node_B.i_j] *
            proc_control_node_B.xk[proc_control_node_B.ibmat];
          proc_control_node_B.Nk_h[proc_control_node_B.ibmat + 20 *
            proc_control_node_B.i_j] = 0.0;
        }

        proc_control_node_B.DX_l[proc_control_node_B.i_j] =
          proc_control_node_B.dv24[proc_control_node_B.i_j] -
          (proc_control_node_B.d_o +
           proc_control_node_B.Dvm[proc_control_node_B.i_j]);
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 20;
             proc_control_node_B.ibmat++) {
          for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 20;
               proc_control_node_B.coffset++) {
            proc_control_node_B.aoffset = 20 * proc_control_node_B.i_j +
              proc_control_node_B.coffset;
            proc_control_node_B.Nk_h[proc_control_node_B.aoffset] +=
              proc_control_node_DW.LastPcov_PreviousInput_n[20 *
              proc_control_node_B.ibmat + proc_control_node_B.coffset] *
              proc_control_node_B.Cm[12 * proc_control_node_B.ibmat +
              proc_control_node_B.i_j];
          }

          proc_control_node_B.dv5[proc_control_node_B.ibmat + 20 *
            proc_control_node_B.i_j] = 0.0;
        }
      }

      proc_control_node_B.i_j = 0;
      proc_control_node_B.ibmat = 0;
      for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 12;
           proc_control_node_B.coffset++) {
        proc_control_node_B.aoffset = 0;
        for (proc_control_node_B.i1 = 0; proc_control_node_B.i1 < 12;
             proc_control_node_B.i1++) {
          for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 20;
               proc_control_node_B.k_d++) {
            proc_control_node_B.i_e = proc_control_node_B.k_d +
              proc_control_node_B.i_j;
            proc_control_node_B.dv5[proc_control_node_B.i_e] +=
              proc_control_node_B.Nk_h[proc_control_node_B.k_d +
              proc_control_node_B.aoffset] *
              proc_control_node_B.Kinv[proc_control_node_B.i1 +
              proc_control_node_B.ibmat];
          }

          proc_control_node_B.aoffset += 20;
        }

        proc_control_node_B.i_j += 20;
        proc_control_node_B.ibmat += 12;
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 20;
           proc_control_node_B.i_j++) {
        proc_control_node_B.d_o = 0.0;
        proc_control_node_B.ibmat = 0;
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 12;
             proc_control_node_B.coffset++) {
          proc_control_node_B.d_o +=
            proc_control_node_B.dv5[proc_control_node_B.ibmat +
            proc_control_node_B.i_j] *
            proc_control_node_B.DX_l[proc_control_node_B.coffset];
          proc_control_node_B.ibmat += 20;
        }

        proc_control_node_B.xk_p[proc_control_node_B.i_j] =
          proc_control_node_B.xk[proc_control_node_B.i_j] +
          proc_control_node_B.d_o;
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        proc_control_node_B.u_scale_e[proc_control_node_B.i_j] =
          proc_control_node_DW.last_mv_DSTATE_j[proc_control_node_B.i_j] -
          proc_control_node_B.u[proc_control_node_B.i_j];
      }

      memset(&proc_control_node_B.dv3[0], 0, 960U * sizeof(real_T));
      memset(&proc_control_node_B.dv4[0], 0, 528U * sizeof(real_T));
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        proc_control_node_B.rtb_u_p_f[proc_control_node_B.i_j] =
          0.040000000000000008;
      }

      // Memory: '<S141>/Memory'
      for (proc_control_node_B.i3 = 0; proc_control_node_B.i3 < 48;
           proc_control_node_B.i3++) {
        proc_control_node_B.bv2[proc_control_node_B.i3] =
          proc_control_node_DW.Memory_PreviousInput_h[proc_control_node_B.i3];
      }

      // End of Memory: '<S141>/Memory'
      memcpy(&proc_control_node_B.q_l[0], &q[0], 384U * sizeof(real_T));
      memcpy(&proc_control_node_B.q[0], &q_0[0], 625U * sizeof(real_T));
      memcpy(&proc_control_node_B.s[0], &s[0], 1200U * sizeof(real_T));

      // Update for Memory: '<S141>/Memory' incorporates:
      //   MATLAB Function: '<S169>/FixedHorizonOptimizer'

      proc_control_mpcblock_optimizer(proc_control_node_B.rseq_c,
        proc_control_node_B.vseq, proc_control_node_B.xk_p,
        proc_control_node_B.u_scale_e, proc_control_node_B.bv2,
        proc_control_node_B.a__1_g, proc_control_node_B.dv3,
        proc_control_node_B.q_l, proc_control_node_B.dv4,
        proc_control_node_B.b_utarget, proc_control_node_B.u,
        proc_control_node_B.q, proc_control_node_B.s, s_0, u, v,
        proc_control_node_B.rtb_u_p_f, w, proc_control_node_B.b_A_e,
        proc_control_node_B.Bu_l, proc_control_node_B.Bv_m,
        proc_control_node_B.b_C_o, proc_control_node_B.Dv_f, h_0,
        proc_control_node_B.u_p, proc_control_node_B.useq_f,
        &proc_control_node_B.MATLABSystem_o5,
        proc_control_node_DW.Memory_PreviousInput_h);

      // MATLAB Function: '<S169>/FixedHorizonOptimizer'
      proc_control_node_B.i_j = 0;
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 20;
           proc_control_node_B.ibmat++) {
        memset(&proc_control_node_B.L_tmp_a[proc_control_node_B.i_j], 0, 20U *
               sizeof(real_T));
        proc_control_node_B.i_j += 20;
      }

      proc_control_node_B.i_j = 0;
      for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 20;
           proc_control_node_B.aoffset++) {
        proc_control_node_B.i1 = 0;
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 20;
             proc_control_node_B.ibmat++) {
          for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 20;
               proc_control_node_B.coffset++) {
            proc_control_node_B.k_d = proc_control_node_B.coffset +
              proc_control_node_B.i1;
            proc_control_node_B.L_tmp_a[proc_control_node_B.k_d] +=
              proc_control_node_B.L_tmp[proc_control_node_B.coffset +
              proc_control_node_B.i_j] *
              proc_control_node_B.b_A_e[proc_control_node_B.ibmat +
              proc_control_node_B.i_j];
          }

          proc_control_node_B.L_tmp_i[proc_control_node_B.ibmat +
            proc_control_node_B.i_j] = 0.0;
          proc_control_node_B.i1 += 20;
        }

        proc_control_node_B.i_j += 20;
      }

      proc_control_node_B.i_j = 0;
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 12;
           proc_control_node_B.ibmat++) {
        proc_control_node_B.coffset = 0;
        for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 20;
             proc_control_node_B.aoffset++) {
          for (proc_control_node_B.i1 = 0; proc_control_node_B.i1 < 20;
               proc_control_node_B.i1++) {
            proc_control_node_B.k_d = proc_control_node_B.i1 +
              proc_control_node_B.coffset;
            proc_control_node_B.L_tmp_i[proc_control_node_B.k_d] +=
              proc_control_node_B.L_tmp_l[proc_control_node_B.i1 +
              proc_control_node_B.i_j] *
              proc_control_node_B.L[proc_control_node_B.aoffset +
              proc_control_node_B.i_j];
          }

          proc_control_node_B.coffset += 20;
        }

        proc_control_node_B.i_j += 20;
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 400;
           proc_control_node_B.i_j++) {
        proc_control_node_B.L_tmp[proc_control_node_B.i_j] =
          (proc_control_node_B.L_tmp_a[proc_control_node_B.i_j] -
           proc_control_node_B.L_tmp_i[proc_control_node_B.i_j]) +
          proc_control_node_B.Qk_a[proc_control_node_B.i_j];
      }

      // DiscretePulseGenerator: '<S132>/Pulse Generator'
      proc_control_node_B.MATLABSystem_o6 =
        (proc_control_node_DW.clockTickCounter_h <
         proc_control_node_P.PulseGenerator_Duty_c) &&
        (proc_control_node_DW.clockTickCounter_h >= 0) ?
        proc_control_node_P.PulseGenerator_Amp_a : 0.0;
      if (proc_control_node_DW.clockTickCounter_h >=
          proc_control_node_P.PulseGenerator_Period_g - 1.0) {
        proc_control_node_DW.clockTickCounter_h = 0;
      } else {
        proc_control_node_DW.clockTickCounter_h++;
      }

      // End of DiscretePulseGenerator: '<S132>/Pulse Generator'
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        // Gain: '<S141>/u_scale'
        proc_control_node_B.epsilon =
          proc_control_node_P.u_scale_Gain[proc_control_node_B.i_j] *
          proc_control_node_B.u_p[proc_control_node_B.i_j];

        // Merge: '<S7>/Merge' incorporates:
        //   Gain: '<S141>/u_scale'
        //   SignalConversion generated from: '<S132>/out'

        proc_control_node_B.Merge[proc_control_node_B.i_j] =
          proc_control_node_B.epsilon;
        proc_control_node_B.u_scale_e[proc_control_node_B.i_j] =
          proc_control_node_B.epsilon;
      }

      // Merge: '<S7>/Merge' incorporates:
      //   Gain: '<S141>/u_scale'
      //   MATLAB Function: '<S169>/FixedHorizonOptimizer'
      //   SignalConversion generated from: '<S132>/out'

      proc_control_node_B.Merge[8] = proc_control_node_B.MATLABSystem_o5;
      proc_control_node_B.Merge[9] = proc_control_node_B.MATLABSystem_o6;

      // Update for Memory: '<S141>/LastPcov' incorporates:
      //   MATLAB Function: '<S169>/FixedHorizonOptimizer'

      proc_control_node_B.i_j = 0;
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 20;
           proc_control_node_B.ibmat++) {
        proc_control_node_B.coffset = 0;
        for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 20;
             proc_control_node_B.aoffset++) {
          proc_control_node_B.k_d = proc_control_node_B.aoffset +
            proc_control_node_B.i_j;
          proc_control_node_DW.LastPcov_PreviousInput_n[proc_control_node_B.k_d]
            = (proc_control_node_B.L_tmp[proc_control_node_B.k_d] +
               proc_control_node_B.L_tmp[proc_control_node_B.coffset +
               proc_control_node_B.ibmat]) * 0.5;
          proc_control_node_B.coffset += 20;
        }

        proc_control_node_B.i_j += 20;
      }

      // End of Update for Memory: '<S141>/LastPcov'
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        proc_control_node_B.MATLABSystem_o6 =
          proc_control_node_B.u_p[proc_control_node_B.i_j];

        // Update for UnitDelay: '<S141>/last_mv'
        proc_control_node_DW.last_mv_DSTATE_j[proc_control_node_B.i_j] =
          proc_control_node_B.MATLABSystem_o6;

        // MATLAB Function: '<S169>/FixedHorizonOptimizer' incorporates:
        //   UnitDelay: '<S141>/last_mv'

        proc_control_node_B.rtb_u_p_f[proc_control_node_B.i_j] =
          proc_control_node_B.MATLABSystem_o6 -
          proc_control_node_B.u[proc_control_node_B.i_j];
      }

      // MATLAB Function: '<S169>/FixedHorizonOptimizer' incorporates:
      //   UnitDelay: '<S141>/last_mv'

      memset(&proc_control_node_B.xk_p[0], 0, 20U * sizeof(real_T));
      proc_control_node_B.ibmat = 0;
      for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 20;
           proc_control_node_B.coffset++) {
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 20;
             proc_control_node_B.i_j++) {
          proc_control_node_B.xk_p[proc_control_node_B.i_j] +=
            proc_control_node_B.b_A_e[proc_control_node_B.i_j +
            proc_control_node_B.ibmat] *
            proc_control_node_B.xk[proc_control_node_B.coffset];
        }

        proc_control_node_B.Bu_d[proc_control_node_B.coffset] = 0.0;
        proc_control_node_B.ibmat += 20;
      }

      proc_control_node_B.i_j = 0;
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 8;
           proc_control_node_B.ibmat++) {
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 20;
             proc_control_node_B.coffset++) {
          proc_control_node_B.Bu_d[proc_control_node_B.coffset] +=
            proc_control_node_B.Bu_l[proc_control_node_B.coffset +
            proc_control_node_B.i_j] *
            proc_control_node_B.rtb_u_p_f[proc_control_node_B.ibmat];
        }

        proc_control_node_B.i_j += 20;
      }

      // Update for Memory: '<S141>/last_x' incorporates:
      //   MATLAB Function: '<S169>/FixedHorizonOptimizer'

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 20;
           proc_control_node_B.i_j++) {
        proc_control_node_B.d_o = 0.0;
        proc_control_node_B.ibmat = 0;
        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 12;
             proc_control_node_B.coffset++) {
          proc_control_node_B.d_o +=
            proc_control_node_B.L[proc_control_node_B.ibmat +
            proc_control_node_B.i_j] *
            proc_control_node_B.DX_l[proc_control_node_B.coffset];
          proc_control_node_B.ibmat += 20;
        }

        proc_control_node_DW.last_x_PreviousInput[proc_control_node_B.i_j] =
          (((proc_control_node_B.xk_p[proc_control_node_B.i_j] +
             proc_control_node_B.Bu_d[proc_control_node_B.i_j]) +
            proc_control_node_B.Bv_m[proc_control_node_B.i_j]) +
           proc_control_node_B.d_o) +
          proc_control_node_B.b_xoff[proc_control_node_B.i_j];
      }

      // End of Update for Memory: '<S141>/last_x'

      // Update for Delay: '<S132>/Delay1'
      memcpy(&proc_control_node_DW.Delay1_DSTATE_c[0],
             &proc_control_node_B.u_scale_e[0], sizeof(real_T) << 3U);

      // End of Outputs for SubSystem: '<S7>/Adaptive MPC Euler '
      break;

     case 3:
      if (rtAction != rtPrevAction) {
        // InitializeConditions for IfAction SubSystem: '<S7>/Adaptive MPC quaternion ' incorporates:
        //   ActionPort: '<S133>/Action Port'

        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 48;
             proc_control_node_B.i_j++) {
          // InitializeConditions for SwitchCase: '<S7>/Switch Case' incorporates:
          //   Memory: '<S183>/Memory'

          proc_control_node_DW.Memory_PreviousInput[proc_control_node_B.i_j] =
            proc_control_node_P.Memory_InitialCondition_b[proc_control_node_B.i_j];
        }

        // InitializeConditions for SwitchCase: '<S7>/Switch Case' incorporates:
        //   Delay: '<S133>/Delay1'
        //   DiscretePulseGenerator: '<S133>/Pulse Generator'
        //   UnitDelay: '<S183>/last_mv'

        memcpy(&proc_control_node_DW.last_mv_DSTATE[0],
               &proc_control_node_P.last_mv_InitialCondition_k[0], sizeof(real_T)
               << 3U);
        memcpy(&proc_control_node_DW.Delay1_DSTATE[0],
               &proc_control_node_P.Delay1_InitialCondition_l[0], sizeof(real_T)
               << 3U);
        proc_control_node_DW.clockTickCounter = 0;

        // End of InitializeConditions for SubSystem: '<S7>/Adaptive MPC quaternion ' 
      }

      // Outputs for IfAction SubSystem: '<S7>/Adaptive MPC quaternion ' incorporates:
      //   ActionPort: '<S133>/Action Port'

      // SignalConversion generated from: '<S182>/ SFunction ' incorporates:
      //   MATLAB Function: '<S133>/MATLAB Function2'

      proc_control_node_B.TmpSignalConversionAtTransp[0] =
        proc_control_node_B.WorldPosition[0];
      proc_control_node_B.TmpSignalConversionAtTransp[1] =
        proc_control_node_B.WorldPosition[1];
      proc_control_node_B.TmpSignalConversionAtTransp[2] =
        proc_control_node_B.WorldPosition[2];
      proc_control_node_B.TmpSignalConversionAtTransp[3] =
        proc_control_node_B.qS2W[0];
      proc_control_node_B.TmpSignalConversionAtTransp[4] =
        proc_control_node_B.qS2W[1];
      proc_control_node_B.TmpSignalConversionAtTransp[5] =
        proc_control_node_B.qS2W[2];
      proc_control_node_B.TmpSignalConversionAtTransp[6] =
        proc_control_node_B.qS2W[3];
      proc_control_node_B.TmpSignalConversionAtTransp[7] =
        proc_control_node_B.BodyVelocity[0];
      proc_control_node_B.TmpSignalConversionAtTransp[10] =
        proc_control_node_B.AngularRate[0];
      proc_control_node_B.TmpSignalConversionAtTransp[8] =
        proc_control_node_B.BodyVelocity[1];
      proc_control_node_B.TmpSignalConversionAtTransp[11] =
        proc_control_node_B.AngularRate[1];
      proc_control_node_B.TmpSignalConversionAtTransp[9] =
        proc_control_node_B.BodyVelocity[2];
      proc_control_node_B.TmpSignalConversionAtTransp[12] =
        proc_control_node_B.AngularRate[2];

      // MATLAB Function: '<S133>/MATLAB Function2' incorporates:
      //   Constant: '<S133>/Constant1'
      //   Constant: '<S133>/Constant3'
      //   Delay: '<S133>/Delay1'
      //   Lookup_n-D: '<S13>/ PWM to N'
      //   Lookup_n-D: '<S7>/N to PWM'
      //   Trigonometry: '<S259>/sincos'
      //   Trigonometry: '<S33>/sincos'
      //   Trigonometry: '<S88>/sincos'

      proc_control_node_B.MATLABSystem_o6 = proc_control_node_P.MPC.dts;
      proc_cont_AUVQuatJacobianMatrix
        (proc_control_node_B.TmpSignalConversionAtTransp, proc_control_node_B.Ac);
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 169;
           proc_control_node_B.i_j++) {
        proc_control_node_B.Ac_j[proc_control_node_B.i_j] =
          proc_control_node_B.Ac[proc_control_node_B.i_j] *
          proc_control_node_P.MPC.Ts;
      }

      proc_control_node_expm(proc_control_node_B.Ac_j,
        proc_control_node_B.Jacobian);
      memset(&proc_control_node_B.pp_coefs[0], 0, 36U * sizeof(real_T));

      // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
      //   EnablePort: '<S4>/Enable'

      // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
      //   EnablePort: '<S1>/Enable'

      // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
      // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
      //   EnablePort: '<S239>/Enable'

      // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
      //   EnablePort: '<S258>/Enable'

      proc_control_node_B.e_f = 0;
      proc_control_node_B.ibmat = 0;
      proc_control_node_B.coffset = 0;

      // End of Outputs for SubSystem: '<S255>/Subsystem2'
      // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
      // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
      // End of Outputs for SubSystem: '<Root>/Modèle Physique'
      // End of Outputs for SubSystem: '<Root>/ROS Output'
      for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 6;
           proc_control_node_B.k_d++) {
        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S239>/Enable'

        // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
        //   EnablePort: '<S258>/Enable'

        proc_control_node_B.pp_coefs[proc_control_node_B.e_f] = 1.0;

        // End of Outputs for SubSystem: '<S255>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 6;
             proc_control_node_B.i_j++) {
          // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
          //   EnablePort: '<S4>/Enable'

          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S239>/Enable'

          // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
          //   EnablePort: '<S258>/Enable'

          proc_control_node_B.dCoefs[proc_control_node_B.i_j +
            proc_control_node_B.ibmat] = proc_control_node_B.Ac
            [(proc_control_node_B.i_j + proc_control_node_B.coffset) + 98];

          // End of Outputs for SubSystem: '<S255>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          // End of Outputs for SubSystem: '<Root>/ROS Output'
        }

        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S239>/Enable'

        // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
        //   EnablePort: '<S258>/Enable'

        proc_control_node_B.e_f += 7;
        proc_control_node_B.ibmat += 6;
        proc_control_node_B.coffset += 13;

        // End of Outputs for SubSystem: '<S255>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
      }

      proc_control_node_B.i_j = 0;
      proc_control_node_B.ibmat = 0;
      for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 6;
           proc_control_node_B.coffset++) {
        for (proc_control_node_B.aoffset = 0; proc_control_node_B.aoffset < 6;
             proc_control_node_B.aoffset++) {
          proc_control_node_B.k_d = proc_control_node_B.aoffset +
            proc_control_node_B.i_j;
          proc_control_node_B.constValues_g[proc_control_node_B.k_d] =
            proc_control_node_B.Jacobian[(proc_control_node_B.aoffset +
            proc_control_node_B.ibmat) + 98] -
            proc_control_node_B.pp_coefs[proc_control_node_B.k_d];
        }

        proc_control_node_B.i_j += 6;
        proc_control_node_B.ibmat += 13;
      }

      proc_control_node_mldivide(proc_control_node_B.dCoefs,
        proc_control_node_B.constValues_g, proc_control_node_B.pp_coefs);
      memcpy(&proc_control_node_B.imvec[0],
             &proc_control_node_B.TmpSignalConversionAtTransp[0], 13U * sizeof
             (real_T));
      proc_control_node_B.ibmat = 0;
      while (proc_control_node_B.ibmat <= static_cast<int32_T>
             (proc_control_node_B.MATLABSystem_o6) - 1) {
        proc_control_node_B.epsilon = proc_control_node_P.MPC.Ts /
          proc_control_node_B.MATLABSystem_o6;
        proc_control_node_AUVQuatSimFcn(proc_control_node_B.imvec,
          proc_control_node_DW.Delay1_DSTATE, proc_control_node_B.dv18);
        for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 13;
             proc_control_node_B.i_j++) {
          proc_control_node_B.imvec[proc_control_node_B.i_j] +=
            proc_control_node_B.dv18[proc_control_node_B.i_j] *
            proc_control_node_B.epsilon;
        }

        proc_control_node_B.ibmat++;
      }

      // MATLAB Function: '<S211>/FixedHorizonOptimizer'
      memset(&proc_control_node_B.Bu[0], 0, 1848U * sizeof(real_T));
      memset(&proc_control_node_B.Bv[0], 0, 231U * sizeof(real_T));
      memset(&proc_control_node_B.Dv[0], 0, 143U * sizeof(real_T));
      memcpy(&proc_control_node_B.b_A[0], &e[0], 441U * sizeof(real_T));
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 273;
           proc_control_node_B.i_j++) {
        proc_control_node_B.b_C[proc_control_node_B.i_j] =
          g[proc_control_node_B.i_j];
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        // MATLAB Function: '<S133>/MATLAB Function2'
        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.y_cq[proc_control_node_B.ibmat + 6 *
            proc_control_node_B.i_j] = 0.0;
        }

        for (proc_control_node_B.coffset = 0; proc_control_node_B.coffset < 6;
             proc_control_node_B.coffset++) {
          for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
               proc_control_node_B.ibmat++) {
            proc_control_node_B.k_d = 6 * proc_control_node_B.i_j +
              proc_control_node_B.ibmat;
            proc_control_node_B.y_cq[proc_control_node_B.k_d] +=
              proc_control_node_B.pp_coefs[6 * proc_control_node_B.coffset +
              proc_control_node_B.ibmat] * b_b[6 * proc_control_node_B.i_j +
              proc_control_node_B.coffset];
          }
        }

        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 7;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.Pxy[proc_control_node_B.ibmat + 13 *
            proc_control_node_B.i_j] = 0.0;
        }

        for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
             proc_control_node_B.ibmat++) {
          proc_control_node_B.Pxy[(proc_control_node_B.ibmat + 13 *
            proc_control_node_B.i_j) + 7] = proc_control_node_B.y_cq[6 *
            proc_control_node_B.i_j + proc_control_node_B.ibmat];
        }

        // MATLAB Function: '<S211>/FixedHorizonOptimizer'
        proc_control_node_B.u_scale_e[proc_control_node_B.i_j] =
          static_cast<real_T>(proc_control_node_B.i_j) + 1.0;
      }

      // MATLAB Function: '<S211>/FixedHorizonOptimizer'
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 13;
           proc_control_node_B.i_j++) {
        proc_control_node_B.dv18[proc_control_node_B.i_j] = static_cast<real_T>
          (proc_control_node_B.i_j) + 1.0;
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        proc_control_node_B.rtb_u_p_f[proc_control_node_B.i_j] = 1.0;
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 13;
           proc_control_node_B.i_j++) {
        proc_control_node_B.dv19[proc_control_node_B.i_j] = 1.0;
      }

      memcpy(&proc_control_node_B.f[0], &f[0], 630U * sizeof(real_T));

      // MATLAB Function: '<S211>/FixedHorizonOptimizer' incorporates:
      //   Delay: '<S133>/Delay1'
      //   Lookup_n-D: '<S13>/ PWM to N'
      //   Lookup_n-D: '<S7>/N to PWM'
      //   MATLAB Function: '<S133>/MATLAB Function2'
      //   Merge: '<S9>/Merge'
      //   Trigonometry: '<S259>/sincos'
      //   Trigonometry: '<S33>/sincos'
      //   Trigonometry: '<S88>/sincos'

      proc_control__mpc_plantupdate_k(proc_control_node_B.Jacobian,
        proc_control_node_B.Pxy, tmp_1, proc_control_node_B.b_A,
        proc_control_node_B.f, proc_control_node_B.b_C, h,
        proc_control_node_B.u_scale_e, proc_control_node_B.dv18,
        proc_control_node_B.rtb_u_p_f, proc_control_node_B.dv19,
        &proc_control_node_B.Bu[0], &proc_control_node_B.Bv[0],
        proc_control_node_B.d_f, &proc_control_node_B.Dv[0],
        proc_control_node_B.z_j, proc_control_node_B.Qk, proc_control_node_B.Ac,
        proc_control_node_B.Nk);
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 48;
           proc_control_node_B.i_j++) {
        proc_control_node_B.a__1_g[proc_control_node_B.i_j] =
          k[proc_control_node_B.i_j];
      }

      memset(&proc_control_node_B.b_utarget[0], 0, 80U * sizeof(real_T));
      memcpy(&proc_control_node_B.xk1[0], &o[0], 21U * sizeof(real_T));
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        proc_control_node_B.u_scale_e[proc_control_node_B.i_j] = 1.0;
        proc_control_node_B.rtb_u_p_f[proc_control_node_B.i_j] = 0.0;
        proc_control_node_B.u_p[proc_control_node_B.i_j] = static_cast<real_T>
          (proc_control_node_B.i_j) + 1.0;
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 13;
           proc_control_node_B.i_j++) {
        proc_control_node_B.dv18[proc_control_node_B.i_j] = 1.0;
        proc_control_node_B.dv19[proc_control_node_B.i_j] = static_cast<real_T>
          (proc_control_node_B.i_j) + 1.0;
        proc_control_node_B.imvec_c[proc_control_node_B.i_j] =
          proc_control_node_B.imvec[proc_control_node_B.i_j] -
          proc_control_node_B.TmpSignalConversionAtTransp[proc_control_node_B.i_j];
      }

      proc_co_mpc_updateFromNominal_h(proc_control_node_B.a__1_g, l,
        proc_control_node_DW.Delay1_DSTATE, proc_control_node_B.u_scale_e,
        proc_control_node_B.rtb_u_p_f, proc_control_node_B.u_p,
        proc_control_node_B.b_utarget,
        proc_control_node_B.TmpSignalConversionAtTransp,
        proc_control_node_B.dv18, n, proc_control_node_B.dv19,
        proc_control_node_B.TmpSignalConversionAtTransp, proc_control_node_B.xk1,
        proc_control_node_B.imvec_c, proc_control_node_B.Bv,
        proc_control_node_B.u, proc_control_node_B.imz, proc_control_node_B.z_j);
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 11;
           proc_control_node_B.ibmat++) {
        proc_control_node_B.vseq[proc_control_node_B.ibmat] = 1.0;
      }

      proc_control_node_B.coffset = 0;
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 10;
           proc_control_node_B.ibmat++) {
        // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
        //   EnablePort: '<S4>/Enable'

        // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
        //   EnablePort: '<S1>/Enable'

        // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
        // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
        //   EnablePort: '<S239>/Enable'

        // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
        //   EnablePort: '<S258>/Enable'

        proc_control_node_B.e_f = 0;

        // End of Outputs for SubSystem: '<S255>/Subsystem2'
        // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
        // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
        // End of Outputs for SubSystem: '<Root>/Modèle Physique'
        // End of Outputs for SubSystem: '<Root>/ROS Output'
        for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 13;
             proc_control_node_B.k_d++) {
          // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
          //   EnablePort: '<S4>/Enable'

          // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
          //   EnablePort: '<S1>/Enable'

          // Outputs for Atomic SubSystem: '<Root>/Subsystem ProcNav'
          // Outputs for Enabled SubSystem: '<S8>/DVL Mesurments' incorporates:
          //   EnablePort: '<S239>/Enable'

          // Outputs for Enabled SubSystem: '<S255>/Subsystem2' incorporates:
          //   EnablePort: '<S258>/Enable'

          proc_control_node_B.rseq[proc_control_node_B.k_d +
            proc_control_node_B.coffset] =
            proc_control_node_B.y_n[proc_control_node_B.e_f +
            proc_control_node_B.ibmat] -
            proc_control_node_B.imz[proc_control_node_B.k_d];
          proc_control_node_B.e_f += 10;

          // End of Outputs for SubSystem: '<S255>/Subsystem2'
          // End of Outputs for SubSystem: '<S8>/DVL Mesurments'
          // End of Outputs for SubSystem: '<Root>/Subsystem ProcNav'
          // End of Outputs for SubSystem: '<Root>/Modèle Physique'
          // End of Outputs for SubSystem: '<Root>/ROS Output'
        }

        proc_control_node_B.coffset += 13;
      }

      // DataTypeConversion: '<S183>/mo or x Conversion' incorporates:
      //   Constant: '<S133>/Constant'
      //   MATLAB Function: '<S211>/FixedHorizonOptimizer'
      //   UnitDelay: '<S183>/last_mv'

      proc_control_node_B.dv17[0] = proc_control_node_B.WorldPosition[0] -
        proc_control_node_B.xk1[0];
      proc_control_node_B.dv17[1] = proc_control_node_B.WorldPosition[1] -
        proc_control_node_B.xk1[1];
      proc_control_node_B.dv17[2] = proc_control_node_B.WorldPosition[2] -
        proc_control_node_B.xk1[2];
      proc_control_node_B.dv17[3] = proc_control_node_B.qS2W[0] -
        proc_control_node_B.xk1[3];
      proc_control_node_B.dv17[4] = proc_control_node_B.qS2W[1] -
        proc_control_node_B.xk1[4];
      proc_control_node_B.dv17[5] = proc_control_node_B.qS2W[2] -
        proc_control_node_B.xk1[5];
      proc_control_node_B.dv17[6] = proc_control_node_B.qS2W[3] -
        proc_control_node_B.xk1[6];
      proc_control_node_B.dv17[7] = proc_control_node_B.BodyVelocity[0] -
        proc_control_node_B.xk1[7];
      proc_control_node_B.dv17[10] = proc_control_node_B.AngularRate[0] -
        proc_control_node_B.xk1[10];
      proc_control_node_B.dv17[8] = proc_control_node_B.BodyVelocity[1] -
        proc_control_node_B.xk1[8];
      proc_control_node_B.dv17[11] = proc_control_node_B.AngularRate[1] -
        proc_control_node_B.xk1[11];
      proc_control_node_B.dv17[9] = proc_control_node_B.BodyVelocity[2] -
        proc_control_node_B.xk1[9];
      proc_control_node_B.dv17[12] = proc_control_node_B.AngularRate[2] -
        proc_control_node_B.xk1[12];
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        proc_control_node_B.dv17[proc_control_node_B.i_j + 13] =
          proc_control_node_P.Constant_Value_e3[proc_control_node_B.i_j] -
          proc_control_node_B.xk1[proc_control_node_B.i_j + 13];
        proc_control_node_B.u_scale_e[proc_control_node_B.i_j] =
          proc_control_node_DW.last_mv_DSTATE[proc_control_node_B.i_j] -
          proc_control_node_B.u[proc_control_node_B.i_j];
      }

      // End of DataTypeConversion: '<S183>/mo or x Conversion'

      // MATLAB Function: '<S211>/FixedHorizonOptimizer'
      memset(&proc_control_node_B.dv2[0], 0, 1008U * sizeof(real_T));
      memset(&proc_control_node_B.dv4[0], 0, 528U * sizeof(real_T));
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        proc_control_node_B.rtb_u_p_f[proc_control_node_B.i_j] =
          0.040000000000000008;
      }

      // Memory: '<S183>/Memory'
      for (proc_control_node_B.i2 = 0; proc_control_node_B.i2 < 48;
           proc_control_node_B.i2++) {
        proc_control_node_B.bv2[proc_control_node_B.i2] =
          proc_control_node_DW.Memory_PreviousInput[proc_control_node_B.i2];
      }

      // End of Memory: '<S183>/Memory'
      memcpy(&proc_control_node_B.q_l[0], &q[0], 384U * sizeof(real_T));
      memcpy(&proc_control_node_B.q[0], &r[0], 625U * sizeof(real_T));
      memcpy(&proc_control_node_B.s[0], &s[0], 1200U * sizeof(real_T));

      // Merge: '<S7>/Merge' incorporates:
      //   DiscretePulseGenerator: '<S133>/Pulse Generator'
      //   MATLAB Function: '<S211>/FixedHorizonOptimizer'
      //   Memory: '<S183>/Memory'

      proc_contr_mpcblock_optimizer_e(proc_control_node_B.rseq,
        proc_control_node_B.vseq, proc_control_node_B.dv17,
        proc_control_node_B.u_scale_e, proc_control_node_B.bv2,
        proc_control_node_B.a__1_g, proc_control_node_B.dv2,
        proc_control_node_B.q_l, proc_control_node_B.dv4,
        proc_control_node_B.b_utarget, proc_control_node_B.u,
        proc_control_node_B.q, proc_control_node_B.s, t, u, v,
        proc_control_node_B.rtb_u_p_f, w, proc_control_node_B.b_A,
        proc_control_node_B.Bu, proc_control_node_B.Bv, proc_control_node_B.b_C,
        proc_control_node_B.Dv, l, proc_control_node_B.u_p,
        proc_control_node_B.useq_f, &proc_control_node_B.Merge[8],
        proc_control_node_DW.Memory_PreviousInput);
      proc_control_node_B.Merge[9] = (proc_control_node_DW.clockTickCounter <
        proc_control_node_P.PulseGenerator_Duty_n) &&
        (proc_control_node_DW.clockTickCounter >= 0) ?
        proc_control_node_P.PulseGenerator_Amp_b : 0.0;

      // DiscretePulseGenerator: '<S133>/Pulse Generator'
      if (proc_control_node_DW.clockTickCounter >=
          proc_control_node_P.PulseGenerator_Period_h - 1.0) {
        proc_control_node_DW.clockTickCounter = 0;
      } else {
        proc_control_node_DW.clockTickCounter++;
      }

      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        proc_control_node_B.MATLABSystem_o6 =
          proc_control_node_B.u_p[proc_control_node_B.i_j];

        // Gain: '<S183>/u_scale'
        proc_control_node_B.MATLABSystem_o5 =
          proc_control_node_P.u_scale_Gain_c[proc_control_node_B.i_j] *
          proc_control_node_B.MATLABSystem_o6;

        // Merge: '<S7>/Merge' incorporates:
        //   Gain: '<S183>/u_scale'
        //   SignalConversion generated from: '<S133>/out'

        proc_control_node_B.Merge[proc_control_node_B.i_j] =
          proc_control_node_B.MATLABSystem_o5;

        // Update for UnitDelay: '<S183>/last_mv' incorporates:
        //   Gain: '<S183>/u_scale'

        proc_control_node_DW.last_mv_DSTATE[proc_control_node_B.i_j] =
          proc_control_node_B.MATLABSystem_o6;

        // Update for Delay: '<S133>/Delay1' incorporates:
        //   Gain: '<S183>/u_scale'

        proc_control_node_DW.Delay1_DSTATE[proc_control_node_B.i_j] =
          proc_control_node_B.MATLABSystem_o5;
      }

      // End of Outputs for SubSystem: '<S7>/Adaptive MPC quaternion '
      break;

     default:
      // Outputs for IfAction SubSystem: '<S7>/IDLE' incorporates:
      //   ActionPort: '<S134>/Action Port'

      // Merge: '<S7>/Merge' incorporates:
      //   Constant: '<S134>/Constant'
      //   Constant: '<S134>/Constant1'
      //   Constant: '<S134>/Constant2'
      //   SignalConversion generated from: '<S134>/out'

      memcpy(&proc_control_node_B.Merge[0],
             &proc_control_node_P.Constant1_Value_n[0], sizeof(real_T) << 3U);
      proc_control_node_B.Merge[8] = proc_control_node_P.Constant_Value_mg;
      proc_control_node_B.Merge[9] = proc_control_node_P.Constant2_Value;

      // End of Outputs for SubSystem: '<S7>/IDLE'
      break;
    }

    // End of SwitchCase: '<S7>/Switch Case'
    for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
         proc_control_node_B.i_j++) {
      // Saturate: '<S7>/Saturation'
      proc_control_node_B.Divide2_h =
        proc_control_node_B.Merge[proc_control_node_B.i_j];
      if (proc_control_node_B.Divide2_h > proc_control_node_P.MPC.tmax) {
        // Saturate: '<S7>/Saturation'
        proc_control_node_B.Saturation[proc_control_node_B.i_j] =
          proc_control_node_P.MPC.tmax;
      } else if (proc_control_node_B.Divide2_h < proc_control_node_P.MPC.tmin) {
        // Saturate: '<S7>/Saturation'
        proc_control_node_B.Saturation[proc_control_node_B.i_j] =
          proc_control_node_P.MPC.tmin;
      } else {
        // Saturate: '<S7>/Saturation'
        proc_control_node_B.Saturation[proc_control_node_B.i_j] =
          proc_control_node_B.Divide2_h;
      }

      // End of Saturate: '<S7>/Saturation'
    }

    // Lookup_n-D: '<S7>/N to PWM' incorporates:
    //   Saturate: '<S7>/Saturation'

    for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 8;
         proc_control_node_B.k_d++) {
      proc_control_node_B.bpIdx = plook_u32d_binckpang
        (proc_control_node_B.Saturation[proc_control_node_B.k_d],
         proc_control_node_P.N, 200U,
         &proc_control_node_DW.m_bpIndex[proc_control_node_B.k_d]);
      proc_control_node_B.NtoPWM[proc_control_node_B.k_d] =
        proc_control_node_P.PWM[proc_control_node_B.bpIdx];
    }

    // End of Outputs for SubSystem: '<Root>/Subsystem Controller'

    // Outputs for Enabled SubSystem: '<Root>/Send Data to ROS' incorporates:
    //   EnablePort: '<S5>/Enable'

    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_DW.SendDatatoROS_MODE =
        (proc_control_node_B.MATLABSystem_o7 > 0.0);
    }

    // End of Outputs for SubSystem: '<Root>/Send Data to ROS'
  }

  // Outputs for Enabled SubSystem: '<Root>/Send Data to ROS' incorporates:
  //   EnablePort: '<S5>/Enable'

  if (proc_control_node_DW.SendDatatoROS_MODE) {
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
      // MATLAB Function: '<S5>/MATLAB Function3' incorporates:
      //   Constant: '<S105>/Constant'
      //   Inport: '<S5>/pwm'
      //   Lookup_n-D: '<S7>/N to PWM'

      proc_control_node_B.msg = proc_control_node_P.Constant_Value;
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 8;
           proc_control_node_B.i_j++) {
        proc_control_node_B.pwm[proc_control_node_B.i_j] =
          proc_control_node_B.NtoPWM[proc_control_node_B.i_j];
        proc_control_node_B.msg.Data[proc_control_node_B.i_j] =
          proc_control_node_B.pwm[proc_control_node_B.i_j];
      }

      proc_control_node_B.msg.Data_SL_Info.CurrentLength = 8U;

      // End of MATLAB Function: '<S5>/MATLAB Function3'

      // Outputs for Atomic SubSystem: '<S5>/Publish2'
      // MATLABSystem: '<S110>/SinkBlock'
      Pub_proc_control_node_104.publish(&proc_control_node_B.msg);

      // End of Outputs for SubSystem: '<S5>/Publish2'

      // ZeroOrderHold: '<S5>/Zero-Order Hold1'
      if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
          (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
        // ZeroOrderHold: '<S5>/Zero-Order Hold1' incorporates:
        //   DataTypeConversion: '<S5>/Data Type Conversion3'
        //   Delay: '<S5>/Delay'
        //   Sum: '<S5>/Sum'

        proc_control_node_B.ZeroOrderHold1 =
          (proc_control_node_DW.Delay_DSTATE_d - proc_control_node_B.Merge[9] !=
           0.0);
      }

      // End of ZeroOrderHold: '<S5>/Zero-Order Hold1'
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
      // BusAssignment: '<S5>/Bus Assignment1'
      rtb_BusAssignment1.Data = proc_control_node_B.ZeroOrderHold1;

      // Outputs for Atomic SubSystem: '<S5>/Publish4'
      // MATLABSystem: '<S112>/SinkBlock'
      Pub_proc_control_node_106.publish(&rtb_BusAssignment1);

      // End of Outputs for SubSystem: '<S5>/Publish4'
    }

    // ZeroOrderHold: '<S5>/Zero-Order Hold'
    if ((rtmIsMajorTimeStep((&proc_control_node_M)) &&
         (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) &&
        (rtmIsMajorTimeStep((&proc_control_node_M)) &&
         (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0)) {
      // ZeroOrderHold: '<S5>/Zero-Order Hold'
      proc_control_node_B.ZeroOrderHold = proc_control_node_B.Merge[8];
    }

    // End of ZeroOrderHold: '<S5>/Zero-Order Hold'
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
      // DataTypeConversion: '<S5>/Data Type Conversion2'
      proc_control_node_B.MATLABSystem_o7 = fabs
        (proc_control_node_B.ZeroOrderHold);
      if (proc_control_node_B.MATLABSystem_o7 < 4.503599627370496E+15) {
        if (proc_control_node_B.MATLABSystem_o7 >= 0.5) {
          // BusAssignment: '<S5>/Bus Assignment'
          rtb_BusAssignment.Data = static_cast<int8_T>(floor
            (proc_control_node_B.ZeroOrderHold + 0.5));
        } else {
          // BusAssignment: '<S5>/Bus Assignment'
          rtb_BusAssignment.Data = static_cast<int8_T>
            (proc_control_node_B.ZeroOrderHold * 0.0);
        }
      } else {
        // BusAssignment: '<S5>/Bus Assignment'
        rtb_BusAssignment.Data = static_cast<int8_T>
          (proc_control_node_B.ZeroOrderHold);
      }

      // End of DataTypeConversion: '<S5>/Data Type Conversion2'

      // Outputs for Atomic SubSystem: '<S5>/Publish3'
      // MATLABSystem: '<S111>/SinkBlock'
      Pub_proc_control_node_105.publish(&rtb_BusAssignment);

      // End of Outputs for SubSystem: '<S5>/Publish3'
    }

    // ZeroOrderHold: '<S5>/Zero-Order Hold2'
    if ((rtmIsMajorTimeStep((&proc_control_node_M)) &&
         (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) &&
        (rtmIsMajorTimeStep((&proc_control_node_M)) &&
         (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0)) {
      // ZeroOrderHold: '<S5>/Zero-Order Hold2'
      proc_control_node_B.ZeroOrderHold2 = proc_control_node_B.Merge1;
    }

    // End of ZeroOrderHold: '<S5>/Zero-Order Hold2'
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[5] == 0) {
      // BusAssignment: '<S5>/Bus Assignment2'
      rtb_BusAssignment2.Data = proc_control_node_B.ZeroOrderHold2;

      // Outputs for Atomic SubSystem: '<S5>/Publish1'
      // MATLABSystem: '<S109>/SinkBlock'
      Pub_proc_control_node_122.publish(&rtb_BusAssignment2);

      // End of Outputs for SubSystem: '<S5>/Publish1'
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
      // Update for Delay: '<S5>/Delay'
      proc_control_node_DW.Delay_DSTATE_d = proc_control_node_B.Merge[9];
    }
  }

  // End of Outputs for SubSystem: '<Root>/Send Data to ROS'

  // Outputs for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
  //   EnablePort: '<S1>/Enable'

  if ((rtmIsMajorTimeStep((&proc_control_node_M)) &&
       (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) &&
      rtmIsMajorTimeStep((&proc_control_node_M))) {
    proc_control_node_DW.ModlePhysique_MODE =
      (proc_control_node_B.MATLABSystem_o3 > 0.0);
  }

  if (proc_control_node_DW.ModlePhysique_MODE) {
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[6] == 0) {
      // UniformRandomNumber: '<S14>/X Drift'
      proc_control_node_B.XDrift = proc_control_node_DW.XDrift_NextOutput;

      // UniformRandomNumber: '<S14>/Y Drift'
      proc_control_node_B.YDrift = proc_control_node_DW.YDrift_NextOutput;
    }

    // Integrator: '<S1>/Integrator' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'

    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_B.zcEvent = rt_ZCFcn(RISING_ZERO_CROSSING,
        &proc_control_node_PrevZCX.Integrator_Reset_ZCE,
        (proc_control_node_B.MATLABSystem_o4));

      // evaluate zero-crossings
      if ((proc_control_node_B.zcEvent != NO_ZCEVENT) ||
          (proc_control_node_DW.Integrator_IWORK != 0)) {
        proc_control_node_X.Integrator_CSTATE[0] =
          proc_control_node_B.MATLABSystem_o2[0];
        proc_control_node_X.Integrator_CSTATE[1] =
          proc_control_node_B.MATLABSystem_o2[1];
        proc_control_node_X.Integrator_CSTATE[2] =
          proc_control_node_B.MATLABSystem_o2[2];
      }
    }

    // Integrator: '<S1>/Integrator'
    proc_control_node_B.WorldPosition_d[0] =
      proc_control_node_X.Integrator_CSTATE[0];
    proc_control_node_B.WorldPosition_d[1] =
      proc_control_node_X.Integrator_CSTATE[1];
    proc_control_node_B.WorldPosition_d[2] =
      proc_control_node_X.Integrator_CSTATE[2];

    // Sum: '<S14>/Add' incorporates:
    //   Constant: '<S14>/Constant'
    //   Constant: '<S14>/Constant1'
    //   Product: '<S14>/Product'

    proc_control_node_B.MATLABSystem_o7 = proc_control_node_B.WorldPosition_d[2]
      * proc_control_node_P.dampA + proc_control_node_P.dampB;

    // Saturate: '<S14>/Saturation'
    if (proc_control_node_B.MATLABSystem_o7 > proc_control_node_P.ratioMax) {
      proc_control_node_B.MATLABSystem_o7 = proc_control_node_P.ratioMax;
    } else if (proc_control_node_B.MATLABSystem_o7 <
               proc_control_node_P.ratioMin) {
      proc_control_node_B.MATLABSystem_o7 = proc_control_node_P.ratioMin;
    }

    // End of Saturate: '<S14>/Saturation'

    // Sin: '<S14>/X Wave' incorporates:
    //   Sin: '<S14>/Pitch Wave'
    //   Sin: '<S14>/Roll Wave'
    //   Sin: '<S14>/Yaw Wave'

    proc_control_node_B.Product1_j5_b = (&proc_control_node_M)->Timing.t[0];

    // Integrator: '<S1>/Integrator1' incorporates:
    //   MATLABSystem: '<S10>/MATLAB System'

    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_B.zcEvent = rt_ZCFcn(RISING_ZERO_CROSSING,
        &proc_control_node_PrevZCX.Integrator1_Reset_ZCE,
        (proc_control_node_B.MATLABSystem_o4));

      // evaluate zero-crossings
      if ((proc_control_node_B.zcEvent != NO_ZCEVENT) ||
          (proc_control_node_DW.Integrator1_IWORK != 0)) {
        proc_control_node_X.Integrator1_CSTATE[0] =
          proc_control_node_B.MATLABSystem_o1[0];
        proc_control_node_X.Integrator1_CSTATE[1] =
          proc_control_node_B.MATLABSystem_o1[1];
        proc_control_node_X.Integrator1_CSTATE[2] =
          proc_control_node_B.MATLABSystem_o1[2];
        proc_control_node_X.Integrator1_CSTATE[3] =
          proc_control_node_B.MATLABSystem_o1[3];
      }
    }

    // MATLAB Function: '<S1>/Quaternion Normalise' incorporates:
    //   Integrator: '<S1>/Integrator1'

    proc_control_node_B.scale = 3.3121686421112381E-170;
    proc_control_node_B.absxk = fabs(proc_control_node_X.Integrator1_CSTATE[0]);
    if (proc_control_node_B.absxk > 3.3121686421112381E-170) {
      proc_control_node_B.d_h = 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        3.3121686421112381E-170;
      proc_control_node_B.d_h = proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = fabs(proc_control_node_X.Integrator1_CSTATE[1]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d_h = proc_control_node_B.d_h * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d_h += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = fabs(proc_control_node_X.Integrator1_CSTATE[2]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d_h = proc_control_node_B.d_h * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d_h += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.absxk = fabs(proc_control_node_X.Integrator1_CSTATE[3]);
    if (proc_control_node_B.absxk > proc_control_node_B.scale) {
      proc_control_node_B.t = proc_control_node_B.scale /
        proc_control_node_B.absxk;
      proc_control_node_B.d_h = proc_control_node_B.d_h * proc_control_node_B.t *
        proc_control_node_B.t + 1.0;
      proc_control_node_B.scale = proc_control_node_B.absxk;
    } else {
      proc_control_node_B.t = proc_control_node_B.absxk /
        proc_control_node_B.scale;
      proc_control_node_B.d_h += proc_control_node_B.t * proc_control_node_B.t;
    }

    proc_control_node_B.d_h = proc_control_node_B.scale * sqrt
      (proc_control_node_B.d_h);
    proc_control_node_B.y_g[0] = proc_control_node_X.Integrator1_CSTATE[0] /
      proc_control_node_B.d_h;
    proc_control_node_B.y_g[1] = proc_control_node_X.Integrator1_CSTATE[1] /
      proc_control_node_B.d_h;
    proc_control_node_B.y_g[2] = proc_control_node_X.Integrator1_CSTATE[2] /
      proc_control_node_B.d_h;
    proc_control_node_B.y_g[3] = proc_control_node_X.Integrator1_CSTATE[3] /
      proc_control_node_B.d_h;

    // End of MATLAB Function: '<S1>/Quaternion Normalise'
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Constant: '<S1>/Initial Body velocity '
      proc_control_node_B.InitialBodyvelocity[0] =
        proc_control_node_P.InitialBodyvelocity_Value[0];
      proc_control_node_B.InitialBodyvelocity[1] =
        proc_control_node_P.InitialBodyvelocity_Value[1];
      proc_control_node_B.InitialBodyvelocity[2] =
        proc_control_node_P.InitialBodyvelocity_Value[2];
    }

    // Integrator: '<S1>/Integrator2'
    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_B.zcEvent = rt_ZCFcn(RISING_ZERO_CROSSING,
        &proc_control_node_PrevZCX.Integrator2_Reset_ZCE,
        (proc_control_node_B.MATLABSystem_o4));

      // evaluate zero-crossings
      if ((proc_control_node_B.zcEvent != NO_ZCEVENT) ||
          (proc_control_node_DW.Integrator2_IWORK != 0)) {
        proc_control_node_X.Integrator2_CSTATE[0] =
          proc_control_node_B.InitialBodyvelocity[0];
        proc_control_node_X.Integrator2_CSTATE[1] =
          proc_control_node_B.InitialBodyvelocity[1];
        proc_control_node_X.Integrator2_CSTATE[2] =
          proc_control_node_B.InitialBodyvelocity[2];
      }
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Constant: '<S1>/Initial Angular Rates'
      proc_control_node_B.InitialAngularRates[0] =
        proc_control_node_P.InitialAngularRates_Value[0];
      proc_control_node_B.InitialAngularRates[1] =
        proc_control_node_P.InitialAngularRates_Value[1];
      proc_control_node_B.InitialAngularRates[2] =
        proc_control_node_P.InitialAngularRates_Value[2];
    }

    // Integrator: '<S1>/Integrator3'
    if (rtmIsMajorTimeStep((&proc_control_node_M))) {
      proc_control_node_B.zcEvent = rt_ZCFcn(RISING_ZERO_CROSSING,
        &proc_control_node_PrevZCX.Integrator3_Reset_ZCE,
        (proc_control_node_B.MATLABSystem_o4));

      // evaluate zero-crossings
      if ((proc_control_node_B.zcEvent != NO_ZCEVENT) ||
          (proc_control_node_DW.Integrator3_IWORK != 0)) {
        proc_control_node_X.Integrator3_CSTATE[0] =
          proc_control_node_B.InitialAngularRates[0];
        proc_control_node_X.Integrator3_CSTATE[1] =
          proc_control_node_B.InitialAngularRates[1];
        proc_control_node_X.Integrator3_CSTATE[2] =
          proc_control_node_B.InitialAngularRates[2];
      }
    }

    // SignalConversion generated from: '<S11>/ SFunction ' incorporates:
    //   Integrator: '<S1>/Integrator2'
    //   Integrator: '<S1>/Integrator3'
    //   MATLAB Function: '<S1>/AUV State Equation'

    proc_control_node_B.dv18[0] = proc_control_node_B.WorldPosition_d[0];
    proc_control_node_B.dv18[1] = proc_control_node_B.WorldPosition_d[1];
    proc_control_node_B.dv18[2] = proc_control_node_B.WorldPosition_d[2];
    proc_control_node_B.dv18[3] = proc_control_node_B.y_g[0];
    proc_control_node_B.dv18[4] = proc_control_node_B.y_g[1];
    proc_control_node_B.dv18[5] = proc_control_node_B.y_g[2];
    proc_control_node_B.dv18[6] = proc_control_node_B.y_g[3];
    proc_control_node_B.dv18[7] = proc_control_node_X.Integrator2_CSTATE[0];
    proc_control_node_B.dv18[10] = proc_control_node_X.Integrator3_CSTATE[0];
    proc_control_node_B.dv18[8] = proc_control_node_X.Integrator2_CSTATE[1];
    proc_control_node_B.dv18[11] = proc_control_node_X.Integrator3_CSTATE[1];
    proc_control_node_B.dv18[9] = proc_control_node_X.Integrator2_CSTATE[2];
    proc_control_node_B.dv18[12] = proc_control_node_X.Integrator3_CSTATE[2];

    // SignalConversion generated from: '<S11>/ SFunction ' incorporates:
    //   Constant: '<S14>/Z Drift'
    //   MATLAB Function: '<S1>/AUV State Equation'
    //   Product: '<S14>/Product1'
    //   Product: '<S14>/Product2'
    //   Sin: '<S14>/Pitch Wave'
    //   Sin: '<S14>/Roll Wave'
    //   Sin: '<S14>/X Wave'
    //   Sin: '<S14>/Y Wave'
    //   Sin: '<S14>/Yaw Wave'
    //   Sin: '<S14>/Z Wave'
    //   Sum: '<S14>/Sum2'

    proc_control_node_B.Gain_fn[0] = (sin(proc_control_node_P.wfX *
      proc_control_node_B.Product1_j5_b + proc_control_node_P.wpX) *
      proc_control_node_P.waX + proc_control_node_P.XWave_Bias) *
      proc_control_node_B.MATLABSystem_o7 + proc_control_node_B.XDrift;
    proc_control_node_B.Gain_fn[1] = (sin(proc_control_node_P.wfY *
      proc_control_node_B.Product1_j5_b + proc_control_node_P.wpY) *
      proc_control_node_P.waY + proc_control_node_P.YWave_Bias) *
      proc_control_node_B.MATLABSystem_o7 + proc_control_node_B.YDrift;
    proc_control_node_B.Gain_fn[2] = (sin(proc_control_node_P.wfZ *
      proc_control_node_B.Product1_j5_b + proc_control_node_P.wpZ) *
      proc_control_node_P.waZ + proc_control_node_P.ZWave_Bias) *
      proc_control_node_B.MATLABSystem_o7 + proc_control_node_P.ZDrift_Value;
    proc_control_node_B.Gain_fn[3] = (sin(proc_control_node_P.wfPhi *
      proc_control_node_B.Product1_j5_b + proc_control_node_P.wpPhi) *
      proc_control_node_P.waPhi + proc_control_node_P.RollWave_Bias) *
      proc_control_node_B.MATLABSystem_o7;
    proc_control_node_B.Gain_fn[4] = (sin(proc_control_node_P.wfTheta *
      proc_control_node_B.Product1_j5_b + proc_control_node_P.wpTheta) *
      proc_control_node_P.waTheta + proc_control_node_P.PitchWave_Bias) *
      proc_control_node_B.MATLABSystem_o7;
    proc_control_node_B.Gain_fn[5] = (sin(proc_control_node_P.wfPsi *
      proc_control_node_B.Product1_j5_b + proc_control_node_P.wpPsi) *
      proc_control_node_P.waPsi + proc_control_node_P.YawWave_Bias) *
      proc_control_node_B.MATLABSystem_o7;

    // SignalConversion generated from: '<S11>/ SFunction ' incorporates:
    //   MATLAB Function: '<S1>/AUV State Equation'
    //   TransferFcn: '<S17>/Transfer Fcn'
    //   TransferFcn: '<S18>/Transfer Fcn'
    //   TransferFcn: '<S19>/Transfer Fcn'
    //   TransferFcn: '<S20>/Transfer Fcn'
    //   TransferFcn: '<S21>/Transfer Fcn'
    //   TransferFcn: '<S22>/Transfer Fcn'
    //   TransferFcn: '<S23>/Transfer Fcn'
    //   TransferFcn: '<S24>/Transfer Fcn'

    proc_control_node_B.u[0] = proc_control_node_P.TransferFcn_C *
      proc_control_node_X.TransferFcn_CSTATE;
    proc_control_node_B.u[1] = proc_control_node_P.TransferFcn_C_m *
      proc_control_node_X.TransferFcn_CSTATE_o;
    proc_control_node_B.u[2] = proc_control_node_P.TransferFcn_C_l *
      proc_control_node_X.TransferFcn_CSTATE_p;
    proc_control_node_B.u[3] = proc_control_node_P.TransferFcn_C_f *
      proc_control_node_X.TransferFcn_CSTATE_a;
    proc_control_node_B.u[4] = proc_control_node_P.TransferFcn_C_n *
      proc_control_node_X.TransferFcn_CSTATE_f;
    proc_control_node_B.u[5] = proc_control_node_P.TransferFcn_C_nr *
      proc_control_node_X.TransferFcn_CSTATE_e;
    proc_control_node_B.u[6] = proc_control_node_P.TransferFcn_C_h *
      proc_control_node_X.TransferFcn_CSTATE_ft;
    proc_control_node_B.u[7] = proc_control_node_P.TransferFcn_C_fa *
      proc_control_node_X.TransferFcn_CSTATE_fu;

    // MATLAB Function: '<S1>/AUV State Equation'
    proc_con_AUVQuatPerturbedSimFcn(proc_control_node_B.dv18,
      proc_control_node_B.Gain_fn, proc_control_node_B.u,
      proc_control_node_B.TmpSignalConversionAtTransp);
    proc_control_node_B.Position_dot[0] =
      proc_control_node_B.TmpSignalConversionAtTransp[0];
    proc_control_node_B.Position_dot[1] =
      proc_control_node_B.TmpSignalConversionAtTransp[1];
    proc_control_node_B.Position_dot[2] =
      proc_control_node_B.TmpSignalConversionAtTransp[2];
    proc_control_node_B.Quaternion_dot[0] =
      proc_control_node_B.TmpSignalConversionAtTransp[3];
    proc_control_node_B.Quaternion_dot[1] =
      proc_control_node_B.TmpSignalConversionAtTransp[4];
    proc_control_node_B.Quaternion_dot[2] =
      proc_control_node_B.TmpSignalConversionAtTransp[5];
    proc_control_node_B.Quaternion_dot[3] =
      proc_control_node_B.TmpSignalConversionAtTransp[6];
    proc_control_node_B.BodyVelocity_dot[0] =
      proc_control_node_B.TmpSignalConversionAtTransp[7];
    proc_control_node_B.AngularRates_dot[0] =
      proc_control_node_B.TmpSignalConversionAtTransp[10];
    proc_control_node_B.BodyVelocity_dot[1] =
      proc_control_node_B.TmpSignalConversionAtTransp[8];
    proc_control_node_B.AngularRates_dot[1] =
      proc_control_node_B.TmpSignalConversionAtTransp[11];
    proc_control_node_B.BodyVelocity_dot[2] =
      proc_control_node_B.TmpSignalConversionAtTransp[9];
    proc_control_node_B.AngularRates_dot[2] =
      proc_control_node_B.TmpSignalConversionAtTransp[12];
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
      // MATLAB Function: '<S1>/MATLAB Function'
      for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 8;
           proc_control_node_B.ibmat++) {
        rtb_NtoPWM = proc_control_node_B.pwm[proc_control_node_B.ibmat];
        if (rtb_NtoPWM < 1100) {
          rtb_NtoPWM = 1500U;
        } else if (rtb_NtoPWM > 1900) {
          rtb_NtoPWM = 1500U;
        }

        proc_control_node_B.NtoPWM[proc_control_node_B.ibmat] = rtb_NtoPWM;
      }

      // End of MATLAB Function: '<S1>/MATLAB Function'

      // Lookup_n-D: '<S13>/ PWM to N'
      for (proc_control_node_B.k_d = 0; proc_control_node_B.k_d < 8;
           proc_control_node_B.k_d++) {
        proc_control_node_B.bpIdx = plook_u32u16_binckpan
          (proc_control_node_B.NtoPWM[proc_control_node_B.k_d],
           proc_control_node_P.PWM, 200U,
           &proc_control_node_DW.m_bpIndex_m[proc_control_node_B.k_d]);
        proc_control_node_B.PWMtoN[proc_control_node_B.k_d] =
          proc_control_node_P.N[proc_control_node_B.bpIdx];
      }
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
      // Gain: '<S25>/Output' incorporates:
      //   RandomNumber: '<S25>/White Noise'

      proc_control_node_B.Output = sqrt
        (proc_control_node_P.BandLimitedWhiteNoise_Cov) / 0.22360679774997896 *
        proc_control_node_DW.NextOutput;

      // Gain: '<S26>/Output' incorporates:
      //   RandomNumber: '<S26>/White Noise'

      proc_control_node_B.Output_i = sqrt
        (proc_control_node_P.BandLimitedWhiteNoise1_Cov) / 0.22360679774997896 *
        proc_control_node_DW.NextOutput_b;

      // Gain: '<S27>/Output' incorporates:
      //   RandomNumber: '<S27>/White Noise'

      proc_control_node_B.Output_l = sqrt
        (proc_control_node_P.BandLimitedWhiteNoise2_Cov) / 0.22360679774997896 *
        proc_control_node_DW.NextOutput_g;
    }

    // Product: '<S35>/Product' incorporates:
    //   MATLAB Function: '<S16>/MATLAB Function'

    proc_control_node_B.scale = proc_control_node_B.y_g[0] *
      proc_control_node_B.y_g[0];

    // Sum: '<S35>/Sum' incorporates:
    //   Product: '<S35>/Product'
    //   Product: '<S35>/Product1'
    //   Product: '<S35>/Product2'
    //   Product: '<S35>/Product3'
    //   UnaryMinus: '<S30>/Unary Minus'
    //   UnaryMinus: '<S30>/Unary Minus1'
    //   UnaryMinus: '<S30>/Unary Minus2'

    proc_control_node_B.MATLABSystem_o6 = ((proc_control_node_B.scale +
      -proc_control_node_B.y_g[1] * -proc_control_node_B.y_g[1]) +
      -proc_control_node_B.y_g[2] * -proc_control_node_B.y_g[2]) +
      -proc_control_node_B.y_g[3] * -proc_control_node_B.y_g[3];

    // Product: '<S28>/Divide'
    proc_control_node_B.Divide1_n = proc_control_node_B.y_g[0] /
      proc_control_node_B.MATLABSystem_o6;

    // Product: '<S28>/Divide1' incorporates:
    //   UnaryMinus: '<S30>/Unary Minus'

    proc_control_node_B.Divide2_h = proc_control_node_B.y_g[1] /
      proc_control_node_B.MATLABSystem_o6;

    // Product: '<S28>/Divide2' incorporates:
    //   UnaryMinus: '<S30>/Unary Minus1'

    proc_control_node_B.Product8 = proc_control_node_B.y_g[2] /
      proc_control_node_B.MATLABSystem_o6;

    // Product: '<S28>/Divide3' incorporates:
    //   UnaryMinus: '<S30>/Unary Minus2'

    proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.y_g[3] /
      proc_control_node_B.MATLABSystem_o6;
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Gain: '<S33>/1//2' incorporates:
      //   Constant: '<S16>/ y devant Z haut'

      proc_control_node_B.t13 = proc_control_node_P.u2_Gain *
        proc_control_node_P.ydevantZhaut_Value[0];

      // Trigonometry: '<S33>/sincos'
      proc_control_node_B.epsilon = sin(proc_control_node_B.t13);
      proc_control_node_B.Product1_j5_b = cos(proc_control_node_B.t13);

      // Gain: '<S33>/1//2' incorporates:
      //   Constant: '<S16>/ y devant Z haut'

      proc_control_node_B.t13 = proc_control_node_P.u2_Gain *
        proc_control_node_P.ydevantZhaut_Value[1];

      // Trigonometry: '<S33>/sincos'
      proc_control_node_B.Product1_j5 = sin(proc_control_node_B.t13);
      proc_control_node_B.d_h = cos(proc_control_node_B.t13);

      // Gain: '<S33>/1//2' incorporates:
      //   Constant: '<S16>/ y devant Z haut'

      proc_control_node_B.t13 = proc_control_node_P.u2_Gain *
        proc_control_node_P.ydevantZhaut_Value[2];

      // Trigonometry: '<S33>/sincos'
      proc_control_node_B.MATLABSystem_o7 = sin(proc_control_node_B.t13);
      proc_control_node_B.Product2_gc = cos(proc_control_node_B.t13);

      // Fcn: '<S33>/q2' incorporates:
      //   Fcn: '<S33>/q1'

      proc_control_node_B.t13 = proc_control_node_B.Product1_j5_b *
        proc_control_node_B.Product1_j5;
      proc_control_node_B.fcn2 = proc_control_node_B.epsilon *
        proc_control_node_B.d_h;
      proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.t13 *
        proc_control_node_B.Product2_gc - proc_control_node_B.fcn2 *
        proc_control_node_B.MATLABSystem_o7;

      // Fcn: '<S33>/q0' incorporates:
      //   Fcn: '<S33>/q3'

      proc_control_node_B.d_h *= proc_control_node_B.Product1_j5_b;
      proc_control_node_B.Product1_j5 *= proc_control_node_B.epsilon;
      proc_control_node_B.epsilon = proc_control_node_B.d_h *
        proc_control_node_B.Product2_gc - proc_control_node_B.Product1_j5 *
        proc_control_node_B.MATLABSystem_o7;

      // Fcn: '<S33>/q1'
      proc_control_node_B.Product1_j5_b = proc_control_node_B.t13 *
        proc_control_node_B.MATLABSystem_o7 + proc_control_node_B.fcn2 *
        proc_control_node_B.Product2_gc;

      // Fcn: '<S33>/q3'
      proc_control_node_B.Product2_gc = proc_control_node_B.d_h *
        proc_control_node_B.MATLABSystem_o7 + proc_control_node_B.Product1_j5 *
        proc_control_node_B.Product2_gc;

      // Sqrt: '<S46>/sqrt' incorporates:
      //   Product: '<S47>/Product'
      //   Product: '<S47>/Product1'
      //   Product: '<S47>/Product2'
      //   Product: '<S47>/Product3'
      //   Sum: '<S47>/Sum'

      proc_control_node_B.MATLABSystem_o7 = sqrt(((proc_control_node_B.epsilon *
        proc_control_node_B.epsilon + proc_control_node_B.Product1_j5_b *
        proc_control_node_B.Product1_j5_b) + proc_control_node_B.MATLABSystem_o5
        * proc_control_node_B.MATLABSystem_o5) + proc_control_node_B.Product2_gc
        * proc_control_node_B.Product2_gc);

      // Product: '<S42>/Product2'
      proc_control_node_B.MATLABSystem_o5 /= proc_control_node_B.MATLABSystem_o7;

      // Product: '<S42>/Product3'
      proc_control_node_B.Product2_gc /= proc_control_node_B.MATLABSystem_o7;

      // Product: '<S43>/Product7' incorporates:
      //   Product: '<S44>/Product7'

      proc_control_node_B.Product1_j5 = proc_control_node_B.Product2_gc *
        proc_control_node_B.Product2_gc;

      // Gain: '<S43>/Gain2' incorporates:
      //   Constant: '<S43>/Constant'
      //   Product: '<S43>/Product6'
      //   Product: '<S43>/Product7'
      //   Sum: '<S43>/Sum3'

      proc_control_node_B.Gain2_k0 = ((proc_control_node_P.Constant_Value_k2 -
        proc_control_node_B.MATLABSystem_o5 *
        proc_control_node_B.MATLABSystem_o5) - proc_control_node_B.Product1_j5) *
        proc_control_node_P.Gain2_Gain;

      // Product: '<S42>/Product1'
      proc_control_node_B.Product1_j5_b /= proc_control_node_B.MATLABSystem_o7;

      // Product: '<S42>/Product'
      proc_control_node_B.epsilon /= proc_control_node_B.MATLABSystem_o7;

      // Product: '<S43>/Product' incorporates:
      //   Product: '<S44>/Product'

      proc_control_node_B.d_h = proc_control_node_B.Product1_j5_b *
        proc_control_node_B.MATLABSystem_o5;

      // Product: '<S43>/Product1' incorporates:
      //   Product: '<S44>/Product1'

      proc_control_node_B.t13 = proc_control_node_B.epsilon *
        proc_control_node_B.Product2_gc;

      // Gain: '<S43>/Gain' incorporates:
      //   Product: '<S43>/Product'
      //   Product: '<S43>/Product1'
      //   Sum: '<S43>/Sum1'

      proc_control_node_B.Gain_c = (proc_control_node_B.d_h +
        proc_control_node_B.t13) * proc_control_node_P.Gain_Gain;

      // Product: '<S43>/Product3' incorporates:
      //   Product: '<S45>/Product'

      proc_control_node_B.MATLABSystem_o7 = proc_control_node_B.Product1_j5_b *
        proc_control_node_B.Product2_gc;

      // Product: '<S43>/Product2' incorporates:
      //   Product: '<S45>/Product1'

      proc_control_node_B.absxk = proc_control_node_B.epsilon *
        proc_control_node_B.MATLABSystem_o5;

      // Gain: '<S43>/Gain1' incorporates:
      //   Product: '<S43>/Product2'
      //   Product: '<S43>/Product3'
      //   Sum: '<S43>/Sum2'

      proc_control_node_B.Gain1_cn = (proc_control_node_B.MATLABSystem_o7 -
        proc_control_node_B.absxk) * proc_control_node_P.Gain1_Gain;

      // Gain: '<S44>/Gain' incorporates:
      //   Sum: '<S44>/Sum1'

      proc_control_node_B.Gain_cr = (proc_control_node_B.d_h -
        proc_control_node_B.t13) * proc_control_node_P.Gain_Gain_e;

      // Product: '<S44>/Product6' incorporates:
      //   Product: '<S45>/Product6'

      proc_control_node_B.d_h = proc_control_node_B.Product1_j5_b *
        proc_control_node_B.Product1_j5_b;

      // Gain: '<S44>/Gain2' incorporates:
      //   Constant: '<S44>/Constant'
      //   Product: '<S44>/Product6'
      //   Sum: '<S44>/Sum3'

      proc_control_node_B.Gain2_n = ((proc_control_node_P.Constant_Value_gp -
        proc_control_node_B.d_h) - proc_control_node_B.Product1_j5) *
        proc_control_node_P.Gain2_Gain_l;

      // Product: '<S44>/Product3' incorporates:
      //   Product: '<S45>/Product3'

      proc_control_node_B.Product2_gc *= proc_control_node_B.MATLABSystem_o5;

      // Gain: '<S44>/Gain1' incorporates:
      //   Product: '<S44>/Product2'
      //   Product: '<S44>/Product3'
      //   Sum: '<S44>/Sum2'

      proc_control_node_B.Gain1_d2 = (proc_control_node_B.epsilon *
        proc_control_node_B.Product1_j5_b + proc_control_node_B.Product2_gc) *
        proc_control_node_P.Gain1_Gain_e;

      // Gain: '<S45>/Gain' incorporates:
      //   Sum: '<S45>/Sum1'

      proc_control_node_B.Gain_l = (proc_control_node_B.MATLABSystem_o7 +
        proc_control_node_B.absxk) * proc_control_node_P.Gain_Gain_m;

      // Gain: '<S45>/Gain1' incorporates:
      //   Product: '<S45>/Product2'
      //   Sum: '<S45>/Sum2'

      proc_control_node_B.Gain1_o = (proc_control_node_B.Product2_gc -
        proc_control_node_B.epsilon * proc_control_node_B.Product1_j5_b) *
        proc_control_node_P.Gain1_Gain_g;

      // Gain: '<S45>/Gain2' incorporates:
      //   Constant: '<S45>/Constant'
      //   Product: '<S45>/Product7'
      //   Sum: '<S45>/Sum3'

      proc_control_node_B.Gain2_i = ((proc_control_node_P.Constant_Value_iw -
        proc_control_node_B.d_h) - proc_control_node_B.MATLABSystem_o5 *
        proc_control_node_B.MATLABSystem_o5) * proc_control_node_P.Gain2_Gain_b;
    }

    // MATLAB Function: '<S16>/MATLAB Function' incorporates:
    //   Integrator: '<S1>/Integrator2'
    //   Product: '<S43>/Product4'
    //   Product: '<S43>/Product5'
    //   Product: '<S43>/Product8'
    //   Product: '<S44>/Product4'
    //   Product: '<S44>/Product5'
    //   Product: '<S44>/Product8'
    //   Product: '<S45>/Product4'
    //   Product: '<S45>/Product5'
    //   Product: '<S45>/Product8'
    //   Sum: '<S16>/Sum2'
    //   Sum: '<S41>/Sum'
    //   Sum: '<S43>/Sum'
    //   Sum: '<S44>/Sum'
    //   Sum: '<S45>/Sum'

    proc_control_node_B.y_h[0] = ((proc_control_node_X.Integrator2_CSTATE[0] *
      proc_control_node_B.Gain2_k0 + proc_control_node_B.Gain_c *
      proc_control_node_X.Integrator2_CSTATE[1]) + proc_control_node_B.Gain1_cn *
      proc_control_node_X.Integrator2_CSTATE[2]) + proc_control_node_B.Output_l;
    proc_control_node_B.y_h[1] = ((proc_control_node_X.Integrator2_CSTATE[0] *
      proc_control_node_B.Gain_cr + proc_control_node_B.Gain2_n *
      proc_control_node_X.Integrator2_CSTATE[1]) + proc_control_node_B.Gain1_d2 *
      proc_control_node_X.Integrator2_CSTATE[2]) + proc_control_node_B.Output_l;
    proc_control_node_B.y_h[2] = ((proc_control_node_X.Integrator2_CSTATE[0] *
      proc_control_node_B.Gain_l + proc_control_node_B.Gain1_o *
      proc_control_node_X.Integrator2_CSTATE[1]) + proc_control_node_B.Gain2_i *
      proc_control_node_X.Integrator2_CSTATE[2]) + proc_control_node_B.Output_l;
    proc_control_node_B.Product1_j5_b = ((proc_control_node_B.scale +
      proc_control_node_B.y_g[1] * proc_control_node_B.y_g[1]) +
      proc_control_node_B.y_g[2] * proc_control_node_B.y_g[2]) +
      proc_control_node_B.y_g[3] * proc_control_node_B.y_g[3];
    proc_control_node_B.MATLABSystem_o5 = 1.0 / sqrt
      (proc_control_node_B.Product1_j5_b);
    proc_control_node_B.rq[0] = proc_control_node_B.y_g[0] *
      proc_control_node_B.MATLABSystem_o5;
    proc_control_node_B.rq[1] = proc_control_node_B.y_g[1] *
      proc_control_node_B.MATLABSystem_o5;
    proc_control_node_B.rq[2] = proc_control_node_B.y_g[2] *
      proc_control_node_B.MATLABSystem_o5;
    proc_control_node_B.rq[3] = proc_control_node_B.y_g[3] *
      proc_control_node_B.MATLABSystem_o5;
    proc_control_node_B.epsilon = (proc_control_node_B.rq[1] *
      proc_control_node_B.rq[3] - proc_control_node_B.rq[0] *
      proc_control_node_B.rq[2]) * -2.0;
    if (proc_control_node_B.epsilon > 1.0) {
      proc_control_node_B.epsilon = 1.0;
    }

    if (proc_control_node_B.epsilon < -1.0) {
      proc_control_node_B.epsilon = -1.0;
    }

    if (fabs(asin(proc_control_node_B.epsilon)) > 0.349066) {
      proc_control_node_B.y_h[0] = 32.7675;
      proc_control_node_B.y_h[1] = 32.7675;
      proc_control_node_B.y_h[2] = 32.7675;
    } else if (fabs(rt_atan2d_snf((proc_control_node_B.rq[2] *
                  proc_control_node_B.rq[3] + proc_control_node_B.rq[0] *
                  proc_control_node_B.rq[1]) * 2.0, ((proc_control_node_B.rq[0] *
      proc_control_node_B.rq[0] - proc_control_node_B.rq[1] *
        proc_control_node_B.rq[1]) - proc_control_node_B.rq[2] *
                  proc_control_node_B.rq[2]) + proc_control_node_B.rq[3] *
                 proc_control_node_B.rq[3])) > 0.349066) {
      proc_control_node_B.y_h[0] = 32.7675;
      proc_control_node_B.y_h[1] = 32.7675;
      proc_control_node_B.y_h[2] = 32.7675;
    }

    // Sqrt: '<S40>/sqrt'
    proc_control_node_B.MATLABSystem_o5 = sqrt(proc_control_node_B.Product1_j5_b);

    // Product: '<S36>/Product'
    proc_control_node_B.epsilon = proc_control_node_B.y_g[0] /
      proc_control_node_B.MATLABSystem_o5;

    // Product: '<S36>/Product1'
    proc_control_node_B.Product1_j5_b = proc_control_node_B.y_g[1] /
      proc_control_node_B.MATLABSystem_o5;

    // Product: '<S36>/Product2'
    proc_control_node_B.Product2_gc = proc_control_node_B.y_g[2] /
      proc_control_node_B.MATLABSystem_o5;

    // Product: '<S36>/Product3'
    proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.y_g[3] /
      proc_control_node_B.MATLABSystem_o5;

    // Sum: '<S16>/Sum' incorporates:
    //   Constant: '<S16>/Constant'
    //   Constant: '<S39>/Constant'
    //   Gain: '<S39>/Gain'
    //   Gain: '<S39>/Gain1'
    //   Gain: '<S39>/Gain2'
    //   Product: '<S39>/Product'
    //   Product: '<S39>/Product1'
    //   Product: '<S39>/Product2'
    //   Product: '<S39>/Product3'
    //   Product: '<S39>/Product4'
    //   Product: '<S39>/Product5'
    //   Product: '<S39>/Product6'
    //   Product: '<S39>/Product7'
    //   Product: '<S39>/Product8'
    //   Sum: '<S39>/Sum'
    //   Sum: '<S39>/Sum1'
    //   Sum: '<S39>/Sum2'
    //   Sum: '<S39>/Sum3'

    proc_control_node_B.PressureDepth = (((proc_control_node_B.Product1_j5_b *
      proc_control_node_B.MATLABSystem_o5 + proc_control_node_B.epsilon *
      proc_control_node_B.Product2_gc) * proc_control_node_P.Gain_Gain_f *
      proc_control_node_P.physics.DepthPose[0] +
      (proc_control_node_B.Product2_gc * proc_control_node_B.MATLABSystem_o5 -
       proc_control_node_B.epsilon * proc_control_node_B.Product1_j5_b) *
      proc_control_node_P.Gain1_Gain_c * proc_control_node_P.physics.DepthPose[1])
      + ((proc_control_node_P.Constant_Value_mj -
          proc_control_node_B.Product1_j5_b * proc_control_node_B.Product1_j5_b)
         - proc_control_node_B.Product2_gc * proc_control_node_B.Product2_gc) *
      proc_control_node_P.Gain2_Gain_n * proc_control_node_P.physics.DepthPose[2])
      + proc_control_node_B.WorldPosition_d[2];

    // Sum: '<S16>/Sum1'
    proc_control_node_B.Quaternion[0] = proc_control_node_B.Output +
      proc_control_node_B.Divide1_n;
    proc_control_node_B.Quaternion[1] = proc_control_node_B.Output +
      proc_control_node_B.Divide2_h;
    proc_control_node_B.Quaternion[2] = proc_control_node_B.Output +
      proc_control_node_B.Product8;
    proc_control_node_B.Quaternion[3] = proc_control_node_B.Output +
      proc_control_node_B.MATLABSystem_o6;

    // Sum: '<S16>/Sum3' incorporates:
    //   Integrator: '<S1>/Integrator3'

    proc_control_node_B.AngularRate_d[0] = proc_control_node_B.Output_i +
      proc_control_node_X.Integrator3_CSTATE[0];
    proc_control_node_B.AngularRate_d[1] = proc_control_node_B.Output_i +
      proc_control_node_X.Integrator3_CSTATE[1];
    proc_control_node_B.AngularRate_d[2] = proc_control_node_B.Output_i +
      proc_control_node_X.Integrator3_CSTATE[2];
  }

  // End of Outputs for SubSystem: '<Root>/Modèle Physique'

  // Outputs for Enabled SubSystem: '<Root>/ROS Output' incorporates:
  //   EnablePort: '<S4>/Enable'

  if ((rtmIsMajorTimeStep((&proc_control_node_M)) &&
       (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) &&
      rtmIsMajorTimeStep((&proc_control_node_M))) {
    proc_control_node_DW.ROSOutput_MODE = (proc_control_node_B.MATLABSystem_o3 >
      0.0);
  }

  if (proc_control_node_DW.ROSOutput_MODE) {
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // Gain: '<S88>/1//2' incorporates:
      //   Constant: '<S72>/ENU 2 NED'

      proc_control_node_B.t13 = proc_control_node_P.u2_Gain_g *
        proc_control_node_P.ENU2NED_Value[0];

      // Trigonometry: '<S88>/sincos'
      proc_control_node_B.Product1_j5_b = sin(proc_control_node_B.t13);
      proc_control_node_B.epsilon = cos(proc_control_node_B.t13);

      // Gain: '<S88>/1//2' incorporates:
      //   Constant: '<S72>/ENU 2 NED'

      proc_control_node_B.t13 = proc_control_node_P.u2_Gain_g *
        proc_control_node_P.ENU2NED_Value[1];

      // Trigonometry: '<S88>/sincos'
      proc_control_node_B.d_h = sin(proc_control_node_B.t13);
      proc_control_node_B.Product1_j5 = cos(proc_control_node_B.t13);

      // Gain: '<S88>/1//2' incorporates:
      //   Constant: '<S72>/ENU 2 NED'

      proc_control_node_B.t13 = proc_control_node_P.u2_Gain_g *
        proc_control_node_P.ENU2NED_Value[2];

      // Trigonometry: '<S88>/sincos'
      proc_control_node_B.Product2_gc = sin(proc_control_node_B.t13);
      proc_control_node_B.MATLABSystem_o7 = cos(proc_control_node_B.t13);

      // Fcn: '<S88>/q2' incorporates:
      //   Fcn: '<S88>/q1'

      proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.epsilon *
        proc_control_node_B.d_h;
      proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.Product1_j5_b *
        proc_control_node_B.Product1_j5;

      // Fcn: '<S88>/q2'
      proc_control_node_B.q2_l = proc_control_node_B.MATLABSystem_o5 *
        proc_control_node_B.MATLABSystem_o7 -
        proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.Product2_gc;

      // Fcn: '<S88>/q0' incorporates:
      //   Fcn: '<S88>/q3'

      proc_control_node_B.epsilon *= proc_control_node_B.Product1_j5;
      proc_control_node_B.Divide1_n = proc_control_node_B.Product1_j5_b *
        proc_control_node_B.d_h;

      // Fcn: '<S88>/q0'
      proc_control_node_B.q0_j = proc_control_node_B.epsilon *
        proc_control_node_B.MATLABSystem_o7 - proc_control_node_B.Divide1_n *
        proc_control_node_B.Product2_gc;

      // Fcn: '<S88>/q1'
      proc_control_node_B.q1_g = proc_control_node_B.MATLABSystem_o5 *
        proc_control_node_B.Product2_gc + proc_control_node_B.MATLABSystem_o6 *
        proc_control_node_B.MATLABSystem_o7;

      // Fcn: '<S88>/q3'
      proc_control_node_B.q3_h = proc_control_node_B.epsilon *
        proc_control_node_B.Product2_gc + proc_control_node_B.Divide1_n *
        proc_control_node_B.MATLABSystem_o7;

      // Sqrt: '<S99>/sqrt' incorporates:
      //   Product: '<S100>/Product'
      //   Product: '<S100>/Product1'
      //   Product: '<S100>/Product2'
      //   Product: '<S100>/Product3'
      //   Sum: '<S100>/Sum'

      proc_control_node_B.Product2_gc = sqrt(((proc_control_node_B.q0_j *
        proc_control_node_B.q0_j + proc_control_node_B.q1_g *
        proc_control_node_B.q1_g) + proc_control_node_B.q2_l *
        proc_control_node_B.q2_l) + proc_control_node_B.q3_h *
        proc_control_node_B.q3_h);

      // Product: '<S95>/Product2'
      proc_control_node_B.Product1_j5_b = proc_control_node_B.q2_l /
        proc_control_node_B.Product2_gc;

      // Product: '<S95>/Product3'
      proc_control_node_B.epsilon = proc_control_node_B.q3_h /
        proc_control_node_B.Product2_gc;

      // Product: '<S96>/Product7' incorporates:
      //   Product: '<S97>/Product7'

      proc_control_node_B.Divide2_h = proc_control_node_B.epsilon *
        proc_control_node_B.epsilon;

      // Product: '<S96>/Product6' incorporates:
      //   Product: '<S98>/Product7'

      proc_control_node_B.MATLABSystem_o7 = proc_control_node_B.Product1_j5_b *
        proc_control_node_B.Product1_j5_b;

      // Gain: '<S96>/Gain2' incorporates:
      //   Constant: '<S96>/Constant'
      //   Product: '<S96>/Product6'
      //   Product: '<S96>/Product7'
      //   Sum: '<S96>/Sum3'

      proc_control_node_B.Gain2 = ((proc_control_node_P.Constant_Value_pm -
        proc_control_node_B.MATLABSystem_o7) - proc_control_node_B.Divide2_h) *
        proc_control_node_P.Gain2_Gain_a;

      // Product: '<S95>/Product1'
      proc_control_node_B.MATLABSystem_o5 = proc_control_node_B.q1_g /
        proc_control_node_B.Product2_gc;

      // Product: '<S95>/Product'
      proc_control_node_B.Product2_gc = proc_control_node_B.q0_j /
        proc_control_node_B.Product2_gc;

      // Product: '<S96>/Product' incorporates:
      //   Product: '<S97>/Product'

      proc_control_node_B.Product8 = proc_control_node_B.MATLABSystem_o5 *
        proc_control_node_B.Product1_j5_b;

      // Product: '<S96>/Product1' incorporates:
      //   Product: '<S97>/Product1'

      proc_control_node_B.scale = proc_control_node_B.Product2_gc *
        proc_control_node_B.epsilon;

      // Gain: '<S96>/Gain' incorporates:
      //   Product: '<S96>/Product'
      //   Product: '<S96>/Product1'
      //   Sum: '<S96>/Sum1'

      proc_control_node_B.Gain = (proc_control_node_B.Product8 +
        proc_control_node_B.scale) * proc_control_node_P.Gain_Gain_l;

      // Product: '<S96>/Product3' incorporates:
      //   Product: '<S98>/Product'

      proc_control_node_B.MATLABSystem_o6 = proc_control_node_B.MATLABSystem_o5 *
        proc_control_node_B.epsilon;

      // Product: '<S96>/Product2' incorporates:
      //   Product: '<S98>/Product1'

      proc_control_node_B.Divide1_n = proc_control_node_B.Product2_gc *
        proc_control_node_B.Product1_j5_b;

      // Gain: '<S96>/Gain1' incorporates:
      //   Product: '<S96>/Product2'
      //   Product: '<S96>/Product3'
      //   Sum: '<S96>/Sum2'

      proc_control_node_B.Gain1 = (proc_control_node_B.MATLABSystem_o6 -
        proc_control_node_B.Divide1_n) * proc_control_node_P.Gain1_Gain_cn;

      // Gain: '<S97>/Gain' incorporates:
      //   Sum: '<S97>/Sum1'

      proc_control_node_B.Gain_j = (proc_control_node_B.Product8 -
        proc_control_node_B.scale) * proc_control_node_P.Gain_Gain_d;

      // Product: '<S97>/Product6' incorporates:
      //   Product: '<S98>/Product6'

      proc_control_node_B.Product8 = proc_control_node_B.MATLABSystem_o5 *
        proc_control_node_B.MATLABSystem_o5;

      // Gain: '<S97>/Gain2' incorporates:
      //   Constant: '<S97>/Constant'
      //   Product: '<S97>/Product6'
      //   Sum: '<S97>/Sum3'

      proc_control_node_B.Gain2_d = ((proc_control_node_P.Constant_Value_fk -
        proc_control_node_B.Product8) - proc_control_node_B.Divide2_h) *
        proc_control_node_P.Gain2_Gain_i;

      // Product: '<S97>/Product3' incorporates:
      //   Product: '<S98>/Product3'

      proc_control_node_B.epsilon *= proc_control_node_B.Product1_j5_b;

      // Product: '<S97>/Product2' incorporates:
      //   Product: '<S98>/Product2'

      proc_control_node_B.MATLABSystem_o5 *= proc_control_node_B.Product2_gc;

      // Gain: '<S97>/Gain1' incorporates:
      //   Product: '<S97>/Product2'
      //   Product: '<S97>/Product3'
      //   Sum: '<S97>/Sum2'

      proc_control_node_B.Gain1_d = (proc_control_node_B.MATLABSystem_o5 +
        proc_control_node_B.epsilon) * proc_control_node_P.Gain1_Gain_h;

      // Gain: '<S98>/Gain' incorporates:
      //   Sum: '<S98>/Sum1'

      proc_control_node_B.Gain_f = (proc_control_node_B.MATLABSystem_o6 +
        proc_control_node_B.Divide1_n) * proc_control_node_P.Gain_Gain_f3;

      // Gain: '<S98>/Gain1' incorporates:
      //   Sum: '<S98>/Sum2'

      proc_control_node_B.Gain1_c = (proc_control_node_B.epsilon -
        proc_control_node_B.MATLABSystem_o5) * proc_control_node_P.Gain1_Gain_m;

      // Gain: '<S98>/Gain2' incorporates:
      //   Constant: '<S98>/Constant'
      //   Sum: '<S98>/Sum3'

      proc_control_node_B.Gain2_k = ((proc_control_node_P.Constant_Value_ek -
        proc_control_node_B.Product8) - proc_control_node_B.MATLABSystem_o7) *
        proc_control_node_P.Gain2_Gain_d;
    }

    // Sum: '<S90>/Sum' incorporates:
    //   Product: '<S90>/Product'
    //   Product: '<S90>/Product1'
    //   Product: '<S90>/Product2'
    //   Product: '<S90>/Product3'

    proc_control_node_B.Product8 = ((proc_control_node_B.y_g[0] *
      proc_control_node_B.y_g[0] + proc_control_node_B.y_g[1] *
      proc_control_node_B.y_g[1]) + proc_control_node_B.y_g[2] *
      proc_control_node_B.y_g[2]) + proc_control_node_B.y_g[3] *
      proc_control_node_B.y_g[3];

    // Product: '<S85>/Divide'
    proc_control_node_B.Divide2_h = proc_control_node_B.y_g[0] /
      proc_control_node_B.Product8;

    // Product: '<S85>/Divide1' incorporates:
    //   UnaryMinus: '<S89>/Unary Minus'

    proc_control_node_B.MATLABSystem_o7 = -proc_control_node_B.y_g[1] /
      proc_control_node_B.Product8;

    // Product: '<S85>/Divide2' incorporates:
    //   UnaryMinus: '<S89>/Unary Minus1'

    proc_control_node_B.Divide1_n = -proc_control_node_B.y_g[2] /
      proc_control_node_B.Product8;

    // Product: '<S85>/Divide3' incorporates:
    //   UnaryMinus: '<S89>/Unary Minus2'

    proc_control_node_B.MATLABSystem_o6 = -proc_control_node_B.y_g[3] /
      proc_control_node_B.Product8;
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[1] == 0) {
      // MATLAB Function: '<S72>/MATLAB Function' incorporates:
      //   Constant: '<S72>/ '
      //   Constant: '<S72>/  '
      //   Constant: '<S72>/Constant'
      //   Constant: '<S82>/Constant'
      //   Product: '<S91>/Product'
      //   Product: '<S91>/Product1'
      //   Product: '<S91>/Product2'
      //   Product: '<S91>/Product3'
      //   Product: '<S92>/Product'
      //   Product: '<S92>/Product1'
      //   Product: '<S92>/Product2'
      //   Product: '<S92>/Product3'
      //   Product: '<S93>/Product'
      //   Product: '<S93>/Product1'
      //   Product: '<S93>/Product2'
      //   Product: '<S93>/Product3'
      //   Product: '<S94>/Product'
      //   Product: '<S94>/Product1'
      //   Product: '<S94>/Product2'
      //   Product: '<S94>/Product3'
      //   Product: '<S96>/Product4'
      //   Product: '<S96>/Product5'
      //   Product: '<S96>/Product8'
      //   Product: '<S97>/Product4'
      //   Product: '<S97>/Product5'
      //   Product: '<S97>/Product8'
      //   Product: '<S98>/Product4'
      //   Product: '<S98>/Product5'
      //   Product: '<S98>/Product8'
      //   Sum: '<S72>/Sum'
      //   Sum: '<S91>/Sum'
      //   Sum: '<S92>/Sum'
      //   Sum: '<S93>/Sum'
      //   Sum: '<S94>/Sum'
      //   Sum: '<S96>/Sum'
      //   Sum: '<S97>/Sum'
      //   Sum: '<S98>/Sum'

      proc_control_node_B.msg_c = proc_control_node_P.Constant_Value_o;
      proc_control_node_B.msg_c.ModelName[0] =
        proc_control_node_P.simulation.model_name[0];
      proc_control_node_B.msg_c.ModelName[1] =
        proc_control_node_P.simulation.model_name[1];
      proc_control_node_B.msg_c.ModelName[2] =
        proc_control_node_P.simulation.model_name[2];
      proc_control_node_B.msg_c.ModelName[3] =
        proc_control_node_P.simulation.model_name[3];
      proc_control_node_B.msg_c.ModelName_SL_Info.CurrentLength = 4U;
      for (proc_control_node_B.i_j = 0; proc_control_node_B.i_j < 5;
           proc_control_node_B.i_j++) {
        proc_control_node_B.msg_c.ReferenceFrame[proc_control_node_B.i_j] =
          proc_control_node_P.simulation.reference_frame[proc_control_node_B.i_j];
      }

      proc_control_node_B.msg_c.ReferenceFrame_SL_Info.CurrentLength = 5U;
      proc_control_node_B.msg_c.Pose.Position.X =
        (proc_control_node_B.WorldPosition_d[0] * proc_control_node_B.Gain2 +
         proc_control_node_B.Gain * proc_control_node_B.WorldPosition_d[1]) +
        proc_control_node_B.Gain1 * proc_control_node_B.WorldPosition_d[2];
      proc_control_node_B.msg_c.Pose.Position.Y =
        (proc_control_node_B.WorldPosition_d[0] * proc_control_node_B.Gain_j +
         proc_control_node_B.Gain2_d * proc_control_node_B.WorldPosition_d[1]) +
        proc_control_node_B.Gain1_d * proc_control_node_B.WorldPosition_d[2];
      proc_control_node_B.msg_c.Pose.Position.Z =
        ((proc_control_node_B.WorldPosition_d[0] * proc_control_node_B.Gain_f +
          proc_control_node_B.Gain1_c * proc_control_node_B.WorldPosition_d[1])
         + proc_control_node_B.Gain2_k * proc_control_node_B.WorldPosition_d[2])
        + proc_control_node_P.physics.dvlCenterDist;
      proc_control_node_B.msg_c.Pose.Orientation.X =
        ((proc_control_node_B.Divide2_h * proc_control_node_B.q1_g +
          proc_control_node_B.MATLABSystem_o7 * proc_control_node_B.q0_j) +
         proc_control_node_B.Divide1_n * proc_control_node_B.q3_h) -
        proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.q2_l;
      proc_control_node_B.msg_c.Pose.Orientation.Y =
        ((proc_control_node_B.Divide2_h * proc_control_node_B.q2_l -
          proc_control_node_B.MATLABSystem_o7 * proc_control_node_B.q3_h) +
         proc_control_node_B.Divide1_n * proc_control_node_B.q0_j) +
        proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.q1_g;
      proc_control_node_B.msg_c.Pose.Orientation.Z =
        ((proc_control_node_B.Divide2_h * proc_control_node_B.q3_h +
          proc_control_node_B.MATLABSystem_o7 * proc_control_node_B.q2_l) -
         proc_control_node_B.Divide1_n * proc_control_node_B.q1_g) +
        proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.q0_j;
      proc_control_node_B.msg_c.Pose.Orientation.W =
        ((proc_control_node_B.Divide2_h * proc_control_node_B.q0_j -
          proc_control_node_B.MATLABSystem_o7 * proc_control_node_B.q1_g) -
         proc_control_node_B.Divide1_n * proc_control_node_B.q2_l) -
        proc_control_node_B.MATLABSystem_o6 * proc_control_node_B.q3_h;

      // End of MATLAB Function: '<S72>/MATLAB Function'

      // Outputs for Atomic SubSystem: '<S72>/Publish'
      // MATLABSystem: '<S84>/SinkBlock'
      Pub_proc_control_node_63.publish(&proc_control_node_B.msg_c);

      // End of Outputs for SubSystem: '<S72>/Publish'

      // MATLAB Function: '<S73>/MATLAB Function' incorporates:
      //   Sum: '<S73>/Sum'

      proc_control_node_B.msg_n.Position.X =
        proc_control_node_B.WorldPosition_d[0];
      proc_control_node_B.msg_n.Position.Y =
        proc_control_node_B.WorldPosition_d[1];
      proc_control_node_B.msg_n.Position.Z =
        proc_control_node_B.WorldPosition_d[2];
      proc_control_node_B.msg_n.Orientation.X = proc_control_node_B.y_g[1];
      proc_control_node_B.msg_n.Orientation.Y = proc_control_node_B.y_g[2];
      proc_control_node_B.msg_n.Orientation.Z = proc_control_node_B.y_g[3];
      proc_control_node_B.msg_n.Orientation.W = proc_control_node_B.y_g[0];

      // Outputs for Atomic SubSystem: '<S73>/Publish'
      // MATLABSystem: '<S103>/SinkBlock'
      Pub_proc_control_node_75.publish(&proc_control_node_B.msg_n);

      // End of Outputs for SubSystem: '<S73>/Publish'
    }

    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[4] == 0) {
      // MATLAB Function: '<S69>/MATLAB Function' incorporates:
      //   Constant: '<S74>/Constant'

      proc_control_node_B.msg_fi = proc_control_node_P.Constant_Value_h;
      proc_control_node_B.msg_fi.XVelBtm = proc_control_node_B.y_h[0];
      proc_control_node_B.msg_fi.YVelBtm = proc_control_node_B.y_h[1];
      proc_control_node_B.msg_fi.ZVelBtm = proc_control_node_B.y_h[2];

      // Outputs for Atomic SubSystem: '<S69>/Publish'
      // MATLABSystem: '<S76>/SinkBlock'
      Pub_proc_control_node_41.publish(&proc_control_node_B.msg_fi);

      // End of Outputs for SubSystem: '<S69>/Publish'
    }

    // ZeroOrderHold: '<S70>/Zero-Order Hold'
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
      // BusAssignment: '<S70>/Bus Assignment' incorporates:
      //   DataTypeConversion: '<S70>/Cast To Double'

      proc_control_node_B.BusAssignment_h.Data = static_cast<real32_T>
        (proc_control_node_B.PressureDepth);

      // Outputs for Atomic SubSystem: '<S70>/Publish'
      // MATLABSystem: '<S78>/SinkBlock'
      Pub_proc_control_node_243.publish(&proc_control_node_B.BusAssignment_h);

      // End of Outputs for SubSystem: '<S70>/Publish'

      // MATLAB Function: '<S71>/MATLAB Function' incorporates:
      //   Constant: '<S79>/Constant'

      proc_control_node_B.msg_m = proc_control_node_P.Constant_Value_g;
      proc_control_node_B.msg_m.AngularVelocity.X =
        proc_control_node_B.AngularRate_d[0];
      proc_control_node_B.msg_m.AngularVelocity.Y =
        proc_control_node_B.AngularRate_d[1];
      proc_control_node_B.msg_m.AngularVelocity.Z =
        proc_control_node_B.AngularRate_d[2];
      proc_control_node_B.msg_m.Orientation.X = proc_control_node_B.Quaternion[1];
      proc_control_node_B.msg_m.Orientation.Y = proc_control_node_B.Quaternion[2];
      proc_control_node_B.msg_m.Orientation.Z = proc_control_node_B.Quaternion[3];
      proc_control_node_B.msg_m.Orientation.W = proc_control_node_B.Quaternion[0];

      // Outputs for Atomic SubSystem: '<S71>/Publish'
      // MATLABSystem: '<S81>/SinkBlock'
      Pub_proc_control_node_47.publish(&proc_control_node_B.msg_m);

      // End of Outputs for SubSystem: '<S71>/Publish'
    }

    // End of ZeroOrderHold: '<S70>/Zero-Order Hold'
  }

  // End of Outputs for SubSystem: '<Root>/ROS Output'
  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[3] == 0) {
    // Update for Atomic SubSystem: '<Root>/Subsystem1'
    // Update for Delay: '<S10>/Delay'
    proc_control_node_DW.Delay_DSTATE = proc_control_node_B.y;

    // End of Update for SubSystem: '<Root>/Subsystem1'
  }

  if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
      (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
    // Update for Atomic SubSystem: '<Root>/Subsystem ProcNav'
    // Update for Delay: '<S243>/ ' incorporates:
    //   Saturate: '<S7>/Saturation'

    memcpy(&proc_control_node_DW._DSTATE[0], &proc_control_node_B.Saturation[0],
           sizeof(real_T) << 3U);

    // End of Update for SubSystem: '<Root>/Subsystem ProcNav'

    // Update for DiscreteIntegrator: '<S288>/Integrator' incorporates:
    //   Constant: '<S284>/Constant'

    if (proc_control_node_P.Constant_Value_as > 0.0) {
      proc_control_node_DW.Integrator_PrevResetState = 1;
    } else if (proc_control_node_P.Constant_Value_as < 0.0) {
      proc_control_node_DW.Integrator_PrevResetState = -1;
    } else if (proc_control_node_P.Constant_Value_as == 0.0) {
      proc_control_node_DW.Integrator_PrevResetState = 0;
    } else {
      proc_control_node_DW.Integrator_PrevResetState = 2;
    }

    for (proc_control_node_B.ibmat = 0; proc_control_node_B.ibmat < 6;
         proc_control_node_B.ibmat++) {
      proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] +=
        proc_control_node_P.Integrator_gainval *
        proc_control_node_B.Saturation_k[proc_control_node_B.ibmat];
      if (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] >=
          proc_control_node_P.Integrator_UpperSat) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_UpperSat;
      } else if
          (proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] <=
           proc_control_node_P.Integrator_LowerSat) {
        proc_control_node_DW.Integrator_DSTATE[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_LowerSat;
      }

      // Update for DiscreteIntegrator: '<S289>/Integrator' incorporates:
      //   DiscreteIntegrator: '<S288>/Integrator'

      proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] +=
        proc_control_node_P.Integrator_gainval_e *
        proc_control_node_B.Sum_a[proc_control_node_B.ibmat];
      if (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] >=
          proc_control_node_P.Integrator_UpperSat_f) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_UpperSat_f;
      } else if
          (proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] <=
           proc_control_node_P.Integrator_LowerSat_p) {
        proc_control_node_DW.Integrator_DSTATE_l[proc_control_node_B.ibmat] =
          proc_control_node_P.Integrator_LowerSat_p;
      }
    }

    // End of Update for DiscreteIntegrator: '<S288>/Integrator'

    // Update for DiscreteIntegrator: '<S289>/Integrator' incorporates:
    //   Constant: '<S284>/Constant1'

    if (proc_control_node_P.Constant1_Value_d > 0.0) {
      proc_control_node_DW.Integrator_PrevResetState_h = 1;
    } else if (proc_control_node_P.Constant1_Value_d < 0.0) {
      proc_control_node_DW.Integrator_PrevResetState_h = -1;
    } else if (proc_control_node_P.Constant1_Value_d == 0.0) {
      proc_control_node_DW.Integrator_PrevResetState_h = 0;
    } else {
      proc_control_node_DW.Integrator_PrevResetState_h = 2;
    }
  }

  // Update for Enabled SubSystem: '<Root>/Modèle Physique' incorporates:
  //   EnablePort: '<S1>/Enable'

  if (proc_control_node_DW.ModlePhysique_MODE) {
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[6] == 0) {
      // Update for UniformRandomNumber: '<S14>/X Drift'
      proc_control_node_DW.XDrift_NextOutput = (proc_control_node_P.dMaxX -
        proc_control_node_P.dMinX) * rt_urand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed) + proc_control_node_P.dMinX;

      // Update for UniformRandomNumber: '<S14>/Y Drift'
      proc_control_node_DW.YDrift_NextOutput = (proc_control_node_P.dMaxY -
        proc_control_node_P.dMinY) * rt_urand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed_a) + proc_control_node_P.dMinY;
    }

    // Update for Integrator: '<S1>/Integrator'
    proc_control_node_DW.Integrator_IWORK = 0;

    // Update for Integrator: '<S1>/Integrator1'
    proc_control_node_DW.Integrator1_IWORK = 0;

    // Update for Integrator: '<S1>/Integrator2'
    proc_control_node_DW.Integrator2_IWORK = 0;

    // Update for Integrator: '<S1>/Integrator3'
    proc_control_node_DW.Integrator3_IWORK = 0;
    if (rtmIsMajorTimeStep((&proc_control_node_M)) &&
        (&proc_control_node_M)->Timing.TaskCounters.TID[2] == 0) {
      // Update for RandomNumber: '<S25>/White Noise'
      proc_control_node_DW.NextOutput = proc_rt_nrand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed_j) *
        proc_control_node_P.WhiteNoise_StdDev +
        proc_control_node_P.WhiteNoise_Mean;

      // Update for RandomNumber: '<S26>/White Noise'
      proc_control_node_DW.NextOutput_b = proc_rt_nrand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed_d) *
        proc_control_node_P.WhiteNoise_StdDev_d +
        proc_control_node_P.WhiteNoise_Mean_e;

      // Update for RandomNumber: '<S27>/White Noise'
      proc_control_node_DW.NextOutput_g = proc_rt_nrand_Upu32_Yd_f_pw_snf
        (&proc_control_node_DW.RandSeed_e) *
        proc_control_node_P.WhiteNoise_StdDev_e +
        proc_control_node_P.WhiteNoise_Mean_c;
    }
  }

  // End of Update for SubSystem: '<Root>/Modèle Physique'
  if (rtmIsMajorTimeStep((&proc_control_node_M))) {
    rt_ertODEUpdateContinuousStates(&(&proc_control_node_M)->solverInfo);

    // Update absolute time for base rate
    // The "clockTick0" counts the number of times the code of this task has
    //  been executed. The absolute time is the multiplication of "clockTick0"
    //  and "Timing.stepSize0". Size of "clockTick0" ensures timer will not
    //  overflow during the application lifespan selected.
    //  Timer of this task consists of two 32 bit unsigned integers.
    //  The two integers represent the low bits Timing.clockTick0 and the high bits
    //  Timing.clockTickH0. When the low bit overflows to 0, the high bits increment.

    if (!(++(&proc_control_node_M)->Timing.clockTick0)) {
      ++(&proc_control_node_M)->Timing.clockTickH0;
    }

    (&proc_control_node_M)->Timing.t[0] = rtsiGetSolverStopTime
      (&(&proc_control_node_M)->solverInfo);

    {
      // Update absolute timer for sample time: [0.016666666666666666s, 0.0s]
      // The "clockTick1" counts the number of times the code of this task has
      //  been executed. The resolution of this integer timer is 0.016666666666666666, which is the step size
      //  of the task. Size of "clockTick1" ensures timer will not overflow during the
      //  application lifespan selected.
      //  Timer of this task consists of two 32 bit unsigned integers.
      //  The two integers represent the low bits Timing.clockTick1 and the high bits
      //  Timing.clockTickH1. When the low bit overflows to 0, the high bits increment.

      (&proc_control_node_M)->Timing.clockTick1++;
      if (!(&proc_control_node_M)->Timing.clockTick1) {
        (&proc_control_node_M)->Timing.clockTickH1++;
      }
    }

    rate_scheduler((&proc_control_node_M));
  }                                    // end MajorTimeStep
}

// Derivatives for root system: '<Root>'
void proc_control_nodeModelClass::proc_control_node_derivatives()
{
  proc_control_nodeModelClass::XDot_proc_control_node_T *_rtXdot;
  _rtXdot = ((XDot_proc_control_node_T *) (&proc_control_node_M)->derivs);

  // Derivatives for Enabled SubSystem: '<Root>/Modèle Physique'
  if (proc_control_node_DW.ModlePhysique_MODE) {
    // Derivatives for TransferFcn: '<S17>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE = 0.0;
    _rtXdot->TransferFcn_CSTATE += proc_control_node_P.TransferFcn_A *
      proc_control_node_X.TransferFcn_CSTATE;
    _rtXdot->TransferFcn_CSTATE += proc_control_node_B.PWMtoN[0];

    // Derivatives for TransferFcn: '<S18>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_o = 0.0;
    _rtXdot->TransferFcn_CSTATE_o += proc_control_node_P.TransferFcn_A_j *
      proc_control_node_X.TransferFcn_CSTATE_o;
    _rtXdot->TransferFcn_CSTATE_o += proc_control_node_B.PWMtoN[1];

    // Derivatives for TransferFcn: '<S19>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_p = 0.0;
    _rtXdot->TransferFcn_CSTATE_p += proc_control_node_P.TransferFcn_A_h *
      proc_control_node_X.TransferFcn_CSTATE_p;
    _rtXdot->TransferFcn_CSTATE_p += proc_control_node_B.PWMtoN[2];

    // Derivatives for TransferFcn: '<S20>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_a = 0.0;
    _rtXdot->TransferFcn_CSTATE_a += proc_control_node_P.TransferFcn_A_i *
      proc_control_node_X.TransferFcn_CSTATE_a;
    _rtXdot->TransferFcn_CSTATE_a += proc_control_node_B.PWMtoN[3];

    // Derivatives for TransferFcn: '<S21>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_f = 0.0;
    _rtXdot->TransferFcn_CSTATE_f += proc_control_node_P.TransferFcn_A_jp *
      proc_control_node_X.TransferFcn_CSTATE_f;
    _rtXdot->TransferFcn_CSTATE_f += proc_control_node_B.PWMtoN[4];

    // Derivatives for TransferFcn: '<S22>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_e = 0.0;
    _rtXdot->TransferFcn_CSTATE_e += proc_control_node_P.TransferFcn_A_l *
      proc_control_node_X.TransferFcn_CSTATE_e;
    _rtXdot->TransferFcn_CSTATE_e += proc_control_node_B.PWMtoN[5];

    // Derivatives for TransferFcn: '<S23>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_ft = 0.0;
    _rtXdot->TransferFcn_CSTATE_ft += proc_control_node_P.TransferFcn_A_p *
      proc_control_node_X.TransferFcn_CSTATE_ft;
    _rtXdot->TransferFcn_CSTATE_ft += proc_control_node_B.PWMtoN[6];

    // Derivatives for TransferFcn: '<S24>/Transfer Fcn'
    _rtXdot->TransferFcn_CSTATE_fu = 0.0;
    _rtXdot->TransferFcn_CSTATE_fu += proc_control_node_P.TransferFcn_A_n *
      proc_control_node_X.TransferFcn_CSTATE_fu;
    _rtXdot->TransferFcn_CSTATE_fu += proc_control_node_B.PWMtoN[7];

    // Derivatives for Integrator: '<S1>/Integrator'
    _rtXdot->Integrator_CSTATE[0] = proc_control_node_B.Position_dot[0];
    _rtXdot->Integrator_CSTATE[1] = proc_control_node_B.Position_dot[1];
    _rtXdot->Integrator_CSTATE[2] = proc_control_node_B.Position_dot[2];

    // Derivatives for Integrator: '<S1>/Integrator1'
    _rtXdot->Integrator1_CSTATE[0] = proc_control_node_B.Quaternion_dot[0];
    _rtXdot->Integrator1_CSTATE[1] = proc_control_node_B.Quaternion_dot[1];
    _rtXdot->Integrator1_CSTATE[2] = proc_control_node_B.Quaternion_dot[2];
    _rtXdot->Integrator1_CSTATE[3] = proc_control_node_B.Quaternion_dot[3];

    // Derivatives for Integrator: '<S1>/Integrator2'
    _rtXdot->Integrator2_CSTATE[0] = proc_control_node_B.BodyVelocity_dot[0];

    // Derivatives for Integrator: '<S1>/Integrator3'
    _rtXdot->Integrator3_CSTATE[0] = proc_control_node_B.AngularRates_dot[0];

    // Derivatives for Integrator: '<S1>/Integrator2'
    _rtXdot->Integrator2_CSTATE[1] = proc_control_node_B.BodyVelocity_dot[1];

    // Derivatives for Integrator: '<S1>/Integrator3'
    _rtXdot->Integrator3_CSTATE[1] = proc_control_node_B.AngularRates_dot[1];

    // Derivatives for Integrator: '<S1>/Integrator2'
    _rtXdot->Integrator2_CSTATE[2] = proc_control_node_B.BodyVelocity_dot[2];

    // Derivatives for Integrator: '<S1>/Integrator3'
    _rtXdot->Integrator3_CSTATE[2] = proc_control_node_B.AngularRates_dot[2];
  } else {
    {
      real_T *dx;
      int_T i;
      dx = &(((XDot_proc_control_node_T *) (&proc_control_node_M)->derivs)
             ->TransferFcn_CSTATE);
      for (i=0; i < 21; i++) {
        dx[i] = 0.0;
      }
    }
  }

  // End of Derivatives for SubSystem: '<Root>/Modèle Physique'
}

// Model initialize function
void proc_control_nodeModelClass::initialize()
{
  // Registration code

  // initialize non-finites
  rt_InitInfAndNaN(sizeof(real_T));

  // non-finite (run-time) assignments
  proc_control_node_P.Integrator_UpperSat = rtInf;
  proc_control_node_P.Integrator_LowerSat = rtMinusInf;
  proc_control_node_P.Saturation_UpperSat = rtInf;
  proc_control_node_P.Saturation_LowerSat = rtMinusInf;
  proc_control_node_P.Integrator_UpperSat_f = rtInf;
  proc_control_node_P.Integrator_LowerSat_p = rtMinusInf;
  proc_control_node_P.Saturation_UpperSat_m = rtInf;
  proc_control_node_P.Saturation_LowerSat_c = rtMinusInf;

  {
    // Setup solver object
    rtsiSetSimTimeStepPtr(&(&proc_control_node_M)->solverInfo,
                          &(&proc_control_node_M)->Timing.simTimeStep);
    rtsiSetTPtr(&(&proc_control_node_M)->solverInfo, &rtmGetTPtr
                ((&proc_control_node_M)));
    rtsiSetStepSizePtr(&(&proc_control_node_M)->solverInfo,
                       &(&proc_control_node_M)->Timing.stepSize0);
    rtsiSetdXPtr(&(&proc_control_node_M)->solverInfo, &(&proc_control_node_M)
                 ->derivs);
    rtsiSetContStatesPtr(&(&proc_control_node_M)->solverInfo, (real_T **)
                         &(&proc_control_node_M)->contStates);
    rtsiSetNumContStatesPtr(&(&proc_control_node_M)->solverInfo,
      &(&proc_control_node_M)->Sizes.numContStates);
    rtsiSetNumPeriodicContStatesPtr(&(&proc_control_node_M)->solverInfo,
      &(&proc_control_node_M)->Sizes.numPeriodicContStates);
    rtsiSetPeriodicContStateIndicesPtr(&(&proc_control_node_M)->solverInfo,
      &(&proc_control_node_M)->periodicContStateIndices);
    rtsiSetPeriodicContStateRangesPtr(&(&proc_control_node_M)->solverInfo,
      &(&proc_control_node_M)->periodicContStateRanges);
    rtsiSetErrorStatusPtr(&(&proc_control_node_M)->solverInfo,
                          (&rtmGetErrorStatus((&proc_control_node_M))));
    rtsiSetRTModelPtr(&(&proc_control_node_M)->solverInfo, (&proc_control_node_M));
  }

  rtsiSetSimTimeStep(&(&proc_control_node_M)->solverInfo, MAJOR_TIME_STEP);
  (&proc_control_node_M)->intgData.y = (&proc_control_node_M)->odeY;
  (&proc_control_node_M)->intgData.f[0] = (&proc_control_node_M)->odeF[0];
  (&proc_control_node_M)->intgData.f[1] = (&proc_control_node_M)->odeF[1];
  (&proc_control_node_M)->intgData.f[2] = (&proc_control_node_M)->odeF[2];
  (&proc_control_node_M)->contStates = ((X_proc_control_node_T *)
    &proc_control_node_X);
  rtsiSetSolverData(&(&proc_control_node_M)->solverInfo, static_cast<void *>
                    (&(&proc_control_node_M)->intgData));
  rtsiSetSolverName(&(&proc_control_node_M)->solverInfo,"ode3");
  rtmSetTPtr((&proc_control_node_M), &(&proc_control_node_M)->Timing.tArray[0]);
  (&proc_control_node_M)->Timing.stepSize0 = 0.016666666666666666;
  rtmSetFirstInitCond((&proc_control_node_M), 1);

  {
    real_T Constant2;
    real_T Constant3;
    int32_T i;
    int32_T t;
    uint32_T tseed;
    char_T b_zeroDelimTopic[9];
    static const char_T tmp[22] = { '/', 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 's', 'e', 't', '_', 'm', 'o', 'd', 'e' };

    static const char_T tmp_0[19] = { '/', 'p', 'r', 'o', 'c', '_', 'n', 'a',
      'v', '/', 'r', 'e', 's', 'e', 't', '_', 'p', 'o', 's' };

    static const char_T tmp_1[38] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 'k', 'i', 'l', 'l', '_', 'm', 'i', 's', 's', 'i', 'o', 'n', '/',
      'k', 'i', 'l', 'l', '_', 's', 'w', 'i', 't', 'c', 'h', '_', 'm', 's', 'g'
    };

    static const char_T tmp_2[18] = { '/', 'i', 'n', 'i', 't', 'i', 'a', 'l',
      '_', 'c', 'o', 'n', 'd', 'i', 't', 'i', 'o', 'n' };

    static const char_T tmp_3[18] = { '/', 't', 'e', 'l', 'e', 'm', 'e', 't',
      'r', 'y', '/', 'd', 'r', 'y', '_', 'r', 'u', 'n' };

    static const char_T tmp_4[30] = { '/', 'p', 'r', 'o', 'c', '_', 'c', 'o',
      'n', 't', 'r', 'o', 'l', '/', 'r', 'e', 's', 'e', 't', '_', 't', 'r', 'a',
      'j', 'e', 'c', 't', 'o', 'r', 'y' };

    static const char_T tmp_5[25] = { '/', 'p', 'r', 'o', 'c', '_', 's', 'i',
      'm', 'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'i', 'm', 'u', '_', 'i', 'n',
      'f', 'o' };

    static const char_T tmp_6[29] = { '/', 'p', 'r', 'o', 'c', '_', 's', 'i',
      'm', 'u', 'l', 'a', 't', 'i', 'o', 'n', '/', 'd', 'v', 'l', '_', 'v', 'e',
      'l', 'o', 'c', 'i', 't', 'y' };

    static const char_T tmp_7[22] = { '/', 'p', 'r', 'o', 'c', '_', 's', 'i',
      'm', 'u', 'a', 'l', 't', 'i', 'o', 'n', '/', 'd', 'e', 'p', 't', 'h' };

    static const char_T tmp_8[22] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 'i', 'm', 'u', '/', 'i', 'm', 'u', '_', 'i', 'n', 'f', 'o' };

    static const char_T tmp_9[26] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 'd', 'v', 'l', '/', 'd', 'v', 'l', '_', 'v', 'e', 'l', 'o', 'c',
      'i', 't', 'y' };

    static const char_T tmp_a[21] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 'd', 'e', 'p', 't', 'h', '/', 'd', 'e', 'p', 't', 'h' };

    static const char_T tmp_b[22] = { '/', 't', 'e', 'l', 'e', 'm', 'e', 't',
      'r', 'y', '/', 'a', 'u', 'v', '_', 's', 't', 'a', 't', 'e', 's', '/' };

    static const char_T tmp_c[22] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 's', 'e', 'n', 's', 'o', 'r', '_', 'o', 'n' };

    static const char_T tmp_d[15] = { '/', 's', 'p', 'a', 'c', 'e', 'n', 'a',
      'v', '/', 't', 'w', 'i', 's', 't' };

    static const char_T tmp_e[21] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'a', 'd', 'd', '_', 'p', 'o', 's', 'e' };

    static const real_T tmp_f[33] = { 0.0, 1.0, 0.0, 0.1, 1.0, 0.0, 0.2, 1.0,
      0.0, 0.30000000000000004, 1.0, 0.0, 0.4, 1.0, 0.0, 0.5, 1.0, 0.0, 0.6, 1.0,
      0.0, 0.7, 1.0, 0.0, 0.8, 1.0, 0.0, 0.9, 1.0, 0.0, 1.0, 1.0, 0.0 };

    static const int8_T tmp_g[7] = { 0, 0, 0, 1, 0, 0, 0 };

    static const char_T tmp_h[31] = { '/', 'p', 'r', 'o', 'v', 'i', 'd', 'e',
      'r', '_', 't', 'h', 'r', 'u', 's', 't', 'e', 'r', '/', 't', 'h', 'r', 'u',
      's', 't', 'e', 'r', '_', 'p', 'w', 'm' };

    static const char_T tmp_i[26] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'i', 's', '_', 'm', 'p', 'c', '_', 'a', 'c', 't',
      'i', 'v', 'e' };

    static const char_T tmp_j[23] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 'm', 'p', 'c', '_', 's', 't', 'a', 't', 'u', 's'
    };

    static const char_T tmp_k[27] = { 'p', 'r', 'o', 'c', '_', 'c', 'o', 'n',
      't', 'r', 'o', 'l', '/', 't', 'a', 'r', 'g', 'e', 't', '_', 'r', 'e', 'a',
      'c', 'h', 'e', 'd' };

    static const char_T tmp_l[23] = { '/', 'g', 'a', 'z', 'e', 'b', 'o', '/',
      's', 'e', 't', '_', 'm', 'o', 'd', 'e', 'l', '_', 's', 't', 'a', 't', 'e'
    };

    static const char_T tmp_m[8] = { '/', 'p', 'o', 's', '_', 'r', 'o', 't' };

    // Start for Constant: '<S284>/Constant3'
    Constant3 = proc_control_node_P.Constant3_Value;

    // Start for Constant: '<S284>/Constant2'
    Constant2 = proc_control_node_P.Constant2_Value_m;

    // Start for SwitchCase: '<S9>/Switch Case'
    proc_control_node_DW.SwitchCase_ActiveSubsystem = -1;
    proc_control_node_PrevZCX.Integrator_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Integrator1_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Integrator2_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Integrator3_Reset_ZCE = UNINITIALIZED_ZCSIG;
    proc_control_node_PrevZCX.Trajectorygenerator_Reset_ZCE = POS_ZCSIG;
    for (i = 0; i < 6; i++) {
      // InitializeConditions for DiscreteIntegrator: '<S288>/Integrator'
      proc_control_node_DW.Integrator_DSTATE[i] = Constant3;
      if (proc_control_node_DW.Integrator_DSTATE[i] >=
          proc_control_node_P.Integrator_UpperSat) {
        proc_control_node_DW.Integrator_DSTATE[i] =
          proc_control_node_P.Integrator_UpperSat;
      } else if (proc_control_node_DW.Integrator_DSTATE[i] <=
                 proc_control_node_P.Integrator_LowerSat) {
        proc_control_node_DW.Integrator_DSTATE[i] =
          proc_control_node_P.Integrator_LowerSat;
      }

      // End of InitializeConditions for DiscreteIntegrator: '<S288>/Integrator' 

      // InitializeConditions for DiscreteIntegrator: '<S289>/Integrator'
      proc_control_node_DW.Integrator_DSTATE_l[i] = Constant2;
      if (proc_control_node_DW.Integrator_DSTATE_l[i] >=
          proc_control_node_P.Integrator_UpperSat_f) {
        proc_control_node_DW.Integrator_DSTATE_l[i] =
          proc_control_node_P.Integrator_UpperSat_f;
      } else if (proc_control_node_DW.Integrator_DSTATE_l[i] <=
                 proc_control_node_P.Integrator_LowerSat_p) {
        proc_control_node_DW.Integrator_DSTATE_l[i] =
          proc_control_node_P.Integrator_LowerSat_p;
      }

      // End of InitializeConditions for DiscreteIntegrator: '<S289>/Integrator' 
    }

    // SystemInitialize for Atomic SubSystem: '<Root>/Subsystem1'
    // InitializeConditions for Delay: '<S10>/Delay'
    proc_control_node_DW.Delay_DSTATE =
      proc_control_node_P.Delay_InitialCondition_c;

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S301>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S307>/Out1' incorporates:
    //   Inport: '<S307>/In1'

    proc_control_node_B.In1_i2 = proc_control_node_P.Out1_Y0_k;

    // End of SystemInitialize for SubSystem: '<S301>/Enabled Subsystem'

    // Start for MATLABSystem: '<S301>/SourceBlock'
    proc_control_node_DW.obj_mt.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_mt.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_ew[i] = tmp[i];
    }

    proc_control_node_B.b_zeroDelimTopic_ew[22] = '\x00';
    Sub_proc_control_node_185_13.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_ew[0], 1);
    proc_control_node_DW.obj_mt.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S301>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe2'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe3'
    // Start for MATLABSystem: '<S302>/SourceBlock'
    proc_control_node_DW.obj_o.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_o.isInitialized = 1;
    for (i = 0; i < 19; i++) {
      proc_control_node_B.b_zeroDelimTopic_hp[i] = tmp_0[i];
    }

    proc_control_node_B.b_zeroDelimTopic_hp[19] = '\x00';
    Sub_proc_control_node_185_14.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_hp[0], 1);
    proc_control_node_DW.obj_o.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S302>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe3'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S300>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S306>/Out1' incorporates:
    //   Inport: '<S306>/In1'

    proc_control_node_B.In1_cx = proc_control_node_P.Out1_Y0_h;

    // End of SystemInitialize for SubSystem: '<S300>/Enabled Subsystem'

    // Start for MATLABSystem: '<S300>/SourceBlock'
    proc_control_node_DW.obj_hb.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_hb.isInitialized = 1;
    for (i = 0; i < 38; i++) {
      proc_control_node_B.b_zeroDelimTopic[i] = tmp_1[i];
    }

    proc_control_node_B.b_zeroDelimTopic[38] = '\x00';
    Sub_proc_control_node_185_12.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic[0], 1);
    proc_control_node_DW.obj_hb.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S300>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S299>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S305>/Out1' incorporates:
    //   Inport: '<S305>/In1'

    proc_control_node_B.In1_n = proc_control_node_P.Out1_Y0_g;

    // End of SystemInitialize for SubSystem: '<S299>/Enabled Subsystem'

    // Start for MATLABSystem: '<S299>/SourceBlock'
    proc_control_node_DW.obj_b.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_b.isInitialized = 1;
    for (i = 0; i < 18; i++) {
      proc_control_node_B.b_zeroDelimTopic_f[i] = tmp_2[i];
    }

    proc_control_node_B.b_zeroDelimTopic_f[18] = '\x00';
    Sub_proc_control_node_185_11.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_f[0], 1);
    proc_control_node_DW.obj_b.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S299>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe5'
    // SystemInitialize for Enabled SubSystem: '<S304>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S310>/Out1' incorporates:
    //   Inport: '<S310>/In1'

    proc_control_node_B.In1_f = proc_control_node_P.Out1_Y0_a;

    // End of SystemInitialize for SubSystem: '<S304>/Enabled Subsystem'

    // Start for MATLABSystem: '<S304>/SourceBlock'
    proc_control_node_DW.obj_f.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_f.isInitialized = 1;
    for (i = 0; i < 18; i++) {
      proc_control_node_B.b_zeroDelimTopic_f[i] = tmp_3[i];
    }

    proc_control_node_B.b_zeroDelimTopic_f[18] = '\x00';
    Sub_proc_control_node_185_270.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_f[0], 1);
    proc_control_node_DW.obj_f.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S304>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe5'

    // SystemInitialize for Atomic SubSystem: '<S10>/Subscribe4'
    // Start for MATLABSystem: '<S303>/SourceBlock'
    proc_control_node_DW.obj_h.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_h.isInitialized = 1;
    for (i = 0; i < 30; i++) {
      proc_control_node_B.b_zeroDelimTopic_h[i] = tmp_4[i];
    }

    proc_control_node_B.b_zeroDelimTopic_h[30] = '\x00';
    Sub_proc_control_node_185_268.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_h[0], 1);
    proc_control_node_DW.obj_h.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S303>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S10>/Subscribe4'

    // Start for MATLABSystem: '<S10>/MATLAB System'
    proc_control_node_DW.obj_mv.initial_mode =
      proc_control_node_P.MATLABSystem_initial_mode;
    proc_control_node_DW.obj_mv.isInitialized = 1;

    // InitializeConditions for MATLABSystem: '<S10>/MATLAB System'
    //  Perform one-time calculations, such as computing constants
    //  Initialize / reset discrete-state properties
    for (i = 0; i < 7; i++) {
      proc_control_node_DW.obj_mv.m_initCond[i] = 0.0;
    }

    proc_control_node_DW.obj_mv.m_mode =
      proc_control_node_DW.obj_mv.initial_mode;
    proc_control_node_DW.obj_mv.m_killStatus = 0.0;
    proc_control_node_DW.obj_mv.m_simulation = 0.0;
    proc_control_node_DW.obj_mv.m_reset = 0.0;
    proc_control_node_DW.obj_mv.m_trajClear = 0.0;
    proc_control_node_DW.obj_mv.m_notDryRun = 1.0;

    // End of InitializeConditions for MATLABSystem: '<S10>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<Root>/Subsystem1'

    // SystemInitialize for Atomic SubSystem: '<Root>/ROS Input'
    // SystemInitialize for IfAction SubSystem: '<S3>/Simulation'
    // SystemInitialize for Atomic SubSystem: '<S50>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S58>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S61>/Out1' incorporates:
    //   Inport: '<S61>/In1'

    proc_control_node_B.In1_p = proc_control_node_P.Out1_Y0;

    // End of SystemInitialize for SubSystem: '<S58>/Enabled Subsystem'

    // Start for MATLABSystem: '<S58>/SourceBlock' incorporates:
    //   MATLABSystem: '<S81>/SinkBlock'

    proc_control_node_DW.obj_i.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_i.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S71>/Publish'
    for (i = 0; i < 25; i++) {
      proc_control_node_B.b_zeroDelimTopic_tmp_i[i] = tmp_5[i];
    }

    proc_control_node_B.b_zeroDelimTopic_tmp_i[25] = '\x00';

    // End of SystemInitialize for SubSystem: '<S71>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 26; i++) {
      proc_control_node_B.b_zeroDelimTopic_hw[i] =
        proc_control_node_B.b_zeroDelimTopic_tmp_i[i];
    }

    Sub_proc_control_node_31_1241.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_hw[0], 1);
    proc_control_node_DW.obj_i.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S58>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S50>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S50>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S59>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S62>/Out1' incorporates:
    //   Inport: '<S62>/In1'

    proc_control_node_B.In1_c = proc_control_node_P.Out1_Y0_m;

    // End of SystemInitialize for SubSystem: '<S59>/Enabled Subsystem'

    // Start for MATLABSystem: '<S59>/SourceBlock' incorporates:
    //   MATLABSystem: '<S76>/SinkBlock'

    proc_control_node_DW.obj_bg.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_bg.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S69>/Publish'
    for (i = 0; i < 29; i++) {
      proc_control_node_B.b_zeroDelimTopic_tmp[i] = tmp_6[i];
    }

    proc_control_node_B.b_zeroDelimTopic_tmp[29] = '\x00';

    // End of SystemInitialize for SubSystem: '<S69>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 30; i++) {
      proc_control_node_B.b_zeroDelimTopic_e[i] =
        proc_control_node_B.b_zeroDelimTopic_tmp[i];
    }

    Sub_proc_control_node_31_1242.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_e[0], 1);
    proc_control_node_DW.obj_bg.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S59>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S50>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S50>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S60>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S63>/Out1' incorporates:
    //   Inport: '<S63>/In1'

    proc_control_node_B.In1_om = proc_control_node_P.Out1_Y0_n;

    // End of SystemInitialize for SubSystem: '<S60>/Enabled Subsystem'

    // Start for MATLABSystem: '<S60>/SourceBlock' incorporates:
    //   MATLABSystem: '<S78>/SinkBlock'

    proc_control_node_DW.obj_df.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_df.isInitialized = 1;

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S70>/Publish'
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_tmp_n[i] = tmp_7[i];
    }

    proc_control_node_B.b_zeroDelimTopic_tmp_n[22] = '\x00';

    // End of SystemInitialize for SubSystem: '<S70>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
    for (i = 0; i < 23; i++) {
      proc_control_node_B.b_zeroDelimTopic_ew[i] =
        proc_control_node_B.b_zeroDelimTopic_tmp_n[i];
    }

    Sub_proc_control_node_31_1305.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_ew[0], 1);
    proc_control_node_DW.obj_df.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S60>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S50>/Subscribe2'
    // End of SystemInitialize for SubSystem: '<S3>/Simulation'

    // SystemInitialize for IfAction SubSystem: '<S3>/Real System'
    // SystemInitialize for Atomic SubSystem: '<S49>/Subscribe'
    // SystemInitialize for Enabled SubSystem: '<S52>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S55>/Out1' incorporates:
    //   Inport: '<S55>/In1'

    proc_control_node_B.In1 = proc_control_node_P.Out1_Y0_l;

    // End of SystemInitialize for SubSystem: '<S52>/Enabled Subsystem'

    // Start for MATLABSystem: '<S52>/SourceBlock'
    proc_control_node_DW.obj_l.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_l.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_ew[i] = tmp_8[i];
    }

    proc_control_node_B.b_zeroDelimTopic_ew[22] = '\x00';
    Sub_proc_control_node_31_5.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_ew[0], 1);
    proc_control_node_DW.obj_l.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S52>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S49>/Subscribe'

    // SystemInitialize for Atomic SubSystem: '<S49>/Subscribe1'
    // SystemInitialize for Enabled SubSystem: '<S53>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S56>/Out1' incorporates:
    //   Inport: '<S56>/In1'

    proc_control_node_B.In1_i = proc_control_node_P.Out1_Y0_p;

    // End of SystemInitialize for SubSystem: '<S53>/Enabled Subsystem'

    // Start for MATLABSystem: '<S53>/SourceBlock'
    proc_control_node_DW.obj_d.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_d.isInitialized = 1;
    for (i = 0; i < 26; i++) {
      proc_control_node_B.b_zeroDelimTopic_j[i] = tmp_9[i];
    }

    proc_control_node_B.b_zeroDelimTopic_j[26] = '\x00';
    Sub_proc_control_node_31_1235.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_j[0], 1);
    proc_control_node_DW.obj_d.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S53>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S49>/Subscribe1'

    // SystemInitialize for Atomic SubSystem: '<S49>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S54>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S57>/Out1' incorporates:
    //   Inport: '<S57>/In1'

    proc_control_node_B.In1_e = proc_control_node_P.Out1_Y0_nb;

    // End of SystemInitialize for SubSystem: '<S54>/Enabled Subsystem'

    // Start for MATLABSystem: '<S54>/SourceBlock'
    proc_control_node_DW.obj_ow.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_ow.isInitialized = 1;
    for (i = 0; i < 21; i++) {
      proc_control_node_B.b_zeroDelimTopic_ho[i] = tmp_a[i];
    }

    proc_control_node_B.b_zeroDelimTopic_ho[21] = '\x00';
    Sub_proc_control_node_31_1302.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_ho[0], 1);
    proc_control_node_DW.obj_ow.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S54>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S49>/Subscribe2'
    // End of SystemInitialize for SubSystem: '<S3>/Real System'

    // SystemInitialize for Enabled SubSystem: '<S3>/Subsystem'
    // InitializeConditions for Memory: '<S67>/Memory'
    proc_control_node_DW.Memory_PreviousInput_i =
      proc_control_node_P.MinMaxRunningResettable_vinit;

    // InitializeConditions for Memory: '<S68>/Memory'
    proc_control_node_DW.Memory_PreviousInput_f =
      proc_control_node_P.MinMaxRunningResettable1_vinit;

    // SystemInitialize for Outport: '<S51>/y'
    proc_control_node_B.y = proc_control_node_P.y_Y0;

    // End of SystemInitialize for SubSystem: '<S3>/Subsystem'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Input'

    // SystemInitialize for Atomic SubSystem: '<Root>/Subsystem ProcNav'
    // InitializeConditions for Delay: '<S243>/ '
    memcpy(&proc_control_node_DW._DSTATE[0],
           &proc_control_node_P._InitialCondition[0], sizeof(real_T) << 3U);

    // SystemInitialize for Enabled SubSystem: '<S8>/DVL Mesurments'
    // InitializeConditions for Delay: '<S255>/Delay'
    proc_control_node_DW.Delay_DSTATE_i =
      proc_control_node_P.Delay_InitialCondition_l;

    // SystemInitialize for Enabled SubSystem: '<S255>/Subsystem2'
    // SystemInitialize for Fcn: '<S259>/q0' incorporates:
    //   Outport: '<S258>/Quat'

    proc_control_node_B.q0 = proc_control_node_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S259>/q1' incorporates:
    //   Outport: '<S258>/Quat'

    proc_control_node_B.q1 = proc_control_node_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S259>/q2' incorporates:
    //   Outport: '<S258>/Quat'

    proc_control_node_B.q2 = proc_control_node_P.Quat_Y0;

    // SystemInitialize for Fcn: '<S259>/q3' incorporates:
    //   Outport: '<S258>/Quat'

    proc_control_node_B.q3 = proc_control_node_P.Quat_Y0;

    // End of SystemInitialize for SubSystem: '<S255>/Subsystem2'

    // SystemInitialize for Outport: '<S239>/enable'
    proc_control_node_B.enable = proc_control_node_P.enable_Y0;

    // SystemInitialize for Sum: '<S261>/Sum' incorporates:
    //   Outport: '<S239>/Body Velocity'

    proc_control_node_B.Sum = proc_control_node_P.BodyVelocity_Y0;

    // SystemInitialize for Sum: '<S262>/Sum' incorporates:
    //   Outport: '<S239>/Body Velocity'

    proc_control_node_B.Sum_o = proc_control_node_P.BodyVelocity_Y0;

    // SystemInitialize for Sum: '<S263>/Sum' incorporates:
    //   Outport: '<S239>/Body Velocity'

    proc_control_node_B.Sum_c = proc_control_node_P.BodyVelocity_Y0;

    // End of SystemInitialize for SubSystem: '<S8>/DVL Mesurments'

    // SystemInitialize for Enabled SubSystem: '<S8>/Subsystem'
    // Start for DataStoreMemory: '<S269>/DataStoreMemory - P'
    memcpy(&proc_control_node_DW.P[0],
           &proc_control_node_P.DataStoreMemoryP_InitialValue[0], 169U * sizeof
           (real_T));
    for (i = 0; i < 13; i++) {
      // Start for DataStoreMemory: '<S269>/DataStoreMemory - x'
      proc_control_node_DW.x[i] =
        proc_control_node_P.DataStoreMemoryx_InitialValue[i];

      // SystemInitialize for DataStoreRead: '<S272>/Data Store Read' incorporates:
      //   DataStoreMemory: '<S269>/DataStoreMemory - x'
      //   Outport: '<S242>/xhat'

      proc_control_node_B.DataStoreRead[i] = proc_control_node_P.xhat_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S8>/Subsystem'
    // End of SystemInitialize for SubSystem: '<Root>/Subsystem ProcNav'

    // SystemInitialize for Enabled SubSystem: '<Root>/Sensor Manager'
    // SystemInitialize for Atomic SubSystem: '<S114>/Publish'
    // Start for MATLABSystem: '<S120>/SinkBlock'
    proc_control_node_DW.obj_ag.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_ag.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_ew[i] = tmp_b[i];
    }

    proc_control_node_B.b_zeroDelimTopic_ew[22] = '\x00';
    Pub_proc_control_node_163.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_ew[0], 1);
    proc_control_node_DW.obj_ag.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S120>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S114>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S113>/Publish'
    // Start for MATLABSystem: '<S116>/SinkBlock'
    proc_control_node_DW.obj_e.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_e.isInitialized = 1;
    for (i = 0; i < 22; i++) {
      proc_control_node_B.b_zeroDelimTopic_ew[i] = tmp_c[i];
    }

    proc_control_node_B.b_zeroDelimTopic_ew[22] = '\x00';
    Pub_proc_control_node_116.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_ew[0], 1);
    proc_control_node_DW.obj_e.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S116>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S113>/Publish'

    // SystemInitialize for SignalConversion generated from: '<S6>/Output' incorporates:
    //   Outport: '<S6>/Output'

    proc_control_node_B.qS2W[0] = proc_control_node_P.Output_Y0.qS2W[0];
    proc_control_node_B.qS2W[1] = proc_control_node_P.Output_Y0.qS2W[1];
    proc_control_node_B.qS2W[2] = proc_control_node_P.Output_Y0.qS2W[2];
    proc_control_node_B.qS2W[3] = proc_control_node_P.Output_Y0.qS2W[3];

    // End of SystemInitialize for SubSystem: '<Root>/Sensor Manager'

    // SystemInitialize for Atomic SubSystem: '<S279>/Subscribe2'
    // SystemInitialize for Enabled SubSystem: '<S285>/Enabled Subsystem'
    // SystemInitialize for Outport: '<S290>/Out1' incorporates:
    //   Inport: '<S290>/In1'

    proc_control_node_B.In1_o = proc_control_node_P.Out1_Y0_pb;

    // End of SystemInitialize for SubSystem: '<S285>/Enabled Subsystem'

    // Start for MATLABSystem: '<S285>/SourceBlock'
    proc_control_node_DW.obj_c.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_c.isInitialized = 1;
    for (i = 0; i < 15; i++) {
      proc_control_node_B.b_zeroDelimTopic_i[i] = tmp_d[i];
    }

    proc_control_node_B.b_zeroDelimTopic_i[15] = '\x00';
    Sub_proc_control_node_184_1122.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_i[0], 2);
    proc_control_node_DW.obj_c.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S285>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S279>/Subscribe2'

    // SystemInitialize for IfAction SubSystem: '<S9>/singleWpts Trajectory'
    // InitializeConditions for Delay: '<S282>/Delay1'
    proc_control_node_DW.Delay1_DSTATE_cr =
      proc_control_node_P.Delay1_InitialCondition_k;

    // SystemInitialize for Atomic SubSystem: '<S282>/Subscribe'
    // Start for MATLABSystem: '<S294>/SourceBlock'
    proc_control_node_DW.obj_hd.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_hd.isInitialized = 1;
    for (i = 0; i < 21; i++) {
      proc_control_node_B.b_zeroDelimTopic_ho[i] = tmp_e[i];
    }

    proc_control_node_B.b_zeroDelimTopic_ho[21] = '\x00';
    Sub_proc_control_node_184_1168.createSubscriber
      (&proc_control_node_B.b_zeroDelimTopic_ho[0], 1);
    proc_control_node_DW.obj_hd.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S294>/SourceBlock'
    // End of SystemInitialize for SubSystem: '<S282>/Subscribe'

    // SystemInitialize for Enabled SubSystem: '<S282>/Subsystem1'
    // SystemInitialize for DataTypeConversion: '<S295>/Data Type Conversion1' incorporates:
    //   Outport: '<S295>/Out1'

    proc_control_node_B.DataTypeConversion1[0] = proc_control_node_P.Out1_Y0_i;
    proc_control_node_B.DataTypeConversion1[1] = proc_control_node_P.Out1_Y0_i;

    // SystemInitialize for DataTypeConversion: '<S295>/Data Type Conversion2' incorporates:
    //   Outport: '<S295>/Out1'

    proc_control_node_B.DataTypeConversion2 = proc_control_node_P.Out1_Y0_i;

    // SystemInitialize for Enabled SubSystem: '<S282>/Pre-traitement'
    for (i = 0; i < 6; i++) {
      // SystemInitialize for DataTypeConversion: '<S295>/Data Type Conversion' incorporates:
      //   Outport: '<S295>/Out1'

      proc_control_node_B.DataTypeConversion[i] = proc_control_node_P.Out1_Y0_i;

      // SystemInitialize for Selector: '<S293>/Selector' incorporates:
      //   DataTypeConversion: '<S295>/Data Type Conversion'
      //   Outport: '<S293>/linWpts'
      //   Outport: '<S295>/Out1'

      proc_control_node_B.Selector[i] = proc_control_node_P.linWpts_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S282>/Subsystem1'
    for (i = 0; i < 8; i++) {
      // SystemInitialize for Selector: '<S293>/Selector1' incorporates:
      //   Outport: '<S293>/RotWpts'

      proc_control_node_B.Selector1[i] = proc_control_node_P.RotWpts_Y0;
    }

    // SystemInitialize for Concatenate: '<S293>/Matrix Concatenate' incorporates:
    //   Outport: '<S293>/time'

    proc_control_node_B.MatrixConcatenate[0] = proc_control_node_P.time_Y0;
    proc_control_node_B.MatrixConcatenate[1] = proc_control_node_P.time_Y0;
    for (i = 0; i < 7; i++) {
      // SystemInitialize for Selector: '<S293>/Selector4' incorporates:
      //   Outport: '<S293>/target'

      proc_control_node_B.Selector4[i] = proc_control_node_P.target_Y0;
    }

    // End of SystemInitialize for SubSystem: '<S282>/Pre-traitement'

    // SystemInitialize for Resettable SubSystem: '<S282>/Trajectory generator'
    // InitializeConditions for DiscreteIntegrator: '<S296>/Discrete-Time Integrator' 
    proc_control_node_DW.DiscreteTimeIntegrator_DSTATE =
      proc_control_node_P.DiscreteTimeIntegrator_IC;

    // Start for MATLABSystem: '<S296>/Rotation Trajectory'
    memcpy(&proc_control_node_DW.obj_j.TimeScaling[0], &tmp_f[0], 33U * sizeof
           (real_T));
    proc_control_node_DW.obj_j.isInitialized = 1;
    proc_control_node_DW.obj_j.TunablePropsChanged = false;

    // Start for MATLABSystem: '<S298>/Polynomial Trajectory1'
    memset(&proc_control_node_DW.obj_jo.AccelerationBoundaryCondition[0], 0, 10U
           * sizeof(real_T));
    proc_control_node_DW.obj_jo.isInitialized = 0;
    for (i = 0; i < 6; i++) {
      proc_control_node_DW.obj_jo.VelocityBoundaryCondition[i] =
        proc_control_node_P.PolynomialTrajectory1_VelocityB[i];
    }

    proc_control_node_DW.obj_jo.isInitialized = 1;
    proc_control_node_DW.obj_jo.TunablePropsChanged = false;

    // End of Start for MATLABSystem: '<S298>/Polynomial Trajectory1'
    // End of SystemInitialize for SubSystem: '<S282>/Trajectory generator'

    // Start for MATLABSystem: '<S282>/MATLAB System1'
    // ========================================================================== 
    //  Fonctions Principales
    // ========================================================================== 
    //  Fonction appeler a l'initialisation
    //  Perform one-time calculations, such as computing constants
    for (i = 0; i < 18; i++) {
      proc_control_node_DW.obj_a.poseList[i] = 999.0;
    }

    proc_control_node_DW.obj_a.poseList[0] = 0.0;
    proc_control_node_DW.obj_a.poseList[2] = 0.0;
    proc_control_node_DW.obj_a.poseList[4] = 0.0;
    proc_control_node_DW.obj_a.poseList[6] = 1.0;
    proc_control_node_DW.obj_a.poseList[8] = 0.0;
    proc_control_node_DW.obj_a.poseList[10] = 0.0;
    proc_control_node_DW.obj_a.poseList[12] = 0.0;
    proc_control_node_DW.obj_a.poseList[14] = 0.0;
    proc_control_node_DW.obj_a.poseList[16] = 0.0;

    // initCond(1,1:7);
    for (i = 0; i < 7; i++) {
      proc_control_node_DW.obj_a.initcond[i] = tmp_g[i];
    }

    proc_control_node_DW.obj_a.i = 2.0;

    // End of Start for MATLABSystem: '<S282>/MATLAB System1'

    // Start for MATLABSystem: '<S282>/MATLAB System'
    //  Fonction Reset
    //  Initialize / reset discrete-state properties
    proc_control_node_DW.obj.linearConvergence =
      proc_control_node_P.MATLABSystem_linearConvergence;
    proc_control_node_DW.obj.quaternionConvergence =
      proc_control_node_P.MATLABSystem_quaternionConverge;
    proc_control_node_DW.obj.TargetThreshold =
      proc_control_node_P.MATLABSystem_TargetThreshold;
    proc_control_node_DW.obj.isInitialized = 1;
    pro_TrajectoryManager_setupImpl(&proc_control_node_DW.obj);

    // End of SystemInitialize for SubSystem: '<S9>/singleWpts Trajectory'

    // SystemInitialize for Atomic SubSystem: '<Root>/Subsystem Controller'
    // Start for SwitchCase: '<S7>/Switch Case'
    //  Fonction reset
    //  Initialize / reset discrete-state properties
    proc_control_node_DW.SwitchCase_ActiveSubsystem_l = -1;

    // SystemInitialize for IfAction SubSystem: '<S7>/Quaternion Non linear MPC (Not for codegen)' 
    // InitializeConditions for Delay: '<S136>/Delay'
    memcpy(&proc_control_node_DW.Delay_DSTATE_a[0],
           &proc_control_node_P.Delay_InitialCondition_g[0], sizeof(real_T) <<
           3U);

    // Start for MATLABSystem: '<S136>/MPC manager'
    memcpy(&proc_control_node_DW.obj_n.Config10[0],
           &proc_control_node_P.Config10[0], 29U * sizeof(real_T));
    memcpy(&proc_control_node_DW.obj_n.Config19[0],
           &proc_control_node_P.Config19[0], 29U * sizeof(real_T));
    for (i = 0; i < 8; i++) {
      proc_control_node_DW.obj_n.Tmin[i] = proc_control_node_P.MPC.tmin;
      proc_control_node_DW.obj_n.Tmax[i] = proc_control_node_P.MPC.tmax;
    }

    memcpy(&proc_control_node_DW.obj_n.MecConst[0],
           &proc_control_node_P.constValues[0], 41U * sizeof(real_T));
    memcpy(&proc_control_node_DW.obj_n.mvInit[0], &proc_control_node_P.Ui[0],
           sizeof(real_T) << 3U);
    proc_control_node_DW.obj_n.eInit = proc_control_node_P.MPCmanager_eInit;
    proc_control_node_DW.obj_n.isInitialized = 1;

    //  Perform one-time calculations, such as computing constants
    proc_control_node_DW.obj_n.init = 0.0;
    memset(&proc_control_node_DW.obj_n.xInit[0], 0, 13U * sizeof(real_T));

    // End of Start for MATLABSystem: '<S136>/MPC manager'
    // End of SystemInitialize for SubSystem: '<S7>/Quaternion Non linear MPC (Not for codegen)' 

    // SystemInitialize for IfAction SubSystem: '<S7>/JoyStick OpenLoop'
    // InitializeConditions for UnitDelay: '<S213>/UD'
    //
    //  Block description for '<S213>/UD':
    //
    //   Store in Global RAM

    //  Initialize / reset discrete-state properties
    for (i = 0; i < 6; i++) {
      proc_control_node_DW.UD_DSTATE[i] =
        proc_control_node_P.DiscreteDerivative_ICPrevScaled;
    }

    // End of InitializeConditions for UnitDelay: '<S213>/UD'

    // Start for MATLABSystem: '<S135>/MATLAB System'
    proc_control_node_DW.obj_m.k = proc_control_node_P.MATLABSystem_k;
    memcpy(&proc_control_node_DW.obj_m.binv[0], &proc_control_node_P.binv[0],
           48U * sizeof(real_T));
    proc_control_node_DW.obj_m.mass = proc_control_node_P.physics.mass;
    proc_control_node_DW.obj_m.volume = proc_control_node_P.physics.volume;
    proc_control_node_DW.obj_m.height = proc_control_node_P.physics.height;
    memcpy(&proc_control_node_DW.obj_m.I[0], &proc_control_node_P.physics.I[0],
           9U * sizeof(real_T));
    proc_control_node_DW.obj_m.RG[0] = proc_control_node_P.physics.RG[0];
    proc_control_node_DW.obj_m.RB[0] = proc_control_node_P.physics.RB[0];
    proc_control_node_DW.obj_m.RG[1] = proc_control_node_P.physics.RG[1];
    proc_control_node_DW.obj_m.RB[1] = proc_control_node_P.physics.RB[1];
    proc_control_node_DW.obj_m.RG[2] = proc_control_node_P.physics.RG[2];
    proc_control_node_DW.obj_m.RB[2] = proc_control_node_P.physics.RB[2];
    for (i = 0; i < 6; i++) {
      proc_control_node_DW.obj_m.AddedMass[i] =
        proc_control_node_P.physics.AddedMass[i];
      proc_control_node_DW.obj_m.CDL[i] = proc_control_node_P.physics.CDL[i];
      proc_control_node_DW.obj_m.CDQ[i] = proc_control_node_P.physics.CDQ[i];
    }

    proc_control_node_DW.obj_m.AF[0] = proc_control_node_P.physics.AF[0];
    proc_control_node_DW.obj_m.AF[1] = proc_control_node_P.physics.AF[1];
    proc_control_node_DW.obj_m.AF[2] = proc_control_node_P.physics.AF[2];
    proc_control_node_DW.obj_m.g = proc_control_node_P.physics.g;
    proc_control_node_DW.obj_m.rho = proc_control_node_P.physics.rho;
    proc_control_node_DW.obj_m.isInitialized = 1;

    // End of Start for MATLABSystem: '<S135>/MATLAB System'
    // End of SystemInitialize for SubSystem: '<S7>/JoyStick OpenLoop'

    // SystemInitialize for IfAction SubSystem: '<S7>/Adaptive MPC Euler '
    // InitializeConditions for Memory: '<S141>/LastPcov'
    //  Perform one-time calculations, such as computing constants
    // [M,C,D,Gq] = AUVModelMatrices(in1,in2)
    //  Initialize / reset discrete-state properties
    memcpy(&proc_control_node_DW.LastPcov_PreviousInput_n[0],
           &proc_control_node_P.LastPcov_InitialCondition[0], 400U * sizeof
           (real_T));

    // InitializeConditions for Memory: '<S141>/Memory'
    for (i = 0; i < 48; i++) {
      proc_control_node_DW.Memory_PreviousInput_h[i] =
        proc_control_node_P.Memory_InitialCondition[i];
    }

    // End of InitializeConditions for Memory: '<S141>/Memory'

    // InitializeConditions for UnitDelay: '<S141>/last_mv'
    memcpy(&proc_control_node_DW.last_mv_DSTATE_j[0],
           &proc_control_node_P.last_mv_InitialCondition[0], sizeof(real_T) <<
           3U);

    // InitializeConditions for Memory: '<S141>/last_x'
    memcpy(&proc_control_node_DW.last_x_PreviousInput[0],
           &proc_control_node_P.last_x_InitialCondition[0], 20U * sizeof(real_T));

    // InitializeConditions for Delay: '<S132>/Delay1'
    memcpy(&proc_control_node_DW.Delay1_DSTATE_c[0],
           &proc_control_node_P.Delay1_InitialCondition[0], sizeof(real_T) << 3U);

    // End of SystemInitialize for SubSystem: '<S7>/Adaptive MPC Euler '

    // SystemInitialize for IfAction SubSystem: '<S7>/Adaptive MPC quaternion '
    // InitializeConditions for Memory: '<S183>/Memory'
    for (i = 0; i < 48; i++) {
      proc_control_node_DW.Memory_PreviousInput[i] =
        proc_control_node_P.Memory_InitialCondition_b[i];
    }

    // End of InitializeConditions for Memory: '<S183>/Memory'

    // InitializeConditions for UnitDelay: '<S183>/last_mv'
    memcpy(&proc_control_node_DW.last_mv_DSTATE[0],
           &proc_control_node_P.last_mv_InitialCondition_k[0], sizeof(real_T) <<
           3U);

    // InitializeConditions for Delay: '<S133>/Delay1' incorporates:
    //   UnitDelay: '<S183>/last_mv'

    memcpy(&proc_control_node_DW.Delay1_DSTATE[0],
           &proc_control_node_P.Delay1_InitialCondition_l[0], sizeof(real_T) <<
           3U);

    // End of SystemInitialize for SubSystem: '<S7>/Adaptive MPC quaternion '
    // End of SystemInitialize for SubSystem: '<Root>/Subsystem Controller'

    // SystemInitialize for Merge: '<S9>/Merge1'
    proc_control_node_B.Merge1 = proc_control_node_P.Merge1_InitialOutput;

    // SystemInitialize for Enabled SubSystem: '<Root>/Send Data to ROS'
    // InitializeConditions for Delay: '<S5>/Delay'
    proc_control_node_DW.Delay_DSTATE_d =
      proc_control_node_P.Delay_InitialCondition_f;

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish2'
    // Start for MATLABSystem: '<S110>/SinkBlock'
    proc_control_node_DW.obj_p.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_p.isInitialized = 1;
    for (i = 0; i < 31; i++) {
      proc_control_node_B.b_zeroDelimTopic_b[i] = tmp_h[i];
    }

    proc_control_node_B.b_zeroDelimTopic_b[31] = '\x00';
    Pub_proc_control_node_104.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_b[0], 1);
    proc_control_node_DW.obj_p.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S110>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish2'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish4'
    // Start for MATLABSystem: '<S112>/SinkBlock'
    proc_control_node_DW.obj_lf.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_lf.isInitialized = 1;
    for (i = 0; i < 26; i++) {
      proc_control_node_B.b_zeroDelimTopic_j[i] = tmp_i[i];
    }

    proc_control_node_B.b_zeroDelimTopic_j[26] = '\x00';
    Pub_proc_control_node_106.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_j[0], 1);
    proc_control_node_DW.obj_lf.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S112>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish4'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish3'
    // Start for MATLABSystem: '<S111>/SinkBlock'
    proc_control_node_DW.obj_mj.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_mj.isInitialized = 1;
    for (i = 0; i < 23; i++) {
      proc_control_node_B.b_zeroDelimTopic_p[i] = tmp_j[i];
    }

    proc_control_node_B.b_zeroDelimTopic_p[23] = '\x00';
    Pub_proc_control_node_105.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_p[0], 1);
    proc_control_node_DW.obj_mj.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S111>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish3'

    // SystemInitialize for Atomic SubSystem: '<S5>/Publish1'
    // Start for MATLABSystem: '<S109>/SinkBlock'
    proc_control_node_DW.obj_lfs.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_lfs.isInitialized = 1;
    for (i = 0; i < 27; i++) {
      proc_control_node_B.b_zeroDelimTopic_hn[i] = tmp_k[i];
    }

    proc_control_node_B.b_zeroDelimTopic_hn[27] = '\x00';
    Pub_proc_control_node_122.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_hn[0], 1);
    proc_control_node_DW.obj_lfs.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S109>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S5>/Publish1'
    for (i = 0; i < 8; i++) {
      // SystemInitialize for Outport: '<S5>/mv' incorporates:
      //   Inport: '<S5>/pwm'

      proc_control_node_B.pwm[i] = proc_control_node_P.mv_Y0;
    }

    // End of SystemInitialize for SubSystem: '<Root>/Send Data to ROS'

    // SystemInitialize for Enabled SubSystem: '<Root>/Modèle Physique'
    // Start for Constant: '<S1>/Initial Body velocity '
    proc_control_node_B.InitialBodyvelocity[0] =
      proc_control_node_P.InitialBodyvelocity_Value[0];

    // Start for Constant: '<S1>/Initial Angular Rates'
    proc_control_node_B.InitialAngularRates[0] =
      proc_control_node_P.InitialAngularRates_Value[0];

    // Start for Constant: '<S1>/Initial Body velocity '
    proc_control_node_B.InitialBodyvelocity[1] =
      proc_control_node_P.InitialBodyvelocity_Value[1];

    // Start for Constant: '<S1>/Initial Angular Rates'
    proc_control_node_B.InitialAngularRates[1] =
      proc_control_node_P.InitialAngularRates_Value[1];

    // Start for Constant: '<S1>/Initial Body velocity '
    proc_control_node_B.InitialBodyvelocity[2] =
      proc_control_node_P.InitialBodyvelocity_Value[2];

    // Start for Constant: '<S1>/Initial Angular Rates'
    proc_control_node_B.InitialAngularRates[2] =
      proc_control_node_P.InitialAngularRates_Value[2];

    // InitializeConditions for TransferFcn: '<S17>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE = 0.0;

    // InitializeConditions for TransferFcn: '<S18>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_o = 0.0;

    // InitializeConditions for TransferFcn: '<S19>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_p = 0.0;

    // InitializeConditions for TransferFcn: '<S20>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_a = 0.0;

    // InitializeConditions for TransferFcn: '<S21>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_f = 0.0;

    // InitializeConditions for TransferFcn: '<S22>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_e = 0.0;

    // InitializeConditions for TransferFcn: '<S23>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_ft = 0.0;

    // InitializeConditions for TransferFcn: '<S24>/Transfer Fcn'
    proc_control_node_X.TransferFcn_CSTATE_fu = 0.0;

    // InitializeConditions for UniformRandomNumber: '<S14>/X Drift'
    i = static_cast<int32_T>(static_cast<uint32_T>(proc_control_node_P.dSeedX) >>
      16U);
    t = static_cast<int32_T>(static_cast<uint32_T>(proc_control_node_P.dSeedX) &
      32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_node_P.dSeedX) - (
      static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed = tseed;
    proc_control_node_DW.XDrift_NextOutput = (proc_control_node_P.dMaxX -
      proc_control_node_P.dMinX) * rt_urand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed) + proc_control_node_P.dMinX;

    // End of InitializeConditions for UniformRandomNumber: '<S14>/X Drift'

    // InitializeConditions for UniformRandomNumber: '<S14>/Y Drift'
    i = static_cast<int32_T>(static_cast<uint32_T>(proc_control_node_P.dSeedY) >>
      16U);
    t = static_cast<int32_T>(static_cast<uint32_T>(proc_control_node_P.dSeedY) &
      32768U);
    tseed = ((((static_cast<uint32_T>(proc_control_node_P.dSeedY) - (
      static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed_a = tseed;
    proc_control_node_DW.YDrift_NextOutput = (proc_control_node_P.dMaxY -
      proc_control_node_P.dMinY) * rt_urand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_a) + proc_control_node_P.dMinY;

    // End of InitializeConditions for UniformRandomNumber: '<S14>/Y Drift'

    // InitializeConditions for Integrator: '<S1>/Integrator' incorporates:
    //   Integrator: '<S1>/Integrator1'

    if (rtmIsFirstInitCond((&proc_control_node_M))) {
      proc_control_node_X.Integrator_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator_CSTATE[2] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[2] = 0.0;
      proc_control_node_X.Integrator1_CSTATE[3] = 0.0;
    }

    proc_control_node_DW.Integrator_IWORK = 1;

    // End of InitializeConditions for Integrator: '<S1>/Integrator'

    // InitializeConditions for Integrator: '<S1>/Integrator1'
    proc_control_node_DW.Integrator1_IWORK = 1;

    // InitializeConditions for Integrator: '<S1>/Integrator2' incorporates:
    //   Integrator: '<S1>/Integrator3'

    if (rtmIsFirstInitCond((&proc_control_node_M))) {
      proc_control_node_X.Integrator2_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator2_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator2_CSTATE[2] = 0.0;
      proc_control_node_X.Integrator3_CSTATE[0] = 0.0;
      proc_control_node_X.Integrator3_CSTATE[1] = 0.0;
      proc_control_node_X.Integrator3_CSTATE[2] = 0.0;
    }

    proc_control_node_DW.Integrator2_IWORK = 1;

    // End of InitializeConditions for Integrator: '<S1>/Integrator2'

    // InitializeConditions for Integrator: '<S1>/Integrator3'
    proc_control_node_DW.Integrator3_IWORK = 1;

    // InitializeConditions for RandomNumber: '<S25>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>
                (proc_control_node_P.BandLimitedWhiteNoise_seed) -
                (static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed_j = tseed;
    proc_control_node_DW.NextOutput = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_j) * proc_control_node_P.WhiteNoise_StdDev
      + proc_control_node_P.WhiteNoise_Mean;

    // End of InitializeConditions for RandomNumber: '<S25>/White Noise'

    // InitializeConditions for RandomNumber: '<S26>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise1_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise1_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>
                (proc_control_node_P.BandLimitedWhiteNoise1_seed) - (
      static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed_d = tseed;
    proc_control_node_DW.NextOutput_b = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_d) *
      proc_control_node_P.WhiteNoise_StdDev_d +
      proc_control_node_P.WhiteNoise_Mean_e;

    // End of InitializeConditions for RandomNumber: '<S26>/White Noise'

    // InitializeConditions for RandomNumber: '<S27>/White Noise'
    i = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise2_seed) >> 16U);
    t = static_cast<int32_T>(static_cast<uint32_T>
      (proc_control_node_P.BandLimitedWhiteNoise2_seed) & 32768U);
    tseed = ((((static_cast<uint32_T>
                (proc_control_node_P.BandLimitedWhiteNoise2_seed) - (
      static_cast<uint32_T>(i) << 16U)) + t) << 16U) + t) + i;
    if (tseed < 1U) {
      tseed = 1144108930U;
    } else if (tseed > 2147483646U) {
      tseed = 2147483646U;
    }

    proc_control_node_DW.RandSeed_e = tseed;
    proc_control_node_DW.NextOutput_g = proc_rt_nrand_Upu32_Yd_f_pw_snf
      (&proc_control_node_DW.RandSeed_e) *
      proc_control_node_P.WhiteNoise_StdDev_e +
      proc_control_node_P.WhiteNoise_Mean_c;

    // End of InitializeConditions for RandomNumber: '<S27>/White Noise'

    // SystemInitialize for Outport: '<S1>/Clean Output'
    proc_control_node_B.y_g[0] = proc_control_node_P.CleanOutput_Y0.Quaternion[0];
    proc_control_node_B.y_g[1] = proc_control_node_P.CleanOutput_Y0.Quaternion[1];
    proc_control_node_B.y_g[2] = proc_control_node_P.CleanOutput_Y0.Quaternion[2];
    proc_control_node_B.y_g[3] = proc_control_node_P.CleanOutput_Y0.Quaternion[3];

    // SystemInitialize for Sum: '<S16>/Sum1' incorporates:
    //   Outport: '<S1>/Sensors Output'

    proc_control_node_B.Quaternion[0] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[0];
    proc_control_node_B.Quaternion[1] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[1];
    proc_control_node_B.Quaternion[2] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[2];
    proc_control_node_B.Quaternion[3] =
      proc_control_node_P.SensorsOutput_Y0.Quaternion[3];

    // End of SystemInitialize for SubSystem: '<Root>/Modèle Physique'

    // SystemInitialize for Enabled SubSystem: '<Root>/ROS Output'
    // SystemInitialize for Atomic SubSystem: '<S72>/Publish'
    // Start for MATLABSystem: '<S84>/SinkBlock'
    proc_control_node_DW.obj_fh.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_fh.isInitialized = 1;
    for (i = 0; i < 23; i++) {
      proc_control_node_B.b_zeroDelimTopic_p[i] = tmp_l[i];
    }

    proc_control_node_B.b_zeroDelimTopic_p[23] = '\x00';
    Pub_proc_control_node_63.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_p[0], 1);
    proc_control_node_DW.obj_fh.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S84>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S72>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S73>/Publish'
    // Start for MATLABSystem: '<S103>/SinkBlock'
    proc_control_node_DW.obj_ap.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_ap.isInitialized = 1;
    for (i = 0; i < 8; i++) {
      b_zeroDelimTopic[i] = tmp_m[i];
    }

    b_zeroDelimTopic[8] = '\x00';
    Pub_proc_control_node_75.createPublisher(&b_zeroDelimTopic[0], 1);
    proc_control_node_DW.obj_ap.isSetupComplete = true;

    // End of Start for MATLABSystem: '<S103>/SinkBlock'
    // End of SystemInitialize for SubSystem: '<S73>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S69>/Publish'
    // Start for MATLABSystem: '<S76>/SinkBlock'
    proc_control_node_DW.obj_kw.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_kw.isInitialized = 1;
    Pub_proc_control_node_41.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_tmp[0], 1);
    proc_control_node_DW.obj_kw.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S69>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S70>/Publish'
    // Start for MATLABSystem: '<S78>/SinkBlock'
    proc_control_node_DW.obj_k.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_k.isInitialized = 1;
    Pub_proc_control_node_243.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_tmp_n[0], 1);
    proc_control_node_DW.obj_k.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S70>/Publish'

    // SystemInitialize for Atomic SubSystem: '<S71>/Publish'
    // Start for MATLABSystem: '<S81>/SinkBlock'
    proc_control_node_DW.obj_ab.matlabCodegenIsDeleted = false;
    proc_control_node_DW.obj_ab.isInitialized = 1;
    Pub_proc_control_node_47.createPublisher
      (&proc_control_node_B.b_zeroDelimTopic_tmp_i[0], 1);
    proc_control_node_DW.obj_ab.isSetupComplete = true;

    // End of SystemInitialize for SubSystem: '<S71>/Publish'
    // End of SystemInitialize for SubSystem: '<Root>/ROS Output'
  }

  // set "at time zero" to false
  if (rtmIsFirstInitCond((&proc_control_node_M))) {
    rtmSetFirstInitCond((&proc_control_node_M), 0);
  }
}

// Model terminate function
void proc_control_nodeModelClass::terminate()
{
  // Terminate for Atomic SubSystem: '<Root>/Subsystem1'
  // Terminate for Atomic SubSystem: '<S10>/Subscribe2'
  // Terminate for MATLABSystem: '<S301>/SourceBlock'
  if (!proc_control_node_DW.obj_mt.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_mt.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S301>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe2'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe3'
  // Terminate for MATLABSystem: '<S302>/SourceBlock'
  if (!proc_control_node_DW.obj_o.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_o.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S302>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe3'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe1'
  // Terminate for MATLABSystem: '<S300>/SourceBlock'
  if (!proc_control_node_DW.obj_hb.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_hb.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S300>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe'
  // Terminate for MATLABSystem: '<S299>/SourceBlock'
  if (!proc_control_node_DW.obj_b.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_b.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S299>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe5'
  // Terminate for MATLABSystem: '<S304>/SourceBlock'
  if (!proc_control_node_DW.obj_f.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_f.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S304>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe5'

  // Terminate for Atomic SubSystem: '<S10>/Subscribe4'
  // Terminate for MATLABSystem: '<S303>/SourceBlock'
  if (!proc_control_node_DW.obj_h.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_h.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S303>/SourceBlock'
  // End of Terminate for SubSystem: '<S10>/Subscribe4'
  // End of Terminate for SubSystem: '<Root>/Subsystem1'

  // Terminate for Atomic SubSystem: '<Root>/ROS Input'
  // Terminate for IfAction SubSystem: '<S3>/Simulation'
  // Terminate for Atomic SubSystem: '<S50>/Subscribe'
  // Terminate for MATLABSystem: '<S58>/SourceBlock'
  if (!proc_control_node_DW.obj_i.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_i.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S58>/SourceBlock'
  // End of Terminate for SubSystem: '<S50>/Subscribe'

  // Terminate for Atomic SubSystem: '<S50>/Subscribe1'
  // Terminate for MATLABSystem: '<S59>/SourceBlock'
  if (!proc_control_node_DW.obj_bg.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_bg.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S59>/SourceBlock'
  // End of Terminate for SubSystem: '<S50>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S50>/Subscribe2'
  // Terminate for MATLABSystem: '<S60>/SourceBlock'
  if (!proc_control_node_DW.obj_df.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_df.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S60>/SourceBlock'
  // End of Terminate for SubSystem: '<S50>/Subscribe2'
  // End of Terminate for SubSystem: '<S3>/Simulation'

  // Terminate for IfAction SubSystem: '<S3>/Real System'
  // Terminate for Atomic SubSystem: '<S49>/Subscribe'
  // Terminate for MATLABSystem: '<S52>/SourceBlock'
  if (!proc_control_node_DW.obj_l.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_l.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S52>/SourceBlock'
  // End of Terminate for SubSystem: '<S49>/Subscribe'

  // Terminate for Atomic SubSystem: '<S49>/Subscribe1'
  // Terminate for MATLABSystem: '<S53>/SourceBlock'
  if (!proc_control_node_DW.obj_d.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_d.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S53>/SourceBlock'
  // End of Terminate for SubSystem: '<S49>/Subscribe1'

  // Terminate for Atomic SubSystem: '<S49>/Subscribe2'
  // Terminate for MATLABSystem: '<S54>/SourceBlock'
  if (!proc_control_node_DW.obj_ow.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_ow.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S54>/SourceBlock'
  // End of Terminate for SubSystem: '<S49>/Subscribe2'
  // End of Terminate for SubSystem: '<S3>/Real System'
  // End of Terminate for SubSystem: '<Root>/ROS Input'

  // Terminate for Enabled SubSystem: '<Root>/Sensor Manager'
  // Terminate for Atomic SubSystem: '<S114>/Publish'
  // Terminate for MATLABSystem: '<S120>/SinkBlock'
  if (!proc_control_node_DW.obj_ag.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_ag.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S120>/SinkBlock'
  // End of Terminate for SubSystem: '<S114>/Publish'

  // Terminate for Atomic SubSystem: '<S113>/Publish'
  // Terminate for MATLABSystem: '<S116>/SinkBlock'
  if (!proc_control_node_DW.obj_e.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_e.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S116>/SinkBlock'
  // End of Terminate for SubSystem: '<S113>/Publish'
  // End of Terminate for SubSystem: '<Root>/Sensor Manager'

  // Terminate for Atomic SubSystem: '<S279>/Subscribe2'
  // Terminate for MATLABSystem: '<S285>/SourceBlock'
  if (!proc_control_node_DW.obj_c.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_c.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S285>/SourceBlock'
  // End of Terminate for SubSystem: '<S279>/Subscribe2'

  // Terminate for IfAction SubSystem: '<S9>/singleWpts Trajectory'
  // Terminate for Atomic SubSystem: '<S282>/Subscribe'
  // Terminate for MATLABSystem: '<S294>/SourceBlock'
  if (!proc_control_node_DW.obj_hd.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_hd.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S294>/SourceBlock'
  // End of Terminate for SubSystem: '<S282>/Subscribe'
  // End of Terminate for SubSystem: '<S9>/singleWpts Trajectory'

  // Terminate for Enabled SubSystem: '<Root>/Send Data to ROS'
  // Terminate for Atomic SubSystem: '<S5>/Publish2'
  // Terminate for MATLABSystem: '<S110>/SinkBlock'
  if (!proc_control_node_DW.obj_p.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_p.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S110>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish2'

  // Terminate for Atomic SubSystem: '<S5>/Publish4'
  // Terminate for MATLABSystem: '<S112>/SinkBlock'
  if (!proc_control_node_DW.obj_lf.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_lf.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S112>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish4'

  // Terminate for Atomic SubSystem: '<S5>/Publish3'
  // Terminate for MATLABSystem: '<S111>/SinkBlock'
  if (!proc_control_node_DW.obj_mj.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_mj.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S111>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish3'

  // Terminate for Atomic SubSystem: '<S5>/Publish1'
  // Terminate for MATLABSystem: '<S109>/SinkBlock'
  if (!proc_control_node_DW.obj_lfs.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_lfs.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S109>/SinkBlock'
  // End of Terminate for SubSystem: '<S5>/Publish1'
  // End of Terminate for SubSystem: '<Root>/Send Data to ROS'

  // Terminate for Enabled SubSystem: '<Root>/ROS Output'
  // Terminate for Atomic SubSystem: '<S72>/Publish'
  // Terminate for MATLABSystem: '<S84>/SinkBlock'
  if (!proc_control_node_DW.obj_fh.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_fh.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S84>/SinkBlock'
  // End of Terminate for SubSystem: '<S72>/Publish'

  // Terminate for Atomic SubSystem: '<S73>/Publish'
  // Terminate for MATLABSystem: '<S103>/SinkBlock'
  if (!proc_control_node_DW.obj_ap.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_ap.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S103>/SinkBlock'
  // End of Terminate for SubSystem: '<S73>/Publish'

  // Terminate for Atomic SubSystem: '<S69>/Publish'
  // Terminate for MATLABSystem: '<S76>/SinkBlock'
  if (!proc_control_node_DW.obj_kw.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_kw.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S76>/SinkBlock'
  // End of Terminate for SubSystem: '<S69>/Publish'

  // Terminate for Atomic SubSystem: '<S70>/Publish'
  // Terminate for MATLABSystem: '<S78>/SinkBlock'
  if (!proc_control_node_DW.obj_k.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_k.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S78>/SinkBlock'
  // End of Terminate for SubSystem: '<S70>/Publish'

  // Terminate for Atomic SubSystem: '<S71>/Publish'
  // Terminate for MATLABSystem: '<S81>/SinkBlock'
  if (!proc_control_node_DW.obj_ab.matlabCodegenIsDeleted) {
    proc_control_node_DW.obj_ab.matlabCodegenIsDeleted = true;
  }

  // End of Terminate for MATLABSystem: '<S81>/SinkBlock'
  // End of Terminate for SubSystem: '<S71>/Publish'
  // End of Terminate for SubSystem: '<Root>/ROS Output'
}

// Constructor
proc_control_nodeModelClass::proc_control_nodeModelClass() :
  proc_control_node_B(),
  proc_control_node_DW(),
  proc_control_node_X(),
  proc_control_node_PrevZCX(),
  proc_control_node_M()
{
  // Currently there is no constructor body generated.
}

// Destructor
proc_control_nodeModelClass::~proc_control_nodeModelClass()
{
  // Currently there is no destructor body generated.
}

// Real-Time Model get method
proc_control_nodeModelClass::RT_MODEL_proc_control_node_T
  * proc_control_nodeModelClass::getRTM()
{
  return (&proc_control_node_M);
}

//
// File trailer for generated code.
//
// [EOF]
//
